<div class="post-text" itemprop="text">
<p>I have a flat csv file with 50 columns (let's call them FirstName, LastName, Address, etc.), that's tab-delimited with quotes around all fields.</p>
<p>I need to convert this to a JSON file, but what's tricky is that some of the CSV columns need to be converted into nested fields, where the nested fields also contains, apart from the column's row value, certain generic fields and values (this is for an API that has required fields). I know in advance which of the columns need to become nested fields.</p>
<p>So, for simplicity's sake, let's say this is the structure of the first row for the first 3 columns in the CSV file:</p>
<pre><code>FirstName    LastName    Address
John         Doe         21 Python Street
</code></pre>
<p>This is the desired JSON output:</p>
<pre><code>{
  "FirstName": "John",
  "LastName": "Doe",
  "Shipping Details": [
    {
    "Generic Field 1": "Generic Value 1",
    "Generic Field 2": "Generic Value 2",
    "Address": "21 Python Street"
    }
   ]
}
</code></pre>
<p>In the full CSV with 50 columns, I also have a few more columns that I need to parse a nested fields, with these extra generic values.</p>
<p>How can I go about doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow"><code>DictReader</code></a> and manipulate the row by adding the <code>Shipping Details</code> and removing the <code>Address</code>.</p>
<pre><code>j = []

with open("/tmp/so.csv") as f:
    reader = csv.DictReader(f, delimiter="\t")
    for row in reader:
        # Add 'Shipping Details'  to row.
        # Note that something like this will have to be done
        # for *every* column you want to change.
        row["Shipping Details"] = {
          "Generic Field 1": "Generic Value 1",
          "Generic Field 2": "Generic Value 2",
          "Address": row["Address"]}

        # We don't need the 'Address' anymore.
        del(row["Address"])

        # Collect the changed row in the list of rows.
        j.append(row)
print(json.dumps(j))
</code></pre>
<p>Output (after lint):</p>
<pre><code>[{
    "LastName": "Doe",
    "Shipping Details": {
        "Address": "21 Python Street",
        "Generic Field 1": "Generic Value 1",
        "Generic Field 2": "Generic Value 2"
    },
    "FirstName": "John"
}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>to continue @FullName answer, maybe you can have a function that creats the new key:</p>
<pre><code>def nested_key(row,key_to_swap, pre_filled_dict):
    pre_filled_dict[key_to_swap]=row[key_to_swap]
    row[key_to_swap]=pre_filled_dict[key_to_swap]
</code></pre>
<p>then you just have to creat the pre_filled_dict ie :</p>
<pre><code>pre_filled_adsress={
          "Generic Field 1": "Generic Value 1",
          "Generic Field 2": "Generic Value 2"}
</code></pre>
<p>and in the for loop :</p>
<pre><code>for row in reader:
    nested_key(row,"Address",pre_filled_address)
    nested_key(row,"2nd_nested_key",second_dict)
</code></pre>
<p>I'm not sure this is needed, I don't know how many of those value you have.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a dictionary defining the columns that have nested dicts and use those to populate that column's value. Keeping your customization to a single consolidated location makes it easier to read/maintain and easier to port to other csv formats.</p>
<pre><code>import copy

CSV_CONFIG = {
    2: {
        # Column 3 (zero-based index 2)
        "name": "Shipping Details",
        "Generic Field 1": "Generic Value 1",
        "Generic Field 2": "Generic Value 2",
       },
    3: {
        # Column 4 (zero-based index 3)
        "name": "Personage",
        "Generic Field 3": "Generic Value 3",
        "Generic Field 4": "Generic Value 4",
       },
}
</code></pre>
<p>Now you populate the <code>data</code> differently based on what's in <code>CSV_CONFIG</code></p>
<pre><code>data = []
with open(file, "r") as fh:
    col_names = fh.readline().strip().split(",")

    for line in fh.readlines():
        line_data = {}
        cols = line.strip().split(",")
        for i in range(len(cols)):
            if i not in CSV_CONFIG:
                #this is not a nested column
                line_data[col_names[i]] = cols[i]
            else:
                #this column is nested
                nested_dict = copy.deepcopy(CSV_CONFIG[i])
                nested_dict[col_names[i]] = cols[i]
                del nested_dict["name"]
                line_data[CSV_CONFIG[i]["name"]] = nested_dict
        data.append(line_data)
</code></pre>
<p>Given your data with an added <code>"personage"</code> column to show multiple nested columns, <code>data</code> is now</p>
<pre><code>[{
    'FirstName': 'John',
    'LastName': 'Doe',
    'Personage': {
        'Generic Field 3': 'Generic Value 3',
        'Generic Field 4': 'Generic Value 4',
        'Vitality': 'Alive'
    },
    'Shipping Details': {
        'Address': '21 Pytohn Street',
        'Generic Field 1': 'Generic Value 1',
        'Generic Field 2': 'Generic Value 2'
    }
}, {
    'FirstName': 'Elvis',
    'LastName': 'Presley',
    'Personage': {
        'Generic Field 3': 'Generic Value 3',
        'Generic Field 4': 'Generic Value 4',
        'Vitality': 'Deceased'
    },
    'Shipping Details': {
        'Address': 'Elvis Presley Blvd',
        'Generic Field 1': 'Generic Value 1',
        'Generic Field 2': 'Generic Value 2'
    }
}]
</code></pre>
</div>
<span class="comment-copy">Please <a href="https://stackoverflow.com/posts/38452159/edit">edit</a> your question and provide a sample of the input that should result in this output.</span>
<span class="comment-copy">When you say "flat" do you mean without rows, i.e. one row? Do you know the column names in advanced, or is there a header?</span>
<span class="comment-copy">You have no problem reading the csv file ? if not, for every lines : creat a dictionary (nested value should be dictionary within the dictionary). then you just have to <code>json.dump(Dict, outfile)</code>, you can dump dictionnary filled with dictionary.</span>
<span class="comment-copy">@juanpa.arrivillaga Yes, there is a header. I also know which of the CSV columns need to be converted into nested fields, and I know which generic fields and values should be in each nested field (see improved example).</span>
<span class="comment-copy">Your text says that there are quotes around all fields, but your sample input data doesn't have those quotes.</span>
<span class="comment-copy">This is the way. But he might have to do what you did on <code>"Shipping Details"</code> key many time if there are a lot of nested value in the csv</span>
<span class="comment-copy">Yes, that is true. The logic could be moved outside the loop into a function. But I see no way to get rid of it.</span>
<span class="comment-copy">@FullName This doesn't quite provide the output I was looking for - the nested field ("Shipping Details") needs to be a list with a dictionary inside, and the record when converted shouldn't be a list, like in your example.</span>
<span class="comment-copy">You can easily adapt my code to get the result you want. I think you get the idea now. If not, read about <code>dict</code>s, <code>list</code>s, and the <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><code>json</code></a> module.</span>
<span class="comment-copy">@pwnsauce That's fine, there's only 3 or 4 columns I need to convert to nested fields.</span>
<span class="comment-copy">Ow... for 2 value you shouldn't bother with this.</span>
<span class="comment-copy">You shouldn't have quotes around <code>key_to_swap</code>.</span>
