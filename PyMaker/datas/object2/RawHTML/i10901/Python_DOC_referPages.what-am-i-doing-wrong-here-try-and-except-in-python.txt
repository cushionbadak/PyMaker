<div class="post-text" itemprop="text">
<p>Please read my code for better understanding of my question. I'm creating a to do list in python. In the while loop where there's try and except, I want to set the user input type as string. And if the user types in an integer I want to print out the message in the "except" block. But it doesn't execute the ValueError if the I type in an integer when I run the code. </p>
<p>Here's the code:</p>
<pre><code>to_do_list = []


print("""

Hello! Welcome to your notes app.

Type 'SHOW' to show your list so far
Type 'DONE' when you'v finished your to do list

""")

#let user show their list
def show_list():
    print("Here is your list so far: {}. Continue adding below!".format(", ".join(to_do_list)))

#append new items to the list
def add_to_list(user_input):
    to_do_list.append(user_input)
    print("Added {} to the list. {} items so far".format(user_input.upper(), len(to_do_list)))

#display the list
def display_list():
    print("Here's your list: {}".format(to_do_list))

print("Enter items to your list below")  
while True:

    #HERE'S WHERE THE PROBLEM IS!

    #check if input is valid
    try:
        user_input = str(input("&gt;"))
    except ValueError:
        print("Strings only!")
    else:    

        #if user wants to show list
        if user_input == "SHOW":
            show_list()
            continue
        #if user wants to end the list
        elif user_input == "DONE":
            new_input = input("Are you sure you want to quit? y/n ")
            if new_input == "y":
                break
            else:
                continue

        #append items to the list
        add_to_list(user_input)


display_list()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>input</code> returns a string. See <a href="https://docs.python.org/3.5/library/functions.html#input" rel="nofollow">the docs</a> for the <code>input</code> function. Casting the result of this function to a string won't do anything.</p>
<p>You could use <a href="https://docs.python.org/3/library/stdtypes.html#str.isdecimal" rel="nofollow"><code>isdecimal</code></a> to check if the string is a numeric.</p>
<pre><code>if user_input.isdecimal():
    print("Strings only!")
</code></pre>
<p>This would fit in nicely with your existing <code>else</code> clause.</p>
</div>
<div class="post-text" itemprop="text">
<p>Two problems with your assumptions:</p>
<ol>
<li>Calling <code>str</code> on an integer will not raise a <code>ValueError</code> because every integer can be represented as a string.</li>
<li>Everything coming back from <code>input</code> (on Python 3 anyway, which it looks like you're using) is <em>already</em> a string. Casting a string to a string will <em>definitely</em> not throw an error.</li>
</ol>
<p>You might want to use <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow"><code>isdigit</code></a> if you want to throw out all-numeric input.</p>
<hr/>
<p>There seems to be some confusion in the comments over the word 'all-numeric'. I mean a string that is entirely composed of numbers, which was my interpretation of the OP not wanting "integers" on his to-do list. If you want to throw out some broader class of stringified numbers (signed integers, floats, scientific notation), <code>isdigit</code> is not the method for you. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, <code>input</code> always returns a string.  For example:</p>
<pre><code>&gt;&gt;&gt; input('&gt;')
&gt;4
'4'
</code></pre>
<p>So <code>str</code> won't throw a ValueError in this case--it's already a string.</p>
<p>If you really want to check and make sure the user didn't enter just numbers you probably want to check to see if your input is all digits, and then error out.</p>
</div>
<span class="comment-copy"><code>str([integer value])</code> is value and will not throw an error - you are simply converting the input (already a string) to a string.</span>
<span class="comment-copy">To throw out numeric input, the best way is to <code>try</code> to turn it into some sort of number (and handle that exception)... e.g. <code>isdigit</code> doesn't handle <code>-50</code> for example.</span>
<span class="comment-copy"><code>isdigit</code> won't find all numerics (only string formated integers)!</span>
