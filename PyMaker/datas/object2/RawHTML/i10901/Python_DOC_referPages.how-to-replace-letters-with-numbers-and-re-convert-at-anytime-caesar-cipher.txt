<div class="post-text" itemprop="text">
<p>I've been coding this for almost 2 days now but cant get it. I've coded two different bits trying to find it.</p>
<p>Code #1
So this one will list the letters but wont change it to the numbers (a-&gt;1, b-&gt;2, ect)</p>
<pre><code>import re
text = input('Write Something- ')
word = '{}'.format(text)
for letter in word:
    print(letter)
    #lists down

Outcome-
Write something- test
t
e
s
t
</code></pre>
<p>Then I have this code that changes the letters into numbers, but I haven't been able to convert it back into letters.
Code #2</p>
<pre><code>u = input('Write Something')
a = ord(u[-1])
print(a)
#converts to number and prints ^^
enter code here
print('')
print(????)
#need to convert from numbers back to letters.

Outcome:
Write Something- test
116
</code></pre>
<p>How can I send a text through (test) and make it convert it to either set numbers (a-&gt;1, b-&gt;2) or random numbers, save it to a .txt file and be able to go back and read it at any time?</p>
</div>
<div class="post-text" itemprop="text">
<p>What youre trying to achieve here is called "caesar encryption".</p>
<p>You for example say normally you would have: A=1, a=2, B=3, B=4, etc...</p>
<p>then you would have a "key" which "shifts" the letters. Lets say the key is "3", so you would shift all letters 3 numbers up and you would end up with: A=4, a=5, B=6, b=7, etc...</p>
<p>This is of course only ONE way of doing a caesar encryption. This is the most basic example. You could also say your key is "G", which would give you:</p>
<p>A=G, a=g, B=H, b=h, etc..   or<br/>
A=G, a=H, B=I, b=J, etc...</p>
<p>Hope you understand what im talking about. Again, this is only one very simple example way. </p>
<p>Now, for your program/script you need to define this key. And if the key should be variable, you need to save it somewhere (write it down). Put your words in a string, and check and convert each letter and write it into a new string.</p>
<p>You then could say (pseudo code!):</p>
<pre><code>var key = READKEYFROMFILE;
string old = READKEYFROMFILE_OR_JUST_A_NORMAL_STRING_:)
string new = "";

for (int i=0, i&lt;old.length, i++){
get the string at i;
compare with your "key";
shift it;
write it in new;
}
</code></pre>
<p>Hope i could help you.</p>
<p>edit:</p>
<p>You could also use a dictionary (like the other answer says), but this is a very static (but easy) way.</p>
<p>Also, maybe watch some guides/tutorials on programming. You dont seem to be that experienced. And also, google "Caesar encryption" to understand this topic better (its very interesting).  </p>
<p>edit2:</p>
<p>Ok, so basically:</p>
<p>You have a variable, called "key" in this variable, you store your key (you understood what i wrote above with the key and stuff?)</p>
<p>You then have a string variable, called "old". And another one called "new". </p>
<p>In old, you write your string that you want to convert. 
New will be empty for now. </p>
<p>You then do a "for loop", which goes as long as the ".length" of your "old" string. (that means if your sentence has 15 letters, the loop will go through itself 15 times and always count the little "i" variable (from the for loop) up).</p>
<p>You then need to try and get the letter from "old" (and save it for short in another vairable, for example <code>char temp = ""</code> ).</p>
<p>After this, you need to compare your current letter and decide how to shift it. 
If thats done, just add your converted letter to the "new" string. </p>
<p>Here is some more precise pseudo code (its not python code, i dont know python well), btw char stands for "character" (letter):</p>
<pre><code>var key = g;
string old =  "teststring";
string new = "";
char oldchar = "";
char newchar = "";

for (int i=0; i&lt;old.length; i++){
oldchar = old.charAt[i];
newchar = oldchar //shift here!!!
new.addChar(newchar);
}
</code></pre>
<p>Hope i could help you ;)</p>
<p>edit3:</p>
<p>maybe also take a look at this:</p>
<p><a href="https://inventwithpython.com/chapter14.html" rel="nofollow noreferrer">https://inventwithpython.com/chapter14.html</a></p>
<p><a href="https://stackoverflow.com/questions/8886947/caesar-cipher-function-in-python">Caesar Cipher Function in Python</a></p>
<p><a href="https://www.youtube.com/watch?v=WXIHuQU6Vrs" rel="nofollow noreferrer">https://www.youtube.com/watch?v=WXIHuQU6Vrs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <code>dictionary</code>:</p>
<pre><code> letters = {'a': 1, 'b': 2, ... }
</code></pre>
<p>And in the loop:</p>
<pre><code>for letter in word:
    print(letters[letter])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To convert to symbol codes and back to characters:</p>
<pre><code>text = input('Write Something')
for t in text:
    d = ord(t)
    n = chr(d)

    print(t,d,n)
</code></pre>
<p>To write into file:</p>
<pre><code>f = open("a.txt", "w")
f.write("someline\n")
f.close()
</code></pre>
<p>To read lines from file:</p>
<pre><code>f = open("a.txt", "r")
lines = f.readlines()

for line in lines:
    print(line, end='')  # all lines have newline character at the end

f.close()
</code></pre>
<p>Please see documentation for Python 3: <a href="https://docs.python.org/3/" rel="nofollow">https://docs.python.org/3/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here are a couple of examples. My method involves mapping the character to the string representation of an integer padded with zeros so it's 3 characters long using <code>str.zfill</code>.</p>
<p>Eg <code>0 -&gt; '000', 42 -&gt; '042', 125 -&gt; '125'</code></p>
<p>This makes it much easier to convert a string of numbers back to characters since it will be in lots of 3</p>
<p>Examples</p>
<pre><code>from string import printable
#'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
from random import sample

# Option 1
char_to_num_dict = {key : str(val).zfill(3) for key, val in zip(printable, sample(range(1000), len(printable))) }

# Option 2
char_to_num_dict = {key : str(val).zfill(3) for key, val in zip(printable, range(len(printable))) }

# Reverse mapping - applies to both options
num_to_char_dict = {char_to_num_dict[key] : key for key in char_to_num_dict }
</code></pre>
<p>Here are two sets of dictionaries to map a character to a number. The first option uses random numbers eg <code>'a' = '042', 'b' = '756', 'c' = '000'</code> the problem with this is you can use it one time, close the program and then the next time the mapping will most definitely not match. If you want to use random values then you will need to save the dictionary to a file so you can open to get the key.</p>
<p>The second option creates a dictionary mapping a character to a number and maintains order. So it will follow the sequence eg <code>'a' = '010', 'b' = '011', 'c' = '012'</code> everytime.</p>
<p>Now I've explained the mapping choices here are the function to convert between</p>
<pre><code>def text_to_num(s):
    return ''.join( char_to_num_dict.get(char, '') for char in s )

def num_to_text(s):
    slices = [ s[ i : i + 3 ] for i in range(0, len(s), 3) ]
    return ''.join( num_to_char_dict.get(char, '') for char in slices )
</code></pre>
<p>Example of use ( with option 2 dictionary )</p>
<pre><code>&gt;&gt;&gt; text_to_num('Hello World!')
'043014021021024094058024027021013062'
&gt;&gt;&gt; num_to_text('043014021021024094058024027021013062')
'Hello World!'
</code></pre>
<p>And finally if you don't want to use a dictionary then you can use <code>ord</code> and <code>chr</code> still keeping with padding out the number with zeros method</p>
<pre><code>def text_to_num2(s):
    return ''.join( str(ord(char)).zfill(3) for char in s )

def num_to_text2(s):
    slices = [ s[ i : i + 3] for i in range(0, len(s), 3) ]
    return ''.join( chr(int(val)) for val in slices )
</code></pre>
<p>Example of use</p>
<pre><code>&gt;&gt;&gt; text_to_num2('Hello World!')
'072101108108111032087111114108100033'
&gt;&gt;&gt; num_to_text2('072101108108111032087111114108100033')
'Hello World!'
</code></pre>
</div>
<span class="comment-copy">This is far too broad, this isn't a code-writing or tutorial service. Also, if you swap with random numbers, how will you convert it back?</span>
<span class="comment-copy">Why not use a dictionary to map specific numbers to each letter. Or do you want random numbers for each letter. Or do you want the ascii representation of each letter?</span>
<span class="comment-copy">It seems you're missing some basics. Why do you use <code>word = '{}'.format(text)</code>?</span>
<span class="comment-copy">I guess you can just map everything to a dictionary or list? You can have <code>for x in INPUT</code> then <code>NEWCHARACTER = DICTIONARY[x]</code> and then append a the new character to some other place like <code>NEWSTRING = NEWSTRING + NEWCHARACTER</code></span>
<span class="comment-copy">hey, i tried usig your code but i dont understand it alot. By any chance could you state a example and what each does? Thanks :)</span>
<span class="comment-copy">ok, done now ^^</span>
<span class="comment-copy">thank you for the help! It works now! :D</span>
<span class="comment-copy">Hey, i really like option 2, but the code isnt working for some reason. Ive changed it around abit to see if it works but it still isnt. Could you go through what each bit is and put up an example? Thanks :)</span>
<span class="comment-copy">Could you explain how it isn't working? Any error? print the dictionary out and see if it looks okay.</span>
