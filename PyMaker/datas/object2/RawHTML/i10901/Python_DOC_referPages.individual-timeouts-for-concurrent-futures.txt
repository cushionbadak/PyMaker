<div class="post-text" itemprop="text">
<p>I see two ways to specify timeouts in <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer"><code>concurrent.futures</code></a>.</p>
<ul>
<li><code>as_completed()</code></li>
<li><code>wait()</code></li>
</ul>
<p>Both methods handle N running futures.</p>
<p>I would like to specify an individual timeout for each future.</p>
<p>Use Case:</p>
<ul>
<li>Future for getting data from DB has a timeout of 0.5 secs.</li>
<li>Future for getting data from a HTTP server has a timeout of 1.2 secs.</li>
</ul>
<p>How do I handle this with <code>concurrent.futures</code>? Or is this library not the right tool?</p>
<h1>Conclusion</h1>
<ul>
<li>AFAIK the solution by mdurant is a good work-around. </li>
<li>I think I will use a different library the next time. Maybe asyncio has better support for this. See: <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep" rel="nofollow noreferrer">https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>How about implementing your own:</p>
<pre><code>wait(dbfutures + httpfutures, timeout=0.5)
[fut.cancel() for fut in bdfutures if not fut.done()]
wait(httpfutures, timeout=0.7)
[fut.cancel() for fut in httpfutures if not fut.done()]
</code></pre>
<p>(or a while loop with sleep/check or wait with short timeout)</p>
</div>
<span class="comment-copy">Yes, I think this is the only solution. Not nice, but a working work-around. I think I will use async io the next time: <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep" rel="nofollow noreferrer">docs.python.org/3/library/asyncio-task.html#asyncio.sleep</a></span>
