<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/20776189/concurrent-futures-vs-multiprocessing-in-python-3">Concurrent.futures vs Multiprocessing in Python 3</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>Please explain to me <strong>what is the difference</strong> between these two classes?</p>
<ul>
<li><a href="https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures" rel="noreferrer">concurrent.futures.ProcessPoolExecutor</a></li>
<li><a href="https://docs.python.org/3/library/multiprocessing.html" rel="noreferrer">multiprocessing.pool.Pool</a></li>
</ul>
<p>I noticed <code>multiprocessing</code> module existed in Python 2. But functionally?</p>
</div>
<div class="post-text" itemprop="text">
<p>As stated in the documentation, <a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor" rel="noreferrer"><code>concurrent.futures.ProcessPoolExecutor</code></a> is a wrapper around a <code>multiprocessing.Pool</code>.  As such, the same limitations of <code>multiprocessing</code> apply (e.g. objects need to be pickleable).</p>
<p>However, <code>concurrent.futures</code> aims to provide an abstract interface that can be used to manage different types of asynchronous tasks in a convenient way.  e.g. changing your async strategy from using process pools to using threads is frequently as simple as changing one or two lines of code (rather than needing to code it all up yourself).  Another (related) benefit in the abstraction is that <code>concurrent.futures</code> provides a single API to remember -- And you can pick the Executor that is most suited for the task.  Is using your process IO bound?  Awesome, use a <code>ThreadPoolExecutor</code>.  Are you going to have trouble speeding things up because of the Global Interpreter Lock (GIL)?  No problem, use a <code>ProcessPoolExecutor</code>.</p>
</div>
<span class="comment-copy">This is not duplicate</span>
<span class="comment-copy">This question is about multiprocessing.Pool, you are not answering the right question.</span>
<span class="comment-copy">@ospider -- Care to elaborate?  As far as I can tell, the question is about what the difference is between <code>ProcessPoolExecutor</code> and <code>multiprocessing.Pool</code>.  The answer (as I see it) is that they have basically the same functionality (the latter is a wrapper around the former that provides a different interface for the purpose of making an interface that can also be utilized with threads by "simply" switching out the Executor class).</span>
