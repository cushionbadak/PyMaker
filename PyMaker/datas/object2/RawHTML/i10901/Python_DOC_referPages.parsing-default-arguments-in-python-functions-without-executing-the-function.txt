<div class="post-text" itemprop="text">
<p>I need to pass a function (without calling it) to another function, but I need to specify a different value for a default argument.</p>
<p>For example:</p>
<pre><code>def func_a(input, default_arg=True):
    pass

def func_b(function):
    pass

func_b(func_a(default_arg=False))
</code></pre>
<p>This, however, <em>calls</em> <code>func_a()</code> and passes the result to <code>func_b()</code>.</p>
<p>How do I set <code>default_arg=False</code> without executing <code>func_a</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a lambda-function. Like this:</p>
<pre><code>func_b(lambda input: func_a(input, default_arg=False))
</code></pre>
<p>In <code>func_b</code> you will have a callable <code>function</code> which accepts argument input and executes <code>func_a</code> with previously specified <code>default_arg</code> argument.</p>
<p><strong>EDITED:</strong></p>
<p>Thanks to <a href="https://stackoverflow.com/users/736308/cdarke">cdarke</a> who is trying to say us that there is only one right way to do this.</p>
<pre><code>from functools import partial, wraps

def func_wrapper(f, **kwargs):
    @wraps(f)
    def wrapper(input):
        return f(input, **kwargs)
    return wrapper

func_b(func_wrapper(func_a, default_arg=False))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="noreferrer"><code>functools.partial()</code> object</a>:</p>
<pre><code>from functools import partial

func_b(partial(func_a, default_arg=False))
</code></pre>
<p>The <code>partial()</code> object is a callable too, when called it'll apply the arguments you gave it to the first argument.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; def func_a(input, default_arg=True):
...     print('func_a() called with {!r}, and default_arg={!r}'.format(input, default_arg))
...
&gt;&gt;&gt; def func_b(function):
...     print('Calling the function')
...     function('Foo bar')
...
&gt;&gt;&gt; func_b(partial(func_a, default_arg=False))
Calling the function
func_a() called with 'Foo bar', and default_arg=False
</code></pre>
</div>
<span class="comment-copy">Will <code>func_b</code> only ever pass <code>input</code> when it calls <code>func_a</code>, or do you also need to handle the possibility of <code>func_b</code> overriding <code>default_arg</code> too. BTW, <code>input</code> is not a good choice of variable name as it shadows the built-in <code>input</code> function.</span>
<span class="comment-copy"><code>lambda</code>s don't have <code>__name__</code> or <code>__doc__</code> attributes.   We don't know if either of those is required by <code>func_b</code>.</span>
<span class="comment-copy">@cdarke thank you for your comment</span>
<span class="comment-copy"><code>partial</code> objects don't have  <code>__name__</code> or __doc__` attributes.  We don't know if that would be an issue, but it can be alleviated using <code>functools.update_wrapper()</code>.</span>
<span class="comment-copy">@cdarke: sure, you can add additional attributes to the <code>partial()</code> instance; they won't be used in the <code>repr()</code> output of the object, though.</span>
