<div class="post-text" itemprop="text">
<p>If we need to read/write some data from/to a large file each time before/after  processing, which of the following way (with some demonstration Python codes) is better?</p>
<ol>
<li><p>Open the file each time when we need to read/writing and close immediately after reading/writing. This way seems to be safer? but slower since we need to open and close a lot of times? 
<code>
for i in processing_loop:
   with open(datafile) as f:
      read_data(...)
   process_data(...)
   with open(resultfile,'a') as f:
      save_data(...)
</code>
This looks awkward but it seems matlab takes this way in its <code>.mat</code> file IO functions <code>load</code> and <code>save</code>. We call <code>load</code> and <code>save</code> directly without explicit <code>open</code> nor <code>close</code>.</p></li>
<li><p>Open the file and close until we finish all the work, faster but at the risk of file remaining open if the program raises errors, or the file being <strong>corrupted</strong> if the program is terminated unexpectedly.
<code>
fr = open(datafile)
fw = open(resultfile,'a')
for i in processing_loop:
   read_data(...)
   process_data(...)
   save_data(...)
fr.close()
fw.close()
</code>
In fact, I had several <code>hdf5</code> files corrupted in this way when the program was killed.</p></li>
</ol>
<p>Seems guys prefer the second with wrapping the loop in <code>with</code>.</p>
<pre><code> with open(...) as f:
     ...
</code></pre>
<p>or in an exception catch block.</p>
<p>I knew these two things and I did used them. But my <code>hdf5</code> files were still corrupted when the program was killed.</p>
<ul>
<li><p>Once I was trying to write a huge array into a hdf5 file and the program was stucked for a long time so I killed it, then the file was corrupted.</p></li>
<li><p>For many times, the program is ternimated because the server is suddenly down or the running time exceeds the wall time.</p></li>
</ul>
<p>I didn't pay attention to if the corruption occurs only when the program is terminated while writing data to file. If so, it means the file structure is corrupted because it's incomplete. So I wander if it would be helpful to flush the data every time, which increase the IO loads but could decrease the chance of writing data to file when terminated.</p>
<p>I tried the first way, accessing the file only when reading/writing data is necessary. But obviously the speed was slow down. What happens in background when we open/close a file handle? Not just make/destroy a pointer? Why <code>open/close</code> operations cost so much?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are concerned about using multiple files within the "with" statement, you can open more than one file with a compound statement, or nest the "with" blocks. This is detailed in the answer here:</p>
<p><a href="https://stackoverflow.com/questions/9282967/how-to-open-a-file-using-the-open-with-statement">How to open a file using the open with statement</a></p>
<p>As for what happens when the program raises errors, that's what try/except blocks are for. If you know what errors are expected, you can easily surround your process_data() calls. Again, one except block can catch multiple exceptions.</p>
<p><a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html#handling-exceptions</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You should wrap your code in solution 2 in a <code>try except finally</code> and always close the file in finally. This way even if there will be errors, your file will close itself.</p>
<p>EDIT: as someone else pointed out you can use <code>with</code> to handle that for you.</p>
</div>
<span class="comment-copy">loading and saving .mat files is an altogether different beast. It's just saving variables from the workspace. The equivalent in python would be something like "shelve". (and in fact, scipy has a loadmat / savemat functionality too). I would understand reading and writing a file as discussed here to be more general than that.</span>
<span class="comment-copy">I am not clear why these are mutually exclusive?  Why can't you just put the <code>for</code> loop inside the <code>with</code> block?  And you can open multiple files with a single <code>with</code> statement.</span>
<span class="comment-copy">@TasosPapastylianou Yes, we are talking about more general situations. I just metioned mat file as a practical example of the first case.   @TheBlackCat  The real code could be fairly long and including lots of nested incidents, I guess many people cannot bear such ugly style as me. And <code>with</code> does not help in case of unexpected termination. As I mentioned, I had hdf5 files corrupted in this way when the server got down and my program was killed.</span>
<span class="comment-copy">Hi @sir_snoopalot , I know <code>with</code> and <code>try..finally..</code>. But they dont always work perfect. See my new edits for some explanations. BTW, the nested <code>with</code> in the link is new to me, better than nested <code>with</code></span>
<span class="comment-copy">Using a <code>with</code> block handles that automatically.</span>
<span class="comment-copy">@TheBlackCat what's a <code>with</code> block, I haven't come across this before; is that like the "try-with-resources" statement in java? (i.e. essentially a try-catch block where resources opened are automatically closed?)</span>
<span class="comment-copy">@TasosPapastylianou   <code>with</code> is python specific. I'm not sure if Java has it. It closes the resources when exits the block, no matter if there is an exception.</span>
<span class="comment-copy">@Lee yeah, so I guess it's the same concept (<a href="http://tutorials.jenkov.com/java-exception-handling/try-with-resources.html" rel="nofollow noreferrer">tutorials.jenkov.com/java-exception-handling/â€¦</a>), making sure resources are closed properly. Except java forces you to use it in the context of a <code>try</code> block, whereas with <code>with</code> this seems to be optional.</span>
<span class="comment-copy">@TasosPapastylianou: It is similar, but not exactly the same. <code>while</code> blocks are used with something called a "context manager", which is a class that defines some specific startup and teardown methods.  These methods are called reliably no matter what happens.  They could open and close a file or other resource, but they don't have to.  In practice, I see three big differences.  First, the python context manager gets to see the exception (if any).  Second, the setup does not have to be the same as the normal class setup.  And third, no exceptions are suppressed by default.</span>
