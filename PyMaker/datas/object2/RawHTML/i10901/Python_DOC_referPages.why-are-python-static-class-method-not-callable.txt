<div class="post-text" itemprop="text">
<p>Why are python instance methods callable, but static methods and class methods not callable?</p>
<p>I did the following:</p>
<pre><code>class Test():
    class_var = 42

    @classmethod 
    def class_method(cls):
        pass 

    @staticmethod
    def static_method():
        pass

    def instance_method(self):
        pass 

for attr, val in vars(Test).items():
    if not attr.startswith("__"):
        print (attr, "is %s callable" % ("" if callable(val) else "NOT"))
</code></pre>
<p>The result is:</p>
<pre><code>static_method is NOT callable
instance_method is  callable
class_method is NOT callable
class_var is NOT callable
</code></pre>
<p>Technically this may be because instance method object might have a particular attribute (not) set in a particular way (possibly <code>__call__</code>). Why such asymmetry, or what purpose does it serve?</p>
<p>I came across this while learning python inspection tools.</p>
<p><strong>Additional remarks from comments:</strong></p>
<p><em>The SO answer linked in the comments says that the static/class methods are <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow">descriptors</a> , which are not callable. Now I am curious, why are descriptors made not callable, since descriptors are class with particular attributes (one of <code>__get__</code>, <code>__set__</code>, <code>__del___</code>) defined.</em></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Why are descriptors not callable?</strong> Basically because they don't need to be. Not every descriptor represents a callable either.</p>
<p>As you correctly note, the descriptor protocol consists of <code>__get__</code>, <code>__set__</code> and <code>__del__</code>. Note no <code>__call__</code>, that's the technical reason why it's not callable. The actual callable is the return value of your <code>static_method.__get__(...)</code>.</p>
<p>As for the philosophical reason, let's look at the class. The contents of the <code>__dict__</code>, or in your case results of <code>vars()</code>, are basically <code>locals()</code> of the <code>class</code> block. If you <code>def</code>ine a function, it gets dumped as a plain function. If you use a decorator, such as <code>@staticmethod</code>, it's equivalent to something like:</p>
<pre><code>def _this_is_not_stored_anywhere():
    pass
static_method = staticmethod(_this_is_not_stored_anywhere)
</code></pre>
<p>I.e., <code>static_method</code> is assigned a return value of the <code>staticmethod()</code> function.</p>
<p>Now, function objects actually implement the decorator protocol - every function has a <code>__get__</code> method on it. This is where the special <code>self</code> and the bound-method behavior comes from. See:</p>
<pre><code>def xyz(what):
    print(what)

repr(xyz)  # '&lt;function xyz at 0x7f8f924bdea0&gt;'
repr(xyz.__get__("hello"))  # "&lt;bound method str.xyz of 'hello'&gt;"
xyz.__get__("hello")()  # "hello"
</code></pre>
<p>Because of how the class calls <code>__get__</code>, your <code>test.instance_method</code> binds to the instance and gets it pre-filled as it first argument.</p>
<p>But the whole point of <code>@classmethod</code> and <code>@staticmethod</code> is that they do something special to avoid the default "bound method" behavior! So they can't return a plain function. Instead they return a descriptor object with a custom <code>__get__</code> implementation.</p>
<p>Of course, you <em>could</em> put a <code>__call__</code> method on this descriptor object, but why? It's  code that you don't need in practice; you can almost never touch the descriptor object itself. If you do (in code similar to yours), you still need special handling for descriptors, because a general descriptor doesn't have to be(have like a) callable - properties are descriptors too. So you don't want <code>__call__</code> in the descriptor protocol. So if a third party "forgets" to implement <code>__call__</code> on something you consider a "callable", your code will miss it.</p>
<p>Also, the object is a descriptor, not a function. Putting a <code>__call__</code> method on it would be masking its true nature :) I mean, it's not <em>wrong</em> per se, it's just ... something that you should never need for anything.</p>
<p>BTW, in case of classmethod/staticmethod, you can get back the original function from their <code>__func__</code> attribute.</p>
</div>
<span class="comment-copy">taks a look at <a href="http://stackoverflow.com/questions/6412146/python-decorator-as-a-staticmethod" title="python decorator as a staticmethod">stackoverflow.com/questions/6412146/â€¦</a></span>
<span class="comment-copy">@MK. The linked answer says the static/class methods are descriptors so they are not callable. Why are decriptors made not callable?</span>
<span class="comment-copy">Also see <a href="http://stackoverflow.com/questions/111234/what-is-a-callable-in-python" title="what is a callable in python">stackoverflow.com/questions/111234/what-is-a-callable-in-python</a></span>
<span class="comment-copy">The SO answer you point to actually claims they "use" descriptors. But according to definition, they indeed <i>are</i> descriptors themselves (implement <code>__get__</code>).</span>
<span class="comment-copy">What makes you think descriptors "are class"? Are you saying a descriptor is a class object, or instance of some class?</span>
