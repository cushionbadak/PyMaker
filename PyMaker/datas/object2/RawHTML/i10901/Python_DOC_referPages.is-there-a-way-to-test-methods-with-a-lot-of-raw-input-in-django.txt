<div class="post-text" itemprop="text">
<p>I have found this URL here: <a href="https://stackoverflow.com/questions/21046717/python-mocking-raw-input-in-unittests">python mocking raw input in unittests</a></p>
<p>and it answers my question somewhat, but what about the case when there is a lot of raw_inputs? something like this...</p>
<pre><code>class MyModel()
    def my_method(self):
        raw_input("do you want to play a game?: ")
        ...do something
        raw_input("Do you want to do something else?: ")
        ...do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple answer: wraps each call to <code>raw_input()</code> in distinct object that you can easily mock.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly, you wanted to mock each and every <code>raw_input</code> method but set different return value. <code>unittest.mock</code> comes up with <code>side_effect</code> properties. that can be helpful in this case.
<a href="https://docs.python.org/3/library/unittest.mock.html#quick-guide" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html#quick-guide</a></p>
<p><a href="https://stackoverflow.com/questions/7665682/python-mock-object-with-method-called-multiple-times">Python Mock object with method called multiple times</a></p>
<p>The key point here is the paramater of the <code>raw_input</code> function.</p>
<p>Example:</p>
<pre><code>from unittest import mock
from unittest import TestCase

class MyTest(TestCase):
    @mock.patch.object(__builtins__, 'raw_input')
    def test_my_method(self, mock_input):
        # If raw_input called thrice in the my_method
        mock_input.side_effect = lambda param: {'First': 'Great', 'Second': 'Good', 'Third':
'Awesome'}.get(param, 'Default return')
        my_class = actual_module.MyModel()
        self.assertEqual(my_class.my_method(), 'GreatGoodAwesome')
</code></pre>
<p>Here 'First', 'Second' 'Third' are the actual string of the raw_input used in the method.
So the only thing you need to modify is to replace the 'First' with 'do you want to play a game?: ' and so on.</p>
<p>And Assuming <code>my_method</code> returns the concatenation of the response of the raw_input method.
Please note that code is not properly tested.</p>
</div>
<span class="comment-copy">If your class is supposed to be a "model" (in the MVC meaning) then it should NOT have anything like <code>raw_input()</code> calls...</span>
<span class="comment-copy">its more like backend methods for managing classes</span>
<span class="comment-copy">Even then it has nothing to do in a model class... Use a distinct class (or set of classes) to handle UI (if it's a Django project then custom management commands come to mind).</span>
<span class="comment-copy">i've been reading over those docs and I think that will do the trick for me but I am unsure about how to actually execute it in my example, could you write a simple example if you have time?</span>
