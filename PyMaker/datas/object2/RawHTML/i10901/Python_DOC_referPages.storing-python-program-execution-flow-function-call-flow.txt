<div class="post-text" itemprop="text">
<p>I am developing a project in which I have to store all the function that were called in each request-response cycle and store them. I do not need to store values of the variable, all I need to store is function that we were called with their parameters and their order in execution. I am using mongodb to store this trace.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a function decorator for convenience.</p>
<pre><code>import functools
import logging

def log_me(func):
    @functools.wraps(func)
    def inner(*args, **kwargs):
        logging.debug('name: %s, args: %s, kwargs: %s', func.__name__, args, kwargs)                                        
        return func(*args, **kwargs)
    return inner
</code></pre>
<p>Then decorate your function(s) to log.</p>
<pre><code>@log_me
def test(x):
    return x + 2
</code></pre>
<p>Test call.</p>
<pre><code>In [10]: test(3)
DEBUG:root:name: test, args: (3,), kwargs: {}
Out[10]: 5
</code></pre>
<p>If you wanted to store the entries in MongoDB directly instead of first logging to the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow"><code>logging</code> module</a> you can replace the <code>logging.debug</code> line with code that creates an entry in your database.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/sys.html#sys.settrace" rel="nofollow">sys.settrace</a> traces a function for debugging but can be modified for this problem. Maybe something like <a href="https://pymotw.com/2/sys/tracing.html" rel="nofollow">this</a> - </p>
<pre><code>import sys

def trace_calls(frame, event, arg):
    if event != 'call':
        return
    co = frame.f_code
    func_name = co.co_name
    if func_name == 'write':
        # Ignore write() calls from print statements
        return
    func_line_no = frame.f_lineno
    func_filename = co.co_filename
    caller = frame.f_back
    caller_line_no = caller.f_lineno
    caller_filename = caller.f_code.co_filename
    print 'Call to %s on line %s of %s from line %s of %s' % \
        (func_name, func_line_no, func_filename,
         caller_line_no, caller_filename)
</code></pre>
<p>Also see <a href="https://docs.python.org/2/library/profile.html" rel="nofollow">profiling</a>. It describes how often and for how long various parts of the program executed </p>
</div>
<span class="comment-copy">You might look into the <a href="https://docs.python.org/2/library/sys.html#sys.settrace" rel="nofollow noreferrer"><code>sys.settrace</code></a> function to see if it meets your needs.</span>
<span class="comment-copy">Any reason not to use the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer"><code>logging</code></a> module?</span>
