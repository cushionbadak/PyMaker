<div class="post-text" itemprop="text">
<p>So, I have C++ class that I wrap in C so I can use it in Python using ctypes.
Declaration of C++ class:</p>
<pre><code>// Test.h
class Test
{
public:
   static double Add(double a, double b);
};


//Test.cpp
#include "stdafx.h"
#include "Test.h"

double Test::Add(double a, double b)
{
   return a + b;
}
</code></pre>
<p>C wrap:</p>
<pre><code>// cdll.h
#ifndef WRAPDLL_EXPORTS
#define WRAPDLL_API __declspec(dllexport) 
#else
#define WRAPDLL_API __declspec(dllimport) 
#endif

#include "Test.h"
extern "C"
{
   WRAPDLL_API struct TestC;

   WRAPDLL_API TestC* newTest();
   WRAPDLL_API double AddC(TestC* pc, double a, double b);
}

//cdll.cpp
#include "stdafx.h"
#include "cdll.h"

TestC* newTest()
{
   return (TestC*) new Test;
}

double AddC(TestC* pc, double a, double b)
{
   return ((Test*)pc)-&gt;Add(a, b);
}
</code></pre>
<p>Python script:</p>
<pre><code>import ctypes
t = ctypes.cdll('../Debug/cdll.dll')
a = t.newTest()
t.AddC(a, 2, 3)
</code></pre>
<p>Result of t.AddC(a, 2, 3) is always some negative integer.
There is a problem with a pointer, but I do not know what is a problem.
Does anyone have any ideas? </p>
</div>
<div class="post-text" itemprop="text">
<p>As <code>AddC</code> is a static function the pointer is not your problem.</p>
<p>You need to pass <code>double</code> values to <code>AddC</code>, and get a double type back:</p>
<pre><code>t.AddC.restype = c_double
t.AddC(a, c_double(2), c_double(3))
</code></pre>
<p>The <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow">documentation for ctype</a> explains all this.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/ctypes.html#return-types" rel="nofollow">As stated in the documentation</a></p>
<blockquote>
<p>By default functions are assumed to return the C int type. Other return types can be specified by setting the <code>restype</code> attribute of the function object.</p>
</blockquote>
<p>So just add</p>
<pre><code>t.AddC.restype = c_double
t.AddC(a, 2.0, 3.0)
</code></pre>
<p>and you'll get <code>5.0</code> instead.</p>
</div>
<span class="comment-copy">Show us your complete C and C++ code.</span>
<span class="comment-copy">I edited the question, now there is complete C and C++ code</span>
<span class="comment-copy">Thanks. It works.</span>
<span class="comment-copy">2 and 3 are probably passed as integers, so the result might not be 5.0.</span>
<span class="comment-copy">Oh right, that's true. Thanks. Maybe one should set <code>argtypes</code> as well.</span>
<span class="comment-copy">Actually you have to do it like this</span>
