<div class="post-text" itemprop="text">
<p>I have duplicates in list of dictionary but i could not make it unqiue when i use set in python</p>
<pre><code>&gt;&gt;&gt; b = [
    {"email_address": "aaa", "verify_score": "75"},
    {"email_address": "bbb", "verify_score": "75"},
    {"email_address": "Emailjcb.ab.baseball@gmail.com", "verify_score": "10"},
    {"email_address": "aaa", "verify_score": "75"},
    {"email_address": "carolpaterick@gmail.com", "verify_score": "10"},
    {"email_address": "37a11ce00909300817u2ca1bb5ka40e8422d4bc38b2@mail.gmail.com", "verify_score": "10"},
]
&gt;&gt;&gt; b = set(list(b))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'dict'
&gt;&gt;&gt; 
</code></pre>
<p>Error</p>
<pre><code>Traceback (most recent call last):
      File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    TypeError: unhashable type: 'dict'
</code></pre>
<p>How to make this list of dictionary unique</p>
<pre><code>b = [{"email_address": "aaa", "verify_score": "75"}, {"email_address": "bbb", "verify_score": "75"}, {"email_address": "Emailjcb.ab.baseball@gmail.com", "verify_score": "10"}, {"email_address": "aaa", "verify_score": "75"}, {"email_address": "carolpaterick@gmail.com", "verify_score": "10"}, {"email_address": "37a11ce00909300817u2ca1bb5ka40e8422d4bc38b2@mail.gmail.com", "verify_score": "10"}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python dictionaries are <em>unhashable</em> which means they are mutable containers. They are not integers or strings that are always the same; the order of contents can change but semantically be the same.</p>
<p>What you could do is try to change the dictionaries into frozensets, or some other hashable type.</p>
<pre><code>&gt;&gt;&gt; unhashable = {'b': 'a', 'a': 'b'}
&gt;&gt;&gt; hashable = frozenset(unhashable.items())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As suggested by Julien in the comments, you can convert to a hashable type like tuple, and then do your unique over that:</p>
<pre><code>&gt;&gt;&gt; set(tuple(d.items()) for d in b)
set([(('verify_score', '10'), ('email_address', 'carolpaterick@gmail.com')), (('verify_score', '10'), ('email_address', '37a11ce00909300817u2ca1bb5ka40e8422d4bc38b2@mail.gmail.com')), (('verify_score', '10'), ('email_address', 'Emailjcb.ab.baseball@gmail.com')), (('verify_score', '75'), ('email_address', 'bbb')), (('verify_score', '75'), ('email_address', 'aaa'))])
</code></pre>
</div>
<span class="comment-copy">Why do you want to do this? (i.e. what is your end goal?) Chances are you are not tackling your problem with the best approach. If you DO need to do this, then I guess you can somehow convert your <code>dict</code> to a hashable type like <code>tuple</code> first, then use <code>set</code>, and finally convert back to <code>dict</code>.</span>
<span class="comment-copy">Your dictionaries are all unique because some keys are starting with "verify..." while others start with "verfiy..."</span>
<span class="comment-copy">Do you want to get rid of an email address that appears twice, or if the email address and score appear twice?</span>
<span class="comment-copy">@BurhanKhalid yes exactly  this is occuring twice "{"email_address": "aaa", "verify_score": "75"}"</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/11092511/python-list-of-unique-dictionaries">Python - List of unique dictionaries</a></span>
<span class="comment-copy">still results are same</span>
<span class="comment-copy">Try: <code>b = map(dict, set(tuple(d.items()) for d in b))</code></span>
<span class="comment-copy">Use frozensets instead of tuples. If you use tuples then the order of the elements in the dict (yes, I really just said order of elements in a dict) can create differences between dicts with the same elements. Try it - run that piece of code a few times and see if it reliably removes all duplicates.</span>
<span class="comment-copy">@Rawing i get the same result each time ... won't the keys be sorted alphabetically?</span>
<span class="comment-copy">@maxymoo My bad, I read in the documentation that the order is arbitrary, but arbitrary != random. The python3 documentation however does mention this: <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer"><code>[the order] depends on the dictionaryâ€™s history of insertions and deletions</code></a>. I'd use frozensets just to be on the safe side.</span>
