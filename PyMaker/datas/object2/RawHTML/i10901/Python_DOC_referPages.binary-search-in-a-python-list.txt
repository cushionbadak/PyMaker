<div class="post-text" itemprop="text">
<p>I am trying to perform a binary search on a list in python. List is created using command line arguments. User inputs the number he wants to look for in the array and he is returned the index of the element. For some reason, the program only outputs 1 and None. Code is below.
Any help is extremely appreciated. </p>
<pre><code>import sys

def search(list, target):
  min = 0
  max = len(list)-1
  avg = (min+max)/2
  while (min &lt; max):
    if (list[avg] == target):
      return avg
    elif (list[avg] &lt; target):
      return search(list[avg+1:], target)
    else:
      return search(list[:avg-1], target)

  print "The location of the number in the array is", avg

# The command line argument will create a list of strings                               
# This list cannot be used for numeric comparisions                                     
# This list has to be converted into a list of ints                                     
def main():

  number = input("Please enter a number you want to search in the array !")
  index = int(number)
  list = []
  for x in sys.argv[1:]:
    list.append(int(x))
  print "The list to search from", list

  print(search(list, index))

if __name__ == '__main__':
  main()

CL :
Anuvrats-MacBook-Air:Python anuvrattiku$ python binary_search.py 1 3 4 6 8 9 12 14 16 17 27 33 45 51 53 63 69 70
Please enter a number you want to search in the array !69
The list to search from [1, 3, 4, 6, 8, 9, 12, 14, 16, 17, 27, 33, 45, 51, 53, 63, 69, 70]
0
Anuvrats-MacBook-Air:Python anuvrattiku$ 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, there are some little mistakes in your code. To find them, you should either use a debugger, or at least add traces to understand what happens. Here is your original code with traces that make the problems self evident:</p>
<pre><code>def search(list, target):
  min = 0
  max = len(list)-1
  avg = (min+max)/2
  print list, target, avg
  ...
</code></pre>
<p>You can immediately see that:</p>
<ul>
<li>you search in a sub array that skips <code>avg-1</code> when you are <em>below</em> avg</li>
<li>as you search in a sub array you will get the index <em>in that subarray</em></li>
</ul>
<p>The fixes are now trivial:</p>
<pre><code>elif (list[avg] &lt; target):
      return avg + 1 + search(list[avg+1:], target)  # add the offset
    else:
      return search(list[:avg], target)  # sublist ends below the upper limit
</code></pre>
<p>That's not all, when you end the loop with <code>min == max</code>, you do not return anything (meaning you return None). And last but not least <strong>never</strong> use a name from the standard Python library for your own variables.</p>
<p>So here is the fixed code:</p>
<pre><code>def search(lst, target):
  min = 0
  max = len(lst)-1
  avg = (min+max)/2
  # uncomment next line for traces
  # print lst, target, avg  
  while (min &lt; max):
    if (lst[avg] == target):
      return avg
    elif (lst[avg] &lt; target):
      return avg + 1 + search(lst[avg+1:], target)
    else:
      return search(lst[:avg], target)

  # avg may be a partial offset so no need to print it here
  # print "The location of the number in the array is", avg 
  return avg
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python2 and Python3 you can use <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer">bisect</a> as written in the comments.
Replace your search with the following</p>
<pre><code>from bisect import bisect_left

def search(alist, item):
    'Locate the leftmost value exactly equal to item'
    i = bisect_left(alist, item)
    if i != len(alist) and alist[i] == item:
        return i
    raise ValueError

alist = [1,2,7,8,234,5,9,45,65,34,23,12]
x = 5
alist.sort() # bisect only works on sorted lists
print(search(a, x)) # prints 2 as 5 is on position 2 in the sorted list
</code></pre>
<p>Also, the <a href="https://code.activestate.com/recipes/577197-sortedcollection/" rel="nofollow noreferrer">AS SortedCollection (Python recipe)</a> could be useful.</p>
<p>The following code (<a href="http://interactivepython.org/runestone/static/pythonds/SortSearch/TheBinarySearch.html" rel="nofollow noreferrer">from here</a>) performs the binary search and returns position and if the item was found at all.</p>
<pre><code>def binarySearch(alist, item):
    first = 0
    last = len(alist)-1
    found = False

    while first&lt;=last and not found:
        pos = 0
        midpoint = (first + last)//2
        if alist[midpoint] == item:
            pos = midpoint
            found = True
        else:
            if item &lt; alist[midpoint]:
                last = midpoint-1
            else:
                first = midpoint+1
    return (pos, found)
</code></pre>
<p>Will return <code>(2, True)</code> if used in the example above.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason you aren't getting correct result is because in every recursive call your code is sending sliced array. So the array length keeps reducing. Ideally you should work out a way to send original array and work with only start, end indices.</p>
</div>
<div class="post-text" itemprop="text">
<p>@Serge Ballesta 's solution is undoubtly the correct answer to this question.</p>
<p>I am just going to add another way of solving this:</p>
<pre><code>def search(arr, item, start, end):

  if end-start == 1:
    if arr[start] == item:
        return start
    else:
        return -1;

  halfWay = int( (end-start) / 2)

  if arr[start+halfWay] &gt; item:
    return search(arr, item, start, end-halfWay)
  else:
    return search(arr, item, start+halfWay, end)

def binarysearch(arr, item):
  return search(arr, item, 0, len(arr))

arr = [1, 3, 4, 6, 8, 9, 12, 14, 16, 17, 27, 33, 45, 51, 53, 63, 69, 70]

print("Index of 69: " + str(binarysearch(arr, 69))) # Outputs: 16
</code></pre>
</div>
<span class="comment-copy">You do know, that binary search requires a sorted array/list to work? It's not the only wrong thing with your algorithm. And BTW, never ever call a variable <code>list</code> or any other built-in type or function. And why do you print inside a function that returns <code>arg</code>. It won't ever be printed.</span>
<span class="comment-copy">Also there's binary search built in: <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer">docs.python.org/3/library/bisect.html</a></span>
<span class="comment-copy">@jonrsharpe I believe that is a homework assignment.</span>
<span class="comment-copy">@EliKorvigo that seems very probable.</span>
<span class="comment-copy">@Eli Korvigo : Yes I am aware that it needs a sorted list. I have edited to display the command line arguments. I dont understand why it is not printing the index of the element. I tried commenting the print statement in the function but it still prints 0. That is what is not clear to me</span>
<span class="comment-copy">That solves the problem. Thanks a lot buddy!</span>
<span class="comment-copy">could you explain your point of ending the loop with min==max a bit</span>
<span class="comment-copy">In the first code segment, don't you mean <code>print(search(alist,x))</code>?</span>
<span class="comment-copy">fixed ^ COMMENT</span>
