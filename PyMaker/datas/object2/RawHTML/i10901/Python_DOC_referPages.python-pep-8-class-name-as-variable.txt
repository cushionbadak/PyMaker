<div class="post-text" itemprop="text">
<p>Which is the convention according to PEP 8 for writing variables that identify class names (not instances)?</p>
<p>That is, given two classes, <code>A</code> and <code>B</code>, which of the following statements would be the right one?</p>
<pre><code>target_class = A if some_condition else B
instance = target_class()
</code></pre>
<p>or</p>
<pre><code>TargetClass = A if some_condition else B
instance = TargetClass()
</code></pre>
<p><hr/>
As stated in the style guide,</p>
<blockquote>
<p><strong>Class Names</strong>:</p>
<p>Class names should normally use the CapWords convention.</p>
</blockquote>
<p>But also</p>
<blockquote>
<p><strong>Method Names and Instance Variables:</strong></p>
<p>Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability.</p>
</blockquote>
<p>In my opinion, these two conventions clash and I can't find which one prevails.</p>
</div>
<div class="post-text" itemprop="text">
<p>In lack of a specific covering of this case in PEP 8, one can make up an argument for both sides of the medal:</p>
<p>One side is: As <code>A</code> and <code>B</code> both are variables as well, but hold a reference to a class, use CamelCase (<code>TargetClass</code>) in this case.</p>
<p>Nothing prevents you from doing</p>
<pre><code>class A: pass
class B: pass
x = A
A = B
B = x
</code></pre>
<p>Now <code>A</code> and <code>B</code> point to the respectively other class, so they aren't really fixed to the class.</p>
<p>So <code>A</code> and <code>B</code> have the only responsibility to hold a class (no matter if they have the same name or a different one), and so has <code>TargetClass</code>.</p>
<hr/>
<p>In order to remain unbiased, we as well can argue in the other way: <code>A</code> and <code>B</code> are special in so far as they are created along with their classes, and the classes' internals have the same name. In so far they are kind of "original", any other assignment should be marked special in so far as they are to be seen as a variable and thus in <code>lower_case</code>.</p>
<hr/>
<p>The truth lies, as so often, somewhere in the middle. There are cases where I would go one way, and others where I would go the other way.</p>
<p>Example 1: You pass a class, which maybe should be instantiated, to a method or function:</p>
<pre><code>def create_new_one(cls):
    return cls()

class A: pass
class B: pass

print(create_new_one(A))
</code></pre>
<p>In this case, <code>cls</code> is clearly of very temporary state and clearly a variable; can be different at every call. So it should be <code>lower_case</code>.</p>
<p>Example 2: Aliasing of a class</p>
<pre><code>class OldAPI: pass
class NewAPI: pass
class ThirdAPI: pass
CurrentAPI = ThirdAPI
</code></pre>
<p>In this case, <code>CurrentAPI</code> is to be seen as a kind of alias for the other one and remains constant throughout the program run. Here I would prefer <code>CamelCase</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I personally think that whether the variable you mentioned, which holds a reference to a class, is defined as a temporary variable (for example in a procedure or function) or as a derivation from an existing class in the global spectrum has the most weight in the case of which one to use. So to summarise from the reply above:</p>
<ul>
<li><p>If the variable is temporary, e.g. inside a function or used in a single instance in the solving of a problem, it should be <code>lower_case</code> with underscore separation.</p></li>
<li><p>If the variable is within the global spectrum, and is defined along with the other classes as an alias or derivation to use to create objects in the body of the program, it should be defined using <code>CamelCase</code>.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>In case of doubt I would do the same as Python developers. They wrote the PEP-8 after all.</p>
<p>You can consider your line:</p>
<pre><code>target_class = A if some_condition else B
</code></pre>
<p>as an in-line form of the pattern:</p>
<pre><code>target_class = target_class_factory()
</code></pre>
<p>and there is a well-known example for it in the Python library, the <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow">namedtuple</a>, which uses CamelCase.</p>
</div>
<div class="post-text" itemprop="text">
<p>I finally found some light in the <a href="https://www.python.org/dev/peps/pep-0008/#class-names" rel="nofollow">style guide</a>:</p>
<blockquote>
<p><strong>Class Names</strong></p>
<p>[...]</p>
<p>The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable.</p>
</blockquote>
<p><em>may be used</em> is not a strong statement, but it covers the case, as the variable was intended to be used as a callable.</p>
<p>So, for general purpose I think that</p>
<pre><code>target_class = A if some_condition else B
instance = target_class()
</code></pre>
<p>is better than</p>
<pre><code>TargetClass = A if some_condition else B
instance = TargetClass()
</code></pre>
</div>
<span class="comment-copy">Classes use CamelCase.  Variable names (instances) use_underscore_lower_case</span>
<span class="comment-copy">Why didn't you <a href="https://www.python.org/dev/peps/pep-0008/#class-names" rel="nofollow noreferrer">just look it up</a>?</span>
<span class="comment-copy">@jonrsharpe I did, but I still find it unclear. Class names should normally use the CapWords convention, ok, but variables don't. These two conventions clash, in my opinion, so I don't know which one prevails.</span>
<span class="comment-copy">I would lean more towards <code>variable_style</code>. I can't see anything immediately in PEP8 that answers this, but thinking of it as a variable makes more sense to me. Using <code>ClassStyle</code> makes it look like it is the natural name of a class that is defined somewhere else in my code.</span>
<span class="comment-copy">I don't think PEP8 specifically mentions this, but I don't think it needs to, it's a variable, it references a type but it's still a variable so I'd use the variable style.</span>
<span class="comment-copy">I see that the decision is made by your opinion (which IMO makes sense), but it's not completely convincing. The opposite option is also well defended at the comments.</span>
<span class="comment-copy">@LostMyGlasses I now show both sides unbiased and show when I would use the one and when the other.</span>
<span class="comment-copy">I think that both cases are well explained, and as seen that it is a matter of personal decision, your tips are helpful. Thanks!</span>
<span class="comment-copy">Wow, that's a good example. However, I'd like to know not only <i>how</i> to do it, but also <i>why</i>.</span>
