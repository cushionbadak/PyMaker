<div class="post-text" itemprop="text">
<p>I've written a program that reads a CSV file and outputs the contents as insert statements. I then wrote an execute program that <em>should</em> take the output of the CSV parser program and write it to a .txt file but instead of writing the entire output it only writes the first statement. </p>
<p>Here is the code for the executor:</p>
<pre><code>import sys

with open('insert.txt', 'wb') as f:
    subprocess.check_call(["python", "CSVParserMultiple.py"], stdout=f)
</code></pre>
<p>And the code for the parser:</p>
<pre><code>import csv, os

path = 'C:/Users/user/Desktop/test/'
for file in os.listdir(path):
    if file.endswith('.csv'):
# print ('Parsing file: ' + os.path.basename(path + file))
        openFile = open(path + file)
        csvFile = csv.reader(openFile)
        getHeader = next(csvFile)
        columnHeaders = map((lambda x: "'" + x + "'"), getHeader[:-1])
        insert = 'INSERT INTO testing (' + "'ID', 'VehicleID', " + ', '.join(columnHeaders) + ') VALUES '
        for row in csvFile:
            values = map((lambda x: "'" + x.strip() + "'"), row[:-1])
            print (insert + "(" + ", ".join(values) + ");")
        openFile.close()
</code></pre>
<p>I'm not entirely sure that it makes sense to have them as two separate programs but I could not get them to run as defined functions in the same program for the life of me. <strong>How can I get the execution program to output all the lines of the parser program instead of just a single line? And how can I combine them into one program?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>You are making things more complicated than they need to be.  Just nest your open statements using <strong>with</strong>. One program.  And it prints to the screen and writes to a file.</p>
<pre><code>import csv, os

path = 'C:/Users/user/Desktop/test/'
for file in os.listdir(path):
    if file.endswith('.csv'):
        # print ('Parsing file: ' + os.path.basename(path + file))
        with open(path + file) as infile:
            with open(path+file+".txt",'w') as outfile:
                csvFile = csv.reader(infile)
                getHeader = next(csvFile)
                columnHeaders = map((lambda x: "'" + x + "'"), getHeader[:-1])
                insert = 'INSERT INTO testing (' + "'ID', 'VehicleID', " + ', '.join(columnHeaders) + ') VALUES '
                for row in csvFile:
                    values = map((lambda x: "'" + x.strip() + "'"), row[:-1])
                    print (insert + "(" + ", ".join(values) + ");")
                    outfile.write(insert + "(" + ", ".join(values) + ");" + "\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if this would work for you but you can use the &gt;/&gt;&gt; operator to have stdout be re-routed to a file.</p>
<p><strong>Edit: The difference between &gt; and &gt;&gt; is that &gt;&gt; appends to the end of the file while &gt; truncates the file</strong></p>
<pre><code>$python program.py &gt;&gt; output.txt
</code></pre>
<p>To combine the programs you could have the executor program be defined as the main function by defining it as </p>
<pre><code>def main():
    &lt;executor code here&gt;
if __name__ == "__main__":
     main()
</code></pre>
<p>Then you can redirect stdout to a file by using </p>
<pre><code>sys.stdout = open("file",'w')
</code></pre>
<p>Similar question: <a href="https://stackoverflow.com/questions/4675728/redirect-stdout-to-a-file-in-python">Redirect stdout to a file in Python?</a></p>
</div>
<span class="comment-copy">You should place those operations in functions.  If you want to be able to reuse modules and call them from other scripts, you need to install them by creating a python package/module.</span>
<span class="comment-copy">Calling a python file via subprocess is pretty ridiculous. Don't do that. If you <i>need</i> to separate it out and a different function isn't good enough, then create a <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">module of your own</a></span>
<span class="comment-copy">Not sure why only the first line is showing up in the output file.  But to combine the two scripts, just put the <code>with open</code> statement in the second script, and then use <code>f.write('something\n')</code> instead of <code>print</code>.</span>
<span class="comment-copy">Two small errors, otherwise this is exactly what I was looking for. The first being to change <code>with open(path + file + ".txt") as outfile:</code> to <code>with open(path + file + ".txt", "w") as outfile:</code> to allow for write privileges. And the second is that the proper output is displayed in the shell but in the .txt file only the header is printed with no subsequent values afterwards. I am not quite sure how to fix this one though, but thank you so much for the help.</span>
<span class="comment-copy">You might be having a problem with the ", ".join statement if your values are numeric and not string.  I'd print out "row" and "values"  to see if the conversion is going as expected.  And I'd use a test file that only had 5 rows of data in it.  That way any error messages wont be lost due to scrolling.</span>
<span class="comment-copy"><code>print(row)</code> shows that each of the values are indeed strings (for ex. - <code>'11:47'</code>) although they contain numbers. <code>print(values)</code> results in <code>&lt;map object at 0x0000000000003289845&gt;</code>. I am not sure what this means but seeing that the <code>(insert + "(" + ", ".join(values) + ");")</code> statement outputs properly in shell I would assume that both <code>row</code> and <code>values</code> are working properly. The error would then have to be within <code>.write</code> itself (whether it be syntax, although I copied it exactly from the <code>print</code> statement, or something else) or in the <code>with</code> statement that defines <code>outFile</code> above.</span>
<span class="comment-copy">For whatever reason getting rid of the <code>print</code> statement before doing <code>outFile.write</code> works. No idea why.</span>
<span class="comment-copy">I figured it out. It's because <code>lambda</code> is a temporary function. This can be solved two different ways. The first being to define <code>values</code> without using a <code>lambda</code> function or the much simpler solution is to just paste the <code>lambda</code> function again after the <code>.write</code> method has been used and then writing a print function.</span>
