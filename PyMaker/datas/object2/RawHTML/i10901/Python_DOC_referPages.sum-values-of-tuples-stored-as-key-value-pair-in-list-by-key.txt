<div class="post-text" itemprop="text">
<p>I have a list like <code>[('a',2),('a',3),('b',3),('c',2),('b',4)]</code></p>
<p>I want to sum all similar keys and get <code>[('a',5),('c',2),('b',7)]</code> in any order is fine.</p>
<p>Is there a better way to do this instead of using a dictionary. Preferably using list comprehension something like <code>[i for j in a for ...]</code></p>
<pre><code>&gt;&gt;&gt; a = [('a',2),('a',3),('b',3),('c',2),('b',4)]
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for i,j in a:
...   d[i] += j 
... 
&gt;&gt;&gt; d
defaultdict(&lt;type 'int'&gt;, {'a': 5, 'c': 2, 'b': 7})
&gt;&gt;&gt; zip(d.keys(),d.values())
[('a', 5), ('c', 2), ('b', 7)]
</code></pre>
<p>In Python-3, the last line requires <code>list(zip(d.keys(),d.values()))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This is feasible alternatively with <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="noreferrer"><code>itertools.groupby</code></a> in a list comprehension, although your approach seems fine and there is no inherent benefit to always using list comprehensions. Getting worked up about an extra line or two of code with no further issues is a fruitless venture, IMHO. It may also make sense to maintain this result as a dictionary instead of a list in case you wish to further add to any of the counts - the dictionary is the more suitable structure. </p>
<p>Using the <code>itertools.groupby</code> approach, you are summing the sorted groups based on first tuple elements. </p>
<pre><code>from itertools import groupby
from operator import itemgetter

my_list = [('a',2),('a',3),('b',3),('c',2),('b',4)]
first = itemgetter(0)
sums = [(k, sum(item[1] for item in tups_to_sum))
        for k, tups_to_sum in groupby(sorted(my_list, key=first), key=first)]
</code></pre>
<p><strong>Outputs</strong>:</p>
<pre><code>[('a', 5), ('b', 7), ('c', 2)]
</code></pre>
<hr/>
<p>This would evidently also work (<em>and perhaps be better suited</em>) as a dictionary comprehension</p>
<pre><code>{(k, sum(item[1] for item in tups_to_sum))
            for k, tups_to_sum in groupby(sorted(my_list, key=first), key=first)}
</code></pre>
</div>
<span class="comment-copy">Any reason why you want to specifically use <i>list comprehension</i>?</span>
<span class="comment-copy">@JRodDynamite I wanted the code to be reduced in lines. Someone doesn't like to see a lot of code here. Its really annoying me as well.</span>
<span class="comment-copy">In terms of readability, the code you've written above seems good (best option, in my opinion). Perhaps you can write it in a separate function, to separate that logic. It will only reduce the number of lines in the current function.</span>
