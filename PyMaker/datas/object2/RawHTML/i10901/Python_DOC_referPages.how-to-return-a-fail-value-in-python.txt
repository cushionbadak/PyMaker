<div class="post-text" itemprop="text">
<p>I'm looking to find a good convention on returning fail from a function if the function fails. I typically like to return None or False but in my case, the function's purpose is to read an IO, which could be bool (True/False), int or float.</p>
<p>So in this case I can't return a False. I've tried to use None but I don't know if this is the best case cause if I don't check the return as I call the function the None output might be recognized as a False output.</p>
<p>I was thinking having a definition files that has string tokens, but that seems in efficient to have to parse the string.</p>
<p>Are there built-in objects available? Whats the convention?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should raise an exception if the function fails. It is not good practice to have to check if your return value is invalid per the <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow">EAFP</a> principle of Python.</p>
<blockquote>
<p>Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many try and except statements. The technique contrasts with the LBYL style common to many other languages such as C.</p>
</blockquote>
</div>
<span class="comment-copy">Pretty sure the convention is to raise an error.</span>
<span class="comment-copy">Have you considered raising an exception on error?</span>
<span class="comment-copy">Use exceptions.  That's what they're for.  I know a lot of programmers who aren't familiar with them feel like they don't want an "error" to happen at all, and that simply catching it isn't a great solution, but it's not an error, it's an exception - and that's what they're there for.</span>
<span class="comment-copy">If you want something that doesn't just get hidden when you forget to check the return value, you pretty much have to raise an exception.</span>
<span class="comment-copy">If I were to raise an exception in the function, wouldn't I still need to return something from the function and handle it from the caller side so that my script continues to run? Or should I have another try and exception statement from the caller side?</span>
<span class="comment-copy">The exceptions idea is briefly to separate two programs flows: normal (if everything is ok) and exceptional (when something is broken). When exceptions are appeared in program languages, old "check return value" programming style was deprecated (<b>with rare exceptions</b>) for languages which support exceptions mechanisms. When your function finishes normally, it returns expected result value. When not - it raises exception, and caller module should catch it and process it - if it knows what to do with this exception, return value <b>will not be transferred to a caller function</b>.</span>
<span class="comment-copy">@lospejos For the caller module to "catch it and process it" what would you do? Would you use a try and except statement to handle it?</span>
<span class="comment-copy">@Sam Personally I'm guiding next relatively simple rule: if I can get exception from underlying method/function, then I catch it in two cases: when I need write to log and when I can what I will do with that exception. Otherwise (f.e. I've got the exception, but I cannot do anything) I just rethrow it upper to call stack (just not put <code>try.. except</code> blocks when call a function). Also when I log exception and cannot handle it (don't know what to do) - I also rethrow it upper to call stack. Also <b>never hide exceptions</b> (empty catch block) unless you're absolutely sure what do you do.</span>
