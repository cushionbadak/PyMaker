<div class="post-text" itemprop="text">
<p>I'm working with a large set of data in a spreadsheet using the openpyxl library.</p>
<p>I need to find certain temperature values and then look at other cells based on that temperature.</p>
<p>the problem is that my temperature fluctuates a bit in its measurements but I don't really care about this.</p>
<p>For example, if I want to look at the data when it's 25 degrees out, what I really want is the data ranging from about 24 - 26 degrees. And I need to do this for a number of temperatures.</p>
<p>I know how to do this in a rather messy iterative fashion like this:</p>
<pre><code>for num in [5,10,15,20,25]:     
    if temp &gt; num -1 and temp &lt; num + 1:        
        #do things
</code></pre>
<p>but this just feels messy to me, is there any cleaner way to do it? Something like checking if temp is within a certain error of num?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you have now is clear; Python allows you to chain the comparisons like this:</p>
<pre><code>for num in [5,10,15,20,25]:     
    if num - 1 &lt;= temp &lt;= num + 1:        
        #do things
</code></pre>
<p>Another alternative is to check the absolute between the two:</p>
<pre><code>for num in [5, 10, 15, 20, 25]:
    if abs(num - temp) &lt;= 1
</code></pre>
<p>(If <code>temp</code> is an integer, you need to use <code>&lt;=</code> instead of <code>&lt;</code> for the expression to be different from simply <code>temp == num</code>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to adapt what you have a little:</p>
<pre><code>for num in range(5, 30, 5):
    if abs(temp - num) &lt; 1:
        # do things
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about a built in solution? You could just use the <a href="https://docs.python.org/3/library/math.html#math.isclose" rel="nofollow"><strong><code>isclose</code></strong></a> function located in <a href="https://docs.python.org/3/library/math.html" rel="nofollow"><strong><code>math</code></strong></a> (which is available as of <code>Python 3.5</code>):</p>
<pre><code>from math import isclose

isclose(26, 25, abs_tol=1)
Out[409]: True

isclose(24, 25, abs_tol=1)
Out[410]: True

isclose(26.3, 25, abs_tol=1)
Out[411]: False
</code></pre>
<p>The <code>abs_tol</code> signalling the absolute tolerance (i.e difference) in order for two number to be considered close and <code>isclose</code> to return <code>True</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can test for a value being in a range like this:</p>
<pre><code>for num in [5,10,15,20,25]:     
    if num in range(24,27):
        ...
</code></pre>
<p>Note that this doesn't work if your incoming data is floats.
You can of course generate this range using some function that you give a center and a maximum distance from it:</p>
<pre><code>def s_range(center, max_distance): # surrounding range
    return range(center-max_distance, center+max_distance)
...
if num in s_range(25, 1):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For things like this I wrote a <a href="https://bitbucket.org/charlie_x/python-httparchive/src/69f61eb29b7e48166c0266904eb872ab768e8d16/httparchive/views/utils.py?at=default&amp;fileviewer=file-view-default#utils.py-18" rel="nofollow">generic range comparison function</a> which you could easily extend for use here. Although it might be overkill for this situation it makes a lot of sense if you have lots of similar checks with different values.</p>
<p>Use it like this:</p>
<pre><code>range_comparison(operator.lt, [25, True], 24) # returns True
range_comparison(operator.lt, [25, True], 26) # returns None
</code></pre>
<p>You combine this with your own function for more flexibility.</p>
</div>
<div class="post-text" itemprop="text">
<p>For those who want to use a built-in function in Python 2.x, there is also <a href="https://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.isclose.html" rel="nofollow noreferrer">numpy.isclose()</a></p>
<pre><code>from numpy import isclose as isclose
a = 100.0
b = 100.01

print isclose(a,b, atol=0.02)  # True
</code></pre>
<p>From the documentation:</p>
<blockquote>
<p>For finite values, isclose uses the following equation to test whether
  two floating point values are equivalent.</p>
<pre><code>absolute(a - b) &lt;= (atol + rtol * absolute(b))
</code></pre>
</blockquote>
</div>
