<div class="post-text" itemprop="text">
<p>I have a list which contains several large <code>numpy arrays</code></p>
<p>I want to only keep a slice of each of those arrays, and clear my system memory. I have tried using the keywords <code>del</code> and <code>None</code> but those do not seem to have any effect (I use the fedora system monitor to monitor RAM usage).</p>
<p>The issue is that I want to save my slices using <code>numpy.save()</code> but I run out of memory, hence my question.</p>
<p>For example I have:</p>
<pre><code>my_list = [arr0, arr1, arr2]
</code></pre>
<p>And I would like to end up with:</p>
<pre><code>my_list = [arr0[10:100], arr1[10:100], arr2[10:100]]
</code></pre>
<p>So I have tried to do</p>
<pre><code>arr_tmp = np.copy(arr0[10:100])
my_list[0] = arr_tmp
arr0 = None
</code></pre>
<p>and</p>
<pre><code>arr_tmp = np.copy(arr0[10:100])
my_list[0] = arr_tmp
del arr0
</code></pre>
<p>but none of those seems to work.</p>
<p>EDIT : I run out of memory when using the <code>numpy.save()</code> function, not when slicing my array. I want to free some memory before calling <code>numpy.save()</code> so it does not get killed by the system.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve this by transposing the list twice: <code>my_list.transpose()[10:100].transpose()</code></p>
<pre><code>arr1=[0,1,2,3,4]
arr2=[0,1,2,3,4]
arr3=[0,1,2,3,4]
my_list=np.array([arr1,arr2,arr3])
my_list.transpose()[1:4].transpose()
</code></pre>
<p>returns:</p>
<pre><code>array([[1, 2, 3],
       [1, 2, 3],
       [1, 2, 3]])
</code></pre>
<p>If you save this in a new value you should be able to just delete the old array.</p>
<p>You can then trigger the garbage collection to remove unreference values with the <code>gc</code> package (see <a href="https://docs.python.org/3/library/gc.html" rel="nofollow">documentation</a>):</p>
<pre><code>import gc
gc.collect()
</code></pre>
</div>
<span class="comment-copy">Are all those arrays of the same shape?</span>
<span class="comment-copy">yes they have the same shape</span>
<span class="comment-copy">Can you initialize an output array with a shape of <code>(N_arrs,91)</code> and fill into it iteratively from arr0,arr1, etc.? I am assuming you are running out of memory to create <code>my_list</code> with : <code>my_list = [arr0[10:100], arr1[10:100], arr2[10:100]]</code>.</span>
<span class="comment-copy">I run out of memory when I use <code>numpy.save(my_list)</code>, so I want to free some memory before calling that one</span>
<span class="comment-copy">So, maybe with a NumPy array instead of a list as suggested earlier you might avoid the memory error? Worth a try I would say.</span>
<span class="comment-copy">How do I delete the old array ? assigning it to <code>None</code> or using <code>del</code> does not seem to work</span>
<span class="comment-copy">@jmatthieu I've updated my answer to include garbage collection with <code>gc.collect()</code></span>
