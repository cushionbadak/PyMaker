<div class="post-text" itemprop="text">
<p>Why does example 3 below, which uses <code>text.split()</code>, produce the correct result, while example 4 is incorrect - i.e. it produces no result, just like example 1.</p>
<p>And why does example 2 still produce a result (even though it not the desired result), despite the fact that it does NOT use <code>text.split()</code>?</p>
<pre><code>&gt;&gt;&gt; text = 'the quick brown fox jumps over the lazy dog'
</code></pre>
<ol>
<li><p>Case with no match among the adjectives: Result None as expected</p>
<pre><code>&gt;&gt;&gt; adjectives = ['slow', 'crippled']
&gt;&gt;&gt; firstAdjective = next((word for word in adjectives if word in text), None)
&gt;&gt;&gt; firstAdjective
&gt;&gt;&gt;
</code></pre></li>
<li><p>Case with a match to 1st available in adjectives but actually 2nd in the text:</p>
<pre><code>&gt;&gt;&gt; adjectives = ['slow', 'brown', 'quick', 'lazy']
&gt;&gt;&gt; firstAdjective = next((word for word in adjectives if word in text), None)
&gt;&gt;&gt; firstAdjective
'brown'
</code></pre></li>
<li><p>Case with a match to 1st available in the text, which is what is wanted</p>
<pre><code>&gt;&gt;&gt; firstAdjective = next((word for word in text.split() if word in adjectives), None)
&gt;&gt;&gt; firstAdjective
'quick'
</code></pre></li>
<li><p>Case where <code>.split()</code> is omitted. NOTE: This does not work. </p>
<pre><code>&gt;&gt;&gt; firstAdjective = next((word for word in text if word in adjectives), None)
&gt;&gt;&gt; firstAdjective
&gt;&gt;&gt;
</code></pre></li>
</ol>
<p>This example arose from answers to my question <a href="https://stackoverflow.com/q/38476877/3001761">Python: Expanding the scope of the iterator variable in the any() function</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Iterating on a string (<code>text</code>) will iterate on its characters, hence 4th loop could be rewritten more explicitly:</p>
<pre><code>firstAdjective = next((character for character in text if character in adjectives), None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A string is a container, so <code>in</code> will still work on it.  However, it does not naturally separate into words, it iterates over characters.  In Example 4, <code>word</code> will take the value of each character in succession.  Giving it the variable name <code>word</code> doesn't make it a word.</p>
<p>In Example 2, you are iterating over the list <code>adjectives</code> rather than the string, so you get the "expected" behavior of <code>word</code> taking the value of a word.  Then the <code>in</code> operator checks whether <code>word</code> is a substring of <code>text</code> without having to use <code>split</code>.  Note that <code>text</code> is not split into words.  <code>'wn fo' in text</code> will return <code>True</code>.</p>
</div>
<span class="comment-copy">Why <i>would</i> example 4 work? None of the strings in adjectives are a single character long, so no single character could possibly be <code>in</code> it. Example 2 iterates over <code>adjectives</code>, and e.g. <code>'or' in 'hello world'</code> works just fine.</span>
<span class="comment-copy">@jonrsharpe I guess he does not know that iterating over a string iterates it <code>char</code> wise instead of word wise.</span>
<span class="comment-copy">I would suggest you break this down into smaller steps, and use conventional <code>for</code> loops so you can <code>print</code> each step, rather than doing it in a <i>"black box"</i> and being surprised by the end result. For example, it's not clear to me why you thought you'd get a different result for example 2; you're asking for the first match from <code>adjectives</code>, not the first appearance in the <code>text</code> of <i>anything</i> from <code>adjectives</code>.</span>
<span class="comment-copy"><code>in</code> is not specific to iterators, but <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Container" rel="nofollow noreferrer">containers</a>.</span>
