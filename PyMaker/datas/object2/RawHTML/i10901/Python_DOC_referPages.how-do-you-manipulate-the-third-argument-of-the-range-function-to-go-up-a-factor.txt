<div class="post-text" itemprop="text">
<p>Python's for loop accepts three arguments in the range of the for loop. How could I manipulate the third argument to be a factor?</p>
<pre><code>factor_of = 2
li = []
for i in range(first_value, 25000, factor_of):
    li.append(i)
</code></pre>
<p>Now I realize this will go up 2 every time, but how would I make it to where the first value is going to be multiplied by <code>factor_of</code> each time and that is stored in the <code>i</code> value?</p>
<p>The desired affect would be (assuming <code>first_value</code> is set to <code>10</code>) </p>
<pre><code>[10, 20, 40, 80, 160, ...]
</code></pre>
<p>And yes, I know this makes more sense in a while loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use a <code>while</code> loop as suggested by @Delgan. Nevertheless, if you still prefer to employ a <code>for</code> loop, here's the solution I came up with<sup>*</sup>:</p>
<pre><code>from math import log, ceil

def my_func(first, last, factor):
    x = log(last/first)/log(factor)
    n = int(x + 1 if x - int(x) == 0 else ceil(x))
    return [first*factor**i for i in range(n)]    
</code></pre>
<p><code>my_func</code> returns the desired list. The <code>i</code>th element of the list comprehension is computed as <code>first*factor**i</code>, where the index <code>i</code> varies from <code>0</code> to <code>n - 1</code>, being <code>n</code> the smallest integer number that satisfies:</p>
<pre><code>first * factor**n &gt;= last
</code></pre>
<p>Demo:</p>
<pre><code>In [331]: my_func(10, 2500, 2)
Out[331]: [10, 20, 40, 80, 160, 320, 640, 1280]

In [332]: my_func(10, 10000, 10)
Out[332]: [10, 100, 1000, 10000]

In [333]: my_func(2, 8000, 5)
Out[333]: [2, 10, 50, 250, 1250, 6250]
</code></pre>
<p>As a final note it is worth pointing out that this approach could be affected by the round off errors associated to floating point arithmetic.</p>
<p><sup>*</sup> I'm assuming you use Python 3. To get the code working in Python 2 an additional <code>import</code> sentence is needed to avoid integer division errors: <code>from __future__ import division</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot do such a thing using the built-in <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow"><code>range()</code></a>. However, you can define your own <a href="https://www.python.org/dev/peps/pep-0255/" rel="nofollow">generator</a>, like this:</p>
<pre><code>def range_factor(start, stop, factor_of):
    while start &lt; stop:
        yield start
        start *= factor_of

li = list(range_factor(10, 25000, 2))
# [10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240, 20480]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>factor_of = 2
for i in range(1,15):
    print( 10 * factor_of**i )
</code></pre>
<p>or:</p>
<pre><code>[ 10*factor_of**i for i in range(1,15) ]
</code></pre>
</div>
