<div class="post-text" itemprop="text">
<p>I have nested dictionary (with length &gt; 70.000): </p>
<pre><code>users_item = {
    "sessionId1": {
        "12345645647": 1.0, 
        "9798654": 5.0 

    },         
    "sessionId2":{
        "3445657657": 1.0

    },
    "sessionId3": {
        "87967976": 5.0, 
        "35325626436": 1.0, 
        "126789435": 1.0, 
        "72139856": 5.0      
    },
    "sessionId4": {
        "4582317": 1.0         
    }
......
}
</code></pre>
<p>I want create CSV file from my nested dictionary, my result will look like:</p>
<pre><code>sessionId1 item rating
sessionId1 item rating
sessionId2 item rating
sessionId3 item rating
sessionId3 item rating
sessionId3 item rating
sessionId3 item rating
.......
</code></pre>
<p>I found this post: <a href="https://stackoverflow.com/questions/24949888/convert-nested-dictionary-to-csv-table">Convert Nested Dictionary to CSV Table</a></p>
<p>It's similar to my question but it's not working when I try all answers, <strong>pandas</strong> library run out of memory </p>
<p>How I can make CSV file with my data?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just loop through the dictionary and use the <a href="https://docs.python.org/2/library/csv.html#writer-objects" rel="nofollow">Python csv writer</a> to write to the csv file.</p>
<pre><code>with open('output.csv', 'w') as csv_file:
    csvwriter = csv.writer(csv_file, delimiter='\t')
    for session in users_item:
        for item in users_item[session]:
            csvwriter.writerow([session, item, users_item[session][item]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you want each session as a row, the number of columns for every row will be the total number of unique keys in all session dicts. Based on the data you've given, I'm guessing the number of unique keys are astronomical.</p>
<p>That is why you're running into memory issues with the solution <a href="https://stackoverflow.com/questions/24949888/convert-nested-dictionary-to-csv-table">given in this discussion</a>. It's simply too much data to hold in memory at one time.</p>
<p>Your only option if my assumptions are correct are to divide and conquer. Break the data into smaller chunks and write them to a file in csv format. Then merge the csv files at the end. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>for session, ratings in users_item.items():
    for rating, value in ratings.items():
        print("{} {}".format(session, value))
</code></pre>
<p>Output:</p>
<pre><code>sessionId3 5.0
sessionId3 1.0
sessionId3 5.0
sessionId3 1.0
sessionId1 5.0
sessionId1 1.0
sessionId4 1.0
sessionId2 1.0
</code></pre>
<p><strong>Note</strong> that a <code>dict</code> (<code>user_items</code>) has <strong>no order</strong>. So unless you specify the order of rows using some other way, the ouput will be in the order the <code>dict</code> uses internally.</p>
<p><strong>Edit:</strong> This approach has no problems with a file containing 70k entries.</p>
<p><strong>Edit:</strong> If you want to write to a CSV file, use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow"><code>csv</code></a> module or just pipe the output to a file.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you iteratively write the file, there should be no memory issues:</p>
<pre><code>import csv

users_item = {
    "sessionId1": {
        "12345645647": 1.0,
        "9798654": 5.0

    },
    "sessionId2":{
        "3445657657": 1.0

    },
    "sessionId3": {
        "87967976": 5.0,
        "35325626436": 1.0,
        "126789435": 1.0,
        "72139856": 5.0
    },
    "sessionId4": {
        "4582317": 1.0
    }
}

with open('nested_dict.csv', 'w') as output:
    writer = csv.writer(output, delimiter='\t')
    for sessionId in sorted(users_item):
        ratings = users_item[sessionId]
        for item in ratings:
            writer.writerow([sessionId, item, ratings[item]])
</code></pre>
<p>Resulting contents of output file (where <code>»</code> represents a tab characters):</p>
<pre class="lang-none prettyprint-override"><code>sessionId1»  12345645647»  1.0
sessionId1»  9798654»      5.0
sessionId2»  3445657657»   1.0
sessionId3»  126789435»    1.0
sessionId3»  87967976»     5.0
sessionId3»  35325626436»  1.0
sessionId3»  72139856»     5.0
sessionId4»  4582317»      1.0
</code></pre>
</div>
<span class="comment-copy">@Ev.Kounis , sorry for question not clear. I edit my question !</span>
<span class="comment-copy">if instead of <code>item</code> and <code>rating</code> you had the actual values it would be clear from the beginning.</span>
<span class="comment-copy">@ĐứcPhan did you try and adapt the accepted answer from your link  (it does not use <code>panda</code> but <code>csv.DictWriter</code>) ?</span>
<span class="comment-copy">even a simple csv writer should work if your nested dict is only 1-depth. That is, loop for the outer dict <code>key</code>, <code>value</code> and perform another loop in inner dict with <code>k</code>, <code>v</code>, then write to row for <code>writer.writerow([key, k, v])</code></span>
<span class="comment-copy">take a look at this: <a href="https://docs.python.org/3/library/csv.html#csv.DictWriter" rel="nofollow noreferrer">docs.python.org/3/library/csv.html#csv.DictWriter</a></span>
<span class="comment-copy">you should know <code>writerow</code> takes exactly one argument but in your code you given 3.</span>
<span class="comment-copy">@Đức Phan Sorry, forgot the outer brackets, fixed now.</span>
<span class="comment-copy">this is error which your code : <code>writer.writerow([session, item, user_item[session][item]]) TypeError: 'str' does not support the buffer interface</code></span>
<span class="comment-copy">Ah I'm so used to using 'wb' when opening files in python 2. For python 3 use 'w' instead when opening the csv file. Code changed again.</span>
<span class="comment-copy">great ! Changed from <code>wb</code> to <code>w</code> solve the error !</span>
<span class="comment-copy">but i need write data into csv file, not print out !</span>
<span class="comment-copy">You can easily adapt my answer by using <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">docs.python.org/3/library/csv.html</a></span>
<span class="comment-copy">thanks for your help but if have error : ` 'str' does not support the buffer interface` , its error when <code>sessionId</code> is <code>str</code></span>
<span class="comment-copy"><code>sessionId</code> should be a string since the keys of the <code>users_item</code> dictionary are strings—so I don't understand the error.</span>
<span class="comment-copy">in python 3, change <code>wb</code> to <code>w</code> will solved error. And it'll work ok !</span>
<span class="comment-copy">You should have tagged your question as Python 3 (as I just did for you).</span>
<span class="comment-copy">sorry for that ! I'll careful next time i as question.</span>
