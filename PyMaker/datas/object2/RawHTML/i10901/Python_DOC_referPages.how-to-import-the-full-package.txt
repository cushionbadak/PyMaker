<div class="post-text" itemprop="text">
<p>This is my app structure using python 3.5 </p>
<pre><code>app
    __init__.py  # running the code from here
    module
        __init__.py
        test.py  # want access to this 
            ^-- test_function() is here
        test2.py # and this one too
</code></pre>
<p>I am full aware I can access test with the following. <strong>note</strong> I am running this using the following cmd <code>python 3 /app/__init__.py</code> need access to <code>/app/module/test.py</code></p>
<pre><code>from module import test
test.test_function()
# works
</code></pre>
<p>I can also import it into global scope (bad practice)</p>
<pre><code>from module.test import test_function
# works
</code></pre>
<p>And I know i can also use</p>
<pre><code>import module.test
# works
</code></pre>
<p>But what I would like to do is import the full module (or package sorry for my terminology)</p>
<p><strong>I want to import the full package, example:</strong></p>
<pre><code>import module

module.test.test_function()
</code></pre>
<p>But I seem to get </p>
<pre><code>AttributeError: module 'module' has no attribute 'test'
</code></pre>
<p><strong>bonus question</strong> 
If importing the full package is not a good practice then I don't mind being explicit and using <code>from module import test</code>, please let me know.</p>
<p><strong>PS I have tried adding imports in /app/module/__init__.py because it gets called during the import, but it seems that it doesn't work</strong></p>
<p>I added <code>import test</code> in <code>/app/module/__init__.py</code>  but when I try it test seems empty.</p>
<pre><code>import module # module now has import test in its __init__
print(dir(module.test))
# ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__']
</code></pre>
<p>As you can see it's missing test_function()</p>
</div>
<div class="post-text" itemprop="text">
<p>Few additional thoughts to <a href="https://stackoverflow.com/questions/1057431/loading-all-modules-in-a-folder-in-python">Loading all modules in a folder in Python</a></p>
<pre><code>$ tree
.
├── mod
│   ├── __init__.py
│   ├── test.py
└── run.py
</code></pre>
<p><strong>__init__.py</strong></p>
<pre><code># to import all objects use star '*' instead of name literals
from mod.test import hello_world
</code></pre>
<p><strong>test.py</strong></p>
<pre><code>def hello_world():
    print('Hello World!')
</code></pre>
<p><strong>run.py</strong></p>
<pre><code>import mod

if __name__ == '__main__':
    mod.hello_world()
</code></pre>
<p>Result</p>
<pre><code>$ python run.py 
Hello World!
</code></pre>
<p>You can import any modules, sub modules or anything else to make it part of "public" interface of package.</p>
<p><strong>UPD:</strong> I'm highly recomend you to read <a href="https://docs.python.org/3/reference/import.html#packages" rel="nofollow noreferrer">packages</a> topic from documentation. As it sad </p>
<blockquote>
<p>It’s important to keep in mind that all packages are modules, but not all modules are packages. Or put another way, packages are just a special kind of module. Specifically, any module that contains a <code>__path__</code> attribute is considered a package.</p>
</blockquote>
<p>You can think in this way: when you importing module, you are loading all objects from <code>module_name.py</code> file, but when you importing package you are loading <code>__init__.py</code> file.</p>
<p>Packages usually contain so called public interface, which contains only reusable components related to this package without helper functions, etc. In this way packages hides some code from outer scope (where it will be used) while importing.</p>
</div>
<span class="comment-copy">I understand I am  curious to import module and i get access to test and test2. I have already stated I know I can import individual ones. I am trying to import the full package.</span>
<span class="comment-copy">Why are your files (module) prefixed with <code>/</code> ?</span>
<span class="comment-copy">Just visual for the directory structure. sorry for the confusion, I removed them</span>
<span class="comment-copy">You've tagged this Python 3, and Python 3 doesn't do automatic relative imports. <code>import test</code> will never refer to <code>module.test</code>; heck, the fact that you can import <code>module</code> as anything other than <code>app.module</code> suggests that you've configured your module path wrong.</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1057431/loading-all-modules-in-a-folder-in-python">Loading all modules in a folder in Python</a></span>
<span class="comment-copy">So I should use 'from module import *'?</span>
<span class="comment-copy">@c3cris I'm editing answer right now. Yes it can help, but in this way all helper functions, etc., will be in public interface of package and this is not good in most cases.</span>
<span class="comment-copy">Ok i will check later for your revised answer :)</span>
<span class="comment-copy">I get ImportError: cannot import name 'test_function' when I run <code>python3 run.py</code></span>
<span class="comment-copy">Never mind i got it. In the <code>mod/__init__.py</code> I need to add <code>from . import test</code> because it's a <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">docs.python.org/3/tutorial/…</a></span>
