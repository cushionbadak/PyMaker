<div class="post-text" itemprop="text">
<p>If this is my code:</p>
<pre><code>x = 1
x = 2
x = 3
</code></pre>
<p>How can I “log” the things <code>x</code> has been and print them? If my explanation was dumb, then here’s what I expect:</p>
<pre><code>&gt;&gt;&gt; # Code to print the things x has been
1, 2, 3
&gt;&gt;&gt;
</code></pre>
<p>How can I achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since assignment overwrites the value of the object (in your example 'x'), it is not possible to do exactly what you want. However, you could create an object, of which the value can be changed and its history remembered. For example like this:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env/python3

class ValueWithHistory():

    def __init__(self):
        self.history = []
        self._value = None

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, new_value):
        self.history.append(new_value)
        self._value = new_value

    def get_history(self):
        return self.history

    def clear_history(self):
        self.history.clear()


def main():
    test = ValueWithHistory()
    test.value = 1
    print(test.value)
    test.value = 2
    print(test.value)
    test.value = 3
    print(test.value)
    print(test.get_history())


if __name__ == '__main__':
    main()
</code></pre>
<p>This prints:</p>
<pre><code>1
2
3
[1, 2, 3]
</code></pre>
<p>Of course, you could also use a set instead of a list to only remember each unique value once, for example.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can order a second thread to observe the string and print the changes:</p>
<pre><code>from threading import Thread
def string_watcher():
    global my_string
    global log
    temp = ''
    while True:
        if my_string != temp:
            log.append(my_string)
            temp = my_string

t = Thread(target=string_watcher, daemon=True)
t.start()
</code></pre>
<p>This checks weather the string „my_string“ was manipulated and appends it to the list „log“, if it has been changed. With this you should be able to perform</p>
<pre><code>Print(log)
</code></pre>
<p>At any moment of the runtime</p>
</div>
<span class="comment-copy">A thread cannot be sure of capturing all changes at all, and this code can easily append a different value to the list than the value that was observed “changing”</span>
