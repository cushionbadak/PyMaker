<div class="post-text" itemprop="text">
<p>I used import <code>string</code> and <code>string.punctuation</code> but I realized I still have <code>'…'</code> after conducting <code>string.split()</code>. I also get <code>''</code>, which I don't know why I would get it after doing <code>strip(</code>). As far as I understand, <code>strip()</code> removes the peripheral spaces, so if I have spaces between a string it would not matter:</p>
<pre><code>&gt;&gt;&gt; s = 'a dog    barks    meow!   @  … '
&gt;&gt;&gt; s.strip()
'a dog    barks    meow!   @  …'


&gt;&gt;&gt; import string
&gt;&gt;&gt; k = []
&gt;&gt;&gt; for item in s.split():
...  k.append(item.strip(string.punctuation))
... 
&gt;&gt;&gt; k
['a', 'dog', 'barks', 'meow', '', '…']
</code></pre>
<p>I would like to get rid of <code>'', '…'</code>, the final output I'd like is <code>['a', 'dog', 'barks', 'meow']</code>.</p>
<p>I would like to refrain from using regex, but if that's the only solution I will consider it .. for now I'm more interested in solving this without resorting to regex.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can remove punctuation by retaining only alphanumeric characters and spaces:</p>
<pre><code>s = 'a dog    barks    meow!   @  …'
print(''.join(c for c in s if c.isalnum() or c.isspace()).split())
</code></pre>
<p>This outputs:</p>
<pre><code>['a', 'dog', 'barks', 'meow']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I used the following:</p>
<pre><code>s = 'a dog    barks    Meow!   @  … '



import string
p = string.punctuation+'…'
k = []
for item in s.split():
    k.append(item.strip(p).lower())


k = [x for x in k if x]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>building on the accepted answer to <a href="https://stackoverflow.com/questions/12023775/is-there-a-str-split-equivalent-for-lists-in-python">this question</a>:</p>
<pre><code>import itertools

k = []
for ok, grp in itertools.groupby(s, lambda c: c.isalnum()):
    if ok:
        k.append(''.join(list(grp)))
</code></pre>
<p>or the same as a one-liner (except for the import):</p>
<pre><code>k = [''.join(list(grp)) for ok, grp in itertools.groupby(s, lambda c: c.isalnum()) if ok]
</code></pre>
<p><a href="https://docs.python.org/3.7/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a> scans the string <code>s</code> as a list of characters, grouping them (<code>grp</code>) by the value (<code>ok</code>) of the lambda expression. The <code>if ok</code> filters out the groups not matching the lambda. The groups are iterators that have to be converted to a list of characters and then joined to get back the words.</p>
<p>The meaning of <a href="https://docs.python.org/3/library/stdtypes.html#str.isalnum" rel="nofollow noreferrer"><code>isalnum()</code></a> is essentially “is alphanumeric”. Depending on your use case, you might prefer <a href="https://docs.python.org/3/library/stdtypes.html#str.isalpha" rel="nofollow noreferrer"><code>isalpha()</code></a>. In both cases, for this input:</p>
<pre><code>s = 'a 狗    barks    meow!   @  …'
</code></pre>
<p>the output is</p>
<pre><code>['a', '狗', 'barks', 'meow']
</code></pre>
<p>(For experts: this reminds us of the problem that not in all languages words are separated by non-word characters - <a href="https://zh.wikipedia.org/wiki/%E5%90%89%E5%A4%9A%C2%B7%E8%8C%83%E7%BD%97%E8%8B%8F%E5%A7%86" rel="nofollow noreferrer">e.g.</a>)</p>
</div>
<span class="comment-copy">Can I ask the reason why you don't want to use Regex?</span>
<span class="comment-copy">What's the output you want to get?</span>
<span class="comment-copy">@Aran-Fey ['a', 'dog', 'barks', 'meow']</span>
<span class="comment-copy">@MichaelH. if item == '…' or '': ?</span>
<span class="comment-copy"><code>…</code> is not an ASCII punctuation character, so as such, its not included in <code>string.punctuation</code>. See: <a href="https://docs.python.org/3/library/string.html?highlight=punctuation#string.punctuation" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
