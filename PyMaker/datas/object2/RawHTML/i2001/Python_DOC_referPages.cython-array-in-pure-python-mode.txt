<div class="post-text" itemprop="text">
<p>I wish to unpack columnar data coming through a socket - a bunch of ints, then a bunch of floats etc., so it is faster than with <code>struct.unpack</code></p>
<p>I was thinking of using a cython array, but couldn't find how to use it inside a regular python script, as the cython example uses
<code>from cpython cimport array</code></p>
<p>I was wondering whether it is possible to define a cython array in pure python mode (something akin to <code>cython.locals</code>), and if so, how.</p>
</div>
<div class="post-text" itemprop="text">
<p>Cython can handle C-type arrays (i.e. pointer to memory location) and <a href="http://docs.cython.org/en/latest/src/userguide/memoryviews.html" rel="nofollow noreferrer">typed memoryviews</a>. In practice the memoryviews correspond to NumPy arrays or <a href="https://docs.python.org/3/c-api/buffer.html#bufferobjects" rel="nofollow noreferrer">buffer objects</a>.</p>
<p>C-type arrays are hard to manage manually whereas NumPy arrays are more convenients in terms of memory management. In practice, the performance on NumPy arrays/memoryviews/buffer objects is the same as the storage of the data is done "Ã  la C" anyway (a pointer to a memory location), I advise strongly to manage the data with NumPy and pass it around. Any Cython or Python code aware of the buffer protocol with allow C-speed computations provided the computational code is Cython/C/C++.</p>
</div>
<div class="post-text" itemprop="text">
<p>My query was about deserializing columnar data with minimal overhead.</p>
<p>I found the solution in pure Python to me memoryviews, using the cast() option:</p>
<pre><code>from struct import pack, unpack

# Generate sample packed data
# data = 1,2
# pack('2i', *data)
# Result: b'\x01\x00\x00\x00\x02\x00\x00\x00'

# Unpack sample columnar data coming from socket
socket_data = b'\x01\x00\x00\x00\x02\x00\x00\x00'
memoryview(socket_data ).cast('i').tolist()
# Result: [1,2]
</code></pre>
<p>This allows to create a memoryview once, then unpack the data in chunks if needed.</p>
</div>
<span class="comment-copy">I wish to use python's own array, without numpy dependency</span>
<span class="comment-copy">Although it is based on the NumPy data structure, buffer objects are part of the <a href="https://docs.python.org/3/c-api/buffer.html" rel="nofollow noreferrer">Python standard</a> and can be used independently of NumPy.</span>
