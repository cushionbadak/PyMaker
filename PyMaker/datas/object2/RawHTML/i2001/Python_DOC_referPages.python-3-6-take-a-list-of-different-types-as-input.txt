<div class="post-text" itemprop="text">
<p>If I have an input like: "1 2 3 4 5", I can convert it as list of int as follow:</p>
<pre><code>a = input("List: ") #"1 2 3 4 5"
a = list(map(int, a.split())
print(a) #[1, 2, 3, 4, 5]
</code></pre>
<p>In case we have an input like: "1 2 hello 4 5.0", it's possible to convert it in a list like this: <code>[1, 2, 'hello', 4, 5.0]</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>I used <code>ast.literal_eval</code> for this .According to the docs <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">literal_eval</a> .</p>
<p>It safely evaluates an expression node or a Unicode or Latin-1 encoded string containing a Python literal or container display.</p>
<pre><code>import ast
a="1 2 hello 4 5.0"

def converter(l):
    try:
        return ast.literal_eval(l)
    except ValueError:
        return l

print(list(map(converter,a.split())))
</code></pre>
<p><strong>INPUT</strong></p>
<pre><code>1 2 hello 4 5.0
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>[1, 2, 'hello', 4, 5.0]
</code></pre>
<p><strong>INPUT</strong></p>
<pre><code>-123 123E123
</code></pre>
<p><strong>OUTPUT</strong></p>
<pre><code>[-123, 1.23e+125]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not without some extra work: you'd need your own conversion function that handles the various types. Something like (untested!):</p>
<pre><code>def convert(s):
    try:
        return int(s)
    except ValueError:
        try:
            return float(s)
        except ValueError:
            pass
    return s

list(map(convert, a.split())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are into <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a> as much as I am, you might want to use something like this (first you should transform the string input into a list with split()):</p>
<p><code>a = [int(x) if str(x).isdigit() else float(x) if str(x).replace('.','',1).isdigit() else x for x in a]</code></p>
</div>
<span class="comment-copy">Not without some extra work to convert the numbers to integers and floats. Or using eval, which people tend to stay away from (since it can do more havoc than good).</span>
<span class="comment-copy">@9769953 That's good advice regarding <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer"><code>eval</code></a>, but since this is a just a string representing valid Python literals it can be evaluated by <code>ast.literal_eval</code>, which doesn't have the security problems of plain <code>eval</code>.</span>
<span class="comment-copy">FYI, you're missing a close bracket on the last line :-)</span>
<span class="comment-copy">Any reason why you pass on the last error instead of returning <code>s</code> in there?</span>
<span class="comment-copy">@BramVanroy For future expansion! (though additional conversions may also happen near the top of the chain). Generally, I just like a clear, final return statement.</span>
<span class="comment-copy">@DavidG Actually, the OP's missing a closing parenthesis there: I copy-pasted that line from the OP, then changed int to convert.</span>
<span class="comment-copy">Ah, that makes sense! +1</span>
<span class="comment-copy"><code>if str(x).replace('.','',1).isdigit()</code> is a bad idea if your floating point strings contain an exponent: "1e50" or "1.23E123".</span>
<span class="comment-copy">And what about negative numbers?</span>
<span class="comment-copy">Of course it's not perfect, it's just a solution to a specific problem. Check this for more info <a href="https://stackoverflow.com/a/23639915/586638">stackoverflow.com/a/23639915/586638</a></span>
