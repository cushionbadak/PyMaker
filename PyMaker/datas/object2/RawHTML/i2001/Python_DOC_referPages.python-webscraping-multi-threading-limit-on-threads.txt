<div class="post-text" itemprop="text">
<p>I have a code to retrieve search results from website.</p>
<p>The ExtractDetails function is a big search function that searches the websites.</p>
<pre><code>LangList = ['91','32','69','A9','48','62','01','75','34','73','B1',
'68','61','20','03','35','36','86','87','AS','63','04','AO','65','57','05','AE','06','AC','07','08','A4','37','72','70',
'38','09','95','10','A1','B0','AL','A8','39','AT','94','11','84','12','59','AG','AB','13','40','14','AW','67','98','AJ',
'41','15','74','16','33','17','AU','AV','A0','42','92','AI','18','AD','A2','43','AM','44','45','A3','85','58','83','71',
'21','22','A6','90','AR','99','46','78','23','24','76','AP','25','26','AN','47','60','97','49','56','27','93','AZ','02',
'28','77','AA','29','50','A5','64','51','52','AQ','AY','A7','80','30','53','54','31','96','79','89','55','66','82','81']
Alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
SearchCriteria=[Alphabet] * len(LangList)
for Lang , alphabets in LostConn.items():
    for item in alphabets:
        t = Thread(target=ExtractDetails,args=(Lang,item + '%',))
        t.start()
        th.append(t)
for thr in th:
    thr.join()
</code></pre>
<p>The problem with the script is that my laptop will hang if I run this code, because it will generate 3406 threads. My questions is how to determine the optimal number of threads on particular a laptop?</p>
</div>
<div class="post-text" itemprop="text">
<p>The number of threads you can run concurrently depends on your machine and the number of cores the cpu has. Most machines can run 2 threads per core. An easy way to figure out what works for your machine is in the <code>multiprocessing</code> module in Python: </p>
<pre><code>import multiprocessing
multiprocessing.cpu_count()
</code></pre>
<p>This function will show the maximum number of threads you can run concurrently. Hope this helps!  </p>
</div>
<span class="comment-copy">You might be interested in <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">ThreadPoolExecutor or ProcessPoolExecutor</a> or <a href="https://docs.python.org/3.7/library/multiprocessing.html#multiprocessing.pool.Pool" rel="nofollow noreferrer">multiprocessing.pool</a> rather than writing the thread limiting code yourself.</span>
<span class="comment-copy">are you sure? I used to run around 113 threads at a same time.</span>
<span class="comment-copy">I believe most modules will run as many as possible concurrently and keep the others you initialize in a queue. You can initialize that many threads, you just can't do anything with them unless you have a distributed cluster of computers which can take up other threads.</span>
<span class="comment-copy">I see, thanks for clearing that.</span>
