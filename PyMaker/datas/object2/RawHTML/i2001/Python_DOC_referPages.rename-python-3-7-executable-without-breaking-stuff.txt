<div class="post-text" itemprop="text">
<p>I have renamed <code>python.exe</code> to <code>python37.exe</code> to avoid conflict with other versions. It works for running python, but if I run <code>pip37.exe</code> (located in /Scripts) I get the following error:</p>
<pre><code>Fatal error in launcher: Unable to create process using '"c:\python37-32\python.exe"  "C:\Python37-32\Scripts\pip37.exe"
</code></pre>
<p>Is there a way to keep <code>python.exe</code> renamed to <code>python37.exe</code>, but keep all python tools working?</p>
</div>
<div class="post-text" itemprop="text">
<p>This sounds like A BAD IDEA.</p>
<p>There are tools designed to help you manage exactly this sort of thing. The best of which imho is <code>pyenv</code>: <a href="https://github.com/pyenv/pyenv" rel="nofollow noreferrer">https://github.com/pyenv/pyenv</a></p>
<p>It's quite simple to install. It takes a bit of getting used to – wrapping your head around virtual environments – but it makes it all so much easier to work with ultimately.</p>
<p>E.g. On my system I have the following versions of python:</p>
<pre><code>pyenv versions
  system
  2.7.10
* 3.5.6 (set by /Users/.pyenv/version)
  3.5.6/envs/core4
  3.6.4
  3.6.4/envs/core5
  core4
  core5
</code></pre>
<p>The one with the asterisk is currently the global version, which will be the one used from any default shell. I can change that using <code>pyenv global 3.6.4</code> for example. I can also create virtual environments. E.g. core4 and core5 are virtual environments I created for specific projects. Each of these will have their own different libraries installed by <code>pip install</code> and differing python versions. You can activate a virtualenv for a given shell session e.g. <code>pyenv activate core5</code>.</p>
<p>And if you're thinking "what on earth does this have to do with Windows", look here: <a href="https://duckduckgo.com/?q=Windows+Subsystem+for+Linux&amp;atb=v93-1__&amp;ia=web" rel="nofollow noreferrer">https://duckduckgo.com/?q=Windows+Subsystem+for+Linux&amp;atb=v93-1__&amp;ia=web</a> and here: <a href="http://timmyreilly.azurewebsites.net/python-pip-virtualenv-installation-on-windows/" rel="nofollow noreferrer">http://timmyreilly.azurewebsites.net/python-pip-virtualenv-installation-on-windows/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>On Windows Python installs <a href="https://docs.python.org/3/using/windows.html#python-launcher-for-windows" rel="nofollow noreferrer">PyLauncher</a>.  You don't need virtual environments or renaming tricks.  <code>py.exe</code> is in the standard Windows path, has command line switches to pick the Python version to use, and enables using "shebangs" to specify what version of Python to run for scripts:</p>
<pre><code>py script.py          # Run the latest Python installed (or specified by PY_PYTHON environment variable).
py -2 script.py       # Run the latest Python 2 version installed.
py -3 script.py       # Run the latest Python 3 version installed.
py -2.7 script.py     # Run the specific Python version.
py -2.7-32 script.py  # Run the 32-bit specific Python version.
</code></pre>
<p>Scripts can use shebangs similar to Linux:</p>
<pre><code>#!python2
#!python3
#!python2.7
#!python2.7-32 
</code></pre>
<p>To run pip with a specific version:</p>
<pre><code>py -2.7 -m pip install ...
</code></pre>
</div>
<span class="comment-copy">Switch to linux, and it's trivial to fix ;). In python 3.7, pip is part of the standard library, so the recommended way to run pip is <code>python -m pip</code>. I recommend you do that instead of using <code>pip37.exe</code>. The <code>pip</code> / <code>pip37.exe</code> executable is pretty much just a wrapper around that command anyway.</span>
<span class="comment-copy">You can use a symbolic link beside the executable (e.g. python37.exe -&gt; python.exe) and run the specific version using the symlink. This will have no effect on fully-qualified paths in embedded scripts (e.g. embedded in pip37.exe). However, it still requires managing the order of installations in <code>PATH</code> to set which version runs via unqualified <code>python</code> in a command prompt. This is most easily addressed by activating a virtual environment, as created by Python 3's venv module.</span>
