<div class="post-text" itemprop="text">
<p>I'm trying to split a long string based on unicode and text (Chinese) punctuation. How do I do this?</p>
<pre><code>def split1(s):
    temp1 = re.split(r"(;|:|•|。|；|：)", s)
    temp = re.split(u"([\u3002|\uFF01|\uFF1F])", temp1)
    i = iter(temp)
</code></pre>
<p>UPDATE:
I'm hoping to split the string s based on regular text and unicode text.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use</p>
<pre><code>def split1(s): 
    return re.split(ur"([\u3002\uFF01\uFF1F;:•。；：])", s)
</code></pre>
<p>It does not make sense to split the two patterns since the only purpose to use them is to tokenize a string into the chars that match the regex and those that do not.</p>
<p>The captured texts will also make part of the resulting list since the whole pattern is wrapped with a capturing group, see <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code> docs</a>:</p>
<blockquote>
<p>If capturing parentheses are used in pattern, then the text of all groups in the pattern are also returned as part of the resulting list</p>
</blockquote>
<p>Note the <code>u</code> prefix, too, it will tell Python 2.x to correctly handle Unicode code units in the string.</p>
</div>
<span class="comment-copy">And what happens?  What should happen?  What have you tried?</span>
<span class="comment-copy">what went wrong with above code and what's your desired output?</span>
<span class="comment-copy">Maybe <code>def split1(s): return re.split(ur"([\u3002\uFF01\uFF1F;:•。；：])", s)</code>? Please add some example and expected output.</span>
<span class="comment-copy">@Malvolio the code above will return an error because temp1 is a class of 're' and no longer a string. My desired output is to split the string s twice based on the two regexes</span>
<span class="comment-copy">@Akshay Nevrekar see above comment</span>
