<div class="post-text" itemprop="text">
<p>I'm using <code>matplotlib</code> to generate <code>pgf</code> files.
Based on those, I use standalone <code>tex</code> files which only include necessary settings and the afore-built <code>pgf</code>s.
In this scenario, I'm getting errors when using custom tex-macros for descriptions in my plot files.</p>
<p>Here an example <code>pgf</code> generator:</p>
<pre><code>import matplotlib as mpl
mpl.use("pgf")
mpl.rcParams.update({
    "pgf.texsystem": "pdflatex",
    "pgf.preamble": [
        #r"\newcommand{\foo}{foo}",
        r"\usepackage{import}",
        r'\subimport{./}{foo.tex}'
    ]
})

import matplotlib.pyplot as plt
plt.figure(figsize=(4.5,2.5))
plt.plot(range(5))
plt.xlabel(r'\foo{}')
plt.savefig('foo.pgf')
</code></pre>
<p>that can be used in a dir with the following <code>foo.tex</code> file:</p>
<pre><code>\newcommand{\foo}{foo}
</code></pre>
<p>Running this results in the following error:</p>
<pre><code>ValueError: Error processing '\foo{}'
LaTeX Output:
! Undefined control sequence.
&lt;argument&gt; ....000000}{12.000000}\selectfont \foo
                                                  {}
&lt;*&gt; ...ze{10.000000}{12.000000}\selectfont \foo{}}

!  ==&gt; Fatal error occurred, no output PDF file produced!
Transcript written on texput.log.
</code></pre>
<p>Please note, that this is an error generated by <code>matplotlib</code> and <strong>not</strong> of compiling my standalone files.
Also note, that the error goes away when the <code>\foo</code> macro is provided as part of the <code>pgf.preamble</code>
(the line commented out) instead.
I checked the <code>pgf</code> produced by this variant and indeed it uses <code>\foo{}</code>.</p>
<p>I'm having trouble narrowing the problem further down.
Here my concrete questions:</p>
<ol>
<li>Why does <code>matplotlib</code> invoke <code>pdflatex</code> at all?
I'm generating <code>pgf</code> output and thus <code>pdflatex</code> should not be necessary.
(For the reference: I <code>strace</code>d the script above and indeed know that <code>pdflatex</code> is being called.)</li>
<li>Is there a way of preserving the temporary file that <code>matplotlib</code> tries to compile?
The error references <code>texput.log</code> by (of course) that file doesn't exist afterwards.</li>
<li>Why can't I use a macro in a label which is provided in another tex file?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><strong>tl;dr</strong> Including <code>tex</code>-files in the <code>pgf.preamble</code> of <code>matplotlib</code> requires absolute paths.</p>
<hr/>
<p>For the future, I recommend the following <code>pdflatex</code> "replacement script" for purposes of debugging:</p>
<pre><code>#!/usr/bin/env bash
MAIN=/usr/bin/pdflatex
cat /dev/stdin | tee /some/abs/path/to/dbg.tex | "${MAIN}" "${@}"
</code></pre>
<p>Make sure to save it as <code>pdflatex</code>, make sure it's executable, make sure <code>/usr/bin/pdflatex</code> is your actual <code>pdflatex</code> and ensure this wrapper is found first in yout <code>PATH</code> (cf. <code>which pdflatex</code>).
When running the <code>python</code> generator, we preserve the final <code>tex</code> input in the <code>dbg.tex</code>.
That answers (2).</p>
<p>Considering the output, we see:</p>
<pre><code>\documentclass{minimal}
\usepackage{import}
\subimport{./}{foo.tex}

\begin{document}
text $math \mu$
\typeout{pgf_backend_query_start}
\sbox0{\sffamily\fontsize{10.000000}{12.000000}\selectfont lp}
\typeout{\the\wd0,\the\ht0,\the\dp0}
\sbox0{\sffamily\fontsize{10.000000}{12.000000}\selectfont 0}
\typeout{\the\wd0,\the\ht0,\the\dp0}
\sbox0{\sffamily\fontsize{10.000000}{12.000000}\selectfont 1}
\typeout{\the\wd0,\the\ht0,\the\dp0}
\sbox0{\sffamily\fontsize{10.000000}{12.000000}\selectfont 2}
\typeout{\the\wd0,\the\ht0,\the\dp0}
\sbox0{\sffamily\fontsize{10.000000}{12.000000}\selectfont 3}
\typeout{\the\wd0,\the\ht0,\the\dp0}
\sbox0{\sffamily\fontsize{10.000000}{12.000000}\selectfont 4}
\typeout{\the\wd0,\the\ht0,\the\dp0}
\sbox0{\sffamily\fontsize{10.000000}{12.000000}\selectfont \foo{}}
\typeout{\the\wd0,\the\ht0,\the\dp0}
</code></pre>
<p>I don't know what that should be useful for. 
But I'm guessing <code>matplotlib</code> is trying to adjust the font-setup for which it tries compiling this "test" document.
That (sort of) answers (1).</p>
<p>Now the conclusion (obvious in hindsight):
<code>matplotlib</code> compiles this sample document in a temporary directory.
Clearly there is no <code>foo.tex</code> available in this directory, so the <code>subimport</code> fails.
From that point onwards it is obvious that <code>\foo</code> will not be available.</p>
<p>Though not the cleanest solution, 
this can be fixed by including <code>foo.tex</code> via an absolute path.
Working python generator to finally answer (3):</p>
<pre><code>import matplotlib as mpl
import pathlib

mpl.use("pgf")
mpl.rcParams.update({
    "pgf.texsystem": "pdflatex",
    "pgf.preamble": [
        r"\usepackage{import}",
        f'\subimport{{{pathlib.Path.cwd().resolve()}/}}{{foo.tex}}']
})

import matplotlib.pyplot as plt
plt.figure(figsize=(4.5,2.5))
plt.plot(range(5))
plt.xlabel(r'\foo{}')
plt.savefig('foo.pgf')
</code></pre>
<p>(I use <code>python3</code> and <code>pathlib</code>. 
For <code>python2</code> we would rather fall back to <a href="https://docs.python.org/3/library/os.html#os.getcwd" rel="nofollow noreferrer">os.getcwd</a>.)</p>
</div>
