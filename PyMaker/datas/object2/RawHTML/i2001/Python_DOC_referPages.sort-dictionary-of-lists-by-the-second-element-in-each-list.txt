<div class="post-text" itemprop="text">
<p>I have a dictionary of lists such as: </p>
<pre><code>test_dict = { 'a' : [[1, 6, 8], [2, 5, 9], [54, 1, 34]],
              'b' : [[1, 3, 8], [2, 1, 9], [54, 2, 34]],
              'c' : [[1, 1, 8], [2, 9, 9], [54, 7, 34]]
            }
</code></pre>
<p>and I want to sort (ascending) each value list by the second element in every sublist. The desired output dictionary would be:</p>
<pre><code>output_dict = { 'a' : [[54, 1, 34], [2, 5, 9], [1, 6, 8]],
                'b' : [[2, 1, 9], [54, 2, 34], [1, 3, 8]],
                'c' : [[1, 1, 8], [54, 7, 34], [2, 9, 9]]
              }
</code></pre>
<p>I am trying: </p>
<pre><code>sorted_dict = dict(sorted(test_dict.items(), key=lambda e: e[1][1]))
sorted_dict.items()
</code></pre>
<p>bit this does not seem to do anything. </p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking to sort lists of lists in your dictionary values, <em>not the order of dictionary keys</em>. For this, you can use a dictionary comprehension:</p>
<pre><code>res = {k: sorted(v, key=lambda x: x[1]) for k, v in test_dict.items()}

{'a': [[54, 1, 34], [2, 5, 9], [1, 6, 8]],
 'b': [[2, 1, 9], [54, 2, 34], [1, 3, 8]],
 'c': [[1, 1, 8], [54, 7, 34], [2, 9, 9]]}
</code></pre>
<p>For the functional equivalent, you can use <code>key=operator.itemgetter(1)</code>. In Python 3.6+, your dictionary order should be maintained. Prior to 3.6 dictionaries are unordered and you should not expect any particular ordering of keys.</p>
<p>To order by key, you can use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a>:</p>
<pre><code>from collections import OrderedDict

res_ordered = OrderedDict(sorted(res.items(), key=lambda x: x[0]))

OrderedDict([('a', [[54, 1, 34], [2, 5, 9], [1, 6, 8]]),
             ('b', [[2, 1, 9], [54, 2, 34], [1, 3, 8]]),
             ('c', [[1, 1, 8], [54, 7, 34], [2, 9, 9]])])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do like below, it will update the existing dictionary</p>
<pre><code>test_dict = { 'a' : [[1, 6, 8], [2, 5, 9], [54, 1, 34]],
              'b' : [[1, 3, 8], [2, 1, 9], [54, 2, 34]],
              'c' : [[1, 1, 8], [2, 9, 9], [54, 7, 34]]
            }

for k, v in test_dict.items():
    test_dict[k] = sorted(v, key=lambda e: e[1])

print(test_dict)
</code></pre>
<p>to create a new dictionary</p>
<pre><code>test_dict = { 'a' : [[1, 6, 8], [2, 5, 9], [54, 1, 34]],
              'b' : [[1, 3, 8], [2, 1, 9], [54, 2, 34]],
              'c' : [[1, 1, 8], [2, 9, 9], [54, 7, 34]]
            }

new_dict = {k:sorted(v, key=lambda e: e[1]) for k, v in test_dict.items()}

print(new_dict)
</code></pre>
</div>
<span class="comment-copy"><code>test_dict = { k: sorted(v, reverse=True) for k,v in test_dict.items() }</code></span>
<span class="comment-copy">indeed +1 although it's unclear if they also want to maintain the key order, I would suggest an <code>OrderedDict</code> too</span>
<span class="comment-copy">@Chris_Rands, Yep, it's not clear this is an issue in 3.6+, where I believe ordering will be maintained.</span>
<span class="comment-copy">@Chris_Rands you are right, I also care about the order of the keys. Jpp could you please modify your answer to make this an ordered dict, then I will accept it. Thanks</span>
<span class="comment-copy">@Qubix, Sure, added</span>
