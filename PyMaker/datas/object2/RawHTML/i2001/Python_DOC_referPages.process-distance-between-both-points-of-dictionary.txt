<div class="post-text" itemprop="text">
<p>I have dictionary that contains point name and coordinates:</p>
<pre><code>{  
   'A':{  
      'latitude':'50.46681789',
      'longitude':'30.6370689'
   },
   'B':{  
      'latitude':'50.45898787',
      'longitude':'30.63235446'
   },
   'C':{  
      'latitude':'50.45699448',
      'longitude':'30.62394564'
}
</code></pre>
<p>I need to found distance between points of dictionary. I've already had function for process distance, but I need to iterate by dict in format:</p>
<pre><code>[
{
'name': 'AB',
'distance': &lt;distance_between_A_B&gt;,
},
{
'name': 'BC',
'distance': &lt;distance_between_B_C&gt;,
},
{
'name': 'AC',
'distance': &lt;distance_between_A_C&gt;,
}
]
</code></pre>
<p>My problem that I can't correct iterate by source dict without duplicates.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> method sounds like what you need. Given an input iterable over some elements (like, say, the keys of your dictionary), it iterates over all possible tuples of those elements without repeating any.</p>
<pre><code>for (key1, key2) in itertools.combinations(your_dict.keys(), 2):
    # find distance between key1 and key2
    result_dict = {'name': key1 + key2, 'distance': found_distance}
    # do something with result_dict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As @David said, you can create your dictionary like that, so I just cover the calculate distance part.</p>
<pre><code>import itertools
from math import sin, cos, sqrt, atan2, radians    

r = 6373.0 # Erath radius in 'KM'
for (key1, key2) in itertools.combinations(your_dict.keys(), 2):
    # find distance between key1 and key2
    first_lat = radians(float(your_dict[key1]['latitude']))
    first_long = radians(float(your_dict[key1]['longitude']))
    second_lat = radians(float(your_dict[key2]['latitude']))
    second_long = radians(float(your_dict[key2]['longitude']))

    delta_lat = second_lat - first_lat
    delta_long = second_long - first_lat

    t = sin(delta_lat / 2)**2 + cos(first_lat) * cos(second_lat) * sin(delta_long / 2)**2
    distance = r * (2 * atan2(sqrt(t), sqrt(1 - t)))

    result_dict = {'name': key1 + key2, 'distance': distance}
</code></pre>
<p>the <code>result_dict</code> will be your desired output.</p>
</div>
<span class="comment-copy"><code>combinations</code> takes 2 arguments. you need the length of the combinations as the second argument. in this example <code>itertools.combinations(your_dict.keys(), 2)</code></span>
<span class="comment-copy">Ah right, thanks, I got caught up in looking up the link and forgot to put it in there.</span>
