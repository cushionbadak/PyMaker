<div class="post-text" itemprop="text">
<p>I want to use scheduler in a tkinter GUI for a stopwatch.  I'm not sure if this is a better idea than using a background thread but I read that you should not stop threads, whereas I wanted to start and stop a function constantly.</p>
<p>I made a short snipped of code in Python 2.7 to test the scheduler and it seems like it starts drifting immediately.  I wanted it to increment a counter every second, but by one minute I'm off by two seconds (62 seconds have passed instead of 60 seconds).</p>
<p>Is this machine related?  Is there something wrong with my code?  Should I use another library?</p>
<pre><code>import sched, time

class Scheduler_Test:
    def __init__(self):
        self.counter = 0
        self.time_increment = 1.0

        self.end_time = 0.0

        self.s = sched.scheduler(time.time, time.sleep)

        self.start_time = time.time()
        self.s.enter(self.time_increment, 1, self.do_something, (self.s,))

        self.s.run() # run the event scheduler

    #Simple test of printing out the computer time (sec) and count
    def do_something(self, random_kwarg): 
        print "Time (sec):",time.time(),", count:", self.counter
        self.event = self.s.enter(self.time_increment, 1, self.do_something, (random_kwarg,))

        self.counter = self.counter + 1

Test = Scheduler_Test()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Never use delay if your goal is to keep up with actual time on long distance.</p>
<p>There always will be delay and eventually you'll be off-clock, reason for this — there's non-zero CPU work between event start and new event scheduling, plus you always have task priority.</p>
<p>So, if you want to have delay — use interfaces with "run_after" interfaces (in <code>sched</code> case, <code>.enter</code>). If you want to schedule things — use "run_at" (<a href="https://docs.python.org/3/library/sched.html#sched.scheduler.enterabs" rel="nofollow noreferrer"><code>.enterabs</code></a> in your case). Btw, taking into account that you have only single process in python, you still <em>can</em> be "late", but this is not something you can affect.</p>
<p>Side note: you rarely want to re-define scheduler timers, defaults is fine, it uses <code>time.monotonic</code> with fallback to <code>time.time</code>. Monotonic will save you from unexpected pain if your code will reach real world use.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>time.time</code> to actually do the timing. You can update the user interface using tkinter's clock, but update it to the value of the time delta from when you started the timer.</p>
<p>I made a similar application using PySimpleGUI, which is based on tkinter.  The way I did the timing was this... pseudocode follows as I am using the wrapper to do these functions....</p>
<pre><code>start_time = int(round(time.time() * 100))
while True:
    # use timer using tkinter's 'after' method
    # tkroot.after(timeout, alarmcallback)  (Pseudocode)
    # tkroot.mainloop()
    #     in the alarm callback I called quit   tkroot.quit()
    # Then I'm back in my code....
    current_time = int(round(time.time() * 100)) - start_time
    # Update the GUI with current_time
</code></pre>
</div>
<span class="comment-copy">If you want precise timing, you should be using <code>.enterabs()</code> instead of <code>.enter()</code>.</span>
<span class="comment-copy">jasonharper, doesn't that just fire at a time specified?  <a href="https://docs.python.org/2/library/sched.html" rel="nofollow noreferrer">docs.python.org/2/library/sched.html</a></span>
<span class="comment-copy">For this "enterabs" command are you saying I would keep specifying the later/new system time.  For example if the time was 1540304695, and I wanted it to fire one second later I would keep incrementing and fire at 1540304696?</span>
<span class="comment-copy">If you want it "~1 second after current time" — use delay/enter, if you need it at specific time — yes, <code>enterabs(now + delta)</code>. This sound strange, but just keep in mind that any operation/line of code is <i>not free</i> in terms of time.</span>
