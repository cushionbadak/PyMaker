<div class="post-text" itemprop="text">
<p>There is a weird string representation like</p>
<p><strong>"key1:value1:key2:value2:key3:value3...keyn:valuen"</strong></p>
<p>I need to create a dict and it's pretty easy to solve when you have commas, however there is only colons here and you have to split the string every second colon. Code with cycle or soemthing like that looks pretty ugly, so I wonder if you could help me with oneliner. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can just split on colons,  <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer">get an iterator</a> over the tokens and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> the iterator with itself. That will pair keys and values nicely:</p>
<pre><code>s = 'key1:value1:key2:value2:key3:value3:keyn:valuen'
it = iter(s.split(':'))
dict(zip(it, it))
# {'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'keyn': 'valuen'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are uncomfortable with iter (and schwobaseggls solutions wich I deem superior), you can use zipped list-slices in almost the same way:</p>
<pre><code>s = 'key1:value1:key2:value2:key3:value3:keyn:valuen'
splitted = s.split(':')

# even_elements = splitted[::2]   - take every 2nd starting at 0th index
# odd_elements  = splitted[1::2]  - take every 2nd startIng at 1st index
k = {k:v for k,v in zip(splitted[::2],splitted [1::2]) }
print(k) 
</code></pre>
<p>Output:</p>
<pre><code>{'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'keyn': 'valuen'}
</code></pre>
<hr/>
<p>Alternativly, you create the dict by hand:</p>
<pre><code>s = 'key1:value1:key2:value2:key3:value3:keyn:valuen'
splitted = s.split(':')
d ={}

# this generates 2-slices from the list and puts them into your dict
for k,v in (splitted[i:i+2] for i in range(0,len(splitted),2)):
    d[k] = v

# or d = { k:v for k, v in (splitted[i:i+2] for i in range(0,len(splitted),2) )}
# or d = dict(splitted[i:i+2] for i in range(0,len(splitted),2) )

print(d)
</code></pre>
<p>Output:</p>
<pre><code>{'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'keyn': 'valuen'}
</code></pre>
</div>
<span class="comment-copy">1. What have you tried? 2. Can the values have <code>:</code> in them?</span>
<span class="comment-copy">nice idea using <code>iter</code>!</span>
<span class="comment-copy">You can also simply call <code>dict</code> on the generator in your second approach.</span>
<span class="comment-copy">@schwobaseggl you are right :) the dict(..) one even does not complain about lists not being hashable , gotta remember that</span>
<span class="comment-copy">And why would it if it produces the very same <code>dict</code>. The <i>keys</i> in a dictionary must be hashable, but these list slices we are feeding to the constructor are not keys, but key-value pairs.</span>
