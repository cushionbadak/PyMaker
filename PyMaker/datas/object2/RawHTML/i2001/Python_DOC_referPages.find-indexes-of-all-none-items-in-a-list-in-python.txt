<div class="post-text" itemprop="text">
<p>I have a list of strings, some of them are None.
i want to get a new list of all the Indexes of None.</p>
<pre><code>list = ['a', 'b', None, 'c' ,None, 'd']
</code></pre>
<p>using the function index</p>
<pre><code>n = list.index(None)
</code></pre>
<p>will only return the first appearance, n= 2, while i want to see n= [2,4].
thanks you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a>:</p>
<pre><code>l=[i for i,v in enumerate(list) if v == None]
</code></pre>
<p>Or <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow noreferrer"><code>range</code></a>:</p>
<pre><code>l=[i for i in range(len(list)) if list[i] == None]
</code></pre>
<p>Both cases:</p>
<pre><code>print(l)
</code></pre>
<p>Is:</p>
<pre><code>[2,4]
</code></pre>
<p><strong>Big Note:</strong> it is not good to name variables a existing method name, that overwrites it, (now it's <code>list</code>), so i would prefer it as <code>l</code> (or something)</p>
<p>I recommend the first example because <code>enumerate</code> is easy, efficient.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's something different but it doesn't use list comprehension:</p>
<pre><code>&gt;&gt;&gt; l = ['a', 'b', None, 'c' ,None, 'd']
&gt;&gt;&gt; out = []
&gt;&gt;&gt; for _ in range(l.count(None)):
    out.append(l.index(None))
    l[l.index(None)] = "w"


&gt;&gt;&gt; out
[2, 4]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Faster way. Very useful in case of long list.</p>
<pre><code>list = ['a', 'b', None, 'c' ,None, 'd']
import numpy as np
print(np.where(np.array(list) == None)[0])
</code></pre>
<p>Output :</p>
<pre><code>[2 4]
</code></pre>
<p>In case you need list of index :</p>
<pre><code>print(np.where(np.array(list) == None)[0].tolist())
&gt;&gt;&gt; [2, 4]
</code></pre>
</div>
<span class="comment-copy">dir(builtins) - will show that using list as var name is bad idea</span>
<span class="comment-copy">@Drako Yeah, for every builtin method!!</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/6294179/how-to-find-all-occurrences-of-an-element-in-a-list">How to find all occurrences of an element in a list?</a></span>
<span class="comment-copy">thank you. it works (used the range one)</span>
<span class="comment-copy">@MorZamir Happy to help!!!,</span>
<span class="comment-copy">@MorZamir Now you've got more than 15 reputation, so you can up-vote if you want :-)</span>
<span class="comment-copy">Note, it has a warning <code>FutureWarning: comparison to `None` will result in an elementwise object comparison in the future.</code>, in the future, this will not work.</span>
<span class="comment-copy">No warnings in python 2.7</span>
<span class="comment-copy">@MEdwin Oh i didn't test on python 3, so?</span>
<span class="comment-copy">no warnings in python3.5</span>
<span class="comment-copy">@Black Thunder . I don't know why but numpy arrays are printed without commas. That's why I have used .tolist() method</span>
