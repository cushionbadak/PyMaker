<div class="post-text" itemprop="text">
<p>I am new to python coding and need some help with unit testing. I want to test my modules that move the images location in Pygame based on what the user has pressed. Here are my modules:</p>
<pre><code>def moveRight(self):
    self.x = self.x + self.speed

def moveLeft(self):
    self.x = self.x - self.speed
</code></pre>
<p>Here is where i call these modules:</p>
<pre><code>def on_execute(self):

    # While game is running
    while( self._running ):
        pygame.event.pump()

        keys = pygame.key.get_pressed() 

        if (keys[K_RIGHT]):
            self.player.moveRight()

        if (keys[K_LEFT]):
            self.player.moveLeft()

        # Use class players function moveUp to move up
        if (keys[K_UP]):
            self.player.moveUp()

        self.on_render()
</code></pre>
<p>How do i go about testing these? is unit testing different when working with Pygame?</p>
</div>
<div class="post-text" itemprop="text">
<p>One way is to abstract <code>pygame.key.get_pressed()</code> away, so you can replace it during your tests with something else that returns the fake input we want to test (let's call it mocking). </p>
<pre><code>def on_execute(self, key_state_function):

    # While game is running
    while( self._running ):
        pygame.event.pump()

        keys = key_state_function() 

        if (keys[K_RIGHT]):
            self.player.moveRight()

        if (keys[K_LEFT]):
            self.player.moveLeft()

        # Use class players function moveUp to move up
        if (keys[K_UP]):
            self.player.moveUp()

        self.on_render()
</code></pre>
<p>When running your game, you would pass <code>pygame.event.get</code> as argument to <code>on_execute</code>, and in your tests, you pass a function that returns whatever you want (a mock).</p>
<p>But since we're using python where, we can also monkey patch <code>pygame.event.get</code> (replacing the entire function at runtime).</p>
<p>So in the test we would do something like this:</p>
<pre><code>def create_key_mock(pressed_key):
    def helper():
        tmp = [0] * 300
        tmp[pressed_key] = 1
        return tmp
    return helper

pygame.key.get_pressed = create_key_mock(K_RIGHT)
</code></pre>
<p>and behold, now <code>pygame.key.get_pressed()</code> will always tell use the right arrow key is pressed.</p>
<p>Now that you know about this, take a look at the build-in <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer"><code>mock</code> module</a>.</p>
</div>
<span class="comment-copy">How do you normally implement unit testing? What have you tried?</span>
