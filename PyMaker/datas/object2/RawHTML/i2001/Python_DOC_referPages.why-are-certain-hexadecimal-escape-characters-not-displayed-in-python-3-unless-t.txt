<div class="post-text" itemprop="text">
<p>I am learning about strings and bytestrings in python. I don't understand why certain hexadecimal escape sequences are displayed in \XNN form and some are not?</p>
<pre class="lang-python prettyprint-override"><code>s = 'A\x31\tC'
s1 = 'A\x00B\tC'
</code></pre>
<p>In this case, when I type s1 into the console, it prints the exact string of characters within the quotes,'A\x00B\tC', but when I type s into the console, it prints 'A1B\tC'. It is only when I print s1 that the screen shows 'AB       C'. I don't understand why certain escape characters are shown and others are not? And why does it then show when you print them?</p>
<p>Cheers</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><a href="http://www.asciitable.com/" rel="nofollow noreferrer">http://www.asciitable.com/</a></p>
</blockquote>
<p>If you look at the ASCII table, you would see that some characters are printable, while others are not. </p>
<p>In particular, <code>\x31</code> == <code>1</code> (Hexadecimal 31 == Decimal 49 == ASCII Character <code>1</code>. </p>
<p>On the other hand <code>\x00</code> is not printable. It represents the null terminator (or <code>\0</code>)</p>
<pre><code>&gt;&gt;&gt; '\x31' == '1'
True
&gt;&gt;&gt; '\x00' == '\0'
True
</code></pre>
<p>A more interesting question is: Why does <code>\x31</code> get converted to <code>1</code>, <code>\x09</code> gets converted to a <code>\t</code>, while <code>\x00</code> is not converted to <code>\0</code>. That I don't know.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you type name into the interpreter, it is using the result of calling <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer"><code>repr</code></a> on that name. Since <code>\x31</code> can be represented as <code>1</code>, it uses that. Since <code>\x00</code> cannot be represented as a printable character, it falls back to using the hex escape notation.</p>
<p>Note that:</p>
<pre><code>&gt;&gt;&gt; '\x31' == '1'
True
</code></pre>
<p>So the result of <code>repr</code> is valid.</p>
</div>
<span class="comment-copy">But you do not seem to be as surprised that the sequence <code>\t</code> does not get printed as such either.</span>
<span class="comment-copy">I believe you have a mistake in your question. <code>s1</code> could never output <code>'A1B\tC'</code>, with <code>print</code> or otherwise. It doesn't contain the <code>1</code> character; <code>s</code> does, though.</span>
<span class="comment-copy">@usr2564301 I realised after I posted that this was indeed something that I was also unsure of, but I figured that an answer to the question would answer that as well!</span>
<span class="comment-copy">@jpmc26 thanks for that, I believe I have corrected it now.</span>
<span class="comment-copy">This makes sense to me, thank you for this. As for your last comment, I'm not sure how much this helps but this link gave the general overview for how the concept of encoding works at least: <a href="https://www.dotnetnoob.com/2011/12/introduction-to-character-encoding.html" rel="nofollow noreferrer">dotnetnoob.com/2011/12/introduction-to-character-encoding.html</a></span>
<span class="comment-copy">@usr2564301 Since passing the string to <code>print</code> results in <i>different</i> output on the terminal, <code>repr</code> behavior is actually a very good bet.</span>
<span class="comment-copy"><code>repr</code> or <code>repr</code>-like behaviour was my understanding of how this worked, but I could be wrong.</span>
<span class="comment-copy">So is the value from calling repr determined by the encoding system? Or is it predefined by python itself?</span>
