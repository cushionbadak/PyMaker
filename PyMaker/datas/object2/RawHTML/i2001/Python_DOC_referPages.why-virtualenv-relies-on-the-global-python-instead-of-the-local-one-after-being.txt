<div class="post-text" itemprop="text">
<p>I pulled (git) a python project which was created (by me on another computer) using virtualenv. So, the python library is actually in a local directory (e.g., <code>fila_env/bin/python</code>) in this project. After pulling it, I can locate that (see the tree below). However, when I activate the environment (using <code>source fila_env/bin/activate</code>), the python on this machine is being used instead of the virtualenv's:</p>
<pre><code>(fila_env) username@ASCSC-645A:~/CODES/.../myProject$ which python
&gt;&gt;&gt; /usr/bin/python
</code></pre>
<p>I googled around but I couldn't find a good solution to this. I would like to know:</p>
<ol>
<li>How I can assure that if someone pulls this project, they will only
use the provided python library, and not their own python.</li>
<li>Is this a correct approach to create a virtualenv, and push the entire project (including the virtualenv) to the cloud?</li>
</ol>
<p>Here are some more info:</p>
<pre><code>├── yyyyyyExample.py
├── fila_env
│   ├── bin
│   │   ├── activate
│   │   ├── ...
│   │   ├── python
│   │   ├── python2 -&gt; python
│   │   ├── python2.7 -&gt; python
│   │   ├── python-config
│   │   ├── ...
│   │   └── wheel
│   ├── include
│   │   └── python2.7 -&gt; /usr/include/python2.7
│   ├── lib
│   │   └── python2.7
│   ├── local
│   │   ├── bin -&gt; .../fila_env/bin
│   │   ├── include -&gt; .../fila_env/include
│   │   └── lib -&gt; .../fila_env/lib
│   ├── pip-selfcheck.json
│   └── share
│       ├── jupyter
│       └── man
└── xxxxxxExample.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>You cannot and you shouldn't, If I use 32-bit Linux and your virtualenv has been created on 64-bit Windows (or vice versa) your python binary certainly will not work for me.</p></li>
<li><p>Again, no. virtualenv is a developer's tool, not a distribution tool. For distribution you should consider <a href="https://docs.python.org/3/distributing/index.html" rel="nofollow noreferrer">sdist/egg/wheel</a>, or creating platform-dependent binaries with <a href="https://www.pyinstaller.org/" rel="nofollow noreferrer">PyInstaller</a>, <a href="http://www.py2exe.org/index.cgi/FrontPage" rel="nofollow noreferrer">py2exe</a> or similar tools.</p></li>
</ol>
</div>
<span class="comment-copy">As an alternative: if you have an explicit (C)Python dependency, you may be better off packaging it as a Conda package.</span>
<span class="comment-copy">My answer to question to would be "no". Specify any dependencies in another way, or just try to completely avoid them (do you <i>really</i> require a specific Python version? What version exactly, and why?).</span>
<span class="comment-copy">If you activate our local environment it will try to fetch pip packages from local, if package not found on local environment it will take it from global. You can create a requirments.txt including all the pip packages. Everyone who make a clone of our project will just do a pip install on local environment</span>
<span class="comment-copy">@LavanyaPant all of those packages were installed using a local pip. The requirements.txt file is also there but I only posted a summarized list.</span>
<span class="comment-copy">@Azim We should avoid push virtual env to git. If someone want to install it locally he/she should create virtual env and install your package.</span>
