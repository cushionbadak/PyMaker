<div class="post-text" itemprop="text">
<p>I've looked around for a solution that can help my situation but couldn't find any simplistic or basic techniques that I can understand. If there are any useful sites or posts that you think could point me in the right direction please post them.</p>
<p>I've made two functions that are identical but serve different purposes e.g like a login system - one function for each user. 
In each function, there is a variable that I would like to "pass" to a new function (which is completely different to the other functions). </p>
<p>I've tried using the return and global function but they don't work and I don't think I've used them right. A simpler example of my situation below:</p>
<pre><code>def pizza():
   topping = input("fav topping: ")
def pizza1():
   topping1 = input("fav topping: ")
def something(topping,topping1):
   print("user1's fav topping is",topping)
   print("user1's fav topping is",topping1)
pizza()
pizza1()
something()
</code></pre>
<p>I want the "topping" and "topping1" to come into the "something" function.
This code is not my real coding situation but a simpler version and hence the use of functions and passing these variables is necessary</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Your functions do not return anything. If your purpose is to assign a variable with the return of your function:</p>
<pre><code>def pizza():
    return input("fav topping: ")
def pizza1():
    return input("fav topping: ")
def something(topping1,topping2):
    print("user1's fav topping is",topping)
    print("user1's fav topping is",topping1)

topping1 = pizza()
topping2 = pizza1()
something(topping1,topping2)
</code></pre>
<p>When you declare a variable in a function it only lives in the local space and will not be callable in the global space. The example below shows what happens when you declare it as a global variable.</p>
<pre><code>def pizza():
    global topping
    topping = input("fav topping: ")
def pizza1():
    global topping1
    topping1 = input("fav topping: ")
def something():
    print("user1's fav topping is",topping)
    print("user1's fav topping is",topping1)
pizza()
pizza1()
something()

&gt;&gt; fav topping: 1
fav topping: 2
user1's fav topping is 1
user1's fav topping is 2
</code></pre>
<p>Once you have declared it as a <code>global</code>, the local space in the function <code>something</code> will be able to use them as a global variable, even if you do not pass them in your function.</p>
</div>
<div class="post-text" itemprop="text">
<p>All you need to do is have your functions return a value. Then use the value returned from it to call the new function.</p>
<pre><code>def pizza():
   topping = input("fav topping: ")
   return topping

def pizza1():
   topping1 = input("fav topping: ")
   return topping1

def something(topping, topping1):
   print("user1's fav topping is",topping)
   print("user1's fav topping is",topping1)

val = pizza()
val1 = pizza1()
something(val, val1)
</code></pre>
<p>If you wanted the <code>pizza</code> function to call <code>pizza1</code> and then <code>pizza1</code> to call <code>something</code> you can just restructure the code to be this:</p>
<pre><code>def pizza():
   topping = input("fav topping: ")
   pizza1(topping)

def pizza1(prev_topping):
   topping = input("fav topping: ")
   something(prev_topping, topping)

def something(topping, topping1):
   print("user1's fav topping is",topping)
   print("user1's fav topping is",topping1)

pizza()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first thing that you have to do is: name the static variables</p>
<pre><code>static topping
static topping1
</code></pre>
<p>Then, when you call the function something you have to write in () the variables to print.</p>
<pre><code>def something(a,b):
    print(a)
    print(b)
something(a,b)
</code></pre>
<p>With the last line of code you say to the program to print the variables a and b.</p>
</div>
<span class="comment-copy">You might find it helpful to read through the Python Tutorial's section on <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">Defining Functions</a> â€¦</span>
<span class="comment-copy"><code>return topping</code> in <code>pizza</code>, then pass it to <code>something</code>.</span>
<span class="comment-copy">say I decided to call the "something" function  from within the "pizza1" function and the "pizza"  function from the "pizza" function How would I then pass the variables?</span>
<span class="comment-copy">Well that does not really make sense if you are expecting the <code>something()</code> function to have two variables passed in. You can use globals, but those are not recommended to be used since it starts to make things a lot more complicated the more they are used. What you could do is have <code>pizza()</code> call <code>pizza1()</code> passing in its topping to the <code>pizza1()</code> function. Or since the structure of this code is toppings for pizza you could just store the toppings in a list that is passed to <code>something</code>.</span>
<span class="comment-copy">Would you be able to add that as a code additionally to your answer so I can see how its structured? Thank you</span>
<span class="comment-copy">@user836420 I added one more example, but there are many many options you have available for how to call functions and passing variables. It is best to structure your functions so they are reusable and modular for the task at hand.</span>
