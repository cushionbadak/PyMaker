<div class="post-text" itemprop="text">
<p>I am given a problem to solve ! which is</p>
<p>A non-empty array A consisting of N integers is given. The array contains an odd number of elements, and each element of the array can be paired with another element that has the same value, except for one element that is left unpaired.</p>
<pre><code>For example, in array A such that:   A[0] = 9  A[1] = 3  A[2] = 9   A[3] = 3  A[4] = 9  A[5] = 7   A[6] = 9

    the elements at indexes 0 and 2 have value 9,
    the elements at indexes 1 and 3 have value 3,
    the elements at indexes 4 and 6 have value 9,
    the element at index 5 has value 7 and is unpaired.
</code></pre>
<p>Write a function:</p>
<pre><code>def solution(A)
</code></pre>
<p>that, given an array A consisting of N integers fulfilling the above conditions, returns the value of the unpaired element.</p>
<pre><code>For example, given array A such that:
  A[0] = 9  A[1] = 3  A[2] = 9
  A[3] = 3  A[4] = 9  A[5] = 7
  A[6] = 9
</code></pre>
<p>the function should return 7, as explained in the example above.</p>
<p>Write an efficient algorithm for the following assumptions:</p>
<pre><code>    N is an odd integer within the range [1..1,000,000];
    each element of array A is an integer within the range [1..1,000,000,000];
    all but one of the values in A occur an even number of times.
</code></pre>
<p>I think I am only half way to solve the problem:</p>
<pre><code>def findOddItem(A):
    for i, item in enumerate(A): # look to left not immidiate one
        if A[i] != A[i - 2]:
            print A[i]
</code></pre>
<p>but this looks like printing the wrong result..</p>
</div>
<div class="post-text" itemprop="text">
<p>I would go with <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow noreferrer"><code>reduce()</code></a> (moved to <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce()</code></a> in Python 3.x) in combination with <a href="https://docs.python.org/3/library/operator.html#operator.xor" rel="nofollow noreferrer"><code>operator.xor()</code></a>:</p>
<pre><code># Uncomment for Python 3.x:
# from functools import reduce
import operator

def solution(A):
    return reduce(operator.xor, A)

arr = [9, 3, 9, 3, 9, 7, 9]

print(solution(arr))  # 7
</code></pre>
<p>It's an, as clean as it gets, <code>O(n)</code> solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since there is no condition that all but one elements occur <strong>twice</strong>, I guess it could also mean 4, 6, ... , times. </p>
<p>In this case, I would rather use <code>numpy.bincount</code> to see which integer has an odd count.</p>
<pre><code>a = [1,1,2,2,3,3,5,3,3,4,5,5,5,10,10]
a_cnt = list(numpy.bincount(a))
for i in a_cnt:
    if i != 0 and i%2 == 1:
        print(a_cnt.index(i))
# 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use "or" bitwise operator. Since all elements occur twice except one element they would cancel each other leaving the element that has occurred only once.</p>
<pre><code>def findSingleOccurance( arr, n): 

    res = arr[0] 

    # Do XOR of all elements and return 
    for i in range(1,n): 
        res = res ^ arr[i] 

    return res 
</code></pre>
<p>Time complexity O(n) Space Complexity O(1).
Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use "xor" bitwise operator. Since all elements occur twice except one element they would cancel each other leaving the element that has occurred only once.</p>
<pre><code>def SingleOccurance( arr, n): 

result = arr[0] 

# Do XOR of all elements and return as 'a' xor 'a' is 0 and except single 
# occured number rest will turn to 0 and 'a' xor 0 is 'a'
for i in range(1,n): 
    result = res ^ arr[i] 

return result
</code></pre>
<p>Or </p>
<p>We can sum the bits in the same positions for all the numbers and take modulo with 3. The bits for which sum is not multiple of 3, are the bits of number with a single occurrence.</p>
<p>Let us consider the example array {5, 5, 5, 8}. The 101, 101, 101, 1000</p>
<p>Sum of first bits%3 = (1 + 1 + 1 + 0)%3 = 0</p>
<p>Sum of second bits%3 = (0 + 0 + 0 + 0)%0 = 0</p>
<p>Sum of third bits%3 = (1 + 1 + 1 + 0)%3 = 0</p>
<p>Sum of fourth bits%3 = (1)%3 = 1
Hence number which appears once is 1000</p>
<p><strong>Code:</strong></p>
<pre><code>INT_SIZE = 32

def getSingle(arr, n) : 

    # Initialize result 
    result = 0

    # Iterate through every bit 
    for i in range(0, INT_SIZE) : 

        # Find sum of set bits  at ith position in all array elements 
        sm = 0
        x = (1 &lt;&lt; i) 
        for j in range(0, n) : 
            if (arr[j] &amp; x) : 
                sm = sm + 1

        # The bits with sum not multiple of 3, are the 
        # bits of element with single occurrence. 
        if (sm % 3) : 
            result = result | x 

    return result 
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2644179/find-the-only-unpaired-element-in-the-array">find the only unpaired element in the array</a></span>
<span class="comment-copy">For the first two elements of <code>A</code>, <code>i - 2</code> goes back past the beginning of the array so you get wrong results. You can do <code>if A[i] != A[i - 2] and (i - 2) &gt; 0:</code>, which will make your code "work" for the example data. But I don't see anything in the problem specification that says the paired values will always be two elements apart, I suspect you might need to rethink your approach.</span>
<span class="comment-copy"><i>Write an efficient algorithm</i> can mean a lot of things. Processing efficient? Memory efficient? Besides, SO is not a homework writing service but here's a hint: nowhere in the assignment does it say that the elements have to be paired with their penultimate element - the pair can be anywhere in the array.</span>
<span class="comment-copy">The question asks for an "efficient" solution, presumably referring to its big-O runtime. Do you know what the efficiency of <code>bincount</code> is?</span>
