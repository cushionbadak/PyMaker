<div class="post-text" itemprop="text">
<p>When I try to define an index on a declared attribute</p>
<pre><code>class Event(Base):

    @declared_attr
    def user_id(cls):
        return Column(BigInteger, ForeignKey("users.user_id"), nullable=False)

    idx_event_user_id = Index('idx_event_user_id', user_id)
</code></pre>
<p>I get the following error:</p>
<pre><code>sqlalchemy.exc.ArgumentError: Element &lt;sqlalchemy.ext.declarative.api.declared_attr object at 0x1066ec648&gt; is not a string name or column element
</code></pre>
<p>Is there another way to do this? Can I set indices on a declared attribute? </p>
</div>
<div class="post-text" itemprop="text">
<p>When dealing with inheritance/mixins you should pass indexes that you would like to create for all classes and their underlying <a href="https://docs.sqlalchemy.org/en/latest/core/metadata.html#sqlalchemy.schema.Table" rel="nofollow noreferrer"><code>Table</code></a> as "inline" definitions using <code>__table_args__</code>, which also should be a declared attribute in this case, as explained in <a href="https://docs.sqlalchemy.org/en/latest/orm/extensions/declarative/mixins.html#creating-indexes-with-mixins" rel="nofollow noreferrer">"Creating Indexes with Mixins"</a>:</p>
<pre><code>class Event(Base):

    @declared_attr
    def user_id(cls):
        return Column(BigInteger, ForeignKey("users.user_id"), nullable=False)

    @declared_attr
    def __table_args__(cls):
        # Return a tuple of arguments to pass to Table
        return (Index(f'idx_{cls.__tablename__}_user_id', 'user_id'),)
</code></pre>
<p>This will avoid name conflicts between indexes created for different (sub)classes. Note that here this "inline" form uses string names to identify columns to index, but <code>cls.foo_id</code> will work as well when in a declared attribute. In general there's no need to assign an <a href="https://docs.sqlalchemy.org/en/latest/core/constraints.html#sqlalchemy.schema.Index" rel="nofollow noreferrer"><code>Index</code></a> as a model attribute, and in some situations <a href="https://stackoverflow.com/a/36389792/2681632">it may even lead to confusion</a>.</p>
<p>The simple solution to indexing a column is to just pass <a href="https://docs.sqlalchemy.org/en/latest/core/metadata.html#sqlalchemy.schema.Column.params.index" rel="nofollow noreferrer"><code>index=True</code></a> to <a href="https://docs.sqlalchemy.org/en/latest/core/metadata.html#sqlalchemy.schema.Column" rel="nofollow noreferrer"><code>Column</code></a>. This is a shortcut for creating an anonymous index for the column in question:</p>
<pre><code>class Event(Base):

    @declared_attr
    def user_id(cls):
        return Column(BigInteger, ForeignKey("users.user_id"), nullable=False, index=True)
</code></pre>
<p>When you are not dealing with inheritance/mixins, you do not need the <code>@declared_attr</code> wrapping:</p>
<pre><code>class MyModel(Base):
    foo = Column(Integer)
    bar = Column(Integer)

    # "Inline", but gets the actual column instead of a string name.
    # Possible with Declarative.
    __table_args__ = (Index('idx_mymodel_foo', foo),)

# Finds the table through the Column used in the definition.
Index('idx_mymodel_bar', MyModel.bar)
</code></pre>
<hr/>
<p>The reason why you are getting the error is that during class construction the class definition's body is evaluated and the resulting namespace is then used as the class' namespace. During that evaluation</p>
<pre><code>idx_event_user_id = Index('idx_event_user_id', user_id)
</code></pre>
<p>results in <code>Index</code> receiving the declared attribute <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor</a> object assigned to <code>user_id</code> in that namespace as is, and so SQLAlchemy complains.</p>
<p>When you access descriptors through a constructed class object, or an instance of it, they get to do their thing, which in case of a <a href="https://docs.sqlalchemy.org/en/latest/orm/extensions/declarative/api.html#sqlalchemy.ext.declarative.declared_attr" rel="nofollow noreferrer">declared attribute</a> means that it evaluates to the mapped property or special declarative member it represents.</p>
</div>
<span class="comment-copy">Are you using <code>Event</code> as a base class in an inheritance hierarchy, and if so, will the subclasses not index <code>user_id</code>?</span>
<span class="comment-copy">Thanks for your question! Event is a base class in an inheritance hierarchy, and user_id should be an index in all child classes. However, there's other times I need foreign keys as indices too, where there's no inheritance. Are you saying there's a different solution for each?</span>
<span class="comment-copy">Thanks for your elaborate reply! For a non-Mixin index on a declared_attribute (e.g. a foreign key), the solution is the same, without the precautions for name conflicts? I.e.: ``` class SpecificEvent(Base):      @declared_attr     def user_id(cls):         return Column(BigInteger, ForeignKey("users.user_id"), nullable=False)      @declared_attr     def __table_args__(cls):         # Return a tuple of arguments to pass to Table         return (Index('idx_specific_event_user_id', 'user_id'),)```</span>
<span class="comment-copy">Hmm, I'm not a 100% sure I follow. If you're not making a Mixin, ABC, or a base class in an inheritance hierarchy, you don't need to use declared attributes, and there's no need for the precautions.</span>
<span class="comment-copy">The TL;DR: if there is a possibility that multiple indexes are created based on the code, you need a discriminator.</span>
