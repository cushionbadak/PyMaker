<div class="post-text" itemprop="text">
<p>With the <code>typing</code> module you can write </p>
<pre><code>from typing import Dict
my_type: Dict[str, int]
</code></pre>
<p>where <code>Dict</code> is a class. My question is: <em>what are</em> the brackets following the class name. Which syntactic aspect of python allows that syntax? How could I do something similar in my own classes?</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks to <code>@timgeb</code> for pointing me to the right direction. Turns out that it does use <code>__getitem__</code>. However, since <code>__getitem__</code> refers to an <em>instance</em>, you must define it in something that the current class is an instance of. So, you have to use a metaclass. Eg</p>
<pre><code>class Root(type):
    def __getitem__(self, i):
        print(f'arguments: {i}')


class MyDict(metaclass=Root):
    pass
</code></pre>
<p>Now, with</p>
<pre><code>MyDict[list, str]
</code></pre>
<p>you get</p>
<pre><code>arguments: (&lt;class 'list'&gt;, &lt;class 'str'&gt;)
</code></pre>
</div>
<span class="comment-copy">By cleverly implementing <code>__getitem__</code> :)</span>
<span class="comment-copy">One question per question please.</span>
<span class="comment-copy">@Aran-Fey: they can be seen as two aspects of the same question in fact. If (1) is answered, (2) probably follows.</span>
<span class="comment-copy">@timgeb: thanks. I suspected so, but haven't seen <code>__getitem__</code> with <code>@classmethod</code></span>
<span class="comment-copy">Nope, they're two separate questions. Question #2 is answered <a href="https://stackoverflow.com/q/48572831/1222951">here</a>.</span>
<span class="comment-copy">Good answer, you spelled out what I described with a lot of handwaving in my (now deleted) other comment. The "since <code>__getitem__</code> refers to an instance" could be more accurately worded as "special methods are looked up on the type of an object" (with classes being objects too, and having the type <code>type</code> by default) - and more accurately by referring to the relevant part of the <a href="https://docs.python.org/3/reference/datamodel.html#special-lookup" rel="nofollow noreferrer">data model docs</a>. Using <code>[]</code> is an <i>implicit</i> use of <code>__getitem__</code>.</span>
<span class="comment-copy">Slight quibble: <code>arguments</code> is misleading. There is exactly one argument (apart from self) to <code>__getitem__</code>, it just happens that in this case you are passing it a tuple.That does matter because <code>MyDict[int]</code> will not get a tuple, <code>MyDict[int, str]</code> will get a tuple.</span>
