<div class="post-text" itemprop="text">
<p>What is process that occurs for a while-loop to evaluate to <code>False</code> on an empty list ?</p>
<p>For instance:</p>
<pre><code>a=[1, 2, 3]
while a:
    a.pop()
</code></pre>
<p>Essentially, I want to know which method or attribute of the list object the <code>while</code>-loop is inspecting in order to decide wether to terminate or not.</p>
</div>
<div class="post-text" itemprop="text">
<p>Loops and conditionals implicitly use <a href="https://docs.python.org/3/library/functions.html#bool" rel="nofollow noreferrer"><code>bool</code></a> on all their conditions. The procedure is documented explicitly in the <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow noreferrer">"Truth Value Testing"</a> section of the docs. For a sequence like a list, this usually ends up being a check of the <a href="https://docs.python.org/3/reference/datamodel.html#object.__len__" rel="nofollow noreferrer"><code>__len__</code></a> method.</p>
<p><code>bool</code> works like this: first it tries the <a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer"><code>__bool__</code></a> method. If <code>__bool__</code> is not implemented, it checks if <code>__len__</code> is nonzero, and if that isn't possible, just returns <code>True</code>.</p>
<p>As with all magic method lookup, Python will only look at the class, never the instance (see <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="nofollow noreferrer">Special method lookup</a>). If your question is about how to change the behavior, you will need to subclass. Assigning a single replacement method to an instance dictionary won't work at all.</p>
</div>
<div class="post-text" itemprop="text">
<p>Great question! It's inspecting <code>bool(a)</code>, which (usually) calls <code>type(a).__bool__(a)</code>.</p>
<p>Python implements certain things using "magic methods". Basically, if you've got a data type defined like so:</p>
<pre><code>class MyExampleDataType:
    def __init__(self, val):
        self.val = val

    def __bool__(self):
        return self.val &gt; 20
</code></pre>
<p>Then this code will do what it looks like it'll do:</p>
<pre><code>a = MyExampleDataType(5)
b = MyExampleDataType(30)

if a:
    print("Won't print; 5 &lt; 20")
if b:
    print("Will print; 30 &gt; 20")
</code></pre>
<p>For more information, see the Python Documentation: <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow noreferrer">3.3 Special Method Names</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A condition like <code>if my_var</code> is equivalent to <code>if bool(my_var)</code> and <a href="https://www.programiz.com/python-programming/methods/built-in/bool" rel="nofollow noreferrer">this page</a> explains it rather nicely:</p>
<blockquote>
<p>Return Value from bool()</p>
<p>The bool() returns:</p>
<p>False if the value is omitted or false
  True if the value is true</p>
<p>The following values are considered false in Python:</p>
<p>None</p>
<p>False</p>
<p>Zero of any numeric type. For example, 0, 0.0, 0j</p>
<p>Empty sequence. For example, (), [], ''.</p>
<p>Empty mapping. For example, {}</p>
<p>objects of Classes which has <strong>bool</strong>() or <strong>len()</strong> method which returns 0 or False</p>
<p>All other values except these values are considered true.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can check whether a list is empty by using the bool() function. It evaluates to False if the variable doesn't exist or in the case of a list, when it is empty. </p>
<p>In your case you could do this:</p>
<pre><code>a=[1,2,3]

while bool(a) is True:
    a.pop()
</code></pre>
<p>Or even easier: </p>
<pre><code>a = [1,2,3]

while len(a) &gt; 0:

    print(a.pop())
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/13805882/empty-list-is-equal-to-none-or-not">Empty list is equal to None or not?</a></span>
<span class="comment-copy">A better possible duplicate is <a href="https://stackoverflow.com/q/10440792/8344060">stackoverflow.com/q/10440792/8344060</a></span>
<span class="comment-copy">@kvantour. Neither is a good duplicate</span>
<span class="comment-copy">I agree with @Mad Physicist. I think the question here is much clearer, along with the solution provided.</span>
<span class="comment-copy">Is that true in Python 3+ ? I tried a=[]. Then a.__bool__() and it returns that this method does not exist.</span>
<span class="comment-copy">@VanillaSpice. I've added to my answer</span>
<span class="comment-copy">Actually, I found this link: <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#truth</a>, and will add it to your answer to make it more complete.</span>
<span class="comment-copy">@Vanilla Done. <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#truth</a></span>
<span class="comment-copy">I tried mylist=[]. Then mylist.__bool__() and it returns that this method does not exist. Is the __bool__ method an actual method of list ?</span>
<span class="comment-copy">@VanillaSpinIce It's complicated. Lists are a bad example; there isn't actually a <code>list.__bool__</code>. Read <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow noreferrer">this</a> for in-depth information; basically, Python's making up for the fact that <code>list.__bool__</code> isn't defined by figuring the information out another way (i.e., using <code>list.__len__</code>). There are hardly any special-cases like that, though (I think the <code>&lt;=</code> comparison operators sometimes use stuff like <code>not &gt;</code> if they're not defined explicitly, but I don't remember).</span>
<span class="comment-copy">For backwards compatibility, the truthiness protocol has to keep considering the possibility that a class uses <code>__len__</code>, rather than the newcomer <code>__bool__</code> (or the Python 2 method <code>__nonzero__</code> it replaced), to define its truthiness. Since that was the case, there was no compelling reason to define <code>__bool__</code> <i>and</i> <code>__len__</code> for the built-in types like <code>list</code> in Python 3.</span>
