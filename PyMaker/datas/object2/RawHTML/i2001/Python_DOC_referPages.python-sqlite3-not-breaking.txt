<div class="post-text" itemprop="text">
<p>I am trying to build a log in using sqlite3 and I am following a YouTube tutorial.</p>
<p>But when I run this code, it doesn't break and keeps going on instead:</p>
<pre><code>import sqlite3
import sys

def login():
    while True:
        username = input("Please enter your username: ")
        password = input("Please enter your password: ")
        with sqlite3.connect("wtf.db") as db:
            cursor = db.cursor()
        find_user = ("SELECT * FROM user WHERE username=? AND password=?")
        cursor.execute(find_user, [(username), (password)])
        results = cursor.fetchall()

    if results is True:
        for i in results:
            print("Welcome "+i[1])
            break


    else:
        print("Username and password not reconized or registered")
        again = input("Do you want to try again?(y/n) ")
        if again.lower() == "n":
            print("bye")
            sys.exit()

login()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your break is never executed because Python <em>can't get there</em>. First, your <code>while</code> loop indentation differs:</p>
<pre><code>while True:
    # do things

if results is True:
    # loop with break
</code></pre>
<p>The break can't get out of the <code>while True</code> loop because it is <em>not part of that loop</em>. </p>
<p>You'd have to adjust your indentation first:</p>
<pre><code>while True:
    # do things

    if results:
        # loop with break
</code></pre>
<p>Next you test if <code>results</code> is the same object as the <code>True</code> object:</p>
<pre><code>if results is True:
    # ...
</code></pre>
<p>This will <em>never</em> be true, because <code>cursor.fetchall()</code> will always produce a list. If you want to test if the list is not empty, just use:</p>
<pre><code>if results:
    # ...
</code></pre>
<p>The <code>if</code> statement already checks <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">if something is true or not</a>, and you should almost never need to use <code>is True</code> or <code>== True</code> in Python.</p>
<p>Next, you are using <code>break</code> in a <code>for</code> loop, so the <code>for</code> loop will be ended, and <em>not</em> the <code>while</code> loop. So even if you corrected the structure to:</p>
<pre><code>while True:
    # ...
    if results:
        for i in results:
            # ...
            break
</code></pre>
<p>then the <code>for</code> loop would be broken out of. The <code>while True:</code> loop would happily continue.</p>
<p>You could add another <code>break</code> to the structure:</p>
<pre><code>while True:
    # ...
    if results:
        for i in results:
            # ...
            break
        break
</code></pre>
<p>but that is all getting a bit.. verbose. Since you know <code>results</code> is not empty, you can drop the <code>for</code> loop and use:</p>
<pre><code>while True:
    # ...
    if results:
        i = results[0]
        print("Welcome "+i[1])
        break
</code></pre>
<p>If you just wanted a single result, you wouldn't want to fetch all the rows that match, just the first row, so use <code>cursor.fetchone()</code>:</p>
<pre><code>def login():
    db = sqlite3.connect("wtf.db")
    while True:
        username = input("Please enter your username: ")
        password = input("Please enter your password: ")
        cursor = db.cursor()
        find_user = "SELECT * FROM user WHERE username=? AND password=?"
        cursor.execute(find_user, [username, password])
        result = cursor.fetchone()
        if result:
            name = result[1]
            print("Welcome", name)
            break
</code></pre>
<p>I cleaned up the code a bit here; I removed the <code>with</code> context manager use, as there is no need to use this when not making any changes to the database and there is just a single <code>SELECT</code> (no transaction management needed), and the above connects to the database just once (re-connecting for each attempt is a bit of a waste, changes to the database from another process are automatically picked up anyway). </p>
<p>I also used <code>name</code> instead of <code>i[1]</code> to welcome the logged-in user. Good variable names help make the code easier to understand.</p>
</div>
<div class="post-text" itemprop="text">
<p>i see multiple problems with this, the main problem lies in this code section</p>
<pre><code> while True:
        username = input("Please enter your username: ")
        password = input("Please enter your password: ")
        with sqlite3.connect("wtf.db") as db:
            cursor = db.cursor()
        find_user = ("SELECT * FROM user WHERE username=? AND password=?")
        cursor.execute(find_user, [(username), (password)])
        results = cursor.fetchall()

if results is True:
    for i in results:
        print("Welcome "+i[1])
        break
</code></pre>
<p>your if condition is on the same level, as the while condition meaning it will run after the loop breaks, but the loop breaking is dependent on the if condition, fix the indenting and there should be no problem</p>
<p>secondly instead of <code>cursor.fetchall()</code> just do <code>cursor.fetchone()</code></p>
<p>thirdly instead of <code>if results is True:</code> just do `if results is not None:</p>
</div>
<span class="comment-copy">thank you so much for your comments, i saw that i made a mistake there not to indent for my condition loop also for the if results: section, im still new to code so yea, haha thank you for your help :)</span>
<span class="comment-copy">This still won't ever <code>break</code> because the <code>while True:</code> loop is not going to end.</span>
<span class="comment-copy">thank you for your comment, i am barely learning this coding thing and im having fun with it haha thank you</span>
