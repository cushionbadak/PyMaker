<div class="post-text" itemprop="text">
<p>I have a dictionary (shown below), the values are default dictionaries with the inner value being a list. I am trying to turn this dictionary into another dictionary with the same higher level key and a nested dictionary that contains the same inner key and a sum of "4" values in the list. </p>
<p>For example the expected output for the first entry is, {'google' : {'dog':1,'cat':2}}</p>
<pre><code>{'google': defaultdict(&lt;type 'list'&gt;, {'dog': [4, 0], 'cat': [4, 4, 0]}), 'ibm': defaultdict(&lt;type 'list'&gt;, {'dog': [4], 'bird': [0]}), 'kaspersky': defaultdict(&lt;type 'list'&gt;, {}), 'amazon': defaultdict(&lt;type 'list'&gt;, {}), 'facebook': defaultdict(&lt;type 'list'&gt;, {}), 'sony': defaultdict(&lt;type 'list'&gt;, {}), 'microsoft': defaultdict(&lt;type 'list'&gt;, {}), 'apple': defaultdict(&lt;type 'list'&gt;, {})}
</code></pre>
<p>I am using the code below to try to do this but am getting the error "TypeError: list indices must be integers, not str".</p>
<pre><code>def swords_neg(dictionary):
    for key,value in dictionary.iteritems():
        company_sent_dict_three[key] = []
        for i,j in dict(value).iteritems():
            for sent in j:
                company_sent_dict_three[key][i] += sent

    print company_sent_dict_three
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following nested <a href="https://python-reference.readthedocs.io/en/latest/docs/comprehensions/dict_comprehension.html" rel="nofollow noreferrer">dict comprehension</a>:</p>
<pre><code>{
    k: {k_: sum(x==4 for x in v_) for k_, v_ in v.items()} 
    for k, v in dictionary.items()
}
# {'google': {'dog': 1, 'cat': 2}, 
#  'ibm': {'dog': 1, 'bird': 0}, 
#  'kaspersky': {}, 
#  'amazon': {}, 
#  'facebook': {}, 
#  'sony': {}, 
#  'microsoft': {}, 
#  'apple': {}}
</code></pre>
<p><code>k, v</code> are the key-value pairs of the outer <code>dict</code>, <code>k_, v_</code> are the key-value pairs of each inner <code>defaultdict</code>. <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> is a convenience util to count the occurrences of <code>4</code> for each innermost list via <code>sum(x==4 for x in v_).</code></p>
</div>
<span class="comment-copy"><code>and a sum of "4" values in the list.</code> Did you mean a <i>count</i> of such values?</span>
<span class="comment-copy">thanks for the reply, thats a good quick way to do it!</span>
<span class="comment-copy">this currently also shows values that equal "0" in the dictionary ( eg. bird : 0). can it only show the sum of values that equal "4"?</span>
<span class="comment-copy">@dmnte You mean, you want only keys in the inner dicts that actually contain any 4?</span>
<span class="comment-copy">I mean in a case such as, "'ibm': defaultdict(&lt;type 'list'&gt;, {'dog': [4], 'bird': [0]})" the output records "'ibm': {'dog': 1, 'bird': 0}". This is correct since its value is zero, but is it possible to not even have it added to the dictionary in this instance ? So only adding sum of 4's if there is a 4 present, otherwise not adding it</span>
