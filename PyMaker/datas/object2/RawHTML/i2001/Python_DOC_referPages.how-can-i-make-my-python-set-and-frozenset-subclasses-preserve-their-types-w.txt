<div class="post-text" itemprop="text">
<p>I have some <code>set</code> and <code>frozenset</code> subclasses, <code>OCDSet</code> and <code>OCDFrozenSet</code> respectively. When I use them together with instances of their ancestor classes in binary operations, the ancestor classes dominate the type of the result – by which I mean, when I do something like subtract an <code>OCDFrozenSet</code> from a <code>frozenset</code>, I get a <code>frozenset</code>… but the same is true if I reverse the types in the operation (i.e. subtract a <code>frozenset</code> from an <code>OCDFrozenSet</code>.</p>
<p>Like so:</p>
<p><a href="https://i.stack.imgur.com/2ppAm.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/2ppAm.jpg"/></a></p>
<p>… what is especially counterintuitively vexing to me is the fact that using <code>-=</code> (subtract-in-place) mutates the type of the existing instance!</p>
<p>My knowledge of how to deal with this sort of thing comes strictly from C++, where the type of the operation is a forgone conclusion that is explicitly specified in a (likely templated) operator-overload function; in Python the type system is often much more implicit, but it isn’t so mutably unpredictable as that in-place operation would have me now believe.</p>
<p>So, what is the most expedient way to address this – I assume it involves overriding some double-underscored instance methods in the subclasses of interest? </p>
</div>
<div class="post-text" itemprop="text">
<p>The in-place operations doesn't guarantee that they will update the object the in-place, it completely depends on the type of the object.</p>
<p>Tuple, frozenset etc are immutable types, hence it is not possible to update them in-place.</p>
<p>From <a href="https://docs.python.org/3.2/library/operator.html#inplace-operators" rel="nofollow noreferrer">library reference</a> on in-place operators:</p>
<blockquote>
<p>For immutable targets such as strings, numbers, and tuples, the updated value is computed, but not assigned back to the input variable.</p>
</blockquote>
<p>Similarly the <code>frozenset</code> docs also mention the same thing <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.update" rel="nofollow noreferrer">about in-place operations</a>[<a href="https://github.com/python/cpython/blob/3.7/Objects/setobject.c#L2214" rel="nofollow noreferrer">source</a>]:</p>
<blockquote>
<p>The following table lists operations available for set that do not apply to immutable instances of frozenset.</p>
</blockquote>
<hr/>
<p>Now, as your <code>OCDFrozenSet</code> doesn't implements <code>__isub__</code>, it will fallback to <code>__sub__</code> method which will return the type of base class <code>frozenset</code>. The base class is used because Python has no idea about the arguments your base class would expect on the newly created <code>frozenset</code> from the <code>__sub__</code> operation.</p>
<p>More importantly this was a <a href="https://bugs.python.org/issue1721812" rel="nofollow noreferrer">bug in Python 2</a> where such operation returned the subclass instance, the fix was only <a href="https://github.com/python/cpython/blob/3.7/Objects/setobject.c#L1078" rel="nofollow noreferrer">ported to Python 3</a> though to prevent breaking existing systems.</p>
<hr/>
<p>To get the expected output you can provide the required methods in your subclass:</p>
<pre><code>class OCDFrozenSet(frozenset):
    def __sub__(self, other):
        return type(self)(super().__sub__(other))

    def __rsub__(self, other):
        return type(self)(super().__rsub__(other))
</code></pre>
</div>
<span class="comment-copy">OK wow thanks! – although (and correct me if I am wrong) isn’t the behavior I’m seeing (where the type of the instance upon which the in-place operator was used changes) mean that the updated value is actually being assigned back to the input variable, contrary to the reference? Also, your answer implies I might want implement <code>__isub__(…)</code> on mutable mutable subclasses – is this the case?</span>
<span class="comment-copy">@fish2000 To input variable, yes, but it's not the same object anymore, i.e the <code>id()</code> will be different and other references to the object won't be affected either. It's just a completely new object that gets assigned to the variable. Check: <a href="https://repl.it/@ashwinichaudhary/WaryThisThing" rel="nofollow noreferrer">repl.it/@ashwinichaudhary/WaryThisThing</a>. Yes, <code>__isub__</code> is the one applicable in your case.</span>
