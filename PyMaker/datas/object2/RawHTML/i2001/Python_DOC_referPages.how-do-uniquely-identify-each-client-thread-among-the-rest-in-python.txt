<div class="post-text" itemprop="text">
<p>I cannot find a way to unique identify each thread that gets created and kept on the server. Each client thread has to store its own information which is used to relay information back to its respective the client. Obvious details for server creation are omitted:</p>
<pre><code>import sys
from threading import Thread
import socket
import traceback


def client_thread(conn, ip, port, MAX_BUFFER_SIZE = 4096):
    while 1:
    # the input is in bytes, so decode it
        input_from_client_bytes = conn.recv(MAX_BUFFER_SIZE)
            if not input_from_client_bytes:
                break

        # decode input and strip the end of line
        input_from_client = input_from_client_bytes.decode("utf8").rstrip()
        aString = ''
        if (input_from_client.startswith('LOAD BOARD')):
            array = input_from_client.split('~')
            aString = array[1]
        vysl = aString.encode("utf8")  # encode the result string
        conn.sendall(vysl)  # send it to client
    conn.close()  # close connection
    print('Connection ' + ip + ':' + port + " ended")

    while True:
        conn, addr = soc.accept()
        ip, port = str(addr[0]), str(addr[1])
        print('Accepting connection from ' + ip + ':' + port)

        try:
            Thread(target=client_thread, args=(conn, ip, port)).start()
        except:
            traceback.print_exc()
    soc.close()

start_server() 
</code></pre>
<p>One suggestion I read is to create a python file and add all variables there and import it to the server, but with all other threads editing the values at the same time, things will get whacky. Each thread will want to use the methods the server will be providing as well. Since data cannot be exchanged between a method from one class and a method from another, what is the best way to go about doing this?  </p>
</div>
<div class="post-text" itemprop="text">
<p>You can give your threads names using the <code>name</code> parameter:</p>
<p><code>Thread(target=client_thread, args=(conn, ip, port), name=str(ip) + ":" + str(port)).start()</code></p>
</div>
<span class="comment-copy">I started to answer, but then realized, how do you intend to use the thread ids?</span>
<span class="comment-copy">You can always identify the current thread using <a href="https://docs.python.org/2/library/thread.html#thread.get_ident" rel="nofollow noreferrer"><code>thread.get_ident()</code></a> (Python 3.3+: <a href="https://docs.python.org/3/library/threading.html#threading.get_ident" rel="nofollow noreferrer"><code>threading.get_ident()</code></a> ) and then use the ID as a key in a shared dictionary to ensure you're accessing the data for the current thread only.</span>
<span class="comment-copy">So how then do I assign variables unique to each client thread? Do I create a text file of name str(ip) + ":" + str(port), and update "variables" by reading and writing to the file?</span>
<span class="comment-copy">@Jeff - Why would you write anything thread-related to a file? Keep your data in the working memory as thread-data persistence makes no sense without the threads themselves. Once your thread dies you won't have any viable way to link another thread to the already stored data unless you pass back and forward some identifiers (i.e. session tokens or similar), and if you are passing such identifiers then use those to access the stored data and don't worry about the thread name/ID.</span>
<span class="comment-copy">The reason I ask is because different python files will have methods that will require variables held in the client thread method. I see no way to "reach out" than to have the data editable by the other python file in a text file. I still have no idea how I'm going to have variables in the client thread move from method to method and have a return value like Java provides.</span>
<span class="comment-copy">I am having a very hard time figuring out what you are looking for.  What is Java doing that you're trying to replicate in python?  Or are you just looking for classes and object in python (which it has)?</span>
<span class="comment-copy">@Jeff - Create a module, say <code>shared_data</code>, and place anything you want accessible from other modules in its root. Then you can import your module in any other module and access the shared data. Of course, this will work only within a single process, but then again threads cannot be shared over processes anyway so that shouldn't be an issue.</span>
