<div class="post-text" itemprop="text">
<p>I have an API that has unit tests written inside of it. The thing is that that API can't be run as 'stand-alone' script from terminal, it has to be run from a custom framework. In that API there is a function that basicly calls <code>unittest.main()</code> but test cases are not found if the function is ran from 'outside'. Is there a common solution for this kind of problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can tell <code>unittest.main()</code> to load the tests from a different module by passing the name of that module in as the first (or <code>module=</code>) argument.</p>
<p>For example, to use the <em>current</em> module name, use:</p>
<pre><code>unittest.main(__name__)
</code></pre>
<p>You may want to <a href="https://github.com/python/cpython/blob/3.7/Lib/unittest/main.py" rel="nofollow noreferrer">study the code that implements this functionality</a>; <code>unittest.main</code> is an alias for the <a href="https://github.com/python/cpython/blob/3.7/Lib/unittest/main.py#L55-L273" rel="nofollow noreferrer"><code>TestProgram</code> class</a>, which uses the standard <code>unittest</code> API to <a href="https://docs.python.org/3/library/unittest.html#loading-and-running-tests" rel="nofollow noreferrer">discover, load and run tests</a>. If you need more control it can be useful to just use the API directly.</p>
</div>
<span class="comment-copy">Did you already <a href="https://docs.python.org/3/library/unittest.html#unittest.main" rel="nofollow noreferrer">look at the <code>unittest.main()</code> documentation</a>? The function explicitly supports such a scenario.</span>
<span class="comment-copy">I haven't checked documentation but i get response that says <code>'Ran 0 tests in 0.000 seconds'</code>. But when i run it as a standalone script with if <code>'__name__ == '__main__'</code> then it finds test cases and runs them.</span>
<span class="comment-copy">Then do check the documentation, that's what it is there for. It works when <code>__name__ == '__main__'</code> is true, but that's because it looks at <code>__main__</code> by default. You can tell it otherwise.</span>
