<div class="post-text" itemprop="text">
<pre><code>    for i, items in enumerate(zip(member_names, scores)):
        if i &lt; 10:
            if i == 9:
                msg += "{:&lt;1}. {:&lt;{names_len}} &lt;{:,}&gt;\n".format(i + 1, *items, names_len=len(max(member_names, key=len)) - 1)
                continue
            msg += "{:&lt;1}. {:&lt;{names_len}} &lt;{:,}&gt;\n".format(i + 1, *items, names_len=len(max(member_names, key=len)))
</code></pre>
<p>Here's an example output:</p>
<pre><code>1. xxxx#1598         &lt;12,704&gt;
2. xxxxxxxxxxxx#2390 &lt;7,151&gt;
3. xxxxx#4966        &lt;5,859&gt;
4. xxxx#3562         &lt;3,051&gt;
5. xxxxxxx#6967      &lt;2,831&gt;
6. xxxxx#4643        &lt;2,073&gt;
7. xxxxx#2006        &lt;1,833&gt;
8. xxxx#4720         &lt;1,679&gt;
9. xxxx#8049         &lt;1,651&gt;
10. xxxxxxxxxxxx#8514 &lt;1,614&gt;
</code></pre>
<p><code>member_names</code> is a list with a few dozen items in it. My two issues:</p>
<ol>
<li>I can't get it to properly account for the fact that the 10th item in the list will need one less space of indention.</li>
<li>Being such, as you can see, the 10th item does not extend the indention an extra character while using <code>names_len</code>.</li>
</ol>
<p>Can anyone help with this? I'm fairly new and have been stumped on this for quite a while.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would try to unclutter the whole thing a bit. Let's find out the maximum length ahead of time (instead of having to determine it once per loop); same with the maximum index number:</p>
<pre><code>num_items = len(str(len(member_names)))
max_length = len(max(member_names, key=len))
for i, items in enumerate(zip(member_names, scores)):
    msg += "{:&gt;{n}}. {:&lt;{m}} &lt;{:,}&gt;\n".format(i + 1, n=num_items, *items, m=max_length)
</code></pre>
<p>(I hope this works as is - can't test it without access to your data)</p>
</div>
<div class="post-text" itemprop="text">
<p>You could simply ident the lower numbers by right-aligning them:</p>
<pre><code>member_names = [f"name_{i}" for i in range(14)]
scores = [3**i for i in range(14)]

maxlen = len(max(member_names, key=len)) # calculate only once
msg = ""
for i, items in enumerate(zip(member_names, scores)):
    msg += "{:&gt;2}. {:&lt;{ml}} &lt;{:,}&gt;\n".format(i + 1, *items,ml=maxlen)

print(msg)
</code></pre>
<p>Output:</p>
<pre><code> 1. name_0  &lt;1&gt;
 2. name_1  &lt;3&gt;
 3. name_2  &lt;9&gt;
 4. name_3  &lt;27&gt;
 5. name_4  &lt;81&gt;
 6. name_5  &lt;243&gt;
 7. name_6  &lt;729&gt;
 8. name_7  &lt;2,187&gt;
 9. name_8  &lt;6,561&gt;
10. name_9  &lt;19,683&gt;
11. name_10 &lt;59,049&gt;
12. name_11 &lt;177,147&gt;
13. name_12 &lt;531,441&gt;
14. name_13 &lt;1,594,323&gt;
</code></pre>
<p>See <a href="https://stackoverflow.com/a/52924985/7505395">Tim Pietzckers answer</a> for a more flexible approach that would allow &gt;99 highscores and still be aligned. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>len()</code>already returns the number of items in a list. (<a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow noreferrer">documentation</a>)
<code>max()</code> returns the highest number. (<a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">documentation</a>)</p>
<p>So <code>len(max())</code> returns 1, as it looks for the highest number in the list (10) and then calls len(10), which == 1</p>
</div>
<span class="comment-copy">If you are using recent python you can also use fstrings instead of format, I find it more readable</span>
<span class="comment-copy">This is incorrect. <code>len(max(member_names, key=len))</code> returns the length of the longest string in <code>member_names</code>. It does so by first finding the longest string (<code>max()</code> of <code>member_names</code> according to length), and then determining its length.</span>
<span class="comment-copy">Duh.. misread this. Sorry</span>
