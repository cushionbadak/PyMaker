<div class="post-text" itemprop="text">
<p>I have a 2d list, for example:   </p>
<pre><code>list1 = [[1,2],[3,4],[5,6],[7,8]] 
</code></pre>
<p>and I want to find the sum of all the numbers at the n'th place of every element.<br/>
For example if I want the answer for 0, I would calculate:  </p>
<pre><code> my_sum = list1[0][0] + list1[1][0] + list1[2][0]  
</code></pre>
<p>or  </p>
<pre><code>my_sum = 0  
place = 0  
for i in range(len(list1)):  
    my_sum += list1[i][place]
return my_sum
</code></pre>
<p>Output: 16</p>
<p>Is there a more elegant way to do this? Or one that uses only one line of code?<br/>
I mean as fictional code for example:  </p>
<pre><code>fictional_function(list1,place) = 16
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you are looking for a functional solution, consider <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a>:</p>
<pre><code>from operator import itemgetter

L = [[1,2],[3,4],[5,6],[7,8]]

res = sum(map(itemgetter(0), L))  # 16
</code></pre>
<p>For performance and simpler syntax, you can use a 3rd party library such as NumPy:</p>
<pre><code>import numpy as np

A = np.array([[1,2],[3,4],[5,6],[7,8]])

res = A[:, 0].sum()  # 16
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a generalization if you want multiple indices (e.g. 0 and 1) you could use <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">reduce</a> combined with and element-wise sum something like this:</p>
<pre><code>from functools import reduce


def fictional_function(lst, *places):
    s_places = set(places)

    def s(xs, ys):
        return [x + y for x, y in zip(xs, ys)]

    return [x for i, x in enumerate(reduce(s, lst)) if i in s_places]


list1 = [[1, 2], [3, 4], [5, 6], [7, 8]]
print(fictional_function(list1, 0))
print(fictional_function(list1, 0, 1))
print(fictional_function(list1, *[1, 0]))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[16]
[16, 20]
[16, 20]
</code></pre>
<p>The idea is that the function <code>s</code> sums two list element-wise, for example:</p>
<pre><code>s([1, 2], [3, 4])  # [4, 6]
</code></pre>
<p>and with reduce apply <code>s</code> to a list of lists, finally filter the result for the intended indices (places) only.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>list1 = [[1,2],[3,4],[5,6],[7,8]]
ind = 0
sum_ind = sum(list(zip(*list1))[ind])
</code></pre>
<p>The above can be even written as function taking list and the index as input and returns the sum of the common index.
What we do in the above is first we get all the same indexes to individual lists using <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> and then chooses which index one has to be summed and passes the same to <a href="https://docs.python.org/3.3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> function.</p>
</div>
