<div class="post-text" itemprop="text">
<p>We are having an issue when calculating the start of the first week in 2019.</p>
<p>The parameters are <code>year</code> and <code>week_of_year</code>. We are always staring the week at Monday.</p>
<p>The code to get the first day of a specific year:</p>
<pre><code>from datetime import datetime

result = datetime.strptime('%04d-%02d-1' % (year, week_of_year), '%Y-%W-%w').date()
</code></pre>
<p>This works for most of the years, but not in the case when <code>year = 2019</code> and <code>week_of_year = 1</code>, Python computes this to the date <code>2019-01-02</code> and not the expected <code>2018-12-31</code>.</p>
<p>Our current solution to solve this problem is:</p>
<pre><code>from datetime import datetime, timedelta

result = datetime.strptime('%04d-%02d-1' % (year, week_of_year), '%Y-%W-%w').date()

# Fixes issue with Python date computing returning the incorrect date
# This only occures for some years. E.g. 2019.
offset = result.isocalendar()[1] - datetime.strptime('%04d-01-01' % year, '%Y-%m-%d').date().isocalendar()[1]
if offset &gt; 0:
    result = result - timedelta(days=7)
</code></pre>
<p>Any other ideas on how to fix this issue?</p>
</div>
<div class="post-text" itemprop="text">
<p>After consulting <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior</a>, I can tell that <code>%W</code> does not respect ISO-definition of the week counter, but simply counts from the first monday in a year. The days before are put into week count 0...</p>
<p>You can try <code>%V</code> together with <code>%G</code>:</p>
<pre><code>result = datetime.strptime('%04d-%02d-1' % (year, 1), '%G-%V-%w').date()
</code></pre>
</div>
<span class="comment-copy">What are your rules for when the first day of the first week starts in Dec? E.g. <code>(2016, 1)</code> gives <code>Jan 4th</code> and not <code>Dec  28th</code>, i.e. why is <code>Dec 31st</code> and not <code>Jan 7th</code> correct (note: I get <code>Jan 7th</code> not <code>Jan 2nd</code>).</span>
<span class="comment-copy">@AChampion Hmm. When getting the week number from 2019-01-07 it says 2 and not 1. Looking at my Mac calendar it also says that the date 2018-12-31 has the week number 1 in the year 2019 :P</span>
<span class="comment-copy">What version of Python are you using, I'm on 3.7 (and a Mac) and getting the week number from <code>2019-01-07 == 1</code>. <code>datetime(2019, 1, 7).strftime('%W') # '01'</code> (not surprisingly I get <code>53</code> for the week number <code>2018/12/31</code>).</span>
<span class="comment-copy">Python by default uses <code>0</code> based weeks, you are mixing python's <code>0</code> based week numbering and iso based <code>1</code> numbering. I think you just need to set your week number to <code>0</code> in your <code>strptime()</code> call. It will give you week <code>1</code> in isocalendar.</span>
<span class="comment-copy">Unfortunately, I think it is more complicated than this... <code>isocalendar()</code> is more complicated than I originally thought. It is based on a full 52 or 53 week year, so week 1 does not map simply to week 0 in python, e.g. <code>datetime(2016, 1, 1).isocalendar() # (2015, 53, 5)</code>,  and <code>datetime(2013, 12, 31).isocalendar() # (2014, 1, 2)</code>. BTW the Calendar.app is just a 1 based calendar week and is equivalent to 0-based week in Python. Do you really need <code>isocalendar()</code>?</span>
