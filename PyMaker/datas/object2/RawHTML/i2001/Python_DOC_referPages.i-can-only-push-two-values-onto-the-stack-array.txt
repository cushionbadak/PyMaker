<div class="post-text" itemprop="text">
<p>I can only push two values onto the stack array that I have created when I use the myPush() function. The reason I need to do it this way is because I am not allowed to use the built-in stack functions. Plus I have to use an array not a lit. Thank you.</p>
<p>I can only push two values onto the stack array that I have created when I use the myPush() function. The reason I need to do it this way is because I am not allowed to use the built-in stack functions. Plus I have to use an array not a lit. Thank you.</p>
<pre><code>class Stack:

    def __init__(self, data):
        if data &gt; 0:
            self.stack = [0] * data
            self.top = -1
            self.stack[self.top] = self.stack[-1]
        elif data &lt;= 0:
            self.stack = [0] * 10
            self.top = -1

    def showStack(self):
        for i in self.stack:
            print(i, end=" ")
        return 

    def isEmpty(self):
        return self.stack == []

    def myEmpty(self): #complete this function
        return # just a placeholder

    def push(self, data):
        self.stack.append(data)

    def myPush(self, data):
        if data == 0:
            print("You did not enter a value.")
        elif self.sizeStack() &lt;= 10:
            current = self.stack[stack.top]
            self.stack[stack.top] = data
            self.stack[stack.top - 1] = current


    def pop(self):
        data = self.stack[-1]
        del self.stack[-1]
        return data

    def myPop(self): #complete this function
        return # just a placeholder


    def myPeek(self): 
        temp = self.top
        return temp

    def sizeStack(self):
        return len(self.stack)

    userVal = int(input("Enter the size of the stack: "))
    stack = Stack(userVal)
    while True:
    print('\n1 display the stack')
    print('2 add a value to the stack')
    print('3 check the value at the top of the stack')
    print('4 remove the value at the top of the stack')
    print('5 check if the stack is empty')
    print('99 quit')

    option = int(input("Enter your choice: "))

    if option == 1:
        stack.showStack()
    elif option == 2:
        temp = int(input("Enter a number to add to the stack: "))
        stack.myPush(temp)
    elif option == 3:
        print(stack.peek())


    elif option == 99:
        break
    else:
        print('Wrong option')
        print
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try defining a some customized functions that map to your list. Read up on <a href="https://docs.python.org/3/reference/datamodel.html?highlight=__len__#basic-customization" rel="nofollow noreferrer">customization</a> here</p>
<pre><code>class stack:
    def __init__(self, data):
        self.stack = [0] * data
        self.top = -1
        # whatever you want to do to init the list

    def __str__(self): # replaces your showstack function now just use print(stack)
        return self.stack
    def __iter__(self): # creates an iterator you can use
        return iter(self.stack)
    def __len__(self): # replaces your sizestack function
        return len(self.stack) 
</code></pre>
<p>basically just adjust the methods you need.</p>
</div>
<span class="comment-copy"><code>myPush</code> never adjusts  the value of <code>self.top</code>.</span>
<span class="comment-copy"><code>self.stack</code> <i>is</i> a list; it's just a pre-allocated list that you treat like an array.</span>
<span class="comment-copy">I set stack.top equal to the new value to be inserted but I don't know how to shift every value after that to the left.</span>
<span class="comment-copy">you are defining a class that basically imitates a list. Is there a specific reason you are trying to do this?</span>
<span class="comment-copy">I am required to for the assignment.</span>
