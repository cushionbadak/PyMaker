<div class="post-text" itemprop="text">
<p>I need to zoom an image if the image detects mouseover, but I don't know the way.
I think it's hard to detect it using <code>pygame.mouse.get_pos()</code> and the image's <code>rect</code> because the image is a circle not a rectangle. It might detect the mouseover  though the mouse is in the corner of the image, not touching it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://en.wikipedia.org/wiki/Pythagorean_theorem" rel="nofollow noreferrer">Pythagorean theorem</a> to calculate the distance between the mouse and the circle center or just <a href="https://docs.python.org/3/library/math.html#math.hypot" rel="nofollow noreferrer"><code>math.hypot</code></a>. If the distance is less than the radius, the mouse and the circle collide.</p>
<p>Also, create a <a href="http://www.pygame.org/docs/ref/rect.html" rel="nofollow noreferrer">rect</a> for the image which serves as the blit position and makes it easy to obtain the center point.</p>
<pre><code>import math
import pygame as pg


pg.init()
screen = pg.display.set_mode((640, 480))
clock = pg.time.Clock()
BG_COLOR = pg.Color('gray12')

radius = 60  # Circle radius.
IMAGE = pg.Surface((120, 120), pg.SRCALPHA)
pg.draw.circle(IMAGE, (225, 0, 0), (radius, radius), radius)
# Use this rect to position the image.
rect = IMAGE.get_rect(center=(200, 200))

done = False
while not done:
    for event in pg.event.get():
        if event.type == pg.QUIT:
            done = True
        elif event.type == pg.MOUSEMOTION:
            mouse_pos = event.pos  # Or `pg.mouse.get_pos()`.
            # Calculate the x and y distances between the mouse and the center.
            dist_x = mouse_pos[0] - rect.centerx
            dist_y = mouse_pos[1] - rect.centery
            # Calculate the length of the hypotenuse. If it's less than the
            # radius, the mouse collides with the circle.
            if math.hypot(dist_x, dist_y) &lt; radius:
                print('collision')

    screen.fill(BG_COLOR)
    screen.blit(IMAGE, rect)
    pg.display.flip()
    clock.tick(60)

pg.quit()
</code></pre>
<p>You could also use <a href="https://www.pygame.org/docs/ref/mask.html" rel="nofollow noreferrer">masks</a> for pixel-perfect collision detection or <a href="http://www.pygame.org/docs/ref/sprite.html#pygame.sprite.collide_circle" rel="nofollow noreferrer"><code>pygame.sprite.collide_circle</code></a> if you're dealing with sprites.</p>
</div>
<span class="comment-copy">Thank you so much! You must be a genius to know these things! I hope you'd be able to help me later.</span>
<span class="comment-copy">That's just some math that everybody learns in school and a little pygame knowledge. Trigonometry, vectors and matrices (for 3D) can be very helpful in game development.</span>
