<div class="post-text" itemprop="text">
<p>I need to turn a list of numbers into a list of letters.</p>
<p>More specifically, I need to read <code>PZ</code> and turn it into <code>PZx</code>, such that the first distinct letter appearing in <code>PZ</code> assumes in <code>PZx</code> the number <code>1</code>, the second distinct letter assumes the number <code>2</code>, the third distinct letter assumes the number <code>3</code>, and the fourth distinct letter assumed the number <code>4</code>. Example:</p>
<pre><code>PZ = ['R','O','B','O','R','R','B','G','O','G','B','G']

PZx = [1,2,3,2,1,1,3,4,2,4,3,4]
</code></pre>
<p>I need to write a function that turns any given <code>PZ</code> into <code>PZx</code> according to this rule.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a dictionary and <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer">setdefault</a>, from the documentation:</p>
<blockquote>
<p>If key is in the dictionary, return its value. If not, insert key with
  a value of default and return default. default defaults to None.</p>
</blockquote>
<p><strong>Code:</strong></p>
<pre><code>PZ = ['R','O','B','O','R','R','B','G','O','G','B','G']
uniques = {}
PZx = [uniques.setdefault(l, len(uniques) + 1) for l in PZ]
print(PZx)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[1, 2, 3, 2, 1, 1, 3, 4, 2, 4, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you can use <a href="https://www.programiz.com/python-programming/methods/list/index" rel="nofollow noreferrer">list index</a> and have a simple loop like this</p>
<pre><code>occured = []
for item in PZ:
    if item not in occured:
        occured.append(item)
    PZx.append(occured.index(item) + 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [1]: PZ = ['R','O','B','O','R','R','B','G','O','G','B','G']

In [2]: d = {}

In [3]: PZx = []

In [4]: n = 1
In [5]: for x in PZ:
...:     if x not in d:
...:         d[x] = n
...:         n += 1
...:     PZx += [d[x]]
...:

In [6]: PZx
Out[6]: [1, 2, 3, 2, 1, 1, 3, 4, 2, 4, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This could be done easily with a dictionary. Try something like this.</p>
<pre><code>PZ = ['R','O','B','O','R','R','B','G','O','G','B','G']
PZx = []
dict = {}
count = 1

for letter in PZ:
    if letter not in dict.keys():
        dict[letter] = count
        PZx.append(dict[letter])
        count+=1
    else:
        PZx.append(dict[letter])
</code></pre>
<p>now <code>PZx</code> should equal <code>[1,2,3,2,1,1,3,4,2,4,3,4]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Another way to do it by using pandas and list comprehension:</p>
<pre><code>import pandas as pd

PZ = ['R', 'O', 'B', 'O', 'R', 'R', 'B', 'G', 'O', 'G', 'B', 'G']
PZ_unique = pd.unique(PZ).tolist()  # ['R', 'O', 'B', 'G']
PZx = [PZ_unique.index(pz) + 1 for pz in PZ]  # [1, 2, 3, 2, 1, 1, 3, 4, 2, 4, 3, 4]
</code></pre>
</div>
<span class="comment-copy">Can't you use <code>len(PZx)</code> instead of <code>count</code>?</span>
<span class="comment-copy">Sure that would work, but i'm not sure on the implementation of len(). I would assume it would iterate through the list and count the elements which takes time. Using a counter guarantees constant time for the same functionality.</span>
<span class="comment-copy">I think built-in containers store their lengths to be able to find their end point.</span>
