<div class="post-text" itemprop="text">
<p>Is there any possibility of creating a list of variables/names* that have not been defined yet, and then loop through the list at a later stage to define them?</p>
<p>Like this:</p>
<pre><code>varList = [varA, varB, varC]
for var in varList:
    var = 0
print(varList)

&gt;&gt;&gt;[0, 0, 0]
</code></pre>
<p>The reason I'm asking is because I have a project where I could hypothetically batch fill 40+ variables/names* this way by looping through a Pandas series*. Unfortunately Python doesn't seem to allow undefined variables in a list.
Does anyone have a creative workaround?</p>
<p>EDIT: Since you asked for the specific problem, here goes:</p>
<p>I have a Pandas series that looks like this (excuse the Swedish):</p>
<pre><code>print(Elanv)

&gt;&gt;&gt;
Förb. KVV PTP                 5653,021978
Förb. KVV Skogsflis                     0
Förb. KVV Återvinningsflis    337,1416119
Förb. KVV Eo1                         6,1
Förb. HVC Återvinningsflis           1848
Name: Elanv, dtype: object
</code></pre>
<p>I want to store each value in this array to a set of new variables/names*, the names of which I want to control. For example, I want the new variable/name* containing the first value to be called "förbKVVptp", the second one "förbKVVsflis", and so forth. </p>
<p>The "normal" option is to assign each variable manually, like this:</p>
<pre><code>förbKVVptp, förbKVVsflis, förbKVVåflis = Elanv.iloc[0], Elanv.iloc[1], Elanv.iloc[2] .... 
</code></pre>
<p>But that creates a not so nice looking long bunch of code just to name variables/names*. Instead I thought I could do something like this (obviously with all the variables/names*, not just the first three) which looks and feels cleaner:</p>
<pre><code>varList = [förbKVVptp, förbKVVsflis, förbKVVåflis]
for i, var in enumerate(varList): var = Elanv.iloc[i]

print(varList)

&gt;&gt;&gt;[5653,021978, 0, 337,1416119]
</code></pre>
<p>Obviously this becomes pointless if I have to write the name of my new variables/names* twice (first to define them, then to put them inside the varList) so that was why I asked.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot create uninitialized variables in python. Python doesn't really have variables, it has names referring to values. An uninitialized variable would be a name that doesn't refer to a value - so basically just a string:</p>
<pre><code>varList = ['förbKVVptp', 'förbKVVsflis', 'förbKVVåflis']
</code></pre>
<p>You can turn these strings into variables by associating them with a value. One of the ways to do that is via <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer"><code>globals</code></a>:</p>
<pre><code>for i, varname in enumerate(varList):
    globals()[varname] = Elanv.iloc[i]
</code></pre>
<p>However, dynamically creating variables like this is often a code smell. Consider storing the values in a dictionary or list instead:</p>
<pre><code>my_vars_dict = {
    'förbKVVptp': Elanv.iloc[0],
    'förbKVVsflis': Elanv.iloc[1],
    'förbKVVåflis': Elanv.iloc[2]
}

my_vars_list = [Elanv.iloc[0], Elanv.iloc[1], Elanv.iloc[2]]
</code></pre>
<p>See also <a href="https://stackoverflow.com/questions/1373164/how-do-i-create-a-variable-number-of-variables">How do I create a variable number of variables?</a>.</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>The answer to your question is that you can not have undefined variables in a list.</li>
<li>My solution is specific to solving this part of your problem  <strong><em>The reason I'm asking is that I have a project where I could hypothetically batch fill over 100 arrays this way by looping through a Pandas array.</em></strong></li>
<li>Below solution prefills the list with <code>None</code> and then you can change the values in the list.</li>
</ul>
<p>Code:  </p>
<pre><code>varList = [None]*3
for i in range(len(varList)):
    varList[i] = 0
print(varList)  
</code></pre>
<p>Output:<br/>
<code>[0, 0, 0]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>So something you are trying to do in your example that won't do what you expect, is how you are trying to modify the list: </p>
<pre><code>for var in varList:
    var = 0
</code></pre>
<p>When you do <code>var = 0</code>, it won't change the list, nor the values of varA, varB, varC (if they were defined.)</p>
<p>Similarly, the following won't change the value of the list. It will just change the value of var.</p>
<pre><code>var = mylist[0]
var = 1
</code></pre>
<p>To change the value of the list, you need to do an assignment expression on an indexed item on the list:</p>
<pre><code>mylist = [None, None, None]
for i in range(len(mylist)):
    mylist[i] = 0

print(mylist)
</code></pre>
<p>Note that by creating a list with empty slots before assigning the value is inefficient and not pythonic. A better way would be to just iterate through the source values, and append them to a list, or even better, use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>.</p>
</div>
<span class="comment-copy">No. You do not define variables in Python. To be precise, there are <b>no</b> <i>variables</i> in Python. Only "names" which serve as references to objects</span>
<span class="comment-copy"><code>looping through a Pandas array</code>. What's a Pandas array? Pandas is designed to <i>avoid</i> Python-level loops.</span>
<span class="comment-copy">This is an <a href="http://xyproblem.info" rel="nofollow noreferrer">XY problem</a>. Ask about your problem, not an attempted solution</span>
<span class="comment-copy">Your problem still isn't clear to me after your edit. Are you trying to create a bunch of variables, or a list?</span>
<span class="comment-copy">Sorry for that. The list is just the method for trying to create the bunch of variables (so that I can loop through them).</span>
<span class="comment-copy">As suspected! Thank you, this is the answer I was looking for! Now I have both the option to go smelly code, or just do it the more pythonic way.</span>
<span class="comment-copy">Why even bother with creating a list with 3 <code>None</code> and then setting them to 0? just do <code>[0] * 3</code></span>
<span class="comment-copy">I just answered the question... He wanted like that so I did it</span>
<span class="comment-copy">@AndrewMcDowell Setting something to <code>None</code> does not mean it "had not been defined". It means that it had been defined and set to <code>None</code>.</span>
<span class="comment-copy">@AndrewMcDowell More over, the answer to the question is <b>no</b>. This answer suggests that it is possible, which is wrong.</span>
<span class="comment-copy">Updated the question, guys. Thanks for showing interest, and sorry for not giving you the specific problem. Please be kind to one another!</span>
<span class="comment-copy">that is roughly the same answer as the other one</span>
<span class="comment-copy">@Jean-FrançoisFabre - Yes, but I've tried to explain why his approach is wrong, and suggest better approaches.</span>
<span class="comment-copy">@GaryvanderMerwe OPs approach is wrong mostly because it is impossible in Python. Any other answer is a (wrong and awkward) workaround.</span>
<span class="comment-copy">@DeepSpace hence I'm trying to explain why his approach is wrong, and what a better approach is.</span>
<span class="comment-copy">@GaryvanderMerwe I understand, but since OP didn't even explain us what his true problem here is (something to do with pandas), this question can not be correctly answered.</span>
