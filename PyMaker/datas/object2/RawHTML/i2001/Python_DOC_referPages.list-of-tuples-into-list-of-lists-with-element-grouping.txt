<div class="post-text" itemprop="text">
<p>I have a list of tuples:</p>
<pre><code>start_list = [(A99, 2, 3 B1), (A21, 3, 4, B1), (A123, 4, 5, B2), (A22, 3 6, B2), (A12, 4, 6, B1)]
</code></pre>
<p>and I want to group all tuples with the same last element into lists of the form:</p>
<pre><code>result = [[B1, [A99, A21, A12]],[B2, [A123, A22]]]
</code></pre>
<p>My attempt:</p>
<pre><code>for idx in range(len(start_list)):
        concat_list += [start_list[idx][0]]
        for idx2 in range(idx+1, len(start_list)):
            if start_list[idx][-1] == start_list[idx2][-1]:
                concat_list += [start_list[idx2][0]]

        grouped_list.append([start_list[idx][-1], concat_list])
        concat_list = []

    grouped_list = dict(((x[0]), x) for x in grouped_list).values()
</code></pre>
<p>It fails to take all tuples into account, also it does not include all initial elements (A99, A123...) into the corresponding tuple.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> for an O(<em>n</em>) solution:</p>
<pre><code>from collections import defaultdict

start_list = [('A99', 2, 3, 'B1'), ('A21', 3, 4, 'B1'), ('A123', 4, 5, 'B2'),
              ('A22', 3, 6, 'B2'), ('A12', 4, 6, 'B1')]

res = defaultdict(list)

for value, _, _, key in start_list:
    res[key].append(value)
</code></pre>
<p>Result:</p>
<pre><code>defaultdict(list, {'B1': ['A99', 'A21', 'A12'],
                   'B2': ['A123', 'A22']})
</code></pre>
<p>If you don't mind <code>tuple</code> elements, for the nested structure you can use:</p>
<pre><code>res_lst = list(res.items())

[('B1', ['A99', 'A21', 'A12']), ('B2', ['A123', 'A22'])]
</code></pre>
<p>Or for your precise desired output, use a list comprehension:</p>
<pre><code>res_lst = [[k, v] for k, v in res.items()]

[['B1', ['A99', 'A21', 'A12']], ['B2', ['A123', 'A22']]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try something like that :</p>
<pre><code>from collections import defaultdict

d = defaultdict(lambda: [])
start_list = [('A99', 2, 3, 'B1'), ('A21', 3, 4, 'B1'), ('A123', 4, 5, 'B2'), ('A22', 3, 6, 'B2'), ('A12', 4, 6, 'B1')]

for elt in start_list:
    d[elt[3]].append(elt[0])

grouped_list = [[k, v] for k, v in d.items()]
</code></pre>
</div>
<span class="comment-copy">what are <code>A99</code>, <code>B1</code>? <code>str</code> objects?</span>
<span class="comment-copy">They could be, in my real case they are floats, but it would be a real mess if I paste them here.</span>
