<div class="post-text" itemprop="text">
<p>Json is not only useful as a communication tool for APIs, but also may be used as a markup for configuring running programs as initialization. </p>
<p>I encountered the use of <a href="https://json-schema.org/understanding-json-schema/structuring.html#reuse" rel="nofollow noreferrer">references in json schema for the purpose of reuse</a>. </p>
<p>Since json schema is valid json, I had expected the python json library to have the ability to expand references.</p>
<pre><code>$ cat test.json
{ 
  "template":{
    "a":"a",
    "b":"b",
    "pi":3.14
  },
  "value": { "$ref":"#/template"}
}
python -c "from json import load; fp = open(\"test.json\",\"r\"); print(load(fp))"
{'template': {'a': 'a', 'b': 'b', 'pi': 3.14}, 'value': {'$ref': '#/template'}}
</code></pre>
<p>What is the simplest way to expand the references in python, since python dicts cannot point to other parts of themselves (I think)? </p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">json</a> library does not support references, but <a href="https://pypi.org/project/jsonref/" rel="nofollow noreferrer">jsonref</a> does.</p>
<p><code>jsonref</code> is a library for automatic dereferencing of JSON Reference objects for Python (supporting Python 2.6+ and Python 3.3+).</p>
<p>From the docs:</p>
<pre><code>from pprint import pprint
import jsonref

# An example json document
json_str = """{"real": [1, 2, 3, 4], "ref": {"$ref": "#/real"}}"""
data = jsonref.loads(json_str)
pprint(data)  # Reference is not evaluated until here
{'real': [1, 2, 3, 4], 'ref': [1, 2, 3, 4]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>thanks to @FreshD , who led me towards YAML which can be loaded and dumped just like JSON. </p>
<p>This is how I solved my use case, which was exact substitution to start with, but now also supports inheritance.</p>
<pre><code>$ cat test.yaml 
template: &amp;item
    a: a
    b: b
    pi: 3.14
exact-value: 
    *item
inherited-value:
    &lt;&lt;: *item
    a : I changed
$ python -c "from yaml import load; fp = open(\"test.yaml\",\"r\"); print(load(fp))"
{'template': {'a': 'a', 'b': 'b', 'pi': 3.14}, 'exact-value': {'a': 'a', 'b': 'b', 'pi': 3.14}, 'inherited-value': {'a': 'I changed', 'b': 'b', 'pi': 3.14}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I never used/saw these references in json, but I know and used the in YAML also for configuration. <a href="https://ahmedzbyr.github.io/python/var-sub-yaml-python/" rel="nofollow noreferrer">This</a> is a nice description how to achieve this.</p>
</div>
<span class="comment-copy">I have a recipe for a cake coded in JSON, do you expect the python JSON library to be able to bake a cake using that? Reference expansion is something done after JSON is loaded. (there is of course also templated JSON where you expand a template to generate JSON. That can be more powerful, but the template might not be valid JSON before template expansion, and therefor difficult to automatically update.</span>
<span class="comment-copy">umm... so you do not know of a method to expand json references in python and you also think my expectation to find a library method for a commonly used JSON feature is objectionable. This is probably the most unhelpful answer I have ever gotten. Congratulations!</span>
<span class="comment-copy">Where did I answer your post? I just commented on your overly optimistic and totally baseless expectation about the Python (and almost any other) JSON library.</span>
<span class="comment-copy">What makes you think "python dicts cannot point to other parts of themselves"? Actually python dict values are just pointers, so you can have multiple keys pointing to the same value, and also cyclical references. This isn't really supported in standard json, though. I guess you are using some json superset?</span>
<span class="comment-copy">Json references are indeed not in the standard, but an <a href="https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03" rel="nofollow noreferrer">expired Internet draft</a>. However, they are used in json-schema and swagger, which is where I came across them. @anton I don't know man. Maybe it was an unrealistic expectation to make. But I had a usecase for it - and it is nice when you find someone else has already solved the problem.</span>
<span class="comment-copy">I have to give it to you.. this is the perfect answer! :)</span>
<span class="comment-copy">PyYAML's <code>load()</code> is documented to be potentially unsafe. If you use PyYAML use <code>safe_load()</code>. You should consider using my <code>ruamel.yaml</code>, it implements YAML 1.2 (PyYAML only does 1.1) and that is a superset of JSON, so it can load both. <code>python -c "from ruamel.yaml import YAML; print(YAML(typ='safe').load(open('test.yaml')))</code>. There is no need for escaped double quotes. Use single quotes within the command string.</span>
<span class="comment-copy">thanks for responding.. but your answer showed how to use variables. I didn't like the mixing of code/directives inside the data file.  but you did point me in the correct direction. <a href="https://blog.daemonl.com/2016/02/yaml.html" rel="nofollow noreferrer">blog.daemonl.com/2016/02/yaml.html</a></span>
<span class="comment-copy">This page was the one I originally wanted to show you, but was not able to find it anymore. I also used this as reference.</span>
