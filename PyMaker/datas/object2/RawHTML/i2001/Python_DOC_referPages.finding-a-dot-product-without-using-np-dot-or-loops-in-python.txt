<div class="post-text" itemprop="text">
<p>I need to write a function which:</p>
<p>takes two NumPy arrays as arguments
returns one number: the floating-point dot product of the two input vectors
numpy arrays and the np.sum function are allowed, no np.dot and no loops</p>
<p>In my intro class I've learned plenty about using loops when I can't use a simple function like np.dot, but this one has me confused for some reason. Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Ciao,</p>
<p>a possible solution makes use of recursion</p>
<pre><code>import numpy as np

def multiplier (first_vector, second_vector, size, index, total):
    if index &lt; size:
        addendum = first_vector[index]*second_vector[index]
        total = total + addendum
        index = index + 1
        # ongoing job
        if index &lt; size:
            multiplier(first_vector, second_vector, size, index, total)
        # job done
        else:
            print("dot product = " + str(total))

def main():
    a = np.array([1.5, 2, 3.7])
    b = np.array([3, 4.3, 5])
    print(a, b)

    i = 0
    total_sum = 0

    # check needed if the arrays are not hardcoded
    if a.size == b.size:
        multiplier(a, b, a.size, i, total_sum)

    else:
        print("impossible dot product for arrays with different size")

if __name__== "__main__":
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably considered cheating, but Python 3.5 <a href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-465" rel="nofollow noreferrer">added a matrix multiply operator</a> that <code>numpy</code> uses to compute the dot product without actually calling <code>np.dot</code>:</p>
<pre><code>&gt;&gt;&gt; arr1 = np.array([1,2,3])
&gt;&gt;&gt; arr2 = np.array([3,4,5])
&gt;&gt;&gt; arr1 @ arr2
26
</code></pre>
<p>Problem solved!</p>
</div>
<span class="comment-copy">This seems like a homework question. Why don't you share some code you've written so far?  The question is asking you to implement dot product without using a loop and without using np.dot. Look at some of the numpy functions and see if there's a way you can construct something that's equivalent to a dot product.</span>
<span class="comment-copy">First you should read about and understand what a dot product really does to two vectors.  It's probably simpler than you think.</span>
<span class="comment-copy">Have you considered reduce()?</span>
<span class="comment-copy">@awiebe: There is no need for it (and using it would prevent you from benefiting from <code>numpy</code> at all). Dot product is just element-wise multiplication, then summing, and they're explicitly allowed to use <code>np.sum</code>, and multiplication is easy.</span>
<span class="comment-copy">Someone just did your homework for you - <a href="https://stackoverflow.com/q/52889517/901925">stackoverflow.com/q/52889517/901925</a></span>
