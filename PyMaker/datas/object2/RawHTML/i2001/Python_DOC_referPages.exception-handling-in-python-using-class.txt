<div class="post-text" itemprop="text">
<p>I have doubt in python exception. 
Below code is taken from python document and I am confuse at one point. If any one can help, will be thankful.
Here this codes gives output as:</p>
<blockquote>
<p>B C D</p>
</blockquote>
<pre><code>class B(Exception):
    pass
class C(B):
    pass
class D(C):
    pass
for cls in [B, C, D]:
    try:
        raise cls()
    except D:
        print("D")
    except C:
        print("C")
    except B:
        print("B")
</code></pre>
<p>If I change except part of code like below code:
output will be :</p>
<blockquote>
<p>B B B</p>
</blockquote>
<pre><code>class B(Exception):
    pass
class C(B):
    pass
class D(C):
    pass
for cls in [B, C, D]:
    try:
        raise cls()
    except B:
        print("B")
    except C:
        print("C")
    except D:
        print("D")
</code></pre>
<p>When I run this code without try block as shown below:</p>
<pre><code>class B(Exception):
    pass
class C(B):
    pass
class D(C):
    pass
for cls in [B, C, D]:
    raise cls()
</code></pre>
<p>Here output is:</p>
<pre><code>Traceback (most recent call last):
  File "C:/Users/885710/Documents/PY/ErrorHandling.py", line 12, in &lt;module&gt;
    raise cls()
B
</code></pre>
<p>Similary for below code:</p>
<pre><code>class B(Exception):
    pass
class C(B):
    pass
class D(C):
    pass
for cls in [C,B, D]:
    raise cls()
</code></pre>
<p>Output is this</p>
<pre><code>Traceback (most recent call last):
  File "C:/Users/885710/Documents/PY/ErrorHandling.py", line 12, in &lt;module&gt;
    raise cls()
C
</code></pre>
<p>I confused because, if I run this code separately then it gives output as B or C or D
then why in my second code snippet it is giving output as </p>
<pre><code>B
B
B
</code></pre>
<p>even though except is define for all 3 Class B, C, D</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">Python's documentation</a> says:</p>
<blockquote>
<p>A class in an except clause is compatible with an exception if it is
  the same class or a base class</p>
</blockquote>
<p>Therefore the given code:</p>
<pre><code>for cls in [B, C, D]:
    try:
        raise cls()
    except D:
        print("D")
    except C:
        print("C")
    except B:
        print("B")
</code></pre>
<p>Can be simplified into the following:</p>
<pre><code>for cls in [B, C, D]:
    foo = cls()
    if isinstance(foo, D):
        print("D")
    elif isinstance(foo, C):
        print("C")
    elif isinstance(foo, B):
        print("B")
</code></pre>
<p>Then your modification would be turned into:</p>
<pre><code>for cls in [B, C, D]:
    foo = cls()
    if isinstance(foo, B):
        print("B")
    elif isinstance(foo, C):
        print("C")
    elif isinstance(foo, D):
        print("D")
</code></pre>
<p>So regardless whether <code>foo</code> is instance of <code>B</code>, <code>C</code> or <code>D</code> it will fulfil the first case, because <code>isinstance</code> yields <code>True</code> for instances of a subclass too.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since <code>B</code> is the super class of <code>C</code> and <code>D</code> your second version will always use the first <code>except</code> block for <code>B</code>. Because the Python runtime will search for a matching <code>except</code> block from top to bottom. An <code>except</code> block is matching if the exception is an instance of the class in the <code>except</code> block. If you throw an instance <code>C</code> for instance this block will match because <code>C()</code> is (also) an instance of <code>B</code>.</p>
<p>As a rule of thumb the <code>except</code> statements must decrease from the most specific condition to the most general condition, e. g.:</p>
<pre><code>try:
    throw ...
except D: # the most specific class
    print("D")
except C: # is more specific than B but less than D
    print("C")
except B: # the most general class in your hierarchy
    print("B")
except BaseException as e: the most general exception class
    print(e.__class__.__name__)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's first understand the class hierarchy involved in this code sample</p>
<pre><code>class B(Exception):
    pass
class C(B):
    pass
class D(C):
    pass
</code></pre>
<p>B -&gt; Base class</p>
<p>C -&gt; inherits from B</p>
<p>D -&gt; inherits from C and C -&gt; inherits from B</p>
<p>thus D -&gt; inherits from B and C</p>
<p><strong>A try statement may have more than one except clause for different exceptions. But at most one except clause will be executed</strong></p>
<p>Unless you are catching the raised the exception then base class is given the priority to be caught. i.e when exception classes are inherited then the priority in the <code>except</code> is given to the BASE class (in your code it's class <code>B</code>). </p>
<p>Now the first case : </p>
<pre><code>for cls in [B, C, D]:
    try:
        raise cls()
    except D:
        print("D")
    except C:
        print("C")
    except B:
        print("B")
</code></pre>
<p><code>Iteration 1</code> : 
  element : B</p>
<p>First control checks the <code>except D</code> as it's not a base class nor the matching class to the raised one then control will move to <code>except C</code> and at last it will execute <code>except B</code>, thus prints <code>B</code>.</p>
<p><code>Iteration 2</code> : 
  element : C</p>
<p>First control checks the <code>except D</code> as it's not a base class nor the matching class to the raised one then control will move to <code>except C</code> and will execute <code>except C</code>, thus prints <code>C</code></p>
<p><code>Iteration 3</code> : 
  element : D</p>
<p>First control checks the <code>except D</code> as it's a matching class then control will 
 execute <code>except D</code>, thus prints <code>D</code></p>
<p>Now consider Second case : </p>
<pre><code>for cls in [B, C, D]:
    try:
        raise cls()
    except B:
        print("B")
    except C:
        print("C")
    except D:
        print("D")
</code></pre>
<p>Here <code>B</code> is the base class for classes <code>C</code> and <code>D</code> so when you write <code>except B</code> at the top of except stack then the control does not go to subsequent <code>except C</code> and <code>except D</code>. So it prints output as <code>B</code> for each iteration of for loop.</p>
</div>
<span class="comment-copy"><i>C</i> <b>is</b> <i>B</i>, and <i>D</i> <b>is</b> <i>C</i> (which in turn is <i>B</i>), so (transitively) <i>D</i> <b>is</b> <i>B</i> (this is what inheritance is all about). The order that you are trying to handle exceptions <b>is</b> important (in this case). Probably you should extend all of your classes from <b><i>Exception</i></b> (instead of one from another - like you do now), and you'd get the behavior you desire in your 2nd snippet (without changing the other scenario(s)). <code>class C(Exception):</code>, <code>class D(Exception):</code>.</span>
<span class="comment-copy">Probably you should extend all of your classes from Exception&gt;&gt; can u please explain with example?</span>
<span class="comment-copy">If D is C and C is B hence D is B, then why it print B,C,D in first snippet and B,B,B in second. Still didnt get the point</span>
<span class="comment-copy">Because <b>is</b> is <b>one way only</b>: <i>C</i> <b>is</b> <i>B</i>, but <i>B</i> <b>is not</b> <i>C</i>.</span>
<span class="comment-copy">Ok Thank u.. got it.</span>
<span class="comment-copy">Thanx for adding up one more explanation. Great help!</span>
<span class="comment-copy">Excellent! Thank u so much for the explanation.</span>
