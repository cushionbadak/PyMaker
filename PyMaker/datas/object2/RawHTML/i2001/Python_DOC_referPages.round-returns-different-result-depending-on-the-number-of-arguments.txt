<div class="post-text" itemprop="text">
<p>While using the <code>round()</code> function I noticed that I get two different results depending on whether I don't explicitly choose the number of decimal places to include or choosing the number to be 0.</p>
<pre><code>x = 4.1
print(round(x))
print(round(x, 0))
</code></pre>
<p>It prints the following:</p>
<pre><code>4
4.0
</code></pre>
<p>What is the difference?</p>
</div>
<div class="post-text" itemprop="text">
<p>The round function returns an integer if the second argument is not specified, else the return value has the same type as that of the first argument:</p>
<pre><code>&gt;&gt;&gt; help(round)
Help on built-in function round in module builtins:

round(number, ndigits=None)
    Round a number to a given precision in decimal digits.

    The return value is an integer if ndigits is omitted or None. Otherwise
    the return value has the same type as the number. ndigits may be negative.
</code></pre>
<p>So if the arguments passed are an integer and a zero, the return value will be an integer type:</p>
<pre><code>&gt;&gt;&gt; round(100, 0)
100
&gt;&gt;&gt; round(100, 1)
100
</code></pre>
<hr/>
<p>For the sake of completeness:</p>
<p>Negative numbers are used for rounding before the decimal place</p>
<pre><code>&gt;&gt;&gt; round(124638, -2)
124600
&gt;&gt;&gt; round(15432.346, -2)
15400.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you specify the number of decimals, even if that number is 0, you are calling the version of the method that returns a float. So it is normal that you get that result. </p>
</div>
<div class="post-text" itemprop="text">
<p>The round() function in Python takes two parameters:</p>
<ol>
<li>number - number to be rounded</li>
<li>number of digits (optional) - the number of digits up to which the given number is to be rounded.</li>
</ol>
<p>Whenever you use the second parameter, Python automatically converts the data type of the return value to float. If you don't use the second optional parameter then the data type remains an integer.</p>
<p>Therefore, it is 4.0 when the parameter is passed and 4 when it isn't.</p>
</div>
<span class="comment-copy">I get 4.0 in both cases (python 3.5)</span>
<span class="comment-copy">@taras: nope, <code>round(4.1)</code> in Python 3.5 produces <code>4</code>, only <code>round(4.1, 0)</code> produces <code>4.0</code>. Do triple-check your Python versions. Use <code>import sys; print(sys.version_info)</code> from inside Python if you have to, because the behaviour you are reporting is specific to <i>Python two</i>. The <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer"><code>round()</code> function documentation for Python 3</a> covers this case explicitly: <i>If <code>ndigits</code> is omitted or is <code>None</code>, <b>it returns the nearest integer</b> to its input.</i>.</span>
<span class="comment-copy">@MartijnPieters, thank you for pointing it out. Apparently, I've checked it using 2.7 thinking I was running 3.5.</span>
<span class="comment-copy">I had no idea you could use negative numbers on <code>round()</code>. Good to know!</span>
<span class="comment-copy">Huh, really the most important part of the answer here is the <code>Help</code> function, because that would allow anyone to get the answer and so much more.</span>
<span class="comment-copy">Should it be the decimal <i>point</i> instead of the decimal <i>place</i>?</span>
<span class="comment-copy">Yep, pretty straightforward. Just like it says in <code>help(round)</code>, it "returns an int when called with one argument, otherwise the same type as the number."</span>
<span class="comment-copy">Might want to link to the <a href="https://docs.python.org/3.5/library/functions.html#round" rel="nofollow noreferrer">docs</a> and quote the first sentence.</span>
<span class="comment-copy">"version of the method that returns a float" no overloading or return types around here, it's just an <code>if</code> statement checking for <code>args</code></span>
<span class="comment-copy">This is incorrect. "Whenever you use the second parameter, Python automatically converts the data type of the return value to float.". Please cite sources. In this case, attempting to cite sources will show that the return type behaves as Aniket describes (And cites with <code>Help(round)</code>)</span>
