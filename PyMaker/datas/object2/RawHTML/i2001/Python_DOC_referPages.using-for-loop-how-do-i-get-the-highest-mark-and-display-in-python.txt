<div class="post-text" itemprop="text">
<p>I'm supposed to read in a csv file, and create a function that when called, will display the top scorer for a specific module. My current function is:</p>
<pre><code>def top_score():
import csv
filePath = "data.csv"
with open(filePath) as csvfile:
    reader = csv.DictReader(csvfile)    
    for row in reader:
        top110=max(row["mod1"])
        top121=max(row["mod2"])
        top135=max(row["mod3"])
        top142=max(row["mod4"])
    print("===============================================")
    print("Display Modules Top Scorer")
    print("===============================================")
    print("Module  | First Name | Last Name")
    print("{0:&lt;8}|{1:&gt;11} | {2:&lt;10}".format("mod1",top110(row["first_name"]),top110(row["last_name"])))
    print("{0:&lt;8}|{1:&gt;11} | {2:&lt;10}".format("mod2",row["first_name"],row["last_name"]))
    print("{0:&lt;8}|{1:&gt;11} | {2:&lt;10}".format("mod3",row["first_name"],row["last_name"]))
    print("{0:&lt;8}|{1:&gt;11} | {2:&lt;10}".format("mod4",row["first_name"],row["last_name"]))
</code></pre>
<p>The CSV contains the following:</p>
<pre><code>first_name,last_name,student_id,mod1,mod2,mod3,mod4
Kevin,James,S142D,89,67,54,78
Alex,Keys,S76H,87,78,86,67
Felicia,Lee,S852I,54,78,65,54
</code></pre>
<p>I get an error saying:</p>
<pre><code>line 70, in top_score
print("{0:&lt;8}|{1:&gt;11} | {2:&lt;10}".format("CSIT110",top110(row["first_name"]),top110(row["last_name"])))

builtins.TypeError: 'str' object is not callable
</code></pre>
<p>I know I'm doing something stupid, so a lil help would be nice!</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>top110</code> is obtained from the "maximum" value among columns of each row, which is a string, and is overridden for each iteration. By using an expression of <code>top110(row["first_name"])</code> you're treating <code>top110</code> as a function when it is a string, hence the error.</p>
<p>If you want to obtain the top scorer of each module, you should use the <code>max</code> function on all rows with <code>operator.itemgetter</code> as they key function to specify the column you want the maximum value to be based on:</p>
<pre><code>import csv
from operator import itemgetter
def top_score():
    filePath = "data.csv"
    with open(filePath) as csvfile:
        rows = list(csv.DictReader(csvfile))
        top110=max(rows, key=itemgetter('mod1'))        
        top121=max(rows, key=itemgetter('mod2'))        
        top135=max(rows, key=itemgetter('mod3'))        
        top142=max(rows, key=itemgetter('mod4'))        
        print("===============================================")
        print("Display Modules Top Scorer")
        print("===============================================")
        print("Module  | First Name | Last Name")
        print("{0:&lt;8}|{1:&gt;11} | {2:&lt;10}".format("mod1",top110["first_name"],top110["last_name"]))
        print("{0:&lt;8}|{1:&gt;11} | {2:&lt;10}".format("mod1",top121["first_name"],top121["last_name"]))
        print("{0:&lt;8}|{1:&gt;11} | {2:&lt;10}".format("mod1",top135["first_name"],top135["last_name"]))
        print("{0:&lt;8}|{1:&gt;11} | {2:&lt;10}".format("mod1",top142["first_name"],top142["last_name"]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you read in data it will be read in as a string. You have to convert it to whatever you need, such as an int.</p>
<p>It's the same with inputs.</p>
<p>So put <code>int()</code> around whatever you need to do comparisons against.</p>
<p>The error is because you are attempting to do some type of comparison that does not exist for string objects.</p>
<p>Also for future reference, I would recommend Pandas for handling csv.</p>
</div>
<span class="comment-copy">generally wouldn't recommend to import modules inside of functions, but I'm fairly new too</span>
<span class="comment-copy">@AlexisDrakopoulos - although not necessary here, importing within functions is fine and can improve readability of some code.</span>
<span class="comment-copy">Thanks Craig I'll keep that in mind</span>
<span class="comment-copy">` print("{0:&lt;8}|{1:&gt;11} | {2:&lt;10}".format("mod1",top110(row["first_name"]),top110(row["last_name"])))` no comma separators between <code>top110</code> and <code>(row)</code></span>
<span class="comment-copy">Please edit your question to include the entire error traceback (formatted as code). This will show which line of your code is causing the error.</span>
<span class="comment-copy">This code works, but I have no idea why it works. My tutor hasn't taught us about itemgetter,so this seems very confusing. Would it be okay if you explained it a bit for me?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>itemgetter('mod1')</code></a> is equivalent to <code>lambda x: x['mod1']</code>. It returns a function that takes a parameter and returns the value of the parameter with the given key. When <code>max</code> iterates through <code>rows</code> it uses the key function on each item in <code>rows</code> to determine the value of the item and from that, the maximum value among all the items in <code>rows</code>.</span>
<span class="comment-copy">Not allowed to use Pandas for this, sadly. However, when I use max(int(row["mod1"])), I get an error saying: 'int' object is not iterable</span>
