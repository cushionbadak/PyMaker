<div class="post-text" itemprop="text">
<p>I'm trying to look under the hood in idle to wrap my head around python custom classes and how they are stored in memory. Suppose I have the following code: </p>
<pre><code>class Point: 
    pass
x=Point()
print(x)
</code></pre>
<p>Given the following output: </p>
<blockquote>
<p><code>&lt;__main__.Point object at 0x000002A3A071DF60&gt;</code></p>
</blockquote>
<p>I know that since my class consists of no code, when I create an object of type <code>Point</code>, an object of type <code>object</code> is implicitly created from which the <code>Point</code> object <code>x</code> inherits such methods as <code>__str__</code> etc. However, I cant seem to see the connection ie. when I type <code>dir(x)</code>, I dont see any attribute that stores a reference to an object of type <code>object</code>. Am I misunderstanding how it works or is there some attribute that I am unaware of? </p>
</div>
<div class="post-text" itemprop="text">
<p>There is no (direct) <em>instance</em> of type <code>object</code> involved. When you call <code>Point()</code>, a <code>Point</code> instance is created, and nothing else. Inheritance is a mechanism that operates on <em>classes</em>, not on <em>instances</em>.</p>
<p>Python objects have two properties: Their <em>type</em> and their <em>value</em>. The <em>type</em> of <code>x</code> is <code>Point</code>. The <em>value</em> of <code>x</code> is represented by its <code>__dict__</code>, which is empty (because it has no attributes):</p>
<pre><code>&gt;&gt;&gt; type(x)
&lt;class '__main__.Point'&gt;
&gt;&gt;&gt; x.__dict__
{}
</code></pre>
<p>There is no reference to an <code>object</code> instance, because no such instance exists. The inheritance from <code>object</code> manifests in the <em>class</em> <code>Point</code>:</p>
<pre><code>&gt;&gt;&gt; Point.__base__
&lt;class 'object'&gt;
&gt;&gt;&gt; Point.mro()
[&lt;class '__main__.Point'&gt;, &lt;class 'object'&gt;]
</code></pre>
<p>So the reason why <code>x</code> can use <code>object</code> methods is because <code>Point</code> inherits from <code>object</code>, not because there's a hidden <code>object</code> instance stored in <code>x</code>. You can see that <code>Point</code> has access to all <code>object</code> methods:</p>
<pre><code>&gt;&gt;&gt; Point.__str__ is object.__str__
True
&gt;&gt;&gt; Point.__init__ is object.__init__
True
# etc...
</code></pre>
<p>So, by proxy, <code>x</code> has access to all <code>object</code> methods as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>you may be looking for <code>Point.__mro__</code>? the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=__mro__#class.__mro__" rel="nofollow noreferrer">method resolution order</a> of the class <code>Point</code>. it tells you in what order python will go looking for methods if you call <code>x.method</code>. in your case this will be:</p>
<pre><code>print(Point.__mro__)  # or Point.mro()
# (&lt;class '__main__.Point'&gt;, &lt;class 'object'&gt;)
</code></pre>
</div>
