<div class="post-text" itemprop="text">
<p>This is my code:</p>
<pre><code>import datetime
today = datetime.date.today()
print today
</code></pre>
<p>This prints: 2008-11-22 which is exactly what I want BUT....I have a list I'm appending this to and then suddenly everything goes "wonky". Here is the code:</p>
<pre><code>import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist
</code></pre>
<p>This prints the following: </p>
<pre><code>[datetime.date(2008, 11, 22)]
</code></pre>
<p>How on earth can I get just a simple date like "2008-11-22"?</p>
</div>
<div class="post-text" itemprop="text">
<h2>The WHY: dates are objects</h2>
<p>In Python, dates are objects. Therefore, when you manipulate them, you manipulate objects, not strings, not timestamps nor anything.</p>
<p>Any object in Python have TWO string representations:</p>
<ul>
<li><p>The regular representation that is used by "print", can be get using the <code>str()</code> function. It is most of the time the most common human readable format and is used to ease display. So <code>str(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'2008-11-22 19:53:42'</code>. </p></li>
<li><p>The alternative representation that is used to represent the object nature (as a data). It can be get using the <code>repr()</code> function and is handy to know what kind of data your manipulating while you are developing or debugging. <code>repr(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'datetime.datetime(2008, 11, 22, 19, 53, 42)'</code>.</p></li>
</ul>
<p>What happened is that when you have printed the date using "print", it used <code>str()</code> so you could see a nice date string. But when you have printed <code>mylist</code>, you have printed a list of objects and Python tried to represent the set of data, using <code>repr()</code>.</p>
<h2>The How: what do you want to do with that?</h2>
<p>Well, when you manipulate dates, keep using the date objects all long the way. They got thousand of useful methods and most of the Python API expect dates to be objects.</p>
<p>When you want to display them, just use <code>str()</code>. In Python, the good practice is to explicitly cast everything. So just when it's time to print, get a string representation of your date using <code>str(date)</code>.</p>
<p>One last thing. When you tried to print the dates, you printed <code>mylist</code>. If you want to print a date, you must print the date objects, not their container (the list).</p>
<p>E.G, you want to print all the date in a list :</p>
<pre><code>for date in mylist :
    print str(date)
</code></pre>
<p>Note that <strong><em>in that specific case</em></strong>, you can even omit <code>str()</code> because print will use it for you. But it should not become a habit :-)</p>
<h2>Practical case, using your code</h2>
<pre><code>import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print "This is a new day : ", mylist[0] # will work
&gt;&gt;&gt; This is a new day : 2008-11-22

print "This is a new day : " + mylist[0] # will crash
&gt;&gt;&gt; cannot concatenate 'str' and 'datetime.date' objects

print "This is a new day : " + str(mylist[0]) 
&gt;&gt;&gt; This is a new day : 2008-11-22
</code></pre>
<h2>Advanced date formatting</h2>
<p>Dates have a default representation, but you may want to print them in a specific format. In that case, you can get a custom string representation using the <code>strftime()</code> method.</p>
<p><code>strftime()</code> expects a string pattern explaining how you want to format your date.</p>
<p>E.G : </p>
<pre><code>print today.strftime('We are the %d, %b %Y')
&gt;&gt;&gt; 'We are the 22, Nov 2008'
</code></pre>
<p>All the letter after a <code>"%"</code> represent a format for something :</p>
<ul>
<li><code>%d</code> is the day number</li>
<li><code>%m</code> is the month number</li>
<li><code>%b</code> is the month abbreviation</li>
<li><code>%y</code> is the year last two digits</li>
<li><code>%Y</code> is the all year</li>
</ul>
<p>etc</p>
<p><a href="http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer">Have a look at the official documentation</a>, or <a href="http://strftime.org" rel="noreferrer">McCutchen's quick reference</a> you can't know them all.</p>
<p>Since <a href="http://www.python.org/dev/peps/pep-3101/" rel="noreferrer">PEP3101</a>, every object can have its own format used automatically by the method format of any string. In the case of the datetime, the format is the same used in
strftime. So you can do the same as above like this:</p>
<pre><code>print "We are the {:%d, %b %Y}".format(today)
&gt;&gt;&gt; 'We are the 22, Nov 2008'
</code></pre>
<p>The advantage of this form is that you can also convert other objects at the same time.<br/>
With the introduction of <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="noreferrer">Formatted string literals</a> (since Python 3.6, 2016-12-23) this can be written as</p>
<pre><code>import datetime
f"{datetime.datetime.now():%Y-%m-%d}"
&gt;&gt;&gt; '2017-06-15'
</code></pre>
<h2>Localization</h2>
<p>Dates can automatically adapt to the local language and culture if you use them the right way, but it's a bit complicated. Maybe for another question on SO(Stack Overflow) ;-)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import datetime
print datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
</code></pre>
<p><strong>Edit:</strong></p>
<p>After Cees suggestion, I have started using time as well:</p>
<pre><code>import time
print time.strftime("%Y-%m-%d %H:%M")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The date, datetime, and time objects all support a strftime(format) method, 
to create a string representing the time under the control of an explicit format
string.</p>
<p>Here is a list of the format codes with their directive and meaning. </p>
<pre><code>    %a  Locale’s abbreviated weekday name.
    %A  Locale’s full weekday name.      
    %b  Locale’s abbreviated month name.     
    %B  Locale’s full month name.
    %c  Locale’s appropriate date and time representation.   
    %d  Day of the month as a decimal number [01,31].    
    %f  Microsecond as a decimal number [0,999999], zero-padded on the left
    %H  Hour (24-hour clock) as a decimal number [00,23].    
    %I  Hour (12-hour clock) as a decimal number [01,12].    
    %j  Day of the year as a decimal number [001,366].   
    %m  Month as a decimal number [01,12].   
    %M  Minute as a decimal number [00,59].      
    %p  Locale’s equivalent of either AM or PM.
    %S  Second as a decimal number [00,61].
    %U  Week number of the year (Sunday as the first day of the week)
    %w  Weekday as a decimal number [0(Sunday),6].   
    %W  Week number of the year (Monday as the first day of the week)
    %x  Locale’s appropriate date representation.    
    %X  Locale’s appropriate time representation.    
    %y  Year without century as a decimal number [00,99].    
    %Y  Year with century as a decimal number.   
    %z  UTC offset in the form +HHMM or -HHMM.
    %Z  Time zone name (empty string if the object is naive).    
    %%  A literal '%' character.
</code></pre>
<p>This is what we can do with the datetime and time modules in Python</p>
<pre><code>    import time
    import datetime

    print "Time in seconds since the epoch: %s" %time.time()
    print "Current date and time: " , datetime.datetime.now()
    print "Or like this: " ,datetime.datetime.now().strftime("%y-%m-%d-%H-%M")


    print "Current year: ", datetime.date.today().strftime("%Y")
    print "Month of year: ", datetime.date.today().strftime("%B")
    print "Week number of the year: ", datetime.date.today().strftime("%W")
    print "Weekday of the week: ", datetime.date.today().strftime("%w")
    print "Day of year: ", datetime.date.today().strftime("%j")
    print "Day of the month : ", datetime.date.today().strftime("%d")
    print "Day of week: ", datetime.date.today().strftime("%A")
</code></pre>
<p>That will print out something like this:</p>
<pre><code>    Time in seconds since the epoch:    1349271346.46
    Current date and time:              2012-10-03 15:35:46.461491
    Or like this:                       12-10-03-15-35
    Current year:                       2012
    Month of year:                      October
    Week number of the year:            40
    Weekday of the week:                3
    Day of year:                        277
    Day of the month :                  03
    Day of week:                        Wednesday
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use date.strftime. The formatting arguments are <a href="https://docs.python.org/2/library/time.html#time.strftime" rel="noreferrer">described in the documentation</a>.</p>
<p>This one is what you wanted:</p>
<pre><code>some_date.strftime('%Y-%m-%d')
</code></pre>
<p>This one takes Locale into account. (do this)</p>
<pre><code>some_date.strftime('%c')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is shorter:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.strftime("%Y-%m-%d %H:%M")
'2013-11-19 09:38'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code># convert date time to regular format.

d_date = datetime.datetime.now()
reg_format_date = d_date.strftime("%Y-%m-%d %I:%M:%S %p")
print(reg_format_date)

# some other date formats.
reg_format_date = d_date.strftime("%d %B %Y %I:%M:%S %p")
print(reg_format_date)
reg_format_date = d_date.strftime("%Y-%m-%d %H:%M:%S")
print(reg_format_date)
</code></pre>
<blockquote>
<p>OUTPUT</p>
</blockquote>
<pre><code>2016-10-06 01:21:34 PM
06 October 2016 01:21:34 PM
2016-10-06 13:21:34
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Or even </p>
<pre><code>from datetime import datetime, date

"{:%d.%m.%Y}".format(datetime.now())
</code></pre>
<p>Out: '25.12.2013</p>
<p>or</p>
<pre><code>"{} - {:%d.%m.%Y}".format("Today", datetime.now())
</code></pre>
<p>Out: 'Today - 25.12.2013'</p>
<pre><code>"{:%A}".format(date.today())
</code></pre>
<p>Out: 'Wednesday'</p>
<pre><code>'{}__{:%Y.%m.%d__%H-%M}.log'.format(__name__, datetime.now())
</code></pre>
<p>Out: '__main____2014.06.09__16-56.log'</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple answer - </p>
<pre><code>datetime.date.today().isoformat()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With type-specific <a href="https://docs.python.org/3/library/datetime.html" rel="noreferrer"><code>datetime</code></a> string formatting (see <a href="https://stackoverflow.com/a/20776958/1619432">nk9's answer</a> using <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="noreferrer"><code>str.format()</code></a>.) in a <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="noreferrer">Formatted string literal</a> (since Python 3.6, 2016-12-23):</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; f"{datetime.datetime.now():%Y-%m-%d}"
'2017-06-15'
</code></pre>
<p>The date/time format directives are not documented as part of the <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="noreferrer">Format String Syntax</a> but rather in <code>date</code>, <code>datetime</code>, and <code>time</code>'s <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="noreferrer"><code>strftime()</code></a> documentation. The are based on the 1989 C Standard, but include some ISO 8601 directives since Python 3.6.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to convert the date time object to a string.</p>
<p>The following code worked for me:</p>
<pre><code>import datetime
collection = []
dateTimeString = str(datetime.date.today())
collection.append(dateTimeString)
print collection
</code></pre>
<p>Let me know if you need any more help.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do:</p>
<pre><code>mylist.append(str(today))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may want to append it as a string?</p>
<pre><code>import datetime 
mylist = [] 
today = str(datetime.date.today())
mylist.append(today) 
print mylist
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since the <code>print today</code> returns what you want this means that the today object's <code>__str__</code> function returns the string you are looking for. </p>
<p>So you can do <code>mylist.append(today.__str__())</code> as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>I hate the idea of importing too many modules for convenience. I would rather work with available module which in this case is <code>datetime</code> rather than calling a new module <code>time</code>.</p>
<pre><code>&gt;&gt;&gt; a = datetime.datetime(2015, 04, 01, 11, 23, 22)
&gt;&gt;&gt; a.strftime('%Y-%m-%d %H:%M')
'2015-04-01 11:23'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from datetime import date
def time-format():
  return str(date.today())
print (time-format())
</code></pre>
<p>this will print 6-23-2018 if that's what you want :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Considering the fact you asked for something simple to do what you wanted, you could just:</p>
<pre><code>import datetime
str(datetime.date.today())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://github.com/ralphavalon/easy_date" rel="nofollow">easy_date</a> to make it easy:</p>
<pre><code>import date_converter
my_date = date_converter.date_to_string(today, '%Y-%m-%d')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A quick disclaimer for my answer - I've only been learning Python for about 2 weeks, so I am by no means an expert; therefore, my explanation may not be the best and I may use incorrect terminology. Anyway, here it goes.</p>
<p>I noticed in your code that when you declared your variable <code>today = datetime.date.today()</code> you chose to name your variable with the name of a built-in function. </p>
<p>When your next line of code <code>mylist.append(today)</code> appended your list, it appended the entire string <code>datetime.date.today()</code>, which you had previously set as the value of your <code>today</code> variable, rather than just appending <code>today()</code>. </p>
<p>A simple solution, albeit maybe not one most coders would use when working with the datetime module, is to change the name of your variable.</p>
<p>Here's what I tried: </p>
<pre><code>import datetime
mylist = []
present = datetime.date.today()
mylist.append(present)
print present
</code></pre>
<p>and it prints <code>yyyy-mm-dd</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is how to display the date as (year/month/day) :</p>
<pre><code>from datetime import datetime
now = datetime.now()

print '%s/%s/%s' % (now.year, now.month, now.day)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't fully understand but, can use <code>pandas</code> for getting times in right format:</p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; pd.to_datetime('now')
Timestamp('2018-10-07 06:03:30')
&gt;&gt;&gt; print(pd.to_datetime('now'))
2018-10-07 06:03:47
&gt;&gt;&gt; pd.to_datetime('now').date()
datetime.date(2018, 10, 7)
&gt;&gt;&gt; print(pd.to_datetime('now').date())
2018-10-07
&gt;&gt;&gt; 
</code></pre>
<p>And:</p>
<pre><code>&gt;&gt;&gt; l=[]
&gt;&gt;&gt; l.append(pd.to_datetime('now').date())
&gt;&gt;&gt; l
[datetime.date(2018, 10, 7)]
&gt;&gt;&gt; map(str,l)
&lt;map object at 0x0000005F67CCDF98&gt;
&gt;&gt;&gt; list(map(str,l))
['2018-10-07']
</code></pre>
<p>But it's storing strings but easy to convert:</p>
<pre><code>&gt;&gt;&gt; l=list(map(str,l))
&gt;&gt;&gt; list(map(pd.to_datetime,l))
[Timestamp('2018-10-07 00:00:00')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import datetime
import time

months = ["Unknown","January","Febuary","Marchh","April","May","June","July","August","September","October","November","December"]
datetimeWrite = (time.strftime("%d-%m-%Y "))
date = time.strftime("%d")
month= time.strftime("%m")
choices = {'01': 'Jan', '02':'Feb','03':'Mar','04':'Apr','05':'May','06': 'Jun','07':'Jul','08':'Aug','09':'Sep','10':'Oct','11':'Nov','12':'Dec'}
result = choices.get(month, 'default')
year = time.strftime("%Y")
Date = date+"-"+result+"-"+year
print Date
</code></pre>
<p>In this way you can get Date formatted like this example: 22-Jun-2017</p>
</div>
<span class="comment-copy"><b>The short answer:</b> By applying <code>str()</code> (to each element of the list), because that is just what <code>print</code> implicitly did to your solo <code>today</code> object.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/a/39890902/1900645">stackoverflow.com/a/39890902/1900645</a></span>
<span class="comment-copy">guessing strftime is always time consuming complex task for this I created one service for help. check out  <a href="http://www.percepty.com/date-time-to-strftime-infer?date_time=Jun%201%202005%201:33PM" rel="nofollow noreferrer">percepty.com/…</a> Just enter your desired output date and get the format</span>
<span class="comment-copy">BTW Almost every data type in python is a class (except immutables, but they can be subclassed) <a href="http://stackoverflow.com/questions/865911/is-everything-an-object-in-python-like-ruby" title="is everything an object in python like ruby">stackoverflow.com/questions/865911/…</a></span>
<span class="comment-copy">What do you mean "almost" ? str and int have a <b>class</b> attribute, which contains 'type', therefor there are class themself, as they are instances of type metaclass.</span>
<span class="comment-copy">This is exactly the question of terminology: type != class?, i.e. is it enough to have type attribute (provide type inference mechanism to be qualified for an object) or should entity behave as an object. I am trying to resolve this for myself here <a href="http://programmers.stackexchange.com/questions/164570/formal-definition-for-term-pure-oo-language" title="formal definition for term pure oo language">programmers.stackexchange.com/questions/164570/…</a></span>
<span class="comment-copy">If you are an instance of a class, you are an object. Why would you need it to be more complicated ?</span>
<span class="comment-copy">Every value in Python is an object. Every object has a type. <a href="http://stackoverflow.com/questions/4162578/python-terminology-class-vs-type">"type" == "class"</a> formally (also see <code>inspect.isclass</code> to make sure). People tend to say "type" for built-ins and "class" for the rest, but that's not important</span>
<span class="comment-copy"><code>datetime.datetime</code>?</span>
<span class="comment-copy">You can use from <code>datetime import datetime</code>,  and then <code>print datetime().now().strftime("%Y-%m-%d %H:%M")</code>.  Only a syntax difference.</span>
<span class="comment-copy"><code>from datetime import date; date.today().strftime("%Y-%m-%d")</code> still looks unpythonic to me, but that's the best without <code>import time</code>. I think the datetime module is for date math.</span>
<span class="comment-copy"><a href="http://webdesignpluscode.blogspot.com/search/label/python" rel="nofollow noreferrer">webdesignpluscode.blogspot.com/search/label/python</a></span>
<span class="comment-copy">Note that I've also added this information to the accepted <a href="https://stackoverflow.com/a/311655/1619432">answer</a>.</span>
<span class="comment-copy">strftime doesn't really include an "ISO 8601 output". There are "directives", but only for specific tokens like "day of week", not a whole ISO 8601 timestamp, which I've always found annoying.</span>
<span class="comment-copy">Come on ! Don't encourage a newbie to store a string instead of a date object. He won't be able to know when it's a good or a bad idea...</span>
<span class="comment-copy">e-satis: If all you need is a string, what's the big deal? We store our firmware build dates as strings all the time -- sometimes storing a whole object is overkill when all you need is a simple timestamp (YAGNI and all).</span>
<span class="comment-copy">Yes, in certains case it is. I just mean just a newbie won't be able to identify these cases. So let's start with the right foot :-)</span>
<span class="comment-copy">I think it'd be more efficient to do that in one line of code by doing <code>a = datetime.datetime(2015, 04, 01, 23, 22).strftime('%Y-%m-%d %H:%M)</code></span>
<span class="comment-copy"><code>time-format</code> is not a valid function name</span>
<span class="comment-copy">A whole dependency to do something python std library has methods to do?</span>
<span class="comment-copy">Too much code for something you could get in one line. With <code>%b</code> you will get the first three month words, and with <code>%B</code> the entire month. Example: <code>datetime.datetime.now().strftime("%Y-%b-%d %H:%M:%S")</code> will return '2018-Oct-04 09:44:08'</span>
