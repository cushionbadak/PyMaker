<div class="post-text" itemprop="text">
<p>I need to find integers of a file. I need to get the average of these ints (I already have this part figured out). I get the error: "error on input []: Can't convert 'int' object to str implicitly"</p>
<p>EDIT - Code is working. Thank you everyone! DiCaprio helped me to come up with final solution.</p>
<p>I edited my final code to be this:</p>
<pre><code>   def average_ints():
        integers = []
        num_ints = 0
        avg = 0
        with open("file") as f:
            for line in f:
                for i in line.split(' '):
                     integers.append(int(i))
                    num_ints = num_ints + 1
        avg = (sum(integers))/((num_ints))
        return avg
</code></pre>
<p>How can I find the integers of this file?</p>
</div>
<div class="post-text" itemprop="text">
<p>use cast <code>int(x)</code> to transform str to int. By default everything is read from file as str.</p>
<pre><code>def average_ints():
    integers = 0
    num_ints = 0
    avg = 0
    with open("associate.txt") as f:
        for line in f:
            for i in line:
                # if i in line: &lt;- this should always be True
                integers += int(i)  # + integers &lt;- += adds and stores
                num_ints = num_ints + 1
    avg = integers/num_ints
    return avg
</code></pre>
<p>EDIT:</p>
<p>I just thought you probably get a problem with the <code>for i in line:</code> part.
Line would need to be split. try using <code>for i in line.split(' ')</code> assuming your ints are split by a space.</p>
<p>EDIT 2:</p>
<p>If it is one int per line use:</p>
<pre><code>def average_ints():
    integers = 0
    num_ints = 0
    avg = 0
    with open("associate.txt") as f:
        for line in f:
            integers += int(line)
            num_ints = num_ints + 1
    avg = integers/num_ints
    return avg
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that 'int' in lines is a string, and you need to convert it to an integer first. You can do this by replacing 'int' with int(int).</p>
<p>This is assuming that there are only numbers (characters that can be represented as floats or integers) in the file. If not, you need to account for that.</p>
<p>It's also not a good idea to name a variable after a built-in function, so I would change the name int to something else.</p>
</div>
<div class="post-text" itemprop="text">
<p>You probably shouldn't use "int" as variable as it's a built in and if you try to reference it later you wont be able to.</p>
<p>So by the looks of it you want to take all integers in a file and average them? Here's a function that will do it:</p>
<pre><code>def avg_ints(x): # Where x is a file
    total = 0
    count = 0
    lines = x.readlines()
    for line in lines:
        for character in line:
            try:
                character = int(character)
                count += 1
                total += character
            except ValueError:
                pass
    return total/count
f = open("associate.txt")
print(avg_ints(f))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried using regular expressions?  It might work a little easier for you.</p>
<p>Read the file and using an expression like this should parse the file for integers.</p>
<pre><code>[0-9]+
</code></pre>
<p><a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">https://docs.python.org/3/howto/regex.html</a></p>
<p>I hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Or why not this, a straightforward solution:</p>
<pre><code>def average_ints():
   with open("associate.txt") as f:
       integers=int(f.read())
       num_ints=len(str(integers))
   avg = integers/num_ints
   return avg
</code></pre>
<p>Just directly convert to integers without going trough each character</p>
<p>And if there are non-numeric values:</p>
<pre><code>def average_ints():
   num_ints=0
   integers=0
   with open("associate.txt") as f:
       for i in f.read():
           if i.isdigit():
               num_ints+=1
               integers+=int(i)
   avg = integers/num_ints
   return avg
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another solution with try and except:</p>
<pre><code>def average_ints():
    integers = 0
    num_ints = 0
    avg = 0
    with open("associate.txt") as f:
        for line in f:
            for s in line.split():
                try:
                    i = int(s)
                    integers = i + integers
                    num_ints = num_ints + 1
                except ValueError:
                    continue
    avg = integers/num_ints
    return avg
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I offer a slimmed down version of DiCaprio's answer with a few modifications to make sure you're just collecting integers and can use the function for multiple files.</p>
<pre><code>def average_ints(path):
    integers = []
    with open(path) as f:
        for line in f:
            for i in line:
                if i.isdigit(): # Checks if string i represents an integer
                    integers.append(int(i)) # Appends the string as an integer to your list
    return sum(integers) / len(integers) # Calculates the average of the list items

print(average_ints('associate.txt')) # Your specific use case
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can easily solve it using the regular expressions module.</p>
<pre><code>import re

def avarage_ints():
    with open("associate.txt") as f:
        content = f.read()
    list_of_integer_strings = re.findall(r'\d+', content)
    list_of_integers = list(map(int, list_of_integer_strings))
    avg = sum(list_of_integers) / len(list_of_integers)
    return avg
</code></pre>
<p>That regular expression will match any string consisting of decimal numbers in the file's content and findall will return a list containing them.</p>
<p>You might want to avoid matching integers that are in a word. For example, not counting the '2' in "sample2". In that case, you could change the regular expression from <code>r'\d+'</code> 
to <code>r'\A\d+\s|\s\d+\s|\s\d+$'</code></p>
</div>
<span class="comment-copy"><code>int</code> is a built-in, never use that name for your objects</span>
<span class="comment-copy">you probably should provide a sample of your file and full error message</span>
<span class="comment-copy">Are the integers in the file associate.txt all on one line or is it one integer per line?</span>
<span class="comment-copy">I'm confused by "if int in line:" do you mean to check if the line in the file is an integer? If so please look at the .is_integer() extension method; <a href="https://docs.python.org/2/library/stdtypes.html#float.is_integer" rel="nofollow noreferrer">docs.python.org/2/library/stdtypes.html#float.is_integer</a></span>
<span class="comment-copy">@BobbyDurrett It is one integer per line.</span>
<span class="comment-copy">To extend on this I think you should be checking that the input is an int before attempting to cast it.</span>
<span class="comment-copy">@MadisonCourto: or use EAFP and catch <code>ValueError</code> exception</span>
<span class="comment-copy">@AzatIbrakov agreed.</span>
<span class="comment-copy">I understand that I need the line.split(' ') part, but I don't understand why. What purpose does it have in the function? @DiCaprio</span>
<span class="comment-copy">This is giving me the incorrect return value. Returned:3.8571429. Exepcted: 9.0</span>
<span class="comment-copy">@ncohen10 Sorry, then i have no clue</span>
<span class="comment-copy">The comments say it is one integer per line so this is probably overkill.</span>
