<div class="post-text" itemprop="text">
<p>I am trying to read bytes from an image, and get all the int (16 bit) values from that image.
After I parsed the image header, I got to the pixel values. The values that I get when the pair of bytes are like b"\xd4\x00" is incorrect. In this case it should be 54272, not 3392.</p>
<p>This are parts of the code:
I use a generator to get the bytes:</p>
<pre><code>import itertools

def osddef_generator(in_file):
    with open(in_file, mode='rb') as f:
        dat = f.read()
        for byte in dat:
            yield byte

def take_slice(in_generator, size):
    return ''.join(str(chr(i)) for i in itertools.islice(in_generator, size))

def take_single_pixel(in_generator):
    pix = itertools.islice(in_generator, 2)

    hex_list = [hex(i) for i in pix]
    hex_str = "".join(hex_list)[2:].replace("0x", '')
    intval = int(hex_str, 16)
    print("hex_list: ", hex_list)
    print("hex_str: ", hex_str)
    print("intval: ", intval)
</code></pre>
<p>After I get the header correctly using the <code>take_slice</code> method, I get to the part with the pixel values, where I use the <code>take_single_pixel</code> method. 
Here, I get the bad results.
This is what I get:</p>
<pre><code>hex_list:  ['0xd4', '0x0']
hex_str:  d40
intval:  3392
</code></pre>
<p>But the actual sequence of bytes that should be interpreted is: <code>\xd4\x00</code>, which equals to <code>54272</code>, so that my <code>hex_list = ['0xd4', '0x00']</code> and <code>hex_str = d400</code>. 
Something happens when I have a sequence of bytes when the second one is <code>\x00</code>.</p>
<p>Got any ideas? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>There are much better ways of converting bytes to integters:</p>
<ul>
<li><p><a href="https://docs.python.org/3/library/stdtypes.html#int.from_bytes" rel="nofollow noreferrer"><code>int.from_bytes()</code></a> takes bytes input, and a byte order argument:</p>
<pre><code>&gt;&gt;&gt; int.from_bytes(b"\xd4\x00", 'big')
54272
&gt;&gt;&gt; int.from_bytes(b"\xd4\x00", 'little')
212
</code></pre></li>
<li><p>The <a href="https://docs.python.org/3/library/struct.html#struct.unpack" rel="nofollow noreferrer"><code>struct.unpack()</code> function</a> lets you convert a whole series of bytes to integers following a pattern:</p>
<pre><code>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack('!4H', b'\xd4\x00\xd4\x00\xd4\x00\xd4\x00')
(54272, 54272, 54272, 54272)
</code></pre></li>
<li><p>The <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer"><code>array</code> module</a> lets you read binary data representing homogenous integer data into a memory structure efficiently:</p>
<pre><code>&gt;&gt;&gt; array.array('H', fileobject)
</code></pre>
<p>However, <code>array</code> can't be told what byte order to use. You'd have to determine the current architecture byte order and call <code>arr.byteswap()</code> to reverse order if the machine order doesn't match the file order.</p></li>
</ul>
<p>When reading image data, it is almost always preferable to use the <code>struct</code> module to do the parsing. You generally then use <code>file.read()</code> calls with specific sizes; if the header consists of 10 bytes, use:</p>
<pre><code>headerinfo = struct.unpack('&lt;expected header pattern for 10 bytes&gt;', f.read(10))
</code></pre>
<p>and go from there. For examples, look at the <a href="https://github.com/python-pillow/Pillow/blob/master/src/PIL/" rel="nofollow noreferrer">Pillow / PIL image plugins source code</a>; here is how the <a href="https://github.com/python-pillow/Pillow/blob/00f9e8b5f1b0445cac4bdfefb7c9ae9a88f01b0e/src/PIL/BlpImagePlugin.py#L265-L281" rel="nofollow noreferrer">Blizzard Mipmap image format header is read</a>:</p>
<pre><code>def _read_blp_header(self):
    self._blp_compression, = struct.unpack("&lt;i", self.fp.read(4))


    self._blp_encoding, = struct.unpack("&lt;b", self.fp.read(1))
    self._blp_alpha_depth, = struct.unpack("&lt;b", self.fp.read(1))
    self._blp_alpha_encoding, = struct.unpack("&lt;b", self.fp.read(1))
    self._blp_mips, = struct.unpack("&lt;b", self.fp.read(1))


    self._size = struct.unpack("&lt;II", self.fp.read(8))


    if self.magic == b"BLP1":
        # Only present for BLP1
        self._blp_encoding, = struct.unpack("&lt;i", self.fp.read(4))
        self._blp_subtype, = struct.unpack("&lt;i", self.fp.read(4))


    self._blp_offsets = struct.unpack("&lt;16I", self.fp.read(16 * 4))
    self._blp_lengths = struct.unpack("&lt;16I", self.fp.read(16 * 4))
</code></pre>
<p>Because <code>struct.unpack()</code> always returns tuples, you can assign individual elements in a tuple to <code>name1, name2, ...</code> names on the left-hand size, including <code>single_name, =</code> assignments to extract a single result.</p>
<p>The separate set of read calls above could also be compressed into fewer calls:</p>
<pre><code>comp, enc, adepth, aenc, mips, *size = struct.unpack("&lt;i4b2I", self.fp.read(16))
if self.magic == b"BLP1":
    # Only present for BLP1
    enc, subtype = struct.unpack("&lt;2i", self.fp.read(8))
</code></pre>
<p>followed by specific attribute assignments.</p>
</div>
<span class="comment-copy"><code>dat = f.read(); for byte in dat: yield byte</code> -- this is a bit wasteful. Just do <code>with open(in_file, 'rb') as f: yield from f</code>.</span>
<span class="comment-copy">I tried this, and I cannot use iterator.slice() anymore. I always get all the bytes</span>
<span class="comment-copy">That's not the case. You can use <code>itertools.islice</code> with any iterator.</span>
<span class="comment-copy">This is a lot of suggestions. I will return with my results as soon as I test them. Thanks</span>
<span class="comment-copy">Thanks again. It worked using a combination of <code>struct</code> methods and <code>int.from_bytes(sl_pix, 'big')</code>. :)</span>
