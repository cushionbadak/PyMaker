<div class="post-text" itemprop="text">
<pre><code>def classify_images(images_dir = r"pet_images/", results_dic = None, model = 'resnet'):
    for key in results_dic:
        results_dic[key].append(classifier(images_dir + key, model).lower())
        if results_dic[key][0] in results_dic[key][1]:
            results_dic[key].append('1')
        else:
            results_dic[key].append('0')

classify_images(in_arg.dir, results, in_arg.arch)
</code></pre>
<p>This definition doesn't work as "/" sign in images_dir string is not passed along to classifier() function. When I put string directly in classifier function it works properly:</p>
<pre><code>def classify_images(images_dir = r'pet_images/', results_dic = None, model = 'resnet'):
    for key in results_dic:
        results_dic[key].append(classifier('pet_images/' + key, model).lower())
        if results_dic[key][0] in results_dic[key][1]:
            results_dic[key].append('1')
        else:
            results_dic[key].append('0')

classify_images(in_arg.dir, results, in_arg.arch)
</code></pre>
<p>It results in:</p>
<pre><code>FileNotFoundError: [Errno 2] No such file or directory: 'pet_imagesBasenji_00963.jpg'
</code></pre>
<p>Any ideas why slash sign is somehow disappearing when put in function definition as default argument?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can see the contents of <code>in_arg.dir</code> with <code>print(in_arg.dir)</code> and see if it is the same as what you expect it to be, in this case, you are expecting <code>pet_images/</code>.</p>
<p>Alternatively, you can use your defined keyword argument with:</p>
<pre><code>def classify_images(images_dir = r"pet_images/", results_dic = None, model = 'resnet'):
    for key in results_dic:
        results_dic[key].append(classifier(images_dir + key, model).lower())
        if results_dic[key][0] in results_dic[key][1]:
            results_dic[key].append('1')
        else:
            results_dic[key].append('0')

classify_images(images_dir = r"pet_images/", results_dic = results, mode = in_arg.arch)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>@Tgsmith61591 solution works perfectly.</p>
<pre><code>import os

def classify_images(images_dir = r"pet_images/", results_dic = None, model = 'resnet'):
    for key in results_dic:
        results_dic[key].append(classifier(os.path.join(images_dir, key), model).lower())
        if results_dic[key][0] in results_dic[key][1]:
            results_dic[key].append('1')
        else:
            results_dic[key].append('0')

classify_images(in_arg.dir, results, in_arg.arch)
</code></pre>
</div>
<span class="comment-copy">Are you perhaps calling <code>classify_images()</code> with <code>'pet_images'</code> as the first argument?</span>
<span class="comment-copy">You're not <i>using</i> the default!</span>
<span class="comment-copy">Aside: take a look at <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> or at least <a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer"><code>os.path</code></a>. Building paths by sticking strings together is fragile.</span>
<span class="comment-copy">Your sample code does not show the contents of the <code>in_arg.dir</code> variable being passed as an argument to the <code>classify_images()</code> function (which overrides the default value for the argument you have in the function definition).</span>
<span class="comment-copy">Use <code>os.path.join</code> to string together paths</span>
<span class="comment-copy">Great stuff! But generally not knowing what you are passing through your function is also dangerous, just to note.</span>
<span class="comment-copy">Thanks for help @BernardL. I'm not sure why they used 'in_arg.dir' and 'in_arg.arch'. I'd personally put arguments when calling the function. I'm a newbie though ;)</span>
<span class="comment-copy">You can refer to the answer I posted to easily see what values they actually store and whether you are using the right arguments. In any case, happy learning!</span>
<span class="comment-copy">Using <code>os.path.join(images_dir, key)</code> supplies the needed separator if it's not already present in the arguments passed to it (so it's hard to say if there's one at end of the <code>in_arg.dir</code> argument being used in the call to  <code>classify_images()</code> or not)â€”so I guess using it would be the safest approach (as well as the recommended way to join path components since it's OS-independent).</span>
