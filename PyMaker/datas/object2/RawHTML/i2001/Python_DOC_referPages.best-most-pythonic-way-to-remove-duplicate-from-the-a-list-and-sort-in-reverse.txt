<div class="post-text" itemprop="text">
<p>I'm trying to take a <code>list</code> (<code>orig_list</code> below), and return a <code>list</code> (<code>new_list</code> below) which:</p>
<ul>
<li>does not contain duplicate items (i.e. contains only unique elements)</li>
<li>is sorted in reverse order</li>
</ul>
<p>Here is what I have so far, which seems... I'm going to say "weird," though I'm sure there is a better way to say that. I'm mostly put off by using <code>list()</code> twice for what seems pretty straightforward, and then I'm wondering about the efficiency of this approach.</p>
<p><code>new_list = list(reversed(sorted(list(set(orig_list)))))</code></p>
<p><strong>Question #1</strong> (SO-style question):</p>
<p>Are the following propositions correct?</p>
<ol>
<li>There is no more efficient way to get unique elements of a <code>list</code> than converting the <code>list</code> to a <code>set</code> and back.</li>
<li>Since <a href="https://docs.python.org/3.6/library/stdtypes.html?highlight=set#set-types-set-frozenset" rel="nofollow noreferrer">sets are unordered in Python</a> one must (1) convert to a set before removing duplicate items because otherwise you'd lose the sort anyway, and (2) you have to convert back to a list before you sort.</li>
<li>Using list(reversed()) is programatically equivalent to using list.sort(reversed=True). </li>
</ol>
<p><strong>Question #2</strong> (bonus):</p>
<p>Are there any ways to achieve the same result in fewer Os, or using a less verbose approach? If so, what is an / are some example(s)?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>sorted(set(orig_list), reverse=True)
</code></pre>
<p>Shortest in code, more efficient, same result.</p>
<p>Depending on the size, it may or may not be faster to sort first then dedupe in linear time as user2864740 suggests in comments. (The biggest drawback to that approach is it would be entirely in Python, while the above line executes mostly in native code.)</p>
<p>Your questions:</p>
<ul>
<li><p>You do not need to convert from set to list and back. <code>sorted</code> accepts any iterable, so set qualifies, and spits out a list, so no post-conversion needed.</p></li>
<li><p><code>reversed(sorted(x))</code> is <em>not</em> equivalent to <code>sorted(x, reverse=True)</code>. You get the same result, but slower - <code>sort</code> is of same speed whether forward or reverse, so <code>reversed</code> is adding an extra operation that is not needed if you sort to the proper ordering from the start.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You've got a few mildly wasteful steps in here, but your proposition is largely correct. The only real improvements to be made are to get rid of all the unnecessary temporary <code>list</code>s:</p>
<pre><code>new_list = sorted(set(orig_list), reverse=True)
</code></pre>
<p><code>sorted</code> already converts its input to a <code>list</code> (so no need to <code>list</code>ify before passing to <code>sorted</code>), and you can have it directly produce the output <code>list</code> sorted in reverse (so no need to produce a <code>list</code> only to make a copy of it in reverse).</p>
<p>The only conceivable improvement on big-O time is if you <em>know</em> the data is already sorted, in which case you can avoid <code>O(n log n)</code> sorting, and uniqify without losing the existing sorted order by <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">using <code>itertools.groupby</code></a>:</p>
<pre><code>    new_list = [key for key, grp in itertools.groupby(orig_list)]
</code></pre>
<p>If <code>orig_list</code> is sorted in forward order, you can make the result of this reversed at essentially no cost by changing <code>itertools.groupby(orig_list)</code> to <code>itertools.groupby(reversed(orig_list))</code>.</p>
<p>The <code>groupby</code> solution isn't really practical for initially unsorted inputs, because if duplicates are even remotely common, removing them via uniquification as a <code>O(n)</code> step is almost always worth it, as it reduces the <code>n</code> in the more costly <code>O(n log n)</code> sorting step. <code>groupby</code> is also a relatively slow tool; the nature of the implementation using a bunch of temporary iterators for each group, internal caching of values, etc., means that it's a slower <code>O(n)</code> in practice than the <code>O(n)</code> uniquification via <code>set</code>, with its primary advantage being the streaming aspect (making it scale to data sets streamed from disk or the network and back without storing anything for the long term, where <code>set</code> must pull everything into memory).</p>
<p>The other reason to use <code>sorted</code>+<code>groupby</code> would be if your data wasn't hashable, but was comparable; in that case, <code>set</code> isn't an option, so the only choice is sorting and grouping.</p>
</div>
<span class="comment-copy">After doing a "descending sort" which has O(n lg n), it's possible to remove duplicates in O(n). This is because, after a sort, any duplicates will appear adjacent to each-other.</span>
<span class="comment-copy">Very good point about where the implementation is done. Also, if there is an 'excessive number of duplicates', I'd probably favor determining the unique set first, as shown.. but that feels like an extreme case.</span>
<span class="comment-copy">Nice showing of how to perform the grouping on sorted data. "Generally, the iterable needs to already be sorted on the same key function" from the <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools documentation on <code>groupby</code></a> seems lackluster due to the use of "Generally".. (in C# or SQL, as a counter-example, I'd expect a "group by" to work with unsorted data just as well)</span>
<span class="comment-copy">@user2864740: Yeah, <code>groupby</code> is analogous to <code>uniq</code> from the GNU utils, it's not a combined sort+grouping step like in SQL. The fact that it doesn't sort is actually useful in some cases (for grouping runs of data in the order they appear), which is why they say "Generally", but much like <code>uniq</code>, you usually need to precede it with a sort if you want only one group for each unique key across the whole iterable.</span>
