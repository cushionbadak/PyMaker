<div class="post-text" itemprop="text">
<p>I came to Python from Mathematica. Are there prefix, postfix, and infix operators without parentheses like in Mathematica in Python?</p>
<p>e.g. In Mathematica</p>
<pre><code>Print@@string
string~Join~string
data//Sum
</code></pre>
<p>I find I'm constantly using print to test functions and having to wrap the entire thing with parentheses seems cumbersome and cleanup is slow. Is there a way to have <code>[i for i in data]//Print</code> in Python3?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python does not have any postfix operators, though you could sort of mimic them using the <a href="https://docs.python.org/3/reference/datamodel.html#object.__radd__" rel="nofollow noreferrer">magic r-dunder methods</a> and infix operators if you try really hard.</p>
<p>For example,
</p>
<pre class="lang-py prettyprint-override"><code>class PrintType:
    def __rfloordiv__(self, other):
        print(other)

Print = PrintType()

[1, 2, 3]//Print
</code></pre>
<p>You might still require parentheses to get the precedence right though.</p>
<p>Python does have an <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">operator precedence table</a> in the documentation. Thus, operations with higher precedence will apply first and do not require explicit parenthesis, e.g. <code>10 + 2 * 3</code> is the same as <code>10 + (2 * 3)</code> in Python.</p>
<p>You could even generalize this to arbitrary 1-argument functions,</p>
<pre class="lang-py prettyprint-override"><code>class Slash2:
    def __init__(self, fn):
        self.fn = fn

    def __rfloordiv__(self, other):
        return self.fn(other)

Print = Slash2(print)
Sum = Slash2(sum)

[1, 2, 3]//Sum//Print
# prints "6"
[1, 2, 3]//Slash2(sum)//Slash2(print)  # Same thing.
</code></pre>
<p>If you're used to Mathematica, I would recommend using <a href="https://jupyter.org/" rel="nofollow noreferrer">Jupyter</a> notebooks for your Python experiments, as the paradigm of cells will be familiar to you.</p>
<p>Jupyter's Python kernel, <a href="https://ipython.org/" rel="nofollow noreferrer">IPython</a>, does have <code>%</code> magics that extend the native Python syntax somewhat. IPython includes an <a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-autocall" rel="nofollow noreferrer">%autocall</a> option to invoke functions without the parentheses. This can cause ambiguity in some cases and so is disabled by default.</p>
<p>You can also start a line with <code>/</code> <a href="https://ipython.org/ipython-doc/2/interactive/reference.html#automatic-parentheses-and-quotes" rel="nofollow noreferrer">for a similar effect</a> (it only works in IPython--see also <code>,</code> and <code>;</code> for auto call with auto quotes).</p>
<p>As in the IPython repl, the value of the last statement in a Jupyter cell will be displayed as output automatically--you don't have to call <code>print</code> on it. And for some data types, like Pandas data frames, it's better if you don't. It is also possible to configure it to display the output of multiple statements from the same cell.</p>
<p>The first cell you should try executing in Jupyter is</p>
<pre class="lang-py prettyprint-override"><code>?
</code></pre>
<p>Just a question mark. This will bring up the online help explaining IPython's features.</p>
</div>
<span class="comment-copy">You used to be able to use a print statement: <code>print 'something', but Python3 changed that so </code>print` is a function.  Now <code>print('something')</code> is the norm.  It might not be as convenient for interactive work, but it promisses greater consistency and flexibility.  And yes, try <code>ipython</code> and/or <code>jupyter</code>.  It has an auto-parenthesis feature: <a href="https://ipython.org/ipython-doc/3/interactive/reference.html#automatic-parentheses-and-quotes" rel="nofollow noreferrer">ipython.org/ipython-doc/3/interactive/â€¦</a></span>
<span class="comment-copy">Wrapping the entire thing with parentheses isn't that cumbersome with a good text editor. There are keyboard shortcuts for this kind of thing.</span>
<span class="comment-copy">I'm using Jupyter and c9.io. I just tried the auto-parenthesis <code>/</code> on a notebook and it works great. Unfortunately it doesn't work in c9. Does <code>/</code> stack or is it only for first character in a line. Would <code>/print /sum data</code> work?</span>
<span class="comment-copy">@IshouldchangemyUsername Autocall is only for IPython, not for <code>.py</code> files. It has to be the first character to work (except for indent). You can't really nest them.</span>
<span class="comment-copy">You could <code>/print sum(data)</code> though.</span>
