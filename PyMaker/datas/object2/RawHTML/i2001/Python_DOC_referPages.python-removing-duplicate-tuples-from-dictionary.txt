<div class="post-text" itemprop="text">
<p>I have this dictionary that has tuples as keys. All these tuples got two values, I'll use letters as values to keep things simple, e.g. the tuple (a, b).</p>
<p>The order of the two values doesn't matter, this means that (a, b) is essentially the same as (b, a) (or a sorta duplicate). So I tried to write something that would remove all of these redundant key, value pairs, only it doesn't work and I'm seriously stuck with it. I'm sure that it's just something simple I'm overlooking, regardless I can't figure it out.</p>
<p>I thought this would work:</p>
<pre><code>def undupe_overlaps(overlaps):
    dupes = []
    for key, item in overlaps.items():
        if (key[1], key[0]) in overlaps:
            dupes.append((key[1], key[0]))
    for item in dupes:
    overlaps.pop(item)
    return overlaps
</code></pre>
<p>overlaps is the dictionary and I use the list dupes cause you can't delete things from a dict and loop over it at the same time. Any help or tips would be appreciated :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert the keys into a list separately from the dict and then modify the dict as you iterate through the keys.</p>
<pre><code>def undupe_overlaps(overlaps):
    dupes = set()
    for key_tuple in list(overlaps.keys()):
        if key_tuple in dupes or (key_tuple[1], key_tuple[0]) in dupes:
            overlaps.pop(key_tuple)
        dupes.add(key_tuple)
    return overlaps
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>if</code> statement is wrong. It should be:</p>
<pre><code>if (key[1], key[0]) not in dupes:
        dupes.append(key)
</code></pre>
<p>Basically, you are asking that the current key, with element inverted is not already present inside the <code>dupes</code> list. </p>
<p>Your piece of code does not work because you are looking at overlaps, and inserting the current key if the inverted one is present. That way, the "single" keys, i.e. those that do not have their counterpart, are never inserted in <code>dupers</code>.</p>
</div>
<span class="comment-copy">maybe <code>sort</code> the tuple elements?</span>
<span class="comment-copy">In that case you should use <a href="https://docs.python.org/3/library/stdtypes.html#frozenset" rel="nofollow noreferrer"><code>frozenset</code>s</a> instead of  tuples as the keys, and you will get this property for free.</span>
<span class="comment-copy">Shouldn't it be and? I don't want to remove the key_tuple if there is no duplicate present</span>
<span class="comment-copy">No. The left side of that (<code>key_tuple in dupes</code>) should always return False, so only the right side (<code>(key_tuple[1], key_tuple[0]) in dupes</code>) has any effect. I've only included it to help show what the logic is here. If you change it to <code>and</code>, then the statement will never return True.</span>
<span class="comment-copy">Just tested it and it 100% works, so thanks for the help :) I'll examine it more so that I can understand it better! (I'd still consider myself new to all this)</span>
<span class="comment-copy">I changed the if statement and there are still dupes present</span>
