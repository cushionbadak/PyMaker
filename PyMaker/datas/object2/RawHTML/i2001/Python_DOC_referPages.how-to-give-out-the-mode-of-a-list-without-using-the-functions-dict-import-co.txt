<div class="post-text" itemprop="text">
<p>I have to write a program where I have got an input of 10 numbers and the program has to give out the mode of the list, without unsing the functions:</p>
<p><strong>dict, import, count, max, sort, enumerate, sorted!</strong></p>
<p>I do not know how I can write the function "count" an "sort" manuel.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>c</code> as a tuple that holds <code>(count, item)</code>. We can use <code>iter</code> to iterate through the values in <code>lst</code> and if their count is greater than the previous we can update the tuple to represent that item, after the <code>iter</code> is exhausted we print the item from the tuple.</p>
<pre><code>lst = [1, 2, 2, 3, 3, 3, 4, 5, 6, 6]

a = iter(lst)
c = (None, None)
while True:
    try:
        b = next(a)
        count = 0
        for i in lst:
            if b == i:
                count += 1
        if c[0] == None:
            c = (count, b)
        elif count &gt; c[0]:
            c = (count, b)
    except StopIteration:
        break

print(c[1])
# 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If there were no restrictions on the functions or modules you can use, the most efficient way to get the mode of a list is to use the <code>most_common</code> method of the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> class:</p>
<pre><code>from collections import Counter
Counter([1,1,2,2,2,3,4,4,5,6]).most_common(1)[0][0] # this returns 2
</code></pre>
<p>But since you are not allowed to use <code>import</code>, you can implement the same logic yourself by using a dict (not the <code>dict</code> function, but the dict data type) to keep track of the counts of each distinct item, and then iterate through the dict items to find the item with largest count:</p>
<pre><code>def get_mode(lst):
    dic = {}
    for item in lst:
        dic[item] = dic.get(item, 0) + 1
    mode, largest = None, None
    for item, count in dic.items():
        if largest is None or largest &lt; count:
            mode, largest = item, count
    return mode
</code></pre>
<p>so that:</p>
<pre><code>get_mode([1,1,2,2,2,3,4,4,5,6])
</code></pre>
<p>would return: <code>2</code></p>
</div>
