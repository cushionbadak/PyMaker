<div class="post-text" itemprop="text">
<p>What is the proper type annotation for an object that should be unpacked with the <code>*</code> operator, i.e. <code>foo</code> in this (random) example:</p>
<pre><code>def some_function(foo):
    ... = bar(*foo)
</code></pre>
<p>I know that <code>*</code> can unpack tuples and lists, but is it limited to these two classes or does it have any kind of interface that would make it usable for other collections?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python unpacks <em>any</em> iterable (so a <code>list</code>, <code>str</code>ing, <code>tuple</code>, <code>dict</code>ionary, etc.). You thus can use an <a href="https://docs.python.org/3/library/typing.html#generics" rel="nofollow noreferrer"><strong><code>Iterable</code></strong></a> for that, like:</p>
<pre><code>from typing import Iterable

def some_function(foo : <b>Iterable</b>):
    bar(*foo)</code></pre>
<p>In case the items that are unpacked should be of a specific type, you can specify this between square brackets, like:</p>
<pre><code># given the items that are unpacked should all be ints

from typing import Iterable

def some_function(foo : <b>Iterable[int]</b>):
    bar(*foo)</code></pre>
</div>
<span class="comment-copy">Would <code>typing.Iterable</code> suffice?</span>
<span class="comment-copy">No, that would mean that even strings are unpackable, but that raises a SyntaxError.</span>
<span class="comment-copy">Strings are unpackable though.</span>
<span class="comment-copy">@gmolau: strings are unpackable, all iterables are unpackable (well if the iterable never ends it will of course result in a memory error).</span>
<span class="comment-copy">How does it work for strings? I tried <code>*'foo'</code>.</span>
<span class="comment-copy">I have a question myself. Is there a good reason to use <code>typing.Iterable</code> over <code>collections.abc.Iterable</code> as long as you don't want to specify the content (e.g. <code>Iterable[int]</code>) of the iterable?</span>
<span class="comment-copy">@timgeb: good question! I think it does not make any difference, but personally I like the <code>typing</code> more, since this is designed towards the purpose of type signatures.</span>
