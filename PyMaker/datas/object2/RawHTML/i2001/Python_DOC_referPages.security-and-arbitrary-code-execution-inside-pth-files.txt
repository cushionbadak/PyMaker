<div class="post-text" itemprop="text">
<p>Reading deeply through the <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer">Python <code>site.py</code> documentation</a>, I found this regarding <code>.pth</code> files:</p>
<blockquote>
<p>Blank lines and lines beginning with # are skipped. Lines starting with import (followed by space or tab) are executed.</p>
</blockquote>
<p>These two sentences are easy to miss. They're at the end of a long-ish paragraph, meaning that scanning eyes will easily overlook them. I missed them even when I was actively looking for them.</p>
<p>An example of code execution comes from <code>python3.6/site-packages/virtualenvwrapper-4.8.2-py2.7-nspkg.pth</code>:</p>
<blockquote>
<pre><code>import sys, types, os;has_mfs = sys.version_info &gt; (3, 5);p = os.path.join(sys._getframe(1).f_locals['sitedir'], *('virtualenvwrapper',));importlib = has_mfs and __import__('importlib.util');has_mfs and __import__('importlib.machinery');m = has_mfs and sys.modules.setdefault('virtualenvwrapper', importlib.util.module_from_spec(importlib.machinery.PathFinder.find_spec('virtualenvwrapper', [os.path.dirname(p)])));m = m or sys.modules.setdefault('virtualenvwrapper', types.ModuleType('virtualenvwrapper'));mp = (m or []) and m.__dict__.setdefault('__path__',[]);(p not in mp) and mp.append(p)
</code></pre>
</blockquote>
<p>What is the purpose of allowing arbitrary code execution inside <code>.pth</code> files?</p>
<p>What are the best practices regarding inspecting or securing <code>.pth</code> files given that arbitrary code execution can have wide-ranging negative effects?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What is the purpose of allowing arbitrary code execution inside .pth files?</p>
</blockquote>
<p>It allows packages to configure <code>sys.path</code> by using code. This might be used for   conditional branching, e.g. platform-specific customizations.</p>
<blockquote>
<p>What are the best practices regarding inspecting or securing .pth files given that arbitrary code execution can have wide-ranging negative effects?</p>
</blockquote>
<p>The same as always - know what you're installing.  Using <code>pip install somepackage</code> is already allowing arbitrary code execution, <code>setup.py</code> is executed as code. So there is not really any additional vulnerability or possibility to hide code inside a <code>.pth</code> file.</p>
<p>There has been discussion recently about the possibility to deprecate and remove <code>.pth</code> hacks going forward (Python 3.8+), see <a href="https://bugs.python.org/issue33944" rel="nofollow noreferrer">issue33944</a> for further detail.</p>
</div>
<span class="comment-copy">There are also some rare uses of <code>.pth</code> files to change the behavior of the interpreter without modifying an application. I'm thinking of <a href="https://coverage.readthedocs.io/en/v4.5.x/subprocess.html#configuring-python-for-sub-process-coverage" rel="nofollow noreferrer">coverage's docs on subprocess coverage</a>.</span>
<span class="comment-copy">Yes, <code>coverage.py</code> uses it to "get in first", before any user code. Also some naughty installers such as <code>ruamel.yaml</code> use .pth files to hack namespace packages back into Python 2. It seems a lot of people are abusing the code execution feature for reasons other than the intended use case (i.e. configuring <code>sys.path</code>), but that's always been the case in Python - nothing is prohibited, all consenting adults, etc</span>
