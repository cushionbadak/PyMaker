<div class="post-text" itemprop="text">
<p>Consider following code:</p>
<pre><code>b = set([111,222,333,444])
a = set([10,20,30])
print max(a,b,key=len) # set([444, 333, 222, 111])
print max(a,b) # set([10, 20, 30])
</code></pre>
<p>I am curious, if there is no ‘key’ parameter, the max() function will return a confusing result, it is not the one contains more items, neither the one whose first item is bigger (10&lt;111), neither the first argument (if it doesn’t know how to compare the input arguments, maybe it will return the first argument which is b?)</p>
<p>By the explanation of <code>max()</code> function, it should return “the largest argument” if the input is two or more argument. So how to define the ‘largest’ among several sets?</p>
</div>
<div class="post-text" itemprop="text">
<p>Sets override <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code> and <code>&gt;=</code> to make <em>subset</em> and <em>superset</em> comparisons and should not be seen as orderable. </p>
<p>Because of this, <em>there is no 'max' or 'min' set</em>.</p>
<p>From the <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="noreferrer">set type documentation</a>:</p>
<blockquote>
<p><strong><code>issubset(other)</code></strong><br/>
<strong><code>set &lt;= other</code></strong></p>
<p>Test whether every element in the set is in other.</p>
<p><strong><code>set &lt; other</code></strong></p>
<p>Test whether the set is a proper subset of other, that is, <code>set &lt;= other and set != other</code>.</p>
<p><strong><code>issuperset(other)</code></strong><br/>
<strong><code>set &gt;= other</code></strong> </p>
<p>Test whether every element in other is in the set.</p>
<p><strong><code>set &gt; other</code></strong></p>
<p>Test whether the set is a proper superset of other, that is, <code>set &gt;= other and set != other</code>.</p>
</blockquote>
<p>and further down</p>
<blockquote>
<p>A set is less than another set if and only if the first set is a proper subset of the second set (is a subset, but is not equal). A set is greater than another set if and only if the first set is a proper superset of the second set (is a superset, but is not equal).</p>
</blockquote>
<p>and finally</p>
<blockquote>
<p>Since sets only define partial ordering (subset relationships), the output of the <code>list.sort()</code> method is undefined for lists of sets.</p>
</blockquote>
<p><code>max()</code> and <code>min()</code> use the same definitions of ordering to determine the largest or smallest item from a series of inputs, and because sets define ordering in terms of subset relationships, the output of <code>max()</code> and <code>min()</code> is undefined too.</p>
</div>
<span class="comment-copy">FYI: <code>max(b,a)</code> returned <code>set([444, 333, 222, 111])</code> so it seems that the first argument will be returned if the params are not scalar and no comparison function is given... which seems slightly worse than raising a doesNotComputeException but that's just my personal preference.</span>
<span class="comment-copy">@meissner: if no ordering support is implemented a <code>TypeError</code> exception would be raised. Sets do implement ordering hooks but have given the operations a different meaning: whether or not one operand is a subset of the other.</span>
<span class="comment-copy">@meissner: since neither <code>a &gt; b</code> nor <code>b &gt; a</code> is true here (neither set is a subset of the other), the first element is returned (max breaks ties between equal maximums by picking the first).</span>
