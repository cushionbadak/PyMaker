<div class="post-text" itemprop="text">
<p>I'm trying to solve the following problem (from <a href="https://www.educative.io/collection/5642554087309312/5679846214598656" rel="nofollow noreferrer">CodeRust 3.0</a>):</p>
<p><a href="https://i.stack.imgur.com/IdydC.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/IdydC.png"/></a></p>
<p>I thought I'd make use of the following recursive relation: in this example, the number of ways to make 7 with denominations <code>(1, 2, 5)</code> is the sum of the number of ways to make <code>0, 1, ..., 7</code> with denominations <code>(2, 5)</code> (that is, one recursive call on a smaller set of denominations for each choice of the number of the first coin, <code>1</code>).</p>
<p>In order to apply memoization, I thought I'd use <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache()</code></a>. Here is my solution so far (including <code>pytest</code> unit tests):</p>
<pre><code>import pytest
import functools


@functools.lru_cache()
def solve_coin_change_dp(denominations, amount):
    if amount == 0:
        return 1
    if amount &lt; 0:
        return 0
    if not denominations:
        return 0

    return sum(
        solve_coin_change_dp(
            denominations[1:],
            amount - i * denominations[0])
        for i in range(amount // denominations[0] + 1))


@pytest.fixture
def denominations():
    return (1, 2, 5)


def test_trivial():
    assert solve_coin_change_dp((1,), 1) == 1


def test_1(denominations):
    assert solve_coin_change_dp(denominations, 1) == 1


def test_2(denominations):
    assert solve_coin_change_dp(denominations, 2) == 2


def test_3(denominations):
    assert solve_coin_change_dp(denominations, 3) == 2


def test_4(denominations):
    assert solve_coin_change_dp(denominations, 4) == 3


def test_5(denominations):
    assert solve_coin_change_dp(denominations, 5) == 4


def test_7(denominations):
    assert solve_coin_change_dp(denominations, 7) == 6


def test_big_amount(denominations):
    solve_coin_change_dp(denominations, 1000)


if __name__ == "__main__":
    pytest.main([__file__, '--duration', '1'])
</code></pre>
<p>The problem is that the <code>lru_cache</code> does not seem to be helping at all to make the implementation fast. For an input of <code>1000</code>, the program still takes ~10s to run:</p>
<pre><code>coin_changing.py ........                                                [100%]

=========================== slowest 1 test durations ===========================
10.31s call     coin_changing.py::test_big_amount
========================== 8 passed in 10.35 seconds ===========================
</code></pre>
<p>If I consider the function calls, however, I would expect there to be 'saving' due to the memoization. For example, a call with arguments <code>(1, 2, 5), 5</code>, would lead to <code>(2, 5), 5</code>, <code>(2, 5), 4</code>, <code>(2, 5), 3</code>, <code>(2, 5), 2</code>, <code>(2, 5), 1</code>, and <code>(2, 5), 0</code>. The first and third of these should in turn at some point both lead to <code>(5,), 3</code>, which point one of these could use the cached result.</p>
<p>In short, why is this application of memoization not working?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>lru_cache</code> is an <em>LRU cache</em>. As in, it evicts the Least Recently Used element when the cache is full and a new element needs to be inserted. The default cache size is 128. Your memoized results are getting evicted.</p>
<p>Set <code>maxsize=None</code> to use an unbounded, non-LRU cache:</p>
<pre><code>@lru_cache(maxsize=None)
def ...
</code></pre>
</div>
<span class="comment-copy">What's the unmemoized runtime?</span>
<span class="comment-copy">Good catch! This reduces the runtime to 0.13s for the <code>test_big_amount</code>.</span>
