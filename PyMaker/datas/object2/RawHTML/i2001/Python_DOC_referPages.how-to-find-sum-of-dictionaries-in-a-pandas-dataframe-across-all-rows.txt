<div class="post-text" itemprop="text">
<p>I have a DataFrame    </p>
<pre><code>df = pd.DataFrame({'keywords': [{'a': 3, 'b': 4, 'c': 5}, {'c':1, 'd':2}, {'a':5, 'c':21, 'd':4}, {'b':2, 'c':1, 'g':1, 'h':1, 'i':1}]})
</code></pre>
<p>I want to add all the elements across all rows that would give the result without using <code>iterrows</code>:</p>
<pre><code>a: 8
b: 6
c: 28
d: 6
g: 1
h: 1
i: 1
</code></pre>
<p>note: no element occurs twice in a single row in the original DataFrame.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>, you can <code>sum</code> an iterable of <code>Counter</code> objects. Since <code>Counter</code> is a subclass of <code>dict</code>, you can then feed to <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.from_dict.html" rel="nofollow noreferrer"><code>pd.DataFrame.from_dict</code></a>.</p>
<pre><code>from collections import Counter

counts = sum(map(Counter, df['keywords']), Counter())
res = pd.DataFrame.from_dict(counts, orient='index')

print(res)

    0
a   8
b   6
c  28
d   6
g   1
h   1
i   1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure how this compares in terms of optimization with @jpp's answer, but I'll give it a shot.</p>
<pre><code># What we're starting out with
df = pd.DataFrame({'keywords': [{'a': 3, 'b': 4, 'c': 5}, {'c':1, 'd':2}, {'a':5, 'c':21, 'd':4}, {'b':2, 'c':1, 'g':1, 'h':1, 'i':1}]})

# Turns the array of dictionaries into a DataFrame
values_df = pd.DataFrame(df["keywords"].values.tolist())

# Sums up the individual keys
sums = {key:values_df[key].sum() for key in values_df.columns}
</code></pre>
</div>
<span class="comment-copy">figured i could do it with collections but couldn't figure out how to do it. thanks!</span>
<span class="comment-copy">is there a more memory efficient way of doing this? my dataframe is huge and it is taking a long time.</span>
<span class="comment-copy">@panaceanoob, I've updated to <code>map(Counter, df['keywords'])</code>. Don't see much improvement possible from here. You already have/chosen a very memory inefficient starting point (holding dictionaries in a dataframe). This isn't recommended. <code>sum</code> + <code>map</code> is lazy, memory isn't the bottleneck and <i>not</i> the reason it's taking a long time.</span>
