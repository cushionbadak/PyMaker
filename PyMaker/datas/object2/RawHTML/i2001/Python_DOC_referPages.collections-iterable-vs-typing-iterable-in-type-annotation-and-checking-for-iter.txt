<div class="post-text" itemprop="text">
<p>I found that in Python both <code>collections.Iterable</code> and <code>typing.Iterable</code> can be used in type annotation and checking for whether an object is iterable, i.e., both <code>isinstance(obj, collections.Iterable)</code> and <code>isinstance(obj, typing.Iterable)</code> works. My question is, what are the differences among them? And which one is preferred in which situations? </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>typing.Iterable</code> is generic, so you can say what it's an iterable of in your type annotations, e.g. <code>Iterable[int]</code> for an iterable of ints.</p>
<p>The collections iterable is an abstract base class. These can include <a href="https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes" rel="nofollow noreferrer">extra mixin methods</a> to make the interface easier to implement when you create your own subclasses.</p>
<p>Now it so happens that <code>Iterable</code> doesn't include any of these mixins, but it is part of the interface of other abstract base classes that do.</p>
<p>So in short, you should use the typing iterable in type annotations, but the collections iterable as a superclass.</p>
</div>
