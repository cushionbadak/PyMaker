<div class="post-text" itemprop="text">
<p>I am trying to create an object which can serialize and deserialize itself with a class method, without using the return statement (I do not want a static method). This is a concept of my class and a naive use case:</p>
<pre><code>import pickle

class A:
    def __init__(self):
        self.x = 0

    def add(self):
        self.x += 1

    def serialize(self, filename):
        """Simple object serialization given a filename"""
        with open(filename, 'wb') as f:
            pickle.dump(self, f)
            print("Serialized with value of: %d" % (self.x))

    def deserialize(self, filename):
        """Simple object deserialization given a filename"""
        with open(filename, 'rb') as f:
            print("self.x before load (inside deserialize): %d" % (self.x))
            self = pickle.load(f)
            print("Deserialized value inside deserialize function: %d" % (self.x))



a1 = A()
a2 = A()

a1.add()
a1.add()

a1.serialize('a.pkl')
a2.deserialize('a.pkl')

print("Deserialized value outside: %d" % (a2.x))
</code></pre>
<p>However, once I leave the deserialization method, <code>self</code> (in this case, the instance <code>a2</code>) does not keep its value.</p>
<p>Output when run:</p>
<pre><code>&gt;&gt; Serialized with value of: 2
&gt;&gt; self.x before load (inside deserialize): 0
&gt;&gt; Deserialized value inside deserialize function: 2
&gt;&gt; Deserialized value outside: 0
</code></pre>
<p>Why is this happening? I have also tried with <code>deepcopy</code> just after the <code>pickle.load</code> in the function <code>deserialize</code> but nothing seems to work, and I would like to understand why.</p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason this doesn't work is that because you can't assign to self (or rather: doing that doesn't do what you think it does). If you're interested to find out what actually happens, try assigning something weird to <code>self</code>, e.g. <code>self = "foobar"</code> (the behaviour will be unchanged).</p>
<hr/>
<p>Make <code>deserialize</code> a classmethod and use it as a "constructor":</p>
<pre><code>@classmethod
def deserialize(cls, filename):
    """Simple object deserialization given a filename"""
    with open(filename, 'rb') as f:
        obj = pickle.load(f)
        print("Deserialized value inside deserialize function: %d" % (obj.x))
        return obj
</code></pre>
<p>Then use it like this:</p>
<pre><code>a2 = A.deserialize('a.pkl')
</code></pre>
<hr/>
<p>Output:</p>
<blockquote>
<p>Serialized with value of: 2<br/>
  Deserialized value inside deserialize function: 2<br/>
  Deserialized value outside: 2</p>
</blockquote>
</div>
<span class="comment-copy">You need a few more functions to make this work. Otherwise you're just dumping the memory of the class constructor, not the instance of said class (if i'm not mistaken): <a href="https://docs.python.org/3/library/pickle.html#pickling-class-instances" rel="nofollow noreferrer">docs.python.org/3/library/pickle.html#pickling-class-instances</a>. A good explanation of the difference between a instance variable and a class variable can be found here: <a href="https://stackoverflow.com/questions/10842553/pickle-with-custom-classes" title="pickle with custom classes">stackoverflow.com/questions/10842553/pickle-with-custom-classes</a></span>
<span class="comment-copy">First of all please avoid <code>self = pickle.load(f)</code> and then in the <code>deserialize</code> method instead of outputting the read value, you are just asking it to print <code>self.x</code> which seems wrong to me.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/10842553/pickle-with-custom-classes">Pickle with custom classes</a></span>
<span class="comment-copy">@Torxed I have read it already, but his problem is that the empty variable is a class variable, not an instance variable. In my case, after the deserialization, the unchanged variable is an instance variable</span>
<span class="comment-copy">That's because you don't call the appropriate built in functions <code>__update__</code> etc. That is, if you really don't want a return function as mentioned in the solution below.</span>
<span class="comment-copy">This is what I was trying to avoid. I did not know I can't assign to <code>self</code>. Any reason or documentation on why this is not possible? Thanks!</span>
<span class="comment-copy">Just found this: <a href="https://stackoverflow.com/questions/1216356/is-it-safe-to-replace-a-self-object-by-another-object-of-the-same-type-in-a-meth" title="is it safe to replace a self object by another object of the same type in a meth">stackoverflow.com/questions/1216356/â€¦</a></span>
