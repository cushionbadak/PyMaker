<div class="post-text" itemprop="text">
<p>The Series is as below:</p>
<pre><code>value
aa aa bb cc
dd ee aa
ff aa cc
</code></pre>
<p>I want to count the occurrence of a word in the row and multiply it with weight given in the dictionary</p>
<pre><code>weights = {
   'aa':1,
   'bb':1,
   'cc':0.5
}
</code></pre>
<p>The resultant should be</p>
<pre><code>value_score
3.5
1
1.5
</code></pre>
<p>Above could be explained as sum(occurrence of word in dictionary * weight from dictionary) i.e for first value it is 2*1 + 1*1 + 1*0.5 = 3.5</p>
<p>I have currently implemented using str.count, but as more values come in, it is not efficent</p>
<pre><code>df['value_score'] = (df['value'].str.count('aa', regex=False) * weights['aa'] +
                     df['value'].str.count('bb', regex=False) * weights['bb'] +
                     df['value'].str.count('cc', regex=False) * weights['cc'] )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension with <code>get</code> for <code>0</code> for unmatched values:</p>
<pre><code>df['value_score'] = df['value'].apply(lambda x: sum(weights.get(y, 0) for y in x.split()))
print (df)
         value  value_score
0  aa aa bb cc          3.5
1     dd ee aa          1.0
2     ff aa cc          1.5
</code></pre>
<p>Another solution:</p>
<pre><code>df['value_score'] = df['value'].str.split(expand=True).stack().map(weights).sum(level=0)
print (df)
         value  value_score
0  aa aa bb cc          3.5
1     dd ee aa          1.0
2     ff aa cc          1.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>from collections import Counter

df['value_score'] = [sum(weights.get(k, 0) * v for k, v in Counter(x.split()).items()) \
                     for x in df['value']]

print(df)

         value  value_score
0  aa aa bb cc          3.5
1     dd ee aa          1.0
2     ff aa cc          1.5
</code></pre>
<p>No vectorised solution is possible. For performance, you should favour list comprehensions instead of Pandas <code>str</code> methods.</p>
</div>
<span class="comment-copy">Is there anyway that it could be done using pandas inbuilt functions.</span>
<span class="comment-copy">@Vishnudev - unfortunately not.</span>
<span class="comment-copy">I have a large dataframe and the above is a bit slow. Is there something I could do for making it efficient</span>
<span class="comment-copy">@Vishnudev - I think if use <code>apply</code> it should be slowier a bit, do you test it?</span>
<span class="comment-copy">I did test it. It took out some seconds on overall run.</span>
<span class="comment-copy">This worked, but is a bit slow on my set.</span>
