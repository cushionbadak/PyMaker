<div class="post-text" itemprop="text">
<p>From Numpy documentation:</p>
<pre><code>&gt;&gt;&gt; a = np.arange(10)**3
&gt;&gt;&gt; a
array([  0,   1,   8,  27,  64, 125, 216, 343, 512, 729])
&gt;&gt;&gt; a[2]
8
&gt;&gt;&gt; a[2:5]
array([ 8, 27, 64])
&gt;&gt;&gt; a[:6:2] = -1000    # equivalent to a[0:6:2] = -1000; from start to position 6, exclusive, set every 2nd element to -1000
&gt;&gt;&gt; a
array([-1000,     1, -1000,    27, -1000,   125,   216,   343,   512,   729])
&gt;&gt;&gt; a[ : :-1]                                 # reversed a
array([  729,   512,   343,   216,   125, -1000,    27, -1000,     1, -1000])
&gt;&gt;&gt; for i in a:
...     print(i**(1/3.))
...
nan
1.0
nan
3.0
nan
5.0
6.0
7.0
8.0
9.0
</code></pre>
<p>Could somebody explain me the last line of code? How does <code>i to the power of 1/3</code> equal these numbers? </p>
<p>For example <code>-1000^1/3 = nan</code>? What part have I skipped over?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is inbuilt function in numpy to find cuberoot.
Check this out:</p>
<pre><code>print(np.cbrt(a))
</code></pre>
<p>Your output will be :</p>
<pre><code>[-10.   1. -10.   3. -10.   5.   6.   7.   8.   9.]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, <code>(-1000)**(1/3.)</code> returns a complex number,</p>
<pre><code>&gt;&gt;&gt; (-1000)**(1/3.)
(5+8.660254037844384j)
</code></pre>
<p>This happens because the way computer store numbers, <code>1/3 = 0.33333...</code> is an irrational number which at some point gets approximated and therefore there is a loss in precision</p>
<hr/>
<pre><code>&gt;&gt;&gt; a = np.arange(10)**3
&gt;&gt;&gt; a[:6:2] = -1000
&gt;&gt;&gt; a
array([-1000,     1, -1000,    27, -1000,   125,   216,   343,   512,
         729], dtype=int32)
&gt;&gt;&gt; for i in a:
     print((i)**(1/3.))


nan
1.0
nan
3.0
nan
4.999999999999999
5.999999999999999
6.999999999999999
7.999999999999999
8.999999999999998
</code></pre>
<p>Here the values in the ndarray <code>a</code> are of <code>numpy.int32</code> type.<br/>
The code <code>(i)**(1/3.)</code> returns a result of type <code>numpy.float64</code> since the second argument is a floating point.</p>
<pre><code>&gt;&gt;&gt; [type((i)**(1/3.)) for i in a]
[&lt;class 'numpy.float64'&gt;, &lt;class 'numpy.float64'&gt;, &lt;class 'numpy.float64'&gt;, &lt;class 'numpy.float64'&gt;, &lt;class 'numpy.float64'&gt;, &lt;class 'numpy.float64'&gt;, &lt;class 'numpy.float64'&gt;, &lt;class 'numpy.float64'&gt;, &lt;class 'numpy.float64'&gt;, &lt;class 'numpy.float64'&gt;]
</code></pre>
<p><code>(-1000)**(1/3.)</code> is a complex number and cannot be stored as as <code>numpy.float64</code> therefore <code>nan</code></p>
<hr/>
<p>To avoid the <code>nan</code> you can change the <code>dtype</code> of the <code>ndarray</code> to <code>numpy.complex</code> and do the calculations</p>
<pre><code>&gt;&gt;&gt; b = a.astype(np.complex)
&gt;&gt;&gt; b
array([-1000.+0.j,     1.+0.j, -1000.+0.j,    27.+0.j, -1000.+0.j,
         125.+0.j,   216.+0.j,   343.+0.j,   512.+0.j,   729.+0.j])

&gt;&gt;&gt; for i in b:
     print((i)**(1/3.))


(4.999999999999999+8.660254037844384j)
(1+0j)
(4.999999999999999+8.660254037844384j)
(3+0j)
(4.999999999999999+8.660254037844384j)
(4.999999999999999+0j)
(5.999999999999999+0j)
(6.999999999999999+0j)
(7.999999999999999+0j)
(8.999999999999998+0j)
</code></pre>
<p>You can take the absolute values of these numbers using <code>abs()</code></p>
<pre><code>&gt;&gt;&gt; for i in b:
     print(round(abs((i)**(1/3.))))


10.0
1.0
10.0
3.0
10.0
5.0
6.0
7.0
8.0
9.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How does <code>i to the power of 1/3</code> equal these numbers?</p>
</blockquote>
<p>This is not just a NumPy or Python-specific feature. It's from math. <em>(In your example, it's numpy handling the math instead of Python, by overriding <a href="https://docs.python.org/3/library/operator.html#operator.__pow__" rel="nofollow noreferrer"><code>__pow__</code></a> but it works with pure-Python numbers as well.)</em></p>
<pre><code>&gt;&gt;&gt; 2 ** 5  # 2 raised to 5
32
&gt;&gt;&gt; 32 ** (1/5)  # 5th root of 32
2.0
</code></pre>
<p>x ** y (or "x raised to y"), 'y' can be:</p>
<ul>
<li>x ** 2 : <em>"x squared"</em></li>
<li>x ** 3 : <em>"x cubed"</em></li>
<li>x ** 5 : <em>"x raised to 5" or "5th power of x"</em></li>
</ul>
<p>It can also be a fraction:</p>
<ul>
<li>x ** (1/2) : <em>"square root of x"</em></li>
<li>x ** (1/3) : <em>"cube root of x"</em></li>
<li>x ** (1/5) : <em>"5th root of x"</em></li>
</ul>
<p>Here's a <a href="http://lasp.colorado.edu/~bagenal/MATH/math62.html" rel="nofollow noreferrer">source which explains it better</a>:</p>
<blockquote>
<p>the Sqrt process actually undoes what the raising to the power of 2 had done; in other words, in some sense this is the "opposite" process of squaring. Recall from our algebraic rules for powers that a number to a power can be raised to a power again and all we do is multiply the powers; then note that the square root process can be written as raising to the power of ½:</p>
<p>Sqrt(2²) = (2²)½ = 2² × ½ = 2^1 = 2</p>
</blockquote>
<p>And for a more mathematical proof: <a href="http://mathforum.org/library/drmath/view/65402.html" rel="nofollow noreferrer">Why Is an Exponent of 1/2 the Same as a Square Root?</a></p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/30923838/how-to-get-the-real-cube-root-of-a-negative-number-in-python3">How to get the real cube root of a negative number in Python3?</a></span>
<span class="comment-copy">This question is not a duplicate. Even if you replaced the print statement as print((i)**(1/3.)) you would get the same behaviour</span>
<span class="comment-copy">That won't work @AniketNavlur brother. I tried. It shows the same output</span>
<span class="comment-copy">If possible and agreed then plz mark the answer verified. Happy to help you :)</span>
