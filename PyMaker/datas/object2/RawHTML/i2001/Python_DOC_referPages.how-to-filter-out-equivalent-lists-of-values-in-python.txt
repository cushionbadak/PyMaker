<div class="post-text" itemprop="text">
<p>When given a list of lists like: <code>[[5, 2] [2, 5]]</code><br/>
I want to reduce this list to this: <code>[[5, 2]]</code> or <code>[[2, 5]]</code></p>
<p>I've already tried the following: <code>list(map(list, set(map(frozenset, parts_to_add))))</code><br/>
But the problem with this method is that it turns my lists in sets and while this works - it filters out all the equivalent lists - it also eats all of my duplicate values; When given <code>[[3, 3]]</code> it returns <code>[[3]]</code>, due to the nature of sets in python. Is there another way of doing this?<br/>
Any help would be grately appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do :</p>
<pre><code>data = [[5, 2], [2, 5], [3, 3]]

result = set(tuple(e) for e in map(sorted, data))

print([list(e) for e in result])
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[[2, 5], [3, 3]]
</code></pre>
<p>As @soon mentioned you could use a <em>frozen</em> Counter, for example:</p>
<pre><code>from collections import Counter

data = [[5, 2], [2, 5], [3, 3]]
result = [e for e in {frozenset(Counter(e)): e for e in data}.values()]
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[[2, 5], [3, 3]]
</code></pre>
<p>The above approach also uses a <code>dict</code> for removing duplicates instead of a <code>set</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A more straightforward approach would be,</p>
<pre><code>data = [[2, 5], [5, 2], [3, 6], [2, 5], [6, 3]]
result = []

for i in range(len(data)):
    data[i].sort()
    if data[i] not in result:
        result.append(data[i]) 



In [49]: result
Out[49]: [[2, 5], [3, 6]]
</code></pre>
</div>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> instead of sets</span>
<span class="comment-copy">well, there is the <i>Paris-to-NewYork-through-Moscow</i> approach: <code>[list(x) for x in set(tuple(sorted(x)) for x in a)]</code></span>
<span class="comment-copy">@soon How would you do that with <code>Counter</code>?</span>
<span class="comment-copy">Directly replacing frozenset with Counter, gives a <code>TypeError: unhashable type: 'Counter'</code></span>
<span class="comment-copy">@Ev.Kounis My bad, they will not work with sets. There is a way to make hashable counter just by freezing it, though I think it is better to just sort inner lists if they are small.</span>
<span class="comment-copy">can condense everything in one line <code>list(set(map(tuple,map(sorted, data))))</code></span>
<span class="comment-copy">Why would you use a <code>tuple</code> here Daniel?</span>
<span class="comment-copy">@Trashtalk tuples are hashable, so they can be used in a set.</span>
<span class="comment-copy">Thank you (filler)</span>
