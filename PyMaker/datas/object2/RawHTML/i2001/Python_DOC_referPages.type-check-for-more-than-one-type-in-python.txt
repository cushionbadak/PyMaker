<div class="post-text" itemprop="text">
<p>Since python is dynamically typed, of course we can do something like this:</p>
<pre><code>def f(x):
    return 2 if x else "s"
</code></pre>
<p>But is the way python was actually intended to be used? or in other words, do union types exist in the sense they do in racket for example? Or do we only use them like this:</p>
<pre><code>def f(x):
    if x:
        return "x"
</code></pre>
<p>where the only "union" we need is with None?</p>
</div>
<div class="post-text" itemprop="text">
<p>Union typing is only needed when you have a statically typed language, as you need to declare that an object can return one of multiple types (in your case an <code>int</code> or <code>str</code>, or in the other example <code>str</code> or <code>NoneType</code>).</p>
<p>Python deals in <em>objects</em> only, so there is never a need to even consider 'union types'. Python functions return what they return, if the programmer wants to return different types for different results then that's their choice. The choice is then an architecture choice, and makes no difference to the Python interpreter (so there is nothing to 'benchmark' here).</p>
<p>Python 3.5 does introduce a standard for creating optional type <em>hints</em>, and that standard includes <a href="https://docs.python.org/3/library/typing.html#typing.Union"><code>Union[...]</code></a> and <a href="https://docs.python.org/3/library/typing.html#typing.Optional"><code>Optional[...]</code></a> annotations.</p>
</div>
<div class="post-text" itemprop="text">
<p>the type itself does not exist because Python is just a dynamically typed language, however, in newer Python versions, Union Type is an option for <a href="https://docs.python.org/3/library/typing.html#typing.Union" rel="noreferrer">Type Hinting</a>, </p>
<pre><code>from typing import Union,TypeVar

T = TypeVar('T')
def f(x: T) -&gt; Union[str, None]:
    if x:
        return "x"
</code></pre>
<p>you can use that to annotate your code, thus enabling IDE/Editor level syntax checking.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are a couple of options to deal with use-cases where you need a <a href="https://en.wikipedia.org/wiki/Tagged_union#Examples" rel="nofollow noreferrer">tagged union/sum type</a> in Python:</p>
<ul>
<li><p><strong>Enum + Tuples</strong></p>
<pre><code>from enum import Enum
Token = Enum('Token', ['Number', 'Operator', 'Identifier', 'Space', 'Expression'])

(Token.Number, 42)                            # int type
(Token.Operator, '+')                         # str type 1
(Token.Identifier, 'foo')                     # str type 2
(Token.Space, )                               # no data
(Token.Expression, 'lambda', 'x', 'x+x')      # multiple data
</code></pre></li>
<li><p><strong><code>isinstance</code></strong></p>
<pre><code>if isinstance(token, int):
    # Number type
if isinstance(token, str):
    # Identifier type
</code></pre></li>
<li><p><strong><a href="https://pypi.org/project/sumtypes/" rel="nofollow noreferrer">sumtypes</a> module</strong></p></li>
</ul>
<p>These approaches all have their various drawbacks, of course.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding to @MartijnPieters answer:</p>
<blockquote>
<p>But is the way python was actually intended to be used?</p>
</blockquote>
<p>Returning different type depending on the param is never a good practice in any language. This makes testing, maintaining and extending the code really difficult and IMHO is an anti-pattern (but of course sometimes necessary evil). The results should at least be related via having common interface.</p>
<p>The only reason <code>union</code> was introduced to C was due to performance gain. But in Python you don't have this performance gain due to dynamic nature of the language (as Martijn noticed). Actually introducing <code>union</code> would lower performance since the size of <code>union</code> is always the size of the biggest member. Thus Python will never have C-like <code>union</code>.</p>
</div>
<span class="comment-copy">To clarify, you mean the <a href="https://docs.racket-lang.org/ts-guide/types.html#%28part._.Union_.Types%29" rel="nofollow noreferrer">union types from <i>Typed</i> Racket</a>? Python has nothing like those.</span>
<span class="comment-copy">Thank you! I understand that python is not statically typed. But I wanted to know if, in practice, it would ever be necessary to have a function that returns multiple types based on the parameter, or whether there'd ALWAYS be a way around it in python?</span>
<span class="comment-copy">@Lana: that's way, way too broad. But take a look at <code>pickle.loads()</code> or <code>json.loads()</code>. These return arbitrary objects, based on what data is being loaded.</span>
<span class="comment-copy">@Lana: and again, it's a software architecture choice as to what a function returns. It's good practice to be consistent and limit what is returned, but 'a way around it' is just using good software engineering practices. If your function can return <code>True, False, None or an integer</code> for example, you need to rethink your function design.</span>
<span class="comment-copy">Thank you! That's exactly what I want to know though. When is using unions in python a necessary evil? And when we talk about "unions" do we talk about a union with none? (when I noticed a lot in python) or unions between different types? I was wondering if there is any example code that shows that.</span>
<span class="comment-copy">Note that I don't think the OP is talking about the C union. I'm more thinking they have a Java or C# type system in mind.</span>
<span class="comment-copy">@Lana As Martijn noticed <code>json.loads()</code> is an example of a necessary evil. "Unions" with <code>None</code> is a general practice but IMO should be avoided as well. Especially in bigger projects you just can't stop reading these <code>NoneType object has no attribute xxx</code> logs. My personal opinion: one function == one return type.</span>
<span class="comment-copy">@MartijnPieters I have no idea how unions work in other languages. Sorry, I can only refer to C unions.</span>
<span class="comment-copy">Thank you guys! json.loads() was exactly what I'm looking for. I needed to see examples of using multiple types and it seems streaming is one example. Are there any other situations? Or is there any where I can look to find more examples like these?</span>
