<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9647202/ordinal-numbers-replacement">Ordinal numbers replacement</a>
<span class="question-originals-answer-count">
                    17 answers
                </span>
</li>
</ul>
</div>
<p>I'm relatively new to Python (actively coding for 2 months), and I just coded a simple function that converts an integer to a string and adds the English 2-character string as a suffix that traditionally indicates the integer's order in a list.
I quickly coded something that works great, but it is <em>killing</em> me because I just <em>know</em> there is a more pythonic way to do this.</p>
<p>So what I'm trying to achieve is:</p>
<pre><code>i_to_suffix_str(1) =&gt; '1st'
i_to_suffix_str(11) =&gt; '11th'
i_to_suffix_str(33) =&gt; '33rd'
i_to_suffix_str(142) =&gt; '142nd'
</code></pre>
<p>...etc.</p>
<p>My code (which feels neither concise nor Pythonic):</p>
<pre><code>def i_to_suffix_str(i):
    sig_digits = i % 100
    if sig_digits &gt; 3 and sig_digits &lt; 21:
        suffix = 'th'
    elif (sig_digits % 10) == 1:
        suffix = 'st'
    elif (sig_digits % 10) == 2:
        suffix = 'nd'
    elif (sig_digits % 10) == 3:
        suffix = 'rd'
    else:
        suffix = 'th'
    return str(i) + suffix
</code></pre>
<p>I've tasted of the ways of Python, and I know that there must be a better way.
...any takers?</p>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps use a dictionary to trim it down a bit     </p>
<pre><code>lst = [1, 11, 20, 33, 44, 50, 142]
sigs = {1: 'st', 2: 'nd', 3: 'rd'}
for i in lst:
    if 3 &lt; i &lt; 21:
        print(f'{i}th')
    elif int(str(i)[-1]) in sigs.keys():
        print(f'{i}{sigs[int(str(i)[-1])]}')
    else:
        print(f'{i}th')
# 1st 11th 20th 33rd 44th 50th 142nd
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a dictionary combined with Python <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">ternary operator</a>, for instance:</p>
<pre><code>def i_to_suffix_str(i):
    sig_digits = i % 100
    suffixes = {1: 'st', 2: 'nd', 3: 'rd'}
    suffix = 'th' if 3 &lt; sig_digits &lt; 21 else suffixes.get(sig_digits % 10, 'th')
    return str(i) + suffix

print(i_to_suffix_str(1))
print(i_to_suffix_str(11))
print(i_to_suffix_str(33))
print(i_to_suffix_str(142))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>1st
11th
33rd
142nd
</code></pre>
</div>
<span class="comment-copy">Why not use <a href="https://pypi.org/project/num2words/" rel="nofollow noreferrer"><b><code>num2words</code></b></a>.</span>
