<div class="post-text" itemprop="text">
<p>I have multiple python modules that I'd like to use the same logger while preserving the call hierarchy in those logs. I'd also like to do this with a logger whose name is the name of the calling module (or calling module stack). I haven't been able to work out how to get the name of the calling module except with messing with the stack trace, but that doesn't feel very pythonic.</p>
<p>Is this possible?</p>
<p>main.py</p>
<pre><code>import logging
from sub_module import sub_log

logger = logging.getLogger(__name__)
logger.info("main_module")

sub_log()
</code></pre>
<p>sub_module.py</p>
<pre><code>import logging

def sub_log():
    logger = logging.getLogger(???)
    logger.info("sub_module")
</code></pre>
<p>Desired Output</p>
<pre><code>TIME main INFO main_module
TIME main.sub_module INFO sub_module
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To solve your problem pythonic use the Logger Formatter:</p>
<p>For reference check the 
<a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">Logging Docs</a></p>
<p>main.py</p>
<pre><code>import logging
from submodule import sub_log
from submodule2 import sub_log2


logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
# create file handler which logs even debug messages
fh = logging.FileHandler('test.log')
fh.setLevel(logging.DEBUG)
# create formatter and add it to the handlers
formatter = logging.Formatter('%(asctime)s %(name)s.%(module)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
# add the handlers to the logger
logger.addHandler(fh)

sub_log("test")
sub_log2("test")
</code></pre>
<p>submodule.py</p>
<pre><code>import logging
import __main__

def sub_log(msg):
    logger = logging.getLogger(__main__.__name__)
    logger.info(msg)
</code></pre>
<p>I've created second submodule. ( same code other name)</p>
<p>My Results:</p>
<pre><code>2018-10-16 20:41:23,860 __main__.submodule - INFO - test
2018-10-16 20:41:23,860 __main__.submodule2 - INFO - test
</code></pre>
<p>I hope this will help you :)</p>
</div>
<span class="comment-copy">Just pass the desired string as logger name. If you want <code>main.sub_module</code> to be printed, instantiate the logger with that name: <code>logger = logging.getLogger('main.sub_module')</code> etc.</span>
<span class="comment-copy">I was hoping to be able to figure that out without passing a string to all of my submodules functions. Something more like, <code>logging.getLogger(__nameofcallstack__.__name__)</code></span>
<span class="comment-copy">oh, I see. How about <code>logging.getLogger(__module__)</code>?</span>
<span class="comment-copy">It definitely solves the problem if the call is one module deep, but what if submodule also calls submodule2? Then it seems like we lose the full call stack, and I wouldn't know the difference between main calling submodule2 and submodule calling submodule2 in the log file. I should've been more specific in my original question, but I didn't know you could use "<b>main</b>" like that so thanks for that!</span>
<span class="comment-copy">Adding to above comment, this definitely answers the question I asked so that's on me for not being more specific.</span>
