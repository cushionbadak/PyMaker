<div class="post-text" itemprop="text">
<p>I am trying to understand string representation in python 3. I've seen various explanations on the site, and from the book learning python by Mark Lutz that in python 3, str objects are stored as Unicode code points. Quoting the book, "non-Unicode code sequences are sequences of 8 bit bytes that print with ASCII characters when possible, and Unicode strings are sequences of Unicode code points".</p>
<p>I understand the first part of the quote above, but I don't quite understand the second. How can a sequence of characters, such as when I type S = 'spam' into the console, be stored as 'Unicode code points'?</p>
<p>I believe code points are just numbers that correspond to characters, however the actual encoding that takes you from this number to binary representation depends on the system you choose to use, such as utf-8 or utf-32 . If this is true (please correct me if its not!), then in order for my variable S to be saved to memory, the computer must at some point convert 'spam' into some sequence of bytes. So I go from some characters to a binary for, which is a form of encoding? I have seen another post where it was explained that python does not do its own encoding.</p>
<p>I don't understand then how my variable S could be saved to memory without undergoing some form of encoding (not just storing the data as code points as the book explains)?</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your quote doesn't say anything about the in-memory representation of a Unicode string. It says "Unicode strings <strong>are</strong> sequences of Unicode code points", not "are stored as".</p>
<p>This quote is a description of the meaning of a Unicode string, not its in-memory representation. Python has a <em>lot</em> of ways of representing Unicode strings internally, including ASCII, UTF-8, and UTF-32. It can even have multiple representations stored in the same string object; particularly, <a href="https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsUTF8AndSize" rel="nofollow noreferrer">PyUnicode_AsUTF8AndSize</a> will cause a string to store an auxiliary UTF-8 representation unless the string is ASCII (which is already valid UTF-8), and a string may also have a wchar_t representation stored.</p>
<p>All memory representations are implementation details and subject to change. If you want to see the internal representation, take a look at <a href="https://github.com/python/cpython/blob/v3.7.0/Include/unicodeobject.h" rel="nofollow noreferrer"><code>Include/unicodeobject.h</code></a></p>
</div>
<span class="comment-copy">In memory, the unicode code point is saved, which is a positive number. You can find out that number by using <code>ord()</code> on any unicode char. The memory basicly holds a binary representation of that number</span>
<span class="comment-copy">Does this mean when I type S = 'spam'  python is using a particular encoding to save the character sequence in memory?</span>
<span class="comment-copy">@masiewpao: For that string, in current CPython, probably ASCII.</span>
<span class="comment-copy">Python (at least CPython) does not use UTF-8 internally for strings.</span>
<span class="comment-copy">@user2357112 Also sorry for double commenting, but I don't understand why 'spam' is equivalent to '\u0073\u0070\u0061\u006D'. This implies that 's' is equivalent to '\u0073' which is just the code point, and similarly for the other characters. But as per this article, <a href="http://kunststube.net/encoding/" rel="nofollow noreferrer">kunststube.net/encoding</a> , the code point itself is not an encoding. So somehow the text 'spam' is being expressed as numbers (code points) but then how do those code points get saved in memory without encoding?</span>
<span class="comment-copy">@user2357112 Ah I typed my previous comment before seeing your reply. Thank you!</span>
