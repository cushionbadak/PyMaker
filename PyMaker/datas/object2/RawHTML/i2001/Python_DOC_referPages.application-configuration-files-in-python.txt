<div class="post-text" itemprop="text">
<p>I am designing a multi tenant workload automation software (software to run Jobs automatically). For this I am creating a default Job configuration class. Configurations specified in this class will be applied to all types of Jobs by default. </p>
<p>Tenants (owners of Jobs) can opt to override these default configurations for their specific class of Jobs.</p>
<p>For example:</p>
<pre><code># Default configurations for all types of Jobs
class DefaultConfigurations:

    def __init__(self, job_defintion):
        self.job_state_database = DEFAULT_DB
        self.job_definition_repository_type = DEFAULT_REPO
        .... 
        # there will be 100's of configurations like this. 
</code></pre>
<p>Now if some tenant wants to override the default application configuration for their specific type of jobs, they can inherit from DefaultConfiguration class and override the configurations that they want to override. </p>
<p>For example:</p>
<pre><code># These overridden configurations will be applied to all the HiveJobs.
class HiveJobs(DefaultConfigurations):

     def __init__(self, job_definition):
        self.job_state_database = "sql"
        self.job_definition_repository_type = "svn"

# These overridden configurations will be applied to all the SparkJobs.
class SparkJobs(DefaultConfigurations):

     def __init__(self, job_definition):
        self.job_state_database = "MongoDb"   
        if (job_definition.technology == "Old")
            self.job_state_database = "sql"  
</code></pre>
<p>For all other types of jobs, default configurations will be used. </p>
<p>Individual jobs too have their definitions (mentioned in XML form). In an individual job definition XML file, class of job is also specified. For example, Hive Job will specify its class as "hive" in its definition. </p>
<p>Example of job_definition file for one of the hive jobs:</p>
<pre><code>&lt;job_definition&gt;

    name hello_world_from_hive
    class hive
    command echo "hello world from Hive"

    cron_schedule 5 4 * * * 

&lt;/job_defintion&gt;
</code></pre>
<p>At runtime, Job Executor will check the class of Job that is specified in its definition file and pick the configuration class accordingly (for example: DefaultConfigurations, HiveJobs or SparkJobs in the example above). </p>
<p>Job executor will construct a job_definition object from XML file and pass that Job definition object to the corresponding configuration class to get the final configurations that are needed to execute this job. This is needed so that some configurations can be added/removed based on some run time parameters too. Please note that the preference will be given to configurations overridden in individual Job definition file. </p>
<p>I am not sure if the above way is the best way to write such configuration files in Python. </p>
</div>
<div class="post-text" itemprop="text">
<p>Just parameterize <code>__init__</code> to set the attribute values as needed.</p>
<pre><code>class Configuration:
    def __init__(self, db, repo_type):
        self.job_state_database = db
        self.job_definition_repository_type = repo_type

d = Configuration(DEFAULT_DB, DEFAULT_REPO)
hj = Configuration("sql", "svn")
</code></pre>
<p>If you don't want users manually passing around database and repository types, define class methods to wrap them.</p>
<pre><code>class Configuration:
    def __init__(self, db, repo_type):
        self.job_state_database = db
        self.job_definition_repository_type = repo_type

    @classmethod
    def default_configuration(cls):
        return cls(DEFAULT_DB, DEFAULT_REPO)

    @classmethod
    def hive_configuration(cls):
        return cls("sql", "svn")


d = Configuration.default_configuration()
hj = Configuration.hive_configuration()
</code></pre>
<p>In neither case do I seen any reason to define distinct types to reflect information that is stored in the attributes.... <em>unless</em> the distinct types
override various methods in such a way that you no longer need to store the database and repository type information explicitly. (We're getting into design
issues that can't be judged based solely on the information in your question, though.)</p>
<pre><code>class Configuration:
    def do_something(self):
        """Do stuff using the default database/repo"""

class HiveJob(Configuration):
    def do_something(self):
        """Do stuff using sql/svn instead"""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I am not sure if the above way is the best way to write such configuration files in Python.</p>
</blockquote>
<p>If the configuration is not required to be a XML, Python has a very good integration with json, so instead of using xml, you could json in your configuration. For example:</p>
<pre><code>{
  "name": "hello_world_from_hive",
  "class": "hive",
  "command": "echo 'hello world from Hive'",
  "cron_schedule": "5 4 * * *"
}
</code></pre>
<p>Then, reading the config file will be simply:</p>
<pre><code>import json

with open('job_definition.json', 'r') as file:
  job_definition = json.load(file)
</code></pre>
<p>Now, <code>job_definition</code> is a python object and you can access it normally such as:</p>
<pre><code>job_definition['name']
</code></pre>
<p>If XML is a requirement, I would suggest use a parser, such as etree or lxml, and then converting that into a python object.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe the most natural way to store this type of information in python is to use dictionnaries.</p>
<p>Not only do they store (key, value) pairs, they can also overwrite each other, sparing your user the burden of inheritance.</p>
<pre><code># Default configurations for all types of Jobs
DefaultConfigurations = {
    'job_state_database':DEFAULT_DB,
    'job_definition_repository_type':DEFAULT_REPO,
    # there will be 100's of configurations like this.
}

# Specific configurations
def HiveJobs(technology):
    job_state_database = "MongoDb"
    if (technology == "Old")
       job_state_database = "sql"
    return {**DefaultConfigurations,
            **{'job_state_database':job_state_database,}}.


my_config = {**HiveJobs("Old"), 
             **{'my_custom_param':my_custom_value}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the most frequently used way of configuration is py file in Python world. In flask and Django, they use py file as configuration file by default.</p>
<p>User can define their configuration in a py file <em>config.py</em> like this:</p>
<pre><code>JOB_STATUS_DATABASE = 'sql'
JOB_REPOSOTIRY_TYPE = 'svn'
</code></pre>
<ol>
<li>Simple to read and write</li>
<li>You just need to tell your tenants those configuration fields, They need not to care about your implementation details.</li>
<li>one config file for one job category, for example: config_hive.py for hive jobs.</li>
</ol>
<p>You can have a look at <a href="https://github.com/pallets/flask/blob/master/flask/config.py#L40" rel="nofollow noreferrer"><code>flask.config</code> module</a> and <a href="https://github.com/django/django/blob/master/django/conf/global_settings.py" rel="nofollow noreferrer"><code>django.conf.global_settings</code> example</a>.</p>
<p>Flask config module also support construct configurations from a normal class, which is similar with your method. In my opinion, construct configuration from py file is more simple and stupid. User may not want to inherit from your configuration class and write <code>self.balabla = xxx</code> in their code, <code>BLABLA = xxx</code> is just clear and enough.</p>
<hr/>
<p>You can also have a look at YAML, it seems that many system define their configuration in a YAML file, for example: <a href="https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#running-an-example-job" rel="nofollow noreferrer">Kubernetes job config</a>, travis-ci config and so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">ConfigParser</a>, which is very easy to use, example:</p>
<pre><code>import configparser
config = configparser.ConfigParser()
config['job'] = {};
config['job']['state_database'] = 'DEFAULT_DB';
config['job']['definition_repository_type'] = 'DEFAULT_REPO';
with open('example.ini', 'w') as configfile:
  config.write(configfile)
# and read
config.read('example.ini')
print(config.sections())
print(config['job']['state_database'])
</code></pre>
</div>
<span class="comment-copy">Why not define a class <code>Configuration</code> with a parameterized <code>__init__</code>? Is there any difference between <code>DefaultConfigurations</code> and <code>HiveJobs</code> other than the values of those two attributes?</span>
<span class="comment-copy">HiveJobs is just one class of jobs, tomorrow I can have SparkJobs, HadoopJobs etc. Each of these class of Jobs will have their own default configurations for an application.</span>
<span class="comment-copy">HiveJobs class contains all the default configurations of Jobs of type Hive. Each Hive job will specify what configurations it want to use, if Hive Job definition does not contain some required configuration, then that configuration will be loaded from HiveJob default configurations class.</span>
<span class="comment-copy">What difference does this provide as compared to a simple dict, plus a factory function? Not sure if I correctly understood the use case.</span>
<span class="comment-copy">Thanks for the insights. Please note that this is a multi tenant software, I being application owner may not own the configurations of HiveJobs owner. Hence I proposed the inheritance.</span>
<span class="comment-copy">I don't see where multitenancy comes into play. If you creating the <code>DefaultConfiguration</code> class to be subclassed, you can just as easily create a <code>Configuration</code> class whose instances are to be parameterized. The HiveJobs owner can subclass or instantiate as required by your design.</span>
<span class="comment-copy">As a general rule: if you can do something without inheritance, do it.</span>
<span class="comment-copy">Added more detail to the question, to make it more clear.</span>
<span class="comment-copy">You just added more data that can also be passed as arguments to <code>__init__</code>. What, if any, <i>methods</i> are defined for these classes?</span>
<span class="comment-copy">JSON, is hardly human-friendly. Endless amounts of double quotes, braces and square brackets. Try deleting the "cron_schedule" line, you are bound to end up with a non-JSON file because it is normal to forget you also have to delete the trailing comma on the line above that. It was just not developed for humans and that shows, and in that respect is not really a better choice than XML</span>
<span class="comment-copy">@Anthon A few years ago I would've agreed with you. But after using Sublime Text for a couple of years and configuring other applications with json, I think it's more of a question of taste: JSON is much less verbose and light, while still being descriptive and human-readable. XML has its own pitfalls when editing manually. So It depends on what the author thinks it's best.</span>
<span class="comment-copy">I am not sure, if you read the question properly.</span>
