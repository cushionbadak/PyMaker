<div class="post-text" itemprop="text">
<p>I have a pre-defined list of words; e.g.:</p>
<pre><code>wordlist = [["one"],["two"],["three"]]
</code></pre>
<p>And I have a large corpus of .txt files, also imported into python as a list, e.g.:</p>
<pre><code>corpus = ["my friend has one potato",
"i have two bananas and three apples",
"my dad has three apples"] 
</code></pre>
<p>I want a formula that goes through the corpus line by line and tells me the amount of words from my wordlist that are contained in each line; i.e., exemplary output would be:</p>
<pre><code>1
2
1
</code></pre>
<p>I need no differentiation between the words in the wordlist.</p>
<p>However, I want this to be a formula, so that I can easily apply it with different word lists or corpora.</p>
<p>I have not found an answer on SO or elsewhere. What I have tried is:</p>
<pre><code>wordcount_total=list()
for i in range(len(corpus)):
    row=corpus[i]
    wordcount_row=sum(1 for word in row.split() if word in wordlist)
    wordcount_total.append(wordcount_row)
</code></pre>
<p>However, this gives me:</p>
<pre><code>0
0
0
</code></pre>
<p>Many thanks to anyone willing to help!</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is here:</p>
<pre><code>sum(1 for word in row.split() if word in wordlist)
</code></pre>
<p><code>word</code> is a string, but <code>wordlist</code> is a list of <em>list of strings</em>. The two aren't comparable.</p>
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain</code></a> to flatten your nested list. You can also simplify your logic by calculating the lengths of <code>set</code> intersections:</p>
<pre><code>from itertools import chain

word_set = set(chain.from_iterable(wordlist))
res = [len(word_set &amp; set(line.split())) for line in corpus]

[1, 2, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create a helper function like so:</p>
<pre><code>def find_num_occurences(word, string):
    return string.lower().split().count(word)
</code></pre>
<p>Then, use this on each word in your string of words you're looking for:</p>
<pre><code>for word in wordlist:
    word_count = 0
    for line in corpus:
        sum_in_line = find_num_occurences(word, line)
        word_count = word_count + sum_in_line
    print(word_count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider also using <code>collections.Counter</code> for this.</p>
<pre><code>counts = collections.Counter()
for line in corpus:
    for word in line.split():
        if word in wordlist:
            counts[word] += 1            
</code></pre>
<p>Assuming you're using <code>sklearn</code> already in and around whatever NLP you're doing, another option is to use <code>sklearn</code>'s <code>CountVectorizer</code> for this and then just go in after the fact to look at the vocabulary to see the counts:</p>
<pre><code>from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer()
vectorizer.fit(corpus)
vectorizer.vocabulary_
</code></pre>
<p>... where <code>.vocabulary_</code> will be a dict-like object that has counts per word.</p>
<p>This latter method will scale nicely to other NLP-isms too (e.g. stopword removal, tf-idf weighting).</p>
</div>
<span class="comment-copy">Why is your word list nested? I don't think <code>in</code> does a deep search; it's only a shallow, top level membership test.</span>
<span class="comment-copy">You should store your <code>wordlist</code> in a set because it allows you to check if something is in the set very quickly. Also you have your <code>wordlist</code> as a list of lists instead of a list of strings.</span>
<span class="comment-copy">Thank you, that worked great!</span>
<span class="comment-copy">One follow-up: By calculating set intersections, your formula above does not count multiple instances of the same word (from the list) in the text. It works in the example above, but if a sentence in the corpus were "I have one apple and one banana", your formula would return "1" for that sentence. So I needed to combine your hint regarding the word set with my original formula.</span>
<span class="comment-copy">@Adam, That's a bit more involved. You probably want to use <code>Counter(x.split())</code> and feed to <code>sum</code> via a generator expression and an <code>if</code> statement. Give it a go, if you're stuck you can ask a new question.</span>
<span class="comment-copy">Thanks, this worked, though I found the answer by jpp above to be more efficient. This was very easy to understand though.</span>
<span class="comment-copy">@Adam Admittedly, yeah jpp has a better answer. Glad you found mine easier to understand though : )</span>
