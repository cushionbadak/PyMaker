<div class="post-text" itemprop="text">
<p>Is there any way to make <code>pip</code> play well with multiple versions of Python? For example, I want to use <code>pip</code> to explicitly install things to either my site 2.5 installation or my site 2.6 installation.</p>
<p>For example, with <code>easy_install</code>, I use <code>easy_install-2.{5,6}</code>.</p>
<p>And, yes — I know about virtualenv, and no — it's not a solution to this particular problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://packaging.python.org/guides/installing-using-pip-and-virtualenv/" rel="noreferrer">current recommendation</a> is to use <code>python -m pip</code>, where <code>python</code> is the version of Python you would like to use. This is the recommendation because it works across all versions of Python, and in all forms of virtualenv. For example:</p>
<pre><code># The system default python:
$ python -m pip install fish

# A virtualenv's python:
$ .env/bin/python -m pip install fish

# A specific version of python:
$ python-3.6 -m pip install fish
</code></pre>
<p>Previous answer, left for posterity:</p>
<p>Since version 0.8, Pip supports <code>pip-{version}</code>. You can use it the same as <code>easy_install-{version}</code>:</p>
<pre><code>$ pip-2.5 install myfoopackage
$ pip-2.6 install otherpackage
$ pip-2.7 install mybarpackage
</code></pre>
<hr/>
<p><strong>EDIT</strong>: pip changed its schema to use <code>pipVERSION</code> instead of <code>pip-VERSION</code> in version 1.5. You should use the following if you have <code>pip &gt;= 1.5</code>:</p>
<pre><code>$ pip2.6 install otherpackage
$ pip2.7 install mybarpackage
</code></pre>
<p>Check <a href="https://github.com/pypa/pip/pull/1053" rel="noreferrer">https://github.com/pypa/pip/pull/1053</a> for more details</p>
<hr/>
<p>References:</p>
<ul>
<li><a href="https://github.com/pypa/pip/issues/200" rel="noreferrer">https://github.com/pypa/pip/issues/200</a></li>
<li><a href="http://www.pip-installer.org/docs/pip/en/0.8.3/news.html#id4" rel="noreferrer">http://www.pip-installer.org/docs/pip/en/0.8.3/news.html#id4</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><code>/path/to/python2.{5,6} /path/to/pip install PackageName</code> doesn't work?</p>
<p>For this to work on any python version that doesn't have pip already installed you need to download pip and do <code>python*version* setup.py install</code>. For example <code>python3.3 setup.py install</code>. This resolves the import error in the comments.  (As suggested by @hbdgaf)</p>
</div>
<div class="post-text" itemprop="text">
<p>In Windows, you can execute the pip module by mentioning the python version ( You need to ensure that the launcher is on your path )</p>
<p><code>py -3.4 -m pip install pyfora</code> </p>
<p><code>py -2.7 -m pip install pyfora</code></p>
<p>Alternatively, you can call the desired python executable directly like this:</p>
<p><code>/path/to/python.exe -m pip install pyfora</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I had python 2.6 installed by default (Amazon EC2 AMI), but needed python2.7 plus some external packages for my application. Assuming you already installed python2.7 alongside with default python (2.6 in my case). Here is how to install pip and packages for non-default python2.7</p>
<p>Install pip for your python version:</p>
<pre><code>curl -O https://bootstrap.pypa.io/get-pip.py
python27 get-pip.py
</code></pre>
<p>Use specific pip version to install packages:</p>
<pre><code>pip2.7 install mysql-connector-python --allow-external mysql-connector-python
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It worked for me in windows this way:</p>
<ol>
<li><p>I changed the name of python files python.py and pythonw.exe to python3.py pythonw3.py </p></li>
<li><p>Then I just ran this command in the prompt:</p>
<p><code>python3 -m pip install package</code></p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Other answers show how to use pip with both 2.X and 3.X Python, but does not show <strong>how to handle the case of multiple Python distributions (eg. original Python and Anaconda Python)</strong>.</p>
<p>I have a total of 3 Python versions: original Python 2.7 and Python 3.5 and Anaconda Python 3.5.</p>
<p>Here is how I install a package into:</p>
<ol>
<li><p>Original <strong>Python 3.5</strong>:</p>
<pre><code>/usr/bin/python3 -m pip install python-daemon
</code></pre></li>
<li><p>Original <strong>Python 2.7</strong>:</p>
<pre><code>/usr/bin/python -m pip install python-daemon
</code></pre></li>
<li><p><strong>Anaconda Python 3.5</strong>:</p>
<pre><code>python3 -m pip install python-daemon
</code></pre>
<p>or</p>
<pre><code>pip3 install python-daemon
</code></pre>
<p>Simpler, as Anaconda overrides original Python binaries in user environment.</p>
<p><em>Of course, installing in anaconda should be done with <code>conda</code> command, this is just an example.</em></p></li>
</ol>
<hr/>
<p>Also, make sure that pip is installed for that specific python.You might need to manually install pip. This works in Ubuntu 16.04:</p>
<pre><code>sudo apt-get install python-pip 
</code></pre>
<p>or</p>
<pre><code>sudo apt-get install python3-pip
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I ran into this issue myself recently and found that I wasn't getting the right pip for Python 3, on my Linux system that also has Python 2.</p>
<p>First you must ensure that you have installed pip for your python version:</p>
<p>For Python 2:</p>
<pre><code>sudo apt-get install python-pip
</code></pre>
<p>For Python 3:</p>
<pre><code>sudo apt-get install python3-pip
</code></pre>
<p>Then to install packages for one version of Python or the other, simply use the following for Python 2:</p>
<pre><code>pip install &lt;package&gt;
</code></pre>
<p>or for Python 3:</p>
<pre><code>pip3 install &lt;package&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>pip is also a python package. So the easiest way to install modules to a specific python version would be below</p>
<pre><code> python2.7 /usr/bin/pip install foo
</code></pre>
<p>or </p>
<pre><code>python2.7 -m pip install foo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So apparently there are multiple versions of <code>easy_install</code> <em>and</em> <code>pip</code>. It seems to be a big mess. Anyway, this is what I did to install Django for Python 2.7 on Ubuntu 12.10:</p>
<pre><code>$ sudo easy_install-2.7 pip
Searching for pip
Best match: pip 1.1
Adding pip 1.1 to easy-install.pth file
Installing pip-2.7 script to /usr/local/bin

Using /usr/lib/python2.7/dist-packages
Processing dependencies for pip
Finished processing dependencies for pip

$ sudo pip-2.7 install django
Downloading/unpacking django
  Downloading Django-1.5.1.tar.gz (8.0Mb): 8.0Mb downloaded
  Running setup.py egg_info for package django

    warning: no previously-included files matching '__pycache__' found under directory '*'
    warning: no previously-included files matching '*.py[co]' found under directory '*'
Installing collected packages: django
  Running setup.py install for django
    changing mode of build/scripts-2.7/django-admin.py from 644 to 755

    warning: no previously-included files matching '__pycache__' found under directory '*'
    warning: no previously-included files matching '*.py[co]' found under directory '*'
    changing mode of /usr/local/bin/django-admin.py to 755
Successfully installed django
Cleaning up...

$ python
Python 2.7.3 (default, Sep 26 2012, 21:51:14) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import django
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On Linux, Mac OS X and other POSIX systems, use the versioned Python commands in combination with the <code>-m</code> switch to run the appropriate copy of <code>pip</code>:</p>
<pre><code>python2.7 -m pip install SomePackage
python3.4 -m pip install SomePackage
</code></pre>
<p>(appropriately versioned pip commands may also be available)</p>
<p>On Windows, use the <code>py</code> Python launcher in combination with the <code>-m</code> switch:</p>
<pre><code>py -2.7 -m pip install SomePackage  # specifically Python 2.7
py -3.4 -m pip install SomePackage  # specifically Python 3.4
</code></pre>
<p>if you get an error for <code>py -3.4</code> then try:</p>
<pre><code>pip install SomePackage
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From here: <a href="https://docs.python.org/3/installing/" rel="noreferrer">https://docs.python.org/3/installing/</a></p>
<p>Here is how to install packages for various versions that are installed at the same time <strong>linux, mac, posix</strong>:</p>
<pre><code>python2   -m pip install SomePackage  # default Python 2
python2.7 -m pip install SomePackage  # specifically Python 2.7
python3   -m pip install SomePackage  # default Python 3
python3.4 -m pip install SomePackage  # specifically Python 3.4
python3.5 -m pip install SomePackage  # specifically Python 3.5
python3.6 -m pip install SomePackage  # specifically Python 3.6
</code></pre>
<p>On <strong>Windows</strong>, use the py Python launcher in combination with the -m switch:</p>
<pre><code>py -2   -m pip install SomePackage  # default Python 2
py -2.7 -m pip install SomePackage  # specifically Python 2.7
py -3   -m pip install SomePackage  # default Python 3
py -3.4 -m pip install SomePackage  # specifically Python 3.4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Most of the answers here address the issue but I want to add something what was continually confusing me with regard to creating an alternate installation of python in the <code>/usr/local</code> on CentOS 7. When I installed there, it appeared like pip was working since I could use <code>pip2.7 install</code> and it would install modules. However, what I couldn't figure out was why my newly installed version of python wasn't seeing what I was installing.</p>
<p>It turns out in CentOS 7 that there is already a python2.7 and a pip2.7 in the <code>/usr/bin</code> folder. To install pip for your new python distribution, you need to specifically tell sudo to go to <code>/usr/local/bin</code></p>
<pre><code>sudo /usr/local/bin/python2.7 -m ensurepip
</code></pre>
<p>This should get pip2.7 installed in your <code>/usr/local/bin</code> folder along with your version of python. The trick is that when you want to install modules, you either need to modify the sudo <code>$PATH</code> variable to include <code>/usr/local/bin</code> or you need to execute</p>
<pre><code>sudo /usr/local/bin/pip2.7 install &lt;module&gt;
</code></pre>
<p>if you want to install a new module. It took me forever to remember that <code>sudo</code> wasn't immediately seeing <code>/usr/local/bin</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Context: Archlinux  </p>
<p>Action:<br/>
Install python2-pip:<br/>
<code>sudo pacman -S python2-pip</code> </p>
<p>You now have pip2.7:<br/>
<code>sudo pip2.7 install boto</code></p>
<p>Test (in my case I needed 'boto'):<br/>
Run the following commands:  </p>
<pre><code>python2
import boto
</code></pre>
<p>Success: No error.</p>
<p>Exit: <kbd>Ctrl</kbd>+<kbd>D</kbd> </p>
</div>
<div class="post-text" itemprop="text">
<p>for example, if you set other versions (e.g. 3.5) as default and want to install pip for python 2.7:</p>
<ol>
<li>download pip at <a href="https://pypi.python.org/pypi/pip" rel="nofollow noreferrer">https://pypi.python.org/pypi/pip</a> (tar)</li>
<li>unzip tar file</li>
<li>cd to the file’s directory</li>
<li>sudo python2.7 setup.py install</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can go to for example C:\Python2.7\Scripts and then run cmd from that path. After that you can run pip2.7 install yourpackage...</p>
<p>That will install package for that version of Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my take on the problem.  Works for Python3.  The main features are:</p>
<ul>
<li>Each Python version is compiled from source</li>
<li>All versions are installed locally</li>
<li>Does not mangle your system's default Python installation in any way</li>
<li>Each Python version is isolated with virtualenv </li>
</ul>
<p>The steps are as follows:</p>
<ol>
<li><p>If you have several extra python versions installed in some other way, get rid of them, e.g., remove <em>$HOME/.local/lib/python3.x</em>, etc. (also the globally installed ones).  Don't touch your system's default python3 version though.</p></li>
<li><p>Download source for different python versions under the following directory structure:</p>
<pre><code>$HOME/
    python_versions/ : download Python-*.tgz packages here and "tar xvf" them.  You'll get directories like this:
      Python-3.4.8/
      Python-3.6.5/
      Python-3.x.y/
      ...
</code></pre></li>
<li><p>At each "Python-3.x.y/" directory, do the following (do <strong>NOT</strong> use "sudo" in any of the steps!):</p>
<pre><code>mkdir root
./configure --prefix=$PWD/root 
make -j 2
make install
virtualenv --no-site-packages -p root/bin/python3.x env
</code></pre></li>
<li><p>At "python_versions/" create files like this:</p>
<pre><code>env_python3x.bash:

#!/bin/bash
echo "type deactivate to exit"
source $HOME/python_versions/Python-3.x.y/env/bin/activate
</code></pre></li>
<li><p>Now, anytime you wish to opt for python3.x, do</p>
<pre><code>source $HOME/python_versions/env_python3x.bash
</code></pre>
<p>to enter the virtualenv</p></li>
<li><p>While in the virtualenv, install your favorite python packages with</p>
<pre><code>pip install --upgrade package_name
</code></pre></li>
<li><p>To exit the virtualenv and python version just type "deactivate"</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>This is probably the completely wrong thing to do (I'm a python noob), but I just went in and edited the pip file</p>
<pre><code>#!/usr/bin/env python3 &lt;-- I changed this line.

# -*- coding: utf-8 -*-
import re
import sys

from pip._internal import main

if __name__ == '__main__':
    sys.argv[0] = re.sub(r'(-script\.pyw?|\.exe)?$', '', sys.argv[0])
    sys.exit(main())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Installation of multiple versions of Python and respective Packages.</strong></p>
<p>Python version on the same windows machine : 2.7 , 3.4 and 3.6</p>
<p><strong>Installation of all 3 versions of Python</strong> :</p>
<ul>
<li>Installed the Python 2.7 , 3.4 and 3.6 with the below paths </li>
</ul>
<p><a href="https://i.stack.imgur.com/p9cOz.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/p9cOz.png"/></a></p>
<p><strong>PATH for all 3 versions of Python</strong> :</p>
<ul>
<li>Made sure the PATH variable ( in System Variables ) has below paths included - C:\Python27\;C:\Python27\Scripts;C:\Python34\;C:\Python34\Scripts;C:\Python36\;C:\Python36\Scripts\; </li>
</ul>
<p><strong>Renaming the executables for versions</strong> :</p>
<ul>
<li>Changed the python executable name in C:\Python36 and C:\Python34 to python36 and python34 respectively.</li>
</ul>
<p><a href="https://i.stack.imgur.com/mcCw9.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/mcCw9.png"/></a></p>
<p><strong>Checked for the command prompt with all versions :</strong></p>
<p><a href="https://i.stack.imgur.com/lKvyj.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/lKvyj.png"/></a></p>
<p><strong>Installing the packages separately for each version</strong></p>
<p><a href="https://i.stack.imgur.com/BfvpV.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/BfvpV.png"/></a></p>
</div>
<span class="comment-copy">on my machine with just python 2xx and 3xx, <code>pip2</code> and <code>pip3</code> seem to do what I want</span>
<span class="comment-copy">@YiboYang does it work with things like <code>pip34</code> and <code>pip35</code>?</span>
<span class="comment-copy">@JinSnow It should, provided <code>pip3.x</code> actually manages the python version that you want to install packages to (perhaps run <code>pip3.x -V</code> to see). Or use @Hugo's solution to have better control over lots of python versions.</span>
<span class="comment-copy">Doesn't work.  Although the latest version of pip installed a pip-2.6 script, it didn't bother to install a pip-2.5 script.</span>
<span class="comment-copy">You need to update your python2.5 pip version... It only creates pip-{PYVERSION} under the python you are using pip.</span>
<span class="comment-copy">This is incorrect. I'm running pip 1.2.1 with Python2.7 on Ubuntu, and there are no alternative pip versions.</span>
<span class="comment-copy">@rodling: probably you didn't installed <code>pip</code> via <code>pip</code>/<code>easy_install</code> or <code>get-pip.py</code> or you don't have python2.7. if you have python2.7, try: <code>pip install --upgrade pip</code> and you should have <code>pip</code> and <code>pip-2.7</code></span>
<span class="comment-copy">@J.C.Rocamonde: the program <code>pip</code> gets picked based on the environment variable $PATH. If you want to change what is the "default" pip program, reorder the $PATH environment variable. Search for something like "path environment variable linux" for more details on $PATH.</span>
<span class="comment-copy">For this to work on say python 3 you need to download pip and do "python3 setup.py install". Personally I find this solution to be not very nice. For a start I didn't even know the pip command wasn't a binary. This isn't a criticism of @bwinton, I'm just surprised there isn't a better way to do this.</span>
<span class="comment-copy">"ImportError: No module named pkg_resources"</span>
<span class="comment-copy">I'm baffled that the problem with the importerror got more upticks than the solution to the same one comment above it.</span>
<span class="comment-copy">Also, /path/to/pip is this: python2.{5,6}/Scripts/pip2.{5,6}</span>
<span class="comment-copy">To call a module of python you should use <code>python2.7 -m pip install PackageName</code></span>
<span class="comment-copy">having both 2.7 and 3.5 installed on windows, this worked right away</span>
<span class="comment-copy">Is there no way to have <code>python2</code>, <code>python3</code>, <code>pip2</code> and <code>pip3</code> on Windows?</span>
<span class="comment-copy">this worked for me on windows. had 3 installed and then installed 2</span>
<span class="comment-copy">great worked for me for python 3.4 with following: <code>python3 get-pip.py</code> and later using pip command with <code>pip34 install example</code></span>
<span class="comment-copy">Thanks. Very useful. Tested on two different servers.</span>
<span class="comment-copy">This worked when I used 'python2.7 get-pip.py' instead of 'python27 get-pip.py'</span>
<span class="comment-copy">Man that felt sketchy but it worked for me installing pip2.6 on Centos 5.</span>
<span class="comment-copy">Got <code>Could not find a version that satisfies the requirement pip (from versions: ) No matching distribution found for pip</code> when I tried <code>python2.6 get-pip.py</code></span>
<span class="comment-copy">Just for anyone else figuring out how to install packages in python3 using pip on mac, this command is how you install packages. I spent hours searching and I've finally found it!</span>
<span class="comment-copy">The advice regarding Anaconda here is not accurate... it doesn't "override" anything.  The fact that it is picking up the Anaconda version as default on your system is simply a side-effect of your specific configuration, how you installed each interpreter, and your environment's path ordering.... those will vary for others.</span>
<span class="comment-copy">@CoreyGoldberg I agree, it was the default on my installation of Ubuntu 16.04</span>
<span class="comment-copy">You sir, are the man.  Of all the totally useless explanations surrounding this issue, this is the only one that has made sense to me.  Time to alias these commands and get on with my life!  THANK YOU.</span>
<span class="comment-copy">Thanks, this was the only thing that worked for me on RHEL.</span>
<span class="comment-copy">sudo pip-2.7 install django does not work anymore</span>
