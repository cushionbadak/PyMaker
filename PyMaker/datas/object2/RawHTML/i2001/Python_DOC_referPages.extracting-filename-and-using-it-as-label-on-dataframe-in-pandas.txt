<div class="post-text" itemprop="text">
<p>I have a large sum of .txt files that I want to concatenate together but they are missing dates in the files themselves.</p>
<p>However, <em>the date is the filename</em> which I want to extract somehow and use as a label on my Pandas DataFrames - for example <code>Apr 2009.txt</code>. This would make up for the lack of the actual date in the file itself.</p>
<p>Is there any way to bring in all files locally, one at a time, and spit out the filenames as labels which breaks each part of the total DataFrame by date?</p>
<p>My pseudo code is:</p>
<pre><code>file = 'PATH\\FileName.txt'

openfile = open(file,'r')
new_line = []

def separateState(l):
    for line in l:
        if any(x in line for x in ['New York']):     
            new_line.append(line.split())
</code></pre>
<p>Then</p>
<pre><code>def joinWords(n):
    for listy in n:
        operation on each list (listy)
    df = pd.DataFrame(appended_data)
    df.to_csv('FileName.csv')
</code></pre>
<p>Where each file is a .txt when taken in are nested lists (parsed through these functions above by city).</p>
<p>The input looks something like:</p>
<pre><code>[['CityName1', 'number1'.....'number2'....],.......many other lists of similar types]
</code></pre>
<p>The output I want to achieve is:</p>
<pre><code>Date                       |    City    |   UNIT1  |   UNIT2  |.....
FileName (Apr 2009)        |  CityName1 | number01 | number11 |....
&lt;blank til next file name&gt; |  CityName2 | number02 | number12 |....
.
.
.
.
</code></pre>
<p>Basically I want to split each df by the FileName at the beginning of each intake.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would probably use the standard csv module in Python, <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html</a>. But if you prefer to use pandas, below is a code snippet you can modify:</p>
<pre><code>import os
import pandas as pd

#get your working directory and target folder that contains all your files
path = os.path.join(os.getcwd(),'folder')

files = [os.path.join(path,i) for i in os.listdir(path) if os.path.isfile(os.path.join(path,i))]

df = pd.DataFrame()

#for every file in folder, read it and append to a empty dataframe with column filename as 'Date'
for file in files:
    _df = pd.read_csv(file)
    _df['Date'] = os.path.split(file)[-1]
    df = df.append(_df)   
</code></pre>
<p>The example I used above reads every file in a folder, checks if it is a valid file and stores it in list. Once we have the list of files, we just loop it and store it in _df where it appends to df with the file name. Your final df will contain all the data rows and file names.</p>
</div>
<span class="comment-copy"><i>Is there a way</i>? Yes. But hard to write some code only with the information you provided and with no <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a></span>
<span class="comment-copy">Added my functions above!</span>
<span class="comment-copy">Still a little confused - can you give a (simplified) version of the output that corresponds to your input, so we can see what you're looking to achieve?</span>
<span class="comment-copy">I've added the desired output. Let me know!</span>
<span class="comment-copy">Are you consolidating the data into a dataframe just to save it as a csv?</span>
