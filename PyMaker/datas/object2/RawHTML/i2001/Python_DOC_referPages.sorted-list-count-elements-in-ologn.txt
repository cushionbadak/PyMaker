<div class="post-text" itemprop="text">
<p>Suppose that I have a sorted list/array
I need to count the number of a distinct number in that list/array in O(logN) repetitions
I know already that I need to use some kind of binary algorithm but I can't do it in O(logN) repetitions in the worst case scenario
Is there any idea?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer"><code>bisect</code></a> module.</p>
<pre><code>import bisect as b


arr = [1, 1, 1, 2, 2, 3, 3, 3, 3]
for x in [1, 2, 3, 0]:
    print(b.bisect_right(arr, x) - b.bisect_left(arr, x))
</code></pre>
<p>Output:</p>
<pre><code>3
2
4
0
</code></pre>
<p>Thus, the algorithm works for any value you pass it. If the value passed is not in the list, 0 is returned.</p>
<hr/>
<p>The <code>bisect</code> module works by using binary search to find an appropriate place for insertion of the given element. <code>bisect_left</code> gives a leftmost index and <code>bisect_right</code> gives an index to the right of any existing values.
By subtracting the two, we get the number of values of <code>x</code> already present in the list.</p>
<p>Because the bisect module use binary search, this method is O(log N).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can divide and conquer and subtract counts where the last item in the first half is equal to the first item in the second half:</p>
<pre><code>def count(l):
    if len(l) &lt;= 1:
        return len(l)
    mid = len(l) // 2
    head, tail = l[:mid], l[mid:]
    return count(head) + count(tail) - (len(head) and len(tail) and head[-1] == tail[0])
</code></pre>
<p>so that:</p>
<pre><code>count([2,2,3,4,4,5,6,6,6,7,8])
</code></pre>
<p>returns: <code>7</code> (since we have 7 distinct numbers: <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>)</p>
</div>
<span class="comment-copy">What does it mean "count the number of a distinct number"? Do you want to know how many unique numbers are there? Given a number <code>n</code> you want to know how many times it occurrs in the list? Is the list sorted? The first problem cannot be solved in O(log n) by just having an ordered list. The latter if the list is ordered you can just use the two variants of binary search that gives you the first index <code>i</code> and the last index <code>j</code> where that element is found and you have <code>j-i</code> is the number of occurrences.</span>
<span class="comment-copy">In the worst case all the elements are distinct, has to be O(N).</span>
<span class="comment-copy">Do you want to have a counter for a single element (<code>2</code> for <code>[1, 1, 2]</code> and <code>1</code>) or a number of distinct elements (<code>3</code> for <code>[1, 2, 2, 3, 3, 3]</code>)?</span>
<span class="comment-copy">Can the downvoter leave a comment please?</span>
<span class="comment-copy">1) This assumes that the distinct elements are known in advance 2) in the worst case this is O(N*logN), which is worse than straight forward O(N)</span>
<span class="comment-copy">@bereal this just demonstrates that the algorithm works for all entries in the list... for a single element it is O(log N)... I thought that was obvious.</span>
<span class="comment-copy">Hm, it's unclear if the OP wants it for single element or for each element. This works for a single element, indeed.</span>
<span class="comment-copy">This is O(n) yes? You can observe that by counting the number of nodes in the recursion tree.</span>
<span class="comment-copy">True that. Will leave the answer here as a reference but this is not an O(log n) solution indeed.</span>
