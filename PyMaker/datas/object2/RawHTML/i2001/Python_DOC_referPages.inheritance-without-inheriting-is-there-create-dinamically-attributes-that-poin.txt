<div class="post-text" itemprop="text">
<p><br/><br/>
I'm struggling to solve with this problem. <br/><br/>
I'd like to have the name variable to be like a pointer to the value of <strong><em>self.model.name</em></strong>. If the value of <strong><em>_class.model.name</em></strong> is changed the <strong><em>_class.name</em></strong> should change accordingly. <br/><br/>
Can't find a way to basically map dynamically the Class attributes with any Model attributes without inheriting. </p>
<pre><code>class Model(object):

    name = 'foo'
    parent = 'foo_p'

class Class(object):

    model_class = Model

    def __init__(self):

        self.model = self.model_class() 

        setattr(self, 'name', self.model.name)

_class = Class()
print _class.model.name # foo

_class.model.name = 'foo_1'        
print _class.name # this should be foo_1
</code></pre>
<p>Thanks! </p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>property</code> to create a single dynamically computed attributes:</p>
<pre><code>class Class(object):
    _model_class = Model

    @property
    def name(self):
        return Class._model_class.name
</code></pre>
<p>This causes all instances of <code>Class</code> to run the <code>name</code> method whenever the attribute <code>name</code> is looked up. This allows the value to be dynamically computed on each lookup.</p>
<pre><code>_class = Class()
print(_class.name)  # 'foo'
Model.name = 'bar'
print(_class.name)  # 'bar'
</code></pre>
<hr/>
<p>If you want to dynamically fetch many or all attributes from somewhere else, consider using <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="nofollow noreferrer"><code>__getattr__</code></a>:</p>
<pre><code>class Class(object):
    _model_class = Model

    def __getattr__(self, name):
        # name is a *string* containing the name of the attribute to fetch
        return getattr(Class._model_class, name)
</code></pre>
<p>The <code>__getattr__</code> is only triggered for attributes that are not on the class/instance. This makes it rather straightforward to use with manually defined attributes. Note that you can use arbitrary code to restrict what is fetched - e.g. raise <code>AttributeError</code> if <code>name</code> is not in some whitelist.</p>
</div>
<div class="post-text" itemprop="text">
<p>Along with MisterMiyagi's answer - but in case you want to still want to keep the concerns separated (even though it really doesn't seem like you do)</p>
<pre><code>class Class(object):
    model_class = Model

    def __init__(self):
        self.model = self.model_class() 
        setattr(self, 'name', self.model.name)

    # This is what we'll be changing
    @property
    def model_name(self):
        return self.model.name

    # This method will get called whenever we change the model_name
    @model_name.setter
    def model_name(self, new_name):
        self.model.name = new_name
        self.name = new_name

_class = Class()
_class.model_name # foo

_class.model_name = "bar" # both _class.model.name == bar and _class.name == bar now
</code></pre>
</div>
<span class="comment-copy">How can I create dynamically properties based on the Model attributes?</span>
<span class="comment-copy">@AdrianoMuraca The example code already shows a dynamic property using the <code>Model</code> attributes. Please clarify what you need.</span>
<span class="comment-copy">Thank you for your time @MisterMiyagi! :) this is what I meant for dynamically, don't know if it makes sense. Inside the <b>init</b> function of the Class, I was thinking to add something like <code>for attribute in any_attribute_found_in_Model: set property in this class</code> In this way I wouldn't need to write manually the property any time a new attribute is added to the Model class.</span>
<span class="comment-copy">@AdrianoMuraca I have added a different approach that is suitable for generically fetching attributes based on rules.</span>
<span class="comment-copy">It was exactly what I was looking for. Thanks again.</span>
