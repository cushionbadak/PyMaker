<div class="post-text" itemprop="text">
<p>I'm having trouble converting these perl regex to python, I've converted simpler ones before. I don't really understand the modifiers /s and /is, I know that /g is global.</p>
<p>I also don't know what the first one exactly does. The second removes a specific li tag with a message in html files.</p>
<pre class="lang-perl prettyprint-override"><code># First
$data =~ s/\]\((\/uploads\/.*?\.pdf)\)/\]\(ref\/\/\/docs$1\)/g;

# Second
$data =~ s/&lt;li&gt;.*?https:\/\/www\.example\.com.*?&lt;\/li&gt;/$test/is;
</code></pre>
<pre class="lang-py prettyprint-override"><code># What I think might work in python
data = re.sub('&lt;li&gt;.*?https:\/\/www\.example\.com.*?&lt;\/li&gt;/' + test, data, 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First regex does nothing but appends <code>ref///docs</code> to the beginning. <br/><br/><strong>Explanation</strong>:<br/></p>
<pre><code>/\]\((\/uploads\/.*?\.pdf)\)/g
</code></pre>
<ul>
<li><code>\]</code> matches the character "]"</li>
<li><code>\(</code> matches the character "("
<br/>1st Capturing Group (/uploads/.*?.pdf)</li>
<li><code>\/</code> matches the character "/"</li>
<li><code>uploads</code> matches the characters "uploads" (case sensitive)</li>
<li><code>\/</code> matches the character "/"</li>
<li><code>.*?</code> matches any character (except for line terminators)</li>
<li><code>*?</code> Quantifier â€” Matches between zero and unlimited times, as few times as possible, expanding as needed (lazy)</li>
<li><code>\.</code> matches the character ".</li>
<li><code>pdf</code> matches the characters pdf (case sensitive)</li>
<li><code>\)</code> matches the character ) <br/>
<br/></li>
</ul>
<p><strong>Global pattern flags</strong><br/></p>
<ul>
<li><code>g</code> modifier: global. All matches (don't return after first match)</li>
</ul>
<p><strong>Consider the example</strong>:</p>
<p><code>test_str = "](/uploads/something.pdf)"</code></p>
<p>perl:</p>
<pre><code>my $test_str = "](/uploads/something.pdf)";
$test_str =~ s/\]\((\/uploads\/.*?\.pdf)\)/\]\(ref\/\/\/docs$1\)/g;
</code></pre>
<p>python:</p>
<pre><code>test_str = "](/uploads/something.pdf)"
test_str = re.sub(r"\]\((\/uploads\/.*?\.pdf)\)", r"](ref///docs\1)", test_str)
</code></pre>
<p>Output of printing <code>test_str</code> after substitution:</p>
<pre><code>](ref///docs/uploads/something.pdf)
</code></pre>
<p><br/>
I don't know what you really want to do in second regex, but the perl regex says to replace any URL of example.com to any variable <code>$test</code>. Lets play around:
<br/><br/>perl:</p>
<pre><code>my $test = "test";
my $data = "&lt;li&gt;list 1 https://www.example.com/site &lt;/li&gt;";
$data =~ s/&lt;li&gt;.*?https:\/\/www\.example\.com.*?&lt;\/li&gt;/$test/is;
</code></pre>
<p>python:</p>
<pre><code>data = "&lt;li&gt;list 1 https://www.example.com/site &lt;/li&gt;";
test = "test"
data = re.sub(r"&lt;li&gt;.*?https:\/\/www\.example\.com.*?&lt;\/li&gt;", test, data, re.S|re.I)
</code></pre>
<p>Output of printing <code>data</code> after substitution:</p>
<pre><code>test
</code></pre>
<p><strong>Modifiers</strong>:</p>
<ul>
<li><code>i</code> means ignore case (case insensitive search)</li>
<li><code>s</code> means dot will now match any character (including newline)</li>
</ul>
</div>
<span class="comment-copy"><code>/i</code> and <code>/s</code> do the same thing as they do in python, i.e. ignore case (<code>/i</code>) and let dot match everything including new line (<code>/s</code>). <code>/is</code> just means that both <code>/i</code> and <code>/s</code> gets applied.</span>
<span class="comment-copy">Oh okay, I think i figured out the second one using that but I still don't particularly understand the first. Do you have an idea on how to convert it?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">As documented</a> global substitution like you have in the first example should be done with <code>re.sub</code> and <code>count=0</code>.</span>
<span class="comment-copy">Steffen Ulrich, I found out that the first one just adds "ref:///docs to the beginning of what it finds with the regex search. How would I do that in python? Also, to use modifiers in the second such as s and i, s, how do I do that in python?</span>
<span class="comment-copy"><i>"Also, to use modifiers in the second such as s and i, s, how do I do that in python.."</i> - use <code>(?is)regex</code>  in python is is same as /regex/is in Perl.</span>
<span class="comment-copy">Thanks so much for all the info! I didn't see this until now but I fixed the first one like 3 days ago and ended up just using BeautifulSoup for the second one. The second one replaces that specific &lt;li&gt; tag with $test which is a custom &lt;li&gt; tag. I looped through all li tags in the file and if it's text contained a specific text, I changed it with a different tag. Should I change it to the regex, would it be more efficient or does it not matter?</span>
<span class="comment-copy">Regex is most often heavy on system, we should avoid it (complex regexes).</span>
