<div class="post-text" itemprop="text">
<p>I was wondering:</p>
<ol>
<li>If the size of floats, lists and tuples or any type of variable have the same size or memory usage when running a script and when saved on disk?</li>
<li>In what format or data type are floats temporarily saved while script is running?</li>
<li>Will the result of <code>getsizeof</code> on a list or tuple of floats be the same as if I save it on disk, if yes, in which format should I save it, assuming I don't need compression?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>No, in-memory structures and data written to disk will almost certainly have different sizes. That's because Python objects in memory track information that is not needed when persisting (a reference count, a type pointer, weak references if the type supports it, etc.), and on-disk storage just aims at very different use cases. </p>
<p>For example, depending on the highest Unicode codepoint, Python strings <a href="https://stackoverflow.com/questions/26079392/how-is-unicode-represented-internally-in-python/26079426#26079426">use 1, 2 or 4 bytes per character</a>, because that is the best trade-off to be made to make string operations efficient. But if you store that same text as UTF-8 encoded data on disk, then the variable-width encoding used means you will almost certainly need less space for the same information.</p>
<p>You don't specify how you are saving floats to disk, but how much space is taken up depends entirely on the storage format chosen. Floats could be written as text (writing out ASCII digits to a CSV or JSON file) or as <a href="https://docs.python.org/3/library/struct.html#struct.pack" rel="nofollow noreferrer">binary C struct data</a>, or as <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">pickled data</a>, or yet some other format that will have specific properties that make it suitable for specific needs. It depends on the format how much space the information will take up.</p>
<p>Just focus on the data written to disk, by researching the format used. Floating point numbers stored as C doubles take up 8 bytes per value, for example.</p>
</div>
<span class="comment-copy">none of these have any relevance ... if you need to store it on disk the size will depend on how you store it... but it will likely be larger than the original datastructure(but it depends on how you encode it)... but if you need to store it on disk then you need to store it on disk... regardless of whether or not it takes more space</span>
<span class="comment-copy">Hi Kevin, when posting you should avoid asking multiple questions in one post. Also, in memory is not the same as on disk storage.</span>
<span class="comment-copy">Thank you Joran. But if I have a list of size 256 bytes (as seen with getsizeof after running script), will it be 256 bytes on disk as well? If I save it, I mean</span>
<span class="comment-copy">it depends on how you save it ... but probably not ... it will likely have some overhead in addition to the 256 bytes</span>
<span class="comment-copy">Ok d_kennetz, I will</span>
<span class="comment-copy">Thank you Martijn, What I don't get is that if you store a list in-memory, you are indeed storing it, so independently of the ability to access it quicker then on disk, why would be the size different, isn't it a way to store it the same way on disk as in-memory?</span>
<span class="comment-copy">@Kevin: a list is an array of references, plus some metadata (like the reference count I mentioned). Those references are numbers that are addresses of other pieces of memory. That's not something that translates to disk, as a disk won't have the same addresses, whatever is referenced by the list (floats, strings, other lists) would be stored differently too.</span>
<span class="comment-copy">@Kevin: floats are relatively simple. The Python object holds more information that you don't need though. You can use the <code>struct</code> module to store floats as <code>double</code> values, 8 bytes each. That's exactly what is stored in memory, but with extra things you never need in another program when you read the info from disk again. So why store that too?</span>
<span class="comment-copy">@Kevin: you can't have created 10**12 floats. With 24 bytes for a single floating point number object in Python, you'd need 22TB of memory for the floats alone.</span>
<span class="comment-copy">@Kevin: <code>sys.getsizeof()</code> on a list only gives you the size of the list object, by the way, which is the size of a reference times the length, plus some overhead. So a list with 10 ** 8 elements and 8 bytes for a reference would take 800MB of memory, <i>without measuring the contents that have been referenced</i>.</span>
