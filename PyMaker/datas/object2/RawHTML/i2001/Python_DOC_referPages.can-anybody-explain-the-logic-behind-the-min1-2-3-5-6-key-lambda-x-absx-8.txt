<div class="post-text" itemprop="text">
<p>This is my list: <code>a = [1, 3, 4, 7, 8, 9, 12, 13, 14]</code>.</p>
<p>I want to get the number that is closest to <code>5</code>, this is the solution:</p>
<pre><code>b = min(a, key = lambda x: abs(x-5))
</code></pre>
<p>Please explain what is happening in the above line.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p><code>abs(x-5)</code></p>
<p><code>abs</code> is absolute mathematics function which is equivalent to <code>|x-5|</code>.
example : <code>abs(x-5)</code> when <code>x=6</code> is <code>1</code>, and when <code>x=4</code> is also <code>1</code>.</p></li>
<li><p><code>lambda x: abs(x-5)</code></p>
<p>It can be written as </p>
<pre><code>def func(x):
    return abs(x-5)
</code></pre>
<p>which means for <code>a = [1,3,4,7,8,9,12,13,14]</code></p>
<pre><code>lambda x: abs(x-5)
</code></pre>
<p>will give</p>
<pre><code>[4, 2, 1, 2, 3, 4, 7, 8, 9]
</code></pre></li>
</ol>
<ol start="3">
<li><p><code>key = lambda x: abs(x-5)</code></p>
<p>Here the value returned by this lambda function is stored in <code>key</code> variable.<br/>
Thus</p>
<pre><code>key = [4, 2, 1, 2, 3, 4, 7, 8, 9]
</code></pre></li>
<li><p>Lastly <code>min(a, key)</code></p>
<p>The <code>min</code> function uses <code>key</code> as an iterable to calculate minimum value.
Using the position of minimum value obtained from key it displays the value from iterable a.</p>
<p>Thus for</p>
<pre><code>key = [4(0), 2(1), 1(2), 2(3), 3(4), 4(5), 7(6), 8(7), 9(8)]
</code></pre>
<p>minimum value is 1 at position 2 and it displays value at 2 position from iterable a</p>
<pre><code>[1(0), 3(1), 4(2), 7(3), 8(4), 9(5), 12(6), 13(7), 14(8)]
</code></pre>
<p>which is 4.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The code is using the <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer"><code>min</code></a> builtin function, but with a <code>key</code> parameter. Thus, it does not return the <em>actual</em> minimum element of the list, but the element for which <em>that key function</em> is minimal, i.e. it behaves more like <a href="https://en.wikipedia.org/wiki/Arg_max#Arg_min" rel="nofollow noreferrer">"arg-min"</a> than actually "min".</p>
<p>In the <code>key</code> function (defined as a <code>lambda</code> expression), <a href="https://docs.python.org/3/library/functions.html#abs" rel="nofollow noreferrer"><code>abs</code></a> is just the absolute difference, in this case between the parameter <code>x</code> (a number from the list) and <code>5</code>.</p>
<p>That line is somewhat equivalent to, but much shorter and more readable than, this loop:</p>
<pre><code>a = [1,3,4,7,8,9,12,13,14]
b = min_k = None
for x in a:
    k = abs(x-5)
    if min_k is None or k &lt; min_k:
        b, min_k = x, k
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Explanation</h1>
<p><code>min(iterable, key)</code> returns the <em>smallest</em> item in the <code>iterable</code> with respect to the <code>key</code>. So it iterates over the <code>iterable</code>, each time evaluates the <code>key(x)</code> for an element <code>x</code>, and then returns the element for which <code>key(x)</code> was the smallest.</p>
<p>Since <code>key=lambda x=abs(x-5)</code>, we thus evaluate the absolute difference between <code>5</code>, so if <code>x=3</code>, then <code>abs(x-5)</code> is <code>2</code>, etc. So this will result in the number that is the closest to <code>5</code>.</p>
<h1>Making this an <em>O(log n)</em> algorithm</h1>
<p>Given the list is <em>ordered</em>, you can find this in <em>logarithmic</em> time with:</p>
<pre><code>from bisect import bisect_left

def closest(ordered_list, x):
    idx = bisect_left(ordered_list, x)
    return min(ordered_list[max(idx-1,0):idx+1], key=lambda y: abs(y-x))</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; closest(a, -1)
1
&gt;&gt;&gt; closest(a, 0)
1
&gt;&gt;&gt; closest(a, 1)
1
&gt;&gt;&gt; closest(a, 2)
1
&gt;&gt;&gt; closest(a, 3)
3
&gt;&gt;&gt; closest(a, 4)
4
&gt;&gt;&gt; closest(a, 5)
4
&gt;&gt;&gt; closest(a, 6)
7
&gt;&gt;&gt; closest(a, 11)
12
&gt;&gt;&gt; closest(a, 15)
14
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this</p>
<pre><code>import numpy as np
def return_closest(a, num):

    m1 = a[np.searchsorted(a, num)]
    m2 = a[np.searchsorted(a, num)-1]
    return m2 if abs(num-m1)&gt;abs(num-m2) else m1

a = [1, 3, 4, 7, 8, 9, 12, 13, 14]
return_closest(a, 5)
</code></pre>
<p>gives 4</p>
<p>the function <code>np.searchsorted</code> will give you index of the upper limit (7)</p>
</div>
<span class="comment-copy"><code>abs(x-5)</code> returns the distance between <code>x</code> and 5. For example, the distance between 7 and 5 is 2. Hence <code>|5-7| = |7-5| = 2</code>. The function <code>abs</code> computes the absolute value of the expression it gets. So the <code>min</code> function gives you the min over <code>a</code>, such that its absolute value from <code>5</code> is minimized</span>
<span class="comment-copy">You are getting the number that is <code>min</code> w.r.t. the <code>abs</code> distance to 5.</span>
<span class="comment-copy">Is the list <i>ordered</i>?</span>
<span class="comment-copy">@ Willem Van Onsem , Yes ,it is in asending order.</span>
<span class="comment-copy">@tobias_k., after that what is the logic behind the lambda function in min() function .</span>
<span class="comment-copy">Thank you  man , Thank you very much for your valuable  explanation, That's what I wanted.</span>
<span class="comment-copy">True, but actually OP asked for explantion of the given code, not how to improve it.</span>
<span class="comment-copy">@tobias_k: thanks, updated.</span>
