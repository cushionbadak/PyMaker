<div class="post-text" itemprop="text">
<p>How to create 2D list from string with n-rows and 2 cols?</p>
<p>Example:</p>
<pre><code>str = "044010010A1A..."
list_2d = [['04','40'],
['10','01'],
['0A','1A']]...
</code></pre>
<p>Anyone can help?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; s = '044010010A1A'
&gt;&gt;&gt; [[s[i:i+2], s[i+2:i+4]] for i in range(0, len(s), 4)]
[['04', '40'], ['10', '01'], ['0A', '1A']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.sliced" rel="nofollow noreferrer"><code>more_itertools.sliced</code></a> twice:</p>
<pre><code>from more_itertools import sliced

s = '044010010A1A'

res = list(sliced(list(sliced(s, 2)), 2))

[['04', '40'], ['10', '01'], ['0A', '1A']]
</code></pre>
<p>If you don't want the 3rd party import, you can define <code>sliced</code> yourself:</p>
<pre><code>from itertools import count, takewhile

def sliced(seq, n):
    return takewhile(bool, (seq[i: i + n] for i in count(0, n)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should handle yourself what happens when there are even number of element on your string. Using textwrap saves you the trouble of parsing. It will create equal parts of the string, which in this case is 2</p>
<pre><code>import textwrap
list = textwrap.wrap(str,2)
temp_list = []
for item in list:
  temp_list.append(item)
  if(len(temp_list)==2):
    list_2d.append(temp_list)
    temp_list = [] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>first: don't call your string <code>str</code>. It's already used by python.</p>
<pre><code>import numpy as np
[list(l) for l in list(np.reshape(list(S),(int(len(S)/2),2)))]
</code></pre>
<p>numpy provides a fast function for reshaping list. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you would like to use numpy arrays instead of 2D lists, you can do the following trick:</p>
<pre><code>&gt;&gt;&gt; s = '044010010A1A'

&gt;&gt;&gt; np.array([s]).view('&lt;U2').reshape(-1, 2)

array([['04', '40'],
       ['10', '01'],
       ['0A', '1A']], dtype='&lt;U2')
</code></pre>
<p>This is much faster then using list comprehension proposed by <a href="https://stackoverflow.com/questions/52907661/create-2d-list-from-string-with-given-length-and-width/52907703#52907703">Eugene Yarmash</a> or itertools by <a href="https://stackoverflow.com/questions/52907661/create-2d-list-from-string-with-given-length-and-width/52908000#52908000">jpp</a>, and
 using numpy arrays instead of 2D lists has in general more advantages.
However, if needed, you can convert a numpy array to list by the <code>tolist()</code> method.</p>
</div>
<span class="comment-copy">Thank you for your quick response!</span>
