<div class="post-text" itemprop="text">
<p>it's working fine when using normal if else</p>
<pre><code>vocab = {"a": "4", "i": "1", "u": "5", "e": "3", "o": "0"}

firstchar_name = input("Your name : ") # give fruit suggestion
fruitfrom_name = input("First Character of your name is {}, write any fruit that started with {} : ".format(firstchar_name[0], firstchar_name[0]))
favorite_number = input("Your favorite one-digit number : ")
date_of_born = input("Input your born date (date-month-year) : ")

to_alay = ""

word = list(fruitfrom_name.lower())
for char in word:
    to_alay += char if char not in vocab else to_alay += vocab[char]

print(to_alay)
</code></pre>
<p>Error : </p>
<pre><code>$ python3 telemakita_password.py        
  File "telemakita_password.py", line 12                                                  
    to_alay += char if char not in vocab else to_alay += vocab[char]                      
                                                       ^                                  
SyntaxError: invalid syntax
</code></pre>
<p>i wondering why <code>+=</code> in if is working but not <code>+=</code> in else</p>
</div>
<div class="post-text" itemprop="text">
<p>Because this is <em>not</em> an if-then-else statement. It is a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer"><em>ternary operator expression</em> (or <em>conditional expression</em>)</a>, this is an expression. This is the expression part:</p>
<pre><code>char if char not in vocab else vocab[char]
</code></pre>
<p><code>var += ...</code> is <em>not</em> an expression, it is <em>statement</em>. This is however not a problem, we can write:</p>
<pre><code>to_alay += char if char not in vocab else vocab[char]
</code></pre>
<p>Python interprets this as:</p>
<pre><code>to_alay += (char if char not in vocab else vocab[char])
</code></pre>
<p>so this basically does what you want.</p>
<h1>Using <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get(..)</code></a></h1>
<p>That being said, I think by using <code>.get(..)</code>, you make life easier:</p>
<pre><code>for char in word:
    to_alay += vocab.get(char, char)
</code></pre>
<p>This is more "self explaining", each iteration you aim to get the value that corresponds to <code>char</code> in the <code>vocab</code> dict, and if that key can not be found, you fallback to <code>char</code>.</p>
<p>We can even use <code>''.join(..)</code> here:</p>
<pre><code>to_alay = ''.join(vocab.get(char, char) for char in word)
</code></pre>
</div>
<span class="comment-copy">thankyou for explanation and <code>vocab.get(char, char)</code> syntax</span>
