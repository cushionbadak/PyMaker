<div class="post-text" itemprop="text">
<p>The CSV files that I'm dealing with look like this:</p>
<pre><code>{http://www.omg.org/XMI}id,begin,end,Emotion
17266,772,781,anticipation
17402,772,781,disgust
17304,1345,1370,disgust
17424,1534,1543,surprise
17424,1534,1543,surprise
17424,1534,1543,surprise
17424,1534,1543,surprise
17472,1578,1602,anger
17525,1611,1617,fear
</code></pre>
<p>I am trying to create a dictionary of lists, having the <code>'Emotion'</code> entries as keys, and the <code>'begin'</code> (second column) as the values of the keys that occur in their row.</p>
<p><strong>Desired output</strong> would look like this:</p>
<pre><code>{'anger': [1578,
           2853,
           3951,...],
 'anticipation': [772, 4154, 4400...],
...}
</code></pre>
<p>So far I've managed to output the desired output, but each value is a list of its own inside of the list of each key.</p>
<p><strong>My current code:</strong></p>
<pre><code>import pickle
from pprint import pprint
import tkinter
from tkinter import filedialog
import csv
from itertools import groupby


root_tk = tkinter.Tk()
root_tk.wm_withdraw()

def extract_gold_emotions():


    """Returns mapping of GOLD emotions to their indices"""



    filename = filedialog.askopenfilename()


    l = list(csv.reader(open(filename)))


    f = lambda x: x[-1]


    gold_emo_offsets = {k:list(sorted(map(int, x[1:2])) for x in v)\
                           for k,v in groupby(sorted(l[1:], key=f), f)}


    pickle.dump(gold_emo_offsets, open("empos.p", "wb"))


    return gold_emo_offsets


my_emotions = extract_gold_emotions()
</code></pre>
<p><strong>Current output:</strong></p>
<pre><code>{'anger': [[1578], [2853], [3951], [4084], [4693], [6420], [8050]],
 'anticipation': [[772], [4154], [4400], [7392]],....]]}
</code></pre>
<p>Any hints on what to change in the code to output my desired dictionary of lists?</p>
<p>Thanks in advance!</p>
<p><strong>EDIT:</strong></p>
<p>The dictionary values should be outputted as <strong>integers</strong>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>collections.defaultdict</code> and <code>csv.DictReader</code></p>
<p><strong>Ex:</strong></p>
<pre><code>import csv
import collections

d = collections.defaultdict(list)

with open(filename) as infile:
    reader = csv.DictReader(infile)        
    for row in reader:
        d[row["Emotion"]].append(row["begin"])

print(d)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>defaultdict(&lt;type 'list'&gt;, {'anger': ['1578'], 'surprise': ['1534', '1534', '1534', '1534'], 'fear': ['1611'], 'anticipation': ['772'], 'disgust': ['772', '1345']})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could use <a href="https://docs.python.org/3/library/collections.html?highlight=defaultdict#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> to get your result dictionary:</p>
<pre><code>from io import StringIO
import csv
from collections import defaultdict

text = '''id,begin,end,Emotion
17266,772,781,anticipation
17402,772,781,disgust
17304,1345,1370,disgust
17424,1534,1543,surprise
17424,1534,1543,surprise
17424,1534,1543,surprise
17424,1534,1543,surprise
17472,1578,1602,anger
17525,1611,1617,fear'''

data = defaultdict(list)

with StringIO(text) as file:
    for row in csv.DictReader(file):
        data[row['Emotion']].append(row['begin'])

print(data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using just basic python, no imports (*):</p>
<p>Write file:</p>
<pre><code>with open("data.csv","w") as w:
    w.write("""{http://www.omg.org/XMI}id,begin,end,Emotion
17266,772,781,anticipation
17402,772,781,disgust
17304,1345,1370,disgust
17424,1534,1543,surprise
17424,1534,1543,surprise
17424,1534,1543,surprise
17424,1534,1543,surprise
17472,1578,1602,anger
17525,1611,1617,fear
""")
</code></pre>
<p>Read and process file:</p>
<pre><code>d = {}
with open("data.csv","r") as r:
    next(r) # skip header
    for line in r:
        if line.strip(): # ignore empty lines (f.e. the last one)
            l = line.strip().split(",")
            begin = l[1] # the begin coloum
            emo = l[-1]  # the emotion column
            k = d.setdefault(emo,[]) # get/create key + empty list if needed
            k.append(begin)            # append to key as string
            # k.append(int(begin))     # append to key but convert to int first

print(d)            
</code></pre>
<p>Output (appended as string):</p>
<pre><code>{'anger': ['1578'], 
 'surprise': ['1534', '1534', '1534', '1534'], 
 'fear': ['1611'], 
 'anticipation': ['772'], 
 'disgust': ['772', '1345']}
</code></pre>
<hr/>
<p>(*): You should not parse csv yourself if it containts things like escaped text or "inline/escaped" seperator-characters. You data is <em>plain</em> though, and you could parse it yourself. </p>
</div>
<span class="comment-copy">This works great! I just edited my question: can the numerical values be outputted as <b>integers</b> and not as strings?</span>
<span class="comment-copy">Sure use <code>d[row["Emotion"]].append(int(row["begin"]))</code></span>
