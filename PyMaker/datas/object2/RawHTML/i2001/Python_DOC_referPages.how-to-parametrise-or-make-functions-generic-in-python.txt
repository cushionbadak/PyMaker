<div class="post-text" itemprop="text">
<p>I am using a Python library (<code>APScheduler</code>) that requires some function handlers. All these handlers functions are almost the same. The only difference is a "constant" (as in, logic is the same; only the constant used to reference some data structures is different).</p>
<p>I would like to have a single generic function for all the handlers such that I can minimise my code or not having to add new functions when I add new types. Moreover, this enables me to have my types declared in a configuration file.</p>
<p>In Javascript this would be possible like this:</p>
<pre><code>function staticFunction(args) {
    // ... this function I have to parameterise
};

function factory(type) {
    return function(args) {
        // ... this function is parametrised with "type"
    };
}

addHandler(staticFunction)
addHandler(factory("apples"));
addHandler(factory("oranges"));
</code></pre>
<p>How do I do the same in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do exactly the same thing in Python; you can create a nested function that'll have access to <code>type</code> as a closure:</p>
<pre><code>def factory(type):
    def nested(args):
        # do something with `type`
    return nested

add_handler(factory('apples'))
</code></pre>
<p>There are more ways you can bind a parameter to a callable; you could use a <code>lambda</code> to proxy the function call:</p>
<pre><code>def static_function(type, args):
    # ...

add_handler(lambda args: static_function('apples', args))
</code></pre>
<p>or you could use a <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial()</code> object</a> to bind arguments to a callable:</p>
<pre><code>from functools import partial

add_handler(partial(static_function, 'apples'))
</code></pre>
</div>
