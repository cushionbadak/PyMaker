<div class="post-text" itemprop="text">
<p>I came across a code that looked like this:</p>
<pre><code>class State(IntEnum):
    READY = 1
    IN_PROGRESS = 2
    FINISHED = 3
    FAILED = 4
</code></pre>
<p>and I came to the conclusion that this State class could inherit the <code>Enum</code> class in the same way.</p>
<p>What does inheriting from <code>IntEnum</code> gives me that inheriting from the regular class <code>Enum</code> won't? What is the difference between them?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the python <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer">Docs</a>:</p>
<blockquote>
<p>Enum: Base class for creating enumerated constants. </p>
</blockquote>
<p>and:</p>
<blockquote>
<p>IntEnum: Base class for creating enumerated constants that are also subclasses of int.</p>
</blockquote>
<p>it says that members of an <code>IntEnum</code> can be compared to integers; by extension, integer enumerations of different types can also be compared to each other.</p>
<p>look at the below example:</p>
<pre><code>class Shape(IntEnum):
    CIRCLE = 1
    SQUARE = 2

class Color(Enum):
    RED = 1
    GREEN = 2

Shape.CIRCLE == Color.RED
&gt;&gt; False

Shape.CIRCLE == 1
&gt;&gt;True
</code></pre>
<p>and they will behave same as an integer:</p>
<pre><code>['a', 'b', 'c'][Shape.CIRCLE]
&gt;&gt; 'b'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>IntEnum is used to insure that members must be integer i.e.</p>
<pre><code>class State(IntEnum):
  READY = 'a'
  IN_PROGRESS = 'b'
  FINISHED = 'c'
  FAILED = 'd'
</code></pre>
<p>This will raise an exception: </p>
<pre><code>ValueError: invalid literal for int() with base 10: 'a'
</code></pre>
</div>
<span class="comment-copy">Well, have you read the docs?</span>
<span class="comment-copy">Well, @DeepSpace, I read the docs but all was written was that <code>Base class for creating enumerated constants that are also subclasses of int.</code>. This doesn't tell you why should you use one over the other, even thought one is more suitable for me. I found the use case and the explanation of @mehrdad-pedramfar very helpful.</span>
<span class="comment-copy">Well, if you already read the docs for the  OP, perhaps the most obvious example for a difference between <code>Enum</code> and <code>IntEnum</code> will be that <code>Color.RED &lt; Color.GREEN</code> will raise a <code>TypeError</code> while <code>Shape.CIRCLE &lt; Shape.SQUARE</code> will not.</span>
<span class="comment-copy">@DeepSpace Sure, I add the last part that said they act like integers for the same purpose. and there is a couple of more examples that we can explain here. thanks for saying, man.</span>
