<div class="post-text" itemprop="text">
<p>Using Riot's API, I'm developing an application that analyzes data from a players League of Legends match history. </p>
<hr/>
<p>I have a list containing <strong>item names</strong>, and <strong>time of purchase (in seconds)</strong></p>
<pre><code>item_list =
[['Boots of Speed', 50], 
['Health Potion', 60], 
['Health Potion', 80],
['Dorans Blade', 120],  
['Dorans Ring', 180], 
['Dorans Blade', 200], 
['Dorans Ring', 210]]
</code></pre>
<p>I'm trying to convert this to a <strong>unique list</strong> of items containing the <strong>item name</strong>, and the <strong>average time</strong> it was purchased.</p>
<p>For this example, this is what I'm looking to convert my list into:</p>
<pre><code>['Boots of Speed', 50]
['Health Potion', 70]
['Dorans Blade', 160]
['Dorans Ring', 195]
</code></pre>
<hr/>
<p><strong>My attempted solution</strong> was to create an empty dictionary, iterate through the list, set the dictionary keys as the item names, and the average time as the key value.</p>
<pre><code>dict = {}
for item in item_list:
    item_name = item[0]
    time_of_purchase = item[1]
    dict[item_name] = (dict[item_name] + time_of_purchase) / 2 # Would cast this as an integer
</code></pre>
<p>The problem with this is that I'll be trying to perform calculations on a variable <em>dict[item_name]</em> before it is initialized. </p>
<hr/>
<p>At this point I am a bit stuck. Any pointers or help would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer">setdefault</a>:</p>
<pre><code>item_list = [['Boots of Speed', 50],
             ['Health Potion', 60],
             ['Health Potion', 80],
             ['Dorans Blade', 120],
             ['Dorans Ring', 180],
             ['Dorans Blade', 200],
             ['Dorans Ring', 210]]

result = {}
for item, count in item_list:
    result.setdefault(item, []).append(count)

print([[key, sum(value) / len(value) ] for key, value in result.items()])
</code></pre>
<p>Or as an alternative use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a> from the collections module:</p>
<pre><code>from collections import defaultdict

item_list = [['Boots of Speed', 50],
             ['Health Potion', 60],
             ['Health Potion', 80],
             ['Dorans Blade', 120],
             ['Dorans Ring', 180],
             ['Dorans Blade', 200],
             ['Dorans Ring', 210]]

result = defaultdict(list)
for item, count in item_list:
    result[item].append(count)

print([[key, sum(value) / len(value) ] for key, value in result.items()])
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[['Dorans Blade', 160.0], ['Boots of Speed', 50.0], ['Health Potion', 70.0], ['Dorans Ring', 195.0]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would fill in the dictionary first, and for each <code>item_name</code> I would have a list of <code>time_of_purchase</code> values. Once done, I would go through the dictionary (key,list) pairs, and calculate the average for each list.</p>
<pre><code>item_list = [['Boots of Speed', 50],
['Health Potion', 60],
['Health Potion', 80],
['Dorans Blade', 120],
['Dorans Ring', 180],
['Dorans Blade', 200],
['Dorans Ring', 210]]

# Fill the dictionary
d = {}
for item in item_list:
    item_name, time_of_purchase = item
    if item_name not in d:
        d[item_name] = []
    d[item_name].append(time_of_purchase)

# Now calculate and print the average
retlist = []
for item_name, list_of_times in d.items():
    new_entry = [
        item_name,
        sum(list_of_times) // len(list_of_times),
    ]
    retlist.append(new_entry)
print retlist
</code></pre>
<p>Daniel's solution does the same, in a more pythonic and efficient way.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's two problems with your approach, the one you identify, and that if the item occurs three times, the average is not calculated correctly.  To fix this, one approach is to sum the times, but also record the number of occurrences separately, then calculate the average as a second step.</p>
<pre><code>item_list = [['Boots of Speed', 50],
['Health Potion', 60],
['Health Potion', 80],
['Dorans Blade', 120],
['Dorans Ring', 180],
['Dorans Blade', 200],
['Dorans Blade', 200],
['Dorans Blade', 200],
['Dorans Ring', 210]]

item_dict = {}
for item in item_list:
    item_name = item[0]
    time_of_purchase = item[1]
    if (item_name in item_dict):
        # Add the duplicate item in
        item_dict[item_name] = item_dict[item_name][0] + time_of_purchase, item_dict[item_name][1] + 1
    else:
        # First time recording this item
        item_dict[item_name] = (time_of_purchase, 1)

for item_name in item_dict.keys():
    purchase_time = item_dict[item_name][0]
    purchase_count= item_dict[item_name][1]
    print("%-15s - %u" % (item_name, purchase_time/purchase_count))
</code></pre>
</div>
<span class="comment-copy">Although Daniel's solution would most likely be preferred for advanced programmers, your solution is much easier for me to grasp and understand being a novice. Thanks!</span>
