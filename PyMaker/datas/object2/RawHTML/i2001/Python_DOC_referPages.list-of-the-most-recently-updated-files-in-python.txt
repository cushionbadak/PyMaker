<div class="post-text" itemprop="text">
<p>So using the following piece of code I can easily find the most recently updated file in a folder:</p>
<pre><code>files = os.listdir(UPLOAD_DIR+"/"+configData[obj]["client_name"])
paths = [os.path.join(UPLOAD_DIR+"/"+configData[obj]["client_name"], basename) for basename in files]
file = max(paths, key=os.path.getctime)
</code></pre>
<p>But what if there are two or more files that have the exact same updated time? How do I get a list of such files?</p>
</div>
<div class="post-text" itemprop="text">
<p>The shortest code: find the latest ctime, then get all files having this latest ctime:</p>
<pre><code>def most_recent(paths):
    if not paths:
        return []
    latest_ctime = max(os.path.getctime(p) for p in paths)
    most_recent_files = [p for p in paths if os.path.getctime(p)==latest_ctime]
    return most_recent_files
</code></pre>
<p>We loop twice over the list of paths, though, and there is a risk of race condition if the ctime of the most recent file changes between the two loops: in this case, it wouldn't be found again in the second loop.</p>
<p>We can do it in one loop, with a little bit more code, eliminating the race condition:</p>
<pre><code>def most_recent_one_loop(paths):
    out = []
    latest_ctime = 0
    for p in paths:
        ct = os.path.getctime(p)
        if ct &gt; latest_ctime:
            latest_ctime = ct
            out = [p]
        elif ct == latest_ctime:
            out.append(p)
    return out
</code></pre>
<p>As we can expect, this is about twice as fast (about 100 paths in the folder for the test):</p>
<pre><code>%timeit most_recent(paths)
# 1000 loops, best of 3: 477 µs per loop

%timeit most_recent_one_loop(paths)
# 1000 loops, best of 3: 239 µs per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably not the tidiest way of doing it but:</p>
<pre><code>maxval = os.path.getctime(max(paths, key=os.path.getctime))

indices = [index for index, val in enumerate(paths) if os.path.getctime(val) == maxval]
for index in indices:
    print(paths[index])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3, look like the max method can't fix your issue , as the <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">Python 3 docs</a> explicitly state:</p>
<blockquote>
<p>If multiple items are maximal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as sorted(iterable, key=keyfunc, reverse=True)[0] and heapq.nlargest(1, iterable, key=keyfunc).</p>
</blockquote>
<p>You may need to use sorted command to find the multi max value</p>
<pre><code>list = sorted(paths, key=os.path.getctime, reverse=True)
files=[]
for i in list:
  if os.path.getctime(list[0]) == os.path.getctime(i):
    files.append(i)
  else:
    break
</code></pre>
</div>
<span class="comment-copy">Totally unrelated, but hardcoding path seprators (<code>UPLOAD_DIR+"/"+configData[obj]["client_name"]) kind of defeats the whole point of </code>os.path.join()<code>. This should be </code>os.path.join(UPLOAD_DIR, configData[obj]["client_name"], basename)`.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/10823227/how-to-get-all-the-maximums-max-function">How to get all the maximums max function</a></span>
<span class="comment-copy">race condition ahead</span>
<span class="comment-copy">@AzatIbrakov Yes, I added a way to do it in one loop to avoid that.</span>
<span class="comment-copy">@AzatIbrakov Right, updated!</span>
<span class="comment-copy">it will be great to add that race conditions are unavoidable here without some sort of mechanism for "blocking" files, but this is a different and IMO harder question</span>
