<div class="post-text" itemprop="text">
<p>Is there a good way to load a bytes object that is represented as a string, so it can be unpickled?</p>
<h2>Basic Example</h2>
<p>Here is a dumb example:</p>
<pre><code>import pickle

mydict = { 'a': 1111, 'b': 2222 }
string_of_bytes_obj = str(pickle.dumps(mydict)) # Deliberate string representation for this quick example.

unpickled_dict = pickle.loads(string_of_bytes_obj) # ERROR!  Loads takes bytes-like object and not string.
</code></pre>
<h2>Attempt at a Solution</h2>
<p>One solution is of course to <code>eval</code> the string:</p>
<pre><code>unpickled_dict = pickle.loads(eval(string_of_bytes_obj))
</code></pre>
<p>But, seems wrong to <code>eval</code>, especially when the strings might be coming over a network or from a file.</p>
<p>...</p>
<p>Any suggestions for a better solution?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>For a safety concern you can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> instead of <code>eval</code>:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; pickle.loads(ast.literal_eval(string_of_bytes_obj))
{'b': 2222, 'a': 1111}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is there a reason you need to have it as a str? If you're just writing it to file, you can 'wb' instead of 'w'. (<a href="https://pythontips.com/2013/08/02/what-is-pickle-in-python/" rel="nofollow noreferrer">https://pythontips.com/2013/08/02/what-is-pickle-in-python/</a>)</p>
<pre><code>import pickle

mydict = { 'a': 1111, 'b': 2222 }
dumped = pickle.dumps(mydict)
string_of_bytes_obj = str(dumped) # Deliberate string representation for this quick example. 

unpickled_dict = pickle.loads(dumped) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>encoding="latin1"</code> as an argument to <code>str</code> and then use <code>bytes</code> to convert back:</p>
<pre><code>import pickle

mydict = { 'a': 1111, 'b': 2222 }
string_of_bytes_obj = str(pickle.dumps(mydict), encoding="latin1")

unpickled_dict = pickle.loads(bytes(string_of_bytes_obj, "latin1"))
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; print(unpickled_dict)
{'a': 1111, 'b': 2222}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all i wouldn't use pickles to serialize data. instead use Json.</p>
<p>my solution with pickles </p>
<pre><code>import pickle

mydict = { 'a': 1111, 'b': 2222 }
string_of_bytes_obj = pickle.dumps(mydict) # Deliberate string representation for this quick example.
print(string_of_bytes_obj)
unpickled_dict = pickle.loads(string_of_bytes_obj)
print(unpickled_dict)
</code></pre>
<p>BUT with json </p>
<pre><code>import json

mydict = { 'a': 1111, 'b': 2222 }
string_of_bytes_obj = json.dumps(mydict) 
print(string_of_bytes_obj)
unpickled_dict = json.loads(string_of_bytes_obj)
print(unpickled_dict)
</code></pre>
<p>I highly recommend you to use json to serialize your data</p>
</div>
<span class="comment-copy">I think it is much better just not to convert bytes to str. Is there any way to avoid that conversion?</span>
<span class="comment-copy">@soon I'm just processing a file from someone else... would definitely be better to change their file to use binary data... but right now, I can't avoid the string conversion.</span>
<span class="comment-copy">It's not a good idea to use pickle with network data btw: <a href="http://www.zopatista.com/plone/2007/11/09/one-cookie-please/" rel="nofollow noreferrer">zopatista.com/plone/2007/11/09/one-cookie-please</a></span>
<span class="comment-copy">Do you know what the encoding of the file is? If you do then you just have to <code>str.encode</code> the string to unpickle. If you don't you need to guess the encoding first.</span>
<span class="comment-copy">@JacquesGaudin not sure I understand.  What would be the encoding of the string?  I know the file is utf-8, but I think all that gives me is a way to get the string representation in a known encoding, and I would still need to eval... or do you mean something like the answer provided by @Farhan.K?</span>
<span class="comment-copy">Thanks.  Great answer.  Safer evaluation, just needs some extra error handling.</span>
<span class="comment-copy">Unfortunately, not my file, I'm just processing what I'm given!</span>
