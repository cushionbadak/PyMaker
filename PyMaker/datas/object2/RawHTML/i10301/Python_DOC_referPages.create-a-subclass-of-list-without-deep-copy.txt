<div class="post-text" itemprop="text">
<p>I want to subclass <code>list</code> to add some function to it, for example, <code>my_func</code>. </p>
<p>Is there a way to do this without copying the whole list, i.e. make a shallow copy, on the creation of the <code>MyList</code> object and let <code>MyList</code> reference the same list as the one used to construct it?</p>
<pre><code>class MyList(list):
    def my_func(self):
        # do some stuff
        return self


l1 = list(range(10))
l2 = MyList(l1)

print(l1)
print(l2)

l1[3] = -5

print(l1)
print(l2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pretty sure this isn't possible with a <code>list</code> subclass. It <em>is</em> possible with a <strong><a href="https://docs.python.org/3/library/collections.html#collections.UserList" rel="nofollow"><code>collections.UserList</code></a></strong> subclass (simply <em><a href="https://docs.python.org/2.7/library/userdict.html#module-UserList" rel="nofollow"><code>UserList</code></a></em> in Python <code>2</code>):</p>
<pre><code>from collections import UserList

class MyList(UserList):

    def __init__(self, it=None):
        # keep reference only for list instances
        if isinstance(it, list):
            self.data = it
        else:
            super().__init__(it)

    def my_func(self):
        # do some stuff
        return self
</code></pre>
<p>The fact that <code>UserList</code> exposes a <a href="https://docs.python.org/3/library/collections.html#collections.UserList.data" rel="nofollow"><strong><code>data</code></strong></a> attribute containing the actual list instance makes it easy for us to replace it with the iterable <code>it</code> and essentially just drop the supplied argument there and <em>retain the reference</em>:</p>
<p>By initializing as you did: </p>
<pre><code>l1 = list(range(10))
l2 = MyList(l1)

print(l1, l2, sep='\n')
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>and then mutating:</p>
<pre><code>l1[3] = -5
</code></pre>
<p>The <code>data</code> attribute referencing <code>l1</code> is, of course, mutated:</p>
<pre><code>print(l1, l2, sep='\n')
[0, 1, 2, -5, 4, 5, 6, 7, 8, 9]
[0, 1, 2, -5, 4, 5, 6, 7, 8, 9]
</code></pre>
</div>
<span class="comment-copy"><code>l2 = l1</code> assignment does shallow copies in Python.  To do a deep copy, use <code>l2 = l1[:]</code></span>
<span class="comment-copy">@PatrickHaugh  so wrong.  <code>l2 = l1[:]</code> is a shallow copy.  <code>l2 = l1</code> is not a copy at all, just another name bound to the same object.</span>
<span class="comment-copy">@wim, it's all terminology. I would argue that <code>l2 = l1</code> is a (shallow) copy. Specifically, a copy of the list-pointer.</span>
<span class="comment-copy">Sorry, no such thing as pointers in python.  It's all dicts underneath (names and objects).</span>
<span class="comment-copy">@AaronMcDaid <code>l2 = l1</code> is as different from a shallow copy as a shallow copy is from a deep copy.</span>
<span class="comment-copy">Note for any python2 readers: It's not a py3-only feature, but you <code>import UserList</code> directly rather than from collections</span>
<span class="comment-copy">Thanks, that's pretty much what I was looking for.</span>
<span class="comment-copy">According the py3 documentation <code>__init__</code> <i>must</i> be able to be called with zero or one arguments. ie. You must support <code>MyList()</code> as well as <code>MyList([1,2,3])</code>. After a little experimenting, it seems <code>UserList</code> handles all this for you by default, including transforming ranges and iterables into lists where necessary.</span>
<span class="comment-copy">Also, see <a href="https://bugs.python.org/issue27639" rel="nofollow noreferrer">bugs.python.org/issue27639</a> for a bug with py3 version of <code>UserList</code> and getting slices.</span>
<span class="comment-copy">@Dunes thanks, fixed that requirement. Yup, it handles instances other than <code>list</code> and <code>UserList</code> by <a href="https://hg.python.org/cpython/file/3.5/Lib/collections/__init__.py#l1034" rel="nofollow noreferrer">by wrapping them in a <code>list</code> call.</a>. Also, sneaky bug!</span>
