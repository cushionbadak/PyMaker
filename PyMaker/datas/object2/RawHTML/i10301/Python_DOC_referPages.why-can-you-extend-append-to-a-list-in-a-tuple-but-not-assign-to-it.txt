<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/29747224/append-to-a-list-defined-in-a-tuple-is-it-a-bug">Append to a list defined in a tuple - is it a bug? [duplicate]</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>Inspired by reading <a href="https://asmeurer.github.io/blog/posts/tuples/#fn:TypeError" rel="nofollow">footnote 4</a> of <a href="https://asmeurer.github.io/blog/posts/tuples/" rel="nofollow">this article</a>.</p>
<p>Consider the following scenario:</p>
<pre><code>&gt;&gt;&gt; t = (1,2, [3, 4])
&gt;&gt;&gt; t[2] += [5,6]

Traceback (most recent call last):
  File "&lt;pyshell#1&gt;", line 1, in &lt;module&gt; 
    t[2] += [5,6]
TypeError: 'tuple' object does not support item assignment
</code></pre>
<p>Tuples are immutable. So, as expected, trying to add to the list inside the tuple raises an error.</p>
<p>However if we inspect our tuple, the list has been added to!! (I can imagine this leading to very hard to track down bugs)</p>
<pre><code>&gt;&gt;&gt; t
(1, 2, [3, 4, 5, 6])
</code></pre>
<p>Also, both extending</p>
<pre><code>&gt;&gt;&gt; t[2].extend([7,8])
&gt;&gt;&gt; t
(1, 2, [3, 4, 5, 6, 7, 8])
</code></pre>
<p>and appending</p>
<pre><code>&gt;&gt;&gt; t[2].append(9)
&gt;&gt;&gt; t
(1, 2, [3, 4, 5, 6, 7, 8, 9])
</code></pre>
<p>work without raising an error.</p>
<p>So, my questions are:</p>
<ol>
<li>If tuples are immutable, why is it possible to change a list within a tuple?</li>
<li>Why does the first example raise an error and the other two not?</li>
<li>In the first example, why is the list inside the tuple changed even though an error is raised?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>If tuples are immutable, why is it possible to change a list within a tuple?</p>
</blockquote>
<p>Because "tuples are immutable" only means you cannot modify the tuple. The list that's referred to from the tuple is not part of the tuple, it doesn't "know" that it is in a tuple, and it has no means to resist being modified.</p>
<blockquote>
<p>Why does the first example raise an error and the other two not?</p>
</blockquote>
<p>Because of how <code>+=</code> works. It calls <code>__iadd__</code> on the list and then (because <code>__iadd__</code> is not required to return the original object) attempts to assign the resulting modified object back to the tuple. The first thing succeeds, the second thing fails.</p>
<p>That is, for this case where <code>t[2]</code> has an <code>__iadd__</code> function, <code>t[2] += [5,6]</code> is equivalent to:</p>
<p><code>t[2] = t[2].__iadd__([5,6])</code></p>
<blockquote>
<p>In the first example, why is the list inside the tuple changed even though an error is raised?</p>
</blockquote>
<p>Because this Python operation doesn't offer what in C++ we'd call a "strong exception guarantee". The first part of the operation has already been performed, and cannot be (or at any rate is not) reversed when the second part fails. For the official version see <a href="https://docs.python.org/3/faq/programming.html#faq-augmented-assignment-tuple-error" rel="nofollow">Why does a_tuple[i] += [‘item’] raise an exception when the addition works?</a></p>
</div>
<span class="comment-copy">From the <a href="https://docs.python.org/2/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">docs</a>: <i>The value of an immutable container object that contains a reference to a mutable object can change when the latter’s value is changed; however the container is still considered immutable, because the collection of objects it contains cannot be changed. So, immutability is not strictly the same as having an unchangeable value, it is more subtle.</i></span>
<span class="comment-copy">See related <a href="https://docs.python.org/3.4/faq/programming.html#why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works" rel="nofollow noreferrer">documentation page</a>.</span>
<span class="comment-copy">For 1. see: "Why can tuples contain mutable items?" <a href="http://stackoverflow.com/questions/9755990/why-can-tuples-contain-mutable-items/" title="why can tuples contain mutable items">stackoverflow.com/questions/9755990/…</a></span>
