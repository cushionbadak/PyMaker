<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7053652/function-returns-none-without-return-statement">Function returns None without return statement</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I'm an absolute beginner to Python and programming in general and I have just had my first exposure to functions. </p>
<p>I have define two simple functions below:</p>
<pre><code>def output1():
   print "Hello, world!"

def output2():
   print "Hello, there!"

output1()
output2()
</code></pre>
<p>Having saved the above to a script called function.py, I then use the windows power shell to run the script, and it prints the following as you would expect:</p>
<pre><code>Hello, world!
Hello, there!
</code></pre>
<p>However when I amend the script to:</p>
<pre><code>def output1():
   print "Hello, world!"

def output2():
   print "Hello, there!"

print output1()
print output2()
</code></pre>
<p>It prints:</p>
<pre><code>Hello, world!
None
Hello, there!
None
</code></pre>
<p>Out of curiosity why does it do this when I prefix output1 and output2 with print?</p>
</div>
<div class="post-text" itemprop="text">
<p>It works like this, because:    </p>
<pre><code>print output1()
</code></pre>
<p>means that you want to print the RESULT of the function (ie. the value of return).</p>
<p>And because there is no return in your function, by default it's None.</p>
<pre><code>def output1():
   print "Hello, world!"
def output2():
   print "Hello, there!"
   return "Something"

print output1()
print output2()
</code></pre>
<p>Would result in:</p>
<pre><code>Hello, world!
None
Hello, there!
Something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A function can have a return value: you call the function and it returns something back to where it was called.</p>
<p>A function returns <code>None</code> by default in Python.</p>
<p>You're now also printing the return value of <code>output1</code> and <code>output2</code>.</p>
<p>You can read more about this <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">in this section</a> of the Python language tutorial.</p>
</div>
<span class="comment-copy">If you are new to Python, why are you starting with Python 2? The <a href="http://sopython.com" rel="nofollow noreferrer">Stack Overflow Python community</a> overwhelmingly <a href="http://sopython.com/wiki/What_tutorial_should_I_read%3F" rel="nofollow noreferrer">recommends</a> starting with Python 3, as does <a href="https://wiki.python.org/moin/Python2orPython3" rel="nofollow noreferrer">python.org itself</a>. Version 3 is the present and future of the language, while 2 is the past. In learning 2 first, you'll pick up many bad habits that will need to be corrected when you learn 3 (which you'll need to do eventually), so it's much better to start with 3 first, then learn the differences in 2 later.</span>
<span class="comment-copy">I've started with 2.7 because most of the tutorials I am viewing use it. Further to this I have read that there are libraries that are incompatible with 3. I guess I can always learn 3 later, I really doubt the differences between the two are staggering anyway. @MattDMo</span>
<span class="comment-copy">there are very few libraries left that don't work with 3. Depending on what type of work you'll be doing, this may never even be an issue. It was 5 years ago, but not now. You <i>will</i> learn bad habits with 2 that will have to be unlearned later, so if you're just learning now, it's much better to learn the good way first. The standard lib in 3.5 is much improved over 2.7, with more features, meaning fewer third-party imports are necessary. If you want to learn 2 first, that's your choice, but many people with a lot more experience than me very strongly recommend 3.</span>
