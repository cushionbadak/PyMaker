<div class="post-text" itemprop="text">
<p>I have a python list that is like this,</p>
<pre><code>[[12587961, 0.7777777777777778], [12587970, 0.5172413793103449], [12587979, 0.3968253968253968], [12587982, 0.88], [12587984, 0.8484848484848485], [12587992, 0.7777777777777778], [12587995, 0.8070175438596491], [12588015, 0.4358974358974359], [12588023, 0.8985507246376812], [12588037, 0.5555555555555555], [12588042, 0.9473684210526315]]
</code></pre>
<p>This list can be up to thousand elements in length, how can I get the maximum value in the list according to the second item in the sub-array, and get the index of the maximum value which is the fist element in the sub-array in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/functions.html#max" rel="noreferrer"><code>max</code></a> function and its <code>key</code> parameter, to use only the second element to compare elements of the list.</p>
<p>For example,</p>
<pre><code>&gt;&gt;&gt; data = [[12587961, 0.7777777777777778], [12587970, 0.5172413793103449], [12587979, 0.3968253968253968].... [12588042, 0.9473684210
526315]]
&gt;&gt;&gt; max(data, key=lambda item: item[1])
[12588042, 0.9473684210526315]
</code></pre>
<p>Now, if you want just the first element, then you can simply get the first element alone, or just unpack the result, like this</p>
<pre><code>&gt;&gt;&gt; index, value = max(data, key=lambda item: item[1])
&gt;&gt;&gt; index
12588042
&gt;&gt;&gt; value
0.9473684210526315
</code></pre>
<hr/>
<p>Edit: If you want to find the maximum index (first value) out of all elements with the maximum value (second value), then you can do it like this</p>
<pre><code>&gt;&gt;&gt; _, max_value = max(data, key=lambda item: item[1])
&gt;&gt;&gt; max(index for index, value in data if value == max_value)
</code></pre>
<p>You can do the same in a single iteration, like this</p>
<pre><code>max_index = float("-inf")
max_value = float("-inf")

for index, value in data:
      if value &gt; max_value:
          max_value = value
          max_index = index
      elif value == max_value:
          max_index = max(max_index, index)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>max</code> with a key.</p>
<pre><code>l = [[12587961, 0.7777777777777778], [12587970, 0.5172413793103449], [12587979, 0.3968253968253968], [12587982, 0.88], [12587984, 0.8484848484848485], [12587992, 0.7777777777777778], [12587995, 0.8070175438596491], [12588015, 0.4358974358974359], [12588023, 0.8985507246376812], [12588037, 0.5555555555555555], [12588042, 0.9473684210526315]]
max_sub = max(l, key=lambda x: x[1])
max_val = max_sub[1]
max_index = max_sub[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from operator import itemgetter

a = [[12587961, 0.7777777777777778], [12587970, 0.5172413793103449], [12587979, 0.3968253968253968], [12587982, 0.88], [12587984, 0.8484848484848485], [12587992, 0.7777777777777778], [12587995, 0.8070175438596491], [12588015, 0.4358974358974359], [12588023, 0.8985507246376812], [12588037, 0.5555555555555555], [12588042, 0.9473684210526315]]

max(a, key=itemgetter(1))[0]
// =&gt; 12588042
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>allData = [[12587961, 0.7777777777777778], [12587970, 0.5172413793103449], [12587979, 0.3968253968253968], [12587982, 0.88], [12587984, 0.8484848484848485], [12587992, 0.7777777777777778], [12587995, 0.8070175438596491], [12588015, 0.4358974358974359], [12588023, 0.8985507246376812], [12588037, 0.5555555555555555], [12588042, 0.9473684210526315]]

listOfSecondData = [i[1] for i in allData]
result = allData[listOfSecondData.index(max(listOfSecondData))][0]

print(result)
#Output: 12588042
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple </p>
<pre><code>list = [[12587961, 0.7777777777777778], [12587970, 0.5172413793103449], [12587979, 0.3968253968253968], [12587982, 0.88], [12587984, 0.8484848484848485], [12587992, 0.7777777777777778], [12587995, 0.8070175438596491], [12588015, 0.4358974358974359], [12588023, 0.8985507246376812], [12588037, 0.5555555555555555], [12588042, 0.9473684210526315]]
list2 = []

for x in list:
    list2.append(x[1])
print "index-&gt;" + str(list[list2.index(max(list2))][0])
print "max value-&gt;" + str(list[list2.index(max(list2))][1])
</code></pre>
</div>
<span class="comment-copy">You are right @unwind. I think he wants to find all the elements with maximum value according to the second element and find the maximum out of them based on the first value.</span>
<span class="comment-copy">well sorry if you guys didn't get it, it's like this I want the subarray with the maximum second value, second value means the [1]th item in a subarray</span>
<span class="comment-copy">Okay ... I still struggle to understand. A small example on e.g. a four or five element list would be helpful. But I guess it's already solved.</span>
<span class="comment-copy">@rksh What if more than one subarray has got the maximum second value?</span>
<span class="comment-copy">Thanks actually what I wanted was the something like you mentioned in the original answer, the subarray with the maxumum second value in a subarray :) is there a way to get the n number of arrays with the maximum value, like top 10 highest values :)</span>
<span class="comment-copy">@rksh You should give proper examples. The words are simply confusing.</span>
<span class="comment-copy">ok i will take a simple example if there is an array like this <code>data = [1,2,5,7,6,8,3,9,4]</code> how can i get the three maximum values? in this case it's <code>7,8,9</code></span>
<span class="comment-copy">@rksh Sort them and slice the result list.</span>
