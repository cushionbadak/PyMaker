<div class="post-text" itemprop="text">
<p>I have a list of functions and its arguments like this:</p>
<pre><code>(func1, *arg1), (func2, *arg2),...
</code></pre>
<p>I want to pass them into another function to execute them like this:</p>
<pre><code>for func, arg* in (list of funcs, args):
   func(arg*)
</code></pre>
<p>How to do it in python? I have tried several but it doesn't like unpacking and *arg at the same time.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow">*-operator to unpack the arguments out of the tuple</a>.</p>
<p>For example, suppose the format of items in your invocation list is <code>(function,arg1,arg2,...)</code>. In other words, <code>item[0]</code> is your function, while <code>item[1:]</code> are the arguments the should be given to the function.</p>
<pre><code>def f1(x1):
    print("f1 {0}".format(x1))

def f2(x1,x2):
    print("f2 {0} {1}".format(x1,x2))

for data in ((f1,5),(f2,3,4)):
    data[0](*data[1:])
# output:
#   f1 5
#   f2 3 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do like this, just use list of tuple where first is the function name, and rest are arguments. </p>
<pre><code>def a(*args,**kwargs):
    print 1

list_f = [(a,1,2,3)]

for f in list_f:
    f[0](f[1:])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming your function and arguments are separate in the tuple, </p>
<pre><code>def squarer(*args):
    return map(lambda x: x*2, args)

def subtracter(*args):
    return map(lambda x: x-1, args)

funcAndArgs = [(squarer, [1,2,3,4]), (subtracter, [1,2,3,4])]

for func, args in funcAndArgs:
    print func(*args)
</code></pre>
<p>Output:</p>
<pre><code>[2, 4, 6, 8]
[0, 1, 2, 3]
</code></pre>
</div>
<span class="comment-copy">Apart from <code>arg*</code> being invalid syntax in Python, what exact problem are you having? "It doesn't like" is a bit vague. Also please show the exact format of the original list.</span>
<span class="comment-copy">Your solution call the functions with one argument - a tuple.</span>
