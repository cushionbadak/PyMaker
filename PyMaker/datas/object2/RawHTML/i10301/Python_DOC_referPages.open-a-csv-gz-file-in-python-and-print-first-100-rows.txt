<div class="post-text" itemprop="text">
<p>I'm trying to get only the first 100 rows of a csv.gz file that has over 4 million rows in Python. I also want information on the # of columns and the headers of each. How can I do this? </p>
<p>I looked at <a href="https://stackoverflow.com/questions/10566558/python-read-lines-from-compressed-text-files">python: read lines from compressed text files</a> to figure out how to open the file but I'm struggling to figure out how to actually print the first 100 rows and get some metadata on the information in the columns. </p>
<p>I found this <a href="https://stackoverflow.com/questions/1767513/read-first-n-lines-of-a-file-in-python">Read first N lines of a file in python</a> but not sure how to marry this to opening the csv.gz file and reading it without saving an uncompressed csv file. </p>
<p>I have written this code:</p>
<pre><code>import gzip
import csv
import json
import pandas as pd


df = pd.read_csv('google-us-data.csv.gz', compression='gzip', header=0,    sep=' ', quotechar='"', error_bad_lines=False)
for i in range (100):
print df.next() 
</code></pre>
<p>I'm new to Python and I don't understand the results. I'm sure my code is wrong and I've been trying to debug it but I don't know which documentation to look at. </p>
<p>I get these results (and it keeps going down the console - this is an excerpt): </p>
<pre><code>Skipping line 63: expected 3 fields, saw 7
Skipping line 64: expected 3 fields, saw 7
Skipping line 65: expected 3 fields, saw 7
Skipping line 66: expected 3 fields, saw 7
Skipping line 67: expected 3 fields, saw 7
Skipping line 68: expected 3 fields, saw 7
Skipping line 69: expected 3 fields, saw 7
Skipping line 70: expected 3 fields, saw 7
Skipping line 71: expected 3 fields, saw 7
Skipping line 72: expected 3 fields, saw 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pretty much what you've already done, except <code>read_csv</code> also has <code>nrows</code> where you can specify the number of rows you want from the data set.</p>
<p>Additionally, to prevent the errors you were getting, you can set <code>error_bad_lines</code> to <code>False</code>. You'll still get warnings (if that bothers you, set <code>warn_bad_lines</code> to <code>False</code> as well). These are there to indicate inconsistency in how your dataset is filled out.</p>
<pre><code>import pandas as pd
data = pd.read_csv('google-us-data.csv.gz', nrows=100, compression='gzip',
                   error_bad_lines=False)
print(data)
</code></pre>
<p>You can easily do something similar with the <code>csv</code> built-in library, but it'll require a <code>for</code> loop to iterate over the data, has shown in other examples.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you could do something like this (from the gzip module <a href="https://docs.python.org/3/library/gzip.html#examples-of-usage" rel="nofollow">examples</a>)</p>
<pre><code>import gzip
with gzip.open('/home/joe/file.txt.gz', 'rb') as f:
    header = f.readline()
    # Read lines any way you want now. 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first answer you linked suggests using <a href="https://docs.python.org/3/library/gzip.html#gzip.GzipFile" rel="nofollow"><code>gzip.GzipFile</code></a> - this gives you a file-like object that decompresses for you on the fly.</p>
<p>Now you just need some way to parse csv data out of a file-like object ... like <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow">csv.reader</a>.</p>
<p>The <code>csv.reader</code> object will give you a list of fieldnames, so you know the columns, their names, and how many there are.</p>
<p>Then you need to get the first 100 csv row objects, which will work exactly like in the second question you linked, and each of those 100 objects will be a list of fields.</p>
<p>So far this is all covered in your linked questions, apart from knowing about the existence of the csv module, which is listed in the <a href="https://docs.python.org/3/library/index.html" rel="nofollow">library index</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code is OK;</p>
<p>pandas <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow">read_csv</a></p>
<blockquote>
<p><strong>warn_bad_lines</strong> : boolean, default True </p>
<pre><code>If error_bad_lines is False, and warn_bad_lines is True, 
a warning for each “bad line” will be output. (Only valid with C parser).
</code></pre>
</blockquote>
</div>
<span class="comment-copy">You will get help much faster if you know <a href="http://stackoverflow.com/help/how-to-ask">how to ask</a>. What code have you written and  how has it failed you?</span>
<span class="comment-copy">Ok I updated my post. Ideas?</span>
<span class="comment-copy">Can you post a sample of what the raw file looks like? (e.g. try <code>head filename</code> in a terminal)</span>
<span class="comment-copy">Pandas is using the metadata as the columns. You need to ignore lines up to the line that contains the column names</span>
<span class="comment-copy">thanks, that worked perfectly</span>
