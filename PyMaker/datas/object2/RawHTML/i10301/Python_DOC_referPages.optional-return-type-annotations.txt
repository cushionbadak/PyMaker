<div class="post-text" itemprop="text">
<p>I have a function that will either return a generator (<code>types.GeneratorType</code>) or <code>list</code>, depending upon the value of an argument. For example:</p>
<pre><code>def foo(switch: bool) -&gt; list: # return type of list || types.GeneratorType
    ... # create some generator object named f1
    if switch:
        return list(f1)
    else:
        return f1
</code></pre>
<p>How do I tell it that I can optionally return a list or another type? Or, for that matter, what about a bunch of different types?</p>
<p>I've looked over <a href="https://docs.python.org/3/library/typing.html" rel="nofollow">documentation on a module <code>typing</code></a> but haven't as of yet found any methods there that allow for this. I haven't been able to find any examples by Googling either.</p>
</div>
<div class="post-text" itemprop="text">
<p>The two solutions that immediately spring to mind are: </p>
<ol>
<li><p>Make a <a href="https://docs.python.org/3/library/typing.html#typing.Union" rel="nofollow"><code>Union</code></a> type</p>
<pre><code>def foo(switch: bool) -&gt; Union[list, GeneratorType]:
</code></pre>
<p>which means <em>"returns either list or generator"</em> (you could also use <a href="https://docs.python.org/3/library/typing.html#typing.Generator" rel="nofollow"><code>Generator</code></a> and <a href="https://docs.python.org/3/library/typing.html#typing.List" rel="nofollow"><code>List</code></a>); or</p></li>
<li><p>Type based on the behaviour you can expect from <em>either</em> return value, e.g. that they are <a href="https://docs.python.org/3/library/typing.html#typing.Iterable" rel="nofollow"><code>Iterable</code></a>:</p>
<pre><code>def foo(switch: bool) -&gt; Iterable:  
</code></pre></li>
</ol>
<p>In both cases you could also provide more detail: list or generator/iterable <em>of what?</em></p>
<p>That said, something that returns either a list or a generator sounds like an odd interface, and it would be helpful to provide a bit more context around what consumers of your function should expect to do with whatever they receive. It may be that:</p>
<ul>
<li>a single function with two different returns isn't the right interface design; or </li>
<li>rather than <code>list</code> you could use the more general <a href="https://docs.python.org/3/library/typing.html#typing.Sequence" rel="nofollow"><code>Sequence</code></a>, to permit e.g. <code>tuple</code>s to be used instead.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Wouldn't it be better to pass "type" as an argument? </p>
<pre><code>def foo(switch: type) -&gt; list | tuple | gen_func
    ... # create some generator object named f1
    return switch(f1)

 foo(list) &gt; list type
 foo(tuple) &gt; tuple
 # And if you would want to get generator you would only need to provide
 gen = lambda func_result: (el for el in func_result)
 foo(gen)
</code></pre>
<p>Dont know if this is the case.</p>
</div>
<span class="comment-copy">This works, thanks very much.</span>
<span class="comment-copy">@bjd2385 it works, but if you gave more information you might get a far better solution to the actual problem you're trying to solve.</span>
<span class="comment-copy">It will be a generator or list full of strings that are filenames with absolute paths, my apologies.</span>
<span class="comment-copy">@bjd2385 but why a generator <i>or</i> list? Will things just iterate over whatever they get back (in which case <code>Iterable[str]</code> seems appropriate) or what? How will this be <i>used?</i></span>
<span class="comment-copy">Now that you mention it, I don't know and will remove it. I ran with the thought/question though because I knew it may come up with other types, so perhaps this is a poor example.</span>
<span class="comment-copy">That doesn't really answer the OP's question, which is how to annotate the return type. Also that's not the correct syntax, or correct annotation for <i>"returns the same type as the parameter type"</i>.</span>
