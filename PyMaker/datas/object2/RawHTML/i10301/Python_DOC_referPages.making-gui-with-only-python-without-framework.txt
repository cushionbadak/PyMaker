<div class="post-text" itemprop="text">
<ol>
<li>Is it possible to create a user interface without the help of python framework (like tinker or pygame) and use only vanilla python code? If yes, how?</li>
<li>Can you briefly explain how python framework works?</li>
<li>Is the code of different python framework different?</li>
<li>If the computer did not have the framework installed, will the program still runnable if the program uses a framework?
Thanks very much</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>If you want as few external dependencies as possible (but still a GUI) I would strongly suggest using a Web-Microframework like <a href="http://bottlepy.org/docs/dev/index.html" rel="nofollow">bottle</a> (single file) and utilize the user's browser for rendering.</p>
<ol>
<li>You can make a GUI without any external framework with HTML by setting up a webserver and using the user's browser to render it.</li>
<li>For a browser-GUI without an external Framework: Depending on whether you know JavaScript you can either use XML-RPC (<a href="https://docs.python.org/3/library/xmlrpc.server.html" rel="nofollow">xmlrpc.server</a>+<a href="https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler" rel="nofollow">http.server</a> with JS in the browser) or WSGI (<a href="https://docs.python.org/3/library/wsgiref.html" rel="nofollow">wsgiref</a>) (example on that page)</li>
<li>Yes, totally.</li>
<li>Of course the if you do not prepare for this case you cannot run a program without an integral part of it like a Framework - but you can distribute your program with the Framework included.</li>
</ol>
<p>For XML-RPC</p>
<pre><code>import xmlrpc.server
import http.server

class MyHandler(xmlrpc.server.SimpleXMLRPCRequestHandler,http.server.SimpleHTTPRequestHandler):
    pass 
</code></pre>
<p>This handler will serve files from the current working directory (your actual HTML-UI and JS for communication (there are several XMP-RPC libraries for JS)) but it can also be used like in the <a href="https://docs.python.org/3/library/xmlrpc.server.html#simplexmlrpcserver-example" rel="nofollow">XML-RPC-Server example</a> to glue your code and the UI together.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Yes, after all tinker and pygame are just python classes packaged as modules.</li>
<li>Python frameworks are a bunch of pre-tested and reusable modules that allow you to use and extend upon so you don't have to reinvent the wheel. </li>
<li>Yes, frameworks will have differences in usability and code.</li>
<li>The computer will always need the dependencies, though you can package these in various ways aka create a package that has all your dependencies for the program to run. </li>
</ol>
</div>
<span class="comment-copy">Curious as to why you would need to do this, as the docs say: "The Tkinter module (“Tk interface”) is the standard Python interface to the Tk GUI toolkit. Both Tk and Tkinter are available on most Unix platforms, as well as on Windows systems"</span>
<span class="comment-copy">Note that you should ask separate questions, and each is way too broad. In short: 1) Yes, but it depends on the target system and restriction on "vanilla python code" - <a href="https://docs.python.org/3/library/tkinter.html" rel="nofollow noreferrer">tkinter is part of the standard library</a>. 2) No, depends on which one you mean. 3) Yes, that's why they are different frameworks. 4) Only if you install the framework.</span>
<span class="comment-copy">I would just add to 1., that it is possible without such frameworks by using things like OpenGL directly. In a sense, the frameworks just create a nice layer around it to make it easier to access and depending on the framework size, build upon it by adding widgets and functionality.</span>
