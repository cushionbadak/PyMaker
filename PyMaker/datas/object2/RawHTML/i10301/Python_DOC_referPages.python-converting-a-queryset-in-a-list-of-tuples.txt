<div class="post-text" itemprop="text">
<p>i want to turn a queryset into a list of tuples. "result" ist what it should look like:</p>
<pre><code>queryset = [{x:'1',y:'a'}, {x:'2',y:'b'}]
result = [(1,'a'),(2,'b')]
</code></pre>
<p>So the solution i do have right now is this one, but it seems to me that there could be a way to shorten the code, and make it more efficient. Is there a way?</p>
<p>My current solution:</p>
<pre><code>result = []
for dic in queryset:
    result.append((dic[x],dic[y]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming <code>queryset</code> is supposed to look like this, with <code>'x'</code> and <code>'y'</code> as string keys:</p>
<pre><code>&gt;&gt;&gt; queryset = [{'x':'1', 'y':'a'}, {'x':'2', 'y':'b'}]
&gt;&gt;&gt; result = [(q['x'], q['y']) for q in queryset]
&gt;&gt;&gt; result
[('1', 'a'), ('2', 'b')]
&gt;&gt;&gt; # or if x and y are actually the correct names/vars for the keys
... result = [(q[x], q[y]) for q in queryset]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you can have multiple keys and you just want certain key values, you can use <em>itemgetter</em> with map passing the keys  you want to extract:</p>
<pre><code>from operator import itemgetter
result = list(map(itemgetter("x", "y"), queryset)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If this is an django ORM queryset (or result of it), you can just use <code>values_list</code> method instead of <code>values</code>. That will give exactly what you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension and <code>dict.values()</code></p>
<pre><code>&gt;&gt;&gt; queryset = [{'x': '1', 'y': 'a'}, {'x': '2', 'y': 'b'}]
&gt;&gt;&gt; result = [tuple(v.values()) for v in queryset]
&gt;&gt;&gt; result
    [('1', 'a'), ('2', 'b')]
</code></pre>
<p><strong>UPDATE</strong></p>
<p>as @aneroid reasonably mentioned, since <code>dict</code> object are not ordered the code snippet could return different order in <code>tuple</code></p>
<p>So since i don't want to add duplicate solution. There is one option, not so elegant, and maybe with a lack of efficiency, to use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a></p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; queryset = [{'x': '1', 'y': 'a'}, {'x': '2', 'y': 'b'}]
&gt;&gt;&gt; order = ('x', 'y')
&gt;&gt;&gt; result = [tuple(OrderedDict((k, v[k]) for k in myorder).values()) for v in queryset]
&gt;&gt;&gt; result
    [('1', 'a'), ('2', 'b')]
</code></pre>
<p>But i personally think that @PadraicCunningham 's <a href="https://stackoverflow.com/a/39702851/3124746">solution</a> is the most elegant here.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>your_tuple = [(x, y) for x, y in queryset.items()]</code></p>
<hr/>
<p>EDIT</p>
<p><code>your_tuple = [(x.get('x'), x.get('y')) for x in queryset]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>dict.values()</code>:</p>
<pre><code>queryset = [{x:'1',y:'a'}, {x:'2',y:'b'}]
result = []

for i in queryset:
    result.append(tuple(i.values()))
</code></pre>
<p>Or in one line:</p>
<pre><code>result = [tuple(i.values()) for i in queryset]
</code></pre>
<hr/>
<p>If you want them in a particular order:</p>
<p><code>result = [(i[x], i[y]) for i in queryset]</code></p>
</div>
<span class="comment-copy">What if you have more than one key/value pair, do you only want x and y?</span>
<span class="comment-copy"><code>for</code> loops are still okay to use in python. Not everything has to be a one liner</span>
<span class="comment-copy">To shorten the code use list comprehension instead of for loop.</span>
<span class="comment-copy">Thanks! exactly what is was searching for</span>
<span class="comment-copy"><code>v.values()</code> won't necessarily return the 'x' value before the 'y' value so you it can sometimes give <code>[('a', '1'), ('b', '2')]</code> (or some combo like that), instead of <code>[('1', 'a'), ('2', 'b')]</code></span>
<span class="comment-copy"><code>queryset</code> is a <code>list</code> not a <code>dict</code></span>
<span class="comment-copy"><code>[(x, y) for x, y in queryset.items()]</code> would give you the same as <code>list(queryset.items())</code> which is the key/value not the values.</span>
<span class="comment-copy"><code>i.values()</code> won't necessarily return the 'x' value before the 'y' value so you it can sometimes give <code>[('a', '1'), ('b', '2')]</code> (or some combo like that), instead of <code>[('1', 'a'), ('2', 'b')]</code></span>
<span class="comment-copy">edited my answer</span>
<span class="comment-copy">In your edited answer, <code>((i[y], i[x]))</code> is the wrong order. But anyway, what you've put as the edit is the <b>same thing</b> the OP has in his question.</span>
<span class="comment-copy">haha i didnt realise. I added list comprehension though</span>
