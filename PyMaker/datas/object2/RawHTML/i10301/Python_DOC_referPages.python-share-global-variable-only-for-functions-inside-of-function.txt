<div class="post-text" itemprop="text">
<p>I have a function which will recursively execute another function inside and I want to share variable for all execution of that function.</p>
<p>Something like that:</p>
<pre><code>def testglobal():
  x = 0
  def incx():
    global x
    x += 2
  incx()
  return x
testglobal() # should return 2
</code></pre>
<p>However, I'm getting error <code>NameError: name 'x' is not defined</code></p>
<p>There is hacky solution to make list and use first value of that list as <code>x</code>. But this is so ugly.</p>
<p>So how can I share <code>x</code> with <code>incx</code> function ? Or should I use completely different approach ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to use the <code>nonlocal</code> statement to access <code>x</code>, which is not global but local to <code>testglobal</code>.</p>
<pre><code>def testglobal():
  x = 0
  def incx():
    nonlocal x
    x += 2
  incx()
  return x
assert 2 == testglobal() 
</code></pre>
<p>The closest you can come to doing this in Python 2 is to replace <code>x</code> with a mutable value, similar to the argument hack you mentioned in your question.</p>
<pre><code>def testglobal():
  x = [0]
  def incx():
    x[0] += 2
  incx()
  return x[0]
assert 2 == testglobal()
</code></pre>
<p>Here's an example using a function attribute instead of a list, an alternative that you might find more attractive.</p>
<pre><code>def testglobal():
  def incx():
    incx.x += 2
  incx.x = 0
  incx()
  return inc.x
assert 2 == testglobal() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will work unless you are still using Python 2.x:</p>
<pre><code>def testglobal():
  x = 0
  def incx():
    nonlocal x
    x += 2
  incx()
  return x

testglobal() # should return 2
</code></pre>
<p>Possible a cleaner solution though would be to define a class to store your state between method calls.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" rel="nofollow"><code>nonlocal</code></a> statement, so <code>incx</code> will use the <code>x</code> variable from <code>testglobal</code>:</p>
<pre><code>def testglobal():
    x = 0
    def incx():
        nonlocal x
        x += 2
    incx()
    return x

testglobal()
</code></pre>
</div>
<span class="comment-copy">In python 3 there is a new keyword, <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow noreferrer">nonlocal</a>, that does exactly what you want. Keep in mind that this is a closure so you have access to <code>x</code> without alterations, but assigning (e.g. <code>x = 1</code>) inside <code>incx</code> will make <code>x</code> local to <code>incx</code> and therefore not refer to the same variable. <code>nonlocal</code> achieves this.</span>
<span class="comment-copy">But this was introduced only in python 3, right ? But this concept looks so common for, how to do the same in python 2 ?</span>
<span class="comment-copy">You can't, short of your mutable-argument hack. Closures only capture the value of a variable for reading; you can't modify the value nonlocally (which is why Python 3 added the <code>nonlocal</code> keyword).</span>
