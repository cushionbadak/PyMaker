<div class="post-text" itemprop="text">
<pre><code>ip = a list of ips
ipf = list(filter(lambda x: x if not x.startswith(str(range(257,311))) else None, ip))
</code></pre>
<p>Is is possible to do something like this? I tested it and it doesn't work.
I'd like to delete all ips from "ip" list that start with 256. 257. 258. ecc... to 310.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, <code>str.startswith()</code> doesn't take a range.</p>
<p>You'd have to parse out the first part and test it as an integer; filtering is also easier done with a list comprehension:</p>
<pre><code>[ip for ip in ip_addresses if 257 &lt;= int(ip.partition('.')[0]) &lt;= 310]
</code></pre>
<p>The alternative would be to use the <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow"><code>ipaddress</code> library</a>; it'll reject any invalid address with a <code>ipaddress.AddressValueError</code> exception, and since addresses that start with anything over 255 are invalid, you can easily co-opt that to filter out your invalid addresses:</p>
<pre><code>import ipaddress

def valid_ip(ip):
    try:
        ipaddress.IPv4Address(ip)
    except ipaddress.AddressValueError:
        return False
    else:
        return True

[ip for ip in ip_addresses if valid_ip(ip)]
</code></pre>
</div>
<span class="comment-copy">The parts of a valid IP will be in the range 0 to 255 (both inclusive).</span>
<span class="comment-copy">so in my case I need to use:     ipf = [x for x in ip if 257 &lt;= int(x.partition('.')[0]) &lt;= 310]     right?</span>
<span class="comment-copy">@Thavivelball: yes; I renamed <code>ip</code> to <code>ip_addresses</code> to use clearer variable names.</span>
<span class="comment-copy">@Thavivelball: since you didn't provide any sample input dat or the expected output, I can't help you more than this.</span>
<span class="comment-copy">It works actually.... just you mistyped lol... you typed "ipaddress.IPV4Address(ip)" instead of "ipaddress.IPv4.Address(ip)". Thanks</span>
<span class="comment-copy">Corrected; it was typed from memory.</span>
