<div class="post-text" itemprop="text">
<p>I have this homework assignment and seem to be stuck on this question.</p>
<blockquote>
<p>Write a function that takes, as an argument, a list called aList. It returns a Boolean True if the list contains three pairs of integers, and False otherwise.</p>
</blockquote>
<p>Example:</p>
<pre><code>&gt;&gt;&gt;threePairs([5, 6, 3, 2, 1, 4])
False

&gt;&gt;&gt;threePairs([1, 1, 2, 2, 2, 2])
True
</code></pre>
<p>I've tried using indexes and I don't really know how to slice so I'm stuck in figuring out how I make those pairs equal to each other in the condition so it is True.</p>
<p>This is what I had previous to deleting it and trying again.</p>
<pre><code>def threePairs(aList):
    if [0] == [1] and [2] == [3] and [4] == [5]:
        return True
    else:
        return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to slice, you need index access (as a side note, you should ask your teacher if they've ever heard of <code>pep8</code>, <code>three_pairs(mylist)</code> would be far better):</p>
<pre><code>def threePairs(aList):
    if aList[0] == aList[1] and aList[2] == aList[3] and aList[4] == aList[5]:
        return True
    else:
        return False
</code></pre>
<p>But if you're ever returning <code>True</code> and <code>False</code> like this, you can just return the result of the comparison:</p>
<pre><code>def threePairs(aList):
    return aList[0] == aList[1] and aList[2] == aList[3] and aList[4] == aList[5]
</code></pre>
<p>Though as other answers allude - your examples are not well defined. What if you have:</p>
<pre><code>&gt;&gt;&gt; threePairs([1, 2, 3, 1, 2, 3])
</code></pre>
<p>Should that return <code>True</code>, or <code>False</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>How about making a <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow"><code>Counter()</code></a> and check how many "pairs" you've got:</p>
<pre><code>In [1]: from collections import Counter

In [2]: def has_pairs(l, n):
            return sum(value / 2 for value in Counter(l).values() 
                       if value % 2 == 0) == n 

In [3]: has_pairs([5, 6, 3, 2, 1, 4], 3)
Out[3]: False

In [4]: has_pairs([1, 1, 2, 2, 2, 2], 3)
Out[4]: True
</code></pre>
<p>Works for a list with any length and any input number of pairs.</p>
<p>Instead of using a <code>sum()</code> to count all the pairs, you can iterate over the counter one value at a time and have an <em>early exit</em> if number of pairs reaches or exceeds the input number of pairs.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could <code>zip</code> the a sliced list with itself one position ahead, with steps equal to <code>2</code> to get adjacent elements. Then feed that to <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow"><code>all</code></a> with the condition you need:</p>
<pre><code>def threePairs(l):
    return all(i == j for i,j in zip(l[::2], l[1::2])) 
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> simply takes an element from each of the iterables supplied and returns it as a tuple until one of the sequences is exhausted. </p>
<p>So, for example, if <code>l = [5, 6, 3, 2, 1, 4]</code> and <code>zip</code> is used with <code>zip(l[::2], l[1::2])</code> you'd have:</p>
<pre><code># l[::2] = [5, 3, 1]
# l[1::2] = [6, 2, 4]
print(list(zip(l[::2], l[1::2])))
[(5, 6), (3, 2), (1, 4)] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def threepairs(aList):
    counter = 0
    for element in aList:
        if counter &gt;= 3:
            return True
        if element % 2 == 0:
            counter += 1
    return False
</code></pre>
</div>
<span class="comment-copy">Wow that was really simple. Thank you. It makes it a lot easier to understand.</span>
<span class="comment-copy">You were close! You probably just missed the part in your lectures about index access on a list.</span>
<span class="comment-copy">Not allowed using <code>zip</code> coming up in 3...2....1 :P</span>
<span class="comment-copy">What does the zip do? If you don't mind me asking?</span>
<span class="comment-copy">@Wiggs try this: <code>&gt;&gt;&gt; help(zip)</code></span>
<span class="comment-copy">@Wiggs apart from <code>help(zip)</code> I've tried to water down usage of <code>zip</code> here with an example list. You could also click the link I added for zip that takes you to the docs.</span>
<span class="comment-copy">Thank you for the links. I'll be sure to look at them :)</span>
