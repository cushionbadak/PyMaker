<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/733454/best-way-to-format-integer-as-string-with-leading-zeros">Best way to format integer as string with leading zeros? [duplicate]</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p>I've got an algorithm that does this already, but the code is ugly and slow. I assume that there's a built-in or some function in the libs that give faster and more precise results.</p>
<p>What I want it where I can give a final number of bits, a string, list or deque (anything that can be cast to a string in the end).</p>
<pre><code>func(totalBits, binaryInStringOrListForm) -&gt; String or List with leading zeroes
</code></pre>
<p>The code I've already got is below:</p>
<pre><code> val = deque(["1", "0"])

     while len(val) &lt; 8:

         val.appendleft("0")
</code></pre>
<p>By the way, deque is a type of object from collections that allows you to <code>leftappend</code> wherein you can add an item to the beginning of the list without having to shift everything over by one.</p>
<p>There are old answers to this but they're all Python 2 and the whole formatting thing has changed significantly. </p>
<p>EDIT: I think that this question is not a duplicate of the one linked as I was actually after leading zeroes as @Martijn Pieters has made me aware.</p>
<p>EDIT: Ok, it IS a duplicate of that one it seems. Sorry about the dupe.</p>
<p>LAST EDIT I SWEAR: I just noticed something. I keep getting values like 000b0110 when trying to make it one-byte long. This is opposed to 00000110 that I wanted. I'm just adding this so that if anyone else in the future looks up this question they'll find the correct thing. So all I've done is ignore the first two character of the string by using:</p>
<pre><code>val = val[2::].rjust(8, '0')
</code></pre>
<p>I'm getting this because I'm turning a number INTO a binary number with "bin" which returns a string that has the "0b" (declaring it as binary) at the beginning.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a built-in, the <a href="https://docs.python.org/3/library/stdtypes.html#str.ljust" rel="noreferrer"><code>str.ljust()</code> method</a>. It takes the target width and an optional fill character (defaulting to a space). You can use it to pad out a string with <code>'0'</code> characters:</p>
<pre><code>val = val.ljust(8, '0')
</code></pre>
<p>There is also an equivalent <a href="https://docs.python.org/3/library/stdtypes.html#str.rjust" rel="noreferrer"><code>str.rjust()</code> method</a> to add padding on the left.</p>
<p>However, if you want <em>leading</em> zeros (as opposed to trailing), I'd use the <a href="https://docs.python.org/3/library/stdtypes.html#str.zfill" rel="noreferrer"><code>str.zfill()</code> method</a> as that takes any <code>-</code> or <code>+</code> prefix into account.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the formatting language but this particular example is probably unnecessary:</p>
<pre><code>&gt;&gt;&gt; format('101', '&lt;08')
'10100000'
&gt;&gt;&gt; "{:&lt;0{width}}".format('101', width=8)
'10100000'
</code></pre>
</div>
<span class="comment-copy">Why not just use string concatenation if you only need to append zeros?</span>
<span class="comment-copy">If you are appending to the <i>left</i>, are you not adding <b>leading</b> zeros?</span>
<span class="comment-copy">Strings are immutable and hence Python would be forced to create a new string for each new concatenated string. This is slow. I need fast for this.</span>
<span class="comment-copy">Just realised. Got rid of the binary tag. I don't know why I put it in</span>
<span class="comment-copy">@MartijnPieters I've changed the question because you're right, I meant leading zeroes. Your answer made me realise that one.</span>
<span class="comment-copy">Thank you. This was what I was looking for. Cannot accept the answer though because stackoverflow giving a message saying: "You can accept an answer in 8 minutes"</span>
<span class="comment-copy">Oh, and yes, it was leading zeroes I needed.</span>
<span class="comment-copy">Not sure why this was downvoted, it is certainly not a wrong or unhelpful answer. Note that you shouldn't really use <code>str.format()</code> when you could just use the <code>format()</code> function: <code>format('101', '&lt;08')</code> gives you the same results as the first option, without having to parse a string template.</span>
<span class="comment-copy">I agree. It's good to have two methods anyway too. I've upvoted too.</span>
<span class="comment-copy">Good point, changed...</span>
