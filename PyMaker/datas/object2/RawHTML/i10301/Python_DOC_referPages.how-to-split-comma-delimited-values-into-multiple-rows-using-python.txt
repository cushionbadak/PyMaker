<div class="post-text" itemprop="text">
<p>I'm using Python and SQLite to manipulate a database. </p>
<p>I have an SQLite Table <code>Movies</code> that looks like this:</p>
<pre><code>| ID             | Country     
+----------------+-------------
| 1              | USA, Germany, Mexico 
| 2              | Brazil, Canada
| 3              | Peru
</code></pre>
<p>I would like to split the comma delimited values in <code>Country</code> and insert them into <strong>another table</strong> <code>Countries</code> so that <code>Countries</code> table looks like this </p>
<pre><code>| ID             | Country     
+----------------+-------------
| 1              | USA
| 1              | Germany
| 1              | Mexico
| 2              | Brazil
| 2              | Canada
| 3              | Peru
</code></pre>
<p>How do I do split the values from <code>Country</code> column in <code>Movies</code> table and insert them into <code>Country</code> column in <code>Countries</code> table?</p>
<p>According to <a href="https://stackoverflow.com/questions/12744155/sqlite-create-new-columns-from-column-containing">this post</a>, I can't accomplish this task using pure SQLite. How would I go about it using Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using Python,</p>
<pre><code>cursor.execute("""Select * from Movies""")
all_data = cursor.fetchall()
cursor.execute("""CREATE TABLE IF NOT EXISTS Countries
                    (ID TEXT,
                    Country TEXT)""")
for single_data in all_data:
    countries = single_data[1].split()
    for single_country in countries:
        cursor.execute("""INSERT INTO Countries VALUES(%s,"%s")"""%(single_data[0],single_country))
    conn.commit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can solve this in pure SQLite using a common table expression.</p>
<pre><code>create table movies(id integer primary key, country text);
insert into movies values
(1,'USA, Germany, Mexico'), (2,'Brazil, Canada'), (3,'Peru');

create table countries(id integer, country text);
insert into countries
WITH split(id, country, str) AS (
    SELECT id, '', country||',' FROM movies
    UNION ALL SELECT id,
    trim(substr(str, 0, instr(str, ','))),
    substr(str, instr(str, ',')+1)
    FROM split WHERE str!=''
) SELECT id, country FROM split WHERE country!='' ORDER BY id;

SELECT * FROM countries;

id|country
1|USA
1|Germany
1|Mexico
2|Brazil
2|Canada
3|Peru
</code></pre>
</div>
<span class="comment-copy">If the key to the table is <code>ID</code> then you obviously can't. BTW, please show some code, so that we have something to refer to your question with.</span>
<span class="comment-copy">@barakmanos The <code>ID</code> column is not the primary key.</span>
<span class="comment-copy">@CL.: Where exactly is that stated within the question?</span>
<span class="comment-copy">@barakmanos In the example that shows duplicate values in this column. In a junction table like this, the primary key consists of both columns.</span>
<span class="comment-copy">you can try <code>sqlalchemy</code> to extract each row then split the second coloumn and insert the data into the new table by simply iterating over it.</span>
<span class="comment-copy">This code blows up when some name contains a quote. That link does not work in SQLite for an arbitrary number of values.</span>
<span class="comment-copy">This code reads like it's trying to overwrite <code>Movies</code> table</span>
<span class="comment-copy">@the_prole : its not overwriting Movies table. It first creates Movies_2 table -&gt; adding data as per requirement -&gt;Deleting Movies table and Renaming Movies_2 to Movies</span>
<span class="comment-copy">Right, that's what I mean. But in the question I specified that the data should be written to a separate table <code>Countries</code>. <code>Movies</code> should not be deleted... but I think you almost solved it.</span>
<span class="comment-copy">This code is vulnerable to both quoting problems and a <a href="https://en.wikipedia.org/wiki/SQL_injection" rel="nofollow noreferrer">SQL injection attack</a>. To avoid both problems, always <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute" rel="nofollow noreferrer">use bind parameters</a>. <code>cursor.execute("INSERT INTO Countries VALUES(:id,:name)", { "id": single_data[0], "name": single_country })</code></span>
