<div class="post-text" itemprop="text">
<p>I created the empty abstract class <code>AbstractStorage</code> and inherited the <code>Storage</code> class from it:</p>
<pre><code>import abc
import pymongo as mongo

host = mongo.MongoClient()

print(host.alive()) # True

class AbstractStorage(metaclass=abc.ABCMeta):
    pass

class Storage(AbstractStorage):
    dbh = host
    def __init__(self):
        print('__init__')

Storage()
</code></pre>
<p>I expected the output to be</p>
<pre class="lang-none prettyprint-override"><code>True
__init__
</code></pre>
<p>however, the one I'm getting is</p>
<pre class="lang-none prettyprint-override"><code>True
Traceback (most recent call last):
  File "/home/vaultah/run.py", line 16, in &lt;module&gt;
    Storage()
TypeError: Can't instantiate abstract class Storage with abstract methods dbh
</code></pre>
<p>The problem (apparently) goes away if I remove <code>metaclass=abc.ABCMeta</code> (so that <code>AbstractStorage</code> becomes an ordinary class) and/or if I set <code>dbh</code> to some other value. </p>
<p>What's going on here?</p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't really a problem with ABCs, it's a problem with PyMongo.  There is an issue about it <a href="https://jira.mongodb.org/browse/PYTHON-480" rel="nofollow">here</a>.  It seems that pymongo overrides <code>__getattr__</code> to return some sort of database class.  This means that <code>host.__isabstractmethod__</code> returns a Database object, which is true in a boolean context.  This cause ABCMeta to believe that <code>host</code> is an abstract method:</p>
<pre><code>&gt;&gt;&gt; bool(host.__isabstractmethod__)
True
</code></pre>
<p>The workaround described in the issue report is to manually set <code>host.__isabstractmethod__ = False</code> on your object.  The last comment on the issue suggests a fix has been put in for pymongo 3.0.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Short Version</strong></p>
<p><code>mongo.MongoClient</code> returns an object that appears to be (is?) an abstract method, which you then assign to the <code>dbh</code> field in <code>Storage</code>.  This makes <code>Storage</code> an abstract class, so instantiating it raises a <code>TypeError</code>.</p>
<p>Note that I don't have <code>pymongo</code>, so I can't tell you anything more about <code>MongoClient</code> than how it gets treated by <code>ABCMeta</code>.</p>
<p><strong>Long Version</strong></p>
<p>The <code>ABCMeta.__new__</code> method looks inside each field of the new class it's creating.  Any field that itself has a <code>True</code> (or "true-like")  <code>__isabstractmethod__</code> field is considered an abstract method.  If a class has <em>any</em> non-overridden abstract methods, the whole class is considered abstract, so any attempt to instantiate it is an error.</p>
<p>From an earlier version of the standard library's <code>abc.py</code>:</p>
<pre class="lang-python3 prettyprint-override"><code>def __new__(mcls, name, bases, namespace):
    cls = super().__new__(mcls, name, bases, namespace)
    # Compute set of abstract method names
    abstracts = {name
                 for name, value in namespace.items()
                 if getattr(value, "__isabstractmethod__", False)}
    # ...
    cls.__abstractmethods__ = frozenset(abstracts)
    # ...
</code></pre>
<p>This is not mentioned in the <code>abc.ABCMeta</code> class docs, but a bit lower, under the <a href="https://docs.python.org/3/library/abc.html#abc.abstractmethod" rel="nofollow"><code>@abc.abstractmethod</code></a> decorator:</p>
<blockquote>
<p>In order to correctly interoperate with the abstract base class machinery, the descriptor must identify itself as abstract using <code>__isabstractmethod__</code>.  In general, this attribute should be <code>True</code> if any of the methods used to compose the descriptor are abstract.</p>
</blockquote>
<p><strong>Example</strong></p>
<p>I created a bogus "abstract-looking" class with an <code>__isabstractmethod__</code> attribute, and two supposedly-concrete subclasses of <code>AbstractStorage</code>.  You'll see that one produces the exact error you're getting:</p>
<pre class="lang-python3 prettyprint-override"><code>#!/usr/bin/env python3


import abc
# I don't have pymongo, so I have to fake it.  See CounterfeitAbstractMethod.
#import pymongo as mongo


class CounterfeitAbstractMethod():
    """
    This class appears to be an abstract method to the abc.ABCMeta.__new__
    method.

    Normally, finding an abstract method in a class's namespace means
    that class is also abstract, so instantiating that class is an
    error.

    If a class derived from abc.ABCMeta has an instance of
    CounterfeitAbstractMethod as a value anywhere in its namespace
    dictionary, any attempt to instantiate that class will raise a
    TypeError: Can't instantiate abstract class &lt;classname&gt; with
    abstract method &lt;fieldname&gt;.
    """
    __isabstractmethod__ = True


class AbstractStorage(metaclass=abc.ABCMeta):

    def __init__(self):
        """
        Do-nothing initializer that prints the name of the (sub)class
        being initialized.
        """
        print(self.__class__.__name__ + ".__init__ executing.")
        return


class ConcreteStorage(AbstractStorage):
    """
    A concrete class that also _appears_ concrete to abc.ABCMeta.  This
    class can be instantiated normally.
    """
    whatever = "Anything that doesn't appear to be an abstract method will do."


class BogusStorage(AbstractStorage):
    """
    This is (supposedly) a concrete class, but its whatever field appears
    to be an abstract method, making this whole class abstract ---
    abc.ABCMeta will refuse to construct any this class.
    """
    #whatever = mongo.MongoClient('localhost', 27017)
    whatever = CounterfeitAbstractMethod()


def main():
    """
    Print details of the ConcreteStorage and BogusStorage classes.
    """
    for cls in ConcreteStorage, BogusStorage:
        print(cls.__name__ + ":")
        print("    whatever field: " + str(cls.whatever))
        print("    abstract methods: " + str(cls.__abstractmethods__))
        print("    Instantiating...")
        print("    ", end="")
        # KABOOM!  Instantiating BogusStorage will raise a TypeError,
        # because it appears to be an _abstract_ class.
        instance = cls()
        print("    instance: " + str(instance))
        print()
    return


if "__main__" == __name__:
    main()
</code></pre>
<p>Running this produces:</p>
<pre class="lang-none prettyprint-override"><code>$ ./storage.py
ConcreteStorage:
    whatever field: Anything that doesn't appear to be an abstract method will do.
    abstract methods: frozenset()
    Instantiating...
    ConcreteStorage.__init__ executing.
    instance: &lt;__main__.ConcreteStorage object at 0x253afd0&gt;

BogusStorage:
    whatever field: &lt;__main__.CounterfeitAbstractMethod object at 0x253ad50&gt;
    abstract methods: frozenset({'whatever'})
    Instantiating...
    Traceback (most recent call last):
  File "./storage.py", line 75, in &lt;module&gt;
    main()
  File "./storage.py", line 68, in main
    instance = cls()
TypeError: Can't instantiate abstract class BogusStorage with abstract methods whatever
</code></pre>
</div>
<span class="comment-copy">Wow. Thank you :) Maybe I should write something like <code>if mongo.version_tuple &lt; (3, 0): dbh.__isabstractmethod__ = False</code> in the class definition.</span>
<span class="comment-copy">@vaultah: You could do that.  I don't think it will cause harm to set that attribute even in higher versions, though; it will just look a little weird.</span>
<span class="comment-copy">Congrats on finding the actual bug report.  (In other news:  I type <i>way</i> slower than I thought.)</span>
