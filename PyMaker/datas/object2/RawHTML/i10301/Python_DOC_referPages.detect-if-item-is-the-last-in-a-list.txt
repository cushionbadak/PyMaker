<div class="post-text" itemprop="text">
<p>I am using Python 3, and trying to detect if an item is the last in a list, but sometimes there will repeats. This is my code:</p>
<pre><code>a = ['hello', 9, 3.14, 9]
for item in a:
    print(item, end='')
    if item != a[-1]:
        print(', ')
</code></pre>
<p>And I would like this output:</p>
<pre><code>hello,
9,
3.14,
9
</code></pre>
<p>But I get this output:</p>
<pre><code>hello, 
93.14, 
9
</code></pre>
<p>I understand why I am getting the output I do not want.
I would prefer if I could still use the loop, but I can work around them. (I would like to use this with more complicated code)</p>
</div>
<div class="post-text" itemprop="text">
<p>Rather than try and detect if you are at the last item, print the comma and newline <em>when printing the next</em> (which only requires detecting if you are at the first):</p>
<pre><code>a = ['hello', 9, 3.14, 9]
for i, item in enumerate(a):
    if i:  # print a separator if this isn't the first element
        print(',')
    print(item, end='')
print()  # last newline
</code></pre>
<p>The <code>enumerate()</code> function adds a counter to each element (see <a href="https://stackoverflow.com/questions/22171558/what-does-enumerate-mean">What does enumerate mean?</a>), and <code>if i:</code> is true for all values of the counter except <code>0</code> (the first element).</p>
<p>Or use <code>print()</code> to insert separators:</p>
<pre><code>print(*a, sep=',\n')
</code></pre>
<p>The <code>sep</code> value is inserted between each argument (<code>*a</code> applies all values in <code>a</code> as separate arguments, see <a href="https://stackoverflow.com/questions/36901/what-does-double-star-and-star-do-for-python-parameters">What does ** (double star) and * (star) do for parameters?</a>). This is more efficient than using <code>print(',n'.join(map(str, a)))</code> as this doesn't need to build a whole new string object first.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really just want to join your elements into a comma+newline-separated string then it's easier to use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="noreferrer"><code>str.join</code></a> method:</p>
<pre><code>elements = ['hello', 9, 3.14, 9]
s = ',\n'.join(str(el) for el in elements)
# And you can do whatever you want with `s` string:
print(s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While these answers may work for the specific case of the OP, I found they were unsatisfactory for broader application.</p>
<p>Here are the methods I could think of/saw here and their respective timings.</p>
<h2>Index Method</h2>
<pre><code>urlist_len = len(urlist)-1
for x in urlist:
    if urlist.index(x) == urlist_len:
        pass
</code></pre>
<h2>Negative Slice Method</h2>
<pre><code>for x in urlist:
    if x == urlist[-1]:
        pass
</code></pre>
<h2>Enumerate Method</h2>
<pre><code>urlist_len = len(urlist)-1
for index, x in enumerate(urlist):
    if index == urlist_len:
        pass
</code></pre>
<p>Here are some timing for some different methods:</p>
<pre><code>╔════════════════════════════════════════════════════════════════╗
║                       Timing Results (s)                       ║
╠═══════════════════════╦════╦═════════╦════════╦═══════╦════════╣
║ List size             ║ 20 ║ 200     ║ 2000   ║ 20000 ║ 200000 ║
╠═══════════════════════╬════╬═════════╬════════╬═══════╬════════╣
║                       ║ 0  ║ 0.0006  ║ 0.051  ║ 5.2   ║ 560    ║
║ Index Method          ║    ║         ║        ║       ║        ║
╠═══════════════════════╬════╬═════════╬════════╬═══════╬════════╣
║                       ║ 0  ║ 0       ║ 0.0002 ║ 0.003 ║ 0.034  ║
║ Negative Slice Method ║    ║         ║        ║       ║        ║
╠═══════════════════════╬════╬═════════╬════════╬═══════╬════════╣
║ Enumerate Method      ║ 0  ║ 0.00004 ║ 0.0005 ║ 0.016 ║ 0.137  ║
╚═══════════════════════╩════╩═════════╩════════╩═══════╩════════╝
</code></pre>
<p><sup> Note: values &lt;10us rounded to 0</sup></p>
<p>As you can see, the index method is <strong>always</strong> slower, and it only get exponentially worse as the list size increases. I don't see any reason to use it ever. The Negative slice method is the fastest in all cases, <strong>but if you have duplicate items in your list, it will give you a false positive</strong>. Also, the negative slice method requires that the sequence you are iterating over supports indexing. So, in the case of duplicate items in your list (or not index supporting sequence) use the fast-but-not-fastest enumerate method.</p>
<p>Edit: as a commentator noted, calculating the length of the list within the loop isn't ideal. I was able to shave 35% off the enumerate method (not reflected in the table at this moment) using this knowledge.</p>
<hr/>
<p>tldr: use negative slice if all elements are unique and sequence supports indexing, otherwise enumerate method</p>
</div>
<div class="post-text" itemprop="text">
<p>You are not getting the expected output because in your code you say, "Hey python, print a comma if current element is not equal to last element."</p>
<p>Second element 9 is equal to last element, hence the comma is not printed.</p>
<p>The right way to check for the last element is to check the index of element :</p>
<pre><code>a = ['hello', 9, 3.14, 9]
for item in a:
    print(item, end='')
    if a.index(item) != len(a)-1: #&lt;--------- Checking for last element here
        print(', ')
</code></pre>
<p>(Also, this might throw a value error. You should check for that too.)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are just looking to see if the item is last in the (or any item in any list) you could try using a function to check if an item is last in a list.</p>
<pre><code>a = ['hello', 9, 3.14, 9]
def is_last(alist,choice):
        if choice == alist[-1]:
            print("Item is last in list!")
            return True
        else:
            print("Item is not last")
            return False

if is_last(a,9) == True:
    &lt;do things&gt;

else:
    &lt;do other things&gt;
</code></pre>
</div>
<span class="comment-copy">Not using a loop: <code>print(*a, sep=',\n')</code></span>
<span class="comment-copy">@MartijnPieters Wow, thanks. Why does it not add a comma for the last item?</span>
<span class="comment-copy">@nedla2004: because <code>sep</code> is the <i>separator</i>, which goes between elements.  <code>end</code> is the terminator, which goes after the last element.</span>
<span class="comment-copy">Because <code>sep</code> is used <i>between</i> elements, not after.</span>
<span class="comment-copy">This exactly what I want, I just can't accept it yet.</span>
<span class="comment-copy">Also, could you please explain both methods some. (I am completely confused.)</span>
<span class="comment-copy">@nedla2004: what parts are confusing? What <a href="https://stackoverflow.com/questions/22171558/what-does-enumerate-mean"><code>enumerate()</code> does</a>? Or why <code>if i:</code> is true fore everything but the first element?</span>
<span class="comment-copy">Now that you tell me, I understand why it is not true for the first item, I just never thought about how enumerate could be used like that. I find that pretty clever! Thanks for your help.</span>
<span class="comment-copy">@MartijnPieters, sure, but <code>print</code> prints your string, and there's a chance that you want to manipulate that string later.</span>
<span class="comment-copy">You can use map also! <code>print(',\n'.join(map(str,elements)))</code></span>
<span class="comment-copy">Not sure if it will make much difference, but you could do the <code>len(urlist)-1</code> calculation outside the loop to improve the performance of both the <code>index</code> and <code>enumerate</code> approaches</span>
<span class="comment-copy">@maxedison You're absolutely right. I was able to shave off ~35% in the <code>enumerate</code> method.</span>
<span class="comment-copy">Yep, Python uses negative indices to count from right to left in a list.</span>
<span class="comment-copy"><code>is_last(a, 9)</code> will return <code>True</code> <b>twice</b>, for both <code>a[1]</code> and <code>a[3]</code>. Also, don't use <code>== True</code> in an <code>if</code> statement, leave testing for truth to <code>if</code> directly.</span>
