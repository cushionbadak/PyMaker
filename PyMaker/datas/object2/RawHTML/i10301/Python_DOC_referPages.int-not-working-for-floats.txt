<div class="post-text" itemprop="text">
<p>I recently ran into this in Python 3.5:</p>
<pre><code>&gt;&gt;&gt; flt = '3.14'
&gt;&gt;&gt; integer = '5'
&gt;&gt;&gt; float(integer)
5.0
&gt;&gt;&gt; float(flt)
3.14
&gt;&gt;&gt; int(integer)
5
&gt;&gt;&gt; int(flt)
Traceback (most recent call last):
  File "&lt;pyshell#7&gt;", line 1, in &lt;module&gt;
    int(flt)
ValueError: invalid literal for int() with base 10: '3.14'
</code></pre>
<p>Why is this? It seems like it should return <code>3</code>. Am I doing something wrong, or does this happen for a good reason?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>int()</code> expects an number or string that contains an integer literal. Per the <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow">Python 3.5.2</a> documentation:</p>
<blockquote>
<p>If <em>x</em> is not a number or if <em>base</em> is given, then <strong><em>x</em> must be a string, <code>bytes</code>, or <code>bytearray</code> instance representing an integer literal</strong> in <em>radix base</em>. (Emphasis added)</p>
</blockquote>
<p>Meaning <code>int()</code> can only convert strings that contain integers. You can easily do this:</p>
<pre><code>&gt;&gt;&gt; flt = '3.14'
&gt;&gt;&gt; int(float(flt))
3
</code></pre>
<p>This will convert <code>flt</code> into a float, which is then valid for <code>int()</code> because it is a number. Then it will convert to integer by removing fractional parts.</p>
</div>
<div class="post-text" itemprop="text">
<p>It does not work because <code>flt</code> is not a string representation of an integer. You would need to convert it to <code>float</code> first then an <code>int</code>.</p>
<p>e.g.</p>
<pre><code>flt = '3.14'
f = int(float(flt))
</code></pre>
<p>output is</p>
<pre><code>3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answers already give you a good explanation about your issue, another way to understand what's going would be doing something like this:</p>
<pre><code>import sys

for c in ['3.14', '5']:
    try:
        sys.stdout.write(
            "Casting {0} {1} to float({0})...".format(c, c.__class__))
        value = float(c)
        sys.stdout.write("OK -&gt; {0}\n".format(value))
        print('-' * 80)
    except:
        sys.stdout.write("FAIL\n")

    try:
        sys.stdout.write(
            "Casting {0} {1} to int({0})...".format(c, c.__class__))
        value = int(c)
        sys.stdout.write("OK -&gt; {0}\n".format(value))
    except:
        sys.stdout.write("FAIL\n")
        sys.stdout.write("Casting again using int(float({0}))...".format(value))
        value = int(float(c))
        sys.stdout.write("OK -&gt; {0}\n".format(value))
        print('-' * 80)
</code></pre>
<p>Which outputs:</p>
<pre><code>Casting 3.14 &lt;class 'str'&gt; to float(3.14)...OK -&gt; 3.14
--------------------------------------------------------------------------------
Casting 3.14 &lt;class 'str'&gt; to int(3.14)...FAIL
Casting again using int(float(3.14))...OK -&gt; 3
--------------------------------------------------------------------------------
Casting 5 &lt;class 'str'&gt; to float(5)...OK -&gt; 5.0
--------------------------------------------------------------------------------
Casting 5 &lt;class 'str'&gt; to int(5)...OK -&gt; 5
</code></pre>
</div>
<span class="comment-copy">Important point: If you don't assign the result of <code>float(flt)</code>, e.g. <code>flt = float(flt)</code>, then the converted value is thrown away. It doesn't change its argument in-place (Python has no concept equivalent to C++ pass-by-reference that would allow this), so <code>int(flt)</code> is operating on the original <code>str</code>, not a <code>float</code>. Basically, <code>int()</code> works just fine with <code>float</code>s, but you didn't give it a <code>float</code>.</span>
<span class="comment-copy">Thank you for your answer, but why is this? It seems like it should work. I understand that Python does not let you do this, but it seems strange.</span>
<span class="comment-copy">@nedla2004 there's a reason there's a <code>int</code> and <code>float</code> function. <code>int</code> is for integer conversion, <code>float</code> is for float conversion. <code>float</code> does not convert in place.</span>
<span class="comment-copy">Thank you, that makes more sense now.</span>
