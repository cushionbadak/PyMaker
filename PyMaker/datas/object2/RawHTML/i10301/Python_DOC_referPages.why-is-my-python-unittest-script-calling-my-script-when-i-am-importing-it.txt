<div class="post-text" itemprop="text">
<p>I am trying to test a python script and when I import the script into my testing suite, it calls the script. In my example below I import list3rdparty and once I run the test it immediate calls list3rdparty. I do not want this to happen. I would like the test to only call the functions within every test case.</p>

list3rdpartytest.py

<pre><code>import unittest
from list3rdparty import * ## this is where the script is being imported


class TestOutputMethods(unittest.TestCase):


    def setUp(self):
        pass

    def test_no_args_returns_help(self):
        args = []
        self.assertEqual(get_third_party(args), help())

    ##get_third_party is a function in list3rdparty##


if __name__ == '__main__':
    unittest.main(warnings = False) 
</code></pre>

list3rdparty.py

<pre><code>def get_third_party(args_array):
    ##does a bunch of stuff



def get_args():
    get_third_party(sys.argv)

get_args()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You probably have code at the module level which will be executed on import. For example, if you had a file with the following, it will print the string the first time it's imported.</p>
<pre><code>import something
from whatever import another

print 'ding'
</code></pre>
<p>To avoid this, put the code inside a block like this:</p>
<pre><code>if __name__ == '__main__':
    # your module-level code here
    get_args()
</code></pre>
<p>This will only run the code if it's being called directly from the command line.</p>
</div>
<span class="comment-copy">importing a python module always executes the code inside it, this is meant to execute all the method or class definitions inside it, so that they are loaded and ready to be executed themselves. If the module you import is also a script (e.g. meant to be executed from the command line), then you should put the startup code of that script below a <code>if __name__ == '__main__':</code> statement, which marks it not to be executed when the file is imported. Usually though my habit is to keep in separate file re-usable things that are meant to be imported and executable things that are meant to be launched.</span>
<span class="comment-copy">Why do people answer the question in a comment? Write an answer!</span>
<span class="comment-copy">@Svend the module I import is also a script. When you say "put the startup code" below a if <b>name</b> == '<b>main</b>': statement what do you mean? I am sorry for the ignorance, I am pretty new to python.</span>
<span class="comment-copy">@JacobShafi Just wanted to share this in case you did not know about it, since you mentioned you are just starting off. Within the <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">documentation</a> for unittesting, you will see references to mocking. Mocking is a very helpful tool in unittesting that would be worth looking in to. Check out the doc <a href="https://docs.python.org/3/library/unittest.mock.html?highlight=mock#module-unittest.mock" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">@idjaw that is super useful! Thanks for the tip.</span>
<span class="comment-copy">Thanks for the quick response! I am just curious, what do you mean put the code in here. I have been seeing that in other answers but I am not sure what that means. I am sorry for the ignorance, I am new to python.</span>
<span class="comment-copy">Any code that executes at the module-level, so any code not in a function, class or other callable block.</span>
<span class="comment-copy">I have made some edits to show you what I am doing in list3rdparty.rb. So would I just add get_args() under the if <b>name</b> == '<b>main</b>': in the test suite?</span>
<span class="comment-copy">@JacobShafi Not quite. Do this -&gt; <code>if __name__ == '__main__': get_args()</code> inside <code>list3rdparty.py</code>. That way when you import it from <code>list3rdpartytest.py</code>, it won't execute the <code>get_args()</code>.</span>
<span class="comment-copy">@idjaw Thanks! It worked perfectly!</span>
