<div class="post-text" itemprop="text">
<p>Given two dictionaries, I want to look at their intersction and difference and perform f function on the elements that intersect and perform g on the unique elements, Here's how I found out what the unique and intersecting elements are where d1 and d2 are two dictionaries, How do i print out the d_intersection and d_difference as dictionaries inside a tuple?  The output should look something like this ({intersecting keys,values}, {difference keys,values})
for example: given </p>
<pre><code>d1 = {1:30, 2:20, 3:30, 5:80}

d2 = {1:40, 2:50, 3:60, 4:70, 6:90}
</code></pre>
<p>The output should be <code>({1: 70, 2: 70, 3: 90}, {4: 70, 5: 80, 6: 90})</code></p>
<pre><code>dic = {}
d_intersect = set(d1) &amp; set(d2)
d_difference =  set(d1) ^ set(d2)
for i in d_intersect:
    dic.update({i : f(d1[i],d2[i])})
for j in d_difference:
    dic.update({j : g(d1[j],d2[j])})
</code></pre>
<p>Can someone tell me where I was going wrong and why does my code give key error 4?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's one way of doing it, though there may be a more efficient method.</p>
<pre><code>d1 = {1:30, 2:20, 3:30, 5:80}
d2 = {1:40, 2:50, 3:60, 4:70, 6:90}

d_intersect = {} # Keys that appear in both dictionaries.
d_difference = {} # Unique keys that appear in only one dictionary.

# Get all keys from both dictionaries.
# Convert it into a set so that we don't loop through duplicate keys.
all_keys = set(d1.keys() + d2.keys()) # Python2.7
#all_keys = set(list(d1.keys()) + list(d2.keys())) # Python3.3

for key in all_keys:
    if key in d1 and key in d2:
        # If the key appears in both dictionaries, add both values
        # together and place it in intersect.
        d_intersect[key] = d1[key] + d2[key]
    else:
        # Otherwise find out the dictionary it comes from and place
        # it in difference.
        if key in d1:
            d_difference[key] = d1[key]
        else:
            d_difference[key] = d2[key]
</code></pre>
<blockquote>
<p>Output:</p>
<p>{1: 70, 2: 70, 3: 90}</p>
<p>{4: 70, 5: 80, 6: 90}</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You get a <em>KeyError</em> for <em>4</em> as <code>^</code> looks for the <em>symmetric difference</em> which means keys <em>unique to either</em>, the keys are <em>not in</em> both. You also don't need to create sets, you can use the <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow">view object</a> returned from calling .keys</p>
<pre><code>d1 = {1: 30, 2: 20, 3: 30, 5: 80}

d2 = {1: 40, 2: 50, 3: 60, 4: 70, 6: 90}

 # d1.keys() ^ d2 -&gt; {4, 5, 6}, 4, 6 unique to d2, 5 unique to d1.
symm = {k: d1.get(k, d2.get(k)) for k in d1.keys() ^ d2}
inter = {k: d2[k] + d1[k] for k in d1.keys() &amp; d2}
</code></pre>
<p><code>d1.get(k, d2.get(k))</code> works for the <em>symmetric difference</em> as it catches when we get a unique  key from <code>d2</code>.</p>
<p>The code for python2 is slightly different, you would need to replace <code>.keys</code> with <code>.viewkeys</code> to get a <a href="https://docs.python.org/2/library/stdtypes.html#dictionary-view-objects" rel="nofollow"><em>view object</em>:</a></p>
<pre><code> {k: d1.get(k, d2.get(k)) for k in d1.viewkeys() ^ d2}
 {k: d2[k] + d1[k]  for k in d1.viewkeys() &amp; d2}
</code></pre>
<p>To get the just the difference between two sets i.e what is in a but not in b, you need <code>-</code>:</p>
<pre><code>In [1]: d1 = {1: 30, 2: 20, 3: 30, 5: 80}

In [2]: d2 = {1: 40, 2: 50, 3: 60, 4: 70, 6: 90}

In [3]: {k: d2[k] for k in d2.keys() - d1}
Out[3]: {4: 70, 6: 90}

In [4]: {k: d1[k] for k in d1.keys() - d2}
Out[4]: {5: 80}
In [5]: d2.keys() - d1 # in d2 not in d1
Out[5]: {4, 6}

In [6]: d1.keys() - d2 # in d1 not in d2
Out[6]: {5}

In [7]: d1.keys() ^ d2 # unique to either
Out[7]: {4, 5, 6}
</code></pre>
<p>The symmetric difference is like doing the union of the differences:</p>
<pre><code>In [12]: d1.keys() - d2 |  d2.keys() - d1
Out[12]: {4, 5, 6}
</code></pre>
<p>All the operators are discussed in the python <a href="https://docs.python.org/2/library/sets.html#set-objects" rel="nofollow">docs</a>, also the wiki page on <a href="https://en.wikipedia.org/wiki/Set_(mathematics)" rel="nofollow">Set_(mathematics)</a> gives you a good overview.</p>
</div>
<span class="comment-copy">A suggestion: your question is messy, not easy to understand and the code looks weird. What programming language is that? When you say you expect a certain output but you don't provide the input, it is almost impossible to understand what you are looking for.</span>
<span class="comment-copy">Sorry, Edited it now. Its python and one of the question for a quizzes and I was trying to solve it. I'm pretty new to python so my code looks very ugly</span>
<span class="comment-copy">From the output it looks like you want a tuple of two dictionaries. The function dict_interdif gives a single dictionary.</span>
<span class="comment-copy">Could you also explain how the code works, I know its a bit too much to ask but I'd really like to know how this code works so I can make my own code based on yours. Thank you.</span>
<span class="comment-copy">Sure, I'll include comments.</span>
<span class="comment-copy">Thank you very much! the line all_keys = set(d1.keys() + d2.keys())  gives an error   TypeError: unsupported operand type(s) for +: 'dict_keys' and 'dict_keys'</span>
<span class="comment-copy">What are your values for d1 and d2?</span>
<span class="comment-copy">The same values that I put in the question, They havent been changed at all, I tried to run this code on pythontutor and it gave me that error.</span>
<span class="comment-copy">so symmetric difference only catches a value when it is not present in both  the dictionaries but only one ? I wanted any element from both dictionaries which arent present in the other one. Like{5:80} wasnt present in the d2 and i wanted that similarly I wanted {4: 70,  6: 90}  since they werent present in d1 .Any good sources I can study up on these sets and intersection of sets ? Thank you for the answer btw</span>
<span class="comment-copy">@user6820366, the symmetric difference of two sets will contain the elements from either set that are unique to that set. I added some further examples.</span>
<span class="comment-copy">I see, that makes sense, symmetric difference is the union of difference of keys in each dictionaries. Thank you, that was very informative :D</span>
<span class="comment-copy">@user6820366, exactly in a and not in b and vice versa. Just think of symmetric difference as unique to each set.</span>
