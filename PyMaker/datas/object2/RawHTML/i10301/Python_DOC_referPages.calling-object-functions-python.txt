<div class="post-text" itemprop="text">
<p>I'm asking this question because of a discussion on the comment thread of <a href="https://stackoverflow.com/a/11934332/1523776">this answer</a>. I'm 90% of the way to getting my head round it.</p>
<pre><code>In [1]: class A(object):  # class named 'A'
   ...:     def f1(self): pass
   ...:
In [2]: a = A()  # an instance
</code></pre>
<p><code>f1</code> exists in three different forms:</p>
<pre><code>In [3]: a.f1  # a bound method
Out[3]: &lt;bound method a.f1 of &lt;__main__.A object at 0x039BE870&gt;&gt;
In [4]: A.f1  # an unbound method
Out[4]: &lt;unbound method A.f1&gt;
In [5]: a.__dict__['f1']  # doesn't exist
KeyError: 'f1'
In [6]: A.__dict__['f1']  # a function
Out[6]: &lt;function __main__.f1&gt;
</code></pre>
<p>What is the difference between the <em>bound method</em>, <em>unbound method</em> and <em>function</em> objects, all of which are described by f1? How does one call these three objects? How can they be transformed into each other? The <a href="http://docs.python.org/reference/datamodel.html#invoking-descriptors" rel="noreferrer">documentation</a> on this stuff is quite hard to understand.</p>
</div>
<div class="post-text" itemprop="text">
<p>A <em>function</em> is created by the <code>def</code> statement, or by <code>lambda</code>.  Under Python 2, when a function appears within the body of a <code>class</code> statement (or is passed to a <code>type</code> class construction call), it is transformed into an <em>unbound method</em>.  (Python 3 doesn't have unbound methods; see below.)  When a function is accessed on a class instance, it is transformed into a <em>bound method</em>, that automatically supplies the instance to the method as the first <code>self</code> parameter.</p>
<pre><code>def f1(self):
    pass
</code></pre>
<p>Here <code>f1</code> is a <em>function</em>.</p>
<pre><code>class C(object):
    f1 = f1
</code></pre>
<p>Now <code>C.f1</code> is an unbound method.</p>
<pre><code>&gt;&gt;&gt; C.f1
&lt;unbound method C.f1&gt;
&gt;&gt;&gt; C.f1.im_func is f1
True
</code></pre>
<p>We can also use the <code>type</code> class constructor:</p>
<pre><code>&gt;&gt;&gt; C2 = type('C2', (object,), {'f1': f1})
&gt;&gt;&gt; C2.f1
&lt;unbound method C2.f1&gt;
</code></pre>
<p>We can convert <code>f1</code> to an unbound method manually:</p>
<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; types.MethodType(f1, None, C)
&lt;unbound method C.f1&gt;
</code></pre>
<p>Unbound methods are bound by access on a class instance:</p>
<pre><code>&gt;&gt;&gt; C().f1
&lt;bound method C.f1 of &lt;__main__.C object at 0x2abeecf87250&gt;&gt;
</code></pre>
<p>Access is translated into calling through the descriptor protocol:</p>
<pre><code>&gt;&gt;&gt; C.f1.__get__(C(), C)
&lt;bound method C.f1 of &lt;__main__.C object at 0x2abeecf871d0&gt;&gt;
</code></pre>
<p>Combining these:</p>
<pre><code>&gt;&gt;&gt; types.MethodType(f1, None, C).__get__(C(), C)
&lt;bound method C.f1 of &lt;__main__.C object at 0x2abeecf87310&gt;&gt;
</code></pre>
<p>Or directly:</p>
<pre><code>&gt;&gt;&gt; types.MethodType(f1, C(), C)                
&lt;bound method C.f1 of &lt;__main__.C object at 0x2abeecf871d0&gt;&gt;
</code></pre>
<p>The main difference between a function and an unbound method is that the latter knows which class it is bound to; calling or binding an unbound method requires an instance of its class type:</p>
<pre><code>&gt;&gt;&gt; f1(None)
&gt;&gt;&gt; C.f1(None)
TypeError: unbound method f1() must be called with C instance as first argument (got NoneType instance instead)
&gt;&gt;&gt; class D(object): pass
&gt;&gt;&gt; f1.__get__(D(), D)
&lt;bound method D.f1 of &lt;__main__.D object at 0x7f6c98cfe290&gt;&gt;
&gt;&gt;&gt; C.f1.__get__(D(), D)
&lt;unbound method C.f1&gt;
</code></pre>
<p>Since the difference between a function and an unbound method is pretty minimal, Python 3 gets rid of the distinction; under Python 3 accessing a function on a class instance just gives you the function itself:</p>
<pre><code>&gt;&gt;&gt; C.f1
&lt;function f1 at 0x7fdd06c4cd40&gt;
&gt;&gt;&gt; C.f1 is f1
True
</code></pre>
<p>In both Python 2 and Python 3, then, these three are equivalent:</p>
<pre><code>f1(C())
C.f1(C())
C().f1()
</code></pre>
<p>Binding a function to an instance has the effect of fixing its first parameter (conventionally called <code>self</code>) to the instance.  Thus the bound method <code>C().f1</code> is equivalent to either of:</p>
<pre><code>(lamdba *args, **kwargs: f1(C(), *args, **kwargs))
functools.partial(f1, C())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>is quite hard to understand</p>
</blockquote>
<p>Well, it is quite a hard topic, and it has to do with descriptors.</p>
<p>Lets start with function.  Everything is clear here - you just call it, all supplied arguments are passed while executing it:</p>
<pre><code>&gt;&gt;&gt; f = A.__dict__['f1']
&gt;&gt;&gt; f(1)
1
</code></pre>
<p>Regular <code>TypeError</code> is raised in case of any problem with number of parameters:</p>
<pre><code>&gt;&gt;&gt; f()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: f1() takes exactly 1 argument (0 given)
</code></pre>
<p>Now, methods.  Methods are functions with a bit of spices.  Descriptors come in game here.  As described in <a href="http://docs.python.org/reference/datamodel.html" rel="nofollow noreferrer">Data Model</a>, <code>A.f1</code> and <code>A().f1</code> are translated into <code>A.__dict__['f1'].__get__(None, A)</code> and <code>type(a).__dict__['f1'].__get__(a, type(a))</code> respectively.  And results of these <code>__get__</code>'s differ from the raw <code>f1</code> function.  These objects are wrappers around the original <code>f1</code> and contain some additional logic.</p>
<p>In case of <code>unbound method</code> this logic includes a check whether first argument is an instance of <code>A</code>:</p>
<pre><code>&gt;&gt;&gt; f = A.f1
&gt;&gt;&gt; f()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method f1() must be called with A instance as first argument (got nothing instead)
&gt;&gt;&gt; f(1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method f1() must be called with A instance as first argument (got int instance instead) 
</code></pre>
<p>If this check succeeds, it executes original <code>f1</code> with that instance as first argument:</p>
<pre><code>&gt;&gt;&gt; f(A())
&lt;__main__.A object at 0x800f238d0&gt;
</code></pre>
<p>Note, that <code>im_self</code> attribute is <code>None</code>:</p>
<pre><code>&gt;&gt;&gt; f.im_self is None
True
</code></pre>
<p>In case of <code>bound method</code> this logic immediately supplies original <code>f1</code> with an instance of <code>A</code> it was created of (this instance is actually stored in <code>im_self</code> attribute):</p>
<pre><code>&gt;&gt;&gt; f = A().f1
&gt;&gt;&gt; f.im_self
&lt;__main__.A object at 0x800f23950&gt;
&gt;&gt;&gt; f()
&lt;__main__.A object at 0x800f23950&gt;
</code></pre>
<p>So, <code>bound</code> mean that underlying function is bound to some instance. <code>unbound</code> mean that it is still bound, but only to a class.</p>
</div>
<div class="post-text" itemprop="text">
<p>Function object is a callable object created by a function definition. Both bound and unbound methods are callable objects created by a Descriptor called by the dot binary operator. </p>
<p>Bound and unbound method objects have 3 main properties: <code>im_func</code> is the function object defined in the class, <code>im_class</code> is the class, and <code>im_self</code> is the class instance. For unbound methods, <code>im_self</code> is <code>None</code>. </p>
<p>When a bound method is called, it calls <code>im_func</code> with <code>im_self</code> as the first parameter followed its calling parameters. unbound methods calls the underlying function with just its calling parameters.</p>
</div>
<div class="post-text" itemprop="text">
<p>One interesting thing I saw today is that, when I assign a function to a class member, it becomes an unbound method. Such as:</p>
<pre><code>class Test(object):
    @classmethod
    def initialize_class(cls):
        def print_string(self, str):
            print(str)
        # Here if I do print(print_string), I see a function
        cls.print_proc = print_string
        # Here if I do print(cls.print_proc), I see an unbound method; so if I
        # get a Test object o, I can call o.print_proc("Hello")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please refer to the <a href="https://docs.python.org/2/howto/descriptor.html" rel="nofollow noreferrer">Python 2</a> and <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">Python 3</a> documentation for more details.</p>
<p>My interpretation is the following.</p>
<p>Class <code>Function</code> snippets:  </p>
<p>Python 3:</p>
<pre><code>class Function(object):
    . . .
    def __get__(self, obj, objtype=None):
        "Simulate func_descr_get() in Objects/funcobject.c"
        if obj is None:
            return self
        return types.MethodType(self, obj)
</code></pre>
<p>Python 2:  </p>
<pre><code>class Function(object):
    . . .
    def __get__(self, obj, objtype=None):
        "Simulate func_descr_get() in Objects/funcobject.c"
        return types.MethodType(self, obj, objtype)
</code></pre>
<ol>
<li>If a function is called without class or instance, it is a plain function.</li>
<li><p>If a function is called from a class or an instance, its <code>__get__</code> is called to retrieve wrapped function:<br/>
a. <code>B.x</code> is same as <code>B.__dict__['x'].__get__(None, B)</code>.
In Python 3, this returns plain function.
In Python 2, this returns an unbound function.</p>
<p>b. <code>b.x</code> is same as <code>type(b).__dict__['x'].__get__(b, type(b)</code>. This will return a bound method in both Python 2 and Python 3, which means <code>self</code> will be implicitly passed as first argument.</p></li>
</ol>
</div>
<span class="comment-copy">Note that unbound methods are gone in Python 3, <code>C.f1</code> is the same function as <code>C.__dict__['f1']</code>.</span>
<span class="comment-copy">This question's title is misleading as it's not as general as it suggests. Should be named <i>"How does the Python data model handle unbound methods, bound methods and function calls?"</i> <i>"How does one call these three objects?</i>: you don't call unbound methods directly; the Python data model does it for you. The answers don't even touch the main operational difference between <code>str.lower('Foo')</code> and <code>'Foo'.lower()</code> : the former is slower and unnecessary.</span>
<span class="comment-copy">so "bound" means a method is "bound to an instance", "unbound" means it isn't</span>
<span class="comment-copy">This is where the <i>real</i> answer should be revealed: <i>The main difference between a function and an unbound method is in the latter's support for the descriptor protocol; calling an unbound method requires an instance.</i> But what does this mean? A function doesn't support the descriptor protocol? It does, as <code>f1.__get__</code> also works.</span>
<span class="comment-copy">@musiphil yes, that was wrong. The real  difference between a function and an unbound method is that the latter knows which class it is bound to; calling an unbound method requires an instance of its class type.</span>
<span class="comment-copy">This answer could be improved with a comparison of Python 2 and Python 3's models of bound/unbound methods.</span>
<span class="comment-copy">@BenjaminHodgson done, cheers. Perhaps it could do with its own question.</span>
