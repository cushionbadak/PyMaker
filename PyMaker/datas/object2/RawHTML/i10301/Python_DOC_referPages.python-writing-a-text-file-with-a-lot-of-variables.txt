<div class="post-text" itemprop="text">
<p>I need to create (from Python code) a text file with in each line some 50 variables, separated by comm's. I take the canonical way to be
    output.write ("{},{},{},{},{},{},{},{},{},{}, ... \n".format(v,v,v,v,...
But that will be hard to read and difficult to maintain with such a lot of variables. Any other suggestions? I have thought of using the csv module, after all what I am writing is (kind of) a csv file, but thought I'd hear around for other suggestions first.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Using lists</h2>
<p>When reaching a handful of variables that are related to each other, it is common to use a <code>list</code> or a <code>dict</code>. If you create a list:</p>
<pre><code>myrow = []
myrow.append(v1)
...
</code></pre>
<p>This also allows for easier looping over each value. Once you have done that you can easily concatenate it to a string:</p>
<pre><code>f.write(','.join(myrow))
</code></pre>
<p>In case your row might contain any commas (or whatever you use as a delimiter) you must ensure escaping. In this case a CSV modules helps:</p>
<pre><code>import csv
with open('myfile.csv', 'w') as f:
  fw = csv.writer(f)
  fw.writerow(myrow)   # where myrow is a list
</code></pre>
<h2>Using dicts</h2>
<p>Some people prefer to add additional structure, e.g.:</p>
<pre><code>myrow = {}
myrow['speed'] = speed_value
myrow['some_other_row'] = other_value

import csv
with open('myfile.csv', 'w') as f:
  fw = csv.writer(f)
  fw.writerow(myrow)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you can sort of your variables, you could use locals().</p>
<p>for example:</p>
<p>I set three variables:</p>
<pre><code>var1 = 'xx'
var2 = 'yy'
var3 = 'zz'
</code></pre>
<p>and I can sort of them by sorted().</p>
<pre><code>def sort(x):
    if len(x) != 4:
        return '99'
    else:
        return x[-1]

sortVars = sorted(locals(), key=sort)
</code></pre>
<p>Then, using <strong><code>for</code></strong> combination them.</p>
<pre><code>result = ''

for i in sortVars[:3]:
    result += locals()[i]

print(result)
</code></pre>
</div>
<span class="comment-copy">Maybe have a look at <a href="https://docs.scipy.org/doc/numpy/reference/routines.io.html" rel="nofollow noreferrer"><code>numpy</code>'s IO</a>. Or just <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code></a> or <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><code>json</code></a></span>
<span class="comment-copy">If you have a function with 50 variables you should <i>seriously</i> think about reorganizing that code. You should try to combine those variables into groups using lists, tuples, dictionaries, or custom classes. If those 50 items were all in a list or tuple called <code>things</code> you could print them to your file with <code>output.write(','.join([str(u) for u in things]) + '\n')</code>.</span>
<span class="comment-copy">I did not know a dict can be written out as a whole, that looks promising.</span>
<span class="comment-copy">@KarelAdams I mean to write a dict per row. You would probably have a list of dictionaries to represent all rows.</span>
