<div class="post-text" itemprop="text">
<p>I have a file .txt and I want to travel through the words of it. I have a problem, I need to remove the punctuation marks before travelling through the words. I have tried this, but it isn't removing the punctuation marks.</p>
<pre><code>file=open(file_name,"r")
for word in file.read().strip(",;.:- '").split():
     print word
file.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your current method is that <code>.strip()</code> doesn't really do what you want.  It removes leading and trailing characters (and you want to remove ones within the text), and if you want to specify characters in addition to whitespace, they need to be in a list.</p>
<p>Another problem is that there are many more potential punctuation characters (question marks, exclamations, unicode ellipses, em dashes) that wouldn't get filtered out by your list.  Instead, you can use <code>string.punctuation</code> to get a wide range of characters (note that <code>string.punctuation</code> doesn't include some non-English characters, so its viability may depend on the source of your input):</p>
<pre><code>import string
punctuation = set(string.punctuation)
text = ''.join(char for char in text if char not in punctuation)
</code></pre>
<p>An even faster method (shown in <a href="https://stackoverflow.com/questions/265960/best-way-to-strip-punctuation-from-a-string-in-python">other</a> <a href="https://stackoverflow.com/questions/36464160/what-does-python-string-maketrans">answers</a> on SO) uses <code>string.translate()</code> to replace the characters:</p>
<pre><code>import string
text = text.translate(string.maketrans('', ''), string.punctuation)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>strip()</code>only removes characters found at the beginning or end of a string.
So <code>split()</code> first to cut into words, then <code>strip()</code> to remove punctuation.</p>
<pre><code>import string

with open(file_name, "rt") as finput:
    for line in finput:
        for word in line.split():
            print word.strip(string.punctuation)
</code></pre>
<p>Or use a natural language aware library like <code>nltk</code>: <a href="http://www.nltk.org/" rel="nofollow">http://www.nltk.org/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can try using the <code>re</code> module:</p>
<pre><code>import re
with open(file_name) as f:
    for word in re.split('\W+', f.read()):
        print word
</code></pre>
<p>See the <a href="https://docs.python.org/2/library/re.html" rel="nofollow">re documentation</a> for more details.</p>
<p>Edit: In case of non ASCII characters, the previous code ignore them. In that case the following code can help:</p>
<pre><code>import re
with open(file_name) as f:
    for word in re.compile('\W+', re.unicode).split(f.read().decode('utf8')):
        print word
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following code preserves apostrophes and blanks, and could easily be modified to preserve double quotations marks, if desired. It works by using a translation table based on a subclass of the string object. I think  the code is fairly easy to understand. It might be made more efficient if necessary.</p>
<pre><code>class SpecialTable(str):
    def __getitem__(self, chr):
        if chr==32 or chr==39 or 48&lt;=chr&lt;=57 \
            or 65&lt;=chr&lt;=90 or 97&lt;=chr&lt;=122:
            return chr
        else:
            return None

specialTable = SpecialTable()


with open('temp2.txt') as inputText:
    for line in inputText:
        print (line)
        convertedLine=line.translate(specialTable)
        print (convertedLine)
        print (convertedLine.split(' '))
</code></pre>
<p>Here's typical output.</p>
<pre><code>This! is _a_ single (i.e. 1) English sentence that won't cause any trouble, right?

This is a single ie 1 English sentence that won't cause any trouble right
['This', 'is', 'a', 'single', 'ie', '1', 'English', 'sentence', 'that', "won't", 'cause', 'any', 'trouble', 'right']
'nother one.

'nother one
["'nother", 'one']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would remove the punctuation marks with the <code>replace</code> function after storing the words in a list like so:</p>
<pre><code>with open(file_name,"r") as f_r:
    words = []
    for row in f_r:
        words.append(row.split())
punctuation = [',', ';', '.', ':', '-']
words = [x.replace(y, '') for y in punctuation for x in words]
</code></pre>
</div>
<span class="comment-copy">Do you want to remove the punctuation and then write back to the file? Also, that will strip off those characters from the beginning and end of the entire file only, not the individual  words</span>
<span class="comment-copy">What does <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><b><code>strip</code></b></a> do?</span>
<span class="comment-copy"><code>split()</code> first, then <code>strip()</code> (at least that should get you more near to your goal)</span>
<span class="comment-copy">@Farhan.K I donÂ´t want to touch the original file. I only want to get the words separately without punctuation marks</span>
<span class="comment-copy">Then you have to iterate.</span>
<span class="comment-copy">works, but one the worst possible solution in terms of memory efficiency. Also difficult to read.</span>
<span class="comment-copy">Actually all this can be compressed in a single line. Are you seriously having problems reading this ?</span>
