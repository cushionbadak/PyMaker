<div class="post-text" itemprop="text">
<p>I simplified my code to the specific problem I am having.</p>
<pre><code>import re
pattern = re.compile(r'\bword\b')
result = pattern.sub(lambda x: "match", "-word- word")
</code></pre>
<p>I am getting</p>
<pre><code>'-match- match'
</code></pre>
<p>but I want </p>
<pre><code>'-word- match'
</code></pre>
<p>edit:  </p>
<p>Or for the string <code>"word -word-"</code></p>
<p>I want</p>
<pre><code>"match -word-"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>\b</code> basically denotes a word boundary on characters other than <code>[a-zA-Z0-9_]</code> which includes spaces as well. Surround <code>word</code> with negative lookarounds to ensure there is no non-space character after and before it:</p>
<pre><code>re.compile(r'(?&lt;!\S)word(?!\S)')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you need is a negative lookbehind.</p>
<pre><code>pattern = re.compile(r'(?&lt;!-)\bword\b')
result = pattern.sub(lambda x: "match", "-word- word")
</code></pre>
<p>To cite the <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p><code>(?&lt;!...)</code>
      Matches if the current position in the string is not preceded by a match for ....</p>
</blockquote>
<p>So this will only match, if the word-break <code>\b</code> is not preceded with a minus sign <code>-</code>.</p>
<p>If you need this for the end of the string you'll have to use a negative lookahead which will look like this: <code>(?!-)</code>. The complete regular expression will then result in: <code>(?&lt;!-)\bword(?!-)\b</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of word boundaries, you could also match the character before and after the word with a <code>(\s|^)</code> and <code>(\s|$)</code> pattern. </p>
<p><strong>Breakdown</strong>: <code>\s</code> matches every whitespace character, which seems to be what you are trying to achieve, as you are excluding the dashes. The <code>^</code> and <code>$</code> ensure that if the word is either the first or last in the string(ie. no character before or after) those are matched too.</p>
<p>Your code would become something like this:</p>
<pre><code>pattern = re.compile(r'(\s|^)(word)(\s|$)')
result = pattern.sub(r"\1match\3", "-word- word")
</code></pre>
<p>Because this solution uses character classes such as <code>\s</code>, it means that those could be easily replaced or extended. For example if  you wanted your words to be delimited by spaces or commas, your pattern would become something like this: <code>r'(,|\s|^)(word)(,|\s|$)'</code>.</p>
</div>
