<div class="post-text" itemprop="text">
<p>I need to add an escape character to a variable which I'm appending to another string and have it apply its effects. This is what I have:</p>
<pre><code>h1 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']
h2 = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']

h3 = list(itertools.product(h1, h2))
h4 = []

for item in h3:
    h4.append(''.join(item))

temp = r'\x' + str(h4[0]) + '\x7e\x15\x16\x28\xae\xd2\xa6\xab\xf7\x15\x88\x09\xcf\x4f\x3c'
</code></pre>
<p>So if i have \xh I need the character with hex value hh but I can't seem to find anything in python that does this besides \x which I can't seem to use on variables.</p>
<p>Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>int()</code> to convert your hex value to an integer and then <code>chr()</code> to convert that number to a character:</p>
<pre><code>import itertools

hexdigits = "123456789abcdef"

for dig1, dig2 in itertools.product(hexdigits, hexdigits):
    char = chr(int(dig1 + dig2, 16))
    temp = char + '\x7e\x15\x16\x28\xae\xd2\xa6\xab\xf7\x15\x88\x09\xcf\x4f\x3c'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A somewhat faster solution that repeated <code>int</code>/<code>chr</code> calls (assuming you're using more than just the first byte produced) is to create a complete hex string and parse it all at once:</p>
<pre><code>import itertools
import binascii

hexdigits = "123456789abcdef"
completehex = ''.join(map(''.join, itertools.product(hexdigits, repeat=2)))
completebytes = binascii.unhexlify(completehex)
</code></pre>
<p>This will bulk decode all the hexpairs into the raw byte values (the "escapes" you want), so <code>completebytes</code> would be <code>'\x00\x01\x02\x03...\xfd\xfe\xff'</code>.</p>
<p>Of course, for this specific case (if your real problem isn't just generating all possible bytes values in order), you could simplify it even further, because what you're doing is just generating all possible byte values:</p>
<pre><code># Py3
completebytes = bytes(range(256))

# On Py2, bytes is alias for str, so must use bytearray first to accept iterable of int
completebytes = bytes(bytearray(range(256)))
</code></pre>
<p>Or, just for fun, the fastest possible way abusing <code>maketrans</code>:</p>
<pre><code># Py3:
completebytes = bytes.maketrans(b'', b'')  # Add .decode('latin-1') if you really want str

# Py2:
import string
completebytes = string.maketrans('', '')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To answer the OP question, here is a way to convert,  <strong>using the escape notation</strong>, a string containing two hexadecimal digits to a character</p>
<pre><code>h = '11'
temp = eval( r"'\x" + h + "'" )
</code></pre>
<p>It is not, however, the best way to do the conversion (see other answers). I would suggest <code>chr(int(h,16))</code>.  Another way would be to use integers instead of strings <code>h=0x11</code> and <code>temp = chr(h)</code>.</p>
</div>
<span class="comment-copy">Why are you computing all of the products, but only using one value?</span>
<span class="comment-copy">Clarification: You don't really want "escapes". Escapes are for string literals to represent raw byte values (from 0 to 255) or raw Unicode ordinals (for Py2 <code>unicode</code> or Py3 <code>str</code>), you don't need to actually make an escape code to convert ordinals to <code>bytes</code>/<code>str</code> values. The answers are explaining how you skip the escapes and get what you actually want?</span>
<span class="comment-copy"><a href="http://xyproblem.info/" rel="nofollow noreferrer">XY problem</a></span>
<span class="comment-copy">If you actually want to make escaped literals and have Python process them, <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> is better than <code>eval</code> (it avoids <code>eval</code>'s risk of arbitrary code execution), and <code>decode</code>ing with <a href="https://docs.python.org/2/library/codecs.html#python-specific-encodings" rel="nofollow noreferrer">the <code>string_escape</code>/<code>unicode_escape</code> codecs</a> (in Py3, only the latter exists) is better still. Just thought I'd mention these better options to look at before <code>eval</code>; <code>eval</code> should be at the absolute <i>bottom</i> of any hierarchy of options.</span>
<span class="comment-copy">You are right.  That's what I meant when I wrote "It is not the best way [...]" (I probably did not insist enough).  I would also recommend using <code>eval</code> as a last option.  However, the OP question was how to add escape characters in a variable.</span>
