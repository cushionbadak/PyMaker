<div class="post-text" itemprop="text">
<p>Importing Python modules from files is relatively easy with the Python C API with <code>PyImport_Import()</code> however I would need to use functions stored in strings. Is there a way to import python modules from strings (to clarify: there is no file; the code is in a string) or will I have to save the strings as temp files?</p>
</div>
<div class="post-text" itemprop="text">
<p><s>If my understanding is correct, you could use <a href="https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModule" rel="nofollow"><code>PyImport_ImportModule</code></a> which takes a <code>const char* name</code> to specify the module to be imported.</s></p>
<p>Since my understanding was incorrect:</p>
<p>It would generally be better to dump the contents to a <code>.py</code> file and then execute them with <a href="https://docs.python.org/3/c-api/veryhigh.html?highlight=compile#c.PyRun_File" rel="nofollow"><code>PyRun_File</code></a> but, if you have strings and want to work with those <em>I guess</em> you could use <a href="https://docs.python.org/3/c-api/veryhigh.html?highlight=compile#c.Py_CompileString" rel="nofollow"><code>Py_CompileString</code></a> to compile it to a code object and then feed it to <a href="https://docs.python.org/3/c-api/veryhigh.html?highlight=compile#c.PyEval_EvalCode" rel="nofollow"><code>PyEval_EvalCode</code></a> for evaluation.</p>
</div>
<div class="post-text" itemprop="text">
<p>No need to use temp files. Use this code:</p>
<pre><code>const char *MyModuleName = "blah";
const char *MyModuleCode = "print 'Hello world!'";
PyObject *pyModule = PyModule_New(MyModuleName);
// Set properties on the new module object
PyModule_AddStringConstant(pyModule, "__file__", "");
PyObject *localDict = PyModule_GetDict(pyModule);   // Returns a borrowed reference: no need to Py_DECREF() it once we are done
PyObject *builtins = PyEval_GetBuiltins();  // Returns a borrowed reference: no need to Py_DECREF() it once we are done
PyDict_SetItemString(localDict, "__builtins__", builtins);

// Define code in the newly created module
PyObject *pyValue = PyRun_String(MyModuleCode, Py_file_input, localDict, localDict);
if (pyValue == NULL) {
    // Handle error
}
else
    Py_DECREF(pyValue);
</code></pre>
<p>This is code taken from a real commercial application (I've slightly modified it by removing error handling and other non-needed details).
Just set the wanted module name in <code>MyModuleName</code> and the Python code in <code>MyModuleCode</code> and you are done!</p>
</div>
<span class="comment-copy">There is no file; the module contents are stored in a string.</span>
<span class="comment-copy">Hm, you can't dump the contents to a file and then import it? I'm pretty sure there's functions to exec valid python code, could you add some examples?</span>
<span class="comment-copy">My application contains a text editing area where the user can type python code and execute it. To execute the code the program puts in function and calls it.</span>
<span class="comment-copy">Dumping it in a temporary file and then letting python parse, compile and eval it should be way easier. If you need to do manually, the functions I added should help you out.</span>
<span class="comment-copy">Is it possible to replace a function with a nother function with the same name and parameters so the code can be edited?</span>
