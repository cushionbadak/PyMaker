<div class="post-text" itemprop="text">
<p>I've got some code that I've translated from perl into python, but I am having a time trying to figure out this last part. </p>
<pre><code>my $bashcode=&lt;&lt;'__bash__';
. /opt/qip/etc/qiprc;
. /opt/sybase/sybase.sh
perl -mdata::dumper -e 'print dumper \%env';
__bash__
my $var1;
eval qx(bash -c "$bashcode");
</code></pre>
<p>While I understand (a bit) what this is doing, I can't seem to find out how to do this in python. Any help would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your program is generating a script and running it.</p>
<p>A first python approximation is:</p>
<pre><code>import os
script=""". /opt/qip/etc/qiprc;
          . /opt/sybase/sybase.sh
          perl -mdata::dumper -e 'print dumper \%env';
"""
os.system(script)
</code></pre>
<p>As you can see, perl is still being used inside your script which is using the module data::dumper. If you want to use python here, you may need the equivalent module.</p>
</div>
<div class="post-text" itemprop="text">
<p>This part:</p>
<pre><code>my $bashcode=&lt;&lt;'__bash__';
. /opt/qip/etc/qiprc;
. /opt/sybase/sybase.sh
perl -mdata::dumper -e 'print dumper \%env';
__bash__
</code></pre>
<p>Is a here doc and you would do this in Python:</p>
<pre><code>bashcode="""\
. /opt/qip/etc/qiprc;
. /opt/sybase/sybase.sh
perl -mdata::dumper -e 'print dumper \%env';
"""
</code></pre>
<p>You would shell out to Bash using something like <a href="https://docs.python.org/2/library/os.html#os.system" rel="nofollow">os.system</a> or <a href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output" rel="nofollow">subprocess.check_output</a>.</p>
<p>The result of that is then fed to <code>eval</code> to be run as Perl code. </p>
<p>(The wisdom, and the result of the <code>eval</code> is dependant on what these Bash commands produce. It would appear that those commands are producing a Perl script. Obviously, that will not execute in Python. Python also has eval. Use <code>eval</code> in any language cautiously.)</p>
<p>The use of <code>\%env</code> in Perl would seem to indicate access to the environment of the host. However, the actual Perl variable to access the OS environment hash is <code>ENV</code> in uppercase. In Bash, you access the environment with a lowercase <code>env</code></p>
<p>To access the host environment in Python, use <a href="https://docs.python.org/2/library/os.html#process-parameters" rel="nofollow">os.environ</a></p>
</div>
<span class="comment-copy"><code>os.system("bash -c "+bashcode)</code> ?</span>
<span class="comment-copy">Using Perl just to get a dump of the environment seems dubious, unless you specifcally need it in the Perlish format generated by <code>data::dumper</code>.  Just <code>env</code> in the shell should give you the output you want.  Whether you call <code>bash -c "code"</code> from Perl or Python should be immaterial; the only question is really why you are using <i>either</i> when clearly this is a Bash task.  If the task is to import these variables to Python, perhaps look at <a href="https://docs.python.org/3/library/shlex.html" rel="nofollow noreferrer"><code>shlex</code></a>.</span>
<span class="comment-copy">The existing code is using a bash script to call two other scripts to set some environment variables, and then getting that modified environment back to the original perl script by dumping in perl format from the bash script.  You will need to replace that part (perhaps just with <code>env</code> as the third line of the bash script) and use some pythony way to run <code>bash -c ...</code> and capture and parse the output.</span>
<span class="comment-copy">Yes, that's where I'm stuck. The example posted is from the original perl script. Im not using it in the python code, but I do want to figure out how to translate it to the python equivalent</span>
<span class="comment-copy">I suspect that it just dumps your environment variables in a readable manner. Just use the shell command  "env"  and that may be enough.</span>
<span class="comment-copy">note that <code>%env</code> is not the same as <code>%ENV</code>. Although that's what could be in <code>%env</code>, it's probably worth-while checking to ensure that's the case.</span>
<span class="comment-copy">and it should be Data::Dumper and Dumper too</span>
