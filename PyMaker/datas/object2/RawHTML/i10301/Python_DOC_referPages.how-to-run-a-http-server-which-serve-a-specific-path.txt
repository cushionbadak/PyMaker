<div class="post-text" itemprop="text">
<p>this is my Python3 project hiearchy:</p>
<pre><code>projet
  \
  script.py
  web
    \
    index.html
</code></pre>
<p>From <code>script.py</code>, I would like to run a http server which serve the content of the <code>web</code> folder.</p>
<p><a href="https://docs.python.org/3/library/http.server.html" rel="noreferrer">Here</a> is suggested this code to run a simple http server:</p>
<pre><code>import http.server
import socketserver

PORT = 8000
Handler = http.server.SimpleHTTPRequestHandler
httpd = socketserver.TCPServer(("", PORT), Handler)
print("serving at port", PORT)
httpd.serve_forever()
</code></pre>
<p>but this actually serve <code>project</code>, not <code>web</code>. How can I specify the path of the folder I want to serve?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler" rel="noreferrer">https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler</a></p>
<blockquote>
<p>This class serves files from the current directory and below, directly
  mapping the directory structure to HTTP requests.</p>
</blockquote>
<p>So you just need to change the current directory prior to starting the server - see <a href="https://docs.python.org/3/library/os.html#os.chdir" rel="noreferrer"><code>os.chdir</code></a></p>
<p>eg:</p>
<pre><code>import http.server
import socketserver
import os

PORT = 8000

web_dir = os.path.join(os.path.dirname(__file__), 'web')
os.chdir(web_dir)

Handler = http.server.SimpleHTTPRequestHandler
httpd = socketserver.TCPServer(("", PORT), Handler)
print("serving at port", PORT)
httpd.serve_forever()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want serve static file you can do it by running SimpleHTTPServer module using python 2:</p>
<pre><code> python -m SimpleHTTPServer
</code></pre>
<p>Or with python 3:</p>
<pre><code> python3 -m http.server
</code></pre>
<p>This way you do not need to write any script.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just for completeness, here's how you can setup the actual server classes to serve files from an arbitrary directory:</p>
<pre><code>try
    # python 2
    from SimpleHTTPServer import SimpleHTTPRequestHandler
    from BaseHTTPServer import HTTPServer as BaseHTTPServer
except ImportError:
    # python 3
    from http.server import HTTPServer as BaseHTTPServer, SimpleHTTPRequestHandler


class HTTPHandler(SimpleHTTPRequestHandler):
    """This handler uses server.base_path instead of always using os.getcwd()"""
    def translate_path(self, path):
        path = SimpleHTTPRequestHandler.translate_path(self, path)
        relpath = os.path.relpath(path, os.getcwd())
        fullpath = os.path.join(self.server.base_path, relpath)
        return fullpath


class HTTPServer(BaseHTTPServer):
    """The main server, you pass in base_path which is the path you want to serve requests from"""
    def __init__(self, base_path, server_address, RequestHandlerClass=HTTPHandler):
        self.base_path = base_path
        BaseHTTPServer.__init__(self, server_address, RequestHandlerClass)
</code></pre>
<p>Then you can set any arbitrary path in your code:</p>
<pre><code>web_dir = os.path.join(os.path.dirname(__file__), 'web')
httpd = HTTPServer(web_dir, ("", 8000))
httpd.serve_forever()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.7 <a href="https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler" rel="noreferrer"><code>SimpleHTTPRequestHandler</code> can take a <code>directory</code> argument</a>:</p>
<pre><code>import http.server
import socketserver

PORT = 8000
DIRECTORY = "web"


class Handler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=DIRECTORY, **kwargs)


with socketserver.TCPServer(("", PORT), Handler) as httpd:
    print("serving at port", PORT)
    httpd.serve_forever()
</code></pre>
<p>and from the command line:</p>
<pre><code>python -m http.server --directory web
</code></pre>
<hr/>
<p>To get a little crazy... you could make handlers for arbitrary directories:</p>
<pre><code>def handler_from(directory):
    def _init(self, *args, **kwargs):
        return http.server.SimpleHTTPRequestHandler.__init__(self, *args, directory=self.directory, **kwargs)
    return type(f'HandlerFrom&lt;{directory}&gt;',
                (http.server.SimpleHTTPRequestHandler,),
                {'__init__': _init, 'directory': directory})


with socketserver.TCPServer(("", PORT), handler_from("web")) as httpd:
    print("serving at port", PORT)
    httpd.serve_forever()
</code></pre>
</div>
<span class="comment-copy">Thank you! Note: I added try: <code>httpd.serve_forever(); except KeyboardInterrupt: pass; httpd.server_close()</code> to actually close the port.</span>
<span class="comment-copy">Thanks. Its worked. But how can I get the Host address for this? I mean to say that how can I get 0.0.0.0:8000 instead of my local router address 192.168.0.100:8000</span>
<span class="comment-copy">Note that you can also add a port at the end to specify the port of the server.</span>
<span class="comment-copy">further note; you have to have an <code>index.html</code> or <code>index.htm</code> file in the directory you're running the server from in order for it to be served; otherwise you get a directory list.</span>
<span class="comment-copy">OP asks how to run it at specific folder path, not from present working directory.</span>
<span class="comment-copy">There's a directory argument to <code>http.server</code>. So you can do <code>python3 -m http.server -d /path/to/web/dir</code></span>
<span class="comment-copy">works like a charm, Thanks!</span>
