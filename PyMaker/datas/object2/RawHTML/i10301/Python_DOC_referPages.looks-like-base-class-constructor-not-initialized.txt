<div class="post-text" itemprop="text">
<p>I am a newbie in python and trying my hands in oops programming here.
I am initializing base class constructor in derived class , but when trying to print its attribute in base class it gives me error<code>object has no attribute</code></p>
<pre><code>import random
import os
import sys
class Animal:
    __name =""
    def __init__(self,name):
        self.__name = name
    def toString(self):
        return "{} is the animal name".format(self.__name)
    def get_name(self):
        return self.__name
cat = Animal("natasha")
print (cat.toString())
class Dog(Animal):
    __owner = ""
    def __init__(self,name,owner):
        self.__owner= owner
        #Animal.__init__(self,name)
        super(Dog, self).__init__(name)
    def toString(self):
        return "{} is Animal. And owner is: {}".format(self.__name,self.__owner)
rocky = Dog("rocky","Ronchi")
print (rocky.toString())
</code></pre>
<p>What am i doing wrong here ? I tried like calling <code>super.get_name()</code> also which was a getter function instead of <code>self.__name</code> but this also did not work.I am working on python3.4 </p>
</div>
<div class="post-text" itemprop="text">
<p>This is why you must not use double-underscore prefixes for your instance attributes. These are name mangled, and almost never do what you expect.</p>
<p>Just use <code>self.name</code> and <code>self.owner</code> everywhere.</p>
</div>
<div class="post-text" itemprop="text">
<p>Replace your method <code>get_name</code> of <code>Animal</code> with the following code</p>
<pre><code>@property
def name(self):
    return self.__name
</code></pre>
<p>Also remember to update the <code>toString</code> of <code>Dog</code> to</p>
<pre><code>def toString(self):
    return "{} is Animal. And owner is: {}".format(self.name,self.__owner)
</code></pre>
<p>There're some things that I think it's worth point out if you're new to Python:</p>
<ul>
<li>Regarding getters and setters, Python's use the <code>@property</code> and <code>@property.setter</code> decorators instead of the <code>get_something</code>/<code>set_something</code> conventions in language such as Java.</li>
<li>Using <code>toString</code> is also not very Pythonic. First, method names should be in <code>snake_case</code>. Second, define a method with the signature <code>def __str__(self)</code> and return a <code>str</code>. Then you'll be able to do <code>print(rocky)</code> without having to call the <code>__str__</code> as you do for <code>toString</code>.</li>
<li>The proper way to use <code>super</code> in Python 3 is just <code>super()</code>, with no arguments passed (<a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow">https://docs.python.org/3/library/functions.html#super</a>).</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Variables starting with double underscores are said as private. They are mangled so they cannot be used in subclasses. Using CPython 3.5, you can confirm it simply with:</p>
<pre><code>&gt;&gt;&gt; rocky.__dict__
{'_Animal__name': 'rocky', '_Dog__owner': 'Ronchi'}
&gt;&gt;&gt;
</code></pre>
<p>When called from <code>Dog</code> class, <code>self.__name</code> searches a <code>_Dog__name</code> attribute and cannot find it.</p>
<p>There are two common ways do deal with it:</p>
<ul>
<li>do not use private variables but simply hidden ones, that is just use simple underscore prefixes. The variable will not be displayed by help, but will not be mangled and will be accessible from subclasses</li>
<li><p>use the getter from base class:</p>
<pre><code>def toString(self):
    return "{} is Animal. And owner is: {}".format(self.get_name(),self.__owner)
</code></pre>
<p>This correctly gives:</p>
<pre><code>&gt;&gt;&gt; print(rocky.toString())
rocky is Animal. And owner is: Ronchi
&gt;&gt;&gt; 
</code></pre></li>
</ul>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python">The meaning of a single- and a double-underscore before an object name in Python</a></span>
<span class="comment-copy">How do i do it keeping the variable private ? I believe i tried calling super.get_name() instead of self.__name</span>
<span class="comment-copy">Don't. Python doesn't really have any concept of private variables, you shouldn't try to do it.</span>
<span class="comment-copy">But then in that case should not have super,get_name() a getter function written to retrieve value of name actually get me right stuff when i replaced self.__name with super.get_name()?</span>
<span class="comment-copy">@Invictus: no need to call super here. It would make sense only if the method had been overriden in Dog and if you wanted to explicitely call parent's method.</span>
