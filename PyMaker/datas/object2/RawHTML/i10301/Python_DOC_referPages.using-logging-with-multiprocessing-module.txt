<div class="post-text" itemprop="text">
<p>I need to create a single logger that can be used throughout my python package, but some of the functions implement multiprocessing.  I want all those functions to write to the same log file just like everything else.</p>
<p>I know at Python 3.2+ there is a built in way to do this, but I need to back port to Python 2.7.x as well.</p>
<p>Is there any code out there that works well with both multiprocessing and non-multiprocessing functions for logging?</p>
<p>Normally, I would create a log as such:</p>
<pre><code>module = sys.modules['__main__'].__file__
logging.basicConfig(stream=sys.stderr, level=logging.DEBUG,
                format='%(name)s (%(levelname)s): %(message)s')
log = logging.getLogger(module)
fh = RotatingFileHandler(arguments.o, mode='a', maxBytes=2*1024*1024,
                        backupCount=2, encoding=None, delay=0)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %    (message)s')
fh.setFormatter(formatter)
fh.setLevel(logging.DEBUG)
log.addHandler(fh)
</code></pre>
<p>Then the output would write to a single file.  It works great, but when I implement this, this code will create multiple files, which I do not want.</p>
<p>Any ideas?</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>The functionality to do this in Python &gt;= 3.2 (via the <code>QueueHandler</code> and <code>QueueListener</code> classes, as described <a href="http://plumberjack.blogspot.co.uk/2010/09/using-logging-with-multiprocessing.html" rel="nofollow">here</a>) is available for Python 2.7 through the <a href="https://pypi.python.org/pypi/logutils" rel="nofollow"><code>logutils</code></a> project.</p>
</div>
<span class="comment-copy">Are you putting this code inside the usual <code>if __name__ == '__main__':</code> conditional? Remember that <b>everything</b> that isn't an import or function/class definition should go there when using <code>multiprocessing</code>.</span>
<span class="comment-copy">@Bakuriu - I'm doing the log creation at the module level because this is for a python package.</span>
<span class="comment-copy">Thank you for this.  Can this be used to write messages out to a single log file?</span>
<span class="comment-copy">So when I try to pass the log file to multiprocessor, it throws a pickle error, can you provide a simple example of how to use this tool?</span>
<span class="comment-copy">@josh1234 The post I linked to has a working example.</span>
<span class="comment-copy">The example does utilize your package rather some custom code.  I can substitute the QueueHandler class with the one in the package.  How do you use the QueueListener with multiprocessing?</span>
<span class="comment-copy">@josh1234 see the Python logging cookbook for more information: <a href="https://docs.python.org/3/howto/logging-cookbook.html" rel="nofollow noreferrer">docs.python.org/3/howto/logging-cookbook.html</a></span>
