<div class="post-text" itemprop="text">
<p>I'm at the very beginning of learning Python 3. Getting to know the language basics. There is a method to the list data type:</p>
<pre><code>list.append(x)
</code></pre>
<p>and in the tutorial it is said to be equivalent to this expression:</p>
<pre><code>a[len(a):] = [x]
</code></pre>
<p>Can someone please explain this expression? I can't grasp the <strong>len(a):</strong> part. It's a slice right? From the last item to the last? Can't make sense of it.</p>
<p>I'm aware this is very newbie, sorry. I'm determined to learn Python for Blender scripting and the Game Engine, and want to understand well all the constructs.</p>
</div>
<div class="post-text" itemprop="text">
<p>Think back to how slices work: <code>a[beginning:end]</code>.
If you do not supply one of them, then you get all the list from <code>beginning</code> or all the way to <code>end</code>.</p>
<p>What that means is if I ask for <code>a[2:]</code>, I will get the list from the index <code>2</code> all the way to the end of the list and <code>len(a)</code> is an index right after the last element of the array... so <code>a[len(a):]</code> is basically an empty array positioned right after the last element of the array.</p>
<p>Say you have <code>a = [0,1,2]</code>, and you do <code>a[3:] = [3,4,5]</code>, what you're telling Python is that right after <code>[0,1,2</code> and right before <code>]</code>, there should be <code>3,4,5</code>.
Thus <code>a</code> will become <code>[0,1,2,3,4,5]</code> and after that step <code>a[3:]</code> will indeed be equal to <code>[3,4,5]</code> just as you declared.</p>
<p>Edit: as chepner commented, any index greater than or equal to <code>len(a)</code> will work just as well. For instance, <code>a = [0,1,2]</code> and <code>a[42:] = [3,4,5]</code> will also result in <code>a</code> becoming <code>[0,1,2,3,4,5]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>One could generally state that <code>l[len(l):] = [1]</code> is similar to <code>append</code>, <em><a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow">and that is what is stated in the docs</a></em>, but, that is a <em>special case</em> that holds true only when the right hand side <em>has a single element</em>. </p>
<p>In the more <em>general case</em> it is safer to state that it is equivalent to <code>extend</code> for the following reasons:</p>
<p>Append takes an <em>object</em> and appends that to the end; with slice assignment you <strong>extend</strong> a list with the given iterable on the right hand side:</p>
<pre><code>l[len(l):] = [1, 2, 3]
</code></pre>
<p>is equivalent to:</p>
<pre><code>l.extend([1, 2, 3])
</code></pre>
<p>The same argument to <code>append</code> would cause <code>[1, 2, 3]</code> to be appended as  an object at the end of <code>l</code>. In this scenario <code>len(l)</code> is simply used in order for the extending of the list to be performed at the end of <code>l</code>.</p>
<p>Some examples to illustrate their difference:</p>
<pre><code>l = [1, 2]
l[len(l):] = [1, 2]   # l becomes [1, 2, 1, 2]
l.extend([1, 2])      # l becomes [1, 2, 1, 2, 1, 2]
l.append([1, 2])      # l becomes [1, 2, 1, 2, 1, 2, [1, 2]]
</code></pre>
<p>As you note, <code>l.append(&lt;iterable&gt;)</code> doesn't actually append each value in the iterable, it appends the iterable itself.</p>
</div>
<span class="comment-copy">This doesn't quite make sense.  Are you sure it isn't <code>a.append(x)</code></span>
<span class="comment-copy">In some sense <code>a.append(x)</code> is equivalent to the unPythonic <code>a[len(a):] = [x]</code> (the net result is to mutate <code>a</code> the same way). But in another sense they aren't equivalent in that they correspond to very different byte code. The latter is almost certainly much less efficient than the former.</span>
<span class="comment-copy">It's worth noting explicitly that bounds checking doesn't apply to slices; <code>a[x:] == []</code> for <i>all</i> <code>x &gt;= len(a)</code>.</span>
