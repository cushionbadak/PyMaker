<div class="post-text" itemprop="text">
<blockquote>
<p>Arabic and Chinese have their own glyphs for digits.  <code>int</code> works correctly with all the different ways to write numbers.</p>
</blockquote>
<p>I was not able to reproduce the behaviour (python 3.5.0)</p>
<pre><code>&gt;&gt;&gt; from unicodedata import name
&gt;&gt;&gt; name('êπ§')
'RUMI DIGIT FIVE'
&gt;&gt;&gt; int('êπ§')
ValueError: invalid literal for int() with base 10: 'êπ§'
&gt;&gt;&gt; int('‰∫î')  # chinese/japanese number five
ValueError: invalid literal for int() with base 10: '‰∫î'
</code></pre>
<p>Am I doing something wrong?  Or is the claim simply incorrect (<a href="http://www.jjinux.com/2012/03/pycon-advanced-python-tutorials.html" rel="nofollow">source</a>).  </p>
</div>
<div class="post-text" itemprop="text">
<p><code>int</code> does not accept all ways to write numbers. It understands digit characters used for positional numeral systems, but neither <a href="http://std.dkuug.dk/jtc1/sc2/wg2/docs/n3087-1.pdf" rel="nofollow">Rumi</a> nor <a href="https://en.wikipedia.org/wiki/Chinese_numerals#Characters_used_to_represent_numbers" rel="nofollow">Chinese</a> numerals are positional. Neither <code>'‰∫î‰∫î'</code> nor two copies of Rumi numeral 5 would represent 55, so <code>int</code> doesn't accept them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way to convert to numerical values (casting to <code>int</code> does not work in all cases, unless there's a secret setting somewhere)</p>
<pre><code>from unicodedata import numeric
print(numeric('‰∫î'))
</code></pre>
<p>result: 5.0</p>
<p>Someone noted (and was right) that some arabic or other chars worked fine with <code>int</code>, so a routine with a fallback mechanism could be done:</p>
<pre><code>from unicodedata import numeric

def to_integer(s):
    try:
        r = int(s)
    except ValueError:
        r = int(numeric(s))
    return r
</code></pre>
<p>EDIT: as zvone noted, there are fraction characters that return floating point numbers: ex: <code>numeric('\u00be') is 0.75</code> (3/4 char). So rounding to int is not always safe.</p>
<p>EDIT2: the <code>numeric</code> function only accepts one character. So the "conversion to numeric" that could handle most cases without risks of rounding would be</p>
<pre><code>from unicodedata import numeric

def to_float(s):
    try:
        r = float(s)
    except ValueError:
        r = numeric(s)
    return r

print(to_float('€µ€µ'))
print(to_float('‰∫î'))
print(to_float('¬æ'))
</code></pre>
<p>result:</p>
<pre><code>55.0
5.0
0.75
</code></pre>
<p>(I don't want to steal user2357112 excellent explanation, but still wanted to provide a solution that tries to cover all cases)</p>
</div>
<div class="post-text" itemprop="text">
<p>The source is incorrect.</p>
<p>From python doc:</p>
<blockquote>
<p>class int(x, base=10)</p>
<p>Return an integer object constructed from a
  number or string x, or return 0 if no arguments are given. If x is a
  number, return x.__int__(). For floating point numbers, this truncates
  towards zero.</p>
<p>If x is not a number or if base is given, then x must be a string,
  bytes, or bytearray instance <strong>representing an integer literal in radix
  base</strong>. </p>
</blockquote>
<p>And an integer literal is just a string of numbers.</p>
<p>Edit: Was wrong, dug into the source code and found <a href="http://svn.python.org/projects/python/trunk/Python/mystrtoul.c" rel="nofollow">this</a> function is called when python wants to convert a string to int. There is a <strong>py_CHARMASK</strong> which <em>I guess</em> contains the information we need, but I could not find it :/</p>
</div>
<span class="comment-copy">same not working in python 3.4</span>
<span class="comment-copy">on 2.7.5 I get <code>TypeError: must be unicode, not str</code> for <code>name('êπ§')</code></span>
<span class="comment-copy">Might be block-dependent; <code>int('‡•´')</code> (Devanagari) and <code>int('€µ')</code> (Arabic) both evaluate to 5.</span>
<span class="comment-copy"><code>int('Ÿ§Ÿ¢')</code> works (that's the <code>int('\u0664\u0662')</code> example from the Python 3 sources on that page, comment is <code># Arabic/Indic digits</code>).</span>
<span class="comment-copy">A citation for where this is documented would be fantastic. <code>PyLong_FromString</code> in <code>longobject.c</code> appears to receive a normalized string containing ASCII characters and uses a lookup table to determine the numeric value of each digit in [0-9a-zA-Z], but I couldn't quite manage to find where the information that ‡•´ == "5" but ‰∫î != "5" is encoded.</span>
<span class="comment-copy">@chepner: I don't think any of this Python behavior is documented; the <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int</code> documentation</a> says nothing about non-ascii digits and <a href="https://docs.python.org/3/reference/lexical_analysis.html#integers" rel="nofollow noreferrer">links</a> to a page specifying ascii-only input. I might be able to pull up an issue report or something from when they made this change, and it wouldn't be hard to provide citations that Rumi and Chinese numerals are non-positional.</span>
<span class="comment-copy">@chepner: The information about digit values is encoded in <a href="https://hg.python.org/cpython/file/3.5/Objects/unicodectype.c" rel="nofollow noreferrer"><code>Objects/unicodetype_db.h</code></a>, and <a href="https://hg.python.org/cpython/file/3.5/Objects/unicodectype.c" rel="nofollow noreferrer"><code>Objects/unicodectype.c</code></a> contains the code responsible for extracting the encoded information.</span>
<span class="comment-copy">Yeah, I can't seem to find the files <code>makeunicodedata.py</code> uses to generate them, but presumably that's where the information is.</span>
<span class="comment-copy">Actually, <code>numeric('\u00be')</code> is 0.75 (¬æ).</span>
<span class="comment-copy">This doesn't explain why some non-Latin numerals work with <code>int</code>.</span>
<span class="comment-copy">@chepner weird, might have misunderstood s.th.</span>
