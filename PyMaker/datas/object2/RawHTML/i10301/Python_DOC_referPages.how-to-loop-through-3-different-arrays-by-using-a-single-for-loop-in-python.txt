<div class="post-text" itemprop="text">
<p>I have 3 different arrays:</p>
<pre><code>a = (x, y, z)
b = (p, q)
c = (r, s)
</code></pre>
<p>I need to loop through all this arrays. Presently I am using the below method:</p>
<pre><code>for loop_a in a:
  loop_a = some_value

for loop_b in b:
  loop_b = some_value

for loop_c in c:
  loop_c = some_value
</code></pre>
<p>How I can do this using a single for loop and iterate through all the arrays. Functionality inside the loop is same for all. I need an efficient way to do this. I checked many other already answered questions, but couldn't find a fitting answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two ways. The more traditional way is to use an index and a for loop. In this case, it's assumed that all lists are the same length and gets that length from the first item:</p>
<pre><code>for i in range(len(a)):
    a[i] = some_value
    b[i] = some_value
    c[i] = some_value
</code></pre>
<p>Python, however, has a convenience function called <code>zip()</code> that takes multiple lists and iterates them all the same time, returning a tuple.</p>
<pre><code>for values in zip(a, b, c):
    values[0] = some_value # sets value for a
    values[1] = some_value # sets value for b
    values[2] = some_value # sets value for c
</code></pre>
<p>This can be made more readable by unrolling the tuple:</p>
<pre><code>for a_item, b_item, c_item in zip(a, b, c):
    a_item = some_value
    b_item = some_value
    c_item = some_value
</code></pre>
<p>Zipping doesn't need lists to be the same length and will add <code>None</code> for any missing values.</p>
</div>
<div class="post-text" itemprop="text">
<p>If as you mention, the functionality inside the loop is the same for all three arrays, then why not factoring it into a single function and call such function on your three arrays?</p>
<p>For example:</p>
<pre class="lang-py prettyprint-override"><code>def my_functionality(array):
    for loop in array:
        loop = some_value

...

my_functionality(a)
my_functionality(b)
my_functionality(c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not just this?</p>
<pre><code>for array in [a, b, c]:
    for element in array:
        ...
</code></pre>
<p>or</p>
<pre><code>def f (x) :
    ...

for e in a:
    e = f(e)
for e in b:
    e = f(e)
for e in c:
    e = f(e)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def t():
    a = [1, 2, 3]
    b = [4, 5]
    c = [6, 7]
    l1 = [a, b, c]
    someValue = "This should print 4 times"
    for i in l1:
      l1[0] = someValue
      l1[1] = someValue
      l1[2] = someValue

    print(someValue)
    print(l1[0])
    print(l1[1])
    print(l1[2])
t();
</code></pre>
<p>I put the lists in a list and took the index of the new list.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Problem 1: updating a tuple</h2>
<p>You cannot modify a tuple. Tuples are immutable!</p>
<pre><code>&gt;&gt;&gt; a = (1, 2, 3)
&gt;&gt;&gt; a[0] = 11
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object does not support item assignment
</code></pre>
<p>You can either replace the whole tuple, or not use tuples at all:</p>
<p><strong>Option 1:</strong></p>
<pre><code>&gt;&gt;&gt; a = (1, 2, 3)
&gt;&gt;&gt; a = (11, 2, 3)
</code></pre>
<p><strong>Option 2:</strong></p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; a[0] = 11
&gt;&gt;&gt; a
[11, 2, 3]
</code></pre>
<h2>Problem two: updating a list in a loop</h2>
<p>Just one list for now. This does not do anything:</p>
<pre><code>for loop_a in a:
    loop_a = some_value
</code></pre>
<p>Try it:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt;
&gt;&gt;&gt; for loop_a in a:
...     loop_a = 77
...
&gt;&gt;&gt; a
[1, 2, 3]
&gt;&gt;&gt; loop_a
77
</code></pre>
<p>Why? Because <code>for loop_a in a</code> assigns values from <code>a</code> to variable <code>loop_a</code>, then <code>loop_a = some_value</code> assigns some other vaue to <code>loop_a</code>. The only thing ever changed is <code>loop_a</code>.</p>
<p>If you want to change <code>a</code>, you have to access <code>a</code>, for example <code>a[1] = 1</code>.</p>
<pre><code>for i in range(len(a)):
    a[i] = some_value
</code></pre>
<p>This is not very elegant code, but the way the question is written, that is the thing to do for one list.</p>
<h2>Problem 3: multiple lists</h2>
<p>This is easy.</p>
<pre><code>for i in range(number_of_items):
    a[i] = some_value
    b[i] = some_value
    c[i] = some_value
</code></pre>
<p>You just have to decide how to calculate <code>number_of_items</code>. That depends on what you want to do.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also use lambda function (or just normal function) with map function. Map runs the function given to it as first argument for each value of iterable given as second argument and returns iterator.</p>
<p><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow">Python map documentation</a> </p>
<pre><code>list1 = range(1,10)
list2 = range(1,13, 2)
list3 = range(1,15, 3)

some_value = 123

lambda_func = lambda x: some_value*x

list1 = map(lambda_func, list1)
list2 = map(lambda_func, list2)
list3 = map(lambda_func, list3)

print("list1: " + str(list1))
print("list2: " + str(list2))
print("list3: " + str(list3))
</code></pre>
</div>
<span class="comment-copy">You may want to look into the <code>zip</code> builtin or <code>zip_longest</code> from <code>itertools</code>... but it's hard to tell what you are trying to accomplish.</span>
<span class="comment-copy">If they're different sizes you shouldn't try to do this. Each array will need to be looped through a different number of times.</span>
<span class="comment-copy">Are you trying to <i>replace</i> elements of all three arrays with a single value? Note that you can't do that as written, because the "arrays" are tuples, which are immutable. I think this question would really benefit from a minimal working example: a short program that displays the error, which readers can copy and paste into a text file and run without further modification.</span>
<span class="comment-copy">Here lists are of different lengths. So, any other way to do it?</span>
<span class="comment-copy">The first solution will update <code>a</code>, <code>b</code> and <code>c</code>. The others will not. But neither will the code from the question. <code>a_item = some_value</code> will just <i>point</i> variable <code>a_item</code> to the new value, without modifying the old one. Something like <code>a_item.set_value(some_value)</code> would work if <code>a_item</code>has <code>set_value</code>.</span>
