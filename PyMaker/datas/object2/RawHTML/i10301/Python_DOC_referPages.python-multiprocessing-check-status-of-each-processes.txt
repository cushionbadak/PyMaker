<div class="post-text" itemprop="text">
<p>I wonder if it is possible to check how long of each processes take.<br/>
for example, there are four workers and the job should take no more than 10 seconds, but one of worker take more than 10 seconds.Is there way to raise a alert after 10 seconds and before process finish the job. <br/>
My initial thought is using manager, but it seems I have wait till process finished.<br/>
Many thanks. </p>
</div>
<div class="post-text" itemprop="text">
<p>I have found this solution time ago (somewhere here in StackOverflow) and I am very happy with it.</p>
<p>Basically, it uses <a href="https://docs.python.org/3/library/signal.html" rel="nofollow">signal</a> to raise an exception if a process takes more than expected.</p>
<p>All you need to do is to add this class to your code:</p>
<pre><code>import signal

class timeout:

    def __init__(self, seconds=1, error_message='TimeoutError'):
        self.seconds = seconds
        self.error_message = error_message

    def handle_timeout(self, signum, frame):
        raise TimeoutError(self.error_message)

    def __enter__(self):
        signal.signal(signal.SIGALRM, self.handle_timeout)
        signal.alarm(self.seconds)

    def __exit__(self, type, value, traceback):
        signal.alarm(0)
</code></pre>
<p>Here is a general example of how it works:</p>
<pre><code>import time

with timeout(seconds=3, error_message='JobX took too much time'):
    try:
        time.sleep(10) #your job
    except TimeoutError as e:
        print(e)
</code></pre>
<p>In your case, I would add the with statement to the job that your worker need to perform. Then you catch the Exception and you do what you think is best.</p>
<p>Alternatively, you can periodically check if a process is alive:</p>
<pre><code>timeout = 3 #seconds 
start = time.time()
while time.time() - start &lt; timeout:
    if any(proces.is_alive() for proces in processes):
        time.sleep(1)
    else:
        print('All processes done')
else:
    print("Timeout!")
    # do something
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can check whether process is alive after you tried to join it. Don't forget to set timeout otherwise it'll wait until job is finished. </p>
<p>Here is simple example for you </p>
<pre><code>from multiprocessing import Process
import time

def task():
    import time
    time.sleep(5)

procs = []

for x in range(2):
    proc = Process(target=task)
    procs.append(proc)
    proc.start()

time.sleep(2)

for proc in procs:
    proc.join(timeout=0)
    if proc.is_alive():
        print "Job is not finished!"
</code></pre>
</div>
<span class="comment-copy">Unix or Windows?</span>
<span class="comment-copy">@alec_djinn Unix</span>
<span class="comment-copy">It seems to me your context management function will change worker function.It is good, but my expectation is not touching worker function.</span>
<span class="comment-copy">It doesn't change the worker function in term of what it does, although you need to indent the worker function under the with statement. I don't see any particular problem in doing so, maybe in your case is different, if you publish your actual function I can try to make a working implementation of it using <code>with timeout</code>.</span>
