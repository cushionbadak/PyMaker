<div class="post-text" itemprop="text">
<p>I cannot find the method corresponding to <code>not x</code> operator. There is one for <code>and,or,xor</code> tho. Where is it?
<a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow">https://docs.python.org/3/reference/datamodel.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There are no hooks for <code>and</code> or <code>or</code> operators, no (as they short-circuit), and there is no <code>xor</code> operator in Python. The <code>__and__</code> and <code>__or__</code> are for the <a href="https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations" rel="noreferrer"><em>bitwise</em> <code>&amp;</code> and <code>|</code> operators</a>, respectively. The equivalent bitwise operator for <code>not</code> is <code>~</code> (inversion), which is handled by the <a href="https://docs.python.org/3/reference/datamodel.html#object.__invert__" rel="noreferrer"><code>__invert__</code> method</a>, while <a href="https://docs.python.org/3/reference/datamodel.html#object.__xor__" rel="noreferrer"><code>__xor__</code></a> covers the <code>^</code> bitwise operator.</p>
<p><code>not</code> operates on the <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="noreferrer"><em>truth-value</em> of an object</a>. If you have a container, give it a <a href="https://docs.python.org/3/reference/datamodel.html#object.__len__" rel="noreferrer"><code>__len__</code> method</a>, if not give it a <a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="noreferrer"><code>__bool__</code> method</a>. Either one is consulted to determine if an object should be considered 'true'; <code>not</code> inverts the result of that test.</p>
<p>So if <code>__bool__</code> returns <code>True</code> or <code>__len__</code> returns an integer other than <code>0</code>, <code>not</code> will invert that to <code>False</code>, otherwise <code>not</code> produces <code>True</code>. Note that you can't make <code>not</code> return anything else but a boolean value!</p>
<p>From the documentation for <code>__bool__</code>:</p>
<blockquote>
<p><code>__bool__</code><br/>
  Called to implement truth value testing and the built-in operation <code>bool()</code>; should return <code>False</code> or <code>True</code>. When this method is not defined, <code>__len__()</code> is called, if it is defined, and the object is considered true if its result is nonzero. If a class defines neither <code>__len__()</code> nor <code>__bool__()</code>, all its instances are considered true.&gt;</p>
</blockquote>
<p>and for the <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="noreferrer"><code>not</code> expression</a>:</p>
<blockquote>
<p>In the context of Boolean operations, and also when expressions are used by control flow statements, the following values are interpreted as false: <code>False</code>, <code>None</code>, numeric zero of all types, and empty strings and containers (including strings, tuples, lists, dictionaries, sets and frozensets). All other values are interpreted as true. <strong>User-defined objects can customize their truth value by providing a <code>__bool__()</code> method.</strong></p>
<p>The operator <code>not</code> yields <code>True</code> if its argument is false, <code>False</code> otherwise.</p>
</blockquote>
<p><em>bold emphasis mine</em>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>There is one for <code>and,or,xor</code> tho</p>
</blockquote>
<p>The methods you're looking at are for <em>bitwise</em> <code>&amp;</code>, <code>|</code>, and <code>^</code>, not <code>and</code>, <code>or</code>, or <code>xor</code> (which isn't even a Python operator).</p>
<p><code>not</code> cannot be overloaded, just like <code>and</code> and <code>or</code> can't be overloaded. Bitwise <code>~</code> can be overloaded, though; that's <code>__invert__</code>.</p>
<p>If you're in a situation where you wish you could overload <code>not</code>, you'll either have to make do with overloading <code>~</code> instead, or you'll have to write your own <code>logical_not</code> function and use that instead of the <code>not</code> operator.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/operator.html#operator.__not__" rel="nofollow noreferrer"><b>not</b></a> . Return the outcome of not obj. (Note that there is no __not__() method for object instances; only the interpreter core defines this operation. The result is affected by the __nonzero__() and __len__() methods.)</span>
<span class="comment-copy"><code>not</code> can be influenced though, via <code>__bool__</code>. Just return the inverse. <code>and</code> and <code>or</code> can't be overridden because they short-circuit, but that's not the case for <code>not</code>.</span>
<span class="comment-copy">@MartijnPieters: It can be influenced though <code>__bool__</code>, and if what you really want is to control whether your object is considered true or false, <code>__bool__</code> is what you should use, but if you want <code>not</code> to build a <code>Not</code> node of an expression tree or an array of inverted booleans, or if you want <code>not NULL</code> to be <code>NULL</code> for your custom <code>NULL</code> object, <code>__bool__</code> won't help you,</span>
<span class="comment-copy">Nope, as covered in my answer: <i>Note that you can't make <code>not</code> return anything else but a boolean value!</i>.</span>
