<div class="post-text" itemprop="text">
<p>So, what I am trying to achieve here is to take 2 dictionaries, take the values of both dictionaries in the same "spot" and be able to apply any function to it. Here's an example of some pseudo code:</p>
<pre><code>If f(a, b) returns a + b
d1 = {1:30, 2:20, 3:30, 5:80}
d2 = {1:40, 2:50, 3:60, 4:70, 6:90}
then function(d1, d2) returns ({1: 70, 2: 70, 3: 90}, {4: 70, 5: 80, 6: 90})
If f(a, b) returns a &gt; b
d1 = {1:30, 2:20, 3:30}
d2 = {1:40, 2:50, 3:60}
then function(d1, d2) returns ({1: False, 2: False, 3: False}, {})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although there maybe a more efficient way to achieve what you want, i used the information <a href="https://docs.python.org/2/library/sets.html" rel="nofollow">here</a> to create the following functions:</p>
<pre><code>def f1(a,b):
    return a+b

def f2(a,b):
    return a&gt;b

def function2(d1,d2):
    out1 = {}
    out2 = {}
    #use the set operations to take the common keys
    commons = set(set(d1) &amp; set(d2))
    for i in commons:
        out1[i] = d1[i] &gt; d2[i]
    #all the non-common keys go to out2
    for i in d1:
        if i not in commons:
            out2[i] = d1[i]
    for i in d2:
        if i not in commons:
            out2[i] = d2[i]
    return (out1,out2)

def function1(d1,d2):
    out1 = {}
    out2 = {}
    #use the set operations to take the common keys
    commons = set(set(d1) &amp; set(d2))
    for i in commons: out1[i] = f1(d1[i],d2[i])
    #all the non-common keys go to out2
    for i in d1:
        if i not in commons:
            out2[i] = d1[i] 
    for i in d2:
        if i not in commons:
            out2[i] = d2[i]
    return (out1,out2) 

def main():

    d1 = {1:30, 2:20, 3:30, 5:80}
    d2 = {1:40, 2:50, 3:60, 4:70, 6:90}
    d1,d2 = function1(d1,d2)
    for i in d1:print(i,d1[i])
    print('\n')
    for i in d2:print(i,d2[i])

    print('\n\n')

    d1 = {1:30, 2:20, 3:30}
    d2 = {1:40, 2:50, 3:60}
    d1,d2 = function2(d1,d2)
    for i in d1:print(i,d1[i])
    print('\n')
    for i in d2:print(i,d2[i])



if __name__ == '__main__':
    main()
</code></pre>
<p>I tried to make my code as clear as possible.I hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Firstly find the intersection and the unions of the two dictionaries (as sets)
The intersections are used for the first item of the tuple
The differences are used for the second item of the tuple.</p>
<p>The functor is the operation to perform on dictionary items with keys from the intersection values. This is the final result used in the first tuple item.</p>
<p>To get the final results  for the second tuple, find the merged dictionary of d1 and d2, then return only the dictionary key values with keys from the differences</p>
<pre><code>def func(d1, d2, functor):
    s_intersection = set(d1) &amp; set(d2)
    s_difference = set(d1) ^ set(d2)
    merged = d1.copy()
    merged.update(d2)
    return {k: functor(d1[k], d2[k]) for k in s_intersection}, {k: merged[k] for k in s_difference}

d1 = {1:30, 2:20, 3:30, 5:80}
d2 = {1:40, 2:50, 3:60, 4:70, 6:90}
print func(d1, d2, lambda x, y: x+y)

d1 = {1:30, 2:20, 3:30}
d2 = {1:40, 2:50, 3:60}
print func(d1, d2, lambda x, y: x&gt;y)
</code></pre>
</div>
<span class="comment-copy">What exactly is your question? Please check the <a href="http://stackoverflow.com/tour">FAQ</a> and <a href="http://stackoverflow.com/help/how-to-ask">How to Ask</a>.</span>
<span class="comment-copy">Have a look at this post <a href="http://stackoverflow.com/questions/10461531/merge-and-sum-of-two-dictionaries" title="merge and sum of two dictionaries">stackoverflow.com/questions/10461531/â€¦</a></span>
<span class="comment-copy">I'm not sure how to set up a function that will return the values after comparing the 2 dictionaries. Will you have to use a for loop and after use a return function? And I apologize for not asking the question, I am new to this.</span>
<span class="comment-copy">As a hint, you want the set <a href="https://docs.python.org/3/library/stdtypes.html#set.intersection" rel="nofollow noreferrer">intersection</a> of keys to apply the function over and the <a href="https://docs.python.org/3/library/stdtypes.html#set.symmetric_difference" rel="nofollow noreferrer">symmetric difference</a> for the leftovers.</span>
<span class="comment-copy">Man... I am really sorry about this. A and B is basically the 2 dictionaries in a shorter term. So if f(a, b) returns a + b, then it means take a addition function and apply it to both dictionaries.</span>
