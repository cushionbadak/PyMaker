<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2019588/integer-division-compared-to-floored-quotient-why-this-surprising-result">Integer division compared to floored quotient: why this surprising result?</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>In Python <code>2.7</code> and <code>3.x</code>, why does integer division give me a non-correct number when dividing by a number <code>0 &lt; x &lt; 1</code>?</p>
<p>Negative numbers <code>-1 &lt; x &lt; 0</code> even work correctly:</p>
<pre><code>&gt;&gt;&gt; 1//.1
9.0
&gt;&gt;&gt; 1//-.1
-10.0
</code></pre>
<p>I understand that integer division with a negative (or positive) number rounds toward negative infinity, however I would have thought <code>1//.1</code> should result in <code>10.0</code> since <code>1</code> can be divided by <code>.1</code> without remainder.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you’re seeing here is essentially the effect of the difference between “normal” division using <code>/</code> and flooring division with <code>//</code>.</p>
<p>What’s also always important to keep in mind is the <a href="https://stackoverflow.com/q/588004/216074">general issue with floating point arithmetic</a> which is a certain imprecision just because of how they work. In those situations, it’s always good to use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code></a> module to check what’s actually going on. So let’s look at what you are doing here:</p>
<p>First of all, <code>.1</code> is already not precise:</p>
<pre><code>&gt;&gt;&gt; Decimal(.1)
Decimal('0.1000000000000000055511151231257827021181583404541015625')
</code></pre>
<p>So, let’s look at the actual result of the divisions:</p>
<pre><code>&gt;&gt;&gt; Decimal(1) / Decimal(.1)
Decimal('9.999999999999999444888487687')
&gt;&gt;&gt; 1 / .1
10.0
</code></pre>
<p>As you can see, the normal division using <code>/</code> does not exactly give you <code>10</code> with floating point arithmetic. But it’s really close. That’s why, when you use normal floats, you actually get back 10 (since the division imprecision is immediately lost in the imprecision of the number type).</p>
<p>When using flooring division, the result is floored <em>before</em> the imprecision is corrected, so that’s why you get <code>9</code>:</p>
<pre><code>&gt;&gt;&gt; Decimal(1) // Decimal(.1)
Decimal('9')
&gt;&gt;&gt; 1 / .1
10.0
</code></pre>
<p>With negative numbers, the flooring effect is the opposite direction, as explained <a href="https://stackoverflow.com/q/5535206/216074">in that other question</a>:</p>
<pre><code>&gt;&gt;&gt; Decimal(1) / Decimal(-.1)
Decimal('-9.999999999999999444888487687')
&gt;&gt;&gt; 1 / -.1
-10.0
&gt;&gt;&gt; Decimal(1) // Decimal(-.1)
Decimal('-9')
&gt;&gt;&gt; 1 // -.1
-10.0
</code></pre>
</div>
<span class="comment-copy">Floor divison. See this post: <a href="http://stackoverflow.com/questions/5535206/negative-integer-division-surprising-result" title="negative integer division surprising result">stackoverflow.com/questions/5535206/…</a></span>
<span class="comment-copy">floor(1/.1) should be equal to 10 though</span>
<span class="comment-copy">possibly another artifact of <a href="http://stackoverflow.com/questions/588004/is-floating-point-math-broken">Is floating point math broken?</a></span>
<span class="comment-copy">@Gilgamesh That does not explain why <code>1 // 0.1</code> is not the same as <code>floor(1 / 0.1)</code></span>
<span class="comment-copy">@Hurkyl There is no need to <i>"expect"</i> anything, but if <code>1//0.1 != math.floor(1/0.1)</code>, this question deserves an answer which says why (or at least be a duplicate of a question which explains that detail).</span>
<span class="comment-copy">Another good example is <code>3 // -.3</code>, where it "<b>fails</b>" with a negative number, resulting in <code>-11.0</code>.</span>
<span class="comment-copy">note: <code>Decimal("1") // Decimal("0.1")</code> Gives <code>Decimal("10")</code> since it can represent decimal numbers exactly. Decimal preserves the given numbers exactly, so giving a string to decimal may be more precise for human input</span>
