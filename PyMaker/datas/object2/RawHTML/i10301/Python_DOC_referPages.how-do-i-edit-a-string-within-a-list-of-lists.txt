<div class="post-text" itemprop="text">
<p>I have a list of lists each with 11 strings. The last string is an 8-digit code where I need to retain the first three digits but delete the last five.</p>
<p>I'm pretty sure this can be done using indexing and slicing. An example using lists with 5 entries instead of 11.</p>
<p>Example = </p>
<pre><code>[['a','b','c','d','2020BG1C'],['e','f','g','h','1997AF33'],['i','j','k','l', '1566IL2L']]
</code></pre>
<p>Desired_Outcome = </p>
<pre><code>[['a','b','c','d','202'],['e','f','g','h','199'],['i','j','k','l', '156']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't edit a string; they are <em>immutable</em>.</p>
<p>But you can slice off the unwanted parts (which creates a new string) from the last item of each <em>sublist</em>:</p>
<pre><code>lst = [['a','b','c','d','2020BG1C'],['e','f','g','h','1997AF33'],['i','j','k','l', '1566IL2L']]
for sublist in lst:
     sublist[-1] = sublist[-1][:4]

print(lst)
# [['a', 'b', 'c', 'd', '2020'], ['e', 'f', 'g', 'h', '1997'], ['i', 'j', 'k', 'l', '1566']]
</code></pre>
<p>Some reference:</p>
<ol>
<li><a href="https://stackoverflow.com/questions/509211/explain-pythons-slice-notation">Explain Python's slice notation</a></li>
<li><a href="https://stackoverflow.com/questions/9097994/arent-python-strings-immutable">Aren't Python strings immutable?</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">nested list comprehension</a> to achieve that </p>
<pre><code>&gt;&gt;&gt; l = [['a','b','c','d','2020BG1C'],['e','f','g','h','1997AF33'],['i','j','k','l', '1566IL2L']]
&gt;&gt;&gt; [j[:-1]+[j[-1][:4]] for j in l]
[['a', 'b', 'c', 'd', '2020'], ['e', 'f', 'g', 'h', '1997'], ['i', 'j', 'k', 'l', '1566']]
</code></pre>
<p>The idea here is that you grab only the first 4 characters in the last element. </p>
<p>here <code>j[:-1]</code> first takes the all the elements of the list except the last. <code>j[-1]</code> is the last element and <code>j[-1][:4]]</code> will grab the first 4 characters of the last element. </p>
<p>See <a href="https://stackoverflow.com/questions/34835951/what-does-list-comprehension-in-python-mean-how-does-it-work-and-how-can-i-us">What does "list comprehension" mean? How does it work and how can I use it?</a> and <a href="https://stackoverflow.com/questions/509211/explain-pythons-slice-notation">Explain Python's slice notation</a> for more details about them. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension.</p>
<pre><code>example = [['a','b','c','d','2020BG1C'],['e','f','g','h','1997AF33'],['i','j','k','l', '1566IL2L']]
desired_outcome = [sublist[:-1] + [sublist[-1][:4]] for sublist in example]
</code></pre>
<p>And just to your knowledge, the string is an <strong>immutable</strong> type. It can not be edited. Every time you do something with it, you are creating a <strong>new</strong> string.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can edit it place with a for loop and slicing</p>
<pre><code>&gt;&gt;&gt; l = [['a','b','c','d','2020BG1C'],['e','f','g','h','1997AF33'],['i','j','k','l', '1566IL2L']]
&gt;&gt;&gt; for sublist in l:
...     sublist[4] = sublist[4][:4]
... 
&gt;&gt;&gt; l
[['a', 'b', 'c', 'd', '2020'], ['e', 'f', 'g', 'h', '1997'], ['i', 'j', 'k', 'l', '1566']]
&gt;&gt;&gt; 
</code></pre>
<p>Note: In your 5 element example, the final element can be indexed as <code>sublist[4]</code> or <code>sublist[-1]</code> (the last element, counting backwards). Both work.... but its best to be consistent throughout the program.</p>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively, you may also achieve the same using <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow"><code>map()</code></a> as:</p>
<pre><code>&gt;&gt;&gt; example = [['a','b','c','d','2020BG1C'],['e','f','g','h','1997AF33'],['i','j','k','l', '1566IL2L']]
&gt;&gt;&gt; map(lambda x: x[:3]+[x[4][:-4]], example)
[['a', 'b', 'c', '2020'], ['e', 'f', 'g', '1997'], ['i', 'j', 'k', '1566']]
</code></pre>
<p>Above solution will work on Python 2.7. In case you are using Python 3.x, you need to explicitly add a  <code>list()</code> call to <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> as:</p>
<pre><code>list(map(lambda x: x[:3]+[x[4][:-4]], example))
</code></pre>
<p>Check Blog on <a href="http://www.python-course.eu/lambda.php" rel="nofollow">Lambda, filter, reduce and map</a> to know how <code>lambda</code> functions and <code>map()</code> works in Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually its very simple,
(1) Loop through outer array.
(2) Get the last element of each sub array.
(3) slice it using x[:-5]</p>
</div>
<span class="comment-copy">It looks like you want us to write some code for you. While many users are willing to produce code for a coder in distress, they usually only help when the poster has already tried to solve the problem on their own. A good way to demonstrate this effort is to include the code you've written so far, example input (if there is any), the expected output, and the output you actually get (output, tracebacks, etc.). The more detail you provide, the more answers you are likely to receive. Check the <a href="http://stackoverflow.com/tour">FAQ</a> and <a href="http://stackoverflow.com/questions/how-to-ask">How to Ask</a>.</span>
<span class="comment-copy">Also, you say you want "to retain the first three digits but delete the last five" and yet your example shows that the first <i>four</i> characters are retained and the last <i>four</i> deleted.</span>
<span class="comment-copy">I appreciate that but everything I'd written just seemed like such garbage that it wasn't worth sharing. Will add in future, thanks!</span>
<span class="comment-copy">He says there are 11 string in the list, but just 5 in the question but its the last one we need, since we're not sure of the index i think using <code>sublist[-1]</code> instead of <code>sublist[4]</code> is preferable for the answer.</span>
<span class="comment-copy">@Abhishek - yes, that's likely a good way to solve the problem. In a well-defined dataset, the real index and -1 both work equally well so I think I'll keep my example with your comment noted.</span>
<span class="comment-copy">@BhargavRao I'm remaining true to the example man!</span>
<span class="comment-copy">The question's been asked in a really confusing way, so it doesn't matter, the code works just fine.</span>
<span class="comment-copy">Edited a bit, Do rollback if you feel that it is unnecessary. Thanks</span>
<span class="comment-copy">@BhargavRao: It is fine, in fact more specific to what I intended to say :)</span>
