<div class="post-text" itemprop="text">
<p>I want to find create lists of anagrams from a list of words. Should I use another loop in my code or recursion?</p>
<pre><code>some_list = ['bad', 'app', 'sad', 'mad', 'dab','pge', 'bda', 'ppa', 'das', 'dba']

new_list = [some_list[0]]
i = 0
while i+1 &lt; len(some_list):
    if (''.join(sorted(some_list[0]))) == (''.join(sorted(some_list[i+1]))):
        new_list.append(some_list[i+1])
        i = i+1
    else:
        i = i+1

print(new_list)
</code></pre>
<hr/>
<ul>
<li>My output is <code>['bad', 'dab', 'bda', 'dba']</code>. But I also want more lists
of other anagrams from <code>some_list</code>.</li>
</ul>
<p>I want the output to be: 
 - <code>['app', 'ppa']</code>
 - <code>['bad', 'dab', 'bda', 'dba']</code>
 - <code>['sad', 'das']</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I recommend you write Python, not Java or whatever other language you're emulating there. Here's your core code in Python, with normal looping and without all the unnecessary stuff:</p>
<pre><code>new_list = [some_list[0]]
for word in some_list[1:]:
    if sorted(some_list[0]) == sorted(word):
        new_list.append(word)
</code></pre>
<p>I don't see use for recursion, but yes, you could wrap an outer loop around this to find the other anagram groups.</p>
<hr/>
<p>Though this is how I'd do it, using the helpful <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow">itertools.groupby</a>:</p>
<pre><code>for _, group in groupby(sorted(some_list, key=sorted), sorted):
    group = list(group)
    if len(group) &gt; 1:
        print(group)
</code></pre>
<p>That prints:</p>
<pre><code>['bad', 'dab', 'bda', 'dba']
['sad', 'das']
['app', 'ppa']
</code></pre>
<hr/>
<p>Alternative solution for the changed question with sorting the groups:</p>
<pre><code>groups = (list(group) for _, group in groupby(sorted(some_list, key=sorted), sorted))
print([group for group in sorted(groups) if len(group) &gt; 1])
</code></pre>
<p>Output:</p>
<pre><code>[['app', 'ppa'], ['bad', 'dab', 'bda', 'dba'], ['sad', 'das']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is that you loop one time over your list ,since you need to loop based on all of the words.</p>
<p>But i suggest another way for this task,you can use <code>itertools.groupby</code> and sorted function using <code>operator.itemgetter</code> :</p>
<pre><code>some_list = ['bad', 'app', 'sad', 'mad', 'dab','pge', 'bda', 'ppa', 'das', 'dba']

from operator import itemgetter
from itertools import groupby 
s=sorted([(i,''.join(sorted(j))) for i,j in enumerate(some_list)],key=itemgetter(1))
inds= [zip(*g)[0] for _,g in groupby(s,itemgetter(1))]
print [itemgetter(*i)(some_list) for i in inds]
</code></pre>
<p>Result :</p>
<pre><code>[('bad', 'dab', 'bda', 'dba'), 'mad', ('sad', 'das'), ('app', 'ppa'), 'pge']
</code></pre>
<p>All that i have done here is creating a list of sorted words with those index using <code>sorted</code> and <code>enumerate</code> :</p>
<pre><code>sorted([(i,''.join(sorted(j))) for i,j in enumerate(some_list)],key=itemgetter(1))
[(0, 'abd'), (4, 'abd'), (6, 'abd'), (9, 'abd'), (3, 'adm'), (2, 'ads'), (8, 'ads'), (1, 'app'), (7, 'app'), (5, 'egp')]
</code></pre>
<p>then we need to grouping this pairs based on the second element and get the first element (indices) so we will have the following list of tuples :</p>
<pre><code>[(0, 4, 6, 9), (3,), (2, 8), (1, 7), (5,)]
</code></pre>
<p>that each tuple is contain the indices of the words that those sorted representations are same.</p>
<p>and at last all you need is picking up the elements of the main list based  on the preceding indices :</p>
<pre><code>[itemgetter(*i)(some_list) for i in inds]
[('bad', 'dab', 'bda', 'dba'), 'mad', ('sad', 'das'), ('app', 'ppa'), 'pge']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>1) Create a function <code>anagrams(word)</code> that is returning a list of anagrams for a single word as your code does. <br/>
2) <code>map</code> the function over your list of words.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution:</p>
<pre><code>from itertools import groupby
some_list = ['bad', 'app', 'sad', 'mad', 'dab','pge', 'bda', 'ppa', 'das', 'dba']
some_list_ordered = map( lambda x : "".join( sorted( x) ), some_list )
some_lists = sorted(zip( some_list_ordered, some_list ) )
anagrams = filter( lambda x : len( x ) &gt; 1, [ zip(*v)[1]  for k,v in groupby( some_lists, lambda x : x[0] ) ] )    

for a in anagrams:
    print a

#('bad', 'bda', 'dab', 'dba')
#('das', 'sad')
#('app', 'ppa')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The natural way to do this if you can afford the memory overhead of an additional dictionary seems to me to be:</p>
<pre><code>words = ['bad', 'app', 'sad', 'mad', 'dab','pge', 'bda', 'ppa', 'das', 'dba']

anagrams = {}
for word in words:
    sword = ''.join(sorted(word))
    try:
        anagrams[sword].append(word)
    except KeyError:
        anagrams[sword] = [word]

anagrams_list = [v for v in anagrams.values() if len(v) &gt; 1]
print anagrams_list
</code></pre>
<p>Output:</p>
<pre><code>[['app', 'ppa'], ['bad', 'dab', 'bda', 'dba'], ['sad', 'das']]
</code></pre>
<p>EDIT: As mentioned in the comment below you can replace the <code>try...except</code> block with the <code>dict</code> method <code>setdefault</code> if the syntax doesn't bother you:</p>
<pre><code>words = ['bad', 'app', 'sad', 'mad', 'dab','pge', 'bda', 'ppa', 'das', 'dba']

anagrams = {}
for word in words:
    sword = ''.join(sorted(word))
    anagrams.setdefault(sword, []).append(word)

anagrams_list = [v for v in anagrams.values() if len(v) &gt; 1]
print anagrams_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can group the words in a dict, using the sorted word as the key, filtering out the words that values that don't have at least two elements, using an <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow">OrderedDict</a> to keep order:</p>
<pre><code>some_list = ['bad', 'app', 'sad', 'mad', 'dab','pge', 'bda', 'ppa', 'das', 'dba']


from collections import OrderedDict

od = OrderedDict()
for ele in some_list:
    srt = "".join(sorted(ele))
    od.setdefault(srt,[]).append(ele)

print(filter(lambda x: len(x) &gt; 1, od.values()))


[['bad', 'dab', 'bda', 'dba'], ['app', 'ppa'], ['sad', 'das']]
</code></pre>
<p>Or using a loop and appending to a list, using a temp list to gather common words:</p>
<pre><code>new_list = []
from collections import OrderedDict
for ele in OrderedDict.fromkeys("".join(sorted(ele)) for ele in some_list):
    temp = []
    for s in some_list:
        if ele == ''.join(sorted(s)):
            temp.append(s)
    if len(temp) &gt; 1:
        new_list.append(temp)
</code></pre>
<p>If order does not matter a <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow">defaultdict</a> would be more efficient:</p>
<pre><code>from collections import defaultdict

d = defaultdict(list)
for ele in some_list:
    d[''.join(sorted(ele))].append(ele)

print(filter(lambda x: len(x) &gt; 1, d.values()))
[['app', 'ppa'], ['bad', 'dab', 'bda', 'dba'], ['sad', 'das']]
</code></pre>
</div>
<span class="comment-copy">Remember to accept an answer! <a href="http://i.stack.imgur.com/uqJeW.png" rel="nofollow noreferrer">i.stack.imgur.com/uqJeW.png</a></span>
<span class="comment-copy">When it prints, it does not print the lists in an alphabetical order, i.e;  ['app', 'ppa'] ['bad', 'dab', 'bda', 'dba'] ['sad', 'das']</span>
<span class="comment-copy">Yes. So? Your <i>"I want the output to be:"</i> part in your question doesn't have it sorted.</span>
<span class="comment-copy">Question edited.</span>
<span class="comment-copy">In general, not a good thing. You're invalidating the valid already posted answers that way. And are you sure you have the final version now? You have 'dab' before 'bda' in the second group.</span>
<span class="comment-copy">Yes. The lists only need to be printed in alphabetical order.</span>
<span class="comment-copy">That looks pretty complicated...</span>
<span class="comment-copy">@StefanPochmann No its not, as you can understand from explanation the logic is simple!</span>
<span class="comment-copy">I mean complicated in the sense that you're doing a lot of stuff that you don't need to. Going to indexes and back for no reason.</span>
<span class="comment-copy">@StefanPochmann Yeah i dont need to sort and then grub the indices i could simply used <code>sorted</code> as the key,i see you code the part <code>key=sorted</code> is what i missed and you got my vote for that!</span>
<span class="comment-copy">What do you mean by 'map'?</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#map</a></span>
<span class="comment-copy">Do you know <code>list.setdefault</code>? That could replace your whole try/except part.</span>
<span class="comment-copy">@StefanPochmann I find the syntax for this a bit upsetting because even though it's called <code>setdefault</code> you're actually <i>getting</i> something, but I've given an alternative.</span>
<span class="comment-copy">Yeah, originally I also found it a bit confusing, but I got used to it :-). Though I still mostly use defaultdict instead, unless I have a good reason not to.</span>
