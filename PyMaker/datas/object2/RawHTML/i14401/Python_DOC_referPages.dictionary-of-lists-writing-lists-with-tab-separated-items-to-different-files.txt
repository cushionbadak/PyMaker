<div class="post-text" itemprop="text">
<p>I have a dictionary that contains lists; the keys are based on the first item in each list. Using a fun random data set, the dictionary was constructed as follows:</p>
<pre><code>import collections

rand_ls = [["A","bb","cc"],["B","dd","ee"],["A","ff","gg"],["B","hh","ii"]]
d = collections.defaultdict(list)

for item in rand_ls:
    d[item[0]].append(item)

print(dict(d))
    # {'A': [['A', 'bb', 'cc'], ['A', 'ff', 'gg']], 'B': [['B', 'dd', 'ee'], ['B', 'hh', 'ii']]}
</code></pre>
<p>I want to write the lists held in each key into separate .csv files, one for each key. The closest solution I have found was detailed <a href="https://stackoverflow.com/questions/16956523/write-key-to-separate-csv-based-on-value-in-dictionary">here</a>, but I can't get it to work. The format I am after:</p>
<pre><code>letterA.csv
    A    bb    cc
    A    ff    gg

letterB.csv
    B    dd    ee
    B    hh    ii
</code></pre>
<p>NOTE: <strong>letter{}.csv</strong> is the unique file for each key; each list (within each key) is on a separate line, and each item within a list is separated by a tab.</p>
<p>The code I have is this:</p>
<pre><code>for key,lists in d.items():
    with open("letter{}.csv".format(key), "w") as f:
       f.writelines(lists, delimiter='\t')
</code></pre>
<p>It keeps throwing up the error: <strong>"TypeError: writelines() takes no keyword arguments"</strong>. I've done some reading and I know writelines() takes a sequence of strings, so not quite sure what is missing.</p>
<p>Based on what I have read elsewhere, the code <strong>open("letter{}.csv".format(key), "w")</strong> should create a unique file for each key, and the subsequent line should direct the lists to be written to the appropriate file.</p>
</div>
<div class="post-text" itemprop="text">
<p>The normal <code>file.write</code> takes no keywords args, you are probably getting confused with and should should use the <a href="https://docs.python.org/2/library/csv.html" rel="nofollow">csv module</a> which does take the <code>delimiter</code> argument, iterating over <code>d.items</code>, passing the <code>k</code> key to <code>str.format</code> and the list of lists to <code>csv.writer.writerows</code>.</p>
<pre><code>import csv

for k, rows in d.items():
    with open("letter_{}.csv".format(k), "w") as out:
        wr = csv.writer(out,delimiter='\t')
        wr.writerows(rows)
</code></pre>
<p>LetterA.csv:</p>
<pre><code>A   bb  cc
A   ff  gg
</code></pre>
<p>LetterB.csv:</p>
<pre><code>B   dd  ee
B   hh  ii
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Read the error that you're receiving: <code>writelines() takes no keyword arguments</code>. Do you see keyword arguments in your call to <code>writelines</code>?</p>
<p>You need to join your strings together with <code>\t</code> before passing them to <code>writelines</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/io.html#io.IOBase.writelines" rel="nofollow">io.IOBase.writelines</a>:</p>
<blockquote>
<p>Write a list of lines to the stream. Line separators are not added, so it is usual for each of the lines provided to have a line separator at the end.</p>
</blockquote>
<pre><code>f.writelines(["{}\n".format('\t'.join(list_)) for list_ in lists])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>for key,lists in d.items():
    with open("letter{}.csv".format(key), "w") as f:
       f.write('\t'.join(lists))
</code></pre>
<p>As the error message you are getting indicates, <code>writelines</code> does not take keyword arguments (such as <code>delimiter</code>). Since you are not writing a list to the file, but instead a string created from a list joined by a tab character, you don't even need <code>writelines</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The error message is telling you that it doesn't accept keyword arguments, so if you jump to your <code>writelines()</code> call, the first issue is that you're passing it a keyword param when it can't accept it. Specfically: <code>f.writelines(lists,</code><strong>delimiter='\t'</strong>)</p>
<p><code>writelines</code> will accept a list of strings to be written to the file but you'll need to deal with all the formatting yourself if you go this route. If you wanted that I suspect you want: </p>
<pre><code>for key,lists in d.items():
    with open("letter{}.csv".format(key), "w") as f:
       f.writelines('\n'.join(['\t'.join(x) for x in l]))
</code></pre>
<p>Since you have a list of lists, the inner list comprehension just glues things within each list by tabs, and then the outer loop glues all of those together with end of line characters.</p>
<p>However just judging from the pattern and the question tags - have you considered using the CSV module, and it's associated writer method? (<a href="https://docs.python.org/2/library/csv.html" rel="nofollow">https://docs.python.org/2/library/csv.html</a>)</p>
</div>
<span class="comment-copy">I guess the <code>writelines()</code> method is expecting string instead of list, for converting list to string you can use <code>"\t".join(lst)</code></span>
<span class="comment-copy">Cheers @Padraic! Works a charms. :D</span>
<span class="comment-copy">No prob. The csv module is ideal for what you want to do.</span>
<span class="comment-copy">Thank you also @Sir_FZ!</span>
<span class="comment-copy">You're welcome @jat but please make sure you close this question by accepting one of the answers.</span>
<span class="comment-copy"><code>f.writelines</code> expects a list of lines.</span>
<span class="comment-copy">@Sir_FZ f.writelines expects to get a list of things to write to a file, which it calls a 'line'. Sure, me calling it a string is probably a bit glib, but in OP's case it's a tab-delimited, newline terminated string is it not?</span>
<span class="comment-copy">yes you're right but since the documentation states it accepts a <b>list</b> of lines then it makes more sense to pass a list instead of a string, for the sake of compatibility.</span>
<span class="comment-copy">@Sir_FZ Yep, fair enough, my bad on bashing something together roughly. I'd also pass in a list of things but I'd also just go straight for the CSV module since it's a better fit for the problem.</span>
