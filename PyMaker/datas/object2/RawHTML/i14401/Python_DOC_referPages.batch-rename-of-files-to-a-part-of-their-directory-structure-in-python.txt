<div class="post-text" itemprop="text">
<p>First off, I'm new to Python and programming in general. The files I wish to rename are located in this format where <strong>SampleID</strong> is a unique ID: </p>
<p>/home/MattXD/Documents/Processed/Untitled Folder/<strong>SampleID</strong>/subfolder/report.pdf</p>
<p>I want to rename all report.pdf files to SampleID.pdf</p>
<pre><code>import os, sys, shutil

topdir = '/home/MattXD/Documents/Processed/Untitled Folder/'
exten = 'report.pdf'

for dirpath, dirnames, files in os.walk(topdir):
    for name in files:
        if name.lower().endswith(exten):
            oldfile = os.path.join(dirpath, name)
            newname = oldfile.split('/')[6]
            print name
            print newname
            shutil.copy2(oldfile, '/home/MattXD/Documents/Processed/Untitled Folder/%s' % newname)
</code></pre>
<p>I feel I'm close to being on the right track as I can see from <code>print name</code> and <code>print newname</code> that I am storing the correct file in <code>oldfile</code> and the new name that I want to use in <code>newname</code>. I cannot seem to rename the file though! </p>
<p>I think I am misusing shutil.copy2 and there may be an issue with my for loop as I get an error that the file names (report.pdf and report.pdf) are identical (which they are). Thanks for reading.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, actually there's a <a href="https://docs.python.org/3/library/os.html#os.rename" rel="nofollow"><code>os.rename</code></a> function:</p>
<blockquote>
<p><code>os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)</code></p>
<p>Rename the file or directory src to dst. If dst is a directory, OSError will be raised. On Unix, if dst exists and is a file, it will be replaced silently if the user has permission. The operation may fail on some Unix flavors if src and dst are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement). On Windows, if dst already exists, OSError will be raised even if it is a file.</p>
<p>This function can support specifying src_dir_fd and/or dst_dir_fd to supply paths relative to directory descriptors.</p>
<p>If you want cross-platform overwriting of the destination, use replace().</p>
<p>Availability: Unix, Windows.</p>
</blockquote>
<p>If you insist on using <code>shutil</code>, <a href="https://docs.python.org/3/library/shutil.html?highlight=shutil.move#shutil.move" rel="nofollow"><code>shutil.move</code></a> is your choice.</p>
</div>
<span class="comment-copy">Is the file getting copied and just not renaming?</span>
<span class="comment-copy">Thanks for the reply! I forgot that detail.The file is getting copied but not renamed. Edit: I should also specify that all of the file names are stored in <code>oldfile</code> and all of the new names I want to use are stored in <code>newname</code>.</span>
<span class="comment-copy">For what it's worth I don't think <code>shutil.copy2</code> is the problem - it is totally capable of renaming files. I just tried it out myself. The problem is likely elsewhere in your code. Sorry I can't be of more use!</span>
<span class="comment-copy">Thanks Rory! I ended up using both shutil.copy2 and os.rename and it is currently working. The reason being is that I wanted to leave a copy of the original file in tact. I modified the shutil.copy2 line and added os.rename as follows <code>shutil.copy2(oldfile, '/home/MattXD/Documents/Processed/Untitled Folder/')             os.rename('/home/MattXD/Documents/Processed/Untitled Folder/report.pdf', newname)</code> It now does what I want but moves the renamed folder to my home directory as I couldn't figure out the <code>dst_dir_fd=</code> option.</span>
