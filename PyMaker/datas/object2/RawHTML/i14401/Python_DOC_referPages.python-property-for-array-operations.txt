<div class="post-text" itemprop="text">
<p>When using Python properties (setters and getters), usually following is used:</p>
<pre><code>class MyClass(object):
    ...        
    @property
    def my_attr(self):
        ...

    @my_attr.setter
    def my_attr(self, value):
        ... 
</code></pre>
<p>However, is there any similar approach for appending / removing arrays? For example, in a bi-directional relationship between two objects, when removing object A, it would be nice to dereference the relationship to A in object B. I know that SQLAlchemy has implemeneted a similar function.</p>
<p>I also know that I can implement methods like</p>
<pre><code>def add_element_to_some_array(element):
   some_array.append(element)
   element.some_parent(self)
</code></pre>
<p>but I would prefer to do it like "properties" in Python.. do you know some way? </p>
</div>
<div class="post-text" itemprop="text">
<p>To make your class act array-like (or dict-like), you can override <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow"><code>__getitem__</code></a> and <code>__setitem__</code>.</p>
<pre><code>class HappyArray(object):
  #
  def __getitem__(self, key):
    # We skip the real logic and only demo the effect
    return 'We have an excellent %r for you!' % key
  #
  def __setitem__(self, key, value):
    print('From now on, %r maps to %r' % (key, value))

&gt;&gt;&gt; h = HappyArray()
&gt;&gt;&gt; h[3]
'We have an excellent 3 for you!'
&gt;&gt;&gt; h[3] = 'foo'
From now on, 3 maps to 'foo'
</code></pre>
<p>If you want several attributes of your object to exhibit such behavior, you need several array-like objects, one for each attribute, constructed and linked at your master object's creation time.</p>
</div>
<span class="comment-copy">Thanks, I was hopeing for some more property like solution, but I guess that is not possible.. I will upvote your answer =)</span>
