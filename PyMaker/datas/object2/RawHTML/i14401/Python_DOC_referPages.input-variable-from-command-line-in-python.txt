<div class="post-text" itemprop="text">
<p>What I want to do is very simple but I can't figure out a good and not too complex solution for this. Basically I want to define some global variables that will be used for example as a folder name </p>
<pre><code>global folder = "C:\\TEMP\\" + foldername
</code></pre>
<p>And what I want is to set the foldername value as input when running the script, something like:</p>
<pre><code>python myscript.py --folder somebeautifulfoldername
</code></pre>
<p>so when running my script, the folder will become C:\TEMP\somebeautifulfoldername</p>
</div>
<div class="post-text" itemprop="text">
<p>You can pass arguments to Python script like following:</p>
<pre><code>python test.py arg1 arg2 arg3
</code></pre>
<p>And this is what you get </p>
<p><code>Argument List: ['test.py', 'arg1', 'arg2', 'arg3']</code></p>
<p>In your case:</p>
<p><code>python myscript.py somebeautifulfoldername</code></p>
<p><code>folder = "C:\\TEMP\\" + sys.argv[1]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built-in <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow"><code>argparse</code></a> module for this combined with getting the command line arguments from <code>sys.argv</code>:</p>
<pre><code>import argparse
import sys

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'My script')
    parser.add_argument('--folder', help = "Subfolder of C:\TEMP\ to manipulate")
    args = parser.parse_args(sys.argv[1:])
    folder = "C:\\TEMP\\"+args.folder
    print folder
</code></pre>
<p>Here I added just a very simple argument with some basic help string, but you can do quite a lot with this like giving a default value, allowing a list of files instead of a single file, specify the type, ... . See the manual for more details and examples.</p>
<p>Usage:</p>
<pre><code>&gt;python myscript.py --folder somebeautifulfoldername
C:\TEMP\somebeautifulfoldername

&gt;python myscript.py --help
usage: tmp.py [-h] [--folder FOLDER]

My script

optional arguments:
  -h, --help       show this help message and exit
  --folder FOLDER  Subfolder of C:\TEMP\ to manipulate
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import sys

folder = "none"
if("--folder" in  sys.argv):
    folder = sys.argv[sys.argv.index("--folder") + 1]        
print folder
</code></pre>
<p>If you run it the way you want:</p>
<pre><code>python myscript.py --folder "HELLOFOLDER"
</code></pre>
<p>It will give: HELLOFOLDER</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a number of options to parse command line arguments into a Python script. There's the standard library's <a href="https://docs.python.org/3.4/library/optparse.html" rel="nofollow">optparse</a> and <a href="https://docs.python.org/3.4/library/argparse.html" rel="nofollow">argparse</a> for instance.</p>
<p>A really nice 3rd party tool is <a href="https://pypi.python.org/pypi/docopt/0.6.2" rel="nofollow">docopt</a>, which allows you to write the logic described above very easily by describing the script usage directly as documentation of your script like this:</p>
<pre><code>"""My script

Usage:
  myscript.py --folder=&lt;folder&gt;

Options:
  -h --help             Show this screen.
  --version             Show version.
  --folder=&lt;folder&gt;     Choose folder.
"""

from docopt import docopt

if __name__ == '__main__':
    arguments = docopt(__doc__, version='myscript 1.0')
    folder = "C:\\TEMP\\" + arguments["--folder"]
    print(folder)
</code></pre>
<p>That said, you may also want to look into <a href="https://docs.python.org/3/library/tempfile.html" rel="nofollow">tempfile</a> for generating temporary files to make the script more cross-platform. Hard-coding Windows-specific paths is rarely a good idea.</p>
</div>
<span class="comment-copy">are you asking about assigning   "C:\\TEMP\\" to global variable or passing value via commandline??</span>
<span class="comment-copy">Something like <a href="https://docs.python.org/2/library/argparse.html#module-argparse" rel="nofollow noreferrer">docs.python.org/2/library/argparse.html#module-argparse</a></span>
<span class="comment-copy">@teoreda  : You should have actually mention this in answer, by giving and example</span>
