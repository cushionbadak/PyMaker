<div class="post-text" itemprop="text">
<p>I'm experimenting for the first time with recursion and am running into problems when scanning large directories. The following code takes a list of glob patterns (e.g., ['/opt/data/large_dir_1*', '/opt/data'large_dir_2']), expands the glob patterns, passing the resulting lists of files/directories to threads, along the way totalling the number of directories found, number of files found, and the total byte size of the files found. The subdirectories are large (several of them have hundreds of thousands of directories, millions of files), but I'm suprised that some of the threads I've spawned are throwing "MemoryError" exceptions.</p>
<p>My guess is that the problems are occurring because the 'dirList' and 'fileList' variables are taking up too much memory. My backup plan is to have the recursive function simply write the data to log files rather than return it, but I'm trying to avoid the use of 'global' variables as much as possible. Does anyone have any thoughts on a better way to proceed? Am I doing something stupid here? Thanks for any help you can provide.</p>
<pre><code>def Scan(masterFileList, baseDir='/'):
    dirList = []
    fileList = []
    byteCount = 0
    for fileOrDir in masterFileList:
        fullName = os.path.join(baseDir,fileOrDir)
        if os.path.isdir(fullName):
            dirList.append(fullName)
            # recursion: call Scan():
            dirs, files, bytes = Scan(os.listdir(fullName),fullName)
            dirList.extend(dirs)
            fileList.extend(files)
            byteCount += bytes
        elif os.path.isfile(fullName):
            fileList.append(fullName)
            byteCount += os.path.getsize(fullName)
    return dirList, fileList, byteCount


dirList = []
fileList = []
byteCount = 0
errorList = []

def doScan(dataQueue):
    print('Thread starting')

    while not dataQueue.empty():
        globPattern = dataQueue.get()
        globbed = glob.glob(globPattern)
        if globbed:
            dirs, files, bytes = Scan(globbed)
            # if we have a lock:
            with safePrint:
                dirList.extend(dirs)
                write_to(dirLog, 'a', dirs) 
                fileList.extend(files)
                write_to(fileLog, 'a', files)       
                byteCount += bytes
                # convert to string for writing:
                write_to(byteLog, 'w', str(byteCount))
        else:
            # if we have a lock:
            with safePrint:
                errorList.append(globPattern)
                write_to(errorLog, 'a', globPattern)                

    print('Thread exiting')

numthreads = 0
for globPattern in globList:
    dataQueue.put(globPattern)
    numthreads += 1

# initialize threads:
threads = []
for i in range(numthreads):
        thread = threading.Thread(target=doScan, args=(dataQueue, ))
        threads.append(thread)
        thread.start()

# wait until threads are done:
for thread in threads: thread.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This sounds like a perfect use case for <code>os.walk</code>, which lets you recursively walk a file system using a simple <code>for</code> loop. The official documentation at <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow">https://docs.python.org/3/library/os.html#os.walk</a> contains an example that's quite like your use case.</p>
<p>If you want to do multi-threaded processing, you can start worker threads that consume items from a <code>queue.Queue</code> that you can fill from this <code>for</code> loop.</p>
</div>
<span class="comment-copy">What do you want to do here? Have a list of all the files or do something on separate files? Aka: what do you plan to use <code>filelist</code> and <code>dirlist</code> for?</span>
<span class="comment-copy">The point was to be able to have lists of all directories and files encountered, as well as the total byte-count of all files found in the path. Based on Wouter's answer, though, it sounds like I'm essentially trying to reinvent os.walk.</span>
<span class="comment-copy">I definitely agree os.walk is probably the best approach in general. I've avoided using it, primarily because of the data I'm starting with. Basically, I've been given a list of glob patterns rather than directory names. Since these patterns expand to both files and directories, I have to check whether each file in the expanded glob pattern is a file or directory before I can call os.walk. I decided that it would be more parsimonious to just make a simple recursive function to do what I was doing in the first place (testing whether a file was a file or a directory) and proceeding recursively.</span>
