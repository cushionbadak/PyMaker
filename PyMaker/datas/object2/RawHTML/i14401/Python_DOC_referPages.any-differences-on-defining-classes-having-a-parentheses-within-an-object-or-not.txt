<div class="post-text" itemprop="text">
<p>I am new to programming on Python and I have a doubt about defining a class. Will there be any differences the class has a parentheses within an object?</p>
<pre><code>class MyFunction:
      def Method1(self):
          print('Hello World!')
</code></pre>
<p>or</p>
<pre><code>class MyFunction(object):
      def Method1(self):
          print('Hello World!')
</code></pre>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>As explained in <a href="https://docs.python.org/3/tutorial/classes.html#inheritance" rel="nofollow">Inheritance</a> in the tutorial, this:</p>
<pre><code>class DerivedClassName(BaseClassName):
</code></pre>
<p>… makes <code>DeriveClassName</code> inherit from <code>BaseClassName</code>.</p>
<p>You can inherit from 1 class, 2 classes, or 20 classes:</p>
<pre><code>class Silly(Spam, Eggs, Cheese, Beans, Toast, Ham):
</code></pre>
<p>But you can't inherit from <em>no</em> classes. You <em>can</em> write a <code>class</code> statement with no base class names, but that means you're inheriting from the universal base class, <code>object</code>.</p>
<p>So, all three of these are identical:</p>
<pre><code>class Derived: pass
class Derived(): pass
class Derived(object): pass
</code></pre>
<p>(However, this is only true for Python 3.0 and later. In 2.x, the first two actually create an "old-style" or "classic" class instead of a normal class.)</p>
<hr/>
<p>If you look at your class with <code>dir</code> or the <code>inspect</code> module, you'll see that it's got a whole bunch of things you didn't define anywhere—a <code>__repr__</code> method, a <code>__module__</code> string, and so on. A few of these are filled in automatically by the <code>class</code> statement, but most of them are inherited from `object.</p>
</div>
<div class="post-text" itemprop="text">
<p>The parentheses at the end of a <a href="https://docs.python.org/2/tutorial/classes.html" rel="nofollow">class declaration</a> indicate <a href="https://docs.python.org/2/tutorial/classes.html#inheritance" rel="nofollow">it is inheriting from another class</a>.</p>
<p>Consider:</p>
<pre><code>class OtherClass:
      def Method2(self):
          print "goodbye"

class MyClass1(OtherClass):
      def Method1(self):
          print('Hello World!')

class MyClass2():
      def Method1(self):
          print('Hello World!')
</code></pre>
<p>Then we can do:</p>
<pre><code>&gt; obj = MyClass1()
&gt; obj.Method2
goodbye
</code></pre>
<p>But this will fail:</p>
<pre><code>&gt; obj = MyClass2()
&gt; obj.Method2
AttributeError: MyClass2 instance has no attribute 'Method2'
</code></pre>
</div>
<span class="comment-copy">yes .... there is a difference the parentheses indicate the parent that the class will inherit from</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/tutorial/classes.html#inheritance" rel="nofollow noreferrer">Inheritance</a> in the Python tutorial.</span>
<span class="comment-copy">By the way, it's a little confusing to call your class <code>MyFunction</code>. Occasionally you may want to write a class that's intended to be used as a callable (or even one that delegates to a <code>types.FunctionType</code>), but normally, classes and functions are pretty different things.</span>
<span class="comment-copy">Thanks for your words which make me clear on my concern.</span>
<span class="comment-copy">with nothing it is implicitly inheriting from object (at least in py3)</span>
<span class="comment-copy">Thanks for your explanation and examples. I missed the concept of Inheritance here. Now, no doubt on this.</span>
