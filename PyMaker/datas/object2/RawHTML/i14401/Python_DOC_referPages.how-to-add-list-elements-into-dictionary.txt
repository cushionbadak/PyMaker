<div class="post-text" itemprop="text">
<p>Let's say I have dict = {'a': 1, 'b': 2'} and I also have a list = ['a', 'b, 'c', 'd', 'e']. Goal is to add the list elements into the dictionary and print out the new dict values along with the sum of those values. Should look like:</p>
<pre><code>2 a
3 b
1 c
1 d
1 e
Total number of items: 8
</code></pre>
<p>Instead I get:</p>
<pre><code>1 a
2 b
1 c
1 d
1 e
Total number of items: 6
</code></pre>
<p>What I have so far:</p>
<pre><code>def addToInventory(inventory, addedItems)
    for items in list():
        dict.setdefault(item, [])

def displayInventory(inventory):
    print('Inventory:')
    item_count = 0
    for k, v in inventory.items():
       print(str(v) + ' ' + k)
       item_count += int(v)
    print('Total number of items: ' + str(item_count))

newInventory=addToInventory(dict, list)
displayInventory(dict)
</code></pre>
<p>Any help will be appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>You just have to iterate the list and increment the count against the key if it is already there, otherwise set it to 1.</p>
<pre><code>&gt;&gt;&gt; d = {'a': 1, 'b': 2}
&gt;&gt;&gt; l = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; for item in l:
...     if item in d:
...         d[item] += 1
...     else:
...         d[item] = 1
&gt;&gt;&gt; d
{'a': 2, 'c': 1, 'b': 3, 'e': 1, 'd': 1}
</code></pre>
<hr/>
<p>You can write the same, succinctly, with <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow"><code>dict.get</code></a>, like this</p>
<pre><code>&gt;&gt;&gt; d = {'a': 1, 'b': 2}
&gt;&gt;&gt; l = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; for item in l:
...     d[item] = d.get(item, 0) + 1
&gt;&gt;&gt; d
{'a': 2, 'c': 1, 'b': 3, 'e': 1, 'd': 1}
</code></pre>
<p><code>dict.get</code> function will look for the key, if it is found it will return the value, otherwise it will return the value you pass in the second parameter. If the <code>item</code> is already a part of the dictionary, then the number against it will be returned and we add <code>1</code> to it and store it back in against the same <code>item</code>. If it is not found, we will get 0 (the second parameter) and we add 1 to it and store it against <code>item</code>.</p>
<hr/>
<p>Now, to get the total count, you can just add up all the values in the dictionary with <code>sum</code> function, like this</p>
<pre><code>&gt;&gt;&gt; sum(d.values())
8
</code></pre>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#dict.values" rel="nofollow"><code>dict.values</code></a> function will return a view of all the values in the dictionary. In our case it will numbers and we just add all of them with <code>sum</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way:</p>
<p>Use <strong>collections</strong> module:</p>
<pre><code>&gt;&gt;&gt; import collections
&gt;&gt;&gt; a = {"a": 10}
&gt;&gt;&gt; b = ["a", "b", "a", "1"]
&gt;&gt;&gt; c = collections.Counter(b) + collections.Counter(a)
&gt;&gt;&gt; c
Counter({'a': 12, '1': 1, 'b': 1})
&gt;&gt;&gt; sum(c.values())
14
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>collections.Counter</code>, as it has everything you need for the task at hand:</p>
<pre><code>from collections import Counter

the_list = ['a', 'b', 'c', 'd', 'e']

counter = Counter({'a': 1, 'b': 2})
counter.update(the_list)

for c in sorted(counter):
    print c, counter[c]
</code></pre>
<p>In order to get the total count you can simply sum the values of the <code>counter</code>:</p>
<pre><code>sum(counter.values())
# 8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>stuff={'rope':1,'torch':6,'gold coin':42,'dagger':1,'arrow':12}
dragonLoot = ['gold coin', 'dagger', 'gold coin', 'gold coin', 'ruby']

def displayInventory(inventory):
    print('Inventory:')
    item_total=0
    for k,v in inventory.items():
        print(str(v)+' '+k)
        item_total=item_total+v
    print('Total number of items: '+ str(item_total))

def addToInventory(inventory,addedItems):
    for v in addedItems:
        if v in inventory.keys():
            inventory[v]+=1
        else:
            inventory[v]=1

addToInventory(stuff,dragonLoot)    

displayInventory(stuff)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are looking for a solution for the <strong>List to Dictionary Function for Fantasy Game Inventory</strong> in Automating boring stuff with Python, here is a code that works: </p>
<pre><code># inventory.py
stuff = {'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12}

#this part of the code displays your current inventory
def displayInventory(inventory): 
    print('Inventory:')
    item_total = 0

    for k, v in inventory.items():
        print(str(v) + ' ' + k)
        item_total += v
    print("Total number of items: " + str(item_total))

#this launches the function that displays your inventory
displayInventory(stuff) 

dragonLoot = ['gold coin', 'dagger', 'gold coin', 'gold coin', 'ruby']

# this part is the function that adds the loot to the inventory
def addToInventory (inventory, addedItems): 

    print('Your inventory now has:')

#Does the dict has the item? If yes, add plus one, the default being 0
    for item in addedItems:
        stuff[item] = stuff.get(item, 0) + 1 


# calls the function to add the loot
addToInventory(stuff, dragonLoot) 
# calls the function that shows your new inventory
displayInventory(stuff) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The question on 'List to Dictionary Function for Fantasy Game Inventory' - Chapter 5. Automate the Boring Stuff with Python.</p>
<pre><code># This is an illustration of the dictionaries

# This statement is just an example inventory in the form of a dictionary
inv = {'gold coin': 42, 'rope': 1}
# This statement is an example of a loot in the form of a list
dragon_loot = ['gold coin', 'dagger', 'gold coin', 'gold coin', 'ruby']

# This function will add each item of the list into the dictionary
def add_to_inventory(inventory, dragon_loot):

    for loot in dragon_loot:
        inventory.setdefault(loot, 0) # If the item in the list is not in the dictionary, then add it as a key to the dictionary - with a value of 0
        inventory[loot] = inventory[loot] + 1 # Increment the value of the key by 1

    return inventory

# This function will display the dictionary in the prescribed format
def display_inventory(inventory):

    print('Inventory:')
    total_items = 0

    for k, v in inventory.items():
        print(str(v) + ' ' + k)
        total_items = total_items + 1

    print('Total number of items: ' + str(total_items))

# This function call is to add the items in the loot to the inventory
inv = add_to_inventory(inv, dragon_loot)

# This function call will display the modified dictionary in the prescribed format
display_inventory(inv)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>invent = {'rope': 1, 'torch':6, 'gold coin': 42, 'dagger':1, 'arrow':12}
dragonLoot = ['gold coin', 'dagger', 'gold coin', 'gold coin', 'ruby']

def displayInventory(weapons):
    print('Inventory')
    total = 0
    for k, v in weapons.items():
        print(str(v), k)
        total += v
    print('Total number of items: ' + str(total))

def addToInventory(inventory, addedItems):
    for item in addedItems:
        inventory.setdefault(item, 0)
        inventory[item] = inventory[item] + 1
    return(inventory)



displayInventory(addToInventory(invent, dragonLoot))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def addToInventory(inventory, addedItems):
    for v in addedItems:
        if v in inventory.keys():
            inventory[v] += 1
        else:
            inventory[v] = 1
    return inventory

inv = {'gold coin': 42, 'rope': 1}
dragonLoot = ['gold coin', 'dagger', 'gold coin', 'gold coin', 'ruby']
inv = addToInventory(inv, dragonLoot)
displayInventory(inv)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For the first section of this question this is the code that I came up with. </p>
<pre><code>invt = {'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12}
print ("Inventory:")
total = sum(invt.values())
for x, v in invt.items():
  print (str(v) + ' ' + x)
print ("Total number of items: {}".format(total))
</code></pre>
<p>I see that most people are interating through the loop to add to the total variable. However using the sum method, I skipped a step .. </p>
<p>Always open to feedback.... </p>
</div>
<div class="post-text" itemprop="text">
<p>Below is the code with the use of the above tips plus a slight variation with the plural of nouns. For those who are willing and brave, there is the task of ifs and elifs for exceptions ;)</p>
<pre><code># sets your dictionary
backpack = {'rope': 1, 'torch': 6, 'gold coin': 42, 'dagger': 1, 'arrow': 12}

# this function display your current inventory
def displayInventory(inventory):
    print("Backpack:")
    itemTotal = 0
    for k, v in inventory.items():

    # creates a simple plural version of the noun 
    # (adds only the letter "s" at the end of the word) does not include exceptions 
    # (for example, torch - 'torchs' (should be 'torches'), etc.
        if v &gt; 1:
            print(str(v) + ' ' + k +'s')
        else:
            print(str(v) + ' ' + k)

        itemTotal += v
    print("Total quantity of items: " + str(itemTotal))

# sets your loot 
dragonLoot = ['gold coin', 'dagger', 'gold coin', 'gold coin', 'ruby']

# this function adds your loot to your inventory
def addToInventory(inventory, addedItems):
    for item in addedItems:
        inventory[item] = inventory.get(item,0) + 1

# launch your functions
addToInventory(backpack, dragonLoot)
displayInventory(backpack)
</code></pre>
</div>
<span class="comment-copy"><code>for items in list(): dict.setdefault(item, [])</code> This doesn't make sense at all.</span>
<span class="comment-copy">How do you get b to be 2? Where do you do the actual adding?</span>
<span class="comment-copy">@TimCastelijns - that was the issue. it didn't add 'a' or 'b' from the list and kept the original value from dict.</span>
<span class="comment-copy">@thefourtheye - there was a .append() at the end of that but it was giving an error about int not having a method .append so I took it out. still learning!</span>
<span class="comment-copy">Please explain your code, otherwise it cannot be helpful.</span>
<span class="comment-copy">While looking for a solution for this precise exercise, this was the first result in google, hence why I posted here with the solution that the book precisely calls for. I had to learn from the other answers and adapt it a bit.</span>
