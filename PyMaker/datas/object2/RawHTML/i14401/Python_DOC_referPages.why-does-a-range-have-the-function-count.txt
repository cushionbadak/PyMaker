<div class="post-text" itemprop="text">
<p>Unless I'm mistaken, a range can only include unique numbers. So, a number could be in it or not. </p>
<p>I guess only if we want to pass a range as one of many accepted types (dynamic) to some function would it make sense.</p>
<p>However, it seems like if it would go over the whole range to count a number it would be very inefficient.</p>
<p>I tried to time it compared to "<code>in</code>", but on my machine it seems they have the same timing. Can that be right?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>range()</code> objects conform to the <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="nofollow"><code>Sequence</code> ABC</a>, and that ABC has a <code>.count()</code> method.</p>
<p>In other words, it is there for completeness sake, so that the object <a href="https://docs.python.org/3/glossary.html#term-sequence" rel="nofollow">qualifies as a sequence</a>.</p>
<p>It doesn't have to go across the whole range as it is easy enough to <em>calculate</em> if the number is part of the sequence, see <a href="https://stackoverflow.com/questions/30081275/why-is-1000000000000000-in-range1000000000000001-so-fast">Why is `1000000000000000 in range(1000000000000001)` so fast?</a></p>
</div>
<span class="comment-copy">Is it possible to see if it is aware that as soon as it finds a match it can stop? It seems to be the case since a similar timing to "in".</span>
<span class="comment-copy">Wow of course, it just has to compare the minimum and maximum...duh... silly question. That answer is very useful: I like range even a lot more.</span>
<span class="comment-copy">For completeness, <a href="https://hg.python.org/cpython/file/3.4/Objects/rangeobject.c#l366" rel="nofollow noreferrer">Here</a> is what CPython calls when you do <code>in</code> on a range object. It appears to be O(1) time. And <a href="https://hg.python.org/cpython/file/3.4/Objects/rangeobject.c#l557" rel="nofollow noreferrer">here</a> is <code>.count</code>, which just calls the contains function if the argument is an integer or boolean. So it too is O(1) most of the time.</span>
