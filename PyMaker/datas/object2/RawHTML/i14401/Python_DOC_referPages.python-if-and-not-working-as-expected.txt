<div class="post-text" itemprop="text">
<p>I'm trying to set up the below code to ask the user to enter two integers (num_sides &amp; num_rolls). If the user doesn't enter an integer for either input, then the code should print the statement "Enter  an integer".</p>
<p>I find this code only tests the num_sides but doesn't test if num_rolls is an integer. What's going on here?</p>
<p>Thanks in advance for your help!</p>
<pre><code>def rolldice():
    while True:
        while True:
            num_sides = input("Enter number of sides for die: ")
            num_rolls = input("Enter number of rolls for die: ")
            try:
                if int(num_sides) != num_sides or int(num_rolls) != num_rolls:
                    break
                break
            except(ValueError):
                print("Enter an integer")
                True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why do you have a nested loop? (Two <code>while True</code> one inside the other one)</p>
<p>The following code is simpler and should work:</p>
<pre><code>def rolldice():
    while True:
        num_sides = input("Enter number of sides for die: ")
        num_rolls = input("Enter number of rolls for die: ")
        try:
            int(num_sides)
            int(num_rolls)
            break
        except ValueError:
            print("Enter an integer")
</code></pre>
<p>If both <code>int</code> evaluate and do not crash then <code>break</code> is executed and you can leave the loop.</p>
<p>As it is a function, you might want to return <code>(num_sides, num_rolls)</code> at the end of the function so they aren't lost. (You could also replace the <code>break</code> with the <code>return</code>, which will effectively stop the function too at the same time)</p>
<p>Unless this is only the beginning of your code, then never mind what I just said. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can just cast <code>int</code> and check for a <code>ValueError</code>:</p>
<pre><code>def rolldice():
    while True:
        try:
            num_sides = int(input("Enter number of sides for die: "))
            num_rolls = int(input("Enter number of rolls for die: "))
            break
        except ValueError:
            print("Enter an integer")
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; rolldice()
Enter number of sides for die: 5
Enter number of rolls for die: foo
Enter an integer
Enter number of sides for die: foo 
Enter an integer
Enter number of sides for die: bar
Enter an integer
Enter number of sides for die: 1
Enter number of rolls for die: 2
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">What an odd loop.  For starters, <code>num_sides</code> is being cast to an <code>int</code> and being compared to its original form (a string), which will <i>never</i> be <code>True</code>.</span>
<span class="comment-copy">Why do you have <code>break</code>s both inside and outside your <code>if</code>? And what did you expect <code>True</code> on a line by itself to do for you?</span>
<span class="comment-copy">Some of the answers just test whether they <i>can be cast</i> to <code>int</code>. Are you also trying to check whether the numbers are integers, or is that not important? I mean, if someone puts in 3.3, do you want it to throw an exception (test whether the number is an <i>integer</i>) or just cast to 3 (which is what the current answers do)?</span>
<span class="comment-copy">@leekaiinthesky It wouldn't. If it is Python3 (which seems to be the case) then <code>input</code> returns a string and <code>int('3.3')</code> would return ValueError. (If OP isn't using Py3, I strongly advise to switch to <code>raw_input</code> instead of <code>input</code>) The behavior you describe happens when applying <code>int</code> to a <code>float</code> though, but not its literal.</span>
<span class="comment-copy">Thanks for correcting me, @JeromeJ.</span>
<span class="comment-copy">Right, there's more to the code...but it wasn't relevant to my question. Thanks for the help</span>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance()</code></a> to check/confirm the type of an object.</span>
<span class="comment-copy">Shorter than my version. Behaves a bit different than my version, I sticked with OP's format but this is perfectly good too!</span>
<span class="comment-copy">@wwii Not very Pythonic I would say (<code>is_instance</code> in general, mainly because of "duck typing").</span>
<span class="comment-copy">@JeromeJ ... I thought I was commenting on an answer that was using <code>type</code> in a Boolean expression.</span>
