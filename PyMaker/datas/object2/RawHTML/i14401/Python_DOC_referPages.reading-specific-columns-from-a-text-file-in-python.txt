<div class="post-text" itemprop="text">
<p>I have a text file which contains a table comprised of numbers e.g:</p>
<blockquote>
<p>5 10 6</p>
<p>6 20 1</p>
<p>7 30 4</p>
<p>8 40 3</p>
<p>9 23 1</p>
<p>4 13 6</p>
</blockquote>
<p>if for example I want the numbers contained only in the second column, how do i extract that column into a list? </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>f=open(file,"r")
lines=f.readlines()
result=[]
for x in lines:
    result.append(x.split(' ')[1])
f.close()
</code></pre>
<p>You can do the same using a list comprehension</p>
<pre><code>print [x.split(' ')[1] for x in open(file).readlines()]
</code></pre>
<p>Docs on <code>split()</code></p>
<blockquote>
<p><code>string.split(s[, sep[, maxsplit]])</code></p>
<p>Return a list of the words of the string <code>s</code>. If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed). If the second argument sep is present and not None, it specifies a string to be used as the word separator. The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string.</p>
</blockquote>
<p>So, you can omit the space I used and do just <code>x.split()</code> but this will also remove tabs and newlines, be aware of that. </p>
</div>
<div class="post-text" itemprop="text">
<p>You have a space delimited file, so use the module designed for reading delimited values files, <a href="https://docs.python.org/3/library/csv.html" rel="noreferrer"><code>csv</code></a>.</p>
<pre><code>import csv

with open('path/to/file.txt') as inf:
    reader = csv.reader(inf, delimiter=" ")
    second_col = list(zip(*reader))[1]
    # In Python2, you can omit the `list(...)` cast
</code></pre>
<p>The <code>zip(*iterable)</code> pattern is useful for converting rows to columns or vice versa. If you're reading a file row-wise...</p>
<pre><code>&gt;&gt;&gt; testdata = [[1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]]

&gt;&gt;&gt; for line in testdata:
...     print(line)

[1, 2, 3]
[4, 5, 6]
[7, 8, 9]
</code></pre>
<p>...but need columns, you can pass each row to the <code>zip</code> function</p>
<pre><code>&gt;&gt;&gt; testdata_columns = zip(*testdata)
# this is equivalent to zip([1,2,3], [4,5,6], [7,8,9])

&gt;&gt;&gt; for line in testdata_columns:
...     print(line)

[1, 4, 7]
[2, 5, 8]
[3, 6, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>zip</code> function with a list comprehension :</p>
<pre><code>with open('ex.txt') as f:
    print zip(*[line.split() for line in f])[1]
</code></pre>
<p>result :</p>
<pre><code>('10', '20', '30', '40', '23', '13')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all we open the file and as <code>datafile</code> then we apply <code>.read()</code> method reads the file contents and then we split the data which returns something like: <code>['5', '10', '6', '6', '20', '1', '7', '30', '4', '8', '40', '3', '9', '23', '1', '4', '13', '6']</code> and the we applied list slicing on this list to start from the element at index position 1 and skip next 3 elements untill it hits the end of the loop.</p>
<pre><code>with open("sample.txt", "r") as datafile:
    print datafile.read().split()[1::3]
</code></pre>
<p>Output:</p>
<pre><code>['10', '20', '30', '40', '23', '13']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know this is an old question, but nobody mentioned that when your data looks like an array, numpy's <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.loadtxt.html" rel="nofollow noreferrer">loadtxt</a> comes in handy:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.loadtxt("myfile.txt")[:, 1]
array([10., 20., 30., 40., 23., 13.])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It may help:</p>
<pre><code>import csv
with open('csv_file','r') as f:
    # Printing Specific Part of CSV_file
    # Printing last line of second column
    lines = list(csv.reader(f, delimiter = ' ', skipinitialspace = True))
    print(lines[-1][1])
    # For printing a range of rows except 10 last rows of second column
    for i in range(len(lines)-10):
        print(lines[i][1])
</code></pre>
</div>
<span class="comment-copy"><code>readlines</code> is bad</span>
<span class="comment-copy">@StefanPochmann, any arguments for this?</span>
<span class="comment-copy"><a href="http://stupidpythonideas.blogspot.com/2013/06/readlines-considered-silly.html" rel="nofollow noreferrer">stupidpythonideas.blogspot.com/2013/06/â€¦</a></span>
<span class="comment-copy">@StefanPochmann, they're dealing with large files there. Here it's used just for clarity. Honestly, I wouldn't trust a site called _stupid_pythonideas :)</span>
<span class="comment-copy">It's <i>not</i> just about large files. And of course your <code>x</code> is very good for clarity.</span>
