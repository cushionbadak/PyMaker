<div class="post-text" itemprop="text">
<p>I am in need of a reflected magic method "greater than" and there does not appear to be one. Here is the situation. I have a class which keeps track of units. It is call Property. I have the magic method setup to handle comparisons, but it does not work when I put the Property on the right side. Here is an example:</p>
<pre><code>class Property():
def __init__(self, input, units):
    self.value = input
    self.units = units


def __gt__(self, other):
    if isinstance(other, Property):
        return self.value.__gt__(other.value)
    else:
        return self.value.__gt__(other)

def __float__(self):
    return float(self.value)

if __name__=='__main__':

    x = Property(1.,'kg')
    y = Property(0.,'kg')
    print y &gt; x
    print float(y) &gt; x
    print y &gt; float(x)
</code></pre>
<p>So if you run this you will see the output is: False, True, False because the middle example is executing float &gt; Property which uses the built in &gt; not the &gt; I have defined using magic methods. I need a magic method that will be used when the Property is on the right hand side. Is that not a thing? If not, how can I write this so that any combination of values and my own class can be compared. I would like to not have any rules for comparisons. IE, I don't want to just never be able to compare a float to a property.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/library/functools.html#functools.total_ordering" rel="nofollow"><code>functools.total_ordering</code></a> decorator to create the missing comparison methods for you:</p>
<pre><code>import functools

@functools.total_ordering
class Property():
    ...
</code></pre>
<p>Then you get False, False, False. Do make sure to read its documentation, though.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__lt__</code> is <code>__gt__</code>'s counterpart; you'll need to implement <code>__lt__</code>. While you're at it, you should probably implement <code>__le__</code> and <code>__ge__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you've declared the <code>__float__()</code> method, you could always write it as:</p>
<pre><code>print float(y) &gt; float(x)
</code></pre>
</div>
<span class="comment-copy">Be careful using the word "reflected" for this, as Reflection has a specific and unrelated meaning in Computer Science. Perhaps "reversed" would be a better choice?</span>
<span class="comment-copy">@IMSoP The Python docs use the phrase "reflected operands" here: <a href="https://docs.python.org/3/reference/datamodel.html#object.__radd__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__radd__</a> Granted, this is a different case, because ordering operators do not have the  <a href="http://en.wikipedia.org/wiki/Commutative_property" rel="nofollow noreferrer">commutative property</a>. Still, I wouldn't say this is entirely unrelated from the word "reflected" in the sense of "look back on" which is used in expressions like <code>a op b</code> where the object a's op method can't handle an object of b's type.</span>
<span class="comment-copy">Ah, fair enough. Someone else's poor choice of word, not yours, then, and too late to fix it now. :)</span>
<span class="comment-copy">Yeah, I am by know means and expert on these things. I am just a humble mechanical engineer. I just used the word that seems to mean what I mean based on the nomenclature that is out there: <a href="http://www.rafekettler.com/magicmethods.html" rel="nofollow noreferrer">rafekettler.com/magicmethods.html</a></span>
<span class="comment-copy">This works great! Although, the documentation makes it seem pretty magical, I have no idea what it is really doing. But I guess that is life!</span>
<span class="comment-copy">Well to see what it is really doing, just look at <a href="https://github.com/python/cpython/blob/master/Lib/functools.py#L192" rel="nofollow noreferrer">the source</a> :-)</span>
<span class="comment-copy">This is just the kind of thing I want to avoid. I have all these implemented, but I don't want there to be an arbitrary rule that my own class can only go on the left side of the operator. I am not the only one who will be using this class so it needs to be robust. This won't work.</span>
<span class="comment-copy">@Murenrb: No, it will work. In fact, it's exactly what <code>functools.total_ordering</code> does for you, although that method has a few complications.</span>
