<div class="post-text" itemprop="text">
<p>I want to work with IP subnets / IP addresses in Python. I created the Python code using the <code>ipaddress</code> module. When I run the code in the pycharm IDE, it works fine. But when I run on the command prompt by typing <code>python test.py</code>, it shows the following error.</p>
<pre><code>ValueError: '10.0.0.0/24' does not appear to be an IPv4 or IPv6 network
</code></pre>
<p><strong>test.py</strong>:</p>
<pre><code>import ipaddress
srcIp = ipaddress.ip_network("10.0.0.0/24")
print(srcIp)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems to work in Python 2.7, if you use a Unicode string.</p>
<pre><code>import ipaddress
srcIp = ipaddress.ip_network(u'10.0.0.0/24')
print srcIp
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The underlying problem is that <code>ip_network()</code> instantiates a <code>IPv4Network/IPv6Network</code> object which requires the network address to be a unicode string. In Python 3 this is fine, but in Python 2 strings are not unicode by default. In Python 2:</p>
<pre><code>&gt;&gt;&gt; import ipaddress
&gt;&gt;&gt; ipaddress.IPv4Network('10.0.0.0/24')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "ipaddress.py", line 1486, in __init__
    self.network_address = IPv4Address(address)
  File "ipaddress.py", line 1271, in __init__
    self._check_packed_address(address, 4)
  File "ipaddress.py", line 528, in _check_packed_address
    expected_len, self._version))
ipaddress.AddressValueError: '10.0.0.0/24' (len 11 != 4) is not permitted as an IPv4 address (did you pass in a bytes instead of a unicode object?)
&gt;&gt;&gt; ipaddress.IPv4Network(u'10.0.0.0/24')
IPv4Network(u'10.0.0.0/24')
</code></pre>
<p><code>ipaddress.ip_network()</code> catches this exception and raises a <code>ValueError</code> with a less detailed message:</p>
<pre><code>&gt;&gt;&gt; ipaddress.ip_network('10.0.0.0/24')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "ipaddress.py", line 148, in ip_network
    address)
ValueError: '10.0.0.0/24' does not appear to be an IPv4 or IPv6 network
</code></pre>
<p>So it looks like a unicode issue. One possible explanation is that maybe PyCharm is using Python &gt;= 3.3 which provides module <code>ipaddress</code> in the standard library and in which strings are unicode by default. Your command line Python could be version 2, in which strings default to byte strings, and <code>ipaddress.ip_network()</code> will fail as shown above. I'm not sure about this because the <code>print srcIp</code> statement indicates that you are using Python 2 in both cases?</p>
<p>Another possibility is that PyCharm is somehow affecting the encoding of string literals within Python 2. I know almost nothing about PyCharm, but there are encoding options that can be set. Perhaps these effectively do something similar to <code>from __future__ import unicode_literals</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just noting that 10.0.0.0/24 is an invalid subnet. The first valid subnet within the 10.0.0.0/8 (Class A) network, now sliced with a <code>/24</code> subnet mask is... <code>10.0.1.0/24</code>. You have to throw away the top/bottom on the network side just like you do for the top/bottom for the host side of that bitmask. For the same reason, 10.255.255.0/24 is also invalid.</p>
<p>For any given subnet mask there are <strong>2<sup>x</sup> - 2</strong> subnets and <strong>2<sup>x</sup> - 2</strong> hosts</p>
<p>...where x is the number of bits on that side of the mask. So for <code>/24</code> that's 24 on the network side and 8 on the host side making 16777214 subnets and 254 hosts. Note the "- 2" part of that calculation on the network side of the bitmask. That means that you have to throw away (you can't issue) those since they mean something to the transport layer of tcp/ip, in this case.</p>
<p>This should make sense to anyone who already knows that you similarly can't bind any <code>10.x.y.0/24</code> and <code>10.x.y.255/24</code> addresses since they already mean something.</p>
</div>
<span class="comment-copy"><code>ipaddress</code> did not exist in Python 2.7</span>
<span class="comment-copy">If you see the <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer"><code>ipaddress</code> documentation</a>, it reads "New in version 3.3." This is also documented on the <a href="https://docs.python.org/3/whatsnew/3.3.html" rel="nofollow noreferrer">"What's New In Python 3.3" page</a>.</span>
<span class="comment-copy">@ZachGates <a href="https://pypi.python.org/pypi/ipaddress" rel="nofollow noreferrer">pypi.python.org/pypi/ipaddress</a></span>
<span class="comment-copy"><code>srcIp = ipaddress.ip_network(u'10.0.0.0/24')</code> thanks it worked</span>
<span class="comment-copy">For Python 2 if you had the IP address in ip_addr_str you can make it make is unicode by <code>unicode(ip_addr_str)</code>.</span>
<span class="comment-copy">Thanks, that is very helpful to understand the underlying problem. and yes, actually it is print(srcip)....do you know how to upgrade my command line python version to 3.3</span>
<span class="comment-copy">What OS are you using? If on Linux, apt-get for Debian based systems, <code>yum</code> for redhat based systems. If Windows, download and install via installer.</span>
<span class="comment-copy">For Python 2 if you had the IP address in ip_addr_str you can make it make is unicode by <code>unicode(ip_addr_str)</code>.</span>
