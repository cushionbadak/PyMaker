<div class="post-text" itemprop="text">
<p>I have the following list of lists in Python.</p>
<pre><code>[[53.60495722746216, 'Percent Cats'],
 [45.298311033121294, 'Percent Dogs'],
 [1.0967317394165388, 'Percent Horses']]
</code></pre>
<p>Now I want the Animal with the highest percentage . In this case the it would be <code>Cats</code>. </p>
<p>How do I sort this structure to get the value out?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to sort the list if you only need to get one value. Use the built-in <a href="https://docs.python.org/3/library/functions.html?highlight=max#max" rel="nofollow"><code>max</code></a> function with custom ordering function like this</p>
<pre><code>In [3]: max(l, key=lambda x: x[0])[1] # compare first elements of inner lists
Out[3]: 'Percent Cats'
</code></pre>
<p>or even</p>
<pre><code>In [4]: max(l)[1] # compare lists directly
Out[4]: 'Percent Cats'
</code></pre>
<p>The latter code will work as well, because <a href="https://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types" rel="nofollow"><em>sequence objects may be compared to other objects with the same sequence type</em></a>:</p>
<blockquote>
<p>The comparison uses lexicographical ordering: first the first two
  items are compared, and if they differ this determines the outcome of
  the comparison; if they are equal, the next two items are compared,
  and so on, until either sequence is exhausted. If all items of
  two sequences compare equal, the sequences are considered equal.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = [[53.60495722746216, 'Percent Cats'], [45.298311033121294, 'Percent Dogs'], [1.0967317394165388, 'Percent Horses']]
print sorted(a, key=lambda x:x[0], reverse=True)[0]
</code></pre>
</div>
<span class="comment-copy">do you want a single value or the list actually sorted?</span>
<span class="comment-copy">Here's a simple how to sort guide for Python:  <a href="https://docs.python.org/2.7/howto/sorting.html" rel="nofollow noreferrer">docs.python.org/2.7/howto/sorting.html</a> .  The same techniques also work for <i>min()</i>, <i>max()</i>, <i>nsmallest()</i>, <i>nlargest()</i>, and <i>groupby()</i> from the heapq and itertools modules.</span>
