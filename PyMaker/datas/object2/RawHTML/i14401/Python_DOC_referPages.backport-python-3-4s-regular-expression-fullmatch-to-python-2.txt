<div class="post-text" itemprop="text">
<p>Python 3.4 introduced the new regex method <a href="https://docs.python.org/3/library/re.html#re.fullmatch" rel="noreferrer"><code>re.fullmatch(pattern, string, flags=0)</code></a>.</p>
<p>Has anyone back-ported this new method to older Python versions?</p>
</div>
<div class="post-text" itemprop="text">
<p>To make sure that the entire string matches, you need to use the <code>\Z</code> <a href="http://www.regular-expressions.info/anchors.html" rel="noreferrer">end-of-string anchor</a>:</p>
<pre><code>def fullmatch(regex, string, flags=0):
    """Emulate python-3.4 re.fullmatch()."""
    return re.match("(?:" + regex + r")\Z", string, flags=flags)
</code></pre>
<p>The <code>\A</code> anchor is not necessary since <code>re.match()</code> already anchors the match to the start of the string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here it is my backporting, which has at least one problem (thanks <a href="https://stackoverflow.com/users/20670/tim-pietzcker">tim-pietzcker</a>) but <em>does not require recompiling regexes</em>:</p>
<pre><code>import re

def fullmatch(regex, string, flags=0):
    """Emulate python-3.4 re.fullmatch()."""
    m = re.match(regex, string, flags=flags)
    if m and m.span()[1] == len(string):
        return m
</code></pre>
<p>And here are some test-cases proving the above emulation-function.</p>
<pre><code>def compare_expansion(regex, s, template):
    m1 = re.fullmatch(regex, s)
    s1 = m1.expand(template) if m1 else '&lt;NO-MATCH&gt;'
    m2 = fullmatch(regex, s)
    s2 = m2.expand(template) if m2 else '&lt;NO-MATCH&gt;'
    if s1 != s2:
        raise AssertionError("\n  PY-3: '%s' \n  PY-2: '%s' " % (s1, s2))

compare_expansion('.*', 'foo', r'A')
compare_expansion('(.*)', 'foo', r'A_\1')
compare_expansion('(.*)', 'foo', r'A_\g&lt;0&gt;')

compare_expansion('a.*', 'afoo&amp;', r'A')
compare_expansion('a(\w*)', 'afoo&amp;', r'A_\1')
compare_expansion('a(\w*)', 'afoo&amp;', r'A_\g&lt;0&gt;')

## But this fails!
compare_expansion(".*?", "Hello", '\g&lt;0&gt;')
AssertionError: 
  PY-3: 'A_Hello' 
  PY-2: '&lt;NO-MATCH&gt;' 
</code></pre>
</div>
<span class="comment-copy">Can also use <code>$</code> to match until end-of-line.</span>
<span class="comment-copy">@gaborous: That might backfire since <code>regex</code> could contain a <code>(?m)</code> modifier, and then less than the entire string could match.</span>
<span class="comment-copy">Does the <code>r")\Z"</code> part need to be a raw string literal, or maybe this is just a habit of yours? Neither Python 2 nor 3 treat <code>\Z</code> in any special way, so I think this is not mandatory, but who knows...</span>
<span class="comment-copy">This fails with lazy quantifiers: <code>re.fullmatch(".*?", "Hello")</code> returns <code>None</code> where it should return a match.</span>
<span class="comment-copy">Thanks for the quick catch!</span>
