<div class="post-text" itemprop="text">
<p>This must be super simple, but I'm struggling with the <a href="https://docs.python.org/3/library/argparse.html#module-argparse" rel="nofollow">official argparse docs</a> - after 20 minutes of frustrated googling, I'm giving up and asking here! </p>
<p>I'm working in Python 2.7. I just want to run a <a href="https://docs.djangoproject.com/en/1.8/ref/django-admin/#running-management-commands-from-your-code" rel="nofollow">Django management command</a> with an argument, like this:</p>
<pre><code>python manage.py my_command db_name='hello'
</code></pre>
<p>...and then from inside my script, get access to the value of <code>db_name</code>. </p>
<p>Here's what I've tried:</p>
<pre><code>def handle(self, *args, **options):
    print args
    print options
</code></pre>
<p>This gives me </p>
<pre><code>('db_name=mydb',)
{'pythonpath': None, 'verbosity': u'1', 'traceback': None, 'no_color': False, 'settings': None}
</code></pre>
<p>Is there an easy way (other than string-parsing <code>args</code> - surely that can't be the best way) to get the value of <code>db_name</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are willing to make a slight modification to how you call your script, the below will work:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--db_name', action='store', dest='db_name',
                    help='Store database name')
results = parser.parse_args()
print "db_name:", results.db_name
</code></pre>
<p>You need to call it like this:</p>
<pre><code>python script.py --db_name Test
</code></pre>
<p>Notice that you have to use traditional Unix command line arguments (<code>--name value</code>), instead of just <code>name=value</code></p>
<p>The output of the above script is:</p>
<pre><code>python script.py --db_name Test
db_name: Test
</code></pre>
<p>The <code>db_name</code> value is accessed with <code>results.db_name</code></p>
<hr/>
<p>You can also access these arguments from custom Django Management commands. Utilizing the <a href="https://docs.djangoproject.com/en/1.8/howto/custom-management-commands/#accepting-optional-arguments" rel="nofollow">example</a>, I believe something like this will work:</p>
<pre><code>def add_arguments(self, parser):
    # Named (optional) arguments
    parser.add_argument('--db_name',
        action='store',
        dest='db_name',
        help='Store database name')

def handle(self, *args, **options):
    if options['db_name']:
        # do something with your db_name
</code></pre>
<p>In this case, your variable is accessed in <code>options['db_name']</code></p>
</div>
<span class="comment-copy">Are you using <a href="https://docs.python.org/2/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a> module? Also, how did <code>db_name</code> become <code>DB_NAME</code>?</span>
<span class="comment-copy">argparse isn't designed to handle <code>name='value'</code> strings.  It deals with traditional Unix command line arguments like <code>--name value</code> (or just <code>value</code>).</span>
<span class="comment-copy">Have you had a look at the content of <code>sys.argv</code>? If you only want to handle a few simple options, that's probably enough.</span>
<span class="comment-copy">do you really need argparse? how many arguments do you have?  I second @jonrsharpe you really shouldnt be using argparse unless you have alot or very complicated arguments</span>
<span class="comment-copy">I've updated my answer to include an example for Django. That hadn't been included when I wrote my answer originally.</span>
<span class="comment-copy">Did you mean to write the <code>=</code> sign on the line after "You need to call it like this:"?</span>
<span class="comment-copy">No. Thanks for pointing that out.</span>
