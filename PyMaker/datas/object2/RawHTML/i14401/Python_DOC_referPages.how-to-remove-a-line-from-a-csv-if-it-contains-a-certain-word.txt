<div class="post-text" itemprop="text">
<p>I have a CSV file that looks something like this: </p>
<pre><code>    2014-6-06 08:03:19, 439105, 1053224, Front Entrance
    2014-6-06 09:43:21, 439105, 1696241, Main Exit
    2014-6-06 10:01:54, 1836139, 1593258, Back Archway
    2014-6-06 11:34:26, 845646, external, Exit 
    2014-6-06 04:45:13, 1464748, 439105, Side Exit
</code></pre>
<p>I was wondering how to delete a line if it includes the word "external"?   </p>
<p>I saw another <a href="https://stackoverflow.com/questions/21970932/remove-line-from-file-if-containing-word-from-another-txt-file-in-python-bash">post</a> on SO that addressed a very similar issue, but I don't understand completely...    </p>
<p>I tried to use something like this (as explained in the linked post): </p>
<pre><code>TXT_file = 'whatYouWantRemoved.txt'
CSV_file = 'comm-data-Fri.csv'
OUT_file = 'OUTPUT.csv'

## From the TXT, create a list of domains you do not want to include in output
with open(TXT_file, 'r') as txt:
    domain_to_be_removed_list = []

## for each domain in the TXT
## remove the return character at the end of line
## and add the domain to list domains-to-be-removed list
for domain in txt:
    domain = domain.rstrip()
    domain_to_be_removed_list.append(domain)


with open(OUT_file, 'w') as outfile:
    with open(CSV_file, 'r') as csv:

        ## for each line in csv
        ## extract the csv domain
        for line in csv:
            csv_domain = line.split(',')[0]

            ## if csv domain is not in domains-to-be-removed list,
            ## then write that to outfile
            if (csv_domain not in domain_to_be_removed_list):
                outfile.write(line)
</code></pre>
<p>The text file just held the one word "external" but it didn't work.... and I don't understand why. </p>
<p>What happens is that the program will run, and the output.txt will be generated, but nothing will change, and no lines with "external" are taken out.    </p>
<p>I'm using Windows and python 3.4 if it makes a difference.    </p>
<p>Sorry if this seems like a really simple question, but I'm new to python and any help in this area would be greatly appreciated, thanks!! </p>
</div>
<div class="post-text" itemprop="text">
<p>It looks like you are grabbing the first element after you split the line. That is going to give you the date, according to your example CSV file.</p>
<p>What you probably want instead (again, assuming the example is the way it will always work) is to grab the 3rd element, so something like this:</p>
<pre><code>csv_domain = line.split(',')[2]
</code></pre>
<p>But, like one of the comments said, this isn't necessarily fool proof. You are assuming none of the individual cells will have commas. Based on your example that might be a safe assumption, but in general when working with CSV files I recommend working with the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow">Python csv module</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Redirect output to a new file.  It will give you every line, except those that contain "external"</p>
<pre><code>import sys
import re

f = open('sum.csv', "r")
lines = f.readlines()

p = re.compile('external')

for line in lines:
    if(p.search(line)):
        continue
else:
    sys.stdout.write(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you can go with something else then python, grep would work like this:</p>
<pre><code>grep file.csv "some regex" &gt; newfile.csv
</code></pre>
<p>would give you ONLY the lines that match the regex, while:</p>
<pre><code>grep -v file.csv "some regex" &gt; newfile.csv 
</code></pre>
<p>gives everything BUT the lines matching the regex</p>
</div>
<span class="comment-copy">just wondering - do you HAVE to do it in python? there's a plethora of command line tools that do this kind of thing ... grep, anyone?</span>
<span class="comment-copy">Looks like you are splitting around semicolons instead of commas? Also, for reference, PEP says you should use <code>X not in Y</code> as opposed to <code>not X in Y</code></span>
<span class="comment-copy">What error did you get?</span>
<span class="comment-copy">also, CSV is stateful, because you can have this "hello;" ; "1234" - this would be valid CSV, so plain split is not correct, unless you know for sure what your input is</span>
<span class="comment-copy">@mattdodge I just fixed both issues, thanks!</span>
<span class="comment-copy">Thank you I just realised that, it worked!!!!</span>
<span class="comment-copy">And yes, actually I know for sure that I won't have a "," in the individual cell, but thank you for pointing it out! I'll check out the csv module.</span>
<span class="comment-copy">Thank you this worked very well too!!</span>
<span class="comment-copy">Thanks!! I tried this, but ended up with "grep is not recognized as an internal or external command". This is because grep doesn't work in windows, correct?</span>
<span class="comment-copy">well, yes ... and no. grep is not available on windows out of the box. you can, however, install it</span>
