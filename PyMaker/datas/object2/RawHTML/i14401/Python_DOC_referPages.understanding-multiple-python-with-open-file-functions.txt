<div class="post-text" itemprop="text">
<p>i'm having a difficult time understanding what the second 'with open' function does here. </p>
<p>so, in the first 'with open' part, we've essentially said <code>out = open(save_as_file, 'wb+')</code> , right? (still new to using 'with open'). we later write to it and then 'with open' automatically closes the 'out' file.That part i get - we're writing this response object from Requests as a binary in a specified save_as_file location until we hit the 81920th character aka our buffer #.</p>
<p>what's going on in the second 'with open'? breaking it down the same way as above, it's pretty much <code>fp = open(save_as_file, 'r')</code> , right? What does that make fp, which was already assigned the request response object earlier? We're just opening the save_as_file to use it for reading but not reading or extracting anything from it, so I don't see the reason for it. If someone could explain in english just what's taking place and the purpose of the second 'with open' part, that would be much appreciated.</p>
<p>(don't worry about the load_from_file function at the end, that's just another function under the class)</p>
<pre><code>def load_from_url(self, url, save_as_file=None):

    fp = requests.get(url, stream=True,
                      headers={'Accept-Encoding': None}).raw

    if save_as_file is None:
        return self.load_from_file(fp)

    else:
        with open(save_as_file, 'wb+') as out:
            while True:
                buffer = fp.read(81920)
                if not buffer:
                    break
                out.write(buffer)
        with open(save_as_file) as fp:
            return self.load_from_file(fp)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are correct that the second <code>with</code> statement opens the file for reading.</p>
<p>What happens is this:</p>
<ol>
<li>Load the response from the URL</li>
<li>If save_as_file is None:
<ol>
<li>Call <code>load_from_file</code> on the response and return the result</li>
</ol></li>
<li>Else:
<ol>
<li>Store the contents of the response to <code>save_as_file</code></li>
<li>Call <code>load_from_file</code> on the contents of the file and return the result</li>
</ol></li>
</ol>
<p>So essentialy, if <code>save_as_file</code> is set it stores the response body in a file, processes it and then returns the processed result. Otherwise it just processes the response body and returns the result.</p>
<p>The way it is implemented here is likely because <code>load_from_file</code> expects a file-like object and the easiest way the programmer saw of obtaining that was to read the file back.</p>
<p>It could be done by keeping the response body in memory and using Python 3's <a href="https://docs.python.org/3/library/io.html" rel="nofollow">io</a> module or Python 2's <a href="https://docs.python.org/2/library/stringio.html" rel="nofollow">StringIO</a> to provide a file-like object that uses the response body from memory, thereby avoiding the need to read the file again.</p>
<p><code>fp</code> is reassigned in the second <code>with</code> statement in the same way as any other variable would be if you assigned it another value.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm the original <a href="http://roguelynn.com" rel="nofollow">author</a> of the <a href="http://newcoder.io/api/part-1/" rel="nofollow">code</a> that you're referring to;  I agree it's a bit unclear.</p>
<p>If we hit the particular code at the <a href="https://github.com/econchick/new-coder/blob/82ee64adb5c5385dcda05d30afb8d2a092751641/apis/api.py#L85" rel="nofollow"><code>else</code></a> statement, this means that we want to save the data that we originally get from <a href="https://github.com/econchick/new-coder/blob/82ee64adb5c5385dcda05d30afb8d2a092751641/apis/api.py#L76-77" rel="nofollow">calling the URL</a> to a file. Here, <code>fp</code> is actually the response text from the URL call.   </p>
<p>We'll hit that <code>else</code> statement if, when ran from the command line, we pass in <code>--cpi-file=foobar.txt</code> and that file it doesn't actually exist yet; it acts as a target file as mentioned <a href="https://github.com/econchick/new-coder/blob/82ee64adb5c5385dcda05d30afb8d2a092751641/apis/api.py#L352-354" rel="nofollow">here</a>.  If you don't pass in <code>--cpi-file=foobar.txt</code>, then the program will <em>not</em> write to a file, it will just go straight to reading the response data (from <code>fp</code>) via <code>load_from_file</code>.</p>
<p>So then, if that file does not exist but we did pass it in the command line, we will grab data from the URL (<code>fp</code>), and write that data to the target file (<code>save_as_file</code>).  It now exists for our reference (it will be on your file system), if we want to use it again in this script.</p>
<p>Then, we will open that exact file again and call <code>load_from_file</code> to actually read and parse the data that we originally got from the response (<code>fp</code>).</p>
<p>Now - if we run this script two times, both with <code>--cpi-file=foobar.txt</code> and <code>foobar.txt</code> doesn't exist yet, the first time the script runs, it will create the file and save the CPI data.  The second time the script runs, it will actually avoid calling the CPI URL to re-downloaded the data again, and just go <a href="https://github.com/econchick/new-coder/blob/82ee64adb5c5385dcda05d30afb8d2a092751641/apis/api.py#L390-392" rel="nofollow">straight to parsing the CPI data from the file</a>.</p>
<p><code>load_from_file</code> is a bit of a misleading name, it should probably be <code>load_from_stream</code> as it could be reading the response data from <a href="https://github.com/econchick/new-coder/blob/82ee64adb5c5385dcda05d30afb8d2a092751641/apis/api.py#L76-77" rel="nofollow">our api call</a> or from a file.</p>
<p>Hopefully that makes sense. In the next release of newcoder.io, I'll be sure to clear this language &amp; code up a bit.</p>
</div>
<div class="post-text" itemprop="text">
<p>I tried with below code to simulate your case:</p>
<pre><code>fp = open("/Users/example1.py",'wb+')

print "first fp",fp

with open("/Users/example2.py") as fp:
    print "second fp",fp
</code></pre>
<p>The output is:</p>
<pre><code>first fp &lt;open file '/Users/example1.py', mode 'wb+' at 0x10b200390&gt;
second fp &lt;open file '/Users/example2.py', mode 'r' at 0x10b200420&gt;
</code></pre>
<p>So second <code>fp</code> is a local variable inside <code>with</code> block.</p>
<p>Your code seem want to first read data from the URL, and write it to <code>save_as_file</code>, and then read data from <code>save_as_file</code> again and do something with <code>load_from_file</code>, like validating the content.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a piece of code that describe it:</p>
<ol>
<li>__with__ provides a block that "cleans up" when existed</li>
<li>Can handle exceptions that occur within the block</li>
<li>Can also execute code when entered</li>
</ol>
<hr/>
<pre><code>class MyClass(object):

    def __enter__(self):
        print("entering the myclass %s")
        return self

    def __exit__(self, type, value, traceback):
        print("Exitinstance %s" %(id(self)))
        print("error type {0}".format(type))
        print("error value {0}".format(value))
        print("error traceback {0}".format(traceback))
        print("exiting the myclass")

    def sayhi(self):
        print("Sayhi instance %s" %(id(self)))

with MyClass() as cc:
    cc.sayhi()


print("after the block ends")
</code></pre>
</div>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0343/" rel="nofollow noreferrer">python.org/dev/peps/pep-0343</a></span>
<span class="comment-copy">a good answer too - just liked the way @Raniz explained it to me like I was a 5 year old.</span>
<span class="comment-copy">If you feel useful, consider a upvote:) My experience is adding break points will help you understand.</span>
<span class="comment-copy">done. thanks man!</span>
<span class="comment-copy">you are welcome, any time for question</span>
<span class="comment-copy">you can paste the code in <a href="http://www.pythontutor.com" rel="nofollow noreferrer">pythontutor.com</a> and see how it works</span>
