<div class="post-text" itemprop="text">
<p>I am a complete beginner to both Python and the OS X Terminal, and I have attempted to install some packages for both Python 2.7.3 and Python 3.4.</p>
<p>I can't get <em>mechanize</em> to work with neither Python 2 or Python 3 after install. I get:</p>
<pre><code>&gt;&gt;&gt; from mechanize import *
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/XXX/Desktop/mechanize-0.2.5/mechanize/__init__.py", line 119, in &lt;module&gt;
    from _version import __version__
ImportError: No module named '_version'
</code></pre>
<p>In trying to understand why it's searching for the module location on my Desktop (where I downloaded the source code and ran <em>setup.py</em> from), I'm wondering if my Python installs are messy.</p>
<p>I have located Python stuff at these three different locations I know of:</p>
<blockquote>
<p>Macintosh HD/Library/Frameworks/Python.framework/3.4/ – [<em>This is where Python 3 and its site-packages are stored</em>]</p>
<p>Macintosh HD/System/Library/Frameworks/Python.framework/Versions/2.7/ – [<em>I can't find any site-packages here</em>]</p>
<p>Macintosh HD/Library/Python/2.7/ – [<em>Only site-packages in this folder, nothing else</em>]</p>
</blockquote>
<p>Is the last one misplaced?</p>
<p>I should perhaps mention that I'm utilizing a non-admin/non-sudo user in Terminal per default. So when I'm installing packages, I do:</p>
<pre><code>su -l admin
sudo easy_install xxx or sudo python3 setup.py install
</code></pre>
<p>Ideally, I would like to clean up my Python install, remove the packages I have installed, and place everything virtually with <em>virtualenv</em> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>OS X comes with Python pre-installed. Exactly which version(s) depends on your OS X version (e.g., 10.10 comes with 2.6 and 2.7, 10.8 comes with 2.5-2.7 plus a partial installation of 2.3, and 10.3 comes with 2.3).</p>
<p>These are installed in <code>/System/Library/Frameworks/Python.framework/Versions/2.*</code>, and their site-packages are inside <code>/Library/Python/2.*</code>. (The reason they're in different places is that <code>/System/Library</code> should only be written to by OS installs/upgrades.)</p>
<p>You can't remove the pre-installed versions of Python without potentially breaking the OS (and, even if you could, they'd just get reinstalled at the next OS update).</p>
<p>But if you're only planning to use Python 3.4, you can just <em>ignore</em> the 2.x versions that Apple gave you. All versions of at least Python 3.2+ that come from python.org or other major sources like Homebrew will follow <a href="https://www.python.org/dev/peps/pep-0394/" rel="noreferrer">PEP 394</a>, meaning that you'll get <code>python3</code>, <code>pip3</code>, etc. commands that do not collide with the <code>python</code>, etc. commands installed by Apple.</p>
<p>Also, you mentioned using virtual environments in your question. This is a good idea. Whether you use the stdlib's <a href="https://docs.python.org/3/library/venv.html" rel="noreferrer"><code>venv</code></a> or the third-party <a href="https://virtualenv.pypa.io/en/latest/" rel="noreferrer"><code>virtualenv</code></a>, you can create separate Python 3.4 environments. When you're inside an active virtual environment, its <code>pip</code> will install into its site-packages instead of the global one. And if you really screw up an environment, you can clean it up very easily just by deactivating and doing <code>rm -rf path/to/environment</code> and recreating it.</p>
<p>As a side note, you almost never want to use <code>easy_install</code>. If you install Python 3.4, it comes with <code>pip</code>, so the proper way to install packages for it is:</p>
<pre><code>[sudo] pip3 install xxx
</code></pre>
<p>Even when you have a <code>setup.py</code>, unless it's non <code>pip</code>-compatible (most of them are nowadays, but a few aren't), you probably want to use it instead of running <code>setup.py</code> manually, like this:</p>
<pre><code>[sudo] pip3 install .
</code></pre>
<p>Also, the python.org installers have an option to make the site-packages directory group-writable. If you've enabled that, you should <em>not</em> use <code>sudo</code>, because then you'll end up with a site-packages that's a mix of writable and non-writable, and uninstalling or upgrading will become a nightmare. (One nice advantage of using this option is that never using <code>sudo</code> means you will never accidentally install anything for Apple's Python 2.7, because you'd get a permissions error if you tried. But the disadvantages are obvious. That's why it's an option.)</p>
<hr/>
<p>So, how do you get there from here?</p>
<ul>
<li>You may want to <code>pip list &gt; requirements</code> or <code>pip freeze &gt; requirements</code> to get a list of all the packages you have installed. (The former is more human-readable, the latter can be used directly with <code>pip install -r requirements</code> to automatically reinstall the same set of packages once you've cleaned up.) You may want to do this with both 2.7 and 3.4 if you've <code>pip</code> installed for both and gotten things confused enough.</li>
<li>Uninstall your Python 3.4.</li>
<li>Uninstall any site-packages you installed for Apple's Python 2.7. (You already know where these are, so, even though you didn't install them with <code>pip</code>, you can uninstall them manually. Just be aware that they may have left behind scripts like <code>ipython</code> or similar in <code>/usr/local/bin</code>.)</li>
<li>Install the latest Python 3.4 from python.org.</li>
<li><code>[sudo] pip3 install</code> all the packages you want globally. (This may be nothing at all, or just <code>virtualenv</code>.)</li>
<li>Use the <code>venv</code> or <code>virtualenv</code> to create a virtual environment for each project you want to keep separate, and use its <code>pip</code> rather than the global one to install packages for that specific environment.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Don't remove the python that comes with your os x since several things depend on that installation.</p>
<p>After cleaning up your python 3 installation, you should work with virtual environments because they save you a lot of pain. Then you are able to specify which python version is to be used (you can install every version you want) and every package you install is just installed for this particular environment and your system's global python remains intact.</p>
<p>To start setting up your virtual environments I recommend reading into pyenv and pyenv-virtualenv </p>
<p><a href="https://github.com/yyuu/pyenv" rel="nofollow">https://github.com/yyuu/pyenv</a>
<a href="https://github.com/yyuu/pyenv-virtualenv" rel="nofollow">https://github.com/yyuu/pyenv-virtualenv</a></p>
</div>
<div class="post-text" itemprop="text">
<p>just try at your command line python3 and use it with your scripts. And run like this. </p>
<p>python3 myscript.py</p>
</div>
<div class="post-text" itemprop="text">
<p>You can clean up your existing Python stuff and try out <a href="http://conda.pydata.org/" rel="nofollow">Conda</a>.</p>
</div>
<span class="comment-copy">Hey @Winterflags, I had issues using Python with Mac, but found these links very helpful!  Tutorial: <a href="https://youtu.be/c_TzqzKZpMw" rel="nofollow noreferrer">youtu.be/c_TzqzKZpMw</a> Written Instructions: <a href="http://programarcadegames.com/index.php?showpart=0" rel="nofollow noreferrer">programarcadegames.com/index.php?showpart=0</a></span>
<span class="comment-copy">Thanks, great reply! That cleared up a lot of confusion. Is it safe to remove the scripts in /usr/local/bin and if it matters, do I have to do that before reinstalling, or are they just residual?</span>
<span class="comment-copy">@Winterflags: It is safe to remove them if you know which ones they are, it's just not always easy to know which ones they are. Unless you've installed nothing else that goes into <code>/usr/local/bin</code>, the best thing to do is first <code>ls -l</code> and look for symlinks that point into <code>/Library/Python</code>, and then look at the contents of each file for the ones that start with <code>#!/System/Frameworks/Python.framework/…</code>.</span>
<span class="comment-copy">@abarnert. Thanks for the post; it helped me too. Two questions relating to what you posted: a) you advised that, if we make a directory group writeable(i.e writeable by groups other than <code>wheel</code>), we should <code>"not use sudo, because then you'll end up with a site-packages that's a mix of writable and non-writable."</code> Why is that true? If I gave a group write access, wouldn't the use of <code>sudo</code> by someone in the group thereafter be redundant, because they already have access to everything? What makes for any danger?</span>
<span class="comment-copy">b) Why did you advise we remove site packages for older versions of python? Why not simply leave them be?</span>
<span class="comment-copy">@Muno a) Besides the answer I already gave in parens in the answer: if sudo creates a subdirectory owned by root:root, muno:wheel won't be able to overwrite it. b) To avoid confusion--if you accidentally run Apple's python and can successfully import some of the stuff you expected, it won't be nearly as obvious that you accidentally ran Apple's Python.</span>
