<div class="post-text" itemprop="text">
<p>I did some google searching on how to check if a string has any elements of a list in it and I found this bit of code that works:</p>
<p><code>if any(i in string for i in list):</code></p>
<p>I know this works, but I don't really know why.  Could you share some insight?</p>
</div>
<div class="post-text" itemprop="text">
<p>As the docs for <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any</code></a> say:</p>
<blockquote>
<p>Return <code>True</code> if any element of the <em>iterable</em> is true. If the <em>iterable</em> is empty, return <code>False</code>. Equivalent to:</p>
</blockquote>
<pre><code>def any(iterable):
    for element in iterable:
        if element:
            return True
    return False
</code></pre>
<p>So, this is equivalent to:</p>
<pre><code>for element in (i in string for i in list):
    if element:
        return True
return False
</code></pre>
<p>â€¦ which is itself effectively equivalent to:</p>
<pre><code>for i in list:
    element = i in string
    if element:
        return True
return False
</code></pre>
<hr/>
<p>If you don't understand the last part, first read the tutorial section on <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions</a>, then skip ahead to <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow">iterators</a>, generators, and generator expressions.</p>
<p>If you want to really break it down, you can do this:</p>
<pre><code>elements = []
for i in list:
    elements.append(i in string)
for element in elements:
    if element:
        return True
return False
</code></pre>
<p>That still isn't exactly the same, because a generator expression builds a generator, not a list, but it should be enough to get you going until you read the tutorial sections.</p>
<hr/>
<p>But meanwhile, the point of having <code>any</code> and comprehensions and so on is that you can almost read them as plain English:</p>
<pre><code>if any(i in string for i in list): # Python

if any of the i's is in the string, for each i in the list: # pseudo-English
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>i in string for i in list
</code></pre>
<p>This produces an iterable of booleans indicating whether each item in <code>list</code> is in <code>string</code>. Then you check whether any item in this iterable of bools is true.</p>
<p>In effect, you're checking whether any of the items in the list are substrings of <code>string</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>What's going on here with:</p>
<pre><code>if any(i in string for i in list):    
</code></pre>
<p>is best explained by illustrating:</p>
<pre><code>&gt;&gt;&gt; xs = ["Goodbye", "Foo", "Balloon"]
&gt;&gt;&gt; s = "Goodbye World"
&gt;&gt;&gt; [i in s for i in xs]
[True, False, False]
&gt;&gt;&gt; any([i in s for i in xs])
True
</code></pre>
<p>If you read the <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any</code></a> documentaiton you'll note:</p>
<blockquote>
<p><code>any(iterable)</code> Return True if any element of the iterable is true.
  If the iterable is empty, return False. Equivalent to:</p>
</blockquote>
<p>The list comprehension should be more obvious as it constructs a list of <code>i in s</code> for each element of <code>xs</code>.</p>
<p>Basically (<em>in English</em>) you are returning any match where each sub-string exists in the search string (<em>haystack</em>).</p>
<p>It's important to note as well that <code>any()</code> will short circuit and end on the first <code>True</code>(<em>ish</em>) value it finds. <code>any()</code> can be implement in pure Python like this:</p>
<pre><code>def any(iterable):
    for x in iterable:
        if x:
            return True
    return False
</code></pre>
</div>
<span class="comment-copy">The documentation for <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a> describes exactly what it does. What part of that do you not understand?</span>
<span class="comment-copy">My guess is that what's <i>actually</i> confusing you here isn't the <code>any</code> function, but rather the generator expression being passed as an argument to it. For that, read the tutorial section on <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a>, then skip ahead to <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow noreferrer">generators</a> and generator expressions.</span>
<span class="comment-copy">@abarnert I know that any will return true if any element of the iterator is true.  I get confused with how the part of the code before the <code>for</code> fits in</span>
<span class="comment-copy">That last part really helped me get it.  Thanks!</span>
