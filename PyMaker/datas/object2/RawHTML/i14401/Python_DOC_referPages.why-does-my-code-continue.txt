<div class="post-text" itemprop="text">
<p>this code is supposed to take a user input for the type of shape. then take an input of the height then print a shape made of *'s (triangle/square for now)</p>
<p>the code works until the user types in a bad input to start, then a correct function name and tries to close it. any ideas how to fix it? </p>
<p>error:</p>
<pre><code>Enter shape to draw (q to quit): sad
Unknown shape. Please try again
Enter shape to draw (q to quit): triangle
Enter size: 6
*
**
***
****
*****
******
Enter shape to draw (q to quit): q
Goodbye
Enter size: #this should not be there
</code></pre>
<p>the whole code is 
    """ shape programme by jordan hampson""" </p>
<pre><code>def main():
    """main boss function"""
    shape = input("Enter shape to draw (q to quit): ").lower()

    if shape == "q":
        print("Goodbye")
        return



    else:
        get_valid_shape(shape)

        call_shape(shape)

        main()



def call_shape(shape):
    """CALLS THE shape"""

    size = int(input("Enter size: "))
    get_valid_size(size)
    if shape == "square":
        return print_square(size)

    elif shape == "triangle":
        return print_triangle(size)

    else: 
        return main()


def get_valid_size(size):
    """checks to see if the size is valid"""
    if size &lt;= 0:
        print("Value must be at least 1")
        main()

def get_valid_shape(shape):
    """gets a valid shape"""
    shape_1 = shape
    shapes = ["square", "triangle", "q"]
    while shape_1 not in shapes:
        print("Unknown shape. Please try again")
        return main()


def print_square(size):
    """prints a square from the input"""
    for _ in range(0, size):
        print(size * "*")


def print_triangle(size): 
    """prints a triangle in *'s"""   
    for _ in range(1, size +1):
        print((size -(size -_)) * "*")  

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's due to your fonction get_valid_shape(), the fonction call the fonction main() so when you enter "sad" you start a new main() but in the fonction get_valid_shape() (on the main process your are still at the line <code>get_valid_shape(shape)</code>). When you press "q" you quit this line and pass to <code>call_shape(shape)</code> the prevous shape was a triangle so it ask you to input a size.</p>
<p>To avoid this I suggest this code</p>
<pre><code>def main():
    shape = ""
    while shape != "q":
        """main boss function"""
        shape = "" #reinitialize 
        shape = input("Enter shape to draw (q to quit): ").lower()

        if shape == "q":
            print("Goodbye")

        elif get_valid_shape(shape) :
            call_shape(shape)

        else:
            print("Unknown shape. Please try again")



def call_shape(shape):
    """CALLS THE shape"""

    size = int(input("Enter size: "))#ask a 1st time withour print error message
    while get_valid_size(size): #while size is false, ask again
        size = int(input("Enter size: "))

    if shape == "square":
        return print_square(size)

    elif shape == "triangle":
        return print_triangle(size)



def get_valid_size(size):
    """checks to see if the size is valid"""
    if size &lt;= 0: 
        print("Value must be at least 1")
        return True #return true to loop at the while
    else :
        return False #return false to break the while

def get_valid_shape(shape):
    """gets a valid shape"""
    shape_1 = shape
    shapes = ["square", "triangle", "q"]
    if shape_1 not in shapes:
        return False
    else :
        return True


def print_square(size):
    """prints a square from the input"""
    for _ in range(0, size):
        print(size * "*")


def print_triangle(size): 
    """prints a triangle in *'s"""   
    for _ in range(1, size +1):
        print((size -(size -_)) * "*")  

main()
</code></pre>
<p>I suggest you the module pdb in python. It's a debug module very useful (you can see how run your algorithme step by step, go to somewhere, into a function etc ...) <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">link</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You have used these <code>return</code>'s in a wrong way, you don't really need any return'ed value since you're doing NOTHING with them in your code!</p>
<pre><code>def main():
    """main boss function"""
    shape = input("Enter shape to draw (q to quit): ").lower()

    if shape == "q":
        print("Goodbye")

    else:
        get_valid_shape(shape)
        call_shape(shape)
        main()

def call_shape(shape):
    """CALLS THE shape"""

    size = int(input("Enter size: "))
    get_valid_size(size)
    if shape == "square":
        print_square(size)

    elif shape == "triangle":
        print_triangle(size)

    else: 
        main()

def get_valid_size(size):
    """checks to see if the size is valid"""
    if size &lt;= 0:
        print("Value must be at least 1")
        main()

def get_valid_shape(shape):
    """gets a valid shape"""
    while shape not in ["square", "triangle", "q"]:
        print("Unknown shape. Please try again")
        main()


def print_square(size):
    """prints a square from the input"""
    for _ in range(0, size):
        print(size * "*")


def print_triangle(size): 
    """prints a triangle in *'s"""   
    for _ in range(1, size +1):
        print((size -(size -_)) * "*")  

main()
</code></pre>
<p>In my opinion this is an awful code since you have used useless functions, when you could write your whole code without them.</p>
<pre><code>inProgram = True
while inProgram:
    shape = raw_input("Enter shape to draw (q to quit): ").lower()
    while shape not in ["square", "triangle", "q"]:
        shape = raw_input("Unknown shape. Please try again: ").lower()
    if shape == "q":
        print("Goodbye")
        inProgram=False
    else:
        size = raw_input("Enter size: ")
        while not size.isdigit() or size&lt;=0:
            size = raw_input("Value must be at least 1\nTry again: ")
        size = int(size)
        if shape == "square":
            for _ in range(0, size):
                print(size * "*")
        else:
            for _ in range(1, size +1):
                print((size -(size -_)) * "*")  
</code></pre>
</div>
<span class="comment-copy">why do you call <code>main</code>? please don't. perhaps you want to search for some examples that show you how to do error handling properly?</span>
<span class="comment-copy">These returns make it unreadable... use <code>raise SystemExit</code> to terimate your script right after you're printing GoodBye</span>
<span class="comment-copy">tried raise SystemExit  this happened...  Traceback (most recent call last):   File "C:\Program Files (x86)\Wing IDE 101 5.1\src\debug\tserver_sandbox.py", line 65, in &lt;module&gt;   File "C:\Program Files (x86)\Wing IDE 101 5.1\src\debug\tserver_sandbox.py", line 16, in main   File "C:\Program Files (x86)\Wing IDE 101 5.1\src\debug\tserver_sandbox.py", line 51, in get_valid_shape   File "C:\Program Files (x86)\Wing IDE 101 5.1\src\debug\tserver_sandbox.py", line 20, in main   File "C:\Program Files (x86)\Wing IDE 101 5.1\src\debug\tserver_sandbox.py", line 11, in main builtins.SystemExit:</span>
<span class="comment-copy">actually <code>SystemExit</code> won't bring up any error, maybe that's because of your IDE? try to run your standalone code outside of the IDE using CMD terminal</span>
<span class="comment-copy">@PYPL this has to be submitted through a pylint checker, will this be ok?</span>
<span class="comment-copy">Sorry i forgot to add, this was for an assignment. one of the criteria was that no function could be longer than 12 lines. hence the multiple functions</span>
