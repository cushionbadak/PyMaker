<div class="post-text" itemprop="text">
<p>I'm working on a Python extension module written in C++.</p>
<p>According to the Python <a href="https://docs.python.org/3/extending/extending.html" rel="nofollow">documentation</a> the module method table should be written like this:</p>
<pre><code>static PyMethodDef SpamMethods[] = {
    ...
    {"system",  spam_system, METH_VARARGS,
    "Execute a shell command."},
    ...
    {NULL, NULL, 0, NULL}        /* Sentinel */
};
</code></pre>
<p>But I see that some developers write the sentinel like this:</p>
<pre><code>static PyMethodDef SpamMethods[] = {
    ...
    {"system",  spam_system, METH_VARARGS,
    "Execute a shell command."},
    ...
    {}                          /* Sentinel */
};
</code></pre>
<p>My question is the following is there a risk to use the shortened version?</p>
</div>
<div class="post-text" itemprop="text">
<p>A pod class initialized with <code>{}</code> has fields not explicitly set zeroed.</p>
<p>If <code>PyMethodDef</code> is pod (plain old data), as I suspect, <code>{NULL, NULL, 0, NULL}</code> will generate the same data as <code>{}</code>.</p>
<p>This is true in both C and C++.</p>
<p>If the class <code>PyMethodDef</code> was a non-pod class in C++11, <code>{NULL, NULL, 0, NULL}</code> could do something different than <code>{}</code>, but I strongly doubt that is the case here.</p>
<p>The only concern I would have is if the library changed on me to make <code>PyMethodDef</code> a non-pod, and chose to make <code>{}</code> not zero the data at the same time.  I would find that unlikely.</p>
</div>
<span class="comment-copy">There does not appear to be any risk.</span>
<span class="comment-copy">According to this post, there is no risk: <a href="http://stackoverflow.com/questions/1069621/are-members-of-a-c-struct-initialized-to-0-by-default" title="are members of a c struct initialized to 0 by default">stackoverflow.com/questions/1069621/â€¦</a>  Everything gets initialised to zero by default.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/users/333698/psmears">psmears</a> made a very interesting point about there not being a problem even if such code is compiled under C.</span>
