<div class="post-text" itemprop="text">
<p>I have a list of record instances returned by SQLAlchemy.</p>
<p>While the instances have many attributes, I want a new list with only one of the attributes. The java coder in me says:</p>
<pre><code>my_records = query.all()
names = []
for my_record in my_records:
    names.append(my_record.name)
</code></pre>
<p>...which works, of course.  But What's the Pythonic answer? I know there a one-liner that includes these 4 lines into 1, but finding it is like googling for "for".</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for what is called a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>names = [my_record.name for my_record in query.all()]
</code></pre>
<p>The above is a concise equivalent to the for-loop in your example.</p>
<hr/>
<p>In addition, you should be aware that there are <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow">dict comprehensions</a>:</p>
<pre><code>{key:val for key, val in iterable}
</code></pre>
<p>as well as <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow">set comprehensions</a>:</p>
<pre><code>{item for item in iterable}
</code></pre>
<p>which will construct new dictionaries and sets respectively.</p>
<hr/>
<p>Lastly, all of these constructs allow you to add an optional condition to be tested for each item:</p>
<pre><code>[item for item in iterable if condition]
{key:val for key, val in iterable if condition}
{item for item in iterable if condition}
</code></pre>
<p>This is useful if you want to filter the items from the iterable by the condition.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to do a list comprehension:</p>
<pre><code>result = [my_record['name'] for my_record in query.all()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively to list comprehension you can use <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter" rel="nofollow"><code>operator.attrgetter</code></a> and <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a>:</p>
<pre><code>map(operator.attrgetter('name'), query.all())
</code></pre>
<p>(But the list comprehension variant is easier to read IMO.)</p>
</div>
<span class="comment-copy">Does your dict only have a single value?</span>
<span class="comment-copy">Does names = [r.name for r in query.all()] work?</span>
<span class="comment-copy">No @EdChum, it has many.</span>
<span class="comment-copy">Sorry what I mean is that for each key in your dict is there only a single value rather than say a list of values or a tuple or a dict for each key?</span>
<span class="comment-copy">What type of query is this? If it was a django queryset you can use the <code>values_list</code> but I can't tell from your code what <code>query</code> is</span>
<span class="comment-copy">yep, that'll do it.  Sorry about the dictionary red-herring.</span>
<span class="comment-copy">Note that this will return a map object in Python 3.x.  In that version, you will need to call <code>list()</code> on the result to have the same effect as the loop in the OP's example.</span>
