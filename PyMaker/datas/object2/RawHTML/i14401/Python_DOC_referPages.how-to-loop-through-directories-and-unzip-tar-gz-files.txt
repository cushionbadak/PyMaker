<div class="post-text" itemprop="text">
<p>I have a number of subdirectories that contain <code>...tar.gz</code>
files. I am trying to use <code>os.walk()</code> to go through the individual files and unzip them using the <code>tarfile</code> module. </p>
<pre><code>import os
import tarfile

current_wkd = os.getcwd()

output_dir = '.../Tar_unzip/output'

for dirpath, dir, files in os.walk(top=current_wkd):
    #print(files) produces
    #alpha.tar.gz
    #beta.tar.gz
    #...etc
    for file in files:
        tar = tarfile.open(file)   #this line produces an error:'file cannot be opened' 
        tar.extractall(path=output)
        tar.close() 
</code></pre>
<p>I am trying to iterate through the different directories and extract the <code>..tar.gz</code> files. I've also tried to use: </p>
<pre><code>...
for file in files:
if file.endswith('.gz'):  #find files that end with .gz 
    #some folders contain other files
    #that may result in an error? 
    tar = tarfile.open(file)
    tar.extractall(path=output_dir)
</code></pre>
<p>I am really interested in whether python can be used to move around directories (iteration) and perform some functions, such as unzipping files, etc. </p>
<p>Any help is much appreciated. I'm new to Python. Thank you. </p>
</div>
<div class="post-text" itemprop="text">
<p>As explained in the <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow"><code>os.walk</code></a> docs:</p>
<blockquote>
<p>Note that the names in the lists contain no path components. To get a full path (which begins with top) to a file or directory in <em>dirpath</em>, do <code>os.path.join(dirpath, name)</code>.</p>
</blockquote>
<p>And of course you saw exactly that yourself, printing out <code>alpha.tar.gz</code>, etc, which obviously aren't absolute pathnames or relative pathnames from the current working directory or anything else you could access, just bare filenames.</p>
<p>Also notice that every example given in the docs does exactly what's recommended. For example:</p>
<pre><code>import os
for root, dirs, files in os.walk(top, topdown=False):
    for name in files:
        os.remove(os.path.join(root, name))
    for name in dirs:
        os.rmdir(os.path.join(root, name))
</code></pre>
<p>So, in your case:</p>
<pre><code>for dirpath, dir, files in os.walk(top=current_wkd):
    for file in files:
        tar = tarfile.open(os.path.join(dirpath, file))
        tar.extractall(path=output)
        tar.close()
</code></pre>
<p>One more thing:</p>
<pre><code>output_dir = '.../Tar_unzip/output'
</code></pre>
<p>This is almost certainly going to cause an error. For one thing, <code>output</code> and <code>output_dir</code> are not the same name. For another, <code>...</code> doesn't mean anything; you probably wanted <code>..</code>?</p>
</div>
<span class="comment-copy">From the edit 27 minutes ago, it looks like you're searching for all gzipped files, not just gzipped tarballs (<code>file.endswith('.gz')</code> instead of the original <code>'.tar.gz'</code>). So, <code>tarfile.open('spam.gz')</code> is going to raise an exception because the ungzipped <code>spam</code> is not a tarball. You could fix this by using an <code>except tarfile.ReadError:</code> to, e.g., log and skip over the non-tar-files, but it would probably easier to search for <code>.tar.gz</code> in the first place.</span>
<span class="comment-copy">Thank you!! I appreciate the explanation. I had os.path.join originally put I see now where I made the mistake!</span>
<span class="comment-copy">Still same error: File "/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/tarfile.py", line 1553, in open     raise ReadError("file could not be opened successfully") tarfile.ReadError: file could not be opened successfully</span>
<span class="comment-copy">@Novice: That's a completely different error. Most likely because you're trying to read <code>.tar.gz</code> files as if they were <code>.tar</code> files.</span>
<span class="comment-copy">I'm going through the tarfile docs right now to see if I can figure it out. I agree. Thanks!</span>
<span class="comment-copy">@Novice: Is your actual code just using <code>tarfile.open(â€¦)</code> with no other arguments? Because if so, unless you're using a really old Python (I think just 2.3-2.4?), it should handle gzip automatically if you don't pass a non-default mode. You may still want to try handling the <code>gzip</code> and <code>tar</code> separately to see which one is failing. Also, make sure <code>tar -tvzf /path/to/foo.tar.gz</code> works from the command line.</span>
