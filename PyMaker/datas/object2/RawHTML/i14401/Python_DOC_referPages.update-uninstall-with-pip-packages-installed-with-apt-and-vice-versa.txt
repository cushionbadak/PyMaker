<div class="post-text" itemprop="text">
<p>There are a number of resources that compare and contrast the advantages and disadvantages of using <code>apt-get</code> and <code>pip</code> to install, update, and uninstall python packages.</p>
<p>What I cannot find is a resource that indicates what happens if something that is installed by one package manager is updated or uninstalled by the other.</p>
<p>When I run <code>pip list</code>, it lists a lot of packages that are installed, most of which on my system were installed by <code>apt-get</code> and not <code>pip</code>.</p>
<p>So, are these two package managers able to manage packages installed by the other? Or, is <code>pip</code> able to manage a package installed by <code>apt-get</code>, but then <code>apt-get</code> is messed up afterwards. Is <code>apt-get</code> able to manage a package installed by <code>pip</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend to try and avoid using two (or more) package managers at the same time. It's not very likely that they will cooperate correctly and smoothly. </p>
<p>If possible, pick one of them and use it. Combine them only if you really need to. Usually you don't.</p>
<p>There are ways of avoiding conflicts such as</p>
<ul>
<li><code>pip install --user &lt;package&gt;</code> which installs the package into the user's directory only</li>
<li><a href="https://virtualenv.pypa.io/en/latest/" rel="nofollow">virtualenv</a> which allows you to have packages installed per application/project - this is a very good idea since various projects might need different versions of the same package and it's easy to move such project do a different computer etc.</li>
<li><a href="https://docs.python.org/3/library/venv.html#module-venv" rel="nofollow">venv</a> - Python 3 has a built-in support for virtual environments</li>
</ul>
</div>
<span class="comment-copy">rule of thumb: if in doubt, never use more than one package manager. All package managers I know of are selfish - they expect to be the only one merging packages into your system. But with pip you have a lot of options: You can use <code>pip install --user</code> to install packages into your user's home directory. An even better choice is to use <code>virtualenv</code> to make sure you do not interfere with system's python.</span>
