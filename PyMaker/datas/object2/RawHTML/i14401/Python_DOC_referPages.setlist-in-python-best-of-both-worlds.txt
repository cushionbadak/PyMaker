<div class="post-text" itemprop="text">
<p>Python has an <a href="http://www.python.org/dev/peps/pep-0372/" rel="noreferrer">ordered dictionary</a>. What about an ordered set?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is an <a href="http://code.activestate.com/recipes/576694/" rel="noreferrer">ordered set</a> (possible <a href="https://github.com/ActiveState/code/blob/3b27230f418b714bc9a0f897cb8ea189c3515e99/recipes/Python/576696_OrderedSet_with_Weakrefs/README.md" rel="noreferrer">new link</a>) recipe for this which is referred to from the <a href="https://docs.python.org/2/library/collections.html" rel="noreferrer">Python 2 Documentation</a>. This runs on Py2.6 or later and 3.0 or later without any modifications. The interface is almost exactly the same as a normal set, except that initialisation should be done with a list.</p>
<pre><code>OrderedSet([1, 2, 3])
</code></pre>
<p>This is a MutableSet, so the signature for <code>.union</code> doesn't match that of set, but since it includes <code>__or__</code> something similar can easily be added:</p>
<pre><code>@staticmethod
def union(*sets):
    union = OrderedSet()
    union.union(*sets)
    return union

def union(self, *sets):
    for set in sets:
        self |= set
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>An ordered set is functionally a special case of an ordered dictionary.</h2>
<p>The keys of a dictionary are unique. Thus, if one disregards the values in an ordered dictionary (e.g. by assigning them <code>None</code>), then one has essentially an ordered set.</p>
<p><a href="http://docs.python.org/3.1/whatsnew/3.1.html" rel="noreferrer">As of Python 3.1</a> there is <a href="http://docs.python.org/dev/py3k/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>collections.OrderedDict</code></a>. The following is an example implementation of an OrderedSet. (Note that only few methods need to be defined or overridden: <code>collections.OrderedDict</code> and <a href="http://docs.python.org/3.1/library/collections.html#abcs-abstract-base-classes" rel="noreferrer"><code>collections.MutableSet</code></a> do the heavy lifting.)</p>
<pre><code>import collections

class OrderedSet(collections.OrderedDict, collections.MutableSet):

    def update(self, *args, **kwargs):
        if kwargs:
            raise TypeError("update() takes no keyword arguments")

        for s in args:
            for e in s:
                 self.add(e)

    def add(self, elem):
        self[elem] = None

    def discard(self, elem):
        self.pop(elem, None)

    def __le__(self, other):
        return all(e in other for e in self)

    def __lt__(self, other):
        return self &lt;= other and self != other

    def __ge__(self, other):
        return all(e in self for e in other)

    def __gt__(self, other):
        return self &gt;= other and self != other

    def __repr__(self):
        return 'OrderedSet([%s])' % (', '.join(map(repr, self.keys())))

    def __str__(self):
        return '{%s}' % (', '.join(map(repr, self.keys())))

    difference = property(lambda self: self.__sub__)
    difference_update = property(lambda self: self.__isub__)
    intersection = property(lambda self: self.__and__)
    intersection_update = property(lambda self: self.__iand__)
    issubset = property(lambda self: self.__le__)
    issuperset = property(lambda self: self.__ge__)
    symmetric_difference = property(lambda self: self.__xor__)
    symmetric_difference_update = property(lambda self: self.__ixor__)
    union = property(lambda self: self.__or__)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Implementations on PyPI</h1>
<p>While others have pointed out that there is no built-in implementation of an insertion-order preserving set in Python (yet), I am feeling that this question is missing an answer which states what there is to be found on <a href="https://pypi.python.org" rel="noreferrer">PyPI</a>.</p>
<p>To the best of my knowledge there currently is:</p>
<ul>
<li><a href="https://pypi.python.org/pypi/ordered-set/" rel="noreferrer">ordered-set</a></li>
<li><a href="https://pypi.python.org/pypi/oset/" rel="noreferrer">oset</a></li>
</ul>
<p>Both implementations are based on the <a href="http://code.activestate.com/recipes/576694/" rel="noreferrer">recipe posted by Raymond Hettinger to ActiveState</a> which is also mentioned in other answers here. I have checked out both and identified the following </p>
<h2>critical differences:</h2>
<ul>
<li>ordered-set (version 1.1)

<ul>
<li>advantage: O(1) for lookups by index (e.g. <code>my_set[5]</code>)</li>
<li>disadvantage: <code>remove(item)</code> not implemented </li>
</ul></li>
<li>oset (version 0.1.3)

<ul>
<li>advantage: O(1) for <code>remove(item)</code></li>
<li>disadvantage: apparently O(n) for lookups by index</li>
</ul></li>
</ul>
<p>Both implementations have O(1) for <code>add(item)</code> and <code>__contains__(item)</code> (<code>item in my_set</code>).</p>
<p>Unfortunately neither implementation has method-based set operations like <code>set1.union(set2)</code> -&gt; You have to use the operator-based form like <code>set1 | set2</code> instead. See the <a href="https://docs.python.org/2/library/sets.html#set-objects" rel="noreferrer">Python documentation on Set Objects</a> for a full list of set operation methods and their operator-based equivalents.</p>
<p>I first went with ordered-set until I used <code>remove(item)</code> for the first time which crashed my script with a <code>NotImplementedError</code>. As I have never used lookup by index so far, I meanwhile switched to oset. </p>
<p><em>If you know about other implementations on PyPI, let me know in the comments.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>I can do you one better than an OrderedSet: boltons has <a href="http://boltons.readthedocs.org/en/latest/setutils.html" rel="noreferrer">a pure-Python, 2/3-compatible <code>IndexedSet</code> type</a> that is not only an ordered set, but also supports indexing (as with lists).</p>
<p>Simply <code>pip install boltons</code> (or copy <code>setutils.py</code> into your codebase), import the <code>IndexedSet</code> and:</p>
<pre><code>&gt;&gt;&gt; from boltons.setutils import IndexedSet
&gt;&gt;&gt; x = IndexedSet(list(range(4)) + list(range(8)))
&gt;&gt;&gt; x
IndexedSet([0, 1, 2, 3, 4, 5, 6, 7])
&gt;&gt;&gt; x - set(range(2))
IndexedSet([2, 3, 4, 5, 6, 7])
&gt;&gt;&gt; x[-1]
7
&gt;&gt;&gt; fcr = IndexedSet('freecreditreport.com')
&gt;&gt;&gt; ''.join(fcr[:fcr.index('.')])
'frecditpo'
</code></pre>
<p>Everything is unique and retained in order. Full disclosure: I wrote the <code>IndexedSet</code>, but that also means <a href="https://github.com/mahmoud/boltons/issues" rel="noreferrer">you can bug me if there are any issues</a>. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer is no, but you can use <a href="https://docs.python.org/3/library/collections.html" rel="noreferrer"><code>collections.OrderedDict</code></a>, which is in the Python Standard Library, with just keys (and values as <code>None</code>) for the same purpose.</p>
<p>Here's an example of how to use <code>OrderedDict</code> as an ordered set to filter out duplicate items while preserving order:</p>
<pre><code>&gt;&gt;&gt; keywords = ['foo', 'bar', 'bar', 'foo', 'baz', 'foo']

&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; list(OrderedDict.fromkeys(keywords).keys())
['foo', 'bar', 'baz']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're using the ordered set to maintain a sorted order, consider using a sorted set implementation from PyPI. The <a href="http://www.grantjenks.com/docs/sortedcontainers/">sortedcontainers</a> module provides a <a href="http://www.grantjenks.com/docs/sortedcontainers/sortedset.html">SortedSet</a> for just this purpose. Some benefits: pure-Python, fast-as-C implementations, 100% unit test coverage, hours of stress testing.</p>
<p>Installing from PyPI is easy with pip:</p>
<pre><code>pip install sortedcontainers
</code></pre>
<p>Note that if you can't <code>pip install</code>, simply pull down the sortedlist.py and sortedset.py files from the <a href="https://github.com/grantjenks/sorted_containers">open-source repository</a>.</p>
<p>Once installed you can simply:</p>
<pre><code>from sortedcontainers import SortedSet
help(SortedSet)
</code></pre>
<p>The sortedcontainers module also maintains a <a href="http://www.grantjenks.com/docs/sortedcontainers/performance.html">performance comparison</a> with several alternative implementations.</p>
<p>For the comment that asked about Python's bag data type, there's alternatively a <a href="http://www.grantjenks.com/docs/sortedcontainers/sortedlist.html">SortedList</a> data type which can be used to efficiently implement a bag.</p>
</div>
<div class="post-text" itemprop="text">
<p>A little late to the game, but I've written a class <code>setlist</code> as part of <code>collections-extended</code> that fully implements both <code>Sequence</code> and <code>Set</code></p>
<pre><code>&gt;&gt;&gt; from collections_extended import setlist
&gt;&gt;&gt; sl = setlist('abracadabra')
&gt;&gt;&gt; sl
setlist(('a', 'b', 'r', 'c', 'd'))
&gt;&gt;&gt; sl[3]
'c'
&gt;&gt;&gt; sl[-1]
'd'
&gt;&gt;&gt; 'r' in sl  # testing for inclusion is fast
True
&gt;&gt;&gt; sl.index('d')  # so is finding the index of an element
4
&gt;&gt;&gt; sl.insert(1, 'd')  # inserting an element already in raises a ValueError
ValueError
&gt;&gt;&gt; sl.index('d')
4
</code></pre>
<p>GitHub: <a href="https://github.com/mlenzen/collections-extended" rel="noreferrer">https://github.com/mlenzen/collections-extended</a></p>
<p>Documentation: <a href="http://collections-extended.lenzm.net/en/latest/" rel="noreferrer">http://collections-extended.lenzm.net/en/latest/</a></p>
<p>PyPI: <a href="https://pypi.python.org/pypi/collections-extended" rel="noreferrer">https://pypi.python.org/pypi/collections-extended</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In case you're already using pandas in your code, its <code>Index</code> object behaves pretty like an ordered set, as shown in <a href="https://www.oreilly.com/learning/introducing-pandas-objects" rel="noreferrer">this article</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no <code>OrderedSet</code> in official library.
I make an exhaustive cheatsheet of all the data structure for your reference.</p>
<pre><code>DataStructure = {
    'Collections': {
        'Map': [
            ('dict', 'OrderDict', 'defaultdict'),
            ('chainmap', 'types.MappingProxyType')
        ],
        'Set': [('set', 'frozenset'), {'multiset': 'collection.Counter'}]
    },
    'Sequence': {
        'Basic': ['list', 'tuple', 'iterator']
    },
    'Algorithm': {
        'Priority': ['heapq', 'queue.PriorityQueue'],
        'Queue': ['queue.Queue', 'multiprocessing.Queue'],
        'Stack': ['collection.deque', 'queue.LifeQueue']
        },
    'text_sequence': ['str', 'byte', 'bytearray']
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For many purposes simply calling sorted will suffice.  For example</p>
<pre><code>&gt;&gt;&gt; s = set([0, 1, 2, 99, 4, 40, 3, 20, 24, 100, 60])
&gt;&gt;&gt; sorted(s)
[0, 1, 2, 3, 4, 20, 24, 40, 60, 99, 100]
</code></pre>
<p>If you are going to use this repeatedly, there will be overhead incurred by calling the sorted function so you might want to save the resulting list, as long as you're done changing the set.  If you need to maintain unique elements and sorted, I agree with the suggestion of using OrderedDict from collections with an arbitrary value such as None.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://github.com/rcbellamy/ParallelRegression" rel="nofollow noreferrer">ParallelRegression</a> package provides a <a href="https://parallel-regression.readthedocs.io/en/latest/ParallelRegression.html#setlist" rel="nofollow noreferrer">setList( )</a> ordered set class that is more method-complete than the options based on the ActiveState recipe.  It supports all methods available for lists and most if not all methods available for sets.</p>
</div>
<div class="post-text" itemprop="text">
<p>So i also had a small list where i clearly had the possibility of introducing non-unique values.</p>
<p>I searched for the existence of a unique list of some sort, but then realized that testing the existence of the element before adding it works just fine.</p>
<pre><code>if(not new_element in my_list):
    my_list.append(new_element)
</code></pre>
<p>I don't know if there are caveats to this simple approach, but it solves my problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are four kinds of ordering one might want, I believe:</p>
<ol>
<li>Ordered by key</li>
<li>Ordered by value (I've not heard of anyone ask for this one though)</li>
<li>Ordered by modification time</li>
<li>Ordered by addition time</li>
</ol>
<p>I believe collections.OrderedDict gets you #4.  Or you could remove a key and re-add it, for #3.</p>
<p>For #1, you probably should check into a red-black tree or treap:</p>
<ul>
<li><a href="http://pypi.python.org/pypi/bintrees/0.3.0" rel="nofollow">http://pypi.python.org/pypi/bintrees/0.3.0</a></li>
<li><a href="http://pypi.python.org/pypi/rbtree/" rel="nofollow">http://pypi.python.org/pypi/rbtree/</a></li>
<li><a href="http://stromberg.dnsalias.org/~dstromberg/treap/" rel="nofollow">http://stromberg.dnsalias.org/~dstromberg/treap/</a></li>
</ul>
<p>Red-Black trees have low variability in operation times (so might be better for interactive applications), but aren't as fast as treaps on average (which might be better for batch processing - treaps don't reorganize themselves often making them fast on average, but when they do reorganize it might take a relatively long while).</p>
<p>Both of these are established data structures with implementations in many languages.</p>
</div>
<span class="comment-copy">what about the converse, a bag of things?  (unordered and non-unique)</span>
<span class="comment-copy">@wim <code>collections.Counter</code> is Python's bag.</span>
<span class="comment-copy">What if something gets added twice? What should the position be?</span>
<span class="comment-copy">@McKay - if it were to follow the behavior of collections.OrderDict it would still be in the position of the initial addition</span>
<span class="comment-copy">I selected my own answer because the reference from the documentation makes this close to an official answer</span>
<span class="comment-copy">The interface is NOT exactly the same as the normal set object, many essential methods are missing such as <code>update</code>, <code>union</code>, <code>intersection</code>.</span>
<span class="comment-copy">FYI, I noticed that a <a href="https://github.com/LuminosoInsight/ordered-set" rel="nofollow noreferrer">slightly modified version</a> of the <a href="http://code.activestate.com/recipes/576694/" rel="nofollow noreferrer">recipe cited in this answer</a> has been <a href="https://github.com/LuminosoInsight/ordered-set" rel="nofollow noreferrer">added to PyPi</a> as "ordered-set"</span>
<span class="comment-copy">I'm pretty sure you're not allowed to have two methods both called <code>union</code> in the same class.  The last one will "win" and the first one will fail to exist at runtime.  This is because <code>OrderedSet.union</code> (no parens) has to refer to a <i>single</i> object.</span>
<span class="comment-copy">There is also "orderedset" package which is based on the same recipe but implemented in Cython -- <a href="https://pypi.python.org/pypi/orderedset" rel="nofollow noreferrer">pypi.python.org/pypi/orderedset</a> .</span>
<span class="comment-copy">A useful approximation for several purposes, but it doesn't have the nice set operations.</span>
<span class="comment-copy">@Casebash: yes, one may want to define a class <code>OrderedSet</code> which subclasses <code>OrderedDict</code> and <code>abc.Set</code> and then define <code>__len__</code>, <code>__iter__</code> and <code>__contains__</code>.</span>
<span class="comment-copy">@Stephan202: Regrettably, the collection ABCs live in <code>collections</code>, but otherwise a good suggestion</span>
<span class="comment-copy">This is true, but you do have a lot of wasted space as a result, which  leads to suboptimal performance.</span>
<span class="comment-copy">An addition; collections.OrderedDict is also available in python 2.7.</span>
<span class="comment-copy">A new contender is <a href="http://stackoverflow.com/a/28052907/1031434">collections_extended.setlist</a>. Functions like <code>set.union</code> don't work on it though, even though it inherits <code>collections.abc.Set</code>.</span>
<span class="comment-copy"><code>OrderedSet</code> now supports <a href="http://orderedset.readthedocs.org/en/latest/orderedset.html#orderedset.OrderedSet.remove" rel="nofollow noreferrer"><code>remove</code></a></span>
<span class="comment-copy">Maybe worth mentioning that this also works (faster) with vanilla <code>dict.fromkeys()</code>. But in that case, key order is only preserved in CPython 3.6+ implementations, so <code>OrderedDict</code> is a more portable solution when order matters.</span>
<span class="comment-copy">won't work if the values are not string</span>
<span class="comment-copy">Note that the <code>SortedSet</code> class there requires members to be comparable and hashable.</span>
<span class="comment-copy">@gsnedders The builtins <code>set</code> and <code>frozenset</code> also require elements to be hashable. The comparable constraint is the addition for <code>SortedSet</code>, but it's also an obvious constraint.</span>
<span class="comment-copy">As the name suggests, this does not maintain order. It is nothing but sorted(set([sequence])) which makes better?</span>
<span class="comment-copy">@ldmtwo I'm not sure which you're referring to but just to be clear, <a href="http://www.grantjenks.com/docs/sortedcontainers/sortedset.html" rel="nofollow noreferrer">SortedSet</a> as part of <a href="http://www.grantjenks.com/docs/sortedcontainers/" rel="nofollow noreferrer">Sorted Containers</a> does maintain sorted order.</span>
<span class="comment-copy">The purpose for OrderedSet is to be able to get the items in the order which they where added to the set. You example could maybe called SortedSet...</span>
<span class="comment-copy">Didn't know about <code>sorted()</code>, thanks!</span>
<span class="comment-copy">The main issue with this approach is that adding runs in O(n). Meaning it gets slower with big lists. Python's built-in sets are very good at making adding elements faster. But for simple use-cases, it certainly does work!</span>
<span class="comment-copy">Sorry, while this might be true, it doesn't answer the question at all, which is specifically not about ordered dictionaries, but about ordered sets (in Python).</span>
