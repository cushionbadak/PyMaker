<div class="post-text" itemprop="text">
<p>I use below code add timestamp into print. but it is strange why it add two timestamp around message.  </p>
<pre><code>old_f = sys.stdout

class CFout:
    def write(self, x):
        old_f.write("%s %s " % (datetime.now().strftime("%d/%m/%Y %H:%M:%S:%f"), x))

sys.stdout = CFout()
</code></pre>
<p>When I <code>print True</code>. it output as below.  </p>
<pre><code>15/05/2015 05:42:02:121945 True 15/05/2015 05:42:02:121977
</code></pre>
<p>Before and after <code>True</code>, there are two timestamp.<br/>
why is this? I only want to add timestamp before <code>True</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>It's due to the fact that the <code>print</code> statement or function performs <em>two</em> calls to <code>write</code>, one to print the message (<code>'True'</code>) and one for the ending newline or space.</p>
<p>You can see this using a script like the following:</p>
<pre><code>import sys
from datetime import datetime

args = []

class CFout:
    def write(self, x):
        args.append(x)
        sys.__stdout__.write("%s %s " % (datetime.now().strftime("%d/%m/%Y %H:%M:%S:%f"), x))


sys.stdout = CFout()

print True
print False
print 1, 2, 3

sys.stdout = sys.__stdout__
print 'arguments were'
print args
</code></pre>
<p>Called results in:</p>
<pre><code>$python2 prnt.py 
15/05/2015 08:07:03:171182 True 15/05/2015 08:07:03:171392 
 15/05/2015 08:07:03:171452 False 15/05/2015 08:07:03:171477 
 15/05/2015 08:07:03:171517 1 15/05/2015 08:07:03:171540   15/05/2015 08:07:03:171561 2 15/05/2015 08:07:03:171581   15/05/2015 08:07:03:171601 3 15/05/2015 08:07:03:171621 
 arguments were
['True', '\n', 'False', '\n', '1', ' ', '2', ' ', '3', '\n']
</code></pre>
<p>Note:</p>
<ul>
<li><code>'True'</code> and <code>'\n'</code> are the arguments for the two calls performed when doing <code>print True</code>.</li>
<li><code>'False'</code> and <code>'\n'</code> are the arguments for the two calls performed when doing <code>print False</code></li>
<li><code>'1'</code>, <code>' '</code>, <code>'2'</code>, <code>' '</code>, <code>'3'</code> and <code>'\n'</code> are the arguments performed when doing <code>print 1,2,3</code>.</li>
</ul>
<p>An other way of seeing this is by using exceptions:</p>
<pre><code>&gt;&gt;&gt; print 1, 1/0, 2
1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
</code></pre>
<p>Note: the <code>1</code> was still printed even though the <code>1/0</code> raised an exception. What python is doing is taking each single portion of the stuff to print, evaluating it and then calling <code>write</code>. Afterwards it calls <code>write(' ')</code> to print the space due to the comma and finally evaluates <code>1/0</code> which results in an exception.</p>
<p>In the same way <code>print True</code> first evaluates <code>True</code>, then calls <code>write(str(True))</code> and finally calls <code>write('\n')</code> to add the final newline.</p>
<p>If you want to propoerly attach a timestamp to messages you should use the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow"><code>logging</code></a> module instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Base on @Bakuriu answer, I am using below code to achieve my object as I am confident that I will not use "\n" in print message. :). I post here if others are also interesting.  </p>
<pre><code>old_f = sys.stdout
class CFout:
    def write(self, x):
        if x.find("\n") == -1:
            old_f.write("%s %s " % (datetime.now().strftime("%d/%m/%Y %H:%M:%S:%f"), x))
        else:
            old_f.write(x)
sys.stdout = CFout()
</code></pre>
</div>
<span class="comment-copy">You you should use <code>logging</code>for this task: <a href="https://docs.python.org/2/library/logging.html" rel="nofollow noreferrer">docs.python.org/2/library/logging.html</a></span>
