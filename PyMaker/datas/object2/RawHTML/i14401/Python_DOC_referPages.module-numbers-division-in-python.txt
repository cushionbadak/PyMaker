<div class="post-text" itemprop="text">
<p>Python has got <code>number</code> modules</p>
<pre><code>&gt;&gt;&gt; import numbers
&lt;module 'numbers' from 'C:\Python27\lib\numbers.pyc'&gt;
</code></pre>
<p>and the numbers module has something called <code>division</code> - I don't know if it's a function, a attribute, a constant.... </p>
<pre><code>&gt;&gt;&gt; numbers.division
_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
</code></pre>
<p>What is that? No reference to it on the <a href="https://docs.python.org/2/library/numbers.html#module-numbers" rel="nofollow">Docs</a><br/>
Is that some internal feature of python or something?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is one of the <a href="https://docs.python.org/3/library/__future__.html#module-__future__" rel="nofollow"><code>__future__</code></a> features</p>
<pre><code>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; division
_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
&gt;&gt;&gt; numbers.division is division
True
</code></pre>
<p>defined in the <a href="https://hg.python.org/cpython/file/fb5fcae0cf1f/Lib/__future__.py#l114" rel="nofollow"><code>__future__.py</code></a> as follows</p>
<pre><code>division = _Feature((2, 2, 0, "alpha", 2),
                    (3, 0, 0, "alpha", 0),
                    CO_FUTURE_DIVISION)
</code></pre>
<p><a href="https://hg.python.org/cpython/file/34523e53a342/Lib/numbers.py#l8" rel="nofollow">The <code>numbers</code> module imports <code>__future__.division</code> into its namespace</a>, making it available via regular attribute access.</p>
<hr/>
<p>You can get more information about this feature from the <a href="https://www.python.org/dev/peps/pep-0238/" rel="nofollow">PEP 238</a>:</p>
<blockquote>
<p>The future division statement, spelled <code>from __future__ import division</code>, will change the <code>/</code> operator to mean true division
         throughout the module.</p>
</blockquote>
<p>This kind of division is default, starting from Python 3+.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/python/cpython/blob/2.7/Lib/numbers.py#L8" rel="nofollow"><code>numbers</code> does <code>from __future__ import division</code></a> which imports the name into scope.</p>
<p><code>division</code> happens to have that value.</p>
</div>
<div class="post-text" itemprop="text">
<p>To expand on vaultah's answer a little: </p>
<p>When you work in python2, there's an option to do things in a more python3-friendly fashion (the two aren't fully compatible). <code>from __future__ import division</code>, for instance. Here's the difference in this case: </p>
<pre><code>a p$ ipython2
In [1]: 1 / 2
Out[1]: 0

In [2]: 2 / 3
Out[2]: 0

In [3]: from __future__ import division

In [4]: 1/2
Out[4]: 0.5

In [5]: 2/3
Out[5]: 0.6666666666666666
</code></pre>
<p><code>__future__</code> is just a magical container that wraps certain other functions; in this case, that other function is held in <code>numbers</code>.</p>
<p>Check out the docs for more info: <a href="https://docs.python.org/2/library/__future__.html" rel="nofollow">https://docs.python.org/2/library/__future__.html</a></p>
</div>
<span class="comment-copy">"__future__ is just a magical container" - what do you mean? And <code>_Feature</code> instances are not "functions". And <code>division</code> isn't actually "held" in <code>numbers</code>.</span>
<span class="comment-copy">I don't think he should have accepted my answer either, I was just trying to give a little context, which wasn't possible in the space of a comment. That context involved some fuzzy definitions, and it's good of you to try to keep people honest, but he can read more in the official docs and get a technical understanding in time. SO isn't really here to replace or regurgitate official documentation, so I just pointed to it and gave a high-level, opinionated overview of the situation.</span>
<span class="comment-copy">@vaultah and a p , I had actually accepted your answer just to motivate and encourage you to answer more, as vaultah is already a veteran here in Stack Overflow. I have enough python knowledge to understand a p answer even knowing the definitions weren't literally correct, however, as well-reminded, this question can be seen in the future by other users so the best answer should be the one that everybody understands. Thank you both for the explanation</span>
<span class="comment-copy">@RafaelCardoso cool, and now all is right with the world again. (people here take their karma very seriously, it seems ;)</span>
