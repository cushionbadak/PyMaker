<div class="post-text" itemprop="text">
<p>If I have a <code>dict</code> of lists like:</p>
<pre><code>{
    'id1': ['a', 'b', 'c'],
    'id2': ['a', 'b'],
    # etc.
}
</code></pre>
<p>and I want to tally the size of the lists, i.e.. the number of ids &gt;0, &gt;1, &gt;2...etc</p>
<p>Is there an easier way than nested for loops like this:</p>
<pre><code>dictOfOutputs = {}
for x in range(1,11):
    count = 0
    for agentId in userIdDict:
        if len(userIdDict[agentId]) &gt; x:
            count += 1
    dictOfOutputs[x] = count        
return dictOfOutputs
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter()</code> object</a> to collect lengths, then accumulate the sums:</p>
<pre><code>from collections import Counter

lengths = Counter(len(v) for v in userIdDict.values())
total = 0
accumulated = {}
for length in range(max(lengths), -1, -1):
    count = lengths.get(length, 0)
    total += count
    accumulated[length] = total
</code></pre>
<p>So this collects counts for each length, then builds a dictionary with accumulative lengths. This is a O(N) algorithm; you loop over all values once, then add on some smaller straight loops (for <code>max()</code> and the accumulation loop):</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; import random
&gt;&gt;&gt; testdata = {''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(5)): [None] * random.randint(1, 10) for _ in range(100)}
&gt;&gt;&gt; lengths = Counter(len(v) for v in testdata.values())
&gt;&gt;&gt; lengths
Counter({8: 14, 7: 13, 2: 11, 3: 10, 4: 9, 5: 9, 9: 9, 10: 9, 1: 8, 6: 8})
&gt;&gt;&gt; total = 0
&gt;&gt;&gt; accumulated = {}
&gt;&gt;&gt; for length in range(max(lengths), -1, -1):
...     count = lengths.get(length, 0)
...     total += count
...     accumulated[length] = total
... 
&gt;&gt;&gt; accumulated
{0: 100, 1: 100, 2: 92, 3: 81, 4: 71, 5: 62, 6: 53, 7: 45, 8: 32, 9: 18, 10: 9}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, there is a better way.</p>
<p>First, index the ids by the length of their data:</p>
<pre><code>my_dict = {
    'id1': ['a', 'b', 'c'],
    'id2': ['a', 'b'],
}

from collections import defaultdict
ids_by_data_len = defaultdict(list)

for id, data in my_dict.items():
    my_dict[len(data)].append(id)
</code></pre>
<p>Now, create your dict:</p>
<pre><code>output_dict = {}
accumulator = 0
# note: the end of a range is non-inclusive!
for data_len in reversed(range(1, max(ids_by_data_len.keys()) + 1):
    accumulator += len(ids_by_data_len.get(data_len, []))
    output_dict[data_len-1] = accumulator
</code></pre>
<p>This has O(n) complexity rather than O(nÂ²), so it's also much faster for large sets of data.</p>
</div>
