<div class="post-text" itemprop="text">
<p>I have the following two superclasses:</p>
<pre><code>class Parent1(object):
    def on_start(self):
        print('do something')

class Parent2(object):
    def on_start(self):
        print('do something else')
</code></pre>
<p>I would like to have a child class that inherits from both be able to call super for both parents.</p>
<pre><code>class Child(Parent1, Parent2):
    def on_start(self):
        # super call on both parents
</code></pre>
<p>What is the Pythonic way to do this? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Exec summary:</p>
<p><a href="https://docs.python.org/2/library/functions.html#super" rel="noreferrer">Super</a> only executes one method based on the class hierarchy's <a href="http://python-history.blogspot.com/2010/06/method-resolution-order.html" rel="noreferrer"><code>__mro__</code></a>. If you want to execute more than one method by the same name, your parent classes need to written to cooperatively do that (by calling <code>super</code> implicitly or explicitly) or you need to loop over <a href="https://docs.python.org/2/library/stdtypes.html#class.__bases__" rel="noreferrer"><code>__bases__</code></a> or the <a href="https://docs.python.org/2/library/stdtypes.html#class.__mro__" rel="noreferrer"><code>__mro__</code></a> values of the child classes.</p>
<p>The job of <code>super</code> is to delegate part or all of a method call to some existing method in the classes ancestor tree. <em>The delegation may go well outside of classes that you control. The method name delegated needs to exist in the group of base classes.</em></p>
<p>The method presented below using <code>__bases__</code> with <code>try/except</code> is closest to a complete answer to your question of how to call each parent's method of the same name.</p>
<hr/>
<p><code>super</code> is useful in the situation where you want to call one of your parent's methods, but you don't know which parent:</p>
<pre><code>class Parent1(object):
    pass

class Parent2(object):
    # if Parent 2 had on_start - it would be called instead 
    # because Parent 2 is left of Parent 3 in definition of Child class
    pass

class Parent3(object):
    def on_start(self):
        print('the ONLY class that has on_start')        

class Child(Parent1, Parent2, Parent3):
    def on_start(self):
        super(Child, self).on_start()
</code></pre>
<p>In this case, <code>Child</code> has three immediate parents. Only one, Parent3, has an <code>on_start</code> method. Calling <code>super</code> resolves that only <code>Parent3</code> has <code>on_start</code> and that is the method that is called. </p>
<p>If <code>Child</code> inherits from more than one class that has an <code>on_start</code> method, the order is resolved left to right (as listed in the class definition) and bottom to top (as logical inheritance). <em><strong>Only one of the methods is called and the other methods of the same name in the hierarchy of classes have been superseded.</strong></em></p>
<p>So, more commonly:</p>
<pre><code>class GreatGrandParent(object):
    pass

class GrandParent(GreatGrandParent):
    def on_start(self):
        print('the ONLY class that has on_start')

class Parent(GrandParent):
    # if Parent had on_start, it would be used instead
    pass        

class Child(Parent):
    def on_start(self):
        super(Child, self).on_start()
</code></pre>
<hr/>
<p>If you want to call multiple parents methods by method name, you can use <code>__bases__</code> instead of super in this case and iterate over the base classes of <code>Child</code> without knowing the classes by name:</p>
<pre><code>class Parent1(object):
    def on_start(self):
        print('do something')

class Parent2(object):
    def on_start(self):
        print('do something else')

class Child(Parent1, Parent2):
    def on_start(self):
        for base in Child.__bases__:
            base.on_start(self)

&gt;&gt;&gt; Child().on_start()
do something
do something else
</code></pre>
<p>If there is a possibility one of the base classes does not have <code>on_start</code> you can use <code>try/except:</code></p>
<pre><code>class Parent1(object):
    def on_start(self):
        print('do something')

class Parent2(object):
    def on_start(self):
        print('do something else')

class Parent3(object):
    pass        

class Child(Parent1, Parent2, Parent3):
    def on_start(self):
        for base in Child.__bases__:
            try:
                base.on_start(self)
            except AttributeError:
                # handle that one of those does not have that method
                print('"{}" does not have an "on_start"'.format(base.__name__))

&gt;&gt;&gt; Child().on_start()
do something
do something else
"Parent3" does not have an "on_start"
</code></pre>
<p>Using <code>__bases__</code> will act similar to <code>super</code> but for each class hierarchy defined in the <code>Child</code> definition. ie, it will go though each forbearer class until <code>on_start</code> is satisfied <strong>once</strong> for each parent of the class:</p>
<pre><code>class GGP1(object):
    def on_start(self):
        print('GGP1 do something')

class GP1(GGP1):
    def on_start(self):
        print('GP1 do something else')

class Parent1(GP1):
    pass        

class GGP2(object):
    def on_start(self):
        print('GGP2 do something')

class GP2(GGP2):
    pass

class Parent2(GP2):
    pass            

class Child(Parent1, Parent2):
    def on_start(self):
        for base in Child.__bases__:
            try:
                base.on_start(self)
            except AttributeError:
                # handle that one of those does not have that method
                print('"{}" does not have an "on_start"'.format(base.__name__))

&gt;&gt;&gt; Child().on_start()
GP1 do something else
GGP2 do something
# Note that 'GGP1 do something' is NOT printed since on_start was satisfied by 
# a descendant class L to R, bottom to top
</code></pre>
<p>Now imagine a more complex inheritance structure:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/ng0hW.png"/></p>
<p>If you want each and every forbearer's <code>on_start</code> method, you could use <code>__mro__</code> and filter out the classes that do not have <code>on_start</code> as part of their <code>__dict__</code> for that class. Otherwise, you will potentially get a forbearer's <code>on_start</code> method. In other words, <code>hassattr(c, 'on_start')</code> is <code>True</code> for every class that <code>Child</code> is a descendant from (except <code>object</code> in this case) since <code>Ghengis</code> has an <code>on_start</code> attribute and all classes are descendant classes from Ghengis. </p>
<p>** Warning -- Demo Only ** </p>
<pre><code>class Ghengis(object):
    def on_start(self):
        print('Khan -- father to all')    

class GGP1(Ghengis):
    def on_start(self):
        print('GGP1 do something')

class GP1(GGP1):
    pass

class Parent1(GP1):
    pass        

class GGP2(Ghengis):
    pass

class GP2(GGP2):
    pass

class Parent2(GP2):
    def on_start(self):
        print('Parent2 do something')

class Child(Parent1, Parent2):
    def on_start(self):
        for c in Child.__mro__[1:]:
            if 'on_start' in c.__dict__.keys():
                c.on_start(self)

&gt;&gt;&gt; Child().on_start()
GGP1 do something
Parent2 do something
Khan -- father to all
</code></pre>
<p>But this also has a problem -- if <code>Child</code> is further subclassed, then the child of Child will also loop over the same <code>__mro__</code> chain. </p>
<p>As stated by Raymond Hettinger:</p>
<blockquote>
<p>super() is in the business of delegating method calls to some class in
  the instance’s ancestor tree. For reorderable method calls to work,
  the classes need to be designed cooperatively. This presents three
  easily solved practical issues:</p>
<p>1) the method being called by super() needs to exist </p>
<p>2) the caller and callee need to have a matching argument signature and </p>
<p>3) every occurrence of the method needs to use super()</p>
</blockquote>
<p>The solution is to write cooperative classes that uniformly use <code>super</code> through the ancestor list or creative use of the <a href="http://en.wikipedia.org/wiki/Adapter_pattern" rel="noreferrer">adapter pattern</a> to adapt classes you cannot control. These methods are discussed more completely in the article <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="noreferrer">Python’s super() considered super!</a> by Raymond Hettinger. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class Parent1(object):
    def on_start(self):
        print('do something')

class Parent2(object):
    def on_start(self):
        print('do something else')

class Child(Parent1, Parent2):
    def on_start(self):
        super(Child, self).on_start()
        super(Parent1, self).on_start()

c = Child()

c.on_start()
do something
do something else
</code></pre>
<p>Or without super:</p>
<pre><code>class Child(Parent1, Parent2):
    def on_start(self):
        Parent1.on_start(self)
        Parent2.on_start(self)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your case, since both of the parents implements the same method, <code>super</code> will just be the same as the first parent inherited, from left to right (for your code, <code>Parent1</code>). Calling two functions with <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow"><code>super</code></a> is impossible. To do what you want, you must simply call the method from the parent class, as follows:</p>
<pre><code>class Child(Parent1, Parent2):
    def on_start (self):
        Parent1.on_start()
        Parent2.on_start()
</code></pre>
</div>
<span class="comment-copy">Try reading <a href="http://stackoverflow.com/questions/3277367/how-does-pythons-super-work-with-multiple-inheritance">this question/answers</a></span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods">Understanding Python super() with __init__() methods</a></span>
<span class="comment-copy">May I ask why the down vote and how I might improve this answer?</span>
<span class="comment-copy">Downvoting because this gives a misleading explanation of which method <code>super</code> will call and doesn't explain how to do cooperative multiple inheritance properly. In particular, if you try to multiple-inherit from a class that loops over <code>__mro__</code>, your options for calling all ancestor methods properly suck; in particular, looping over <code>__mro__</code> again will cause some methods to be called twice.</span>
<span class="comment-copy">@user2357112: Which part is misleading about what order <code>super</code> resolves method calls? <i>super's resolution order is based on the python's notion of mro.</i> I gave multiple links to explain that further. If some other ancestor class itself loops over mro, how is it not OK to loop over mro here? Which method gets called twice? This seems a little harsh...</span>
<span class="comment-copy">It gives the impression that a <code>super</code> call in class <code>Foo</code> will look through <code>Foo</code>'s MRO and always call an ancestor of <code>Foo</code>, rather than looking through the MRO of <code>type(self)</code> and potentially calling methods that appear nowhere in <code>Foo</code>'s ancestry. Also, if we have <code>class B(C):</code> and <code>class A(B):</code>, and both <code>A.on_start</code> and <code>B.on_start</code> loop through their <code>__mro__</code>, then <code>C.on_start</code> will be called by both <code>A.on_start</code> and <code>B.on_start</code>.</span>
<span class="comment-copy">I agree with what you say. I think it beyond the scope of this question, however, and I do not think my answer was misleading. The part about using <code>__bases__</code> to call each parent's mro of <code>on_start</code> is responsive to the question. Any approach to get more than one resolution to what multiple attributes from multiple inheritance is fraught with issues: What is the 'correct' order? What if no ancestor in a chain does not have the attribute <code>on_start</code>?The OP should just rewrite the base classes to cooperatively respond to multiple 'on_start` calls but that was not the question asked.</span>
<span class="comment-copy">Downvote for exactly?</span>
<span class="comment-copy">It appears to me that answers here have been systematically downvoted.</span>
<span class="comment-copy">Why down-voting ? Without an explanation it's useless.</span>
<span class="comment-copy">I smell a down-vote troll</span>
