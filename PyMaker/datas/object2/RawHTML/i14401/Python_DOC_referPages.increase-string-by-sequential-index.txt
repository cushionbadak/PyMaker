<div class="post-text" itemprop="text">
<p>In a file dealing with climatological variables involving a running mean with hours, the hours progress in sequence. </p>
<p>Is there a <code>sed</code>/<code>awk</code> command that would take that hour (string) in the file and then change it by two, so next time the file is read its (202) and so on to (204) etc...</p>
<p>See the number being added to 'i' below. </p>
<pre><code> timeprime = i + 569 
 'define climomslp = prmslmsl(t = 'timeprime' ) 
</code></pre>
<p>My goal is to increase the number in this case, 569, by one each time the file runs through other commands involved in processing the data. </p>
<p>The next desired number next to i would be </p>
<pre><code>timeprime = i + 570 (where 569 is increased by one) 
</code></pre>
<p>after that... </p>
<pre><code>timeprime = i + 571 (where 570 is increased by one)
</code></pre>
<p>If there isn't a sed/awk command to do such a thing, is there such a thing in any other method?</p>
<p>Thank you for any answers. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an alternative using awk:</p>
<pre><code>awk '/^timeprime = i [+]/{$5+=2} 1' file
</code></pre>
<p>Starting with this file:</p>
<pre><code>$ cat file
timeprime = i + 569 
 'define climomslp = prmslmsl(t = 'timeprime' ) 
</code></pre>
<p>We can use the awk command to create a new file:</p>
<pre><code>$ awk '/^timeprime = i [+]/{$5+=2} 1' file
timeprime = i + 571
 'define climomslp = prmslmsl(t = 'timeprime' ) 
</code></pre>
<p>To overwrite the original file with the new one, use:</p>
<pre><code>awk '/^timeprime = i [+]/{$5+=2} 1' file &gt;file.tmp &amp;&amp; mv file.tmp file
</code></pre>
<h3>How it works</h3>
<ul>
<li><p><code>/^timeprime = i [+]/{$5+=2}</code></p>
<p>This looks for lines that start with <code>^timeprime = i +</code> and, on those lines, the fifth field is incremented by 2.</p></li>
<li><p><code>1</code></p>
<p>This is awk's cryptic shorthand for print the line.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can definitely do this in Python (or Perl, Ruby, or whatever other scripting language you like, but you included a Python tag). For example:</p>
<pre><code>#!/usr/bin/env python

import re
import sys
def replace(m):
    return '{}{}'.format(m.group(1), int(m.group(2))+2)
for line in sys.stdin:
    sys.stdout.write(re.sub(r'(timeprime = i \+ )(\d+)', replace, line))
</code></pre>
<p>Hopefully the regex itself is trivial to understand:</p>
<pre><code>(timeprime = i \+ )(\d+)
</code></pre>
<p><img alt="Regular expression visualization" src="https://www.debuggex.com/i/gEcuW4bEDJNs_RtN.png"/></p>
<p><a href="https://www.debuggex.com/r/gEcuW4bEDJNs_RtN" rel="nofollow">Debuggex Demo</a></p>
<p>The <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>sub</code></a> function can take a to be applied to the match object instead of a string as the "replacement". So, lines that don't match will be printed unchanged; lines that do will have the match substituted for the same two parts, but with the second part replaced by <code>int(number)+2</code></p>
</div>
<span class="comment-copy">an example along with expected output would be better.</span>
<span class="comment-copy">@hallettwx: <a href="https://stackoverflow.com/posts/30408865/edit">edit</a> your question to have all the relevant information, don't try to add it in comments.</span>
<span class="comment-copy">@AvinashRaj - I have provided an example. Thank you for the suggestion.</span>
<span class="comment-copy">Your description says that you want it increased by 2, but then your example shows it increased by 1. Either one is just as easy as the other, but which one do you actually want?</span>
<span class="comment-copy">@abarnert - One would be good, thank you.</span>
<span class="comment-copy">Unfortunately, I don't understand where to exactly implement this in my script, as I am relatively new to python. Would it just be python (script-name), or would that code have to be put in the script that contains the number I want incremented itself?</span>
<span class="comment-copy">@hallettwx The former. This is an entire script, which you'd save as, say, inctimeprime.py, then use by just adding <code>| python inctimeprime.py</code> into your shell pipeline, or whatever.</span>
<span class="comment-copy">Hmm, running into trouble, When I execute the script against the desired file that I would like modified, it hangs where  sys.stdin is introduced.</span>
<span class="comment-copy">I don't know how you're trying to run this. I wrote it as a filter, which reads from stdin and writes to stdout. If you'd instead like it to, say, take two filenames as a command-line arguments and read from the first and write to the second, use <code>with open(sys.argv[1]) as fin, open(sys.argv[2], 'w') as fout:</code>, and then <code>for line in fin:</code> and then <code>fout.write(…)</code>. The official tutorial explains this in more detail—or, if you show us your script, I could show you how to fit this in. But otherwise, all I can do is guess at what you want.</span>
<span class="comment-copy">Thank you very much for your help and tutelage in aiding my understanding in what you did above! Have a pleasant evening.</span>
