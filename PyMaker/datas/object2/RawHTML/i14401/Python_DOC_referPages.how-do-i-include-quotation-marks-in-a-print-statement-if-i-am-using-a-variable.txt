<div class="post-text" itemprop="text">
<pre><code>word = input("Enter a word: ")
word_length = len(word)

print("The length of", word,"is ", word_length)
</code></pre>
<p>If word is <code>'back'</code>, the output will be:</p>
<pre><code>The length of back is 4
</code></pre>
<p>I want the output to be:</p>
<pre><code>The length of 'back' is 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>The Good way:</h2>
<p>The best way is to use <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow"><code>format</code></a></p>
<pre><code>print("The length of '{}' is {}".format(word, word_length))
</code></pre>
<h2>The Bad way:</h2>
<p>Using C-like statement, note that this is de-emphasised, (but not officially <em>deprecated</em> yet)</p>
<pre><code>print("The length of '%s' is %s" % (word, word_length))
</code></pre>
<h2>The Ugly way:</h2>
<p>One way is to have your string add with a <code>'</code> and using <a href="https://docs.python.org/3.4/library/functions.html#print" rel="nofollow"><code>sep</code> attribute</a></p>
<pre><code>print("The length of '", word,"' is ", word_length, sep = '')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>repr</code> of a word to include the Python quotation marks (as they appear in e.g. the interactive interpreter); this has the added benefit of working reasonably when quotes are already in the string:</p>
<pre><code>print("The length of", repr(word), "is", word_length)
</code></pre>
</div>
<span class="comment-copy"><code>'The length of "{}" is {}'.fomrat(word, word_length)</code></span>
<span class="comment-copy">While the Python documentation recommends using the newer <code>format</code> method, the older <code>printf</code>-style formatting has never been deprecated.</span>
<span class="comment-copy">@chepner Thanks. My bad. I should have read Pep 3101</span>
