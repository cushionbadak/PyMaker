<div class="post-text" itemprop="text">
<p>I am having a problem getting an informative traceback when I run a script with the -m flag.  I am using the -m flag so that I can properly use relative imports throughout my package.  When an error comes up, stdout does tell me the nature of the exception but not the location, such as file and line number.</p>
<blockquote>
<p>/usr/bin/python: Error while finding spec for 'bin.load_ref_exps.py'
  (: 'module' object has no attribute
  '<strong>path</strong>')</p>
</blockquote>
<p>I would very much like to be able to run the script directly with a full traceback to quickly debug what is going on.</p>
<p>Any ideas on how to run the script in a way that doesn't break all the package based relative imports and still gives me a full traceback?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you use <code>-m</code>, you shouldn't specify the <code>.py</code> extension, since you are specificying a module name, not a file per se.  See <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-m" rel="nofollow">the documentation</a>.</p>
</div>
<span class="comment-copy">relative imports are the embodiment of evil ....</span>
<span class="comment-copy">Yes, it does seem like I've been struggling with these imports to behave as expected since starting this port to python3.  Maybe I'm being naive but I am going to stick to trying to make them work as I assume they were introduced for a good reason.</span>
<span class="comment-copy">I think they are terrible ... and the obfuscate the code ...  Im sure they were added for some reason ... im just not sure about a good reason</span>
<span class="comment-copy">Can you show example code demonstrating the problem?  Are you saying that error message is the entirety of the output?</span>
<span class="comment-copy">Yes that's the entire output after entering python -m bin.load_ref_exps.py</span>
<span class="comment-copy">Boom!  You da man.</span>
