<div class="post-text" itemprop="text">
<p>How can I raise the numbers in list to a certain power?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use list comprehension:</p>
<pre><code>def power(my_list):
    return [ x**3 for x in my_list ]
</code></pre>
<p><a href="https://docs.python.org/3.4/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">https://docs.python.org/3.4/tutorial/datastructures.html#list-comprehensions</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def turn_to_power(list, power=1): 
    return [number**power for number in list]
</code></pre>
<p>Example:</p>
<pre><code>   list = [1,2,3]
   turn_to_power(list)
=&gt; [1, 2, 3]
   turn_to_power(list,2)
=&gt; [1, 4, 9]
</code></pre>
<p>UPD: you should also consider reading about <code>pow(x,y)</code> function of <code>math</code> lib: <a href="https://docs.python.org/3.4/library/math.html" rel="nofollow">https://docs.python.org/3.4/library/math.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Nobody has mentioned <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> and <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> and the accepted answer does not mention <a href="https://docs.python.org/3/library/functions.html#pow" rel="nofollow noreferrer"><code>pow</code></a>, but for the sake of completeness I am posting this solution:</p>
<pre><code>import functools
bases = numbers = [1,2,3]
power = exponent = 3
cubed = list(map(functools.partial(pow, exponent), numbers))
</code></pre>
<p>I would use a list comprehension myself as suggested, but I think <code>functools.partial</code> is a very cool function that deserves to be shared. I stole my answer from @sven-marnach <a href="https://stackoverflow.com/questions/10212445/python-map-list-item-to-function-with-arguments#10212475">here</a> by the way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another <code>map</code> pattern, using <code>lambda</code> instead of <code>function.partial()</code>:</p>
<pre><code>numbers=[1,2,3,4]
squares=list(map(lambda x:pow(x,2),numbers))
print(squares)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually your script do what you want, and that is the result (keep in mind that you are applying the power function to [1,2,3,4,5,6,7,8,9])</p>
<p>('Cubic list:', [1, 8, 27, 64, 125, 216, 343, 512, 729])</p>
<p>Your problem is that you also modified the original list, due to the nature on the list type in python. If you want to keep also your original list you should pass a copy of it to your function. You can do it like this</p>
<pre><code>def main():
    numbers=[1,2,3,4,5,6,7,8,9]
    numbers3=power(numbers[:])
    print('Original list:', numbers)
    print('Cubic list:', numbers3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a list comprehension for some increased speed:</p>
<pre><code>print('Original list:', numbers)
print('Cubic list:', [n**3 for n in numbers])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply do:</p>
<pre><code>numbers=[1,2,3,4,5,6,7,8,9]
numbers3 = []
for n in numbers:
    numbers3.append(n**3)

print('Original list:', numbers)
print('Cubic list:', numbers3)
</code></pre>
</div>
<span class="comment-copy">What didn't work? What was the actual output you got?</span>
<span class="comment-copy">my_list[i]=my_list[i]**3 modify your original list.</span>
