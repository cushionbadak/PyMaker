<div class="post-text" itemprop="text">
<p>Below program asks for <code>nonlocal</code> keyword with <code>UnboundLocalError: local variable 'balance' referenced before assignment</code></p>
<pre><code>&gt;&gt;&gt; def make_withdraw(balance):
    """Return a withdraw function with a starting balance."""
    def withdraw(amount):
        if amount &gt; balance:
            return 'Insufficient funds'
        balance = balance - amount
        return balance
    return withdraw

&gt;&gt;&gt; withdraw = make_withdraw(101)
&gt;&gt;&gt; withdraw(25)
</code></pre>
<p>But, below program does not give such error when inner function <code>shift</code> refers to <code>lst</code> before assignment as <code>temp = lst[0]</code>.</p>
<pre><code>def shift_left(lst, n):
    """Shifts the lst over by n indices

    &gt;&gt;&gt; lst = [1, 2, 3, 4, 5]
    &gt;&gt;&gt; shift_left(lst, 2)
    &gt;&gt;&gt; lst
    [3, 4, 5, 1, 2]
    """
    assert (n &gt; 0), "n should be non-negative integer"
    def shift(ntimes):
        if ntimes == 0:
            return
        else:
            temp = lst[0]
            for index in range(len(lst) - 1):
                lst[index] = lst[index + 1]         
            lst[index + 1] = temp
            return shift(ntimes-1)
    return shift(n)
</code></pre>
<p>How do I understand/compare these two scenarios?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are never assigning to <code>lst</code>, only to <code>lst[index]</code>. The two concepts are not quite the same thing.</p>
<p>The line:</p>
<pre><code>lst = some_other_value
</code></pre>
<p>would rebind the name <code>lst</code> to point to another object. The line:</p>
<pre><code>lst[index] = some_other_value
</code></pre>
<p>alters the object referenced by the name <code>lst</code>, by binding a specific index in that sequence to something else. The name <code>lst</code> itself is never altered, so there is no ambiguity here as to what scope that name belongs in.</p>
<p>In Python scoping, only binding operations on the name itself count. Binding operations are not just (direct) assignments, but also include function parameters, function and class definitions, <code>import</code> statements and targets for <code>except .. as</code>, <code>with .. as</code> and the target in <code>for ... in</code> loops. If a name is bound to in a given scope, it is considered <em>local</em>, in all other cases Python looks for the name in a parent scope, with the outermost scope being <code>global</code>.</p>
<p>Assignments to <em>subscriptions</em> (using <code>[...]</code>) are not binding operations in this context.</p>
<p>See the <a href="https://docs.python.org/3/reference/executionmodel.html#naming-and-binding" rel="nofollow noreferrer"><em>Naming and binding</em> section</a> of the Python Execution Model documentation, as well as the <em><a href="https://stackoverflow.com/questions/291978/short-description-of-python-scoping-rules">Short Description of the Scoping Rules?</a></em> post.</p>
</div>
<span class="comment-copy">Where/how does the program "ask for <code>nonlocal</code> keyword", and what does that even mean?</span>
<span class="comment-copy">@StefanPochmann if I say <code>nonlocal balance</code> before making this condition <code>if amount &gt; balance:</code> it works</span>
<span class="comment-copy">sorry I have edited my question, because accessign index in not the right example!!! am talking about referring a variable before assignment. In first case, it is <code>balance</code> and second case it is <code>lst</code>.</span>
<span class="comment-copy">@overexchange: that is not very helpful, because your question is now simply a duplicate. <code>lst1</code> is not non-local because you assigned to it.</span>
<span class="comment-copy">@overexchange: since my answer answers your new version and your old version, but your old version has some unique aspects, I rolled back your edit.</span>
<span class="comment-copy">For your point: "The name <code>lst</code> itself is never altered", In the inner function, I could do <code>lst = [1, 2, 3]</code>, it works</span>
<span class="comment-copy">@overexchange: yes, you can assign something to the name <code>lst</code> in the inner function. It is then a local <i>everywhere in that function</i>. Move that assignment to the end of the function and you'll get an <code>UnboundLocal</code> exception.</span>
