<div class="post-text" itemprop="text">
<p>I'm trying to write a code that finds the letters in a string containing special characters, numbers and letters. The following code returns nothing:</p>
<pre><code>a ="&amp;*&amp;)*&amp;GOKJHOHGOUIGougyY^&amp;*^x".lower()
print(a)
final = a.split()
for y in final:
    if (y.isalpha == True):
        print(y)
</code></pre>
<p>Output: &amp;<em>&amp;)</em>&amp;gokjhohgouigougyy^&amp;*^x
=&gt; None</p>
<p>Can someone tell me what is the issue and how can I do it without using the <code>re.findall</code>, e.g. using loops like: </p>
<pre><code>for(y in final):
    if (ord(y) in range (97, 127)):
        print(y)
</code></pre>
<p>The above code works:</p>
<pre><code>for y in a:
    if (ord(y) in range (97, 127)):
        print(y, end='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to call <code>y.isalpha</code> as <code>y.isalpha()</code> this is because isalpha is a function or method.</p>
<pre><code>&gt;&gt;&gt; y='y'
&gt;&gt;&gt; y.isalpha
&lt;built-in method isalpha of str object at 0x00FA3A40&gt;
&gt;&gt;&gt; y.isalpha()
True
</code></pre>
<p>Note that your split will give you words not letters - which may not be what you are expecting:</p>
<pre><code>&gt;&gt;&gt; s = "Yes! These are words."
&gt;&gt;&gt; for w in s.split(' '):
...    print(w, w.isalpha())
...
Yes! False
These True
are True
words. False
&gt;&gt;&gt;
</code></pre>
<p>One of the things to get used to in python is the difference between a property and a method - a property is something that you can read a method performs some action - <code>dir</code> lists both so for a string <code>s</code> you have:</p>
<pre><code>&gt;&gt;&gt; dir(s)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__',
 '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__',
 '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', 
 '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__',
 '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__',
 '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__',
 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 
 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum',
 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 
 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join',
 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind',
 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines',
 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'
]
</code></pre>
<p>Where:</p>
<pre><code>&gt;&gt;&gt; s.__class__
&lt;class 'str'&gt;
</code></pre>
<p>is a property and:</p>
<pre><code>&gt;&gt;&gt; s.capitalize
&lt;built-in method capitalize of str object at 0x03529F50&gt;
</code></pre>
<p>is a method and needs to be called by the addition of parenthesis () to actually perform their function.  It is worth also distinguishing between methods that return a value and those that operate in place.</p>
<pre><code>&gt;&gt;&gt; s.lower()
'yes! these are words.'
</code></pre>
<p>Returns a value as does <code>s.split()</code> but <code>sort</code> is an in-place operation, e.g.:</p>
<pre><code>&gt;&gt;&gt; words = s.lower().split()
&gt;&gt;&gt; words
['yes!', 'these', 'are', 'words.']
&gt;&gt;&gt; words.sort()
&gt;&gt;&gt; words
['are', 'these', 'words.', 'yes!']
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Splitting a string returns a list of substrings. For example: "abc def ghi".split(" ") returns ["abc", "def", "ghi"].
You needn't split the string for what you're trying. Just loop over the string itself.</p>
<pre><code>string = "&amp;*&amp;)*&amp;GOKJHOHGOUIGougyY^&amp;*^x".lower()
for char in string:
    if char.isalpha():
        print(char)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to split it up and you should call <code>isalpha</code> as <code>isalpha()</code> instead because they are different things. This should print all the letters in what i assume is the format you want.</p>
<pre><code>a ="&amp;*&amp;)*&amp;GOKJHOHGOUIGougyY^&amp;*^x".lower()
print(a)

for y in a:
    if y.isalpha():
        print(y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From your code it looks more like you want to <em>remove</em> unwanted characters from the string, rather than find those to retain.</p>
<p>So, if you want to print the result:</p>
<pre><code>a ="&amp;*&amp;)*&amp;GOKJHOHGOUIGougyY^&amp;*^x".lower()
for c in a:
    if c.isalpha():
        print(c)
</code></pre>
<p>Output:</p>
<pre>
g
o
k
...
y
y
x
</pre>
<p>But usually you would want to assign the filtered string to a variable, like this which combines a generator comprehension with the <code>join()</code> string function:</p>
<pre><code>a ="&amp;*&amp;)*&amp;GOKJHOHGOUIGougyY^&amp;*^x".lower()
s = ''.join(c for c in a if c.isalpha())
print(s)
</code></pre>
<p>Output:</p>
<p>
gokjhohgouigougyyx
</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want a list use a list comprehension:</p>
<pre><code>print([ch for ch in a if ch.isalpha()])
['g', 'o', 'k', 'j', 'h', 'o', 'h', 'g', 'o', 'u', 'i', 'g', 'o', 'u', 'g', 'y', 'y', 'x']
</code></pre>
<p>If you want to remove punctuation, digits and spaces from the string you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow">str.translate</a>:</p>
<pre><code>from string import punctuation, digits

tbl = str.maketrans({ord(ch):"" for ch in punctuation+digits+" "})

print(a.translate(tbl))

gokjhohgouigougyyx
</code></pre>
<p>The <code>tbl</code> is just the <code>ord</code> of each character we want to replace with the value we want to replace it with which in this case is an empty string. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you would like to get clever you could also look at using a filter object:</p>
<pre><code>&gt;&gt;&gt; def isalpha(c):
...    """ Check if a character is a member of the alphabet """
...    return c.isalpha()
...
&gt;&gt;&gt; s = "This string, or sentence, should have __no__ non-alphabetic characters in it!"
&gt;&gt;&gt; f = filter(isalpha, s)
&gt;&gt;&gt; ''.join(f)
'Thisstringorsentenceshouldhavenononalphabeticcharactersinit'
</code></pre>
<p>This can be shortened to:</p>
<pre><code>&gt;&gt;&gt; s="This string, or sentence, should have __no__ non-alphabetic characters in it!"
&gt;&gt;&gt; ''.join(filter(lambda a: a.isalpha(), s))
'Thisstringorsentenceshouldhavenononalphabeticcharactersinit'
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">why you do splitting?</span>
<span class="comment-copy">What is the expected output?</span>
<span class="comment-copy">To try and convert to a list and see if that helps. Not sure it does help though</span>
<span class="comment-copy"><code>re.findall(r'[a-z]+', a)</code></span>
<span class="comment-copy">also, you are splitting with a <code>space</code> character (or some whitespace character, yet there are no spaces in your string.</span>
<span class="comment-copy">'Call' as in? I'm sorry i'm new to python, hence the stupid question</span>
<span class="comment-copy">@pythonnewbie - I have expanded the answer above.</span>
<span class="comment-copy">Aah! stupid mistake. Thanks a ton @Steve</span>
<span class="comment-copy">"call" -- as in "call a function". like dialing up a function on the phone, telling it some things (arguments), and listening to what it says back (returns) :)</span>
<span class="comment-copy">I was just trying to convert it into a list and see if that makes the search easier. Screwed up the syntax. Thanks</span>
<span class="comment-copy">Yup, just did that, thanks a ton :)</span>
<span class="comment-copy">you don't need brackets in the if condition.</span>
<span class="comment-copy">Hey, thanks a ton. I figured I wasn't calling isalpha in the right way.  What makes you think i was trying to 'remove' the unwanted elements rather than extract the 'relevant' ones? Just curious if there's a difference in the way python makes both work</span>
<span class="comment-copy">@pythonnewbie: they are essentially the same :) I initially misread your question.</span>
<span class="comment-copy">Would there be a difference in the above algorithm and that using isalpha/loop to extract the alphabets in terms of time, memory etc?</span>
<span class="comment-copy">@pythonnewbie. If you had large strings .translate will beat any other option.  If you wanted a list the comprehension is faster than using a normal loop</span>
<span class="comment-copy">Oh! thanks. Will look up its usage and try. Thanks a ton for this.</span>
<span class="comment-copy">no prob, you're welcome.</span>
