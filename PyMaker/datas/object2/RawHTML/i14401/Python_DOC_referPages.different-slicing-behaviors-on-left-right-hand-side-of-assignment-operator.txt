<div class="post-text" itemprop="text">
<p>As a Python newbie coming from the C++ background, the slicing operator in Python (3.4.x) looks ridiculous to me. I just don't get the design philosophy behind the "special rule". Let me explain why I say it's "special".</p>
<p>On the one hand, according to the Stack Overflow answer <a href="https://stackoverflow.com/questions/323689/python-list-slice-syntax-used-for-no-obvious-reason">here</a>, <strong>the slicing operator creates a (deep) copy of a list or part of the list</strong>, i.e. a new list. The link may be old (earlier than python 3.4.x), but I just confirmed the behavior with the following simple experiment with python 3.4.2:</p>
<pre><code>words = ['cat', 'window', 'defenestrate']
newList = words[:] # new objects are created; a.k.a. deep copy
newList[0] = 'dog'

print(words) # ['cat' ...
print(newList) # ['dog' ...
</code></pre>
<p>On the other hand, according to the official documentation <a href="https://docs.python.org/3.4/tutorial/introduction.html" rel="nofollow noreferrer">here</a>:</p>
<pre><code>Assignment to slices is also possible, and this can even change the size of the list or clear it entirely:
&gt;&gt;&gt;

&gt;&gt;&gt; letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
&gt;&gt;&gt; letters ['a', 'b', 'c', 'd', 'e', 'f', 'g']
&gt;&gt;&gt; # replace some values
&gt;&gt;&gt; letters[2:5] = ['C', 'D', 'E']
&gt;&gt;&gt; letters
['a', 'b', 'C', 'D', 'E', 'f', 'g']
&gt;&gt;&gt; # now remove them
&gt;&gt;&gt; letters[2:5] = []
&gt;&gt;&gt; letters
['a', 'b', 'f', 'g']
&gt;&gt;&gt; # clear the list by replacing all the elements with an empty list
&gt;&gt;&gt; letters[:] = []
&gt;&gt;&gt; letters 
[]
</code></pre>
<p><strong>Clearly, the slicing operator <code>[:]</code> does not do a deep copy here.</strong></p>
<p>From the observation it seems to suggest that the slicing operator produces different behavior when it's on left/right side with respect to the assignment operator. I do not know any language in which an operator could produce similar behavior. After all, an operator is a function, just a syntactically special function, and a function's behavior should be self-contained, purely determined by all of its inputs.</p>
<p>So what can justify this "special rule" in Python design philosophy?</p>
<p>P.S. If my conclusion is not correct, there are really only two possibilities:</p>
<p>1, Python's slicing 'operator' is actually not an operator, so my assumption does not hold --- then what is it (the 'slicing operator' <code>[:]</code>)?</p>
<p>2, The difference in behavior is caused by some latent factor not observed. The slicing operator's location (left/right hand side) with respect to the assignment operator accidentally co-exists with the observation of different behavior. They do not have causality relationship --- then what is the latent factor that causes the difference in behavior?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python operators are best considered as syntactic sugar for <em>"magic"</em> methods; for example, <code>x + y</code> is evaluated as <code>x.__add__(y)</code>. In the same way that:</p>
<ul>
<li><code>foo = bar.baz</code> becomes <code>foo = bar.__getattr__(baz)</code>; whereas </li>
<li><code>bar.baz = foo</code> becomes <code>bar.__setattr__(baz, foo)</code>; </li>
</ul>
<p>the Python <em>"slicing operator"</em> * <code>a[b]</code> is evaluated as either:</p>
<ul>
<li><code>a.__getitem__(b)</code>; or </li>
<li><code>a.__setitem__(b, ...)</code>; </li>
</ul>
<p>depending on which side of the assignment it's on; the two <em>aren't quite</em> the same (see also <a href="https://stackoverflow.com/q/10623302/3001761">How assignment works with python list slice</a>). Written out in <em>"longhand"</em>, therefore:</p>
<pre><code>&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; x.__getitem__(slice(None))  # ... = x[:]
[1, 2, 3]
&gt;&gt;&gt; x.__setitem__(slice(None), (4, 5, 6))  # x[:] = ...
&gt;&gt;&gt; x
[4, 5, 6]
</code></pre>
<p>The <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">data model documentation</a> explains these methods in more detail (e.g. <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer"><code>__getitem__</code></a>), and you can read <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer">the docs on <code>slice</code></a>, too.</p>
<hr/>
<p>Note that the slice is a <em>shallow copy</em>, not a deep one, as the following demonstrates:</p>
<pre><code>&gt;&gt;&gt; foo = [[], []]
&gt;&gt;&gt; bar = foo[:]
&gt;&gt;&gt; bar is foo
False  # outer list is new object
&gt;&gt;&gt; bar[0] is foo[0]
True  # inner lists are same objects
&gt;&gt;&gt; bar[0].append(1)
&gt;&gt;&gt; foo
[[1], []]
</code></pre>
<hr/>
<p>* Well, not <em>strictly</em> an <a href="https://docs.python.org/3/reference/lexical_analysis.html#operators" rel="nofollow noreferrer">operator</a>.</p>
</div>
<span class="comment-copy">There's plenty about C++ that seems "ridiculous" to someone with a Python background. Please try to leave value judgments out of your questions.</span>
<span class="comment-copy"><i>"according to the Stack Overflow answer here, the slicing operator creates a (deep) copy"</i>. Where does it say that? You linked to a question, btw, not an answer.</span>
<span class="comment-copy">@MarkRansom What's wrong with the value judgement? Part of the question was on the design philosophy behind the design decisions. If the Python's decision was not 'ridiculous' to me, this question wouldn't exist in the first place. Be open to challenges and embrace different opinions. I'm perfectly fine with you finding certain C++ concepts ridiculous or even wrong. Just include you argument to support your assertions.</span>
<span class="comment-copy">@StefanPochmann Scroll down a little bit and you'll see "However, when you do newList = oldList[:], it "slices" the list, and creates a new list." in the accepted answer.</span>
<span class="comment-copy">Sorry, I was unclear. What I meant was the "deep". That answer doesn't say it's a deep copy.</span>
<span class="comment-copy">Thanks for the great answer. One question about the "shallow copy" though: what's going on with my experiment attached(the 'cat' 'dog' test)? It's clearly a deep copy.</span>
<span class="comment-copy">@h9uest I'm not sure why you think your test shows it as <i>"clearly a deep copy"</i>. You have a mutable sequence of immutable objects, so it's impossible to tell from <i>any</i> demonstration on that object whether a given copying operation (<code>[:]</code> or anything else) is deep or shallow (note that, by contrast, my demo is on a mutable sequence <i>of mutable sequences</i>). See e.g. <a href="https://docs.python.org/2/library/copy.html" rel="nofollow noreferrer">docs.python.org/2/library/copy.html</a>, <a href="http://stackoverflow.com/q/17246693/3001761">stackoverflow.com/q/17246693/3001761</a> for further explanation on the difference.</span>
<span class="comment-copy">You're right. Thanks a lot.</span>
