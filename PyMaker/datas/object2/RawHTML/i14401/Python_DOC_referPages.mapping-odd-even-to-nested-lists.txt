<div class="post-text" itemprop="text">
<p>So I'm trying to manipulate a list with a loop. Changing my list into a string of each integer by changing them to even or odd. </p>
<pre><code>Input_List = [[1,2,3], [4,5,6], [7,8,9]]
</code></pre>
<p>What I would like to have outputted is </p>
<pre><code>Input_List = [['odd','even','odd'],['even','odd','even'],['odd','even','odd']]
</code></pre>
<p>This is the code I wrote so far:</p>
<pre><code>for element in Input_List:
    for item in element:
        if item %2==0:
        Input_List[element][x]="Even"
    else:
        Input_List[element][x]="Odd"
        x+=1
</code></pre>
<p>Any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You were quite near, the smallest change needed to your program is</p>
<pre><code>Input_List=[[1,2,3],[4,5,6],[7,8,9]]
for i,element in enumerate(Input_List):
    for j,item in enumerate(element):
        if item %2==0:
            Input_List[i][j]="Even"
        else:
            Input_List[i][j]="Odd"
print Input_List
</code></pre>
<p>Here, I'm using <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> instead, this is because you can refer to elements in a list by using their indices. </p>
<p>You can do it easily by using a <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> and a list comprehension</p>
<pre><code>&gt;&gt;&gt; l=[[1,2,3],[4,5,6],[7,8,9]]
&gt;&gt;&gt; [list(map(lambda x: 'Odd' if x%2 != 0 else 'Even',i)) for i in l]
[['Odd', 'Even', 'Odd'], ['Even', 'Odd', 'Even'], ['Odd', 'Even', 'Odd']]
</code></pre>
<p><em>Small Note</em> - Your list is missing commas, <code>[[1,2,3][4,5,6][7,8,9]]</code> must be <code>[[1,2,3],[4,5,6],[7,8,9]]</code> </p>
<p>Another way is to use the logical and operator (<code>&amp;</code>) in a nested list comp, like Padraic mentions in the <a href="https://stackoverflow.com/questions/30246764/manipulating-lists-python-3-x/30246793?noredirect=1#comment48596098_30246793">comments</a></p>
<pre><code>&gt;&gt;&gt; [['odd' if i &amp; 1 else 'even' for i in sub] for sub in l]
[['odd', 'even', 'odd'], ['even', 'odd', 'even'], ['odd', 'even', 'odd']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a nested list comprehension :</p>
<pre><code>&gt;&gt;&gt; [['Even' if j%2==0 else 'Odd' for j in i] for i in Input_List]
[['Odd', 'Even', 'Odd'], ['Even', 'Odd', 'Even'], ['Odd', 'Even', 'Odd']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't know why nobody did the o̶b̶v̶i̶o̶u̶s̶:</p>
<pre><code>[[['Even','Odd'][n%2] for n in i] for i in Input_List]
</code></pre>
<p>Edit: I have been informed that I misspelled "obfuscated" (though I disagree :-)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>input_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print [['odd' if i%2 else 'even' for i in sublist]
       for sublist in input_list]
</code></pre>
</div>
<span class="comment-copy">In Python 3, you need to explicitly pass the return value of <code>map</code> to <code>list</code>, or you'll wind up with a list of <code>map</code> objects.</span>
<span class="comment-copy">or <code>[['odd' if i &amp; 1 else 'even' for i in sub] for sub in Input_List]]</code></span>
<span class="comment-copy">@PadraicCunningham Obfuscatiooooooon :) I love it when ya use logical operators!</span>
<span class="comment-copy">Oh come on, this is ridiculous. You got pretty much every solution except the obvious one. Add <code>['Even','Odd'][n%2]</code> already :-)</span>
<span class="comment-copy">Hmm, do you really think it's obfuscated? Maybe I've done that kind of thing too often, to me it's the most natural way.</span>
<span class="comment-copy">Lol! That edit... It looked better before :P</span>
