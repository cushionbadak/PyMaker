<div class="post-text" itemprop="text">
<p>I have a python script where I'm running an external archive command with <a href="https://docs.python.org/2/library/subprocess.html#popen-constructor" rel="nofollow">subprocess.Popen()</a>. Then I'm piping stdout to a sys write and a log file (see code below), because I need to print and log the output. The external command outputs progress like "Writing Frame 1 of 1,000", which I would like in my log.</p>
<p>So far I can either have it display/write in large blocks by including "<code>stdout=subprocess.PIPE</code>, <code>stderr=subprocess.PIPE</code>", but then the user thinks the script isn't working. Or I just have "<code>stdout=subprocess.PIPE</code>" the progress "Writing of Frame..." aren't in the log file.</p>
<p>Any thoughts?</p>
<p>My script looks something like this:</p>
<pre><code>archive_log = open('archive.log', 'w')
archive_log.write('Archive Begin')
process_archive = subprocess.Popen(["external_command", "-v", "-d"], stdout=subprocess.PIPE, stderr=subprocess.PIPE) #Archive Command

for line in process_archive.stdout:
    sys.stdout.write(line)
    archive_log.write(line)

archive_log.write('Archive End')
archive_log.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you're just trying to merge the subprocess's stdout and stderr into a single pipe. To do that, as <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow">the docs explain</a>, you just pass <code>stderr=subprocess.STDOUT</code>.</p>
<hr/>
<p>If, on the other hand, you want to read from both pipes independently, without blocking on either one of them, then you need some explicit asynchronicity.</p>
<p>One way to do this is to just create two threads, one of them blocking on <code>proc.stdout</code>, the other on <code>proc.stderr</code>, then just have the main thread <code>join</code> both threads. (You probably want a lock inside the <code>for</code> body in each thread; that's the only way to make sure that lines are written atomically and in the same order on stdout and in the file.)</p>
<p>Alternatively, many reactor-type async I/O libraries, including the stdlib's own <code>asyncio</code> (if you're on 3.4+) and major third-party libs like Twisted can be used to multiplex multiple subprocess pipes.</p>
<p>Finally, at least if you're on Unix, if you understand all the details, you may be able to do it with just <code>select</code> or <code>selectors</code>. (If this doesn't make you say, "Aha, I know how to do it, I just have a question about one of the details", ignore this idea and use one of the other two.)</p>
<hr/>
<p>It's clear that you really <em>do</em> need stderr here. From your question:</p>
<blockquote>
<p>Or I just have "<code>stdout=subprocess.PIPE</code>" the progress "Writing of Frame..." aren't in the log file.</p>
</blockquote>
<p>That means the subprocess is writing those messages to stderr, not stdout. So when you don't capture stderr, it just passes through to the terminal, rather than being captured and written to both the terminal and the log by your code.</p>
<p>And it's clear that you really <em>do</em> need them either merged or handled asynchronously:</p>
<blockquote>
<p>I can either have it display/write in large blocks by including "<code>stdout=subprocess.PIPE, stderr=subprocess.PIPE</code>", but then the user thinks the script isn't working.</p>
</blockquote>
<p>The reason the user thinks the script isn't working is that, although you haven't shown us the code that does this, clearly you're looping on stdout and then on stderr. This means the progress messages won't show up until stdout is done, so the user will think the script isn't working.</p>
</div>
<div class="post-text" itemprop="text">
<p>Is there a reason you aren't using <a href="https://docs.python.org/2/library/subprocess.html#subprocess.check_call" rel="nofollow">check_call</a> and the <a href="https://docs.python.org/2/library/syslog.html" rel="nofollow">syslog</a> module to do this?</p>
<p>You might also want to use <code>with</code> like this:</p>
<pre><code>with open('archive.log', 'w') as archive:`
  do stuff
</code></pre>
<p>You gain the benefit of the file being closed automatically.</p>
</div>
<span class="comment-copy">if you set <i>both</i> stdout and stderr to <code>PIPE</code> then you should read them <i>both</i> concurrently otherwise a deadlock is possible. You could use threads or asyncio for that, see <a href="http://stackoverflow.com/q/4984428/4279">Python subprocess get children's output to file and terminal?</a></span>
<span class="comment-copy">I'm actually just trying to get stdout. I'm not sure why adding stderror works. Which I am finding out now it only sometimes works. Hmmmm</span>
<span class="comment-copy">@Elliot: If the "Writing of Frame..." don't appear in the log file if you don't capture stderr, that means that they're being written to stderr. So you need to capture it. If the user thinks the program isn't working when you capture stderr and stdout separately, that means that you're reading all of stdout before any of stderr, or vice-versa, so you're blocking on output that isn't there. So you need to merge them, or capture them asynchronously.</span>
<span class="comment-copy">Sorry for the delay. Thanks for the help!</span>
<span class="comment-copy">Using <code>check_call</code> doesn't allow you to capture and display progress messages as they appear; you only get them all at the end of the process, so, as the question says, "the user thinks the program isn't working".</span>
<span class="comment-copy">Maybe I'm not understanding then what the original poster is doing. When I use check_call I see in stdout the command returning as it runs.</span>
<span class="comment-copy">I'm guessing you're not passing a new pipe for stdout at all, so stdout is just the terminal, in which case of course you'll see the output as it happens. But then your program isn't capturing it and can't log it. You can get one or the other with the check_* functions, but if you want both prompt output to the terminal and logging to a file, you can't.</span>
