<div class="post-text" itemprop="text">
<p>I'm trying to add all the elements of two unequal nested lists in parallel and append the result back to another new list, i've written a little hacky code that could add them but there's a lot of things wrong with the code, first i tried to make the pairs equal by appending 0's to the end of the list but the code still runs into the problems since the length of the first pair is 3 and the length of the second pair is 4, i also tried using map but i couldn't add an integer and a NoneType,</p>
<pre><code>import pdb
import itertools

x = [[2,3,3], [5,0,3]]
y = [[0,3], [2,3,3,3]]


for idx, (a, b) in enumerate(itertools.zip_longest(x, y)):
    while len(a) &lt; len(b):
        x[idx].append(0)

    while len(b) &lt; len(a):

        y[idx].append(0)

print(x, y)

new_list = list()
for i in zip(x, y):
    for idx, j in enumerate(i):
        for ind, a in enumerate(j):
            val = x[idx][ind] + y[idx][ind]
            new_list.append(val)
            print(new_list)
</code></pre>
<p>the final result should be like this</p>
<pre><code>[2, 6, 3, 7, 3, 6, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow"><code>itertools.zip_longest</code></a> and fill-in with <code>0</code>, like this</p>
<pre><code>&gt;&gt;&gt; from itertools import zip_longest as zip
&gt;&gt;&gt; x = [[2, 3, 3], [5, 0, 3]]
&gt;&gt;&gt; y = [[0, 3], [2, 3, 3, 3]]
&gt;&gt;&gt; [k + l for i, j in zip(x, y, fillvalue=[0]) for k, l in zip(i, j, fillvalue=0)]
[2, 6, 3, 7, 3, 6, 3]
</code></pre>
<p>This would would work even if <code>x</code> and <code>y</code> have unequal number of elements,</p>
<pre><code>&gt;&gt;&gt; from itertools import zip_longest as zip
&gt;&gt;&gt; x = [[2, 3, 3], [5, 0, 3], [1]]
&gt;&gt;&gt; y = [[0, 3], [2, 3, 3, 3]]    
&gt;&gt;&gt; [k + l for i, j in zip(x, y, fillvalue=[0]) for k, l in zip(i, j, fillvalue=0)]
[2, 6, 3, 7, 3, 6, 3, 1]
</code></pre>
<p>Note that, when we <code>zip</code> <code>x</code> and <code>y</code>, we use <code>[0]</code> as <code>fillvalue</code>. And when we <code>zip</code> <code>i</code> and <code>j</code> we use <code>0</code> as the <code>fillvalue</code>.</p>
<p>So, if the number of lists in <code>x</code> and <code>y</code> are not equal, then <code>[0]</code> will be used fill-in and when the number of elements in <code>i</code> and <code>j</code> are not equal, <code>0</code> will be used as the fill-in.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>fillvalue=0</code> in <code>izip_longest</code> to get ride of checking for validations then use <code>map</code> function for sum the zipped items:</p>
<pre><code>from itertools import chain,zip_longest  
list(chain.from_iterable(map(sum,zip_longest(i,j,fillvalue=0)) for i,j in zip_longest(x, y)))
[2, 6, 3, 7, 3, 6, 3]
</code></pre>
<p>Note that if you want to iterate over the result you don't have to use <code>list</code> (its just for demonstrating the result).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>zip_longest</code> is very helpful here:</p>
<pre><code>x = [[2,3,3], [5,0,3]]
y = [[0,3], [2,3,3,3]]

from itertools import zip_longest

res = []
for list1, list2 in zip_longest(x, y, fillvalue=[0]):
    for value1, value2 in zip_longest(list1, list2, fillvalue=0):
        res.append(value1 + value2)
</code></pre>
<p>The fill value pads the list or sublist with the given value. In our case a new list with <code>[0]</code> for the outer loop and <code>0</code> for the inner loop.</p>
<p>Writing this a nested list comprehension does the same but may take more time to read and understand the code. Using more lines can make reading and understanding faster. Of course, this depends very much on the person reading the code.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import zip_longest

new_list = [a + b
            for listpair in zip(x, y)
            for a, b in zip_longest(*listpair, fillvalue=0)]
</code></pre>
</div>
<span class="comment-copy">Will the number of elements in <code>x</code> and <code>y</code> be the same?</span>
<span class="comment-copy">If that is True, than just unnest them first</span>
<span class="comment-copy">No they won't be the same, that's why i tried to add zero's to make them equal, i wanted to add more zero's to make the pairs the same but i think there should be a better way of doing this without all the zeros</span>
<span class="comment-copy">@danidee Now, both <code>x</code> and <code>y</code> have two lists each. Will they be equal always?</span>
<span class="comment-copy">if it's the number of list in them, then yes they will always be equal but if it's the number of elements in the nested list, then they won't</span>
<span class="comment-copy">Thanks your solution works i was just wondering what if i wanted to get a result like this <code>[[2, 6, 3],  [7, 3, 6, 3, 1]]</code></span>
<span class="comment-copy">Simply nest them like this <code>[[k + l for k, l in zip(i, j, fillvalue=0)] for i, j in zip(x, y, fillvalue=[0])]</code></span>
