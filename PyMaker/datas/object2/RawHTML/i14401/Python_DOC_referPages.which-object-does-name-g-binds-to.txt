<div class="post-text" itemprop="text">
<p>Below assignment is taken from <a href="http://inst.eecs.berkeley.edu/~cs61a/fa12/hw/hw4.html" rel="nofollow">here</a></p>
<blockquote>
<p>Q5. Define the repeated function from Homework 2 by calling reduce with compose1 as the first argument. Add only a single expression to the starter implementation below:</p>
</blockquote>
<pre><code>def square(x):
    return x*x

def compose1(f, g):
    """Return a function of x that computes f(g(x))."""
    return lambda x: f(g(x))

from functools import reduce

def repeated(f, n):
    """Return the function that computes the nth application of f, for n&gt;=1.

    f -- a function that takes one argument
    n -- a positive integer

    &gt;&gt;&gt; repeated(square, 2)(5)
    625
    &gt;&gt;&gt; repeated(square, 4)(5)
    152587890625
    """
    assert type(n) == int and n &gt; 0, "Bad n"
    return reduce(compose1, "*** YOUR CODE HERE ***" )
</code></pre>
<p>To complete this assignment, I would like to understand, to what does <code>g</code> binds to? <code>f</code> binds to <code>square</code> function</p>
</div>
<div class="post-text" itemprop="text">
<p>First, what should <code>repeated(f, 4)</code> return?</p>
<p>A function that, when called on some arbitrary <code>arg</code>, will return <code>f(f(f(f(arg))))</code>.</p>
<p>So, if you want to build that with <code>compose1</code>, you'll need to return either <code>compose1(compose1(compose1(f, f), f), f)</code> or <code>compose1(f, compose1(f, compose1(f, f)))</code>.</p>
<p>Now, look at what <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>reduce</code></a> does, and figure out what it's going to pass to <code>compose1</code> each time. Clearly your <code>iterable</code> argument has to either start or end with <code>f</code> itself. But what else do you want there to make sure you get one of the two acceptable results?</p>
<p>And meanwhile, inside each call to <code>compose1</code> except the last, one of the two arguments has to be the <code>repeated</code> function's <code>f</code>, while the other will be the result of another call to <code>compose1</code>. (The last time, of course, they'll both be <code>f</code>.) Figure out which of those is <code>f</code> and which is <code>g</code>, and how you get <code>reduce</code> to pass the right values for each, and you've solved the problem.</p>
</div>
<span class="comment-copy">Do you know what <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>reduce</code></a> does? Here's a hint: if you want to return a function that does <code>f(f(f(…f(arg)))))</code>, that's going to be <code>compose(f, compose(f, compose(f, …(f))))</code>. Does that tell you what <code>g</code> is going to be?</span>
<span class="comment-copy">g can be any inbuilt python function</span>
<span class="comment-copy">@sachinsaxena: So? That's true, but in the OP's case, it never <i>will</i> be a built-in function…</span>
<span class="comment-copy">why -1 for this question?</span>
<span class="comment-copy">My guess is that someone didn't read carefully, and thought you were asking them to just solve the assignment for you (which would deserve a downvote), instead of help you understand what the <code>g</code> arguments are to each <code>compose1</code> call so you could solve the assignment yourself (which I don't think deserves a downvote). That's always a risk in questions like these. I'm not sure how to write things carefully so that nobody gets the wrong impression from a quick scan, but that's what you have to figure out if you're concerned about the votes.</span>
<span class="comment-copy"><code>return reduce(compose1, [f for i in range(n)])</code></span>
<span class="comment-copy">@overexchange: Yeah, that's the answer to your assignment. So I assume you also know the answer to your question of what <code>g</code> is inside each <code>compose1</code> call?</span>
<span class="comment-copy">g is f, everytime you call compose1</span>
