<div class="post-text" itemprop="text">
<p>I'm a newbie in python, so please bear with me.</p>
<p>I don't know how to describe,so I'll just show an example.</p>
<pre><code>python CODE.py -i1 input1.txt -i2 input2.txt -o output.txt
</code></pre>
<p>Is such thing possible with python? I've looked up for a while but haven't find an answer.</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of just linking to the <a href="https://docs.python.org/2.7/library/argparse.html" rel="nofollow">argparse module</a> or the <a href="https://docs.python.org/2.7/howto/argparse.html" rel="nofollow">argparse tutorial</a>,
the other respondents probably should have just shown you how to do it:</p>
<pre><code>import argparse

# Build the parser
p = argparse.ArgumentParser(prog='CODE.PY')
p.add_argument('-i1', type=argparse.FileType('r'),
               metavar='sourcefile1', help='First input file')
p.add_argument('-i2', type=argparse.FileType('r'),
               metavar='sourcefile2', help='Second input file')
p.add_argument('-o', type=argparse.FileType('w'),
               metavar='destfile', help='Destination filename')

# Parse sys.argv
ns = p.parse_args()

# Use the files
data1 = ns.i1.read()
data2 = ns.i2.read()
result = data1[:10] + data2[:10]
ns.o.write(result)
</code></pre>
<p>A nice feature of argparse is that not only does it build parsers, it creates a nice option for command-line help:</p>
<pre><code>$ python CODE.PY -h

usage: CODE.PY [-h] [-i1 sourcefile1] [-i2 sourcefile2] [-o destfile]

optional arguments:
  -h, --help       show this help message and exit
  -i1 sourcefile1  First input file
  -i2 sourcefile2  Second input file
  -o destfile      Destination filename
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can use system argument with your code. </p>
<p>Following snippet of code might help you to resolve your problem</p>
<pre><code>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('inFile', nargs=2, help="Choose in file to use")    
parser.add_argument('outFile', nargs=1, help="Choose out file to use")  
args=parser.parse_args()                                                 
your_fun_call( args.inFile , args.outFile[0] ) 
</code></pre>
<p>Might look wierd at first look but you can refer this document
<a href="https://docs.python.org/2/howto/argparse.html" rel="nofollow">argparse</a></p>
<p><strong>Note:</strong> infile argument has nargs as 2 because you want two input
 files ( nargs stands for number of argument)</p>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://stackoverflow.com/users/1903116/thefourtheye">thefourtheye</a> said you can used argparse module. But if you want simple solution, just pass 2 inputs and output file paths as arguments to your executable and use <code>sys.argv</code> to get them in your program in order. The <code>sys.argv[0]</code> is your application name, <code>sys.argv[1]</code> is first input file path, <code>sys.argv[2]</code> is second input file path and <code>sys.argv[3]</code> is output file path.</p>
<pre><code>import sys
input1 = sys.argv[1]
input2 = sys.argv[2]
output = sys.argv[3]
</code></pre>
<p>now you can call like below:</p>
<pre><code>python my_app.py /path/to/input1.txt /path/to/input2.txt /path/to/output.txt
</code></pre>
</div>
<span class="comment-copy">Try <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code> module</a></span>
<span class="comment-copy">Thank you! Your code perfectly worked, but when I tried to modify I got tons of error messages. Anyway, would you explain what does 'ns' mean in 'data1 = ns.i1.read()'?</span>
<span class="comment-copy">The variable <code>ns</code> is for the namespace object returned by the parser.  The attribute lookup <code>ns.i1</code> looks-up the file object for the <i>i1</i> source file.  The <code>ns.i1.read()</code> reads the data from the <i>i1</i> source file.</span>
