<div class="post-text" itemprop="text">
<p>I'm in the early stages of integrating some Python to invoke some computations in Matlab and roll up all the figures into some html generation I'll be doing in ll.xist. I had initially installed Python 2.7.5 32bit, but with a 64bit Matlab R2015a installation I could not <a href="http://www.mathworks.com/help/matlab/matlab_external/install-the-matlab-engine-for-python.html" rel="nofollow">install</a> the matlab engine for that version of python. I then downloaded a 64bit version of Python 2.7.9 and tried to do a pip into ll-xist, which was apparently not well maintained and failed. I then downloaded Python 3.4.3 64bit, downloaded the ll.xist installer <a href="http://www.livinglogic.de/Python/Download.html" rel="nofollow">ll-xist-5.13.win-amd64-py3.4.exe</a> and thought I was good to go. I had to do a pip to pull in cssutils, which succeeded.</p>
<p>Now I come to the point where I invoke my python file from the console. <strong>If I invoke it preceded with <code>python</code> everything works fine, if I don't the import isn't recognized</strong>. What could account for that discrepancy? Looks like some installation snafu between the various versions I've installed, somehow the python version on the path isn't being called appropriately and I'm guessing the 2.7.9 version of python is being invoked somehow because that install never had ll.xist installed, though my 2.7.5 install did.</p>
<pre><code>C:\Temp&gt;python MyScript.py a.txt b.txt
  file1: a.txt
  file2: b.txt

C:\Temp&gt;MyScript.py a.txt b.txt
Traceback (most recent call last):
  File "C:\Temp\MyScript.py", line 20, in &lt;module&gt;
    from ll.xist    import xsc
ImportError: No module named ll.xist
</code></pre>
<p>Here's a sanity check too...</p>
<pre><code>C:\Temp&gt;python
Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:44:40) [MSC v.1600 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; exit()

C:\Temp&gt;which python
/cygdrive/c/Python34/python
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check the file association for .py.  While the proper installation might be in your path, the file association might still be pointing to a different version.</p>
<p>You can check this by importing the <code>sys</code> module in a test script and call <code>print(sys.version)</code>.  Then run the test script with <code>python test.py</code> and just <code>test.py</code> to see which versions are printed. </p>
</div>
<div class="post-text" itemprop="text">
<p>Turns out the governing issue here is what is known as the <a href="https://docs.python.org/3/using/windows.html#python-launcher-for-windows" rel="nofollow noreferrer">Python Launcher for Windows</a>.<img alt="enter image description here" src="https://i.stack.imgur.com/pelgl.png"/></p>
<blockquote>
<p>3.4. Python Launcher for Windows New in version 3.3.</p>
<p>The Python launcher for Windows is a utility which aids in the
  location and execution of different Python versions. It allows scripts
  (or the command-line) to indicate a preference for a specific Python
  version, and will locate and execute that version.</p>
</blockquote>
<p>From my console, I can see the "default" version via the py command...</p>
<pre><code>C:\Users\me&gt;py
Python 2.7.9 (default, Dec 10 2014, 12:28:03) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; exit()

C:\Users\me&gt;py -3
Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:44:40) [MSC v.1600 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</code></pre>
<p>Here's the fundamental fix...</p>
<blockquote>
<p>The key benefit of this is that a single launcher can support multiple
  Python versions at the same time depending on the contents of the
  first line.</p>
</blockquote>
<p>The first line I had to add in my case to my script was</p>
<pre><code>#! python3
</code></pre>
<p>Great commentary linked <a href="http://blog.python.org/2011/07/python-launcher-for-windows_11.html" rel="nofollow noreferrer" title="PythonInsider--A Python Launcher For Windows">here</a> for details and motivations behind the Launcher.</p>
</div>
<span class="comment-copy">Bingo paidhima!  <code>C:\Users\me\Desktop&gt;test.py 2.7.9 (default, Dec 10 2014, 12:28:03) [MSC v.1500 64 bit (AMD64)]  C:\Users\me\Desktop&gt;python test.py 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:44:40) [MSC v.1600 64 bit (AMD64)]</code></span>
<span class="comment-copy">It's interesting that the last installer I invoked didn't take hold of the file association. I would have never guessed that, but upon deeper reflection that's exactly how Windows functions when you invoke a file by name. Windows goes and looks up the associated program to do something with that file. Got caught off guard, but I love how it got me to be exposed to sys.version. Definitely a good debug trick!</span>
<span class="comment-copy">My guess is that the installation checks to see if .py is associated.  If not, it associates itself.  If it is associated, it doesn't override what's already there.  This makes sense to me.  If you're usually running Python 2, and install Python 3, you may not want to have your file association changed.  Going between Python 2 minor versions, there's no reason to make a change as it's all installed to the same directory (Python 27) anyway.</span>
