<div class="post-text" itemprop="text">
<p>You may or may not be <a href="https://ronaldduncan.wordpress.com/2009/10/31/text-file-formats-ascii-delimited-text-not-csv-or-tab-delimited-text/" rel="nofollow">aware</a> of <a href="http://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text" rel="nofollow">ASCII delimited text</a>, which has the nice advantage of using non-keyboard characters for separating fields and lines.</p>
<p>Writing this out is pretty easy:</p>
<pre><code>import csv

with open('ascii_delim.adt', 'w') as f:
    writer = csv.writer(f, delimiter=chr(31), lineterminator=chr(30))
    writer.writerow(('Sir Lancelot of Camelot', 'To seek the Holy Grail', 'blue'))
    writer.writerow(('Sir Galahad of Camelot', 'I seek the Grail', 'blue... no yellow!'))
</code></pre>
<p>And, sure enough, you get things dumped out properly. However, on reading, <code>lineterminator</code> does nothing, and if I try to do: </p>
<pre><code>open('ascii_delim.adt', newline=chr(30))
</code></pre>
<p>It throws a <code>ValueError: illegal newline value:</code></p>
<p>So how can I read in my ASCII delimited file? Am I relegated to doing <code>line.split(chr(30))</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it by effectively translating the end-of-line characters in the file into the newline characters <code>csv.reader</code> is hardcoded to recognize:</p>
<pre><code>import csv

with open('ascii_delim.adt', 'w') as f:
    writer = csv.writer(f, delimiter=chr(31), lineterminator=chr(30))
    writer.writerow(('Sir Lancelot of Camelot', 'To seek the Holy Grail', 'blue'))
    writer.writerow(('Sir Galahad of Camelot', 'I seek the Grail', 'blue... no yellow!'))

def readlines(f, newline='\n'):
    while True:
        line = []
        while True:
            ch = f.read(1)
            if ch == '':  # end of file?
                return
            elif ch == newline:  # end of line?
                line.append('\n')
                break
            line.append(ch)
        yield ''.join(line)

with open('ascii_delim.adt', 'rb') as f:
    reader = csv.reader(readlines(f, newline=chr(30)), delimiter=chr(31))
    for row in reader:
        print row
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>['Sir Lancelot of Camelot', 'To seek the Holy Grail', 'blue']
['Sir Galahad of Camelot', 'I seek the Grail', 'blue... no yellow!']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/csv.html#csv.Dialect.lineterminator" rel="nofollow">The documentation</a> says:</p>
<blockquote>
<p>The reader is hard-coded to recognise either '\r' or '\n' as end-of-line, and ignores lineterminator. This behavior may change in the future.</p>
</blockquote>
<p>So the <code>csv</code> module cannot read CSV files that use custom line terminators.</p>
</div>
<div class="post-text" itemprop="text">
<p>Hey I was struggling with a similar problem all day. I wrote a function heavily inspired by @martineau that should solve it for you. My function is slower but can parse files delimited by any kind of string. Hope it helps!</p>
<pre><code>import csv

def custom_CSV_reader(csv_file,row_delimiter,col_delimiter):

    with open(csv_file, 'rb') as f:

        row = [];
        result = [];
        temp_row = ''
        temp_col = ''
        line = ''
        go = 1;

        while go == 1:
            while go == 1:
                ch = f.read(1)

                if ch == '':  # end of file?
                    go = 0

                if ch != '\n' and ch != '\t' and ch != ',':
                    temp_row = temp_row + ch
                    temp_col = temp_col + ch
                    line = line + ch

                if row_delimiter in temp_row:
                    line = line[:-len(row_delimiter)]

                    row.append(line)

                    temp_row = ''
                    line= ''

                    break

                elif col_delimiter in temp_col:
                    line = line[:-len(col_delimiter)]
                    row.append(line)
                    result.append(row)

                    row = [];
                    temp_col = ''
                    line = ''
                    break
    return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Per <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow">the docs for <code>open</code></a>:</p>
<blockquote>
<p><em>newline</em> controls how universal newlines mode works (it only applies to text mode). It can be <code>None</code>, <code>''</code>, <code>'\n'</code>, <code>'\r'</code>, and <code>'\r\n'</code>.</p>
</blockquote>
<p>so <code>open</code> won't handle your file. Per <a href="https://docs.python.org/3/library/csv.html#csv.Dialect.lineterminator" rel="nofollow">the <code>csv</code> docs</a>:</p>
<blockquote>
<p><strong>Note</strong> The <code>reader</code> is hard-coded to recognise either <code>'\r'</code> or <code>'\n'</code> as end-of-line, and ignores <em>lineterminator</em>.</p>
</blockquote>
<p>so that won't do it either. I also looked into whether <a href="https://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow"><code>str.splitlines</code></a> was configurable, but it uses a defined set of boundaries.</p>
<blockquote>
<p>Am I relegated to doing <code>line.split(chr(30))</code>?</p>
</blockquote>
<p>Looks that way, sorry!</p>
</div>
<span class="comment-copy">Boo. That's what I expected based on what I looked at/tried.</span>
