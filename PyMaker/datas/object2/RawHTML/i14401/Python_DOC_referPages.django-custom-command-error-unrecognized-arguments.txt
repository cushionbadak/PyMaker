<div class="post-text" itemprop="text">
<p>I'm trying to create a command similar to <code>createsuperuser</code> which will take two arguments (username and password)</p>
<p>Its working fine in django 1.7 but not in 1.8.  (I'm also using python3.4)</p>
<p>this is the code I wrote</p>
<p><strong>myapp/management/commands/createmysuperuser.py</strong></p>
<pre><code>from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth.models import User


class Command(BaseCommand):
    help = 'Create a super user'

    def handle(self, *args, **options):

        if len(args) != 2:
            raise CommandError('need exactly two arguments for username and password')
        username, password = args

        u, created = User.objects.get_or_create(username=username)
        if created:
            u.is_superuser = True
            u.is_staff = True
            u.set_password(password)
            u.save()
        else:
            raise CommandError("user '%s' already exist" % username)

        return "Password changed successfully for user '%s'" % u.username
</code></pre>
<p>and when I try to run this command </p>
<p><code>$ python manage.py createmysuperuser myuser mypassword</code></p>
<p>I get this error</p>
<pre><code>usage: manage.py createmysuperuser [-h] [--version] [-v {0,1,2,3}]
                                   [--settings SETTINGS]
                                   [--pythonpath PYTHONPATH] [--traceback]
                                   [--no-color]
manage.py createmysuperuser: error: unrecognized arguments: myuser mypassword
</code></pre>
<p>but when I dont pass any arguments it raises <code>CommandError</code> which is expected.</p>
<p><code>CommandError: need exactly two arguments for username and password</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In django 1.8 you should <a href="https://docs.djangoproject.com/en/1.8/releases/1.8/#extending-management-command-arguments-through-command-option-list">add arguments</a> to you command:</p>
<pre><code>class Command(BaseCommand):
    ...
    def add_arguments(self, parser):
        parser.add_argument('username')
        parser.add_argument('password')
</code></pre>
<p><code>add_argument()</code> method of <code>argparse</code> is <a href="https://docs.python.org/3/library/argparse.html#the-add-argument-method">documented here</a>.</p>
<p><strong>UPDATE</strong>: By default arguments are passed in the <code>options</code> parameter so the <code>handle()</code> method should look like this:</p>
<pre><code>def handle(self, *args, **options):
    username = options['username']
    password = options['password']
    ...
</code></pre>
<p>And you don't need to check the length of the <code>args</code> list - it is already done by <code>argparse</code>. This is the recommended method but if you want to use the <code>args</code> argument then you have to use the "compatibility mode" and name the added argument as <code>args</code>:</p>
<pre><code>class Command(BaseCommand):

    def add_arguments(self, parser):
        parser.add_argument('args')

    def handle(self, *args, **options):
        if len(args) != 2:
            ...
</code></pre>
<p>Read the "Changed in Django 1.8" side note in the <a href="https://docs.djangoproject.com/en/1.8/howto/custom-management-commands/#module-django.core.management">first chapter</a> of the docs (right after the <code>closepoll.py</code> example).</p>
<p><strong>UPDATE2</strong>: Here is the full working example:</p>
<pre><code>from django.core.management.base import BaseCommand    

class Command(BaseCommand):

    def add_arguments(self, parser):
        parser.add_argument('username')
        parser.add_argument('password')

    def handle(self, *args, **options):
        username = options['username']
        password = options['password']
        return u'Username: %s  Password: %s' % (username, password)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For minimal changes just add the method <code>add_arguments()</code> in Command class.</p>
<pre><code>def add_arguments(self, parser):
    parser.add_argument('args', nargs='*')
</code></pre>
<p>You can continue to use <code>args</code> as before.</p>
</div>
<span class="comment-copy"><code>python manage.py createmysuperuser username myuser password mypasswd</code> this command gives this error  <code>error: unrecognized arguments: password mypasswd</code></span>
<span class="comment-copy">I've added <code>add_arguments</code> method just as in your answer and  this below line to <code>handle</code> method <code>username, password = options['username'], options['password']</code>  am I doing wrong?</span>
<span class="comment-copy">See the updated answer.  You should call the command like: <code>python manage.py createmysuperuser myuser mypasswd</code>.</span>
<span class="comment-copy">I tried your code but still same error see my final code  <a href="http://ideone.com/SbtYSB" rel="nofollow noreferrer">ideone.com/SbtYSB</a>   is there any problem with this?</span>
<span class="comment-copy">You forgot to add the <code>add_arguments()</code> method from my first snippet.</span>
