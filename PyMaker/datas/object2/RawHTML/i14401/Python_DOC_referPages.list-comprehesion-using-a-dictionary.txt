<div class="post-text" itemprop="text">
<p>I have this dictionary:</p>
<pre><code> primes = {2: True, 3: True, 4: False, 5: True, 6: False, 7: True} 
</code></pre>
<p>And I wanted to create a list with only the pair that are True. It would look like this:</p>
<pre><code>[2, 3, 5, 7]
</code></pre>
<p>So I tried doing it this way:</p>
<pre><code>primelist = [x for x, y in primes if y]
</code></pre>
<p>But I get the error: </p>
<pre><code>TypeError: 'int' object is not iterable
</code></pre>
<p>What am I doing wrong? </p>
</div>
<div class="post-text" itemprop="text">
<p>You are close!  You just need to call the <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow"><code>.items()</code> method</a><sup>1</sup> on the dictionary:</p>
<pre><code>primelist = [x for x, y in primes.items() if y]
</code></pre>
<p>Iterating over a dictionary in Python yields only its keys, not keys and values as some might expect.  To get those, you call <code>.items()</code> to return an iterable of key/value pairs, which can then be unpacked into the names <code>x</code> and <code>y</code>.</p>
<hr/>
<p><sup>1</sup>Note that this answer is in regard to Python 3.x.  In Python 2.x, you should call <code>.iteritems()</code> instead since the Python 2.x <code>.items()</code> method will build an unnecessary list.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; filter(primes.get, primes)
[2, 3, 5, 7]
</code></pre>
<p>(That's Python 2, for Python 3 you'd need to slap a <code>list(...)</code> around it.)</p>
<p>I speed-tested it now with the numbers up to one million. Averages of 100 runs:</p>
<pre><code>Python 2.7.9:
0.0908 seconds for filter(primes.get, primes)
0.2372 seconds for [n for n, p in primes.items() if p]

Python 3.4.3:
0.1856 seconds for list(filter(primes.get, primes))
0.0953 seconds for [n for n, p in primes.items() if p]
</code></pre>
<p><br/>References: <a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow"><code>filter()</code></a> <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow"><code>list()</code></a> <a href="https://docs.python.org/2/library/stdtypes.html#dict.items" rel="nofollow"><code>items()</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate over <code>items</code>, and store off the <code>key</code> if the <code>value</code> is <code>True</code></p>
<pre><code>&gt;&gt;&gt; [k for k,v in primes.items() if v]
[2, 3, 5, 7]
</code></pre>
</div>
<span class="comment-copy">I'm doing it in Python 3.x. It was a silly mistake. Thank you!</span>
<span class="comment-copy">WoW ... You answered using <code>filter</code> while I was adding that to mine! But hey your's is better as it does not have <code>lambda</code> ... Should have thought of that!!</span>
<span class="comment-copy"><code>filter(primes.get, primes)</code> would probably be better.  You rarely need to access special methods directly.  But cool answer nonetheless. :)</span>
<span class="comment-copy">@iCodez Oh wow I'm dumb. Thanks. Now it's even pretty.</span>
<span class="comment-copy">@BhargavRao Note the improvement that iCodez pointed out. And I just speedtested it, on Python 2 it's actually <i>faster</i> than the list comprehension. I didn't expect that.</span>
<span class="comment-copy">Very cool answer. I'm just beginnig to learn Python and I'm really impressed of how expressive it can be!</span>
