<div class="post-text" itemprop="text">
<p>I was watching one of Raymond Hettinger's awesome videos and I got a bit confused on the decorator example:</p>
<pre><code>def cache(func):
    saved={}
    @wraps(func)
    def newfunc(*args):
        if args in saved:
            return newfunc(*args) # should be return saved[args]?
        result = func(*args)
        saved[args]=result
        return result
    return newfunc
</code></pre>
<p>I'm not particularly an expert on decorators but doesn't the return of the call to newfunc(*args) upon finding the item is cached cause a recursive loop that never finishes?  I think it is suppose to return saved[args] (the function eventually return's result, which is the same thing, but I don't think it ever gets there if an item is  found in cache.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, that's a mistake.</p>
<p>If you're not sure, let's test it:</p>
<pre><code>def fib(n):
    if n &lt; 2:
        return 1
    return fib(n-2) + fib(n-1)

print(fib(10))

@cache
def cfib(n):
    if n &lt; 2:
        return 1
    return cfib(n-2) + cfib(n-1)

print(cfib(10))
</code></pre>
<p>The first one prints out <code>89</code>, the second one aborts:</p>
<pre><code>  File "rhcache.py", line 8, in newfunc
    return newfunc(*args) # should be return saved[args]?
  File "rhcache.py", line 8, in newfunc
    return newfunc(*args) # should be return saved[args]?
  # ... 997 more copies
RuntimeError: maximum recursion depth exceeded
</code></pre>
<p>But if we change it as you suggest, it prints <code>89</code> again. (And, if you time it, it runs faster than the non-cached version; if you profile it, it makes only 10 calls to the real function; etc.)</p>
<p>All exactly as you expected.</p>
<p>So, what have we learned? That even Raymond Hettinger is not above occasional typos in untested code, but his code is clean enough that it's easy to find and fix the problem even without running it. :)</p>
<p>You could send him an email, add a comment on the YouTube page, or report an issue on the PyVideo page.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also use <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow">@functools.lru_cache(maxsize=128, typed=False)¶</a>
This would look like:</p>
<pre><code>from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n):
    if n &lt; 2:
        return n
    return fib(n-1) + fib(n-2)
</code></pre>
</div>
<span class="comment-copy">Could you show how <code>wraps</code> is defined?</span>
<span class="comment-copy">@Asad: It's almost certainly <code>from functools import wraps</code>.</span>
<span class="comment-copy">Can you link to the video (ideally with a timestamp)—or, if he's got an attached slideshow presentation, to the slide? It definitely seems wrong, and even Raymond Hettinger is not above making silly typos.</span>
<span class="comment-copy"><a href="http://pyvideo.org/video/1780/transforming-code-into-beautiful-idiomatic-pytho" rel="nofollow noreferrer">pyvideo.org/video/1780/…</a>  -- @ 41:10</span>
<span class="comment-copy">@Solaxun Probably a typo. The way it is defined now certainly doesn't use the cache.</span>
<span class="comment-copy">Nah I don't want to be that annoying guy who points out a minor typo 2 years after the fact... just wanted to make sure I wasn't missing something!  Thanks for taking the time to verify.</span>
