<div class="post-text" itemprop="text">
<p>For this string:</p>
<pre><code>"https://webster.bfm.com/viewserver/rw?port=AAA-NY&amp;rpttag=praada_pnl_sum_eq.BMACS_ASST_ALL&amp;subdir=gp_views/MUS-ALLRET/released"
</code></pre>
<p>looking to run regular expression to look like the below:</p>
<pre><code>list = [port=AAA,rpttag=praada_pnl_sum_eq.BMACS_ASST_ALL,subdir=gp_views/MUS-ALLRET/released]
</code></pre>
<p>I got this so far:</p>
<pre><code>re.findall(r'\?(.+)','https://webster.bfm.com/viewserver/rw?port=AAA-NY&amp;rpttag=praada_pnl_sum_eq.BMACS_ASST_ALL&amp;subdir=gp_views/MUS-ALLRET/released')
</code></pre>
<p>that just returns one string. I know I need to just repeat this pattern, \S&amp;+ using [], but can't see to figure out the best way to do this all in one regex</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>re.findall(r'[^?&amp;]+', s)[1:]
</code></pre>
<p>This works by splitting on either <code>?</code> or <code>&amp;</code> and then throwing away the first match, which is the part up to the <code>?</code>.</p>
<p>I'm making two assumptions here: first, that there are no <code>?</code> characters in your fragments, and second, that you really want the first element of your list to be <code>port=AAA-NY</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using regex to parse URL is a bad idea when Python has built-in library to do the job:</p>
<h3>Python 3</h3>
<p>Use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse" rel="nofollow"><code>urlparse</code></a> to parse the URL into schema, port, host, query, etc., then use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qs" rel="nofollow"><code>parse_qs</code></a> to parse the query string.</p>
<p>Do check out the documentation for parsing options for corner cases. </p>
<p>Example code:</p>
<pre><code>from urllib.parse import *
input = 'https://webster.bfm.com/viewserver/rw?port=AAA-NY&amp;rpttag=praada_pnl_sum_eq.BMACS_ASST_ALL&amp;subdir=gp_views/MUS-ALLRET/released'
url = urlparse(input)
query_parts = parse_qs(url.query)
</code></pre>
<p>Printing <code>query_parts</code>:</p>
<pre><code>&gt;&gt;&gt; print(query_parts)
{'rpttag': ['praada_pnl_sum_eq.BMACS_ASST_ALL'], 'port': ['AAA-NY'], 'subdir': ['gp_views/MUS-ALLRET/released']}
</code></pre>
<h3>Python 2</h3>
<p>The code in Python 2.* is similar, but you need to import <a href="https://docs.python.org/2/library/urlparse.html#module-urlparse" rel="nofollow"><code>urlparse</code></a> module, instead of <code>urllib.parse</code>. The functions are more or less the same.</p>
</div>
<span class="comment-copy">ahhh thank you. your assumptions are corrrect. So let me get this straight.  ^ = starts with.. so repeat the pattern of "Starts with ? to &amp;", but not every fragment has a "?".. and im understanding this correctly?</span>
<span class="comment-copy">Normally <code>^</code> does mean "starts with", however inside <code>[...]</code> its meaning changes to "not".  So <code>[^?&amp;]</code> matches any character that is not <code>?</code> or <code>&amp;</code>.</span>
<span class="comment-copy">oh ? = referring to match 0 or 1 occurances of the patters to its left... I think i got it now</span>
<span class="comment-copy">The <code>?</code> inside [...] has no special meaning; it refers to the literal <code>?</code> in your URL string.</span>
<span class="comment-copy">hmm I guess I'm confused on how this is working then..is it saying the range of ? to &amp;</span>
