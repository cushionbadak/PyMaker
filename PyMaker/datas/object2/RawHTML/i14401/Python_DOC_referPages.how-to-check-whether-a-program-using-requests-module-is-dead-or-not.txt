<div class="post-text" itemprop="text">
<p>I am trying to using python download a batch of files, and I use requests module with stream turned on, in other words, I retrieve each file in 200K blocks. 
However, sometimes, the downloading may stop as it just gets stuck (no response) and there is no error. I guess this is because the connection between my computer and server was not stable enough. Here is my question, how to check this kind of stop and make a new connection? </p>
</div>
<div class="post-text" itemprop="text">
<p>You probably <em>don't</em> want to detect this from outside, when you can just use <a href="http://docs.python-requests.org/en/latest/user/quickstart/#timeouts" rel="nofollow">timeouts</a> to have <code>requests</code> fail instead of stopping is the server stops sending bytes.</p>
<p>Since you didn't show us your code, it's hard to show you how to change it… but I'll show you how to change some other code:</p>
<pre><code># hanging
text = requests.get(url).text

# not hanging
try:
    text = requests.get(url, timeout=10.0).text
except requests.exceptions.Timeout:
    # failed, do something else

# trying until success
while True:
    try:
        text = requests.get(url, timeout=10.0).text
        break
    except requests.exceptions.Timeout:
        pass
</code></pre>
<hr/>
<p>If you <em>do</em> want to detect it from outside for some reason, you'll need to use <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow"><code>multiprocessing</code></a> or similar to move the <code>requests</code>-driven code to a child process. Ideally you'll want it to post updates on some <code>Queue</code> or set and notify some <code>Condition</code>-protected shared flag variable every 200KB, then the main process can block on the <code>Queue</code> or <code>Condition</code> and <code>kill</code> the child process if it times out. For example (pseudocode):</p>
<pre><code>def _download(url, q):
    create request
    for each 200kb block downloaded:
        q.post(buf)

def download(url):
    q = multiprocessing.Queue()
    with multiprocessing.Process(_download, args=(url, q)) as proc:
        try:
            return ''.join(iter(functools.partial(q.get, timeout=10.0)))
        except multiprocessing.Empty:
            proc.kill()
            # failed, do something else
</code></pre>
</div>
<span class="comment-copy">could someone tell me, why it is downvoted?</span>
<span class="comment-copy">If I had to guess, I'd say the most likely reason you were downvoted was that, instead of giving us a <a href="http://stackoverflow.com/help/mcve">minimal, clear, verifiable example</a>, you just gave us a vague description of your code. That makes it harder to be sure you're asking what you seem to be asking, and it means an answer can't just show you how to modify the code, it has to explain things in more abstract terms. I didn't find this particular question too vague to answer, but it's always better to be specific and complete when you can.</span>
<span class="comment-copy">Another possibility is that the voter thought this was something trivial you should have been able to find just by glancing at the docs (although I'm not sure I'd agree with that; you have to know the word "timeout" to search for it…). Or, of course, the voter just doesn't like people with numbers in their name unless they include a <code>4</code>, or his cat walked on the keyboard. :)</span>
<span class="comment-copy">I just forgot to use timeout, it is indeed a silly question, but when one is not very familiar with requests, it always happens. Anyway, Thank you for your suggestion and your help, I would post some code next time when I ask question. @abarnert</span>
<span class="comment-copy">Thanks, this is what I need!</span>
