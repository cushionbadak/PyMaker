<div class="post-text" itemprop="text">
<p>I'd like my curses application to display the absolute path of the current file that it is working with as it iterates. These can get longer than the window, running into the next line. If the next file path is shorter, difference in length is not overwritten, leading to mangled strings. What is the best practice way of fixing this problem?</p>
<p>Edit: Python 3 sample code on Mac OS X</p>
<pre><code>from os import walk
import curses
from os import path

stdscr = curses.initscr()
curses.noecho()
for root, dirs, files in walk("/Users"):
    for file in files:
        file_path = path.join(root, file)
        stdscr.addstr(0, 0, "Scanning: {0}".format(file_path))
        stdscr.clearok(1)
        stdscr.refresh()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you don't want to use a window, the simplest solution is:</p>
<ol>
<li>Use <a href="https://docs.python.org/3/library/curses.html#curses.window.addnstr" rel="nofollow"><code>addnstr</code></a> instead of <code>addstr</code> to never write more characters than fit on the line, and</li>
<li>Use <a href="https://docs.python.org/3/library/curses.html#curses.window.clrtoeol" rel="nofollow"><code>clrtoeol</code></a> to erase any leftover characters after the new path.</li>
</ol>
<p>For example:</p>
<pre><code>from scandir import walk
import curses
from os import path

try:
    stdscr = curses.initscr()
    curses.noecho()
    _, width = stdscr.getmaxyx()
    for root, dirs, files in walk("/Users"):
        for file in files:
            file_path = path.join(root, file)
            stdscr.addnstr(0, 0, "Scanning: {0}".format(file_path), width-1)
            stdscr.clrtoeol()
            stdscr.clearok(1)
            stdscr.refresh()
finally:
    curses.endwin()
</code></pre>
<hr/>
<p>If you want to do this by creating a larger-than-fullscreen window and clipping it to the terminal, read up on <a href="https://docs.python.org/3/library/curses.html#curses.newpad" rel="nofollow"><code>newpad</code></a>. For a trivial case line this, it won't be any simpler, but for more complex cases it might be what you're looking for:</p>
<pre><code>from scandir import walk
import curses
from os import path

try:
    stdscr = curses.initscr()
    curses.noecho()
    height, width = stdscr.getmaxyx()
    win = curses.newpad(height, 16383)
    for root, dirs, files in walk("/Users"):
        for file in files:
            file_path = path.join(root, file)
            win.addstr(0, 0, "Scanning: {0}".format(file_path))
            win.clrtoeol()
            win.clearok(1)
            win.refresh(0, 0, 0, 0, height-1, width-1)
finally:
    curses.endwin()
</code></pre>
</div>
<span class="comment-copy">That depends upon how you are displaying the text. Please provide a short, complete program that demonstrates the problem.</span>
<span class="comment-copy">It sounds like you either need to truncate your strings, create a scrolling window large enough for your strings, or clear to EOL after your strings. I'm not sure which one of the three; as @Robáµ© says, without seeing your code, and ideally getting a more complete description of your program, it's hard to guess.</span>
<span class="comment-copy">@abarnet Added sample code</span>
<span class="comment-copy">Please give us actual working sample code; you at least need to <code>from os import path</code> or something here. Also, a <a href="http://stackoverflow.com/help/mcve">minimal, complete, verifiable example</a> shouldn't include a third-party dependency that's not relevant to the problem; why not just use <code>os.walk</code> instead of <code>scandir.walk</code> to demonstrate it?</span>
