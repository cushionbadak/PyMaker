<div class="post-text" itemprop="text">
<p>Say I have list with elements <code>content = ['121\n', '12\n', '2\n', '322\n']</code> and list with functions <code>fnl = [str.strip, int]</code>.</p>
<p>So I need to apply each function from <code>fnl</code> to each element from <code>content</code> sequentially.
I can do this by several calls <code>map</code>.</p>
<p>Another way:</p>
<pre><code>xl = lambda func, content: map(func, content)
for func in fnl:
    content = xl(func, content) 
</code></pre>
<p>I'm just wondering if there is a more pythonic way to do it.</p>
<p>Without separate function? By single expression?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow noreferrer"><code>reduce()</code> function</a> in a list comprehension here:</p>
<pre><code>[reduce(lambda v, f: f(v), fnl, element) for element in content]
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; content = ['121\n', '12\n', '2\n', '322\n']
&gt;&gt;&gt; fnl = [str.strip, int]
&gt;&gt;&gt; [reduce(lambda v, f: f(v), fnl, element) for element in content]
[121, 12, 2, 322]
</code></pre>
<p>This applies each function in turn to each element, as if you nested the calls; for <code>fnl = [str.strip, int]</code> that translates to <code>int(str.strip(element))</code>.</p>
<p>In Python 3, <code>reduce()</code> was moved to the <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools</code> module</a>; for forwards compatibility, you can import it from that module from Python 2.6 onwards:</p>
<pre><code>from functools import reduce

results = [reduce(lambda v, f: f(v), fnl, element) for element in content]
</code></pre>
<p>Note that for the <code>int()</code> function, it doesn't matter if there is extra whitespace around the digits; <code>int('121\n')</code> works without stripping of the newline.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are describing the basic use of a list comprehension:</p>
<pre><code>&gt;&gt;&gt; content = ['121\n', '12\n', '2\n', '322\n']
&gt;&gt;&gt; [int(n) for n in content]
[121, 12, 2, 322]
</code></pre>
<p>Note you don't need the call to <code>strip</code> to convert to integer here, some whitespace is handled fine. </p>
<p>If your real use-case is more complex and you  wish to compose arbitrarily many functions in the comprehension, however, I found the idea from <a href="https://stackoverflow.com/a/13219401/674039">here</a> quite pythonic:  </p>
<pre><code>def compose(f1, f2):
    def composition(*args, **kwargs):
        return f1(f2(*args, **kwargs))
    return composition

def compose_many(*funcs):
    return reduce(compose, funcs)
</code></pre>
</div>
