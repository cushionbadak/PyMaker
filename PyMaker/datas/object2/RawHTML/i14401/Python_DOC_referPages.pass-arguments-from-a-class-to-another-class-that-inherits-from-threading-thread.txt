<div class="post-text" itemprop="text">
<p>I have two class in my python code. The class <code>Filtro</code> must to send two parameters to the class <code>Man_Thr</code> but if I send them by the costructor I never call the costructor for the thread metod <code>start</code>. This is my code:</p>
<pre><code>import threading

class Man_Thr(threading.Thread):
  def __init__(self,cmd,q):
    self.comando=cmd
    self.coda=q

  def run(self):
    try:
        proc=subprocess.Popen([self.comando],
                shell=True,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )
        self.coda.put(proc)
    except:
        print "Il comando", self.comando, "non esiste. Riprovare."
        self.coda.put(-1)

class Filtro(Man_Thr):
  def __init__(self,cmd):
    q=Queue.Queue()
    thr=Man_Thr(cmd,q)
    thr.start()
    self.result=q.get()

filtro=Filtro(' '.join(sys.argv[1:len(sys.argv)-1]))
</code></pre>
<p>and this is my output:</p>
<pre><code>Traceback (most recent call last):
File "filtro2.py", line 75, in &lt;module&gt;
  filtro=Filtro(' '.join(sys.argv[1:len(sys.argv)-1]))
File "filtro2.py", line 45, in __init__
  thr.start()
File "/usr/lib64/python2.6/threading.py", line 465, in start
  raise RuntimeError("thread.__init__() not called")
RuntimeError: thread.__init__() not called
</code></pre>
<p>I run the script in this way:</p>
<pre><code> python filtro2.py ./a.out input.txt
</code></pre>
<p>What's the best method for send the parameters from a derivated class to a base class?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to call <code>threading.Thread</code>'s <code>__init__</code>. Usually we use <code>super</code> for that.</p>
<pre><code>class Parent(object):
    def __init__(self, *args, **kwargs):
        print("You've called Parent.__init__")

class Child(Parent):
    def __init__(self, child_arg, *args, **kwargs):
        print("You've called Child.__init__ with child_arg={}".format(child_arg))
        super().__init__(*args, **kwargs)
</code></pre>
<p>In your case you'll want to do:</p>
<pre><code>class Man_Thr(threading.Thread):
    def __init__(self, cmd, q, *args, **kwargs):
        self.comando = cmd
        self.coda = q
        super().__init__(*args, **kwargs)
    ...  # the rest of your class as-is

class Filtro():  # why are you inheriting? This isn't a child...
    def __init__(self, cmd, *args, **kwargs):
        q = queue.Queue()
        thr = Man_Thr(cmd, q, *args, **kwargs)
        thr.start()
        self.result = q.get()

filtro = Filtro(' '.join(sys.argv[1:-1])
</code></pre>
<p>The general pattern is to have each class accept certain arguments, and pass any other arguments off to its parents' <code>__init__</code> methods.</p>
<p>I'd also urge you to use some sort of argument parsing module rather than trying to handle it yourself. Depending on your version of Python, <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow"><code>argparse</code></a> is in the stdlib from 3.2+.</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('outfile', type=argparse.FileType('w'))
parser.add_argument('infile', type=argparse.FileType('r'))

args = parser.parse_args()

for line in args.infile:
    print(line.strip())
args.infile.seek(0)
for line in args.infile:
    args.outfile.write(line)
</code></pre>
</div>
<span class="comment-copy">can you fix your indentation and show us how you're running the code? I'm trying to piece it together from the traceback but it's not making much sense at the moment.</span>
<span class="comment-copy">Thanks, I fix the indentation and I put how I run the code. I must write a script that run an external cmd by a thread and, in future, I must write the output and the stderr. From now I must send the two parameters, q and cmd to the class Man_Thr</span>
<span class="comment-copy">You still haven't written how the code is executed. Sure you call <code>$ python filtro2.py ...</code> but what does that do in your code? The code snippet we have here defines the classes -- how do you instantiate?</span>
<span class="comment-copy">in this way: filtro=Filtro(' '.join(sys.argv[1:len(sys.argv)-1]))</span>
