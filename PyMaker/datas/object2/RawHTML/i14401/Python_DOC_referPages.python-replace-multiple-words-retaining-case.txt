<div class="post-text" itemprop="text">
<p>I'm trying to write a filter in django that highlights words based on a search query. For example, if my string contains <code>this is a sample string that I want to highlight using my filter</code> and my search stubs are <code>sam</code> and <code>ring</code>, my desired output would be:</p>
<pre><code>this is a &lt;mark&gt;sam&lt;/mark&gt;ple st&lt;mark&gt;ring&lt;/mark&gt; that I want to highlight using my filter
</code></pre>
<p>I'm using the answer from <a href="https://stackoverflow.com/questions/6116978/python-replace-multiple-strings">here</a> to replace multiple words. I've presented the code below:</p>
<pre><code>import re

words = search_stubs.split()
rep = dict((re.escape(k), '&lt;mark&gt;%s&lt;/mark&gt;'%(k)) for k in words)
pattern = re.compile('|'.join(rep.keys()))
text = pattern.sub(lambda m : rep[re.escape(m.group(0))], text_to_replace)
</code></pre>
<p>However, when there is case sensitivity, this breaks. For example, if I have the string <code>Check highlight function</code>, and my search stub contains <code>check</code>, this breaks.</p>
<p>The desired output in this case would naturally be:</p>
<pre><code>&lt;mark&gt;Check&lt;/mark&gt; highlight function
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to go for dictionary here. <code>(?i)</code> called case-insensitive modifier helps to do a case-insensitive match.</p>
<pre><code>&gt;&gt;&gt; s = "this is a sample string that I want to highlight using my filter"
&gt;&gt;&gt; l = ['sam', 'ring']
&gt;&gt;&gt; re.sub('(?i)(' + '|'.join(map(re.escape, l)) + ')', r'&lt;mark&gt;\1&lt;/mark&gt;', s)
'this is a &lt;mark&gt;sam&lt;/mark&gt;ple st&lt;mark&gt;ring&lt;/mark&gt; that I want to highlight using my filter'
</code></pre>
<p>EXample 2:</p>
<pre><code>&gt;&gt;&gt; s = 'Check highlight function'
&gt;&gt;&gt; l = ['check']
&gt;&gt;&gt; re.sub('(?i)(' + '|'.join(map(re.escape, l)) + ')', r'&lt;mark&gt;\1&lt;/mark&gt;', s)
'&lt;mark&gt;Check&lt;/mark&gt; highlight function'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <em>simple</em> way to do this is to not try to build a dict mapping every single word to its marked-up equivalent, and just use a capturing group and a reference to it. Then you can just use the <code>IGNORECASE</code> flag to do a case-insensitive search.</p>
<pre><code>pattern = re.compile('({})'.format('|'.join(map(re.escape, words))),
                     re.IGNORECASE)
text = pattern.sub(r'&lt;mark&gt;\1&lt;/mark&gt;', text_to_replace)
</code></pre>
<p>For example, if <code>text_to_replace</code> were:</p>
<pre><code>I am Sam. Sam I am. I will not eat green eggs and spam.
</code></pre>
<p>â€¦ then <code>text</code> will be:</p>
<pre><code>I am &lt;mark&gt;Sam&lt;/mark&gt;. &lt;mark&gt;Sam&lt;/mark&gt; I am. I will not eat green eggs and spam
</code></pre>
<hr/>
<p>If you really <em>did</em> want to do it your way, you could. For example:</p>
<pre><code>text = pattern.sub(lambda m: rep[re.escape(m.group(0))].replace(m, m.group(0)),
                   text_to_replace)
</code></pre>
<p>But that would be kind of silly. You're building a dict with <code>'sam'</code> embedded in the value, just so you can replace that <code>'sam'</code> with the <code>'Sam</code>' that you actually matched.</p>
<hr/>
<p>See <a href="https://docs.python.org/3/howto/regex.html#grouping" rel="nofollow">Grouping</a> in the Regular Expression HOWTO for more on groups and references, and the <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow"><code>re.sub</code></a> docs for specifics on using references in substitutions.</p>
</div>
