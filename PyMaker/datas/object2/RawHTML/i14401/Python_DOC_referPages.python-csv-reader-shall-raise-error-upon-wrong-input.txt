<div class="post-text" itemprop="text">
<p>I have a string called <code>group_data</code>, which I want to read with Python's <code>csv.reader</code>. This is the call I am making.</p>
<pre><code>group = csv.reader(group_data.split('\n'), delimiter=';', 
                   doublequote=True, quoting=csv.QUOTE_ALL, strict=True)
</code></pre>
<p>I want that this raises an exception whenever one of the following is the case:</p>
<ul>
<li>There is a single quote: <code>"A";"B "bb" B";"C"</code> instead
of <code>"A";"B ""bb"" B";"C")</code> </li>
<li>Any of the fields is not
quoted: <code>A;B;C</code> instead of <code>"A";"B";"C"</code></li>
</ul>
<p>However, the excerpt above accepts both lines as correct, even with the <code>doublequote=True</code>, <code>quoting=csv.QUOTE_ALL</code>, and <code>strict=True</code> settings. Is there another option I should set to make it fail? If this is not possible, is there another way to quickly notice if there is a single quote or an unquoted field?</p>
</div>
<div class="post-text" itemprop="text">
<p>For what it's worth, it looks like Python 3.4 does reject your first example:</p>
<pre><code>In [8]: mkreader = lambda x: csv.reader(x.split("\n"), delimiter=";", doublequote=True, quoting=csv.QUOTE_ALL, strict=True)
In [11]: for l in mkreader('''"A";"B ""bb"" B";"C"'''): print(l)
['A', 'B "bb" B', 'C']
In [12]: for l in mkreader('''"A";"B "bb" B";"C"'''): print(l)
...
Error: ';' expected after '"'
</code></pre>
<p>Although it allows the second:</p>
<pre><code>In [13]: for l in mkreader('''A;B;C'''): print(l)
['A', 'B', 'C']
</code></pre>
<p>Looking at the <a href="https://docs.python.org/3/library/csv.html#csv-fmt-params" rel="nofollow">docs</a>, it seems like this is because <code>QUOTE_ALL</code> is strictly a writer setting, not a reader setting:</p>
<pre><code>csv.QUOTE_ALL
    Instructs writer objects to quote all fields.
</code></pre>
<p>Compare to: </p>
<pre><code>csv.QUOTE_NONNUMERIC

    Instructs writer objects to quote all non-numeric fields.

    Instructs the reader to convert all non-quoted fields to type float.
</code></pre>
<p>So it looks like you need to make this yourself if you want it. This is simple if you know that <code>;</code> will never appear inside your rows (which appears to be the case, since you don't set <code>escapechar</code>):</p>
<pre><code>In [19]: def check_line(line):
    for word in line.split(';'):
        if word[0] != '"' or word[-1] != '"':
            raise csv.Error("Bad input.")
In [20]: check_line("A;B;C")
...
Error: Bad input.
</code></pre>
</div>
<span class="comment-copy"><a href="http://pandas.pydata.org/" rel="nofollow noreferrer">pandas</a> has a <a href="http://pandas.pydata.org/pandas-docs/stable/io.html#io-read-csv-table" rel="nofollow noreferrer">csv reader</a>.  It may be worth checking if their reader is a little more strict.</span>
<span class="comment-copy">I noticed that the reader command itself did not raise an error in the first case in Python 3.4, but when you then use that reader in a for loop, it does. I guess I have to build this second check manually. Thanks for your help!</span>
<span class="comment-copy">Hmm, this seems to be more complicated than I hoped for, since I have to basically implement my own csv reader for it (split for newlines, then split for semicolons, then check quotes).</span>
