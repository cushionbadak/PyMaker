<div class="post-text" itemprop="text">
<p>Please consider this code:</p>
<pre><code>import time
from multiprocessing import Process

class Host(object):
    def __init__(self):
        self.id = None
    def callback(self):
        print "self.id = %s" % self.id
    def bind(self, event_source):
        event_source.callback = self.callback

class Event(object):
    def __init__(self):
        self.callback = None
    def trigger(self):
        self.callback()

h = Host()
h.id = "A"
e = Event()
h.bind(e)
e.trigger()

def delayed_trigger(f, delay):
    time.sleep(delay)
    f()

p = Process(target = delayed_trigger, args = (e.trigger, 3,))
p.start()

h.id = "B"
e.trigger()
</code></pre>
<p>This gives in output</p>
<pre><code>self.id = A
self.id = B
self.id = A
</code></pre>
<p>However, I expected it to give</p>
<pre><code>self.id = A
self.id = B
self.id = B
</code></pre>
<p>..because the h.id was already changed to "B" by the time the trigger method was called.</p>
<p>It seems that a copy of host instance is created at the moment when the separate Process is started, so the changes in the original host do not influence that copy.</p>
<p>In my project (more elaborate, of course), the host instance fields are altered time to time, and it is important that the events that are triggered by the code running in a separate process, have access to those changes.  </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow">multiprocessing</a> runs stuff in separate <strong>processes</strong>. It is almost inconceivable that things are <strong>not</strong> copied as they're sent, as sharing stuff between processes requires shared memory or communication. </p>
<p>In fact, if you peruse the module, you can see the amount of effort it takes to actually share anything between the processes after the diverge, either through <a href="https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes" rel="nofollow">explicit communication</a>, or through <a href="https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes" rel="nofollow">explicitly-shared objects</a> (which are of a very limited subset of the language, and have to be managed by a <code>Manager</code>).</p>
</div>
<span class="comment-copy"><code>def __init(self):</code>? Aren't you missing <code>__</code> at the end?</span>
<span class="comment-copy">You are correct: Multiprocessing runs those threads in separate threads and each thread has it's own instance of the Host class and they don't communicate with each other.  You should check out this answer: <a href="http://stackoverflow.com/questions/16244745/how-to-use-classes-with-python-multiprocessing" title="how to use classes with python multiprocessing">stackoverflow.com/questions/16244745/â€¦</a></span>
<span class="comment-copy">multiprocessing does not share memory ... it is effectively 2 totally separate programs.  use <code>multiprocessing.Pipe</code> to communicate between processes, or use threading if you need shared memory space  (there is a way to share memory with multiprocessing iirc ... but it makes everything slow ... unbearably so)</span>
<span class="comment-copy">@theodox - <i>each thread has it's own instance of the Host class</i> - you've mixed up <i>threads</i> and <i>processes</i>. <i>threads</i> share the memory, processes do not.</span>
<span class="comment-copy">true, sloppy vocab on my part.  The main point is that they separate hosts are running in isolation.</span>
<span class="comment-copy">Thanks, I've managed to find a way how to run those event sources in separate threads rather than processes. If I could not do that perhaps I could use Redis to get the data across then.</span>
