<div class="post-text" itemprop="text">
<p>I am trying to find a way to match a pattern p in a string s in python.</p>
<pre><code>s = 'abccba'
ss = 'facebookgooglemsmsgooglefacebook'
p = 'xyzzyx'
# s, p -&gt; a, z  # s and p can only be 'a' through 'z'

def match(s, p):
   if s matches p:
      return True
   else:
      return False

match(s, p) # return True
match(ss, p) # return True
</code></pre>
<hr/>
<p>I just tried:</p>
<pre><code>import re

s = "abccba"
f = "facebookgooglemsmsgooglefacebook"
p = "xyzzyx"

def fmatch(s, p):
    p = re.compile(p)
    m = p.match(s)
    if m:
        return True
    else:
        return False

print fmatch(s, p)
print fmatch(f, p)
</code></pre>
<p>Both return false; they are supposed to be true.</p>
</div>
<div class="post-text" itemprop="text">
<p>I convert your pattern into a regular expression that can then be used by <code>re.match</code>. For example, your <code>xyzzyx</code> becomes <code>(.+)(.+)(.+)\3\2\1$</code> (the first occurrence of each letter becomes a capture group <code>(.+)</code>, and subsequent occurences become the proper back reference).</p>
<pre><code>import re

s = 'abccba'
ss = 'facebookgooglemsmsgooglefacebook'
p = 'xyzzyx'

def match(s, p):
    nr = {}
    regex = []
    for c in p:
        if c not in nr:
            regex.append('(.+)')
            nr[c] = len(nr) + 1
        else:
            regex.append('\\%d' % nr[c])
    return bool(re.match(''.join(regex) + '$', s))

print(match(s, p))
print(match(ss, p))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I'm understanding your question, you're looking for a pythonic approach to pattern matching across a set of strings.</p>
<p>Here is an example demonstrating the use of list comprehensions to achieve this goal.</p>
<p>I hope it helps you reach your goal.  Please let me know if I can help further.
- JL</p>
<p><strong><em>Demonstrate No Match Found</em></strong></p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = ["abccba", "facebookgooglemsmsgooglefacebook"]
&gt;&gt;&gt; p = "xyzzyx"
&gt;&gt;&gt; result = [ re.search(p,str) for str in s ] 
&gt;&gt;&gt; result
[None, None]
</code></pre>
<p><strong><em>Demonstrate Combination of Matches and No Match in the result</em></strong></p>
<pre><code>&gt;&gt;&gt; p = "abc"
&gt;&gt;&gt; result = [ re.search(p,str) for str in s ] 
&gt;&gt;&gt; result
[&lt;_sre.SRE_Match object at 0x100470780&gt;, None]
&gt;&gt;&gt; [ m.group(0) if m is not None else 'No Match' for m in result ]
['abc', 'No Match']
&gt;&gt;&gt; [ m.string if m is not None else 'No Match' for m in result ]
['abccba', 'No Match']
</code></pre>
<p><strong><em>Demonstrate single statement</em></strong></p>
<pre><code>&gt;&gt;&gt; [ m.string if m is not None else 'No Match' for m in [re.search(p,str) for str in s] ]
['abccba', 'No Match']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Compile a Python regular expressions object for some pattern of interest and then pass the string to its Match(string) method. You'll want to use a <code>match</code> object if you need a boolean output: <a href="https://docs.python.org/3/library/re.html#match-objects" rel="nofollow">https://docs.python.org/3/library/re.html#match-objects</a></p>
<p>Example: Check string s for any word character (that is, alphanumerics)</p>
<pre><code>def match_string(s):
    ##compile a regex for word characters
    regex = re.compile("\\w") 
    ##return the result of the match function on string 
    return re.match(s)
</code></pre>
<p>Hope it helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could make use of regular expressions. <br/> 
Have a look here for some examples: <a href="http://www.dotnetperls.com/re" rel="nofollow">Link</a></p>
<p>I think you could use <code>re.search()</code></p>
<p>Ecample: </p>
<pre><code>import re 

stringA = 'dog cat mouse'
stringB = 'cat'

# Look if stringB is in stringA
match = re.search(stringB, stringA)

if match:
    print('Yes!')
</code></pre>
</div>
<span class="comment-copy">Does <code>if p in s</code> work for you?</span>
<span class="comment-copy">The keywords in Python are <code>True</code> and <code>False</code>. Capitalization is important.</span>
<span class="comment-copy">Related: <a href="http://codereview.stackexchange.com/q/21532">codereview.stackexchange.com/q/21532</a></span>
<span class="comment-copy">No. As in the example, each element in p and s can be different. Each element in the pattern can be 1 char in the string or 1000 chars.</span>
<span class="comment-copy">Are you trying to perform a dynamic pattern match, where "xyzzyx" means that x, y, and z can represent any string but then must appear in specified sequence?</span>
<span class="comment-copy">Thank you Super Stefan.</span>
<span class="comment-copy">Your question is correct but the result is wrong. "abccba" and "xyzzyx" are a clear match to a human.</span>
<span class="comment-copy">I think I understand now.  But I think, then that "facebookgooglemsmsgooglefacebook" should really be "facebookgooglemsmssmsgooglefacebook" to be a match, since the middle item must repeat.  Then the next step is to recode the match pattern to a standard base representations (e.g. "xyzzyx" should be recoded to "abccba", where a="x", b="y", c="z").  This would take care of one match.  The second match would need to allow for recoding of any length string.  You would find this algorithm, no doubt, in basic compression schemes, which first build an optimal symbol table, then compress the string.</span>
<span class="comment-copy">It will be better off with an example.</span>
<span class="comment-copy">I have fixed the above problem description</span>
<span class="comment-copy">So, using the documentation provided, write a method that accepts s and p, compiles a regex for pattern p, and matches it to s. Learning to read and implement from API documentation will serve you greatly in the long-run.</span>
<span class="comment-copy">Is regex the best way? I have been trying and it returns False.</span>
<span class="comment-copy">search() is not correct. Each char in p is an element of the pattern. In the string that element can be of any char(a-z) or any length.</span>
