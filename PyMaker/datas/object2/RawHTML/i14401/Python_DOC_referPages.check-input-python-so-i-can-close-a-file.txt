<div class="post-text" itemprop="text">
<pre><code>file=open('ClassA1.txt','a')
file=open('ClassB1.txt','a')
file=open('ClassC1.txt','a')
 print('hello welcome to maths 2000')
 Class=input('please enter your class '+"\n")
 name=input('please enter your name '+"\n")
 if Class==(int(input"A1")):
    file.close('ClassB1')
    file.close('ClassC1')
    file.write(name+"/n")
   file.close 
</code></pre>
<p>How do I get it to check user input so it can close the files?</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok first point :</p>
<p>This line: </p>
<pre><code>file=open('ClassA1.txt','a')
</code></pre>
<p>opens file 'ClassA1.txt' for appending, assign the <code>file</code> object to the name <code>file</code> (which eventually shadows the builtin type <code>file</code> but that's not relevant here)</p>
<p>Then the second line:</p>
<pre><code>file=open('ClassB1.txt','a')
</code></pre>
<p>opens file 'ClassB1.txt' for appending, assign the <code>file</code> object to the name <code>file</code>, sus replacing the binding to the previously opened file "ClassA1.txt". Since there's no other name referencing this previously opened file, it's lost. In the best case, the underlying file pointer will be closed when the object gets garbage-collected (CPython) <em>but</em> this is NOT garanteed by thye language's specification and another implementation might not free the file pointer correctly.</p>
<p>In all cases you can not access 'ClassA1.txt' anymore at this point.</p>
<p>Now the third line:</p>
<pre><code>file=open('ClassC1.txt','a')
</code></pre>
<p>does the same thing - reassigning the name <code>file</code> to a new file object etc.</p>
<p>At this point, you have to possibly opened, possibly not, and in both case unreachable (and possibly already garbage collected) file objects and the name <code>file</code> points to the third one - which means any write operation on <code>file</code> will write to file "ClassC1.txt".</p>
<p>If you want to keep all three files opened, you have to keep references to them, either by binding each to a distinct name, ie:</p>
<pre><code>file1=open('ClassA1.txt','a')
file2=open('ClassB1.txt','a')
file3=open('ClassC1.txt','a')
</code></pre>
<p>or by storing them in a list:</p>
<pre><code>files = []
files.append(open('ClassA1.txt','a'))
files.append(open('ClassB1.txt','a'))
files.append(open('ClassC1.txt','a'))
</code></pre>
<p>so you can now acces them by index, ie <code>files[0]</code>, <code>files[1]</code>, <code>files[2]</code></p>
<p>or in a dict:</p>
<pre><code>files = {}
files["A1"] = open('ClassA1.txt','a')
files["B1"] = open('ClassB1.txt','a')
files["C1"] = open('ClassC1.txt','a')
</code></pre>
<p>so you can now acces them by key, ie <code>files["A1"]</code>, <code>files["A2"]</code>, <code>files["A3"]</code></p>
<p>BUT : why would you </p>
<ol>
<li>open three files, </li>
<li>ask the user which file he wants to write to, </li>
<li>close the two other files, </li>
<li>write to the selected file</li>
<li>close it</li>
</ol>
<p>when you could more simply:</p>
<ol>
<li>ask the user which file he wants to write to, </li>
<li>open it</li>
<li>write to it</li>
<li>close it</li>
</ol>
<p>Since your files are named after the class name, you can easily build the filename from the class name:</p>
<pre><code>cls = input("please enter your class\n")
filename = "Class{}.txt".format(cls)
f = open(filename, "a")
f.write("whatever")
f.close() 
</code></pre>
<p>or even more safely (this will ensure the file WILL be closed whatever happens):</p>
<pre><code>cls = input("please enter your class\n")
filename = "Class{}.txt".format(cls)
with open(filename, "a") as f:
   f.write("whatever")
</code></pre>
<p>Note that in this case you don't have to call <code>f.close()</code> </p>
<p>A couple other points:</p>
<pre><code>Class=input('please enter your class '+"\n")
</code></pre>
<p>=&gt; 'cls' or 'class_', not 'Class' - by convention, capitalized names are for class (in the OO meaning) names.</p>
<p>=&gt; Python is not PHP: <code>'please enter your class \n'</code> just works</p>
<pre><code>if Class==(int(input"A1"))
</code></pre>
<p>I don't know what you expect this line to do, but it sure looks you don't know either... One thing is sure : a string won't be equal to an integer. Never...</p>
<pre><code>file.close('ClassB1')
</code></pre>
<p>Have you read the documentation at all ? It's here (well, for a starter at least) : <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow">https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files</a></p>
<pre><code>file.close 
</code></pre>
<p>You want <code>file.close()</code> here. The parens are NOT optional - if you want to call the method at least. </p>
</div>
<div class="post-text" itemprop="text">
<p>You're doing a long winded way, you could just open the file after the user gives their answer.</p>
<pre><code>import os

print('hello welcome to maths 2000')
yourClass=input('please enter your class '+"\n")
filename = 'Class{}.txt'.format(yourClass)
name=input('please enter your name '+"\n")
if os.path.exists(filename):
    f = open(filename, 'a')
    file.write(name+"/n")
    file.close()
else:
    print ("Class not found")
</code></pre>
<p>I just set it up so the input determines the filename it tries to open, and if that file exists it opens it and appends their name.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you execute these </p>
<pre><code>file=open('ClassA1.txt','a')
file=open('ClassB1.txt','a')
file=open('ClassC1.txt','a')
</code></pre>
<p>file variable contains "ClassC1.txt", you are re-assigning the object again and again.
 so after whatever check if you execute this:</p>
<pre><code>file.close()
</code></pre>
<p>last file will be closed.
 Instead I would recommend you first take the input of what file is to be opened and then open that file.</p>
<pre><code>file_name = input("Enter file name")
file = open(file_name, 'a')
#do your work
file.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>fd = open("Student_info.txt", "a+")

class_info = []

print "Hello, welcome to maths 2000"
class_to_be = raw_input("Please enter your class: ")
name = raw_input("Please enter your name: ")

student = name + " " + class_to_be
class_info.append(student)

print class_info

for students in class_info:
    fd.write("%s" %(students))
    fd.close()
</code></pre>
<p>results:</p>
<pre><code>jester112358@ubuntu:~$ python stackhelp.py
Hello, welcome to maths 2000
Please enter your class: Python-class
Please enter your name: Greenie245
['Greenie245 Python-class']
</code></pre>
<p>and writes the content of your list to <code>Student_info.txt</code></p>
<p>I think it's better to have all the information in one file, but obviously you can have a file for every class if you want.</p>
<p>If you want class for every file, consider using:</p>
<pre><code>for students in class_info:
spl = students.split()
if spl[1] == "A1":
    A1=open('ClassA1.txt','a')
    A1.write("%s" %(students))
    A1.write("\n")
    A1.close()
elif ... # add anothor classes here
</code></pre>
</div>
<span class="comment-copy">Use the class as a variable, not the "file" ie. classA1=open('ClassA1.txt','a')</span>
<span class="comment-copy">Do you need them to be separate files or can all the information be in one file?</span>
<span class="comment-copy">separate files is good i cant get to ask the user what file it want it to be in</span>
<span class="comment-copy">It would be more prudent to only open a file after the input rather than opening them all and then closing the ones they didn't choose.</span>
<span class="comment-copy">but i want the input to ask the user what class so i can open the right file</span>
<span class="comment-copy">thank you really helped a python noob i just got confused when it stoped working :D</span>
