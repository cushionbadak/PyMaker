<div class="post-text" itemprop="text">
<p>I need to make a rectangle data class and an executable program to test it.</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/7Zbjr.png"/></p>
<p>This is the full problem that I am dealing with:</p>
<p>In the executable's main function:</p>
<ul>
<li><p>prompt the user to enter the length and width of a rectangle.</p></li>
<li><p>create a new Rectangle instance with the dimensions entered by the
user.</p></li>
<li><p>to verify the above step, print both dimensions using their
respective "getter" methods.</p></li>
<li><p>test the area() method by printing the rectangle area, accurate to two
decimal places.</p></li>
<li><p>test the perimeter() method by printing the rectangle perimeter,
accurate to two decimal places.</p></li>
<li><p>change the length to 22.345 and change the width to 15.789.</p></li>
<li><p>test the area() and perimeter() methods again. You should get the
results shown in the sample output.*</p></li>
</ul>
<p>My question is, <strong>does the class file have to be in the same folder as the executable file?</strong></p>
<p>If anyone wants to provide tips on the rest of it, please do.  This is what I have for the rectangle class:</p>
<pre><code>class Rectangle:

    def __init__(self, length, width):
        self.__length = length
        self.__width = width

    def set_length(self, length):
        self.__length = length 

    def set_width(self, model):
        self.__width = width 

    def get_length(self):
        return self.__length 

    def get_width(self):
        return self.__width

    def get_area(self):
        return self.__getwidth() * self.getlength()

    def get_perimeter(self):
        return self.__getwidth() * 2 + getlength() * 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With a few corrections to typos, you can put the class definition right inside your main program:</p>
<pre><code>class Rectangle:

    def __init__(self, length, width): # this initializes the object with the given parameters
        self.__length = length # assign length
        self.__width = width # assign width

    def set_length(self, length): # this method allows us pass the Rectangle object a value and set the object's length to the given value
        self.__length = length # assign length

    def set_width(self, width): # had 'model' here # same thing, for width
        self.__width = width # assign width

    def get_length(self): # this method does one thing...
        return self.__length # return the Rectangle object's length

    def get_width(self): # and same for width
        return self.__width

    def get_area(self): # this actually does something: multiplies width by height and returns that value
        return self.get_width() * self.get_length() # underscores were wrong

    def get_perimeter(self): # similarly, this adds double the length to double the width and returns that value
        return self.get_width() * 2 + self.get_length() * 2 # underscores were wrong, missing self

def main(): # our main program, which will test our Rectangle class
    length = float(input('Length? ')) # request a length and turn that string into a float
    width = float(input('Width? ')) # request a width and turn that string into a float
    rectangle = Rectangle(length, width) # create a new Rectangle object with the given length and width
    print(rectangle.get_length(), rectangle.get_width()) # print the object's length and width, using the getters
    print(round(rectangle.get_area(), 2)) # round the area to 2 places and print it
    print(round(rectangle.get_perimeter(), 2)) # round the perimeter to 2 places and print it
    rectangle.set_length(22.345) # calls the Rectangle object's length setter and passes it a new value, which will set the object's length to the given value
    rectangle.set_width(15.789) # same for width
    print(round(rectangle.get_area(), 2)) # print the area again to see the new value
    print(round(rectangle.get_perimeter(), 2)) # print the perimeter again to see the new value

main() # call our main method - without this, nothing happens
</code></pre>
<p>NB: Getters and setters do not belong in a Python program. A proper Python <code>Rectangle</code> would look like this:</p>
<pre><code>class Rectangle:
    def __init__(self, length, width):
        self.length = length # no need to mask these by starting the names with _
        self.width = width

    @property # this lets us call this method without parentheses - it'll look like an ordinary attribute, but it's really calling a method
    def area(self):
        return self.length * self.width

    @property
    def perimeter(self):
        return 2*(self.length + self.width) # the original has 2 multiplications and 1 addition, while this has 1 multiplication and 1 addition - negligible, but it's good to see this sort of thing once in a while in case you have to optimize something at some point
</code></pre>
<p>That would be used as such:</p>
<pre><code>&gt;&gt;&gt; a = Rectangle(3.2,5.1)
&gt;&gt;&gt; a.area
16.32
&gt;&gt;&gt; a.perimeter
16.6
&gt;&gt;&gt; a.length=2
&gt;&gt;&gt; a.area
10.2
&gt;&gt;&gt; a.perimeter
14.2
&gt;&gt;&gt; a.length
2
</code></pre>
<p>But look out:</p>
<pre><code>&gt;&gt;&gt; a.area = 3
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
</code></pre>
<p>That makes as much sense as, say, <code>rectangle.get_area() = 3</code> - i.e., none.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your class looks more or less fine. However, in the first picture you posted describing the class setup, it appears that <code>get_area()</code> and <code>get_perimeter()</code> should be named simply <code>area()</code> and <code>perimeter()</code>. There are some other minor typos as @PaulCornelius mentioned that will result in errors.</p>
<p>Your "executable file", i.e. the file that calls the methods of your <code>Rectangle</code> class can be in another file, but <strong>it doesn't need to be</strong>. For example:</p>
<pre><code>class Rectangle:
    #all of the above stuff
r= Rectangle(10,20)
print r.get_area()
</code></pre>
<p>will work just fine, printing the area of the rectangle. </p>
<p>Otherwise you can create a new file that includes <code>import rectangle</code> to import your <code>Rectangle</code> class. This does require it to be in the same folder (or you must configure Python so it knows where to look for the module).</p>
<p>Creating the script that actually calls your methods is the best way to verify things behave properly, and may provide hints as to how to fix them. For example, trying to call <code>get_area()</code> on a <code>Rectangle</code> will result in an error (as <code>__getwidth()</code> is not defined anywhere, but <code>get_width()</code> is).</p>
</div>
<span class="comment-copy">yes both files should be in the same location... your class looks fine ...</span>
<span class="comment-copy">In some places you used <code>get_width</code> and others <code>getlength</code>. Is that intentional?</span>
<span class="comment-copy">Your class and the main script do NOT have to be in the same file or in the same folder.  The Python import mechanism is designed to handle that.  Python is not Java.  Each class does not have to be in a separate file, and you can name the files any way you want.  Also your class contains many typos and inconsistent variable names; <code>__getwidth</code> is not the same as <code>get_width</code> and <code>getlength</code> is not the same as <code>get_length</code>.</span>
<span class="comment-copy">Getters and setters? You're not using <a href="https://rads.stackoverflow.com/amzn/click/com/0132747189" rel="nofollow noreferrer">Introduction to Programming Using Python</a> for your textbook by any chance, are you?</span>
<span class="comment-copy">"Tony Gaddis is the principal author of the Starting Out With series of textbooks... The Starting Out With series includes introductory books covering C++, Javaâ„¢...". I guess I shouldn't be surprised that there's more than one Python book written by someone who thinks in Java. Sell that book to someone you don't like, and learn Python from the <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">official tutorial</a>.</span>
<span class="comment-copy">Thanks for this! Going to go through it and try to understand it by recreating similar things.... What exactly are the getters and setters in what you posted anyway?</span>
<span class="comment-copy">A "getter" method retrieves the value of a given (private) variable and returns it to the outside world. A "setter" method takes in a value from the outside world and assigns it to the given (private) variable. In Python, however, these are useless, as you can access the variables directly with, e.g., <code>print(rectangle.__length)</code> or <code>rectangle.width = 4.5</code>. There's no such thing as a truly private variable in Python.</span>
<span class="comment-copy">Okay gotcha. Its working for me, but when I try and enter a number with a decimal like 12.45 for example, I get an error.</span>
<span class="comment-copy">Sure; I'll add more comments later tonight.</span>
<span class="comment-copy">I've added a bunch of comments and explanations.</span>
<span class="comment-copy">Thanks for the feedback!</span>
<span class="comment-copy">also, for the perimiter and area, should I keep the (self) in parenthesis after each or remove that as well?</span>
<span class="comment-copy">Because these are <code>class</code> functions (i.e. methods), you need to keep the <code>(self)</code> portion. I like to think of this as the object inputting itself into the function, since the function acts on it. Hope that makes sense.</span>
