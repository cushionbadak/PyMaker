<div class="post-text" itemprop="text">
<pre><code>print('Loading Documents...')
LoadDocuments() #Function That Loads the Documents
for i in range(0, 30, 1):
    print("-", end="")
    time.sleep(0.1)
print(" ")
print('Documents Loaded')
</code></pre>
<p>What I want it to do is print  <code>Loading Documents...</code> then have an animation of a line crawling across the screen</p>
<p>Instead it prints <code>Loading Documents</code> and then after a couple seconds, all the dashes in the line pop up at once</p>
<p>Any Ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>Output is normally line-buffered, meaning when you <code>print</code> part of a line, it may not get displayed until you finish <code>print</code>ing the rest of the line.</p>
<p>You can change the buffering, but the simpler solution is just to explicitly call <a href="https://docs.python.org/3/library/io.html#io.IOBase.flush" rel="nofollow"><code>flush</code></a> on the <a href="https://docs.python.org/3/library/sys.html#sys.stdin" rel="nofollow"><code>stdout</code></a> stream (which <code>print</code> normally prints to) every time you want to force it to display what you have so far:</p>
<pre><code>print('Loading Documents...')
LoadDocuments() #Function That Loads the Documents
for i in range(0, 30, 1):
    print("-", end="")
    sys.stdout.flush()
    time.sleep(0.1)
print(" ")
print('Documents Loaded')
</code></pre>
<p>In this case, it may also be cleaner to also use <a href="https://docs.python.org/3/library/io.html#io.TextIOBase.write" rel="nofollow"><code>write</code></a> directly on <code>stdout</code>, just to make it clear that you're doing low-level I/O instead of the normal high-level <code>print</code> mechanism:</p>
<pre><code>print('Loading Documents...')
LoadDocuments() #Function That Loads the Documents
for i in range(0, 30, 1):
    sys.stdout.write('-')
    sys.stdout.flush()
    time.sleep(0.1)
print(" ")
print('Documents Loaded')
</code></pre>
<hr/>
<p>This is explained in the docs… but only if you know where to look, and already understand most of it…</p>
<p><a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>print</code></a> explains that <code>sys.stdout</code> is the default file that gets printed to, then <a href="https://docs.python.org/3/library/sys.html#sys.stdin" rel="nofollow"><code>sys.stdout</code></a> says:</p>
<blockquote>
<p>These streams are regular <a href="https://docs.python.org/3/glossary.html#term-text-file" rel="nofollow"><em>text files</em></a> like those returned by the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow"><code>open()</code></a> function. Their parameters are chosen as follows: … When interactive, standard streams are line-buffered … You can override this value with the <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-u" rel="nofollow"><em>-u</em></a> command-line option.</p>
</blockquote>
<p>If you follow the link to <code>-u</code>, it says:</p>
<blockquote>
<p>Force the binary layer of the <code>stdout</code> and <code>stderr</code> streams (which is available as their <code>buffer</code> attribute) to be unbuffered. The text I/O layer will still be line-buffered if writing to the console…</p>
</blockquote>
<p>Then you have to follow a few links from <code>open</code> or <em>text files</em> to get to <a href="https://docs.python.org/3/library/io.html" rel="nofollow"><code>io</code></a> and read almost the entire module documentation to figure out how to access and rewrap <code>sys.stdout.buffer.raw</code> or just call <code>sys.stdout.flush</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Seems like you are wanting to display some kind of "progress" to your user.</p>
<p>I recommend you use something like <a href="https://pypi.python.org/pypi/progress" rel="nofollow">progress</a></p>
<p><strong>Example:</strong></p>
<pre><code>from progress.bar import Bar

bar = Bar('Processing', max=20)
for i in range(20):
    # Do some work
    bar.next()
bar.finish()
</code></pre>
<p>You do have to install this 3rd-party package hwoever as it's not part of the standard library. Typically this as as simple as:</p>
<pre><code>pip install progress
</code></pre>
</div>
<span class="comment-copy">my initial reaction was that it might have something to do with buffering the output. But even running with <code>python -u</code> didn't change the behavior....</span>
<span class="comment-copy">@Gil: As <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-u" rel="nofollow noreferrer">the docs</a> explain, <code>-u</code> will only "Force the binary I/O layers of  stdout and stderr to be unbuffered… The text I/O layer will still be line-buffered…"</span>
<span class="comment-copy">@Gil: You can use <code>-u</code> and then wrap a different <code>TextIOWrapper</code> around <code>sys.stdout.buffer</code> and reassign <code>sys.stdout</code> to that, but if you're going to do that, you might as well just rewrap the <code>sys.stdout.buffer.raw</code> instead and not bother with the flag.</span>
<span class="comment-copy">Do you have any idea why disabling buffering when calling the code i.e. using <code>python -u</code> doesn't give the same result as your solution?</span>
<span class="comment-copy">Apologies, just had my question answered in original comment.</span>
<span class="comment-copy">I tried that, I couldn't import <code>progress bar</code> I looked up progressbar python and It looks like it is not part of python3, but thanks tho!</span>
<span class="comment-copy">You would have to install it. <code>pip install progress</code></span>
