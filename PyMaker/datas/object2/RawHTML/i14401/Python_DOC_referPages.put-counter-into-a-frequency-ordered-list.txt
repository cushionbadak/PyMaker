<div class="post-text" itemprop="text">
<p>I have a counter with the following information:
<code>Counter({'red': 3, 'blue': 2, 'green': 1})</code></p>
<p>and I wish to convert it to a list, ordered from least to greatest number of frequency like this:</p>
<p><code>list = ['green', 'blue', 'red']</code></p>
<p>Every time I iterate over the counter, it seems to put it into a list sorted in alphabetical order. Is there an easy way to get it to be sorted how I want it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You just need a <a href="https://wiki.python.org/moin/HowTo/Sorting#Key_Functions" rel="nofollow">key function</a>:</p>
<pre><code>sorted(yourcounter, key=lambda i: yourcounter[i])
</code></pre>
<p>They key just needs to output an inherently orderable result. Most of the time your best bet is if it returns an integer. For example, you can reverse the result just by making it negative.</p>
<pre><code>sorted(yourcounter, key=lambda i: -yourcounter[i])
</code></pre>
<p>In this case you can also write the original slightly more tersely as</p>
<pre><code>sorted(yourcounter, key=yourcounter.get)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow"><code>Counter.most_common</code></a> with no arguments returns a list of tuples of the items and their counts sorted in descending order by count. Python's built-in <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow"><code>reversed</code></a> returns an iterator which traverses a sequence in reverse order.</p>
<p>Combine all that with a list comprehension to ignore the counts, and you have your solution.</p>
<pre><code>from collections import Counter

counter = Counter({'red': 3, 'blue': 2, 'green': 1})
sorted_items = [item for item, _ in reversed(counter.most_common())]
</code></pre>
</div>
