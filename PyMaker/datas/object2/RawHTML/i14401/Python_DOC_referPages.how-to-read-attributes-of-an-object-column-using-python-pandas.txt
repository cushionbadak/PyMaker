<div class="post-text" itemprop="text">
<p>I have a dataframe where the <strong>'location'</strong> column contains an object:</p>
<pre><code>import pandas as pd

item1 = {
     'project': 'A',
     'location': {'country': 'united states', 'city': 'new york'},
     'raised_usd': 1.0}

item2 =  {
    'project': 'B',
    'location': {'country': 'united kingdom', 'city': 'cambridge'},
    'raised_usd': 5.0}

item3 =  {
    'project': 'C',
    'raised_usd': 10.0}

data = [item1, item2, item3]

df = pd.DataFrame(list(data))
df
</code></pre>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/zRgIG.png"/></p>
<p>I'd like to create an extra column, <strong>'project_country'</strong>, which contains just the country information, if available. I've tried the following:</p>
<pre><code>def get_country(location):
    try:
        return location['country']
    except Exception:
        return 'n/a'

df['project_country'] = get_country(df['location'])
df
</code></pre>
<p>But this doesn't work:
<img alt="enter image description here" src="https://i.stack.imgur.com/cl9CR.png"/></p>
<p>How should I go about importing this field?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html#pandas.DataFrame.apply" rel="nofollow"><code>apply</code></a> and pass your func to it:</p>
<pre><code>In [62]:

def get_country(location):
    try:
        return location['country']
    except Exception:
        return 'n/a'
​
df['project_country'] = df['location'].apply(get_country)
df
Out[62]:
                                            location project  raised_usd  \
0   {'country': 'united states', 'city': 'new york'}       A           1   
1  {'country': 'united kingdom', 'city': 'cambrid...       B           5   
2                                                NaN       C          10   

  project_country  
0   united states  
1  united kingdom  
2             n/a 
</code></pre>
<p>The reason your original code failed is because what is passed is the entire column or pandas Series:</p>
<pre><code>In [64]:

def get_country(location):
    print(location)
    try:
        print(location['country'])
    except Exception:
        print('n/a')
​
get_country(df['location'])
0     {'country': 'united states', 'city': 'new york'}
1    {'country': 'united kingdom', 'city': 'cambrid...
2                                                  NaN
Name: location, dtype: object
n/a
</code></pre>
<p>As such an attempt to find the key using the entire Series raises a <code>KeyError</code> and you get <code>'n/a'</code> returned.</p>
</div>
<div class="post-text" itemprop="text">
<p>The correct way as EdChum pointed out is to use <code>apply</code> on the 'location' column. You could compress that code in one line:</p>
<pre><code>In [15]: df['location'].apply(lambda v: v.get('country') if isinstance(v, dict) else '')
Out[15]: 
0     united states
1    united kingdom
2                  
Name: location, dtype: object
</code></pre>
<p>And, assign it to a column: </p>
<pre><code>In [16]: df['country'] = df['location'].apply(lambda v: v.get('country') if isinstance(v, dict) else '')

In [17]: df
Out[17]: 
                                            location project  raised_usd  \
0  {u'country': u'united states', u'city': u'new ...       A           1   
1  {u'country': u'united kingdom', u'city': u'cam...       B           5   
2                                                NaN       C          10   

          country  
0   united states  
1  united kingdom  
2 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With <code>apply</code>, you can use <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator.itemgetter</code></a>. Note we need to use <code>dropna()</code> since your column contains NaN:</p>
<pre><code>from operator import itemgetter
df['location'].apply(itemgetter('country'))

df['location'].dropna().apply(itemgetter('country'))
0     united states
1    united kingdom
Name: location, dtype: object
</code></pre>
</div>
<span class="comment-copy">Strictly in Python those are <b>items</b> (of the dict), not attributes. Back in the original JSON they were attributes.</span>
