<div class="post-text" itemprop="text">
<p>a) I want to create a generator function that produces the elements of the list = [1,3,4,"hello", 5,3,4, "create"].</p>
<p>b) I then want to create a new list which is this list sorted with only unique elements by using the same generator function created. </p>
<p>Does this work for a) or does it defeat the purpose of using a generator because of the for loop?</p>
<pre><code>def generate(list):
    for i in list:
        yield(i)

produce = generator(list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The vast majority of the time, all you care about is having an iterable—something you can use in a <code>for</code> loop.</p>
<p>A list is already an iterable over its elements. You can do <code>for elem in lst:</code> just as well as <code>for elem in generate(lst):</code>, and in fact it'll be a little more efficient.</p>
<hr/>
<p>Sometimes, you specifically need an iterator—an iterable that keeps track of its current position so you can call <code>next</code> on it. For example, if you want to group an iterable into tuples of 2 values, the simplest way to do that is with an iterator over the iterable. </p>
<p>But the builtin <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a> function already does this—you can use <code>iter(lst)</code> just as well as <code>generate(lst)</code>, and again, it'll be a little more efficient.</p>
<hr/>
<p>Rarely, you specifically need a generator—an iterator that provides a few extra methods. I'm not sure why you'd ever need one that just iterates over a list, because it doesn't have anything useful to <em>do</em> with those extra methods, but maybe someone wrote some silly function that checks <code>isinstance(g, types.GeneratorType)</code> and refuses to work with a list or a list iterator, and you can't change that function.</p>
<p>But even in that case, you could just write a generator expression, <code>(i for i in lst)</code>, instead of <code>generate(lst)</code>.</p>
<hr/>
<p>Finally, you might need, not just a generator, but a function that returns a generator. Maybe you need to pass it as a callback to be called later; I don't know.</p>
<p>In that case, what you've written makes sense. However, unless you're on Python 2.7 or 3.2 or earlier, you probably still want to use <code>yield from</code>:</p>
<pre><code>def generate(lst):
    yield from lst
</code></pre>
<hr/>
<blockquote>
<p>I then want to create a new list which is this list sorted with only unique elements by using the same generator function created.</p>
</blockquote>
<p>There's no reason to use the generator function here, when all you need is an iterable—but if you're <em>required</em> to use it for some assignment, there's no reason you can't. In fact, it's not going to be any different from using the list.</p>
<p>If you wanted to sort the unique values in a list, you could either uniquify and sort:</p>
<pre><code>sorted_uniques = sorted(set(lst))
</code></pre>
<p>… or sort and uniquify (e.g., using the <code>unique_justseen</code> recipe in the <code>itertools</code> docs):</p>
<pre><code>sorted_uniques = list(unique_justseen(sorted(lst)))
</code></pre>
<p>How do you do the same thing with your generator? Just pass the generator 
instead of the list:</p>
<pre><code>sorted_uniques = sorted(set(generate(lst)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>generate(list)</code> function you have is already enough to accomplish the first half of your question: simply pass to it the required list. However, if you wish to always return the generator for that one list, you can hard-code it:</p>
<pre><code>def generate():
    _list = [1, 3, 4, "hello", 5, 3, 4, "create"]
    for obj in _list:
        yield(obj)
</code></pre>
<p>To quickly get rid of duplicates, you can cast the returning list (or generator) to a set:</p>
<pre><code>x = set(generate())
</code></pre>
<p>To sort it, simply cast it back to a list and sort it:</p>
<pre><code>y = sorted(list(x))
</code></pre>
</div>
<span class="comment-copy">"I want to create a generator function that produces the elements of the list" -- why?</span>
<span class="comment-copy"><i>"Does this work for a) or does it defeat the purpose of using a generator because of the for loop?"</i> - well, what exactly is the purpose for which you want to have this as a generator?</span>
<span class="comment-copy">this is for a class assignment</span>
<span class="comment-copy">Why are you asking <i>us</i> whether it works for part (a).  Run it and see what you get!  :-)  Until you have a <i>known</i> problem with your code, you don't have a Stack Overflow question.</span>
<span class="comment-copy">One of the main benefits of a generator is that they can take up less space than a traditional list. But if you're going to take the output of a generator and sort it, then you need to store all of the data in memory at once, so you've lost out on any memory savings you initially had. I'd say that defeats the purpose.</span>
<span class="comment-copy">thanks a lot! but the list is a mix of strings and integers so not sure how to sort that!</span>
<span class="comment-copy">@jan93 Well, you have to decide that; nobody else can decide what you want. Obvious possibilities include: (1) treat numbers as if they were their string representation, (2) put all numbers before all strings, (3) put all numbers after all strings, (4) treat numbers as if they were their string representations but then "natural sort" the strings so, e.g., "11" comes after "3". But you can come up with all kinds of crazy things, like treating strings as base-4billion integers where each Unicode character is a digit. As long as you can describe what you want, you can code it.</span>
<span class="comment-copy">Thank you for your answer! I originally did something similar but since the list is a mixture of strings and integers I wasn't sure you could do this - would you know how to go about sorting that?</span>
