<div class="post-text" itemprop="text">
<p>I'm working on a Django(2) project in which I need to pass an URL as a parameter in a Django URL, 
Here's what i have tried:</p>
<p><strong>urls.py:</strong></p>
<pre><code>urlpatterns = [
path('admin/', admin.site.urls),
url(r'^api/(?P&lt;address&gt;.*)/$', PerformImgSegmentation.as_view()),
]
</code></pre>
<p><strong>views.py:</strong></p>
<pre><code>class PerformImgSegmentation(generics.ListAPIView):
    def get(self, request, *args, **kwargs):
        img_url = self.kwargs.get('address')
        print(img_url)
        print('get request')
    return 'Done'
</code></pre>
<p>But it doesn't work, I have passed an argument with the name as <code>address</code> via postman, but it failed.
It returns this error:</p>
<blockquote>
<p>Not Found: /api/
  [05/Sep/2018 15:28:06] "GET /api/ HTTP/1.1" 404 2085</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Django 2.0 and later use now <code>path</code> func constructors to specify URLs. I'm not sure if there's still backwards compatibility; you can try that with a simple example. However if you are starting to write an app you should use <code>path</code>:</p>
<pre><code>path('api/&lt;str:encoded_url&gt;/', view_action)
</code></pre>
<p>To avoid confusion with a stantard path to view in your app, I do not recommend using the <code>path</code> converter instead of the <code>str</code> (the former lets you match <code>/</code>, while the other does not).</p>
<p>You can get more help for transitioning from <code>url</code> to <code>path</code> with this <a href="https://consideratecode.com/2018/05/02/django-2-0-url-to-path-cheatsheet/" rel="nofollow noreferrer">article</a>.</p>
<p>Second step, get the <code>encoded_url</code> as an argument in the view. You need to <em>decode it</em>: to pass a url inside the get url, you use ASCII encoding that substitutes certain reserved characters for others (for example, the forward slash).</p>
<p>You can encode and decode urls easily with <code>urllib</code> (there are other modules as well). For Python 3.7 syntax is as follows <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote" rel="nofollow noreferrer">(docs here)</a></p>
<pre><code>&gt;&gt;&gt; urllib.parse.quote("http://www.google.com")
'http%3A//www.google.com'
&gt;&gt;&gt; urllib.parse.unquote('http%3A//www.google.com')
'http://www.google.com'
</code></pre>
<p>Remember: if you pass the url without quoting it won't match: you are not accepting matches for slashes with that path expression. <strong>(Edit: quote method default does not convert forward slashes, for that you need to pass: <code>quote(&lt;str&gt;, safe='')</code></strong></p>
<p>So for example your GET call should look: <code>/api/http%3A%2F%2Fwww.google.com</code>. However it's better if you pass the URL as a get parameter and in the paths you only care aboubt readability (for example <code>/api/name_to_my_method?url=http%3A%2F%2Fwww.google.com</code>). Path engineering is important for readability and passing a quoted URL through is usually not ebst practice (though perfectly possible).</p>
</div>
<div class="post-text" itemprop="text">
<p>Are you trying to pass the url <code>https://i.imgur.com/TGJHFe1.jpg</code> as a parameter from the django template to the view ?</p>
<p>You could simple write in your app's url.py:</p>
<p><code>path(api/&lt;path:the_url_you_want_to_pass&gt;', PerformImgSegmentation.as_view())</code></p>
<p>Please have a look at this <a href="https://consideratecode.com/2018/05/02/django-2-0-url-to-path-cheatsheet/" rel="nofollow noreferrer">article</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Django 2.0 is providing the <code>Path Converters</code> to convert the path parameters into appropriate types, which also includes a converter for <code>urls</code>, take a look at the <a href="https://docs.djangoproject.com/en/2.1/topics/http/urls/" rel="nofollow noreferrer">docs</a>.</p>
<p>So, your URLs can be like this:</p>
<pre><code>path('api/&lt;path:encoded_url&gt;/', PerformImgSegmentation.as_view()),
</code></pre>
<p>So, the <code>path</code> converter will Matches any non-empty string, including the path separator, '/'. This allows you to match against a complete URL path rather than just a segment of a URL path as with str.</p>
<p>Then in the view, we can simply get our <code>URL</code> values from <strong><code>kwargs</code></strong> like this:</p>
<pre><code>img_url = self.kwargs.get('encoded_url')
print(img_url)
</code></pre>
</div>
<span class="comment-copy">What is the example of URL you tried to pass and failed?</span>
<span class="comment-copy">Here it is: <code>https://i.imgur.com/TGJHFe1.jpg</code></span>
<span class="comment-copy">No. You have to tell me exactly how the address to your site that included the foreign address looked like, because the error essage you are showing is of a petition juss to <code>/api/</code>, without the address after (like <code>/api/http://www.google.com/</code>, which for what you should should not match anything.</span>
<span class="comment-copy">Also I'm not confident but I think you should not mix <code>url</code>'s with <code>path</code>'s. In Django 2 I think you should always use the latter.</span>
<span class="comment-copy">Hi @J.C.Rocamonde, I have tried the <code>path</code> way to define my URL and then send a request as <code>http://127.0.0.1:8000/api?url=https://i.imgur.com/TGJHFe1.jpg</code> but it returns <code>404 not found</code> error.</span>
<span class="comment-copy">Because 1) GET parameters are not part of the URL scheme, these are processed by the server. So your request is '/api' (which is not a match). Even if you do what i tell you without encoding the URL, you will get a 404 becasue it wont match the slashes. Also you are sending a GET parameter, so you have to get it from the session.</span>
<span class="comment-copy">I really really disencourage you to not encode URLs. Path match is if you want to make complex path matches, not for passing urls. That causes conflicts if you have other more complex api path definitions later on. Encoding a URL is standard practice.</span>
<span class="comment-copy">No. You definitely should not do that. Never match a path in an api URL scheme. That will cause conflict. What I told you is OK. To be honest, have you bothered to read my answer and interact with it through comments? There is no point in asking something and when getting answers posting your own answer with the exact same recommendations I told you (well, actually no, because you should not use <code>path</code> there.</span>
<span class="comment-copy">Also there are no specific type of converter for URLs as such.There are the converters that are shown in the link I provided you with.  That is wrong. If you want, all converters are for URLs, in the sense that converters are for use <b>with</b> <i>URL schemes</i> in Django, and for passing an encoded URL, that should be treated as plain data. A string. You also have integers and UUID codes, apart from the path match.</span>
<span class="comment-copy">You usually want to use the two first. The third is for specific needs, and the last is if you know what you are doing. Django has a very good path scheme builder. I don't see why a  starter would parse themselves the URL with an entire path match.</span>
<span class="comment-copy">Hi @J.C.Rocamonde, I have carefully read your answer and tried that solution, but it wasn't working for me, I have posted what was working for me.</span>
<span class="comment-copy">There was a bug in the answer, you’re right, but you just had to reply and tell me. That doesn’t make better the practice of matching slashes (you should not)</span>
