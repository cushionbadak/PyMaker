<div class="post-text" itemprop="text">
<p>I have a bunch of folders and sub-folders with CSVs that have quotation marks that I need to get rid of, so I'm trying to build a script that iterates through and performs the operation on all CSVs.</p>
<p>Below is the code I have.</p>
<p>It correctly identifies what is and is not a CSV.  And it re-writes them all -- but it's writing blank data in -- and not the row data without the quotation marks.</p>
<p>I know that this is happening around lines 14-19 but I don't know know what to do.</p>
<pre><code>import csv
import os


rootDir = '.'

for dirName, subDirList, fileList in os.walk(rootDir):
    print('Found directory: %s' % dirName)
    for fname in fileList:

        # Check if it's a .csv first
        if fname.endswith('.csv'):

            input = csv.reader(open(fname, 'r'))
            output = open(fname, 'w')

            with output:
                writer = csv.writer(output)
                for row in input:
                    writer.writerow(row)

        # Skip if not a .csv
        else:
            print 'Not a .csv!!'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is here:</p>
<pre><code>input = csv.reader(open(fname, 'r'))
output = open(fname, 'w')
</code></pre>
<p>As soon as you do that second <code>open</code> in <code>'w'</code> mode, it erases the file. So, your <code>input</code> is looping over an empty file.</p>
<hr/>
<p>One way to fix this is to you read the whole file into memory, and only then erase the whole file and rewrite it:</p>
<pre><code>input = csv.reader(open(fname, 'r'))
contents = list(input)
output = open(fname, 'w')
with output:
    writer = csv.writer(output)
    for row in contents:
        writer.writerow(row)
</code></pre>
<p>You can simplify this quite a bit:</p>
<pre><code>with open(fname, 'r') as infile:
    contents = list(csv.reader(infile))
with open(fname, 'w') as outfile:
    csv.writer(outfile).writerows(contents)
</code></pre>
<hr/>
<p>Alternatively, you can write to a temporary file as you go, and then move the temporary file on top of the original file. This is a bit more complicated, but it has a major advantage—if you have an error (or someone turns off the computer) in the middle of writing, you still have the old file and can start over, instead of having 43% of the new file and all your data is lost:</p>
<pre><code>dname = os.path.dirname(fname)
with open(fname, 'r') as infile, tempfile.NamedTemporaryFile('w', dir=dname, delete=False) as outfile:
    writer = csv.writer(outfile)
    for row in csv.reader(infile):
        writer.writerow(row)
os.replace(outfile.name, fname)
</code></pre>
<p>If you're not using Python 3.3+, you don't have <a href="https://docs.python.org/3/library/os.html#os.replace" rel="nofollow noreferrer"><code>os.replace</code></a>. On Unix, you can just use <code>os.rename</code> instead, but on Windows… it's a pain to get this right, and you probably want to look for a third-party library on PyPI. (I haven't used any of then, buy if you're using Windows XP/2003 or later and Python 2.6/3.2 or later, <a href="https://pypi.org/project/pyosreplace/" rel="nofollow noreferrer"><code>pyosreplace</code></a> looks promising.)</p>
</div>
<span class="comment-copy">You open a file for reading and then immediately for writing. Opening a file for writing immediately truncates it and destroys its content. That is why nothing is read from the files - and nothing is written, too. You should either read everything from the file and only then open it for writing, or open two different files, copy the content, and then rename the new file.</span>
<span class="comment-copy">I suggest to ask a question only about the problematic part, not including the parts which are fine. <a href="https://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a></span>
<span class="comment-copy">So that worked great for a single folder of CSVs (thank you!!) but when I ran it in a directory with several subfolders it stopped working: Traceback (most recent call last):   File "csv_remove_quotes_dir_walk.py", line 14, in &lt;module&gt;     with open(fname, 'r') as infile:</span>
<span class="comment-copy">@CD9999 that’s a different problem. Look at the docs for os.walk. See how the examples all use <code>os.path.join(dir, frame)</code>? You have to do that.</span>
