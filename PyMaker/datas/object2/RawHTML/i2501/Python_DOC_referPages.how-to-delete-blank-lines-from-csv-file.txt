<div class="post-text" itemprop="text">
<p>I am trying to read a file using <code>:</code> as delimiter and contains blank lines. My CSV file looks likes-</p>
<pre><code>P Data Usage (Bytes):        640
P Inst Usage (Bytes):        13322
P Local Patch Match:         105
P Global Patch Match:        20

V Data Usage (Bytes):        312
V Inst Usage (Bytes):        972
V Local Patch Match:         24
V Global Patch Match:        1

U UOP Usage:                 352
U Patch Match:               51
</code></pre>
<p>I want to remove blank lines from this file and I want to store it in the same file. I want to use all the values after <code>:</code> for updating Excel table.</p>
<p>How to remove blank lines from the file because if I am trying to read the file it is reading only top 4 lines and not reading any further line. I want to store every integer value in each row in a list like -</p>
<pre><code>a = ['640', '13322', '105', '20', '312', '972', '24', ..., '51']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't have a CSV file, so don't try to treat it as one. CSV specifically means a file consisting of rows of columns, where all rows have the same number of columns and the columns are delimited by a single character (usually a comma or a tab).</p>
<p>There is no need to delete the lines from your source file if all you needed was those first 4 values for your code either.</p>
<p>Just loop over the lines in the file, split each line by <em>whitespace</em>, and if the resulting list is not empty, take the last value:</p>
<pre><code>numbers = []
with open(filename) as inf:
    for line in inf:
        data = line.split()
        if data:
            numbers.append(data[-1])
</code></pre>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>str.split()</code></a> with no arguments splits on <em>arbitrary length whitespace</em>, including tabs, spaces and newlines, with any whitespace at the start and end ignored.</p>
<p>When a line is <em>empty</em> the <code>line</code> string will be <code>'\n'</code>, and splitting such a line results in an empty list. If there is anything other than whitespace on a line, you get a list of strings for each non-whitespace section:</p>
<pre><code>&gt;&gt;&gt; '\n'.split()
[]
&gt;&gt;&gt; 'P Inst Usage (Bytes):        13322\n'.split()
['P', 'Inst', 'Usage', '(Bytes):', '13322']
</code></pre>
<p>Because your file has the numbers you want at the end of each line, taking the last element (with <code>[-1]</code>) gets you all the numbers.</p>
<p>If you only need the top four such lines, test the <code>len(numbers)</code> result:</p>
<pre><code>numbers = []
with open(filename) as inf:
    for line in inf:
        data = line.split()
        if data:
            numbers.append(data[-1])
            if len(numbers) == 4:
                break
</code></pre>
<p>The <code>break</code> stops the <code>for</code> loop, and when you exit the <code>with</code> statement, the file will be closed automatically. </p>
<p>If you do ever need to skip blank lines, just test if <code>line.strip()</code> is truthy; <code>str.strip()</code> uses the same arbitrary-width whitespace rules to remove whitespace from the start and end. Empty lines with just a newline separator end up as empty strings, which are considered <em>false</em> when used in a boolean test such as an <code>if ...:</code> condition:</p>
<pre><code>if line.strip():
    # line is not empty
</code></pre>
<p>You could then write that to a new file if you so wish, but that's not really needed <em>here</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just strip the lines to check if they're empty.</p>
<pre><code>with open('in.csv', 'r') as fpin, open('out.csv', 'w') as fpout:
    for line in fpin:
        if line.strip():
            fpout.write(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import pandas as pd
df = pd.read_csv('file.csv',sep=':')
df = df.dropna(how='all')
</code></pre>
</div>
<span class="comment-copy">That's not really a CSV file. A CSV file format contains rows with a fixed number of columns with data that are delimited by a single character. Your file doesn't match that description.</span>
<span class="comment-copy">Thank you it worked for me-@Martijn Pieters</span>
