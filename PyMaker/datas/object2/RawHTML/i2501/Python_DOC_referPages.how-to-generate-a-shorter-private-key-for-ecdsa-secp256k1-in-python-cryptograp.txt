<div class="post-text" itemprop="text">
<p>I'm trying to learn how to create a bitcoin address by following <a href="https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses" rel="nofollow noreferrer">this guide</a>. If you scroll down, the first step, step 0, is to have a 256 bit (64 hex) long ECDSA key. I looked into Python Cryptography and am using the code below to test generating keys, but the saved key is always a long (180 characters) base 64 string. </p>
<p>I've tried to read the docs and look at the functions I'm calling on Github but I don't see where I can specify how long the key should be. On line 216 of <a href="https://github.com/pyca/cryptography/blob/fcf431a7764fdb93a012466f449a06dc15e53258/src/cryptography/hazmat/primitives/asymmetric/ec.py" rel="nofollow noreferrer">this file</a>, it says that the key size for secp256k1 is 256 bits by default. Does that mean I'm exporting it wrong?</p>
<p>Alternatively, I've considered generating a random hex string 64 characters long within the range of secp256k1,( <code>0x1</code> to <code>0xFFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFE BAAE DCE6 AF48 A03B BFD2 5E8C D036 4140</code> ), but I don't see where I can create a private key instance from a string or hex value</p>
<p><strong>gentest.py</strong></p>
<pre><code>from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.serialization import load_pem_private_key


def gen_key():
    private_key = ec.generate_private_key(
        ec.SECP256K1(), default_backend()
    )
    return private_key


def save_key(pk, filename):
    pem = pk.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    with open(filename, 'wb') as pem_out:
        pem_out.write(pem)

def load_key(filename):
    with open(filename, 'rb') as pem_in:
        pemlines = pem_in.read()

    private_key = load_pem_private_key(pemlines, None, default_backend())
    return private_key

if __name__ == '__main__':
    pk = gen_key()
    filename = 'privkey.pem'
    save_key(pk, filename)
    pk2 = load_key(filename)
</code></pre>
<p><strong>privkey.pem</strong></p>
<pre><code>-----BEGIN PRIVATE KEY-----
MIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgQGh8om7IuKSTW637ZQug
SZQHUTv/yQzmM+KxGi1bg0ehRANCAATALLpDeKtfHxEnrgazJUu2z2/esSfzF5bj
Z4B/IBBB9uYHyMtjY8hS926bpXiWql7y7MMZXDSDD/zYWELuJZ1U
-----END PRIVATE KEY-----
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you do not have an <em>opaque</em> private key (I think that'd involve specialist hardware, so not likely), you can get access to the private numbers information via the <a href="https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKeyWithSerialization.private_numbers" rel="nofollow noreferrer"><code>key.private_numbers()</code> method</a> of the private key object, at which point you can access the value itself as an integer number; the <code>.private_numbers()</code> method produces a <a href="https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers" rel="nofollow noreferrer"><code>EllipticCurvePrivateNumbers</code></a> object with a <a href="https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers.private_value" rel="nofollow noreferrer"><code>.private_value</code> attribute</a>, a Python <code>int</code>. Format that value as a 64-character zero-padded hex with <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>format()</code></a>:</p>
<pre><code>&gt;&gt;&gt; key = gen_key()
&gt;&gt;&gt; key.private_numbers()
&lt;cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateNumbers object at 0x110a6b828&gt;
&gt;&gt;&gt; key.private_numbers().private_value
1704732612341385685752055250212403073347894734334856205449544619169914419683
&gt;&gt;&gt; format(key.private_numbers().private_value, '064x')
'03c4d82ee8e4c9d245f5a5ceae513569fb5693a0c3cca223b198c6944521f9e3'
</code></pre>
<p>or encode it to bytes with <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>int.to_bytes()</code></a> in big or little endian order (the integer hex output is in big-endian order):</p>
<pre><code>&gt;&gt;&gt; key.private_numbers().private_value.to_bytes(32, 'big')
b'\x03\xc4\xd8.\xe8\xe4\xc9\xd2E\xf5\xa5\xce\xaeQ5i\xfbV\x93\xa0\xc3\xcc\xa2#\xb1\x98\xc6\x94E!\xf9\xe3'
&gt;&gt;&gt; key.private_numbers().private_value.to_bytes(32, 'big').hex()
'03c4d82ee8e4c9d245f5a5ceae513569fb5693a0c3cca223b198c6944521f9e3'
</code></pre>
<p>All this is a little convoluted because that's not normally needed to operate the <code>cryptography</code> module, which works with OpenSSL or other cryptography backends via data structures that keep this information in library-friendly, not Python-friendly formats.</p>
<p>And yes, the key you produce is 256 bits long, you can verify this by looking at the <code>.key_size</code> attribute of the private key:</p>
<pre><code>&gt;&gt;&gt; key.key_size
256
</code></pre>
<p>The DER format could be another path, because that's machine-readable information. The traditional OpenSSL format makes it relatively easy to fish the info out of the <a href="https://en.wikipedia.org/wiki/X.690" rel="nofollow noreferrer">X.690 ASN.1 structure</a> manually, without installing a ASN.1 parser, but this is not exactly fool-proof. You'd look for the <code>04 20</code> byte sequence (4 is an octet string, 20 hex means it's 32 bytes long), <em>and</em> the value would be the second element in a sequence with the first an integer; this means the private key will always start at the 8th byte:</p>
<pre><code>der_bytes = key.private_bytes(
    encoding=serialization.Encoding.DER,      
    format=serialization.PrivateFormat.TraditionalOpenSSL, 
    encryption_algorithm=serialization.NoEncryption())
assert der_bytes[5:7] == b'\x04\x20'
key_bytes = der_bytes[7:39]
</code></pre>
<p>I'm not 100% certain if those assertions hold however, and just accessing the private numbers is much simpler.</p>
</div>
<span class="comment-copy">Thank you for the detailed and quick response! You mentioned that doing this is convoluted since typically the developer doesn't need access to the actual private key. Do you think that means I'm going about it the wrong way, or do you think my use case of creating a bitcoin key complex enough to warrant me digging into the library? Thanks again for your help.</span>
<span class="comment-copy">also something that might help out others that try to do the same thing, once I have the private value, I can load it in using <code>derive_private_key(pk, ec.SECP256K1(), default_backend())</code> instead of <code>generate_private_key(ec.SECP256K1(),default_backend()</code></span>
<span class="comment-copy">@mucle6: the developers using the use-cases for which this library was designed don't need to have access to the key in this format. For bitcoin, you need it, so it's fine doing this.</span>
<span class="comment-copy">@mucle6: I note that the <a href="https://github.com/laanwj/python-bitcoinlib/blob/master/bitcoin/key.py" rel="nofollow noreferrer">first Python bitcoin library source code I can find</a> just exposes the raw private key bytes directly from the OpenSSL API.</span>
