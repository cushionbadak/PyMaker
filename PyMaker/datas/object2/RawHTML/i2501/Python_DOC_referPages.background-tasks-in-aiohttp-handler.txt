<div class="post-text" itemprop="text">
<p>I'm trying to start background long-time tasks in <code>aiohttp</code> handler:</p>
<pre><code>from aiohttp import web
import time
import asyncio


async def one(request):
    print("Start")
    loop = asyncio.get_event_loop()
    tasks = [
        asyncio.ensure_future(long_computation(1)),
        asyncio.ensure_future(long_computation(2)),
    ]
    done, _ = loop.run_until_complete(asyncio.wait(tasks))

    for f in done:
        print(f"{f.result()}")

    return web.Response(text="one")


async def long_computation(id: int):
    print(f"run long computation with delay: {id}")
    time.sleep(id)
    print(f"done long computation with delay: {id}")


app = web.Application(client_max_size=1024 * 1024 * 10)
app.add_routes([web.get('/one', one)])

web.run_app(app)
</code></pre>
<p>but got an error:</p>
<pre><code>Error handling request
Traceback (most recent call last):
  File "env/lib/python3.6/site-packages/aiohttp/web_protocol.py", line 378, in start
    resp = await self._request_handler(request)
  File "env/lib/python3.6/site-packages/aiohttp/web_app.py", line 341, in _handle
    resp = await handler(request)
  File "test_async.py", line 13, in one
    done, _ = loop.run_until_complete(asyncio.wait(tasks))
  File "/usr/lib/python3.6/asyncio/base_events.py", line 455, in run_until_complete
    self.run_forever()
  File "/usr/lib/python3.6/asyncio/base_events.py", line 409, in run_forever
    raise RuntimeError('This event loop is already running')
RuntimeError: This event loop is already running
run long computation with delay: 1
done long computation with delay: 1
run long computation with delay: 2
done long computation with delay: 2
</code></pre>
<p>What I'm missing for?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to replace:</p>
<pre><code>done, _ = loop.run_until_complete(asyncio.wait(tasks))
</code></pre>
<p>with:</p>
<pre><code>done, _ = await asyncio.wait(tasks)
</code></pre>
<p>Also, if <code>long_computation</code> is blocking, you need to hand it off to a separate thread using <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_in_executor" rel="nofollow noreferrer"><code>run_in_executor</code></a>:</p>
<pre><code>loop = asyncio.get_event_loop()
tasks = [
    loop.run_in_executor(None, long_computation, 1),
    loop.run_in_executor(None, long_computation, 2),
]
</code></pre>
</div>
