<div class="post-text" itemprop="text">
<p>See below example:</p>
<pre><code>&gt;&gt;&gt;f = [[1],[2],[3]]
&gt;&gt;&gt;max(f)
Out[21]: [3]
&gt;&gt;&gt;max(*f)
Out[22]: [3]
</code></pre>
<p>The unpack operator did not have an effect here, I am trying to unpack a list and get a maximal value of matrix(two dim list). </p>
</div>
<div class="post-text" itemprop="text">
<p>Given:</p>
<pre><code>mat=[
    [1, 2, 3],
    [4, 5, 6],
    [0, 9, 10]
]
</code></pre>
<p>Either <code>max(mat)</code> or <code>max(*mat)</code> will give the same result because the individual sublist are being compared:</p>
<pre><code>&gt;&gt;&gt; max(mat)
[4, 5, 6]
&gt;&gt;&gt; max(*mat)
[4, 5, 6]
</code></pre>
<p>In the first case, <code>max(mat)</code>, you have a <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer">iterable</a> list of lists returning each sublist one at a time. In the second case, <code>max(*mat)</code>, the elements (sublists) within that list of lists are unpacked into multiple individual arguments to <code>max</code>.</p>
<p>If you want the sublist that has the max value in it, use <code>max</code> as a key function:</p>
<pre><code>&gt;&gt;&gt; max(mat, key=max)
[0, 9, 10]
</code></pre>
<p>If you want the individual max value in a two dimensional matrix, you can flatten it:</p>
<pre><code>&gt;&gt;&gt; max(v for sl in mat for v in sl)
10
</code></pre>
<p>Or have three <code>max</code>'s:</p>
<pre><code>&gt;&gt;&gt; max(max(mat,key=max))
10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The documentation for <code>max</code> mentions:</p>
<blockquote>
<p><a href="https://docs.python.org/3.5/library/functions.html#max" rel="nofollow noreferrer"><strong>builtin max</strong></a></p>
<p>max(iterable, *[, key, default])</p>
<p>max(arg1, arg2, *args[, key])</p>
<p>...</p>
<p>If one positional argument is provided, it should be an iterable. The largest item in the iterable is returned. If two or more positional arguments are provided, the largest of the positional arguments is returned.</p>
</blockquote>
<p>In the first case you have one positional argument, in the second case you have multiple.</p>
<hr/>
<p>To get what you want, which is the maximal entry in a matrix you could try</p>
<pre><code>max(entry for row in matrix for entry in row)
</code></pre>
<p>This will pass one argument to the max function which is a generator that iterates over all the entries in the matrix - triggering the first case which  finds the maximum of an iterable.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to chain the lists into a single iterable to get this to work. <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> will let you do this:</p>
<pre><code>from itertools import chain

max(chain(*f))
</code></pre>
<p>To unpack the list without <code>itertools</code> or other imports, use a nested comprehension:</p>
<pre><code>max(x for row in f for x in row)
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><code>max</code></a> has two modes. If you pass in a single positional argument, e.g. <code>f</code>, it will be interpreted as an iterable, and the maximum element of the iterable will be returned. If you pass in multiple positionnant arguments, e.g. <code>*f</code>, it will find the maximum of those elements. Since lists are comparable in Python, both versions are indeed equivalent.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can put the max of each sublist into a list, and then call the max on that.</p>
<pre><code>max(max(i) for i in f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>help(max)</code> should be your first port of call.</p>
<pre><code>Help on built-in function max in module builtins:

max(...)
    max(iterable, *[, default=obj, key=func]) -&gt; value
    max(arg1, arg2, *args, *[, key=func]) -&gt; value

    With a single iterable argument, return its biggest item. The
    default keyword-only argument specifies an object to return if
    the provided iterable is empty.
    With two or more arguments, return the largest argument.
</code></pre>
<p><code>max(f)</code> means <code>max</code> with a single argument, <code>[[1],[2],[3]]</code>, and the largest element of this is returned.</p>
<p><code>max(*f)</code> means <code>max</code> with three arguments, <code>[1], [2], [3]</code>, and the largest of these is returned.</p>
<p>Clearly these are equivalent in your example.</p>
<p>But in general you should use the former to find the max of an iterable. It's the correct use case. The latter will break for e.g. <code>f = [1]</code>.</p>
<p>For your specific problem, you need to flatten the list of lists into a single iterable and pass it to <code>max</code>. Here is a quick way:</p>
<p><code>max(element for row in f for element in row)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Its because <code>max</code> will have three lists then get's maximum list, so you can do <code>sum</code>, for integer lists:</p>
<pre><code>&gt;&gt;&gt; f=[[1],[2],[3]]
&gt;&gt;&gt; max(sum(f,[]))
3
&gt;&gt;&gt; 
</code></pre>
<p>Also since from:</p>
<pre><code>&gt;&gt;&gt; print(max.__doc__)
max(iterable, *[, default=obj, key=func]) -&gt; value
max(arg1, arg2, *args, *[, key=func]) -&gt; value

With a single iterable argument, return its biggest item. The
default keyword-only argument specifies an object to return if
the provided iterable is empty.
With two or more arguments, return the largest argument.
&gt;&gt;&gt;
</code></pre>
<p>As it says "With two or more arguments, return the largest argument.", so we have three arguments, so 3&gt;2 is <code>True</code>, then <code>[3]</code> is largest argument </p>
<p>Or can use, <code>reduce</code>:</p>
<pre><code>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; max(reduce(lambda x,y: x+y,f))
3
&gt;&gt;&gt; 
</code></pre>
<p>even tho kind of similar to Mad Physicist's answer, but i use <code>.from_iterable</code> instead of unpacking:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; max(itertools.chain.from_iterable(f))
3
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Suppose you have <code>[[1, 2, 3], [4, 5, 6], [0, 9, 10]]</code> What value are you looking for as the max?</span>
<span class="comment-copy">@dawg, doesn't matter, the question is why are they the same, we can have other means to get whichever element we want.</span>
<span class="comment-copy">This is not the most accurate answer but most expandable, thanks.</span>
<span class="comment-copy">@wpercy. No, OP wants max of all the elements</span>
