<div class="post-text" itemprop="text">
<p>I have a module called mymodule.
The module has a method <code>sayHello()</code></p>
<p>So this works:</p>
<pre><code>import mymodule
print(mymodule.sayHello())
</code></pre>
<p>Now I want to use the methods (all of them) from <code>mymodule</code> for a class.</p>
<pre><code>import mymodule

class Grandma(object):

    def __init__(self):
        ##import methods from mymodule.
</code></pre>
<p>So I can do in another class:</p>
<pre><code>from grandma import Grandma
self.Grandma.sayHello()
</code></pre>
<p>How can I achieve this in python?</p>
<p>atm I can only achieve this by using an extra attribute which I don't want</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this is relatively bad design, and recommend you find a different way of expressing what you want to do.  </p>
<p>That said, using the <a href="https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__" rel="nofollow noreferrer"><code>__init_subclass__</code></a> method of a parent class makes this pretty easy: we just loop though the directory of the module and assign all the attributes to identical attributes on the class.</p>
<pre><code>from abc import ABC

class ModuleABC(ABC):
    def __init_subclass__(cls, module, **kwargs):
        super().__init_subclass__(**kwargs)
        for name in dir(module):
            # Ignore attributes we define as part of the class and "private" attributes
            if not hasattr(cls, name) and not name.startswith('_'):
                setattr(cls, name, getattr(module, name))

import math

class Grandma(ModuleABC, module=math):
    pass

print(Grandma.tau)
# 6.283185307179586
</code></pre>
<p>This doesn't actually require that <code>module</code> be a module either: it should work on just about any target.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can literally import stuff right inside the class definition:</p>
<pre><code>class Something:
    from stuff import a, b

    def __init__(self):
        self.a()
</code></pre>
<p>You may want to take a look at how this can be used in a real-world project <a href="https://github.com/ForceBru/PyVM/blob/master/VM/__init__.py" rel="nofollow noreferrer">here</a>. I'm not saying this is the best method (I actually find it relatively ugly), but it works fine.</p>
</div>
<span class="comment-copy">Why would you want to?  Anyone who can access the <code>Grandma</code> class can also access <code>mymodule</code> and call the functions there directly.</span>
<span class="comment-copy">What is the <code>self</code> in <code>self.Grandma.sayHello()</code>?</span>
<span class="comment-copy">I suspect it has to be: <code>from mymodule import Grandma</code>, as the Grandma class is defined in mymodule.py. Afterwards you can just do: <code>grandma = Grandma()</code> and then <code>grandma.sayHello()</code></span>
