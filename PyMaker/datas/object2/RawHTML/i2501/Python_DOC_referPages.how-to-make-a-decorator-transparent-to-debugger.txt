<div class="post-text" itemprop="text">
<p>I am working on a decorator library that is modifying keyword arguments of a function, and the library is doing what I want it to do, but it's very inconvenient that while debugging, whenever the user function is called, the debugger has to pass through the decorator library code.</p>
<p>I implemented the decorator as a class (see <a href="https://github.com/mapa17/configfy/blob/master/configfy/decorator.py" rel="nofollow noreferrer">https://github.com/mapa17/configfy/blob/master/configfy/decorator.py</a>)</p>
<p>and the user function is wrapped by the following library code:</p>
<pre><code>def __call__(self, *args, **kwargs):
    if self.needs_wrapping:
        self.needs_wrapping = False
        self.func = args[0]
        functools.update_wrapper(self, self.func)
        self.kwargs = self.__get_kw_args(self.func)

        # If config file is specified in decorator, new kwargs can be precalculated!
        if self.config is not None:
            self.new_kwargs = self._get_new_kwargs()

        return self

    # Use precalculated kwargs if available
    if self.new_kwargs is None:
        new_kwargs = self._get_new_kwargs()
    else:
        new_kwargs = self.new_kwargs

    # Overwrite them with any passed arguments; passed arguments have priority!
    new_kwargs.update(kwargs)

    # Call target (aka user) function with altered kwargs
    return self.func(*args, **new_kwargs)
</code></pre>
<p>So is it possible to somehow skip this library code when debugging?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's nothing magical with decorators. The <code>@decorator</code> syntax is only syntactic sugar, so when you write:</p>
<pre><code>@decorate
def some_func(...):
   # ...
</code></pre>
<p>technically what really happens is:</p>
<pre><code>def some_func(...):
   # ...

some_func = decorate(some_func)
</code></pre>
<p>IOW, no, there is no way to "make a decorator transparent to the debugger", since a "decorator" is just a plain ordinary callable that (usually but not necessarily) returns another plain ordinary callable - in fact there's just no such thing as a "decorator", a callable is a decorator if you use it as such, and that's all. </p>
</div>
<div class="post-text" itemprop="text">
<p>As @bruno-desthuilliers mentioned, the decorator is a wrapper around the user function, and there is no way to somehow remove it.</p>
<p>What can be done is, to make the debugger skip the decorator module code, using the <strong>skip</strong> option <a href="https://docs.python.org/3/library/pdb.html#pdb.Pdb" rel="nofollow noreferrer">see</a></p>
<p>As i am interested in using pudb for debugging, i created a pull request, enabling a similar feature for pdb <a href="https://github.com/inducer/pudb/issues/310" rel="nofollow noreferrer">see</a></p>
<p>for pdb</p>
<pre><code>import pdb
from configfy import configfy as cfy    

@cfy
def fuu(kw_me=42):
    print(kw_me)

if __name__ == '__main__':
    pdb.Pdb(skip=['configfy.*']).set_trace()
    fuu()
</code></pre>
<p>for pudb (if the pull request is accepted)</p>
<pre><code>import pudb
from configfy import configfy as cfy

# Prevent pudb from stepping into the decorator library code
pudb._get_debugger(skip=['configfy.*'])


@cfy
def fuu(kw_me=42):
    print(kw_me)

if __name__ == '__main__':
    pudb.set_trace()
    fuu()
</code></pre>
</div>
<span class="comment-copy">If you don't want to step through that code, why are you setting a breakpoint there?</span>
<span class="comment-copy">Which debugger are you using?</span>
<span class="comment-copy">Sorry for not being clearer. I am not setting any breakpoint in the library code, but in the user code.  I am using pudb and when stepping into a function that is making use of the decorator, i get into the decorator library (the <b>call</b> method).</span>
<span class="comment-copy">Thank you @bruno-desthuilliers, but I am aware that decorators are only syntactic sugar. Thats the reason I have framed the question how to make the decorator transparent to the debugger (not to the python interpreter).  Because the debugger as I found out can be pushed into skipping the decorator code (see my answer)</span>
<span class="comment-copy">Well one learns something new everyday ;-)</span>
<span class="comment-copy">Interesting and good to know - but this only allow to skip full modules, which is not the same as skipping specific decorators (function or class-based) - it doesn't work if the decorator is in the same module (which is not uncommon) nor if you don't want to skeep other code in the same module as the decorator (which is not uncommon either).</span>
<span class="comment-copy">Yes thats true. Luckily its sufficient for configfy.</span>
