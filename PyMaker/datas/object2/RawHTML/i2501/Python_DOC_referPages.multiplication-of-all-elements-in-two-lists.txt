<div class="post-text" itemprop="text">
<p>I want to multiply each number of list1 with each number of list2.<br/>
  For example:
<code>[1,2]*[1,2,3]</code> should return something like this:  <code>[1,2,3,2,4,6]
</code>                                                                                 I just want to know if there is any special function to calculate this, as it would take a lot of time to calculate this using a for loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple nested <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">comprehension</a> will work:</p>
<pre><code>lst1, lst2 = [1, 2], [1, 2, 3]

[x * y for x in lst1 for y in lst2]
# [1, 2, 3, 2, 4, 6]
</code></pre>
<p>To get all the pairs (the cartesian product) from the two lists, you can also use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>:</p>
<pre><code>from itertools import product
[x * y for x, y in product(lst1, lst2)]
# [1, 2, 3, 2, 4, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also do this using dot products, as provided by <code>numpy</code> (I include this as an answer because you said you are looking for <em>any</em> special function, and are looking to optimize speed, though I agree it's not the most readable or straightforward method):</p>
<pre><code>import numpy as np

lst1, lst2 = [1, 2], [1, 2, 3]

np.dot(np.array([lst1]).T, np.array([lst2])).flatten().tolist()
#[1, 2, 3, 2, 4, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this:</p>
<pre><code>import itertools    

a = [1, 2]
b = [1, 2, 3]
result = []
for n in a:
    m = map(lambda x,y: x*y, b, itertools.repeat(n))
    result.extend(m)
</code></pre>
</div>
<span class="comment-copy">You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.products</code></a> to get all of the pairs.  From there, you can pass them to a function to calculate each of their (arithmetic) products.</span>
