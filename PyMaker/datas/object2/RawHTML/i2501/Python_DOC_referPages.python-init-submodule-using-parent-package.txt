<div class="post-text" itemprop="text">
<p>I have a package structure as:</p>
<pre><code>parent_package/
    __init__.py
    module/
        __init__.py
</code></pre>
<p>In the parent <code>__init__.py</code> I have:</p>
<pre><code>from __future__ import division

print(3/2) # 1.5
</code></pre>
<p>However, when I tried to reuse the import in its child, division does not take effect. In module's <code>__init__.py</code>:</p>
<pre><code>from parent_package.__init__ import division

print(3/2) # 1!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are misunderstanding how the <code>__future__</code> module works. <code>__future__</code> is a special module that is built into the python interpreter and changes how the interpreter parses and/or executes your code. In order for a <code>__future__</code> import to have the desired effect, it <em>must</em> be of the form</p>
<pre><code>from __future__ import &lt;feature&gt;
</code></pre>
<p>(See <a href="https://www.python.org/dev/peps/pep-0236/#syntax" rel="nofollow noreferrer">PEP 236</a> for the exact specification.)</p>
<p>However, in addition to the <code>__future__</code> module that's built into the interpreter, <code>__future__</code> <em>also</em> <a href="https://docs.python.org/3/library/__future__.html" rel="nofollow noreferrer">a real module in the standard library</a>! The import <code>from __future__ import divison</code> actually does two things: It enables the new division behavior, <strong>and</strong> it imports the feature specification from the real <code>__future__</code> module. This is what you'll see if you take a look at the value of <code>division</code> after the import:</p>
<pre><code>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; division
_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
</code></pre>
<p>When you do <code>from parent_package.__init__ import division</code>, you're simply importing this variable. But you're not enabling the new division behavior.</p>
</div>
<span class="comment-copy">Is division your own module or file? Couldn't you just import <code>division</code> in the module <code>__init__</code> ?</span>
<span class="comment-copy">I think for good style, you should just use <code>from __future__ import division</code> everywhere. It's even shorter!</span>
<span class="comment-copy">Your current import doesn't even make it clear that <code>division</code> is a future import: it could be a random function, variable or class defined in the parent. That is very confusing.</span>
<span class="comment-copy">@9769953 I wanted modules to init following the root. Wished root __init__.py do the heavy lift (setup global config etc.) and modules somehow 'inherit' from it. I don't know if there's a better way to do it.</span>
<span class="comment-copy">"I don't know if there's a better way to do it. ": see my first comment.</span>
