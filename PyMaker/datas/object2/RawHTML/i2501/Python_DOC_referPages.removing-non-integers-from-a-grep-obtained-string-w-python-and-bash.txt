<div class="post-text" itemprop="text">
<p>I am using <code>grep</code> to grab the text out of a file:</p>
<pre><code>NELECT = 44.0000   total number of electrons,
</code></pre>
<p>and I need to save the number as a variable. I have tried a handful of methods I have found here such as using filters and <code>findall</code>. For some reason I can only get it to separate one zero.</p>
<p>So far the code looks like this:</p>
<pre><code>wd=os.getcwd()
electrons=str(os.system("grep 'NELECT' "+wd+"/OUTCAR"))
VBM=(re.findall('\d+', electrons))
print VBM
</code></pre>
<p>And in return I get ['0'].</p>
</div>
<div class="post-text" itemprop="text">
<p>The result of os.system is the exit status of the command, not the output of the command -- see <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">https://docs.python.org/3/library/os.html#os.system</a></p>
<pre><code>$ cat OUTCAR 
NELECT = 44.0000   total number of electrons,

$ python
Python 2.7.12 (default, Dec  4 2017, 14:50:18) 
[GCC 5.4.0 20160609] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import os
&gt;&gt;&gt; result = os.system("grep 'NELECT' "+os.getcwd()+"/OUTCAR")
NELECT = 44.0000   total number of electrons,
&gt;&gt;&gt; result
0
</code></pre>
<p>The "NELECT" line was just printed by grep to stdout, but not captured in the result variable</p>
<pre><code>&gt;&gt;&gt; from subprocess import check_output
&gt;&gt;&gt; result2 = check_output(["grep", "NELECT", os.getcwd()+"/OUTCAR"])
&gt;&gt;&gt; result2
'NELECT = 44.0000   total number of electrons,\n'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'\d+', result2)
['44', '0000']
</code></pre>
<p>Or, don't call out to grep, read the file yourself</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; import re
&gt;&gt;&gt; with open(os.getcwd() + "/OUTCAR") as f:
...   for line in f:
...     if "NELECT" in line:
...       digits = re.findall(r'\d+', line)
...       break
...
&gt;&gt;&gt; digits
['44', '0000']
</code></pre>
<p>Or, maybe don't use a regular expression:</p>
<pre><code>&gt;&gt;&gt; words = line.split()
&gt;&gt;&gt; words[2]
'44.0000'
&gt;&gt;&gt; int(float(words[2]))
44
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Are you sure that <code>electrons</code> has output specified? For me this regex returns list with two elements: <code>['44', '000']</code> and that's expected behavior. So most probably there is something wrong with grep call.</p>
<p>Your regex won't retrieve whole <code>44.000</code> as <code>\d+</code> catches only continuous digit strings, no dot symbols. To get whole number use something like <code>\b\d+\.\d+\b</code> which means: any word (<code>\b</code> means word beginning/ending, dot must be escaped as <code>.</code> in regex matches any character) that contains at least 1 digit, dot and at least 1 more digit. If dot is optional, then something like this: <code>\b(\d+(?:\.\d+)?)\b</code> (<code>(?:)</code> creates group that will not be captured so your output will still be single element list).</p>
<p>Note that <code>re.findall</code> will return list of string matches. To retrieve number from first match: <code>float(VBM[0])</code></p>
<p>Edit. Forgot to add: avoid using print statement, it works oddly with tuples and is completely removed in Python 3. Python 2 support ends in 2020 so it's better to prepare. You can replace print statement with Python 3 print function by adding <code>from __future__ import print_function</code> at the file beginning.</p>
</div>
<span class="comment-copy">Somehow that caused the output to be 256.</span>
<span class="comment-copy">Is there a reason that you are using the shell vs reading the file in Python?</span>
