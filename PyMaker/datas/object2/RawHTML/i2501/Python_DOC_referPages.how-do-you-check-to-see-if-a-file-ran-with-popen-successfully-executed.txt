<div class="post-text" itemprop="text">
<p>I'm trying to make a script that detects whether an executable ran using Popen was able to successfully run or not (maybe if it got blocked by an antivirus or the program itself is broken). Maybe by checking whether the file is memory or not? I'm not quite sure what's the best method for detecting the file in this case and if you have a better suggestion, then by all means don't hesitate to share it.</p>
<p>This is my code:</p>
<p></p>
<pre><code>for file in glob.glob('*.exe'):
    try:
        subprocess.Popen(file)
    except Exception:
        print('okay')
</code></pre>
<p>I'm trying to figure out what to put in the last "except" part to make this work how I want it to.</p>
</div>
<div class="post-text" itemprop="text">
<p>Exceptions are used to keep the program running even though an error occurred.</p>
<pre><code>for file in glob.glob('*.exe'):
    try:
        subprocess.Popen(file)
    except Exception as e:
        print(file,' did not run properly.')
        print(e)
        continue
</code></pre>
<p>This will alert the user that the '*.exe' did not run properly while keeping your code running.</p>
</div>
<div class="post-text" itemprop="text">
<p>Basically, Try will execute always in the loop and Except only when there is a exception. Now that we need to see the output we can print the exception </p>
<pre><code>except Exception as e:
        print(e)
</code></pre>
<p>Using a <code>continue</code> will allow you to execute the rest of the loop. It would look like this : (Bad coding practices ahead)</p>
<pre><code>except Exception as e:
        print(e)
        continue;
</code></pre>
</div>
<span class="comment-copy"><code>subprocess.call(file)</code> will raise an exception if the executable could not start. It avoids to start the executable in the background like popen does. But it blocks the calls. Maybe Popen with a timeout + kill?</span>
<span class="comment-copy">What operating system is this? That might make a difference. The mention of antivirus makes me think this might be a Windows system, where executables often don't behave nicely as subprocesses.</span>
<span class="comment-copy">Also: which Python version specifically? On 3.5 or newer, you should probably be using <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run()</code></a>.</span>
<span class="comment-copy">Probably also include the filename in the printed message</span>
<span class="comment-copy">@tripleee That is a good idea, but since python will be printing the file name in the <code>e</code> (the error), is it necessary or am I missing a point?</span>
<span class="comment-copy">Depends entirely on the exception. I would not depend on the file name being visible in <code>e</code>.</span>
<span class="comment-copy">@tripleee I see, it is possible to there is being an exception that does not have the file name in it. Thanks for correcting.</span>
<span class="comment-copy"><code>print(Exception)</code> doesn't make sense: that's will just print <code>&lt;class 'Exception'&gt;</code>. You need to catch the actual exception object if you want to do something with it like printing it.</span>
<span class="comment-copy">My bad @DanielPryden. Thanks for pointing it out !!</span>
<span class="comment-copy">You didn't fix it in both places</span>
