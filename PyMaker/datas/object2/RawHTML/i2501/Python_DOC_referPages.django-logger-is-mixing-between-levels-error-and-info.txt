<div class="post-text" itemprop="text">
<p>i'm trying to add logging to my django project 
here's my logger configuration:</p>
<pre><code>LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        },
    },
    'handlers': {
        'default': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(*[BASE_DIR, 'logfiles', 'debug.log']),
            'formatter': 'standard',
        },
        'apps_errors': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(*[BASE_DIR, 'logfiles', 'apps_errors.log']),
            'formatter': 'standard',
        },
        'dev_logger': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(*[BASE_DIR, 'logfiles', 'apps_logs.log']),
            'formatter': 'standard',
        },
    },
    'loggers': {
        '': {
            'handlers': ['default'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'gui': {
            'handlers': ['dev_logger', 'apps_errors'],
            'propagate': True,
        },
        'crawler': {
            'handlers': ['dev_logger', 'apps_errors'],
            'propagate': True,
        },
    },
}
</code></pre>
<p>As you can see, I want to log everything to <code>debug.log</code><br/>
and log errors on apps (crawler and gui) to apps_errors.log<br/>
and log info on apps (crawler and gui) to apps_logs.log<br/></p>
<p>debug.log and apps_errors.log are working normally, everything is being logged to <code>debug.log</code> and only errors in my 2 apps, are being logged to <code>apps_errors.log</code>, but when it comes to <code>apps_logs.log</code> i keep getting both errors and info when it should be only info</p>
<p>by the way when i want to log something i'm doing </p>
<pre><code>import logging
logger = logging.getLogger(__name__)
</code></pre>
<p>for info i'm doing : <code>logging.info(my_info)</code></p>
<p>for errors i'm doing: <code>logging.exception(my_exception)</code> i also tried <code>logging.error(my_exception)</code></p>
<p>PS: <br/>
i have tried defining two loggers, one for each handler, but doing that logs only errors using the errors logger/handler, the info one doesn't work</p>
<pre><code>'gui': {
        'handlers': ['dev_logger'],
        'level': 'INFO',
        'propagate': True,
},
'gui': {
        'handlers': ['apps_errors'],
        'level': 'ERROR',
        'propagate': True,
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If for some reason you <em>only</em> want INFO messages to show up in a handler's output, but nothing of higher severity, you would need to attach a filter to that handler. This is not a common requirement - though it's common to isolate errors and greater in logs, it's not common to isolate <em>only</em> INFO messages. Using a filter should work:</p>
<pre><code>import logging

class InfoFilter(logging.Filter):
    def filter(self, record):
        return record.level == logging.INFO
</code></pre>
<p>and then assign that filter to your handler <code>dev_logger</code>. Not sure why you've called it <code>dev_logger</code> - perhaps you need to review your understanding of loggers and handlers. The top of the <a href="https://docs.python.org/3/howto/logging.html#advanced-logging-tutorial" rel="nofollow noreferrer">advanced tutorial</a> gives a summary.</p>
</div>
<span class="comment-copy">The level given for the handler is the <b>minimum</b> level that is being logged. That means <code>INFO</code> includes both <code>WARNING</code> and <code>ERROR</code>. If you don't want errors in your apps log you have to log errors with a different logger that is only handled by errors handler.</span>
<span class="comment-copy">@schwobaseggl like this : pastebin.com/ZrPwpH0V ???? i have tried this and only the error handler works, the info handler doesn't ..... any ideas ??</span>
<span class="comment-copy">That won't work. In your modules, do sth like <code>logger = logging.getLogger(__name__)</code> and <code>error_logger = logging.getLogger()</code> and only use the latter to log errors.</span>
<span class="comment-copy">@schwobaseggl should i do for example error_logger = logging.getLogger('error_logger') and create a logger called error_logger ???</span>
<span class="comment-copy">That's an option, but it is twisting the concept. After all, your app log is supposed to show you what's going on in your app. So why have it log the common, but not the important stuff?</span>
<span class="comment-copy">i called it dev_logger because i'll be using logger.info() just for developers .. that file will be only accessed by developers ... is something wrong ?</span>
<span class="comment-copy">You can call it what you like, but it's a handler you're configuring - not a logger. Note that it's in a dictionary with key "handlers" ...</span>
<span class="comment-copy">ahhhh oky i get what you're saying .. you're right ... i'm very new to logging.</span>
