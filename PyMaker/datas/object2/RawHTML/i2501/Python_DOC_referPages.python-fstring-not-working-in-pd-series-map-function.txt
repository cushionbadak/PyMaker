<div class="post-text" itemprop="text">
<p>I have a pd series,</p>
<pre><code>s = pd.Series([1, 2, 3, np.nan])
</code></pre>
<p>when I do,</p>
<pre><code>s.map('this is a string {}'.format)
[out]
0    this is a string 1.0
1    this is a string 2.0
2    this is a string 3.0
3    this is a string nan   
</code></pre>
<p>how can I get the same result by using formatted string?</p>
<pre><code>s.map(f'this is a string {?}') ?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use lambda function with <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer"><code>{x}</code></a>:</p>
<pre><code>print (s.map(lambda x: f'this is a string {x}'))
#alternative with different value
#print (s.map(lambda val: f'this is a string {val}'))
0    this is a string 1.0
1    this is a string 2.0
2    this is a string 3.0
3    this is a string nan
dtype: object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A solution is possible without <code>map</code> / <code>apply</code> + <code>lambda</code>. You can assign a list directly to a series. A list comprehension is often more efficient since <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.apply.html" rel="nofollow noreferrer"><code>pd.Series.apply</code></a> is not vectorised:</p>
<pre><code>df = pd.DataFrame({'s': pd.Series([1, 2, 3, np.nan])})

df['t'] = [f'this is a string {i}' for i in df['s']]

print(df)

     s                     t
0  1.0  this is a string 1.0
1  2.0  this is a string 2.0
2  3.0  this is a string 3.0
3  NaN  this is a string nan
</code></pre>
</div>
