<div class="post-text" itemprop="text">
<p>I'm in the following situation: I have a python script <code>main.py</code>, that runs some actions depending on a config file. The config file is a python script/class itself. I want to be able to pass different config files from the command line as parameter and import it in the main script.</p>
<p>Is it even possible in python to load classes dynamically? If so, how can I accomplish that task?</p>
<p>See the following minimal example for clarification.</p>
<p>This is my script <code>main.py</code>:</p>
<pre><code>import argparse

def get_arguments():
    parser = argparse.ArgumentParser(description="foo")
    parser.add_argument("--configfile", required=True)
    return parser.parse_args()

def main():
    args = get_arguments()

    from args.configfile import MyConfig # &lt;-- how is that possible?

    if MyConfig.SETTING1:
        do_something()

if __name__ == '__main__':
    main()
</code></pre>
<p>This is an example <code>config.py</code>:</p>
<pre><code>class MyConfig(BaseConfig):
    SETTING1 = True
    SETTING2 = 1 
</code></pre>
<p>This is another example <code>config-special.py</code>:</p>
<pre><code>class MyConfig(BaseConfig):
    SETTING1 = False
    SETTING2 = 42 
</code></pre>
<p>I'm calling it like this:</p>
<pre><code>$ python3 main.py --configfile config.py
$ python3 main.py --configfile config-special.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>import_module</code> to dynamic import modules, detail explain see in the code.</p>
<p>Still use your next command to call them.</p>
<pre><code>$ python3 main.py --configfile config.py
$ python3 main.py --configfile config-special.py
</code></pre>
<p><strong>main.py</strong></p>
<pre><code>import argparse
# import sys
from importlib import import_module

def get_arguments():
    parser = argparse.ArgumentParser(description="foo")
    parser.add_argument("--configfile", required=True)
    return parser.parse_args()

def main():
    args = get_arguments()
    module_name = args.configfile[:-3] # here, the result is the file name, e.g. config or config-special

    # Not use __import__, use import_module instead according to @bruno desthuilliers's suggestion
    # __import__(module_name) # here, dynamic load the config module
    # MyConfig = sys.modules[module_name].MyConfig # here, get the MyConfig class
    MyConfig = import_module(module_name).MyConfig

    # from args.configfile import MyConfig # &lt;-- how is that possible?

    if MyConfig.SETTING1:
        #do_something()
        print("do_something")

if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I use this:</p>
<pre><code>from importlib import import_module
from importlib.util import find_spec

if not find_spec(modulename):
    print('%s: No such module.' % modulename, file=sys.stderr)
    exit(1)

module = import_module(modulename)

try:
    klass = getattr(module, classname)
except AttributeError:
    print('%s: No such class.' % classname, file=sys.stderr)
    exit(1)
</code></pre>
<p>You would also likely want to manipulate <code>sys.path</code> if your file is not in the standard <code>PYTHON_PATH</code> hierarchy.</p>
<p>I went explicit with all the checks (especially <code>find_spec</code>) because if you just import and try to catch an exception, it is very hard to distinguish if you got the exception because your import failed, or because an import inside the file you imported failed.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest not using python file as configuration. You could use configparser method like this:</p>
<pre><code>from configparser import ConfigParser
parser = ConfigParser()
parser.read(filename)
if parser.has_section(section):
    items = parser.items(section)
</code></pre>
<p>config.ini</p>
<pre><code>[MyBaseSettings]
SETTING1 = True
SETTING2 = 1 
</code></pre>
</div>
<span class="comment-copy">I wonder what's the matter for downvote, thanks? I need to learn it.</span>
<span class="comment-copy">in <a href="https://docs.python.org/3/library/functions.html#__import__" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#__import__</a> =&gt; "Direct use of __import__() is also discouraged in favor of importlib.import_module()."  - and as a general rule, when you're directly using a dunder name then you're very probably doing it wrong.</span>
<span class="comment-copy">Got it, thanks, a little concern, compare to <code>importlib.import_module()</code>, what's the detail disadvantage to use <code>__import__</code>,  it said <code>does not cause issues</code>, but did not tell what's the issue.</span>
<span class="comment-copy">dunder names are mainly implementation support for features that have an official public API - for example, you don't use <code>dict.__getitem__(key)</code> but <code>dict[key]</code>, or you don't use <code>obj.__setattribute__("name", value)</code> but <code>obj.name = value</code>. In the same way, the point of <code>__import__</code> is to provide a way to override the import mechanism, the official API for dynamic imports is <code>importlib.import_module()</code>.      You can of course - technically that is - use <code>__import__</code> but 1/ it's more complicated (import_module()` directly returns the module object) and 2/ everyone will wonder why you did this.</span>
<span class="comment-copy">Sounds reasonable, update the answer to use <code>import_module</code> to replace <code>__import__</code>.</span>
<span class="comment-copy">Quite a few python apps / frameworks do use python modules for configuration. It's only a problem if someone can use this as a vector for an attack, which is most often not the case.</span>
