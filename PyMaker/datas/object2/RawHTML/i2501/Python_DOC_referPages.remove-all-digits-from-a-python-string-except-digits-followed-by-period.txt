<div class="post-text" itemprop="text">
<p>Say I have a string:</p>
<pre><code>some_string = 'lorum ipsum 123 bar foo 1. \
               more text 46 here 2. some more text here \
               3. and even more text here 789'
</code></pre>
<p>How could I remove all the digits except for ones trailed with a period using Regex (or any other method)?</p>
<p>Ideal outcome:</p>
<pre><code>some_string = 'lorum ipsum bar foo 1. \
               more text here 2. some more text here \
               3. and even more text here'
</code></pre>
<p>I'm a Regex beginner and have only tried <code>[0-9]\.</code> but this highlights what I want to keep.</p>
<p>I'd like to keep digits in the form of <code>1.</code>, <code>2.</code>, etc</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also use <code>[0-9](?!\.)</code> as your expression. </p>
<p>This is an example of a look ahead, essentially asking if the next character is not a '.' then consider it.</p>
<p>If you are looking to have multiple digits such as 41. then you could also use </p>
<pre><code>[0-9](?![0-9]+\.|\.)
</code></pre>
<p>I would look <a href="https://stackoverflow.com/questions/16721992/regex-to-replace-unless-it-is-preceded-by">here</a> for an example of look behinds and look aheads as well as having a play <a href="https://regex101.com/" rel="nofollow noreferrer">here</a> to test it.</p>
<p><a href="https://regex101.com/r/wwbpoN/1" rel="nofollow noreferrer">Demo</a> </p>
<p>Good luck!</p>
</div>
<div class="post-text" itemprop="text">
<p>We can try matching on the following pattern:</p>
<pre><code>\s*[0-9]+([^.]|$)
</code></pre>
<p>Here, we match some optional whitespace, followed by any number of digits, which in turn are followed by any character <em>other</em> than dot.  We capture this non dot character, and then use it in the replacement.</p>
<pre><code>some_string = 'lorum ipsum 123 bar foo 1. \
               more text 46 here 2. some more text here \
               3. and even more text here 789'
some_string = re.sub(r"\s*[0-9]+([^.]|$)", r"\1", some_string)

print(some_string)

lorum ipsum bar foo 1.                more text here 2. some more text here
            3. and even more text here
</code></pre>
<p><a href="http://rextester.com/SET94089" rel="nofollow noreferrer"><h2>Demo</h2></a></p>
<p>I assume that the digits you want to retain never have a decimal component.</p>
</div>
<span class="comment-copy">What output do you expect for:  <code>"1. I like Python 3.7 but I don't like Python 2.7"</code> ?</span>
<span class="comment-copy">You will be asked "what have you tried?"  You want 1 to many digits that do not follow a period.  You can test your regexes here <a href="https://pythex.org/" rel="nofollow noreferrer">pythex.org</a>, then use the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code> module</a> to substitute  substrings.</span>
<span class="comment-copy">The posted question does not appear to include any attempt at all to solve the problem. StackOverflow expects you to <a href="https://meta.stackoverflow.com/questions/261592/how-much-research-effort-is-expected-of-stack-overflow-users">try to solve your own problem first</a>, as your attempts help us to better understand what you want. Please edit the question to show what you've tried, so as to illustrate a specific problem you're having in a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. For more information, please see <a href="https://stackoverflow.com/help/how-to-ask">How to ask good questions</a> and take the <a href="https://stackoverflow.com/tour">tour</a>.</span>
<span class="comment-copy">So if you had <code>21.42</code> you’d want to keep only <code>1.</code>, not <code>21.</code>? Also, what’s the rule you want that removes the extra space either before or after the <code>123</code> but not both (so you end up with <code>ipsum bar</code> rather than <code>ipsumbar</code> or <code>ipsum  bar</code>? And is the space required, so <code>c64</code> would stay <code>c64</code>, or should it turn into <code>c</code>?</span>
<span class="comment-copy">Thanks @TimBiegeleisen - Edited to reflect this.</span>
<span class="comment-copy">You can simplify your second regex to <code>[0-9](?![0-9]*\.)</code>, <a href="https://regex101.com/r/1HObgT/1" rel="nofollow noreferrer">see here</a>.</span>
<span class="comment-copy">Excellent @TimBiegeleisen Half the steps, still learning regexp myself.</span>
