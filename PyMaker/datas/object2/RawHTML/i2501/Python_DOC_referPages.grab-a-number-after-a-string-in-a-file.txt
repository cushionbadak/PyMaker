<div class="post-text" itemprop="text">
<p>Suppose I have a `sample.txt'</p>
<pre><code>foo: 32
boo: 74
</code></pre>
<p>I'd like to grab what follows <code>foo:</code>. More specifically, I'd like the number following a <em>specific string that occurs once.</em> I can do this unelegantly in about 15 lines of code. What are some options that are 1-5 lines long? If there's a <code>numpy</code> way, that'd cool too since I use it a lot. I'm sure there are a number of one-liners, but I'd like something short and <em>legible</em> (python zen.)</p>
<p>Example: 
<code>test.txt</code> -&gt;</p>
<pre><code>Seven is 7
Eight: not nine
</code></pre>
<p><code>ugly.py</code> -&gt;</p>
<pre><code>def read_pram(fname, hstring):
    fobj = open(fname)
    for line in fobj:
    i = 0
        for elem in line.split():
            if elem == hstring:
                desire = line.split()[i+1]
            i = i + 1
    return desire 

print(read_pram('test.txt', 'Seven is'))
&gt;&gt;&gt; 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate over a file to read it line by line. You can then split those lines at the colon.</p>
<p>Since your file looks a lot like a dictionary, here is a way to parse it to a <code>dict</code>.</p>
<pre><code>with open('sample.txt', 'r') as f:
    d = {}
    for line in f:
        k, v = line.split(':')
        d[k] = int(v)

print(d)
print(d.get('foo'))
</code></pre>
<h2>sample.txt</h2>
<pre><code>foo: 32
boo: 74
</code></pre>
<h2>Output</h2>
<pre><code>{'foo': 32, 'boo': 74}
32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>with(open('sample.txt', 'r') as f:
    for l in f:
        print(l[l.index(':')+2:])
        number = l[l.index(':')+2:]
</code></pre>
<p>This answer works regardless of what comes before the colon.  I just included the print statement in there so you could see what you are getting. The second line in the for loop is what gets the number for each line in your file.</p>
</div>
<div class="post-text" itemprop="text">
<p>Update: Using your script and examples as a guide, improvements suggested in comments, and the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>re</code></a> module:</p>
<pre><code>import re

def read_param(fname, hstring):
    with open(fname, 'r') as f: 
        return re.search(hstring + '\s*(\d+)', ''.join(f.readlines())).group(1)

print(read_param('sample.txt', 'foo: '))
&gt;&gt;&gt; 32

print(read_param('test.txt', 'Seven is'))
&gt;&gt;&gt; 7
</code></pre>
</div>
<span class="comment-copy">I tried an implementation of this, and I believe it crashes unless every line has the string you're looking for.</span>
<span class="comment-copy">you can use <code>re.findall</code> or sub etc: <code>with open(r'sample.txt', 'r') as f:     print(re.findall(r'(?&lt;=^foo:\s).*',''.join(f.readlines())))</code></span>
<span class="comment-copy">files should be opened in a with statement</span>
