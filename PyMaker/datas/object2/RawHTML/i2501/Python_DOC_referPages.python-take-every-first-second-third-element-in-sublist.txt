<div class="post-text" itemprop="text">
<p>I'm using Python 2.7 and have the following:</p>
<p><code>my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</code></p>
<p>I'd like create a 1-d list where the elements are ordered by position in sublist and then order of sublist.  So the correct output for the above list is:</p>
<p><code>[1, 4, 7, 2, 5, 8, 3, 6, 9]</code></p>
<p>Here's my (incorrect) attempt:</p>
<pre><code>def reorder_and_flatten(my_list):
    my_list = [item for sublist in my_list for item in sublist]
    result_nums = []
    for i in range(len(my_list)):
        result_nums.extend(my_list[i::3])
    return result_nums
result = reorder_and_flatten(my_list)
</code></pre>
<p>This flattens my 2-d list and gives me: </p>
<pre><code>[1, 4, 7, 2, 5, 8, 3, 6, 9, 4, 7, 5, 8, 6, 9, 7, 8, 9]
</code></pre>
<p>The first half of this list is correct but the second isn't.</p>
<p>I'd also like my function to be able to handle only 2 sublists.  For instance, if given:</p>
<p><code>[[1, 2, 3], [], [7, 8, 9]</code></p>
<p>the correct output is:</p>
<p><code>[1, 7, 2, 8, 3, 9]</code></p>
<p>Any thoughts?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You're attempting to flatten, and then reorder, which makes things a lot harder than reordering and then flattening.</p>
<p>First, for your initial problem, that's just "unzip", as explained in the docs for <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre><code>&gt;&gt;&gt; my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; list(zip(*my_list))
... [(1, 4, 7), (2, 5, 8), (3, 6, 9)]
</code></pre>
<p>(In Python 2.7, you could just write <code>zip(…)</code> here instead of <code>list(zip(…))</code>, but this way, the same demonstration works identically in both 2.x and 3.x.)</p>
<p>And then, you already know how to flatten that:</p>
<pre><code>&gt;&gt;&gt; [item for sublist in zip(*my_list) for item in sublist]
[1, 4, 7, 2, 5, 8, 3, 6, 9]
</code></pre>
<hr/>
<p>But things get a bit more complicated for your second case, where some of the lists may be empty (or maybe just shorter?).</p>
<p>There's no function that's like <code>zip</code> but skips over missing values. You can write one pretty easily. But instead… there <em>is</em> a function that's like <code>zip</code> but fills in missing values with <code>None</code> (or anything else you prefer), <a href="https://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow noreferrer"><code>izip_longest</code></a>. So, we can just use that, then filter out the <code>None</code> values as we flatten:</p>
<pre><code>&gt;&gt;&gt; my_list = [[1, 2, 3], [], [7, 8, 9]]
&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; list(izip_longest(*my_list))
[(1, None, 7), (2, None, 8), (3, None, 9)]
&gt;&gt;&gt; [item for sublist in izip_longest(*my_list) for item in sublist if item is not None]
[1, 7, 2, 8, 3, 9]
</code></pre>
<p>(In Python 3, the function <code>izip_longest</code> is renamed <code>zip_longest</code>.)</p>
<hr/>
<p>It's worth noting that the <code>roundrobin</code> recipe, as covered by <a href="https://stackoverflow.com/a/52194686/908494">ShadowRanger's answer</a>, is an even nicer solution to this problem, and even easier to use (just copy and paste it from the docs, or <code>pip install more_itertools</code> and use it from there). It <em>is</em> a bit harder to understand—but it's worth taking the time to understand it (and asking for help if you get stuck).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>result = [l[i] for i in range(max(len(v) for v in my_list)) for l in my_list if l]
</code></pre>
<p>i.e.</p>
<pre><code>my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
[l[i] for i in range(max(len(v) for v in my_list)) for l in my_list if l]
# =&gt; [1, 4, 7, 2, 5, 8, 3, 6, 9]

my_list = [[1, 2, 3], [], [7, 8, 9]]
[l[i] for i in range(max(len(v) for v in my_list)) for l in my_list if l]
# =&gt; [1, 7, 2, 8, 3, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">The <code>itertools</code> module's recipes section</a> provides a <code>roundrobin</code> recipe that would do exactly what you want. It produces a generator, but your expected behavior would be seen with:</p>
<pre><code># define roundrobin recipe here
from itertools import cycle, islice
def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
    # Recipe credited to George Sakkis
    pending = len(iterables)
    nexts = cycle(iter(it).next for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))

def reorder_and_flatten(my_list):
    return list(roundrobin(*my_list))
</code></pre>
<p>Your original code's main issue is that it looped over <code>for i in range(len(my_list)):</code>, extending with <code>my_list[i::3]</code>. Problem is, this ends up duplicating elements from index 3 onwards (index 3 was already selected as the second element of the index 0 slice). There are lots of other small logic errors here, so it's much easier to reuse a recipe.</p>
<p>This will be fairly performant, and generalize better than most hand-rolled solutions (it will round robin correctly even if the sublists are of uneven length, and it doesn't require second pass filtering or special handling of any kind to allow <code>None</code> as a value like <code>zip_longest</code> does).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are happy to use a 3rd party library, you can use NumPy and <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html#numpy.ravel" rel="nofollow noreferrer"><code>np.ndarray.ravel</code></a>:</p>
<pre><code>import numpy as np

A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

res_a = A.ravel('F')  # array([1, 4, 7, 2, 5, 8, 3, 6, 9])
</code></pre>
<p>For the case where you have one or more empty lists, you can use <code>filter</code> to remove empty lists:</p>
<pre><code>B = np.array(list(filter(None, [[1, 2, 3], [], [7, 8, 9]])))

res_b = B.ravel('F')  # array([1, 7, 2, 8, 3, 9])
</code></pre>
<p>Both solutions require non-empty sublists to contain the same number of items. If list conversion is necessary you can use, for example, <code>res_a.tolist()</code>.</p>
<p>While these "black box" methods won't teach you much, they will be faster for large arrays than <code>list</code>-based operations. See also <a href="https://stackoverflow.com/questions/993984/what-are-the-advantages-of-numpy-over-regular-python-lists">What are the advantages of NumPy over regular Python lists?</a></p>
</div>
<span class="comment-copy">If <code>None</code> is a legal element, you'd want to make <code>sentinel = object()</code>, and pass <code>sentinel</code> as the <code>fillvalue</code> for <code>zip_longest</code>, as well as testing <code>item is not sentinel</code>, so there is no possibility of dropping any input value.</span>
<span class="comment-copy">@ShadowRanger Yeah, I didn't want to get into that in the answer (since the OP is using all ints), hoping "… (or anything else you prefer) …" would be enough of a hint for future searchers, but it definitely does belong at least in a comment.</span>
<span class="comment-copy">Note: If one of the sublists has a different, but non-zero, length from the others, this code will die with an <code>IndexError</code> (because it blithely indexes to the maximum index of any input sublist).</span>
<span class="comment-copy">You should probably copy-paste the recipe there. Not that it's likely to disappear from the docs any time soon, but still. Also, the OP is using 2.7, so better to link the 2.x docs. But otherwise, yeah, hard to beat this.</span>
<span class="comment-copy">@abarnert: Missed it was Py2. Updated link, copied in recipe for posterity (they have deleted recipes before, so your paranoia is not misplaced; the <code>pairwise</code> recipe used to have a generalized <a href="https://docs.python.org/release/2.3.5/lib/itertools-example.html" rel="nofollow noreferrer"><code>window</code> recipe</a> for arbitrary sized pairings that disappeared for some reason).</span>
<span class="comment-copy">Wow, never noticed that <code>window</code> went away; I thought it just got renamed to <code>windowed</code> (which is the name <code>more_itertools</code> uses, but IIRC, they expanded the original recipe anyway, so it doesn't fail badly if the window size is larger than the iterable). But yeah, it's gone.</span>
