<div class="post-text" itemprop="text">
<p>I am trying to understand python logging by fiddling with <a href="https://docs.python.org/3/howto/logging-cookbook.html#using-logging-in-multiple-modules" rel="nofollow noreferrer">this basic example</a>. I add some lines in that code and reproduced below. Find <code>#added by me</code> comment to find which line I added:</p>
<p><strong>spam_application.py</strong></p>
<pre><code>import logging
import auxiliary_module

# create logger with 'spam_application'
logger = logging.getLogger('spam_application')
logger.setLevel(logging.DEBUG)
# create file handler which logs even debug messages
fh = logging.FileHandler('spam.log')
fh.setLevel(logging.DEBUG)
# create console handler with a higher log level
ch = logging.StreamHandler()
ch.setLevel(logging.ERROR)
# create formatter and add it to the handlers
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
ch.setFormatter(formatter)
# add the handlers to the logger
logger.addHandler(fh)
logger.addHandler(ch)

logger.error("Testing logger err")   #added by me
logger.debug("desting logger debug") #added by me

logger.info('creating an instance of auxiliary_module.Auxiliary')
a = auxiliary_module.Auxiliary()
logger.info('created an instance of auxiliary_module.Auxiliary')
logger.info('calling auxiliary_module.Auxiliary.do_something')
a.do_something()
logger.info('finished auxiliary_module.Auxiliary.do_something')
logger.info('calling auxiliary_module.some_function()')
auxiliary_module.some_function()
logger.info('done with auxiliary_module.some_function()')
</code></pre>
<p><strong>auxiliary_module.py</strong></p>
<pre><code>import logging

# create logger
module_logger = logging.getLogger('spam_application.auxiliary')

class Auxiliary:
    def __init__(self):
        self.logger = logging.getLogger('spam_application.auxiliary.Auxiliary')
        self.logger.info('creating an instance of Auxiliary')

    def do_something(self):
        self.logger.info('doing something')
        a = 1 + 1
        self.logger.debug("a =%s", a)   #added by me
        self.logger.info('done doing something')
        self.logger.error("Testing logger err")     #added by me
        self.logger.debug("testing logger debug")   #added by me
        logging.debug("--&gt;testing logger debug")    #added by me
        logging.error("--&gt;testing logger err")      #added by me

def some_function():
    module_logger.info('received a call to "some_function"')
</code></pre>
<p><strong>Console output</strong></p>
<pre><code>2018-09-07 18:43:57,041 - spam_application - ERROR - Testing logger err
2018-09-07 18:43:57,041 - spam_application.auxiliary.Auxiliary - ERROR - Testing logger err
ERROR:root:--&gt;testing logger err
INFO:spam_application:finished auxiliary_module.Auxiliary.do_something
INFO:spam_application:calling auxiliary_module.some_function()
INFO:spam_application.auxiliary:received a call to "some_function"
INFO:spam_application:done with auxiliary_module.some_function()
</code></pre>
<p><strong>spam.log</strong></p>
<pre><code>2018-09-07 18:43:57,041 - spam_application - ERROR - Testing logger err
2018-09-07 18:43:57,041 - spam_application - DEBUG - desting logger debug
2018-09-07 18:43:57,041 - spam_application - INFO - creating an instance of auxiliary_module.Auxiliary
2018-09-07 18:43:57,041 - spam_application.auxiliary.Auxiliary - INFO - creating an instance of Auxiliary
2018-09-07 18:43:57,041 - spam_application - INFO - created an instance of auxiliary_module.Auxiliary
2018-09-07 18:43:57,041 - spam_application - INFO - calling auxiliary_module.Auxiliary.do_something
2018-09-07 18:43:57,041 - spam_application.auxiliary.Auxiliary - INFO - doing something
2018-09-07 18:43:57,041 - spam_application.auxiliary.Auxiliary - DEBUG - a =2
2018-09-07 18:43:57,041 - spam_application.auxiliary.Auxiliary - INFO - done doing something
2018-09-07 18:43:57,041 - spam_application.auxiliary.Auxiliary - ERROR - Testing logger err
2018-09-07 18:43:57,041 - spam_application.auxiliary.Auxiliary - DEBUG - testing logger debug
2018-09-07 18:43:57,042 - spam_application - INFO - finished auxiliary_module.Auxiliary.do_something
2018-09-07 18:43:57,042 - spam_application - INFO - calling auxiliary_module.some_function()
2018-09-07 18:43:57,042 - spam_application.auxiliary - INFO - received a call to "some_function"
2018-09-07 18:43:57,042 - spam_application - INFO - done with auxiliary_module.some_function()
</code></pre>
<p><strong>Doubts</strong></p>
<ol>
<li><p>Why I get following lines in console?:</p>
<pre><code>INFO:spam_application:finished auxiliary_module.Auxiliary.do_something
INFO:spam_application:calling auxiliary_module.some_function()
INFO:spam_application.auxiliary:received a call to "some_function"
INFO:spam_application:done with auxiliary_module.some_function()
</code></pre></li>
<li><p>Why those last five lines in console do not follow format of others?</p></li>
<li><p>Why there is no</p>
<pre><code>DEBUG:root:--&gt;testing logger debug
</code></pre></li>
<li><p>Why these lines not in file:</p>
<pre><code>DEBUG:root:--&gt;testing logger debug
ERROR:root:--&gt;testing logger err
</code></pre></li>
<li><p>Basically how child module logging behave when I call <code>logging.xyz()</code> instead of <code>logging.getLogger('abc').xyz()</code> inside child module (here <code>auxiliary_module</code>)?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>1, 2, 3, 4.
The nature of your problem is that you use two loggers. The first one you have created with the code <code>logger = logging.getLogger('spam_application')</code>. The second one is root logger. You started it with the code <code>logging.debug("--&gt;testing logger debug")</code>. Usually you need multiple loggers to distinguish between sources of logging messages. Keep track of your loggers and do not mix them.</p>
<p>To take an easy start with logging in python you may use only root logger. You can configure it with <code>logging.basicConfig(...)</code> and create log messages with, for example, <code>logging.info(...)</code>.</p>
<p>5.
It behaves just fine. You do not need any extra actions to make logging work correctly. Although you may experience difficulties with logging across multiple threads and processes.</p>
</div>
<span class="comment-copy">Will love a bit more pointwise answers. Let me guess pointwise answers myself from your answer. Just confirm if am right. <b>(0)</b> <code>logging.debug(..)</code> enables root logger <b>(1),(2)</b> spam_application.py's log calls are propagated to root logger &amp; hence those four lines are logged by root logger in its own format <b>(3)</b> <code>DEBUG:root:--&gt;testing logger debug</code> is not printed because root logger has ERROR level <b>(4)</b> Those lines are not there in file, because there is no file handler on root logger, but its on <code>spam_application</code> logger.</span>
<span class="comment-copy">@Mahesha999 Yes, you right. The point here is the output is the result of mixture of two loggers. You can easily change/tune them to know which logger gives the particular message.</span>
