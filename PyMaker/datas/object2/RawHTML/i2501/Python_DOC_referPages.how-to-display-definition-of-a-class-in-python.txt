<div class="post-text" itemprop="text">
<p>I was going through this question : <a href="https://stackoverflow.com/questions/24095166/how-do-i-return-the-definition-of-a-class-in-python">How do I return the definition of a class in python?</a></p>
<p>But I am unable to display the class definition. I am getting the below error:</p>
<pre><code>&gt;&gt;&gt; class A:
...     pass
...
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; source_text = inspect.getsource(A)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Users\**\Python\Python36\lib\inspect.py", line 968, in getsource
    lines, lnum = getsourcelines(object)
  File "C:\Users\**\Python\Python36\lib\inspect.py", line 955, in getsourcelines
    lines, lnum = findsource(object)
  File "C:\Users\**\Python\Python36\lib\inspect.py", line 768, in findsource
    file = getsourcefile(object)
  File "C:\Users\**\Python\Python36\lib\inspect.py", line 684, in getsourcefile
    filename = getfile(object)
  File "C:\Users\**\Python\Python36\lib\inspect.py", line 654, in getfile
    raise TypeError('{!r} is a built-in class'.format(object))
TypeError: &lt;module '__main__' (&lt;_frozen_importlib_external.SourceFileLoader object at 0x0000026A79293F60&gt;)&gt; is a built-in class
&gt;&gt;&gt;
</code></pre>
<p>Can someone please advise what am I doing wrong here? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>inspect.getsource()</code> function only works if there is a <em>text file available to load the source code</em>.</p>
<p>You typed the definition of the class into the interactive interpreter, which doesn't keep the original source around when compiling that source into in-memory class and code objects.</p>
<p>Put your class definition into a module, import the module, and <em>then</em> use <code>inspect.getsource()</code>.</p>
<p><code>inspect.getsource()</code> works by first finding the module for a given object (for classes, by looking at the <code>ClassObj.__module__</code> attribute for the module name, then getting the module via <code>sys.modules[modulename]</code>) then seeing if the module has a <code>__file__</code> attribute from which a readable source file can be determined. If there is such a filename and it can be read, then the <code>inspect</code> module reads that file to then search for the <code>class ClassName:</code> line and giving you all lines from that point on with same or deeper indentation. The interactive interpreter executes everything in the <code>__main__</code> module and there is no <code>__file__</code> attribute for the interpreter, so any attempts at loading source code for objects defined there will simply fail.</p>
<p>If you just wanted to know what members the class defines, use <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer"><code>dir()</code></a> or <a href="https://docs.python.org/3/library/functions.html#help" rel="nofollow noreferrer"><code>help()</code></a> on the object instead. You don't need to see the full source code for that information.</p>
</div>
<span class="comment-copy">Does python 3 even have old-style classes?</span>
<span class="comment-copy">Why do you need to see the definition of a class you just defined yourself?</span>
<span class="comment-copy">You can't show the definition because there is no source code left to retrieve.</span>
<span class="comment-copy">@Chillie, I am not sure what do you mean by old style classes. I can define nad use classes in python3</span>
<span class="comment-copy">@ jonrsharpe, I am just curious about concept of displaying the class definition. Let's say I am in the middle of the terminal and want to know the members of the class without living the python shell, I am new to python and trying to explore it</span>
<span class="comment-copy">thanks for the updates. Appreciate it and Upvoted.</span>
<span class="comment-copy">Accepting this as an answer, able to retrive the source code when defined in another file. Thanks a lot. &gt;&gt;&gt; import mod1 &gt;&gt;&gt; import inspect &gt;&gt;&gt; source_text = inspect.getsource(mod1.MyClass) &gt;&gt;&gt; print(source_text) class MyClass:     variable = "blah"      def function(self):         print("This is a message inside the class.")  &gt;&gt;&gt;</span>
