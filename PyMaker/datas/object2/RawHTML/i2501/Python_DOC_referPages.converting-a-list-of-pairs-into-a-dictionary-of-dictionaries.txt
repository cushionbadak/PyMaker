<div class="post-text" itemprop="text">
<p>This question was previously asked here with an egregious typo: <a href="https://stackoverflow.com/questions/52195887/counting-unique-pairs-of-numbers-into-a-python-dictionary">Counting "unique pairs" of numbers into a python dictionary?</a></p>
<p>This is an algorithmic problem, and I don't know of the most efficient solution. My idea would be to somehow cache values in a list and enumerate pairs...but that would be so slow. I'm guessing there's something useful from <code>itertools</code>. </p>
<p>Let's say I have a list of integers whereby are never repeats:</p>
<pre><code>list1 = [2, 3]   
</code></pre>
<p>In this case, there is a unique pair 2-3 and 3-2, so the dictionary should be:</p>
<pre><code>{2:{3: 1}, 3:{2: 1}}
</code></pre>
<p>That is, there is 1 pair of 2-3 and 1 pair of 3-2. </p>
<p>For larger lists, the pairing is the same, e.g.</p>
<pre><code>list2 = [2, 3, 4]
</code></pre>
<p>has the dicitonary</p>
<pre><code>{2:{3:1, 4:1}, 3:{2:1, 4:1}, 4:{3:1, 2:1}}
</code></pre>
<p>(1) Once the size of the lists become far larger, how would one algorithmically find the "unique pairs" in this format using python data structures?</p>
<p>(2) I mentioned that the lists cannot have repeat integers, e.g. </p>
<pre><code>[2, 2, 3]
</code></pre>
<p>is impossible, as there are two 2s. </p>
<p>However, one may have a list of lists:</p>
<pre><code>list3 = [[2, 3], [2, 3, 4]] 
</code></pre>
<p>whereby the dictionary must be </p>
<pre><code>{2:{3:2, 4:1}, 3:{2:2, 4:1}, 4:{2:1, 3:1}}
</code></pre>
<p>as there are two pairs of 2-3 and 3-2. How would one "update" the dictionary given multiple lists within a list? </p>
<p>EDIT: My ultimate use case is, I want to iterate through hundreds of lists of integers, and create a single dictionary with the "counts" of pairs. Does this make sense? There might be another data structure which is more useful.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the nested list example, you can do the following, making use of <code>itertools.permutations</code> and <code>dict.setdefault</code>:</p>
<pre><code>from itertools import permutations

list3 = [[2, 3], [2, 3, 4]]

d = {}
for l in list3:
    for a, b in permutations(l, 2):
        d[a][b] = d.setdefault(a, {}).setdefault(b, 0) + 1

# {2: {3: 2, 4: 1}, 3: {2: 2, 4: 1}, 4: {2: 1, 3: 1}}
</code></pre>
<p>For flat lists <code>l</code>, use only the inner loop and omit the outer one</p>
</div>
<div class="post-text" itemprop="text">
<p>For this example I'll just use a list with straight numbers and no nested list:</p>
<pre><code>values = [3, 2, 4]
result = dict.from_keys(values)
for key, value in result.items():
    value = {}
    for num in values:
        if num != key:
            value[num] = 1
</code></pre>
<p>This creates a dict with each number as a key. Now in each key, make the value a nested dict who's contents are <code>num: 1</code> for each number in the original values list if it isn't the name of the key that we're in </p>
</div>
<div class="post-text" itemprop="text">
<p>use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a> with <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">permutations</a></p>
<pre><code>from collections import defaultdict
from itertools import permutations

d = defaultdict(dict)
for i in [x for x in permutations([4,2,3])]:
    d[i[0]] = {k: 1 for k in i[1:]}
</code></pre>
<p>output is </p>
<pre><code>In [22]: d
Out[22]: defaultdict(dict, {2: {3: 1, 4: 1}, 4: {2: 1, 3: 1}, 3: {2: 1, 4: 1}})
</code></pre>
<p>for inherit list of lists <a href="https://stackoverflow.com/a/52206554/8060120">https://stackoverflow.com/a/52206554/8060120</a></p>
</div>
<span class="comment-copy">You can't have duplicate keys in a dictionary, so your desired results aren't going to happen.</span>
<span class="comment-copy">@DSM I understand; let me edit</span>
<span class="comment-copy">keys in the dictionary are unique</span>
<span class="comment-copy">You might get sth like: <code>{2:{3: 2, 4: 1}, 3:{2: 2, 4: 1}, 4:{3: 1, 2: 1}}</code> which would make more sense.</span>
<span class="comment-copy">@DSM I have edited the question; Apologies, I wasn't thinking clearly</span>
<span class="comment-copy">this is simply beautiful +1. For flat lists one can nest them to leave the code intact. like <code>lst = [lst] if not isinstance(lst[0], list) else lst</code>.</span>
<span class="comment-copy">what is the reason for the set?</span>
<span class="comment-copy">it is dict <code>k: 1</code></span>
<span class="comment-copy">I am talking about the <code>{x for x in permutations([4,2,3])}</code></span>
<span class="comment-copy">Also the <code>defaultdict</code> has to be initialized somewhere.You are probably missing a line</span>
<span class="comment-copy">thank you for default, and you are roght the set is overrcoding while i search the solution.</span>
