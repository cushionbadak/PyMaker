<div class="post-text" itemprop="text">
<p>What is the best way to go about calling a function given a string with the function's name in a Python program.  For example, let's say that I have a module <code>foo</code>, and I have a string whose content is <code>"bar"</code>. What is the best way to call <code>foo.bar()</code>?</p>
<p>I need to get the return value of the function, which is why I don't just use <code>eval</code>. I figured out how to do it by using <code>eval</code> to define a temp function that returns the result of that function call, but I'm hoping that there is a more elegant way to do this.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming module <code>foo</code> with method <code>bar</code>:</p>
<pre><code>import foo
method_to_call = getattr(foo, 'bar')
result = method_to_call()
</code></pre>
<p>As far as that goes, lines 2 and 3 can be compressed to:</p>
<pre><code>result = getattr(foo, 'bar')()
</code></pre>
<p>if that makes more sense for your use case.  You can use <code>getattr</code> in this fashion on class instance bound methods, module-level methods, class methods... the list goes on.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>locals()["myfunction"]()
</code></pre>
<p>or</p>
<pre><code>globals()["myfunction"]()
</code></pre>
<p><a href="http://docs.python.org/library/functions.html#locals" rel="noreferrer">locals</a> returns a dictionary with a current local symbol table. <a href="http://docs.python.org/library/functions.html#globals" rel="noreferrer">globals</a> returns a dictionary with global symbol table.</p>
</div>
<div class="post-text" itemprop="text">
<p>Patrick's solution is probably the cleanest.
If you need to dynamically pick up the module as well, you can import it like:</p>
<pre><code>module = __import__('foo')
func = getattr(module, 'bar')
func()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just a simple contribution. If the class that we need to instance is in the same file, we can use something like this:</p>
<pre><code># Get class from globals and create an instance
m = globals()['our_class']()

# Get the function (from the instance) that we need to call
func = getattr(m, 'function_name')

# Call it
func()
</code></pre>
<p>For example:</p>
<pre><code>class A:
    def __init__(self):
        pass

    def sampleFunc(self, arg):
        print('you called sampleFunc({})'.format(arg))

m = globals()['A']()
func = getattr(m, 'sampleFunc')
func('sample arg')

# Sample, all on one line
getattr(globals()['A'](), 'sampleFunc')('sample arg')
</code></pre>
<p>And, if not a class:</p>
<pre><code>def sampleFunc(arg):
    print('you called sampleFunc({})'.format(arg))

globals()['sampleFunc']('sample arg')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given a string, with a complete python path to a function, this is how I went about getting the result of said function:</p>
<pre><code>import importlib
function_string = 'mypackage.mymodule.myfunc'
mod_name, func_name = function_string.rsplit('.',1)
mod = importlib.import_module(mod_name)
func = getattr(mod, func_name)
result = func()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best answer according to the <a href="https://docs.python.org/3/faq/programming.html#how-do-i-use-strings-to-call-functions-methods" rel="noreferrer">Python programming FAQ</a> would be:</p>
<pre><code>functions = {'myfoo': foo.bar}

mystring = 'myfoo'
if mystring in functions:
    functions[mystring]()
</code></pre>
<blockquote>
<p>The primary advantage of this technique is that the strings do not need to match the names of the functions. This is also the primary technique used to emulate a case construct</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The answer (I hope) no one ever wanted</p>
<p>Eval like behavior</p>
<pre><code>getattr(locals().get("foo") or globals().get("foo"), "bar")()
</code></pre>
<p>Why not add auto-importing</p>
<pre><code>getattr(
    locals().get("foo") or 
    globals().get("foo") or
    __import__("foo"), 
"bar")()
</code></pre>
<p>In case we have extra dictionaries we want to check</p>
<pre><code>getattr(next((x for x in (f("foo") for f in 
                          [locals().get, globals().get, 
                           self.__dict__.get, __import__]) 
              if x)),
"bar")()
</code></pre>
<p>We need to go deeper</p>
<pre><code>getattr(next((x for x in (f("foo") for f in 
              ([locals().get, globals().get, self.__dict__.get] +
               [d.get for d in (list(dd.values()) for dd in 
                                [locals(),globals(),self.__dict__]
                                if isinstance(dd,dict))
                if isinstance(d,dict)] + 
               [__import__])) 
        if x)),
"bar")()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For what it's worth, if you needed to pass the function (or class) name and app name as a string, then you could do this:</p>
<pre><code>myFnName  = "MyFn"
myAppName = "MyApp"
app = sys.modules[myAppName]
fn  = getattr(app,myFnName)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this. While this still uses eval, it only uses it to <em>summon the function from the current context</em>. Then, you have the real function to use as you wish.</p>
<p>The main benefit for me from this is that you will get any eval-related errors at the point of summoning the function. Then you will get <em>only</em> the function-related errors when you call.</p>
<pre><code>def say_hello(name):
    print 'Hello {}!'.format(name)

# get the function by name
method_name = 'say_hello'
method = eval(method_name)

# call it like a regular function later
args = ['friend']
kwargs = {}
method(*args, **kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>none of what was suggested helped me. I did discover this though.</p>
<pre><code>&lt;object&gt;.__getattribute__(&lt;string name&gt;)(&lt;params&gt;)
</code></pre>
<p>I am using python 2.66 </p>
<p>Hope this helps</p>
</div>
<div class="post-text" itemprop="text">
<p>As this question <a href="https://stackoverflow.com/questions/16642145/how-to-dynamically-call-methods-within-a-class-using-method-name-assignment-to-a">How to dynamically call methods within a class using method-name assignment to a variable [duplicate]</a> marked as a duplicate as this one, I am posting a related answer here:</p>
<p>The scenario is, a method in a class want to call another method on the same class dynamically, I have added some details to original example which offers some wider scenario and clarity:</p>
<pre><code>class MyClass:
def __init__(self, i):
    self.i = i

def get(self):
    func = getattr(MyClass, 'function{}'.format(self.i))
    func(self, 12)   # This one will work
    # self.func(12)    # But this does NOT work.


def function1(self, p1):
    print('function1: {}'.format(p1))
    # do other stuff

def function2(self, p1):
    print('function2: {}'.format(p1))
    # do other stuff


if __name__ == "__main__":
    class1 = MyClass(1)
    class1.get()
    class2 = MyClass(2)
    class2.get()
</code></pre>
<blockquote>
<p>Output (Python 3.7.x)</p>
<p>function1: 12 </p>
<p>function2: 12</p>
</blockquote>
</div>
<span class="comment-copy">hasattr or getattr can be used to determine if a function is defined.  I had a database mapping (eventType and handling functionName) and I wanted to make sure I never "forgot" to define an event handler in my python</span>
<span class="comment-copy">This works if you already know the module name. However, if you want the user to provide the module name as a string, this won't work.</span>
<span class="comment-copy">If you need to avoid a NoneType is not callable exception, you could also employ the three-argument form of getattr: getattr(foo, 'bar', lambda: None). I apologize for the formatting; the stackexchange android app is apparently terrible.</span>
<span class="comment-copy">See also the answer provided by @sastanin if you only care for example about your local/current module's functions.</span>
<span class="comment-copy">@Jane <code>foo</code> isn't a real module here, it is a placeholder for any module. Sorry for the confusion. I would consider editing the answer to use a real module, but it's been so heavily up-voted I'm not sure I should at this point.</span>
<span class="comment-copy">This method with globals/locals is good if the method you need to call is defined in the same module you are calling from.</span>
<span class="comment-copy">@Joelmob is there any other way to get an object by string out of the root namespace?</span>
<span class="comment-copy">@NickT I am only aware of these methods, I don't think there are any others that fill same function as these, at least I can't think of a reason why there should be more.</span>
<span class="comment-copy">I've got a reason for you (actually what led me here):  Module A has a function F that needs to call a function by name.  Module B imports Module A, and invokes function F with a request to call Function G, which is defined in Module B.  This call fails because, apparently, function F only runs with the globals that are defined in Module F - so globals()['G'] = None.</span>
<span class="comment-copy">I do not understand that last comment. __import__ has its own right and the next sentence in the mentioned docs says: "Direct use of __import__() is rare, except in cases where you want to import a module whose name is only known at runtime". So: +1 for the given answer.</span>
<span class="comment-copy">Use <code>importlib.import_module</code>. The official docs say about <code>__import__</code>: "This is an advanced function that is not needed in everyday Python programming, unlike importlib.import_module()." <a href="http://docs.python.org/2/library/functions.html#__import__" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#__import__</a></span>
<span class="comment-copy">@glarrain As long as you're ok with only support 2.7 and up.</span>
<span class="comment-copy">@Xiong Chaimiov, <code>importlib.import_module</code> is supported in 3.6 .  See <a href="https://docs.python.org/3.6/library/importlib.html#importlib.import_module" rel="nofollow noreferrer">docs.python.org/3.6/library/…</a></span>
<span class="comment-copy">@cowlinator Yes, 3.6 is part of "2.7 and up", both in strict versioning semantics and in release dates (it came about six years later).  It also didn't exist for three years after my comment. ;)  In the 3.x branch, the module has been around since 3.1.  2.7 and 3.1 are now pretty ancient; you'll still find servers hanging around that only support 2.6, but it's probably worth having importlib be the standard advice nowadays.</span>
<span class="comment-copy">This helped me. Its a lightweight version of <code>__import__</code> function.</span>
<span class="comment-copy">Just a bit more generic is <code>handler = getattr(sys.modules[__name__], myFnName)</code></span>
<span class="comment-copy">This would be risky. string can have anything and eval would end up eval-ling it without any consideration.</span>
<span class="comment-copy">Sure, you must be mindful of the context you are using it in, whether this will be appropriate or not, given those risks.</span>
<span class="comment-copy">A function should not be responsible for validating it's parameters - that's the job of a different function. Saying that it's risky to use eval with a string is saying that use of every function is risky.</span>
<span class="comment-copy">You should never use <code>eval</code> unless strictly necessary. <code>getattr(__module__, method_name)</code> is a much better choice in this context.</span>
<span class="comment-copy">In what aspect is this better than getattr() ?</span>
<span class="comment-copy">Exactly what i wanted. Works like a charm! Perfect!!  <code>self.__getattribute__('title')</code> is equal to <code>self.title</code></span>
<span class="comment-copy"><code>self.__getattribute__('title')</code> doesn't work in any cases(don't know why) afterall, but <code>func = getattr(self, 'title'); func();</code> does. So, maybe is better to use <code>getattr()</code> instead</span>
<span class="comment-copy">Can people who don't know python please stop upvoting this junk? Use <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> instead.</span>
