<div class="post-text" itemprop="text">
<p>I have already asked a regex question regarding replacing specific patterns (<a href="https://stackoverflow.com/q/51982073/9685648">Regex: Match a specific pattern, exclude if match is in a specific context</a>). This is all done for preprocessing text data for training.</p>
<p>Now I would like to use regex to replace anything except unicode letters in a pandas data frame. I have used</p>
<ul>
<li><a href="https://regex101.com/" rel="nofollow noreferrer">https://regex101.com/</a></li>
<li><a href="https://regexr.com/" rel="nofollow noreferrer">https://regexr.com/</a></li>
</ul>
<p>to get the regex expression which seems to solve my problem <code>\p{^L}+</code>. I realised later that I have found the expression which would work in Perl (Perl Compatible Regular Expressions [PCRE]) not necessarily in Python. I have found the <a href="https://pypi.org/project/regex/2018.08.29/" rel="nofollow noreferrer">regex package</a> which supports this expression too. However, pandas doesn't seem to support regex yet or I have used it the wrong way:</p>
<pre><code>import regex
import pandas as pd
df = pd.DataFrame({"text": ["Room: 25m²", "I have eaten ¼ of the cake."]})
df["text"] = df["text"].str.replace(regex.compile("\p{^L}+"), " ")

# Returns a TypeError: object of type '_regex.Pattern' has no len()
</code></pre>
<p>Therefore I have tried to find ways to use the re package. I have found an <a href="https://stackoverflow.com/a/6314634">answer</a> here. So I have used it this way:</p>
<pre><code>import re
import pandas as pd
df = pd.DataFrame({"text": ["Room: 25m²", "I have eaten ¼ of the cake."]})
df["text"] = df["text"].str.replace("[\W\d_]", " ")
</code></pre>
<p>It does replace a lot of special characters. It doesn't replace the expression with m to the power of 2 or the expression where we have a fraction. Both characters which I wouldn't see as letters but rather numerics or special characters in unicode. So how can I deal with those special characters? Is it possible with the re package? I wouldn't like to use specific unicodes to match those cases. If possible a general solution would be appreciated. </p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>[\W\d_]</code> is a regex that matches any non-word char (any char not matched with <code>\w</code>), it matches digits with <code>\d</code> and a <code>_</code>. Note that <code>\d</code> in a Unicode aware <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">Python 3 regex</a> only matches <code>\p{Nd}</code> (Number, decimal):</p>
<blockquote>
<p>Matches any Unicode decimal digit (that is, any character in Unicode character category <code>[Nd]</code>).</p>
</blockquote>
<p>The chars this pattern does not remove in your string belong to the <code>\p{No}</code> Unicode category (numbers, other).</p>
<p>So, if you plan to also remove all those chars from <code>\p{No}</code>, you need to add them to the pattern:</p>
<pre><code>r'[\u00B2\u00B3\u00B9\u00BC-\u00BE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835\U00010107-\U00010133\U00010175-\U00010178\U0001018A\U0001018B\U000102E1-\U000102FB\U00010320-\U00010323\U00010858-\U0001085F\U00010879-\U0001087F\U000108A7-\U000108AF\U000108FB-\U000108FF\U00010916-\U0001091B\U000109BC\U000109BD\U000109C0-\U000109CF\U000109D2-\U000109FF\U00010A40-\U00010A47\U00010A7D\U00010A7E\U00010A9D-\U00010A9F\U00010AEB-\U00010AEF\U00010B58-\U00010B5F\U00010B78-\U00010B7F\U00010BA9-\U00010BAF\U00010CFA-\U00010CFF\U00010E60-\U00010E7E\U00011052-\U00011065\U000111E1-\U000111F4\U0001173A\U0001173B\U000118EA-\U000118F2\U00011C5A-\U00011C6C\U00016B5B-\U00016B61\U0001D360-\U0001D371\U0001E8C7-\U0001E8CF\U0001F100-\U0001F10C\W\d_]+'
</code></pre>
<p>See the <a href="https://regex101.com/r/UVCVAV/1/" rel="nofollow noreferrer">regex demo</a>.</p>
<p>You may see the chars listed on <a href="http://www.fileformat.info/info/unicode/category/No/list.htm" rel="nofollow noreferrer">this page</a> page.</p>
<p>Also, be aware of a <em>Number, letter</em> category, see the <a href="http://www.fileformat.info/info/unicode/category/Nl/list.htm" rel="nofollow noreferrer"><code>\p{Nl}</code> char list here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should work for you:</p>
<pre><code>import regex
import pandas as pd
df = pd.DataFrame({"text": ["Room: 25m²", "I have eaten ¼ of the cake."]})


regex_pat = re.compile(r"[^a-zA-Z\s]")
df["text"] = df["text"].str.replace(regex_pat, "")
</code></pre>
<p>Output:</p>
<pre><code>0                       Room m
1    I have eaten  of the cake
Name: text, dtype: object
</code></pre>
</div>
<span class="comment-copy"><code>.str.replace(regex.compile("\p{L}+")</code> would remove all the Unicode letters. I think you wanted to use <code>\P{L}</code> in a PCRE regex. Please clarify what you want to obtain from <code>"Room: 25m²", "I have eaten ¼ of the cake."</code> Maybe <code>Room m I have eaten of the cake</code>? The question is, what kind of chars do you want to remove that are also matched with <code>\w</code> but do not belong to <code>\d</code>? The <code>²</code> and <code>¼</code> belong to <code>\p{No}</code> that is not matched with <code>\d</code>.</span>
<span class="comment-copy">You are right. I need to negate the expression. <code>\p{^L}+</code> is what I want. Sorry for the confusion. I have edited the question. I want to obtain all letters. <code>"Room: 25m²", "I have eaten ¼ of the cake."</code> would be <code>"Room m", "I have eaten of the cake"</code>.</span>
<span class="comment-copy">Why are you importing <code>re</code> if you're not using it?</span>
<span class="comment-copy">Try <a href="https://regex101.com/r/UVCVAV/1" rel="nofollow noreferrer">regex101.com/r/UVCVAV/1</a>. It is a bit long, but it handles all <code>\p{No}</code> chars. If you care only about BMP plane, remove all ranges with <code>\UXXXXXXXX</code> chars.</span>
<span class="comment-copy">This seems to work. Thank you very much Wiktor!</span>
