<div class="post-text" itemprop="text">
<p>I would like to know if its somehow possible to return a single random character from a regex pattern, written in short term.</p>
<p>So here is my case..</p>
<p>I have created some Regex patterns contained in an Enum:</p>
<pre><code>import random
from _operator import invert
from enum import Enum
import re

class RegexExpression(Enum):
    LOWERCASE = re.compile('a-z')
    UPPERCASE = re.compile('A-Z')
    DIGIT = re.compile('\d')
    SYMBOLS = re.compile('\W')
</code></pre>
<p>I want for these to be returned as a string containing all the characters that the regex expresses, based on this method below:</p>
<pre><code>def create_password(symbol_count, digit_count, lowercase_count, uppercase_count):
    pwd = ""
    for i in range(1, symbol_count):
        pwd.join(random.choice(invert(RegexExpression.SYMBOLS.value)))
    for i in range(1, digit_count):
        pwd.join(random.choice(invert(RegexExpression.DIGIT.value)))
    for i in range(1, lowercase_count):
        pwd.join(random.choice(invert(RegexExpression.LOWERCASE.value)))
    for i in range(1, uppercase_count):
        pwd.join(random.choice(invert(RegexExpression.UPPERCASE.value)))
    return pwd
</code></pre>
<p>I have tried several thing, but the only option I find possible is using an Enum containing long regex patterns, or strings like in the below example:</p>
<pre><code>LOWERCASE = "abcdefghijklmnopqrstuvwxyz"
</code></pre>
<p>... And so on with the other variables in use.</p>
<p>Any suggestions or solutions to this scenario?</p>
<p>--EDIT--</p>
<p>Mad Physicist brought the solution for my issue - Thanks a lot!
Here is the working code:</p>
<pre><code>def generate_password(length):
     tmp_length = length
     a = random.randint(1, length - 3)
     tmp_length -= a
     b = random.randint(1, length - a - 2)
     tmp_length -= b
     c = random.randint(1, length - a - b - 1)
     tmp_length -= c
     d = tmp_length

     pwd = ""
     for i in range(0, a):
         pwd += random.choice(string.ascii_lowercase)
     for i in range(0, b):
         pwd += random.choice(string.ascii_uppercase)
     for i in range(0, c):
         pwd += random.choice(string.digits)
     for i in range(0, d):
         pwd += random.choice(string.punctuation)

     pwd = ''.join(random.sample(pwd, len(pwd)))
     return pwd
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/string.html" rel="nofollow noreferrer"><code>string</code></a> module has all the definitions you want.</p>
<ul>
<li>Instead of <code>RegexExpression.LOWERCASE</code> use <a href="https://docs.python.org/3/library/string.html#string.ascii_lowercase" rel="nofollow noreferrer"><code>string.ascii_lowercase</code></a></li>
<li>Instead of <code>RegexExpression.UPPERCASE</code> use <a href="https://docs.python.org/3/library/string.html#string.ascii_uppercase" rel="nofollow noreferrer"><code>string.ascii_uppercase</code></a></li>
<li>Instead of <code>RegexExpression.DIGIT</code> use <a href="https://docs.python.org/3/library/string.html#string.digits" rel="nofollow noreferrer"><code>string.digits</code></a></li>
<li><code>RegexExpression.SYMBOLS</code> is probably closest to <a href="https://docs.python.org/3/library/string.html#string.punctuation" rel="nofollow noreferrer"><code>string.punctuation</code></a></li>
</ul>
<p>RegEx is not really suitable for this task. Expressions are used for checking if a character belongs to a class. I'm not aware of a good method to check the spec of a character class without getting into source code/implementation details.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's a recipe in the secrets module of the manual that may be a better approach:</p>
<p><a href="https://docs.python.org/3.6/library/secrets.html#recipes-and-best-practices" rel="nofollow noreferrer">https://docs.python.org/3.6/library/secrets.html#recipes-and-best-practices</a></p>
<pre><code>from secrets import choice
import string
alphabet = string.ascii_letters + string.digits
while True:
    password = ''.join(choice(alphabet) for i in range(10))
    if (any(c.islower() for c in password)
        and any(c.isupper() for c in password)
            and sum(c.isdigit() for c in password) &gt;= 3):
        break

print(password)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you 100% insist on using regex, you need a function to convert arbitrary character classes into strings. I'm sure there's an easier way to do this, but here is a general purpose routine:</p>
<pre><code>from operator import methodcaller
from re import finditer

UNICODE_MAX = 0xFFFF
UNICODE = ''.join(map(chr, range(UNICODE_MAX + 1)))
ASCII = UNICODE [:128]

def class_contents(pattern, unicode=True, printable=True):
    base = UNICODE if unicode else ASCII
    result = map(methodcaller('group'), finditer(pattern, base))
    if printable:
        result = filter(str.isprintable, result)
    return ''.join(result)
</code></pre>
<p>Now you can just apply this function to your enum values to get the string of available characters.</p>
<p>Here is an IDEOne Link to demo the results: <a href="https://ideone.com/Rh4xKI" rel="nofollow noreferrer">https://ideone.com/Rh4xKI</a>. Notice that the regex for <code>LOWERCASE</code> and <code>UPPERCASE</code> need to be surrounded by square brackets or they will be literal three-character strings, not character classes.</p>
</div>
<span class="comment-copy">Use the string module?</span>
<span class="comment-copy">Upvote would be nice. You've got the rep now :)</span>
<span class="comment-copy">Also, you have an error in your regex. I've addressed it in my second answer.</span>
