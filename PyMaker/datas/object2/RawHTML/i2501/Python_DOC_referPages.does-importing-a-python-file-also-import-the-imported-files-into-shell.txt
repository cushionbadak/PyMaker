<div class="post-text" itemprop="text">
<p>I am running Python 3.6.2 and trying to import other files into my shell prompt as needed. I have the following code inside my_file.py.</p>
<pre><code>import numpy as np
def my_file(x):
    s = 1/(1+np.exp(-x))
    return s
</code></pre>
<p>From my 3.6.2 shell prompt I call</p>
<pre><code>from my_file import my_file
</code></pre>
<p>But in my shell prompt if I want to use the library numpy I still have to import numpy into the shell prompt even though I have imported a file that imports numpy. Is this functionality by design? Or is there a way to import numpy once?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>import</code> has three completely separate effects:</p>
<ol>
<li><strong>If</strong> the module has not yet been imported in the current process (by any script or module), execute its code (usually from disk) and store a module object with the resulting classes, functions, and variables.</li>
<li><strong>If</strong> the module is in a package, (import the package first, and) store the new module as an attribute on the containing package (so that references like <code>scipy.special</code> work).</li>
<li>Assign the module ultimately imported to a <strong>variable</strong> in the invoking scope.  (<code>import foo.bar</code> assigns <code>foo</code>; <code>import baz.quux as frob</code> assigns <code>baz.quux</code> to the name <code>frob</code>.)</li>
</ol>
<p>The first two effects are shared among all clients, while the last is completely local.  This is by design, as it avoids accidentally using a dependency of an imported module without making sure it’s available (which would break later if the other modules changed what they imported).  It also lets different clients use different shorthands.</p>
<p>As <a href="https://stackoverflow.com/questions/52250013/does-importing-a-python-file-also-import-the-imported-files-into-shell#comment91448234_52250013">hpaul noted</a>, you <em>can</em> use another module’s imports with a qualified name, but this is abusing the module’s interface just like any other use of a private name unless (like <code>six.moves</code>, for example, or <code>os.path</code> which is actually not a module at all) the module <em>intends</em> to publish names for other modules.</p>
</div>
<span class="comment-copy">You have imported it into an other namespace. That is design. You can use it in that namespace only unless you import it elsewhere.</span>
<span class="comment-copy">You could reference it as <code>my_file.np</code>.  But doing your own <code>import numpy</code> doesn't cost anything extra in time or memory usage.   Python checks a cache for already imported modules: <a href="https://docs.python.org/3/reference/import.html#the-module-cache" rel="nofollow noreferrer">docs.python.org/3/reference/import.html#the-module-cache</a></span>
<span class="comment-copy">@hpaulj - So in the Python shell you are saying when I import my_file.py that I am creating a new namespace?  And that Python is smart enough to not import it twice but instead just adds it as a reference when I call it in another namespace?</span>
