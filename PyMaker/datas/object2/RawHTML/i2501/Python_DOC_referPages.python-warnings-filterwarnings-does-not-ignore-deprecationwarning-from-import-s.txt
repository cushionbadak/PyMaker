<div class="post-text" itemprop="text">
<p>I am trying to silence the DeprecationWarning with the following method.</p>
<pre><code>import warnings
warnings.filterwarnings(action='ignore')
from sklearn.ensemble import RandomForestRegressor
</code></pre>
<p>However, it still shows:</p>
<blockquote>
<p>DeprecationWarning: numpy.core.umath_tests is an internal NumPy module and should not be imported. It will be removed in a future NumPy release.
    from numpy.core.umath_tests import inner1d</p>
</blockquote>
<p>Why does this happen, and how can I fix it? </p>
<p>I'm running this on python 3.6.6, numpy 1.15.0 and scikit-learn 0.19.2, and adding <code>category=DeprecationWarning</code> didn't help. </p>
</div>
<div class="post-text" itemprop="text">
<p>The reason this happens is that Scikit <a href="https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/__init__.py#L27" rel="nofollow noreferrer">resets your DeprecationWarning filter when you import it</a>:</p>
<pre><code># Make sure that DeprecationWarning within this package always gets printed
warnings.filterwarnings('always', category=DeprecationWarning,
                        module=r'^{0}\.'.format(re.escape(__name__)))
</code></pre>
<p>Sneaky!  </p>
<p>The only fix I've found is to temporarily suppress stderr:</p>
<pre><code>import os
import sys
sys.stderr = open(os.devnull, "w")  # silence stderr
from sklearn.ensemble import RandomForestRegressor
sys.stderr = sys.__stderr__  # unsilence stderr
</code></pre>
<p>where <code>sys.__stderr__</code> refers to the system's actual stderr (as opposed to <code>sys.stderr</code>, which just tells Python where to print stderr to).</p>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if this would work. But I tried to recreate the warning and it was silenced so try this:</p>
<pre><code>import logging
logging.captureWarnings(True)
</code></pre>
<p>According to the <a href="https://docs.python.org/3/library/logging.html#logging.captureWarnings" rel="nofollow noreferrer">docs</a> "If capture is True, warnings issued by the warnings module will be redirected to the logging system. "</p>
<p>Here's what I did:</p>
<pre><code>import logging
import re
import warnings
logging.captureWarnings(True)
warnings.filterwarnings('always', category=DeprecationWarning,
                        module=r'^{0}\.'.format(re.escape(__name__)))
warnings.warn("This is a DeprecationWarning",category=DeprecationWarning)
</code></pre>
<p>Warning wasn't thrown.</p>
<pre><code>logging.captureWarnings(False)
warnings.warn("This is a DeprecationWarning",category=DeprecationWarning)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>.../ipython:2: DeprecationWarning: This is a DeprecationWarning
</code></pre>
</div>
<span class="comment-copy">The deprecation warning is triggered from sklearn, they should fix it. Perhaps you should report it as an issue.  Since it is a warning your code should continue to run and supressing it is, might give more trouble in the long run.</span>
<span class="comment-copy">Would it be terribly wrong to edit the source code?</span>
