<div class="post-text" itemprop="text">
<p>In the code below <code>readline()</code> will not increment.  I've tried using a value, no value and variable in <code>readline()</code>. When not using a value I don't close the file so that it will iterate but that and the other attempts have not worked.</p>
<p>What happens is just the first byte is displayed over and over again.</p>
<p>If I don't use a function and just place the code in the while loop (without 'line' variable in <code>readline()</code>) it works as expected. It will go through the log file and print out the different hex numbers. </p>
<pre><code>i=0
x=1

def mFinder(line):
    rgps=open('c:/code/gps.log', 'r')
    varr=rgps.readline(line)
    varr=varr[12:14].rstrip()
    rgps.close()
    return varr


while x&lt;900:
    val=mFinder(i)
    i+=1
    x+=1
    print val
    print 'this should change'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It appears you have misunderstood what <a href="https://docs.python.org/2/library/stdtypes.html#file.readline" rel="nofollow noreferrer"><code>file.readline()</code></a> does. Passing in an argument does not tell the method to read a specific numbered line.</p>
<p>The documentation tells you what happens instead:</p>
<blockquote>
<p><code>file.readline([size])</code><br/>
  Read one entire line from the file. A trailing newline character is kept in the string (but may be absent when a file ends with an incomplete line). <strong>If the <em>size</em> argument is present and non-negative, it is a maximum byte count (including the trailing newline) and an incomplete line may be returned.</strong></p>
</blockquote>
<p>Bold emphasis mine, you are passing in a maximum byte count and <code>rgps.readline(1)</code> reads a single byte, not the first line.</p>
<p>You need to keep a reference to the file object around until you are done with it, and repeatedly call <code>readline()</code> on it to get successive lines. You can pass the file object to a function call:</p>
<pre><code>def finder(fileobj):
    line = fileobj.readline()
    return line[12:14].rstrip()

with open('c:/code/gps.log') as rgps:
    x = 0
    while x &lt; 900:
        section = finder(rgps)
        print section
        # do stuff
        x += 1
</code></pre>
<p>You can also loop over files <em>directly</em>, because they are iterators:</p>
<pre><code>for line in openfilobject:
</code></pre>
<p>or use the <a href="https://docs.python.org/2/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code> function</a> to get a next line, as long as you don't mix <code>.readline()</code> calls and iteration (including <code>next()</code>). If you combine this witha  <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow noreferrer">generator function</a>, you can leave the file object entirely to a separate function that will read lines and produce sections until you are done:</p>
<pre><code>def read_sections():
    with open('c:/code/gps.log') as rgps:
        for line in rgps:
            yield line[12:14].rstrip()

for section in read_sections():
    # do something with `section`.
</code></pre>
</div>
<span class="comment-copy">The parameter to <a href="https://docs.python.org/2/library/stdtypes.html?highlight=readline#file.readline" rel="nofollow noreferrer"><code>readline</code></a> is not a line number.</span>
<span class="comment-copy"><a href="https://docs.python.org/2/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">docs.python.org/2/tutorial/â€¦</a></span>
<span class="comment-copy">@MartijnPieters holy banana bread Batman! That solved the problem.  Thanks</span>
<span class="comment-copy">@PM2Ring title edited, thank you</span>
<span class="comment-copy">Thanks for the detailed explanation.  I did misunderstand what I was passing readline()</span>
