<div class="post-text" itemprop="text">
<blockquote>
<p>Simplify the following code using a function.</p>
</blockquote>
<pre><code>salary1 = float(input("Enter previous salary"))
benefits1 = float(input("Enter previous benefits"))
bonus1 = float(input("Enter previous bonus"))
salary2 = float(input("Enter new salary"))
benefits2 = float(input("Enter new benefits"))
bonus2 = float(input("Enter new bonus"))
if salary2 &gt; salary1:
    salaryincrease = salary2 - salary1
else:
    salaryincrease = 0
if benefits2 &gt; benefits1:
    benefitsincrease = benefits2 - benefits1
else:
    benefitsincrease = 0
if bonus2 &gt; bonus1:
    bonusincrease = bonus2 - bonus1
else:
    bonusincrease = 0
</code></pre>
<p>from <a href="https://guidebookstgc.snagfilms.com/9151_ComputerScience.pdf" rel="nofollow noreferrer">https://guidebookstgc.snagfilms.com/9151_ComputerScience.pdf</a> page 102</p>
<p>I honestly don't know what I'm expected to do.</p>
<p>Can someone point out the seemingly obvious?</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems like a homework question, but as an example:</p>
<pre><code>def determine_increase(num1, num2):
    if num2 &gt; num1:
        return num2 - num1
    else:
        return 0
</code></pre>
<p>Then you would call it as:</p>
<pre><code>salaryincrease = determine_increase(salary1, salary2)
bonusincrease  = determine_increase(bonus1, bonus2)
benefitsincrease = determine_increase(benefits1, benefits2)
</code></pre>
<p>This takes the logic you were performing repetitively and condenses it to one function so you only have to change it in one spot if say you wanted to make the increase a percent you would only modify one function instead of all 3 instances in your original code. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an example of writing a function to handle your user inputs. In fact, it handles all of them in one function.</p>
<pre><code>def get_floats(*names):
    return (float(input("Enter %s: " % name)) for name in names)

salary1, benefits1, bonus1, salary2, benefits2, bonus2 = get_floats(
     "previous salary", "previous benefits", "previous bonus",
     "new salary", "new benefits", "new bonus")
</code></pre>
<p>Here we've taken out all the parts that are the same between the original lines (including parts of the prompt string!) and put them into a new function. There is very little redundancy left here. </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to look for patterns.  Things that are repeated in your code consistently.  Don't look at specific variable names, but their relative position in the code and how they are used.</p>
<p>One of the areas I would look to simply here is the if - else statements.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also simplify the logic by using predefined functions and replacing the conditions with them:</p>
<pre><code>salaryincrease = max(0, salary2 - salary1)
bonusincrease  = max(0, bonus2  - bonus1)  
benefitsincrease = max(0, benefits2-benefits1) 
</code></pre>
<p>This a valid replacement for your <code>if</code>'s - <code>max()</code> is a built-in: <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">max(...)</a></p>
<p>Its not as explicit as @hgoscenski answer, but would be a valid simplification using functions.</p>
</div>
<div class="post-text" itemprop="text">
<p>The point of this exercise is to look for repeated patterns and abstract them in its own function. </p>
<p>Check this block: </p>
<pre><code>if salary2 &gt; salary1:
    salaryincrease = salary2 - salary1
else:
    salaryincrease = 0
</code></pre>
<p>,this block:</p>
<pre><code>if benefits2 &gt; benefits1:
    benefitsincrease = benefits2 - benefits1
else:
    benefitsincrease = 0
</code></pre>
<p>and this block:</p>
<pre><code>if bonus2 &gt; bonus1:
    bonusincrease = bonus2 - bonus1
else:
    bonusincrease = 0
</code></pre>
<p>Do you think there is a pattern that can be abstracted in a function?</p>
</div>
<span class="comment-copy">Look for places where an operation is repeated, and write a function to deal with it. One place you could do that is in getting user input, where you take the <code>float()</code> of each piece of user input. You could instead write a function <code>input_float()</code> that does that for you.</span>
<span class="comment-copy">Note that in general, SO's scope is limited to narrow, specific questions -- ideally, ones for which a canonical answer is possible. By contrast, deciding how to refactor code is inherently fuzzy and open to judgment calls, with no one Right Answer existing.</span>
