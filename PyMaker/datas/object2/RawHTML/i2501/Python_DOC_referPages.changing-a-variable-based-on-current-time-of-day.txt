<div class="post-text" itemprop="text">
<p>I am trying to run a python script every <code>sleep_time</code>, but I want this <code>sleep_time</code> variable to change based on the current time of day. The program is used with analyzing stock data so during the day (8:30am-5:30pm) I want the program to update its data every 60 seconds. When it is not between this time, I only need it to update every 10 minutes. The current code I have is as follows: </p>
<pre><code>sleep_time = 60
ts = time.time()
st = datetime.datetime.fromtimestamp(ts).strftime('%H:%M')

if (st &gt;= '8:30' and st &lt;='17:30'):
    sleep_time = 60

if(st &lt; '8:30' and st &gt;'17:30'):
    sleep_time = 600


while True: 
#runs this code every sleep_time seconds to constantly update
    ...
    time.sleep(sleep_time)
</code></pre>
<p>But I can t get it to work because <code>st</code> is a string and I am not sure how to compare a string like this. Any help would be appreciated </p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">datetime</a> module, which provides a <a href="https://docs.python.org/3/library/datetime.html#datetime-objects" rel="nofollow noreferrer">datetime</a> data type.</p>
<p>You can compare between two, even three datetimes.</p>
<p><a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.now" rel="nofollow noreferrer">datetime.now()</a> gives you the timestamp of current local date and time, and <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.today" rel="nofollow noreferrer">datetime.today()</a> also gives you the timestamp of current local date and time. You can replace specific values of a datetime data type with <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.replace" rel="nofollow noreferrer">datetime.replace()</a>.</p>
<pre><code>from datetime import datetime


while True:

    #You should define sleep_time inside the loop. Otherwise it won't change for the rest of the loop.
    if datetime.today().replace(hour=8, minute=0, second=0, microsecond=0) &lt;= datetime.now() &lt;= datetime.today().replace(hour=15, minute=30, second=0, microsecond=0): 
        sleep_time = 60
    else: 
        sleep_time = 600

    #your code here
    time.sleep(sleep_time)
</code></pre>
<p>You would probably wonder what's the difference between datetime.now() and datetime.today() because they produces the same result.</p>
<p>According to the documentation, datetime.now() is more accurate than datetime.today() and can take a <code>tz</code> arg for timezones.</p>
</div>
<div class="post-text" itemprop="text">
<p>I just separated the time in hours and minutes and then converted them to integers. Afterwards, you can calculate the total minutes and compare it to whatever the time might be (8:30 -&gt; 510, 17:30 -&gt; 1050).</p>
<pre><code># rest of implementation
time_h = datetime.datetime.fromtimestamp(ts).strftime('%H')
time_m =  datetime.datetime.fromtimestamp(ts).strftime('%M')

total_min = int(time_h) * 60 + int(time_m)
if (total_min &gt;= 510 and total_min &lt;= 1050):
    sleep_time = 60

if(total_min &lt; 510 and total_min &gt; 1050):
    sleep_time = 600

# rest of implementation
</code></pre>
<p>How to find time in minutes: <code>60 * hours + minutes</code></p>
</div>
<div class="post-text" itemprop="text">
<p>On one hand you have <code>datetime.datetime</code> objects, on the other hand you have strings. The 2 are not comparable, so one has to be converted into the other (it's possible both ways), in order to be able to compare them.</p>
<p>The key point is that when comparing, the result should be compatible to what you're comparing to.</p>
<p>Check <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">[Python 3]: strftime() and strptime() Behavior</a> for rules regarding conversion.</p>
<p>You decided to convert everything to string (this is the most straightforward way especially for less experienced ones (it works, and it's perfectly fine), even though I'd suggest <strong>the other way around</strong>). In <em>Python</em> (actually I'm not aware of a programming language that handles things differently), strings are compared <em>lexicographically</em> (<a href="https://en.wikipedia.org/wiki/Lexicographical_order" rel="nofollow noreferrer">[Wikipedia]: Lexicographical order</a>), or alphabetically.</p>
<p>Let's take a look at the conversion:</p>
<blockquote>
<pre><code>&gt;&gt;&gt; datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M')
'04:29'
</code></pre>
</blockquote>
<p>As seen, numbers (representing hours, minutes) that are less than 10, are left padded with a <strong><em>0</em></strong> (<strong><em>0</em></strong> will be <strong><em>00</em></strong>), and your strings <strong>should follow the same rule</strong>.</p>
<p>So, modifying your <em>'8:30'</em> string to <em>'<strong>0</strong>8:30'</em> should do the trick, because for example <em>'11:26'</em> is:</p>
<ul>
<li>Less than <em>'8:30'</em> (as <code>'1' &lt; '8'</code>) - which is obviously wrong</li>
<li>Greater than <em>'08:30'</em> (as <code>'1' &gt; '0'</code>) - which is correct</li>
</ul>
</div>
