<div class="post-text" itemprop="text">
<pre><code>class Country(object):
    """ Modeling a country immigration. """

    def __init__(name, immigrants, population, disease_numbers):

        self.name = name
        self.immigrants = immigrants
        self.population = population
        self.disease_numbers = disease_numbers
</code></pre>
<p>I have the follow class , that are more attributes .. Every year the population changes and at the end of x years im trying to built o ordered dictionary that will show me which country have the highest population and the least people with diseases... How do I built a dictionary that updates on every year/ turn and give me this info at the end.</p>
<p>How can I get information of the stats on the last turn?</p>
<p>Let me clarify the question.</p>
<p>All i need is at the end of the simulation to have a ordered dictionary.</p>
<pre><code>  d = {'self.name' : London
       ('self.immigrants' : 15000
       'self.population' : 500000
       'self.disease_numbers' :3000) , 
        'self.name' : Madrid
       ('self.immigrants' : 17000
       'self.population' : 5000
       'self.disease_numbers' :300)}
</code></pre>
<p>Then be able to pick for example in this case London because of higher number of people with a disease. So thinking through it could almost be a new method that return the city with the higher number of people with the disease.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class Country(object):
    """ Modeling a country immigration. """

    def __init__(name, immigrants, population, disease_numbers):

        self.name = name
        self.immigrants = immigrants
        self.infected = population
        self.disease_numbers = disease_numbers

    def update_pop(self, year, rate):
        self.infected = self.infected * year * rate
</code></pre>
<p>Would adding a function to the class work?</p>
</div>
<div class="post-text" itemprop="text">
<p>Not entirely clear how you intend to update the country data, but it sounds like what you need is just to store the country data objects in a dictionary of dictionaries, with a series of database-like functions to query it, like this:</p>
<pre><code>country_data = {}

def add_country_data(name, year, *args, **kwargs):
    country = Country(name, *args, **kwargs)
    if name in country_data:
        country_data[name][year] = country
    else:
        country_data[name] = {year: country}

def get_latest_data(country_name):
    years = country_data[country_name].keys()
    return country_data[country_name][max(years)]

def get_max_country(attr, year=None):
    """ Returns the county with the max value of the given attribute
    in the given year or (if year is ommitted) any year """
    r = None
    highest = None
    for name, country in country_data.items():
        if year is None:
            max_v = max(getattr(country[y], attr) for y in country.keys())
        else:
            max_v = getattr(country[year], attr)
        if highest is None or max_v &gt; highest:
            highest = max_v
            r = name
    return r, highest

def get_latest_dicts():
    return {name: get_latest_data(name).__dict__ 
            for name in country_data.keys()}

add_country_data("Venezuela", 1989, 100, 20, 50)
add_country_data("Venezuela", 2009, 120, 30, 40)
add_country_data("Brazil", 2008, 110, 40, 90)

print get_latest_data("Venezuela").immigrants   # 120
print get_max_country("infected")     # ('Brazil', 40)
print get_latest_dicts()            # ('Brazil': {'immigrants: 110 ... 
</code></pre>
<p>If you want you could add these functions and the data dictionary to the class as <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="nofollow noreferrer">class methods</a></p>
<pre><code>class Country(object):
    """ Modeling a country immigration. """
    data = {}

    def __init__(self, name, immigrants, population, disease_numbers):
        self.name = name
        self.immigrants = immigrants
        self.infected = population
        self.disease_numbers = disease_numbers

    @classmethod
    def add_data(cls, year, *args, **kwargs):
        obj = cls(*args, **kwargs)
        cls.data[obj.name, year] = obj

    # ...

 Country.add_data("Venezuela", 1989, 100, 20, 50)
</code></pre>
<p>This is convenient because all the functions relating to storage and querying of country data can be stored in the Country class together with any modelling methods you need.</p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/8628123/counting-instances-of-a-class">Here</a> are some answers that might help up</span>
<span class="comment-copy">From what I understood, <a href="https://stackoverflow.com/questions/2675028/list-attributes-of-an-object">this</a> may help you</span>
<span class="comment-copy">You probably want to add a method to the class, to model the change of the data each year. Then make all the instances you're interested in studying, and call the "update" method for each several times in a loop. After that you can write some code to inspect the instances' data and return the information you want in the form you want it.  But without details as to the logic as to immigration and spread of disease, or how you want the final dictionary to be structured, I couldn't say any more.</span>
<span class="comment-copy">@Robin Zigmond , im trying to find which country has more population and disease numbers.</span>
<span class="comment-copy">What else does your class do? Is it just to store the data? If so then this kind of task may be more easily done using a <code>pandas</code> dataframe than a dictionary of objects.</span>
<span class="comment-copy">I am not sure if I will manage to work , but I have not enough words to say thank you for your comprehensive explanation.</span>
