<div class="post-text" itemprop="text">
<p><code>trunc</code> and <code>int</code> functions return the same output for every float type inputs that I have tried. </p>
<p>They differ in the way that <code>int</code> can also be used to convert numerical strings to integers. </p>
<p>So I have a two-fold question:</p>
<ol>
<li><p>I would like to know if, apart from strings, is there any input for which <code>trunc</code> and <code>int</code> give different outputs?</p></li>
<li><p>If not, when is it better to just use <code>trunc</code> to convert floating type numbers to integers?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int</code></a> and <a href="https://docs.python.org/3/library/math.html#math.trunc" rel="nofollow noreferrer"><code>math.trunc</code></a> have a somewhat similar relationship as <a href="https://docs.python.org/3/library/functions.html#func-str" rel="nofollow noreferrer"><code>str</code></a> and <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer"><code>repr</code></a>. <code>int</code> delegates to an type's <a href="https://docs.python.org/3/reference/datamodel.html#object.__int__" rel="nofollow noreferrer"><code>__int__</code></a> method, and falls back to the <a href="https://docs.python.org/3/reference/datamodel.html#object.__trunc__" rel="nofollow noreferrer"><code>__trunc__</code></a> method if <code>__int__</code> is not found. <code>math.trunc</code> delegates to the type's <code>__trunc__</code> method directly and has no fallback. Unlike <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer"><code>__repr__</code></a>, which are always defined for <code>object</code>, both <code>int</code> and <code>math.trunc</code> can raise errors out of the box.</p>
<p>For all the built-in types that I am aware of, both <code>__int__</code> and <code>__trunc__</code> are defined sensibly where appropriate. However, you can define your own set of test classes to see what errors you get:</p>
<pre><code>class A:
    def __int__(self):
        return 1

class B:
    def __trunc__(self):
        return 1

class C(): pass
</code></pre>
<p><code>math.trunc(A())</code> and <code>math.trunc(C())</code> will both raise <code>TypeError: type X doesn't define __trunc__ method</code>. <code>int(C())</code> will raise <code>TypeError: int() argument must be a string, a bytes-like object or a number, not 'C'</code>. However, <code>int(A())</code>, <code>int(B())</code> and <code>math.trunc(B())</code> will all succeed.</p>
<p>In the end the decision as to which method to use is one of connotation. <code>trunc</code> is inherently a math operation similar to <code>floor</code>, while <code>int</code> is a general purpose conversion, and succeeds in more cases.</p>
<p>And don't forget about <a href="https://docs.python.org/3/library/operator.html#operator.index" rel="nofollow noreferrer"><code>operator.index</code></a> and the <a href="https://docs.python.org/3/reference/datamodel.html#object.__index__" rel="nofollow noreferrer"><code>__index__</code></a> method.</p>
</div>
<span class="comment-copy">If the output type and value for floats is the same for both, what classifies <b>better</b> for you?</span>
<span class="comment-copy">@Bazingaa I think the question is more along the lines of whether anyone can think of a use case where it would actually be correct to use <code>trunc</code> over <code>int</code>, not which one is <i>better</i>. Confirming that they are actually identical could be an answer as well.</span>
<span class="comment-copy">The exception of already mentioned example of <code>strings</code> already rules out the possibility of them being identical.</span>
<span class="comment-copy">So one possible use case is if i want the cast to throw an error if some other dtype than <code>float</code> is used, i could use <code>trunc</code>.</span>
<span class="comment-copy">@Bazingaa perhaps due to some fundamental difference in their implementation one of them is implemented faster in case of very big numbers.</span>
<span class="comment-copy">Note also that <code>__int__</code> should (must?) return a value of type <code>int</code>, while <code>__trunc__</code> merely needs to return a value of type <code>Integral</code> (an abstract base class). Commonly, but not necessarily, the concrete type of the returned value is <code>int</code>.</span>
<span class="comment-copy">@chepner. Should :) If you use an improperly implemented <code>__int__</code> very carefully, it won't cause you any problems.  I've definitely tried similar things.</span>
