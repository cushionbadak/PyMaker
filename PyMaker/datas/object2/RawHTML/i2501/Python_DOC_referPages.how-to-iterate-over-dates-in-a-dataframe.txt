<div class="post-text" itemprop="text">
<p>I've got a dataframe that has a column of dates that are formatted like this:</p>
<p>"1/1/2016"</p>
<p>I would like to create a for-loop that starts from that date and goes to "1/2/2016", "1/3/2016", and so on.</p>
<p>I start with this Python code:</p>
<pre><code>df = pd.read_csv('myfile.csv')
df['dates'] = pd.to_datetime(df['dates'])
</code></pre>
<p>Which turns the date format to this: '01-01-2016'
Next:</p>
<pre><code>start_date = '01-01-2016'
</code></pre>
<p>Finally, the for-loop:</p>
<pre><code>for j in range (1,30)
    start_date + j...
</code></pre>
<p>But you can't add an integer to that date format, of course.
What should I do in the for-loop to just go to the next day?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what your final outcome wants to be, but you can use <code>pd.date_range</code>:</p>
<pre><code>start_date = pd.to_datetime('01-01-2016')

for j in pd.date_range(start_date, periods=30):
    print(j)
</code></pre>
<p>Which gives you:</p>
<pre><code>2016-01-01 00:00:00
2016-01-02 00:00:00
2016-01-03 00:00:00
2016-01-04 00:00:00
2016-01-05 00:00:00
2016-01-06 00:00:00
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To increase the date by one day if your are pandas' lover: </p>
<pre><code>df['dates'].iloc[0] +pd.to_timedelta(1,'d')
</code></pre>
<p>Or you can try this :</p>
<pre><code>from datetime import timedelta
df['dates'].iloc[0] + timedelta(days=1)  #on the left side is the date you want to increase
</code></pre>
<p>You can find more infos here <a href="https://stackoverflow.com/a/6871054/8433650">https://stackoverflow.com/a/6871054/8433650</a></p>
</div>
<div class="post-text" itemprop="text">
<p>By using numpy time delta either you can add day or subtract from time stamp</p>
<pre><code>import numpy as np
import pandas as pd
pd.to_datetime('01-01-2016') +np.timedelta64(1,'D')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can add a day with <code>timedelta()</code></p>
<pre><code>Import datetime

for j in range (1,30):
    start_date + datetime.timedelta(days=1)
</code></pre>
<p>Here is a <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">LINK</a> to the docs for your reference</p>
</div>
<span class="comment-copy">pd.Timedelta check it</span>
<span class="comment-copy">This and some other answers below seem to be working for me if I try them in the interpreter, or as a python script. They don't work if I use the Jupyter notebook, which is what I'm hoping to use (though I can make do without); any idea why? I'm using Jupyter on Cocalc.</span>
<span class="comment-copy">I don't use Jupyter, so I'm not sure, but what is the error that comes up?</span>
<span class="comment-copy">I get: "TypeError: periods must be a number, got 30" (I used your exact code line). Works fine in a script, doesn't work in Jupyter.</span>
<span class="comment-copy">That is very strange... Based on the <a href="https://github.com/pandas-dev/pandas/blob/master/pandas/core/indexes/period.py" rel="nofollow noreferrer">source code</a>, that error is supposed to show up if the argument is non-numeric, but I have no idea why you're getting it if you pass it <code>30</code>. It seems to be reading <code>30</code> as a string or something like that... Wish I could help more, but I'm stumped</span>
