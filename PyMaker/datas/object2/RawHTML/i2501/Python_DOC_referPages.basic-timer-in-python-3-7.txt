<div class="post-text" itemprop="text">
<p><strong>Due to my poor knowledge of Stack Overflow, Python and general writing skills I didn't specify the fact that I am using the pygame module. I'm very sorry for my lack of understanding and will aim to improve.</strong></p>
<p>Started learning Python about 2-3 days ago. Recently encountered an issue with my implementation of a timer. I was using <code>time.sleep(10)</code>, but later found that this actually pauses the code for 10 seconds, whereas I need it to count 10 seconds. Is there a way I could achieve this? Many thanks in advance.</p>
<p><strong>EDIT: I understand now that the term 'timer' is probably not best suited. What I'm actually trying to do is create a cooldown of 10 seconds.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit 2:</strong> Cooldown:</p>
<p>The following code </p>
<pre><code>import time
import random
# Minimum time (in seconds) that it has to wait
for i in range(10):
    minimum_time=3
    tick=time.time()
    # How much time has passed since tick?
    passed_time=time.time()-tick
    # Sleep a random amount of time
    time.sleep(random.uniform(0,3))
    # Check if the passed time is less than the minimum time
    if passed_time&lt;minimum_time:
        # If it is not passed enough time
        # then sleep the remaining time
        time.sleep(minimum_time-passed_time)

    print("{} seconds were used in this iteration of the loop, and it should be _at least_ 3".format(time.time()-tick))
</code></pre>
<p><strong>Edit:</strong> This might be what you want:</p>
<pre><code>import time
for i in range(1,11):
    print(i)
    time.sleep(1)
</code></pre>
<p>This one counts up from 1 to 10. You can reverse it by</p>
<pre><code>import time
for i in reversed(range(1,11)):
    print(i)
    time.sleep(1)
</code></pre>
<h2>First answer below</h2>
<p>This is one way you could do a basic timer in python:</p>
<pre><code>import time
# Get the current unix time stamp (that is time in seconds from 1970-01-01)
first=time.time()
# Sleep (pause the script) for 10 seconds
# (remove the line below and insert your code there instead)
time.sleep(10)
# Get the _now_ current time (also in seconds from 1970-01-01)
# and see how many seconds ago we did it last time
delta=time.time()-first
print(delta)
</code></pre>
<p>This now prints (approx) <code>10</code> because it took 10 seconds to run the above code. </p>
<p>You could also look at <code>iPython</code>s <a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-timeit" rel="nofollow noreferrer">%timeit</a>!</p>
<h2>Addendum</h2>
<p>You could also make this even bigger, and make a <code>Timer</code> class, like so:</p>
<pre><code>import time
class Timer():
    def __init__(self):
        self.times=[]
        self._tick=0
    def tick(self):
        """ Call this to start timer """
        # Store the current time in _tick
        self._tick=time.time()
    def tock(self):
        """ Call this to stop timer """
        # Add the delta in the times-list
        self.times.append(time.time()-self._tick)
    def __str__(self):
        # This method is just so that the timer can be printed nicely
        # as further below
        return str(self.times)
</code></pre>
<p>Now you can just run <code>t=Timer()</code> followed by <code>t.tick()</code> and <code>t.tock()</code> to start and stop the timer respectively (multiple times(!)), and then <code>print(t)</code> to see all the recorded times. E.g.</p>
<pre><code>t=Timer()
for i in range(4):
    t.tick()
    # Sleep (pause the script) for 10 seconds
    # (remove the line below and insert your code there instead)
    time.sleep(1)
    # Get the _now_ current time (also in seconds from 1970-01-01)
    # and see how many seconds ago we did it last time
    t.tock()
print(t)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue I think you are running into is that your code runs sequentially. If you are looking to have some code running at the same time as the rest of your code runs (kind of like being in the background) you could use a <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">Threading</a>.</p>
<pre><code>import threading
import time

def in_thread():
    print("Thread start")
    time.sleep(10)
    print("Thread end")

print("Start")
thread = threading.Thread(target=in_thread)
thread.start()
print("This continues")
</code></pre>
<p>However, if you are doing this as a cooldown system in a game I would recommend storing <code>time.time()</code>, which gives the current time in seconds, when the action is first taken. When they try to do the action again you can compare the current time to your stored time and see if they have passed the cooldown (<code>time.time() - startTime &gt; 10:</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>you can set timer using <code>threading.Timer</code>:</p>
<blockquote>
<p>class <strong>threading.Timer</strong></p>
<p>A thread that executes a function after a specified interval has passed.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; import threading
&gt;&gt;&gt; def hello():
...     print("Hello")
...
&gt;&gt;&gt; t =threading.Timer(5, hello)
&gt;&gt;&gt; t.start()
 Hello
</code></pre>
</div>
<span class="comment-copy">Would it make sense for your code to instead pause for 1 second ten times?  Or check the time periodically to see if 10 seconds has elapsed?  There are many strategies for problems like this, and choosing the correct one will require more details about what exactly you're trying to do.</span>
<span class="comment-copy">What do you mean with count 10 seconds and not to sleep ? Do you need alerts ? Do you need signals ?</span>
<span class="comment-copy">As a guess, you're probably looking for <a href="https://www.pygame.org/docs/ref/time.html#pygame.time.set_timer" rel="nofollow noreferrer"><code>pygame.time.set_timer</code></a>.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/30720665/countdown-timer-in-pygame">Countdown timer in Pygame</a></span>
<span class="comment-copy">"Timer" is a perfectly good term (and in fact the thing you're looking for may even be called a "timer" inside PyGame, or threading, or whatever). It's just that it's an <i>ambiguous</i> word, so you need to give us more information so we know the context.</span>
<span class="comment-copy">When I run this snippet of code, it pauses everything else in my script. I would like something that counts without pausing the rest of my code.</span>
<span class="comment-copy">It pauses for 10 seconds. Just remove the <code>time.sleep</code> part from my code, and insert the code you want to time instead</span>
<span class="comment-copy">Perhaps timer is the wrong term to use. I would like something that emulates a cooldown.</span>
<span class="comment-copy">@archieab I'm sorry, but I don't understand what you mean cooldown any better?</span>
<span class="comment-copy">@archieab See revised answer now</span>
<span class="comment-copy">Awesome that you're making answers! I hope you wouldn't mind just a little pointer; You should explain how this answer is solving the OP-s problem. What is it doing? Why is it working? I'm not even sure this answers the question, and if you misinterpreted OPs question, without explaining your interpretation then you could end up with downvotes. Again: it's great to have you on board and that you're trying to help, and that's only what I'm trying to do too!</span>
<span class="comment-copy">@AndreasStorvikStrauman Thanks for the suggestions. I have updated my answer.</span>
<span class="comment-copy">Perfect! Great answer!</span>
