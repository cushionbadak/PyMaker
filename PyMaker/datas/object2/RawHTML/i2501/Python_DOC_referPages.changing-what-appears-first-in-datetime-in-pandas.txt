<div class="post-text" itemprop="text">
<p>I'm just learning Pandas myself and I have met few problems.</p>
<ol>
<li><p>In a DataFrame, which it was reads from a csv file, I have one column includes date data that in different format(like <code>'%m/%d/%Y'</code> and <code>'%Y-%m-%d'</code>, may be blank.) and I want to unify the format of this column. But I don't know if there are any other formats. So when I using <code>pd.to_datetime()</code>,it raised some errors like format not matching and not timelike data. How can I unify the format of this column?</p></li>
<li><p>I have converted part of that column into datetime dtype, and it's in <code>YYYY-mm-dd</code> format. Can I keep the datetime dtype, and change the format into <code>'%m/%d/%Y'</code>? I have used <code>pd.dt.strftime()</code>, it will change the format, but also change the dtype into str, not keeping the datetime dtype.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>So when I using pd.to_datetime(),it raised some errors like format not
  matching and not timelike data. How can I unify the format of this
  column?</p>
</blockquote>
<p>Use the <code>errors='coerce'</code> option in order to return <code>NaT</code> (Not a Time) for non-converted values. Also note that the <code>format</code> argument is not required. Omitting it will enable Pandas to try multiple formats, failing which it will revert to <code>NaT</code><sup>1</sup>. For example:</p>
<pre><code>df['datetime'] = pd.to_datetime(df['datetime'], errors='coerce')
</code></pre>
<p>Beware, mixed types may be interpreted incorrectly. For example, how will Python know whether <code>05/06/2018</code> is 5th June or 6th May? An order of conventions will be applied and if you need greater control you will need to apply a customised ordering yourself.</p>
<blockquote>
<p>Can I keep the datetime dtype, and change the format into '%m/%d/%Y'?</p>
</blockquote>
<p>No, you cannot. <code>datetime</code> series are stored internally as integers. Any human-readable date representation is just that, a <em>representation</em>, not the underlying integer. To access your custom formatting, you can use methods available in Pandas. You can even store such a text representation in a <code>pd.Series</code> variable:</p>
<pre><code>formatted_dates = df['datetime'].dt.strftime('%m/%d/%Y')
</code></pre>
<p>The <code>dtype</code> of <code>formatted_dates</code> will be <code>object</code>, which indicates that the elements of your series point to arbitrary Python times. In this case, those arbitrary types happen to be all strings.</p>
<p>Lastly, I strongly recommend you do <em>not</em> convert a <code>datetime</code> series to strings until the very last step in your workflow. This is because as soon as you do so, you will no longer be able to use efficient, vectorised operations on such a series.</p>
<hr/>
<p><sup>1</sup> This will sacrifice performance and contrasts with <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer"><code>datetime.strptime</code></a>, which <em>requires</em> format to be specified. Internally, Pandas uses the <a href="https://dateutil.readthedocs.io/en/stable/" rel="nofollow noreferrer"><code>dateutil</code></a> library, as indicated in the <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html" rel="nofollow noreferrer">docs</a>.</p>
</div>
<span class="comment-copy">Thank you! I know I can use <code>errors='coerce'</code> in argument, but it will change all other input that doesn't fit the default input into <code>Nat</code>. For example, if I have two types of format like <code>'%m/%d/%Y'</code> and <code>'%Y-%m-%d'</code>, if I set <code>format='%m/%d/%Y'</code>, the other one will be <code>Nat</code>, which I want it also be converted into a unified format. It's there any possible solutions? Thank you!</span>
<span class="comment-copy">@MapleYu, Yes, you don't <i>need</i> to specify <code>format</code>. This is not a required argument for <code>pd.to_datetime</code>. For example, <code>pd.to_datetime(pd.Series(['15/12/2018', '12/15/2018']), errors='coerce')</code> will be read correctly.</span>
