<div class="post-text" itemprop="text">
<p>There is no straight way to append to a compressed tar archive. As the <a href="https://docs.python.org/3/library/tarfile.html#tarfile.open" rel="nofollow noreferrer">documentation states</a>:</p>
<blockquote>
<p>Note that <code>'a:gz'</code>, <code>'a:bz2'</code> or <code>'a:xz'</code> is not possible.</p>
</blockquote>
<p>As a workaround you can either use the uncompressed append mode <code>'a'</code> and then handle the compression and decompression yourself, or you can handle the appending yourself and use the compressed read/write modes to recreate the tar archive.</p>
<p>My question is: Why does it have to be this complicated? Is there any reason you can think of why the developers would decide to not include the compressed appending mode in the code?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because it's hard, especially if you want it to still compress well when appending small files.</p>
<p>You can look at <a href="https://github.com/madler/zlib/blob/master/examples/gzlog.c" rel="nofollow noreferrer">gzlog</a> for how to efficiently append small strings to a gzip file. It appends them uncompressed until a threshold is reached, at which point the uncompressed data is compressed. After each append you have a valid gzip file.</p>
<p>To do this with a tar file, you would also need to keep track of the terminating blocks in the uncompressed .tar stream and write over those, appending new terminating blocks each time.</p>
<p>It could be done, but it would require very special attention to each compressed data format to do it right. If done wrong, and if used frequently, the result would be horribly inefficient both in time and compression ratio.</p>
</div>
<span class="comment-copy">Very interesting. Your answer made me realize that I actually asked a time ago a <a href="https://stackoverflow.com/questions/50464559/size-of-files-compressed-with-python-gzip-module-is-not-reduced">question on a similar topic</a>. I finally start to understand the background behind the compression. Thank you.</span>
