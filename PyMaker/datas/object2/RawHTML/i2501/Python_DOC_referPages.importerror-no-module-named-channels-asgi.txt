<div class="post-text" itemprop="text">
<p>Python is installed in a local directory.  </p>
<p>My directory tree looks like this:</p>
<pre><code>(local directory)/site-packages/toolkit/interface.py
</code></pre>
<p>My code is in here:</p>
<pre><code>(local directory)/site-packages/toolkit/examples/mountain.py
</code></pre>
<p>To run the example, I write <code>python mountain.py</code>, and in the code I have:</p>
<pre><code>from toolkit.interface import interface
</code></pre>
<p>And I get the error:</p>
<pre><code>Traceback (most recent call last):
  File "mountain.py", line 28, in ?
    from toolkit.interface import interface
ImportError: No module named toolkit.interface
</code></pre>
<p>I have already checked <code>sys.path</code> and there I have the directory <code>/site-packages</code>. Also, I have the file <code>__init__.py.bin</code> in the toolkit folder to indicate to Python that this is a package. I also have a <code>__init__.py.bin</code> in the examples directory.</p>
<p>I do not know why Python cannot find the file when it is in <code>sys.path</code>.  Any ideas?  Can it be a permissions problem?  Do I need some execution permission?</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on your comments to orip's post, I guess this is what happened:</p>
<ol>
<li>You edited <code>__init__.py</code> on windows.</li>
<li>The windows editor added something non-printing, perhaps a carriage-return (end-of-line in Windows is CR/LF; in unix it is LF only), or perhaps a CTRL-Z (windows end-of-file).</li>
<li>You used WinSCP to copy the file to your unix box.</li>
<li>WinSCP thought: "This has something that's not basic text; I'll put a .bin extension to indicate binary data."</li>
<li>The missing <code>__init__.py</code> (now called <code>__init__.py.bin</code>) means python doesn't understand toolkit as a package.</li>
<li>You create <code>__init__.py</code> in the appropriate directory and everything works... ?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Does</p>
<pre><code>(local directory)/site-packages/toolkit
</code></pre>
<p>have a <code>__init__.py</code>?</p>
<p>To make import <em>walk</em> through your directories every directory must have a <code>__init__.py</code> file.</p>
</div>
<div class="post-text" itemprop="text">
<p>On *nix, also make sure that PYTHONPATH is configured correctly, especially that it has this format:</p>
<pre><code> .:/usr/local/lib/python
</code></pre>
<p>(Mind the <code>.:</code> at the beginning, so that it can search on the current directory, too.)</p>
<p>It may also be in other locations, depending on the version:</p>
<pre><code> .:/usr/lib/python
 .:/usr/lib/python2.6
 .:/usr/lib/python2.7 and etc.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I ran into something very similar when I did this exercise in LPTHW; I could never get Python to recognise that I had files in the directory I was calling from. But I was able to get it to work in the end. What I did, and what I recommend, is to try this:</p>
<p>(NOTE: From your initial post, I am assuming you are using an *NIX-based machine and are running things from the command line, so this advice is tailored to that. Since I run Ubuntu, this is what I did) </p>
<p>1) Change directory (cd) to the directory <em>above</em> the directory where your files are. In this case, you're trying to run the <code>mountain.py</code> file, and trying to call the <code>toolkit.interface.py</code> module, which are in separate directories. In this case, you would go to the directory that contains paths to both those files (or in other words, the closest directory that the paths of both those files share). Which in this case is the <code>toolkit</code> directory.</p>
<p>2) When you are in the <code>tookit</code> directory, enter this line of code on your command line:</p>
<p><code>export PYTHONPATH=.</code></p>
<p>This sets your PYTHONPATH to ".", which basically means that your PYTHONPATH will now look for any called files within the directory you are currently in, (and more to the point, in the <em>sub-directory branches</em> of the directory you are in. So it doesn't just look in your current directory, but in all the directories that are <strong>in</strong> your current directory).</p>
<p>3) After you've set your PYTHONPATH in the step above, run your module from your current directory (the <code>toolkit</code> directory). Python should now find and load the modules you specified.</p>
<p>Hope this helps. I was quite frustrated with this myself. </p>
</div>
<div class="post-text" itemprop="text">
<p>I solved my own problem, and I will write a summary of the things that were wrong and the solution:</p>
<p>The file needs to be called exactly <code>__init__.py</code>. If the extension is different such as in my case <code>.py.bin</code> then Python cannot move through the directories and then it cannot find the modules. To edit the files you need to use a Linux editor, such as <a href="http://en.wikipedia.org/wiki/Vi" rel="noreferrer">vi</a> or <a href="https://en.wikipedia.org/wiki/GNU_nano" rel="noreferrer">nano</a>. If you use a Windows editor this will write some hidden characters.</p>
<p>Another problem that was affecting it was that I had another Python version installed by the root, so if someone is working with a local installation of python, be sure that the Python installation that is running the programs is the local Python. To check this, just do <code>which python</code>, and see if the executable is the one that is in your local directory. If not, change the path, but be sure that the local Python directory is before than the other Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>To mark a directory as a package you need a file named <code>__init__.py</code>, does this help?</p>
</div>
<div class="post-text" itemprop="text">
<p>an easy solution is to install the module using <code>python -m pip install &lt;library-name&gt;</code> instead of <code>pip install &lt;library-name&gt;</code>
you may use sudo in case of admin restrictions</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>PyCharm</code> (part of the JetBrains suite) you need to define your script directory as Source:<br/>
<code>Right Click &gt; Mark Directory as &gt; Sources Root</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Yup. You need the directory to contain the <code>__init__.py</code> file, which is the file that initializes the package. Here, have a look at <a href="http://docs.python.org/tutorial/modules.html" rel="nofollow noreferrer">this</a>.</p>
<blockquote>
<p>The __init__.py files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path. In the simplest case, __init__.py can just be an empty file, but it can also execute initialization code for the package or set the __all__ variable, described later.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>You must have the file __ init__.py in the same directory where it's the file that you are importing.</li>
<li>You can not try to import a file that has the same name and be a file from 2 folders configured on the PYTHONPATH.</li>
</ol>
<p>eg:
/etc/environment</p>
<p>PYTHONPATH=$PYTHONPATH:/opt/folder1:/opt/folder2</p>
<p>/opt/folder1/foo</p>
<p>/opt/folder2/foo</p>
<p>And, if you are trying to import foo file, python will not know which one you want.</p>
<p>from foo import ...   &gt;&gt;&gt; importerror: no module named foo</p>
</div>
<div class="post-text" itemprop="text">
<p>Linux: Imported modules are located in /usr/local/lib/python2.7/dist-packages</p>
<p>If you're using a module compiled in C, don't forget to chmod the .so file after <code>sudo setup.py install</code>.</p>
<pre><code>sudo chmod 755 /usr/local/lib/python2.7/dist-packages/*.so
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In my case, the problem was I was linking to <em>debug</em> <code>python</code> &amp; <code>boost::Python</code>, which requires that the extension be <code>FooLib_d.pyd</code>, not just <code>FooLib.pyd</code>; renaming the file or updating <code>CMakeLists.txt</code> properties fixed the error.</p>
</div>
<div class="post-text" itemprop="text">
<p>My two cents:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/oHpHx.jpg"/></p>
<p>Spit:</p>
<pre><code>Traceback (most recent call last):
      File "bash\bash.py", line 454, in main
        import bosh
      File "Wrye Bash Launcher.pyw", line 63, in load_module
        mod = imp.load_source(fullname,filename+ext,fp)
      File "bash\bosh.py", line 69, in &lt;module&gt;
        from game.oblivion.RecordGroups import MobWorlds, MobDials, MobICells, \
    ImportError: No module named RecordGroups
</code></pre>
<p>This confused the hell out of me - went through posts and posts suggesting ugly syspath hacks (as you see my <code>__init__.py</code> were all there). Well turns out that game/oblivion.py and game/oblivion was confusing python
which spit out the rather unhelpful "No module named RecordGroups". I'd be interested in a workaround and/or links documenting this (same name) behavior -&gt; EDIT (2017.01.24) - have a look at <a href="https://www.python.org/doc/essays/packages/" rel="nofollow noreferrer">What If I Have a Module and a Package With The Same Name?</a> Interestingly normally <em>packages</em> take precedence but apparently our launcher violates this.</p>
<p>EDIT (2015.01.17): I did not mention we use a <a href="https://github.com/wrye-bash/wrye-bash/blob/dev/Mopy/Wrye%20Bash%20Launcher.pyw#L47-L80" rel="nofollow noreferrer">custom launcher</a> dissected <a href="https://stackoverflow.com/questions/27193586/file-string-in-python-traceback/27202474#27202474">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>My problem was that I added the directory with the <code>__init__.py</code> file to PYTHONPATH, when actually I needed to add its parent directory.  </p>
</div>
<div class="post-text" itemprop="text">
<p>If you have tried all methods provided above but failed, maybe your module has <strong>the same name</strong> as a built-in module. Or, a module with <strong>the same name</strong> existing in a folder that has a high priority in <code>sys.path</code> than your module's.</p>
<p>To debug, say your <code>from foo.bar import baz</code> complaints <code>ImportError: No module named bar</code>. Changing to <code>import foo; print foo</code>, which will show the path of <code>foo</code>. Is it what you expect?</p>
<p>If not, Either rename <code>foo</code> or use <a href="https://docs.python.org/3/whatsnew/2.5.html#pep-328" rel="nofollow noreferrer">absolute imports</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are reading this answer says that your <code>__init__.py</code> is in the right place, you have installed all the dependencies and you are still getting the <code>ImportError</code>.</p>
<p>I was facing a similar issue except that my program would run fine when I run it using the PyCharm but was facing above error when I would run it from the terminal. After digging further, I found out that <code>PYTHONPATH</code> didn't have the entry for the project directory. So, I set this using </p>
<pre><code>export PYTHONPATH=$PYTHONPATH:`pwd`  (OR your project root directory)
</code></pre>
<p>There's another way to do this using <code>sys.path</code> as:</p>
<pre><code>import sys
sys.path.insert(0,'&lt;project directory&gt;') OR
sys.path.append('&lt;project directory&gt;')
</code></pre>
<p>You can use insert/append based on the order in which you want your project to be searched.</p>
<p>HTH.</p>
<p><a href="https://stackoverflow.com/questions/40304117/import-statement-works-on-pycharm-but-not-from-terminal">Source</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Fixed my issue by writing <code>print (sys.path)</code> and found out that python was using out of date packages despite a clean install. Deleting these made python automatically use the correct packages.</p>
</div>
<div class="post-text" itemprop="text">
<p>After just suffering the same issue I found my resolution was to delete all <code>pyc</code> files from my project, it seems like these cached files were somehow causing this error.</p>
<p>Easiest way I found to do this was to navigate to my project folder in Windows explorer and searching for <code>*.pyc</code>, then selecting all (<kbd>Ctrl</kbd>+<kbd>A</kbd>) and deleting them (<kbd>Ctrl</kbd>+<kbd>X</kbd>).</p>
<p>Its possible I could have resolved my issues by just deleting the specific <code>pyc</code> file but I never tried this</p>
</div>
<div class="post-text" itemprop="text">
<p>I faced the same problem: <code>Import error</code>. In addition the library've been installed 100% correctly. The source of the problem was that on my PC 3 version of python (anaconda packet) have been installed). This is why the library was installed no to the right place. After that I just changed to the proper version of python in the my IDE PyCharm.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same error. It was caused by somebody creating a folder in the same folder as my script, the name of which conflicted with a module I was importing from elsewhere. Instead of importing the external module, it looked inside this folder which obviously didn't contain the expected modules.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem (Python 2.7 Linux), I have found the solution and i would like to share it.  In my case i had the structure below:</p>
<pre><code>Booklet
-&gt; __init__.py
-&gt; Booklet.py
-&gt; Question.py
default
-&gt; __init_.py
-&gt; main.py
</code></pre>
<p>In 'main.py' I had tried unsuccessfully all the combinations bellow:</p>
<pre><code>from Booklet import Question
from Question import Question
from Booklet.Question import Question
from Booklet.Question import *
import Booklet.Question
# and many othet various combinations ...
</code></pre>
<p>The solution was much more simple than I thought. I renamed the folder "Booklet" into "booklet" and that's it. Now Python can import the class Question normally by using in 'main.py' the code:</p>
<pre><code>from booklet.Booklet import Booklet
from booklet.Question import Question
from booklet.Question import AnotherClass
</code></pre>
<p>From this I can conclude that Package-Names (folders) like 'booklet' must start from lower-case, else Python confuses it with Class names and Filenames.</p>
<p>Apparently, this was not your problem, but <em>John Fouhy's</em> answer is very good and this thread has almost anything that can cause this issue. So, this is one more thing and I hope that maybe this could help others.</p>
</div>
<div class="post-text" itemprop="text">
<p>In my case I was including the path to package.egg folder rather than the actual package underneath. I copied the package to top level and it worked.</p>
</div>
<div class="post-text" itemprop="text">
<p>In my case, because I'm using PyCharm and PyCharm create a 'venv' for every project in project folder, but it is only a mini env of python. Although you have installed the libraries you need in Python, but in your custom project 'venv', it is not available. This is the real reason of 'ImportError: No module named xxxxxx' occurred in PyCharm.
To resolve this issue, you must add libraries to your project custom env by these steps:</p>
<ul>
<li>In PyCharm, from menu 'File'-&gt;Settings</li>
<li>In Settings dialog, Project: XXXProject-&gt;Project Interpreter</li>
<li>Click "Add" button, it will show you 'Available Packages' dialog</li>
<li>Search your library, click 'Install Package'</li>
<li>Then, all you needed package will be installed in you project custom 'venv' folder.</li>
</ul>
<p><a href="https://i.stack.imgur.com/SFpY9.png" rel="nofollow noreferrer"><img alt="Settings dialog" src="https://i.stack.imgur.com/SFpY9.png"/></a></p>
<p>Enjoy.</p>
</div>
<div class="post-text" itemprop="text">
<p>This worked for me:
Created <code>__init__.py</code> file inside parent folder (in your case, inside <code>site-packages</code> folder). And imported like this:</p>
<pre><code>from site-packages.toolkit.interface import interface
</code></pre>
<p>Hope it will be useful for you as well !</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Add an <code>__init__.py</code> file to the directory in which your module is
  located.</p>
</blockquote>
<p>Files named <code>__init__.py</code> are used to mark directories on disk as a Python package directories.</p>
</div>
<span class="comment-copy">@S.Lott: indeed the original question said init.py.bin, maybe that's the whole point... (?)</span>
<span class="comment-copy">@Federico Ramponi:  I just formatted it.  I didn't try to answer it.</span>
<span class="comment-copy">@S. Lott Another problem that was confuising me was to have two installations one did by the root and another one did by me</span>
<span class="comment-copy">I'm having the same <code>ImportError:</code> problem, but I feel it might be because I have multiple Python installations on my Mac and they're not linked properly to my project. Any suggestions?</span>
<span class="comment-copy">Check that you have read permission to that file from python.  See: <a href="http://stackoverflow.com/a/20999950/1657225">stackoverflow.com/a/20999950/1657225</a></span>
<span class="comment-copy">Also, python -c 'import sys; print sys.path' helps -- sometimes the user has placed the files in a path not scanned.</span>
<span class="comment-copy">I'm using the same thing except WinSCP didn't append <code>.bin</code>.</span>
<span class="comment-copy">if I have a empty "__init__.py" will the same thing happen?</span>
<span class="comment-copy">OMG, You rule! This my story:  1. You edited <b>init</b>.py on windows   2. It added a TAB instead spaces  3. You google a lot until finding this post! ;)</span>
<span class="comment-copy">For me the issue was I was using <code>python driver.py</code> when I should have been using <code>python3 driver.py</code> since I installed with <code>pip3</code>.</span>
<span class="comment-copy">Good point! Remark: Since Python 3.3, any directory on sys.path with a name that matches the package name will be recognised.</span>
<span class="comment-copy">isn't this only necessary for relative path references? why <b>must</b> every directory have it ?</span>
<span class="comment-copy">It may also be <code>.:/usr/lib/python</code>, <code>.:/usr/lib/python2.6</code>, <code>.:/usr/lib/python2.7</code> and etc. depending on the version</span>
<span class="comment-copy">For me, the module is in in /usr/local/lib/python3.4/dist-packages but when I type python3 in the terminal (ubuntu), and try to import it, it doesn't allow me, saying that it doesn't exist. "ImportError: no module x exists"</span>
<span class="comment-copy">Adding <code>#!/usr/bin/python</code> at the end of a file should work too, right?</span>
<span class="comment-copy">@Nearoo I don't think that will work. Plus usually this shebang is added at the top of a file.</span>
<span class="comment-copy">On MacOSX fixed it by adding PYTHONPATH=/usr/local/lib/python2.7/site-packages to startup scripts.</span>
<span class="comment-copy">Or on Windows <code>set PYTHONPATH=.</code>.</span>
<span class="comment-copy">This worked for me.  Also COMPLETELY simplified my PYTHONPATH frustrations, as I'd have to update it to an absolute path each time I switch machines.  Thankyouthankyouthankyou.</span>
<span class="comment-copy">A problem I got was that a module was (re)installed by pip with only the root user to access it, so the user that ran the program didn't see it.</span>
<span class="comment-copy">@JānisElmeris can you elaborate more on the above comment, I think I am also facing a similar error. I have my <code>__init__.py</code> files placed in relevant directory but I manually installed a package using <code>setup.py</code>. How did installing a new package would interfere imports.</span>
<span class="comment-copy">@darth_coder, sorry, that was six years ago and I don't remember the case. Also, I'm dealing with Python very little, not at all lately. From what I wrote, I can just think that I installed a package as root, which changed the permissions so that other users didn't have the access they had before.</span>
<span class="comment-copy">I already have a file called <b>init</b>.py.bin, If I change the name to <b>init</b>.py, then I get this error:  /__init__.py", line 1     "utilities", "demo"]     ^ SyntaxError: invalid syntax</span>
<span class="comment-copy">What's in <b>init</b>.py?  Post that as part of your question, please.</span>
<span class="comment-copy">There is nothing, it is empty, It was with the package that I download, do I need to write something in the file?.</span>
<span class="comment-copy">@S.Lott: you don't need to put anything in your <b>init</b>.py right?</span>
<span class="comment-copy">@Eduardo.  Your <b>init</b>.py gets an error.  And you say it's empty.  That's difficult to reconcile.  And it can't be called <b>init</b>.py.bin -- Python would ignore this file.  Typically, it can have nothing in it.</span>
<span class="comment-copy">What does <code>python -m</code> achieve in front of <code>pip install</code>?</span>
<span class="comment-copy">@sporc - when you use the -m command-line flag, Python will import a module or package for you and then run it as a script. When you don't use the -m flag, the file you named is run as just a script.</span>
<span class="comment-copy">Not sure what this answer is trying to say wrt <code>python -m pip...</code> working, but <code>pip...</code> did not: they are effectively the same thing, assuming they're actually in the same <code>python</code> directory.  Possibly, the observed situation was that the stand-alone <code>pip</code> program wasn't available in some older python release (but it is now in latest 2.7 &amp; 3.x).  In that case, the <code>python</code> was in a local virtualenv and <code>pip</code> wasn't, so <code>python -m pip install</code> would install in the local virtualenv, whereas <code>pip</code> would try to install in the system python (and fail w/o sudo). In any case, it doesn't make sense.</span>
<span class="comment-copy">more like the path is off. <code>game.oblivion.RecordGroups !== game/oblivion/patchers/RecordGroups.py</code>  May want to fix that with appending your python code to use: <code>game.oblivion.patchers.RecordGroups</code></span>
<span class="comment-copy">@DwightSpencer: I am sure I imported the "RecordGroups" in <code>game.oblivion.__init__.py</code> but may have to check this</span>
<span class="comment-copy">For me, this yields <code>ImportError: No module named foo</code>.</span>
<span class="comment-copy">This did not work for me.</span>
