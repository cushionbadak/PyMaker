<div class="post-text" itemprop="text">
<p>Can someone explain the rules of joining path, I am confusing with these results:  </p>
<pre><code>print(os.path.join('\\\\192.168.1.1\\A\\B', 'C\\D', '\\E')) #\\192.168.1.1\A\E, B,C,D are thrown away
print(os.path.join('\\\\192.168.1.1\\', 'C\\D', '\\E')) #\\192.168.1.1\\E, C, D are thrown away
print(os.path.join('\\\\192.168.1.1', 'C\\D', '\\E')) #\E, \\192.168.1.1 is thrown away
print(os.path.join('C:\\A\\B', 'C\\D', '\\E')) #C:\E, A, B, C, D are thrown away
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An absolute path (like <code>'\\E'</code>) <em>replaces</em> the current path, rather than being appended to it.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow noreferrer">[Python 3]: os.path.<strong>join</strong>(<em>path, *paths</em>)</a>:</p>
<blockquote>
<p>...<br/>
  If a component is an absolute path, <strong>all previous components are thrown away</strong> and joining continues from the absolute path component.</p>
<p>On Windows, the drive letter is not reset when an absolute path component (e.g., <code>r'\foo'</code>) is encountered. If a component contains a drive letter, all previous components are thrown away and the drive letter is reset. Note that since there is a current directory for each drive, <code>os.path.join("c:", "foo")</code> represents a path relative to the current directory on drive <code>C:</code> <code>(c:foo)</code>, not <code>c:\foo</code>.</p>
</blockquote>
<p>So (in <code>os.path.join()</code>), the last absolute path (and <em>UNC</em> path <strong>is</strong> absolute) discards any other path preceding it.</p>
</div>
<span class="comment-copy">Don't use path separators in the arguments to <code>os.path.join()</code>. The whole point of <code>os.path.join()</code> is that it does that for you.</span>
