<div class="post-text" itemprop="text">
<p>Geeks/Nerds/Fellow Pythonists lend me your ears!</p>
<p>I wrote a script in Python 2.7 that uses the set() function. This is a built in data structure for only storing unique values. However I am running the script in a different environment. I know I should of coded in the same environment as the production environment. So in the production environment there is an ancient version of python running. From what I understand this is Python 2.2. Also, this Python interpreter is running on a Java Virtual Machine (JVM) which makes this Jython. Very cool. :) Anyway for whatever reason the set() data structure is not included in this version of Python. <strong>Is there anyway I can create my own set using a list and then looking for only unique values?</strong> This type of algorithm writing is currently over my head. Could someone point me in a helpful direction? </p>
<p>When running this code I see that the version is Python 2.2. </p>
<pre><code>import sys
print sys.version_info
</code></pre>
<p>This code returns: <code>(2, 2, 1, 'final', 0)</code></p>
<p>My code that throws the error is: </p>
<pre><code>machine_set = set() #create a set, an empty set at that
</code></pre>
<p>The error I receive is as follows: </p>
<pre><code>&lt;me@linuxbox ~&gt;$ java -cp $WEBLOGIC weblogic.WLST lolcats.py

Initializing WebLogic Scripting Tool (WLST) ...

Welcome to WebLogic Server Administration Scripting Shell

Type help() for help on available commands

Problem invoking WLST - Traceback (innermost last):
  File "/home/oracle/lolcats.py", line 18, in ?
TypeError: set() takes at least 2 arguments (0 given)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, you may not be stuck on Jython 2.2. It looks like 2.2.1 is what comes with your WLST, but Google suggests that <a href="https://technology.amis.nl/2015/10/04/how-to-use-wlst-as-a-jython-2-7-module/" rel="nofollow noreferrer">you may be able to use WLST with Jython 2.7</a>. If you can use 2.7, that's likely to be a much nicer environment than 2.2. (It's still pretty dated by non-Jython standards, but it beats the heck out of 2.2.)</p>
<hr/>
<p>If that's not viable, still, don't use a list. Back when <code>set</code> didn't exist, the way to do sets was with a <code>dict</code> you'd ignore the values of. Same time complexity as a <code>set</code>, unlike what you'd get if you tried to use <code>list</code> for the job. The old <a href="https://docs.python.org/2/library/sets.html" rel="nofollow noreferrer"><code>sets</code></a> module that came before the built-in <code>set</code> type was actually implemented as a wrapper around dicts, and if you were on 2.3, I'd recommend <code>sets.Set</code>, but you're on 2.2.</p>
<pre><code># Add a value
d[val] = None

# Remove a value
del d[val]

# Check if a value exists (good thing it's not 2.1, or you'd need has_key)
key in d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend using a dict's keys for your set. Just set the values to something lightweight, like <code>1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 2.3-2.7 have a <a href="https://docs.python.org/2/library/sets.html" rel="nofollow noreferrer"><code>sets</code></a> module (which is deprecated in 2.6+, because the new builtins <code>set</code> and <code>frozenset</code> do the same thing but better).</p>
<p>You don't have this in 2.2, but the module is implemented in pure Python. So—assuming you respect the <a href="https://docs.python.org/3/license.html" rel="nofollow noreferrer">Python license</a>—you can just <a href="https://github.com/python/cpython/blob/2.3/Lib/sets.py" rel="nofollow noreferrer">copy it from the 2.3 source</a> into your project. In fact, I have some code in an ancient project that starts with this:</p>
<pre><code>try:
    set
except NameError:
    try:
        from sets import Set as set
    except ImportError:
        from sets23 import Set as set
</code></pre>
<p>… which implies that just copying 2.3's <code>sets.py</code> into your project as <code>sets23.py</code> works for 2.2. But I don't have a 2.2 to test on, so… I won't <em>promise</em> that it works without any porting, but I <em>think</em> it does.</p>
<hr/>
<p>Alternatively, those historical pre-2.3 set classes mentioned in the <code>sets</code> docs are still available in the <a href="http://code.activestate.com/recipes/langs/python/tags/set/" rel="nofollow noreferrer">ActiveState recipes collection</a>. Not everything has been <a href="https://github.com/ActiveState/code/tree/master/recipes/Python" rel="nofollow noreferrer">migrated to the GitHub repo</a> (or, if it has, the new search isn't complete), but I can see <a href="https://github.com/ActiveState/code/tree/master/recipes/Python/106469_Yet_another_Set_class_for_Python" rel="nofollow noreferrer"><code>106469_Yet_another_Set_class_for_Python</code></a>, which is a minor fork of the original Greg Wilson implementation that <code>sets</code> is also a fork of.</p>
</div>
<span class="comment-copy">I hope you've got a migration path off of this ancient Jython.</span>
<span class="comment-copy">Use a dictionary instead. Set items become keys and values are all <code>None</code>.</span>
<span class="comment-copy">Dictionary keys are basically a set. Could you just create a dictionary with blank values and use membership tests? What do you need the set to do?</span>
<span class="comment-copy">The <a href="https://docs.python.org/2/library/sets.html" rel="nofollow noreferrer"><code>sets</code></a> library from <a href="https://github.com/python/cpython/blob/2.3/Lib/sets.py" rel="nofollow noreferrer">Python 2.3-2.7</a> is in pure Python, and should be compatible with 2.2, so you can just copy and paste it into your own project.</span>
<span class="comment-copy">@abarnert: As long as you respect the license.</span>
<span class="comment-copy">Thanks for the details (code examples) in the answer. I will try using a dictionary. Also, thanks for pointing out the article on WLST and Jython 2.7. I will have to see if I can get this update. :)</span>
<span class="comment-copy">Thank-you @gilch for the recommendation. I will try this. :)</span>
<span class="comment-copy">Awesome. I may try this. :D</span>
