<div class="post-text" itemprop="text">
<p>Given a list of positive integers, how can we test if the list contains <em>n</em> consecutive numbers with a difference of 1 and return the result?</p>
<p><em>For example:</em> </p>
<ul>
<li><p>Testing the following list <strong>[10, 19, 5, 6, 7, 8, 2, 7, 10, 12]</strong> with <strong><em>n=4</em></strong> would return <strong>[5, 6, 7, 8]</strong>, because there one section of this list that contains four consecutive integers with a difference of 1. </p></li>
<li><p>Testing the following list <strong>[5, 2, 12, 10, 11, 12, 14, 95]</strong> with <strong><em>n=5</em></strong> would return <strong>False</strong>, because there is no section of this list that contains five consecutive integers with a difference of 1.</p></li>
<li><p>Finally, lets test the following list <strong>[8, 10, 50, 10, 11, 12, 8, 9, 40, 41, 42]</strong> with <strong><em>n=3</em></strong> would return <strong>[[10, 11, 12], [40, 41, 42]]</strong> because we have two sections in the same list that contains three consecutive integers with a difference of 1.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">reducing</a> your list.</p>
<pre><code>from functools import reduce


def get_all_consecutives(iterable, consecutive_limit):
    consecutives = []

    def consecutive_reducer(accumulator, next_item):
        if not accumulator:
            accumulator.append(next_item)
        else:
            if next_item - accumulator[-1] == 1:
                accumulator.append(next_item)
            else:
                accumulator = [next_item]

        if len(accumulator) == consecutive_limit:
            consecutives.append(accumulator)

        return accumulator

    reduce(consecutive_reducer, iterable, [])

    if not consecutives:
        return False
    elif len(consecutives) == 1:
        return consecutives[0]
    else:
        return consecutives


iterable = [10, 19, 5, 6, 7, 8, 2, 7, 10, 12]
consecutives = get_all_consecutives(iterable, 4)
print(consecutives)  # [5, 6, 7, 8]

iterable = [5, 2, 12, 10, 11, 12, 14, 95]
consecutives = get_all_consecutives(iterable, 5)
print(consecutives)  # False

iterable = [8, 10, 50, 10, 11, 12, 8, 9, 40, 41, 42]
consecutives = get_all_consecutives(iterable, 3)
print(consecutives)  # [[10, 11, 12], [40, 41, 42]]
</code></pre>
</div>
<span class="comment-copy">What have you tried yourself? Where exactly are you stuck?</span>
<span class="comment-copy">What about overlaps? E.g if there are 5 consecutive numbers for n=4. Return both overlapping matches or just the first?</span>
<span class="comment-copy">@petezurich I am stuck with the entire concept, I require a function that can do this computation for me. In the current context, I have a list of integers that have been appended in a loop to a list after passing a conditional, once the loop ends I want to check the list for any 4 consecutive integers and return only those integers.</span>
<span class="comment-copy">@schwobaseggl both</span>
<span class="comment-copy">The PC won't blow up if you try something (I'm insured against freak accidents). You just need to break the problem down into smaller steps and eat up the errors. Go in steps and you'll learn far more than us just answering it for you.</span>
