<div class="post-text" itemprop="text">
<p>Alright so for a living I program <a href="https://new.abb.com/products/robotics" rel="nofollow noreferrer">ABB industrial robots</a>, and the programming language we use is called <a href="https://en.wikipedia.org/wiki/RAPID" rel="nofollow noreferrer">Rapid</a>. </p>
<p>One really cool thing I can do in Rapid is called a trap routine. And it's like a while loop but instead of looping through the whole loop before it checks a condition it will break literally as soon as the event its waiting for happens. </p>
<p>I suppose it is similar to an event listener in javascript. It's like it runs in the background of the normal program. I want to do this in python. </p>
<p>I have little formal CS education so I'm not exactly sure what this concept is. Sorry if it's a bit vague I'm not really sure how to ask it in a clear way. </p>
</div>
<div class="post-text" itemprop="text">
<p>Like most languages, so does Python handle <a href="https://en.wikipedia.org/wiki/Signal_(IPC)" rel="nofollow noreferrer">system signals</a> by using handler functions. For more details, take a look at the <a href="https://docs.python.org/3/library/signal.html" rel="nofollow noreferrer">Signals chapter</a> which talks about receiving and sending signals, with examples e.g. <a href="https://pymotw.com/3/signal/" rel="nofollow noreferrer">here</a>.</p>
<p>In short, you can bind a function to one or more signals:</p>
<pre><code>&gt;&gt;&gt; import signal
&gt;&gt;&gt; import sys
&gt;&gt;&gt; import time
&gt;&gt;&gt; 
&gt;&gt;&gt; # Here we define a function that we want to get called.
&gt;&gt;&gt; def received_ctrl_c(signum, stack):
...     print("Received Ctrl-C")
...     sys.exit(0)
... 
&gt;&gt;&gt; # Bind the function to the standard system Ctrl-C signal.
&gt;&gt;&gt; handler = signal.signal(signal.SIGINT, received_ctrl_c)
&gt;&gt;&gt; handler
&lt;built-in function default_int_handler&gt;
&gt;&gt;&gt; 
&gt;&gt;&gt; # Now let’s loop forever, and break out only by pressing Ctrl-C, i.e. sending the SIGINT signal to the Python process.
&gt;&gt;&gt; while True:
...     print("Waiting…")
...     time.sleep(5)
... 
Waiting…
Waiting…
Waiting…
^CReceived Ctrl-C
</code></pre>
<p>In your specific case, find out which signal(s) the robot sends to your Python process (or whichever process listens to signals) and then act on them as shown above.</p>
</div>
<span class="comment-copy">Would it check the condition after each statement, or even while a statement is being executed?</span>
<span class="comment-copy">It would check after each statement. As an example while the robot was executing a function if it lost a signal or something from a machine it was communicating with it would immediately execute another function I had told it to use in case that certain event happened.</span>
<span class="comment-copy">Take a look at how Python handles <a href="https://docs.python.org/3/library/signal.html" rel="nofollow noreferrer">signals</a>, with example e.g. <a href="https://pymotw.com/3/signal/" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">Yes this seems to be what I am looking for. Thank you.</span>
<span class="comment-copy">Please add beef to your answer @Jens ; as it stands, it qualifies as a comment. For instance linking to an outside code resource is brittle as the link may become obsolete; it is recommended to copy and paste examples in your answer; thank you.</span>
<span class="comment-copy">What they said. Links that support an answer are great, but the answer needs to have useful on-site content too. Of course, the official docs link is fairly resistant to link rot, and pymotw should be ok too, but please see <a href="https://meta.stackexchange.com/questions/225370/your-answer-is-in-another-castle-when-is-an-answer-not-an-answer" title="your answer is in another castle when is an answer not an answer">meta.stackexchange.com/questions/225370/…</a></span>
<span class="comment-copy">Ok, I “beefed up” the answer… better? ☺️</span>
<span class="comment-copy">Yes this worked thank you. Although this wasn't for the robots this was for personal use. Thank you though!</span>
