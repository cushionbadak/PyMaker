<div class="post-text" itemprop="text">
<p>Below is an  example code I got from <a href="https://tutorialedge.net/python/concurrency/python-threadpoolexecutor-tutorial/" rel="nofollow noreferrer">https://tutorialedge.net/python/concurrency/python-threadpoolexecutor-tutorial/</a></p>
<pre><code>from concurrent.futures import ThreadPoolExecutor
import threading
import random

taskarr = []

def task(n,c):
    print("Executing our Task = {} and {}".format(n,c))
    print("Task Executed {}".format(threading.current_thread()))

def main():
    executor = ThreadPoolExecutor(max_workers=3)
    task1 = executor.submit(task(1,'A'))
    task2 = executor.submit(task(2,'B'))

if __name__ == '__main__':
    main()
</code></pre>
<p>in this, if executor.submit is returned to simple variable task1, it works. But my requirement is to return it to an array. so when i do,
    taskarr[0] = executor.submit(task(1,'A'))
it throws error as,</p>
<pre><code>TypeError: 'function' object does not support item assignment
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I could not reproduce your <code>TypeError</code>; apparently you have some more code that you did not show us. As rocksportrocker pointed out in their <a href="https://stackoverflow.com/questions/52314735/return-of-threadpoolexecutor-to-array-of-tasks#comment91577232_52314735">comment</a>, you can't assign values to an index that does not yet exist, as in your attempt to assign the future returned from <code>executor.submit()</code> to index 0 of the empty list <code>typearr</code>. This will raise the mentioned <code>IndexError</code>.</p>
<p>However, I could produce some <code>TypeError</code> and that is due to the fact that you call <code>submit</code> incorrectly. </p>
<p>The <a href="https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.submit" rel="nofollow noreferrer">Executor documentation</a> defines the parameter <code>fn</code> to be a callable object, e.g. a function. Now, when you call <code>submit</code> like you do:</p>
<pre><code>executor.submit(task(1,'A'))
</code></pre>
<p><code>task(1,'A')</code> is executed in your main thread and its return value (<code>None</code> in your case) is then passed to the pool thread. The pool thread then tries to execute <code>None(1, 'A')</code> and raises a <code>TypeError: 'NoneType' object is not callable</code>, which you don't see, because it is wrapped in the future. You would see it if you called <code>task1.result()</code>.</p>
<p>That means, that it is your main thread that executes your task instead of your pool threads, as should have become visible from your second print statement in <code>task</code>:</p>
<pre><code>Task Executed &lt;_MainThread(MainThread, started 11064)&gt;
</code></pre>
<p>In order to have your pool threads do the work, you need to pass the function object <code>task</code> to <code>executor.submit</code>, like so:</p>
<pre><code>taskarr = []

def task(n,c):
    print("Executing our Task = {} and {}".format(n,c))
    time.sleep(3)  # added this to make sure that two different threads from the pool get a task
    print("Task Executed {}".format(threading.current_thread()))

def main():
    executor = ThreadPoolExecutor(max_workers=3)
    taskarr.append(executor.submit(task, 1,'A'))
    taskarr.append(executor.submit(task, 2,'B'))
    # to show that the main thread continues to execute
    # while the pool threads work on the tasks
    print("{}: tasks submitted".format(threading.current_thread().name))

if __name__ == '__main__':
    main()
</code></pre>
<p>Output:</p>
<pre><code>Executing our Task = 1 and A
Executing our Task = 2 and B
MainThread: tasks submitted
Task Executed &lt;Thread(ThreadPoolExecutor-0_0, started daemon 12192)&gt;
Task Executed &lt;Thread(ThreadPoolExecutor-0_1, started daemon 11800)&gt;
</code></pre>
</div>
<span class="comment-copy"><code>taskarr[0] = executor.submit(task(1,'A'))</code> should trigger an  <code>IndexError</code>, the described <code>TypeError</code> will be raised if you did <code>task[0] = executor.submit(task(1,'A')) </code> . Why don't you use <code>taskarr.append</code>?</span>
