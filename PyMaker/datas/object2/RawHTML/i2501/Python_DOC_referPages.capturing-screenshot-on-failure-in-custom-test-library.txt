<div class="post-text" itemprop="text">
<p>I'm currently using ROBOT for some automated testing, except I've run into a problem.
Anything that fails in the .robot file using a SeleniumLibrary keyword accurately captures screenshots as expected.</p>
<p>Unfortunately, I have some custom libraries alongside the SeleniumLibrary which I would like to do the same thing, but it does not. So if I call a keyword from my CustomLibrary1 for example, and it fails doing a 
<code>self.selib.wait_until_page_contains("Hello")</code>
then it will simply fail the test without capturing a screenshot.</p>
<p>The only workarounds I have been able to find so far are:</p>
<ol>
<li>Throwing each and every keywords body into a <code>try</code> and using </li>
</ol>
<p><code>except:
    self.selib.capture_page_screenshot()</code> (not ideal as I have hundreds of keywords).</p>
<ol start="2">
<li>Adding a Test Teardown to every test I have, and using </li>
</ol>
<p><code>Run Keyword If Test Failed    Capture Test Screenshot</code>, which is also not ideal since, if the test fails while running a SeleniumLibrary keyword in the .robot file, then two screenshots will be captured and I have some hybrid data driven/keyword driven tests which do not call the test teardown between tests and only at the end of all the tests.</p>
<p>Is there a way to register a "run_on_failure" feature into custom libraries?</p>
</div>
<div class="post-text" itemprop="text">
<p>Even if you have hundreds of keyword the <code>try</code> block is the best way to do that.</p>
<p>Maybe you could manage it like so:</p>
<pre class="lang-py prettyprint-override"><code>keywords = ['Hello', 'World'] # etc.

# Include the try block in a function.
def try_keyword(keyword):
    try:
        self.selib.wait_until_page_contains(keyword)
    except:
        self.selib.capture_page_screenshot()
    # Eventually do_something_else()

# Pass a function as an argument
def try_function_and_keyword(function, keyword):
    try:
        function(keyword)
    except:
        self.selib.capture_page_screenshot()
    # Eventually do_something_else()

for keyword in keywords:
    try_keyword(keyword)
    try_function_and_keyword(driver.find_element_by_id, keyword)
</code></pre>
<p>I assume that possible exceptions involve your script.</p>
<p>If so, perhaps, using the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging</a> module may be useful.
Or, even if possible exceptions involve the site, you may need request or response data. You can give a look to <a href="https://github.com/lightbody/browsermob-proxy" rel="nofollow noreferrer">browsermob-proxy</a>, a really useful module.</p>
</div>
<span class="comment-copy">You could try to create a listener that will check that will run at the end of every keyword and if the keyword is from your library and failed than handle it. <a href="http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener-interface" rel="nofollow noreferrer">robotframework.org/robotframework/latest/â€¦</a></span>
