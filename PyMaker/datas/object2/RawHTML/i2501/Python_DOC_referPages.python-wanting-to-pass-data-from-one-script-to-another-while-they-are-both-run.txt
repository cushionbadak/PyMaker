<div class="post-text" itemprop="text">
<p>So I'm making a Discord Bot that posts when a person goes live on Twitch.tv. At the moment I have a Python program that runs the bot and a program that runs a mini server to receive the data from the Twitch server(webhook). I am unsure on how to pass on the data I receive from my server to the discord bot. Both programs have to be running at the same time.</p>
<p><strong>DiscordBot</strong></p>
<pre><code>import discord


client = discord.Client()




async def goes_live(data):
    print(data)
    print('Going Live')
    msg = '--- has gone live'
    await client.send_message(discord.Object(id='---'), msg)


@client.event
async def on_message(message):
    if message.author == client.user:
        return

    message.content = message.content.casefold()


@client.event
async def on_ready():
    print('Logged in as')
    print(client.user.name)
    print(client.user.id)
    print('------')


client.run('---')
</code></pre>
<p><strong>Web server</strong></p>
<pre><code>import web

urls = ('/.*', 'hooks')

app = web.application(urls, globals())


class hooks:

    def POST(self):
        data = web.data()
        print("")
        print('DATA RECEIVED:')
        print(data)
        print("")

        return 'OK'

    def GET(self):
        try:
            data = web.input()
            data = data['hub.challenge']
            print("Hub challenge: ", data)
            return data
        except KeyError:
            return web.BadRequest



if __name__ == '__main__':
    app.run()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Are the bot and the mini server running on the same machine? In that case you just make the server writing a file to a location where the bot can access and check periodically.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about using a Flask server that handles the communication between the 2 programs. You could define custom endpoints that would be able to grab the data as well as send it to the discord script.</p>
<pre><code>@app.route('/ep1', methods = ['GET','POST'])
def ep1():
    if request.method == 'POST':
        #do something for a POST request. 
    else:
        #do something for a GET request.
</code></pre>
<p>You can use this structure to construct something that listens for changes and then publishes those to the discord bot. 
Also hosting this server on heroku is something that you might want to consider</p>
</div>
<span class="comment-copy">The relevant part of the documentation: <a href="https://docs.python.org/3/library/ipc.html" rel="nofollow noreferrer">Interprocess Communication and Networking</a>.  Note that <a href="https://stackoverflow.com/questions/tagged/discord.py">discord.py</a> already uses <code>asyncio</code>, so that's probably a good place to start looking.</span>
<span class="comment-copy">Maybe expand your answer a bit to show how that could be done.</span>
<span class="comment-copy">Sending the data to the discord bot is what the question's about, and you sort of gloss over it here.  How exactly are you proposing to do that?</span>
