<div class="post-text" itemprop="text">
<p>I need a help to retrieve the value of a dictionary.
The dictionary: </p>
<pre><code>{'m': '110', 'a': '0', 's': '111', 'y': '10'}
</code></pre>
<p>And the probabilities of the character:</p>
<pre><code>[('m', 0.16666666666666666), ('a', 0.5), ('s', 0.16666666666666666), ('y', 0.16666666666666666)]
</code></pre>
<p>The problem is how to retrieve the length of each character and multiply it with the probabilities of each character to get the average length of character. For example:</p>
<pre><code>a=1*0.5
y=2*0.16666666666666666
m=3*0.16666666666666666
s=3*0.16666666666666666
</code></pre>
<p>The final answer should be:</p>
<pre><code>average length of character: 1.83
</code></pre>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>sum1=0
for prob in probs:
    sum1+=len(d[prob[0]])*prob[1]
print("average length of character:",sum1)
</code></pre>
<h3>Output</h3>
<blockquote>
<p>average length of character: 1.8333333333333333</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>sum</code> with a generator expression:</p>
<pre><code>d = {'m': '110', 'a': '0', 's': '111', 'y': '10'}
p = [('m', 0.16666666666666666), ('a', 0.5), ('s', 0.16666666666666666), ('y', 0.16666666666666666)]
print('average length of character: %.2f' % sum(len(d[k]) * v for k, v in p))
</code></pre>
<p>This outputs:</p>
<pre><code>average length of character: 1.83
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> with an appropriate <a href="https://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">generator expression</a> producing the probability weighted lengths:</p>
<pre><code>chars = {'m': '110', 'a': '0', 's': '111', 'y': '10'}
probs = [('m', 0.16666666666666666), ('a', 0.5), ('s', 0.16666666666666666), ('y', 0.16666666666666666)]


avg_len = sum(p * len(chars[c]) for c, p in probs)
#             ^^^^^^^^^^^^^^^^^ --- prob-weighted length of char c
# 1.8333333333333333

print('average length of character: {:.2f}'.format(avg_len))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>lambda</code> and the built-in <code>sum</code> function:</p>
<pre><code>d = {'m': '110', 'a': '0', 's': '111', 'y': '10'}
prob = [('m', 0.16666666666666666), ('a', 0.5), ('s', 0.16666666666666666), ('y', 0.16666666666666666)]

avg = sum(map(lambda p : (len(d[p[0]])*p[1]), prob))
</code></pre>
<p><a href="https://medium.com/@happymishra66/lambda-map-and-filter-in-python-4935f248593" rel="nofollow noreferrer">This</a> is a very nice guide about how to use lambda in Python</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; d = {'m': '110', 'a': '0', 's': '111', 'y': '10'}
&gt;&gt;&gt; a = dict([('m', 0.16666666666666666), ('a', 0.5), ('s', 0.16666666666666666), ('y', 0.16666666666666666)])
&gt;&gt;&gt; sum([len(d[key])*a[key] for key in d.keys()])
1.8333333333333333
</code></pre>
<p>This simple approach might help you getting your answer</p>
</div>
<div class="post-text" itemprop="text">
<p>Using Python 3, that would be:</p>
<pre><code>strings = {'m': '110', 'a': '0', 's': '111', 'y': '10'}
probabilities = dict ([('m', 0.16666666666666666), ('a', 0.5), ('s', 0.16666666666666666), ('y', 0.16666666666666666)])

averageLength = 0
for key in strings:
    averageLength += len (strings [key]) * probabilities [key]

print (averageLength)
</code></pre>
<p>Note: This program uses a simple loop, which I think is easy to comprehend if you're new to Python. Other answers use a thing called a list comprehension. Once you understand what these do, they are to be preferred in many cases, although a bit harder to debug since you can't single-step through them.</p>
</div>
