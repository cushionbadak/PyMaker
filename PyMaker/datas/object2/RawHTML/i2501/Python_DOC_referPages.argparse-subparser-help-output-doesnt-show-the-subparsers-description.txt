<div class="post-text" itemprop="text">
<p>If I create a subparser with a specific help string, this string is not displayed when the user runs <code>myprog command --help</code>:</p>
<pre><code>parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(help="sub-command help")

parser_command = subparsers.add_parser("command", help="Issue a command")
parser.parse_args()
</code></pre>
<p>The top-level help shows this <code>command</code> subcommand with the description "Issue a command" alongside:</p>
<pre><code>$ python prog.py --help
usage: prog.py [-h] {command} ...

positional arguments:
  {command}   sub-command help
    command   Issue a command

optional arguments:
  -h, --help  show this help message and exit
</code></pre>
<p>However the subcommand's help doesn't show this description:</p>
<pre><code>$ python prog.py command --help
usage: prog.py command [-h]

optional arguments:
  -h, --help  show this help message and exit
</code></pre>
<p>What I would expect is for the subcommand's help to print out what the subcommand is actually for. I.e. I expected to see the text "Issue a command" somewhere in the output to <code>python prog.py command --help</code>.</p>
<p>Is there a way to include this text in the subcommand's help output? Is there another subparser attribute that can be used to provide a description of the subcommand?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>add_parser</code> method accepts (most) of the parameters that a <code>ArgumentParser</code> constructor does.</p>
<p><a href="https://docs.python.org/3/library/argparse.html#sub-commands" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#sub-commands</a></p>
<p>It's easy to overlook this sentence in the <code>add_subparsers</code> paragraph:</p>
<blockquote>
<p>This object has a single method, add_parser(), which takes a command name and any ArgumentParser constructor arguments, and returns an ArgumentParser object that can be modified as usual.</p>
</blockquote>
<pre><code>In [93]: parser=argparse.ArgumentParser()

In [94]: sp = parser.add_subparsers(dest='cmd',description='subparses description')

In [95]: p1 = sp.add_parser('foo',help='foo help', description='subparser description')
In [96]: p1.add_argument('--bar');
</code></pre>
<p>help for the main parser:</p>
<pre><code>In [97]: parser.parse_args('-h'.split())
usage: ipython3 [-h] {foo} ...

optional arguments:
  -h, --help  show this help message and exit

subcommands:
  subparses description

  {foo}
    foo       foo help
...
</code></pre>
<p>help for the subparser:</p>
<pre><code>In [98]: parser.parse_args('foo -h'.split())
usage: ipython3 foo [-h] [--bar BAR]

subparser description

optional arguments:
  -h, --help  show this help message and exit
  --bar BAR
...
</code></pre>
</div>
<span class="comment-copy">...well, if there's one piece of value to having a lot of Imaginary Internet Points, I suppose it's being able to override dumb things in the system (like prohibitions against titles containing "help" as a substring).</span>
<span class="comment-copy">Thank you, this is exactly what I was looking for. Although the <code>help</code> and <code>description</code> content could be the same value, this distinction allows me to create a short top-level one-line help string and a longer, more detailed descriptive string when examining a specific subcommand. Perfect.</span>
