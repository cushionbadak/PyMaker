<div class="post-text" itemprop="text">
<p>Say I have the <code>Main</code> processes and 2 additional processes <code>A</code> and <code>B</code>. In this program A is supposed to send data to B. If we have some code like this:</p>
<pre><code>from multiprocessing import Process, Queue

def process_a(iterable, q):

    for x in iterable:
        q.put(x)

def process_b(q):

    while some_condition():
        x = q.get()


iterable = some_iterable()
q = Queue()

pa = Process(target=process_a, args=(iterable, q))
pb = Process(target=process_b, args=(q,))

pa.start()
pb.start()

pa.join()
pb.join()
</code></pre>
<p>given that the Queue <code>q</code> was created in the Main process, does the data flow like this?</p>
<pre><code>A =&gt; Main =&gt; B
</code></pre>
<p>If so, is there a way to have a <code>Queue</code> initialized on <code>B</code> and passed to <code>A</code> such that data goes directly from <code>A</code> to <code>B</code> skipping <code>Main</code>?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>given that the Queue q was created in the Main process, does the data flow like this?</p>
</blockquote>
<pre><code>A =&gt; Main =&gt; B
</code></pre>
<p>No. As explained in <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue" rel="noreferrer">the docs</a>, a <code>Queue</code> is just an auto-synchronizing wrapper around a <code>Pipe</code>. When you pass a <code>Queue</code> to a child, you're just passing that <code>Pipe</code> and some locks.</p>
<p>And the <code>Pipe</code> is just a wrapper around an operating system pipe. When you pass a <code>Pipe</code> to a child, you're just passing the pipe's file descriptor/handle.</p>
<p>Ignoring the locks, process A is basically just writing to a pipe, and process B is just reading from it.</p>
<p>The locks do make things a bit more complicated (and may also mean that process A spins up a hidden background thread), but they still don't involve the main process at all.</p>
<p>Unless the main process calls a method on a queue, it has nothing to do with that queue at all.</p>
</div>
