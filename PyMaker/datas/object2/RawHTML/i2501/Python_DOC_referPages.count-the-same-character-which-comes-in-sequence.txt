<div class="post-text" itemprop="text">
<pre><code>def count_squences(string):

    i= 0 
    total = 0
    total_char_list = []

    while i &lt; len(string):
        print(string[i])

        if string[i] == "x":
            total += 1
        if string[i] == "y":

            total_char_list.append(total)
            total = 0

        i = i + 1

    return total_char_list


print(count_squences("xxxxyyxyxx"))
</code></pre>
<p>I am trying to return the most used x characters in a file format. for example this functions should return [4, 1, 2].</p>
<p>For example if string is "xxxxxyxxyxxx' it should return [5, 2, 3]</p>
<p>My function does not return the correct list. Any helps would be really appreciated. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You are not resetting your counter when you encounter a <code>y</code> character, and you should only append to <code>total_char_list</code> if there was at least one <code>x</code> character counted by the time you find a <code>y</code> character (<code>y</code> characters could be duplicated too):</p>
<pre><code>total = 0
while i &lt; len(string):
    if string[i] == "x":
        total += 1
    if string[i] == "y":
        if total:
            total_char_list.append(total)
        total = 0

    i = i + 1
</code></pre>
<p>Next, when the loop <em>ends</em> and <code>total</code> is not zero, you need to append that value too, or you won't be counting <code>'x'</code> characters at the end of the sequence:</p>
<pre><code>while ...:
    # ...

if total:
    # x characters at the end
    total_char_list.append(total)
</code></pre>
<p>Next, you really want to use a <code>for</code> loop to loop over a sequence. You are given the individual characters that way:</p>
<pre><code>total = 0
for char in string:
    if char == 'x':
        total += 1
    if char == 'y':
        if total:
            total_charlist.append(total)
        total = 0

if total:
    # x characters at the end
    total_char_list.append(total)
</code></pre>
<p>You can make this faster with <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby()</code></a>:</p>
<pre><code>from itertools import groupby

def count_squences(string):
    return [sum(1 for _ in group) for char, group in groupby(string) if char == 'x']
</code></pre>
<p><code>groupby()</code> divides up an iterable input (such as a string) into separate iterators per group, where a group is defined as any consecutive value with the same <code>key(value)</code> result. The default <code>key()</code> function just returns the value, so <code>groupby(string)</code> gives you groups of consecutive characters that are the same. <code>char</code> is the repeated character, and <code>sum(1 for _ in group)</code> takes the length of an iterator.</p>
<p>You can then make it more generic, and count all groups:</p>
<pre><code>def count_all_sequences(string):
    counts = {}
    for char, group in groupby(string):
        counts.setdefault(char, []).append(sum(1 for _ in group))
    return counts
</code></pre>
<p>The same can be done with a regular expression:</p>
<pre><code>import re

def count_all_sequences(string):
    counts = {}
    # (.)(\1*) finds repeated characters; (.) matching one, \1 matching the same
    # This gives us (first, rest) tuples, so len(rest) + 1 is the total length
    for char, group in re.findall(r'(.)(\1*)', string):
        counts.setdefault(char, []).append(len(group) + 1)
    return counts
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't initialize the value of <code>total</code> between the sequences so it keeps on counting. </p>
<pre><code>def count_squences(string):
    i= 0 
    total = 0
    total_char_list = []
    while i &lt; len(string):
        if string[i] == "x":
            total += 1
        if string[i] == "y":
            if total != 0:
                total_char_list.append(total)
                total = 0
        i = i + 1
    if total != 0:
       total_char_list.append(total)
    return total_char_list
</code></pre>
<p>Update (17:00) - fixed the original procedure and I thought of a better solution -</p>
<pre><code>my_str = "xxxxyyxyxx"
[len(z) for z in re.split("y+", my_str)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Edited for function format:</p>
<pre><code>def count_sequences(string):
    return [len(x) for x in re.findall(r"x+", string)]

count_sequences("xxxxyyxyxx")
</code></pre>
<p>returns [4,1,2]</p>
</div>
<span class="comment-copy">What isn't working?</span>
<span class="comment-copy"><code>def count_x(s):return [len(t) for t in re.findall('x+', s)]</code> will also accomplish what you want.</span>
<span class="comment-copy">@StevenRumbalski: good point! Updated.</span>
<span class="comment-copy">This will append multiple zeros when there are consecutive <code>y</code> characters.</span>
<span class="comment-copy">Thanks @MartijnPieters, I fixed it + another fix</span>
