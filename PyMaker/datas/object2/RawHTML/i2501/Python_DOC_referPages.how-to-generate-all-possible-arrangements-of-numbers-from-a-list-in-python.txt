<div class="post-text" itemprop="text">
<p>Problem: Given a list of 3 numbers <code>[4, 8, 15]</code> generate a list of all possible arrangements of the numbers.</p>
<p>That's <code>3*3*3 = 27</code> unique entries from what I can gather. Something like:</p>
<pre><code>4,4,4
4,4,8
4,4,15
4,8,4
4,8,8
4,8,15
4,15,4
4,15,8
4,15,15
...
</code></pre>
<p>I tried using <code>itertools.permutations</code> and <code>itertools.combinations</code> but I can't get all 27 values.</p>
<p><code>list(itertools.permutations([4,8,15],3))</code> for example only prints 6 values: </p>
<p><code>[(4, 8, 15), (4, 15, 8), (8, 4, 15), (8, 15, 4), (15, 4, 8), (15, 8, 4)]</code></p>
<p>Is there something that's available  out of the box or is this more of a "roll your own" problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>you are confusing <code>permutations</code> with <code>product</code>:</p>
<pre><code>len(list(itertools.permutations([4,8,15],3)))
# return 6
len(list(itertools.product([4,8,15], repeat=3)))
# return 27
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answer is still in <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a>. The function called <code>product</code> does the trick; it takes two arguments: first is the iterable which has the usable elements, second is the amount of times the iterable can repeat itself.</p>
<p><code>itertools.product([4,8,15],repeat=3)</code> would return the permutations you want in your example.</p>
<p>The reason <code>permutations</code> or <code>combinations</code> don't work for you is because they don't allow items to repeat themselves; <code>product</code> calculates the cartesian product, which allows for repetition of items.</p>
</div>
<div class="post-text" itemprop="text">
<p>This code prints what you requested :)</p>
<pre><code>list = [4,8,15]

for i in range(len(list)):
    for j in range (len(list)):
        for k in range (len(list)):
            print ("("+str(list[i]) +","+str(list[j])+","+str(list[k])+")\n")
</code></pre>
</div>
<span class="comment-copy"><code>I tried ...</code>. So can you share the code <a href="https://stackoverflow.com/posts/52194927/edit">in your question</a> so we can more accurately address your issue?</span>
<span class="comment-copy"><code>list(itertools.product([4, 8, 15], repeat=3))</code>?</span>
<span class="comment-copy">Ahhh...that makes sense...</span>
<span class="comment-copy">It won't work:) Notice <code>product</code>'s signature: <code>itertools.product(*iterables, repeat=1)</code>, your <code>3</code> will be considered as <code>iterables</code>.</span>
<span class="comment-copy">Thanks, it's been a while since I dabbled in python.</span>
