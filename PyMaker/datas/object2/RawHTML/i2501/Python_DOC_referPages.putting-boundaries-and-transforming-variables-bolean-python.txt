<div class="post-text" itemprop="text">
<p>I am at my beginning journey of learning python and I am struggling to get my head around transforming entries in a code.</p>
<p>I have a for loop going and for every loop I create 4 variables. So below is the result of four loops.</p>
<pre><code>A    B   C    D
0    0   18   19
0    0   52   52
0    0   18   19
-1  -1   19   52 ** in this loop A have to be 0 , B have to be 0 and D have to be 50
-1  -1   19   20 ** in this case A and B must become 0
</code></pre>
<p>Expected result:</p>
<pre><code>A    B   C    D
0    0   18   19
0    0   50   50 (## just a mark no need to be here just to point) , C and D became 50
0    0   18   19
0    0   19   52
0    0   19   20  ** A and B got transformed to 0
</code></pre>
<p>So I thought this would work, what I need is that none of this variables to be greater than 50 or below 0. If they are below zero they must become 0 and if they are above 50 then 50, else just the variable itself:</p>
<pre><code>if A &lt; 0:
     A = 0
elif A&gt;50:
     A = 50
elif 0&lt;A&lt;50:
     A=A
elif A &lt; 0:
     A = 0
elif B&gt;50:
     B = 50
elif 0&lt;B&lt;50:
     B=B    ......
</code></pre>
<p>I also thought about defining a function and passing the 4 variables each time to the function..</p>
<p>Ok i edit the if , sorry typo. Let be a bit more clear on every run A,B,C and D must be transformed if they are above 50 or below zero, so just use a 0
    </p></div>
<div class="post-text" itemprop="text">
<p><code>A = A</code> doesn't do anything so it is not needed.</p>
<p>There is an issue in that you mix the comparisons of <code>B</code> in with <code>A</code>, because of the <code>elif</code>. You should separate them:</p>
<pre><code>if A &lt; 0:
     A = 0
elif A &gt; 50:
     A = 50

if B &lt; 0:
     B = 0
elif B &gt; 50:
     B = 50
</code></pre>
<p>In the end you could just write a reusable function:</p>
<pre><code>def clamp(val, minval, maxval):
    if val &lt; minval:
        return minval
    elif val &gt; maxval:
        return maxval
    else:
        return val
</code></pre>
<p>And use it with:</p>
<pre><code>A = clamp(A, 0, 50)
B = clamp(B, 0, 50)
C = clamp(C, 0, 50)
D = clamp(D, 0, 50)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Can be simplified to:</p>
<pre><code>if A &lt; 0:
   A = 0;
elif A &gt; 50:
   A = 50;
</code></pre>
<p>.....</p>
<p>Saying A=A is redundant</p>
</div>
<span class="comment-copy">The last elif should be <code>elif 0&lt;B AND B&lt;50:</code>   however, to me this last one might be a redundant statement. This also goes for the 2nd elif which should be <code>elif 0&lt;A AND A&lt;50:</code></span>
<span class="comment-copy">@GeorgeBou: <code>0&lt;B and B&lt;50</code> is equivalent (but slightly slower, as it loads <code>B</code> twice) to <code>0 &lt; B &lt; 50</code>; no need to split it up.</span>
<span class="comment-copy"><code>elif if</code>??? That won't even pass syntax checks. You've also got a gap in your checks here. Think about what happens when <code>A</code> or <code>B</code> is <code>0</code> or <code>50</code>. That's not less than 0, greater than 50, or greater than 0 and less than 50, so none of your checks will catch it. Lastly, you haven't provided a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>, so we have no idea what else is changing A/B/C/D, how you're looping, etc.</span>
<span class="comment-copy">Assuming <code>elif if A &lt; 0:</code> is meant to be a separate block from the previous (that is, the <code>elif</code> is wrong, it should be <code>if A &lt; 0:</code>, you're testing/setting the wrong variable (the rest of the tests and sets are for <code>B</code>, not <code>A</code>).</span>
<span class="comment-copy">perfect solution .. Thank you</span>
<span class="comment-copy">The whole first part of this answer is wrong. <code>0&lt;A&lt;50</code> in Python does not evaluate like C does (where <code>0&lt;A</code> would evaluate, then the resulting boolean value would be compared to 50). <code>0 &lt; A &lt; 50</code> is a <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">specifically, intentionally supported Python syntax for comparison chaining</a> that is roughly equivalent to <code>0 &lt; A and A &lt; 50</code> (except <code>A</code> is only loaded/computed once, not twice). While <code>A = A</code> is pointless, your first two paragraphs are otherwise 100% wrong.</span>
<span class="comment-copy">@ShadowRanger I was unaware Python supports that notation (I do come from a C background). I've updated the answer. Thanks.</span>
