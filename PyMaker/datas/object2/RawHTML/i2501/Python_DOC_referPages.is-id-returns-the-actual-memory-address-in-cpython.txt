<div class="post-text" itemprop="text">
<p>When use id() to get identity of global variable in different subprocess returns the same value, but when i modify the global variable in subprocess but not work in main process? If id() returns the actual memory address of variable, but why i can't modify the value in subprocess? (I am using Python3.6[CPython] in MacOS)</p>
<pre><code>import os
from multiprocessing import Process


Global_list = []
Global_number = 0


def foo(x):
    global Global_list, Global_number
    print("Pid {}, id(Global_list)={}, id(Global_number)={}".format(os.getpid(), id(Global_list), id(Global_number)))
    Global_list.append(x)
    Global_number += x
    print("After: Pid {}, id(Global_list)={}, id(Global_number)={}\n".format(os.getpid(), id(Global_list), id(Global_number)))

if __name__ == '__main__':
    la = [1, 2, 3, 4]

    p_list = []

    for i in la:
        process = Process(target=foo, args=(i,))
        p_list.append(process)
        process.start()

    for p in p_list:
        p.join()

    print("In main process, id(Global_list)={}, id(Global_number)={}".format(id(Global_list), id(Global_number)))
    print("After all: Global_list={}, Global_number={}".format(Global_list, Global_number))
</code></pre>
<p>RESULT:</p>
<pre><code>Pid 42061, id(Global_list)=4347140936, id(Global_number)=4305316864
After: Pid 42061, id(Global_list)=4347140936, id(Global_number)=4305316896

Pid 42062, id(Global_list)=4347140936, id(Global_number)=4305316864
After: Pid 42062, id(Global_list)=4347140936, id(Global_number)=4305316928

Pid 42063, id(Global_list)=4347140936, id(Global_number)=4305316864
After: Pid 42063, id(Global_list)=4347140936, id(Global_number)=4305316960

Pid 42064, id(Global_list)=4347140936, id(Global_number)=4305316864
After: Pid 42064, id(Global_list)=4347140936, id(Global_number)=4305316992

In main process, id(Global_list)=4347140936, id(Global_number)=4305316864
After all: Global_list=[], Global_number=0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You appear to have a fundamental misunderstanding. <em>Within the same process</em>, if <code>id()</code> returns the same value for two different objects then that means they have the same object identity (and modifications to one will be visible to the other).</p>
<p><code>id()</code> is only unique within <em>one process</em>. If you have multiple processes in use, you can (and likely will!) have <code>id()</code> return the same value for <em>different objects</em>, which may be of the same type, or may even have the same values (e.g. if you used <code>os.fork()</code> to create the subprocess), but do <em>not</em> have the same identity: changes to one will not be reflected in the other.</p>
<p>More generally, this is true in all modern operating systems: each process has its own independent "view" of memory (called "virtual memory"), and can use any address it likes (subject to various OS-level restrictions, e.g. <code>sbrk</code> or <code>mmap</code>). Every process in the system can have an object at address 4347140936, and they can all be different objects from each other. Many operating systems depend on this behavior -- for example, a shared library might always be loaded into memory at the same place, and functions that call into it might depend on that being the case.</p>
<p>That said, if you are using various shared memory or object remoting mechanisms, you <em>can</em> have modifications to an object in one process reflected to an object in another process. But in that case, you actually have <em>two</em> objects, just two "interconnected" objects -- and that means that <code>id()</code> will return <em>different</em> values, even though the objects are "the same" at a conceptual level.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; Global_list = []
&gt;&gt;&gt; id(Global_list)
4351947464
&gt;&gt;&gt; Global_list.append(1)
&gt;&gt;&gt; id(Global_list)
4351947464
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; Global_number = 0
&gt;&gt;&gt; id(Global_number)
4305328480
&gt;&gt;&gt; Global_number += 1
&gt;&gt;&gt; id(Global_number)
4305328512  ----&gt; different address
</code></pre>
<p>If you try to assign a value to the same variable name, its memory address is changed. </p>
</div>
<span class="comment-copy"><code>id</code>s maybe be re-used after an object's lifetime, what are you actually trying to do anyway?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#id</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/15667189/what-is-the-id-function-used-for">What is the id( ) function used for?</a></span>
<span class="comment-copy">Get it, thanks very much! I should learning more operating system knowledge.</span>
<span class="comment-copy">That's slightly misleading, though, because what <code>id()</code> returns is <i>not</i> the ID of the <code>Global_number</code> variable, but the ID of the <i>object</i> that <code>Global_number</code> currently refers to. If you change <code>Global_number</code> to refer to a different object, then <code>id()</code> will return the ID of that object instead: that's how names work in Python.</span>
<span class="comment-copy">yeah, i get this. But why i append a value to the same global list variable(the same id) in subprocess, is not work in main process?</span>
<span class="comment-copy">@Leekin: Because the variable in the subprocess is a <i>different</i> variable, whether <code>id()</code> returns the same value or not. See my answer for details.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/simple_stmts.html#assignment" rel="nofollow noreferrer">docs.python.org/3/reference/simple_stmts.html#assignment</a></span>
