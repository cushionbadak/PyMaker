<div class="post-text" itemprop="text">
<p>I am confused as to how this code actually works:</p>
<pre><code>print([m.start() for m in re.finditer('p', word)])
</code></pre>
<p>If I were to just run the <code>print</code> statement without the <code>for</code> loop, but leaving everything else, m isn't defined. How can I run a <code>for</code> loop after the <code>m.start()</code> method is called, and create the variable in the <code>for</code> loop? If anybody could just break down this code and explain what is actually happening I would be really appreciative.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's the same code, written without the use of a <a href="https://www.python.org/dev/peps/pep-0289/" rel="nofollow noreferrer">generator expression</a> (that one-liner for loop)</p>
<pre><code>result_list = []
for m in re.finditer('p', word):
    result_list.append(m.start())
print(result_list)
</code></pre>
<p>That's pretty straight forward, so let's get into how we're representing that in your code snippet.</p>
<p><code>re.finditer('p', word)</code> returns an iterable we're going to loop over.</p>
<p><code>m.start() for m in re.finditer('p', word)</code> is the generator expression. Think of it as saying "The value returned by <code>m.start()</code> for each of the items <code>m</code> in the iterable returned by <code>re.finditer('p', word)</code>". Don't get caught up on the fact we use <code>m</code> before reading it - that's just Python's syntax being natural language inspired rather than operation-oriented.</p>
<p><code>[m.start() for m in re.finditer('p', word)]</code> iterates the generator we defined, putting the values into a list. A common mistake is assuming that we can treat the generator as a list - it can't be indexed and can only be iterated once.</p>
<p>Hope that helps!</p>
</div>
<span class="comment-copy">It's a list comprehension. See <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">python.org#list-comprehensions</a></span>
<span class="comment-copy">To be honest folks I do not understand this website. I ask a valid question, specific enough to where there isn't an answer. I am not good enough at code to understand the regex site, and I figured it would take a skilled coder maybe 2 minutes to answer this. Can somebody explain why this is being downvoted? Is it against the culture to ask such nooby questions? Truly don't get it.</span>
<span class="comment-copy">@khelwood thank you very much. After reading that I figure it is that I don't understand the start method of regex, which is why it confused me so much. I appreciate it.</span>
<span class="comment-copy">Because you aren't running a for-loop. This is a list-comprehension, and isn't related to the regex methods at all.</span>
<span class="comment-copy">I really recommend reading <a href="https://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/" rel="nofollow noreferrer">this</a> website, as it has a great explanation about list comprehensions, which will help you to understand how they work.</span>
<span class="comment-copy">It's a list comprehension, not a generator expression being put into a list.</span>
