<div class="post-text" itemprop="text">
<p>I am using celery to load Neural Network models and would like to store the loaded model in settings for fast prediction.</p>
<p>so in <code>django.conf.settings</code> I have:</p>
<pre><code>MODELS = {}
</code></pre>
<p>and in celery task, I have the following snippet:</p>
<pre><code>@app.task
def load_nn_models(model_name):
     from django.conf import settings
     ...    
     settings.MODELS[model_name] = {'model': net, 'graph': sess}
</code></pre>
<p>However, I noticed that the tasks are running in another thread that launches different <em>Django Environment</em> and any changes in the settings will not be reflected back to the main thread.</p>
<p>Is there a workaround for this?</p>
<p><strong>EDIT</strong></p>
<p>The parameters I am storing in settings are:</p>
<ul>
<li>net: <a href="https://keras.io/models/model/" rel="nofollow noreferrer">keras Model</a></li>
<li>sess: <a href="https://www.tensorflow.org/api_docs/python/tf/Session" rel="nofollow noreferrer">Tensorflow Session</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Django settings are not the right place for this, obviously. First because the <code>settings</code> object is not a shared resource (there's one instance per process), then because <a href="https://docs.djangoproject.com/fr/2.1/topics/settings/#altering-settings-at-runtime" rel="nofollow noreferrer">the doc explicitely mentions that this object is to be considered as immutable</a>.</p>
<p>If your point is to have a celery task computing those objects so that other tasks and / or the front can use them, you will have to find a way to serialize them and store the serialized version in a shared resource (database, cache, etc).</p>
</div>
<div class="post-text" itemprop="text">
<p>you can try to use the <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">configparser</a>
    import configparser</p>
<pre><code>def dict_from_file():
    config = configparser.ConfigParser()
    config.read("config.ini")
    models = config['models']
    for x in models.values():
        print(x)
</code></pre>
<p>set file <code>config.ini</code>:</p>
<pre><code>[models]
var_a: home
var_b: car
var_c: Next
</code></pre>
<p>call <code>dict_from_file</code> the output is:</p>
<pre><code>home
car
Next
</code></pre>
<p>update the file <code>config.ini</code>:</p>
<pre><code>[models]
var_a: home
var_c: New
</code></pre>
<p>call <code>dict_from_file</code> the output is:</p>
<pre><code>home
New
</code></pre>
<p>ypu can read more for the <a href="https://docs.python.org/3/library/configparser.html#supported-datatypes" rel="nofollow noreferrer">supported-datatypes</a></p>
</div>
<span class="comment-copy">did you try <a href="https://stackoverflow.com/a/924723/8060120">stackoverflow.com/a/924723/8060120</a>?</span>
<span class="comment-copy">@BearBrown I don't think it will work because when django starts, it reads the settings into dictionary and keep the changes on that dictionary not on a file. so if main django changed something the async task will not be able to get it.</span>
<span class="comment-copy">i add an example</span>
<span class="comment-copy">I agree with you. But the only way I can think of is to store nn models as binary streams then because putting them in a shared resource such as db or file will take too much time to reload the model and do prediction for every API request.</span>
<span class="comment-copy">Well this is a completely different question anyway, and you really didn't provide enough context for someone to even give a hint. I suggest you post a new question explaining the real problem instead of "what you think is the solution" (XY problem as usual), making sure to provide all the relevant informations (if those objects are per-user or global to the site, how often they change, what triggers a change, how "resource-heavy" they are - memory size etc - etc etc etc). Also make sure you've explored those libs (keras an tf) in depth, sometimes there are half-hidden features.</span>
<span class="comment-copy">I see now, can <code>home</code>, <code>car</code> be any kind of object?</span>
<span class="comment-copy">@Coderji what do you mean object? django  model or python dict? add link of suported types.</span>
<span class="comment-copy">I have edited my question</span>
<span class="comment-copy">for the extra objects i can't try and test but i think you can try youself with <code>yaml</code> by the same logic load info from file</span>
