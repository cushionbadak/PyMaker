<div class="post-text" itemprop="text">
<p>I have a code like:</p>
<pre><code>if 'x' in longstr:
    longstr = longstr.replace('x', '')
elif 'y' in longstr:
    longstr = longstr.replace('y', '')
elif 'z' in longstr:
    longstr = longstr.replace('z', '')
else:
    longstr = longstr.replace('foo', '')
</code></pre>
<p>If I wanted to use a <code>for</code> loop instead:</p>
<pre><code>for char in ['x','y','z']:
    if char in longstr:
        longstr = longstr.replace(str, '')
        break
</code></pre>
<p>How can I replace the <code>else:</code> final / general case in the <code>if..elif..else</code> example above (<code>else: longstr = longstr.replace('xyz', '')</code>)?</p>
<p>And above all, which one of the two forms performs better?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just add an <code>else:</code> suite to the <code>for</code> loop:</p>
<pre><code>for char in ['x','y','z']:
    if char in longstr:
       longstr = longstr.replace(char, '')
       break
else:
    longstr = longstr.replace('xyz', '')
</code></pre>
<p>The <code>else</code> suite in a <code>for</code> loop is only executed if the <code>for</code> loop ended without ending early with <code>break</code>. See the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow noreferrer"><code>for</code> statement documentation</a>:</p>
<blockquote>
<p>When the items are exhausted <em>[...]</em>, the suite in the <code>else</code> clause, if present, is executed, and the loop terminates.</p>
<p>A <code>break</code> statement executed in the first suite terminates the loop without executing the <code>else</code> clause’s suite.</p>
</blockquote>
<p>To see which one performs better, you'd have to time them using <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a>. However, unless you are executing a <em>critical code section in a tight loop</em>, please stick with <code>if...elif...else</code> as the <code>for...else</code> combo is not well known and will leave many programmers not aware of the semantics scratching their head. Moreover, for your toy example, you'd use regular expressions over a <code>if</code> test or <code>for</code> loop anyway.</p>
<p>Timing these two trivial examples:</p>
<pre><code>&gt;&gt;&gt; from timeit import Timer
&gt;&gt;&gt; def example1(longstr):
...     if 'x' in longstr:
...         longstr = longstr.replace('x', '')
...     elif 'y' in longstr:
...         longstr = longstr.replace('y', '')
...     elif 'z' in longstr:
...         longstr = longstr.replace('z', '')
...     else:
...         longstr = longstr.replace('foo', '')
...
&gt;&gt;&gt; def example2(longstr):
...     for char in ['x','y','z']:
...         if char in longstr:
...            longstr = longstr.replace(char, '')
...            break
...     else:
...         longstr = longstr.replace('xyz', '')
...
&gt;&gt;&gt; from string import ascii_lowercase
&gt;&gt;&gt; from random import choice
&gt;&gt;&gt; teststring = ''.join([choice(ascii_lowercase) for _ in range(10000)])
&gt;&gt;&gt; for ex in (example1, example2):
...     count, total = Timer('ex(s)', 'from __main__ import teststring as s, ex').autorange()
...     print(f'{ex.__name__}: {total/count * 1000000}µs')
...
example1: 15.999997949984389µs
example2: 16.788980951241683µs
</code></pre>
<p>shows that there is just 1.8 <strong>microsecond</strong> between them. If I re-run the samples a few times, one or the other example wins by similar extremely small margins. That doesn't really make one or the other fastest, so you can consider them equal <strong>in this case</strong>. </p>
<p>However, if you do have a need to micro-optimise such a section, you need to do your own timings.</p>
</div>
<span class="comment-copy">That <code>else</code> case will never have any effect; if <code>longstr</code> contains 'xyz', then you would have taken the 'x' path (and not removed any y or z). Also, read what Martijn said about storing the return value.</span>
