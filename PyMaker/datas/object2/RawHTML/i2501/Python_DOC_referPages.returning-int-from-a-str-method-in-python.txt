<div class="post-text" itemprop="text">
<p>I know, that the purpose of <code>str()</code> method is to return the string representation of an object, so I wanted to test what happens if I force it to make something else.</p>
<p>I've created a class and an object:</p>
<pre><code>class MyClass(object):

    def __str__(self, a=2, b=3):
        return a + b

mc = MyClass()
</code></pre>
<p>When I call:</p>
<pre><code>print(str(mc))
</code></pre>
<p>The interpreter complains:</p>
<pre><code>TypeError: __str__ returned non-string (type int)
</code></pre>
<p>And this is fully understandable because the str() method is trying to return <strong>int</strong>.</p>
<p>But if I try:</p>
<pre><code>print(mc.__str__())
</code></pre>
<p>I get the output: 5.</p>
<p>So why the interpreter allows me to return int when I call <code>__str__</code> directly, but not when I'm using str(mc) which - as I understand - is also evaluated to <code>mc.__str__()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>str()</code> calls <a href="https://docs.python.org/3/c-api/object.html#c.PyObject_Str" rel="nofollow noreferrer"><code>PyObject_Str()</code></a>. <a href="https://raw.githubusercontent.com/python/cpython/master/Objects/object.c" rel="nofollow noreferrer">Here</a> is the source code where <code>PyObject_Str()</code> is defined. If you search this document for "<code>__str__</code>", you will see where the function calls <code>__str__</code> and makes sure the return type is actually a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>The built-in <code>str</code> function (and also <code>repr</code>) do more than just calling <code>.__str__</code> (or <code>.__repr__</code>) – they also have defaults to cope with objects that don't have a <code>__str__</code> or <code>__repr__</code> method, and some cleverness to deal with objects whose string representation is recursive.</p>
<p>You can see the source (in C) for <code>str</code> and <code>repr</code> <a href="https://github.com/python/cpython/blob/caba55b3b735405b280273f7d99866a046c18281/Objects/object.c#L490" rel="nofollow noreferrer">here</a> and <a href="https://github.com/python/cpython/blob/caba55b3b735405b280273f7d99866a046c18281/Objects/object.c#L443" rel="nofollow noreferrer">here</a>. As you can see, they enforce the return type of <code>__str__</code> and <code>__repr__</code>:</p>
<pre><code>if (!PyUnicode_Check(res)) {
    PyErr_Format(PyExc_TypeError,
                 "__str__ returned non-string (type %.200s)",
                 Py_TYPE(res)-&gt;tp_name);
    Py_DECREF(res);
    return NULL;
}
</code></pre>
<p>If you just call the <code>__str__</code> method on an object, Python itself doesn't enforce that any method called <code>__str__</code> can only return a string – it's the <code>str</code> function that enforces that restriction.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>str</code> isn't just</p>
<pre><code>def str(obj):
    return obj.__str__()
</code></pre>
<p>I think very few of the standard functions or operators map <em>directly</em> to a magic method like that, although I'm not sure of the exact counts.</p>
<p><code>str</code> tries <code>__str__</code>, but it also tries <code>__repr__</code> if there's no <code>__str__</code>, and it enforces the <code>str</code> return type. (It also calls the return value's <code>__init__</code> for technical reasons, <a href="https://stackoverflow.com/questions/34859471/unexpected-behavior-of-python-builtin-str-function">which can get weird for <code>str</code> subclasses</a>.) <code>+</code> tries <code>__add__</code>, but it also tries <code>__radd__</code>. <code>iter</code> tries <code>__iter__</code>, but it also tries <code>__getitem__</code>. The list goes on and on.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__str__</code> provides a contract: you return a string, and the program won't break when it tries to use a non-string value when the program expects a string. Determining whether <code>__str__</code> actually <em>obeys</em> that contract is uncomputable in general, so it is up to the programmer to enforce the contract.</p>
<p>As @Juanpa.arrivillaga points out, <code>str</code> is simply stricter about the <code>__str__</code> method returning what it should be. Your explicit call to <code>__str__</code> doesn't actually invoke the protocol; it returns an <code>int</code> value, but that value itself has a <code>__str__</code> method which <code>print</code> calls when it wants a <code>str</code> value.</p>
</div>
<div class="post-text" itemprop="text">
<p>__str __ is used similarly ToString method in Java where you will get a friendly print of a class object. </p>
</div>
<span class="comment-copy">I'm interested to understand why also</span>
<span class="comment-copy">You might find this link here useful ! <a href="https://stackoverflow.com/questions/12448175/confused-about-str-on-list-in-python" title="confused about str on list in python">stackoverflow.com/questions/12448175/…</a></span>
<span class="comment-copy">The <code>str</code> function <i>does</i> call <code>__str__</code>, but it enforces the <code>str</code> return type also. It's not simply a direct call to <code>__str__</code></span>
<span class="comment-copy">Does this therefore count as an omission of the documentation? According to the docs, <code>str</code> (with a single argument) just calls <code>__str__</code> -- it makes no reference to checking the type.</span>
<span class="comment-copy">@Denziloe well, in the <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer">data model docs</a> it does state that <code>__str__</code> must return a <code>str</code>.</span>
<span class="comment-copy">@Carcigenicate Yeah good point, that's rather extraneous here.</span>
