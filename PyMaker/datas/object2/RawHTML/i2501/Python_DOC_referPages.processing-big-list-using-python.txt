<div class="post-text" itemprop="text">
<p>So I'm trying to solve a challenge and have come across a dead end. My solution works when the list is small or medium but when it is over 50000. It just "time out" </p>
<pre><code>a = int(input().strip())
b = list(map(int,input().split()))


result = []
flag = []

for i in range(len(b)):
    temp = a - b[i]
    if(temp &gt;=0 and temp in flag):
        if(temp&lt;b[i]):
            result.append((temp,b[i]))
        else:
            result.append((b[i],temp))
        flag.remove(temp)
    else:
        flag.append(b[i])
    result.sort()


for i in result:
    print(i[0],i[1])
</code></pre>
<p>Where</p>
<p>a = 10 </p>
<p>and b = [ 2, 4 ,6 ,8, 5 ]</p>
<p>Solution sum any two element in <strong>b</strong> which matches <strong>a</strong></p>
<p>**Edit: ** Updated full code</p>
</div>
<div class="post-text" itemprop="text">
<p><code>flag</code> is a list, of potentially the same order of magnitude as <code>b</code>. So, when you do <code>temp in flag</code> that's a linear search: it has to check every value in <code>flag</code> to see if that value is <code>== temp</code>. So, that's 50000 comparisons. And you're doing that once per loop in a linear walk over <code>b</code>. So, your total time is quadratic: <code>50,000 * 50,000 = 2,500,000,000</code>. (And <code>flag.remove</code> is <em>also</em> linear time.)</p>
<p>If you replace <code>flag</code> with a set, you can test it for membership (and remove from it) in constant time. So your total time drops from quadratic to linear, or <code>50,000</code> steps, which is a lot faster than 2 billion:</p>
<pre><code>flagset = set(flag)
for i in range(len(b)):
    temp = a - b[i]
    if(temp &gt;=0 and temp in flagset):
        if(temp&lt;b[i]):
            result.append((temp,b[i]))
        else:
            result.append((b[i],temp))
        flagset.remove(temp)
    else:
        flagset.add(b[i])
flag = list(flagset)
</code></pre>
<p>If <code>flag</code> needs to retain duplicate values, then it's a multiset, not a set, which means you can implement with <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>:</p>
<pre><code>flagset = collections.Counter(flag)
for i in range(len(b)):
    temp = a - b[i]
    if(temp &gt;=0 and flagset[temp]):
        if(temp&lt;b[i]):
            result.append((temp,b[i]))
        else:
            result.append((b[i],temp))
        flagset[temp] -= 1
    else:
        flagset[temp] += 1
flag = list(flagset.elements())
</code></pre>
<hr/>
<p>In your edited code, you’ve got another list that’s potentially of the same size, <code>result</code>, and you’re sorting that list every time through the loop.</p>
<p>Sorting takes log-linear time. Since you do it up to 50,000 times, that’s around <code>log(50;000) * 50,000 * 50,000</code>, or around 30 billion steps.</p>
<p>If you needed to keep <code>result</code> in order throughout the operation, you’d want to use a logarithmic data structure, like a binary search tree or a skiplist, so you could insert a new element in the right place in logarithmic time, which would mean just 800.000 steps.</p>
<p>But you don’t need it in order until the end. So, much more simply, just move the <code>result.sort</code> out of the loop and do it at the end.</p>
</div>
<span class="comment-copy">Just an idea: Sort list first, go through it and check for each item with <code>bisect</code> if matching second element of sum is present. Oh, a simple set may do as well.</span>
<span class="comment-copy">Plz first fix your indentation.</span>
<span class="comment-copy">When you say "the list", are you referring to <code>b</code>, or something else? And what is <code>flag</code>? Another list? About the same size as <code>b</code>?</span>
<span class="comment-copy">I have updated my code with the full program</span>
<span class="comment-copy">@DanielEuchar Your edited code has a second problem, which you also need to fix, so I updated my answer.</span>
<span class="comment-copy">alrighty thank you man</span>
