<div class="post-text" itemprop="text">
<p>I have a string that contains numbers. The string needs to separate the numbers by chunks of 3. If necessary, the last chunk, or the last two chunks can contain 2 numbers (but never 1). </p>
<p>Examples:</p>
<pre><code>"123456789" -&gt; "123-456-789"
"1234567891" -&gt; "123-456-78-91"
"12345678912" -&gt; "123-456-789-12"
</code></pre>
<p>Working with chunks of three is straight forward:</p>
<pre><code>'-'.join(S[i:i+3] for i in range(0, len(S),3))
</code></pre>
<p>How can I extend this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I made a simple program that would be easy to understand, to solve this problem. You can do it as:</p>
<pre><code>def SeparateNum(S):

    l=len(S)
    S0=""
    rem=l%3

    if rem==0:
        for i in range(l):
            if i%3==0 and i!=0:
                S0=S0+"-"
            S0=S0+S[i]
    elif rem==1:
        for i in range(l-4):
            if i%3==0 and i!=0:
                S0=S0+"-"
            S0=S0+S[i]
        S0=S0+"-"+S[l-4]+S[l-3]+"-"+S[l-2]+S[l-1]
    elif rem==2:
        for i in range(l-2):
            if i%3==0 and i!=0:
                S0=S0+"-"
            S0=S0+S[i]
        S0=S0+"-"+S[l-2]+S[l-1]
    return S0

print(SeparateNum("12345678987"))
print(SeparateNum("123456789"))
print(SeparateNum("1234567898"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way to describe your condition is: "Break everything up into chunks of three. If the last chunk has one element, grab one off the chunk before". <a href="https://docs.python.org/3/library/textwrap.html#textwrap.wrap" rel="nofollow noreferrer"><code>textwrap.wrap</code></a> provides a nice tool for breaking the strings up:</p>
<pre><code>from textwrap import wrap

pieces = wrap(S, 3)
if len(pieces[-1]) == 1:
    pieces [-2:] = pieces[-2][:-1], pieces[-2][-1] + pieces[-1]
result = '-'.join(pieces)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>result = '-'.join(S[i:i+3] for i in range(0, len(S),3)) if len(S)%3 != 1 else '-'.join([S[i:i+3] for i in range(0, len(S)-4, 3)] + [S[-4:-2], S[-2:]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This problem would be most easily solved by a regular expression. You can use <code>re.findall</code> with the following regex to find either one or two groups of double digits at the end of the string or triple digits elsewhere, and then use join the non-empty groups with <code>'-'</code> using a generator expression:</p>
<pre><code>import re
def format_phone_number(s):
    return '-'.join(i for t in re.findall(r'(\d{2})(\d{2})?$|(\d{3})', s) for i in t if i)
</code></pre>
<p>so that:</p>
<pre><code>print(format_phone_number('123456789'))
print(format_phone_number('1234567891'))
print(format_phone_number('12345678912'))
</code></pre>
<p>would output:</p>
<pre><code>123-456-789
123-456-78-91
123-456-789-12
</code></pre>
</div>
<span class="comment-copy">What defines "the correct way"? No one can read your thoughts...</span>
<span class="comment-copy">Sorry about that... updated.</span>
<span class="comment-copy">While this might answer the authors question, it lacks some explaining words and links to documentation. Raw code snippets are not very helpful without some phrases around it. You may also find <a href="https://stackoverflow.com/help/how-to-answer">how to write a good answer</a> very helpful. Please edit your answer.</span>
