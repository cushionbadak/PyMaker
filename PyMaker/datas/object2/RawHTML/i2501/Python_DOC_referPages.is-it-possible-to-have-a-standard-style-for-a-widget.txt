<div class="post-text" itemprop="text">
<p>I want all of the buttons in my gui to have the same style. Right now I manually write in the attributes I want but it takes up so much space. Also, if I wanted to  change the style I would have to go to every single button. Is it possible to have a style i define once and then reference it when making all buttons? 
Something like the following:</p>
<pre><code>basic_style = 
     {'background': 'blue',
     'foreground':'white', 
     'font':'Helvetica 8 bold'} 

self.btn = tk.Button(text = 'Hello', style = basic_style)
</code></pre>
<p>I know its possible to do something like this: </p>
<pre><code>self.btn['text'] = 'Bye'
</code></pre>
<p>but that still doesn't help me much. </p>
</div>
<div class="post-text" itemprop="text">
<p>There are at least four ways I can think of to do this: using the option database, passing dictionaries of options, using ttk, and creating custom classes.</p>
<h2>Using the option database</h2>
<p>There are several ways to accomplish what you want. The original support for this is based on the X11 windowing system option database. Every widget has a class, and every class can have it's options set.</p>
<p>You do this through the <code>option_set</code> method of the root window (as well as <code>option_readfile</code>), specifying a pattern, and the default value.</p>
<p>Example:</p>
<pre><code>import tkinter as tk

root = tk.Tk()

root.option_add("*Font", "Helvetica 8 bold")
root.option_add("*Background", "blue")
root.option_add("*Foreground", "white")

button1 = tk.Button(root, text="Hello", command=lambda: print("Hello"))
button2 = tk.Button(root, text="World", command=lambda: print("world"))

button1.pack()
button2.pack()

root.mainloop()
</code></pre>
<p>Note: you must do this after creating the root window but before creating any widgets you want to be affected by this.</p>
<p>How to use the option database can be a bit complex, though it does make it possible to compute entire themes if you're willing to take the time to do it. One of the best -- though oldest -- descriptions comes straight from one of the core developers of tcl/tk here: <a href="http://www.cs.man.ac.uk/~fellowsd/tcl/option-tutorial.html" rel="nofollow noreferrer">http://www.cs.man.ac.uk/~fellowsd/tcl/option-tutorial.html</a>. This requires a little bit of mental gymnastics to translate the tcl/tk code to python/tkinter, but the python docs describe how to do that (see <a href="https://docs.python.org/3/library/tkinter.html#mapping-basic-tk-into-tkinter" rel="nofollow noreferrer">Mapping basic tk into tkinter</a></p>
<h2>Using dictionaries.</h2>
<p>You can indeed pass in a dictionary of options, with a couple of small caveats. This dictionary must be the first argument after the parent, and it must be before any other keyword arguments.</p>
<p>Example:</p>
<pre><code>import tkinter as tk

basic_style = {'background': 'blue', 'foreground': 'white', 'font': 'Helvetica 8 bold'}

root = tk.Tk()
button1 = tk.Button(root, basic_style, text="Hello", command=lambda: print("Hello"))
button2 = tk.Button(root, basic_style, text="World", command=lambda: print("world"))

button1.pack()
button2.pack()

root.mainloop()
</code></pre>
<p>I don't if this is documented anywhere, but you can see that it's supported by looking at the actual tkinter code.</p>
<h2>Using the ttk widgets</h2>
<p>"ttk" stands for "themed tk". The whole idea was to re-implement tk with the ability to apply themes. ttk has most of the same widgets as tkinter, plus a few that it doesn't have (for example, the treeview widget).</p>
<p>Example:</p>
<pre><code>import tkinter as tk
from tkinter import ttk

root = tk.Tk()

style = ttk.Style()
style.configure('Custom.TButton',
                background="blue", foreground="white",
                font='Helvetica 8 bold')

button1 = ttk.Button(root, text='Hello', style='Custom.TButton')
button2 = ttk.Button(root, text='Hello', style='Custom.TButton')

button1.pack()
button2.pack()

root.mainloop()
</code></pre>
<p>Unfortunately, there's almost no good documentation on how to configure the themes. It's a bit confusing and non-standard, but the results can be quite polished if you're willing to put in the effort.</p>
<p>The best resource for learning how to create themes is in the <a href="https://tkdocs.com/tutorial/styles.html" rel="nofollow noreferrer">Styles and Themes</a> section of tkdocs.com</p>
<h2>Creating custom classes</h2>
<p>Finally, a fourth option is to create custom classes. Your classes can inherit from the built-in classes and force options to be set if not provided.</p>
<p>Example:</p>
<pre><code>import tkinter as tk

class CustomButton(tk.Button):
    def __init__(self, *args, **kwargs):
        kwargs.setdefault("background", "blue")
        kwargs.setdefault("foreground", "white")
        kwargs.setdefault("font", "Helvetica 8 bold")

        super().__init__(*args, **kwargs)

root = tk.Tk()

button1 = CustomButton(root, text="Hello", command=lambda: print("Hello"))
button2 = CustomButton(root, text="World", command=lambda: print("world"))

button1.pack()
button2.pack()

root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it's even easier than you imagine. Just use dictionary unpacking: </p>
<pre><code>basic_style = 
     {'background': 'blue',
     'foreground':'white', 
     'font':'Helvetica 8 bold'} 

self.btn = tk.Button(text = 'Hello', **basic_style)
</code></pre>
<p>Another popular option is to make a subclass with the style you want, and perhaps other features such as tooltips or style dependant on values or anything else. </p>
<pre><code>class Justine(tk.Button):
    def __init__(self, master=None, **kwargs):
        tk.Button.__init__(self, master, 
            background = 'blue',
            foreground = 'white', 
            font = 'Helvetica 8 bold',
            **kwargs)

self.btn = Justine(text = 'Hello')
</code></pre>
</div>
<span class="comment-copy">Have you looked into <code>ttk</code>. It has a style system that lets you control the base style for ttk widgets.</span>
