<div class="post-text" itemprop="text">
<p>I have to work with big arrays, says for example <code>x = np.arange(0, 750*350*365, dtype=np.int32)</code></p>
<p>I know python hold a variable in memory as long as it has at least one reference to it.</p>
<p>But lets say i have to import a big array, do some math on it, and save a smaller array computed from the big one. Would the big array still be on memory ?</p>
<p>For example : </p>
<pre><code>Class Data:
    value = None

def process(myDataInstance):
    x = np.arange(0, 750*350*365, dtype=np.int32)
    ix = numpy.where(x &lt; 50000)
    myDataInstance.value = x[ix]

d = Data()
process(d)
</code></pre>
<p>(in real life, i'm not creating array in the function but loading a file which contains large arrays, but this is for example purpose)</p>
<p>will be <code>x</code> still in memory even if we aren't anymore in the 'process' function ?
<strong>Edit</strong> : i know x will not be reachable as if I type <code>print x</code> outside the function, there will be an error because he was defined in the scope of the function. I'm asking about memory and reference instead of variable name.</p>
<p>If yes, should i use <code>myDataInstance.value = x[ix].copy()</code> to create another array so the reference would be deleted when leaving the function ?</p>
<p>If no, where does it copy it ?</p>
<p>Thanks for the explanation</p>
</div>
<div class="post-text" itemprop="text">
<p>Fancy indexing, unlike slicing, does not return a view, so you will not end up holding a reference to the your big array. See <a href="https://scipy-cookbook.readthedocs.io/items/ViewsVsCopies.html" rel="nofollow noreferrer">official explanation on views vs copies in Numpy</a>.</p>
<p>To directly answer your question, the part where you write <code>myDataInstance.value = x[ix]</code> is where the copying is done. You do <strong>not</strong> need to explicitly call <code>copy</code> unless you are doing slicing.</p>
<p>To delve deeper, one way you can check that a variable is a view of the numpy array is to use Numpy's <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.may_share_memory.html" rel="nofollow noreferrer">shares_memory</a> function</p>
<pre><code>import numpy as np
X = np.arange(10)
x = X[np.where(X &gt; 5)]
np.shares_memory(X, x)  # This outputs False

x = X[np.where(X &gt;= 0)]
np.shares_memory(X, x)  # Still false
</code></pre>
<p>You can also use <code>sys.getrefcount(var)</code> to check the number of references  pointing to a variable <code>var</code> at one time.</p>
<pre><code>import sys
X = np.arange(10)
print(sys.getrefcount(X)) # This prints 2
x = X[np.where(X &gt; 0)]
print(sys.getrefcount(X)) # This still prints 2
</code></pre>
<p>Note that the reason <code>sys.getrefcount(X)</code> prints 2 is that 1 reference is held by the variable <code>X</code> and the other is held by the <strong>function</strong> <code>sys.getrefcount()</code> and <strong>not</strong> <code>x</code>.</p>
<p>So in conclusion, you do <strong>not</strong> need to do an explicit copy if you are doing fancy indexing like in your example. If you are doing slicing, then that is a different story.</p>
</div>
<div class="post-text" itemprop="text">
<p>The variables specified in the scope of your process() will be removed from memory once you are no longer executing that function. You can see this in action by running the following:</p>
<pre><code>class Data:
    value = None

def process(myDataInstance):
    x = np.arange(0, 750*350*365, dtype=np.int32)
    ix = np.where(x &lt; 50000)
    myDataInstance.value = x[ix]

d = Data()
process(d)
print(ix)

&gt;&gt;&gt; Traceback (most recent call last):
  File "/workspace/PRISE/src/datacube/prod_mngr/data_fusion.py", line 26, in &lt;module&gt;
    print(ix)
NameError: name 'ix' is not defined
</code></pre>
<p>You get a <code>NameError</code> as the variable <code>ix</code> is only defined in the scope of the <code>process</code> method. </p>
<p><strong>NOTE:</strong> If you had <code>self.ix = np.where(x &lt; 50000)</code> in the <code>process()</code> method, then after the <code>process(d)</code> line you'd be able to access the <code>ix</code> variable using <code>print(Data.ix)</code> because that allocates the variable to the <code>Data()</code> object which you have reference to globally.</p>
<p><strong>EDIT for further clarification:</strong></p>
<p>Once a variable is out of scope, it is removed from memory automatically in Python. see <a href="https://rushter.com/blog/python-garbage-collector/" rel="nofollow noreferrer">Garbage Collection in Python</a> for more info. </p>
</div>
<div class="post-text" itemprop="text">
<p>To delete a Python object <code>an_object</code> from memory, call <code>del(an_object)</code> and wait for the garbage collection to kick in. Garbage collection can also be interfered with manually with module <a href="https://docs.python.org/3/library/gc.html" rel="nofollow noreferrer">gc</a>, at your risk.</p>
<p>It it important to clarify that <code>del(an_object)</code> or similar deletion methods do not remove the object from memory, they only remove  the name <code>an_object</code> from the namespace. You still have to wait for garbage collection.</p>
<p><strong>UPDATE</strong>
To answer the comment here below, we can check whether a slice of an array is a reference to the original array or not with the following code:</p>
<pre><code>import numpy as np

x_old = np.arange(0,10,1) # x_old = np.array([0,1,2,3,4,5,6,7,8,9])

x_new_1 = x_old[:5] # We slice the array, without calling  .copy()
# x_new = np.array([0,1,2,3,4])

x_old[2]=100 # We change the third element of the original array, from 2 to 100
print(x_new_1) # The output is [  0   1 100   3   4]. x_new_1 is thus a reference to x_old,
# not a new object

x_old[2]= 2 # Restore original value
x_new_2 = x_old[:5].copy() # This time we call .copy() on the slice, or the whole array for that matter.
x_old[2]=100 # again we change the value

print(x_new_2) # The output is array([0, 1, 2, 3, 4])
</code></pre>
<p>Therefore, calling .copy() on the original array will create a new object, allowing you to delete the old one from the namespace and wait for its automatic deletion from memory. If you do not call .copy() you are still working with a reference to the old object and, as a consequence, whatever happens to the original object affetcts the reference.</p>
<p>What should you do if you want to remove from memory part of an array:</p>
<p>1) Copy the slice of the original array that you want to keep into a new array with a new name.</p>
<p>2) Call <code>del</code> or any other deletion instruction on the original array</p>
<p>3) Wait for its automatic deletion from memory</p>
<p>4) Continue working with the new object.</p>
<p>Since you are working with big arrays though, remember that you have both arrays loaded in memory for a certain amount of time if you use this process.</p>
<p><strong>UPDATE 2</strong></p>
<p>OP, as mentioned by @lightalchemist in the comment down below, the code you provided does not produce a reference to x, but rather a copy to it. The code you provided as an example does not fit the description of the problem you are facing.</p>
</div>
<span class="comment-copy">Thanks for this explanation. I understand the mechanics now!</span>
<span class="comment-copy">I understand ix will not be defined, but i wanted explanation about memory usage. <code>x</code> will not be defined either, but will it stay in memory ? I read in another post about memory consumption <a href="https://stackoverflow.com/a/35316944/9704705">Does setting numpy arrays to None free memory?</a> that "Slicing is just a view on the data [...]. If you don't delete both variables that reference the same array the OS will keep the arrays. So as d.value is a slicing from x (x[ix] in my example), would x stay in memory ?</span>
<span class="comment-copy">If its out of scope, it is removed from memory automatically as the variable no longer had any reference/use. I've updated my answer with a link for further reading.</span>
<span class="comment-copy">I read about <code>del</code> but as <code>myDataInstance.value</code> is a reference to <code>x</code>, if i use <code>del x</code>, there is still a reference on x with myDataInstance.value so the array will not be deleted in memory. My question is outside the function scope, will x stay entirely in memory even if i used a slice ?</span>
<span class="comment-copy">Updated the answer with a pertinent example. If you do not call <code>.copy()</code> on the original array, you are working with a reference to that array, not with a new object.</span>
<span class="comment-copy">Just note that <code>.copy()</code> can be quite dangerous with large arrays, especially when working with floating points.</span>
<span class="comment-copy">Fancy indexing, which is what the OP is doing, does not return a view, so he will not be holding a reference to the big array.</span>
<span class="comment-copy">@lightalchemist you are correct. I read the comment above which stated <code>as myDataInstance.value is a reference to x</code> whereas in fact, in the example provided, it is not. Updated the answer accordingly.</span>
