<div class="post-text" itemprop="text">
<p>Below is the pytest class used to run 2 tests. Want to quit driver after both the tests are executed. used Teardown but it quits the driver after each test execution is completed</p>
<pre><code>class FlightTest(unittest.TestCase):

        driver = webdriver.Chrome(direct_path+'/resources/chromedriver.exe')
        startup = StartUpPage(driver)
        register = RegisterPage(driver)

        def test_flight_registration(self):
            dat = self.json_reader.read_from_file("testdata.json")
            self.startup.navigate_to_url(dat['url'])\
                        .click_on_register_button()
            self.register.create_user(dat['uid'], dat['pwd'], dat['con_pwd'])

        def test_flight_sign_in(self,):
            dat = self.json_reader.read_from_file("testdata.json")
            self.startup.click_sign_in_link()

        def tearDown(self):
            self.driver.quit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In <code>unittest</code> terms, you would need to use the <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUpClass" rel="nofollow noreferrer"><code>setUpClass</code></a> and <a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDownClass" rel="nofollow noreferrer"><code>tearDownClass</code></a> class methods:</p>
<pre><code>class FlightTest(unittest.TestCase):

    @classmethod
    def setUpClass(cls)
        cls.driver = webdriver.Chrome()
        cls.startup = StartUpPage(driver)
        cls.register = RegisterPage(driver)

    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()

    ...
</code></pre>
<p>In <code>pytest</code> terms, you would create a <a href="https://docs.pytest.org/en/latest/unittest.html#mixing-pytest-fixtures-into-unittest-testcase-subclasses-using-marks" rel="nofollow noreferrer">class-scoped fixture</a>:</p>
<pre><code>import pytest

@pytest.fixture(scope="class")
def driver(request):
    # code before 'yield' is executed before the tests
    request.cls.driver = webdriver.Chrome()
    request.cls.startup = StartUpPage(request.cls.driver)
    request.cls.register = RegisterPage(request.cls.driver)
    yield
    # code after 'yield' is executed after the tests
    request.cls.driver.quit()


@pytest.mark.usefixtures('driver')
class FlightTest(unittest.TestCase):

    def test_spam(self):
        self.driver.get('https://www.google.de')

    def test_eggs(self):
        self.driver.get('https://www.facebook.com')
</code></pre>
<p>An even better solution would be using the context manager property of the webdriver so it is automatically closed no matter what:</p>
<pre><code>import pytest

@pytest.fixture(scope="class")
def driver(request):
    with webdriver.Chrome() as driver:
        request.cls.driver = driver
        request.cls.startup = StartUpPage(driver)
        request.cls.register = RegisterPage(driver)
        yield


@pytest.mark.usefixtures('driver')
class FlightTest(unittest.TestCase):

    def test_spam(self):
        self.driver.get('https://www.google.de')

    def test_eggs(self):
        self.driver.get('https://www.facebook.com')
</code></pre>
</div>
<span class="comment-copy">This code does the job for me. Thanks                                     @pytest.fixture(scope="class") def driver(request):     yield     # code after 'yield' is executed after the tests     request.cls.driver.quit()</span>
<span class="comment-copy">Nice, glad I could help!</span>
