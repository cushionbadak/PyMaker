<div class="post-text" itemprop="text">
<p>When I import a Python 3 package I created, the tab-completion for the package includes some packages that are imported by my package from other packages like <code>pandas</code>.</p>
<p>The package has this basic structure:</p>
<pre><code>foo/
    foo/
    __init__.py
    bar.py
    baz.py
    qux.py
    setup.py
</code></pre>
<p>My <code>__init__.py</code> contains</p>
<pre><code>from .bar import *
from .baz import *
from .qux import *
</code></pre>
<p>The problem is that <code>baz.py</code> looks like this</p>
<pre><code>import pandas as pd

def f1(data):
    # do something with pandas (pd)

def f2(data):
    # do something different with pandas (pd)
</code></pre>
<p>Thus, when I <code>import foo</code>, I get tab-completion options like <code>foo.pd</code>, which is not really a valid anything. For all <code>foo.X</code> I want <code>X</code> to be a function or class defined by me, not imported from another package.</p>
<p>What is the best way around this? Should I add <code>import pandas as pd</code> to <code>__init__.py</code>? I know I could <code>import pandas as pd</code> inside of every single function, but that seems like overkill for anything more than a trivial example like this one.</p>
<p>Is it just a problem with Jupyter's tab-completion?</p>
</div>
<div class="post-text" itemprop="text">
<p>Set <a href="https://docs.python.org/3/tutorial/modules.html#importing-from-a-package" rel="nofollow noreferrer"><code>__all__</code></a> in your <code>__init__.py</code> to define what should be exposed when you <code>import *</code> from your module:</p>
<blockquote>
<p>The only solution is for the package author to provide an explicit index of the package. The <a href="https://docs.python.org/3/reference/simple_stmts.html#import" rel="nofollow noreferrer"><code>import</code></a> statement uses the following convention: if a packageâ€™s <code>__init__.py</code> code defines a list named <code>__all__</code>, it is taken to be the list of module names that should be imported when <code>from package import *</code> is encountered. It is up to the package author to keep this list up-to-date when a new version of the package is released.</p>
</blockquote>
<p>For example:</p>
<pre><code>__all__ = ["stuff", "you", "want", "to", "expose"]
</code></pre>
<p>Alternatively, you can <code>import pandas as _pd</code> since <a href="https://docs.python.org/3/tutorial/modules.html#more-on-modules" rel="nofollow noreferrer">names starting with <code>_</code> won't be imported by default</a>.</p>
</div>
<span class="comment-copy">"Thus, when I <code>import foo</code>, I get tab-completion options like <code>foo.pd</code>, which is not really a valid anything." Sure it is. Try it out! You should have access to all of <code>pandas</code> via <code>foo.pd</code>. Anyway, there's a way to avoid this. I'll add an answer.</span>
<span class="comment-copy">Thanks, but this doesn't exactly lead to the behavior I am looking for. If I do <code>from foo import *</code>, I'd have to call <code>baz.f1(data)</code> instead of just <code>foo.f1()</code>.</span>
