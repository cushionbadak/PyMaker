<div class="post-text" itemprop="text">
<p>without introduction, i wrote the following script :</p>
<pre><code>#!/usr/bin/env python3
import threading

def hello():
    print('hello world')

def open_file(filename):
    index = 0
    while index &lt; 10:
        print('creating file {}{}.txt'.format(filename, index))
        with open('{}{}.txt'.format(filename, index), 'w') as f:
            f.write(':)')
        index += 1

def main():
    t1 = threading.Thread(target=open_file, args=('hero',))
    t1.start()
    hello()

if __name__ == '__main__':
    main()
</code></pre>
<p>the script is working fine, here is the output i get:</p>
<pre><code>creating file hero0.txt
hello world
creating file hero1.txt
creating file hero2.txt
creating file hero3.txt
creating file hero4.txt
creating file hero5.txt
creating file hero6.txt
creating file hero7.txt
creating file hero8.txt
creating file hero9.txt
[Finished in 0.1s]
</code></pre>
<p>i found in the documentation that deamon property means that the script will be running in the background, so i edited the script into this :</p>
<pre><code>t1 = threading.Thread(target=open_file, args=('hero',), daemon=True)
</code></pre>
<p>but it doesn't keep creating files in the background, it creates only the first one</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>daemon</code> property in Python threads is a different kind of "daemon" than the Unix usage. In Unix, daemons are programs that run unassociated with a terminal, or in the background so to speak. In Python, these threads are threads the main thread won't check before exiting, so any thread you make a daemon thread that's still running when the main thread exits will be ended at that time. Threads that aren't daemon threads are waited for by the main thread on exit, and the program won't end until they've all finished.</p>
<p>So, in your program, since you aren't synchronizing the exit of your threads explicitly, when they're not daemons, the main thread will automatically wait for them to finish before exiting, and so all the files are created. When they are daemons, they'll be terminated when the main thread exits, and so only the threads that managed to get through creating a file will have files created, and the rest won't.</p>
</div>
<span class="comment-copy">Your script process is finishing and taking the thread with it. You need to call <code>t1.join()</code> or implement a fixed wait e.g.<code>time.sleep(10)</code></span>
<span class="comment-copy">"i found in the documentation that deamon property means that the script will be running in the background" - what made you think that? Maybe you got things mixed up with Unix daemons or something.</span>
<span class="comment-copy">Suggest you reread the <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow noreferrer"><code>threading</code> module's documentation</a>—starting with the sixth paragraph in the linked section which describes what a  “daemon thread” is.</span>
