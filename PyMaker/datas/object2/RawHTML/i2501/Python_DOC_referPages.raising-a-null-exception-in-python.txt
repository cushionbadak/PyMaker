<div class="post-text" itemprop="text">
<p>I am trying to write a function that does error checking in the following way.</p>
<pre><code>def check_var_type(var, var_name, type):
    t = type(var)
    if t is type or t is list:
        return None
    else:
        return TypeError(
            f"Invalid {var_name} type '{t.__module__}.{t.__name__}', "
            f"'{float.__module__}.{float.__name__}' or "
            f"'{list.__module__}.{list.__name__}' expected.")


my_var = 1
raise check(my_var, 'my_var', float)
</code></pre>
<p>My expectation of Python's <code>raise</code> command was that if I pass <code>None</code> to it, it would simply ignore it and raise no exception. The response, however, was:</p>
<pre><code>TypeError: exceptions must derive from BaseException
</code></pre>
<p>I then had a look at Python's <a href="https://docs.python.org/3/library/exceptions.html" rel="nofollow noreferrer">built-in exception types</a> to see if something like <code>Nonthing</code>, <code>NoError</code>, etc. exists. No luck though.</p>
<p>I can, of course raise the exception in the <code>check_var_type</code> function, but I don't want to, since this would add an extra line to the stack trace.</p>
<p>So, my (perhaps silly) question is: How can I use <code>raise</code> to not raise an exception? :-)</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to raise an exception, don't call <code>raise</code> (whose sole job IS to raise an exception).</p>
<p>Perhaps what you really want is to call <code>raise</code> from <em>inside</em> <code>check_var_type</code> when you actually do want to raise an exception, and just use <code>return</code> when you don't.</p>
<p>An alternative might be to leave <code>check_var_type</code> as is, but wrap the call to it in an <code>if</code> that one raises the exception returned when an exception is returned.</p>
</div>
<span class="comment-copy">Is there a reason you don't just raise the <code>TypeError</code> instead of returning it?</span>
<span class="comment-copy">I don't think you could use <code>raise</code> for anything else that raising exceptions. IMHO, adding a line to back trace is not so disturbing. Finally, you could get the result of your function and raise it if it is not None.</span>
<span class="comment-copy">@JETM: Yes, as I explained, I don't want the stack trace to point into the check_var_type function, but rather to the line where I call raise.</span>
<span class="comment-copy">Then catch it at the call and raise a new one. There's pretty much only one thing you should be doing with exceptions: raising them. Why do you even care how many lines the backtrace has?</span>
<span class="comment-copy">That's mostly a non-issue. The stack trace will say <code>foo_function â†’ check_var_type</code>, so it's pretty easy to spot that, yes, the error was raised in the latter, but the former initiated that check, so it's easy to spot where the actual problem is located.</span>
<span class="comment-copy">Thanks Scott. I do believe that it would be a helpful addition to the language if one could use raise None.</span>
<span class="comment-copy">Why would you raise None? If by that you mean raise nothing then don't raise if you want generic exception then use raise Exception</span>
<span class="comment-copy">It is analogous to a for loop such as "for i in range(a, b):", which would do nothing if a and b are equal.</span>
<span class="comment-copy">@johzi The line <code>for ...</code> will still do something, only the <i>following indented block</i> won't. Same with <code>raise</code> and <code>return</code> and similar, those lines will always do something.</span>
<span class="comment-copy">It would be <i>less</i> explicit and less clear, because it would mean that <code>raise</code> contained an <i>implicit</i> <code>if</code> statement. It would mean <code>raise</code> is only <i>sometimes-raise</i>. If I see a <code>raise</code> statement in the code, I could only tell that it <i>might</i> raise, or it might be ignored.</span>
