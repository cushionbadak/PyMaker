<div class="post-text" itemprop="text">
<p>Is there an elegant way to have a float→str output with eg zero or one digits?</p>
<p>8.5 should become '8.5', and 9.0 should become '9'.</p>
<p>Update. Well, to make it more precise, the way, that'll work for any float, and will output one digit save for the "integer" floats, which should be formatted as integers, id est without decimal point.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <code>str.format</code> with "General format" as described <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">here</a>.</p>
<pre><code>In [1]: print('{:.9g}'.format(8.5))
8.5

In [2]: print('{:.9g}'.format(9.0))
9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3.6+ you should consider formatted string literals (<a href="https://www.python.org/dev/peps/pep-0498/" rel="nofollow noreferrer">PEP 498</a>):</p>
<pre><code>x = 8.5
y = 9.0
z = 8.05

for i in (x, y, z):
    print(f'{i:.9g}')

8.5
9
8.05
</code></pre>
<p>Manually, you can define a function to compare <code>float</code> and <code>int</code> values:</p>
<pre><code>def make_str(x):
    float_val = float(x)
    int_val = int(float_val)
    if float_val == int_val:
        return str(int_val)
    return str(float_val)

make_str(9.0)  # '9'
make_str(8.5)  # '8.5'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just a <code>replace</code>:</p>
<pre><code>&gt;&gt;&gt; s = 8.5
&gt;&gt;&gt; str(s).replace('.0', '')
8.5
&gt;&gt;&gt; s = 9.0
&gt;&gt;&gt; str(s).replace('.0', '')
9
</code></pre>
<p>Cases like <code>8.05</code> fail using <code>replace</code>. To handle such cases, if you want, use <code>re.sub</code>:</p>
<pre><code>import re

s = 8.05
print(re.sub(r'\.0*$', '', str(s)))
# 8.05
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Turned out that for my use case I can use Decimal instead of float, setting it from strings, and it does the right thing™:</p>
<pre><code>&gt;&gt;&gt; 'value={}'.format(Decimal('5'))
'value=5'
&gt;&gt;&gt; 'value={}'.format(Decimal('5.5'))
'value=5.5'
</code></pre>
</div>
<span class="comment-copy">You can also use formatted string literals in Python 3.6+, e.g. <code>f'{8.5:.9g}'</code>. +1</span>
<span class="comment-copy">Alas: '{:.9g}'.format(123456789.1). But for my use case and for my possible inputs, this will work well: '{:.9g}'.format(round(8.55,1))</span>
<span class="comment-copy">Yes, that's what I'm doing now and it works well, but I'm interested in something more elegant:) the replace() answer looks nice.</span>
<span class="comment-copy">@aikipooh, In that case, I'd phrase your original question more precisely. What are your concern(s)? Performance, number of lines of code, existence of a potential built-in that does the job?</span>
<span class="comment-copy">um, I think elegance, something that's called pythonic way, I think there's no ready builtin, I've even looked into numpy. Just was interested to learn something new here, no real concerns and no real problem! Thank you for the answer anyway.</span>
<span class="comment-copy">@aikipooh, I see, well for elegance I don't think anything beats formatted string literals (as per my update).</span>
<span class="comment-copy">general format will fail in the case of very big number, it'll eat the fractional part… But thank you for the f-strings mention, nice thing to learn, going to happily change thereto from format():)</span>
<span class="comment-copy">Ah, forgot to mention the third case here for completeness: 8.55:) But yes, it's better than what I have now and will suit my needs too, because I have maximum 1 digit after the point. Oh, just occured to me: 8.05 will pose a problem.</span>
<span class="comment-copy">What do you expect for <code>8.55</code>?</span>
<span class="comment-copy">8.5 would suffice, I've had no need for any intelligent rounding. So changing s to round(s,1) should fix it anyway, Both 8.55 and 8.05.</span>
<span class="comment-copy">I've added a snippet that solves <code>8.05</code> problem.</span>
