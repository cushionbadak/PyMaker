<div class="post-text" itemprop="text">
<p>Given a class <em>inheriting from an abstract class</em>, I'd like to be able to get all of its subclasses, but <em>from within the class</em> itself.</p>
<p>I've managed to create a <code>@classmethod</code> doing just that: </p>
<pre><code>&gt;&gt;&gt; Eukaryota.get_subtypes()
[&lt;class '__main__.Plantae'&gt;, &lt;class '__main__.Fungi'&gt;]
</code></pre>
<p>but is there a way I could do that using <code>@property</code> or through class attribute? </p>
<pre><code>&gt;&gt;&gt; Eukaryota.subtypes
[&lt;class '__main__.Plantae'&gt;, &lt;class '__main__.Fungi'&gt;]
</code></pre>
<p>(It seems that properties are only for intances of a class, not the class itself.)</p>
<p>Here is the one with <code>@classmethod</code> (using taxonomy):</p>
<pre><code>from abc import ABCMeta, abstractmethod


class Kingdom(object):
    __metaclass__ = ABCMeta

    @classmethod
    @abstractmethod
    def get_subtypes(cls):
        pass


class Prokaryota(Kingdom):
    @classmethod
    def get_subtypes(cls):
        return cls.__subclasses__()


class Eukaryota(Kingdom):
    @classmethod
    def get_subtypes(cls):
        return cls.__subclasses__()

class Bacteria(Prokaryota):
    pass


class Plantae(Eukaryota):
    pass


class Fungi(Eukaryota):
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor class</a>:</p>
<pre><code>class get_subclasses:
    def __get__(self, obj, objtype):
        return objtype.__subclasses__()

class Eukaryota(Kingdom):
    subtypes = get_subclasses()
</code></pre>
<p>so that <code>Eukaryota.subtypes</code> would return:</p>
<pre><code>[&lt;class '__main__.Plantae'&gt;, &lt;class '__main__.Fungi'&gt;]
</code></pre>
</div>
<span class="comment-copy">I think the duplicate linked answers your question; ping me (use @Reblochon) in a comment if it doesn't.</span>
<span class="comment-copy">@ReblochonMasque I did originally also flag this as duplicate, but OP really wants to know how to access classmethods from within an instance... which is just a matter of calling it directly, or indirectly (from within a <code>@property</code>) through <code>return type(self).get_subtypes()</code></span>
<span class="comment-copy">@ReblochonMasque metatoaster is right in that I want to know if there's a way to do the example in the second code box: <code>Eukaryota.subtypes</code> returning list of <code>Eukaryota</code>'s subclasses Unless you think it's a bad idea.</span>
<span class="comment-copy">This question seems disjointed and unmotivated. Why is it important that the class inherits from an abstract class? Why the emphasis on "from within the class itself", especially since you're accessing this thing from outside the class? Why did you write <code>get_subtypes</code> when <code>__subclasses__</code> already exists? What's wrong with <code>__subclasses__</code> - do you have something against the parentheses?</span>
<span class="comment-copy">@user2357112 You're right.. I think I was just stuck. and I agree it's not at all necessary to get it as a class attribute (i can use <code>__subclasses__</code> or the answer Reblochon Masque linked) but I was just wondering if there's a way</span>
<span class="comment-copy">It's probably better to use <code>owner.__subclasses__()</code> instead of requiring <code>cls</code> as a constructor argument.</span>
<span class="comment-copy">Great point. I've updated my answer accordingly.</span>
