<div class="post-text" itemprop="text">
<p><em>DISCLAIMER: I am not asking how to check if an element is contained within a list. I am asking how to check which list an element is contained in.</em></p>
<p>Consider this code:</p>
<pre><code>x = ["i", "hello", "great"]
y = ["what", "food"]
chosen = input("Input a word: ")
#what comes next?
</code></pre>
<p>I want to print the name of the list that variable <code>chosen</code> is a part of (the program should print <code>x</code>, <code>y</code>, or just nothing at all)</p>
<p>How would I determine which list the inputted word is a part of?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = ["i", "hello", "great"]
y = ["what", "food"]
chosen = input("Input a word: ")
if chosen in x:print("x")
if chosen in y:print("y")
elif chosen not in x:print("Not Found!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use a data structure designed for quick lookup. Presumably, none of your lists will contain conflicting elements. In that case, the <em>elements</em> are perfect candidates for dictionary keys. This calls for the relatively arcane method <a href="https://docs.python.org/3/library/stdtypes.html#dict.fromkeys" rel="nofollow noreferrer"><code>dict.fromkeys</code></a>:</p>
<pre><code>x = [...]
y = [...]

mapping = {}
mapping.update(dict.fromkeys(x, 'x'))
mapping.update(dict.fromkeys(y, 'y'))
</code></pre>
<p>Now you have a dictionary that will immediately tell you where a word belongs:</p>
<pre><code>word = input().casefold()
print(mapping.get(word, 'Not Found!'))
</code></pre>
<p>I'd probably stick this into a class to manage the dictionary, lists and lookup. You could register a list under any name that way:</p>
<pre><code>class WordLists(dict):
    def __init__(self):
        super ().__init__()

    def register_list(name, data):
        self.update(dict.fromkeys(data, name))

    def __getitem__(self, word):
        return super().get(word.casefold(), 'Not Found')

wl = WordList()
wl.register('x', x)
wl.register('y', y)
print(wl[input()])
</code></pre>
<p>Part of what you need to remember is that python variables can be bound to any number of names. That's why I suggest explicitly stating what name you want to return for each list. It doesn't have to be related to the name of the variable at all.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>pairs = ((x, "x"), (y, "y")) 

[print(lst_name) for lst, lst_name in pairs if chosen in lst]
</code></pre>
<p>The first statement constructs the tuple of pairs of type <code>(list, list_name)</code>, the second is the list comprehension which as a <em>side effect</em> prints the name(s) of the appropriate list(s).</p>
</div>
<span class="comment-copy">What have you tried so far?</span>
