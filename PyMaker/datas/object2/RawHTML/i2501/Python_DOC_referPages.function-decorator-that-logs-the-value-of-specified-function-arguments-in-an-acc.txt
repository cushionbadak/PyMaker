<div class="post-text" itemprop="text">
<p>I am trying to create a function decorator that logs the value specified function arguments in an accessible python object. I have already working code but I am missing a piece to finish this up.</p>
<p>First, I have the object log where I will save stuff correctly set up:</p>
<pre><code>class Borg:
    _shared_state = {}

    def __init__(self):
        self.__dict__ = self._shared_state

class Log(Borg):

    def __init__(self):
        Borg.__init__(self)
        if not hasattr(self, 'tape'):
            self.tape = []

    def add(self, this):
        self.tape.append(this)

    def __str__(self):
        return '\n'.join([str(line) for line in self.tape])
</code></pre>
<p>Then I have a generic call object and the decorator implementation (with missing code):</p>
<pre><code>import inspect
import functools

class Call:

    def __init__(self, name, **saved_arguments):
        self.name = name
        self.saved_arguments = saved_arguments

    def __str__(self):
        return f'Call(name={self.name}, saved_arguments={self.saved_arguments})'

def record(func, save_args_names=None):
    if save_args_names is None:
        save_args_names = {}
    name = func.__name__
    args = inspect.getfullargspec(func).args
    if save_args_names and not set(save_args_names).issubset(set(args)):
        raise ValueError(f'Arguments not present in function: {set(save_args_names) - set(args)}')
    log = Log()

    @functools.wraps(func)
    def wrapper(*func_args, **func_kwargs):
        # **here** I am missing something to replace 0 with the correct values!
        saved_arguments = {a: 0 for a in save_args_names}
        log.add(Call(name, **saved_arguments))
        return_value = func(*func_args, **func_kwargs)
        return return_value

    return wrapper
</code></pre>
<p>To test this, I have the following functions set up:</p>
<pre><code>def inner(x, add=0):
    return sum(x) + add

def outer(number, add=0):
    x = range(number)
    return inner(x, add)
</code></pre>
<p>and the basic use case (no saving of arguments) works:</p>
<pre><code>inner = record(inner)
print(outer(1), outer(2), outer(3))
print(Log())
</code></pre>
<p>It outputs, correctly:</p>
<pre><code>0 1 3
Call(name=inner, saved_arguments={})
Call(name=inner, saved_arguments={})
Call(name=inner, saved_arguments={})
</code></pre>
<p><strong>What I am missing</strong> is a way to have this use case:</p>
<pre><code>inner = record(inner, save_args_names=['x'])
print(outer(1), outer(2), outer(3))
print(Log())
</code></pre>
<p>to output:</p>
<pre><code>0 1 3
Call(name=inner, saved_arguments={'x': range(0, 1)})
Call(name=inner, saved_arguments={'x': range(0, 2)})
Call(name=inner, saved_arguments={'x': range(0, 3)})
</code></pre>
<p>This, should also work for keyword arguments, e.g.:</p>
<pre><code>inner = record(inner, save_args_names=['x', 'add'])
print(outer(1, 2), outer(2, 3), outer(3, 4))
print(Log())
</code></pre>
<p>should output:</p>
<pre><code>2 4 7
Call(name=inner, saved_arguments={'x': range(0, 1), 'add': 2})
Call(name=inner, saved_arguments={'x': range(0, 2), 'add': 3})
Call(name=inner, saved_arguments={'x': range(0, 3), 'add': 4})
</code></pre>
<p>I feel like I am close and that the <code>inspect</code> library should help me close this, but a little help would be much appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>The function you're looking for is <a href="https://docs.python.org/3/library/inspect.html#inspect.Signature.bind" rel="nofollow noreferrer"><code>Signature.bind</code></a>. Define your <code>wrapper</code>function like so:</p>
<pre><code>@functools.wraps(func)
def wrapper(*func_args, **func_kwargs):
    signature = inspect.signature(func)
    bound_args = signature.bind(*func_args, **func_kwargs)
    saved_arguments = {a: bound_args.arguments[a] for a in save_args_names}

    log.add(Call(name, **saved_arguments))
    return_value = func(*func_args, **func_kwargs)
    return return_value
</code></pre>
</div>
<span class="comment-copy">You can't ever get <code>saved_arguments={'x': 1}</code> because the <code>outer</code> function passes a range object to <code>inner</code>. So you'll get <code>saved_arguments={'x': range(0, 1)}</code>.</span>
<span class="comment-copy">Also, you should decorate your <code>wrapper</code> function with <code>@functools.wraps(func)</code>. Every proper decorator should use <code>@wraps</code>.</span>
<span class="comment-copy">You are right on the correct output. Edited question to reflect that.</span>
<span class="comment-copy">Thanks, works for me! Signature.bind was definitely what I was looking for!</span>
