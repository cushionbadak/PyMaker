<div class="post-text" itemprop="text">
<p>I have some code below that I'm using to take an input of files, open and process, and then output some data. I've gotten the functionality working and I'm unit testing it now, below is an example of the code.</p>
<pre><code>def foo(dir):
    path_to_search = join(dir, "/baz/foo")

   if isdir(path_to_search): 
   #path exists so do stuff...

        for fname in listdir(path_to_search):
            do_stuff()

   else:
       print "path doesn't exist"
</code></pre>
<p>I've been able to create a test where the past doesn't exist easily enough, but as you can see above I assert that the "/baz/foo" portion of the directory structure exists (in production the directory structure must have this file, in some cases it won't and we won't need to process it.)</p>
<p>I've tried to create a temporary directory structure using TempDir and join, but the code always kicks out saying the path doesn't exists. </p>
<p>Is it possible to mock the output of os.listdir such that I won't need to create a temporary directory structure that follows the needed /baz/foo convention? </p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to create a fake directory structure, all you need to do is mock the <code>isdir()</code> and <code>listdir()</code> functions.</p>
<p>Using the <a href="https://docs.python.org/3/library/unittest.mock.html" rel="noreferrer"><code>unittest.mock</code> library</a> (or the external <a href="http://www.voidspace.org.uk/python/mock/" rel="noreferrer"><code>mock</code> library</a>, which is the exact same thing for Python versions &lt; 3.3):</p>
<pre><code>try:
    # Python &gt;= 3.3 
    from unittest import mock
except ImportError:
    # Python &lt; 3.3
    import mock

with mock.patch('yourmodule.isdir') as mocked_isdir, \
        mock.patch('yourmodule.listdir') as mocked_listdir:
    mocked_isdir.return_value = True
    mocked_listdir.return_value = ['filename1', 'filename2']

    yourmodule.foo('/spam/eggs')

    mocked_isdir.assert_called_with('/spam/eggs/baz/foo')
    mocked_listdir.assert_called_with('/spam/eggs/baz/foo')
</code></pre>
</div>
<span class="comment-copy">You could use Labix Mocker and <a href="http://labix.org/mocker#CA-a25a2c16ecea818439349b5f0b23eda994ab34bf_010" rel="nofollow noreferrer"><code>mocker.replace()</code></a> for this.</span>
<span class="comment-copy">@LukasGraf: better to use the stdlib <code>unittest.mock</code> or it's backport, <code>mock</code>.</span>
<span class="comment-copy">@MartijnPieters I personally prefer Labix Mocker mainly for the reason that they seem to be the only ones that got patching right. See <a href="http://www.voidspace.org.uk/python/mock/patch.html#where-to-patch" rel="nofollow noreferrer">Where to Patch</a>. Labix mocker takes care of that for you by actually gathering references to objects it patches, and patching and resetting those as well, and it just works.</span>
<span class="comment-copy">@LukasGraf: I actually dislike such magic. I want to be in control as to what code is patched, not have it magically apply it <i>everywhere</i>.</span>
<span class="comment-copy">@MartijnPieters in real code, definitely. In tests, I welcome anything that makes my life easier. As for being in control: If a simple refactoring like changing <code>import a; a.SomeName</code> to <code>from a import SomeName</code> can break your tests in subtle ways, that's a loss of control as well.</span>
<span class="comment-copy">Hmm, could you explain this a little bit more, it doesn't seem to be working when I give it 'spam/eggs' as input. I see we are saying that isdir should result to true, and that list dir should return these files names, now are these file names "real" or do I need to temp create them so that they can be read?</span>
<span class="comment-copy">@openingceremony: Your code isn't requiring them to be real, because any functions that would otherwise require a real path have been replaced by your mocks. They don't need real paths, you just configure them to return whatever your code-under-test expects to see.</span>
<span class="comment-copy">I see, when I ran this code the assertions failed because they were not called, shouldn't my code have called isdir/listdir?</span>
<span class="comment-copy">@openingceremony: make sure you patched the correct objects! See <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer"><i>Where to patch</i></a>. If your mocks weren't called, you didn't patch the right object.</span>
<span class="comment-copy">I double checked and you seem to be right, I put the full path to the object for patching, I think the problem might be because the function I'm trying to run doesn't have listdir as an attribute? It imports it from os, not sure what the protocol would be in this case, I tried mocking os.listdir and that didnt seem to work either.</span>
