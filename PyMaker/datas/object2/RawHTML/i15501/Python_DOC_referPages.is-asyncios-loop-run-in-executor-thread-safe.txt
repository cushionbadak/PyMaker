<div class="post-text" itemprop="text">
<p>I'm trying out asyncio and have to mix it with some normal multi threaded blocking code, so I need to offload the execution using run_in_exector.</p>
<p>The <a href="https://docs.python.org/3/library/asyncio-dev.html#concurrency-and-multithreading" rel="noreferrer">asyncio docs warn that "most functions" aren't threadsafe</a>, and that <code>call_soon_threadsafe</code> is the only thread-safe function. There are a couple others, like <code>Future.add_done_callback</code>, too, that are explicitly documented as thread safe. It then has a sentence afterwards saying "you can use run_in_executor to run callbacks in other threads", but doesn't comment on the thread-safety of it specifically.</p>
<p><a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor" rel="noreferrer">run_in_executor</a> isn't doc'd to be thread-safe, but looking at the source, it looks like it is thread safe if the right code-paths are taken.</p>
<p>Does anyone know if it is <em>supposed</em> to be thread safe, but just isn't documented to be that way?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>run_in_executor</code> is supposed to be <em>not threadsafe</em> by <em>specification</em> (sorry, it looks like implicit statement and probably should be clarified in PEP-3156).</p>
<p>Even if concrete implementation is thread safe please don't assume that any PEP-3156 compliant implementation will be thread-safe too.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think it entirely depends on what you give it. It effectively just starts a thread and runs your code, so whether that is thread safe or not depends on what you tell it to do.</p>
</div>
<div class="post-text" itemprop="text">
<p>The default implementation looks to be thread-safe if the executor parameter is not None or the default executor is already set (call loop.set_default_executor()). Otherwise, two executor may be created.</p>
<p>You may write a patch to make the method thread-safe ;-)</p>
</div>
<span class="comment-copy">What do you mean by "thread-safe" in this context? The documentation uses that term to indicate if it's safe to call a given method from a thread outside of the one running the <code>asyncio</code> event loop. That's probably not what you're asking here, though, is it?</span>
<span class="comment-copy">That's exactly what i meant. I have some existing multi threaded code and am trying to use asyncio with it, so i need a thread safe way to schedule blocking code.</span>
<span class="comment-copy">The correct way to make it (or anything) thread thread safe is to wrap it in call_soon_threadsafe:  <code>loop.call_soon_threadsafe(loop.run_in_executor, executor, callback, *args))</code></span>
