<div class="post-text" itemprop="text">
<p>The function definition below comes from the itertools recipes page (<a href="https://docs.python.org/2/library/itertools.html#recipes" rel="nofollow">https://docs.python.org/2/library/itertools.html#recipes</a>):</p>
<pre><code>def random_product(*args, **kwds):
    "Random selection from itertools.product(*args, **kwds)"
    pools = map(tuple, args) * kwds.get('repeat', 1)
    return tuple(random.choice(pool) for pool in pools)
</code></pre>
<p>The function signature would seem to be more readable written with the "repeat" argument specified explicitly, e.g.</p>
<pre><code>def random_product(*args, repeat=1)
</code></pre>
<p>But I'm guessing there is a reason why it is written using the general idiom. Can anyone explain?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you can't have keyword arguments after <code>*args</code> in Python 2.x, it's a <code>SyntaxError</code>:</p>
<pre><code>&gt;&gt;&gt; def random_product(*args, repeat=1):

SyntaxError: invalid syntax
</code></pre>
<p>The only option is therefore to use <code>**kwds</code> and extract <code>repeat</code>, if present, from the resulting dictionary.</p>
<p>By contrast, in the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">3.x documentation</a>, <code>random_product</code> is implemented as you suggest, as that syntax <em>is</em> valid in Python 3:</p>
<pre><code>def random_product(*args, repeat=1):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The original code was probably copied from a library function <code>def product(*args, **kwds):</code> and kept this way to look similar to the <code>product()</code> function. Plus <code>def random_product(*args, repeat=1)</code> isn't valid in Python 2.x (kudos go to <a href="https://stackoverflow.com/users/3001761/jonrsharpe">jonrsharpe</a> for pointing this out).</p>
<p>Other than that, I don't see a reason to use <code>**kwds</code> here. If this was a library function that changed over time, it might be there so old arguments would be still supported but even then, I'd prefer <code>, repeat=1, **kwds)</code> to document which arguments are still supported and which are ignored.</p>
<p>To support my point, the next example reads <code>def random_permutation(iterable, r=None):</code>.</p>
</div>
<span class="comment-copy">It's not actually part of <code>itertools</code>; it's just a suggestion how to implement such a function. Most likely, some body wrote it like that for no particular reason, then copied it into the documentation as-is.</span>
<span class="comment-copy">Why have you cross-posted this? What was unclear about Martijn's answer <a href="http://programmers.stackexchange.com/questions/264976/python-recipe-question-use-of-kwds-instead-of-specific-named-argument-in-iter">on Programmers</a>? <code>def random_product(*args, repeat=1):</code> <b>isn't valid syntax</b> in Python 2.x. Note that <code>*args, repeat=1</code> is used <a href="https://docs.python.org/3/library/itertools.html#recipes" rel="nofollow noreferrer">in the 3.x docs</a>, where it is valid.</span>
<span class="comment-copy">The question is phrased as being generic in the title, but reading it, it's about a very specific case. Is the intent to inquire about the general case, or the specific case? (The latter is, as previously noted, already answered elsewhere).</span>
<span class="comment-copy">This is CW as Martijn <a href="http://programmers.stackexchange.com/a/264980/110531">already answered it on Programmers</a>, but you can't close cross-site duplicates; go upvote there if you liked this!</span>
<span class="comment-copy">But unlike <code>def random_product(*args, repeat=1)</code>, <code>def random_permutation(iterable, r=None)</code> is <b>valid Python 2.x syntax</b>.</span>
<span class="comment-copy">@jonrsharpe: Good point. Fixed.</span>
