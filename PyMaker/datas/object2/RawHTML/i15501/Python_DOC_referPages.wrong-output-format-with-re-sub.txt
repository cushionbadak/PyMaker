<div class="post-text" itemprop="text">
<p>I expect this code to print <code>"ez_setup.py"</code> instead it printed <code>"ez_setup\x01"</code>. Please can someone point me in the right direction.</p>
<pre><code>In [7]: url = 'http://sourceforge.net/p/mysql-python/mysqldb-2/ci/default/tree/ez_setup.py?format=raw'
In [8]: url_split = url.split('/')
In [9]: for item in url_split:
   ...:     if ".py" in item:
   ...:         file_name = re.sub(r"(.py).+", "\1", item)

In [10]: file_name
Out[10]: 'ez_setup\x01'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to use a <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow">raw-string</a> for <code>\1</code>:</p>
<pre><code>file_name = re.sub(r"(.py).+", r"\1", item)
#                              ^
</code></pre>
<p>Otherwise, it will be interpreted as an escape sequence:</p>
<pre><code>&gt;&gt;&gt; '\1'
'\x01'
&gt;&gt;&gt; r'\1'
'\\1'
&gt;&gt;&gt;
</code></pre>
<p>Note too that <code>.</code> is a special character in Regex patterns.  It tells Python to match <em>any</em> character (except a newline).  I think you meant to escape it before <code>py</code>:</p>
<pre><code>file_name = re.sub(r"(\.py).+", r"\1", item)
</code></pre>
<p>Now Python will match a literal period.</p>
</div>
<span class="comment-copy">What is <code>url_split</code>?</span>
<span class="comment-copy">have updated the code</span>
<span class="comment-copy">or even easier just <code>re.sub(r"(\.py).+)",".py",item)</code> using <code>\\1</code> doesnt make much sense for this imho</span>
