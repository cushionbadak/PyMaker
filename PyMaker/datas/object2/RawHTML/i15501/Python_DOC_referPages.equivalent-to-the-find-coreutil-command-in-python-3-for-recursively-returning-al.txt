<div class="post-text" itemprop="text">
<p>What is best alternative to find in python (3) for recursively returning all files and folders in a directory structure?</p>
<p>I want something similar to:</p>
<pre><code>find ~/x/y/ &gt; ~/matches.txt
</code></pre>
<p>I rewrote a tip from <a href="https://stackoverflow.com/a/27457665/908494">another question</a> and got something that kind of works, but it has some problems:</p>
<pre><code>matches = glob.glob("/Users/x/y/*/*)
</code></pre>
<p>This will not work if there are any files in "~/x/y/" which could happen I'm also not sure it's a robust or idiomatic way to do this.</p>
<p>So what's the best way to copy the above find command in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/os.html#os.walk"><code>os.walk</code></a>:</p>
<p>To get directory, file name list:</p>
<pre><code>import os

matches = []
for dirpath, dirnames, filenames in os.walk(os.path.expanduser('~/x/y')):
    matches.extend(os.path.join(dirpath, x) for x in dirnames + filenames)
</code></pre>
<p>To write the file list to text file:</p>
<pre><code>import os

with open(os.path.expanduser('~/matches.txt'), 'w') as f:
    for dirpath, dirnames, filenames in os.walk(os.path.expanduser('~/x/y')):
        for x in dirnames + filenames:
            f.write('{}\n'.format(os.path.join(dirpath, x)))
</code></pre>
<p><a href="https://docs.python.org/3/library/os.path.html#os.path.expanduser"><code>os.path.expanduser</code></a> is used to replace <code>~</code> with home directory path.</p>
<hr/>
<p>Alternative using <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob"><code>pathlib.Path.rglob</code></a> which available since Python 3.4:</p>
<pre><code>import os
import pathlib

matches = list(map(str, pathlib.Path(os.path.expanduser('~/x/y')).rglob('*')))
</code></pre>
<hr/>
<pre><code>import os
import pathlib

with open(os.path.expanduser('~/matches.txt'), 'w') as f:
    for path in pathlib.Path(os.path.expanduser('~/x/y')).rglob('*'):
        f.write('{}\n'.format(path))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Kinda like os.dirwalk, but with new pathlib constructs:</p>
<pre><code>import pathlib
def pathlibs_dirwalk(dir_path):
     dir_path = Path(dir_path)
     return { f.relative_to(dir_path) for f in dir_path.rglob('*') }
</code></pre>
<p>This one also chops off the root, so it's like like GNU find's version:</p>
<p><code>find /usr/local/gdb-8.2a -printf '%P\n'</code></p>
<p><code>
lib/libopcodes.a
lib/libinproctrace.so
bin
bin/gdb
bin/gcore
</code></p>
</div>
<div class="post-text" itemprop="text">
<p>As much as I like globs, since your question specifically says python 3, I'm more than happy to recommend using <code>os.scandir</code> + <code>yield from</code> to simplify the approach.</p>
<pre><code>import os

def find(path):
    yield path
    if os.path.isdir(path):
        for i in os.scandir(path):
            yield from find(i.path)

for i in find('.'):
    print(i)
</code></pre>
</div>
<span class="comment-copy">Note that <code>glob</code> <i>does</i> actually work recursively, as you can see from <a href="https://hg.python.org/cpython/file/default/Lib/glob.py#l22" rel="nofollow noreferrer">the source</a>. However, this isn't documented; you really should rely on <code>os.walk</code> (and <code>fnmatch</code>, if appropriate, as in your previous question) here.</span>
<span class="comment-copy">Alternatively, in 3.4... <code>for fname in pathlib.Path(os.path.expanduser('~/x/y')).rglob('*'):</code>...</span>
<span class="comment-copy">@JonClements, Thank you for letting me know that. I updated the answer to include it.</span>
<span class="comment-copy">Note that many of the "primaries" (aka filters) that <code>find</code> supplies require calling <code>os.stat</code> on every file (or the equivalent in <code>pathlib</code>), but (as you know from your previous question) <code>fnmatch</code> handles the <code>-name</code>/<code>-iname</code> primary. I believe there's a howto that you can google for showing how to map different primaries to Python code.</span>
<span class="comment-copy">Please put an actual path in your code. I cannot understand it.</span>
