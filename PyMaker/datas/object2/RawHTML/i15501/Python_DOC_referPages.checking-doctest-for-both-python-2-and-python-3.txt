<div class="post-text" itemprop="text">
<p>I'm writing a doctest for a function that outputs a dictionary. The doctest looks like</p>
<pre><code>&gt;&gt;&gt; my_function()
{'this': 'is', 'a': 'dictionary'}
</code></pre>
<p>When I run it, it fails with</p>
<pre><code>Expected:
    {'this': 'is', 'a': 'dictionary'}
Got:
    {'a': 'dictionary', 'this': 'is'}
</code></pre>
<p>My best guess as to the cause of this failure is that doctest isn't checking dictionary equality, but <code>__repr__</code> equality. <a href="http://mail.python.org/pipermail/python-dev/2010-March/098177.html" rel="noreferrer">This post</a> indicates that there's some way to trick doctest into checking dictionary equality. How can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Doctest doesn't check <code>__repr__</code> equality, per se, it just checks that the output is exactly the same. You have to ensure that whatever is printed will be the same for the same dictionary. You can do that with this one-liner:</p>
<pre><code>&gt;&gt;&gt; sorted(my_function().items())
[('a', 'dictionary'), ('this', 'is')]
</code></pre>
<p>Although this variation on your solution might be cleaner:</p>
<pre><code>&gt;&gt;&gt; my_function() == {'this': 'is', 'a': 'dictionary'}
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another good way is to use <code>pprint</code> (in the standard library).</p>
<pre><code>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint({"second": 1, "first": 0})
{'first': 0, 'second': 1}
</code></pre>
<p>According to its source code, it's sorting dicts for you:</p>
<p><a href="http://hg.python.org/cpython/file/2.7/Lib/pprint.py#l158">http://hg.python.org/cpython/file/2.7/Lib/pprint.py#l158</a></p>
<pre><code>items = _sorted(object.items())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I ended up using this. Hacky, but it works.</p>
<pre><code>&gt;&gt;&gt; p = my_function()
&gt;&gt;&gt; {'this': 'is', 'a': 'dictionary'} == p
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>turn it into a list via dict.items() and then sort it ...</p>
<pre><code>&gt;&gt;&gt; l = my_function().items()
&gt;&gt;&gt; l.sort()
&gt;&gt;&gt; l
[('a', 'dictionary'), ('this', 'is')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create an instance of <code>unittest.TestCase</code> class inside your doctests, and use it to compare dictionaries:</p>
<pre><code>def my_function(x):
    """
    &gt;&gt;&gt; from unittest import TestCase
    &gt;&gt;&gt; t = TestCase()

    &gt;&gt;&gt; t.assertDictEqual(
    ...     my_function('a'),
    ...     {'this': 'is', 'a': 'dictionary'}
    ... )

    &gt;&gt;&gt; t.assertDictEqual(
    ...     my_function('b'),
    ...     {'this': 'is', 'b': 'dictionary'}
    ... )

    """
    return {'this': 'is', x: 'dictionary'}
</code></pre>
<p>Note: this approach is better than simply checking if dictionaries are equal, because it will show diff between the two dictionaries.</p>
</div>
<div class="post-text" itemprop="text">
<p>Most of it has been already said here.. anyway JSYK: there is a dedicated section in doctest documentation:</p>
<p><a href="https://docs.python.org/3.5/library/doctest.html#warnings" rel="nofollow noreferrer">https://docs.python.org/3.5/library/doctest.html#warnings</a></p>
</div>
<span class="comment-copy">since dict is unordered, you can't use the dict as it is. you must transform it into an ordered object</span>
<span class="comment-copy">The answers listed below are all in the doctest documentation: <a href="http://docs.python.org/2/library/doctest.html#warnings" rel="nofollow noreferrer">docs.python.org/2/library/doctest.html#warnings</a></span>
<span class="comment-copy">@ornoone  But why?  They are equal objects, that's what doctest should be checking.</span>
<span class="comment-copy">as said in accepted answer, it is the <b>repr</b> for your both object that is checked, not their content. since <code>repr(a) != repr(b)</code> doctest think your objects is differents. event if <code>a == b</code> is ok. i think that is so because doctest is in <b>doc</b>, and should be easyly readable and with the repr check, it is readable.</span>
<span class="comment-copy">Your solution is cleaner but it will fail to tell you what my_function actually evaluated to.</span>
<span class="comment-copy">the pprint solution looks much cleaner, see charlax's answer</span>
<span class="comment-copy">but what if it's a documentation example and I want to show a realistic input and realistic output?  Is there a way to get it to check equality instead of exact strings?</span>
<span class="comment-copy">The second variation you gave worked perfectly for my simple doctest. Thanks!</span>
<span class="comment-copy">the <code>pprint</code>-solution doesn't always work for <code>set</code> doctests - no guaranteed order. If you want to know afterwards what It was evaluated to, you can do <code>my_function() == {'this': 'is', 'a': 'dictionary'} or my_function()</code></span>
<span class="comment-copy">it would be nice, but python devs <a href="https://bugs.python.org/issue20310" rel="nofollow noreferrer">don't recommend this</a> because they don't guarantee pprint stability across versions.</span>
<span class="comment-copy">also, this solution necessarily work for other datatypes (such as set).</span>
<span class="comment-copy">Advantage here is once the assertion fails, <code>pprint</code> will show a helful diff. If <code>pprint</code> implementation changes between Python version, well, we need to adjust our tests or just duplicate the implementation in our code to keep it stable.</span>
<span class="comment-copy">I don't think that's hacky (although I'd write <code>p == {etc}</code>) -- that's the first recommended technique in the relevant section of <a href="http://docs.python.org/3/library/doctest.html#warnings" rel="nofollow noreferrer">the docs</a>.</span>
<span class="comment-copy">why not <code>my_function() == {'this': 'is', 'a': 'dictionary'}</code>?</span>
<span class="comment-copy">The disadvantage here is once the assertion fails, you do not know which keys, values exactly are wrong. Solution with <code>pprint</code> would show a helpful diff.</span>
<span class="comment-copy">or as a one-liner: <code>sorted( my_function().items())</code></span>
