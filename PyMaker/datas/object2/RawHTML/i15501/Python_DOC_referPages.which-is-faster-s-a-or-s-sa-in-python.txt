<div class="post-text" itemprop="text">
<pre><code>s=s+'a'
s+='a'
s.append(a)
</code></pre>
<p>Is there any difference between above three?</p>
<p>I am confused with these choices.</p>
<p>Which needs to be used at what time and is string <code>append</code> method faster than the others?</p>
</div>
<div class="post-text" itemprop="text">
<p>Short answer: Neither. It's like asking which spoon feeds faster? silver or plastic? Neither, it's up to the person who uses it.</p>
<p>In other words this is inapplicable to a language. A language simply talks about grammar and semantics but not about speed i.e. it specifies ways of expressing something and its grammar, not how fast it is done.</p>
<p>Speed is a parameter of an <a href="http://en.wikipedia.org/wiki/Programming_language_implementation" rel="nofollow">implementation</a> not <a href="http://en.wikipedia.org/wiki/Programming_language" rel="nofollow">language</a>; know the difference. An implementation may treat both <code>s += 'a'</code> and <code>s = s + 'a'</code> similarly underneath (so there's no difference between the two on such an implementation) but another implementation can implement one faster over the other. So when talking about speed/efficiency/performance, it's vital to specify what implementation, platform, compiler, etc. is being used.</p>
<p><a href="https://en.wikipedia.org/wiki/CPython/" rel="nofollow">CPython</a>, <a href="http://ironpython.net/" rel="nofollow">IronPython</a>, etc. are implementations of the <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow">Python language</a>, again their speed in performing such expressions may vary based on the compiler, platform, etc. Measure, don't speculate!</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that <code>s</code> is a string, the time required seems to be identical:</p>
<pre><code>$ python -m timeit 's="x"; s+="x"'
10000000 loops, best of 3: 0.0607 usec per loop
$ python -m timeit 's="x"; s=s+"x"'
10000000 loops, best of 3: 0.0607 usec per loop
</code></pre>
<p>Also, string objects to not have an <code>append()</code> method.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can always run the test time yourself, and check:</p>
<pre><code>import timeit

print(timeit.timeit("s=''; s+='a'", number=10000))
print(timeit.timeit("s=''; s=s+'a'", number=10000))
</code></pre>
<p>Both give similar result:</p>
<pre><code>0.000557306000700919
0.0005544929990719538
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>  s= s+'a'

  s += 'a'

  s.append(a) 
</code></pre>
<p>Have a look on <a href="http://www.skymind.com/~ocrow/python_string/" rel="nofollow">http://www.skymind.com/~ocrow/python_string/</a></p>
<p>s.append(a)  is faster among these. Then s needs to be a string list. </p>
</div>
<span class="comment-copy">The second one actually works for you?</span>
<span class="comment-copy">Without knowing what <code>s</code> is, it will be impossible to answer anything. Also, the second example is a syntax error.</span>
<span class="comment-copy">You cant do <code>s.append(a)</code> on a string.</span>
<span class="comment-copy">If you want to concatenate several strings you should use ''.join([str1,str2,....,strN]).</span>
<span class="comment-copy">use ipython's <code>%timeit</code>!</span>
<span class="comment-copy">thank you Marcin but what about append()</span>
<span class="comment-copy">@TirupatiRao You cant do <code>append</code> on  a string.</span>
<span class="comment-copy">ok thank you . what about other sequence data type ?</span>
<span class="comment-copy">@TirupatiRao Just use timeit, to test them in the similar fashion as seen here.</span>
<span class="comment-copy">you cant do <code>append</code> on a string. So how it can be faster?</span>
<span class="comment-copy">There is no string append method. It is a list append method in the link you have given which then uses string's join method to form a string</span>
<span class="comment-copy">Yes, we cant.  <code>def method4():    str_list = []    for num in xrange(loop_count):      str_list.append(</code>num<code>)    return ''.join(str_list)</code></span>
