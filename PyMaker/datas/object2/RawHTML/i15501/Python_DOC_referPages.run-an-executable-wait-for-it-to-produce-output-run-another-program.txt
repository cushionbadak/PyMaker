<div class="post-text" itemprop="text">
<p>Within a Python script, I'm trying to execute the following sequence of events:</p>
<ol>
<li>Open a command window and run a program. When it completes, it outputs a text file.</li>
<li>Once that text file has been created, close the program.</li>
<li>After that has happened, run a new program using the text file as an input</li>
</ol>
<p>Here's what I have so far:</p>
<pre><code>subprocess.popen(['cmd','/c',r'programThatRuns.exe'])
subprocess.wait()  # ? subprocess.check_call()? kill?
subprocess.popen(['cmd','/c',r'otherProgramThatRuns.exe'])
</code></pre>
<p>So I guess I'm really stuck on the second line</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to apply 'wait' on the child process, i.e.</p>
<pre><code>o = subprocess.popen(['cmd','/c',r'programThatRuns.exe'])
o.wait()  
subprocess.popen(['cmd','/c',r'otherProgramThatRuns.exe'])
</code></pre>
<p>or you use <code>check_call</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>I think all you need is:</p>
<pre><code>subprocess.check_call(['programThatRuns.exe'])
subprocess.check_call(['otherProgramThatRuns.exe'])
</code></pre>
<p>The <code>check_call</code> function will run the program and wait for it to finish. If it fails (non-0 exit code) it will throw a <code>CalledProcessError</code> exception.</p>
<p>You generally don't want to run programs through <code>cmd</code>, just run them directly. You only need to force using cmd if the program isn't an executable, e.g. for a builtin command like <code>dir</code>, for a <code>.bat</code> or <code>.cmd</code> file, or if you want to use file associations.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried using <code>subprocess.call</code>?</p>
<p><a href="https://docs.python.org/2/library/subprocess.html#subprocess.call" rel="nofollow">Python 2</a> - <a href="https://docs.python.org/3/library/subprocess.html#subprocess.call" rel="nofollow">Python 3</a></p>
<blockquote>
<p>Run the command described by args. Wait for command to complete, then return the returncode attribute.</p>
</blockquote>
<p>Seems to be what you're trying to do. Simply run the first process, check that the file exists, and pass the file into the second process to use.</p>
<p><code>subprocess.check_call</code> will also work for what you're trying to do, except that if the process returns a non-zero return code it'll raise an exception while <code>call</code> will simply return the return code.</p>
</div>
<span class="comment-copy">Thanks. A wrinkle that I didn't state well is that programThatRuns.exe outputs the text file, but then stays open, causing .check_call() to hang  One alternative is to query to see if the text file has been created, then issue a kill for programThatRuns once it has. But I don't know how to do so.</span>
<span class="comment-copy">Since OP is opening up the text file as input immediately afterwards, you'd definitely want the exception to raise</span>
