<div class="post-text" itemprop="text">
<p>I have data stored in a shelf file created with python 2.7</p>
<p>When I try to access the file from python 3.4, I get an error:</p>
<pre><code>&gt;&gt;&gt; import shelve
&gt;&gt;&gt; population=shelve.open('shelved.shelf')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python34\lib\shelve.py", line 239, in open
    return DbfilenameShelf(filename, flag, protocol, writeback)
  File "C:\Python34\lib\shelve.py", line 223, in __init__
    Shelf.__init__(self, dbm.open(filename, flag), protocol, writeback)
  File "C:\Python34\lib\dbm\__init__.py", line 88, in open
    raise error[0]("db type could not be determined")
dbm.error: db type could not be determined
</code></pre>
<p>I'm still able to access the shelf with no problem in python 2.7, so there seems to be a backward-compatibility issue. Is there any way to directly access the old format with the new python version?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>shelve</code> module uses Python's <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow"><code>pickle</code></a>, which may require a protocol version when being accessed between different versions of Python.</p>
<p>Try supplying protocol version 2:</p>
<pre><code>population = shelve.open('shelved.shelf', protocol=2)
</code></pre>
<p>According to the documentation:</p>
<blockquote>
<p>Protocol version 2 was introduced in Python 2.3. It provides much more efficient pickling of new-style classes. Refer to PEP 307 for information about improvements brought by protocol 2.</p>
</blockquote>
<p>This is most likely the protocol used in the original serialization (or pickling).</p>
</div>
<div class="post-text" itemprop="text">
<p>As I understand now, here is the path that lead to my problem:</p>
<ul>
<li>The original shelf was created with Python 2 in Windows</li>
<li>Python 2 Windows defaults to bsddb as the underlying database for shelving, since dbm is not available on the Windows platform</li>
<li>Python 3 does not ship with bsddb. The underlying database is dumbdbm in Python 3 for Windows.</li>
</ul>
<p>I at first looked into installing a third party bsddb module for Python 3, but it quickly started to turn into a hassle. It then seemed that it would be a recurring hassle any time I need to use the same shelf file on a new machine. So I decided to convert the file from bsddb to dumbdbm, which both my python 2 and python 3 installations can read.</p>
<p>I ran the following in Python 2, which is the version that contains both bsddb and dumbdbm:</p>
<pre><code>import shelve
import dumbdbm

def dumbdbm_shelve(filename,flag="c"):
    return shelve.Shelf(dumbdbm.open(filename,flag))

out_shelf=dumbdbm_shelve("shelved.dumbdbm.shelf")
in_shelf=shelve.open("shelved.shelf")

key_list=in_shelf.keys()
for key in key_list:
    out_shelf[key]=in_shelf[key]

out_shelf.close()
in_shelf.close()
</code></pre>
<p>So far it looks like the dumbdbm.shelf files came out ok, pending a double-check of the contents.</p>
</div>
<div class="post-text" itemprop="text">
<p>Edited: You may need to rename your database. Read on...</p>
<p>Seems like <code>pickle</code> is not the culprit here. <code>shelve</code> relies also in <code>anydbm</code> (Python 2.x) or <code>dbm</code> (Python 3) to create/open a database and store the pickled information.</p>
<p>I created (manually) a database file using the following:</p>
<pre><code># Python 2.7
import anydbm
anydbm.open('database2', flag='c')
</code></pre>
<p>and</p>
<pre><code># Python 3.4
import dbm
dbm.open('database3', flag='c')
</code></pre>
<p>In both cases, it creates the same kind of database (may be distribution dependent, this is on Debian 7):</p>
<pre><code>$ file *
database2:    Berkeley DB (Hash, version 9, native byte-order)
database3.db: Berkeley DB (Hash, version 9, native byte-order)
</code></pre>
<p><code>anydbm</code> can open <code>database3.db</code> without problems, as expected:</p>
<pre><code>&gt;&gt;&gt; anydbm.open('database3')
&lt;dbm.dbm object at 0x7fb1089900f0&gt;
</code></pre>
<p>Notice the lack of <code>.db</code> when specifying the database name, though. But <code>dbm</code> <em>chokes</em> on <code>database2</code>, which is weird:</p>
<pre><code>&gt;&gt;&gt; dbm.open('database2')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python3.4/dbm/__init__.py", line 88, in open
    raise error[0]("db type could not be determined")
dbm.error: db type could not be determined
</code></pre>
<p>unless I change the name of the name of the database to <code>database2.db</code>:</p>
<pre><code>$ mv database2 database2.db
$ python3
&gt;&gt;&gt; import dbm
&gt;&gt;&gt; dbm.open('database2')
&lt;_dbm.dbm object at 0x7fa7eaefcf50&gt;
</code></pre>
<p>So, I suspect a regression on the <code>dbm</code> module, but I haven't checked the documentation. It may be intended :-?</p>
<p>NB: Notice that in my case, the extension is <code>.db</code>, but that depends on the database being used by <code>dbm</code> by default! Create an empty shelf using Python 3 to figure out which one are you using and what is it expecting.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think it's possible to use a Python 2 shelf with Python 3's <code>shelve</code> module. The underlying files are completely different, at least in my tests.</p>
<p>In <strong>Python 2*</strong>, a shelf is represented as a single file with the filename you originally gave it.</p>
<p>In <strong>Python 3*</strong>, a shelf consists of <em>three</em> files: <code>filename.bak</code>, <code>filename.dat</code>, and <code>filename.dir</code>. Without any of these files present, the shelf cannot be opened by the Python 3 library (though it appears that just the <code>.dat</code> file is sufficient for <em>opening</em>, if not actual reading).</p>
<p><a href="https://stackoverflow.com/a/27493814/2069350">@Ricardo Cárdenes</a> has given an overview of why this may be--it's likely an issue with the underlying database modules used in storing the shelved data. It's possible that the databases are backwards compatible, but I don't know and a quick search hasn't turned up any obvious answers. </p>
<p>I think it's likely that <em>some</em> of the possible databases implemented by <code>dbm</code> <em>are</em> backwards-compatible, whereas others are not: this could be the cause of the discrepancy between answers here, where some people, but not all, are able to open older databases directly by specifying a protocol. </p>
<hr/>
<p>*On every machine I've tested, using Python 2.7.6 vs Pythons 3.2.5, 3.3.4, and 3.4.1</p>
</div>
<span class="comment-copy">Yup, I can reproduce this.</span>
<span class="comment-copy">Can't you just convert the source to 3 using the <a href="https://docs.python.org/2/library/2to3.html" rel="nofollow noreferrer">2to3</a> tool?</span>
<span class="comment-copy">Verified that this works with Python 2.7.9 and Python 3.4.1</span>
<span class="comment-copy">Verified that this does NOT work for Python 2.7.12 and 3.5.2 on Ubuntu 16.04.</span>
<span class="comment-copy">Note: This answer "working" depends on which protocol was used to store the information and using the same protocol to retrieve it. There are now protocol versions <code>0</code> and <code>4</code>—only trying version <code>2</code> (as I suggest) will not universally work. It also assumes the error is a result of a protocol version mismatch.</span>
<span class="comment-copy">Thanks very much to all for the thoughts and tips.</span>
<span class="comment-copy">This worked for Python versions 2.7.12 and 3.5.2 running on stock Ubuntu 16.04.</span>
<span class="comment-copy">Hi, after following above process, Below are the files getting generated: 1. shelved.dumbdbm.shelf.bak  2. shelved.dumbdbm.shelf.dat 3. shelved.dumbdbm.shelf.dir 4. shelved.shelf.        I tried reading <code>model = shelve.open('shelved.dumbdbm.shelf') </code>. Getting an empty model.   Also tried to read newly generated <code>shelved.shelf</code>, getting same db type error. can you please help me resolving this error? I am using models from here(<a href="https://www.dropbox.com/sh/e0t37fpq9j226yw/AAD4O_4SZ6jB5jpu9QCiJ9PJa?dl=0" rel="nofollow noreferrer">dropbox.com/sh/e0t37fpq9j226yw/AAD4O_4SZ6jB5jpu9QCiJ9PJa?dl=0</a>). I want to use these models in python3</span>
<span class="comment-copy">"shelved.dumbdbm.shelf" and "shelved.shelf" are only intended as example names. You should replace those with names that match your own case. in_shelf is the existing file being read, so to convert the file in your dropbox you should use in_shelf=shelve.open("wiki.shelve") out_self in this case could be "wiki.dumbdbm.shelve", or any other name you choose.</span>
<span class="comment-copy">Sorry, doesn't seem to do it--</span>
<span class="comment-copy">As an additional problem, it may be that your platform uses different default databases for <code>anydbm</code> and <code>dbm</code>. In my case is the same, but it is not for @HenryKeiter</span>
<span class="comment-copy">I found a post that indicates the trouble could be from a lack of Berkeley db support in python 3. Trying to figure out how to install a 3rd party module to see if this will help. Referenced post is at <a href="https://groups.google.com/forum/#!topic/montrealpython/5TGZsB46rkE" rel="nofollow noreferrer">groups.google.com/forum/#!topic/montrealpython/5TGZsB46rkE</a></span>
<span class="comment-copy">Possibly <a href="https://pypi.python.org/pypi/bsddb3" rel="nofollow noreferrer">bsddb3</a></span>
<span class="comment-copy">Yes, probably-- however, this started to turn into a pain. The installation instructions tell Windows users to run the installer, but there's no installer to be found for Python 3. When I started seeing instructions for compiling the Berkeley db with Visual Studio, I decided it was time for plan B     :)</span>
<span class="comment-copy">Did you test this before you downvoted? Python3 <code>protocol=2</code> does work.</span>
<span class="comment-copy">@JacobBudin Of course I tested it. <code>protocol=2</code> results in exactly the same error.</span>
<span class="comment-copy">@HenryKeiter Just because your shelf interface is different for your Python major versions, doesn't mean that's true for everyone.</span>
<span class="comment-copy">@JacobBudin The asker specifies 2.7 and 3.X. <code>protocol=2</code> produces <code>dmb.error: db type could not be determined</code> in 3.2.5, 3.3.4, and 3.4.1, when attempting to open a 2.7.6 shelved file.</span>
<span class="comment-copy">Has nothing to do with the <code>pickle</code> protocol. I've edited my answer...</span>
