<div class="post-text" itemprop="text">
<p>I'm writing a TestCase in Python using <a href="https://docs.python.org/3/library/unittest.html" rel="noreferrer">unittest</a>, that looks something like this:</p>
<pre><code>class MyTestCase(unittest.TestCase):
  def setUp(self):
    # ... check if I'm online - might result in True or False
    self.isOnline = True

  @unittest.skipIf(not self.isOnline, "Not online")
  def test_xyz(self):
    # do a test that relies on being online
</code></pre>
<p>However, this doesn't seem to work, I assume because <code>@skipIf</code> cannot use <code>self</code> outside the body of the function declaration. I know I can check the value of <code>self.isOnline</code> inside the <code>test_xyz</code> function and use <code>skipTest</code> instead, but this is less elegant. Are there any other options?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could write your own decorator to which you pass the <em>name</em> of the flag:</p>
<pre><code>def skipIfTrue(flag):
    def deco(f):
        def wrapper(self, *args, **kwargs):
            if getattr(self, flag):
                self.skipTest()
            else:
                f(self, *args, **kwargs)
        return wrapper
    return deco
</code></pre>
<p>Then in your class you would define the test method like this:</p>
<pre><code>@skipIfTrue('isOnline')
def test_thing(self):
    print("A test")
</code></pre>
<p>Whether this is better than just checking in the method depends on the situation.  If you are doing this with many methods, it could be better than writing the check in every one.  On the other hand, if you're doing that, you might want to group them together and do one check to skip the entire suite.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you can move the <code>isOnline</code> test outside of your <code>setUp</code> method, then that's a solution:</p>
<pre><code>IS_ONLINE = i_am_online()

class MyTestCase(unittest.TestCase):
  @unittest.skipUnless(IS_ONLINE, "Not online")
  def test_xyz(self):
    # do a test that relies on being online
</code></pre>
<p>Another (more elegant option) would then be:</p>
<pre><code>import unittest

def skipWhenOffline():
    if not i_am_online():
         return unittest.skip("Not online")
    return unittest._id

class MyTestCase(unittest.TestCase):
  @unittest.skipWhenOffline()
  def test_xyz(self):
    # do a test that relies on being online
</code></pre>
<p>However if this isn't possible for you, then there isn't a more elegant solution than to somehow use <code>skipTest()</code>. </p>
<p><code>skipIf</code> and <code>skipUnless</code> are evaluated at class declaration time (they set a <code>__unittest_skip__</code> attribute on your method to indicate it shouldn't run, which is later looked at prior to running the test). Your <code>setUp</code> method just hasn't run yet at that point.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would add to the answer by <a href="https://stackoverflow.com/users/1427416/brenbarn">BrenBarn</a> that if you're using <code>nosetests</code> that you'll need to decorate the <code>wrapper</code> function with <code>@wraps</code>. Without this, the test function would technically be <code>wrapper</code> and this would not be invoked by <code>nosetests</code>, as by default test methods need to start with <code>test_</code>.</p>
<pre><code>from unittest2.compatibility import wraps

def skipIfTrue(flag):
    def deco(f):
        @wraps(f)
        def wrapper(self, *args, **kwargs):
            if getattr(self, flag):
                self.skipTest()
            else:
                f(self, *args, **kwargs)
        return wrapper
    return deco
</code></pre>
</div>
<span class="comment-copy">Using <code>skipTest</code> inside isn't <i>that</i> bad.</span>
<span class="comment-copy">Thanks. I think this is slightly more elegant than the other solution here, so marking this accepted. Both are good though.</span>
<span class="comment-copy">That's great, thanks!</span>
<span class="comment-copy">Thanks, good suggestion!</span>
