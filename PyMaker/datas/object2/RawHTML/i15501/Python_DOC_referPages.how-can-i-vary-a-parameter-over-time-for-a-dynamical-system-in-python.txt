<div class="post-text" itemprop="text">
<p>I'm trying to have a parameter that changes based on the current time in terms of the model.</p>
<p>I set up a function:</p>
<pre><code>def func(state,t):
  x = state[0]
  y = state[1]
  z = state[2]

  Iapp = 0.7

  xd = ... + Iapp
  yd = ...
  zd = ...
</code></pre>
<p>I want to have Iapp vary over time. Namely, I need it to be -0.7 from time 50 to time 500.</p>
<p>My current efforts that have produced literally no change in my plots:</p>
<pre><code>for t in range(50,500):
    Iapp = -0.7
else: 
    Iapp = 0.7
</code></pre>
<p>Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code will set <code>Iapp</code> to <code>-0.7</code> 450 times, then set it to <code>0.7</code>. This is why you don't see any change. What you need is an <a href="https://docs.python.org/2/tutorial/controlflow.html#if-statements" rel="nofollow">if statement</a>:</p>
<pre><code>if 50 &lt;= t &lt;= 500:
    Iapp = -0.7
else:
    Iapp = 0.7
</code></pre>
<p>Or, if you want a one-liner:</p>
<pre><code>Iapp = -0.7 if 50 &lt;= t &lt;= 500 else 0.7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another approach is to define the time varying parameter outside the ODE. This allows you to change the parameters without modifying the ODE function. One way to do this is to pass the forcing parameter as an array the same length as the time array. Assuming t0=0, Change your call to:</p>
<pre><code>import numpy as np

def func(state, t, Iapp_all, sampling_rate):
    Iapp = Iapp_all[np.floor(t * sampling_rate)]
    ...
</code></pre>
<p>Example usage with scipy's <code>odeint</code>.</p>
<pre><code>from scipy.integrate import odeint

y0 = [0, 0]
sampling_rate = 1.
t = np.arange(500) / sampling_rate
Iapp_all = -.7 * np.ones_like(t)
Iapp_all[:51] = .7
y = odeint(func, y0, t, args=(Iapp_all, sampling_rate))
</code></pre>
</div>
<span class="comment-copy">Thanks so much! I didn't understand the difference between <code>for</code> and <code>if</code> in Python, but I do now.</span>
<span class="comment-copy">@RobbieCapps If that's the case, you should probably <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">work through the tutorial</a>. This stuff is essential not only to Python, but most programming languages. A solid understanding of the fundamentals will help you greatly later.</span>
<span class="comment-copy">Again, I sincerely appreciate the help. I've looked around, and although I now understand <i>what</i> the <code>if</code> and <code>for</code> statements do, I'm still not sure <i>why</i>, or better yet <i>how</i>. If I understand correctly, <code>for</code> doesn't look at the range of values for t but simply changes the value of t the number of times that I have placed in the range. Whereas <code>if</code> actually checks individual values of t. Is this because <code>if</code> somehow <i>checks</i> each value, as in it iterates through each index, kind of like enumerate?</span>
<span class="comment-copy">Interesting. I'll try this one after I've completed this project.</span>
