<div class="post-text" itemprop="text">
<p>I am writing a script that checks the octal permissions of files and folders in Linux. I am struggling with this line of code:</p>
<pre><code>stat -c %a check
</code></pre>
<p>Check is raw input from the user, for example <code>/home</code>. When I run the script in terminal I get the following error message when the line above is executed:</p>
<pre><code>file "check.py", line 17
stat -c %a check
               ^
SyntaxError: invalid syntax
</code></pre>
<p>I also tried putting check in brackets and I then got:</p>
<pre><code>Traceback (most recent call last):
  File "check.py", line 34, in &lt;module&gt;
main()
  File "check.py", line 31, in main
    folderexists(check)
  File "check.py", line 17, in folderexists
    stat -c %a (check)
NameError: global name 'c' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That line should be executed in the terminal, not in a Python script.  It contains invalid Python syntax.</p>
<p>If you want to issue a system command from Python, you can use <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow"><code>os.system</code></a>:</p>
<pre><code>import os
os.system('stat -c %a check')
</code></pre>
<p>If you need to add values into the command string, use <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow"><code>str.format</code></a>:</p>
<pre><code>import os
os.system('stat -c {} check'.format(value))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has its own calls to check stats</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; check=raw_input("what you want? ")
what you want? setup.py
&gt;&gt;&gt; os.stat(check)
posix.stat_result(st_mode=33204, st_ino=447354005, st_dev=35L, st_nlink=1, st_uid=1000, st_gid=1000, st_s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Rather than using os.system, I would propose that OP use subprocess.</p>
<pre><code>import subprocess
result = subprocess.check_output(["stat", "-c", "%a", your_string])
</code></pre>
<p>Where <code>your_string</code> is the variable holding the name of file you are interested in.</p>
</div>
<span class="comment-copy">This would work if check was a file or a folder but it is actually a variable with a string stored in it such as /home/dsme/public_html.      stat: cannot stat ‘check’: No such file or directory</span>
<span class="comment-copy">@dsme If <code>check</code> is a variable, you do the same thing iCodez does with <code>value</code>. Look up <a href="https://docs.python.org/2/library/string.html#format-examples" rel="nofollow noreferrer">string formatting</a>.</span>
<span class="comment-copy">If <code>check</code> is a Python string, then you can just insert it into the command string as I showed you:  <code>os.system('stat -c %a {}'.format(check))</code>.  If you mean <code>check</code> is a Bash string, then you will need to send it to the Python script as a command-line argument.  Then, you can access it in Python via <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>sys.argv</code></a>.</span>
<span class="comment-copy">Sorry, I hadn't refreshed the page to see the formatting part. The formatting works and outputs the octal values of a folder. Thanks very much for your help.</span>
<span class="comment-copy">Some links to documentation: <a href="https://docs.python.org/2/library/os.html#os.stat" rel="nofollow noreferrer"><code>os.stat</code></a>, <a href="https://docs.python.org/2/library/stat.html" rel="nofollow noreferrer"><code>stat</code> module</a>, a helper for making use of the results from <code>os.stat</code></span>
<span class="comment-copy">@jpmc26 - thanks for the links.</span>
