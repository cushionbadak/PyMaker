<div class="post-text" itemprop="text">
<p>I have written some unit tests using <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">unittest</a> in Python. However, they do not simply test objects in the conventional way - rather, they invoke another Python script by calling it using <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow noreferrer">Popen</a>. This is by design - it's a command line utility, so I want to test it as a user would, which includes things such as command-line options, etc.). To be clear, both the unit tests and the script to be tested are written in Python (v3 to be precise).</p>
<p>The script I am testing makes heavy use of <a href="https://docs.python.org/3.4/library/datetime.html#datetime.datetime.now" rel="nofollow noreferrer">datetime.now()</a>, and ideally I would like to mock that value somehow so that I can keep it constant. All the examples I've seen of doing this, though (e.g. <a href="https://stackoverflow.com/a/5437199/27641">this one</a> using mock) assume some form of white-box testing.</p>
<p>Is there a way for me to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Nothing prevents you from testing your CLI without using <code>Popen</code>. You just need to architect your code to make it possible:</p>
<p>Instead of having this:</p>
<pre><code>if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    # ... Add args
    ns = parser.parse_args()
</code></pre>
<p>Do this:</p>
<pre><code>import argparse

def main(argv):
    parser = argparse.ArgumentParser()
    # ... Add args
    parser.parse_args(argv[1:])  # This is the default for argparse
    ns = parser.parse_args()

if __name__ == "__main__":
    import sys
    main(sys.argv)
</code></pre>
<p>Then, you can test the <code>main</code> function in isolation (just call <code>main([...])</code> with a set of args you specify). Note that this should also work (with some adaptation) for other CLI frameworks.</p>
<hr/>
<p>Also, note that if you're indeed using <code>argparse</code>, you'll need to patch <code>ArgumentParser()</code> so that it doesn't call <code>sys.exit</code> when parsing fails. </p>
<p>An easy way to do is to declare a <code>ParsingError</code> exception, and patch <code>ArgumentParser.error(self, message)</code> with:</p>
<pre><code>def error(self, message):
    raise ParsingError(message) 
</code></pre>
<p>You can then use <code>assertRaises</code> in your tests.</p>
</div>
<span class="comment-copy">Note that this isn't hypothetical at all, and that you can see it in action in this project: <a href="https://github.com/Scalr/installer-ng/tree/master/wrapper/scalr-manage/scalr_manage" rel="nofollow noreferrer">github.com/Scalr/installer-ng/tree/master/wrapper/scalr-manage/…</a> — disclaimer: I wrote that code.</span>
<span class="comment-copy">That's a neat idea, I hadn't thought of that. It's a little more complex than that, since my script also does other stuff such as fiddle with sys.excepthook, which might affect the unittest script. But this gives me a good place to start. Thanks for the idea.</span>
<span class="comment-copy">@AndrewFerrier You might be able to wrap <code>main(sys.argv)</code> in an <code>except</code> catch all and not have to fiddle with the excepthook (though this means you won't cover this in test). Also exemplified here ;) <a href="https://github.com/Scalr/installer-ng/blob/master/wrapper/scalr-manage/scalr_manage/cli.py#L98-L102" rel="nofollow noreferrer">github.com/Scalr/installer-ng/blob/master/wrapper/scalr-manage/…</a></span>
