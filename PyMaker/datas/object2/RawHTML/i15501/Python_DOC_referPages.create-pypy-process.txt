<div class="post-text" itemprop="text">
<p>I would like to create a process which runs PyPy. I tried the following and it works:</p>
<pre><code>import os
os.chdir('&lt;path-to-pypy-download&gt;/bin/')
os.execl('pypy', 'pypy', '-c', 'print "Hi!"')
</code></pre>
<p>However, when I remove the <code>chdir</code> as:</p>
<pre><code>import os
os.execl('&lt;path-to-pypy-download&gt;/bin/pypy', 'pypy', '-c', 'print "Hi!"')
</code></pre>
<p>I get:</p>
<pre><code>debug: WARNING: Library path not found, using compiled-in sys.path.
debug: WARNING: 'sys.prefix' will not be set.
debug: WARNING: Make sure the pypy binary is kept inside its tree of files.
debug: WARNING: It is ok to create a symlink to it from somewhere else.
debug: OperationError:
debug:  operror-type: ImportError
debug:  operror-value: No module named os
</code></pre>
<p>Please, does anyone know how to spawn a PyPy process without changing the working directory?</p>
</div>
<div class="post-text" itemprop="text">
<p>This may not be correct (in which case I'll delete it), but I'm pretty sure that all you need to do is:</p>
<pre><code>os.execl('&lt;path-to-pypy-download&gt;/bin/pypy', 
         '&lt;path-to-pypy-download&gt;/bin/pypy', '-c', 'print "Hi!"')
</code></pre>
<p>In other words, pass the full path for <a href="https://docs.python.org/3/library/os.html#os.execl" rel="nofollow"><code>arg0</code> as well as <code>path</code></a>.</p>
<p>Why? Well, when PyPy starts up, it's got to be using (the RPython/compiled-to-C equivalent of) <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow"><code>sys.argv[0]</code></a> to find the path to a custom stdlib. What else could it use? Which is of course just copied from the <code>char *argv[]</code> argument passed to the interpreter's <code>main</code> function. When you let the OS launch a program for you, it will put the full path in there. But when you explicitly set it with <code>execl</code>, it will just copy whatever you gave it.</p>
<p>It's actually a <em>bit</em> more complicated than this—it does a <code>readlink</code> (to allow symlinks) and an <code>abspath</code> (to allow itself to be run by relative path—as in your first example). But the basic idea is the same.</p>
<p>As a side note, you might want to consider using a fully-installed PyPy instead of a run-out-of-build-tree PyPy, in which case its <code>sys.prefix</code> will be set up properly so it won't need this.</p>
</div>
<span class="comment-copy">Have you tried passing the full path for <code>arg0</code> as well as for <code>path</code>? Because presumably it's using (the RPython/compile-to-C equivalent of) <code>sys.argv[0]</code> to find its library path.</span>
