<div class="post-text" itemprop="text">
<pre><code>from random import randint
</code></pre>
<p>This is the code I've used to import the Random module. When I run the code, it instead imports a file of mine for testing code called <strong>random.py</strong>.
This was leading to all sorts of errors, so I 'permanently' deleted it in the Recycle Bin and all it's shortcuts I could find.Yet it still is there somewhere and it causes errors.My entire program depends on</p>
<pre><code>x = randint(1, 100)
if x % 2 == 0:
    b = 'c'
</code></pre>
<p>The game I'm making depends in randint to randomly create ships and submarines.
I am running Windows 7.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Python creates a <em>bytecode cache</em> for each python module you import; for Python 2 the same name as the original file with the extension <code>.pyc</code> is used. It is that file that is imported when you import <code>random</code>, even if the source <code>.py</code> file was deleted.</p>
<p>Use:</p>
<pre><code>import random
print(random.__file__)
</code></pre>
<p>to  locate the stale <code>random.pyc</code> bytecode file and delete it.</p>
<p>In Python 3 these files are normally stored in a subdirectory called <code>__pycache__</code> but these are ignored if there is no corresponding <code>.py</code> source file. People that want to distribute just the bytecode files (to obfuscate their code in commercial software distributions, for eample) they'll have to use the <a href="https://docs.python.org/3/library/compileall.html#cmdoption-compileall-b" rel="nofollow"><code>compilall</code> script with the <code>-b</code> switch</a>, something you almost certainly did not do.</p>
</div>
<div class="post-text" itemprop="text">
<p>There will also be a <code>random.pyc</code> file, either in the same folder (for Python 2.x) or a subdirectory called <code>__pycache__</code> (for 3.x).</p>
</div>
<span class="comment-copy">Files in <code>__pycache__</code> are ignored if there is no corresponding <code>.py</code> file.</span>
<span class="comment-copy">See <a href="https://www.python.org/dev/peps/pep-3147/" rel="nofollow noreferrer">PEP 3147</a>: <i>If the py source file is missing, the pyc file inside __pycache__ will be ignored. This eliminates the problem of accidental stale pyc file imports.</i></span>
<span class="comment-copy">Huh. They improved matters even more than I thought :)</span>
