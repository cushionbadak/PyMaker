<div class="post-text" itemprop="text">
<p>I would like to do something like as follows:</p>
<pre><code>h=@ , e=( , l=&amp; , o=!
</code></pre>
<p>So, in the above example, when you type <code>hello</code>, it gives back <code>@(&amp;&amp;!</code>, and vise versa.</p>
<p>(I would perfer it in Python, but it doesn't have to be.)</p>
<p>I would like to make a small utility of this sort. Can anyone help? Thanks!</p>
<p><strong>EDIT:</strong> "Basically I would like to be able to assign some letters a unique character. Then, when you run the utility, it asks for your input. Then you type what you want in any order. Using the example above: "hello"="@(&amp;&amp;!" , "elloh"="(&amp;&amp;!@" , "looleh"="&amp;!!&amp;(@" and so forth."</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>In Python2</strong>, you could use <a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="nofollow noreferrer">str.translate</a>:</p>
<pre><code>import string
table = string.maketrans(
    'helo',
    '@(&amp;!',)

In [17]: 'hello'.translate(table)
Out[17]: '@(&amp;&amp;!'

In [18]: 'looleh'.translate(table)
Out[18]: '&amp;!!&amp;(@'
</code></pre>
<p>Or, you could use <code>unicode.translate</code>:</p>
<pre><code>In [19]: table = {ord(k):v for k, v in zip(u'helo', u'@(&amp;!')}

In [20]: u'hello'.translate(table)
Out[20]: u'@(&amp;&amp;!'
</code></pre>
<p>Lutz Horn's answer shows how you could build a single table which can perform both the forward and backward translation.</p>
<hr/>
<p><strong>In Python3</strong>, <code>string.maketrans</code> <a href="https://docs.python.org/3/whatsnew/3.1.html" rel="nofollow noreferrer">has been replaced</a> by <code>bytes.maketrans</code>:</p>
<pre><code>&gt;&gt;&gt; table = bytes.maketrans(b'helo', b'@(&amp;!')
&gt;&gt;&gt; b'hello'.translate(table)
b'@(&amp;&amp;!'

&gt;&gt;&gt; 'hello'.translate({ord(k):v for k, v in zip('helo', '@(&amp;!')})
'@(&amp;&amp;!'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the existing small utility <a href="http://linux.die.net/man/1/tr" rel="nofollow"><code>tr</code></a>.</p>
<p>In the following example, every uneaven line (1, 3, 5, 7) is input, every even line (2, 4, 6, 8) is output.</p>
<pre><code>$ tr 'helo@(&amp;!' '@(&amp;!helo'
hello
@(&amp;&amp;!
@(&amp;&amp;!
hello
stackoverflow
stack!v(rf&amp;!w
stack!v(rf&amp;!w
stackoverflow
</code></pre>
</div>
<span class="comment-copy">Do you want to use this inside a Python program or as a seaparate tool?</span>
<span class="comment-copy">If you are referring to "h=@ , e=( , l=&amp; , o=!" that was just an example. Basically I would like to be able to assign some letters a unique character. Then, when you run the utility, it asks for your input. Then you type what you want in any order. Using the example above: "hello"="@(&amp;&amp;!" , "elloh"="(&amp;&amp;!@" , "looleh"="&amp;!!&amp;(@" and so forth. Sorry if I didn't explain it well before. Thanks for your reply!</span>
<span class="comment-copy">maketrans is removed from python 3x</span>
<span class="comment-copy">Where is the 'and vise versa' part?</span>
<span class="comment-copy">@LutzHorn: Perhaps the reverse translation has been left as an exercise for the OP...</span>
<span class="comment-copy">I think I didn't explain that well before. I have revised the original post. Also, I have plugged in the code to python and I get various errors, different for each.</span>
<span class="comment-copy">@PM 2Ring: Let's just get the first part working before I get another worksheet.</span>
<span class="comment-copy">I replied to your comment above and revised the original post. I think it will better explain things.</span>
