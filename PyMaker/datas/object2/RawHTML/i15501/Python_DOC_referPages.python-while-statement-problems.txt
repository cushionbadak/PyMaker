<div class="post-text" itemprop="text">
<p>It's well known that comparing floats for equality is a little fiddly due to rounding and precision issues.</p>
<p>For example:
<a href="https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/" rel="noreferrer">https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/</a></p>
<p>What is the recommended way to deal with this in Python?</p>
<p>Surely there is a standard library function for this somewhere?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.5 adds the <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-485-a-function-for-testing-approximate-equality" rel="noreferrer"><code>math.isclose</code> and <code>cmath.isclose</code> functions</a> as described in <a href="http://www.python.org/dev/peps/pep-0485" rel="noreferrer">PEP 485</a>.</p>
<p>If you're using an earlier version of Python, the equivalent function is given in the <a href="https://www.python.org/dev/peps/pep-0485/#proposed-implementation" rel="noreferrer">documentation</a>.</p>
<pre><code>def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):
    return abs(a-b) &lt;= max(rel_tol * max(abs(a), abs(b)), abs_tol)
</code></pre>
<p><code>rel_tol</code> is a relative tolerance, it is multiplied by the greater of the magnitudes of the two arguments; as the values get larger, so does the allowed difference between them while still considering them equal.</p>
<p><code>abs_tol</code> is an absolute tolerance that is applied as-is in all cases. If the difference is less than either of those tolerances, the values are considered equal.</p>
</div>
<div class="post-text" itemprop="text">
<p>Is something as simple as the following not good enough?</p>
<pre><code>return abs(f1 - f2) &lt;= allowed_error
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would agree that Gareth's answer is probably most appropriate as a lightweight function/solution.</p>
<p>But I thought it would be helpful to note that if you are using NumPy or are considering it, there is a packaged function for this.</p>
<pre><code>numpy.isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)
</code></pre>
<p>A little disclaimer though: installing NumPy can be a non-trivial experience depending on your platform.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use Python's <a href="http://docs.python.org/library/decimal.html" rel="noreferrer"><code>decimal</code></a> module, which provides the <code>Decimal</code> class.</p>
<p>From the comments:</p>
<blockquote>
<p>It is worth noting that if you're
  doing math-heavy work and you don't
  absolutely need the precision from
  decimal, this can really bog things
  down. Floats are way, way faster to
  deal with, but imprecise. Decimals are
  extremely precise but slow.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I'm not aware of anything in the Python standard library (or elsewhere) that implements Dawson's <code>AlmostEqual2sComplement</code> function. If that's the sort of behaviour you want, you'll have to implement it yourself. (In which case, rather than using Dawson's clever bitwise hacks you'd probably do better to use more conventional tests of the form <code>if abs(a-b) &lt;= eps1*(abs(a)+abs(b)) + eps2</code> or similar. To get Dawson-like behaviour you might say something like <code>if abs(a-b) &lt;= eps*max(EPS,abs(a),abs(b))</code> for some small fixed <code>EPS</code>; this isn't exactly the same as Dawson, but it's similar in spirit.</p>
</div>
<div class="post-text" itemprop="text">
<p>The common wisdom that floating-point numbers cannot be compared for equality is inaccurate. Floating-point numbers are no different from integers: If you evaluate "a == b", you will get true if they are identical numbers and false otherwise (with the understanding that two NaNs are of course not identical numbers).</p>
<p>The actual problem is this: If I have done some calculations and am not sure the two numbers I have to compare are exactly correct, then what? This problem is the same for floating-point as it is for integers. If you evaluate the integer expression "7/3*3", it will not compare equal to "7*3/3".</p>
<p>So suppose we asked "How do I compare integers for equality?" in such a situation. There is no single answer; what you should do depends on the specific situation, notably what sort of errors you have and what you want to achieve.</p>
<p>Here are some possible choices.</p>
<p>If you want to get a "true" result if the mathematically exact numbers would be equal, then you might try to use the properties of the calculations you perform to prove that you get the same errors in the two numbers. If that is feasible, and you compare two numbers that result from expressions that would give equal numbers if computed exactly, then you will get "true" from the comparison. Another approach is that you might analyze the properties of the calculations and prove that the error never exceeds a certain amount, perhaps an absolute amount or an amount relative to one of the inputs or one of the outputs. In that case, you can ask whether the two calculated numbers differ by at most that amount, and return "true" if they are within the interval. If you cannot prove an error bound, you might guess and hope for the best. One way of guessing is to evaluate many random samples and see what sort of distribution you get in the results.</p>
<p>Of course, since we only set the requirement that you get "true" if the mathematically exact results are equal, we left open the possibility that you get "true" even if they are unequal. (In fact, we can satisfy the requirement by always returning "true". This makes the calculation simple but is generally undesirable, so I will discuss improving the situation below.)</p>
<p>If you want to get a "false" result if the mathematically exact numbers would be unequal, you need to prove that your evaluation of the numbers yields different numbers if the mathematically exact numbers would be unequal. This may be impossible for practical purposes in many common situations. So let us consider an alternative.</p>
<p>A useful requirement might be that we get a "false" result if the mathematically exact numbers differ by more than a certain amount. For example, perhaps we are going to calculate where a ball thrown in a computer game traveled, and we want to know whether it struck a bat. In this case, we certainly want to get "true" if the ball strikes the bat, and we want to get "false" if the ball is far from the bat, and we can accept an incorrect "true" answer if the ball in a mathematically exact simulation missed the bat but is within a millimeter of hitting the bat. In that case, we need to prove (or guess/estimate) that our calculation of the ball's position and the bat's position have a combined error of at most one millimeter (for all positions of interest). This would allow us to always return "false" if the ball and bat are more than a millimeter apart, to return "true" if they touch, and to return "true" if they are close enough to be acceptable.</p>
<p>So, how you decide what to return when comparing floating-point numbers depends very much on your specific situation.</p>
<p>As to how you go about proving error bounds for calculations, that can be a complicated subject. Any floating-point implementation using the IEEE 754 standard in round-to-nearest mode returns the floating-point number nearest to the exact result for any basic operation (notably multiplication, division, addition, subtraction, square root). (In case of tie, round so the low bit is even.) (Be particularly careful about square root and division; your language implementation might use methods that do not conform to IEEE 754 for those.) Because of this requirement, we know the error in a single result is at most 1/2 of the value of the least significant bit. (If it were more, the rounding would have gone to a different number that is within 1/2 the value.)</p>
<p>Going on from there gets substantially more complicated; the next step is performing an operation where one of the inputs already has some error. For simple expressions, these errors can be followed through the calculations to reach a bound on the final error. In practice, this is only done in a few situations, such as working on a high-quality mathematics library. And, of course, you need precise control over exactly which operations are performed. High-level languages often give the compiler a lot of slack, so you might not know in which order operations are performed.</p>
<p>There is much more that could be (and is) written about this topic, but I have to stop there. In summary, the answer is: There is no library routine for this comparison because there is no single solution that fits most needs that is worth putting into a library routine. (If comparing with a relative or absolute error interval suffices for you, you can do it simply without a library routine.)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to use it in testing/TDD context, I'd say this is a standard way:</p>
<pre><code>from nose.tools import assert_almost_equals

assert_almost_equals(x, y, places=7) #default is 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/math.html#math.isclose" rel="nofollow">math.isclose()</a> has been <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-485-a-function-for-testing-approximate-equality" rel="nofollow">added</a> to Python 3.5 for that (<a href="https://hg.python.org/cpython/file/tip/Modules/mathmodule.c#l1993" rel="nofollow">source code</a>). Here is a port of it to Python 2. It's difference from one-liner of Mark Ransom is that it can handle "inf" and "-inf" properly.</p>
<pre><code>def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):
    '''
    Python 2 implementation of Python 3.5 math.isclose()
    https://hg.python.org/cpython/file/tip/Modules/mathmodule.c#l1993
    '''
    # sanity check on the inputs
    if rel_tol &lt; 0 or abs_tol &lt; 0:
        raise ValueError("tolerances must be non-negative")

    # short circuit exact equality -- needed to catch two infinities of
    # the same sign. And perhaps speeds things up a bit sometimes.
    if a == b:
        return True

    # This catches the case of two infinities of opposite sign, or
    # one infinity and one finite number. Two infinities of opposite
    # sign would otherwise have an infinite relative tolerance.
    # Two infinities of the same sign are caught by the equality check
    # above.
    if math.isinf(a) or math.isinf(b):
        return False

    # now do the regular computation
    # this is essentially the "weak" test from the Boost library
    diff = math.fabs(b - a)
    result = (((diff &lt;= math.fabs(rel_tol * b)) or
               (diff &lt;= math.fabs(rel_tol * a))) or
              (diff &lt;= abs_tol))
    return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found the following comparison helpful:</p>
<pre><code>str(f1) == str(f2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For some of the cases where you can affect the source number representation, you can represent them as fractions instead of floats, using integer numerator and denominator. That way you can have exact comparisons.</p>
<p>See <a href="https://docs.python.org/2/library/fractions.html" rel="nofollow">Fraction</a> from fractions module for details.</p>
</div>
<div class="post-text" itemprop="text">
<p>I liked @Sesquipedal 's suggestion but with modification (a special use case when both values are 0 returns False).  In my case I was on Python 2.7 and just used a simple function:</p>
<pre><code>if f1 ==0 and f2 == 0:
    return True
else:
    return abs(f1-f2) &lt; tol*max(abs(f1),abs(f2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Useful for the case where you want to make sure 2 numbers are the same 'up to precision', no need to specify the tolerance:</p>
<ul>
<li><p>Find minimum precision of the 2 numbers</p></li>
<li><p>Round both of them to minimum precision and compare</p></li>
</ul>
<pre><code>def isclose(a,b):                                       
    astr=str(a)                                         
    aprec=len(astr.split('.')[1]) if '.' in astr else 0 
    bstr=str(b)                                         
    bprec=len(bstr.split('.')[1]) if '.' in bstr else 0 
    prec=min(aprec,bprec)                                      
    return round(a,prec)==round(b,prec)                               
</code></pre>
<p>As written, only works for numbers without the 'e' in their string representation ( meaning 0.9999999999995e-4 &lt; number &lt;= 0.9999999999995e11 )</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; isclose(10.0,10.049)
True
&gt;&gt;&gt; isclose(10.0,10.05)
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This maybe is a bit ugly hack, but it works pretty good when you don't need more than the default float precision (about 11 decimals). Works well on python 2.7.</p>
<p>The <strong><em>round_to</em></strong> function uses the <a href="https://docs.python.org/2/library/string.html#format-string-syntax" rel="nofollow noreferrer">format method</a> from the built-in str class to round up the float to a string that represents the float with the number of decimals needed, and then applies the <a href="https://docs.python.org/2/library/functions.html?highlight=eval#eval" rel="nofollow noreferrer">eval</a> built-in function to the rounded float string to get back to the float numeric type.</p>
<p>The <strong><em>is_close</em></strong> function just applies a simple conditional to the rounded up float.</p>
<pre><code>def round_to(float_num, decimal_precision):
    return eval("'{:." + str(int(decimal_precision)) + "f}'.format(" + str(float_num) + ")")

def is_close(float_a, float_b, decimal_precision):
    if round_to(float_a, decimal_precision) == round_to(float_b, decimal_precision):
        return True
    return False

a = 10.0 / 3
# Result: 3.3333333333333335
b = 10.0001 / 3
# Result: 3.3333666666666666

print is_close(a, b, decimal_precision=4)
# Result: False

print is_close(a, b, decimal_precision=3)
# Result: True
</code></pre>
</div>
<span class="comment-copy">@tolomea: Since it depends on your application and your data and your problem domain -- and it's only one line of code -- why would there be a "standard library function"?</span>
<span class="comment-copy">@S.Lott: <code>all</code>, <code>any</code>, <code>max</code>, <code>min</code> are each basically one-liners, and they aren't just provided in a library, they're builtin functions. So the BDFL's reasons aren't that. The one line of code that most people write is pretty unsophisticated and often doesn't work, which is a strong reason to provide something better. Of course any module providing other strategies would have to also provide caveats describing when they're appropriate, and more importantly when they aren't. Numeric analysis is hard, it's no great disgrace that language designers usually don't attempt tools to help with it.</span>
<span class="comment-copy">@Steve Jessop.  Those collection-oriented functions don't have the application, data and problem domain dependencies that float-point does.  So the "one-liner" clearly isn't as important as the real reasons.  Numeric analysis is hard, and can't be a first-class part of a general-purpose language library.</span>
<span class="comment-copy">@S.Lott: I'd probably agree if the standard Python distribution didn't come with <i>multiple</i> modules for XML interfaces. Clearly the fact that different applications need to do something differently is no bar at all to putting modules in the base set to do it one way or another. Certainly there are tricks for comparing floats that get re-used a lot, the most basic being a specified number of ulps. So I only partially agree - the problem is that numeric analysis is hard. Python <i>could</i> in principle provide tools to make it somewhat easier, some of the time. I guess nobody has volunteered.</span>
<span class="comment-copy">Also, "it boils down to one hard-to-design line of code" - if it's still a one-liner once you're doing it properly, I think your monitor is wider than mine ;-). Anyway, I think the whole area is quite specialized, in the sense that <i>most</i> programmers (including me) very rarely use it. Combined with being hard, it's not going to hit the top of the "most wanted" list for core libraries in most languages.</span>
<span class="comment-copy">note when <code>a</code> or <code>b</code> is a <code>numpy</code> <code>array</code>, <a href="http://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.isclose.html" rel="nofollow noreferrer"><code>numpy.isclose</code></a> works.</span>
<span class="comment-copy">@marsh <code>rel_tol</code> is a <i>relative tolerance</i>, it is multiplied by the greater of the magnitudes of the two arguments; as the values get larger, so does the allowed difference between them while still considering them equal. <code>abs_tol</code> is an <i>absolute tolerance</i> that is applied as-is in all cases. If the difference is less than either of those tolerances, the values are considered equal.</span>
<span class="comment-copy">Not to diminish the value of this answer (I think it's a good one), it's worth noting that the documentation also says: "Modulo error checking, etc, the function will return the result of..."  In other words, the <code>isclose</code> function (above) is not a <i>complete</i> implementation.</span>
<span class="comment-copy">Apologies for reviving an old thread, but it seemed worth pointing out that <code>isclose</code> always adheres to the <i>less</i> conservative criterion. I only mention it because that behavior is counterintuitive to me. Were I to specify two criteria, I would always expect the smaller tolerance to supercede the greater.</span>
<span class="comment-copy">@MackieMesser you're entitled to your opinion of course, but this behavior made perfect sense to me. By your definition nothing could ever be "close to" zero, because a relative tolerance multiplied by zero is always zero.</span>
<span class="comment-copy">As the link I provided points out, subtracting only works if you know the approximate magnitude of the numbers in advance.</span>
<span class="comment-copy">@tolomea: That's exactly why there's no standard library function for this.  It's always dependent on the actual problem at hand.</span>
<span class="comment-copy">@S.Lott there not being a perfect solution for all circumstances is not a good reason to not provide a reasonable solution for most circumstances. Without such a solution the end users are left to use whatever crap they dream up by themselves, like abs(f1 - f2) &lt; allowed_error, which fails miserably when the magnitudes of f1 and f2 are not know in advance.</span>
<span class="comment-copy">@tolomea: please don't call answers here "crap." It is offensive and solves nothing. Present your argument and move on.</span>
<span class="comment-copy">In my experience, the best method for comparing floats is: <code>abs(f1-f2) &lt; tol*max(abs(f1),abs(f2))</code>.  This sort of relative tolerance is the only meaningful way to compare floats in general, as they are usually affected by roundoff error in the small decimal places.</span>
<span class="comment-copy">numpy.allclose (...) will do the trick, nicely.</span>
<span class="comment-copy">"Installing numpy can be a non-trivial experience depending on your platform."...um What? Which platforms is it "non-trivial" to install numpy? What exactly made it non-trivial?</span>
<span class="comment-copy">@John: hard to get a 64-bit binary for Windows. Hard to get numpy via <code>pip</code> on Windows.</span>
<span class="comment-copy">@Ternak: I do, but some of my students use Windows, so I have to deal with this stuff.</span>
<span class="comment-copy">@BenBolker If you have to install open data science platform powered by Python, the best way is Anaconda <a href="https://www.continuum.io/downloads" rel="nofollow noreferrer">continuum.io/downloads</a> (pandas, numpy and more out of the box)</span>
<span class="comment-copy">I don't quite follow what you are doing here, but it is interesting. What is the difference between eps, eps1, eps2 and EPS?</span>
<span class="comment-copy"><code>eps1</code> and <code>eps2</code> define a relative and an absolute tolerance: you're prepared to allow <code>a</code> and <code>b</code> to differ by about <code>eps1</code> times how big they are plus <code>eps2</code>. <code>eps</code> is a single tolerance; you're prepared to allow <code>a</code> and <code>b</code> to differ by about <code>eps</code> times how big they are, with the proviso that anything of size <code>EPS</code> or smaller is assumed to be of size <code>EPS</code>. If you take <code>EPS</code> to be the smallest non-denormal value of your floating-point type, this is very similar to Dawson's comparator (except for a factor of 2^#bits because Dawson measures tolerance in ulps).</span>
<span class="comment-copy">Incidentally, I agree with S. Lott that the Right Thing is always going to depend on your actual application, which is why there isn't a single standard library function for all your floating-point comparison needs.</span>
<span class="comment-copy">@gareth-mccaughan How does one determine the "smallest non-denormal value of your floating-point type" for python?</span>
<span class="comment-copy">This page <a href="http://docs.python.org/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/tutorial/floatingpoint.html</a> says almost all python implementations use IEEE-754 double precision floats and this page <a href="http://en.wikipedia.org/wiki/IEEE_754-1985" rel="nofollow noreferrer">en.wikipedia.org/wiki/IEEE_754-1985</a> says the normalized numbers closest to zero are ±2**−1022.</span>
<span class="comment-copy">From discussion above with Gareth McCaughan, correctly comparing with a relative error essentially amounts to "abs(a-b) &lt;= eps<i>max(2*</i>-1022,abs(a),abs(b))", that's not something I'd describe as simple and certainly not something I'd have worked out by myself. Also as Steve Jessop points out it is of similar complexity to max, min, any and all, which are all builtins. So providing a relative error comparison in the standard math module seems like a good idea.</span>
<span class="comment-copy">(7/3*3 == 7*3/3) evaluates True in python.</span>
<span class="comment-copy">@xApple: I just ran Python 2.7.2 on OS X 10.8.3 and entered <code>(7/3*3 == 7*3/3)</code>. It printed <code>False</code>.</span>
<span class="comment-copy">You probably forgot to type <code>from __future__ import division</code>. If you don't do that, there are no floating point numbers and the comparison is between two integers.</span>
<span class="comment-copy">This is an important discussion, but not incredibly helpful.</span>
<span class="comment-copy">it's interesting, but not very practical due to str(.1 + .2) == .3</span>
<span class="comment-copy">str(.1 + .2) == str(.3) returns True</span>
<span class="comment-copy">How is this any different from f1 == f2 -- if they're both close but still different due to precision, the string representations will also be unequal.</span>
<span class="comment-copy">.1 + .2 == .3 returns False while str(.1 + .2) == str(.3) returns True</span>
<span class="comment-copy">In Python 3.7.2, <code>str(.1 + .2) == str(.3)</code> returns False. The method described above works only for Python 2.</span>
