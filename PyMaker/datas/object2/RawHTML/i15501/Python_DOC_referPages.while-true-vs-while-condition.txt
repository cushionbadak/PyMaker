<div class="post-text" itemprop="text">
<p>I'm reading a book on Python3 (Introducing Python by Bill Lubanovic), and came across something I wasn't sure is a Python preference, or just a "simplification" due to being a book and trying to describe something else.</p>
<p>It's on how to write to a file using chunks instead of in one shot.</p>
<pre><code>poem = '''There was a young lady named Bright,
Whose speed was far faster than light;
She started one day
In a relative way,
And returned on the previous night.'''

fout = open('relativity', 'wt')
size = len(poem)
offset = 0
chunk = 100
while True:
    if offset &gt; size:
        break
    fout.write(poem[offset:offset+chunk])
    offset += chunk
fout.close()
</code></pre>
<p>I was about to ask why it has <code>while True</code> instead of <code>while (offset &gt; size)</code>, but decided to try it for myself, and saw that <code>while (offset &gt; size)</code> doesn't actually do anything in my Python console.</p>
<p>Is that just a bug in the console, or does Python really require you to move the condition inside the while loop like that? With all of the changes to make it as minimal as possible, this seems very verbose.</p>
<p>(I'm coming from a background in Java, C#, and JavaScript where the condition as the definition for the loop is standard.)</p>
<p><strong>EDIT</strong></p>
<p>Thanks to xnx's comment, I realized that I had my logic incorrect in what I would have the condition be.</p>
<p>This brings me back to a clearer question that I originally wanted to focus on:</p>
<p>Does Python prefer to do <code>while True</code> and have the condition use a <code>break</code> inside the loop, or was that just an oversight on the author's part as he tried to explain a different concept?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I was about to ask why it has while True instead of while (offset &lt;= size), but decided to try it for myself, </p>
</blockquote>
<p>This is actually how I would have written it.  It should be logically equivelent.</p>
<blockquote>
<p>and saw that while (offset &gt; size) doesn't actually do anything in my Python console.</p>
</blockquote>
<p>You needed to use <code>(offset &lt;= size)</code>, not <code>(offset &gt; size)</code>.  The current logic stops as soon as the <code>offset</code> is greater than <code>size</code>, so reverse the condition if you want to put it in the while statement.</p>
<blockquote>
<p>does Python really require you to move the condition inside the while loop like that? </p>
</blockquote>
<p>No, Python allows you write write the condition in the while loop directly.  Both options are fine, and it really is more a matter of personal preference in how you write your logic.  I prefer the simpler form, as you were suggesting, over the original author's version.</p>
<p>This should work fine:</p>
<pre><code>while offset &lt;= size:
    fout.write(poem[offset:offset+chunk])
    offset += chunk
</code></pre>
<p>For details, see the documentation for <a href="https://docs.python.org/3/reference/compound_stmts.html?highlight=while" rel="nofollow"><code>while</code></a>, which specifically states that any expression can be used before the <code>:</code>.</p>
<hr/>
<p>Edit:</p>
<blockquote>
<p>Does Python prefer to do while True and have the condition use a break inside the loop, or was that just an oversight on the author's part as he tried to explain a different concept?</p>
</blockquote>
<p>Python does not prefer <code>while True:</code>. Either version is fine, and it's completely a matter of preference for the coder.  I personally prefer keeping the expression in the while statement, as I find the code more clear, concise, and maintainable using <code>while offset &lt;= size:</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is legal Python code to put the conditional in the loop. Personally I think:</p>
<pre><code>while offset &lt;= size:
</code></pre>
<p>is clearer than:</p>
<pre><code>while True:
    if offset &lt; size:
        break
</code></pre>
<p>I prefer the first form because there's one less branch to follow but the logic is not any more complex. All other things being equal, lower levels of indentation are easier to read.
If there were multiple different conditions that would break out of the loop then it might be preferable to go for the <code>while True</code> syntax.</p>
<p>As for the observed behavior with the incorrect loop logic, consider this snippet:</p>
<pre><code>size = len(poem)
offset = 0

while offset &gt; size:
    #loop code
</code></pre>
<p>The while loop will never be entered as <code>offset &gt; size</code> starts off false.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>while True:
    if offset &gt; size:
        break
    func(x)
</code></pre>
<p>is exactly equivalent to </p>
<pre><code>while offset &lt;= size:
    func(x)
</code></pre>
<p>They both run until offset &gt; size. It is simply a different way of phrasing it -- both are acceptable, and I'm not aware of any performance differences. They would only run differently if you had the break condition at the bottom of the <code>while</code> loop (i.e. after <code>func(x)</code>)</p>
<p>edit: </p>
<p>According to <a href="https://wiki.python.org/moin/WhileLoop" rel="nofollow">the Python wiki</a>, in Python 2.* "it slows things down a lot" to put the condition inside the <code>while</code> loop: "this is due to first testing the True condition for the while, then again testing" the break condition. I don't know what measure they use for "a lot", but it seems miniscule enough. </p>
</div>
<div class="post-text" itemprop="text">
<p>When <em>reading</em> from a file, you usually do</p>
<pre><code>output = []
while True:
    chunk = f.read(chunksize)
    if len(chunk) == 0:
        break
    output.append(chunk)
</code></pre>
<p>It seems to me like the author is more used to doing reading than writing, and in this case the reading idiom of using <code>while True</code> has leaked through to the writing code.</p>
<p>As most of the folks answering the question can attest to, using simply <code>while offset &lt;= size</code> is probably more Pythonic and simpler, though even simpler might be just to do</p>
<pre><code>f.write(poem)
</code></pre>
<p>since the underlying I/O library can handle the chunked writes for you.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Does Python prefer to do while True and have the condition use a break
  inside the loop, or was that just an oversight on the author's part as
  he tried to explain a different concept?</p>
</blockquote>
<p>No it doesn't, this is a quirk or error of the author's own.</p>
<p>There are situations where typical Python style (and Guido van Rossum) actively advise using <code>while True</code>, but this isn't one of them. That said, they don't <em>disadvise</em> it either. I imagine there are cases where a test would be easier to read and understand as "say when to break" than as "say when to keep going". Even though they're just logical negations of each other, one or other might make express things a little more simply:</p>
<pre><code>while not god_unwilling() and not creek_risen():
while not (god_unwilling() or creek_risen()):
</code></pre>
<p>vs.</p>
<pre><code>while True:
    if god_unwilling() or creek_risen():
        break
</code></pre>
<p>I still sort of prefer the first, but YMMV. Even better introduce functions that correspond to the English idiom: <code>god_willing()</code> and <code>creek_dont_rise()</code></p>
<p>The "necessary" use is when you want to execute the break test at the end or middle of the loop (that is to say, when you want to execute part or all of the loop unconditionally the first time through). Where other languages have a greater variety of more complex loop constructs, and other examples play games with a variable to decide whether to break or not, Guido says "just use <code>while True</code>". Here's an example from the FAQ, for a <a href="https://docs.python.org/2/faq/design.html#why-can-t-i-use-an-assignment-in-an-expression" rel="nofollow">loop that starts with an assignment</a>:</p>
<p>C code:</p>
<pre><code>while (line = readline(f)) {
    // do something with line
}
</code></pre>
<p>Python code:</p>
<pre><code>while True:
    line = f.readline()
    if not line:
        break
    # do something with line
</code></pre>
<p>The FAQ remarks (and this relates to typical Python style):</p>
<blockquote>
<p>An interesting phenomenon is that most experienced Python programmers
  recognize the <code>while True</code> idiom and don’t seem to be missing the
  assignment in expression construct much; it’s only newcomers who
  express a strong desire to add this to the language.</p>
</blockquote>
<p>It also points out that for this particular example, you can in fact avoid the whole problem anyway with <code>for line in f</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In my opinion, <em>while True</em> is better than other ways, in big programs; which has long codes. Because you cant see actually that a variable may change because of some functions or etc. <em>while True</em> means <em>start if its true</em> which means <em>start this loop whatever happens except closed the program</em>. So that maybe writer of the book want you used to use <em>while True</em>, is a little less risky than others.</p>
<p>It's better used to <em>while True</em> and define the variable which is may stop this loop.</p>
</div>
<span class="comment-copy">The logical equivalent would be <code>while offset &lt;= size</code> wouldn'y it?</span>
<span class="comment-copy">Touche, thanks. I wrote that after realizing this should be on here, and not on Code Review where I was originally going to post this. Then I discovered that what I thought should work didn't, rendering it not suitable for that site. Edited!</span>
<span class="comment-copy">And, of course, that's why my try in the console didn't do anything. That's half of the issue, but doesn't answer the <b>WHY</b>.</span>
<span class="comment-copy"><code>while (offset &gt; size)</code> doesn't do anything because <code>offset</code> is not greater than <code>size</code> initially.  So, the loop never runs.</span>
<span class="comment-copy">The why part is just style, I think. (Partly, it may have to do with the fact that <code>while True</code> is normal for file reading)</span>
<span class="comment-copy">Thanks. That was a syntax error on my part. Please see the reclarified question now that the minor bug was discovered. My original intention was a stylistic one and not "why doesn't my faulty logic not work".</span>
<span class="comment-copy">@krillgar, edited to reflect that.</span>
<span class="comment-copy">the Python wiki entry is incorrect here. You cannot reassign <code>True</code> any more than you can reassign <code>1</code>, and <code>dis</code> shows there's no value lookup for <code>True</code>.</span>
<span class="comment-copy">@AdamSmith ah! I missed a critical detail: "though in Python 2.*," - perhaps that addresses your point?</span>
<span class="comment-copy">Holy crud, you can reassign <code>True</code> in Python2. Whose idea was <b>THAT?!</b></span>
<span class="comment-copy">@AdamSmith: I don't think it was planned as a desirable feature, just an accident of the implementation details. Python 2 kept the number of keywords right down. You can still reassign most Python2 builtins even in Python3 (<code>any</code>, <code>open</code>, <code>str</code>...), but <code>True</code> was changed from a builtin to a keyword.</span>
<span class="comment-copy">@AdamSmith: Python didn't always have booleans. I believe they didn't want to break code that assigned <code>True = 1</code>, so they made it a built-in variable rather than a keyword.</span>
<span class="comment-copy">In a small write like this, I would agree about just calling <code>f.write(poem)</code>. But if there is a huge file you're writing, does it still internally chunk it?</span>
