<div class="post-text" itemprop="text">
<p>I'm stuck on dictionaries and sorting in python, I have the following values stored in a dictionary:</p>
<pre><code>{'PersonA': 87.0, 'PersonB': 89.0, 'PersonC': 101, 'PersonD': 94, 'PersonE': 112}
</code></pre>
<p>I want to: </p>
<p>1) Sort these so that they are ordered by highest score first, to lowest score <br/>
2) Remove the scores from the dictionary, leaving only the names</p>
<p>E.g in the example above the function should return:</p>
<pre><code>['PersonE', 'PersonC', 'PersonD', 'PersonB', 'PersonA']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this easily with <a href="https://docs.python.org/3/library/functions.html#sorted" rel="noreferrer"><code>sorted</code></a>:</p>
<pre><code>&gt;&gt;&gt; d = {'PersonA': 87.0, 'PersonB': 89.0, 'PersonC': 101, 'PersonD': 94, 'PersonE': 112}
&gt;&gt;&gt; sorted(d, key=d.get, reverse=True)
['PersonE', 'PersonC', 'PersonD', 'PersonB', 'PersonA']
&gt;&gt;&gt;
</code></pre>
<p>Note that the output is a list of names though.  You cannot sort a dictionary or a set in Python because they are both naturally unordered.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do as follows:</p>
<pre><code>d1 = {'PersonA': 87.0, 'PersonB': 89.0, 'PersonC': 101, 'PersonD': 94, 'PersonE': 112}
print([n for n,s in sorted(d1.items(), key=lambda v:v[1], reverse=True)])
</code></pre>
<p>Which results in:</p>
<pre><code>['PersonE', 'PersonC', 'PersonD', 'PersonB', 'PersonA']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is not possible to sort a dictionary , because dictionary is orderless, but other types, such as lists and tuples, are not.But you can have a sorted representation.</p>
<p>For instance,</p>
<pre><code>import operator
x = {first: 2, second: 4, third:3, fourth:1, fifth:0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))
</code></pre>
<p>or you can also do</p>
<pre><code>sorted(x.values()) to get a sorted representation.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An option to keep the dic and sort it:</p>
<pre><code>&gt;&gt;&gt;from collections import OrderedDict

&gt;&gt;&gt; # regular unsorted dictionary
&gt;&gt;&gt; d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}

&gt;&gt;&gt; # dictionary sorted by key
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[0]))
OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])

&gt;&gt;&gt; # dictionary sorted by value
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[1]))
OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])

&gt;&gt;&gt; # dictionary sorted by length of the key string
&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))
OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])
</code></pre>
<p>Detail: sorted has the reverse(bool) arg, ex:</p>
<pre><code>&gt;&gt;&gt; OrderedDict(sorted(d.items(), key=lambda t: t[0], reverse = True))
OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])
</code></pre>
<p>The usage is normal:</p>
<pre><code>&gt;&gt;&gt; dic = OrderedDict(sorted(d.items(), key=lambda t: t[0]))
&gt;&gt;&gt; dic['banana']
3
</code></pre>
<p>font: <a href="https://docs.python.org/2/library/collections.html#ordereddict-examples-and-recipes" rel="nofollow">https://docs.python.org/2/library/collections.html#ordereddict-examples-and-recipes</a></p>
</div>
<span class="comment-copy">Nice to know, didn't know you could sort a dictionary!</span>
<span class="comment-copy">@ReutSharabani - You can't sort a dictionary.  This is just iterating over the dictionary's keys and collecting them into a sorted list, using <code>dict.get</code> to determine the order.</span>
<span class="comment-copy">I know, I meant using <code>sorted</code> directly on the dictionary keys. On the other hand you can iterate over them just like a <code>list</code> or a <code>tuple</code>, so why not...</span>
