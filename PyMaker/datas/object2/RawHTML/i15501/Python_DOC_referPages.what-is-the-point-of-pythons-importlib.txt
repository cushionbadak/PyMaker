<div class="post-text" itemprop="text">
<p>Is this "convenience wrapper": <a href="https://docs.python.org/2/library/importlib.html" rel="nofollow">https://docs.python.org/2/library/importlib.html</a> just providing another way of writing:</p>
<pre><code>import path.to.my.module
</code></pre>
<p>Is there something is does that you can't do with a normal import statement?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.7, <code>importlib</code> isn't <em>super</em> useful.  In fact, its only feature is the <code>import_module</code> function, which enables you to import a module from a string name:</p>
<pre><code>&gt;&gt;&gt; import importlib
&gt;&gt;&gt; importlib.import_module('sys')
&lt;module 'sys' (built-in)&gt;
&gt;&gt;&gt; importlib.import_module('sys').version
'2.7.8 (default, Jul  2 2014, 19:50:44) [MSC v.1500 32 bit (Intel)]'
&gt;&gt;&gt;
</code></pre>
<p>Note that you could do the same with the <a href="https://docs.python.org/2/library/functions.html#__import__" rel="nofollow"><code>__import__</code></a> built-in, but using <code>import_module</code> is generally preferred.</p>
<p>In Python versions 3.1 and greater however, the purpose of <code>importlib</code> has been expanded.  According to the <a href="https://docs.python.org/3/library/importlib.html#introduction" rel="nofollow">documentation</a>:</p>
<blockquote>
<p>The purpose of the <code>importlib</code> package is two-fold. One is to provide an
  implementation of the import statement (and thus, by extension, the
  <code>__import__()</code> function) in Python source code. This provides an implementation of <code>import</code> which is portable to any Python interpreter.
  This also provides a reference implementation which is easier to
  comprehend than one implemented in a programming language other than
  Python.</p>
<p>Two, the components to implement import are exposed in this package,
  making it easier for users to create their own custom objects (known
  generically as an importer) to participate in the import process.
  Details on custom importers can be found in <a href="http://www.python.org/dev/peps/pep-0302" rel="nofollow">PEP 302</a>.</p>
</blockquote>
<p>Summarized, <code>importlib</code> now allows you to access the internals of Python's import-statement, build custom finders, loaders, and importers, setup import hooks, and much more.</p>
<p>In fact, as of version 3.3, <code>importlib</code> holds the implementation of the import-statement itself.  You can read about this on the What's New in Python 3.3 page under <a href="https://docs.python.org/3/whatsnew/3.3.html#using-importlib-as-the-implementation-of-import" rel="nofollow">Using <code>importlib</code> as the Implementation of Import</a>.</p>
<p>Also, <code>importlib</code> will be replacing older modules related to importing in future versions of Python. For example, the old <a href="https://docs.python.org/3/library/imp.html" rel="nofollow"><code>imp</code></a> module was deprecated in version 3.4 in favor of <code>importlib</code>.</p>
<p>With all of this in mind, I guess it's safe to say that <code>importlib</code> is pretty important in modern Python. ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>It allows you to import modules which you do not know the name at coding time.</p>
<p>For instance when my application starts, I walk through a directory structure and load the modules as I discover them.</p>
</div>
<span class="comment-copy">Please also note: starting from Python 3.3 <code>import</code> statement itself is implemented by <code>importlib</code> package, not by very complex C code.</span>
