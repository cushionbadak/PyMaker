<div class="post-text" itemprop="text">
<p>I have this really small test program which does nothing apart from a executing an <code>asyncio</code> event loop:</p>
<pre><code>import asyncio
asyncio.get_event_loop().run_forever()
</code></pre>
<p>When I run this program on Linux and press <kbd>Ctrl</kbd>+<kbd>C</kbd>, the program will terminate correctly with a <code>KeyboardInterrupt</code> exception. On Windows pressing <kbd>Ctrl</kbd>+<kbd>C</kbd> does nothing (tested with Python 3.4.2). A simple inifinite loop with <code>time.sleep()</code> raises the <code>KeyboardInterrupt</code> correctly even on Windows:</p>
<pre><code>import time
while True:
    time.sleep(3600)
</code></pre>
<p>Why does the asyncio's event loop suppress the KeyboardInterrupt on Windows?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a bug, sure.</p>
<p>See <a href="http://bugs.python.org/issue23057">issue on python bug-tracker</a> for the problem solving progress.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is workaround for Windows. Run another corouting which wake up loop every second and allow loop to react on keyboard interrupt</p>
<p>Example with Echo server from asyncio doc</p>
<pre><code>async def wakeup():
    while True:
        await asyncio.sleep(1)

loop = asyncio.get_event_loop()
coro = loop.create_server(EchoServerClientProtocol, '127.0.0.1', 8888)
server = loop.run_until_complete(coro)

# add wakeup HACK
loop.create_task(wakeup())

try:
    loop.run_forever()
except KeyboardInterrupt:
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to exit the program and don't need to catch the <code>KeyboardInterrupt</code>, the <a href="https://docs.python.org/3/library/signal.html" rel="noreferrer">signal</a> module provides a simpler (and more efficient) workaround:</p>
<pre class="lang-py prettyprint-override"><code># This restores the default Ctrl+C signal handler, which just kills the process
import signal
signal.signal(signal.SIGINT, signal.SIG_DFL)

# Now the event loop is interruptable
import asyncio
asyncio.get_event_loop().run_forever()
</code></pre>
</div>
