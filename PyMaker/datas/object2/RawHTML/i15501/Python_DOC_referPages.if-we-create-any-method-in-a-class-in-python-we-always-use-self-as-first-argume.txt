<div class="post-text" itemprop="text">
<pre><code>class ABC:
    def xyz(self):
        print "in xyz"

obj = ABC()
print obj.xyz()
</code></pre>
<p>output : <code>in xyz</code></p>
<p>here <code>self</code> is not given as parameter while calling <code>xyz</code> with <code>obj</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's because <code>self</code> is, by default, <em>the instance itself</em>. <code>obj.xyz()</code> is equivalent to <code>ABC.xyz(obj)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first argument of every class method, including <code>__init__</code>, is always a reference to the current instance of the class. </p>
<p>By convention, this argument is always named <code>self</code>. </p>
<p>In the <code>__init__</code> method, self refers to the newly created object; in other <em>instance methods</em>, it refers to the instance whose method was called. Although you need to specify <code>self</code> explicitly when defining the method, you do not specify it when calling the method; Python will add it for you automatically.</p>
<p>Learn more about <code>self</code> <a href="http://www.diveintopython.net/object_oriented_framework/defining_classes.html" rel="nofollow noreferrer">here</a> and <a href="https://stackoverflow.com/questions/6019627/python-self-keyword">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Technically, this is what happens:</p>
<ol>
<li>It tries to evaluate <code>obj.xyz</code></li>
<li>It funds that the object <code>obj</code> has no attribute named <code>xyz</code></li>
<li>It then looks in <code>obj</code>'s class (<code>ABC</code>) for an attribute named <code>xyz</code>, which it does have</li>
<li><code>ABC.xyz</code> is a function, so then it "wraps" it into a "instance method". Basically, <code>ABC.xyz</code> is a function with one parameter (<code>self</code>), so the "instance method" is a function with one less parameter from the original function (no parameters in this case), which remembers the object <code>obj</code>. And if you call this "instance method", it passes it onto <code>ABC.xyz</code>, with the first argument being <code>obj</code>, the rest of the arguments being the argument to the bound method.</li>
<li><code>obj.xyz</code> evaluates to this instance method</li>
<li>You make a call on this instance method, which calls <code>ABC.xyz</code>, with the remembered instance (<code>obj</code>) as the first argument.</li>
</ol>
<p>Here are the relevant parts from the language reference (scroll from <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow">here</a>):</p>
<blockquote>
<p>Class instances</p>
<p>A class instance is created by calling a class object (see above). A class instance has a namespace implemented as a dictionary which is
  the first place in which attribute references are searched. When an
  attribute is not found there, and the instance’s class has an
  attribute by that name, the search continues with the class
  attributes. If a class attribute is found that is a user-defined
  function object, it is transformed into an instance method object
  whose <code>__self__</code> attribute is the instance. [...]</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Instance methods</p>
<p>[...]</p>
<p>When an instance method object is created by retrieving a user-defined
  function object from a class via one of its instances, its <code>__self__</code>
  attribute is the instance, and the method object is said to be bound.
  The new method’s <code>__func__</code> attribute is the original function object.</p>
<p>[...]</p>
<p>When an instance method object is called, the underlying function
  (<code>__func__</code>) is called, inserting the class instance (<code>__self__</code>) in
  front of the argument list. For instance, when <code>C</code> is a class which
  contains a definition for a function <code>f()</code>, and <code>x</code> is an instance of
  <code>C</code>, calling <code>x.f(1)</code> is equivalent to calling <code>C.f(x, 1)</code>.</p>
<p>[...]</p>
</blockquote>
</div>
<span class="comment-copy">Not as explicit as some people might want it, but still +1</span>
