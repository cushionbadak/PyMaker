<div class="post-text" itemprop="text">
<pre><code>class Controller:

    def __init__(self):
        self.__whiteList = self.readFile('whiteList.txt')
        a = 0 # Breakpoint

    def getWhiteList(self):
        return self.__whiteList
</code></pre>
<p>Well, I placed a breakpoint at <code>a = 0</code>.</p>
<p>When I stop at the breakpoint, I want to evaluate <code>__whiteList</code>.</p>
<p>The error is:</p>
<pre><code>AttributeError:'Controller' object has no attribute '__whiteList'
</code></pre>
<p>Well, this is a mystery to me. Because I have the getter method and outside the class it works perfectly.</p>
<p>Well, you may tell me that I could easily take no notice of it as it works outside the class. But I need it during the debugging. </p>
<p>Could you comment on why I can't catch the value at the breakpoint?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you prefix an attribute name with a double underscore, Python <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow">"mangles" the name</a> by placing <code>_&lt;classname&gt;</code> before it.  This means that you would need to do:</p>
<pre><code>def getWhiteList(self):
    return self._Controller__whiteList
</code></pre>
<p>in order to access the <code>__whiteList</code> attribute.</p>
<p>But it doesn't look like you should be using the <code>__</code> in the first place.  You may just want to remove it and access <code>whiteList</code> directly:</p>
<pre><code>def __init__(self):
    self.whiteList = self.readFile('whiteList.txt')
    a = 0 # Breakpoint

def getWhiteList(self):
    return self.whiteList
</code></pre>
<p>Or, you could use a single underscore:</p>
<pre><code>def __init__(self):
    self._whiteList = self.readFile('whiteList.txt')
    a = 0 # Breakpoint

def getWhiteList(self):
    return self._whiteList
</code></pre>
<p>This sends a clear message that the <code>_whiteList</code> attribute is internal and should not be accessed directly from outside the class under normal circumstances.</p>
<p>Also, if you decide to use either of these approaches, then there is really no purpose to your <code>getWhiteList</code> method since you can access the <code>whiteList</code> attribute directly.  I would remove it.  You generally want to avoid getters and setters in Python since 99% of the time they do nothing but clutter the class definition.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>print self.getWhiteList()</code> or <code>print self._Controller__whiteList</code>.</p>
<pre><code>-&gt; a = 0 # Breakpoint
(Pdb) list
  1     class Controller:
  2  
  3         def __init__(self):
  4             self.__whiteList = self.readFile('whiteList.txt')
  5 B-&gt;         a = 0 # Breakpoint
  6  
  7         def getWhiteList(self):
  8             return self.__whiteList
  9  
 10         def readFile(self, x):
 11             return x
(Pdb) print self
&lt;__main__.Controller instance at 0x106d200&gt;
(Pdb) print self.getWhiteList()
whiteList.txt
(Pdb) print self._Controller__whiteList
whiteList.txt
</code></pre>
</div>
<span class="comment-copy">Double underscores invoke name mangling, you need <code>instance._Controller__whiteList</code> (or, better, use a single underscore and read <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">the style guide</a>).</span>
<span class="comment-copy">... and remove the now unnecessary <code>getWhiteList</code> method.</span>
<span class="comment-copy">A getter can return the value but not allow you to change it - they are still a good thing in python.</span>
<span class="comment-copy">@dgunchev - In that case, you could make <code>whiteList</code> a <code>@property</code> and make its <code>setter</code> function raise an error.  I'm saying that <code>get_attribute</code> and <code>set_attribute</code> methods are considered ugly in Python.</span>
<span class="comment-copy">@iCodez Yes, you can. The property can also be read only one. Exposing the contents of a class member bu making it "public" gives you read and write access. But this all is offtopic, the question was how to get the value :)</span>
