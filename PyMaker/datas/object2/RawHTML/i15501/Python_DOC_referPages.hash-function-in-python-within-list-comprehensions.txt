<div class="post-text" itemprop="text">
<p>I am trying to understand why the code behaves the way it does</p>
<pre><code>class Baz():
    def __init__(self,name):
        self.name=name


k=[Baz(i) for i in range(4)]
print([hash(i) for i in k])

print([hash(Baz(i)) for i in range(4)])
</code></pre>
<p>This outputs</p>
<pre><code>[8736683315973, -9223363300171459831, 8736683315982, -9223363300171459822]

[8736683315991, 8736683315991, 8736683315991, 8736683315991]
</code></pre>
<p>I'm wondering why in the second case I get all same hashcodes</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't define a <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow"><code>__hash__</code></a> method in your class Python will use the memory address for the hashing.</p>
<p>In the second case <code>Bash(i)</code> isn't needed after the <code>hash</code>. Python throws it away and reuses the memory for the next <code>Bash</code> instance, so all subsequent calls get the same hash value.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class Baz():
    def __init__(self,name):
        self.name=name
        print self


&gt;&gt;&gt; k=[Baz(i) for i in range(4)]       
    print k
[&lt;__main__.Baz instance at 0x7f5a010290e0&gt;, &lt;__main__.Baz instance at 0x7f5a01029908&gt;, &lt;__main__.Baz instance at 0x7f5a01028758&gt;, &lt;__main__.Baz instance at 0x7f5a0102e050&gt;]`
</code></pre>
<p>k carry <strong>list of instances</strong> pass to class <code>Baz</code> with value <code>0, 1, 2, 3</code></p>
<pre><code>here `self` have different object for `i` in `[hash(i) for i in k]`
if you then

print([hash(i) for i in k])
&lt;__main__.Baz instance at 0x7f2ae9a13290&gt;
&lt;__main__.Baz instance at 0x7f2ae9a30908&gt;
&lt;__main__.Baz instance at 0x7f2ae9a300e0&gt;
&lt;__main__.Baz instance at 0x7f2ae9a35050&gt;
[8738892813097, -9223363297961955184, 8738892820494, 8738892821765]

print([hash(Baz(i)) for i in range(4)])
</code></pre>
<p>see here, instance pass to class <code>Baz</code> is same. because <code>hash</code> uses same memory references and throws the previous memory reference for the instances.</p>
<pre><code>&lt;__main__.Baz instance at 0x7f2ae9a35290&gt;
&lt;__main__.Baz instance at 0x7f2ae9a35290&gt;
&lt;__main__.Baz instance at 0x7f2ae9a35290&gt;
&lt;__main__.Baz instance at 0x7f2ae9a35290&gt;
[8738892821801, 8738892821801, 8738892821801, 8738892821801]
</code></pre>
</div>
<span class="comment-copy">Right this makes sense now. In the C implementation of Python this happens, same as with open(file).read() will end up automatically closing the file after the read function call since it is no longer used in memory though this doesnt happen the same in other implementations of Python so it cant be relied on</span>
<span class="comment-copy">That's my question. Why is the instance same ?</span>
