<div class="post-text" itemprop="text">
<p>In Python, I can assign alternative values to a variable if the first assignment to this variable raise exceptions, something like:</p>
<pre><code>try:
    a = 1/0
except Exception:
    a = 0
</code></pre>
<p>I wonder can we replace the <code>try/except</code> with context manager?</p>
<p>Here what I tried:</p>
<pre><code>from contextlib import contextmanager

@contextmanager
def tryo(*exception_list):
    t = tuple(i for i in exception_list[0]
              if isinstance(i,Exception) or (Exception,))
    try:
        yield
    except t as e:
        print e

with tryo([(Exception, 0)]):
    a = 1/0
</code></pre>
<p>I guess I must do something instead of <code>yield</code> but don't know what must I do. Any suggestion?</p>
</div>
<div class="post-text" itemprop="text">
<p>The exception (<code>ZeroDivisionError</code> in this case) is not caused by assignment failure, but becasue of dividing by <code>0</code>.</p>
<p>The first code can be converted as follow:</p>
<pre><code>a = 0
try:
    a = 1 / 0
except Exception:  # ZeroDivisionError:
    pass
</code></pre>
<p>How about the following approach (yielding default value, change the value in <code>with</code> statement body)?</p>
<pre><code>&gt;&gt;&gt; from contextlib import contextmanager
&gt;&gt;&gt;
&gt;&gt;&gt; @contextmanager
... def tryo(exceptions, default):
...     try:
...         yield default
...     except exceptions:
...         pass
...
&gt;&gt;&gt; with tryo((Exception), 0) as a:  # ZeroDivisionError:
...     a = 1 / 0
...
&gt;&gt;&gt; with tryo((Exception), 0) as b:  # ZeroDivisionError:
...     b = 4 / 2
...
&gt;&gt;&gt; a
0
&gt;&gt;&gt; b
2.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no way for the context manager to know what you are doing within the context. It especially won’t be able to tell which variable you are assigning a value to; it also won’t be able to access that variable; and even if it could, there would be no guarantee that you only did that one assigment inside the context manager too. So, no, you can’t do it like that.</p>
<p>What you could do however, is to do it the other way around. Your <code>0</code> is a default value, so you would set that one <em>first</em>. Afterwards, you try to assign your actual value <code>1/0</code> and ignore the ZeroDivisionError. So it would look like this:</p>
<pre><code>a = 0
try:
    a = 1/0
except ZeroDivisionError:
    pass
</code></pre>
<p>And that you can do with a context manager, with <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="nofollow"><code>contextlib.suppress</code></a>:</p>
<pre><code>a = 0
with suppress(ZeroDivisionError):
    a = 1/0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use Decorator like:</p>
<pre><code>def my_decorator(exception_list):
    def real_decorator(func):
        def fn_wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except tuple(e for e, _ in exception_list) as e:
                for error, default in exception_list:
                    if isinstance(e, error):
                        return default
                else:
                    # this Exception not in exception_list
                    raise e
        return fn_wrapper
    return real_decorator


@my_decorator([(ZeroDivisionError, 1),
               (IndexError, 2),
               (ValueError, 3),
               (Exception, 0)],
              )
def div_working():
    import random
    e = random.choice((ZeroDivisionError, IndexError, ValueError, Exception, 100, 200, 300))
    if isinstance(e, int):
        return e
    else:
        print e
        raise e

for _ in range(10):
    a = div_working()
    print a
    print "= " * 10
</code></pre>
</div>
<span class="comment-copy">Oh, I also think about this approach, but I must handle the case where multiple exceptions occur, each has its own default value. Example ZeroDivisionError has default value 0, KeyError has default value 1. Is this possible?</span>
<span class="comment-copy">@cuonglm, IMHO, it's not feasible with context manager. How about this? <a href="http://ideone.com/qujvMW" rel="nofollow noreferrer">ideone.com/qujvMW</a></span>
