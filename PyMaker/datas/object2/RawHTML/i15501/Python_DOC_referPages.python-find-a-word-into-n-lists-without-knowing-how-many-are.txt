<div class="post-text" itemprop="text">
<p>as the title (I searched the site but have not found the answer) I have to find a word in common in <code>n</code> lists.</p>
<p>for example if I have these lists:</p>
<pre><code>list1 = ["a", "b", "c"]
list2 = ["d", "e", "a"]
list3 = ["f", "g", "h", "i", "j"]
</code></pre>
<p>list1 and list2 have one thing in common, namely "a" ...
Obviously I could have 100 lists as well ... but I do not know the number, the algorithm must always work, of course:P</p>
<p>I thought of a for loop, but I never managed to get to something concrete (making for num in range (len (list1)), because if the lists are of different lengths can not do anything.</p>
<p>Edit: I apologize maybe I explained bad, I do not have lists of lists.
I'm working with graphs, and in the node's information of the graph, I have a list, in cui I have the information, and I need to find the nodes that share in common information in order to connect them with a bow.</p>
<p>In the graph I have <code>n</code> nodes, according to how it generates the program, and therefore I have <code>n</code> lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use intersection of sets, like this (and modify accordingly if you have a list of lists)</p>
<pre><code>list1 = ["a", "b", "c", "xc"]
list2 = ["d", "e", "to", "xc"]
list3 = ["f", "g", "h", "i", "j", "xc"]

print list(set(list1) &amp; set(list2) &amp; set(list3)) # it will print ['xc']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I asked which of two things you want, and you answered "exactly", and then clarified in a way that still doesn't tell me which of the two things you want. So, I still don't know which problem you're trying to solve. So I'll explain them both.</p>
<hr/>
<p>First, from the fact that you tried a loop over <code>range(len(list1))</code>, you may be looking only for matches <em>at the same position</em>—that is, <code>list1[3] == list2[3]</code> is a match, but <code>list1[3] == list2[2]</code> is not.</p>
<p>For that, you normally want the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> function. But in this case, given your comment "if the lists are of different lengths can not do anything", I assume you want to keep going until the end of the <em>longest</em> list. For that, you want the <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow"><code>zip_longest</code></a> function. Like this:</p>
<pre><code>for value1, value2, value3 in itertools.zip_longest(list1, list2, list3):
    if value1 == value2:
        print('found a match')
</code></pre>
<p>Most likely, you're going to want to check all the combinations of listX vs. listY. The smart way to do that is to use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow"><code>combinations</code></a>:</p>
<pre><code>for values in itertools.zip_longest(list1, list2, list3):
    if any(x == y for x, y in itertools.combinations(values, 2)):
        print('found a match')
</code></pre>
<p>And this goes along with what I said in the comments: if you have anywhere from 3 to 100 lists, you do not want them in separate variables like <code>list1</code>, <code>list2</code>, …, <code>list100</code>, you want them in a big list (or dict) of lists.</p>
<hr/>
<p>Alternatively, you may just want to treat the lists as sets, and find matches regardless of position, so if <code>list1[2] == list2[3]</code> that counts.</p>
<p>In that case, all you're asking for is whether the set <a href="https://docs.python.org/3/library/stdtypes.html#set.isdisjoint" rel="nofollow"><code>intersection</code></a> is non-empty. Like this:</p>
<pre><code>if set(list1).intersection(list2, list3):
    print('found a match')
</code></pre>
<p>(Or, equivalently, you could <code>reduce</code> over <code>is_disjoint</code>, or a couple other ways to do the same thing.)</p>
<p>However, if you want to use your lists as sets, you should be storing them as sets in the first place. (And, again, you should be storing them in a list of sets, not 3-100 separate variables.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Write a function that takes a list of iterables, turns them into sets, and takes the intersection, which returns the elements common to both sets:</p>
<pre><code>def find_common_words(list_of_lists):
    current_set = set(list_of_lists[0])
    for l in list_of_lists:
        current_set = list_of_lists.intersection(l)
    return list(current_set)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import combinations

lists = [
    ["a", "b", "c"],
    ["d", "e", "a"],
    ["f", "g", "h", "i", "j"],
    ["z", "a", "d", "l", "m"]
]

for one, two in combinations(lists, 2):
    intersection = list(set(one) &amp; set(two))
    if intersection:
        print one, two, intersection
</code></pre>
<p>Output</p>
<pre><code>['a', 'b', 'c'] ['d', 'e', 'a'] ['a']
['a', 'b', 'c'] ['z', 'a', 'd', 'l', 'm'] ['a']
['d', 'e', 'a'] ['z', 'a', 'd', 'l', 'm'] ['a', 'd']
</code></pre>
</div>
<span class="comment-copy">I don't see "a" in <code>list2</code>. I still don't understand your question, are you trying to find all lists that contain an element of interest, e.g. "a"? Or find the intersection of all your lists?</span>
<span class="comment-copy">excuse me, google translator has translated well to lol.</span>
<span class="comment-copy">As a side note, if you're going to have anywhere from 3 to 100 lists, they shouldn't be in separate variables named list1 through list100, they should be in a big list of lists (or maybe a dict of lists).</span>
<span class="comment-copy">Why is this generating hundreds of separate lists? It's basically useless. If you are generating the output, output something useful like a csv or json or something...</span>
<span class="comment-copy">@Ngenator: Or, more generally: figure out what you want to do with the information, ask what data structures would make those tasks trivial, and then those data structures are the ones you should be building.</span>
<span class="comment-copy">Hello and thanks for the reply ... I tried the various functions that posted the other users, and I think I understood that the behavior of your function is practically equal to that @MTrenfield.  Your function is interesting and right if not for one small problem. it is not said that all three lists (in this case three) have to force one thing in common ... may well be that only two have one thing in common (with your code if all the lists do not have an item in common, it returns me an empty list), and I should know the name of the lists. Thank you.</span>
<span class="comment-copy">@checco94 - you're welcome. So you now have the idea to proceed further. Please check whatever answer you think is OK as 'accepted', even though you cannot vote them up.</span>
<span class="comment-copy">Hello, I have just voted, but the system says I have to have at least 15 reputation to vote:/ you have been very kind I would vote you ... if you know another way to do this let me know thank you.</span>
<span class="comment-copy">@checco94 - yes, checking an answer as "accepted" is still available without reputation points.</span>
<span class="comment-copy">You don't need <code>set(list1) &amp; set(list2) &amp; …</code>, you can just use <code>set(list1).intersection(list2, list3)</code>. Also, why are you converting the result back to a list?</span>
<span class="comment-copy">Hello, the same comment that I wrote for @Timothy Ha goes for you. You've been very kind thank you.</span>
