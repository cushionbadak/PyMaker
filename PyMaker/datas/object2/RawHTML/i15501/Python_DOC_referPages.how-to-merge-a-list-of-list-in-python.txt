<div class="post-text" itemprop="text">
<p>Given the following list of tuples:</p>
<pre><code>INPUT = [(1,2),(1,),(1,2,3)]
</code></pre>
<p>How would I flatten it into a list?</p>
<pre><code>OUTPUT ==&gt; [1,2,1,1,2,3]
</code></pre>
<p>Is there a one-liner to do the above?</p>
<p>Similar: <a href="https://stackoverflow.com/questions/15994124/flatten-list-of-tuples-in-python">Flatten list of Tuples in Python</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; INPUT = [(1,2),(1,),(1,2,3)]
&gt;&gt;&gt; [y for x in INPUT for y in x]
[1, 2, 1, 1, 2, 3]
&gt;&gt;&gt;
</code></pre>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable"><code>itertools.chain.from_iterable</code></a> is also used a lot in cases like this:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; INPUT = [(1,2),(1,),(1,2,3)]
&gt;&gt;&gt; list(chain.from_iterable(INPUT))
[1, 2, 1, 1, 2, 3]
&gt;&gt;&gt;
</code></pre>
<p>That's not exactly a one-liner though.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; INPUT = [(1,2),(1,),(1,2,3)]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.chain.from_iterable(INPUT))
[1, 2, 1, 1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; INPUT = [(1,2),(1,),(1,2,3)]  
&gt;&gt;&gt; import operator as op
&gt;&gt;&gt; reduce(op.add, map(list, INPUT))
[1, 2, 1, 1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use <code>sum</code> which adds up all of the elements if it's a list of list (singly-nested). </p>
<pre><code>sum([(1,2),(1,),(1,2,3)], ())
</code></pre>
<p>or convert to list:</p>
<pre><code>list(sum([(1,2),(1,),(1,2,3)], ()))
</code></pre>
<p>Adding up lists works in python.</p>
<p><strong>Note</strong>: This is inefficient and some say unreadable.</p>
</div>
<div class="post-text" itemprop="text">
<p>Not in one line but in two:</p>
<pre><code>&gt;&gt;&gt; out = []
&gt;&gt;&gt; map(out.extend, INPUT)
... [None, None, None]
&gt;&gt;&gt; print out
... [1, 2, 1, 1, 2, 3]
</code></pre>
<p>Declare a list object and use extend.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python">Flattening a shallow list in Python</a></span>
<span class="comment-copy">Flattening a list of tuples can be done in exactly the same ways to flattening a list of lists. See <a href="http://stackoverflow.com/questions/406121/flattening-a-shallow-list-in-python" title="flattening a shallow list in python">stackoverflow.com/questions/406121/…</a>, <a href="http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python" title="making a flat list out of list of lists in python">stackoverflow.com/questions/952914/…</a>, and many other answers.</span>
<span class="comment-copy">This has quadratic behaviour (if you make the list ten times longer, it will be one hundred times slower) and so won't be a good idea for long lists.</span>
<span class="comment-copy">I agree, it's much much better to use <code>itertools.chain.from_iterable</code></span>
