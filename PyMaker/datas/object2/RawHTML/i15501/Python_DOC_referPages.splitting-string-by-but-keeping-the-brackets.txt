<div class="post-text" itemprop="text">
<p>Ive got a string in this format</p>
<pre><code>a = "[a,b,c],[e,d,f],[g,h,i]"
</code></pre>
<p>Each part I want to be split is separated by <code>],[</code>. I tried <code>a.split("],[")</code> and I get the end brackets removed.</p>
<p>In my example that would be:</p>
<pre><code>["[a,b,c","e,d,f","g,h,i]"]
</code></pre>
<p>I was wondering if there was a way to keep the brackets after the split?</p>
<p>Desired outcome:</p>
<pre><code>["[a,b,c]","[e,d,f]","[g,h,i]"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>str.split</code> removes whatever substring you split on from the resulting list.  I think it would be better in this case to use the slightly more powerful <a href="https://docs.python.org/3/library/re.html#re.split" rel="noreferrer"><code>split</code></a> function from the <code>re</code> module:</p>
<pre><code>&gt;&gt;&gt; from re import split
&gt;&gt;&gt; a = "[a,b,c],[e,d,f],[g,h,i]"
&gt;&gt;&gt; split(r'(?&lt;=\]),(?=\[)', a)
['[a,b,c]', '[e,d,f]', '[g,h,i]']
&gt;&gt;&gt;
</code></pre>
<p><code>(?&lt;=\])</code> is a lookbehind assertion which looks for <code>]</code>.  Similarly, <code>(?=\[)</code> is a lookahead assertion which looks for <code>[</code>.  Both constructs are explained in <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="noreferrer">Regular Expression Syntax</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is very flexible, so you just have to manage it a bit and be adaptive to your case.</p>
<pre><code>In [8]:a = "[a,b,c],[e,d,f],[g,h,i]"
       a.replace('],[','] [').split(" ")
Out[8]:['[a,b,c]', '[e,d,f]', '[g,h,i]']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answers are correct, but here is another way to go.</p>
<p><strong>Important note</strong>: this is just to present another option that may prove useful <em>in certain cases</em>. Don't do it in the general case, and do so only in you're absolutely certain that you have the control over the expression you're passing into <code>exec</code> statement.</p>
<pre><code># provided you declared a, b, c, d, e, f, g, h, i beforehand
&gt;&gt;&gt; exp = "[a,b,c],[e,d,f],[g,h,i]"
&gt;&gt;&gt; exec("my_object = " + exp)
&gt;&gt;&gt; my_object
([a,b,c],[e,d,f],[g,h,i])
</code></pre>
<p>Then, you can do whatever you like with <code>my_object</code>.</p>
<p>Provided that you have full control over <code>exp</code>, this way of doing sounds more appropriate and Pythonic to me because you are treating a piece of Python code written in a string as a... piece of Python code written in a string (hence the <code>exec</code> statement). Without manipulating it through regexp or artificial hacks.</p>
<p>Just keep in mind that it can be dangerous.</p>
</div>
