<div class="post-text" itemprop="text">
<p>In Python 2.7 how do I parse 'abc' into 'a b c' for a very long string (like 1000 chars)?</p>
<p>Or how would I convert 'abccda' to '1 2 3 3 4 1'? (where each unique letter maps to a unique digit, 1-4)</p>
<p>I imagine I could pop the chars off, one by one, but I'm new to Python and wonder if there is a simple function that does it.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the first one use <code>join()</code>:</p>
<pre><code>&gt;&gt;&gt; s = 'abc'
&gt;&gt;&gt; ' '.join(s)
'a b c'
</code></pre>
<p>For the second one:</p>
<pre><code>&gt;&gt;&gt; s = 'abccda'
&gt;&gt;&gt; ' '.join(chr(ord(c)-ord('a')+ord('1')) for c in s)
'1 2 3 3 4 1'
</code></pre>
<p>or you could simply use a dictionary to map letters to numbers:</p>
<pre><code>&gt;&gt;&gt; s = 'abccda'
&gt;&gt;&gt; d = dict(a=1, b=2, c=3, d=4)
&gt;&gt;&gt; ' '.join(str(d[c]) for c in s)
'1 2 3 3 4 1'
</code></pre>
<p>And yet another way is to use <code>string.translate()</code>:</p>
<pre><code>&gt;&gt;&gt; from string import maketrans
&gt;&gt;&gt; s = 'abccda'
&gt;&gt;&gt; ' '.join(s.translate(maketrans('abcd', '1234')))
'1 2 3 3 4 1'
</code></pre>
<p><code>translate()</code> would be the preferred one since, as opposed to the naive dict lookup, it handles unmapped characters without errors:</p>
<pre><code>&gt;&gt;&gt; s='abcdefgh'
&gt;&gt;&gt; ' '.join(s.translate(maketrans('abcd', '1234')))
'1 2 3 4 e f g h'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>x="abc"
print re.sub(r"(?&lt;!^)(.)",r" \1",x)
</code></pre>
<p>For simple conversion you can try this.For mapping you can define you <code>repl</code>function in <code>re.sub</code>.An example can be</p>
<pre><code>def repl(matchobj):
    if matchobj.group()=='b':
         return " "+str(1)
    elif matchobj.group()=='c':
         return " "+str(2)
x="abc"
print re.sub(r"(?&lt;!^)(.)",repl,x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you mean the list method?</p>
<p>s='abccda'</p>
<p>list(s)   # ['a', 'b', 'c', 'c', 'd', 'a']</p>
</div>
<div class="post-text" itemprop="text">
<p>To convert each letter into a number, you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a>. This is probably overkill in this simple case, but it's worth learning.</p>
<p>The details are different in Python 2 and Python 3.</p>
<p>For Python 3, you can just use a mapping from Unicode ordinals to replacement strings, like this:</p>
<pre><code>mapping = {ord(letter): str(number) for number, letter in enumerate(string.ascii_lowercase[:4], 1)}
translated = x.translate(mapping)
</code></pre>
<p>For Python 2, you need a special translation table, which in this case is a little less convenient (and will only let you translate characters to single characters, not to arbitrary strings like the Python 3 versionâ€”not a problem here, but if you wanted to convert <code>'j'</code> to <code>'10</code>' it wouldn't work):</p>
<pre><code>mapping = string.maketrans(string.ascii_lowercase[:4], 
                           ''.join(str(i) for i in range(1, 5))
translated = x.translate(mapping)
</code></pre>
<p>Then, to add spaces, use <a href="https://stackoverflow.com/a/27539906/908494">mhawke's solution</a>:</p>
<pre><code>result = ' '.join(translated)
</code></pre>
</div>
<span class="comment-copy">Welcome to SO!  Try to focus on one clear question at a time.</span>
