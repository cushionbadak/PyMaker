<div class="post-text" itemprop="text">
<p>The application has been written in Python 2.7 and running on Ubuntu 14.04.</p>
<p>It runs 50 threads, one thread takes all the CPU (100% usage is shown in htop) and the others never have the chance to continue executing. It looks like the dispatcher is not able to change to other threads. Is that normal?</p>
<p>Should I try using processes instead of threads? I'm thinking that because using multiprocessing I could use more CPUs.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow">https://wiki.python.org/moin/GlobalInterpreterLock</a></p>
<p>And yes, <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow">multiprocessing</a> is possibly the recommended way to implement things in your case. Or you may try to rewrite the hanging thread so that it won't take much CPU (depends on <em>why</em> it hangs, likely it counts something). Or at least run <code>time.sleep(0)</code> from time to time as @user5402 suggests.</p>
<p>Also you might find useful <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow">asyncio</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you know which thread is hogging the cpu, try inserting</p>
<pre><code>time.sleep(0)
</code></pre>
<p>somewhere in its main loop. This will cause it to yield to another available thread.</p>
<p>What kind of work is that thread doing? Is it doing any IO? Python threads work best on IO-bound tasks. For CPU-bound tasks it is possible it is never allowing another thread to run.</p>
</div>
<span class="comment-copy"><a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">wiki.python.org/moin/GlobalInterpreterLock</a></span>
<span class="comment-copy">Actually I've lots of time.sleep(0) on the thread code, but I'd like a more consistent way.</span>
<span class="comment-copy">when you use <code>multiprocessing</code> than a corresponding number of system processes are created and each process works independently, it's a separate python interpreter with no implicit relations with each other. Certainly the problem in this case is to make them <i>interoperate</i> (i.e. exchange data, synchronize states, collect results etc)</span>
<span class="comment-copy">Regarding the question what would happen if a python process to take 100% CPU. It will take 100% of a single core (or a single processor in a truly multiprocessor system), and other cores/processors would be available for other processes. If your task can be parallelized well (i.e. it can be splitted into a number of almost independent tasks, w/o need of synchronization, or waiting for IO or other "shared resources" then you could theoretically gain a 4x speedup. Certainly the reallife tasks rarely fit these conditions but you always could invent a better algorithm :)</span>
<span class="comment-copy">Also, you've told that your application uses 50 threads in a 4CPU system. This sounds rather weird for me, because CPU intensive tasks can't be processed effectively with such a proportion (no more than 4 threads/processes run simultaneously, so the rest 46 have to wait). If you application handle incoming connections this way, then you should consider <code>asyncio</code>, typically it's a more reasonable solution for internet services etc.</span>
<span class="comment-copy">Even if the process would have no locks at all, 50/4 is just an extra workload for the system scheduler w/o much sense. Certainly YMMV but my experience tells that it'd often be more reasonable to implement a job queue and limit number of processors to a number close to avialble CPU cores.</span>
<span class="comment-copy">In theory they're doing network and IO-bound tasks... but I've recently had an stop because a bug that use a lot of CPU and it doesn't allow other threads to execute. So in theory threads looked like the best option, but I'd like the application will be able to react in this scenarios. For example, killing processes that takes too long.</span>
