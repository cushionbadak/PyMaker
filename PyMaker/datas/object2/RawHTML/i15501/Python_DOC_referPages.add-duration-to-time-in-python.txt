<div class="post-text" itemprop="text">
<p>I have two strings: </p>
<pre><code>current_time : 4:46:00 PM 
duration : 03:20:00 

current_time is : %I:%M:%S %p
duration is hour:minute:seconds format. 
</code></pre>
<p>I have to add the duration in the time .
In the above case : I need to get the output as  : <code>08:06:00 PM</code>
The code that I have tried is : </p>
<pre><code> parsedtime =  time.strptime(current_time,"%I:%M:%S %p")
 parsedduration = time.strptime(duration,"%I:%M:%S")
 parsedtime + datetime.timedelta(parsedduration.tm_hour,parsedduration.tm_min,parsedduration.tm_sec)
 print parsedtime
</code></pre>
<p>The above is obviously incorrect and not working , please suggest the optimal way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your problem is mixing <code>time</code> and <code>datetime</code> objects and not naming your keyword arguments in <code>timedelta</code>.</p>
<pre><code>from datetime import datetime, timedelta

current_time = "4:46:00 PM"
duration = "3:20:00"

parsed_time = datetime.strptime(current_time, "%I:%M:%S %p")
parsed_duration = datetime.strptime(duration, "%I:%M:%S")

then = parsed_time + timedelta(hours=parsed_duration.hour,
                               minutes=parsed_duration.minute,
                               seconds=parsed_duration.second)

result = then.strftime("%I:%M:%S %p")
# 08:06:00 PM
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import datetime
today1= datetime.date.today()
difference= datetime.timedelta(1)
yesterday= today1 - difference
print (yesterday)
</code></pre>
<p>It will give you a point, for example this one finds today-1day. It means yesterday.</p>
<pre><code>time1= time.localtime()
hour1=time1.tm_hour
min1=tim1.tm_min
#do your codes#
</code></pre>
<p>So you can define hour and min as a variable and do math.</p>
</div>
<span class="comment-copy">Don't mix up <code>time</code> and <code>datetime</code> like this. Just use one or the other. I'd suggest the latter because it's a lot simpler when you don't have the concepts clear in your head.</span>
<span class="comment-copy">Meanwhile, should 11:00:00 PM + 05:00:00 be 04:00:00 AM always, even if tonight is a DST boundary?</span>
<span class="comment-copy">Yes abarnert ....DST boundry scenario is handeled elsewhere in the code...so it should always be 04:00:00 AM</span>
<span class="comment-copy">I later changed my approach to use timedelta but I wasnt using this part of assigning values within timedelta "hours= , minutes= , seconds = " . Thanks a bunch .</span>
<span class="comment-copy">@IshuGupta yes you have to use the kwargs because the default constructor takes (in this order) <code>days, seconds, microseconds, milliseconds, minutes, hours, weeks</code>. More info <a href="https://docs.python.org/2/library/datetime.html#datetime.timedelta" rel="nofollow noreferrer">in the docs</a></span>
<span class="comment-copy">Given his comment that "DST boundry scenario is handeled elsewhere in the code", this will do the wrong thing if today is a DST boundary.</span>
<span class="comment-copy">@abarnert edge cases outnumber regular cases in date&amp;time applications. I'll leave it to OP to implement, but this is the working version of his code.</span>
<span class="comment-copy">@abarnert interesting, I had no idea!! Note that this is true also in <a href="https://docs.python.org/3/library/datetime.html#datetime-objects" rel="nofollow noreferrer">Python3x</a></span>
