<div class="post-text" itemprop="text">
<p>Over the past few days I have been attempting to create a script which would 1) extract the XML from a Word document, 2) modify that XML, and 3) use the new XML to create and save a new Word document. With the help of many stackoverflow users I was eventually able to find code that looks very promising. Here it is:</p>
<pre><code>import zipfile
import os
import tempfile
import shutil

def getXml(docxFilename):
    zip = zipfile.ZipFile(open(docxFilename,"rb"))
    xmlString= zip.read("word/document.xml").decode("utf-8")
    return xmlString

def createNewDocx(originalDocx,xmlString,newFilename):
    tmpDir = tempfile.mkdtemp()
    zip = zipfile.ZipFile(open(originalDocx,"rb"))
    zip.extractall(tmpDir)
    with open(os.path.join(tmpDir,"word/document.xml"),"w") as f:
        f.write(xmlString)
    filenames = zip.namelist()
    zipCopyFilename = newFilename
    with zipfile.ZipFile(zipCopyFilename,"w") as docx:
        for filename in filenames:
            docx.write(os.path.join(tmpDir,filename),filename)
    shutil.rmtree(tmpDir)
</code></pre>
<p><code>getXml</code> extracts the XML from <code>docxFilename</code> as a string. <code>createNewDocx</code> takes the original Word document and replaces its XML with <code>xmlString</code>, which is a modified version of the original XML, and saves the resulting Word document as <code>newFilename</code>.</p>
<p>To check that the script works as intended, I first created a test document ("test.docx") and ran <code>createNewDocx("test.docx",getXml("test.docx"),"test2.docx")</code>. If everything worked as intended, this was supposed to create an identical copy of test.docx saved as test2.docx. Indeed, that was the case.</p>
<p>I then made the test document more elaborate and experimented with modifying it. And the script still worked!</p>
<p>I then confidently applied my script to the Word document I was actually interested in modifying: <code>template.docx</code>. I ran <code>createNewDocx("template.docx",getXml("template.docx"),"template2.docx")</code>, expecting that the script would generate an identical copy of template.docx but named template2.docx. Unfortunately, the new Word document was not able to open; apparently there was an illegal character in the XML.</p>
<p>I really don't understand why my code would work for my test document but not for my actual document. I would post template.docx's XML but it contains personal information. One important difference between test.docx and template.docx is that template.docx is written in French, and therefore contains special characters like accents, and also the apostrophes look different. I have no idea if this is what's causing my trouble but I have no other ideas.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you are accidentally changing the encoding on <code>word/document.xml</code> in <code>template2.docx</code>. <code>word/document.xml</code> (from <code>template.docx</code>) is initially encoded as UTF-8 (as is the default encoding for XML documents).</p>
<pre><code>xmlString = zip.read("word/document.xml").decode("utf-8")
</code></pre>
<p>However, when you copy it for <code>template2.docx</code> you are changing the encoding to <em>CP-1252</em>. According to the documentation for <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow"><code>open(file, "w")</code></a>, </p>
<blockquote>
<p>In text mode, if encoding is not specified the encoding used is platform dependent: locale.getpreferredencoding(False) is called to get the current locale encoding.</p>
</blockquote>
<p>You indicated that calling <code>locale.getpreferredencoding(False)</code> gives you <code>cp1252</code> which is the encoding <code>word/document.xml</code> is being written.</p>
<p>Since you did not explicitly add <code>&lt;?xml version="1.0" encoding="cp1252"?&gt;</code> to the beginning of <code>word/document.xml</code>, Word (or any other XML reader) will read it as <em>UTF-8</em> instead of <em>CP-1252</em> which is what gives you the illegal XML character error.</p>
<p>So you want to specify the encoding as <em>UTF-8</em> when writing by using the <code>encoding</code> argument to <code>open()</code>:</p>
<pre><code>with open(os.path.join(tmpDir, "word/document.xml"), "w", encoding="UTF-8") as f:
    f.write(xmlString)
</code></pre>
</div>
<span class="comment-copy">What is the actual error you get when opening template2.docx?</span>
<span class="comment-copy">Illegal xml character. Location: Part: /word/document.xml, Line: 3, Column: 921</span>
<span class="comment-copy">Can you include line 3 from <code>word/document.xml</code> from both <code>template.docx</code> and <code>template2.docx</code>?</span>
<span class="comment-copy">I still suspect this is an encoding issue. What does <code>import locale; print(locale.getpreferredencoding(False))</code> give you?</span>
<span class="comment-copy">@cpburnz Running the code you suggested gives cp1252. How can I find the third line of word/document.xml? If I copy/paste <code>getXml("template.docx")</code> into a text file, will the third line of that file be the same as the third line of the xml file?</span>
<span class="comment-copy">Thanks. Is there a way to change the encoding to UTF-8? I imagine I should do something like <code>open(file, "w", encoding="utf-8)</code>.</span>
<span class="comment-copy">@AlessandroPower That's exactly what it is. I added that to my answer.</span>
<span class="comment-copy">Thanks for the good answer. In my case, I read the docx-xml and modified it, so I had to add the encoding to the read-file-open, too: <code>with open(text_xml, encoding="utf-8") as text</code></span>
