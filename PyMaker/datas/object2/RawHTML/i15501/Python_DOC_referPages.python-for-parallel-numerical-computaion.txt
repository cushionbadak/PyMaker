<div class="post-text" itemprop="text">
<p>i am working on a python application which involves large set of numerical data. the data is segregated into groups in first step and then the group can be independently computed.</p>
<p>i tried using threading.Thread() but soon realised its of no use due to gil.</p>
<pre><code>class vThread(Thread):
    def __init__(self,item):
        Thread.__init__(self)
        self.item = item

    def run(self):
        do_stuff()

vThreads = [] 

for item in items:
    vThreads.append(vThread(item))    
    for x in vThreads:
        x.start()

    for x in vThreads:
        x.join()
</code></pre>
<p>i also tried multiprocessing.Process() but all it does is creates new instances of my parent process and not subprocess (implemantation similar to threads just replace Thread by Process)</p>
<p>is there any other way i can implement parallel processing in my situation?
number of independent computations are in thousands.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Python3 you can use the <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow">concurrent.futures.ProcessPoolExecutor</a> to run several independent tasks in parallel.</p>
<pre><code>from concurrent.futures import ProcessPoolExecutor

with concurrent.futures.ProcessPoolExecutor() as executor:
    for item in items:
        executor.submit(do_stuff, item)
</code></pre>
<p>On Python2 you can use the <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow">multiprocessing.Pool</a> class to achieve same result.</p>
<pre><code>from multiprocessing import Pool

pool = Pool()

for item in items:
    pool.apply_async(do_stuff, (item, ))
</code></pre>
</div>
<span class="comment-copy">There is also <a href="https://software.intel.com/en-us/articles/numpyscipy-with-intel-mkl" rel="nofollow noreferrer">MKL</a>.</span>
<span class="comment-copy">typo? what does vThread(item) return? edit - oh I see, it is different from vThreads. My bad.</span>
<span class="comment-copy">jst edited it. it was wrongly typed. its jst a identifier and nothing else</span>
<span class="comment-copy">I don't understand what "i also tried multiprocessing.Process() but all it does is creates new instances of my parent process and not subprocess" means. It's true that on Windows your subprocesses are newly-created instances rather than forks, but they're still subprocesses. More importantly, what's actually <i>wrong</i> when you use multiprocessing? Not what do you think causes the symptoms, what <i>are</i> the symptoms?</span>
<span class="comment-copy">Also, if you're doing thousands of computations on a large set of data, are you using NumPy? If not, why not? It'll probably give you a 6x or better speedup out of the boxâ€”and many NumPy operations actually release the GIL, meaning sometimes threading lets you parallelize things.</span>
