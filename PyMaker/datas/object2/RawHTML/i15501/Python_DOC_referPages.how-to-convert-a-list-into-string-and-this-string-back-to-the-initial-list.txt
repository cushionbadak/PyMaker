<div class="post-text" itemprop="text">
<p>I have the following issue with Python and I was wondering if there is a direct way to deal with it (using a specific function which I am not aware of, etc.).</p>
<p>I have a list with different types of inputs (integer, string, etc.). I transform the list into a string using the <code>str()</code> function. Now the type of the variable is a string. I do some processing with this string and then I want to transform the string back into the initial list with the initial variable types it had (integer, string, etc.).</p>
<p>Here is an illustration:</p>
<pre><code>             list = [1,'house',3]
             print(type(list))  # gives &lt;class list&gt;
             print(type(list[0])) # gives &lt;type int&gt;
             print(type(list[1])) # gives &lt;type str&gt;

             string = str(list)
             print(type(string)) # gives &lt;type string&gt;
             ... # use this string to process data


            # convert the string into the initial list
             ? ?
</code></pre>
<p>I thought maybe I could in the beginning iterate my list and store the type of its attributes in a list (<code>list_b</code>). Later when I convert the string to a list I will explode the string and convert the strings to the variable types corresponding to the <code>list_b</code>.</p>
<p>I was wondering if there is a more straight forward way than this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval"><code>ast.literal_eval</code></a> to convert a string into a Python object.</p>
<pre><code>from ast import literal_eval

s = "[1, 'house', 3]"
l = literal_eval(s)
print(l)
# [1, 'house', 3]
</code></pre>
<p>Note that, as per the docs linked above, the string can only be formed of strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and <code>None</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems like a good use case for Python's 'json' module, as it can transform lists and dictionaries into JSON (which is a string format) and vice versa.</p>
<p>So for example:</p>
<pre><code>import json
x = [1,2,3]
y = json.dumps(x) # =&gt; '[1, 2, 3]'
z = json.loads(y) # =&gt; [1,2,3]
</code></pre>
<p>This only works with simple data structures (dict, list, tuple, str, int, long, float, boolean, and None) (more information on this <a href="https://docs.python.org/2/library/json.html#encoders-and-decoders" rel="nofollow noreferrer">here</a>)</p>
<p>You can check out <a href="https://stackoverflow.com/questions/3768895/python-how-to-make-a-class-json-serializable">this</a> answer if your list will contain other kinds of objects that you want to make serializable.</p>
</div>
<span class="comment-copy">While converting, do you want the numbers t obe int again or should they stay string?</span>
<span class="comment-copy">Why on earth are you processing the list as a string? As it only contains built-in Python objects you can use <code>ast.literal_eval</code> on it, but it seems likely you could be doing this a completely different way.</span>
<span class="comment-copy">Vincent they have to become strings again.</span>
<span class="comment-copy">jonrsharpe I use a gis library which requires the input in such a form.</span>
<span class="comment-copy">This worked. Thanks.</span>
