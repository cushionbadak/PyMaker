<div class="post-text" itemprop="text">
<p>I found that in Python 3.4 there are few different libraries for multiprocessing/threading: <a href="https://docs.python.org/3/library/multiprocessing.html" rel="noreferrer">multiprocessing</a> vs <a href="https://docs.python.org/3/library/threading.html" rel="noreferrer">threading</a> vs <a href="https://docs.python.org/3/library/asyncio.html" rel="noreferrer">asyncio</a>.</p>
<p>But I don't know which one to use or is the "recommended one". Do they do the same thing, or are different? If so, which one is used for what? I want to write a program that uses multicores in my computer. But I don't know which library I should learn. </p>
</div>
<div class="post-text" itemprop="text">
<p>They are intended for (slightly) different purposes and/or requirements. CPython (a typical, mainline Python implementation) still has the <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="noreferrer">global interpreter lock</a> so a multi-threaded application (a standard way to implement parallel processing nowadays) is suboptimal. That's why <code>multiprocessing</code> <em>may</em> be preferred over <code>threading</code>. But not every problem may be effectively split into [almost independent] pieces, so there may be a need in heavy interprocess communications. That's why <code>multiprocessing</code> may not be preferred over <code>threading</code> in general.</p>
<p><code>asyncio</code> (this technique is available not only in Python, other languages and/or frameworks also have it, e.g. <a href="http://www.boost.org/doc/libs/release/doc/html/boost_asio.html" rel="noreferrer">Boost.ASIO</a>) is a method to effectively handle a lot of I/O operations from many simultaneous sources w/o need of parallel code execution. So it's just a solution (a good one indeed!) for a particular task, not for parallel processing in general.</p>
</div>
<div class="post-text" itemprop="text">
<h1>[Quick Answer]</h1>
<h2>TL;DR</h2>
<hr/>
<h3>Making the Right Choice:</h3>
<blockquote>
<p>We have walked through the most popular forms of concurrency. But the question remains - when should choose which one? It really depends on the use cases. From my experience (and reading), I tend to follow this pseudo code:</p>
</blockquote>
<pre><code>if io_bound:
    if io_very_slow:
        print("Use Asyncio")
    else:
        print("Use Threads")
else:
    print("Multi Processing")
</code></pre>
<blockquote>
<ul>
<li>CPU Bound =&gt; Multi Processing</li>
<li>I/O Bound, Fast I/O, Limited Number of Connections =&gt; Multi Threading</li>
<li>I/O Bound, Slow I/O, Many connections =&gt; Asyncio</li>
</ul>
</blockquote>
<hr/>
<p><a href="http://masnun.rocks/2016/10/06/async-python-the-different-forms-of-concurrency/" rel="noreferrer">Reference</a></p>
<hr/>
<p>[<strong>NOTE</strong>]:</p>
<ul>
<li>If you have a long call method (i.e. a method that contained with a sleep time), the best choice is <code>asyncio</code> or <code>twisted</code> or <code>tornado</code> approach (coroutine methods), that works with a single thread as concurrency. </li>
<li><code>asyncio</code> works on <em>Python3</em>. </li>
<li><a href="https://github.com/MagicStack/uvloop" rel="noreferrer">uvloop</a> is ultra fast <code>asyncio</code> event loop (<a href="https://github.com/MagicStack/uvloop" rel="noreferrer">uvloop</a> makes <code>asyncio</code> 2-4x faster.).</li>
</ul>
</div>
<span class="comment-copy">Maybe <a href="https://whatisjasongoldstein.com/writing/im-too-stupid-for-asyncio/" rel="nofollow noreferrer">Iâ€™m too stupid for AsyncIO</a> helps</span>
<span class="comment-copy">Noting that while all three may not achieve parallelism, they are all capable of doing concurrent (non-blocking) tasks.</span>
