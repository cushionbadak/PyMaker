<div class="post-text" itemprop="text">
<p>Let's say I have a class which represents a directory (simplified example of course):</p>
<pre><code>import os
class Dir:
    def __init__(self, path):
        self.path = os.path.normcase(path)
</code></pre>
<p>To make things easier to implement internally, I am calling <a href="https://docs.python.org/3/library/os.path.html#os.path.normcase" rel="nofollow"><code>os.path.normcase</code></a> on the <code>path</code> argument before I save it into an attribute.  This works great, but it lowercases the path:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.normcase(r'C:\Python34\Lib')
'c:\\python34\\lib'
&gt;&gt;&gt;
</code></pre>
<p>I would like a way to turn the path back into its properly capitalized form of <code>C:\Python34\Lib</code>.  I plan to do this inside the <code>__repr__</code> method so that I can get nice outputs such as:</p>
<pre><code>&gt;&gt;&gt; my_dir
Dir(r'C:\Python34\Lib')
&gt;&gt;&gt;
</code></pre>
<p>when I am in the interactive interpreter. Is there anything like this in the standard library?</p>
<hr/>
<p><strong>Note:</strong> I am not referring to the string that the user supplied as the <code>path</code> argument.  If a user does:</p>
<pre><code>my_dir = Dir('c:\PYTHON34\lib')
</code></pre>
<p>I still want <code>Dir('C:\Python34\Lib')</code> to be printed in the interpreter because that is the proper capitalization.  Basically, I want the outputed paths to be the same as they are in the file explorer.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update:</strong></p>
<p>For those using the newer versions of Python, the new <a href="https://docs.python.org/3.4/library/pathlib.html" rel="nofollow"><code>pathlib</code> module</a> possesses this functionality in the form of <a href="https://docs.python.org/3.4/library/pathlib.html#pathlib.Path.resolve" rel="nofollow"><code>pathlib.Path.resolve</code></a>:</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; Path(r'c:\python34\lib').resolve()
WindowsPath('C:/Python34/Lib')
&gt;&gt;&gt; str(Path(r'c:\python34\lib').resolve())
'C:\\Python34\\Lib'
&gt;&gt;&gt;
</code></pre>
<p>So, you could store the user-supplied path as a <code>Path</code> object:</p>
<pre><code>from pathlib import Path
class Dir:
    def __init__(self, path):
        self.path = Path(path)
</code></pre>
<p>and then implement the <code>__repr__</code> method like so:</p>
<pre><code>def __repr__(self):
    return "Dir('{}')".format(self.path.resolve())
</code></pre>
<p>As an added bonus, we no longer need the <code>os.path.normcase</code> function since <code>Path</code> objects support case-insensitive comparisons directly.</p>
<p>One downside to <code>pathlib</code> though is that it is only available in Python 3.4 (the currently newest version).  So, those using earlier versions will need to either get a backport to their version or use the <code>os.path._getfinalpathname</code> function as demonstrated below.</p>
<hr/>
<p>While I was digging through the standard library, I came across an undocumented function in the <code>os.path</code> module named <code>_getfinalpathname</code>:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path._getfinalpathname(r'c:\python34\lib')
'\\\\?\\C:\\Python34\\Lib'
&gt;&gt;&gt;
</code></pre>
<p>Using <a href="https://docs.python.org/3/library/stdtypes.html#str.lstrip" rel="nofollow"><code>str.lstrip</code></a>, I can get the output I need:</p>
<pre><code>&gt;&gt;&gt; os.path._getfinalpathname(r'c:\python34\lib').lstrip(r'\?')
'C:\\Python34\\Lib'
&gt;&gt;&gt;
</code></pre>
<p>The only downside to this approach is that the function is undocumented and somewhat hidden.  But it suits my needs for now (of course, I'd love to hear a better approach if you know of one :)</p>
</div>
<span class="comment-copy">Just curious, why do you care about the capitalization?</span>
<span class="comment-copy">@OozeMeister - It's just for aesthetic reasons. :)  If I ever print my <code>Dir</code> objects or use them in strings, I'd like to have readable paths.  It also seems more user-friendly to have the paths match what they are in explorer instead of being all lowercase.</span>
<span class="comment-copy">@iCodez: why not then store the original path and normalise only when you need to do comparisons?</span>
<span class="comment-copy">perhaps you'd like to use the standard library <code>pathlib</code> module, which as i recall handles case-insensitive comparison for you?</span>
<span class="comment-copy">@MartijnPieters - I thought about that, but I am only really using the proper path in <code>__str__</code> and <code>__repr__</code> where as I'm using the normalized path in a lot of places.  So, I didn't want to call <code>normcase</code> in each method that uses it.  Also, I'd like my <code>Dir</code> class to accept paths case-instentively but to output them only in a proper, readable form.</span>
<span class="comment-copy">i was thinking more that you might want to use <code>pathlib.Path</code> <i>instead of</i> writing a totally custom class  :)  also there's a backlib on pypi called <code>pathlib</code> that works on 2.6+</span>
