<div class="post-text" itemprop="text">
<p>I'm coming from the Java world and reading Bruce Eckels' <em>Python 3 Patterns, Recipes and Idioms</em>. </p>
<p>While reading about classes, it goes on to say that in Python there is no need to declare instance variables. You just use them in the constructor, and boom, they are there. </p>
<p>So for example:</p>
<pre><code>class Simple:
    def __init__(self, s):
        print("inside the simple constructor")
        self.s = s

    def show(self):
        print(self.s)

    def showMsg(self, msg):
        print(msg + ':', self.show())
</code></pre>
<p>If thatâ€™s true, then any object of class <code>Simple</code> can just change the value of variable <code>s</code> outside of the class. </p>
<p>For example: </p>
<pre><code>if __name__ == "__main__":
    x = Simple("constructor argument")
    x.s = "test15" # this changes the value
    x.show()
    x.showMsg("A message")
</code></pre>
<p>In Java, we have been taught about public/private/protected variables.  Those keywords make sense because at times you want variables in a class to which no one outside the class has access to. </p>
<p>Why is that not required in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's cultural.  In Python, you don't write to other classes' instance or class variables.  In Java, nothing prevents you from doing the same if you <em>really</em> want to - after all, you can always edit the source of the class itself to achieve the same effect. Python drops that pretence of security and encourages programmers to be responsible. In practice, this works very nicely.</p>
<p>If you want to emulate private variables for some reason, you can always use the <code>__</code> prefix from <a href="http://www.python.org/dev/peps/pep-0008/">PEP 8</a>. Python mangles the names of variables like <code>__foo</code> so that they're not easily visible to code outside the class that contains them (although you <em>can</em> get around it if you're determined enough, just like you <em>can</em> get around Java's protections if you work at it).</p>
<p>By the same convention, the <code>_</code> prefix means <strong>stay away even if you're not technically prevented from doing so</strong>. You don't play around with another class's variables that look like <code>__foo</code> or <code>_bar</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Private variables in python is more or less a hack: the interpreter intentionally renames the variable.</p>
<pre><code>class A:
    def __init__(self):
        self.__var = 123
    def printVar(self):
        print self.__var
</code></pre>
<p>Now, if you try to access <code>__var</code> outside the class definition, it will fail:</p>
<pre><code> &gt;&gt;&gt;x = A()
 &gt;&gt;&gt;x.__var # this will return error: "A has no attribute __var"

 &gt;&gt;&gt;x.printVar() # this gives back 123
</code></pre>
<p>But you can easily get away with this:</p>
<pre><code> &gt;&gt;&gt;x.__dict__ # this will show everything that is contained in object x
               # which in this case is something like {'_A__var' : 123}

 &gt;&gt;&gt;x._A__var = 456 # you now know the masked name of private variables
 &gt;&gt;&gt;x.printVar() # this gives back 456
</code></pre>
<p>You probably know that methods in OOP are invoked like this: <code>x.printVar() =&gt; A.printVar(x)</code>, if <code>A.printVar()</code> can access some field in <code>x</code>, this field can also be accessed <strong>outside</strong> <code>A.printVar()</code>...after all, functions are created for reusability, there is no special power given to the statements inside.</p>
<p>The game is different when there is a compiler involved (<strong>privacy is a compiler level concept</strong>). It know about class definition with access control modifiers so it can error out if the rules are not being followed at compile time</p>
</div>
<div class="post-text" itemprop="text">
<p>As correctly mentioned by many of the comments above, let's not forget the main goal of Access Modifiers: To help users of code understand what is supposed to change and what is supposed not to. When you see a private field you don't mess around with it. So it's mostly syntactic sugar which is easily achieved in Python by the _ and __.</p>
</div>
<div class="post-text" itemprop="text">
<p>"In java, we have been taught about public/private/protected variables"</p>
<p>"Why is that not required in python?"</p>
<p>For the same reason, it's not <em>required</em> in Java.</p>
<p>You're free to use -- or not use <code>private</code> and <code>protected</code>.</p>
<p>As a Python and Java programmer, I've found that <code>private</code> and <code>protected</code> are very, very important design concepts.  But as a practical matter, in tens of thousands of lines of Java and Python, I've never <em>actually</em> used <code>private</code> or <code>protected</code>.</p>
<p>Why not?</p>
<p>Here's my question "protected from whom?"  </p>
<p>Other programmers on my team?  They have the source.  What does protected mean when they can change it?</p>
<p>Other programmers on other teams?  They work for the same company.  They can -- with a phone call -- get the source.</p>
<p>Clients?  It's work-for-hire programming (generally).  The clients (generally) own the code.</p>
<p>So, who -- precisely -- am I protecting it from?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a variation of private variables in the underscore convention.</p>
<pre><code>In [5]: class Test(object):
   ...:     def __private_method(self):
   ...:         return "Boo"
   ...:     def public_method(self):
   ...:         return self.__private_method()
   ...:     

In [6]: x = Test()

In [7]: x.public_method()
Out[7]: 'Boo'

In [8]: x.__private_method()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-8-fa17ce05d8bc&gt; in &lt;module&gt;()
----&gt; 1 x.__private_method()

AttributeError: 'Test' object has no attribute '__private_method'
</code></pre>
<p>There are some subtle differences, but for the sake of programming pattern ideological purity, its good enough.</p>
<p>There are examples out there of @private decorators that more closely implement the concept, but YMMV. Arguably one could also write a class defintion that uses meta</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has limited support for private identifiers, through a feature that automatically prepends the class name to any identifiers starting with two underscores.  This is transparent to the programmer, for the most part, but the net effect is that any variables named this way can be used as private variables.</p>
<p>See <a href="http://docs.python.org/tutorial/classes.html#private-variables" rel="noreferrer">here</a> for more on that.</p>
<p>In general, Python's implementation of object orientation is a bit primitive compared to other languages.  But I enjoy this, actually.  It's a very conceptually simple implementation and fits well with the dynamic style of the language.</p>
</div>
<div class="post-text" itemprop="text">
<p>The only time I ever use private variables is when I need to do other things when writing to or reading from the variable and as such I need to force the use of a setter and/or getter.</p>
<p>Again this goes to culture, as already stated. I've been working on projects where reading and writing other classes variables was free-for-all. When one implementation became deprecated it took a lot longer to identify all code paths that used that function. When use of setters and getters was forced, a debug statement could easily be written to identify that the deprecated method had been called and the code path that calls it.</p>
<p>When you are on a project where anyone can write an extension, notifying users about deprecated methods that are to disappear in a few releases hence is vital to keep module breakage at a minimum upon upgrades.</p>
<p>So my answer is; if you and your colleagues maintain a simple code set then protecting class variables is not always necessary. If you are writing an extensible system then it becomes imperative when changes to the core is made that needs to be caught by all extensions using the code. </p>
</div>
<div class="post-text" itemprop="text">
<p>private and protected concepts are very important. But python - just a tool for prototyping and rapid development with restricted resources available for development, that is why some of protection levels are not so strict followed in python. You can use "__" in class member, it works properly, but looks not good enough - each access to such field contains these characters. </p>
<p>Also, you can noticed that python OOP concept is not perfect, smaltalk or ruby much closer to pure OOP concept. Even C# or Java are closer. </p>
<p>Python is very good tool. But it is simplified OOP language. Syntactically and conceptually simplified. The main goal of python existence is to bring to developers possibility to write easy readable code with high abstraction level in a very fast manner.  </p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned earlier, you can indicate that a variable or method is private by prefixing it with an underscore. If you don't feel like this is enough, you can always use the <code>property</code> decorator. Here's an example:</p>
<pre><code>class Foo:

    def __init__(self, bar):
        self._bar = bar

    @property
    def bar(self):
        """Getter for '_bar'."""
        return self._bar
</code></pre>
<p>This way, someone or something that references <code>bar</code> is actually referencing the return value of the <code>bar</code> function rather than the variable itself, and therefore it can be accessed but not changed. However, if someone really wanted to, they could simply use <code>_bar</code> and assign a new value to it. There is no surefire way to prevent someone from accessing variables and methods that you wish to hide, as has been said repeatedly. However, using <code>property</code> is the clearest message you can send that a variable is not to be edited. <code>property</code> can also be used for more complex getter/setter/deleter access paths, as explained here: <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#property</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Sorry guys for "resurrecting" the thread, but, I hope this will help someone:</p>
<p>In Python3 if you just want to "encapsulate" the class attributes, like in Java, you can just do the same thing like this:</p>
<pre><code>class Simple:
    def __init__(self, str):
        print("inside the simple constructor")
        self.__s = str

    def show(self):
        print(self.__s)

    def showMsg(self, msg):
        print(msg + ':', self.show())
</code></pre>
<p>To instantiate this do:</p>
<pre><code>ss = Simple("lol")
ss.show()
</code></pre>
<p>Note that: <code>print(ss.__s)</code> will throw an error.</p>
<p>In practice, Python3 will obfuscate the global attribute name. Turning this like a "private" attribute, like in Java. The attribute's name is still global, but in an inaccessible way, like a private attribute in other languages. </p>
<p>But don't be afraid of it. It doesn't matter. It does the job too.  ;)</p>
</div>
<div class="post-text" itemprop="text">
<p>Python does not have any private variables like C++ or Java does. You could access any member variable at any time if wanted, too. However, you don't need private variables in Python, because in Python it is not bad to expose your classes member variables. If you have the need to encapsulate a member variable, you can do this by using "@property" later on without breaking existing client code.</p>
<p>In python the single underscore "_" is used to indicate, that a method or variable is not considered as part of the public api of a class and that this part of the api could change between different versions. You can use these methods/variables, but your code could break, if you use a newer version of this class.</p>
<p>The double underscore "__"  does not mean a "private variable". You use it to define variables which are "class local" and which can not be easily overidden by subclasses. It mangles the variables name.</p>
<p>For example:</p>
<pre><code>class A(object):
    def __init__(self):
        self.__foobar = None # will be automatically mangled to self._A__foobar

class B(A):
    def __init__(self):
        self.__foobar = 1 # will be automatically mangled to self._B__foobar
</code></pre>
<p>self.__foobar's name is automatically mangled to self._A__foobar in class A. In class B it is mangled to self._B__foobar. So every subclass can define its own variable __foobar without overriding its parents variable(s). But nothing prevents you from accessing variables beginning with double underscores. However, name-mangling prevents you from calling this variables /methods incidentally.  </p>
<p>I strongly recommend to watch Raymond Hettingers talk "Pythons class development toolkit" from Pycon 2013 (should be available on Youtube), which gives a good example why and how you should use @property and "__"-instance variables.</p>
</div>
<span class="comment-copy">You meant <i>instance</i> variables, not <i>class</i> variables, right?</span>
<span class="comment-copy">You should check properties: <a href="http://docs.python.org/library/functions.html#property" rel="nofollow noreferrer">docs.python.org/library/functions.html#property</a>. Just use the getter and your variable will be protected.</span>
<span class="comment-copy">why do you use <code>self1</code>, btw?</span>
<span class="comment-copy">Again, <b>why do you use <code>self1</code></b>?</span>
<span class="comment-copy">@SumukhBarve the article is private. How ironic.</span>
<span class="comment-copy">That makes sense. However, I dont think there is any way in java to access private variables outside the class (except actually changing the source of the class ofcourse). Is there?</span>
<span class="comment-copy">@David - the presumption is that we're all adults here. Don't break things that you can't fix! In this case, that means that you shouldn't mess around with those private members like __foo or _bar. Again, in practice, that's just not done without an extremely good reason. It might not be theoretically pure, but I've never once seen a real-world situation where it was a problem.</span>
<span class="comment-copy">I tend to prefer the python way, but I don't think the java way is as pointless as you make out.  Declaring something private quickly tells someone reading the code something very useful: this field is only ever modified inside this class.</span>
<span class="comment-copy">@Omnipresent, you can using reflection.</span>
<span class="comment-copy">Let me get this straight, so Python does not implement public nor private attributes because "its a pretence of security and encourages programmers to be responsible", however the community encourages the use of "_" to denote private variables and methods? Maybe python should definetively have public and private no? Their main purpose is to tell you what API you should use to interact with a class. They serve as a documentation telling you to use these methods and not use those. They are not a "pretence of security", they are API documentation, which can even be used by the IDE to guide you!</span>
<span class="comment-copy">in short, this is not encapsulation</span>
<span class="comment-copy">I wonder if PHP has something similar with its goofy private variables - since private variables don't really make sense in interpreted language - I mean what optimization can it do knowing x variable is private, if it is not compiled?</span>
<span class="comment-copy">How can we randomize the pattern of private variables?</span>
<span class="comment-copy">@crisron same question</span>
<span class="comment-copy">@watashiSHUN "in short, this is not encapsulation" =&gt; yes it is. Encapsulation is about only using the public API so client code is protected from implementation changes. Naming conventions are a perfectly valid way to tell what is API and what is implementation, and the point is that it just works.</span>
<span class="comment-copy">I think this is as important a point as any. When debugging code (I know, I'm a weakling to introduce bugs), know which classes can change a member variable simplifies the debugging process. At least, if the variable is protected by some scope. A similar concept is const functions in C++. I <i>know</i> that member variables weren't changed in there and so I don't even look at that method as the potential cause of a bad variable setting. Although it can make subsequent development of class extensions/adding features, limiting the visibility of code makes it easier to debug.</span>
<span class="comment-copy">-1: I agree with Porculus. It's not about forbidding access or hiding something, it's about <i>implicit</i> API documentation. Developers as well as compilers/interpreter/code-checker easily see which members are recommended to be used and which ones shouldn't get touched (or at least with care). In most cases it would be a horrible mess if all members of a class or module were public. Consider the distinction of private/protected/public members as a service, saying: "Hey, these members are important while those are used internally and probably not useful for you."</span>
<span class="comment-copy">@S.Lott: I agree that API docs have higher priority and often are the only way to communicate intended uses of an API. But sometimes member names and visibility (in terms of private/public) sufficiently speak on their own. Also, I see your point that the idea of implicit documentation does not work well in editors w/o API inspection but it is really helpful in IDE's with code completion. Assuming you've read the API docs already some time ago it helps you to remember how to use a class. Things wouldn't work that smart if there were no distinction between private and public members.</span>
<span class="comment-copy">Late to the discussion, but everything Porculus and Oben are requesting here is handled perfectly adequately by the "prefix it with an underscore" convention (and without the harm that compiler enforcement of that convention can cause)</span>
<span class="comment-copy">@S.Lott I'm not a python guy, so I won't comment from that perspective. However as a java developer this is truly horrifying advice. -1</span>
<span class="comment-copy">Wow. You miss the point completely, you give a very bad piece of advice, you insult anyone who disagrees with you on this point, but you still get badges and more than 1000 reputation points for this "answer".</span>
<span class="comment-copy">I realize this is pretty late to the party but this link shows up on google when googling the issue. This doesn't tell the whole story. <code>__x</code> as a variable inside class <code>A</code> is actually rewritten by the compiler to <code>_A__x</code>, it's still not fully private and can still be accessed.</span>
<span class="comment-copy">Of course, if I see a variable named <code>_A__x</code>, I'm not going to touch it. It could be contagious. I'll run the hell away from it.</span>
<span class="comment-copy">Mateen has the right idea. _A__x can be interpreted as "here be dragons"</span>
<span class="comment-copy">The rearson Private and Protected are important is that in statically compiled languages the compiler can create diirect calls to the private method, but must rely on a lookup table for public methods. Thiis simply isnt an issue with dynamic languages. Finally languages like C++ there are implications for inheritance and method resolution.    Python and Ruby have very similar implementatiions of OO, so the comparison is meaningless.  Smalltalk actually has no notion of public/private messages. Your free to add private as a category, but its purely advisory.</span>
<span class="comment-copy">To further my assertion. Frorm a codiing hygiene point of view, yes they are important for encapsulation, but its not <i>necessary</i> for it, and so the the @private (etc) decorators are more advisory than anything, but as private/public adds nothing useful to optimization in a non static language, its not implemented at a deep level like it would in a compiled language like java or c</span>
<span class="comment-copy">Django also appreciate this.</span>
<span class="comment-copy">this has existed since Python 1.5.2 IIRC, and it still doesn't prevent accessing the attribute through its mangled name.</span>
