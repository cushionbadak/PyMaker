<div class="post-text" itemprop="text">
<p>I have two questions on exception handling.</p>
<p>Q1) I am slightly unsure as to when exactly the operations within <code>else</code> will be carried out in exception handling. I am unsure when the <code>else</code> block would be executed, which doesn't occur in the code below:</p>
<pre><code>def attempt_float(SecPrice,diffprice):
    try:
        return float(SecPrice)
    except:
        return diffprice
    else: 
        print "Did we succeed?"

print attempt_float('7','3') 
</code></pre>
<p>Q2) When I run the code below:</p>
<pre><code>def attempt_float(SecPrice,diffprice):
    try:
        return float(SecPrice)
    except:
        return diffprice
    else: 
        print "Did we succeed?"
    finally:
        print "Yasdsdsa"

print attempt_float('7','3')
</code></pre>
<p>I am unclear as to why the output is:</p>
<pre><code>Yasdsdsa
7.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When Python encounters a return-statement inside a function, it immediately returns (exits) from the function.  This means that when you do:</p>
<pre><code>try:
    return float(SecPrice)
...
else: 
    print "Did we succeed?"
</code></pre>
<p><code>"Did we succeed?"</code> will never be printed because you returned in the <code>try:</code> block, thereby skipping the execution of the <code>else:</code> block.</p>
<hr/>
<p>Your second code piece is different however because you used a <code>finally:</code> block.  Code inside a <code>finally:</code> block is <em>always</em> executed, no matter if an exception is raised, you return from a function, etc.  This is to ensure that any cleanup code which is important (i.e. frees resources) is always executed and not accidentally skipped.</p>
<p>You can read about this behavior in the docs both <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-return_stmt" rel="nofollow">here</a>:</p>
<blockquote>
<p>When <code>return</code> passes control out of a <code>try</code> statement with a <code>finally</code>
  clause, that <code>finally</code> clause is executed before really leaving the
  function.</p>
</blockquote>
<p>as well as <a href="https://docs.python.org/3/reference/compound_stmts.html#finally" rel="nofollow">here</a>:</p>
<blockquote>
<p>When a <code>return</code>, <code>break</code> or <code>continue</code> statement is executed in the <code>try</code>
  suite of a <code>try...finally</code> statement, the <code>finally</code> clause is also
  executed "on the way out."</p>
</blockquote>
<hr/>
<p>As for why the output is:</p>
<pre><code>Yasdsdsa
7.0
</code></pre>
<p>and not:</p>
<pre><code>7.0
Yasdsdsa
</code></pre>
<p>the answer is that the <code>print "Yasdsdsa"</code> line is executed in the <code>finally:</code> block before Python is able to print <code>7.0</code> (the return value of <code>attempt_float</code>). Put simply, the execution path for Python is:</p>
<ol>
<li>Return <code>float(SecPrice)</code>.</li>
<li>Run the <code>finally:</code> block.</li>
<li>Resume normal execution with the <code>print attempt_float('7','3')</code> line and print <code>7.0</code>.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>In the first case, you return within <code>try</code>, so you never hit the <code>else</code> statement.</p>
<p>In the second one, the <code>finally</code> is executed regardless of how <code>try</code> is exited.  From the <a href="https://docs.python.org/2/tutorial/errors.html" rel="nofollow">python docs</a>:</p>
<p>A finally clause is always executed before leaving the try statement, whether an exception has occurred or not. (...) The finally clause is also executed “on the way out” when any other clause of the try statement is left via a break, continue or return statement.</p>
<p>Here is a good example of the order of execution:</p>
<pre><code>&gt;&gt;&gt; def divide(x, y):
...     try:
...         result = x / y
...     except ZeroDivisionError:
...         print "division by zero!"
...     else:
...         print "result is", result
...     finally:
...         print "executing finally clause"
...
&gt;&gt;&gt; divide(2, 1)
result is 2
executing finally clause
&gt;&gt;&gt; divide(2, 0)
division by zero!
executing finally clause
&gt;&gt;&gt; divide("2", "1")
executing finally clause
</code></pre>
<p>Be sure to read the docs on exceptions!</p>
</div>
<span class="comment-copy">You return in the <code>try</code>, so you never hit <code>else</code></span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/855759/python-try-else">Python try-else</a></span>
<span class="comment-copy">@nchen24 Thank You</span>
<span class="comment-copy">Thanks. I'm mainly confused as to why the output is in this order: <code>Yasdsdsa 7.0</code> rather than the other way around.</span>
<span class="comment-copy">Thanks. If the <code>finally</code> only executes "on the way out" why is the output in this order: <code>Yasdsdsa 7.0</code> rather than the other way around.</span>
<span class="comment-copy">Because you are printing the returned value from <code>attempt_float</code>, but before it returns, the <code>finally</code> block is executed.</span>
