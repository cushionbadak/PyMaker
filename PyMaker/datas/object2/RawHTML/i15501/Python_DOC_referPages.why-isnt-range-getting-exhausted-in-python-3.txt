<div class="post-text" itemprop="text">
<p>If I do the following:</p>
<pre><code>a = range(9)

for i in a:
    print(i)

# Must be exhausted by now
for i in a:
    print(i)

# It starts over!
</code></pre>
<p>Python's generators, after raising <code>StopIteration</code>, normally stops looping.  How then is range producing this pattern - it restarts after every iteration.</p>
</div>
<div class="post-text" itemprop="text">
<p>As has been stated by others, <code>range</code> is not a generator, but sequence type (like list) that makes it an <code>iterable</code> which is NOT the same as an <code>iterator</code>.</p>
<p>The differences between <code>iterable</code>, <code>iterator</code> and <code>generator</code> are subtle (at least for someone new to python).</p>
<ul>
<li>An <code>iterator</code> provides a <code>__next__</code> method and can be exhausted, thus raising <code>StopIteration</code>.</li>
<li>An <code>iterable</code> is a object that provides an <code>iterator</code> over its content. Whenever its <code>__iter__</code> method is called it returns a NEW iterator object, thus you can (indirectly) iterate over it multiple times.</li>
<li><p>A <code>generator</code> is a function that returns an <code>iterator</code>, which of cause can be exhausted.</p></li>
<li><p>Also good to know is, that the <code>for</code> loop automaticly queries the <code>iterator</code> of any <code>iterable</code>. Which is why you can write <code>for x in iterable: pass</code> instead of <code>for x in iterable.__iter__(): pass</code> or <code>for x in iter(iterable): pass</code>.</p></li>
</ul>
<p>All of that IS in the documentation, but IMHO somewhat difficult to find. The best starting point is probably the <a href="https://docs.python.org/3.4/glossary.html#term-iterable" rel="noreferrer">Glossary</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="nofollow"><code>range</code></a> is a kind of immutable sequence type. Iterating it does not exhaust it.</p>
<pre><code>&gt;&gt;&gt; a = iter(range(9))  # explicitly convert to iterator
&gt;&gt;&gt;
&gt;&gt;&gt; for i in a:
...     print(i)
...
0
1
2
3
4
5
6
7
8
&gt;&gt;&gt; for i in a:
...     print(i)
...
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>range</code> is not a generator, it's a <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="nofollow">sequence type</a>, like <a href="https://docs.python.org/3/library/stdtypes.html#typesseq" rel="nofollow">strings or lists</a>.</p>
<p>So </p>
<pre><code>for i in range(4):
</code></pre>
<p>is no different than </p>
<pre><code>for i in "abcd":
</code></pre>
</div>
<span class="comment-copy">Have you read <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">the documentation</a>?</span>
<span class="comment-copy">In short: the  <code>for i in a</code> construct is generating a separate iterable each time...</span>
<span class="comment-copy">What made you think <code>range()</code> is an iterator? (Generators are a specialised form of iterators, it is iterators that raise <code>StopIteration</code>).</span>
<span class="comment-copy">Please excuse my not knowing the difference between the two. Part of the reason why I thought that way was because <code>range</code> being instantiated, like <code>a=range(9)</code>, is very much similar to how a generator is instantiated in order to get an iterator. My mistake.</span>
<span class="comment-copy">@jonrsharpe I did, but couldn't find what I was looking for. Perhaps I should <i>learn how to read the docs</i> first!</span>
<span class="comment-copy">Upvoting for explicitly mentioning the difference between iterator and iterable.</span>
