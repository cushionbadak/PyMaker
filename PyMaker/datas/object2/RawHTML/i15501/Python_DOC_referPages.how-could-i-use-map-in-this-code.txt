<div class="post-text" itemprop="text">
<p>I have a string list</p>
<pre><code>[str1, str2, str3.....]
</code></pre>
<p>and I also have a <code>def</code> to check the format of the strings, something like:</p>
<pre><code>def CheckIP(strN):
    if(formatCorrect(strN)):
        return True
    return False
</code></pre>
<p>Now I want to check every string in list, and of course I can use for to check one by one. But could I use <code>map()</code> to make code more readable...?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can map your list to your function and then use <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow"><code>all</code></a> to check if it returns <code>True</code> for every item:</p>
<pre><code>if all(map(CheckIP, list_of_strings)):
    # All strings are good
</code></pre>
<p>Actually, it would be cleaner to just get rid of the <code>CheckIP</code> function and use <code>formatCorrect</code> directly:</p>
<pre><code>if all(map(formatCorrect, list_of_strings)):
    # All strings are good
</code></pre>
<p>Also, as an added bonus, <code>all</code> uses lazy-evaluation.  Meaning, it only checks as many items as are necessary before returning a result.</p>
<hr/>
<p>Note however that a more common approach would be to use a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression" rel="nofollow">generator expression</a> instead of <code>map</code>:</p>
<pre><code>if all(formatCorrect(x) for x in list_of_strings):
</code></pre>
<p>In my opinion, generator expressions are always better than <code>map</code> because:</p>
<ol>
<li><p>They are slightly more readable.</p></li>
<li><p>They are just as fast if not faster than using <code>map</code>.  Also, in Python 2.x, <code>map</code> creates a list object that is often unnecessary (wastes memory).  Only in Python 3.x does <code>map</code> use lazy-computation like a generator expression.</p></li>
<li><p>They are more powerful.  In addition to just mapping items to a function, generator expressions allow you to perform operations on each item as they are produced.  For example:</p>
<pre><code>sum(x * 2 for x in (1, 2, 3))
</code></pre></li>
<li><p>They are preferred by most Python programmers.  Keeping with convention is important when programming because it eases maintenance and makes your code more understandable.</p></li>
<li><p>There is talk of removing functions like <code>map</code>, <code>filter</code>, etc. from a future version of the language. Though this is not set in stone, it has come up many times in the Python community.</p></li>
</ol>
<p>Of course, if you are a fan of functional programming, there isn't much chance you'll agree to points one and four. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>An example, how you could do:</p>
<pre><code>in_str = ['str1', 'str2', 'str3', 'not']
in_str2 = ['str1', 'str2', 'str3']


def CheckIP(strN):
    # different than yours, just to show example.
    if 'str' in strN:       
        return True
    else:
        return False

print(all(map(CheckIP, in_str)))   # gives false
print(all(map(CheckIP, in_str2)))  # gives true 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>L = [str1, str2, str3.....]
answer = list(map(CheckIP, L)) 
</code></pre>
<p><code>answer</code> is a list of booleans such that <code>answer[i]</code> is <code>CheckIP(L[i])</code>. If you want to further check if all of those values are True, you could use <code>all</code>:</p>
<pre><code>all(answer)
</code></pre>
<p>This returns <code>True</code> if and only if all the values in <code>answer</code> are <code>True</code>. However, you may do this without listifying:</p>
<pre><code>all(map(CheckIP, L)), as, in python3, `map` returns an iterator, not a list. This way, you don't waste space turning everything into a list. You also save on time, as the first `False` value makes `all` return `False`, stopping `map` from computing any remaining values
</code></pre>
</div>
<span class="comment-copy">also a quick note - in your <code>CheckIP</code> function, you don't really need the <code>if</code> statement, since you are just returning <code>True</code> if <code>formatCorrect</code> is True, and <code>False</code> if it is false. So you can just do <code>return formatCorrect(strN)</code></span>
<span class="comment-copy">Depending on the task consider using <code>filter()</code></span>
<span class="comment-copy">Thanks G. Meyer, good suggestion!</span>
<span class="comment-copy">What is best and why?</span>
<span class="comment-copy">I think you already were saying this but to be more detailed - <code>all</code> only goes until it finds a value of <code>False</code>, so if one of the first few is the bad one, it will only have to iterate a couple times before finding it and will take much less time.</span>
<span class="comment-copy">@G.Meyer - You're right, I should have been more clear on that.  It is a very a important point of using <code>all</code>.  Updated.</span>
