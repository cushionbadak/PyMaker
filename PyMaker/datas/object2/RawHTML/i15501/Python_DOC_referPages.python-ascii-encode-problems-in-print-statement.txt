<div class="post-text" itemprop="text">
<p>System: python 3.4.2 on linux.</p>
<p>I'm woring on a django application (irrelevant), and I encountered a problem that it throws</p>
<pre><code>UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)
</code></pre>
<p>when <em>print</em> is called (!). After quite a bit of digging, I discovered I should check</p>
<pre><code>&gt;&gt;&gt; sys.getdefaultencoding()
'utf-8'
</code></pre>
<p>but it was as expected, utf8. I noticed also that <code>os.path.exists</code> throws the same exception when used with a unicode string. So I checked</p>
<pre><code>&gt;&gt;&gt; sys.getfilesystemencoding()
'ascii'
</code></pre>
<p>When I used  <code>LANG=en_US.UTF-8</code> the issue disappeared. I understand now why <code>os.path.exists</code> had problems with that. But I have absolutely no clue why <code>print</code> statement is affected by the <em>filesystem</em> setting. Is there a third setting I'm missing? Or does it just assume <code>LANG</code> environment is to be trusted for everything?</p>
<p>Also... I don't get the reasoning here. <code>LANG</code> does not tell what encoding is supported by the filenames. It has nothing to do with that. It's set separately for the current environment, not for the filesystem. Why is python using this setting for filesystem filenames? It makes applications very fragile, as all the file operations just break when run in an environment where <code>LANG</code> is not set or set to <code>C</code> (not uncommon, especially when a web-app is run as root or a new user created specifically for the daemon).</p>
<p>Test code (no actual unicode input needed to avoid terminal encoding pitfalls):</p>
<pre><code>x=b'\xc4\x8c\xc5\xbd'
y=x.decode('utf-8')
print(y)
</code></pre>
<p>Question:</p>
<ul>
<li>is there a good and accepted way of making the application robust to the <code>LANG</code> setting?</li>
<li>is there any real-world reason to guess the filesystem capabilities from environment instead of the filesystem driver?</li>
<li>why is <code>print</code> affected?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><code>LANG</code> is used to determine your <em>locale</em>; if you don't set specific <code>LC_</code> variables the <code>LANG</code> variable is used as the default.</p>
<p>The filesystem encoding is determined by the <a href="http://manpages.debian.org/cgi-bin/man.cgi?query=locale&amp;sektion=7&amp;manpath=Debian+7.0+wheezy" rel="nofollow"><code>LC_CTYPE</code> variable</a>, but if you haven't set that variable specifically, the <code>LANG</code> environment variable is used instead.</p>
<p>Printing uses <code>sys.stdout</code>, a textfile configured with the codec your terminal uses. Your terminal settings is also locale specific; your <code>LANG</code> variable should really reflect what locale your terminal is set to. If that is UTF-8, you need to make sure your <code>LANG</code> variable reflects that. <code>sys.stdout</code> uses <a href="https://docs.python.org/3/library/locale.html#locale.getpreferredencoding" rel="nofollow"><code>locale.getpreferredencoding(False)</code></a> (like all text streams opened without an explicit encoding set) and on POSIX systems that'll use <code>LC_CTYPE</code> too.</p>
</div>
<span class="comment-copy">What is <code>sys.stdout.encoding</code> set to?</span>
<span class="comment-copy">@MartijnPieters oh, that's part of the answer I was looking for. It was 'ANSI_X3.4-1968'. Terrifying. However it stil begs the question why is filename encoding guessed from <code>LANG</code>.</span>
<span class="comment-copy"><code>LANG</code> dictates everything in a POSIX locale: <a href="http://unix.stackexchange.com/q/145580">Debian thinks my file system is encoded as ISO-8859-1</a></span>
