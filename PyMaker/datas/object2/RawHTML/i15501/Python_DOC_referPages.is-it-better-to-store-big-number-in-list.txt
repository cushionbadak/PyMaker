<div class="post-text" itemprop="text">
<p>Is it memory efficient to store big number in list? Why does the following happens?</p>
<pre><code>&gt;&gt;&gt; A = 100**100
&gt;&gt;&gt; sys.getsizeof(A)
102
&gt;&gt;&gt; B = [100**100]
&gt;&gt;&gt; sys.getsizeof(B)
40
</code></pre>
<p>Why size of A and B are not equal?</p>
<pre><code>&gt;&gt;&gt; C = [1,100**100]
&gt;&gt;&gt; sys.getsizeof(C)
44
&gt;&gt;&gt; D = [1000**1000, 100**100]
&gt;&gt;&gt; sys.getsizeof(D)
44
</code></pre>
<p>Why size of C and D are equal?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.getsizeof()</code> returns the <em>shallow</em> size, i.e. the size of the list object itself but not of the objects it contains.</p>
<p>From the <a href="https://docs.python.org/3/library/sys.html#sys.getsizeof">documentation</a>:</p>
<blockquote>
<p>Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to.</p>
</blockquote>
<p>If you'd like to compute the <em>deep</em> size, it might be worth giving <a href="https://pythonhosted.org/Pympler/">Pympler</a> a try:</p>
<pre><code>&gt;&gt;&gt; from pympler.asizeof import asizeof
&gt;&gt;&gt; A = 100**100
&gt;&gt;&gt; asizeof(A)
120
&gt;&gt;&gt; B = [100**100]
&gt;&gt;&gt; asizeof(B)
200
</code></pre>
<p>Thus, on my computer, placing the long inside a list adds 80 bytes of overhead.</p>
</div>
<div class="post-text" itemprop="text">
<p>The size of A and B are not equal because you've put B into a list.  In this case, A is a long and B is a list type.  C and D are the same size because their numerical contents are the same width inside the list container.</p>
<p>Further, <code>sys.getsizeof()</code> <a href="https://docs.python.org/3/library/sys.html#sys.getsizeof">returns the size of the topmost object</a> using the <code>__sizeof__</code> method, not the size of the items referenced inside of that object.  </p>
</div>
<div class="post-text" itemprop="text">
<p>from python wiki :</p>
<blockquote>
<p>Its because of that <code>getsizeof()</code> Return the size of an object in bytes. The object can be any type of object. All built-in objects will return correct results, but this does not have to hold true for third-party extensions as it is implementation specific.</p>
</blockquote>
<p><strong>Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to</strong>.</p>
<p>and in this case B is the name of list and actually a pointer to list ! so <code>getsizeof()</code> return the size of a list object , not its content ! </p>
</div>
<span class="comment-copy">try <code>print sys.getsizeof(B[0])</code></span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/7247298/size-of-list-in-memory">Here</a> is some good discussion of how Python lists consume memory</span>
<span class="comment-copy">This explains a lots. Thank you</span>
<span class="comment-copy">@AerofoilKite no problem at all. NPE's answer really nails it head on.  In the link to the documentation I gave, there's a link to an ActiveState recipe that details stepping through an object to return the "true" size.</span>
