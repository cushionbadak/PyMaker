<div class="post-text" itemprop="text">
<p>convert a 2d array of integers into String. For example myArray = [[1,2,3],[3,4,5]] into   myArrayL = [[a,b,c],[c,d,e]]
 and retain the shape of the 2d array</p>
<p>where 1 = "a" , 2 = "b", 3 = "c"</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two parts to this.</p>
<p>First, how do you convert a number like <code>1</code> to a letter like <code>'a'</code>, according to your rule? Second, how do you apply a function to all elements of a list?</p>
<hr/>
<p>For the first, one way to write it is with the <a href="https://docs.python.org/3/library/functions.html#chr" rel="nofollow"><code>chr</code></a> function. This function takes an number and gives you the single-character string for the character with that code point. In particular, <code>chr(65)</code> is <code>'a'</code>, <code>chr(66)</code> is <code>'b'</code>, etc. So, we could just do <code>chr(n + 64)</code>. </p>
<p>Or we could use the <a href="https://docs.python.org/3/library/functions.html#ord" rel="nofollow"><code>ord</code></a> function, which is the inverse of <code>chr</code>, so instead of hardcoding 64 and having to remember that's 1 less than <code>'a'</code>, we can write 1 less than <code>'a'</code> directly:</p>
<pre><code>def letter(n):
    return chr(n + ord('a') - 1)
</code></pre>
<p>Of course this isn't the only way to do it. You could also, e.g., use <a href="https://docs.python.org/3/library/string.html#string.ascii_lowercase" rel="nofollow"><code>string.ascii_lowercase[n-1]</code></a>.</p>
<p>(Note that either of these solutions not only works in Python 3, where the "code points" are always Unicode, but also in Python 2, where the "code points" are values in some unspecific 8-bit encoding, as long as the intended encoding has all of the lowercase letters in contiguous order, which is true for almost anything you're likely to ever encounter unless you've got some old EBCDIC files lying around.)</p>
<hr/>
<p>For the second, you can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>. Your examples are flat (1D) lists, so we'd use a flat list comprehension:</p>
<pre><code>numbers = [2, 3, 4]
letters = [letter(n) for n in numbers]
</code></pre>
<p>If you have 2D lists of lists, just use a <a href="https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="nofollow">nested list comprehension</a>:</p>
<pre><code>numbers = [[2, 3], [4, 5]]
letters = [[letter(n) for n in row] for row in numbers]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can corresponding Alphabets by indexing <code>string.ascii_lowercase</code> which returns all lower case alphabets.</p>
<pre><code>import string 
myArray = [[1,2,3],[3,4,5]]
result_array = [[string.ascii_lowercase[element-1] for element in row] for row in myArray]
</code></pre>
<p>Result array: </p>
<pre><code>[['a', 'b', 'c'], ['c', 'd', 'e']]
</code></pre>
</div>
<span class="comment-copy">The result isn't going to be <code>[[a,b,c], [c,d,e]]</code>, it's going to be <code>[['a', 'b', 'c'], ['c', 'd', 'e']]</code> (unless you happen to have defined <code>a, b, c, d, e = 'abcde'</code> or something similarâ€¦). Also, I assume you meant <code>3 = "c"</code>, not <code>d</code>?</span>
<span class="comment-copy">thanks this helped</span>
<span class="comment-copy">Why build and use a dict for lookup instead of just <code>string.ascii_lowercase[n-1]</code>?</span>
<span class="comment-copy">@abarnert Thanks, it seems very much efficient than creating a mapped dict of alphabets.</span>
<span class="comment-copy">I don't know if it's much more efficient, and I doubt it matters anyway. The point is that it's <i>simpler</i>.</span>
<span class="comment-copy">Well i think both <code>l[index]</code> and <code>dict[key]</code> have same complexity so both would be same efficient but creating a dict as i did before would be necessary.</span>
<span class="comment-copy"><code>string.ascii_lowercase</code> is a string containing the ASCII lower case alphabetic characters. That's one alphabet of 26 alphabetic characters. Calling a single alphabetic character an alphabet is poor English and it's potentially confusing. True, "alphabetic character" is a bit long-winded, but you can abbreviate that to "alpha char".</span>
