<div class="post-text" itemprop="text">
<p>I just started working with classes in Python and I am at a roadblock trying to print a binary tree that I created. Here is the code I have:</p>
<pre><code>class Node(object):
    def __init__(self, number):
        self.number=number
        self.right=None
        self.lef=None

    def add_node(self,number):
        if number &lt; self.number:
            self.left = self.left.add_node(number)
        if number &gt; self.number:
            self.right = self.right.add_node(number)
</code></pre>
<p>The first part represents the root of the tree and the add_node function adds a node in the tree. I created a new instance for the root of the tree:</p>
<blockquote>
<p>Tree = Node(6)</p>
</blockquote>
<p>The problem that I am facing is printing the tree. If I just say <code>print Tree</code>, I get this:</p>
<pre><code>&lt;__main__.Node object at 0x10f6e5210&gt;
</code></pre>
<p>Somebody told me that I have to create a function to actually print the tree and this function looks like the function that's creating a new node but so far I wasn't able to do that. Any help please?!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can add the <code>__str__</code> method to determine how your node object reacts when used as a string, i.e. <code>str(Node(6))</code> . This is useful if you want to give out a string representations in print statements etc. without calling methods directly.</p>
<pre><code>class Node(object):
    def __init__(self, number):
        self.number=number
        self.right=None
        self.lef=None

    def add_node(self,number):
        if number &lt; self.number:
            self.left = self.left.add_node(number)
        if number &gt; self.number:
            self.right = self.right.add_node(number)

    def __str__(self):
        return str(self.number)

print Node(6)
</code></pre>
<p><strong>Edit:</strong></p>
<p>While <code>__str__()</code> returns bytes, <code>__unicode__()</code> returns characters. <code>__unicode__()</code> is actually supposed to replace <code>__str__()</code> , so it's actually recommended to use <code>__unicode__()</code> instead (in Python 2.x there's both for compatibility reasons).</p>
<p>A 3rd way to represent your object is <code>__repr__()</code> which is used for less formal string representations but rather for debugging etc. The returned string should look like a valid Python expression that could be used to recreate an object with the same value. </p>
<p>For more information have a look at the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow">language reference</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes you need to add a function to create a function to <code>print</code> the value at the node. The function can be as simple as</p>
<pre><code>def dis(self):
    print(self.number)
</code></pre>
<p>And you can now print using</p>
<pre><code>print (Tree.disp())
</code></pre>
</div>
<span class="comment-copy">The clue that it looks like the <code>add_node()</code> method was probably referring to the fact that it would also be recursive -- e.g. printing the tree would consist of printing the left and right sub-trees.</span>
<span class="comment-copy">I've upvoted your answer but you should also say about <code>__unicode__</code> and <code>__repr__</code> in my opinion.</span>
<span class="comment-copy">Figured it couldn't hurt to do so. Edited.</span>
