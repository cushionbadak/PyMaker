<div class="post-text" itemprop="text">
<p>I would like to move in python files and directories in one directory to another directory with overwrite ability.</p>
<p>I started with the following code:</p>
<pre><code>        #moving files from progs
        path = tempfolder + 'progs/'
        for dirs,files in os.listdir(path):
                 for f in files:
                        shutil.move(os.path.join(path, f) , os.path.join(compteurfolder, f))
</code></pre>
<p>So for the moment, I only try to move the files and I get the following errors:</p>
<pre><code>    for dirs,files in os.listdir(path):
ValueError: too many values to unpack
</code></pre>
<p>I guess this is because I have dirs and files but then how will I move directories too? And how to make sure it can overwrite the files in the other folder?</p>
<p>Hope you can help.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason this fails:</p>
<pre><code>for dirs,files in os.listdir(path):
</code></pre>
<p>… is that <code>os.listdir</code> just returns a list of filenames. So, each element is a string, and you're trying to unpack that string into two variables. Compare this:</p>
<pre><code>a, b = (1, 2, 3, 4, 5, 6, 7, 8)
for a, b in [(1, 2, 3, 4, 5, 6, 7, 8), (9, 10)]
dirs, files = "spam.txt"
for dirs, files in ["spam.txt", "eggs.dat"]
</code></pre>
<p>It's the exact same error in every case—you can't fit 8 things into 2 variables.</p>
<p>Meanwhile, if <code>listdir</code> is just returning filenames, how do you know ones are the names of regular files, are which are the names of directories? You have to ask—e.g., by using <code>isdir</code>.</p>
<p>So:</p>
<pre><code>for filename in os.listdir(path):
    if os.path.isdir(filename):
        # do directory stuff
    else:
        # do regular file stuff
</code></pre>
<p>(But note that this can still be confusing if you have symlinks…)</p>
<hr/>
<p>Meanwhile, what does "do regular file stuff" mean?</p>
<p>Well, assuming you don't have a directory (or a symlink to a directory) with the same name as the file you're trying to move there, as the docs for <a href="https://docs.python.org/3/library/shutil.html#shutil.move" rel="nofollow noreferrer"><code>shutil.move</code></a> say, <code>os.rename</code> or <code>shutil.copy2</code> will be used. If you're not on Windows, this is perfect—if you have permission to overwrite the target you will, otherwise you'll get a permissions error. But if you <em>are</em> on Windows, <a href="https://docs.python.org/3/library/os.html#os.rename" rel="nofollow noreferrer"><code>os.rename</code></a> will fail if the target already exists.</p>
<p>If you're on 3.3 or later, you can solve this by copying the <a href="https://hg.python.org/cpython/file/3.4/Lib/shutil.py#l490" rel="nofollow noreferrer"><code>shutil.move</code> source</a>* and using <code>os.replace</code> instead, as the <code>rename</code> docs imply. Otherwise, you will have to delete the target before renaming the source.</p>
<p><sub>* Some stdlib modules—including <code>shutil</code>—are meant to serve as sample code as well as usable helpers. In those cases, at the top of the module's docs, there will be a <strong>Source code:</strong> link.</sub></p>
<hr/>
<p>And what about "do directory stuff"? Well, if you move a directory <code>spam</code> to a target <code>eggs/spam</code>, and <code>eggs/spam</code> already exists as a directory, you're going to end up moving to <code>eggs/spam/spam</code>.</p>
<p>This shouldn't be surprising, as it's exactly the same thing <code>mv</code> on Unix and <code>move</code> on Windows do, which is what <code>shutil</code> is trying to simulate.</p>
<p>So, what you need to do here is delete the target (this time using <code>shutil.rmtree</code>) before moving the source.</p>
<hr/>
<p>Which means the simplest thing to do may be to not distinguish files and directories, Windows and Unix, or anything else; just do this:</p>
<pre><code>for filename in os.listdir(path):
    target = os.path.join(compteurfolder, filename)
    try:
        shutil.rmtree(target)
    except NotADirectoryError:
        try:
            os.unlink(target)
        except FileNotFoundError:
            pass
    shutil.move(os.path.join(path, filename), target)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This because os.listdir(path) return array according documentation <a href="https://docs.python.org/2/library/os.html" rel="nofollow">here</a>. So you should modify you code as following for moving files and directories. </p>
<pre><code>    #moving files from progs
    path = tempfolder + 'progs/'
    for item_path in os.listdir(path):
        shutil.move(os.path.join(path, item_path) , os.path.join(compteurfolder, item_path)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; import shutil

&gt;&gt;&gt; for node in os.listdir(path):
...      if not os.path.isdir(node):
...          shutil.move(os.path.join(path, node) , os.path.join(compteurfolder, node))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>(Python 3.6)
From a previous answer (can't add comment)</p>
<p>I think that the line</p>
<pre><code>if not os.path.isdir(node):
</code></pre>
<p>Should read</p>
<pre><code>if not os.path.isdir(os.path.join(source, node))
</code></pre>
<p>Otherwise it will always return <code>True</code> and move the sub folders as well.</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; import shutil

&gt;&gt;&gt; for node in os.listdir(path):
...      if not os.path.isdir(os.path.join(path, node)):
...          shutil.move(os.path.join(path, node) , os.path.join(compteurfolder, node))
</code></pre>
</div>
<span class="comment-copy">The exception is simple. You are asking for two values: dirs and files. While listdir will return only one list with dirs and files. You will have to seperate them within the forloop.</span>
<span class="comment-copy">So, if you have <code>progs/spam/eggs.txt</code> and <code>target/spam/beans.txt</code>, you want to overwrite <code>target/spam</code> with <code>progs/spam</code>, losing <code>beans.txt</code> entirely, right?</span>
<span class="comment-copy">Ok, i ll try this, thanks for the great explanation...</span>
<span class="comment-copy">I used your first part as I am not using symlink and it works great. Really thank you for your help...</span>
<span class="comment-copy">The problem with this is that it will remove the all the contents of the target dir.  This is not the intended operation for a move.   A better solution would move the files to the target directory, without removing the entire target first.  Takes a bit more code, but it is a much more preferable solution.</span>
<span class="comment-copy">What about his seccond question?</span>
<span class="comment-copy">this makes no sense, what is <code>for f in files</code>?</span>
<span class="comment-copy">still won't work, you are trying to iterate over a file</span>
<span class="comment-copy">You're also calling <code>isdir</code> on the wrong path. (Not surprising; using variables named <code>path</code> and <code>_path</code> is pretty confusing…)</span>
<span class="comment-copy">@PadraicCunningham: Worse, it may "work" but silently do the wrong thing, because he's iterating over a filename, which will give him one character at a time…</span>
<span class="comment-copy">Don't you have also to import <code>shutil</code> , by the way?</span>
