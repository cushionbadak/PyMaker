<div class="post-text" itemprop="text">
<p>I'm using Python 2.7 and the mock library to test if the <code>connect</code> method of an object instance of <code>socket.socket</code> class is called with certain arguments. However I want to use the mock only as a "marker" and continue with the function call normally. In the case below, I want <code>socket.socket.connect</code> to call to the real non-patched function as a "side-effect" so the method doesn't fail later.</p>
<p>That is, I want a mock of the <code>socket.socket</code> class keeping the same functionality and behaviour but with the extra ability of recording the calls.</p>
<p>Here is the (simplified) test. This is what I think I got wrong:</p>
<pre><code># test.py
@patch('socket.socket.connect')
@override_settings(SERVER_IP='127.0.0.1')
def test_ip_from_settings(self, connect_mock):
    """
    The IP to connect to is taken from the Django settings.
    """
    def connect(self, address):
        socket.socket.connect(self, address)
    connect_mock.side_effect = connect

    result = connections.get_result()

    connect_mock.assert_called_with(('127.0.0.1', TCP_PORT))
</code></pre>
<p>And for reference, this is the (again simplified) code to connect and retrieve the results:</p>
<pre><code># connections.py
from django.conf import settings
def get_result():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((settings.SERVER_IP, TCP_PORT))

    query = 'myquery'
    s.sendall(query)
    result = s.recv(BUFFER_SIZE)
    return result
</code></pre>
<p>However when running the test <code>TypeError: connect() takes exactly 2 arguments (1 given)</code>is raised. How can I do what I want?</p>
</div>
<div class="post-text" itemprop="text">
<p>To <a href="https://docs.python.org/3/library/unittest.mock-examples.html#mocking-unbound-methods" rel="nofollow">mocking unbound method</a> you must use <code>autospec=True</code> to preserve the signature.... But unfortunately <code>socket.socket.connect()</code> cannot be mocked <a href="http://code.google.com/p/mock/source/browse/mock.py#197" rel="nofollow">because is a C method</a>. But our goal is not mock it but just wrap it by a mock. So the simplest but not really clean trick that I found was use a new class to fool mock framework</p>
<pre><code>from mock import ANY

class MyS():
    def connect(self, address): #The signature
        pass

@patch("socket.socket.connect", autospec=MyS.connect, side_effect=socket.socket.connect)
@override_settings(SERVER_IP='127.0.0.1')
def test_ip_from_settings(self, connect_mock):
    """
    The IP to connect to is taken from the Django settings.
    """
    result = connections.get_result()
    connect_mock.assert_called_with(ANY,('127.0.0.1', TCP_PORT))
</code></pre>
<p>You must use <code>ANY</code> from mock helpers because you don't know what socket object will be passed to your wrapper.</p>
<p>That trick works either for Python3 and Python2.7 but in Python3 the behavior is little bit different because <code>socket.socket.connect()</code> is not a function but a <code>method_descriptor</code>.</p>
<pre><code>&gt;&gt;&gt; import socket
&gt;&gt;&gt; type(socket.socket.connect)
&lt;class 'method_descriptor'&gt;
</code></pre>
<p>Also in that case use <code>autospec=True</code> doesn't work.</p>
<hr/>
<p>The real question is : are you sure you need a <em>real connection</em> to make your tests. Mock aims is uncouple testing from real resources, register calls and assert on arguments is a plus but the first use is replace real object by mocks that are simple, fast and can be configured to return what we need for testing defined behaviors.</p>
<p>Maybe what you really need is <code>patch()</code> <code>socket.socket</code> and set some <code>return_values</code> or <code>side_effect</code> to drive your test in the cases you would test.</p>
</div>
<div class="post-text" itemprop="text">
<p>The inner function <code>connect</code> inside the method <code>test_ip_from_settings</code> is not a method but a function. So you must remove the first argument <code>self</code>.</p>
<p>This:</p>
<p><code>def connect(self, address):
    socket.socket.connect(self, address)
</code></p>
<p>Should be:</p>
<p><code>def connect(address):
    socket.socket.connect(address)
</code></p>
<p>This is because of that when you call <code>s.connect((settings.SERVER_IP, TCP_PORT))</code>, the tuple <code>(settings.SERVER_IP, TCP_PORT)</code> is one argument, which goes to <code>self</code> argument in your case and then <code>address</code> variable still needs to be specified. </p>
<p>In the second correct case, there is no <code>self</code> argument, so the tuple is bound to <code>address</code> argument.</p>
</div>
<span class="comment-copy">You're right. I just wanted the real connection to happen because later I do <code>socket.sendall(...)</code> and I wanted that to work. But I might as well mock the entire socket class with <code>send(..)</code>, <code>sendall(..)</code>, <code>recv()</code> etc. methods.</span>
<span class="comment-copy">In Python 3.3+, you can simply <code>import unittest.mock</code> as <code>mock</code> is now included in the standard library: docs.python.org/3/library/unittest.mock.html</span>
<span class="comment-copy">@phoenix the issue is not how import <code>mock</code> in python 3 but that in python 3 you cannot use <code>autospec=True</code> for <code>socket.socket.connect</code>.... but maybe I'll come back later to this answer and try to use <code>wraps</code> instead: it should be a cleaner approach.</span>
<span class="comment-copy">Ok, but if I do that then I get <code>RuntimeError: maximum recursion depth exceeded</code>. Anyhow I don't understand how can I "mark-mock" the <code>connect</code> method keeping the original behaviour without a reference to self.</span>
<span class="comment-copy">That doesn't preserve the original behaviour as requested in the question. I want to patch the <code>socket.socket</code> class to get the same behaviour as the original one but recording the calls.</span>
