<div class="post-text" itemprop="text">
<p>I am wondering if it would be a good idea to use different <code>.py</code> scripts for different parts of a Python program. Like one <code>.py</code> file for a calculator and another for class files and etc. If it is a good idea, is it possible?</p>
<p>If possible, where can I find how to do so? </p>
<p>I am asking this because I find it confusing to have so much code in a single file, and have to find it anytime fixing is needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your program starts assuming big dimensions, yes, you could split your classes or simply your functions according to what they do. Usually functions that do similar tasks or that work on the same data are put together.</p>
<p>To import a file containing a set of functions that you defined, if the file is in the same folder where your main script is, you can simply use this statement, if, for example, the name of the script containing your function that you want to imported is called <code>functions.py</code>, you can simply do <code>import functions</code> or <code>from functions import *</code>, or, better, <code>from functions import function_1</code>.</p>
<p>Let's talk about the 3 ways of importing files that I have just mentioned:</p>
<p><em><code>import functions</code></em></p>
<p>Here, in order to use one of your functions, for example <code>foo</code>, you have to put the name of the module in front of the name of the function followed by a <code>.</code>:</p>
<p><code>functions.foo('this is a string')</code></p>
<p><em><code>from functions import *</code></em></p>
<p>In this case, you can directly call foo just typing <code>foo('this is a new method of importing files')</code>. <code>*</code> means that you have just imported everything from the module <code>functions</code>.</p>
<p><em><code>from functions import function_1</code></em></p>
<p>In this last case, you have imported a specific function <code>function_1</code> from the module <code>functions</code>, and you can use just the <code>function_1</code> from the same module:</p>
<p><code>function_1('I cannot use the function "foo" here, because I did not imported it')</code></p>
</div>
<div class="post-text" itemprop="text">
<p>It certainly is possible, and is frequently a good idea.  This is for exactly the reason you cite: if you have all your code in one big file, it gets annoying to edit that one file.</p>
<p>So, for example, let's say you have a calculator function and some class.  You can put them in two separate files -- the first in <code>calc.py</code></p>
<pre><code># calc.py
def calculator(a,b):
    return a.do_something_clever(b)
</code></pre>
<p>and the second in some other file</p>
<pre><code># cleverness.py
class Cleverness(object):
    def do_something_clever(self, c):
        return 3.14159+c
</code></pre>
<p>To use them from some other script, you just need to <a href="https://docs.python.org/3/reference/import.html" rel="nofollow">import</a> them:</p>
<pre><code># cool_script.py
from calc import calculator
from cleverness import Cleverness

c = Cleverness()
print(calculator(c, 2.717))
</code></pre>
<p>Instead of <code>from x import y</code>, you can also use <code>import x</code> and then <code>x.y</code>.  For example, the following is equivalent:</p>
<pre><code># cool_script2.py
import calc
import cleverness

c = cleverness.Cleverness()
print(calc.calculator(c, 2.717))
</code></pre>
<p>There's always a balancing act between making too many separate files and making too few.  Basically, it's up to you.  The main factor that drives my decision is usually how closely related the different things are, and how reusable the different components would be if they were separated.  For example, if my <code>calculator</code> function did something complicated, but didn't depend at all on the details of <code>Cleverness</code>, I would make sure to put it in a separate file.  On the other hand, if I <em>always</em> import <code>Cleverness</code> whenever I import <code>calculator</code>, and the codes for both were simple, I'd probably just stick them into the same file.  And if I'm never going to use the code in them again, I'd probably just stick them in the main script's file itself.</p>
</div>
<span class="comment-copy">Google "modularity"</span>
<span class="comment-copy">Depends on the size and scope of your program. In general if something can be re-usable in other contexts it belongs in its own module: <a href="https://docs.python.org/2/tutorial/modules.html" rel="nofollow noreferrer">docs.python.org/2/tutorial/modules.html</a></span>
<span class="comment-copy">This is very good idea. It will keep you brains from exploding, when you open one big .py file (module) with all components of big system. Separate modules for specific functionalities - is a pro choice.</span>
<span class="comment-copy">Probable candidate for programmers.stackexchange.com, seeks an opinion (although it's a very common question for beginners_</span>
<span class="comment-copy">This question appears to be off-topic because it is about having not read the most basic documentation.</span>
<span class="comment-copy">So if I had a menu in another .py file, how would I call it and use it in the main program?  I know I would do import menu, but what would I do to use the code from that?</span>
<span class="comment-copy">@AustinHargis When you import your module called <code>menu.py</code> with this syntax <code>import menu</code>, you are actually importing all the code from that same module, so you can just call the functions or variables from the <code>menu.py</code> just as I explained in my answer.</span>
<span class="comment-copy">Oh, alright, I see. I was slightly confused by your answer originally but I see now. Thanks :D But when I go to convert my program to .exe (I use cx_freeze) how would I do that since my program would now use multiple .py files?</span>
<span class="comment-copy">@AustinHargis There's an option, in the <code>setup</code> file that allows you also to say to <code>cx_Freeze</code> to check for the other modules. Check out this post for more information: <a href="http://stackoverflow.com/questions/2553886/how-can-i-bundle-other-files-when-using-cx-freeze" title="how can i bundle other files when using cx freeze">stackoverflow.com/questions/2553886/â€¦</a></span>
<span class="comment-copy">Alright thank you. I am having some issues though. I don't know how to pull information from classes with this method. I have one class with name and highscore. I am trying to access that information from a different script with: game_state['players'][0].highscore &amp; game_state['players'][0].name. How can I pull this info from a class? Sorry I don't understand much.</span>
