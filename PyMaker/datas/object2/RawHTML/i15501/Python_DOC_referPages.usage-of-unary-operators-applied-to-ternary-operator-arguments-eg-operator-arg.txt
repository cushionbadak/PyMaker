<div class="post-text" itemprop="text">
<p>Here's what I was doing: </p>
<pre><code>def func(a,b=1,*args):
    print('a:',a,'b:',b,'args:',*args if args else 'No args')
func(1,2)
</code></pre>
<p>Here's what I expected: </p>
<pre><code>#a:1 b: 2 args: No args
</code></pre>
<p>Here's what I actually got: </p>
<pre><code>#a:1 b: 2 args: N o  a r g s 
</code></pre>
<p>The <code>*</code> operator is unpacking the <code>'No args'</code> string. So here's what I should have been doing: </p>
<pre><code>#Produces expected result: 
def func(a,b=1,*args):
    print('a:',a,'b:',b,'args:',*args if args else ['No args'])
</code></pre>
<p>So the <code>*</code> operator gets applied to the entire ternary statement. But this does not seem to happen with the <code>-</code> operator: </p>
<pre><code>def func(a,b=1,*args):
    print('a:',a,'b:',b,'negative args[0]:', -args[0] if args else 1000000)
func(1,2)
#expected result:
#a:1 b: 2 negative args[0]: -1000000
#actual result:
#a:1 b: 2 negative args[0]: 1000000
</code></pre>
<p>The negative <code>-</code> operator does not apply to the entire ternary statement, whereas the <code>*</code> operator does. Why? What is special about the <code>*</code> operator?</p>
</div>
<div class="post-text" itemprop="text">
<p>You already found the right way to write your code in <a href="https://stackoverflow.com/a/27323885/908494">your own answer</a>:</p>
<pre><code>def func(a,b=1,*args):
    print('a:',a,'b:',b,'args:',*args if args else ['No args'])
</code></pre>
<p>But that doesn't answer your question of "what is special about the <code>*</code> operator".</p>
<p>The first thing to notice is that <code>*</code> isn't actually an operator at all, it's part of <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer">function call syntax</a>. But in loose conversation (including within the actual documentation), it's often called "the splat operator", so this isn't much of an answer. (And the same is true for <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">conditional expressions</a>, which also aren't operator expressions, but it's still frequently called "the ternary operator" or "the if-else operator".)</p>
<p>But, more importantly, if you want to treat both <code>*</code> and <code>… if … else …</code> (loosely) as operators, you have to consider operator precedence. The ternary operator just binds more tightly than the splat operator, while it doesn't bind more tightly than the negation operator.</p>
<p>So, it's just like asking "what is special about the <code>/</code> operator" when you write <code>2 / 3 * 5</code> and <code>2 - 3 * 5</code>. The <code>-</code> applies to the entire <code>3 * 5</code>, but the <code>/</code> only applies to the <code>3</code> because of operator precedence.</p>
</div>
<div class="post-text" itemprop="text">
<p>EDIT: I changed the question but I'll leave this answer here because of the useful comment below. The answer to the revised question can be summarized thusly: </p>
<p>"Operator precedence, dummy." </p>
<hr/>
<p>Ah ha! I should have experimented a little more:</p>
<pre><code>def func(a,b=1,*args):
    print('a:',a,'b:',b,'args:',*args if args else ['No args'])
func(1,2)
</code></pre>
<p>Result as expected: </p>
<pre><code>#a: 1 b: 2 args: No args
</code></pre>
</div>
<span class="comment-copy">Thank you for being very kind and explanatory with your answer, which is basically (and correctly!): "It just DOES." ;)</span>
<span class="comment-copy">@RickTeachey: Well, to some extent, any language's operator precedence rules are arbitrary. But practically, language designers try to come up with precedence rules that will make things more readable more often. (Python's designers also add an extra constraint of trying to make the precedence rules simple and minimalist, so when it isn't obvious, it's at least easy to remember.)</span>
<span class="comment-copy">That's nice of them.</span>
<span class="comment-copy">I doubt there's a cleaner way than this one.  The star <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-argument_list" rel="nofollow noreferrer">applies to the entire argument</a>, so you can't just write something like <code>(*args) if args...</code>.</span>
