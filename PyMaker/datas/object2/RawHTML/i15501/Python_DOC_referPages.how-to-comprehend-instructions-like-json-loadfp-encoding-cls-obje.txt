<div class="post-text" itemprop="text">
<p>I recently came across this when reading the Python official documentation for <a href="https://docs.python.org/2/library/json.html#json.load" rel="nofollow"><code>json.load</code></a>:</p>
<pre><code>json.load(fp[, encoding[, cls[, object_hook[, parse_float[, parse_int[, parse_constant[, object_pairs_hook[, **kw]]]]]]]])
</code></pre>
<p>May I know how should I comprehend this?</p>
<p>For example, if I want to set the parameter <code>parse_float</code> to be <code>3</code>, how should I construct the argument?</p>
<p>Also, what does <code>[, ....]</code> mean? Why is there a comma preceding the formal parameters?</p>
</div>
<div class="post-text" itemprop="text">
<p>The square brackets <code>[…]</code> is a common <em>metalanguage</em> notation used to denote an <strong>optional</strong> component of a syntax in documentation and manuals.  "Optional" here means you can either omit or keep everything inside the brackets (but not a subset of it).  It is in some sense analogous to <code>(…)?</code> in regular expressions.</p>
<p>The usage predates Python: you can find it in various Unix manpages.  It is not part of Python's syntax, though you will find it in many docs.</p>
<p>When the documentation says:</p>
<pre><code>foo(x[, y])
</code></pre>
<p><em>Formally,</em> it means that both of the following are acceptable:</p>
<pre><code>foo(x)
foo(x,  y)
</code></pre>
<p>For your example:</p>
<pre><code>json.load(fp[, encoding[, cls[, object_hook[, parse_float[, parse_int[, parse_constant[, object_pairs_hook[, **kw]]]]]]]])
</code></pre>
<p><em>Formally,</em> it means any of the following are acceptable:</p>
<pre><code>json.load(fp)
json.load(fp, encoding)
json.load(fp, encoding, cls)
json.load(fp, encoding, cls, object_hook)
json.load(fp, encoding, cls, object_hook, parse_float)
json.load(fp, encoding, cls, object_hook, parse_float, parse_int)
json.load(fp, encoding, cls, object_hook, parse_float, parse_int, parse_constant)
json.load(fp, encoding, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook)
json.load(fp, encoding, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)
</code></pre>
<p><em>However,</em> the documentation is not very precise with the notation: it's fine to use keyword arguments to skip any of the parameters that you don't care because of the way arguments in Python work, e.g.:</p>
<pre><code>json.load(fp, parse_float=3)
</code></pre>
<p>In fact, if you look at the <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow">same documentation for Python 3</a> you see that they chose to use a much clearer notation:</p>
<blockquote>
<p>json.loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The parameters are <a href="https://docs.python.org/2/tutorial/controlflow.html#keyword-arguments" rel="nofollow">keyword arguments</a>. You can use them like this:</p>
<pre><code>def my_parse_float(float_str):
    return float(float_str)

print json.loads('{"foo":1, "bar":1.234}', parse_float=my_parse_float)
</code></pre>
<p>Output:</p>
<pre><code>{'bar': 1.234, 'foo': 1}
</code></pre>
<p>For <code>parse_float</code>, the value of <code>3</code> makes no sense. Read the documentation:</p>
<blockquote>
<p><code>parse_float</code>, if specified, will be called with the string of every JSON float to be decoded. By default, this is equivalent to <code>float(num_str)</code>. </p>
</blockquote>
</div>
<span class="comment-copy">Ah in the documentatoin. Ok, i see.:-)</span>
<span class="comment-copy">What if I want to skip one parameter? If I want to set the parameter <code>parse_float</code> to be <code>3</code> without changing <code>object_hook</code>, how should I construct the argument? Thanks!</span>
<span class="comment-copy">@Jason: They are optional so they typically would have default values. So to set the values of the parameters you want, just use the regular keyword arguments syntax. You know what all the parameter names are since they're all listed right there.</span>
<span class="comment-copy">You mean <code>json.load(fp,parse_float = 3)</code> ?</span>
<span class="comment-copy">I've added the example.  The documentation isn't very precise with the way they use the notation, so it's probably fine to specify a keyword argument directly.</span>
<span class="comment-copy">Yes, it's much clearer in the Python 3 Documentation.  Thx!</span>
