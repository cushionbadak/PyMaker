<div class="post-text" itemprop="text">
<p>I have a hard time understanding for loops in Python.
I have the following code in Javascript (Modolus 11 test) I want to convert to Python:</p>
<pre><code>    var secNumber = this.dob + lastDigits;
    var factors = [4, 3, 2, 7, 6, 5, 4, 3, 2, 1];

    for (var i = 0, sum = 0; i &lt; factors.length; i++) {
      sum += secNumber.substring(i, i + 1) * factors[i];
    }

    // modulus 11 test
    return sum % 11 !== 0 ? false : true;
</code></pre>
<p>What would the Python equivalent be ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python uses <a href="http://en.wikipedia.org/wiki/Foreach_loop" rel="nofollow">for each loops</a>, so iterating over <em>numbers</em> would require you to produce a sequence of numbers first. Python uses the <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow"><code>range()</code> type</a> for this:</p>
<pre><code>sum = 0
for i in range(len(factors)):
    pass
</code></pre>
<p>Note that <code>sum</code> is assigned <code>0</code> explicitly, separately.</p>
<p><strong>Usually</strong> however, you'd just loop over objects directly, rather than generate indices:</p>
<pre><code>sum = 0
for element in factors:
    pass
</code></pre>
<p>But if you are summing the factors, just use the <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow"><code>sum()</code> function</a>:</p>
<pre><code>total = sum(factors)
</code></pre>
<p>Note that I avoided using the name <code>sum</code> there to avoid masking the built-in function.</p>
<p>To multiply bytes from a sequence of bytes, just <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip()</code></a> the bytes and factors together:</p>
<pre><code>sum = 0
for byte, factor in zip(string, factors):
    sum += byte * factor
</code></pre>
<p>which can be collapsed with <code>sum()</code> and a generator expression:</p>
<pre><code>total = sum(byte * factor for byte, factor in zip(string, factors))
</code></pre>
<p>This only works if <code>string</code> is a <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow"><code>bytes</code> object</a>, not a <a href="https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str" rel="nofollow">Unicode <code>str</code> string object</a>; <code>bytes</code> objects are really sequences of integers in the range 0-255.</p>
<p>If you wanted to interpret the characters as <em>digits</em>, use a Unicode string and use <code>int()</code> to convert each to an integer:</p>
<pre><code>total = sum(int(digit) * factor for digit, factor in zip(string, factors))
</code></pre>
<p>Demo of the latter with the sample input you provided:</p>
<pre><code>&gt;&gt;&gt; sec_number = '0411994545'
&gt;&gt;&gt; factors = [4, 3, 2, 7, 6, 5, 4, 3, 2, 1]
&gt;&gt;&gt; sum(int(digit) * factor for digit, factor in zip(string, factors))
164
&gt;&gt;&gt; total = sum(int(digit) * factor for digit, factor in zip(string, factors))
&gt;&gt;&gt; total % 11 == 0
False
</code></pre>
<p>Note that the <code>==</code> test already produces a boolean; there is no need to use a conditional expression in Python to produce a boolean result.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>ssum = sum(int(x) * y for (x, y) in zip(S, factors))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>read about documentation of for in python:</p>
<pre><code> for i in range(len(factors)):
     # do stuff
</code></pre>
<p>Note: indexing start from 0 and end one less</p>
<p>demo:</p>
<pre><code>&gt;&gt;&gt; [x for x in range(10)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>I think this is what you want:</p>
<pre><code>&gt;&gt;&gt; s="0411994545"
&gt;&gt;&gt; f="1234567894"
&gt;&gt;&gt; sum([int(x)*int(y) for x,y in zip(s,f)])
238

&gt;&gt;&gt; sum([int(s[i])*int(f[i]) for i in range(len(s))])
238
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python there is no "traditional" for-loop, but there are many constructs which make loops in Python very powerful:</p>
<pre><code>for i in range(0, 10):
    print(str(i))
</code></pre>
<p>This prints integers from 0 to 9, range creates an iterator with the interval [low, high)</p>
<pre><code>for i in range(0, 10, 2):
    print(str(i))
</code></pre>
<p>Prints 0, 2, 4, 6, 8 because the steps (third optional parameter are set to 2).</p>
<p>Also you can enumerate through your factors:</p>
<pre><code>for key, val in enumerate(factors):
    pass
</code></pre>
<p>This gets you a key and the corresponding value of each element in factors.</p>
<p>If you do not need keys, than this simply does the job for you:</p>
<pre><code>for val in factors:
    # some stuff to do
</code></pre>
<p>This iterates over every element in factors.</p>
<p>If you need a special condition to be checked, you can use break or continue:</p>
<pre><code>for val in factors:
    if val == 0:
        continue # skips one iteration
    elif val == 1:
        break # cancels the whole loop
    else
        # do some stuff
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't strictly have C/Javascript style for loops but prefers a simpler syntax.</p>
<p>The C/JS style for has:</p>
<ul>
<li>an <em>initializer</em> <code>var i=0, sum=0</code></li>
<li>a <em>conditional test</em>, <code>i&lt; factors.length</code></li>
<li>an <em>iterator</em>, <code>i++</code></li>
<li>and a task to repeat <code>sum += string.substring(i, i + 1) * factors[i]</code></li>
</ul>
<p>A pythonic for loop has only a variable and a list or iterable and a task, and looks like this:</p>
<pre><code>mysum = 0
for i in range(length):
    mysum += int(strings[i])*factors[i]
</code></pre>
<p>where range(length) is a built-in function that expands to [0,1,2,3,.., length-1]
and the task consists of the indented block after the colon</p>
<p>In JS strings and numeric types are automatically converted (even when you dont want it), but in Python that is not true.  <code>int()</code> converts to integer and <code>float()</code> converts to floating point number.</p>
</div>
<span class="comment-copy">What will you be doing with <code>i</code> and <code>sum</code>?</span>
<span class="comment-copy">See updated code above. Thank you.</span>
<span class="comment-copy">can you show how ur string will look like???</span>
<span class="comment-copy">String = "0411994545"</span>
<span class="comment-copy">what is content of factors???</span>
