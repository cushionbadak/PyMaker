<div class="post-text" itemprop="text">
<p>I have a script called "test.py" and refers to a config file called "cfg.yaml". These two reside in the same directory called "test/scripts".</p>
<pre><code>test/scripts/test.py
test/script/cfg.yaml
</code></pre>
<p>Now I am writing a bash script inside "test/data1/data2" called task.sh</p>
<p>From inside of task.sh, I want to make a call to the python script</p>
<p>test.sh contents are as below:</p>
<pre><code>#!/bin/sh

python ../../scripts/test.py
</code></pre>
<p>test.py opens and reads the cfg.yaml like open("cfg.yaml") but when the test.sh is called, it fails because "cfg.yaml" is NOT referred with relative path. How do I resolve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>try</p>
<pre><code>#!/bin/sh

cd ../../scripts
python test.py
</code></pre>
<p>I assume in test.py you are referencing the yaml with a local path that expects the script to be running from the scripts directory  (not from <code>data1/data2</code>)</p>
<p>as an aside you can always <code>print os.getcwd()</code> to see what your working directory is while running the python script (or just <code>pwd</code> in bash)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to refer to a file in terms of its relative location <em>to the script</em>, you can't just use a relative path for that, because the script may not be in the current working directory. In fact, in your case, it's guaranteed <em>not</em> to be in the current working directory.</p>
<p>The usual quick&amp;dirty solution is to get the script path explicitly:</p>
<pre><code>import os
import sys

scriptdir = os.path.abspath(os.path.dirname(sys.argv[0]))
</code></pre>
<p><sub>That <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow"><code>sys.argv[0]</code></a> is the full name of your script—which on most platforms means either an absolute path, or a relative path that's at least still valid at this point. If you're worried about those other platforms, you may want to look at <a href="https://docs.python.org/3/reference/import.html?highlight=__file__#__file__" rel="nofollow"><code>__file__</code></a>. Of course if you're running the script out of a zipfile or similar, neither one will be useful.</sub></p>
<pre><code>open(os.path.join(scriptdir, "cfg.yaml"))
</code></pre>
<p>(Or you can even forcibly <code>os.chdir(scriptdir)</code> if you want, but that can be a bad idea if you're, e.g., accepting pathnames from the user.)</p>
<p>The <em>right</em> solution is to write your script and data files to be <em>installed</em> (even if you don't actually install anything and run it out of the source tree), and then use <code>pkg_resources</code> to find the data files. That will also solve a whole lot of other problems for you—but it does require a bit more learning first. See the <a href="https://python-packaging-user-guide.readthedocs.org/en/latest/current.html" rel="nofollow">Python Packaging User Guide</a> if you want to get started on that road, and <a href="https://python-packaging-user-guide.readthedocs.org/en/latest/distributing.html#package-data" rel="nofollow">Package Data and Data Files</a> as particular starting points.</p>
</div>
<span class="comment-copy">1. you could run test.py from test/scripts, 2. inside test.py you could change the path to cfg file as '../../scripts/test.py' or 3. you could use absolute path for the cfg file. This happens because python interpreter is being called from test/data1/data2</span>
<span class="comment-copy">Relative paths are relative to the current working directory, not relative to the location of the file being executed</span>
<span class="comment-copy">I like your solution the best! Thanks Joran. I did not know that I could execute Python scripts directly from inside of a bash script.It works fine.</span>
