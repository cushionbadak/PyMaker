<div class="post-text" itemprop="text">
<p>Does Python 3 (standard implementation) guarantee that the following code always produce the string <code>2, 3, 1</code>?</p>
<pre><code>', '.join(['2', '3', '1'])
</code></pre>
<p>If yes, where does this feature (order-keeping) documented?</p>
<p>If no, what function can be used to get an order-keeping join?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>str.join()</code> joins strings in the order the sequence you passed in lists the strings.</p>
<p>Since you are passing in a list literal and lists have a fixed order, your sample will always produce the string output in the same order, yes.</p>
<p>Rule of thumb: if the order would be handled any differently, the <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join()</code> documentation</a> would have mentioned this explicitly. Not concatenating strings in the order the iterable provides them would be... <em>very surprising</em>, not to mention not very useful.</p>
</div>
<span class="comment-copy">Why <i>would it not</i>? Lists have a set order.</span>
<span class="comment-copy">Yes, lists have order, but this has nothing to do with the implementation of <code>join()</code>, if the author of <code>join()</code> is crazy enough, he can implement <code>join()</code> as something like <code>for item in reverse(LIST): item = item + ', '; return item</code></span>
<span class="comment-copy">And not add that to the documentation? And what would the use of the <code>str.join()</code> function be if it violated expectations in that manner?</span>
<span class="comment-copy">Just want to know for sure.</span>
<span class="comment-copy">That would be outright lunacy, and flatly rejected. If core functionality did do something like this, it would be very clearly documented (<code>"""This could join items in any order. What were we thinking?! #LOL"""</code>). If you pass e.g. a <code>set</code> you might not get the order you expected, but the order of a sequence will certainly be respected.</span>
