<div class="post-text" itemprop="text">
<p>I want to do a infinite loop function.</p>
<p>Here is my code</p>
<pre><code>def do_request():
    # my code here
    print(result)

while True:
    do_request()
</code></pre>
<p>When use <code>while True</code> to do this, it's a little slow, so I want to use a thread pool to concurrently execute the function <code>do_request()</code>. How to do this ?</p>
<p>Just like use <code>ab</code> (Apache Bench) to test HTTP server.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/threading.html" rel="nofollow">threading</a> in Python to implement this.
Can be something similar to this (when using two extra threads only):</p>
<pre><code>import threading

# define threads
task1 = threading.Thread(target = do_request)
task2 = threading.Thread(target = do_request)

# start both threads
task1.start()
task2.start()

# wait for threads to complete
task1.join()
task2.join()
</code></pre>
<p>Basically, you start as many threads as you need (make sure you don't get too many, so your system can handle it), then you <code>.join()</code> them to wait for tasks to complete.</p>
<p>Or you can get fancier with <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow">multiprocessing</a> Python module.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try the following code:</p>
<pre><code>import multiprocessing as mp
import time

def do_request():
    while(True):
        print('I\'m making requests')
        time.sleep(0.5)


p = mp.Process(target=do_request)
p.start()

for ii in range(10):
    print 'I\'m also doing other things though'
    time.sleep(0.7)

print 'Now it is time to kill the service thread'
p.terminate()
</code></pre>
<p>The main thread stars a service thread that does the request and goes on until it has to, and then it finishes up the service thread.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe you can use the <a href="https://docs.python.org/dev/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor" rel="nofollow">concurrent.futures.ThreadPoolExecutor</a></p>
<pre><code>from concurrent.futures import ThreadPoolExecutor
import time

def wait_on_b(hello):
    time.sleep(1)
    print(hello) # b will never complete because it is waiting on a.
    return 5

def wait_on_a():
    time.sleep(1)
    print(a.result()) # a will never complete because it is waiting on b.
    return 6


executor = ThreadPoolExecutor(max_workers=2)
a = executor.submit(wait_on_b, 3)
b = executor.submit(wait_on_a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this?</p>
<pre><code>from threading import Thread, Event

class WorkerThread(Thread):
    def __init__(self, logger, func):
            Thread.__init__(self)
            self.stop_event = Event()
            self.logger = logger
            self.func = func

    def run(self):
            self.logger("Going to start the infinite loop...")
            #Your code
            self.func()

concur_task = WorkerThread(logger, func = do_request)
concur_task.start()
</code></pre>
<p>To end this thread...</p>
<pre><code> concur_task.stop_event.set()
 concur_task.join(10) #or any value you like
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Finally, I've solved this problem. I use a variable to limit the thread number.</p>
<p>Here is my final code, solved my problem.</p>
<pre><code>import threading
import time

thread_num = 0
lock = threading.Lock()

def do_request():
    global thread_num
    # -------------
    # my code here
    # -------------
    with lock:
        thread_num -= 1

while True:
    if thread_num &lt;= 50:
        with lock:
            thread_num += 1
        t = threading.Thread(target=do_request)
        t.start()
    else:
        time.sleep(0.01)
</code></pre>
<p>Thanks for all replies.</p>
</div>
<span class="comment-copy">Using <code>concurrent.features</code> ?</span>
<span class="comment-copy">Thank you @BhargavRao , I will view about the doc later.</span>
<span class="comment-copy">Don't put answers in the question. If you have received a useful answer, accept it. If you have another question, ask it separately.</span>
<span class="comment-copy">Thank you. But it's not perfect. Too much repetition code , if any one of the threads is slow down, the whole loop will wait for it. So  I think use thread pool is better. I will try multiprocessing or concurrent.features.</span>
<span class="comment-copy">That was just an example. Feel free to put all thread handles into loop/array to avoid repetition of the code, it's up to you. Also, if one thread is slow, the rest will run anyway. One thread will not slow down the loop if you started all of them simultaneously. Your loop will complete when the slowest thread is done, of course.</span>
<span class="comment-copy">" Your loop will complete when the slowest thread is done, of course." which is exactly what abcfy claimed and makes this a pretty bad solution (say one request times out - suddenly you do nothing for several seconds!). There's a threadpool class in <code>multiprocessing</code> too for older releases that don't have the n new concurrent class.</span>
<span class="comment-copy">I use <code>concurrent.features</code>, but meet another question. My question has edited.</span>
<span class="comment-copy">Thank you. But you misunderstand. I want to concurrent execute the <code>do_request()</code> because it's a little slow. Just like ab(apache bench) to test http server.</span>
<span class="comment-copy">Sorry, my understanding is that you needed a service thread. I'll leave the answer there in case someone in need of such thing arrive at your question through search engines.</span>
<span class="comment-copy">Thank you,  I have edited my question.</span>
<span class="comment-copy">Thank you. I use a global variable to limit the thread number, and solved my problem. You can see my post.</span>
<span class="comment-copy">Where is <code>lock</code> defined? Also, instead of manually calling <code>lock.acquire</code> and <code>lock.release</code>, you can use a <code>with</code> block: <code>with lock: thread_num += 1</code></span>
<span class="comment-copy">Sorry, I forgot. Add it. You code is better, thank you.</span>
<span class="comment-copy">No problem, just making this future-proof. :)</span>
<span class="comment-copy">@Veedrac. Yes, you're right. I've modified my code. Thank you.</span>
