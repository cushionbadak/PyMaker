<div class="post-text" itemprop="text">
<p>For example, I have the following code:</p>
<pre><code>def m1(num):
    pass


def m2(num):
    pass


def foo(num):
    m2(num)


def foo2(num):
    foo(num)
    m1(num)

def main():
    foo2(1)


if __name__ == "__main__":
    main()
</code></pre>
<p>Is there a way to get call list for each function? For example, for this example I want to get the following dict:</p>
<pre><code>main: foo2
foo2: foo, m1
foo: m2
m2: 
m1: 
</code></pre>
<p>I know only one way to complete my task. It is to use <code>globals()</code> and then parse source code. But it seems is very ugly.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I know only one way to complete my task. It is to use <code>globals()</code> and then parse source code. But it seems is very ugly.</p>
</blockquote>
<p>I'm not sure what you think parsing source code would do for you here.</p>
<hr/>
<p>If you want to build a dynamic call graph, what you want to do is decorate each function—replace it with a wrapper that does some extra stuff before or after calling the real function. For example:</p>
<pre><code>def wrapper(func):
    @functools.wraps
    def wrap(*args, **kwargs):
        # do stuff to update call graph
        return func(*args, **kwargs)
    return wrap

g = globals()
for name, value in g.items():
    if callable(value):
        g[name] = wrapper(value)
</code></pre>
<p>Or, maybe more simply (and more flexibly), you might want to use the <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow"><code>bdb</code></a> debugger framework to step through your program and just record the <code>user_call</code> instances.</p>
<hr/>
<p>If you want to build a <em>static</em> call graph, then obviously that comes from the source, but there's no reason to parse it yourself when Python comes with the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow"><code>ast</code></a> module to do it for you. (You can use <a href="https://docs.python.org/3/library/inspect.html#inspect.getsource" rel="nofollow"><code>inspect.getsource</code></a> to get the source code to parse.)</p>
</div>
<span class="comment-copy">What you're looking to build is not a stack trace, but a call graph—sort of an upside-down stack trace.</span>
<span class="comment-copy">Also, "I know only one way to complete my task. It is to use <code>globals()</code> and then parse source code." How do you think parsing source code would help? I can't see any solution where that would be useful. But if you can show that, I'll bet I could show you how to replace the parsing with something different.</span>
<span class="comment-copy">@abarnert, globals()["<b>file</b>"] is path of our file. I think, that we can do something like that: <code>f = open("globals()["__file__"]");</code> and then parse it.</span>
<span class="comment-copy">Well, <code>globals()["__file__"]</code> gets you the exact same thing as just <code>__file__</code>, so <code>globals</code> isn't helping there… Also, you can use <code>inspect.getsource</code> to read source. Meanwhile, what would you <i>do</i> with the data once you parse it? You can use the <code>ast</code> module to create a parsed tree out of it, but then what? Are you just looking to create a <i>static</i> call graph—all the functions referenced in <code>main</code>'s body—rather than a <i>dynamic</i> one—all the functions called during an actual run of the program?</span>
<span class="comment-copy">thank you for your response and your comments.</span>
<span class="comment-copy">is it right, that wrapper does not return anything? I have just an error: <code>TypeError: 'NoneType' object is not callable</code>.</span>
<span class="comment-copy">@Denis: Sorry, yeah, you need to <code>return wrap</code>. Fixed. This is just a bog-standard <a href="https://www.python.org/dev/peps/pep-0318/" rel="nofollow noreferrer">decorator</a>—even if you aren't using it like one (putting <code>@wrapper</code> before each <code>def</code> statement) you still define it the same way.</span>
<span class="comment-copy">thanks for the bug fix.</span>
<span class="comment-copy">I am sorry, but do You test this code? I get error: <code>AttributeError: 'int' object has no attribute '__module__'</code> on line <code>foo2(1)</code>. I try fix it, but I have no success.</span>
