<div class="post-text" itemprop="text">
<p>Is this the correct practice for a class that could be initialized with two different single-parameter constructors? Say the parameter could be either a string or an int:</p>
<pre><code>def __init__(self,param):
    if(isinstance(param,basestring)):
        #Initialize using param (string)
    elif(isinstance(param,int)):
        #Initialize using param (int)
    else:
        raise Exception("Invalid param type - must be int or string.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I thought you might be able to do something interesting with <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow"><code>functools.singledispatch</code></a> in python 3.4. But turns out its a bit cumbersome.</p>
<pre><code>from functools import singledispatch

class A:

    def __init__(self, first_arg, another_arg=None):
        A._init(first_arg, self, another_arg)

    @singledispatch
    def _init(arg0, self, arg1):
        raise TypeError(arg0)

    @_init.register(int)
    def _init_int(arg0, self, arg1):
        print('_init_int', arg0, arg1)
        self.arg = arg0

    @_init.register(str)
    def _init_str(arg0, self, arg1):
        print('_init_str', arg0, arg1)
        self.arg = arg0

A(1)
A('str')
class MyInt(int):
    pass
A(MyInt(3))
A([])
</code></pre>
<p>produces:</p>
<pre><code>_init_int 1 None
_init_str str None
_init_int 3 None
Traceback (most recent call last):
  File "multi_init.py", line 32, in &lt;module&gt;
    A([])
  File "multi_init.py", line 8, in __init__
    A._init(first_arg, self, another_arg)
  File "/usr/lib/python3.4/functools.py", line 707, in wrapper
    return dispatch(args[0].__class__)(*args, **kw)
  File "multi_init.py", line 12, in _init
    raise TypeError(arg0)
TypeError: []
</code></pre>
</div>
<span class="comment-copy">I'd raise a more specific <code>TypeError</code> instead of the generic <code>Exception</code>.  You could also get rid of the extra parenthesis <code>if isinstance(param, basestring):</code>.  Python isn't C remember. :)</span>
<span class="comment-copy">Could you provide a fuller example? What is the difference between the two cases? It would be more idiomatic to e.g. have a standard <code>__init__</code> for the <code>int</code> and a <code>from_string</code> <i>classmethod</i> to parse the string to an integer, if that's what you're doing, but it's hard to advise on such an abstract example.</span>
<span class="comment-copy">@iCodez Haha right, thanks...still transitioning :)</span>
<span class="comment-copy">And in Python 2 probably use one of the number ABCs instead of <code>int</code>, since <code>isinstance(12345678912345678912, int)</code> is false (it has type <code>long</code>).</span>
<span class="comment-copy">@jonrsharpe: don't know about idiomatic. Consider <code>decimal.Decimal</code>, its constructor takes either. But like you say it's not clear from the question whether that's a good example to follow in this case.</span>
