<div class="post-text" itemprop="text">
<p>Is there a mistake in the below code?</p>
<pre><code>import re
text = 'AFL_v_CalcOneIntAreas (%as_Points[0].ub_X%);\n'

print(re.sub('as_Points[0].ub_X', '0x00', text))
</code></pre>
<p>The expected output is</p>
<pre><code>AFL_v_CalcOneIntAreas (%0x00%);
</code></pre>
<p>but the actual output is same as input string, please let me know why is it behaving like this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The symbols <code>[</code> and <code>]</code> means something in regular expressions, you have to escape them:</p>
<pre><code>&gt;&gt;&gt; re.sub('as_Points\[0\]\.ub_X', '0x00', text)
'AFL_v_CalcOneIntAreas (%0x00%);\n'
</code></pre>
<p><code>[a-z]</code> represents all the lower letters for instance. <code>[...]</code> are used to denote «anything in them» so <code>[01]</code> is for 0 or 1.<br/>
In your case <code>'as_Points[0].ub_X'</code> is in fact <code>'as_Points0.ub_X'</code>.</p>
<p>Note that the <code>.</code> has special meanings too. It means 1 character. You should also escape it too.</p>
<hr/>
<p>If you don't know if your expression contains characters you should escape, you can use <a href="https://docs.python.org/2/library/re.html#re.escape" rel="nofollow">re.escape</a>:</p>
<pre><code>&gt;&gt;&gt; someExpression = "as_Points[0].ub_X"
&gt;&gt;&gt; re.escape(someExpression)
'as\\_Points\\[0\\]\\.ub\\_X'
&gt;&gt;&gt; re.sub(re.escape(someExpression), '0x00', text)
'AFL_v_CalcOneIntAreas (%0x00%);\n'
</code></pre>
<p>But if you don't need regular expression power, strings have the replace method:</p>
<pre><code>text.replace('as_Points[0].ub_X','0x00')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should escape <code>[</code>, <code>]</code> and <code>.</code>:</p>
<pre><code>&gt;&gt;&gt; re.sub('as_Points\[0\]\.ub_X', '0x00', text)
</code></pre>
<p><code>.</code> means "any character", <code>[0]</code> matches only "0".</p>
<p>You can do this as well:</p>
<pre><code>esc = re.escape('as_Points[0].ub_X')  # now '[0]' is treated like the string
                                      # literal '[0]' and not the regex '[0]'
re.sub(esc, '0x00', text)
</code></pre>
<p>Visit the <a href="https://docs.python.org/2/library/re.html" rel="nofollow"><code>re</code> module</a> for more useful functions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your searching for special characters in your regex. You have to escape them.</p>
<pre><code>text = 'AFL_v_CalcOneIntAreas (%as_Points[0].ub_X%);\n'
print(re.sub('as_Points\[0\]\.ub_X', '0x00', text))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're using regular expressions you need to escape characters like <code>[]</code> with backslashes, because they have special meanings.</p>
<p>But you don't need to use regular expressions to replace a literal string. Just use <a href="https://docs.python.org/3/library/string.html" rel="nofollow"><code>replace</code></a>:</p>
<pre><code>print(text.replace('as_Points[0].ub_X','0x00'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to escape <code>[</code> and <code>]</code> and the dot <code>.</code>:</p>
<pre><code>print(re.sub('as_Points\[0\]\.ub_X', '0x00', text))
# prints: AFL_v_CalcOneIntAreas (%0x00%);
</code></pre>
</div>
<span class="comment-copy">Suppose the search string is stored in a variable and I dont know the position of '[' or ']' in variable, is there any other raw string mechanism that accomplish the same?</span>
<span class="comment-copy">@Bharadwaj I have updated my answer. You can use the <code>re.escape</code> function.</span>
<span class="comment-copy">Suppose the search string is stored in a variable and I dont know the position of '[' or ']' in variable, is there any other raw string mechanism that accomplish the same?</span>
<span class="comment-copy">@Bharadwaj See my update.</span>
<span class="comment-copy">Your forgot to escape the . too</span>
<span class="comment-copy">@Dotcomsuperstar In this example it does not matter, but good catch. thx.</span>
<span class="comment-copy">@Marcin Why is \. not important in this case? isn't even the . spl character in re?</span>
<span class="comment-copy">it is special. but in this case .  will match any character, not only dot. this wont change this particular example. but in general, its better to escape it off course.</span>
