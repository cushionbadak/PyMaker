<div class="post-text" itemprop="text">
<p>I get an input as this: <code>1410627645</code>. </p>
<p>I need to convert this to PST. It should be around 2014/09/13-10:00:00. How do I convert it in python/ruby. How do I recognize the time zone?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>Time.at(1410627645).to_datetime.in_time_zone("Pacific Time (US &amp; Canada)")
#=&gt; Sat, 13 Sep 2014 10:00:45 PDT -07:00
</code></pre>
<p>or simply</p>
<pre><code>Time.at(1410627645).in_time_zone("Pacific Time (US &amp; Canada)")
#=&gt; Sat, 13 Sep 2014 10:00:45 PDT -07:00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>Time.at(1410627645).to_datetime
#=&gt; Sat, 13 Sep 2014 19:00:45 +0200
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use <code>datetime</code>:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.fromtimestamp(1410627645)
datetime.datetime(2014, 9, 13, 22, 30, 45)
</code></pre>
<p>now you can sore this in some variable called <code>my_time</code>:</p>
<pre><code>&gt;&gt;&gt; my_time = datetime.datetime.fromtimestamp(1410627645)
&gt;&gt;&gt; "{}/{}/{}-{}:{}:{}".format(my_time.year,my_time.month,my_time.day,my_time.hour,my_time.minute,my_time.second)
'2014/9/13-22:30:45'
</code></pre>
<p>you can identify time zone by <code>time.gmtime</code>:</p>
<pre><code>&gt;&gt;&gt; time.gmtime(1410627645)
time.struct_time(tm_year=2014, tm_mon=9, tm_mday=13, tm_hour=17, tm_min=0, tm_sec=45, tm_wday=5, tm_yday=256, tm_isdst=0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So basically you can also use strftime like this:</p>
<pre><code>DateTime.strftime("1410627645",'%s')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your input is "seconds since Epoch" (POSIX time) then you could use <a href="https://docs.python.org/3/library/datetime.html#datetime.date.fromtimestamp" rel="nofollow"><code>datetime.fromtimestamp()</code></a> method to convert it to the broken-down time in Python.</p>
<p>To get time in UTC timezone:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime, timezone
&gt;&gt;&gt; utc_dt = datetime.fromtimestamp(1410627645, timezone.utc)
&gt;&gt;&gt; utc_dt
datetime.datetime(2014, 9, 13, 17, 0, 45, tzinfo=datetime.timezone.utc)
&gt;&gt;&gt; print(utc_dt)
2014-09-13 17:00:45+00:00
</code></pre>
<p>To get time in your local timezone:</p>
<pre><code>&gt;&gt;&gt; local_dt = utc_dt.astimezone()
&gt;&gt;&gt; local_dt
datetime.datetime(2014, 9, 13, 10, 0, 45,
        tzinfo=datetime.timezone(datetime.timedelta(-1, 61200), 'PDT'))
&gt;&gt;&gt; print(local_dt)
2014-09-13 10:00:45-07:00
</code></pre>
<p>To get time in the specified timezone:</p>
<pre><code>&gt;&gt;&gt; import pytz
&gt;&gt;&gt; dt = datetime.fromtimestamp(1410627645, pytz.timezone('America/Los_Angeles'))
&gt;&gt;&gt; dt
datetime.datetime(2014, 9, 13, 10, 0, 45, 
        tzinfo=&lt;DstTzInfo 'America/Los_Angeles' PDT-1 day, 17:00:00 DST&gt;)
&gt;&gt;&gt; print(dt)
2014-09-13 10:00:45-07:00
</code></pre>
</div>
<span class="comment-copy">you could use <code>my_time.strftime('%Y/%m/%d-%H:%M:%S')</code> instead of the <code>'...'.format(...)</code> call. Don't use <code>fromtimestamp()</code> method without specifying a timezone otherwise it returns naive datetime objects that are ambiguous.</span>
