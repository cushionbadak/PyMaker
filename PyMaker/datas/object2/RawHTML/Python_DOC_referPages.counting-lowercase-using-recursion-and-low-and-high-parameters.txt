<div class="post-text" itemprop="text">
<p>So im trying to create a recursive function that can count the amount of lowercase numbers in a word. This is what I have so far and im having difficulty implementing the low and high parameters that determine the range the function is checking. </p>
<pre><code> def count_lowercase(s, low, high):
    count = 0
    if len(s) == 0:
        return 0
    elif s[low].islower():
        count+=1
    count_lowercase(s[low+1:high])

    return count 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to have the recursion step on the return, so they get called for every size until done.</p>
<p>This code does it, <code>high</code> defines the position of limit:</p>
<pre><code>def count_lowercase(s, high=0):
    count = 0

    if len(s) == 0:
        return 0
    if high == 0:
        high = len(s)
    if s[0].islower():
        count+=1
    return count + count_lowercase(s[1:high+1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a function that checks if the first character is lowercase and recursively adds the number of lowercase characters in the rest of the string, or returns 0 if the string is empty:</p>
<pre><code>def count_lowercase(s):
    return len(s) and s[0].islower() + count_lowercase(s[1:])
</code></pre>
</div>
<span class="comment-copy">Why use recursion here? Why not just splice the section of a string you want to check?</span>
<span class="comment-copy">For starters, if <code>s[low].islower()</code> is true, which character should the function check next? Right, the <i>next</i> character.</span>
<span class="comment-copy">You don't need the <code>low</code> kwarg, since it's always 0 and never specified on subsequent calls</span>
<span class="comment-copy">@C.Nivs True, removed it</span>
<span class="comment-copy">i need a high parameter also, i dont always want to do the entire word</span>
<span class="comment-copy">lol, what happened to the low parameter, I need to be able to count it from any position in the word. This helped a lot though, thx</span>
<span class="comment-copy">@kaiva just implement it based on what's done</span>
