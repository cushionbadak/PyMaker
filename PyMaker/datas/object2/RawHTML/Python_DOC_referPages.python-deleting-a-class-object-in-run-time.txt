<div class="post-text" itemprop="text">
<p>This is my code for reference:</p>
<pre><code>class Manager(Employee):
    def __init__(self, first, last, position, salary):
        super().__init__(first, last, position)
        self.salary = salary

    def getinfo(self):
        return self.first, self.last, self.position, self.salary

    def give_raise(self, employee):
        if type(employee) == type(Teller_1):
            employee.hourly = int(employee.hourly * 1.10)
        else:
            employee.salary = int(employee.salary * 1.10)

    def fire_employee(self, employee):
        if type(employee.first) == type(Branch_manager) or type(employee) == type(Bank_executive):
            print ("you cannot fire someone in an equal or higher position")
        else:
            print ("you have successfully fired " + str(employee.first) + " " + str(employee.last))
            del employee
            print (Analyst_1)


Analyst_1 = SalaryEmployee('Bob', 'Dun', 'Account Analyst', 40000)
</code></pre>
<p>When I put in this code: </p>
<pre><code>Branch_manager.fire_employee(Analyst_1)
</code></pre>
<p>I want it to remove the object "Analyst_1". However, all it is doing is removing the reference variable "employee" and not the object itself. </p>
<p>How can I remove the actual object itself and not just the reference variable?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can delete a <em>name</em> using the <code>del</code> keyword or the <code>delattr</code> built-in function, but you can't delete an <em>object</em>. (Objects don't get deleted, they get <em>garbage collected</em> when no names refer to them anymore.)</p>
<p>If your method looks like:</p>
<pre><code>def fire_employee(employee):
    ...
</code></pre>
<p>and you call it like</p>
<pre><code>fire_employee(Analyst_1)
</code></pre>
<p>then the <em>object</em> that the name <code>Analyst_1</code> refers to will be the same object that the name <code>employee</code> refers to. So even if you delete one of those names, the object itself will still exist as long as the other name still references it.</p>
<p>You can delete the name from the global namespace, if you know what namespace it is and what name it is:</p>
<pre><code>def fire_employee(employee_name):
    module_object = sys.modules[__name__]
    delattr(module_object, employee_name)
</code></pre>
<p>which you would call like this instead:</p>
<pre><code># Note that we pass a *string*, "Analyst_1", and not the *object*.
fire_employee('Analyst_1')
</code></pre>
<p>But if you're going to go that route, you'd be better off keeping the employee name to object mapping in its own data structure, likely a <code>dict</code> object as was already suggested.</p>
</div>
<span class="comment-copy">You should use a collection like a <code>dict</code> of employees. Or encapsulate it in a class <code>Employees</code> with a method for firing (deleting).</span>
<span class="comment-copy">What do you think "removing the object <code>Analyst_1</code>" should do? What do you want to happen if someone uses the name <code>Analyst_1</code> afterwards?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/293431/python-object-deleting-itself">Python object deleting itself</a></span>
