<div class="post-text" itemprop="text">
<p>I wanted to add some stuff to Python's logging module, so I created a separate module under package name "my", which is inside the project's directory (which is the first entry in <code>sys.path</code>). I also have another module of mine, which lives in that same space:</p>
<pre><code>my
my.logging
my.something
</code></pre>
<p>Now I wanted to log stuff in <code>my.something</code> and added <code>import logging</code> to the file - but it seems Python loads <code>my.logging</code> instead of the standard module. </p>
<p>When reading the Python documentation (section 6.1.2. The Module Search Path), I thought I was safe:</p>
<blockquote>
<p>When a module named spam is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named spam.py in a list of directories given by the variable sys.path.</p>
</blockquote>
<p>So a "standard module" is not a "built-in module"? I guess then, that I have to move the <code>my</code> modules out of the current directory - ? Other possibilities?</p>
</div>
<div class="post-text" itemprop="text">
<p>When it says "built-in module", that line of docs is referring to modules actually compiled directly into the Python executable. You can see which ones those are in <a href="https://docs.python.org/3/library/sys.html#sys.builtin_module_names" rel="nofollow noreferrer"><code>sys.builtin_module_names</code></a>.</p>
<p>What you need to do is turn off implicit relative imports, which can be done on a per-file basis with the <code>absolute_import</code> future statement:</p>
<pre><code>from __future__ import absolute_import
</code></pre>
</div>
