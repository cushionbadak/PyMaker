<div class="post-text" itemprop="text">
<p>I've tried to look around the web for answers to splitting a string into an array of characters but I can't seem to find a simple method</p>
<p><code>str.split(//)</code> does not seem to work like Ruby does. Is there a simple way of doing this without looping?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; s = "foobar"
&gt;&gt;&gt; list(s)
['f', 'o', 'o', 'b', 'a', 'r']
</code></pre>
<p>You need <a href="http://docs.python.org/library/functions.html#list" rel="noreferrer">list</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You take the string and pass it to list()</p>
<pre><code>s = "mystring"
l = list(s)
print l
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also do it in this very simple way without list():</p>
<pre><code>&gt;&gt;&gt; [c for c in "foobar"]
['f', 'o', 'o', 'b', 'a', 'r']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to process your String one character at a time. you have various options.  </p>
<pre><code>uhello = u'Hello\u0020World'
</code></pre>
<blockquote>
<p><strong>Using List comprehension:</strong> </p>
</blockquote>
<pre><code>print([x for x in uhello])
</code></pre>
<p>Output:</p>
<pre><code>['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']
</code></pre>
<blockquote>
<p><strong>Using map:</strong> </p>
</blockquote>
<pre><code>print(list(map(lambda c2: c2, uhello)))
</code></pre>
<p>Output:</p>
<pre><code>['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']
</code></pre>
<blockquote>
<p><strong>Calling Built in list function:</strong> </p>
</blockquote>
<pre><code>print(list(uhello))
</code></pre>
<p>Output:  </p>
<pre><code>['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']
</code></pre>
<blockquote>
<p><strong>Using for loop:</strong> </p>
</blockquote>
<pre><code>for c in uhello:
    print(c)
</code></pre>
<p>Output:  </p>
<pre><code>H
e
l
l
o

W
o
r
l
d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I explored another two ways to accomplish this task. It may be helpful for someone.</p>
<p>The first one is easy:</p>
<pre><code>In [25]: a = []
In [26]: s = 'foobar'
In [27]: a += s
In [28]: a
Out[28]: ['f', 'o', 'o', 'b', 'a', 'r']
</code></pre>
<p>And the second one use <a href="https://docs.python.org/2/library/functions.html#map"><code>map</code></a> and <code>lambda</code> function. It may be appropriate for more complex tasks:</p>
<pre><code>In [36]: s = 'foobar12'
In [37]: a = map(lambda c: c, s)
In [38]: a
Out[38]: ['f', 'o', 'o', 'b', 'a', 'r', '1', '2']
</code></pre>
<p>For example</p>
<pre><code># isdigit, isspace or another facilities such as regexp may be used
In [40]: a = map(lambda c: c if c.isalpha() else '', s)
In [41]: a
Out[41]: ['f', 'o', 'o', 'b', 'a', 'r', '', '']
</code></pre>
<p>See <a href="https://docs.python.org/2/library/stdtypes.html#string-methods">python docs</a> for more methods</p>
</div>
<div class="post-text" itemprop="text">
<p>The task boils down to iterating over characters of the string and collecting them into a list. The most na√Øve solution would look like</p>
<pre><code>result = []
for character in string:
    result.append(character)
</code></pre>
<p>Of course, it can be shortened to just</p>
<pre><code>result = [character for character in string]
</code></pre>
<p>but there still are shorter solutions that do the same thing.</p>
<p><a href="https://docs.python.org/3/library/functions.html#func-list" rel="noreferrer"><code>list</code></a> constructor can be used to convert any <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="noreferrer"><em>iterable</em></a> (iterators, lists, tuples, string etc.) to list. </p>
<pre><code>&gt;&gt;&gt; list('abc')
['a', 'b', 'c']
</code></pre>
<p>The big plus is that it works the same in both Python 2 and Python 3.</p>
<p>Also, starting from Python 3.5 (thanks to the awesome <a href="https://www.python.org/dev/peps/pep-0448/" rel="noreferrer" title="Additional Unpacking Generalizations">PEP 448</a>) it's now possible to build a list from any iterable by unpacking it to an empty list literal:</p>
<pre><code>&gt;&gt;&gt; [*'abc']
['a', 'b', 'c']
</code></pre>
<p>This is neater, and in some cases more efficient than calling <code>list</code> constructor directly.</p>
<p>I'd advise against using <code>map</code>-based approaches, because <code>map</code> does <em>not</em> return a list in Python 3. See <em><a href="https://stackoverflow.com/q/13638898/2301450">How to use filter, map, and reduce in Python 3</a></em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>simple:</p>
<pre><code>s = 'My'    
print(list(s))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I you just need an array of chars:</p>
<pre><code>arr = list(str)
</code></pre>
<p>If you want to split the str by a particular str:</p>
<pre><code># str = "temp//temps" will will be ['temp', 'temps']
arr = str.split("//")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>split()</code> inbuilt function will only separate the value on the basis of certain condition but in the single word, it cannot fulfill the condition. So, it can be solved with the help of <code>list()</code>. It internally calls the Array and it will store the value on the basis of an array.</p>
<p>Suppose,</p>
<pre><code>a = "bottle"
a.split() // will only return the word but not split the every single char.

a = "bottle"
list(a) // will separate ['b','o','t','t','l','e']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you wish to read only access to the string you can use array notation directly.</p>
<pre><code>Python 2.7.6 (default, Mar 22 2014, 22:59:38) 
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; t = 'my string'
&gt;&gt;&gt; t[1]
'y'
</code></pre>
<p>Could be useful for testing without using regexp.
Does the string contain an ending newline?</p>
<pre><code>&gt;&gt;&gt; t[-1] == '\n'
False
&gt;&gt;&gt; t = 'my string\n'
&gt;&gt;&gt; t[-1] == '\n'
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, much as I like the list(s) version, here's another more verbose way I found (but it's cool so I thought I'd add it to the fray):</p>
<pre><code>&gt;&gt;&gt; text = "My hovercraft is full of eels"
&gt;&gt;&gt; [text[i] for i in range(len(text))]
['M', 'y', ' ', 'h', 'o', 'v', 'e', 'r', 'c', 'r', 'a', 'f', 't', ' ', 'i', 's', ' ', 'f', 'u', 'l', 'l', ' ', 'o', 'f', ' ', 'e', 'e', 'l', 's']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import chain

string = 'your string'
chain(string)
</code></pre>
<p>similar to <code>list(string)</code> but returns a generator that is lazily evaluated at point of use, so memory efficient.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; for i in range(len(a)):
...     print a[i]
... 
</code></pre>
<p>where a is the string that you want to separate out. The values "a[i]" are the individual character of the the string these could be appended to a list.</p>
</div>
<span class="comment-copy">In Python, strings are already arrays of characters for all purposes except replacement.  You can slice them, reference or look up items by index, etc.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/q/4481724/321973">Link to other direction</a></span>
<span class="comment-copy">In my opinion much better than the ruby method, you can convert between sequence types freely, even better, in C level.</span>
<span class="comment-copy">Simply beautiful! I have been looking for a solution to this problem for sometime now I should have guessed python provided something as simple as this.</span>
<span class="comment-copy">Wow, and now I know why people adore python.</span>
<span class="comment-copy">@Monacraft Lol I know right.</span>
<span class="comment-copy">list constructor is a elegant feature which automatically converts string to character array. Since, String is a homogenous sequence of unicode characters its so cool to be working with Python and creator Guido has made it the better. Loving python for its wonderful capabilities.</span>
<span class="comment-copy">Welcome to stackoverflow. Would you mind extending the answer a little bit to explain how it solves the problem.</span>
<span class="comment-copy">This is a mere <code>for</code>, there's not much to explain. I think you should read the python tutorial on <a href="https://docs.python.org/2/tutorial/datastructures.html" rel="nofollow noreferrer">data structures</a>, especially list comprehension.</span>
<span class="comment-copy">This just means <code>list(map(lambda c: c, iter("foobar")))</code>, but more readable and meaningful.</span>
<span class="comment-copy">The first way is very simple.  Are there reasons people would want something more complex?</span>
<span class="comment-copy">Hello! First option is simple indeed. The second one, though, has better potential for handling more complex processing.</span>
<span class="comment-copy">I think the last proposal is very nice. But I don't see why you revisited some of the other approaches, (most of them) have been posted here already and distract from the <i>amazing</i> python 3.5 solution!</span>
<span class="comment-copy">@MSeifert: I thought it would be nice to have a more or less complete answer</span>
<span class="comment-copy">That should be the accepted answer !</span>
<span class="comment-copy">Plus one for your hovercraft being full of eels.</span>
<span class="comment-copy"><code>for c in a: print c</code> is far more direct</span>
