<div class="post-text" itemprop="text">
<p>I need to accomplish the following task:</p>
<p>from:</p>
<pre><code>a = array([[1,3,4],[1,2,3]...[1,2,1]])
</code></pre>
<p>(add one element to each row) to:</p>
<pre><code>a = array([[1,3,4,x],[1,2,3,x]...[1,2,1,x]])
</code></pre>
<p>I have tried doing stuff like a[n] = array([1,3,4,x])</p>
<p>but numpy complained of shape mismatch. I tried iterating through <code>a</code> and appending element x to each item, but the changes are not reflected.</p>
<p>Any ideas on how I can accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Appending data to an existing array is a natural thing to want to do for anyone with python experience.  However, if you find yourself regularly appending to large arrays, you'll quickly discover that NumPy doesn't easily or efficiently do this the way a python <code>list</code> will.  You'll find that every "append" action requires re-allocation of the array memory and short-term doubling of memory requirements.  So, the more general solution to the problem is to try to allocate arrays to be as large as the final output of your algorithm.  Then perform all your operations on sub-sets (<a href="http://docs.scipy.org/doc/numpy/user/basics.indexing.html#other-indexing-options" rel="noreferrer">slices</a>) of that array.  Array creation and destruction should ideally be minimized.</p>
<p>That said, It's often unavoidable and the functions that do this are:</p>
<p>for 2-D arrays:</p>
<ul>
<li><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html" rel="noreferrer">np.hstack</a> </li>
<li><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html" rel="noreferrer">np.vstack</a></li>
<li><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.column_stack.html" rel="noreferrer">np.column_stack</a></li>
<li><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.ma.row_stack.html" rel="noreferrer">np.row_stack</a></li>
</ul>
<p>for 3-D arrays (the above plus):</p>
<ul>
<li><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.dstack.html" rel="noreferrer">np.dstack</a></li>
</ul>
<p>for N-D arrays:</p>
<ul>
<li><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html" rel="noreferrer">np.concatenate</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre><code>import numpy as np
a = np.array([[1,3,4],[1,2,3],[1,2,1]])
b = np.array([10,20,30])
c = np.hstack((a, np.atleast_2d(b).T))
</code></pre>
<p>returns <code>c</code>:</p>
<pre><code>array([[ 1,  3,  4, 10],
       [ 1,  2,  3, 20],
       [ 1,  2,  1, 30]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to do it (may not be the best) is to create another array with the new elements and do column_stack. i.e.</p>
<pre><code>&gt;&gt;&gt;a = array([[1,3,4],[1,2,3]...[1,2,1]])
[[1 3 4]
 [1 2 3]
 [1 2 1]]

&gt;&gt;&gt;b = array([1,2,3])
&gt;&gt;&gt;column_stack((a,b))
array([[1, 3, 4, 1],
       [1, 2, 3, 2],
       [1, 2, 1, 3]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Appending a single scalar could be done a bit easier as already shown (and also without converting to float) by expanding the scalar to a python-list-type:  </p>
<pre><code>import numpy as np
a = np.array([[1,3,4],[1,2,3],[1,2,1]])
x = 10

b = np.hstack ((a, [[x]] * len (a) ))
</code></pre>
<p>returns <code>b</code> as:</p>
<pre><code>array([[ 1,  3,  4, 10],
       [ 1,  2,  3, 10],
       [ 1,  2,  1, 10]])
</code></pre>
<p>Appending a row could be done by:</p>
<pre><code>c = np.vstack ((a, [x] * len (a[0]) ))
</code></pre>
<p>returns <code>c</code> as:</p>
<pre><code>array([[ 1,  3,  4],
       [ 1,  2,  3],
       [ 1,  2,  1],
       [10, 10, 10]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If <code>x</code> is just a single scalar value, you could try something like this to ensure the correct shape of the array that is being appended/concatenated to the rightmost column of <code>a</code>:</p>
<pre><code>import numpy as np
a = np.array([[1,3,4],[1,2,3],[1,2,1]])
x = 10
b = np.hstack((a,x*np.ones((a.shape[0],1))))
</code></pre>
<p>returns <code>b</code> as:</p>
<pre><code>array([[  1.,   3.,   4.,  10.],
       [  1.,   2.,   3.,  10.],
       [  1.,   2.,   1.,  10.]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.insert.html" rel="nofollow noreferrer">np.insert</a> can also be used for the purpose</p>
<pre><code>import numpy as np
a = np.array([[1, 3, 4],
              [1, 2, 3],
              [1, 2, 1]])
x = 5
index = 3 # the position for x to be inserted before
np.insert(a, index, x, axis=1)
</code></pre>
<pre><code>array([[1, 3, 4, 5],
       [1, 2, 3, 5],
       [1, 2, 1, 5]])
</code></pre>
<p><code>index</code> can also be a <code>list</code>/<code>tuple</code></p>
<pre><code>&gt;&gt;&gt; index = [1, 1, 3] # equivalently (1, 1, 3)
&gt;&gt;&gt; np.insert(a, index, x, axis=1)
array([[1, 5, 5, 3, 4, 5],
       [1, 5, 5, 2, 3, 5],
       [1, 5, 5, 2, 1, 5]])
</code></pre>
<p>or a <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a></p>
<pre><code>&gt;&gt;&gt; index = slice(0, 3)
&gt;&gt;&gt; np.insert(a, index, x, axis=1)
array([[5, 1, 5, 3, 5, 4],
       [5, 1, 5, 2, 5, 3],
       [5, 1, 5, 2, 5, 1]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>target = []

for line in a.tolist():
    new_line = line.append(X)
    target.append(new_line)

return array(target)
</code></pre>
</div>
<span class="comment-copy">great references. thanks @Paul</span>
<span class="comment-copy">also worth mentioning are the shortcut index tricks c_ and h_</span>
<span class="comment-copy">hstack() and vstack() was what I needed.</span>
<span class="comment-copy">@wim. And <code>r_</code>, which is my personal most-frequently used because it allows concatenating in scalars.</span>
