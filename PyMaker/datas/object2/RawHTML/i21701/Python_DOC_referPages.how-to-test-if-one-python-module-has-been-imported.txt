<div class="post-text" itemprop="text">
<p>How to test if a module has been imported in python?</p>
<p>for example I need the basics:</p>
<pre><code>if not has_imported("sys"):
   import sys
</code></pre>
<p>also</p>
<pre><code>if not has_imported("sys.path"): 
   from sys import path
</code></pre>
<p>Thanks!</p>
<p>Rgs.</p>
<p>Thanks for all of your comments:
the code been pasted here.
<a href="https://stackoverflow.com/questions/5037468/auto-import-all-sub-modules-in-a-folder-then-invoke-same-name-functions-python">auto import all sub modules in a folder then invoke same name functions - python runtime inspect related</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to optimize by not importing things twice, save yourself the hassle because Python already takes care of this.</p>
<p>If you <em>need</em> this to avoid <code>NameErrors</code> or something: Fix your sloppy coding - make sure you don't need this, i.e. define (import) everything before you ever use it (in the case if imports: once, at startup, at module level).</p>
<p>In case you do have a good reason: <code>sys.modules</code> is a dictionary containing all modules already imported somewhere. But it only contains modules, and because of the way <code>from &lt;module&gt; import &lt;variable&gt;</code> works (import the whole module as usual, extract the things you import from it), <code>from sys import path</code> would only add <code>sys</code> to <code>sys.modules</code> (if it wasn't already imported on startup). <code>from pkg import module</code> adds <code>pkg.module</code> as you probably expect.</p>
</div>
<div class="post-text" itemprop="text">
<p>I feel the answer that has been accepted is not fully correct.</p>
<p>Python <strong>still has overhead</strong> when importing the same module multiple times. Python <strong>handles it without giving you an error</strong>, sure, but that doesn't mean it won't slow down your script. As you will see from the URL below, there is <strong>significant</strong> overhead when importing a module multiple times. </p>
<p>For example, in a situation where you may not need a certain module except under a particular condition, if that module is large or has a high overhead then there is reason to import only on condition. That does not explicitly mean you are a sloppy coder either.</p>
<p><a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Import_Statement_Overhead">https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Import_Statement_Overhead</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from sys import modules
try:
    module = modules[module_name]
except KeyError:
    __import__('m')   
</code></pre>
<p>this is my solution of changing code at runtime!</p>
</div>
<span class="comment-copy">I can not imagine any case where you would have to worry about the performance of doing reloads on modules. Firstly because they are slow no matter what you do, secondly because if you need to reload a module so often that it has a performance issue you are doing things VERY WRONGLY. I bet a fiver on that you are barking up the wrong tree, and that you are trying to solve an issue in the entirely wrong way. Please always explain <i>why</i> you feel the need to solve the problem you want solved. It helps you get answers that put you on the right track.</span>
<span class="comment-copy">thanks, the code been pasted here: <a href="http://stackoverflow.com/questions/5037468/auto-import-all-sub-modules-in-a-folder-then-invoke-same-name-functions-python" title="auto import all sub modules in a folder then invoke same name functions python">stackoverflow.com/questions/5037468/â€¦</a></span>
<span class="comment-copy">thanks, so it means the optimize for the twice import is not necessary? how about the the 'reload(sys)' if i forgot the 'import sys', is that means i can 'import sys; reload(sys)' without lost performance?</span>
<span class="comment-copy">@user: <code>reload</code> explicitly circumvents the caching <code>import</code> uses to, well, reload a module if the source has changed since you imported it. You usually don't need it except when experimenting in the interactive prompt - and even there, late binding may come to the rescue (e.g. if you define <code>def f(): return os.listdir(os.getcwd())</code>, you can <code>import os</code> afterwards and future calls to the function will work!).</span>
<span class="comment-copy">@user478514: "the optimize for the twice import is not necessary".  Correct.  Python already does this.  Please read the tutorial again.  The <code>import sys; reload(sys)</code> is a silly example.  Since your code will will never do this, don't optimize for it.</span>
<span class="comment-copy">Note that the sys.modules only contains the original name of the module, - not the aliased, e.g.: <code>import networkx as nx; import sys; 'nx' in sys.modules</code> returns <code>False</code>, while <code>import networkx as nx; import sys; 'networkx' in sys.modules</code> returns True.</span>
<span class="comment-copy">With CPython v3.5.1 it's an overhead of only ~3ns per call. Tested with <code>%timeit '''import json; json.dumps(data)'''</code> and <code>import json; %timeit '''json.dumps(data)'''</code> with <code>data = ['foo', {'bar': ('baz', None, 1.0, 2)}]</code>.</span>
<span class="comment-copy">Yeah, that makes sense. But the specific module you are loading can make a difference in that time too. Because when you import a module the code runs immediately - Keywords such as <code>def</code> and <code>class</code> are actively being loaded and run. That is why we have that <code>if __name__ == "__main__":</code> bit, so that code doesn't run unless you make a direct call to it.  So to be honest here, I don't know for sure if subsequent calls to a module still run the code or not...</span>
<span class="comment-copy">Good point, so the time for each import is dependent on the number of functions and (i.e. in case of seaborn) the possibility of code beeing executed during the sheer import. At least, it seems like CPython does not re-execute the code for subsequent import commands for the same module (<a href="https://docs.python.org/3/reference/import.html#the-module-cache" rel="nofollow noreferrer">doc</a>) - unless <a href="https://docs.python.org/3/library/importlib.html#importlib.reload" rel="nofollow noreferrer">importlib.reload(module)</a> is called manually.</span>
