<div class="post-text" itemprop="text">
<p>I have this simple piece of code that returns what's in the title.  Why doesn't the array simply print?  This is not just an <code>itertools</code> issue I've also noticed it for other code where it'll just return the object location.</p>
<p>Here is the code.  I'm running 2.7.1, an enthought distribution (pylab) - using it for class.</p>
<pre><code>import itertools

number = [53, 64, 68, 71, 77, 82, 85]

print itertools.combinations(number, 4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't print a simple list because the returned object is not a list. Apply the <code>list</code> function on it if you really need a list.</p>
<pre><code>print list(itertools.combinations(number, 4))
</code></pre>
<hr/>
<p><code>itertools.combinations</code> returns an iterator. An iterator is something that you can apply <code>for</code> on. Usually, elements of an iterator is computed as soon as you fetch it, so there is no penalty of copying  all the content to memory, unlike a <code>list</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>for x in itertools.combinations(number, 4):
   print x
</code></pre>
<p>Or shorter:</p>
<pre><code>results = [x for x in itertools.combinations(number, 4) ]
</code></pre>
<p>Basically, all of the <a href="http://docs.python.org/library/itertools.html" rel="noreferrer">itertools</a> module functions return this type of object. The idea is that, rather than computing a list of answers up front, they return an iterable object that 'knows' how to compute the answers, but doesn't do so unless `asked.' This way, there is no significant up front cost for computing elements. See also <a href="http://wiki.python.org/moin/Generators" rel="noreferrer">this very good introduction to generators</a>.</p>
</div>
<span class="comment-copy">I've tagged your question as 'homework' because you mentioned 'using it for a class' -- let me know if that's actually not true for this particular question.</span>
<span class="comment-copy">Is there like a .next() function to get the next element ? without using a for loop, I don't want to copy the whole thing to memory</span>
<span class="comment-copy">@Curious Yes, call <code>next(c)</code> where <code>c</code> is the combinations iterator.</span>
<span class="comment-copy">Thanks @kennytm, is it correct to assume that I can't access the 10th index unless I call <code>next</code> 10 times ?</span>
<span class="comment-copy">@Curious You could use <code>itertools.islice</code> to jump to the 10th index (check the <code>nth</code> recipe in <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html</a>).</span>
