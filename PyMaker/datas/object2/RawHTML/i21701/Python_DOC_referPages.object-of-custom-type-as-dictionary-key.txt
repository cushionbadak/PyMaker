<div class="post-text" itemprop="text">
<p>What must I do to use my objects of a custom type as keys in a Python dictionary (where I don't want the "object id" to act as the key) , e.g. </p>
<pre><code>class MyThing:
    def __init__(self,name,location,length):
            self.name = name
            self.location = location
            self.length = length
</code></pre>
<p>I'd want to use MyThing's as keys that are considered the same if name and location are the same.
From C#/Java I'm used to having to override and provide an equals and hashcode method, and promise not to mutate anything the hashcode depends on.</p>
<p>What must I do in Python to accomplish this ? Should I even ? </p>
<p>(In a simple case, like here, perhaps it'd be better to just place a (name,location) tuple as key - but consider I'd want the key to be an object)</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to add <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="noreferrer">2 methods</a>, note <code>__hash__</code> and  <code>__eq__</code>:</p>
<pre><code>class MyThing:
    def __init__(self,name,location,length):
        self.name = name
        self.location = location
        self.length = length

    def __hash__(self):
        return hash((self.name, self.location))

    def __eq__(self, other):
        return (self.name, self.location) == (other.name, other.location)

    def __ne__(self, other):
        # Not strictly necessary, but to avoid having both x==y and x!=y
        # True at the same time
        return not(self == other)
</code></pre>
<p>The Python <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="noreferrer">dict documentation</a> defines these requirements on key objects, i.e. they must be <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="noreferrer">hashable</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>An alternative in Python 2.6 or above is to use <code>collections.namedtuple()</code> -- it saves you writing any special methods:</p>
<pre><code>from collections import namedtuple
MyThingBase = namedtuple("MyThingBase", ["name", "location"])
class MyThing(MyThingBase):
    def __new__(cls, name, location, length):
        obj = MyThingBase.__new__(cls, name, location)
        obj.length = length
        return obj

a = MyThing("a", "here", 10)
b = MyThing("a", "here", 20)
c = MyThing("c", "there", 10)
a == b
# True
hash(a) == hash(b)
# True
a == c
# False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You override <code>__hash__</code> if you want special hash-semantics, and <code>__cmp__</code> or <code>__eq__</code> in order to make your class usable as a key. Objects who compare equal need to have the same hash value.</p>
<p>Python expects <code>__hash__</code> to return an integer, returning <code>Banana()</code> is not recommended :) </p>
<p>User defined classes have <code>__hash__</code> by default that calls <code>id(self)</code>, as you noted.</p>
<p>There is some extra tips from the <a href="http://docs.python.org/reference/datamodel.html#object.__hash__" rel="noreferrer">documentation</a>.:</p>
<blockquote>
<p>Classes which inherit a <code>__hash__()</code>
  method from a parent class but change
  the meaning of <code>__cmp__()</code> or <code>__eq__()</code>
  such that the hash value returned is
  no longer appropriate (e.g. by
  switching to a value-based concept of
  equality instead of the default
  identity based equality) can
  explicitly flag themselves as being
  unhashable by setting <code>__hash__ = None</code>
  in the class definition. Doing so
  means that not only will instances of
  the class raise an appropriate
  TypeError when a program attempts to
  retrieve their hash value, but they
  will also be correctly identified as
  unhashable when checking
  <code>isinstance(obj, collections.Hashable)</code>
  (unlike classes which define their own
  <code>__hash__()</code> to explicitly raise TypeError).</p>
</blockquote>
</div>
<span class="comment-copy">What's wrong with using the hash?</span>
<span class="comment-copy">Probably because he wants two <code>MyThing</code>, if they have the same <code>name</code> and <code>location</code>, to index the dictionary to return the same value, even if they were created separately as two different "objects".</span>
<span class="comment-copy">"perhaps it'd be better to just place a (name,location) tuple as key - but consider I'd want the key to be an object)" You mean: a NON-COMPOSITE object ?</span>
<span class="comment-copy"><code>hash(self.name)</code> looks nicer than <code>self.name.__hash__()</code>, and if you do and you can do <code>hash((x, y))</code> to avoid XORing yourself.</span>
<span class="comment-copy">As an additional note, I just discovered that calling <code>x.__hash__()</code> like that is also <i>wrong</i>, because it <i>can</i> produce <i>incorrect</i> results: <a href="http://pastebin.com/C9fSH7eF" rel="nofollow noreferrer">pastebin.com/C9fSH7eF</a></span>
<span class="comment-copy">@Rosh Oxymoron: thank you for the comment. When writing I was using explicit <code>and</code> for <code>__eq__</code> but then I thought "why not using tuples?" because I often do that anyway (I think it's more readable). For some strange reason my eyes didn't go back to question about <code>__hash__</code> however.</span>
<span class="comment-copy">@Rosh Oxymoron: I'm not sure I understand 100% your second comment. Are an instance of <code>A</code> and one of <code>B</code> to compare equal or not? If yes then that <code>__hash__</code> implementation is breaching the contract (if two objects compare equal they should return the same value from <code>__hash__</code> - see <a href="http://docs.python.org/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">docs.python.org/reference/datamodel.html#object.__hash__</a> ). If on the other side they're not going to compare equal then it's ok for an implementation to call <code>__hash__</code> directly... what am I missing?</span>
<span class="comment-copy">@user877329: are you trying to use some blender data structure as keys? Apparently from some repos certain objects require you to "freeze" them first to avoid mutability (mutating a value-based object that has been used as a key in a python dictionary is not permitted)</span>
<span class="comment-copy">The hash alone is not enough, additionally you either need to override <code>__eq__</code> or <code>__cmp__</code>.</span>
<span class="comment-copy">@Oben Sonne: <code>__cmp__</code> is given to you by Python if it is a user defined class, but you probably want to override them anyway to accommodate for new semantics.</span>
<span class="comment-copy">@Skurmedel: Yes, but although you can call <code>cmp</code> and use <code>=</code> on user classes which do not override these methods, one of them must be implemented to meet the questioner's requirement that instances with similar name and location have the same dictionary key.</span>
