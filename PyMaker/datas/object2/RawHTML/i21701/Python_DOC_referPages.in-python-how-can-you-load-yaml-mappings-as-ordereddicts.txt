<div class="post-text" itemprop="text">
<p>I'd like to get <a href="http://pyyaml.org/" rel="noreferrer">PyYAML</a>'s loader to load mappings (and ordered mappings) into the Python 2.7+ <a href="http://docs.python.org/library/collections.html#collections.OrderedDict" rel="noreferrer">OrderedDict</a> type, instead of the vanilla <code>dict</code> and the list of pairs it currently uses.</p>
<p>What's the best way to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update:</strong> In python 3.6+ you probably don't need <code>OrderedDict</code> at all due to the <a href="https://docs.python.org/3.6/whatsnew/3.6.html#new-dict-implementation" rel="noreferrer">new dict implementation</a> that has been in use in pypy for some time (although considered CPython implementation detail for now).</p>
<p><strong>Update:</strong> In python 3.7+, <em>the insertion-order preservation nature of dict objects has been declared to be an official part of the Python language spec</em>, see <a href="https://docs.python.org/3/whatsnew/3.7.html" rel="noreferrer">What's New In Python 3.7</a>.</p>
<p>I like @James' <a href="https://stackoverflow.com/a/21048064/650222">solution</a> for its simplicity. However, it changes the default global <code>yaml.Loader</code> class, which can lead to troublesome side effects. Especially, when writing library code this is a bad idea. Also, it doesn't directly work with <code>yaml.safe_load()</code>.</p>
<p>Fortunately, the solution can be improved without much effort:</p>
<pre><code>import yaml
from collections import OrderedDict

def ordered_load(stream, Loader=yaml.Loader, object_pairs_hook=OrderedDict):
    class OrderedLoader(Loader):
        pass
    def construct_mapping(loader, node):
        loader.flatten_mapping(node)
        return object_pairs_hook(loader.construct_pairs(node))
    OrderedLoader.add_constructor(
        yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG,
        construct_mapping)
    return yaml.load(stream, OrderedLoader)

# usage example:
ordered_load(stream, yaml.SafeLoader)
</code></pre>
<p>For serialization, I don't know an obvious generalization, but at least this shouldn't have any side effects:</p>
<pre><code>def ordered_dump(data, stream=None, Dumper=yaml.Dumper, **kwds):
    class OrderedDumper(Dumper):
        pass
    def _dict_representer(dumper, data):
        return dumper.represent_mapping(
            yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG,
            data.items())
    OrderedDumper.add_representer(OrderedDict, _dict_representer)
    return yaml.dump(data, stream, OrderedDumper, **kwds)

# usage:
ordered_dump(data, Dumper=yaml.SafeDumper)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The yaml module allow you to specify custom 'representers' to convert Python objects to text and 'constructors' to reverse the process.</p>
<pre><code>_mapping_tag = yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG

def dict_representer(dumper, data):
    return dumper.represent_dict(data.iteritems())

def dict_constructor(loader, node):
    return collections.OrderedDict(loader.construct_pairs(node))

yaml.add_representer(collections.OrderedDict, dict_representer)
yaml.add_constructor(_mapping_tag, dict_constructor)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>2018 option:</h1>
<p><a href="https://github.com/wimglenn/oyaml" rel="noreferrer"><code>oyaml</code></a> is a drop-in replacement for <a href="https://github.com/yaml/pyyaml" rel="noreferrer">PyYAML</a> which preserves dict ordering. Both Python 2 and Python 3 are supported. Just <code>pip install oyaml</code>, and import as shown below:</p>
<pre><code>import oyaml as yaml
</code></pre>
<p>You'll no longer be annoyed by screwed-up mappings when dumping/loading.</p>
<p><sub><em>Note:</em> I'm the author of oyaml.</sub></p>
</div>
<div class="post-text" itemprop="text">
<h1>2015 (and later) option:</h1>
<p><a href="https://pypi.python.org/pypi/ruamel.yaml" rel="nofollow noreferrer">ruamel.yaml</a> is a drop in replacement for PyYAML (disclaimer: I am the author of that package). Preserving the order of the mappings was one of the things added in the first version (0.1) back in 2015. Not only does it preserve the order of your dictionaries, it will also preserve comments, anchor names, tags and does support the YAML 1.2 specification (released 2009)</p>
<p>The specification says that the ordering is not guaranteed, but of course there is ordering in the YAML file and the appropriate parser can just hold on to that and transparently generate an object that keeps the ordering. You just need to choose the right parser, loader and dumperÂ¹:</p>
<pre><code>import sys
from ruamel.yaml import YAML

yaml_str = """\
3: abc
conf:
    10: def
    3: gij     # h is missing
more:
- what
- else
"""

yaml = YAML()
data = yaml.load(yaml_str)
data['conf'][10] = 'klm'
data['conf'][3] = 'jig'
yaml.dump(data, sys.stdout)
</code></pre>
<p>will give you:</p>
<pre><code>3: abc
conf:
  10: klm
  3: jig       # h is missing
more:
- what
- else
</code></pre>
<p><code>data</code> is of type <code>CommentedMap</code> which functions like a dict, but has extra information that is kept around until being dumped (including the preserved comment!)</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Note</strong>: there is a library, based on the following answer, which implements also the CLoader and CDumpers: <a href="https://github.com/Phynix/yamlloader" rel="nofollow noreferrer">Phynix/yamlloader</a></p>
<p>I doubt very much that this is the best way to do it, but this is the way I came up with, and it does work. Also available <a href="https://gist.github.com/844388" rel="nofollow noreferrer">as a gist</a>.</p>
<pre><code>import yaml
import yaml.constructor

try:
    # included in standard lib from Python 2.7
    from collections import OrderedDict
except ImportError:
    # try importing the backported drop-in replacement
    # it's available on PyPI
    from ordereddict import OrderedDict

class OrderedDictYAMLLoader(yaml.Loader):
    """
    A YAML loader that loads mappings into ordered dictionaries.
    """

    def __init__(self, *args, **kwargs):
        yaml.Loader.__init__(self, *args, **kwargs)

        self.add_constructor(u'tag:yaml.org,2002:map', type(self).construct_yaml_map)
        self.add_constructor(u'tag:yaml.org,2002:omap', type(self).construct_yaml_map)

    def construct_yaml_map(self, node):
        data = OrderedDict()
        yield data
        value = self.construct_mapping(node)
        data.update(value)

    def construct_mapping(self, node, deep=False):
        if isinstance(node, yaml.MappingNode):
            self.flatten_mapping(node)
        else:
            raise yaml.constructor.ConstructorError(None, None,
                'expected a mapping node, but found %s' % node.id, node.start_mark)

        mapping = OrderedDict()
        for key_node, value_node in node.value:
            key = self.construct_object(key_node, deep=deep)
            try:
                hash(key)
            except TypeError, exc:
                raise yaml.constructor.ConstructorError('while constructing a mapping',
                    node.start_mark, 'found unacceptable key (%s)' % exc, key_node.start_mark)
            value = self.construct_object(value_node, deep=deep)
            mapping[key] = value
        return mapping
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Update</strong>: the library was deprecated in favor of the <a href="https://github.com/Phynix/yamlloader" rel="nofollow noreferrer">yamlloader</a> (which is based on the yamlordereddictloader)</p>
<p>I've just found a Python library (<a href="https://pypi.python.org/pypi/yamlordereddictloader/0.1.1" rel="nofollow noreferrer">https://pypi.python.org/pypi/yamlordereddictloader/0.1.1</a>) which was created based on answers to this question and is quite simple to use:</p>
<pre><code>import yaml
import yamlordereddictloader

datas = yaml.load(open('myfile.yml'), Loader=yamlordereddictloader.Loader)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On my For PyYaml installation for Python 2.7 I updated __init__.py, constructor.py, and loader.py. Now supports object_pairs_hook option for load commands. Diff of changes I made is below.</p>
<pre><code>__init__.py

$ diff __init__.py Original
64c64
&lt; def load(stream, Loader=Loader, **kwds):
---
&gt; def load(stream, Loader=Loader):
69c69
&lt;     loader = Loader(stream, **kwds)
---
&gt;     loader = Loader(stream)
75c75
&lt; def load_all(stream, Loader=Loader, **kwds):
---
&gt; def load_all(stream, Loader=Loader):
80c80
&lt;     loader = Loader(stream, **kwds)
---
&gt;     loader = Loader(stream)

constructor.py

$ diff constructor.py Original
20,21c20
&lt;     def __init__(self, object_pairs_hook=dict):
&lt;         self.object_pairs_hook = object_pairs_hook
---
&gt;     def __init__(self):
27,29d25
&lt;     def create_object_hook(self):
&lt;         return self.object_pairs_hook()
&lt;
54,55c50,51
&lt;         self.constructed_objects = self.create_object_hook()
&lt;         self.recursive_objects = self.create_object_hook()
---
&gt;         self.constructed_objects = {}
&gt;         self.recursive_objects = {}
129c125
&lt;         mapping = self.create_object_hook()
---
&gt;         mapping = {}
400c396
&lt;         data = self.create_object_hook()
---
&gt;         data = {}
595c591
&lt;             dictitems = self.create_object_hook()
---
&gt;             dictitems = {}
602c598
&lt;             dictitems = value.get('dictitems', self.create_object_hook())
---
&gt;             dictitems = value.get('dictitems', {})

loader.py

$ diff loader.py Original
13c13
&lt;     def __init__(self, stream, **constructKwds):
---
&gt;     def __init__(self, stream):
18c18
&lt;         BaseConstructor.__init__(self, **constructKwds)
---
&gt;         BaseConstructor.__init__(self)
23c23
&lt;     def __init__(self, stream, **constructKwds):
---
&gt;     def __init__(self, stream):
28c28
&lt;         SafeConstructor.__init__(self, **constructKwds)
---
&gt;         SafeConstructor.__init__(self)
33c33
&lt;     def __init__(self, stream, **constructKwds):
---
&gt;     def __init__(self, stream):
38c38
&lt;         Constructor.__init__(self, **constructKwds)
---
&gt;         Constructor.__init__(self)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a <a href="http://pyyaml.org/ticket/29" rel="nofollow">PyYAML ticket</a> on the subject opened 5 years ago. It contains some relevant links, including the link to this very question :) I personally grabbed <a href="https://gist.github.com/317164" rel="nofollow">gist 317164</a> and modified it a little bit to use <a href="http://docs.python.org/library/collections.html#collections.OrderedDict" rel="nofollow">OrderedDict</a> from Python 2.7, not the included implementation (just replaced the class with <code>from collections import OrderedDict</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>here's a simple solution that also checks for duplicated top level keys in your map.</p>
<pre><code>import yaml
import re
from collections import OrderedDict

def yaml_load_od(fname):
    "load a yaml file as an OrderedDict"
    # detects any duped keys (fail on this) and preserves order of top level keys
    with open(fname, 'r') as f:
        lines = open(fname, "r").read().splitlines()
        top_keys = []
        duped_keys = []
        for line in lines:
            m = re.search(r'^([A-Za-z0-9_]+) *:', line)
            if m:
                if m.group(1) in top_keys:
                    duped_keys.append(m.group(1))
                else:
                    top_keys.append(m.group(1))
        if duped_keys:
            raise Exception('ERROR: duplicate keys: {}'.format(duped_keys))
    # 2nd pass to set up the OrderedDict
    with open(fname, 'r') as f:
        d_tmp = yaml.load(f)
    return OrderedDict([(key, d_tmp[key]) for key in top_keys])
</code></pre>
</div>
<span class="comment-copy">+1 - thank you very much for this, it's saved me so much trouble.</span>
<span class="comment-copy">This implementation breaks YAML merge tags, BTW</span>
<span class="comment-copy">@Randy Thanks. I didn't run in that scenario before, but now I added a fix to handle this as well (I hope).</span>
<span class="comment-copy">@ArneBabenhauserheide I am not sure if PyPI is upstream enough, but take a look at <a href="https://pypi.python.org/pypi/ruamel.yaml" rel="nofollow noreferrer">ruamel.yaml</a> (I am the author of that) if you think it does.</span>
<span class="comment-copy">@Anthon that looks very good - thank you!</span>
<span class="comment-copy">Nice and simple.</span>
<span class="comment-copy">any explanations for this answer?</span>
<span class="comment-copy">Seems to work perfectly (change iteritems to items in python3!).</span>
<span class="comment-copy">This seems to be using undocumented features of PyYAML (<code>represent_dict</code> and <code>DEFAULT_MAPPING_TAG</code>). Is this because the documentation is incomplete, or are these features unsupported and subject to change without notice?</span>
<span class="comment-copy">Note that for <code>dict_constructor</code> you'll need to call <code>loader.flatten_mapping(node)</code> or you won't be able to load <code>&lt;&lt;: *...</code> (merge syntax)</span>
<span class="comment-copy">If you want to include the <code>key_node.start_mark</code> attribute in your error message, I don't see any obvious way to simplify your central construction loop. If you try to make use of the fact that the <code>OrderedDict</code> constructor will accept an iterable of key, value pairs, you lose access to that detail when generating the error message.</span>
<span class="comment-copy">has anyone tested this code properly? I can not get it to work in my application!</span>
<span class="comment-copy">Example Usage:   ordered_dict = yaml.load( ''' b: 1 a: 2 ''', Loader=OrderedDictYAMLLoader)  # ordered_dict = OrderedDict([('b', 1), ('a', 2)])  Unfortunately my edit to the post was rejected, so please excuse lack of formatting.</span>
<span class="comment-copy">This implementation breaks loading of <a href="http://yaml.org/type/omap.html" rel="nofollow noreferrer">ordered mapping types</a>.  To fix this, you can just remove the second call to <code>add_constructor</code> in your <code>__init__</code> method.</span>
<span class="comment-copy">Doesn't work for !!omap, please try the example: <a href="http://yaml.org/type/omap.html" rel="nofollow noreferrer">yaml.org/type/omap.html</a></span>
<span class="comment-copy">I don't know if tis' the same author or not, but check out <code>yodl</code> on github.</span>
<span class="comment-copy">This should be added upstream actually.</span>
<span class="comment-copy">Justed filed a pull request with your changes. <a href="https://github.com/yaml/pyyaml/pull/12" rel="nofollow noreferrer">github.com/yaml/pyyaml/pull/12</a> Let's hope for a merge.</span>
<span class="comment-copy">Really wish the author was more active, the last commit was 4 years ago. This change would be a godsend to me.</span>
<span class="comment-copy">Cool. I remember seeing that gist when I was researching how to do this.  It deals with explicit <a href="http://yaml.org/type/omap.html" rel="nofollow noreferrer">YAML ordered maps</a>, which really should have some better Python representation than they do now.  But I wanted that behavior for regular YAML mappings. The YAML spec says that mapping order shouldn't be relied on, so the PyYAML method of using a normal <code>dict</code> is perfectly fine. This workaround is for an application where the order doesn't really matter, but preserving the YAML order makes inspection and debugging easier.</span>
