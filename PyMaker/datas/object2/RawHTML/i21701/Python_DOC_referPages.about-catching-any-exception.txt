<div class="post-text" itemprop="text">
<p>How can I write a <code>try</code>/<code>except</code> block that catches all exceptions?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can but you probably shouldn't:</p>
<pre><code>try:
    do_something()
except:
    print "Caught it!"
</code></pre>
<p>However, this will also catch exceptions like <code>KeyboardInterrupt</code> and you usually don't want that, do you? Unless you re-raise the exception right away - see the following example <a href="http://docs.python.org/tutorial/errors.html" rel="noreferrer">from the docs</a>:</p>
<pre><code>try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except IOError as (errno, strerror):
    print "I/O error({0}): {1}".format(errno, strerror)
except ValueError:
    print "Could not convert data to an integer."
except:
    print "Unexpected error:", sys.exc_info()[0]
    raise
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Apart from a bare <code>except:</code> clause (which as others have said you shouldn't use), you can simply catch <a href="https://docs.python.org/2/library/exceptions.html#exceptions.Exception" rel="noreferrer"><code>Exception</code></a>:</p>
<pre><code>import traceback
import logging

try:
    whatever()
except Exception as e:
    logging.error(traceback.format_exc())
    # Logs the error appropriately. 
</code></pre>
<p>You would normally only ever consider doing this at the outermost level of your code if for example you wanted to handle any otherwise uncaught exceptions before terminating.</p>
<p>The advantage of <code>except Exception</code> over the bare <code>except</code> is that there are a few exceptions that it wont catch, most obviously <code>KeyboardInterrupt</code> and <code>SystemExit</code>: if you caught and swallowed those then you could make it hard for anyone to exit your script.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this to handle general exceptions</p>
<pre><code>try:
    a = 2/0
except Exception as e:
    print e.__doc__
    print e.message
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Very simple example, similar to the one found here:</p>
<p><a href="http://docs.python.org/tutorial/errors.html#defining-clean-up-actions" rel="noreferrer">http://docs.python.org/tutorial/errors.html#defining-clean-up-actions</a></p>
<p>If you're attempting to catch ALL exceptions, then put all your code within the "try:" statement, in place of 'print "Performing an action which may throw an exception."'.</p>
<pre><code>try:
    print "Performing an action which may throw an exception."
except Exception, error:
    print "An exception was thrown!"
    print str(error)
else:
    print "Everything looks great!"
finally:
    print "Finally is called directly after executing the try statement whether an exception is thrown or not."
</code></pre>
<p>In the above example, you'd see output in this order:</p>
<p>1) Performing an action which may throw an exception.</p>
<p>2) Finally is called directly after executing the try statement whether an exception is thrown or not.</p>
<p>3) "An exception was thrown!" or "Everything looks great!" depending on whether an exception was thrown.</p>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>To catch all possible exceptions, catch <code>BaseException</code>. It's on top of the Exception hierarchy:</p>
<p>Python 3:
<a href="https://docs.python.org/3.5/library/exceptions.html#exception-hierarchy" rel="noreferrer">https://docs.python.org/3.5/library/exceptions.html#exception-hierarchy</a></p>
<p>Python 2.7:
<a href="https://docs.python.org/2.7/library/exceptions.html#exception-hierarchy" rel="noreferrer">https://docs.python.org/2.7/library/exceptions.html#exception-hierarchy</a></p>
<pre><code>try:
    something()
except BaseException as error:
    print('An exception occurred: {}'.format(error))
</code></pre>
<p>But as other people mentioned, you should usually not do this, unless you have a very good reason.</p>
</div>
<div class="post-text" itemprop="text">
<p>I've just found out this little trick for testing if exception names in Python 2.7 . Sometimes i have handled specific exceptions in the code, so i needed a test to see if that name is within a list of handled exceptions.</p>
<pre><code>try:
    raise IndexError #as test error
except Exception as e:
    excepName = type(e).__name__ # returns the name of the exception
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple ways to do this in particular with Python 3.0 and above</p>
<p><strong>Approach 1</strong> </p>
<p>This is simple approach but not recommended because you would not know exactly which line of code is actually throwing the exception:</p>
<pre><code>def bad_method():
    try:
        sqrt = 0**-1
    except Exception as e:
        print(e)

bad_method()
</code></pre>
<p><strong>Approach 2</strong></p>
<p>This approach is recommended because it provides more detail about each exception. It includes:</p>
<ul>
<li>Line number for your code</li>
<li>File name</li>
<li>The actual error in more verbose way</li>
</ul>
<p>The only drawback is tracback needs to be imported.</p>
<pre><code>import traceback

def bad_method():
    try:
        sqrt = 0**-1
    except Exception:
        print(traceback.print_exc())

bad_method()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>try:
    whatever()
except:
    # this will catch any exception or error
</code></pre>
<p>It is worth mentioning this is not proper Python coding. This will catch also many errors you might not want to catch.</p>
</div>
<span class="comment-copy">Because I really don't know what exception to catch, and also the code is in a high level wrapper.</span>
<span class="comment-copy">In most cases you are, probably, doing smth wrong if you are trying to catch any exception. I mean you can simply misspell something in your code and you will even don't know about it. It is a good practice to catch specific exceptions.</span>
<span class="comment-copy">To be more precise, catching all possible exceptions is only a problem if they are caught silently. It's hard to think of where else this approach is appropriate, other than where the caught error messages are printed to <code>sys.stderr</code> and possibly logged. That is a perfectly valid and common exception.</span>
<span class="comment-copy">Possible workaround: <a href="http://effbot.org/zone/stupid-exceptions-keyboardinterrupt.htm" rel="nofollow noreferrer">effbot.org/zone/stupid-exceptions-keyboardinterrupt.htm</a></span>
<span class="comment-copy">Your last statement is not true, you need to explicitly say <code>except Exception:</code> the bare except you have there will also catch the BaseException ones.</span>
<span class="comment-copy">You really should print to stderr.</span>
<span class="comment-copy">I very very strongly disagree with the statement, "shouldn't."  You should do it sparingly.  There are times when you're dealing with third party libraries (sometimes dynamically loaded!!) that have gone totally crazy with exceptions and tracking them all down can be a very painful task, and if you miss just one,  you have a very very huge painful bug in your system.   That being said, it's good to track down as many as you can and handle them appropriately and then have a backup catch all for the ones you miss.</span>
<span class="comment-copy">What I find also weird is that in a duck typing language where you don't declare instance variables, it's suddenly very concerned about not typing all of your exceptions.  Hmm!</span>
<span class="comment-copy">I had the same thing in my mind, but their is a disadvantage , suppose their are two error when once is caught and and in except you are just printing you will get out of the try block and you will never know the second error...</span>
<span class="comment-copy">For anyone wondering, totally contrary to my expectation this will still catch non-exception subclassing things like ints, at least in python 2.x.</span>
<span class="comment-copy">I just wrote a simple unit test that uses patching, and this did not work...</span>
<span class="comment-copy">@JosephGarvin, that's incorrect, i.e. this will not catch "non-exceptions" that don't subclass <code>Exception</code>. Note that it's impossible to raise an <code>int</code> as an exception, and attempting to do so raises a <code>TypeError</code> exception, which is what would be caught by the enclosing <code>except Exception</code> clause in such a case. On the other hand, an old-style class can be raised and qualifies as a "non-exception" that doesn't subclass <code>Exception</code> - this <b>will</b> be caught by a bare <code>except</code> clause but <b>not</b> by an <code>except Exception</code> clause.</span>
<span class="comment-copy">@JosephGarvin check this blog entry: <a href="https://chris-lamb.co.uk/posts/no-one-expects-string-literal-exception" rel="nofollow noreferrer">chris-lamb.co.uk/posts/no-one-expects-string-literal-exception</a>  I'm with @Yoel on this one, your testing just masked the <code>TypeError</code></span>
<span class="comment-copy">This may not catch all exceptions, as the base class for all exceptions is BaseException and I have encountered production code that is not in the Exception class family.  See <a href="https://docs.python.org/3/library/exceptions.html?highlight=BaseException" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> for details about this.</span>
<span class="comment-copy">This does not catch all exceptions.</span>
<span class="comment-copy">Technically, it should catch all non-system-exiting exceptions. From the docs @DDay linked: "<i>exception</i> BaseException: The base class for all built-in exceptions. It is not meant to be directly inherited by user-defined classes (for that, use Exception)." Unless you're working with code that ignores this, or you need to catch system-exiting exceptions, the above should be ok to use.</span>
<span class="comment-copy">Is wishing to save progress of a long-running job after pressing Ctrl-C that unusual?</span>
<span class="comment-copy">@BallpointBen then you can catch <code>KeyboardInterrupt</code> I guess</span>
