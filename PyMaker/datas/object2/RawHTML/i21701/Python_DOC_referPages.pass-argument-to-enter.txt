<div class="post-text" itemprop="text">
<p>Just learning about with statements <a href="http://effbot.org/zone/python-with-statement.htm" rel="noreferrer">especially from this article</a></p>
<p>question is, can I pass an argument to <code>__enter__</code>?</p>
<p>I have code like this:</p>
<pre><code>class clippy_runner:
    def __enter__(self):
        self.engine = ExcelConnection(filename = "clippytest\Test.xlsx")
        self.db = SQLConnection(param_dict = DATASOURCES[STAGE_RELATIONAL])

        self.engine.connect()
        self.db.connect()

        return self
</code></pre>
<p>I'd like to pass filename and param_dict as parameters to <code>__enter__</code>. Is that possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>No.  You can't.  You pass arguments to <code>__init__()</code>.</p>
<pre><code>class ClippyRunner:
    def __init__(self, *args):
       self._args = args

    def __enter__(self):
       # Do something with args
       print(self._args)


with ClippyRunner(args) as something:
    # work with "something"
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can get the effect by adding a little more code.</p>
<pre><code>
    #!/usr/bin/env python

    class Clippy_Runner( dict ):
        def __init__( self ):
            pass
        def __call__( self, **kwargs ):
            self.update( kwargs )
            return self
        def __enter__( self ):
            return self
        def __exit__( self, exc_type, exc_val, exc_tb ):
            self.clear()

    clippy_runner = Clippy_Runner()

    print clippy_runner.get('verbose')     # Outputs None
    with clippy_runner(verbose=True):
        print clippy_runner.get('verbose') # Outputs True
    print clippy_runner.get('verbose')     # Outputs None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Wouldn't you just pass the values to <code>__init__</code> via the class constructor?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the contextmanager decorator to pass arguments:</p>
<p><a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager" rel="nofollow noreferrer">https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager</a></p>
<pre><code>from contextlib import contextmanager

@contextmanager
def clippy_runner(*args):
    yield
</code></pre>
<p>IMHO, I find confusing that using <code>contextmanager</code> you can provide arguments, but you cannot provide them to <code>__enter__</code></p>
</div>
<span class="comment-copy">yes! thanks. I'll mark as accepted once the time limit has passed (5 minutes).</span>
<span class="comment-copy">I'm confused.  Because you just <code>pass</code> in <code>__init__</code> are you suggesting that <code>args</code> passed to <code>__init__</code> are available in the <code>__enter__</code> function?</span>
<span class="comment-copy">Hovis: the args passed to init can be saved and then used in the enter method.  <code>def __init__(self, filename, param_dict):  self.filename=filename  self.param_dict=param_dict</code> <code>def __enter__(self):  self.filename ...</code></span>
<span class="comment-copy">This seems like the correct answer to my, as you don't need to create the variable in the with statement, but can use a readily created object (such as a lock) and pass variables to the with statement. Great answer!</span>
<span class="comment-copy">Excellent answer! This is should be the accepted as it can be used in a <code>for</code> loop for example, without instantiating a new object every iteration</span>
<span class="comment-copy">I second this. I have some settings that are relevant only inside the context. Passing them to <code>__init__</code> is silly.</span>
