<div class="post-text" itemprop="text">
<p>is there a way to check if a function accepts **kwargs before calling it e.g.</p>
<pre><code>def FuncA(**kwargs):
    print 'ok'

def FuncB(id = None):
    print 'ok'

def FuncC():
    print 'ok'

args = {'id': '1'}

FuncA(**args)
FuncB(**args)
FuncC(**args)
</code></pre>
<p>When I run this FuncA and FuncB would be okay but FuncC errors with <code>got an unexpected keyword argument 'id'</code> as it doesn't accept any arguments</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>try:
    f(**kwargs)
except TypeError:
    #do stuff
</code></pre>
<p>It's <a href="http://docs.python.org/glossary.html#eafp">easier to ask forgiveness than permission</a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def foo(a, b, **kwargs):
  pass

import inspect
args, varargs, varkw, defaults = inspect.getargspec(foo)
assert(varkw=='kwargs')
</code></pre>
<p>This only works for Python functions. Functions defined in C extensions (and built-ins) may be tricky and sometimes interpret their arguments in quite creative ways. There's no way to reliably detect which arguments such functions expect. Refer to function's docstring and other human-readable documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>func</code> is the function in question.</p>
<p>with python2, it's:</p>
<pre><code>inspect.getargspec(func).keywords is not None
</code></pre>
<p>python3 is a bit tricker, following <a href="https://www.python.org/dev/peps/pep-0362/" rel="nofollow">https://www.python.org/dev/peps/pep-0362/</a> the <code>kind</code> of parameter must be <code>VAR_KEYWORD</code></p>
<blockquote>
<p>Parameter.VAR_KEYWORD - a dict of keyword arguments that aren't bound to any other parameter. This corresponds to a "**kwargs" parameter in a Python function definition.</p>
</blockquote>
<pre><code>any(param for param in inspect.signature(func).parameters.values() if param.kind == param.VAR_KEYWORD)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It appears that you want to check whether the function receives an 'id' keyword argument. You can't really do that by inspection because the function might not be a normal function, or you might have a situation like that:</p>
<pre><code>def f(*args, **kwargs):
    return h(*args, **kwargs)

g = lambda *a, **kw: h(*a, **kw)

def h(arg1=0, arg2=2):
    pass
</code></pre>
<p><code>f(id=3)</code> still fails</p>
<p>Catching <code>TypeError</code> as suggested is the best way to do that, but you can't really figure out what caused the <code>TypeError</code>. For example, this would still raise a <code>TypeError</code>:</p>
<pre><code>def f(id=None):
     return "%d" % id

f(**{'id': '5'})
</code></pre>
<p>And that might be an error that you want to debug. And if you're doing the check to avoid some side effects of the function, they might still be present if you catch it. For example:</p>
<pre><code>class A(object):
   def __init__(self): self._items = set([1,2,3])
   def f(self, id): return self._items.pop() + id

a = A()
a.f(**{'id': '5'})
</code></pre>
<p>My suggestion is to try to identify the functions by another mechanism. For example, pass objects with methods instead of functions, and call only the objects that have a specific method. Or add a flag to the object or the function itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/2/reference/datamodel.html" rel="nofollow">https://docs.python.org/2/reference/datamodel.html</a>
you should be able to test for use of <code>**kwargs</code> using <code>co_flags</code>:</p>
<pre><code>&gt;&gt;&gt; def blah(a, b, kwargs):
...     pass

&gt;&gt;&gt; def blah2(a, b, **kwargs):
...     pass

&gt;&gt;&gt; (blah.func_code.co_flags &amp; 0x08) != 0
False
&gt;&gt;&gt; (blah2.func_code.co_flags &amp; 0x08) != 0
True
</code></pre>
<p>Though, as noted in the reference this may change in the future, so I would definitely advise to be extra careful. Definitely add some unit tests to check this feature is still in place.</p>
</div>
<div class="post-text" itemprop="text">
<p>For python &gt; 3 you should to use <a href="https://docs.python.org/3.4/library/inspect.html#inspect.getfullargspec" rel="nofollow noreferrer">inspect.getfullargspec</a>.</p>
<pre class="lang-py prettyprint-override"><code>import inspect

def foo(**bar):
    pass

arg_spec = inspect.getfullargspec(foo)
assert arg_spec.varkw and arg_spec.varkw == 'bar'
</code></pre>
</div>
<span class="comment-copy">If it's that important whether the function accepts kwargs, why don't you already know? If it isn't particularly important, then just try, as suggested.</span>
<span class="comment-copy">"It is easier to ask for forgiveness than permission".. +1</span>
<span class="comment-copy">What is <code>ArgumentError</code>?</span>
<span class="comment-copy">Sorry, no. This will work with <i>any</i> non-built-in function provided that you craft <code>**kwargs</code> right. <code>def foo(x): return x</code> then <code>foo(**{'x':1})</code>.</span>
<span class="comment-copy">This gets the job done, but I can't help but feel like its dangerous. If your function throws a <code>TypeError</code> anywhere in the code, its impossible to know from this snippet whether the <code>TypeError</code> is from passing invalid <code>kwargs</code> or from an error in your logic.</span>
<span class="comment-copy">The problem with this solution is you can't distinguish an "Argument Binding" TypeError from a TypeError thrown by f. Better to use <a href="https://docs.python.org/3/library/inspect.html#inspect.Signature.bind" rel="nofollow noreferrer"><code>inspect.Signature.bind</code></a></span>
<span class="comment-copy">If you're using inspection the name of the keyword argument is irrelevant and you don't check for a named argument. <code>varkw is not None or 'id' in args</code> would be how it should look like.</span>
<span class="comment-copy">Yes, the name is irrelevant. The <i>presence</i> is relevant. Try inspecting a function without a <code>**kwarg</code>; <code>varkw</code> will be <code>None</code>. I suppose that you check the code samples using an actual interpreter.</span>
<span class="comment-copy">If only the presence is irrelevant, why are you giving an example checking for the name?</span>
<span class="comment-copy">Good point. I checked the name to show the connection with function definition, but this is not necessary in <code>**kwargs</code> case; <code>assert(varkw is not None)</code> would be enough.</span>
<span class="comment-copy">I see nothing in the reference saying this may change in the future, or even that it's implementation specific. The closest thing to a warning note that I see is: "Other bits in co_flags are reserved for internal use."</span>
