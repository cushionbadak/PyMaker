<div class="post-text" itemprop="text">
<p>I have a package that I installed from a virtual environment.  If I just launch the python interpreter, that package can be imported just fine.  However, if I launch Idle, that package cannot be imported (since it's only available in one particular virtualenv and not global).  How can I launch Idle from a virtualenv, so that all packages from the virtualenv would be available?  </p>
</div>
<div class="post-text" itemprop="text">
<p>IDLE is essentially </p>
<pre><code>from idlelib.PyShell import main
if __name__ == '__main__':
  main()
</code></pre>
<p>So you can launch it yourself unless you built the virtualenv without default packages.</p>
</div>
<div class="post-text" itemprop="text">
<h1>Short answer</h1>
<ol>
<li>Start the virtual environment</li>
<li>Run <code>python -m idlelib.idle</code></li>
</ol>
<p>From <a href="https://stackoverflow.com/a/8792082/5059062" title="Someone else's answer">this answer</a>.</p>
<h1>Long answer</h1>
<p>This answer assumes Python 3.</p>
<p>There are a few different virtual environment managers, each of which has a slightly different way of handling where python is installed and how it's run, <a href="https://stackoverflow.com/a/41573588/5059062" title="StackOverflow answer explaining different virtual environment managers">as detailed in this answer</a>.</p>
<p>This answer assumes the <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer" title="venv module reference"><code>venv</code></a> module is used, and that it was <a href="https://docs.python.org/3/tutorial/venv.html" rel="nofollow noreferrer" title="tutorial on using the venv module">installed following the docs</a>.</p>
<p><em>Note: Some Linux distributions package the venv module into a separate package: <a href="https://packages.ubuntu.com/search?keywords=python3-venv&amp;searchon=names&amp;section=all" rel="nofollow noreferrer" title="Search Ubuntu repositories for venv module package">Ubuntu</a> and <a href="https://packages.debian.org/search?keywords=python3-venv" rel="nofollow noreferrer" title="search debian repositories for venv module package">Debian</a></em></p>
<p>If the virtual environment was installed in a folder called <code>my_project-venv</code> by running <code>python -m venv my_project-venv</code> from inside the folder <code>my_project</code>, the virtual environment will be inside a new folder created by the module:</p>
<pre><code>my_project_dir
      │
      ┝━ my_project-venv
</code></pre>
<p>On Windows, with Python 3.7.1, the files inside the <code>my_project-venv</code> folder will probably look like this:</p>
<pre><code>my_project-venv
      │
      ┝━ Include
      ┝━ Lib
      ┝━ Scripts
      │     ┝━ ...
      │     ┝━ activate.bat
      │     ┝━ Activate.ps1
      │     ┝━ deactivate.bat
      │     ┕━ ...
      │
      ┕━ pyvenv.cfg
</code></pre>
<p>The virtual environment can be started by running either the <code>activate.bat</code> or <code>Activate.ps1</code> script, depending on whether <a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands#BKMK_OVR" rel="nofollow noreferrer" title="Microsoft docs introducing shells"><code>cmd</code> or PowerShell is used</a>:</p>
<pre><code>:: Using cmd.exe
cd my_project_dir
.\my_project-venv\Scripts\activate.bat

# Using PowerShell
cd my_project_dir
.\my_project-venv\Scripts\Activate.ps1
</code></pre>
<p><em>Note: These scripts don't keep the shell open if run by double-clicking them. Start a shell, then run them by typing the above commands, with the folder names changed for your project</em></p>
<p>On most other operating systems, the virtual environment folder will look like this:</p>
<pre><code>my_project-venv
      │
      ┝━ bin
      │     ┝━ ...
      │     ┝━ activate
      │     ┝━ activate.csh
      │     ┝━ activate.fish
      │     ┕━ ...
      │
      ┝━ include
      ┝━ lib
      ┝━ lib64
      ┕━ pyvenv.cfg
</code></pre>
<p>Then, from any shell other than <code>csh</code> or <a href="https://fishshell.com/" rel="nofollow noreferrer" title="fish shell homepage">fish</a>, activate the environment by:</p>
<pre><code># Most operating systems
cd my_project_dir
. my_project-venv/bin/activate
</code></pre>
<p>For <code>csh</code> and <code>fish</code> there are shell-specific scripts for activating the virtual environment (<code>activate.csh</code> and <code>activate.fish</code>, respectively) and they can be run like the <code>activate</code> script.</p>
<p>Once the virtual environment has been activated on all operating systems, running the following will start IDLE with access to the packages installed into the virtual environment:</p>
<pre><code>python -m venv idlelib.idle
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On Windows, a Python script run from command line like this <code>some_script.py</code> might be run by other Python interpreter than the one used when using <code>python some_script.py</code> command (it depends on <code>py</code> files association). If one wants to avoid this problem it's best to create a batch file <code>idle.bat</code> with the content <code>python -c "from idlelib.PyShell import main; main()"</code> and place it in the <code>Scripts</code> folder in the virtualenv. Also, like others noted idle needs both <code>tcl</code> and <code>tk</code> folders to work. The simplest solution is to create symbolic links from virtualenv to the <em>base</em> Python installation like this</p>
<pre><code>(2.7) c:\python\virtualenv\2.7\Lib&gt;mklink /d tcl8.5 "c:\Program Files\Python\2.7\tcl\tcl8.5"
symbolic link created for tcl8.5 &lt;&lt;===&gt;&gt; c:\Program Files\Python\2.7\tcl\tcl8.5
(2.7) c:\python\virtualenv\2.7\Lib&gt;mklink /d tk8.5 "c:\Program Files\Python\2.7\tcl\tk8.5"
symbolic link created for tk8.5 &lt;&lt;===&gt;&gt; c:\Program Files\Python\2.7\tcl\tk8.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Putting a few answers together and here is how I do this on Window with a fully functional batch file.</p>
<p>Make idle.bat in your virtualenv's Scripts directory. It will create (unless they exist) both links to tcl and tk (version 8.5 as of writing) and put them in you virtualenv's Lib directory then it fires up idle. Copy and paste this code exactly into an editor. Change the path names for your current virtualenv and Python install (mine is the standard for 2.7) then save it into Scripts/idle.bat.</p>
<pre><code>IF EXIST C:\&lt;path to current virtualenv&gt;\Lib\tcl8.5 (
REM do nothing
) ELSE (
    mklink /d C:\&lt;path to current virtualenv&gt;\Lib\tcl8.5 "c:\Python27\tcl\tcl8.5"
)
IF EXIST C:\&lt;path to current virtualenv&gt;\Lib\tk8.5 (
REM do nothing
) ELSE (
    mklink /d C:\&lt;path to current virtualenv&gt;\Lib\tk8.5 "c:\Python27\tcl\tk8.5"
)

python -c "from idlelib.PyShell import main; main()"
</code></pre>
<p>Run the script with Powershell (RUN AS ADMIN!) to open idle.</p>
<pre><code>cd c:\&lt;path to current virtualenv&gt;\
./Scripts/idle.bat
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>@biomed I am on Windows and I was trying this. In my python2.6 folder I had to copy the  python26/tcl/tcl8.5 and python/tcl/tk8.5 folders to python26/Lib and then I created the script above in my virtualenv's scripts folder. Worked great.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.6 <a href="https://python.readthedocs.io/en/stable/whatsnew/3.6.html#idlelib-and-idle" rel="nofollow noreferrer">modernized and refactored</a> <code>idlelib</code>. This change included the renaming of several methods. Because of this, <code>idlelib.PyShell</code> must now be accessed with <code>idlelib.pyshell</code>. The following snippet is based on the accepted answer and should work for any Python version:</p>
<pre><code>#!/usr/bin/env python
"""Simple script to run Idle from a venv in PyCharm."""

try:
    # Import for Python pre 3.6
    from idlelib.PyShell import main
except ModuleNotFoundError:
    # Import for Python version 3.6 and later
    from idlelib.pyshell import main

if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For me launching something like this just works (Linux terminal):</p>
<pre><code>source venv/bin/activate &amp;&amp; python `which idle` &amp;
</code></pre>
<p>(venv is path to your venv obviously)</p>
</div>
<div class="post-text" itemprop="text">
<p>I am using <strong>Ubuntu 15.04</strong> operating system. I have installed some packages using <strong>virtualenv</strong>.</p>
<p>So, to run the files inside <strong>virtualenv</strong> including those packages I use the following commands in terminal</p>
<p>(Name of my virtual environment is <strong>venv</strong>):</p>
<pre><code>#Activate the virtualenv venv
source venv/bin/activate

#To Run IDLE in virtualenv venv
python -m idlelib
</code></pre>
<p>After running the <strong>IDLE</strong>, you can open file using <strong>ctrl+o</strong> keyboard shortcut.</p>
</div>
<span class="comment-copy">From which folder would I run those script? Thanks</span>
<span class="comment-copy">@Khnle: from the folder where your project resides, aparently, after you have activated the virtualenv. I just tried it, and it does work. Put this script to your virtualenv's <code>bin</code>.</span>
<span class="comment-copy">I created an idle script in the bin/ of my virtualenv and I used the virtualenv python in my shebang but it complains about not being able to find Tkinter. I checked and Tkinter can be imported in the regular python2.7.1 but I can't import Tkinter from my virtualenv python. How can I make Tkinter available to my virtualenv python ( I used no site-packages for an other reason)</span>
<span class="comment-copy">Inside an active virtualenv you can just type <code>python -c "from idlelib.PyShell import main; main()"</code> and this saves you from keeping a script somewhere.</span>
<span class="comment-copy">indeed, <code>python -m idlelib</code></span>
<span class="comment-copy">Thanks - this works perfectly on windows.</span>
<span class="comment-copy">it also works on Mac.</span>
<span class="comment-copy">Pro-tip: set this as an alias using <code>alias idle='python -m idlelib.idle'</code> You can also do this on windows by setting DOSKEY: <a href="https://stackoverflow.com/a/21040825/1656488">stackoverflow.com/a/21040825/1656488</a></span>
<span class="comment-copy">+1, thank you for this.  Just a note: DON'T install Python under Program Files because of the space in the pathname!  Virtualenv was failing for me, and re-installing Python under C:\ (default) fixed it.</span>
<span class="comment-copy">I could not get the idle.bat file to work on my Python 2.7 system, even after creating the symbolic folder links.  I initially created them under Lib, and idle.bat launch failed.  Then I created a folder called tcl under the virtual environment, and created the symbolic folder links there, and it still produced an error:Traceback (most recent call last): "... _tkinter.TclError: Can't find a usable init.tcl in the following directories: {C:\Users\AMS\my_env\tcl\tcl8.5} C:/Python27/lib/tcl8.5 C:/Users/AMS/my_env/lib/tcl8.5 ... This probably means that Tcl wasn't installed properly."  Any ideas?</span>
<span class="comment-copy">OK, copying the two folders as Tim has pointed out below (instead of symbolic links) fixed the problem, and I can launch IDLE through idle.bat.</span>
<span class="comment-copy">Thanks! I was looking for a script exactly like this I had made earlier on a different machine.</span>
<span class="comment-copy">+1, thanks you for this.</span>
