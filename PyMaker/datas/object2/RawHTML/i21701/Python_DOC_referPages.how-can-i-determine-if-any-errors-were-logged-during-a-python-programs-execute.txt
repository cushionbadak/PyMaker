<div class="post-text" itemprop="text">
<p>I have a python script which calls log.error() and log.exception() in several places.  These exceptions are caught so that the script can continue to run, however, I would like to be able to determine if log.error() and/or log.exception() were ever called so I can exit the script with an error code by calling sys.exit(1).  A naive implementation using an "error" variable is included below.  It seems to me there must be a better way. </p>
<pre><code>error = False

try:
  ...
except:
   log.exception("Something bad occurred.")
   error = True

if error:
   sys.exit(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think that your solution is not the best option. Logging is one aspect of your script, returning an error code depending on the control flow is another. Perhaps using exceptions would be a better option.</p>
<p>But if you want to track the calls to log, you can wrap it within a decorator. A simple example of a decorator follows (without inheritance or dynamic attribute access):</p>
<pre><code>class LogWrapper:

    def __init__(self, log):
        self.log = log
        self.error = False

    def exception(self, message)
        self.error = True
        self.log.exception(message)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had the same issue as the original poster: I wanted to exit my Python script with an error code if any messages of error or greater severity were logged. For my application, it's desirable for execution to continue as long as no unhandled exceptions are raised. However, continuous integrations builds should fail if any errors are logged.</p>
<p>I found the <code>errorhandler</code> python package, which does just what we need. See the <a href="https://github.com/Simplistix/errorhandler" rel="nofollow noreferrer">GitHub</a>, <a href="https://pypi.python.org/pypi/errorhandler/" rel="nofollow noreferrer">PyPI page</a>, and <a href="http://errorhandler.readthedocs.io/en/latest/" rel="nofollow noreferrer">docs</a>.</p>
<p>Below is the code I used:</p>
<pre><code>import logging
import sys

import errorhandler

# Track if message gets logged with severity of error or greater
error_handler = errorhandler.ErrorHandler()

# Also log to stderr
stream_handler = logging.StreamHandler(stream=sys.stderr)
logger = logging.getLogger()
logger.setLevel(logging.INFO)  # Set whatever logging level for stderr
logger.addHandler(stream_handler)

# Do your program here

if error_handler.fired:
    logger.critical('Failure: exiting with code 1 due to logged errors')
    raise SystemExit(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can employ a counter.  If you want to track individual exceptions, create a dictionary with the exception as the key and the integer counter as the value.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can check logger._cache. It returns a dictionary with keys corresponding to the <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">numeric value</a> of the error level logged. So for checking if an error was logged you could do:</p>
<p><code>if 40 in logger._cache and logger._cache[40]</code></p>
</div>
<span class="comment-copy">You sure that's a good idea? There are many potential reasons to raise exceptions, the least of which are a reason to exit with an error code. Also, <a href="http://docs.python.org/howto/doanddont.html#except" rel="nofollow noreferrer"><code>except:</code> is usually evil</a>. And if it's a critical error, just print an error message and exit <i>when it occurs</i>.</span>
