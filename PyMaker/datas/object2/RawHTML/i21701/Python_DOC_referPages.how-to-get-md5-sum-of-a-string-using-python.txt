<div class="post-text" itemprop="text">
<p>In the <a href="http://www.flickr.com/services/api/auth.howto.web.html" rel="noreferrer">Flickr API docs</a>, you need to find the MD5 sum of a string to generate the <code>[api_sig]</code> value.</p>
<p>How does one go about generating an MD5 sum from a string? </p>
<p>Flickr's example:</p>
<p>string: <code>000005fab4534d05api_key9a0554259914a86fb9e7eb014e4e5d52permswrite</code></p>
<p>MD5 sum: <code>a02506b31c1cd46c2e0b6380fb94eb3d</code></p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2.x, use python's <a href="http://docs.python.org/library/hashlib.html#module-hashlib" rel="noreferrer">hashlib</a></p>
<pre><code>import hashlib
m = hashlib.md5()
m.update("000005fab4534d05api_key9a0554259914a86fb9e7eb014e4e5d52permswrite")
print m.hexdigest()
</code></pre>
<p>Output: <code>a02506b31c1cd46c2e0b6380fb94eb3d</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do the following:</p>
<p><strong>Python 2.x</strong></p>
<pre><code>import hashlib
print hashlib.md5("whatever your string is").hexdigest()
</code></pre>
<hr/>
<p><strong>Python 3.x</strong></p>
<pre><code>import hashlib
print(hashlib.md5("whatever your string is".encode('utf-8')).hexdigest())
</code></pre>
<hr/>
<p>However in this case you're probably better off using this helpful Python module for interacting with the Flickr API:</p>
<ul>
<li><a href="http://stuvel.eu/flickrapi">http://stuvel.eu/flickrapi</a></li>
</ul>
<p>... which will deal with the authentication for you.</p>
<p>Official documentation of <a href="https://docs.python.org/2/library/hashlib.html#module-hashlib">hashlib</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried using the MD5 implementation in <a href="http://docs.python.org/library/hashlib.html#module-hashlib" rel="noreferrer">hashlib</a>? Note that hashing algorithms typically act on <em>binary</em> data rather than <em>text</em> data, so you may want to be careful about which character encoding is used to convert from text to binary data before hashing.</p>
<p>The <em>result</em> of a hash is also binary data - it looks like Flickr's example has then been converted into text using hex encoding. Use the <code>hexdigest</code> function in hashlib to get this.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>Try This 
import hashlib
user = input("Enter text here ")
h = hashlib.md5(user.encode())
h2 = h.hexdigest()
print(h2)
</code></pre>
</div>
<span class="comment-copy">Don't try to use <code>hashlib.md5().update('your string').hexdigest()</code>, it won't work since <code>update()</code> returns None. If you want a one line solution, use Mark Longair's answer.</span>
<span class="comment-copy">@ChristopherManning m.hexdigest() returns a 32 character long digest. How to get a 16 character long digest?</span>
<span class="comment-copy">@Darwesh it's 32 characters because it's the hex representation, do a <code>m.digest_size</code> on top of this code, internal digest is already 16 bytes.</span>
<span class="comment-copy">@Darwesh you can simply slice the string <code>m.hexdigest()[:16]</code></span>
<span class="comment-copy">@Darwesh According to <a href="https://tools.ietf.org/html/rfc1321.html" rel="nofollow noreferrer">RFC 1321</a>, the md5 is always 16 bytes. If you just want a 16 character long digest, you can do a slice as Baris Demiray said.</span>
<span class="comment-copy">I saw the API. I was just curious how I could do it anyhow. Thanks!</span>
<span class="comment-copy">hexdigest() returns a 32 character long digest. How to get a 16 character long digest?</span>
<span class="comment-copy">Nice answer! May I ask why in Python 2 we don't need to do utf-8 encoding, however in Python 3 we need to do the encoding. Thanks. @Mark Longair</span>
<span class="comment-copy">@JeffHu, because <code>hashlib.md5</code> expects <a href="https://docs.python.org/3/glossary.html#term-bytes-like-object" rel="nofollow noreferrer">a bytes-like-object</a></span>
<span class="comment-copy">The Python 3 version should be used in Python 2 as well.  @JeffHu expanding on what @MaxU said, the md5 function takes a bytestring and does not accept unicode.  Python 3 is (correctly) strict/explicit, and so a an str (<code>""</code>) is unicode and has to be encoded to a bytestring.  Strings in python2 can be interpreted as either a btyestring or unicode string, and passing a str (<code>""</code>) string is interpreted as a bytestring.  If the string has unicode characters, this will raise an Exception.  Encoding a bytestring will leave ascii characters untouched and convert unicode correctly</span>
<span class="comment-copy">hexdigest() returns a 32 character long digest. How to get a 16 character long digest?</span>
<span class="comment-copy">@Darwesh: Well yes, MD5 is 128 bits, which is 32 characters in hex. If you want a smaller digest, you'll need a 64-bit digest. That will be pretty weak though...</span>
