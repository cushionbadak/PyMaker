<div class="post-text" itemprop="text">
<p>In JavaScript I am used to being able to call functions to be executed at a later time, like this</p>
<pre><code>function foo() {
    alert('bar');
}

setTimeout(foo, 1000);
</code></pre>
<p>This does not block the execution of other code.</p>
<p>I do not know how to achieve something similar in Python. I can use sleep</p>
<pre><code>import time
def foo():
    print('bar')

time.sleep(1)
foo()
</code></pre>
<p>but this will block the execution of other code. (Actually in my case blocking Python would not be a problem in itself, but I would not be able to unit test the method.)</p>
<p>I know threads are designed for out-of-sync execution, but I was wondering whether something easier, similar to <code>setTimeout</code> or <code>setInterval</code> exists.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want a <a href="http://docs.python.org/library/threading.html#timer-objects" rel="nofollow noreferrer"><code>Timer</code></a> object from the <a href="http://docs.python.org/library/threading.html" rel="nofollow noreferrer"><code>threading</code></a> module.</p>
<pre><code>from threading import Timer
from time import sleep

def foo():
    print "timer went off!"
t = Timer(4, foo)
t.start()
for i in range(11):
    print i
    sleep(.5)
</code></pre>
<p>If you want to repeat, here's a simple solution: instead of using <code>Timer</code>, just use <code>Thread</code> but pass it a function that works somewhat like this:</p>
<pre><code>def call_delay(delay, repetitions, func, *args, **kwargs):             
    for i in range(repetitions):    
        sleep(delay)
        func(*args, *kwargs)
</code></pre>
<p>This won't do infinite loops because that could result in a thread that won't die and other unpleasant behavior if not done right. A more sophisticated approach might use an <code>Event</code>-based approach, <a href="https://stackoverflow.com/questions/5179467/equivalent-of-setinterval-in-python">like this one</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>To execute a function after a delay or to repeat a function in given number of seconds using an event-loop (no threads), you could:</p>
<h2>Tkinter</h2>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python
from Tkinter import Tk

def foo():
    print("timer went off!")

def countdown(n, bps, root):
    if n == 0:
        root.destroy() # exit mainloop
    else:
        print(n)
        root.after(1000 / bps, countdown, n - 1, bps, root)  # repeat the call

root = Tk()
root.withdraw() # don't show the GUI window
root.after(4000, foo) # call foo() in 4 seconds
root.after(0, countdown, 10, 2, root)  # show that we are alive
root.mainloop()
print("done")
</code></pre>
<h3>Output</h3>
<pre class="lang-py prettyprint-override"><code>10
9
8
7
6
5
4
3
timer went off!
2
1
done
</code></pre>
<h2>Gtk</h2>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python
from gi.repository import GObject, Gtk

def foo():
    print("timer went off!")

def countdown(n): # note: a closure could have been used here instead
    if n[0] == 0:
        Gtk.main_quit() # exit mainloop
    else:
        print(n[0])
        n[0] -= 1
        return True # repeat the call

GObject.timeout_add(4000, foo) # call foo() in 4 seconds
GObject.timeout_add(500, countdown, [10])
Gtk.main()
print("done")
</code></pre>
<h3>Output</h3>
<pre class="lang-py prettyprint-override"><code>10
9
8
7
6
5
4
timer went off!
3
2
1
done
</code></pre>
<h2>Twisted</h2>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python
from twisted.internet import reactor
from twisted.internet.task import LoopingCall

def foo():
    print("timer went off!")

def countdown(n):
    if n[0] == 0:
        reactor.stop() # exit mainloop
    else:
        print(n[0])
        n[0] -= 1

reactor.callLater(4, foo) # call foo() in 4 seconds
LoopingCall(countdown, [10]).start(.5)  # repeat the call in .5 seconds
reactor.run()
print("done")
</code></pre>
<h3>Output</h3>
<pre class="lang-py prettyprint-override"><code>10
9
8
7
6
5
4
3
timer went off!
2
1
done
</code></pre>
<h2>Asyncio</h2>
<p>Python 3.4 introduces new <a href="http://www.python.org/dev/peps/pep-0411/" rel="noreferrer">provisional API</a> for asynchronous IO -- <a href="http://docs.python.org/3.4/library/asyncio.html" rel="noreferrer"><code>asyncio</code> module</a>: </p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3.4
import asyncio

def foo():
    print("timer went off!")

def countdown(n):
    if n[0] == 0:
        loop.stop() # end loop.run_forever()
    else:
        print(n[0])
        n[0] -= 1

def frange(start=0, stop=None, step=1):
    while stop is None or start &lt; stop:
        yield start
        start += step #NOTE: loss of precision over time

def call_every(loop, seconds, func, *args, now=True):
    def repeat(now=True, times=frange(loop.time() + seconds, None, seconds)):
        if now:
            func(*args)
        loop.call_at(next(times), repeat)
    repeat(now=now)

loop = asyncio.get_event_loop()
loop.call_later(4, foo) # call foo() in 4 seconds
call_every(loop, 0.5, countdown, [10]) # repeat the call every .5 seconds
loop.run_forever()
loop.close()
print("done")
</code></pre>
<h3>Output</h3>
<pre class="lang-py prettyprint-override"><code>10
9
8
7
6
5
4
3
timer went off!
2
1
done
</code></pre>
<p>Note: there is a slight difference in the interface and behavior between these approaches.</p>
</div>
<div class="post-text" itemprop="text">
<p>Asynchronous callbacks like Javascript's <code>setTimeout</code> require an event-driven architecture.</p>
<p>Asynchronous frameworks for Python like the popular <a href="http://twistedmatrix.com/trac/" rel="nofollow">twisted</a> have <a href="http://twistedmatrix.com/documents/10.0.0/api/twisted.internet.interfaces.IReactorTime.html#callLater" rel="nofollow"><code>CallLater</code></a> which does what you want, but it means adopting the event-driven architecture in your application.</p>
<p>Another alternative is to use threads and to sleep in a thread.  Python providers a <a href="http://docs.python.org/library/threading.html#timer-objects" rel="nofollow">timer</a> to make the <em>waiting</em> part easy. However, when your thread awakes and your function executes, it is in a separate thread and must do whatever it does in a thread-safe manner.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>Sorry, I can't post more than 2 links, so for more information please check <strong>PEP 380</strong> and most importantly the documentation of <strong><a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow">asyncio</a></strong></em></p></div>
<div class="post-text" itemprop="text">
<p>JavaScript can do this because it runs things in an event loop. This can be done in Python through use of an event loop such as Twisted, or via a toolkit such as GLib or Qt.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that your normal python script doesn't run in a framework. The script gets called and is in control of the main loop. With JavaScript, all the scripts that runs on your page runs in a framework and it is the framework that invokes your method when the timeout elapses.</p>
<p>I haven't used pyQt myself (only C++ Qt), but you can set a timer on any QObject using startTimer(). When the timer elapse, a callback on your method is invoked. You can also use QTimer and connect the timeout signal to an arbitrary slot. This is possible because Qt runs an event loop that can call your method at a later stage.</p>
</div>
<span class="comment-copy">+1 for demonstrating interleaved output.</span>
<span class="comment-copy">Let me ask for a variation. What if I want to repeat the call every x seconds as in <code>setInterval</code>? I could let the function start its own timer at the end, but will this spawn infinitely many threads?</span>
<span class="comment-copy">@Andrea, yeah that's not a good way to do it. Sorry for the delay; it was bedtime. See above for a first approach.</span>
<span class="comment-copy">Thank you. In fact soon after asking I started making a decorator for this behaviour. The only problem was how to stop it from running forever, something that I solved thanks to the input in this question. <a href="http://stackoverflow.com/questions/5179467/equivalent-of-setinterval-in-python" title="equivalent of setinterval in python">stackoverflow.com/questions/5179467/â€¦</a> I finally updated the question with a working version of the decorator :-)</span>
<span class="comment-copy">@Andrea, ah, yes, I was going to suggest using <code>Event</code> for loop termination. Nice decorator.</span>
<span class="comment-copy">I've been looking for the aysncio version of Twisted's LoopingCall. Thanks for all the examples!</span>
<span class="comment-copy">Could you please add some more details about your answer?</span>
<span class="comment-copy">Sure, anything in particular you want me to add? I'll comment the lines maybe that clarifies how it works.</span>
<span class="comment-copy">Thank you for your answer, but switching my code to be a Qt application just for this method is not an option.</span>
