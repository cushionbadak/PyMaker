<div class="post-text" itemprop="text">
<p>I created a module named <code>util</code> that provides classes and functions I often use in Python.
Some of them need imported features. What are the pros and the cons of importing needed things inside class/function definition? Is it better than <code>import</code> at the beginning of a module file? Is it a good idea?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's the most common style to put <em>every</em> import at the top of the file. PEP 8 recommends it, which is a good reason to do it to start with. But that's not a whim, it has advantages (although not critical enough to make everything else a crime). It allows finding all imports at a glance, as opposed to looking through the whole file. It also ensures everything is imported before any other code (which may depend on some imports) is executed. <code>NameError</code>s are usually easy to resolve, but they can be annoying.</p>
<p>There's no (significant) namespace pollution to be avoided by keeping the module in a smaller scope, since all you add is the actual module (<a href="https://docs.python.org/3.1/howto/doanddont.html#from-module-import-name1-name2" rel="noreferrer">no, <code>import *</code> doesn't count and probably shouldn't be used anyway</a>). Inside functions, you'd import again on every call (not really harmful since everything is imported once, but uncalled for).</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP8</a>, the Python style guide, states that:</p>
<blockquote>
<p>Imports are always put at the top of
  the file, just after any module
        comments and docstrings, and before module globals and constants.</p>
</blockquote>
<p>Of course this is no hard and fast rule, and imports can go anywhere you want them to. But putting them at the top is the best way to go about it. You can of course import within functions or a class.</p>
<p>But note you cannot do this:</p>
<pre><code>def foo():
    from os import *
</code></pre>
<p>Because:</p>
<pre><code>SyntaxWarning: import * only allowed at module level
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe that it's best practice (according to some PEP's) that you keep import statements at the beginning of a module. You can add import statements to an <code>__init__.py</code> file, which will import those module to all modules inside the package.</p>
<p>So...it's certainly something you can do the way you're doing it, but it's discouraged and actually unnecessary.</p>
</div>
<div class="post-text" itemprop="text">
<p>While the other answers are mostly right, there is a reason why python allows this.</p>
<p>It is not smart to import redundant stuff which isn’t needed. So, if you want to e.g. parse XML into an element tree, but don’t want to use the slow builtin XML parser if lxml is available, you would need to check this the moment you need to invoke the parser.</p>
<p>And instead of memorizing the availability of lxml at the beginning, I would prefer to <code>try</code> importing and using <code>lxml</code>, <code>except</code> it’s not there, in which case I’d fallback to the builtin <code>xml</code> module.</p>
</div>
<div class="post-text" itemprop="text">
<p>Like flying sheep's answer, I agree that the others are right, but I put imports in other places like in <code>__init__()</code> routines and function calls when I am DEVELOPING code. After my class or function has been tested and proven to work with the import inside of it, I normally give it its own module with the import following PEP8 guidelines. I do this because sometimes I forget to delete imports after refactoring code or removing old code with bad ideas. By keeping the imports inside the class or function under development, I am specifying its dependencies should I want to copy it elsewhere or promote it to its own module...</p>
</div>
<div class="post-text" itemprop="text">
<p>Only move imports into a local scope, such as inside a function definition, if it’s necessary to solve a problem such as avoiding a circular import or are trying to reduce the initialization time of a module. This technique is especially helpful if many of the imports are unnecessary depending on how the program executes. You may also want to move imports into a function if the modules are only ever used in that function. Note that loading a module the first time may be expensive because of the one time initialization of the module, but loading a module multiple times is virtually free, costing only a couple of dictionary lookups. Even if the module name has gone out of scope, the module is probably available in sys.modules.</p>
<p><a href="https://docs.python.org/3/faq/programming.html#what-are-the-best-practices-for-using-import-in-a-module" rel="nofollow">https://docs.python.org/3/faq/programming.html#what-are-the-best-practices-for-using-import-in-a-module</a></p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/1188640/good-or-bad-practice-in-python-import-in-the-middle-of-a-file">Good or bad practice in Python: import in the middle of a file</a></span>
<span class="comment-copy">I think the best argument for this is: If you import the file, you want to check at import if you have all the right packages, not at the point you will use a certain function. Of course it could be that you don't need all the packages (I guess this is the downside)</span>
<span class="comment-copy">When I put import statements at the beginning of the module, and then use this module in a different file and call <code>dir(util)</code> in it, I see not only names of functions/classes I defined inside <code>util.py</code> but also <code>imports</code> that are made there. Is it good?</span>
<span class="comment-copy">Yes, because <code>import</code> executes all of the statements in the loaded source file. So let's suppose there is a module <code>X</code> which imports <code>Y</code>. Now when we import <code>X</code> in another module, <code>Y</code> is also imported.</span>
<span class="comment-copy">This answer isn't very informative--it doesn't say anything about <i>why</i>, and that's what matters.</span>
<span class="comment-copy">I, too, hate it to read “becauseth it est written in stone”.</span>
<span class="comment-copy">So say I've written a module with 3 classes, but only one of them needs <code>os.path.exists()</code>. So according to PEP8  my module has to do <code>from os import path</code>  even though nothing else aside one line uses it in the entire module ?</span>
