<div class="post-text" itemprop="text">
<p>I am looking for a way to ensure that the end-of-line style of a file is maintained in python program while reading, editing and writing.</p>
<p>Python has universal file ending support, which can convert all line endings to <code>\n</code> when the file is read, and then convert them all to the system default when the file is written.  In my case I would like to still do the initial conversion, but then write the file with the original EOL style rather than the system default.</p>
<p>Is there a standard way to do this kind of thing?  If not, is there a standard way to detect the EOL style of a file?</p>
<p>Assuming that there is no standard way to do this, a possible work flow would be:</p>
<ol>
<li>Read in a file in binary mode.</li>
<li>Decode into utf-8 (or whatever encoding is required).</li>
<li>Detect EOL style.</li>
<li><p>Convert all line endings to <code>\n</code>.</p></li>
<li><p>Do stuff with the file.</p></li>
<li><p>Convert all line endings to original style.</p></li>
<li>Encode file.</li>
<li>Write file in binary mode.</li>
</ol>
<p>In this work flow, what is the best way to do step 2?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use python's <a href="http://www.python.org/dev/peps/pep-0278/">universal newline support</a>:</p>
<pre><code>f = open('randomthing.py', 'rU')
fdata = f.read()
newlines = f.newlines
print repr(newlines)
</code></pre>
<p><code>newlines</code> contains the file's delimiter or a tuple of delimiters if the file uses a mix of delimiters. </p>
</div>
<div class="post-text" itemprop="text">
<p>To preserve original line endings, use <code>newlines=''</code> to read or write line endings untranslated.</p>
<pre><code>with open('test.txt','r',newline='') as rf:
    content = rf.read()
content = content.replace('old text','new text')
with open('testnew.txt','w',newline='') as wf:
    wf.write(content)
</code></pre>
<p>Note that if the text manipulation itself deals with line endings, additional or alternative logic may be needed to detect and match original line endings.</p>
<p>The <code>'U'</code> mode also works, but is deprecated.</p>
<p><a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">Python Documentation: open</a></p>
<blockquote>
<p>newline controls how universal newlines mode works (it only applies to text mode). It can be <code>None</code>, <code>''</code>, <code>'\n'</code>, <code>'\r'</code>, and <code>'\r\n'</code>. It works as follows:</p>
<p>• When reading input from the stream, if newline is None, universal newlines mode is enabled. Lines in the input can end in <code>'\n'</code>, <code>'\r'</code>, or <code>'\r\n'</code>, and these are translated into <code>'\n'</code> before being returned to the caller. <strong>If it is <code>''</code>, universal newlines mode is enabled, but line endings are returned to the caller untranslated.</strong> If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.</p>
<p>• When writing output to the stream, if newline is <code>None</code>, any <code>'\n'</code> characters written are translated to the system default line separator, <a href="https://docs.python.org/3/library/os.html#os.linesep" rel="nofollow noreferrer">os.linesep</a>. <strong>If newline is <code>''</code> or <code>'\n'</code>, no translation takes place.</strong> If newline is any of the other legal values, any <code>'\n'</code> characters written are translated to the given string.</p>
</blockquote>
</div>
<span class="comment-copy">This seems to only work if you read the whole file into memory first. Is that correct? For example, I tried reading just the first 500 bytes and I get <code>None</code> when I print out <code>f.newlines</code> (and I know there's a <code>\r\n</code> within the first 100 bytes). This seems like an inefficient solution since this potentially means you have two copies of the file in memory -- the one you're about to write, and the one that you read to determine the line endings. :-\</span>
<span class="comment-copy">@BryanOakley, I can't reproduce the results you describe; <code>newlines</code> updates immediately as soon as a delimiter is read, and continues to update if a different delimiter is read. Are you sure you opened with the <code>'U'</code> flag? Universal newline support isn't automatic (in my version, anyway).</span>
