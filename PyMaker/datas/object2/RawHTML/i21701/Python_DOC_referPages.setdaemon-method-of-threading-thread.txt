<div class="post-text" itemprop="text">
<p>I am a newbie in python programming, what I understand is that a process can be a daemon, but a thread in a daemon mode, I couldn't understand the usecase of this, I would request the python gurus to help me in understanding this. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here is some basic code using threading:</p>
<pre><code>import Queue
import threading

def basic_worker(queue):
    while True:
        item = queue.get()
        # do_work(item)
        print(item)
        queue.task_done()
def basic():
    # http://docs.python.org/library/queue.html
    queue = Queue.Queue()
    for i in range(3):
         t = threading.Thread(target=basic_worker,args=(queue,))
         t.daemon = True
         t.start()
    for item in range(4):
        queue.put(item)
    queue.join()       # block until all tasks are done
    print('got here')

basic()
</code></pre>
<p>When you run it, you get </p>
<pre><code>% test.py
0
1
2
3
got here
</code></pre>
<p>Now comment out the line:</p>
<pre><code>         t.daemon = True
</code></pre>
<p>Run it again, and you'll see that the script prints the same result, but hangs.
The main thread ends (note that <code>got here</code> was printed), but the second thread never finishes. </p>
<p>In contrast, when <code>t.daemon</code> is set to <code>True</code>, the thread <code>t</code> is terminated when the main thread ends.</p>
<p>Note that "daemon threads" has little to do with <a href="http://en.wikipedia.org/wiki/Daemon_%28computer_software%29" rel="noreferrer">daemon processes</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Module Queue has been renamed queue starting with Python3 to better reflect the fact that there are several queue classes (lifo, fifo, priority) in the module.
so please make the changes while using this example   </p>
</div>
<div class="post-text" itemprop="text">
<p>I've adapted @unutbu's answer for python 3. Make sure that you run this script from the command line and not some interactive environment like jupyter notebook.</p>
<pre class="lang-py prettyprint-override"><code>import queue
import threading


def basic_worker(q):
    while True:
        item = q.get()
        # do_work(item)
        print(item)
        q.task_done()


def basic():    
    q = queue.Queue()
    for item in range(4):
        q.put(item)    

    for i in range(3):
         t = threading.Thread(target=basic_worker,args=(q,))
         t.daemon = True
         t.start()

    q.join()       # block until all tasks are done
    print('got here')

basic()
</code></pre>
<p>So when you comment out the daemon line, you'll notice that the program does not finish, you'll have to interrupt it manually.
Setting the threads to daemon threads makes sure that they are killed once they have finished.</p>
<p>Note: you could achieve the same thing here without daemon threads, if you would replace the infinite while loop with another condition:</p>
<pre class="lang-py prettyprint-override"><code>def basic_worker(q):
        while not q.empty():
            item = q.get()
            # do_work(item)
            print(item)
            q.task_done()
</code></pre>
</div>
<span class="comment-copy">The best answer to this is <a href="http://stackoverflow.com/a/190017/260122">stackoverflow.com/a/190017/260122</a> .</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/190010/daemon-threads-explanation">Daemon Threads Explanation</a></span>
<span class="comment-copy">hue: The <code>threading</code> documentation says not to use the old <a href="https://docs.python.org/3/library/threading.html#threading.Thread.setDaemon" rel="nofollow noreferrer"><code>setDaemon()</code></a> method (although it doesn't say it use is deprecated).</span>
<span class="comment-copy">It is not old, it has been added as an option when you create the thread as an argument so now you haven't have to use the setter. <code>class threading.Thread(group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)</code></span>
<span class="comment-copy">Should that be t.SetDaemon(True) ?</span>
<span class="comment-copy">@GreenAsJade: <a href="http://docs.python.org/2/library/threading.html#threading.Thread.setDaemon" rel="nofollow noreferrer">t.setDaemon(True)</a> is part of the old API. Nowadays, <a href="http://docs.python.org/2/library/threading.html#threading.Thread.daemon" rel="nofollow noreferrer">t.daemon = True</a> is the recommended way to make <code>t</code> a daemon thread.</span>
<span class="comment-copy">But why is it called "daemon threads" when it "has little to do with <a href="http://en.wikipedia.org/wiki/Daemon_%28computer_software%29" rel="nofollow noreferrer">daemon processes</a>."</span>
<span class="comment-copy">Making <code>Thread</code>s daemonic does not make sure they are killed once they finishâ€”it allows them to be killed whether they're finished or not. To make sure one's finished, you would need to call its <a href="https://docs.python.org/3/library/threading.html#threading.Thread.join" rel="nofollow noreferrer"><code>join()</code></a> method.</span>
