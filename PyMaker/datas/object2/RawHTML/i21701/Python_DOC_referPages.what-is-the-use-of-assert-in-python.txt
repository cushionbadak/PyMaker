<div class="post-text" itemprop="text">
<p>I have been reading some source code and in several places I have seen the usage of <code>assert</code>. </p>
<p>What does it mean exactly? What is its usage?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>assert</code> statement exists in almost every programming language. It helps detect problems early in your program, where the cause is clear, rather than later as a side-effect of some other operation.</p>
<p>When you do...</p>
<pre><code>assert condition
</code></pre>
<p>... you're telling the program to test that condition, and immediately trigger an error if the condition is false.</p>
<p>In Python, it's roughly equivalent to this:</p>
<pre><code>if not condition:
    raise AssertionError()
</code></pre>
<p>Try it in the Python shell:</p>
<pre><code>&gt;&gt;&gt; assert True # nothing happens
&gt;&gt;&gt; assert False
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AssertionError
</code></pre>
<p>Assertions can include an optional message, and you can disable them when running the interpreter.</p>
<p>To print a message if the assertion fails:</p>
<pre><code>assert False, "Oh no! This assertion failed!"
</code></pre>
<p>Do <strong>not</strong> use parenthesis to call <code>assert</code> like a function. It is a statement. If you do <code>assert(condition, message)</code> you'll be running the <code>assert</code> with a <code>(condition, message)</code> tuple as first parameter.</p>
<p>As for disabling them, when running <code>python</code> in optimized mode, where <code>__debug__</code> is <code>False</code>, assert statements will be ignored. Just pass the <code>-O</code> flag:</p>
<pre><code>python -O script.py
</code></pre>
<p>See <a href="http://docs.python.org/reference/simple_stmts.html#assert" rel="noreferrer">here</a> for the relevant documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Watch out for the parentheses. As has been pointed out above, <a href="https://docs.python.org/3/reference/simple_stmts.html#assert">in Python 3, <code>assert</code> is still a statement</a>, so by analogy with <code>print(..)</code>, one may extrapolate the same to <code>assert(..)</code> or <code>raise(..)</code> but you shouldn't.</p>
<p>This is important because:</p>
<pre><code>assert(2 + 2 == 5, "Houston we've got a problem")
</code></pre>
<p>won't work, unlike</p>
<pre><code>assert 2 + 2 == 5, "Houston we've got a problem"
</code></pre>
<p>The reason the first one will not work is that <code>bool( (False, "Houston we've got a problem") )</code> evaluates to <code>True</code>.</p>
<p>In the statement <code>assert(False)</code>, these are just redundant parentheses around <code>False</code>, which evaluate to their contents. But with <code>assert(False,)</code> the parentheses are now a tuple, and a non-empty tuple evaluates to <code>True</code> in a boolean context.</p>
</div>
<div class="post-text" itemprop="text">
<p>As other answers have noted, <code>assert</code> is similar to throwing an exception if a given condition isn't true. An important difference is that assert statements get ignored if you compile your code with the optimization option. The <a href="http://docs.python.org/reference/simple_stmts.html#the-assert-statement">documentation</a> says that <code>assert expression</code> can better be described as being equivalent to </p>
<pre><code>if __debug__:
   if not expression: raise AssertionError
</code></pre>
<p>This can be useful if you want to thoroughly test your code, then release an optimized version when you're happy that none of your assertion cases fail - when optimization is on, the <code>__debug__</code> variable becomes False and the conditions will stop getting evaluated. This feature can also catch you out if you're relying on the asserts and don't realize they've disappeared.</p>
</div>
<div class="post-text" itemprop="text">
<p>Others have already given you links to documentation.</p>
<p>You can try the following in a interactive shell:</p>
<pre><code>&gt;&gt;&gt; assert 5 &gt; 2
&gt;&gt;&gt; assert 2 &gt; 5
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;fragment&gt;
builtins.AssertionError:
</code></pre>
<p>The first statement does nothing, while the second raises an exception. This is the first hint: asserts are useful to check conditions that should be true in a given position of your code (usually, the beginning (preconditions) and the end of a function (postconditions)).</p>
<p>Asserts are actually highly tied to programming by contract, which is a very useful engineering practice:</p>
<p><a href="http://en.wikipedia.org/wiki/Design_by_contract" rel="noreferrer">http://en.wikipedia.org/wiki/Design_by_contract</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The goal of an assertion in Python is to inform developers about <strong>unrecoverable</strong> errors in a program.</p>
<p>Assertions are not intended to signal expected error conditions, like “file not found”, where a user can take corrective action (or just try again).</p>
<p>Another way to look at it is to say that assertions are <strong>internal self-checks</strong> in your code. They work by declaring some conditions as <em>impossible</em> in your code. If these conditions don’t hold that means there’s a bug in the program.</p>
<p>If your program is bug-free, these conditions will never occur. But if one of them <em>does</em> occur the program will crash with an assertion error telling you exactly which “impossible” condition was triggered. This makes it much easier to track down and fix bugs in your programs.</p>
<p>Here’s a summary from <a href="https://dbader.org/blog/python-assert-tutorial" rel="noreferrer">a tutorial on Python’s assertions</a> I wrote:</p>
<blockquote>
<p><strong>Python’s assert statement is a debugging aid, not a mechanism for handling run-time errors.</strong> The goal of using assertions is to let developers find the likely root cause of a bug more quickly. An assertion error should never be raised unless there’s a bug in your program.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The assert statement has two forms.</p>
<p>The simple form, <code>assert &lt;expression&gt;</code>, is equivalent to</p>
<pre><code>if __​debug__:
    if not &lt;expression&gt;: raise AssertionError
</code></pre>
<p>The extended form, <code>assert &lt;expression1&gt;, &lt;expression2&gt;</code>, is equivalent to</p>
<pre><code>if __​debug__:
    if not &lt;expression1&gt;: raise AssertionError, &lt;expression2&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assertions are a systematic way to check that the internal state of a program is as the programmer expected, with the goal of catching bugs. See the example below.</p>
<pre><code>&gt;&gt;&gt; number = input('Enter a positive number:')
Enter a positive number:-1
&gt;&gt;&gt; assert (number &gt; 0), 'Only positive numbers are allowed!'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AssertionError: Only positive numbers are allowed!
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From docs:</p>
<pre><code>Assert statements are a convenient way to insert debugging assertions into a program
</code></pre>
<p>Here you can read more: <a href="http://docs.python.org/release/2.5.2/ref/assert.html" rel="noreferrer">http://docs.python.org/release/2.5.2/ref/assert.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a simple example, save this in file (let's say b.py)</p>
<pre><code>def chkassert(num):
    assert type(num) == int


chkassert('a')
</code></pre>
<p>and the result when <code>$python b.py</code></p>
<pre><code>Traceback (most recent call last):
  File "b.py", line 5, in &lt;module&gt;
    chkassert('a')
  File "b.py", line 2, in chkassert
    assert type(num) == int
AssertionError
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if the statement after assert  is true then the program continues , but if the statement after assert is false then the program gives an error. Simple as that.</p>
<p>e.g.:</p>
<pre><code>assert 1&gt;0   #normal execution
assert 0&gt;1   #Traceback (most recent call last):
             #File "&lt;pyshell#11&gt;", line 1, in &lt;module&gt;
             #assert 0&gt;1
             #AssertionError
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As summarized concisely on the <a href="http://wiki.c2.com/?WhatAreAssertions" rel="nofollow noreferrer">C2 Wiki</a>:</p>
<blockquote>
<p>An assertion is a boolean expression at a specific point in a program which will be true <em>unless there is a bug in the program.</em></p>
</blockquote>
<p>You can use an <code>assert</code> statement to document your understanding of the code at a particular program point. For example, you can document assumptions or guarantees about inputs (preconditions), program state (invariants), or outputs (postconditions).</p>
<p>Should your assertion ever fail, this is an alert for you (or your successor) that your understanding of the program was wrong when you wrote it, and that it likely contains a bug.</p>
<p>For more information, John Regehr has a wonderful blog post on the <a href="https://blog.regehr.org/archives/1091" rel="nofollow noreferrer">Use of Assertions</a>, which applies to the Python <code>assert</code> statement as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you ever want to know exactly what a reserved function does in python, type in <code>help(enter_keyword)</code></p>
<p>Make sure if you are entering a reserved keyword that you enter it as a string. </p>
</div>
<div class="post-text" itemprop="text">
<p>Python <strong>assert</strong> is basically a debugging aid which test condition for internal self-check of your code.
Assert makes debugging really easy when your code gets into impossible edge cases. Assert check those impossible cases.</p>
<p>Let's say there is a function to calculate price of item after discount :</p>
<pre><code>def calculate_discount(price, discount):
    discounted_price = price - [discount*price]
    assert 0 &lt;= discounted_price &lt;= price
    return discounted_price
</code></pre>
<p>here, discounted_price can never be less than 0 and greater than actual price. So, in case the above condition is violated assert raises an Assertion Error, which helps the developer to identify that something impossible had happened.</p>
<p>Hope it helps :)</p>
</div>
<div class="post-text" itemprop="text">
<p>My short explanation is:</p>
<ul>
<li><code>assert</code> raises <code>AssertionError</code> if expression is false, otherwise just continues the code, and if there's a comma whatever it is it will be <code>AssertionError: whatever after comma</code>, and to code is like: <code>raise AssertionError(whatever after comma)</code></li>
</ul>
<p>A related tutorial about this:</p>
<blockquote>
<p><a href="https://www.tutorialspoint.com/python/assertions_in_python.htm" rel="nofollow noreferrer">https://www.tutorialspoint.com/python/assertions_in_python.htm</a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>format :
  assert Expression[,arguments]
When assert encounters a statement,Python evaluates the expression.If the statement is not true,an exception is raised(assertionError).
If the assertion fails, Python uses ArgumentExpression as the argument for the AssertionError. AssertionError exceptions can be caught and handled like any other exception using the try-except statement, but if not handled, they will terminate the program and produce a traceback.
Example:</p>
<pre><code>def KelvinToFahrenheit(Temperature):    
    assert (Temperature &gt;= 0),"Colder than absolute zero!"    
    return ((Temperature-273)*1.8)+32    
print KelvinToFahrenheit(273)    
print int(KelvinToFahrenheit(505.78))    
print KelvinToFahrenheit(-5)    
</code></pre>
<p>When the above code is executed, it produces the following result:</p>
<pre><code>32.0
451
Traceback (most recent call last):    
  File "test.py", line 9, in &lt;module&gt;    
    print KelvinToFahrenheit(-5)    
  File "test.py", line 4, in KelvinToFahrenheit    
    assert (Temperature &gt;= 0),"Colder than absolute zero!"    
AssertionError: Colder than absolute zero!    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def getUser(self, id, Email):

    user_key = id and id or Email

    assert user_key
</code></pre>
<p>Can be used to ensure parameters are passed in the function call.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt;this_is_very_complex_function_result = 9
&gt;&gt;&gt;c = this_is_very_complex_function_result
&gt;&gt;&gt;test_us = (c &lt; 4)

&gt;&gt;&gt; #first we try without assert
&gt;&gt;&gt;if test_us == True:
    print("YES! I am right!")
else:
    print("I am Wrong, but the program still RUNS!")

I am Wrong, but the program still RUNS!


&gt;&gt;&gt; #now we try with assert
&gt;&gt;&gt; assert test_us
Traceback (most recent call last):
  File "&lt;pyshell#52&gt;", line 1, in &lt;module&gt;
    assert test_us
AssertionError
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Basically the assert keyword meaning is that if the condition is not true then it through an assertionerror else it continue for example in python.</p>
<p>code-1</p>
<pre><code>a=5

b=6

assert a==b
</code></pre>
<p>OUTPUT: </p>
<pre><code>assert a==b

AssertionError
</code></pre>
<p><strong>code-2</strong></p>
<pre><code>a=5

b=5

assert a==b
</code></pre>
<p>OUTPUT: </p>
<pre><code>Process finished with exit code 0
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/944592/best-practice-for-python-assert" title="best practice for python assert">stackoverflow.com/questions/944592/…</a></span>
<span class="comment-copy">Nit: assert is a statement and not a function.  And <a href="http://legacy.python.org/dev/peps/pep-3105/" rel="nofollow noreferrer">unlike print</a>, in Python 3 it's <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-assert_stmt" rel="nofollow noreferrer">still a statement</a>.</span>
<span class="comment-copy">syntax for the optional message: <code>assert False, "You have asserted something false."</code>  Also see <a href="http://stackoverflow.com/a/30770447/1599229">this answer</a> for gotchas.</span>
<span class="comment-copy">If I can just use the <code>if not condition: raise AssertError()</code>, why should I use assert? Are there any conditions under which assert is better other than just being a shorter form of <code>if not condition</code> statement?</span>
<span class="comment-copy">@alpha_989 a) it's shorter and more readable, b) you can disable assert statements when running the interpreter (not so with the manual <code>if</code>). Read the docs for more info :)</span>
<span class="comment-copy">totally cannot get how does this answer get so many up votes, actually others answers also. the question is "What is the use of “assert” in Python? ", so it is asking: when to use, or more exactly: what is the usage scenario of <code>assert</code>, but after reading all answers, i totally got nothing i want!</span>
<span class="comment-copy">I came here looking for this exact info about parens and the follow message. Thanks.</span>
<span class="comment-copy">But <code>assert (2 + 2 = 5), "Houston we've got a problem"</code> should be ok, yes?</span>
<span class="comment-copy">@SherylHohman you can also try to run that yourself and see if it works or not</span>
<span class="comment-copy">Don't forget that people often use parentheses for PEP 8-compliant implicit line continuation  Also Also don't forget that tuples are not defined by parentheses but by the existence of the comma (tuples have nothing to do with parens except for the purposes of operator precedence).</span>
<span class="comment-copy"><code>assert (2 + 2 = 5), "Houston we've got a problem"</code> won't work... but it has nothing to do with the assert statement, which is fine. Your condition won't work because it isn't a condition. Missing a second <code>=</code>.</span>
<span class="comment-copy">Does this mean, that if a certain variable or correct input (according to the contract by which the program is written) could lead to crashing the program, when its run by the user (assuming that -O flag is used when the user runs the program), you should instead use the <code>if Not Error: raise Exception(“ this is a error”)</code>? That way, the program will still show the source of the error, when the user runs it..</span>
<span class="comment-copy">On the other hand, if you expect that the program could error out because of incorrect logic/implementation of the code (but not due to an input which is according to the contract to the user of the program), you should use the <code>assert</code> statement? The assumption here is that when the program is released to the end user, you are using the -O flag, thus assuming that all the bugs have been removed. Hence, any error or program crash is due to input to the program which is valid as per the contract, but cant be handled by the program. So it should alert the user as such.</span>
<span class="comment-copy">@alpha_989 that's exactly right.  I like to think of assertions as sanity checks that are only to help you as a developer to make sure that what you think is true is actually true while you develop.</span>
<span class="comment-copy">So does that mean we can check in code in a situation like assert( 2 &gt; 5 ) and raise error else continue ?</span>
<span class="comment-copy">Lose the parens, assert is not a function.</span>
<span class="comment-copy">Losing the parens is more important than it seems. See <a href="http://stackoverflow.com/a/30770447/1143274">below</a>.</span>
<span class="comment-copy">Assert actually dates back (long before "contracts") to Turing, when he wrote one of the earliest papers on how programmers might tackle the rather daunting task of creating correct programs. Finding that paper is left as an exercise for the reader, since all programmers can benefit from becoming familiar with his work. :-) <a href="http://www.turingarchive.org/" rel="nofollow noreferrer">turingarchive.org</a></span>
<span class="comment-copy">Thanks for the article. Very helpful to understand <code>assert</code> statement and when to use this. I am trying to understand a number of terms that you introduced in the article.</span>
<span class="comment-copy">I thought I would post the comments here so a lot more people might be benefited from the clarifications. Sorry if the questions are too naive.</span>
<span class="comment-copy">In your blog that you linked, you give an example where you mentioned that ` assert 0 &lt;= price &lt;= product['price']` is correct, but using ` assert user.is_admin(), 'Must have admin privileges to delete'` and <code>assert store.product_exists(product_id), 'Unknown product id'</code> is not a good practice, because if the debug is turned off then the <code>user</code> even if not an <code>admin</code> will be able to delete the product. Do you consider <code>assert user.is_admin()</code> as a <code>unrecoverable</code> error? Why is this not a <code>self-check</code>?</span>
<span class="comment-copy">If you consider that ‘user.is_admin()` is a user input and hence shouldn’t be used in an <code>assert statement</code>, cant <code>price</code> also be considered a user input? Why do you consider <code>assert user.is_admin()</code> as data validation but not <code>assert price</code>?</span>
<span class="comment-copy">@LaryxDecidua Nope, you can just read it on my website, the tutorial is publicly available. Just hit escape or click the little "x" symbol if you're not interested in the newsletter. Hope this helps :-)</span>
<span class="comment-copy">Also, assertions can often be used in unit testing programs.  <a href="http://stackoverflow.com/questions/1383/what-is-unit-testing">stackoverflow.com/questions/1383/what-is-unit-testing</a></span>
<span class="comment-copy"><code>assert</code> is useful in a debugging context, but should not be relied outside of a debugging context.</span>
<span class="comment-copy">The answer provides <i>how</i> to use an <code>assert</code>, but not <i>when</i> to use (or not use) an <code>assert</code>; also noting that an <code>assert</code> can be disabled if <code>__debug__</code> is <code>False</code> would be useful.</span>
<span class="comment-copy">This will work, but from what I understand, asserts shouldn’t be used for checking user-input, because they can be turned off at run-time. If you really want to enforce or validate user-input use the <code>if not user_key: raise ValueError()</code> Check last 2 paragraphs here: <a href="https://wiki.python.org/moin/UsingAssertionsEffectively" rel="nofollow noreferrer">wiki.python.org/moin/UsingAssertionsEffectively</a></span>
<span class="comment-copy"><code>assert</code> should not be used for input validation because either the validation will be stripped out if <code>__debug__</code> is <code>False</code>. Also using assertions for non-debug purposes can cause people to catch the resulting <code>AssertionError</code>s, which can make debugging more difficult instead of less.</span>
<span class="comment-copy">please format your code properly. also, how does this improve on previous answers?</span>
<span class="comment-copy">is there any problem in my explanation?</span>
<span class="comment-copy">your explanation doesn't add anything to the existing answers, and the poor grammar makes it hard to read. if you're looking for questions to answer, consider browsing the new questions feed.</span>
<span class="comment-copy">The provided answer does answer <i>how</i> to use an <code>assert</code>, but does not answer <i>when</i> to use (or not use) an <code>assert</code>.</span>
