<div class="post-text" itemprop="text">
<p><strong>Answered</strong> I ended up going with pickle at the end anyway</p>
<p>Ok so with some advice on another question I asked I was told to use pickle to save a dictionary to a file. </p>
<p>The dictionary that I was trying to save to the file was </p>
<pre><code>members = {'Starspy' : 'SHSN4N', 'Test' : 'Test1'}
</code></pre>
<p>When pickle saved it to the file... this was the format</p>
<pre><code>(dp0
S'Test'
p1
S'Test1'
p2
sS'Test2'
p3
S'Test2'
p4
sS'Starspy'
p5
S'SHSN4N'
p6
s.
</code></pre>
<p>Can you please give me an alternative way to save the string to the file?</p>
<p>This is the format that I would like it to save in</p>
<p>members = {'Starspy' : 'SHSN4N', 'Test' : 'Test1'} </p>
<p>Complete Code:</p>
<pre><code>import sys
import shutil
import os
import pickle

tmp = os.path.isfile("members-tmp.pkl")
if tmp == True:
    os.remove("members-tmp.pkl")
shutil.copyfile("members.pkl", "members-tmp.pkl")

pkl_file = open('members-tmp.pkl', 'rb')
members = pickle.load(pkl_file)
pkl_file.close()

def show_menu():
    os.system("clear")
    print "\n","*" * 12, "MENU", "*" * 12
    print "1. List members"
    print "2. Add member"
    print "3. Delete member"
    print "99. Save"
    print "0. Abort"
    print "*" * 28, "\n"
    return input("Please make a selection: ")

def show_members(members):
    os.system("clear")
    print "\nNames", "     ", "Code"
    for keys in members.keys():
        print keys, " - ", members[keys]

def add_member(members):
    os.system("clear")
    name = raw_input("Please enter name: ")
    code = raw_input("Please enter code: ")
    members[name] = code
    output = open('members-tmp.pkl', 'wb')
    pickle.dump(members, output)
    output.close()
    return members


#with open("foo.txt", "a") as f:
#     f.write("new line\n")

running = 1

while running:
    selection = show_menu()
    if selection == 1:
        show_members(members)
        print "\n&gt; " ,raw_input("Press enter to continue")
    elif selection == 2:
        members == add_member(members)
        print members
        print "\n&gt; " ,raw_input("Press enter to continue")
    elif selection == 99:
        os.system("clear")
        shutil.copyfile("members-tmp.pkl", "members.pkl")
        print "Save Completed"
        print "\n&gt; " ,raw_input("Press enter to continue")

    elif selection == 0:
        os.remove("members-tmp.pkl")
        sys.exit("Program Aborted")
    else:
        os.system("clear")
        print "That is not a valid option!"
        print "\n&gt; " ,raw_input("Press enter to continue")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sure, save it as CSV:</p>
<pre><code>import csv
w = csv.writer(open("output.csv", "w"))
for key, val in dict.items():
    w.writerow([key, val])
</code></pre>
<p>Then reading it would be:</p>
<pre><code>import csv
dict = {}
for key, val in csv.reader(open("input.csv")):
    dict[key] = val
</code></pre>
<p>Another alternative would be json (<code>json</code> for version 2.6+, or install <code>simplejson</code> for 2.5 and below):</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; dict = {"hello": "world"}
&gt;&gt;&gt; json.dumps(dict)
'{"hello": "world"}'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most common serialization format for this nowadays is JSON, which is universally supported and represents simple data structures like dictionaries very clearly.</p>
<pre><code>&gt;&gt;&gt; members = {'Starspy' : 'SHSN4N', 'Test' : 'Test1'}
&gt;&gt;&gt; json.dumps(members)
'{"Test": "Test1", "Starspy": "SHSN4N"}'
&gt;&gt;&gt; json.loads(json.dumps(members))
{u'Test': u'Test1', u'Starspy': u'SHSN4N'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The YAML format (via pyyaml) might be a good option for you:</p>
<p><a href="http://en.wikipedia.org/wiki/Yaml" rel="noreferrer">http://en.wikipedia.org/wiki/Yaml</a></p>
<p><a href="http://pypi.python.org/pypi/PyYAML" rel="noreferrer">http://pypi.python.org/pypi/PyYAML</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Although, unlike <code>pp.pprint(the_dict)</code>, this won't be as pretty, will be run together, <code>str()</code> at least makes a dictionary savable in a simple way for quick tasks:</p>
<pre><code>f.write( str( the_dict ) )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You <a href="https://stackoverflow.com/questions/4893689/save-a-dictionary-to-a-file-alternative-to-pickle-in-python#comment5445969_4893741">asked</a> </p>
<blockquote>
<p>Ill give it a shot. How do I specify what file to dump it to/load it from?</p>
</blockquote>
<p>Apart from writing to a string, the <code>json</code> module provides a <a href="https://docs.python.org/2/library/json.html" rel="nofollow noreferrer"><code>dump()</code></a>-method, which writes to a file:</p>
<pre><code>&gt;&gt;&gt; a = {'hello': 'world'}
&gt;&gt;&gt; import json
&gt;&gt;&gt; json.dump(a, file('filename.txt', 'w'))
&gt;&gt;&gt; b = json.load(file('filename.txt'))
&gt;&gt;&gt; b
{u'hello': u'world'}
</code></pre>
<p>There is a <code>load()</code> method for reading, too.</p>
</div>
<div class="post-text" itemprop="text">
<p>While I'd suggest <code>pickle</code>, if you want an alternative, you can use <code>klepto</code>.</p>
<pre><code>&gt;&gt;&gt; init = {'y': 2, 'x': 1, 'z': 3}
&gt;&gt;&gt; import klepto
&gt;&gt;&gt; cache = klepto.archives.file_archive('memo', init, serialized=False)
&gt;&gt;&gt; cache        
{'y': 2, 'x': 1, 'z': 3}
&gt;&gt;&gt;
&gt;&gt;&gt; # dump dictionary to the file 'memo.py'
&gt;&gt;&gt; cache.dump() 
&gt;&gt;&gt; 
&gt;&gt;&gt; # import from 'memo.py'
&gt;&gt;&gt; from memo import memo
&gt;&gt;&gt; print memo
{'y': 2, 'x': 1, 'z': 3}
</code></pre>
<p>With <code>klepto</code>, if you had used <code>serialized=True</code>, the dictionary would have been written to <code>memo.pkl</code> as a pickled dictionary instead of with clear text.</p>
<p>You can get <code>klepto</code> here: <a href="https://github.com/uqfoundation/klepto" rel="nofollow">https://github.com/uqfoundation/klepto</a></p>
<p><code>dill</code> is probably a better choice for pickling then <code>pickle</code> itself, as <code>dill</code> can serialize almost anything in python.  <code>klepto</code> also can use <code>dill</code>.</p>
<p>You can get <code>dill</code> here: <a href="https://github.com/uqfoundation/dill" rel="nofollow">https://github.com/uqfoundation/dill</a></p>
</div>
<span class="comment-copy">What's wrong with the format? How would you like it to be?</span>
<span class="comment-copy">I would like it to save as a regular dictionary E.g. members = {'Starspy' : 'SHSN4N', 'Test' : 'Test1'}</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/q/7100125/562769">Storing Python dictionaries</a></span>
<span class="comment-copy">Thanks, can you still import .csv files?</span>
<span class="comment-copy">Yup, see my edit.</span>
<span class="comment-copy">Oh wow this works as far as I can tell. Thanks a bundle!</span>
<span class="comment-copy">CSV is a very ugly suggestion.  It's used for storing tables of data, usually as exports from spreadsheets; it's not a format used for serializing data structures.</span>
<span class="comment-copy">This is very true. But reading between the lines, the OP is looking to store tuples of strings in a human-friendly formatâ€¦ And CVS is pretty decent for that.</span>
<span class="comment-copy">Ill give it a shot. How do I specify what file to dump it to/load it from?</span>
<span class="comment-copy">Dump returns a string.  You can just write this to any file as per normal python IO <code>with open('file.json', 'w') as f: f.write(json.dumps(members))</code></span>
<span class="comment-copy">what is the u in the json loading format?</span>
<span class="comment-copy">@AndreasAndreou There isn't one.  The <code>u'Test'</code> format is Python, not JSON.</span>
<span class="comment-copy">the u indicates <a href="https://docs.python.org/2/howto/unicode.html" rel="nofollow noreferrer">unicode</a></span>
<span class="comment-copy">That's a great idea. The only problem is that it requires an external module.</span>
<span class="comment-copy">Yep. The external dependency is a nuisance, but YAML is cute. :)</span>
<span class="comment-copy">Since Python 3.2, this saved string object can be imported by <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a></span>
