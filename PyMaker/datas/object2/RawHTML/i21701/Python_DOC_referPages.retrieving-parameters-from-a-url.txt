<div class="post-text" itemprop="text">
<p>Given a URL like the following, how can I parse the value of the query parameters? For example, in this case I want the value of <code>def</code>.</p>
<pre><code>/abc?def='ghi'
</code></pre>
<p>I am using Django in my environment; is there a method on the <code>request</code> object that could help me?</p>
<p>I tried using <code>self.request.get('def')</code> but it is not returning the value <code>ghi</code> as I had hoped.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 2:</p>
<pre><code>import urlparse
url = 'http://foo.appspot.com/abc?def=ghi'
parsed = urlparse.urlparse(url)
print urlparse.parse_qs(parsed.query)['def']
</code></pre>
<p>Python 3:</p>
<pre><code>import urllib.parse as urlparse
url = 'http://foo.appspot.com/abc?def=ghi'
parsed = urlparse.urlparse(url)
print(urlparse.parse_qs(parsed.query)['def'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import urlparse
url = 'http://example.com/?q=abc&amp;p=123'
par = urlparse.parse_qs(urlparse.urlparse(url).query)

print par['q'][0], par['p'][0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm shocked this solution isn't on here already. Use: </p>
<pre><code>request.GET.get('variable_name')
</code></pre>
<p>This will "get" the variable from the "GET" dictionary, and return the 'variable_name' value if it exists, or a None object if it doesn't exist.</p>
</div>
<div class="post-text" itemprop="text">
<p>for Python &gt; 3.4</p>
<pre><code>from urllib import parse
url = 'http://foo.appspot.com/abc?def=ghi'
query_def=parse.parse_qs(parse.urlparse(url).query)['def'][0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know this is a bit late but since I found myself on here today, I thought that this might be a useful answer for others.</p>
<pre><code>import urlparse
url = 'http://example.com/?q=abc&amp;p=123'
parsed = urlparse.urlparse(url)
params = urlparse.parse_qsl(parsed.query)
for x,y in params:
    print "Parameter = "+x,"Value = "+y
</code></pre>
<p>With parse_qsl(), "Data are returned as a list of name, value pairs."</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a new library called furl. I find this library to be most pythonic for doing url algebra. 
To install:</p>
<pre><code>pip install furl
</code></pre>
<p>Code:</p>
<pre><code>from furl import furl
f = furl("/abc?def='ghi'") 
print f.args['def']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The url you are referring is a query type and I see that the request object supports a method called <a href="http://code.google.com/appengine/docs/python/tools/webapp/requestclass.html#Request_arguments" rel="noreferrer">arguments</a> to get the query arguments. You may also want try <code>self.request.get('def')</code> directly to get your value from the object..</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def getParams(url):
    params = url.split("?")[1]
    params = params.split('=')
    pairs = zip(params[0::2], params[1::2])
    answer = dict((k,v) for k,v in pairs)
</code></pre>
<p>Hope this helps</p>
</div>
<div class="post-text" itemprop="text">
<p>The urlparse module provides everything you need:</p>
<p>urlparse.parse_qs()</p>
</div>
<div class="post-text" itemprop="text">
<p>There's not need to do any of that. Only with</p>
<pre><code>self.request.get('variable_name')
</code></pre>
<p>Notice that I'm not specifying the method (GET, POST, etc). This is <a href="https://cloud.google.com/appengine/docs/python/tools/webapp/requestclass#Request_get" rel="nofollow">well documented</a> and <a href="https://cloud.google.com/appengine/docs/python/gettingstartedpython27/handlingforms" rel="nofollow">this is an example</a></p>
<p>The fact that you use Django templates doesn't mean the handler is processed by Django as well</p>
</div>
<div class="post-text" itemprop="text">
<p>In pure Python:</p>
<pre><code>def get_param_from_url(url, param_name):
    return [i.split("=")[-1] for i in url.split("?", 1)[-1].split("&amp;") if i.startswith(param_name + "=")][0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import cgitb
cgitb.enable()

import cgi
print "Content-Type: text/plain;charset=utf-8"
print
form = cgi.FieldStorage()
i = int(form.getvalue('a'))+int(form.getvalue('b'))
print i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a nice library w3lib.url</p>
<pre><code>from w3lib.url import url_query_parameter
url = "/abc?def=ghi"
print url_query_parameter(url, 'def')
ghi
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Btw, I was having issues using parse_qs() and getting empty value parameters and learned that you have to pass a second optional parameter 'keep_blank_values' to return a list of the parameters in a query string that contain no values. It defaults to false. Some crappy written APIs require parameters to be present even if they contain no values</p>
<pre><code>for k,v in urlparse.parse_qs(p.query, True).items():
  print k
</code></pre>
</div>
<span class="comment-copy">"Not working" how? That's exactly the right method to use; you need to tell us why you can't use it.</span>
<span class="comment-copy">In python3 <code>import urllib.parse as urlparse</code></span>
<span class="comment-copy">Note that <code>parse_qs</code> will return you a list object. You need to get the first element of it if you want a string <code>urlparse.parse_qs(parsed.query)['def'][0]</code></span>
<span class="comment-copy">Note that if url contain '#' character just like this: <a href="http://foo.appspot.com/#/abc?def=ghi" rel="nofollow noreferrer">foo.appspot.com/#/abc?def=ghi</a>, you must disallow fragments: <code>urlparse(url, allow_fragments=False)</code>, otherwise query will return empty str.</span>
<span class="comment-copy">Py3 docs: <a href="https://docs.python.org/3/library/urllib.parse.html?highlight=urlparse#urllib.parse.urlparse" rel="nofollow noreferrer">urlparse</a>; <a href="https://docs.python.org/3/library/urllib.parse.html?highlight=parse_qs#urllib.parse.parse_qs" rel="nofollow noreferrer">parse_qs</a>. Py2 docs: <a href="https://docs.python.org/2.7/library/urlparse.html?highlight=urlparse#urlparse.urlparse" rel="nofollow noreferrer">urlparse</a>; <a href="https://docs.python.org/2.7/library/urlparse.html?highlight=parse_qs#urlparse.parse_qs" rel="nofollow noreferrer">parse_qs</a>.</span>
<span class="comment-copy">This should be the top answer. Works like a charm.</span>
<span class="comment-copy">I had to leave off <code>self</code>, but I agree with the above comment.</span>
<span class="comment-copy">laconic way ,loved ya!!</span>
<span class="comment-copy">I can't get this to work.  Maybe some more details.  How are you getting request?  Is this python3 compatible?</span>
<span class="comment-copy">Best way to do it IMO. Doesn't need extra packages and works A+ on Python 3.5.</span>
<span class="comment-copy">Great library! Didn't know about it but works like a charm :)</span>
<span class="comment-copy">:) I have wasted my share of time trying to make urlparse work for me. No more.</span>
<span class="comment-copy">This should not be necessary inside a webapp.</span>
