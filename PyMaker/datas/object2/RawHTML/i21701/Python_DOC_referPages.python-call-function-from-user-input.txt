<div class="post-text" itemprop="text">
<p>Can you call functions from user input? Something like this:</p>
<pre><code>def testfunction(function):
    function()

a = raw_input("fill in function name: "
testfunction(a)
</code></pre>
<p>So if you fill in an existing function it will execute it.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you are doing is bad bad bad :P However, it's perfectly possible.</p>
<pre><code>a = raw_input("Fill in function name:")
if a in locals().keys() and callable(locals()['a']):
    locals()['a']()
else:
    print 'Function not found'
</code></pre>
<p><code>locals()</code> returns a dictionary of all the objects currently avalible, and their names. So when we say <code>a in locals().keys()</code> we are saying, "Is there any object called ". If there is, we then get it by doing <code>locals()['a']</code> and then test if it is a function using <code>callable</code>. If that is <code>True</code> aswell, then we call the function. If it is not, we simply print <code>"Function not found"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes you can, though this is generally a bad idea and a big security risk. </p>
<pre><code>def testfunc(fn):
    fn()

funcname = raw_input('Enter the name of a function')
if callable(globals()[funcname]):
    testfunc(globals()[funcname])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would probably encapsulate this kind of behavior in a class:</p>
<pre><code>class UserExec(object):
    def __init__(self):
        self.msg = "hello"
    def get_command(self):
        command = str(raw_input("Enter a command: "))
        if not hasattr(self, command):
            print "%s is not a valid command" % command
        else:
            getattr(self, command)()
    def print_msg(self):
        print self.msg
a = UserExec()
a.get_command()
</code></pre>
<p>As others have said, this is a security risk, but the more control you have over the input, the less of a risk it is; putting it in a class that includes careful input vetting helps. </p>
</div>
<span class="comment-copy">is this procedure version specific? Will Python 3.x look any different?</span>
<span class="comment-copy">@ArashHowaida A little different, but it's basic stuff, nothing unexpected or unusual -- in this case just <code>print</code> and <code>raw_input</code> need changing. I always advise that people familiarize themselves with the difference <a href="https://docs.python.org/3/whatsnew/3.0.html" rel="nofollow noreferrer">here</a>.</span>
