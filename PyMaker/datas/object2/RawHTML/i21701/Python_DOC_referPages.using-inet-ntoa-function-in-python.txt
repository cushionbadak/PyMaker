<div class="post-text" itemprop="text">
<p>I've recently started to program in python and I'm having some trouble understanding how <code>inet_nota</code> and <code>inet_aton</code> work in Python. Coming from php/mysql I've always stored ip addresses in the database as long variables. Also the <code>inet_ntoa</code> method in mysql receives a long variable as parameter and returns the dotted format of an IP, so I assumed the Python version works in a similar manner. However, it seems Python's <code>inet_ntoa</code> needs a 32-bit packed binary format. So, having the IP address stored as <code>167772160</code> value, how can I convert it to a 32-bit packed binary value (like <code>\x7f\x00\x00\x01</code>) which is needed by <code>inet_ntoa</code> method? </p>
<p>Thanks a lot</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.3+ (or with <a href="http://pypi.python.org/pypi/ipaddress">this backport</a> for 2.6 and 2.7), you can simply use <a href="http://docs.python.org/3/library/ipaddress"><code>ipaddress</code></a>:</p>
<pre><code>import ipaddress
addr = str(ipaddress.ip_address(167772160))
assert addr == '10.0.0.0'
</code></pre>
<p>Alternatively, you can manually pack the value</p>
<pre><code>import socket,struct
packed_value = struct.pack('!I', 167772160)
addr = socket.inet_ntoa(packed_value)
assert addr == '10.0.0.0'
</code></pre>
<p>You might also be interested in <a href="http://docs.python.org/library/socket.html#socket.inet_pton"><code>inet_pton</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from struct import pack

n = pack("!I", 167772160)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a late addition to this thread: if you're using Python 3.3 or above, look at the <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow">ipaddress</a> module: it's much more functional than the <code>socket</code> equivalents.</p>
</div>
<span class="comment-copy">I'm using pyjamas for my project and I'm getting: "raise StructError,"argument for i,I,l,L,q,Q,h,H must be integer". I've tried several combinations but nothing seems to work. Is there any workaround to this?</span>
<span class="comment-copy">@tibi3384 That's probably because you have a string of a number. Wrap it in <code>int</code>, like this: <code>struct.pack('!I', int(string_ip_number_variable))</code>.</span>
<span class="comment-copy">Damn,you're right, should have spotted that! Works perfectly. Guess I'm still used to php where the cast would have been performed automatically :). Cheers</span>
<span class="comment-copy">I strongly dislike python because of things like this.</span>
<span class="comment-copy">@jrwren Updated with a current-day solution. I doubt that <i>any</i> language offers a simpler way to solve the problem than that. Note that <code>ntoa</code> is a socket function and has nothing to do with Python.</span>
