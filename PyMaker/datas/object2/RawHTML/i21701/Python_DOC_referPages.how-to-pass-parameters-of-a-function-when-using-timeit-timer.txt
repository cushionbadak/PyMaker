<div class="post-text" itemprop="text">
<p>This is the outline of a simple program</p>
<pre><code># some pre-defined constants
A = 1
B = 2

# function that does something critical
def foo(num1, num2):
    # do something

# main program.... do something to A and B
for i in range(20):
    # do something to A and B
    # and update A and B during each iteration

import timeit
t = timeit.Timer(stmt="foo(num1,num2)")  
print t.timeit(5)
</code></pre>
<p>I just keep getting "global name foo is not defined".....
Can anyone help me on this? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The code snippets must be self-contained - they cannot make external references. You must define your values in the statement-string or setup-string:</p>
<pre><code>import timeit

setup = """
A = 1
B = 2

def foo(num1, num2):
    pass

def mainprog():
    global A,B
    for i in range(20):
        # do something to A and B
        foo(A, B)
"""

t = timeit.Timer(stmt="mainprog()" setup=setup)
print(t.timeit(5))
</code></pre>
<p>Better yet, rewrite your code to not use global values.</p>
</div>
<div class="post-text" itemprop="text">
<p>The functions can use arguments in <code>timeit</code> if these are created using closures, we can add this behaviours by wrapping them in another function.</p>
<pre><code>def foo(num1, num2):
    def _foo():
        # do something to num1 and num2
        pass
    return _foo

A = 1
B = 2

import timeit
t = timeit.Timer(foo(A,B))  
print t.timeit(5)
</code></pre>
<p>or shorter, we can use <a href="https://docs.python.org/3/library/functools.html">functools.partial</a> instead of explicit closures declaration</p>
<pre><code>def foo(num1, num2):
    # do something to num1 and num2
    pass

A = 1
B = 2

import timeit, functools
t = timeit.Timer(functools.partial(foo, A, B)) 
print t.timeit(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Supposing that your module filename is test.py</p>
<pre><code># some pre-defined constants
A = 1
B = 2

# function that does something critical
def foo(n, m):
    pass

# main program.... do something to A and B
for i in range(20):
    pass

import timeit
t = timeit.Timer(stmt="test.foo(test.A, test.B)", setup="import test")  
print t.timeit(5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your function needs to be define in the setup string. A good way to do this is by setting up your code in a module, so you simple have to do </p>
<pre><code>t = timeit.Timer("foo(num1, num2)", "from myfile import foo")
t.timeit(5)
</code></pre>
<p>Otherwise, you'll have to define all of the setup as a string inside the setup statement.</p>
<pre><code>setup = """
 # some pre-defined constants
A = 1
B = 2

# function that does something critical
def foo(num1, num2):
    # do something

# main program.... do something to A and B
for i in range(20):
    # do something to A and B
    # and update A and B during each iteration
"""

t = timeit.Timer("foo(num1, num2)", setup)
t.timeit(5)
</code></pre>
<p>Something awesome I just found out about is a shortcut for iPython that uses cProfile.</p>
<pre><code>def foo(x, y):
    print x*y

%prun foo("foo", 100)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I usually create an extra function:</p>
<pre><code>def f(x,y):
    return x*y

v1 = 10
v2 = 20

def f_test():
    f(v1,v2)

print(timeit.timeit("f_test()", setup="from __main__ import f_test"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a much simpler solution (at least for Python 3), you can cause the code to be executed within your current global namespace:</p>
<p><code>t = timeit.Timer(stmt="foo(num1,num2)", globals=globals())</code></p>
<p><a href="https://docs.python.org/3/library/timeit.html#examples" rel="nofollow noreferrer">https://docs.python.org/3/library/timeit.html#examples</a>
I know globals are not preferred, but if you are just making a quick script to check something I think this is the easiest implementation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an example of how to compartmentalize the timing routine, without calling globals</p>
<pre><code>def foo(a, b):
    '''Do something to `a` and `b`'''
    return a + b

def time_foo():
    '''Create timer object simply without using global variables'''
    import timeit

    _foo = foo
    a = 1
    b = 2

    # Get `Timer` oject, alternatively just get time with `timeit.timeit()`
    t = timeit.Timer('_foo(a, b)', globals=locals())

    return t
</code></pre>
<p>You could even generalize this if you wanted to use the same <code>timeit</code> function to time other functions. Here is an example with your example <code>main()</code> routine:</p>
<pre><code>def foo1(a, b):
    '''Add `a` and `b`'''
    return a + b

def foo2(a, b):
    '''More math on `a` and `b`'''
    return (a**2 * b)**2

def time_foo(func, **kwargs):
    '''Create timer object simply without using global variables'''
    import timeit
    return timeit.timeit('func(**kwargs)', globals=locals())

def run():
    '''Modify inputs to foo and see affect on execution time'''

    a = 1
    b = 2
    for i in range(10):
        # Update `a` and `b`
        a += 1
        b += 2
        # Pass args to foo as **kwargs dict
        print('foo1 time: ', time_foo(foo1, **{'a':a, 'b':b}))
        print('foo2 time: ', time_foo(foo2, **{'a':a, 'b':b}))

    return None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I prefer creating a <code>static</code> class with all the Data ready to be picked up prior of running the timer. </p>
<blockquote>
<p>Another note, it is better to do test runs in  function rather then in the global space, as the global space isn't taking advantage of <code>FAST_LOAD</code> <a href="https://stackoverflow.com/questions/11241523/why-does-python-code-run-faster-in-a-function">Why does Python code run faster in a function?</a></p>
</blockquote>
<pre><code>class Data(object):
    """Data Creation"""
    x = [i for i in range(0, 10000)]
    y = tuple([i for i in range(0, 10000)])
    def __init__(self):
        pass

import timeit

def testIterator(x):
    for i in range(10000):
        z = i


print timeit.timeit("testIterator(Data.x)", setup="from __main__ import testIterator, Data", number=50)
print timeit.timeit("testIterator(Data.y)", setup="from __main__ import testIterator, Data", number=50)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>import timeit

def f(x,y):
    return x*y

x = 5
y = 7

print(timeit.timeit(stmt='f(x,y)',
                    setup='from __main__ import f, x, y',
                    number=1000))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was playing around with timing in Python 3.7 today and trying to pass functions and variables into the timer. This is what I came up with.</p>
<pre><code>import re

text = "This         is      a  test of the      emergency broadcast       system"

def regex(text):
    return re.sub(r"(\s)\1{1,}", r"\1", text)

def loop_while(text):
    if "  " in text:
        while "  " in text:
            text = text.replace("  ", " ")

    return text

if __name__ == "__main__":
    import timeit

    callable_functions = [item for item in locals().items() if callable(item[1])]

    for func_name, func in callable_functions:
        elapsed_time = timeit.timeit(f"{func_name}(text)", globals=globals(), number=100000)
        print(f"{func_name}: {elapsed_time} \n{func(text)}\n")
</code></pre>
<p>This outputs:</p>
<blockquote>
<p>regex: 1.378352418<br/>
  This is a test of the emergency broadcast system</p>
<p>loop_while: 0.15858950299999997<br/>
  This is a test of the emergency
  broadcast system</p>
</blockquote>
<p>Then all it takes to test a new version is adding in a new function. Something like:</p>
<pre><code>def split_join(text):
    return " ".join(text.split())
</code></pre>
<p>Now it outputs:</p>
<blockquote>
<p>regex: 1.378352418<br/>
  This is a test of the emergency broadcast system</p>
<p>loop_while: 0.15858950299999997<br/>
  This is a test of the emergency broadcast system</p>
<p>split_join: 0.05700970800000005<br/>
  This is a test of the emergency broadcast system</p>
</blockquote>
</div>
<span class="comment-copy">Well first of all, the indentation here is confusing. It looks like <code>foo</code> is being defined in a different scope than <code>t</code>...</span>
<span class="comment-copy">hi. i fixed the indentation. does it look better now? :] thanks.</span>
<span class="comment-copy">timeit is ok for one-liners but for anything else better check this method <a href="http://stackoverflow.com/questions/5478351/python-time-measure-function" title="python time measure function">stackoverflow.com/questions/5478351/â€¦</a></span>
<span class="comment-copy">There is a very simple solution for this in python3, you can just run the expression in the global namespace by adding the <code>globals=globals()</code> parameter to the timeit call: <a href="https://stackoverflow.com/a/51913199/2925963">stackoverflow.com/a/51913199/2925963</a></span>
<span class="comment-copy">thank you! i fully understand! ;]</span>
<span class="comment-copy">Lucas S. answer makes this one feel kinda wrong. Awkward at least.</span>
<span class="comment-copy">Thanks, functools helped me avoid globals, nasty string approach, and the decorator/closure business.</span>
<span class="comment-copy">This snippet works but with real function I get <code>ValueError: stmt is neither a string nor callable</code> (Python 3.6). My function works normally without timeit.</span>
<span class="comment-copy">@Peter.k That is because if you want to just use <code>timeit.timeit()</code> it needs to be fed your function as a string for example <code>timeit.timeit('foo')</code></span>
<span class="comment-copy">Thanks, this is exactly what I was looking for!  Should also note that you don't even need to instantiate a <code>Timer</code>; this works also: <code>timeit.timeit(functools.partial(foo, A, B), number=5)</code></span>
<span class="comment-copy">works only if <code>v1</code> and <code>v2</code> are globals. If they are local to the f function does not work</span>
