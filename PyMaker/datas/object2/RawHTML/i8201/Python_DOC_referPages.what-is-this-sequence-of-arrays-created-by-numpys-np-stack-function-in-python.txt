<div class="post-text" itemprop="text">
<p>I'm reading the <a href="https://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.stack.html" rel="nofollow noreferrer">documentation</a> on np.stack:</p>
<blockquote>
<blockquote>
<p>Join a sequence of arrays along a new axis.<br/>
    output: ndarray</p>
</blockquote>
</blockquote>
<p>So <code>np.stack</code> is going to take, say, 2 numpy array and return what? It will return a new array, which contains a, um, sequence of arrays?</p>
<p>I can't visualize what an array consisting of a sequence of arrays is, so how about I run a little experiment:  </p>
<pre><code>import numpy as np
from random import randint

arrays = [2.5 * np.random.randn(1,2)+ 3 for _ in range(1,3)] 
arrays = [a.astype(int) for a in arrays]
arrays
</code></pre>
<p>This gives me:  </p>
<pre><code>[array([[1, 2]]), array([[2, 3]])]
</code></pre>
<p>Then,</p>
<p><code>np.stack(arrays, axis=0)</code></p>
<p>gives</p>
<pre><code>array([[[1, 2]],

[[2, 3]]])
</code></pre>
<p>Pretending for a second that the printout is not basically unreadable (10 square brackets, really?), I see what appears to be 2 arrays, in an array, in a ordered sequence. I guess the documentation is correct, but I still have no mental visualization of what this object looks like.   </p>
<p>Maybe I should look at the dimensions:   </p>
<pre><code>np.stack(arrays, axis=0).shape
</code></pre>
<p>gives  </p>
<pre><code>(2, 1, 2)
</code></pre>
<p>So we have two rows, one column, and two layers of this? Isn't that one array?  </p>
<p>My questions are:  </p>
<ul>
<li>What exactly is a 'sequence of arrays' and how does an array possess a notion of order, as does a sequence by definition?  </li>
<li>Why would anyone ever want a 'sequence of arrays' anyway, whatever that is, as opposed to concatenating multiple arrays into one (as the <code>.shape</code> implies this really is anyways)?  </li>
<li>Why did they call this function "stack" and how does the colloquial use of this word attempt to be helpful?</li>
</ul>
<p>Thanks.  </p>
<p><strong>EDIT</strong> too many good answers...having trouble selecting one for the checkmark...</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><em>What exactly is a 'sequence of arrays' and how does an array possess a notion of order, as does a sequence by definition?</em>
<ul>
<li>A sequence is an abstract-data type that, as you intuited, is an ordered collection of items. <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer">In Python</a>, a sequence can be assumed to implement <code>__getitem__</code> and <code>__len__</code>, that is, it supports bracketed indexing, e.g. <code>seq[0]</code> or <code>seq[1]</code>, and has a <code>len</code>.  It also implements <code>__contains__</code>, <code>__iter__</code>, <code>__reversed__</code>, <code>index</code>, and <code>count</code>. Built-in sequence types include <code>list</code>, <code>tuple</code>, <code>str</code>, <code>bytes</code>, <code>range</code> and <code>memoryview</code>. A <code>numpy.ndarray</code> is a sequence. </li>
</ul></li>
<li><p><em>Why would anyone ever want a 'sequence of arrays' anyway, whatever that is, as opposed to concatenating multiple arrays into one (as the .shape implies this really is anyways)?</em></p>
<ul>
<li>The documentation is letting you know that the function accepts <em>any</em> sequence of arrays. A multidimensional array <em>is</em> a sequence of arrays, itself, or you can pass a list or tuple of arrays you want to "stack" on top (or up against) each other. The function <em>returns</em> a <code>numpy.ndarray</code>, which is any numpy array (n-dimensional array).  It is a slightly different operation than <code>concatenate</code>. See below.</li>
</ul></li>
<li><em>Why did they call this function "stack" and how does the colloquial use of this word attempt to be helpful?</em>
<ul>
<li>Because it stacks stuff together. According to the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.stack.html#numpy.stack" rel="nofollow noreferrer">docs for <code>np.stack</code></a>, it "Join[s] a sequence of arrays along a new axis.", <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.concatenate.html" rel="nofollow noreferrer"><code>np.concatenate</code></a> on the other hand: "Join[s] a sequence of arrays along an existing axis."</li>
</ul></li>
</ul>
<p>Looking at the example in <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.stack.html#numpy.stack" rel="nofollow noreferrer">the docs</a> is helpful.</p>
<pre><code>&gt;&gt;&gt; a = np.array([1, 2, 3])
&gt;&gt;&gt; b = np.array([2, 3, 4])
&gt;&gt;&gt; np.stack((a, b), axis=0)
array([[1, 2, 3],
       [2, 3, 4]])
&gt;&gt;&gt; np.stack((a, b), axis=1)
array([[1, 2],
       [2, 3],
       [3, 4]])
&gt;&gt;&gt;
</code></pre>
<p><code>np.concatenate</code> does something different:</p>
<pre><code>&gt;&gt;&gt; np.concatenate((a,b))
array([1, 2, 3, 2, 3, 4])
</code></pre>
<p>It is one of many related stacking, concatenating, appending operations on <code>np.array</code>s that come built-in.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think your problem starts with <code>np.random.randn(1,2)</code> possibly not giving you what you expect.  This is going to give you a <code>(1,2)</code> array.  </p>
<p>I helps to think of this as a nested list.  The "outer" list has one item, and this item is the "inner" list of two items (in fact this is the exact way it is represented inside the <code>array()</code> wrapper).</p>
<p>Now you make a list of two of these arrays.  These brackets are outside the <code>array</code> wrapper so it is just a list.  the <code>np.stack</code> command, then, moves the brackets inside the wrapper, in a certain way according to the <code>axis</code> command. In this case <code>axis=0</code>, and the number of elements in the 0 axis becomes the number of items in the outer list.  The other two dimensions move over, and the <code>shape</code> becomes <code>(2,1,2)</code> </p>
<p>As a list, this would be a list of two items, each item being a list of a single item, this single item being a list of two numbers.</p>
<p>There are many different ways to arrange these arrays, other than <code>stack</code>.  The other major one is <code>np.concatenate</code>, which will let you join them along an existing axis (<code>axis=0</code> will have an output of shape <code>(2,2)</code>, while <code>axis=1</code> will have shape <code>(1,4)</code>)  <code>stack</code> is for when you want a new axis to join them along.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>In Python parlance, "sequence" is just a thing that can contain other things, has a sense of "order", and can optionally indexed like <code>seq[i]</code>.  Python is duck-typed so anything behaving like a sequence can be called one.  It can be a list or a tuple, for example.  In this case the ordering is definitely important.</p></li>
<li><p>The sequence can be built up piece-by-piece, as is common in programming.  For example you may download some data using a RESTful API, build an array from each response, and append each one to a list.  After you're done with requesting, you can use the accumulated "sequence of arrays" for your computation later.</p></li>
<li><p>If you look at the examples on that page it's pretty clear.  You have a list of arrays, let's say, <code>l = [a, b]</code> where <code>a</code> and <code>b</code> are arrays.  What <code>stack(l)</code> does is to create a new array with <code>a</code> "on top of" <code>b</code>, if the shapes are compatible.  Of course there's also <code>concatenate</code> but it isn't the same. <code>stack</code> creates a new dimension, but <code>concatenate</code> <em>connects</em> along the axis you specify, as the name suggests.  </p></li>
</ol>
<hr/>
<pre><code>In [1]: import numpy as np

# Ten pieces of 3x4 paper, contained in a list, or "sequence"
In [2]: arrays = [np.random.randn(3, 4) for _ in xrange(10)]

# Stack the paper so you get a paperstack with thickness 10 ;)
In [3]: np.stack(arrays, axis=0).shape
Out[3]: (10, 3, 4)

# Join each piece's long side with the next one, so you get a larger piece of paper
In [4]: np.concatenate(arrays, axis=0).shape
Out[4]: (30, 4)
</code></pre>
<p>From the release note:</p>
<blockquote>
<p>The new function <code>np.stack</code> provides a general interface for joining a sequence of arrays along a new axis, complementing <code>np.concatenate</code> for joining along an existing axis.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Numpy arrays:</p>
<pre><code>import numpy
a = np.array([1,2,3])
a.shape gives (3,) -&gt; indicates a 1D array
b = np.array([2, 3, 4])
np.stack((a,b),axis=0) --&gt;Stack the two arrays row-wise which means just put the first arrow on top of the second array
np.stack((a,b),axis=1) --&gt;columns wise stack
</code></pre>
<p>Now answering your questions in the same order:</p>
<ol>
<li>A sequence of arrays in the above example is a and b , a and b together form a sequence of arrays. </li>
<li>The reason this function is useful is - Imagine if you are trying to build a matrix where each row (array) is obtained from some special function specific to that row number , np.stack allows you to stack each array and create a 2D array with ease.</li>
<li>In the true sense , stack means placing things over something. In this , you are just adding an array on top of another array.</li>
</ol>
<p>Hope this helps!</p>
<p>Edit - Based on a comment- </p>
<p>The difference between concatenate and stack (apart from functionality)-
Concat is more like merge</p>
<pre><code>a = np.array([[1, 2], [3, 4]])
b = np.array([[5, 6]])

np.stack((a,b),axis=0) -&gt;error
np.concatenate((a,b),axis=0) --&gt;no error 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>np.stack</code> is just <strong>concatenate on a new axis</strong>.</p>
<p>Your <code>arrays</code> is a list of 2 <code>(1,2)</code> shaped arrays.  It is a sequence.</p>
<pre><code>In [325]: arrays = [np.array([[1, 2]]), np.array([[2, 3]])]
In [326]: arrays
Out[326]: [array([[1, 2]]), array([[2, 3]])]
In [327]: arrays[0].shape
Out[327]: (1, 2)
In [328]: np.array(arrays)
Out[328]: 
array([[[1, 2]],

       [[2, 3]]])
In [329]: _.shape
Out[329]: (2, 1, 2)
</code></pre>
<p>That's the same as if we took <code>np.array</code> of this list of lists</p>
<pre><code>np.array([[[1, 2]],[[2, 3]]])
</code></pre>
<p><code>np.stack</code> with the default <code>axis=0</code> does the same thing:</p>
<pre><code>In [332]: np.stack(arrays).shape
Out[332]: (2, 1, 2)
</code></pre>
<p>It joins the 2 <code>(1,2)</code> arrays on a new axis (dimension).  It might be clearer if <code>arrays</code> contained 3 arrays, producing a <code>(3,1,2)</code> array. </p>
<p><code>np.stack</code> give more flexibility, allowing us to join the arrays on other new axes (I'll flag that with '):</p>
<pre><code>In [335]: np.stack(arrays, axis=0).shape
Out[335]: (2', 1, 2)
In [336]: np.stack(arrays, axis=1).shape
Out[336]: (1, 2', 2)
In [337]: np.stack(arrays, axis=2).shape
Out[337]: (1, 2, 2')
</code></pre>
<p>Regarding the name, it's a spin off of <code>hstack</code>, <code>vstack</code>, and <code>column_stack</code>, which have been part of <code>numpy</code> for a long time.  Those are all specialized applications of <code>np.concatenate</code>.  And if you look at the code, <code>np.source(np.stack)</code>, you'll see that <code>np.stack</code> is also just an application of <code>concatenate</code>.</p>
<p>The name is not any more exotic than a 'stack of papers'.</p>
<hr/>
<p>Your <code>arrays</code> list contains 2' (1,2) shaped arrays.  <code>np.stack</code> adds a dimension to each (with <code>reshape</code>).  For the default axis=0, it reshapes them to (1',1,2).  Then it does a concatenate on the first axis, resulting (2',1,2) shape.</p>
</div>
<span class="comment-copy"><i>How does an array possess a notion of order</i> - this is a strange question. An array is always ordered, its only constraint (compared to, say, a list) is that it contains elements of the same type. How could it <i>not</i> possess a notion of order?</span>
<span class="comment-copy">The natural number line is a set that has a notion of order. You could also think of it as having distance (or measure). Do matrices map one-to-one to the natural number line? If so, then I suppose the set of all matricies would have a notion of order.</span>
<span class="comment-copy"><i>The natural number line is a set that has a notion of order.</i> Yes, and the order of a numpy array is the order of its natural-number indices. This is what you get when you e.g. iterate over all elements of the array. The same holds for n-dimensional arrays, where indexing by natural number yields (n-1)-dimensional sub-arrays.</span>
<span class="comment-copy"><code>stack</code> does not create a sequence of arrays.  It takes a <code>sequence of arrays</code> as input.  Your <code>arrays</code> list is just such a sequence.</span>
<span class="comment-copy">"sequence" is just a thing that can contain other things. So a sequence is some sort of container?</span>
<span class="comment-copy">Yes, they're containers where the order of elements is important.  Not all containers are sequences (e.g. sets and dictionaries).  There are <a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="nofollow noreferrer">7 built-in sequence types</a> in Python 2.  In Python 3 things changed somewhat but the idea is mostly the same. <code>numpy</code> arrays also behave like sequences.</span>
<span class="comment-copy">For #2 -- why don't you just concatenate rows? Why stack? What's the difference here?</span>
<span class="comment-copy">Concatenate does not need same shape of arrays whereas stack needs same dimensions. Subtle differences between all the functions.</span>
