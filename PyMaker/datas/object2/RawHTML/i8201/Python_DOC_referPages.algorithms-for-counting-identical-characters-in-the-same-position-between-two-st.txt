<div class="post-text" itemprop="text">
<p>Which of the two is a more optimal and/or more pythonic code?
Functions return the number of positions in string 1 that contain the same character in the corresponding position in string 2   :</p>
<pre><code>def compare(s1, s2):
    count = 0
    for i in s1:
        if i == s2[s1.index(i)]:
            count += 1
    print(count)

def compare2(s1, s2):
    count = 0
    for i in range(0, len(s1)):
        if s1[i] == s2[i]:
            count += 1
    print(count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strictly in term of performance, the first <em>compare()</em> is quadratic because it has an O(n) <em>index()</em> operation inside an O(n) for-loop.  The second <em>compare2()</em> is much better because is uses O(1) random access indexing with <code>i</code>.</p>
<p>That said, @CharlesDuffy pointed out correctness issues which need to be addressed first.</p>
<p>For long strings where function call overhead isn't important, consider this alternative which should run very fast:</p>
<pre><code>&gt;&gt;&gt; a = 'abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; b = 'a---e---i-----o-----u---y-'
&gt;&gt;&gt; sum(map(str.__eq__, a, b))
6
</code></pre>
<p>In Python 2, add this optimization for improved cache efficiency:</p>
<pre><code>&gt;&gt;&gt; from itertools import imap          # iterator version of map()
&gt;&gt;&gt; sum(imap(str.__eq__, a, b))
6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The second one is more optimal as your not calling a function ( c1.index() ) unnecessarily.</p>
</div>
<span class="comment-copy">def compare(s1, s2): 	count = 0 	for i in s1: 		if i == s2[s1.index(i)]: 			count += 1 	print(count)</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip()</code></a> — <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate()</code></a> — <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum()</code></a></span>
<span class="comment-copy"><code>count = sum(1 for a, b in zip(s1, s2) if a == b)</code></span>
<span class="comment-copy">Iterate values instead of using index: <code>sum(i==j for i,j in zip(s1,s2))</code></span>
<span class="comment-copy">just convert each list into a set and use bitwise <code>&amp;</code> operator comparison <code>set(s1) &amp; set(s2)</code> considering you only have small to moderate lists</span>
<span class="comment-copy">More to the point, the first one is <i>wrong</i>; if a character is present twice, <code>index()</code> will only ever return the first location for it, so the code using index won't validate correct location in the second string for any but the first instance of a given character.</span>
<span class="comment-copy">Yes. I  missed that!</span>
