<div class="post-text" itemprop="text">
<p>I'm trying to handle an string input. At first I joined the input with <code>\n</code> so I could have each word in one line (which is what I need):</p>
<pre><code>some
random
words
written
</code></pre>
<p>and transform it into something like this:</p>
<pre><code>s o m e
r a n d o m
w o r d s
w r i t t e n
</code></pre>
<p>But for some reason I'm getting random spaces at the start of a line but not every line. There are zero spaces in the input, I checked specifically. I'm not sure where those extra spaces are coming from.</p>
<p>Here's my code:</p>
<pre><code>input = "some random words written"
string = '\n'.join(re.findall(r"\w{4,}", input)) #regex bc I need the words to be at least 4 characters
space = " ".join(string)
print(space)
</code></pre>
<p>This gives me something like this:</p>
<pre><code>s o m e
 r a n d o m
 w o r d s
 w r i t t e n
</code></pre>
<p>Anyone might have a clue why?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would not use regular expressions for this.</p>
<pre><code>[x for x in input.split() if len(x) &gt; 3]
</code></pre>
<p>... will filter out words of less than 4 character.</p>
<pre><code>[' '.join(y) for y in [x for x in input.split() if len(x) &gt; 3]]
</code></pre>
<p>... will turn that into a list of "words" with each word "spaced out."</p>
<p>So you can do it all with:</p>
<pre><code>'\n'.join([' '.join(y) for y in [x for x in input.split() if len(x) &gt; 3]])
</code></pre>
<p>It's often best to build up your functional code snippets using an iterative "bottom up" approach such as I've shown here.  Also regular expressions tend to be slow and somewhat dangerous.  You're relying on a sophisticated and complex set of parsers for interpreting and applying your regular expressions.  When you can avoid them, it's usually good to do so.  the code is likely to run faster and be more robust.</p>
</div>
<div class="post-text" itemprop="text">
<p>you could do that with 1 generator and without regex:</p>
<pre><code>strg = "some random words written"
print('\n'.join(' '.join(word) for word in strg.split() if len(word) &gt; 3))
</code></pre>
<p>started the same way as <a href="https://stackoverflow.com/a/43669347/4954037">this answer</a>; mine is very similar but as i got a solution that is a little shorter i still posted it...</p>
<p>and <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input</code></a> is a built-in; avoid those as variable names.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>'\n'.join(' '.join(i) for i in text.split() if len(i) &gt;= 4)
</code></pre>
<p>First, find all words greater or equal to four letters.</p>
<p>Next join those words by space. Since <code>str</code> is iterable it will put a space inbetween each of the letter.</p>
<p>Then join it by <code>\n</code> and youâ€™re done!</p>
<pre><code>&gt;&gt;&gt; text = "some random words written"
&gt;&gt;&gt; print('\n'.join(' '.join(i) for i in text.split() if len(i) &gt;= 4))
s o m e
r a n d o m
w o r d s
w r i t t e n
</code></pre>
<p>The reason your solution does not work is because it is putting a space in between the newlines and the new character. <code>join</code> puts the space in between every single character.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/" rel="nofollow noreferrer">list comprehension</a> instead of a <code>regex</code>, i.e.:</p>
<pre><code>print("\n".join(' '.join(x) for x in input.split() if len(x) &gt; 3 ))
</code></pre>
<p>If you really need a <code>regex</code>, use:</p>
<pre><code>print("\n".join(' '.join(x) for x in re.findall('\w{4,}', input)))
</code></pre>
<hr/>
<p>output:</p>
<pre><code>s o m e
r a n d o m
w o r d s
w r i t t e n
</code></pre>
</div>
<span class="comment-copy">Yeah, because it puts a space between every character in your string, which includes the <code>\n</code></span>
<span class="comment-copy">thank you for explaining, this worked</span>
