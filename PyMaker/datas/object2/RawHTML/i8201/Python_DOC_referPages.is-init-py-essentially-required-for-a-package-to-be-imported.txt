<div class="post-text" itemprop="text">
<pre><code>from distutils import tests
</code></pre>
<p>this seems to not be throwing any errors even though there is no __init__.py in distutils/tests.</p>
<p>my understanding uto this point was that __init__.py is essentially required for a package or subpackage to be imported</p>
</div>
<div class="post-text" itemprop="text">
<p>This apparently changed in Python 3.2.  In the <a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#developer-s-guide" rel="nofollow noreferrer">setuptools documentation</a>
we find:</p>
<pre><code>Anyway, find_packages() walks the target directory, filtering by inclusion         patterns, and finds Python packages (any directory). On Python 3.2 and earlier, packages are only recognized if they include an __init__.py file. Finally, exclusion patterns are applied to 
</code></pre>
<p>However, in the <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">Python 3.6 documentation</a> we find a claim that <strong>init</strong>.py is still required.</p>
<p>My understanding is that the current behavior accepts any directory on sys.path with .py files in it.  However, I am having a hard time digging up something official for that.</p>
</div>
<span class="comment-copy">How did you determine that it doesn't have an <code>__init__.py</code>? My version certainly has one.</span>
<span class="comment-copy">Note: <code>__init__</code> is only required in python2.</span>
<span class="comment-copy"><a href="https://hg.python.org/cpython/file/2.7/Lib/distutils/tests/__init__.py" rel="nofollow noreferrer">hg.python.org/cpython/file/2.7/Lib/distutils/tests/__init__.py</a></span>
<span class="comment-copy">For Python 3.3+ read: <a href="https://www.python.org/dev/peps/pep-0420/" rel="nofollow noreferrer">PEP 420 -- Implicit Namespace Packages</a></span>
