<div class="post-text" itemprop="text">
<p>I have a <em>JSON</em> file that's pretty easy (but really big) and I need to filter it a bit. (I havent done any python for a while now...)</p>
<p>It looks like this:</p>
<pre><code>{
    'entry_1': {
        'field_1' : 'value',
        'field_2' : 123,
        'field_3' : '',
        'field_4' : 456
    },
    'entry_2': {
        'field_1' : 'value',
        'field_2' : 321,
        'field_3' : 'value',
        'field_4' : 654
    },
    ...
}
</code></pre>
<p>I want to filter it to remove the useless fields. My test file being small what I've done works well but I'll need to do it on a pretty big file and I know my code is pretty ugly.</p>
<p>So far I've done this:</p>
<pre><code>dict_in = json.load(INFILE)
dict_out = defaultdict(dict) #4harambe

allowed_fields = {'field_1', 'field_3'} 
'''should I use a set or a tuple here ? or maybe something else
All data inside will be unique (set) but 
those data wont change (tuple)
'''

for entry in dict_in:
    for field in dict_in[entry]:
        if field in allowed_fields and not dict_in[entry][field]:
            # allowed field plus non empty string
            dict_out[entry][field] = dict_in[entry][field]
</code></pre>
<p>I'd like to know how I can make it a bit sexier and more efficient (the double loop + if statement is pretty bad along with the way I access the data). I've read about itertools but I don't know how to use it yet and if it's a good idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could write it using <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer"><code>dictionary comprehensions</code></a>:</p>
<pre><code>allowed_fields = {'field_1', 'field_3'}
dict_out = {
    entry_key: {
        field: field_value
        for field, field_value in entry_value.items()
        if field in allowed_fields and field_value
    }
    for entry_key, entry_value in dict_in.items()
}
</code></pre>
<p>which gives all <code>field_1</code> and <code>field_3</code> keys with non-empty values:</p>
<pre><code>{'entry_1': {'field_1': 'value'},
 'entry_2': {'field_1': 'value', 'field_3': 'value'}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just:</p>
<pre><code>dict_out = {k: {f: v[f] for f in allowed_fields if v.get(f)} 
            for k, v in dict_in.items()}
</code></pre>
<p><strong>Note:</strong> </p>
<p><em>If you're still using python 2.7, use <code>.iteritems()</code> not <code>.items()</code></em></p>
</div>
<div class="post-text" itemprop="text">
<p>No need to iterate over the inner <code>dicts</code> just grab the values directly:</p>
<pre><code>def grabber(d, fields, default=None):
    return dict((f, d.get(f, default)) for f in fields) 

dict_out = {k:grabber(v, allowed_fields) for k,v in dict_in.items()} 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given <code>dict_in</code> as an input and <code>fields</code> that you need:</p>
<pre><code>fields = ['field_1', 'field_4']
dict_out = dict([(k, {_k: _v for _k, _v in v.items() if _k in fields}) for k, v in dict_in.items()])
</code></pre>
<p><code>dict_out</code> will look like this:</p>
<pre><code>{'entry_1': {'field_1': 'value', 'field_4': 456},
 'entry_2': {'field_1': 'value', 'field_4': 654}}
</code></pre>
</div>
<span class="comment-copy">Leave it as a <code>set()</code> O(1) vs. tuple O(n). Also, from the answers below, yours is the most readable and exactly the possibly same performance.</span>
<span class="comment-copy">Good answer. One caveat: for Python 2.7 it'd be better to use <code>.iteritems()</code> instead, since <code>.items()</code> makes a separate <code>list</code> of all the items—which is pretty inefficient for large objects. In Python 3.x this is unncessary.</span>
<span class="comment-copy">@DanLenski I've added that as a note for compatriots still suffering under the oppressive yoke of 2.7</span>
<span class="comment-copy">@donkopotamus… can't argue with you there. Time to get back to the toiling-in-the-ancient-proprietary-database-module-mines.</span>
<span class="comment-copy">@donkopotamus dindn't get that part ! I'll remove my comment.</span>
