<div class="post-text" itemprop="text">
<p>I have a python application that requires database credentials, the code looks something like this. </p>
<pre><code>def __init__ (self):
    self.conn = pymysql.connect("localhost","user","pass","db", use_unicode=True, charset="utf8")
</code></pre>
<p>As you can see, I am hard-coding the sensitive data, and when I push this code to github I have to remove it, and when I run it in the server, I have to modify it. So, basically I have to edit this file for prod/dev environment. </p>
<p>I know we can store variables in Linux as <code>database_name=foobar</code> and later <code>echo $database_name</code> to retrieve the value, but how do I use this in my python application? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://github.com/rconradharris/envparse" rel="nofollow noreferrer">envparse module</a>. It allows you to use environment variables and cast them to the proper types.</p>
<p>You can add variables for each value, as database name, database host, or create a postprocessor and define the variable as an URL:</p>
<pre><code>from envparse import env  

db_host = env(DB_HOST, 'localhost')
db_port = env.int(DB_PORT, 3306)
db_user = env(DB_USER)
db_pass = env(DB_PASS)
db_name = env(DB_NAME)

conn = pymysql.connect(db_host,db_user,db_pass,db_name, use_unicode=True, charset="utf8")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you mean envirnment variables?</p>
<p>you can access them like this:</p>
<pre><code>import os
os.getenv('DATABASE_NAME')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What I have been doing in similar cases is to keep a separate module with all config settings, declared as "constant" variables, like this:</p>
<pre><code>#global_setup.py (separate module) 
MY_DB_SERVER = "localhost"
MY_DB_USER = "user"
MY_DB_PASS = "pass"
MY_DB_DB = "db"
</code></pre>
<p>Then you import everything from that module whenever you need to use those constants. You can create a separate version of that file whitout sensitive info in order to upload to public Git servers.</p>
<pre><code># main module
from global_setup import *

def __init__ (self):
    self.conn = pymysql.connect(MY_DB_SERVER, MY_DB_USER, MY_DB_PASS, MY_DB_DB, use_unicode=True, charset="utf8")
</code></pre>
<p>Now, take care in case your application will be deployed in an environment where the user should not be able to access the database itself, or if it will be accessing the database through a non encrypted connection. You may need more security measures in those cases, like connection through SSL, or having a server-side application creating an API.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is a module <code>ConfigParser</code> in python to create .ini file and save credentials and read when you required them.</p>
<p><a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer">https://docs.python.org/3/library/configparser.html</a></p>
</div>
<span class="comment-copy">What I don't understand about environment variables is that, do they get deleted if I was to reboot my machine?</span>
<span class="comment-copy">Usually you define such variables during the session (maybe in a separate process) ou in the user session initialization scripts.</span>
<span class="comment-copy">@meskerem you're right, but they're deleted on each session. The point of environment variables is to decouple the app from the environment. If you're running your app in an staging environment, the variables would differ from production, but not the code. This cames from <a href="https://12factor.net/" rel="nofollow noreferrer">12factor.net</a>. Anyway, if env vars doesn't fit to your use case, there are other alternatives, as Victor Domingos suggested.</span>
<span class="comment-copy">Is this more efficient that environment variables though? The database in my dev and prod have different dbname, pass, user ... how does one <code>global_setup.py</code> save me from having to edit files eachtime I run it on dev/prod?</span>
<span class="comment-copy">Having all that stuff in one file means that you set it up one time and then it remains configured. Everytime the main app runs, it imports the global_setup module which contains the intended database info. You'll work with temporary data in your dev environment and when you deploy your application you configure that file with the right strings of text. You may keep the old version in your dev account, no need to change it everytime. Just import the right module. For instance, <code>global_setup_dev.py</code> may contain you local dev database info, and <code>global_setup.py</code> may contain the prod setup.</span>
<span class="comment-copy">While nothing changes in the database access, those config files will need no updates. However, do investigate a little about database security, especially if database access is remote or if there will be other users with physical access to the database server.</span>
