<div class="post-text" itemprop="text">
<p>I'm using python dictionary to calculate time between two events happening, however based on my approach I'm getting output duplicated.  Here is my input data (note the most recent, the first row will not be in output as cannot calc time after as there is not another event):</p>
<pre><code>user_id,unix_timestamp,product_id
u_ab,149356478,p_4363423
u_ab,149356453,p_4363455
u_ab,149356422,p_4363456
</code></pre>
<p>I take the data and create a dictionary here by users activity:</p>
<pre><code>context_sessions = {'u_ab': [['u_ab', '149356478', 'p_4363423'], ['u_ab', '149356453', 'p_4363455'], ['u_ab', '149356422', 'p_4363456']]}
</code></pre>
<p>Here is my code:</p>
<pre><code>        for key, value in context_sessions.items():
            num_pageviews = len(value)
            if num_pageviews &gt; 1:
                for a in range(num_pageviews):
                    user_id = context_sessions[key][(a-1)][0]
                    view_time = context_sessions[key][(a-1)][1]
                    next_view_time = context_sessions[key][(a-2)][1]
                    product_id = context_sessions[key][(a-1)][2]
                    dwell_time = int(next_pageview_time) - int(pageview_time)
                    print(user_id, product_id, dwell_time)
</code></pre>
<p>Here is the output (notice repeated values):</p>
<pre><code> u_ab, p_4363455, 25
 u_ab, p_4363455, 25
 u_ab, p_4363456, 10
 u_ab, p_4363455, 25
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>Set</code> and <code>tuple</code> to get unique values </p>
<pre><code># declare empty set variable 
output = set([])

#......your code here .....
# replace print using following 2 line 
t = (user_id, product_id, dwell_time) 
output.add(t)

# print the set 
print(list(output))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Learn how to step through code; it's one of the most important skills for an early developer to learn.  Tools like <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">pdb</a> can help, but this is something you can and should do with paper and pencil first.</p>
<p>Let's evaluate what will happen inside the code you posted:</p>
<blockquote>
<pre><code>    for key, value in context_sessions.items():
</code></pre>
</blockquote>
<p>Good.  Based on the detail you showed us, we'll at some point be evaluating <code>context_sessions['u_ab']</code></p>
<blockquote>
<pre><code>      num_pageviews = len(value)
        if num_pageviews &gt; 1:
            for a in range(num_pageviews):
</code></pre>
</blockquote>
<p>Ok, this isn't bad, either.  In the case of <code>context_sessions['u_ab']</code>, this should give us <code>num_pageviews = 3</code>, and that means <code>a</code> will go from 0 through 2, inclusive.</p>
<blockquote>
<pre><code>                user_id = context_sessions[key][(a-1)][0]
                view_time = context_sessions[key][(a-1)][1]
                next_view_time = context_sessions[key][(a-2)][1]
                product_id = context_sessions[key][(a-1)][2]
</code></pre>
</blockquote>
<p>This is where things get really questionable.  When <code>a</code> == 0, you then get the following, (assuming what you showed us of <code>context_sessions['u_ab']</code> is accurate):</p>
<pre><code>user_id = context_sessions[key][-1][0] = 'u_ab'
view_time = context_sessions[key][-1][1] = '149356422'
next_view_time = context_sessions[key][-2][1] = '149356453'
product_id = context_sessions[key][-1][2] = 'p_4363456'
</code></pre>
<p>when a == 1:</p>
<pre><code>user_id = context_sessions[key][0][0] = 'u_ab'
view_time = context_sessions[key][0][1] = '149356478'
next_view_time = context_sessions[key][-1][1] = '149356422'
product_id = context_sessions[key][0][2] = 'p_4363423'
</code></pre>
<p>and when a == 2:</p>
<pre><code>user_id = context_sessions[key][1][0] = 'u_ab'
view_time = context_sessions[key][1][1] = '149356453'
next_view_time = context_sessions[key][0][1] = '149356478'
product_id = context_sessions[key][1][2] = 'p_4363455'
</code></pre>
<p>And that's all the output you should have, if you posted the accurate code.  If you're getting a fourth value, it's not from this loop, but I'm sure you can see how using the invalid ranges is causing problems, and this is likely the cause of what happens when you run with the real data.  </p>
<p>Note that indexing on a negative number is not bad; list[-1] returns the last item in the list and list[-2] returns the second from last item in the list.  In this case, though, it's certainly not the behavior you want.</p>
<p>To solve this, change the way you look ahead.  You're already checking that the length should be greater than 1.  Take advantage of that the proper way:</p>
<pre><code>for a in range(1, num_pageviews):
    user_id = value[a][0]
    view_time = value[a][1]
    next_view_time = value[a-1][0]
    product_id = value[a][2]
    dwell_time = int(next_view_time) - int(view_time)
</code></pre>
</div>
<span class="comment-copy">Double-check your indentation. This isn't valid Pythonâ€”the things after the first <code>for</code> are at the same indentation level.</span>
<span class="comment-copy">Also, your context_sessions for 'u_ab' clearly only has 3 entries, making it very unlikely that your <code>for a in range(len(context_sessions['u_ab']))</code> would execute 4 times.  Also, I expect <code>next_pageview_time</code> and <code>pageview_time</code> are meant to be <code>next_view_time</code> and <code>view_time</code>, respectively.  I agree with aryamccarthy - this isn't a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">The code you posted clearly won't run and produce the results you indicate.  As such, I've voted this question down.  However, your problem with the indexing is enough to point to what most of your problem is, and it may be common enough that it will benefit someone else in the future, so I've posted an answer.  If you update your code on here so that the output actually matches your input, make sure to leave a comment, and I'll remove my downvote.</span>
<span class="comment-copy">-1.  At best, this will mask the issue that's causing duplicates to be output.  It won't solve whatever the underlying problem is.</span>
<span class="comment-copy">ya, you're right, i read only  <code>input</code> and <code>output</code></span>
