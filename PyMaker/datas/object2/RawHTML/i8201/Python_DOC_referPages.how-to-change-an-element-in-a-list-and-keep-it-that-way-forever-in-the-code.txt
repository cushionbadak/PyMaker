<div class="post-text" itemprop="text">
<p>I already know how to change an element of a list into another one:</p>
<pre><code>data = ["foo","bar","baz"]
for i in xrange(len(data)):
    if data[i] == "foo":
        data[i] = "baa"
print data
</code></pre>
<p>and the output is:</p>
<pre><code>['baa', 'bar', 'baz']
</code></pre>
<p>but the item in the code I'm writing still hasn't changed; it still is "foo", the only change I can see is in the output.</p>
<p>I have a much bigger code which needs to change an item on the list based on user input. How do I keep a huge list and keep changing it (without actually touching the code)?</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to do this, without diving too deeply into self-rewriting code, or databases, or having to care about data structures, is to use the <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code></a> module.</p>
<pre><code>import pickle

with open("data.pickle", "wb") as f:
    data = ["foo","bar","baz"]
    pickle.dump(data, f)
# initial write to the data.pickle file. You would probably want to
# do this only if that file already exists, or else every run of the
# program will overwrite it with the default data

with open("data.pickle", "rb") as f:
    data = pickle.load(f)
# reload that data

# Let's modify it now.
data[0] = "spam"
data.append("eggs")
# data == ["spam", "bar", "baz", "eggs"]

with open("data.pickle", "wb") as f:
    pickle.dump(data, f)  # overwrite

with open("data.pickle", "rb") as f:
    new_data = pickle.load(f)

# new_data == data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you are running a program, the program never actually changes.</p>
<p>What you are searching for is <a href="https://docs.python.org/3.6/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">file IO</a>.</p>
<p>You can read and write files to load and save results of your program:</p>
<pre><code>with open('file.txt', 'w') as f: # 'w' to write the file
    f.write('useful data')
</code></pre>
<p>You can open this file with any text editor and see it contains the text <code>useful data</code>. To load the file, use <code>read()</code></p>
<pre><code>with open('file.txt', 'r') as f: # 'r' to read the file
    print(f.read()) # prints 'useful data'
</code></pre>
<p>Of course it would be useful to write more than one line:</p>
<pre><code>with open('file.txt', 'w') as f: # 'w' to write the file
    f.writelines(['more', 'useful', 'data'])
</code></pre>
<p>Again, open it in a text editor to check the results.</p>
<p>To read the data, use readlines:</p>
<pre><code>with open('file.txt', 'r') as f: # 'r' to read the file
    print(f.readlines()) # prints ['more', 'useful', data']
</code></pre>
<p>if you want to save more complex data as you mentioned in a comment you need to use a more complex file format or database. The file formats included in python are: <code>JSON</code>, <code>CSV</code>. <code>sqlite</code> is a database included with python.</p>
<p>Another option is <code>pickle</code>, but it has many drawbacks and should only be used for temporary storage.</p>
<h3><a href="https://docs.python.org/3.6/library/json.html" rel="nofollow noreferrer">JSON</a>:</h3>
<pre><code>with open("file.json", "w") as f:
    json.dump({"complex": ["object"]}, f)

with open("file.json", "r") as f:
    x = json.load(f)
</code></pre>
<h3><a href="https://docs.python.org/3.6/library/csv.html" rel="nofollow noreferrer">CSV</a>:</h3>
<pre><code>with open('file.csv', 'w') as f:
    writer = csv.writer(f)
    writer.writerows([["fantastic", "table"], ["with many", "entries"]])

with open('file.csv') as f:
    reader = csv.reader(f)
    for row in reader:
        print(row)
</code></pre>
<p>For <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">pickle</a> and <a href="https://docs.python.org/3.6/library/sqlite3.html" rel="nofollow noreferrer">sqlite</a> I encourage you to read the documentation </p>
</div>
<div class="post-text" itemprop="text">
<p>In the the normal operation of your python application you will not see a case where user input will change the entry in your python file.</p>
<pre><code>1]    data = ["foo","bar","baz"]
2]    for i in xrange(len(data)):
3]        if data[i] == "foo":
4]            data[i] = "baa"
5]    print data
</code></pre>
<p>I added some line numbers to your code snippet above.</p>
<p>There is not sane way where you will take in user input and change the value as seen when you open the file at line 1. That doesn't mean that your list hasn't changed. Lists are mutable objects in python - this means their value can change. And you have done this in line 4 above. So you could have code that looks something like:</p>
<pre><code>1]    data = ["foo","bar","baz"]
2]    print "Current List: " + str(data) 
3]    target = raw_input('Enter the item you would like to replace: ')
4]    replacement = raw_input('Enter the replacement value: ')
5]    for i in xrange(len(data)):
6]        if data[i] == target:
7]            data[i] = replacement
8]    print data
</code></pre>
<p>The user IS changing your list. But, this isn't long term. This exists only as long as your program runs.</p>
<p>As a short mechanism you could make a file where each entry in your list is on a single line in your list:</p>
<p>So the first time the program is run you would prepopulate the list from this file:</p>
<p>file.txt
  foo
  bar
  baz</p>
<p>Then your line 1 would look slightly different:</p>
<pre><code>1]    with open('list.txt', 'r') as f:
2]        data = f.read().splitlines()
3]    print "Current List: " + str(data) 
4]    target = raw_input('Enter the item you would like to replace: ')
5]    replacement = raw_input('Enter the replacement value: ')
6]    for i in xrange(len(data)):
7]        if data[i] == target:
8]            data[i] = replacement
9]    print data
10]   with open('list.txt', 'w') as f:
11]       for entry in data:
12]           f.write(entry + '\n')
</code></pre>
<p>And, you know what, this totally works. For a simple enough situation this can be a solution. But a better solution is looking into persistent datastores like a database because that's what larger applications use to solve this problem.</p>
</div>
<span class="comment-copy">Are you talking about data persistence? If yes, have you considered writing your data to a file (not the source code) and retrieving it from the file the next time the program is run? Self-modifying code is generally a bad idea.</span>
<span class="comment-copy">When you change an element into a list, it remains until you change or remove it ... Can you clarify your question and post your code which doesn't work ?</span>
<span class="comment-copy">@blubberdiblub my problem is that my data is a huge list of lists; I have thought of putting it all on a text file but I can't find a way to arrange them into tables in the text file.</span>
<span class="comment-copy">@huhu sounds like you need a better data structure, or just need some experience with serialization. The <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer"><code>pickle</code></a> module is specifically made to do easy serializing of Python objects, you know. See <a href="https://stackoverflow.com/questions/25464295/how-to-pickle-a-list">this possible helpful question</a></span>
<span class="comment-copy">@huhu There is a multitude of ways to (serialize and) persist data. You could use JSON, YAML, XML, <code>shelve</code>, <code>pickle</code>, an SQLite3 database, CSV, etc.</span>
