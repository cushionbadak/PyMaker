<div class="post-text" itemprop="text">
<p>I have a Singleton object in Python: </p>
<pre><code>class Singleton(type):
    _instances = {}

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

    @classmethod
    def destroy(cls):
        del cls._instances[cls]


class MockObject(metaclass=Singleton):

    def __init__(self, *args, **kwargs):
        # various things
</code></pre>
<p>I would like to destroy the object at some point, so I wrote a classmethod in the metaclass. However, the <code>cls</code> refers to the metaclass <code>Singleton</code> rather than <code>MockObject</code>. Is there a way to call the <code>destroy</code> function with a value of <code>MockObject</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of defining a custom method for deleting the instance reference use a <a href="https://docs.python.org/3/library/weakref.html#weakref.WeakValueDictionary" rel="noreferrer"><code>WeakValueDictionary</code></a>.</p>
<p>Now when there are no more references of <code>MockObject</code> anywhere it will be cleaned up from <code>Singleton._instances</code> automatically.</p>
<pre><code>from weakref import WeakValueDictionary


class Singleton(type):
    _instances = WeakValueDictionary()

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            # This variable declaration is required to force a
            # strong reference on the instance.
            instance = super(Singleton, cls).__call__(*args, **kwargs)
            cls._instances[cls] = instance
        return cls._instances[cls]


class MockObject(metaclass=Singleton):

    def __init__(self, *args, **kwargs):
        pass


if __name__ == '__main__':
    m = MockObject()
    print(dict(Singleton._instances))
    del m
    print(dict(Singleton._instances))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>{&lt;class '__main__.MockObject'&gt;: &lt;__main__.MockObject object at 0x104531128&gt;}
{}
</code></pre>
</div>
<span class="comment-copy">Put the <code>destroy</code> method on <code>MockObject</code>, where it belongs (or make a <code>MockBase</code> that does this). But there's no point in trying to destroy the instance anyway; if there is any other reference to it anywhere, it will stay alive.</span>
<span class="comment-copy">Why not just define a <code>__del__</code> method on the metaclass?</span>
<span class="comment-copy">As @kindall points out, you are actually going to introduce a whole bunch of contamination by doing this. You will be deleting the the reference in your dictionary, but not any lingering references that your program has elsewhere. Now you will end up with multiple instances of your singleton floating around. You may want to read up on how objects are really deleted in Python and rethink your approach.</span>
<span class="comment-copy">Something like <code>del Singleton._instances[cls]</code> maybe. You could also use the <code>gc</code> module to make sure there's only one reference and throw an error otherwise.</span>
<span class="comment-copy">Also, have you considered a simpler approach, where you just redefine <code>__new__</code> on the metaclass instead of <code>__call__</code>, which should call both <code>__new__</code> and <code>__init__</code>? That's basically what <code>bool</code> and <code>NoneType</code> do in Python.</span>
<span class="comment-copy">Packing that one into my toolbox...</span>
