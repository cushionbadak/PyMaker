<div class="post-text" itemprop="text">
<p>Here is a function:</p>
<pre><code>def add(a, b):
try:
  return a + b
except TypeError:
  print('Error: It takes exactly 2 arguments')
</code></pre>
<p>This runs perfectly:</p>
<pre><code>print(add(5,2))
</code></pre>
<p>This does not print the message I expect:</p>
<pre><code>print(add(5))
</code></pre>
<p>Why?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your message doesn't get printed because the function is never called.</p>
<p>Here's a simpler example which doesn't try to catch any exceptions, to show what's going on:</p>
<pre><code># add_test.py

def add(a, b):
    return a + b
</code></pre>
<p>If you save this as a module <code>add_test.py</code> and then import it from an interactive Python session, you can try a couple of things out:</p>
<pre><code>&gt;&gt;&gt; from add_test import add
&gt;&gt;&gt; add(5, 2)
7
</code></pre>
<p>This works as expected.</p>
<pre><code>&gt;&gt;&gt; add(5, 'x')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/z/add_test.py", line 4, in add
    return a + b
TypeError: unsupported operand type(s) for +: 'int' and 'str'
</code></pre>
<p>This raises <code>TypeError</code> inside the <code>add()</code> function (on line 4, as the traceback above tells you), because you can't add the integer <code>5</code> and the string <code>'x'</code> together.</p>
<p>If you wanted to, you could catch this exception and print some kind of message:</p>
<pre><code># add_test_2.py

def add_exc(a, b):
    try:
        return a + b
    except TypeError:
        print("cannot add %r and %r." % (a, b))
</code></pre>
<p>â€¦ and it would behave as expected:</p>
<pre><code>&gt;&gt;&gt; from add_test_2 import add_exc
&gt;&gt;&gt; add_exc(5, 'x')
cannot add 5 and 'x'.
</code></pre>
<p>However, when you miss out an argument completely, something different happens:</p>
<pre><code>&gt;&gt;&gt; add(5)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: add() missing 1 required positional argument: 'b'
</code></pre>
<p>This raises <code>TypeError</code> immediately, without even trying to execute the code in <code>add()</code>, because when you defined <code>add()</code> you specified that it takes exactly two arguments: <code>a</code> and <code>b</code>. Your function is saying "I can only be called with two arguments", so Python follows that rule.</p>
<p>Since you haven't given Python a value for <code>b</code> in the second example, the function simply wouldn't make any sense if it were called, and Python knows that, so it refuses to try to do something that doesn't make any sense.</p>
<p>One way of looking at this is that you're getting two different kinds of <code>TypeError</code> in the two examples above:</p>
<ul>
<li><p>When you call <code>add(5, 'x')</code> the problem is that <code>5</code> and <code>'x'</code> are types of things that can't be added together, and you get a <code>TypeError</code> at the exact moment you break that rule.</p></li>
<li><p>When you try to call <code>add(5)</code>, the problem is that <code>add()</code> is a type of function that must be called with two arguments, and you get a <code>TypeError</code> at the exact moment when you break <em>that</em> rule, which is before the function can even start.</p></li>
</ul>
</div>
<span class="comment-copy">Why would it? <code>print(add(5))</code> isn't inside an exception handler, only <code>return a + b</code> is. You'll need to read up on exception handling because you're missing some <i>very</i> fundamental concepts about it.</span>
<span class="comment-copy">Thanks Jim for your comment and suggestion.Actually, I have just started learning python and I was working on exception handling in python but got stuck here.If you are able to provide me the complete solution it would be very helpful for me.</span>
<span class="comment-copy">Zero's answer is a complete solution along with a nice explanation. For more, you should check out the official Python tutorial <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">here</a> :-)</span>
