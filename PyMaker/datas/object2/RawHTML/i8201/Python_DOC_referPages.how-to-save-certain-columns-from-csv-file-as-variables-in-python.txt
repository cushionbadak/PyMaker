<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/16503560/read-specific-columns-from-a-csv-file-with-csv-module">Read specific columns from a csv file with csv module?</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I want to save and graph certain columns in Python using matplotlib. The argument for the columns will be obtained from the cmdline, so I'll have to use sys.argv to obtain them. Here's what I have currently:</p>
<p>EDIT: I should also mention that the column numbers can vary depending on what the user chooses. For instance, they could do just columns <code>1, 2</code> or just columns <code>1</code>. </p>
<pre><code>with open('./P14_data.csv', 'rb') as csvfile:
    data = csv.reader(csvfile, delimiter=';')
    cols = [index for index in sys.argv[1:]]

    #I want to extract the columns corresponding to cols

    for col in cols:

    x[col] = [rows for rows in data]
    print x
</code></pre>
<p>But this returns an empty list [].</p>
<p>As for the output, I'd like to graph each column as a one-dimensional array. So for instance, with a csv file of the form:</p>
<pre><code>1 5 
1 3
0 2
0 3
1 1
1 3
</code></pre>
<p>If a user inputs '1', I want my code to save only column one variables in an array:</p>
<p><code>data = [[1, 1, 0, 0,..]]</code></p>
<p><code>plt.plot(data)</code> </p>
<p>I know pandas is a valid option, but I like to learn it this way first. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get the first column in the row</p>
<pre><code>with open('./P14_data.csv', 'rb') as csvfile:
    data = csv.reader(csvfile, delimiter=';')
    included_cols = [1,2,3]
    x = [[rows[0]] for rows in data]
    x1 = [[row[0].split(',')[0] for row in x]]
    x2 = [[row[0].split(',')[1] for row in x]]
    x3 = [[row[0].split(',')[2] for row in x]]

    print x1
    # [['4', '7', '3', '3']]

    print x2
    # [['9', '11', '5', '6']]

    print x3
    # [['5', '4', '2', '3']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a method that saves the headings and data in separate arrays. To get each column we take the transpose of the data array and select whichever columns we are interesting in.</p>
<p>Here is <strong>data.csv</strong>:</p>
<pre><code>index,value1,value2
0,10,20
1,12,18
2,5,6
3,9,10
4,11,8
</code></pre>
<p>And here is the code:</p>
<pre><code>import matplotlib.pyplot as plt
import numpy as np
import csv

with open('data.csv','r') as csvfile:
    r = csv.reader(csvfile, delimiter=',')
    data = [i for i in r]

headings = data.pop(0)
data = np.array([[np.float(j) for j in i] for i in data])

c1 = data.T[1]
c2 = data.T[2]

fig, ax = plt.subplots(1)
ax.plot(c1, label=headings[1])
ax.plot(c2, label=headings[2])
ax.legend()
fig.show()
</code></pre>
<p>And the plot:
<a href="https://i.stack.imgur.com/VFKar.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/VFKar.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Well you could try something like that:</p>
<pre><code>#!/usr/bin/env python3

import csv

with open('./P14_data.csv', newline='') as csvfile:
    data = csv.reader(csvfile, delimiter=';')
    x = [rows for rows in data]
    transposed = list(zip(*x))
    print(transposed)
</code></pre>
<p>Or even simpler:</p>
<pre><code>#!/usr/bin/env python3

import csv

with open('./P14_data.csv', newline='') as csvfile:
    data = csv.reader(csvfile, delimiter=';')
    transposed = list(zip(*data))
    print(transposed)
</code></pre>
<p>Key points:</p>
<ul>
<li><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a></li>
<li><a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">Unpacking function argument list</a></li>
<li>The return value of <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer">csv.reader()</a> is an iterable of iterables</li>
</ul>
</div>
<span class="comment-copy">You should post a pastebin with the csv file.</span>
<span class="comment-copy">What is the expected output of the program?</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/16503560/read-specific-columns-from-a-csv-file-with-csv-module" title="read specific columns from a csv file with csv module">stackoverflow.com/questions/16503560/â€¦</a>  Check it out</span>
<span class="comment-copy">@kiran.koduru The expected output would be a graph of the column data, in other words <code>plt.plot(x)</code> <code>plt.show()</code> where x is a one-dimensional array of the columns<code>[['4,7,3,3]]</code></span>
<span class="comment-copy">Could you add to your description a subset of the input file and the expected output ? It would help to understand what you want.</span>
<span class="comment-copy">Thanks! This is what I was looking for. Is there a way to iterate through all the columns and save them as different variables (i.e: x1, x2, x3 if there are 3 columns)?</span>
<span class="comment-copy">@Nikitau I have updated my answer</span>
<span class="comment-copy">Sorry I keep bugging you, but I forgot to mention that the column numbers can vary. Is there any way to account for this? I'm guessing a valid way would be to first save it as a list of a list, and extract it later for plotting.</span>
<span class="comment-copy">Hi this is great, but is there a placeholder I can use if there are no headings in the csv? The amount of columns will vary with no header names.</span>
<span class="comment-copy">You can just remove the line "headings = data.pop(0)"</span>
