<div class="post-text" itemprop="text">
<p>Hi this is from a previous test and i was wondering how to do it
thank you
We can define the distance between two strings as the number of positions at which the corresponding
characters are different. For example, the distance between the strings “find” and “fund” is 1 since only the</p>
<p>Write a program that will input two strings from the user and will determine and output the distance
between the strings i.e. how many characters, in corresponding positions of each string,
are the different. Your program must output only the distance as defined above.</p>
<p>“karolin” “kathrin” distance 3 positions 2,3,4
“karolin” “Kerstin” distance 3 positions 1,3,4 etc
“1011101” “1001001” 2  2,4
“2173896” “2233796” 3  1,2,4
“ABCD” “ABCDEF” 2  4,5
“efghi” “efg” 2  3,4
“The quick!” “the Quick?” 1  9</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple solution would be as follows: </p>
<pre><code>&gt;&gt;&gt; s1 = "karolin"
&gt;&gt;&gt; s2 = "kathrin"

&gt;&gt;&gt; distance = sum([1 for x, y in zip(s1, s2) if x.lower() != y.lower()])
&gt;&gt;&gt; distance
3
</code></pre>
<p><code>s1</code> and <code>s2</code> define the strings that you will be working with. You can get these from the user using input() and raw_input for Python3 and 2 respectively. </p>
<p>Now for the brunt of the code in <code>sum([1 for x, y in zip(s1, s2) if x.lower() != y.lower()])</code>:</p>
<p>Zip() will 'zip' the inputs together, grouping corresponding elements from each together. In this case, <code>zip(s1, s2)</code> would give us <code>('k', 'k'), ('a', 'a'), ('r', 't'), ('o', 'h'), ('l', 'r'), ('i', 'i'), ('n', 'n')</code>. </p>
<p><code>x, y in zip</code> will iterate through these pairings, assigning <code>x</code> to the first entry and <code>y</code> to second. </p>
<p>We then compare them with an <code>if</code> statement, <code>if x.lower() != y.lower()</code>. We use <code>.lower()</code> to convert the character to lower case; otherwise, 'k' and 'K' would not be considered equal. (You could also just call <code>lower()</code> on the strings immediately after they are entered.)</p>
<p>All of this inside the square brackets <code>[..]</code> is called a list comprehension. Since you now understand the subparts, as a whole, it is saying 'insert a <code>1</code> into a list for every x, y pair in the zipped list if x and y are not the same letter'. </p>
<p>This gives us a list containing a bunch of the integer <code>1</code>, in this case, [1, 1, 1]. <code>1</code> for every difference in corresponding character. So, to get the total number of differences, we simply sum all of these values, by calling <code>sum()</code> on the entire list. </p>
</div>
<span class="comment-copy">Please edit the question and paste in your source code. No one here is eager to do your homework, or "previous test", work.</span>
<span class="comment-copy">many possible different answers for this, many already exist on this site, possible duplicate: <a href="http://stackoverflow.com/questions/12226846/count-letter-differences-of-two-strings">Count letter differences of two strings</a>, an exact duplicate of <a href="http://stackoverflow.com/questions/28423448/counting-differences-between-two-strings">Counting differences between two strings</a> which is used in the answer below</span>
<span class="comment-copy">Consider using the builtin <a href="https://docs.python.org/3/library/difflib.html" rel="nofollow noreferrer">difflib</a></span>
<span class="comment-copy">Thank you so much</span>
<span class="comment-copy">Do please click the green tick next to this answer if this helped you out!</span>
