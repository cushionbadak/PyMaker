<div class="post-text" itemprop="text">
<p>I want to use struct on the python as like below C style.</p>
<pre><code>typedef
{
  int a;
  int b;
}my_struct_t;

my_strut_t func(my_strut_t ttt, int var1, int var2)
{
  ttt.a = var1;
  ttt.b = var2;

  return ttt;
}

main()
{
  my_struct_t my_struct;

  my_struct = func(my_struct, 10, 20);

  printf("a=%d, b=%d", my_struct.a, my_struct.b);
}
</code></pre>
<p>Could you translate above C style code to python script?</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could make a <code>class</code> in python instead of a <code>struct</code></p>
<pre><code>class my_struct_t(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b

def main():
    my_struct = my_struct_t(10, 20)
    print('a={}, b={}'.format(my_struct.a, my_struct.b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>class</code>:</p>
<pre><code>class Struct:
    pass

# or, equivalently:

Struct = type("Struct", (), {})
</code></pre>
<p>Then you can create members of that class on the fly:</p>
<pre><code>test = Struct()

test.a = 5 # create a new member
print(test.a)

print(test.b) # Error: this member doesn't exist
# but you can create it easily
</code></pre>
<p>Then, once you create all the members necessary <em>for each instance</em>, you can pass the instances of this class around etc. </p>
<p>Be aware that newly initialized instances <em>do not</em> have any members except some default ones. </p>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/35988/c-like-structures-in-python">C-like structures in Python</a></span>
<span class="comment-copy">Consider using the <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">namedtuple</a> type. It was written explicitly to handle record types like this.</span>
<span class="comment-copy">@NoufalIbrahim that depends on the use case - because <code>namedtuple</code>s (as any <code>tuple</code> or <code>tuple</code>-like objects) are immutable. It would work for the code above, but not so much if the <code>my_struct</code> is meant to be mutated (a field's changed) somewhere else.</span>
