<div class="post-text" itemprop="text">
<p>Using html parser</p>
<p>use_raw = '%s%s' % (use_raw, aux)</p>
<p>This how i am exlcuding black, but here i want to exclude grey too.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>You can use a regex. <code>^#([a-fA-F0-9]{1,2})\1\1$</code> will identify all 6-digit and 3-digit gray hex colors.</p>
</blockquote>
<hr/>
<h1>Explanation</h1>
<h3>Identifying 'grey'</h3>
<p>All grey hex color codes have <strong>3 sets of 2 digits</strong> or <strong>3 identical digits</strong>. e.g. <code>#151515</code>, <code>#1C1C1C</code>, <code>#2E2E2E</code>, <code>#424242</code>, <code>#555</code>, <code>#EEE</code>..... and this is how we can identify them as grey. </p>
<h3>Determining if string meets 'grey' format</h3>
<p>Therefore I would use a regex. The following regular expression will match all strings, that start with a <code>#</code>, and contain 3 identical consecutive sets of 2 digit alpha-numeric characters. Hence match all greys.</p>
<pre><code>^#([a-fA-F0-9]{1,2})\1\1$
</code></pre>
<h3>Applying with Python</h3>
<pre><code>import re
pattern = re.compile("^#([a-fA-F0-9]{1,2})\1\1$")
pattern.match(aux)
</code></pre>
<p>See the Python documentation on regular expressions: <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">https://docs.python.org/3/library/re.html</a></p>
<h3>References:</h3>
<ul>
<li><a href="http://www.rapidtables.com/web/color/gray-color.htm" rel="nofollow noreferrer">http://www.rapidtables.com/web/color/gray-color.htm</a></li>
<li><a href="https://stackoverflow.com/questions/15688193/how-to-find-3-or-more-consecutive-characters">How to find 3 or more consecutive characters?</a></li>
<li><a href="https://stackoverflow.com/questions/12595051/check-if-string-matches-pattern">Check if string matches pattern</a></li>
<li><a href="http://www.xcprod.com/titan/XCSB-DOC/hex.html" rel="nofollow noreferrer">http://www.xcprod.com/titan/XCSB-DOC/hex.html</a></li>
<li><a href="https://stackoverflow.com/users/464744/blender">Blender's</a> comment <a href="https://stackoverflow.com/questions/43621344/how-to-exlcude-grey-colour-code-from-the-file/43621760#comment74293735_43621760">about 3-digit hex codes</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You could possibly do something like</p>
<pre><code>    for i in ["lightgray", "lightgrey", "silver", "darkgray", "darkgrey",
            "gray", "grey", "dimgray", "dimgrey", "darkslategrey"]:
        if aux.find(i)&lt;0:
            use_raw = '%s%s' % (use_raw, aux)
    for i in range(1,256):
        if aux.find('#%02x%02x%02x'%(i,i,i))&lt;0 and format(i&lt;&lt;16 | i&lt;&lt;8 | i, '06X')&lt;0 and format(i&lt;&lt;16 | i&lt;&lt;8 | i, '06x')&lt;0:
            use_raw = '%s%s' % (use_raw, aux)
</code></pre>
<p>You could probably make the code smaller and more efficient, but that's a simple answer, I guess.
(This does include only <em>strictly</em> grey colour. It does not allow for slight variations.)</p>
</div>
<span class="comment-copy">"pure" grey always has the same value for RGB values, you can split the values <code>000000</code> into 3 sets of 2 digits, each set for each color, if the 3 sets are equal, you have grey.</span>
<span class="comment-copy">But, in python we are not able to split the value, as it throwing a error, that it should be str</span>
<span class="comment-copy">you can use slices. Strip the <code>#</code> and check that <code>x[:2] == x[2:4] == x[4:]</code> where x is the hex color.</span>
<span class="comment-copy">regular expression?</span>
<span class="comment-copy">Rachit, did that regex work okay for you?</span>
<span class="comment-copy">You can change your regex to <code>^#([a-fA-F0-9]{1,2})\1\1$</code> and it should work for three-digit colors.</span>
<span class="comment-copy">Didn't think of that, thanks @Blender! I've amended the answer</span>
<span class="comment-copy">@this doesnt work here</span>
<span class="comment-copy">Which part isn't working? I need something more specific to be able to help :)</span>
<span class="comment-copy">@RachitAgarwal, the list is to cover all bases. The for function with the range is designed to cover all hexa 3-digit, 6-digit, and RGB colour codes.</span>
