<div class="post-text" itemprop="text">
<p>If I have a list of dictionary or a list of list where each elements are equal sized, e.g. 2 elements â†’ <code>[{1,2}, {3,4}, {4,6}, {1,2}]</code> or <code>[[1,2], [3,4], [4,6], [1,2]]</code></p>
<p>How do I check for duplicate and keep count of repeated times?</p>
<p>For list, something like this would work but I can't use set directly in my case.</p>
<pre><code>recur1 = [[x, status.count(x)] for x in set(list1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way is to use a <code>Counter</code>, but you have to convert to a hashable (i.e. immutable) type:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; objs = [{1,2}, {3,4}, {4,6}, {1,2}]
&gt;&gt;&gt; counts = Counter(objs)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/juan/anaconda3/lib/python3.5/collections/__init__.py", line 530, in __init__
    self.update(*args, **kwds)
  File "/Users/juan/anaconda3/lib/python3.5/collections/__init__.py", line 617, in update
    _count_elements(self, iterable)
TypeError: unhashable type: 'set'
</code></pre>
<p>So, for a set, the natural choice is a <code>frozenset</code>:</p>
<pre><code>&gt;&gt;&gt; counts = Counter(frozenset(s) for s in objs)
&gt;&gt;&gt; counts
Counter({frozenset({1, 2}): 2, frozenset({4, 6}): 1, frozenset({3, 4}): 1})
&gt;&gt;&gt;
</code></pre>
<p>This is assuming order doesn't matter, although, you can create an OrderedCounter <a href="https://docs.python.org/3.4/library/collections.html?highlight=ordereddict#ordereddict-examples-and-recipes" rel="nofollow noreferrer">almost trivially...</a></p>
<p>If instead you have a list of lists, a <code>tuple</code> would be the natural choice:</p>
<pre><code>&gt;&gt;&gt; objs = [[1,2], [3,4], [4,6], [1,2]]
&gt;&gt;&gt; counts = Counter(tuple(l) for l in objs)
&gt;&gt;&gt; counts
Counter({(1, 2): 2, (3, 4): 1, (4, 6): 1})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use Counter from collections:</p>
<pre><code>from collections import Counter

the_list = [[1,2], [3,4], [4,6], [1,2]]
new_list = map(tuple, the_list)
the_dict = Counter(new_list)

final_list = [a for a, b in the_dict.items() if b &gt; 1]
#the number of duplicates:
print len(final_list)
#the duplicates themselves:
print final_list

if len(final_list) &gt; 0:
   print "Duplicates exist in the list"
   print "They are: "
   for i in final_list:
       print i

else:
    print "No duplicates"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>ll = [[1,2], [3,4], [4,6], [1,2]]

# Step1 Using a dictionary.

counterDict = {}
for l in ll:
  key = tuple(l) # list can not be used as a dictionary key.
  if key not in counterDict:
    counterDict[key] = 0 
  counterDict[key] += 1 
print(counterDict)  


# Step2 collections.Counter()
import collections
c = collections.Counter([ tuple(l) for l in ll])
print(c)  


# Step3 list.count()
for l in ll:
  print(l , ll.count(l))
</code></pre>
</div>
<span class="comment-copy">You could use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a></span>
<span class="comment-copy">show how should look the expected result</span>
<span class="comment-copy">That's not a list of <code>dict</code>, that is a list of <code>set</code>.</span>
