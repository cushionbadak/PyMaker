<div class="post-text" itemprop="text">
<p>In <a href="http://python-notes.curiousefficiency.org/en/latest/python3/enum_creation.html" rel="nofollow noreferrer">this article</a> Nick Coghlan talks about some of the design decisions that went in to the <a href="https://www.python.org/dev/peps/pep-0435/" rel="nofollow noreferrer">PEP 435 <code>Enum</code> type</a>, and how <code>EnumMeta</code> can be subclassed to provide a different <code>Enum</code> experience.</p>
<p>However, the advice I give (and I am the primary stdlib <code>Enum</code> author) about using a metaclass is it should not be done without a really good reason -- such as not being able to accomplish what you need with a class decorator, or a dedicated function to hide any ugliness; and in my own work I've been able to do whatever I needed simply by using <code>__new__</code>, <code>__init__</code>, and/or normal class/instance methods when creating the <code>Enum</code> class:</p>
<ul>
<li><p><a href="https://stackoverflow.com/questions/12680080/python-enums-with-attributes"><code>Enum</code> with attributes</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/37444002/overriding-enum-call-method">Handling missing members</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/17911188/is-it-possible-to-define-a-class-constant-inside-an-enum">class constants that are not <code>Enum</code> members</a></p></li>
</ul>
<p>And then there is this cautionary tale of being careful when delving into <code>Enum</code>, with and without metaclass subclassing:</p>
<ul>
<li><a href="https://stackoverflow.com/a/24107853/208880">Is it possible to override <code>__new__</code> in an enum to parse strings to an instance?</a></li>
</ul>
<p>Given all that, when would I need to fiddle with <code>EnumMeta</code> itself?</p>
</div>
<div class="post-text" itemprop="text">
<p>The best (and only) cases I have seen so far for subclassing <code>EnumMeta</code> comes from these two questions:</p>
<ul>
<li><p><a href="https://stackoverflow.com/q/43096541/208880">A more pythonic way to define an enum with dynamic members</a></p></li>
<li><p><a href="https://stackoverflow.com/q/54274002/208880">Python enum prevent invalid attribute assignment</a></p></li>
</ul>
<p>We'll examine the dynamic member case further here.</p>
<hr/>
<p>First, a look at the code needed when not subclassing <code>EnumMeta</code>:</p>
<p><strong>The stdlib way</strong></p>
<pre><code>from enum import Enum
import json

class BaseCountry(Enum):
    def __new__(cls, record):
        member = object.__new__(cls)
        member.country_name = record['name']
        member.code = int(record['country-code'])
        member.abbr = record['alpha-2']
        member._value_ = member.abbr, member.code, member.country_name
        if not hasattr(cls, '_choices'):
            cls._choices = {}
        cls._choices[member.code] = member.country_name
        cls._choices[member.abbr] = member.country_name
        return member                
    def __str__(self):
        return self.country_name

Country = BaseCountry(
        'Country',
        [(rec['alpha-2'], rec) for rec in json.load(open('slim-2.json'))],
        )
</code></pre>
<p><strong>The <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer"><code>aenum</code></a> way</strong> <sup>1</sup> <sup>2</sup></p>
<pre><code>from aenum import Enum, MultiValue
import json

class Country(Enum, init='abbr code country_name', settings=MultiValue):
    _ignore_ = 'country this'  # do not add these names as members
    # create members
    this = vars()
    for country in json.load(open('slim-2.json')):
        this[country['alpha-2']] = (
                country['alpha-2'],
                int(country['country-code']),
                country['name'],
                )
    # have str() print just the country name
    def __str__(self):
        return self.country_name
</code></pre>
<hr/>
<p>The above code is fine for a one-off enumeration -- but what if creating Enums from JSON files was common for you?  Imagine if you could do this instead:</p>
<pre><code>class Country(JSONEnum):
    _init_ = 'abbr code country_name'  # remove if not using aenum
    _file = 'some_file.json'
    _name = 'alpha-2'
    _value = {
            1: ('alpha-2', None),
            2: ('country-code', lambda c: int(c)),
            3: ('name', None),
            }
</code></pre>
<p>As you can see:</p>
<ul>
<li><code>_file</code> is the name of the json file to use</li>
<li><code>_name</code> is the path to whatever should be used for the name</li>
<li><code>_value</code> is a dictionary mapping paths to values<sup>3</sup></li>
<li><code>_init_</code> specifies the attribute names for the different value components (if using <code>aenum</code>)</li>
</ul>
<p>The JSON data is taken from <a href="https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes" rel="nofollow noreferrer">https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes</a> -- here is a short excerpt:</p>
<blockquote>
<p>[{"name":"Afghanistan","alpha-2":"AF","country-code":"004"},</p>
<p>{"name":"Ã…land Islands","alpha-2":"AX","country-code":"248"},</p>
<p>{"name":"Albania","alpha-2":"AL","country-code":"008"},</p>
<p>{"name":"Algeria","alpha-2":"DZ","country-code":"012"}]</p>
</blockquote>
<p>Here is the <code>JSONEnumMeta</code> class:</p>
<pre><code>class JSONEnumMeta(EnumMeta):

    @classmethod
    def __prepare__(metacls, cls, bases, **kwds):
        # return a standard dictionary for the initial processing
        return {}

    def __init__(cls, *args , **kwds):
        super(JSONEnumMeta, cls).__init__(*args)

    def __new__(metacls, cls, bases, clsdict, **kwds):
        import json
        members = []
        missing = [
               name
               for name in ('_file', '_name', '_value')
               if name not in clsdict
               ]
        if len(missing) in (1, 2):
            # all three must be present or absent
            raise TypeError('missing required settings: %r' % (missing, ))
        if not missing:
            # process
            name_spec = clsdict.pop('_name')
            if not isinstance(name_spec, (tuple, list)):
                name_spec = (name_spec, )
            value_spec = clsdict.pop('_value')
            file = clsdict.pop('_file')
            with open(file) as f:
                json_data = json.load(f)
            for data in json_data:
                values = []
                name = data[name_spec[0]]
                for piece in name_spec[1:]:
                    name = name[piece]
                for order, (value_path, func) in sorted(value_spec.items()):
                    if not isinstance(value_path, (list, tuple)):
                        value_path = (value_path, )
                    value = data[value_path[0]]
                    for piece in value_path[1:]:
                        value = value[piece]
                    if func is not None:
                        value = func(value)
                    values.append(value)
                values = tuple(values)
                members.append(
                    (name, values)
                    )
        # get the real EnumDict
        enum_dict = super(JSONEnumMeta, metacls).__prepare__(cls, bases, **kwds)
        # transfer the original dict content, _items first
        items = list(clsdict.items())
        items.sort(key=lambda p: (0 if p[0][0] == '_' else 1, p))
        for name, value in items:
            enum_dict[name] = value
        # add the members
        for name, value in members:
            enum_dict[name] = value
        return super(JSONEnumMeta, metacls).__new__(metacls, cls, bases, enum_dict, **kwds)

# for use with both Python 2/3
JSONEnum = JSONEnumMeta('JsonEnum', (Enum, ), {})
</code></pre>
<p>A few notes:</p>
<ul>
<li><p><code>JSONEnumMeta.__prepare__</code> returns a normal <code>dict</code></p></li>
<li><p><code>EnumMeta.__prepare__</code> is used to get an instance of <code>_EnumDict</code> -- this is the proper way to get one</p></li>
<li><p>keys with a leading underscore are passed to the real <code>_EnumDict</code> first as they may be needed when processing the enum members</p></li>
<li><p>Enum members are in the same order as they were in the file</p></li>
</ul>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
<p><sup>2</sup> This requires <code>aenum 2.0.5+</code>.</p>
<p><sup>3</sup> The keys are numeric to keep multiple values in order should your <code>Enum</code> need more than one.</p>
</div>
