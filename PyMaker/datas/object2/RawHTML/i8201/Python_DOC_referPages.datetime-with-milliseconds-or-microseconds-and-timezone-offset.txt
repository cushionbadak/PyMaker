<div class="post-text" itemprop="text">
<p>This is the representation desired for dates:</p>
<pre><code>&gt;&gt;&gt; tz = pytz.timezone('US/Central')
&gt;&gt;&gt; datefmt = '%Y-%m-%d %H:%M:%S.%f%z(%Z)'
&gt;&gt;&gt; datetime.now(tz).strftime(datefmt)
'2017-04-27 15:09:59.606921-0500(CDT)'
</code></pre>
<p>This is how it's logged (Python 3.6.0 on Linux):</p>
<pre><code>&gt;&gt;&gt; logrecord_format = '%(asctime)s %(levelname)s %(message)s'
&gt;&gt;&gt; logging.basicConfig(format=logrecord_format, datefmt=datefmt)
&gt;&gt;&gt; logging.error('ruh-roh!')
2017-04-27 15:10:35.%f-0500(CDT) ERROR ruh-roh!
</code></pre>
<p>It's not filling the microseconds properly.  I've tried changing the <code>logrecord_format</code> to a few other things, but I could not figure it out - how to configure the logger to show microseconds and timezone in the correct way to match the <code>strftime</code> output exactly?</p>
<hr/>
<p><strong><em>Edit</em></strong>:</p></div>
<div class="post-text" itemprop="text">
<p>Personally, instead of integrating the timezone into the date format, I add it directly to the logged message format. Usually, the timezone should not change during the program execution.</p>
<pre><code>import logging
import time

tz = time.strftime('%z')
fmt = '%(asctime)s' + tz + ' %(levelname)s %(message)s'

logging.basicConfig(format=fmt)

logging.error("This is an error message.")

# 2017-07-28 19:34:53,336+0200 ERROR This is an error message.
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/logging.html#logging.Formatter.formatTime" rel="nofollow noreferrer">It looks like <code>logging</code> uses <code>time.strftime</code></a> rather than <code>datetime.datetime.strftime</code>, and <code>time.strftime</code> doesn't support microseconds (or milliseconds, so they use a weird hack to add those in with the default format).</span>
<span class="comment-copy">If you want to do this anyway, you'd have to write your own <code>Formatter</code> subclass that implements <code>formatTime</code> differently.</span>
<span class="comment-copy">But <code>time.strftime</code> does support microseconds correctly on my platform: <code>datetime.now().time().strftime('%H:%M:%S.%f')</code> --&gt; <code>'15:42:54.516274'</code>.</span>
<span class="comment-copy"><code>time.strftime</code> as in the <code>strftime</code> function in the <code>time</code> module, not <code>datetime.time.strftime</code>.</span>
<span class="comment-copy">They are different?  Oh.   WTF.</span>
<span class="comment-copy">clever way to avoid subclassing - doesn't support microseconds though</span>
