<div class="post-text" itemprop="text">
<p>I am attempting to pass a shared secret to child processes. In a Linux environment this works. In a Windows environment the child does not receive the shared secret. The three files below are a simple example of what I'm trying to do:</p>
<h3>main.py</h3>
<pre><code>import multiprocessing
import module1
import module2

if __name__ == "__main__":
    module1.init()
    process = multiprocessing.Process(target=module2.start)
    process.start()
    process.join()
</code></pre>
<h3>module1.py</h3>
<pre><code>import ctypes
import multiprocessing

x = None

def init():
    global x
    x = multiprocessing.Value(ctypes.c_wchar_p, "asdf")
</code></pre>
<h3>module2.py</h3>
<pre><code>import module1

def start():
    print(module1.x.value)
</code></pre>
<hr/>
<p>In an Ubuntu 14.04 environment, on Python 3.5, I receive the following output:</p>
<pre><code>$ python3 main.py
asdf
</code></pre>
<p>In a CentOS 7 environment, I receiving the following output:</p>
<pre><code>$ python3 main.py
asdf
</code></pre>
<p>Using the Windows Subsystem for Linux on Windows 10 (both before and after the Creator Update, so Ubuntu 14.04 and 16.04) I get the following output:</p>
<pre><code>$ python3 main.py
asdf
</code></pre>
<p>However, in both Windows 7 and Windows 10 environments, using either 3.5 or 3.6, I am getting an <code>AttributeError</code> instead of the above output:</p>
<pre><code>Process Process-1:
Traceback (most recent call last):
  File "C:\Python\Python35\lib\multiprocessing\process.py", line 249, in _bootstrap
    self.run()
  File "C:\Python\Python35\lib\multiprocessing\process.py", line 93, in run
    self._target(*self._args, **self._kwargs)
  File "H:\Development\replicate-bug\module2.py", line 5, in start
    print(module1.x.value)
AttributeError: 'NoneType' object has no attribute 'value'
</code></pre>
<hr/>
<p>I am using a <a href="https://docs.python.org/3/library/multiprocessing.html#shared-ctypes-objects" rel="noreferrer">shared ctype</a>. This value should be inherited by the child process. </p>
<p>Why do I receive this <code>AttributeError</code> in a Windows environment, but not a Linux environment? </p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in one of the posts <a href="https://stackoverflow.com/q/42148344/1803692">automatically linked on the sidebar</a>, windows does not have the <code>fork</code> systemcall present on *NIX systems.</p>
<p>This implies that instead of sharing global state (like NIX Processes can do), a Windows child process is basically completely separate. This includes modules.</p>
<p>What I <strong>suspect</strong> is happening is that the module gets loaded anew and the <code>module1</code> you access inside <code>module2.start</code> isn't quite the module you expected.</p>
<p>The <a href="https://docs.python.org/3.5/library/multiprocessing.html#programming-guidelines" rel="nofollow noreferrer">multiprocessing guidelines</a> explicitly mention that module-level constants are exempt from the rule: "variables may not contain what you expect". Well in either case, the solution is to explicitly pass the module you want to the child process like so:</p>
<h3>module 2</h3>
<pre><code>def start(mod1):
    print(mod1.x.value)
</code></pre>
<h3>main.py</h3>
<pre><code>if __name__ == '__main__':
    module1.init()
    process = multiprocessing.Process(target=module2.start, args=(module1,))
    process.start()
    process.join()
</code></pre>
</div>
<span class="comment-copy">Actually, the solution would be to declare <code>x = multiprocessing.Value(ctypes.c_wchar_p, "asdf")</code> in <code>main.py</code> and pass it as an argument to the child process (completely doing away with <code>module1</code> unless there's a need for functionality not shown in the example).</span>
<span class="comment-copy">@Mego there is such a need</span>
<span class="comment-copy">@ArtOfCode In that case, pass it to <code>module1</code> also via <code>module1.init()</code>. Then, both processes will have a proper reference to the shared object.</span>
<span class="comment-copy">Does this actually just copy the pointer to the shared memory or does it pickle the entire object it points to (which is how <code>spawn</code> normally works)</span>
<span class="comment-copy">@quartata the documentation doesn't go into semantics ... <a href="https://docs.python.org/3.5/library/multiprocessing.html#multiprocessing.Process.run" rel="nofollow noreferrer">run pydoc</a> only says the target is invoked with the given args and kwargs. It's not clear on whether those are pickled or passed by reference</span>
