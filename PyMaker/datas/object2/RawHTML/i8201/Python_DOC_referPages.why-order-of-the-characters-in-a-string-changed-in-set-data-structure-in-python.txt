<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15479928/why-is-the-order-in-dictionaries-and-sets-arbitrary">Why is the order in dictionaries and sets arbitrary?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>When I send a string as a argument in set data structure in python, surprisingly the order has been changed for some characters. </p>
<p>Suppose, If i write </p>
<pre><code>&gt;&gt;&gt; c=set('abcd') 
</code></pre>
<p>Then I should expect the set c to be shown as {'a', 'b', 'c', 'd'} but it shows output like that:-</p>
<pre><code>&gt;&gt;&gt; c
{'c', 'b', 'd', 'a'}
</code></pre>
<p>And more importantly, as far i know set in python only accept an object that is iterable.</p>
<p><strong>So, it is obvious that set would iterate through the string and should maintain the correct order of the string.</strong> </p>
<p>I have tested it several times. And every times the order has been changed surprisingly....</p>
<p><a href="https://i.stack.imgur.com/EEFLY.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/EEFLY.png"/></a></p>
<p>I know in python there is nothing called character. A single character is also defined as string. But, since iteration occurs through the string this should be ordered. </p>
<p>So, could someone explain me the reason of the scenario? Is there any insight<br/>
in the iteration process or python VM issues ? </p>
<p><strong>* I intended to know the iteration methodology of strings in set, not dict*</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>If you want unique characters while still preserving the order of first seen letters, you could use an <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a>:</p>
<pre><code>from collections import OrderedDict

unique_letters = OrderedDict((k, True) for k in 'abcdabcdabeddecd')
print(unique_letters.keys())
# ['a', 'b', 'c', 'd', 'e']
</code></pre>
<p>Sets have one very important job: to tell if an element is included in the set, and to tell it as fast as possible. Keeping the insertion order isn't on the set todo-list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sets, like dicts, are not ordered. Any iterable, added to a set, will not preserve order.</p>
</div>
<div class="post-text" itemprop="text">
<p>Refers to the <strong><em>set</em></strong> python docs here <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#sets</a> you can see also a brief demo code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python store set elements in optimized way so that it can apply operations with lesser runtime complexity i.e. less number of iterations will required in Union/Intersection by Python internally.</p>
</div>
<span class="comment-copy">As for your question on <i>why</i> it doesn't preserve order, see <a href="http://stackoverflow.com/questions/15479928/why-is-the-order-in-dictionaries-and-sets-arbitrary">Why is the order in dictionaries and sets arbitrary?</a></span>
<span class="comment-copy">@roganjosh  ... Thanks.. I got what I asked for.</span>
<span class="comment-copy">can you please explain why it will not preserver order ??  when i am sending any list or tuple in the set then It maintain proper order. So why not String?</span>
<span class="comment-copy">No it does not - or if it does, it is only by coincidence. All iterables work the same when converted to sets, because sets operate on the <i>hashed</i> values of the members, not the actual values.</span>
<span class="comment-copy">Thanks. Seen that. But my question is why it's not preserving the order ? Isn't that easy for iterator to iterate in a order ?? :( :(</span>
