<div class="post-text" itemprop="text">
<p>I have a code that calculates a given datetime as follows</p>
<pre><code>time = datetime.datetime.now() - datetime.timedelta(minutes=60)
</code></pre>
<p>I then use <code>time</code> to set a field in an <code>offer</code> object to be saved in the database. The <code>offer.time</code> is a <code>Offer</code> model instance; it is configured to be:</p>
<pre><code>time = models.DateTimeField(blank=True, null=True) 
</code></pre>
<p>It happens, however, that offer.time is updated when calling <code>offer.save()</code>. When setting <code>offer.time = time</code>, I get <code>2017-04-29 09:36:14.895581</code>. After calling <code>offer.save</code>, <code>offer.time</code> is <code>2017-04-29 09:36:14.895000</code>. Why isn't <code>save()</code> preserving the original time?</p>
<p>Any ideas?</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.mongodb.com/manual/reference/method/Date/" rel="nofollow noreferrer">https://docs.mongodb.com/manual/reference/method/Date/</a></p>
<blockquote>
<p>Internally, Date objects are stored as a 64 bit integer representing
  the number of milliseconds since the Unix epoch (Jan 1, 1970), which
  results in a representable date range of about 290 millions years into
  the past and future.</p>
</blockquote>
<p>This explains why <code>2017-04-29 09:36:14.895581</code> becomes <code>2017-04-29 09:36:14.895000</code></p>
<p><code>2017-04-29 09:36:14</code> will be stored as <code>1493458574000</code> leaving only 3 more decimals to store milliseconds. When adding milliseconds the value will be <code>1493458574895</code>. When this is read back into the <code>DateTimeField</code>, the value will be <code>2017-04-29 09:36:14.895000</code>.</p>
</div>
<span class="comment-copy"><a href="https://code.djangoproject.com/ticket/19716" rel="nofollow noreferrer">code.djangoproject.com/ticket/19716</a></span>
<span class="comment-copy">@Grimmy This is unrelated. For the record, I am using MongoDB. I do see the point that maybe this is related to a precision problem.</span>
<span class="comment-copy">ah. I guess maybe because BSON Date is a 64 bit integer storing milliseconds. Not sure if that has changed lately.</span>
<span class="comment-copy">add mongodb tag :)</span>
<span class="comment-copy">I see this may indeed be a precision error. Still, I am not convinced with the explanation. 64 bits should have been enough to stored the data in question according to the explanation you have provided. Can you please clarify?</span>
<span class="comment-copy">No problem. I will add more info.</span>
<span class="comment-copy">The answer is now updated.</span>
<span class="comment-copy">You could make your own custom fields that stores a 64 bit integer as microseconds? I'm not sure how that would work in practice in mongodb.</span>
<span class="comment-copy">I don't think I am confusing milliseconds with microseconds. In the Python documentation (remember DateTimeField maps to a datetime object in python), there exists a <code>microseconds</code> attribute, but not one for milliseconds. See <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">docs.python.org/3/library/datetime.html</a>. These are the components I have presented in my original question.</span>
