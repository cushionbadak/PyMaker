<div class="post-text" itemprop="text">
<p>This works, according to the <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer">documentation</a>:</p>
<pre><code>&gt;&gt;&gt; inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)]
&gt;&gt;&gt; list(map(operator.itemgetter(1), inventory))
[3, 2, 5, 1]
</code></pre>
<p>Now I want to do something similar, for a list of dicts:</p>
<pre><code>&gt;&gt;&gt; data = [{'xxx': 'x'}, {'xxx': 'y'}]
&gt;&gt;&gt; list(map(operator.attrgetter('xxx'), data))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'dict' object has no attribute 'xxx'
</code></pre>
<p>I was expecting:</p>
<pre><code>['x', 'y']
</code></pre>
<p>But it seems <code>attrgetter</code> does not work for dictionaries (only for classes?). How can I setup an "element getter" for dictionaries?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, the <strong>item</strong> you want to get is <code>'xxx'</code>. (In both cases, you want to call the object's <code>__getitem__</code> method for each object in the list.)</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; data = [{'xxx': 'x'}, {'xxx': 'y'}]
&gt;&gt;&gt; map(itemgetter('xxx'), data)
['x', 'y']
</code></pre>
<p>Think of attributes as anything you access via the dot notation, i.e. <code>mydict.xxx</code> in your case. You should see why that fails.</p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in <a href="https://stackoverflow.com/a/43716803/2063361">timgeb's answer</a>, you should be calling <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>itemgetter</code></a> with the key (because <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter" rel="nofollow noreferrer"><code>attrgetter</code></a> are used to get the class attribute which are accessible by <code>.</code> like <code>class_obj.&lt;attribute&gt;</code>).</p>
<p>In order to achieve your desired result, usage of <em>list comprehension</em> is a easier approach:</p>
<pre><code>&gt;&gt;&gt; data = [{'xxx': 'x'}, {'xxx': 'y'}]
&gt;&gt;&gt; [d['xxx'] for d in data]
['x', 'y']
</code></pre>
<p>Also, please note that <code>map</code> since python 3.x returns a <em>generator</em> object instead of a <code>list</code> object.</p>
</div>
<span class="comment-copy"><code>xxx</code> is not an attribute of the dictionaries you are showing.</span>
<span class="comment-copy">@Chris_Rands I want to use map</span>
<span class="comment-copy">@Anthon indeed, as stated by the error message</span>
<span class="comment-copy">Strange that the documentation for itemgetter only shows examples for access of list or tuples elements, that is, for integer indexes</span>
