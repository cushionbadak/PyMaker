<div class="post-text" itemprop="text">
<p>I would like to check if my value is a float with a point or a comma but isdigit() return false with a point. I would like to know why and how go through it.</p>
<pre><code>&gt; value = "0.0"
&gt; print value.isdigit():
&gt;&gt;&gt; False
</code></pre>
<p>My code is : </p>
<pre><code>if "." in value and value.isdigit()
    print "ok"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>str.isdigit()</code> will only return true if all characters in the string are <em>digits</em>. <code>.</code> is punctuation, not a digit.</p>
<p>From the Python 3 <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer"><code>str.isdigit()</code> documentation</a>:</p>
<blockquote>
<p>Formally, a digit is a character that has the property value Numeric_Type=Digit or Numeric_Type=Decimal</p>
</blockquote>
<p>(For Python 2, for <code>str</code> objects only the ASCII digits (<code>0</code> through to <code>9</code>) are considered, but for <code>unicode</code> objects the same definition applies).</p>
<p>See the <a href="http://www.unicode.org/L2/L2012/12310-numeric-type-def.html" rel="nofollow noreferrer">official <em>Numeric Property definitions</em> specification</a>; there are <a href="http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3Ant%3Ddigit%3A%5D%5B%3Ant%3Ddecimal%3A%5D&amp;g=&amp;i=" rel="nofollow noreferrer">708 Unicode codepoints</a> that match that description.</p>
<p>Simplifying this to general unicode categories, numeric types in Unicode have a category starting with <code>N</code>, but <code>.</code> does not:</p>
<pre><code>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.category(u'.')
'Po'
</code></pre>
<p><code>P</code> stands for <em>punctuation</em> here, <code>o</code> for <em>other</em>.</p>
<p>Vice-versa, strings that contain only digits are not always convertable to a float or number either:</p>
<pre><code>&gt;&gt;&gt; unicodedata.name(u'\u2080')
'SUBSCRIPT ZERO'
&gt;&gt;&gt; unicodedata.category(u'\u2080')
'No'
&gt;&gt;&gt; unicodedata.digit(u'\u2080')
0
&gt;&gt;&gt; u'\u2080'.isdigit()
True
&gt;&gt;&gt; float(u'\u2080')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'decimal' codec can't encode character u'\u2080' in position 0: invalid decimal Unicode string
</code></pre>
<p>So a subscript-zero is not really 0 as far as <code>float()</code> is concerned, but it <em>is</em> a digit.</p>
<p>If you want to test if a string is a valid floating point number, use <code>float</code> and catch the <code>ValueError</code>:</p>
<pre><code>def is_float(string):
    try:
        float(string)
        return True
    except ValueError:
        return False
</code></pre>
</div>
<span class="comment-copy">Because <code>.</code> is not a digit. <code>isdigit()</code> only returns true for strings containing <b>only</b> digits.</span>
<span class="comment-copy">This can't be true at any point, because the one thing can't be with the other.</span>
<span class="comment-copy">but "0.0" is a float so for me it's a digit too or is it different ?</span>
<span class="comment-copy"><code>"0.0"</code> is not a digit. <code>"0"</code> is a digit. <code>"0.0"</code> is a string containing two digits and a <code>"."</code> character. See <a href="http://www.dictionary.com/browse/digit" rel="nofollow noreferrer">dictionary.com/browse/digit</a>, in particular, definition 3.</span>
<span class="comment-copy">"digit" does not mean "number"</span>
<span class="comment-copy">Yes, always use exception name to catch respective exception in except block. +1</span>
