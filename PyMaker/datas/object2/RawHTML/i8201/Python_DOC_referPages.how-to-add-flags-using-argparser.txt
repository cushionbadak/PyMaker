<div class="post-text" itemprop="text">
<p>I have functions like this</p>
<pre><code>def add(x,y):
    print x+y

def square(a):
    print a**2
</code></pre>
<p>Can I make flags for these functions using <code>argparse</code> like </p>
<pre><code>./hello.py -a add 2 3
./hello.py -s sqare 3
</code></pre>
<p>Rightnow I have tried with this code</p>
<pre><code>#! /usr/bin/python


import argparse
# Create Parser and Subparser
parser = argparse.ArgumentParser(description="Example ArgumentParser")
subparser = parser.add_subparsers(help="commands")

# Make Subparsers
hello_parser = subparser.add_parser('hello', help='hello func')
hello_parser.add_argument("arg",help="string to print")
hello_parser.set_defaults(func='hello')

add_parser = subparser.add_parser('add', help="add func")
add_parser.add_argument("x",type=float,help='first number')
add_parser.add_argument("y",type=float,help='second number')
add_parser.set_defaults(func='add')

square_parser = subparser.add_parser('square', help="square func")
square_parser.add_argument("a",type=float,help='number to square')
square_parser.set_defaults(func='square')

args = parser.parse_args()

def hello(arg):
  print arg

def add(x,y):
  print x + y

def square(a):
  print a**2

if args.func == 'hello':
  hello(args.arg)
elif args.func == 'add':
  add(args.x,args.y)
elif args.func == 'square':
  square(args.a)
</code></pre>
<p>Can I add flags in the same code??</p>
</div>
<div class="post-text" itemprop="text">
<p>The end of <a href="https://docs.python.org/3/library/argparse.html#sub-commands" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#sub-commands</a> has an example like yours, but with expressions like <code>add_parser.set_defaults(func=add)</code> (using the actual function instead of the name).  This lets them replace the <code>if/else</code> stack with <code>args.func(args)</code>.</p>
<p>But if you want to use the flagged/optionals style of input rather than subparsers, I'd suggest the following:</p>
<pre><code>import argparse

def add(x,y):
    print x+y

def square(a):
    print a**2

parser = argparse.ArgumentParser()
parser.add_argument('--hello')
parser.add_argument('-a', '--add', nargs=2, type=int)
parser.add_argument('-s', '--square', type=int)

args = parser.parse_args()
print(args)           # good debugging tool

if args.add is not None:
   add(*args.add)   # * expands the list into the 2 arguments 
if args.square is not None:
   square(args.square)
if args.hello is not None:
   print ("hello "+args.hello)
</code></pre>
<p>produces</p>
<pre><code>1014:~/mypy$ python stack43776406.py -a 10 11
Namespace(add=[10, 11], hello=None, square=None)
21
1014:~/mypy$ python stack43776406.py --hello world -a 1 2 -s 1000
Namespace(add=[1, 2], hello='world', square=1000)
3
1000000
hello world
</code></pre>
<p>If the '-a' flag already means <code>add</code>, you don't need to include the extra string.  I also used <code>nargs=2</code> instead of the separate 'x','y' arguments required by the subparser.  </p>
<p>The <code>is None</code> or <code>is not None</code> is a handy way of testing whether a flagged value has been provided.  The user can't enter <code>None</code>, so testing for this default default is foolproof.</p>
<pre><code>1014:~/mypy$ python stack43776406.py --help
usage: stack43776406.py [-h] [--hello HELLO] [-a ADD ADD] [-s SQUARE]

optional arguments:
  -h, --help            show this help message and exit
  --hello HELLO
  -a ADD ADD, --add ADD ADD
  -s SQUARE, --square SQUARE
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import argparse

def add(x,y):
    print x+y

def square(a):
    print a**2

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='This is a parser.')
    parser.add_argument('command', help='The command to execute (add or square).')
    parser.add_argument('integers', metavar='N', type=int, nargs='+', help='The arguments to the command.')
    args = parser.parse_args()

    if args.command == 'add':
        add(*args.integers)
    elif args.command == 'square':
        square(*args.integers)
    else:
        print 'Command not supported.'
</code></pre>
<p>Outputs:</p>
<pre><code>$ python hello.py add 2 3
5
$ python hello.py square 2
4
</code></pre>
</div>
<span class="comment-copy">Have you read the <a href="https://docs.python.org/2/howto/argparse.html" rel="nofollow noreferrer">doc</a>?</span>
<span class="comment-copy">I read but I am not able apply in real time. Can you please explain me with one example. Thank you.</span>
<span class="comment-copy">use <a href="http://click.pocoo.org/6/api/#click.confirmation_option" rel="nofollow noreferrer"><code>click</code></a>, people</span>
