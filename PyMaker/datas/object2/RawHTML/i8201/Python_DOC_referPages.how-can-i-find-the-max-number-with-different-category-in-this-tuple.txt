<div class="post-text" itemprop="text">
<p>I get some data like this</p>
<pre><code>A=['A,1','A,2','A,4','A,5','B,2','B,3','B,4','B,5','C,2','C,20','C,200','C,2']    
</code></pre>
<p>I want to have a result like this,This means the the name,the min number, the max number.I have 1 million data like this.</p>
<pre><code>'A,1,5','B,2,5','C,2,200'
</code></pre>
<p>I tried in this way:</p>
<pre><code>A=['A,1','A,2','A,4','A,5','B,2','B,3','B,4','B,5','C,2','C,20','C,200','C,2']
B=[]
C=[]
for r in A:
    B.append(r.split(',')[0])
B_set=list(set(B))
catagory_number=range(0,len(B_set),1)
for j in catagory_number:
    numbers = []
    for r in A:
        if B_set[j]==r.split(',')[0]:
            numbers.append(r.split(',')[1])
            print numbers    
</code></pre>
<p>As you can see, it do not work, I get problem to get data together.</p>
<pre><code>['1']
['1', '2']
['1', '2', '4']
['1', '2', '4', '5']
['2']
['2', '20']
['2', '20', '200']
['2', '20', '200', '2']
['2']
['2', '3']
['2', '3', '4']
['2', '3', '4', '5']
</code></pre>
<p>Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could iterate over your <code>list</code> and derive the min and max values using an <code>OrderedDict</code>. At the end you can re-create the string as I show, but actually you might be better off keeping the dictionary data structure (depends what you want to do next):</p>
<pre><code>import collections

def sol(lst):
    d = collections.OrderedDict()
    for item in lst:
        key, value = item.split(',')
        value = int(value)
        if key in d:
            if value &lt; d[key][0]:
                d[key][0] = value
            elif value &gt; d[key][0]:
                d[key][1] = value
        else:
            d[key] = [value, value] # key = letter; value = [min, max] 
    return ['{},{},{}'.format(key,*values) for key,values in d.items()] # in Python 2 use key,value[0],value[1]
</code></pre>
<p>Example:</p>
<pre><code>my_lst = ['A,1','A,2','A,4','A,5','B,2','B,3','B,4','B,5','C,2','C,20','C,200','C,2']
print(sol(my_lst))
# ['A,1,5', 'B,2,5', 'C,2,200']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> with a list as default value could help you a lot:</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; data = defaultdict(list)
&gt;&gt;&gt; data['A']
[]
&gt;&gt;&gt; data['A'].append(1)
&gt;&gt;&gt; data['A'].append(2)
&gt;&gt;&gt; data['B'].append(3)
&gt;&gt;&gt; data
defaultdict(&lt;type 'list'&gt;, {'A': [1, 2], 'B': [3]})
</code></pre>
<p>It's probably what you wanted to write with <code>set</code> and multiple loops. <code>defaultdict</code> is a standard structure and should be fast enough, even with many values.</p>
<p>Here's a beginning of a solution with this data structure:</p>
<pre><code>from collections import defaultdict

data = defaultdict(list)

A = ['A,1','A,2','A,4','A,5','B,2','B,3','B,4','B,5','C,2','C,20','C,200','C,2']

for couple in A:
    letter, number = couple.split(',')
    data[letter].append(int(number))

print(data)
# defaultdict(&lt;type 'list'&gt;, {'A': [1, 2, 4, 5], 'C': [2, 20, 200, 2], 'B': [2, 3, 4, 5]})
</code></pre>
<p>For each letter in <code>A</code>, you now have a list of corresponding values. It shouldn't be too hard to extract <code>min</code> and <code>max</code> and write the desired list.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can try this:</p>
<pre><code>letter=[]
number=[]

A=['A,1','A,2','A,4','A,5','B,2','B,3','B,4','B,5','C,2','C,20','C,200','C,2']
for couple in A:
    a, b = couple.split(',')
    if a not in letter:
        letter.append(a)
        number.append([b])
    else:
        ind=letter.index(a)
        number[ind].append(b)

B=[]
i=0
while i&lt;len(letter):
    B.append(letter[i]+","+str(min(number[i]))+","+str(max(number[i])))
    i+=1

print (B)
</code></pre>
<blockquote>
<p>['A,1,5', 'B,2,5', 'C,2,200']</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve what you intented to do using <code>groupby</code> from <code>itertools</code> module and using <code>list comprehension</code> like this example:</p>
<pre><code>from itertools import groupby

A = ['A,1','A,2','A,4','A,5','B,2','B,3','B,4','B,5','C,2','C,20','C,200','C,2']
sub_final = (sorted(list(v), key = lambda x: int(x.split(",")[1])) for _,v in groupby(sorted(A), lambda x: x[0]))
final = ["{0},{1}".format(k[0],k[-1].split(',')[-1]) for k in sub_final]
print(final)
</code></pre>
<p>Output:</p>
<pre><code>['A,1,5', 'B,2,5', 'C,2,200']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Might not be the fastest but I think this is easy to read. Can't offer formatting since I'm using Python 3.4.</p>
<pre><code>A=['A,1','A,2','A,4','A,5','B,2','B,3','B,4','B,5','C,2','C,20','C,200','C,2']

summary = {}
for a in A:
    k, v = a.split(',')
    v = int(v)
    if k in summary:
        summary[k] = (min(v, summary[k][0]), max(v, summary[k][1]))
    else:
        summary[k] = (int(v), int(v))

for k in sorted(summary.keys()):
    print (k, summary[k])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Basic idea is to split the list on the basis of it's headers i.e. A, B, C...and find the min and max for each of them. Below is one way to do so:</p>
<p><code>#!/usr/bin/python</code></p>
<p><code>A=['A,1','A,2','A,4','A,5','B,2','B,3','B,4','B,5','C,2','C,20','C,200','C,2']</code></p>
<pre><code>headerList = []
assoNumList = []
finalList = []

# Iterate over the list to obtain the headers i.e. A,A,A,A,A,B,B,B....C,...
for a in range(len(A)):
header = A[a][0]
headerList.append(header)

# Convert the list into a set to get distinct headers i.e. A,B,C..
headerSet = set(headerList)
uniqueHeaderList = list(headerSet)

# Iterate over the unique header list to get all numbers associated
# with each header. Apply min and max functions over the number set
# to get the Header wise Min and Max numbers.
for i in range(len(uniqueHeaderList)):
    for a in range(len(A)):
        if(A[a][0] == uniqueHeaderList[i]):
            assoNum = A[a][2:]
            assoNumList.append(assoNum)
            header = A[a][0]
    result = header+","+min(assoNumList)+","+max(assoNumList)
    finalList.append(result)
    del assoNumList[:]      

print(sorted(finalList))

#Output: ['A,1,5','B,2,5','C,2,200']
</code></pre>
</div>
<span class="comment-copy">show your approach 1st</span>
<span class="comment-copy">You can have a look in this doc <a href="https://docs.python.org/2/library/collections.html#counter-objects" rel="nofollow noreferrer">docs.python.org/2/library/collections.html#counter-objects</a>. Agreed with previous comment though, please provide some code and try to avoid typo errors.</span>
<span class="comment-copy">@nishantkumar Sorry, I tried the for loop, however no result, I will avoid this next time~</span>
<span class="comment-copy">it's ok, we are willing to see the for loop. SO will definitely help you!</span>
<span class="comment-copy">I have a solution, I'll post it if you share your attempt :)</span>
<span class="comment-copy">Thanks for your help, next time I will add my 'wrong' code.</span>
<span class="comment-copy">Yes, thanks for your help, I get a problem in geeting data together This solution is good. I use max() and min() to solve the next.. @Eric Duminil</span>
