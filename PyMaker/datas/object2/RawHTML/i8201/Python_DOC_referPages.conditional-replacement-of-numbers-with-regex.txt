<div class="post-text" itemprop="text">
<p><strong>Input:</strong></p>
<pre><code>foobar10000foobar
foobar1000foobar
foobar100foobar
foobar10foobar
foobarfoobar
</code></pre>
<p><strong>Desired Output:</strong></p>
<pre><code>foobar4foobar
foobar3foobar
foobar2foobar
foobar1foobar
foobar0foobar
</code></pre>
<p>In other words, the replacements should be the number of zeros contained in the matched numbers. The examples already contain all possible numbers: {<strong>none</strong>, 10, 100, 1000, 10000} .</p>
<p>Is there a way to do it with one regex statement? </p>
<p>(Side info: I want to implement a rule for the <a href="https://packagecontrol.io/packages/RegReplace" rel="nofollow noreferrer">RegReplace</a> package for Sublime Text 3)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can, as <code>re.sub</code> accepts a function as replacement. See <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">re.sub</a></p>
<p>The replacement function takes a match object as parameter, and must return a string.</p>
<pre><code>import re
texts = ['foobar10000foobar', 'foobar100foobar',
         'foobar1foobar', 'foobarfoobar']

def zeros_count(matchobj):
     return str(matchobj.group(0).count('0'))

def replace_zeros(text):
    return re.sub(r'\d+', zeros_count, text)

for text in texts:
    print(text, '--&gt;', replace_zeros(text))

# foobar10000foobar --&gt; foobar4foobar
# foobar100foobar --&gt; foobar2foobar
# foobar1foobar --&gt; foobar0foobar
# foobarfoobar --&gt; foobarfoobar
</code></pre>
<p>Note that in the last case, there's no number to replace, so there is no logical place to insert a 0, as in your last desired output.</p>
</div>
