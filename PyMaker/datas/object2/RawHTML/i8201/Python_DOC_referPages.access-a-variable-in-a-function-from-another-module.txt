<div class="post-text" itemprop="text">
<p>Two .py files, the <code>to_be_imported.py</code> has:</p>
<pre><code>def func(a):

    b = a + "!!!"
    c = b + " Mike!!!"
    print c
</code></pre>
<p>The <code>import.py</code> has:</p>
<pre><code>from to_be_imported import *
func("hey")
</code></pre>
<p>But when I try to access variable <code>b</code> I got error <code>AttributeError: 'NoneType' object has no attribute 'b'.</code>. </p>
<p>How to get the value of <code>b</code> after I give the function value <code>"hey"</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>to_be_imported</strong> does <em>not</em> have a variable <strong>b</strong>.  The only <strong>b</strong> in your program is local to <strong>func</strong>, and disappears when you exit the function.  The canonical way to do this would be:</p>
<pre><code>def func(a):

    b = a + "!!!"
    c = b + " Mike!!!"
    print c
    return b

...

from to_be_imported import *
local_b = func("hey")
</code></pre>
<p>There are other ways to do this.  For instance, you could be make <strong>b</strong> a global variable of <strong>to_be_imported</strong> and then access it with something like</p>
<pre><code>print to_be_imported.b
</code></pre>
<p>However, this is generally not a good idea.  Also, note that it's not really a good idea to have a remote function both print output and return a value.  Modules and passing information are really cool, but make sure you follow recommendations in the textbook or tutorials you're using, so you don't have debugging troubles later.</p>
</div>
<div class="post-text" itemprop="text">
<p>You might consider returning the value, like in this example:</p>
<pre><code>def add_one(numb):
    """Given a number, add one and return it."""
    r = numb +1
    return r
</code></pre>
<p>Also note that it's generally bad practice to do <code>from module import *</code>, as it can overwrite functions in the module that does that import.
You might try importing just what you need, like: <code>from mymodule import func, func_two, func_three</code></p>
</div>
<span class="comment-copy">please post the error. We cant do anything with <code>I got error </code></span>
<span class="comment-copy">You should read about local and global variables in Python <a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow noreferrer">docs.python.org/3/faq/â€¦</a></span>
<span class="comment-copy">Your posted code has no reference to a remote symbol <b>b</b>; the code does not show the error you describe.</span>
<span class="comment-copy"><code>func</code> returns <code>None</code>, since you don't have an explicite <code>return</code> statement. This, when you assign <code>var = func('hey')</code>, then <code>var == None</code> and when you try <code>var.b</code> you'll get the error you are seeing. Furthermore, even if <code>var</code> was <i>not</i> <code>None</code>, you can't access the local variables in <code>func</code> that way, unless you do some hocus-pocus with <code>locals()</code> and return that... but that sounds like a fundamental design issue with your code. In general, if you want some value inside some function, your function should <i>return that value</i>.</span>
<span class="comment-copy">You can only access top-level module variables (aka module globals) from another script/module. You can never access the local variables of a function outside the function unless they are the or one of the return values of the function. See <a href="http://stackoverflow.com/questions/291978/short-description-of-the-scoping-rules/292502#292502">this answer</a> to a question about Python's scoping rules.</span>
