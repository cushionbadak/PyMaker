<div class="post-text" itemprop="text">
<p>If instead of mocking a function from a module, I want to mock the <code>__dict__</code> attribute of the module, how would I go about doing that? Obviously something like </p>
<pre><code>@patch(my_module.__dict__)
test_something(my_module_dict):
    my_module_dict.return_value = "something"
</code></pre>
<p>does not work</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be able to use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch.dict" rel="nofollow noreferrer"><code>patch.dict</code></a></p>
<pre><code>patch.dict(my_module.__dict__, {'new': value})
</code></pre>
<p>This can be used as a decorator, context manager or as a stand-alone object just like any other patch call.</p>
<pre><code>&gt;&gt;&gt; # Use `os` as a demo module to patch.
&gt;&gt;&gt; import os
&gt;&gt;&gt; import mock
&gt;&gt;&gt; p = mock.patch.dict(os.__dict__, {'foo': 'bar'}, clear=False)
&gt;&gt;&gt; p.start()
&gt;&gt;&gt; # Look mom, we've added a "foo" object.  We could also overwrite
&gt;&gt;&gt; # functions already in `os` this way.
&gt;&gt;&gt; os.foo
'bar'
&gt;&gt;&gt; # os.path should still exist since we didn't pass clear=True
&gt;&gt;&gt; os.path
&lt;module 'posixpath' from '/Users/mgilson/anaconda/envs/tensorflow-source/lib/python2.7/posixpath.pyc'&gt;
&gt;&gt;&gt; # Stop the patch.
&gt;&gt;&gt; p.stop()
False
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; # Let's try "clear=True" and see what that does.
&gt;&gt;&gt; p = mock.patch.dict(os.__dict__, {'foo': 'bar'}, clear=True)
&gt;&gt;&gt; p.start()
&gt;&gt;&gt; os.foo
'bar'
&gt;&gt;&gt;
&gt;&gt;&gt; # This will fail with an AttributeError because `clear=True`
&gt;&gt;&gt; # removes any attributes that were in the dictionary when you
&gt;&gt;&gt; # started the patch.  Don't worry, they'll get put back when you
&gt;&gt;&gt; # stop the patch...
&gt;&gt;&gt; os.path
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'path'
&gt;&gt;&gt; p.stop()
False
</code></pre>
</div>
<span class="comment-copy">This was very helpful, thank you! I didn't even know that mock had a mock.patch.dict function</span>
<span class="comment-copy">@C_Z_ -- Yep.  It also has a <code>patch.object</code> function.  Indeed, I <i>rarely</i> use vanilla <code>patch</code> because I like <code>patch.dict</code> and <code>patch.object</code> much better ...</span>
