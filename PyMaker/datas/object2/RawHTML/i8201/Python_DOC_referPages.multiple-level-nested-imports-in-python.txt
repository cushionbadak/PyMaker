<div class="post-text" itemprop="text">
<p>I am currently working in the following project, and running into some difficulty with imports. I previously came from a Ruby background before Python, so I suspect I'm just missing something.</p>
<pre><code>-src
--project
---actions
----some .py files
---config
----some .py files
---db
----some .py files
-tests
--some .py files
-run.py
</code></pre>
<p>Some of the actions I'd like to do are:</p>
<ul>
<li>import src/project/config/file.py from <code>run.py</code></li>
<li>import between second level folder in <code>project</code> (ie. file in <code>actions</code> imports something from <code>config</code>)</li>
<li>import any file into a test</li>
</ul>
<p>Would anyone have any advice on how to accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>So it's quite easy to reference something going deeper into the directory . For example, from run.py, you would be able to use something such as:</p>
<pre><code>    from src.project.config.file import foo
</code></pre>
<p>It's easy to access something in the same directory as well, say you're in src/file1.py  trying to access src/file2.py, this would just be:</p>
<pre><code>    from file2 import foo
</code></pre>
<p>This works too. However if you were trying to import upward say from file.py to run.py and tried running something like this:</p>
<pre><code>    from ... import run.foo
</code></pre>
<p>You would get the following error:</p>
<pre><code>    ValueError: attempted relative import beyond top-level package
</code></pre>
<p>The problem is that Python is assuming that your top-level package is wherever the file being run is located. That's why you can import everything on the same level and deeper but can't get at anything above.</p>
<p>An easy hack to get past this is to just append the path to your file to your <code>sys.path</code> so:</p>
<pre><code>    import sys
    sys.append('path/to/run')
    from run import foo
</code></pre>
<p>So that's the answer to you question.</p>
<p>Based on the way your project is setup though it seems like you want to make a module and that's a bit more hands on, I suggest reading the <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">documentation</a> it's pretty good. </p>
</div>
<span class="comment-copy">This worked, once I upgraded to Python 3.3+ . I found I was not able to get it to work in Python 2.7 unless <code>src</code> was a package as well, which felt like a mistake (since you should never import all of src).</span>
