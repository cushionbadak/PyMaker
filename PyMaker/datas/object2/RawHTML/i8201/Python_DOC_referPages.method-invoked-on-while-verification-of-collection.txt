<div class="post-text" itemprop="text">
<p>Suppose I have a list <code>Q</code>. In the following code:</p>
<pre><code>while Q:
    do_something()
    Q.pop()
</code></pre>
<p>in the <code>while Q</code> statement, what method of the list <code>Q</code> is invoked? Is it the <code>__len__</code> method? </p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.x, it's <a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer"><code>__bool__</code></a> or <code>__len__</code>:</p>
<blockquote>
<p><strong><code>object.__bool__(self)</code></strong></p>
<p>Called to implement truth value testing and the built-in operation
  <code>bool()</code>; should return <code>False</code> or <code>True</code>. When this method is not
  defined, <code>__len__()</code> is called, if it is defined, and the object is
  considered true if its result is nonzero. If a class defines neither
  <code>__len__()</code> nor <code>__bool__()</code>, all its instances are considered true.</p>
</blockquote>
<p>In 2.x it was named <a href="https://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow noreferrer"><code>__nonzero__</code></a>; see <a href="https://docs.python.org/3.6/whatsnew/3.0.html#operators-and-special-methods" rel="nofollow noreferrer">what's new in 3.0</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow noreferrer">python's documentation</a>:</p>
<blockquote>
<p>Any object can be tested for truth value, for use in an <code>if</code> or <code>while</code> condition or as operand of the Boolean operations below. The following values are considered false:</p>
<ul>
<li>(...)</li>
<li>any empty sequence, for example, <code>''</code>, <code>()</code>, <code>[]</code>.</li>
<li>(...)</li>
<li>instances of user-defined classes, if the class defines a <code>__bool__()</code> or <code>__len__()</code> method, when that method returns the integer zero or <code>bool</code> value <code>False</code>. [Additional information on these special methods may be found in the Python Reference Manual (<a href="https://docs.python.org/3/reference/datamodel.html#customization" rel="nofollow noreferrer">Basic customization</a>).]</li>
</ul>
<p>All other values are considered true â€” so objects of many types are always true.</p>
<p>Operations and built-in functions that have a Boolean result always return <code>0</code> or <code>False</code> for false and <code>1</code> or <code>True</code> for true, unless otherwise stated. (Important exception: the Boolean operations <code>or</code> and <code>and</code> always return one of their operands.)</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Yes, <code>__len__</code> does get called in this case.</p>
<p>Let's see this code snippet:</p>
<pre><code>class clist(list):

    def __len__(self):
        print "Called"

Q = clist([1,2,3,4])

while Q:
    break
</code></pre>
<p>Output:</p>
<pre><code>Called
Traceback (most recent call last):
  File "a.py", line 10, in &lt;module&gt;
    while Q:
TypeError: an integer is required
</code></pre>
<p>But, if I remove the method,  </p>
<pre><code>class clist(list):
    pass

Q = clist([1,2,3,4])

while Q:
    break    
</code></pre>
<p>the code will run just fine, but won't print anything. </p>
<p>So yes, <code>__len__</code> does get called. </p>
</div>
<span class="comment-copy">Why would it be <code>len</code>? And <code>len</code> isn't a method of the list anyways. <code>__len__</code> would be the method.</span>
<span class="comment-copy">@Carcigenicate it's __ len __ actually. The editor converted the "__" to bold. Thanks for the warning</span>
<span class="comment-copy">Ahh. It's a good idea to wrap small code bits in backticks to prevent markup attempts. But again, why mention <code>__len__</code>? It may be called behind the scenes, but in this code snippet, <code>pop</code> is the method being called.</span>
<span class="comment-copy">@Carcigenicate He's asking how <code>Q</code> is treated as a Boolean value, which could conceivably involve <code>__len__</code> being called.</span>
