<div class="post-text" itemprop="text">
<p>From Python's <a href="https://github.com/python/cpython/blob/6f0eb93183519024cb360162bdd81b9faec97ba6/Tools/freeze/bkfile.py" rel="nofollow noreferrer">source code of <strong><code>open</code></strong></a>, I think <code>open</code> is just a normal function.</p>
<p>Why can  we use it like below?</p>
<pre><code>with open('what_are_context_managers.txt', 'r') as infile:
    for line in infile:
        print('&gt; {}'.format(line))
</code></pre>
<p>Since is neither implements <code>__enter__</code> nor <code>__exit__</code>, nor uses <code>contextlib.contextmanager</code> decorator.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are not using the <code>open</code> function as a context manager. It is the <em>result of the <code>open(...)</code> call expression</em> that is the context manager. <code>open()</code> returns a file object, and it is that object that has <code>__enter__</code> and <code>__exit__</code> methods; see the <a href="https://docs.python.org/3/library/io.html#io.IOBase" rel="nofollow noreferrer"><code>io.IOBase</code> documentation</a>:</p>
<blockquote>
<p><em>IOBase</em> is also a context manager and therefore supports the with statement.</p>
</blockquote>
<p>You can read the <code>with</code> statement like this:</p>
<pre><code>_context_manager = open('what_are_context_managers.txt', 'r')
with _context_manager as infile:
</code></pre>
<p>Note that it is the return value of <code>_context_manager.__enter__()</code> that ends up being assigned to <code>infile</code> here. For file objects, <code>file.__enter__()</code> returns <code>self</code>, so you can get access to the same object that way.</p>
<hr/>
<p>As a side-note; you got the wrong <code>open()</code> function. The actual definition of the <code>open()</code> built-in is an alias for <a href="https://docs.python.org/3/library/io.html#io.open" rel="nofollow noreferrer"><code>io.open()</code></a>, see the <a href="https://github.com/python/cpython/blob/v3.6.1/Modules/_io/_iomodule.c#L95-L494" rel="nofollow noreferrer"><code>_iomodule.c</code> source code</a>. The alias is set in <a href="https://github.com/python/cpython/blob/v3.6.1/Python/pylifecycle.c#L1207-L1219" rel="nofollow noreferrer"><code>initstdio()</code> in <code>pylifecycle.c</code></a> (where <code>io.OpenWrapper</code> is <a href="https://github.com/python/cpython/blob/v3.6.1/Lib/io.py#L59" rel="nofollow noreferrer">itself an alias for <code>_io.open</code></a>). And yes, the documentation states the alias points the other way for end-user ease.</p>
</div>
<span class="comment-copy">The original <code>file</code> type that is returned by the function implements the context manager interface.</span>
