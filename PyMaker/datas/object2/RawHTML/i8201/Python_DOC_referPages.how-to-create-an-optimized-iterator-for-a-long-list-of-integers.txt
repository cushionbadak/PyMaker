<div class="post-text" itemprop="text">
<p>Say I have a very large list of integers that occupies a very large amount of memory. If the list's integers were in even increments, I could then easily express the list as an iterator occupying comparatively no memory. But with more complicated patterns, it would become more difficult to express this list as an iterator.</p>
<p>Is there a Python package that can analyze a list of integers and return an "optimized" iterator? Or methodologies I can look into to accomplish this?</p>
</div>
<div class="post-text" itemprop="text">
<p>My proof of concept, using <a href="https://docs.python.org/3/library/lzma.html" rel="nofollow noreferrer">lzma</a> library (<a href="https://pypi.python.org/pypi/backports.lzma" rel="nofollow noreferrer">backport for python 2</a>) with compression to memory. Instead of memory buffer you can use file on disk:</p>
<pre><code>import io
import random
import struct
import sys

from backports import lzma

# Create array of integers with some duplicates
data = []
for i in xrange(0, 2000):
    data += [random.randint(-sys.maxint, sys.maxint)] * random.randint(0, 500)

print('Uncompressed: {}'.format(len(data)))
buff = io.BytesIO()

fmt = 'i'  # check https://docs.python.org/3/library/struct.html#format-characters
lzma_writer = lzma.LZMAFile(buff, 'wb')
for i in data:
    lzma_writer.write(struct.pack(fmt, i))
lzma_writer.close()
print('Compressed: {}'.format(len(buff.getvalue())))

buff.seek(0)
lzma_reader = lzma.LZMAFile(buff, 'rb')

size_of = struct.calcsize(fmt)


def generate():
    r = lzma_reader.read(size_of)
    while len(r) != 0:
        yield struct.unpack(fmt, r)[0]
        r = lzma_reader.read(size_of)


# Test if it is same array
res = list(generate())
print res == data
</code></pre>
<p>Result:</p>
<pre><code>Uncompressed: 496225
Compressed: 11568
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I agree with Efron Licht, clearly: It entirely depends on complexity of particular list to compact (not to say 'compress'). Unless your lists are simple enought to express as generators, your only choice is to use Bartek Jablonski answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>A generator is what you are looking for. You can encapsulate all the custom logic inside. The question is a bit vague, so might help knowing if this aids you</p>
<pre><code>def moreDataExists(index):
    # Your stop condition
    return True

def getNextIndex(index):
    # Your complicated pattern of going from one index to the next.
    return index

def generator(yourData):
    index = None
    while moreDataExists(index):
        index = getNextIndex(index)
        yield yourData[index]


for d in generator(data):
    doSomethingWith(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is very easy - just wrap your filtered iterator with a generator, e.g.:</p>
<pre><code>for i in (_ for _ in range(int(1e7)) if str(_)==str(_)[::-1]):
    if str(i**2)==str(i**2)[::-1]:
        print(i)
</code></pre>
</div>
<span class="comment-copy">What you're describing is a form of <a href="https://en.wikipedia.org/wiki/Lossless_compression" rel="nofollow noreferrer">compression</a>.</span>
<span class="comment-copy">What about making an in-memory zip file?</span>
<span class="comment-copy">This is a complex question. Whether or not there is 'useful' (that is, short) closed form solution for a particular pattern of integers is a question of number theory that can be hard to answer precisely. Depending on your particular list, it might be trivial - or impossible. Looking into general purpose compression as mentioned above could be helpful. What are you trying to accomplish? Are you just curious? (Nothing wrong with that!)</span>
<span class="comment-copy">I'm mainly just curious. However, to give context, I was thinking up ways to reduce the data storage requirements of large sparse matrices, particularly for sparse matrix vector products. Here, the list of integers would be indexes pointing a reduced list of nonzero elements and also element location. The LZW compression looks very neat. I'll read up on that.</span>
<span class="comment-copy">You could google your sequence and hope to find it at <code>https://oeis.org/</code>. If you find it, you can compress your whole sequence to a small ID :)</span>
<span class="comment-copy">An alternative form of compression I've found and used a while ago is the <a href="https://github.com/lemire/simdcomp" rel="nofollow noreferrer">SIMDComp</a> library.</span>
