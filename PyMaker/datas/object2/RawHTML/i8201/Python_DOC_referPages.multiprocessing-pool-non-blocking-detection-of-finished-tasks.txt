<div class="post-text" itemprop="text">
<p>Is there a way know that a process pool has finished running the tasks?</p>
<pre><code>_process_pool = mp.Pool(processes=num_workers)
</code></pre>
<p>I am adding task onto the pool by batches:</p>
<pre><code>for batch in gen_batches():
   _process_pool.map_async(fn, batch)
</code></pre>
<p>Is there a way to know when all tasks have been done? <code>callback</code> doesn't seem to work here. And I want to avoid to block the parent process by calling <code>_process_pool.join()</code></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Question</strong>: Is there a way to know when all tasks have been done?</p>
</blockquote>
<p>Append all <code>AsyncResult</code> from  <code>pool.map_async(...</code> to a <code>list</code>, for instance:</p>
<pre><code>multiple_results = []
for batch in gen_batches():
   multiple_results.append( _process_pool.map_async(fn, batch) )


if all([ar.ready() for ar in multiple_results]):
    print('Pool done')
else:
    print('Pool any alive')
</code></pre>
<blockquote>
<p><strong>Python » 3.6.1 Documentation</strong>: <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult" rel="nofollow noreferrer">multiprocessing.pool.AsyncResult</a> </p>
</blockquote>
<p><strong><em>Tested with Python:3.4.2</em></strong></p>
</div>
<span class="comment-copy">pool is very limited compared to other multiprocessing methods.  I would check out "from multiprocess import Process, Pipe".  You can create workers (Process). when they are done they can pass a message to the main thread via Pipe.  If you go this route, make sure you read the thing about "daemon=True".  This will prevent orphaned children. <a href="https://docs.python.org/2/library/multiprocessing.html#pipes-and-queues" rel="nofollow noreferrer">docs.python.org/2/library/multiprocessing.html#pipes-and-queues</a>  and  <a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Process.daemon" rel="nofollow noreferrer">docs.python.org/2/library/…</a></span>
<span class="comment-copy">I can also use Value and Lock for it right ? Is there any drawback of using a global Value, and Lock instead of passing it on to processor-function ?  It works correctly even with the global variables. Am I missing something here ?</span>
<span class="comment-copy">Thanks! This also works with Python 2.7.</span>
