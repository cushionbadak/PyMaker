<div class="post-text" itemprop="text">
<p>I'm currently working on a project that I want to restart and rerun every 10 minutes. So I created this test file to see if I could get it working. </p>
<pre><code>import sys
import os
import sched
import time

print("Hello")
s = sched.scheduler(time.time, time.sleep)

def restart_program(sc):
    python = sys.executable
    os.execl(python, python, * sys.argv)
    s.enter(5, 1, restart_program, (sc,))

s.enter(5, 1, restart_program, (s,))
s.run()
</code></pre>
<p>So I want this program to restart every 5 seconds. In this case it would print "Hello!". But when i run it, it just prints once and never restarts.</p>
<p>How would I make it restart regulary?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't get what exactly are you looking for but below are the 3 possible cases.</p>
<p>1: If the program is running (perhaps as a daemon?) and you want to keep calling a particular method after some interval then you can use <a href="http://apscheduler.readthedocs.io/en/latest/" rel="nofollow noreferrer">apscheduler</a>.</p>
<pre><code>from apscheduler.schedulers.blocking import BlockingScheduler

def do_something_every_5_second():
    print "Do something"

scheduler = BlockingScheduler()
scheduler.add_job(do_something_every_5_second, 'interval', seconds=5)
scheduler.start()
</code></pre>
<p>2: You can use <a href="https://en.wikipedia.org/wiki/Cron" rel="nofollow noreferrer">Cron</a> which will execute your python script at defined time. Note that Cron can not be set for less than 1 minute. So for eg if you want to run your script through Cron every 5 seconds then you'll have to use below hack.</p>
<pre><code>* * * * * /path/to/script
* * * * * sleep 5; /path/to/script
* * * * * sleep 10; /path/to/script
* * * * * sleep 15; /path/to/script
* * * * * sleep 20; /path/to/script
* * * * * sleep 25; /path/to/script
* * * * * sleep 30; /path/to/script
* * * * * sleep 35; /path/to/script
* * * * * sleep 40; /path/to/script
* * * * * sleep 45; /path/to/script
* * * * * sleep 50; /path/to/script
* * * * * sleep 55; /path/to/script
</code></pre>
<p>If you are on Windows then you can use Windows Task Scheduler. See <a href="https://stackoverflow.com/questions/2725754/schedule-python-script-windows-7">Schedule Python Script - Windows 7</a></p>
<p>3: You can use loop with timeout (<a href="https://stackoverflow.com/questions/43673541/make-a-program-restart-regulary/43673958#comment74393215_43673541">as suggested by Sneh</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Besides some possibilities for better choices, I think your code does not work because of the behaviour of <a href="https://docs.python.org/3/library/os.html#os.execl" rel="nofollow noreferrer">os.execl</a>:</p>
<blockquote>
<p>These functions all execute a new program, replacing the current process; they do not return.</p>
</blockquote>
<p>check out <a href="https://docs.python.org/2/library/subprocess.html#popen-constructor" rel="nofollow noreferrer">subprocess.Popen</a></p>
<pre><code>   import sched
   import time
   import subprocess

   print("Hello")
   s = sched.scheduler(time.time, time.sleep)

   def restart_program(sc):
       subprocess.Popen(["echo", "external process is being called"])
       s.enter(5, 1, restart_program, (sc,))

   s.enter(5, 1, restart_program, (s,))
   s.run()
</code></pre>
</div>
<span class="comment-copy">use a cron job?</span>
<span class="comment-copy">you can use loop &amp; timeout in python to get it done.</span>
<span class="comment-copy">Yeah, this is really what <code>cron</code> is designed for.</span>
<span class="comment-copy">As Sneh Pandya said. you can use simple loop with timeout. I think there is no reason to use cron until you really dont have to.</span>
