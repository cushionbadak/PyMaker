<div class="post-text" itemprop="text">
<p>I've only programmed in Python for the past 8 months, so please excuse my probably noob approach to python.</p>
<p>My problem is the following, which i hope someone could help me solve.</p>
<p>I have lots of data in a file, for instance something like this (just a snip):</p>
<pre><code>SWITCH MGMT IP;SWITCH HOSTNAME;SWITCH MODEL;SWITCH SERIAL;SWITCH UPTIME;PORTS NOT IN USE
10.255.240.1;641_HX_3560X;WS-C3560X-24P-S;FDO1601V031;12 weeks, 3 days, 23 hours, 33 minutes;1
10.255.240.7;641_HX_LEFT_2960x;WS-C2960X-24PS-L;FOC1750S2E5;12 weeks, 4 days, 7 minutes;21
10.255.240.8;641_UX_BASEMENT_2960x;WS-C2960X-24PS-L;FOC1750S2AG;12 weeks, 4 days, 7 minutes;12
10.255.240.9;641_UX_SPECIAL_2960x;WS-C2960X-24PS-L;FOC1750S27M;12 weeks, 4 days, 8 minutes;25
10.255.240.2;641_UX_OFFICE_3560;WS-C3560-8PC-S;FOC1202U24E;2 years, 30 weeks, 3 days, 16 hours, 43 minutes;2
10.255.240.3;641_UX_SFO_2960x;WS-C2960X-24PS-L;FOC1750S2BR;12 weeks, 4 days, 7 minutes;14
10.255.240.65;641_HX_3560X;WS-C3560X-24P-S;FDO1601V031;12 weeks, 3 days, 23 hours, 34 minutes;1
10.255.240.5;641_HX_RIGHT_2960s;WS-C2960S-24PS-L;FOC1627X1BF;12 weeks, 4 days, 12 minutes;16
10.255.240.6;641_HX_LEFT_2960x-02;WS-C2960X-24PS-L;FOC1750S2C4;12 weeks, 4 days, 7 minutes;15
10.255.240.4;641_UX_BASEMENT_2960s;WS-C2960S-24PS-L;FOC1607Z27T;12 weeks, 4 days, 8 minutes;3
10.255.240.62;641_UX_OFFICE_3560CG;WS-C3560CG-8PC-S;FOC1646Y0U2;15 weeks, 5 days, 12 hours, 15 minutes;6
</code></pre>
<p>I want to run through all the data in the file and check if a serial number occurs more than once. If it does i want to remove the duplicate found. The reason why the result might contain the same switch or router multiple times is that it might have several layer 3 interfaces, where it can be managed. </p>
<p>So in the above example. After i've run through the data it should remove the line:</p>
<pre><code>10.255.240.65;641_HX_3560X;WS-C3560X-24P-S;FDO1601V031;12 weeks, 3 days, 23 hours, 34 minutes;1
</code></pre>
<p>Since the second line in the file already contains the same switch and serial number. </p>
<p>I've spend several days trying to figure out, how to achieve this and it is starting to give me a headache.</p>
<p>My base code looks like this:</p>
<pre><code>if os.stat("output.txt").st_size != 0:
    with open('output.txt','r') as file:
        header_line = next(file) # Start from line 2 in the file.

    data = [] # Contains the data from the file.
    sn = [] # Contains the serial numbers to check up against.
    ok = [] # Will contain the clean data with no duplicates.

    data.append(header_line.split(";")) # Write the head to data.

    for line in file: # Run through the file data line for line.
        serialchk = line.split(";") # Split the data into a list
        data.append(serialchk) # Write the data to data list.
        sn.append(serialchk[3]) # Write the serial number to sn list.

end = len(data) # Save the length of the data list, so i can run through the data
i = 0 # For my while loop, so i know when to stop.'

while i != end: # from here on out i am pretty lost on how to achieve my goal.
        found = 0
        for x in range(len(data)):
            if sn[i] == data[x][3]:
                found += 1
                print data[x]
                ok.append(data[x])
            elif found &gt; 1:
                print "Removing:\r\n"
                print data[x-1]
                del ok[-1]
                found = 0
        i += 1
</code></pre>
<p>Is there a more pythonic way to do this? I am pretty sure with all the talented people here, that someone can give me clues on how to make this happen. </p>
<p>Thank you very much in advance. </p>
</div>
<div class="post-text" itemprop="text">
<p>My suggestion:</p>
<pre><code>if os.stat("output.txt").st_size != 0:
    with open('output.txt','r') as file:
        header_line = next(file) # Start from line 2 in the file.

    srn = set()  # create a set where the seen srn will be stored
    ok = [] # Will contain the clean data with no duplicates.

    ok.append(header_line.split(";")) # Write the head to ok.

    for line in file: # Run through the file data line for line.
        serialchk = line.split(";") # Split the data into a list
        if serialchk[3] not in srn:  # if the srn hasn't be seen
            ok.append(serialchk)  # add the row to ok
            srn.add(serialchk[3])  # add the srn to seen set
        else:  # if the srn has already be seen
            print "Removing: "+";".join(serialchk)  # notify the user it has been skipped
</code></pre>
<p>You'll end up with ok containing only rows with uniq srn, and print the removed rows
Hopefully it might help</p>
</div>
<div class="post-text" itemprop="text">
<p>You're making it way more complicated than it has to be, and not memory-friendly (you dont have to load the whole file in memory to filter duplicates).</p>
<p>The simple way is to read your file line by line, and for each line check if the serial number has already been seen. If yes, skip the line, else store the serial number and write the line to your output file:</p>
<pre><code>seen = set() 
with open('output.txt','r') as source, open("cleaned.txt", "w") as dest:
    dest.write(next(source)) # Start from line 2 in the file.
    for line in src: 
        sn = line.split(";")[3] 
        if sn not in seen:
            seen.add(sn) 
            dest.write(line) 
        # else, well we just ignore the line ;)
</code></pre>
<p>NB : I assume you want to write back the deduplicated lines to a file. If you want to keep them in memory the algorithm is mostly the same, just append your deduplicated lines to a <code>list</code> instead - but beware of memory usage if you have huge files.</p>
</div>
<div class="post-text" itemprop="text">
<p>I will walk you through the changes I would make.</p>
<p>The first thing I would do would be to use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module to parse the input. Since you can iterate over the <code>DictReader</code>, I also opt for that for brevity. The <code>list</code> <code>data</code> will contain the final (cleaned) results.</p>
<pre><code>from csv import DictReader
import os

if os.stat("output.txt").st_size != 0:
    with open('output.txt', 'r') as f:
        reader = DictReader(f, delimiter=';') # create the reader instance

        serial_numbers = set()
        data = []
        for row in reader:
            if row["SWITCH HOSTNAME"] in serial_numbers:
                pass
            else:
                data.append(row)
                serial_numbers.add(row["SWITCH HOSTNAME"])
</code></pre>
<p>The format of the data will have changed by my approach, from a <code>list</code> of <code>list</code>s to a <code>list</code> of <code>dict</code>s, but if you want to save the cleaned data into a new csv file, the <code>DictWriter</code> class should be an easy way to do that.</p>
</div>
<span class="comment-copy">First off, I would check out the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module</a></span>
<span class="comment-copy">Why store deduplicated lines in memory when you can just write them to file directly ?</span>
<span class="comment-copy">Because it was nowhere specified @Cown wanted to write it to a file in the end.</span>
<span class="comment-copy">Duh ! Yes Indeed - should have read twice before commenting (and I should possibly get me another coffee xD).</span>
<span class="comment-copy">Hello and thank you very much. I saw your reply first and tried it out and it works like a charm. You sir, are a lifesaver! Litterally! :-)</span>
<span class="comment-copy">Glad it helped :)</span>
<span class="comment-copy">Thank you very much for this. If there is a word for a jedimaster in Python, i'm pretty sure you are one. Your example uses almost no memory as you stated and the script runs even faster. Maybe you are a Python God? Hmm.</span>
<span class="comment-copy">@Cown This has very few to do with Python skills actually, it's just plain basic algorithm stuff.</span>
<span class="comment-copy">I guess i'm not so good at algorithms then, but hey, we all have to learn somehow. Would be nice though, to see python the way you do. :-)</span>
<span class="comment-copy">Hello sir, i'm not sure why you assume that my data is a csv file, it is not. It's just plain text data, which i've extracted from running and logging into switches etc. It's separated by semicolon for it to be easier to import into excel for instance. Thanks though for the above example, but it is not what i am looking for. :-)</span>
<span class="comment-copy">csv means 'comma seperated values'. While technically your values are separated by semicolons, the format is the same. First row contains a header of values separated by the delimiter (<code>;</code>), subsequent rows contain data values, again separated by the delimiter. Check out the last <a href="https://en.wikipedia.org/wiki/Comma-separated_values#Example" rel="nofollow noreferrer">example</a> in Wikipedia.</span>
