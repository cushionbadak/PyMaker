<div class="post-text" itemprop="text">
<p>I have a csv file containing two columns. The first one is a stringID whereas the second one is a list of stringIDs. </p>
<blockquote>
<p>Column1 | Column2</p>
<p>aaa    | [u'xxx', u'yyy']</p>
</blockquote>
<p>My question is how to create a new csv with the stringIDs in pairs (two columns with duplicates)? For example, </p>
<blockquote>
<p>Column1 | Column2</p>
<p>aaa     | u'xxx'</p>
<p>aaa     | u'yyy'</p>
</blockquote>
<p>Thanks a lot for helping me! I know this problem should be simple but it has been bothering me for days...</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the constructive answer! Although it didn't quite work for me specifically, I was definitely inspired by it and came up with some functional code! </p>
<pre><code>header = True

with open('2.csv') as inCSV:
writer = csv.writer(open('1.csv', 'wb'))
for line in inCSV.readlines():
    column1, column2 = [_.strip() for _ in line.split(',',1)]
    if header:
        writer.writerow(('source','target'))
        header = False
    else:
        temp=column2.replace("[","]").replace("]","").replace('"','').split(",")
        for i in range(len(temp)):
            data=(column1,temp[i])
            writer.writerow(data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This code ignores the possibility that csv-style processing could be used, since I wasn't sure exactly how fields are delimited. I've assumed that they are separated by a '|' character and that it could be necessary to strip blanks. I have taken advantage of a comment in using <code>ast.literal_eval</code> for safe processing of the lists.</p>
<pre><code>&gt;&gt;&gt; from io import StringIO
&gt;&gt;&gt; import ast
&gt;&gt;&gt; inputCSV = StringIO('''\
... Column1 | Column2
... aaa | [u'xxx', u'yyy']
... bbb | [u'sss', u'ttt']''')
&gt;&gt;&gt; header = True
&gt;&gt;&gt; with inputCSV as inCSV:
...     for line in inCSV.readlines():
...         
...         column1, column2 = [_.strip() for _ in line.split('|')]
...         
...         
...         if header:
...             print ('%s|%s' % (column1, column2))
...             header = False
...         else:
...             column2 = ast.literal_eval(column2)
...             
...             for item in column2:
...                 print ('%s|%s' % (column1, item))
... 
Column1|Column2
aaa|xxx
aaa|yyy
bbb|sss
bbb|ttt
</code></pre>
</div>
<span class="comment-copy">If it's been bothering you for days you should have some code you've tried. Please share that with us.</span>
<span class="comment-copy">Can you give us what you have in code so we can help you? We aren't here to do work for you.</span>
<span class="comment-copy">It is almost always the wrong choice to use <code>eval()</code>. <a href="https://docs.python.org/3/library/ast.html?highlight=ast.literal_eval#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval()</code></a> would work just as well while being much safer.</span>
<span class="comment-copy">Thanks, I wasn't aware of that. Very good to know!</span>
