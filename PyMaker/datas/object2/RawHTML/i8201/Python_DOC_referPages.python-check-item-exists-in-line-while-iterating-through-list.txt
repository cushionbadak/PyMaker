<div class="post-text" itemprop="text">
<p>I am trying to loop through two lists and only want to print an item if it DOES exist in the second list. I will be doing this through very large files so do not want to store them in memory like a list or dictionary. Is there a way I can do this without storing into a list or dict?</p>
<p>I am able to do the below to confirm they are NOT in the list but unsure why it is not working when I am trying confirm they ARE in the list by removing the "not".</p>
<p>Code to verify item DOES NOT exist in list_2.</p>
<pre><code>list_1 = ['apple',
          'pear',
          'orange',
          'kiwi',
          'strawberry',
          'banana']

list_2 = ['kiwi',
          'melon',
          'grape',
          'pear']

for fruit_1 in list_1:
    if all(fruit_1 not in fruit_2 for fruit_2 in list_2):
        print(fruit_1)
</code></pre>
<p>Code to verify item DOES exist in list_2.</p>
<pre><code>list_1 = ['apple',
          'pear',
          'orange',
          'kiwi',
          'strawberry',
          'banana']

list_2 = ['kiwi',
          'melon',
          'grape',
          'pear']

for fruit_1 in list_1:
    if all(fruit_1 in fruit_2 for fruit_2 in list_2):
        print(fruit_1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a solution using <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow noreferrer"><code>pandas.read_csv</code></a> to create memory mapped files:</p>
<pre><code>import pandas as pd

list1 = pd.read_csv('list1.txt', dtype=str, header=None, memory_map=True)
list2 = pd.read_csv('list2.txt', dtype=str, header=None, memory_map=True)

exists = pd.merge(list1, list2, how='inner', on=0)
for fruit in exists[0].tolist():
    print fruit
</code></pre>
<p>The <code>list1.txt</code> and <code>list2.txt</code> files contain the strings from the question with one string on each line.</p>
<p><strong>Output</strong></p>
<pre><code>pear
kiwi
</code></pre>
<p>I do not have any really large files to experiment with, so I do not have any performance measurements.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use python's sets to work out the items in both lists</p>
<pre><code>set(list1).intersection(set(list_2))
</code></pre>
<p>See <a href="https://docs.python.org/2/library/sets.html" rel="nofollow noreferrer">https://docs.python.org/2/library/sets.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>So this is how you get them:</p>
<pre><code>exists = [item for item in list_1 if item in list_2]
does_not_exist = [item for item in list_1 if item not in list_2]
</code></pre>
<p>And to <code>print</code> them:</p>
<pre><code>for item in exists:
    print item
for item in does_not_exist:
    print item
</code></pre>
<p>But if you want to just print:</p>
<pre><code>for item in list_1:
    if item in list_2:
        print item
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was able to accomplish the inverse by doing a True/False evaluation.</p>
<pre><code>list_1 = ['apple',
          'pear',
          'orange',
          'kiwi',
          'strawberry',
          'banana']

list_2 = ['kiwi',
          'melon',
          'grape',
          'pear']

# DOES exist
for fruit_1 in list_1:
    if all(fruit_1 not in fruit_2 for fruit_2 in list_2) is False:
        print(fruit_1)

print('\n')

# DOES NOT exist
for fruit_1 in list_1:
    if all(fruit_1 not in fruit_2 for fruit_2 in list_2) is True:
        print(fruit_1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I recommend <code>pandas</code> which works well on large-scale data.</p>
<p>Use pip to install it:</p>
<p><code>pip install pandas</code></p>
<p>And in a way you may achieve it like this:</p>
<pre><code>import pandas as pd

s1 = pd.Index(list_1)
s2 = pd.Index(list_2)

exists = s1.intersection(s2)
does_not_exist = s1.difference(s2)
</code></pre>
<p>And now you would see the magic things if you execute <code>print exists</code></p>
<p>See <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#set-operations-on-index-objects" rel="nofollow noreferrer">Pandas Docs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem the code is how the <strong>all()</strong> function is being evaluated. To break it down a bit more simply.</p>
<pre><code>## DOES EXIST
print all('kiwi' in fruit_2 for fruit_2 in ['pear', 'kiwi'])
print all('pear' in fruit_2 for fruit_2 in ['pear', 'kiwi'])
</code></pre>
<p>Evaluates to</p>
<pre><code>False
False
</code></pre>
<p>Inversely if you do something like this</p>
<pre><code>#DOES NOT EXIST
print all('apple' not in fruit_2 for fruit_2 in ['pear', 'kiwi'])
print all('pear' not in fruit_2 for fruit_2 in ['pear', 'kiwi'])
</code></pre>
<p>Evaluates to</p>
<pre><code>True
False
</code></pre>
<p>I can not pinpoint why this is the cause, but it may be how the <strong>all()</strong> function returns true <strong>if all elements of the iterable are true</strong> and false otherwise.</p>
<p>In any case I think using any() instead of all() for the DOES exist part would work.</p>
<pre><code>print "DOES NOT EXIST"
for fruit_1 in list_1:
    # print all(fruit_1 not in fruit_2 for fruit_2 in list_2)
    if all(fruit_1 not in fruit_2 for fruit_2 in list_2):
        print(fruit_1)

print "\nDOES EXIST"
for fruit_1 in list_1:
    if any(fruit_1 in fruit_2 for fruit_2 in list_2):
        print(fruit_1)

DOES NOT EXIST
apple
orange
strawberry
banana

DOES EXIST
pear
kiwi
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One issue with your code is that the all method <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer">returns false if any single check returns false</a>. Another is that the <code>fruit_1 in fruit_2</code> section is checking to see if <code>fruit_1</code> is a substring of <code>fruit_2</code>. If we were to modify the lists to make your logic work they would look like:</p>
<pre><code>list_1 = ['apple',
          'pear',
          'orange',
          'kiwi',
          'berry',
          'banana',
          'grape']

list_2 = ['grape',
          'grape',
          'grape',
          'grape',
          'grape']
</code></pre>
<p>but could be:</p>
<pre><code>list_1 = ['apple',
          'pear',
          'orange',
          'kiwi',
          'berry',
          'banana',
          'grape']

list_2 = ['strawberry',
          'strawberry',
          'strawberry',
          'strawberry',
          'strawberry',
          'strawberry']
</code></pre>
<p>since <code>berry</code> is in <code>strawberry</code>. If we were to continue to use iteration to make this check, as opposed to an intersection of sets, <a href="https://stackoverflow.com/a/43639113/2000793">as @wrdeman suggested</a>, then, using the dataset you provided, it would look like this:</p>
<pre><code>for fruit_1 in list_1:
    if fruit_1 in list_2:
        print(fruit)
</code></pre>
<p>The other modification could be to change <code>all</code> to <code>any</code>, which <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer">returns true if any of the iterables items return true</a>. Then your code would look like:</p>
<pre><code>for fruit_1 in list_1:
    if any(fruit_1 == fruit_2 for fruit_2 in list_2):
        print(fruit_1)
</code></pre>
</div>
<span class="comment-copy">Can't you just use list comprehension? <code>[x for x in list_1 if x in list_2]</code>, would return a list of the items in <code>list_1</code> if they're in <code>list_2</code>. And inversely <code>[x for x in list_1 if x not in list_2]</code>.</span>
<span class="comment-copy">@MBatish if you accept to save <i>one</i> list in memory, then you can create a set with that list, and iterate on the other one (reading a file). That will be fast. Else it will take forever.</span>
<span class="comment-copy">Okay using the all() function I am avoiding that. Just confused as to why the inverse is not working.</span>
<span class="comment-copy">"I will be doing this through very large files so do not want to store them in memory like a list or dictionary" ...</span>
<span class="comment-copy">thanks for the response. But this is saving the output to the exists and does_does_not_exist variables. The files I am dealing with large and would like to avoid saving them to memory.</span>
