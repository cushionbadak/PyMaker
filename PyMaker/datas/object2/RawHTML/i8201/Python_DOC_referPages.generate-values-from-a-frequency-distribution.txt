<div class="post-text" itemprop="text">
<p>I'm currently analyzing a 16 bit binary string - something like 0010001010110100. I have approximately 30 of these strings. I have written a simple program in Matlab that counts the numbers of 1's in each bit for all 30 strings.</p>
<p>So, for example:</p>
<p>1 30</p>
<p>2 15</p>
<p>3 1</p>
<p>4 10</p>
<p>etc</p>
<p>I want to generate more strings (100s) that roughly follow the frequency distribution above. Is there a Matlab (or Python or R) command that does that?</p>
<p>What I'm looking for is something like this: <a href="http://www.prenhall.com/weiss_dswin/html/simulate.htm" rel="nofollow noreferrer">http://www.prenhall.com/weiss_dswin/html/simulate.htm</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In MATLAB: just use <code>&lt;</code> (or <code>lt</code>, less than) on <code>rand</code>:</p>
<pre class="lang-matlab prettyprint-override"><code>len = 16; % string length
% counts of 1s for each bit (just random integer here)
counts = randi([0 30],[1 len]); 
% probability for 1 in each bit
prob = counts./30;
% generate 100 random strings 
n = 100;
moreStrings = rand(100,len);
% for each bit check if number is less than the probability of the bit
moreStrings = bsxfun(@lt, moreStrings, prob); % lt(x,y) := x &lt; y
</code></pre>
<p>In Python:</p>
<pre class="lang-python prettyprint-override"><code>import numpy as np

len = 16 # string length
# counts of 1's for each bit (just random integer here)
counts = np.random.randint(0, 30, (1,16)).astype(float)
# probability for 1 in each bit
prob = counts/30
# generate 100 random strings 
n = 100
moreStrings = np.random.rand(100,len)
# for each bit check if number is less than the probability of the bit
moreStrings = moreStrings &lt; prob
</code></pre>
</div>
<span class="comment-copy">If you only have 30 strings how does 2 (I assume that's a bit position) get a count of 45?</span>
<span class="comment-copy">That was just an example.</span>
<span class="comment-copy">I don't get the logic that you are trying to explain. Why not just show your real data, and the output that you expect?</span>
<span class="comment-copy">Thanks for fixing that confusing sample data. In Python 3.6+ you can use <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a>.</span>
