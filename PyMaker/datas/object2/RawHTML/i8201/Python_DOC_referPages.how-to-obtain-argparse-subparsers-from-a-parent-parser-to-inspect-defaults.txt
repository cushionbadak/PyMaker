<div class="post-text" itemprop="text">
<p>Suppose that I create a parser with a default value for an argument, and then give it a subparser with a further default value for an argument.</p>
<pre><code>In [1]: parser = argparse.ArgumentParser(description='test')

In [2]: parser.add_argument("--test", dest="test", default="hello")
Out[2]: _StoreAction(option_strings=['--test'], dest='test', nargs=None, const=None, default='hello', type=None, choices=None, help=None, metavar=None)

In [3]: parser.get_default("test")
Out[3]: 'hello'

In [4]: subparsers = parser.add_subparsers(dest="command")

In [5]: parser_other = subparsers.add_parser("other")

In [6]: parser_other.add_argument("--other-test", dest="other_test", default="world")
Out[6]: _StoreAction(option_strings=['--other-test'], dest='other_test', nargs=None, const=None, default='world', type=None, choices=None, help=None, metavar=None)

In [7]: parser_other.get_default("other_test")
Out[7]: 'world'
</code></pre>
<p>This is all fine. But suppose that I have a function which creates and returns the parent parser <code>parser</code> from above, but with no direct access to the subparser.</p>
<p>How can I still print out defaults for the subparser arguments? Or get a handle to each subparser separately?</p>
<pre><code>In [8]: parser._subparsers._defaults
Out[8]: {}

In [9]: parser._subparsers.get_default("other_test")  # is None
</code></pre>
<p>There doesn't appear to be any more attributes or methods from <code>parser._subparsers</code> or from <code>parser</code> that could display defaults.</p>
<p>The overall problem is: how to programmatically access subparser defaults when you only have a handle to the parent parser?</p>
</div>
<div class="post-text" itemprop="text">
<p>You got it right.  But maybe I can explain a few details.</p>
<pre><code>a = parser.add_argument(...)
</code></pre>
<p><code>add_argument</code> creates an <code>Action</code> object (or actually a subclass depending on the <code>action</code> parameter).  You can save a pointer to that object in your own environment.  But that Action is also collected in the <code>parse._actions</code> list.  That's how the <code>parser</code> keeps tracks of its arguments.  </p>
<p>Reading <code>_actions</code> should always be safe.  Modifying it risks breaking breaking the parser.  <code>argument_groups</code> have access to the list.</p>
<pre><code>subparsers = parser.add_subparsers(dest="command")
</code></pre>
<p>is a specialized version of <code>add_argument</code>, creating and returning a <code>argparse._SubParsersAction</code> object.  <code>subparsers</code> is that object.  And as noted from the earlier answer, you can find it in the <code>_actions</code> list by searching for the correct subclass.  (To the main parser, <code>subparsers</code> is just another positional argument.)</p>
<p><code>subparsers</code> maintains its own specialized dictionary of <code>parsers</code>, accessible as its <code>choices</code> attribute.  The main parser does not have any record of those sub parsers.</p>
<pre><code>parser_other = subparsers.add_parser("other")
</code></pre>
<p>creates a parser, puts it in that <code>choices</code> map, and returns a reference for your own use (with <code>add_argument</code> etc).  Each sub parser has its own <code>_actions</code> list. (and its own <code>_defaults</code>).</p>
<p>Look at the code for the <code>get_defaults</code> method:</p>
<pre><code>def get_default(self, dest):
    for action in self._actions:
        if action.dest == dest and action.default is not None:
            return action.default
    return self._defaults.get(dest, None)
</code></pre>
<p>It uses the <code>_actions</code> attribute. And looks at the <code>action.default</code> attribute of the Action. </p>
<p><code>self._defaults</code> is the dictionary updated by the <code>parser.set_defaults</code> method.  That method also copies its parameters to the relevant Action objects.  <code>get_defaults</code> checks that in case the <code>dest</code> is one of those defaults that isn't tied to a particular Action.  <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.set_defaults" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.set_defaults</a></p>
<p>I haven't used the <code>parser._subparsers</code> attribute much.  Looking at the <code>parser.add_subparsers</code> method I see it is actually an <code>argument_group</code>.  Argument_groups are primarily a <code>help</code> tool, used to group help lines.  The relationship between a parser object and its argument_groups is a little tricky, and probably not something you want to use.</p>
<hr/>
<p>Here's an example, with more (too much) detail:</p>
<pre><code>In [22]: parser = argparse.ArgumentParser()
In [23]: sp = parser.add_subparsers(title='subparsers', dest='cmd')
In [24]: sp1 = sp.add_parser('cmd1')
In [25]: sp2 = sp.add_parser('cmd2')
In [26]: parser.print_help()
usage: ipython3 [-h] {cmd1,cmd2} ...

optional arguments:
  -h, --help   show this help message and exit

subparsers:
  {cmd1,cmd2}

In [28]: [a.dest for a in parser._actions]
Out[28]: ['help', 'cmd']

In [29]: parser._action_groups
Out[29]: 
[&lt;argparse._ArgumentGroup at 0xaf86bf2c&gt;,
 &lt;argparse._ArgumentGroup at 0xaf86bdcc&gt;,
 &lt;argparse._ArgumentGroup at 0xac99fa6c&gt;]
In [30]: [g.title for g in parser._action_groups]
Out[30]: ['positional arguments', 'optional arguments', 'subparsers']

In [31]: parser._subparsers
Out[31]: &lt;argparse._ArgumentGroup at 0xac99fa6c&gt;
</code></pre>
<p>The <code>_defaults</code> of <code>_subparsers</code> is actually the same dictionary as <code>parser._defaults</code></p>
<pre><code>In [32]: parser.set_defaults(extra='foobar')
In [33]: parser._defaults
Out[33]: {'extra': 'foobar'}
In [34]: parser._subparsers._defaults
Out[34]: {'extra': 'foobar'}
</code></pre>
<p><code>parser._subparsers._actions</code> is also identical to <code>parser._actions</code>.  But the group does maintain its own list actions (used in the help display).</p>
<pre><code>In [35]: parser._subparsers._group_actions
Out[35]: [_SubParsersAction(option_strings=[], dest='cmd', nargs='A...', const=None, 
    default=None, type=None, choices=OrderedDict([...]), help=None, metavar=None)]
</code></pre>
<p>So you could use <code>parser._subparsers._group_actions[0]</code> to find the <code>subparsers</code> action object instead of searching the <code>parsers._actions</code> list.</p>
<pre><code>In [37]: parser._subparsers._group_actions[0].choices
Out[37]: 
OrderedDict([('cmd1',
              ArgumentParser(prog='ipython3 cmd1', usage=None, description=None,...)),
             ('cmd2',
              ArgumentParser(prog='ipython3 cmd2', usage=None, description=None,...))])
</code></pre>
<p>On second thought, <code>parser._subparsers._group_actions</code> might not be so useful.  If you don't give it a special title, then it is identical to <code>parser._positionals</code>, the argument group of all positional arguments.  So you'd still need to verify the <code>_SubParsersAction</code> class.</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on <a href="https://stackoverflow.com/a/20096044/567620">this answer</a> it looks like it can be done as follows:</p>
<pre><code>subparsers = [
    subparser 
    for action in parser._actions 
    if isinstance(action, argparse._SubParsersAction) 
    for _, subparser in action.choices.items()
]
</code></pre>
<p>then</p>
<pre><code>subparsers[0].get_default("other_test")
</code></pre>
<p>prints <code>"world"</code> as expected.</p>
</div>
<span class="comment-copy">This isn't something <code>argparse</code> supports. You'll be messing with the implementation details if you do this.</span>
<span class="comment-copy">Since viewing the defaults would not make any changes to the parser or subparsers, I don't agree that it would be "messing" with any implementation details. Since it may be necessary to inspect subparsers of a parser provided to my program by a function call that I don't control, relying on implementation specifics like <code>_actions</code> is unfortunately a necessary evil. It would be much better if this access was publicly supported though.</span>
<span class="comment-copy">Sure, go ahead and use <code>_actions</code>.  A basic attribute like that isn't going to disappear over the next half dozen development cycles.  The backward compatibility issues would be a nightmare if anyone tried a major rewrite of <code>argparse</code>.  The linked answer is from 2013 and is still valid.</span>
