<div class="post-text" itemprop="text">
<p>I have a list in dictionary form looking like this:</p>
<pre><code>[{0: [6]},
 {0: [1, 4, 5, 6]},
 {0: [3]},
 {2: [1, 13, 15]},
 {2: [8, 19]},
 {2: [8]},
 {2: [1, 23]},
 {2: [8, 26]},
 {2: [23]},
 {2: [23]},
 {2: [23, 34]},
 {2: [39]},
 {2: [23, 34, 1]},
 {2: [1, 42]},
 {2: [23, 34]},
 {2: [24]},
 {2: [15, 8]},
 {3: [5, 6, 8, 9]},
 {3: [0]},
 {3: [1]},
 {3: [5, 6, 13, 17, 18]},
 {3: [12]},
 {3: [2, 6, 9, 13, 15, 16]},
 {3: [4, 5, 6, 17, 20, 21, 22]},
 {3: [5, 12, 17, 20, 21, 26, 27]},
 {3: [2, 8, 9, 22, 26, 28]},
 {3: [4, 5, 6, 20, 21, 8, 1, 13, 32, 33]},
 {3: [16, 13]},
 {3: [9, 17, 20, 21, 27, 28, 32, 35, 36]},
 {3: [6, 9, 16, 8, 37, 38]},
 {3: [7, 9, 26, 27, 28, 29]},
 {3: [9, 22, 1, 34]},
 {3: [15, 25]},
 {3: [29, 1]},
 {3: [14, 20, 40]},
 {3: [14, 13, 41]},
 {3: [5, 32, 35, 36, 37, 38]},
 {3: [6, 21, 42]}]
</code></pre>
<p>Goes on like this for a while. The first numbers are really important.
Now I want to find values '0', '2' and '3' and look which values are connected to this.</p>
<p>What I want ultimately is to look up the different values and save all the values connected in a list.</p>
<p>For 0:</p>
<pre><code>0: [6,1, 4, 5, 6,3]
</code></pre>
<p>I can't really find out how to do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>The solution using <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer">dict.setdefault()</a> function(for all values):</p>
<pre><code>d = {}
for i in l:
    k = list(i.keys())[0]
    d.setdefault(k, [])
    d[k] = d[k] + i[k]

print(d)
</code></pre>
<p>The output:</p>
<pre><code>{0: [6, 1, 4, 5, 6, 3], 2: [1, 13, 15, 8, 19, 8, 1, 23, 8, 26, 23, 23, 23, 34, 39, 23, 34, 1, 1, 42, 23, 34, 24, 15, 8], 3: [5, 6, 8, 9, 0, 1, 5, 6, 13, 17, 18, 12, 2, 6, 9, 13, 15, 16, 4, 5, 6, 17, 20, 21, 22, 5, 12, 17, 20, 21, 26, 27, 2, 8, 9, 22, 26, 28, 4, 5, 6, 20, 21, 8, 1, 13, 32, 33, 16, 13, 9, 17, 20, 21, 27, 28, 32, 35, 36, 6, 9, 16, 8, 37, 38, 7, 9, 26, 27, 28, 29, 9, 22, 1, 34, 15, 25, 29, 1, 14, 20, 40, 14, 13, 41, 5, 32, 35, 36, 37, 38, 6, 21, 42]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have a rather strange data structure, but as it is written, it can be modified with the following code:</p>
<pre><code>list_of_dicts = [...]
output = dict()

for entry in list_of_dicts:
    for key in entry:
        if output.has_key(key):
            output[key].append(entry[key])
        else:
            output[key] = entry[key]
</code></pre>
<p>Note that this code does not assume every dict in the list to have only a single key, as in the general case it could be possible for each dict to contain multiple entries. Further, the code does not assume each list element to be unique, in which case a set might have been more appropriate.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why can't you store them like this?</p>
<pre><code>{
 0 : [
    [6],
    [1,4,5,6]
    ...],
 1 : ...
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well the format of that data is kind of strange, but this will probably work. I would suggest putting that data into a better structure than that though. </p>
<pre><code>def get_values(data, key=0):
     out = []
     for item in data:
         if item.get(key):
             out.extend(item[key])
     return out
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a nice function to do it:</p>
<pre><code>from itertools import chain

def find(index):
    return list(chain.from_iterable([i[index] for i in d if i.keys()==[index]]))
</code></pre>
<p>Which gives the following output:</p>
<pre><code>&gt;&gt;&gt; find(0)
[6, 1, 4, 5, 6, 3]
&gt;&gt;&gt; find(2)
[1, 13, 15, 8, 19, 8, 1, 23, 8, 26, 23, 23, 23, 34, 39, 23, 34, 1, 1, 42, 23, 34, 24, 15, 8]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the simple logical code for your problem: Hope you will find your own way out after this; Will just work perfectly in python(3)</p>
<pre><code>f = [{0: [6]},
    {0: [1, 4, 5, 6]},
    {0: [3]},
    {2: [1, 13, 15]},
    {2: [8, 19]},
    {2: [8]},
    {2: [1, 23]},
    {2: [8, 26]},
    {2: [23]},
    {2: [23]},
    {2: [23, 34]},
    {2: [39]},
    {2: [23, 34, 1]},
    {2: [1, 42]},
    {2: [23, 34]},
    {2: [24]},
    {2: [15, 8]},
    {3: [5, 6, 8, 9]},
    {3: [0]},
    {3: [1]},
    {3: [5, 6, 13, 17, 18]},
    {3: [12]},
    {3: [2, 6, 9, 13, 15, 16]}]

    c = int (input("Enter the number that you want to look for "))
    z = []
    for x in f:

        for keys , values in x.items():

            if keys==c :
                 z = z + values
    print (z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>d = {}
for i in l:
    k,v = list(i.items())[0]
    d.setdefault(k, []).extend(v)

print(d)
</code></pre>
<h1>(k,v) (0,[3]))</h1>
<h1>(k,v) (2,[1, 13, 15])</h1>
</div>
<span class="comment-copy">Your question is not clear. What do you mean by " look which values are connected to this" and "look up the different values and save all the values connected in a list"? Do you mean you want to take the given integer and create a list which is the concatenation of all lists in values that have the given integer as the key in one of your dictionaries?</span>
<span class="comment-copy">I realize it's not clear. It's exactly like you say.</span>
<span class="comment-copy">Yes, I thought the data was pretty clear. Right now I'm doing this:  list.append({type: values})</span>
<span class="comment-copy">@aze45sq6d While this works, do not call your list <code>list</code> as that is a keyword. call it <code>mylist</code></span>
<span class="comment-copy">Yes, I do that in the real code, just anted to be clear</span>
