<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/7142227/how-do-i-sort-a-zipped-list-in-python">How do I sort a zipped list in Python?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I've a <code>zip</code> object and I want to sort it(based on a specific key).</p>
<p>I've already seen <a href="https://stackoverflow.com/questions/7142227/how-do-i-sort-a-zipped-list-in-python">How do I sort a zipped list in Python?</a> but the accepted answer does not work in python 3.6 anymore.</p>
<p>For example  </p>
<pre><code>In [6]: a = [3,9,2,24,1,6]

In [7]: b = ['a','b','c','d','e']

In [8]: c = zip(a,b)

In [9]: c
Out[9]: &lt;zip at 0x108f59ac8&gt;

In [11]: type(c)
Out[11]: zip

In [12]: c.sort()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-12-a21727fa8976&gt; in &lt;module&gt;()
----&gt; 1 c.sort()

AttributeError: 'zip' object has no attribute 'sort'

# Wanted this to be sorted by the first element
In [13]: for l,r in c: print(l,r)
3 a
9 b
2 c
24 d
1 e
</code></pre>
<p>In other words how do I make the zip iteration order conform to the sorting order. 
I'm aware that converting a zip to a list of tuples will allow me to fix this, but I want to retain the zipped object (as it used to be in the good old days of python2.7)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>zip()</code> in Python 3 returns an <em>iterator</em>; the inputs are zipped as you request elements from it. Iterators are not sortable, no.</p>
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#sorted" rel="noreferrer"><code>sorted()</code> function</a> to 'draw out' the elements and return a sorted list from them:</p>
<pre><code>sorted(zip(a, b))
</code></pre>
<p>You could also convert the <code>zip()</code> object to a list by calling <code>list()</code> on it, then sort that result in-place with the <code>list.sort()</code> method, but that's then more work than just using the <code>sorted()</code> function.</p>
<p><code>sorted()</code> takes the same keyword arguments as <code>list.sort()</code> does, so you can still use the same <code>key</code> function:</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; a = [3, 9, 2, 24, 1, 6]
&gt;&gt;&gt; b = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; sorted(zip(a, b))
[(1, 'e'), (2, 'c'), (3, 'a'), (9, 'b'), (24, 'd')]
&gt;&gt;&gt; sorted(zip(a, b), key=lambda x: x[1])
[(3, 'a'), (9, 'b'), (2, 'c'), (24, 'd'), (1, 'e')]
</code></pre>
<p>Also see <a href="https://stackoverflow.com/questions/22442378/what-is-the-difference-between-sortedlist-vs-list-sort-python">What is the difference between `sorted(list)` vs `list.sort()` ? python</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can't use <code>sort</code> on zip object, <code>zip</code> object doesn't have such attribute. But, you can convert the <code>zip</code> object to a list with <code>list(zipped_object)</code> and then apply <code>sort</code> on it, to do an in-place sort. </p>
<p>But, as zipped object is also an iterable, my recommendation is to use <a href="https://docs.python.org/2/howto/sorting.html#key-functions" rel="nofollow noreferrer">sorted()</a>. It will let you write a sort function also, based on which the collection will be sorted.</p>
<p>Here, I am sorting it based on the values of <code>y</code> in each <code>(x,y)</code> pair. .</p>
<pre><code>&gt;&gt;&gt; a = [3,9,2,24,1,6]
&gt;&gt;&gt; b = ['a','b','c','d','e']
&gt;&gt;&gt; c = zip(a,b)
&gt;&gt;&gt; 
&gt;&gt;&gt; sorted(c, key = lambda x:x[1])
[(3, 'a'), (9, 'b'), (2, 'c'), (24, 'd'), (1, 'e')]
</code></pre>
<p>Note that, <code>sorted</code> will return a new sorted list, whereas <code>sort</code> will sort the collection in place. </p>
</div>
<span class="comment-copy">Well, the second answer to the linked question works in python3.</span>
<span class="comment-copy">2.7 didn't have a "zip object":  <code>zip()</code> returned a list in Python 2.  So if you changed your code to <code>c = list(zip(a,b))</code> in Python 3, it would behave exactly as it did in Python 2.</span>
<span class="comment-copy">@anoop There are other answers besides the accepted one that should solve your problem, so I'm closing this as a duplicate.</span>
