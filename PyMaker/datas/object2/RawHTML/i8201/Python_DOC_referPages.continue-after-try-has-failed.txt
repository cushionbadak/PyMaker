<div class="post-text" itemprop="text">
<p>I have a function:</p>
<pre><code>def save_to_models(all_item_tags):
    from article.models import Articles    
    for item in all_item_tags:
        newobj = Articles()
        try:
            newobj.pub_date    =item.contents[9].contents[0]
        except:
            continue
        try:
            newobj.title       =item.contents[1].contents[0]
        except:
            continue    
        try:   
            newobj.description =item.contents[5].contents[0]
        except:
            continue
        try:
            newobj.image       =get_the_picture(item.contents[7])
        except:
            continue

        newobj.save()
</code></pre>
<p>each model has <code>unique=True</code> so I'm using try, except to skip over the error I get when its trying to input a data that's already in the database. How can I condense this code? I feel like its a lot of unnecessary lines of code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Django is smart: like stated in one of the comments, it's only gonna raise an error when the <em>save()</em> method is called. Until then, <code>Article</code> is a normal Python object. What you should would look more like this :</p>
<pre><code>from psycopg2 import IntegrityError # this is the actual error raised by psycopg2 (the postgres python driver)

from article.models import Articles

for item in all_item_tags:
    try:
        new_article = Articles(
            pub_date=item.contents[9].contents[0],        
            title=item.contents[1].contents[0],
            description=item.contents[5].contents[0],
            image=get_the_picture(item.contents[7])

        new_article.save() # this is where the actual save happens
    except IntegrityError:
        # Handle the exception here
</code></pre>
<p>Another (more advanced) option is to override the <code>save()</code> method and put your logic there.</p>
<p>That said, you could also use <code>get_or_created</code> to do that. It looks like this:</p>
<pre><code>for item in all_item_tags:
    # this methods returns a boolean True of False if the object is already in the DB.
    # use your unique identifier here
    article, created = Article.objects.get_or_create(unique_id=...)

    # You can then do a classic if-else without handling any errors...
    if created: 
        # Great! The object a
    else:
        # the object exist, do something with it or not...
</code></pre>
<p>However, there are a few things I would suggest. My feeling is that you are diving into Django without really knowing Python. Django is a big beast that makes a lot of things really convenient (almost <em>magical</em>) but it's still Python. If you dive too deep and something breaks, it will be very hard for you to know what's going on. I would suggest furthering your knowledge of Python (it's an amazing language so it's gonna be fun) and then go back to Django or maybe start with a smaller framework like Flask which does less magic! For now, here's a link to the official doc on error handling so you can learn a bit more about it. Also, Django has really good <a href="https://docs.djangoproject.com/en/1.11/ref/models/" rel="nofollow noreferrer">doc</a> so I would first look there if a problem arises.</p>
<p>Cheers and happy coding!</p>
</div>
<span class="comment-copy">For one thing, <a href="http://blog.codekills.net/2011/09/29/the-evils-of--except--/" rel="nofollow noreferrer"><i>don't use bare <code>except</code></i></a> - be specific about what could go wrong. For another, if you want to suppress errors for a line and you're using Python 3.4+, see <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="nofollow noreferrer"><code>contextlib.suppress</code></a>. Also, aligning whitespace like that is not a great idea.</span>
<span class="comment-copy">The <i>unique error</i> is raised when you try to <b>save</b> a duplicate object. So, no need for all those <code>try...except</code> clauses. Just move <code>newobj.save()</code> inside a <code>try...except</code> clause.</span>
