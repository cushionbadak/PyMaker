<div class="post-text" itemprop="text">
<p>I have a python script, executing multiple commands using <code>subprocess.call()</code>. I need to pass data from a gzipped file to one of those commands using stdin, but no matter what I do, the command apparently gets the gzipped data.</p>
<p>This is what I think should work:</p>
<pre><code>import gzip
from subprocess import call

in_fname = 'test.gz'
out_fname = 'test.txt'

gz = gzip.open(in_fname, 'rb')
txt = open(out_fname, 'w')

call(['cat'], stdin=gz, stdout=txt)
</code></pre>
<p>But at the end, the <code>'test.txt'</code> is compressed and has exactly the same size as the gzipped input file.</p>
<p>If I call <code>gz.read()</code> then I get the correct decompressed data, as expected. What do I need to do to use the gzipped file as stdin?</p>
</div>
<div class="post-text" itemprop="text">
<p>After doing a bit of research, the root of the problem stems from the fact that your operating system has no idea that the filehandle for the gzipped file is anything special. Basically, <code>gzip</code> provides a "file-like" interface but the subprocess (<code>cat</code> in this case) has no idea that this is a special file that needs to be unzipped. Therefore, it just reads the file byte for byte and prints out the gibberish it reads.</p>
<p>My next idea was to read the whole file in python (which knows it's compressed and will unzip it) and then pass the string to the subprocess. I messed around with wrapping the unzipped contents in a <a href="https://docs.python.org/3/library/io.htm" rel="nofollow noreferrer"><code>StringIO</code></a> object but that turns out not to work. Another answer (<a href="https://stackoverflow.com/questions/20568107/use-stringio-as-stdin-with-popen#20568726">Use StringIO as stdin with Popen</a>) mentioned a slightly different call to <code>subprocess</code>: </p>
<pre><code>import gzip
from subprocess import Popen, PIPE

in_fname = 'test.gz'
out_fname = 'test.txt'

with gzip.open(in_fname, 'rb') as f:
  gz = f.read()
txt = open(out_fname, 'w')


process = Popen(['cat'], stdin=PIPE, stdout=txt)
process.communicate(gz)
</code></pre>
<p>Which works. Note that this requires reading the whole file into memory which may be a problem for really big files.</p>
</div>
<span class="comment-copy">Yeah, special but not special :-/ It's a bit weird / unexpected that <code>gzip</code> provides file-like object which returns the compressed data - I wonder what would be the use case for that.  Anyway, in the end I decided to simply call <code>gunzip</code> in one Popen, the other command in another Popen, and I read() from stdout of the first one and write() it to the other one.  Reading the whole file into memory is not an option for me, as the files may be quite large. Also, this way the decompression is way faster than with decompression in Python.</span>
