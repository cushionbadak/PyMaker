<div class="post-text" itemprop="text">
<p>I'm trying to use .format() to concatenate some variables in a json string</p>
<pre><code>subscription_info = '{"endpoint":"xxx","keys":{"p256dh":"xxx","auth":"xxx"}}'

send_data = '{"message":"message_test", "subscription_info": {$subscription_info} }'.format(subscription_info=subscription_info)
</code></pre>
<p>But I'm getting</p>
<pre><code>KeyError: '"message"'
</code></pre>
<p>How can I fix this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Double up the outer curly braces to avoid interpreting <code>message</code> as a format field:</p>
<pre><code>send_data = '{{"message":"message_test", "subscription_info": {subscription_info} }}'.format(subscription_info=subscription_info)
print(send_data)
# {"message":"message_test", "subscription_info": {"endpoint":"xxx","keys":{"p256dh":"xxx","auth":"xxx"}} }
</code></pre>
<p>And you don't need the <code>$</code> in your format string; a valid python indentifier is required if you must use a named field. </p>
</div>
<div class="post-text" itemprop="text">
<p>You are breaking format rules. Normally when you use format <a href="https://docs.python.org/3.4/library/string.html#format-string-syntax" rel="nofollow noreferrer">Python looks for the following</a></p>
<pre><code>"{" [field_name] ["!" conversion] [":" format_spec] "}"
</code></pre>
<p>So in your case <code>"message"</code> becomes a field_name, since <code>{</code> is before it and <code>:</code> after it. This obviously doesn't work. The <code>.format()</code> method is not meant to be used with complex, nested text structures.</p>
<p>One way is to use <a href="https://docs.python.org/3/library/string.html#template-strings" rel="nofollow noreferrer"><code>string.Template</code> together with <code>.substitute</code></a> instead:</p>
<pre><code>&gt;&gt;&gt; tmpl = string.Template('{"message":"message_test", "subscription_info": {$subscription_info} }')
&gt;&gt;&gt; tmpl.substitute(subscription_info=subscription_info)
'{"message":"message_test", "subscription_info": {{"endpoint":"xxx","keys":{"p256dh":"xxx","auth":"xxx"}}} }'
</code></pre>
<p>However it also isn't meant to be used with nested text structures.</p>
<p>Since you are using JSON then perhaps you should <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">parse and serialize the JSON</a> instead. This is the proper way to handle the problem:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; subscription_info = {"endpoint":"xxx","keys":{"p256dh":"xxx","auth":"xxx"}}
&gt;&gt;&gt; send_data = {"message":"message_test", "subscription_info": subscription_info }
&gt;&gt;&gt; json.dumps(send_data)
'{"subscription_info": {"endpoint": "xxx", "keys": {"auth": "xxx", "p256dh": "xxx"}}, "message": "message_test"}'
</code></pre>
<p>It is the cleanest and safest method.</p>
</div>
<span class="comment-copy">How are you concatenating ?</span>
