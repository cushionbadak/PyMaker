<div class="post-text" itemprop="text">
<p>I have a class or extension type written in <code>cython</code> like this:</p>
<pre><code>cdef class Self_Organized_Map:
     cdef 
     def __cinit__(self,np.ndarray data,.....):
     ....
</code></pre>
<p>I created a python module from this <code>cython</code> file (which its name is <code>som.pyx</code>) using <code>distutils</code> , then I import this in <code>python</code> and used it to create and train a model , but when I want to save my model using <code>pickle</code> it gives me this err :</p>
<blockquote>
<p>TypeError: can't pickle som.Self_Organized_Map objects</p>
</blockquote>
<p>what is wrong with pickle or my code ? does pickle cant save extension object ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since Cython 0.26 (released July 2017), cdef classes can automatically be pickled, as long as they do not contain pointers or unions. For classes containing structs, automatic pickling can be enabled with the <code>@cython.auto_pickle(True)</code> decorator. It is disabled by default due to high code overhead an other reasons.</p>
<p>More information can be found in the <a href="https://github.com/cython/cython/blob/master/CHANGES.rst#026-2017-07-19" rel="nofollow noreferrer">changelog</a> and on <a href="http://blog.behnel.de/posts/whats-new-in-cython-026.html" rel="nofollow noreferrer">the website of Stefan Behnel</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Cython classes aren't pickleable by default, so you need to implement the <a href="https://docs.python.org/3/library/pickle.html#pickle-inst" rel="nofollow noreferrer">Pickle interface</a> yourself. There's a number of different levels you can do this on but <code>__getstate__</code> and <code>__setstate__</code> is the most user-friendly level so it's a good place to start unless you have good reasons otherwise.</p>
<p>Where the contents of the class are pickleable it's as easy as returning a tuple of them in <code>__getstate__</code> and the reverse operation in <code>__setstate__</code>. Memoryviews themselves aren't pickleable, but have a <code>base</code> attribute that may be.</p>
<pre><code>cdef class C:
    cdef double[:] array
    cdef python_obj
    cdef int integer

    def __init__(self,array,python_obj,integer):
        self.array = array
        self.python_obj = python_obj
        self.integer = integer

    def __getstate__(self):
        return (self.array.base, # memoryviews aren't pickleable, need to get underlying object
                          # and hope it's pickleable
                self.python_obj, self.integer)

    def __setstate__(self,x):
        self.array, self.python_obj, self.integer = x
</code></pre>
<p>If your class holds a C or C++ object then it's much more complicated. For simple types good places to start are just copy the memory into a bytearray or to take advantage of Cython's default <code>struct&lt;-&gt;dict</code> interconversion. However if the class contains pointers then this won't work and you need to implement a reliable load/save mechanism for it in C/C++.</p>
</div>
<span class="comment-copy">There's quite a bit of documentation and previous questions that it doesn't look like you've read: such as <a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer">docs.python.org/3/library/…</a> ([extension types don't define a <code>__dict__</code> by default}(<a href="http://cython.readthedocs.io/en/latest/src/reference/extension_types.html#attributes" rel="nofollow noreferrer">cython.readthedocs.io/en/latest/src/reference/…</a>)). A few relevant previous questions: <a href="http://stackoverflow.com/questions/12646436/pickle-cython-class">stackoverflow.com/questions/12646436/pickle-cython-class</a> <a href="http://stackoverflow.com/questions/36301322/pickle-cython-class-with-c-pointers" title="pickle cython class with c pointers">stackoverflow.com/questions/36301322/…</a></span>
<span class="comment-copy">Also, your title mentions pointers, but your code doesn't show any. Perhaps clarify?</span>
<span class="comment-copy">@DavidW thanks I corrected it !</span>
