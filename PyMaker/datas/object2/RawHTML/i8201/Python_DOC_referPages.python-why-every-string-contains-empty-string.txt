<div class="post-text" itemprop="text">
<p>"ABCDE" msut have no empty character. But when I type</p>
<pre><code>"" in "ABCDE"
</code></pre>
<p>Python interprater will return a TRUE result.</p>
<p>Why?</p>
<p>is there any empty character in "ABCDE"? I don't think so.</p>
<p>And I also found when I use these code:</p>
<pre><code> target = ''
 src = 'ABCDE'
 src.find(target)
</code></pre>
<p>returns 0 instead of -1</p>
<p>any one please tell me the reason with thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>For people with background in languages where string objects represented as arrays of characters it may be surprising, but if we try to follow such approach like</p>
<pre><code>string = 'ABCDE'
characters_list = list(string)
</code></pre>
<p>then</p>
<pre><code>'' in characters_list
</code></pre>
<p>will be <code>False</code> statement.</p>
<p>Empty string probably came from <a href="https://en.wikipedia.org/wiki/Empty_string" rel="nofollow noreferrer">mathematics</a>, where it is a neutral element for binary operation of <a href="https://en.wikipedia.org/wiki/Concatenation" rel="nofollow noreferrer">string concatenation</a>, i. e. for every string <code>a</code></p>
<pre><code>a + empty_string == empty_string + a == a
</code></pre>
<p>where <code>+</code> is a string concatenation symbol. Then "<em>substringing</em>" can be defined as follows:</p>
<ul>
<li><p>for every strings <code>a</code>, <code>b</code> we say <code>a</code> <em>is substring of</em> <code>b</code> iff exists strings <code>c</code>, <code>d</code> such that</p>
<pre><code>b == c + a + d
</code></pre></li>
</ul>
<p>Let's denote <code>a</code> <em>is substring of</em> <code>b</code> as <code>a in b</code>.</p>
<p>With these definitions of <em>empty string</em> and <em>sustringing</em> relation can be proved lemma</p>
<ul>
<li><p><code>empty_string</code> is a substring of any string <code>a</code>:</p>
<pre><code>a == (definition of empty_string) == empty_string + a == 
== (definition of empty_string) == empty_string + empty_string + a
</code></pre>
<p>then if we define <code>c = empty_string</code> and <code>d = a</code>:</p>
<pre><code>a == c + empty_string + d
</code></pre>
<p>and by definition <code>empty_string in a</code>.</p></li>
</ul>
</div>
<span class="comment-copy">What do you mean by "an empty character"? How many characters do you think the string <code>""</code> contains?</span>
<span class="comment-copy"><code>''</code> is even <code>in ''</code>â€¦ What are you actually trying to test? Whether your string contains a space? Or is longer than 0 characters?</span>
<span class="comment-copy">because <code>'ABCDE'</code> can be represented as <code>'' + 'ABCDE'</code>, than first occurence of empty string is zero position</span>
<span class="comment-copy">@BingSun, an "empty string" makes sense. An "empty <i>character</i>" is meaningless. In fact the empty string <i>is</i> a substring (in fact, is <i>many</i> substrings) of any string. Try <code>'foo'[0:0]</code>, <code>'foo'[1:0]</code>, etc. The empty string <i>can in fact</i> be found in the string <code>'ABCDE'</code>. <a href="https://docs.python.org/3/reference/expressions.html#membership-test-details" rel="nofollow noreferrer">The documentation</a> is quite clear about this as well.</span>
<span class="comment-copy">I would classify this as <i>undefined operation</i>. If you're trying to ask <i>"can <code>''</code> fit into the string <code>x</code>"</i>, then the answer is <i>yes</i>, since you can insert <code>''</code> at any point in any string without changing it, so you can arguably <i>find</i> it in any string, so any string <i>contains</i> a <code>''</code>. You could argue the exact opposite as well. There is no way to <i>represent</i> <code>''</code> inside a string. A string can <i>be</i> <code>''</code>, a string cannot <i>contain</i> <code>''</code>. Bottom line: <code>'' in '...'</code> simply makes no real sense and there's no particular correct answer I'd expect out of it.</span>
