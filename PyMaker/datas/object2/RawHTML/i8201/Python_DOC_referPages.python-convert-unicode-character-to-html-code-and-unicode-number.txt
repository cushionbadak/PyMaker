<div class="post-text" itemprop="text">
<p>Here is what I ultimately want:</p>
<p>A dictionary that holds unicode chars as keys and html code + unicode number as list values. </p>
<pre><code>Basic_Latin = {
        ...
        "@": ["U+0040", "&amp;#64;"],
        ...
        }
</code></pre>
<p>How can this be achieved if only the key is given?</p>
<p>I think of something like this:</p>
<pre><code>Basic_Latin = {
        ...
        "@": [to_unicode(@), to_html(@)],
        ...
        }
</code></pre>
<p>If find a lot of methods for converting the other way round, but not for what I am looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>All that the notations contain is the hexadecimal and decimal value for the Unicode codepoint of the character. That value can easily be obtained by using the <a href="https://docs.python.org/3/library/functions.html#ord" rel="nofollow noreferrer"><code>ord()</code> function</a>, then formatting the resulting integer:</p>
<pre><code>codepoint = ord('@')
unicode_codepoint = 'U+{:04X}'.format(codepoint)  # four-digit uppercase hex
html_escape = '&amp;#{:d};'.format(codepoint)         # decimal number
</code></pre>
<p>or as a function:</p>
<pre><code>def codepoints(c):
    codepoint = ord(c)
    return ('U+{:04X}'.format(codepoint), '&amp;#{:d};'.format(codepoint))
</code></pre>
<p>The function returns a tuple rather than a list; presumably this doesn't need to be mutable after all. You probably want to consider using a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code> class</a> so you can also use attribute access.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def codepoints(c):
...     codepoint = ord(c)
...     return ('U+{:04X}'.format(codepoint), '&amp;#{:d};'.format(codepoint))
...
&gt;&gt;&gt; codepoints('@')
('U+0040', '&amp;#64;')
</code></pre>
</div>
<span class="comment-copy">Many thanks, that's a very cool solution! :D</span>
