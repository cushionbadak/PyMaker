<div class="post-text" itemprop="text">
<p>Background: The <a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_types.h.html" rel="nofollow noreferrer">POSIX-defined</a> <code>off_t</code> data type is a signed integer of <a href="http://pubs.opengroup.org/onlinepubs/009695399/utilities/c99.html#tag_04_12_13_03" rel="nofollow noreferrer">variable-size depending on the environment</a>.  For 64-bit build environments it seems to be consistently a 64-bit off_t.  For 32-bit systems the size of off_t depends on the environment (usually controlled with _FILE_OFFSET_BITS and related).</p>
<p>I'm using Python's <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes</a> to access some library calls for functions that use the <code>off_t</code> data type.  <strong>ctypes</strong> does not have a type for <code>off_t</code> so mapping such an API via a <a href="https://docs.python.org/3.6/library/ctypes.html#ctypes.Structure" rel="nofollow noreferrer">Structure</a> or otherwise requires choosing some other types that <em>are</em> defined by <strong>ctypes</strong>, namely one of <code>c_int</code>, <code>c_int32</code>, <code>c_int64</code>, <code>c_long</code> and <code>c_longlong</code>.</p>
<p>In searching around for solutions by others I've seen all sorts, most of them guesses and limited to one of the environments, some of them flat-out wrong (using an unsigned type) and none of them portable.</p>
<p><strong>Is there a robust, portable way to determine the size of <code>off_t</code> for the build of a given Python interpreter?</strong></p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no support for this in a standard, and as you yourself point out, it is going to vary on 32 bit machines based on the flags that were used to compile the <em>library,</em> not Python. (That is, you need to know if the library routines you are using were compiled with -D_FILE_OFFSET_BITS=64 or not...)</p>
<p>GCC seems to define <code>off_t</code> as <code>long int</code> pretty consistently. So that's probably the "safest" choice. Or you could just go with 64 bits by default. In either case, an option to override the behavior and specify the number of bits might be valuable.</p>
<p>Is there a function you can call that will return an <code>off_t</code>? Maybe you could fill a buffer with 0xFF, then <code>seek(0)</code> and <code>ftell()</code> to see how many zeroes get written?</p>
</div>
<span class="comment-copy">Yes, it is the <i>library</i> build that counts.  Since the library I'd like to use is already being interfaced in Python and presumably built in a matching environment I was hoping such information would be more accessible and enough.  Sorry I left that bit out.</span>
<span class="comment-copy">Unfortunately, there is no function or definition to report the sizeof off_t for the library.  A survey of libraries commonly accompanying Python (tiff,zlib,HDF5) shows that they have ways to do exactly that.  Now I know why.  I'll pursue getting this added to the library in question as a future fix.  Thanks for thinking of a potential workaround, in fact there is a function that returns off_t, a kludge but maybe it can be used as you suggest.</span>
