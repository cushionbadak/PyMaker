<div class="post-text" itemprop="text">
<p>I am catching two exceptions in Python in such way:</p>
<pre><code>#ex1
try: 
    #some code
except:
    #some code to e.g. print str

#ex2
try: 
    #some code
except: 
    #some code to e.g. print str or exit from the program.
</code></pre>
<p>if ex1 raises an exception then I want to skip ex2.
if ex1 does not raise an exception the I want to try ex2.</p>
<p>What is the most elegant way to code it?</p>
<p>My current approach is to wrap it in a function block as below and use return in right place:</p>
<pre><code>def myExceptions(someArgs):
    #ex1
    try: 
        #some code
    except:
        #some code
        return

    #ex2
    try: 
        #some code
    except: 
        #some code
</code></pre>
<p>and then I just call the function in right place myExceptions(someArgs)</p>
</div>
<div class="post-text" itemprop="text">
<p>EDIT: This will work as you described:</p>
<pre><code>try:
    msg = make_msg_fancy(msg)
    msg = check_for_spam(msg)
except MessageNotFancyException:
    print("couldn't make it fancy :(")
except MessageFullOfSpamException:
    print("too much spam :(")
</code></pre>
<p>When an exception occurs, it skips the rest of the try block and continues at the exception... it doesn't go back.</p>
<hr/>
<p>You are doing something like this:</p>
<pre><code>for person in [{"dog": "Henry"}, {}, {"dog": None}]:
    try:
        doggo = person['dog']  # can throw KeyError
    except KeyError:
        print("Not a dog person")
        continue  # skip the rest of the loop (since this is a for loop)

    try:
        print(doggo.upper())  # can throw AttributeError
    except AttributeError:
        print("No doggo :(")
</code></pre>
<p>A better way is, as Christian suggested:</p>
<pre><code>for person in [{"dog": "Henry"}, {}, {"dog": None}]:
    try:
        doggo = person['dog']  # can throw KeyError
        print(doggo.upper())  # can throw AttributeError
    except KeyError:  # person dict does not contain a "dog"
        print("Not a dog person")
    except AttributeError:  # dog entry cannot be .upper()'d
        print("invalid doggo :(")
</code></pre>
<p>Both of which output:</p>
<pre><code>HENRY
Not a dog person
invalid doggo :(
</code></pre>
<p>Note this will skip the second set of lines automatically if the first set fails, and lets you do different things based upon which exception occurred.</p>
<p>I think you're confused. After a <code>KeyError</code> above, execution continues after the <code>except</code> blocks. The rest of the <code>try:</code> is skipped, which is what you seem to want:</p>
<p>That's why I can do:</p>
<pre><code>try:
    dct[key] += value
    print("Added.")
except KeyError:
    dct[key] = value
    print("New key.")
</code></pre>
<p>Only one of those prints will happen.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/tutorial/errors.html#" rel="nofollow noreferrer">Python allows you to use multiple exception clause in your <code>try/except</code> statements</a>. Add all of your code from the two try blocks into one, and simply use two except clause to catch both potentially errors:</p>
<pre><code>try: 
    #some code
except:
    #some code to e.g. print str
except: 
    #some code to e.g. print str or exit from the program.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this? However, in you should usually be more specific with exceptions, see here: <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html</a>
for example, use "except ValueError" to only except that one type of error.</p>
<pre><code>try:
    # ex1 code
except:
    # handle the exception
else:
    # ex2 code, will only run if there is no exception in ex1
</code></pre>
</div>
<span class="comment-copy">You can have multiple <code>except:</code> clauses for different exceptions for the same try block, there's no need for all these shenanigans. See <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html</a></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block">Catch multiple exceptions in one line (except block)</a></span>
<span class="comment-copy">Also, <a href="https://docs.python.org/2/howto/doanddont.html#except" rel="nofollow noreferrer">"using a bare <code>except:</code> is almost never a good idea"</a>.</span>
<span class="comment-copy">Both try blocks do not have the same code hence why two separate try block with once excepction each.</span>
<span class="comment-copy">I feel like his question includes the answer to your question as an example.</span>
<span class="comment-copy">I do as follows: for person in [...]: try: run a function with msg as an input and if function errors then raise user defined exception. next below I do another try: run another function with msg as an input and if function errors then raise user defined exception. If first try raises an exception then do not execute 2nd try block. if 1st try block does not raise an exception then do execute 2nd try block. Does it sound similar to what you have described?</span>
<span class="comment-copy">@bluedog update your question if you want to add more detail</span>
<span class="comment-copy">@BlueDog this will work for you if you implement it as we've said.</span>
<span class="comment-copy">I raise two separate exceptions for two separate try block because both try blocks have different code. So I do not raise two various exceptions for same try block as per your example.</span>
<span class="comment-copy">@BlueDog You don't need to separate try blocks. If you want to skip all the code on the first exception, there is no reason to have two blocks.</span>
<span class="comment-copy">@BlueDog but that will happen by itself. When the exception is thrown, controls passes to the relevant exception handler, skipping remaining statements in the try block. If a statement in the try block doesn't raise an exception, execution simply continues.</span>
<span class="comment-copy">@BlueDog What does 'ex1 try block exceptions' mean? If ex1 throws an exception, the exception handler runs and statements between the exception handler and the throw location are simply skipped. It makes no difference what the exception handler actually does</span>
<span class="comment-copy">@BlueDog oh and if you think the handlers will somehow be executed in sequence, no that is not the case. no matter what the individual handler does, only one handler will be called. You don't just drop down and start executing the next one. I think you should just try some of the examples people have posted for yourself. At this point you seem to be trying to explain to us that Python works the way you've misunderstood it to work.</span>
<span class="comment-copy">This looks like the most reasonable answer to me. This is what I thought originaly but I do not know what is better: such way od coding or wrapping all in one function block.</span>
<span class="comment-copy">This isn't equivalent since it never handles exceptions raised by the 'ex2 code'.</span>
