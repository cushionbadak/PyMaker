<div class="post-text" itemprop="text">
<p>I am looking for a pythonic way to replace substrings in a string, similar to re.sub, but with additional processing of the found text. It can probably be achieved with pure regular expression syntax, but it very quickly becomes unreadable, which is worse than simple—really hard to extend/debug.</p>
<p>This is what I need to achieve:</p>
<p>Input string: <code>text1 (2, 100) text2 (34,23) text3</code></p>
<p>Output: Same string, but <code>(2, 100)</code> wrapped into an HTML code using values 12 and 14; same for <code>(34, 23)</code>. Something like:</p>
<pre><code>text1 &lt;span data-coord='{"x": 0.02, "y": 1}'&gt;(2, 100)&lt;/span&gt;
text2 &lt;span data-coord='{"x": 0.34, "y": 0.23}'&gt;(34, 23)&lt;/span&gt; 
text3
</code></pre>
<p>Iteration through matches with <code>re.finditer</code> seems a logical solution, but how do I get the rest of the text?</p>
<p>EDIT: Numbers may be one- to three-digit ones, between 0 and 100.</p>
<p>FOOTNOTE: I'd really prefer to have a solution where the found groups for x and y are an input to my custom function, to have a complete freedom of what to do with the found groups. E.g. to do error processing: in case the number is outside the range of 0...100, I may want to highlight it with red. I am sure I can define that behaviour in terms of regex as well, but I find it wrong: regex is for text processing, not number manipulation. And it obscures the logic of the code.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use</p>
<pre><code>import re

rx = re.compile(r'\((?P&lt;x&gt;\d+),\s*(?P&lt;y&gt;\d+)\)')

# before
string = "text1 (12, 14) text2 (34,23) text3"

def convert(match):
    return '''&lt;span data-coord='{{"x": 0.{}, "y": 0.{}"}}'&gt;{}&lt;/span&gt;'''.format(
            match.group('x'),
            match.group('y'),
            match.group(0)
    )

string = rx.sub(convert, string)

print(string)
# text1 &lt;span data-coord='{"x": 0.12, "y": 0.14"}'&gt;(12, 14)&lt;/span&gt; 
# text2 &lt;span data-coord='{"x": 0.34, "y": 0.23"}'&gt;(34,23)&lt;/span&gt;
# text3
</code></pre>
<p>Effectively using a <code>convert</code> function in combination with <code>.format()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The regex is pretty simple:</p>
<pre><code># two one or more digits separated by comma and none or more spaces, wrapped in parenthesis
\((\d+),\s*(\d+)\)
</code></pre>
<p>Then you can use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> with grouping:</p>
<pre><code>&gt;&gt;&gt; re.sub(r'\((\d+),\s*(\d+)\)', r'''&lt;span data-coord='{"x": 0.\g&lt;1&gt;, "y": 0.\g&lt;2&gt;}'&gt;(\g&lt;1&gt;, \g&lt;2&gt;)&lt;/span&gt;''', text)
text1 &lt;span data-coord='{"x": 0.12, "y": 0.14}'&gt;(12, 14)&lt;/span&gt; text2 &lt;span data-coord='{"x": 0.34, "y": 0.23}'&gt;(34, 23)&lt;/span&gt; text3
</code></pre>
</div>
<span class="comment-copy">I think this is exactly what I've been looking for. This use of function instead of replacement pattern is new to me, I missed it in the documentation. Will check and get back.</span>
<span class="comment-copy">@Jan,  Eric means that sin is a function while sin(90°) is a number (1), not a function. Though it's a really fine detail in this context, I actually appreciate his remark. I am trying to improve my knowledge and it's good to highlight the use of functions as arguments.</span>
<span class="comment-copy">@texnic: Exactly. Jan: thanks for the change, your answer is fine!</span>
<span class="comment-copy">Nice solution, still quite simple. So I may change my mind about leaving the regex world. But please see my edit of the question. I wonder how it could be incorporated.</span>
