<div class="post-text" itemprop="text">
<p>This is the contents of <code>script_one.py</code>:</p>
<pre><code>x = "Hello World"
</code></pre>
<p>This is the contents of <code>script_two.py</code>:</p>
<pre><code>from script_one import x
print(x)
</code></pre>
<p>Now, if I ran <code>script_two.py</code> the output would be:</p>
<pre><code>&gt;&gt;&gt; Hello World
</code></pre>
<p>What I need is a way to detect if <code>x</code> was imported.<br/>
This is what I imagine the source code of <code>script_one.py</code> would look like:</p>
<pre><code>x = "Hello World"
if x.has_been_imported:
  print("You've just imported \"x\"!")
</code></pre>
<p>Then if I ran <code>script_two.py</code> the output <em>"should"</em> be:</p>
<pre><code>&gt;&gt;&gt; Hello World
&gt;&gt;&gt; You've just imported "x"!
</code></pre>
<p>What is this called, does this feature exist in Python 3 and how do you use it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't. Effort expended on trying to detect this are a waste of time, I'm afraid.</p>
<p>Python imports consist of the following steps:</p>
<ul>
<li>Check if the module is already loaded by looking at <code>sys.modules</code>.

<ul>
<li>If the module hasn't been loaded yet, load it. This creates a new module object that is added to <code>sys.modules</code>, containing all objects resulting from executing the top-level code.</li>
</ul></li>
<li>Bind names in the importing namespace. How names are bound depends on the exact <code>import</code> variant chosen.

<ul>
<li><code>import module</code> binds the name <code>module</code> to the <code>sys.modules[module]</code> object</li>
<li><code>import module as othername</code> binds the name <code>othername</code> to the <code>sys.modules[module]</code> object</li>
<li><code>from module import attribute</code> binds the name <code>attribute</code> to the <code>sys.modules[module].attribute</code> object</li>
<li><code>from module import attribute as othername</code> binds the name <code>othername</code> to the <code>sys.modules[module].attribute</code> object</li>
</ul></li>
</ul>
<p>In this context it is important to realise that Python names are just references; all Python objects (including modules) live on a heap and stand or fall with the number of references to them. See this <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">great article by Ned Batchelder on Python names</a> if you need a primer on how this works.</p>
<p>Your question then can be interpreted in two ways:</p>
<ul>
<li>You want to know the module has been imported. The moment code in the module is executed (like <code>x = "Hello World"</code>), it has been imported. All of it. Python doesn't load <em>just</em> <code>x</code> here, it's all or nothing.</li>
<li>You want to know if other code is using a specific name. You'd have to track what other references exist to the object. This is a mammoth task involving recursively checking the <a href="https://docs.python.org/3/library/gc.html#gc.get_referrers" rel="nofollow noreferrer"><code>gc.get_referrers()</code> object chain</a> to see what other Python objects might now refer to <code>x</code>.</li>
</ul>
<p>The latter goal is made the harder all the further in any of the following scenarios:</p>
<ul>
<li><code>import script_one</code>, then use <code>script_one.x</code>; references like these could be too short-lived for you to detect.</li>
<li><code>from script_one import x</code>, then <code>del x</code>. Unless something else still references the same string object within the imported namespace, that reference is now gone and can't be detected anymore.</li>
<li><code>import sys; sys.modules['script_one'].x</code> is a legitimate way of referencing the same string object, but does this count as an import?</li>
<li><code>import script_one</code>, then <code>list(vars(script_one).values())</code> would create a list of all objects defined in the module, but these references are indices in a list, not named. Does this count as an import?</li>
</ul>
</div>
<span class="comment-copy">What if you had written <code>import script_one</code> instead?</span>
<span class="comment-copy">So what problem are you trying to solve? Python imports <b>whole modules</b>, and then binds additional names to the same objects in the module. You'd have to track reference counts, and that's not reliable at all.</span>
<span class="comment-copy">You'd have to determine the import success within the module that does the importing, not detect if a module was called by an import statement</span>
