<div class="post-text" itemprop="text">
<p>This is what I want to achieve:</p>
<pre><code># first way to call. key value pair, where value could be anything.
def multiple_ways_to_call(key_param, value_param, optional = "optional"):
    pass

# second way to call. object_param is an instance of a specific class. type(object_param) == "myclass"
def multiple_ways_to_call(object_param, optional = "optional"):
    pass
</code></pre>
<p>I know function overloading isn't actually supported. I've done it before by just checking if last argument was null or not, but i'm not sure how to do it now that I have optional parameters. </p>
<p>How can I handle this scenario? I just the difference to be invisible to the caller.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is the <code>@singledispatch</code> decorator in the <code>functools</code> module that was added in Python 3.4 - see <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow noreferrer">Python Single Dispatch</a>.</p>
<p>If you are on earlier versions of Python this was back ported and <a href="https://pypi.python.org/pypi/singledispatch" rel="nofollow noreferrer">is available on PYPI</a>.</p>
<p>The <code>@singledispatch</code> only differentiates based on the type of the first argument given to the function, so it is not as flexible as in some other languages.</p>
<p>Example from the docs:</p>
<pre><code>from functools import singledispatch
@singledispatch
def fun(arg, verbose=False):
    if verbose:
        print("Let me just say,", end=" ")
    print(arg)

@fun.register(int)
def _(arg, verbose=False):
    if verbose:
        print("Strength in numbers, eh?", end=" ")
    print(arg)

@fun.register(list)
def _(arg, verbose=False):
    if verbose:
        print("Enumerate this:")
    for i, elem in enumerate(arg):
        print(i, elem)
</code></pre>
</div>
<span class="comment-copy">How would you distinguish the key, value case from the object, optional case?</span>
<span class="comment-copy">I made a slight typo originally. type(object_param) will always be something specific</span>
<span class="comment-copy">I tried this, but got errors about "myclass" being mutable, so they can't be hashed</span>
<span class="comment-copy">In the <code>@fun.register(thing)</code> did you pass in the class or an instance of the class?  It needs to be the class.</span>
