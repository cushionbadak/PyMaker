<div class="post-text" itemprop="text">
<p>How to have get the logger in <code>auxiliary_module.py</code> to log to the logger in <code>main.py</code>?
The below example is an adaptation of <a href="https://docs.python.org/3/howto/logging-cookbook.html#using-logging-in-multiple-modules" rel="nofollow noreferrer">Python's documentation</a>.</p>
<p>Assuming a model structure such as:</p>
<pre><code>module
 |---main.py
 |---auxiliary_module.py
</code></pre>
<p>The file <code>main.py</code> looks like this:</p>
<pre><code>import logging
import auxiliary_module

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

fh = logging.FileHandler('spam.log')
fh.setLevel(logging.DEBUG)

ch = logging.StreamHandler()
ch.setLevel(logging.ERROR)

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
ch.setFormatter(formatter)

logger.addHandler(fh)
logger.addHandler(ch)

logger.info('creating an instance of auxiliary_module.Auxiliary')
a = auxiliary_module.Auxiliary()
logger.info('created an instance of auxiliary_module.Auxiliary')
logger.info('calling auxiliary_module.Auxiliary.do_something')
a.do_something()
logger.info('finished auxiliary_module.Auxiliary.do_something')
</code></pre>
<p>Whereas <code>auxiliary_module.py</code> looks like this:</p>
<pre><code>import logging

module_logger = logging.getLogger(__name__)

class Auxiliary:
    def __init__(self):
        self.logger = logging.getLogger(__name__+'.Auxiliary')
        self.logger.info('creating an instance of Auxiliary')

    def do_something(self):
        self.logger.info('doing something')
        a = 1 + 1
        self.logger.info('done doing something')
</code></pre>
<p>This is how the log looks like after running <code>main.py</code> (which creates a class instance and calls a method):</p>
<pre><code>2017-04-26 13:22:00,897 - __main__ - INFO - creating an instance of auxiliary_module.Auxiliary
2017-04-26 13:22:00,897 - __main__ - INFO - created an instance of auxiliary_module.Auxiliary
2017-04-26 13:22:00,897 - __main__ - INFO - calling auxiliary_module.Auxiliary.do_something
2017-04-26 13:22:00,897 - __main__ - INFO - finished auxiliary_module.Auxiliary.do_something
</code></pre>
<p>How to configure <code>auxiliary_module.py</code> to use the logger in <code>main.py</code>? That is, if the logger in <code>main.py</code> is configures to use a certail format and handlers, how to get <code>auxiliary_module.py</code> to use the same configuration? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply give a name to <code>logging.getLogger()</code> that is used by both modules, e.g. <code>logger = logging.getLogger('my-logger')</code></p>
</div>
<span class="comment-copy">Could just import the logger from <code>auxiliary_module</code>, i.e. <code>from module.main import logger</code>.</span>
<span class="comment-copy">When I do that, the logger name is still configured as <code>__main__</code> instead of the module name/class which the log came from</span>
<span class="comment-copy">If you are executing the <code>main.py</code> file directly its <code>__name__</code> will be <code>'__main__'</code>.</span>
<span class="comment-copy">Maybe I am doing logging completely wrong. The objective is to set a global logging configuration and to log to that, however to also be able to identify which file/module the event came from/was called from</span>
<span class="comment-copy">If you declare your project as a proper <a href="https://python-packaging.readthedocs.io/en/latest/" rel="nofollow noreferrer">python package</a> and also a proper <a href="https://python-packaging.readthedocs.io/en/latest/command-line-scripts.html#the-console-scripts-entry-point" rel="nofollow noreferrer">entry point</a> then the module names for your project will be set up correctly.</span>
<span class="comment-copy">Why doesn't <code>__main__</code> in the example populate with <code>auxiliary_module</code> in the example above? And why doesn't the <code>auxiliary_module</code> logger log to the main logger?</span>
<span class="comment-copy">You're using <b>name</b> to get a logger from each file. In <code>main.py</code>, <code>__name__</code> will be <code>__main__</code>. In <code>auxiliiary_module.py</code>, <code>__name__</code> will be <code>auxiliary_module</code>. You are thus explicitly asking for two <i>different</i> loggers.</span>
<span class="comment-copy">So the logger needs to be specified (handlers, formatters, etc) in each module? Is there a way to set logger configuration for all loggers on a global level?</span>
<span class="comment-copy">No, you can configure the logger once and have other loggers attach to it by name (as in my example). You can also dynamically add loggers to the root logger, child loggers, basically anything. Logging is a strangely complicated concept in Python, and the best resource is the official Python documentation.</span>
<span class="comment-copy">Thank you, that cleared things up. Concur that logging could be made simpler.</span>
