<div class="post-text" itemprop="text">
<p>I'm working on a new project but I can't fix the error in the title.</p>
<p>Here's the code:</p>
<pre><code>#!/usr/bin/env python3.5.2

import urllib.request , urllib.parse


def start(url):
    source_code = urllib.request.urlopen(url).read()
    info = urllib.parse.parse_qs(source_code)
    print(info)


start('https://www.youtube.com/watch?v=YfRLJQlpMNw')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error occurred because of .encode which works on a unicode object. So we need to convert the byte string to unicode string using       </p>
<pre><code>.decode('unicode_escape')
</code></pre>
<p>So the code will be:</p>
<pre><code>#!/usr/bin/env python3.5.2

import urllib.request , urllib.parse


def start(url):
    source_code = urllib.request.urlopen(url).read()
    info = urllib.parse.parse_qs(source_code.decode('unicode_escape'))
    print(info)


start('https://www.youtube.com/watch?v=YfRLJQlpMNw')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this</p>
<pre><code>source_code = urllib.request.urlopen(url).read().decode('utf-8')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error message is self explainatory: there is a byte 0xf0 in an input string that is expected to be an ascii string.</p>
<p>You should have given the exact error message and on what line it happened, but I can guess that is happened on <code>info = urllib.parse.parse_qs(source_code)</code>, because <code>parse_qs</code> expects either a unicode string or an ascii byte string.</p>
<p>The first question is why you call <code>parse_qs</code> on data coming from youtube, because the doc for the Python Standart Library says:</p>
<blockquote>
<p>Parse a query string given as a string argument (data of type application/x-www-form-urlencoded). Data are returned as a dictionary. The dictionary keys are the unique query variable names and the values are lists of values for each name.</p>
</blockquote>
<p>So you are going to parse this on <code>=</code> and <code>&amp;</code> character to interpret it as a query string in the form <code>key1=value11&amp;key2=value2&amp;key1=value12</code> to give <code>{ 'key1': [ 'value11', 'value12'], 'key2': ['value2']}</code>.</p>
<p>If you know why you want that, you should first decode the byte string into a unicode string, using the proper encoding, or if unsure <code>Latin1</code> which is able to accept any byte:</p>
<pre><code>def start(url):
    source_code = urllib.request.urlopen(url).read().decode('latin1')
    info = urllib.parse.parse_qs(source_code)
    print(info)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This code is rather weird indeed. You are using query parser to parse contents of a web page.
So instead of using parse_qs you should be using something like <a href="https://docs.python.org/3/library/html.parser.html" rel="nofollow noreferrer">this</a>.</p>
</div>
<span class="comment-copy">thank you sir it works perfectly</span>
<span class="comment-copy">thank you so much, it works</span>
