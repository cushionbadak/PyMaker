<div class="post-text" itemprop="text">
<p>I have a list of object named person with id and their countries:</p>
<pre><code>class Person(object):
    def __init__(self, id, country):
        self.id = str(id)
        self.country = str(country)
</code></pre>
<p>The list looks like the below, where id is just UUID and country being country codes, I have sorted them by country:</p>
<pre><code>('7e569521-69fe-4ccf-a898-254bd758bff0', 'AF')
('c6b45478-6901-4a22-aab8-7167397d4b13', 'AF')
('15aee743-a1b1-4a77-b93b-17786c8c8fab', 'AF')
('7ef1efd3-6b77-4dfe-b133-035eff76d7f6', 'AF')
('95880e05-9984-48e3-a60a-0cf52c2915ae', 'AG')
('620862a0-e888-4b20-8057-085122226050', 'AL')
('ed0caf58-e132-48ad-bfca-8a4df2b0c351', 'AL')
('730cf6ba-0981-4a0b-878e-5df0ebedaa99', 'AM')
('93f87a3d-d618-4e9a-9f44-4a1d0bc65bdc', 'AM')
</code></pre>
<p>Now I would like to split them into different lists by country.</p>
<p>This is what I am doing now:</p>
<pre><code>prev_country = ""
person_data_country = []

for person in persons_data:

    if prev_country != person.country:
        if len(person_data_country) &gt; 0:
            # do something with this new list by country

            # clear them    
            person_data_country = []

    # append item to new list
    person_data_country.append(person)
    prev_country = person.country

# last list, if any
if len(person_data_country) &gt; 0:
    # do something with this new list by country
</code></pre>
<p>I get what I want with the above codes.</p>
<p>But I would like to know if there is a better or more efficient way to split the list according to country?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.groupby</code> (<a href="https://docs.python.org/3.6/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">https://docs.python.org/3.6/library/itertools.html#itertools.groupby</a>) to achieve what you want:</p>
<pre><code>from itertools import groupby
grouped_data = groupby(persons_data, key=lambda x: x[1])  # or x.country, depending on your input list
for country, items in grouped_data:
    # do whatever you want
</code></pre>
<p>There are a few gotchas to keep in mind:</p>
<ol>
<li><code>groupby</code> returns an iterator, so you can only iterate over it once.</li>
<li>the <code>items</code> in my example above is an iterator, too.  So you'll need to cast it to a list if you want to access the individual items by index later.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a>. Given <code>persons_data</code> is already sorted by country, the following code does what you want:</p>
<pre><code>import itertools
import operator

bycountry = operator.attrgetter("country")

all_people_by_country = []

for country, groupiter in itertools.groupby(persons_data, bycountry):
    all_people_by_country.append(list(groupiter))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another approach to consider if I'm understanding you correctly:</p>
<pre><code>from collections import defaultdict
persons = [
    Person('one', 'AF'),
    Person('two', 'AF'),
    Person('three', 'AG')
]
persons_by_country = defaultdict(list)
for person in persons:
    persons_by_country[person.country].append(person.id)
</code></pre>
<p>Or if you want to avoid <code>defaultdict</code> for some reason,</p>
<pre><code>persons_by_country = {}
for person in persons:
    if person.country in persons_by_country:
        persons_by_country[person.country].append(person.id)
    else:
        persons_by_country[person.country] = [person.id]
</code></pre>
<p>Either way, the result would be:</p>
<pre><code>{'AG': ['three'], 'AF': ['one', 'two']}
</code></pre>
<p>Main downside to this is that all of the data is stored in memory twice.</p>
</div>
