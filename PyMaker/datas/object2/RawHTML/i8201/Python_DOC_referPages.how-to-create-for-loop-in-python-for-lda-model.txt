<div class="post-text" itemprop="text">
<p>I need some help creating a for loop in Python.  I am a complete coding novice.  Please point me in the right direction.</p>
<p>Here's what I have done so far.  I have used the Twitter API to stream 1000 tweets about a subject.  I then used the lda model to find the top 3 topics.</p>
<p>Now I need to loop through the documents (tweets) via the code below, where x is equal to the document number (0 through 999), to get the topic distribution for each document.
    ldamodel.get_document_topics(corpus[x])
Can someone point me in the right direction on how to formulate my loop?</p>
<p>Here's my guess so far:</p>
<p>Tweets were pulled using this code (not complete):</p>
<pre><code>def get_tweets(input_query):
    consumer_key = "x"
    consumer_secret = "x"
    access_token = "x"
    access_token_secret = "x"
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_token, access_token_secret)
    api = tweepy.API(auth)
    return tweepy.Cursor(api.search, q=input_query, lang="en").items()

input_queries = ['Tornado']
tweets = {}
dataset = defaultdict(list)
for input_query in input_queries:
    tweets = get_tweets(input_query)
    download_tweet_count = 1000
    print(input_query)
    counter = 0
    ....

    ....
ldamodel = models.ldamodel.LdaModel(corpus, num_topics=3, id2word = 
dictionary, passes=20)

counter = 0
for x in download_tweet_count:
while counter &lt; x:
    try:
        ldamodel.get_document_topics(corpus[x])
</code></pre>
<p>I need to run the model on every document (tweet) with ldamodel.get_document_topics(corpus[x]) and then assign that tweet to the topic with the highest probability topic match. I believe I can use the dataframe or separate lists to store the assignments. I don't know what is meant by the "dataframe".</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a snippet of my code, how I usually create the matrix to perform LDA.</p>
<pre><code># loop through the feature and construct the feature array  
features_size = len(features.items()) 

X = []  #np.ndarray. This is what we are going to put in LDA module.

for i in TweetFeatures.items(): # TweetFeatures is words that appeared in your tweet
    current_vector = np.array([0]*features_size) 
    for j in i[1]: # TweetFeatures key is your tweet ID and value is array of words. (This depends on how you define them)
        if j in map_id_2_index:
            current_vector[map_id_2_index[j]] = 1
    X.append(current_vector) 
X=np.array(X) # document-term matrix
X=X[~np.all(X == 0, axis=1)] # remove all zero line
print("type(X): {}".format(type(X)))
print("shape: {}\n".format(X.shape)) 

####################################
#### LDA MODELLING #################
####################################
model = lda.LDA(n_topics=5, n_iter=1000, random_state=1)
model.fit(X)
</code></pre>
</div>
<span class="comment-copy">Take a look at the docs, attempt to create a loop and come back with code. We'll be happy to help. Link to docs: <a href="https://docs.python.org/3/tutorial/controlflow.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/controlflow.html</a></span>
