<div class="post-text" itemprop="text">
<p>Coming from Matlab I am unable to even think of singular datapoints / variables. Anything I deal with is a matrix / array. After one week of searching and insuccesful trial and error I realise, that I ABSOLUTELY do NOT get the concept of dealing with matrices in (plain) Python. </p>
<p>I created</p>
<pre><code>In[]: A = [[1,2,3], [9,8,7], [5,5,5]]
In[]: A
Out[]: [[1, 2, 3], [9, 8, 7], [5, 5, 5]]
</code></pre>
<p>Trying to extract the vectors in the matrix along the two dimensions: </p>
<pre><code>In[]: A[:][1]
Out[]: [9, 8, 7]
In[]: A[1][:]
Out[]: [9, 8, 7]
</code></pre>
<p>'surprisingly' gives the same! No way to get a specific column (of course, except with one by one iteration).</p>
<p>Consequently, I am unable to manage merging matrix A with another vector, i.e. extending A with another column. Matlab style approach obviously is odd:</p>
<pre><code>In[]: B = A, [4,6,8]
In[]: B
Out[]: ([[1, 2, 3], [9, 8, 7], [5, 5, 5]], [4, 6, 8])
</code></pre>
<p>Results in something nested, not an extension of A. 
Same for </p>
<pre><code>B = [A, [4,6,8]]
</code></pre>
<p>Ok, more Python-like:</p>
<pre><code>A.append([11,12,13])
</code></pre>
<p>This easily adds a row. But is there a similar way to add a column??</p>
<p>(The frustrating thing is that Python doc gives all kinds of fancy examples but apparently these focus on demonstrating 'pythonic' solutions for one-dimensional lists.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Coming from MATLAB myself, I understand your point.
The problem is that Python lists are not designed to serve as matrices. When indexing a list, you always work on the top level list elements, e.g. <code>A[:][1]</code> returns all the (<code>[:]</code>) three list elements, namely <code>[1, 2, 3]</code>, <code>[9, 8, 7]</code> and <code>[5, 5, 5]</code>. Then you select the second (<code>[1]</code>) element from those, i.e. <code>[9, 8, 7]</code>. <code>A[1][:]</code> does the same, just the other way round.</p>
<p>This being said, you can still use <a href="https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions" rel="nofollow noreferrer">nested lists</a> for simple indexing tasks, as <code>A[1][1]</code> gives the expected result (8). However, if you are planing to migrate your whole MATLAB code to Python or work on non-trivial matrix problems, you should definitely consider using NumPy. There is even a <a href="https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html" rel="nofollow noreferrer">NumPy guide for former MATLAB users</a>.</p>
</div>
<span class="comment-copy">Raw Python isn't designed with matrix algebra in mind.  You should investigate the numpy library.</span>
<span class="comment-copy">Well you can't just randomly throw concepts from matlab matrices at python lists, they are completely different data structures. This question needs more help than we can provide, since you need to read the Python tutorial. You say you did look into it, but clearly you have no idea what's going on. So read it again and discard prior matlab knowledge. When you have a specific (!) problem with slicing or indexing come back and ask. Other than that, if you want sort-of matlab like behavior, use numpy arrays and matrices, not Python lists.</span>
<span class="comment-copy">As a first step, think of Python lists as a sequence of objects. It does not have any built-in methods for adding a "column" since the concept of "columns" does not apply to a list. When you have a list of lists, the columns are only in your head. For python it is a one dimensional sequence of list objects. Lists are not designed to do common matrix operations.</span>
