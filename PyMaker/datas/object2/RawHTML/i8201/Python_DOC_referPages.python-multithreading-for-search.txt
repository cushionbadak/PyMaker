<div class="post-text" itemprop="text">
<p>I have a class that I have written that will open a text document and search it line by line for the keywords that are input from a GUI that I have created in a different file. It works great, the only problem is the text document that I am searching is long (over 60,000 entries). I was looking at ways to make the search faster and have been playing around with multithreading but have not had any success yet. Basically, the main program calls the <code>search</code> function which takes the line and breaks it into individual words. Then over a loop checks each of the words against the keywords from the user. If the keyword is <code>in</code> that word then it says its true and adds a 1 to a list. At the end, if there is the same number of keywords as true statements then it adds that line to a <code>set</code> that is returned at the end of main.</p>
<p>What I would like to do is incorporate multithreading into this so that it will run much faster but at the end of the main function will still <code>return results</code>. Any advice or direction with being able to accomplish this will be very helpful. I have tried to read a bunch of examples and watched a bunch of youtube videos but it didn't seem to transfer over when I tried. Thank you for your help and your time.   </p>
<pre><code>import pdb
from threading import Thread

class codeBook:
    def __init__(self):
        pass

    def main(self, search):
        count = 0
        results = set()
        with open('CodeBook.txt') as current_CodeBook:
            lines = current_CodeBook.readlines()

            for line in lines:
                line = line.strip()

                new_search = self.change_search(line,search)
                line = new_search[0]
                search = new_search[1]

                #if search in line:
                if self.speed_search(line,search) == True:
                    results.add(line)

                else:
                    pass
                count = count + 1
        results = sorted(list(results))
        return results

    def change_search(self, current_line, search):
        current_line = current_line.lower()
        search = search.lower()
        return current_line, search

    def search(self,line,keywords):
        split_line = line.split()
        split_keywords = keywords.split()
        numberOfTrue = list()

        for i in range(0,len(split_keywords)):
            if split_keywords[i] in line:
                numberOfTrue.append(1)


        if len(split_keywords) == len(numberOfTrue):
            return True
        else:
            return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While threading and/or multiprocessing can be beneficial and speed up execution, I would want to direct your attention to looking into the possibility to optimize your current algorithm, running in a single thread, before doing that.</p>
<p>Looking at your implementation I believe a lot of work is done several times for no reason. To the best of my understanding the following function will perform the same operation as your <code>codeBook.main</code> but with less overhead:</p>
<pre><code>def search_keywords(keyword_string, filename='CodeBook.txt'):
    results = set()
    keywords = set()
    for keyword in keyword_string.lower():
        keywords.add(keyword)

    with open(filename) as code_book:
        for line in code_book:
            words = line.strip().lower()
            kws_present = True
            for keyword in keywords:
                kws_present = keyword in words
                if not kws_present:
                    break
            if kws_present:
                results.add(line)
    return sorted(list(results))
</code></pre>
<p>Try this function, as is, or slightly modified for your needs and see if that gives you a sufficient speed-up. First when that is not enough, you should look into more complex solutions, as it invariably will increase the complexity of your program to introduce more threads/processes.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can split the file into several parts and create a new thread that reads and processes a specific part. You can keep a data structure  global to all threads and add lines that match the search query from all the threads to it. This structure should either be thread-safe or you need to use some kind of synchronization (like a lock) to work with it. </p>
<p>Note: CPython interpreter has a global interpreter lock (GIL), so if you're using it and your application is CPU-heavy (which seems to the case here), you might not get any benefits from multithreading whatsoever.</p>
<p>You can use the <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a> module instead. It comes with means of interprocess communitation. A <code>Queue</code> looks like the right structure for your problem (each process could add matching lines to the queue). After that, you just need to get all lines from the queue and do what you did with the <code>results</code> in your code. </p>
</div>
<span class="comment-copy">Thank you for the rewritten code, but unfortunately, it is still really slow. it takes around 10 seconds where the whole thing just freezes before it returns the results. I do appreciate you pointing out that It is not written very efficiently and I'm doing things multiple times for no reason. I am going to try and rewrite it to take care of this problem. Do you have any other advice that might help?</span>
<span class="comment-copy">Do you need to actually speed up the operation or would it be OK for it to take 10 seconds if it were to happen in a background thread, keeping your (g)ui responsive?</span>
<span class="comment-copy">I actually need it to speed up. How I would like it to work is, the user starts typing, and it will start the search. To help I have put a check in so it starts searching after the user has typed in 4 characters. I would like it to start searching this code book and then displaying the results in real-time as the user types.</span>
<span class="comment-copy">OK, I guess you would be able to improve the performance by reading the codebook once, and then keep it in memory (given that it does not change) searching in memory is much faster than searching in a file.</span>
<span class="comment-copy">I rewrote the code to save the codebook into a variable and that sped it up a lot! Thank you. I have one more question. Now that it is returning the results quickly, it still takes a few seconds to have them displayed. I have a checkbox that is dynamically added and that process is slowing it down a bunch. is there any way to speed that up?</span>
<span class="comment-copy">Thank you for your response and help. I will definitely have to look into how to use the multiprocessing module instead. Do you by chance know of any example that might be a good one to follow to learn how it works?</span>
