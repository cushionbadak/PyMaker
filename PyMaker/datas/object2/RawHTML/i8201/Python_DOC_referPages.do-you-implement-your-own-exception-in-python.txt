<div class="post-text" itemprop="text">
<p>Do you implement your own exception class in python ?<br/>
For now, I haven't encountered the situation I get in trouble<br/>
without original ones. I mean, built-in Exception is enough.</p>
<p>What would be the main benefit of self-implemented Exception ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Generally, the only times you should be defining your own exceptions are when you have a specific case where raising a custom exception would be more appropriate than raising a existing Python exception.</p>
<p>For example, say I was implementing a command line argument parsing API, and I needed to account for the case where a user enters an invalid command line argument, whatever it may be. Now I <em>could</em> simply raise a Python exception like <code>SyntaxError</code> or a <code>NameError</code>, but that would be a bad design decision.</p>
<p>I want to be able to convey to the user <em>why</em> an exception is being raised, not just that an exception is being raised. A better option would be to subclass the general exception class <code>Exception</code>, and create a specific, custom  exception. Perhaps <code>InvalidCommandLineArgument</code>.</p>
<p>Now instead of having to use a general Python exception, I can use my custom exception which helps to clearly and concisely inform the user of their error.</p>
<p>This can also be useful if you want to be informed when a certain action fails in your code. For instance, if you create a function to download a certian file from the internet, it can raise a <code>NoInternetConnection</code> exception to inform you when the is internet connection is down. This allows you to take a certain action based upon that exception being raised.</p>
<p>Now you may wondering why in the second case you couldn't simply use a conditional statement to <em>test</em> if there was an internet connection before trying to use it. The reason you'd choose the later versus the former is because of the motto in Python that "asking for forgiveness is easier than asking for permission." This basically means that it's easier to ask Python to catch an exception if one is thrown, than to try to tiptoe around all possible errors using conditional statements.</p>
<p>In the end, its not about "<em>Do</em> you implement your own Exceptions in Python?", but "<em>When</em> do you implement your own Exceptions in Python?"</p>
</div>
<div class="post-text" itemprop="text">
<p>Customs exceptions are best used when you want to convey information back to someone else who calls your code so they can figure out what to do.</p>
<p>For example:</p>
<p>Let's say I wrote a module <code>pet_store</code> which provided a <code>get_dog(type)</code> function and you called it.</p>
<p>When I write the function, there might be certain ways that this could fail:</p>
<pre><code>NoDogsLeftException  # Sold out of all dogs
NoDogsOfBreedException  # Sold out of that breed
OwnerHouseCheckException  # We checked your house and it's disgusting. Clean up you slob
</code></pre>
<p>Now, when you <code>import pet_store</code> and <code>pet_store.get_dog("chihuahua")</code>, I might throw a <code>NoDogsOfBreedException</code>... because I don't know what you want to do in that case.</p>
<p>Some people might want to try another breed, which wouldn't make sense if only a Chihuahua will satisfy you. Nor would that make sense if I threw an <code>OwnerHouseCheckException</code>. If I say you're house is too dirty for a dog, asking for a different breed won't change my answer. But it's enough information you could take action.</p>
<p>Which is the proper way of things: <strong>let whoever is calling you figure out what to do if an Exception occurs</strong></p>
<p>Maybe you want to:</p>
<ul>
<li>Retry</li>
<li>Try a different query</li>
<li>Display a message to your user</li>
<li>Spin up a new server</li>
<li>Launch a missile</li>
<li>Release the hounds</li>
</ul>
<p>The point is: <strong>I don't know</strong> what the right thing to do is in your program. And the right thing for you could be different from others. So instead, I'll say "This is what went wrong, do what you want to do with that info."</p>
<p>Some programs may fail entirely without internet access (Diablo III) while others can handle being offline (Starcraft). These programs will react differently to a <code>NoInternetException</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's useful if you want to catch a specific kind of exception that you make. You never want to catch just "Exception," because you might be catching some other exception that you don't know about. </p>
</div>
<div class="post-text" itemprop="text">
<p>Custom exceptions can allow for clearly distinguishing between different kinds of errors. Compare</p>
<pre><code>class NumberTooBig(ValueError):
    pass

class NumberTooSmall(ValueError):
    pass

try:
    ...
except NumberTooBig:
    ...
except NumberTooSmall:
    ...
</code></pre>
<p>with</p>
<pre><code>try:
    ...
except ValueError as exc:
    if str(exc) == "too big":
        ...
    elif str(exc) == "too small":
        ...
    else:
        # A different ValueError I don't know how to handle
        raise exc
</code></pre>
<p>With custom exceptions, you embed information about the error in the type of the exception itself, which makes it easier to catch only the specific error you want without having to remember to re-raise any errors you caught accidentally.</p>
</div>
<span class="comment-copy">Unlike most languages, exceptions in Python are relatively inexpensive and regularly used as a glorified GOTO - often custom exceptions are used for flow control.</span>
<span class="comment-copy">Interesting ... "used for flow control" means custom exception is sometimes used for NOT exceptional situation ?</span>
<span class="comment-copy">Yes. The best example is the <code>for</code> loop: when the iterable is exhausted it raises StopIteration. This is not Exceptional at all, the iterator protocol is core to the language.</span>
<span class="comment-copy">Thank you very much. Now I got it. We have to convey to the user why an exception is being raised, and sometimes take a certain action based on the kind of exception. Also, I keep that in my mind, "asking for forgiveness is easier than asking for permission".</span>
<span class="comment-copy">I'm glad I could help you understand better, @Daichi. You might also be interested in reading more about exceptions in the <a href="https://docs.python.org/3/library/exceptions.html" rel="nofollow noreferrer">official Python documentation.</a></span>
<span class="comment-copy">The list is very helpful (and funny) for me ! Thank you. I always just displayed a message. Now I can do more depending on the situation.</span>
<span class="comment-copy">While I understand what your trying to say, I don't think your making a very good point. Your right that you shouln't use the base exception class. You could be masking important errors. <i>But</i> you also shouldn't be just creating your own exceptions either. If Python is already going to raise an error, there is no point in you trying to create your own as well. That's redundant. Instead, figure out the exact errors your code could raise, and account for those specific errors instead.</span>
<span class="comment-copy">I was thinking more that it's a good way to avoid bugs in your code caused by unexpected errors. For example, if your code raises a ValueError, and catches it somewhere else, you might miss another place where some other library is throwing its own ValueError. Sure - in an ideal world you just wouldn't write code that throws errors, but it's not an ideal world.</span>
<span class="comment-copy">Thank you for showing concrete example !</span>
