<div class="post-text" itemprop="text">
<p>I am trying to print out a number of prime numbers that the user inputs, e.g if the user inputs 10 it will print out the first 10 prime numbers.</p>
<pre><code>users_prime = int(input("How many primes do you want to find"))

primes = [2]

counter = 2

while len(primes) &lt; users_prime:

    for x in primes:
        if x % counter:
            primes.append(counter)
            counter += 1

        if x % counter == 0:
            counter += 1

print("The prime numbers are:", primes)
</code></pre>
<p>Here are my instructions.
<a href="https://i.stack.imgur.com/SBF2l.png" rel="nofollow noreferrer"><img alt="Here are my instructions" src="https://i.stack.imgur.com/SBF2l.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>users_prime = int(input("How many primes do you want to find"))

primes = [2]
counter = primes[0]+1

while len(primes) &lt; users_prime:
    for x in primes:
        if counter % x:
            continue
        else:
            break

    if x == primes[-1]:
        primes.append(counter)
    counter += 2

print("The prime numbers are:", primes)
</code></pre>
<p>Steps: Initialize counter to first prime plus one. Check if the number you are checking is not divisable by a previous prime number. If not, add this number to the list of prime number. Add +2 to counter to avoid even number.</p>
<p><strong>Edit</strong>: This solution is not the fastest one. We can work on speed improvement if needed.</p>
<p>Output: <code>('The prime numbers are:', [2, 3, 5, 7, 11])</code></p>
<p><strong>Edit 2:</strong>
First point, initialization of <code>counter</code>, you know that 2 is a prime number, so no need to check it. It is already in the prime numbers list. So you can initialize it to the next integer. (Here 3 or <code>prime[0]+1</code>)
Then, your first <code>if</code>: it has to be <code>counter % x</code> as you want to check if <code>counter</code> is a prime number or not. Else (your version), you check if your prime number is divisible by <code>counter</code> i.e. the number you assume is prime (unless the algo is telling you otherwise).
In my version, i check if <code>counter</code> is divisible by any previous prime number. If it is not divisible, i continue. If <code>counter</code> is a multiple of any prime number, it goes in the <code>else</code> so my <code>for</code> loop is broken. As a consequence, if <code>counter</code> is a multiple of any of the prime number <code>x</code> will not be equal to the last element of prime. If so, i'm not doing anything. Else i add <code>x</code> to the list of prime number.
As for the <code>counter += 2</code>, it will avoid 4, 6, 8, 10, ..., 2*i which correspond to even numbers (that can not be prime numbers)</p>
<p><strong>Edit 3:</strong>
To be correct, you should actually use boolean (i apologize i didn't realize before). Else if <code>counter</code> is a multiple of <code>prime[-1]</code> it is still added to the prime list.</p>
<pre><code>isprime = True
for x in primes:
    if counter % x:
        continue
    else:
        isprime = False
        break

if isprime:
    primes.append(counter)
counter += 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>it may help to break your code into parts (functions). you could take out the part that checks whether or not a candidate is a prime (note that you only need to do trial division up to <code>sqrt(candidate)</code>; and you only need to check odd numbers):</p>
<pre><code># from itertools import count
from math import ceil, sqrt

users_prime = int(input("How many primes do you want to find? "))
primes = [2]

def check_prime(candidate):
    mx = ceil(sqrt(candidate))  # need only check up to mx
    for prime in primes:
        if candidate % prime == 0:
            return False
        if prime &gt;= mx:
            return True

# for candidate in count(start=3, step=2):
candidate = 1
while True:
    candidate += 2  # checking 3, 5, 7, 9, ... only
    if check_prime(candidate):
        primes.append(candidate)
    if len(primes) &gt;= users_prime:
        break

print("The prime numbers are:", primes)
</code></pre>
<p>the commented part (using <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a>) would just be a nicer way to iterate over <code>3, 5, 7, ...</code> than the <code>while True</code> loop.</p>
<p>the difference you then see between this code and yours (apart from the fact that your test <code>x % counter</code> is the wrong way round) is that you check for primes and accept if the test fails in the same loop (without having tested <em>all</em> the primes first); my example has 2 loops: one for primalty testing and one to loop over the candidates.</p>
</div>
<span class="comment-copy">Shouldn't it be <code>counter % x</code> instead of <code>x % counter</code>?</span>
<span class="comment-copy">Also you should append to <code>primes</code> only if <code>counter</code> is no divisible be all values of <code>x</code></span>
<span class="comment-copy">You add <code>counter</code> multiple times in <code>primes</code>, and look in your <code>for</code> at values in <code>primes</code>, i guess it gives a new version of infinite loop</span>
<span class="comment-copy">Yes when I run my code nothing happens as you said "infinite loop".</span>
<span class="comment-copy">This does work but Im only a beginner so I'm not sure about some of the stuff you have done. Can you make it closer to my original code?</span>
<span class="comment-copy">Quite tired now, but this is making sense. Thanks for that. :)</span>
<span class="comment-copy">Could you please run me trough how 5 ends up on the prime number list. In regards to this section.                                                                            If x == primes[-1]:     primes.append(counter)  counter += 2</span>
<span class="comment-copy">Primes start with 2. Counter to 3, as 3 is not a multiple of 2, 3 is added to the prime list. Then we add 2 to counter, counter is now 5. We check if 5 is multiple of 2 (x=2), which is not so we continue in the prime list: we check if 5 is a multiple of 3 (x=3), which is not so for loop continue and finish. x(=3) is equal to primes[-1] (=3) so we add 5 to prime list.</span>
<span class="comment-copy">@Droid2: I made another edit, there was a case not taken into account.</span>
