<div class="post-text" itemprop="text">
<blockquote>
<p>TypeError: '&lt;' not supported between instances of 'NoneType' and 'int' </p>
</blockquote>
<p>I have looked for an answer in Stack Overflow and found that I should be taking an int(input(prompt)), but that's what I <em>am</em> doing </p>
<pre><code>def main():      
while True:
        vPopSize = validinput("Population Size: ")
        if vPopSize &lt; 4:
            print("Value too small, should be &gt; 3")
            continue
        else:
            break

def validinput(prompt):
while True:
    try:
        vPopSize = int(input(prompt))
    except ValueError:
        print("Invalid Entry - try again")
        continue
    else:
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you need to add a return in your function to get the number you input, otherwise it return an implicit None</p>
<pre><code>def validinput(prompt):
    while True:
        try:
            return int(input(prompt)) 
            # there is no need to use another variable here, just return the conversion, 
            # if it fail it will try again because it is inside this infinite loop
        except ValueError:
            print("Invalid Entry - try again")


def main():      
    while True:
        vPopSize = validinput("Population Size: ")
        if vPopSize &lt; 4:
            print("Value too small, should be &gt; 3")
            continue
        else:
            break
</code></pre>
<p>or as noted in the comments, make validinput also check if it is an appropriate value</p>
<pre><code>def validinput(prompt):
    while True:
        try:
            value = int(input(prompt)) 
            if value &gt; 3:
                return value
            else:
                print("Value too small, should be &gt; 3")
        except ValueError:
            print("Invalid Entry - try again")


def main():      
    vPopSize = validinput("Population Size: ")
    # do stuff with vPopSize
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This problem also comes up <a href="https://docs.python.org/3/whatsnew/3.0.html#ordering-comparisons" rel="nofollow noreferrer">when migrating to Python 3</a>.</p>
<p>In Python 2 comparing an integer to <code>None</code> will "work," such that <code>None</code> is considered less than any integer, even negative ones:</p>
<pre><code>&gt;&gt;&gt; None &gt; 1
False
&gt;&gt;&gt; None &lt; 1
True
</code></pre>
<p>In Python 3 such comparisons raise a <code>TypeError</code>:</p>
<pre><code>&gt;&gt;&gt; None &gt; 1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: '&gt;' not supported between instances of 'NoneType' and 'int'

&gt;&gt;&gt; None &lt; 1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: '&lt;' not supported between instances of 'NoneType' and 'int'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>Try: 
    def validinput(prompt):
    print(prompt) # this one is new!!
    while True:
        try:
            vPopSize = int(input(prompt))
        except ValueError:
            print("Invalid Entry - try again")
            continue
        else:
            break
</code></pre>
<p>And you will notice when the function is called. </p>
<p>The problem is that validinput() does not return anything. You'd have to return vPopSize</p>
</div>
<span class="comment-copy">You will need to add <code>return vPopSize</code> in the <code>def validinput(prompt):</code></span>
<span class="comment-copy">The problem isn't the input. Python will implicitly <code>return None</code> from the valid input function. And there are two different <code>vPopSize</code> variables here</span>
<span class="comment-copy">I would make <code>validinput</code> boolean</span>
<span class="comment-copy">Thanks very much all!! I guess I lulled myself into thinking the return was implicit!! Daft really, but there you go... thanks again.</span>
<span class="comment-copy">thanks for the edit!</span>
