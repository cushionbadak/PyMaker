<div class="post-text" itemprop="text">
<p>Suppose I have these lists:</p>
<pre><code>a = ['2009','2010a','2010b','2011','2012a','2012b','2012c','2013a','2014b'] 
b = ['2008a','2008b'] 
</code></pre>
<p>and I need to write a code that give me the following lists:</p>
<pre><code>#If I provide list a as the input:
a1 = ['2010a','2010b']
a2 = ['2012a','2012b','2012c']
a3 = ['2013a']
a4 = ['2014b']

#If I provide list b as the input:
b1 = ['2008a','2008b'] 
</code></pre>
<p>Currently, I do the followings:</p>
<ol>
<li>Iterate over every item in the input list</li>
<li>Check if the last string of each item is alphabet <code>(e.g. a of '2010a')</code></li>
<li>Check if the last string of the next item is also alphabet <code>(e.g. '2010a' and '2010b')</code></li>
<li>Keep checking until the last string of the next item is not alphabet<code>(e.g. '2010a','2010b','2011')</code> and collect the previous items that end with alphabets <code>(e.g. '2010a' and '2010b')</code></li>
<li>Check if the collected items have the same digits <code>(e.g. '2010a' and '2010b', but not '2013a' and '2014b')</code> and produce the sub-lists as appropriate.</li>
</ol>
<p>The above steps work, but are quite long. I wonder if there is any code/trick in python libraries that can make the code shorter and look cleaner/ more elegant.</p>
</div>
<div class="post-text" itemprop="text">
<p>You first need to check if the last character is a letter:</p>
<pre><code>&gt;&gt;&gt; a = ['2009','2010a','2010b','2011','2012a','2012b','2012c','2013a','2014b']
&gt;&gt;&gt; number_and_letters = [x for x in a if x[-1].isalpha()]
['2010a', '2010b', '2012a', '2012b', '2012c', '2013a', '2014b']
</code></pre>
<p>You can then use <a href="https://docs.python.org/2/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> with a <code>lambda</code> of <code>x[:4]</code> to group the strings by numbers:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(list(words) for year, words in itertools.groupby(number_and_letters, lambda x: x[:4]))
[['2010a', '2010b'], ['2012a', '2012b', '2012c'], ['2013a'], ['2014b']]
</code></pre>
<p><code>groupby</code> expects strings to be already sorted, which seems to be the case here.</p>
<p>Finally, you get a list as an output, not 4 distinct variables. It's usually much easier to work with a list of 4 elements than with 4 distinct variables.</p>
</div>
<span class="comment-copy">Once you have segregated the items that end with an <i>alphabet</i> character, <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a> can organize those items by the first 4 characters.</span>
<span class="comment-copy">I modify it slightly to fit my other codes: <code>comp_dict = {key:[item for item in group] for key,group in groupby(number_and_letters, lambda x: x[:-1])}</code></span>
