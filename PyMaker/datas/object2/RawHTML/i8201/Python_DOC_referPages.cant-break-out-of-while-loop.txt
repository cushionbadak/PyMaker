<div class="post-text" itemprop="text">
<p>I wrote the following python code. It takes a list of English words I found on the internet and makes them a list so that I can use them for hangman. Well my problem is that every time I run this program and successfully guess the word, it doesn't break out of the while loop. It just keeps going. I can't figure out why for the life of me. Anyone have any clue as to why it isn't printing the final message to the winner? </p>
<pre><code>import random

words = []

lettersGuessed = []

isGuessed = 0



wordFile = open(r'C:\Users\Sarah\PycharmProjects\hangman\words.txt')

for word in wordFile:
    words.append(word.rstrip(wordFile.readline()))


mysteryWord = random.choice(words)

while len(mysteryWord) &lt;= 1:
    mysteryWord = random.choice(words)

for letter in mysteryWord:
    print("?", end = "")
print("\n")

def isWon():
    #win conditions
    count = 0
    for letter in mysteryWord:
        if letter in lettersGuessed:
            count += 1

        if count == len(mysteryWord):
            isGuessed = 1



count = 0

while isGuessed == 0:


    guess = input("Guess a letter \n")

    if guess.upper() or guess.lower() in mysteryWord:
        lettersGuessed.append(guess)
        for letter in mysteryWord:
            if letter in lettersGuessed:
                print(letter, end ='')
            else:
                print("?", end = '')
    print("\n")
    count = 0
    isWon()
    if isGuessed == 1:
        break

print("Congratulations, you correctly guessed ", mysteryWord)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>isGuessed</code> in your top-level code and <code>isGuessed</code> in <code>isWon</code> function are two different variables. A function is a separate namespace (else a function using a variable with common name like <code>i</code> would wreak havoc in other code).</p>
<p>This can be solved by a <code>global</code> declaration, but it's a very bad style. Same applies to variables like <code>mysteryWord</code> and <code>lettersGuessed</code>.</p>
<p>Instead, you should return the value from the <code>isWon</code> function:</p>
<pre><code>def isWon(mysteryWord, lettersGuessed):
   # do your counting...
   return isGuessed

# main code
victory = False
while not victory:
   # ...
   victory = isWon(mysteryWord, lettersGuessed)
   # you don't even need the if ... break statement
</code></pre>
<p>BTW your check for all letters being guessed can be made a one-liner:</p>
<pre><code>def isWon(mysteryWord, lettersGuessed):
    return set(lettersGuessed) == set(mysteryWord)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The immediate issue is that <code>isWon()</code> is not setting <code>isGuessed</code> regardless of the input. If you guess with the string "foo" then</p>
<pre><code>lettersGuessed.append(guess)
</code></pre>
<p>will make <code>lettersGuessed</code> a list with one item, which is a string. I think what you were trying to do was</p>
<pre><code>lettersGuessed.extend(list(guess))
</code></pre>
<p>Which will add each letter in <code>guess</code> to the <code>lettersGuessed</code> list.</p>
<p>Two points also worth mentioning:</p>
<ul>
<li><code>isWon()</code> will consider the game won if you guess an anagram of the word in in questions e.g. "oof" will be considered a correct solution if the word is "foo"</li>
<li><code>words.append(word.rstrip(wordFile.readline()))</code> is reading every even line of the input file, and adding it to the <code>words</code> list after removing any characters it has in common with the following word. You want to do <code>words.append(word.strip())</code> instead.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>It's all about scope. <code>isGuessed</code> used in <code>isWon()</code> is define in the local scope. If you want to affect <code>isGuessed</code> declared in the global scope you will have to either pass it to <code>isWon()</code> as a parameter or use the <code>global</code> keyword before modifying <code>isGuessed</code>. See below: </p>
<pre><code>def isWon():
#win conditions
count = 0
for letter in mysteryWord:
    if letter in lettersGuessed:
        count += 1

    if count == len(mysteryWord):
        global isGuessed
        isGuessed = 1    
</code></pre>
<p>Output with this change:</p>
<pre><code>python3 test.py
?????

Guess a letter
1
?????

Guess a letter
2
?????

Guess a letter
3
????3

Guess a letter
4t
????3

Guess a letter
t
t??t3

Guess a letter
e
te?t3

Guess a letter
s
test3

Congratulations, you correctly guessed  test3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're trying to communicate using the global variable <code>is_guessed</code>, but the <code>isWon</code> function doesn't gave a <code>global is_guessed</code> line, so it is setting a variable local to <code>isWon</code> named <code>is_guessed</code> rather than the global variable.</p>
<p>My suggestion would be, rather than adding <code>global is_guessed</code> to <code>isWon()</code>, to return either <code>True</code> or <code>False</code> from <code>isWon()</code> (based on whether or not the user has won) and use that to end the loop.</p>
<p>Here is an alternative version of your code:</p>
<pre><code>import random

words = []
with open(r'C:\Users\Sarah\PycharmProjects\hangman\words.txt') as wordFile:
    for word in wordFile:           # assuming one word per line
        words.append(word.strip())  # iterating a file reads one line per iteration

mysteryWord = random.choice(words)
mysteryLetters = set(mysteryWord.lower())
lettersGuessed = set()

def isWon():
    return mysteryLetters == (lettersGuessed &amp; mysteryLetters)

while not isWon():
    for letter in mysteryWord:
        if letter in lettersGuessed:
            print(letter, end ='')
        else:
            print("?", end = '')
    print()

    guess = input("Guess a letter \n")[:1].lower()

    if guess in mysteryWord:
        lettersGuessed.add(guess)

print("Congratulations, you correctly guessed ", mysteryWord)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, I know that my answer is a little late but here's my solution:</p>
<pre><code>#!/usr/bin/env python3

import random

word_file_name = "/usr/share/dict/canadian-english"

with open(word_file_name) as word_file:
    # I'm assuming your input file has one word per line and that
    # you want to keep only words that has more than one letter
    words = [word.rstrip() for word in word_file if len(word) &gt; 1]

mystery_word = random.choice(words)

# Using sets helps to remove duplicate letters and eases membership tests 
letters_mystery = set(mystery_word.upper())
letters_guessed = set()

not_guessed = True

while not_guessed:
    # We create a list with all the letters found or not
    letters_to_show = [letter if letter.upper() in letters_guessed else "?"
                       for letter in mystery_word]
    # We join them before printing them
    print("".join(letters_to_show), "\n")

    guess_received = input("Guess a letter :")
    if guess_received.strip():
        # We only keep the first letter received
        guess_kept = guess_received[0].upper()

        if guess_kept in letters_mystery:
            letters_guessed.add(guess_kept)

    # We determine if we need to continue
    not_guessed = letters_guessed != letters_mystery

print("Congratulations, you correctly guessed", mystery_word)
</code></pre>
<p>Key points:</p>
<ul>
<li>A <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> is used to put the words in a list</li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">Sets</a> are used to keep a group of letters without duplicates.</li>
<li>A <a href="https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="nofollow noreferrer">conditional expression</a> is used to choose if a letter will be shown or or a <code>?</code> </li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">Truth testing</a> can be used to simplify the verification of certain information</li>
<li>You are using expressions like <code>isGuessed == 1</code> like in C where True equals 1 and False equals 0. In Python, a variable can be a boolean. You can use it directly in a <code>if</code> statement</li>
</ul>
</div>
<span class="comment-copy">Based on your code and its indentation: only two things will end the while loop: 1) a <code>break</code> statement in the loop. 2) the length of mysteryWord decreasing to zero. Again one of these must occur INSIDE the while loop everything outside the loop does not affect it.</span>
<span class="comment-copy">I have a break statement in the loop. It's not executing tho :/</span>
<span class="comment-copy">You are using global variables. Bear in mind you have to tell python that a variable being used is global, otherwise it just creates a new variable in that function with the same name. Then the global variable is not used. It's honestly better to avoid the use of globals. It's better to either return values or use them as members of a class.</span>
<span class="comment-copy">Thanks for the advice, however I'm still stuck. I tried using the global keyword but it said invalid syntax.</span>
<span class="comment-copy">Thank you so much! This really helped me. I'm a beginner at this, so I appreciate this kind of feedback more than you know. :)</span>
<span class="comment-copy">Very helpful. Thanks so much!</span>
