<div class="post-text" itemprop="text">
<p>I want to write a custom logger for a set of tests without making any significant changes to the tests. I would like to use something like a fixture that I can just pass to the test method and the fixture runs in the background during the entire duration of the test capturing stdout and stderr and changing it to custom messages. How can this be done ?</p>
<pre><code>def test_1():
   blah
   blah
   print('Some msg')
   blah
   assert something, assert_msg

Output:
Some msg (if assert fails, then assertion error too)
</code></pre>
<p>What I want is</p>
<pre><code>@fixture
def logger():
    capture stdout, stderr
    custom_msg = cust_msg(stdout, stderr)
    print(custom_msg)


def test_1(logger):
   blah
   blah
   print('Some msg')
   blah
   assert something, assert_msg

Output:
Custom msg (if assert fails, then custom assertion error too)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't capture the stdout from within the module without redefining either <code>sys.stdout</code> or <code>print</code>. Redefining print is easier, as it is a function already. And to catch the failed <code>assert</code>s, just catch <code>AssertionError</code>s.</p>
<pre><code>import functools
import sys

def fixture(f):
    old_print = print
    @functools.wraps(f)
    def wrapped(*args, **kwargs):
        global print
        def print(*value, sep=' ', end='\n', file=sys.stdout, flush=False):
            msg = sep.join(map(str, value)) + end

            # Manipulate msg here

            file.write(manipulated)
            if flush:
                file.flush()
        try:
            return f(*args, **kwargs)
        except AssertionError as e:

            # Custom message on failed assertion
            msg = e.args[0] if len(e.args) == 1 else None
            old_print(manipulated)

        finally:
            print = old_print
    return wrapped
</code></pre>
<p>But, <code>assert</code>s don't really give much helpful information. I would use an actual test library, like <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer"><code>unittest</code></a>.</p>
<p>An alternative would be to run it as a subprocess.</p>
</div>
