<div class="post-text" itemprop="text">
<p>I'm trying to write a piece of code that multiplies certain numbers from lines in a text file by 3. However, each line has string characters and each number is separated by commas. This is for a game leaderboard, I'm just trying to learn and practice Python. Each line has the player's nickname, matches played, matches won and matches lost listed respectively, each item is separated by a comma (no spaces) and each player has played 24 matches.</p>
<p>A sample of a line from the text file is:</p>
<pre class="lang-none prettyprint-override"><code>DarrenL,24,12,12
Philippa93,24,9,15
TommyBoy,24,0,24
</code></pre>
<p><strong>The Objective:</strong></p>
<ul>
<li>Read the text file into the code <strong>(done)</strong></li>
<li>Take the matches won from each line and multiply it by three</li>
</ul>
<p>Here is the code I have already:</p>
<pre><code>print("Leaderboard")
print("Only players who have won one or more matches will be displayed")
results = open('results.txt', 'r').readlines()
with open('results.txt', 'r') as leaderboard:
    import re
    output = []
    with open('firesideResults.txt.txt') as file:
        for line in file:
            matchesWon = re.search(r'\d+,?\d*', line)
            if matchesWon:
                points = output.append(float(matchesWon.group()))
                print(points * 3)
</code></pre>
<p>The problem with the code is that it doesn't actually print anything from the actual text file.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using a RegEx, you can use <a href="https://docs.python.org/3.6/library/stdtypes.html#str.split" rel="nofollow noreferrer">split()</a>:</p>
<blockquote>
<p>Return a list of the words in the string, using <em>sep</em> as the delimiter string.</p>
</blockquote>
<p>For instance:</p>
<pre><code>&gt;&gt;&gt; "DarrenL,24,12,12".split()
['DarrenL,24,12,12']
</code></pre>
<p>With Python 3.5 you can use <a href="https://www.python.org/dev/peps/pep-0448/" rel="nofollow noreferrer">Unpacking Generalizations</a> to separate the <em>name</em> and the <em>points</em>, for instance:</p>
<pre><code>&gt;&gt;&gt; line = "DarrenL,24,12,12"
&gt;&gt;&gt; name, *points = line.split(',')
&gt;&gt;&gt; name
'DarrenL'
&gt;&gt;&gt; points
['24', '12', '12']
</code></pre>
<p>Before Python 3.5, you can write:</p>
<pre><code>parts = line.split(',')
name = parts[0]
points = parts[1:]
</code></pre>
<p>The conversion to <code>int</code> and the multiplication by 3, can be done with a comprehension list:</p>
<pre><code>points = [int(x) * 3 for x in points]
</code></pre>
<p>Here is the resulting code:</p>
<pre><code>lines = [
    "DarrenL,24,12,12\n",
    "Philippa93,24,9,15\n",
    "TommyBoy,24,0,24\n"]

for line in lines:
    line = line.strip()
    name, *points = line.split(",")
    points = [int(x) * 3 for x in points]
    print(name, *points)
</code></pre>
<p>Prints:</p>
<pre><code>DarrenL 72 36 36
Philippa93 72 27 45
TommyBoy 72 0 72
</code></pre>
<p>If you really want a RegEx, you can use <a href="https://docs.python.org/3.6/library/re.html#re.findall" rel="nofollow noreferrer">re.findall()</a>:</p>
<blockquote>
<p>Return all non-overlapping matches of <em>pattern</em> in <em>string</em>, as a list of strings.</p>
</blockquote>
<pre><code>import re
print(re.findall(r"\d+", "DarrenL,24,12,12\n"))
</code></pre>
<p>You'll get:</p>
<pre><code>['24', '12', '12']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a start:</p>
<pre><code>file = open('results.txt').readlines()

file = [i.strip('\n').split(',') for i in file]
</code></pre>
<p>now, you have a two-dimensional list which is storing all of your data atributes. </p>
<pre><code>updated = {i[0]:map(int, i[1:]) for i in file}

final_updated = {a:[b[i] if i == 0 or i == 2 else b[i]*3 for i in range(len(b))] for a, b in updated.items()]
</code></pre>
<p>If you just want listing of all the players and their scores multiplied by 3:</p>
<pre><code>for player, scores in final_updated.items():
    print player, scores
</code></pre>
<p>If you only want to show players how have not scored zero in any matches:</p>
<pre><code>for player, scores in final_updated.items():
    if 0 not in scores:
       print player, scores
</code></pre>
</div>
<span class="comment-copy">There are a lot of issues for one question. You should take smaller steps. For example: (1) read the file, and print it again, line by line. (2) Extract the number of matches won from each line, and print it. (3) Calculate the score (3 * matches won) for each line, and print it. (4) Don't print scores if no matches were won. <b>Don't take the next step until the current one works.</b></span>
<span class="comment-copy">Which value is "matches won"? Suggest you read the file with the <a href="https://docs.python.org/3/library/csv.html#module-csv" rel="nofollow noreferrer"><code>csv</code></a> module because that's the kind of file it is (and would be better than using a regular expression to parse the lines).</span>
<span class="comment-copy">To begin with, you are using <code>open</code> three times. It should be used only once.</span>
<span class="comment-copy">Thank you so much, this worked perfectly! Sorry to bother you further but do you know how to make it so that it only multiplies certain numbers from the line? I tried changing the '.split(',')' to '.split('19,')', '.split('19',',')' and other variations, but none of them worked. Sorry again for my incompetence, I'm new to coding.</span>
<span class="comment-copy">No problem. What "columns" of scores where you thinking about multiplying? For instance, if you just wanted the first column of scores, you could merely access that through indexing, in other words, finding an element in an array via its position. If it was a particular sequence, you could use the range function and modulo.</span>
<span class="comment-copy">In the text file, each value is called 'Player Nickname', 'Matches Played', 'Matches Won' and 'Matches Lost' respectively. Each match won awards three points to that player, so if Matches Won = n, then their points would be n*3. So DarrenL, for example, would be 'DarrenL,24,36,12' instead of 'DarrenL,24,12,12'. In my head I know how this would work, but I'm having trouble figuring out how to get it into Python.</span>
<span class="comment-copy">I changed the variable final_updated. Please take a look. The code now leaves "Matches Played" and "matches lost" as it is but multiples "Matches won" by three. Note that if you wish to make it so that it will multiply "Matches lost" by three in the event that your player loses a match, you can put the actions into two separate functions.</span>
<span class="comment-copy">Thank you very much, this worked amazingly!!</span>
