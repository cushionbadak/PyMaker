<div class="post-text" itemprop="text">
<p>I have seen the following cases:</p>
<pre><code>&gt;&gt;&gt; def func(a):
...     if a:
...         print("True")
...
&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; func(a)
True
&gt;&gt;&gt; a == True
False
</code></pre>
<p>Why does this difference occur?</p>
</div>
<div class="post-text" itemprop="text">
<p>All objects<sup>1</sup> in Python have a <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">truth value</a>:</p>
<blockquote>
<p>Any object can be tested for truth value, for use in an <code>if</code> or <code>while</code> condition or as operand of the Boolean operations below. The following values are considered false:</p>
<ul>
<li><code>None</code></li>
<li><code>False</code></li>
<li>zero of any numeric type, for example, <code>0</code>, <code>0.0</code>, <code>0j</code>.</li>
<li>any empty sequence, for example, <code>''</code>, <code>()</code>, <code>[]</code>.</li>
<li><p>any empty mapping, for example, <code>{}</code>.</p></li>
<li><p>instances of user-defined classes, if the class defines a <code>__bool__()</code> or <code>__len__()</code> method, when that method returns the integer zero or bool value <code>False</code>.</p></li>
</ul>
<p>All other values are considered true — so objects of many types are always true.</p>
</blockquote>
<hr/>
<p><sup>1</sup> … unless they have a <code>__bool__()</code> method which raises an exception, or returns a value other than <code>True</code> or <code>False</code>. The former is unusual, but sometimes reasonable behaviour (for example, see the comment by user2357112 below); the latter is not.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you type <code>if a:</code>, it is equivalent to <code>if bool(a):</code>. So it doesn't mean that <code>a is True</code>, only that <code>a</code>'s representation as a boolean value is <code>True</code>.</p>
<p>Generally speaking <code>bool</code> is a subclass of <code>int</code>, where <code>True == 1</code> and <code>False == 0</code>.</p>
</div>
<span class="comment-copy">Well, usually, anyway. This is one of the parts where the docs gloss over the more subtle aspects of operator overloading. You can make a class where trying to take its truth value throws a TypeError, and this is sometimes reasonable, such as for NumPy arrays.</span>
<span class="comment-copy">@user2357112 good point. I've updated the answer – thanks!</span>
