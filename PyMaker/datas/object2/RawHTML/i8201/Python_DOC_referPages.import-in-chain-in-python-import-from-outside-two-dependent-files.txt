<div class="post-text" itemprop="text">
<p><strong>Problem</strong></p>
<p>I struggle to find a nice way to import modules in chain when your second import is from outside the folder. More clearly, here is my folder organisation:</p>
<pre><code>main/                          
    __init__.py              
    a/                  
        __init__.py
        foo.py
        bar.py
    b/                  
        __init__.py
        stuff.py
</code></pre>
<p>In <code>stuff.py</code> -- typically a big piece of code -- I want to do something like this:</p>
<p><code>from a.foo import thing
</code></p>
<p>but in <code>foo.py</code> -- typically some kind of library -- I have already something like this:</p>
<p><code>from bar import other_thing
</code></p>
<p>When I run <code>stuff.py</code>, I have an import error saying that <code>foo.py</code> does not know the module <code>bar</code>. Of course, when I run <code>foo.py</code> alone, I have no error.</p>
<p><strong>Possible solutions so far</strong></p>
<p>A simple workaround is to put:</p>
<p><code>from a.bar import other_thing
</code></p>
<p>instead in <code>foo.py</code>. But it feels strange to have to specify the module <code>a</code> since both files live in the same folder. When you develop something in <code>foo.py</code>, you should not have to care about this.</p>
<p>I can also add something like:</p>
<p><code>sys.path.insert(1, '../a')
</code></p>
<p>in <code>stuff.py</code>. But in this case in <code>stuff.py</code> I can completely ignore the module structure and just import:</p>
<p><code>from foo import thing
</code></p>
<p>which does not feel right either.</p>
<p>This is purely a question of style, but I am sure that there is a nice solution for this, probably using the <code>__init__.py</code> files. I can't find it though. Any idea? </p>
<p>I am using Python 3.4 by the way</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use package relative imports in <code>foo.py</code>.</p>
<pre><code>from .bar import other_thing
</code></pre>
<p>See <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">Intra-Package References</a> for details. </p>
<p>Note that if you run <code>stuff.py</code> directly, it is a top-level script (<code>__main__</code>) and is not a member of the package. If some other module imports <code>b.stuff</code>, you get a different copy. Personally, I put top-level scripts in a different <code>bin</code> directory so they are not mistaken for package modules.</p>
</div>
<span class="comment-copy">From the <code>main</code> directory, try to run <code>python -m b.stuff</code>.</span>
<span class="comment-copy">Thanks, this is what I was looking for. Regarding your other comment, I do the same I think. In theory no file should import from stuff (even though it is not called bin per se).</span>
