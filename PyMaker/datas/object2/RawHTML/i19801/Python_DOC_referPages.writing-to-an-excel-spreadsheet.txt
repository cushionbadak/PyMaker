<div class="post-text" itemprop="text">
<p>I am new to Python. I need to write some data from my program to a spreadsheet. I've searched online and there seem to be many packages available (xlwt, XlsXcessive, openpyxl). Others suggest to write to a .csv file (never used CSV and don't really understand what it is).</p>
<p>The program is very simple. I have two lists (float) and three variables (strings). I don't know the lengths of the two lists and they probably won't be the same length.</p>
<p>I want the layout to be as in the picture below:</p>
<p><img alt="Layout sample" src="https://i.stack.imgur.com/Ih3fa.png"/></p>
<p>The pink column will have the values of the first list and the green column will have the values of the second list.</p>
<p>So what's the best way to do this?</p>
<p>P.S. I am running Windows 7 but I won't necessarily have Office installed on the computers running this program.</p>
<pre><code>import xlwt

x=1
y=2
z=3

list1=[2.34,4.346,4.234]

book = xlwt.Workbook(encoding="utf-8")

sheet1 = book.add_sheet("Sheet 1")

sheet1.write(0, 0, "Display")
sheet1.write(1, 0, "Dominance")
sheet1.write(2, 0, "Test")

sheet1.write(0, 1, x)
sheet1.write(1, 1, y)
sheet1.write(2, 1, z)

sheet1.write(4, 0, "Stimulus Time")
sheet1.write(4, 1, "Reaction Time")

i=4

for n in list1:
    i = i+1
    sheet1.write(i, 0, n)



book.save("trial.xls")
</code></pre>
<p>I wrote this using all your suggestions. It gets the job done but it can be slightly improved.</p>
<p>How do I format the cells created in the for loop (list1 values) as scientific or number?</p>
<p>I do not want to truncate the values. The actual values used in the program would have around 10 digits after the decimal.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import xlwt

def output(filename, sheet, list1, list2, x, y, z):
    book = xlwt.Workbook()
    sh = book.add_sheet(sheet)

    variables = [x, y, z]
    x_desc = 'Display'
    y_desc = 'Dominance'
    z_desc = 'Test'
    desc = [x_desc, y_desc, z_desc]

    col1_name = 'Stimulus Time'
    col2_name = 'Reaction Time'

    #You may need to group the variables together
    #for n, (v_desc, v) in enumerate(zip(desc, variables)):
    for n, v_desc, v in enumerate(zip(desc, variables)):
        sh.write(n, 0, v_desc)
        sh.write(n, 1, v)

    n+=1

    sh.write(n, 0, col1_name)
    sh.write(n, 1, col2_name)

    for m, e1 in enumerate(list1, n+1):
        sh.write(m, 0, e1)

    for m, e2 in enumerate(list2, n+1):
        sh.write(m, 1, e2)

    book.save(filename)
</code></pre>
<p>for more explanation:
    <a href="https://github.com/python-excel" rel="noreferrer">https://github.com/python-excel</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://pandas.pydata.org/pandas-docs/dev/generated/pandas.DataFrame.to_excel.html" rel="noreferrer">DataFrame.to_excel</a> from <a href="https://github.com/pydata/pandas" rel="noreferrer">pandas</a>. Pandas allows you to represent your data in functionally rich datastructures and will let you <a href="http://pandas.pydata.org/pandas-docs/stable/io.html#excel-files" rel="noreferrer">read in</a> excel files as well.</p>
<p>You will first have to convert your data into a DataFrame and then save it into an excel file like so:</p>
<pre><code>In [1]: from pandas import DataFrame
In [2]: l1 = [1,2,3,4]
In [3]: l2 = [1,2,3,4]
In [3]: df = DataFrame({'Stimulus Time': l1, 'Reaction Time': l2})
In [4]: df
Out[4]: 
   Reaction Time  Stimulus Time
0              1              1
1              2              2
2              3              3
3              4              4

In [5]: df.to_excel('test.xlsx', sheet_name='sheet1', index=False)
</code></pre>
<p>and the excel file that comes out looks like this:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/RXFGb.png"/></p>
<p>Note that both lists need to be of equal length else pandas will complain. To solve this, replace all missing values with <code>None</code>.</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p><strong>xlrd/xlwt</strong> (standard): Python does not have this functionality in it's standard library, but I think of <a href="http://www.python-excel.org/">xlrd/xlwt</a> as the "standard" way to read and write excel files. It is fairly easy to make a workbook, add sheets, write data/formulas, and format cells. If you need all of these things, you may have the most success with this library. I think you could choose openpyxl instead and it would be quite similar, but I have not used it.</p>
<p>To format cells with xlwt, define a <code>XFStyle</code> and include the style when you write to a sheet. <a href="https://github.com/python-excel/xlwt/blob/master/xlwt/examples/num_formats.py">Here is an example with many number formats</a>. See example code below.</p></li>
<li><p><strong>Tablib</strong> (powerful, intuitive): <a href="http://docs.python-tablib.org/en/latest/">Tablib</a> is a more powerful yet intuitive library for working with tabular data. It can write excel workbooks with multiple sheets as well as other formats, such as csv, json, and yaml. If you don't need formatted cells (like background color), you will do yourself a favor to use this library, which will get you farther in the long run.</p></li>
<li><p><strong>csv</strong> (easy): Files on your computer are either <em>text</em> or <em>binary</em>. Text files are just characters, including special ones like newlines and tabs, and can be easily opened anywhere (e.g. notepad, your web browser, or Office products). A csv file is a text file that is formatted in a certain way: each line is a list of values, separated by commas. Python programs can easily read and write text, so a csv file is the easiest and fastest way to export data from your python program into excel (or another python program).</p>
<p>Excel files are binary and require special libraries that know the file format, which is why you need an additional library for python, or a special program like Microsoft Excel, Gnumeric, or LibreOffice, to read/write them.</p></li>
</ul>
<hr/>
<pre><code>import xlwt

style = xlwt.XFStyle()
style.num_format_str = '0.00E+00'

...

for i,n in enumerate(list1):
    sheet1.write(i, 0, n, fmt)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>CSV stands for comma separated values. CSV is like a text file and can be created simply by adding the <a href="http://en.wikipedia.org/wiki/Comma-separated_values" rel="nofollow noreferrer">.CSV extension</a></p>
<p>for example write this code:</p>
<pre><code>f = open('example.csv','w')
f.write("display,variable x")
f.close()
</code></pre>
<p>you can open this file with excel.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import xlsxwriter


# Create an new Excel file and add a worksheet.
workbook = xlsxwriter.Workbook('demo.xlsx')
worksheet = workbook.add_worksheet()

# Widen the first column to make the text clearer.
worksheet.set_column('A:A', 20)

# Add a bold format to use to highlight cells.
bold = workbook.add_format({'bold': True})

# Write some simple text.
worksheet.write('A1', 'Hello')

# Text with formatting.
worksheet.write('A2', 'World', bold)

# Write some numbers, with row/column notation.
worksheet.write(2, 0, 123)
worksheet.write(3, 0, 123.456)

# Insert an image.
worksheet.insert_image('B5', 'logo.png')

workbook.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try taking a look at the following libraries too:</p>
<p><a href="http://xlwings.org" rel="noreferrer">xlwings</a> - for getting data into and out of a spreadsheet from Python, as well as manipulating workbooks and charts</p>
<p><a href="https://github.com/ericremoreynolds/excelpython" rel="noreferrer">ExcelPython</a> - an Excel add-in for writing user-defined functions (UDFs) and macros in Python instead of VBA</p>
</div>
<div class="post-text" itemprop="text">
<p>I surveyed a few Excel modules for Python, and found <a href="https://openpyxl.readthedocs.org/en/latest/" rel="noreferrer">openpyxl</a> to be the best.</p>
<p>The free book Automate the Boring Stuff with Python <a href="http://automatetheboringstuff.com/chapter12/" rel="noreferrer">has a chapter on openpyxl</a> with more details or you can check the <a href="https://openpyxl.readthedocs.org/en/latest/" rel="noreferrer">Read the Docs</a> site. You won't need Office or Excel installed in order to use openpyxl.</p>
<p>Your program would look something like this:</p>
<pre><code>import openpyxl
wb = openpyxl.load_workbook('example.xlsx')
sheet = wb.get_sheet_by_name('Sheet1')

stimulusTimes = [1, 2, 3]
reactionTimes = [2.3, 5.1, 7.0]

for i in range(len(stimulusTimes)):
    sheet['A' + str(i + 6)].value = stimulusTimes[i]
    sheet['B' + str(i + 6)].value = reactionTimes[i]

wb.save('example.xlsx')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>OpenPyxl</code> is quite a nice library, built to read/write Excel 2010 xlsx/xlsm files:</p>
<p><a href="https://openpyxl.readthedocs.io/en/stable" rel="nofollow noreferrer">https://openpyxl.readthedocs.io/en/stable</a></p>
<p><a href="https://stackoverflow.com/a/29979532/5448626">The other answer</a>, referring to it is using the deperciated function (<code>get_sheet_by_name</code>). This is how to do it without it:</p>
<pre><code>import openpyxl

wbkName = 'New.xlsx'        #The file should be created before running the code.
wbk = openpyxl.load_workbook(wbkName)
wks = wbk['test1']
someValue = 1337
wks.cell(row=10, column=1).value = someValue
wbk.save(wbkName)
wbk.close
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to import the exact numbers is to add a decimal after the numbers in your <code>l1</code> and <code>l2</code>. Python interprets this decimal point as instructions from you to include the exact number. If you need to restrict it to some decimal place, you should be able to create a print command that limits the output, something simple like:</p>
<pre><code>print variable_example[:13]
</code></pre>
<p>Would restrict it to the tenth decimal place, assuming your data has two integers left of the decimal. </p>
</div>
<span class="comment-copy">You'll understand what a tsv file is if you open it in a text editor like notepad/wordpad. The key advantage to using tsv is that you can be confident that basically any version of any spreadsheet program can open it, and not only office 2010's excel</span>
<span class="comment-copy">Use string format in python to control the display of the numerical data.</span>
<span class="comment-copy">You might want to mention that if you are running Python on Windows and have Excel installed on the same machine, you can use the Python COM interface to directly control Excel.</span>
<span class="comment-copy">The link was very helpful. Thanks</span>
<span class="comment-copy">Just note that with this code maximum row limit is 65536 rows, as .xls files support only that many rows</span>
<span class="comment-copy">Thanks but seems too complicated for my needs.</span>
<span class="comment-copy">Nice one, but a bit overkill +1</span>
<span class="comment-copy">Pretty sure pandas uses the xlrd/xlwt libraries for its excel capabilities <a href="http://pandas.pydata.org/pandas-docs/stable/io.html#excel-files" rel="nofollow noreferrer">pandas.pydata.org/pandas-docs/stable/io.html#excel-files</a></span>
<span class="comment-copy">I was assuming it used <code>xlwt</code> too, but getting an <code>openpyxl</code> error. For anyone else who gets confused by this - it's all in the filetype you want. The pandas (0.12) docs say "Files with a <code>.xls</code> extension will be written using xlwt and those with a <code>.xlsx</code> extension will be written using openpyxl".</span>
<span class="comment-copy">Not sure why folks are saying it's overkill. For my purposes it was just what I was looking for. Thanks!</span>
<span class="comment-copy">You probably want to use the the <a href="http://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv module</a> included in the standard library if you're going to write a CSV file.</span>
<span class="comment-copy">Not that it particularly matters, but Tablib, like so many other higher-level packages, uses xlwt to output Excel files.</span>
<span class="comment-copy">You cannot format the column backgrounds using CSV. It is only a data format for import and export.</span>
<span class="comment-copy">You probably want to use the the <a href="http://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csv module</a> included in the standard library if you're going to do this. It handles quoting better, for example.</span>
<span class="comment-copy">@Flimm how do i simply write to different cells?</span>
<span class="comment-copy">if you are using Python 3 and the file contains non-ASCII characters, like <code>é</code> or <code>中</code>, you better do an <code>f.write('\xEF\xBB\xBF')</code> right after the <code>open()</code>. That is the BOM (<a href="https://en.wikipedia.org/wiki/Byte_order_mark" rel="nofollow noreferrer">byte order mark</a>, q.v.), needed by Microsoft software to recognize the UTF-8 encoding</span>
<span class="comment-copy">This is just the demo code for xlsxwriter.</span>
<span class="comment-copy">I get an error saying: cannot convert int64 to excel</span>
<span class="comment-copy">Above code produces error <code>FileNotFoundError: [Errno 2] No such file or directory: 'New.xlsx'</code></span>
<span class="comment-copy">@Atinesh - Thank you for the feedback - <code>openpyxl.load_workbook</code> loads a workbook, which is already present. Create a file <code>New.xlsx</code> to avoid this error.</span>
<span class="comment-copy">OK Thank you for the suggestion</span>
