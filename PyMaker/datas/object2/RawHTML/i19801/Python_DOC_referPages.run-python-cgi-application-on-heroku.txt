<div class="post-text" itemprop="text">
<p>I made a simple application that makes use of Python CGI scripts. I have a working local version (works fine with lighttpd), but now I'd like to upload it to Heroku. The application consists of 2 or 3 scripts that make operations on a file and print information back to the browser, so I don't think I'll need any module other than CGI.</p>
<p>But the <a href="https://devcenter.heroku.com/articles/python">Heroku documentation</a> only explains how to upload Python applications with fancy web frameworks, and I'm not using any of those.</p>
<p>I want to know if it's possible to run CGI scripts on Heroku, and if so, how to do it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Heroku Cedar is centered around self-hosting web applications, so you need to be able to bundle your application together and run it as a single command.</p>
<p>I think the easiest way would be to port your application to Flask. It isn't very complicated, especially if it is only 2 or 3 scripts.</p>
<p>Another option (depending on your performance requirements) would be to use the simple <a href="http://docs.python.org/3/library/http.server#http.server.CGIHTTPRequestHandler" rel="noreferrer">CGI server</a> in the Python standard library and the <a href="https://github.com/heroku/heroku-buildpack-python" rel="noreferrer">Python buildpack</a>. I think you would need to bundle up your scripts in a ./cgi-bin directory and start the server (in the procfile) with: </p>
<pre><code> web: bin/python -m CGIHTTPServer $PORT
</code></pre>
<p>The most complex way would be to bundle lighttpd and your scripts together and write a shell script to start it all up. You would have to make sure your compiled binaries are compatible with Heroku. I would look at the <a href="https://github.com/heroku/heroku-buildpack-php" rel="noreferrer">PHP buildpack</a> as a starting point.</p>
</div>
<div class="post-text" itemprop="text">
<p>I inquired with Heroku support about a cgi application that I tried to serve on Heroku's platform and here's the response:</p>
<p>Hello,</p>
<p>Unfortunately, we don't support CGI-style applications, only pure-Python ones. You may have some luck playing around with the Python CGIHTTPServer module some more, but if it doesn't suit your needs, you may be out of luck.</p>
</div>
<div class="post-text" itemprop="text">
<p>To add to the top answer, for Python 3 the command in the <code>Procfile</code> should be this.</p>
<pre><code>web: python -m http.server --cgi $PORT
</code></pre>
</div>
<span class="comment-copy">Deploy it how you would static files, except into a CGI-enabled directory.</span>
<span class="comment-copy">I'm completely new to Heroku. I'm not sure how to get a CGI-enabled directory. They also mention something about virtualenv, not sure if I'd have to do that to upload the CGI files. If I understood correctly, I simply have to clone the git repo, copy the files to the root directory, commit, push and done?</span>
<span class="comment-copy">virtualenv has nothing (okay, very little) to do with it, and enabling CGI is a web server issue, not a Heroku issue per se.</span>
<span class="comment-copy">I didn't know Python had a web server with CGI support. That's pretty cool. I'll try the second or the third way, since I have little to none interest in porting the application.</span>
<span class="comment-copy">I hope it works out for you. I would try the CGI server locally first, to see if it is capable of running your scripts and also to work out the directory structure. Then figure out how to package it up for Heroku.</span>
<span class="comment-copy">The scripts don't use any weird Python construct, I guess they will work fine. I'll try the server locally and accept your answer when I upload everything. Thanks.</span>
<span class="comment-copy">At cuberoot, omit the <code>bin/</code> folder and your second option works. That is just call <code>web: python -m CGIHTTPServer $PORT</code>. I was getting an Application Error and changing that fixed it. Thanks for the great answer!</span>
