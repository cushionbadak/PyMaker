<div class="post-text" itemprop="text">
<p>I have two indexes:</p>
<pre><code>names=['Peter', 'Tom',  'Carl', 'Edward', 'Jake', 'Joe',  'Ken']

times=[10.01,    9.89,   9.91,    9.88,    9.91,   9.91,   9.90]
</code></pre>
<p>E.g Peter's time <strong>10.01</strong>, Tom's time <strong>9.89</strong> etc.</p>
<ol>
<li><p>Output the fastest runner name and time.</p></li>
<li><p>Input: Search by name and output his place and time</p></li>
</ol>
<p>Eg: </p>
<blockquote>
<p>Peter: 7th place (10.01)</p>
<p>Carl, Jake, Joe: 4th-6th place (9.91)</p>
</blockquote>
<p>For part 1, I have tried: </p>
<pre><code>fastest = times.index(min(times))   
print(names[fastest])
</code></pre>
<p>I don't know how to do part 2.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt; names=['Peter', 'Tom',  'Carl', 'Edward', 'Jake', 'Joe',  'Ken']
&gt;&gt; times=[10.01,    9.89,   9.91,    9.88,    9.91,   9.91,   9.90]
&gt;&gt;&gt; name_time_dict = dict(zip(names,times))
&gt;&gt; name_time_dict
'Ken': 9.9000000000000004, 'Jake': 9.9100000000000001, 'Edward': 9.8800000000000008,     Joe': 9.9100000000000001, 'Carl': 9.9100000000000001, 'Tom': 9.8900000000000006, 'Peter': 10.01}
&gt;&gt;&gt; times.sort()
&gt;&gt;&gt; times.index(name_time_dict['Joe'])+1
&gt;&gt;&gt; 4
&gt;&gt;&gt; times.index(name_time_dict['Peter'])+1
&gt;&gt;&gt; 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To be able to get a dictionary that stores runners sorted by their rank (place) you could use <a href="http://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>collections.OrderedDict</code></a>:</p>
<pre><code>#!/usr/bin/env python3
from collections import OrderedDict, namedtuple

Runner = namedtuple('Runner', "name time rank")

names = ['Peter', 'Tom',  'Carl', 'Edward', 'Jake', 'Joe',  'Ken']
times = [10.01,    9.89,   9.91,    9.88,    9.91,   9.91,   9.90]

runners = OrderedDict((name, Runner(name, time, rank))
    for rank, (time, name) in enumerate(sorted(zip(times, names)), start=1))
# 1 fastest
fastest_runner = next(iter(runners.values()))
print("fastest runner: {r.name} ({r.time})".format(r=fastest_runner))
# 2 by name
print("{r.name}: {r.rank}th place ({r.time})".format(r=runners['Peter']))
</code></pre>
<h3>Output</h3>
<pre><code>fastest runner: Edward (9.88)
Peter: 7th place (10.01)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>names=['Peter', 'Tom', 'Carl', 'Edward', 'Jake', 'Joe', 'Ken']
times=[10.01, 9.89, 9.91, 9.88, 9.91, 9.91, 9.90]
nk=zip(times,names)
nk.sort()
kk=lambda y: [a for a in list({z[0] for z in nk})].index(y)
my_contest={x[1]:{'time':x[0],'rank': kk(x[0])+1} for x in nk}
print nk
print my_contest
</code></pre>
<p>output:</p>
<pre><code>[(9.88, 'Edward'), (9.89, 'Tom'), (9.9, 'Ken'), (9.91, 'Carl'), (9.91, 'Jake'), (9.91, 'Joe'), (10.01, 'Peter')]

 {
    'Ken': {'rank': 3, 'time': 9.9},
    'Jake': {'rank': 4, 'time': 9.91},
    'Edward': {'rank': 1, 'time': 9.88},
    'Joe': {'rank': 4, 'time': 9.91},
    'Carl': {'rank': 4, 'time': 9.91},
    'Tom': {'rank': 2, 'time': 9.89},
    'Peter': {'rank': 5, 'time': 10.01}
    }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>names=['Peter', 'Tom',  'Carl', 'Edward', 'Jake', 'Joe',  'Ken']
times=[10.01, 9.89, 9.91,  9.88,  9.91, 9.91, 9.90]
</code></pre>
<p>To get the fastest runner name and time.</p>
<pre><code>fastest_time = min(times)
fastest_runner = names[times.index(fastest_time)]
</code></pre>
<p>You can also create dictionary and use it. To create dictionary</p>
<pre><code>dictionary = dict(zip(names,times))
</code></pre>
<p>To use the dictionary</p>
<pre><code>In: dictionary['Carl']
Out: 9.91
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>name = input() 
i = name.index(name)
t = times[i]
times.sort()
print(name + ':' + str(times.index(t)))
</code></pre>
</div>
<span class="comment-copy"><a href="http://mattgemmell.com/2008/12/08/what-have-you-tried/" rel="nofollow noreferrer">What have you tried?</a></span>
<span class="comment-copy">Lost this one :-)</span>
<span class="comment-copy">Code should be <b>readable</b> and efficient</span>
<span class="comment-copy">Inefficient solution - the proper way is either to have sorted data and/or a dictionary - you may have them both with SortedDictionary.</span>
<span class="comment-copy">It's obvious that, after creating the dictionary, you can manipulate it to the required format. It's just a suggestion/idea to build the code to the users own requirements.</span>
