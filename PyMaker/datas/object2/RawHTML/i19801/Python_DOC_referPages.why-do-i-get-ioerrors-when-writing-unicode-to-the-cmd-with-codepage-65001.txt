<div class="post-text" itemprop="text">
<p>I'm on the CMD in Windows 8 and I've set the codepage to 65001 (<code>chcp 65001</code>). I'm using Python 2.7.2 (ActivePython 2.7.2.5) and I've set the <em>PYTHONSTARTUP</em> environment variable to "bootstrap.py".</p>
<p><strong>bootstrap.py:</strong></p>
<pre><code>import codecs
codecs.register(
    lambda name: name == 'cp65001' and codecs.lookup('UTF-8') or None
)
</code></pre>
<p>This lets me print ASCII:</p>
<pre><code>&gt;&gt;&gt; print 'hello'
hello
&gt;&gt;&gt; print u'hello'
hello
</code></pre>
<p>But the errors I get when I try to print a Unicode string with non-ASCII characters makes no sense to me. Here I try to print a few strings containing Nordic symbols (I added the extra line break between the prints for readability):</p>
<pre><code>&gt;&gt;&gt; print u'æøå'
��øåTraceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 2] No such file or directory

&gt;&gt;&gt; print u'åndalsnes'
��ndalsnes

&gt;&gt;&gt; print u'åndalsnesæ'
��ndalsnesæTraceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 22] Invalid argument

&gt;&gt;&gt; print u'Øst'
��st

&gt;&gt;&gt; print u'uØst'
uØstTraceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 22] Invalid argument

&gt;&gt;&gt; print u'ØstÆØÅæøå'
��stÆØÅæøåTraceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 22] Invalid argument

&gt;&gt;&gt; print u'_ØstÆØÅæøå'
_ØstÆØÅæøåTraceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IOError: [Errno 22] Invalid argument
</code></pre>
<p>As you see it doesn't always raise an error (and doesn't even raise the same error every time), and the Nordic symbols is only displayed correctly occasionally.</p>
<p>Can somebody explain this behavior, or at least help me figure out how to print Unicode to the CMD correctly?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try This :</p>
<pre><code># -*- coding: utf-8 -*-
    from __future__ import unicode_literals
    print u'æøå'
</code></pre>
<p>Making use of  <strong>from __future__ import unicode_literals</strong> would be useful in <strong>an interactive python session</strong>. </p>
<p>It is certainly possible to write Unicode to the <strong>console</strong> successfully using <strong>WriteConsoleW</strong>. This works regardless of the console code page, including 65001. The code <a href="http://tahoe-lafs.org/trac/tahoe-lafs/browser/src/allmydata/windows/fixups.py" rel="nofollow noreferrer">here</a> does so (it's for Python 2.x, but you'd be calling WriteConsoleW from C anyway).</p>
<p>WriteConsoleW has one bug that I know of, which is that it <a href="http://tahoe-lafs.org/trac/tahoe-lafs/ticket/1232" rel="nofollow noreferrer">fails when writing more than 26608 characters at once</a>. That's easy to work around by limiting the amount of data passed in a single call.</p>
<p>Fonts are not Python's problem, but encoding is. It doesn't make sense to fail to output the right characters just because some users might not have selected fonts that can display those characters. This bug should be reopened.</p>
<p>(For completeness, it is possible to display Unicode on the console using fonts other than Lucida Console and Consolas, but it <a href="https://stackoverflow.com/questions/878972/windows-cmd-encoding-change-causes-python-crash/3259271#3259271">requires a registry hack</a>.) 
I hope it helps.</p>
</div>
<span class="comment-copy">This is a nightmare situation. And it's been discussed a gazillion times here on SO and elsewhere. For example: <a href="http://www.google.com/search?q=print+unicode+windows+console+python" rel="nofollow noreferrer">google.com/search?q=print+unicode+windows+console+python</a></span>
<span class="comment-copy">@DavidHeffernan: I've had a look through the search results and the closest thing I can find to a canonical answer is what the OP is already doing.  It seems to me that either this is a new variant or the question has never really been properly answered?</span>
<span class="comment-copy">At least there's improved support for Windows code pages in 3.3: <a href="http://docs.python.org/3/c-api/unicode.html#PyUnicode_EncodeCodePage" rel="nofollow noreferrer">PyUnicode_EncodeCodePage</a>. The latter is used by <code>codecs.code_page_encode</code>, which the new cp65001 codec uses to define <code>encode = functools.partial(codecs.code_page_encode, 65001)</code>, and similar for decoding.</span>
<span class="comment-copy">Currently the <code>PRINT_ITEM</code> op calls <code>PyFile_WriteObject</code>, which calls <code>PyObject_Print</code>, which eventually calls <code>PyString_Type.tp_print</code>, which writes to stdout using libc <code>fwrite</code>. At issue is a bug that causes the stdout <code>FILE</code> stream to have its error flag set, even though no error has occurred (hence the random 'errors' reported) because <code>write</code> returns the number of characters written instead of the number of bytes. You can verify this by using <code>os.write(sys.stdout.fileno(), s)</code>, where <code>s</code> is a non-ASCII UTF-8 string.</span>
<span class="comment-copy">This isn't an issue in Python 3 since it implements its own buffering (<code>_io.BufferedWriter</code>), and the underlying <code>_io.FileIO</code> does a low-level <code>write</code> to the target file descriptor.</span>
<span class="comment-copy">I believe WriteConsoleW is limited to UCS-2, i.e., you can't use characters from the supplementary planes.  But in most cases this shouldn't be a problem.</span>
