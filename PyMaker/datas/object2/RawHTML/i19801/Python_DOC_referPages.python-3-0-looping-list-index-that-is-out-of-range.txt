<div class="post-text" itemprop="text">
<p>Okay so basically, I need a bit of help with this very easy program I've threw together:</p>
<pre><code>from graphics import *

def main():
win = GraphWin("Text Window", 400, 600)
options = ["Hello", "How", "Are", "You"]
x = 200
y = 20
for i in range(4):
    message = Text(Point(x,y), options[i])
    message.draw(win)
    y = y + 30

main()
</code></pre>
<p>Don't worry about the 'graphics' module. It's part of John Zelle's Python book.
The point of this is I need to loop my range for 5 instead of 4, however, because 'options' is in [i], this particular program above will pull:</p>
<pre><code>    0: Hello
    1: How
    2: Are
    3: You
    4: ???
</code></pre>
<p>However, if I change the 4 to a 5, it will look for a 4th item in the list however it doesn't exist, so it will spit out an "IndexError: list index out of range"</p>
<p>What I want to achieve is, when the program reaches the end of the list, to loop back to the first (0) item in the list.</p>
<p>For example,</p>
<pre><code>    for i in range(8):
</code></pre>
<p>Would pull out:</p>
<pre><code>    0: Hello
    1: How
    2: Are
    3: You
    4: Hello
    5: How
    6: Are
    7: You
</code></pre>
<p>I have looked through this site and found some tools which haven't lead to any success, this includes the 'enumerate' function which I don't think will help.</p>
<p>If someone can shed some light on how to do this, it will be very welcome!
Hope I can do this without a nested loop aswell if this is at all possible.
Thanks you in advance for your help.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve this in one of two ways:</p>
<h1>1. <a href="http://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow"><code>itertools.cycle</code></a></h1>
<pre><code>c = itertools.cycle(options)
for i in range(anyNumber):
    message = Text(Point(x,y), next(c))
    message.draw(win)
    y = y + 30
</code></pre>
<h1>2. modulus</h1>
<pre><code>for i in range(anyNumber):
    message = Text(Point(x,y), options[i%len(options)])
    message.draw(win)
    y = y + 30
</code></pre>
<p><strong>EDIT</strong>:</p>
<p>From the conversation in the comments:</p>
<p>If you want to print the contents of the list 4 times here are a couple of ways to accomplish this:</p>
<pre><code>options = ["Hello", "How", "Are", "You"]
for i in range(4):
    for e,elem in enumerate(options):
        print("%d: %s" %(4*i+e, elem))
</code></pre>
<p>OR</p>
<pre><code>options = ["Hello", "How", "Are", "You"]
for e,elem in enumerate(itertools.chain.from_iterable(itertools.repeat(options,4))):
    print("%d: %s" %(e, elem))
</code></pre>
<p>OR</p>
<pre><code>options = ["Hello", "How", "Are", "You"]
for i in range(4):
    for j in range(len(options)):
        print("%d: %s" %(4*i+j, options[j]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this?</p>
<pre><code>from itertools import cycle, islice

options = ["Hello", "How", "Are", "You"]

for idx, option in enumerate(islice(cycle(options), 8)):
    print idx, option
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the modulo (%) operator:</p>
<pre><code>options = ["Hello", "How", "Are", "You"]
for i in range(8):
    print(options[i % len(options)])
</code></pre>
<p>yields</p>
<pre><code>Hello
How
Are
You
Hello
How
Are
You
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Firstly loop over the values, not indices. Python is designed to avoid looping with indices, and doing so is awkward, inefficient and ugly:</p>
<pre><code>for option in options:
    do_something(option)
</code></pre>
<p>is far better than:</p>
<pre><code>for option_index in range(len(options)):
    do_something(options[option_index])
</code></pre>
<p>To get your looping behaviour, look at <a href="http://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow">itertools.cycle()</a>:</p>
<pre><code>for option, _ in zip(itertools.cycle(options), range(x)):
    ...
</code></pre>
<p>Where <code>x</code> is the number of items you want. Here we use <code>range()</code> and <code>zip()</code> to stop repeating after the number of items is reached (throwing the values from range away).</p>
</div>
<span class="comment-copy">Thankyou everyone for you comments, especially you inspectorG4dget.  I was wondering if you could expand on the 'modulus' way of doing it! If for example, in range(5):, would produce: 'code'     0: Hello     1: How     2: Are     3: You     4: Hello 'code' This is what I want but if I was to put this into a nested loop, It would put 0 &amp; 4 which would produce 'Hello' twice in a row. Is there anyway around this?</span>
<span class="comment-copy">@MikeShiner: what would you like it to output when it hits <code>4</code>?</span>
<span class="comment-copy">Well 4 (Hello) would make the loop correct as 4 is supposed to be the same as 0, but in a nested loop, it will end on 4 and then redo the loop starting at 0 (which will make 'Hello' appear twice). I cannot see a way in which " len % " would work to stop this re-occurrence. Thus my next question, how would you cycle though a list in a nested loop (without the use of itertools). Thank you so much for your help. Code I'm discussing: <code>def real():     options = ["Hello", "How", "Are", "You"]     for i in range(4):         for j in range(5):             print(options[i % len(options)])</code></span>
<span class="comment-copy">It looks like you want to print the contents of the list 4 times (that's the reason you have the outer <code>for i in range(4)</code> loop. Is this correct?</span>
<span class="comment-copy">Yes, print the content of the list 4 times but after the first 'j' loop, I don't want to print the last string from the list since it is the same as the first. So I want to escape my program from producing: <code>Hello How Are You Hello Hello How Are You Hello Hello...</code> It is the double 'Hello' I am trying to get rid of, I only want the one. Thankyou!</span>
<span class="comment-copy">@inspectorG4dget  I would like to do this the Modulo way,  I was wondering if you could expand on the 'modulus' way of doing it! If for example, in range(5):, would produce:      0: Hello     1: How     2: Are     3: You     4: Hello  This is what I want but if I was to put this into a nested loop, It would put 0 &amp; 4 with would produce 'Hello' twice in a row. Is there anyway around this?</span>
