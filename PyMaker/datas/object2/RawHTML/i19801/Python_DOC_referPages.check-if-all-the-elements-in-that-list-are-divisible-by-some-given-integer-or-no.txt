<div class="post-text" itemprop="text">
<p>Given a list, I wanted to check if all the elements in that list are divisible by some given integer or not. Based on that, i have to return a boolean value.</p>
<pre><code>l=[10,30,40,20]
</code></pre>
<p>For example - all the elements of this list are divisible by 5. Then, I would return <code>True</code>.
For 6, I would have returned <code>False</code>.</p>
<p>One approach I could think of is to generate an array consisting off boolean values and then <code>AND</code> them.</p>
<pre><code>blist=[x%5==0 for x in l]
# [False, False, False, False]
# AND THE ELEMENTS
</code></pre>
<p>But this approach kind of feels bad. Can anyone suggest a more simple <code>pythonic</code> way out of this.</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, you want modulo division (<code>%</code>) as you want to see if it evenly divides by <code>5</code>, so you are checking for a remainder, not the result of division.</p>
<p>You can use <a href="http://docs.python.org/3/library/functions.html#all">the <code>all()</code> builtin</a> (which does what it says on the tin), but <a href="http://www.youtube.com/watch?v=pShL9DCSIUw">you don't need to generate a list, instead use a generator expression</a>:</p>
<pre><code>all(x%5 == 0 for x in l)
</code></pre>
<p>This has the advantage of being lazy, so as soon as a value isn't divisible it will return, saving computation</p>
</div>
<div class="post-text" itemprop="text">
<p>Using list comprehensions is pythonic.  And you need to use mod not div.</p>
<p>Use <code>all</code> built in</p>
<pre><code>res = all([x%5==0 for x in l])
</code></pre>
<p>You can do this more efficiently by </p>
<pre><code>res = all(x%5 == 0 for x in l)
</code></pre>
<p>which uses a generator expression.  In the first case python generates a list of all the mod values, in the second case the values are generated as they are needed by <code>all</code> and are hence only generated up to the first non-divisible value.</p>
</div>
<span class="comment-copy">Don't you mean <code>x % 5 == 0</code> not <code>x / 5 == 0</code>?</span>
<span class="comment-copy">Yups.. Thanks. I will correct it right away ..</span>
<span class="comment-copy">Get rid of the <code>blist=</code> and the brackets around the list comprehension.</span>
<span class="comment-copy">Traceback (most recent call last):   File "prog.py", line 2, in &lt;module&gt;     res = all(blist=[x/5==0 for x in l]) TypeError: all() takes no keyword arguments</span>
<span class="comment-copy">@StevenRumbalski yup,haven't had coffee yet...</span>
<span class="comment-copy">You mean <code>res = all([x/5==0 for x in l])</code> ??</span>
<span class="comment-copy">You also don't need the brackets: <code>all(x%5==0 for x in l)</code></span>
