<div class="post-text" itemprop="text">
<p>So I created a dictionary for setting difficulty level on a little game. </p>
<pre><code>diff_dict = {'easy':0.2, 'medium':0.1, 'hard':0.05} # difficulty level dict
</code></pre>
<p>Keys are going to be the difficulty names and the values some ratios that i would use to compute the difficulty.</p>
<p>So I was trying to figure out how to print only the keys to the user:</p>
<pre><code>print('\nHere are the 3 possible choices: ',diff_dict.keys())
</code></pre>
<p>this would print as: </p>
<pre><code>Here are the 3 possible choices:  dict_keys(['hard', 'easy', 'medium'])
</code></pre>
<p>Obviously I don't want to have the dictionary name displayed so I continued to search and I did find a solution which works:</p>
<pre><code>diff_keys = diff_dict.keys()
print ('\nHere are the 3 possible choices: ',list(diff_keys))
</code></pre>
<p>But I still want to know if there are other methods to achieve this, then why and so on. So here I go with the Qs:</p>
<ol>
<li><p>Can I achieve the same result without crating a new element,  such as diff_keys?</p></li>
<li><p>Why does <code>diff_dict.keys</code> display the dict. name? Am I doing something wrong?</p></li>
<li><p>On a side note, how can I print keys or other elements like lists, tuples, etc without the string quotes (')?</p></li>
<li><p>same as #3 above but the brackets ([ ])</p></li>
</ol>
<p>thanks and cheerio :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>The thing is, in Python 3 dict's method <code>keys()</code> does not return a list, but rather a special <a href="http://docs.python.org/3/library/stdtypes.html#dictionary-view-objects">view object</a>. That object has a <a href="http://docs.python.org/3/reference/datamodel.html#object.__str__">magic <code>__str__</code> method</a> that is called on an object under the hood every time you <code>print</code> that object; so for view objects created by calling <code>keys()</code> <code>__str__</code> is defined so that the resulting string includes <code>"dict_keys"</code>.</p>
<p>Look for yourself:</p>
<pre><code>In [1]: diff_dict = {'easy': 0.2, 'medium': 0.1, 'hard': 0.05}

In [2]: print('Here are the 3 possible choices:', diff_dict.keys())
Here are the 3 possible choices: dict_keys(['medium', 'hard', 'easy'])

In [3]: diff_dict.keys().__str__()
Out[3]: "dict_keys(['medium', 'hard', 'easy'])"
</code></pre>
<p>Note that 99.9% of the time you don't need to call this method directly, I'm only doing it to illustrate how things work.</p>
<p>Generally, when you want to print some data, you almost always want to do some <a href="http://docs.python.org/3/library/string.html#formatstrings">string formatting</a>. In this case, though, a simple <a href="http://docs.python.org/3/library/stdtypes.html#str.join"><code>str.join</code></a> will suffice:</p>
<pre><code>In [4]: print('Here are the 3 possible choices:', ', '.join(diff_dict))
Here are the 3 possible choices: medium, hard, easy
</code></pre>
<hr/>
<p>So, to answer you questions:</p>
<blockquote>
<p>Can I achieve the same result without crating a new element, such as diff_keys?</p>
</blockquote>
<p>An example is shown above.</p>
<blockquote>
<p>Why does diff_dict.keys display the dict. name? Am I doing something wrong?</p>
</blockquote>
<p>Because its <code>__str__</code> method works that way. This is what you have to deal with when printing objects "directly".</p>
<blockquote>
<p>how can I print keys or other elements like lists, tuples, etc without the string quotes (')?</p>
<p>same as #3 above but the brackets ([ ])</p>
</blockquote>
<p>Print them so that their <code>__str__</code> is not called. (Basically, don't print <strong>them</strong>.) Construct a string in any way you like, crafting your data into it, then print it. You can use string formatting, as well as lots of useful <a href="http://docs.python.org/3/library/stdtypes.html#string-methods">string methods</a>.</p>
</div>
<span class="comment-copy">the important point that is missing is <a href="http://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python">the difference between <code>__str__</code> and <code>__repr__</code></a>. dict_keys overrides <code>__repr__</code> (that is used for <code>__str__</code>). The purpose of <code>repr</code> also explains why it includes <code>'</code> for strings.</span>
<span class="comment-copy">@J.F.Sebastian Frankly speaking, I deliberately left it out to not overload the answer with details, as the OP seems to be new to Python and the use case doesn't really require complete understanding of the difference between <code>__repr__</code> and <code>__str__</code> (imho). So if you don't mind, I'd prefer not to edit this into the answer. It's good to have this as a reference for "further reading", though. Thank you for the comment :)</span>
<span class="comment-copy">@J.F.Sebastian: Actually, you have to go even more in depth to really answer #4: Calling <code>__str__</code> on a <code>list</code> or <code>tuple</code> calls <code>__repr__</code> rather than <code>__str__</code> on each of its elements. But I agree with Lev that this is perfectly fine in comments rather than the answer.</span>
<span class="comment-copy">Thanks a lot for the info, works great and i learned quite a few things. Could you please try answering this as well? why does str.join(dict) return the str keys ONLY, while i have to specify join(dict.values) to get the str values, is it that is just keys by default? what if i wanted to use str.join for both str keys AND values? Cheers.</span>
<span class="comment-copy">@Newbie There's another magic method to explain this and it's called <a href="http://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow noreferrer"><code>__iter__</code></a>. It defines what you get on each step when you iterate over the object. When you iterate over a dict, you get its keys. Take a look <a href="http://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">here</a> and scroll down to <code>iter(d)</code>. Also as a simple experiment you can try <code>for k in diff_dict: print(k)</code>. To get both keys and values there's <a href="http://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow noreferrer"><code>dict.items()</code></a>.</span>
