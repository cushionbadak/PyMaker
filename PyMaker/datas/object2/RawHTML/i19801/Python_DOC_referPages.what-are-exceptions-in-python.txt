<div class="post-text" itemprop="text">
<p>I've read three beginning level Python books, however, I still don't understand exceptions. </p>
<p>Could someone give me a high level explanation and/or point me in the right direction to a good tutorial for them?  </p>
<p>I guess I understand that exceptions are errors in code or process that cause the code to stop working. </p>
</div>
<div class="post-text" itemprop="text">
<p>In the old days, when people wrote in assembly language or C, every time you called a function that might fail, you had to check whether it succeeded. So you'd have code like this:</p>
<pre><code>def countlines(path):
    f = open(path, 'r')
    if not f:
        print("Couldn't open", path)
        return None
    total = 0
    for line in f:
        value, success = int(line)
        if not success:
            print(line, "is not an integer")
            f.close()
            return None
        total += value
    f.close()
    return total
</code></pre>
<p>The idea behind exceptions is that you don't worry about those exceptional cases, you just write this:</p>
<pre><code>def countlines(path):
    total = 0
    with open(path, 'r') as f:
        for line in f:
            total += int(line)
    return total
</code></pre>
<p>If Python can't open the file, or turn the line into an integer, it will raise an exception, which will automatically close the file, exit your function, and quit your whole program, printing out useful debugging information.</p>
<p>In some cases, you want to handle an exception instead of letting it quit your program. For example, maybe you want to print the error message and then ask the user for a different filename:</p>
<pre><code>while True:
    path = input("Give me a path")
    try:
        print(countlines(path))
        break
    except Exception as e:
        print("That one didn't work:", e)
</code></pre>
<p>Once you know the basic idea that exceptions are trying to accomplish, <a href="http://docs.python.org/3/tutorial/errors.html" rel="nofollow">the tutorial</a> has a lot of useful information.</p>
<p>If you want more background, <a href="http://en.wikipedia.org/wiki/Exception_handling" rel="nofollow">Wikipedia</a> can help (although the article isn't very useful until you understand the basic idea).</p>
<p>If you still don't understand, ask a more specific question.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best place to start with that is Python's <a href="http://docs.python.org/2/library/exceptions.html" rel="nofollow">list of built-in exceptions</a>, since most you'll see derive from that.</p>
<p>Keep in mind that anybody can throw any error they want over anything, and then catch it and dismiss it as well. Here's one quick snippet that uses exceptions for handling instead of if/else where <code>__get_site_file()</code> throws an exception if the file isn't found in any of a list of paths. Despite that particular exception, the code will still work. However, the code would throw an uncaught error that stops execution if the file exists but the permissions don't allow reading.</p>
<pre><code>def __setup_site_conf(self):                                                
    # Look for a site.conf in the site folder                              
    try:                                                                    
        path = self.__get_site_file('site.conf')                            
        self.__site_conf = open(path).read()                                
    except EnvironmentError:                                                
        self.__site_conf = self.__get_site_conf_from_template()             
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python's documentation: <a href="http://docs.python.org/2/tutorial/errors.html" rel="nofollow">http://docs.python.org/2/tutorial/errors.html</a></p>
<p>For a high-level explanation, say we want to divide <code>varA / varB</code>.  We know that <code>varB</code> can't equal 0, but we might not want to perform the check every time we do the division:</p>
<pre><code>if varB != 0:
  varA / varB
</code></pre>
<p>We can use exceptions to try the block without performing the conditional first, and then handle the behavior of the program based on whether or not something went wrong in the <code>try</code> block.  In the following code, if <code>varB == 0</code>, then 'oops' is printed to the console:</p>
<pre><code>try:
  varA / varB
except ZeroDivisionError:
  print 'oops'
</code></pre>
<p>Here is a list of exceptions that can be used: <a href="http://docs.python.org/2/library/exceptions.html#exceptions.BaseException" rel="nofollow">http://docs.python.org/2/library/exceptions.html#exceptions.BaseException</a></p>
<p>However, if you know how it may fail, you can just open a python console and see what exception is raised:</p>
<pre><code>&gt;&gt;&gt; 1 / 0
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Exceptions are not necessarily errors. They are things that get raised when the code encounters something it doesn't (immediately) know how to deal with. This may be entirely acceptable, depending on how you make your code. For instance, let's say you ask a user to put in a number. You then try to take that text (string) and convert it to a number (int). If the user put in, let's say, "cat", however, this will raise an exception. You could have your code handle that exception, however, and rather than break, just give the user a small message asking him to try again, and please use a number. Look at this link to see what I'm talking about: <a href="http://www.tutorialspoint.com/python/python_exceptions.htm" rel="nofollow">http://www.tutorialspoint.com/python/python_exceptions.htm</a>
Also, you usually handle exceptions with a try, except (or catch) block. Example:</p>
<pre><code>try:
    integer = int(raw_input("Please enter an integer: "))
except Exception, exc:
    print "An error has occured."
    print str(exc)
</code></pre>
<p>Hope it helps!</p>
</div>
<span class="comment-copy">Python doesn't have C style casts. Replace <code>(int)x</code> with <code>int(x)</code>.</span>
<span class="comment-copy">@DanD.: Well, this does have the virtue of showing off exceptions. Unfortunately, because the <code>SyntaxError</code> is going to be caught by an <code>except</code> handler that doesn't show what it's caught, the user is just going to see "You did not enter a number" before even being given a chance, so it's going to be a somewhat confusing lessonâ€¦</span>
<span class="comment-copy">@abarnert I admit that it is an example but the exception that is expected in this case would be that of <code>ValueError</code> when the input is not a number if not for the invalid syntax.</span>
<span class="comment-copy">@DanD.: Yes, that was my point; apologies for making it facetiously enough to confuse you. If you're not going to catch specific exceptions, you usually want to print/log/something the exception you did catch, because it's going to be next to impossible to debug silly problems like this one otherwise.</span>
