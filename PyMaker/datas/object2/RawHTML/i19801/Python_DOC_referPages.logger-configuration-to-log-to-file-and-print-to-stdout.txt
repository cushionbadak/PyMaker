<div class="post-text" itemprop="text">
<p>I'm using Python's logging module to log some debug strings to a file which works pretty well. Now in addition, I'd like to use this module to also print the strings out to stdout. How do I do this? In order to log my strings to a file I use following code:</p>
<pre><code>import logging
import logging.handlers
logger = logging.getLogger("")
logger.setLevel(logging.DEBUG)
handler = logging.handlers.RotatingFileHandler(
    LOGFILE, maxBytes=(1048576*5), backupCount=7
)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)
</code></pre>
<p>and then call a logger function like</p>
<pre><code>logger.debug("I am written to the file")
</code></pre>
<p>Thank you for some help here!</p>
</div>
<div class="post-text" itemprop="text">
<p>Just get a handle to the root logger and add the StreamHandler. The StreamHandler writes to stderr. Not sure if you really need stdout over stderr, but this is what I use when I setup the Python logger and I also add the FileHandler as well. Then all my logs go to both places (which is what it sounds like you want).</p>
<pre><code>import logging
logging.getLogger().addHandler(logging.StreamHandler())
</code></pre>
<p>You could also add a Formatter to it so all your log lines have a common header.</p>
<p>ie:</p>
<pre><code>import logging
logFormatter = logging.Formatter("%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")
rootLogger = logging.getLogger()

fileHandler = logging.FileHandler("{0}/{1}.log".format(logPath, fileName))
fileHandler.setFormatter(logFormatter)
rootLogger.addHandler(fileHandler)

consoleHandler = logging.StreamHandler()
consoleHandler.setFormatter(logFormatter)
rootLogger.addHandler(consoleHandler)
</code></pre>
<p>Prints to the format of:</p>
<pre><code>2012-12-05 16:58:26,618 [MainThread  ] [INFO ]  my message
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/logging.html#logging.basicConfig" rel="noreferrer"><code>logging.basicConfig()</code></a> can take a keyword argument <code>handlers</code> since Python 3.3, which simplifies logging setup a lot, especially when setting up multiple handlers with the same formatter:</p>
<blockquote>
<p><strong><code>handlers</code></strong> – If specified, this should be an iterable of already created handlers to add to the root logger. Any handlers which don’t already have a formatter set will be assigned the default formatter created in this function.</p>
</blockquote>
<p>The fairly long and verbose example code from the accepted answer therefore becomes just this:</p>
<pre class="lang-py prettyprint-override"><code>import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s",
    handlers=[
        logging.FileHandler("{0}/{1}.log".format(logPath, fileName)),
        logging.StreamHandler()
    ])
</code></pre>
<p>(Or with <code>import sys</code> + <code>StreamHandler(sys.stdout)</code> per original question's requirements.)</p>
<p>To get the logger, use</p>
<pre><code>logger = logging.getLogger()
</code></pre>
<p>Later in your script, use <code>logger.info()</code> to output useful logging messages.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding a StreamHandler without arguments goes to stderr instead of stdout. If some other process has a dependency on the stdout dump (i.e. when writing an NRPE plugin), then make sure to specify stdout explicitly or you might run into some unexpected troubles.</p>
<p>Here's a quick example reusing the assumed values and LOGFILE from the question:</p>
<pre><code>import logging
from logging.handlers import RotatingFileHandler
from logging import handlers
import sys

log = logging.getLogger('')
log.setLevel(logging.DEBUG)
format = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")

ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(format)
log.addHandler(ch)

fh = handlers.RotatingFileHandler(LOGFILE, maxBytes=(1048576*5), backupCount=7)
fh.setFormatter(format)
log.addHandler(fh)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Either run <code>basicConfig</code> with <code>stream=sys.stdout</code> as the argument prior to setting up any other handlers or logging any messages, or manually add a <code>StreamHandler</code> that pushes messages to stdout to the root logger (or any other logger you want, for that matter).</p>
</div>
<div class="post-text" itemprop="text">
<p>After having used Waterboy's code over and over in multiple Python packages, I finally cast it into a tiny standalone Python package, which you can find here:</p>
<p><a href="https://github.com/acschaefer/duallog" rel="nofollow noreferrer">https://github.com/acschaefer/duallog</a></p>
<p>The code is well documented and easy to use. Simply download the <code>.py</code> file and include it in your project, or install the whole package via <code>pip install duallog</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>For 2.7, try the following:  </p>
<pre><code>fh = logging.handlers.RotatingFileHandler(LOGFILE, maxBytes=(1048576*5), backupCount=7)
</code></pre>
</div>
<span class="comment-copy">You could also just initialize the <code>StreamHandler</code> with <code>sys.stdout</code>, and then it will log to that instead of stderr.</span>
<span class="comment-copy">@sr2222 logger.addHandler(sys.stdout) gives me NameError: name 'sys' is not defined</span>
<span class="comment-copy">Well yeah... you have to <code>import sys</code> first.  And actually initialize the handler, ie <code>consoleHandler = logging.StreamHandler(sys.stdout)</code></span>
<span class="comment-copy">@sr2222 This doesn't seem to work for me, I start getting seemingly unrelated errors once i include a "logger.addHandler(sys.stdout)"</span>
<span class="comment-copy">Because as I already said, that's not how you do it.  Create the HANDLER with sys.stdout, then attach the handler to the logger.</span>
<span class="comment-copy">One of those cases where the answer at the bottom was SO helpful!!!! Thanks</span>
<span class="comment-copy">don't forget to set level=logging.INFO or the desired level as well</span>
<span class="comment-copy">Definition for <code>FileHandler</code>: <code>logging.FileHandler(filename, mode='a', encoding=None, delay=False)</code>. This means, that when you just want to log in the same folder, you can just use <code>FileHandler("mylog.log")</code>. If you want to overwrite the log each time, set "w" as the second argument.</span>
<span class="comment-copy">I tried this, but the output file is empty although the console is giving the output.. Any suggestions..?</span>
<span class="comment-copy">This is the cleanest answer and the way to do it.</span>
<span class="comment-copy">Im trying this.</span>
<span class="comment-copy">hoops, see edit above, I just realized I didn't post it all...</span>
