<div class="post-text" itemprop="text">
<p>I want to use Python 3.3 with unit tests in small self-contained program, i.e. I don't want to split it up into a command line part and a "functional" part, which can be tested if it is started on itself on the command line.</p>
<p>So I have this little program:</p>
<pre><code>import unittest

def stradd(a, b):
   return a + b

class test_hello(unittest.TestCase):
   def test_1(self):
      self.assertEqual(stradd("a", "b"), "ab")

unittest.main()
print(stradd("Hello, ", "world"))
</code></pre>
<p>Unfortunately, the print() is never reached, since unittest.main() exits the program.  And even if it would not exit, it would print all kinds of output to the screen that I don't want to see in normal operation.</p>
<p>Is there a way to run the tests silently, as long as there is no error?  Of course, they should complain loudly if something doesn't work.</p>
<p>I've seen <a href="https://stackoverflow.com/q/9831749/1045800">Run python unit tests as an option of the program</a>, but that doesn't answer my question as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is possible to achieve the effect you want with a plain <code>unittest</code> module. You just need to write your own simple test runner. Like this:</p>
<pre class="lang-py prettyprint-override"><code>import unittest

def stradd(a, b):
    return a + b

class test_hello(unittest.TestCase):
    def test_1(self):
        self.assertEqual(stradd("a", "b"), "ab")


def run_my_tests(test_case):
    case = unittest.TestLoader().loadTestsFromTestCase(test_case)
    result = unittest.TestResult()
    case(result)
    if result.wasSuccessful():
        return True
    else:
        print("Some tests failed!")
        for test, err in result.failures + result.errors:
            print(test)
            print(err)
        return False


if run_my_tests(test_hello):
    # All tests passed, so we can run our programm.
    print(stradd("Hello, ", "world"))
</code></pre>
<p><code>run_my_tests</code> function will return <code>True</code> if all tests pass successfully. But if there is a test failure, it will print all errors/failures to stdout. For example:</p>
<pre><code>$ python myscript.py 
Hello, world

$ # And now the test fails...
$ python myscript.py 
Some tests failed!
test_1 (__main__.test_hello)
Traceback (most recent call last):
  File "myscript.py", line 8, in test_1
    self.assertEqual(stradd("a", "c"), "ab")
AssertionError: 'ac' != 'ab'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use python's <a href="https://nose.readthedocs.org/en/latest/" rel="nofollow">nosetests</a> or <a href="http://pytest.org/latest/" rel="nofollow">py.test</a>. Then you can write the code exactly the way you want to - with <em>nothing</em> except <code>test_</code> functions added to the program and run tests via</p>
<pre><code>$ nosetests filename.py
</code></pre>
<p>or</p>
<pre><code>$ py.test filename.py
</code></pre>
<p>Also yeah no need of classes then:</p>
<pre><code>def test():
    assert stradd("a", "b") == "ab"
</code></pre>
<p>Though it doesn't answer you "run silently" part. For me this + command line history works fine. For tiny programs ofc, basically snippets.</p>
</div>
<div class="post-text" itemprop="text">
<p>Other test frameworks won't help here because it's not test framework which is an issue here. Having said that <code>py.test</code> is the best one out there :).</p>
<p>The problem is <code>unittest.main()</code> function is designed specifically to run tests in a standard way and does not offer a way to customize this process in any way. This leaves us with two options</p>
<ul>
<li>Use <code>subprocess</code> for running tests in separate process using <code>unittest.main()</code>, check the
output and continue with running our program if all tests passed</li>
<li>Leave high level <code>unittest.main()</code> alone and use other facilities
provided by unittest module</li>
</ul>
<p>I'll write about both of these options as soon as I find some more free time.</p>
</div>
<span class="comment-copy">If these are simple tests, maybe <a href="http://docs.python.org/3/library/doctest.html" rel="nofollow noreferrer">doctest</a> is an easier option?</span>
<span class="comment-copy">Why doesn't the question you linked answer your question?</span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/q/7181134/95735">Run Python unittest so that nothing is printed if successful, only AssertionError() if fails</a></span>
