<div class="post-text" itemprop="text">
<p>I am making a class that relies heavily on regular expressions.</p>
<p>Let's say my class looks like this:</p>
<pre><code>class Example:
    def __init__(self, regex):
        self.regex = regex

    def __repr__(self):
        return 'Example({})'.format(repr(self.regex.pattern))
</code></pre>
<p>And let's say I use it like this:</p>
<pre><code>import re

example = Example(re.compile(r'\d+'))
</code></pre>
<p>If I do <code>repr(example)</code>, I get <code>'Example('\\\\d+')'</code>, but I want <code>'Example(r'\\d+')'</code>. Take into account the extra backslash where that upon printing, it appears correctly. I suppose I could implement it to return <code>"r'{}'".format(regex.pattern)</code>, but that doesn't sit well with me. In the unlikely event that the Python Software Foundation someday changes the manner for specifying raw string literals, my code won't reflect that. That's hypothetical, though. My main concern is whether or not this always works. I can't think of an edge case off the top of my head, though. Is there a more formal way of doing this?</p>
<p>EDIT: Nothing seems to appear in the <a href="http://docs.python.org/3/library/string.html#formatspec">Format Specification Mini-Language</a>, the <a href="http://docs.python.org/3/library/stdtypes.html?highlight=str#printf-style-string-formatting"><code>printf</code>-style String Formatting guide</a>, or the <a href="http://docs.python.org/3/library/string.html"><code>string</code> module</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with rawstring representation is, that you cannot represent everything in a portable (i.e. without using control characters) manner. For example, if you had a linebreak in your string, you had to literally break the string to the next line, because it cannot be represented as rawstring.</p>
<p>That said, the actual way to get rawstring representation is what you already gave:</p>
<pre><code>"r'{}'".format(regex.pattern)
</code></pre>
<p>The definition of rawstrings is that there are no rules applied except that they end at the quotation character they start with and that you can escape said quotation character using a backslash. Thus, for example, you cannot store the equivalent of a string like <code>"\"</code> in raw string representation (<code>r"\"</code> yields SyntaxError and <code>r"\\"</code> yields <code>"\\\\"</code>).</p>
<p>If you really want to do this, you should use a wrapper like:</p>
<pre><code>def rawstr(s):
    """
    Return the raw string representation (using r'') literals of the string
    *s* if it is available. If any invalid characters are encountered (or a
    string which cannot be represented as a rawstr), the default repr() result
    is returned.
    """
    if any(0 &lt;= ord(ch) &lt; 32 for ch in s):
        return repr(s)

    if (len(s) - len(s.rstrip("\\"))) % 2 == 1:
        return repr(s)

    pattern = "r'{0}'"
    if '"' in s:
        if "'" in s:
            return repr(s)
    elif "'" in s:
        pattern = 'r"{0}"'

    return pattern.format(s)
</code></pre>
<p>Tests:</p>
<pre><code>&gt;&gt;&gt; test1 = "\\"
&gt;&gt;&gt; test2 = "foobar \n"
&gt;&gt;&gt; test3 = r"a \valid rawstring"
&gt;&gt;&gt; test4 = "foo \\\\\\"
&gt;&gt;&gt; test5 = r"foo \\"
&gt;&gt;&gt; test6 = r"'"
&gt;&gt;&gt; test7 = r'"'
&gt;&gt;&gt; print(rawstr(test1))
'\\'
&gt;&gt;&gt; print(rawstr(test2))
'foobar \n'
&gt;&gt;&gt; print(rawstr(test3))
r'a \valid rawstring'
&gt;&gt;&gt; print(rawstr(test4))
'foo \\\\\\'
&gt;&gt;&gt; print(rawstr(test5))
r'foo \\'
&gt;&gt;&gt; print(rawstr(test6))
r"'"
&gt;&gt;&gt; print(rawstr(test7))
r'"'
</code></pre>
</div>
<span class="comment-copy">+1 Though the implementation is flawed (assumes ASCII, does not catch <i>all</i> instances of an odd number of backslashes at the end of the string) and the rest is ugly (how about <code>if any(&lt;condition involving c&gt; for c in s)</code>?).</span>
<span class="comment-copy">good point, didn't think about the general problem of an odd number of backslashes, I'll try to extend that.</span>
<span class="comment-copy">Just got done playing around with your code. This is impressive! I didn't even think about the control characters. I see that your function falls back to the normal string representation in the event of a control character. By the way, <code>filter</code> returns an iterator, so there's no need to call <code>iter</code>. :) Thank you.</span>
<span class="comment-copy">@TylerCrompton Thanks for thanking! <code>filter</code>: That's dependent on the python version. In Python2, it'll be a list.</span>
<span class="comment-copy">@delnan Oh, didn't even think about <code>any</code>. Thanks for the suggestion. Cannot fix the other condition without using itertools though. With itertools, i'd do a <code>sum(map(lambda x: 1, takewhile(lambda x: x == "\\", reversed(s))))</code> off the top of my head.</span>
