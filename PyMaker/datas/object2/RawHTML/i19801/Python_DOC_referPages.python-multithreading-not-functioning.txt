<div class="post-text" itemprop="text">
<p>Excuse the unhelpful variable names and unnecessarily bloated code, but I just quickly whipped this together and haven't had time to optimise or tidy up yet.</p>
<p>I wrote this program to dump all the images my friend and I had sent to each other using a webcam photo sharing service ( 321cheese.com ) by parsing a message log for the URLs. The <strong>problem</strong> is that my multithreading doesn't seem to work.</p>
<p>At the bottom of my code, you'll see my commented-out non-multithreaded download method, which consistently produces the correct results (which is 121 photos in this case). But when I try to send this action to a new thread, the program sometimes downloads 112 photos, sometimes 90, sometimes 115 photos, etc, but never gives out the correct result.</p>
<p>Why would this create a problem? Should I limit the number of simultaneous threads (and how)?</p>
<pre><code>import urllib
import thread

def getName(input):
    l = input.split(".com/")
    m = l[1]
    return m

def parseMessages():
    theFile = open('messages.html', 'r')
    theLines = theFile.readlines()
    theFile.close()
    theNewFile = open('new321.txt','w')
    for z in theLines:
        if "321cheese" in z:
            theNewFile.write(z)
    theNewFile.close()

def downloadImage(inputURL):
    urllib.urlretrieve (inputURL, "./grabNew/" + d)

parseMessages()

f = open('new321.txt', 'r')
lines = f.readlines()
f.close()

g = open('output.txt', 'w')

for x in lines:
  a = x.split("&lt;a href=\"")
  b = a[1].split("\"")
  c = b[0]
  if ".png" in c:
    d = getName(c)
    g.write(c+"\n")
    thread.start_new_thread( downloadImage, (c,) )
    ##downloadImage(c)

g.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple issues in your code.</p>
<p>The main issue is <code>d</code> global name usage in multiple threads. To fix it, pass the name explicitly as an argument to <code>downloadImage()</code>.</p>
<p>The easy way (code-wise) to limit the number of concurrent downloads is to use <a href="http://docs.python.org/3/library/concurrent.futures.html" rel="nofollow"><code>concurrent.futures</code></a> (available on Python 2 as <a href="http://pypi.python.org/pypi/futures" rel="nofollow"><code>futures</code></a>) or <code>multiprocessing.Pool</code>:</p>
<pre><code>#!/usr/bin/env python
import urllib
from multiprocessing import Pool
from posixpath import basename
from urllib import unquote
from urlparse import urlsplit


download_dir = "grabNew"

def url2filename(url):
    return basename(unquote(urlsplit(url).path).decode('utf-8'))

def download_image(url):
    filename = None
    try:
        filename = os.path.join(download_dir, url2filename(url))
        return urllib.urlretrieve(url, filename), None
    except Exception as e:
        return (filename, None), e

def main():
    pool = Pool(processes=10)
    for (filename, headers), error in pool.imap_unordered(download_image, get_urls()):
        pass # do something with the downloaded file or handle an error

if __name__ == "__main__":
   main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Did you make sure your parsing is working correctly?</p>
<p>Also, you are launching too many threads.</p>
<p>And finally... threads in python are FAKE! Use the multiprocessing module if you want real parallelism, but since the images are probably all from the same server, if you open one hundred connections at the same time with the same server, probably its firewall will start dropping your connections.</p>
</div>
<span class="comment-copy"><code>thread</code> module is deprecated by <code>threading</code> module</span>
<span class="comment-copy">CPython has GIL but Python threads are real OS threads. <code>multiprocessing</code> module can be used in general but it won't solve the OP's issue: invalid use of global variables in multiple threads.</span>
<span class="comment-copy">What are "python threads"? You must consider the underlying interpreter being used.</span>
