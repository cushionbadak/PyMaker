<div class="post-text" itemprop="text">
<p>While looking over some code in <a href="http://greenteapress.com/complexity/html/thinkcomplexity003.html#toc13" rel="noreferrer">Think Complexity</a>, I noticed their <code>Graph</code> class assigning values to itself.  I've copied a few important lines from that class and written an example class, <code>ObjectChild</code>, that fails at this behavior.</p>
<pre><code>class Graph(dict):
    def __init__(self, vs=[], es=[]):
        for v in vs:
            self.add_vertex(v)

        for e in es:
            self.add_edge(e)

    def add_edge(self, e):
        v, w = e
        self[v][w] = e
        self[w][v] = e

    def add_vertex(self, v):
        self[v] = {}

class ObjectChild(object):
    def __init__(self, name):
        self['name'] = name
</code></pre>
<p>I'm sure the different built in types all have their own way of using this, but I'm not sure whether this is something I should try to build into my classes.  Is it possible, and how?  Is this something I shouldn't bother with, relying instead on simple composition, e.g. <code>self.l = [1, 2, 3]</code>?  Should it be avoided outside built in types?</p>
<p>I ask because I was told "You should almost never inherit from the builtin python collections"; advice I'm hesitant to restrict myself to.</p>
<p>To clarify, I know that <code>ObjectChild</code> won't "work", and I could easily <em>make</em> it "work", but I'm curious about the inner workings of these built in types that makes their interface different from a child of <code>object</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Disclaimer : I might be wrong.</p>
<p>the notation :</p>
<pre><code>self[something]
</code></pre>
<p>is legit in the Graph class because it inherits fro dict. This notation is from the dictionnaries ssyntax not from the class attribute declaration syntax.</p>
<p>Although all namespaces associated with a class are dictionnaries, in your class ChildObject, self isn't a dictionnary. Therefore you can't use that syntax.</p>
<p>Otoh, in your class Graph, self IS a dictionnary, since it is a graph, and all graphs are dictionnaries because they inherit from dict.</p>
</div>
<div class="post-text" itemprop="text">
<p>They are accomplishing this magic by inheriting from <code>dict</code>. A better way of doing this is to inherit from <a href="http://docs.python.org/2/library/userdict.html" rel="noreferrer">UserDict</a> or the newer <a href="http://docs.python.org/2/library/collections.html#collections.MutableMapping" rel="noreferrer">collections.MutableMapping</a></p>
<p>You could accomplish a similar result by doing the same:</p>
<pre><code>import collections

class ObjectChild(collections.MutableMapping):
    def __init__(self, name):
        self['name'] = name
</code></pre>
<p>You can also define two special functions to make your class dictionary-like: <code>__getitem__(self, key)</code> and <code>__setitem__(self, key, value)</code>. You can see an example of this at <a href="http://www.diveintopython.net/object_oriented_framework/special_class_methods.html" rel="noreferrer">Dive Into Python - Special Class Methods</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Is using something like this ok?</p>
<pre><code>def mk_opts_dict(d):
    ''' mk_options_dict(dict) -&gt; an instance of OptionsDict '''
    class OptionsDict(object):
        def __init__(self, d):
            self.__dict__ = d

        def __setitem__(self, key, value):
            self.__dict__[key] = value

        def __getitem__(self, key):
            return self.__dict__[key]

    return OptionsDict(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your ObjectChild doesn't work because it's not a subclass of dict. Either of these would work:</p>
<pre><code>class ObjectChild(dict):
    def __init__(self, name):
        self['name'] = name
</code></pre>
<p>or</p>
<pre><code>class ObjectChild(object):
    def __init__(self, name):
        self.name = name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I realize this is an old post, but I was looking for some details around item assignment and stumbled upon the answers here. <a href="https://stackoverflow.com/a/28302871/10818718">Ted's post</a> wasn't completely wrong. To avoid inheritance from dict, you can make a class inherit from <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping" rel="nofollow noreferrer">MutableMapping</a>, and then provide methods for <code>__setitem__</code> and <code>__getitem__</code>. </p>
<p>Additionally, the class will need to support methods for <code>__delitem__</code>, <code>__iter__</code>, <code>__len__</code>, and (optionally) other inherited mixin methods, like <code>pop</code>. The documentation has more info on the details.</p>
<pre><code>from collections.abc import MutableMapping
class ItemAssign(MutableMapping):
    def __init__(self, a, b):
        self.a = a
        self.b = b
    def __setitem__(self, k, v):
        if k == "a":
            self.a = v
        if k == "b":
            self.b = v
    def __getitem__(self, k):
        if k == "a":
            return self.a
        if k == "b":
            return self.b
    def __len__(self):
        return 2
    def __delitem__(self, k):
        self[k] = None
    def __iter__(self):
        yield self.a
        yield self.b
</code></pre>
<p>Example use:</p>
<pre><code>&gt;&gt;&gt; x = ItemAssign("banana","apple")
&gt;&gt;&gt; x["a"] = "orange"
&gt;&gt;&gt; x.a
'orange'
&gt;&gt;&gt; del x["a"]
&gt;&gt;&gt; print(x.a)
None
&gt;&gt;&gt; x.pop("b")
'apple'
&gt;&gt;&gt; print(x.b)
None
</code></pre>
<p>Hope this serves to clarify how to properly implement item assignment for others stumbling across this post :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to inherit from dict.  If you provide <strong>setitem</strong> and <strong>getitem</strong> methods, you also get the desired behavior I believe.</p>
<pre><code>class a(object):
    def __setitem__(self, k, v):
        self._data[k] = v
    def __getitem__(self, k):
        return self._data[k]
    _data = {}
</code></pre>
</div>
<span class="comment-copy">This is tangential to your question, but using <code>[]</code> as a default argument value is likely to cause surprises.  See <a href="http://stackoverflow.com/questions/1132941/least-astonishment-in-python-the-mutable-default-argument">this question</a>.</span>
<span class="comment-copy">I'm getting the idea from you all that inheriting from dict, or list, or tuple is the expected style in Python.  It also looks like some of their behavior might be different and require inheritance because they're written in c, rather than in Python.  Let me know if I'm wrong!</span>
<span class="comment-copy">I'll look into these.  Thank you.</span>
<span class="comment-copy">I think <code>UserDict</code> is obsolete (it's from the days when it was illegal to inherit from <code>dict</code>). <code>MutableMapping</code> also isn't something that provides item access (it's an <a href="http://docs.python.org/2/glossary.html#term-abstract-base-class" rel="nofollow noreferrer">Abstract Base Class</a>). You need to write (or inherit) <code>__getitem__</code> and <code>__setitem__</code> methods, if you want to implement dictionary- or list-like item assignment and access.</span>
<span class="comment-copy">Does not work. Downvoted because it would be such an easy thing to check.</span>
