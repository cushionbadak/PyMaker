<div class="post-text" itemprop="text">
<p>Hello I understand the concepts of adjacency list and matrix but I am confused as to how to implement them in Python:</p>
<p>An algorithm to achieve the following two examples achieve but without knowing the input from the start as they hard code it in their examples:</p>
<p>For adjacency list:</p>
<pre><code>    a, b, c, d, e, f, g, h = range(8) 
    N = [ 
     {b:2, c:1, d:3, e:9, f:4},    # a 
     {c:4, e:3},                   # b 
     {d:8},                        # c 
     {e:7},                        # d 
     {f:5},                        # e 
     {c:2, g:2, h:2},              # f 
     {f:1, h:6},                   # g 
     {f:9, g:8}                    # h 
   ] 
</code></pre>
<p>For adjacency matrix:</p>
<pre><code>    a, b, c, d, e, f, g, h = range(8) 
    _ = float('inf') 
    #     a b c d e f g h
    W = [[0,2,1,3,9,4,_,_], # a 
        [_,0,4,_,3,_,_,_], # b 
        [_,_,0,8,_,_,_,_], # c 
        [_,_,_,0,7,_,_,_], # d 
        [_,_,_,_,0,5,_,_], # e 
        [_,_,2,_,_,0,2,2], # f 
        [_,_,_,_,_,1,0,6], # g 
        [_,_,_,_,_,9,8,0]] # h
</code></pre>
<p>Again any help will be much appreciated, Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming:</p>
<pre><code>edges = [('a', 'b'), ('a', 'b'), ('a', 'c')]
</code></pre>
<p>Here's some code for the matrix:</p>
<pre><code>from collections import defaultdict

matrix = defaultdict(int)
for edge in edges:
    matrix[edge] += 1

print matrix['a', 'b']
</code></pre>
<pre><code>2
</code></pre>
<p>And for the "list":</p>
<pre><code>from collections import defaultdict

adj_list = defaultdict(lambda: defaultdict(lambda: 0))
for start, end in edges:
    adj_list[start][end] += 1

print adj_list['a']
</code></pre>
<pre><code>{'c': 1, 'b': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Setting up your data structures can be pretty simple. For instance, the adjacency list example can be implemented using a <code>defaultdict</code> like this:</p>
<pre><code>from collections import defaultdict

N = defaultdict(dict)
</code></pre>
<p>Then when you start getting input, just do <code>N[start][end] = weight</code> for each inputted edge. The set of nodes will be a little more tricky to come by, if you have some nodes with no outbound edges (you'll need to union the keys of the inner dictionaries with the outer one to be sure you have them all). But a lot of algorithms will work correctly even without a complete node list.</p>
<p>The adjacency matrix is a little more complicated, since you need to know the number of nodes there are in order to set its dimensions correctly. If you know it ahead of time, then its easy:</p>
<pre><code>number_of_nodes = 8
_ = float("inf")

N = [[_]*number_of_nodes for i in number_of_nodes]
</code></pre>
<p>If you don't, you'll probably want to scan over the edges you get as input to find the highest numbered node, then use the same code above to make the matrix. For instance, if your edges are provided as a list of <code>(start, end, weight)</code> 3-tuples, you can use this:</p>
<pre><code>number_of_nodes = max(max(start, end) for start, end, weight in edges)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I hope the below example helps you 
it has both Initialized Graph as well as user customized </p>
<pre><code>class Graph:
"""
  Read the Intialized Graph and Create a Adjacency list out of it 
   There could be cases where in the initialized graph &lt;map&gt; link
  issues are not maintained
   for example node 2 to 1 link 
    2-&gt;1
   there needs to be a link then since undirected Graph
    1-&gt;2
"""

def __init__(self,Graph_init):
    self.edge={}
    for keys,values in Graph_init.items():
         for value in values:
             self.addEdge(keys,value);

"""
Add a vertex to graph map
structure is
int =&gt; int list
"""
def addVertex(self,v):
    if v not in self.edge:
        self.edge[v]=[]
"""
Add Edge from both vertex to each other
Make sure the nodes are present   
</code></pre>
<p>"""<br/>
    def addEdge(self,u,v):
        if u not in self.edge:
            self.addVertex(u)
        if v not in self.edge:
            self.addVertex(v)
        if u not in self.edge[v]:
            self.edge[v].append(u)
        if v not in self.edge[u]:
            self.edge[u].append(v)</p>
<pre><code>def isEdge(self,u,v):
    if u not in self.edge:
        return False
    if v not in self.edge:
        return False 
    return  u in self.edge[v] 

def display(self):
    for keys,values in self.edge.items():
        print(keys,":=&gt;",values)

"""A initalized Graph (not in form of adjaceny list"""
Graph_init = {1:[2,3,5],
          2:[1,4],
          3:[1,6]};

"""Default constrcutor takes care of making the initialzed map to adjaceny 
list"""                 
g=Graph(Graph_init)
g.addVertex(1)
g.addVertex(2) 
g.addVertex(3)
g.addEdge(1,2)
g.addEdge(3,2)
g.display();
</code></pre>
</div>
<span class="comment-copy">"Without knowing the input" &lt;-- can you elaborate on this statement?</span>
<span class="comment-copy">For example I know that there is going to be an input in order to create the adjacency list or matrix but I don't know what the inputs are going to be, so basically in order to have an algorithm in which whenever I have an input of vertices and edges to creates the adjacency list or matrix...</span>
<span class="comment-copy">What does an infinity represent in an adjacency matrix?</span>
<span class="comment-copy">That is just an example of it amounting to infinity for a missing edge, you can disregard that and think of it as it representing no edge.</span>
<span class="comment-copy">Ok, so what does a 0 represent? To me, it seems you have them the wrong way around.</span>
<span class="comment-copy">Two of you have mentioned the defaultdict, and as I am new to Python I am not sure exactly what that means care to share some input on that? Thanks for the examples though they will help!</span>
<span class="comment-copy">@user1748026 The <a href="http://docs.python.org/3/library/collections.html" rel="nofollow noreferrer"><code>defaultdict</code></a> type works just like a dictionary, but you provide it with a "factory function" when you set it up. Then, if you access a key that doesn't exist, it will call the factory function to create a default value for that key.</span>
<span class="comment-copy">@Eric: I like your tuple index based solution for the matrix. For the list version, you can use <code>int</code> as the factory function for your inner <code>defaultdict</code>, rather than another lambda function.</span>
<span class="comment-copy">Thank you for your input, it seems there is a lot more I need to learn when it comes to ways you can code things in python, things like number_of_nodes = max(max(start, end) for start, end, weight in edges), thanks for the input and I am going to try to work with some of the things you have provided!</span>
<span class="comment-copy">Will this create adjacency matrix when say some rows are missing(like the nodes are 1 2 5 6 Will this create a 6X6 or 4x4 matrix?)</span>
