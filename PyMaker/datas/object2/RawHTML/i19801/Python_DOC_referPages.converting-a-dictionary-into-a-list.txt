<div class="post-text" itemprop="text">
<p>Example:</p>
<pre><code>something = {
    "1": {
        "2": {
            "3": {
                "4": {},
                "5": {},
                "7": {},
                },
            "8": {
                "9": {},
                "10": {}
            },
            "11": {
                "12": {
                    "13": {
                        "14": {
                            "15": {
                                "16": {
                                    "17": {
                                        "18": {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
</code></pre>
<p>I'm trying to convert this dictionary in to a list of items like this:</p>
<pre><code>['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18']
</code></pre>
<p>What method should I use?</p>
<p>I already tried something.items(), but what I got back was:</p>
<pre><code>[('1', {'2': {'11': {'12': {'13': {'14': {'15': {'16': {'17': {'18': {}}}}}}}}, '8': {'9': {}, '10': {}}, '3': {'5': {}, '4': {}, '7': {}}}})]
</code></pre>
<p>This is my first time posting here, so if I did anything wrong please let me know.</p>
<p>Thank you and sorry for the weird post.</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll need to use a function to flatten your structure:</p>
<pre><code>def flatten(d):
    for key, value in d.iteritems():
        yield key
        for sub in flatten(value):
            yield sub
</code></pre>
<p>(The <code>.iteritems()</code> should be replaced with <code>.items()</code> if you are using Python 3).</p>
<p>On python 3.3 and newer, you can also use the new <a href="http://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="noreferrer"><code>yield from</code> syntax</a>:</p>
<pre><code>def flatten(d):
    for key, value in d.items():
        yield key
        yield from flatten(value)
</code></pre>
<p>This will recursively yield all the keys. To turn that into a list use:</p>
<pre><code>list(flatten(elements))
</code></pre>
<p>Since Python dictionaries are unordered, the ordering of the keys returned is not going to be sorted. You'll have to explicitly sort the result if you want your keys to have a specific ordering.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>something = {'1': {'2': {'11': {'12': {'13': {'14': {'15': {'16': {'17': {'18': {}}}}}}}}, '3': {'4': {}, '5': {}, '7': {}}, '8': {'10': {}, '9': {}}}}}
a = []

def flatten(d,a):
    for k,v in d.items():
        a.append(k)
        flatten(v, a)
flatten(something, a)

# a == ['1', '2', '11', '12', '13', '14', '15', '16', '17', '18', '8', '9', '10', '3', '5', '4', '7']"
</code></pre>
</div>
<span class="comment-copy">So you want a <i>sorted</i> list from the keys of a number of nested dictionaries, discarding any duplicates in the process. Is that about it?</span>
<span class="comment-copy">+1, <code>yield</code> makes the function slimmer.</span>
<span class="comment-copy">Thank you very much, it worked.</span>
