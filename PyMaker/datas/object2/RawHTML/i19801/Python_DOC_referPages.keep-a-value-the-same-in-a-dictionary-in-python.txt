<div class="post-text" itemprop="text">
<p>Bit of a Python newbie but is it possible to do the following?</p>
<pre><code>&gt;&gt;&gt;random_dict=dict(a=2)
&gt;&gt;&gt;addOnlyOneValue(random_dict)
{'a': 3}
&gt;&gt;&gt;addOnlyOneValue(random_dict)
{'a': 3}
</code></pre>
<p>What I've done:</p>
<pre><code>def addOnlyOneValue(random_dict):
    random_dict2=random_dict     #I thought random_dict and random_dict2 would be modified independently    
    for val in random_dict2.keys():
        random_dict2[val]+=1
    print (random_dict2)
</code></pre>
<p>But if I do this i get following:</p>
<pre><code>&gt;&gt;&gt;random_dict=dict(a=2)
&gt;&gt;&gt;addOnlyOneValue(random_dict)
{'a': 3}
&gt;&gt;&gt;addOnlyOneValue(random_dict)
{'a': 4}
</code></pre>
<p>Is it possible to somehow reset random_dict to its original value (here random_dict=dict(a=2)) in the addOnlyOneValue function?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you want to do is <a href="http://docs.python.org/3/library/stdtypes.html#dict.copy" rel="nofollow">copy()</a> the dictionary:</p>
<pre><code>random_dict2 = random_dict.copy()
</code></pre>
<p>In your example, you are just making <code>random_dict2</code> a reference to <code>random_dict</code> - what you want is to create a new one, with the same values (note that this is a shallow copy, so if your dictionary has mutable items, the new dictionary will point to those items still, which could cause seemingly weird behaviour).</p>
<p>Note that rather than looping manually, you could do this with a <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow">dictionary comprehension</a>:</p>
<pre><code>def addOnlyOneValue(random_dict):
    print({key: value+1 for key, value in random_dict.items()})
</code></pre>
<p>Dictionary comprehensions are the best way to create new dictionaries by modifying values from existing data structures.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assignment of a dictionary (or any other object except string or a number) to another variable results of assignment of a reference to that object, it does not create a copy. You might do:</p>
<pre><code>random_dict2 = dict(random_dict)
</code></pre>
<p>Similar for lists:</p>
<pre><code>my_copy = list(some_list)
</code></pre>
<p>Note that this copy is "shallow", that means that only list is copied and will contain references to the contained objects, not copies of the objects. Read more about <a href="http://docs.python.org/2/library/copy.html" rel="nofollow">copying in python</a>.</p>
</div>
