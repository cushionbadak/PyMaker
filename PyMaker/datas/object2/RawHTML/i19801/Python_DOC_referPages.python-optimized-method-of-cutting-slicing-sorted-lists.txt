<div class="post-text" itemprop="text">
<p>Is there any pre-made optimized tool/library in Python to cut/slice lists for values "less than" something?</p>
<p>Here's the issue: Let's say I have a list like:</p>
<pre><code>a=[1,3,5,7,9]
</code></pre>
<p>and I want to delete all the numbers which are <code>&lt;=</code> 6, so the resulting list would be</p>
<pre><code>[7,9]
</code></pre>
<p>6 is not in the list, so I can't use the built-in <code>index(6)</code> method of the list. I can do things like:</p>
<pre><code>#!/usr/bin/env python
a = [1, 3, 5, 7, 9]
cut=6
for i in range(len(a)-1, -2, -1):
    if a[i] &lt;= cut:
        break
b = a[i+1:]
print "Cut list: %s" % b
</code></pre>
<p>which would be fairly quick method if the index to cut from is close to the end of the list, but which will be inefficient if the item is close to the beginning of the list (let's say, I want to delete all the items which are <code>&gt;2</code>, there will be a lot of iterations).</p>
<p>I can also implement my own find method using binary search or such, but I was wondering if there's a more... wide-scope built in library to handle this type of things that I could reuse in other cases (for instance, if I need to delete all the number which are <code>&gt;=6</code>).</p>
<p>Thank you in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="http://docs.python.org/2/library/bisect.html" rel="noreferrer">bisect module</a> to perform a sorted search:</p>
<pre><code>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; a[bisect.bisect_left(a, 6):]
[7, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/2/library/bisect.html"><code>bisect.bisect_left</code></a> is what you are looking for, I guess.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to filter the list for all elements that fulfil a certain criterion, then the most straightforward way is to use the built-in <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> function.</p>
<p>Here is an example:</p>
<pre><code>a_list = [10,2,3,8,1,9]

# filter all elements smaller than 6:
filtered_list = filter(lambda x: x&lt;6, a_list)
</code></pre>
<p>the <code>filtered_list</code> will contain:</p>
<pre><code> [2, 3, 1]
</code></pre>
<p><strong>Note:</strong> This method does not rely on the ordering of the list, so for very large lists it might be that a method optimised for ordered searching (as <a href="http://docs.python.org/2/library/bisect.html" rel="nofollow noreferrer">bisect</a>) performs better in terms of speed.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Bisect left and right helper function</strong></p>
<pre><code>#!/usr/bin/env python3

import bisect

def get_slice(list_, left, right):
    return list_[
        bisect.bisect_left(list_, left):
        bisect.bisect_left(list_, right)
    ]

assert get_slice([0, 1, 1, 3, 4, 4, 5, 6], 1, 5) == [1, 1, 3, 4, 4]
</code></pre>
<p>Tested in Ubuntu 16.04, Python 3.5.2.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding to Jon's answer, if you need to actually delete the elements less than 6 and want to keep the same reference to the list, rather than returning a new one.</p>
<pre><code>del a[:bisect.bisect_right(a,6)]
</code></pre>
<p>You should note as well that <code>bisect</code> will only work on a sorted list.</p>
</div>
<span class="comment-copy">Check the <a href="http://docs.python.org/2/library/bisect.html" rel="nofollow noreferrer">bisect</a> module.</span>
<span class="comment-copy">Thanks for the working example code.</span>
<span class="comment-copy">Wish I'd known about this before writing my own 2 days ago.</span>
