<div class="post-text" itemprop="text">
<p>A common operation I perform is joining a list of lists of letters into a list of words (strings). </p>
<p>I normally use a list comprehension:</p>
<pre><code>lists_of_letters = [["m", "y"], ["d", "o", "g"], ["s", "k", "i", "p"]]
list_of_words = ["".join(a_list_of_letters) for a_list_of_letters in lists_of_letters]
# list_of_words == ["my", "dog", "skip"]
</code></pre>
<p>Or sometimes a little more functional:</p>
<pre><code>list_of_words = map(lambda x: "".join(x), lists_of_letters)
</code></pre>
<p>I'm wondering if there is a better way to write the function needed for the map call than using a lambda expression. I'm trying to learn the <a href="http://docs.python.org/3/library/operator.html" rel="nofollow">operator</a> and <a href="http://docs.python.org/3/library/functools.html" rel="nofollow">functools</a> to expand my python functional programming chops, but I can't seem to find a clear way to use them in this case.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this case you can actually just say <code>map(''.join, lists_of_letters)</code>:</p>
<pre><code>In [1]: lists_of_letters = [["m", "y"], ["d", "o", "g"], ["s", "k", "i", "p"]]
In [2]: map(''.join, lists_of_letters)
Out[2]: ['my', 'dog', 'skip']
</code></pre>
<p>because <code>''.join</code> is itself a function (a bound method on the empty string) that takes a single argument:</p>
<pre><code>In [3]: ''.join
Out[3]: &lt;built-in method join of str object at 0x100258620&gt;
</code></pre>
<p>That said, here it may not be better <em>per se</em> because it's a bit less readable IMO</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need the lambda function here:</p>
<pre><code>In [26]: map("".join, lists_of_letters)
Out[26]: ['my', 'dog', 'skip']
</code></pre>
</div>
<span class="comment-copy">Thanks, I completely forgot that bound methods were first class functions as well. Thats why I wasn't getting anywhere with <i>partial</i>.</span>
