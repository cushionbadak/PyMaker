<div class="post-text" itemprop="text">
<p>Is it possible to 'rollback' the random number generator by a specified number of steps to a earlier state to get repeated random numbers?</p>
<p>I want to be able to do something like this:</p>
<pre><code>print(random.random())
0.5112747213686085
print(random.random())
0.4049341374504143
print(random.random())
0.7837985890347726

random.rollback(2) #go back 2 steps

print(random.random())
0.4049341374504143
print(random.random())
0.7837985890347726
</code></pre>
<p>My only current idea to accomplish this is to store all generated random numbers into a list to go back to. However, I would personally prefer a method that does not involve doing so because I plan on generating a pretty large amount of random numbers while this function won't be used that often.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to take a look at <a href="http://docs.python.org/3/library/random.html#random.getstate" rel="nofollow"><code>random.getstate()</code></a> and <a href="http://docs.python.org/3/library/random.html#random.setstate" rel="nofollow"><code>random.setstate()</code></a>. Combine this with keeping track of the number of items generated and it's pretty simple to do what you want.</p>
<p>Note that you would have to be careful about other code using <code>random</code> if you relied on this, so I would suggest making a <code>random.Random()</code> instance to use to avoid this.</p>
<blockquote>
<p>The functions supplied by this module are actually bound methods of a
  hidden instance of the random.Random class. You can instantiate your
  own instances of Random to get generators that donâ€™t share state.</p>
</blockquote>
<p>(from the docs)</p>
<p>Example implementation:</p>
<pre><code>from itertools import islice
import collections
from random import Random

def consume(iterator, n):
    "Advance the iterator n-steps ahead. If n is none, consume entirely."
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)

class RewindRandom:
    def __init__(self):
        self._random = Random()
        self._state = self._random.getstate()
        self._count = 0

    def __iter__(self):
        while True:
            yield self._random.random()

    def __call__(self):
        self._count += 1
        return next(iter(self))

    def rollback(self, amount):
        self._random.setstate(self._state)
        consume(self, self._count-amount)
        self._count -= amount
</code></pre>
<p>Which can be used like so:</p>
<pre><code>random = RewindRandom()

&gt;&gt;&gt; random()
0.31276818768213244
&gt;&gt;&gt; random()
0.7031210824422215
&gt;&gt;&gt; random()
0.7196351574136909
&gt;&gt;&gt; random.rollback(2)
&gt;&gt;&gt; random()
0.7031210824422215
&gt;&gt;&gt; random()
0.7196351574136909
&gt;&gt;&gt; random()
0.6582894948982371
</code></pre>
</div>
<span class="comment-copy">Why would you want to do that? Can't you re-seed the generator with the same seed?</span>
<span class="comment-copy">"to store all generated random numbers into a list to go back to." - a nice solution, I'd stick with it.</span>
<span class="comment-copy">To clarify, I want to be able to go back at any arbitrary point. From what I can see, random.getstate() and random.setstate() only allows me to go back to fixed points unless if I'm saving every single state (in which case, I would rather be saving all the random numbers). I'm using the random numbers as arguments into a number of functions, and the idea is that if the user doesn't like the result for one function that specific random number gives, the user can redo it with a different function.</span>
<span class="comment-copy">This is right in principle, but note that random state is a lot larger than a single random int; so if you need to be able to rewind to any position, you are in fact better off saving the output, not the states. If you'll only have a few stopping points in a very long sequence, this is perfect.</span>
<span class="comment-copy">@alexis You only need to store one state and an number, you store the initial state keep track of the number of random numbers requested, then when you want to revert, you go back to the state then consume (<code>itertools</code> has a good <code>consume()</code> recipe) <code>number_of_random_numbers_used - rewind_amount</code> random numbers to get to the point you want.</span>
<span class="comment-copy">I understood the OP to want random access, not rewind and replay (which can become slow with long sequences). So checkpointing intermediate state, as I thought you were suggesting, seems right if there are not too many checkpoints.</span>
<span class="comment-copy">It's pretty unclear what the OP wants from this, check-pointing could be a good strategy, if the OP knows beforehand where he wants to return to.</span>
<span class="comment-copy">Haha, indeed it's pretty unclear. By the way, +1 for addressing the shared state between consumers of random.</span>
