<div class="post-text" itemprop="text">
<p>this is my code, I want to use <code>eval()</code> to get the rule status but <code>eval()</code> needs local variables, there is many classes that inherits the base class, so I need to rewrite <code>get_stat()</code> in every class.</p>
<p>I want to avoid this, an idea is to create dynamic variables in <code>get_stat()</code>,eg. class b dynamically creates variables a and b in func <code>get_stat()</code></p>
<p>How should I create dynamic varables in function? or any other way to avoid this stupid idea. I use python 3.2.3, <code>locals()</code> does not work</p>
<pre><code>class base(object):
    def check(self):
        stat = get_stat()
    def get_stat(self):
        pass

class b(base):
    rule = 'a &gt; 5 and b &lt; 3'
    a = 0
    b = 0

    def update_data(self, a, b):
        self.a = a
        self.b = b

    def get_stat(self):
        a = self.a
        b = self.b
        return eval(rule)

class b(base):
    rule = 'd &gt; 5 and e &lt; 3'
    d = 0
    e = 0

    def update_data(self, d, e):
        self.d = d
        self.e = e

    def get_stat(self):
        d = self.d
        e = self.e
        return eval(rule)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can pass a dictionary to the <code>eval()</code> function containing the variables to evaluate the expression against:</p>
<pre><code>&gt;&gt;&gt; eval("a + b", {"a": 2, "b": 3})
5
</code></pre>
<p>Pass <code>self.__dict__</code> to give access to an object's attributes:</p>
<pre><code>&gt;&gt;&gt; class MyClass(object):
...     def __init__(self):
...             self.a = 2
...             self.b = 3
... 
&gt;&gt;&gt; obj = MyClass()
&gt;&gt;&gt; obj.__dict__
{'a': 2, 'b': 3}
&gt;&gt;&gt; eval("a + b", obj.__dict__)
5
</code></pre>
<p>Links:</p>
<ul>
<li><a href="http://docs.python.org/3/library/functions.html#eval" rel="nofollow">eval</a></li>
<li><a href="http://docs.python.org/3/library/stdtypes.html#object.__dict__" rel="nofollow"><code>__dict__</code></a></li>
</ul>
</div>
<span class="comment-copy">i don't see what's dynamic here! You're still re-writing <code>rule</code> for every class, you might as well just re-write the function</span>
<span class="comment-copy">@vikki: I suppose it's dynamic in the sense that the <code>rule</code> attribute of each subclass can be changed on-the-fly and <code>get_stat()</code> will return results based on it's current value. You're right about the fact that <code>rule</code> could just as well be made a method, although the syntax needed to change it might not be as convenient or clean looking as would be this way.</span>
<span class="comment-copy">I like <code>vars(obj)</code> better</span>
<span class="comment-copy">I think to be crystal clear you should state that they could use <code>return eval(rule, self.__dict__)</code> or <code>return eval(rule, vars(self))</code>.</span>
<span class="comment-copy">thank you, it is what i want</span>
