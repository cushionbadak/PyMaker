<div class="post-text" itemprop="text">
<p>I am parsing some data where the standard format is something like <code>10 pizzas</code>. Sometimes, data is input correctly and we might end up with <code>5pizzas</code> instead of <code>5 pizzas</code>.  In this scenario, I want to parse out the number of pizzas.</p>
<p>The na√Øve way of doing this would be to check character by character, building up a string until we reach a non-digit and then casting that string as an integer.</p>
<pre><code>num_pizzas = ""
for character in data_input:
   if character.isdigit():
      num_pizzas += character
   else:
      break
num_pizzas = int(num_pizzas)
</code></pre>
<p>This is pretty clunky, though.  Is there an easier way to split a string where it switches from numeric digits to alphabetic characters?</p>
</div>
<div class="post-text" itemprop="text">
<p>You ask for a way to split a string on digits, but then in your example, what you actually want is just the first numbers, this done easily with <a href="http://docs.python.org/3/library/itertools.html#itertools.takewhile"><code>itertools.takewhile()</code></a>:</p>
<pre><code>&gt;&gt;&gt; int("".join(itertools.takewhile(str.isdigit, "10pizzas")))
10
</code></pre>
<p>This makes a lot of sense - what we are doing is taking the character from the string while they are digits. This has the advantage of stopping processing as soon as we get to the first non-digit character.</p>
<p>If you need the later data too, then what you are looking for is <a href="http://docs.python.org/3/library/itertools.html#itertools.groupby"><code>itertools.groupby()</code></a> mixed in with a simple <a href="http://www.youtube.com/watch?v=pShL9DCSIUw">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; ["".join(x) for _, x in itertools.groupby("dfsd98sd8f68as7df56", key=str.isdigit)]
['dfsd', '98', 'sd', '8', 'f', '68', 'as', '7', 'df', '56']
</code></pre>
<p>If you then want to make one giant number:</p>
<pre><code>&gt;&gt;&gt; int("".join("".join(x) for is_number, x in itertools.groupby("dfsd98sd8f68as7df56", key=str.isdigit) if is_number is True))
98868756
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To split the string at digits you can use <a href="http://docs.python.org/2/library/re.html#re.split" rel="noreferrer"><code>re.split</code></a> with the regular expression <code>\d+</code>:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; def my_split(s):
    return filter(None, re.split(r'(\d+)', s))

&gt;&gt;&gt; my_split('5pizzas')
['5', 'pizzas']
&gt;&gt;&gt; my_split('foo123bar')
['foo', '123', 'bar']
</code></pre>
<p>To find the first number use <a href="http://docs.python.org/2/library/re.html#re.search" rel="noreferrer"><code>re.search</code></a>:</p>
<pre><code>&gt;&gt;&gt; re.search('\d+', '5pizzas').group()
'5'
&gt;&gt;&gt; re.search('\d+', 'foo123bar').group()
'123'
</code></pre>
<p>If you know the number must be at the start of the string then you can use <code>re.match</code> instead of <code>re.search</code>. If you want to find all the numbers and discard the rest you can use <code>re.findall</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about a regex ?</p>
<pre><code>reg = re.compile(r'(?P&lt;numbers&gt;\d*)(?P&lt;rest&gt;.*)')
result = reg.search(str)
if result:
    numbers = result.group('numbers')
    rest = result.group('rest')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Answer added as possible way to solve <a href="https://stackoverflow.com/questions/52443783/how-to-split-a-string-into-a-list-by-digits#52443783">How to split a string into a list by digits?</a> which was <code>dupe-linked</code> to this question.</p>
<p>You can do the splitting yourself:</p>
<ul>
<li>use a temporary list to accumulate characters that are not digits</li>
<li>if you find a digit, add the temporary list (<code>''.join()</code>-ed) to the result list (only if not empty) and do not forget to clear the temporary list</li>
<li>repeat until all characters are processed and if the temp-lists still has content, add it </li>
</ul>
<hr/>
<pre><code>text = "Ka12Tu12La"

splitted = []   # our result
tmp = []        # our temporary character collector

for c in text:
    if not c.isdigit():
        tmp.append(c)    # not a digit, add it

    elif tmp:            # c is a digit, if tmp filled, add it  
        splitted.append(''.join(tmp))
        tmp = []

if tmp:
    splitted.append(''.join(tmp))

print(splitted)
</code></pre>
<p>Output:</p>
<pre><code>['Ka', 'Tu', 'La']
</code></pre>
<p>References:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/1876191/what-exactly-does-the-join-method-do">What exactly does the .join() method do?</a></li>
</ul>
</div>
<span class="comment-copy">@AT Your suggestion counts the digits rather than giving the value of those digits. It is fundamentally different. E.g for <code>10pizzas</code> it would give <code>2</code>, not <code>10</code>.</span>
