<div class="post-text" itemprop="text">
<p>When an exception is raised inside a thread without catching it anywhere else, will it then kill the whole application/interpreter/process? Or will it only kill the thread?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's try it:</p>
<pre><code>import threading
import time

class ThreadWorker(threading.Thread):

    def run(self):
        print "Statement from a thread!"
        raise Dead


class Main:

    def __init__(self):
        print "initializing the thread"
        t = ThreadWorker()
        t.start()
        time.sleep(2)
        print "Did it work?"


class Dead(Exception): pass



Main()
</code></pre>
<p>The code above yields the following results:</p>
<blockquote>
<pre><code>&gt; initializing the thread 
&gt; Statement from a thread! 
&gt; Exception in thread
&gt; Thread-1: Traceback (most recent call last):   File
&gt; "C:\Python27\lib\threading.py", line 551, in __bootstrap_inner
&gt;     self.run()   File ".\pythreading.py", line 8, in run
&gt;     raise Dead Dead
&gt; ----- here the interpreter sleeps for 2 seconds -----
&gt; Did it work?
</code></pre>
</blockquote>
<p>So, the answer to your question is that a raised Exception crashes only the thread it is in, not the whole program.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="http://docs.python.org/3/library/threading.html" rel="noreferrer">threading</a> documentation:</p>
<blockquote>
<p>Once the thread’s activity is started, the thread is considered
  ‘alive’. It stops being alive when its run() method terminates –
  either normally, or by raising an unhandled exception. The is_alive()
  method tests whether the thread is alive.</p>
</blockquote>
<p>And also:</p>
<blockquote>
<p>join(timeout=None)</p>
<p>Wait until the thread terminates. This blocks the calling thread until the thread whose join() method is called terminates – either
  normally or through an unhandled exception –, or until the optional
  timeout occurs.</p>
</blockquote>
<p>In other words, the uncaught exception is a way to end a thread, and will be detected in the parent's <code>join</code> call on said thread.</p>
</div>
<span class="comment-copy">Have you tried creating a thread that throws an exception?</span>
<span class="comment-copy">I am using concurrent thread pool. If a thread got killed a new thread will spawn in thread pool or not???</span>
