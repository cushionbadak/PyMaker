<div class="post-text" itemprop="text">
<p>I need some help;
I'm trying to program a sort of command prompt with python</p>
<p>I need to split a text file into lines then split them into strings </p>
<p>example : </p>
<p>splitting </p>
<pre><code>command1 var1 var2;
command2 (blah, bleh);
command3 blah (b bleh);
command4 var1(blah b(bleh * var2));
</code></pre>
<p>into :</p>
<pre><code>line1=['command1','var1','var2']

line2=['command2']
line2_sub1=['blah','bleh']

line3=['blah']
line3_sub1=['b','bleh']

line4=['command4']
line4_sub1=['blah','b']
line4_sub2=['bleh','var2']
line4_sub2_operand=['*']
</code></pre>
<p>Would that be possible at all?
If so could some one explain how or give me a piece of code that would do it?</p>
<p>Thanks a lot,</p>
</div>
<div class="post-text" itemprop="text">
<p>It's been pointed out, that there appears to be no reasoning to your language. All I can do is point you to <a href="http://pyparsing.wikispaces.com/" rel="nofollow">pyparsing</a>, which is what I would use if I were solving a problem similar to this, here is a <a href="http://pyparsing.wikispaces.com/file/view/pythonGrammarParser.py/30100174/pythonGrammarParser.py" rel="nofollow">pyparsing example for the python language</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Like everyone else is saying, your language is confusingly designed and you probably need to simplify it. But I'm going to give you what you're looking for and let you figure that out the hard way.</p>
<p>The standard python file object (returned by open()) is an iterator of lines, and the split() method of the python string class splits a string into a list of substrings. So you'll probably want to start with something like:</p>
<pre><code>for line in command_file
    words = line.split(' ')
</code></pre>
<p><a href="http://docs.python.org/3/library/string.html" rel="nofollow">http://docs.python.org/3/library/string.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>you could use this code to read the file line by line and split it by spaces between words.</p>
<pre><code>a= True
f = open(filename)
while a:
    nextline=f.readline()
    wordlist= nextline.split("")
    print(wordlist)
    if nextline=="\n":
        a= False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you're talking about is writing a simple programming language.  It's not extraordinarily difficult if you know what you're doing, but it is the sort of thing most people take a full semester class to learn.  The fact that you've got multiple different types of lexical units with what looks to be a non-trivial, recursive syntax means that you'll need a scanner and a parser.  If you really want to teach yourself to do this, <a href="http://en.wikipedia.org/wiki/Syntax_%28programming_languages%29" rel="nofollow">this</a> might not be a bad place to start.</p>
<p>If you simplify your grammar such that each command only has a fixed number of arguments, you can probably get away with using <a href="http://docs.python.org/2/library/re.html" rel="nofollow">regular expressions</a> to represent the syntax of your individual commands.</p>
<p>Give it a shot.  Just don't expect it to all work itself out overnight.</p>
</div>
<span class="comment-copy">What have you coded so far?</span>
<span class="comment-copy">There's no rhyme or reason here as to why one thing should be one way and another thing should be another way.  e.g. why is <code>command3</code> completely absent?  Why is it <code>command1</code> in the first line and <code>command 2</code> in the second line?</span>
<span class="comment-copy">Using variables with names like <code>line1</code>, <code>line2</code>, etc. is not the right way to go about storing data processed from a file, unless you know in advance exactly how many lines you will have (and often even then).  You need a data structure to store the results, perhaps a list of lists or a list of dictionaries.  Splitting and text file into lines and then splitting lines into words is very easy; however, it looks like you have some fairly complex and possibly poorly-defined rules for how to handle input beyond just splitting things and you'll need to think about those in more detail.</span>
<span class="comment-copy">Also the representation would usually be a tree, so that instead of <code>line4_sub1</code> you should have <code>line4_sub1_sub1</code> (to use your own notation). Operations like multiply are usually converted to an RPN-like representation like [multiply [operand1 operand2]].</span>
