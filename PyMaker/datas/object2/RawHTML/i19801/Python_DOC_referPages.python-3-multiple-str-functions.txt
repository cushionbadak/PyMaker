<div class="post-text" itemprop="text">
<p>As far as I know, Python doesn't support function overloading, but in Python documentation</p>
<p><a href="http://docs.python.org/3/library/functions.html#func-str" rel="nofollow">link to py3k doc</a></p>
<p>seems that there are 2 different str methods, <code>str(object='')</code> and <code>str(object=b'', encoding='utf-8', errors='strict')</code></p>
<p>How are defined these functions? When is the first invoked and when the second? </p>
<p>Can I create my own <code>f(o='')</code> and <code>f(o=b'')</code> functions (makes sense)? </p>
<p><strong>UPDATE</strong></p>
<p>Output for <code>str(b'abc','utf-8')</code> is <code>abc</code> but</p>
<p>output for <code>str(b'abc')</code> is <code>b'abc'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>No, python doesn't support overloading <em>because it doesn't need to</em>. Python documentation often shows different ways of calling a method to illustrate different uses, but there is only one <code>str()</code> callable (a type in this case).</p>
<p>In this case, <code>str()</code> accepts multiple keyword arguments, which have default values if not specified. The <code>str()</code> type then uses the those extra keyword arguments, if specified, to interpret a <code>b''</code> byte string argument. If no keyword arguments were passed in, <code>str()</code> behaves differently.</p>
<p>In other words, <code>str()</code> adjusts it's behaviour based on wether or not the keyword arguments have been supplied. If that is the case and the first argument is a bytestring or bytearray,  it'll decode that argument to unicode text, using the extra keyword arguments to control the decoding process.</p>
<p>You can define your own function that'll behave the same way as regards to the keyword arguments, checking the type of the first argument:</p>
<pre><code>def f(o, encoding=None, errors=None):
    if encoding is None and errors is None:
        return o.__str__()

    if isinstance(o, str):
        raise TypeError('decoding str is not supported')

    if not isinstance(o, (bytes, bytesarray)):
        raise TypeError('coercing to str: need bytes, bytearray'
             'or buffer-like object, %s found' % type(o).__name__)
    return o.decode(encoding, errors)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, there's only one <code>str()</code>.</p>
<p>It is shown twice for the sake of clarity (that is, to demonstrate different use cases).</p>
<p>You can achieve similar effects in your code by using default arguments, positional argument and keyword arguments. See <a href="https://stackoverflow.com/questions/1419046/python-normal-arguments-vs-keyword-arguments">Python normal arguments vs. keyword arguments</a></p>
</div>
<span class="comment-copy">Your fuction example is not the str function behavior in python3 output for <code>str(b'abc','utf-8')</code> is <code>abc</code> but output for <code>str(b'abc')</code> is <code>b'abc'</code></span>
<span class="comment-copy">@JoseLuis: I remembered it wrong. Updated the answer to better reflect what <code>str()</code> does. The same principle applies though.</span>
<span class="comment-copy">@JoseLuis: I've referenced the C implementation of <code>str()</code> and the <code>f</code> function is a good approximation in Python of what it does now. Good enough for illustration purposes in any case.</span>
<span class="comment-copy">ok, that means that py3k documentation is wrong, or at least not clear, in two points. There is only one str() function (and no two), and the function definition is <code>str(object='', encoding=None, errors='strict')</code> (and not <code>str(object=b'', encoding='utf-8', errors='strict')</code> )</span>
<span class="comment-copy">@JoseLuis: The default encoding for conversion <i>is</i> UTF-8; see <a href="http://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#bytes.decode</a> and <a href="http://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer">docs.python.org/3/howto/unicode.html</a>, and as I stated in my answer, the two behaviours are separate and thus <i>documented</i> distinctly. Don't confuse a misunderstanding about how the  documentation tries to provide clarity with being wrong.</span>
