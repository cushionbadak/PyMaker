<div class="post-text" itemprop="text">
<p>I have set list of x and y, for example</p>
<pre><code>x=[1,2,3,4,5,6]
y=[1,4,9,16,25,36]
</code></pre>
<p>and I need to find the y values for a set of u defined as</p>
<pre><code>u = [[2,3,1],[4,2,1],[6,3,2],[2,4,5],[2,3,6]]
</code></pre>
<p>I am using <a href="http://proj.badc.rl.ac.uk/svn/dcip/ddp/branches/ddp-dev/tasks/ddp12/interp.py" rel="nofollow">this interpolation module</a>. It is similar to the numpy interpolate</p>
<p>Currently, I follow:</p>
<pre><code>v = [interp(x,y,u[i]) for i in range(len(k))]
</code></pre>
<p>Is there a way to circumvent the for loop, because It increases my computational time.
I could rather spare my memory instead of time. My list size are very huge!
I hope that inbuilt map function could be used, but not aware of how to use it.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>map()</code> loops internally too - it just does it C-side where it is faster. However, you are already using a <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow">list comprehension</a>, which also offloads to C and will probably be faster than <code>map()</code>.</p>
<p>That said, there is an opportunity to gain speed and readability here by changing your loop:</p>
<pre><code>v = [interp(x, y, i) for i in u]
</code></pre>
<p>In Python, we loop over iterators, not indices. By indirectly looping as you were, you will slow your looping down significantly. It also makes it far less readable.</p>
<p>As to using <code>map()</code>, it could be done using <a href="http://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial()</code></a> to make a function that calls <code>interp()</code> with <code>x</code> and <code>y</code> prefilled:</p>
<pre><code>import functools
f = functools.partial(interp, x, y)
v = list(map(f, u))
</code></pre>
<p>However, as I said before, this will likely be slower, and is far less readable.</p>
<p>(I use the term C-side in this answer presuming you are using CPython, but in any other implementation, it will also be implemented more efficiently, using whatever lower-level options are available).</p>
</div>
<span class="comment-copy">Thank to remind me that, I could use the list comprehension like that, it doesn't improve the speed much. If i modify the interp module to handle the input shape by using broadcasting(I usually think that it is synonymous to the vector operations) will my speed imporve</span>
<span class="comment-copy">I don't know the maths of it, I'm afraid. I would imagine you are right in that the expense of the operation is in the computation and not the loop.</span>
<span class="comment-copy">You are right, the interp module takes approx 0.02s for 1 call with the len(x)=len(y)=100 and the the len(u[0])=1280 and if i loop it for say 1000 times it is drastically slow. So, If I could change the interp module such that it handles a 2D list, will the time be reduced reasonalbly</span>
<span class="comment-copy">That entirely depends on how you implement that change. The best answer is to try it and see.</span>
<span class="comment-copy">partial does not pass the variables properly to the interp module, can you please explain how to use partial, this seems to be a quite good solution.</span>
