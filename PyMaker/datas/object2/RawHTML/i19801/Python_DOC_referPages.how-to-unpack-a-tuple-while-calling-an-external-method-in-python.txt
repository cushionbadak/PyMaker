<div class="post-text" itemprop="text">
<p>I call a method of an external library multiple times in my class like this:</p>
<p></p>
<pre><code>class MyClass:

    const_a = "a"
    const_b = True
    const_c = 1

    def push(self, pushee):
        with ExternalLibrary.open(self.const_a, self.const_b, self.const_c) as el:
            el.push(pushee)

    def pop(self):
        with ExternalLibrary.open(self.const_a, self.const_b, self.const_c) as el:
            return el.pop()
</code></pre>
<p>The lines containing the <code>with</code> statement are bugging me, because they require passing the the constants as arguments every time. I would like to store the arguments in a predefined data structure like a tuple and pass that to the external library.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this:</p>
<pre><code>args = (const_a, const_b, const_c)
ExternalLibrary.open(*args)
</code></pre>
<p>The <code>*</code> syntax unpacks an iterable (tuple, list, etc.) into individual arguments in a function call.  There is also a <code>**</code> syntax for unpacking a dictionary into keyword arguments:</p>
<pre><code>kwargs = {'foo': 1, 'bar': 2}
func(**kwargs) # same as func(foo=1, bar=2)
</code></pre>
<p>You can also use both in the same call, like <code>func(*args, **kwargs)</code>.</p>
</div>
<span class="comment-copy">That is correct. The Python documentation describes this as <a href="http://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">Unpacking Argument Lists</a>.</span>
