<div class="post-text" itemprop="text">
<p>In some code I'm writing, I'd like a function similar to the built in sum() function, except with my own custom two-argument function as opposed to addition. It's easy to write such a function, but I'm wondering if there's one in the standard library somewhere? I took a look through the <a href="http://docs.python.org/3.2/library/itertools.html" rel="nofollow">itertools doc</a>, but didn't find anything. It would also be similar to <code>itertools.accumulate(mylist)[-1]</code>, except with functions other than sums.</p>
<p>My own code for such a function:     </p>
<pre><code>def accumulate(iterable, func):
    it = iter(iterable)
    out = func(next(it), next(it))
    for i in it:
        out = func(out, i) # "out += i"
    return out
</code></pre>
<p>So <code>sum(mylist)</code> would be equivalent to <code>accumulate(mylist, lambda x, y: x+y)</code>. In my use case of course, I have a different function I'd like to use (it is more complicated than a simple arithmetic operation.)</p>
<p>It seems like this would be a fairly common thing, which is why I'm surprised half an hour of searching didn't find anything like this. So: If and where does such a function exist in the standard library? (I'm using my own code above for now.)</p>
</div>
<div class="post-text" itemprop="text">
<p>The usual name for that function is <code>fold</code> or <code>reduce</code>, and it's actually built into Python 2 under the latter name:</p>
<pre><code>&gt;&gt;&gt; reduce(lambda x,y: x*y, [1,3,5,4])
60
</code></pre>
<p>In Python 3 you have to import it from the <code>functools</code> module.</p>
</div>
<span class="comment-copy">What's the input, and what's the expected output.</span>
<span class="comment-copy">Well that would depend on what the user wants. <code>accumulate([5,3,1], lambda x, y: x-y)</code> would return 5-3-1 = 1; <code>accumulate([1,3,5,4], lambda x, y: x*y)</code> would return 1*3*5*4 = 20. (In my particular use case, I have a list of tuples, and thus my function wouldn't be a lambda, but a proper named function, but that doesn't matter.)</span>
<span class="comment-copy">@Dubslow: do you mean: <a href="http://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce</code></a>? For example, see <a href="http://stackoverflow.com/questions/15995/useful-code-which-uses-reduce-in-python">Useful code which uses reduce() in python</a></span>
<span class="comment-copy">@J.F.Sebastian Yes, that's exactly what I was looking for. I've never heard of functools, thanks.</span>
<span class="comment-copy">In Python 3 <code>reduce</code> is no longer available directly, but as @J.F.Sebastian commented, you can still find it in the <code>functools</code> module.</span>
<span class="comment-copy">Why would they make it no longer available? But yes, thanks to you three for clearing me up.</span>
<span class="comment-copy">Reportedly because Guido doesn't like higher-order functional programming.  List comprehensions solve many of the same sorts of problems in a different way.</span>
