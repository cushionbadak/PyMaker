<div class="post-text" itemprop="text">
<p>I have a multi-threaded SMTP server. Each thread takes care of one client. I need to set a timeout value of 10 seconds on each server thread to terminate dormant or misbehaving clients.<br/>
I have used the <code>time.time()</code>, to find the start time and my checkpoint time and the difference gives the running time. But I believe it gives the system time and not the time this thread was running.<br/>
Is there a Thread local timer API in Python ?  </p>
<pre><code>   import threading
   stop = 0

   def hello():
     stop = 1

   t=threading.Timer(10,hello)
   t.start()
   while stop != 1:
      print stop
   print "stop changed"
</code></pre>
<p>This prints 0 (initial stop) in a loop and does not come out of the while loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the python documentation there is no mention of "thread timing". Either the clocks are process-wide or system-wide. In particular <code>time.clock</code> measures process time while <code>time.time</code> returns the system time.</p>
<p>In python3.3 the timings API was revised and improved but still, I can't see any timer that would return the process time taken by a single thread.</p>
<p>Also note that even if possible it's not at all easy to write such a timer.
Timers are OS specific, so you would have to write a different version of the module for every OS. If you want to profile a specific action, just launch it without threads.
When threaded the timing either it runs as expected, or it is a lot slower because of the OS, in which case you can't do nothing about it(at least, if you don't want to write a patch that "fixes" the GIL or removes it safely).</p>
</div>
<div class="post-text" itemprop="text">
<p>The hello function's stop value is local, not the global one.</p>
<p>Add the following:</p>
<pre><code>def hello():
   global stop
   stop = 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has progressed in the 6 years since this question was asked, and in version 3.3 it's introduced a tool for exactly what was being asked for here:</p>
<p><code>time.clock_gettime(time.CLOCK_THREAD_CPUTIME_ID)</code></p>
<p>Python 3.7 additionally introduced an analogous <code>time.clock_gettime_ns</code>.</p>
<p>Detailed docs are <a href="https://docs.python.org/3/library/time.html" rel="nofollow noreferrer">exactly where you'd expect</a> but the feature is pretty straightforward straight out of the box.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am posting a sample code which can measure the running time of the thread, you can modify the code, so as to use with your function.</p>
<pre><code>    import time
    import threading
    def hello():
        x = 0 
        while x &lt; 100000000:
            pass
            x += 1
    start = time.clock()
    t = threading.Thread(target = hello, args = ())
    t.start() 
    t.join()
    end = time.clock()
    print "The time was {}".format(end - start)
</code></pre>
<p>On my system, it gave a time of 8.34 seconds.</p>
</div>
<span class="comment-copy">The docs say you should use <code>time.clock</code> for timing not <code>time.time</code> but gives back the processor time as well, not the execution time of a thread</span>
<span class="comment-copy">thanks for your comment. This solves the second problem. However, I still cant figure out how to find the runtime of a thread in my multi threaded program. Any insights here?</span>
<span class="comment-copy">This doesn't answer the question. It might work better as a comment on the original post.</span>
<span class="comment-copy">This is no longer accurate as soon as you have more than one thread running concurrently. Which is the point of the question.   In other words, this doesn't answer the question.</span>
