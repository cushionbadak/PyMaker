<div class="post-text" itemprop="text">
<p>How can I make a class or method abstract in Python?</p>
<p>I tried redefining <code>__new__()</code> like so:</p>
<pre><code>class F:
    def __new__(cls):
        raise Exception("Unable to create an instance of abstract class %s" %cls)
</code></pre>
<p>but now if I create a class <code>G</code> that inherits from <code>F</code> like so:</p>
<pre><code>class G(F):
    pass
</code></pre>
<p>then I can't instantiate <code>G</code> either, since it calls its super class's <code>__new__</code> method.</p>
<p>Is there a better way to define an abstract class?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://docs.python.org/library/abc.html" rel="noreferrer"><code>abc</code></a> module to create abstract classes. Use the <a href="https://docs.python.org/library/abc.html#abc.abstractmethod" rel="noreferrer"><code>abstractmethod</code></a> decorator to declare a method abstract, and declare a class abstract using one of three ways, depending upon your Python version.</p>
<p>In Python 3.4 and above, you can inherit from <a href="https://docs.python.org/3/library/abc.html#abc.ABC" rel="noreferrer"><code>ABC</code></a>. In earlier versions of Python, you need to specify your class's metaclass as <a href="https://docs.python.org/library/abc.html#abc.ABCMeta" rel="noreferrer"><code>ABCMeta</code></a>. Specifying the metaclass has different syntax in Python 3 and Python 2. The three possibilities are shown below:</p>
<pre><code># Python 3.4+
from abc import ABC, abstractmethod
class Abstract(ABC):
    @abstractmethod
    def foo(self):
        pass
</code></pre>
<pre><code># Python 3.0+
from abc import ABCMeta, abstractmethod
class Abstract(metaclass=ABCMeta):
    @abstractmethod
    def foo(self):
        pass
</code></pre>
<pre><code># Python 2
from abc import ABCMeta, abstractmethod
class Abstract:
    __metaclass__ = ABCMeta

    @abstractmethod
    def foo(self):
        pass
</code></pre>
<p>Whichever way you use, you won't be able to instantiate an abstract class that has abstract methods, but will be able to instantiate a subclass that provides concrete definitions of those methods:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; Abstract()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Can't instantiate abstract class Abstract with abstract methods foo
&gt;&gt;&gt; class StillAbstract(Abstract):
...     pass
... 
&gt;&gt;&gt; StillAbstract()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Can't instantiate abstract class StillAbstract with abstract methods foo
&gt;&gt;&gt; class Concrete(Abstract):
...     def foo(self):
...         print('Hello, World')
... 
&gt;&gt;&gt; Concrete()
&lt;__main__.Concrete object at 0x7fc935d28898&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The old-school (pre-<a href="http://www.python.org/dev/peps/pep-3119/" rel="noreferrer">PEP 3119</a>) way to do this is just to <code>raise NotImplementedError</code> in the abstract class when an abstract method is called.</p>
<pre><code>class Abstract(object):
    def foo(self):
        raise NotImplementedError('subclasses must override foo()!')

class Derived(Abstract):
    def foo(self):
        print 'Hooray!'

&gt;&gt;&gt; d = Derived()
&gt;&gt;&gt; d.foo()
Hooray!
&gt;&gt;&gt; a = Abstract()
&gt;&gt;&gt; a.foo()
Traceback (most recent call last): [...]
</code></pre>
<p>This doesn't have the same nice properties as using the <code>abc</code> module does. You can still instantiate the abstract base class itself, and you won't find your mistake until you call the abstract method at runtime. </p>
<p>But if you're dealing with a small set of simple classes, maybe with just a few abstract methods, this approach is a little easier than trying to wade through the <code>abc</code> documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a very easy way without having to deal with the ABC module.</p>
<p>In the <code>__init__</code> method of the class that you want to be an abstract class, you can check the "type" of self.  If the type of self is the base class, then the caller is trying to instantiate the base class, so raise an exception.  Here's a simple example:</p>
<pre><code>class Base():
    def __init__(self):
        if type(self) is Base:
            raise Exception('Base is an abstract class and cannot be instantiated directly')
        # Any initialization code
        print('In the __init__  method of the Base class')

class Sub(Base):
    def __init__(self):
        print('In the __init__ method of the Sub class before calling __init__ of the Base class')
        super().__init__()
        print('In the __init__ method of the Sub class after calling __init__ of the Base class')

subObj = Sub()
baseObj = Base()
</code></pre>
<p>When run, it produces:</p>
<pre><code>In the `__init__` method of the Sub class before calling `__init__` of the Base class

In the `__init__`  method of the Base class

In the `__init__` method of the Sub class after calling `__init__` of the Base class
Traceback (most recent call last):

  File "/Users/irvkalb/Desktop/Demo files/Abstract.py", line 16, in &lt;module&gt;
    baseObj = Base()

  File "/Users/irvkalb/Desktop/Demo files/Abstract.py", line 4, in `__init__`

    raise Exception('Base is an abstract class and cannot be instantiated directly')

Exception: Base is an abstract class and cannot be instantiated directly
</code></pre>
<p>This shows that you can instantiate a subclass that inherits from a base class, but you cannot instantiate the base class directly.</p>
<p>Irv</p>
</div>
<div class="post-text" itemprop="text">
<p>This one will be working in python 3 </p>
<pre><code>from abc import ABCMeta, abstractmethod

class Abstract(metaclass=ABCMeta):

    @abstractmethod
    def foo(self):
        pass

Abstract()
&gt;&gt;&gt; TypeError: Can not instantiate abstract class Abstract with abstract methods foo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Most Previous answers were correct but here is the answer and example for <em>Python 3.7.</em> Yes, you can create an abstract class and method. Just as a reminder sometimes a class should define a method which logically belongs to a class, but that class cannot specify how to implement the method. For example, in the below Parents and Babies classes they both eat but the implementation will be different for each because babies and parents eat a different kind of food and the number of times they eat is different. So, eat method subclasses overrides AbstractClass.eat. </p>
<pre><code>from abc import ABC, abstractmethod

class AbstractClass(ABC):

    def __init__(self, value):
        self.value = value
        super().__init__()

    @abstractmethod
    def eat(self):
        pass

class Parents(AbstractClass):
    def eat(self):
        return "eat solid food "+ str(self.value) + " times each day"

class Babies(AbstractClass):
    def eat(self):
        return "Milk only "+ str(self.value) + " times or more each day"

food = 3    
mom = Parents(food)
print("moms ----------")
print(mom.eat())

infant = Babies(food)
print("infants ----------")
print(infant.eat())
</code></pre>
<p>OUTPUT:</p>
<pre><code>moms ----------
eat solid food 3 times each day
infants ----------
Milk only 3 times or more each day
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can create abstract classes in python with the abc (abstract base classes) module. </p>
<p>This site will help you with it: <a href="http://docs.python.org/2/library/abc.html" rel="nofollow">http://docs.python.org/2/library/abc.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Yes you can, using the <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer"><code>. abc</code></a> - Abstract Base Classes module, here is an example:</p>
<h1>Python3.6</h1>
<pre><code># importing abstract base classes module
import abc

class GetterSetter(abc.ABC):
    '''
    ABSTRACT BASE CLASSES:

    -  An abstract base class is a kind of 'model' for other classes to be defined.
        - It is not designed to construct instances, but can be subclassed by regular classes

    - Abstract classes can define interface, or methods that must be implemented by its subclasses.

    '''


    # Abstract classes are not designed to be instantiated, only to be subclassed

    #  decorator for abstract class
    @abc.abstractmethod
    def set_val(self, input):
        """set the value in the instance"""
        return

    @abc.abstractmethod
    def get_val(self):
        """Get and return a value from the instance..."""
        return

# Inheriting from the above abstract class
class MyClass(GetterSetter):

    # methods overriding in the GetterSetter
    def set_val(self, input):
        self.val = input

    def get_val(self):
        return self.val


# Instantiate
x = MyClass()
print(x) # prints the instance &lt;__main__.MyClass object at 0x10218ee48&gt;
x = GetterSetter() #throws error, abstract classes can't be instantiated
</code></pre>
<h1>Python2.x</h1>
<pre><code>import abc

class GetterSetter(object):
    # meta class is used to define other classes
    __metaclass__ = abc.ABCMeta


    #  decorator for abstract class
    @abc.abstractmethod
    def set_val(self, input):
        """set the value in the instance"""
        return

    @abc.abstractmethod
    def get_val(self):
        """Get and return a value from the instance..."""
        return

# Inheriting from the above abstract class
class MyClass(GetterSetter):

    # methods overriding in the GetterSetter
    def set_val(self, input):
        self.val = input

    def get_val(self):
        return self.val


# Instantiate
x = GetterSetter()
print(x)
x = GetterSetter() #throws error, abstract classes can't be instantiated
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>also this works and is simple:</p>
<pre><code>class A_abstract(object):

    def __init__(self):
        # quite simple, old-school way.
        if self.__class__.__name__ == "A_abstract": 
            raise NotImplementedError("You can't instantiate this abstract class. Derive it, please.")

class B(A_abstract):

        pass

b = B()

# here an exception is raised:
a = A_abstract()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your code snippet, you could also resolve this by providing an implementation for the <code>__new__</code> method in the subclass, likewise:</p>
<pre><code>def G(F):
    def __new__(cls):
        # do something here
</code></pre>
<p>But this is a hack and I advise you against it, unless you know what you are doing. For nearly all cases I advise you to use the <code>abc</code> module, that others before me have suggested.</p>
<p>Also when you create a new (base) class, make it subclass <code>object</code>, like this: <code>class MyBaseClass(object):</code>. I don't know if it is that much significant anymore, but it helps retain style consistency on your code</p>
</div>
<div class="post-text" itemprop="text">
<p>Just a quick addition to @TimGilbert's old-school answer...you can make your abstract base class's <strong>init</strong>() method throw an exception and that would prevent it from being instantiated, no?</p>
<pre><code>&gt;&gt;&gt; class Abstract(object):
...     def __init__(self):
...         raise NotImplementedError("You can't instantiate this class!")
...
&gt;&gt;&gt; a = Abstract()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in __init__
NotImplementedError: You can't instantiate this class! 
</code></pre>
</div>
<span class="comment-copy">what does the @abstractmethod do? Why do you need it? If the class is already established as abstract shouldn't the compiler/interpret know that all the methods are from the abstract class in question?</span>
<span class="comment-copy">@CharlieParker - The <code>@abstractmethod</code> makes it so that the decorated function <i>must</i> be overridden before the class can be instantiated. From the docs: <code>A class that has a metaclass derived from ABCMeta cannot be instantiated unless all of its abstract methods and properties are overridden.</code></span>
<span class="comment-copy">@CharlieParker - Basically, it lets you define a class in a manner where the sub-class <i>must</i> implement a specified suite of methods to instantiate at all.</span>
<span class="comment-copy">Is there a way to prohibit users from creating Abstract() without any @abstractmethod methods?</span>
<span class="comment-copy">This also works with <i>Python 3.6</i> __ +1</span>
<span class="comment-copy">Perhaps <code>import abc</code> is useless.</span>
<span class="comment-copy">removed that extra line :) good call</span>
<span class="comment-copy">This will prevent subclasses from benefitting with any common <b>init</b> code that logically should be present in their common base class.</span>
<span class="comment-copy">Fair enough. So much for old-school.</span>
