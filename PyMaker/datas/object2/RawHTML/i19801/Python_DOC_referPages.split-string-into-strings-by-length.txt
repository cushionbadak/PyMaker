<div class="post-text" itemprop="text">
<p>Is there a way to take a string that is <code>4*x</code> characters long, and cut it into 4 strings, each <code>x</code> characters long, without knowing the length of the string?</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt;x = "qwertyui"
&gt;&gt;&gt;split(x, one, two, three, four)
&gt;&gt;&gt;two
'er'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; x = "qwertyui"
&gt;&gt;&gt; chunks, chunk_size = len(x), len(x)/4
&gt;&gt;&gt; [ x[i:i+chunk_size] for i in range(0, chunks, chunk_size) ]
['qw', 'er', 'ty', 'ui']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I tried Alexanders answer but got this error in Python3:</p>
<pre><code>TypeError: 'float' object cannot be interpreted as an integer
</code></pre>
<p>This is because the division operator in Python3 is returning a float. This works for me:</p>
<pre><code>&gt;&gt;&gt; x = "qwertyui"
&gt;&gt;&gt; chunks, chunk_size = len(x), len(x)//4
&gt;&gt;&gt; [ x[i:i+chunk_size] for i in range(0, chunks, chunk_size) ]
['qw', 'er', 'ty', 'ui']
</code></pre>
<p>Notice the <code>//</code> at the end of line 2, to ensure truncation to an integer.</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>:param s: str; source string   </li>
<li>:param w: int; width to split on</li>
</ul>
<blockquote>
<p>Using the textwrap module:</p>
<p><a href="https://docs.python.org/3.6/library/textwrap.html" rel="noreferrer">PyDocs-textwrap</a></p>
</blockquote>
<pre><code>import textwrap
def wrap(s, w):
    return textwrap.fill(s, w)
</code></pre>
<p>:return str:</p>
<blockquote>
<p>Inspired by <a href="https://stackoverflow.com/a/13673133/4434405" title="stuff">Alexander's Answer</a></p>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html" rel="noreferrer">PyDocs-data structures</a></p>
</blockquote>
<pre><code>def wrap(s, w):
    return [s[i:i + w] for i in range(0, len(s), w)]
</code></pre>
<ul>
<li>:return list:</li>
</ul>
<blockquote>
<p><a href="https://stackoverflow.com/a/44103651/4434405">Inspired by Eric's answer</a></p>
<p><a href="https://docs.python.org/3.6/library/re.html" rel="noreferrer">PyDocs-regex</a></p>
</blockquote>
<pre><code>import re
def wrap(s, w):    
    sre = re.compile(rf'(.{{{w}}})')
    return [x for x in re.split(sre, s) if x]
</code></pre>
<ul>
<li>:return list:</li>
</ul>
<p><a href="https://github.com/jerodg/hackerrank-python/blob/master/03_Strings/08_text-wrap.py" rel="noreferrer">Complete Code Examples/Alternative Methods</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a one-liner that doesn't need to know the length of the string beforehand:</p>
<pre><code>from functools import partial
from StringIO import StringIO

[l for l in iter(partial(StringIO(data).read, 4), '')]
</code></pre>
<p>If you have a file or socket, then you don't need the StringIO wrapper:</p>
<pre><code>[l for l in iter(partial(file_like_object.read, 4), '')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def split2len(s, n):
    def _f(s, n):
        while s:
            yield s[:n]
            s = s[n:]
    return list(_f(s, n))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are two generic approaches. Probably worth adding to your own lib of reusables. First one requires the item to be sliceable and second one works with any iterables (but requires their constructor to accept iterable).</p>
<pre><code>def split_bylen(item, maxlen):
    '''
    Requires item to be sliceable (with __getitem__ defined)
    '''
    return [item[ind:ind+maxlen] for ind in range(0, len(item), maxlen)]
    #You could also replace outer [ ] brackets with ( ) to use as generator.

def split_bylen_any(item, maxlen, constructor=None):
    '''
    Works with any iterables.
    Requires item's constructor to accept iterable or alternatively 
    constructor argument could be provided (otherwise use item's class)
    '''
    if constructor is None: constructor = item.__class__
    return [constructor(part) for part in zip(* ([iter(item)] * maxlen))]
    #OR: return map(constructor, zip(* ([iter(item)] * maxlen)))
    #    which would be faster if you need an iterable, not list
</code></pre>
<p>So, in topicstarter's case, the usage is:</p>
<pre><code>string = 'Baboons love bananas'
parts = 5
splitlen = -(-len(string) // parts) # is alternative to math.ceil(len/parts)

first_method = split_bylen(string, splitlen)
#Result :['Babo', 'ons ', 'love', ' ban', 'anas']

second_method = split_bylen_any(string, splitlen, constructor=''.join)
#Result :['Babo', 'ons ', 'love', ' ban', 'anas']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Got an <code>re</code> trick:</p>
<pre><code>In [28]: import re

In [29]: x = "qwertyui"

In [30]: [x for x in re.split(r'(\w{2})', x) if x]
Out[30]: ['qw', 'er', 'ty', 'ui']
</code></pre>
<p>Then be a func, it might looks like:</p>
<pre><code>def split(string, split_len):
    # Regex: `r'.{1}'` for example works for all characters
    regex = r'(.{%s})' % split_len
    return [x for x in re.split(regex, string) if x]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>length = 4
string = "abcdefgh"
str_dict = [ o for o in string ]
parts = [ ''.join( str_dict[ (j * length) : ( ( j + 1 ) * length ) ]   ) for j in xrange(len(string)/length  )]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>And for dudes who prefer it to be a bit more readable:</p>
<pre><code>def itersplit_into_x_chunks(string,x=10): # we assume here that x is an int and &gt; 0
    size = len(string)
    chunksize = size//x
    for pos in range(0, size, chunksize):
        yield string[pos:pos+chunksize]
</code></pre>
<p>output:</p>
<pre><code>&gt;&gt;&gt; list(itersplit_into_x_chunks('qwertyui',x=4))
['qw', 'er', 'ty', 'ui']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The string splitting is required in many cases like where you have to sort the characters of the string given, replacing a character with an another character etc. But all these operations can be performed with the following mentioned string splitting methods.</p>
<p>The string splitting can be done in two ways:</p>
<ol>
<li><p>Slicing the given string based on the length of split.</p></li>
<li><p>Converting the given string to a list with list(str) function, where characters of the string breakdown to form the the elements of a list. Then do the required operation and join them with 'specified character between the characters of the original string'.join(list) to get a new processed string.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<pre><code>some_string="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
x=3 
res=[some_string[y-x:y] for y in range(x, len(some_string)+x,x)]
print(res)
</code></pre>
<p>will produce </p>
<pre><code>['ABC', 'DEF', 'GHI', 'JKL', 'MNO', 'PQR', 'STU', 'VWX', 'YZ']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>l = 'abcdefghijklmn'

def group(l,n):
    tmp = len(l)%n
    zipped = zip(*[iter(l)]*n)
    return zipped if tmp == 0 else zipped+[tuple(l[-tmp:])]

print group(l,3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My solution</p>
<pre><code>   st =' abs de fdgh  1234 556 shg shshh'
   print st

   def splitStringMax( si, limit):
    ls = si.split()
    lo=[]
    st=''
    ln=len(ls)
    if ln==1:
        return [si]
    i=0
    for l in ls:
        st+=l
        i+=1
        if i &lt;ln:
            lk=len(ls[i])
            if (len(st))+1+lk &lt; limit:
                st+=' '
                continue
        lo.append(st);st=''
    return lo

   ############################

   print  splitStringMax(st,7)
   # ['abs de', 'fdgh', '1234', '556', 'shg', 'shshh']
    print  splitStringMax(st,12)

   # ['abs de fdgh', '1234 556', 'shg shshh']
</code></pre>
</div>
<span class="comment-copy">Can't you just ask for the length of the string with <code>len(x)</code>?</span>
<span class="comment-copy">Eric: How could you then use that?</span>
<span class="comment-copy">slice notation?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/9475241/split-string-every-nth-character">Split string every nth character?</a></span>
<span class="comment-copy">What's the value of setting <code>chunks</code>? It's will always be <code>len(x)</code></span>
<span class="comment-copy">You are probably using Python3, where the division operator returns a float. You can use the truncating division operator <code>//</code> instead of casting to integer: <code>len(x)//4</code>. Also, I think the cast in <code>int(len(x))</code> is unnecessary.</span>
<span class="comment-copy">Thank you, I've updated the answer.</span>
<span class="comment-copy">i came up with this answer for dividing my text into two pieces but the code divide it into 3 if you change len(x)//4 to len(x)//2.  So i add +1 to the end of len(x)//2. For any of you that decide to use this answer.</span>
<span class="comment-copy">If you are using python3 StringIO is now in the io module.</span>
<span class="comment-copy">Can you explain your answer please ?</span>
<span class="comment-copy">awesome, thanks</span>
<span class="comment-copy">Hi Frederico, welcome to SO! It might be worthwhile explaining why you did what you did in this answer so that newcomers to the language and ideas you have shown can understand why this is a good course of action to take.</span>
<span class="comment-copy">While this code snippet may solve the question, <a href="//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers">including an explanation</a> really helps to improve the quality of your post. Remember that you are answering the question for readers in the future, and those people might not know the reasons for your code suggestion. Please also try not to crowd your code with explanatory comments, this reduces the readability of both the code and the explanations!</span>
