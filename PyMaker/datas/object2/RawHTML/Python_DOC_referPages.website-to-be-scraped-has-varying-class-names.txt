<div class="post-text" itemprop="text">
<p>I am trying to scrape the title and price of a product. I am facing a problem where the website has a class that varies. This is an example, </p>
<pre><code>&lt;a class="G-ab" href="thewebsite.com"&gt;&lt;div class="G-l"&gt;&lt;div class="G-m"&gt;Product Name&lt;/div&gt;&lt;/div&gt;&lt;div class="G-k"&gt;&lt;div&gt;S$230&lt;/div&gt;&lt;div&gt;Product Description&lt;/div&gt;&lt;div&gt;Used&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;
</code></pre>
<p>When i use another computer, it then shows this instead, </p>
<pre><code>&lt;a class="K-ab" href="thewebsite.com"&gt;&lt;div class="K-l"&gt;&lt;div class="K-m"&gt;Product Name&lt;/div&gt;&lt;/div&gt;&lt;div class="K-k"&gt;&lt;div&gt;S$230&lt;/div&gt;&lt;div&gt;Product Description&lt;/div&gt;&lt;div&gt;Used&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;
</code></pre>
<p>I realized that they change their classes to a random letter. 
I am currently using BeautifulSoup4 and requests library.
Are there any ways to get the class, other than the thought of making a whole long "if-elif" classes?
The website I am trying to scrape is carousell.com
I am currently using an lxml parser, if that would be of any help. Thank you for your time.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes what @Bitto mentioned is correct.You have use Regular expression to identify unique elements.Using <code>re</code> you can achieve this.However here is your code.You can use pandas <code>Dataframe</code> to print the results.</p>
<pre><code>from bs4 import BeautifulSoup
import requests
import re
import pandas as pd

html=requests.get("https://carousell.com/search/products/?cc_id=2195&amp;query=I7&amp;sort_by=time_created%2Cdescending")
soup=BeautifulSoup(html.text,"html.parser")
atag=soup.find_all('a', class_=re.compile("-ab"))
itemtitle=[]
itemprice=[]
for a in atag:
  for title,price in zip(a.find_all('div', class_=re.compile("-m")),a.find_all('div', class_=re.compile("-k"))):
      itemtitle.append(title.text)
      itemprice.append(price.find('div').text)

df=pd.DataFrame({"Title" :itemtitle, "Price" : itemprice})
print(df)
</code></pre>
<p>Output:</p>
<pre><code>     Price                                              Title
0     £200                          Acer Aspire Laptop (Used)
1     £700            MSI GP62 LEOPARD i7 12gb Ram windows 10
2     £120                                  Apple MacBook Pro
3     £155                                      iPhone 7 Plus
4     £155                                   Goophone I7 Plus
5     £579  MacBook Air 13.3inch 2014 i7 1.7GHz 8GB Ram 12...
6     £550                          MacBook Pro 2016 16GB Ram
7     £600                    CUSTOM GAMING/MEDIA PC COMPUTER
8     £900     MS I GE62 2QF-419UK APACHE/PRO TRUE FIRE POWER
9     £390           HP Envy 15 Intel Core i7 4000MQ 12GB Ram
10    £188                                   Goophone I7 Plus
11    £650                 Apple IMac 27" i7 2.8Ghz Quad Core
12    £600             Custom Gaming Pc (Excellent Condition)
13    £499               iMac 21.5inch with wireless keyboard
14  £1,299             MacBook Pro Retina 13 Inches AppleCare
15    £700                              I7 4790k Water Cooled
16    £650                                     Gigabyte P15V2
17    £280                                 Two Monitors i7 PC
18    £250                                  Gaming laptop pro
19  £1,000                              MAC BOOK PRO 15 Ritna
20    £550  Apple MacBook Pro Laptop - A1286 15.2" 500 GB ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>BeautifulSoup allow you to use a <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-regular-expression" rel="nofollow noreferrer">regex as the filter</a>. In your site the class names of <code>a</code> tag  have <code>-ab</code> in it. </p>
<p>You can use</p>
<pre><code>soup.find_all('a',class_=re.compile("-ab"))
</code></pre>
<p>But in some case there need not be any common terms in the class names, the you could check if you can try to use methods in 
<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-back-and-forth" rel="nofollow noreferrer">Going back and forth</a>
, <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-sideways" rel="nofollow noreferrer">Going sideways</a> , <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-down" rel="nofollow noreferrer">Going down</a> and <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-up" rel="nofollow noreferrer">Going up</a> sections of the documentation to somehow uniquely identify the element you need without relying on the class name.</p>
<p>Coming back to your Question</p>
<pre><code>html="""
&lt;a class="G-ab" href="thewebsite.com"&gt;&lt;div class="G-l"&gt;&lt;div class="G-m"&gt;Product Name&lt;/div&gt;&lt;/div&gt;&lt;div class="G-k"&gt;&lt;div&gt;S$230&lt;/div&gt;&lt;div&gt;Product Description&lt;/div&gt;&lt;div&gt;Used&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;
&lt;a class="K-ab" href="thewebsite.com"&gt;&lt;div class="K-l"&gt;&lt;div class="K-m"&gt;Product Name&lt;/div&gt;&lt;/div&gt;&lt;div class="K-k"&gt;&lt;div&gt;S$230&lt;/div&gt;&lt;div&gt;Product Description&lt;/div&gt;&lt;div&gt;Used&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;
"""
from bs4 import BeautifulSoup
import re
soup=BeautifulSoup(html,'html.parser')
a_links=soup.find_all('a',class_=re.compile("-ab"))
print(a_links)
</code></pre>
<p>Outputs:</p>
<pre><code>[&lt;a class="G-ab" href="thewebsite.com"&gt;&lt;div class="G-l"&gt;&lt;div class="G-m"&gt;Product Name&lt;/div&gt;&lt;/div&gt;&lt;div class="G-k"&gt;&lt;div&gt;S$230&lt;/div&gt;&lt;div&gt;Product Description&lt;/div&gt;&lt;div&gt;Used&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;, &lt;a class="K-ab" href="thewebsite.com"&gt;&lt;div class="K-l"&gt;&lt;div class="K-m"&gt;Product Name&lt;/div&gt;&lt;/div&gt;&lt;div class="K-k"&gt;&lt;div&gt;S$230&lt;/div&gt;&lt;div&gt;Product Description&lt;/div&gt;&lt;div&gt;Used&lt;/div&gt;&lt;/div&gt;&lt;/a&gt;]
</code></pre>
<p>Both the <code>a</code> tags with different class names containing <code>-ab</code> were selected.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use attribute = value selector with ends with $ operator</p>
<pre><code>items = soup.select("a[class$='-ab']")
</code></pre>
</div>
<span class="comment-copy">1.  Without knowing the structure of the html, it's impossible to tell if there are other selectors you could use instead of classes.  2. Please read here, before scraping any websites (<a href="http://www.robotstxt.org/" rel="nofollow noreferrer">robotstxt.org</a>)</span>
<span class="comment-copy">The only ones that are disallowed are those that my scraper wont really go</span>
<span class="comment-copy">Can you share the URL for the target website?</span>
<span class="comment-copy"><a href="https://www.carousell.com/search/products/?sort_by=time_created%2Cdescending&amp;query=I7&amp;cc_id=2195" rel="nofollow noreferrer">carousell.com/search/products/…</a></span>
<span class="comment-copy">How are you accessing this site with python?</span>
<span class="comment-copy">Since this is a simple regex, we could also use the contains CSS selector: <code>'a[class*="-ab"]'</code> or the ends with selector <code>'a[class$="-ab"]'</code>. Great answer nonetheless!</span>
<span class="comment-copy">oh I c that it has been aded as a comment elsewhere</span>
