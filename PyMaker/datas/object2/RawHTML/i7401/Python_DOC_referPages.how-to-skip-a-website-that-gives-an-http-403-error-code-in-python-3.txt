<div class="post-text" itemprop="text">
<p>I have a list of URLs that I am trying to check using <code>urllib</code>. It's working just fine until it encounters a website that blocks the request. In that case I just want to skip it and continue to the next URL from the list. Any idea how to do it?</p>
<p>Here is the full error:</p>
<pre><code>Traceback (most recent call last):
  File "C:/Users/Goris/Desktop/ssser/link.py", line 51, in &lt;module&gt;
    x = urllib.request.urlopen(req)
  File "C:\Users\Goris\AppData\Local\Programs\Python\Python36-32\lib\urllib\request.py", line 223, in urlopen
    return opener.open(url, data, timeout)
  File "C:\Users\Goris\AppData\Local\Programs\Python\Python36-32\lib\urllib\request.py", line 532, in open
    response = meth(req, response)
  File "C:\Users\Goris\AppData\Local\Programs\Python\Python36-32\lib\urllib\request.py", line 642, in http_response
    'http', request, response, code, msg, hdrs)
  File "C:\Users\Goris\AppData\Local\Programs\Python\Python36-32\lib\urllib\request.py", line 570, in error
    return self._call_chain(*args)
  File "C:\Users\Goris\AppData\Local\Programs\Python\Python36-32\lib\urllib\request.py", line 504, in _call_chain
    result = func(*args)
  File "C:\Users\Goris\AppData\Local\Programs\Python\Python36-32\lib\urllib\request.py", line 650, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 403: Forbidden
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error you're seeing simply indicates that the server has marked the requested resource - that is, the URL you're trying to access - as forbidden to you. It doesn't give any indication of <em>why</em> the resource is forbidden, although the most common reason for such an error is that you would need to log in first.</p>
<p>But anyway, it doesn't really matter. The way to skip this page and move on to the next one is to catch the raised error and ignore it. If your URL-accessing code is within a loop, like this:</p>
<pre><code>while &lt;condition&gt;:
    x = urllib.request.urlopen(req)
    &lt;more code&gt;
</code></pre>
<p>or</p>
<pre><code>for req in &lt;list&gt;:
    x = urllib.request.urlopen(req)
    &lt;more code&gt;
</code></pre>
<p>then probably the easiest way to catch and ignore the error is this:</p>
<pre><code>while &lt;condition&gt;:
    try:
        x = urllib.request.urlopen(req)
    except urllib.error.HTTPError as e:
        if e.code in (..., 403, ...):
            continue
    &lt;more code&gt;
</code></pre>
<p>where <code>continue</code> jumps immediately to the next iteration of the loop. Or you could move the processing code to a function:</p>
<pre><code>def process_url(x):
    &lt;more code&gt;

while &lt;condition&gt;:
    try:
        x = urllib.request.urlopen(req)
    except urllib.error.HTTPError as e:
        if e.code in (..., 403, ...):
            continue
        else:
            process_url(x)
    else:
        process_url(x)
</code></pre>
<p>On the other hand, if your URL <em>accessing</em> code is already in a function, you can just <code>return</code>.</p>
<pre><code>def access_url(req)
    try:
        x = urllib.request.urlopen(req)
    except urllib.error.HTTPError as e:
        if e.code in (..., 403, ...):
            return
    &lt;more code&gt;
</code></pre>
<p>I strongly advise you to learn about <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes" rel="nofollow noreferrer">the HTTP status codes</a>, and be aware of  <a href="https://docs.python.org/3/library/urllib.error.html#module-urllib.error" rel="nofollow noreferrer">the errors that <code>urllib.request</code> can generate</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I haven't tried this, nor I know urlib, but you could use a try and except statement to catch the error and continue thereafter. You could try</p>
<pre><code>try:
    #connect-to-site
except:
    #connect-to-next-site
</code></pre>
<p>If you want to constantly catch exceptions you could use</p>
<pre><code>def func():
    try:
        #connect-to-site
    except:
        func()
</code></pre>
<p>Although this is not recommended because you risk blowing up the stack (Matteo Italia)</p>
</div>
<span class="comment-copy">What's the error?</span>
<span class="comment-copy">urllib.error.HTTPError: HTTP Error 403: Forbidden</span>
<span class="comment-copy">Okay, please edit that information into your question. You’ll probably want to just catch that error with a <code>try</code>/<code>except</code>. If you don’t know how to apply that to your script, you’ll also probably want to edit the relevant code into your question.</span>
<span class="comment-copy">In reference to the previous version of your question, an HTTP 403 error usually does not indicate that the website is blocking <i>robots</i>, rather that the site is blocking <i>all</i> clients. (Although we can't be sure. It is technically possible for a site to strategically issue 403 errors in an attempt to block crawler robots, but then again that's easy to work around.)</span>
<span class="comment-copy">Don't go recursive for no reason - you risk blowing up the stack. If the code is written decently (a single loop that picks the next page to load from a list) there's actually no need to do anything particular in the <code>except</code> - just <code>continue</code> to the next iteration.</span>
