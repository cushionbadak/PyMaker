<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6260089/strange-result-when-removing-item-from-a-list">strange result when removing item from a list [duplicate]</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>in this code I am trying to create a function anti_vowel that will remove all vowels (aeiouAEIOU) from a string. I think it <em>should</em> work ok, but when I run it, the sample text "Hey look Words!" is returned as "Hy lk Words!". It  "forgets" to remove the last 'o'. How can this be?</p>
<pre><code>text = "Hey look Words!"

def anti_vowel(text):

    textlist = list(text)

    for char in textlist:
        if char.lower() in 'aeiou':
            textlist.remove(char)

    return "".join(textlist)

print anti_vowel(text)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're modifying the list you're iterating over, which is bound to result in some unintuitive behavior. Instead, make a copy of the list so you don't remove elements from what you're iterating through.</p>
<pre><code>for char in textlist[:]: #shallow copy of the list
    # etc
</code></pre>
<hr/>
<p>To clarify the behavior you're seeing, check this out. Put <code>print char, textlist</code> at the beginning of your (original) loop. You'd expect, perhaps, that this would print out your string vertically, alongside the list, but what you'll actually get is this:</p>
<pre><code>H ['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
e ['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
  ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] # !
l ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
o ['H', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
k ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] # Problem!!
  ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
W ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
o ['H', 'y', ' ', 'l', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!'] 
d ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
s ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
! ['H', 'y', ' ', 'l', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
Hy lk Words!
</code></pre>
<p>So what's going on? The nice <code>for x in y</code> loop in Python is really just syntactic sugar: it still accesses list elements by index. So when you remove elements from the list while iterating over it, you start skipping values (as you can see above). As a result, you never see the second <code>o</code> in <code>"look"</code>; you skip over it because the index has advanced "past" it when you deleted the previous element. Then, when you get to the <code>o</code> in <code>"Words"</code>, you go to remove the first occurrence of <code>'o'</code>, which is the one you skipped before.</p>
<hr/>
<p>As others have mentioned, list comprehensions are probably an even better (cleaner, clearer) way to do this. Make use of the fact that Python strings are iterable:</p>
<pre><code>def remove_vowels(text): # function names should start with verbs! :)
    return ''.join(ch for ch in text if ch.lower() not in 'aeiou')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Other answers tell you why <code>for</code> skips items as you alter the list. This answer tells you how you should remove characters in a string without an explicit loop, instead.</p>
<p>Use <a href="http://docs.python.org/2/library/stdtypes.html#str.translate" rel="nofollow"><code>str.translate()</code></a>:</p>
<pre><code>vowels = 'aeiou'
vowels += vowels.upper()
text.translate(None, vowels)
</code></pre>
<p>This deletes all characters listed in the second argument.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; text = "Hey look Words!"
&gt;&gt;&gt; vowels = 'aeiou'
&gt;&gt;&gt; vowels += vowels.upper()
&gt;&gt;&gt; text.translate(None, vowels)
'Hy lk Wrds!'
&gt;&gt;&gt; text = 'The Quick Brown Fox Jumps Over The Lazy Fox'
&gt;&gt;&gt; text.translate(None, vowels)
'Th Qck Brwn Fx Jmps vr Th Lzy Fx'
</code></pre>
<p>In Python 3, the <code>str.translate()</code> method (Python 2: <code>unicode.translate()</code>) differs in that it doesn't take a <em>deletechars</em> parameter; the first argument is a dictionary mapping Unicode ordinals (integer values) to new values instead. Use <code>None</code> for any character that needs to be deleted:</p>
<pre><code># Python 3 code
vowels = 'aeiou'
vowels += vowels.upper()
vowels_table = dict.fromkeys(map(ord, vowels))
text.translate(vowels_table)
</code></pre>
<p>You can also use the <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow"><code>str.maketrans()</code> static method</a> to produce that mapping:</p>
<pre><code>vowels = 'aeiou'
vowels += vowels.upper()
text.translate(text.maketrans('', '', vowels))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Quoting <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow noreferrer">from the docs</a>:</p>
<blockquote>
<p><strong>Note</strong>: There is a subtlety when the sequence is being modified by the
  loop (this can only occur for mutable sequences, i.e. lists). An
  internal counter is used to keep track of which item is used next, and
  this is incremented on each iteration. When this counter has reached
  the length of the sequence the loop terminates. This means that if the
  suite deletes the current (or a previous) item from the sequence, the
  next item will be skipped (since it gets the index of the current item
  which has already been treated). Likewise, if the suite inserts an
  item in the sequence before the current item, the current item will be
  treated again the next time through the loop. This can lead to nasty
  bugs that can be avoided by making a temporary copy using a slice of
  the whole sequence, e.g.,</p>
</blockquote>
<pre><code>for x in a[:]:
    if x &lt; 0: a.remove(x)
</code></pre>
<hr/>
<p>Iterate over a shallow copy of the list using <code>[:]</code>. You're modifying a list while iterating over it, this will result in some letters being missed.</p>
<p>The <code>for</code> loop keeps track of index, so when you remove an item at index <code>i</code>, the next item at <code>i+1</code>th position shifts to the current index(<code>i</code>) and hence in the next iteration you'll actually pick the <code>i+2</code>th item.</p>
<p>Lets take an easy example:</p>
<pre><code>&gt;&gt;&gt; text = "whoops"
&gt;&gt;&gt; textlist = list(text)
&gt;&gt;&gt; textlist
['w', 'h', 'o', 'o', 'p', 's']
for char in textlist:
    if char.lower() in 'aeiou':
        textlist.remove(char)
</code></pre>
<p><strong>Iteration 1 : Index = 0.</strong></p>
<p><code>char = 'W'</code> as it is at index 0. As it doesn't satisfies that condition you'll do noting.</p>
<p><strong>Iteration 2 : Index = 1.</strong></p>
<p><code>char = 'h'</code> as it is at index 1. Nothing more to do here.</p>
<p><strong>Iteration 3 : Index = 2.</strong></p>
<p><code>char = 'o'</code> as it is at index 2. As this item satisfies the condition so it'll be removed from the list and all the items to it's right will shift one place to the left to fill the gap.</p>
<p>now <code>textlist</code> becomes :</p>
<pre><code>   0    1    2    3    4
`['w', 'h', 'o', 'p', 's']`
</code></pre>
<p>As you can see the other <code>'o'</code> moved to index 2, i.e the current index so it'll be skipped in the next iteration. So, this is the reason some items are bring skipped in your iteration. Whenever you remove an item the next item is skipped from the iteration.</p>
<p><strong>Iteration 4 : Index = 3.</strong></p>
<p><code>char = 'p'</code> as it is at index 3.</p>
<p>....</p>
<hr/>
<h1>Fix:</h1>
<p>Iterate over a <strong>shallow copy</strong> of the list to fix this issue:</p>
<pre><code>for char in textlist[:]:        #note the [:]
    if char.lower() in 'aeiou':
        textlist.remove(char)
</code></pre>
<hr/>
<h1>Other alternatives:</h1>
<p><strong>List comprehension:</strong></p>
<p>A one-liner using <code>str.join</code> and a <code>list comprehension</code>:</p>
<pre><code>vowels = 'aeiou'
text = "Hey look Words!"
return "".join([char for char in text if char.lower() not in vowels])
</code></pre>
<p><strong>regex:</strong></p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = "Hey look Words!"
&gt;&gt;&gt; re.sub('[aeiou]', '', text, flags=re.I)
'Hy lk Wrds!'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're modifying the data you're iterating over. Don't do that.</p>
<pre><code>''.join(x for x in textlist in x not in VOWELS)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>text = "Hey look Words!"

print filter(lambda x: x not in "AaEeIiOoUu", text)
</code></pre>
<p><strong>Output</strong></p>
<pre class="lang-none prettyprint-override"><code>Hy lk Wrds!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're iterating over a list and deleting elements from it at the same time.</p>
<p>First, I need to make sure you clearly understand the role of <code>char</code> in <code>for char in textlist: ...</code>.  Take the situation where we have reached the letter 'l'.  The situation is <strong>not</strong> like this:</p>
<pre><code>['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
                      ^
                    char
</code></pre>
<p>There is no link between <code>char</code> and the position of the letter 'l' in the list.  If you modify <code>char</code>, the list will not be modified.  The situation is more like this:</p>
<pre><code>['H', 'e', 'y', ' ', 'l', 'o', 'o', 'k', ' ', 'W', 'o', 'r', 'd', 's', '!']
                      ^
char = 'l'
</code></pre>
<p>Notice that I've kept the <code>^</code> symbol.  This is the hidden pointer that the code managing the <code>for char in textlist: ...</code> loop uses to keep track of its position in the loop. Every time you enter the body of the loop, the pointer is advanced, and the letter referenced by the pointer is copied into <code>char</code>.</p>
<p>Your problem occurs when you have two vowels in succession.  I'll show you what happens from the point where you reach 'l'. Notice that I've also changed the word "look" to "leap", to make it clearer what's going on:</p>
<p><em>advance pointer to next character ('l') and copy to <code>char</code></em></p>
<pre><code>['H', 'e', 'y', ' ', 'l', 'e', 'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']
                   -&gt; ^
char = 'l'
</code></pre>
<p><em><code>char</code> ('l') is not a vowel, so do nothing</em></p>
<p><em>advance pointer to next character ('e') and copy to <code>char</code></em></p>
<pre><code>['H', 'e', 'y', ' ', 'l', 'e', 'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']
                        -&gt; ^
char = 'e'
</code></pre>
<p><em><code>char</code> ('e') is a vowel, so delete the first occurrence of <code>char</code> ('e')</em></p>
<pre><code>['H', 'e', 'y', ' ', 'l', 'e', 'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']
                           ^

['H', 'e', 'y', ' ', 'l',      'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']
                           ^

['H', 'e', 'y', ' ', 'l',   &lt;- 'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']
                           ^

['H', 'e', 'y', ' ', 'l', 'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']
                           ^
</code></pre>
<p><em>advance pointer to next character ('p') and copy to <code>char</code></em></p>
<pre><code>['H', 'e', 'y', ' ', 'l', 'a', 'p', ' ', 'W', 'o', 'r', 'd', 's', '!']
                             -&gt; ^
char = 'p'
</code></pre>
<p>When you removed the 'e' all the characters after the 'e' moved one place to the left, so it was as if <code>remove</code> had advanced the pointer. The result is that you skipped past the 'a'.</p>
<p>In general, you should avoid modifying lists while iterating over them.  It's better to construct a new list from scratch, and Python's list comprehensions are the perfect tool for doing this.  E.g.</p>
<pre><code>print ''.join([char for char in "Hey look Words" if char.lower() not in "aeiou"])
</code></pre>
<p>But if you haven't learnt about comprehensions yet, the best way is probably:</p>
<pre><code>text = "Hey look Words!"

def anti_vowel(text):

  textlist = list(text)
  new_textlist = []

  for char in textlist:
    if char.lower() not in 'aeiou':
      new_textlist.append(char)

    return "".join(new_textlist)

print anti_vowel(text)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://www.python.org/dev/peps/pep-0202/" rel="nofollow">List Comprehensions</a>:</p>
<pre><code>vowels = 'aeiou'
text = 'Hey look Words!'
result = [char for char in text if char not in vowels]
print ''.join(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Others have already explained the issue with your code.  For your task, a generator expression is easier and less error prone.</p>
<pre><code>&gt;&gt;&gt; text = "Hey look Words!"
&gt;&gt;&gt; ''.join(c for c in text if c.lower() not in 'aeiou')
'Hy lk Wrds!'
</code></pre>
<p>or </p>
<pre><code>&gt;&gt;&gt; ''.join(c for c in text if c not in 'AaEeIiOoUu')
'Hy lk Wrds!'
</code></pre>
<p>however, <code>str.translate</code> is the best way to go.</p>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't delete items from list you iterating through:
But you can make new list from the old one with list comprehension syntax. List comprehension is very useful in this situation. You can read about list comprehension <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">here</a></p>
<p>So you solution will look like this:</p>
<pre><code>text = "Hey look Words!"

def anti_vowel(text):
    return "".join([char for char in list(text) if char.lower() not in 'aeiou'])

print anti_vowel(text)
</code></pre>
<p>It's pretty, isn't it :P</p>
</div>
<div class="post-text" itemprop="text">
<p>Try to not use the list() function on a string. It will make things a lot more complicated. </p>
<p>Unlike Java, in Python, strings are considered as arrays. Then, try to use an index for loop and del keyword. </p>
<pre><code>for x in range(len(string)):
    if string[x].lower() in "aeiou":
        del string[x]
</code></pre>
</div>
<span class="comment-copy">Testing and then removing has a N^2 complexity: just remove the char, whether it is present or not... (or use other suggested solutions)</span>
<span class="comment-copy">@Don: O(n^2) where n is what, the length of the input text?</span>
<span class="comment-copy"><code>remove_vowels</code> would be a better name than <code>anti_vowel</code></span>
<span class="comment-copy">Yes, but the 'if' is not that influent (it has complexity "5"): the N^2 is due to 'for' and '.remove'</span>
<span class="comment-copy">Just to simplify the logic: <code>for char in 'aeiouAEIOU': textlist.remove(char)</code></span>
<span class="comment-copy"><code>str</code> is iterable, <code>filter</code> would arguably be cleaner than a list comprehension.</span>
<span class="comment-copy">@TC1 There's a case for <code>filter</code> and of course for <code>str.translate</code> as well. I personally think list comprehensions are more readable than either of those two; hence my choice :)</span>
<span class="comment-copy">Probably a note for python3 could be useful: <code>text.translate(dict.fromkeys(map(ord, vowels)))</code></span>
<span class="comment-copy">@Bakuriu: Indeed; the same applies to <code>unicode.translate()</code> on Python 2, which is the same type in any case.</span>
<span class="comment-copy"><code>re.sub('[aeiou]', '', flags=re.I)</code> is easier (especially if the list of chars grows longer)</span>
<span class="comment-copy">This does not provide an answer to the question. To critique or request clarification from an author, leave a comment below their post.</span>
<span class="comment-copy">@RandomSeed I thought so too at first, but it actually does answer the question.</span>
<span class="comment-copy">@EduardLuca It might do what the OP wanted to do (I have no idea), but it does not answer the question: "How can this be?". As a matter of fact, very few answers here do actually answer this question.</span>
<span class="comment-copy">I don't see anything wrong with providing an alternate solution. Especially a cleaner and shorter one. So even if it doesn't answer the question directly, it solves the root problem.</span>
