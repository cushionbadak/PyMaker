<div class="post-text" itemprop="text">
<p>I'd like to understand what's the cause of this totally unexpected change of behaviour and how it could be implemented. I come from JS world and this is very likely to be impossible to implement in any way..</p>
<p>Calling a fn by traversing an object gets a different result from when this object is first assigned to a new variable:</p>
<pre><code>&gt;&gt;&gt; from core.models import SomeModel
&gt;&gt;&gt; s = SomeModel.objects.get(id=45)
&gt;&gt;&gt; s.user.profile.needs_review
True
&gt;&gt;&gt; s.user.profile.needs_review = False
&gt;&gt;&gt; s.user.profile.needs_review
True
&gt;&gt;&gt; profile = s.user.profile
&gt;&gt;&gt; profile.needs_review
True
&gt;&gt;&gt; profile.needs_review = False
&gt;&gt;&gt; profile.needs_review
False
</code></pre>
<p>This is really disturbing because in any language I've worked with this would execute likewise.</p>
<p>BTW, this is a regular django model but I'm more interested in knowing what kind of language resources can be used to accomplish such effect.</p>
<p>To better explain why I got into this, I was trying to do a regular save on the <code>profile</code> model by doing:</p>
<pre><code>streamer.user.profile.needs_review = True
streamer.user.profile.save()
</code></pre>
<p>And it didn't worked, but doing:</p>
<pre><code>profile = streamer.user.profile
profile.needs_review = True
profile.save()
</code></pre>
<p>worked just fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to save a model object if you make changes to it otherwise it won't reflect.</p>
<pre><code>&gt;&gt;&gt; s.user.profile.needs_review = False
&gt;&gt;&gt; s.save()
&gt;&gt;&gt; s.user.profile.needs_review
False
</code></pre>
<p>The line below</p>
<pre><code>&gt;&gt;&gt; profile = s.user.profile
&gt;&gt;&gt; profile.needs_review
True
</code></pre>
<p>It does not load new data from database So that's why you see this behaviour</p>
</div>
<div class="post-text" itemprop="text">
<p>About the python language resource that allows this behavior, you can check this:<br/>
<a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#property</a></p>
<pre><code>class C:
    def __init__(self):
        self._x = None

    @property
    def x(self):
        """I'm the 'x' property."""
        return self._x

    @x.setter
    def x(self, value):
        self._x = value

    @x.deleter
    def x(self):
        del self._x
</code></pre>
<p>Basically, django uses this to abstract the database queries and does not behave as a regular object in your example.</p>
</div>
<span class="comment-copy">Please show your <code>user</code> model.</span>
<span class="comment-copy">it is the standard user model from django</span>
<span class="comment-copy">Does it change if you run <code>.save()</code> after changing the field?</span>
<span class="comment-copy">Traversing to a foreign key relationship <i>loads the object from the database</i>. If you don't persist changes (call <code>.save()</code> on the object), you get a new copy loaded from the database that doesn't have the change you just made. Best to keep a local reference to that one object, make the changes, and save without re-traversing the graph.</span>
<span class="comment-copy">For your example, <code>streamer.save()</code> would have preserved the change too, your mistake was traversing to <code>streamer.user.profile</code> <i>again</i>.</span>
<span class="comment-copy">Also, I'd like to understand how to implement a similar feature..</span>
<span class="comment-copy">@MartijnPieters Edited thanks</span>
<span class="comment-copy">@enapupe: similar to what? Traversing, database data reflection, detecting changes to attributes?</span>
<span class="comment-copy">I think that what's not clear to me is WHY assigning it to a new variable changes everything.</span>
<span class="comment-copy">When you assign it to a new variable, it will execute the <code>getter</code> function of the property, creating an instance of the object you are editing. When you do not assign, you still use the parent object. Still, does not explain this behavior, but it is in Django code.</span>
