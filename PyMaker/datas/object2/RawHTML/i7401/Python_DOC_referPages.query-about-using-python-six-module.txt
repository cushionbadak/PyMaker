<div class="post-text" itemprop="text">
<p>I'm using the <a href="http://pythonhosted.org/six/" rel="nofollow noreferrer">six</a> module in my program, and the code is as follows: </p>
<pre><code>if six.PY2:
    do_something()
else:   
    do_something_else()
</code></pre>
<p>The problem with this approach is that, the function <code>do_something_else()</code> would run only if Python version is 3.4+ due to dependencies. (And not on Py 3.3)</p>
<p>How do I check for this?</p>
<p>Thanks a lot! :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Since it's a common requirement, <code>six</code> already provides this one:</p>
<pre><code>six.PY34
</code></pre>
<p>It will be true if the Python version is greater or equal than v3.4.  </p>
<p>So you could do this:</p>
<pre><code>if six.PY2:
    do_something()
elif six.PY34:   
    do_something_else()
else:
    # ...do what?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get the actual version number as a tuple from <a href="https://docs.python.org/3/library/sys.html#sys.version_info" rel="nofollow noreferrer"><code>sys.version_info</code></a>. So:</p>
<pre><code>if sys.version_info &gt;= (3, 4):
    ...
</code></pre>
</div>
<span class="comment-copy">Are you asking how to check whether Python is version 3.4 or higher?</span>
<span class="comment-copy">Yes. I am curious to know if it's possible to check for the same using Six.</span>
<span class="comment-copy">If you are concerned about different dependencies for v.2 vs. 3 - consider that <code>import</code> can be put under if/else clause. if condition: import something / else: import something_other</span>
<span class="comment-copy">It looks like they abandoned the two-digit scheme since 3.4. I have v3.6, and six.PY34 is True, but PY35 and PY36 are undefined and throw AttributeError. So, for example, one cannot test this way if F"..." strings are available.</span>
<span class="comment-copy">@ddbug You can not test if f string are available anyway, because that will be a syntax error at <i>import</i> time.  So, your example is not a good one.</span>
<span class="comment-copy">I do not understand why you mentioned <code>import</code> here, but yes, both if and else paths must be understood by the actual compiler version, at compile time. Since import statements syntax is mostly same in v2 and 3, importing different things for v2 and 3 will work, import statements are executed in runtime.</span>
<span class="comment-copy">@ddbug It is an error at import time because the f-string syntax is invalid in anything older than Python 3.6. So, you wouldn't even be able to import a file that contained f-strings with Python 3.5, let alone test it with an if statement.</span>
<span class="comment-copy">Sorry, I shouldn't have mentioned f strings at all, it only added confusion. What I wanted to point out that suitable imports can be invoked in runtime, when the actual py version is known.  And six.PYnn is not a reliable way to query for 3.x versions, <code>six</code> can only distinguish between py2 and py3. And even then the main file/module should not contain stuff that v2 cannot compile.</span>
<span class="comment-copy">And then you use lexicographical ordering of tuples:  <code>sys.version_info &gt;= (3, 4)</code></span>
