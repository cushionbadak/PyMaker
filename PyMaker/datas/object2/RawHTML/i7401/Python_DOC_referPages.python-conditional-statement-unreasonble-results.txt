<div class="post-text" itemprop="text">
<p>I try to understand why I get unreasonable result from the following <code>if</code>:</p>
<pre><code>def print_if_neg (a,b):   
    if a &lt; 0 != b &lt; 0:
        print "Only One Neg"
    else:
        print "0 or 2"

print_if_neg(1,1)
print_if_neg(-1,1)
print_if_neg (1,-1)
print_if_neg(-1,-1)
</code></pre>
<p>I get 3 times <code>0 or 2</code> and then last one <code>Only One Neg</code>.<br/>
What is the order of this complicated condition?</p>
<p>I've tried this:</p>
<pre><code>if (a &lt; 0) != (b &lt; 0):
</code></pre>
<p>and it's ok but I'm trying to understand why above doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because condition <code>a &lt; 0 != b &lt; 0</code> means <code>a &lt; 0</code> AND <code>0 != b</code> AND <code>b &lt; 0</code> First of all when <code>a &gt;= 0</code> first condition evaluates to False and so nothing else gets evaluated. Then, if a is &lt;0 but b=1 last condition in the chain is False. Therefore your chained condition is False 3 out of 4 times. </p>
<p>This is well explained in <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">section 6.10</a> of Python documentation. </p>
</div>
<div class="post-text" itemprop="text">
<p>You need parentheses due to <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">operator precedence</a></p>
<pre><code>def print_if_neg (a,b):   
    if (a &lt; 0) != (b &lt; 0):
        print "Only One Neg"
    else:
        print "0 or 2"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As CoryKramer pointed out, the operator precedence is making the difference.</p>
<p>Your code is equivalent to this:</p>
<pre><code>def print_if_neg (a,b):   
    if a &lt; (0 != b) &lt; 0:
        print "Only One Neg"
    else:
        print "0 or 2"
</code></pre>
<p>Because <code>!=</code> has higher precedence than <code>&lt;</code> by language definition.</p>
<p>So, use <code>()</code> to force the precedence that you need:</p>
<pre><code>def print_if_neg (a,b):   
    if (a &lt; 0) != (b &lt; 0):
        print "Only One Neg"
    else:
        print "0 or 2"
</code></pre>
<p>Also, FYI you are coding the <a href="https://stackoverflow.com/a/433161/1094246"><code>xor</code> operator</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Due to operator precedence you need to place the two conditions in parentheses for your expected results. Otherwise the comparison operators are solved, checking for <code>0 != b</code> in your code, which is not what you expect.</p>
<pre><code>def print_if_neg (a,b):
    if (a &lt; 0) != (b &lt; 0):
        print ("Only One Neg")
    else:
        print ("0 or 2")

print_if_neg(1,1)
print_if_neg(-1,1)
print_if_neg (1,-1)
print_if_neg(-1,-1)
</code></pre>
<p>Note that all comparison operators have the same precedence and comparisons can be chained arbitrarily, e.g., <code>x &lt; y &lt;= z</code> is equivalent to <code>x &lt; y</code> AND <code>y &lt;= z</code></p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://stackoverflow.com/a/11036506/5069105">this</a>, you could make it more readable imo:</p>
<pre><code>from operator import xor
def print_if_neg (a, b):   
    if xor(a &lt; 0, b &lt; 0):
        print "Only One Neg"
    else:
        print "0 or 2"
</code></pre>
</div>
