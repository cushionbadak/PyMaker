<div class="post-text" itemprop="text">
<p>Hi I would like to compare two list that are different lengths and print a sorted table with items that are missing in each table. I am partially able to accomplish this and print the values that are missing in list_2.  But I am unable to also print the values that are missing in list_1 from list_2, the letter 'z'. How can I perform this to get the desired output below?</p>
<pre><code>list_1 = ['a', 'b', 'c', 'd', 'e', 'f']
list_2 = ['b', 'c', 'f', 'z']

table_format = '{:&lt;10} {:&lt;10}'
print(table_format.format('list_1', 'list_2'))
print('-' * 20)
for x in list_1:
    for y in list_2:
        if x in y:
            print(table_format.format(x, y))
            break
    else:
        print(table_format.format(x,'Missing'))
</code></pre>
<p>Current Output:</p>
<pre><code>list_1     list_2    
--------------------
a          Missing   
b          b         
c          c         
d          Missing   
e          Missing   
f          f        
</code></pre>
<p>Desired Output:</p>
<pre><code>list_1     list_2    
--------------------
a          Missing   
b          b         
c          c         
d          Missing   
e          Missing   
f          f    
Missing    z
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One solution could be using a third list that contains all the elements of the two original lists. Then we could sort the new list and while iterating over it, we could check the existence of elements of the third list in the original ones. Actually making the third list a set would be better. Following the suggestion from <code>Patrick Haugh</code>, we should convert the original lists into sets too before the iteration. Thus the process will be more efficient. Why? Follow this post. <a href="https://stackoverflow.com/questions/7717011/which-is-faster-and-why-set-or-list">Which is faster and why? Set or List?</a></p>
<pre><code>list_1 = set(['a', 'b', 'c', 'd', 'e', 'f'])  # Or list_1 = {'a', 'b', 'c', 'd', 'e', 'f'}
list_2 = set(['b', 'c', 'f', 'z'])  # list_2 = {'b', 'c', 'f', 'z'}

list_3 = set(list_1 | list_2)
table_format = '{:&lt;10} {:&lt;10}'
print(table_format.format('list_1', 'list_2'))
print('-' * 20)
for elem in sorted(list_3):
    if elem in list_1:
        if elem in list_2:
            print(table_format.format(elem, elem))
        else:
            print(table_format.format(elem, 'Missing'))
    else:
        print(table_format.format('Missing', elem))
</code></pre>
<p>Output:</p>
<pre><code>list_1     list_2    
--------------------
a          Missing   
b          b         
c          c         
d          Missing   
e          Missing   
f          f         
Missing    z
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using an <code>OrderedDict</code> seems to do the job:</p>
<pre><code>from collections import OrderedDict

list_1 = ['a', 'b', 'c', 'd', 'e', 'f']
list_2 = ['b', 'c', 'f', 'z']

mapping = OrderedDict()
for x in list_1:
    mapping[x] = x if x in list_2 else 'Missing'

for x in list_2:
    mapping[x] = x if x in list_1 else 'Missing'

table_format = '{:&lt;10} {:&lt;10}'
print(table_format.format('list_1', 'list_2'))
print('-' * 20)

for k in mapping:
    if k in list_1:
        print(table_format.format(k, mapping[k]))
    else:
        print(table_format.format(mapping[k], k))
</code></pre>
<p>Output:</p>
<pre><code>list_1     list_2    
--------------------
a          Missing   
b          b         
c          c         
d          Missing   
e          Missing   
f          f         
Missing    z      
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do the same using list comprehension!</p>
<pre><code>&gt;&gt;&gt; print "\n".join(map(str,['list_1\tlist_2\n---------------']+[(each if each in list_1 else 'missing')+'\t'+(each if each in list_2 else 'missing') for each in sorted(set(list_1+list_2))]))
list_1  list_2
---------------
a       missing
b       b
c       c
d       missing
e       missing
f       f
missing z
</code></pre>
<p>I've broke down the comprehension for better understanding!</p>
<pre><code>&gt;&gt;&gt; [each if each in list_1 else 'missing' for each in sorted(set(list_1+list_2))]
['a', 'b', 'c', 'd', 'e', 'f', 'missing']

&gt;&gt;&gt; [each if each in list_2 else 'missing' for each in sorted(set(list_1+list_2))]
['missing', 'b', 'c', 'missing', 'missing', 'f', 'z']

&gt;&gt;&gt; [(each if each in list_1 else 'missing',each if each in list_2 else 'missing') for each in sorted(set(list_1+list_2))]
[('a', 'missing'), ('b', 'b'), ('c', 'c'), ('d', 'missing'), ('e', 'missing'), ('f', 'f'), ('missing', 'z')]

&gt;&gt;&gt; [['list_1','list_2']]+[(each if each in list_1 else 'missing',each if each in list_2 else 'missing') for each in sorted(set(list_1+list_2))]
[['list_1', 'list_2'], ('a', 'missing'), ('b', 'b'), ('c', 'c'), ('d', 'missing'), ('e', 'missing'), ('f', 'f'), ('missing', 'z')]

&gt;&gt;&gt; print "\n".join(map(str,[['list_1','list_2']]+[(each if each in list_1 else 'missing',each if each in list_2 else 'missing') for each in sorted(set(list_1+list_2))]))
['list_1', 'list_2']
('a', 'missing')
('b', 'b')
('c', 'c')
('d', 'missing')
('e', 'missing')
('f', 'f')
('missing', 'z')

&gt;&gt;&gt; print "\n".join(map(str,['list_1\tlist_2\n---------------']+[(each if each in list_1 else 'missing')+'\t'+(each if each in list_2 else 'missing') for each in sorted(set(list_1+list_2))]))
list_1  list_2
---------------
a       missing
b       b
c       c
d       missing
e       missing
f       f
missing z
</code></pre>
</div>
<span class="comment-copy">Have you considered using <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer"><code>set</code></a>?  Try <code>set(list_2) - set(list_1)</code></span>
<span class="comment-copy">That does provide the missing value but not sure how I would make that part of the table during the for loop.</span>
<span class="comment-copy">A minor improvement, but if you save <code>set(list_1)</code> and <code>set(list_2)</code>, you can save time when you do the lookups later.</span>
<span class="comment-copy">This worked great. Thanks for the help and the tip!</span>
<span class="comment-copy">@MBasith This sorts your data. Are you sure that's what you want?</span>
<span class="comment-copy">"...compare two list that are different lengths and print a <code>sorted table</code> with items that are missing in each table." That's why the third list has been sorted.</span>
