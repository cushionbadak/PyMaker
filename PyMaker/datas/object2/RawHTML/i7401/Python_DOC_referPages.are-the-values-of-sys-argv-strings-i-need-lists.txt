<div class="post-text" itemprop="text">
<p>I have a VBA script that runs the following in the command prompt:</p>
<pre><code>D:\WinPython-64bit-2.7.10.3\python-2.7.10.amd64\python.exe D:\GITREPOS\PythonInertia\govlauncher.py [1.1304891,0.5510243,-10.5614766,64.1317974,9483.8000655,9309.4488664,906.3935329,-25.6269843,198.8456995,167.5522187] [0,0,0,0,0,0,0,0,0,0] [0,0,0,0,0,0,0,0,0,0] On 3.8 1800 1900 88.5 -13.64 10 61 16 39.465 True 
</code></pre>
<p>That runs a python file called govlaunch.py that takes a bunch of arguments that I am parsing by using sys.argv[1] or sys.argv[n].</p>
<p>Strangly, sys.argv[1] shows up as <code>[1.1304891,0.5510243,-10.5614766,64.1317974,9483.8000655,9309.4488664,906.3935329,-25.6269843,198.8456995,167.5522187]</code> which is exactly what I want... but it's a string instead of a list like I expected.</p>
<p>Are all of the values sys.argv[0] through sys.argv[14] going to be string types?  How do I go about changing them to what I need?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can parse a string as a literal using <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a></p>
<pre><code>import ast
s = "[1.1304891,0.5510243,-10.5614766,64.1317974,9483.8000655,9309.4488664,906.3935329,-25.6269843,198.8456995,167.5522187]"
x = ast.literal_eval(s)
print (x)
print (type(x))
</code></pre>
<p>Output:</p>
<pre><code>[1.1304891, 0.5510243, -10.5614766, 64.1317974, 9483.8000655, 9309.4488664, 906.3935329, -25.6269843, 198.8456995, 167.5522187]
&lt;type 'list'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can separate strings by comma using split() function which returns a list</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't read from <code>sys.argv</code> directly, use a command parser e.g. <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer"><code>argparse</code></a>. This allows to easily pass and cast multiple types; you won't need to manually cast the different strings to type you want, only specify what type the argument should be coerced to when defining the argument.</p>
<p>You could pass a list of ints as argument, by adding it as an argument and specifying the contained type:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--list', nargs='+', type=int)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>See the following script:</p>
<p>syspython.py:</p>
<pre><code>#!/usr/bin/env python

import sys

print(sys.argv)
</code></pre>
<p>This causes:</p>
<pre><code>cchilders:/tmp 
$ python syspython.py one two three
['syspython.py', 'one', 'two', 'three']
</code></pre>
<p>I would pass these args like:</p>
<pre><code>D:\WinPython-64bit-2.7.10.3\python-2.7.10.amd64\python.exe D:\GITREPOS\PythonInertia\govlauncher.py 1.1304891 0.5510243 -10.5614766 64.1317974 9483
</code></pre>
<p>Just separate with a space, or quote if the arg has spaces like "A book title should be quoted"</p>
<p>As stated below, you can also just split them if you have to:</p>
<pre><code>In [1]: x = "[1234,645,44,777]"

# get ride of [ and ]
In [2]: x = x.replace('[', '').replace(']', '')

In [3]: number_list = x.split(',')

In [4]: number_list
Out[5]: ['1234', '645', '44', '777']
</code></pre>
<p>Here is a nice function to convert your items of argument 1:</p>
<pre><code>def stringlist_to_real_list(input_string):
    clean_input = input_string.replace('[', '').replace(']', '')
    return clean_input.split(',')
</code></pre>
<p>Using it:</p>
<pre><code>In [1]: x = "[23,644,777,444,333]"

In [2]: def stringlist_to_real_list(input_string):
   ...:     clean_input = input_string.replace('[', '').replace(']', '')
   ...:     return clean_input.split(',')
   ...: 

In [3]: stringlist_to_real_list(x)
Out[3]: ['23', '644', '777', '444', '333']
</code></pre>
<p>So now in your script do like:</p>
<pre><code>these_numbers_as_list = stringlist_to_real_list(sys.argv[1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes.</p>
<p>Running;</p>
<pre><code>import sys
for arg in sys.argv:
    print(type(arg))
</code></pre>
<p>With;</p>
<pre><code>python debug.py foo "bar" 123 False 1.23
</code></pre>
<p>Outputs the following:</p>
<pre><code>&lt;type 'str'&gt;
&lt;type 'str'&gt;
&lt;type 'str'&gt;
&lt;type 'str'&gt;
&lt;type 'str'&gt;
&lt;type 'str'&gt;
</code></pre>
<p>If you want to parse them use a parser, such as <code>argparse</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Can do slicing then split:</p>
<pre><code>s = "[1.1304891,0.5510243,-10.5614766,64.1317974,9483.8000655,9309.4488664,906.3935329,-25.6269843,198.8456995,167.5522187]"
print(s[1:-1].split(','))
</code></pre>
<p>Output:</p>
<pre><code>['1.1304891', '0.5510243', '-10.5614766', '64.1317974', '9483.8000655', '9309.4488664', '906.3935329', '-25.6269843', '198.8456995', '167.5522187']
</code></pre>
<p>If want list of floats, do:</p>
<pre><code>print(list(map(float,s[1:-1].split(','))))
</code></pre>
<p>Output:</p>
<pre><code>[1.1304891, 0.5510243, -10.5614766, 64.1317974, 9483.8000655, 9309.4488664, 906.3935329, -25.6269843, 198.8456995, 167.5522187]
</code></pre>
</div>
<span class="comment-copy">You can parse a string as a literal using <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a></span>
<span class="comment-copy">With that much data you’re passing, you’re better off storing it in a structured file and loading from that instead. Otherwise you will sooner or later run into issues where the executing shell is partially messing with your input.</span>
<span class="comment-copy">I like this one if you know you gotta pass a list for that first arg</span>
<span class="comment-copy">Wow, it worked just like you said it would!  I didn't expect the args to be strings, but now that I know I can handle it thanks to you!  I really apprecieate you taking the time to help out with a dumb question!</span>
<span class="comment-copy">thank you!  I forgot about that method, python is cool =)</span>
<span class="comment-copy">Thank you for the advice, can I ask why you shouldn't read from sys.argv directly?</span>
<span class="comment-copy">@KeyboardBandit Sure, you can, but with multiple arguments, a parser works better.</span>
<span class="comment-copy">Thanks for the advice!  Unfortunately I can not change the way the args are passed in... not yet anyway.  So I just have to deal with them as it.  But I did completely forget about the split method, I will give that a go!</span>
<span class="comment-copy">The example above is completed, I just threw the lines in function. Enjoy</span>
