<div class="post-text" itemprop="text">
<p>I have a generator function which I want to call from another function and return the generator obtained. I can see two approaches here - </p>
<p><strong>Note that the below functions are simple dummy functions to illustrate the purpose. Please don't come up with better ways to implement those functions itself.</strong></p>

Method 1

<pre><code>def fun_a(n):
    for i in range(n):
        yield i+10

def fun_b(n):
    if n &lt; 0: 
        yield None
        return
    yield fun_a(n)
</code></pre>
<p>and use it as <code>list(list(fun_b(10))[0])</code> to get <code>[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</code></p>

Method 2

<pre><code>def fun_b(n):
    if n &lt; 0: 
        yield None
        return
    for i in fun_a(n):
        yield i
</code></pre>
<p>Then <code>list(fun_b(10))</code> can give me <code>[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</code>. </p>
<p>While method 1 seems ok'ish, I don't want to return a list of list because in other cases I am returning a list and I don't want to mess up my code. Method 2 is just inefficient. </p>
<p>What would be a really good approach to deal with this situation?</p>
</div>
<div class="post-text" itemprop="text">
<p>I you are using Python 3.3 or higher, you can use the <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="noreferrer"><code>yield from</code></a> syntax introduced in PEP 380:</p>
<blockquote>
<p>PEP 380 adds the yield from expression, allowing a generator to delegate part of its operations to another generator. This allows a section of code containing yield to be factored out and placed in another generator. Additionally, the subgenerator is allowed to return with a value, and the value is made available to the delegating generator.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; def fun_a(n):
    for i in range(n):
        yield i+10

&gt;&gt;&gt; def fun_b(n):
    if n &lt; 0: 
        yield None
        return
    yield from fun_a(n)


&gt;&gt;&gt; list(fun_b(10))
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
&gt;&gt;&gt; 
</code></pre>
<p>If not, then you'll just have to use the <code>for item in iterable:</code> syntax.</p>
</div>
<span class="comment-copy">I knew about the <code>yield from</code> in Python 3. I am using python 2.7 but it is good to have a conclusive answer. I feel it is high time that I switch to python 3+ :)</span>
<span class="comment-copy">@Unni Yup. I highly recommend you do. If only for the sane unicode support :P</span>
