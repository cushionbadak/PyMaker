<div class="post-text" itemprop="text">
<p>I often see this at the top of <code>.py</code> files:</p>
<pre><code>#!/usr/bin/env python
</code></pre>
<p>With the unknown state of the OS defaults, I wonder why it's not:</p>
<pre><code>#!/usr/bin/env python2
#!/usr/bin/env python3
</code></pre>
<p>If most OSs provide this versioned symlink, wouldn't that be better?</p>
<p>I found <a href="https://www.python.org/dev/peps/pep-0394/" rel="nofollow noreferrer">PEP 394</a> while looking around, which states that for the time being, developers should assume <code>python -&gt; python2 -&gt; python2.x</code>. It <em>also</em> states that one can assume that the versioned equivalents, <code>python3</code> and <code>python2</code>, exist. So what's the harm in <em>not</em> leaving it to chance and providing that extra character?</p>
<p>If one doesn't have <code>python2</code> installed because the OS ships by default with <code>python -&gt; python3</code> (like Arch linux), I'd much prefer this issue when running a script or program:</p>
<pre><code>/usr/bin/env: ‘python2’: No such file or directory
</code></pre>
<p>Alternatively, this error is much worse, particularly for a new user (<code>python</code> exists, it's just the wrong version):</p>
<pre><code>File "&lt;stdin&gt;", line 1
  print 'Hello world'
                    ^
SyntaxError: Missing parentheses in call to 'print'
</code></pre>
<p>That said, I find the latter far more common. At least now I know some typical compatibility errors well enough to think to myself "Oh, right. It's the <code>python</code> symlink."</p>
<p>Two questions ask <em>how</em> to specify/verify the desired version:</p>
<ul>
<li><p><a href="https://stackoverflow.com/questions/3586776/is-there-a-standard-way-to-make-sure-a-python-script-will-be-interpreted-by-pyth">This 2010 question</a> suggests treating <code>python</code> as meaning <code>python2</code> and <code>python3</code> as required to explicitly call out <code>python3</code>.</p></li>
<li><p><a href="https://stackoverflow.com/questions/19625768/is-there-a-standard-way-to-make-sure-a-python-script-will-be-interpreted-by-pyth">This 2013 question</a>: maybe implies that <code>python3</code> shouldn't be used because not all distros ship with it?</p></li>
</ul>
<p>Is there an obvious reason I (or <code>python</code> programmers) <em>shouldn't</em> use a versioned <code>env</code> call if most OSs provide it? To use just <code>python</code> is seeming to cater to a minority who don't have the versioned command while causing confusion to the vast majority who do.</p>
<p>Maybe the answer <em>is</em> to use versioned commands (I'm getting that from PEP 394) but enough time hasn't elapsed to see them appear. To date I've never seen a versioned <code>env</code> call... then again, if it works I never look. If it breaks, it's always a version-less <code>python</code> line so my mental counts are probably skewed!</p>
<hr/>
<p>Some github stats on searches; I was curious on usage:</p>
<ul>
<li><code>#!/usr/bin/env python2</code>: ~210k python file code hits</li>
<li><code>#!/usr/bin/env python3</code>: ~460k</li>
<li><code>#!/usr/bin/env python</code>: ~6 million</li>
</ul>
<p>This could mean that most code is old enough that if the recommendations of the questions above was the prevailing wisdom, folks just haven't updated their files?</p>
<hr/>
<p>I looked at these popular OSs and found them all to use versioned commands:</p>
<ul>
<li>ubuntu: <a href="https://packages.ubuntu.com/xenial/amd64/python-minimal/filelist" rel="nofollow noreferrer">python-minimal</a> and <a href="https://packages.ubuntu.com/xenial/amd64/python3-minimal/filelist" rel="nofollow noreferrer">python3-minimal</a></li>
<li>arch: <a href="https://www.archlinux.org/packages/extra/x86_64/python/files/" rel="nofollow noreferrer">python</a> and <a href="https://www.archlinux.org/packages/extra/x86_64/python2/" rel="nofollow noreferrer">python2</a></li>
<li>fedora: <a href="https://admin.fedoraproject.org/pkgdb/package/rpms/python2/" rel="nofollow noreferrer">python2</a> and <a href="https://admin.fedoraproject.org/pkgdb/package/rpms/python3/" rel="nofollow noreferrer">python3</a></li>
<li>debian: same names/state as ubuntu</li>
<li><a href="https://stackoverflow.com/questions/18671253/how-can-i-use-homebrew-to-install-both-python-2-and-3-on-mac">various</a> sources <a href="https://stackoverflow.com/questions/34680228/switch-between-python-2-7-and-python-3-5-on-mac-os-x">suggest</a> that OS X <a href="http://joebergantine.com/articles/installing-python-2-and-python-3-alongside-each-ot/" rel="nofollow noreferrer">uses</a> versioned commands</li>
<li>windows: I think <a href="https://docs.python.org/3/using/windows.html#customizing-default-python-versions" rel="nofollow noreferrer">there's evidence</a> that windows has versioned commands available</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>When you write the script, you may induce various dependencies on a particular version of Python. Use a dict comprehension? You need at least Python 2.7. Using the <code>async</code> keyword? You need at least Python 3.5.</p>
<p>When you use <code>#!/usr/bin/env python</code>, you aren't saying <em>anything</em> about which version of Python is required to execute your script; you are just saying "Use whatever version of Python is found in your path first." Fundamentally, the developer is the wrong person to specify the shebang.</p>
<p>Instead, the <em>user</em> should be setting the shebang to the path of the correct version of Python on <em>their</em> system.</p>
<p>The <code>distutils</code> package strikes a good compromise here. You, the developer, just put <code>#!python</code> in your script. When you install the script via <code>python setup.py install</code>, the installer replaces <code>#!python</code> with whatever path is correct on the target machine.</p>
</div>
<span class="comment-copy">You could use just <code>#!/usr/bin/env python</code> if your code is Python2/3 compatible. But I think that's a very minimal amount of code that works that way. Most of it is heritage from before Python 3, including tutorials etc that still suggest to use <code>/usr/bin/env python</code>, without warning about the consequences.</span>
<span class="comment-copy">fwiw, the default installation of python on windows <b>doesn't</b> adhere to pep394 -- it just provides <code>python.exe</code> and <code>pythonw.exe</code></span>
<span class="comment-copy">@Evert of course after I wrote this, that dawned on me :) I think I just saw an example of that with some <code>import __future__</code> stuff, and that now makes sense. Very valid that if you've written compatible code you don't need to care.</span>
<span class="comment-copy">I sort of get this... but "my system" is also a agglomeration of all the software installed on it. So, say I want to code in <code>python3</code>, my OS (arch) assumes <code>python == python3</code>, and I install software from someone (<a href="https://github.com/gepd/Deviot/issues/64" rel="nofollow noreferrer">like this</a>) who wrote it for v2.7. Which is "the correct" version for my system?</span>
<span class="comment-copy">Also, if the developer has an instance of <code>print 'blah'</code> in his/her code, then they <i>have</i> specified the shebang (implicitly). Part of my question is indirectly asking why software currently written/updated isn't acknowledging this (which led me to wonder if maybe there's a deeper reason than "because history was written in <code>python2</code> and that's what we've always done").</span>
<span class="comment-copy">Not the user; the <i>installer</i> should set the hash-bang (whether the installer be a package manager, an administrator or an end-user doesn't matter).</span>
<span class="comment-copy">@Evert Thanks, that's a good clarification. I was using "user" as a (intentionally) vague stand-in for whoever runs the package manager.</span>
