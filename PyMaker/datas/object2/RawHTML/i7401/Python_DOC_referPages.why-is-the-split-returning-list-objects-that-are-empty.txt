<div class="post-text" itemprop="text">
<p>I have the following file names that exhibit this pattern:</p>
<pre><code>000014_L_20111007T084734-20111008T023142.txt
000014_U_20111007T084734-20111008T023142.txt
...
</code></pre>
<p>I want to extract the middle two time stamp parts after the second underscore <code>'_'</code> and before <code>'.txt'</code>. So I used the following Python regex string split:</p>
<pre><code>time_info = re.split('^[0-9]+_[LU]_|-|\.txt$', f)
</code></pre>
<p>But this gives me two extra empty strings in the returned list:</p>
<pre><code>time_info=['', '20111007T084734', '20111008T023142', '']
</code></pre>
<p>How do I get only the two time stamp information? i.e. I want:</p>
<pre><code>time_info=['20111007T084734', '20111008T023142']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't use <code>re.split()</code>, use the <code>groups()</code> method of regex <code>Match</code>/<code>SRE_Match</code> objects.</p>
<pre><code>&gt;&gt;&gt; f = '000014_L_20111007T084734-20111008T023142.txt'
&gt;&gt;&gt; time_info = re.search(r'[LU]_(\w+)-(\w+)\.', f).groups()
&gt;&gt;&gt; time_info
('20111007T084734', '20111008T023142')
</code></pre>
<p>You can even name the capturing groups and retrieve them in a dict, though you use <code>groupdict()</code> rather than <code>groups()</code> for that. (The regex pattern for such a case would be something like <code>r'[LU]_(?P&lt;groupA&gt;\w+)-(?P&lt;groupB&gt;\w+)\.'</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm no Python expert but maybe you could just remove the empty strings from your list?</p>
<pre><code>str_list = re.split('^[0-9]+_[LU]_|-|\.txt$', f)
time_info = filter(None, str_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the timestamps are always after the second <code>_</code> then you can use <code>str.split</code> and <code>str.strip</code>:</p>
<pre><code>&gt;&gt;&gt; strs = "000014_L_20111007T084734-20111008T023142.txt"
&gt;&gt;&gt; strs.strip(".txt").split("_",2)[-1].split("-")
['20111007T084734', '20111008T023142']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; f='000014_L_20111007T084734-20111008T023142.txt'
&gt;&gt;&gt; f[10:-4].split('-')
['0111007T084734', '20111008T023142']
</code></pre>
<p>or, somewhat more general: </p>
<pre><code>&gt;&gt;&gt; f[f.rfind('_')+1:-4].split('-')
['20111007T084734', '20111008T023142']
</code></pre>
</div>
<span class="comment-copy">This is a nice solution. Thanks.</span>
<span class="comment-copy">It's a shame <code>split</code> doesn't have a "no empty strings" option.</span>
<span class="comment-copy">@Elazar Not really, it's just a matter of how <code>re.split()</code> is implemented and what its intended purpose is. In cases like this, it makes more sense to build a pattern for the desired data than to build one to match everything that isn't desired. (Though <code>str.split()</code> actually does drop empty strings when the separator is unspecified or <code>None</code>.)</span>
<span class="comment-copy">The way <code>re.split()</code> is implemented should have nothing to do with its external behavior.</span>
<span class="comment-copy">Nowhere in <a href="http://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer">the Python documentation</a> does it say that <code>re.split()</code> must function exactly like <code>str.split()</code> in how it handles empty strings. The only explicit, non-example mention of empty strings in the result is that captured separators at the start or end will be accompanied by an empty string to ensure consistency for relative indexing.</span>
<span class="comment-copy">This works. Thanks. I wonder if there is any one-pass solution using <code>re.split()</code> function.</span>
<span class="comment-copy">@tonga there is, but it's less pretty: <code>time_info = [x for x in re.split('^[0-9]+_[LU]_|-|\.txt$', f) if x]</code></span>
<span class="comment-copy">Since filter() returns a filter object, you need to use list() afterwards: <code>time_info = list(filter(None, str_list))</code></span>
<span class="comment-copy">I love doing these things without REs. I don't know why.</span>
<span class="comment-copy">@Ashwini: Thanks. This works. But how can I do this with regex split?</span>
<span class="comment-copy">@Elazar I suspect because regular expressions can be quite cryptic if they're done wrongly or are too complex and have no comments. Sometimes a string manipulation done with an RE can be easier to understand when built up as a series of function calls. (In this case, though, a series of <code>split()</code>/<code>strip()</code>/element access operations is clunkier than using an RE would be.)</span>
