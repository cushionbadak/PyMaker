<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/19837486/python-lambda-in-a-loop">Python Lambda in a loop</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to generate several functions with different parameter i (see below) using a for loop, but it seems that all these functions are using the last item of i's. Could anyone tell me how to handle this?</p>
<p>This is a simplified example. I actually need to generate more than 200 functions with different parameters.</p>
<pre><code>funs = ()
for i in range(2):
    f = lambda x: x+i
    funs += (f,)
</code></pre>
<p>Then it turns out that the two functions do the same thing:</p>
<pre><code>funs[0](1)
</code></pre>
<p>Output: 2</p>
<pre><code>funs[1](1)
</code></pre>
<p>Output: 2</p>
<p>But I expect the first function to give a result of 1 rather than 2.</p>
<p>Thank you very much in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>you have to break the dynamic binding to <code>i</code>, for instance by wrapping 2 lambdas together:</p>
<pre><code>f = (lambda p : lambda x: x+p)(i)
</code></pre>
<p>that way, the value of <code>i</code> is captured, and functions hold a copy of <code>i</code></p>
<p>Aside: I wouldn't use <code>tuple</code> to create the list for performance reasons when appending to <code>funs</code> (<code>funs = ()</code> =&gt; <code>funs = []</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason you're getting the same result for all the functions is because <code>i</code> is not local to the lambdas, but is defined in the outer scope, and it is accessed when the lambda is called - not when it is defined. At the end of the loop, the value of <code>i</code> is 1 and thus, it uses 1 for every call to the lambda functions.</p>
<p>Jean-Francois Fabre gave one good solution but I personally prefer this:</p>
<pre><code>list_ = []
for i in range(2):
    f = lambda x, n=i: x+n
    list_.append(f)
</code></pre>
</div>
<span class="comment-copy">If you can generate the functions you can do it with one. Python functions are very dynamic.</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/faq/programming.html#why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result" rel="nofollow noreferrer">Why do lambdas defined in a loop with different values all return the same result?</a> from the Python FAQ.</span>
