<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/44817951/multiple-repeated-in-keyword">Multiple repeated `in` keyword [duplicate]</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<pre><code>&gt;&gt;&gt; item = 2
&gt;&gt;&gt; seq = [1,2,3]
&gt;&gt;&gt; print (item in seq)
True
&gt;&gt;&gt; print (item in seq is True)
False
</code></pre>
<p>Why does the second <code>print</code> statement output <code>False</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>in</code> and <code>is</code> are comparison operators in Python, the same in that respect as, say, <code>&lt;</code> and <code>==</code>.  In general,</p>
<pre><code>expr1 &lt;comparison1&gt; expr2 &lt;comparison2&gt; expr3
</code></pre>
<p>is treated as</p>
<pre><code>(expr1 &lt;comparison1&gt; expr2) and (expr2 &lt;comparison2&gt; expr3)
</code></pre>
<p>except that <code>expr2</code> is evaluated only once.  That's why, e.g.,</p>
<pre><code>0 &lt;= i &lt; n
</code></pre>
<p>works as expected.  However, it applies to <em>any</em> chained comparison operators.  In your example,</p>
<pre><code>item in seq is True
</code></pre>
<p>is treated as</p>
<pre><code>(item in seq) and (seq is True)
</code></pre>
<p>The <code>seq is True</code> part is False, so the whole expression is False.  To get what you probably intended, use parentheses to change the grouping:</p>
<pre><code>print((item in seq) is True)
</code></pre>
<p><a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="noreferrer">Click here for the docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your statement <code>item in seq is True</code> is internally evaluated as <code>(item in seq) and (seq is True)</code> as shown below</p>
<pre><code>&gt;&gt;&gt;print ((item in seq) and (seq is True))
False
</code></pre>
<p>(seq is True) is False and therefore your statement outputs False.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer below is not correct. The comment explains it an i verified: </p>
<pre><code>In [17]: item in (seq is True)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-17-4e7d6b2332d7&gt; in &lt;module&gt;()
----&gt; 1 item in (seq is True)
</code></pre>
<p>TypeError: argument of type 'bool' is not iterable</p>
<hr/>
<p>Previous answer
I believe it is evaluating <code>seq is True</code> (which evaluates to the bool <code>False</code>), then evaluating <code>item in False</code> (which evaluates to <code>False</code>). </p>
<p>Presumably you mean <code>print (item in seq) is True</code> (which evaluates to <code>True</code>)? </p>
</div>
<span class="comment-copy">It might be because of how python evaluates an expression. You might want to use <code>print ((item in seq) is True)</code></span>
<span class="comment-copy">Isn't that explained sufficiently in @Tim Peters answer?</span>
<span class="comment-copy">@t.m.adam - We both answered more or less at the same time. If his answer explains this in more detailed way, let me delete this answer.</span>
<span class="comment-copy">@Beginner NO. Can't a question have two correct answers?</span>
<span class="comment-copy">@Beginner I don't see any harm in leaving your answer. Although you shouldn't lose the rep you gained for this question, if you delete.</span>
<span class="comment-copy">Please don't take my comment the wrong way. I just wanted to encourage you to improve your answer.</span>
<span class="comment-copy"><code>item in False</code> raises a <code>TypeError</code>, as the right-hand value must be an iterable, which <code>False</code> is not.</span>
<span class="comment-copy">changed answer. thanks</span>
