<div class="post-text" itemprop="text">
<p>this is the data in my pandas dataframe. i want to convert the <strong>dateTime</strong> column into a <em>datetime64</em> so i can check if duplicate <strong>fileName</strong> exist then find the file with the latest <strong>dateTime</strong></p>
<p>as you can see the datetime format here is <strong>YYYYMMDDHHMMSS</strong> without delimiters</p>
<pre><code>                      filePath        dateTime fileName
0  Line20170601142525_line1.dat  20170601142525    line1
1  Line20170601142525_line2.dat  20170601142525    line2
2  Line20170601142526_line2.dat  20170601142526    line2
3  Line20170601142526_line3.dat  20170601142526    line3

Process finished with exit code 0
</code></pre>
<p>This is my code</p>
<pre><code>formattedFileDirectory['dateTime'] = pandas.to_datetime(formattedFileDirectory['dateTime'], format='%Y%M%d%H%m%S')
</code></pre>
<p>i get this error</p>
<pre><code>TypeError: 'int' object is unsliceable
</code></pre>
<p>if i set the column as string i get this error</p>
<pre><code>ValueError: unconverted data remains: 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe that you need to convert the dateTime column from <code>int</code> type to <code>string</code> type before you call <code>pd.to_datetime</code> on it.</p>
<p>If you get a ValueError about "unconverted data", it will usually tell you that either the string or the format you specified is bad. Try changing <code>'%Y%M%d%H%m%S'</code> into <code>'%Y%m%d%H%M%S'</code>. You can find the documentation on format strings <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">here</a> (scroll all the way to the bottom).</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe this is what you're looking for using <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html" rel="nofollow noreferrer">pandas.DataFrame.apply</a>:</p>
<pre><code>df['dateTime'] = df['dateTime'].apply(lambda x: pd.to_datetime(str(x), format='%Y%m%d%H%M%S'))
</code></pre>
<p>If you don't like using <code>apply</code> because it's slow (cuz it's a loop) you could still use this:</p>
<pre><code>df['dateTime'] = pd.to_datetime(df['dateTime'].astype(str),format='%Y%m%d%H%M%S')
</code></pre>
<p>output:</p>
<pre><code>                       filePath            dateTime fileName
0  Line20170601142525_line1.dat 2017-06-01 14:25:25    line1
1  Line20170601142525_line2.dat 2017-06-01 14:25:25    line2
2  Line20170601142526_line2.dat 2017-06-01 14:25:26    line2
3  Line20170601142526_line3.dat 2017-06-01 14:25:26    line3
</code></pre>
</div>
<span class="comment-copy">I would not suggest using <code>.apply()</code> on pd.to_datetime, as the function itself is well-equipped to handle a column of data. The <code>apply</code> method really is a for loop under the hood.</span>
<span class="comment-copy">you're right, i updated @CaptainMeow, +1 for the idea</span>
