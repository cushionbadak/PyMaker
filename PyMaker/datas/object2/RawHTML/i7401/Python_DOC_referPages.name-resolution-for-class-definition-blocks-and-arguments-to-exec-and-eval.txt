<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/reference/executionmodel.html#resolution-of-names" rel="nofollow noreferrer">https://docs.python.org/3/reference/executionmodel.html#resolution-of-names</a></p>
<blockquote>
<p>A class deﬁnition is an executable statement that may use and deﬁne
  names. These references follow <strong>the normal rules</strong> for name
  resolution with an exception that <strong>unbound local variables are
  looked up in the global namespace.</strong></p>
</blockquote>
<p>What does "unbound local variables are looked up in the global namespace" mean here?  Can a class definition be inside another class definition or a function definition, so that the lookup of an unbound local variable is not in the global namespace but in a local nesting scope?</p>
<p>What are "the normal rules"?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take this example:</p>
<pre><code>x = 1
def foo():
    x = 2
    class Bar:
        print(x)
        x = 3
foo()
# Output: 1
</code></pre>
<p>When <code>print()</code> is called, <code>x</code> is local (because it's assigned in the next line), but still unbound because it's used before it's assigned a value.</p>
<p>You might expect that the unbound <code>x</code> is looked up in the closest namespace (which would be <code>2</code>), but in class blocks, <em>"unbound local variables are looked up in the global namespace"</em>, so the global <code>x</code> is looked up and <code>1</code> is printed.</p>
<hr/>
<p>Let's remove the assignment inside <code>Bar</code>:</p>
<pre><code>x = 1
def foo():
    x = 2
    class Bar:
        print(x)
foo()
# Output: 2
</code></pre>
<p>Now we're following the <em>"normal rules of name resolution"</em> and get the output <code>2</code>, because the <code>x</code> inside <code>Bar</code> is not local anymore (it's a <em>free</em> variable) and looked up in the nearest enclosing scope.</p>
<hr/>
<p>Also, the rule to look up unbound locals in the local namespace is for classes, but not for functions. Let's try it with a function:</p>
<pre><code>x = 1
def foo():
    x = 2
    def bar():
        print(x)
        x = 3
    bar()
foo()
# Raises: UnboundLocalError: local variable 'x' referenced before assignment
</code></pre>
<p>As you can see, in a function you can't use a local before assigning a value to it.</p>
</div>
<span class="comment-copy">Your link provides an example; in class <code>A</code>, the assignment to <code>b</code> fails because the list comprehension uses <code>a</code> which is defined as a class attribute, but not in the global scope.</span>
<span class="comment-copy">The example doesn't answer my questions, but explains something else: "The scope of names deﬁned in a class block is limited to the class block; it does not extend to the code blocks of methods – this includes comprehensions and generator expressions since they are implemented using a function scope."</span>
<span class="comment-copy"><code>a</code> is an unbound local variable inside the generator expression (not list comprehension, sorry, my mistake), but the <code>class</code> statement doesn't create a scope. Thus, the enclosing scope for the generator is not the class, but the global scope, so the assignment to <code>A.a</code> is not seen by the generator expression.</span>
