<div class="post-text" itemprop="text">
<p>I want to create python script which can modify code in that script itself using <a href="https://docs.python.org/3/library/language.html" rel="nofollow noreferrer">Python Language Services</a> or using any other way.<br/>
e.g. A script which keep track of its count of successfull execution  </p>
<pre><code>import re
COUNT = 0

def updateCount():
    # code to update second line e.g. COUNT = 0
    pass

if __name__ == '__main__':
    print('This script has run {} times'.format(COUNT))
    updateCount()
</code></pre>
<p>On successful execution of this script code should get changed to    </p>
<pre><code>import re
COUNT = 1

def updateCount():
    # code to update second line e.g. COUNT = 0
    pass

if __name__ == '__main__':
    print('This script has run {} times'.format(COUNT))
    updateCount()
</code></pre>
<p>Simple approach came to my mind was to open <code>__file__</code> in write mode and do requried modification using reguler expessions etc. But that did not work I got exception <code>io.UnsupportedOperation: not readable</code>. Even if this approach would be working then it would be very risky because it can spoil my whole script. so I am looking for solution using Python Language Services. </p>
</div>
<div class="post-text" itemprop="text">
<p>A python script is nothing more than a text file. So, you are able to open it as an external file and read &amp; write on that. (Using <code>__file__</code> variable you can get the exact name of your script):</p>
<pre><code>def updateCount():
    fin = open(__file__, 'r')
    code = fin.read()
    fin.close()

    second_line = code.split('\n')[1]
    second_line_parts = second_line.split(' ')
    second_line_parts[2] = str(int(second_line_parts[2])+1)

    second_line = ' '.join(second_line_parts)
    lines = code.split('\n')
    lines[1] = second_line
    code = '\n'.join(lines)

    fout = open(__file__, 'w')
    fout.write(code)
    fout.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can use the language services to achieve self-modification, as in following example:</p>
<pre><code>&gt;&gt;&gt; def foo(): print("original foo")
&gt;&gt;&gt; foo()
original foo
&gt;&gt;&gt; rewrite_txt="def foo(): print('I am new foo')"
&gt;&gt;&gt; newcode=compile(rewrite_text,"",'exec')
&gt;&gt;&gt; eval(newcode)
&gt;&gt;&gt; foo()
I am new foo
</code></pre>
<p>So, by new dynamically generated code you can replace stuff contained in the original source file, without modifying the file itself.</p>
</div>
<span class="comment-copy">You can open and edit <code>__file__</code>.</span>
<span class="comment-copy">Note that you may hit the problem with permissions (what if the script is run by a user who doesn't have write access to it).</span>
<span class="comment-copy">that does not work <code>io.UnsupportedOperation: not readable</code></span>
<span class="comment-copy">May be you are looking for the <code>eval</code> function. You can construct Python source as text and run it in context of your own module or in other context. Editing your own .py file is possible,as a funny experiment :)</span>
<span class="comment-copy">Write in other file the control value.</span>
<span class="comment-copy">I tried this before posting my quiestion. This does not work and gives  <code>io.UnsupportedOperation: not readable</code></span>
<span class="comment-copy">This loads the entire file into memory because of <code>fout.read()</code> which is unnecessary... also, would be wiser to use <code>with</code> to open and close the file properly.... other than that, nice answer!</span>
<span class="comment-copy">@AlokSinghMahor if you tried it and it didn't work, why did you not write that in your question?</span>
<span class="comment-copy">@OferSadan: I mentioned that I want sotution using Python Language Services.</span>
<span class="comment-copy">@AlokSinghMahor the fact is that multiple people are giving you solutions that you already tried and failed... and you've had to repeat explaining that to them, so obviously something is missing in your question</span>
<span class="comment-copy">Good answer:   using compile() + eval(), you can achieved infinitely self-modifying code.   Ie, you passed a simple program to your friend, but through this mechanism of self-modification, it is possible to morph itself into a virus/malicious program.</span>
