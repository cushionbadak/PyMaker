<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/29558007/how-can-i-generate-a-list-of-consecutive-numbers">How can I generate a list of consecutive numbers?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>So I've been trying to figure how out how to print an ordered list of numbers that occur before a number, starting from one in python. Let me show you what I mean.</p>
<p>Here is my example.</p>
<pre><code>x = 20
#I want to print this
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
#Another example
y = 5
1, 2, 3, 4, 5
</code></pre>
<p>Is there any piece of code or built-in function in python that will allow me to do this?  </p>
</div>
<div class="post-text" itemprop="text">
<p>If you simply want to print the numbers, you can unpack your <code>range()</code> object and use the <code>sep</code> keyword argument to add the commas:</p>
<pre><code>&gt;&gt;&gt; x = 20
&gt;&gt;&gt; print(*range(1, x + 1), sep=', ')
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
&gt;&gt;&gt;
</code></pre>
<p>For Python 2.x:</p>
<pre><code>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; 
&gt;&gt;&gt; x = 20
&gt;&gt;&gt; print(*range(1, x + 1), sep=', ')
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
&gt;&gt;&gt; 
</code></pre>
<p>This answer was inspired by <a href="https://stackoverflow.com/questions/45124373/python-how-to-make-an-integer-represent-an-ordered-list-of-the-numbers-before-i/45124419#comment77219466_45124419">@Grimmy's comment</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for the <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range</code></a> class. Normally a range initializes from a start value to the number before the stop value, so you need to add one to the end:</p>
<pre><code>x = 20
print(list(range(1, x + 1)))
</code></pre>
<p>Using a <code>range</code> object has the advantage of storing all the information about the elements in a way that only requires the integers worth of storage. You can iterate over it and test for containment without spelling out all the list elements.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple for loop</p>
<pre><code>x = 20
for num in range(x):
    print(num, ", ", end=' ')
</code></pre>
<p>Though you'd have to do a fence-post trick with the comma, so Mad Physicist's response is good.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>x=20                    #The number you want
y=0                     #Counter vaiable
while True:             #Infinate loop
  print (y)             #Prints y
  y+=1                  #Adding 1 to y
  if y == x:          
    print (x)           #If y is the same as x,then print the last number
    break               #Stops the program
</code></pre>
<p>Does the same stuff but might be easier to understand.</p>
</div>
<span class="comment-copy">You are looking for <code>range</code></span>
<span class="comment-copy">Exactly what @MadPhysicist wrote. Here is something to read about the <code>range</code> function: <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#func-range</a></span>
<span class="comment-copy">Could be nice to explain what <code>*</code> does.</span>
<span class="comment-copy">@Grimmy <i>"[...] you can unpack your range() object [...]"</i> - or do you think perhaps it needs more explanation?</span>
<span class="comment-copy">This answer is best answer</span>
<span class="comment-copy">Since the OP specifically wants to print <code>1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20</code>, maybe recommend <code>print(', '.join(range(1, x + 1)))</code>?</span>
<span class="comment-copy">@SethMMorton you can't join integers, <code>print(', '.join(map(str,list(range(1, x + 1)))))</code></span>
<span class="comment-copy">@NickA True.  You don't need to call <code>list</code> on <code>range</code> either. <code>print(', '.join(map(str, range(1, x + 1))))</code> will suffice.</span>
<span class="comment-copy">@ChristianDean What's wrong with the <code>map</code> correction from @NickA?</span>
<span class="comment-copy">@Grimmy <code>print(*range(1, x + 1), sep=', ')</code> boom. Just use the <code>sep</code> keyword argument.</span>
<span class="comment-copy">It should be <code>range(1, x + 1)</code>. Also, <code>print(num, end=", ")</code> would work better. However, you are going to end up with a trailing <code>,</code>, which seems a bit odd.</span>
<span class="comment-copy">Easy to read and understand for newbies as well.</span>
