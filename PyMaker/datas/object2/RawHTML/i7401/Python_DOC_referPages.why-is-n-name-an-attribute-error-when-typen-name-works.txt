<div class="post-text" itemprop="text">
<pre><code>n = 20
print n.__name__
</code></pre>
<p>I am getting an error as <code>n</code> has no attribute <code>__name__</code>:</p>
<pre><code>AttributeError: 'int' object has no attribute '__name__'
</code></pre>
<p>But <code>n</code> is an instance of the <code>int</code> class, and <code>int.__name__</code> gives a result, so why does <code>n.__name__</code> throw an error. I expected that because <code>n</code> is an instance of class <code>int</code>, it should have access to all attributes of that class. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>__name__</code> is not an attribute on the <code>int</code> class (or any of its base classes):</p>
<pre><code>&gt;&gt;&gt; int.__dict__['__name__']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: '__name__'
&gt;&gt;&gt; int.__mro__
(&lt;class 'int'&gt;, &lt;class 'object'&gt;)
&gt;&gt;&gt; object.__dict__['__name__']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: '__name__'
</code></pre>
<p>It is an attribute on the <strong>metaclass</strong>, <code>type</code> (it is a <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor</a>, so is bound to the <code>int</code> class when accessed on <code>int</code>):</p>
<pre><code>&gt;&gt;&gt; type(int)
&lt;type 'type'&gt;
&gt;&gt;&gt; type.__dict__['__name__']
&lt;attribute '__name__' of 'type' objects&gt;
&gt;&gt;&gt; type.__dict__['__name__'].__get__(int)
'int'
</code></pre>
<p>Just like attribute look-up on an instance can also look at the class, attribute lookup on a class looks for attributes on the metaclass.</p>
<p>Attributes on the metaclass are not available on instances of the class.</p>
</div>
<span class="comment-copy">"Because n is an instance of class int and it should have access to all attributes of int class" - that's not how it works. Python searches the class dicts of all classes in <code>n</code>'s Method Resolution Order for a <code>__name__</code>, but <code>int.__name__</code> doesn't come from an entry in <code>int.__dict__</code>.</span>
