<div class="post-text" itemprop="text">
<p>Consider the following function, whose output is supposed to be the cartesian product of a sequence of iterables:</p>
<pre><code>def cart(*iterables):
    out = ((e,) for e in iterables[0])
    for iterable in iterables[1:]:
        out = (e1 + (e2,) for e1 in out for e2 in iterable)
    return out
</code></pre>
<p>Works fine when generator comprehensions are replaced with list comprehensions. Also works when there are only 2 iterables. But when I try</p>
<pre><code>print(list(cart([1, 2, 3], 'ab', [4, 5])))
</code></pre>
<p>I get </p>
<pre><code>[(1, 4, 4), (1, 4, 5), (1, 5, 4), (1, 5, 5),
 (2, 4, 4), (2, 4, 5), (2, 5, 4), (2, 5, 5),
 (3, 4, 4), (3, 4, 5), (3, 5, 4), (3, 5, 5)]
</code></pre>
<p>Why this and not the cartesian product?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are creating <em>generator expressions</em>, that are not iterated over until the next iteration of the <code>for iterable in iterables[1:]:</code> loop. They are using <em>closures</em>, which are looked up at runtime.</p>
<p>Generator expressions are essentially small functions in this regard, they create their own scope, and any names from the parent scope need to be treated as closures for this to work. The 'function' is executed when you iterate, and only then the closure is needed and resolved to the <em>current</em> value of the variable referenced.</p>
<p>So you create one generator expression like this:</p>
<pre><code>(e1 + (e2,) for e1 in out for e2 in iterable)
</code></pre>
<p>where <code>iterable</code> is a closure taken from the parent scope (your function locals). But the lookup is not done until the next iteration when you loop, <em>at which point <code>iterable</code> is the next element in the sequence</em>.</p>
<p>So for your input of <code>[1, 2, 3], 'ab', [4, 5]</code>, you create a generator expression when <code>iterable = 'ab'</code> but by the time you actually iterate, the <code>for</code> loop has assigned a new value and is now <code>iterable = [4, 5]</code>. When you finally iterate over the final (chained) generator, only the very last assignment to <code>iterable</code> counts.</p>
<p>You are effectively creating a product over <code>iterables[0], iterables[-1] * len(iterables) - 1</code>; <code>iterables[1]</code> through to <code>iterables[-2]</code> are skipped over entirely, all replaced by <code>iterables[-1]</code>.</p>
<p>You could use a generator <em>function</em> to avoid the closure issue, passing in <code>iterable</code> to be bound to a local:</p>
<pre><code>def gen_step(out, iterable):
    for e1 in out:
        for e2 in iterable:
            yield e1 + (e2,)

def cart(*iterables):
    out = ((e,) for e in iterables[0])
    for iterable in iterables[1:]:
        out = gen_step(out, iterable)
    return out
</code></pre>
<p>You could do the same with a lambda returning the generator expression:</p>
<pre><code>def cart(*iterables):
    out = ((e,) for e in iterables[0])
    for iterable in iterables[1:]:
        out = (lambda it=iterable: (e1 + (e2,) for e1 in out for e2 in it))()
    return out
</code></pre>
</div>
<span class="comment-copy">You could store intermediate results in memory (like the list approach that works) and not defer their evaluation with that gen. exp. whose values are repeatedly changing across iterations.</span>
<span class="comment-copy">I know that this question is about implementing the algorithm for Cartesian product in Python, but just in case someone ends up here searching how to do a Cartesian product in Python, note that this is already implemented in <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>.</span>
<span class="comment-copy">The alternatives are still lazy. Nice.</span>
