<div class="post-text" itemprop="text">
<p>Assume I have the following code:</p>
<pre><code>with open('somefile.txt') as my_file:
    # some processing
    my_file.close()
</code></pre>
<p>Is <code>my_file.close()</code> above redundant?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes it is; Beside, it is not guarranty that your <code>close()</code> will always be executed. (for instance if an <code>Exception</code> occurs).</p>
<pre><code>with open('somefile.txt') as my_file:
    1/0 # raise Exception
    my_file.close() # Your close() call is never going to be called
</code></pre>
<p>But the <code>__exit__()</code> function of the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer"><code>with</code></a> statement is <strong>always</strong> executed because it follows the <code>try...except...finally</code> pattern.</p>
<blockquote>
<p>The with statement is used to wrap the execution of a block with
  methods defined by a context manager (see section With Statement
  Context Managers). This allows common try...except...finally usage
  patterns to be encapsulated for convenient reuse.</p>
<p>The context manager’s __exit__() method is invoked. If an exception
  caused the suite to be exited, its type, value, and traceback are
  passed as arguments to __exit__()</p>
</blockquote>
<p>You can check that the file have been close right after the <code>with</code> statement using <code>closed</code></p>
<pre><code>&gt;&gt;&gt; with open('somefile.txt') as f:
...     pass
&gt;&gt;&gt; f.closed
# True
</code></pre>
<p>Source for my answer:</p>
<ul>
<li><a href="http://effbot.org/zone/python-with-statement.htm" rel="nofollow noreferrer">Understanding Python's "with" statement</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Yes. Exiting the <code>with</code> block will close the file.</p>
<p>However, that is not necessarily true for objects that are not files. Normally, exiting the context should trigger an operation conceptually equivalent to "close", but in fact <code>__exit__</code> can be overloaded to execute any code the object wishes.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>with</code> statement creates a runtime context.Python creates the stream object of the <code>file</code> and tells it that it is entering a runtime context. When the with code block is completed, Python tells the stream object that it is exiting the runtime context,and the stream object calls its own close() method.</p>
</div>
<div class="post-text" itemprop="text">
<p>yes, the with statement takes care of that</p>
<p>as you can see in the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>The context manager’s <code>__exit__()</code> method is invoked. If an exception caused the suite to be exited, its type, value, and traceback are passed as arguments to <code>__exit__()</code>.</p>
</blockquote>
<p>In the case of files, the <code>__exit__()</code> method will close the file</p>
</div>
<span class="comment-copy">generally using with unmanaged resources. (Socket, SQL connection etc.) And also "with" close automatically.</span>
