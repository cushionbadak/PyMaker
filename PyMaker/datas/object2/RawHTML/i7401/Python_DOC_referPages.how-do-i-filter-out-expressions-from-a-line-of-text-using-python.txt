<div class="post-text" itemprop="text">
<p>I want to remove words that do not belong to a pre-defined list. For example, if my list is:</p>
<pre><code>ANIMAL
BIRD
CARNIVORE
HERBIVORE
MAMMAL
OMNIVORE
</code></pre>
<p>My input is like this:</p>
<pre><code>(ANIMAL (CARNIVORE (BIRD Peacock)) (HERBIVORE (MAMMAL Goat)))
</code></pre>
<p>I want my output to be:</p>
<pre><code>(ANIMAL (CARNIVORE (BIRD )) (HERBIVORE (MAMMAL )))
</code></pre>
<p>I tried this:</p>
<pre><code>current_split = re.split("\W", test)
    for thing in current_split:
        if thing in parse_symbols:
            print thing
</code></pre>
<p>But this removes the parentheses, and I get this:</p>
<pre><code>ANIMAL
CARNIVORE
BIRD
HERBIVORE
MAMMAL
</code></pre>
<p>Also, because of the <code>for</code> loop, newlines are getting introduced, which I don't want.</p>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the foolproof solution: Use <code>re.sub</code> with a function. First get a <code>set</code> of the allowed words:</p>
<pre><code>allowed = set("""
    ANIMAL
    BIRD
    CARNIVORE
    HERBIVORE
    MAMMAL
    OMNIVORE
""".split())
</code></pre>
<p>or use </p>
<pre><code>allowed = {'ANIMAL', 'BIRD', #... and so forth
</code></pre>
<p>Then <code>re.sub</code> with a regex for each word <code>\w+</code>, then check if they're in the <code>ok</code> - if yes, then return that word, otherwise return an empty string:</p>
<pre><code>def replacement(match):
    word = match.group(0)
    if word in allowed:
        return word
    return ''

result = re.sub(r'[\w-]+', replacement, user_input)
print(result)
</code></pre>
<p>prints </p>
<pre><code>(ANIMAL (CARNIVORE (BIRD )) (HERBIVORE (MAMMAL )))
</code></pre>
<p>This will consider only entire words and entire words only, unlike the various <code>.replace</code> solutions provided here. It will only retain a word if the entire word is in the set of allowed words. It will never remove a part of a full word. It will work with whatever the separators and operators would be.</p>
<p>If you want to remove any excess space before the right parenthesis, use another substitution:</p>
<pre><code>re.sub(r'\s+\)', '', result)
</code></pre>
<p>which for the above result will produce</p>
<pre><code>(ANIMAL (CARNIVORE (BIRD) (HERBIVORE (MAMMAL))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The solution using <a href="https://docs.python.org/3/library/re.html#re.finditer" rel="nofollow noreferrer"><strong><em>re.finditer()</em></strong></a> function:</p>
<pre><code>import re

animals = ['ANIMAL', 'BIRD', 'CARNIVORE', 'HERBIVORE', 'MAMMAL', 'OMNIVORE']
user_input = '(ANIMAL (CARNIVORE (BIRD Peacock)) (HERBIVORE (MAMMAL Goat)))'

for m in re.finditer(r'[\w-]+', user_input):
    if m.group() not in animals:
        user_input = user_input.replace(m.group(), '')

print(user_input)
</code></pre>
<p>The output:</p>
<pre><code>(ANIMAL (CARNIVORE (BIRD )) (HERBIVORE (MAMMAL )))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use re sub:</p>
<pre><code>bird = re.compiler'(BIRD) (\w*?)\)'
mammal = re.compile(r'(MAMMAL) (\w*?)\)')

nobirds  = re.sub(bird, r'\1', input) #keeps only the first group
nomammals = re.sub(mammal, r'\1', input)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are only going to process strings similar to the one you provided with parentheses, You can just <code>split</code> the line into words, <code>strip</code> them of parentheses, and then check if they are allowed or not:</p>
<pre><code>allowed = ['ANIMAL', 'BIRD', 'CARNIVORE', 'HERBIVORE', 'MAMMAL', 'OMNIVORE']
line = '(ANIMAL (CARNIVORE (BIRD Peacock)) (HERBIVORE (MAMMAL Goat)))'
words = [word.strip('()') for word in line.split()]
not_allowed = [word for word in words if word not in allowed]
</code></pre>
<p>Now that we found all the words we want to remove, we just remove them, like this:</p>
<pre><code>newline = line
for word in not_allowed:
    newline = newline.replace(word, '')
</code></pre>
<p>The only thing wrong with <code>newline</code> now is those annoying spaces before the parentheses where we removed words, but that's easy:</p>
<pre><code>newline = newline.replace(' )', ')')
</code></pre>
<p>Your newline now should output <code>'(ANIMAL (CARNIVORE (BIRD)) (HERBIVORE (MAMMAL)))'</code></p>
<p>Also, as you can see I did not print each and every word during this session, which is why I get one single line <code>newline</code> that I can now print instead of multiple new lines on each <code>print</code> command</p>
</div>
<span class="comment-copy">Is your input always going to have parentheses you want to keep? So the only things that need removing are extra alphabetic strings?</span>
<span class="comment-copy">You want to add a "," after print and add a newline one level above</span>
<span class="comment-copy">@mattjegan Yes.</span>
<span class="comment-copy">should not you use <code>allowed</code> instead of <code>ok</code> in your <code>replacement</code> function?</span>
<span class="comment-copy">@RomanPerekhrest true thanks. That's the problem with coding in fragments and then rewriting variable names</span>
<span class="comment-copy">@AnttiHaapala This works, but for a case like (ANIMAL (CARNIVORE (BIRD jay-bird))) the hyphen is being retained. How do I get rid of it?</span>
<span class="comment-copy">@user110327 by using a character class that includes any word character <i>or</i> the <code>-</code>. i.e. <code>[\w-]+</code></span>
<span class="comment-copy">@user110327 I've fixed the code above to handle the case</span>
<span class="comment-copy">No, you could remove a <i>prefix</i> of any word.</span>
<span class="comment-copy">@AnttiHaapala, what do you mean with <i>prefix</i>? unclear what you are writing</span>
<span class="comment-copy">your code finds every word not in the <code>user_input</code> and replaces with <code>''</code> everywhere, even if they were a part of another word.</span>
<span class="comment-copy">@AnttiHaapala, see my update</span>
