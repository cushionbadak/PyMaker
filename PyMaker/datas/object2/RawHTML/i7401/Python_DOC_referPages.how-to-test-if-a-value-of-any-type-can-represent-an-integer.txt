<div class="post-text" itemprop="text">
<blockquote>
<p>Write a function integer_type that consumes a value of any type and produces "Even integer" if it is an even integer, "Odd integer" if it is an odd integer, and "Not an integer" otherwise.</p>
</blockquote>
<p>My code:</p>
<pre><code>def integer_type(som):
    if type(som)==type(0):
        if som%2==0:
        return "Even integer"
        else:
        return "Odd integer"
    else:
        return "Not an integer"
x= input()
print(integer_type(x))
</code></pre>
<p>Everytime I run it, it prints "Not an integer" whatever the value I enter.</p>
<p>I tried a different problem with elifs instead and it made no difference. I still obtain the very last "else" return for my print.</p>
<blockquote>
<p>Write a function off_peak that consumes any type of data and determines if the time is eligible for off peak rates. Your function should produce one of the following outputs: "Off peak", "Peak", and "Not a time". Off-peak rates are based on 24-hour time, for values less than 9 or greater than 17.</p>
</blockquote>
<pre><code>def off_peak(any):
    if type(any)==type(0) and any&lt;9 and any&gt;17:
        return "Off peak"
    elif type(any)==type(0) and 9&lt;any&lt;17 and 0&lt;any&lt;23:
        return "Peak"
    else:
        return "Not a time"

x= input("Peak Dector:")
print(off_peak(x))
</code></pre>
<p>any help would be greatly appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p>Your function is correct and does exactly what you want it to do, the problem here is that <code>input()</code> always returns a string, so when you pass its output to <code>integer_type()</code> it sees that it's a string and returns <code>Not an integer</code>.
To see this, try using this code:</p>
<pre><code>def integer_type(som):
if type(som)==type(0):
    if som%2==0:
        return "Even integer"
    else:
        return "Odd integer"
else:
    return "Not an integer"
x= 'integer?'
y = 5
z = 4
print(integer_type(x))
print(integer_type(y))
print(integer_type(z))
</code></pre>
<p>It will print exactly what you want:</p>
<pre><code>Not an integer
Odd integer
Even integer
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you should convert the input to an int before comparing:</p>
<p><code>print(integer_type(int(x)))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I'll suppose that you're using Python 3. </p>
<p><code>input</code> always returns a string. What you first want to test is if this string can represent a valid integer.</p>
<p>You can simply try to convert it, and you will know that it is invalid if an errors occurs (a <code>ValueError</code>, in this case).</p>
<p>If we want the function to accept any type of input, including floats and strings like "3.00", or any object, things get a bit more complicated. You could rewrite your function like this:</p>
<pre><code>def integer_type(value):
    # int("3.00") would raise a ValueError, though 3 is an odd integer.
    # We start by converting our input value to a float. 
    # float(value) will accept integers, floats or strings,
    # it will raise a TypeError for None or other invalid types.
    try:
        value = float(value)
    except (ValueError, TypeError):
        # If it isn't a float, it's definitely not an integer
        return "Not an integer"

    # Now we check that our float is an integer:
    if not value.is_integer():
        return "Not an integer"

    if value % 2 == 0:
        return "Even integer"
    else:
        return "Odd integer"
</code></pre>
<p>The input of the function can be a string, an integer, a float, or whatever. Whether it can be converted to a valid integer or not, it will always give the expected result:</p>
<pre><code>print(integer_type(3))
print(integer_type("3"))
# Odd integer
# Odd integer
print(integer_type(3.1))
print(integer_type("3.1"))
# Not an integer
# Not an integer
print(integer_type(3.00))
print(integer_type("3.00"))
# Odd integer
# Odd integer
print(integer_type(-4.00))
print(integer_type("-4.00"))
# Even integer
# Even integer
print(integer_type("abc"))
# Not an integer
print(integer_type(None))
# Not an integer
</code></pre>
<p>If you're using Python 2, replace <code>input</code> by <code>raw_input</code>.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#input</a></span>
<span class="comment-copy">try printing the type after you take input, it should clear everything up.</span>
<span class="comment-copy">And don't use type, use <code>isinstance</code> instead. Like in <code>isinstance(something, int)</code> or even better <code>isinstance(something, numbers.Integral)</code></span>
<span class="comment-copy">What makes you think x is an integer? Have you tried printing x or properties of x to see what you're working with?</span>
<span class="comment-copy">if convert the input to an int. then there is not need to check if <code>type(any)==type(0)</code> in the function <code>integer_type</code></span>
<span class="comment-copy">This won't do what the OP wants: if you enter something else than an integer, it will raise an exception and the <code>integer_type</code> function will never be called.</span>
<span class="comment-copy">Thank you I now grasp why these functions aren't working, your solution is a little bit beyond my understanding right now but i'll try to learn those skills. If floats accepts integers, floats and integers why does making the input a float, x=(float(input()) not work?</span>
<span class="comment-copy">Well, sorry for the complication ;-) I started much more simple, added a few test cases and saw that they didn't pass, that's the simplest complete solution I could find... <code>x=(float(input())</code> will raise an error if you input a string like "abc", as it can't be a valid <code>float</code>, and your function wouldn't get called. We must try the conversion <i>in the function</i> to treat the error as we want.</span>
