<div class="post-text" itemprop="text">
<p>I have this simple program </p>
<pre><code>quote = input("Enter your name : ")
start=0
space_index=quote.find(" ")
while space_index != -1:
   print(quote[start:space_index]) 
</code></pre>
<p>I want that whatever word comes out should starts with <strong>a to g</strong>.
I tried the with importing string class and using his ascii_lowercase() function but I still I am not able to figure out how to check if the word starts with the range <strong>a to g</strong> or not.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <a href="https://docs.python.org/3/library/stdtypes.html#str.startswith" rel="nofollow noreferrer"><code>startswith()</code></a> like so:</p>
<pre><code>quote = input("Enter your name : ")
allowed = 'abcdefg'
if any(quote.startswith(x) for x in allowed):
   print('Success!') 
</code></pre>
<p>Alternatively and to make it more flexible you can use this:</p>
<pre><code>import string
start = 'a'
end = 'g'
letters = string.ascii_lowercase
allowed = letters[letters.index(start):letters.index(end)+1]  # abcdefg
quote = input("Enter your name : ")

while not any(quote.startswith(x) for x in allowed):
    quote = input("The name is not valid! Please enter another name: ")
print('Success!')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>re.match:</p>
<pre><code>re.match(r'[A-G, a-g]', yourstringhere)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the <code>re</code> module that is simple:</p>
<pre><code>import re
quote = input("Enter your name : ")
matches = [s for s in quote.split() if re.match('^[a-g,A-G]', s)]
</code></pre>
<p>Did you notice this part <code>[a-g,A-G]</code>?
You can change it to whatever range you want, like <code>[a-z]</code> for only lowercase, <code>[a-z,A-Z]</code> for all ascii letters, <code>[0-9]</code> for numbers etc...</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to test a specific range of letters, you can use the <code>ord()</code> function to get the ascii value of the start and end letters of the range, and use <code>chr()</code> to get the textual value of the character's ascii vaule:</p>
<pre><code>&gt;&gt;&gt; def starts_in_range(string, char_range):
...     start, end = char_range.split('-')
...     ord_char_range = range(ord(start), ord(end) + 1)
...     return ord(string[0]) in ord_char_range

&gt;&gt;&gt; starts_in_range('globe', 'a-g')
True
&gt;&gt;&gt; starts_in_range('butter', 'a-g')
True
&gt;&gt;&gt; starts_in_range('nuts', 'a-g')
False
&gt;&gt;&gt; starts_in_range('kimmy', 'a-g')
False
&gt;&gt;&gt; starts_in_range('dumbo', 'a-g')
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use functions <code>ord</code> and <code>chr</code> for converting to ascii number and converting number to ascii respectivly</p>
<pre><code>quote = input("Enter your name : ")
if qoute[0] in list(map(chr,range(ord('a'),ord('g')+1))):
    #proceed
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You where close enaugh thinking in string.ascci, you can do this:</p>
<pre><code>import string

a_to_g = string.ascii_lowercase[0:7]

print(a_to_g)
</code></pre>
<blockquote>
<p>['a', 'b', 'c', 'd', 'e', 'f', 'g']</p>
</blockquote>
<pre><code>quote = input("Enter your name : ")

print(quote[0] in a_to_g) 

print(a_to_g)
</code></pre>
<blockquote>
<p>True</p>
</blockquote>
<p>If you want to go more than from a to g, you just change the indexs from the <code>string.ascii_lowercase</code></p>
<pre><code>['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
</code></pre>
</div>
<span class="comment-copy">Thanks, but what if i have like range from a-z ? isn't their any way to defined range like startswith(range(a,z)) ?</span>
<span class="comment-copy">@ViralParmar Is that better now?</span>
<span class="comment-copy">Also, if casing is not important, we could use a <code>quote.lower().startswith(x)</code></span>
<span class="comment-copy">@Qrom OP specifically said <code>lowercase</code> but yeah, sure. That is up to him.</span>
<span class="comment-copy">@Ev.Kounis Thank! Looks Better now !</span>
<span class="comment-copy">Thanks! But I dont want to use regular experession.</span>
<span class="comment-copy">@ViralParmar Why not? Simply saying you don't want to use something without compelling reasons is rarely a good idea.</span>
<span class="comment-copy">I know that regular expression and easy to write and effective, but Its just I was trying whether if its possible without using regular expression.</span>
<span class="comment-copy">Thanks you very much!</span>
<span class="comment-copy">you can simplify your check like so: <code>return ord(string[0]) in ord_char_range</code>. That said, I like the <i>mechanics</i> of it xD</span>
<span class="comment-copy">That's what I was about to ask xD. I did the same and it worked. But Still I didn't understood the the last line in original program...what is actually happening in last line. I didnt understood "any(chr(char) "</span>
<span class="comment-copy">@ViralParmar I got your back Viral. ;)</span>
<span class="comment-copy">@Ev.Kounis Ah, yes. Thanks. I guess I need to go ahead to bed :P</span>
<span class="comment-copy">You code would work even if you did not cast the letters to <code>list</code>, so don't ;)</span>
