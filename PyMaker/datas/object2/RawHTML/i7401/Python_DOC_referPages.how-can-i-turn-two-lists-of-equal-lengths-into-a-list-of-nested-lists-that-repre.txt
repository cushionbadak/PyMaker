<div class="post-text" itemprop="text">
<p>For example, if these are my two lists:</p>
<pre><code>a=[1,2,3,4,5]
b=[6,7,8,9,10]
</code></pre>
<p>Then what I'm trying to do is to figure out a way to get:</p>
<pre><code>c=[[1,6],[2,7],[3,8],[4,9],[5,10]]
</code></pre>
<p>Sorry for the probably basic question. These are numpy arrays if that makes a difference.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want a numpy array as a result, you can build it using <code>array.T</code>:</p>
<pre><code>In [15]: a=np.array([1,2,3,4,5])

In [16]: b=np.array([6,7,8,9,10])

In [17]: np.array([a,b]).T
Out[17]: 
array([[ 1,  6],
       [ 2,  7],
       [ 3,  8],
       [ 4,  9],
       [ 5, 10]])
</code></pre>
<p>Reference: <a href="https://stackoverflow.com/questions/12744778/what-is-the-equivalent-of-zip-in-pythons-numpy">What is the equivalent of "zip()" in Python's numpy?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>One approach is using list comprehension and <code>zip</code>:</p>
<pre><code>&gt;&gt;&gt; [[i, j] for i, j in zip(a,b)]
[[1, 6], [2, 7], [3, 8], [4, 9], [5, 10]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't use numpy, but maybe by using <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre><code>&gt;&gt;&gt; a=[1,2,3,4,5]
&gt;&gt;&gt; b=[6,7,8,9,10]
&gt;&gt;&gt; list(zip(a,b))
[(1, 6), (2, 7), (3, 8), (4, 9), (5, 10)]
</code></pre>
<p>It returns a list of tuples though.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.transpose.html" rel="nofollow noreferrer"><code>np.transpose</code></a>:</p>
<pre><code>&gt;&gt;&gt; np.transpose([a, b])
array([[ 1,  6],
       [ 2,  7],
       [ 3,  8],
       [ 4,  9],
       [ 5, 10]])
</code></pre>
<p>If you want the result as list just call <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.tolist.html" rel="nofollow noreferrer"><code>tolist()</code></a> afterwards:</p>
<pre><code>&gt;&gt;&gt; np.transpose([a, b]).tolist()
[[1, 6], [2, 7], [3, 8], [4, 9], [5, 10]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>d = []
for i in range(0, 5):
    d.append([a[i], b[i])
</code></pre>
<p>Is a simple way to create a new 2D list with element pairs. Using the zip() function as others have pointed out is also viable.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm pretty sure there is an easier or more pythonic way than this.</p>
<p><code>c = [list(x) for x in zip(a,b)]</code></p>
<p>This outputs a list of lists, instead of just doing <code>list(zip(a,b)</code> that outputs a list of tuples. This combines list comprehension and zip</p>
<p>Also avoids the tuple unpacking of <code>[[i,j] for i,j in zip(a,b)]</code></p>
<p>not sure whats more efficient though</p>
<p><code>zip(*iterables)</code> Make an iterator that aggregates elements from each of the iterables.</p>
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#zip</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple ways to do this.</p>
<pre><code>a = [1, 2, 3, 4, 5]
b = [6, 7, 8, 9, 10]
</code></pre>
<p>If you just need to access the elements and not modify them, you can use the <code>zip</code> function:</p>
<pre><code>zip(a, b)
&gt;[(1, 6), (2, 7), (3, 8), (4, 9), (5, 10)]
</code></pre>
<p>If you actually need a list of lists, then you can use a list comprehension:</p>
<pre><code>[[a[i], b[i]] for i in range(len(a))]
&gt;[[1, 6], [2, 7], [3, 8], [4, 9], [5, 10]]
</code></pre>
<p>And finally, if you need a numpy array as a result, use the Transpose function:</p>
<pre><code>import numpy as np
np.concatenate([[a], [b]]).T
&gt;array([[1, 6],
        [2, 7],
        [3, 8],
        [4, 9],
        [5, 10]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will give you what you want.</p>
<pre><code>a = [1,2,3,4,5]
b = [6,7,8,9,10]
c = [list(x) for x in zip(a, b)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>with no libraries, you could use:</p>
<pre><code>a = [1,2,3,4,5]
b = [6,7,8,9,10]
c = [[a[i],b[i]] for i in range(len(a))]
</code></pre>
</div>
<span class="comment-copy">This has potentially been answered before: <a href="https://stackoverflow.com/questions/2407398/how-to-merge-lists-into-a-list-of-tuples-in-python">enter link description here</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2407398/how-to-merge-lists-into-a-list-of-tuples-in-python">How to merge lists into a list of tuples in Python?</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/12744778/what-is-the-equivalent-of-zip-in-pythons-numpy">What is the equivalent of "zip()" in Python's numpy?</a></span>
<span class="comment-copy">It looks like this will return a list of tuples and not a list of lists, but one can modify it using <code>map</code>, not sure if the best way, but: <code>list(map(list, zip(a, b)))</code> works well.</span>
<span class="comment-copy">@Vin√≠ciusAguiar You're right, I think the simplest and pythonic approach is just to do a list comprehension like <code>c = [list(x) for x in zip(a, b)]</code></span>
