<div class="post-text" itemprop="text">
<p>I'm creating a modular app using Flask <a href="http://flask.pocoo.org/docs/0.12/blueprints/" rel="noreferrer">blueprints</a> feature. As a result, my directory structure is like this:</p>
<pre><code>project
    __init__.py
    config.py
    mould.py
    modules
        __init__.py
        core
            __init__.py
            core.py
            db.py
            models.py
</code></pre>
<p>The modules directory here is not be confused with Python modules, they are for giving a modular structure to my project (core module, foo module, bar module, etc.). Now each folder in the modules directory (and a module inside it with same name such as <code>core.core</code>) is dynamically imported in my main flask app (<code>mould.py</code>) by doing this:</p>
<pre><code>for item in os.listdir("modules"):
    if not os.path.isfile("modules" + os.sep + item) and not item.startswith("__"):
        ppath = "modules" + "." + item
        fullpath = "modules" + "." + item + "." + item
        module = importlib.import_module(fullpath)
        app.register_blueprint(module.app)
        print("Registered: " + ppath)
</code></pre>
<p>As a result of this, I'm unable to do this in the module scripts like <code>db.py</code>:</p>
<pre><code>import models
</code></pre>
<p>Since it gives a path error as the entire module is being executed at the project level, so I had to do this:</p>
<pre><code>from . import models
</code></pre>
<p>This solves the issue and I'm able to successfully import all modules. However, when I go to the core modules directory for some troubleshooting and start the python interpreter, it doesn't allow me to import the db module:</p>
<pre><code>&gt;&gt;&gt; import db
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "db.py", line 7, in &lt;module&gt;
    from . import models
ImportError: attempted relative import with no known parent package
</code></pre>
<p>Is there a way around this? So, that I can import the db module successfully in the code as well as interpreter?</p>
</div>
<div class="post-text" itemprop="text">
<p>I know I'm late to the party, but I think I've found a solution to this problem.  Hopefully this will be useful to someone else working on a large Python project.</p>
<p>The trick is to try one import format and fall back to the other format if the first fails.</p>
<h1>Approach 1</h1>
<p><strong>db.py</strong></p>
<pre><code>try:
    # Assume we're a sub-module in a package.
    from . import models
except ImportError:
    # Apparently no higher-level package has been imported, fall back to a local import.
    import models
</code></pre>
<p>On the plus side, this approach is pretty simple, but doesn't scale well (module names are duplicated).  Scaling can be improved by importing programmatically.</p>
<h1>Approach 2 (not recommended)</h1>
<p><strong>db.py</strong></p>
<pre><code>import importlib

root = 'project.modules.core'
my_modules = ['core', 'models']
for m in my_modules
    try:
        globals()[m] = importlib.import_module(root + '.' + m)
    except ImportError:
        globals()[m] = importlib.import_module(m)
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer">globals()</a> is the global symbol table.</p>
<p>Of course, now this functionality needs to be duplicated in every module.  I'm not sure that's actually an improvement over the first approach.  However, you can separate this logic out into its own independent package that lives somewhere on <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" rel="nofollow noreferrer">pythonpath</a>.</p>
<h1>Approach 3</h1>
<p><strong>package_importer.py</strong></p>
<pre><code>import importlib

def import_module(global_vars, root, modules):
    for m in modules
        try:
            global_vars[m] = importlib.import_module(root + '.' + m)
        except ImportError:
            global_vars[m] = importlib.import_module(m)
</code></pre>
<p><strong>db.py</strong></p>
<pre><code>import package_importer

root = 'project.modules.core'
my_modules = ['core', 'models']
package_importer.import_module(globals(), root, my_modules)
</code></pre>
</div>
<span class="comment-copy">only slightly related, you may find <a href="https://docs.python.org/3/library/pkgutil.html#pkgutil.walk_packages" rel="nofollow noreferrer">pkgutil.walk_packages</a> useful. use like <code>walk_packages(modules.__path__, modules.__name__ + '.')</code>.  Since it looks like you're using python2, I'd also suggest <code>from __future__ import absolute_import</code> at the top of all of your files</span>
<span class="comment-copy">Why do you need to be able to do <code>import db</code> instead of <code>from modules.core import db</code>?</span>
