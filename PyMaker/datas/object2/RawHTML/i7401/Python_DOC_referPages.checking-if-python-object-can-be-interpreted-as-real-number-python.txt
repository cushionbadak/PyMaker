<div class="post-text" itemprop="text">
<p>I wrote the function in python:</p>
<pre><code>def is_number_like(x):
     try:
        int(x) + 1
    except:
        return False
    return True
</code></pre>
<p>is there any difference if I write <code>float(x)</code> or <code>int(x)</code>? Or could <code>+ 1</code> part be useful in some case?</p>
<p>EDIT: <code>is_number_like</code> will return <code>True</code> when string is passed - that is what I don't want to be. I would like a function which will return <code>False</code> anytime a text-like value is passed as an argument. Is there a method for this?</p>
<p>maybe:</p>
<pre><code>def is_number_like(x):
     try:
        x + 1
    except:
        return False
    return True
</code></pre>
<p>will be better?</p>
<p>or maybe:</p>
<pre><code>def is_number_like(x):
     try:
        float(x + 1) == float(x) + 1
    except:
        return False
    return True
</code></pre>
<hr/>
<p>I want to write a module which would accept any well-behaved number type which represents one dimensional real number (for example <code>SimpleITK.sitkUInt8</code> number type or <code>numpy.int32</code> and so on...).</p>
<p>I'm afraid that there could be libraries, which will not throw an error in casting to int or float. For example I can imagine situation like this:</p>
<pre><code>&gt;&gt;&gt; z = SomeComplexType(1. + 2.j)
&gt;&gt;&gt; z
(1+2j)
&gt;&gt;&gt; z -= 2.j
&gt;&gt;&gt; z
(1+0j)
&gt;&gt;&gt; float(z) # does not raise an error
1.
</code></pre>
<p>is this possible, should I worry about such situation?</p>
<p>And do all well designed real number types will cast to <code>float</code> without an error?</p>
<p><em>ps. i have read this already:
<a href="https://stackoverflow.com/questions/354038/how-do-i-check-if-a-string-is-a-number-float">How do I check if a string is a number (float)?</a></em></p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly, what you're actually trying to do is find out whether an object behaves in "number"-like ways (e.g. can you append <code>+1</code> to it). If so, there's an easier way:</p>
<pre><code>&gt;&gt;&gt; from numbers import Number
&gt;&gt;&gt; 
&gt;&gt;&gt; my_complex_number = 3-2j
&gt;&gt;&gt; my_stringy_number = "3.14"
&gt;&gt;&gt;
&gt;&gt;&gt; isinstance(my_complex_number, Number)
True
&gt;&gt;&gt; isinstance(my_stringy_number, Number)
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There <strong>is a difference between <code>float(..)</code> and <code>int(..)</code></strong>.</p>
<p><code>float(..)</code> will try to parse a <strong><code>str</code>ing</strong> or any object that has a <strong><code>__float__</code> method</strong>. For example <strong><code>int</code>, <code>float</code> and <code>complex</code> have a <code>__float__</code> method</strong>. You can define such method for a custom class as well.</p>
<p>If you aim to convert a complex number to a <code>float(..)</code>, it will error:</p>
<pre><code>&gt;&gt;&gt; float(2+2j)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't convert complex to float
</code></pre>
<p>The <strong>result of a <code>float(..)</code> function is guaranteed to be a <code>float</code></strong>: if the <code>__float__</code> method returns a non-float value, it will <strong>raise a <code>TypeError</code></strong>:</p>
<pre><code>&gt;&gt;&gt; class Foo:
...     def __float__(self):
...         return 2j
... 
&gt;&gt;&gt; float(Foo())
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __float__ returned non-float (type complex)
</code></pre>
<p>So a simply <code>float(..)</code> try is sufficient:</p>
<pre><code>def is_number_like(x):
     try:
        float(x)
        return True
    except TypeError, ValueError:
        return False
</code></pre>
<p>Most <em>numeric-like</em> types in Python (like the <code>numpy.int16</code>) **support such <code>__float__</code> method.</p>
<p><strong><code>int(..)</code> on the other hand works with a <code>str</code>ing and with the <code>__int__</code> method</strong>. Again if you call <strong><code>int(..)</code>, the result is guaranteed to be an <code>int</code></strong>.</p>
<p>So in <a class="post-tag" href="/questions/tagged/python-3.x" rel="tag" title="show questions tagged 'python-3.x'">python-3.x</a>, you could use two checks: one for <code>float(..)</code> and one for <code>int(..)</code>:</p>
<pre><code>def is_number_like(x):
     try:
        int(x)
        return True
    except TypeError, ValueError:
        try:
            float(x)
            return True
        except TypeError, ValueError:
            return False
</code></pre>
<p>Or if you want to return the number-like object:</p>
<pre><code>def is_number_like(x):
     try:
        return int(x)
    except TypeError:
        try:
            return float(x)
        except TypeError:
            return None
</code></pre>
<p>(this will return <code>None</code> if both attempts fail).</p>
<p>Mind that in <a class="post-tag" href="/questions/tagged/python-2.x" rel="tag" title="show questions tagged 'python-2.x'">python-2.x</a>, there is also a <code>long</code> type (and guess what, it works with <code>__long__</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>In python complex numbers can't be directly converted to int nor float this would raise a <code>TypeError: can't convert complex to...</code>. </p>
<p>Any other object than an "int or float convertible" one will raise a  <code>ValueError</code>. </p>
<p>To make an object from a custom class "convertible" one will have to define the appropriate "dunders" <code>__int__</code> and <code>__float__</code>, <a href="https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types" rel="nofollow noreferrer">see doc</a></p>
<p>So a function that check if a object can be cast as a real number you can do this:</p>
<pre><code>def is_real_number(number):
    try:
        int(number)
    except TypeError, ValueError:
        return False
    return True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not just use</p>
<pre><code>any([isinstance(x, t) for t in [float, int, complex]])
</code></pre>
<p>You can modify the list of types to be whatever you need it to be.</p>
</div>
<span class="comment-copy">Have you tried what <code>int("1.23")</code> does? What is <code>x</code> supposed to be anyway? A string, or some other number-like object?</span>
<span class="comment-copy">I get an error for <code>float((1+0j))</code> w/ both python 2.7 and 3.5 ("TypeError: can't convert complex to float")</span>
<span class="comment-copy">x should be a list, an array (i want to return False then) or a numpy.int (which i want to make my function return True) and so on</span>
<span class="comment-copy">Great! That works very well, but I have to exclude complex numbers.</span>
<span class="comment-copy">Well you could also import <code>Real</code> from the <code>numbers</code> library, but note that <code>1.0+0j</code> would not be an instance of that.</span>
<span class="comment-copy">if I use <code>numbers.Real</code> instead of <code>numbers.Number</code> - that solves my problem completely, thanks!</span>
<span class="comment-copy">shouldn't you first try to cast to <code>int</code> and then <code>float</code>? Nothing will be <code>int</code> the way it is now.</span>
<span class="comment-copy">@Ev.Kounis: I do not really get your comment. Can you please reformulate?</span>
<span class="comment-copy">If you pass "1" in your <code>is_number_like()</code> function it will create a <code>float</code>, not an <code>int</code>. In my opinion, the outer <code>try</code> block should be like <code>int(x)</code> and if that fails try <code>float(x)</code>. For this example it does not make any difference because it only returns <code>True</code> \ <code>False</code> but generally speaking..</span>
<span class="comment-copy">@Ev.Kounis: no, it will return <code>True</code>. This is a <i>check</i> wether it <i>is</i> number-like, not converting it to a <i>number-like</i> object. But you are correct that if you want to convert it, you can try <code>int</code> first. Will alter the answer.</span>
<span class="comment-copy">I noticed the return value later, sorry. But you get my point.</span>
<span class="comment-copy">ok, that is clarifying - and what about string? is the other method i wrote better for excluding strings? (see edit in my post)</span>
<span class="comment-copy">If the string only contains a number it will be cast otherwise it will also raise a ValueError</span>
<span class="comment-copy">but i don't want it to cast any string to number. any advice how to make it universal working?</span>
<span class="comment-copy">Check if the given object is an instance of string with the <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer">isinstance</a> builtin. (This will work also for string subclass)</span>
<span class="comment-copy">Actually @Marc gave the best answer if you only want to check if the object is a number is the <a href="https://docs.python.org/3.6/library/numbers.html#numbers.Number" rel="nofollow noreferrer">numbers.Number</a> class</span>
<span class="comment-copy">There are a lot of <i>number-like</i> objects like <code>numpy.int16</code> that are not an <code>int</code>, but <i>can be converted into an <code>int</code></i>.</span>
<span class="comment-copy">i want to use any types the user can invent, for example numpy.float64. i cant enumerate all of them</span>
<span class="comment-copy">@Śmigło: indeed, since you can define types in your own program that are <i>number-like</i>.</span>
