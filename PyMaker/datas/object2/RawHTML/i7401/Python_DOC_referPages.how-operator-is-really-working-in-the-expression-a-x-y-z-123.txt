<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/32127908/python-assignment-operator-precedence-a-b-ab-5">Python Assignment Operator Precedence - (a, b) = a[b] = {}, 5</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>Very basic question but I think I am missing some background that I would like to understand.</p>
<p>Let's say we have expressions:</p>
<pre><code># version 1
a = [x,y,z] = "123"

#version 2
[x,y,z] = "123"
a = [x,y,z]
</code></pre>
<p>I know that first version is a messy code, but I wish to understand. Always I thought that result of this code is the same. I was wrong. 
Type of first "a" is a string, type of second "a" is a list. The question is why in the first case the type of the most right value is propagated to the left? </p>
</div>
<div class="post-text" itemprop="text">
<p>Unlike in C, <code>=</code> is not an operator, and the statement</p>
<pre><code>a = [x,y,z] = "123"
</code></pre>
<p>is not parsed as <code>a = ([x,y,z] = "123")</code>. It does not take the result of the <code>[x,y,z] = "123"</code> assignment and assign it to <code>a</code>.</p>
<p>The syntax of an assignment statement in Python is</p>
<pre><code>assignment_stmt ::=  (target_list "=")+ (starred_expression | yield_expression)
</code></pre>
<p>and, as stated in the <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="noreferrer">documentation</a>,</p>
<blockquote>
<p>An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the <strong>single resulting object</strong> to <strong>each of the target lists</strong>, from left to right.</p>
</blockquote>
<p><code>"123"</code> is assigned to both <code>a</code> and <code>[x,y,z]</code>, starting with <code>a</code>.</p>
</div>
<span class="comment-copy">This isn't much different than <code>a = b = 1</code>. Both a and b are assigned the right most value</span>
<span class="comment-copy">Of course I see that the equivalent version is: a = "123" [x,y,z] = "123" but why?</span>
<span class="comment-copy">Ok it is interesting. Seems like the variable with name a has some kind of preference.</span>
<span class="comment-copy">But what about: [x,y,z] = a = "123" (which also prints "123")? If it was evaluated from left to right it would be ["1","2","3"], right??</span>
<span class="comment-copy">@AntonvBR: No. It would assign <code>"123"</code> to <code>[x, y, z]</code>, and then it would assign <code>"123"</code> to <code>a</code>.</span>
<span class="comment-copy">Thanks for the clarification</span>
<span class="comment-copy">@user2357112 do you know what is the philosophy behind this solution, why is so different then e.g. in C?</span>
<span class="comment-copy">@pmoniq: While there are a number of arguments I can give in support of Python's assignment design (for example, it's really confusing how <code>a = b = 4.5</code> can end up <a href="http://ideone.com/T4UXtV" rel="nofollow noreferrer">assigning <code>4</code> to <code>a</code> in C even if <code>a</code> is a double</a>, and we don't want intermediate assignments to  cause weird type conversions in Python), a lot of it is just weird historical accident, and there are parts of the design I strongly disagree with.</span>
