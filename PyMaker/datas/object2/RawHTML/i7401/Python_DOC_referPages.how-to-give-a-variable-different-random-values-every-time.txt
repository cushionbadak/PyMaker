<div class="post-text" itemprop="text">
<pre><code>import random


def random_letters():
   x = random.randrange(0, 28)
   for i in range (1,29):
   n = ["a", "b", "c", "ç", "d", "e", "f", "g", "ğ", "h", "ı", "i", "j", "k", "l", "m", "n", "o", "ö", "p", "r", "s", "ş", "t", "u", "ü", "v", "y", "z"]
   print (n[x], n[x], n[x], n[x], n[x], n[x], n[x], n[x], n[x], n[x], n[x], n[x], n[x], n[x], n[x], n[x], n[x])

random_letters()
</code></pre>
<p>The above is my attempt to print a random shuffling of letters each time the random_letters() method is called, though it does not work.  What approach can I use to generate this effect?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you wrote doesn't work because <code>x = random.randrange(0, 28)</code> returns a single random number, when you print <code>n[x]</code> it's always going to be the same character. Even if you declared <code>x = random.randrange(0, 28)</code> inside the <code>for</code> loop, it wouldn't be enough to assure every character is different, simply because it would have to generate all different numbers in all loops, which is highly unprobable.</p>
<p>A workaround is creating a range list with the same length as your characters' list, then shuffling it with <a href="https://docs.python.org/3/library/random.html#random.shuffle" rel="nofollow noreferrer"><code>random.shuffle</code></a> and printing the characters' list using the indexes of the shuffled list:</p>
<pre><code>from random import shuffle

def random_letters(length):
    n = ["a", "b", "c", "ç", "d", "e", "f", "g", "ğ", "h", "ı", "i", "j", "k", "l", "m", "n", "o", "ö", "p", "r", "s", "ş", "t", "u", "ü", "v", "y", "z"]
    list1 = list(range(len(n)))
    shuffle(list1) # Try printing list1 after this step
    for i in range(length):
        print(n[list1[i]],end="") # The end paramater is here to "concatenate" the characters

&gt;&gt;&gt; random_letters(6)
grmöçd
&gt;&gt;&gt; random_letters(10)
mbzfeıjkgş
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import random
import numpy as np

n = np.array(["a", "b", "c", "ç", "d", "e", "f", "g", "ğ", "h", "ı", "i", "j", "k", "l", "m", "n", "o", "ö", "p", "r", "s", "ş", "t", "u", "ü", "v", "y", "z"])
nLength = np.arange(len(n))  #Generate an array from 0 to the length of n
np.random.shuffle(nLength)   #Randomly shuffle that array
def random_letters():
   m = n[nLength]            #Set m equal to a reordered n according to nLength
   print (m)

random_letters()
</code></pre>
<p>@coldspeed's method works rather well also, just make it a np.array as above for my method to work.</p>
<p>If you decide you only want it to return the same randomized string each time, set </p>
<pre><code>np.random.seed(*some number*)
</code></pre>
<p>above the shuffle method.</p>
</div>
<span class="comment-copy"><code>random.choice(n)</code>?</span>
<span class="comment-copy">Generate a range list, <code>shuffle</code> it, and then go through it printing the characters.</span>
<span class="comment-copy">As a sidenote, I would recommend <code>[chr(ord('a') + i) for i in range(26)]</code> instead of that long abomination of a list declaration. Be clever about these things!</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ good sidenote, even though OP has special characters in the list too, it'd be easier and better written to concatenate two lists.</span>
<span class="comment-copy">I tried to change this a little bit. I wrote <code>list1 = list(range(6))</code> instead of <code>list1 = list(range(6))</code> but then it started to use only first 6 letters, how is it possible to avoid this with your method?</span>
<span class="comment-copy">You want to pass a parameter that decides how long is the string? If yes, what you should modify is the for loop, use <code>for i in range(length):</code> and <code>print(n[list1[i]],end="")</code>.</span>
<span class="comment-copy">Yes, for instance when I add something like <code>random_letters(int(input("letter_count")))</code> I want to have that amount of letters as my result.</span>
<span class="comment-copy"><code>shuffle(list1)</code> just works fine as in your first example, can you please explain why did you changed it to <code>random.shuffle(list1)</code>.</span>
<span class="comment-copy">Actually, since I've rewritten the code, I changed it without noticing, when importing modules, you can either use <code>from module import function</code> or <code>import module</code>, if the first is used, you should only call <code>function</code>, if the second is used you need to call <code>module.function</code>. I edited the answer to write back to this way and to put the code comments back, since I have forgot that too, thanks for noticing!</span>
<span class="comment-copy">If you were a beginner and someone shoved numpy on you, that'd be a lot to swallow. ;(</span>
<span class="comment-copy">Hmm...a fair point.  Though a nice introduction to what will ultimately be a very useful library for them, no? :]</span>
