<div class="post-text" itemprop="text">
<p>I have a master csv file in the form</p>
<pre><code>col1, col2, col3, col4...
a,    x,    y,    z
a,    x,    y,    z
b,    x,    y,    z
b,    x,    y,    z
..    ..    ..    ..
</code></pre>
<p>and I want to read this file in. Create a new Excel file with all values where <strong>col1==a</strong>  and another file with all values where <strong>col1==b</strong>. So <strong>OutputFilea</strong> will look like:</p>
<pre><code>col1, col2, col3, col4...
a,    x,    y,    z
a,    x,    y,    z
</code></pre>
<p>and <strong>OutputFileb</strong> will look like</p>
<pre><code>col1, col2, col3, col4...
b,    x,    y,    z
b,    x,    y,    z
</code></pre>
<p>My question is, should I use <strong>csv.reader()</strong> line by line and use conditionals to determine which file should be appended or should I append a string with the rows and then write each file at the end. Or is there a module which optimizes a process like this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you are going to be working with large data sets, it is probably best not to hold too much in memory at the same time. You can maintain a dictionary of open files keyed by the line prefix, and make sure that the files are closed properly using an <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow noreferrer"><code>contextlib.ExitStack</code></a>. Doing this will allow you to open new files lazily as you process the input spreadsheet:</p>
<pre><code>from contextlib import ExitStack

output_files = {}
with open('master.csv', 'r') as master, ExitStack() as output_stack:
    for line in master:
        prefix = line.split(',', 1)[0]
        if prefix not in output_files:
            output_name = 'output' + prefix + '.csv'
            output = output_stack.enter_context(open(output_name, 'w'))
            output_files[prefix] = output
        else:
            output = output_files[prefix]
        print(line, file=output)
</code></pre>
<p>Given that you want to copy the lines as-is into the output files, I have chosen not to use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module. If you want to apply more complex processing, you should probably consider adding it in of course.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest to try <a href="https://pandas.pydata.org" rel="nofollow noreferrer">pandas</a> for this kind of stuff. There is a special function to write to excel. In this case imagine I read your .csv file into a pandas dataframe <code>df</code>:</p>
<pre><code>In [4]: df = pd.read_csv('yourfile.csv')

In [5]: df
Out[5]: 
  col1   col2   col3   col4
0    a      x      y      z
1    a      x      y      z
2    b      x      y      z
3    b      x      y      z
</code></pre>
<p>Then I can select only the values I want to filter and save to excel:</p>
<pre><code>In [6]: dfa = df[df['col1']=='a']

In [7]: dfa
Out[7]: 
  col1   col2   col3   col4
0    a      x      y      z
1    a      x      y      z

In [8]: dfa.to_excel('OutputFilea.xls')
</code></pre>
<p>The same happens with the second filter:</p>
<pre><code>In [9]: dfb = df[df['col1']=='b']

In [10]: dfb.to_excel('OutputFileb.xls')
</code></pre>
<p>Hope that helps.</p>
</div>
<span class="comment-copy">What are your criteria for which approach is best? It sounds like all of them are reasonable approaches, making this a matter purely of opinion.</span>
<span class="comment-copy">That, and the fact that you haven't actually attempted to implement any of the approaches enough to run into any concrete problems...</span>
<span class="comment-copy">@MadPhysicist I will be implementing this on a large data set and do not know if these methods will be too slow or memory inefficient when that time comes.</span>
<span class="comment-copy">The implementations are nearly trivial. You can try them all out before the time comes with very little effort. If you have enormous data sets, it should be apparent that holding everything in memory and writing out at the end is not a good option.</span>
<span class="comment-copy">I will write up an answer with some optimizations for you.</span>
<span class="comment-copy">This should be very helpful, thank you.</span>
