<div class="post-text" itemprop="text">
<p>In several of my classes, I want to implement both <code>__str__</code> and <code>__repr__</code> and usually end up with code like this:</p>
<pre><code>class MyClass(object):
    def __init__(self, a):
        self.a = a

    def __str__(self):
        return 'MyClass({})'.format(self.a)

    def __repr__(self):
        return 'MyClass({!r})'.format(self.a)
</code></pre>
<p>Which does what I'd expect:</p>
<pre><code>&gt;&gt;&gt; myobject = MyClass(np.array([1, 2]))
&gt;&gt;&gt; str(myobject)
'MyClass([1 2])'
&gt;&gt;&gt; repr(myobject)
'MyClass(array([1, 2]))'
</code></pre>
<p>However the code violates DRY and as the number of arguments starts to grow maintaining this becomes cumbersome and I've often found that either of <code>__str__</code> or <code>__repr__</code> has come "out of sync" with the other.</p>
<p>Is there a better way to simultaneously implement both <code>__str__</code> and <code>__repr__</code> without duplication?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since your <code>__str__</code> and <code>__repr__</code> follow the same pattern, you could write a function to create the object's string representation for you. It would take an object, a list of attributes and <code>str</code> or <code>repr</code> as arguments:</p>
<pre><code>def stringify(obj, attrs, strfunc):
    values = []
    # get each attribute's value and convert it to a string
    for attr in attrs:
        value = getattr(obj, attr)
        values.append(strfunc(value))

    # get the class name
    clsname = type(obj).__name__

    # put everything together
    args = ', '.join(values)
    return '{}({})'.format(clsname, args)

print( stringify(MyClass('foo'), ['a'], repr) )
# output: MyClass('foo')
</code></pre>
<hr/>
<p>I would recommend putting this function in a class which you then inherit from:</p>
<pre><code>class Printable:
    def __str__(self):
        return self.__stringify(str)

    def __repr__(self):
        return self.__stringify(repr)

    def __stringify(self, strfunc):
        values = []
        for attr in self._attributes:
            value = getattr(self, attr)
            values.append(strfunc(value))

        clsname = type(self).__name__
        args = ', '.join(values)
        return '{}({})'.format(clsname, args)

class MyClass(Printable):
    _attributes = ['a']

    def __init__(self, a):
        self.a = a
</code></pre>
<p>And you can even get it done completely automatically by grabbing the attributes directly from the <code>__init__</code> function's signature:</p>
<pre><code>import inspect

class AutoPrintable:
    def __str__(self):
        return self.__stringify(str)

    def __repr__(self):
        return self.__stringify(repr)

    def __stringify(self, strfunc):
        sig= inspect.signature(self.__init__)
        values= []
        for attr in sig.parameters:
            value= getattr(self, attr)
            values.append(strfunc(value))

        clsname= type(self).__name__
        args= ', '.join(values)
        return '{}({})'.format(clsname, args)

class MyClass(AutoPrintable):
    def __init__(self, a, b):
        self.a = a
        self.b = b

print( str(MyClass('foo', 'bar')) ) # output: MyClass(foo, bar)
print( repr(MyClass('foo', 'bar')) ) # output: MyClass('foo', 'bar')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are no rules nor clear guidelines for implementing <code>__str__</code> and <code>__repr__</code>—at least none that are consistently followed anywhere (not even in the stdlib). So there wouldn’t be a way to get the “standard behavior” automatically, simply because there isn’t a standard behavior. It’s up to you, so if you set up guidelines for yourself, maybe you can also come up with a utility to make it easier for you to follow them.</p>
<p>In your case, you could for example create a base class which provides the <code>__str__</code> and <code>__repr__</code> implementations:</p>
<pre><code>class AutoStRepr(object):
    _args = []
    def __repr__(self):
        return '{}({})'.format(type(self).__name__,
            ', '.join(repr(getattr(self, a)) for a in self._args))
    def __str__(self):
        return '{}({})'.format(type(self).__name__,
            ', '.join(str(getattr(self, a)) for a in self._args))
</code></pre>
<p>You could then use that on a number of different types:</p>
<pre><code>class MyClass(AutoStRepr):
    _args = ['a']
    def __init__(self, a):
        self.a = a

class MyOtherClass(AutoStRepr):
    _args = ['a', 'bc']
    def __init__(self, a, b, c):
        self.a = a
        self.bc = b * c
</code></pre>
<pre><code>&gt;&gt;&gt; MyClass('foo')
MyClass('foo')
&gt;&gt;&gt; MyOtherClass('foo', 2, 5)
MyOtherClass('foo', 10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No need for duplication, just don't implement <code>__str__</code>.</p>
<p>That way, the object will behave like <code>__str__ = __repr__</code>.</p>
<p>I think you should also read <a href="https://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python">this answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Neither the official Python documentation nor the <a href="https://www.python.org/dev/peps/" rel="nofollow noreferrer">Index of Python Enhancement Proposal</a> seem to specify clear guidelines on how to override these methods, except for the <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer">3.3 Special method names</a> which, among other things, says of <code>__repr__()</code>:</p>
<blockquote>
<p>If at all possible, this should look like a valid Python expression
  that could be used to recreate an object with the same value [...]
  This is typically used for debugging, so it is important that the
  representation is information-rich and  unambiguous.</p>
</blockquote>
<p>I like to take inspiration from how <code>__repr__()</code> is implemented in some of the standard library modules, take e.g. <code>socket.socket</code>:</p>
<pre><code>$ python3
&gt;&gt;&gt; from socket import socket
&gt;&gt;&gt; socket()
&lt;socket.socket fd=3, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('0.0.0.0', 0)&gt;
</code></pre>
<p>So the pattern here is <code>&lt;self.__class__.__module__ + "." + self.__class__.__name__ attribute1=value1, ..., attributeN=valueN&gt;</code>.</p>
<p>While <code>__repr__()</code> is preferred for debug/testing purposes, the scope of <code>__str__()</code> is much more informal and I'd deduce that even looser rules apply. Note that if <code>__repr__()</code> is overridden but <code>__str__()</code> is not, <code>__repr__()</code> calls <code>__str__()</code>.</p>
<p>Here again, if I have to pick some rules I prefer to have <code>__str__()</code> resemble <code>__repr__()</code>, but modifying:</p>
<ul>
<li>The number of items displayed. I don't need to be verbose as <code>__repr__</code> mandates.</li>
<li>The type of values displayed. I include the most "important" ones, and even values that do not reflect the arguments initially passed to <code>__init__()</code>.</li>
</ul>
<p>Another few examples come from a PDF library I've been working on. There are two <code>PdfFileReader</code> and <code>PdfFileWriter</code> classes, and their <code>__repr__()</code> and <code>__str__()</code> methods have the following output:</p>
<pre><code>r = PdfFileReader("samplecode/pdfsamples/jpeg.pdf")
w = PdfFileWriter()

print(r)
print(str(r))
print(repr(r))

print(w)
print(str(w))
print(repr(w))
</code></pre>
<hr/>
<pre><code>$ python3 repr.py
&lt;pypdf.pdf.PdfFileReader _filepath=samplecode/pdfsamples/jpeg.pdf, stream=&lt;_io.BytesIO object at 0x7eff60f07e60&gt;, strict=True, debug=False&gt;
&lt;pypdf.pdf.PdfFileReader _filepath=samplecode/pdfsamples/jpeg.pdf, stream=&lt;_io.BytesIO object at 0x7eff60f07e60&gt;, strict=True, debug=False&gt;
&lt;pypdf.pdf.PdfFileReader _filepath=samplecode/pdfsamples/jpeg.pdf, stream=&lt;_io.BytesIO object at 0x7eff60f07e60&gt;, strict=True, debug=False&gt;
&lt;pypdf.pdf.PdfFileWriter _header=%PDF-1.3, debug=False&gt;
&lt;pypdf.pdf.PdfFileWriter _header=%PDF-1.3, debug=False&gt;
&lt;pypdf.pdf.PdfFileWriter _header=%PDF-1.3, debug=False&gt;
</code></pre>
<p>See also <a href="https://docs.python.org/3/library/functions.html#repr" rel="nofollow noreferrer">2. Built-in Functions</a> for <code>repr()</code>:</p>
<blockquote>
<p>[...] For many types, this function makes an attempt to return a string that
  would yield an object <strong>with the same value when passed to eval()</strong>,
  otherwise the representation is a string enclosed in angle brackets
  that contains the name of the type of the object together with
  additional information often including the name and address of the
  object. [...]</p>
</blockquote>
</div>
<span class="comment-copy">Is it really necessary for <code>str</code> and <code>repr</code> to return two different strings?</span>
<span class="comment-copy">You could just say <code>__str__ = __repr__</code> (or vice versa) to copy the implementation.</span>
<span class="comment-copy">It is not necessary that they return different string, but often preferable. Perhaps this example is to simple to convey that.</span>
<span class="comment-copy">You probably want to look into <a href="https://github.com/python-attrs/attrs" rel="nofollow noreferrer">attrs</a>.</span>
<span class="comment-copy">Not a bad answer, but in a way this violates the DRY principle just as much as the original solution - you'd probably want to move those two massive <code>.format</code>s into a helper function.</span>
<span class="comment-copy">@Rawing Those “massive joins”? How are they massive? It’s just a join over a simple generator expression. And no, that’s not a violation of DRY; any solution to avoid repeating that would just add a crazy amount of complexity that has no actual benefit. DRY is about avoid having the same logic over and over. This here is <i>two times</i> and it’s actually a different logic which might end up diverging even more.</span>
<span class="comment-copy">I am well aware of the possibility to not duplicate, but for "large" objects, the difference, here just <code>array(...)</code>, can be quite large and having both str and repr can be useful.</span>
<span class="comment-copy">Then follow the <code>__repr__</code> is unambiguous <code>__str__</code> is readable guideline. The implementation is totaly up to your definition of unambiguous and readable.</span>
