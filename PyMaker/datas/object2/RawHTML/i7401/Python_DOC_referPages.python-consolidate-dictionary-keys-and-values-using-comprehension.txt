<div class="post-text" itemprop="text">
<p>How do I CONSOLIDATE the following using python COMPREHENSION</p>
<p><strong>FROM (list of dicts)</strong></p>
<pre><code>[
 {'server':'serv1','os':'Linux','archive':'/my/folder1'}
 ,{'server':'serv2','os':'Linux','archive':'/my/folder1'}
 ,{'server':'serv3','os':'Linux','archive':'/my/folder2'}
 ,{'server':'serv4','os':'AIX','archive':'/my/folder1'}
 ,{'server':'serv5','os':'AIX','archive':'/my/folder1'}
]
</code></pre>
<p><strong>TO (list of dicts with tuple as key and list of 'server#'s as value</strong></p>
<pre><code>[
 {('Linux','/my/folder1'):['serv1','serv2']}
 ,('Linux','/my/folder2'):['serv3']}
 .{('AIX','/my/folder1'):['serv4','serv5']}
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>the need to be able to set default values to your dictionary and to have the same key several times may make a dict-comprehension a bit clumsy. i'd prefer something like this:</p>
<p>a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> may help:</p>
<pre><code>from collections import defaultdict

lst = [
 {'server':'serv1','os':'Linux','archive':'/my/folder1'},
 {'server':'serv2','os':'Linux','archive':'/my/folder1'},
 {'server':'serv3','os':'Linux','archive':'/my/folder2'},
 {'server':'serv4','os':'AIX','archive':'/my/folder1'},
 {'server':'serv5','os':'AIX','archive':'/my/folder1'}
]

dct = defaultdict(list)

for d in lst:
    key = d['os'], d['archive']
    dct[key].append(d['server'])
</code></pre>
<p>if you prefer to have a standard dictionary in the end (actually i do not really see a good reason for that) you could use <a href="https://docs.python.org/3/library/stdtypes.html?highlight=setdefault#dict.setdefault" rel="nofollow noreferrer"><code>dict.setdefault</code></a> in order to create an empty list where the key does not yet exist:</p>
<pre><code>dct = {}

for d in lst:
    key = d['os'], d['archive']
    dct.setdefault(key, []).append(d['server'])
</code></pre>
<p>the <a href="https://docs.python.org/3/library/collections.html#defaultdict-examples" rel="nofollow noreferrer">documentation on <code>defaultdict</code> (vs. <code>setdefault</code>)</a>:</p>
<blockquote>
<p>This technique is simpler and faster than an equivalent technique
  using dict.setdefault()</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>It's difficult to achieve with list comprehension because of the accumulation effect. However, it's possible using <code>itertools.groupby</code> on the list sorted by your keys (use the same <code>key</code> function for both sorting and grouping).</p>
<p>Then extract the server info in a list comprehension and prefix by the group key. Pass the resulting (group key, server list) to dictionary comprehension and here you go.</p>
<pre><code>import itertools

lst = [
 {'server':'serv1','os':'Linux','archive':'/my/folder1'}
 ,{'server':'serv2','os':'Linux','archive':'/my/folder1'}
 ,{'server':'serv3','os':'Linux','archive':'/my/folder2'}
 ,{'server':'serv4','os':'AIX','archive':'/my/folder1'}
 ,{'server':'serv5','os':'AIX','archive':'/my/folder1'}
]


sortfunc = lambda x : (x['os'],x['archive'])

result = {k:[x['server'] for x in v] for k,v in itertools.groupby(sorted(lst,key=sortfunc),key = sortfunc)}


print(result)
</code></pre>
<p>I get:</p>
<pre><code>{('Linux', '/my/folder1'): ['serv1', 'serv2'], ('AIX', '/my/folder1'): ['serv4', 'serv5'], ('Linux', '/my/folder2'): ['serv3']}
</code></pre>
<p>Keep in mind that it's not because it can be written in one line that it's more efficient. The <code>defaultdict</code> approach doesn't require sorting for instance.</p>
</div>
<span class="comment-copy">Comprehension isn't really the tool for this job...</span>
<span class="comment-copy">that's not using list comprehensions, but I don't think there's a way to do that with list comprehensions because of the cumulative effect.</span>
<span class="comment-copy">Do you have any proof that it is faster?</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre tried to find a version with comprehension first but the need to set a default value is tricky... will add a remark on that.</span>
<span class="comment-copy">@shadow that is what the official python documentation says. did you benchmark?</span>
<span class="comment-copy">Just a link to where the documentation states that will suffice.</span>
