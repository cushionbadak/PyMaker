<div class="post-text" itemprop="text">
<p>I have date wise stock csv files like below.</p>
<pre><code>EQ070717.CSV
EQ070716.CSV
EQ070715.CSV
[...]
</code></pre>
<p>They have stock data in this format:</p>
<pre><code>SC_NAME,OPEN,HIGH,LOW,CLOSE
ABB,1457.70,1469.95,1443.80,1452.90,
AEGI,189.00,193.00,187.40,188.70
HDFC,1650.00,1650.00,1617.05,1629.20
[...]
</code></pre>
<p>How can i convert them to stock specific csv files which can be loaded as pandas datafframe. I could do it in .net, but just wanted to know if there is any straightforward way available in python/pandas.</p>
<hr/>
<p><strong>Edit:</strong> Adding expected output</p>
<p><strong>Create individual stock files based on stock name:</strong></p>
<pre><code>ABB.csv
AEGI.csv
HDFC.csv
</code></pre>
<p><strong>For each stock pull in stock data from all files and add to that stock csv:</strong>
For example stock ABB, read stock data from each date wise csv, and add that info to a new line in csv <strong>ABB.csv</strong>. Date value can be picked from file name or file modified date property also.</p>
<pre><code>DATE, OPEN,HIGH,LOW,CLOSE
070717, 1457.70,1469.95,1443.80,1452.90
070716, 1456.70,1461.95,1441.80,1450.90
070715, 1455.70,1456.95,1441.80,1449.90
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you need <a href="https://docs.python.org/2/library/glob.html" rel="nofollow noreferrer"><code>glob</code></a> for select all files, create list of <code>DataFrames</code> <code>dfs</code> in <code>list comprehension</code> and then use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html" rel="nofollow noreferrer"><code>concat</code></a> for one big <code>DataFrame</code> from all <code>CSV</code>s:</p>
<pre><code>import glob

files = glob.glob('files/*.CSV')
dfs = [pd.read_csv(fp) for fp in files]
df = pd.concat(dfs, ignore_index=True)
</code></pre>
<p>If necessary filenames in output <code>DataFrame</code>:</p>
<pre><code>files = glob.glob('files/*.CSV')
dfs = [pd.read_csv(fp) for fp in files]
#win solution - double split
keys = [x.split('\\')[-1].split('.')[0] for x in files]
df = pd.concat(dfs, keys=keys)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>adding to @jezrael solution. as user wants each stock specific csv file.</p>
<pre><code>for stock_name in df.SC_NAME.unique():
    df[df['SC_NAME']==stock_name].to_csv(path_to_dir+stock_name+'.csv')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My approach would be to set up a sqlite database with a single table.  Just three columns, market_date, symbol, and csv_string (maybe a col for line# in the file if you want relative positions preserved).  Read all the files and load the data into the table line by line.  Create an index on the table on the symbol column.  Then create a cursor for <code>read symbol, csv_string from stock_table order by symbol, market_date</code>.  Use <a href="https://docs.python.org/3/library/itertools.html?highlight=groupby#itertools.groupby" rel="nofollow noreferrer">itertools.groupby</a> to let you know when you have looped over all of a symbol so you can close the last file and open the next.</p>
<p>Of course if you have little enough data that it can all fit into memory you just insert tuples into a list, sort the list and use groupby to loop over it to make your files.</p>
</div>
<span class="comment-copy">you want to combine them?</span>
<span class="comment-copy">Do u need to load all file at once, and add a column for date when combine all csv file, or just read the csv file?</span>
<span class="comment-copy">I have added expected output.</span>
<span class="comment-copy">For splitting the dataframe you might want to refer to this <a href="https://stackoverflow.com/questions/19790790/splitting-dataframe-into-multiple-dataframes/43998102#43998102">question</a>. If you consider my answer, you can use the dictionary keys as filename prefixes</span>
<span class="comment-copy">I prefer <code>pathlib.Path</code> for path operations. Then you can use <code>fp.name</code></span>
