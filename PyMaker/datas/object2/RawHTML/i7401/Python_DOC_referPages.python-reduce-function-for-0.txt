<div class="post-text" itemprop="text">
<p>i have <code>vals = [1.0, 0.0, 3.4, 0.0]</code> and I want to avoid multiplying by zero</p>
<p>if i use <code>reduce(operator.mul, iterable)</code> - i get 0.0. </p>
<p>Also for <code>reduce(lambda x, y : x * y, val)</code> too</p>
<p>How can I add the minimum conditions for variables so that only get greater than zero. But if the array was completely out of zero elements, then it returned 0. Zero element from an array can not be deleted</p>
<p>So for <code>vals = [1.0, 0.0, 3.4, 0.0]</code> - return 3.4</p>
<p>for <code>vals = [0.0, 0.0, 0.0, 0.0]</code> - return 0</p>
</div>
<div class="post-text" itemprop="text">
<p>You could remove <code>0</code>s from the list. If the list becomes empty, return <code>0</code>, the product otherwise:</p>
<pre><code>&gt;&gt;&gt; no_zeroes = [value for value in values if value &gt; 0]
&gt;&gt;&gt; no_zeroes
[1.0, 3.4]
&gt;&gt;&gt; reduce(lambda x, y : y*x, no_zeroes) if no_zeroes else 0
3.4
</code></pre>
<p>Note that from a mathematical point of view, the product of an empy list should probably be <code>1</code>. In that case, you could write :</p>
<pre><code>reduce(lambda x, y : y*x, no_zeroes, 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>if you use numpy arrays you can filter out the zero values:</p>
<pre><code>import numpy as np
vals = np.array([0.0, 0.0, 0.0, 0.0])
no_zeros = vals[vals&gt;0]
if no_zeros:
    print( np.prod(no_zeros))
else:
    print(0.0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another option:</p>
<pre><code>from functools import reduce

vals = [1.0, 0.0, 3.4, 0.0]
reduce(lambda x,y: y if x == 0 else (x if y == 0 else x*y), vals, 0)
# 3.4

vals = [0.0, 0.0, 0.0, 0.0]
reduce(lambda x,y: y if x == 0 else (x if y == 0 else x*y), vals, 0)
# 0.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Combining <code>functools.reduce</code> (with <em>initiator</em> value <code>1</code>) and <code>filter</code> functions:</p>
<pre><code>vals = [1.0, 0.0, 3.4, 0.0]
result = functools.reduce(operator.mul, list(filter(lambda x: x&gt;0, vals)) or [0], 1)
print(result)  #  3.4
</code></pre>
<hr/>
<pre><code>vals = [0.0, 0.0, 0.0, 0.0]
result = functools.reduce(operator.mul, list(filter(lambda x: x&gt;0, vals)) or [0], 1)
print(result)  # 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just filter out 0.0 values with <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a></p>
<pre><code>from functools import reduce

vals_without_zero = filter(lambda x: x, vals)
reduce(lambda x, y : x * y, vals_without_zero)
</code></pre>
</div>
