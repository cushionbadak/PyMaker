<div class="post-text" itemprop="text">
<p>Say I have two lists of data as follows:</p>
<pre><code>x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
y = [1, 2, 3, 4, 5, 6, 8, 10, 12, 14]
</code></pre>
<p>That is, it's pretty clear that merely fitting a line to this data doesn't work, but instead the slope changed at a point in the data. (Obviously, one can pinpoint from this data set pretty easily where that change is, but it's not as clear in the set I'm working with so let's ignore that.) Something with the derivative, I'm guessing, but the point here is I want to treat this as a free parameter where I say "it's this point, +/- this uncertainty, and here is the linear slope before and after this point."  </p>
<p>Note, I can do this with an array if it's easier.  Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a plot of your data:</p>
<p><a href="https://i.stack.imgur.com/JK0Sf.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/JK0Sf.png"/></a></p>
<p>You need to find two slopes (== taking two derivatives). First, find the slope between every two points (using <code>numpy</code>):</p>
<pre><code>import numpy as np 
x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],dtype=np.float)
y = np.array([1, 2, 3, 4, 5, 6, 8, 10, 12, 14],dtype=np.float)
m = np.diff(y)/np.diff(x)
print (m)
# [ 1.  1.  1.  1.  1.  2.  2.  2.  2.]
</code></pre>
<p>Clearly, slope changes from 1 to 2 in the sixth interval (between sixth and seventh points). Then take the derivative of this array, which tells you when the slope changes:</p>
<pre><code>print (np.diff(m))
[ 0.  0.  0.  0.  1.  0.  0.  0.]
</code></pre>
<p>To find the index of the non-zero value:</p>
<pre><code>idx = np.nonzero(np.diff(m))[0]
print (idx)
# 4
</code></pre>
<p>Since we took one derivative with respect to x, and indices start from zero in Python, <code>idx+2</code> tells you that the slope is different before and after the sixth point.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can calculate the slope as the difference between each pair of points (the first derivative).  Then check where the slope changes (the second derivative).  If it changes, append the index location to <code>idx</code>, the collection of points where the slope changes.</p>
<p>Note that the first point does not have a unique slope.  The second pair of points will give you the slope, but you need the third pair before you can measure the change in slope.</p>
<pre><code>idx = []
prior_slope = float(y[1] - y[0]) / (x[1] - x[0])
for n in range(2, len(x)):  # Start from 3rd pair of points.
    slope = float(y[n] - y[n - 1]) / (x[n] - x[n - 1])
    if slope != prior_slope:
        idx.append(n)
    prior_slope = slope

&gt;&gt;&gt; idx
[6]
</code></pre>
<p>Of course this could be done more efficiently in Pandas or Numpy, but I am just giving you a simple Python 2 solution.</p>
<p>A simple conditional list comprehension should also be pretty efficient, although it is more difficult to understand.</p>
<pre><code>idx = [n for n in range(2, len(x)) 
       if float(y[n] - y[n - 1]) / (x[n] - x[n - 1]) 
       != float(y[n - 1] - y[n - 2]) / (x[n - 1] - x[n - 2])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure to understand very well what you want but you can see the evolution this way (derivative): </p>
<pre><code>&gt;&gt;&gt; y = [1, 2, 3, 4, 5, 6, 8, 10, 12, 14]
&gt;&gt;&gt; dy=[y[i+1]-y[i] for i in range(len(y)-1)]
&gt;&gt;&gt; dy
[1, 1, 1, 1, 1, 2, 2, 2, 2]
</code></pre>
<p>and then find the point where it change (second derivative):</p>
<pre><code>&gt;&gt;&gt; dpy=[dy[i+1]-dy[i] for i in range(len(dy)-1)]
&gt;&gt;&gt; dpy
[0, 0, 0, 0, 1, 0, 0, 0]
</code></pre>
<p>if you want the index of this point : </p>
<pre><code>&gt;&gt;&gt; dpy.index(1)
4
</code></pre>
<p>that can give you the value of the last point before change of slope :</p>
<pre><code>&gt;&gt;&gt; change=dpy.index(1)
&gt;&gt;&gt; y[change]
5
</code></pre>
<p>In your <code>y = [1, 2, 3, 4, 5, 6, 8, 10, 12, 14]</code> the change happen at the index <code>[4]</code> (list indexing start to 0) and the value of y at this point is <code>5</code>.</p>
</div>
<span class="comment-copy">Your question is not very clear to me. Do you want to find the <i>index</i> where the two slopes start to differ? What do you mean with <i>uncertainty</i>? Why is the slope a <i>free</i> parameter? It is defined between every two (consecutive) points.</span>
<span class="comment-copy">BTW, there is no such thing as an array in Python. See: <a href="https://stackoverflow.com/questions/1514553/how-to-declare-an-array-in-python" title="how to declare an array in python">stackoverflow.com/questions/1514553/â€¦</a></span>
<span class="comment-copy">@SumnerEvans, of course there are <a href="https://docs.python.org/3/library/array.html#module-array" rel="nofollow noreferrer">arrays</a>.</span>
<span class="comment-copy">@SumnerEvans there are arrays, e.g. the built-in <code>array.array</code>, and the much more full-featured <code>numpy.ndarray</code>. The latter is only used often in the domains of scientific/numerical computing, and the former is ever rarer still. However, it is a very common mistake for people to refer to <code>list</code>s as arrays.</span>
<span class="comment-copy">@SumnerEvans it's a part of the standard library. Just because it is in a seperate namespace than <code>__builtins__</code> doesn't make it any less part of the Python. <code>Numpy</code> is a third-party extension, although, the core Python language has features explicitely added to help <code>numpy</code>. E.g. the ellipses singleton: <code>...</code></span>
<span class="comment-copy">I think this is what I want- thanks!  I guess this is easier to deal with in an array so I couldn't think how to go about it.</span>
<span class="comment-copy">Glad to hear that! :) Don't forget to accept it as the answer then! ;)</span>
<span class="comment-copy">Will do.  Just wondering though, so IRL the data I'm using is not as perfect as this case- it's a flux measurement that changes over several days, so I'm suspecting the answer is something like "the slope change is on Day 10, plus or minus two days."  Is there a smart way to do that calculation, do you know?  Thanks!</span>
<span class="comment-copy">If we have some small sample data, we could modify this answer. But do you think <code>np.diff(m)</code> is zero for some intervals or not?</span>
<span class="comment-copy">So, I didn't realize I needed to specify that I was fine with using numpy or pandas to do this.  How would you go about it using those too?  Just curious.</span>
