<div class="post-text" itemprop="text">
<p>I'm trying to understand how this bit works:</p>
<pre><code>Var_1, Var_2, Result =  some_function()
</code></pre>
<p><strong>the script:</strong></p>
<pre><code>def some_function():
    return True, False, {"Some": "Dictionary"}

def main():
    Var_1, Var_2, Result =  some_function()
    if not Var_1:
        do something
    else:
        do something_else(Var_2, Result)

if __name__ == '__main__':
    main()
</code></pre>
<p>For me the difficult to grasp is the bit of doing inception and provide(return) values which will be used in the main function and in the same trigger the <code>some_function()</code> from within the <code>main()</code> function.</p>
<p>Since I'm new to advanced concepts in python, I found it really interesting. How this "operation" is called so I can read a bit more about how it works. i.e. returning some values in line order separated by <code>,</code> and interpreting them based on the position in line(for the lack of better description).</p>
</div>
<div class="post-text" itemprop="text">
<p>It's returning a <a href="http://www.diveintopython.net/native_data_types/tuples.html" rel="noreferrer"><em>tuple</em></a>. A tuple in Python is similar to a list, but it's immutable: you can't add, remove or replace items.</p>
<p>Often, tuples are constructed with the syntax <code>(a, b, c)</code>, but the parentheses are optional in many cases, so <code>a, b, c</code> is also valid.</p>
<p>On the receiving end, <a href="https://en.wikibooks.org/wiki/Python_Programming/Tuples#Packing_and_Unpacking" rel="noreferrer"><em>tuple unpacking</em></a> is used to get the individual elements of the tuple, and assign them to separate variables.</p>
</div>
<div class="post-text" itemprop="text">
<p>What is happening here is in fact not that several values are returned. Instead, a single tuple is returned, and this is then unpacked using something called <a href="https://en.wikibooks.org/wiki/Python_Programming/Tuples#Packing_and_Unpacking" rel="nofollow noreferrer">tuple unpacking</a>.</p>
<p>The code is equivalent to</p>
<pre><code>tmp_tuple = some_function()  # return tuple
Var_1, Var_2, Result = tmp_tuple  # unpack tuple
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>some_function()</code> returns <a href="http://openbookproject.net/thinkcs/python/english3e/tuples.html" rel="nofollow noreferrer">a tuple</a> <code>(True, False, {"Some": "Dictionary"})</code>. </p>
<p>Tuples are very useful for grouping related data, for example something like <code>('John Smith', 1960, 'England', 'London', 'Newham')</code> might be a better way to store information about a person then creating 5 separate variables. </p>
<p>When <code>Var_1, Var_2, Result = tmp_tuple</code> is called this tuple is <a href="https://en.wikibooks.org/wiki/Python_Programming/Tuples#Packing_and_Unpacking" rel="nofollow noreferrer">unpacked</a>:</p>
<pre><code> (Var_1, Var_2, Result) = (True, False, {"Some": "Dictionary"})
</code></pre>
<p>And hence: </p>
<pre><code>Var_1 = True
Var_2 = False
Result = {"Some": "Dictionary"}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/expressions.html#expression-lists" rel="nofollow noreferrer">The docs say:</a></p>
<pre><code>Except when part of a list or set display, an expression list containing at least one comma yields a tuple
</code></pre>
<p>This means <code>return x,y</code> will return a single object - a tuple and the rest is just <strong>unpacking</strong> it to the separate values.</p>
<p>So i would say those are two operation: tuple creation in return statement and tuple unpacking in main.</p>
</div>
<span class="comment-copy">follow this <a href="https://stackoverflow.com/questions/39345995/how-does-python-return-multiple-values-from-a-function" title="how does python return multiple values from a function">stackoverflow.com/questions/39345995/â€¦</a></span>
<span class="comment-copy">One nice usage: you can use the power of tuple unpacking to switch values: <code>a, b = b, a</code>.</span>
