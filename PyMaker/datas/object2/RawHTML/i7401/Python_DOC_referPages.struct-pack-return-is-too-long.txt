<div class="post-text" itemprop="text">
<p>I'm trying to use the <code>struct.pack</code> function</p>
<pre><code>import struct
values = (0, 44)
s = struct.Struct('HI')
b = s.pack(*values)
print(b)
print(str(len(b)))
</code></pre>
<p>and it gives me this output:</p>
<pre><code>b'\x00\x00\x00\x00,\x00\x00\x00'
8
</code></pre>
<p>while the <a href="https://docs.python.org/library/struct.html#format-characters" rel="nofollow noreferrer">python docs</a> say:</p>
<blockquote>
<pre><code>Format - C Type         - Python type - Standard size - Notes

H      - unsigned short - integer     - 2             - (3)

I      - unsigned int   - integer     - 4             - (3)
</code></pre>
</blockquote>
<p>so <code>len()</code> should be 2 + 4 = 6, and I need bytes with size = 6</p>
<p>Any ideas? </p>
<p>I'm using Python 3.6 on Windows 10</p>
</div>
<div class="post-text" itemprop="text">
<p><code>pack</code> will add pad bytes so that the second integer is 4 byte aligned. From <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">the documentation</a>:</p>
<blockquote>
<p>By default, the result of packing a given C struct includes pad bytes in order to maintain proper alignment for the C types involved;  To ...  omit implicit pad bytes, use standard size and alignment instead of native size and alignment: see <a href="https://docs.python.org/3/library/struct.html#struct-alignment" rel="nofollow noreferrer">Byte Order, Size, and Alignment</a> for details</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>That's a consequence of <a href="https://en.wikipedia.org/wiki/Data_structure_alignment#Data_structure_padding" rel="nofollow noreferrer">"Data structure padding"</a>. It will pad the <code>H</code> (2 bytes + 2 bytes padding) so that it aligns with the <code>I</code> (4 bytes).</p>
<p>However you can experiment with the order if you need to decrease the size. To quote Wikipedia:</p>
<blockquote>
<p>It is possible to change the alignment of structures to reduce the memory they require (or to conform to an existing format) by reordering structure members or changing the compiler’s alignment (or “packing”) of structure members.</p>
</blockquote>
<p>For example on my computer it works if you just swap the <code>H</code> and <code>I</code>:</p>
<pre><code>import struct
values = (0, 1)
s = struct.Struct('IH')         # swapped H and I
b = s.pack(*values)
print(b)                        # b'\x00\x00\x00\x00\x01\x00'
print(str(len(b)))              # 6
print(struct.calcsize('IH'))    # 6
print(struct.calcsize('HI'))    # 8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The size computation is not directly additive for the contained native types. You should compute the size using <code>struct.calcsize</code>:</p>
<pre><code>In [8]: struct.calcsize('HI')
Out[8]: 8
</code></pre>
</div>
<span class="comment-copy">That got me an answer, should use <code>struct.Struct('=HI')</code>, <code>struct.Struct('&lt;HI')</code> or <code>struct.Struct('&gt;HI')</code>,</span>
