<div class="post-text" itemprop="text">
<p>Recently I am building a exam test system and now I have the questions and answers organized as follow in a txt file:</p>
<blockquote>
<p>Q1</p>
<p>All of the following are basic components of a security policy EXCEPT
  the</p>
<p>A. definition of the issue and statement of relevant terms.</p>
<p>B. statement of roles and responsibilities.</p>
<p>C. statement of applicability and compliance requirements.</p>
<p>D. statement of performance of characteristics and requirements.</p>
<p>Answer: D</p>
<p>Explaination: Policies are considered the first and highest level of documentation,
  from which the lower level elements of standards, procedures, and
  guidelines flow. This order, however, does not mean that policies are
  more important than the lower elements. These higher-level policies,
  which are the more general policies and statements, should be created
  first in the process for strategic reasons, and then the more tactical
  elements can follow. -Ronald Krutz The CISSP PREP Guide (gold edition)
  pg 13</p>
<p>Q2</p>
<p>Ensuring the integrity of business information is the PRIMARY concern
  of</p>
<p>A. Encryption Security</p>
<p>B. Procedural Security.</p>
<p>C. Logical Security</p>
<p>D. On-line Security</p>
<p>Answer: B</p>
<p>Explaination: Procedures are looked at as the lowest level in the policy chain
  because they are closest to the computers and provide detailed steps
  for configuration and installation issues. They provide the steps to
  actually implement the statements in the policies, standards, and
  guidelines...Security procedures, standards, measures, practices, and
  policies cover a number of different subject areas. - Shon Harris
  All-in-one CISSP Certification Guide pg 44-45</p>
<p>Q3</p>
<p>Which one of the following is an important characteristic of an
  information security policy?</p>
<p>A. Identifies major functional areas of information.</p>
<p>B. Quantifies the effect of the loss of the information.</p>
<p>C. Requires the identification of information owners.</p>
<p>D. Lists applications that support the business function.</p>
<p>Answer: A</p>
<p>Explaination: Information security policies area high-level plans that describe the
  goals of the procedures. Policies are not guidelines or standards, nor
  are they procedures or controls. Policies describe security in general
  terms, not specifics. They provide the blueprints for an overall
  security program just as a specification defines your next product -
  Roberta Bragg CISSP Certification Training Guide (que) pg 206</p>
</blockquote>
<p>What I want to do is that I want to transform my each question to structured data format (which you can see as follow) so that I can store them in database.</p>
<p><a href="https://i.stack.imgur.com/PSOh0.png" rel="nofollow noreferrer">organized format</a></p>
<p>I want to use Python to complete this task and I am sort of know I need to use regular expression to deal with it but I just don't know how to do.</p>
<p>Can anyone help with this? Your help would be really appreciated! Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>One idea you may consider is that the information would be a little easier to parse in a standard format like CSV or TSV.</p>
<p>Personally, I find a regex-based solution to parsing this input format hard to read.  The existing regex answer is well written, but just requires a beastly regex, and so it's not the implementation I would choose personally to solve this particular problem.  I thought it would be beneficial to add a simpler alternative answer with parsing logic based on common str functions like split, replace, and strip for removing the newlines and boilerplate text.</p>
<p>I thought this problem might also be solvable using <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer">csv.reader</a> with a custom delimiter set to <code>'\n\n'</code>, however, for whatever reason that function only supports 1-character delimiter strings.</p>
<p>You should add a few things to this example such as exception handling when the file doesn't exist, but the core is here to solve the problem at hand.  Of course you don't need to encapsulate in a class either, but it felt natural to me.</p>
<pre><code>class Question:

    def __init__(self, num, text, option_a, option_b, option_c, option_d,
                 answer, explanation):
        self.num = num
        self.text = text
        self.option_a = option_a
        self.option_b = option_b
        self.option_c = option_c
        self.option_d = option_d
        self.answer = answer
        self.explanation = explanation

    @classmethod
    def parse_input_file(cls, filename):
        """
        Parse an input file of questions delimited by double newline.

        Note: misspelling of "explanation" as "explaination" is intentionally
        preserved from asker's question.
        """
        with open(filename) as fp:
            data = fp.read()

        data = data.split('\n\n')

        questions = []
        for i in range(0, len(data), 8):
            question_data = data[i:i+8]
            question = cls(
                num=int(question_data[0].lstrip('Q')),
                text=question_data[1],
                option_a=question_data[2].lstrip('A.').strip(),
                option_b=question_data[3].lstrip('B.').strip(),
                option_c=question_data[4].lstrip('C.').strip(),
                option_d=question_data[5].lstrip('D.').strip(),
                answer=question_data[6].replace('Answer: ', '', 1),
                explanation=question_data[7].replace('Explaination: ', '', 1),
            )
            questions.append(question)

        return questions
</code></pre>
<p>For an example of using it:</p>
<pre><code>from pprint import pprint

questions = Question.parse_input_file('questions.txt')
for i in questions:
    pprint(i.__dict__)
</code></pre>
<p>Output:</p>
<pre><code>{'answer': 'D',
 'explanation': 'Policies are considered the first and highest level of '
                'documentation, from which the lower level elements of '
                'standards, procedures, and guidelines flow. This order, '
                'however, does not mean that policies are more important than '
                'the lower elements. These higher-level policies, which are '
                'the more general policies and statements, should be created '
                'first in the process for strategic reasons, and then the more '
                'tactical elements can follow. -Ronald Krutz The CISSP PREP '
                'Guide (gold edition) pg 13',
 'num': 1,
 'option_a': 'definition of the issue and statement of relevant terms.',
 'option_b': 'statement of roles and responsibilities.',
 'option_c': 'statement of applicability and compliance requirements.',
 'option_d': 'statement of performance of characteristics and requirements.',
 'text': 'All of the following are basic components of a security policy '
         'EXCEPT the'}
{'answer': 'B',
 'explanation': 'Procedures are looked at as the lowest level in the policy '
                'chain because they are closest to the computers and provide '
                'detailed steps for configuration and installation issues. '
                'They provide the steps to actually implement the statements '
                'in the policies, standards, and guidelines...Security '
                'procedures, standards, measures, practices, and policies '
                'cover a number of different subject areas. - Shon Harris '
                'All-in-one CISSP Certification Guide pg 44-45',
 'num': 2,
 'option_a': 'Encryption Security',
 'option_b': 'Procedural Security.',
 'option_c': 'Logical Security',
 'option_d': 'On-line Security',
 'text': 'Ensuring the integrity of business information is the PRIMARY '
         'concern of'}
{'answer': 'A',
 'explanation': 'Information security policies area high-level plans that '
                'describe the goals of the procedures. Policies are not '
                'guidelines or standards, nor are they procedures or controls. '
                'Policies describe security in general terms, not specifics. '
                'They provide the blueprints for an overall security program '
                'just as a specification defines your next product - Roberta '
                'Bragg CISSP Certification Training Guide (que) pg 206\n',
 'num': 3,
 'option_a': 'Identifies major functional areas of information.',
 'option_b': 'Quantifies the effect of the loss of the information.',
 'option_c': 'Requires the identification of information owners.',
 'option_d': 'Lists applications that support the business function.',
 'text': 'Which one of the following is an important characteristic of an '
         'information security policy?'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is probably more than you need.<br/>
In it's default state, it only requires  </p>
<ul>
<li>Q number  </li>
<li>Question  </li>
<li>Answer  </li>
<li>Explanation  </li>
</ul>
<p>So, you get 1 record per match.  </p>
<p><strong><em>Note - you can get the group numbers you need from the commented regex.</em></strong><br/>
And, if you want to add more possible selections beyond <em>D</em>, just clone one and add it.<br/>
(Be sure to add the letter in the exclusion class, i.e. <code>[ABCDEF..]</code>)  </p>
<p>Also, these <em>large</em> and simple regexes can be formatted/edited/compressed/parsed and stringed,<br/>
with a commercial utility like <a href="http://www.regexformat.com" rel="nofollow noreferrer">regexformat.com</a>.
 On the upside, there is a free trial version that indefinitely unlocks everything except saving to a file.  </p>
<p>This is so you can throw partials at it and see them in the database (place holders, etc...<br/>
to be completed later) </p>
<p>Of course, it handles all completed records as well.  </p>
<p><a href="https://regex101.com/r/TGkUyR/2" rel="nofollow noreferrer">https://regex101.com/r/TGkUyR/2</a></p>
<p><code>r'(?ms)^Q(\d+)\s*^((?:(?!^(?:[ABCD]\.[ ]|Answer:)).)*?)\s*(?:^A\.[ ][^\S\r\n]*((?:(?!^(?:[ABCD]\.[ ]|Answer:)).)*?)\s*)?(?:^B\.[ ][^\S\r\n]*((?:(?!^(?:[ABCD]\.[ ]|Answer:)).)*?)\s*)?(?:^C\.[ ][^\S\r\n]*((?:(?!^(?:[ABCD]\.[ ]|Answer:)).)*?)\s*)?(?:^D\.[ ][^\S\r\n]*((?:(?!^(?:[ABCD]\.[ ]|Answer:)).)*?)\s*)?^Answer:[ ]+([A-D]?)\s*^Explaination:[^\S\r\n]*((?:(?!^Q\d).)*?)\s*(?=(?:^Q\d|\Z))'</code> </p>
<p>Formatted / Explained  </p>
<pre><code> (?ms)                         # Modifiers: multi-line, dot-all

 ^ Q
 ( \d+ )                       # (1), Question Number  (required)
 \s*                           # wsp trim
 ^ 
 (                             # (2 start), The question  (required, but can be blank)
      (?:
           (?!
                ^ 
                (?: [ABCD] \. [ ] | Answer: )
           )
           . 
      )*?
 )                             # (2 end)
 \s*                           # wsp trim

 (?:
      ^ A\. [ ] [^\S\r\n]* 
      (                             # (3 start), A - choice (optional, and can be blank)
           (?:
                (?!
                     ^ 
                     (?: [ABCD] \. [ ] | Answer: )
                )
                . 
           )*?

      )                             # (3 end)
      \s*                           # wsp trim
 )?

 (?:
      ^ B\. [ ] [^\S\r\n]* 
      (                             # (4 start), B - choice  (optional, and can be blank)
           (?:
                (?!
                     ^ 
                     (?: [ABCD] \. [ ] | Answer: )
                )
                . 
           )*?

      )                             # (4 end)
      \s*                           # wsp trim
 )?
 (?:
      ^ C\. [ ] [^\S\r\n]* 
      (                             # (5 start), C  - choice  (optional, and can be blank)
           (?:
                (?!
                     ^ 
                     (?: [ABCD] \. [ ] | Answer: )
                )
                . 
           )*?

      )                             # (5 end)
      \s*                           # wsp trim
 )?
 (?:
      ^ D\. [ ] [^\S\r\n]* 
      (                             # (6 start), D - choice  (optional, and can be blank)
           (?:
                (?!
                     ^ 
                     (?: [ABCD] \. [ ] | Answer: )
                )
                . 
           )*?

      )                             # (6 end)
      \s*                           # wsp trim
 )?
 ^ Answer: [ ]+ 
 ( [A-D]? )                    # (7), Answer (required, but can be blank)

 \s*                           # wsp trim

 ^ Explaination: [^\S\r\n]* 
 (                             # (8 start), Explanation (required, but can be blank)
      (?:
           (?! ^ Q \d )
           . 
      )*?

 )                             # (8 end)
 \s*                           # wsp trim

 (?=                           # Lookahead for next record or EOS
      (?: ^ Q \d | \Z )
 )
</code></pre>
</div>
<span class="comment-copy">What have you done so far?  What isn't working?</span>
<span class="comment-copy">(a) Doing this with regex will make this more difficult than necessary. Instead just read the text file line by line and use the first few characters of each line as a guide to what field to put its contents into in the database. For instance, lines starting with 'Answer:' must obviously go into the 'Answer' field. (b) On SO, you're expected to show us code that <i>you</i> have written with specific questions about how to correct it or to make it do what you want.</span>
<span class="comment-copy">For this regex you just have to repeat the pattern you used to match A, with the others... so the <a href="https://regex101.com/r/yg075G/1" rel="nofollow noreferrer">regex</a> is pretty simple... However, I wouldn't use regex for that, do what Bill said, and it should be easier and have no errors (which could happen if they accidentally send you a string with a line break where it shouldn't be, etc..)</span>
<span class="comment-copy">This solution requires an intermediate to advanced regex. So, I think you get a pass because I don't think there are such on SO to use as an example.</span>
<span class="comment-copy">@YusonKong Feel free to accept (checkmark) and/or upvote an answer below if they've solved your question.</span>
