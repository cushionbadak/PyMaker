<div class="post-text" itemprop="text">
<p>I am calculating values(numbers) from two numbers in differing columns of a text file. Then I am iterating over multiple text files to do the same calculation. I need to write the output to different columns of a CSV file where each column corresponds to the calculations obtained from an individual text file. I more or less know how to iterate over different files but I don't know how to tell Python to write to a different column. Any guidance is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the fact that <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> provides lazy iteration to do this pretty efficiently. You can define a simple generator function that yeilds a calculation for every line of the file it is initialized with. You can also use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="nofollow noreferrer"><code>contextlib.ExitStack</code></a> to manage your open files in a single context manager:</p>
<pre><code>from contextlib import ExitStack
from csv import writer

def calc(line):
    # Ingest a line, do some calculations on it.
    # This is the function you wrote.

input_files = ['file1.txt', 'file2.txt', ...]

def calculator(file):
    """
    A generator function that will lazily apply the calculation
    to each line of the file it is initialized with.
    """
    for line in file:
        yield calc(line)

with open('output.csv', 'w') as output, ExitStack() as input_stack:
    inputs = [calculator(input_stack.enter_context(open(file))) for file in input_files]
    output_csv = writer(output)
    output_csv.wite_row(input_files)  # Write heading based on input files
    for row in zip(*inputs):
        output_csv.write_row(row)
</code></pre>
<p>The output in the CSV will be in the same order as the file names in <code>input_files</code>.</p>
</div>
<span class="comment-copy">Please post examples of the file format and expected output. Writing to a csv is easy, it's more about arranging the inputs</span>
<span class="comment-copy">zip together the calculations from each file. You can even be lazy about this if you write a generator that does the calculations line by line. Write the result to a CSV.</span>
<span class="comment-copy">Read about <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer">csv.DictReader</a> and consider the Example.</span>
<span class="comment-copy">Thanks! I'll give it a shot.</span>
