<div class="post-text" itemprop="text">
<p>Is it possible to somehow override <code>import</code> so that I can do some more sophisticated operations on a module before it gets imported?</p>
<p>As an example: I have a larger application that uses <code>matplotlib</code> for secondary features that are not vital for the overall functionality of the application. In case that <code>matplotlib</code> is not installed I just want to mock the functionality so that the import and all calls to <code>matplotlib</code> functions appear to be working, just without actually doing anything. A simple warning should then just indicate that the module is not installed, though that fact would not impair the core functionality of the application. I already have an import function that, in the case that <code>matplotlib</code> is not installed, returns a <code>MagicMock</code> object instead of the actual module which just mimics the behavior of the <code>matplotlib</code> API. </p>
<p>So, all <code>import matplotlib...</code> or <code>from matplotlib import...</code> should then be automatically overridden by the corresponding function call. I could replace all <code>import</code> and <code>from ... import</code> expressions by hand but I'd like to make but there are a lot of them. I'd rather like to have this functionality automatically by overriding <code>import</code>.</p>
<p>Is that possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way I've found is to replace the <code>__import__</code> function with your own implementation (described <a href="https://docs.python.org/3/library/functions.html#__import__" rel="nofollow noreferrer">here</a>). Then if someone tries to import <code>matplotlib</code>, you just import a different module instead:</p>
<pre><code>def _import(name, *args, **kwargs):
    if name == 'matplotlib': # if someone tries to import matplotlib...
        name = 'my_mocked_matplotlib' # ...import the mocked version instead
    return original_import(name, *args, **kwargs)

import builtins
original_import = builtins.__import__
builtins.__import__ = _import
</code></pre>
<hr/>
<p>To restrict the custom import behavior to only a few modules, you can use introspection (with the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">inspect module</a>) to find out from which module the import has been performed:</p>
<pre><code>import inspect

def _import(name, *args, **kwargs):
    if name == 'matplotlib': # if someone tries to import matplotlib...
        # find out which module is performing the import
        frame = inspect.currentframe().f_back
        module_path = frame.f_globals['__file__']

        # if the import is happening in module1 or module2, redirect it
        if module_path in ('/path/to/module1.py','/path/to/module2.py'):
            name = 'my_mocked_matplotlib' # ...import the mocked version instead

    return original_import(name, *args, **kwargs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Short answer is <strong>NO</strong>... But you could and should catch <code>ImportError</code> for when the module is not there, and handle it then. Otherwise replacing all import statements with something else is the clever thing to do.</p>
</div>
<span class="comment-copy">Is it possible to do this globally, like, for a whole huge project that consists of several modules?</span>
<span class="comment-copy">@HendrikWiese This should affect the whole project. For example if you place this code in <code>a.py</code> and then do <code>import b</code>, <code>b.py</code> will also use your custom import function. It works that way because it modifies the `builtins module, which is shared across the entire program.</span>
<span class="comment-copy">I see. I'll try that, thanks!</span>
<span class="comment-copy">Okay, one thing I've figured out about this is that it requires Python 3+. It seems I cannot do this with Python 2.7. Or is there a way?</span>
<span class="comment-copy">@HendrikWiese You can use <code>__builtins__</code> instead of <code>import builtins</code> and <code>builtins</code> in python 2. And in python 3 as well. I've updated the code.</span>
<span class="comment-copy">Alright, that's the way I've done it so far. I find it just a little cumbersome to replace all and every relevant import expression.</span>
