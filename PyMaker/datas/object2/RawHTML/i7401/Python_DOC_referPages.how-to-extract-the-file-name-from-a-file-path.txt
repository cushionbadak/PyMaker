<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>os.listdir("staging")

# Seperate filename from extension
sep = os.sep

# Change the casing
for n in os.listdir("staging"):
    print(n)
    if os.path.isfile("staging" + sep + n):
        filename_one, extension = os.path.splitext(n)
        os.rename("staging" + sep + n, "staging" + sep + filename_one.lower() + extension)

# Show the new file names
print ('\n--------------------------------\n')
for n in os.listdir("staging"):
    print (n)

# Remove the blanks, -, %, and /
for n in os.listdir("staging"):
    print (n)
    if os.path.isfile("staging" + sep + n):
        filename_zero, extension = os.path.splitext(n)
        os.rename("staging" + sep + n , "staging" + sep + filename_zero.replace(' ','_').replace('-','_').replace('%','pct').replace('/','_') + extension)

# Show the new file names
print ('\n--------------------------------\n')
for n in os.listdir("staging"):
    print (n)

"""
In order to fix all of the column headers and to solve the encoding issues and remove nulls, 
first read in all of the CSV's to python as dataframes, then make changes and rewrite the old files
"""
import os
import glob
import pandas as pd

files = glob.glob(os.path.join("staging" + "/*.csv"))

print(files)

# Create an empty dictionary to hold the dataframes from csvs
dict_ = {}

# Write the files into the dictionary
for file in files:
    dict_[file] = pd.read_csv(file, header = 0, dtype = str, encoding = 'cp1252').fillna('')
</code></pre>
<p>In the dictionary, the dataframes are named as "folder/name(csv)" what I would like to do is remove the prefix "staging/" from the keys in the dictionary. </p>
<p>How can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>If all you want to do is truncate the file paths to just the filename, you can use <a href="https://docs.python.org/3/library/os.path.html#os.path.basename" rel="nofollow noreferrer"><code>os.path.basename</code></a>:</p>
<pre><code>for file in files:
    fname = os.path.basename(file)
    dict_[fname] = (pd.read_csv(file, header=0, dtype=str, encoding='cp1252')
                      .fillna(''))
</code></pre>
<p>Example:</p>
<pre><code>os.path.basename('Desktop/test.txt')
# 'test.txt'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
pathname ='c:\\hello\\dickins\\myfile.py'
head, tail = os.path.split(pathname)
print head
print tail
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This <a href="https://shakyaabiral.wordpress.com/2016/07/15/python-extract-filename-and-extension-from-filepath/" rel="nofollow noreferrer">article</a> here worked out just fine for me</p>
<pre><code>import os
inputFilepath = 'path/to/file/foobar.txt'
filename_w_ext = os.path.basename(inputFilepath)
filename, file_extension = os.path.splitext(filename_w_ext)
#filename = foobar
#file_extension = .txt

path, filename = os.path.split(path/to/file/foobar.txt)
# path = path/to/file
# filename = foobar.txt
</code></pre>
<p>Hope it helps someone searching for this answer</p>
</div>
<div class="post-text" itemprop="text">
<p>As ColdSpeed said, you can use "os.path.basename" to truncate a file to its name, but I think what you are refering to is the ability to pycache the data?</p>
<p>For Example here is my Directory:
<a href="https://i.stack.imgur.com/Z5tv9.png" rel="nofollow noreferrer"><img alt="My Directory for the Game I'm Making Atm" src="https://i.stack.imgur.com/Z5tv9.png"/></a>
<a href="https://i.stack.imgur.com/JfVYi.png" rel="nofollow noreferrer"><img alt="In the Assets folder.." src="https://i.stack.imgur.com/JfVYi.png"/></a></p>
<p>You see the <strong>pycache</strong> folder? that initializes it as a module.
Then, you can import a file from that module (for example the staging.txt file and operate on it.) 
<a href="https://i.stack.imgur.com/aM2a7.png" rel="nofollow noreferrer"><img alt="For Example" src="https://i.stack.imgur.com/aM2a7.png"/></a>
I use the IpConfig.txt File from the assets folder level (or should be) and take a line of information out of it.</p>
<pre><code>import pygame as pyg
import sys
import os
import math
import ssl
import socket as sock
import ipaddress as ipad
import threading
import random
print("Modules Installed!")

class two:
    # Find out how to refer to class super construct
    def main(Display, SecSock, ipadd, clock):
        # I have code here that has nothing to do with the question...


    def __init__():
        print("Initializing[2]...")
        # Initialization of Pygame and SSL Socket goes here

        searchQuery = open("IpConfig.txt", 'r') #Opening the File IpConfig(Which now should open on the top level of the game files)

        step2 = searchQuery.readlines()# read the file
        ipadd = step2[6] # This is what you should have or something similar where you reference the line you want to copy or manipulate.

        main(gameDisplay, SSLSock, ipadd, clock)# Im having issues here myself - (main() is not defined it says)
        print(ipadd)
        print("Server Certificate Configuration Enabled...")








    __init__() # Start up the procedure
</code></pre>
</div>
<span class="comment-copy">thank you for the detailed response however @COLDSPEED got it right, all i needed to do was truncate the file names for insertion into a database</span>
<span class="comment-copy">I was just clarifying how you would go about reading that DB.</span>
