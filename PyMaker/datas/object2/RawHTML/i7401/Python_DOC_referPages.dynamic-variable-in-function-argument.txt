<div class="post-text" itemprop="text">
<p>Let us say I have a function like this:</p>
<pre><code>def helloWorld(**args):
    for arg in args:
        print(args[arg])
</code></pre>
<p>To call this function is easy:</p>
<pre><code>helloWorld(myMsg = 'hello, world')
helloWorld(anotherMessages = 'no, no this is hard')
</code></pre>
<p>But the hard part is that I want to dynamically name the args from variables coming from a list or somewhere else.  And I'd want for myMsg and anotherMessages to be passed from a list (for example, the hard part that I am clueless and I need help with is how to take strings into variables to be inputs of a function).</p>
<pre><code>list_of_variable_names = ['myMsg','anotherMessages']
for name in list_of_variable_names:
    helloWorld(name = 'ooops, this is not easy, how do I pass a variable name that is stored as a string in a list? No idea! help!')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a dict using the variable and then unpack while passing it to the function:</p>
<pre><code>list_of_variable_names = ['myMsg','anotherMessages']
for name in list_of_variable_names:
    helloWorld(**{name: '...'})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer"><code>**</code> syntax</a> is a dictionary unpacking.
So in your function, <code>args</code> (which is usually <code>kwargs</code>) is a dictionary.</p>
<p>Therefore, you need to pass an <strong>unpacked dictionary</strong> to it, which is what is done when <code>f(a=1, b=2)</code> is called.</p>
<p>For instance:</p>
<pre><code>kwargs = {'myMsg': "hello, world", 'anotherMessages': "no, no this is hard"}
helloWorld(**kwargs)
</code></pre>
<p>Then, you will get <code>kwargs</code> as a dictionary.</p>
<pre><code>def f(**kwargs):
    for k, v in kwargs.items():
        print(k, v)

&gt;&gt;&gt; kwargs = {'a': 1, 'b': 2}
&gt;&gt;&gt; f(**kwargs)
a 1
b 2
</code></pre>
<hr/>
<p>If you want to do so, you can call the function once for every name as well, by creating a dictionary on the fly and unpacking it, as <a href="https://stackoverflow.com/a/45168692/7051394">Moses suggested</a>.</p>
<pre><code>def f(**kwargs):
    print("call to f")
    for k, v in kwargs.items():
        print(k, v)

&gt;&gt;&gt; for k, v in {'a': 1, 'b': 2}:
...     kwargs = {k: v}
...     f(**kwargs)
...
call to f
a 1
call to f
b 2
</code></pre>
</div>
<span class="comment-copy">interesting, let me try it out</span>
<span class="comment-copy">thanks a lot, super answer!</span>
