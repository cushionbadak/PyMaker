<div class="post-text" itemprop="text">
<p>I have a local HTML file in the following link: <a href="https://pastebin.com/L3iFQgQH" rel="nofollow noreferrer">https://pastebin.com/L3iFQgQH</a></p>
<pre><code>    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://opengraphprotocol.org/schema/" xmlns:fb="http://www.facebook.com/2008/fbml"&gt;
&lt;head&gt;&lt;title&gt;
    335i | autoTRADER.ca
&lt;/title&gt;&lt;link id="ctl00_ctl00_canonical" rel="canonical" href="http://www.autotrader.ca/cars/bmw/3%20series/2013/" /&gt;&lt;meta name="viewport" content="width=device-width, height=device-height, user-scalable=0, minimum-scale=0.75, maximum-scale=1.0" /&gt;&lt;meta name="SKYPE_TOOLBAR" content="SKYPE_TOOLBAR_PARSER_COMPATIBLE" /&gt;&lt;script&gt;
var dataLayer = [
{
  'search': {
    'pageNumber': '1',
    'searchType': 'unique',
    'filterFieldsUsed': '10',
    'category': 'Cars, Trucks &amp; SUVs',
   'minPrice': 'not used',
   'maxPrice': 'not used',
   'make': 'BMW',
   'model': '3 Series',
   'new': 'yes',
   'used': 'yes',
   'CPO': 'yes',
   'distance': 'national',
   'location': 'canada',
   'searchLocation': 'advancedSearch',
   'minYear': '2013',
   'maxYear': '2013',
   'transmission': 'Automatic',
   'fuelType': 'not used',
   'exteriorColor': 'not used',
   'refinedKeywords': '335i',
   'bodyType': 'not used',
   'minKms': 'not used',
   'maxKms': 'not used',
   'damaged': 'yes',
   'dealer': 'yes',
   'privateSeller': 'yes',
   'withPrice': 'yes',
   'withPhotos': 'yes',
   'withFreeCarProof': 'not used',
   'sortOrder': 'Price: High to Low'
 },
 'lists': [
   {
     'key': 'advancedSearch',
     'vehicles': [
       {
         'make': 'BMW',
         'model': '3 Series',
         'year': '2013',
         'category': 'PassengerVehicles',
         'price': '37800',
         'condition': 'used',
         'adType': 'dealer',
         'adID': '5-33635639',
         'dealerID': '5-BS2004915125635',
         'listingPosition': 'ppl',
         'upgradeExecUpgrade': 'no',
         'upgradePL': 'no',
         'upgradeHL': 'no',
         'upgradePPL': 'no',
         'mobialsParticipation': 'no',
         'strikethrough': 'no',
         'vehicleSpecialist': 'no',
         'priceHistory': '1',
         'priceAnalysis': 'above average',
         'transparency': 'yes',
         'car360enabled': 'no',
         'province': 'BC',
         'financingPrice': 'no',
         'merchandising': 'gold'
       },
       {
         'make': 'BMW',
         'model': '3 Series',
         'year': '2013',
         'category': 'PassengerVehicles',
         'price': '33995',
         'condition': 'used',
         'adType': 'dealer',
         'ad
       }
     ]
   }
 ],
 'pageType': 'search-results',
 'mvt': null
}
];
dataLayer.push({'ShowNewCoPath': 'True'});

&lt;/script&gt;
&lt;!--Google Tag Manager --&gt;
&lt;script&gt;(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&amp;l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-K7JHZJ');&lt;/script&gt;
&lt;!-- End Google Tag Manager --&gt;
</code></pre>
<p>At the very top, There is a variable dataLayer, which is a dictionary, and it is followed by a lot of html and other things. I would like to extract just this variable and store it in a json dictionary using python. 
Right now, Im using split function, but it is very specific
Is there any method of doing it for a wider range of html files?</p>
</div>
<div class="post-text" itemprop="text">
<p>One option is to first extract the script contents using, for example, <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" rel="nofollow noreferrer"><code>BeautiulSoup</code></a> HTML parser, then use a JavaScript parser like <a href="https://pypi.python.org/pypi/slimit" rel="nofollow noreferrer"><code>slimit</code></a> or <a href="https://github.com/PiotrDabkowski/pyjsparser" rel="nofollow noreferrer"><code>pyjsparser</code></a> to extract the <code>dataLayer</code> variable value, then post-process it a little bit to make JSON-loadable. Then, load into a Python list via <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow noreferrer"><code>json.loads()</code></a>:</p>
<p>Working example using <code>slimit</code>:</p>
<pre><code>from ast import literal_eval
import json

from bs4 import BeautifulSoup

from slimit import ast
from slimit.parser import Parser
from slimit.visitors import nodevisitor


data = """
    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://opengraphprotocol.org/schema/" xmlns:fb="http://www.facebook.com/2008/fbml"&gt;
&lt;head&gt;&lt;title&gt;
    335i | autoTRADER.ca
&lt;/title&gt;&lt;link id="ctl00_ctl00_canonical" rel="canonical" href="http://www.autotrader.ca/cars/bmw/3%20series/2013/" /&gt;&lt;meta name="viewport" content="width=device-width, height=device-height, user-scalable=0, minimum-scale=0.75, maximum-scale=1.0" /&gt;&lt;meta name="SKYPE_TOOLBAR" content="SKYPE_TOOLBAR_PARSER_COMPATIBLE" /&gt;&lt;script&gt;
var dataLayer = [
{
  'search': {
    'pageNumber': '1',
    'searchType': 'unique',
    'filterFieldsUsed': '10',
    'category': 'Cars, Trucks &amp; SUVs',
   'minPrice': 'not used',
   'maxPrice': 'not used',
   'make': 'BMW',
   'model': '3 Series',
   'new': 'yes',
   'used': 'yes',
   'CPO': 'yes',
   'distance': 'national',
   'location': 'canada',
   'searchLocation': 'advancedSearch',
   'minYear': '2013',
   'maxYear': '2013',
   'transmission': 'Automatic',
   'fuelType': 'not used',
   'exteriorColor': 'not used',
   'refinedKeywords': '335i',
   'bodyType': 'not used',
   'minKms': 'not used',
   'maxKms': 'not used',
   'damaged': 'yes',
   'dealer': 'yes',
   'privateSeller': 'yes',
   'withPrice': 'yes',
   'withPhotos': 'yes',
   'withFreeCarProof': 'not used',
   'sortOrder': 'Price: High to Low'
 },
 'lists': [
   {
     'key': 'advancedSearch',
     'vehicles': [
       {
         'make': 'BMW',
         'model': '3 Series',
         'year': '2013',
         'category': 'PassengerVehicles',
         'price': '37800',
         'condition': 'used',
         'adType': 'dealer',
         'adID': '5-33635639',
         'dealerID': '5-BS2004915125635',
         'listingPosition': 'ppl',
         'upgradeExecUpgrade': 'no',
         'upgradePL': 'no',
         'upgradeHL': 'no',
         'upgradePPL': 'no',
         'mobialsParticipation': 'no',
         'strikethrough': 'no',
         'vehicleSpecialist': 'no',
         'priceHistory': '1',
         'priceAnalysis': 'above average',
         'transparency': 'yes',
         'car360enabled': 'no',
         'province': 'BC',
         'financingPrice': 'no',
         'merchandising': 'gold'
       },
       {
         'make': 'BMW',
         'model': '3 Series',
         'year': '2013',
         'category': 'PassengerVehicles',
         'price': '33995',
         'condition': 'used',
         'adType': 'dealer'
       }
     ]
   }
 ],
 'pageType': 'search-results',
 'mvt': null
}
];
dataLayer.push({'ShowNewCoPath': 'True'});

&lt;/script&gt;
&lt;!--Google Tag Manager --&gt;
&lt;script&gt;(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&amp;l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-K7JHZJ');&lt;/script&gt;
&lt;!-- End Google Tag Manager --&gt;"""


soup = BeautifulSoup(data, "html.parser")
script = soup.find("script", text=lambda text: text and "dataLayer" in text).get_text()

parser = Parser()
tree = parser.parse(script)

data_layer = next(node.initializer.items[0].to_ecma().replace("'", '"')
                  for node in nodevisitor.visit(tree)
                  if isinstance(node, ast.VarDecl) and node.identifier.value == 'dataLayer')

print(json.loads(data_layer))
</code></pre>
<hr/>
<p>Another option, probably more practical but less reliable overall, is to use <em>regular expressions</em> - match the desired object, extract it from the HTML string, post-process and load with a <code>json</code> module into a Python object. Working snippet:</p>
<pre><code>import json
from pprint import pprint
import re


html = """your HTML here (same as above)"""

match = re.search(r"var dataLayer = (\[.*?\]);$", html, re.MULTILINE | re.DOTALL)
if match:
    data = match.group(1).replace("'", '"')
    data = json.loads(data)
    pprint(data)
</code></pre>
</div>
<span class="comment-copy">Have you tried loading it into BeautifulSoup? If you then call script_tag = soup.script, you're almost there...</span>
