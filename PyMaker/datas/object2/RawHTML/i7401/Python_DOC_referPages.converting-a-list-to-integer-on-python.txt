<div class="post-text" itemprop="text">
<p>I was trying to run a code that I wrote
the code reads lines on txt file
so my text file looks like (i've 20 lines)</p>
<blockquote>
<p>['39', '40', '39', '38', '35', '38', '39', '39', '42', '37', '40', '41', '37', '39', '39', '40', '38', '40', '39', '40']</p>
<p>['39', '40', '39', '38', '36', '39', '40', '39', '42', '38', '40',
  '41', '38', '39', '39', '40', '38', '40', '39', '41']</p>
<p>['39', '40', '40', '38', '36', '39', '40', '39', '43', '38', '40',
  '41', '38', '39', '39', '40', '38', '40', '39', '41']</p>
</blockquote>
<p>i wrote this script to have a new file that looks like this</p>
<blockquote>
<p>39 40 39 38 35 38 39 39 42 37 40 41 37 39 39 40 38 40 39 40</p>
<p>39 40 39 38 36 39 40 39 42 38 40 41 38 39 39 40 38 40 39 41</p>
<p>39 40 40 38 36 39 40 39 43 38 40 41 38 39 39 40 38 40 39 41</p>
</blockquote>
<p>the script that i wrote is this one </p>
<pre><code>    #!/usr/bin/python3
# -*- coding: utf-8 -*-

fichier=open("data.txt", "r")
#resultat=open("data_entier.txt", "w")

j=0;

while j &lt; 20:
    lignes= fichier.readline()
    for i in range(len(lignes)):
         lignes[i] = int(lignes[i])

    print(lignes))

    j+=1

fichier.close()
</code></pre>
<p>the error that I get is this one</p>
<blockquote>
<p>ValueError: invalid literal for int() with base 10: '['</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that when you read in <code>readline</code> from your file, you will have a line </p>
<pre><code>"['39', '40', '39', '38', '35', '38', '39', '39', '42', '37', '40', '41', '37', '39', '39', '40', '38', '40', '39', '40']\n"
</code></pre>
<p>As you can see, the first item in your string is <code>[</code>. So, you don't actually have the <em>numbers</em> structured as you are expecting. Instead, since you seem to already have a <em>list</em> structure represented as a string, consider using <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">literal_eval</a> from <code>ast</code>:</p>
<pre><code>&gt;&gt;&gt; d = literal_eval(d)
&gt;&gt;&gt; d
['39', '40', '39', '38', '35', '38', '39', '39', '42', '37', '40', '41', '37', '39', '39', '40', '38', '40', '39', '40']
</code></pre>
<p>Now you actually have a <em>list</em> of strings. Now you can proceed modifying <em>that</em> to your ints. As a simple process, you can then do something like this: </p>
<pre><code>&gt;&gt;&gt; converted_to_ints = map(int, d)
&gt;&gt;&gt; print(list(converted_to_ints))
[39, 40, 39, 38, 35, 38, 39, 39, 42, 37, 40, 41, 37, 39, 39, 40, 38, 40, 39, 40]
</code></pre>
<p>Note, when it comes to using <code>map</code> in Python 3 you get a <em>map object</em>, which returns an iterator. So, if you need the <em>list</em>, this is why <code>list</code> is called when printing. You can read about it here: </p>
<p><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#map</a></p>
<h1>Area of Improvement</h1>
<p>Based on the contents of the file you are reading, it would be <em>best</em> to not structure the data like this. Instead, what should be done is not setting the data as a list representation in to the file, but just the contents of the list. This avoids having to perform the above solution, and instead, a simple:</p>
<pre><code>with open('file.txt') as f:
  data = f.read().splitlines() # will remove newline character
  for line in data:
      # perform operations
</code></pre>
<p>would suffice. </p>
</div>
<div class="post-text" itemprop="text">
<p>You are <strong>not</strong> evaluating the line as a list: every line is just a string that happens to start with a <code>'['</code>. So you are iterating over the <strong>characters</strong> of the line.</p>
<p>If the file is like you describe it however, you can easily <em>evaluate</em> the line with <a href="https://docs.python.org/2/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><strong><code>ast.literal_eval</code></strong></a>:</p>
<pre><code>from ast import literal_eval

with open("data.txt", "r") as fichier:
    for line,_ in zip(fichier,range(20)):
        the_list = literal_eval(line)
        the_list = [int(x) for x in the_list]
        print(the_list))
</code></pre>
<p>We here used <code>zip</code> as a way to obtain the first 20 lines. If you want to process <em>all</em> the lines, you can simply use:</p>
<pre><code>with open("data.txt", "r") as fichier:
    for line in fichier:
        the_list = literal_eval(line)
        the_list = [int(x) for x in the_list]
        print(the_list))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're reading a line, so you can simply replace the chars you don't want.</p>
<pre><code>string = "['39', '40', '39', '38', '35', '38', '39', '39', '42', '37', '40', '41', '37', '39', '39', '40', '38', '40', '39', '40']"
s = string.replace(',','').replace('[','').replace(']','').replace("'","")
print s
#output: 39 40 39 38 35 38 39 39 42 37 40 41 37 39 39 40 38 40 39 40
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although in this case the <code>ast.literal_eval</code> solutions presented by idjaw and Willem Van Onsem seem as an obvious best fit, let me present another solution:</p>
<pre><code>numbers_text = "['39', '40', '39', '38', '35', '38', '39', '39', '42', '37', '40', '41', '37', '39', '39', '40', '38', '40', '39', '40']"
</code></pre>
<p>Instead of chaining multiple <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>replace</code></a> operations, you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a> to get rid of multiple characters in one pass, by providing the third argument to <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer"><code>str.maketrans</code></a>:</p>
<blockquote>
<p>If there is a third argument, it must be a string, whose characters will be mapped to <code>None</code> in the result.</p>
</blockquote>
<p>Afterwards, we can either use a simple <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to convert the separate numbers from <code>str</code> to <code>int</code>:</p>
<pre><code>numbers_int = [int(x) for x in numbers_text.translate(str.maketrans("","","[',]")).split()]
</code></pre>
<p>Or make use of <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>:</p>
<pre><code>numbers_int = list(map(int, numbers_text.translate(str.maketrans("","","[',]")).split()))
</code></pre>
<p>Both will result in a new <code>list</code> of <code>int</code>:</p>
<pre><code>[39, 40, 39, 38, 35, 38, 39, 39, 42, 37, 40, 41, 37, 39, 39, 40, 38, 40, 39, 40]
</code></pre>
</div>
<span class="comment-copy">Looks like all you want to do is replace every occurence of <code>[</code>, <code>'</code>, <code>,</code> and <code>]</code> with an empty string, correct? For that, you don't need to convert anything to <code>int</code>.</span>
<span class="comment-copy">yea exactlly, how can i do that ?</span>
<span class="comment-copy">where did <code>data.txt</code> come from? It seems you choose to dump lists there initially, rather than the format you actually wanted...</span>
<span class="comment-copy">@DrissAourir <a href="https://stackoverflow.com/questions/6116978/python-replace-multiple-strings" title="python replace multiple strings">stackoverflow.com/questions/6116978/â€¦</a></span>
<span class="comment-copy">@Chris_Rands Good job breaking down the XY. :) At this point, yes, the best suggestion here would be to first generate the data in to the file properly to not have to face this kind of issue. Ultimately your data should have just been a dump of the numbers without their <i>list</i> representations in to the file.</span>
<span class="comment-copy">thank you i will check this out right now</span>
<span class="comment-copy">thank you i will check this out</span>
<span class="comment-copy">If you are going to go down that route, and knowing what each line looks like, you could have just done <code>string[1:-2]</code>. This will remove the first <code>[</code> and the trailing <code>]\n</code>.</span>
<span class="comment-copy">nit: you will most likely have a trailing \n in the string at first.</span>
<span class="comment-copy">@idjaw: yes, but it will be removed by <code>split()</code>: <code>"1 2 3\n".split()</code> -&gt; <code>['1', '2', '3']</code></span>
<span class="comment-copy">Ah right. Based on your solution that is correct. I had <code>split(',')</code> in my head, which would not have done that.</span>
