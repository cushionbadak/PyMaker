<div class="post-text" itemprop="text">
<p>I have this piece of code</p>
<pre><code>for j in range(length_termlist):    
    searchterm=''.join(termlist[j])    
    if any(searchterm in s for s in text[k]):
        do something
</code></pre>
<p>termlist is a list that contains my search terms. These i want to find in the second list (text) which contains multiple sentences. This works so far but the accuracy isn't good enough, because it finds any string combination. Now I rather would like to find the search term and a wildcard at the end for considering plural.</p>
<p>Example for code now: search term "car" is detected in word "carry".</p>
<p>How it should be: search term "car" is only detected in words "car", "cars" ..."car?" or something like that.</p>
<p>Is there any easy addition to my code above or is another search method necessary? </p>
<p>Edit: Aim in general is to find texts where the search terms appear. A little variance (ex. plural) helps to identify more text with same semantic context.</p>
</div>
<div class="post-text" itemprop="text">
<p>The re module can do this</p>
<pre><code>regex = re.compile(r'\b%ss?\b' % re.escape(searchterm))
if any(regex.search(s) for s in text[k]) ...
</code></pre>
</div>
<span class="comment-copy">Welp, car* would match carry. If you want to detect different inflections of a word, you'd need something more powerful like NLTK.</span>
<span class="comment-copy">What exactly is <i>"something like that"</i>? If you can give some more examples of words that should and shouldn't match, we might be able to figure something out. Regex looks like a good candidate for this sort of thing.</span>
<span class="comment-copy">@Rawing I believe OP wants to detect different inflections of the same word, I believe regex cannot help.</span>
<span class="comment-copy">obviously @coldspeed is right, i just wanted to say the last character can be different. I think therefore exist the "?"-wildcard?</span>
<span class="comment-copy">@rawing To keep it easy I just want to consider any variance in matching for the plural. In most cases it would be enough, if there is a variance of one character (one additional, one missing, one different at any place...). Examples partner/partners, program/programs. To search the programming language C it should match an outstanding letter "c". So for more complexity i could imagine to match any search terms of a length about 3 characters with a variance of one unmatching character. But that's just a nice to have, considering the plural should be the basic</span>
<span class="comment-copy">Can you please explain what "\b%ss?\b" means?</span>
<span class="comment-copy">First <code>r"\b%ss?\b" % 'car'</code> produces <code>"\bcars?\b"</code>. This is a string in the regular expression language. <code>\b</code> means that we're at the beginning or at the end of a word, and <code>s?</code> means that we accept an optional <code>s</code>. It's all in the official documentation <a href="https://docs.python.org/3/library/re.html?highlight=re#regular-expression-syntax" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">thank you, this works fine and the results are now better :)</span>
