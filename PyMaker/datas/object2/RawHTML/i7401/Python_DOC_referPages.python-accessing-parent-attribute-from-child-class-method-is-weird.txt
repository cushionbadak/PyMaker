<div class="post-text" itemprop="text">
<pre><code>import random
import sys
import os
class Animal:
    __name = ""
    __height = 0
    __weight = 0
    __sound = ""

    def __init__(self, name, height, weight, sound):
        self.__name = name
        self.__height = height
        self.__weight = weight
        self.__sound = sound

    def toString(self):
        return "{} is {} cm tall and {} kilograms and say {}".format(self.__name,
                                                                     self.__height,
                                                                     self.__weight,
                                                                     self.__sound)

class Dog(Animal):
    __owner = ""
    def __init__(self, name, height, weight, sound, owner):
        self.__owner = owner
        super(Dog, self).__init__(name, height, weight, sound)

    def toString(self):
        return "{} is {} cm tall and {} kilograms and say {} His owner is {}".format(self.__name,
                                                                                      self.__height,
                                                                                      self.__weight,
                                                                                      self.__sound,
                                                                                      self.__owner)

spot = Dog("Spot", 53, 27, "Ruff", "Derek")
print(spot.toString())
</code></pre>
<p>When ran, this code print:</p>
<pre><code>    return "{} is {} cm tall and {} kilograms and say {} His owner is {}".format(self.__name,
AttributeError: 'Dog' object has no attribute '_Dog__name'
</code></pre>
<p>But when I put the toString method in Dog class to the side more, like so:</p>
<pre><code>class Dog(Animal):
    __owner = ""
    def __init__(self, name, height, weight, sound, owner):
        self.__owner = owner
        super(Dog, self).__init__(name, height, weight, sound)

        def toString(self):
            return "{} is {} cm tall and {} kilograms and say {} His owner is {}".format(self.__name,
                                                                                      self.__height,
                                                                                      self.__weight,
                                                                                      self.__sound,
                                                                                      self.__owner)
</code></pre>
<p>It prints properly, saying:</p>
<p>Spot is 53 cm tall and 27 kilograms and say Ruff</p>
<p>Why is this?</p>
<p>Edit: I just realized that the thing that printed was Animal's toString method, not Dog's toString method.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't class attributes as default values or as "declarations", and don't use <code>__</code>-prefixed names unless you understand <em>why</em> you might need to use such names. Also, you don't need <code>toString</code>; <code>__str__</code> serves the same purpose and is called automatically as needed.</p>
<pre><code>class Animal:
    def __init__(self, name, height, weight, sound):
        self.name = name
        self.height = height
        self.weight = weight
        self.sound = sound

    def __str__(self):
        return "{} is {} cm tall and {} kilograms and say {}".format(self.name,
                                                                     self.height,
                                                                     self.weight,
                                                                     self.sound)

class Dog(Animal):
    def __init__(self, name, height, weight, sound, owner):
        super(Dog, self).__init__(name, height, weight, sound)
        self.owner = owner


    def __str__(self):
        s = super(Dog, self).__str__()
        return "{} His owner is {}".format(s, self.owner)

spot = Dog("Spot", 53, 27, "Ruff", "Derek")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Private attributes are just that... Private. There is no concept of Protected variables in Python. By restricting the variables with the double underscore, you prevent even subclasses from accessing them.</p>
</div>
<span class="comment-copy">Why would you do each attribute private?</span>
<span class="comment-copy">I'm watching a python tutorial and the guy in the tutorial was able to make it work with private attributes. link to tutorial: <a href="https://www.youtube.com/watch?v=N4mEzFDjqtA&amp;feature=youtu.be&amp;t=32m4s" rel="nofollow noreferrer">youtube.com/â€¦</a></span>
<span class="comment-copy">It's a bad tutorial... Check the comments. You are not the only one who is facing this bug</span>
<span class="comment-copy">I agree with @pythad. The video uses poor terminology,  teaches very unidiomatic Python, and makes incorrect assumptions about how classes really work. I recommended reading the <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">Python documentation for a brief overview of classes</a>,  and watching a better tutorial such as <a href="https://www.youtube.com/watch?v=ZDa-Z5JzLYM" rel="nofollow noreferrer">this one</a>. I have not seen all of the series, but the author general seems to teach class and OOP concepts correctly.</span>
