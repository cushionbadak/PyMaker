<div class="post-text" itemprop="text">
<p>I want replicate a small array to specific length array</p>
<p>Example:</p>
<pre><code>var = [22,33,44,55] # ==&gt; len(var) = 4
n = 13
</code></pre>
<p>The new array that I want would be: </p>
<pre><code>var_new = [22,33,44,55,22,33,44,55,22,33,44,55,22]
</code></pre>
<p>This is my code:</p>
<pre><code>import numpy as np
var = [22,33,44,55]
di = np.arange(13)
var_new = np.empty(13)
var_new[di] = var
</code></pre>
<p>I get error message:</p>
<blockquote>
<p>DeprecationWarning: assignment will raise an error in the future, most likely because your index result shape does not match the value array shape. You can use <code>arr.flat[index] = values</code> to keep the old behaviour.</p>
</blockquote>
<p>But I get my corresponding variable:</p>
<pre><code>var_new
array([ 22.,  33.,  44.,  55.,  22.,  33.,  44.,  55.,  22.,  33.,  44.,
    55.,  22.])
</code></pre>
<p>So, how to solve the error? Is there an alternative?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are better ways to replicate the array, for example you could simply use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.resize.html" rel="nofollow noreferrer"><code>np.resize</code></a>:</p>
<blockquote>
<p>Return a new array with the specified shape.</p>
<p>If the new array is larger than the original array, then the new array is filled with repeated copies of <code>a</code>. [...]</p>
</blockquote>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; var = [22,33,44,55]
&gt;&gt;&gt; n = 13
&gt;&gt;&gt; np.resize(var, n)
array([22, 33, 44, 55, 22, 33, 44, 55, 22, 33, 44, 55, 22])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, you don't get an error, but a warning, that <code>var_new[di] = var</code> is deprecated if <code>var_new[di]</code> has dimensions that do not match <code>var</code>.</p>
<p>Second, the error message tells what to do: use</p>
<pre><code>var_new[di].flat = var
</code></pre>
<p>and you do not get a warning any more and it is guaranteed to work.</p>
<hr/>
<p>Another, easy way to do this if <code>numpy</code> is not needed is to just use <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a>:</p>
<pre><code>&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; var = [22, 33, 44, 55]
&gt;&gt;&gt; list(<a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer">it.islice</a>(<a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer">it.cycle</a>(var), 13))
[22, 33, 44, 55, 22, 33, 44, 55, 22, 33, 44, 55, 22]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Copy the array (called lists in python) with [:] because they are mutable. The python short cut is then just to multiply the copy and add one more
element. </p>
<pre><code>&gt;&gt;&gt; var = [22, 33, 44, 55]
&gt;&gt;&gt; n = 3
&gt;&gt;&gt; newlist = var[:]*n + var[:1]
</code></pre>
<p>gives the 13 elements you want.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>var = [22,33,44,55]
n = 13
</code></pre>
<p>Repeating a list (or any other iterable) can be done without <code>numpy</code>, using <code>itertools</code>'s <code>cycle()</code> and <code>islice()</code> functions</p>
<pre><code>from itertools import cycle, islice
var_new = list(islice(cycle(var),0,n)
</code></pre>
</div>
<span class="comment-copy">This is unusual, a request that actually matches <code>np.resize</code>!</span>
<span class="comment-copy">This make a list of 13 lists</span>
<span class="comment-copy">@hpaulj, you are right, fixed it</span>
