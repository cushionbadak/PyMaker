<div class="post-text" itemprop="text">
<p>I have a set of constants in a shell script that exists solely for other projects to pull in via sourcing, i.e.:</p>
<pre><code>. /home/test/constants.sh`
</code></pre>
<p>or</p>
<pre><code>source /home/test/constants.sh`
</code></pre>
<p>I now need to make these values accessible to <code>scons</code> scripts. I figured the easiest way to write-once-use-everywhere would be to:</p>
<ol>
<li>Convert the shell script to a python script, so that <code>scons</code> can import it directly.</li>
<li>Have the python script either generate a shell script with the appropriate variables, or possibly have the shell script execute/source the python script to import the necessary variables.</li>
</ol>
<p>What is the best way for a shell script to "import" variables (i.e. key/value pairs) from a python script? Should the python script simply have a function that dumps the key/value pairs as strings, or is there a more sophisticated way to keep a shell script and python script full of constants in-sync?</p>
<p>Also, in the future, simply GNU Makefile projects may need these variables too. Can both shell scripts and Makefiles "import" variables from an external script/program?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Questions</strong>:  ... both shell scripts and Makefiles "import" variables from an external script/program?</p>
</blockquote>
<p>Use the smallest common Possibility, a Configuration File with <code>key=value</code> Pairs.<br/>
This could be used from both <strong>Python Script</strong> and <code>Shell Script</code>.  </p>
<blockquote>
<p><strong>Note</strong>: Use own Namespace <code>MY_PROJECT_</code> not to overwrite used Environment Vars.  </p>
</blockquote>
<p><code>constants</code></p>
<pre><code>MY_PROJECT_ROOT=/home/test/
</code></pre>
<p>Usage <code>Shell Script</code>:</p>
<pre><code>. /home/test/constants
echo $MY_PROJECT_ROOT
&gt;&gt;&gt;/home/test/
</code></pre>
<p>Usage <code>Python Script</code>:</p>
<p>Start Script:</p>
<pre><code>#!/bin/bash
. /home/test/constants
python my_python_script.py
</code></pre>
<p><code>my_python_script.py</code>:</p>
<pre><code>print (os.environ['MY_PROJECT_ROOT'])
&gt;&gt;&gt;/home/test/
</code></pre>
<p>You can edit the <code>python</code> Script and add <code>. /home/test/constants</code> to it, so that the Environment Vars are always set for all Python Scripts.  </p>
<p>Second, you can add <code>. /home/test/constants</code> to your <code>bash.rc</code> <strong>no</strong> additional Import are required, but needs restart your Shell if  <code>. /home/test/constants</code> changes.</p>
</div>
<span class="comment-copy">You can try loading the values into environment variables.</span>
<span class="comment-copy">Make the file to write the output/variables into a json file...import the file from the other scripts...</span>
<span class="comment-copy">or a config file, using the <a href="https://docs.python.org/3/library/configparser.html" rel="nofollow noreferrer"><code>configparser</code></a> module.</span>
<span class="comment-copy">When you say "..other projects to pull in via sourcing", do you mean you have shell scripts which source it, or do users source it and then run the tools, or something else?</span>
<span class="comment-copy">@bdbaddog The former: shell scripts source it.</span>
<span class="comment-copy">Very nice. Thanks!</span>
