<div class="post-text" itemprop="text">
<p>Do we have any through which we can take single line as well as multi- line list input in Python?
Like in C++ we have :- </p>
<pre><code>for(i=0;i&lt;5;i++)
{
  cin&gt;&gt;A[i]; //this will take single line as well as multi-line input .
}
</code></pre>
<p>Now in Python we have :-</p>
<pre><code>l=list(map(int,input().strip().split())) //for single line 
           &amp;
l=list()
for i in range of(0,5):
      x=int(input())
      l.append(x) //for multi-line input
</code></pre>
<p>So my Question is do we have any python code which can take single as well as multi line input just the we we have in C++?</p>
</div>
<div class="post-text" itemprop="text">
<p>Re-inventing the square wheel is easy:</p>
<pre><code>def m_input(N):
    if(N &lt; 1): return []
    x = input().strip().split()[:N]
    return x + m_input(N - len(x))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Per the docs, <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input()</code></a> reads a single line. </p>
<p>Minimal example with multi-line 'input'.</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; lines = sys.stdin.readlines() # Read until EOF (End Of 'File'), Ctrl-D
1 # Input
2 # Input
3 # Input. EOF with `Ctrl-D`.
&gt;&gt;&gt; lines # Array of string input
['1\n', '2\n', '3\n']
&gt;&gt;&gt; map(int, lines) # "functional programming" primitive that applies `int` to each element of the `lines` array. Same concept as a for-loop or list comprehension. 
[1, 2, 3]
</code></pre>
<p>If you're uncomfortable using <code>map</code>, consider a list compression:</p>
<pre class="lang-py prettyprint-override"><code>&gt;&gt;&gt; [int(l) for l in lines]
[1, 2, 3]
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/11664443/raw-input-across-multiple-lines-in-python">Raw input across multiple lines in Python</a></span>
<span class="comment-copy">I'd say slightly different use cases. The minimal example he provides (as opposed to none) is also superior IMHO.</span>
