<div class="post-text" itemprop="text">
<p>Let's say I'm not allowed to use libraries.
How do I go about calculating the product of indexes in a list.
Let's assume none of the integers are 0 or less.
The problem gets harder as I'm trying to calculate the indexes vertically.</p>
<pre><code>bigList = [[1, 2, 3, 4, 5],
           [1, 2, 3, 4, 5],
           [1, 2, 3, 4, 5],
           [1, 2, 3, 4, 5],
           [1, 2, 3, 4, 5]]
</code></pre>
<p>With numpy the solution for my problem would be:</p>
<pre><code>import numpy as np   
print([np.prod(l) for l in zip(*bigList)])

[1, 32, 243, 1024, 3125]
</code></pre>
<p>However without it my solution is much more chaotic:</p>
<pre><code>rotateY = [l for l in zip(*bigList)]
productList = [1]* len(bigList)
count = 0
for l in rotateY:
    for i in l:
        productList[count] *= i
    count += 1
print(productList)

[1, 32, 243, 1024, 3125]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>And why not simply:</p>
<pre><code>productList = []
for i in range(len(bigList[0]):
    p = 1
    for row in bigList:
        p *= row[i]
    productList.append(p)
</code></pre>
<p>Alternatively, a small improvement over your solution:</p>
<pre><code>productList = [1]* len(bigList[0])
for row in bigList:
    for i, c in enumerate(row):
        productList[i] *= c
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate over each row getting each row's <em>n</em>-th element, and multiplying each element together:</p>
<pre><code>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; 
&gt;&gt;&gt; def mul_lst(lst):
    return reduce(lambda x, y: x * y, lst)

&gt;&gt;&gt; 
&gt;&gt;&gt; bigList = [[1, 2, 3, 4, 5],
       [1, 2, 3, 4, 5],
       [1, 2, 3, 4, 5],
       [1, 2, 3, 4, 5],
       [1, 2, 3, 4, 5]]
&gt;&gt;&gt; 
&gt;&gt;&gt; [mul_lst([row[i] for row in bigList]) for i in range(len(bigList))]
[1, 32, 243, 1024, 3125]
</code></pre>
<p>If you cannot use <em>any</em> libraries, including <code>functools</code>, you can write the logic for the <code>mul_lst</code> function manually:</p>
<pre><code>&gt;&gt;&gt; def mul_lst(lst):
    product = lst[0]
    for el in lst[1:]:
        product *= el
    return product

&gt;&gt;&gt; mul_lst([3, 3])
9
&gt;&gt;&gt; mul_lst([2, 2, 2, 2, 2])
32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can <em>transpose</em> the nested list and then use <code>reduce</code> (a Python built-in) in Python 2.x on each element (list) for a one-liner -</p>
<pre><code>&gt;&gt;&gt; [reduce(lambda a,b: a*b, i) for i in map(list, zip(*bigList))]
[1, 32, 243, 1024, 3125]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a quick recursive solution</p>
<pre><code>def prod(x):
  """ Recursive approach with behavior of np.prod over axis 0 """
  if len(x) is 1:
      return x
  for i, a_ in enumerate(x.pop()):
      x[0][i] *= a_
  return prod(x)
</code></pre>
</div>
<span class="comment-copy">This is a very clear and well worded question. I would point out that with the axis argument the numpy approach can be simplified further to <code>np.prod(bigList, 0)</code>.</span>
<span class="comment-copy">"<b>Let's say I'm not allowed to use libraries.</b>" - I would say it includes <code>functools</code>…</span>
<span class="comment-copy">@Błotosmętek I took that as meaning libraries like NumPy or Pandas. But I'll update with a version that doesn't use <code>functools</code>.</span>
<span class="comment-copy">@Błotosmętek Fixed.</span>
<span class="comment-copy"><i>" <code>reduce</code> (a Python built-in)"</i> - Note that <code>reduce</code> was <i>only</i> a builtin in Python 2. <a href="https://docs.python.org/3/whatsnew/3.0.html#builtins" rel="nofollow noreferrer">In Python 3, it was removed in favor of <code>functools.reduce()</code></a>.</span>
