<div class="post-text" itemprop="text">
<p>I have a list of strings that read from file. Each element is a line of file.
I want to have an array of this string that have same length. I want to find the longest string and reformat other strings as long as longest string (with space at the end of them).
Now I find the longest one. but I don't know how can I reformat other strings. Can anybody help me please?</p>
<pre><code>with open('cars') as f:
    lines = f.readlines()
lines = [line.rstrip('\n') for line in open('cars')]
max_in=len(lines[0])
for l in lines:
    print (str(len(l))+" "+str(max_in))
    if max_in &lt; len(l):
        max_in=len(l)
print max_in
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Starting with this:</p>
<pre><code>In [546]: array = ['foo', 'bar', 'baz', 'foobar']
</code></pre>
<p>Find the length of the largest string using <code>max</code>:</p>
<pre><code>In [547]: max(array, key=len) # ignore this line (it's for demonstrative purposes)
Out[547]: 'foobar'

In [548]: maxlen = len(max(array, key=len))
</code></pre>
<p>Now, use a list comprehension and pad left:</p>
<pre><code>In [551]: [(' ' * (maxlen - len(x))) + x for x in array]
Out[551]: ['   foo', '   bar', '   baz', 'foobar']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you have your list of strings already read from the file, you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.rjust" rel="nofollow noreferrer"><code>str.rjust()</code></a> to pad your strings left:</p>
<pre><code>&gt;&gt;&gt; lines = ['cat', 'dog', 'elephant', 'horse']
&gt;&gt;&gt; maxlen = len(max(lines, key=len))
&gt;&gt;&gt; 
&gt;&gt;&gt; [line.rjust(maxlen) for line in lines]
['     cat', '     dog', 'elephant', '   horse']
</code></pre>
<p>You can also change the character used in the padding:</p>
<pre><code>&gt;&gt;&gt; [line.rjust(maxlen, '0') for line in lines]
['00000cat', '00000dog', 'elephant', '000horse']
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>1) find max len:</p>
<pre><code>max_len = max(len(el) for el in lines)
</code></pre>
<p>2) add spaces to the ends of others strings:</p>
<pre><code>lines = [" "*(max_len - len(el)) + el for el in lines]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your reading the file two times. The first time, the data is never used. You can use <code>max</code> to find the maximum, and format, to add the spaces:</p>
<pre><code>with open('cars') as f:
    lines = [line.rstrip('\n') for line in f]
width = max(map(len, lines))
lines = ["{0:&gt;{1}s}".format(line, width) for line in lines]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With Thanks from all answers I edit my code as this:</p>
<pre><code>with open('cars') as f:
    lines = f.readlines()
lines = [line.rstrip('\n') for line in open('cars')]
max_line_len = len(max(lines, key=len))
new_lines = [line.ljust(max_line_len) for line in lines]
</code></pre>
</div>
<span class="comment-copy">Can you please provide an example input and desired output?</span>
<span class="comment-copy">Would you like to pad left or right?</span>
<span class="comment-copy">@ChristianDean I want add space to left.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ of course.</span>
<span class="comment-copy">@KarimPazoki Cheers, glad I could help.</span>
<span class="comment-copy">@ChristianDean All you need to do is <code>string.rjust(len('elephant'))</code> and it'd work. ;)</span>
<span class="comment-copy"><code>lines = ['cat', 'dog', 'elephant', 'horse']; print([x.rjust(len('elephant')) for x in lines])</code></span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ <i>sigh</i>. Man I feel like an idiot. How did I miss the obvious solution right in front me! I keep switching this around, trying different methods, using <code>abs</code>. The sad part though, is that I've done exactly what you said before, but for some odd reason I couldn't remember it this time. Anyways, thanks. I guess I'll re-post my answer. Doesn't feel like I deserve the rep now though :P</span>
<span class="comment-copy">@ChristianDean It's a good solution, and more succinct than mine. Trust me you deserve it :) +1'd it</span>
<span class="comment-copy">Nice :)) . Thank you.</span>
<span class="comment-copy">Thanks a lot :)</span>
