<div class="post-text" itemprop="text">
<p>Below program, launches subprocess and communicate via pipes,</p>
<pre><code>import json
import math
import subprocess
import sys
import time

if __name__ == '__main__':
    with open(sys.argv[1], 'r') as f:
        websites = f.read().splitlines()
    numberOfProcesses = int(sys.argv[2])
    perProcess = math.ceil(len(websites) / numberOfProcesses)
    for i in range(numberOfProcesses):
        sites = websites[i*perProcess:(i+1)*perProcess]
        with open("/tmp/list-{}.txt".format(i), "w") as f:
            f.write("\n".join(sites))
    t0 = time.time()
    processes = []
    for i in range(numberOfProcesses):
        p = subprocess.Popen(
            ["python3.6", "naive-checker.py", "/tmp/list-{}.txt".format(i)]
        )
        processes.append(p)
    # Gather the results
    for process in processes:
        result = process.communicate()
        print('result:',result)
    t1=time.time()
    print("Total time getting website status took {0:1f} seconds", format(t1-t0))
</code></pre>
<hr/>
<p><code>result</code> shows <code>(None, None)</code> instead of <code>(stdout, stderr)</code>, where each subprocess is,</p>
<pre><code>import json
import requests
import sys
import time


def website_statuses(websites):
    statuses = {}
    for website in websites:
        response = requests.get(website)
        status = response.status_code
        if not statuses.get(status):
            statuses[status] = 0
        statuses[status] += 1
    return statuses


if __name__ == '__main__':
    with open(sys.argv[1], 'r') as f:
        websites = f.read().splitlines()
    t0 = time.time()
    print('From this subprocess, status code: ', json.dumps(website_statuses(websites)))
    t1 = time.time()
    print("For this subprocess, getting website statuses took {0:.1f} seconds".format(t1-t0))
</code></pre>
<hr/>
<p><code>list.txt</code> is file of websites.</p>
<p>Output:</p>
<pre><code>$ python3.6 dummy.py list.txt 3
 From this subprocess, status code:  {"200": 11}
 For this subprocess, getting website statuses took 5.3 seconds
 From this subprocess, status code:  {"200": 9}
 For this subprocess, getting website statuses took 6.8 seconds
 From this subprocess, status code:  {"200": 11}
 For this subprocess, getting website statuses took 9.8 seconds
 result: (None, None)
 result: (None, None)
 result: (None, None)
 Total time getting website status took {0:1f} seconds 10.265882730484009
$
</code></pre>
<hr/>
<p><strong>Question:</strong></p>
<p>Why <code>result</code> shows tuple of <code>NoneType</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should look at <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer">the documentation</a>:</p>
<blockquote>
<p><code>communicate()</code> returns a tuple <code>(stdout_data, stderr_data)</code>. The data will be strings if streams were opened in text mode; otherwise, bytes.</p>
<p>Note that if you want to send data to the processâ€™s stdin, you need to create the <code>Popen</code> object with <code>stdin=PIPE</code>. Similarly, to get anything other than <code>None</code> in the result tuple, you need to give <code>stdout=PIPE</code> and/or <code>stderr=PIPE</code> too.</p>
</blockquote>
<p>As you did not specify any output pipe while creating your <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="nofollow noreferrer">Popen</a> object, the returned values are two <code>None</code> while calling <code>communicate()</code>.</p>
<p>You may try to fix it with:</p>
<pre><code>p = subprocess.Popen(
    ["python3.6", "naive-checker.py", "/tmp/list-{}.txt".format(i)],
     stdout=subprocess.PIPE, stderr=subprocess.PIPE
)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer"><code>Popen.communicate</code></a> documentation:</p>
<blockquote>
<p>Similarly, to get anything other than <code>None</code> in the result tuple, you need to give <code>stdout=PIPE</code> and/or <code>stderr=PIPE</code> too.</p>
</blockquote>
</div>
<span class="comment-copy">But where is communication through the pipes?</span>
<span class="comment-copy">We are not Google. We are not the documentation. <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer">Read the docs.</a></span>
