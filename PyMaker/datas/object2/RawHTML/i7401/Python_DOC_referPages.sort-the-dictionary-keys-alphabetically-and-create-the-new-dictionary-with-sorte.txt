<div class="post-text" itemprop="text">
<p>I have dictionary</p>
<pre><code>my_dict={'VAR': '0x4225', 'CAR': '0x4100', 'SAR': '0x4005', 'AAR': '0x4220'}
</code></pre>
<p>I want it sort the keys alphabetically and </p>
<pre><code>my_dict_alphabetical_order ={'AAR': '0x4220', 'CAR': '0x4100', 'SAR': '0x4005', 'VAR': '0x4225'}
</code></pre>
<p>How can I do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>collections.OrderedDict</code></a> - a dictionary that remembers the order in which the keys were added:</p>
<pre><code>&gt;&gt;&gt; OrderedDict(sorted(my_dict.items()))
OrderedDict([('AAR', '0x4220'), ('CAR', '0x4100'), ('SAR', '0x4005'), ('VAR', '0x4225')])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>EDIT: This answer is rubbish, but check the comments below for actual python knowledge.</p>
<p>IPython "does it" automatically. </p>
<pre><code>In [1]: my_dict={'VAR': '0x4225', 'CAR': '0x4100', 'SAR': '0x4005', 'AAR': '0x4220'}

In [2]: my_dict
Out[2]: {'AAR': '0x4220', 'CAR': '0x4100', 'SAR': '0x4005', 'VAR': '0x4225'}
</code></pre>
<p>The thing is, why would you want to do that with an actual dictionary? The values are meant to be accessed thanks to their keys, not their nonexistant index.</p>
</div>
<span class="comment-copy">Dictionaries are not ordered data structures. Use a <code>collections.OrderedDict</code>, or another ordered structure.</span>
<span class="comment-copy">I got the feeling that the fact that CPython 3.6's dict are ordered as an implementation detail is extremely confusing about what a dictionary is supposed to be.</span>
<span class="comment-copy">OrderedDict doesn't return the dict, does it?</span>
<span class="comment-copy">@Amit <code>OrderedDict</code> is a subclass of <code>dict</code>. The operation here is a bit tricky: <code>my_dict.items()</code> returns an iterator of the (key, value) pairs of the dictionary; <code>sorted()</code> sorts these <b>couples</b> by alphanumerical order (ie the first value of the couples is compared, then the second), and since the first value is a string, these are sorted by alphanumerical order as well. <code>sorted</code> returns an iterable, that the <code>OrderedDict</code> constructor takes as parameter to construct the instance. What this line gives you is not a <code>dict</code> object, but an <code>OrderedDict</code> object.</span>
<span class="comment-copy">To be exact, <code>OrderedDict</code> extends <code>idct</code>, so what you get <i>is</i> a dictionary, but it's more. Anyway, the consequence is that you can use it as a dictionary, and more specifically, you can call its keys like you usually do, with <code>myOrderedDict['foo']</code>.</span>
<span class="comment-copy"><i>"It does it automatically"</i> - No, I'm afraid it doesn't. A dictionary is an unordered collection of key value pairs. The dictionaries doesn't sort the keys automatically because dictionary cannot be sorted.</span>
<span class="comment-copy">Not true. A dictionary is unordered.</span>
<span class="comment-copy">That's IPython (or Jupyter) fooling you. They overwrite the way dictionaries are displayed by <a href="https://github.com/ipython/ipython/blob/6.1.0/IPython/lib/pretty.py#L606" rel="nofollow noreferrer">"displaying" it in <code>sorted</code> order</a>.</span>
<span class="comment-copy">@MSeifert Thank you for clearing up my misunderstanding, I thought this was default behaviour and didn't see what more could be asked for. Leaving this up for educative purposes :)</span>
<span class="comment-copy">I want output to be sorted and stored in dict.  I know the nature of dictionary that the order of elements while the dictionary was being created is different from the order in which they are actually stored and displayed.</span>
