<div class="post-text" itemprop="text">
<p>I am reading a file in python and getting the lines from it. 
However, after printing out the values I get, I realize that after each line there is a trailing \ at the end. 
I have looked at <a href="https://stackoverflow.com/questions/9347419/python-strip-with-n">Python strip with \n</a> and tried everything in it but nothing has removed the trailing . 
For example</p>
<p>0048\</p>
<p>0051\</p>
<p>0052\</p>
<p>0054\</p>
<p>0056\</p>
<p>0057\</p>
<p>0058\</p>
<p>0059\</p>
<p>How can I get rid of these slashes?</p>
<p>Here is the code I have so far</p>
<pre><code>for line in f:
    line = line.replace('\\n', "")
    line = line.replace('\\n', "") 
    print(line)
</code></pre>
<p>I've even tried using regex</p>
<pre><code>strings = re.findall(r"\S+", f.read())
</code></pre>
<p>But nothing has worked so far. </p>
</div>
<div class="post-text" itemprop="text">
<p>You're probably confused about what is in the lines, and as a result you're confusing me too. <code>'\n'</code> is a single newline character, as shown using <code>repr()</code> (which is your friend when you want to know what a value is exactly). A line typically ends with that (the exception being the end of file which might not). That does not contain a backslash; that backslash is part of a <a href="https://docs.python.org/3/reference/lexical_analysis.html#literals" rel="nofollow noreferrer">string literal</a> escape sequence. Your replace argument of <code>'\\n'</code> contains two characters, a backslash followed by the letter n. This wouldn't match a <code>'\n'</code>; the easiest way to remove the newline specifically is to use <a href="https://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="nofollow noreferrer"><code>str.rstrip('\n')</code></a>. The line reading itself will guarantee that there's only up to one newline, and it is at the end of the string. Frequently we use strip() with no argument instead as we don't want whitespace either. </p>
<p>If your string really does contain backslash, you can process that as well, whether using replace, strip, re or some other string processing. Just keep in mind that it might be used for escape sequences not only at string literal level but at <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expression</a> level too. For instance, <code>re.sub(r'\\$', '', str)</code> will remove a backslash from the end of a string; the backslash itself is doubled to not mean a special sequence in the regular expression, and the string literal is raw to not need another doubling of the backslashes. </p>
</div>
<span class="comment-copy">I tried using line = line.rstrip() however I still get the backslash at the end. I think line = line.rstrip() just removes the trailing spaces.</span>
<span class="comment-copy"><code>line.replace('\\n', "")</code>? Why are you trying to remove only backslashes that are followed by an <code>n</code> character?</span>
<span class="comment-copy">If it were a newline character, the <code>print(line)</code> would print a newline character, not a backslash. And something like <code>print(repr(line))</code> would print the <code>n</code> in addition to the backslash. And the <code>re.findall(r"\S+", f.read())</code> would've worked. So pretty sure it's really just a backslash.</span>
<span class="comment-copy">Either way a repr() call would clarify the situation, and that re.sub would be able to pick that backslash out if it is a trailing backslash.</span>
<span class="comment-copy">I mean it would address specifically a trailing backslash. Unlike a replace, it doesn't touch any other backslashes, and it even leaves the <code>'\n'</code> alone if there is one. That's likely not necessary, but I have an incomplete picture of what needs to be done.</span>
<span class="comment-copy">Oh, sorry, I just realized you're not talking about the OP's <code>re.findall</code> that I mentioned (I thought you responded to that) but about your own <code>re.sub</code>.</span>
