<div class="post-text" itemprop="text">
<p>I have a 2D list of characters in this fashion:</p>
<pre><code>a = [['1','2','3'],
     ['4','5','6'],
     ['7','8','9']]
</code></pre>
<p>What's the most pythonic way to print the list as a whole block? I.e. no commas or brackets:</p>
<pre><code>123
456
789
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a lot of ways. Probably a <code>str.join</code> of a mapping of <code>str.join</code>s:</p>
<pre><code>&gt;&gt;&gt; a = [['1','2','3'],
...          ['4','5','6'],
...          ['7','8','9']]
&gt;&gt;&gt; print('\n'.join(map(''.join, a)))
123
456
789
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like this:</p>
<pre class="lang-py prettyprint-override"><code>import os

array = [['1','2','3'],
         ['4','5','6'],
         ['7','8','9']]
print(os.linesep.join(map(''.join, array)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're looking for <em>Pythonic</em> then you surely need a generator comprehension:</p>
<pre><code>print('\n'.join(''.join(i) for i in array))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Best way in my opinion would be to use <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print</code></a> function. With <code>print</code> function you won't require any type of joining and conversion(if all the objects are not strings).</p>
<pre><code>&gt;&gt;&gt; a = [['1','2','3'],
...      ['4', 5, 6],   # Contains integers as well.
...      ['7','8','9']]
...

&gt;&gt;&gt; for x in a:
...     print(*x, sep='')
...
...
123
456
789
</code></pre>
<p>If you're on Python 2 then print function can be imported using <code>from __future__ import print_function</code>.</p>
</div>
<span class="comment-copy">Oh right! Arrays, lists and arraylists... always screwing me up!</span>
<span class="comment-copy">@Jean-FrançoisFabre thank you kindly...</span>
<span class="comment-copy">Always here to try to improve an already good answer :) could be worth a bench to compare <code>join(map(''</code> vs <code>join([''.join(x) for x in a])</code>. In the latter, the outer <code>join</code> knows the size of the list and the items and allocates the output string in one go.</span>
<span class="comment-copy">@Jean-FrançoisFabre yeah, if performance really were an issue, probably materializing into a <code>list</code> will be faster. Likely, this code won't be performance critical. From the point of view of style and ease, I would be OK with this.</span>
<span class="comment-copy">If memory isn't a concern, the either the above or maybe <code>print('\n'.join(list(map(''.join, a))))</code> if you are on Python 3. In any event, you can just benchmark with a couple large lists using the <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a> module. Indeed, the "Basic examples" in the docs are very similar to your situation...</span>
<span class="comment-copy">in the case of <code>join</code>, passing a list comprehension instead is faster because <code>join</code> creates one anyway (needs that to pre-compute the size): <code>'\n'.join([''.join(i) for i in array])</code> even if it's uglier :)</span>
<span class="comment-copy">@Jean-FrançoisFabre Yup, <a href="https://github.com/python/cpython/blob/master/Objects/stringlib/join.h#L22" rel="nofollow noreferrer">here's where the conversion happens</a>.</span>
<span class="comment-copy">Thanks for that @Jean-FrançoisFabre, I didn't know that. OTOH, the OP didn't ask for the fastest method. ;-)</span>
