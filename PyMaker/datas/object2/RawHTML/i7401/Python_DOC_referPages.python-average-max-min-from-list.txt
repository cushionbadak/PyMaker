<div class="post-text" itemprop="text">
<p>so I have a list like this:</p>
<pre><code>kesto = ['3m 24s', '45s', '1h 2m 40s']
</code></pre>
<p>I need to find an average, min and max of these.
I have tried:</p>
<pre><code>max_value = max(kesto)
min_value = min(kesto)
avg_value = sum(kesto)/len(kesto)
</code></pre>
<p>but of course it doesn't work because these are not numbers. and they have "m" and "s"  behind them.</p>
<p><strong>EDIT:</strong> This code works fine, but it only returns the first value it gets.
for example if there is a "h" and a "m" it returns only the "h"
so 1h 20min and 1h 15min would be "3600" both.</p>
<pre><code>            def parse_time(s):
                    s = s.split()
                    total = 0
                    for cl in s:
                            if cl[-1] == 'd':
                                total += int(cl[:-1]) * 60 * 60 * 24
                            if cl[-1] == 'h':
                                total += int(cl[:-1]) * 60 * 60
                            if cl[-1] == 'm':
                                total += int(cl[:-1]) * 60
                            if cl[-1] == 's':
                                total += int(cl[:-1])
                            return total
            kesto2 = [parse_time(s) for s in kesto]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is my solution for the first part of converting the strings to usable seconds values, think it works well</p>
<pre><code>kesto = ['3m 24s', '45s', '1h 2m 40s']

def parse_time(s):
    s = s.split()
    total = 0
    for cl in s:
        if cl[-1] == 'h':
            total += int(cl[:-1]) * 60 * 60
        elif cl[-1] == 'm':     
            total += int(cl[:-1]) * 60
        elif cl[-1] == 's':
            total += int(cl[:-1])
    return total

kesto2 = [parse_time(s) for s in kesto] 
</code></pre>
<p>Results in kesto2 = [204, 45, 3760] which are the times in seconds. From there you can find your statistics pretty easily.</p>
</div>
<div class="post-text" itemprop="text">
<p>Create a function that converts those strings to numbers, then use this function:</p>
<pre><code>def conv(x):
    (m, s) = x.replace('m', '').replace('s', '').split()
    return 60 * int(m) + int(s)

max_value = max(kesto, key=conv)
min_value = min(kesto, key=conv)
avg_value = sum(map(conv, kesto))/len(kesto)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you make a function that convert your values in seconds.<br/>
For example "3m 24s" is 204 seconds.<br/>
I help you with the function's signature:</p>
<pre><code>def converter(value):
</code></pre>
<p>After you finished your function, use</p>
<pre><code>max_value = max(kesto, key=converter)
min_value = min(kesto, key=converter)
</code></pre>
<p>and so on...</p>
</div>
<div class="post-text" itemprop="text">
<p>The code below converts the time to seconds and adds them to a new list called <code>kestoS</code>, since they are all the same units, now you can easily sort them. </p>
<p>First the minutes are separates by using <code>split()</code> which separates the list when an 'm' is seen. I only take the first value hence <code>[0]</code>. The seconds are obtained by taking the character that occur after a space up to an 's'. At the end I total the seconds and add them to <code>kestoS</code>.</p>
<p>This solution is not limited by the number of digits the seconds or the minutes have.</p>
<pre><code>kestoS =[]
for time in kesto:
    minutes = time.split('m')[0]
    seconds = time.[time.find(' ') + 1: time.find('s')]
    kestoS.append((minutes*60)+seconds)
max_value = max(kestoS)
min_value = min(kestoS)
avg_value = sum(kestoS)/len(kestoS)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you could parse those entries with <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer"><code>strptime</code></a> and then convert to <a href="https://docs.python.org/3/library/datetime.html#datetime.timedelta" rel="nofollow noreferrer"><code>timedelta</code></a> objects. these can be added and divided by integers:</p>
<pre><code>from datetime import datetime, timedelta

NULL_TIMEDELTA = timedelta()
kesto = ['3m 24s', '45s', '1h 2m 40s']

def to_timedelta(strg):
    if 'h' in strg:
        tme = datetime.strptime(strg, '%Hh %Mm %Ss').time()
    elif 'm' in strg:
        tme = datetime.strptime(strg, '%Mm %Ss').time()
    else:
        tme = datetime.strptime(strg, '%Ss').time()
    dte = datetime.combine(datetime.min, tme)  # need a datetime object
    td = dte - datetime.min                    # to create timedelta object
    return td

timedeltas = [to_timedelta(item) for item in kesto]
max_value = max(timedeltas)
min_value = min(timedeltas)
avg_value = sum(timedeltas, NULL_TIMEDELTA)/len(timedeltas)

print(max_value)  # 1:02:40
print(min_value)  # 0:00:45
print(avg_value)  # 0:22:16.333333
</code></pre>
<p>note you have to initialize the <code>sum</code> with <code>NULL_TIMEDELTA = timedelta()</code>. the default is <code>0</code> - but <code>int + timedelta</code> is not defined.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>s=0
n = []
for l in li:
   s = (60*int(l[0]))+int(l[3:4])
   n.append(s)
</code></pre>
<p><code>n</code> is your desired list.</p>
</div>
<div class="post-text" itemprop="text">
<p>hope this will help</p>
<pre><code>import re 
kesto = ['3m 24s', '1m 5s', '2m 40s']
kseto_total = []
for k in kesto:
    # here split the two values and remove the m and s from string
    minuite,second =k.replace('m','').replace('s','').split(' ')
    # convert the string into int value
    minuite=int(minuite)
    second = int(second)
    # calculating the total value and append into the new list
    kseto_total.append(minuite*60+second)
# applying max, min and calculate average
max_value = max(kseto_total)
min_value = min(kseto_total)
avg_value = sum(kseto_total)//len(kseto_total)
print(kesto)
# printing the result into converting minute and secondd
print(max_value//60,'m',max_value%60,'s\n',
      min_value//60,'m',min_value%60,'s\n',
      avg_value//60,'m',avg_value%60,'s')
</code></pre>
<p><strong>Update</strong></p>
<pre><code>def format_string(time):
    k1 = ''
    k2 = ''
    k3 = ''
    if 'h' in time:
        k1 = time
        pass
    else:
        k1 = '0h ' + k
    if 'm' in k1:
        k2 = k1
        pass
    else:
        k2 = '0m ' + k1
    if 's' in k2:
        k3 = k2
        pass
    else:
        k3 = ' 0s' + k2
    return k3
</code></pre>
<p>Here you call the function for string formating. and then you can oparate as comment describe. string formatting can be done in efficient way. Here is the only a simple solution.</p>
</div>
<span class="comment-copy"><code>3m 24s = 204</code> convert them to int</span>
<span class="comment-copy">yes i know i have to convert them to int but how?</span>
<span class="comment-copy">works. but for me for example 8m 46s is 480 and 8m 10s is 480.</span>
<span class="comment-copy">so it works. but it doesn't work like you said :D</span>
<span class="comment-copy">Just tried it and got 526 and 490 respectively for the strings '8m 46s' and '8m 10s'. Are you sure you copied it correctly?</span>
<span class="comment-copy">had pressed tab there :D. works fine. sorry for the trouble</span>
<span class="comment-copy">No problem, glad it works for you :)</span>
<span class="comment-copy">Note that I assumed number of minutes &lt;10m.</span>
<span class="comment-copy">thanks. this seems like the best answer. I have hours in the list tho.</span>
<span class="comment-copy">so apply math for calculating and for splitting use another <code>.replace()</code> as your string pattern. Happy codding :)</span>
<span class="comment-copy">hour,minute,second =k.replace('h','').replace('m','').replace('s','').split (' '),      ValueError: not enough values to unpack (expected 3, got 2)  it expects that it has h, m, s in every item in the list. need to do some sort of if statement so it doesn't give error, because some of the items only have "s" or have "m" and "s" or have "h" and "m" and "s"</span>
<span class="comment-copy">in your <code>list</code> every <code>string pattern</code> should like this <code>2h 4m 12s</code>.because you splitting string into three values.</span>
<span class="comment-copy">well they aren't :D. they are like ['1h 30m 2s', '43s', '40m 20s']</span>
