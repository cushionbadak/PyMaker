<div class="post-text" itemprop="text">
<p>I am creating a Python package with a command-line interface that uses the subcommand pattern: <code>kevlar count</code>, <code>kevlar partition</code>, and so on. The CLI works wonderfully as it is, and now I'm trying to add the CLI to my Sphinx documentation. In searching for a solution, I came across <a href="https://pythonhosted.org/sphinxcontrib-autoprogram/" rel="nofollow noreferrer">sphinxcontrib-autoprogram</a> which seems to do exactly what I want, even explicitly handling subcommands. But when I execute the sphinx build, I get the following error.</p>
<pre><code>sphinx-build -b html -d _build/doctrees   . _build/html
Running Sphinx v1.6.3
loading pickled environment... not yet created
building [mo]: targets for 0 po files that are out of date
building [html]: targets for 5 source files that are out of date
updating environment: 5 added, 0 changed, 0 removed
reading sources... [ 20%] cli
usage: sphinx-build [-h] [-v] [-l F] cmd ...
sphinx-build: error: argument cmd: invalid choice: 'html' (choose from 'reaugment', 'dump', 'novel', 'collect', 'mutate', 'assemble', 'filter', 'partition', 'count', 'localize')
make[1]: *** [html] Error 2
make: *** [doc] Error 2
</code></pre>
<p>It seems like the sphinx extension is not only creating the argparse object (expected), but is also calling <code>parse_args()</code> on it (unexpected). The "invalid" <code>html</code> argument comes from the sphinx command-line build invocation, but is being mistaken somewhere as one of the subcommands from my library's CLI.</p>
<p>My syntax seems to match the sphinxcontrib-autoprogram documentation.</p>
<pre><code>.. autoprogram:: cli:parser
   :prog: kevlar
</code></pre>
<p><strong>What could be causing this behavior?</strong></p>
<hr/>
<p>I'm not sure if these details are relevant to the issue, but in case they are:</p>
<ul>
<li>the parser is defined in <a href="https://github.com/dib-lab/kevlar/blob/7668a05b156e246c50996e6944e7031fb30bec1a/kevlar/cli/__init__.py" rel="nofollow noreferrer"><code>kevlar/cli/__init__.py:parser()</code></a></li>
<li>the subparsers for each command are defined in dedicated files in <a href="https://github.com/dib-lab/kevlar/tree/7668a05b156e246c50996e6944e7031fb30bec1a/kevlar/cli" rel="nofollow noreferrer">kevlar/cli/</a> (for example <a href="https://github.com/dib-lab/kevlar/blob/7668a05b156e246c50996e6944e7031fb30bec1a/kevlar/cli/count.py" rel="nofollow noreferrer">kevlar/cli/count.py</a>)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>First, ensure your program uses <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a>, which is a requirement for <code>autoprogram</code>:</p>
<blockquote>
<p>scans <code>argparse.ArgumentParser</code> object, and then expands it into a set of <code>.. program::</code> and <code>.. option::</code> directives.</p>
</blockquote>
<p>Second, the syntax you used might not be correct.  It looks like you copy-pastad from the first example instead of reading its <a href="https://pythonhosted.org/sphinxcontrib-autoprogram/#directive-autoprogram" rel="nofollow noreferrer">usage</a>.  Specifically:</p>
<pre><code>.. autoprogram:: module:parser
</code></pre>
<p><code>module</code> is the dotted import name of the module, and <code>parser</code> is a variable that refers to an <code>argparse.ArgumentParser</code> object or a Python expression that creates and returns one.</p>
<p>Thus in your case, assuming that your <code>parser()</code> creates and returns an <code>argparse.ArgumentParser</code>, your syntax would be something like this or close to it:</p>
<pre><code>.. autoprogram:: kevlar.cli:parser()
    :prog: kevlar
</code></pre>
<p>The hard part is figuring out the exact, correct <code>module:parser</code> substitution.</p>
<p>For comparing against another example, see the <a href="https://github.com/Pylons/pyramid/blob/1.9-branch/pyramid/scripts/pcreate.py" rel="nofollow noreferrer">source program</a>, source <a href="https://github.com/Pylons/pyramid/blob/1.9-branch/docs/pscripts/pcreate.rst" rel="nofollow noreferrer">reST file</a>, and <a href="https://docs.pylonsproject.org/projects/pyramid/en/latest/pscripts/pcreate.html" rel="nofollow noreferrer">rendered HTML</a> of the Pyramid documentation of <code>pcreate</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should load the <code>argparse</code> instance in a separate module that create the same <code>argparse</code> instance but doesn't execute the parser itself. Or your module could detect that it was loaded within autoprogram and exit after the <code>argparse</code> instance was constructed.</p>
<p>For example the PoC-Library uses a very huge <code>argparse</code> command line parser with lots of sub-parsers. The front-end script is this: <a href="https://github.com/VLSI-EDA/PoC/blob/master/py/PoC.py?ts=2" rel="nofollow noreferrer">py/PoC.py</a></p>
<p>The docs directory contains a dummy front-end, that triggers an instantiation of <code>argparse</code>, but aborts after its construction.</p>
<p><strong>Code to dummy load PoC:</strong></p>
<pre><code>from sys import path as sys_path
sys_path.append("../py")

from PoC import PileOfCores

# entry point
parser = PileOfCores(False, False, False, True, sphinx=True).MainParser
</code></pre>
<p>Source: <a href="https://github.com/VLSI-EDA/PoC/blob/master/docs/PoCSphinx.py?ts=2" rel="nofollow noreferrer">docs/PoCSphinx.py</a></p>
<p><strong>Code to load and abort if loaded by Sphinx:</strong></p>
<pre><code>def __init__(self, debug, verbose, quiet, dryRun, sphinx=False):
    # Call the initializer of ILogable
    # --------------------------------------------------------------------------
    if quiet:      severity = Severity.Quiet
    elif debug:    severity = Severity.Debug
    elif verbose:  severity = Severity.Verbose
    else:          severity = Severity.Normal

    logger = Logger(severity, printToStdOut=True)
    ILogable.__init__(self, logger=logger)

    # Call the constructor of the ArgParseMixin
    # --------------------------------------------------------------------------
    description = dedent("""\
        This is the PoC-Library Service Tool.
        """)
    epilog = "Pile-of-Cores"

    class HelpFormatter(RawDescriptionHelpFormatter):
        def __init__(self, *args, **kwargs):
            kwargs['max_help_position'] = 25
            super().__init__(*args, **kwargs)

    ArgParseMixin.__init__(self, description=description, epilog=epilog, formatter_class=HelpFormatter, add_help=False)
    if sphinx: return
</code></pre>
<p>Source: <a href="https://github.com/VLSI-EDA/PoC/blob/master/py/PoC.py?ts=2#L191-L215" rel="nofollow noreferrer">py/PoC.py</a></p>
<p>The class PileOfCores implements a property to return the main-parser object <code>MainParser</code>, which is stored in the variable <code>parser</code> expected by <code>autoprogram</code>.</p>
</div>
<span class="comment-copy">I'm not sure if it helps, but this problem reminds me of <a href="https://stackoverflow.com/q/6912025/407651">stackoverflow.com/q/6912025/407651</a> (which is about optparse rather than argparse).</span>
<span class="comment-copy">"The hard part is figuring out the exact, correct <code>module:parser</code> substitution." Umm, the error message makes it pretty clear that the correct function is being called. The problem is that the <code>ArgumentParser</code> object seems to be <i>executed</i> rather than <i>inspected</i>.</span>
