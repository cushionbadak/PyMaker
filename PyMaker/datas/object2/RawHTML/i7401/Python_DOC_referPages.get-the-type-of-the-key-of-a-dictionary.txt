<div class="post-text" itemprop="text">
<p>Is there a "clean" way to take the type of the keys of a dictionary in python3?</p>
<p>For example, I want to decide if one of this dictionaries has keys of type <code>str</code>:</p>
<pre><code>d1 = { 1:'one', 2:'two', 5:'five' }
d2 = { '1':'one', '2':'two', '5':'five' }
</code></pre>
<p>There is several ways to achieve this, for example, using some as:</p>
<pre><code>isinstance(list(d2.keys())[0], type('str'))
</code></pre>
<p>But this is quite annoying because <code>d2.keys()</code> is not indexable, so you need to convert to a it into a list just to extract the value of a key.</p>
<p>So has python3 something as <code>get_key_type(d2)</code>? 
If not, is there a better (cleaner) way to ask if the key of a dictionary is of type <code>str</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If i understood your question right, the cleanest way i know to get types of all keys in a dict is :</p>
<pre><code>types1 = [type(k) for k in d1.keys()]
types2 = [type(k) for k in d2.keys()]
</code></pre>
<p>or if you want to have all the unique types you can use:</p>
<pre><code>types1 = set(type(k) for k in d1.keys())
types2 = set(type(k) for k in d2.keys())
</code></pre>
<p>like that you'll know if there is a single or multiple types. (Thanks @Duncan)</p>
<p>this returns lists with types of keys found in respective dicts:</p>
<p>o/p:</p>
<pre><code>[&lt;class 'int'&gt;, &lt;class 'int'&gt;, &lt;class 'int'&gt;]
[&lt;class 'str'&gt;, &lt;class 'str'&gt;, &lt;class 'str'&gt;]
</code></pre>
<p>However, if you're asking about the type of <code>d2.keys()</code> it's:</p>
<pre><code>&lt;class 'dict_keys'&gt;
</code></pre>
<p>Hope this was somehow helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>d1.keys()</code> returns <code>&lt;class 'dict_keys'&gt;</code> type objects which is iterable but you can not index it like lists</p>
<pre><code>&gt;&gt;&gt; d1 = { 1:'one', 2:'two', 5:'five' }
&gt;&gt;&gt; d1.keys
&lt;built-in method keys of dict object at 0x7f59bc897288&gt;
&gt;&gt;&gt; d1.keys()
dict_keys([1, 2, 5])
&gt;&gt;&gt; type(d1.keys())
&lt;class 'dict_keys'&gt;
&gt;&gt;&gt; [i for i in d1.keys()]
[1, 2, 5]
&gt;&gt;&gt; [i for i in d1.keys() if isinstance(i, int)]
[1, 2, 5]
</code></pre>
<p>Also just repeating what you said</p>
<pre><code>&gt;&gt;&gt; d1.keys()[0]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'dict_keys' object does not support indexing
</code></pre>
<p>Also Check <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">this</a> out</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to find out if your dictionary has only string keys you could simply use:</p>
<pre><code>&gt;&gt;&gt; set(map(type, d1)) == {str}
False

&gt;&gt;&gt; set(map(type, d2)) == {str}
True
</code></pre>
<p>The <code>set(map(type, ...))</code> creates a set that contains the different types of your dictionary keys:</p>
<pre><code>&gt;&gt;&gt; set(map(type, d2))
{str}
&gt;&gt;&gt; set(map(type, d1))
{int}
</code></pre>
<p>And <code>{str}</code> is a literal that creates a set containing the type <code>str</code>. The equality check works for sets and gives <code>True</code> if the sets contain exactly the same items and <code>False</code> otherwise.</p>
</div>
<span class="comment-copy"><code>&lt;class 'dict_keys'&gt;</code> is the type of d1.keys() so i hope that you got my point</span>
<span class="comment-copy">Please don't add the answer to the question itself. Instead, upvote/accept the correct answer (like you already did).</span>
<span class="comment-copy">Ok, your answer shows me that I had a concept error. In python a dictionary can mix keys of several types, so you can have <code>d1 = { 1:'one', '2':'two'}</code> and there is no way to check "the type of the key", but "the types of the keys"</span>
<span class="comment-copy">oh now I see your point, yeah your comment is right, here is a <a href="https://www.tutorialspoint.com/python/python_dictionary.htm" rel="nofollow noreferrer">link</a> that may also help.</span>
<span class="comment-copy">Better might be: <code>type1 = set(type(k) for k in d1)</code> and the same for d2. Then you can quickly determine whether all keys are one type or any key is the desired type.</span>
<span class="comment-copy">yeah i like the idea @Duncan, edited</span>
<span class="comment-copy">The answer of @Duncan open many nice pieces of code as: "Select the entries in the dictionary whose key is of type('str')" <code>{k:d[k] for k in d if type(k) == type('str')}</code>. Another good one is: "How to convert all keys in the dictionary to type str": <code>{str(k):d[k] for k in d }</code></span>
<span class="comment-copy">You are right saying d1.keys() is iterable, so I have corrected the question. But you don't answer how to determine the type of each value of d1.keys() without converting it into a list, then extracting a value, then checking the type.</span>
<span class="comment-copy">check out the edit</span>
