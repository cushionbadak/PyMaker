<div class="post-text" itemprop="text">
<p>I've created a basic Python port scanner which allows me to scan an IP address or hostname, and can specify particular ports, or define a range of ports to scan. My code is as follows:</p>
<pre><code># import modules used in port scanner
import optparse
from socket import *
from threading import *

# connect-scan function, deals with connecting to the host / determining if 
ports are open / closed, takes arguments tgtHost, tgtPort
def connScan(tgtHost, tgtPort):
    try:
        connSkt = socket(AF_INET, SOCK_STREAM)
        connSkt.connect((tgtHost, tgtPort))
        connSkt.send('\r\n')

        result = connSkt.recv(100)
        # prints result if port is open
        print '[+] ' + str(tgtPort) + '/tcp open'

    except:
        # prints result if port is closed
        print '[-] ' + str(tgtPort) + '/tcp closed'

    finally:
        connSkt.close()

# port-scan function, takes arguments tgtHost, tgtPorts 
def portScan(tgtHost, tgtPorts):
    try:
        # tries to get target IP address
        tgtIP = gethostbyname(tgtHost)
    except:
        # if unsuccesful, prints out following result
        print '[-] cannot resolve ' + tgtHost + ': unknown host'
        return

    try:
        # tries to get target address
        tgtName = gethostbyaddr(tgtIP)
        print '\n[+] scan results for: ' + tgtName[0]
    except:
        print '\n[+] scan results for: ' + tgtIP
    # sets default time out to 1
    setdefaulttimeout(1)
    # for every port in tgtPorts
    for tgtPort in tgtPorts:
    # creates thread, target is connScan function, arguments are tgtHost, int(tgtPort)
        t = Thread(target=connScan, args=(tgtHost, int(tgtPort)))
        # starts the thread 
        t.start()

def main():
    parser = optparse.OptionParser('usage %prog -t &lt;target-host&gt; -p &lt;target-port(s)&gt;')
    parser.add_option('-t', dest='tgtHost', type='string', help='specify target host')
    parser.add_option('-p', dest='tgtPort', type='string', help='specify target port(s), seperated by a comma, seperate ranges with a -')
    (options, args) = parser.parse_args()

    if (options.tgtHost == None) | (options.tgtPort == None):
        print parser.usage
        exit(0)
    else:
        tgtHost = options.tgtHost
        # allows ranges of ports to be used, when seperated by a -
        if '-' in str(options.tgtPort):
            tgtPorts = options.tgtPort.split('-')
            tgtPorts = range(int(tgtPorts[0]),int(tgtPorts[1]))
        else:
            tgtPorts = str(options.tgtPort).split(',')

    portScan(tgtHost, tgtPorts)

if __name__ == '__main__':
    main()
</code></pre>
<p>I know how all this code works, but I need to implement a feature that allows me to scan a local subnet of IP address, so if I run the program as (python portscanner.py -t 192.168.1.0 -p 1-50) it will scan all the IPs in the local subnet, namely 192.168.1.1 - 192.168.1.255.</p>
<p>I don't know how to implement this feature, have looked online with no avail. Any help would be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/howto/ipaddress.html" rel="nofollow noreferrer">built-in <code>ipaddress</code> module</a> can help you with this. The linked documentation page includes the following example:</p>
<pre><code>&gt;&gt;&gt; net4 = ipaddress.ip_network('192.0.2.0/24')
&gt;&gt;&gt; for x in net4.hosts():
...     print(x)  
192.0.2.1
192.0.2.2
192.0.2.3
192.0.2.4
...
192.0.2.252
192.0.2.253
192.0.2.254
</code></pre>
<p>I'd strongly suggest you consider using the <a href="https://www.digitalocean.com/community/tutorials/understanding-ip-addresses-subnets-and-cidr-notation-for-networking#cidr-notation" rel="nofollow noreferrer">CIDR Notation</a> for IP address ranges as shown, since the library can then deal with the representations directly.</p>
<p>Since from the comments it appears you need an IP address whose last byte is zero to be treated as a <code>/24</code> subnet I'd recommend something like this in your <code>main</code> function:</p>
<pre><code>tgtHost = options.tgtHost
if tgtHost.endswith('.0'):
    hosts = ipaddress.ip_network(tgtHost+'/24')
else:
    hosts = [tgtHost]
...
# port handling stuff
...
for tgtHost in hosts:
    portScan(tgtHost, tgtPorts)
</code></pre>
</div>
<span class="comment-copy">Okay, this is all very helpful, thanks. When I run my program, it is as follows: python portscanner.py -t &lt;target_ip&gt; -p &lt;ports&gt;, which outputs a list  showing the ports I defined, as either open or closed for that target IP. I need the program to know when I define the target_ip as 192.168.1.0, it is to scan all the IP address within the local subnet, and display whether or not the ports I defined are open / closed for each IP address.</span>
<span class="comment-copy">So take a CIDR block like <code>192.168.1.0/24</code> as an argument, and then you can iterate over the defined range as shown. The program has to know the size of the subnet - or do you want to deduce the network size from the IP address alone?</span>
<span class="comment-copy">I need the program to know that when the target IP ends in .0 (eg. 192.168.1.0 / 192.168.34.0) it is to scan the entire range of IP address, from .1 - .255. So in the end, the program will be able to scan either a singular IP address / hostname, or an entire range of IP address, if an address ending in .0 is defined as the target IP</span>
<span class="comment-copy">Okay, I've added in the code section above, when I run it using my VM subnet 10.0.2.0 I get an error come up: ipaddress.AddressValueError: '10.0.2.0/24' does not appear to be an IPv4 or IPv6 network. Did you pass in a bytes (str in Python 2) instead of a unicode object?</span>
<span class="comment-copy">In Python 3 the argument needs to be a Unicode string. A bytes object will throw the exception you report.If you are using Python 2 you'll have to install the module from <a href="https://pypi.python.org/pypi/py2-ipaddress/2.0" rel="nofollow noreferrer">PyPI</a> - I haven't investigated that.</span>
