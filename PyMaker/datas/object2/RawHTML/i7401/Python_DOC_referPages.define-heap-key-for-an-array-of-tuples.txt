<div class="post-text" itemprop="text">
<p>A simple example for the usage of the <a href="https://docs.python.org/3/library/heapq.html" rel="noreferrer">python heap implementation</a> is</p>
<pre><code>&gt;&gt;&gt; from heapq import heappush, heappop
&gt;&gt;&gt; heap = []
&gt;&gt;&gt; data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
&gt;&gt;&gt; for item in data:
        heappush(heap, item)
</code></pre>
<p>In a more complicated scenario, I have an array of tuples like</p>
<pre><code>tuples = [(5,"foo",True),(2,"bar", False),(8,"foobar",True)] 
</code></pre>
<p>and want to use the first entry of each tuple as heap key, i.e. the tuples should be sorted according the number in the tuples by the heap. </p>
<p>How can I do that? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use the tuple as they are. The <a href="https://docs.python.org/3.6/library/heapq.html#basic-examples" rel="nofollow noreferrer">Python documentation explicitly makes note</a> of such as usage:</p>
<blockquote>
<p>Heap elements can be tuples. This is useful for assigning comparison values (such as task priorities) alongside the main record being tracked:</p>
<pre><code>&gt;&gt;&gt; h = []
&gt;&gt;&gt; heappush(h, (5, 'write code'))
&gt;&gt;&gt; heappush(h, (7, 'release product'))
&gt;&gt;&gt; heappush(h, (1, 'write spec'))
&gt;&gt;&gt; heappush(h, (3, 'create tests'))
&gt;&gt;&gt; heappop(h)
(1, 'write spec')
</code></pre>
</blockquote>
<p>Simply push the tuples to the heap, and pop them off when needed:</p>
<pre><code>&gt;&gt;&gt; from heapq import heappush, heappop
&gt;&gt;&gt; 
&gt;&gt;&gt; heap = []
&gt;&gt;&gt; tuples = [(5,"foo",True),(2,"bar", False),(8,"foobar",True)] 
&gt;&gt;&gt; 
&gt;&gt;&gt; for tup in tuples:
...     heappush(heap, tup)
... 
&gt;&gt;&gt; heappop(heap)
(2, 'bar', False)
</code></pre>
<p>Because <a href="https://github.com/python/cpython/blob/3.6/Lib/heapq.py#L212" rel="nofollow noreferrer">the implementation for <code>heap</code></a> uses default sorting for tuples</p>
<pre><code>while pos &gt; startpos:
    ...
    if newitem &lt; parent:
        ...
    ...
...
</code></pre>
<p>and Python sorts tuples element-wise, ensure the objects by which you want the tuples to be sorted come first.</p>
</div>
<span class="comment-copy">Is there a way to do the same if my key was the <b>second or third</b> element of the tuple? Also, what if I wanted the <b>reverse order</b> for <i>heapify</i> ?</span>
