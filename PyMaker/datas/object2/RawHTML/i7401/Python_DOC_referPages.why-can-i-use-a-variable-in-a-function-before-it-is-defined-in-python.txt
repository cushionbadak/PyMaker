<div class="post-text" itemprop="text">
<p>In my code below, I am defining two functions. <code>main</code> and <code>cube</code>. I wanted <code>main</code> to be the start of my program, so I called <code>cube</code> inside of <code>main</code>:</p>
<pre><code>&gt;&gt;&gt; def main():
    number = int(input('Enter a number: '))
    cubed_number =  cube(number)
    print("The number cubed is: ", cubed_number)


&gt;&gt;&gt; def cube(number):
    return number * number * number

&gt;&gt;&gt; 
</code></pre>
<p>But I'm defining <code>cube</code> after <code>main</code>, so I thought my code would raise a <code>NameError</code>. However, instead of an exception being raised, Python executed my code perfectly fine:</p>
<pre><code>&gt;&gt;&gt; main()
Enter a number: 5
The number cubed is:  125
&gt;&gt;&gt; 
</code></pre>
<p>What happened? Why was Python able to run my code, without knowing how <code>cube</code> was defined yet? Why wasn't a <code>NameError</code> raised? </p>
<p>Even stranger is that when I tried to do the samething with classes, Python did raise a <code>NameError</code>:</p>
<pre><code>&gt;&gt;&gt; class Main:
        cubed_number()


Traceback (most recent call last):
  File "&lt;pyshell#27&gt;", line 1, in &lt;module&gt;
    class Main:
  File "&lt;pyshell#27&gt;", line 2, in Main
    cubed_number()
NameError: name 'cubed_number' is not defined
&gt;&gt;&gt; 
</code></pre>
<p>What's happening here?</p>
<hr/>
<p><strong>Note:</strong> This is not a duplicate of <a href="https://stackoverflow.com/questions/32255580/why-can-i-call-a-function-before-defining-it-with-only-a-warning"><em>Why can I call a function before defining it, with only a warning?</em></a>, because the answers there don't really explain why or how this behavior works in Python. I created this Q&amp;A because the current answers for questions such as this are scattered across various questions. I also feel it would be beneficial to show what is happening behind the scenes for this to work. Feel free to edit and improve the Q&amp;A.</p>
</div>
<div class="post-text" itemprop="text">
<p>To understand what is happening, one must understand the distinction Python makes between <em>defining</em> a function, and <em>executing</em> a function.</p>
<h2>Definition vs Execution</h2>
<p>When Python encounters a function definition, it <strong><em>compiles</em></strong> the function into a code object. </p>
<p>A code object is an internal structure Python uses to hold the bytecode associated with a specific executable block of code. It also holds other information Python needs to execute the bytecode such as constants and local variable names. The <a href="https://docs.python.org/3.6/reference/datamodel.html?highlight=data%20model" rel="nofollow noreferrer">documentation gives a much more more extensive overview of what code objects are</a>.</p>
<p>The code object is then used to construct a <em>function object</em>. The function object's code object is then used to execute the function when it is later called. Python would not <em><strong>execute</strong></em> the function, it would only compile the function into an object that could be used later for execution. <strong><em>The only time Python executes a function, is when the function is called</em></strong>.</p>
<p>Here is the relevant part from <a href="https://docs.python.org/3/reference/compound_stmts.html#grammar-token-funcdef" rel="nofollow noreferrer">the documentation which mentions this</a>:</p>
<blockquote>
<p>A function definition is an executable statement. Its execution binds the function name in the current local namespace to a function object (a wrapper around the executable code for the function). This function object contains a reference to the current global namespace as the global namespace to be used when the function is called.</p>
<p><strong>The function definition does not execute the function body; this gets executed only when the function is called.</strong></p>
</blockquote>
<p>Because of this distinction, Python cannot verify a name is actually defined <em>until</em> the function is called. Thus, you are allowed to use currently non-existent names in the function body. As long as the name is defined when the function is called, Python will not raise an error.</p>
<p>Here is an example. We define a function <code>func</code> that adds two variables together; <code>a</code> and <code>b</code>:</p>
<pre><code>&gt;&gt;&gt; def func():
...     return a + b
</code></pre>
<p>As you can see Python raised no error. This is because it simply compiled <code>func</code>. It did not attempt to execute the function, so it does not see that <code>a</code> and <code>b</code> are not defined.</p>
<p>We can disassemble <code>func</code>'s code object, and see what the bytecode looks like using the <a href="https://docs.python.org/3/library/dis.html" rel="nofollow noreferrer"><code>dis</code></a> module. This will tell us more about what Python is doing:</p>
<pre><code>&gt;&gt;&gt; from dis import dis
&gt;&gt;&gt; dis(func)
  2           0 LOAD_GLOBAL              0 (a)
              2 LOAD_GLOBAL              1 (b)
              4 BINARY_ADD
              6 RETURN_VALUE
</code></pre>
<p>Python encoded two <code>LOAD_GLOBAL</code> instructions in the byte-code. The arguments to the instructions are the variable names <code>a</code> and <code>b</code> respectively.</p>
<p>This shows that Python did see that we were attempting to reference two variables when compiling our function and created bytecode instructions to do so. <strong><em>But it does not attempt to actually execute the instructions, until the function is called</em></strong>.</p>
<p>Let's see what happens when we attempt to execute the bytecode for <code>func</code> by calling it:</p>
<pre><code>&gt;&gt;&gt; func()
Traceback (most recent call last):
  File "&lt;pyshell#15&gt;", line 1, in &lt;module&gt;
    func()
  File "&lt;pyshell#14&gt;", line 2, in func
    return a + b
NameError: name 'a' is not defined
</code></pre>
<p>As you can see, Python raised a <code>NameError</code>. This is because it attempted to <em>execute</em> the two <code>LOAD_GLOBAL</code> instructions, but discovered that the names where undefined in the global scope.</p>
<p>Now let's see what happens if we defined two variables <code>a</code> and <code>b</code> before calling <code>func</code>:</p>
<pre><code>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = 2
&gt;&gt;&gt; 
&gt;&gt;&gt; func()
3
</code></pre>
<p>The reason the above worked, is because when Python was executing <code>func</code>'s byte-code, it was able to find the global variables <code>a</code> and <code>b</code>, and used those to execute the function.</p>
<p>The same applies to the example is the question. When <code>main</code> was compiled, Python "saw" we were trying to call a variable named <code>cube</code> and generated an instruction to get the value of <code>cube</code>. But it did not attempt to find a callable object named <code>cube</code> until the instructions were executed. And by the time <code>main</code>'s byte-code was executed(eg. <code>main</code> was called), a function named <code>cube</code> was defined, so Python did not raise an error.</p>
<p>If we try to call main <em>before</em> cube is defined however, we'll get a name error for the same reasons in the above example:</p>
<pre><code>&gt;&gt;&gt; def main():
...     number = int(input('Enter a number: '))
...     cubed_number =  cube(number)
...     print("The number cubed is: ", cubed_number)
... 
&gt;&gt;&gt; main()
Enter a number: 23
Traceback (most recent call last):
  File "&lt;pyshell#23&gt;", line 1, in &lt;module&gt;
    main()
  File "&lt;pyshell#22&gt;", line 3, in main
    cubed_number =  cube(number)
NameError: name 'cube' is not defined
</code></pre>
<h2>What about the class?</h2>
<p>Python handles class definitions a bit differently from function definitions.</p>
<p>When Python encounters a class definition, it creates a code object for the class as with the function. However, Python also allows classes to have namespaces that are executed during the class definition. Python does not wait to execute the classes namespace because any variables defined should belong to the class. Thus, any names used inside of a classes name-space must be defined for usage during class-definition time.</p>
<p>The <a href="https://docs.python.org/3/reference/compound_stmts.html#grammar-token-classdef" rel="nofollow noreferrer">documentation for class definitions touches on this</a>:</p>
<blockquote>
<p>The class’s suite is then executed in a new execution frame (see Naming and binding), using a newly created local namespace and the original global namespace. (Usually, the suite contains mostly function definitions.) When the class’s suite finishes execution, its execution frame is discarded but its local namespace is saved.</p>
</blockquote>
<p>However, this does not apply to methods. Python treats undefined names in methods as with functions, and allows you to use them when defining the method:</p>
<pre><code>&gt;&gt;&gt; class Class:
...     def method(self):
...         return var
...
&gt;&gt;&gt; var = 10
&gt;&gt;&gt; cls = Class()
&gt;&gt;&gt; cls.method()
10
</code></pre>
</div>
<span class="comment-copy">Very thoroughly researched answer. I wish more people would include as many examples and references as you did.</span>
<span class="comment-copy">You apparently disassembled a <b>different</b> function, one where <code>a</code> and <code>b</code> are <i>locals</i>, because <code>LOAD_FAST</code> is used. But then you talk about globals: <i>Python encoded two <code>LOAD_GLOBAL</code> instructions in the byte-code</i>. Please do proof-read. :-) Also, <code>dis(func)</code> work, no need to access <code>__code__</code> here.</span>
<span class="comment-copy">@MartijnPieters Haha, yeah I messed that up. Thanks for telling me :-) I'll fix it. And I know I could've just passed <code>func</code> to <code>dis()</code> but I was trying to be explicit to show that <code>func</code> did indeed have a code object attached to it.</span>
<span class="comment-copy">@ChristianDean: but then you have to assume that the reader knows what code objects are..</span>
<span class="comment-copy">@MartijnPieters Hmm. Perhaps you're right. I'll try to give a brief overview of what a code object is.</span>
