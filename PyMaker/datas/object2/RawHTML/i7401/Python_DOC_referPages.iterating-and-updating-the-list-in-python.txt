<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/44633798/what-is-the-meaning-of-list-in-this-code">What is the meaning of list[:] in this code? [duplicate]</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<blockquote>
<p>I am not able to understand why the following code goes in indefinite
  loop(when i am not using the copy list)</p>
</blockquote>
<pre><code>list = ["Mohit","kumar","sffsfshfsd"]
for w in list:
    if(len(w)) &gt; 5:
        list.insert(0,w)
    print("inside loop")

print(list)  
</code></pre>
<p>The Above code prints <strong>inside loop</strong> indefinitely.</p>
<p>Now if in place of the list, i use a copy list like below works fine.</p>
<pre><code>list = ["mohit","kumar","sffffgssddf"]

for w in list[:]:
    if len(w) &gt; 5:
        list.insert(0,w)
    print("inside loop")

print(list)  
</code></pre>
<blockquote>
<p>Now i have read in the python documentation that this is the behavior
  i will get but i want to understand the reason behind it. Thanks in
  advance.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The first for loop <code>for w in list</code> will use an iterator (from <code>iter(list)</code>) to retrieve and loop through each item in the list. This iterator does not fetch the entire list immediately - it is <em>lazy</em>, meaning it only gets one item at a time from the list, when it's needed. You can learn about  <a href="http://anandology.com/python-practice-book/iterators.html" rel="nofollow noreferrer">the iteration protocol here</a>, or <a href="http://naiquevin.github.io/python-generators-and-being-lazy.html" rel="nofollow noreferrer">iteration/generators and laziness here</a>.</p>
<p>Looping through indexes 0 and 1 do nothing, as their string lengths are less than 6. At index 2, however, you add <code>"sffsfshfsd"</code> to the beginning of <code>list</code>. Now <code>list</code> has grown and there's something at index 3: <code>"sffsfshfsd"</code>. Iteration then continues, picking the value from the next index (3), which gets added at the beginning again, moving the same value which was at index 3 to index 4... The cycle never ends.</p>
<p>In your second loop <code>w in list[:]</code> you create a <em>copy</em> of the entire list (<a href="https://stackoverflow.com/questions/509211/explain-slice-notation">by using a slice operator</a>) and iterate through that. You're adding items to the original list, not the copy, so the iterator won't touch the items that you've added.</p>
<p>PS: I tried to search the Python source code (which is C) to prove that list iterators in fact use an incrementing index (as described above). I'm not well versed in reading Python's source code, but here's what I found in <a href="https://github.com/python/cpython/blob/b879fe82e7e5c3f7673c9a7fa4aad42bd05445d8/Objects/listobject.c" rel="nofollow noreferrer">cpython/listobject.c</a>:</p>
<p><em><a href="https://github.com/python/cpython/blob/b879fe82e7e5c3f7673c9a7fa4aad42bd05445d8/Objects/listobject.c#L2797" rel="nofollow noreferrer">Iterator creation, sets starting index to 0</a></em></p>
<pre><code>2797 static PyObject *
2798 list_iter(PyObject *seq)
2799 {
....
2806     it = PyObject_GC_New(listiterobject, &amp;PyListIter_Type);
....
2809     it-&gt;it_index = 0;
....
2813     return (PyObject *)it;
2814 }
</code></pre>
<p><em><a href="https://github.com/python/cpython/blob/b879fe82e7e5c3f7673c9a7fa4aad42bd05445d8/Objects/listobject.c#L2831" rel="nofollow noreferrer"><code>next</code> uses <code>it-&gt;it_index</code> from above and then increments it</a></em></p>
<pre><code>2831 static PyObject *
2832 listiter_next(listiterobject *it)
2833 {
....
2844         item = PyList_GET_ITEM(seq, it-&gt;it_index);
2845         ++it-&gt;it_index;
....
2847         return item;
....
2853 }
</code></pre>
<p>Seems legit to me?</p>
</div>
<div class="post-text" itemprop="text">
<p>To simulate how list iteration works internally, let's rewrite your program using integer indices and a <code>while</code> loop.</p>
<pre><code>lst = ["Mohit", "kumar", "sffsfshfsd"]
pos = 0
while pos &lt; len(lst):
  word = lst[pos]
  print('lst=%s pos=%d word=%s' % (lst, pos, word))
  if len(word) &gt; 5:
    lst.insert(0, word)
  pos += 1
</code></pre>
<p>The following shows what happens when you run this:</p>
<pre><code>lst=['Mohit', 'kumar', 'sffsfshfsd'] pos=0 word=Mohit
lst=['Mohit', 'kumar', 'sffsfshfsd'] pos=1 word=kumar
lst=['Mohit', 'kumar', 'sffsfshfsd'] pos=2 word=sffsfshfsd
lst=['sffsfshfsd', 'Mohit', 'kumar', 'sffsfshfsd'] pos=3 word=sffsfshfsd
lst=['sffsfshfsd', 'sffsfshfsd', 'Mohit', 'kumar', 'sffsfshfsd'] pos=4 word=sffsfshfsd
lst=['sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'Mohit', 'kumar', 'sffsfshfsd'] pos=5 word=sffsfshfsd
lst=['sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'Mohit', 'kumar', 'sffsfshfsd'] pos=6 word=sffsfshfsd
lst=['sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'Mohit', 'kumar', 'sffsfshfsd'] pos=7 word=sffsfshfsd
lst=['sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'Mohit', 'kumar', 'sffsfshfsd'] pos=8 word=sffsfshfsd
lst=['sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'Mohit', 'kumar', 'sffsfshfsd'] pos=9 word=sffsfshfsd
...
</code></pre>
<p>(This goes on until you run out of either RAM or patience.)</p>
<p>As you can see, you keep shifting the final <code>'sffsfshfsd'</code> to the right, so your code keeps looking at it and never stops.</p>
<p>This doesn't happen if you work on a copy since you're no longer modifying the list you're iterating over.</p>
<p>It also wouldn't happen if you were to either adjust the loop index after the insertion:</p>
<pre><code>  if len(word) &gt; 5:
    lst.insert(0, word)
    pos += 1  # account for the extra word
  pos += 1
</code></pre>
<p>or move the word instead of copying it:</p>
<pre><code>  if len(word) &gt; 5:
    lst.insert(0, lst.pop(pos))  # don't change len(lst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That happens because you're appending "sffsfshfsd" to list on each iteration starting from third, so list never ends.</p>
</div>
<div class="post-text" itemprop="text">
<p>In the first code, you are inserting elements on the very same list that you're looping. That's why it keeps going at the inner loop, because list is growing indefinitely.
In the second code you're making a copy, separating your for loop and your original list, so it will eventually stop.</p>
</div>
<div class="post-text" itemprop="text">
<p>Quoting <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow noreferrer">from the docs</a>:</p>
<blockquote>
<p><strong>Note</strong>: There is a subtlety when the sequence is being modified by the
  loop (this can only occur for mutable sequences, i.e. lists). An
  internal counter is used to keep track of which item is used next, and
  this is incremented on each iteration. When this counter has reached
  the length of the sequence the loop terminates. This means that if the
  suite deletes the current (or a previous) item from the sequence, the
  next item will be skipped (since it gets the index of the current item
  which has already been treated). Likewise, if the suite inserts an
  item in the sequence before the current item, the current item will be
  treated again the next time through the loop. This can lead to nasty
  bugs that can be avoided by making a temporary copy using a slice of
  the whole sequence, e.g.,</p>
</blockquote>
<pre><code>for x in a[:]:
    if x &lt; 0: a.remove(x)
</code></pre>
<hr/>
<p>A for-loop over a list in Python maintains a counter internally and that is used to get the next item.</p>
<p>In your first code when it reaches <code>sffsfshfsd</code>(i.e index 2) you insert it to the start of list again, hence all items shift one place and now <code>sffsfshfsd</code> will be shifted to index 3 and will be picked up in the next iteration. And this goes on...</p>
<p>In your second code you're iterating over a copy of list and a copy of the list is not modified when you modify the original list.</p>
<pre><code>lst = ["Mohit","kumar","sffsfshfsd"]
for i, w in enumerate(lst):
    print("Index: {i} | List: {list}".format(i=i, list=lst))
    if(len(w)) &gt; 5:
        lst.insert(0, w)
</code></pre>
<p><strong>Outputs:</strong></p>
<pre><code>Index: 0 | List: ['Mohit', 'kumar', 'sffsfshfsd']
Index: 1 | List: ['Mohit', 'kumar', 'sffsfshfsd']
Index: 2 | List: ['Mohit', 'kumar', 'sffsfshfsd']
Index: 3 | List: ['sffsfshfsd', 'Mohit', 'kumar', 'sffsfshfsd']
Index: 4 | List: ['sffsfshfsd', 'sffsfshfsd', 'Mohit', 'kumar', 'sffsfshfsd']
Index: 5 | List: ['sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'Mohit', 'kumar', 'sffsfshfsd']
Index: 6 | List: ['sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'sffsfshfsd', 'Mohit', 'kumar', 'sffsfshfsd']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this a very interesting question. I believe the answer should present itself in python source code implementation (sorry I could not find it and Hope someone expert could direct us to Python implementation)</p>
<p>for loop will not create a copy of your original data. Thus every time a new data added, the loop will continue. (I am not sure how for loop is achieved in implementation level, I do believe it might use iterator)</p>
<p>on the other hand [:], this operator will create a new copy of original data set. Thus no matter how you change original data set, the for loop is looping on a copy (which does not change). </p>
<p>Proof as following:</p>
<pre><code>list = ["mohit","kumar","sffffgssddf"]
test = list
list.append("test")
print test 
#['mohit', 'kumar', 'sffffgssddf', 'test']

#clear data, let's try [:]
list = ["mohit","kumar","sffffgssddf"]
test = list[:]
list.append("test")
print test 
#['mohit', 'kumar', 'sffffgssddf']
</code></pre>
<p>Thus it is clear in your second example, your for loop is looping on a copy of original data. Thus original data set change will not affect the copy data. Thus your second example is working and first example will loop indefinitely.</p>
<p>Hope it helps.</p>
</div>
<span class="comment-copy">Side note: Never name your variables after built-ins (e.g. <code>list</code>).</span>
<span class="comment-copy">thanks, will keep that in mind @mpf82</span>
<span class="comment-copy">once reached <code>"sffsfshfsd"</code> is added to the front of your list every iteration</span>
<span class="comment-copy">Your list keeps growing while you iterate on it, so it can never stop.</span>
<span class="comment-copy">but i have already reached the third element of the list, why would we loop back to the first element afer inserting the new one?</span>
<span class="comment-copy">Thanks a lot @White. While others mostly addressed the first part of my question. u cleared the second part as well. thanks a lot . :)</span>
<span class="comment-copy">@Manya you're welcome. Waiting for expert to show us Python core, that will be the definite answer.</span>
