<div class="post-text" itemprop="text">
<p>I have a list</p>
<pre><code>lis = [ [0, 1], [1, -1], [1, 0] ]
</code></pre>
<p>I want to sort it according to a particular condition. I want to use a logic that whenever <code>lis[i][0]</code> is equal to <code>lis[i + 1][0]</code>, swap the elements. Something like</p>
<p>In the above list,the second and third elements are <code>[1, -1]</code> and <code>[1, 0]</code> where <code>lis[i][0]</code> == <code>lis[i + 1][0]</code>. So I will swap it such that my new list becomes</p>
<pre><code>lis = [ [0, 1], [1, 0], [1, -1] ]
</code></pre>
<p>This is my function:</p>
<pre><code>def sortList(lis3):
    for i in range(0, len(lis3) - 1):
        for j in range(i + 1, len(lis3)):
            if lis3[i][0] == lis3[j][0]:
                lis3[i], lis3[j] = lis3[j], lis3[i]
</code></pre>
<p>I want to pass this function to the <code>sort</code> method of the list such that it sorts according to this logic:</p>
<p>I tried doing this but doesn't work:</p>
<pre><code>lis.sort(key=sortList)
</code></pre>
<p>How can I make this function work in the <code>sort</code> method?</p>
</div>
<div class="post-text" itemprop="text">
<p>As already said in the other answers it's not possible (or at least non-trivial) to make it work with <code>sorted</code>. However you can do it without any sorting, just by collecting the indices based on the first element:</p>
<pre><code>from collections import defaultdict

lis = [[0, 1], [1, -1], [1, 0]]

d_idx = defaultdict(list)

for idx, item in enumerate(lis):
    d_idx[item[0]].append(idx)
</code></pre>
<p>Then create a "result" list and just reverse the indices of all elements that have the same first element:</p>
<pre><code>res = [None]*len(lis)

for _, value in d_idx.items():
    for orig_idx, target_idx in zip(value, reversed(value)):
        res[target_idx] = lis[orig_idx]
</code></pre>
<p>Which gives a <code>res</code> of:</p>
<pre><code>&gt;&gt;&gt; res
[[0, 1], [1, 0], [1, -1]]
</code></pre>
<p>Note: It may not be the desired behavior to "reverse" the elements with the same first element. Because as <a href="https://stackoverflow.com/questions/45103046/passing-function-to-the-key-of-a-sort-function#comment77177472_45103046">@hiro protagonist noted in the comments</a>:</p>
<blockquote>
<p>the problem is not really well defined... <code>lst = [(0,0), (0,1), (0,2)]</code>: what is the result? how and how many times do your iterate over the list? when are you done?</p>
</blockquote>
<p>in case you need a different behavior which elements should be assigned to which position you (probably) only need to change the <code>for orig_idx, target_idx in zip(value, reversed(value)):</code> line and apply your desired operation there.</p>
<hr/>
<p>A further advantage is that this approach only has <code>O(n)</code> runtime behavior whereas <code>sort</code> has <code>O(n*log(n))</code> (average) runtime. So it could be faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot make it work reliably with <code>list.sort</code> or <code>sorted</code>. The problem is that the sorting algorithm behind these functions doesn't make guarantees which elements are compared or not (it just says that the result will be sorted). For <code>list.sort</code> or <code>sorted</code> to work reliably you need a <a href="https://en.wikipedia.org/wiki/Total_order" rel="nofollow noreferrer"><strong>total ordering relation</strong></a> of the <code>key</code>, which your function doesn't provide.</p>
<p>Also the <code>key</code> should be a function that converts one element to "the property that should be compared", it does pass each element of the list to the <code>key</code> function not the total list (in fact in CPython the list is empty while you <code>sort</code> it, so it couldn't work at all).</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to perform this sorting is to use the <code>cmp</code> parameter for <code>sorted</code> (use <a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key" rel="nofollow noreferrer"><code>functools.cmp_to_key</code></a> for Python 3) and return -1 when the items at index 0 of two sublists compare equal or zero otherwise. This assumes the items are in pairs and are successive, so it isn't really an exhaustive sort, only an hackish way to swap your items:</p>
<pre><code>lis = [ [0, 1], [1, -1], [1, 0], [2, 5], [2, 6]]

print sorted(lis, cmp=lambda x, y: -1 if x[0]==y[0] else 0)
# [[0, 1], [1, 0], [1, -1], [2, 6], [2, 5]]
</code></pre>
<p>However, the sorting becomes <strong>ambiguous</strong> when more than two items have the same value at index 0 or the <strong>items are not successive</strong>.</p>
<hr/>
<p>OTOH, you could just loop through your list and swap pair-wise successive items that match your condition. No need to apply sorting!</p>
</div>
<div class="post-text" itemprop="text">
<p>The python sort method will sort a list in place, using only &lt; comparisons between items. You have to pass it a function which maps each element to something which may be compares to other mapped elements so that the 'less than' relation gives the desired result.</p>
<p>Your rule however isn't defining any kind of relationship that can be described in terms of <code>a &lt; b</code> for elements a, b. It is defining a relationship between adjacent elements only, and it isn't even a stable relationship: if <code>a &lt; b</code> so you swap those two items then it immediately becomes the case that <code>b &lt; a</code>.</p>
<p>Or in short, <code>lis.sort()</code> is completely inappropriate for this task.</p>
</div>
<span class="comment-copy">that is not the same as sorting... an ordering must be a global property and not depend directly on the neighbour. (how would that work with a merge sort? or other sort algorithms? how would the result be the same? <a href="https://en.wikipedia.org/wiki/Timsort" rel="nofollow noreferrer">python uses [timsort</a> ]).</span>
<span class="comment-copy">@hiroprotagonist So is there an alternate way I can do it?</span>
<span class="comment-copy">the problem is not really well defined... <code>lst = [(0,0), (0,1), (0,2)]</code>: what is the result? how and how many times do your iterate over the list? when are you done?</span>
<span class="comment-copy">cool!So I better not use the sort function and try to do it your way :)</span>
<span class="comment-copy">and there's no guarantee that all items are compared with each other. So it may work or not depending on which items are compared.</span>
<span class="comment-copy">@Moses Can you show the same implementation in python 3?I tried using functools.cmp_to_key but error pops up.</span>
<span class="comment-copy">@SouvikRay <code>sorted(lis, key=functools.cmp_to_key(lambda x, y: -1 if x[0]==y[0] else 0))</code></span>
<span class="comment-copy">@SouvikRay Remembe to <code>import functools</code> and have a look at other answers too.</span>
