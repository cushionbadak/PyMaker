<div class="post-text" itemprop="text">
<p>I want to wrap this code in a class, as it is interfering with code after the the fact. Is there anyway to do this?? That code is: </p>
<pre><code>root = tk.Tk()
root.geometry("%dx%d+%d+%d" % (330, 80, 200, 150))
root.title("Number of Words to Analyze")

var = tk.IntVar(root)
var.set("Select Num Here")

def grab_and_assign(event):
    chosen_option = var.get()
    label_chosen_variable= tk.Label(root, text=chosen_option)
    label_chosen_variable.grid(row=1, column=2)
    print ('You selected ' + str(chosen_option))

def leave():
    root.quit()
    root.destroy()

drop_menu = tk.OptionMenu(root, var,  "100", "200", "300", "400", "500", command=grab_and_assign)
drop_menu.grid(row=0, column=0)
label_left=tk.Label(root, text="Chosen Num of Words= ")
label_left.grid(row=1, column=0)
label_right=tk.Button(root, text="Close", command=leave)
label_right.grid(row=10, column=5)

root.mainloop()

word_freq = counts.most_common(var.get())
</code></pre>
<p>Counts is a variable that contains a word and it's frequency from a text document. It looks like:</p>
<pre><code>[('hamlet', 469),('lord', 310),("'s", 230),('king', 201),("'d", 169)('horatio', 157),('--', 136),('claudius', 120),('queen', 119),('polonius', 119),('shall', 114),('good', 107)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you wanted to implement your provided code using a class, you could do so to the extent of something like this:</p>
<pre><code>import tkinter as tk

class Application(tk.Tk):

    def __init__(self, master=None):

        tk.Tk.__init__(self, master)

        self.geometry("{}x{}+{}+{}".format(330, 80, 200, 150))
        self.title("Number of Words to Analyze")

        self.var = tk.IntVar(self)  # I might make this variable a bit more descriptive
        self.var.set("Select Num Here")

        self.drop_menu()
        # self.left_label()
        # self.right_label()

        self.word_freq = counts.most_common(self.var.get())


    def drop_menu(self):
        self.option_menu = tk.OptionMenu(self, self.var, "100", "200", "300", "400",
                                         "500", command=self.grab_and_assign)
        self.option_menu.grid(row=0, column=0)


    def grab_and_assign(self, event):
        chosen_option = self.var.get()
        label_chosen_variable = tk.Label(self, text=chosen_option)
        label_chosen_variable.grid(row=1, column=2)


    def left_label(self):
        # ... Logic ...


    def right_label(self):
        # ... Logic ...


def main():
    app = Application()
    app.mainloop()


if __name__ == '__main__':
    main()
</code></pre>
<p>I did not complete the class including all of your code, the rest will be for you to figure out - you can "modularize" your tkinter application by separating widgets, which will not only allow you to take a more methodical approach to the implementation, but also make your code more readable. If you are not familiar with classes, check out the <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">chapter</a> on them in the official Python Tutorial, and here is a great reference for tkinter, <a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html" rel="nofollow noreferrer">NMT Tkinter</a>.</p>
</div>
<span class="comment-copy">Thank you and thanks for the references. Relatively new to all of this so I need the resources for sure.</span>
