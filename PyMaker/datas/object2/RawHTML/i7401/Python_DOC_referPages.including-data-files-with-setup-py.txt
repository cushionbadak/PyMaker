<div class="post-text" itemprop="text">
<p>I'm having trouble including data files in my setup.py script. My package is setup as follows:</p>
<pre><code>my_package/
    setup.py
    MANIFEST.in

    my_package/
        __init__.py
        access_data.py

        data_files/
            my_data_file.csv
</code></pre>
<p>I want to include the <code>my_data_file.csv</code> file when installing so that it can be read by <code>access_data.py</code>. To do so I used the <code>package_data</code> keyword in <code>setuptools</code>:</p>
<pre><code>setup(...,
      packages=['my_package'],
      package_data={'my_package': ['./my_package/data_files/my_data_file.csv']},
      include_package_data=True
      )
</code></pre>
<p>I also included the file in <code>MANIFEST.in</code>:</p>
<pre><code>recursive-include my_package/data_files *
</code></pre>
<p><code>setup.py</code> seems to run fine and doesn't throw any errors. However, when I import the package I get a file not found error because <code>my_data_file.csv</code> is missing. I have tried referencing other stack overflow questions (particularly <a href="https://stackoverflow.com/questions/1612733/including-non-python-files-with-setup-py">this one</a>) but can't figure out what I'm doing wrong. How can I get setup.py to include the necessary data files?</p>
</div>
<div class="post-text" itemprop="text">
<p>If it is listed in <code>setup.py</code>'s <code>package_data</code> (correctly) you shouldn't need to include it in <code>MANIFEST.in</code> (as it will be included automatically)</p>
<p>In your case, the error is with your <code>package_data</code> line, the paths are relative to the namespace's root</p>
<p>In your case it should be:</p>
<pre><code>package_data={'my_package': ['data_files/my_data_file.csv']},
</code></pre>
<p>Also note that the key in package data is the dotted module path (it's not super relevant for this toy case however).</p>
</div>
<span class="comment-copy">Are you on a case-insensitive filesystem? <code>manifest.in</code> really should be <code>MANIFEST.in</code>. But that doesn't matter anyway as <code>MANIFEST.in</code> is used for source distribution (sdist).</span>
<span class="comment-copy">First think in debugging is to split The Big Problem into many smaller ones. Let's do it step by step. Step number 1: check that you distribution (sdist, egg or wheel) really contains <code>my_data_file.csv</code>; if not — fix <code>setup.py</code> to include it. Step number 2: check that <code>my_data_file.csv</code> is installed. Step 3 — debug why you cannot access the file even if it's in place (wrong path to the file? permissions?)</span>
<span class="comment-copy">your line should be <code>package_data={'my_package': ['data_files/my_data_file.csv']},</code> (under the <code>my_package</code> package, there's no <code>my_package</code> directory)</span>
<span class="comment-copy">For those who did not know at once what the dotted name exactly is: <code>Packages are a way of structuring Python’s module namespace by using “dotted module names”. For example, the module name A.B designates a submodule named B in a package named A.</code> (<a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">source link</a>)</span>
