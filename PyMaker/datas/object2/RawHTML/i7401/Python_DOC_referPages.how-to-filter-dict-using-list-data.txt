<div class="post-text" itemprop="text">
<pre><code>org_dict={'k3': [5, 6], 'k2': [3, 2], 'k1': [1, 2]}
filter_data=[[0, 0, 0], [0, 1, 1], [1, 0, 1], [1, 1, 0]]
</code></pre>
<p>Expect Result:</p>
<pre><code>res[0]={'k3':org_dict[k3][0],'k2':org_dict[k2][0],'k1':org_dict[k1][0]} 
#res[0] value pos is in filter_data:[0,0,0]

res[1]={'k3':org_dict[k3][0],'k2':org_dict[k2][1],'k1':org_dict[k1][1]}
#res[1] value pos is in filter_data:[0,1,1]

res[2]={'k3':org_dict[k3][1],'k2':org_dict[k2][0],'k1':org_dict[k1][1]}
#res[2] value pos is in filter_data:[1,0,1]
</code></pre>
<p>...</p>
<p>for example:</p>
<pre><code>res=[{'k3': 5, 'k2': 3, 'k1': 1},{'k3': 5, 'k2': 2, 'k1': 2},...]
</code></pre>
<p>thanks a lot!!!</p>
</div>
<div class="post-text" itemprop="text">
<p>Using an ordered dictionary:</p>
<pre><code>import collections
d = collections.OrderedDict([('k3',[5, 6]), ('k2', [3, 2]), ('k1',[1, 2])])
f_data = [[0, 0, 0], [0, 1, 1], [1, 0, 1], [1, 1, 0]]
</code></pre>
<p>Iterate over the filters; at the top of the loop create a new, empty, dictionary; use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> to associate the indices in the filter with the items in the target dictionary and iterate; add the item key with the <em>filtered</em> value to the new dictionary.</p>
<pre><code>for f in f_data:
    q = collections.OrderedDict()
    for index, (k, v) in zip(f, d.items()):
        q[k] = v[index]
    print(q)

&gt;&gt;&gt;
OrderedDict([('k3', 5), ('k2', 3), ('k1', 1)])
OrderedDict([('k3', 5), ('k2', 2), ('k1', 2)])
OrderedDict([('k3', 6), ('k2', 3), ('k1', 2)])
OrderedDict([('k3', 6), ('k2', 2), ('k1', 1)])
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>Using an <em>normal</em> dictionary, you need a sequence to match the keys with the filters:</p>
<pre><code>f_data = [[ 0 ,  0 ,  0 ], [ 0 ,  1 ,  1 ], [ 1 ,  0 ,  1 ], [ 1 ,  1 ,  0 ]]
            |    |    |      |    |    |      |    |    |      |    |    |
          'k3'  'k2' 'k1'  'k3'  'k2' 'k1'  'k3'  'k2' 'k1'  'k3'  'k2' 'k1'
</code></pre>
<p>.</p>
<pre><code>d = dict([('k3',[5, 6]), ('k2', [3, 2]), ('k1',[1, 2])])
key_order = ['k3', 'k2', 'k1']
for f in f_data:
    q = dict()
    for index, key in zip(f, key_order):
        q[key] = d[key][index]
    print(q)

&gt;&gt;&gt;
{'k3': 5, 'k2': 3, 'k1': 1}
{'k3': 5, 'k2': 2, 'k1': 2}
{'k3': 6, 'k2': 3, 'k1': 2}
{'k3': 6, 'k2': 2, 'k1': 1}
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">You're SOL. Dicts don't have any concept of ordering. Indices are useless here.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ unless you use collections.OrderedDict.</span>
<span class="comment-copy">@wwii <i>Assuming</i> his dict was ordered with an OrderedDict to begin with.</span>
<span class="comment-copy">thanks a lot! let me try using collections.OrderedDict ...</span>
<span class="comment-copy">Thanks very much~~~Bro!</span>
