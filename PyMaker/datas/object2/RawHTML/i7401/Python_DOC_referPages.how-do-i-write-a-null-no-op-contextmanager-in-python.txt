<div class="post-text" itemprop="text">
<p>Sometimes I need a dummy context manager that does nothing. It can then be used as a stand-in for a more useful, but optional, context manager. For example:</p>
<pre><code>ctx_mgr = &lt;meaningfulContextManager&gt; if &lt;condition&gt; else &lt;nullContextManager&gt;
with ctx_mgr:
    ...
</code></pre>
<p>How do I define such a trivial, empty context manager? Does the Python library offer one off the shelf?</p>
<p>How about cases where we want the context to be used with an <code>as</code> clause?</p>
<pre><code>with ctx_mgr as resource:
    &lt;operations on resource&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python 3.7 and above</strong>: use <a href="https://docs.python.org/3.7/library/contextlib.html#contextlib.nullcontext" rel="noreferrer"><code>contextlib.nullcontext</code></a>, specifically designed for this reason.</p>
<p>Before Python 3.7, the standard library does not offer a context manager specifically designed for these use cases, but there are some workarounds.</p>
<p><strong>Since Python 3.4</strong>, <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="noreferrer"><code>contextlib.suppress</code></a> can be used for that purpose in the first case, i.e. when there is no <code>as</code> clause:</p>
<pre><code>ctx_mgr = &lt;meaningfulContextManager&gt; if &lt;condition&gt; else contextlib.suppress()

with ctx_mgr:
    ...
</code></pre>
<p><strong>Since Python 3.3</strong>, a similar work-around is also available, <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="noreferrer"><code>contextlib.ExitStack</code></a>, albeit slower than <code>suppress</code> (it takes twice as long in my tests).</p>
<p><strong>Before Python 3.3</strong>, or <strong>in case you need an <code>as</code> clause</strong> before Python 3.7, developers need to roll their own.
Here is one possible implementation (see note at the bottom, but all errors are mine):</p>
<pre><code>class NullContextManager(object):
    def __init__(self, dummy_resource=None):
        self.dummy_resource = dummy_resource
    def __enter__(self):
        return self.dummy_resource
    def __exit__(self, *args):
        pass
</code></pre>
<p>One can then write:</p>
<pre><code>ctx_mgr = &lt;meaningfulContextManager&gt; if &lt;condition&gt; else NullContextManager(dummy_resource)

with ctx_mgr as resource:
    &lt;operations on resource&gt;
</code></pre>
<p>Of course, <code>dummy_resource</code> will need to support all operations required of the "meaningful" resource. So for example, if the meaningful context manager, on <code>__enter__()</code>, returns something that is made to <code>quack()</code> inside the managed block, <code>dummy_resource</code> will also need to support that, albeit possibly without doing anything at all.</p>
<pre><code>class DummyDuck(object):
    def quack()
        # Ssssh...
        pass

ctx_mgr = &lt;meaningfulContextManager&gt; if &lt;condition&gt; else NullContextManager(DummyDuck())

with ctx_mgr as someDuck:
    someDuck.quack()
</code></pre>
<p>Source: <a href="https://bugs.python.org/issue10049" rel="noreferrer">A Python feature request</a>. Many thanks to all those who contributed to that discussion. This is my attempt at summarising its outcome in a self-answered question, to save people time reading that long thread. Also see Python documentation's mention of <a href="https://docs.python.org/3/library/contextlib.html#simplifying-support-for-single-optional-context-managers" rel="noreferrer">this use of <code>ExitStack</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since Python 3.2, <code>memoryview(b'')</code> can be use as a no-op context manager. See <a href="https://docs.python.org/3/library/stdtypes.html#memoryview.release" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#memoryview.release</a>.</p>
<p><strong>Pros</strong></p>
<ul>
<li><p>No imports required</p></li>
<li><p>Works on 3.2+</p></li>
<li><p>Roughly twice as fast as <code>contextlib.nullcontext</code></p></li>
</ul>
<p><strong>Cons</strong></p>
<ul>
<li>You probably want to add a <code># no-op</code> comment.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I just used <code>threading.Lock()</code> as a dummy context manager. Temporary lock, only used by the context manager.</p>
</div>
<span class="comment-copy">How about <code>if 1:</code> as replacement for a <code>with whatever:</code>?</span>
<span class="comment-copy">The documentation mentions the ExitStack as a do-nothing context manager here <a href="https://docs.python.org/3/library/contextlib.html#simplifying-support-for-single-optional-context-managers" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">I stand corrected - fixed, thanks.</span>
<span class="comment-copy"><b>UPD 23 Nov, 2017</b>, finally, there is a commit with <code>nullcontext</code> <a href="https://bugs.python.org/issue10049#msg306770" rel="nofollow noreferrer">bugs.python.org/issue10049#msg306770</a></span>
<span class="comment-copy">Many thanks @maxkoryukov, I have updated the answer.</span>
<span class="comment-copy">A somewhat faster do-nothing context manager available in 3.4 and up (before <code>nullcontext</code> is available) is <code>contextlib.suppress</code>. It takes varargs, and you can simply pass no exceptions to it at all: <code>with suppress():</code> will suppress nothing, and it's got a lot less overhead than <code>ExitStack</code>.</span>
