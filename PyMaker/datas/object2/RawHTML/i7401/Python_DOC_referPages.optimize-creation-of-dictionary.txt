<div class="post-text" itemprop="text">
<p>I have a list with ids called <code>ids</code>. Every element in <code>ids</code> is a string. One <code>id</code> can exist multiple times in this list. </p>
<p>My aim is to create a dictionary which has the the number of occurrences as a key and the value is a list of the ids which appear that often.
My current approach looks like this:</p>
<pre><code>from collections import defaultdict
import numpy as np
ids = ["foo", "foo", "bar", "hi", "hi"]
counts = defaultdict(list)
for id in np.unique(ids):
    counts[ids.count(id)].append(id)
</code></pre>
<p>Output:</p>
<pre><code>print counts
--&gt; defaultdict(&lt;type 'list'&gt;, {1: ['bar'], 2: ['foo', 'hi']})
</code></pre>
<p>This works nicely if the list of ids is not too long. However, for longer lists the performance is rather bad. </p>
<p>How can I make this faster? </p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of calling <code>count</code> for each element in the list, create a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> for the entire list:</p>
<pre><code>ids = ["foo", "foo", "bar", "hi", "hi"]
counts = defaultdict(list)
for i, c in Counter(ids).items():
    counts[c].append(i)
# counts: defaultdict(&lt;class 'list'&gt;, {1: ['bar'], 2: ['foo', 'hi']})
</code></pre>
<hr/>
<p>If you prefer a one-liner, you could also combine  <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer"><code>Counter.most_common</code></a> (for view on the elements sorted by counts) and <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> (but I rather wouldn't)</p>
<pre><code>&gt;&gt;&gt; {k: [v[0] for v in g] for k, g in groupby(Counter(ids).most_common(), lambda x: x[1])}
{1: ['bar'], 2: ['foo', 'hi']}
</code></pre>
</div>
<span class="comment-copy">Do you really need NumPy for that? You could've used <code>for id in set(ids)</code> instead. Also, you're doing almost the same as <code>collections.Counter</code>, maybe you could look into that for ideas.</span>
