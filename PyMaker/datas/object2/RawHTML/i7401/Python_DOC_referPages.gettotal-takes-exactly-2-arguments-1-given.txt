<div class="post-text" itemprop="text">
<p>So, here is my Shoping Cart code, im stuck with this code, i fix one error, another pop out. So now i get TypeError: getTotal() takes exactly 2 arguments (1 given)</p>
<pre><code>class Item():
"""Name and price of Item"""
    def __init__(self, name, price):
        self.name = name
        self.price = price

    def getName(self):            #Returning item's name
        return self.name

    def getPrice(self):           #Returning item's price.
        return self.price

class User():
"""Getting name of user"""
    def __init__(self, name,budget):
        self.name = name
        self.budget = budget

    def userName(self):               #Returning user's name
        return self.name

    def userBudget(self):             #Returning user's budget
        return self.budget

class Cart():
"""Creating a cart, you can add item in cart and remove it, also u can se your total bill."""

    def __init__(self):
        self.carta = []   #Carta is shopping cart.

    def addItem(self,carta):
        self.carta.append(1)  #Adding item in cart.

    def getTotal(self,carta):  #Total bill.
        total = 0
        for item in carta:
            item = getPrice, getName
            total += item
        return total

    def numItems(self,carta):    #Number of items in cart.
        self.carta = carta.len()
        return len.carta()

def kart():
    item1 = Item ("Iphone", 500)
    item2 = Item ("Samsung", 200)
    item3 = Item("Huawei", 400)
    uname = User("Marko", 2000)
    kart = Cart()
    kart.addItem(item1)
    kart.addItem(item2)
    kart.addItem(item3)
    print ("Hi %i, your total bill is $%0.2f, and you have %i items in your cart.",uname.userName(), kart.getTotal(), kart.numItems())

final = kart()
print (final)
</code></pre>
<p>Output i get:</p>
<pre><code>Traceback (most recent call last):
File "C:\Users\Marko\Documents\Projects\Shopping.py", line 56, in &lt;module&gt;
final = kart()
File "C:\Users\Marko\Documents\Projects\Shopping.py", line 54, in kart
print ("Hi %i, your total bill is $%0.2f, and you have %i items in your cart.",uname.userName(), kart.getTotal(), kart.numItems())
TypeError: getTotal() takes exactly 2 arguments (1 given)
</code></pre>
<p>Every tip, every help is welcome, thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>There a several errors in your classes.</p>
<p>First, in Python, you can ger rid of <code>getXXX()</code> methods, especially in your case. So, you can redefine <code>Item</code> and <code>User</code> classes as: </p>
<pre><code>class Item():
    """Name and price of Item"""
    def __init__(self, name, price):
        self.name = name
        self.price = price

class User():
    """Getting name of user"""
    def __init__(self, name,budget):
        self.name = name
        self.budget = budget
</code></pre>
<hr/>
<p>In the <code>Cart</code> class, that code does not what you want:</p>
<pre><code>def addItem(self,carta):
    self.carta.append(1)  #Adding item in cart.
</code></pre>
<p>It will append the integer <code>1</code> into the current <code>cart</code>. To do as you would, take into account the current item to add:</p>
<pre><code>def addItem(self, item):
    self.carta.append(item)
</code></pre>
<p>Next, <code>getTotal</code> cannot work as it is:</p>
<pre><code>def getTotal(self, carta):  # carta is not needed
    total = 0
    for item in carta:  # work with the current carta, so use self.carta
        item = getPrice, getName  # I guess you want to retrieve the item's price, so use item.price
        total += item
    return total
</code></pre>
<p>Finally, <code>numItems</code> cannot work too (!). If you want to find the carta <a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow noreferrer">length</a> (as <code>carta</code> is a list), do that:</p>
<pre><code>def numItems(self):    #Number of items in cart.
    return len(self.carta)
</code></pre>
<hr/>
<p>Final code with fixes and a right <code>print</code> statement:</p>
<pre><code>class Item():
    """Name and price of Item"""
    def __init__(self, name, price):
        self.name = name
        self.price = price

class User():
    """Getting name of user"""
    def __init__(self, name,budget):
        self.name = name
        self.budget = budget

class Cart():
    """Creating a cart, you can add item in cart and remove it, also u can se your total bill."""

    def __init__(self):
        self.carta = []   #Carta is shopping cart.

    def addItem(self, item):
        self.carta.append(item)  #Adding item in cart.

    def getTotal(self):  #Total bill.
        total = 0
        for item in self.carta:
            total += item.price
        return total

    def numItems(self):    #Number of items in cart.
        return len(self.carta)

def test_kart():
    item1 = Item ("Iphone", 500)
    item2 = Item ("Samsung", 200)
    item3 = Item("Huawei", 400)
    uname = User("Marko", 2000)
    kart = Cart()
    kart.addItem(item1)
    kart.addItem(item2)
    kart.addItem(item3)
    print('Hi %s, your total bill is $%0.2f, and you have %i items in your cart.' % (uname.name, kart.getTotal(), kart.numItems()))

test_kart()
</code></pre>
<p>We can do a lot more pythonic, but it seems you are learning Python, so try to understand that snippet correctly and then try to optimize, if wanted and needed. And read <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">that tutorial</a> :)</p>
</div>
<div class="post-text" itemprop="text">
<p>The class <code>Cart</code> already wraps the list of items contained in the cart. You don't need to pass any argument to <code>getTotal</code>. The call is correct; the definition is not.</p>
<p><code>addItem</code> <em>does</em> need an argument, but it's the item to add to the cart, not the cart itself. Your current implementation only adds the number 1 to the cart on each call, not the first argument.</p>
<p>Likewise, <code>numItems</code> just needs to return the length of <code>self.carta</code>, not take any additional arguments.</p>
<pre><code>class Cart:
"""Creating a cart, you can add item in cart and remove it, also u can se your total bill."""

    def __init__(self):
        self.carta = []

    def add_item(self, item):
        self.carta.append(item)

    def get_total(self):
        total = 0
        for item in self.carta:
            total += item.price
        return total

    def num_items(self):
        return len(self.carta)
</code></pre>
<p>Python isn't Java. You don't need to define separate functions for simple attribute access (as I've hinted by my definition of <code>get_total</code> above, accessing <code>item.price</code> directly).</p>
<pre><code>class Item:
"""Name and price of Item"""
    def __init__(self, name, price):
        self.name = name
        self.price = price

class User:
"""Getting name of user"""
    def __init__(self, name,budget):
        self.name = name
        self.budget = budget
</code></pre>
<p>Finally, you want to either <em>return</em> (not print) a string from <code>kart</code>, or dispense with the <code>final=...</code>/<code>print(final)</code> pair. </p>
</div>
<div class="post-text" itemprop="text">
<p>Well, in your print you call <code>kart.getTotal()</code> but in the definition of Cart, you have this method <code>def getTotal(self,carta)</code>. 
So when you call it you have to pass 2 arguments. </p>
<p>You only pass one wich is <code>kart</code>. So if i understood properly what you're trying to do you have to change the method getTotal to <code>def getTotal(self)</code> as you don't use the parameter carta</p>
</div>
<span class="comment-copy">The error tells you exactly what is wrong and where. What is confusing you about that message?</span>
<span class="comment-copy"><code>kart.getTotal()</code> - that rather looks like a call with <i>zero</i> parameters to me ...</span>
<span class="comment-copy">@CBroe the <code>self</code> parameter is implicit. Don't add to the confusion.</span>
<span class="comment-copy">@Boldewyn wasn’t trying to. Don’t know the specifics of how this works, just pointing out what seemed to be an obvious mistake from the code shown.</span>
<span class="comment-copy">You don't need most of those getters. Python isn't Java.</span>
