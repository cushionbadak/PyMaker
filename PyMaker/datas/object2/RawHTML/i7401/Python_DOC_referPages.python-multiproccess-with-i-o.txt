<div class="post-text" itemprop="text">
<p>So I have a python script that is running continuously that can be sent messages. It takes the content of the messages and runs a search on a few APIs and then replies with the results from that search. Currently I am using async/await, which is working so far, but what happens is that if it receives a message while it is already working on one, it will wait until it is done with the message it is currently searching for before starting the one it received. </p>
<p>I would like to have it set up so that it can be processing multiple messages at a time, as most of the wait is waiting on the APIs to respond. Is multiprocessing what I should be using here, and if so is there a way for me to have the multiprocessing function just be idling until a message gets added, and then send that message off to the multiprocessing function. It seems like I should be using a queue, but most of the Documentation says that the queues close once there is no more to work on. One thing that is necessary is that if I have a specific amount of processes working (eg 4 processes) and i have &gt;4 messages, it stores the extra messages, and adds them to the next process that is freed up.</p>
<p>Something like this:(really bad psuedocode)</p>
<pre><code>def runOnMessageReceive(message)
    &lt;run a regex here and extract the text i want to search for&gt;
    addToSearchQueue(text)

def addToSearchQueue(text)
    &lt;here is where it would add it to the waiting queue and run it when it has an 
    open process&gt;
    process.run(searchAndPrint(text))

def searchAndPrint(info):
    reply = Module.searchOnlineAPI(info)
    Module.replyToMessage(reply)
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You should rather try to find what is "blocking" exactly. The point of asyncio is exactly what you want, avoid blocking pending tasks while you wait for another. Multiprocessing or multithreading does not seem to be the way to go here. Proper use of asyncio will be an order of magnitude better than any multiprocessing for this kind of use-case. If anything hangs, either you're misusing asyncio (calling a blocking function for instance) or you're limited by the QoS of your message queue (which is probably configurable).</p>
</div>
<span class="comment-copy">So what you are saying is that I can use the asyncio to be able to have multiple messages being processed at the same time? Is there a limit to this at all? Because the application isn't hanging at all, it will show that it is receiving the messages even while it is processing one, but it will not start processing the second message until the first one is done.</span>
<span class="comment-copy">So the ideal project flow would be that everytime the python script receives a message, it spawns a task that receives the info from the APIs, formats it into a message, and sends that message out, and then kills the task. I don't ever return any info back to the main program after the searchAndReply task is started. Is Asyncio still what I should be using for this? To me it seems more intuitive to be starting another process separate from the main program, but I don't really understand how Asnycio works, so it may already be doing that.</span>
<span class="comment-copy">If your task is supposed to wait most of the time (which seems to be the case from what I understand), then asyncio will be more adapted. Threading or processing are generally more suited for CPU-intensive operations. You probably want to <code>create_task</code> each time you receive a message in the queue. <code>create_task</code> will not block you from consuming further messages (just like starting a new thread, except that it doesn't). Don't <code>await</code> in <code>onMessage</code>, that would block. You might also want to take a look at the <a href="https://docs.python.org/3/library/asyncio-queue.html" rel="nofollow noreferrer">asyncio <code>Queue</code> implementation</a>.</span>
<span class="comment-copy">With parallelism, you are limited by the pool size or your CPU. It's much more pervasive. Asyncio does not have such limitations because it's just different. Not suited for the same use-case. If your CPU sleeps most of the time, you want asyncio to maximize CPU utilisation. If your CPU works most of the time, you want parallelism to take full advantage of all the cores. In your case, with 8 threads you would consume 8 messages at once maximum (assuming you allocate 8 cores for this, and forgetting about the GIL and other details). Async is an order of magnitude better than that on a single thd</span>
<span class="comment-copy">Awesome thanks so much for your help - it really helped me understand what asyncio is capable of.</span>
