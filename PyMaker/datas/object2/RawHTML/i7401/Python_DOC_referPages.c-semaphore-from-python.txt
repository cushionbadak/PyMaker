<div class="post-text" itemprop="text">
<p>I have a C code in which I have implemented a locking mechanism using semaphore. The basic flow is as below -</p>
<pre><code>int s=1;
void wait(){

    while(s&lt;=0);
    s--;
}

void pipeData(paTestData *data){

    wait();

    SAMPLE *tempBuff = (SAMPLE*)malloc(sizeof(SAMPLE)*FRAME_SIZE);
    int readCount   = FRAME_SIZE;

    while(readCount &gt; 0){

        tempBuff[FRAME_SIZE - readCount] = data-&gt;sampleValues[data-&gt;readFromCB];        
        data-&gt;readFromCB++;
        readCount--;
    }

    fd = open(fifoPipe, O_WRONLY);

    write(fd, tempBuff, sizeof(tempBuff));
    close(fd);

    free(tempBuff);

}

int callBack(){

    // Perform data acquisition and call foo

   foo();

    // Rest code here
}
</code></pre>
<p>The python code at the reader end is as below:</p>
<pre><code>with open(FIFO, 'rb') as fifo:
                print("Pipe opened")
                count=0
                while count&lt;framelen:
                    Rsample = fifo.read()
                    frame = np.fromstring(Rsample,dtype=np.float32)

                    if (len(frame)&gt;0):
                        print(frame)
                        count=count + len(frame)
</code></pre>
<p>The data on the other end of the <code>PIPE</code> is being processed by a Python Script. The problem is that the reading of the PIPE on python end is not able to fetch the full set of the data.</p>
<p>It's because I had read that for <code>named PIPE</code> for every write, there should a reader or else the pipe open is blocked during next iteration.</p>
<p>In this case, after writing <code>10 samples</code> to the PIPE, the python's reader implementation is able to <code>read only first two samples</code> and the PIPE is readily available for next write set.</p>
<p>This is the reason why I was looking for a <code>locking mechanism</code> for the same.</p>
<p>My doubts are -</p>
<blockquote>
<p>1) Is there a way in which I could increment the s variable (kind of
  what a signal() function in C would do) every time the python script
  is finished polling up all data from PIPE.</p>
<p>2) Is there any other smooth implementation of such a problem, any
  other IPC technique between C and Python enabling lock mechanism?</p>
</blockquote>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>write(fd, tempBuff, sizeof(tempBuff));
</code></pre>
<p>The above line only write 4/8 bytes (32-bit/64-bit) of data from tempBuff to pipe</p>
<p>If you want to write all data within tempBuff, you need to change the line to</p>
<pre><code>write(fd, tempBuff, sizeof(SAMPLE)*FRAME_SIZE);
</code></pre>
</div>
<span class="comment-copy">I think you need to explain your <i>actual</i> problem a bit better. What's the condition you're waiting for? There's no problem just writing to a pipe, it will block as soon as the pipe buffer is full. Apart from that, your implementation of the semaphore isn't atomic, so it's more or less useless with concurrency.</span>
<span class="comment-copy">A simple solution for synchronizing processes is using more pipes, where a <i>signal</i> is writing a single character to that pipe (while the other end is in a blocking read)</span>
<span class="comment-copy">I don't see any pipe code.  You say you are "polling", so are you using a non-blocking pipe?  Have you looked at the new-ish asyncio module?  <a href="https://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore" rel="nofollow noreferrer">docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore</a></span>
<span class="comment-copy">@FelixPalmen I think using another <code>PIPE</code> would solve the purpose. Will let you know after implementing it. Thanks!</span>
<span class="comment-copy">Semaphores, and many other such inter-thread signaling, cannot sensibly be implemented outside the OS kenel because threads cannot be blocked in user space.  That, and the XY issue mentioned by the other commenters.</span>
<span class="comment-copy">thankyou, however is there any way in which I can use <code>signal()</code> type of function from python to increment the <code>s</code> variable in C ? I mean is it even possible? This has actually solved my problem but through this implementation I wanted to learn about handling C semaphores from Python Script. Thanks!</span>
<span class="comment-copy">@AshishK what you have in your C code is not a usable semaphore, so better forget about this now.</span>
<span class="comment-copy">@FelixPalmen ok. Thank you so much for your time, I appreciate :)</span>
