<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4481724/convert-a-list-of-characters-into-a-string">Convert a list of characters into a string</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/489999/convert-list-of-ints-to-one-number">Convert list of ints to one number?</a>
<span class="question-originals-answer-count">
                    15 answers
                </span>
</li>
</ul>
</div>
<p>Specifically, I've been trying to make a code that assigns the variable <code>my_list</code> to a non-list variable without any spaces or commas.</p>
<pre><code>my_list= [3, 4, 5, 9]  # Has to be integers  
my_var= ' '  
...
</code></pre>
<p>Expected result at the end:</p>
<pre><code>my_var = 3459  
</code></pre>
<p>However, the problem is that I am able to do the complete opposite, and with letters instead:</p>
<pre><code>variable = 'hello'  
mylist = [ ]  
for item in variable:  
    mylist.append(item)   
print(mylist)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So you need to convert your list into a string. You can use <code>join()</code> for that:</p>
<pre><code>my_var = ''.join(str(x) for x in my_list)
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>Return a string which is the concatenation of the strings in iterable.
  A <code>TypeError</code> will be raised if there are any non-string values in
  iterable, including bytes objects. The separator between elements is
  the string providing this method.</p>
</blockquote>
<hr/>
<p>Or using <code>map()</code>:</p>
<pre><code>my_var = ''.join(map(str, my_list))
</code></pre>
<p>From the <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>Return an iterator that applies function to every item of iterable,
  yielding the results. If additional iterable arguments are passed,
  function must take that many arguments and is applied to the items
  from all iterables in parallel. With multiple iterables, the iterator
  stops when the shortest iterable is exhausted.</p>
</blockquote>
<hr/>
<p>Similarly, if you want <code>my_var</code> to be an <code>int</code> just do <code>int(my_var)</code></p>
<p><strong>Example:</strong></p>
<pre><code>&gt;&gt;&gt; my_list= [3, 4, 5, 9]
&gt;&gt;&gt; my_var = ''.join(str(x) for x in my_list)
&gt;&gt;&gt; my_var
'3459'
&gt;&gt;&gt; int(my_var)
3459
&gt;&gt;&gt; my_var = ''.join(map(str, my_list))
&gt;&gt;&gt; my_var
'3459'
&gt;&gt;&gt; int(my_var)
3459
</code></pre>
</div>
