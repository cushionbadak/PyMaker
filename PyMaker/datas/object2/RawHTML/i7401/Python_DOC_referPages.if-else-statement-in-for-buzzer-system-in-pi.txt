<div class="post-text" itemprop="text">
<p>I made a buzzer program for my raspberry pi. I want the program to be for security: If my door is open for too long (my door has a magnetic sensor), the buzzer will buzz. As soon as the door is closed, the buzzer will stop. However, I noticed that the buzzer has a delay for as long as it takes (time.sleep(10)) before the buzzer rings. It seems like my code loops the if statement before it stops. I want my buzzer to stop as soon as the door closes. Can someone help me with my code?</p>
<pre><code>import time
import RPi.GPIO as gpio

buzzer = 11
door = 3

gpio.setmode(gpio.BOARD)
gpio.setwarnings(False)
gpio.setup(buzzer, gpio.OUT)
gpio.setup(door, gpio.IN, pull_up_down=gpio.PUD_UP)

while True:
    if gpio.output(door):
        time.sleep(10)
        gpio.output(buzzer, True)
    else:
        gpio.output(buzzer, False)

gpio.cleanup()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a fairly simple answer, it would be best to have some tracker that updates every second.</p>
<pre><code>seconds_open = 0
while True:
    if gpio.output(door):
        seconds_open += 1
        if seconds_open == 10:
            gpio.output(buzzer, True)
    else:
        gpio.output(buzzer, False)
        seconds_open = 0

    time.sleep(1)
</code></pre>
<p>Note: when you close the door, the buzzer will shut off at the second marks, so it might delay slightly. You could always increase the accuracy by changing the increment and duration of sleep. Or you could use the Gyppo's answer using threading. EDIT: Gyppo pointed out that if you do decide to use floating point sleep/counters, you need to change the if statement to:</p>
<pre><code>if seconds_open &gt;= 10:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think that <code>sleep</code> statement is doing what you want it to. At the moment, as soon as you open the door the <code>sleep</code> timer begins, and after 10s the buzzer fires (even if you've since closed the door). Python steps through your code line-by-line, and doesn't progress to <code>gpio.output(buzzer, True)</code> (and then back to the start of the loop) until after it's waited 10s. During that 10s Python isn't doing anything else, <code>sleep</code> is a 'blocking' function.</p>
<p>It might be worth looking into <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">threading</a>, which has a 'non-blocking' sleep called <code>Timer</code>. You could have something like</p>
<pre><code>while True:
    if door_is_open:
        Timer(10.0, buzz_if_still_open).start()
</code></pre>
<p>where you've also got:</p>
<pre><code>def buzz_if_still_open():
    if door_is_still_open:
        buzz()
</code></pre>
<p>Using <code>threading</code>'s <code>Timer</code>, Python will continue to happily continue around that main <code>while True</code> loop, and the function <code>buzz_if_still_open</code> will run after 10 seconds.
(This code will still buzz if you quickly shut the door and then open it, fixing that is left as an exercise for the reader :P )</p>
</div>
<div class="post-text" itemprop="text">
<p>You could try using multiple <code>while</code> loops:</p>
<pre><code>while True:
    if gpio.output(door):
        time.sleep(10)
        if gpio.output(door):
            gpio.output(buzzer, True)
            while True:
                if not gpio.output(door):
                    gpio.output(buzzer, False)
                    break
        else:
            gpio.output(buzzer, False)
    else:
        gpio.output(buzzer, False)
</code></pre>
<p>This works by testing if the door is open, waiting 10 seconds. If its still open the buzzer goes off and then it goes into a loop till the door is closed where it breaks out of the loop.</p>
<p>Edit:
added <code>else</code> statement as possible fix</p>
</div>
<span class="comment-copy">What is the purpose of the 10 second delay?</span>
<span class="comment-copy">@jacoblaw 10 seconds before alarm goes off. It's supposed to be a security system.</span>
<span class="comment-copy">Ok. Can you confirm that this is what you want: If door is openened, start timer for 10 seconds. Then, after 10 seconds sound alarm. if door is closed, turn off alarm. repeat forever.</span>
<span class="comment-copy">@jacoblaw Yes, it is!</span>
<span class="comment-copy">No, with this logic, you would be alarming the buzzer in 10 seconds AFTER it opens regardless if you close the door or not within those 10 seconds</span>
<span class="comment-copy">Thank you very much! Your tracker idea is brilliant!</span>
<span class="comment-copy">This is nice and simple, but you might want to test <code>if seconds_open &gt;= 10</code> if you're using split-second (floating-point) sleep times.</span>
<span class="comment-copy">@Gyppo Yes, that's true. I will add that to the note.</span>
<span class="comment-copy">This code doesnt seem to work. The buzzer just goes off as soon as i start the program.</span>
<span class="comment-copy">This code won't work. if door was closed at any time during those 10 seconds, the buzzer will still go off if the final door state is open.</span>
<span class="comment-copy">Now if the door is closed during the 10 seconds the buzzer should be turned off and go back into the main while loop</span>
<span class="comment-copy">@Professor_Joykill the code is sleeping during those 10 seconds, so it won't go back to the main while loop. Let's say you open the door, then the program will go to sleep for 10 seconds. I can do whatever I want during those 10 seconds, but before 10 seconds are over, I leave the door open. Then the program wakes up, sees the door is open, and turns on the buzzer.</span>
