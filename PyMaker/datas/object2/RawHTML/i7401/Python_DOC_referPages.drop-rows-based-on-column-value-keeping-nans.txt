<div class="post-text" itemprop="text">
<p>I have a pandas df (5568, 108) where the column of interest is df.Age, which has some NaNs (303). I want to keep the NaNs but drop some of the outliers.
df.drop(df[df.Age&lt;18]) and df.drop(df[df.Age&gt;90]).</p>
<p>I tried </p>
<pre><code>for index, rows in df.iterrows():
if (df.loc[index, 'Age'] &gt; 0.0 &amp; df.loc[index, 'Age'] &lt; 18.0):
    df.drop(df.iloc[index])
elif (df.loc[index, 'Age'] &gt; 0.0 &amp; df.loc[index, 'Age'] &gt; 90.0):
    df.drop(df.iloc[index])
else:
    continue
</code></pre>
<p>But this results in </p>
<blockquote>
<p>TypeError: unsupported operand type(s) for &amp;: 'float' and 'numpy.float64'</p>
</blockquote>
<p>Any thoughts on how I can achieve this?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is an <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">operator precedence</a> issue. Wrap parentheses. <code>(df.loc[index, 'Age'] &gt; 0.0) &amp; ...</code>, etc. The <code>&amp;</code> is evaluated before the <code>&gt;</code> otherwise, leading to the expression <code>0.0 &amp; df.loc[index, 'Age']</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you need <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#boolean-indexing" rel="nofollow noreferrer"><code>boolean indexing</code></a> with <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.between.html" rel="nofollow noreferrer"><code>between</code></a> and <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.isnull.html" rel="nofollow noreferrer"><code>isnull</code></a> for filtering, what is most common as <code>drop</code> by conditions:</p>
<pre><code>df = pd.DataFrame({'Age':[10,20,90,88,np.nan], 'a': [10,20,40,50,90]})
print (df)
    Age   a
0  10.0  10
1  20.0  20
2  90.0  40
3  88.0  50
4   NaN  90

print ((df['Age'].between(18,90, inclusive=False)) | (df['Age'].isnull()))
0    False
1     True
2    False
3     True
4     True
Name: Age, dtype: bool

df = df[(df['Age'].between(18,90, inclusive=False)) | (df['Age'].isnull())]    
print (df)
    Age   a
1  20.0  20
3  88.0  50
4   NaN  90
</code></pre>
</div>
