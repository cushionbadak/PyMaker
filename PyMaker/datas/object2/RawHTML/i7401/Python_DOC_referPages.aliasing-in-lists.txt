<div class="post-text" itemprop="text">
<p>There is some confusion regarding this. Consider this piece of code.</p>
<pre><code>&gt;&gt;&gt; g=[[10]*3]*3
&gt;&gt;&gt; f=[[10,10,10]]*3
&gt;&gt;&gt; id(g)==id(f)
False
&gt;&gt;&gt; id(g[0][0])==id(f[0][0])
True
</code></pre>
<p>Also, consider this piece of code.</p>
<pre><code>&gt;&gt;&gt; g=[['Aamir']*3]*3
&gt;&gt;&gt; f=[['Aamir','Aamir','Aamir']]*3
&gt;&gt;&gt; id(g)==id(f)
False
&gt;&gt;&gt; id(g[0][0])==id(f[0][0])
True
</code></pre>
<p>If <code>f</code> and <code>g</code> are different objects, then how can their inner elements point to the same memory location?</p>
</div>
<div class="post-text" itemprop="text">
<p>As your question evolved, different iterations of it require different answers:</p>
<h3><code>None</code></h3>
<p><code>None</code> <a href="https://docs.python.org/3/c-api/none.html" rel="nofollow noreferrer">is a singleton</a>, so all references to it refer to the same object and have the same address. This means that, for a given Python process, <code>id(None)</code> always returns the same value. It also means that we can test for <code>None</code> using the <code>is</code> operator:</p>
<pre><code>&lt;expression&gt; is None
</code></pre>
<h3>Strings</h3>
<p>Strings are subject to <a href="https://en.wikipedia.org/wiki/String_interning" rel="nofollow noreferrer">interning</a>, where the interpreter folds identical string literals to conserve storage. More on this in <a href="https://stackoverflow.com/questions/15541404/python-string-interning">Python string interning</a>.</p>
<p>The way this happens to be implemented means that your string example breaks if we replace one of the literals with an expression involving a variable:</p>
<pre><code>&gt;&gt;&gt; aami='Aami'
&gt;&gt;&gt; g=[[aami+'r']*3]*3
&gt;&gt;&gt; f=[['Aamir','Aamir','Aamir']]*3
&gt;&gt;&gt; id(g)==id(f)
False
&gt;&gt;&gt; id(g[0][0])==id(f[0][0])
False
</code></pre>
<h3>Integers</h3>
<p>Interestingly, CPython also chooses to intern small integers:</p>
<pre><code>&gt;&gt;&gt; x=1
&gt;&gt;&gt; y=1
&gt;&gt;&gt; x is y
True
&gt;&gt;&gt; x=100000
&gt;&gt;&gt; y=100000
&gt;&gt;&gt; x is y
False
</code></pre>
<p>More on this in <a href="https://stackoverflow.com/questions/306313/is-operator-behaves-unexpectedly-with-integers">"is" operator behaves unexpectedly with integers</a>.</p>
<p>Concretely, this means that your first example breaks if we try it with much larger integers:</p>
<pre><code>&gt;&gt;&gt; g=[[100000]*3]*3
&gt;&gt;&gt; f=[[100000,100000,100000]]*3
&gt;&gt;&gt; id(g)==id(f)
False
&gt;&gt;&gt; id(g[0][0])==id(f[0][0])
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>None</code> doesn't change homes. Every <code>None</code> object has the same location. Try</p>
<pre><code>&gt;&gt;&gt;check = None
&gt;&gt;&gt;id(check) == id(f[0][0])
</code></pre>
<p>You'll get:</p>
<pre><code>&gt;&gt;&gt;True
</code></pre>
</div>
<span class="comment-copy">It would be redundant to produce a <code>None</code> object in different locations and that's why it is declared as a constant</span>
<span class="comment-copy">Remove the None object. Make it 'aamir' in place of None. The result will remain the same.</span>
<span class="comment-copy">Python also has a string pool and detects that you are declaring the same string over and over</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/15541404/python-string-interning">Python string interning</a></span>
<span class="comment-copy">You changed your question after getting answers - and now the answers don't make any sense!</span>
