<div class="post-text" itemprop="text">
<p>How can I store the users input from the hangman function, so every time the for loop runs it remembers the user has already guessed the letter. </p>
<p>When the hangman function runs the first time, if the user's input is 'gera', that's fine, it should then loop back for a fifth guess; the problem is if the user enters 'mo' now, it won't show like this gera _ _ mo, instead it'll print _ _ _ _ _ _ mo; forgetting the users previous 'gera' input. 
How can I store past inputs so the code recalls what was passed?</p>
<pre><code>def get_guessed_word(secret_word, letters_guessed):

    a = ""
    for char1 in secret_word:
        if char1 in letters_guessed:
                a += char1
        else: 
                a += "_ "

    print(a)







def get_available_letters(letters_guessed):

    a = string.ascii_lowercase
    for char1 in a:
        if char1 in letters_guessed:
           a = a.replace(char1,"")


    print(a)




def hangman(secret_word_user_to_guess):

    secret_word_user_to_guess = 'geranimo'

    for index in range(6,1,-1):
        print('You have', index,'guesses left.')
        #print('Available letters: abcdefghijklmnopqrstuvwxyz')
        letters_guessed = input('Check a word: ')
        get_guessed_word(secret_word_user_to_guess, letters_guessed)
        print('Available letters:')
        get_available_letters(letters_guessed)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do this easily:</p>
<pre><code>result = ""
for char in secret_word:
    if char in letters_guessed:
        result += char
    else:
        result += "_"
</code></pre>
<p>Or, using a generator:</p>
<pre><code>result = "".join(char if char in letters_guessed else "_" for char in secret_word)
</code></pre>
<p>BTW, <code>letters_guessed</code> could be a string (<code>"eikprs"</code>) or, if the order doesn't matter, a <code>set</code>: <code>set("eikprs")</code>.</p>
<hr/>
<p>You can also try this:</p>
<pre><code>result = secret_word.translate("".maketrans(letters_guessed, "_" * len(letters_guessed)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are several ways to solve it like ForceBru already mentioned. But to add one with sets as proposed in the comments: </p>
<pre><code>def g(secret_word, letters_guessed):
    letters = set(secret_word)
    guess = set(letters_guessed)
    for i in letters.difference(guess):
        secret_word=secret_word.replace(i,'_')
    print(secret_word)

secret_word = 'apple'
letters_guessed = ['e', 'i', 'k', 'p', 'r', 's']
print(g(secret_word, letters_guessed) ) #prints '_pp_e'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's look at your function, because there's a concept you don't appear to have:</p>
<pre><code>def g(secret_word, letters_guessed):
    a = []
    for char1 in secret_word:    
        for thing in letters_guessed:
            if thing == char1:            
                a += thing
                break
            elif thing != char1:
                a[secret_word.index(char1)] == '_ '
                break
</code></pre>
<p>The line <code>for char1 in secret_word:</code> iterates over the word, pulling each character into <code>char</code> in turn. There's nothing wrong with this, and pretty much every solution will have to use it.</p>
<p>Next, you do <code>for thing in letters_guessed:</code>. There's a problem with this, as pointed out by @ForceBru, in that Python supplies the <a href="https://docs.python.org/3/reference/expressions.html?highlight=expressions#membership-test-operations" rel="nofollow noreferrer"><code>in</code> and <code>not in</code> operators</a> to do what you're trying to code by hand.</p>
<p>However, when you're just starting out it's okay to re-invent the wheel a few times. If nothing else, it helps you understand what's happening under the hood.</p>
<p>The thing I think you've missed, or misunderstood, is this: when you have <code>char1 == thing</code> you <strong>know</strong> something. You can absolutely state that "yes, this letter has been guessed" and you can proceed to show the letter.</p>
<p>But when that condition <em>isn't true</em> - when <code>char1 != thing</code> - you don't know anything. You can't simply say "oh, if that isn't true then draw an underscore" because <em>you aren't finished checking!</em></p>
<p>Remember that the <code>for thing in letters_guessed:</code> loop is checking each of the letters that have been guessed. This means that even though this particular character in letters_guessed might not match the current character in the word, it's possible that some other character <em>will</em> match, so you have to keep looping.</p>
<p>Something like this:</p>
<pre><code>for char1 in secret_word:
    for thing in letters_guessed:
        if thing == char1:
            a += thing
            break
    else: # 'else' after for means 'if no break command was run'
        a += '_'
</code></pre>
</div>
<span class="comment-copy">I'd use a set for the guesses</span>
<span class="comment-copy">This question is so unclear... The title says <i>"Replacing a guessed <b>word</b> with an underscore."</i> yet the example shows <i>letters</i> being replaced instead of whole <i>words</i>. Even the example itself is confusing: <code>'apple'</code> -&gt; <code>'_ pp_ e'</code> Why there is a space between <code>_</code> and <code>e</code> and why <code>e</code> was not replaced? Was it not in the list of guessed letters?</span>
