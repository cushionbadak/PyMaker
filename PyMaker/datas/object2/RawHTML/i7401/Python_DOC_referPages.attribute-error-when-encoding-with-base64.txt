<div class="post-text" itemprop="text">
<p>I have two keys(secret key and public key) that are generated using curve25519. I want to encode the two keys using base64.safe_b64encode but i keep getting an error. Is there any way I can encode using this?</p>
<p>This is my code:</p>
<pre><code>import libnacl.public
import libnacl.secret
import libnacl.utils
from tinydb import TinyDB
from hashlib import sha256
import json
import base64

    pikeys = libnacl.public.SecretKey()

    piprivkey = pikeys.sk
    pipubkey = pikeys.pk

    piprivkey = base64.safe_b64encode(piprivkey)
    pipubkey = base64.safe_b64encode(pipubkey)

    print("encoded priv", piprivkey)
    print("encoded pub", pipubkey)
</code></pre>
<p>This is the error I got:</p>
<pre><code>Traceback (most recent call last):
File "/home/pi/Desktop/finalcode/pillar1.py", line 130, in &lt;module&gt;
File "/home/pi/Desktop/finalcode/pillar1.py", line 50, in generatepillar1key
piprivkey = base64.safe_b64encode(piprivkey)
AttributeError: 'module' object has no attribute 'safe_b64encode'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason you get this error is because the base64 library does not have a function named <code>safe_base64encode</code>. What do you even mean by <code>safe_base64encode</code>? Why do you want to encode both of your keys with base64? there is a urlsafe encoding function and there is the regular base64 encoding function.</p>
<pre><code>encoded_data = base64.b64encode(data_to_encode)
</code></pre>
<p>or</p>
<pre><code>encoded_data = base64.urlsafe_b64encode(data_to_encode)
</code></pre>
<p>The latter one will just have a different alphabet with <code>-</code> instead of <code>+</code> and <code>_</code> instead of <code>/</code> so it's urlsafe. I'm not sure what you want to do but refer to the docs <a href="https://docs.python.org/2/library/base64.html" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The error is telling you that the function <code>safe_b64encode</code> does not exist in the <code>base64</code> module. Perhaps you meant to use <a href="https://docs.python.org/3.6/library/base64.html#base64.urlsafe_b64encode" rel="nofollow noreferrer"><code>base64.urlsafe_b64encode(s)</code></a>?</p>
</div>
<span class="comment-copy">I'm not sure, but, <code>safe_b64encode</code> is a PHP function...</span>
<span class="comment-copy">thanks, i used the base64.b64encode. However, i cant seem to save the encoded data into json. It gives me another error. File "/usr/lib/python3.4/json/encoder.py", line 173, in default     raise TypeError(repr(o) + " is not JSON serializable") TypeError: b'h\xc7\xb5hZ\x84\x14\xa9i\x81f\xb6\xf7\xee\xadm\xb4\xed\x1b\xa2\xc11\x1b8\xfc\x9d\xd6\x87iD\xc1c' is not JSON serializable</span>
<span class="comment-copy">@JasonSmith I would suggest posting a new question as this is not related to this question but before that you should probably read about the modules you use in your code because some common errors can be solved by reading the docs or looking up the error you got in google.</span>
<span class="comment-copy">But according to this site <a href="http://www.programcreek.com/python/example/68499/base64.safe_b64encode" rel="nofollow noreferrer">programcreek.com/python/example/68499/base64.safe_b64encode</a>, it says there's a function called safe_b64encode from the module base64.</span>
<span class="comment-copy">@JasonSmith I think that is probably out of date. The <a href="https://docs.python.org/3/library/base64.html" rel="nofollow noreferrer">docs</a> describe <code>urlsafe_b64encode</code> as "using the URL- and filesystem-safe alphabet".</span>
<span class="comment-copy">@JasonSmith I looked at the project that what you sent refers to and there is no implementation of such a function. I have no idea why they use this but it for sure does not exist in the base64 library</span>
<span class="comment-copy">I haven't been able to find docs or source for <code>base64</code> any earlier than python 2.7. The module itself was introduced in python 2.4, and may have changed since then. It's always best to trust the official documentation, however there are instances (such as thread Pools in the multiprocessing library) that are not officially documented</span>
<span class="comment-copy">alright, that makes sense. Thanks!</span>
