<div class="post-text" itemprop="text">
<p>I am doing some very basic operations with Python (3.6, but also tested in Python 2.11 - behavior is the same) and dictionaries. Here is the code sample:</p>
<pre><code>max_values = dict()
min_values = dict()

initial_values = {"stat": 2, "value": 5.5}

max_values["zzz"] = initial_values
min_values["zzz"] = initial_values
</code></pre>
<p>So far so good, when I print those dictionaries:</p>
<pre><code>for key, value in max_values.items():
    print("[%s] Key [%s] -&gt; Value [%s]" % ("max_values", key, value))

for key, value in min_values.items():
    print("[%s] Key [%s] -&gt; Value [%s]" % ("min_values", key, value))
</code></pre>
<p>I get my expected results:</p>
<pre><code>[max_values] Key [zzz] -&gt; Value [{'stat': 2, 'value': 5.5}]
[min_values] Key [zzz] -&gt; Value [{'stat': 2, 'value': 5.5}]
</code></pre>
<p>But if I attempt to modify with the values, for example:</p>
<pre><code>min_values["zzz"]["value"] = 1.0
</code></pre>
<p>And do the same print again, I get:</p>
<pre><code>[max_values] Key [zzz] -&gt; Value [{'stat': 2, 'value': 1.0}]
[min_values] Key [zzz] -&gt; Value [{'stat': 2, 'value': 1.0}]
</code></pre>
<p>Question is: Why was the <code>max_values</code> dictionary changed? I have only modified <code>min_values</code>, but this new key assignment for <code>min_value</code> dictionary also modified <code>max_values</code>. Am I doing something wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have only one dict <code>initial_values</code> and both of your dict are refers to the same dict <code>initial_values</code>. You have to copy this dict to get another dict.</p>
<p>Try to:</p>
<pre><code>max_values["zzz"] = initial_values
min_values["zzz"] = dict(initial_values)
</code></pre>
<p>or:</p>
<pre><code>max_values["zzz"] = initial_values
min_values["zzz"] = initial_values.copy()
</code></pre>
<p>And now this constructions:</p>
<pre><code>min_values["zzz"]["value"] = 1.0

for key, value in max_values.items():
    print("[%s] Key [%s] -&gt; Value [%s]" % ("max_values", key, value))

for key, value in min_values.items():
    print("[%s] Key [%s] -&gt; Value [%s]" % ("min_values", key, value))
</code></pre>
<p>Get expected result:</p>
<pre><code>[max_values] Key [zzz] -&gt; Value [{'stat': 2, 'value': 5.5}]
[min_values] Key [zzz] -&gt; Value [{'stat': 2, 'value': 1.0}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's because the max_values and min_values are linked together. That is, they are both referencing initial_values. So if you change one you change the other. One solution would be to use deepcopy.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://i.stack.imgur.com/PSMnc.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/PSMnc.png"/></a></p>
<p>As you can see from the graph, <code>Max_value</code> and <code>Min_value</code> reference to <code>Initial_value</code> , which means <code>Max_value</code> and <code>Min_value</code> link to the address where you create initial_value dictionary. Once you update the value inside of the initial_val, it will also show in both  <code>Max_value</code> and <code>Min_value</code>.</p>
<p>To avoid this problem, you can use <code>from copy import deepcopy.</code></p>
<pre><code>my_dict = {'1': 1, '1': 2}
new_dict= deepcopy(my_dict)
</code></pre>
<p>In this way, it creates a new instance for your old dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because you gave both of the values same dictionary just look at the first two lines of your code.</p>
</div>
<span class="comment-copy">Assingment <b><i>does not copy</i></b>. Both of the dictionaries key's have a reference to the same dictionary. You need to explicitly tell Python to make a copy of <code>initial_values</code> for both keys.</span>
<span class="comment-copy"><code>max_values["zzz"] = dict(initial_values)</code></span>
<span class="comment-copy">@Jean-Fran√ßoisFabre Or <code>max_values["zzz"] = initial_values.copy()</code>.</span>
<span class="comment-copy">Perhaps <a href="https://stackoverflow.com/questions/19951816/python-changes-to-my-copy-variable-affect-the-original-variable">this</a> would work. It's not an exact duplicate, but it explains what assignment does in Python.</span>
<span class="comment-copy">@ChristianDean you are correct, it's intended functionality in Python (and I assume in other languages as well). For anyone else willing to read a bit more about the difference between assignment and copying this link can help you: <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">docs.python.org/3/library/copy.html</a></span>
<span class="comment-copy">That was the case! Thanks for the visual representation.</span>
