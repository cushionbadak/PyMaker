<div class="post-text" itemprop="text">
<p>I need to compute all the possible combinations of an equation, given the number of parameters that are included in this equation. </p>
<p>The available operations are the usual: <code>op = ['+', '-', '/', '*']</code></p>
<p>For example, if I have an equation with two parameters the available combinations will be:</p>
<pre><code>a + b
a - b
a / b
a * b
b + a
b - a
b / a
b * a 
</code></pre>
<p>If I have three parameters then the available combinations will be (96 combinations in total):</p>
<pre><code>a + b + c 
a + b - c
a + b / c
..
a - b + c
..
b + a + c
..
c + a + c
..
</code></pre>
<p>and so on.</p>
<p>I know that there is a similar question <a href="https://stackoverflow.com/questions/44675217/compute-possible-combinations-of-an-equation">here</a> however, I am not sure how to modify the code in order to generalise it for N number of parameters. </p>
<p><strong>EDIT:</strong></p>
<p>The code for computing the combinations when 3 parameters are available is the following: </p>
<pre><code>import itertools

symbol = ['a', 'b', 'c']
op = ['+', '-', '/', '*']

for symbols in itertools.permutations(symbol):
    for ops in itertools.product(op, repeat=2):
        print "(%s %s %s) %s %s" % (
            symbols[0], ops[0], symbols[1], ops[1], symbols[2])
</code></pre>
<p>I thought that for N parameters <code>symbol</code> should become      </p>
<pre><code>import string
symbol = list(string.ascii_lowercase[:len(numbers)])
</code></pre>
<p>where <code>len(numbers)</code> is the number of parameters.</p>
<p>I am not sure how to modify the elements within <code>append()</code> in order to match any number of parameters N. </p>
</div>
<div class="post-text" itemprop="text">
<p>You just have to modify the code in the answer in the link to work for you..</p>
<pre><code>import itertools

symbol = ['a', 'b', 'c', 'd']
op = ['+', '-', '/', '*']

for symbols in itertools.permutations(symbol):
    for ops in itertools.product(op, repeat=len(symbol)-1):
        print(' {} '.join(symbols).format(*ops))  # kudos @a_guest
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement" rel="nofollow noreferrer"><code>itertools.combinations_with_replacement</code></a> for the operators as follows:</p>
<pre><code>import itertools as it

# Define your symbols here.
# For example:
symbols = ['a', 'b', 'c']
op = ['+', '-', '/', '*']

operators_choices = it.combinations_with_replacement(
    op,
    len(symbols)-1
)
symbols_choices = it.permutations(symbols)

for symbols, operators in it.product(symbols_choices, operators_choices):
    print('{}'.join(symbols).format(*operators))
</code></pre>
<p>Here we are using <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> for computing all possible combinations between the symbols and the operators.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is already answered, refer <a href="https://stackoverflow.com/a/44675422/3603490">https://stackoverflow.com/a/44675422/3603490</a></p>
<pre><code>import itertools

symbol = ['a', 'b', 'c']
op = ['+', '-', '/', '*']

for symbols in itertools.permutations(symbol):
    for ops in itertools.product(op, repeat=2):
        print "%s %s %s %s %s" % (
            symbols[0], ops[0], symbols[1], ops[1], symbols[2])
</code></pre>
<p>Output:</p>
<pre><code>a + b + c
a + b - c
a + b / c
a + b * c
a - b + c
a - b - c
a - b / c
a - b * c
a / b + c
a / b - c
a / b / c
a / b * c
a * b + c
.
.
</code></pre>
</div>
<span class="comment-copy">the question in the link you are providing already accounts for that. Just modify the list in the answer (<code>symbol = ['a', 'b', 'c']</code>) with as many parameters you want. It will still work</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/44675217/compute-possible-combinations-of-an-equation">Compute possible combinations of an equation</a></span>
<span class="comment-copy">I don' think that this is the case. For instance, if we change to <code>symbol = ['a', 'b']</code>, the list of combinations will be <code>['a + b', 'a + b', 'a + b', 'a + b', 'a - b', 'a - b', 'a - b', 'a - b', 'a / b', 'a / b', 'a / b', 'a / b', 'a * b', 'a * b', 'a * b', 'a * b', 'b + a', 'b + a', 'b + a', 'b + a', 'b - a', 'b - a', 'b - a', 'b - a', 'b / a', 'b / a', 'b / a', 'b / a', 'b * a', 'b * a', 'b * a', 'b * a']</code> which is wrong. Furthermore, the elements within <code>append()</code> should also be modified according to the number of parameters.</span>
<span class="comment-copy">Much more readable is <code>print('{}'.join(symbols).format(*ops))</code>.</span>
<span class="comment-copy">@a_guest Brilliant. Thanks!</span>
<span class="comment-copy">If it has already been answered, please don't answer it again.</span>
