<div class="post-text" itemprop="text">
<p>I wrote the following function in order to implement my own binary search</p>
<pre><code>def bisect(input, target):
    mid = len(input)/ 2
    if len(input) == 1:
        if input[0] == target:
            return 1
        else:
            return None
    elif input[mid] &gt; target:
        bisect(input[:mid], target)
    elif input[mid] &lt;= target:
        bisect(input[mid:], target)
</code></pre>
<p>I know my implementation is off, but I am more curious in understanding the recursive stack here.</p>
<p>When I call <code>bisect(['d','e'], 'd')</code>, my function should return the value of </p>
<pre><code>bisect(['d'], 'd')
</code></pre>
<p>but instead it returns None. Further, when I call     <code>bisect(['d'], 'd')</code>directly, I get the correct value of 0. How is this possible?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are ignoring the return values of recursive calls. You need to <em>explicitly</em> return those too:</p>
<pre><code>elif input[mid] &gt; target:
    return bisect(input[:mid], target)
elif input[mid] &lt;= target:
    return bisect(input[mid:], target)
</code></pre>
<p>Recursive calls are just like any other function call; they return a result to the caller. If you ignore the return value and the calling function then ends, you end up with that calling function then returning <code>None</code> instead.</p>
</div>
