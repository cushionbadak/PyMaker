<div class="post-text" itemprop="text">
<p>I am trying access android camera using player module, but I got the following error and I don't know how to resolve it.</p>
<pre><code>jnius.jnius.JavaException:` JVM exception occurred: file://212019_193209.jpg exposed beyond app through `ClipData.Item.getUri()
</code></pre>
<p>Here is my code.</p>
<pre><code>from kivy.app import App 
from kivy.uix.boxlayout import BoxLayout
from kivy.lang import Builder

from plyer import camera

import time

Builder.load_string('''
&lt;CameraScreen&gt;:
    orientation: 'vertical'
    Image:
        id: image
    Button:
        size_hint_y: None
        height: '100dp'
        text: "Acess Camera"
        on_release: root.acess_camera()

''')

class CameraScreen(BoxLayout):

    def acess_camera(self):
        name_photo = time.strftime("%d%Y_%H%M%S") + ".jpg"
        print(name_photo)
        camera.take_picture(filename=name_photo, on_complete=self.camera_callback)

    def camera_callback(self, filename):
        print("filename: ", filename)
        self.ids.image.source = filename

class CameraApp(App):
    def build(self):
        return CameraScreen()

CameraApp().run()
</code></pre>
<p>My buildozer.spec:</p>
<pre><code>[app]

# (str) Title of your application title = Camera Teste

# (str) Package name package.name = camerateste

# (str) Package domain (needed for android/ios packaging) package.domain = jeferson.developer.camerateste

# (str) Source code where the main.py live source.dir = .

# (list) Source files to include (let empty to include all the files) source.include_exts = py,png,jpg,kv,atlas

# (list) List of inclusions using pattern matching
#source.include_patterns = assets/*,images/*.png

# (list) Source files to exclude (let empty to not exclude anything)
#source.exclude_exts = spec

# (list) List of directory to exclude (let empty to not exclude anything)
#source.exclude_dirs = tests, bin

# (list) List of exclusions using pattern matching
#source.exclude_patterns = license,images/*/*.jpg

# (str) Application versioning (method 1) version = 0.1

# (str) Application versioning (method 2)
# version.regex = __version__ = ['"](.*)['"]
# version.filename = %(source.dir)s/main.py

# (list) Application requirements
# comma separated e.g. requirements = sqlite3,kivy requirements = python2,kivy,plyer,android

# (str) Custom source folders for requirements
# Sets custom source for any requirements with recipes
# requirements.source.kivy = ../../kivy

# (list) Garden requirements
#garden_requirements =

# (str) Presplash of the application
#presplash.filename = %(source.dir)s/data/presplash.png

# (str) Icon of the application
#icon.filename = %(source.dir)s/data/icon.png

# (str) Supported orientation (one of landscape, sensorLandscape, portrait or all) orientation = portrait

# (list) List of service to declare
#services = NAME:ENTRYPOINT_TO_PY,NAME2:ENTRYPOINT2_TO_PY

#
# OSX Specific
#

#
# author = Â© Copyright Info

# change the major version of python used by the app osx.python_version = 3

# Kivy version to use osx.kivy_version = 1.9.1

#
# Android specific
#

# (bool) Indicate if the application should be fullscreen or not fullscreen = 0

# (string) Presplash background color (for new android toolchain)
# Supported formats are: #RRGGBB #AARRGGBB or one of the following names:
# red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray,
# darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy,
# olive, purple, silver, teal.
#android.presplash_color = #FFFFFF

# (list) Permissions android.permissions = INTERNET, CAMERA

# (int) Target Android API, should be as high as possible.
#android.api = 27

# (int) Minimum API your APK will support.
#android.minapi = 21

# (int) Android SDK version to use
#android.sdk = 20

# (str) Android NDK version to use
#android.ndk = 17c

# (int) Android NDK API to use. This is the minimum API your app will support, it should usually match android.minapi.
#android.ndk_api = 21

# (bool) Use --private data storage (True) or --dir public storage (False)
#android.private_storage = True

# (str) Android NDK directory (if empty, it will be automatically downloaded.)
#android.ndk_path =

# (str) Android SDK directory (if empty, it will be automatically downloaded.)
#android.sdk_path =

# (str) ANT directory (if empty, it will be automatically downloaded.)
#android.ant_path =

# (bool) If True, then skip trying to update the Android sdk
# This can be useful to avoid excess Internet downloads or save time
# when an update is due and you just want to test/build your package
# android.skip_update = False

# (bool) If True, then automatically accept SDK license
# agreements. This is intended for automation only. If set to False,
# the default, you will be shown the license when first running
# buildozer.
# android.accept_sdk_license = False

# (str) Android entry point, default is ok for Kivy-based app
#android.entrypoint = org.renpy.android.PythonActivity

# (list) Pattern to whitelist for the whole project
#android.whitelist =

# (str) Path to a custom whitelist file
#android.whitelist_src =

# (str) Path to a custom blacklist file
#android.blacklist_src =

# (list) List of Java .jar files to add to the libs so that pyjnius can access
# their classes. Don't add jars that you do not need, since extra jars can slow
# down the build process. Allows wildcards matching, for example:
# OUYA-ODK/libs/*.jar
#android.add_jars = foo.jar,bar.jar,path/to/more/*.jar

# (list) List of Java files to add to the android project (can be java or a
# directory containing the files)
#android.add_src =

# (list) Android AAR archives to add (currently works only with sdl2_gradle
# bootstrap)
#android.add_aars =

# (list) Gradle dependencies to add (currently works only with sdl2_gradle
# bootstrap)
#android.gradle_dependencies =

# (list) Java classes to add as activities to the manifest.
#android.add_activites = com.example.ExampleActivity

# (str) python-for-android branch to use, defaults to master
#p4a.branch = master

# (str) OUYA Console category. Should be one of GAME or APP
# If you leave this blank, OUYA support will not be enabled
#android.ouya.category = GAME

# (str) Filename of OUYA Console icon. It must be a 732x412 png image.
#android.ouya.icon.filename = %(source.dir)s/data/ouya_icon.png

# (str) XML file to include as an intent filters in &lt;activity&gt; tag
#android.manifest.intent_filters =

# (str) launchMode to set for the main activity
#android.manifest.launch_mode = standard

# (list) Android additional libraries to copy into libs/armeabi
#android.add_libs_armeabi = libs/android/*.so
#android.add_libs_armeabi_v7a = libs/android-v7/*.so
#android.add_libs_x86 = libs/android-x86/*.so
#android.add_libs_mips = libs/android-mips/*.so

# (bool) Indicate whether the screen should stay on
# Don't forget to add the WAKE_LOCK permission if you set this to True
#android.wakelock = False

# (list) Android application meta-data to set (key=value format)
#android.meta_data =

# (list) Android library project to add (will be added in the
# project.properties automatically.)
#android.library_references =

# (str) Android logcat filters to use
#android.logcat_filters = *:S python:D

# (bool) Copy library instead of making a libpymodules.so
#android.copy_libs = 1

# (str) The Android arch to build for, choices: armeabi-v7a, arm64-v8a, x86 android.arch = armeabi-v7a

#
# Python for android (p4a) specific
#

# (str) python-for-android git clone directory (if empty, it will be automatically cloned from github)
#p4a.source_dir =

# (str) The directory in which python-for-android should look for your own build recipes (if any)
#p4a.local_recipes =

# (str) Filename to the hook for p4a
#p4a.hook =

# (str) Bootstrap to use for android builds
# p4a.bootstrap = sdl2

# (int) port number to specify an explicit --port= p4a argument (eg for bootstrap flask)
#p4a.port =


#
# iOS specific
#

# (str) Path to a custom kivy-ios folder
#ios.kivy_ios_dir = ../kivy-ios
# Alternately, specify the URL and branch of a git checkout: ios.kivy_ios_url = https://github.com/kivy/kivy-ios ios.kivy_ios_branch = master

# Another platform dependency: ios-deploy
# Uncomment to use a custom checkout
#ios.ios_deploy_dir = ../ios_deploy
# Or specify URL and branch ios.ios_deploy_url = https://github.com/phonegap/ios-deploy ios.ios_deploy_branch = 1.7.0

# (str) Name of the certificate to use for signing the debug version
# Get a list of available identities: buildozer ios list_identities
#ios.codesign.debug = "iPhone Developer: &lt;lastname&gt; &lt;firstname&gt; (&lt;hexstring&gt;)"

# (str) Name of the certificate to use for signing the release version
#ios.codesign.release = %(ios.codesign.debug)s


[buildozer]

# (int) Log level (0 = error only, 1 = info, 2 = debug (with command output)) log_level = 2

# (int) Display warning if buildozer is run as root (0 = False, 1 = True) warn_on_root = 1

# (str) Path to build artifact storage, absolute or relative to spec file
# build_dir = ./.buildozer

# (str) Path to build output (i.e. .apk, .ipa) storage
# bin_dir = ./bin

#    -----------------------------------------------------------------------------
#    List as sections
#
#    You can define all the "list" as [section:key].
#    Each line will be considered as a option to the list.
#    Let's take [app] / source.exclude_patterns.
#    Instead of doing:
#
#[app]
#source.exclude_patterns = license,data/audio/*.wav,data/images/original/*
#
#    This can be translated into:
#
#[app:source.exclude_patterns]
#license
#data/audio/*.wav
#data/images/original/*
#


#    -----------------------------------------------------------------------------
#    Profiles
#
#    You can extend section / key with a profile
#    For example, you want to deploy a demo version of your application without
#    HD content. You could first change the title to add "(demo)" in the name
#    and extend the excluded directories to remove the HD content.
#
#[app@demo]
#title = My Application (demo)
#
#[app:source.exclude_patterns@demo]
#images/hd/*
#
#    Then, invoke the command line with the "demo" profile:
#
#buildozer --profile demo android debug
</code></pre>
<p>Any idea to resolve it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your your app runs fine on Acer Iconia Tablet. The only problem is that after taking the picture, it did not show the picture in the Kivy App.</p>
<p>I am using the following versions to create the apk file:</p>
<ul>
<li>Buildozer v0.39</li>
<li>Cython 0.28.6</li>
<li>Python 3.6.7</li>
<li>Xubuntu 18.04 Bionic Beaver</li>
</ul>
<p><a href="https://i.stack.imgur.com/nZIvA.png" rel="nofollow noreferrer"><img alt="Versions" src="https://i.stack.imgur.com/nZIvA.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>I have the same problem now, and some other people too (<a href="https://github.com/kivy/plyer/issues/500" rel="nofollow noreferrer">e.g. recently opened issue on kivy/plyer</a>)</p>
<p>Environment:</p>
<ol>
<li>Python 3.6.7</li>
<li>Android API=27</li>
<li>Android 8.1 Oreo</li>
<li>Architecture: arm64-v8a</li>
</ol>
<p>It seems, that this problem appears, if you use SDK&gt;=24. Detailed description is here:</p>
<ol>
<li><a href="https://inthecheesefactory.com/blog/how-to-share-access-to-file-with-fileprovider-on-android-nougat/en" rel="nofollow noreferrer">https://inthecheesefactory.com/blog/how-to-share-access-to-file-with-fileprovider-on-android-nougat/en</a></li>
<li><a href="https://developer.android.com/training/secure-file-sharing/setup-sharing" rel="nofollow noreferrer">https://developer.android.com/training/secure-file-sharing/setup-sharing</a> </li>
</ol>
<p>Here you may find a solution for the same JVM Exception, but for Java:
<a href="https://stackoverflow.com/questions/48117511/exposed-beyond-app-through-clipdata-item-geturi">exposed beyond app through ClipData.Item.getUri</a></p>
<p>If someone knows how to adapt this solution: use this piece of code in Python with Plyer/Jnius, or use <code>content:/</code> instead of <code>file:/</code>, it would be great:</p>
<pre><code>StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();
StrictMode.setVmPolicy(builder.build());
</code></pre>
</div>
<span class="comment-copy">Not sure if this is related to your error, but you will need this line in your <code>buildozer.spec</code>: <code>android.permissions = CAMERA</code></span>
<span class="comment-copy">I rebuild APK using this permission and the error persists.</span>
<span class="comment-copy">I test in Moto Z2 Play (Android 8.0.0) and Moto G5 (Android 8.1.0), in both I get this error. The error occurs when app tries access camera, so it crashes. What version API you compiled the APK?</span>
<span class="comment-copy">The API version is 27.</span>
<span class="comment-copy">And what the Android version?</span>
<span class="comment-copy">Yes, I  which opened this issue in github of module plyer. I think to be possible an update in module for resolve this error. For a while, I'am try study for implement a solution.</span>
<span class="comment-copy">@JefersonVinÃ­cius "I which opened this issue", oh excuse me, i'm sorry, i see now :)    I suppose, that it is possible to change <code>plyer.camera.take_picture</code> method with using <code>content:/</code></span>
<span class="comment-copy">All right :D, yes, is a possibility</span>
<span class="comment-copy">Have you succeed? I've found out how to run Camera activity, but now i'm solving a problem how to save photo to internal or external storage (at least somewhere) when it's made. If I'll succeed, I'll share my experience.</span>
