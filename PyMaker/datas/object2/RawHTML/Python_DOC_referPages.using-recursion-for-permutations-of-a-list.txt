<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13109274/python-recursion-permutations">Python recursion permutations</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>So been struggling with this one, I'm close and have finally found a way to somewhat desired output now repeats in generated list.</p>
<pre><code>input['a','r','t']

def permutations(string_list):

    if len(string_list) &lt;= 1:
        return [string_list]

    perm_list = []
    for letter_index in range(len(string_list)):
        perms_1 = string_list[letter_index]
        rest = string_list[:letter_index] + string_list[letter_index + 1:]
        for perms_2 in permutations(rest):
            perm_list.append([perms_1] + perms_2)

    return perm_list
</code></pre>
<p>output</p>
<pre><code>[[['a', 'r', 't'], ['a', 't', 'r'], ['r', 'a', 't'], ['r', 't', 'a'],
  ['t', 'a', 'r'], ['t', 'r', 'a']], [['a', 'r', 't'], ['a', 't', 'r'],
  ['r', 'a', 't'],
.........repeats.......repeats..
..for quite sometime but not infinite....]]]
</code></pre>
<p>DESIRED output </p>
<pre><code>[['a', 'r', 't'], ['a', 't', 'r'], ['r', 'a', 't'], ['r', 't', 'a'],
 ['t', 'a', 'r'], ['t', 'r', 'a']]
</code></pre>
<p>so it's permutation but what is tripping me up is having to use the list of strings and outputting a list of lists of strings. I have redone this multiple time and have the basis of recursive permutations down if I was just using a string 'art' as input or having a list output ['art','atr','rat',ect..] just not sure where I am going wrong. No import of itertools allowed and really wish I didn't need for loops but using comprehension recursion call gives me same results...any help or pointers appreciated. Not looking for just a redo I want to understand....</p>
</div>
<div class="post-text" itemprop="text">
<p>Using this, you get the desired output:</p>
<pre><code>from itertools import permutations

inp = ['a', 'r', 't']

list(permutations(inp, 3))
</code></pre>
<p>Out:</p>
<pre><code>[('a', 'r', 't'),
 ('a', 't', 'r'),
 ('r', 'a', 't'),
 ('r', 't', 'a'),
 ('t', 'a', 'r'),
 ('t', 'r', 'a')]
</code></pre>
<p>The result is a list of tuples, but you can convert them to lists if you want.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def permute(input, l, r, arr = []):
    if l == r:
        arr.append(input)
    else:
        for i in range(l, r + 1):
            input[l], input[i] = input[i], input[l]
            permute(input, l + 1, r, arr)
            input[l], input[i] = input[i], input[l]

    return arr

input = ['a','r','t']
n = len(input)
print (permute(input, 0, n - 1))
</code></pre>
<p>result:</p>
<p>[['a', 'r', 't'], ['a', 'r', 't'], ['a', 'r', 't'], ['a', 'r', 't'], ['a', 'r', 't'], ['a', 'r', 't']]</p>
<blockquote>
<p>NOTE: You are missing <strong>else</strong> statement</p>
</blockquote>
</div>
<span class="comment-copy">Have you considered Heap's algorithm? See <a href="https://www.geeksforgeeks.org/heaps-algorithm-for-generating-permutations" rel="nofollow noreferrer">geeksforgeeks.org/heaps-algorithm-for-generating-permutations</a>.</span>
<span class="comment-copy">PS. your program ran correctly for me - it did not repeat after generating all permutations of the input list.</span>
<span class="comment-copy">ahh i was calling the recursive function to separate 'art' as ['a','r','t'] prior to inputting it into the recursive function....found my error...</span>
<span class="comment-copy">How did i miss that....hours of it not seeing that....gragrghghghgghg...thanks....wow</span>
