<div class="post-text" itemprop="text">
<p>Consider the following code:
</p>
<pre><code>0.1 + 0.2 == 0.3  -&gt;  false
</code></pre>
<pre class="lang-js prettyprint-override"><code>0.1 + 0.2         -&gt;  0.30000000000000004
</code></pre>
<p>Why do these inaccuracies happen?</p>
</div>
<div class="post-text" itemprop="text">
<p>Binary <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format" rel="noreferrer">floating point</a> math is like this.  In most programming languages, it is based on the <a href="https://en.wikipedia.org/wiki/IEEE_754#Basic_formats" rel="noreferrer">IEEE 754 standard</a>. JavaScript uses 64-bit floating point representation, which is the same as Java's <code>double</code>.  The crux of the problem is that numbers are represented in this format as a whole number times a power of two; rational numbers (such as <code>0.1</code>, which is <code>1/10</code>) whose denominator is not a power of two cannot be exactly represented.</p>
<p>For <code>0.1</code> in the standard <code>binary64</code> format, the representation can be written exactly as</p>
<ul>
<li><code>0.1000000000000000055511151231257827021181583404541015625</code> in decimal, or</li>
<li><code>0x1.999999999999ap-4</code> in <a href="http://www.exploringbinary.com/hexadecimal-floating-point-constants/" rel="noreferrer">C99 hexfloat notation</a>.</li>
</ul>
<p>In contrast, the rational number <code>0.1</code>, which is <code>1/10</code>, can be written exactly as</p>
<ul>
<li><code>0.1</code> in decimal, or</li>
<li><code>0x1.99999999999999...p-4</code> in an analogue of C99 hexfloat notation, where the <code>...</code> represents an unending sequence of 9's.</li>
</ul>
<p>The constants <code>0.2</code> and <code>0.3</code> in your program will also be approximations to their true values.  It happens that the closest <code>double</code> to <code>0.2</code> is larger than the rational number <code>0.2</code> but that the closest <code>double</code> to <code>0.3</code> is smaller than the rational number <code>0.3</code>.  The sum of <code>0.1</code> and <code>0.2</code> winds up being larger than the rational number <code>0.3</code> and hence disagreeing with the constant in your code.</p>
<p>A fairly comprehensive treatment of floating-point arithmetic issues is <a href="http://download.oracle.com/docs/cd/E19957-01/806-3568/ncg_goldberg.html" rel="noreferrer"><em>What Every Computer Scientist Should Know About Floating-Point Arithmetic</em></a>. For an easier-to-digest explanation, see <a href="http://floating-point-gui.de" rel="noreferrer">floating-point-gui.de</a>.</p>
</div>
<div class="post-text" itemprop="text">
<h1><strong>A Hardware Designer's Perspective</strong></h1>
<p>I believe I should add a hardware designer’s perspective to this since I design and build floating point hardware. Knowing the origin of the error may help in understanding what is happening in the software, and ultimately, I hope this helps explain the reasons for why floating point errors happen and seem to accumulate over time.</p>
<h2>1. Overview</h2>
<p>From an engineering perspective, most floating point operations will have some element of error since the hardware that does the floating point computations is only required to have an error of less than one half of one unit in the last place. Therefore, much hardware will stop at a precision that's only necessary to yield an error of less than one half of one unit in the last place for a <em>single operation</em> which is especially problematic in floating point division. What constitutes a single operation depends upon how many operands the unit takes. For most, it is two, but some units take 3 or more operands. Because of this, there is no guarantee that repeated operations will result in a desirable error since the errors add up over time.</p>
<h2>2. Standards</h2>
<p>Most processors follow the <a href="http://en.wikipedia.org/wiki/IEEE_754-2008" rel="noreferrer">IEEE-754</a> standard but some use denormalized, or different standards
. For example, there is a denormalized mode in IEEE-754 which allows representation of very small floating point numbers at the expense of precision. The following, however, will cover the normalized mode of IEEE-754 which is the typical mode of operation.</p>
<p>In the IEEE-754 standard, hardware designers are allowed any value of error/epsilon as long as it's less than one half of one unit in the last place, and the result only has to be less than one half of one unit in the last place for one operation. This explains why when there are repeated operations, the errors add up. For IEEE-754 double precision, this is the 54th bit, since 53 bits are used to represent the numeric part (normalized), also called the mantissa, of the floating point number (e.g. the 5.3 in 5.3e5). The next sections go into more detail on the causes of hardware error on various floating point operations.</p>
<h2>3. Cause of Rounding Error in Division</h2>
<p>The main cause of the error in floating point division is the division algorithms used to calculate the quotient. Most computer systems calculate division using multiplication by an inverse, mainly in <code>Z=X/Y</code>, <code>Z = X * (1/Y)</code>.  A division is computed iteratively i.e. each cycle computes some bits of the quotient until the desired precision is reached, which for IEEE-754 is anything with an error of less than one unit in the last place. The table of reciprocals of Y (1/Y) is known as the quotient selection table (QST) in the slow division, and the size in bits of the quotient selection table is usually the width of the radix, or a number of bits of the quotient computed in each iteration,  plus a few guard bits. For the IEEE-754 standard, double precision (64-bit), it would be the size of the radix of the divider, plus a few guard bits k, where <code>k&gt;=2</code>. So for example, a typical Quotient Selection Table for a divider that computes 2 bits of the quotient at a time (radix 4) would be <code>2+2= 4</code> bits (plus a few optional bits). </p>
<p><strong>3.1 Division Rounding Error: Approximation of Reciprocal</strong></p>
<p>What reciprocals are in the quotient selection table depend on the <a href="http://en.wikipedia.org/wiki/Division_%28digital%29" rel="noreferrer">division method</a>: slow division such as SRT division, or fast division such as Goldschmidt division; each entry is modified according to the division algorithm in an attempt to yield the lowest possible error. In any case, though, all reciprocals are <em>approximations</em> of the actual reciprocal and introduce some element of error. Both slow division and fast division methods calculate the quotient iteratively, i.e. some number of bits of the quotient are calculated each step, then the result is subtracted from the dividend, and the divider repeats the steps until the error is less than one half of one unit in the last place. Slow division methods calculate a fixed number of digits of the quotient in each step and are usually less expensive to build, and fast division methods calculate a variable number of digits per step and are usually more expensive to build. The most important part of the division methods is that most of them rely upon repeated multiplication by an <em>approximation</em> of a reciprocal, so they are prone to error.</p>
<h2>4. Rounding Errors in Other Operations: Truncation</h2>
<p>Another cause of the rounding errors in all operations are the different modes of truncation of the final answer that IEEE-754 allows. There's truncate, round-towards-zero, <a href="http://en.wikipedia.org/wiki/Floating_point#Rounding_modes" rel="noreferrer">round-to-nearest (default),</a> round-down, and round-up. All methods introduce an element of error of less than one unit in the last place for a single operation. Over time and repeated operations, truncation also adds cumulatively to the resultant error. This truncation error is especially problematic in exponentiation, which involves some form of repeated multiplication.</p>
<h2>5. Repeated Operations</h2>
<p>Since the hardware that does the floating point calculations only needs to yield a result with an error of less than one half of one unit in the last place for a single operation, the error will grow over repeated operations if not watched. This is the reason that in computations that require a bounded error, mathematicians use methods such as using the round-to-nearest <a href="http://en.wikipedia.org/wiki/Floating_point#Rounding_modes" rel="noreferrer">even digit in the last place</a> of IEEE-754, because, over time, the errors are more likely to cancel each other out, and <a href="http://en.wikipedia.org/wiki/Interval_arithmetic" rel="noreferrer">Interval Arithmetic</a> combined with variations of the <a href="http://en.wikipedia.org/wiki/IEEE_754-2008#Rounding_rules" rel="noreferrer">IEEE 754 rounding modes</a> to predict rounding errors, and correct them. Because of its low relative error compared to other rounding modes, round to nearest even digit (in the last place), is the default rounding mode of IEEE-754.</p>
<p>Note that the default rounding mode, round-to-nearest <a href="http://en.wikipedia.org/wiki/Floating_point#Rounding_modes" rel="noreferrer">even digit in the last place</a>, guarantees an error of less than one half of one unit in the last place for one operation. Using the truncation, round-up, and round down alone may result in an error that is greater than one half of one unit in the last place, but less than one unit in the last place, so these modes are not recommended unless they are used in Interval Arithmetic. </p>
<h2>6. Summary</h2>
<p>In short, the fundamental reason for the errors in floating point operations is a combination of the truncation in hardware, and the truncation of a reciprocal in the case of division. Since the IEEE-754 standard only requires an error of less than one half of one unit in the last place for a single operation, the floating point errors over repeated operations will add up unless corrected.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you convert .1 or 1/10 to base 2 (binary) you get a repeating pattern after the decimal point, just like trying to represent 1/3 in base 10.  The value is not exact, and therefore you can't do exact math with it using normal floating point methods.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>Most answers here address this question in very dry, technical terms. I'd like to address this in terms that normal human beings can understand.</em></p>
<p>Imagine that you are trying to slice up pizzas. You have a robotic pizza cutter that can cut pizza slices <em>exactly</em> in half. It can halve a whole pizza, or it can halve an existing slice, but in any case, the halving is always exact.</p>
<p>That pizza cutter has very fine movements, and if you start with a whole pizza, then halve that, and continue halving the smallest slice each time, you can do the halving <em>53 times</em> before the slice is too small for even its high-precision abilities. At that point, you can no longer halve that very thin slice, but must either include or exclude it as is.</p>
<p>Now, how would you piece all the slices in such a way that would add up to one-tenth (0.1) or one-fifth (0.2) of a pizza? Really think about it, and try working it out. You can even try to use a real pizza, if you have a mythical precision pizza cutter at hand. :-)</p>
<hr/>
<p>Most experienced programmers, of course, know the real answer, which is that there is no way to piece together an <em>exact</em> tenth or fifth of the pizza using those slices, no matter how finely you slice them. You can do a pretty good approximation, and if you add up the approximation of 0.1 with the approximation of 0.2, you get a pretty good approximation of 0.3, but it's still just that, an approximation.</p>
<p>For double-precision numbers (which is the precision that allows you to halve your pizza 53 times), the numbers immediately less and greater than 0.1 are 0.09999999999999999167332731531132594682276248931884765625 and 0.1000000000000000055511151231257827021181583404541015625. The latter is quite a bit closer to 0.1 than the former, so a numeric parser will, given an input of 0.1, favour the latter.</p>
<p>(The difference between those two numbers is the "smallest slice" that we must decide to either include, which introduces an upward bias, or exclude, which introduces a downward bias. The technical term for that smallest slice is an <a href="https://en.wikipedia.org/wiki/Unit_in_the_last_place">ulp</a>.)</p>
<p>In the case of 0.2, the numbers are all the same, just scaled up by a factor of 2. Again, we favour the value that's slightly higher than 0.2.</p>
<p>Notice that in both cases, the approximations for 0.1 and 0.2 have a slight upward bias. If we add enough of these biases in, they will push the number further and further away from what we want, and in fact, in the case of 0.1 + 0.2, the bias is high enough that the resulting number is no longer the closest number to 0.3.</p>
<p>In particular, 0.1 + 0.2 is really 0.1000000000000000055511151231257827021181583404541015625 + 0.200000000000000011102230246251565404236316680908203125 = 0.3000000000000000444089209850062616169452667236328125, whereas the number closest to 0.3 is actually 0.299999999999999988897769753748434595763683319091796875.</p>
<hr/>
<p>P.S. Some programming languages also provide pizza cutters that can <a href="https://en.wikipedia.org/wiki/Decimal_floating_point">split slices into exact tenths</a>. Although such pizza cutters are uncommon, if you do have access to one, you should use it when it's important to be able to get exactly one-tenth or one-fifth of a slice.</p>
<p><a href="http://qr.ae/mDcAq"><em>(Originally posted on Quora.)</em></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Floating point rounding errors. 0.1 cannot be represented as accurately in base-2 as in base-10 due to the missing prime factor of 5. Just as 1/3 takes an infinite number of digits to represent in decimal, but is "0.1" in base-3, 0.1 takes an infinite number of digits in base-2 where it does not in base-10. And computers don't have an infinite amount of memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the other correct answers, you may want to consider scaling your values to avoid problems with floating-point arithmetic. </p>
<p>For example: </p>
<pre><code>var result = 1.0 + 2.0;     // result === 3.0 returns true
</code></pre>
<p>... instead of:</p>
<pre><code>var result = 0.1 + 0.2;     // result === 0.3 returns false
</code></pre>
<p>The expression <code>0.1 + 0.2 === 0.3</code> returns <code>false</code> in JavaScript, but fortunately integer arithmetic in floating-point is exact, so decimal representation errors can be avoided by scaling.</p>
<p>As a practical example, to avoid floating-point problems where accuracy is paramount, it is recommended<sup>1</sup> to handle money as an integer representing the number of cents: <code>2550</code> cents instead of <code>25.50</code> dollars. </p>
<hr/>
<p><sup>1</sup> Douglas Crockford: <a href="http://books.google.com/books?id=PXa2bby0oQ0C&amp;pg=PA105&amp;dq=douglas+crockford+javascript+good+parts+dollar+values+can+be+converted&amp;rview=1&amp;cd=1#v=onepage&amp;q=&amp;f=false" rel="noreferrer"><strong>JavaScript: The Good Parts</strong>: Appendix A - Awful Parts (page 105)</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>My answer is quite long, so I've split it into three sections. Since the question is about floating point mathematics, I've put the emphasis on what the machine actually does. I've also made it specific to double (64 bit) precision, but the argument applies equally to any floating point arithmetic.</em></p>
<p><strong>Preamble</strong></p>
<p>An <a href="http://en.wikipedia.org/wiki/Double-precision_floating-point_format" rel="noreferrer">IEEE 754 double-precision binary floating-point format (binary64)</a> number represents a number of the form</p>
<blockquote>
<p>value = (-1)^s * (1.m<sub>51</sub>m<sub>50</sub>...m<sub>2</sub>m<sub>1</sub>m<sub>0</sub>)<sub>2</sub> * 2<sup>e-1023</sup></p>
</blockquote>
<p>in 64 bits:</p>
<ul>
<li>The first bit is the <a href="http://en.wikipedia.org/wiki/Sign_bit" rel="noreferrer">sign bit</a>: <code>1</code> if the number is negative, <code>0</code> otherwise<sup>1</sup>.</li>
<li>The next 11 bits are the <a href="http://en.wikipedia.org/wiki/Exponentiation" rel="noreferrer">exponent</a>, which is <a href="http://en.wikipedia.org/wiki/Offset_binary" rel="noreferrer">offset</a> by 1023. In other words, after reading the exponent bits from a double-precision number, 1023 must be subtracted to obtain the power of two.</li>
<li>The remaining 52 bits are the <a href="http://en.wikipedia.org/wiki/Significand" rel="noreferrer">significand</a> (or mantissa). In the mantissa, an 'implied' <code>1.</code> is always<sup>2</sup> omitted since the most significant bit of any binary value is <code>1</code>.</li>
</ul>
<p><sup>1</sup> - IEEE 754 allows for the concept of a <a href="http://en.wikipedia.org/wiki/Signed_zero" rel="noreferrer">signed zero</a> - <code>+0</code> and <code>-0</code> are treated differently: <code>1 / (+0)</code> is positive infinity; <code>1 / (-0)</code> is negative infinity. For zero values, the mantissa and exponent bits are all zero. Note: zero values (+0 and -0) are explicitly not classed as denormal<sup>2</sup>.</p>
<p><sup>2</sup> - This is not the case for <a href="http://en.wikipedia.org/wiki/Denormal_number" rel="noreferrer">denormal numbers</a>, which have an offset exponent of zero (and an implied <code>0.</code>). The range of denormal double precision numbers is d<sub>min</sub> ≤ |x| ≤ d<sub>max</sub>, where d<sub>min</sub> (the smallest representable nonzero number) is 2<sup>-1023 - 51</sup> (≈ 4.94 * 10<sup>-324</sup>) and d<sub>max</sub> (the largest denormal number, for which the mantissa consists entirely of <code>1</code>s) is 2<sup>-1023 + 1</sup> - 2<sup>-1023 - 51</sup> (≈ 2.225 * 10<sup>-308</sup>).</p>
<hr/>
<p><strong>Turning a double precision number to binary</strong></p>
<p>Many online converters exist to convert a double precision floating point number to binary (e.g. at <a href="http://www.binaryconvert.com/convert_double.html" rel="noreferrer">binaryconvert.com</a>), but here is some sample C# code to obtain the IEEE 754 representation for a double precision number (I separate the three parts with colons (<code>:</code>):</p>
<pre><code>public static string BinaryRepresentation(double value)
{
    long valueInLongType = BitConverter.DoubleToInt64Bits(value);
    string bits = Convert.ToString(valueInLongType, 2);
    string leadingZeros = new string('0', 64 - bits.Length);
    string binaryRepresentation = leadingZeros + bits;

    string sign = binaryRepresentation[0].ToString();
    string exponent = binaryRepresentation.Substring(1, 11);
    string mantissa = binaryRepresentation.Substring(12);

    return string.Format("{0}:{1}:{2}", sign, exponent, mantissa);
}
</code></pre>
<hr/>
<p><strong>Getting to the point: the original question</strong></p>
<p>(Skip to the bottom for the TL;DR version)</p>
<p><a href="https://stackoverflow.com/users/62118/cato-johnston">Cato Johnston</a> (the question asker) asked why 0.1 + 0.2 != 0.3.</p>
<p>Written in binary (with colons separating the three parts), the IEEE 754 representations of the values are:</p>
<pre><code>0.1 =&gt; 0:01111111011:1001100110011001100110011001100110011001100110011010
0.2 =&gt; 0:01111111100:1001100110011001100110011001100110011001100110011010
</code></pre>
<p>Note that the mantissa is composed of recurring digits of <code>0011</code>. This is <strong>key</strong> to why there is any error to the calculations - 0.1, 0.2 and 0.3 cannot be represented in binary <strong>precisely</strong> in a <em>finite</em> number of binary bits any more than 1/9, 1/3 or 1/7 can be represented precisely in <em>decimal digits</em>.</p>
<p>Converting the exponents to decimal, removing the offset, and re-adding the implied <code>1</code> (in square brackets), 0.1 and 0.2 are:</p>
<pre><code>0.1 = 2^-4 * [1].1001100110011001100110011001100110011001100110011010
0.2 = 2^-3 * [1].1001100110011001100110011001100110011001100110011010
</code></pre>
<p>To add two numbers, the exponent needs to be the same, i.e.:</p>
<pre><code>0.1 = 2^-3 *  0.1100110011001100110011001100110011001100110011001101(0)
0.2 = 2^-3 *  1.1001100110011001100110011001100110011001100110011010
sum = 2^-3 * 10.0110011001100110011001100110011001100110011001100111
</code></pre>
<p>Since the sum is not of the form 2<sup>n</sup> * 1.{bbb} we increase the exponent by one and shift the decimal (<em>binary</em>) point to get:</p>
<pre><code>sum = 2^-2 * 1.0011001100110011001100110011001100110011001100110011(1)
</code></pre>
<p>There are now 53 bits in the mantissa (the 53rd is in square brackets in the line above). The default <a href="https://en.wikipedia.org/wiki/IEEE_754-1985#Rounding_floating-point_numbers" rel="noreferrer">rounding mode</a> for IEEE 754 is '<em>Round to Nearest</em>' - i.e. if a number <em>x</em> falls between two values <em>a</em> and <em>b</em>, the value where the least significant bit is zero is chosen.</p>
<pre><code>a = 2^-2 * 1.0011001100110011001100110011001100110011001100110011
x = 2^-2 * 1.0011001100110011001100110011001100110011001100110011(1)
b = 2^-2 * 1.0011001100110011001100110011001100110011001100110100
</code></pre>
<p>Note that <em>a</em> and <em>b</em> differ only in the last bit; <code>...0011</code> + <code>1</code> = <code>...0100</code>. In this case, the value with the least significant bit of zero is <em>b</em>, so the sum is:</p>
<pre><code>sum = 2^-2 * 1.0011001100110011001100110011001100110011001100110100
</code></pre>
<p><strong>TL;DR</strong></p>
<p>Writing <code>0.1 + 0.2</code> in a IEEE 754 binary representation (with colons separating the three parts) and comparing it to <code>0.3</code>, this is (I've put the distinct bits in square brackets):</p>
<pre><code>0.1 + 0.2 =&gt; 0:01111111101:0011001100110011001100110011001100110011001100110[100]
0.3       =&gt; 0:01111111101:0011001100110011001100110011001100110011001100110[011]
</code></pre>
<p>Converted back to decimal, these values are:</p>
<pre><code>0.1 + 0.2 =&gt; 0.300000000000000044408920985006...
0.3       =&gt; 0.299999999999999988897769753748...
</code></pre>
<p>The difference is exactly 2<sup>-54</sup>, which is ~5.5511151231258 × 10<sup>-17</sup> - insignificant (for many applications) when compared to the original values.</p>
<p>Comparing the last few bits of a floating point number is inherently dangerous, as anyone who reads the famous "<a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="noreferrer">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a>" (which covers all the major parts of this answer) will know.</p>
<p>Most calculators use additional <a href="https://en.wikipedia.org/wiki/Guard_digit" rel="noreferrer">guard digits</a> to get around this problem, which is how <code>0.1 + 0.2</code> would give <code>0.3</code>: the final few bits are rounded.</p>
</div>
<div class="post-text" itemprop="text">
<p>Floating point numbers stored in the computer consist of two parts, an integer and an exponent that the base is taken to and multiplied by the integer part.</p>
<p>If the computer were working in base 10, <code>0.1</code> would be <code>1 x 10⁻¹</code>, <code>0.2</code> would be <code>2 x 10⁻¹</code>, and <code>0.3</code> would be <code>3 x 10⁻¹</code>. Integer math is easy and exact, so adding <code>0.1 + 0.2</code> will obviously result in <code>0.3</code>.</p>
<p>Computers don't usually work in base 10, they work in base 2. You can still get exact results for some values, for example <code>0.5</code> is <code>1 x 2⁻¹</code> and <code>0.25</code> is <code>1 x 2⁻²</code>, and adding them results in <code>3 x 2⁻²</code>, or <code>0.75</code>. Exactly.</p>
<p>The problem comes with numbers that can be represented exactly in base 10, but not in base 2. Those numbers need to be rounded to their closest equivalent. Assuming the very common IEEE 64-bit floating point format, the closest number to <code>0.1</code> is <code>3602879701896397 x 2⁻⁵⁵</code>, and the closest number to <code>0.2</code> is <code>7205759403792794 x 2⁻⁵⁵</code>; adding them together results in <code>10808639105689191 x 2⁻⁵⁵</code>, or an exact decimal value of <code>0.3000000000000000444089209850062616169452667236328125</code>. Floating point numbers are generally rounded for display.</p>
</div>
<div class="post-text" itemprop="text">
<p>Floating point rounding error.  From <a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="noreferrer">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a>:</p>
<blockquote>
<p>Squeezing infinitely many real numbers into a finite number of bits requires an approximate representation. Although there are infinitely many integers, in most programs the result of integer computations can be stored in 32 bits. In contrast, given any fixed number of bits, most calculations with real numbers will produce quantities that cannot be exactly represented using that many bits. Therefore the result of a floating-point calculation must often be rounded in order to fit back into its finite representation. This rounding error is the characteristic feature of floating-point computation.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>My workaround:</p>
<pre><code>function add(a, b, precision) {
    var x = Math.pow(10, precision || 2);
    return (Math.round(a * x) + Math.round(b * x)) / x;
}
</code></pre>
<p><em>precision</em> refers to the number of digits you want to preserve after the decimal point during addition.</p>
</div>
<div class="post-text" itemprop="text">
<p>A lot of good answers have been posted, but I'd like to append one more.</p>
<p>Not all numbers can be represented via <strong>floats</strong>/<strong>doubles</strong>
For example, the number "0.2" will be represented as "0.200000003" in single precision in IEEE754 float point standard.</p>
<p>Model for store real numbers under the hood represent float numbers as</p>
<p><a href="https://i.stack.imgur.com/BRvSp.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/BRvSp.png"/></a></p>
<p>Even though you can type <code>0.2</code> easily, <code>FLT_RADIX</code> and <code>DBL_RADIX</code> is 2; not 10 for a computer with FPU which uses "IEEE Standard for Binary Floating-Point Arithmetic (ISO/IEEE Std 754-1985)".</p>
<p>So it is a bit hard to represent such numbers exactly. Even if you specify this variable explicitly without any intermediate calculation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Some statistics related to this famous double precision question.</p>
<p>When adding all values (<em>a + b</em>) using a step of 0.1 (from 0.1 to 100) we have <strong>~15% chance of precision error</strong>. Note that the error could result in slightly bigger or smaller values.
Here are some examples:</p>
<pre><code>0.1 + 0.2 = 0.30000000000000004 (BIGGER)
0.1 + 0.7 = 0.7999999999999999 (SMALLER)
...
1.7 + 1.9 = 3.5999999999999996 (SMALLER)
1.7 + 2.2 = 3.9000000000000004 (BIGGER)
...
3.2 + 3.6 = 6.800000000000001 (BIGGER)
3.2 + 4.4 = 7.6000000000000005 (BIGGER)
</code></pre>
<p>When subtracting all values (<em>a - b</em> where <em>a &gt; b</em>) using a step of 0.1 (from 100 to 0.1) we have <strong>~34% chance of precision error</strong>.
Here are some examples:</p>
<pre><code>0.6 - 0.2 = 0.39999999999999997 (SMALLER)
0.5 - 0.4 = 0.09999999999999998 (SMALLER)
...
2.1 - 0.2 = 1.9000000000000001 (BIGGER)
2.0 - 1.9 = 0.10000000000000009 (BIGGER)
...
100 - 99.9 = 0.09999999999999432 (SMALLER)
100 - 99.8 = 0.20000000000000284 (BIGGER)
</code></pre>
<p>*15% and 34% are indeed huge, so always use BigDecimal when precision is of big importance. With 2 decimal digits (step 0.01) the situation worsens a bit more (18% and 36%).</p>
</div>
<div class="post-text" itemprop="text">
<h3>No, not broken, but most decimal fractions must be approximated</h3>
<blockquote>
<p><em>Summary</em></p>
</blockquote>
<p>Floating point arithmetic <em>is</em> exact, unfortunately, it doesn't match up well with our usual base-10 number representation, so it turns out we are often giving it input that is slightly off from what we wrote.</p>
<p>Even simple numbers like 0.01, 0.02, 0.03, 0.04 ... 0.24 are not representable exactly as binary fractions. If you count up 0.01, .02, .03 ..., not until you get to 0.25 will you get the first fraction representable in base<sub>2</sub>.  If you tried that using FP, your 0.01 would have been slightly off, so the only way to add 25 of them up to a nice exact 0.25 would have required a long chain of causality involving guard bits and rounding. It's hard to predict so we throw up our hands and say <em>"FP is inexact",</em> but that's not really true. </p>
<p>We constantly give the FP hardware something that seems simple in base 10 but is a repeating fraction in base 2.</p>
<blockquote>
<p><em>How did this happen?</em></p>
</blockquote>
<p>When we write in decimal, every fraction (specifically, every <em>terminating decimal)</em> is a rational number of the form </p>
<p>          
<em>a / (2<sup>n</sup> x 5<sup>m</sup>)</em></p>
<p>In binary, we only get the <em>2<sup>n</sup></em> term, that is:</p>
<p>           <em>a / 2<sup>n</sup></em></p>
<p>So in decimal, we can't represent <sup>1</sup>/<sub>3</sub>. Because base 10 includes 2 as a prime factor, every number we can write as a binary fraction <em>also</em> can be written as a base 10 fraction. However, hardly anything we write as a base<sub>10</sub> fraction is representable in binary. In the range from 0.01, 0.02, 0.03 ... 0.99, only <em>three</em> numbers can be represented in our FP format: 0.25, 0.50, and 0.75, because they are 1/4, 1/2, and 3/4, all numbers with a prime factor using only the 2<sup>n</sup> term.</p>
<p>In base<sub>10</sub> we can't represent <sup>1</sup>/<sub>3</sub>. But in binary, we can't do <sup>1</sup>/<sub>10</sub> <em>or</em> <sup>1</sup>/<sub>3</sub>.</p>
<p>So while every binary fraction can be written in decimal, the reverse is not true. And in fact most decimal fractions repeat in binary.</p>
<blockquote>
<p><em>Dealing with it</em></p>
</blockquote>
<p>Developers are usually instructed to do <em>&lt; epsilon</em> comparisons, better advice might be to round to integral values (in the C library: round() and roundf(), i.e., stay in the FP format) and then compare. Rounding to a specific decimal fraction length solves most problems with output.</p>
<p>Also, on real number-crunching problems (the problems that FP was invented for on early, frightfully expensive computers) the physical constants of the universe and all other measurements are only known to a relatively small number of significant figures, so the entire problem space was "inexact" anyway. FP "accuracy" isn't a problem in this kind of application.</p>
<p>The whole issue really arises when people try to use FP for bean counting. It does work for that, but only if you stick to integral values, which kind of defeats the point of using it. <em>This is why we have all those decimal fraction software libraries.</em></p>
<p>I love the Pizza answer by <a href="https://stackoverflow.com/users/13/chris-jester-young">Chris</a>, because it describes the actual problem, not just the usual handwaving about "inaccuracy". If FP were simply "inaccurate", we could <em>fix</em> that and would have done it decades ago. The reason we haven't is because the FP format is compact and fast and it's the best way to crunch a lot of numbers. Also, it's a legacy from the space age and arms race and early attempts to solve big problems with very slow computers using small memory systems. (Sometimes, individual <em>magnetic cores</em> for 1-bit storage, but that's <a href="https://en.wikipedia.org/wiki/Magnetic-core_memory" rel="nofollow noreferrer">another story.</a>)</p>
<blockquote>
<p>Conclusion</p>
</blockquote>
<p>If you are just counting beans at a bank, software solutions that use decimal string representations in the first place work perfectly well. But you can't do quantum chromodynamics or aerodynamics that way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Did you try the duct tape solution?</p>
<p>Try to determine when errors occur and fix them with short if statements, it's not pretty but for some problems it is the only solution and this is one of them.</p>
<pre><code> if( (n * 0.1) &lt; 100.0 ) { return n * 0.1 - 0.000000000000001 ;}
                    else { return n * 0.1 + 0.000000000000001 ;}    
</code></pre>
<p>I had the same problem in a scientific simulation project in c#, and I can tell you that if you ignore the butterfly effect it's gonna turn to a big fat dragon and bite you in the a**</p>
</div>
<div class="post-text" itemprop="text">
<p>Those weird numbers appear because computers use binary(base 2) number system for calculation purposes, while we use decimal(base 10).</p>
<p>There are a majority of fractional numbers that cannot be represented precisely either in binary or in decimal or both. Result - A rounded up (but precise) number results.</p>
</div>
<div class="post-text" itemprop="text">
<p>Many of this question's numerous duplicates ask about the effects of floating point rounding on specific numbers. In practice, it is easier to get a feeling for how it works by looking at exact results of calculations of interest rather than by just reading about it. Some languages provide ways of doing that - such as converting a <code>float</code> or <code>double</code> to <code>BigDecimal</code> in Java.</p>
<p>Since this is a language-agnostic question, it needs language-agnostic tools, such as a <a href="http://www.exploringbinary.com/floating-point-converter/" rel="noreferrer">Decimal to Floating-Point Converter</a>.</p>
<p>Applying it to the numbers in the question, treated as doubles: </p>
<p>0.1 converts to 0.1000000000000000055511151231257827021181583404541015625, </p>
<p>0.2 converts to 0.200000000000000011102230246251565404236316680908203125, </p>
<p>0.3 converts to 0.299999999999999988897769753748434595763683319091796875, and </p>
<p>0.30000000000000004 converts to 0.3000000000000000444089209850062616169452667236328125.</p>
<p>Adding the first two numbers manually or in a decimal calculator such as <a href="https://www.mathsisfun.com/calculator-precision.html" rel="noreferrer">Full Precision Calculator</a>, shows the exact sum of the actual inputs is 0.3000000000000000166533453693773481063544750213623046875. </p>
<p>If it were rounded down to the equivalent of 0.3 the rounding error would be 0.0000000000000000277555756156289135105907917022705078125. Rounding up to the equivalent of 0.30000000000000004 also gives rounding error 0.0000000000000000277555756156289135105907917022705078125. The round-to-even tie breaker applies.</p>
<p>Returning to the floating point converter, the raw hexadecimal for 0.30000000000000004 is 3fd3333333333334, which ends in an even digit and therefore is the correct result.</p>
</div>
<div class="post-text" itemprop="text">
<p>Can I just add; people always assume this to be a computer problem, but if you count with your hands (base 10), you can't get <code>(1/3+1/3=2/3)=true</code> unless you have infinity to add 0.333... to 0.333... so just as with the <code>(1/10+2/10)!==3/10</code> problem in base 2, you truncate it to 0.333 + 0.333 = 0.666 and probably round it to 0.667 which would be also be technically inaccurate.</p>
<p>Count in ternary, and thirds are not a problem though - maybe some race with 15 fingers on each hand would ask why your decimal math was broken...</p>
</div>
<div class="post-text" itemprop="text">
<p>Given that nobody has mentioned this...</p>
<p>Some high level languages such as Python and Java come with tools to overcome binary floating point limitations. For example:</p>
<ul>
<li><p>Python's <a href="https://docs.python.org/dev/library/decimal.html" rel="noreferrer"><code>decimal</code> module</a> and Java's <a href="http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html" rel="noreferrer"><code>BigDecimal</code> class</a>, that represent numbers internally with decimal notation (as opposed to binary notation). Both have limited precision, so they are still error prone, however they solve most common problems with binary floating point arithmetic.</p>
<p>Decimals are very nice when dealing with money: ten cents plus twenty cents are always exactly thirty cents:</p>
<pre><code>&gt;&gt;&gt; 0.1 + 0.2 == 0.3
False
&gt;&gt;&gt; Decimal('0.1') + Decimal('0.2') == Decimal('0.3')
True
</code></pre>
<p>Python's <code>decimal</code> module is based on <a href="https://en.wikipedia.org/wiki/IEEE_854-1987" rel="noreferrer">IEEE standard 854-1987</a>.</p></li>
<li><p>Python's <a href="https://docs.python.org/dev/library/fractions.html" rel="noreferrer"><code>fractions</code> module</a> and Apache Common's <a href="https://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math3/fraction/BigFraction.html" rel="noreferrer"><code>BigFraction</code> class</a>. Both represent rational numbers as <code>(numerator, denominator)</code> pairs and they may give more accurate results than decimal floating point arithmetic.</p></li>
</ul>
<p>Neither of these solutions is perfect (especially if we look at performances, or if we require a very high precision), but still they solve a great number of problems with binary floating point arithmetic.</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to offer The <strong>best solution</strong> I can say I discovered following method:</p>
<pre><code>parseFloat((0.1 + 0.2).toFixed(10)) =&gt; Will return 0.3
</code></pre>
<p>Let me explain why it's the best solution.
As others mentioned in above answers it's a good idea to use ready to use Javascript toFixed() function to solve the problem. But most likely you'll encounter with some problems.</p>
<p>Imagine you are going to add up two float numbers like <code>0.2</code> and <code>0.7</code> here it is: <code>0.2 + 0.7 = 0.8999999999999999</code>.</p>
<p>Your expected result was <code>0.9</code> it means you need a result with 1 digit precision in this case.
So you should have used <code>(0.2 + 0.7).tofixed(1)</code>
but you can't just give a certain parameter to toFixed() since it depends on the given number, for instance</p>
<pre><code>`0.22 + 0.7 = 0.9199999999999999`
</code></pre>
<p>In this example you need 2 digits precision so it should be <code>toFixed(2)</code>, so what should be the paramter to fit every given float number?</p>
<p>You might say let it be 10 in every situation then:</p>
<pre><code>(0.2 + 0.7).toFixed(10) =&gt; Result will be "0.9000000000"
</code></pre>
<p>Damn! What are you going to do with those unwanted zeros after 9?
It's the time to convert it to float to make it as you desire:</p>
<pre><code>parseFloat((0.2 + 0.7).toFixed(10)) =&gt; Result will be 0.9
</code></pre>
<p>Now that you found the solution, it's better to offer it as a function like this:</p>
<pre><code>function floatify(number){
           return parseFloat((number).toFixed(10));
        }
</code></pre>
<p>Let's try it yourself:
<div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function floatify(number){
       return parseFloat((number).toFixed(10));
    }
 
function addUp(){
  var number1 = +$("#number1").val();
  var number2 = +$("#number2").val();
  var unexpectedResult = number1 + number2;
  var expectedResult = floatify(number1 + number2);
  $("#unexpectedResult").text(unexpectedResult);
  $("#expectedResult").text(expectedResult);
}
addUp();</code></pre>
<pre class="snippet-code-css lang-css prettyprint-override"><code>input{
  width: 50px;
}
#expectedResult{
color: green;
}
#unexpectedResult{
color: red;
}</code></pre>
<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;input id="number1" value="0.2" onclick="addUp()" onkeyup="addUp()"/&gt; +
&lt;input id="number2" value="0.7" onclick="addUp()" onkeyup="addUp()"/&gt; =
&lt;p&gt;Expected Result: &lt;span id="expectedResult"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Unexpected Result: &lt;span id="unexpectedResult"&gt;&lt;/span&gt;&lt;/p&gt;</code></pre>
</div>
</div>
</p>
<p>You can use it this way:</p>
<pre><code>var x = 0.2 + 0.7;
floatify(x);  =&gt; Result: 0.9
</code></pre>
<p>As <a href="https://www.w3schools.com/js/js_numbers.asp" rel="nofollow noreferrer">W3SCHOOLS</a> suggests there is another solution too, you can multiply and divide to solve the problem above:</p>
<pre><code>var x = (0.2 * 10 + 0.1 * 10) / 10;       // x will be 0.3
</code></pre>
<p>Keep in mind that <code>(0.2 + 0.1) * 10 / 10</code> won't work at all although it seems the same!
I prefer the first solution since I can apply it as a function which converts the input float to accurate output float.</p>
</div>
<div class="post-text" itemprop="text">
<p>The kind of floating-point math that can be implemented in a digital computer necessarily uses an approximation of the real numbers and operations on them. (The <em>standard</em> version runs to over fifty pages of documentation and has a committee to deal with its errata and further refinement.)</p>
<p>This approximation is a mixture of approximations of different kinds, each of which can either be ignored or carefully accounted for due to its specific manner of deviation from exactitude. It also involves a number of explicit exceptional cases at both the hardware and software levels that most people walk right past while pretending not to notice.</p>
<p>If you need infinite precision (using the number π, for example, instead of one of its many shorter stand-ins), you should write or use a symbolic math program instead.</p>
<p>But if you're okay with the idea that sometimes floating-point math is fuzzy in value and logic and errors can accumulate quickly, and you can write your requirements and tests to allow for that, then your code can frequently get by with what's in your FPU.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just for fun, I played with the representation of floats, following the definitions from the Standard C99 and I wrote the code below.</p>
<p>The code prints the binary representation of floats in 3 separated groups</p>
<pre><code>SIGN EXPONENT FRACTION
</code></pre>
<p>and after that it prints a sum, that, when summed with enough precision, it will show the value that really exists in hardware.</p>
<p>So when you write <code>float x = 999...</code>, the compiler will transform that number in a bit representation printed by the function <code>xx</code> such that the sum printed by the function <code>yy</code> be equal to the given number.</p>
<p>In reality, this sum is only an approximation.  For the number 999,999,999  the compiler will insert in bit representation of the float the number 1,000,000,000</p>
<p>After the code I attach a console session, in which I compute the sum of terms for both constants (minus PI and 999999999) that really exists in hardware, inserted there by the compiler.</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;limits.h&gt;

void
xx(float *x)
{
    unsigned char i = sizeof(*x)*CHAR_BIT-1;
    do {
        switch (i) {
        case 31:
             printf("sign:");
             break;
        case 30:
             printf("exponent:");
             break;
        case 23:
             printf("fraction:");
             break;

        }
        char b=(*(unsigned long long*)x&amp;((unsigned long long)1&lt;&lt;i))!=0;
        printf("%d ", b);
    } while (i--);
    printf("\n");
}

void
yy(float a)
{
    int sign=!(*(unsigned long long*)&amp;a&amp;((unsigned long long)1&lt;&lt;31));
    int fraction = ((1&lt;&lt;23)-1)&amp;(*(int*)&amp;a);
    int exponent = (255&amp;((*(int*)&amp;a)&gt;&gt;23))-127;

    printf(sign?"positive" " ( 1+":"negative" " ( 1+");
    unsigned int i = 1&lt;&lt;22;
    unsigned int j = 1;
    do {
        char b=(fraction&amp;i)!=0;
        b&amp;&amp;(printf("1/(%d) %c", 1&lt;&lt;j, (fraction&amp;(i-1))?'+':')' ), 0);
    } while (j++, i&gt;&gt;=1);

    printf("*2^%d", exponent);
    printf("\n");
}

void
main()
{
    float x=-3.14;
    float y=999999999;
    printf("%lu\n", sizeof(x));
    xx(&amp;x);
    xx(&amp;y);
    yy(x);
    yy(y);
}
</code></pre>
<hr/>
<p>Here is a console session in which I compute the real value of the float that exists in hardware.  I used <code>bc</code> to print the sum of terms outputted by the main program.  One can insert that sum in python <code>repl</code> or something similar also.</p>
<pre><code>-- .../terra1/stub
@ qemacs f.c
-- .../terra1/stub
@ gcc f.c
-- .../terra1/stub
@ ./a.out
sign:1 exponent:1 0 0 0 0 0 0 fraction:0 1 0 0 1 0 0 0 1 1 1 1 0 1 0 1 1 1 0 0 0 0 1 1
sign:0 exponent:1 0 0 1 1 1 0 fraction:0 1 1 0 1 1 1 0 0 1 1 0 1 0 1 1 0 0 1 0 1 0 0 0
negative ( 1+1/(2) +1/(16) +1/(256) +1/(512) +1/(1024) +1/(2048) +1/(8192) +1/(32768) +1/(65536) +1/(131072) +1/(4194304) +1/(8388608) )*2^1
positive ( 1+1/(2) +1/(4) +1/(16) +1/(32) +1/(64) +1/(512) +1/(1024) +1/(4096) +1/(16384) +1/(32768) +1/(262144) +1/(1048576) )*2^29
-- .../terra1/stub
@ bc
scale=15
( 1+1/(2) +1/(4) +1/(16) +1/(32) +1/(64) +1/(512) +1/(1024) +1/(4096) +1/(16384) +1/(32768) +1/(262144) +1/(1048576) )*2^29
999999999.999999446351872
</code></pre>
<p>That's it.  The value of 999999999 is in fact</p>
<pre><code>999999999.999999446351872
</code></pre>
<p>You can also check with <code>bc</code> that -3.14 is also perturbed.  Do not forget to set a <code>scale</code> factor in <code>bc</code>.</p>
<p>The displayed sum is what inside the hardware.  The value you obtain by computing it depends on the scale you set.  I did set the <code>scale</code> factor to 15.  Mathematically, with infinite precision, it seems it is 1,000,000,000.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another way to look at this: Used are 64 bits to represent numbers. As consequence there is no way more than 2**64 = 18,446,744,073,709,551,616 different numbers can be precisely represented. </p>
<p>However, Math says there are already infinitely many decimals between 0 and 1. IEE 754 defines an encoding to use these 64 bits efficiently for a much larger number space plus NaN and +/- Infinity, so there are gaps between accurately represented numbers filled with numbers only approximated. </p>
<p>Unfortunately 0.3 sits in a gap.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since this thread branched off a bit into a general discussion over current floating point implementations I'd add that there are projects on fixing their issues.</p>
<p>Take a look at <a href="https://posithub.org/" rel="nofollow noreferrer">https://posithub.org/</a> for example, which showcases a number type called posit (and its predecessor unum) that promises to offer better accuracy with fewer bits. If my understanding is correct, it also fixes the kind of problems in the question. Quite interesting project, the person behind it is a mathematician it <a href="http://www.johngustafson.net/" rel="nofollow noreferrer">Dr. John Gustafson</a>. The whole thing is open source, with many actual implementations in C/C++, Python, Julia and C# (<a href="https://hastlayer.com/arithmetics" rel="nofollow noreferrer">https://hastlayer.com/arithmetics</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://www.python.org/dev/peps/pep-0485/" rel="nofollow noreferrer">Since Python 3.5</a> you can use <code>math.isclose()</code> function for testing approximate equality:</p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.isclose(0.1 + 0.2, 0.3)
True
&gt;&gt;&gt; 0.1 + 0.2 == 0.3
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Math.sum</strong> ( javascript )     .... kind of operator replacement</p>
<pre><code>.1 + .0001 + -.1 --&gt; 0.00010000000000000286
Math.sum(.1 , .0001, -.1) --&gt; 0.0001
</code></pre>
<hr/>
<pre><code>Object.defineProperties(Math, {
    sign: {
        value: function (x) {
            return x ? x &lt; 0 ? -1 : 1 : 0;
            }
        },
    precision: {
        value: function (value, precision, type) {
            var v = parseFloat(value), 
                p = Math.max(precision, 0) || 0, 
                t = type || 'round';
            return (Math[t](v * Math.pow(10, p)) / Math.pow(10, p)).toFixed(p);
        }
    },
    scientific_to_num: {  // this is from https://gist.github.com/jiggzson
        value: function (num) {
            //if the number is in scientific notation remove it
            if (/e/i.test(num)) {
                var zero = '0',
                        parts = String(num).toLowerCase().split('e'), //split into coeff and exponent
                        e = parts.pop(), //store the exponential part
                        l = Math.abs(e), //get the number of zeros
                        sign = e / l,
                        coeff_array = parts[0].split('.');
                if (sign === -1) {
                    num = zero + '.' + new Array(l).join(zero) + coeff_array.join('');
                } else {
                    var dec = coeff_array[1];
                    if (dec)
                        l = l - dec.length;
                    num = coeff_array.join('') + new Array(l + 1).join(zero);
                }
            }
            return num;
         }
     }
    get_precision: {
        value: function (number) {
            var arr = Math.scientific_to_num((number + "")).split(".");
            return arr[1] ? arr[1].length : 0;
        }
    },
    diff:{
        value: function(A,B){
            var prec = this.max(this.get_precision(A),this.get_precision(B));
            return +this.precision(A-B,prec);
        }
    },
    sum: {
        value: function () {
            var prec = 0, sum = 0;
            for (var i = 0; i &lt; arguments.length; i++) {
                prec = this.max(prec, this.get_precision(arguments[i]));
                sum += +arguments[i]; // force float to convert strings to number
            }
            return Math.precision(sum, prec);
        }
    }
});
</code></pre>
<p>the idea is to use Math instead operators to avoid float errors </p>
<pre><code>Math.diff(0.2, 0.11) == 0.09 // true
0.2 - 0.11 == 0.09 // false
</code></pre>
<p>also note that Math.diff and Math.sum auto-detect the precision to use</p>
<p>Math.sum accepts any number of arguments </p>
</div>
<div class="post-text" itemprop="text">
<p>A different question has been named as a duplicate to this one:</p>
<p><em>In C++, why is the result of <code>cout &lt;&lt; x</code> different from the value that a debugger is showing for <code>x</code>?</em></p>
<p>The <code>x</code> in the question is a <code>float</code> variable.</p>
<p>One example would be</p>
<pre><code>float x = 9.9F;
</code></pre>
<p>The debugger shows <code>9.89999962</code>, the output of <code>cout</code> operation is <code>9.9</code>.</p>
<p>The answer turns out to be that <code>cout</code>'s default precision for <code>float</code> is 6, so it rounds to 6 decimal digits.</p>
<p>See <a href="http://en.cppreference.com/w/cpp/io/basic_ios/init" rel="nofollow noreferrer">here</a> for reference</p>
</div>
<div class="post-text" itemprop="text">
<p>Imagine working in base ten with, say, 8 digits of accuracy.  You check whether </p>
<pre><code>1/3 + 2 / 3 == 1
</code></pre>
<p>and learn that this returns <code>false</code>.  Why?  Well, as real numbers we have</p>
<p><em>1/3 = 0.333....</em> and <em>2/3 = 0.666....</em></p>
<p>Truncating at eight decimal places, we get</p>
<pre><code>0.33333333 + 0.66666666 = 0.99999999
</code></pre>
<p>which is, of course, different from <code>1.00000000</code> by exactly <code>0.00000001</code>.</p>
<hr/>
<p>The situation for binary numbers with a fixed number of bits is exactly analogous. As real numbers, we have</p>
<p><em>1/10 = 0.0001100110011001100... (base 2)</em></p>
<p>and</p>
<p><em>1/5 = 0.0011001100110011001... (base 2)</em></p>
<p>If we truncated these to, say, seven bits, then we'd get</p>
<pre><code>0.0001100 + 0.0011001 = 0.0100101
</code></pre>
<p>while on the other hand,</p>
<p><em>3/10 = 0.01001100110011... (base 2)</em></p>
<p>which, truncated to seven bits, is <code>0.0100110</code>, and these differ by exactly <code>0.0000001</code>.</p>
<hr/>
<p>The exact situation is slightly more subtle because these numbers are typically stored in scientific notation.  So, for instance, instead of storing 1/10 as <code>0.0001100</code> we may store it as something like <code>1.10011 * 2^-4</code>, depending on how many bits we've allocated for the exponent and the mantissa.  This affects how many digits of precision you get for your calculations.</p>
<p>The upshot is that because of these rounding errors you essentially never want to use == on floating-point numbers.  Instead, you can check if the absolute value of their difference is smaller than some fixed small number.</p>
</div>
<div class="post-text" itemprop="text">
<p><sub>This was actually intended as an answer for <a href="https://stackoverflow.com/q/52601421/8112776">this question</a> -- which was closed as a duplicate of <strong>this</strong> question, <em>while</em> I was putting together this answer, so now I can't post it there... so I'll post here instead!</sub></p>
<hr/>
<blockquote>
<p><strong>Question summary:</strong></p>
<p>On the worksheet <code>10^-8/1000</code> and <code>10^-11</code> evaluate as <strong>Equal</strong> while in VBA they do not.</p>
</blockquote>
<p>On the worksheet, the numbers are defaulting to Scientific Notation.  </p>
<p>If you change the cells to a number format (<kbd>Ctrl</kbd>+<kbd>1</kbd>) of <code>Number</code> with <code>15</code> decimal points, you get:</p>
<pre><code>=10^-11 returns 0.000000000010000
=10^(-8/1000) returns 0.981747943019984
</code></pre>
<p>Thus, they are definitely not the same... one is just about zero and the other just about 1.  </p>
<p>Excel wasn't designed to deal with <em>extremely</em> small numbers - at least not with the stock install.  There are add-ins to help improve number precision.</p>
<hr/>
<blockquote>
<p>Excel was designed in accordance to the IEEE Standard for Binary Floating-Point Arithmetic (<a href="https://ewikipedia.org/wiki/IEEE_754" rel="nofollow noreferrer">IEEE 754</a>). The standard defines how <a href="https://en.wikipedia.org/wiki/Floating-point_arithmetic#Floating-point_numbers" rel="nofollow noreferrer">floating-point numbers</a> are stored and calculated. The <a href="https://ewikipedia.org/wiki/IEEE_754" rel="nofollow noreferrer">IEEE 754</a> standard is widely used because it allows-floating point numbers to be stored in a reasonable amount of space and calculations can occur relatively quickly.</p>
<p>The advantage of floating over fixed point representation is that it can support a wider range of values. For example, a fixed-point representation that has 5 decimal digits with the decimal point positioned after the third digit can represent the numbers <code>123.34</code>, <code>12.23</code>, <code>2.45</code>, etc. whereas floating-point representation with 5 digit precision can represent 1.2345, 12345, 0.00012345, etc. Similarly, floating-point representation also allows calculations over a wide range of magnitudes while maintaining precision. For example, </p>
</blockquote>
<p><img alt="img" src="https://i.stack.imgur.com/am1Vs.png"/></p>
<hr/>
<h1>Other References:</h1>
<ul>
<li>Office Support : <a href="https://support.office.com/article/display-numbers-in-scientific-exponential-notation-f85a96c0-18a1-4249-81c3-e934cd2aae25" rel="nofollow noreferrer"><strong>Display numbers in scientific (exponential) notation</strong></a></li>
<li>Microsoft 365 Blog : <a href="https://www.microsoft.com/microsoft-365/blog/2008/04/10/understanding-floating-point-precision-aka-why-does-excel-give-me-seemingly-wrong-answers/" rel="nofollow noreferrer"><strong>Understanding Floating Point Precision</strong>, aka <em>“Why does Excel Give Me Seemingly Wrong Answers?”</em></a> </li>
<li>Office Support : <a href="https://support.office.com/article/set-rounding-precision-e5d707e3-07a8-4df2-810c-218c531eb06a" rel="nofollow noreferrer"><strong>Set rounding precision in Excel</strong></a> </li>
<li>Office Support : <a href="https://support.office.com/article/power-function-d3f2908b-56f4-4c3f-895a-07fb519c362a" rel="nofollow noreferrer"><strong><code>POWER</code> Function</strong></a> </li>
<li>SuperUser : <a href="https://superuser.com/q/1041458/774713"><strong>What is largest value (number) that I can store in an Excel VBA variable?</strong></a> </li>
</ul>
</div>
<span class="comment-copy">Floating point variables typically have this behaviour. It's caused by how they are stored in hardware. For more info check out the <a href="http://en.wikipedia.org/wiki/Floating-point" rel="nofollow noreferrer">Wikipedia article on floating point numbers</a>.</span>
<span class="comment-copy">JavaScript treats decimals as <a href="http://en.wikipedia.org/wiki/Floating_point" rel="nofollow noreferrer">floating point numbers</a>, which means operations like addition might be subject to rounding error. You might want to take a look at this article: <a href="http://docs.sun.com/source/806-3568/ncg_goldberg.html" rel="nofollow noreferrer">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a></span>
<span class="comment-copy">Just for information, ALL numeric types in javascript are IEEE-754 Doubles.</span>
<span class="comment-copy">Because JavaScript uses the IEEE 754 standard for Math, it makes use of <b>64-bit</b> floating numbers. This causes precision errors when doing floating point (decimal) calculations, in short, due to computers working in <b>Base 2</b> while decimal is <b>Base 10</b>.</span>
<span class="comment-copy"><a href="https://0.30000000000000004.com/" rel="nofollow noreferrer">0.30000000000000004.com</a></span>
<span class="comment-copy">'Some error constant' also known as an Epsilon value.</span>
<span class="comment-copy">I think "some error constant" is more correct than "The Epsilon" because there is no "The Epsilon" which could be used in all cases. Different epsilons need to be used in different situations. And the machine epsilon is almost never a good constant to use.</span>
<span class="comment-copy">It's not <i>quite</i> true that all floating-point math is based on the IEEE [754] standard.  There are still some systems in use that have the old IBM hexadecimal FP, for example, and there are still graphics cards that don't support IEEE-754 arithmetic.  It's true to a reasonably approximation, however.</span>
<span class="comment-copy">Cray ditched IEEE-754 compliance for speed.  Java loosened its adherence as an optimization as well.</span>
<span class="comment-copy">I think you should add something to this answer about how computations on money should always, always be done with fixed-point arithmetic on <i>integers</i>, because money is quantized.  (It may make sense to do internal accounting computations in tiny fractions of a cent, or whatever your smallest currency unit is - this often helps with e.g. reducing round-off error when converting "$29.99 a month" to a daily rate - but it should still be fixed-point arithmetic.)</span>
<span class="comment-copy">(3) is wrong. The rounding error in a division is not less than <i>one</i> unit in the last place, but at most <i>half</i> a unit in the last place.</span>
<span class="comment-copy">@gnasher729 Good catch. Most basic operations also have en error of less than 1/2 of one unit in the last place using the default IEEE rounding mode. Edited the explanation, and also noted that the error may be greater than 1/2 of one ulp but less than 1 ulp if the user overrides the default rounding mode (this is especially true in embedded systems).</span>
<span class="comment-copy">(1) Floating point <i>numbers</i> do not have error.  Every floating point value is exactly what it is.  Most (but not all) floating point <i>operations</i> give inexact results.  For example, there is no binary floating point value that is exactly equal to 1.0/10.0.  Some operations (e.g., 1.0 + 1.0) <i>do</i> give exact results on the other hand.</span>
<span class="comment-copy">"The main cause of the error in floating point division, are the division algorithms used to calculate the quotient" is a <i>very</i> misleading thing to say.  For an IEEE-754 conforming division, the <i>only</i> cause of error in floating-point division is the inability of the result to be exactly represented in the result format; the same result is computed regardless of the algorithm that is used.</span>
<span class="comment-copy">@Matt Sorry for the late response. It's basically due to resource/time issues and tradeoffs. There is a way to do long division/more 'normal' division, it's called SRT Division with radix two. However, this repeatedly shifts and subtracts the divisor from the dividend and takes many clock cycles since it only computes one bit of the quotient per clock cycle. We use tables of reciprocals so that we can compute more bits of the quotient per cycle and make effective performance/speed tradeoffs.</span>
<span class="comment-copy">Great and short answer. Repeating pattern looks like  0.00011001100110011001100110011001100110011001100110011...</span>
<span class="comment-copy">This does not explain why isn't a better algorithm used that does not convert into binaries in first place.</span>
<span class="comment-copy">Because performance. Using binary is a few thousand times faster, because it's native for the machine.</span>
<span class="comment-copy">There ARE methods that yield exact decimal values. BCD (Binary coded decimal) or various other forms of decimal number. However, these are both slower (a LOT slower) and take more storage than using binary floating point. (as an example, packed BCD stores 2 decimal digits in a byte. That's 100 possible values in a byte that can actually store 256 possible values, or 100/256, which wastes about 60% of the possible values of a byte.)</span>
<span class="comment-copy">@Jacksonkr you're still thinking in base-10. Computers are base-2.</span>
<span class="comment-copy">Note that there are some languages which include exact math. One example is Scheme, for example via GNU Guile. See <a href="http://draketo.de/english/exact-math-to-the-rescue" rel="nofollow noreferrer">draketo.de/english/exact-math-to-the-rescue</a> — these keep the math as fractions and only slice up in the end.</span>
<span class="comment-copy">@FloatingRock Actually, very few mainstream programming languages have rational numbers built-in. Arne is a Schemer, as I am, so these are things we get spoilt on.</span>
<span class="comment-copy">@ArneBabenhauserheide I think it's worth adding that this will only work with rational numbers. So if you're doing some math with irrational numbers like pi, you'd have to store it as a multiple of pi. Of course, any calculating involving pi cannot be represented as an exact decimal number.</span>
<span class="comment-copy">@connexo Okay. How would you program your pizza rotator to get 36 degrees? What is 36 degrees? (Hint: if you are able to define this in an exact fashion, you also have a slices-an-exact-tenth pizza cutter.) In other words, you can't actually have 1/360 (a degree) or 1/10 (36 degrees) with only binary floating point.</span>
<span class="comment-copy">@connexo Also, "every idiot" can't rotate a pizza <i>exactly</i> 36 degrees. Humans are too error-prone to do anything quite so precise.</span>
<span class="comment-copy">computers don't need an infinite amount of memory to get 0.1 + 0.2 = 0.3 right</span>
<span class="comment-copy">@Pacerier Sure, they could use two unbounded-precision integers to represent a fraction, or they could use quote notation. It's the specific notion of "binary" or "decimal" that makes this impossible -- the idea that you have a sequence of binary/decimal digits and, somewhere in there, a radix point.  To get precise rational results we'd need a better format.</span>
<span class="comment-copy">@Pacerier: Neither binary nor decimal floating-point can precisely store 1/3 or 1/13.  Decimal floating-point types can precisely represent values of the form M/10^E, <i>but are less precise than similarly-sized binary floating-point numbers when it comes to representing most other fractions</i>.  In many applications, it's more useful to have higher precision with arbitrary fractions than to have perfect precision with a few "special" ones.</span>
<span class="comment-copy">@Pacerier They <i>do</i> if they're storing the numbers as binary floats, which was the point of the answer.</span>
<span class="comment-copy">@chux: The difference in precision between binary and decimal types isn't huge, but the 10:1 difference in best-case vs. worst-case precision for decimal types is far greater than the 2:1 difference with binary types.  I'm curious whether anyone has built hardware or written software to operate efficiently on either of the decimal types, since neither would seem amenable to efficient implementation in hardware nor software.</span>
<span class="comment-copy">The problem is that the conversion itself is inaccurate. 16.08 * 100 = 1607.9999999999998. Do we have to resort to splitting the number and converting separately (as in 16 * 100 + 08 = 1608)?</span>
<span class="comment-copy">The solution here is to do all your calculations in integer then divide by your proportion (100 in this case) and round only when presenting the data.  That will ensure that your calculations will always be precise.</span>
<span class="comment-copy">Just to nitpick a little: integer arithmetic is only exact in floating-point up to a point (pun intended). If the number is larger than 0x1p53 (to use Java 7's hexadecimal floating point notation, = 9007199254740992), then the ulp is 2 at that point and so 0x1p53 + 1 is rounded down to 0x1p53 (and 0x1p53 + 3 is rounded up to 0x1p53 + 4, because of round-to-even). :-D But certainly, if your number is smaller than 9 quadrillion, you should be fine. :-P</span>
<span class="comment-copy">So how do you get <code>.1 + .2</code> to show <code>.3</code>?</span>
<span class="comment-copy">Jason, you should just round the result  (int)(16.08 * 100+0.5)</span>
<span class="comment-copy">My answer was voted down shortly after posting it. I've since made many changes (including explicitly noting the recurring bits when writing 0.1 and 0.2 in binary, which I'd omitted in the original). On the off chance that the down-voter sees this, could you please give me some feedback so that I can improve my answer? I feel that my answer adds something new since the treatment of the sum in IEEE 754 isn't covered in the same way in other answers. While "What every computer scientist should know..." covers some the same material, my answer deals <i>specifically</i> with the case of 0.1 + 0.2.</span>
<span class="comment-copy">@Mark Thank you for this Clear explanation but then the question arises why 0.1+0.4 exactly adds up to 0.5  (atleast in Python 3) . Also what is the best way to check equality when using floats in Python 3?</span>
<span class="comment-copy">@user2417881 IEEE floating point operations have rounding rules for every operation, and sometimes the rounding can produce an exact answer even when the two numbers are off by a little. The details are too long for a comment and I'm not an expert in them anyway. As you see in this answer 0.5 is one of the few decimals that can be represented in binary, but that's just a coincidence. For equality testing see <a href="https://stackoverflow.com/questions/5595425/what-is-the-best-way-to-compare-floats-for-almost-equality-in-python/33024979#33024979" title="what is the best way to compare floats for almost equality in python">stackoverflow.com/questions/5595425/…</a>.</span>
<span class="comment-copy">@user2417881 your question intrigued me so I turned it into a full question and answer: <a href="https://stackoverflow.com/q/48374522/5987">stackoverflow.com/q/48374522/5987</a></span>
<span class="comment-copy">Rounding to the nearest integer isn't a safe way to solve the comparison problem in all cases.  0.4999998 and 0.500001 round to different integers, so there's a "danger zone" around every rounding cut-point.  (I know those decimal strings probably aren't exactly representable as IEEE binary floats.)</span>
<span class="comment-copy">Also, even though floating point is a "legacy" format, it's very well designed.  I don't know of anything that anyone would change if re-designing it now.  The more I learn about it, the more I think it's really <i>well</i> designed.  e.g. the biased exponent means consecutive binary floats have consecutive integer representations, so you can implement <code>nextafter()</code> with an integer increment or decrement on the binary representation of an IEEE float.  Also, you can compare floats as integers and get the right answer except when they're both negative (because of sign-magnitude vs. 2's complement).</span>
<span class="comment-copy">I disagree, the floats should be stored as decimals and not binary and all problems are solved.</span>
<span class="comment-copy">Shouldn't "<i>x / (2^n + 5^n)</i>" be "<i>x / (2^n * 5^n)</i>"?</span>
<span class="comment-copy">@RonenFestinger - what about 1/3?</span>
<span class="comment-copy">I don't understand your second paragraph at all.</span>
<span class="comment-copy">@Nae I would translate the second paragraph as "The majority of fractions cannot be represented exactly in either decimal <i>or</i> binary.  So most results will be rounded off -- although they will still be precise to the number of bits/digits inherent in the representation being used."</span>
<span class="comment-copy">To the person whose edit I just rolled back: I consider code quotes appropriate for quoting code. This answer, being language-neutral, does not contain any quoted code at all. Numbers can be used in English sentences and that does not turn them into code.</span>
<span class="comment-copy"><a href="https://i.stack.imgur.com/CRFfF.png" rel="nofollow noreferrer">This</a> is likely why somebody formatted your numbers as code - not for formatting, but for readability.</span>
<span class="comment-copy">... also, the <i>round to even</i> refers to the <i>binary</i> representation, <b>not</b> the <i>decimal</i> representation. See <a href="https://en.m.wikipedia.org/wiki/IEEE_754-1985#Rounding_floating-point_numbers" rel="nofollow noreferrer">this</a> or, for instance, <a href="https://stackoverflow.com/q/8981913/1364007">this</a>.</span>
<span class="comment-copy">Since humans use decimal numbers, I see no good reason why the floats are not represented as a decimal by default so we have accurate results.</span>
<span class="comment-copy">Humans use many bases other than base 10 (decimals), binary being the one we use most for computing.. the 'good reason' is that you simply cant represent every fraction in every base..</span>
<span class="comment-copy">@RonenFestinger binary arithmetic is easy to implement on computers because it requires only eight basic operations with digits: say $a$, $b$ in $0,1$ all you need to know is $\operatorname{xor}(a,b)$ and $\operatorname{cb}(a,b)$, where xor is exclusive or and cb is the "carry bit" which is $0$ in all cases except when $a=1=b$, in which case we have one (in fact commutativity of all operations saves you $2$ cases and all you need is $6$ rules). Decimal expansion needs $10\times 11$ (in decimal notation) cases to be stored and $10$ different states for each bit and wastes storage on the carry.</span>
