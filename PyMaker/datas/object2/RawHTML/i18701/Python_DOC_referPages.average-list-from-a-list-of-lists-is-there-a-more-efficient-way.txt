<div class="post-text" itemprop="text">
<p>I have a list of lists named 'run'. I am creating an average of those lists using this section of my code:</p>
<pre><code>ave = [0 for t in range(s)]
for t in range(s):
    z = 0
    for i in range(l):
        z = z + run[i][t]
        #Converted values to a string for output purposes
        # Added \n to output
        ave[t]= ((str(z / l) + "\n"))
</code></pre>
<p>Much to my surprise, this code worked the first time that I wrote it. I'm now planning on working with much larger lists and many more values, and it's possible that performance issues will come into play. Is this method of writing an average inefficient in its use of computational resources, and how could I write code that was more efficient?</p>
</div>
<div class="post-text" itemprop="text">
<p>List comprehensions may be more efficient.</p>
<pre><code>&gt;&gt;&gt; run = [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13]]
&gt;&gt;&gt; [sum(elem)/len(elem) for elem in zip(*run)]  
[5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666666]
</code></pre>
<p>Alternatively, you could try <code>map()</code></p>
<pre><code>&gt;&gt;&gt; list(map(lambda x: sum(x)/len(x), zip(*run)))
[5.666666666666667, 6.666666666666667, 7.666666666666667, 8.666666666666666]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can improve efficiency by having Python do more of the work for you with efficient built-in functions and list comprehensions:</p>
<pre><code>averages = [sum(items) / len(run) for items in zip(*run)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import numpy as np
ave = [np.avg(col) for col in zip(*run)]
</code></pre>
<p>OR</p>
<pre><code>ave = [sum(col)/len(col) for col in zip(*run)]
</code></pre>
</div>
<span class="comment-copy">This looks asymptotically good. unless z overflows. (to avoid read <a href="http://www.johndcook.com/standard_deviation.html" rel="nofollow noreferrer">johndcook.com/standard_deviation.html</a>) but the builtin functions may be faster and clearer in practice.</span>
<span class="comment-copy">You're averaging over the wrong axis. Also, Python 3.</span>
<span class="comment-copy">Whoops! Fixed. Thanks. :)</span>
<span class="comment-copy">I don't see <code>itertools.zip</code> in the documentation, and this introduces a <code>numpy</code> dependency.</span>
<span class="comment-copy">Thanks for the bugreport @user2357112. It is fixed. The <code>numpy</code> dependency is to harness the efficiency afforded by numpy, which is at least as fast as averaging without it</span>
<span class="comment-copy">I'm still seeing <code>itertools.zip</code> here. What's that supposed to be? (While you're at it, this is a weird way to use numpy. Why wouldn't you use <code>numpy.average(run, 0)</code>?)</span>
<span class="comment-copy">I think you want <code>itertools.izip</code>, instead of <code>itertools.zip</code>. Or just use  <code>zip</code></span>
<span class="comment-copy">I'm pretty sure <code>itertools.izip</code> is just <code>zip</code> in Python 3. Check out the documentation for <a href="http://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> and <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>. Also, I don't think <code>numpy.avg</code> even exists.</span>
