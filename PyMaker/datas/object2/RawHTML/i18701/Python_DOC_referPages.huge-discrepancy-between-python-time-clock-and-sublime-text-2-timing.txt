<div class="post-text" itemprop="text">
<p>I'm trying to compare the run times of two different algorithms for determining whether a number is prime, using Python's time module, for example:</p>
<pre><code>test = primesComparisonTXT()
start = time.clock()
print 'Fermat Method'
for prime in test:
    print isFermatProbablePrime(prime, 5)
total = time.clock() - start
print total
</code></pre>
<p>primesComparisonTXT() is a function that returns a list of the confirmed primes in (1, 1000000). </p>
<p>isFermatProbablePrime() is a function that takes in 1. a suspected prime 2. a parameter that indicates how many times that suspected prime should be tested for primality using Fermat's primality test. The function returns True or False depending whether the suspect is a probable prime. (<a href="http://en.wikipedia.org/wiki/Fermat_primality_test" rel="nofollow">http://en.wikipedia.org/wiki/Fermat_primality_test</a>)</p>
<p>The algorithm correctly outputs that every prime in that list is indeed a probable prime, but I'm getting largely different results for the timing. 4.57107920129 is what's printed as "total," but Sublime Text states that the build was "[Finished in 15.1s]". Sublime's timing is more accurate. Is there any particular reason for this discrepancy; perhaps a better timing method should be used (timeit)?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is exactly what you should expect. As <a href="http://docs.python.org/2/library/time.html#time.clock" rel="nofollow">the docs</a> say:</p>
<blockquote>
<p>On Unix, return the current processor time as a floating point number expressed in seconds. The precision, and in fact the very definition of the meaning of “processor time”, depends on that of the C function of the same name…</p>
</blockquote>
<p><a href="http://pubs.opengroup.org/onlinepubs/009696699/functions/clock.html" rel="nofollow">POSIX</a> says that the C function:</p>
<blockquote>
<p>… shall return the implementation's best approximation to the processor time used by the process since the beginning of an implementation-defined era related only to the process invocation.</p>
</blockquote>
<p>In other words, this is <em>processor</em> time, not wall-clock time. If your processor is doing anything else (like, say, running other programs), or waiting around doing nothing while your program blocks on I/O, it isn't counted.</p>
<p>Actually, it's even worse than that—such time <em>may</em> be counted on some Unix and Unix-like systems, and <em>will</em> be counted on Windows… so if you don't understand your platform, it's not necessarily easy to understand what <code>clock</code> actually means.</p>
<p>At any rate, the time reported by <code>clock</code> should be &lt;= the wall-clock time, not ==.</p>
</div>
<div class="post-text" itemprop="text">
<p>That's not how you do timing in python. </p>
<p>Use the timeit module: <a href="http://docs.python.org/2/library/timeit.html" rel="nofollow">http://docs.python.org/2/library/timeit.html</a></p>
<p>Wrap your code up in a function, and use:</p>
<pre><code>import timeit
timeit.timeit("primefunction()", setup='from mymodule import primefunction')

#or
timeit.timeit(primefunction)
</code></pre>
</div>
<span class="comment-copy">How long does <code>primesComparisonTXT()</code> take?</span>
<span class="comment-copy">0.0783992072275s according to time.clock(), 0.3s according to Sublime</span>
<span class="comment-copy">You should use time.time() if you want the actual duration.</span>
<span class="comment-copy">Or, if you're trying to test the time for a complete script, just use the <code>time</code> command, which will actually show you both clock time and processor time, the latter broken down into user and sys/kernel.</span>
<span class="comment-copy">So Sublime's timing is wall-clock time?</span>
<span class="comment-copy">@djlovesupr3me: Most likely, yes.</span>
<span class="comment-copy">Or just <code>timeit.timeit(primefunction)</code>.</span>
<span class="comment-copy">Why does the time documentation state that for time.clock(): "...but in any case, this is the function to use for benchmarking Python or timing algorithms"?</span>
<span class="comment-copy">No idea. That's what timeit is for.</span>
<span class="comment-copy">@djlovesupr3me: First, that's because you're looking at the 2.x docs; note that <a href="http://docs.python.org/3/library/time.html" rel="nofollow noreferrer">3.3</a> explicitly deprecates <code>clock</code>. Second, this is the function you'd use (in 2.7) <i>if you wanted to build something like <code>timeit</code> yourself</i>. But doing it right is more complicated than just subtracting two <code>clock</code> values. You can read what <code>timeit</code> does (in the docs, or the source)—but unless you know what you're doing and need to do something different, just use <code>timeit</code>.</span>
