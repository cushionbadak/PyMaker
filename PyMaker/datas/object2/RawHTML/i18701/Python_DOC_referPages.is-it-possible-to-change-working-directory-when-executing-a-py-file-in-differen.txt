<div class="post-text" itemprop="text">
<p>For example,here is my directory tree:</p>
<pre><code>+--- test.py
|
+--- [subdir]
      |
      +--- another.py
</code></pre>
<p>test.py:</p>
<pre><code>import os
os.system('python subdir/another.py')
</code></pre>
<p>another.py:</p>
<pre><code>import os
os.mkdir('whatever')
</code></pre>
<p>after running test.py ,I expected to have a folder <code>whatever</code> in <code>subdir</code>,but what I got is: </p>
<pre><code>+--- test.py
|
+--- [subdir]
|     |
|     +--- another.py
|
+--- whatever
</code></pre>
<p>The reason is quite obvious:working directory hadn't been changed to <code>subdir</code>.So is it possible to change working directory when executing a .py file in different folder? 
Note:</p>
<ol>
<li>any function is allowed, <code>os.system</code> is just an example</li>
<li><code>os.system('cd XXX')</code> and <code>os.chdir</code> not allowed</li>
</ol>
<p>EDIT:
Finally I decide to use context manager,following an answer in<br/>
<a href="https://stackoverflow.com/posts/17589236/edit">https://stackoverflow.com/posts/17589236/edit</a></p>
<pre><code>import os
import subprocess # just to call an arbitrary command e.g. 'ls'

class cd:
    def __init__(self, newPath):
        self.newPath = newPath

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)

# Now you can enter the directory like this:
with cd("~/Library"):
   # we are in ~/Library
   subprocess.call("ls")

# outside the context manager we are back where we started.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ummm, this is the function to do so: <a href="http://docs.python.org/3/library/os.html#os.chdir" rel="nofollow">os.chdir(<em>path</em>)</a>.</p>
<p>Maybe it's a little bit confusing or incosistent because function to obtain current working directory is called <code>os.getcwd()</code> and has no counterpart setter. Nevertheless, doc says clearly <code>chdir</code> changes CWD.</p>
<p>In python 3.x path can be also a valid file descriptor, while in 2.x branch <code>fchdir(fd)</code> must be used.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could indeed use <code>os.chdir</code> but relying on assumptions about what the current working directory actually is is looking for troubles, and in your case this holds for the <code>os.system</code> call in <code>test.py</code> as well - try executing <code>test.py</code> from anywhere else and you'll find out why.</p>
<p>The safe approach is to derive the current module / script's absolute path from the <code>__file__</code> attribute and build absolute path for both the call to <code>os.system</code> in <code>test.py</code> and the call to <code>os.mkdir</code> in <code>another.py</code></p>
<p>To get the absolute path to the current module or script's directory, just use:</p>
<pre><code>import os
ABS_PATH = os.path.dirname(os.path.abspath(__file__))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pass the <code>cwd</code> parameter to <a href="http://docs.python.org/2/library/subprocess.html" rel="nofollow">subprocess</a>.<code>call()</code>.</p>
<p><code>os.system()</code> is obsolete; the <code>subprocess</code> module is much more powerful.</p>
</div>
<span class="comment-copy">What about <code>os.chdir()</code>?</span>
<span class="comment-copy">If <code>os.chdir()</code> is not allowed, why is it allowed to be used in a context manager?</span>
<span class="comment-copy">eh,<code>os.chdir</code> can do this...but that's not I want.</span>
<span class="comment-copy">@laike9m You did not say that earlier, and just edited question. Why not? I understand why <code>os.system('cd xxx')</code> is disallowed, but you import whole <code>os</code> anyway. You also say any function is allowed then you make up arbitrary obstructions lol. Is this an academic question or there are any real reasons behind ?</span>
<span class="comment-copy">The reason is that I have many subdirs,solution not using <code>os.chdir</code> will reduce the size of code.</span>
<span class="comment-copy">What? How would it? You <b>will</b> need to find out to which dirs you want to get to and execute some code on it anyways. Maybe make a tuple/list of and then use a loop ? I am also confused what you want to achieve but I'm pretty sure it is already out of the question's scope at this point.</span>
<span class="comment-copy">Well that is not the only troubling point. Using <code>system("python ...")</code> is exceptionally bad idea, especially if there are python 2 and 3 installed side by side.</span>
<span class="comment-copy">@luk32 so <code>subprocess</code> is better?</span>
<span class="comment-copy">I would personally would look into <a href="http://docs.python.org/3/library/functions.html?highlight=eval#eval" rel="nofollow noreferrer"><code>eval/exec</code></a> or <a href="http://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer"><code>importlib</code></a>. It all depends on what you want to achieve. Problem with executing python externally trough shell it to take that the same version of python is used, so <code>python3 test.py</code> works as well as <code>./test.py</code> and <code>python2 test.py</code>. If you hard-code the command you might accidentally change version. With those method you stay with-in python. It is up to you whether this is desirable.</span>
<span class="comment-copy">You are right,but maybe you should use <code>popen</code> instead of <code>call</code> cause <code>call</code> doesn't seem to support <code>cwd</code> argument.</span>
<span class="comment-copy"><code>call()</code> accepts exactly the same arguments as <code>Popen()</code>.  In fact, it just passes all its arguments to <code>Popen()</code>.  (The docs for <code>call()</code> are written in a bizarre way, so that's not obvious).</span>
