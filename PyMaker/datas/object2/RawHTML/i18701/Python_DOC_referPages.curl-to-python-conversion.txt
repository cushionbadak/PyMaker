<div class="post-text" itemprop="text">
<p>I'm trying to use the Twitch API in a Django [python] web application. I want to send a request and get information back, but I don't really know what I'm doing.</p>
<pre><code>curl -H 'Accept: application/vnd.twitchtv.v2+json' -X GET \
    https://api.twitch.tv/kraken/streams/test_channel
</code></pre>
<p>How do I convert this python?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the builtin <a href="http://docs.python.org/2/library/urllib2.html" rel="nofollow">urllib2</a>:</p>
<pre><code>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; req = urllib2.Request('https://api.twitch.tv/kraken/streams/test_channel')
&gt;&gt;&gt; req.add_header('Accept', 'application/vnd.twitchtv.v2+json')
&gt;&gt;&gt; resp = urllib2.urlopen(req)
&gt;&gt;&gt; content = resp.read()
</code></pre>
<p>If you're using Python 3.x, the module is called <a href="http://docs.python.org/3/library/urllib.request.html" rel="nofollow">urllib.request</a>, but otherwise you can do everything the same.</p>
<p>You could also use a third-party library for HTTP, like <a href="http://docs.python-requests.org/" rel="nofollow">requests</a>, which has a simpler API:</p>
<pre><code>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.get('https://api.twitch.tv/kraken/streams/test_channel', 
                     headers={'Accept': 'application/vnd.twitchtv.v2+json'})
&gt;&gt;&gt; print(r.status_code)
422 # &lt;- on my machine, YMMV
&gt;&gt;&gt; print(r.text)
{"status":422,"message":"Channel 'test_channel' is not available on Twitch",
 "error":"Unprocessable Entity"}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I usually use urllib2 for my api requests in (blocking) python apps.</p>
<pre><code>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; req = urllib2.Request('https://api.twitch.tv/kraken/streams/test_channel', None, {'Accept':'application/vnd.twitchtv.vs+json'})
&gt;&gt;&gt; response = urllib2.urlopen(req)
</code></pre>
<p>You can then access the text returned with <code>response.read()</code>. From there you can parse the JSON with your preferred library, though I generally just use <code>json.loads(response.read())</code>.</p>
<p>I would keep in mind, though, that this is for 2.7, if you are using python 3 the libraries have been moved around and this can be found in <code>urllib.request</code></p>
</div>
<span class="comment-copy">Where are you stuck? What have you tried? This is a simple GET request with one header, so you should be able to find all of the information you need with a search engine.</span>
<span class="comment-copy">As a starting place, see <a href="http://docs.python.org/3.3/library/urllib.request.html#urllib.request.urlopen" rel="nofollow noreferrer"><code>urlopen</code></a>. You could instead install a third-party library like <code>requests</code> or even <code>pycurl</code>, but for something this trivial, you don't need it.</span>
<span class="comment-copy">You could, but why? A trivial case like this is just as easy with <code>urlopen</code>, which comes with Python.</span>
<span class="comment-copy">@abarnert: You are right, it's just that I think <code>requests</code> has a bit nicer API. Anyway - added an example with <code>urllib2</code>, too.</span>
<span class="comment-copy">I agree that for anything between trivial cases and really nasty ones (where you need to, e.g., hook into the socket options), <code>requests</code> is definitely easierâ€”sometimes much, much easier. I only suggested sticking with <code>urlopen</code> because this is one of those trivial cases. Anyway, great answer.</span>
