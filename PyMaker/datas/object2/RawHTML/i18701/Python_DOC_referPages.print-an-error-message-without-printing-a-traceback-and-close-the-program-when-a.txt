<div class="post-text" itemprop="text">
<p>I've seen similar questions to this one but none of them really address the trackback.
If I have a class like so</p>
<pre><code>class Stop_if_no_then():
    def __init__(self, value one, operator, value_two, then, line_or_label, line_number):
        self._firstvalue = value_one
        self._secondvalue = value_two
        self._operator = operator
        self._gohere = line_or_label
        self._then = then
        self._line_number = line_number

    def execute(self, OtherClass):
        "code comparing the first two values and making changes etc"
</code></pre>
<p>What I want my execute method to be able to do is if self._then is not equal to the string "THEN" (in allcaps) then I want it to raise a custom error message and terminate the whole  program while also not showing a traceback.</p>
<p>If the error is encountered the only thing that should print out would look something like (I'm using 3 as an example, formatting is not a problem) this.</p>
<pre><code>`Syntax Error (Line 3): No -THEN- present in the statement.`
</code></pre>
<p>I'm not very picky about it actually being an exception class object, so there's no issue in that aspect. Since I will be using this in a while loop, simple if, elif just repeats the message over and over (because obviously I am not closing the loop). I have seen sys.exit() but that also prints out a giant block of red text, unless I am not using it correctly. I don't want to catch the exception in my loop because there are other classes in the same module in which I need to implement something like this.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>try:</code> and then <code>except Exception as inst:</code>
What that will do is give you your error message in a variable named inst and you can print out the arguments on the error with <code>inst.args</code>. Try printing it out and seeing what happens, and is any item in <code>inst.args</code> is the one you are looking for.</p>
<p>EDIT Here is an example I tried with pythons IDLE:</p>
<pre><code>&gt;&gt;&gt; try:
    open("epik.sjj")
except Exception as inst:
    d = inst


&gt;&gt;&gt; d
FileNotFoundError(2, 'No such file or directory')
&gt;&gt;&gt; d.args
(2, 'No such file or directory')
&gt;&gt;&gt; d.args[1]
'No such file or directory'
&gt;&gt;&gt; 
</code></pre>
<p>EDIT 2: as for closing the program you can always <code>raise</code> and error or you can use <code>sys.exit()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can turn off the traceback by limiting its depth.</p>
<h2>Python 2.x</h2>
<pre><code>import sys
sys.tracebacklimit = 0
</code></pre>
<h2>Python 3.x</h2>
<p>In Python 3.5.2 and 3.6.1, setting <a href="https://docs.python.org/3/library/sys.html#sys.tracebacklimit" rel="noreferrer"><code>tracebacklimit</code></a> to <code>0</code> does not seem to have the intended effect. This is a known <a href="https://bugs.python.org/issue12276" rel="noreferrer">bug</a>. Note that <code>-1</code> doesn't work either. Setting it to <code>None</code> does however seem to work, at least for now.</p>
<pre><code>&gt;&gt;&gt; import sys

&gt;&gt;&gt; sys.tracebacklimit = 0
&gt;&gt;&gt; raise Exception
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
Exception

&gt;&gt;&gt; sys.tracebacklimit = -1
&gt;&gt;&gt; raise Exception
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
Exception

&gt;&gt;&gt; sys.tracebacklimit = None
&gt;&gt;&gt; raise Exception
Exception
</code></pre>
<p>Nevertheless, for better or worse, if multiple exceptions are raised, they can all still be printed. For example:</p>
<pre><code>socket.gaierror: [Errno -2] Name or service not known

During handling of the above exception, another exception occurred:

urllib.error.URLError: &lt;urlopen error [Errno -2] Name or service not known&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The cleanest way that I know is to use <code>sys.excepthook</code>.</p>
<p>You implement a three argument function that accepts <code>type</code>, <code>value</code>, and <code>traceback</code> and does whatever you like (say, only prints the value) and assign that function to <code>sys.excepthook</code>.</p>
<p>Here is an example:</p>
<pre><code>import sys

def excepthook(type, value, traceback):
    print(value)

sys.excepthook = excepthook

raise ValueError('hello')
</code></pre>
<p>This is available in both python 2 and python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to get rid of any traceback for customs exceptions and have line number,
you can do this trick</p>
<h1>Python 3</h1>
<pre><code>import sys
import inspect

class NoTraceBackWithLineNumber(Exception):
    def __init__(self, msg):
        try:
            ln = sys.exc_info()[-1].tb_lineno
        except AttributeError:
            ln = inspect.currentframe().f_back.f_lineno
        self.args = "{0.__name__} (line {1}): {2}".format(type(self), ln, msg),
        sys.exit(self)

class MyNewError(NoTraceBackWithLineNumber):
    pass

raise MyNewError("Now TraceBack Is Gone")
</code></pre>
<p>Will give this output, and make the <code>raise</code> keyword useless</p>
<pre><code>MyNewError (line 16): Now TraceBack Is Gone
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In general, if you want to catch any exception except <code>SystemExit</code>, and exit with the exception's message without the traceback, define your <code>main</code> function as below:</p>
<pre><code>&gt;&gt;&gt; import sys

&gt;&gt;&gt; def main():
...     try:
...         # Run your program from here.
...         raise RandomException  # For testing
...     except (Exception, KeyboardInterrupt) as exc:
...         sys.exit(exc)
... 
&gt;&gt;&gt; main()
name 'RandomException' is not defined

$ echo $?
1
</code></pre>
<p>Note that in the case of multiple exceptions being raised, only one message is printed.</p>
<p>This answer is meant to improve upon the <a href="https://stackoverflow.com/a/17785098/832230">one by The-IT</a>.</p>
</div>
<span class="comment-copy">What is the "2" in d.args and is the error message "No such file or directory' customizeable (if I created my own Exception class object)?</span>
<span class="comment-copy">Honestly, I don't know what the 2 is but it's not important. I'm showing you how to find the error message yourself. And the "No such file or directory" is a string which you can put into a variable and then do what ever you want to with. <code>errorMessage = d.args[1]</code></span>
<span class="comment-copy">The actual error for that specific line of code is <code>FileNotFoundError: [Errno 2] No such file or directory: 'epik.sjj'</code> so that's where to 2 came from. the <code>.args</code> is a tuple of all the parts of the error.</span>
<span class="comment-copy">Why not just a simple <code>print('blah-blah-blah')</code> instead of `d = inst'?</span>
<span class="comment-copy">Also if I do sys.exit() or raise an exception that gives me a traceback. Is there no way to get rid of the traceback? or make it not show up</span>
<span class="comment-copy">Let us <a href="http://chat.stackoverflow.com/rooms/156936/discussion-between-egmusic-and-mark-veltzer">continue this discussion in chat</a>.</span>
<span class="comment-copy">Let us <a href="http://chat.stackoverflow.com/rooms/157117/discussion-between-mark-veltzer-and-egmusic">continue this discussion in chat</a>.</span>
<span class="comment-copy">Would there be a way to print only the value in the console, but full traceback in a log at the same time?</span>
<span class="comment-copy">Sure. You can use the traceback module and do what ever you want in the 'execepthook' function.</span>
<span class="comment-copy">You could also subclass <code>SystemExit</code>.</span>
