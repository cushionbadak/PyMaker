<div class="post-text" itemprop="text">
<p>I have been teaching myself python over the past few months and am finally starting to do some useful things. </p>
<p>What I am trying to ultimately do is have a python script that acts as a queue. That is, I would like to have a folder with a bunch of input files that another program uses to run calculations (I am a theoretical physicist and do many computational jobs a day).</p>
<p>The way I must do this now is put all of the input files on the box that has the computational software. Then I have to convert the dos input files to unix (dos2unix), following this I must copy the new input file to a file called 'INPUT'. Finally I run a command that starts the job.</p>
<p>All of these tasks are handled in a command prompt. My question is how to I interface my program with the command prompt? Then, how can I monitor the process (which I normally do via cpu usage and the TOP command), and have python start the next job as soon as the last job finishes.</p>
<p>Sorry for rambling, I just do not know how to control a command prompt from a script, and then have it automatically 'watch' the job.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/2/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> module has many tools for executing system commands in python.</p>
<pre><code>from subprocess import call
call(["ls", "-l"])
</code></pre>
<p><a href="https://stackoverflow.com/a/89243/2502012">source</a></p>
<p>call will wait for the command to finish and return its returncode, so you can call another one afterwards knowing that the previous one has finished.</p>
<p><code>os.system</code> is an older way to do it, but has fewer tools and isn't recommended:</p>
<pre><code>import os
os.system('"C:/Temp/a b c/Notepad.exe"')
</code></pre>
<p><strong>edit</strong> FvD left a comment explaning how to "watch" the process below</p>
</div>
<div class="post-text" itemprop="text">
<p>If you actually need to drive an interactive command-line interface, there is no way to do that with the stdlib.</p>
<p>There are a number of third-party options for this; I think <a href="http://www.noah.org/wiki/Pexpect" rel="nofollow"><code>pexpect</code></a> is probably the most popular.</p>
<hr/>
<p>However, if you don't really need to drive it interactively—if the program only needs you to give it arguments on the command line, or a "batch mode" dump to its standard input, then <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow"><code>subprocess</code></a> makes it easy. For example, to drive the <code>sort</code> program, you can just do this:</p>
<pre><code>with Popen(['sort', '-n'], stdin=PIPE, stdout=PIPE) as p:
    sorted_data = p.communicate(input_data)
</code></pre>
<p>This is of course a silly example, because you can do anything <code>sort</code> can do with Python's <code>sorted</code> with a <code>key</code> argument, and probably a lot more readably.</p>
<hr/>
<p>More generally: often when you <em>think</em> you need to interactively script some program, you really don't, and sometimes you don't even need to run it at all.</p>
<p>And your particular case is exactly such a case. You're asking about interactively scripting the shell. But you don't need actually need to do so, because Python can do all the things you need from the shell.</p>
</div>
<span class="comment-copy">I think the <a href="http://docs.python.org/2/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> module is what you want. It's a good question, I'll give you that, but there are many <a href="http://stackoverflow.com/q/89228/645270">duplicates</a> of it here on SO.</span>
<span class="comment-copy">What you're actually asking for—controlling a command prompt from a script—is hard. But when the command prompt you're trying to control (in this case, the shell) isn't doing anything you can't do more easily in Python (in this case, with <code>subprocess</code>), you don't need to control the prompt.</span>
<span class="comment-copy">And within subprocess you can use Popen.communicate(input=None) to "watch" the job, as the OP put it.</span>
<span class="comment-copy">How is <code>os.system</code> any easier than <code>subprocess.call</code>? It's the same number of concepts (and about the same number of keystrokes, too) in trivial cases, and more complicated as soon as anything else comes up (like arguments with spaces in them).</span>
<span class="comment-copy">Major deja vu from the duplicate I linked to :p (with the <code>os.system</code> discussion)</span>
<span class="comment-copy">ty @Keyser :) forgot to cite like i usually do</span>
