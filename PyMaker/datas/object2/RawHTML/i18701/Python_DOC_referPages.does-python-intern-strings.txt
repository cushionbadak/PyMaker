<div class="post-text" itemprop="text">
<p>In Java, explicitly declared Strings are interned by the JVM, so that subsequent declarations of the same String results in two pointers to the same String instance, rather than two separate (but identical) Strings. </p>
<p>For example:</p>
<pre><code>public String baz() {
    String a = "astring";
    return a;
}

public String bar() {
    String b = "astring"
    return b;
}

public void main() {
    String a = baz()
    String b = bar()
    assert(a == b) // passes
}
</code></pre>
<p>My question is, does CPython (or any other Python runtime) do the same thing for strings? For example, if I have some class:</p>
<pre><code>class example():
    def __init__():
        self._inst = 'instance' 
</code></pre>
<p>And create 10 instances of this class, will each one of them have an instance variable referring to the same string in memory, or will I end up with 10 separate strings?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is called interning, and yes, Python does do this to some extent, for shorter strings created as string literals. See <a href="https://stackoverflow.com/questions/24245324/about-the-changing-id-of-a-python-immutable-string">About the changing id of a Python immutable string</a> for some discussion.</p>
<p>Interning is runtime dependent, there is no standard for it. Interning is always a trade-off between memory use and the cost of checking if you are creating the same string. There is a <a href="http://docs.python.org/2/library/functions.html#intern" rel="nofollow noreferrer">built-in intern() function</a> to force the issue if you are so inclined, which documents <em>some</em> of the interning Python does for you automatically:</p>
<blockquote>
<p>Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or instance attributes have interned keys.</p>
</blockquote>
<p>Note that Python 3 moved the <code>intern()</code> function to the <a href="https://docs.python.org/3/library/sys.html#sys.intern" rel="nofollow noreferrer"><code>sys</code> module</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A fairly easy way to tell is by using <code>id()</code>. However as @MartijnPieters mentions, this is runtime dependent.</p>
<pre><code>class example():

    def __init__(self):
        self._inst = 'instance'

for i in xrange(10):
    print id(example()._inst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>All length 0 and length 1 strings are interned.</li>
<li>Strings are interned at compile time ('wtf' will be interned but ''.join(['w', 't', 'f'] will not be interned)</li>
<li>Strings that are not composed of ASCII letters, digits or underscores, are not interned. This explains why 'wtf!' was not interned due to !.</li>
</ul>
<p><a href="https://www.codementor.io/satwikkansal/do-you-really-think-you-know-strings-in-python-fnxh8mtha" rel="nofollow noreferrer">https://www.codementor.io/satwikkansal/do-you-really-think-you-know-strings-in-python-fnxh8mtha</a></p>
<p>The above article explains the string interning in python. There are some exceptions which are defined clearly in the article.</p>
</div>
<span class="comment-copy">This is called interning, and yes, Python does do this to some extend, for shorter strings created as string literals. See <a href="http://stackoverflow.com/q/15541404">Python string interning</a></span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/1504717/python-vs-is-comparing-strings-is-fails-sometimes-why">Python '==' vs 'is' comparing strings, 'is' fails sometimes, why?</a></span>
<span class="comment-copy">@MartijnPieters - thanks, but just how short are "shorter" strings? Is this runtime dependent, or is there a standard for it?</span>
<span class="comment-copy">@chrsva: It is runtime dependent, there is no standard for it. Interning is always a trade-off between memory use and the cost of checking if you are creating the same string. There is a <a href="http://docs.python.org/2/library/functions.html#intern" rel="nofollow noreferrer">built-in <code>intern()</code> function</a> to force the issue if you are so inclined.</span>
<span class="comment-copy">@MartijnPieters - I see, thanks! If you would like to, you can put up your answer and I will accept it right away.</span>
<span class="comment-copy">Note that the <code>intern</code> built-in appears to have been removed in Python 3.  I don't feel like digging up exactly which version right now.</span>
<span class="comment-copy">@zwol: 3.0. I'll see if I can find the motivation, probably in a PEP somewhere.</span>
<span class="comment-copy">@zwol: it was moved to the <code>sys</code> module.</span>
