<div class="post-text" itemprop="text">
<p>i am passing args like</p>
<pre><code>python file.py arg1 arg2 arg3
</code></pre>
<p>I want to know if there is a way to treat these args as objects not strings for the following code:</p>
<pre><code>one = sys.argv[1]
two = sys.argv[2]
three = sys.argv[3]
from one import two
    a = two.three()
</code></pre>
<p>since one two three would be strings. how can they be parsed as objects?</p>
<p>UPDATE:</p>
<pre><code>pkg = import_module(two, package=one)
</code></pre>
<p>gives</p>
<pre><code>__import__(name)                                                              
ImportError: No module named &lt;whatever_module_name&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/importlib.html" rel="nofollow">importlib for Python 2</a> or <a href="http://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow">importlib for Python 3</a>.</p>
<pre><code>import importlib
path = importlib.import_module('os.path')
print(path.join('a','b'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think what you want is <a href="http://docs.python.org/3/library/functions.html#__import__" rel="nofollow"><code>__importing__</code></a>.</p>
<pre><code>spam = __import__('spam', globals(), locals(), [], 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built-in <code>__import__</code> or the <code>imp</code> <a href="http://docs.python.org/2/library/imp.html" rel="nofollow">module</a> to import object programmatically:</p>
<pre><code># Import 'name' relative to 'path'
module = imp.load_module(name, *imp.find_module(name, [path]))
</code></pre>
<p>Whenever I've wanted to programmatically import modules, this is how I do it, but <code>imp.find_module</code> returns a 3-tuple:</p>
<pre><code>fil, path, desc = imp.find_module(name, [path])
module = imp.load_module(name, fil, path, desc)
</code></pre>
</div>
<span class="comment-copy">what is a and b? I have imported using this lib the module. now i want to access a function named three which is given as an argument</span>
<span class="comment-copy">In the concrete example you have given you could use <code>getattr(importlib.import_module(one+'.'+two), three)()</code></span>
<span class="comment-copy">what is * for in *imp?</span>
<span class="comment-copy">It's argument unpacking. I'll edit the answer to make it a little more clear</span>
<span class="comment-copy">ok yea i just read the find_module lib and saw it returns in tuple form. but then when it returns a tuple of 3, couldn't we just do it w/o * ?</span>
<span class="comment-copy">I'm not sure what you mean, but since I generally don't need to access the <code>file</code>, <code>path</code> and <code>description</code>, I usually just pass them into <code>load_module</code> unpacked. A closer reading of the docs says we have to close the <code>file</code>, so best to do it multi-line. Ultimately, <code>imp</code> is more powerful and nuanced, but <code>__import__</code> also works just fine.</span>
