<div class="post-text" itemprop="text">
<p>I am trying to open a log file every 15 minutes and see if the file called a 'finalize' string. I know how to check the file for the string but I do not know if there is an easy way to have the script look every 15 minutes.</p>
<p>Is there a module of some sort that will allow me to do this?</p>
<p><strong>[EDIT]</strong> I want this because I am writing a queue program. That is once one job calls finalize, the script will load up another job and then monitor that until it finishes, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/3/library/sched.html" rel="nofollow"><code>sched</code></a> module will let you do this. So will the <a href="http://docs.python.org/2/library/threading.html#timer-objects" rel="nofollow"><code>Timer</code></a> class in the <code>threading</code> module.</p>
<p>However, either of those is overkill for what you want.</p>
<p>The easy, and generally best, way to do it is to use your system's scheduler (Scheduled Tasks on Windows, Launch Services on mac, <code>cron</code> or a related program on most other systems) to run your program every 15 minutes.</p>
<p>Alternatively, just use <code>time.sleep(15*60)</code>, and check whether <code>time.time()</code> is actually 15*60 seconds later than last time through the loop.</p>
<hr/>
<p>One advantage of triggering your script from outside is that it makes it very easy to change the trigger. For example, you could change it to trigger every time the file has been modified, instead of every 15 minutes, without changing your script at all. (The exact way  you do that, of course, depends on your platform; LaunchServices, famd, inotify, FindFirstChangeNotification, etc. all work very differently. But every modern platform has some way to do it.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="https://github.com/kasun/python-tail" rel="nofollow">python-tail</a> module:</p>
<pre><code>import tail

def print_line(txt):
    print 'finalize' in txt

t = tail.Tail('/var/log/syslog')
t.register_callback(print_line)
t.follow(s=60*15)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use sched module<code>scheduler.run()</code>The function waits for the next event, then execute it and so on until there are no more scheduled events.You can create a queue of events to do this.<a href="http://docs.python.org/2/library/sched.html" rel="nofollow">check out the python docs</a></p>
</div>
<span class="comment-copy">Just have cron run your script periodically?</span>
<span class="comment-copy">Is the code running in a Web Page?</span>
