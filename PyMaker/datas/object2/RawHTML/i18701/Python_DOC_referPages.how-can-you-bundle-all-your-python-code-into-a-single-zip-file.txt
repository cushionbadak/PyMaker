<div class="post-text" itemprop="text">
<p>It would be convenient when distributing applications to combine <em>all</em> of the eggs into a single zip file so that all you need to distribute is a single zip file and an executable (some custom binary that simply starts, loads the zip file's main function and kicks python off or similar). </p>
<p>I've seen some talk of doing this online, but no examples of how to actually do it.</p>
<p>I'm aware that you can (if its zip safe) convert eggs into zip files.</p>
<p>What I'm not sure about is:</p>
<p>Can you somehow combine all your eggs into a single zip file? If so, how?</p>
<p>How would you load and run code from a specific egg?</p>
<p>How would you ensure that the code in that egg could access all the dependencies (ie. other eggs in the zip file)?</p>
<p>People ask this sort of stuff a lot and get answers like; use py2exe. Yes, I get it, that's one solution. It's not the question I'm asking here though...</p>
</div>
<div class="post-text" itemprop="text">
<p>You can automate most of the work with regular python tools. Let's start with clean virtualenv.</p>
<pre><code>[zart@feena ~]$ mkdir ziplib-demo
[zart@feena ~]$ cd ziplib-demo
[zart@feena ziplib-demo]$ virtualenv .
New python executable in ./bin/python
Installing setuptools.............done.
Installing pip...............done.
</code></pre>
<p>Now let's install set of packages that will go into zipped library. The trick is to force installing them into specific directory.</p>
<p>(Note: don't use --egg option either on command-line or in pip.conf/pip.ini because it will break file layout making it non-importable in zip)</p>
<pre><code>[zart@feena ziplib-demo]$ bin/pip install --install-option --install-lib=$PWD/unpacked waitress
Downloading/unpacking waitress
  Downloading waitress-0.8.5.tar.gz (112kB): 112kB downloaded
  Running setup.py egg_info for package waitress

Requirement already satisfied (use --upgrade to upgrade): setuptools in ./lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg (from waitress)
Installing collected packages: waitress
  Running setup.py install for waitress

    Installing waitress-serve script to /home/zart/ziplib-demo/bin
Successfully installed waitress
Cleaning up...
</code></pre>
<p><strong>Update</strong>: pip now has <code>-t &lt;path&gt;</code> switch, that does the same thing as <code>--install-option --install-lib=</code>.</p>
<p>Now let's pack all of them into one zip</p>
<pre><code>[zart@feena ziplib-demo]$ cd unpacked
[zart@feena unpacked]$ ls
waitress  waitress-0.8.5-py2.7.egg-info
[zart@feena unpacked]$ zip -r9 ../library.zip *
  adding: waitress/ (stored 0%)
  adding: waitress/receiver.py (deflated 71%)
  adding: waitress/server.pyc (deflated 64%)
  adding: waitress/utilities.py (deflated 62%)
  adding: waitress/trigger.pyc (deflated 63%)
  adding: waitress/trigger.py (deflated 61%)
  adding: waitress/receiver.pyc (deflated 60%)
  adding: waitress/adjustments.pyc (deflated 51%)
  adding: waitress/compat.pyc (deflated 56%)
  adding: waitress/adjustments.py (deflated 60%)
  adding: waitress/server.py (deflated 68%)
  adding: waitress/channel.py (deflated 72%)
  adding: waitress/task.pyc (deflated 57%)
  adding: waitress/tests/ (stored 0%)
  adding: waitress/tests/test_regression.py (deflated 63%)
  adding: waitress/tests/test_functional.py (deflated 88%)
  adding: waitress/tests/test_parser.pyc (deflated 76%)
  adding: waitress/tests/test_trigger.pyc (deflated 73%)
  adding: waitress/tests/test_init.py (deflated 72%)
  adding: waitress/tests/test_utilities.pyc (deflated 78%)
  adding: waitress/tests/test_buffers.pyc (deflated 79%)
  adding: waitress/tests/test_trigger.py (deflated 82%)
  adding: waitress/tests/test_buffers.py (deflated 86%)
  adding: waitress/tests/test_runner.py (deflated 75%)
  adding: waitress/tests/test_init.pyc (deflated 69%)
  adding: waitress/tests/__init__.pyc (deflated 21%)
  adding: waitress/tests/support.pyc (deflated 48%)
  adding: waitress/tests/test_utilities.py (deflated 73%)
  adding: waitress/tests/test_channel.py (deflated 87%)
  adding: waitress/tests/test_task.py (deflated 87%)
  adding: waitress/tests/test_functional.pyc (deflated 82%)
  adding: waitress/tests/__init__.py (deflated 5%)
  adding: waitress/tests/test_compat.pyc (deflated 53%)
  adding: waitress/tests/test_receiver.pyc (deflated 79%)
  adding: waitress/tests/test_adjustments.py (deflated 78%)
  adding: waitress/tests/test_adjustments.pyc (deflated 74%)
  adding: waitress/tests/test_server.pyc (deflated 73%)
  adding: waitress/tests/fixtureapps/ (stored 0%)
  adding: waitress/tests/fixtureapps/filewrapper.pyc (deflated 59%)
  adding: waitress/tests/fixtureapps/getline.py (deflated 37%)
  adding: waitress/tests/fixtureapps/nocl.py (deflated 47%)
  adding: waitress/tests/fixtureapps/sleepy.pyc (deflated 44%)
  adding: waitress/tests/fixtureapps/echo.py (deflated 40%)
  adding: waitress/tests/fixtureapps/error.py (deflated 52%)
  adding: waitress/tests/fixtureapps/nocl.pyc (deflated 48%)
  adding: waitress/tests/fixtureapps/getline.pyc (deflated 32%)
  adding: waitress/tests/fixtureapps/writecb.pyc (deflated 42%)
  adding: waitress/tests/fixtureapps/toolarge.py (deflated 37%)
  adding: waitress/tests/fixtureapps/__init__.pyc (deflated 20%)
  adding: waitress/tests/fixtureapps/writecb.py (deflated 50%)
  adding: waitress/tests/fixtureapps/badcl.pyc (deflated 44%)
  adding: waitress/tests/fixtureapps/runner.pyc (deflated 58%)
  adding: waitress/tests/fixtureapps/__init__.py (stored 0%)
  adding: waitress/tests/fixtureapps/filewrapper.py (deflated 74%)
  adding: waitress/tests/fixtureapps/runner.py (deflated 41%)
  adding: waitress/tests/fixtureapps/echo.pyc (deflated 42%)
  adding: waitress/tests/fixtureapps/groundhog1.jpg (deflated 24%)
  adding: waitress/tests/fixtureapps/error.pyc (deflated 48%)
  adding: waitress/tests/fixtureapps/sleepy.py (deflated 42%)
  adding: waitress/tests/fixtureapps/toolarge.pyc (deflated 43%)
  adding: waitress/tests/fixtureapps/badcl.py (deflated 45%)
  adding: waitress/tests/support.py (deflated 52%)
  adding: waitress/tests/test_task.pyc (deflated 78%)
  adding: waitress/tests/test_channel.pyc (deflated 78%)
  adding: waitress/tests/test_regression.pyc (deflated 68%)
  adding: waitress/tests/test_parser.py (deflated 80%)
  adding: waitress/tests/test_server.py (deflated 78%)
  adding: waitress/tests/test_receiver.py (deflated 87%)
  adding: waitress/tests/test_compat.py (deflated 51%)
  adding: waitress/tests/test_runner.pyc (deflated 72%)
  adding: waitress/__init__.pyc (deflated 50%)
  adding: waitress/channel.pyc (deflated 58%)
  adding: waitress/runner.pyc (deflated 54%)
  adding: waitress/buffers.py (deflated 74%)
  adding: waitress/__init__.py (deflated 61%)
  adding: waitress/runner.py (deflated 58%)
  adding: waitress/parser.py (deflated 69%)
  adding: waitress/compat.py (deflated 69%)
  adding: waitress/buffers.pyc (deflated 69%)
  adding: waitress/utilities.pyc (deflated 60%)
  adding: waitress/parser.pyc (deflated 53%)
  adding: waitress/task.py (deflated 72%)
  adding: waitress-0.8.5-py2.7.egg-info/ (stored 0%)
  adding: waitress-0.8.5-py2.7.egg-info/dependency_links.txt (stored 0%)
  adding: waitress-0.8.5-py2.7.egg-info/installed-files.txt (deflated 83%)
  adding: waitress-0.8.5-py2.7.egg-info/top_level.txt (stored 0%)
  adding: waitress-0.8.5-py2.7.egg-info/PKG-INFO (deflated 65%)
  adding: waitress-0.8.5-py2.7.egg-info/not-zip-safe (stored 0%)
  adding: waitress-0.8.5-py2.7.egg-info/SOURCES.txt (deflated 71%)
  adding: waitress-0.8.5-py2.7.egg-info/entry_points.txt (deflated 33%)
  adding: waitress-0.8.5-py2.7.egg-info/requires.txt (deflated 5%)
[zart@feena unpacked]$ cd ..
</code></pre>
<p>Note that those files should be at top of zip, you can't just <code>zip -r9 library.zip unpacked</code></p>
<p>Checking the result:</p>
<pre><code>[zart@feena ziplib-demo]$ PYTHONPATH=library.zip python
Python 2.7.1 (r271:86832, Apr 12 2011, 16:15:16)
[GCC 4.6.0 20110331 (Red Hat 4.6.0-2)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import waitress
&gt;&gt;&gt; waitress
&lt;module 'waitress' from '/home/zart/ziplib-demo/library.zip/waitress/__init__.pyc'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; from wsgiref.simple_server import demo_app
&gt;&gt;&gt; waitress.serve(demo_app)
serving on http://0.0.0.0:8080
^C&gt;&gt;&gt;
</code></pre>
<p><strong>Update:</strong> since python 3.5 there is also <a href="https://docs.python.org/3/library/zipapp.html" rel="noreferrer" title="zipapp module">zipapp module</a> which can help with bundling the whole package into .pyz file. For more complex needs <a href="http://www.pyinstaller.org/" rel="noreferrer" title="pyinstaller">pyinstaller</a>, <a href="http://www.py2exe.org/" rel="noreferrer" title="py2exe">py2exe</a> or <a href="https://py2app.readthedocs.io/en/latest/" rel="noreferrer" title="py2app">py2app</a> might better fit the bill.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python will execute zip files as if they were single scripts if they contain an __main__.py[c] file inside at the top level. Package imports will then also check inside the zip that __main__ is executing from within.</p>
<p>So create your setup.py (<code>py_modules = ['__main__']</code> is important here along with specifying all your packages and other modules).</p>
<p>Then run <code>python setup.py bdist --format zip</code> to create the zip file. Now if you want it to be executable you can do the following. At this point you can execute the resulting zip file like any other python script.</p>
<p>One more step for Linux/Mac users reading this to improve convenience (although probably not your scenario as you mention py2exe)</p>
<pre><code>echo '#!/usr/bin/env python' &gt; my_executable_zip
cat output_of_setup_py_bdist.zip &gt;&gt; my_executable_zip
chmod +x my_executable_zip
</code></pre>
<p>This just prepends a #! line to the zip file so that when run from the shell you do not need to specify the interpreter. At this point you can execute it like any other binary on the system although secretly it is a zip file full of python. I typically create a makefile to run setup.py and then do this conversion.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, one zip-file/egg can provide multiple modules, so you can combine them into one file. I'm however highly skeptical to that being a good idea. You still need to install that zip-file, and it may still clash with other already installed versions, etc.</p>
<p>So the first question to ask is what the aim is. Why do you want just one file? Is it for ease of install, or ease of distribution, or what?</p>
<p>Having just one file will not really make the install easier, there are other, better ways. You can let the install download and install the dependencies automatically, that's easy to do.</p>
<p>And having them in one zip-file still means you need to expand that zip-file and run setup.py, which isn't very userfriendly.</p>
<p>So having just one file doesn't really solve many problems, so the question is which problem you are trying to solve.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="http://kb.winzip.com/kb/entry/179" rel="nofollow">self-extracting zip file</a>, set up to launch a Python interpreter after decompressing the eggs from within the very same .exe file that contains them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, it's possible to create your own "packages/eggs" in your {app-home-dir/packages} (by coping eggs there for example) and configure extra files in setup.py (setuptools) to pack it all as single distribution (<a href="https://stackoverflow.com/questions/1471994/what-is-setup-py">What is setup.py?</a>). Note, that before you launch your app main function you need to inform Python where exactly your external "packages/eggs" are -  by adding {app-home-dir/packages} to sys.path. That is the easies way to create standalone package ..however with that goes dangers regarding dependencies and their versions, Python modules mixed with Ansi C code, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Can you somehow combine all your eggs into a single zip file? If so, how?</strong></p>
<p>Yes you can. Python will load from zip archive that are added in sys.path (see <a href="http://www.python.org/dev/peps/pep-0273/" rel="nofollow">PEP 273</a>). If you put all python libraries inside an archive, the archive is treated as a directory. This is what some of the py2exe, bbfreeze, etc. tools can do to isolate the libraries.</p>
<p>As for the how, it really depends on how your eggs are installed: pip, easy_install, etc. The logic would be to inspect all you dependent eggs and gather their install path and then zip the eggs inside an archive.</p>
<p><strong>How would you load and run code from a specific egg?</strong></p>
<p>You need to define load and run. If you are talking about importing module and packages, you do not have to do anything 
special. Here is an interesting blog post on the subject including some caveat <a href="http://blogs.gnome.org/jamesh/2012/05/21/python-zip-files/" rel="nofollow">Packaging Python programs as runnable ZIP files</a> </p>
<p><strong>How would you ensure that the code in that egg could access all the dependencies (ie. other eggs in the zip file)?</strong></p>
<p>This is built-in as long as the eggs are not extensions (ie zip safe). See also <a href="http://docs.python.org/2/library/zipimport.html" rel="nofollow">zipimport</a></p>
</div>
<span class="comment-copy">To all those asking why Zip, why its not good etc etc.... Ask the huge Java community why they pack everything in JAR/WAR and still be on top with awesomeness. The question is how to achieve a single bundle with python with code as well as lib inside, which will just need one to have Python installed and everything will work automatically. I got a huge list of when its required.</span>
<span class="comment-copy">Don't forget to make the new zip executable: <code>chmod 555 ./my_executable_zip</code> or <code>chmod +x ./my_executable_zip</code>.</span>
<span class="comment-copy">Specifically distributing a stand alone python application to a computer <i>without python installed on it</i>; ie. you build a custom python binary from source that loads a specific boot string (eg. "import blah; blah.main()") after importing the zip file to the path. This allows you to distribute an entire python app as binary + zip file. Very convenient. Works fine; but not when you have dependencies on libraries.</span>
<span class="comment-copy">Also, download automatically? Given that pypi.python.org was down for hours this last week, I'd say that for a good user experience that's a terrrrrible idea. Even just downloading things when it's up results in timeouts half the time. Absolutely not interested in going down that path.</span>
<span class="comment-copy">Is manually sorting through the eggs and copying the subfolders really the only way? I can't just create a single zip file with all the .egg folders in it somehow? :(</span>
<span class="comment-copy">Also, I just tried this and it doesn't seem to work; ie. pip install blah, and create a zip file from all the .egg folders and try to import; doesn't work at all. :( Can you clarify your third point by any chance?</span>
