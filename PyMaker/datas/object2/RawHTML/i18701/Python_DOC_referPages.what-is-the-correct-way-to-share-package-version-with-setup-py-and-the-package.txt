<div class="post-text" itemprop="text">
<p>With <code>distutils</code>, <code>setuptools</code>, etc. a package version is specified in <code>setup.py</code>:</p>
<pre><code># file: setup.py
...
setup(
name='foobar',
version='1.0.0',
# other attributes
)
</code></pre>
<p>I would like to be able to access the same version number from within the package:</p>
<pre><code>&gt;&gt;&gt; import foobar
&gt;&gt;&gt; foobar.__version__
'1.0.0'
</code></pre>
<hr/>
<p>I could add <code>__version__ = '1.0.0'</code> to my package's __init__.py, but I would also like to include additional imports in my package to create a simplified interface to the package:</p>
<pre><code># file: __init__.py

from foobar import foo
from foobar.bar import Bar

__version__ = '1.0.0'
</code></pre>
<p>and</p>
<pre><code># file: setup.py

from foobar import __version__
...
setup(
name='foobar',
version=__version__,
# other attributes
)
</code></pre>
<p>However, these additional imports can cause the installation of <code>foobar</code> to fail if they import other packages that are not yet installed. What is the correct way to share package version with setup.py and the package?</p>
</div>
<div class="post-text" itemprop="text">
<p>Set the version in <code>setup.py</code> only, and read your own version with <a href="http://pythonhosted.org/setuptools/pkg_resources.html" rel="noreferrer"><code>pkg_resources</code></a>, effectively querying the <code>setuptools</code> metadata:</p>
<p>file: <code>setup.py</code></p>
<pre><code>setup(
    name='foobar',
    version='1.0.0',
    # other attributes
)
</code></pre>
<p>file: <code>__init__.py</code></p>
<pre><code>from pkg_resources import get_distribution

__version__ = get_distribution('foobar').version
</code></pre>
<p>To make this work in all cases, where you could end up running this without having installed it, test for <code>DistributionNotFound</code> and the distribution location:</p>
<pre><code>from pkg_resources import get_distribution, DistributionNotFound
import os.path

try:
    _dist = get_distribution('foobar')
    # Normalize case for Windows systems
    dist_loc = os.path.normcase(_dist.location)
    here = os.path.normcase(__file__)
    if not here.startswith(os.path.join(dist_loc, 'foobar')):
        # not installed, but there is another version that *is*
        raise DistributionNotFound
except DistributionNotFound:
    __version__ = 'Please install this project with setup.py'
else:
    __version__ = _dist.version
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't believe there's a canonical answer to this, but my method (either directly copied or slightly tweaked from what I've seen in various other places) is as follows:</p>
<p><strong>Folder heirarchy (relevant files only):</strong></p>
<pre><code>package_root/
 |- main_package/
 |   |- __init__.py
 |   `- _version.py
 `- setup.py
</code></pre>
<p><strong><code>main_package/_version.py</code>:</strong></p>
<pre><code>"""Version information."""

# The following line *must* be the last in the module, exactly as formatted:
__version__ = "1.0.0"
</code></pre>
<p><strong><code>main_package/__init__.py</code>:</strong></p>
<pre><code>"""Something nice and descriptive."""

from main_package.some_module import some_function_or_class
# ... etc.
from main_package._version import __version__

__all__ = (
    some_function_or_class,
    # ... etc.
)
</code></pre>
<p><strong><code>setup.py</code>:</strong></p>
<pre><code>from setuptools import setup

setup(
    version=open("main_package/_version.py").readlines()[-1].split()[-1].strip("\"'"),
    # ... etc.
)
</code></pre>
<p>... which is ugly as sin ... but it works, and I've seen it or something like it in packages distributed by people who I'd expect to know a better way if there were one.</p>
</div>
<div class="post-text" itemprop="text">
<p>I agree with <a href="https://stackoverflow.com/questions/17583443/what-is-the-correct-way-to-share-package-version-with-setup-py-and-the-package/39671214#comment43819328_17626524">@stefano-m 's philosophy</a> about:</p>
<blockquote>
<p>Having <strong>version</strong> = "x.y.z" in the source and parsing it within
  setup.py is definitely the correct solution, IMHO. Much better than
  (the other way around) relying on run time magic.</p>
</blockquote>
<p>And this answer is derived from @zero-piraeus 's <a href="https://stackoverflow.com/questions/17583443/what-is-the-correct-way-to-share-package-version-with-setup-py-and-the-package/17626524#17626524">answer</a>. The whole point is "don't use imports in setup.py, instead, read the version from a file".</p>
<p>I use regex to parse the <code>__version__</code> so that it does not need to be the last line of a dedicated file at all. In fact, I still put the single-source-of-truth <code>__version__</code> inside my project's <code>__init__.py</code>.</p>
<p><strong>Folder heirarchy (relevant files only):</strong></p>
<pre><code>package_root/
 |- main_package/
 |   `- __init__.py
 `- setup.py
</code></pre>
<p><strong><code>main_package/__init__.py</code>:</strong></p>
<pre><code># You can have other dependency if you really need to
from main_package.some_module import some_function_or_class

# Define your version number in the way you mother told you,
# which is so straightforward that even your grandma will understand.
__version__ = "1.2.3"

__all__ = (
    some_function_or_class,
    # ... etc.
)
</code></pre>
<p><strong><code>setup.py</code>:</strong></p>
<pre><code>from setuptools import setup
import re, io

__version__ = re.search(
    r'__version__\s*=\s*[\'"]([^\'"]*)[\'"]',  # It excludes inline comment too
    io.open('main_package/__init__.py', encoding='utf_8_sig').read()
    ).group(1)
# The beautiful part is, I don't even need to check exceptions here.
# If something messes up, let the build process fail noisy, BEFORE my release!

setup(
    version=__version__,
    # ... etc.
)
</code></pre>
<p>... which is still not ideal ... but it works.</p>
<p>And by the way, at this point you can test your new toy in this way:</p>
<pre><code>python setup.py --version
1.2.3
</code></pre>
<p>PS: This <a href="https://packaging.python.org/guides/single-sourcing-package-version/" rel="nofollow noreferrer">official Python packaging document</a> (and its <a href="https://python-packaging-user-guide.readthedocs.io/single_source_version/" rel="nofollow noreferrer">mirror</a>) describes more options. Its first option is also using regex. (Depends on the exact regex you use, it may or may not handle quotation marks inside version string. Generally not a big issue though.)</p>
<p>PPS: The <a href="https://github.com/AzureAD/azure-activedirectory-library-for-python/issues/89" rel="nofollow noreferrer">fix in ADAL Python</a> is now backported into this answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>Put <code>__version__</code> in <code>your_pkg/__init__.py</code>, and parse in <code>setup.py</code> using <code>ast</code>:</p>
<pre><code>import ast
import importlib.util

from pkg_resources import safe_name

PKG_DIR = 'my_pkg'

def find_version():
    """Return value of __version__.

    Reference: https://stackoverflow.com/a/42269185/
    """
    file_path = importlib.util.find_spec(PKG_DIR).origin
    with open(file_path) as file_obj:
        root_node = ast.parse(file_obj.read())
    for node in ast.walk(root_node):
        if isinstance(node, ast.Assign):
            if len(node.targets) == 1 and node.targets[0].id == "__version__":
                return node.value.s
    raise RuntimeError("Unable to find version string.")

setup(name=safe_name(PKG_DIR),
      version=find_version(),
      packages=[PKG_DIR],
      ...
      )
</code></pre>
<p>If using Python &lt; 3.4, note that <a href="https://docs.python.org/3/library/importlib.html#importlib.util.find_spec" rel="nofollow noreferrer"><code>importlib.util.find_spec</code></a> is not available. Moreover, any backport of <code>importlib</code> of course cannot be relied upon to be available to <code>setup.py</code>. In this case, use:</p>
<pre><code>import os

file_path = os.path.join(os.path.dirname(__file__), PKG_DIR, '__init__.py')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on the <a href="https://stackoverflow.com/a/17638236/429533">accepted answer</a> and comments, this is what I ended up doing:</p>
<p>file: <code>setup.py</code></p>
<pre><code>setup(
    name='foobar',
    version='1.0.0',
    # other attributes
)
</code></pre>
<p>file: <code>__init__.py</code></p>
<pre><code>from pkg_resources import get_distribution, DistributionNotFound

__project__ = 'foobar'
__version__ = None  # required for initial installation

try:
    __version__ = get_distribution(__project__).version
except DistributionNotFound:
    VERSION = __project__ + '-' + '(local)'
else:
    VERSION = __project__ + '-' + __version__
    from foobar import foo
    from foobar.bar import Bar
</code></pre>
<p>Explanation:</p>
<ul>
<li><p><code>__project__</code> is the name of the project to install which may be
different than the name of the package</p></li>
<li><p><code>VERSION</code> is what I display in my command-line interfaces when
<code>--version</code> is requested</p></li>
<li><p>the additional imports (for the simplified package interface) only
occur if the project has actually been installed</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>There are several methods proposed in the <a href="https://packaging.python.org/guides/single-sourcing-package-version/" rel="nofollow noreferrer">Packaging guides</a> on <code>python.org</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The accepted answer requires that the package has been installed. In my case, I needed to extract the installation params (including <code>__version__</code>) from the source <code>setup.py</code>. I found a direct and simple solution while looking through the <a href="https://github.com/pypa/setuptools/blob/81f5f859285eb97e2e6e53543fa138f183f74c0d/setuptools/tests/test_setuptools.py#L22" rel="nofollow noreferrer">tests of the setuptools package</a>. Looking for more info on the <code>_setup_stop_after</code> attribute lead me to <a href="https://mail.python.org/pipermail/distutils-sig/2008-March/008950.html" rel="nofollow noreferrer">an old mailing list post</a> which mentioned <code>distutils.core.run_setup</code>, which lead me to <a href="https://docs.python.org/3/distutils/apiref.html#module-distutils.core" rel="nofollow noreferrer">the actual docs needed</a>. After all that, here's the simple solution:</p>
<p>file <code>setup.py</code>:</p>
<pre class="lang-py prettyprint-override"><code>from setuptools import setup

setup(name='funniest',
      version='0.1',
      description='The funniest joke in the world',
      url='http://github.com/storborg/funniest',
      author='Flying Circus',
      author_email='flyingcircus@example.com',
      license='MIT',
      packages=['funniest'],
      zip_safe=False)
</code></pre>
<p>file <code>extract.py</code>:
</p>
<pre><code>from distutils.core import run_setup
dist = run_setup('./setup.py', stop_after='init')
dist.get_version()
</code></pre>
</div>
<span class="comment-copy">To maintain a single source of truth for the version number, there are basically <a href="https://milkr.io/kfei/5-common-patterns-to-version-your-Python-package" rel="nofollow noreferrer">5 common patterns</a> you can do.</span>
<span class="comment-copy">I have relevant answer here <a href="https://stackoverflow.com/a/45656438/64313">stackoverflow.com/a/45656438/64313</a></span>
<span class="comment-copy">If this actually works reliably, it's much more elegant than my answer ... which makes me wonder why I haven't seen it elsewhere. Does anyone know whether <a href="https://github.com/pypa/pip/issues/401" rel="nofollow noreferrer">this</a> is a real concern? If it does report the wrong version number, its elegance is neither here nor there ...</span>
<span class="comment-copy">I don't like this solution: <code>__version__</code> is resolved at run-time instead of at build-time as it should. IMHO I prefer having a static  <code>__version__</code> inside the source tree, and read it at build-time with some code in <code>setup.py</code> like in the <a href="http://stackoverflow.com/a/17626524/1499402">answer</a> below.</span>
<span class="comment-copy">I mean the difference between <code>__version__ = "x.y.z"</code> (which is parsed once by <code>setup.py</code> at build-time) and <code>__version__ = some_weird_function()</code> which is evaluated at run-time to recover info present only in <code>setup.py</code> and in <code>foobar.egg-info</code>.</span>
<span class="comment-copy">Agreed: my wording is not correct, as Python is an interpreted language. However it is important to remark the difference between a possible failure at build-time (if <code>setup.py</code> is not able to parse <code>__version__ = 'x.y.z'</code>) or at run time (if <code>get_distribution('foobar')</code> fails to recover the correct info.) Your approach of course has many advantages, like the possibility of changing version number at build-time: <code>python setup.py build --tag-date</code>. What has to go into <code>__version__</code>: something burnt into the source tree, or some metadata computed at build-time and recovered at run-time?</span>
<span class="comment-copy">I have to agree with @StefanoM that this solution is sub-optimal. The reason I find it misleading is that if you have both an installed and a development version on your system, it will always show the installed one, no matter which one is actually imported.</span>
<span class="comment-copy"><b>tl;dr: Don't use imports in setup.py, read the version from a file.</b> I'll have to think about this for a while to decide if I like the approach...</span>
<span class="comment-copy">@JaceBrowning yeah, that's a fair summary ... I suspect any solution would have to be a variant of this, since it's importing the package in setup.py that causes problems.</span>
<span class="comment-copy">I wonder if <code>setuptools</code> or <code>distutils</code> has a function to do this more gracefully?</span>
<span class="comment-copy">Having <code>__version__ = "x.y.z"</code> in the source and parsing it within <code>setup.py</code> is <i>definitely</i> the correct solution, IMHO. Much better that relying on run time magic.</span>
<span class="comment-copy">And of course you can <code>import re</code> in your <code>setup.py</code>, if you'd like something more elegant or robust.</span>
<span class="comment-copy">Your argument on not importing any package from setup.py and parsing the version manually is so very true.</span>
<span class="comment-copy">This seems the most elegant approach to me too. Thanks</span>
<span class="comment-copy">That link seems some mirror of the (likely) official Python guide here: <a href="https://packaging.python.org/single_source_version/" rel="nofollow noreferrer">packaging.python.org/single_source_version</a></span>
<span class="comment-copy">@A-B-B  Yeah I know. Trying to use descriptive function name to reveal the intention, right? Which is generally a good idea in most cases. But no need to be dogmatic here. Because the pattern of assigning a value to a well-known variable <code>__version__ = blah blah blah</code> already reveals the intention clearly: some version value will be assigned to this variable. I would say it is just personal preference here.</span>
<span class="comment-copy">Thanks @ibic. I've updated the answer with the official link you provided.</span>
<span class="comment-copy">FWIW, I no longer structure my packages this way because I don't like the idea of always having to run code in <code>__init__.py</code>. I am now "reading" from the package during setup: <a href="https://github.com/jacebrowning/template-python-demo/blob/8e8991138ad6fba7f91deb4c716cd80283c116f7/setup.py#L21-L29" rel="nofollow noreferrer">github.com/jacebrowning/template-python-demo/blob/…</a></span>
