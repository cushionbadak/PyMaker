<div class="post-text" itemprop="text">
<p>I'm using Python 3. I've just installed a Python IDE and I am curious about the following code warning:</p>
<pre><code>features = { ... }
for k, v in features.items():
    print("%s=%s" % (k, v))
</code></pre>
<p>Warning is: <em>"For Python3 support should look like ... <code>list(features.items())</code> "</em></p>
<p>Also there is mention about this at <a href="http://docs.python.org/2/library/2to3.html#fixers" rel="nofollow noreferrer">http://docs.python.org/2/library/2to3.html#fixers</a> </p>
<blockquote>
<p>It also wraps existing usages of dict.items(), dict.keys(), and dict.values() in a call to list.</p>
</blockquote>
<p>Why is this necessary?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can safely ignore this "extra precautions" warning: your code will work the same <em>even without <code>list</code></em> in both versions of Python. It would run differently if you needed a list (but this is not the case): in fact, <code>features.items()</code> is a <em>list</em> in Python 2, but a <em><a href="http://docs.python.org/3.3/library/stdtypes.html#dict-views" rel="noreferrer">view</a></em> in Python 3. They work the same when used as an iterable, as in your example.</p>
<p>Now, the Python 2 to Python 3 conversion tool <code>2to3</code> errs on the side of safety, and assumes that you really wanted a <em>list</em> when you use <code>dict.items()</code>. This may not be the case (as in the question), in which case <code>dict.items()</code> in Python 3 (no wrapping <code>list</code>) is better (faster, and less memory-consuming, since no list is built).</p>
<p>Concretely, this means that Python 2 code can explicitly iterate over the view: <code>for k, v in features.viewitems()</code> (which will be converted in Python 3 by <code>2to3</code> to <code>features.items()</code>). It looks like your IDE thinks that the code is Python 2, because your <code>for</code> statement is very good, in Python 3, so there should be no warning about Python 3 support.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2, the methods <code>items()</code>, <code>keys()</code> and <code>values()</code> used to "take a snapshot" of the dictionary contents and return it as a list. It meant that if the dictionary changed while you were iterating over the list, the contents in the list would <em>not</em> change.</p>
<p>In Python 3, these methods return a <a href="http://docs.python.org/3.3/library/stdtypes.html#dict-views">view object</a> whose contents <em>change dynamically as the dictionary changes</em>. Therefore, in order for the behavior of iterations over the result of these methods to remain consistent with previous versions, an additional call to <code>list()</code> has to be performed in Python 3 to "take a snapshot" of the view object contents.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 returns a <a href="http://docs.python.org/3/library/stdtypes.html#dict-views" rel="nofollow">Dictionary View Object</a> rather than a list which Python 2 would return and some operators that you would expect may not be true - also a View Object will change if the underlying dictionary changes, (possibly in the code that you are iterating through which could cause some unwelcome surprises).</p>
</div>
<div class="post-text" itemprop="text">
<p><s>In Python 3, <code>dict.items()</code>, <code>dict.keys()</code>, and <code>dict.values()</code> are iterators. Therefore if you are expecting a list, you might get some errors when doing operations that work on lists, but not necessarily on iterators, such as <code>len(dict.items())</code> (will generate a <code>TypeError</code>).</s></p>
<p><strong>CORRECTION</strong></p>
<p>The <code>dict_items</code> returned by calling <code>dict.items()</code> in Python 3 does indeed have a <code>__len__()</code> and will <em>not</em> generate a <code>TypeError</code>. The <code>dict_items</code> object is not a list, however, and does not have <code>list</code> methods, such as <code>append()</code>, <code>index()</code>, etc... </p>
<p>Also, as the other (I would say much better) answers by Hamidi and Barnes state, <code>dict_items</code> is a view object that will dynamically change when the <code>dict</code> is altered.</p>
</div>
<div class="post-text" itemprop="text">
<p>When converting a project to python 3 using <code>2to3</code>, you can disable this by excluding the <code>dict</code> fixer for more concise output:</p>
<pre><code>$ 2to3 -x dict *
</code></pre>
<p>Watch out for <code>iteritems()</code>, <code>iterkeys()</code> <a href="https://docs.python.org/2/library/2to3.html#2to3fixer-dict" rel="nofollow">https://docs.python.org/2/library/2to3.html#2to3fixer-dict</a> and fix by hand.</p>
</div>
<span class="comment-copy">I think that your IDE should instead warn you that <code>'{}={}'.format(k, v)</code> is recommended instead. :) Reference: <a href="http://docs.python.org/3.0/whatsnew/3.0.html#changes-already-present-in-python-2-6" rel="nofollow noreferrer">docs.python.org/3.0/whatsnew/…</a></span>
<span class="comment-copy">Note: in general, it is <i>not</i> safe to ignore the warning if the loop modifies the dict. It  breaks on Python 3 without <code>list()</code>.</span>
<span class="comment-copy">This should never happen: a loop normally <i>cannot modify the dictionary it is iterating over</i>; this generally raises a <code>RuntimeError: dictionary changed size during iteration</code> (both in Python 2 and Python 3). Reference: <a href="http://docs.python.org/dev/whatsnew/2.7.html#pep-3106-dictionary-views" rel="nofollow noreferrer">docs.python.org/dev/whatsnew/2.7.html#pep-3106-dictionary-views</a></span>
<span class="comment-copy"><code>d.items()</code> returns a list on Python 2 therefore the loop <i>can</i> modify the dictionary. Just try it: <code>d = {1:2}; for k, v in d.items(): d[3]=4</code> - this code works on Python 2 but it breaks on Python 3 with the error that you've mentioned.</span>
<span class="comment-copy">Indeed. I had the likes of <code>my_dict.iteritems()</code> in mind (which does raise the exception I mentioned, even in Python 2): in the case you cite, one is not "iterating over the dictionary" but over a list, as you say. That said, now I see what you meant: that <code>list()</code> is necessary in Python 3 if one wants to modify the dictionary. I had missed this because (1) the warning is actually a little strange, as the for loop statement is perfect Python 3 code; and (2) this is a relatively rare situation (never modified a dictionary after items() in 7 years!). Good point. :)</span>
<span class="comment-copy">This doesn't explain why a <code>list</code> is necessary, which is required by the <i>main</i> question.</span>
<span class="comment-copy">Thank you for the answer and (+1) of course, but this derive one more question on it: ... <i>change dynamically</i> ... If I'm ok with dynamic changes, do Python provides safe iteration over it (just compare with java behavior - raise exception from iterator on changing container)</span>
<span class="comment-copy">@Dewfy, not really. The view objects themselves are safe, but as soon as you create iterators from them and use these iterators in loops, adding or removing entries from the source dictionary may lead to errors or "miss" entries. The documentation says <code>iterating views while adding or deleting entries in the dictionary may raise a RuntimeError or fail to iterate over all entries</code>.</span>
<span class="comment-copy">This should be the accepted answer, since it actually answers the question.</span>
<span class="comment-copy">Nitpick: It is not technically correct that <code>dict.items()</code> etc. are iterators in Python 3: they are iterable, meaning that they can be <i>converted</i> into iterators. Reference: <a href="http://docs.python.org/2/glossary.html" rel="nofollow noreferrer">docs.python.org/2/glossary.html</a></span>
<span class="comment-copy">Major Nitpick - len(dict.items()) should be len(dictview) which is specifically given as an example in the documentation, <a href="http://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#dict.items</a>, while this answer incorrectly states that it will NOT work and will generate a type error.</span>
<span class="comment-copy">@SteveBarnes: You're absolutely right. I should have checked the docs before attempting to answer.</span>
<span class="comment-copy">I'm surprised that my answer, which was just plain wrong, actually received upvotes.</span>
<span class="comment-copy">Very Gracious @JoelCornett</span>
<span class="comment-copy">Question is not about "how to close an eye", it was about the root cause</span>
<span class="comment-copy">True, I just shared this because in retrospect I wish I knew it earlier.</span>
