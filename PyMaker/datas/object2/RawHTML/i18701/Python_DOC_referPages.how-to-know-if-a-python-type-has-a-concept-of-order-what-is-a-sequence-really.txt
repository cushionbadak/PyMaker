<div class="post-text" itemprop="text">
<p>It's blowing my mind a little bit that OrderedDict in Python is not a sequence type. It has a concept of order, but it's not a sequence.</p>
<p>The <a href="http://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="nofollow">Python docs</a> say </p>
<blockquote>
<p>There are seven sequence types: strings, Unicode strings, lists,
  tuples, bytearrays, buffers, and xrange objects.</p>
<p>For other containers see the built in dict and set classes, and the
  collections module. ...Most sequence types support the following
  operations....Sequence types also support comparisons.</p>
</blockquote>
<p>Those operations corresponding to <code>__contains__</code>, <code>__add__</code> for concatenation, <code>__getitem__</code> with integers (in <code>range(len(foo))</code>), <code>__len__</code>, <code>__min__</code>, <code>__slice__</code>, <code>index</code> and <code>count</code>. <code>__lt__</code> etc implement comparisons.</p>
<p>OrderedDicts implement some of these methods but not others, probably because the syntactic sugar for accessing items by key (as in dict) or order (as in index) is the same.</p>
<p>I know if something implements <code>__iter__</code> I can loop through it. How can I definitely know if something has an order? I would have thought that is what is meant by "sequence", the nth item is always the nth item.</p>
</div>
<div class="post-text" itemprop="text">
<p>In a duck typing world, this is a difficult question.</p>
<p>Both <a href="http://docs.python.org/3/glossary.html#term-sequence" rel="nofollow">sequences and mapping</a> use <code>__getitem__()</code> to access items, using inter indexes and keys, respectively. Looking for the availability of the <code>__getitem__()</code> method does not tell them apart, you need to look at what the method actually does.</p>
<p>For the dict it is not possible to know whether the integer argument to <code>__getitem__()</code> is an index or a key, so it always works mapping-style.</p>
<p>Therefore, I think a dict is not a sequence at all, even though it supports iteration. Same applies to the set.</p>
<p>Looking at the <code>collections.abc.Sequence</code> base class may be the best test. For custom types, just make sure they are derived from this base class.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="nofollow"><code>issubclass(list, collections.abc.Sequence)</code></a></p>
<p>Note this only works on built-in types.</p>
</div>
<div class="post-text" itemprop="text">
<p>The idea is that of indexing.
An example with lists:</p>
<pre><code>&gt;&gt;&gt; ['a', 'b', 'c'][1]          # get element with index 1
'b'
&gt;&gt;&gt; ['a', 'b', 'c'].index('b')  # what is the (first) index of 'b'?
1
</code></pre>
<p>Now with strings:</p>
<pre><code>&gt;&gt;&gt; 'abc'[1]
'b'
&gt;&gt;&gt; 'abc'.index('b')
1
</code></pre>
<p>Now with Ordered Dictionaries:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; od = OrderedDict(zip(['cat', 'dog'], ['meow', 'auuu']))
&gt;&gt;&gt; od[1]
(...)
KeyError: 1
&gt;&gt;&gt; od.index('dog')
AttributeError: 'OrderedDict' object has no attribute 'index'
</code></pre>
<p>So OrderedDict preserves the order the items are added, so that it can be iterated in the same order, but it's not possible to use an index on it.</p>
</div>
<span class="comment-copy">I am definitely interested in custom types as well.</span>
<span class="comment-copy">This works for user-defined types too, provided the author bothered making said type a (actual or virtual) subclass of <code>collections.abc.Sequence</code>.</span>
