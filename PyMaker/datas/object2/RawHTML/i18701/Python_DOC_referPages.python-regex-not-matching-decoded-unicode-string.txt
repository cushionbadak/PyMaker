<div class="post-text" itemprop="text">
<p>I've compiled my regex using:</p>
<pre><code>number_re = re.compile(ur'(?&lt;![-_\.])\b([0-9]+|[0-9]+[0-9-_\.]*[0-9]+)\b(?![-_\.])'), re.UNICODE)
</code></pre>
<p>and it manages to match the <strong>1990-1991</strong> in the following string:</p>
<pre><code>mystring = 'フットボールリーグ1990-1991'
match = number_re.search(mystring)
&gt;&gt;&gt; &lt;_sre.SRE_Match at 0x25e1918&gt;
match.group()
&gt;&gt;&gt; '1990-1991'
</code></pre>
<p>but when the string is decoded (or when it's passed into a function)</p>
<pre><code>mystring = 'フットボールリーグ1990-1991'.decode('utf-8')
&gt;&gt;&gt; u'\u30d5\u30c3\u30c8\u30dc\u30fc\u30eb\u30ea\u30fc\u30b01990-1991'
match = number_re.search(mystring)
</code></pre>
<p>the matching no longer occurs, I'm guessing it has to do with the boundaries '\b' not matching because it looks like one continuous string but I'm not exactly sure.</p>
<p>I think that I've put all the unicode requirements (compiled with 're.UNICODE' flag and also put 'ur' in my regex string.  The last thing I'm going to try is the <a href="https://pypi.python.org/pypi/regex" rel="nofollow">Python regex library</a> that everyone says is good, but I'd like to know what's wrong with my current stuff! :).</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>\b</p>
</blockquote>
<p>There isn't a word boundary between the letter <code>グ</code> and the number <code>1</code>—they are both alphanumerics. When Unicode-aware regex is being used this is correctly handled, hence no match. If you don't want to treat katakana and other non-ASCII letters as being alphanums, remove the <code>re.UNICODE</code> flag which controls this behaviour.</p>
<p>When you send a byte string to a regex that was compiled from a Unicode string, it is automatically decoded. For some reason it seems to be decoded as ISO-8859-1 (rather than, say, <code>sys.getdefaultencoding()</code>)... don't know why that is, but implicit encode/decode is in general evil to be avoided.</p>
<p>The UTF-8 byte sequence for <code>グ</code>, when mis-decoded as ISO-8859-1, comes out as <code>ã[control char]°</code>. The degree sign is not an alphanum so you get a match.</p>
</div>
<span class="comment-copy">don't mix Unicode and non-Unicode strings (bytes). <a href="http://docs.python.org/3/library/re.html" rel="nofollow noreferrer">you cannot match a Unicode string with a byte pattern or vice-versa</a></span>
<span class="comment-copy">Thanks a lot! I knew that word boundary was fishy, haha.</span>
