<div class="post-text" itemprop="text">
<p>I am a novice in programming and learning python 3.x about 3 or 4 months.</p>
<p>Nowadays, I'm trying to make a program to find the solutions of some 'magic squares'.</p>
<p>It is known that the 6x6 magic square has more than 200,000,000 solutions.</p>
<p>So, the numbers are too big to store in normal PC memory that I want</p>
<p>to store the calculated and found solutions to files from time to time.</p>
<p>Let's say, I want to save the solutions to a file when they become 1,000,000.</p>
<p>Like this following in short:</p>
<pre><code>if len(resultList) == 1000000:
    file = open('{0}x{0} PMS Solutions {1:03}.txt'.format(ansr, fileNum), 'w')
    file.write(resultList)
    file.close()
    resultList = []
</code></pre>
<p>Then, while a file is being made, the process to find new solutions doesn't work.</p>
<p>My question:</p>
<p>Is there any way to make both of the processes-calculating and storing-work simultaneously?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using python3.3 a simple and elegant way of achieving what you want is using a <a href="http://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor" rel="nofollow"><code>ThreadPoolExecutor</code></a>:</p>
<pre><code>def save_to_file(data):
    fname = '{0}x{0} PMS Solutions {1:03}.txt'.format(ansr, fileNum)
    with open(fname, 'w') as fout:
        fout.write(data)   # save the list to file in some way
</code></pre>
<p>Use it like:</p>
<pre><code>executor = ThreadPoolExecutor(max_workers=2)

# ...

if len(resultList) &gt;= 1000000:
    future = executor.submit(save_to_file, resultList)
    resultList = []
</code></pre>
<p>The same can be done using the <a href="http://docs.python.org/3/library/threading.html" rel="nofollow"><code>threading</code></a> module in python versions prior to 3.3
Something like:</p>
<pre><code>thread = None

if len(resultList) &gt;= 1000000:
    if thread is not None:
        thread.join()  # finish saving the other solutions first
    thread = threading.Thread(target=save_to_file, args=(resultList,))
    thread.start()
    resultList = []
</code></pre>
</div>
<span class="comment-copy">Take a look at threading module: <a href="http://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">docs.python.org/3/library/threading.html</a></span>
