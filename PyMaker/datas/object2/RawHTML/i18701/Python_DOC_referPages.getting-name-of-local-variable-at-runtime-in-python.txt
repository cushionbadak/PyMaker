<div class="post-text" itemprop="text">
<p>I should preface this by saying the following: I know this functionality is not supported by default - what I'm attempting is a hacky workaround that has very little practical application, and is a complete practice in mental masturbation as a result of boredom and curiosity. That said, I'm trying to do the following:</p>
<p>Based upon the following Python code,</p>
<pre class="lang-python prettyprint-override"><code>with BuildFile('mybuild.build') as buildfile:
    objdir = 'obj'
</code></pre>
<p>I'd like to generate a file, <code>mybuild.build</code> with the contents:</p>
<pre><code>objdir = obj
</code></pre>
<p>Ideally, I'd want to associate the variable name at the point of creation, so that if I were to set a breakpoint just after the <code>objdir = 'obj'</code> I'd like to be able to do the following:</p>
<pre class="lang-python prettyprint-override"><code>&gt;&gt;&gt; print repr(objdir)
'objdir = obj'
</code></pre>
<p>That wouldn't be possible with builtin functionality, however, since there's no way to override the type inferred from the syntax. I may end up hacking together a workaround in the <code>BuildFile.__enter__</code> method that uses <code>ctypes</code> to monkey patch the <code>tp_new</code> or <code>tp_dict</code> fields on the underlying <code>PyTypeObject</code> struct (and subsequently revert that override at exit), but for simplicity sake, let's just assume that I'm not associating the variable name until I reach the <code>BuildFile.__exit__</code> method.</p>
<p>What I'm wondering about is the following:</p>
<p>Is there builtin Python functionality for halting execution, tracing back to the frame in which a local variable was declared, and getting the local name associated with a variable?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't have a portable way to trace frames… but the CPython implementation does: <a href="http://docs.python.org/3/library/sys.html#sys._getframe" rel="nofollow"><code>sys._getframe</code></a> returns you a frame object.</p>
<p>What can you do with a frame object? See the handy chart in the <a href="http://docs.python.org/3/library/inspect.html" rel="nofollow"><code>inspect</code></a> docs for all the fun things it has, but they include the <code>locals()</code> and <code>globals()</code> as seen by the frame, and the code object executed in the frame—which itself includes local names, unbound names, and cells for closures.</p>
<p>But, as others have points out, you don't really need the frame for this; all you need is the locals, and it's much simpler just to pass it to your context manager explicitly.</p>
<hr/>
<p>If you really want to do this:</p>
<pre><code>import contextlib
import sys

@contextlib.contextmanager
def dumping():
    f = sys._getframe(2)
    fl = f.f_locals.copy()
    try:
        yield None
    finally:
        for name, value in f.f_locals.items():
            if name not in fl:
                print('{} = {}'.format(name, value))

bar = 0
def foo():
    global bar
    bar = 3
    baz = 4
    qux = 5
    with dumping():
        spam = 'eggs'
        eggs = 3
        bar = 4
        baz = 5

foo()
</code></pre>
<p>When run, this should print:</p>
<pre><code>eggs = 3
spam = eggs
</code></pre>
<p>In other words, the names and values of only the new variables which were declared within the <code>with</code> block—which is, I think, what you wanted, right?</p>
<hr/>
<p>If you want both new and rebound locals, you'd probably want to store something like this:</p>
<pre><code>fl = {(name, id(value)) for name, value in f.f_locals.items()}
</code></pre>
<p>Of course you can also rebind nonlocals and globals, so if you care about that, either stash globals as well (but make sure to check for <code>locals is globals</code> for module-level code), or walk the closure.</p>
<hr/>
<p>If you're using CPython 2 (why? for real projects it sometimes makes sense, but to learn how the internals work for fun? and yet, some people to…), the same code will work. There may be slightly different attribute names, but you can guess them by dumping out the <code>dir</code> of a frame and a code. And obviously you want the 2.x <code>print</code> syntax.</p>
<p>It also works in PyPy, at least 2.0b.</p>
<hr/>
<p>If you're wondering how I knew to use <code>_getframe(2)</code>… I didn't. I was pretty sure it would be 1 or 2 frames up, just possibly 3, but which one? So I just did this:</p>
<pre><code>@contextlib.contextmanager
def dumping():
    for i in range(4):
        f = sys._getframe(i)
        print(f.f_code.co_filename, f.f_code.co_firstlineno, f.f_lineno)
</code></pre>
<p>0 is of course <code>dumping</code> itself; 1 is the wrapper function in <code>contextlib.contextmanager</code>; 2 is the calling frame; 3 is the module top level. Which is obvious once you think about it, but it wasn't obvious until I knew the answer. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually you can perform similar trick like this:</p>
<pre><code>&gt;&gt;&gt; from contextlib import contextmanager
&gt;&gt;&gt; @contextmanager
def override_new_vars(locs):
    old_locals = locs.copy()
    yield
    new_locals_names = set(locs) - set(old_locals)
    for name in new_locals_names:
        locs[name] = '%s = %r' % (name, locs[name])


&gt;&gt;&gt; with override_new_vars(locals()):
    c = 10


&gt;&gt;&gt; c
'c = 10'
</code></pre>
<p>In your case it would look like:</p>
<pre><code>with BuildFile('mybuild.build') as buildfile, override_new_vars(locals()):
    objdir = 'obj'
</code></pre>
<p>Is that what you wanted to do?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you can try this:</p>
<pre><code>from copy import copy
objdir = 'obj'

def get_variable_name(variable):

    if variable:
        variables = copy(locals())
        for i in variables:
            if variables.get(i) == variable:
                res = i + '=' + variables.get(i)
                return res
</code></pre>
<p>Use this should do the trick, I have test this code myself.</p>
</div>
<span class="comment-copy">What do you mean by "halting execution"? A debugger can halt execution of a script, but if a script halts execution… it's not running anymore, so it can't do anything.</span>
<span class="comment-copy">Yeah, "halt execution" was a very poor (and incorrect) choice of words. What I meant to say was, "landmark the current frame" for the purpose of establishing where to look relative to that position.</span>
<span class="comment-copy">OK, yeah, that's exactly what <code>sys._getframe()</code> does. You can even save the frame object for later and use it from outside of the frame (although usually at the cost of creating lots of circular references for the GC to clean up later). For example, <code>[sys._getframe() for _ in range(1)][0].f_code</code> lets you get at the hidden function inside CPython listcomps, and I can't think of any cleaner way to do it.</span>
<span class="comment-copy">Thanks for the detailed answer. As I mentioned in my other comment, the idea to go the frame route was mostly based on a misunderstanding of the yield statement, and the contexlib functionality. Based on this, I probably won't go that route, but this information will definitely be a good reference for the future. As for the usage of Python 3 over 2, Python's currently my language of choice when I want to implement one of my "shits and giggles" ideas. Currently the C API for CPython 2 is a bit more convenient to use for my purposes, so I haven't felt the need to make the jump yet. Thanks again.</span>
<span class="comment-copy">@juntalis: Yeah, the only thing you're really using the frame here for is to get at the parent's locals, and there are easier ways to do that. Meanwhile, when there's a difference, Python 3 is usually the more rational and interesting of the two, for obvious reasons… but PyPy is pretty interesting to explore as well, and it doesn't do 3.x yet, so I still find myself in 2.x guts for fun sometimes too…</span>
