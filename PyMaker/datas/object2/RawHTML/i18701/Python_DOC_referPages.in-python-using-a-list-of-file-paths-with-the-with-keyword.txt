<div class="post-text" itemprop="text">
<p>If I want to work with two files I can write:</p>
<pre><code>with open(fname1, 'r') as f1, open(fname2, 'r') as f2:
    # do stuff with f1 and f2
</code></pre>
<p>But what if I have a list of paths (say, from glob.glob)?  Can I do something analogous in a list comprehension?  I have in mind something like:</p>
<pre><code>with [open(path, 'r') for path in paths_list] as flist:
    # do stuff with this list of open file objects
</code></pre>
<p>As written, this doesn't work.</p>
</div>
<div class="post-text" itemprop="text">
<p>The object of a <code>with</code> statement must be a context manager. So, no, you can't do this with a list, but you might be able to do it with a custom container.</p>
<p>See: <a href="http://docs.python.org/2/library/contextlib.html" rel="nofollow">http://docs.python.org/2/library/contextlib.html</a></p>
<p>Or, for 3.3+ there's this: <a href="http://docs.python.org/dev/library/contextlib.html#contextlib.ExitStack" rel="nofollow">http://docs.python.org/dev/library/contextlib.html#contextlib.ExitStack</a> (Note, as per arbarnert's answer, this can be used in 2.7, using contextlib2. See his answer for the link.)</p>
<p><strike>The actual solution here is probably to</strike> If you're not going to use <code>contextlib2</code> put the context manager in a loop:</p>
<pre><code>for path in paths_list:
    with open(path, 'r') as f:
         #whatever
         pass
</code></pre>
<p>Edit: Obviously, the above will open your files one at a time. There are relatively few use cases where you need to keep an undetermined number of files open at once.</p>
<p>Edit: To have multiple files open at once, <code>ExitStack</code> is the solution you are looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>In 3.3+, <a href="http://docs.python.org/3.3/library/contextlib.html#contextlib.ExitStack" rel="nofollow"><code>ExitStack</code></a> is definitely the answer; in fact, it's the first example given in the docs:</p>
<pre><code>with ExitStack() as stack:
    files = [stack.enter_context(open(path) for path in path_list]
    for f in files:
        do_something(f)
</code></pre>
<p>Of course if your <code>with</code> body is really just a loop over <code>files</code>, there's no reason to do this—just put a <code>with</code> statement for each file inside the loop. (In fact, there's a good reason <em>not</em> to do this—why open a possibly unbounded number of file handles at once just to use them one at a time?) But presumably your real code needs to use multiple files at the same time.</p>
<hr/>
<p>In earlier versions, you can easily just borrow <code>ExitStack</code> from the <a href="http://hg.python.org/cpython/file/3.3/Lib/contextlib.py#l145" rel="nofollow">3.3 source</a>. Backporting to 3.2 is trivial; for 2.7, you need to strip out (or rewrite, if you need it) the stuff that gets fancy with exception propagation to guarantee you the right exception contexts, but that's pretty easy.</p>
<p>However, an even better solution is probably to install <a href="http://contextlib2.readthedocs.org/en/latest/" rel="nofollow"><code>contextlib2</code></a> off PyPI, which "provides backports of features in the latest version of the standard library’s contextlib module to earlier Python versions." Then you can just use <code>contextlib2.ExitStack</code> instead of <code>contextlib.ExitStack</code>. (In fact, <code>contextlib2</code> had <code>ExitStack</code>, under its preliminary name <code>ContextStack</code>, before Python 3.3 did…)</p>
<hr/>
<p>But you can also easily build a <code>closing_all</code> context manager, similar to the stdlib's <a href="http://docs.python.org/2/library/contextlib.html#contextlib.closing" rel="nofollow"><code>closing</code></a> but for multiple things:</p>
<pre><code>@contextlib.contextmanager
def closing_all(things):
    try:
        yield things
    finally:
        for thing in things:
            thing.close()
</code></pre>
<p>If you need to deal with things whose <code>close</code> method can raise, you need to be a little smarter—but with file objects, and most other types you'd using with <code>closing</code>, you don't need that.</p>
<p>The bigger problem is that if any <code>open</code> can raise an exception, it's hard to find any valid sequence you can actually pass as the <code>things</code> argument. But if that's not a problem, using it is even simpler than <code>ExitStack</code>:</p>
<pre><code>with closing_all(open(path) for path in path_list) as files:
    for f in fs:
        do_something(f)
</code></pre>
<hr/>
<p>You could also build an <code>opening_all(paths, mode='r')</code> that does the <code>open</code>s for you and wraps them in a <code>closing_all</code>, but I don't think that adds much.</p>
<p>Of course if you need to do this often, the best answer is to build <code>opening_all</code> around <code>ExitStack</code> and not even bother with <code>closing_all</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/fileinput.html" rel="nofollow"><code>fileinput</code></a>:</p>
<pre><code>import fileinput

for line in fileinput.input(fileList):
    ...
</code></pre>
</div>
<span class="comment-copy">If you're on version 3.3+ of Python - there's <code>contextlib.ExitStack</code> that you can use - see <a href="http://docs.python.org/3/library/contextlib.html#contextlib.ExitStack.pop_all" rel="nofollow noreferrer">docs.python.org/3/library/…</a> - This means that only if <i>all</i> files are openable does the block execute - rather than looping over each file and finding somewhere through that an open error occurs...</span>
<span class="comment-copy">It appears he wants to do something with all files at once (according to his example code), so that <code>for</code> loop wouldn't work.</span>
<span class="comment-copy">@TimPietzcker I don't really see a basis for that inference. In any case, there are very few use cases where the files can't just be slurped into memory and processed in memory.</span>
<span class="comment-copy">Well, he writes <code>do stuff with this list of open file objects</code>...</span>
<span class="comment-copy">@TimPietzcker People write a lot of things in questions. It doesn't actually follow he needs to have more than one file open at once.</span>
<span class="comment-copy">Marcin, TimPietzscker: I was interested in having all open at once.  But this was a point of curiosity, not related to any actual code I'm writing.  I agree that for most uses, what Marcin wrote works.</span>
<span class="comment-copy">Does ExitStack depend on any py 3 features? Or could it be backported?</span>
<span class="comment-copy">@Marcin: I don't actually know if the version checked in does… but the version from the thread and bug report definitely works on 2.7. Let me test what's there and get back to you.</span>
<span class="comment-copy">That's good enough for me.</span>
<span class="comment-copy">@Marcin: OK, never mind, even better answer: Nick Coghlan (who wrote the version on the thread in the first place, and the earlier implementation it was based on) is maintaining a backport in <code>contextlib2</code>. See my edit. So, that's the right way to do it, whether you're on 3.2 or 2.x.</span>
<span class="comment-copy">Very cool!  Had not heard of this before.</span>
<span class="comment-copy">If you want to treat them all as one long file, <code>fileinput</code> is definitely the answer. But if you want to, e.g., un-gzip each one or something, it's not. Also you should still use a <code>with</code> statement if you're in 3.2+ (<code>with fileinput.input(fileList) as f:</code>), and if not, you want to <code>close</code> explicitly. Otherwise, you're leaking the last file handle, just as you would be if you called <code>open</code> on it.</span>
