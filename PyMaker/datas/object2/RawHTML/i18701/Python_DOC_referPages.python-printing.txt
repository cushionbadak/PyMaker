<div class="post-text" itemprop="text">
<p>I downloaded python 3.3. I am just learning python and wanted to try some of it out with the actual IDE. I want to print the date and time. It says syntax error when I type in print <em>_</em> . 
Please check if there is something wrong with the code or syntax : </p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; now = datetime.now()
&gt;&gt;&gt; print now
SyntaxError: invalid syntax


&gt;&gt;&gt; from datetime import datetime

&gt;&gt;&gt; current_year = now.year

&gt;&gt;&gt; current_month = now.month

&gt;&gt;&gt; current_day = now.day

&gt;&gt;&gt; print now.month

SyntaxError: invalid syntax

&gt;&gt;&gt; print now.day

SyntaxError: invalid syntax

&gt;&gt;&gt; print now.year

SyntaxError: invalid syntax
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>print</code> is a function in Python 3.</p>
<pre><code> &gt;&gt;&gt; print(now.year)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>in python 2.x you used <code>print</code> like this</p>
<pre><code>print "hi"
</code></pre>
<p>in python 3.x the print statement was upgraded to a function to allow it to do more things and behave more predictably, like this</p>
<pre><code>print("hi")
</code></pre>
<p>Or more specifically, <strong>in your case:</strong> <code>print(now.year)</code></p>
<p>With the new print function you can do all sorts of things like specifying the terminating character, or printing straight to a file</p>
<pre><code>print("hi" end = ",")
print("add this to that file", file=my_file)
</code></pre>
<p>You can also do things that you couldn't have done with the old statment, such as</p>
<pre><code>[print(x) for x in range(10)]
</code></pre>
</div>
<span class="comment-copy">Them Python Docs: <a href="http://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/inputoutput.html</a></span>
<span class="comment-copy">That works. Thank you!</span>
<span class="comment-copy">Instead of <code>[print(x) for x in range(10)]</code>, I prefer <code>print(*range(10), sep='\n')</code>, which also can't be done with the old <code>print</code> statement. Iterables, generators, and sequences are all unpacked similarly (which is problematic when the iterator or generator doesn't terminate, but that's a different issue), so this isn't much different from the list comprehension, but I've always disliked using list comprehensions for the side effects rather than for the list, and it also only calls <code>print()</code> once and reduces the number of times output is produced, which can increase efficiency in some cases.</span>
<span class="comment-copy">@JAB I agree that doing that with a list comprehension is actually LESS efficient, but its just to show that it can go places the old one can't, if you have a better example let me know.  I tried yours and it doesn't run :(</span>
<span class="comment-copy">What version of Python? It works just fine in Python 3.2, but I don't have 3.3 available to test with at the moment.</span>
