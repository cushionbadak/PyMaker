<div class="post-text" itemprop="text">
<p>Sorry I'm fairly new to python, but I needed to take 6 individual lists and concatenate them such that they resemble a list of lists. </p>
<p>i.e. a1 from list A + b1 from list B + c1 from list C 
and  a2 from list A + b2.... etc</p>
<p>should become [[a1,b1,c1], [a2,b2,c2]...]</p>
<p>I tried this:</p>
<pre><code>combList = [[0]*6]*len(lengthList)

for i in range(len(lengthList)):
    print i
    combList[i][0] = posList[i]
    combList[i][1] = widthList[i]
    combList[i][2] = heightList[i]
    combList[i][3] = areaList[i]
    combList[i][4] = perimList[i]
    combList[i][5] = lengthList[i]
    # i++
print combList
</code></pre>
<p>and then tried a variation where I appended instead:</p>
<pre><code>    for i in range(len(lengthList)):
        print i
        combList[i][0].append(posList[i])
        combList[i][1].append(widthList[i])
        combList[i][2].append(heightList[i])
        combList[i][3].append(areaList[i])
        combList[i][4].append(perimList[i])
        combList[i][5].append(lengthList[i])
        # i++
    print combList
</code></pre>
<p>So I have two questions.</p>
<p>Why didn't either of those work, cus in my mind they should have. And I don't need to put i++ at the bottom right? For some reason it just wasn't working so I was just trouble shooting. </p>
<p>I ended up finding a solution, which is below, but I'd just like to understand what happened in the above two codes that failed so terribly. </p>
<pre><code>for j in range(len(fNameList)):
            rows = [fNameList[j], widthList[j], heightList[j], areaList[j], perimeterList[j], lengthList[j]]
            print rows
            combList.append(rows)
        print combList
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue with at you did is that you are creating a list of 6 references to the same thing.</p>
<p><code>[0]*6</code> will generate a list of 6 references to the same number (zero), and <code>[[0]*6]*len(lengthList)</code> will generate a list of references to the same <code>[0]*6</code> list.</p>
<p>I think the function you want is <a href="http://docs.python.org/2/library/functions.html#zip" rel="nofollow"><code>zip</code></a>:</p>
<pre><code>A = ['a1','a2','a3']
B = ['b1','b2','b3']
C = ['c1','c2','c3']

print [x for x in zip(A,B,C)]
</code></pre>
<p>which gives:</p>
<pre><code>[('a1', 'b1', 'c1'), ('a2', 'b2', 'c2'), ('a3', 'b3', 'c3')]
</code></pre>
<p>So in your case, this would work:</p>
<pre><code>combList = [x for x in zip(fNameList, widthList, heightList, areaList, perimeterList, lengthList)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>a = [0]*6</code> defines a list with 6 references, all those references point to the number <code>0</code></p>
<p><code>[a]*m</code> defines a list with <code>m</code> references, all pointing to <code>a</code>, in this case <code>[0]*6</code>.</p>
<p>The code in your final example works because it adds references to new objects, rather than modifying an existing one repeatedly.</p>
<p>Other people recommended you use <a href="http://docs.python.org/2/library/functions.html#zip" rel="nofollow"><code>zip</code></a>, and it is indeed the best solution, IMHO.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are making a list of <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#other-languages-have-variables" rel="nofollow"><em>names</em></a> all pointing at the same list of six zeros when you do:</p>
<pre><code>combList = [[0]*6]*len(lengthList)
</code></pre>
<p>This is equivalent to doing this:</p>
<pre><code>internal_list = [0] * 6
combList = [internal_list, internal_list, internal_list, internal_list, internal_list]
</code></pre>
<p>Instead, if you use <code>zip</code> you can get what you want in one pass:</p>
<pre><code>zipped_list = zip(posList, widthList, heightList, areaList, perimList, lengthList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could do this with a comprehension across a zip, if the lists are all the same length</p>
<pre><code>[list(tup) for tup in zip (l1, l2, l3...)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Depending on version of Python and how big your 3 lists are you should use either <code>zip</code> or <code>izip</code>.</p>
<p><a href="http://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow">izip</a> if you're running Python &lt; 3 (you can use <code>zip</code> as well but if the lists are really big then a generator would be a whole heap faster and better for you).</p>
<p><a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow">zip</a> if you're running Python &gt;= 3</p>
<pre><code>from itertools import izip

zipped_list = izip(a,b,c)

for item in zipped_list:
    print item
&gt;&gt; (1, 1, 1)
&gt;&gt; (2, 2, 2)
&gt;&gt; (3, 3, 3)
&gt;&gt; (4, 4, 4)
&gt;&gt; (5, 5, 5)
</code></pre>
<p>And just for a bit tutoring on how to write good clean looking Python:</p>
<p>Your loop that you've done <code>for i in range(len(lengthList)</code> could very easily be transformed to whats really Pythonic.</p>
<pre><code>for item in lengthList:
</code></pre>
<p>Now you're thinking "what about my index, i can't access the index of the element".
Well Python has a fix for that too it's called <a href="http://docs.python.org/2/library/functions.html?highlight=enumerate#enumerate" rel="nofollow">enumerate</a> and you use it like so:</p>
<pre><code>for index, item in enumerate(lengthlist):
</code></pre>
<p>So translating your code down to a more Pythonic syntax:</p>
<pre><code>for index, element in enumerate(lengthList):
    combList[index][0].append(posList[index])
    combList[index][1].append(widthList[index])
    combList[index][2].append(heightList[index])
    combList[index][3].append(areaList[index])
    combList[index][4].append(perimList[index])
    combList[index][5].append(lengthList[index])
</code></pre>
</div>
<span class="comment-copy">I see! Thank you so much.. Never knew about python's "names" and I thought that zip was just to combine 2 lists to tuples, but now I know.</span>
