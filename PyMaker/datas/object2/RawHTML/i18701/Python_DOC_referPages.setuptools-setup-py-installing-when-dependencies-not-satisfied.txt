<div class="post-text" itemprop="text">
<p>I have a <code>setup.py</code> that looks a bit (okay, exactly) like this:</p>
<pre class="lang-python prettyprint-override"><code>#!/usr/bin/env python

from setuptools import setup
import subprocess
import distutils.command.build_py

class BuildWithMake(distutils.command.build_py.build_py):
    """
    Build using make.
    Then do the default build logic.

    """
    def run(self):
        # Call make.
        subprocess.check_call(["make"])

        # Keep installing the Python stuff
        distutils.command.build_py.build_py.run(self)


setup(name="jobTree",
    version="1.0",
    description="Pipeline management software for clusters.",
    author="Benedict Paten",
    author_email="benedict@soe.ucsc.edu",
    url="http://hgwdev.cse.ucsc.edu/~benedict/code/jobTree.html",
    packages=["jobTree", "jobTree.src", "jobTree.test", "jobTree.batchSystems",
    "jobTree.scriptTree"],
    package_dir= {"": ".."},
    install_requires=["sonLib"],
    # Hook the build command to also build with make
    cmdclass={"build_py": BuildWithMake},
    # Install all the executable scripts somewhere on the PATH
    scripts=["bin/jobTreeKill", "bin/jobTreeStatus", 
    "bin/scriptTreeTest_Sort.py", "bin/jobTreeRun", 
    "bin/jobTreeTest_Dependencies.py", "bin/scriptTreeTest_Wrapper.py", 
    "bin/jobTreeStats", "bin/multijob", "bin/scriptTreeTest_Wrapper2.py"])
</code></pre>
<p>It installs the package perfectly fine when run with <code>./setup.py install</code>. However, it does this whether or not the "sonLib" package is installed, ignoring the dependency.</p>
<p>Is this expected behavior? Should a <code>setup.py install</code> blithely proceed if the dependencies are not installed, leaving it up to pip or whatever to install them beforehand? If not, and <code>setup.py install</code> ought to fail when dependencies are absent, what am I doing wrong?</p>
<p><strong>EDIT</strong>: Some version information:</p>
<pre class="lang-none prettyprint-override"><code>Python 2.7.2 (default, Jan 19 2012, 21:40:50) 
[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import setuptools
&gt;&gt;&gt; setuptools.__version__
'0.6c12'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/distutils/commandref.html#installing-modules-the-install-command-family" rel="nofollow">default <code>install</code> command for Distutils <code>setup</code></a> doesn't know anything about dependencies. If you are running that, you're right that dependencies will not be checked.</p>
<p>Just going by what you've show in the <code>setup.py</code>, though, you are using Setuptools for the <code>setup</code> function. The <a href="https://setuptools.pypa.io/en/latest/setuptools.html#install-run-easy-install-or-old-style-installation" rel="nofollow">Setuptools <code>install</code> command</a> is declared to run <code>easy_install</code>, which in turn does check and download dependencies.</p>
<p>It is possible you are explicitly invoking the Distutils <code>install</code>, by specifying <code>install --single-version-externally-managed</code>.</p>
</div>
<span class="comment-copy">I'm pretty sure <code>setuptools</code> doesn't actually check dependencies. You might want to look into using <a href="http://pythonhosted.org/distribute/" rel="nofollow noreferrer">distribute</a> instead.</span>
<span class="comment-copy">@murgatroid99d - distribute and setuptools have been merged back together. and setuptools usually <i>does</i> install dependencies.</span>
<span class="comment-copy">Run <code>pip install setuptools -U</code> to get the 0.9 version, I think this one accepts the <code>install_requires</code> option as distribute does.</span>
