<div class="post-text" itemprop="text">
<p>Consider this code</p>
<pre><code>description = ""
desc = hxs.select('/html/head/meta[2]/@content').extract()
if len(desc) &gt; 0:
    description = desc[0]       
item["description"] = description
</code></pre>
<p>desc is a list of strings. If list is empty description is an empty string, if not it's the first elements from the list. How to make it more pythonic?</p>
<p>Forgot to mention that I have to use 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>You can write:</p>
<pre><code>desc = hxs.select("/html/head/meta[2]/@content").extract()
item["description"] = desc[0] if len(desc) &gt; 0 else ""
</code></pre>
<p>As pointed out in the comments below, you can also directly evaluate the list in a boolean context:</p>
<pre><code>item["description"] = desc[0] if desc else ""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternately you could use make use of the fact that <a href="http://docs.python.org/2/library/functions.html#next" rel="nofollow">next</a> supports a default</p>
<pre><code>item["description"]  = next(iter(desc), "")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use exception handling (although it's more verbose than using the conditional expression).</p>
<pre><code>desc = hxs.select('/html/head/meta[2]/@content').extract()
try:
    description = desc[0]
except IndexError:
    description = ""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't think you should actually do this in your case, but for completeness…</p>
<p>For an <em>iterator</em> that might be empty, you just use the optional default value for <a href="http://docs.python.org/2/library/functions.html#next" rel="nofollow"><code>next</code></a>:</p>
<pre><code>desc = foo.finditer(bar)
item["description"] = next(desc, "")
</code></pre>
<p>Meanwhile, you can always use <code>iter()</code> to "peek" at the iterator you would get from a sequence (or other non-iterator iterable).</p>
<p>So:</p>
<pre><code>desc = foo.findall(bar)
item["description"] = next(iter(desc), "")
</code></pre>
<p>I think this is less readable than just using the list as a sequence (whether you use chepner's <a href="http://docs.python.org/2/glossary.html#term-eafp" rel="nofollow">EAFP</a> answer or Frédéric Hamidi's <a href="http://docs.python.org/2/glossary.html#term-lbyl" rel="nofollow">LYBL</a>) rather than just an iterable. After all, we have the sequence API for a reason.</p>
</div>
<span class="comment-copy"><code>if len(desc) &gt; 0</code> could be replaced by <code>if len(desc)</code>.</span>
<span class="comment-copy">@WaleedKhan or just <code>if desc</code>, since empty lists are falsy.</span>
<span class="comment-copy">Or <code>item["description"] = desc and desc[0] or ""</code> if this needs to work on earlier pythons that would choke on the 'else' part.</span>
<span class="comment-copy">@tdelaney, <a href="http://mail.python.org/pipermail/python-dev/2005-September/056846.html" rel="nofollow noreferrer">version 2.5</a>, to be specific.</span>
<span class="comment-copy">@FrédéricHamidi: But you're being explicit about the wrong thing. You care about the emptiness of the list, not the length; the fact that using the length to check the emptiness might be the fastest way to do that is irrelevant. (And the fact that it might not means it may even be harmful.)</span>
<span class="comment-copy">It may be more verbose, but that doesn't mean it's worse. As <a href="http://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">the docs</a> say: "This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many try and except statements. The technique contrasts with the LBYL style common to many other languages such as C."</span>
<span class="comment-copy">In this case, both approaches are so simple and readable that I would probably choose the conditional expression as the shorter approach :)</span>
