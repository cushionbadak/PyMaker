<div class="post-text" itemprop="text">
<p>I have experimented a bit with lists and I want to add every other part of a list.</p>
<p>say I have a list</p>
<pre><code>[2,4,8,9,4,2]
</code></pre>
<p>and I want to add two and two together like</p>
<pre><code>[2+4,8+9,4+2] so I get the list [6,17,6]
</code></pre>
<p>Is there a possible way to do that even if the list length varies? (for the sake of ease I assume that the list ALWAYS has digits in multiples of two so it will be possible to do)</p>
<p>I am not sure what I can search for to answer this question</p>
</div>
<div class="post-text" itemprop="text">
<p>Advancing on <a href="https://stackoverflow.com/a/17736865/198633">gnibbler's</a> and <a href="https://stackoverflow.com/a/17736864/198633">arshajii's solution</a></p>
<pre><code>&gt;&gt;&gt; L = [2,4,8,9,4,2]
&gt;&gt;&gt; [sum(i) for i in itertools.zip_longest(*[iter(L)]*2, fillvalue=0)]
[6, 17, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Break your problem down - you want to do two things:</p>
<ol>
<li>Split your list into pairs (groups).</li>
<li>Sum those groups.</li>
</ol>
<p>The first is easily acheived with <a href="http://docs.python.org/3/library/itertools.html#itertools-recipes" rel="noreferrer">the grouper recipe from itertools</a>:</p>
<pre><code>def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
</code></pre>
<p>The second with <a href="http://docs.python.org/3/library/functions.html#sum" rel="noreferrer"><code>sum()</code></a> and a <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="noreferrer">list comprehension.</a></p>
<pre><code>[sum(group) for group in grouper([2, 4, 8 ,9, 4, 2], 2)]
</code></pre>
<p>The main advantage to this method is it, without effort, scales to any size of group. If you want to sum every group of 100 elements, it's just changing the group size.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; l = [2,4,8,9,4,2]
&gt;&gt;&gt; v = iter(l)
&gt;&gt;&gt; [i + next(v) for i in v]
[6, 17, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; L = [2, 4, 8, 9, 4, 2]
&gt;&gt;&gt; from operator import add
&gt;&gt;&gt; list(map(add, *[iter(L)]*2))
[6, 17, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not very creative, but general solution can go something like this:</p>
<pre><code>def get_chunk_sums(a, chunk_size):
    return [sum(a[i: i+chunk_size]) for i in xrange(0, len(a), chunk_size)]
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; get_chunk_sums([2,4,8,9,4,2], 2)
[6, 17, 6]
&gt;&gt;&gt; get_chunk_sums([2,4,8,9,4,2], 3)
[14, 15]
</code></pre>
</div>
<span class="comment-copy">You should try something first. This is quite simple</span>
<span class="comment-copy">This is indeed the answer I prefer. I like it because, assuming that the iterable taken does not leak side-effects when iterated, the grouper function is "pure". I also think it's conceptually easier to understand - at least once such a grouping function is defined.</span>
<span class="comment-copy">+1 I have to upvote this because I've used this elsewhere, but forgot about it until now :)</span>
<span class="comment-copy">While it works, the idea of advancing the iterator manually (when it is also advanced implicitly) isn't my preference.</span>
<span class="comment-copy">@user2246674, why not. It's defined behaviour and makes for a beautiful solution</span>
<span class="comment-copy">A good solution for the question as asked, but it quickly becomes very ugly if you decide you want groups of 4 instead of 2, say.</span>
<span class="comment-copy">@user2246674 So <code>zip()</code> is advancing the iterator internally, instead of you using <code>next()</code> - it's the same thing.</span>
<span class="comment-copy">That's neat! +1</span>
<span class="comment-copy">This is the least favoured way to iterate over chunks - it only works on sequences, not arbitrary iterables. Iterating by index is generally a bad idea, and very ugly.</span>
