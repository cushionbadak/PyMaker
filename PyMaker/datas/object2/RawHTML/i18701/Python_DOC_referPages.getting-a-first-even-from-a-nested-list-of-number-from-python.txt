<div class="post-text" itemprop="text">
<p>I need help figuring out this code. This is my first programming class and we have a exam next week and I am trying to do the old exams. </p>
<p>There is one class with nested list that I am having trouble understanding. It basically says to convert <code>(list of [list of ints]) -&gt; int</code>. </p>
<p>Basically given a list of list which ever has a even number in this case 0 is even return that index and if there are no even numbers we return -1.</p>
<p>Also we are given three examples</p>
<pre><code>&gt;&gt;&gt; first_even([[9, 1, 3], [2, 5, 7], [9, 9, 7, 2]])
1
&gt;&gt;&gt; first_even([[1, 3, 5], [7, 9], [1, 0]])
2
&gt;&gt;&gt; first_even([[1, 3, 5]])
-1
</code></pre>
<p>We are using python 3 in our class and I kind of have a idea in where to begin but I know its wrong. but ill give it a try</p>
<pre><code>def first_even(L1):
    count = 0
    for i in range(L1):
       if L1[i] % 2 = 0:
           count += L1
    return count
</code></pre>
<p>I thought this was it but it didn't work out. </p>
<p>If you guys could please help me out with hints or solution to this it would be helpful to me.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly and you want to return the index of the first list that contains at least one even number:</p>
<pre><code>In [1]: def first_even(nl):
   ...:     for i, l in enumerate(nl):
   ...:         if not all(x%2 for x in l):
   ...:             return i
   ...:     return -1
   ...: 

In [2]: first_even([[9, 1, 3], [2, 5, 7], [9, 9, 7, 2]])
Out[2]: 1

In [3]: first_even([[1, 3, 5], [7, 9], [1, 0]])
Out[3]: 2

In [4]: first_even([[1, 3, 5]])
Out[4]: -1
</code></pre>
<p><a href="http://docs.python.org/3/library/functions.html#enumerate" rel="nofollow"><code>enumerate</code></a> is a convenient built-in function that gives you both the index and the item if an iterable, and so you don't need to mess with the ugly <code>range(len(L1))</code> and indexing.</p>
<p><a href="http://docs.python.org/3/library/functions.html#all" rel="nofollow"><code>all</code></a> is another built-in. If all remainders are non-zero (and thus evaluate to <code>True</code>) then the list doesn't contain any even numbers.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are some minor problems with your code:</p>
<ul>
<li><p><code>L1[i] % 2 = 0</code> is using the wrong operator. <code>=</code> is for assigning variables a value, while <code>==</code> is used for equality. </p></li>
<li><p>You probably meant <code>range(len(L1))</code>, as range expects an integer. </p></li>
<li><p>Lastly, you're adding the whole list to the count, when you only wanted to add the index. This could be achieved with <code>.index()</code>, but this doesn't work for duplicates in the list. You can use <code>enumerate</code>, as I'm about to show below. </p></li>
</ul>
<p>If you're ever working with indexes, <code>enumerate()</code> is your function:</p>
<pre><code>def first_even(L):
    for x, y in enumerate(L):
        if any(z % 2 == 0 for z in y): # If any of the numbers in the subsists are even
            return x # Return the index. Function breaks
    return -1 # No even numbers found. Return -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So here's what I came up with.</p>
<pre><code>def first_even(L1):
    for aList in range(len(L1)):
        for anItem in range(len(L1[aList])):
           if L1[aList][anItem] % 2 == 0:
               return aList
    return -1
</code></pre>
<p>First a fix. You need to use == for "equal to", '=' is for assigning variables.</p>
<pre><code>L1[i] % 2 == 0
</code></pre>
<p>And for the code, here's the idea in some more pseudocodey style:</p>
<pre><code>Iterate through the list of lists (L1):
    Iterate through the list's (aList) items (anItem):
        if List[current list][current item] is even:
            Return the current list's index
Return -1 at this point, because if the code gets this far, an even number isn't here.
</code></pre>
<p>Hope it helps, if you need any further explanation then I'll be happy to.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def first_even(L1):
    return ''.join('o' if all(n%2 for n in sl) else 'e' for sl in L1).find('e')
</code></pre>
</div>
<span class="comment-copy">+1 for giving it a try</span>
<span class="comment-copy">Please say what did not work.  You got an error message related to <code>range(L1)</code></span>
<span class="comment-copy">I would argue that <code>any(x % 2 == 0 for x in l)</code> would be a bit more readable... (as it terms of what it's checking for)</span>
<span class="comment-copy">@JonClements Maybe a little :) But you have to agree that this <code>all-to-any</code> conversion is trivial enough from the logical point of view.</span>
<span class="comment-copy">More readable than <code>next((i for i, v in enumerate(a) if any(el % 2 == 0 for el in v)), -1)</code> anyway...</span>
<span class="comment-copy">Nice and succinct code, but I think it's worth pointing out that range(len(x)) is generally used pretty commonly in introductory Python classes, so it's probably still good to be familiar with it.</span>
<span class="comment-copy">@JonClements Thank God I didn't know <code>next</code> had a <code>default</code> argument :) Thanks!</span>
<span class="comment-copy">I dont understand your code, it doesnt satisfy the examples ?</span>
<span class="comment-copy">Two more fixes for the existing code:  Since L1 is a list of lists, you need to iterate through each sublist. If you aren't using enumerate (although enumerate is great), the way to do this would be to have a loop such as "for j in range(len(L1[i]))." Within that inner loop, you can check if L1[i][j] % 2 == 0, and if it does you probably just want to return i. It seems like the count variable will just end up counting the number of even numbers.</span>
<span class="comment-copy">@DaveTran Oops, got my indentation wrong. Fixing</span>
