<div class="post-text" itemprop="text">
<p>Sometimes, I like to time how long it takes parts of my code to run.  I've checked a lot of online sites and have seen, at large, two main ways to do this.  One is using <code>time.time</code> and the other is using <code>timeit.timeit</code>.</p>
<p>So, I wrote a very simple script to compare the two:</p>
<pre><code>from timeit import timeit
from time import time
start = time()
for i in range(100): print('ABC')
print(time()-start, timeit("for i in range(100): print('ABC')", number=1))
</code></pre>
<p>Basically, it times how long it takes to print "ABC" 100 times in a for-loop.  The number on the left is the results for <code>time.time</code> and the number on the right is for <code>timeit.timeit</code>:</p>
<pre><code># First run
0.0 0.012654680972022981
# Second run
0.031000137329101562 0.012747430190149865
# Another run
0.0 0.011262325239660349
# Another run
0.016000032424926758 0.012740166697164025
# Another run
0.016000032424926758 0.0440628627381413
</code></pre>
<p>As you can see, sometimes, time.time is faster and sometimes it's slower.  Which is the better way (more accurate)?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>timeit</code> is more accurate, for three reasons:</p>
<ul>
<li>it repeats the tests many times to eliminate the influence of other tasks on your machine, such as disk flushing and OS scheduling.</li>
<li>it disables the garbage collector to prevent that process from skewing the results by scheduling a collection run at an inopportune moment.</li>
<li>it picks the most accurate timer for your OS, <code>time.time</code> or <code>time.clock</code> in Python 2 and <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="noreferrer"><code>time.perf_counter()</code></a> on Python 3. See <a href="http://docs.python.org/3/library/timeit.html#timeit.default_timer" rel="noreferrer"><code>timeit.default_timer</code></a>.</li>
</ul>
</div>
<span class="comment-copy"><code>timeit</code> is the better choice for timing chunks of code. It uses <code>time.time()</code> (<code>time.clock()</code> for Windows) and disables the garbage collector. Also, one trial isn't really enough.</span>
<span class="comment-copy">@Blender: <code>timeit</code> uses <code>time.perf_counter</code> in Python 3.3+</span>
<span class="comment-copy">@J.F.Sebastian: Thanks, I didn't know that.</span>
<span class="comment-copy">If you explicitly do those three things you get results as accurate as timeit? My use case is running many tests with different inputs, so figure it might be easier to dispense with timeit.</span>
<span class="comment-copy">@Annan: Why reinvent this wheel? I'm sure that whatever usecase you can come up with, provided you understand what it means to run something repeatedly, can be supplied for by <code>timeit</code>. There are a few smaller minor tricks <code>timeit</code> uses (such as using <code>itertools.repeat(None, repetitioncount)</code> for a low-friction repetition range) that you'd have to replicate too if you want to be as 'accurate' as <code>timeit</code> gets.</span>
<span class="comment-copy">@MartijnPieters: I'm wondering if <code>%timeit</code> is the built-in magic command for <code>timeit</code>, how about <code>%time</code>. Is <code>%time</code> the same when we use  <code>time.clock()</code> (put 2 time.clock at the beginning and the end of the code and calculate the time difference). I've read here but not enough info <a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html" rel="nofollow noreferrer">ipython.readthedocs.io/en/stable/interactive/magics.html</a> . Thanks</span>
<span class="comment-copy">@Catbuilts: <code>%time</code> doesn't do any repetition. It's  a straightforward 'run once, report time differences' operation.</span>
<span class="comment-copy">@Catbuilts: it's a <a href="https://github.com/ipython/ipython/blob/0fbad83245f474c4dd7a1b1fbe7f2ea79e005653/IPython/core/magics/execution.py#L1226-L1244" rel="nofollow noreferrer">bit more complicated than that</a>, but not much.</span>
