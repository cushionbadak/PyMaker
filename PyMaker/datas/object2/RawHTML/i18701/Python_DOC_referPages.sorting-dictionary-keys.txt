<div class="post-text" itemprop="text">
<p>I am reading in from a file which has the following syntax:</p>
<pre><code>Akaka D HI -1 -1 1 1 1 -1 -1 1 1 1 1 1 1 1 -1 1 1 1 -1 1 1 1 1 1 -1 1 -1 -1 1 1 1 1 1 1 0     0 1 -1 -1 1 -1 1 -1 1 1 -1
Alexander R TN 1 1 1 1 1 1 1 1 1 -1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1
</code></pre>
<p>I need to create a dictionary that maps the names to a list of their votes.  The names in this case are Akaka and Alexander and the votes are the series of numbers from -1, 0, and 1.  Example output would be:</p>
<pre><code>{'Akaka': [-1 -1 1 1 1 -1 -1 1 1 1 1 1 1 1 -1 1 1 1 -1 1 1 1 1 1 -1 1 -1 -1 1 1 1 1 1 1 0 0 1 -1 -1 1 -1 1 -1 1 1 -1], 'Alexander': [1 1 1 1 1 1 1 1 1 -1 1 -1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1]...,'name':[list of votes in integer form]}
</code></pre>
<p>So this is the code that I used:</p>
<pre><code>for line in voting_data:
    myList.append(line.strip().split(' '))
names = []
votes = []
intVotes = []
votingDict = {}
for i in myList:
    names.append(i[0])
for j in names:
    votes.append(i[3:])
for k in votes:
    intVotes.append([int(v) for v in k])

votingDict = {names[i]:votes[j] for i in range(len(names)) for j in range(len(votes))}
print votingDict
</code></pre>
<p>The first few outputs returns the following (Pyror is another name and so is Bunning):</p>
<pre><code>{'Pryor': ['-1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '1', '-1', '1', '1', '1', '1', '1', '-1', '1', '1', '1', '1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '-1', '1', '1', '1', '1', '-1', '1', '1', '-1'], 'Bunning': ['-1', '-1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '1', '-1', '1', '1', '1', '1', '1', '-1', '1', '1', '1', '1', '1', '1', '1', '-1', '-1', '1', '1', '1', '1', '1', '1', '1', '-1', '1', '-1', '1', '1', '1', '1', '-1', '1', '1', '-1']
</code></pre>
<p>my issue is that the wrong name is getting mapped to the wrong list.  In otherwords, the list mapped to Pryor is actually the list that should map to Alexander.  My lists are in correct order, but the names are not.  Is there a way to sort the names in this dictionary?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are recombining your lists incorrectly:</p>
<pre><code>votingDict = {names[i]:votes[j] for i in range(len(names)) for j in range(len(votes))}
</code></pre>
<p>This creates a <em>nested</em> loop, not a parallel loop. The normal solution here is to use <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip()</code></a>:</p>
<pre><code>votingDict = {name: vote for name, vote in zip(names, votes)}
</code></pre>
<p>However, you can greatly simplify your code by building the <code>votingDict</code> mapping while looping over the file:</p>
<pre><code>votingDict = {}
for line in voting_data:
    name, ign1, ign2, *votes = line.split()
    votingDict[name] = [int(v) for v in votes]
</code></pre>
<p><a href="http://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow"><code>str.split()</code></a> without arguments will split on <em>variable width</em> whitespace and remove trailing and leading whitespace, all in one go.</p>
<p>You can then assign the list output to a series of names, including a catch-all starred name for the remaining items; I use it to capture the name, two ignored columns and then the rest in the <code>votes</code> list, which we then convert to integers with a list comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you are overcomplicating things with your three loops (that should be nested, if I read correctly). You could simply do this:</p>
<pre><code>votingDict = {}
for line in voting_data:
    parts = line.strip().split(' ')
    name = parts[0]
    votes = [int(v) for v in parts[3:]]
    votingDict[name] = votes
</code></pre>
<p>Basically, as you read your lines, you extract the name and the votes, convert the votes to integers and store them in your dict.</p>
</div>
<span class="comment-copy">Thanks, and you're right I was being clumsy -__-</span>
