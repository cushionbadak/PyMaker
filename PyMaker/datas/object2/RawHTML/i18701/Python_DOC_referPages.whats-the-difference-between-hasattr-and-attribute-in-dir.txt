<div class="post-text" itemprop="text">
<p>For example:</p>
<pre><code>&gt;&gt;&gt; s = 'string'
&gt;&gt;&gt; hasattr(s, 'join')
True
&gt;&gt;&gt; 'join' in dir(s)
True
</code></pre>
<p><a href="http://docs.python.org/3/library/functions.html#hasattr" rel="nofollow">Python documentation</a> says that <code>hasattr</code> is implemented calling <code>getattr</code> and seeing whether it raises an exception or not. However, that leads to a great overhead, since the value obtained is discarded and an exception may be raised.</p>
<p>The question is if calling <code>'attribute' in dir(obj)</code> means the same thing, is it faster, safe, or may it fail in a particular occasion?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not quite the same thing. <code>dir()</code> is a diagnostic tool that <em>omits</em> attributes that <code>getattr()</code> and <code>hasattr()</code> would find. </p>
<p>From the <a href="http://docs.python.org/3/library/functions.html#dir" rel="noreferrer"><code>dir()</code> documentation</a>:</p>
<blockquote>
<p>The default <code>dir()</code> mechanism behaves differently with different types of objects, as it attempts to produce the <strong>most relevant, rather than complete</strong>, information:</p>
<ul>
<li>If the object is a module object, the list contains the names of the module’s attributes.</li>
<li>If the object is a type or class object, the list contains the names of its attributes, and recursively of the attributes of its bases.</li>
<li>Otherwise, the list contains the object’s attributes’ names, the names of its class’s attributes, and recursively of the attributes of its class’s base classes.</li>
</ul>
</blockquote>
<p>and</p>
<blockquote>
<p><strong>Note</strong>: Because <code>dir()</code> is supplied <strong>primarily as a convenience for use at an interactive prompt</strong>, it tries to supply an interesting
  set of names more than it tries to supply a rigorously or consistently
  defined set of names, and its detailed behavior may change across
  releases. For example, <code>metaclass</code> attributes are not in the result
  list when the argument is a class.</p>
</blockquote>
<p>Emphasis mine.</p>
<p>This means that <code>hasattr()</code> will find <em>metaclass supplied</em> attributes, but <code>dir()</code> would not, and what is found can differ accross Python releases as the definition for the function is to provide debugging convenience, not completeness.</p>
<p>Demo of the specific metaclass scenario, where <code>hasattr()</code> finds the metaclass-defined attribute:</p>
<pre><code>&gt;&gt;&gt; class Meta(type):
...     foo = 'bar'
... 
&gt;&gt;&gt; class Foo(metaclass=Meta):
...     pass
... 
&gt;&gt;&gt; hasattr(Foo, 'foo')
True
&gt;&gt;&gt; 'foo' in dir(Foo)
False
</code></pre>
<p>Last but not least:</p>
<blockquote>
<p>If the object has a method named <code>__dir__()</code>, this method will be called and must return the list of attributes.</p>
</blockquote>
<p>This means that <code>hasattr()</code> and <code>dir()</code> can vary even more widely in what attributes are 'found' if a <code>.__dir__()</code> method has been implemented.</p>
<p>Just stick with <code>hasattr()</code>. It is faster, for one, because testing for an attribute is cheap as that's just a membership test against one or more dictionaries. Enumerating all dictionary keys and merging them across instance, class and base classes on the other hand has a far higher CPU cost.</p>
</div>
<div class="post-text" itemprop="text">
<p>the hasattr is more than 100 times faster :) </p>
<pre><code>In [137]: s ='string'

In [138]: %timeit hasattr(s, 'join')
10000000 loops, best of 3: 157 ns per loop

In [139]: %timeit 'join' in dir(s)
100000 loops, best of 3: 19.3 us per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>dir()</code> does not call <code>getattr()</code>, or anything like that,  It depends on the class to "describe" itself: </p>
<pre><code>&gt;&gt;&gt; class Foo(object):
...     def __dir__(self):
...         return ['apples', 'bananas', 'mangoes']
...     def __getattr__(self, attr):
...         return {'a': 1}[attr]
...     
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; hasattr(foo, 'a')
True
&gt;&gt;&gt; hasattr(foo, 'apples')
False
&gt;&gt;&gt; 'a' in dir(foo)
False
&gt;&gt;&gt; 'apples' in dir(foo)
True
</code></pre>
<p>You should only use <code>dir()</code> when looking for documentation.  </p>
</div>
<div class="post-text" itemprop="text">
<p>hasattr() is basically</p>
<pre><code>try:
    s.attribute
    return True
except AttributeError:
    return False
</code></pre>
<p>while "attribute in dir(s)" is more like:</p>
<pre><code>for attr in dir(s):
    if attribute == attr:
        return True
return False
</code></pre>
<p>Hence, hasattr is expected to be a bit faster.</p>
<p>Anyways, if I be allowed to go a bit off-track then I would suggest this.
If you want to do something like:</p>
<pre><code>if hasattr(s, 'attributeName'):
    s.attributeName()
else:
    do_stuff()
</code></pre>
<p>then its advisable to do it like this:</p>
<pre><code>try:
    s.attributeName()
except AttributeError:
    do_stuff()
</code></pre>
<p>Why?</p>
<ol>
<li>To avoid the overhead of an extra try-except block/ for loop.</li>
<li>In python, it's Easier to Ask Forgiveness than Permission.</li>
</ol>
</div>
<span class="comment-copy">A drawback of using <code>hasattr</code> is that it will trigger properties execution, which may be costy. In cases such as a Django <code>OneToOneField</code> relations, this will even trigger a database query. I don't suppose there is an alternative, is there?</span>
<span class="comment-copy">@AugustoMen: You can use <i>application specific</i> means of testing for an attribute being present. I'm sure Django has a means of enumerating fields, for example.</span>
