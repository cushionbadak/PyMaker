<div class="post-text" itemprop="text">
<p>I'm trying to write some code that if a certain occurence happens, a specific number has to change to -that number.
I have the following code so far:</p>
<pre><code>x=6

for words in foo:
   if "bar" in words:
      crazy_function(x)
   else:
      pass
</code></pre>
<p>if the word "bar" is in words, x will need to come out as -6, if it is not in words, it needs to come out as +6.
In some cases however x=-6 in which case it needs to become positive if bar is in words.
I need to replace "crazy_function()" with something that actually works.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the negation operator:</p>
<pre><code>x=6

for words in foo:
  if "bar" in words:
    x = -x;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The "crazy function" is trivial to implement:</p>
<pre><code>def crazy_function(x):
    return -x
</code></pre>
<p>Use it like this:</p>
<pre><code>if "bar" in words:
    x = crazy_function(x)
</code></pre>
<p>Or simply in-line it:</p>
<pre><code>if "bar" in words:
    x = -x
</code></pre>
<p>To make it even shorter, as pointed by @kroolik:</p>
<pre><code>x = -x if "bar" in words else x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's already a function for this in the standard library: <a href="http://docs.python.org/3/library/operator.html#operator.neg" rel="nofollow"><code>neg</code></a>.</p>
<p>In a case like this, where you just need an expression and there's no good reason it has to be a function, it's silly to use <code>neg</code>. Compare:</p>
<pre><code>if "bar" in words:
    x = operator.neg(x)

if "bar" in words:
    x = -x
</code></pre>
<p>The second is clearly more readable, as well as shorter.</p>
<p>However, there are cases where you actually need a function. In that case, <code>neg</code> is better than creating a function on the fly. Compare:</p>
<pre><code>foo = map(operator.neg, bar)

foo = map(lambda x: -x, bar)
</code></pre>
<p>(Of course in this case, you could just write <code>foo = (-x for x in bar)</code>… but not every higher-order function maps to a comprehension clause.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, there's always the old standby, multiplication.</p>
<pre><code>x *= -1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Multipy the number by -1?  That seems the simplest way to do it.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = x*([-1 for words in foo if 'bar' in words]+[1])[0]
</code></pre>
</div>
<span class="comment-copy"><code>x = -x</code> does not work for you?</span>
<span class="comment-copy"><code>x = -x if "bar" in words else x</code> thats inline :C</span>
<span class="comment-copy">@kroolik yep, that's even shorter :) I edit my answer with your suggestion, thanks!</span>
<span class="comment-copy">@kroolik: It's not shorter, it's longer. <code>len('if "bar" in words: x = -x') == 25</code>. <code>len('x = -x if "bar" in words else x') == 31</code>. It's also slightly less readable, and reassigning <code>x</code> to <code>x</code> unchanged is a little confusing. So… what's the advantage?</span>
<span class="comment-copy">@abarnert, in my opinion <code>if "bar" in words: x = -x</code> should have it's true-case statement put into the following line, but that's just a matter of taste</span>
<span class="comment-copy">@kroolik: Normally, yes. But, to quote Guido: "If you need a one liner you can write it in one line without changing the syntax. That's why you can do it." So if the only reason to prefer the if expression with the extra repeated <code>x</code> is that it's a one-liner, that's not a reason. And at any rate, the statement is still fewer keystrokes, fewer tokens, etc., even with two lines.</span>
<span class="comment-copy">It's amazing how a deeper knowledge about something can produce milk from rocks... (in this case, a very interesting answer from a utterly trivial question...)</span>
<span class="comment-copy">There's an operator for that. It's called the negative sign.</span>
<span class="comment-copy">If you really want to get crazy, why not <code>x -= x + x</code>? Then you don't even need multiplication. :)</span>
<span class="comment-copy">@abarnert <code>x *= (x - 1) % -x</code> <code>x %= 2 * -x</code> <code>x = ~x + 1</code> <code>x = (x^-1) + 1</code></span>
<span class="comment-copy">@2rs2ts: Well, the first two require multiplication… but kudos for the latter two crazy methods, which have the potential added advantage of raising a <code>TypeError</code> if you pass anything that's not a bit-op-compatible integer type (assuming those are the only valid input values). :)</span>
