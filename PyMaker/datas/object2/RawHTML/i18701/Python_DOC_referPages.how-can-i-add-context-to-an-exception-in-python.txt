<div class="post-text" itemprop="text">
<p>I would like to add context to an exception like this:</p>
<pre><code>def process(vals):
    for key in vals:
        try:
            do_something(vals[key])
        except Exception as ex:  # base class. Not sure what to expect.
            raise # with context regarding the key that was being processed.
</code></pre>
<p>I found a way that is uncharacteristically long winded for Python. Is there a better way than this?</p>
<pre><code>try:
    do_something(vals[key])
except Exception as ex:
    args = list(ex.args)
    if len(args) &gt; 1:
        args[0] = "{}: {}".format(key, args[0])
        ex.args = tuple(args)
    raise # Will re-trhow ValueError with new args[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first item in <code>ex.args</code> is always the message -- if there is any. (Note for some exceptions, such as the one raised by <code>assert False</code>, <code>ex.args</code> is an empty tuple.) </p>
<p>I don't know of a cleaner way to modify the message than reassigning a new tuple to <code>ex.args</code>. (We can't modify the tuple since tuples are immutable). </p>
<p>The code below is similar to yours, except it constructs the tuple without using an intermediate list, it handles the case when <code>ex.args</code> is empty, and to make the code more readable, it hides the boilerplate inside a context manager:</p>
<pre><code>import contextlib

def process(val):
    with context(val):
        do_something(val)

def do_something(val):
    # assert False
    return 1/val

@contextlib.contextmanager
def context(msg):
    try:
        yield
    except Exception as ex:
        msg = '{}: {}'.format(msg, ex.args[0]) if ex.args else str(msg)
        ex.args = (msg,) + ex.args[1:]
        raise

process(0)
</code></pre>
<p>yields a stack trace with this as the final message:</p>
<pre><code>ZeroDivisionError: 0: division by zero
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just raise a new exception:</p>
<pre><code>def process(vals):
    for key in vals:
        try:
            do_something(vals[key])
        except Exception as ex:  
            raise Error(key, context=ex)
</code></pre>
<p>On Python 3 you don't need to provide the old exception explicitly, it will be available as <code>__context__</code> attribute on the new exception object and the default exception handler will report it automatically:</p>
<pre><code>def process(vals):
    for key in vals:
        try:
            do_something(vals[key])
        except Exception:  
            raise Error(key)
</code></pre>
<p>In you case, you should probably use the explicit <a href="http://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="nofollow"><code>raise Error(key) from ex</code></a> syntax that sets <code>__cause__</code> attribute on the new exception, see <a href="http://www.python.org/dev/peps/pep-3134/" rel="nofollow">Exception Chaining and Embedded Tracebacks</a>.</p>
<hr/>
<p>If the only issue is the verbosity of the message-amending code in your question; you could encapsulate it in a function:</p>
<pre><code>try:
    do_something(vals[key])
except Exception:
    reraise_with_context(key=key) # reraise with extra info
</code></pre>
<p>where:</p>
<pre><code>import inspect
import sys

def reraise_with_context(**context):
    ex = sys.exc_info()[1]
    if not context: # use locals from the caller scope
       context = inspect.currentframe().f_back.f_locals
    extra_info = ", ".join("%s=%s" % item for item in context.items())
    amend_message(ex, extra_info)
    raise

def amend_message(ex, extra):
    msg = '{} with context: {}'.format(ex.args[0], extra) if ex.args else extra
    ex.args = (msg,) + ex.args[1:]
</code></pre>
</div>
<span class="comment-copy">Inside the except block <code>ex.args = (key,)+ex.args </code> is a bit cleaner?</span>
<span class="comment-copy">@SteveAllison: You could do it that way, but the message will be presented as a tuple, such as <code>ZeroDivisionError: ('0: ', 'division by zero')</code>.</span>
<span class="comment-copy">That's certainly cleaner than my initial attempt. As verbose as it is, it does the simple job of changing the message. Thanks.</span>
<span class="comment-copy">Thanks J.F. I did not think about chaining exception to resolve my issue. The problem with that solution is that the default python exception handler displays both stack traces on top of each other, so one has to do a little bit of scrolling (when the stack is large) to understand the context. I am really hoping to just amend the message.</span>
<span class="comment-copy">@elmotec: I've added "encapsulate in a function" solution.</span>
<span class="comment-copy">Falls back to pretty much the same as @unubtu. Unfortunately, I can only pick one answer, so I pick this one because it shows both changing ex.args and exception chaining. Thanks both.</span>
