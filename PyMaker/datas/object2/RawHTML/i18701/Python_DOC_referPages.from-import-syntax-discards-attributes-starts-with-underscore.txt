<div class="post-text" itemprop="text">
<p>I have a basic understanding of python, but somewhere I have read that when we import a module using following syntax, it doesn't import attributes defined in specified module which starts with _ (single underscore). Can anybody tell me how it is happening and why it is like that ?</p>
<pre><code>from module.submodule import *
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's by design. Variables starting with an underscore are regarded as for internal use only (not the same as private in other languages). They can still be accessed on the module directly, but they arn't imported on a <code>*</code> import.</p>
<p>From the <a href="http://docs.python.org/3/tutorial/modules.html#more-on-modules">documentation</a> about <code>*</code> imports:</p>
<blockquote>
<p>This imports all names except those beginning with an underscore (_). In most cases Python programmers do not use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you have already defined.</p>
</blockquote>
<p>This is also to tell you that it's discouraged to use a * import, better to explicitly import the things you need. The exception are modules that are <em>designed</em> to be used via * import, that means they have an <code>__all__</code> attribute (a list containing containing the names of everything the module wants to export).</p>
</div>
<span class="comment-copy">+1 for discouraging the use of the * import.</span>
<span class="comment-copy">Just wondering: are __ (double underscore) prexixed module variables mangled like equivalent class variables?</span>
<span class="comment-copy">@astrognocci: yes. attributes starting with __ (double underscore) are mangled with class names, like (_classname__attributename). but AFAIK it doesn't apply to attribute which are known as magic methods. (starting and ending with __ (double underscore)).</span>
