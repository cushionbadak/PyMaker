<div class="post-text" itemprop="text">
<p>In my application, I receive informations from amazon in xml. So, I read and access the values by simplexml.</p>
<p>My problem is when I want to access several neighbor strings that have the same name.
an example :</p>
<pre><code>&lt;ItemAttributes&gt;
&lt;Author&gt;Brian Herbert&lt;/Author&gt;
&lt;Author&gt;Kevin J Anderson&lt;/Author&gt;
&lt;Author&gt;Frank Herbert&lt;/Author&gt;
&lt;Binding&gt;Paperback&lt;/Binding&gt;
&lt;EAN&gt;9782221088913&lt;/EAN&gt;
</code></pre>
<p>I want to have the three authors ! Frank and Brian Herbert, and Anderson too.</p>
<p>Here are my results as I launch each command :</p>
<pre><code>        &gt;&gt;&gt; for cle in xml['ItemSearchResponse']['Items']['Item'][1]['ItemAttributes'].values():
...     print cle
... 
749782221088913
Robert Laffont
2221088913
9782221088913
Frank Herbert
{u'EANListElement': u'9782221088913'}

        &gt;&gt;&gt; for item in enumerate(xml['ItemSearchResponse']['Items']['Item'][1]['ItemAttributes']['Author']):
...     print item
... 
F
r
a
n
k

H
e
r
b
e
r
t
</code></pre>
<p>So I access only the last item of the list, whereas there's several. How can I do ?
Under PHP, I did "foreach author in xml['...']['Author']; print author" and it was good. Here, this solution is the second I wrote just up, and it doesn't gave the expected result !
Any idea how I can access the authors' names one by one ? Thanks !</p>
</div>
<div class="post-text" itemprop="text">
<p>Is this the <a href="https://pypi.python.org/pypi/simplexml" rel="nofollow">simplexml</a> library you are using?  It hasn't been updated since 2005 (<a href="http://freecode.com/projects/simplexml" rel="nofollow">http://freecode.com/projects/simplexml</a>).</p>
<p>Since I don't see any documentation for the library on the PyPI page nor on the project page I can't help very much with it.</p>
<p>The output of your code indicates that you iterated over a string.</p>
<p>I can, however, recommend using <a href="http://docs.python.org/3/library/xml.etree.elementtree.html#module-xml.etree.ElementTree" rel="nofollow">ElementTree</a> in the standard library.  It is easy to work with, currently supported, and I know it provides child elements as a list regardless of the uniqueness (or not) of the element tag.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a working example using ElementTree:</p>
<pre><code>&gt;&gt;&gt; import xml.etree.ElementTree as ET

&gt;&gt;&gt; xml="""&lt;ItemAttributes&gt;
&lt;Author&gt;Brian Herbert&lt;/Author&gt;
&lt;Author&gt;Kevin J Anderson&lt;/Author&gt;
&lt;Author&gt;Frank Herbert&lt;/Author&gt;
&lt;Binding&gt;Paperback&lt;/Binding&gt;
&lt;EAN&gt;9782221088913&lt;/EAN&gt;
&lt;/ItemAttributes&gt;"""

&gt;&gt;&gt; root = ET.fromstring(xml)

&gt;&gt;&gt; for author in root.iter('Author'):
    print author.text


Brian Herbert
Kevin J Anderson
Frank Herbert
</code></pre>
<p>I hope this helps.</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually, it seems the lxml.objectify solution is the best.
It allow to fellow the path you know inside the xml.
Plus, I didn't say you (sorry), but the xml is much more complex and deep than what I explain earlier.
It doesn't begin with ItemAttributes -&gt; authors.</p>
<p>It's much more :</p>
<p>Items (there's other nodes inside the xml) -&gt; Item (one item per book I find !) -&gt; ItemAttributes -&gt; â€¦</p>
<p>Using lxml.objectify, I could find anything I need. The only hard point was to solve the common problem that when a tag or value doesn't exist, everything crashed.
I simply use try :</p>
<pre><code>try:
    dico["title"] = unicode(xml.Items.Item.ItemAttributes.Title)
except AttributeError:
    dico["title"] = ''
</code></pre>
<p>That's it !
The above code show you how I use the xml path.</p>
<p>Thanks anyway !</p>
</div>
<span class="comment-copy">I use this simplexml python library : <a href="https://pypi.python.org/pypi/python-simplexml/0.1.4" rel="nofollow noreferrer">pypi.python.org/pypi/python-simplexml/0.1.4</a> It's pretty current.</span>
<span class="comment-copy">Okay, that's useful information. It's not out of date, but it converts a node subtree to a dict using the element tag as the key.  Since the element's tag name is the key in a dict, only the last element's text value will be returned.  (the code is short enough to just read it) My conclusion is that you'll need to use a different XML handling library to handle the data you presented.</span>
<span class="comment-copy">Thanks dsh. I agree with you, and will try the one zach proposed.</span>
