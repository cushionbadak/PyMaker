<div class="post-text" itemprop="text">
<p>Okay I'm trying to do something with python version 3.3.2 I'm trying to import module so I don't have to restart the shell. The following is just an example the final code will be able to change:</p>
<pre><code>def importing():
    x = compile('import sys',"&lt;string","exec")
    exec(x)
    return True
</code></pre>
<p>The problem with this is when I call on this using <code>test.importing()</code> it returns True but when i do sys it says:</p>
<pre><code> Traceback (most recent call last):
  File "&lt;pyshell#74&gt;", line 1, in &lt;module&gt;
    sys
NameError: name 'sys' is not defined
</code></pre>
<p>Whats confusing me is though it works perfectly fine in the shell, any ideas or advice would be very thankful to me.</p>
</div>
<div class="post-text" itemprop="text">
<p>if you just want to reload a module, you can do</p>
<pre><code>from imp import reload
reload(sys)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to dynamically import modules you can use <a href="http://docs.python.org/3.1/library/functions.html#__import__" rel="nofollow"><code>__import__</code></a>.</p>
<p>Example <a href="http://www.diveintopython.net/functional_programming/dynamic_import.html" rel="nofollow">Dive into Python</a>:</p>
<pre><code>&gt;&gt;&gt; sys = __import__('sys')           
&gt;&gt;&gt; os = __import__('os')
&gt;&gt;&gt; re = __import__('re')
&gt;&gt;&gt; unittest = __import__('unittest')
&gt;&gt;&gt; sys                               
&gt;&gt;&gt; &lt;module 'sys' (built-in)&gt;
&gt;&gt;&gt; os
&gt;&gt;&gt; &lt;module 'os' from '/usr/local/lib/python2.2/os.pyc'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>exec</code> if no <code>locals</code> and <code>globals</code> passed, it executes in the current scope. So, your <code>import sys</code> import the <code>sys</code> module in the <code>importing</code> scope. See the code:</p>
<pre><code>&gt;&gt;&gt; def c():
...     exec('import sys')
...     print(locals())
...     print(globals())
... 
&gt;&gt;&gt; c()
{'sys': &lt;module 'sys' (built-in)&gt;}
{'__builtins__': &lt;module 'builtins'&gt;, '__package__': None, '__name__': '__main__', '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, 'c': &lt;function c at 0x7faa068e0320&gt;, 'b': &lt;function b at 0x7faa068e45f0&gt;, 'a': &lt;function a at 0x7faa066abe60&gt;, 'd': &lt;function d at 0x7faa068f6200&gt;, 'inspect': &lt;module 'inspect' from '/usr/lib64/python3.3/inspect.py'&gt;, '__doc__': None}
</code></pre>
<p>See, the <code>sys</code> is in the local scope but not the global scope. But note, the import is excuted dynamically, even if it is in the local scope, you can not call the sys directly in the function. The call will end up with an error, can not find the sys in the global scope:</p>
<pre><code>&gt;&gt;&gt; def a():
...     exec('import sys')
...     if sys:
...             return True
...     else:   
...             return False
... 
&gt;&gt;&gt; a()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in a
NameError: global name 'sys' is not defined
</code></pre>
<p>Instead, you should use <code>locals()</code>:</p>
<pre><code>&gt;&gt;&gt; def b():
...     exec('import sys')
...     if locals()['sys']:
...             return True
...     else:
...             return False
... 
&gt;&gt;&gt; b()
True
</code></pre>
<p>Last, I think using <code>exec</code> is not a good choice. Just like others have mentioned, using <a href="http://docs.python.org/3/library/functions.html#__import__" rel="nofollow"><code>__importing__</code></a>.</p>
</div>
<span class="comment-copy">user2234026: this is a very bad title! The point of the "python" tag is that you are having trouble with something in python! Your title should tell us the actual problem you are having! E.G., "Trouble with import in compile statement".</span>
<span class="comment-copy">Your problem seems almost identical to this one: <a href="http://stackoverflow.com/questions/951124/dynamic-loading-of-python-modules" title="dynamic loading of python modules">stackoverflow.com/questions/951124/â€¦</a></span>
<span class="comment-copy">I wonder, though, why would you need to reload <code>sys</code>? It's not like you could change it, making a reload necessary...</span>
<span class="comment-copy">Do we need to import reload? Isn't it a built in function?</span>
<span class="comment-copy">In Python 2.x it's built in, but not in 3.x</span>
<span class="comment-copy">I assumed the sys-import was just a module guaranteed to be there, for testing purposes.</span>
