<div class="post-text" itemprop="text">
<p>I have a list of instances, and I need to extract from that list a certain attribute of each of the instances, which will form a new list. I'm somewhat new to Python, and the only way I can solve this makes use of the exec() function, which obviously makes it a horrible solution. Does anybody know of a better way?</p>
<p>My current function is:</p>
<pre><code>def attributelist(list, attribute):
    "Inputs a list of instances and returns a list of a certain attribute of those instances"
    output = []
    for instance in list:
        exec("output.append(instance." + attribute + ")")
    return output
</code></pre>
<p>For example, working with the class 'my_class' with attribute 'name':</p>
<pre><code>instances = []
for i in range(10):
    instances.append(my_class(i))

attributelist(instances, 'name')
Out: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make use of <code>getattr</code> instead of using <code>exec</code>:</p>
<pre><code>output.append(getattr(instance, attribute))
</code></pre>
<p>You could also simplify your function by using generators:</p>
<pre><code>def attributelist(list_, attribute):
    "Inputs a list of instances and returns a list of a certain attribute of those instances"
    return [getattr(i, attribute) for i in list_]
</code></pre>
<p>You could leave off the square braces if you don't mind getting an iterator instead of a <code>list</code>. (You might need parentheses to do so.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/3/library/operator.html#operator.attrgetter" rel="nofollow"><code>attrgetter</code></a> with <code>map</code>:</p>
<pre><code>from operator import attrgetter

map(attrgetter('foo'), iterable)
</code></pre>
<p><code>attrgetter('foo')</code> creates a function that returns the <code>foo</code> attribute of whatever argument you call it with. Plus, it's implemented in C and will be faster than <code>getattr()</code> and a list comprehension.</p>
<p>If you're using Python 3, <code>map</code> won't return a list, so you'll have to pass it through <code>list()</code> to get one.</p>
</div>
<span class="comment-copy">I would rename <code>list</code>. It shadows the builtin <code>list</code> function.</span>
<span class="comment-copy">Good catch. I copy/pasted from OP's code and didn't notice. Fixed now.</span>
