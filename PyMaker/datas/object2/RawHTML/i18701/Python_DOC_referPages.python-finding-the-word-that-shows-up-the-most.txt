<div class="post-text" itemprop="text">
<p>I'm trying to get my program to report the word that shows up the most in a text file. For example, if I type "Hello I like pie because they are like so good" the program should print out "like occurred the most." I get this error when executing Option 3: KeyError: 'h'</p>
<pre><code>#Prompt the user to enter a block of text.
done = False
textInput = ""
while(done == False):
    nextInput= input()
    if nextInput== "EOF":
        break
    else:
        textInput += nextInput

#Prompt the user to select an option from the Text Analyzer Menu.
print("Welcome to the Text Analyzer Menu! Select an option by typing a number"
    "\n1. shortest word"
    "\n2. longest word"
    "\n3. most common word"
    "\n4. left-column secret message!"
    "\n5. fifth-words secret message!"
    "\n6. word count"
    "\n7. quit")

#Set option to 0.
option = 0

#Use the 'while' to keep looping until the user types in Option 7.
while option !=7:
    option = int(input())

#The error occurs in this specific section of the code.
#If the user selects Option 3,
    elif option == 3:
        word_counter = {}
        for word in textInput:
            if word in textInput:
                word_counter[word] += 1
            else:
                word_counter[word] = 1

        print("The word that showed up the most was: ", word)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you may want to do:</p>
<pre><code>for word in textInput.split():
  ...
</code></pre>
<p>Currently, you are just iterating through every character in the <code>textInput</code>. So to iterate through every word, we must first split the string up into an array of words. By default <code>.split()</code> splits on whitespace, but you can change this by just passing a delimeter to <code>split()</code>.</p>
<hr/>
<p>Also, you need to check if the word is in your dictionary, not in your original string. So try:</p>
<pre><code>if word in word_counter:
  ...
</code></pre>
<hr/>
<p>Then, to find the entry with the highest occurrences:</p>
<pre><code>highest_word = ""
highest_value = 0

for k,v in word_counter.items():
  if v &gt; highest_value:
    highest_value = v
    highest_word = k
</code></pre>
<p>Then, just print out the value of <code>highest_word</code> and <code>highest_value</code>.</p>
<hr/>
<p>To keep track of ties, just keep a list of the highest words. If we find a higher occurrence, clear the list and continue rebuilding. Here is the full program so far:</p>
<pre><code>textInput = "He likes eating because he likes eating"
word_counter = {}
for word in textInput.split():
  if word in word_counter:
    word_counter[word] += 1
  else:
    word_counter[word] = 1


highest_words = []
highest_value = 0

for k,v in word_counter.items():
  # if we find a new value, create a new list,
  # add the entry and update the highest value
  if v &gt; highest_value:
    highest_words = []
    highest_words.append(k)
    highest_value = v
  # else if the value is the same, add it
  elif v == highest_value:
    highest_words.append(k)

# print out the highest words
for word in highest_words:
  print word
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of rolling your own counter, a better idea is to use <a href="http://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow">Counters</a> in the collections module.</p>
<pre><code>&gt;&gt;&gt; input = 'blah and stuff and things and stuff'
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter(input.split())
&gt;&gt;&gt; c.most_common()
[('and', 3), ('stuff', 2), ('things', 1), ('blah', 1)]
</code></pre>
<p>Also, as a general code style thing, please avoid adding comments like this:</p>
<pre><code>#Set option to 0.
option = 0
</code></pre>
<p>It makes your code less readable, not more.</p>
</div>
<div class="post-text" itemprop="text">
<p>The original answer is certainly correct, but you may want to keep in mind that it will not show you 'ties for first'.  A sentence like</p>
<p><code>A life in the present is a present itself.</code></p>
<p>Will only reveal either 'a' or 'present' to be the number one hit. In fact, since dictionaries are (generally) unordered, the result you see may not even be the first word that's repeated multiple times.</p>
<p>If you need to report on multiples, might I suggest the following:</p>
<p>1) Use your current method of key-value pairs for 'word':'hits'.<br/>
2) Determine the greatest value for 'hits'.<br/>
3) Check for the number of values that equal the greatest number of hits, and add those keys to a list.<br/>
4) Iterate through the list to display the words with the greatest number of hits.  </p>
<p>Par example:</p>
<pre><code>greatestNumber = 0
# establish the highest number for wordCounter.values()
for hits in wordCounter.values():
    if hits &gt; greatestNumber:
        greatestNumber = hits

topWords = []
#find the keys that are paired to that value and add them to a list
#we COULD just print them as we iterate, but I would argue that this
#makes this function do too much
for word in wordCounter.keys():
    if wordCounter[word] == greatestNumber:
        topWords.append(word)

#now reveal the results
print "The words that showed up the most, with %d hits:" % greatestNumber
for word in topWords:
    print word
</code></pre>
<p>Depending on Python 2.7 or Python 3, your mileage (and syntax) may vary.  But ideally - IMHO -  you'd first want to determine the greatest number of hits and then just go back and add the relevant entries to a new list.</p>
<p>EDIT -- you should probably just go with the Counters module as suggested in a different answer.  I didn't even know that was something Python just came prepared to do.  Haha don't accept my answer unless you <em>necessarily</em> have to write your own counter!  There's already a module for that, it seems.</p>
</div>
<div class="post-text" itemprop="text">
<p>With Python 3.6+ you can use <a href="https://docs.python.org/3/library/statistics.html#statistics.mode" rel="nofollow noreferrer">statistics.mode</a>:</p>
<pre><code>&gt;&gt;&gt; from statistics import mode
&gt;&gt;&gt; mode('Hello I like pie because they are like so good'.split())
'like'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not too keen on Python, but on your last print statement, shouldn't you have a %s?</p>
<p>i.e.: print("The word that showed up the most was: %s", word)</p>
</div>
<span class="comment-copy">I still get a key error after incorporating the .split()</span>
<span class="comment-copy">I just realised, have a look at my updated answer.</span>
<span class="comment-copy">Okay, now the program only prints the last word I type at the input phase. If I type "he is like so like mean," the word mean shows up and not "like." What could be wrong?</span>
<span class="comment-copy">Yes, that dictionary just gives the amount of times each word occurs. You still need to figure out how to get the highest occurring word. I'll add a solution again.</span>
<span class="comment-copy">I think I can solve this now. Thanks a bunch kind sir!</span>
<span class="comment-copy">I had no idea this was a thing.  This is very very good.</span>
