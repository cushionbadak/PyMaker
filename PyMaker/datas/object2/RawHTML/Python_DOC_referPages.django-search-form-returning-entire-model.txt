<div class="post-text" itemprop="text">
<p>I'm trying to make a simple search form for class based views with Django. Everything seems to work, except the search result returns the entire model, so obviously the search/filter isn't working. I cannot figure out why after reading a bunch of tutorials and questions here.</p>
<p><code>models.py</code>:  </p>
<pre><code>class surveys(models.Model):
    FAN = models.SlugField(max_length=100, blank=True, null=True)
    Location = models.CharField(max_length=200, blank=True, null=True)

    def __str__(self):
        return self.FAN

    def get_absolute_url(self):
        return reverse('survey-detail', args=[str(self.FAN)])
</code></pre>
<p><code>views.py</code>:  </p>
<pre><code>class Search(generic.ListView):
    template_name = 'datalibrary/search.html'
    model = surveys

    def get_queryset(self):
        try:
            name = self.kwargs['name']
        except:
            name = ''
        if (name != ''):
            object_list = self.model.objects.filter(FAN__icontains == name)
        else:
            object_list = ''
        return object_list

class SearchResults(generic.ListView):
    template_name = 'datalibrary/search_results.html'
    model = surveys
</code></pre>
<p><code>search.html</code>:  </p>
<pre><code>{% extends "base_generic.html" %}

{% block content %}
    &lt;form method="get" action="/results/" class="navbar-form pull-right"&gt;
        &lt;input type="text" id="searchBox" class="input-medium search-query" name="search" placeholder="Search"&gt;
        &lt;input type="submit" class="btn" value="Search" &gt;
    &lt;/form&gt;
{% endblock %}
</code></pre>
<p><code>search_results.html</code>:  </p>
<pre><code>{% extends "base_generic.html" %}

{% block content %} 
    {{ object_list }}
{% endblock %}
</code></pre>
<p><code>urls.py</code>:</p>
<pre><code>urlpatterns +=[
    path('search/', views.Search.as_view(), name='search'),
    path('results/', views.SearchResults.as_view(), name='search-results'),
]
</code></pre>
<p>Any idea why <code>object_list</code> returns all the values in the model rather filtering based on the input, even when there's no input?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have name = self.kwargs['name'], which does not getting any 'name', for search a better way is to take the input name as query and show the results.</p>
<pre><code>class Search(generic.ListView):
    template_name = 'datalibrary/search.html'
    context_object_name = 'all_search_results'

    def get_queryset(self):
        result = super(Search, self).get_queryset()
        query = self.request.GET.get('search') #your input name is 'search'

        if query:
           object_list = surveys.objects.filter(FAN__icontains=query) #or FAN__contains
           result = object_list
        else:
           result = None    # When no result found

        return result
</code></pre>
<p>In Html, </p>
<pre><code>{% extends "base_generic.html" %}

 {% block content %}
  &lt;form method="get" action="/results/" class="navbar-form pull-right"&gt;
     &lt;input type="text" id="searchBox" class="input-medium search-query" name="search" placeholder="Search"&gt;
     &lt;input type="submit" class="btn" value="Search" &gt;
  &lt;/form&gt;



  {% for result in all_search_results %}
       {{result.add_according_to_the_model}}
  {% empty %}
        &lt;p&gt; No Results &lt;p&gt;
  {% endfor %}

   {% endblock %}
</code></pre>
<p>You can show search results in the same page. However if it is required for you then you can have different html.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for something called <code>self.kwargs['name']</code>, but your view won't have any such item.</p>
<p>Firstly, the name of the search input in your HTML is <code>search</code>, not <code>name</code>.</p>
<p>And secondly, <code>self.kwargs</code> is for elements that are captured from the URL; but this is sent as a GET form, so you should get it from the querystring: <code>self.request.GET['search']</code>.</p>
<p>Putting it together, in a slightly more idiomatic way:</p>
<pre><code>def get_queryset(self):
    name = self.kwargs.get('name')
    object_list = self.model.objects.all()
    if name:
        object_list = object_list.filter(FAN__icontains == name)
    return object_list
</code></pre>
</div>
<span class="comment-copy">You didn't post your urls.py but obviously your form is posting to the <code>SearchResults</code> view, not to the <code>Search</code> view. Hint: you don't need two distinct views here</span>
<span class="comment-copy">Updated with my <code>urls.py</code>. Tried in a single view another answer showed, but not having any luck. Any suggestions?</span>
<span class="comment-copy">Thanks for showing that method. Unfortunately when I tried it I got a 404 error with the message <code>The current path, results/, didn't match any of these.</code> Any idea what that could be? I updated my question with my original <code>urls.py</code>.</span>
<span class="comment-copy">Because it is <code>path('results/', views.SearchResults.as_view(), name='search-results'),</code> not used for anything. In my answer, all search result is in the same search.html using class <code>Search</code>. So You can remove <code>class SearchResult</code> and path to SearchResult view that is giving you error.</span>
<span class="comment-copy">I thought I had tried that and got a similar error. I just tried changing <code>action="/results/"</code> to 'action="/datalibrary/search/"` and that worked! Thanks for the explanations.</span>
<span class="comment-copy">Thanks, that cleared up a few questions I had. I tried your correction, but it's still returning the same result.</span>
<span class="comment-copy">Wait, what is that separate SearchResults view? Is your results URL pointing directly at that? If so then you need to l the get_queryset method <i>there</i>, not on the Search view.</span>
<span class="comment-copy">Oh, I didn't know that. I tried adding the get_queryset method to SearchResults view, but I'm getting a 404 error with message <code>The current path, results/, didn't match any of these.</code></span>
