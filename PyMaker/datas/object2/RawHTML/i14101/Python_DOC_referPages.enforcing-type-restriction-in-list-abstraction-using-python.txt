<div class="post-text" itemprop="text">
<p>Below is the list abstraction in functional paradigm, that encapsulates any type of data in its representation.</p>
<pre><code>empty_rlist = None
#Representation - start
#Constructor
def rlist(first, rest):
    return(first, rest)

#Selector
def first(s):
    return s[0]

def rest(s):
    return s[1]

#Representation - end

#Constructor and Selector constitutes ADT(above) that supports below invariant:
#If a recursive list s is constructed from a first element f and a recursive list r, then
#   • first(s) returns f, and
#   • rest(s) returns r, which is a recursive list.

#Usage(interface) -  start
def create_list(first, rest):
    return rlist(first, rest)

def len_rlist(s):
    """Compute the length of the recursive list s"""
    def compute_length(s, length):
        if s is empty_rlist:
            return length
        else:
            return compute_length(rest(s), length + 1)
    return compute_length(s, 0)

def getitem_rlist(s, i):
    """Return the element at index i of recursive list s"""
    if i == 1:
        return first(s)
    else:
        return getitem_rlist(rest(s), i-1)

def count(s, value):
    """Count the occurence of value in the list s """
    def count_occurence(s, value, count):
        if s == empty_rlist:
           return count
        else:
           if first(s) == value:
              return count_occurence(rest(s), value, count + 1)
           else:
              return count_occurence(rest(s), value, count)
    return count_occurence(s, value, 0)

#Usage - end


Lst = empty_rlist
Lst = create_list(4, Lst)
Lst = create_list(3, Lst)
Lst = create_list(1, Lst)
Lst = create_list(1, Lst)
print(count(Lst, 1))
</code></pre>
<p>In the above code, interfaces that are provided to users of this abstraction are <code>create_list</code> / <code>len_rlist</code> / <code>getitem_rlist</code> / <code>count</code>.</p>
<p>Questions:</p>
<ol>
<li><p>How to enforce that the object passed to parameter(<code>s</code>) of interfaces <code>len_rlist</code> / <code>getitem_rlist</code> / <code>count</code> is nothing but the object provided by <code>create_list</code> interface?</p></li>
<li><p>How to enforce above list abstraction store same type data?</p></li>
</ol>
<p><em>Note: Practically it is required to enforce these rules from syntax perspective.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>python</code> is dynamicaly typed language you can't check type before executing. But in reality sometimes need check input parameters, return values. I use next solutions for this tasks:</p>
<pre><code>def accepts(*types):
    """Check input types"""
    #print types
    def check_accepts(f):
        assert len(types) == f.func_code.co_argcount
        def new_f(*args, **kwds):
            for (a, t) in zip(args, types):
                assert isinstance(a, t), \
                       "arg %r does not match %s" % (a,t)
            return f(*args, **kwds)
        new_f.func_name = f.func_name
        return new_f
    return check_accepts

def returns(rtype):
    """Check returns type"""
    def check_returns(f):
        def new_f(*args, **kwds):
            result = f(*args, **kwds)
            assert isinstance(result, rtype), \
                   "return value %r does not match %s" % (result,rtype)
            return result
        new_f.func_name = f.func_name
        return new_f
    return check_returns


if __name__ == '__main__':
    import types 

    @returns(types.NoneType) #Check None as result
    @accepts(int, (int,float)) #First param int; second int or float
    def func(arg1, arg2):
        #return str(arg1 * arg2)
        pass

    func(1, 2)      
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In order to enforce the type, you will have to provide the type as a parameter somewhere in your constructor. Consider building a parameterized type constructor. Here is an example.</p>
<pre><code>&gt;&gt;&gt; def list_spec_for(type_):
...    empty_rlist = type_()
...    def rlist(first, rest):
...        return (type_(first), rest)
...    return empty_rlist, rlist

&gt;&gt;&gt; empty_rlist, rlist = list_spec_for(int)
&gt;&gt;&gt; empty_rlist
0
&gt;&gt;&gt; rlist(1, empty_rlist)
(1, 0)
&gt;&gt;&gt; rlist("1", empty_rlist)
(1, 0)
&gt;&gt;&gt; rlist("one", empty_rlist)
ValueError: invalid literal for int() with base 10: 'one'
</code></pre>
<p>If accepting "1" is not OK for your purpose, you can of course add an <code>isinstance</code> check to the definition of rlist.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is <strong>not</strong> a strongly typed language. More exactly, it is a dynamic typed. That means that variables contains values that do have a type, but the language itself will never forbids to put a value of a different type in a variable.</p>
<pre><code>a = 1     # a contains an integer value
a = "abc" # a now contains a string value
</code></pre>
<p>But, you have the <code>isinstance</code> and <code>type</code> functions that could help to achieve this requirement : you could affect a type to your recursive list and only allow to bind together an element and a recursive list of compatible types. </p>
<p>The full spec could be :</p>
<ul>
<li>a rlist stores the type of the element it accepts</li>
<li>a rlist can be constructed by adding a first element for which <code>isinstance(elt, typ)</code> is true, and <code>typ</code> is the accepted typ of the <em>rest</em> part</li>
<li>an initial list can be constructed by giving it explicetly a type, or by using the type of its first element</li>
</ul>
<p>Implementation:</p>
<pre><code>class rlist:
    def __init__(self, first, rest=None, typ=None):
        self.first = first
        self.rest = rest
        if rest is None:  # initial creation
            self.typ = type(first) if typ is None else typ
        else:
            if not isinstance(rest, rlist):
                raise TypeError(str(rest) + " not a rlist"
            self.typ = rest.typ
        if not isinstance(first, self.typ):
            raise TypeError(str(first) + "not a " + str(typ))
    # other methods ...
</code></pre>
<p>But when you need strong typing, you should wonder if Python is really the appropriate language - Java <strong>is</strong> strongly typed and natively supports all that. The Python way is more <em>I accept this and just hope it'll fit, programmer should know what he does</em></p>
</div>
<span class="comment-copy">Well, enforcing object type isn't a pythonish way of organizing data. The pythonish way is a duck typing, that is you may check if objects [in a collection] suit your needs, that is they support methods required for a particular task but generally you shouldn't care about object types. One possible exception is <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer">array library</a> where numeric values space-efficiently stored in memory</span>
<span class="comment-copy">@user3159253  <a href="http://www.voidspace.org.uk/python/articles/duck_typing.shtml" rel="nofollow noreferrer">Here</a> it says:"The principle of duck typing says that you shouldn't care what type of object you have - just whether or not you can do the required action with your object. For this reason the <code>isinstance</code> keyword is <b>frowned</b> upon." But am still not clear what duck typing is, because I did not get this statement: <code>you shouldn't care what type of object you have - just whether or not you can do the required action with your object</code></span>
<span class="comment-copy">The [semi-]formal definition is e.g. in <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">Wikipedia</a>. The whole point of the duck typing approach is that an object is considered to be of a "suitable type" if the object supports operations  (has methods, properties etc) required for a particular task. This particularly means that generic containers shouldn't care about object types at all - they <i>do not perform</i> any "particular task", just generic operations on a collection.</span>
<span class="comment-copy">@user3159253 If <code>d = {'a':1, 'b':2}</code>, then the principle of <b>duck typing</b> says that <code>d</code> is of type <code>&lt;class 'dict'&gt;</code>, only when d supports operations like <code>setdefault()</code> / <code>keys()</code> / <code>fromkeys()</code> etc.... Is my understanding correct about duck typing? If yes, why this jargon <b>duck typing</b> for such concept? What is the advantage of such approach?</span>
<span class="comment-copy">@user3159253 As it says <a href="http://www.voidspace.org.uk/python/articles/duck_typing.shtml" rel="nofollow noreferrer">here</a>: <b>So the Python mapping type and sequence type 'interfaces' are so vague that we can't really use duck typing at all</b></span>
<span class="comment-copy">Can you please go thru my query?</span>
<span class="comment-copy">@overexchange call <code>@accepts(yourtype1, yourtype2)create_list(first, rest)</code> Here @accepts will check your parameters type</span>
<span class="comment-copy">@overexchange, I understand this problem and I don't know <b>good</b> solution for python. Java resolved this problem with language tools such as <code>interfaces</code>, <code>abstract clases</code>, <code>generics</code>. For <code>python</code> you must use tests, actually documentation and agreements about parameters type.</span>
<span class="comment-copy">Problem not in FP vs OOP. Problem in dynamically typed languages. OOP in python only extends functionality of base class. But it don't help for type checking. Just python developers not bustle about types.</span>
<span class="comment-copy">OOP based abstracrions is good solution for some tasks (i.g. object modelling). Good abstractions for FP is reached with other solutions i.g. (DLS)[<a href="https://en.wikipedia.org/wiki/Domain-specific_language]" rel="nofollow noreferrer">en.wikipedia.org/wiki/Domain-specific_language]</a>. Sadly, but my native language whery different from English. I understand all point but have problems with sentenses.</span>
<span class="comment-copy">my above solution is using functional paradigm.</span>
<span class="comment-copy">@overexchange : the problem for meeting such a requirement with functional paradigm is the spec part. Here I explicitely added a type in an object, so it is then easy to use isinstance. I think it is still possible in functional paradigm, but you will have to choose betwen 2 ways : always use the type of last element of rest : even when adding subtypes you can always add next original types but you have to go to the end of the rlist, or use the type of first element which is cheaper, but once you added a subtype, you can no longer add parent type elements</span>
<span class="comment-copy">Upvoted. I always frown when I read the heading on SO's Python page. Thank you for saying Python is not strongly typed.</span>
<span class="comment-copy">@Pynchia Python is strongly typed, because <b>objects don't change type</b>. Python is dynamic typed, because <b>we pass around references and don't check the type until the last possible minute</b>.</span>
<span class="comment-copy">yes alright. Thank you</span>
