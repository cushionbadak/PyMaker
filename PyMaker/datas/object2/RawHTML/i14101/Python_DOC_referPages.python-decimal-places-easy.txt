<div class="post-text" itemprop="text">
<p>I feel a bit blonde right now, but for some reason I can't figure out how to solve this. </p>
<p>Need to correct these two issues. </p>
<ol>
<li>using // integer division messes up the average. </li>
<li><p>Also, I need to use the format function to get 2 decimal places</p>
<p>def viewscores(scores):</p>
<pre><code>sum_scores = sum(scores)
average = float(sum_scores // len(scores))
### here is where I am having the results displayed

print ("The scores are these: " + str(scores))
print ("The Average score now is: " + str(average))
</code></pre>
<p>def main():</p>
<pre><code>scores = []

scores_file = open('scores.txt', 'r')
line_list = list(scores_file.readlines())

scores_file.close()
i = 0
while i &lt; len(line_list):
    scores.append(int(line_list[i].strip()))
    i += 1
viewscores(scores)
</code></pre>
<p>main()</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>This is one of those things where Python2 and Python3 behave differently.</p>
<blockquote>
<p>using // integer division messes up the average. </p>
</blockquote>
<p>Python 3:</p>
<pre><code>average = sum_scores / len(scores)
</code></pre>
<p>Python 2:</p>
<pre><code>average = float(sum_scores) / len(scores)
</code></pre>
<p>In either case, you don't want to use <code>//</code>.</p>
<blockquote>
<p>Also, I need to use the format function to get 2 decimal places</p>
</blockquote>
<p>Python 3:</p>
<pre><code>print ('The average score now is {:.2f}'.format(average))
</code></pre>
<p>Python 2:</p>
<pre><code>print ('The average score now is %.2f' % average)
</code></pre>
<p>Even within each dialect there's multiple solutions.</p>
</div>
<div class="post-text" itemprop="text">
<p>The most simple option would be to use <code>format(scores, '.2f')</code></p>
<pre><code>sum_scores = float(sum(scores))
average = (sum_scores / float(len(scores)))


print ("The scores are these: %s" %format(scores, '.2f'))
print ("The Average score now is: %s"  %format(average, '.2f')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>i am new to Python as well.</p>
<p>For "//", i gave a trial on ipython, to me they do not make much difference whether you use // or /</p>
<ul>
<li>using "/" <a href="http://screencloud.net/v/hcDo" rel="nofollow noreferrer">http://screencloud.net/v/hcDo</a></li>
<li>using "//" <a href="http://screencloud.net/v/bwAq" rel="nofollow noreferrer">http://screencloud.net/v/bwAq</a></li>
<li>the solution to your request is  <a href="http://screencloud.net/v/rwQp" rel="nofollow noreferrer">http://screencloud.net/v/rwQp</a></li>
</ul>
<p>For two decisoinal place problem, i learnt something from the following</p>
<ul>
<li><p><a href="https://stackoverflow.com/questions/455612/limiting-floats-to-two-decimal-points">Limiting floats to two decimal points</a></p></li>
<li><p>and it works to your case  - <a href="http://screencloud.net/v/1gPB" rel="nofollow noreferrer">http://screencloud.net/v/1gPB</a></p></li>
</ul>
<p>For function, you may wish to consult Google</p>
<ul>
<li>i am not good at creating function, but function always should have "return", because everything in python is object</li>
</ul>
</div>
<span class="comment-copy">If <code>sum_score</code> is an integer, then make it a float before you divide it by an integer. Mess around with dividing with integers, and you will see why.</span>
<span class="comment-copy">Don't use <i>floored</i> division. <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">Format string syntax</a>.</span>
<span class="comment-copy">Don't forget that you can make Python 2's <code>/</code> operator behave like Python 3's with <code>from __future__ import division</code>.</span>
