<div class="post-text" itemprop="text">
<p>What is the difference between these two lines of code:</p>
<pre><code>if not x == 'val':
</code></pre>
<p>and </p>
<pre><code>if x != 'val':
</code></pre>
<p>Is one more efficient than the other?</p>
<p>Would it be better to use</p>
<pre><code>if x == 'val':
    pass
else:
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/library/dis.html" rel="noreferrer"><code>dis</code></a> to look at the bytecode generated for the two versions:</p>
<p><strong><code>not ==</code></strong></p>
<pre><code>  4           0 LOAD_FAST                0 (foo)
              3 LOAD_FAST                1 (bar)
              6 COMPARE_OP               2 (==)
              9 UNARY_NOT           
             10 RETURN_VALUE   
</code></pre>
<p><strong><code>!=</code></strong></p>
<pre><code>  4           0 LOAD_FAST                0 (foo)
              3 LOAD_FAST                1 (bar)
              6 COMPARE_OP               3 (!=)
              9 RETURN_VALUE   
</code></pre>
<p>The latter has fewer operations, and is therefore likely to be slightly more efficient. </p>
<hr/>
<p>It was pointed out <a href="https://stackoverflow.com/questions/31026754/python-if-not-vs-if/31026976#comment50099324_31026976">in the commments</a> (thanks, <a href="https://stackoverflow.com/users/1896169/quincunx">@Quincunx</a>) that where you have <code>if foo != bar</code> vs. <code>if not foo == bar</code> the number of operations is exactly the same, it's just that the <code>COMPARE_OP</code> changes and <code>POP_JUMP_IF_TRUE</code> switches to <code>POP_JUMP_IF_FALSE</code>:</p>
<p><strong><code>not ==</code></strong>:</p>
<pre><code>  2           0 LOAD_FAST                0 (foo)
              3 LOAD_FAST                1 (bar)
              6 COMPARE_OP               2 (==)
              9 POP_JUMP_IF_TRUE        16
</code></pre>
<p><strong><code>!=</code></strong></p>
<pre><code>  2           0 LOAD_FAST                0 (foo)
              3 LOAD_FAST                1 (bar)
              6 COMPARE_OP               3 (!=)
              9 POP_JUMP_IF_FALSE       16
</code></pre>
<p>In this case, unless there was a difference in the amount of work required for each comparison, it's unlikely you'd see any performance difference at all.</p>
<hr/>
<p>However, note that the two versions <strong>won't always be logically identical</strong>, as it will depend on the implementations of <code>__eq__</code> and <code>__ne__</code> for the objects in question. Per <a href="https://docs.python.org/2/reference/datamodel.html#object.__lt__" rel="noreferrer">the data model documentation</a>:</p>
<blockquote>
<p>There are no implied relationships among the comparison operators. The
  truth of <code>x==y</code> does not imply that <code>x!=y</code> is false.</p>
</blockquote>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; class Dummy(object):
    def __eq__(self, other):
        return True
    def __ne__(self, other):
        return True


&gt;&gt;&gt; not Dummy() == Dummy()
False
&gt;&gt;&gt; Dummy() != Dummy()
True
</code></pre>
<hr/>
<p>Finally, and perhaps most importantly: in general, where the two <em>are</em> logically identical, <strong><code>x != y</code> is much more readable than <code>not x == y</code></strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>@jonrsharpe has an excellent explanation of what's going on. I thought I'd just show the difference in time when running each of the 3 options 10,000,000 times (enough for a slight difference to show).</p>
<p>Code used:</p>
<pre><code>def a(x):
    if x != 'val':
        pass


def b(x):
    if not x == 'val':
        pass


def c(x):
    if x == 'val':
        pass
    else:
        pass


x = 1
for i in range(10000000):
    a(x)
    b(x)
    c(x)
</code></pre>
<p>And the cProfile profiler results:</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/tnf1M.png"/></p>
<p>So we can see that there is a very minute difference of ~0.7% between <code>if not x == 'val':</code> and <code>if x != 'val':</code>. Of these, <code>if x != 'val':</code> is the fastest.
<p>However, most surprisingly, we can see that </p>
<pre><code>if x == 'val':
        pass
    else:
</code></pre>
<p>is in fact the fastest, and beats <code>if x != 'val':</code> by ~0.3%. This isn't very readable, but I guess if you wanted a negligible performance improvement, one could go down this route.</p>
</p></div>
<div class="post-text" itemprop="text">
<p>In the first one Python has to execute one more operations than necessary(instead of just checking not equal to it has to check if it is not true that it is equal, thus one more operation). It would be impossible to tell the difference from one execution, but if run many times, the second would be more efficient. Overall I would use the second one, but mathematically they are the same</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from dis import dis
&gt;&gt;&gt; dis(compile('not 10 == 20', '', 'exec'))
  1           0 LOAD_CONST               0 (10)
              3 LOAD_CONST               1 (20)
              6 COMPARE_OP               2 (==)
              9 UNARY_NOT
             10 POP_TOP
             11 LOAD_CONST               2 (None)
             14 RETURN_VALUE
&gt;&gt;&gt; dis(compile('10 != 20', '', 'exec'))
  1           0 LOAD_CONST               0 (10)
              3 LOAD_CONST               1 (20)
              6 COMPARE_OP               3 (!=)
              9 POP_TOP
             10 LOAD_CONST               2 (None)
             13 RETURN_VALUE
</code></pre>
<p>Here you can see that <code>not x == y</code> has one more instruction than <code>x != y</code>. So the performance difference will be very small in most cases unless you are doing millions of comparisons and even then this will likely not be the cause of a bottleneck. </p>
</div>
<div class="post-text" itemprop="text">
<p>An additional note, since the other answers answered your question mostly correctly, is that if a class only defines <code>__eq__()</code> and not <code>__ne__()</code>, then your <code>COMPARE_OP (!=)</code> will run <code>__eq__()</code> and negate it. At that time, your third option is likely to be a tiny bit more efficient, but should only be considered if you NEED the speed, since it's difficult to understand quickly.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's about your way of reading it. <code>not</code> operator is dynamic, that's why you are able to apply it in </p>
<pre><code>if not x == 'val':
</code></pre>
<p>But <code>!=</code> could be read in a better context as an operator which does the opposite of what <code>==</code> does.</p>
</div>
<div class="post-text" itemprop="text">
<p>I want to expand on my readability comment above.</p>
<p>Again, I completely agree with readability overriding other (performance-insignificant) concerns.</p>
<p>What I would like to point out is the brain interprets "positive" faster than it does "negative".  E.g., "stop" vs. "do not go" (a rather lousy example due to the difference in number of words).</p>
<p>So given a choice:</p>
<pre><code>if a == b
    (do this)
else
    (do that)
</code></pre>
<p>is preferable to the functionally-equivalent:</p>
<pre><code>if a != b
    (do that)
else
    (do this)
</code></pre>
<p>Less readability/understandability leads to more bugs.  Perhaps not in initial coding, but the (not as smart as you!) maintenance changes...</p>
</div>
<span class="comment-copy">The better is the one you can read, I doubt your program's bottleneck will be here</span>
<span class="comment-copy">This question interests me in the "x not in list" and "not x in list" case</span>
<span class="comment-copy">@SomethingSomething they are interpreted identically.</span>
<span class="comment-copy">@SomethingSomething reference for my above comment: <a href="http://stackoverflow.com/q/8738388/3001761">stackoverflow.com/q/8738388/3001761</a></span>
<span class="comment-copy">"We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil." -- Donald Knuth</span>
<span class="comment-copy">Wow this is a great answer! I didn't even know about <code>__eq__</code> and <code>__ne__</code></span>
<span class="comment-copy">In practice, any class that has <code>__eq__</code> inconsistent with <code>__ne__</code> is flat-out broken.</span>
<span class="comment-copy">@Kevin <i>"in general"</i>, yes, but that wasn't your initial claim! Multi-valued logic (e.g. SQL's <code>TRUE</code>, <code>FALSE</code>, <code>NULL</code>) means that this isn't always so straightforward.</span>
<span class="comment-copy">@jonrsharpe: All you seem to be saying is that "consistency" has a context-sensitive definition.  I never said otherwise.</span>
<span class="comment-copy">Please note that it is not <i>always</i> true that <code>not x == y</code> has one more instruction. When I put the code into an <code>if</code>, it turned out that they both have the same number of instructions, just one had <code>POP_JUMP_IF_TRUE</code> and the other <code>POP_JUMP_IF_FALSE</code> (that was the only difference between them, other than using a different <code>COMPARE_OP</code>). When I compiled the code without the <code>if</code>s, I got what you got.</span>
<span class="comment-copy">I hope everyone knows not to <i>act</i> on this information!  Making unreadable changes for a 0.3% improvement -- or even a 10% improvement -- is rarely a good idea, and this kind of improvement is very likely to be evanescent (and not <a href="https://www.youtube.com/watch?v=5anLPw0Efmo" rel="nofollow noreferrer">in a good way</a>: very slight changes in the Python runtime could eliminate or even reverse any gain.</span>
<span class="comment-copy">@Malvolio In addition, there are <a href="http://www.toptal.com/python/why-are-there-so-many-pythons" rel="nofollow noreferrer">different implementations</a> of Python.</span>
<span class="comment-copy">What do you mean <i>"<code>not</code> operator is dynamic"</i>?</span>
<span class="comment-copy">@jonrsharpe I think he means that "not x" will call x.__bool__() [python 3 -- python 2 uses <b>nonzero</b>] and revert the result (see <a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__bool__</a>)</span>
<span class="comment-copy">brain interprets "positive" faster than it does "negative"  is this from experience or have you read studies about this ? I'm just asking because depending on the code in (do this) or (do that), I find a != b easier to understand.</span>
