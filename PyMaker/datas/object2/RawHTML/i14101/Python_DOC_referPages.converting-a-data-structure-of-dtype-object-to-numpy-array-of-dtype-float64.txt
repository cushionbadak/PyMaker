<div class="post-text" itemprop="text">
<p>I am trying to convert <code>'feature1'</code> array from the following data structure into a numpy array so I can input it to sklearn. However, I am running in circles as it always tells me that <code>dtype=object</code> is unsuitable, and I am not able to convert it to the desired <code>float64</code> format. </p>
<p>I want to extract all the <code>'feature1'</code> as a list of numpy arrays of <code>dtype=float64</code>, instead of <code>dtype=object</code> from the following structure.</p>
<p><code>vec</code> is an object returned from an earlier computation.</p>
<pre><code>&gt;&gt;&gt;vec
[{'is_Primary': 1, 'feature1': [2, 2, 2, 0, 0.03333333333333333, 0], 'object_id': ObjectId('557beda51d41c8e4d1aeac25'), 'vectorized': 1},
{'is_Primary': 0, 'feature1': [2, 2, 1, 0, 0.5, 0], 'object_id': ObjectId('557beda51d41c8e4d1aeac25'), 'vectorized': 1}]
</code></pre>
<p>I tried the following:</p>
<pre><code>&gt;&gt;&gt; t = np.array(list(vec))
&gt;&gt;&gt; t
&gt;&gt;&gt;&gt;array([ {'is_Primary': 0, 'feature1': [], 'object_id': ObjectId('557bcd881d41c8d9c5f5822f'), 'vectorized': 1},
   {'is_Primary': 0, 'feature1': [], 'object_id': ObjectId('557bcd881d41c8d9c5f58233'), 'vectorized': 1},
   {'is_Primary': 0, 'feature1': [], 'object_id': ObjectId('557bcd881d41c8d9c5f58237'), 'vectorized': 1},
   ...,
   {'is_Primary': 0, 'feature1': [], 'object_id': ObjectId('557beda61d41c8e4d1aead1f'), 'vectorized': 1},
   {'is_Primary': 1, 'feature1': [2, 2, 0, 0], 'object_id': ObjectId('557beda61d41c8e4d1aead1d'), 'vectorized': 1},
   {'is_Primary': 1, 'feature1': [], 'object_id': ObjectId('557beda61d41c8e4d1aead27'), 'vectorized': 1}], dtype=object)
</code></pre>
<p>Also,  </p>
<pre><code>&gt;&gt;&gt; array = np.array([x['feature1'] for x in vec])
</code></pre>
<p>as suggested by another user, gives a similar output:</p>
<pre><code>&gt;&gt;&gt; array
&gt;&gt;&gt; array([[], [], [], ..., [], [2, 2, 0, 0], []], dtype=object)
</code></pre>
<p>I know I can access the contents of <code>'feature1'</code> using <code>array[i]</code>, but what I want is to convert the <code>dtype=object</code> to <code>dtype=float64</code>, and made into a list/dict in which each row will have the <code>'feature1'</code>of the corresponding entry from <code>vec</code>.</p>
<p>I also tried using a pandas dataframe, but to no avail.</p>
<pre><code>    &gt;&gt;&gt;&gt;pandaseries = pd.Series(df['feature1']).convert_objects(convert_numeric=True)
    &gt;&gt;&gt;&gt;pandaseries
0     []
1     []
2     []
3     []
4     []
5     []
6     []
7     []
8     []
9     []
10    []
11    []
12    []
13    []
14    []
...
7021                                                   []
7022    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12, 2, 24...
7023                                                   []
7024                                                   []
7025                                                   []
7026                                                   []
7027                                                   []
7028    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12, 2, 24...
7029                                                   []
7030    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12, 2, 24...
7031                                                   []
7032                                       [2, 2, 0.1, 0]
7033                                                   []
7034                                         [2, 2, 0, 0]
7035                                                   []
Name: feature1, Length: 7036, dtype: object
    &gt;&gt;&gt; 
</code></pre>
<p>Again, <code>dtype: object</code> is returned. My guess would be to loop over each row and print a list out. But I am unable to do that. Maybe it is a newbie question. What am I doing wrong?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>This:</p>
<pre><code>array = numpy.array ( [ x['feature1'] for x in ver ] )
</code></pre>
<p>Or you need to be more clear in your example...</p>
</div>
<div class="post-text" itemprop="text">
<p>Lets take as the starting point a list of lists or equivalently an object array of lists:</p>
<pre><code>A = [[], [], [], [1,2,1], [], [2, 2, 0, 0], []]
A = array([[], [], [], [1,2,1], [], [2, 2, 0, 0], []], dtype=object)
</code></pre>
<p>If the sublists were all the same length, <code>np.array([...])</code> would give you a 2d array, one row for each sublist, and columns matching their common length.  But since they are unequal in length, it can only make it a 1d array, where each element is a pointer to one of these sublists - i.e. dtype=object.</p>
<p>I can imagine 2 ways of constructing a 2d array:</p>
<ul>
<li>pad each sublist to a common length</li>
<li>insert each sublist into an empty array of the appropriate size.</li>
</ul>
<p>Basically it requires common Python iteration;  it's not a common enough task to have a wiz-bang numpy function.</p>
<p>For example:</p>
<pre><code>In [346]: n=len(A)
In [348]: m=max([len(x) for x in A])
In [349]: AA=np.zeros((n,m),int)
In [350]: for i,x in enumerate(A):
   .....:     AA[i,:len(x)] = x
In [351]: AA
Out[351]: 
array([[0, 0, 0, 0],
       [0, 0, 0, 0],
       [0, 0, 0, 0],
       [1, 2, 1, 0],
       [0, 0, 0, 0],
       [2, 2, 0, 0],
       [0, 0, 0, 0]])
</code></pre>
<p>To get a sparse matrix:</p>
<pre><code>In [352]: from scipy import sparse
In [353]: MA=sparse.coo_matrix(AA)
In [354]: MA
Out[354]: 
&lt;7x4 sparse matrix of type '&lt;class 'numpy.int32'&gt;'
    with 5 stored elements in COOrdinate format&gt;
</code></pre>
<p>Nothing magical, just straight forward sparse matrix construction.  I suppose you could bypass the dense matrix</p>
<p>There is a list-of-lists sparse format that looks a bit like your data.</p>
<pre><code>In [356]: Ml=MA.tolil()

In [357]: Ml.rows
Out[357]: array([[], [], [], [0, 1, 2], [], [0, 1], []], dtype=object)

In [358]: Ml.data
Out[358]: array([[], [], [], [1, 2, 1], [], [2, 2], []], dtype=object)
</code></pre>
<p>Conceivably you could construct an empty <code>sparse.lil_matrix((n,m))</code> matrix, and set it's <code>.data</code> attribute directly.  But you'd also have to calculate the <code>rows</code> attribute.</p>
<p>You could also look at the <code>data</code>, <code>row</code>. <code>col</code> attributes of the <code>coo</code> format matrix, and decide it would be easy to construct the equivalent from your <code>A</code> list of lists.</p>
<p>One way or other you have to decide how the non-zero rows get padded to the full length.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can access the value of a dictionary item by using its key:</p>
<pre><code>d ={'a':1}
d['a'] --&gt; 1
</code></pre>
<p>To <em>access</em> items in a list, you can iterate over it or use its index</p>
<pre><code>a = [1,  2]

for thing in a:
    # do something with thing

a[0]  --&gt; 1
</code></pre>
<p><code>map</code> conveniently applies a function to all the items of an iterable and returns a list of the <em>results</em>.  <code>operator.getitem</code> returns a function that will <em>retrieve</em> an item from an object. </p>
<pre><code>import operator
import numpy as np
feature1 = operator.getitem('feature1')
a = np.asarray(map(feature1, vec))
</code></pre>
<hr/>
<pre><code>vec = [{'is_Primary': 1, 'feature1': [2, 2, 2, 0, 0.03333333333333333, 0], 'object_id': ObjectId('557beda51d41c8e4d1aeac25'), 'vectorized': 1},
       {'is_Primary': 0, 'feature1': [2, 2, 1, 0, 0.5, 0], 'object_id': ObjectId('557beda51d41c8e4d1aeac25'), 'vectorized': 1}]

&gt;&gt;&gt; a = np.asanyarray(map(feature1, vec))
&gt;&gt;&gt; a.shape
(2, 6)
&gt;&gt;&gt; print a
[[ 2.          2.          2.          0.          0.03333333  0.        ]
 [ 2.          2.          1.          0.          0.5         0.        ]]
&gt;&gt;&gt; 
&gt;&gt;&gt; for thing in a[1,:]:
    print type(thing)

&lt;type 'numpy.float64'&gt;
&lt;type 'numpy.float64'&gt;
&lt;type 'numpy.float64'&gt;
&lt;type 'numpy.float64'&gt;
&lt;type 'numpy.float64'&gt;
&lt;type 'numpy.float64'&gt;
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy"><code>vec</code> contains two dictionaries, each has a 'feature1' item.  Which one do you want?</span>
<span class="comment-copy">If you don't know how to access the value of a dictionary item, maybe you should spend some time with <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">The Tutorial</a> in the docs.</span>
<span class="comment-copy">I want both as the rows of a numpy array.</span>
<span class="comment-copy">You must explain your answer, also what about OP wants the <code>'feature1'</code>values in a separate numpy array?</span>
<span class="comment-copy">The OP wants the values as rows of an array.  That's what this answer produces.  But whether all <code>feature1</code> values have the same length makes a big difference in the resulting array type.</span>
<span class="comment-copy">@hpaulj yes the length of each row is different, and i was hoping this would give me a sparse numpy array that would be accessible to <code>scipy.sparse</code></span>
<span class="comment-copy">Thanks! Basically this solves my problem. (<a href="http://stackoverflow.com/questions/16600397/2d-list-to-numpy-array-and-fill-remaining-values-of-shorter-sublists-with-1" title="2d list to numpy array and fill remaining values of shorter sublists with 1">stackoverflow.com/questions/16600397/â€¦</a>)</span>
<span class="comment-copy">Maybe it's just a matter of style, but I think <code>[ x['feature1'] for x in ver ]</code> is more idiomatic, but functionally the same, as your <code>map(operator...)</code>.</span>
<span class="comment-copy">@hpaulj .. List comprehensions are cool and a lot of ppl (most) seem to think they are THE idiomatic form.  For some reason I like <code>map</code> - but do use list comprehensions. Sometimes list comprehensions are faster sometimes <code>map</code> is faster (if time is important).</span>
<span class="comment-copy">@wwii Your suggestion provided a string.</span>
<span class="comment-copy">@ShantanuGhosh - Using the example for <code>vec</code> that was provided, I get an ndarray of shape (2,6) and type float64.  Is your data different than the example in the question?</span>
