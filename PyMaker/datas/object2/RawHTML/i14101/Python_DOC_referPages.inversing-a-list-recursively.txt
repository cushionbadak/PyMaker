<div class="post-text" itemprop="text">
<p>I created a function that will inverse a list recursively but it uses an global list in witch it puts the elements.
Can this be rewritten so that it won't use an outside variable/list to achieve the same result.</p>
<p>Here is the code:</p>
<pre><code>invs = []

def inv_list(list_, elem):
    global invs

    if elem is not None:
        invs.append(elem) 

    if not list_:
        return invs

    else:
        try:
            el = list_.pop()
            inv_list(list_, el)

        except Exception:
            pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about:</p>
<pre><code>def inv_list(lst):
    if not lst:
        return []
    return inv_list(lst[1:]) + lst[:1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>it looks like you are doing a whole lot more work than you need to</p>
<pre><code>def reverse_recurse(a_list):
    if not a_list:
        return []
    return [a_list.pop(),] + reverse_recurse(a_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While your implementation could be improved in various ways, when I find that I want to build something recursive without using globals and without making the interface feel dirty is create a nested helper function:</p>
<pre><code>def inv_list(list_):
    invs = []

    def helper(elem):
        if elem is not None:
            invs.append(elem) 

        if not list_:
            return invs
        else:
            try:
                el = list_.pop()
                return helper(el)
            except Exception:
                pass

    return helper(None)
</code></pre>
<p>That way, you can have values that are at the scope of the outer function.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>The problematic way to do it is</strong> simple, just use default arguments.</p>
<pre><code>def rec_reverse(input=[], output=[]):
    if len(input) == 0:
        return
    else:
        output.append(input.pop())
        rec_reverse(input, output)
        return output

x = list(range(10))
y = list(range(20))
print(rec_reverse(x, []))
print(rec_reverse(y, []))
</code></pre>
<p>Just <strong>remember</strong> to pass a new list to the output, so that you can call it again without getting old values.</p>
<p><strong>Nevertheless</strong>, you can use the safe approach without using default arguments:</p>
<pre><code>def rec_reverse(input):
    if not input:
        return input
    else:
        return [input.pop(), ] + rec_reverse(input)
</code></pre>
<p>And you can also use its recursive equivalent as a lambda expression:</p>
<pre><code>rec_reverse = lambda input=[]: [] if not input else [input.pop(), ] + rec_reverse(input)
</code></pre>
<p>Keep in mind though, that there's an even simpler solution without using recursion at all:</p>
<pre><code>x = list(range(10))
rec_reverse = lambda input: input[::-1]
print(rec_reverse(x))
</code></pre>
<p>Since in Python, you can reverse any list using <a href="https://docs.python.org/3/whatsnew/2.3.html#extended-slices" rel="nofollow">extended slice notation</a>.</p>
<p>Also, you can just use reverse() and spare you the trouble.</p>
<pre><code>def reverse(input):
    input.reverse()
    return input
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Building on Rederick Deathwill, here is a simplified version of your function:</p>
<pre><code>def inv_list(list_):
    def inner(list_, invs):
        if not list_:
            return invs
        else:
            invs.append(list_.pop())
            return inner(list_, invs)

    return inner(list_, [])
</code></pre>
<p>It uses a default value for invs, getting rid of the need for a global variable to hold the inverted list. With subsequent invocation, invs is passed along so that the next call can build on it.</p>
<p>Once the bottom of the call stack is reached, the function returns the reversed list. A nice addition to the original is the <code>return inner(list_, invs)</code> line, which allows the caller to capture the new list as the return value.</p>
<p>This is not the shortest, but I think it is at least readable.</p>
</div>
<span class="comment-copy">use the list as an arg</span>
<span class="comment-copy">Why not just use the <code>reverse()</code> method?</span>
<span class="comment-copy">bah faster than me :P (+1 good answer :P)</span>
<span class="comment-copy">Or <code>return lst if not lst else lst[-1:] + inv_list(lst[:-1])</code></span>
<span class="comment-copy">@PadraicCunningham I like the idea of using lst[-1:] instead of [lst[-1]] (stolen!). Instead I think it is correct to return a copy of the empty list instead of the original lst when lst is empty. Otherwise you have an inconsistent behavior</span>
<span class="comment-copy">yep, you can also <code>return [] if not lst else lst[-1:] + inv_list(lst[:-1])</code></span>
<span class="comment-copy">It's worth pointing out that using a list as a default function argument is problematic as you will get back the same instance each time the default arg is used.  Try calling your function twice.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/q/1132941/3001761">stackoverflow.com/q/1132941/3001761</a></span>
