<div class="post-text" itemprop="text">
<p>I have a file formated like thisï¼š</p>
<pre><code>#1  0.13297254902 0.324803921569 0.434835294118 ...#many floats in one line
#2  0
#3  0.377305882353 0.595870588235 0.353215686275 ...
#4  1 #0/1 for the second line 
#5  ....
</code></pre>
<p>I want to process the file so that all blocks with second line is 0 can be deleted and left the file as</p>
<pre><code>#1  0.377305882353 0.595870588235 0.353215686275 ...
#2  1
#3  0.403529411765 0.341654901961 0.379278431373 ... 
#4  1 #now they are all 1s
#5  .....
</code></pre>
<p>I tried the snippet below, but it can only see the 0/1 then remove the line, but I want to delete the line with floats above 0/1, not the line with floats below 0/1.</p>
<pre><code>f = open(filePath, "r")
lines = f.readlines()
f.close()
f = open(filePath, "w")

for line in lines:
    if "1\n" in line:
        f.write(line)
</code></pre>
<p>Is there any other way I can choose which line to include and which not?
Or maybe there's a way to process the file backwards?</p>
</div>
<div class="post-text" itemprop="text">
<p>We can use the <code>next()</code> function to get the next element in the file iterable. The <code>shutil</code> module allows us to move the new file, overwriting the original (thanks @JoranBeasley).</p>
<pre><code>import shutil

with open(filePath, 'r') as f, open('new_' + filePath, 'w') as output:
    for line in f:
        n = next(f)
        if n != '0\n':
            output.write(line+n)

shutil.move("new_" + filePath, filePath)
</code></pre>
<p>Input:</p>
<pre><code>0.13297254902 0.324803921569 0.434835294118 ...#many floats in one line
0
0.377305882353 0.595870588235 0.353215686275 ...
1 #0/1 for the second line
</code></pre>
<p>Output:</p>
<pre><code>0.377305882353 0.595870588235 0.353215686275 ...
1 #0/1 for the second line
</code></pre>
</div>
<span class="comment-copy">Yeah, it works! But is it possible to store them into the same file?</span>
<span class="comment-copy"><code>shutil.move("new_filepath.txt", filepath)</code>?</span>
<span class="comment-copy">Mandary: You can do relatively easy in-place file modification using the <a href="https://docs.python.org/3/library/fileinput.html#module-fileinput" rel="nofollow noreferrer"><code>fileinput</code></a> module.</span>
<span class="comment-copy">@martineau ... but doesnt that require using its closure context(ie <code>with fileinput.open(asdasd)</code>?) in which case you cannot call next on its iterator? .. so that wouldnt work I dont think(at least not without some sledgehammering) ...</span>
<span class="comment-copy">@Joran: If you can do <code>for line in f</code> where <code>f</code> is a <code>fileinput.FileInput</code> instance, you should be able to do <code>next(f)</code>.</span>
