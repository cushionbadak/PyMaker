<div class="post-text" itemprop="text">
<p>I am basically looking to see if it's possible to compile Python code into a C++ program such that a single binary is produced, then call the (compiled) python code as/with a function from within the C++ code.</p>
<p>Background: I have a C++ code that does some work and produces data that I want to plot. I then wrote a seperate Python script using SciPy that reads in the output data, processes it, and plots it to files. This all works as it is.</p>
<p>Basically, I am picturing:</p>
<pre><code>void plotstuff() {
    my_python_func(); // This is the python script compiled into the c++ binary
}    
</code></pre>
<p>I don't need to pass anything between the python code and the C++ code other than being sure it's executed in the same directory. It may make things easier if I can pass string arguments, but again - not essential.</p>
<p>Can this be accomplished? Or is it generally a bad idea and I should just stick to having my C++ and python separate?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes: this is called <strong>embedding</strong>. </p>
<p>The best place to start is <a href="https://docs.python.org/2/extending/embedding.html" rel="noreferrer">the official Python documentation on the topic</a>. There's some sample code that shows how to call a Python function from C code.</p>
<hr/>
<p>Here's an extremely basic example, also from the Python docs:</p>
<pre><code>#include &lt;Python.h&gt;

int
main(int argc, char *argv[])
{
  Py_SetProgramName(argv[0]);  /* optional but recommended */
  Py_Initialize();
  PyRun_SimpleString("from time import time,ctime\n"
                     "print 'Today is',ctime(time())\n");
  Py_Finalize();
  return 0;
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make a native extension (<a href="https://docs.python.org/2/extending/extending.html" rel="nofollow">Python 2</a> or <a href="https://docs.python.org/3/extending/" rel="nofollow">Python 3</a>) out of your C++ code, and have your Python program <code>import</code> it. Then use <a href="http://www.py2exe.org/" rel="nofollow"><code>py2exe</code></a> or your favorite platform's counterpart to turn the Python program and your native extension into an executable.</p>
</div>
<span class="comment-copy">Look into the Python/C API reference: <a href="https://docs.python.org/2/c-api/" rel="nofollow noreferrer">docs.python.org/2/c-api</a></span>
<span class="comment-copy">What you are  trying to do is called Embedding.that means that some parts of your application  occasionally calls the <b>python</b> <b>interpreter</b> to run some Python code.although the application itself has nothing to do with python.</span>
<span class="comment-copy">This looks like what I want to use. Question though - when compiling everything, how can I include my python script inside the C++ executable (instead of in two seperate files)? Should I simply write another function which returns the python full script as a string, or is there a more elegant way (g++ -options)?</span>
<span class="comment-copy">@kjfergu ,  to see how to embed an arbitrary file (for example, a Python script) into a C++ program, check out this question: <a href="http://stackoverflow.com/questions/4864866/c-c-with-gcc-statically-add-resource-files-to-executable-library" title="c c with gcc statically add resource files to executable library">stackoverflow.com/questions/4864866/â€¦</a></span>
