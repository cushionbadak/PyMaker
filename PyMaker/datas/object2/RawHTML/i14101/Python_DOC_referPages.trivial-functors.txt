<div class="post-text" itemprop="text">
<p>I very often write code like:</p>
<pre><code>sorted(some_dict.items(), key=lambda x: x[1])
sorted(list_of_dicts, key=lambda x: x['age'])
map(lambda x: x.name, rows)
</code></pre>
<p>where I would like to write:</p>
<pre><code>sorted(some_dict.items(), key=idx_f(1))
sorted(list_of_dicts, key=idx_f('name'))
map(attr_f('name'), rows)
</code></pre>
<p>using:</p>
<pre><code>def attr_f(field):
  return lambda x: getattr(x, field)

def idx_f(field):
  return lambda x: x[field]
</code></pre>
<p>Are there functor-creators like idx_f and attr_f in python, and are they of clearer when used than lambda's?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>operator</code> module has <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter"><code>operator.attrgetter()</code></a> and <a href="https://docs.python.org/3/library/operator.html#operator.attrgetter"><code>operator.itemgetter()</code></a> that do just that:</p>
<pre><code>from operator import attrgetter, itemgetter

sorted(some_dict.items(), key=itemgetter(1))
sorted(list_of_dicts, key=itemgetter('name'))
map(attrgetter('name'), rows)
</code></pre>
<p>These functions also take <em>more than one</em> argument, at which point they'll return a tuple containing the value for each argument:</p>
<pre><code># sorting on value first, then on key
sorted(some_dict.items(), key=itemgetter(1, 0))

# sort dictionaries by last name, then first name
sorted(list_of_dicts, key=itemgetter('last_name', 'first_name'))
</code></pre>
<p>The <code>attrgetter()</code> function also accepts <em>dotted names</em>, where you can reach attributes of attributes:</p>
<pre><code># extract contact names
map(attrgetter('contact.name'), companies)
</code></pre>
</div>
<span class="comment-copy">great! I remember using these way back, but couldn't find them on Google.</span>
