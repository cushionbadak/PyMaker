<div class="post-text" itemprop="text">
<p>I want to read all strings from Python file. Example file (/tmp/s.py):</p>
<pre><code>s = '{\x7f5  x'
</code></pre>
<p>Now I try to read the string from my script:</p>
<pre><code>import re
find_str = re.compile(r"'(.+?)'")

for line in open('/tmp/s.py', 'r'):
    all_strings = find_str.findall(line)
    print(all_strings) # outputs ['{\\x7f5  x']
</code></pre>
<p>But I want the string (in this case the byte that is in escaped hex representation) not to be escaped. I want to treat the data was it is in my /tmp/s.py file and to get a string with a interpreted \x7f byte, instead of the literal \x7f, which is right now represented as \\x7f.</p>
<p>How can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You'd use the <code>unicode_escape</code> codec to decode the string the same way Python does when reading a string literal:</p>
<pre><code>print(*[s.encode('latin1').decode('unicode_escape') for s in all_strings])
</code></pre>
<p>Note that <code>unicode_escape</code> can only decode from bytes, not from text. The codec is also limited to <em>Latin-1 source code</em>, not the default UTF-8.</p>
<p>From the <a href="https://docs.python.org/3/library/codecs.html#text-encodings" rel="nofollow"><em>Text Encodings</em> section</a> of the Python <code>codecs</code> module:</p>
<blockquote>
<p><code>unicode_escape</code> </p>
<p>Encoding suitable as the contents of a Unicode literal in ASCII-encoded Python source code, except that quotes are not escaped. Decodes from Latin-1 source code. Beware that Python source code actually uses UTF-8 by default.</p>
</blockquote>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; s = r'{\x7f5  x'
&gt;&gt;&gt; s
'{\\x7f5  x'
&gt;&gt;&gt; s.encode('latin1').decode('unicode_escape')
'{\x7f5  x'
</code></pre>
</div>
<span class="comment-copy">This is a very good answer and answered exactly what I tried to formulate. Many thanks. Any idea why the Python devs would prefer latin1 over utf8, when python source code is by default in utf8?</span>
<span class="comment-copy">@NikolaiTschacher: I suspect the limitation is a historic one; Python 2 source has traditionally been interpreted as Latin-1 as well. Also, Latin-1 means your bytes are decoded one-on-one to Unicode codepoints, which may be a better choice when dealing with arbitrary strings (you can always decode all bytes to a Unicode codepoint, even if it is the wrong one). You cannot specify the source encoding here as you are already picking the <code>unicode_escape</code> codec.</span>
