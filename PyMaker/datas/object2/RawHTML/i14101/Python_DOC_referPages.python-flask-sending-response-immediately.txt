<div class="post-text" itemprop="text">
<p>I need to execute Process during request like below</p>
<pre><code>@app.route('/test')
def test_process():
    print "starting new process"
    p = Process(target=do_long_extra_job)
    p.start()

    return "this is response"
</code></pre>
<p>do_long_extra_job is on another process, so expected work flow is like this</p>
<ol>
<li>start a process</li>
<li>response</li>
<li>long running extra job finished</li>
</ol>
<p>but actual flow is like this</p>
<ol>
<li>stat a process</li>
<li>long running extra job finished</li>
<li>response</li>
</ol>
<p>how can I response immediately after starting new process?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply_async" rel="nofollow">apply_async</a> method in the <a href="https://docs.python.org/3/library/multiprocessing.html#using-a-pool-of-workers" rel="nofollow">multiprocessing.Pool</a> class may work for you. 'Process' won't work for you in this case since it's a blocking method, meaning that your return statement will not execute until p.start() has finished executing. </p>
<p>Example with apply_async and multiprocessing.Pool:</p>
<pre><code>def do_long_extra_job():
    #some extra long process
    return

@app.route('/test')
def test_process():
    print "starting new process"
    pool = multiprocessing.Pool(processes=1)
    pool.apply_async(do_long_extra_job)
    return "this is response" 
</code></pre>
</div>
<span class="comment-copy">You should look into using a task runner like <a href="http://python-rq.org/" rel="nofollow noreferrer">RQ</a> or <a href="http://www.celeryproject.org/" rel="nofollow noreferrer">Celery</a> for this.</span>
<span class="comment-copy">@jonafato But I can't use Celery or RQ either.</span>
<span class="comment-copy">Why are these not options? They're probably better solutions in the long term than rolling your own version using multiprocessing.</span>
<span class="comment-copy">@jonafato because system admin rejects to install these... :(</span>
<span class="comment-copy">Thanks for your answer, but I need to add lines like this, <code>async_result = pool.apply_async(do_long_extra_job)</code>, <code>async_result.get()</code>. I don't know why <code>get()</code> is needed but it works.</span>
<span class="comment-copy">Ok, It's not working :( Please reject my edit. I knew that <code>get()</code> is blocking and waiting results back, but It works first time... or looks like working.</span>
<span class="comment-copy">Finally, I find out that  <code>Pool.apply_async</code> is not working on my production environment setup(using uwsgi / nginx). I need to tell my system admin to install Celery.</span>
