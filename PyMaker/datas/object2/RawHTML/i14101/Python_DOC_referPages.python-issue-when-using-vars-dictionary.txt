<div class="post-text" itemprop="text">
<p>I have the following snippet:</p>
<pre><code>a, b = 1, 2
params = ['a', 'b']
res = {p: vars()[p] for p in params}
</code></pre>
<p>Which gives me <code>KeyError: 'a'</code> whereas the following code works fine:</p>
<pre><code>a, b = 1, 2
params = ['a', 'b']
res = {}
for p in params:
    res[p] = vars()[p] 
</code></pre>
<p>What's the difference here?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/functions.html#vars" rel="nofollow noreferrer"><code>vars()</code></a> without any argument acts like <code>locals()</code> and since a dictionary comprehension has its own scope it has no variable named <code>a</code> or <code>b</code>.</p>
<p>You can use <a href="https://docs.python.org/2/library/functions.html#eval" rel="nofollow noreferrer"><code>eval()</code></a> here. Without any argument it will execute in <a href="https://stackoverflow.com/questions/291978/short-description-of-python-scoping-rules">LEGB</a> manner, or specify <code>globals()</code> dict explicitly to <code>eval</code>:</p>
<pre><code>&gt;&gt;&gt; res = {p: eval(p) for p in params}
&gt;&gt;&gt; res
{'a': 1, 'b': 2}
</code></pre>
<hr/>
<p>But then again the correct way will be to create a dictionary from the start if you want to access variables using their names.</p>
</div>
<div class="post-text" itemprop="text">
<p>Its because of that in your code <code>vars</code> returns a dictionary contains the <strong>local</strong> variables.actually based on documentation :</p>
<blockquote>
<p>Without an argument, <a href="https://docs.python.org/3/library/functions.html#vars" rel="nofollow">vars()</a> acts like <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow">locals()</a> . </p>
</blockquote>
<p>see the following example :</p>
<pre><code>&gt;&gt;&gt; def a():
...   print vars()
... 
&gt;&gt;&gt; a()
{}
</code></pre>
<p>As you can see we have not any local variable within function <code>a</code> so vars returns an empty dictionary.</p>
<p>And in your case as a more pythonic way you can create a dictionary of your objects :</p>
<pre><code>d={'a':1,'b': 2,'params' : ['a', 'b']}
example_list : ['a', 'b']
res = {p: d[p] for p in example_list}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems Python makes a closure in dictionary comprehension (say, <code>dictcomp</code>)</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;dictcomp&gt;
KeyError: 'a'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>vars()</code> in the for loop performs as the second code you gave.</p>
<pre><code># come out with {'a': 1, 'b': 2}
res = {p: v for p, v in vars().iteritems() if p in params}
res = {'a': vars()['a'], 'b': vars()['b']}
</code></pre>
<p>We can figure out the new <code>locals/vars</code> within <code>for</code> loop in dict comprehension:</p>
<pre><code>&gt;&gt;&gt; {i: list(vars().viewkeys()) if i == 0 else list(vars().viewvalues()) for i in range(2)}
{0: ['i', '.0'], 1: [1, &lt;listiterator at 0x6fffe458550&gt;]}
&gt;&gt;&gt; {list(vars().viewkeys())[i]: list(vars().viewvalues())[i] for i in range(2)}
{'.0': &lt;listiterator at 0x6fffe458710&gt;, 'i': 0}
</code></pre>
</div>
<span class="comment-copy">You're asking because you're curious, not because you rely on <code>vars()</code>/<code>locals()</code> in your actual programs, right?</span>
<span class="comment-copy">@TigerhawkT3: now after you've asked I'd say solely due to curiosity :)</span>
<span class="comment-copy">What would be the way to fix it if I don't want to go through a multi-line loop?</span>
<span class="comment-copy">The best way to fix it is to avoid messing with <code>vars()</code>/<code>locals()</code> altogether, because they will give you issues such as this one.</span>
<span class="comment-copy">I only use <code>vars()</code> with <code>format</code>: it's just too attractive to write <code>'foo {bar} baz {spam}'.format(**vars())</code> rather than <code>.format(bar=bar,spam=spam)</code>.  But it does go wrong inside a comprehension. @TigerhawkT3 what would you recommend as the Pythonic alternative to my <code>.format(**vars())</code> code?</span>
<span class="comment-copy">How about <code>'foo {} baz {}'.format(bar, spam)</code>? The typing effort is O(n) instead of O(1) (a comma to separate each element instead of an unpacked dictionary) with an intersection at n=8, but it works in a comprehension.</span>
