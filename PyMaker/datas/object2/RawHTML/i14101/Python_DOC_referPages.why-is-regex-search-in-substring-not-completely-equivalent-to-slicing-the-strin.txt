<div class="post-text" itemprop="text">
<p>As the <a href="https://docs.python.org/3.5/library/re.html#re.regex.search" rel="nofollow noreferrer">documentation</a> stated, using <code>regex.search(string, pos, endpos)</code> is not completely equivalent to slicing the string, i.e. <code>regex.search(string[pos:endpos])</code>. It won't do regex matching <em>as if</em> the string is starting from <code>pos</code>, so <code>^</code> does not match the beginning of the <em>substring</em>, but only matches the real beginning of the whole string. However, <code>$</code> matches either the end of the substring or the whole string.</p>
<pre><code>    &gt;&gt;&gt; re.compile('^am').findall('I am falling in code', 2, 12)
    []        # am is not at the beginning
    &gt;&gt;&gt; re.compile('^am').findall('I am falling in code'[2:12])
    ['am']    # am is the beginning
    &gt;&gt;&gt; re.compile('ing$').findall('I am falling in code', 2, 12)
    ['ing']   # ing is the ending
    &gt;&gt;&gt; re.compile('ing$').findall('I am falling in code'[2:12])
    ['ing']   # ing is the ending

    &gt;&gt;&gt; re.compile('(?&lt;= )am').findall('I am falling in code', 2, 12)
    ['am']    # before am there is a space
    &gt;&gt;&gt; re.compile('(?&lt;= )am').findall('I am falling in code'[2:12])
    []        # before am there is no space
    &gt;&gt;&gt; re.compile('ing(?= )').findall('I am falling in code', 2, 12)
    []        # after ing there is no space
    &gt;&gt;&gt; re.compile('ing(?= )').findall('I am falling in code'[2:12])
    []        # after ing there is no space

    &gt;&gt;&gt; re.compile(r'\bm.....').findall('I am falling in code', 3, 11)
    []
    &gt;&gt;&gt; re.compile(r'\bm.....').findall('I am falling in code'[3:11])
    ['m fall']
    &gt;&gt;&gt; re.compile(r'.....n\b').findall('I am falling in code', 3, 11)
    ['fallin']
    &gt;&gt;&gt; re.compile(r'.....n\b').findall('I am falling in code'[3:11])
    ['fallin']
</code></pre>
<p>My questions are... Why is it not consistent between <em>beginning</em> and <em>ending</em> match? Why does using <code>pos</code> and <code>endpos</code> treat the <em>end</em> as the real end, but the <em>start/beginning</em> is not treated as the real start/beginning? </p>
<p>Is there any approach to make using <code>pos</code> and <code>endpos</code> imitate slicing? Because Python <a href="https://stackoverflow.com/a/5722068/1197317">copies string when slicing</a> instead of just reference the old one, it would be more efficient to use <code>pos</code> and <code>endpos</code> instead of slicing when working with big string multiple times.</p>
</div>
<div class="post-text" itemprop="text">
<p>The starting position argument <code>pos</code> is especially useful for doing lexical analysers for example. The performance difference between slicing a string with <code>[pos:]</code> and using the <code>pos</code> parameter might seem insignificant, but it certainly is not so; see for example this bug report in the <a href="https://bitbucket.org/ned/jslex/issues/1/jslex-is-slooow-on-big-javascript-files" rel="nofollow">JsLex lexer</a>. </p>
<p>Indeed, the <code>^</code> matches at the real beginning of the string; or, if <code>MULTILINE</code> is specified, also at the beginning of line; this is also by design so that a scanner based on regular expressions can easily distinguish between <strong>real</strong> beginning of line/beginning of input and just some other point on a line/within the input.</p>
<p>Do note that you can also use the <a href="https://docs.python.org/3/library/re.html#re.regex.match" rel="nofollow"><code>regex.match(string[, pos[, endpos]])</code></a> function to anchor the match to the beginning string <strong>or</strong> at the position specified by <code>pos</code>; thus instead of doing</p>
<pre><code>&gt;&gt;&gt; re.compile('^am').findall('I am falling in code', 2, 12)
[]
</code></pre>
<p>you'd generally implement a scanner as</p>
<pre><code>&gt;&gt;&gt; match = re.compile('am').match('I am falling in code', 2, 12)
&gt;&gt;&gt; match
&lt;_sre.SRE_Match object; span=(2, 4), match='am'&gt;
</code></pre>
<p>and then set the <code>pos</code> to <code>match.end()</code> (which in this case returns 4) for the successive matching operations.</p>
<p>The match must be found starting exactly at the <code>pos</code>:</p>
<pre><code>&gt;&gt;&gt; re.compile('am').match('I am falling in code', 1, 12)
&gt;&gt;&gt; 
</code></pre>
<p>(Notice how the <code>.match</code> is anchored at the beginning of the input as if by implicit <code>^</code> but not to the end of the input; indeed this is often a source of errors as people believe the match has both implicit <code>^</code> and <code>$</code> - Python 3.4 added the <a href="https://docs.python.org/3/library/re.html#re.regex.fullmatch" rel="nofollow"><code>regex.fullmatch</code></a> that does this)</p>
<hr/>
<p>As for why the <code>endpos</code> parameter is not consistent with the <code>pos</code> - that I do not know exactly, but it also makes some sense to me, as in Python 2 there is no <code>fullmatch</code> and there anchoring with <code>$</code> is the only way to ensure that the entire span must be matched.</p>
</div>
<div class="post-text" itemprop="text">
<p>This sounds like a bug in Python, but if you want to do slice by reference instead of copying the strings you can use the Python builtin <code>buffer</code>.</p>
<p>For example:</p>
<pre><code>s = "long string" * 100
buf = buffer(s)
substr = buf([5:15])
</code></pre>
<p>This creates a substring without copying the data, so should allow for efficient splitting of large strings.</p>
</div>
<span class="comment-copy">Very strange, it seems that the new regex module has the same behaviour.</span>
<span class="comment-copy">It looks worth a bug report to python: <a href="http://bugs.python.org/" rel="nofollow noreferrer">bugs.python.org</a></span>
<span class="comment-copy">@ArminRigo But the documentation told it, so it might be a "feature" :)</span>
<span class="comment-copy">This is consistent with what the documentation says (it says that using <code>endpos</code> is equivalent to slicing). It is however very weird behaviour but I suspect that a bug report would be rejected on the grounds that changing this would break backwards compatibility.</span>
<span class="comment-copy">A different point of view is that the start "pos" argument is meant for doing multiple search() to locate several matches in a left-to-right manner.  The "endpos" on the other hand is meant to pretend the string is really sliced to this length.  I suppose it is consistent with the fact that there is no "search_rightmost()" function to do right-to-left multiple search.</span>
<span class="comment-copy">Nice info about <code>buffer</code>, unfortunately it is not available in Python 3.</span>
<span class="comment-copy">@BornToCode: Unfortunately, I haven't managed to get the Python3 replacement <code>memoryview</code> to work properly with string slices. I thought I'd mention buffer anyway because there are still many Python2 users, and the question didn't specify a version.</span>
<span class="comment-copy">I'd be careful about making assumptions about the relationship between strings and buffers.  The latter are both byte-oriented, while strings (and regexes) operate on full Unicode, especially in Python3.  So, the slice <code>s[2:4]</code> refers to two <i>characters</i>, however they may be represented as 3 to 6 <i>bytes</i>.  That means you need to be careful about assuming you can do raw memory operations on strings.  This suggests that the original poster should consider the big picture a bit more, and consider an algorithmic solution rather than delving too deep into micro-efficiencies of python code.</span>
