<div class="post-text" itemprop="text">
<p>What is the difference between <code>for line in fp</code> and <code>for line in fp.readlines()</code>?</p>
<p></p>
<pre><code>with open(filename, 'r') as fp :
    for line in fp.readlines() :

#AND

with open(filename, 'r') as fp :
    for line in fp :
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/io.html#io.IOBase.readlines" rel="nofollow"><code>file.readlines()</code></a> <em>“[reads] and [returns] a list of lines from the stream.”</em> So what you get back is a list of every line. As such, the whole file is read into the memory and then split into lines.</p>
<p>The documentation already says this:</p>
<blockquote>
<p>Note that it’s already possible to iterate on file objects using <code>for line in file: ...</code> without calling <code>file.readlines()</code>.</p>
</blockquote>
<p>So unless you have an actual need to get all lines as a list, don’t use <code>readlines</code>. Instead iterate over the file directly, because <a href="https://docs.python.org/3/library/io.html#io.IOBase" rel="nofollow">IOBase</a>, which is the base type for all file handlers, implements the iterator protocol:</p>
<blockquote>
<p><code>IOBase</code> (and its subclasses) supports the iterator protocol, meaning that an <code>IOBase</code> object can be iterated over yielding the lines in a stream. Lines are defined slightly differently depending on whether the stream is a binary stream (yielding bytes), or a text stream (yielding character strings). See <a href="https://docs.python.org/3/library/io.html#io.IOBase.readline" rel="nofollow"><code>readline()</code></a> below.</p>
</blockquote>
<p>Using the iterator protocol has the benefit that the file will not be read completely into the memory. Instead, the file stream will be consumed iteratively and give you one line after another without having all the other contents of the file in the memory. So this works very well even for very large files.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>fp</code> - is the file object itself , you can iterate over them to get the lines in the file.</p>
<p>Example -</p>
<pre><code>&gt;&gt;&gt; f = open('test.csv','r')
&gt;&gt;&gt; f
&lt;_io.TextIOWrapper name='test.csv' mode='r' encoding='cp1252'&gt;
</code></pre>
<p>You can only iterate over them , you cannot access a certain line in the file directly without using <code>seek()</code> or such function.</p>
<p><code>fp.readlines()</code> - this returns the list of all lines in the file, when you iterate over this , you are iterating over the list of lines.</p>
<p>Example -</p>
<pre><code>&gt;&gt;&gt; f = open('test.csv','r')
&gt;&gt;&gt; lines = f.readlines()
&gt;&gt;&gt; lines
['order_number,sku,options\n', '500,GK-01,black\n', '499,GK-05,black\n', ',,silver\n', ',,orange\n', ',,black\n', ',,blue']
</code></pre>
<p>Here , you can get the 2nd line in the file using <code>lines[1]</code> , etc.</p>
<p>Usually if the requirement is to just iterate over the lines in the file, its better to use the <code>file</code> directly, since creating a list of lines and then iterating over them would cause unnecessary overhead. </p>
</div>
<span class="comment-copy">One iterates over the file itself, the other reads the whole file into a list then iterates over the list.</span>
<span class="comment-copy"><code>for line in fp</code> reads just one line at a time (it's an iterator), while <code>for line in fp.readlines()</code> reads the entire file into memory.</span>
<span class="comment-copy">@tobias_k what happens if reading a big enough file using <code>fp.readlines()</code>?</span>
<span class="comment-copy">What will happen if reading a big enough file using <code>fp.readlines()</code>?</span>
<span class="comment-copy">@SparkandShine Worst case, your computer won’t have enough memory to place the contents in. But even before that, you would want to avoid putting too much stuff into the memory that you don’t end up needing. So if you don’t need to process the whole file at once, you probably shouldn’t read it completely into the memory. (And if you need to process it as a whole, you may more likely use <code>.read()</code> to get a single string—which you could for example use regular expressions on).</span>
