<div class="post-text" itemprop="text">
<p>I'm pretty new to Python (and programming in general). I was wondering, since lambda and functions are very similar, when is it proper to use which and what are the differences between them?</p>
<p>The reason I'm asking is I've only seen lambda used for very basic and simple programs, such as:</p>
<pre><code>sq = lambda x: x**2 
print(sq(25))
</code></pre>
<p>While functions can be much more complicated like having multiple parameters, different looping types, if/else, recursive, calling another function (composition, I think), etc. </p>
<p>I know you can call a function inside a lambda like:</p>
<pre><code>def turnUppercase(n):
    return n.upper()

a = lambda x: turnUppercase(x)
print(a('Cookie'))
</code></pre>
<p>That example is pointless, but still... I've never tested the limits of lambda by trying other things.</p>
<p>What are the limits of lambda? How can you extend the functionalities of lambdas (if only to impress people) to match that of functions? (Calling a function inside lambda, calling another lambda, loops inside, and so on). </p>
<p>Note I'm asking about Python 3.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>A lambda is a nameless function. In python, it has to fit in one line. It's mostly useful only when you're calling a function that takes another function as an argument. </p>
<p>Example:</p>
<pre><code>listOfLists.sort(key=lambda x:x[1]) #Sort list of lists by second element
</code></pre>
<p>(see <a href="https://docs.python.org/3/howto/sorting.html#key-functions" rel="nofollow">sorting: Key Functions</a>. Probably the most common valid use of lambdas)</p>
<p>You can do a lot of stupid stuff in lambdas (check out any code golf written in python) but it's generally recommended to keep them simple if you're going to use them in Actually Maintained Code. </p>
<blockquote>
<p>While functions can be much more complicated like having multiple parameters, different looping types, if/else, recursive, calling another function (composition, I think), etc.</p>
</blockquote>
<p>Incidentally, I think the only one of these you can't do in a lambda is recursion.</p>
<p>Multiple parameters: <code>lambda x,y: x**2+y**2</code></p>
<p>Loops (technically): <code>lambda x: [subprocess.call('pip install --upgrade ' + dist.project_name, shell=True) for dist in pip.get_installed_distributions()]</code> (and yes I know I'm a horrible person)</p>
<p>If/else: <code>lambda x: "Blue" if x &gt; 1000 else "Orange"</code></p>
<p>And as for what you can't do in lambdas...uh, keyword arguments? *args? Any bit of complexity without your code looking like a drunk cat wandered by and hit parens, square brackets and curly brackets randomly?</p>
<p>I think the general rule of "If your boss came up to you and asked the question 'Why is this a lambda' and you can answer immediately AND explain what the lambda does, you might be justified in using a lambda. Otherwise, it's better to err on the side of not using one."</p>
</div>
<span class="comment-copy">Do you plan on assigning it to a name? Use a function (<code>def</code>). Otherwise use <code>lambda</code></span>
<span class="comment-copy">You can assign a lambda to a name too...</span>
<span class="comment-copy">@Navith I don't think name assignment is really the defining thing as you can do <code>my_fun = lambda x: x + 1</code> for example and that's the same as <code>def my_fun(x): return x +1</code>. Really it's just a matter of convenience and readability though lambdas are limited in what you can express: <a href="https://docs.python.org/3.1/reference/expressions.html#lambda" rel="nofollow noreferrer">docs.python.org/3.1/reference/expressions.html#lambda</a>. In particular they can't contain statements</span>
<span class="comment-copy">You can assign a name to it, but if you're going to then what you really want is to make a function with <code>def</code>.</span>
<span class="comment-copy"><code>operator.itemgetter</code> for your first example</span>
<span class="comment-copy">In short functions are more often used than lambdas and unless it's really simple one-line codes, use functions instead of lambdas.</span>
