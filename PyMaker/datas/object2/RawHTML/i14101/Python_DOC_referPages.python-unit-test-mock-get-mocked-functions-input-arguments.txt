<div class="post-text" itemprop="text">
<p>I want a unit test to assert that a variable <code>action</code> within a function is getting set to its expected value, the only time this variable is used is when it is passed in a call to a library. </p>
<pre><code>Class Monolith(object):
    def foo(self, raw_event):
        action =  # ... Parse Event
        # Middle of function
        lib.event.Event(METADATA, action)
        # Continue on to use the build event.
</code></pre>
<p>My thought was that I could mock <code>lib.event.Event</code>, and get its input arguments and assert they are of specific value. </p>
<p>&gt;Is this not how mocks work? The mock documentation frustrates me with its inconsistency, half-examples, and plethora of examples that are not related to what I want to do.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use patch decorator and then call <code>assert_called_with</code> to that mocked object like this:</p>
<p>If you have this structure:</p>
<pre><code>example.py
tests.py
lib/__init__.py
lib/event.py
</code></pre>
<p>And the content of <code>example.py</code> is:</p>
<pre><code>import lib

METADATA = 'metadata_example'

class Monolith(object):

    def foo(self, raw_event):
        action =  'action_example' # ... Parse Event
        # Middle of function
        lib.event.Event(METADATA, action)
        # Continue on to use the build event.
</code></pre>
<p>And the content of <code>lib/event.py</code> is:</p>
<pre><code>class Event(object):

    def __init__(self, metadata, action):
        pass
</code></pre>
<p>The code of <code>tests.py</code> should be like:</p>
<pre><code>import mock
import unittest

from lib.event import Event
from example import Monolith


class TestExample(unittest.TestCase):

    @mock.patch('lib.event.Event')
    def test_example1(self, event_mocked):
        # Setup
        m = Monolith()

        # Exercise
        m.foo('raw_event')

        # Verify
        event_mocked.assert_called_with('metadata_example', 'action_example')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>call_args</code> or <code>call_args_list</code> as well.</p>
<p>A quick example would look like:</p>
<pre><code>class TestExample(unittest.TestCase):

    @mock.patch('lib.event.Event')
    def test_example1(self, event_mocked):
        args, kwargs = event_mocked.call_args
        self.assertEqual(args, ['metadata_example', 'action_example'])
</code></pre>
<p><br/>
I just quickly written this example for somebody who might need it - I have not actually tested this so there might be minor bugs.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to access arguments directly, how about this?  A little redundant though...
See <a href="https://docs.python.org/3.6/library/unittest.mock.html#unittest.mock.call.call_list" rel="nofollow noreferrer">https://docs.python.org/3.6/library/unittest.mock.html#unittest.mock.call.call_list</a></p>
<pre><code>import mock
import unittest

from lib.event import Event
from example import Monolith


class TestExample(unittest.TestCase):

    @mock.patch('lib.event.Event')
    def test_example1(self, event_mocked):
        # Setup
        m = Monolith()

        # Exercise
        m.foo('raw_event')

        # Verify
        name, args, kwargs = m.mock_calls[0]
        self.assertEquals(name, "foo")
        self.assertEquals(args, ['metadata_example', 'action_example'])
        self.assertEquals(kwargs, {})
</code></pre>
</div>
<span class="comment-copy">where have u used mock? you can mock <code>lib.event.Event</code> and assert</span>
<span class="comment-copy">in retrospect, this the patch and mock approach seems so much more natural/defacto now then it did then</span>
<span class="comment-copy">what if i want to get the arguments passed to the mock as a dictionary?</span>
<span class="comment-copy">@dopatraman You can either use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args" rel="nofollow noreferrer"><code>call_args</code></a> or <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args_list" rel="nofollow noreferrer"><code>call_args_list</code></a>.</span>
<span class="comment-copy">@CraigAnderson Can you post that as an answer?</span>
<span class="comment-copy">@StevenVascellaro It's not really an answer to the original question, is it? I've proposed an edit to this answer to illustrate how they might be used.</span>
