<div class="post-text" itemprop="text">
<p>I am trying my hand at writing my first <code>decorator</code> but am a little lost. I would like this <code>decorator</code> to check that a <code>request</code> came from a particular address before executing the main function.</p>
<p>At the moment I have:</p>
<pre><code>def check_referrer(url):
    def func_wrapper():
        if request.referrer == url:
            return render_template('index.html', error=None)
        else:
            return render_template('login.html', error="some_error")
    return func_wrapper

@app.route('/index', methods = ['GET'])
@check_referrer("/venue/login")
def index():
    return
</code></pre>
<p><strong>@app.route /venue/login</strong> (this code has been simplified)</p>
<pre><code>@app.route('/venue/login', methods=['GET', 'POST'])
def login():

    error = None

    if login_valid():
        return redirect(url_for('index'))                                                                                   
    else:
        error = 'Invalid Credentials. Please try again.'

    return render_template('login.html', error=error)
</code></pre>
<p>1) I am sure there are a few issues with what I am doing but I first need to understand why I am getting the error:</p>
<pre><code>TypeError: func_wrapper() takes no arguments (1 given)
</code></pre>
<p>I thought I was only passing an <code>argument</code> to <code>check_referrer</code>.</p>
<p>2) Are my <code>return</code> statements correct?</p>
<p>Any help would be greatly appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider using <a href="https://flask-login.readthedocs.org/" rel="nofollow">Flask-Login</a> instead to handle authentication and redirect if the user is not logged in.  (Or closely examine how it works.)  It handles this much more robustly than the function you've written.</p>
<hr/>
<p>The function you've written is not a decorator, and has many other issues.  First, it needs to be properly structured.  It needs 3 layers:</p>
<ol>
<li>Layer 1 function takes the the url parameter and produces a decorator.</li>
<li>Layer 2 function decorates a function and returns a wrapped function.</li>
<li>Layer 3 is the decorated view.</li>
</ol>
<p><code>request.referrer</code> contains the entire url, not just the path matching a route.  Use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse" rel="nofollow"><code>urlparse</code></a> to get the path.  There is no guarantee that a client's browser will send a referrer, or the correct referrer, so you should not rely on this value.</p>
<p>The decorated function needs to accept arbitrary arguments that may be passed to the view.  The decorated function should properly wrap the original function by using <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow"><code>wraps</code></a>.</p>
<p>It is not a good idea to just render different templates from the same view.  Rather than rendering <code>index.html</code> or <code>login.html</code>, you should be redirecting to the relevant views.  If you need to pass messages along with the redirect, put them in the <code>session</code>.</p>
<pre><code>from functools import wraps
from urllib.parse import urlparse
# or from urlparse import urlparse for py2
from flask import request, session, redirect

def check_referrer(path):
    def decorator(f):
        @wraps(f)
        def decorated(*args, **kwargs):
            if not request.referrer:
                session['error'] = 'no referrer'
                return redirect('login')

            referrer_path = urlparse(request.referrer).path

            if referrer_path != path:
                session['error'] = 'expected referrer {!r}'.format(path)
                return redirect('login')

             return f(*args, **kwargs)

        return decorated

    return decorator
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The key to understanding python decorator is this:</p>
<pre><code>@decorator
def func():
    pass
</code></pre>
<p>is equivalent with:</p>
<pre><code>func = decorator(func)
</code></pre>
<p>Now you can understand why your code does not work:<code>@check_referrer("/venue/login")</code> returns a function <code>func_wrapper</code> that takes no argument, so <code>func_wrapper</code> can not be a decorator.</p>
<p>You can define a decorator that take no arguments with 2 levels of inner functions. To make a decorator that takes argument(s), you need another level of inner function, as davidism's code shows.</p>
<p>Here is what happens:</p>
<pre><code>decorator = check_referrer(url) 
decorated = decorator(index) 
index = decorated
</code></pre>
</div>
<span class="comment-copy"><code>func_wrapper</code> must accept the function being wrapped as argument. <code>def func_wrapper(f):</code> Maybe <a href="http://www.brianholdefehr.com/decorators-and-functional-python" rel="nofollow noreferrer">this</a> will help.</span>
