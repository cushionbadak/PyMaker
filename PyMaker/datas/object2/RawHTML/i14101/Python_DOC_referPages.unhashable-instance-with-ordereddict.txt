<div class="post-text" itemprop="text">
<p>I tried searching internet but could not find the meaning of hashable.</p>
<p>When they say objects are <code>hashable</code> or <code>hashable objects</code> what does it mean?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="http://docs.python.org/2/glossary.html" rel="noreferrer">Python glossary</a>:</p>
<blockquote>
<p>An object is hashable if it has a hash value which never changes during its lifetime (it needs a <code>__hash__()</code> method), and can be compared to other objects (it needs an <code>__eq__()</code> or <code>__cmp__()</code> method). Hashable objects which compare equal must have the same hash value.</p>
<p>Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.</p>
<p>All of Python’s immutable built-in objects are hashable, while no mutable containers (such as lists or dictionaries) are. Objects which are instances of user-defined classes are hashable by default; they all compare unequal, and their hash value is their <code>id()</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>All the answers here have good working explanation of hashable objects in python, but I believe one needs to understand the term Hashing first.</p>
<p><strong>Hashing</strong> is a concept in computer science which is used to create high performance, pseudo random access data structures where large amount of data is to be stored and accessed quickly.</p>
<p>For example, if you have 10,000 phone numbers, and you want to store them in an array (which is a sequential data structure that stores data in contiguous memory locations, and provides random access), but you might not have the required amount of contiguous memory locations.</p>
<p>So, you can instead use an array of size 100, and use a hash function to map a set of values to same indices, and these values can be stored in a linked list. This provides a performance similar to an array. </p>
<p>Now, a hash function can be as simple as dividing the number with the size  of the array and taking the remainder as the index.</p>
<p>For more detail refer to <a href="https://en.wikipedia.org/wiki/Hash_function" rel="noreferrer">https://en.wikipedia.org/wiki/Hash_function</a></p>
<p>Here is another good reference: <a href="http://interactivepython.org/runestone/static/pythonds/SortSearch/Hashing.html" rel="noreferrer">http://interactivepython.org/runestone/static/pythonds/SortSearch/Hashing.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Anything that is not mutable (mutable means, likely to change) can be hashed. Besides the hash function to look for, if a class has it, by eg. <code>dir(tuple)</code> and looking for the <code>__hash__</code> method, here are some examples</p>
<pre><code>#x = has(set([1,2])) #set unhashable
x = hash(frozenset([1,2])) #hashable
#x = hash(([1,2], [2,3])) #tuple of mutable objects, unhashable
x = hash((1,2,3)) #tuple of immutable objects, hashable
#x = hash()
#x = hash({1,2}) #list of mutable objects, unhashable
#x = hash([1,2,3]) #list of immutable objects, unhashable
</code></pre>
<p><strong>List of immutable types:</strong></p>
<pre><code>int, float, decimal, complex, bool, string, tuple, range, frozenset, bytes
</code></pre>
<p><strong>List of mutable types:</strong></p>
<pre><code>list, dict, set, bytearray, user-defined classes
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In my understanding according to Python glossary, when you create a instance of objects that are hashable, an unchangeable value is also calculated according to the members or values of the instance. 
For example, that value could then be used as a key in a dict as below:</p>
<pre><code>&gt;&gt;&gt; tuple_a = (1,2,3)
&gt;&gt;&gt; tuple_a.__hash__()
2528502973977326415
&gt;&gt;&gt; tuple_b = (2,3,4)
&gt;&gt;&gt; tuple_b.__hash__()
3789705017596477050
&gt;&gt;&gt; tuple_c = (1,2,3)
&gt;&gt;&gt; tuple_c.__hash__()
2528502973977326415
&gt;&gt;&gt; id(a) == id(c)  # a and c same object?
False
&gt;&gt;&gt; a.__hash__() == c.__hash__()  # a and c same value?
True
&gt;&gt;&gt; dict_a = {}
&gt;&gt;&gt; dict_a[tuple_a] = 'hiahia'
&gt;&gt;&gt; dict_a[tuple_c]
'hiahia'
</code></pre>
<p>we can find that the hash value of tuple_a and tuple_c are the same since they have the same members. 
When we use tuple_a as the key in dict_a, we can find that the value for dict_a[tuple_c] is the same, which means that, when they are used as the key in a dict, they return the same value because the hash values are the same.
For those objects that are not hashable, the method <strong>hash</strong> is defined as None:</p>
<pre><code>&gt;&gt;&gt; type(dict.__hash__) 
&lt;class 'NoneType'&gt;
</code></pre>
<p>I guess this hash value is calculated upon the initialization of the instance, not in a dynamic way, that's why only immutable objects are hashable. Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let me give you a working example to understand the hashable objects in python. I am taking 2 Tuples for this example.Each value in a tuple has a unique Hash Value which never changes during its lifetime. So based on this has value, the comparison between two tuples is done. We can get the hash value of a tuple element using the Id().</p>
<p><img alt="Comparison between 2 tuples" src="https://i.stack.imgur.com/fZEWB.png"/><img alt="Equivalence between 2 tuples" src="https://i.stack.imgur.com/siL01.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>In python it means that the object can be members of sets in order to return a index. That is, they have unique identity/ id.</p>
<p>for example, in python 3.3:</p>
<p>the data structure Lists are not hashable but the data structure Tuples are hashable. </p>
</div>
<span class="comment-copy">See the documentation on <a href="http://docs.python.org/3/glossary.html#term-hashable" rel="nofollow noreferrer">hashable</a> and the <a href="http://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer"><code>__hash__()</code> method</a>.</span>
<span class="comment-copy">that searches for hasable objects or something, but none of the links explains what hashable actually means</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/2671376/hashable-immutable">Hashable, immutable</a></span>
<span class="comment-copy">if it has <code>hash value</code> now what is hash value. can you give some example</span>
<span class="comment-copy">@user55711: Here, the hash value is the result of calling <code>__hash__()</code>. More generally, see <a href="http://en.wikipedia.org/wiki/Hash_function" rel="nofollow noreferrer">en.wikipedia.org/wiki/Hash_function</a></span>
<span class="comment-copy">I wonder why Python needs <code>__eq__</code> if it has <code>__hash__</code>.</span>
<span class="comment-copy">@TorstenBronger: Because two unequal objects can hash to the same value. In other words, hashing is lossy.</span>
<span class="comment-copy">In python-2.7.12, the result of <code>id(object)</code> is 16x the result of <code>object.__hash__()</code>. So the glossary excerpt is incorrect for this version - the hash value is not <code>id()</code>, but it is derived from it (as indeed noted in the updated docs for python 2.7.12).</span>
<span class="comment-copy">That's an interesting perspective on hashing. I haven't thought of it in that way.</span>
<span class="comment-copy">@yuvgin hash-tables are often used to implement sparse-arrays (i.e. the example given here).</span>
<span class="comment-copy">I recently found out that the <code>Ellipsis</code> is also an immutable type and can be used as a key for a <code>dict</code>.</span>
<span class="comment-copy">Even user-defined classes can be used but only their names not instances. E.g.: <code>hash(MyClass)</code></span>
<span class="comment-copy">@GáborFekete instances of user-defined classes are hashable if their classes implement <code>__hash__</code> and <code>__eq__</code>. Moreover, all user-defined classes implement these methods (and are thus hashable), because they inherit the methods from <code>object</code> (the universal base-class).</span>
<span class="comment-copy">this would be more useful as text rather than an image</span>
<span class="comment-copy">it's a wrong answer. id() shows the referenced address in a memory, it's not a hash value. In order to get hash use __hash__() function. e.g: t1.__hash__()</span>
<span class="comment-copy">@ascentman Don't hesitate to edit an answer that you believe is wrong. Your edit will be peer-reviewed and, if accepted, you get a small score reward for it.</span>
<span class="comment-copy">The hash is not the same as the <code>id</code>, which is (approximately) the address of the object in memory.</span>
