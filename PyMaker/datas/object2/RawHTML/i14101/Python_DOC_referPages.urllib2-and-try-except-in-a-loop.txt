<div class="post-text" itemprop="text">
<p>I am trying to learn about exception handling in python by writing an International Space Station tracker in Python.</p>
<p>I have read <a href="https://docs.python.org/2/tutorial/errors.html" rel="nofollow">https://docs.python.org/2/tutorial/errors.html</a> and have found <a href="https://stackoverflow.com/questions/666022/what-errors-exceptions-do-i-need-to-handle-with-urllib2-request-urlopen#">Handle errors with urllib2</a> useful, but I am struggling to understand how to have code continue to loop despite an exception being thrown and I'm not sure how to research this further.</p>
<p>I have this working code. It runs for days on my Raspberry Pi as part of a bigger program that makes a green light come on when ISS is overhead. Eventually though, an error is caused and the program halts. I'm looking for a way for the program to continue even if an error is called. I.e. This function is called every 10 seconds, but if there is an error I want the program to simply try again after 10 seconds while noting the error.</p>
<pre><code>def issPosition(n):
    try:
        req = urllib2.Request("http://api.open-notify.org/iss-now.json")
        response = urllib2.urlopen(req)
        obj = json.loads(response.read())
        if n == "lat":
            return obj['iss_position']['latitude']
        elif n == "long":
            return obj['iss_position']['longitude']

    except urllib2.HTTPError, e:
        GPIO.output(24,True)
        time.sleep(0.1)
        GPIO.output(24,False)
        print 'HTTPError = ' + str(e.code)

    except urllib2.URLError, e:
        GPIO.output(26,True)
        time.sleep(0.1)
        GPIO.output(26,False)
        print 'URLError = ' + str(e.reason)

    except httplib.HTTPException, e:
        GPIO.output(26,True)
        time.sleep(0.1)
        GPIO.output(26,False)
        print 'HTTPException'

    except Exception:
        GPIO.output(26,True)
        time.sleep(0.1)
        GPIO.output(26,False)
        import traceback
        print 'generic exception: ' + traceback.format_exc() 
</code></pre>
<p>Pointers would be appreciated. Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not seeing any loop in your code . Are you calling issPosition from a loop?
If yes, don't handle exceptions in this method or re just re-throw it. And handle the exception in your loop and continue execution.
For example:</p>
<pre><code>while(True):
  try:
    result = issPosition(12334584)
    # Use your result here ....
  except:
    # Log and continue
    continue
</code></pre>
<p>** This will run for ever. You may want to add extra logic to end the loop eventually.</p>
</div>
<span class="comment-copy">sleep for ten seconds and log the error</span>
<span class="comment-copy">what's the error that is not caught?</span>
<span class="comment-copy">I would refractor your code so you Dont Repeat Yourself (<b>DRY</b>).  Several lines are repeated and it will help to put it in a function so if you want to change sleep time, you change it in one place rather than 3. Also, you can still pass in e as an Exception in the last except block and cast e to a str. Finally, by handling the error, It will just continue. There is no other thing you need to do. There is a reason why its frowned upon to do try/except with out a specific error.</span>
<span class="comment-copy">I am not seeing any loop in your code . Are you calling issPosition from a loop? If yes , don't handle the exceptions in this method or simply re throw it. And let the loop handle the exception and continue the execution.</span>
<span class="comment-copy">are you using python 2 or 3? maybe you can use <a href="https://docs.python.org/3/library/contextlib.html" rel="nofollow noreferrer">this</a>. search for suppress</span>
<span class="comment-copy">Why has this been down voted? Exploring "continue" seems like a good step?</span>
<span class="comment-copy">@Russell Probably because it bad practice to do a try:/except: like that. Generally, you want to catch only errors you can handle. What happens if you are iterating over a NoneType and that causes issues later on the program where it destroys something else? Normally that will raise a NoneType Error, but this way it does nothing. Also how do you quit this? You can't do an keyboard interrupt, the except will catch that. You could add extra logic to end the loop but that'll be a pain.</span>
<span class="comment-copy">My answer was to give op an idea to solve the problem.  Any solution will involve something similar you may choose to handle exception selectively.  And above all if the requirement is to run for ever, we have to just do that.  Everything else is just talk.</span>
<span class="comment-copy">@gipsy Or you can set it to run as a deamon (Which is the proper way of doing this kind of stuff) or even a cron script (which will run every 1 minute at the earliest.)</span>
<span class="comment-copy">Just genuinely curious.  What will happen to the deamon on exception?  Don't you need the similar continue semantic in ur deamon as well? . But you made me thinking and I think the best solution for his raspberry py app is to run it from cron every minute or so.</span>
