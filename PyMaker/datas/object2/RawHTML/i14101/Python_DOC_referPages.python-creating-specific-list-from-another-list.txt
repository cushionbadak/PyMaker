<div class="post-text" itemprop="text">
<p>Learning python I encountered the following problem. I already have some list with integer numbers (for example <code>initial_list</code>). Then I'm trying to create list (for example <code>result</code>) with following numbers pattern:</p>
<pre><code>result[len(result) - 1] = 1
result[i] = result[i + 1] * initial_list[i]
</code></pre>
<p>Example:</p>
<pre><code>initial_list = [2, 2, 2, 2, 3, 2, 2]
result = [192, 96, 48, 24, 12, 4, 2, 1]
</code></pre>
<p>Here is my first implementation:</p>
<pre><code>import numpy as np
initial_list = [2, 2, 2, 2, 3, 2, 2]
result = [1]
for number in reversed(initial_list):
    result.append(result[-1] * number)
result = np.array(result[::-1])
</code></pre>
<p>Here is my second implementation:</p>
<pre><code>import numpy as np
initial_list = [2, 2, 2, 2, 3, 2, 2]
result = np.ones(len(initial_list) + 1)
for i, number in enumerate(reversed(initial_list)):
    result[len(result) - i - 2] = result[len(result) - i - 1] * number
</code></pre>
<p>I guess second one is much better because it does not contain append method and initialize list with concrete size. Also <code>result = np.ones(len(initial_list) + 1)</code> consists with float point number which is not correct. I wonder whether there is a simpler version of the implementation of this algorithm. <br/></p>
<p>After that algorithm I'm creating <code>OrderedDict</code>:</p>
<pre><code>from collections import OrderedDict
ordered_dict = OrderedDict(zip(other_list, result))
</code></pre>
<p>Maybe I can reverse <code>result</code> list during creating <code>OrderedDict</code> for <code>O(1)</code> "on fly" like <code>reversed</code> works in for looping, so that I can simplify algorithm above.</p>
</div>
<div class="post-text" itemprop="text">
<p>If <a href="http://www.numpy.org/" rel="nofollow">numpy</a> is an option, you can do it with <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.cumprod.html" rel="nofollow"><code>cumprod</code></a>:</p>
<pre><code>import numpy as np

initial_list = [2, 2, 2, 2, 3, 2, 2]

&gt;&gt; np.append(np.cumprod(initial_list[:: -1])[:: -1], [1])
array([192,  96,  48,  24,  12,   4,   2,   1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow"><code>itertools.accumulate</code></a> and <a href="https://docs.python.org/2/library/operator.html#operator.mul" rel="nofollow"><code>operator.mul</code></a></p>
<pre><code>&gt;&gt;&gt; from itertools import accumulate
&gt;&gt;&gt; from operator import mul
&gt;&gt;&gt; a = [2, 2, 2, 2, 3, 2, 2]
&gt;&gt;&gt; list(accumulate(reversed(a + [1]), mul))[::-1]
[192, 96, 48, 24, 12, 4, 2, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why can't you just do</p>
<pre><code>result = [0] * len(initial_list)
result[-1] = 1
for i in xrange(len(result) - 2, -1, -1):
  result[i] = result[i + 1] * initial_list[i]
</code></pre>
</div>
<span class="comment-copy">what is the algorithm supposed to do?</span>
<span class="comment-copy">@PadraicCunningham It should create list from initial list with patter that mentioned above:<code>result[len(result) - 1] = 1, result[i] = result[i + 1] * initial_list[i]</code></span>
<span class="comment-copy">I think a list comprehension would be a good idea, but I'm having trouble figuring out your algorithm. For instance, <code>result[len(result) - 1] = 1</code> only makes sense if <code>result</code> has some data in it. What does <code>result</code> look like at the beginning?</span>
<span class="comment-copy">@Quill Maybe I misunderstood? I read the <i>"I wonder whether there is a simpler version of the implementation of this algorithm."</i> part specifically and thought that it would make more sense there since it seems to be a problem of code optimization. In the <a href="http://codereview.stackexchange.com/help/on-topic">on-topic section</a>, it seems to say that <i>"Best practices and design pattern usage"</i> are on-topic <i>"for feedback on a specific working piece of code from your project"</i>. Clearly, you would know better than me what is off-topic, but I just don't understand why you believe so.</span>
<span class="comment-copy">You'd be correct, it seems, thank for you reading the on-topic section, and help center guidelines. OP, feel free to take this to Code Review if you please.</span>
<span class="comment-copy">numpy is definitely an option, they are using it ;)</span>
<span class="comment-copy">@PadraicCunningham :-) Right you are. Thanks!</span>
<span class="comment-copy">@AmiTavory In a single line, that is what I need. Thanks!</span>
<span class="comment-copy">Nice combination of itertools + operator.</span>
