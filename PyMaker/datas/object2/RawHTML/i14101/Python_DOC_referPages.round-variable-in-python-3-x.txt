<div class="post-text" itemprop="text">
<p>I have an application that  generates these values:</p>
<pre><code>[ -2.00000000e+00 -1.00000000e+00 -1.00929366e-16 1.00000000e+00]
</code></pre>
<p>How can I round the number <code>-1.00929366e-16</code> to <code>0</code>? what I want is if there is an x number of zeros from the right point, it substituted that value with zero.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest solution is just using the built in mathematical function</p>
<pre><code>round(float)
</code></pre>
<p>Which will return the integer component of the float if the 10ths decimal place is less than 5 and will return one more than that if the 10ths decimal place is greater than or equal to 5.</p>
<p>This should be all that you require instead of counting zeros.</p>
<p>*Note: Since you appear to have a list of values, use </p>
<pre><code>[round(each_number) for each_number in list_of_floats]
</code></pre>
<p>to apply the rounding to each of the values.</p>
<p>**Note if you are going to be applying any mathematical operations to these numbers which require any measurement of variance, I would recommend that you do not round them as you usually want to avoid having an output of 0 from calculating, say, the standard deviation if you're going to be using it in a later function (This has caused me many headaches and required me to actually include minor variation in my floats to avoid errors in later calculations).</p>
<p>For more information see: <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow">https://docs.python.org/3/library/functions.html#round</a> </p>
<p>(Recommended by Deja Vu)</p>
</div>
<div class="post-text" itemprop="text">
<p>Correct me if I'm wrong: you don't just want to round the value. You want to do so only if "there is a number of zeroes from the right point". </p>
<p>Let's say this number is 5. You don't want to round <code>0.001</code>, but you want to round <code>0.000001</code> to 0. And <code>1.000001</code> to 1. Well, you can do so by checking the distance between your number and the nearest integer, like this:</p>
<pre><code>def round_special(n):
    return round(n) if abs(n-round(n)) &lt; 1e-5 else n

print round_special(0.001)
print round_special(0.0001)
print round_special(0.00001)
print round_special(0.000001)
print round_special(1.0000099)

print map(round_special, [0.001, 0.0001, 0.00001, 0.000001, 1.0000099])
</code></pre>
<p>Which yields:</p>
<pre><code>0.001
0.0001
1e-05
0.0
1.0
[0.001, 0.0001, 1e-05, 0.0, 1.0]
</code></pre>
</div>
<span class="comment-copy"><code>round(-1.00929366e-16 )</code></span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#round</a></span>
<span class="comment-copy">Or simply: <code>map(round, list_of_floats)</code>.</span>
<span class="comment-copy">This works as well, but you have to admit that the list comprehension is much easier to read even if you don't know Python. ;)</span>
