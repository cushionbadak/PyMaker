<div class="post-text" itemprop="text">
<p>I want to put this data into one list so i can sort it by timestamp. I tried itertools chain but that didn't really work.
Thank you for your help :)  </p>
<p>I'm very bad at making clear what i want to do so im sorry upfront if this takes some explaning. </p>
<p>If i try a chain i get the value back like this. </p>
<p>I want to display it on the html page like this :</p>
<p>date, name , rating, text (newline)
likes comments </p>
<p>Which would work the way i did it but if i want to sort it by time, it wouldn't work so i tried to think of a way to make it into a sortable list. Which can be displayed. Is that understandable ?  </p>
<p>['Eva Simia', 'Peter Alexander', {'scale': 5, 'value': 5}, {'scale': 5, 'value': 5}, 1, 0, 1, 0]</p>
<p>it should look like this:
['Peter Alexander, scale:5, value:5, 1,0]
['Eva Simia, scale:5, value:5, 1,0]</p>
<pre><code>for i in user:
    name.append(i['name'])

for i in next_level:
    rating_values.append(i['rating'])

for i in comment_values:
    comments_count.append(i['count'])

for i in likes_values:
    likes_count.append(i['count'])

for s in rating_values:
    ratings.append(s['value'])

for s in date:
    ratings.append(s['date'])   

ab = itertools.chain([name], [rating_values], 
                     [comments_count], [likes_values],
                     [comment_values], [date])
list(ab)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Updated after clarification:</strong></p>
<p>The problem as I understand it:</p>
<ul>
<li>You have a dataset that is split into several lists, one list per field.</li>
<li>Every list has the records in the same order. That is, <code>user[x]</code>'s rating value is necessarily <code>rating_values[x]</code>.</li>
</ul>
<p>You need to merge that information into a single list of composite items. You'd use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip()</code></a> for that:</p>
<pre><code>merged = zip(user, next_level, comment_values, likes_values, rating_values, date)

# merged is now [(user[0], next_level[0], comment_values[0], ...), 
#                (user[1], next_level[1], comment_values[1], ...), 
#                ...]
</code></pre>
<p>From there, you can simply sort your list using <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted()</code></a>:</p>
<pre><code>result = sorted(merged, key=lambda i: (i[5], i[0]))
</code></pre>
<p>The <code>key</code> argument must be a function. It is given each item in the list once, and must return the key that will be used to compare items. Here, we build a short function on the fly, that returns the date and username, effectively telling things will be sorted, first by date and if dates are equal, then by username.</p>
<p><strong>[Past answer about <code>itertools.chain</code>, before the clarification]</strong></p>
<pre><code>ab = list(itertools.chain(
    (i['name'] for i in user),
    (i['rating'] for i in next_level),
    (i['count'] for i in comment_values),
    (i['count'] for i in likes_values),
    (i['value'] for i in rating_values),
    (i['date'] for i in date),
))
</code></pre>
<p>The point of using <code>itertools.chain</code> is usually to avoid needless copies and intermediary objects. To do that, you want to pass it iterators.
<code>chain</code> will return an iterator that will iterate through each of the given iterators, one at a time, moving to the next iterator when current stops.</p>
<p>Note every iterator has to be wrapped in parentheses, else python will complain. Do not make it square brackets, at it would cause an intermediary list to be built.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can join list by simply using <code>+</code>.</p>
<pre><code>l = name + rating_values + comments_count + ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>date, rating_values,likes_values,comment_values,next_level,user = (list(t) for t in zip(*sorted(zip(date, rating_values,likes_values,comment_values,next_level,user))))
</code></pre>
</div>
<span class="comment-copy">Please explain why it didn't work? What were you expecting? What did you really get</span>
<span class="comment-copy">Changed really long code line.</span>
<span class="comment-copy">Thank you added an update =) hopefully it is better to understand now =)</span>
<span class="comment-copy">Much better yes. So you have several lists, all of them in the same order, and each list gives data for one field? Like, first user is <code>[user[0], next_level[0], ]</code> and then  second user is <code>[user[1], next_level[1], ...]</code> and so on?</span>
<span class="comment-copy">Yes :))) is that possible ?</span>
<span class="comment-copy">ah  my current list looks like this [user[1], user[2] ..... ] [nextlevel[1] , nextlevel .....]  or like the example above and that is not useful or smart ^^. Like you describe it above is like I want to use it. Make a list like [user[1], next_level[1], timestamp[1] .....] sort list [0,1,2,3] by timestamp for example</span>
<span class="comment-copy">I edited, it should be much closer to what you want.</span>
<span class="comment-copy">isn't that the same as using <code>itertools.chain()</code> which didn't work for the OP?</span>
<span class="comment-copy">@AnandSKumar I was not totally aware what <code>chain()</code> does. You're obviously right!</span>
<span class="comment-copy">hello everyone :) thanks for the quick reply.</span>
<span class="comment-copy">Updated it so i hope it is easier to understand now :)</span>
<span class="comment-copy">Please explain your answer so other readers may understand it.</span>
