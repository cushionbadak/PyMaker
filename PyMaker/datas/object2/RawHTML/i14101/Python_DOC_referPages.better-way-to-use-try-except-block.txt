<div class="post-text" itemprop="text">
<p>I have a requirement to execute multiple Python statements and few of them might fail during execution, even after failing I want the rest of them to be executed.</p>
<p>Currently, I am doing:</p>
<pre><code>try:
    wx.StaticBox.Destroy()
    wx.CheckBox.Disable()
    wx.RadioButton.Enable()
except:
    pass
</code></pre>
<p>If any one of the statements fails, <code>except</code> will get executed and program exits. But what I need is even though it is failed it should run all three statements. </p>
<p>How can I do this in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>for</code> loop over the methods you wish to call, eg:</p>
<pre><code>for f in (wx.StaticBox.Destroy, wx.CheckBox.Disable, wx.RadioButton.Enable):
    try:
        f()
    except Exception:
        pass
</code></pre>
<p>Note that we're using <code>except Exception</code> here - that's generally much more likely what you want than a bare except.</p>
</div>
<div class="post-text" itemprop="text">
<p>If an exception occurs during a <code>try</code> block, the rest of the block is skipped. You should use three separate <code>try</code> clauses for your three separate statements.</p>
<p>Added in response to comment:</p>
<p>Since you apparently want to handle many statements, you could use a wrapper method to check for exceptions:</p>
<pre><code>def mytry(functionname):
    try:
        functionname()
    except Exception:
        pass
</code></pre>
<p>Then call the method with the name of your function as input:</p>
<pre><code>mytry(wx.StaticBox.Destroy)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend creating a context manager class that suppress any exception and the exceptions to be logged. </p>
<p>Please look at the code below. Would encourage any improvement to it.</p>
<pre><code>import sys
class catch_exception:
    def __init__(self, raising=True):
        self.raising = raising

    def __enter__(self):
        pass

    def __exit__(self, type, value, traceback):
        if issubclass(type, Exception):
            self.raising = False

        print ("Type: ", type, " Log me to error log file")
        return not self.raising



def staticBox_destroy():
    print("staticBox_destroy")
    raise TypeError("Passing through")

def checkbox_disable():
    print("checkbox_disable")
    raise ValueError("Passing through")

def radioButton_enable():
    print("radioButton_enable")
    raise ValueError("Passing through")


if __name__ == "__main__":
    with catch_exception() as cm:
        staticBox_destroy()
    with catch_exception() as cm:
        checkbox_disable()
    with catch_exception() as cm:
        radioButton_enable()
</code></pre>
</div>
<span class="comment-copy">How can it possibly run all 3 if any one of them can't run because it failed?</span>
<span class="comment-copy">1. Don't use bare <code>except</code>, <i>at the very least</i> use <code>except Exception</code>. 2. If these statements should be executed (or not) independently, <b>put them in separate <code>try</code> blocks!</b></span>
<span class="comment-copy">@TimCastelijns I guess he means they should all be attempted.</span>
<span class="comment-copy">Are each of the statements (in your actual code) method calls?</span>
<span class="comment-copy">I just took an example as 3 statements. In real time i have more than 12 statements. 12 try except block in program wouldn't look good.</span>
<span class="comment-copy">@Arunkumar In that case, use a wrapper method. See my edit, which I will make in a second.</span>
<span class="comment-copy">@Arunkumar then you need <i>"more than 12"</i> blocks, or to refactor into a loop. You may be able to use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="nofollow noreferrer"><code>contextlib.suppress</code></a> to neaten the code if you're using Python 3.4.</span>
<span class="comment-copy"><code>mytry</code> seems a bit limited; at the very least, allow it to take the errors to suppress as an argument (the default can still be <code>Exception</code>).</span>
<span class="comment-copy">@jonrsharpe Good idea. An exercise for the reader perhaps.</span>
<span class="comment-copy">Oh... <b>wow</b>. Please immediately read <a href="http://stackoverflow.com/editing-help">stackoverflow.com/editing-help</a>, I'm not even touching that.</span>
<span class="comment-copy">I have fixed the formatting. Sorry, using stack for the first time. Thanks for the link.</span>
