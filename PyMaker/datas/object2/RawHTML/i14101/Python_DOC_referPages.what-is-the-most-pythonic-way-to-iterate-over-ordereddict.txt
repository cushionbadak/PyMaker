<div class="post-text" itemprop="text">
<p>I have an OrderedDict and in a loop I want to get index, key and value. 
It's sure can be done in multiple ways, i.e.</p>
<pre><code>a = collections.OrderedDict({…})
for i,b,c in zip(range(len(a)), a.iterkeys(), a.itervalues()):
  …
</code></pre>
<p>But I would like to avoid range(len(a)) and shorten a.iterkeys(), a.itervalues() to something like a.iteritems().
With enumerate and iteritems it's possible to rephrase as</p>
<pre><code>for i,d in enumerate(a.iteritems()):
  b,c = d
</code></pre>
<p>But it requires to unpack inside the loop body. 
Is there a way to unpack in a for statement or maybe a more elegant way to iterate?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use tuple unpacking in <a href="https://docs.python.org/2/reference/compound_stmts.html#the-for-statement" rel="noreferrer"><code>for</code> statement</a>:</p>
<pre><code>for i, (key, value) in enumerate(a.iteritems()):
    # Do something with i, key, value
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; d = {'a': 'b'}
&gt;&gt;&gt; for i, (key, value) in enumerate(d.iteritems()):
...     print i, key, value
... 
0 a b
</code></pre>
<p>Side Note:</p>
<p>In Python 3.x, use <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="noreferrer"><code>dict.items()</code></a> which returns an iterable dictionary view.</p>
<pre><code>&gt;&gt;&gt; for i, (key, value) in enumerate(d.items()):
...     print(i, key, value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>$ python
Python 2.6.6 (r266:84292, Nov 21 2013, 10:50:32) 
[GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2
Type "help", "copyright", "credits" or "license" for more information. 
&gt;&gt;&gt; import collections
&gt;&gt;&gt; a = collections.OrderedDict({'a':'1','b':'2'})
&gt;&gt;&gt; a
OrderedDict([('a', '1'), ('b', '2')])
&gt;&gt;&gt; for i, (k,v) in enumerate(a.iteritems()):
...    print i, k, v
... 
0 a 1
1 b 2
</code></pre>
<p>Is ugly, if you ask me. </p>
<p>I don't know why are you interested in the index.
The idea between dict is that you are to be ignorant of the index.
There is a whole lot of logic behind dict and queues so that we are to be free of indexes.</p>
<p>If you insist in getting the index there is no need to iterate twice.</p>
<p>Let's see what enumerate does to lists: </p>
<pre><code>&gt;&gt;&gt; seasons = ['Spring', 'Summer', 'Fall', 'Winter']    
&gt;&gt;&gt; list(enumerate(seasons))
[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
&gt;&gt;&gt; list(enumerate(seasons, start=1))
[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]
</code></pre>
<p>Note the "start".</p>
<p>Enumerate knows how to manage lists. Dictionaries store data as a list, somewhere in the belly of the beast. So what happens if we use enumerate on a dict?</p>
<pre><code>&gt;&gt;&gt; for i,k in enumerate(a):
...    print i,k
... 
0 a
1 b
</code></pre>
<p>In this light I would go for the elegant:</p>
<pre><code>&gt;&gt;&gt; for i,k in enumerate(a):
...    print i,k,a[k]
... 
0 a 1
1 b 2
</code></pre>
<p>I feel that "for i, (k,v) in" exposes too much of the inner structure too soon.
With "for i,k in" we are protected and when times comes to refactor, we don't need to touch the way we loop. We need to change only what we do in the loop. One less aspect to take care of. </p>
<p>Not to mention that this call to enumerate works just the same in any python after 2.6 :)</p>
<p><a href="https://docs.python.org/2/library/stdtypes.html#dict.iteritems" rel="nofollow">https://docs.python.org/2/library/stdtypes.html#dict.iteritems</a></p>
<p><a href="https://docs.python.org/2/library/functions.html#enumerate" rel="nofollow">https://docs.python.org/2/library/functions.html#enumerate</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use the methods <code>values</code> or <code>items</code> to get a <code>view</code> and then typeset it as an <code>iterator</code>:</p>
<p>e.g. to sort by the values in your dictionary</p>
<pre><code>sorted(iter(my_dict.values()))
</code></pre>
</div>
<span class="comment-copy">Why do you recommend using <code>dict.items()</code> instead? It literally constructs a new list.</span>
<span class="comment-copy">@farukdgn, In Python 3.x, <code>dict.items()</code> returns a view, not a list. And there's  no <code>dict.iteritems</code> in Python 3.x. See <a href="https://docs.python.org/3/glossary.html#term-dictionary-view" rel="nofollow noreferrer">dictionary view</a>.</span>
<span class="comment-copy">I need an index to interface with a component that knows the order but does not care about names.   I try to reduce number of [], because for me it's not just dict of value, but dict of dicts of objects and some objects are arrays and each [] more is pain in the code.  And at some point I already have refactored all iterkeys to iteritems where it shorten the code.  It might be more natural in this case  to use list of dicts, but I preferred to have fast access to names and to keep uniformity with other entities which are pure dicts.</span>
<span class="comment-copy">For me a list of dicts is preferable to a dict of dict, now it depends on your particular case. It feels that you have a God Object.</span>
