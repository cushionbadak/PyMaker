<div class="post-text" itemprop="text">
<p>What is a clean way to create a multi-line <code>with</code> in python? I want to open up several files inside a single <code>with</code>, but it's far enough to the right that I want it on multiple lines. Like this:</p>
<pre><code>class Dummy:
    def __enter__(self): pass
    def __exit__(self, type, value, traceback): pass

with Dummy() as a, Dummy() as b,
     Dummy() as c:
    pass
</code></pre>
<p>Unfortunately, that is a <code>SyntaxError</code>. So I tried this:</p>
<pre><code>with (Dummy() as a, Dummy() as b,
      Dummy() as c):
    pass
</code></pre>
<p>Also a syntax error. However, this worked:</p>
<pre><code>with Dummy() as a, Dummy() as b,\
     Dummy() as c:
    pass
</code></pre>
<p>But what if I wanted to place a comment? This does not work:</p>
<pre><code>with Dummy() as a, Dummy() as b,\
     # my comment explaining why I wanted Dummy() as c\
     Dummy() as c:
    pass
</code></pre>
<p>Nor does any obvious variation on the placement of the <code>\</code>s.</p>
<p>Is there a clean way to create a multi-line <code>with</code> statement that allows comments inside it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Given that you've tagged this Python 3, if you need to intersperse comments with your context managers, I would use a <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="noreferrer"><code>contextlib.ExitStack</code></a>:</p>
<pre><code>with ExitStack() as stack:
    a = stack.enter_context(Dummy()) # Relevant comment
    b = stack.enter_context(Dummy()) # Comment about b
    c = stack.enter_context(Dummy()) # Further information
</code></pre>
<p>This is equivalent to</p>
<pre><code>with Dummy() as a, Dummy() as b, Dummy() as c:
</code></pre>
<p>This has the benefit that you can generate your context managers in a loop instead of needing to separately list each one. The documentation gives the example that if you want to open a bunch of files, and you have the filenames in a list, you can do</p>
<pre><code>with ExitStack() as stack:
    files = [stack.enter_context(open(fname)) for fname in filenames]
</code></pre>
<p>If your context managers take so much screen space that you want to put comments between them, you probably have enough to want to use some sort of loop.</p>
<hr/>
<p>As Mr. Deathless mentions in the comments, there's a <a href="https://pypi.python.org/pypi/contextlib2/" rel="noreferrer">contextlib backport</a> on PyPI under the name <code>contextlib2</code>. If you're on Python 2, you can use the backport's implementation of <code>ExitStack</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This seems tidiest to me:</p>
<pre><code>with open('firstfile', 'r') as (f1 # first
  ), open('secondfile', 'r') as (f2 # second
  ):
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This isn't exactly clean, but you could do this:</p>
<pre><code>with Dummy() as a, Dummy() as b, (
     #my comment
     Dummy()) as c:
    pass
</code></pre>
<p>There are no syntax errors, but it's not the cleanest. You could also do this:</p>
<pre><code>with Dummy() as a, Dummy() as b, Dummy(
     #my comment
     ) as c:
    pass
</code></pre>
<p>Consider finding a way of doing this without using the comments in the middle of the <code>with</code>.</p>
</div>
<span class="comment-copy">Actually, the big question is what PEP-8 says about this stuff, since PEP-8 restricts line-length to 80 chars, which is what makes doing this necessary.</span>
<span class="comment-copy">Opinion time: PEP-8 is great, but I think the 80-character limit is too low. It's based on the old terminal limitations, not human usability. I'm not advocating lines with 300+ characters, but I have no problem with 120-130 or so.</span>
<span class="comment-copy">@TigerhawkT3 I think that the 80 char limit is low too, but I see a benefit to it when I'm working on a project that requires me to have 5 files open simultaneously. It's much easier to be able to see every file. I might make an exception for this file, though.</span>
<span class="comment-copy">PEP-8 is <a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" rel="nofollow noreferrer">explicitly ok</a> with ` \ ` line continuation for multiline <code>with</code> statements, since you can't use implicit continuation. That doesn't really help your situation if you want to inline comments, though.</span>
<span class="comment-copy">That's a great solution.</span>
<span class="comment-copy">There is a backport of contextlib improvements to Python 2 on <a href="https://pypi.python.org/pypi/contextlib2/" rel="nofollow noreferrer">pypi</a>. It provides <code>ExitStack()</code> among other things.</span>
<span class="comment-copy">Fun fact: he <i>is</i> the OP.</span>
<span class="comment-copy">No offense intended; my amusement came from @DevShark's lack of realization. But, if you often just need to give it a few more minutes to figure something out yourself, maybe you could so before asking a question? Be more self-confident. :)</span>
<span class="comment-copy">@TigerhawkT3 I do so before asking. I always spend at least an hour working on the problem before I ask. It's only when frustration overcomes me that I ask. And yet I somehow usually manage to figure it out after I ask.</span>
<span class="comment-copy">@Downvoter Can you please explain what is bad about this answer so I can improve my future answers?</span>
<span class="comment-copy">@Justin if you usually figure things out after finally breaking down and asking a question, might I suggest a rubber duck by your side? ;-) Either way, it's seldom a bad thing to post a question online if only to answer it yourself shortly after. It's good for posterity, and for others' benefit!</span>
