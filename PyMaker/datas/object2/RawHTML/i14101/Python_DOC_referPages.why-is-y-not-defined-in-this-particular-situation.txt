<div class="post-text" itemprop="text">
<p>I'm somewhat new to Python 2.7 and I tried created a simple dice game however I'm having some difficulty getting the computer to recognize y, as no matter what I do it will not recognize answer as being y or n. Here is the code below.</p>
<pre><code>import random
a = random.randint(1, 6)
b = random.randint(1, 6)
points = 0
strikes = 0

def main():
    print """Welcome to the two dice game. Depending on the result, you will earn a point or a strike. Three strikes end the game. Good luck!"""
    anwser = input('Play? y for yes, n for no')
    if anwser == "y":
       print a
       print b
       if a == b:
          print ("Congrats! You earned a point!")
          points = points + 1
          main()
    else:
        print("That's a strike...")
        strikes = strikes + 1
        if strikes == 3:
            print("That's three strikes, game over.")
            break
        else:
            main()
    if anwser == n:
       print ("Game over. You earned this many points.")
       print points

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>input()</code> actually tries to evaluate whatever you pass to it. You want <code>raw_input()</code>.</p>
<p>See <a href="https://stackoverflow.com/questions/4915361/whats-the-difference-between-raw-input-and-input-in-python3-x">this question</a> for more information on <code>input()</code> vs <code>raw_input()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I find getting input with python 2 works well using raw_input as taught at Codecademy. With python 3 its input() function works well. There was a problem accessing strikes and points which should be declared global in main() and it may be better to put a and b into main() so users re-roll the dice when main() reruns itself otherwise they get stuck with the same roll that either terminates in 3 plays or never terminates.  The if-then logic can use some fixing so that a "n" answer terminates the game as suggested below along with some other changes such as formatting the initial message so it doesn't print beyond a normal sized window:</p>
<pre><code>import random
points = 0
strikes = 0

def main():
    a = random.randint(1, 6)
    b = random.randint(1, 6)
    global points
    global strikes
    print """Welcome to the two dice game. Depending on the result
you will earn a point or a strike. Three strikes end 
the game. Good luck!"""
    answer = raw_input('Play? y for yes, n for n: ')
    if answer == "y":
        print a
        print b
        if a == b:
            print ("Congrats! You earned a point!")
            points = points + 1
            main()
        else:
            print("That's a strike...")
            strikes = strikes + 1
            if strikes == 3:
                print("That's three strikes, game over.")
                exit(1)
            else:
                main()
    elif answer == "n":
        print ("Game over. You earned this many points.")
        print points

main()
</code></pre>
<p>It may be interesting to offset strikes with points by calculating strikes as strikes -= points and on termination with "n" to offset points with strikes with points -= strikes.</p>
<p>Codecademy has free all hands-on training for Python 2.  I recently went through it and its good. For Python 3, Introducing Python by Bill Lubanovic is excellent because it starts at a beginners level and progresses to intermediate expertise, is very readable, has exercises at the end of chapters with solutions in an appendix and code on github and its relatively short compared to some Python tomes (Learning Python and Programming Python for example) -- it covers core Python 3 in 7-9 chapters in 200-250 pages and the rest are on more specialized and optional but interesting areas such as NoSQL database access, web services and style.</p>
</div>
<span class="comment-copy">The correct spelling is 'answer' (just to let you know). You need to use raw_input instead of input because it is python 2x not 3x.</span>
<span class="comment-copy">Another thing to note is that recursing on <code>main</code> is probably not what you want to do. Try using a <code>while</code> loop instead (<code>def main(): while strikes &lt; 3: &lt;your function goes here&gt;</code>)</span>
<span class="comment-copy">You use three different types of print statement formats: one with 3 quotes at the beginning, one with no parenthesis, and one with. I would recommend surrounding all your <code>print</code> methods with parenthesis so it is consistent and because it's easier to port and run in python3. Example: <code>print(a)</code>  Also, your "main()" section at the bottom should have this in it: <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">docs.python.org/3/library/__main__.html</a></span>
<span class="comment-copy">Wow, thanks for the help. Didn't realize I screwed up that bad.</span>
<span class="comment-copy">Not screwups. Learning opportunities. Are you using a tutorial on Python 2? If you're just starting out, why not learn Python 3 instead?</span>
<span class="comment-copy">I'm doing Codecademy right now btw. I was just trying to apply what I had learned, which apparently, wasn't much.</span>
