<div class="post-text" itemprop="text">
<p>Say I have a string that looks like this "53.4 -63.2 433.2" three separate numbers. How do I get the middle one only and so I dont ignore a minus if the number is negative? </p>
<p>Ive managed to gather to use (\d+) to group the numbers and to grab more than one..But I dont know what to add? IVe looked at similar questions but I guess I could not find a similar enough case to what I am trying to do</p>
</div>
<div class="post-text" itemprop="text">
<p>Contrary to other response, I am going to give you the regular expression way that will only match for line of three number.</p>
<p>I will do it this way : catch three number which could have an optional negate (?-) and which could have optional dot with digit after (.?)\d+, I will put a group mark on the second to retrieve it (-?\d+.?\d+). And I will able those number to be separated by a random number of space \s+.</p>
<pre><code>import re
m = re.search(r"-?\d+\.?\d+\s+(-?\d+\.?\d+)\s+-?\d+\.?\d+", "53.4 -63.2 433.2")
print(re.group(1))
</code></pre>
<p>If you have difficulty understanding my regexp, you should copy it in <a href="https://regex101.com/#python" rel="nofollow">https://regex101.com/#python</a> : it will give an explanation for everything.</p>
<p>You should also take a look at Python re module documentation : <a href="https://docs.python.org/2/library/re.html" rel="nofollow">https://docs.python.org/2/library/re.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If there will always be 3 numbers per line, separated with spaces, then regex is a bit overkill. Something like this should suffice:</p>
<pre><code>numbers = []
for line in infile:
    numbers.append(line.split()[1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I hope this will help:</p>
<pre><code>str_num =  "53.4 -63.2 433.2"
list_num = str_num.split("\t")

# Now print the middle item by using lenght of list divided by 2.
middle = list_num[len(list_num)/2]
</code></pre>
<p>This will work for list of any lenght. So, you don't have to <strong>hardcode the index</strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Aussuming your data has the form of the sample <code>multiline_string</code> you can iterate through the string line by line by providing an <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow">iterator</a> and <a href="https://docs.python.org/3.5/library/stdtypes.html#str.split" rel="nofollow"><code>split()</code></a> each line into several groups. If there are exact three groups take the middle one and cast the string into a float. Pass the extracted number (which is a float) to <a href="https://docs.python.org/3.5/library/functions.html#abs" rel="nofollow"><code>abs()</code></a> to get the absolute value:</p>
<pre><code>#!/usr/bin/env python3
# coding: utf-8

multiline_string = """
123 -456 789
101 102 103
35.7 -43.8 21.8  
10. 10.2 10.3
"""

for line in iter(multiline_string.splitlines()):
    groups = line.split()
    if len(groups) == 3:
        number = abs(float(line.split()[1]))
        print(number)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def middle_floats(filename):
    with open(filename) as lines:
        for line in lines:
            yield line.split()[1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may use <code>re</code> module.</p>
<pre><code>re.search(r'(?s)^\S+\s+(\S+)', stri).group(1)
</code></pre>
<p><strong>Example:</strong></p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = ["""53.4
-63.2 433.2""", """53.4 -63.2 433.2""", """53.4 -63.2
 433.2"""]
&gt;&gt;&gt; [re.search(r'(?s)^\S+\s+(\S+)', i).group(1) for i in s]
['-63.2', '-63.2', '-63.2']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are reading from a file, something like the following could be used:</p>
<pre><code>import csv

reader = csv.reader(open("numbers.txt", "rb"), delimiter=" ")

for row in reader:
    if len(row) == 3:
        print row[1]
</code></pre>
<p>As mentioned, use of a regular expression seems like overkill.</p>
</div>
<span class="comment-copy"><code>"53.4 -63.2 433.2".split()[1]</code></span>
<span class="comment-copy">Have you thought about using <a href="https://docs.python.org/3.5/library/stdtypes.html#str.split" rel="nofollow noreferrer"><code>string.split()</code></a> instead of a regex? Using regex for this simple task is kind of taking a sledgehammer to break a nut.</span>
<span class="comment-copy">Oh sorry. Assume this is not the only line I need to check. I might have many lines like this with differing numbers aswell. Sorry forgot to add this. I am reading line for line in a text file and I get tuples of three different numbers and only want to pick out the middle one which may or may not be negative for example.</span>
<span class="comment-copy">@Lucas: If so, could you please add a short snippet showing what you mean by 'many lines'? If they're from an input file for example you could walk through that file line by line and use split for each line.</span>
<span class="comment-copy">If the format is always number-space-number-space-number then it is much simpler with <code>split(" ")</code></span>
<span class="comment-copy">Ye this was what I had in mind. Thanks alot! Will try to do some extra reading on this in general to see if I can wrap my head around it all.</span>
<span class="comment-copy">What if it may be a space or line break?</span>
