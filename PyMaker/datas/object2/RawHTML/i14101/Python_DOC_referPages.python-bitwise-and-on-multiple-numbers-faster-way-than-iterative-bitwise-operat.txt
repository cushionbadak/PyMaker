<div class="post-text" itemprop="text">
<p>I'm looking for a fastest way (<code>O(n^2)</code> is not acceptable) to apply an <code>AND</code> operator over more than 2 numbers in <code>Python</code>. </p>
<p>There are two scenarios:<br/>
<em>a)</em> on input we have numbers in a range between M and N<br/>
<em>b)</em> there can be a set of any natural numbers</p>
<p>Currently my code uses an <code>&amp; operator</code> in a loop, which always compute a result bit (despite the fact that we know, that if we have <code>0</code>, than the next and all next result bits will always be <code>0</code>). One of my ideas is to compute bits per columns, and for a given column, stop computing when there is <code>0</code>, because the result bit will be <code>0</code>.</p>
<p>Example (included in test code below)</p>
<p><img alt="Bitwise puzzle explained on an example" src="https://i.stack.imgur.com/lXkGX.png"/></p>
<p>Existing (iterative), rather slow (<code>O(n^2)</code>) code:</p>
<pre><code>def solution(M, N):
    result = M
    for x in xrange(M, N):
        result &amp;= x
    return result


def solution_sets(N):
    result = N[0]
    for x in N:
        result &amp;= x
    return result


print solution(5, 7)  # 4
print solution(64, 128)  # 64
print solution(44, 55)  # 32
print solution_sets([60, 13, 12, 21])
</code></pre>
<p>It would be good if this solution was expandable to for example XOR operator.</p>
<p>I'm asking for some ideas on how to start implementing this in the Python language and maximize performance.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I would let Python worry about the optimization, this could be written trivially for a sequence using <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>functools.reduce</code></a> and <a href="https://docs.python.org/3/library/operator.html#mapping-operators-to-functions" rel="nofollow"><code>operator.and_</code></a></p>
<pre><code>&gt;&gt;&gt; functools.reduce(operator.and_, [60, 13, 12, 21])
4
</code></pre>
<p>Wrapping this in a function</p>
<pre><code>def solution_sets(l):
    return functools.reduce(operator.and_, l)
</code></pre>
<hr/>
<p>Using <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow"><code>timeit</code></a>, to do this 1000000 times took 0.758 seconds in the following environment:  </p>
<blockquote>
<p><strong>Python IDLE 3.4.1</strong> (v3.4.1:c0e311e010fc, May 18 2014, 10:38:22) [MSC v.1600 32 bit (Intel)] on win32<br/>
<strong>Processor</strong> Intel Core i7-3740QM CPU @ 2.70 GHz<br/>
<strong>Memory</strong> 16.0 GB<br/>
<strong>OS</strong> 64-bit Windows 7</p>
</blockquote>
<pre><code>setup = '''
import functools
import operator

def solution_sets(l):
    return functools.reduce(operator.and_, l)'''

&gt;&gt;&gt; timeit.timeit('solution_sets([60, 13, 12, 21])', setup)
0.7582756285383709
</code></pre>
</div>
<span class="comment-copy">You are unlikely to improve upon the performance of bitwise operations on integers, particularly if you write it in Python.</span>
<span class="comment-copy">Even if there is a function that lets you AND multiple numbers, your CPU can likely only AND 2 numbers at a time, making your "efficient" function still O(n^2) at the CPU instruction level.</span>
<span class="comment-copy">What makes you think your algorithm is O(n^2)?  It's actually O(n).  You can eliminate 1 iteration by using "xrange(M+1,N)" to avoid performing "result = M &amp; M" on the first iteration.  You can also stop early if result equals zero.  It would still be O(n), though.  It seems like you are working on a homework problem that you might be approaching in other than the prescribed way.</span>
<span class="comment-copy">Thinking about it, you could possibly solve the <code>M, N</code> case analytically, and therefore write a function to calculate the answer in <code>O(1)</code>.</span>
<span class="comment-copy">I'm also baffled by your (apparent) claim that your current solution is O(n^2).  It's O(n), unless the number of bits in each number can grow with n.</span>
