<div class="post-text" itemprop="text">
<p>I have a python class with such a module:</p>
<p><strong>xy.py</strong></p>
<pre><code>from a.b import ClassA

class ClassB:
  def method_1():
    a = ClassA()
    a.method2()
</code></pre>
<p>then I have ClassA defined as:</p>
<p><strong>b.py</strong></p>
<pre><code>from c import ClassC

class ClassA:
  def method2():
      c = ClassC()
      c.method3()
</code></pre>
<p>Now in this code, when writing test for xy.py I want to mock.patch ClassC, is there a way to achieve that in python?</p>
<p>obviously I tried:</p>
<pre><code>mock.patch('a.b.ClassA.ClassC)
</code></pre>
<p>and</p>
<pre><code>mock.patch('a.b.c.ClassC')
</code></pre>
<p>None of these worked.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to patch where <code>ClassC</code> is located so that's <code>ClassC</code> in <code>b</code>:</p>
<pre><code>mock.patch('b.ClassC')
</code></pre>
<p>Or, in other words, <code>ClassC</code> is imported into module <code>b</code> and so that's the scope in which <code>ClassC</code> needs to be patched.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="noreferrer">Where to patch</a>:</p>
<blockquote>
<p>patch() works by (temporarily) changing the object that a name points to with another one. There can be many names pointing to any individual object, so for patching to work you must ensure that you patch the name used by the system under test.</p>
<p><strong>The basic principle is that you patch where an object is <em>looked up</em>, which is not necessarily the same place as where it is defined</strong>.</p>
</blockquote>
<p>In your case, the lookup location is <code>a.b.ClassC</code> since you want to patch <code>ClassC</code> used in <code>ClassA</code>.</p>
<pre><code>import mock

with mock.patch('a.b.ClassC') as class_c:
    instance = class_c.return_value  # instance returned by ClassC()
    b = ClassB()
    b.method1()
    assert instance.method3.called == True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Each time the method <code>ClassA().method2()</code> is called, the method looks up <code>ClassC</code> as a global, thus finding <code>ClassC</code> in the <code>a.b</code> module. You need to patch <em>that</em> location:</p>
<pre><code>mock.patch('a.b.ClassC')
</code></pre>
<p>See the <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow"><em>Where to patch</em> section</a> section.</p>
</div>
<span class="comment-copy">Assuming <code>b</code> has been imported, though.</span>
<span class="comment-copy">@chepner: mock will do the importing.</span>
<span class="comment-copy">thanks it works!</span>
<span class="comment-copy">Please don't just dump code, explain <i>why</i> this is an answer.</span>
