<div class="post-text" itemprop="text">
<p>I have a Python module that performs some logging during some of the methods it contains:</p>
<p><strong>module.py</strong></p>
<pre><code>LOG_FILE = "/var/log/module.log"

def log(message):
    with os.fdopen(os.open(LOG_FILE, os.O_RDWR | os.O_CREAT, 0664), "a+") as f:
        f.write("[%s] %s\n" % (time.strftime("%c"), message))

def do_something():
    log("Doing something")
    # ...
</code></pre>
<p>In this implementation the log file will be opened and closed every time the <code>log</code> method is called.</p>
<p>I'm considering refactoring it so the file is opened once when the module is loaded, but I'm not sure how to ensure it is closed when a script importing the module ends. Is there a clean way to do this?</p>
<p><strong>Edit:</strong> I'm not asking about closing the file when an exception is encountered, but when the script that imports my module exits.</p>
</div>
<div class="post-text" itemprop="text">
<p>OS takes care of open file descriptors then a process dies. It may lead to a data loss if file buffers inside the application are not flushed. You could add <code>f.flush()</code> in the <code>log()</code> function after each write (note: it does not guarantee that the data is physically written to disk and therefore it is still may be lost on a power failure, see <a href="https://stackoverflow.com/q/12003805/4279">Threadsafe and fault-tolerant file writes</a>).</p>
<p>Python may also close (and flush) the file on exit during a garbage collection. But you shouldn't rely on it.</p>
<p><code>atexit</code> works only during a normal exit (and exit on some signals). It won't help if the script is killed abruptly.</p>
<p>As <a href="https://stackoverflow.com/a/31073766/4279">@Ren√© Fleschenberg suggested</a>, use <code>logging</code> module that calls <code>.flush()</code> and perhaps registers <code>atexit</code> handlers for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is usually pretty good at cleaning up after itself.  If you must do something when the script ends, you need to look at the <a href="https://docs.python.org/3/library/atexit.html" rel="nofollow"><code>atexit</code> module</a> - but even then, it offers no guarantees.</p>
<p>You may also want to consider logging to either <code>stdout</code> or <code>stderr</code>, depending on purpose, which avoids keeping a file around all together:</p>
<pre><code>import sys

def log(message):
    sys.stderr.write("[%s] %s\n" % (time.strftime("%c"), message))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python will automatically close the opened files for you when the script that has imported your module exits.</p>
<p>But really, just use Python's <a href="https://docs.python.org/2/library/logging.html" rel="nofollow">logging module</a>.</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/17577137/do-files-get-closed-during-an-exception-exit">Do files get closed during an exception exit?</a></span>
<span class="comment-copy">you don't have guarantees. However, if you are looking for a "best effort" behaviour, check <code>atexit</code></span>
<span class="comment-copy">Why not use <code>apache http server</code>,<code>mod_wsgi</code>,<code>logger</code> and let them handle the writes to log files. Faster, efficient.. or just use a <code>logging</code> <a href="https://docs.python.org/2.3/lib/node304.html" rel="nofollow noreferrer">module</a></span>
<span class="comment-copy">@Vaulstein Because it's not running as a CGI script.</span>
<span class="comment-copy">I already do log to <code>stderr</code>, this is just some extra logging. <code>atexit</code> looks promising, thanks.</span>
<span class="comment-copy">So there's no need to explicitly close any files? I'll have a look at <code>logging</code> but at the moment it's quicker and easier to do it manually rather than messing around setting up paths, permissions, and formats.</span>
<span class="comment-copy">Whether files are automatically closed at the end depends on the Python implementation, as far as I know. It is not a good practice to rely on it.</span>
<span class="comment-copy">It's good practice to explicitly close files, but if you only want to close on program exit, you can let Python do that for you.</span>
<span class="comment-copy">I recommend looking at the logging module <i>now</i>. It may seem like your current method is quicker and easier, but it is actually harder and more complicated, which is why you are asking this question ;)</span>
