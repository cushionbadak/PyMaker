<div class="post-text" itemprop="text">
<p>I have this simple py script that makes an xml file and saves, it and was wondering if there was a simple way to indent it?</p>
<pre><code>import xml.etree.cElementTree as ET


root = ET.Element("root")
doc = ET.SubElement(root, "doc", location="one")

ET.SubElement(doc, "field1", name="blah").text = "some value1"
ET.SubElement(doc, "field2", name="asdfasd").text = "some vlaue2"
</code></pre>
<p>I looked at some other SO Q&amp;A's <a href="https://stackoverflow.com/questions/749796/pretty-printing-xml-in-python">Pretty printing XML in Python</a> but these seem to mostly require other external libs? and was wondering if there is a way to not use those?</p>
<p>Thanks for the help.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use the standard library's <a href="https://docs.python.org/library/xml.dom.minidom.html#" rel="nofollow">minidom</a> module's <a href="https://docs.python.org/library/xml.dom.minidom.html#xml.dom.minidom.Node.toprettyxml" rel="nofollow"><code>toprettyxml</code> method</a>:</p>
<pre><code>import xml.dom.minidom as minidom

xml = minidom.Document()
root = xml.createElement("root")
xml.appendChild(root)

doc = xml.createElement("doc")
doc.setAttribute("location", "one")
root.appendChild(doc)

field = xml.createElement("field1")
field.setAttribute("name", "blah")
text = xml.createTextNode("some value1")
field.appendChild(text)
doc.appendChild(field)

field = xml.createElement("field2")
field.setAttribute("name", "asdfasd")
text = xml.createTextNode("some value2")
field.appendChild(text)

doc.appendChild(field)
print(xml.toprettyxml(indent=' '*4))
</code></pre>
<p>yields</p>
<pre><code>&lt;?xml version="1.0" ?&gt;
&lt;root&gt;
    &lt;doc location="one"&gt;
        &lt;field1 name="blah"&gt;some value1&lt;/field1&gt;
        &lt;field2 name="asdfasd"&gt;some value2&lt;/field2&gt;
    &lt;/doc&gt;
&lt;/root&gt;
</code></pre>
<hr/>
<p>Or, if you prefer the <code>ElementTree</code> methods for creating XML and don't mind
being a bit inefficient, you could use <code>ElementTree</code> to write the unformatted XML
to a <a href="https://docs.python.org/2/library/stringio.html" rel="nofollow">StringIO</a> (for Python2) or <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow">ByteIO</a> (for Python3), parse that into a minidom
Document, and then write it back out again using <code>toprettyxml</code>:</p>
<pre><code>import xml.etree.cElementTree as ET
import xml.dom.minidom as minidom

try:
    # for Python2
    from cStringIO import StringIO as BytesIO
except ImportError:
    # for Python3
    from io import BytesIO

root = ET.Element("root")
doc = ET.SubElement(root, "doc", location="one")

ET.SubElement(doc, "field1", name="blah").text = "some value1"
ET.SubElement(doc, "field2", name="asdfasd").text = "some vlaue2"
buf = BytesIO()
buf.write(ET.tostring(root))
buf.seek(0)
root = minidom.parse(buf)
print(root.toprettyxml(indent=' '*4))
</code></pre>
</div>
<span class="comment-copy"><code>minidom</code> is in the standard library. You could use <code>minidom</code> to create the document, and then call its <code>toprettyxml</code> method.</span>
<span class="comment-copy">I don't see how that script "makes an xml file and saves" it. Where is the code that saves the file?</span>
<span class="comment-copy">@Robáµ© sorry I forgot to inclue the save</span>
<span class="comment-copy">@unutbu could you show me how to do that please?</span>
