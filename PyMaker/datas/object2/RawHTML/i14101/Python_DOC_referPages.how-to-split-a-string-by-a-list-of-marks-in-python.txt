<div class="post-text" itemprop="text">
<p>Suppose we have a sentence like: <code>"ABCDEFG"</code>, and a list of marks like: <code>[0,0,1,0,0,0,1]</code>. What I intends to do is split the source string into segments by using the list of marks: if a character has index <code>i</code> in the source string, and by using this index we could get <code>1</code> in the list of marks, then this character is the end of a word.</p>
<p>So the source string could be split into <code>['ABC', 'DEFG']</code></p>
<p>How to achieve this in Python? I mean, not the simple way like using a temporary buffer.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple approach would be:</p>
<pre><code>temp = "ABCDEFG"
t = [0,0,1,0,0,0,1]
f_i, e_i = 0,0
for index,val in enumerate(t):
    if val:
        e_i = index +1
        print temp[f_i: e_i ]       #Here you can store these as you wish
        f_i = e_i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>.index</code> is probably the fastest way to find the <code>1</code>s. Also allows you to slice the source string directly</p>
<pre><code>s = "ABCDEFG"
L = [0,0,1,0,0,0,1]

pos = 0
res = []
while True:
    try:
        idx = L.index(1, pos) + 1
    except ValueError:
        break
    res.append(s[pos: idx])
    pos = idx

print(res)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can use simple <code>for</code> loop to acheive this -</p>
<pre><code>&gt;&gt;&gt; s = "ABCDEFG"
&gt;&gt;&gt; l = [0,0,1,0,0,0,1]
&gt;&gt;&gt;
&gt;&gt;&gt; endlist = []
&gt;&gt;&gt; tsh = ''
&gt;&gt;&gt; for i, ch in enumerate(s):
...     tsh += ch
...     if l[i] == 1:
...             endlist.append(tsh)
...             tsh = ''
...
&gt;&gt;&gt; endlist
['ABC', 'DEFG']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple answer:</p>
<pre><code>l = [0,0,1,0,0,0,1]
s = 'ABCDEFG'
indices = [i for i, x in enumerate(l) if x == 1]
t = 0
a = []
for i in indices:
    a.append(s[t:i+1])
    t = i+1
print(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another variation on a theme.</p>
<pre><code>marks = [0,0,1,0,0,0,1]
sentence = 'ABCDEFG'

output = []
last_index = 0

for index, mark in enumerate(marks):
    if mark:
        output.append(sentence[last_index:index+1])
        last_index = index+1

print(output)
</code></pre>
</div>
<span class="comment-copy">its not at all clear what you want to achieve.</span>
<span class="comment-copy">This question is more appropriate to post in <a href="http://codegolf.stackexchange.com/">codegolf.stackexchange.com</a>   And what does that mean by 'something else'? :-)</span>
<span class="comment-copy">Use the <code>groupby</code> method in the Python <code>itertools</code> documentation: <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.groupby</a></span>
<span class="comment-copy">@AnthonyKong Thanks for your comment, I think "something else" is redundant here. And I don't know there's a section like codegolf!</span>
<span class="comment-copy">Hi @sachinsaxena, I think the answer from Kumar is the one with temporary buffer, and that's not quite elegant. I think there could be a method like split which could have that kind of functionality.</span>
<span class="comment-copy">I really love your idea! However, is there any reference about "index is the fastest why to find 1s"?</span>
<span class="comment-copy">I'm being picky here, but you should append the characters to an array, and then <code>join</code> it at the end.  The way you are doing it now is O(n^2)- appending a character to a string is O(n) where n is the length of the string.</span>
<span class="comment-copy">@James, if there is only one reference to the string, adding to the end of the string is amortized O(1)</span>
<span class="comment-copy">@JohnLaRooy, thanks for pointing that out!  I did not know this.</span>
