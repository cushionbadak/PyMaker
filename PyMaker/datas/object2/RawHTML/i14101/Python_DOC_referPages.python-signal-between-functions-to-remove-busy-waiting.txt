<div class="post-text" itemprop="text">
<p>I'm just trying to implement a simple Observer pattern in Python and am running into an issue. This is my code:</p>
<pre><code>class Observable:
    def __init__(self):
    self.__observers = []

    def register_observer(self, observer):
        self.__observers.append(observer)

    def notify_observers(self, data):
        for observer in self.__observers:
            observer.notify(self, data)

class Observer:

    def __init__(self, observable):
        observable.register_observer(self)
        self.data_present = False
        self.data = ''

    def notify(self, observable, data):
        self.data_present = True
        self.data = data

    def wait(self):
        while True:
            if not self.data_present:
                time.sleep(5)

            else:
                break

        return self.data
</code></pre>
<p>In here, I would like to eliminate the busy waiting in Observer.wait() (the line time.sleep(5). How can I perhaps signal to this function?</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to have the <code>wait</code> function at all -- just do what you need to in <code>notify</code> (process the data, log the data, mutilate/spindle/fold the data, whatever).</p>
<p>If you are using threading, check out the <a href="https://docs.python.org/2/library/queue.html" rel="nofollow">Queue.Queue</a> class:  it allows for multiple threads to synchronize on data availability without busy-waiting -- just have the <code>notify</code> method push data into a <code>Queue</code>, and <code>wait</code> can wait on it.  Note that there is probably a more elegant solution using some of the other features found in the <a href="https://docs.python.org/2/library/threading.html" rel="nofollow">Threading</a> module.</p>
<p>As a side note, you also don't need the double-underscore in <code>self.__observers</code> -- just <code>self.observers</code> is fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>yield</code> to suspend a function at one point, waiting for some value (blocked, <strong>without doing busy waiting</strong>).</p>
<pre><code>def f():
    print('f: i am waiting for something...')
    c = yield
    print('f: i got %s' % c)
    yield None
</code></pre>
<p>On the other side you call <code>.send(val)</code> to resume its execution:</p>
<pre><code>&gt;&gt;&gt; g=f()
&gt;&gt;&gt; next(g)
f: i am waiting for something...
&gt;&gt;&gt; g.send(123)
f: i got 123
&gt;&gt;&gt;
</code></pre>
<p>Note the additional <code>yield None</code> at the end of <code>f()</code> which prevents a <code>StopIteration</code> exception from being <code>raise</code>d when you call <code>.send()</code>.</p>
</div>
<span class="comment-copy">Is this not something where you can use asyncio?</span>
<span class="comment-copy">Have a look at the examples for the <a href="https://docs.python.org/3/library/asyncio-task.html" rel="nofollow noreferrer"><code>asyncio</code></a> module.  In particular, you may want to use <a href="https://docs.python.org/3/library/asyncio-task.html#coroutine" rel="nofollow noreferrer">coroutines</a>.</span>
<span class="comment-copy">@Evert, I want my observers to be synchronous, and wait for a message to be published before they go ahead with execution.</span>
<span class="comment-copy">I want my observers to be synchronous. I want them to wait until there is data that has been published before going forward with the execution. I think that if I do everything in notify, wouldn't my observers be asynchronous?</span>
<span class="comment-copy">Are you using threading?  If not, everything is synchronous already.  If you are using threading then check out the <code>Queue</code> -- your <code>notify</code> can submit the data to it, and your <code>wait</code> (or whatever you actually call it) can simply try to <code>get</code> from the <code>Queue</code> which will block until data shows up (without busy-waiting).  As for <code>notify</code>, only the <code>Observable</code> calls it, so nothing in there runs until there is data available.</span>
<span class="comment-copy">Yep, I was using threading. This solution works fine enough. Is there a problem if there are many instances of Queue.Queue() created when I have more than a few threads running?                                                                                            PS: Can you edit your answer with this information so I can accept it?</span>
