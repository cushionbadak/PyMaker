<div class="post-text" itemprop="text">
<p>Recently I started playing around with Python and I came around something peculiar in the way closures work. Consider the following code:</p>
<pre><code>adders=[0,1,2,3]

for i in [0,1,2,3]:
   adders[i]=lambda a: i+a

print adders[1](3)
</code></pre>
<p>It builds a simple array of functions that take a single input and return that input added by a number. The functions are constructed in <code>for</code> loop where the iterator <code>i</code> runs from <code>0</code> to <code>3</code>. For each of these numbers a <code>lambda</code> function is created which captures <code>i</code> and adds it to the function's input. The last line calls the second <code>lambda</code> function with <code>3</code> as a parameter. To my surprise the output was <code>6</code>.</p>
<p>I expected a <code>4</code>. My reasoning was: in Python everything is an object and thus every variable is essential a pointer to it. When creating the <code>lambda</code> closures for <code>i</code>, I expected it to store a pointer to the integer object currently pointed to by <code>i</code>. That means that when <code>i</code> assigned a new integer object it shouldn't effect the previously created closures. Sadly, inspecting the <code>adders</code> array within a debugger shows that it does. All <code>lambda</code> functions refer to the last value of <code>i</code>, <code>3</code>, which results in <code>adders[1](3)</code> returning <code>6</code>.</p>
<p>Which make me wonder about the following:</p>
<ul>
<li>What do the closures capture exactly?</li>
<li>What is the most elegant way to convince the <code>lambda</code> functions to capture the current value of <code>i</code> in a way that will not be affected when <code>i</code> changes its value?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Your second question has been answered, but as for your first:</p>
<blockquote>
<p>what does the closure capture exactly?</p>
</blockquote>
<p>Scoping in Python is <strike>dynamic and</strike> lexical. A closure will always remember the name and scope of the variable, not the object it's pointing to. Since all the functions in your example are created in the same scope and use the same variable name, they always refer to the same variable.</p>
<p><strong>EDIT:</strong> Regarding your other question of how to overcome this, there are two ways that come to mind:</p>
<ol>
<li><p>The most concise, but not strictly equivalent way is the <a href="https://stackoverflow.com/a/2295372/181765">one recommended by Adrien Plisson</a>. Create a lambda with an extra argument, and set the extra argument's default value to the object you want preserved.</p></li>
<li><p>A little more verbose but less hacky would be to create a new scope each time you create the lambda:</p>
<pre><code>&gt;&gt;&gt; adders = [0,1,2,3]
&gt;&gt;&gt; for i in [0,1,2,3]:
...     adders[i] = (lambda b: lambda a: b + a)(i)
...     
&gt;&gt;&gt; adders[1](3)
4
&gt;&gt;&gt; adders[2](3)
5
</code></pre>
<p>The scope here is created using a new function (a lambda, for brevity), which binds its argument, and passing the value you want to bind as the argument. In real code, though, you most likely will have an ordinary function instead of the lambda to create the new scope:</p>
<pre><code>def createAdder(x):
    return lambda y: y + x
adders = [createAdder(i) for i in range(4)]
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>you may force the capture of a variable using an argument with a default value:</p>
<pre><code>&gt;&gt;&gt; for i in [0,1,2,3]:
...    adders[i]=lambda a,i=i: i+a  # note the dummy parameter with a default value
...
&gt;&gt;&gt; print( adders[1](3) )
4
</code></pre>
<p>the idea is to declare a parameter (cleverly named <code>i</code>) and give it a default value of the variable you want to capture (the value of  <code>i</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>For completeness another answer to your second question: You could use <a href="http://docs.python.org/library/functools.html#functools.partial" rel="noreferrer">partial</a> in the <a href="http://docs.python.org/library/functools.html" rel="noreferrer">functools</a> module.</p>
<p>With importing add from operator as Chris Lutz proposed the example becomes: </p>
<pre><code>from functools import partial
from operator import add   # add(a, b) -- Same as a + b.

adders = [0,1,2,3]
for i in [0,1,2,3]:
   # store callable object with first argument given as (current) i
   adders[i] = partial(add, i) 

print adders[1](3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider the following code:</p>
<pre><code>x = "foo"

def print_x():
    print x

x = "bar"

print_x() # Outputs "bar"
</code></pre>
<p>I think most people won't find this confusing at all. It is the expected behaviour.</p>
<p>So, why do people think it would be different when it is done in a loop? I know I did that mistake myself, but I don't know why. It is the loop? Or perhaps the lambda?</p>
<p>After all, the loop is just a shorter version of:</p>
<pre><code>adders= [0,1,2,3]
i = 0
adders[i] = lambda a: i+a
i = 1
adders[i] = lambda a: i+a
i = 2
adders[i] = lambda a: i+a
i = 3
adders[i] = lambda a: i+a
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In answer to your second question, the most elegant way to do this would be to use a function that takes two parameters instead of an array:</p>
<pre><code>add = lambda a, b: a + b
add(1, 3)
</code></pre>
<p>However, using lambda here is a bit silly. Python gives us the <code>operator</code> module, which provides a functional interface to the basic operators. The lambda above has unnecessary overhead just to call the addition operator:</p>
<pre><code>from operator import add
add(1, 3)
</code></pre>
<p>I understand that you're playing around, trying to explore the language, but I can't imagine a situation I would use an array of functions where Python's scoping weirdness would get in the way.</p>
<p>If you wanted, you could write a small class that uses your array-indexing syntax:</p>
<pre><code>class Adders(object):
    def __getitem__(self, item):
        return lambda a: a + item

adders = Adders()
adders[1](3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a new example that highlights the data structure and contents of a closure, to help clarify when the enclosing context is "saved."</p>
<pre><code>def make_funcs():
    i = 42
    my_str = "hi"

    f_one = lambda: i

    i += 1
    f_two = lambda: i+1

    f_three = lambda: my_str
    return f_one, f_two, f_three

f_1, f_2, f_3 = make_funcs()
</code></pre>
<p>What is in a closure?</p>
<pre><code>&gt;&gt;&gt; print f_1.func_closure, f_1.func_closure[0].cell_contents
(&lt;cell at 0x106a99a28: int object at 0x7fbb20c11170&gt;,) 43 
</code></pre>
<p>Notably, my_str is not in f1's closure.</p>
<p>What's in f2's closure?</p>
<pre><code>&gt;&gt;&gt; print f_2.func_closure, f_2.func_closure[0].cell_contents
(&lt;cell at 0x106a99a28: int object at 0x7fbb20c11170&gt;,) 43
</code></pre>
<p>Notice (from the memory addresses) that both closures contain the same objects. So, you can <em>start</em> to think of the lambda function as having a reference to the scope. However, my_str is not in the closure for f_1 or f_2, and i is not in the closure for f_3 (not shown), which suggests the closure objects themselves are distinct objects.</p>
<p>Are the closure objects themselves the same object?</p>
<pre><code>&gt;&gt;&gt; print f_1.func_closure is f_2.func_closure
False
</code></pre>
</div>
<span class="comment-copy">I have had this problem in UI code. Drove me nuts. The trick is to remember that loops do not create new scope.</span>
<span class="comment-copy">@TimMB How does <code>i</code> leave the namespace?</span>
<span class="comment-copy">@detly Well I was going to say that <code>print i</code> wouldn't work after the loop. But I tested it for myself and now I see what you mean - it does work. I had no idea that loop variables lingered after the loop body in python.</span>
<span class="comment-copy">@TimMB - Yeah, that's what I meant. Same for <code>if</code>, <code>with</code>, <code>try</code> etc.</span>
<span class="comment-copy">This is in the official Python FAQ, under <a href="https://docs.python.org/3/faq/programming.html#why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result" rel="nofollow noreferrer">Why do lambdas defined in a loop with different values all return the same result?</a>, with both an explanation and the usual workaround.</span>
<span class="comment-copy">Max, if you add an answer for my other (simpler question), I can mark this as an accepted answer. Thx!</span>
<span class="comment-copy">Python has static scoping, not dynamic scoping.. it's just all variables are references, so when you set a variable to a new object, the variable itself (the reference) has the same location, but it points to something else. the same thing happens in Scheme if you <code>set!</code>. see here for what dynamic scope really is: <a href="http://www.voidspace.org.uk/python/articles/code_blocks.shtml" rel="nofollow noreferrer">voidspace.org.uk/python/articles/code_blocks.shtml</a> .</span>
<span class="comment-copy">Option 2 resembles what functional languages would call a "Curried function."</span>
<span class="comment-copy">+1 for using default values. Being evaluated when the lambda is defined makes them perfect for this use.</span>
<span class="comment-copy">+1 also because this is the solution endorsed by <a href="https://docs.python.org/3/faq/programming.html#why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result" rel="nofollow noreferrer">the official FAQ</a>.</span>
<span class="comment-copy"><b>This is amazing.</b> The default Python behaviour, however, is not.</span>
<span class="comment-copy">I like this answer a lot, it's the cleanest solution I've seen to this.</span>
<span class="comment-copy">It's the loop, because in many other languages a loop can create a new scope.</span>
<span class="comment-copy">This answer is good because it explains why the same <code>i</code> variable is being accessed for each lambda function.</span>
<span class="comment-copy">Chris, of course the above code have nothing to do with my original problem. It's constructed to illustrate my point in a simple way. It is of course pointless and silly.</span>
<span class="comment-copy">NB The output <code>int object at [address X]&gt;</code> made me think the closure is storing [address X] AKA a reference. However, [address X] will change if the variable is reassigned after the lambda statement.</span>
