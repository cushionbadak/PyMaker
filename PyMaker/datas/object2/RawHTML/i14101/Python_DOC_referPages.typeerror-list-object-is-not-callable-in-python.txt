<div class="post-text" itemprop="text">
<p>I am novice to Python and following a tutorial. There is an example of <code>list</code> in the tutorial :</p>
<pre><code>example = list('easyhoss')
</code></pre>
<p>Now, In tutorial, <code>example= ['e','a',...,'s']</code>. But in my case I am getting following error:</p>
<pre><code>&gt;&gt;&gt; example = list('easyhoss')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'list' object is not callable
</code></pre>
<p>Please tell me where I am wrong. I searched SO <a href="https://stackoverflow.com/questions/5735841/python-typeerror-list-object-is-not-callable">this</a> but it is different.</p>
</div>
<div class="post-text" itemprop="text">
<p>Seems like you've shadowed the builtin name <code>list</code> pointing at a class by the same name pointing at its instance. Here is an example:</p>
<pre><code>&gt;&gt;&gt; example = list('easyhoss')  # here `list` refers to the builtin class
&gt;&gt;&gt; list = list('abc')  # we create a variable `list` referencing an instance of `list`
&gt;&gt;&gt; example = list('easyhoss')  # here `list` refers to the instance
Traceback (most recent call last):
File "&lt;string&gt;", line 1, in &lt;module&gt;
TypeError: 'list' object is not callable
</code></pre>
<p>I believe this is fairly obvious. Python stores object names (functions and classes are objects, too) in dictionaries (namespaces are implemented as dictionaries), hence you can rewrite pretty much any name in any scope. It won't show up as an error of some sort. As you might know Python emphasizes that "special cases aren't special enough to break the rules". And there are two major rules behind the problem you've faced.</p>
<ol>
<li><p><em>Namespaces</em>. Python supports nested namespaces. Theoretically you can endlessly nest namespaces. As I've already mentioned, namespaces are basically dictionaries of names and references to corresponding objects. Any module you create gets its own "global" namespace. In fact it's just a local namespace with respect to that particular module. </p></li>
<li><p><em>Scoping</em>. When you reference a name, the Python runtime looks it up in the local namespace (with respect to the reference) and, if such name does not exist, it repeats the attempt in a higher-level namespace. This process continues until there are no higher namespaces left. In that case you get a <code>NameError</code>. Builtin functions and classes reside in a special high-order namespace <code>__builtins__</code>. If you declare a variable named <code>list</code> in your module's global namespace, the interpreter will never search for that name in a higher-level namespace (that is <code>__builtins__</code>). Similarly, suppose you create a variable <code>var</code> inside a function in your module, and another variable <code>var</code> in the module. Then, if you reference <code>var</code> inside the function, you will never get the global <code>var</code>, because there is a <code>var</code> in the local namespace - the interpreter has no need to search it elsewhere. </p></li>
</ol>
<p>Here is a simple illustration.</p>
<pre><code>    &gt;&gt;&gt; example = list("abc") # Works fine
    # Creating name "list" in the global namespace of the module
    &gt;&gt;&gt; list = list("abc")    
    &gt;&gt;&gt; example = list("abc")  
    Traceback (most recent call last):
      File "&lt;stdin&gt;", line 1, in &lt;module&gt;
    TypeError: 'list' object is not callable
    # Python looks for "list" and finds it in the global namespace. 
    # But it's not the proper "list".
    # Let's remove "list" from the global namespace
    &gt;&gt;&gt; del list
    # Since there is no "list" in the global namespace of the module,
    # Python goes to a higher-level namespace to find the name. 
    &gt;&gt;&gt; example = list("abc") # It works.
</code></pre>
<p>So, as you see there is nothing special about Python builtins. And your case is a mere example of universal rules. You'd better use an IDE (e.g. a free version of PyCharm or Atom with Python plugins) that highlights name shadowing to avoid such errors.</p>
<p>You might as well be wondering what is a "callable", in which case you can read the following post: <a href="https://stackoverflow.com/a/111255/3846213">https://stackoverflow.com/a/111255/3846213</a>. <code>list</code>, being a class, is callable. Calling a class triggers instance construction and initialisation. An instance might as well be callable, but <code>list</code> instances are not. If you are even more puzzled by the distinction between classes and instances, then you might want to read <a href="https://docs.python.org/3.7/tutorial/classes.html#" rel="nofollow noreferrer">the documentation</a> (quite conveniently, the same page covers namespaces and scoping).</p>
<p>If you want to know more about builtins, please read the answer by Christian Dean. </p>
<p><strong>P.S.</strong></p>
<p>When you start an interactive Python session you create a temporary module. </p>
</div>
<div class="post-text" itemprop="text">
<p>Before you can fully understand what the error means and how to solve, it is important to understand what a built-in name is in Python.</p>
<h2>What is a built-in name?</h2>
<p>In Python, a built-in name is a <strong>name that the Python interpreter already has assigned a predefined value</strong>. The value can be either a <em>function</em> or <em>class</em> object. These names are always made available by default, no matter the scope. Some of the values assigned to these names represent fundamental types of the Python language, while others are simple useful. </p>
<p>As of the latest version of Python - <a href="https://docs.python.org/3/" rel="noreferrer">3.6.2</a> - there are currently <em>61</em> built-in names. A full list of the names and how they should be used, can be found in the documentation section <a href="https://docs.python.org/3/library/functions.html#built-in-functions" rel="noreferrer"><em>Built-in Functions</em></a>.</p>
<p>An important point to note however, is that <strong>Python <em>will not</em> stop you from <em>re</em>-assigning builtin names</strong>. Built-in names are not reserved, and Python allows them to be used as variable names as well.</p>
<p>Here is an example using the <a href="https://docs.python.org/3/library/functions.html?highlight=dict#func-dict" rel="noreferrer"><code>dict</code></a> built-in:</p>
<pre><code>&gt;&gt;&gt; dict = {}
&gt;&gt;&gt; dict
{}
&gt;&gt;&gt;
</code></pre>
<p>As you can see, Python allowed us to assign the <code>dict</code> name, to <em>reference a dictionary object</em>.</p>
<h2>What does "TypeError: 'list' object is not callable" mean?</h2>
<p>To put it simply, the reason the error is occurring is because you <strong><em>re-assigned</em></strong> the <em>builtin name</em> <code>list</code> in the script:</p>
<pre><code>list = [1, 2, 3, 4, 5]
</code></pre>
<p>When you did this, <strong>you overwrote the predefined value of the built-in name</strong>. This means you can no longer use the predefined value of <code>list</code>, which is a class object representing Python list.</p>
<p>Thus, when you tried to use the <code>list</code> class to create a new list from a <code>range</code> object:</p>
<pre><code>myrange = list(range(1, 10))
</code></pre>
<p>Python raised an error. The reason the error says "'list' object is not callable", is because as said above, the name <code>list</code> was referring to a list object. So the above would be the equivalent of doing:</p>
<pre><code>[1, 2, 3, 4, 5](range(1, 10))
</code></pre>
<p>Which of course makes no sense. You cannot call a list object.</p>
<h2>How can I fix the error?</h2>
<p>Suppose you have code such as the following:</p>
<pre><code>list = [1, 2, 3, 4, 5]
myrange = list(range(1, 10))

for number in list:
    if number in myrange:
        print(number, 'is between 1 and 10')
</code></pre>
<p>Running the above code produces the following error:</p>
<pre><code>Traceback (most recent call last):
  File "python", line 2, in &lt;module&gt;
TypeError: 'list' object is not callable
</code></pre>
<p>If you are getting a similar error such as the one above saying an "object is not callable", chances are you used a builtin name as a variable in your code. <em><strong>In this case and other cases the fix is as simple as renaming the offending variable</strong></em>. For example, to fix the above code, we could rename our <code>list</code> variable to <code>ints</code>:</p>
<pre><code>ints = [1, 2, 3, 4, 5] # Rename "list" to "ints"
myrange = list(range(1, 10))

for number in ints: # Renamed "list" to "ints"
    if number in myrange:
        print(number, 'is between 1 and 10')
</code></pre>
<p><a href="https://www.python.org/dev/peps/pep-0008/#naming-conventions" rel="noreferrer">PEP8</a> - the official Python style guide - includes many recommendations on naming variables.</p>
<p>This is a very common error new and old Python users make. This is why it's important to always avoid using built-in names as variables such as <code>str</code>, <code>dict</code>, <code>list</code>, <code>range</code>, etc.</p>
<p>Many linters and IDEs will warn you when you attempt to use a built-in name as a variable. If your frequently make this mistake, it may be worth your time to invest in one of these programs.</p>
<h2>I didn't rename a built-in name, but I'm still getting "TypeError: 'list' object is not callable". What gives?</h2>
<p>Another common cause for the above error is attempting to index a list using parenthesis (<code>()</code>) rather than square brackets (<code>[]</code>). For example:</p>
<pre><code>&gt;&gt;&gt; lst = [1, 2]
&gt;&gt;&gt; lst(0)

Traceback (most recent call last):
  File "&lt;pyshell#32&gt;", line 1, in &lt;module&gt;
    lst(0)
TypeError: 'list' object is not callable
</code></pre>
<p>For an explanation of the full problem and what can be done to fix it, see <a href="https://stackoverflow.com/questions/5735841/typeerror-list-object-is-not-callable-while-trying-to-access-a-list">TypeError: 'list' object is not callable while trying to access a list</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You may have used built-in name 'list' for a variable in your code.
If you are using Jupyter notebook, sometimes even if you change the name of that variable from 'list' to something different and rerun that cell, you may still get the error. In this case you need to restart the Kernal. 
In order to make sure that the name has change, click on the word 'list' when you are creating a list object and press Shit+Tab, and check if Docstring shows it as an empty list.</p>
<p><a href="https://i.stack.imgur.com/z0Un0.png" rel="nofollow noreferrer"><img alt="Used Built-in list name for my list" src="https://i.stack.imgur.com/z0Un0.png"/></a></p>
<p><a href="https://i.stack.imgur.com/3fvId.png" rel="nofollow noreferrer"><img alt="Change my list name to my_list but still get error, Shift+Tab shows that list still hold the values of my_list" src="https://i.stack.imgur.com/3fvId.png"/></a></p>
<p><a href="https://i.stack.imgur.com/W5Pih.png" rel="nofollow noreferrer"><img alt="Restart Kernal and it's all good" src="https://i.stack.imgur.com/W5Pih.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you are in a interactive session and don't want to restart you can remove the shadowing with </p>
<pre><code>del list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Why does <code>TypeError: 'list' object is not callable</code> appear?</h1>
<p><strong>Explanation:</strong></p>
<p>It is because you defined <code>list</code> as a variable before (i am pretty sure), so it would be a list, not the function anymore, that's why everyone shouldn't name variables functions, the below is the same as what you're doing now:</p>
<pre><code>&gt;&gt;&gt; [1,2,3]()
Traceback (most recent call last):
  File "&lt;pyshell#0&gt;", line 1, in &lt;module&gt;
    [1,2,3]()
TypeError: 'list' object is not callable
&gt;&gt;&gt;  
</code></pre>
<p>So you need it to be the default function of <code>list</code>, how to detect if it is? just use:</p>
<pre><code>&gt;&gt;&gt; list
&lt;class 'list'&gt;
&gt;&gt;&gt; list = [1,2,3]
&gt;&gt;&gt; list
[1, 2, 3]
&gt;&gt;&gt; list()
Traceback (most recent call last):
  File "&lt;pyshell#4&gt;", line 1, in &lt;module&gt;
    list()
TypeError: 'list' object is not callable
&gt;&gt;&gt; 
</code></pre>
<p>How do i detect whether a variable name is a function? well, just simple see if it has a different color, or use a code like:</p>
<pre><code>&gt;&gt;&gt; 'list' in dir(__builtins__)
True
&gt;&gt;&gt; 'blah' in dir(__builtins__)
False
&gt;&gt;&gt; 
</code></pre>
<p>After this, you should know why does <code>TypeError: 'list' object is not callable</code> appear.</p>
<p>Okay, so now...</p>
<h1>How to fix this <code>TypeError: 'list' object is not callable</code> error?</h1>
<p><strong>Code:</strong></p>
<p>You have to either do <code>__builtins__.list()</code>:</p>
<pre><code>&gt;&gt;&gt; list = [1,2,3]
&gt;&gt;&gt; __builtins__.list()
[]
&gt;&gt;&gt; 
</code></pre>
<p>Or use <code>[]</code>:</p>
<pre><code>&gt;&gt;&gt; list = [1,2,3]
&gt;&gt;&gt; []
[]
&gt;&gt;&gt; 
</code></pre>
<p>Or remove <code>list</code> variable from memory:</p>
<pre><code>&gt;&gt;&gt; list = [1,2,3]
&gt;&gt;&gt; del list
&gt;&gt;&gt; list()
[]
&gt;&gt;&gt; 
</code></pre>
<p>Or just rename the variable:</p>
<pre><code>&gt;&gt;&gt; lst = [1,2,3]
&gt;&gt;&gt; list()
[]
&gt;&gt;&gt; 
</code></pre>
<p><em>P.S. Last one is the most preferable i guess :-)</em></p>
<p>There are a whole bunch of solutions that work.</p>
<p>References:</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/77552/id-is-a-bad-variable-name-in-python">'id' is a bad variable name in Python</a></p>
<p><a href="https://stackoverflow.com/questions/37968516/how-do-i-use-a-keyword-as-a-variable-name">How do I use a keyword as a variable name?</a></p>
<p><a href="https://stackoverflow.com/questions/44859431/how-to-use-reserved-keyword-as-the-name-of-variable-in-python">How to use reserved keyword as the name of variable in python?</a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>For me it was a <strong>flask server</strong> returning some <code>videos</code> array (which I expected to be in json format..)</p>
<p>adding <code>json.dumps(videos)</code> fixed this issue</p>
</div>
<span class="comment-copy">Somewhere you've assigned <i>an actual list instance</i> to the name <code>list</code>, shadowing the built-in; <b>don't do that</b>!</span>
<span class="comment-copy">did you assign any values to <code>example</code> ?</span>
<span class="comment-copy">@jonrsharpe perhaps you should elaborate on that? OP might not fully understand what you’ve written</span>
<span class="comment-copy">Try <code>print(list)</code> and see what you get.</span>
<span class="comment-copy">@khanshah There are keywords. <code>list</code> isn't one of them.</span>
<span class="comment-copy">So, what does it do? List is built in. It should work fine.</span>
<span class="comment-copy">@khanshah Python is very flexible: you can reassign builtins to something else, like here.</span>
<span class="comment-copy">@khanshah Try it and see how it doesn't work.</span>
<span class="comment-copy">You can always retrieve the original built-in with <code>__builtins__.list</code>.</span>
<span class="comment-copy">@khanshah see my edit.</span>
<span class="comment-copy">Yes same here. The return type from query on SQLAlchemy table had to be wrapped with json.dumps to get rid of this error.</span>
<span class="comment-copy">do you know why?</span>
