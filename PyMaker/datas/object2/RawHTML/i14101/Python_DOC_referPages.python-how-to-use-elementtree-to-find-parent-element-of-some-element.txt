<div class="post-text" itemprop="text">
<p>I am using the builtin Python ElementTree module. It is straightforward to access children, but what about parent or sibling nodes? - can this be done efficiently without traversing the entire tree?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no direct support in the form of a <code>parent</code> attribute, but you can perhaps use the patterns described <a href="http://effbot.org/zone/element.htm#accessing-parents" rel="noreferrer">here</a> to achieve the desired effect. The following one-liner is suggested (from the linked-to post) to create a child-to-parent mapping for a whole tree:</p>
<pre><code>parent_map = dict((c, p) for p in tree.getiterator() for c in p)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/2170994/1556416">Vinay's answer</a> should still work, but for Python 2.7+ and 3.2+ the following is recommended:</p>
<pre><code>parent_map = {c:p for p in tree.iter() for c in p}
</code></pre>
<p><code>getiterator()</code> is deprecated in favor of <code>iter()</code>, and it's nice to use the new <code>dict</code> list comprehension constructor.</p>
<p>Secondly, while constructing an XML document, it is possible that a child will have multiple parents, although this gets removed once you serialize the document. If that matters, you might try this:</p>
<pre><code>parent_map = {}
for p in tree.iter():
    for c in p:
        if c in parent_map:
            parent_map[c].append(p)
            # Or raise, if you don't want to allow this.
        else:
            parent_map[c] = [p]
            # Or parent_map[c] = p if you don't want to allow this
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use xpath <code>...</code> notation in ElementTree.</p>
<pre><code>&lt;parent&gt;
     &lt;child id="123"&gt;data1&lt;/child&gt;
&lt;/parent&gt;

xml.findall('.//child[@id="123"]...')
&gt;&gt; [&lt;Element 'parent'&gt;]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in <a href="https://stackoverflow.com/questions/24239435/get-parent-element-after-using-find-method-xml-etree-elementtree">Get parent element after using find method (xml.etree.ElementTree)</a> you would have to do an indirect search for parent.
Having xml:</p>
<pre><code>&lt;a&gt;
 &lt;b&gt;
  &lt;c&gt;data&lt;/c&gt;
  &lt;d&gt;data&lt;/d&gt;    
 &lt;/b&gt;
&lt;/a&gt;
</code></pre>
<p>Assuming you have created etree element into <code>xml</code> variable, you can use:</p>
<pre><code> In[1] parent = xml.find('.//c/..')
 In[2] child = parent.find('./c')
</code></pre>
<p>Resulting in:</p>
<pre><code>Out[1]: &lt;Element 'b' at 0x00XXXXXX&gt; 
Out[2]: &lt;Element 'c' at 0x00XXXXXX&gt;
</code></pre>
<p>Higher parent would be found as:<code>secondparent=xml.find('.//c/../..')</code> being <code>&lt;Element 'a' at 0x00XXXXXX&gt;</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Another way if just want a single subElement's parent and also known the subElement's xpath.</p>
<pre><code>parentElement = subElement.find(xpath+"/..")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are using lxml, I was able to get the parent element with the following:</p>
<pre><code>parent_node = next(child_node.iterancestors())
</code></pre>
<p>This will raise a <code>StopIteration</code> exception if the element doesn't have ancestors - so be prepared to catch that if you may run into that scenario.</p>
</div>
<div class="post-text" itemprop="text">
<p>The XPath '..' selector cannot be used to retrieve the parent node on 3.5.3 nor 3.6.1 (at least on OSX),
eg in interactive mode:</p>
<pre><code>import xml.etree.ElementTree as ET
root = ET.fromstring('&lt;parent&gt;&lt;child&gt;&lt;/child&gt;&lt;/parent&gt;')
child = root.find('child')
parent = child.find('..') # retrieve the parent
parent is None # unexpected answer True
</code></pre>
<p>The last answer breaks all hopes...</p>
</div>
<div class="post-text" itemprop="text">
<p>Pasting here my answer from <a href="https://stackoverflow.com/a/54943960/492336">https://stackoverflow.com/a/54943960/492336</a>:</p>
<p>I had a similar problem and I got a bit creative. Turns out nothing prevents us from adding the parentage info ourselves. We can later strip it once we no longer need it.</p>
<pre><code>def addParentInfo(et):
    for child in et:
        child.attrib['__my_parent__'] = et
        addParentInfo(child)

def stripParentInfo(et):
    for child in et:
        child.attrib.pop('__my_parent__', 'None')
        stripParentInfo(child)

def getParent(et):
    if '__my_parent__' in et.attrib:
        return et.attrib['__my_parent__']
    else:
        return None

# Example usage

tree = ...
addParentInfo(tree.getroot())
el = tree.findall(...)[0]
parent = getParent(el)
while parent:
    doSomethingWith(parent)
    parent = getParent(parent)
stripParentInfo(tree.getroot())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Look at the 19.7.2.2. section: <a href="https://docs.python.org/2/library/xml.etree.elementtree.html#example" rel="nofollow noreferrer">Supported XPath syntax</a> ...</p>
<p>Find node's parent using the path:</p>
<pre><code>parent_node = node.find('..')
</code></pre>
</div>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/374245/how-to-retrieve-the-parent-node-using-celementtree" title="how to retrieve the parent node using celementtree">stackoverflow.com/questions/374245/…</a></span>
<span class="comment-copy">Syntax update, 2017 / python3  <code>parent_map = {(c,p) for p in tree.iter( ) for c in p}</code></span>
<span class="comment-copy">Correction:  <code>parent_map = {c:p for p in root.iter( ) for c in p}</code></span>
<span class="comment-copy">What if you don't have access to the tree?  Like after a .find()</span>
<span class="comment-copy">I don't know of any way to get the root node (and thus parents/ancestors) if you didn't save a reference to it. But I don't understand how <code>.find()</code> has anything to do with that.</span>
<span class="comment-copy">i just used <code>.find()</code> as an example function that just returns an element</span>
<span class="comment-copy">This is fantastic solution, works with find() also if you know there's just a single element that you are looking for. Like so:  <code>root.find(".//*[@testname='generated_sql']...")</code></span>
<span class="comment-copy">I could not find anything about this <code>...</code> XPath syntax. What does it do? Are there docs on it?</span>
<span class="comment-copy">@raphinesse <code>...</code> expression comes from XPath 1.0. Python Std Library have limited support for XPath expressions, lxml have more support.</span>
<span class="comment-copy">Doesn't work for me, I get 'None' - same if i just use <code>subElement.find('..')</code>.</span>
<span class="comment-copy">Did you test this? If you were able to make it work, please post a complete code example that demonstrates it. See this comment: <a href="https://stackoverflow.com/questions/2170610/access-elementtree-node-parent-node#comment44519212_21963494" title="access elementtree node parent node%23comment44519212_21963494">stackoverflow.com/questions/2170610/…</a></span>
<span class="comment-copy">The Python 3 documentation says: "Returns <code>None</code> if the path attempts to reach the ancestors of the start element (the element <code>find</code> was called on)." (<a href="https://docs.python.org/3/library/xml.etree.elementtree.html#supported-xpath-syntax" rel="nofollow noreferrer">docs.python.org/3/library/…</a>).</span>
<span class="comment-copy">Works for me. The best and most consise answer.</span>
<span class="comment-copy">Does not work for me</span>
<span class="comment-copy">This returns None...</span>
