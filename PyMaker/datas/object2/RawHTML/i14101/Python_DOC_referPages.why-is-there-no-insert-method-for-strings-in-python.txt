<div class="post-text" itemprop="text">
<p>Lists already have an insert() method that works with indexes:</p>
<pre><code>&gt;&gt;&gt; someList = [1, 2, 4, 5]
&gt;&gt;&gt; someList
[1, 2, 4, 5]
&gt;&gt;&gt; someList.insert(2, 3)
&gt;&gt;&gt; someList
[1, 2, 3, 4, 5]
</code></pre>
<p>If strings also have indexes, why not an insert() method for them too? Example below:</p>
<pre><code>&gt;&gt;&gt; someString = 'foobar'
&gt;&gt;&gt; someString.insert(3, 'SPAM')
&gt;&gt;&gt; someString
'fooSPAMbar'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Short answer: Because strings are immutable.</h2>
<p>Every type in Python is either mutable (like a list, a dictionary, or a normal object) , or immutable (like tuples, strings, ints, ...).</p>
<p>That's why you can append, pop, and insert in and from lists, but not tuples.
When you do something like this:</p>
<pre><code>a = "this"
a = a + "that"
</code></pre>
<p><code>a</code> seems to have "changed" to <code>"thisthat"</code>, but actually, the name <code>a</code> just points to a new string. You can observe that effect if you hand something to a function and try to modify it in the function: Mutable types will also change outside (although you should usually avoid these side-effects), while immutables won't:</p>
<pre><code>a = 3
b = [3]
def change_a(something):
    something = 4
def change_b(something):
    something[0] = 4
change_a(a)
change_b(b)
print(a,b) # prints "3 4"
</code></pre>
<p>If you need to mutate strings, you might want to look into <a href="https://docs.python.org/2/library/stringio.html" rel="nofollow">StringIO</a> for Python 2, or <a href="https://docs.python.org/3/library/io.html" rel="nofollow">io.StringIO</a> for Python 3, respectively:</p>
<pre><code>import io
def insert(s,where,what):
    whatlen=len(what)
    s.seek(0)
    cur=len(s.read())
    if cur &lt; where:
        raise IndexError("Can't insert at position {}: Index out of bounds"
                .format(where))
    s.seek(where)
    r=s.read()
    s.seek(where+whatlen)
    s.write(r)
    s.seek(where)
    s.write(what)

s = io.StringIO("This is a test")

insert(s,5,"hello")
s.seek(0)
print(s.read()) #prints "This hellois a test"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because strings are immutable.  You can't change the contents of a string.  You'd have to make a new string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because strings are decidedly immutable. As are tuples.</p>
</div>
<div class="post-text" itemprop="text">
<p>Traditional strings are immutable. You can actually use the deprecated <code>MutableString</code> to do this:</p>
<pre><code>string = UserString.MutableString('foobar') # then insert, call string.insert(3, 'SPAM')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hence List are a mutable we can make changes in a list. But Strings ar ean immutable one, we can append charaters in a string. But we cannot change the index position values in a string.</p>
</div>
<span class="comment-copy">Strings are immutable, duh!</span>
<span class="comment-copy"><code>MutableString</code> may be worth mentioning.</span>
<span class="comment-copy"><code>MutableString</code> is deprecated in Python 2 and non-existent in Python 3.</span>
<span class="comment-copy">Yes, I know. But if he's looking for a workaround that's a good option.</span>
<span class="comment-copy">I added a reference to StringIO for something like mutable strings. Since they didn't specify the version of Python they're using, I'm assuming the most recent one.</span>
<span class="comment-copy"><code>StringIO</code> doesn't seem to have any methods as described in the problem.</span>
<span class="comment-copy">I believe <code>MutableString</code> is actually internalized with a list.</span>
