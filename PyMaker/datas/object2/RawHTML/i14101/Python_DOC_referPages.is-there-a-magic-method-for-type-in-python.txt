<div class="post-text" itemprop="text">
<p>I was wondering if there was a magic method in Python that supported the type() built-in function, that would allow you to set a custom value to be returned.</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there is no such method. An instance's type is not something you can dynamically alter when querying for it, as that would be type-specific behaviour, but you suddenly cannot determine the type that is defining that behaviour!</p>
<p>You <em>can</em> assign a different class to <code>instance.__class__</code>, but then you'd materially alter the behaviour of that instance, and it is not the instance itself that then changes type when <code>type()</code> is applied to the instance.</p>
<p>Rather than using <code>type()</code>, use the <code>isinstance()</code> and <code>issubclass()</code> functions instead, and use abstract base types; it is the <em>type object</em> that is then responsible for claiming a specific class or instance as a subclass or instance of the given type, respectively. They can do this via the <a href="https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks" rel="noreferrer"><code>__issubclass__</code> and <code>__isinstance__</code> hooks</a>.</p>
</div>
<span class="comment-copy">And what would that achieve? What problem do you think you can solve with this?</span>
<span class="comment-copy">The short answer is: no, there is no such method. You can switch the type on an instance (just assign a different class object to <code>instance.__class__</code> but that means behaviour changes as well.</span>
<span class="comment-copy">I was purely academically interested.</span>
<span class="comment-copy">Okay thank you.</span>
