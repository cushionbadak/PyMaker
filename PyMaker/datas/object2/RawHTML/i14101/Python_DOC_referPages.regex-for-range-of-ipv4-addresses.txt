<div class="post-text" itemprop="text">
<p>With an IPv4 address range like 169.254.0.0/16 or 192.168.0.0/16, it is straightforward to construct a regex for each, since once you exactly match the first 6 digits, you're done.</p>
<p>But what about matching any address in a looser reserved range such as</p>
<pre><code>100.64.0.0 –
100.127.255.255
</code></pre>
<p>A regex beginning with <code>100\.</code> won't suffice, because there will be numbers outside of the 100.64 and 100.127 bounds (e.g. 100.65.0.0, 100.127.255.256) that will be erroneously matched. How best to capture a range such as this without having to explicitly define each and every valid subrange within each range? The language is Python.</p>
<p>For reference, a full list of reserved IP addresses and ranges can be found <a href="https://en.wikipedia.org/wiki/Reserved_IP_addresses" rel="nofollow">here</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use of an IPv4 parsing library is preferred. If you insist in using regular expression,</p>
<p><code>re.search('^(100\.(6[4-9]|[7-9]\d|1[0-1]\d|12[0-7])(\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])){2})$', text)</code></p>
<p>You can see that I am searching separately for:</p>
<ul>
<li>64-69 (<code>6[4-9]</code>)</li>
<li>70-99 (<code>[7-9]\d</code>)</li>
<li>100-119 (<code>1[0-1]\d</code>)</li>
<li>120-127 (<code>12[0-7]</code>)</li>
</ul>
<p>and</p>
<ul>
<li>0-9 (<code>\d</code>)</li>
<li>10-99 (<code>[1-9]\d</code>)</li>
<li>100-199 (<code>1\d\d</code>)</li>
<li>200-249 (<code>2[0-4]\d</code>)</li>
<li>250-255 (<code>25[0-5]</code>)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This is one way to do it:</p>
<pre><code>import re

print re.findall(r'\d+\.\S+\d', 'fdgsdfg 100.127.255.255 ggffgsdf 100.64.0.0 asdffsdf')
</code></pre>
<p>Output:</p>
<pre><code>['100.127.255.255', '100.64.0.0']
</code></pre>
</div>
<span class="comment-copy">dupe? <a href="http://stackoverflow.com/questions/106179/regular-expression-to-match-dns-hostname-or-ip-address" title="regular expression to match dns hostname or ip address">stackoverflow.com/questions/106179/…</a></span>
<span class="comment-copy">Why don't you use an IP address library? <a href="https://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer">docs.python.org/3/library/ipaddress.html</a> or <a href="https://pypi.python.org/pypi/py2-ipaddress/" rel="nofollow noreferrer">pypi.python.org/pypi/py2-ipaddress</a></span>
<span class="comment-copy">@TessellatingHeckler because ipaddress.ip_address will only tell me that an address is valid. It does not help me detect reserved IP addresses.</span>
<span class="comment-copy">@Pyderman yes it does. <code>try: addr = IPv4Address(text); except ValueError: print("not a valid IP address")</code> <code>if addr in IPv4Network('100.64.0.0/10'): print("that's a reserved address")</code></span>
<span class="comment-copy">@Pyderman You're missing the wonders of Python container types. "address in network".  Try <code>IPv4Address('100.64.1.1') in IPv4Network('100.64.0.0/10')</code> and it will say True. Try <code>IPv4Address('100.63.1.1') in IPv4Network('100.64.0.0/10')</code> and it's False</span>
<span class="comment-copy">That doesn't answer if 100.127.255.255 is in the 100.64.0.0/10 subnet or not.</span>
<span class="comment-copy">what do you mean?</span>
<span class="comment-copy">@TessellatingHeckler what do you mean?</span>
<span class="comment-copy">I mean the question is not asking about pulling an IP address out of a line of text, which is what you are doing. The question is asking about comparing one IP address to see if it is between two others. It's the difference between "pulling a number out of a line of text" and "seeing if a number is between 5 and 15". IP addresses and networks have a tree structure. <code>10.0.5.0/24</code> is <i>in</i> <code>10.0.0.0/16</code> and it is also <i>in</i> <code>8.0.0.0/6</code>, and it is within the range <code>10.0.4.0-10.0.8.254</code>. It is this kind of test that the question was asking for - something which works with the way IPs work.</span>
