<div class="post-text" itemprop="text">
<p>Given an list of integers does exists a default method find the max distance between values?</p>
<p>So if I have this array</p>
<pre><code>[1, 3, 5, 9, 15, 30]
</code></pre>
<p>The max step between the values is 15. Does the list object has a method for do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, <code>list</code> objects have no standard "adjacent differences" method or the like. However, using the <code>pairwise</code> function mentioned in the <a href="https://docs.python.org/2/library/itertools.html#recipes" rel="nofollow noreferrer"><code>itertools</code> recipes</a>:</p>
<pre><code>def pairwise(iterable):
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)
</code></pre>
<p>...you can (concisely <em>and</em> efficiently) define</p>
<pre><code>&gt;&gt;&gt; max(b-a for (a,b) in pairwise([1, 3, 5, 9, 15, 30]))
15
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No, but it's trivial to code:</p>
<pre><code>last = data[0]
dist = 0
for i in data[1:]:
    dist = max(dist, i-last)
    last = i
return dist
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do:</p>
<pre><code>&gt;&gt;&gt; s = [1, 3, 5, 9, 15, 30]
&gt;&gt;&gt; max(x[0] - x[1] for x in zip(s[1:], s))
15
</code></pre>
<p>This uses <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow"><code>max</code></a> and <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a>. It computes the difference between all consecutive elements and returns the max of those.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>l=[1, 3, 5, 9, 15, 30]
max([j-i for i, j in zip(l[:-1], l[1:])]) 
</code></pre>
<p>That is using pure python and gives you the desired output "15".</p>
<p>If you like to work with "numpy" you could do:</p>
<pre><code>import numpy as np
max(np.diff(l))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The list object does not. However, it is pretty quick to write a function that does that:</p>
<pre><code>def max_step(my_list):
    max_step = 0
    for ind in xrange(len(my_list)-1):
        step = my_list[ind+1] - my_list[ind]
        if step &gt; max_step:
            max_step = step
    return max_step

&gt;&gt;&gt; max_step([1, 3, 5, 9, 15, 30])
15
</code></pre>
<p>Or if you prefer even shorter:</p>
<pre><code>max_step = lambda l: max([l[i+1] - l[i] for i in xrange(len(l)-1)])
&gt;&gt;&gt; max_step([1, 3, 5, 9, 15, 30])
15
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is possible to use the <code>reduce()</code> function, but it is not that elegant as you need some way to keep track of the previous value:</p>
<pre><code>def step(maxStep, cur):
    if isinstance(maxStep, int):
        maxStep = (abs(maxStep-cur), cur)

    return (max(maxStep[0], abs(maxStep[1]-cur)), cur)

l = [1, 3, 5, 9, 15, 30]

print reduce(step, l)[0]
</code></pre>
<p>The solution works by returing the previous value and the accumulated max calculation as a tuple for each iteration.</p>
<p>Also what is the expected outcome for [10,20,30,5]? Is it 10 or 25? If 25 then you need to add <code>abs()</code> to your calculation.</p>
</div>
<span class="comment-copy">so easy :) I think that is one of the best answer :)</span>
<span class="comment-copy">How to import itertools's <code>pairwise</code> function ? Or do we have to include the implementation provided in the docs  Recipes.</span>
<span class="comment-copy">I also fail to import it. I use "import itertools" and then "itertools.pairwise" but it always throws an "AttributeError" while e.g. "itertools.combinations" works fine.</span>
<span class="comment-copy">@TanveerAlam, @Cleb Indeed, <code>pairwise</code> is not a function provided by the <code>itertools</code> module: it's an example mentioned in the "recipes" section I linked. I now included the definition in this answer to make it (the answer) more self-contained.</span>
<span class="comment-copy">@FrerichRaabe: Thanks for the edit, I was confused when I failed to import it. It is not a default function UsiUsi asked for but seems kind of efficient :)</span>
<span class="comment-copy">The second solution is very interesting...  thanks</span>
<span class="comment-copy">Welcome :) Yes, it is my preferred one but since you asked for a default function, I was not sure whether it suits you.</span>
<span class="comment-copy">According to <a href="http://stackoverflow.com/a/24894043/91757">this answer</a>, the <code>numpy</code> version is actually pretty slow because it first has to convert the given list into an <code>ndarray</code>.</span>
<span class="comment-copy">@FrerichRaabe: Interesting, thanks for pointing that out! I usually don't need it in situations in which speed matters but it is good to know.</span>
