<div class="post-text" itemprop="text">
<p><code>ruby</code> <code>load()</code> function load inside and entire <code>ruby</code> file in current file and run it.<br/>
load can get any string path: relative,static,...<br/>
what in equivalent function to do this in <code>python 3</code>?<br/>
have <code>python</code> equivalent function or not?<br/>
thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has the <a href="https://docs.python.org/3/library/functions.html#execfile" rel="nofollow"><code>execfile()</code> function</a> which is similar, in that it will load and execute the file <em>each time</em>, unlike an imported module.</p>
<p>The <code>wrap</code> argument to the Ruby <code>load</code> function can be simulated by passing in a new namespace:</p>
<pre><code>namespace = {}
execfile(filename, namespace)
</code></pre>
</div>
<span class="comment-copy">thanks. what is diffrent between this and    <code>loader = importlib.machinery.SourceFileLoader("a", "/home/a.py") loader.load_module()</code></span>
<span class="comment-copy">@unkhown: <code>importlib</code> returns a new module object, <code>execfile()</code> does not (it uses the current globals or a mapping you pass in as the namespace instead).</span>
<span class="comment-copy">how i can prevent module to reload?. import do this automaticaly i think. when use importlib or execfile().</span>
<span class="comment-copy">@unkhown: what is your goal here? To have the same functionality as <code>load</code> you'd want to see the file loaded each time. You can track what you loaded yourself in both Ruby and Python then. Otherwise just use <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer"><code>importlib.import_module()</code></a> to dynamically import modules and have the normal import rules apply (including caching of previously imported modules).</span>
<span class="comment-copy">sorry.its another question i say here.</span>
