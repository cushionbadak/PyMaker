<div class="post-text" itemprop="text">
<p>I think I'm not understanding something basic about python's argparse.</p>
<p>I am trying to use the Google YouTube API for python script, but I am not understanding how to pass values to the script without using the command line.</p>
<p>For example, <a href="https://developers.google.com/youtube/v3/docs/videos/insert" rel="noreferrer">here</a> is the example for the API.  The examples on github and elsewhere show this example as being called from the command line, from where the argparse values are passed when the script is called.</p>
<p>I don't want to use the command line.  I am building an app that uses a decorator to obtain login credentials for the user, and when that user wants to upload to their YouTube account, they submit a form which will then call this script and have the argparse values passed to it.</p>
<p>How do I pass values to argparser (see below for portion of code in YouTube upload API script) from another python script?</p>
<pre><code>if __name__ == '__main__':
    argparser.add_argument("--file", required=True, help="Video file to upload")
    argparser.add_argument("--title", help="Video title", default="Test Title")
    argparser.add_argument("--description", help="Video description",
        default="Test Description")
    argparser.add_argument("--category", default="22",
        help="Numeric video category. " +
            "See https://developers.google.com/youtube/v3/docs/videoCategories/list")
    argparser.add_argument("--keywords", help="Video keywords, comma separated",
        default="")
    argparser.add_argument("--privacyStatus", choices=VALID_PRIVACY_STATUSES,
        default=VALID_PRIVACY_STATUSES[0], help="Video privacy status.")
    args = argparser.parse_args()

    if not os.path.exists(args.file):
        exit("Please specify a valid file using the --file= parameter.")

    youtube = get_authenticated_service(args)
    try:
        initialize_upload(youtube, args)
    except HttpError, e:
        print "An HTTP error %d occurred:\n%s" % (e.resp.status, e.content)
</code></pre>
<hr/>
<p>EDIT: Per request, here is the traceback for the 400 Error I am getting using either the standard method to initialize a dictionary or using argparse to create a dictionary.  I thought I was getting this due to badly formed parameters, but perhaps not:</p>
<pre><code>Traceback (most recent call last):
  File "C:\Program Files (x86)\Google\google_appengine\lib\webapp2-2.5.2\webapp2.py", line 1535, in __call__
    rv = self.handle_exception(request, response, e)
  File "C:\Program Files (x86)\Google\google_appengine\lib\webapp2-2.5.2\webapp2.py", line 1529, in __call__
    rv = self.router.dispatch(request, response)
  File "C:\Program Files (x86)\Google\google_appengine\lib\webapp2-2.5.2\webapp2.py", line 1278, in default_dispatcher
    return route.handler_adapter(request, response)
  File "C:\Program Files (x86)\Google\google_appengine\lib\webapp2-2.5.2\webapp2.py", line 1102, in __call__
    return handler.dispatch()
  File "C:\Program Files (x86)\Google\google_appengine\lib\webapp2-2.5.2\webapp2.py", line 572, in dispatch
    return self.handle_exception(e, self.app.debug)
  File "C:\Program Files (x86)\Google\google_appengine\lib\webapp2-2.5.2\webapp2.py", line 570, in dispatch
    return method(*args, **kwargs)
  File "C:\Users\...\testapp\oauth2client\appengine.py", line 796, in setup_oauth
    resp = method(request_handler, *args, **kwargs)
  File "C:\Users\...\testapp\testapp.py", line 116, in get
    resumable_upload(insert_request)
  File "C:\Users\...\testapp\testapp.py", line 183, in resumable_upload
    status, response = insert_request.next_chunk()
  File "C:\Users\...\testapp\oauth2client\util.py", line 129, in positional_wrapper
    return wrapped(*args, **kwargs)
  File "C:\Users\...\testapp\apiclient\http.py", line 874, in next_chunk
    return self._process_response(resp, content)
  File "C:\Users\...\testapp\apiclient\http.py", line 901, in _process_response
    raise HttpError(resp, content, uri=self.uri)
HttpError: &lt;HttpError 400 when requesting https://www.googleapis.com/upload/youtube/v3/videos?alt=json&amp;part=status%2Csnippet&amp;uploadType=resumable returned "Bad Request"&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Whether it is the best approach or not is really for you to figure out.  But using argparse without command line is <strong>easy</strong>.  I do it all the time because I have batches that can be run from the command line.  Or can also be called by other code - which is great for unit testing, as mentioned.  argparse is especially good at defaulting parameters for example.</p>
<p>Starting with your sample.</p>
<pre><code>import argparse

argparser = argparse.ArgumentParser()
argparser.add_argument("--file", required=True, help="Video file to upload")
argparser.add_argument("--title", help="Video title", default="Test Title")
argparser.add_argument("--description", help="Video description",
    default="Test Description")
argparser.add_argument("--category", default="22",
    help="Numeric video category. " +
        "See https://developers.google.com/youtube/v3/docs/videoCategories/list")
argparser.add_argument("--keywords", help="Video keywords, comma separated",
    default="")
VALID_PRIVACY_STATUSES = ("private","public")
argparser.add_argument("--privacyStatus", choices=VALID_PRIVACY_STATUSES,
    default=VALID_PRIVACY_STATUSES[0], help="Video privacy status.")

#pass in any positional or required variables.. as strings in a list
#which corresponds to sys.argv[1:].  Not a string =&gt; arcane errors.
args = argparser.parse_args(["--file", "myfile.avi"])

#you can populate other optional parameters, not just positionals/required
#args = argparser.parse_args(["--file", "myfile.avi", "--title", "my title"])


print vars(args)

#modify them as you see fit, but no more validation is taking place
#so best to use parse_args.
args.privacyStatus = "some status not in choices - already parsed"
args.category = 42

print vars(args)

#proceed as before, the system doesn't care if it came from the command line or not
# youtube = get_authenticated_service(args)    
</code></pre>
<p>output:</p>
<pre><code>{'category': '22', 'description': 'Test Description', 'title': 'Test Title', 'privacyStatus': 'private', 'file': 'myfile.avi', 'keywords': ''}
{'category': 42, 'description': 'Test Description', 'title': 'Test Title', 'privacyStatus': 'some status not in choices - already parsed', 'file': 'myfile.avi', 'keywords': ''}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Calling <code>parse_args</code> with your own list of strings is a common <code>argparse</code> testing method.  If you don't give <code>parse_args</code> this list, it uses <code>sys.argv[1:]</code> - i.e. the strings that the shell gives.  <code>sys.argv[0]</code> is the strip name.</p>
<pre><code>args = argparser.parse_args(['--foo','foovalue','barvalue'])
</code></pre>
<p>It is also easy to construct an <code>args</code> object.</p>
<pre><code>args = argparse.Namespace(foo='foovalue', bar='barvalue')
</code></pre>
<p>In fact, if you print <code>args</code> from a <code>parse_args</code> call it should look something like that.  As described in the documentation, a <code>Namespace</code> is a simple object, and the values are artributes.  So it is easy to construct your own <code>namespace</code> class.  All <code>args</code> needs to be is something that returns the appropriate value when used as:</p>
<pre><code>x = args.foo
b = args.bar
</code></pre>
<p>Also as noted in the docs, <code>vars(args)</code> turns this namespace into a dictionary.  Some code likes to use dictionary, but evidently these youtub functions want a <code>Namespace</code> (or equivalent).</p>
<pre><code>get_authenticated_service(args)
initialize_upload(youtube, args)
</code></pre>
<p><a href="https://docs.python.org/3/library/argparse.html#beyond-sys-argv" rel="nofollow">https://docs.python.org/3/library/argparse.html#beyond-sys-argv</a></p>
<p><a href="https://docs.python.org/3/library/argparse.html#the-namespace-object" rel="nofollow">https://docs.python.org/3/library/argparse.html#the-namespace-object</a></p>
<hr/>
<p><a href="https://developers.google.com/youtube/v3/guides/uploading_a_video?hl=id-ID" rel="nofollow">https://developers.google.com/youtube/v3/guides/uploading_a_video?hl=id-ID</a></p>
<p>has <code>get_authenticated_service</code> and <code>initialize_upload</code> code</p>
<pre><code>def initialize_upload(youtube, options):
  tags = None
  if options.keywords:
    tags = options.keywords.split(",")

  body=dict(
    snippet=dict(
      title=options.title,
      description=options.description,
      tags=tags,
      categoryId=options.category
    ),
    status=dict(
      privacyStatus=options.privacyStatus
    )
  )
 ....
</code></pre>
<p>The <code>args</code> from the parser is <code>options</code>, which it uses as <code>options.category</code>, <code>options.title</code>, etc.  You could substitute any other object which has the same behavior and the necessary attributes.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Why are you using argparse if you dont want to use command line? Argparse is module created to parse command line arguments there is no other use of it. You cannot pass value to argparse in other ways. </p>
<p>I think what you want is a web app displaying html form making POST request to some server handler that will pass value from form to api call connect to youtube and execute your python code. Argparse is not required for this at all. You can just take value from form and pass it to your api call.</p>
</div>
<span class="comment-copy">The easiest way is to <b>refactor</b> the code, such that <code>sys.argv</code> is explicitly passed to a function that uses <code>argparse</code> to process the resulting <i>list</i>; this also makes testing much simpler. See e.g. <a href="https://github.com/textbook/py_wlc/blob/develop/py_wlc/data/webtag_parser.py#L220" rel="nofollow noreferrer">github.com/textbook/py_wlc/blob/develop/py_wlc/data/…</a></span>
<span class="comment-copy">here is only one BIG question, if you will not use command line, why you need parse command line arguments? You just copy-paste example from google site without understanding the code itself.</span>
<span class="comment-copy">As JL Peyret demonstrated, argparse can be useful without using the command line.  Although I am new to python, I am attempting to understand the code, which is why I tried a different dictionary creation method.  I suppose either works.  I appreciate people's attempts to help me better understand the argparse method.  Because I am getting the 400 Error with either method, I obviously have more to learn about that API, so you are correct that I don't fully understand the code.  I hope I eventually will with more work.  Thanks for taking the time to stop by, Reishin.</span>
<span class="comment-copy">The main issue is that <code>args</code> is an object with attributes, not a dictionary.  I found the API code that you need to call.</span>
<span class="comment-copy">Yes, the vars(args) in my examples was just a quickie way to show what was in args.  Wasn't meant to be used elsewhere. I</span>
<span class="comment-copy">This is exactly what I needed.  Thanks!  I am still getting a 400 error when I try to upload the video, but I think this is a different issue - your method of passing values to argparse is working.</span>
<span class="comment-copy">The answer is an example, what ppl shouldn't to do, great!</span>
<span class="comment-copy">This is really helpful, hpaulj.  I'll need to read that documentation on Namespace.  That may solve my bigger issue.</span>
<span class="comment-copy">Technically, you are correct.  There are other ways to pass in values, and I've been trying some of those options, but was getting errors.  Perhaps those errors are not related to the argument format I use.  Thanks!</span>
<span class="comment-copy">"You cannot pass value to argparse in other ways. "  This is demonstrably false and there are many reasons to populate argparse programmatically, unit testing as stated.  If the youtube api code is expecting an argparse argument you also need to find a way to provide it, if you want to use it.  Whether or not argparse is the best approach is for the OP to decide, no?</span>
<span class="comment-copy">@tjv09 you could update question post tracebacks you were getting trying to do things other way. I'm pretty sure your dont need argparse and it is just useless fir your purpose</span>
<span class="comment-copy">Pawel, I edited the question to include the traceback.  I tried passing parameters to the upload method using the standard method to create a dictionary like you mentioned, and I am still getting the error - the same error I get if I pass values using argparse per JL Peyret's method.  I think this is probably a different issue - not parameter-format related.</span>
