<div class="post-text" itemprop="text">
<p>I came across these constructs and I'm not quite sure what they do. Can someone explain?</p>
<pre><code>setx = set([a for a in i])    
sety = set([y for y in j]) 
</code></pre>
<p>Code, for context</p>
<pre><code>a = int(input())  
for i in range(a):  
    i = (input())  
    j = (input())  
    setx = set([a for a in i])    
    sety = set([y for y in j])  
    if setx.intersection(sety) == set():  
        print("NO")  
    else:  
        print("YES")  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>[a for a in i]</code> is a <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>. It's basically a concise way to make a list. </p>
<p>They can be really useful, or they can be source of much unreadable code, or both. The full syntax is</p>
<pre><code>[f(i) for i in iterator if conditional(i)]
</code></pre>
<p>examples:</p>
<p>List of squares: <code>[i**2 for i in range(n)]</code></p>
<p>List of squares not divisible by 5: <code>[i**2 for i in range(n) if i**2 % 5 =! 0]</code> </p>
<p>And as for <em>set</em>: <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow">Set</a> is a very useful data type in python. It's basically a dictionary without the values. All elements must be unique and hashable, and sets do not store order, but checking to see if an object is in a set is not dependent on the length of the set. </p>
<p>In this case, your code is probably using sets to make figuring out if the two inputs share any commonalities faster and easier to write.</p>
<p>(Also, finally: Uh, as posted, I don't really know what your code does, but I can be pretty sure it doesn't what it wants to. If I were to rewrite it, it'd be something like</p>
<pre><code>a = int(input()) 
setx = set() #initializing empty sets
sety = set() 
for _ in range(a):  #underscore often used when you don't care about what you're iterating over, just that you iterate a certain amount of times.
    setx.add(input()) #Previously, you'd just get the last input
    sety.add(input()) #I doubt that's what you wanted 
if setx.intersection(sety): #no need to compare to empty set. if set() will evaluate as false  
    print("NO")  
else:  
    print("YES")  
</code></pre>
<p>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Set is build-in data type: a collection of unordered unique elements, strong on unique. 
For more specifics see the amazing python Docs: For example See [<a href="https://docs.python.org/3.5/library/stdtypes.html?highlight=set#set]" rel="nofollow">https://docs.python.org/3.5/library/stdtypes.html?highlight=set#set]</a></p>
<p>So using <em>set()</em> over that list comprehension it is removing duplicates from the list.</p>
</div>
<span class="comment-copy">What do you think it does?</span>
<span class="comment-copy"><a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">docs.python.org/2/tutorial/â€¦</a></span>
<span class="comment-copy">Please fix your indentation too</span>
