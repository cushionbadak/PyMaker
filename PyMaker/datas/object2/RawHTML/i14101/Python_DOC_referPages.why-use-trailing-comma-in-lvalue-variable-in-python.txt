<div class="post-text" itemprop="text">
<p>I don't understand what does comma after variable <strong>lines,</strong> means: <a href="http://matplotlib.org/examples/animation/simple_anim.html" rel="noreferrer">http://matplotlib.org/examples/animation/simple_anim.html</a></p>
<pre><code>line, = ax.plot(x, np.sin(x))
</code></pre>
<p>If I remove comma and variable "line," becomes variable "line" then program is broken. Full code from url given above:</p>
<pre><code>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

fig = plt.figure()
ax = fig.add_subplot(111)

x = np.arange(0, 2*np.pi, 0.01)        # x-array
line, = ax.plot(x, np.sin(x))

def animate(i):
    line.set_ydata(np.sin(x+i/10.0))  # update the data
    return line,

#Init only required for blitting to give a clean slate.
def init():
    line.set_ydata(np.ma.array(x, mask=True))
    return line,

ani = animation.FuncAnimation(fig, animate, np.arange(1, 200), init_func=init,
    interval=25, blit=True)
plt.show()
</code></pre>
<p>According to <a href="http://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="noreferrer">http://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences</a> comma after variable seems to be related to tuples containing only one item.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>ax.plot()</code> returns a <em>tuple</em> with <em>one</em> element. By adding the comma to the assignment target list, you ask Python to unpack the return value and assign it to each variable named to the left in turn.</p>
<p>Most often, you see this being applied for functions with more than one return value:</p>
<pre><code>base, ext = os.path.splitext(filename)
</code></pre>
<p>The left-hand side can, however, contain any number of elements, and provided it is a tuple or list of variables the unpacking will take place.</p>
<p>In Python, it's the comma that makes something a tuple:</p>
<pre><code>&gt;&gt;&gt; 1
1
&gt;&gt;&gt; 1,
(1,)
</code></pre>
<p>The parenthesis are optional in most locations. You could rewrite the original code <em>with</em> parenthesis without changing the meaning:</p>
<pre><code>(line,) = ax.plot(x, np.sin(x))
</code></pre>
<p>Or you could use list syntax too:</p>
<pre><code>[line] = ax.plot(x, np.sin(x))
</code></pre>
<p>Or, you could recast it to lines that do <em>not</em> use tuple unpacking:</p>
<pre><code>line = ax.plot(x, np.sin(x))[0]
</code></pre>
<p>or</p>
<pre><code>lines = ax.plot(x, np.sin(x))

def animate(i):
    lines[0].set_ydata(np.sin(x+i/10.0))  # update the data
    return lines

#Init only required for blitting to give a clean slate.
def init():
    lines[0].set_ydata(np.ma.array(x, mask=True))
    return lines
</code></pre>
<p>For full details on how assignments work with respect to unpacking, see the <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="noreferrer">Assignment Statements</a> documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have</p>
<pre><code>x, = y
</code></pre>
<p>you unpack a list or tuple of length one.
e.g.</p>
<pre><code>x, = [1]
</code></pre>
<p>will result in <code>x == 1</code>, while</p>
<pre><code>x = [1]
</code></pre>
<p>gives  <code>x == [1]</code></p>
</div>
<span class="comment-copy">Your last line hits the nail on the head. What it assumes you already know is that when you do an assignment between iterables the elements are lined up. So <code>x,y,z=1,2,3</code> is a Pythonic way of writing <code>x=1;y=2;z=3</code>.</span>
<span class="comment-copy">I can't add more to the answer below, but I thought I'd add a neat result: the comma operator also gives Python the ability to switch variable values in one expressive, clear line (saw this in The Quick Python Book): <code>x2,x1 = x1,x2</code>.</span>
<span class="comment-copy">Yep. If it helps, you can think of it as being equivalent to <code>line = ax.plot(x, np.sin(x))[0]</code></span>
<span class="comment-copy">@Aya: except the <code>line, = ...</code> syntax will throw an exception when the right-hand side has 0 or more than 1 element in the iterable, while using indexing will only throw an exception if there are 0 elements.</span>
