<div class="post-text" itemprop="text">
<p>Here is what I am looking at:</p>
<pre><code>In [1]: import sys

In [2]: sys.getsizeof(45)
Out[2]: 24

In [3]: sys.getsizeof([])
Out[3]: 72

In [4]: sys.getsizeof(range(1000))
Out[4]: 8072
</code></pre>
<p>I know that <code>int</code> in Python is growable (can get bigger that 24 bytes) objects that live on the heap, and I see why that object can be quite large, but isn't a list just a collections of such objects? Apparently it is not, what is going on here?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the size of the object - <a href="https://docs.python.org/3/library/sys.html#sys.getsizeof" rel="noreferrer">excluding the objects it contains</a>:</p>
<pre><code>&gt;&gt;&gt; d = range(10)
&gt;&gt;&gt; sys.getsizeof(d)
152
&gt;&gt;&gt; d[0] = 'text'
&gt;&gt;&gt; sys.getsizeof(d)
152
&gt;&gt;&gt; d
['text', 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>The size of the list with 1000 elements, in your case, is <code>8072</code> bytes but each integer object is still <code>24</code> bytes. The list object keeps track of these integer objects but they're not included in the size of the list object.</p>
</div>
<div class="post-text" itemprop="text">
<p>The list doesn't contain any integers; it contains pointers to various objects, which happen to be integers and which are stored elsewhere. <code>getsizeof()</code> tells you the size only of the object you pass to it, not of any additional objects it points to.</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>list</code> is a collection of <em>pointers</em> to objects, not of the objects themselves.  So, assuming a 64-bit system, your list has 8000 bytes of pointers plus 72 bytes of overhead.</p>
</div>
<span class="comment-copy">Now, everything makes sense. Thank You. It was a silly oversight by me.</span>
