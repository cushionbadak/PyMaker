<div class="post-text" itemprop="text">
<p>I have the following dictionary, which i got when applied <code>to_dict()</code> method on a pandas dataframe.</p>
<pre><code>{
   'name' : {
      0: 'abc',
      1: 'xyz'
    },
   'email': {
     0: 'abc@abc.com',
     1: 'xyz@xyz.com',
   },
   'category': {
     0: 'category 1',
     1: 'category 2', 
   }
}
</code></pre>
<p>How do I transform it into the following structure? </p>
<pre><code>[
  {
    'name': 'abc',
    'email' : 'abc@abc.com',
    'category': 'category 1',  
  },
  {
    'name': 'xyz',
    'email' : 'xyz@xyz.com',
    'category': 'category 2',  
  }
]
</code></pre>
<p>I tried applying many variations of <code>for</code> loop, but came out as bogus code, if anyone could help or point to some links it would be great, python newbie here :| </p>
<p><strong>EDIT:</strong> changed the desired structure to a list of dicts, as dicts are not hashble, </p>
</div>
<div class="post-text" itemprop="text">
<p>The target structure you display is a set of dicts. Since dicts are not hashable, it is not possible to create.</p>
<p>Instead you probably want a list of dicts.</p>
<pre><code>result = [
     {k: yourdict[k][n] for k in yourdict} for n in sorted(yourdict['name'])
]
</code></pre>
<p>Testing:</p>
<pre><code>[
    {'category': 'category 1', 'email': 'abc@abc.com', 'name': 'abc'},
    {'category': 'category 2', 'email': 'xyz@xyz.com', 'name': 'xyz'}
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could transpose your dataframe before converting it to a dictionary. This will produce a dictionary of dictionaries, where each key is an index value from the original dataframe.</p>
<pre><code>import pandas as pd
pd.DataFrame({
   'name' : {
      0: 'abc',
      1: 'xyz'
     },
   'email': {
     0: 'abc@abc.com',
     1: 'xyz@xyz.com',
   },
   'category': {
     0: 'category 1',
     1: 'category 2', 
   }
}).T.to_dict()
</code></pre>
<p>Outputs:</p>
<pre><code>{0: {'name': 'abc', 'email': 'abc@abc.com', 'category': 'category 1'},
 1: {'name': 'xyz', 'email': 'xyz@xyz.com', 'category': 'category 2'}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just pass <code>'records'</code> as the desired orientation to <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_dict.html" rel="nofollow noreferrer"><code>to_dict()</code></a>:</p>
<pre><code>df.to_dict('records')
</code></pre>
<p>The default orientation <code>'dict'</code> produces output like <code>{column -&gt; {index -&gt; value}}</code> as can be seen in your example, where as <code>'records'</code> a list like <code>[{column -&gt; value}, … , {column -&gt; value}]</code>, which is your desired output.</p>
</div>
<span class="comment-copy">This seem like a really good exercise to learn more about python! I'd recommend trying to split the data into a way that you can then rebuild it into the desired format.  So perhaps make a list of all the name values, another of the email values, and a 3rd of the category values.  Once you have it organized, take the name, email, and category lists and turn them into dictionary key:value pairs.  Perhaps that will help you complete the task.  I'm just going off the top of my head how I'd initially try to solve this.  Good luck!</span>
<span class="comment-copy">even i was thinking to do the same... thanks @J0hn</span>
<span class="comment-copy">As a note for the future, you should usually include examples of your attempts, even if they failed. Most of the time it helps others produce  good answers.</span>
<span class="comment-copy">Wonderful, It worked like a charm, if you could add a bit about how this works, it will be great for others like me as well</span>
<span class="comment-copy">This is just python list comprehension (and dict comprehension which works the same for dicts.) see the python official basic tutorial, chapter 5.1.3 here <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">docs.python.org/3/tutorial/…</a> and chapter 5.5 here <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html#dictionaries</a> @ShobiPP</span>
<span class="comment-copy">Cool, This also works. thanks . Great answer</span>
<span class="comment-copy">Yes... It works....</span>
