<div class="post-text" itemprop="text">
<p>Towards the bottom at the main loop, I'm seeing this line</p>
<p><code>result = result()</code></p>
<p>But I have no idea what it does and I can't even Google it.
<strong>What is this?</strong></p>
<p>The code below imports from task.py and project.py. But both files do not have anything related to result() hence I'm not including them here.</p>
<pre><code>#!/usr/bin/env python3

from task import Task
from project import Project

main_menu = {
    'title': 'MAIN MENU',
    'items': ['1. Create a project', '2. Load a project', '3. Quit'],
    'actions': {
        '3': exit,
    }
}

project_menu = {
    'title': 'PROJECT MENU',
    'items': ['1. Add a task', '2. Add task dependency', '3. Set task progress',
            '4. Show project', '5. Back to Main Menu'],
    'actions': {
        '5': main_menu,
    }
}

def select_menu(menu):
    while True:
        print()
        print(menu['title']) #MAIN MENU
        print('\n'.join(menu['items'])) #1. create project, 2. load project ..
        selection = input('Select &gt; ')
        next_action = menu['actions'].get(selection)
        #print(selection, menu['actions'])
        if next_action:
            return next_action
        else:
            print('\nPlease select from the menu')

def create_project():
    global cur_project
    global project_menu

    project_name = input('Enter the project name: ')
    cur_project = Project(project_name)

    return project_menu

main_menu['actions']['1'] = create_project

cur_menu = main_menu
cur_project = None

while True:
    result = select_menu(cur_menu)

    while callable(result):
        result = result()

    cur_menu = result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>select_menu</code> returns an element of <code>actions</code>, which are all functions (<code>main_menu</code>, <code>exit</code>, <code>create_project</code>....). Thus, <code>result</code> is a function. <code>result = result()</code> will execute that function and replace the value in <code>result</code> with the return value of that function.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to see the global loop:</p>
<pre><code>while callable(result):
    result = result()
</code></pre>
<p>it just calls <code>result</code> <em>function</em> until it returns a non-function (probably a result), reassigning back the <code>result</code> name. <code>result</code> is just a name, it can reference anything including a function.</p>
<p>you can see that like traversing a tree node by node until you reach a leaf.</p>
</div>
<span class="comment-copy">It means "execute <code>result</code> and assign the return value to <code>result</code>". Apparently <code>select_menu</code> might return a function, which should then be called. As to <i>why</i> that should be done, ask the author of the code.</span>
<span class="comment-copy">If you didn't write this code you need to tell us where it comes from, or at least tell us who wrote it.  Posting other people's code without attribution is unprofessional, and may infringe copyright.</span>
<span class="comment-copy">@PM2Ring It's from my class.</span>
<span class="comment-copy">@khelwood So, <code>result</code> is both variable AND a function? Where can I learn more about this?</span>
<span class="comment-copy">Think of it this way: "Amadan" is a name that identifies me, but we shortcut and say "Amadan" is me (although when you take a closer look, it should be rather obvious that I am a person, and not a string of six letters). Just so, we shortcut our speech when we talk about programming: <code>result</code> is the name that <i>identifies</i> a variable which <i>contains</i> a function... but that's a mouthful, and all programmers will understand when we say "<code>result</code> is a function" we mean the former. Obviously, this might not make immediate sense to new programmers, just like aliens might wonder about me as "Amadan".</span>
<span class="comment-copy">So result is just a placeholder..? because result() is not defined anywhere.</span>
<span class="comment-copy">What should I Google to learn more about this? I absolutely have no clue. I tried many different keywords but just can't land it</span>
<span class="comment-copy"><code>result</code> is a variable. Variables can hold any value, like numbers, strings... and functions (yes, functions are also values). <code>result</code> is defined by the assignments <code>result = select_menu(cur_menu)</code> and by <code>result = result()</code>. Any variable that contains a function can be invoked by using the name of the variable and parentheses, like <code>exit()</code> (yes, <code>exit</code> is also just a variable [simplification alert]); if <code>result</code> is a variable containing a function, there is nothing special about calling it as <code>result()</code>.</span>
<span class="comment-copy">As to where to read more... I guess <a href="https://docs.python.org/3/library/stdtypes.html#functions" rel="nofollow noreferrer">here</a> and <a href="https://docs.python.org/3/reference/compound_stmts.html#function" rel="nofollow noreferrer">here</a>..?</span>
<span class="comment-copy">It's slowly making sense now. I just never saw anything been done like (not to mention there was no explanation or comment from my professor). So basically since the variable <code>result</code> holds onto the function, I can just use that execute the function inside the variable right? So in other sense, it's kind of like I'm having a variable <code>result</code> and a function declared as <code>def result() </code> right?</span>
<span class="comment-copy">Okay so since it is a variable that takes in function, in can act as both variable ANd a function? I've never seen this before and sadly professor didn't explain more on this. Where can I learn more about this? What should I look up?</span>
<span class="comment-copy"><code>result</code> is just a name, it can reference anything including a function &amp; be reassigned dynamically. makes believe that variables can change types in python</span>
<span class="comment-copy">So basically, by putting () after any variable that holds a function without arguments, I can execute it?</span>
<span class="comment-copy">Just like by putting <code>(16)</code> after any variable that holds a function with one argument you can execute it. (e.g. <code>sqrt(16)</code>). If you do <code>square_root = sqrt</code>, you can then do <code>square_root(16)</code>. There is absolutely no difference between <code>exit()</code> and <code>result()</code>, and no difference between <code>sqrt(16)</code> and <code>square_root(16)</code> - just variables holding the same values.</span>
