<div class="post-text" itemprop="text">
<p>thanks in advance,</p>
<p>say you have an async funtion:</p>
<pre><code>async def create_list(num):
      print("Creating a list that is length {}".format(num))
      i = 0
      list = []
      While True:
           i += 1
           if i &gt; 100000:
              await asyncio.sleep(0.0001)
           list.append(i)
           if i == num:
              print("Finished creating a list that is length {}".format(num))
              return list
</code></pre>
<p>say you want to start some coroutines:</p>
<pre><code>async def main():
     list1 = loop.create_task(create_list(1000))
     list2 = loop.create_task(create_list(1000))
     list3 = loop.create_task(create_list(1000))
     await asyncio.wait([list1, list2, list3])

if __name__ == '__main__':
   loop = asyncio.get_event_loop()
   loop.run_until_complete(main())
   loop.close()
</code></pre>
<p>my question is :</p>
<p>firstly, is it right to assume that :</p>
<pre><code>if i &gt; 100000:
   await asyncio.sleep(0.0001)
</code></pre>
<p>this code block here would temporarily halt the task and automatically switch
to another coroutine?</p>
<p>if so,</p>
<p>then does the "i" variable in each coroutine get stored separately,</p>
<p>or does the halting of the task completely abandon the previous process
and when you come back to that same process you are just going to have to start
again from 0.</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>this code block here would temporarily halt the task and automatically switch to another coroutine?</p>
</blockquote>
<p>The <a href="https://docs.python.org/3/library/asyncio-task.html#task" rel="nofollow noreferrer">task</a> is not halted temporarily, the coroutine wrapped in it is. It will not just switch to any other coroutine, but to the one that it is instructed to wait for; the coroutine created by calling <code>asyncio.sleep(0.0001)</code> in your case.</p>
<blockquote>
<p>then does the "i" variable in each coroutine get stored separately, or does the halting of the task completely abandon the previous process and when you come back to that same process you are just going to have to start again from 0.</p>
</blockquote>
<p>Coroutine functions (i.e. a function definition using <code>async def</code> or decorated with <code>@asyncio.coroutine</code>) are functions nonetheless, hence all the known rules regarding variable scopes apply. So yes, <code>i</code> is local to each of your coroutines and remains alive until the function it is local to terminates. You do not start over from 0. You can verify this by simply doing <code>print(i)</code> inside your <code>create_list</code> coroutine function. You will see the value of <code>i</code> constantly raising for each of the coroutines independently; never resetting, although they are constantly suspended and resumed.</p>
</div>
<span class="comment-copy">sorry, there was a typo with line 5, While should be decapitalized to while. and I forgot to write import asyncio.</span>
<span class="comment-copy">Then why don't you just <a href="https://stackoverflow.com/posts/51393216/edit">edit</a> your question and correct the errors? ;)</span>
<span class="comment-copy">Thank you! Sorry for the late reply!</span>
