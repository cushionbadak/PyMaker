<div class="post-text" itemprop="text">
<p>Trying to understand hexadecimal <code>0x</code> notation in regards to memory locations and sizes in MiB (mebibytes) and KiB (kibibytes). Specifically, in a partition layout table I can see the following columns:</p>
<pre><code>size        hex '0x' notation           
1 MiB       0x0010 0000    
12 MiB      0x00c0 0000
128 KiB     0x0002 0000
</code></pre>
<p>But I find it hard to translate/extract the logic to calculate and do the conversions for myself (for example convert from 24 MiB, 125 KiB, 16 MiB, to '0x' hex notation etc.). </p>
<p>Hence, I thought of writing a <strong><code>Python</code> script (as you do) to do the conversions from MiB/KiB to 'Ox' and additions of '0x'</strong>. I found this [<a href="https://stackoverflow.com/a/8186974/6167676]">https://stackoverflow.com/a/8186974/6167676]</a> but I failed to do anything meaningful from it.</p>
<p>To my surprise I could not find something online to help me do the conversions from MiB/KiB to the hex '0x' notation. In <code>Python</code> I found the <code>hex</code> function in an attempt to do basic additions between hex values in the hex '0x' notation:</p>
<pre><code>def hex_add(h1, h2):
    return hex(int(h1, 0) + int(h2, 0))
</code></pre>
<p>How can use <code>Python</code> (built-in or not functions) to automatically calculate the conversion from MiB to the hex '0x' notation? Also, is the <code>hex_add</code> adequate to perform additions on '0x' notation? </p>
<p>Some code examples to demonstrate the conversion and addition in <code>Python</code> would be very useful.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, let's create some constants for KiB, MiB, GiB, etc. Don't worry about hex here, we just want the numbers in whatever form makes most sense to you—whether that's <code>1024</code> or <code>0x400</code> or <code>2**10</code> doesn't matter, since those are all the same number. So:</p>
<pre><code>KiB = 1024
MiB = 1024 * KiB
GiB = 1024 * MiB
TiB = 1024 * GiB
</code></pre>
<p>Now, how much is 12MiB? Easy:</p>
<pre><code>12 * MiB
</code></pre>
<p>Now, how much is 12MiB in hex?</p>
<pre><code>hex(12 * MiB)
</code></pre>
<p>This gives you <code>'0xc00000'</code>. </p>
<hr/>
<p>As far as "adding in hex", that's not a thing you should do. Just add the numbers as numbers, then format the result in hex. For example, if you want to add 32KiB + 16KiB + 1MiB:</p>
<pre><code>hex(32*KiB + 16*KiB + 1*MiB)
</code></pre>
<hr/>
<p>You wanted a bit more control over the output. If that's important, you'll need to use <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">format strings</a> (whether via the <code>format</code> function, the <code>str.format</code> method, or f-string literals) instead of <code>hex</code>.</p>
<p>You can specify a width to pad to, and a fill character to pad with. And you can use <code>#</code> to add the <code>0x</code> automatically (in which case we have to pad to 8+2=10 characters instead of 8), or add the <code>0x</code> manually (in which case we only have to pad to 8 characters, which makes a bit more sense):</p>
<pre><code>format(12 * MiB, '#010x')
f"{12*MiB:#010x}"
f"0x{12*MiB:08x}"
</code></pre>
<p>You also wanted to separate the digits into blocks of 4. We can use a grouping character to get pretty close, but then we have to add an extra 1 to the width:</p>
<pre><code>f"0x{12*MiB:09_x}"
</code></pre>
<p>… at which point we might as well use <code>#</code> again:</p>
<pre><code>f"{12*MiB:#011_x}"
</code></pre>
<p>Now you've got <code>'0x00c0_0000'</code>. If you really need spaces between groups instead of underscores, then you'll need to get a bit ugly:</p>
<pre><code>f"{12*MiB:#11_x}".replace('_', ' ')
</code></pre>
<p>(I believe there was a proposal to allow arbitrary grouping characters, but it was rejected, so the only options are <code>_</code>, <code>,</code>, or <code>n</code> for "do whatever my locale says".)</p>
<hr/>
<p>So, if you want to print out your table:</p>
<pre><code>print( "size        hex '0x' notation")
print(f"1 MiB       {12*MiB:#011_x}")
print(f"12 KiB      {12*KiB:#011_x}")
print(f"128 KiB     {128*KiB:#011_x}")
</code></pre>
<p>Or you can write a function. While we're at it, let's use an <code>Enum</code> instead of a bunch of separate constants:</p>
<pre><code>import enum
class Prefixes(enum.Enum):
    Ki = 1024
    Mi = 1024 * Ki
    Gi = 1024 * Mi
    Ti = 1024 * Gi
def printrow(n, prefix):
    label = f"{n} {prefix.name}B"
    print(f"{label:&lt;12}{n * prefix.value:#011_x}")
print("size        hex '0x' notation")
printrow(1, Prefixes.Mi)
printrow(12, Prefixes.Ki)
printrow(128, Prefixes.Ki)
</code></pre>
<p>This is obviously a lot more extensible, if you want to add more rows to the table.</p>
</div>
<span class="comment-copy">great answer! however, you say that <code>12 MiB = 0x0c0_0000</code> whereas on the question's table that equals to <code>0x00c00000</code>. Are these both the same? I understand that probably my question probably stems from my lack understanding hex in general ..</span>
<span class="comment-copy">@Karim Oops, I forgot that the grouping character counts as part of the width. Edited the answer to fix that. But meanwhile, less, <code>0x0c0_0000</code> is the same value as <code>0x00c0_0000</code>. Leading zeros don't mean anything, just like in everyday arithmetic <code>0123</code> and <code>00123</code> are the same number.</span>
