<div class="post-text" itemprop="text">
<p>I've tried a few approaches, none of which seem to work for me. </p>
<pre><code>board = [[0,0,0,0],[0,0,0,0]]

if not 0 in board:
     # the board is "full"
</code></pre>
<p>I then tried:</p>
<pre><code>if not 0 in board[0] or not 0 in board[1]:
    # the board is "full"
</code></pre>
<p>None of these approaches worked, though the second one generally let the array fill up more. (I wrote code to fill up the array randomly).</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to iterate over all the indices of your list to see if an element is a value in one of the nested lists. You can simply iterate over the inner lists and check for the presence of your element, e.g.:</p>
<pre><code>if not any(0 in x for x in board):
    pass  # the board is full
</code></pre>
<p>Using <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a> will serve as a short-stop whenever it encounters an element with a <code>0</code> in it so you don't need to iterate over the rest.</p>
</div>
<div class="post-text" itemprop="text">
<p>I will try to address what you did wrong:</p>
<p><code>if not 0 in board[0] or not 0 in board[1]:</code> this is almost right - but you should use <code>and</code> because to be considered full, both boards must not have 0 at the same time.</p>
<p>Some options:</p>
<pre><code>if not 0 in board[0] and not 0 in board[1]: # would work

if 0 not in board[0] and 0 not in board[1]: # more idiomatic

if not(0 in board[0] or 0 in board[1]): # put "not" in evidence, reverse logic

if not any(0 in b for b in board): # any number of boards
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another try with <code>chain</code> from <code>itertools</code> (that way it works with multiple rows):</p>
<pre><code>from itertools import chain

board = [[0,0,0,0],[0,0,0,0]]

def find_in_2d_array(arr, value):
    return value in chain.from_iterable(arr)

print(find_in_2d_array(board, 0))
print(find_in_2d_array(board, 1))
</code></pre>
<p>Prints:</p>
<pre><code>True
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you can use tool outside the standard library <code>numpy</code> is the best way to work with multidimensional arrays by a long way.</p>
<pre><code>board = [[0,0,0,0],[0,0,0,0]]
board = np.array(board)
print(0 in board)
</code></pre>
<p>Output:</p>
<pre><code>True
</code></pre>
</div>
<span class="comment-copy">What exactly do you mean by "did not work"?</span>
<span class="comment-copy">The <code># the board is full</code> was (for lack of a better word) run at the wrong time.</span>
<span class="comment-copy">why use <code>1</code> and put a condition in your generator expression? Just put the condition as the value:  <code>any(0 in x for x in board)</code></span>
<span class="comment-copy">@nosklo - Fair point, hasty fingers make oversights ;)</span>
<span class="comment-copy">I would like to keep my program as lightweight as possible. Are there any <i>major</i> advantages to using numpy as opposed to some of the other single lines others have proposed?</span>
<span class="comment-copy">It really depends on what operations you're using, but I'd say in general you get a speed up with <code>numpy</code> compared to using a loop in python. Also the syntax is super flexible for indexing, i.e. returning the <code>i</code>'th row would be <code>board[:, i]</code>.</span>
