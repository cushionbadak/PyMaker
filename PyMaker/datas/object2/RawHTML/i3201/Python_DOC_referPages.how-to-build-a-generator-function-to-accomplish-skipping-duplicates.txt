<div class="post-text" itemprop="text">
<p>I want to ake a generator function that loops over an input iterable sequence, yielding one element at a time, but skipping duplicates. An example code is below:</p>
<pre><code>numbers = [4, 5, 2, 6, 2, 3, 5, 8]
nums = unique(numbers)
    next(nums)
4
    next(nums)
5
    next(nums)
2
    next(nums)
6
    next(nums)
3
    next(nums)
8
</code></pre>
<p>Does anyone ave any ideas why this code is not printing?</p>
<pre><code>def unique(iterable):
    seen = set()
    for n in iterable:
        if n not in seen:
            seen.add(n)
            yield n

numbers = [4, 5, 2, 6, 2, 3, 5, 8]
nums = unique(numbers)
print(next(nums))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A simple unique generator would just keep a <code>set</code> of items already seen, e.g.:</p>
<pre><code>def unique(nums):
    seen = set()
    for n in nums:
        if n not in seen:
            seen.add(n)
            yield n

In []:
numbers = [4, 5, 2, 6, 2, 3, 5, 8]
list(unique(numbers))

Out[]:
[4, 5, 2, 6, 3, 8]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simplest way is to <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">use <code>OrderedDict</code></a>, an easy way to dedupe while preserving order:</p>
<pre><code>from collections import OrderedDict

def unique(nums):
    yield from OrderedDict.fromkeys(nums)
</code></pre>
<p>Technically, it operates eagerly (all deduping is done up front, then you iterate the completely deduped <code>OrderedDict</code>), but all other solutions would need to build an equivalent <code>set</code> anyway by the end, so this delays the production of the first value, but does the same amount of work overall (and on Python versions with a C implemented <code>OrderedDict</code>, runs faster than handrolling a generator using a <code>set</code> as a "seen" store). The cases for which it is unsuitable are infinite input iterables and finite but large iterables where it is likely you'll stop processing them longer before you finish (in which case a lazier, <code>unique_everseen</code> solution based on a <code>set</code> is needed).</p>
<p>On Python 3.6 and higher, <a href="https://docs.python.org/3/whatsnew/3.6.html#new-dict-implementation" rel="nofollow noreferrer">plain <code>dict</code> preserves order</a> (though <a href="https://docs.python.org/3/whatsnew/3.7.html#summary-release-highlights" rel="nofollow noreferrer">it's not an official guarantee until 3.7</a>), so you don't even need an import:</p>
<pre><code>def unique(nums):
    yield from dict.fromkeys(nums)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is there a reason you need a generator? Why not just use a <code>set</code>?</p>
<pre><code>numbers = [4, 5, 2, 6, 2, 3, 5, 8]
for i in set(numbers):
    print(i)
</code></pre>
<p>If you really need a generator:</p>
<pre><code>def skipper(l):
    for i in set(l):
        yield i

for i in skipper(numbers):
    print(i)
</code></pre>
</div>
<span class="comment-copy">Indentation in python is really important, both <code>seen.add()</code> and <code>yield</code> need to be indented to beyond the <code>if</code> statement.</span>
<span class="comment-copy">Where did you get this code from? This is almost identical to the <code>unique_everseen</code> recipe in the <code>itertools</code> docs, which makes me think you got it from there, or from someone who's familiar with that code and rewrote it from memory. So you should be able to compare your code with the code you copied and see the difference in indentation.</span>
<span class="comment-copy">I did this and it still did not change the output. Is there anything else wrong with the code which might make it not print?</span>
<span class="comment-copy">@abarnert I got the code from one of the answers below.</span>
<span class="comment-copy">If one of the answers below fixes your issue, you should accept it (click the check mark next to the appropriate answer). That does two things. It lets everyone know your issue has been resolved to your satisfaction, and it gives the person that helps you credit for the assist. See <a href="http://meta.stackexchange.com/a/5235">here</a> for a full explanation.</span>
<span class="comment-copy">Note this algorithm is identical to the <code>itertools</code> <code>unique_everseen</code> recipe in the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">docs</a>, and also available in a 3rd party library as <code>toolz.unique</code>.</span>
<span class="comment-copy">Just for reference: <a href="https://docs.python.org/3.6/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">docs.python.org/3.6/library/itertools.html#itertools-recipes</a></span>
<span class="comment-copy">This is how I would've done it if the OP conditioned order matters!</span>
<span class="comment-copy">Do you think there's any performance benefit to defining an ordered set (like the solutions <a href="https://stackoverflow.com/questions/1653970/does-python-have-an-ordered-set">here</a>), or would this be <i>less</i> efficient? It seems all these workarounds stem from the non-existence of OrderedSet.</span>
<span class="comment-copy">@jpp: Most of the third party <code>OrderedSet</code>s I've seen are implemented at the Python layer, so they'd be slower (though possibly slightly more memory efficient). The 3.6+ solution (using plain <code>dict</code>) is actually more memory efficient than a <i>plain</i> <code>set</code> based solution; the new <code>dict</code> design actually makes equivalent "add only" <code>dict</code> use less memory than an equivalent <code>set</code>, and while lookups and insertions are a little slower, they're typically within an order of magnitude; no Python implemented function will match <code>dict</code> on this.</span>
<span class="comment-copy">Got it, thank you. Just to add, I read somewhere that a more-or-less ready C-level OrderedSet was written by Python developers, but the use cases were not deemed sufficient to expand <code>collections</code>. Probably because the solution you have outlined isn't too much work.</span>
<span class="comment-copy">This doesn't guarantee that you get the numbers in the same order as the original list, which might be important to the OP.</span>
<span class="comment-copy">Also, side-note: <code>for i in set(l): yield i</code> can be simplified on modern Python (since 3.3) to just <code>yield from set(l)</code>; doesn't fix the ordering issue, but it's faster/simpler to use <code>yield from</code> than a manual loop + <code>yield</code>.</span>
<span class="comment-copy">@AChampion Thought about it, but since omitted from the OP's question, didn't account for it. Must supply desired conditions!</span>
<span class="comment-copy">@ShadowRanger Neat, thanks for that</span>
