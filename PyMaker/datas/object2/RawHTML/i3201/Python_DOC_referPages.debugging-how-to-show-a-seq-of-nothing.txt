<div class="post-text" itemprop="text">
<p>I'm missing the ability to print </p>
<pre><code>    "The median cannot be found"
</code></pre>
<p>based on there being nothing in the sequence. This is my current code using None, which doesn't work.</p>
<pre><code>def print_median(seq):
   if print_median(sep) = None:
      print("The median cannot be found.")
   else:
      median = (seq[len(seq) // 2 - 1] + seq[len(seq) // 2]) / 2
      print("The median of " + str(seq) + " is " + str(median) + ".")
</code></pre>
<p>Also tried using ((),) and a few random attempts that didn't work either. 
The expected outcome is</p>
<pre><code>    &gt;&gt;&gt; print_median(())
    The median cannot be found.
</code></pre>
<p>as well as producing</p>
<pre><code>    &gt;&gt;&gt; print_median((-12, 0, 3, 9))
    The median of (-12, 0, 3, 9) is 1.5.
</code></pre>
<p>for when there are numbers inputed to the seq.</p>
</div>
<div class="post-text" itemprop="text">
<p>By convention, Python sequences are falsy if and only if they are empty.</p>
<pre><code>if seq:
  ...
else:
  print("The median cannot be found.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are limiting your function to a <a href="https://docs.python.org/3/glossary.html#term-sequence" rel="nofollow noreferrer">sequence</a>, you can just test the sequence for False since empty containers are <code>False</code> in Python:</p>
<pre><code>def print_median(seq):
   if not seq:
      print("The median cannot be found.")
   else:
      median = (seq[len(seq) // 2 - 1] + seq[len(seq) // 2]) / 2
      print("The median of " + str(seq) + " is " + str(median) + ".")
</code></pre>
<p>The will only deal with sequences and will fail on something like <code>print_median(range(10))</code> in Python 3.</p>
<p>Given you are writing for Python 3 where many items are <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer">iterables</a>, I would rewrite your function to use <code>try</code> and <code>except</code> and to handle generators by calling <code>list</code> on the sequence passed:</p>
<pre><code>def print_median(seq):
    items=list(seq)
    try:
        median = (items[len(items) // 2 - 1] + items[len(items) // 2]) / 2
        print("The median of {} is {}.".format(items, median))
    except IndexError:
        print("The median cannot be found.")    
</code></pre>
<p>That will now handle generators and lists and empty sequences as you expect:</p>
<pre><code>&gt;&gt;&gt; print_median([1,2,3])
The median of [1, 2, 3] is 1.5.
&gt;&gt;&gt; print_median(e for e in [1,2,3])
The median of [1, 2, 3] is 1.5.
&gt;&gt;&gt; print_median(range(10))
The median of [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] is 4.5.
&gt;&gt;&gt; print_median([])
The median cannot be found.
</code></pre>
</div>
<span class="comment-copy">Do you mean if nothing is passed to the function or what is passed is an empty sequence?</span>
<span class="comment-copy">Just do <code>if not seq: print("The median cannot be found.")</code></span>
<span class="comment-copy">What does "doesn't work" mean?</span>
<span class="comment-copy">Your line <code>if print_median(sep) = None</code> seems to have two problems: <code>sep</code> isn't defined, but even if it is, you can't use variable assignment in an <code>if</code> statement. Instead, use <code>==</code> for equality, or <code>is None</code> if you want to be fancy.</span>
<span class="comment-copy">The issue is that a generator will always be <code>True</code> yet may be empty...</span>
<span class="comment-copy">The OP won't be passing a generator, given that he uses <code>[]</code> access and <code>len()</code> in the nonempty case.</span>
