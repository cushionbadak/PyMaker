<div class="post-text" itemprop="text">
<p>I've got some trouble dealing with defining a user friendly function interface <strong>when passing two keyworded arguments with the same key</strong>. </p>
<p><strong>Question</strong></p>
<p>What is the best way to make it possible to call a function where <strong>two keyworded arguments have the same key</strong> and the <strong>second keyworded argument has precedence</strong>?<br/>
If this problem occurs, the first keyworded argument <strong>always stems from an unzipped database</strong> in a <code>dict</code>, while the second keyworded argument is always passed by giving it "directly" as a keyworded argument.<br/>
The database dictionary values <strong>must not be overwritten</strong> in the outer scopy of the functions, since they may be used multiple times.<br/>
edit: To keep up the usability of the function for the user, a <strong>backend-implementation</strong> is preferred. This means that the user can simply pass arguments to the function without the use of additional modules, while the function itself does all the magic.</p>
<hr/>
<p><strong>Problem</strong></p>
<p>I've got a function, called <code>fun_one</code> here, which receives a multitude of arguments defined directly by the user of my program. This may be <code>length</code> and <code>width</code> of a heat exchanger for example. To ease the use of the function and make the calling code as short as possible, the use of databases is encouraged. These databases contain the data in a <code>dict</code> (or in a pandas Series), in this case called <code>inputs</code>.<br/>
To pass the database-<code>dict</code> <code>inputs</code> to the function, it is unzipped with <code>**inputs</code> and thus passed as keyworded arguments.<br/>
<strong>Now if the user wants to overwrite a specific argument of the database</strong>, my understanding of a user-friendly approach would be to just let him pass the preceded argument again, for example with <code>length=23.7</code>, and internally overwrite the argument from the database. But of course (see example code) this raises the error before I can even enter the function where I could <code>try/except</code>:</p>
<blockquote>
<p>TypeError: fun_one() got multiple values for keyword argument 'length'</p>
</blockquote>
<p><strong>Code example reproducing the error</strong></p>
<pre><code>def fun_one(*args, **kwargs):  # short example function
    print(kwargs)

inputs = {'length': 15.8, 'width': 1.1, 'some_other_args': np.random.rand(3)}

fun_one(**inputs, length=23.7)
</code></pre>
<hr/>
<p><strong>My current solution</strong></p>
<p>My current solution <code>fun_two</code> involves <strong>not unzipping the database</strong> and passing it to <code>*args</code>. It checks <code>*args</code> for <code>dict</code>s and sets values <em>which are not yet in <code>kwargs</code> to <code>kwargs</code></em>, as shown in the code example below.  </p>
<pre><code>def fun_two(*args, **kwargs):  # example function printing kwargs
    print(kwargs)  # print kwargs before applying changes
    for arg in args:  # find dicts
        if type(arg) is dict:
            for key, val in arg.items():  # loop over dict
                _ = kwargs.setdefault(key, val)  # set val if key not in dict
    print(kwargs)  # print kwargs after applying changes

inputs = {'length': 15.8, 'width': 1.1, 'some_other_args': np.random.rand(3)}

fun_two(inputs, length=23.7)
</code></pre>
<p>But this approach is imho quite obscure for the user and requires looping and checking at the beginning of quite alot functions, since this will apply to numerous functions. (I'll outsource it to a module, so it is one line per function. But it still deviates from my understanding of an easy and clear function definition).</p>
<p>Is there any better (more Pythonic) way to do this? Did I oversee some way to do it in the process of calling the function? Performance does not matter.<br/>
Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>Easiest solution is using <code>ChainMap</code> from <code>collections</code> (<a href="https://docs.python.org/3/library/collections.html#collections.ChainMap" rel="nofollow noreferrer">manual pages</a>). That way you can chose which arguments have precedence. Example:</p>
<pre><code>from collections import ChainMap

def fun_one(*args, **kwargs):  # short example function
    print(kwargs)

inputs = {'length': 15.8, 'width': 1.1, 'some_other_args': 1}

c = ChainMap({'length': 23.7}, inputs)  # we overwrite length here
fun_one(**c)
</code></pre>
<p>Outputs:</p>
<pre><code>{'some_other_args': 1, 'width': 1.1, 'length': 23.7}
</code></pre>
<p>If we call fun_one just with inputs:</p>
<pre><code>c = ChainMap(inputs)
# or c = inputs
fun_one(**c)
</code></pre>
<p>Output will be:</p>
<pre><code>{'width': 1.1, 'length': 15.8, 'some_other_args': 1}
</code></pre>
<p>From manual:</p>
<blockquote>
<p>A <strong>ChainMap</strong> groups multiple dicts or other mappings together to create
  a single, updateable view. If no maps are specified, a single empty
  dictionary is provided so that a new chain always has at least one
  mapping.</p>
</blockquote>
<p>You can wrap this ChainMap in decorator, one change is that don't call <code>fun_one()</code> with <code>**input</code>, only <code>input</code>:</p>
<pre><code>from collections import ChainMap

def function_with_many_arguments(func):
    orig_func = func
    def _f(*args, **kwargs):
        if args:
            c = ChainMap(kwargs, args[0])
            return orig_func(**c)
        else:
            return orig_func(*args, **kwargs)
    return _f

@function_with_many_arguments
def fun_one(*args, **kwargs):  # short example function
    print(kwargs)

inputs = {'length': 15.8, 'width': 1.1, 'some_other_args': 1}
fun_one(inputs, length=23)
</code></pre>
<p>Prints:</p>
<pre><code>{'some_other_args': 1, 'length': 23, 'width': 1.1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As extension to Andrej Kesely's answer (thanks again!), I added a loop of <code>ChainMap</code>s to enable the use of multiple databases in the same function and to be able to use all kinds of positional arguments. The precedence of the multiple databases is first-come-first-served, but this is ok in this case. This is the decorator:</p>
<pre><code>def function_with_many_arguments(func):
    orig_func = func
    def _f(*args, **kwargs):
        if args:
            c = ChainMap(kwargs)
            for arg in args:
                if type(arg) is dict:
                    c = ChainMap(c, arg)
            orig_func(*args, **c)
        else:
            orig_func(*args, **kwargs)
    return _f
</code></pre>
<p>And here is my extended example function with some code to test it. I just added all kind of random arguments, not considering any Pythonic way to do it... ;)</p>
<pre><code>@function_with_many_arguments
def fun_one(a, b, *args, name, database=None, **kwargs):
    print(name)
    print(a, b)
    print(kwargs)

inputs = {'length': 15.8, 'width': 1.1, 'some_other_args': np.random.rand(3)}
inputs2 = inputs.copy()
inputs2['width'] = 123
inputs2['weight'] = 3.8

fun_one(4, 8, inputs, database=inputs2, name='abc', length=23.8, weight=55)
</code></pre>
</div>
<span class="comment-copy">Thanks for your answer! Can I somehow make this work on the <i>backend</i> of the function, so that the user does not have to use <code>ChainMap</code> directly? If not, this will at least make the loop over <code>arg.items()</code> obsolete.</span>
<span class="comment-copy">@Scotty1- I updated my answer - made an decorator to wrap ChainMap</span>
<span class="comment-copy">Awesome, this looks like a great implementation! To implement all kind of positional arguments and multiple databases, I added a loop over <code>args</code> to check for <code>dict</code> and if multiple exist, make a <code>ChainMap</code> of a <code>ChainMap</code>. I can post this as a secondary answer if anyone is interested.</span>
<span class="comment-copy">@Scotty1- Yes, why not :)</span>
