<div class="post-text" itemprop="text">
<p>I have used some example code that uses str() instead of my normal habit of '' to denote an empty string.  Is there some advantage for using str()?  Eg:</p>
<pre><code> # .....
 d = dict()
 # .....
 # .....
 if v is None:
     d[c.name] = str()
 else:
     d[c.name] = v
</code></pre>
<p>It does seem to be slower.</p>
<pre><code>$ python -m timeit "'.'.join(str(n)+'' for n in range(100))"
100000 loops, best of 3: 12.9 usec per loop
$ python -m timeit "'.'.join(str(n)+str() for n in range(100))"
100000 loops, best of 3: 17.2 usec per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Referring to the <a href="https://docs.python.org/3/library/stdtypes.html#str" rel="nofollow noreferrer">Python manual</a> <code>str()</code> is used when:</p>
<ol>
<li>You want the string representation of an object</li>
<li>You want to convert <code>bytes</code> (or other byte sequence, like <code>bytearray</code>) into a string</li>
</ol>
<p>In all other cases, you should use <code>''</code>.</p>
<p>The fact that an empty <code>str()</code> call returns a blank string is a side effect and not the intended primary use of the method.</p>
</div>
<div class="post-text" itemprop="text">
<p>The only advantage is that if <code>str</code> is redefined locally then <code>str()</code> will use that definition whereas <code>''</code> will not. Otherwise, they are equivalent (although not equal since the compiler will emit a function call in one case and a literal in the other).</p>
</div>
<span class="comment-copy">If you have <code>from __future__ import unicode_literals</code> (bad idea), it does something different in Python 2. Otherwise, donâ€™t use.</span>
<span class="comment-copy">Side-note: Many of the same reasons for preferring <code>''</code> also call for using <code>{}</code> over <code>dict()</code>; <code>{}</code> has direct interpreter support, bypassing the comparatively expensive lookup and call machinery in favor of a single dedicated <code>BUILD_MAP</code> opcode (<code>dict()</code> takes about 4x longer than <code>{}</code> in local microbenchmarks).</span>
<span class="comment-copy">Note: From a performance perspective, especially for immutable constants like <code>''</code>, the literal is <i>much</i> faster (~10x less time in local microbenchmarks). <code>''</code> is stored in the function constants, and loading it is essentially just looking it up in a C array and incrementing the reference count; using <code>str()</code> involves a built-in lookup (checking the globals <code>dict</code>, then the builtins <code>dict</code>), then a generic call bytecode (which ends up going through all the rigmarole of object construction only to realize it needs the empty string and returning it instead). Use <code>''</code>/<code>""</code>.</span>
