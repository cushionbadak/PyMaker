<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2612802/how-to-clone-or-copy-a-list">How to clone or copy a list?</a>
<span class="question-originals-answer-count">
                    20 answers
                </span>
</li>
</ul>
</div>
<p>I've got a list that I create a copy of in order to do some manipulations while still keeping the original list. However, when I set <code>copy_list</code> equal to <code>org_list</code>, they become the same thing, and if I change <code>copy_list</code>, <code>org_list</code> changes too. For example:</p>
<pre><code>org_list = ['y', 'c', 'gdp', 'cap']

copy_list = org_list

copy_list.append('hum')

print(copy_list)
print(org_list)
</code></pre>
<p>returns</p>
<pre><code>['y', 'c', 'gdp', 'cap', 'hum']
['y', 'c', 'gdp', 'cap', 'hum']
</code></pre>
<p>I don't know too much about what is actually going on but it looks like <code>org_list</code> is actually  passing itself to <code>copy_list</code> so that they are actually the same thing.</p>
<p>Is there a way to make an independent copy of org_list without doing something clumsy like:</p>
<pre><code>copy_list = []
for i in org_list:
    copy_list.append(i)
</code></pre>
<p>I say this because I have the same problem with other types of variables, for example a pandas dataframe.</p>
</div>
<div class="post-text" itemprop="text">
<p>That is because in python setting a variable actually sets a reference to the variable. Almost every person learning python encounters this at some point. The solution is simply to copy the list:</p>
<pre><code>copy_list = org_list[:] 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is just copying the reference</p>
<pre><code>copy_list = org_list
</code></pre>
<p>you should use</p>
<pre><code>copy_list = org_list[:]    # make a slice that is the whole list
</code></pre>
<p>or </p>
<pre><code>copy_list = list(org_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you write</p>
<pre><code>org_list = ['y', 'c', 'gdp', 'cap']
</code></pre>
<p>you create the list object, and give it the name "org_list".</p>
<p>Then when you do</p>
<pre><code>copy_list = org_list
</code></pre>
<p>you just mean, "the name copy_list refers to the same object as org_list does".</p>
<p>If your list only contains immutable types, then you can create a copy by</p>
<pre><code>copy_list = list(org_list)
</code></pre>
<p>But note that this is only valid if the list objects are immutable, because it creates a SHALLOW copy, i.e. the list is copied, but every element on the list is not duplicated.</p>
<p>If you have i.e. a list of lists and want EVERYTHING to be duplicated, you need to perform a DEEP copy:</p>
<pre><code>import copy
org_list = ['y', 'c', ['gdp', 'rtd'], 'cap']
copy_list = copy.deepcopy(org_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Variable names in python are references to the original. To actually make a copy, you need to be <a href="http://www.python.org/dev/peps/pep-0020/" rel="noreferrer">explicit</a>:</p>
<pre><code>import copy

copy_list = copy.copy(org_list)
</code></pre>
</div>
<span class="comment-copy">Assignments in Python <i>do not</i> create new objects - an assignment merely establishes a binding between a [variable] name and an object. That should explain everything, without talking about "references".</span>
<span class="comment-copy">I just spend the past 3 hours trying to debug my program... I thought I was going mad. This was the most infuriating bug I have EVER ran into. Wow...</span>
<span class="comment-copy">@43.52.4D. Only it's not a bug :-)</span>
<span class="comment-copy">@yuvi what if its a two dimensional array?</span>
<span class="comment-copy">@SachinSingh then you need to loop-copy, because a matrix is actually a list of references. Copying that list does not mean copying the references as well (which makes sense). Though that's not a very common situation (I can't think of any reason why you'd ever need to do it to be honest)</span>
<span class="comment-copy">If you have a list of objects, you need to do a "Deep Copy" instead: <code>import copy new_list = copy.deepcopy(old_list)</code></span>
<span class="comment-copy">what if its a 2 dimensional array.</span>
<span class="comment-copy">@SachinSingh, Then you need to also copy each sublist. You should probably checkout deepcopy. <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">docs.python.org/3/library/copy.html</a></span>
<span class="comment-copy">thanks. i saw that. But is there is another way by which i can do that i mean without using deepcopy?</span>
<span class="comment-copy">Python 3.3+ provides a copy method: <code>copy_list = org_list.copy()</code></span>
<span class="comment-copy">what if its a 2 dimensional array?</span>
