<div class="post-text" itemprop="text">
<p>i want to start a function after a timeout in a While true loop, but the code dont execute anything and jumps out the loop and i dont know why :/</p>
<p>Here is my Code</p>
<pre><code>import requests
from threading import Timer

def timeout(flag):
            print("New Request")
            statuscode = requests.get("http://adslkfhdsjf.de").status_code
            if statuscode == 200 and flag == 0:
                print("Service available")
            #Testzwecke
            print("Flag: ", flag)
            flag = 0
            #Poste result to Backend
        elif statuscode == 200 and flag == 1: 
            print("Service is available now")
            print("Flag: ", flag)
            flag = 0
            #Email an User
            #Post Request
        elif statuscode != 200 and flag == 0:
            print("Service is not available")
            #Testzwecke
            print("Flag: ", flag)
            flag = 1
            #Email to User
            #Post Request
        else: 
            print("Service is not available")
            #Testzwecke
            print("Flag: ", flag)
            #Post Request
        Timer(10, timeout, flag)

timeout(0)
</code></pre>
<p>I want that timeout is executed for example every 10 seconds. So every 10 second one condition from the function timeout() will be executed.</p>
<p>But its not working so far, the console output is nothing :/</p>
</div>
<div class="post-text" itemprop="text">
<p>Your first problem is just that you're not calling <code>main()</code>. And normally, I'd just add a comment to tell you that and close the question as a typo, but you don't want to fix that until you first fix your bigger problem.</p>
<p>Your code tries to create and call a new <code>timeout</code> function over and over, as fast as possible. And the first thing that <code>timeout</code> function does is to create a new <a href="https://docs.python.org/3/library/threading.html#timer-objects" rel="nofollow noreferrer"><code>Timer</code></a> object. Which is a new thread.</p>
<p>So you're spawning new threads as fast as Python will let you, which means in a very short time you're going to have more threads than your OS can handle. If you're lucky, that will mean you get an exception and your program quits. If you're unlucky, that will mean your system slows to a crawl as the kernel starts swapping thread stacks out to disk, and, even after you manage to kill the program, it may still take minutes to recover.</p>
<p>And really, there's no reason for the <code>while</code> loop here. Each <code>Timer</code> schedules the next <code>Timer</code>, so it will keep running forever. And there's only ever 2 threads alive at a time that way.</p>
<p>But there's not even a reason for a <code>Timer</code> in the first place. You don't want to do anything while waiting 10 seconds between requests, so why not just <code>sleep</code>?</p>
<pre><code>import time
import requests

def main():
    flag = 0
    while True:
        print("New Request")
        statuscode = requests.get("http://google.de").status_code
        if statuscode == 200 and flag == 0:
            print("Service available")
            # etc.
        time.sleep(10)

main()
</code></pre>
<hr/>
<p>Your code had another problem: you're defining a local variable named <code>flag</code> in <code>timeout</code>, but then you're trying to use it, in that <code>flag == 0</code> check, before you ever assign to it. That would raise an <code>UnboundLocalError</code>. The fact that you happen to also have a local variable named <code>flag</code> in <code>main</code> doesn't make a difference. To fix this, you'd have to do one of these:</p>
<ul>
<li>Pass <code>flag</code> in as an argument for <code>Timer</code> to pass to each <code>timeout</code> call as a parameter. (Probably best.)</li>
<li>Add a <code>nonlocal flag</code> declaration to <code>timeout</code>, so it becomes a closure cell shared by all of the <code>timeout</code> functions you define. (Not bad, but not the most idiomatic solution.)</li>
<li>Add a <code>global flag</code> declaration to both functions, so it becomes a global variable shared by everyone in the universe. (Probably fine a program this simple, but at the very least not a good habit to get into.)</li>
</ul>
<p>But, once we've gotten rid of the thread, we've also gotten rid of the function, so there's just the one local <code>flag</code>, so the problem doesn't come up in the first place.</p>
</div>
<span class="comment-copy">Your code as posted here just defines a <code>main</code> function and never calls it. Is that true for your real code as well?</span>
<span class="comment-copy">Put the declaration of the variable <code>flag</code> and the definition of <code>timeout</code> outside the <code>main</code>.</span>
<span class="comment-copy">Anyway, if you fix that (by adding a dedented <code>main()</code> at the end of your script), you'll have a whole new problem: you're creating and calling a new <code>timeout</code> function over and over as fast as possible. Each one creates a <code>Timer</code>, which creates a new thread. So you're very quickly going to create more threads than your OS can handle. If you're lucky, you'll get an error. If you're not lucky, your system will slow to a crawl, and take minutes to recover even after you manage to kill the script.</span>
<span class="comment-copy">@AfloroaieRobert While those are both reasonable things to do, how is either one going to fix any problem with the code? There's a tiny cost to constructing a new function object every 10 seconds, but who cares? The <code>flag</code> in <code>main</code> will be hidden by the <code>flag</code> in <code>timeout</code>, but the same would be true for a global <code>flag</code>.</span>
<span class="comment-copy">@abarnert, I wasn't trying to solve the problem, I was trying to suggest some improvements to the code hence the comment and not an answer.</span>
<span class="comment-copy">hi,  thank you first for the accurate answer :) One Question for a newbie, how i do that for the timer, i rly dont understand that timer well in python and the docu dont help me out. In this case i will pass the flag in my main like that ? main(flag)</span>
<span class="comment-copy">@Kai A <code>Timer</code> takes a timeout, a function, and any number of args and kwargs. So, for example, <code>Timer(20, timeout, flag)</code> will call <code>timeout(flag)</code> adter 20 seconds, and <code>Timer(20, print, 20, 30, sep=',')</code> will call <code>print(20, 30, sep=',')</code> after 20 seconds.</span>
<span class="comment-copy">so, can i call instead of main the timer function with the parameter ?</span>
<span class="comment-copy">sorry im really not that good in python</span>
<span class="comment-copy">@Kai Yes, if you want to use the Timer, you don't really need <code>main</code>, you can just call <code>timeout</code> directly. If you're passing the flag as an argument, your top-level code would call <code>timeout(0)</code> to pass in the initial value for <code>flag</code>, and then at the end of <code>timeout</code> it would do a <code>Timer(10, timeout, flag)</code> to pass the new value on to the next call.</span>
