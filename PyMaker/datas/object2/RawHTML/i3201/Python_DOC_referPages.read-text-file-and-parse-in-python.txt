<div class="post-text" itemprop="text">
<p>I have a text file(.txt) just looks like below:</p>
<hr/>
<p>Date, Day, Sect, 1, 2, 3</p>
<p>1, Sun, 1-1, 123, 345, 678</p>
<p>2, Mon, 2-2, 234, 585, 282</p>
<p>3, Tue, 2-2, 231, 232, 686</p>
<hr/>
<p>With this data I want to do the followings:</p>
<p>1) Read the text file by line as a separate element in the list</p>
<ul>
<li><p>Split elements by comma</p></li>
<li><p>Delete non-necessary elements('\n') in the list</p></li>
</ul>
<p>For the two, I did these.</p>
<pre><code>file = open('abc.txt', mode = 'r', encoding = 'utf-8-sig')
lines = file.readlines()
file.close()
my_dict = {}
my_list = []
for line in lines:
    line = line.split(',')
    line = [i.strip() for i in line]
</code></pre>
<p>2) Set the first row(Date, Day, Sect, 1, 2, 3) as key and set the other rows as values in the dictionary.</p>
<pre><code>    my_dict['Date'] = line[0]
    my_dict['Day'] = line[1]
    my_dict['Sect'] = line[2]
    my_dict['1'] = line[3]
    my_dict['2'] = line[4]
    my_dict['3'] = line[5]
</code></pre>
<p>The above code has two issues: 1) Set the first row as dictionary, too. 2) If I add this to the list as the below, it only keeps the last row as all elements in the list.</p>
<p>3) Create a list including the dictionary as elements.</p>
<pre><code>    my_list.append(my_dict)    
</code></pre>
<p>4) Subset the elements that I want to.</p>
<p>I couldn't write any code from here. But What I want to do is subset elements meeting the condition: For example, choosing the element in the dictionary where the Sect is 2-2. Then the wanted results could be as the follows:</p>
<pre><code>&gt;&gt; [{'Date': '2', 'Day': 'Mon', 'Sect': '2-2', '1': '234', '2': '585', '3': '282'}, {'Date': '3', 'Day': 'Tue', 'Sect': '2-2', '1': '231', '2':'232', '3':'686'}]
</code></pre>
<p>Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>Using pandas this is pretty easy:</p>
<p>Input:</p>
<pre><code>$cat test.txt
Date, Day, Sect, 1, 2, 3
1, Sun, 1-1, 123, 345, 678
2, Mon, 2-2, 234, 585, 282
3, Tue, 2-2, 231, 232, 686
</code></pre>
<p>Operations:</p>
<pre><code>import pandas as pd
df = pd.read_csv('test.txt', skipinitialspace=True)
df.loc[df['Sect'] == '2-2'].to_dict(orient='records')
</code></pre>
<p>Output:</p>
<pre><code>[{'1': 234, '2': 585, '3': 282, 'Date': 2, 'Day': 'Mon', 'Sect': '2-2'},
 {'1': 231, '2': 232, '3': 686, 'Date': 3, 'Day': 'Tue', 'Sect': '2-2'}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>@supremed14</strong>, you can also try the below code to prepare the list of dictionaries after reading the file.</p>
<h3>data.txt</h3>
<blockquote>
<p>As white spaces are there in text file. <strong>strip()</strong> method defined on strings will solve this problem.</p>
</blockquote>
<pre><code>Date, Day, Sect, 1, 2, 3

1, Sun, 1-1, 123, 345, 678

2, Mon, 2-2, 234, 585, 282

3, Tue, 2-2, 231, 232, 686
</code></pre>
<h3>Source code:</h3>
<blockquote>
<p>Here you do not need to worry about closing the file. It will be taken care by Python.</p>
</blockquote>
<pre><code>import json
my_list = [];

with open('data.txt') as f:
    lines = f.readlines() # list containing lines of file
    columns = [] # To store column names

    i = 1
    for line in lines:
        line = line.strip() # remove leading/trailing white spaces
        if line:
            if i == 1:
                columns = [item.strip() for item in line.split(',')]
                i = i + 1
            else:
                d = {} # dictionary to store file data (each line)
                data = [item.strip() for item in line.split(',')]
                for index, elem in enumerate(data):
                    d[columns[index]] = data[index]

                my_list.append(d) # append dictionary to list

# pretty printing list of dictionaries
print(json.dumps(my_list, indent=4))
</code></pre>
<h3>Output:</h3>
<pre><code>[
    {
        "Date": "1",
        "Day": "Sun",
        "Sect": "1-1",
        "1": "123",
        "2": "345",
        "3": "678"
    },
    {
        "Date": "2",
        "Day": "Mon",
        "Sect": "2-2",
        "1": "234",
        "2": "585",
        "3": "282"
    },
    {
        "Date": "3",
        "Day": "Tue",
        "Sect": "2-2",
        "1": "231",
        "2": "232",
        "3": "686"
    }
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I recommend you make the file a .csv (comma seperated value) file
a parser for that file would look something like this</p>
<pre><code>def parseCsvFile (dataFile):
    dict = {}
    with open(dataFile) as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            key = None
            for k in row:
                stripK = k.strip()
                stripV = row[k].strip()
                if key == None:
                    key = stripV
                    dict[key] = {}
                dict[key][stripK] = stripV
    return dict
</code></pre>
<p>This returns a dictionary of dictionaries </p>
</div>
<div class="post-text" itemprop="text">
<p>If you are allowed to use <code>pandas</code>, you can simply achieve your task by:</p>
<pre><code>import pandas as pd
df = pd.read_csv('abc.txt', skipinitialspace=True) # reads your cvs file into a DataFrame
d = df.loc[df['Sect'] == '2-2'].to_dict('records') # filters the records which `Sect` value is '2-2', and returns a list of dictionaries
</code></pre>
<p>To install <code>pandas</code> run:</p>
<pre><code>python3 -m pip install pandas
</code></pre>
<p>Assumming, the contents of <code>abc.txt</code> is the one you have provided, <code>d</code> will be:</p>
<pre><code>[{'Date': 2, 'Day': 'Mon', 'Sect': '2-2', '1': 234, '2': 585, '3': 282},
 {'Date': 3, 'Day': 'Tue', 'Sect': '2-2', '1': 231, '2': 232, '3': 686}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your <em>.txt</em> file is in the CSV format:</p>
<pre><code>Date, Day, Sect, 1, 2, 3

1, Sun, 1-1, 123, 345, 678

2, Mon, 2-2, 234, 585, 282

3, Tue, 2-2, 231, 232, 686
</code></pre>
<p>You can use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> library:</p>
<pre><code>from csv import reader
from pprint import pprint

result = []
with open('file.txt') as in_file:

    # create a csv reader object
    csv_reader = reader(in_file)

    # extract headers
    headers = [x.strip() for x in next(csv_reader)]

    # go over each line 
    for line in csv_reader:

        # if line is not empty
        if line:

            # create dict for line
            d = dict(zip(headers, map(str.strip, line)))

            # append dict if it matches your condition
            if d['Sect'] == '2-2':
                result.append(d)

pprint(result)
</code></pre>
<p>Which gives the following list:</p>
<pre><code>[{'1': '234', '2': '585', '3': '282', 'Date': '2', 'Day': 'Mon', 'Sect': '2-2'},
 {'1': '231', '2': '232', '3': '686', 'Date': '3', 'Day': 'Tue', 'Sect': '2-2'}]
</code></pre>
</div>
<span class="comment-copy">was any of the provided answers useful?</span>
<span class="comment-copy">Hi, Sorry for the late reply. I found hygull and cosmic_inquiry's answers are useful. Couldn't try the below answers though. Their answers are also seem reasonable, too. If you are willing to try them, it would be very great if you update me the results. Very thanks and have a wonderful day :)</span>
<span class="comment-copy">Thanks for your answer. But is there any way I can do it keeping a file as a txt file?</span>
<span class="comment-copy">The file you show is already a csv. Csv is an informal text format that you're already following.</span>
<span class="comment-copy">It's easiest to make it a csv, your file already is exactly that, in fact the only thing you have to do is rename the file to .csv and this can work</span>
<span class="comment-copy">@teclnol. The extension has nothing to do with it</span>
