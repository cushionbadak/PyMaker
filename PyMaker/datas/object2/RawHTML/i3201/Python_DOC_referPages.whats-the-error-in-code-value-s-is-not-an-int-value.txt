<div class="post-text" itemprop="text">
<p>I download a python code from my course website, it should work because it is supposed to be used directly in assignment, while my python 3.6 says the following code has error:</p>
<pre><code>assert (type(value) == int), "value %s is not an int" % `value`
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is this part:</p>
<pre><code>`value`
</code></pre>
<p>In Python 2.x, <a href="https://docs.python.org/2/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer">this meant the same thing as <code>repr(value)</code></a>. Guido used to call it the biggest syntax mistake in Python. It was apparently never actually deprecated, just buried in the docs somewhere nobody will ever notice it. But, not surprisingly, <a href="https://docs.python.org/3/whatsnew/3.0.html#removed-syntax" rel="nofollow noreferrer">Python 3 immediately removed it</a>, with this terse explanation:</p>
<blockquote>
<p>Removed backticks (use <code>repr()</code> instead).</p>
</blockquote>
<p>So, you could fix it like this:</p>
<pre><code>assert (type(value) == int), "value %s is not an int" % repr(value)
</code></pre>
<p>But really, this is exactly what <code>%r</code> is for:</p>
<pre><code>assert (type(value) == int), "value %r is not an int" % value
</code></pre>
<p>From <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer"><code>printf</code>-style String Formatting</a> docs:</p>
<ul>
<li><code>'r'</code>    String (converts any Python object using <code>repr()</code>). (5)</li>
<li><code>'s'</code>    String (converts any Python object using <code>str()</code>).  (5)</li>
</ul>
<p>With that change, this line is now valid as both Python 2.7 and Python 3.6 (and 2.1 and 3.8pre, for that matter).</p>
<hr/>
<p>If you're lucky, this just means your teacher hasn't quite caught everything when updating their lessons and assignments for Python 3, and it'll never come up again. (Although you should point this one out to them.)</p>
<p>But if your teacher is actually teaching Python 2, not Python 3, you probably need to use Python 2.7 instead of 3.6, or you'll have many more problems ahead.</p>
<hr/>
<p>If you are using Python 3, and you don't want to learn the <code>printf</code>-style formatting, just update it:</p>
<pre><code>assert (type(value) == int), f"value {value!r} is not an int"
</code></pre>
</div>
<span class="comment-copy">That code does not have an error.</span>
<span class="comment-copy">Show more context. Often an error is found by the Python interpreter some lines after the actual cause of the error. And do you really have those quote marks after the final <code>value</code> in your code line?</span>
<span class="comment-copy">Does Python 3 still support that backtick syntax and <code>%</code> on strings? I remember something about having to call <code>repr</code>.</span>
<span class="comment-copy">Try <code>"value {0} is not an int".format(value)</code></span>
<span class="comment-copy">@melpomene Nope, that's exactly the problem here.</span>
<span class="comment-copy">You learn everyday something new. I program Python 2.x for more then 10 years, and the backtick feature I never have seen before or read about it in the docs. Now I need to forget something the same day I learned it. But the <code>f</code> string feature of Python 3.x is new to me and that I might use.</span>
<span class="comment-copy">@rioV8 I'd almost forgotten backticks existed when 3.0 came along and removed them. But I'm pretty sure when I first started with Python, I used them a lot. Maybe because the <code>repr</code> "official string representation" was something you were supposed to show your users, because your users are all programmers, because why else would they have a computer?</span>
