<div class="post-text" itemprop="text">
<p>In the following example</p>
<pre><code>class A():
    def __init__(self):
        self.foo = 'foo'

class B():
    def __init__(self, a):
        self.a = a

a = A()
B(a)    # right
B('a')  # wrong
</code></pre>
<p>I want to do something like <code>B.__init__(self, a:A)</code> so that the argument in class B is an object of A.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can always raise a <code>ValueError</code>:</p>
<pre><code>class B():
    def __init__(self, a: A):
        if not isinstance(a, A):
            raise ValueError("a must an object of class A")
        self.a = a
</code></pre>
</div>
<span class="comment-copy">There are ways, as e.g. Rahul Goswami's answer below shows you, but in general this is considered a bit of an anti-pattern in Python: a passed argument should be fine as long as it can do what you need it to do (duck-typing), rather than matching a class you have defined previously. As a compromise, you could use the new <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type hinting</a> to suggest your class.</span>
<span class="comment-copy">this is exactly what I was looking for</span>
