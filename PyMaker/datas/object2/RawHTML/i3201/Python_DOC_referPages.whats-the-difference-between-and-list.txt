<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt;list(123)
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not iterable
&gt;&gt;&gt;[123]
[123]
</code></pre>
<p>why the list(123) results to an Exception while the [] works ??</p>
</div>
<div class="post-text" itemprop="text">
<p>list() is a type constructor
 The thing you put inside the brackets has to be iterable i.e. something that you can iterate though using a loop. Like a string or a list of integers or floats. As an integer itself is not iterable; list(123) gives an error. But if you type list('123'); then it returns a list as [ '1', '2', '3'].  </p>
<p>In case of [123] it denotes a list of a single integer 123. So it works. Its just like writing 23 in the interpretor and getting 23 as the result.  </p>
</div>
<div class="post-text" itemprop="text">
<p>For an empty list, using <code>[]</code> is much better because it's faster and avoid name look-up</p>
<p>The <code>list()</code> built-in is useful to convert some other iterable to a list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>list</code> is a callable that takes one object as parameter which must be an iterable, while <code>[]</code> is list literal and understands that the single int supplied should be the only element for the list.</p>
<p>If you want to use <code>list</code>, you have to wrap the number in an iterable, for example <code>list((123,))</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The syntax of list() constructor is:</p>
<pre><code>list([iterable])
</code></pre>
<p>And int is not iterable. so..</p>
</div>
<span class="comment-copy">Because <code>ints</code> aren't iterable, the second example is a list literal</span>
<span class="comment-copy"><code>[]</code> "arguments" are the elements themselves. <code>list</code> takes only one iterable argument</span>
<span class="comment-copy">@user3483203 oops, thanks.</span>
<span class="comment-copy"><code>list</code> is a function if by function one means a callable, which can be called with arguments.  That is the meaning of function in <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">docs.python.org/3/library/functions.html</a>, which includes all the builtin classes.</span>
<span class="comment-copy">@TerryJanReedy <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#func-list</a>, "Rather than being a function, list is actually a mutable sequence type".  The documentation you linked says it is a list of "functions and types"</span>
<span class="comment-copy">Anyway, given that there isn’t a more specialized term for “functions, bound methods, builtin functions, builtin unbound methods, and types”, I think <code>callable</code> is the best term to use to be correct without being pedantic, so the answer is fine about that.</span>
<span class="comment-copy">@abarnert I opened <a href="https://bugs.python.org/issue34118" rel="nofollow noreferrer">bugs.python.org/issue34118</a>.  I agree that the dict entry could be improved, so intend to use the set entry as the model for the collection classes.</span>
<span class="comment-copy">This is misleading. Those brackets mean the <code>iterable</code> is optional, so you can call <code>list()</code> to get an empty list, but out of context it looks like you're saying that you have to put the iterable in brackets—e.g., to create a list out of the tuple <code>2, 3, 4</code> you have to write <code>list([2, 3, 4])</code> (which does, of course, work, but that only makes it more confusing.)</span>
<span class="comment-copy">Of course it's optional, I assume that a programmer is used to read such kind of   technical docs...</span>
<span class="comment-copy">Someone who could read and understand language reference docs without any explanation wouldn’t have asked this question.</span>
