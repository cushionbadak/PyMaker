<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1663807/how-to-iterate-through-two-lists-in-parallel">How to iterate through two lists in parallel?</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I have two lists shaped like the following:</p>
<pre><code>listA
[[778, 606],
 [2115, 2049],
 [3361, 3183],
 [4512, 4179]]

listB
[[-128, -4],
 [-38, 38],
 [-15, 110],
 [-105, 185]]
</code></pre>
<p>I want to take the first element from listA and listB, to create a list that will go into another list.</p>
<p>So I want an output like the following:</p>
<pre><code> new_list
 [[[778, 606],[-128, -4]], 
 [[2115, 2049],[-38, 38]], 
 [[3361, 3183],[-15, 110]], 
 [[4512, 4179],[-105, 185]]]
</code></pre>
<p>Thoughts on how to properly structure the list comprehension or maybe theres a better out of the box method?</p>
<hr/>
<p>I think I'm struggling with the logic of how to append lists. </p>
<p>I've tried the following:</p>
<pre><code>x = []
for i,j in [(i,j) for i in listA for j in listB]:
x.append(i)
x.append(j)
</code></pre>
<p>which resulted in:</p>
<pre><code>[[778, 606],
 [-128, -4],
 [778, 606],
 [-38, 38],
 [778, 606],
 [-15, 110],
 [778, 606],
 [-105, 185]]
</code></pre>
<p>Which isn't what I wanted. So I also tried:</p>
<pre><code>y = [(i,j) for i in listA for j in listB]
</code></pre>
<p>which resulted in:</p>
<pre><code>    [([778, 606], [-128, -4]),
     ([778, 606], [-38, 38]),
     ([778, 606], [-15, 110]),
     ([778, 606], [-105, 185]),
     ([2115, 2049], [-128, -4]),
     ([2115, 2049], [-38, 38]),
     ([2115, 2049], [-15, 110]),
     ([2115, 2049], [-105, 185]),
     ([3361, 3183], [-128, -4]),
     ([3361, 3183], [-38, 38]),
     ([3361, 3183], [-15, 110]),
     ([3361, 3183], [-105, 185]),
     ([4512, 4179], [-128, -4]),
     ([4512, 4179], [-38, 38]),
     ([4512, 4179], [-15, 110]),
     ([4512, 4179], [-105, 185])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd use zip for this. It's a really nice way of looping through two lists at once and getting both of their values.</p>
<pre><code>new_list = [list(c) for c in zip(listA, listB)]
new_list = [*zip(listA, listB)] #if tuples are fine.
</code></pre>
<p>Output:</p>
<pre><code>[[[778, 606], [-128, -4]], 
[[2115, 2049], [-38, 38]], 
[[3361, 3183], [-15, 110]], 
[[4512, 4179], [-105, 185]]]
</code></pre>
</div>
<span class="comment-copy">It sounds like you're just looking for <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>. If so, the linked duplicate will explain how to do what you want. If it doesn't, please explain why it doesn't solve your problem and we can reopen.</span>
<span class="comment-copy">(almost) a duplicate of <a href="https://stackoverflow.com/questions/2407398/how-to-merge-lists-into-a-list-of-tuples" title="how to merge lists into a list of tuples">stackoverflow.com/questions/2407398/â€¦</a></span>
<span class="comment-copy">If you really wanted to do it manually, you can use indices in a comprehension if you know you're dealing with lists: <code>y = [[listA[i], listB[i]] for i in range(len(listA))]</code>. If you want it to be fully general and work on any iterables, the <code>zip</code> docs show an equivalent generator you can modify to fit your purposes. But really, you just want to use <code>zip</code>.</span>
<span class="comment-copy">@JoelBerkeley thanks for the link! I've been reading through stackoverflow posts trying to find something similar. I don't think I used the correct terminology when trying to find an answer.</span>
<span class="comment-copy">@marytay yeah sometimes we need to be told the answer before we can search for it effectively i guess</span>
<span class="comment-copy">Why use a list display with a splat inside of it inside of just calling <code>list</code>? It has the same effect, but it's less readable, slower, and not backward compatible to older versions of Python, and I can't think of any advantages to counter all of that.</span>
<span class="comment-copy">@abarnert Didn't know it was slower, updated.</span>
<span class="comment-copy">@neil thanks for the quick response. Using your first suggestion resulted in an error message "TypeError: 'list' object is not callable". I think this is due to the ()'s around list. Changing the ()'s to []'s results in the following error message "TypeError: list indices must be integers or slices, not tuple". In the end, I used the 2nd suggestion which worked like a charm!  I definitely have to start thinking about zip more often.</span>
<span class="comment-copy">Nvm, that error was my fault. I accidentally named a list 'list' earlier in my script  which reassigned the predefined variable.</span>
