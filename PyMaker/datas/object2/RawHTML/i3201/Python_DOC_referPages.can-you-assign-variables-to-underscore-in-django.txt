<div class="post-text" itemprop="text">
<p>It's always struck me a weird that Django uses the underscore as an operator, given that the underscore is normally used to for assignment to variables that you don't want to reference later. E.g.</p>
<pre><code>_, file_name = os.path.split(file_path)
</code></pre>
<p>Does this mean that you can't assign a unwanted variable to <code>_</code> in the same namespace as you want to use the <code>_("column_name")</code> notation?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>_</code> is just another name, <a href="https://docs.python.org/3/reference/lexical_analysis.html#identifiers" rel="nofollow noreferrer">perfectly valid</a> even though it looks strange. And just like any other name, rebinding it will make the old reference unavailable.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you are confusing a <code>_</code> variable with Django's
<code>from django.utils.translation import gettext as _</code>, the first <code>_</code> as used by you is a throwaway variable which is commonly used as convention.
Django also commonly imports gettext as <code>_</code> to display translated text, for eg: </p>
<pre><code>from django.http import HttpResponse
from django.utils.translation import gettext as _

def my_view(request):
    output = _("Welcome to my site.")
    return HttpResponse(output)
</code></pre>
<p>Also the underscore character (_) is used to represent “the previous result” in Python’s interactive shell and doctest tests. Installing a global _() function causes interference. Explicitly importing gettext() as _() avoids this problem.</p>
</div>
<span class="comment-copy">You should be using <code>os.path.basename(file_path)</code> if you don't care about the rest of the path.  From the <a href="https://docs.python.org/3/library/os.path.html#os.path.basename" rel="nofollow noreferrer">docs</a> "This is the second element of the pair returned by passing path to the function os.path.split()".  But since that's not the topic of the question, have you tried doing what you've asked about?</span>
<span class="comment-copy">That's what I thought would happen. Strikes me a weird choice for an operator choice.</span>
<span class="comment-copy">It's not an "operator", it's still just a name.</span>
<span class="comment-copy">Ah! So the function is just being assigned to name?</span>
<span class="comment-copy"><code>&gt;&gt;&gt; _ = len</code> <code>&gt;&gt;&gt; _('foo')</code> <code>3</code></span>
<span class="comment-copy">It's a python port of a C-library called gettext. The <code>_</code> variable name is a convention that comes from the original gnu gettext. <a href="https://en.wikipedia.org/wiki/Gettext" rel="nofollow noreferrer">en.wikipedia.org/wiki/Gettext</a></span>
