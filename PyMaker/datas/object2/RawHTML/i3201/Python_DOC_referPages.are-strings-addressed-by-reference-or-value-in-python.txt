<div class="post-text" itemprop="text">
<p>If I have a python list say : <code>['aaa', 'bbb']</code>. Is this list stored in 2x8 bytes (for 64-bit addressing) - that is we have only pointers to strings in the list or is it stored in <code>[len('aaa')+len('bbb')]*size_of_char</code> - that is we have a contiguous storage of characters of each string in the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Under the hood in CPython, everything is a pointer to <a href="https://docs.python.org/3/c-api/structures.html#c.PyObject" rel="nofollow noreferrer"><code>PyObject</code></a>. The subtype <a href="https://docs.python.org/3/c-api/list.html#c.PyListObject" rel="nofollow noreferrer"><code>PyListObject</code></a> has a pointer to an array of pointers to <code>PyObjects</code> among it's structure fields.</p>
<p>Strings are also a subtype of <code>PyObject</code>, generally implemented in <a href="https://docs.python.org/3/c-api/unicode.html#c.PyUnicodeObject" rel="nofollow noreferrer"><code>PyUnicodeObject</code></a>. Similarly to a list, a string contains a pointer to the buffer containing it's elements.</p>
<p>So the sequence of pointers actually looks like this:</p>
<ol>
<li>Pointer to list object</li>
<li>Pointer to list buffer</li>
<li>Pointer to string object</li>
<li>Pointer to string data</li>
</ol>
<p>You can deduce the fact that your list buffer can't have <code>[len('aaa') + len('bbb')] * size_of_char</code> elements from a number of reasons.</p>
<ol>
<li><strong>Everything</strong> in Python is an object, so at the very least you need to have space for the additional metadata.</li>
<li>Lists can hold any kind of object, not just fixed length strings. How do you index into a list where elements have different sizes?</li>
<li>Characters can have different sizes in Unicode. The number of bytes in a string and the number of characters are not directly related. This brings us back to both #1 and #2.</li>
</ol>
<p>In general, if you are curious about the internal workings of CPython, look into the <a href="https://docs.python.org/3/c-api/index.html" rel="nofollow noreferrer">API docs</a>, and the <a href="https://github.com/python/cpython" rel="nofollow noreferrer">source code</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A way to access python address is to use id(). </p>
<pre><code>&gt;&gt;&gt; a=['aaa', 'bbb']

&gt;&gt;&gt; id(a)
62954056

&gt;&gt;&gt; id(a[0])
62748912

&gt;&gt;&gt; id(a[1])
61749544
</code></pre>
<p>Further reading is <a href="http://foobarnbaz.com/2012/07/08/understanding-python-variables/" rel="nofollow noreferrer">here [understanding-python-variables and memory management]</a>.</p>
</div>
<span class="comment-copy">Use id(lst) to access the address. Yes, it is, by value.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/1090104/how-does-python-store-lists-internally" title="how does python store lists internally">stackoverflow.com/questions/1090104/â€¦</a></span>
<span class="comment-copy">Thank's @Marcus.Aurelianus for the link! As Mad Physicist mentioned i think we have only pointers to string objects in the list. Anyway the id function that you mentioned helped me grasp information i didn't know about python. I mentioned one them in my comment to Mad Physicist answer.</span>
<span class="comment-copy">no problem, I am also one new learner, just trying to help.</span>
<span class="comment-copy">Nice, thanks @Mad Physicist</span>
<span class="comment-copy">Thanks @Mad Physicist, I've just understand why in <code>[1, 2, 'aa']</code> the id(=address) of <code>l[2]</code> is not necessarily greater than the address of <code>l[1]</code>. In fact these are not the addresses of cells in the list buffer but the addresses of elements that are referenced by the buffer cells.</span>
<span class="comment-copy">@AyoubOm. Your understanding seems to be correct. You should select an answer by clicking on the check mark next to it if you feel that your question has been answered. That will remove it off the unanswered queue and hand out points all around.</span>
<span class="comment-copy">Technically an implementation detail, but nice reasoning</span>
<span class="comment-copy">@ Mad Physicist, Thanks sir.</span>
