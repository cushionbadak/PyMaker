<div class="post-text" itemprop="text">
<p>I tried to parse an <a href="https://en.wikipedia.org/wiki/Comparison_of_text_editors" rel="nofollow noreferrer">html table</a> into csv using python with a following script: </p>
<pre><code>from bs4 import BeautifulSoup
import requests
import csv


csvFile = open('log.csv', 'w', newline='')
writer = csv.writer(csvFile)
def parse():
    html = requests.get('https://en.wikipedia.org/wiki/Comparison_of_text_editors')
    bs = BeautifulSoup(html.text, 'lxml')
    table = bs.select_one('table.wikitable')
    rows = table.select('tr')
    for row in rows:
        csvRow = []
        for cell in row.findAll(['th', 'td']):
            csvRow.append(cell.getText())
        writer.writerow(csvRow)
        print(csvRow)


parse()
csvFile.close()
</code></pre>
<p>This code outputed a clear formated CSV file with no encoding issues.<a href="https://i.stack.imgur.com/ibRoY.png" rel="nofollow noreferrer"><img alt="an example" src="https://i.stack.imgur.com/ibRoY.png"/></a>
All was just fine before Enrico Tröger's Geany. My script was unable to write <code>ö</code>
into a csv file, so i tried this:
<code>csvRow.append(cell.text.encode('ascii', 'replace'))</code> instead of that: <code>csvRow.append(cell.getText())</code>
All was fine, despite the fact that each table cell was nested in <code>b''</code>. <a href="https://i.stack.imgur.com/4ALGb.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/4ALGb.png"/></a> So, how can i get a clear formated csv file withous encoding issues(like in the first screenshot) and replaced or ignored all
non-unicode symbols(like in the second screenshot) using my scipt?</p>
</div>
<div class="post-text" itemprop="text">
<p>Change this one:</p>
<pre><code>csvFile = open('log.csv', 'w', newline='')
</code></pre>
<p>To this one:</p>
<pre><code>csvFile = open('log.csv', 'w', newline='', encoding='utf8')
</code></pre>
<p><a href="http://docs.python.org/3/library/csv.html#examples" rel="nofollow noreferrer"><code>csv</code> module documentation</a>:</p>
<blockquote>
<p>Since <code>open()</code> is used to open a CSV file for reading, the file will by default be decoded into unicode using the system default encoding (see <a href="http://docs.python.org/3/library/locale.html#locale.getpreferredencoding" rel="nofollow noreferrer"><code>locale.getpreferredencoding()</code></a>). To decode a file using a different encoding, use the encoding argument of open:</p>
<pre><code>import csv
with open('some.csv', newline='', encoding='utf-8') as f:
    reader = csv.reader(f)
    for row in reader:
         print(row)
</code></pre>
<p>The same applies to writing in something other than the system default encoding: specify the encoding argument when opening the output file.</p>
</blockquote>
<p>I suppose your system default encoding is not <code>utf8</code>.
You can check it like this:</p>
<pre><code>import locale
locale.getpreferredencoding()
</code></pre>
<p>Hope it helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like the csv module expects strings, not <code>bytes</code>.  So you could de-encode your <code>bytes</code> before passing them:</p>
<pre><code>cell.text.encode('ascii', 'replace').decode('ascii')
</code></pre>
</div>
<span class="comment-copy">Can you add the full error traceback with the <code>UnicodeDecodeError</code> to the question?</span>
<span class="comment-copy">That worked, but i needed to replace <code>csvRow.append(cell.text.encode('ascii', 'replace')</code> to <code>csvRow.append(cell.getText())</code></span>
