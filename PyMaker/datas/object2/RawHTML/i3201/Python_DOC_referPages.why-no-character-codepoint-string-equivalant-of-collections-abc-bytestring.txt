<div class="post-text" itemprop="text">
<p>Python's <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="nofollow noreferrer">collections.abc</a> module offers <code>Sequence</code> and <code>MutableSequence</code> abstract base classes (ABCs) and these cover¹ the <code>str</code>, <code>bytes</code>, <code>bytearray</code> and similar types as expected.</p>
<p><code>collections.abc</code> also offers a <code>ByteString</code> ABC, which covers <code>bytes</code>, <code>bytearray</code> and presumably similar types. But it offers no ABC for strings of characters or codepoints such as <code>str</code>. (Such an ABC might be named <code>String</code>, <code>CharString</code> or <code>CodepointString</code>.) Why does it offer the former but not the latter? (Put another way, what are the expected use cases that require the former but not the latter?)</p>
<hr/>
<p>¹ 'Cover' as in, the subtypes are <code>isinstance()</code> the ABC.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.ByteString" rel="nofollow noreferrer"><code>ByteString</code></a> was added to give you a way to test for the "bytes-like type" that appears all over the 3.x docs without having to write <code>(bytes, bytearray)</code>.</p>
<p>In fact, the docstring for it is just "This unifies bytes and bytearray."</p>
<p>There is no similar need to for Unicode strings, because <code>str</code> is the only such type; there's nothing to unify it with.</p>
<p>You can click on the source link at the top of the docs, find <code>ByteString</code>, and <code>git blame</code> it right from the GitHub GUI to find <a href="https://github.com/python/cpython/commit/d05eb0043e597cf2d5c429d0e554fd39364e36b0" rel="nofollow noreferrer">the commit that added it</a>. The checkin comment is:</p>
<blockquote>
<h2>Add ABC ByteString which unifies bytes and bytearray (but not memoryview).</h2>
<p>There's no ABC for "PEP 3118 style buffer API objects" because there's no
  way to recognize these in Python (apart from trying to use memoryview()
  on them).</p>
<p>Note that array.array really should be registered as a MutableSequence
  but that would require importing it whenever collections is imported.</p>
</blockquote>
<p>There might be further discussion on <a href="https://bugs.python.org/" rel="nofollow noreferrer">b.p.o.</a> or the <a href="https://mail.python.org/mailman/listinfo/python-dev" rel="nofollow noreferrer">python-dev</a> or maybe <a href="https://mail.python.org/mailman/listinfo/python-ideas" rel="nofollow noreferrer">python-ideas</a> mailing list archives near 21 Nov 2007, if you really want to dig deeper. But I doubt there's much more of interest there, because there's really not much to discuss here.</p>
<hr/>
<p>Note that <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer"><code>typing</code></a> actually <em>does</em> have a type for this, <a href="https://docs.python.org/3/library/typing.html#typing.Text" rel="nofollow noreferrer"><code>Text</code></a>, which is documented as:</p>
<blockquote>
<p><code>Text</code> is an alias for <code>str</code>. It is provided to supply a forward compatible path for Python 2 code: in Python 2, Text is an alias for <code>unicode</code>.</p>
<p>Use <code>Text</code> to indicate that a value must contain a unicode string in a manner that is compatible with both Python 2 and Python 3:</p>
</blockquote>
<p>As the docs make clear, this wasn't added to unify multiple Unicode string types within the same language, but to unify Python 2 <code>unicode</code> and Python 3 <code>str</code>, at static type checking time.</p>
<p>At runtime, if you want this, you almost certainly want the actual <code>str</code> or <code>unicode</code> constructor, so you'd use something like <a href="https://pythonhosted.org/six/#six.text_type" rel="nofollow noreferrer"><code>six.text_type</code></a>.</p>
</div>
<span class="comment-copy">Because the only one is <code>str</code>?</span>
<span class="comment-copy"><code>ByteString</code> was added to give you a way to test for the "bytes-like type" that appears all over the 3.x docs without having to write <code>(bytes, bytearray)</code>. In fact, the docstring for it is just "This unifies bytes and bytearray." There is no similar need to for Unicode strings, because <code>str</code> is the only such type; there's nothing to unify it with.</span>
<span class="comment-copy">I'm sure there was some discussion of this on python-dev, python-ideas, or b.p.o. If you really want to read it, and can't figure out how to search it yourself, someone could dig it up for you and write an answer. But it doesn't seem likely to be very interesting to you, or to anyone else.</span>
<span class="comment-copy">You can easily jump to <a href="https://github.com/python/cpython/commit/d05eb0043e597cf2d5c429d0e554fd39364e36b0" rel="nofollow noreferrer">the commit that added <code>ByteString</code></a> to see the checkin comment, though.</span>
