<div class="post-text" itemprop="text">
<p>I have the following two inputs <code>input1</code> and <code>input2</code> ,both the inputs are matching the <code>train</code> variable,the regex should only match <code>input2</code> as it has the exact train name "Glory" ,regex should an exact match of the train, how to fix this?</p>
<pre><code>import re
input1="""Sun Jul  1 17:42:38 2018 username1 &lt;usernam1@company.com&gt; forwarded CoreCapture-275.3 to GloryB and GloryE"""

input2 = "Wed Mar 21 16:04:59 2018 username2 &lt;username2@company.com&gt; submitted CoreCapture-275 to Glory"

train = "Glory"
for line in reversed(input1.splitlines()) :
    match = re.match(r'.*(submitted|forwarded)(.*) to .*%s.*'%train,line)
    if match:
        print line
        print match.group(2).strip()
        break
</code></pre>
<p>EXPECTED OUTPUT:</p>
<pre><code>should not match input1
CoreCapture-275(for input2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm going to take a wild guess at what you want, but I could be wrong.</p>
<p>You're asking for <code>.*Glory.*</code>—that is, any string that includes the substring <code>Glory</code>. Greediness isn't going to change the fact that <code>' to GloryB and GloryE'</code> contains that substring. It <em>could</em> change whether you match <code>''</code>, <code>'Glory'</code>, <code>'B and GloryE'</code> or <code>'GloryB and '</code>, <code>'Glory'</code>, <code>'E'</code>, but that doesn't do any good; either way, it matches.</p>
<p>I think what you <em>may</em> want to ask for is <code>.*\bGlory\b.*</code>—that is, any string that contains the substring <code>Glory</code> between word boundaries. <a href="https://regex101.com/r/mARBy5/1" rel="nofollow noreferrer">Like this Regex101 demonstration</a>:</p>
<pre><code>match = re.match(r'.*(submitted|forwarded)(.*) to .*\b%s\b.*'%train,line)
</code></pre>
<p>See <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">Regular Expression Syntax</a> for an explanation of what <code>\b</code> means:</p>
<blockquote>
<p>Matches the empty string, but only at the beginning or end of a word. A word is defined as a sequence of word characters. Note that formally, <code>\b</code> is defined as the boundary between a <code>\w</code> and a <code>\W</code> character (or vice versa), or between <code>\w</code> and the beginning/end of the string. This means that <code>r'\bfoo\b'</code> matches <code>'foo'</code>, <code>'foo.'</code>, <code>'(foo)'</code>, <code>'bar foo baz'</code> but not <code>'foobar'</code> or <code>'foo3'</code>.</p>
</blockquote>
<p>If you wanted to match only <code>Glory</code> at the end of the line, or <code>Glory</code> with whitespace (rather than any non-word character) or EoL, or something else, then of course this is wrong.</p>
</div>
<span class="comment-copy">Are you just looking for <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer"><code>*?</code></a>?</span>
<span class="comment-copy">@abarnert - No,even after adding <code>*?</code> regex still matches input1,it should not match input1 at all</span>
<span class="comment-copy">@abarnert - I want to do an exact match of Glory in the line , it should not match a line with <code>GloryB</code> ,<code>GloryE</code> ,It the line contains Glory GloryB GloryE,it should still match</span>
<span class="comment-copy">You still haven't explained what "exact match" means. Why is <code>to Glory</code> an exact match, but <code>to GloryB</code> not? Is it about word boundaries? End of the line? Something different? I posted an answer with a guess, but it's just a guess, because I don't actually know what rule you're trying to apply here.</span>
<span class="comment-copy">@abarnert - GloryB and Glory are different words, so it is word boundaries</span>
