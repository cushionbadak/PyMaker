<div class="post-text" itemprop="text">
<p>I am creating an API to receive and process images.  I have to receive the image in bytearray format.  The following is my code to post:</p>
<p><strong>Approach 1</strong>
Posting the image to api</p>
<pre><code>with open("test.jpg", "rb") as imageFile:
    f = imageFile.read()
    b = bytearray(f)    
    url = 'http://127.0.0.1:5000/lastoneweek'
    headers = {'Content-Type': 'application/octet-stream'}
    res = requests.get(url, data=b, headers=headers)
    ##print received json response
    print(res.text)
</code></pre>
<p>My API: Receiving image at api</p>
<pre><code>@app.route('/lastoneweek', methods=['GET'])
def get():
    img=request.files['data']
    image = Image.open(io.BytesIO(img))
    image=cv2.imread(image)
    ##do all image processing and return json response
</code></pre>
<p>Within my api I have tried, <code>request.get['data']</code> <code>request.params['data']</code>....I am getting <code>object has no attribute</code> error.</p>
<p>I tried passing the bytearray to json along with width and height of the image like:</p>
<p><strong>Approach 2</strong>:Posting image to api</p>
<pre><code>data = '{"IMAGE":b,"WIDTH":16.5,"HEIGHT":20.5}'
url = 'http://127.0.0.1:5000/lastoneweek'
headers = {'Content-Type': 'application/json'}
res = requests.get(url, data=data, headers=headers)
</code></pre>
<p>and changed my get function at the API as </p>
<p>Receive image at api</p>
<pre><code>@app.route('/lastoneweek', methods=['GET'])
def get():
    data=request.get_json()
    w = data['WIDTH']
    h = data['HEIGHT']
</code></pre>
<p>but have received the following error for example:</p>
<pre><code>TypeError: 'LocalProxy' does not have the buffer interface
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>server.py file:</p>
<pre><code>from flask import Flask
from flask import request
import cv2
from PIL import Image
import io
import requests
import numpy as np

app = Flask(__name__)

@app.route('/lastoneweek', methods=['POST'])
def get():
    print(request.files['image_data'])
    img = request.files['image_data']
    image = cv2.imread(img.filename)
    rows, cols, channels = image.shape
    M = cv2.getRotationMatrix2D((cols/2, rows/2), 90, 1)
    dst = cv2.warpAffine(image, M, (cols, rows))
    cv2.imwrite('output.png', dst)
    ##do all image processing and return json response
    return 'image: success'

if __name__ == '__main__':
    try:
        app.run()
    except Exception as e:
        print(e)
</code></pre>
<p>with client.py file as:</p>
<pre><code>import requests

with open("test.png", "rb") as imageFile:
    # f = imageFile.read()
    # b = bytearray(f)    
    url = 'http://127.0.0.1:5000/lastoneweek'
    headers = {'Content-Type': 'application/octet-stream'}
    try:
        response = requests.post(url, files=[('image_data',('test.png', imageFile, 'image/png'))])
        print(response.status_code)
        print(response.json())
    except Exception as e:
        print(e)
    # res = requests.put(url, files={'image': imageFile}, headers=headers)
    # res = requests.get(url, data={'image': imageFile}, headers=headers)
    ##print received json response
    print(response.text)
</code></pre>
<p>I referred this link: <a href="http://docs.python-requests.org/en/master/user/advanced/#post-multiple-multipart-encoded-files" rel="nofollow noreferrer">http://docs.python-requests.org/en/master/user/advanced/#post-multiple-multipart-encoded-files</a>
This solves the first issue.</p>
<p>The line <code>image = Image.open(io.BytesIO(img))</code> is wrong since <code>img</code> is a <code>&lt;class 'werkzeug.datastructures.FileStorage'&gt;</code> which should not be passed to io.BytesIO, since it takes bytes-like object as mentioned here: <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow noreferrer">https://docs.python.org/3/library/io.html#io.BytesIO</a>, and explanation of bytes-like object here: <a href="https://docs.python.org/3/glossary.html#term-bytes-like-object" rel="nofollow noreferrer">https://docs.python.org/3/glossary.html#term-bytes-like-object</a>
So, instead of doing this. Passing filename directly to <code>cv2.imread(img.filename)</code> solved the issue.</p>
</div>
<span class="comment-copy">Thank you...my original development is quite similar to the one that you have provided...which is posting the image and receiving the other end. It is working without trouble.  However, the client can send the image only as bytearray and hence the question...thank you again for citing the help links...I will go through them.</span>
<span class="comment-copy">Thank you and apologies....I misssed the 'rb' parameter and was under the impression that code you have provided just reads and pushes the file...this works perfectly.  Thank you again.</span>
<span class="comment-copy">I am learning Flask and your post and comment helped me to learn further about it, so Thank You.</span>
<span class="comment-copy">When I am trying to post the image as bytearray to a 127.0.0.1:5000 server I get read the image in the server with opencv...however when I change the path to a remote server...the image is not getting delivered...do you have any thoughts...</span>
<span class="comment-copy">What does <code>print (img.filename)</code> at server gives?</span>
