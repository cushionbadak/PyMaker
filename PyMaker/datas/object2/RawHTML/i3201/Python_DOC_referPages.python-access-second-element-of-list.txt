<div class="post-text" itemprop="text">
<p>When I print my list I get something like this </p>
<p><code>[[6.0, 0.5], [6.1, 1.0], [6.2, 1.5], [6.3, 2.0], [6.4, 2.5], [6.5, 3.0], [6.6, 3.5], [6.7, 4.0], [6.8, 4.5]]</code></p>
<p>I want to extract first and second elements from above list into separate lists so that I can ask the plt to plot it for me. </p>
<p>So my results should be 
<code>[6.0,6.1,6.2 ... 6.8]</code> and <code>[0.5,1.0,1.5,2.0 , ... .4.5]</code></p>
<p>I  want to know if we have a cleaner solution than to </p>
<pre><code>for sublist in l:
    i=0
    for item in sublist:
       flat_list.append(item)
       break #get first element of each  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try <code>list indexing</code>:</p>
<pre><code>data = [[6.0, 0.5], [6.1, 1.0], [6.2, 1.5], [6.3, 2.0], [6.4, 2.5], [6.5, 3.0], [6.6, 3.5], [6.7, 4.0], [6.8, 4.5]]
d1 = [item[0] for item in data]
print d1
d2 = [item[1] for item in data]
print d2
</code></pre>
<p>output : </p>
<pre><code>[6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8]
[0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend using numpy arrays. For example:</p>
<pre><code>import matplotlib.pyplot as plt
import numpy as np

a= np.array([[6.0, 0.5], [6.1, 1.0], [6.2, 1.5], [6.3, 2.0], [6.4, 2.5], [6.5, 3.0], [6.6, 3.5], [6.7, 4.0], [6.8, 4.5]])

plt.plot(a[:,0], a[:,1])
plt.show()
</code></pre>
<p>Output:
<a href="https://i.stack.imgur.com/qEQ7p.jpg" rel="nofollow noreferrer"><img alt="Output" src="https://i.stack.imgur.com/qEQ7p.jpg"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here a try with zip, <code>zip()</code> will makes iterator that aggregates elements based on the iterables passed, and returns an iterator of tuples, so <code>map()</code> function is used to make the tuples to list :</p>
<pre><code>l = [[6.0, 0.5], [6.1, 1.0], [6.2, 1.5], [6.3, 2.0], [6.4, 2.5], [6.5, 3.0], [6.6, 3.5], [6.7, 4.0], [6.8, 4.5]]

a,b = map(list,zip(*l))
print(a,b)
</code></pre>
<p>O/P will be like :</p>
<pre><code>[6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8]  [0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a> will provide the required output.</p>
<pre><code>xy = [[6.0, 0.5], [6.1, 1.0], [6.2, 1.5], [6.3, 2.0], [6.4, 2.5], [6.5, 3.0], [6.6, 3.5], [6.7, 4.0], [6.8, 4.5]]
x,y = zip(*xy)
print(x)
print(y)
</code></pre>
<p>Output:</p>
<pre><code>(6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8)
(0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5)
</code></pre>
<p><code>zip()</code> aggregates the elements from all the iterable. <code>zip(x,y)</code> would provide the list you currently have. <code>zip()</code> with <code>*</code> can be used to unzip a list.</p>
<p>Also, <strong>there is no need to convert the tuples to list</strong> since <code>pyplot.plot()</code> takes an <code>array-like</code> parameter.</p>
<pre><code>import matplotlib.pyplot as plt
plt.plot(x,y)
plt.show()
</code></pre>
<p><a href="https://i.stack.imgur.com/J2YKL.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/J2YKL.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>One-liner using <a href="https://docs.python.org/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code> built-in</a> and <a href="https://docs.python.org/3.6/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">unpacking</a></p>
<pre><code>&gt;&gt;&gt; original = [[6.0, 0.5], [6.1, 1.0], [6.2, 1.5], [6.3, 2.0], [6.4, 2.5], [6.5, 3.0], [6.6, 3.5], [6.7, 4.0], [6.8, 4.5]]
&gt;&gt;&gt; left, right = zip(*original)
&gt;&gt;&gt; left
(6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8)
&gt;&gt;&gt; right
(0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5)
</code></pre>
<p>if you are embarassed that results are <code>tuple</code>s we can turn them into <code>list</code>s simply using <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code> built-in</a>:</p>
<pre><code>&gt;&gt;&gt; left, right = map(list, zip(*original))
&gt;&gt;&gt; left
[6.0, 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8]
&gt;&gt;&gt; right
[0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Lots of pure Python approaches here.  But given that your goal is to plot the separated values, I think there's a case to be made here for the simplicity of Pandas - just drop the list as-is into a data frame and <code>plot()</code>:</p>
<pre><code>import pandas as pd

pd.DataFrame(data).plot(x=0, y=1)
</code></pre>
<p><a href="https://i.stack.imgur.com/Wl9K0.png" rel="nofollow noreferrer"><img alt="plot" src="https://i.stack.imgur.com/Wl9K0.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>l = [[6.0, 0.5], [6.1, 1.0], [6.2, 1.5], [6.3, 2.0], [6.4, 2.5], [6.5, 3.0], [6.6, 3.5], [6.7, 4.0], [6.8, 4.5]]
a,b=list(zip(*l))
print('first elements:',a)
print('second elements:',a)
</code></pre>
<p>To plot:</p>
<pre><code>import matplotlib.pyplot as plt
l = [[6.0, 0.5], [6.1, 1.0], [6.2, 1.5], [6.3, 2.0], [6.4, 2.5], [6.5, 3.0], [6.6, 3.5], [6.7, 4.0], [6.8, 4.5]]
a,b=list(zip(*l))
print('first elements:',a)
print('second elements:',a)
plt.plot(a,b)
plt.show()
</code></pre>
</div>
<span class="comment-copy">Are you unaware of list indexing? <code>sublist[0]</code>? You're using a really weird way to get the first item of a list. You might want to go through the <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">Python tutorial</a>, or browse the docs for the built-in <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">types</a> and <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">functions</a> a bit.</span>
