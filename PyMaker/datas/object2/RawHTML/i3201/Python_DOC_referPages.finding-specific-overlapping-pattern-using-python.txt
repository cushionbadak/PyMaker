<div class="post-text" itemprop="text">
<p>I am trying to extract out all instances of the VCV (vowel consonant vowel) pattern in a word using regex. This should also include the start and end, which could be CV when at the start or VC when at the end.</p>
<p>Given the word "bookeeping" as an input, the expected output would be:</p>
<pre><code>boo, ookee, eepi, ing
</code></pre>
<p>My current attempt using the regex library for overlapping patterns looks like:</p>
<pre><code>import regex as re

word = "bookeeping"
print(re.findall(r'[aeiouy]+?[bcdfghkjlmnpqrstvwxz]+[aeiouy]+', word, overlapped=True))
</code></pre>
<p>with the (incorrect) output:</p>
<pre><code>['ookkee', 'okkee', 'eepi', 'epi']
</code></pre>
<p>'okkee' is not valid and it does not grab the start or end. How do I force it to exclude words that do not include all preceding matches?</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems from your expected output that vowels are optional in the vowel-consonant-vowel pattern you're looking for, in which case the following will do:</p>
<pre><code>import re
pos = 0
while True:
    match = re.search(r'[aeiouy]*[bcdfghkjlmnpqrstvwxz]+([aeiouy]*)', 'bookeeping'[pos:])
    if not match:
        break
    print(match.group(0))
    pos += match.start(1)
</code></pre>
<p>This outputs:</p>
<pre><code>boo
ookee
eepi
ing
</code></pre>
</div>
<span class="comment-copy">Thanks for rephrasing everything, it wasn't clear at all. Also a small snippet to run the regex would help a lot to speed up everything.</span>
<span class="comment-copy">I do not see the vowel consonant vowel pattern in your expected output?</span>
<span class="comment-copy"><code>boo</code> &lt;-- how is this match of a vowel-consonant-vowel pattern? Same goes for <code>ing</code>.</span>
<span class="comment-copy">zwer and pkpkpk, I did not have enough information in the description of the question; I also needed to include the start and end of words. That resuts in a CV when at the start and a VC when at the end.</span>
<span class="comment-copy">This works for all cases that I need it to. Thank you. I am not sure how the logic works, however. What is pos += match.start(1) doing?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/re.html#re.Match.start" rel="nofollow noreferrer"><code>match.start(1)</code></a> returns the position of the start of the substring captured by the first group in the regex. And by incrementing <code>pos</code> by that much, we can skip the first vowels and consonants in the last match for our next iteration.</span>
<span class="comment-copy">I see it now, thanks again for the explanation.</span>
<span class="comment-copy">Glad to be of help. Can you mark the answer as accepted if you think it is correct?</span>
