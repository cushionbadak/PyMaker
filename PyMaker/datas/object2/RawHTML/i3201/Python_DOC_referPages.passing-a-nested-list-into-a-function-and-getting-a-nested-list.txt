<div class="post-text" itemprop="text">
<p>** Based on <code>Marcus.Aurelianus</code> response, I have modified the question and executed the following code</p>
<pre><code>def Bigfunction(G,T):
    return list(map(lambda x,y:10**-3*x*(1 + (y-25)),G,T)),list(map(lambda x,y:(x/1000)*(1 + (y-25)),G,T)), list(map(lambda x:(x/800),G))
G = list(range(100,1100,100))
T = list(range(25,40,10))
Iph_cal, Isc_cal, Tcel_cal = Bigfunction(G,T)
print(Iph_cal, Isc_cal, Tcel_cal)
</code></pre>
<p>**Output is:</p>
<pre>[0.07000999999999999, 0.14464065999999998] [0.06999999999999999, 0.14461999999999997] [28.5, 32.0, 35.5, 39.0, 42.5, 46.0, 49.5, 53.0, 56.5, 60.0]
</pre>
<p>** In output: first and second list have given two elements only. Where as third list has given 10 elements, which is correct. Why the first and second list are not producing 10 elements. </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">lambda</a> and <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">map</a> function.</p>
<pre><code>def Bigfunction(G,T):
    return list(map(lambda x:0.03*x,G)),list(map(lambda x,y:(x/1000)*(y-25),G,[T]*len(G))), list(map(lambda x:x/800,G))
G = list(range(100,1100,100))
T1, I1, I2 = Bigfunction(G,25)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You try to return multiple values but you do not use the correct syntax. Try this:</p>
<pre><code>def Bigfunction(G, T):
    return 0.03 * G, (G / 1000) * (T - 25), G / 800


T1 = []
T2 = []
T3 = []
for G in range(100, 1100, 100):
    a, b, c = Bigfunction(G, 25)
    T1.append(a)
    T2.append(b)
    T3.append(c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think it's better to define 3 separate functions for the calculations as you've done first. However, I would give them more descriptive names according to what they do. This way you'll be able to combine them as you want or even call them from other modules.</p>
<p>For instance:</p>
<pre><code>def solar_current(G):
    return 0.03*G # Solar cell photo current in A

def shorcircuit_current(G,T):
    return (G/1000)*(T-25)  # short circuit current

def f3(G): # Whatever name it describes a bit better what it does.
    return G/800

T1, I1, I2 = [], [], []
for G in range(100, 1100, 100):
    T1.append(solar_current(G))
    I1.append(shortcircuit_current(G, 25))
    I2.append(f3(G))
</code></pre>
<p>PS: I assume the <code>25</code> you're passing as T value is an example. With the calculations done in <code>shortcuit_current()</code> it will always return 0</p>
</div>
<span class="comment-copy">The syntax of <code>Bigfunction</code> is incorrect. You cannot have multiple <code>return</code> statements</span>
<span class="comment-copy">Return means the function end...</span>
<span class="comment-copy">Thanks a lot mentioning about lambda and map. It worked for me when i used T = 25. It gave output. But, when I gave a list of T values, it gives error. After your response, I have modified the question above and please, look into to know what is the error.</span>
<span class="comment-copy">@ Msquae, the reason behind is that I use [T]*len(G) to make a list for the lambda function to iterate. U can simple take out [] and make it T*len(G) and it will work again.</span>
<span class="comment-copy">Excellent. It worked. I am new to Python and thanks for helping me.</span>
<span class="comment-copy">@Msquare, no problem.</span>
<span class="comment-copy">I have one more question here. Now, i don't give T input to the Bigfunction. Now it will be defined as <code>def Bigfunction(G)</code>. But, inside the function, first subfunction gives me T and I want to use it in the third subfunction where I require T. Is it possible?</span>
<span class="comment-copy">Incorrect, G is a list, you have to iterate over it.</span>
<span class="comment-copy">I did not even see that, fixed it</span>
