<div class="post-text" itemprop="text">
<p>So let's say my code is as follows:</p>
<pre><code>Numbers = [1, 2, 3, 4]

Print(Numbers.count(1,2))
</code></pre>
<p>How could I get the output to return 2?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>count</code> method of the <code>list</code> object only takes 1 argument. The easiest to achieve what you are looking for is to use a simple addition:</p>
<pre><code>Numbers = [1, 2, 3, 4]
print(Numbers.count(1) + Numbers.count(2))
# outputs 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The simplest approach, using <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code></a> and <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>:</p>
<pre><code>sum(map(Numbers.count, (1,2)))
</code></pre>
<p>Once the number of elements that you want to count increases, you will be better off using a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> and add the counts from there:</p>
<pre><code> from collections import Counter
 c = Counter(Numbers)
 sum(c[x] for x in (1,2))
</code></pre>
<p>The main advantage of the latter method is that the <code>Counter</code> obtains all counts in a single iteration while repeated <code>list.count</code> calls repeatedly iterate the list. </p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>list.count</code> repeatedly will have complexity O(m*n). This isn't recommended. You can achieve your task with complexity O(m+n) by using <code>collections.Counter</code>:</p>
<pre><code>L = [1, 2, 3, 4]

from collections import Counter

c = Counter(L)

res = sum(map(c.get, [1, 2]))  # 2
</code></pre>
<p>To cater for potential missing values, you can use <code>dict.__getitem__</code>:</p>
<pre><code>res = sum(map(c.__getitem__, [1, 2]))
</code></pre>
</div>
<span class="comment-copy">I'm ashamed this was accepted, other answers are way better than mine.</span>
<span class="comment-copy">If you just use <code>c[i]</code> you won't even need the default value, as <code>Counter.__getitem__</code> will return <code>0</code> by default.</span>
<span class="comment-copy">@schwobaseggl, Nice point, thank you! I do feel, though, stylistically, <code>__</code> methods aren't <i>meant</i> for front-end use. But you're right this is more efficient.</span>
<span class="comment-copy">I agree. Particularly when the the generator expressions are so short and pretty. I also find it an odd design decision in <code>Counter</code> that <code>get</code> and <code>__getitem__</code> return different things for unknown keys.</span>
