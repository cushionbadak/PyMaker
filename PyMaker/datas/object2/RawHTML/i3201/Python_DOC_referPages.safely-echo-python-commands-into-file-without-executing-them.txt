<div class="post-text" itemprop="text">
<p>So I have a python file with a ton of lines in it that I want to read into python then echo into another file over a socket. </p>
<p>Assuming I have file foo.py</p>
<pre><code>import os
os.popen('some command blah')
print("some other commands, doesn't matter")
</code></pre>
<p>Then I try and open the file, read all the lines, and echo each line into a new file. </p>
<p>Something along the lines of </p>
<pre><code>scriptCode = open(os.path.realpath(__file__)).readlines()
for line in scriptCode:
    connection.send("echo " + line + " &gt;&gt; newfile.py")
print("file transfered!") 
</code></pre>
<p>However, when I do this, the command is executed in the remote shell. </p>
<p><strong>So my question:</strong></p>
<p>How do I safely echo text into a file without executing any keywords in it?</p>
<p><strong>What have I tried?</strong></p>
<ul>
<li>Adding single quotes around line</li>
<li>Adding single quotes around line and then a backslash to single quotes in line</li>
</ul>
<p><strong>Things I've considered but haven't tried yet:</strong></p>
<ul>
<li>Base64 encoding the line until on the remote machine then decoding it (I don't want to do this because there's no guarentee it'll have this command) </li>
</ul>
<p><strong>I know this is odd. Why am I doing this?</strong></p>
<ul>
<li>I'm building a pentesting reverse shell handler. </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/shlex.html#shlex.quote" rel="nofollow noreferrer"><code>shlex.quote</code></a> will:</p>
<blockquote>
<p>Return a shell-escaped version of the string s. The returned value is a string that can safely be used as one token in a shell command line, for cases where you cannot use a list.</p>
</blockquote>
<p>Much safer than trying to quote a string by yourself.</p>
</div>
<span class="comment-copy">Note that it's identical to: <code>"'" + line.replace("'", "'\"'\"'") + "'"</code> and that <code>shlex.quote</code> was only added in Python 3.3.</span>
<span class="comment-copy">@alex-taylor works like a charm.  (though I did <code>from pipes</code>) Thanks</span>
