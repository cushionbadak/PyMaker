<div class="post-text" itemprop="text">
<p>For the list shown in the example:    </p>
<pre><code>my_list = ['hi', 'babe', 'hi', 'babe', 'key', 'key']

output = [0, 1, 4]
</code></pre>
<p>or </p>
<pre><code>output =[1, 1, 0, 0, 1, 0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Turn the list to a set then use <code>.index</code>:</p>
<pre><code>output = [my_list.index(elem) for elem in set(my_list)]
</code></pre>
<p>Since <code>set</code> is unordered you may want to sort the output:</p>
<pre><code>output = sorted(my_list.index(elem) for elem in set(my_list))
</code></pre>
<p>Full example:</p>
<pre><code>&gt;&gt;&gt; my_list = ['hi', 'babe', 'hi', 'babe', 'key', 'key']         
&gt;&gt;&gt; output = sorted(my_list.index(elem) for elem in set(my_list))
&gt;&gt;&gt; output                                                       
[0, 1, 4]   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>set</code> to keep track of already-seen elements and use a loop or list comprehension to get whether each element is the first of its kind. Then, use <code>enumerate</code> to get the indices.</p>
<pre><code>&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; [int(not(s in seen or seen.add(s))) for s in my_list]
[1, 1, 0, 0, 1, 0]
&gt;&gt;&gt; [i for i, e in enumerate(_) if e]
[0, 1, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also collect indices in a dictionary, where only the first occurence of each item is recorded:</p>
<pre><code>from collections import OrderedDict

my_list = ['hi', 'babe', 'hi', 'babe', 'key', 'key']

d = OrderedDict()
for i, item in enumerate(my_list):
    d.setdefault(item, i)

print([d[k] for k in d])
# [0, 1, 4]
</code></pre>
<p>A <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer"><code>collections.OrderedDict()</code></a> is used to maintain order of insertion. </p>
</div>
<div class="post-text" itemprop="text">
<p>The list has a build in function .index:</p>
<pre><code>my_list = ['hi', 'babe', 'hi', 'babe', 'key', 'key']
my_list.index('hi')
&gt;&gt;&gt;0
</code></pre>
<p>.index searches through the list in order until it finds a match then and stops. If you expect to need indices of more matches, you should use a list comprehension. First, you may want to convert your text into numbers (lists of numbers will not need that) e.g hi = 0, babe = 1 etc. This should do it (might be a better way): </p>
<pre><code>unique_words_list = []
number_list = []
for word in my_list:
    if word not in unique_words_list:
    unique_words_list.append(word)
for i in range(len(my_list)):
    for j in range(len(unique_words_list)):
        if my_list[i]==unique_words_list[j]:
            number_list.append(j)


unique_words_list, number_list    
&gt;&gt;&gt;(['hi', 'babe', 'key'], [0, 1, 0, 1, 2, 2])    
</code></pre>
<p>Then your list comprehension:</p>
<pre><code>[i for i, e in enumerate(number_list) if e == 1]
&gt;&gt;&gt;[1,3]
</code></pre>
<p>Which means you have a 'babe' on the 1st and 3rd position in your list.</p>
<p>Might be a simpler way! Hope this helps.</p>
</div>
<span class="comment-copy">What did you try, what does not work? Use a <code>set()</code> to get the uniques, use <code>list.index()</code> or <code>list.find()</code> to get your data ...</span>
<span class="comment-copy"><code>my_list</code> does not contain any unique element. Furthermore, it seems you are looking for the index of the first occurrence of any item in a list - I'd suggest rewording the question</span>
<span class="comment-copy">@ack Agreed and done.</span>
<span class="comment-copy">Of course, this will have O(nÂ²) complexity...</span>
<span class="comment-copy">@tobias_k ... Probably sorting is not needed. So, [4, 0, 1] is fine. As I will need to use the idx to select the items from my_list, and some other data. To do this for my_list, I used:  pandas ...  my_list = pd.Series(my_list); my_list = my_list.get(output); ...not sure if this is the best way to do it? And thanks for your input anyways!</span>
<span class="comment-copy">@innuendo Well, that's a great example of an XY problem. You should have mentioned that your data is in a dataframe. pandas offer vectorized operations that may achieve what you are looking for much faster than any Python loop can achieve</span>
<span class="comment-copy">@DeepSpace  ..As I am a bit new to Python, and still tagged with C++ mentality, I am still not sure if there is a panda function that gives the intended output ..output = [0, 1, 4] or even  [4, 0, 1].</span>
<span class="comment-copy">@innuendo Sorting is not the problem here, but the repeated calls to <code>index</code>.</span>
<span class="comment-copy">Why the list? How about just <code>d.setdefault(item, i)</code>?</span>
<span class="comment-copy">@tobias_k Much smarter, updated my answer. I also realised quickly afterwards that the list is just pointless.</span>
