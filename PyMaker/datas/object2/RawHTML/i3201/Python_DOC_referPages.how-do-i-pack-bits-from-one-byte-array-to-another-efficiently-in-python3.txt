<div class="post-text" itemprop="text">
<p>I have a fairly large byte array in python. In the simplest situation the byte array only contains 0 or 1 values (0x00, 0x01), also the array is always a multiple of 8 in length. How can I pack these "bits" into another byte array (it doesn't need to be mutable) so the source index zero goes to the MSB of the first output byte etc.</p>
<p>For example if <code>src = bytearray([1,0,0,0,1,0,0,1, 1,1,1,0,0,0,1,0, 1,1,1,1,1,1,1,1])</code>
Desired output would be <code>b'\x89\xe2\xff'</code>.</p>
<p>I could do it with a for loop and bit shifting and or-ing and concatenation, but there surely is a faster/better built-in way to do this.</p>
<p>In a follow up question, I also might want to have the source byte array contain values from the set 0-3 and pack these 4 at a time into the output array. Is there a way of doing that?</p>
<p>In general is there a way of interpreting elements of a list as true or false and packing them 8 at a time into a byte array?</p>
</div>
<div class="post-text" itemprop="text">
<p>As ridiculous as it may sound, the fastest solution using builtins may be to build a string and pass it to <code>int</code>, much as the fastest way to count 1-bits in an <code>int</code> is <code>bin(n).count('1')</code>. And it's dead simple, too:</p>
<pre><code>def unbitify_byte(src):
    s = ''.join(map(str, src))
    n = int(s, 2)
    return n.to_bytes(len(src)//8, 'big')
</code></pre>
<p>Equivalent (but marginally more complex) code using <a href="http://gmpy2.readthedocs.io/en/latest/mpz.html" rel="nofollow noreferrer"><code>gmpy2</code></a> instead of native Python <code>int</code> is a bit faster.</p>
<p>And you can extend it to 2-bit values pretty easily:</p>
<pre><code>def unhalfnybblify_byte(src):
    s = ''.join(map(str, src))
    n = int(s, 4)
    return n.to_bytes(len(src)//4, 'big')
</code></pre>
<hr/>
<p>If you want something more flexible, but possibly slower, here's a simple solution using <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer"><code>ctypes</code></a>.</p>
<p>If you know C, you can probably see a struct of 8 single-bit bit-fields would come in handy here. And you can write the equivalent struct type in Python like this:</p>
<pre><code>class Bits(ctypes.Structure):
    _fields_ = [(f'bit{8-i}', ctypes.c_uint, 1) for i in range(8)]
</code></pre>
<p>And you can construct one of them from 8 ints that are all 0 or 1:</p>
<pre><code>bits = Bits(*src[:8])
</code></pre>
<p>And you can convert that to a single int by using an ugly cast or a simple union:</p>
<pre><code>class UBits(ctypes.Union):
    _fields_ = [('bits', Bits), ('i', ctypes.c_uint8)]

i = UBits(Bits(*src[:8])).i
</code></pre>
<p>So now it's just a matter of chunking <code>src</code> into groups of 8 in big-endian order:</p>
<pre><code>chunks = (src[i:i+8][::-1] for i in range(0, len(src), 8))
dst = bytearray(UBits(Bits(*chunk)).i for chunk in chunks)
</code></pre>
<p>And it should be pretty obvious how to extend this to four 2-bit fields, or two 4-bit fields, or even two 3-bit fields and a 2-bit field, per byte.</p>
<p>However, despite <em>looking</em> like low-level C code, it's probably slower. Still, it might be worth testing to see if it's fast enough for your uses.</p>
<hr/>
<p>A custom C extension can probably do better. And there are a number of bit-array-type modules on PyPI to try out. But if you want to go down that road, <code>numpy</code> is the obvious answer. You can't get any simpler than this:</p>
<pre><code>np.packbits(src)
</code></pre>
<p>(A <code>bytearray</code> works just fine as an "array-like".)</p>
<p>It's also hard to beat for speed.</p>
<hr/>
<p>For comparison, here's some measurements:</p>
<ul>
<li>60ns/byte + 0.3µs: <code>np.packbits</code> on an <code>array</code> instead of a <code>bytearray</code></li>
<li>60ns/byte + 1.9µs: <code>np.packbits</code></li>
<li>440ns/byte + 3.2µs: <code>for</code> and bit-twiddling in PyPy instead of CPython</li>
<li>570µs/byte + 3.8µs: <code>int(…, 2).to_bytes(…)</code> in PyPy instead of CPython</li>
<li>610ns/byte + 9.1µs: <code>bitarray</code></li>
<li>800ns/byte + 2.9µs: <code>gmpy.mpz(…)…</code></li>
<li>1.0µs/byte + 2.8µs: <code>int(…, 2).to_bytes(…)</code></li>
<li>2.9µs/byte + 0.2µs: <code>(UBits(Bits(*chunk)) …)</code></li>
<li>16.µs/byte + 0.9µs: <code>for</code> and bit-twiddling</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Using numpy, with test code and comments:</p>
<pre><code>#!/usr/bin/env python3
import numpy as np


def pack_bits(a):
    # big-endian - use '&lt;u8' if you want little-endian
    #0000000A0000000B0000000C0000000D0000000E0000000F0000000G0000000H
    b = np.copy(a.view('&gt;u8'))
    #0000000A000000AB000000BC000000CD000000DE000000EF000000FG000000GH
    b |= b &gt;&gt; 7
    #0000000A000000AB00000ABC0000ABCD0000BCDE0000CDEF0000DEFG0000EFGH
    b |= b &gt;&gt; 14
    #0000000A000000AB00000ABC0000ABCD000ABCDE00ABCDEF0ABCDEFGABCDEFGH
    b |= b &gt;&gt; 28
    return np.array(b, dtype='u1')

def main():
    a = []
    for i in range(256):
        # build 8-bit lists without numpy, then convert
        a.append(np.array([int(b) for b in bin(256 + i)[2+1:]], dtype='u1'))
    a = np.array(a)
    print(a)
    b = pack_bits(a)
    print(b)

if __name__ == '__main__':
    main()
</code></pre>
<p>Similar code exists for other deinterleaving, bit since the number of bits between inputs is less than the number of bytes in a word, we can avoid the masking here (note that the <code>0ABCDEFG</code> does not overlap the <code>ABCDEFGH</code>).</p>
</div>
<span class="comment-copy">Can you use NumPy, or a third-party bit-twiddling library, or does it have to be builtins/stdlib only?</span>
<span class="comment-copy">Also, are you more concerned with performance, readability, or size of the code here? You could make this really concise (without third-party libs) with just a <code>ctypes.Structure</code> with 8 bit-fields, which you can construct from <code>bits(*src[:8])</code>, etc. and then cast or <code>Union</code> that with a <code>uint8</code>, but I'm not sure how understandable that is to someone who doesn't think in C, or how fast it is.</span>
<span class="comment-copy">I'd rather not use numpy at the moment if possible. Efficiency is more important than readability. I am fluent in C, but I don't know anything about python ctypes.</span>
<span class="comment-copy">Unless you have a <i>good</i> reason, "always use numpy" is a good rule.</span>
