<div class="post-text" itemprop="text">
<p>Lets say I have a line containing arguments splitted with <code>,</code></p>
<pre><code>'0xe1b04048, FUTEX_WAIT, 0, NULL , "Hey, World, how, are, you"'
</code></pre>
<p>I want regex in python that splits this sequence into list containing items (for clarity split one item by line)</p>
<pre><code>[
'0xe1b04048', 
'FUTEX_WAIT', 
'0', 
'NULL',
'"Hey, World, how, are, you"'
]
</code></pre>
<p>I have tried to make regex with negative lookahead, what can at least process one comma in comment and my plan was to extend it but I didnt managed to do even that.
Calling
<code>re.split(r",\s(?!\".*,\s.*\")",args)</code></p>
<p>on</p>
<pre><code>'0xe1b04048, FUTEX_WAIT, 0, NULL , "Hey, World"'
</code></pre>
<p>results in </p>
<pre><code>[
'0xe1b04048', 
'FUTEX_WAIT', 
'0', 
'NULL , "Hey', 
'World"'
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>csv</code> module with <code>skipinitialspace=True</code></p>
<p><strong>Ex:</strong></p>
<pre><code>import csv

with open(filename, "r") as infile:
    reader = csv.reader(infile, delimiter=",", skipinitialspace=True)
    for line in reader:
        print([i.strip("'") for i in line])
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>['0xe1b04048', 'FUTEX_WAIT', '0', 'NULL ', 'Hey, World, how, are, you']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You probably should use <code>csv</code> for this. However, if you prefer a pure Python solution (no regex either, however...) you could try this: Split by <code>"</code> first, then split all the <em>even</em> parts by <code>,</code>. Regardless of whether the list starts with a string element or not, the contents of the string will always be in the odd posiitons.</p>
<pre><code>&gt;&gt;&gt; s = '"start", 0xe1b04048, FUTEX_WAIT, 0, NULL , "Hey, World, how, are, you", not, a, string, "another, string"'
&gt;&gt;&gt; s.split('"')
['',
 'start',
 ', 0xe1b04048, FUTEX_WAIT, 0, NULL , ',
 'Hey, World, how, are, you',
 ', not, a, string, ',
 'another, string',
 '']

&gt;&gt;&gt; [x.strip() for i, w in enumerate(s.split('"')) 
...            for x in (['"%s"'%w] if i%2 else w.split(", ")) if x]
['"start"',
 '0xe1b04048',
 'FUTEX_WAIT',
 '0',
 'NULL',
 '"Hey, World, how, are, you"',
 'not',
 'a',
 'string',
 '"another, string"']
</code></pre>
<p>This is, of course, assuming that there are no nested or escaped quotes.</p>
</div>
<div class="post-text" itemprop="text">
<p>(Posting this as a second answer, as the approach is very different than the first).</p>
<p>If you really want to use regular expressions for this, you could try this: <code>".+?"|[^", ]+</code> This just looks for all parts that are either enclosed in <code>"</code>, or contain neither <code>"</code> nor <code>,</code> or space.</p>
<pre><code>&gt;&gt;&gt; s = '"start", 0xe1b04048, FUTEX_WAIT, 0, NULL , "Hey, World, how, are,  you", not, a, string, "another, string"'
&gt;&gt;&gt; p = r'".+?"|[^", ]+'
&gt;&gt;&gt; re.findall(p, s)
['"start"',
 '0xe1b04048',
 'FUTEX_WAIT',
 '0',
 'NULL',
 '"Hey, World, how, are, you"',
 'not',
 'a',
 'string',
 '"another, string"']
</code></pre>
<p>Again, this will probably break down if there are nested or escaped quotes, and all things considered using <code>csv</code> is probably the better idea.</p>
</div>
<span class="comment-copy">Why not use <code>csv</code>? See <a href="https://stackoverflow.com/questions/3305926/python-csv-string-to-array">Python csv string to array</a> for an example of usage.</span>
<span class="comment-copy">You should probably look into the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code> module</a> instead.</span>
<span class="comment-copy">Note that using <code>csv</code> will be a little tricky, as the intent is to remove the whitespace following the commas as well.</span>
<span class="comment-copy">Could there be nested quotes?</span>
<span class="comment-copy">This might be a little offtopic from original question, but could you explain what is the difference between <code>".+?"</code> and <code>".*"</code> ? I thought one means "match as many characters as you can between the quotes but at least one (meaning of <code>.+</code>), zero or 1 time (meaning of <code>?</code>), which seems the same as  <code>".*"</code>, which I interpret as "match zero or more character between the quotes". I tried it and the<code>".*"</code> approach is not working, I guess that is because there is another " at the end of string, and it matches largest string it can. But why does this not happen with <code>".+?"</code>?</span>
<span class="comment-copy">@Smarty77 <code>.+?</code> is not the same as <code>(.+)?</code>, which would indeed be <code>.*</code>. The <code>?</code> makes it non-greedy. <code>.*</code> or <code>.+</code> would match everything from the first opening <code>"</code> until the last closing <code>"</code>, whereas <code>.*?</code> will match only up to the <i>next</i> <code>"</code>, i.e. the individual strings.</span>
