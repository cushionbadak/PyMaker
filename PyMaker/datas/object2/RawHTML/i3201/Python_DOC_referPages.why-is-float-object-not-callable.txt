<div class="post-text" itemprop="text">
<p>Looking at the code I have below as an example. Why is it I get the error "Float object not callable" when using print statement 1 but not print statement 2? what do I need to do to my class if I was wanting to make print statement 1 work?</p>
<pre><code>var1 = float(input())

class ExampleClass(object):
    def __init__(self, thing1):
        self.getThing1 = thing1

    def getThing1(self):
        return self.getThing1

a = ExampleClass(var1)

print(str(a.getThing1())) #print statement 1 that doesn't work
print(str(a.getThing1)) #print statement 2 that does work
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are trying to use <code>getThing1</code> as a method name <em>and</em> an attribute. You declare a method <code>getThing1</code>, but then you assign <code>self.getThing1 = thing1</code>. So <code>getThing1</code> isn't a method anymore; it's the value of <code>thing1</code>.</p>
<p>Perhaps you meant this:</p>
<pre><code>class ExampleClass(object):
    def __init__(self, thing1):
        self.thing1 = thing1

    def getThing1(self):
        return self.thing1
</code></pre>
<p>However, <code>getXXX</code> methods are <em>not</em> the convention in Python. If you need a method wrapping your attribute, you should make it a <a href="https://docs.python.org/3/library/functions.html#property" rel="noreferrer">property</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This:</p>
<pre><code>class ExampleClass(object):
    def __init__(self, thing1):
---&gt;    self.getThing1 = thing1
</code></pre>
<p>shadows this:</p>
<pre><code>   def getThing1(self):
       return self.getThing1
</code></pre>
<p>Python functions are objects don't live in a distinct namepsace, so to make a long story short you cannot have an attribute and a method by the same name.</p>
<p>The solution is simple: don't use <code>getThing1</code> as an attribute name - specially since "get" is a verb so it's a poor name for a value.</p>
<p>Also note that Python has a string support for computed attributes so you don't need systematic getters/setters for attributes. You can start with a plain attribute and turn it into a computed one later if the need arises.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/51319929/str-object-is-not-callable-different">'str' object is not callable - different</a></span>
