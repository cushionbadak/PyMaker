<div class="post-text" itemprop="text">
<p>I have to write a matlab script in python as apparently what I want to achieve is done much more efficiently in Python.</p>
<p>So the first task is to read all images into python using opencv while maintaining folder structure. For example if the parent folder has 50 sub folders and each sub folder has 10 images then this is how the <code>images</code> variable should look like in python, very much like a cell in matlab. I read that python lists can perform this cell like behaviour without importing anything, so thats good I guess.</p>
<p>For example, below is how I coded it in Matlab:</p>
<pre><code>path = '/home/university/Matlab/att_faces';

subjects = dir(path);
subjects = subjects(~strncmpi('.', {subjects.name}, 1)); %remove the '.' and '..' subfolders
img = cell(numel(subjects),1); %initialize the cell equal to number of subjects

for i = 1: numel(subjects)
    path_now = fullfile(path, subjects(i).name);
    contents = dir([path_now, '/*.pgm']);
    for j = 1: numel(contents)
        img{i}{j} = imread(fullfile(path_now,contents(j).name));
        disp([i,j]);
    end
end
</code></pre>
<p>The above <code>img</code> will have 50 cells and each cell will have stored 10 images. <code>img{1}</code> will be all images belonging to subject 1 and so on.</p>
<p>Im trying to replicate this in python but am failing, this is what I have I got so far:</p>
<pre><code>import cv2
import os
import glob


path = '/home/university/Matlab/att_faces'

sub_f = os.listdir(path)
images = []
for n in sub_f:
    path_now = os.path.join(path, sub_f[n], '*.pgm')
    images[n] = [cv2.imread(file) for file in glob.glob(path_now)]
</code></pre>
<p>Its not exactly what I am looking for, some help would be appreciated. Please ignore silly mistakes as it is my first day writing in python.</p>
<p>Thanks</p>
<p>edit: directory structure:</p>
<p><a href="https://i.stack.imgur.com/dCI4S.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/dCI4S.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>The first problem is that <code>n</code> isn't a number or index, it is a string containing the path name.  To get the index, you can use <code>enumerate</code>, which gives <code>index</code>, <code>value</code> pairs. </p>
<p>Second, unlike in MATLAB you can't assign to indexes that don't exist.  You need to pre-allocate your image array or, better yet, append to it.</p>
<p>Third, it is better not to use the variable <code>file</code> since in python 2 it is a built-in data type so it can confuse people.</p>
<p>So with preallocating, this should work:</p>
<pre><code>images = [None]*len(sub_f)
for n, cursub in enumerate(sub_f):
    path_now = os.path.join(path, cursub, '*.pgm')
    images[n] = [cv2.imread(fname) for fname in glob.glob(path_now)]
</code></pre>
<p>Using append, this should work:</p>
<pre><code>for cursub in sub_f
    path_now = os.path.join(path, cursub, '*.pgm')
    images.append([cv2.imread(fname) for fname in glob.glob(path_now)])
</code></pre>
<p>That being said, there is an easier way to do this.  You can use the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib</a> module to simplify this.</p>
<p>So something like this should work:</p>
<pre><code>from pathlib import Path

mypath = Path('/home/university/Matlab/att_faces')
images = []

for subdir in mypath.iterdir():
    images.append([cv2.imread(str(curfile)) for curfile in subdir.glob('*.pgm')])
</code></pre>
<p>This loops over the subdirectories, then globs each one.</p>
<p>This can even be done in a nested list comprehension:</p>
<pre><code>images = [[cv2.imread(str(curfile)) for curfile in subdir.glob('*.pgm')]
          for subdir in mypath.iterdir()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It should be the following:</p>
<pre><code>import os
path = '/home/university/Matlab/att_faces'

sub_f = os.listdir(path)
print(sub_f)    #--- this will print all the files present in this directory ---

#--- this a list to which you will append all the images ---
images = []


#--- iterate through every file in the directory and read those files that end with .pgm format ---
#--- after reading it append it to the list ---
for n in sub_f:
    if n.endswith('.pgm'):
        path_now = os.path.join(path, n)
        print(path_now)
        images.append(cv2.imread(path_now, 1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import cv2
import os
import glob

path = '/home/university/Matlab/att_faces'

sub_f = os.listdir(path)
images = []

#read the images
for folder in sub_f:
    path_now = os.path.join(path, folder, '*.pgm')
    images.append([cv2.imread(file) for file in glob.glob(path_now)])

#display the images
for folder in images:
    for image in folder:
        cv2.imshow('image',image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
</code></pre>
</div>
<span class="comment-copy">what's wrong with the python code you provided? what do you want it to do instead?</span>
<span class="comment-copy">I cannot display those images back for some reason, so I assumed I messed up while reading them in. Also the indexing of <code>n</code> does not make sense to me.</span>
<span class="comment-copy">"apparently what I want to achieve is done much more efficiently in Python" Unlinkely, given that you already got stuck in the data import... :)  Maybe it's more efficient for people that know Python well?</span>
<span class="comment-copy">@CrisLuengo: It is done much more efficiently, just not by the OP yet.</span>
<span class="comment-copy">silly me. Thanks for pointing it out. This is more Pythonic by the way! +1</span>
<span class="comment-copy">@JeruLuke: If this answer works for you please mark it as the accepted answer so people other people can find it in the future.</span>
<span class="comment-copy">I would love to but I can't. It has to be done by the OP</span>
<span class="comment-copy">Thank you. That was immensely helpful :). I used your <code>pathlib</code> version. From debugging I see that both solutions give a nested list of images.</span>
<span class="comment-copy">@StuckInPhD: Mostly.  You would probably build a list like this, then convert it to a numpy array at the end assuming all the images are the same size.  You can just do <code>np.array(images)</code>.  If they are not the same size, you would need to have an additional step where you find the biggest, then pad the others to that size.</span>
<span class="comment-copy">Thanks for answering, but the above code never enters the if block. I have added a screenshot of the directory structure to my original question, hope that helps.</span>
<span class="comment-copy">@StuckInPhD careless error in the last line. Check it out now</span>
<span class="comment-copy">You are not looping over the contents of the subdirectories here, you are looping over the subdirectories themselves.  OP needs the contents of the subdirectories.</span>
<span class="comment-copy">You don't need to use <code>enumerate</code> since you aren't using the index anywhere.</span>
<span class="comment-copy">my bad, I fixed it. thanks for pointing that out.</span>
