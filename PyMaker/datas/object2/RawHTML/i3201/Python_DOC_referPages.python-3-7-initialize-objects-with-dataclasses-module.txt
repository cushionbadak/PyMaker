<div class="post-text" itemprop="text">
<p>Here is the my code in python 3.6</p>
<pre><code>class A(object)

    def __init__(self, a: str):
        self._int_a: int = int(a)  # desired composition

    def get_int_a(self) -&gt; int:
        return self._int_a   
</code></pre>
<p>I want to rewrite this code in <code>python 3.7</code>, how can i initialize <code>self._int_a: int = int(a)</code> with <code>dataclasses</code> module?</p>
<p>I know that i can do something like that but i can't get how to initialize <code>_a: int = int(a)</code> or similar to that.</p>
<pre><code>from dataclasses import dataclass


@dataclass
class A(object):
    _a: int = int(a)  # i want to get initialized `int` object here

def get_int_a(self) -&gt; int:
    return self._a
</code></pre>
<p>Thanks in advance for your ideas and suggestions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do away with getters and setters entirely and just use attribute access.  We can define an <a href="https://docs.python.org/3/library/dataclasses.html#init-only-variables" rel="nofollow noreferrer">init only field</a> that accepts a string and then convert that string to an integer field in our <a href="https://docs.python.org/3/library/dataclasses.html#post-init-processing" rel="nofollow noreferrer"><code>__post_init__</code></a> call.</p>
<pre><code>from dataclasses import dataclass, InitVar, field

@dataclass
class A:
    temp: InitVar[str]
    a: int = field(init=False)
    def __post_init__(self, temp):
        self.a = int(temp)

x = A("1")
print(type(x.a), x.a)
# &lt;class 'int'&gt; 1
</code></pre>
</div>
<span class="comment-copy">Thanks it worked out for me!</span>
