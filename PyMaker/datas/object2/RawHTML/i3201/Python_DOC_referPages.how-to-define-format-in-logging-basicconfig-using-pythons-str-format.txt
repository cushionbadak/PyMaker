<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.5/howto/logging.html#logging-basic-tutorial" rel="nofollow noreferrer">Python documentation</a> teaches the following syntax:</p>
<pre><code>import logging
logging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')
logging.warning('is when this event was logged.')
</code></pre>
<p>I would like to express <code>format='%(asctime)s %(message)s'</code> using python str.format. How can I do it?</p>
<p>I tried but had was returned with <code>NameError</code>, which shows that I did not understand how <code>asctime</code> and <code>message</code> was defined. Thanks.</p>
<pre><code>  File "~/test.py", line 163, in main
    format='{}{}'.format(asctime,message),
NameError: name 'asctime' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks something like this:</p>
<pre><code>import logging

logging.basicConfig(level=logging.INFO, format="{asctime} {message}", style='{')

logging.info('hello world')
</code></pre>
<p>Basically, the analogous <code>.format</code> to the <code>%</code> style interpolation string that you have above is <code>'{asctime} {message}'</code>.  Then the only thing to do is to tell the logger to use <code>"{"</code> style format strings instead of <code>"%"</code> style strings.</p>
<p>Note that it isn't trivial to be able to use <code>.format</code> style strings in your individual log messages -- e.g. the following does not work:</p>
<pre><code>logging.info("hello {}", "world")
</code></pre>
<p>This is described in detail (along with work-arounds) in <a href="https://docs.python.org/3/howto/logging-cookbook.html#using-particular-formatting-styles-throughout-your-application" rel="nofollow noreferrer">Using particular formatting styles throughout your application</a>.</p>
<p>The gist of it is that you can pass any object to <code>logging.info</code> -- python'll call <code>str</code> on it:</p>
<pre><code>class LogStr:
    def __init__(self, msg, *args, **kwargs):
        self.msg = msg
        self.args = args
        self.kwargs = kwargs
    def __str__(self):
        return self.msg.format(*args, **kwargs)

logging.info(LogStr("Hello {}", "world"))
</code></pre>
<p>Or, you can go through the shenanigans of defining a <a href="https://docs.python.org/3/library/logging.html#logging.LogRecord" rel="nofollow noreferrer"><code>LogRecord</code></a> interface compatible object (maybe via subclassing) and registering it with your logger via <code>logger.setLogRecordFactory(MyLogRecord)</code>.</p>
</div>
<span class="comment-copy">I'm pretty sure that 1000 years ago or so, I answered a similar question with "It can't be done without a whole lot of ugly surgery", someone named mgilson commented that in the Python 3.2 beta you could now do it with just <code>style='{'</code>, and I decided that was enough reason to port the project I was working on from 2.6 to 3.2. :)</span>
<span class="comment-copy">@abarnert -- I have no recollection of this -- but it sounds like maybe this could be a dupe :) -- And anyway, aren't you glad you ported to python3.2 now?  :)</span>
<span class="comment-copy">Thanks. Am I also correct to understand that the terms <code>asctime</code> and <code>message</code> are unique keywords of <code>logging.basicConfig()</code>?</span>
<span class="comment-copy">@SunBear -- They're actually attributes on the LogRecord (<a href="https://docs.python.org/3/library/logging.html#logrecord-attributes" rel="nofollow noreferrer">docs.python.org/3/library/logging.html#logrecord-attributes</a>) and logging picks them off when formatting the log message.</span>
