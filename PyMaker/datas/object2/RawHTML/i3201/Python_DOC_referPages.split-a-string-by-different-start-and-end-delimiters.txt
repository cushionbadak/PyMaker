<div class="post-text" itemprop="text">
<p>I have a log with data from a TCP port with a given buffer length. Each event has a variable length and it is delimited by &lt;+++&gt; and &lt;---&gt;.</p>
<p>Example:</p>
<pre><code>s = '&lt;+++&gt;A1 , Some Text, Other Text=12327463, Some Other Text&lt;---&gt; 
&lt;+++&gt;A2, Some Text, IP=0.0.0.0, DateTime=12/07/2018 &lt;---&gt; &lt;+++&gt; A3, Some Text, Other Text=12327463, Some Other Text,
Text&lt;---&gt;&lt;+++&gt;A3, New Text, IP=0.0.0.0, DateTime=12/07/2018, Text3Text3Text3, Text3Text3Text3, Text3Text3Text3,
Text3Text3Text3&lt;---&gt;Text4Text4Text4Text4Text4Text4Text4Text4Text4Text4Text4Text4Text4Text4Text4 
Text4&lt;---&gt;&lt;+++&gt;Text5Text5Text5Text5Text5Text5Text5Text5&lt;---&gt;&lt;+++&gt;Text6Text6Text6Text6Text6Text6Text6Text6Text6&lt;---&gt;'
</code></pre>
<p>I need to split it so that each event is the element of a list -- like this:  </p>
<pre><code>['A1 , Some Text, Other Text=12327463, Some Other Text' , 'A2, Some Text, IP=0.0.0.0, DateTime=12/07/2018', 'A3, Some Text, Other Text=12327463, Some Other Text']
Text']
</code></pre>
<p>How would you do this with Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use regular expressions for this task, <a href="https://docs.python.org/3/library/re.html#re.Pattern.findall" rel="nofollow noreferrer"><code>re.findall</code></a> in particular: </p>
<pre><code>import re
s = '&lt;+++&gt;A1 , Some Text, Other Text=12327463&lt;---&gt; &lt;+++&gt;A2, IP=0.0.0.0 &lt;---&gt;'
re.findall(r'&lt;\+\+\+&gt;(.+?)&lt;---&gt;', s)
# ['A1 , Some Text, Other Text=12327463', 'A2, IP=0.0.0.0 ']
</code></pre>
<p>The captured group <code>(.+?)</code> stands for one or more (<code>+</code>) of any character (<code>.</code>) non-greedily (<code>?</code>) matched, so as to not capture the entire part from the first opening to the last closing tag.</p>
</div>
<div class="post-text" itemprop="text">
<p>something like this:</p>
<pre><code>s= '&lt;+++&gt;A1 , Some Text, Other Text=12327463, Some Other Text&lt;---&gt; &lt;+++&gt;A2, Some Text, IP=0.0.0.0, DateTime=12/07/2018 &lt;---&gt; &lt;+++&gt; A3, Some Text, Other Text=12327463, Some Other Text, Text&lt;---&gt;&lt;+++&gt;A3, New Text, IP=0.0.0.0, DateTime=12/07/2018, Text3Text3Text3, Text3Text3Text3, Text3Text3Text3, Text3Text3Text3&lt;---&gt;Text4Text4Text4Text4Text4Text4Text4Text4Text4Text4Text4Text4Text4Text4Text4 Text4&lt;---&gt;&lt;+++&gt;Text5Text5Text5Text5Text5Text5Text5Text5&lt;---&gt;&lt;+++&gt;Text6Text6Text6Text6Text6Text6Text6Text6Text6&lt;---&gt;'
s = s.replace('&lt;---&gt;','')
t = s.split('&lt;+++&gt;')
print (t)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to do it pretty simply, I'd just use a couple of steps. It looks, in this case, that we can assume that the string <em>always</em> starts with "&lt;+++&gt;" and ends with "&lt;---&gt;". So, we can simply strip them from the string and use a simple <code>string.split</code>:</p>
<pre><code>temp = s[len("&lt;+++&gt;") : -len("&lt;---&gt;")]
return temp.split("&lt;---&gt;&lt;+++&gt;")
</code></pre>
<p>If the problem is more complicated, you could also look into using regular expressions with <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer"><code>re.split</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def multi_split(s, sep):
    stack = [s]
    for char in sep:
        pieces = []
        for substr in stack:
            pieces.extend(substr.split(char))
        stack = pieces
    return stack
</code></pre>
<p>usage: <code>multi_split(string,separators)</code> where sep can be a single char, a list of strings, a tuple. In your case <code>['&lt;---&gt;','&lt;+++&gt;']</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions are your friends.</p>
<pre><code>import re
res = re.compile('\&lt;...\&gt;').split(s)
</code></pre>
<p>and then you have to clear the empty strings from your list.</p>
<pre><code>res = list(filter(None, res))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can split then join then split</p>
<pre><code>new = s.split('&lt;+++&gt;')
new = ''.join(new)
new = new.split('&lt;---&gt;')

print(new)
</code></pre>
<p>or even:</p>
<pre><code>new = s.split('&lt;+++&gt;').
new = ''.join(new).split('&lt;---&gt;')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's another option:</p>
<pre><code>start, end = '&lt;+++&gt;', '&lt;---&gt;'
[item for item in (item.strip().strip(start) for item in s.split(end)) if item]
</code></pre>
<p><code>s</code> is the value of <code>s</code> in the question code.</p>
</div>
<span class="comment-copy">Maybe I am wrong but can't you split by &lt;+++&gt; then by &lt;---&gt; and remove the empty values from the list?</span>
<span class="comment-copy">Have you tried anything? Does it work?</span>
