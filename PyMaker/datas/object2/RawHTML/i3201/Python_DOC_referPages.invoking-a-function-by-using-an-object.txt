<div class="post-text" itemprop="text">
<blockquote>
<p>Write a Boolean function between that takes two <code>MyTime</code> objects, <code>t1</code>
  and <code>t2</code>, as arguments, and returns True if the invoking object falls
  between the two times. Assume <code>t1 &lt;= t2</code>, and make the test closed at
  the lower bound and open at the upper bound, 
  i.e. return True if <code>t1 &lt;= obj &lt; t2</code>.</p>
</blockquote>
<p>Now from the wording of this question, it seems like there should only be two arguments in the function, but I cannot see a way to make such a function by only using two arguments. I mean I guess you could make another function that creates a variable that is a <code>MyTime</code> object, but I was only going to keep it to one function and not make two. The wording of the question makes it seem like you should have <code>Object(Function(t1,t2))</code> but I dont think that is possible. Is it possible to make the 'between' function with only two arguments? Here is my code</p>
<pre><code>class MyTime:
        """ Create some time """

    def __init__(self,hrs = 0,mins = 0,sec = 0):
        """Splits up whole time into only seconds"""
        totalsecs = hrs*3600 + mins*60 + sec
        self.hours = totalsecs // 3600
        leftoversecs = totalsecs % 3600
        self.minutes = leftoversecs // 60
        self.seconds = leftoversecs % 60
    def __str__(self):
        return '{0}:{1}: 
             {2}'.format(self.hours,self.minutes,self.seconds)

    def to_seconds(self):
        # converts to only seconds
        return (self.hours * 3600) + (self.minutes * 60) + self.seconds

def between(t1,t2,x):
    t1seconds = t1.to_seconds()
    t2seconds = t2.to_seconds()
    xseconds = x.to_seconds()
    if t1seconds &lt;= xseconds  &lt; t2seconds:
        return True
    return False


currentTime = MyTime(0,0,0)
doneTime = MyTime(10,3,4)
x = MyTime(2,0,0)
print(between(currentTime,doneTime,x))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are 100% correct, it does need three parameters. If you write it as a member function of the <code>MyTime</code> class, it gets a third parameter, <code>self</code>:</p>
<pre><code>class MyTime():

    # the guts of the class ...

    def between(self, t1, t2):
        t1seconds = t1.to_seconds()
        t2seconds = t2.to_seconds()
        myseconds = self.to_seconds()

        return t1seconds &lt;= myseconds &lt; t2seconds
</code></pre>
<p>You can use this method with:</p>
<pre><code>currentTime = MyTime(0, 0, 0)
doneTime = MyTime(10, 3, 4)
x = MyTime(2, 0, 0)
x.between(currentTime, doneTime)
</code></pre>
<p>The <code>self</code> argument is passed in automatically by calling the method on an instance of the class.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem seems to be written as a trick question—or maybe just accidentally so. So, let's get some terminology straight, so we can really understand what it's asking for.</p>
<ul>
<li><p>The variable names in a function definition are <a href="https://docs.python.org/3/glossary.html#term-parameter" rel="nofollow noreferrer"><em>parameters</em></a>.</p></li>
<li><p>The expressions inside the parentheses of a function call are <a href="https://docs.python.org/3/glossary.html#term-argument" rel="nofollow noreferrer"><em>arguments</em></a>.</p></li>
</ul>
<p>Of course in the simplest case, each parameter gets bound to exactly one argument, but that isn't true in cases involving, e.g., <code>*args</code> or <code>**kw</code> (on either side), or default values, or method calls.</p>
<hr/>
<p>So, <code>between</code> obviously needs three <em>parameters</em>—but that doesn't mean it needs three arguments, if you can find some other reasonable way to specify the value for one of those parameters.</p>
<p>And, while the way the problem is worded disguises the most obvious answer, it's still the most obvious answer: what you want here is a <a href="https://docs.python.org/3/glossary.html#term-method" rel="nofollow noreferrer"><em>method</em></a>, defined inside the <code>class MyTime:</code> definition, exactly as described in <a href="https://stackoverflow.com/a/51353308/908494">illiteratecoder's answer</a> (which I'll copy here):</p>
<pre><code>def between(self, t1, t2):
    t1seconds = t1.to_seconds()
    t2seconds = t2.to_seconds()
    myseconds = self.to_seconds()

    return t1seconds &lt;= myseconds &lt; t2seconds
</code></pre>
<hr/>
<p>Of course if you really want to, you can call this with three arguments:</p>
<pre><code>MyTime.between(x, currentTime, doneTime)
</code></pre>
<p>But normally, you won't call the function directly, you'll call it as a bound method:</p>
<pre><code>x.between(currentTime, doneTime)
</code></pre>
<p>Of course, as the glossary entry for methods implies, under the covers, this method call with two arguments gets turned into a function call with three arguments, by some code inside the guts of <code>types.MethodType</code>. But there's no three-argument call in your code, or anywhere else.</p>
<hr/>
<p>Apparently, <code>x</code> (or <code>obj</code>, in the original statement) is what the problem meant by the phrase "invoking object", even though that's a very weird use of terminology.<sup>1</sup></p>
<hr/>
<p>If you're curious, the code (or, rather, the Python equivalent of the C code) that does that looks like this:</p>
<pre><code>def __call__(self, *args, **kw):
    return self.__func__(self.__self__, *args, **kw)
</code></pre>
<p>… where <code>self.__func__</code> is <code>MyTime.between</code> and <code>self.self</code> is <code>x</code>.</p>
<hr/>
<p><sub>1. I've never heard "invoking object" used in Python. It <em>is</em> used in Smalltalk and related languages, but it means the <code>self</code> in scope at the lexical location of the message send (method call), which is meaningless here, and generally meaningless in Python (unlike, e.g., JavaScript). The equivalent of the <code>x</code> in <code>x.between</code> is definitely not the invoking object, it's the <em>receiving object</em>. So, if this <em>is</em> a trick question, I think they overstepped the bounds between misleading but still technically accurate and just plain wrong, which is cheating. But if, on the other hand, your teacher or book or whatever has been consistently using this idiosyncratic terminology, then it's not really wrong, just a little weird, and you probably need to go back and study some notes to make sure you understand their terminology, at least while trying to get through this course.</sub></p>
</div>
<span class="comment-copy">You just need a class method, <code>def between(self, t1, t2):</code> would be within the class definition. Now you invoke it with <code>x.between(t1, t2)</code>.</span>
<span class="comment-copy">The terminology is a little weird in the question. The only use of "invoking object" I know of is in Smalltalk, and it doesn't mean what the assignment wants it to mean (it's the <code>self</code> in scope at the place where you call the method, and there isn't one f those here, or in Python in general; the thing you call the method on is the "receiving object" or "receiver"). If your textbook/teacher/whatever has been teaching and consistently using this slightly idiosyncratic terminology, you probably need to study up on your notes. If not, you may want to let them it's confusing.</span>
<span class="comment-copy">Careful with terminology @AChampion. <code>@classmethod</code> is different from a normal method. We do not want a classmethod.</span>
<span class="comment-copy">@gilch True, a method in the class would have been better.</span>
<span class="comment-copy">Also, saying "write a function" instead of "write a method" is also misleading here, maybe even a trick question. It's technically correct (because in Python, the way you write a method is to write a function), but any normal person who reads it is going to be put off from thinking about putting the <code>def</code> inside the <code>class</code>, even though that's pretty clearly what you're supposed to do.</span>
<span class="comment-copy">This isn't quite right. The definition needs three <i>parameters</i>, but the call only needs two <i>arguments</i>. In <code>x.between(currentTime, doneTime)</code> there's a bound method (<code>x.between</code>) and a call with two arguments.</span>
<span class="comment-copy">Thanks for the help!</span>
<span class="comment-copy">@abarnert Interesting distinction. I was not familiar, thanks! I'm glad that you linked to the python docs, I really should read through more of them, there's so much to learn.</span>
<span class="comment-copy">@illiteratecoder Yes. Although this is a bit annoying across languages. IIRC, K&amp;R first screwed it up, by replacing the ALGOL terms "formal parameter" and "actual parameter" with "parameter" and "argument", which is what Python follows, but then not using them consistently, and then ANSI C redefined "parameter" to mean specifically only the typed parameters in a full prototype declaration, then some of the early languages with generics reintroduced formal-actual and repurposed the parameter-argument distinction, so <code>def f&lt;T&gt;(t: T)</code> has formal argument <code>t</code> and formal parameter <code>T</code>…</span>
