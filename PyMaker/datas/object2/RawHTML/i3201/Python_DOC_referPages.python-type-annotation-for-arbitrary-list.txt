<div class="post-text" itemprop="text">
<p>I would like to annotate an argument of a function to indicate that a list is expected as argument. However I would like to keep the base type of the list unspecified. Is there a way to do this? Ie use a placeholder like below?</p>
<pre><code>def my_func(li: List[any])
</code></pre>
<p><strong>edit</strong> is it possible to use a template:</p>
<p>Ie something like:</p>
<pre><code>def union(li: List[List[T]])-&gt; List[T]: 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>However I would like to keep the base type of the list unspecified. Is there a way to do this? Ie use a placeholder like below?</p>
</blockquote>
<pre><code>def my_func(li: List[any])
</code></pre>
<p>Yes. But you want <a href="https://docs.python.org/3/library/typing.html#typing.Any" rel="nofollow noreferrer"><code>Any</code></a>:</p>
<blockquote>
<p>Special type indicating an unconstrained type.</p>
<ul>
<li>Every type is compatible with <code>Any</code>.</li>
<li><code>Any</code> is compatible with every type.</li>
</ul>
</blockquote>
<hr/>
<blockquote>
<p>is it possible to use a template:</p>
<p>Ie something like:</p>
</blockquote>
<pre><code>def union(li: List[List[T]])-&gt; List[T]: 
</code></pre>
<p>Yes. Although these are called <a href="https://docs.python.org/3/library/typing.html#generics" rel="nofollow noreferrer">generics</a>, not templates (because they're not actually something like C++ templates that provide a Turing-complete compile-time language, they're just simple generic types.</p>
<p>The only problem is that generic types require type variables, and there's no builtin type variable named <code>T</code>. But it's easy enough to create one, as shown in the docs, and of course <code>T</code> is the conventional "first generic parameter" typevar:</p>
<pre><code>T = TypeVar('T')
</code></pre>
<p>â€¦ and then you can use it:</p>
<pre><code>def union(li: List[List[T]])-&gt; List[T]: 
</code></pre>
<hr/>
<p>If you already know C++ templates or Haskell parameterized types or Java generics or whatever, it's tempting to just jump in and start writing Python type annotations assuming you can guess what they mean. But really, you need to read at least the first few sections of <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">the docs</a>, or <a href="https://www.python.org/dev/peps/pep-0483" rel="nofollow noreferrer">PEP 483</a> and the various other linked PEPs. Otherwise, you're going to guess all kinds of things wrong (not just what <code>Any</code> is called and how to declare <code>TypeVar</code>s, but also probably what the parameters of <code>Tuple</code> are, how covariance works, which generic types are structurally checked vs. nominally, etc..</p>
<hr/>
<p>While we're at it, unless you really need the input to be a <code>List</code>, you probably want <code>Sequence[Sequence[T]]</code> or <code>Iterable[Sequence[T]]</code> or similar.</p>
<p>You can find all the details in <a href="https://docs.python.org/3/library/typing.html#classes-functions-and-decorators" rel="nofollow noreferrer">Classes, functions, and decorators</a>, but in general, anything from <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer"><code>collections.abc</code></a> that seems like it ought to have a generic counterpart in <code>typing</code> does.</p>
</div>
<span class="comment-copy">Almost right, but you want <a href="https://docs.python.org/3/library/typing.html#typing.Any" rel="nofollow noreferrer"><code>Any</code></a>, not <code>any</code>. (Or you can just use <code>List</code> without any element spec.)</span>
<span class="comment-copy">Is that just a typo, so we should close the question, or do you need some explanation?</span>
<span class="comment-copy">Well I am a newbie to python so this was a genuine question I had, ie didnt even know Any was a thing. Also please see my edit.</span>
<span class="comment-copy">For your edit: Yes, it is possible to do that, as long as you've done a <code>T = TypeVar('T')</code> beforehand. This is covered in <a href="https://docs.python.org/3/library/typing.html#generics" rel="nofollow noreferrer">the docs</a>, and in the PEP, and you're going to need to read either one or the other, not just try to guess at the syntax.</span>
<span class="comment-copy">As a side note, do you really want to require specifically a <code>List</code>, rather than any <code>Sequence</code> or <code>Iterable</code>?</span>
