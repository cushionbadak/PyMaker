<div class="post-text" itemprop="text">
<p><code>\W</code> detects following non-word characters</p>
<pre><code>\\  Backslash (\)    
\'  Single quote (')     
\"  Double quote (")     
\a  ASCII Bell (BEL)     
\b  ASCII Backspace (BS)     
\f  ASCII Formfeed (FF)  
\n  ASCII Linefeed (LF)  
\r  ASCII Carriage Return (CR)   
\t  ASCII Horizontal Tab (TAB)   
\v  ASCII Vertical Tab (VT)  
\ooo    Character with octal value ooo  
\xhh    Character with hex value hh 
\newline    Backslash and newline ignored    
</code></pre>
<hr/>
<p>Below are two lines, first line starting with <code>#</code>(is a pure comment), second line is multi-line string with intermittent comments</p>
<pre><code># abc                                                    # def
1.3.6.1.4.1.555.2.12.6.102                 0x04444001    1.3.6.1.4.1.75.2.12.90.901(1,0)\
                                                         # xyz
                                                         1.3.6.1.4.1.75.2.12.90.902(2,0)\
                                                         # ddd
                                                         1.3.6.1.4.1.75.2.12.90.903(3,0)
</code></pre>
<p>Some of the above lines have <code>\</code> as the last non-word character.</p>
<p>Goal is to construct the above syntax to a single string: <code>1.3.6.1.4.1.555.2.12.6.102 0x04444001 1.3.6.1.4.1.75.2.12.90.901(1,0) 1.3.6.1.4.1.75.2.12.90.902(2,0) 1.3.6.1.4.1.75.2.12.90.903(3,0)</code></p>
<hr/>
<p>How to detect backslash <code>\</code> on end of every line? Because...</p>
<pre><code>print(re.search(r'\\', 'hello\there'))      # '\\' in r'hello\there' gives None - Because backslash is interpreted as part of Esc seq
print(re.search(r'\\', r'hello\there'))     # '\\' in r'hello\there' gives (5,6) - Because raw string interprets backslash as backslash
print(re.search(r'\\$', 'hellothere\'))     # \' &amp; \" is also an escape sequence. So, python could not find end of string literal
print(re.search(r'\\', r'hellothere\'))     # python should consider backslash as backslash, but, python could not find end of string literal. No clue..
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get the desired output:</p>
<ol>
<li>Read the file line by line.</li>
<li>Remove the last character if it is '\'.</li>
<li>Join the modified lines.</li>
</ol>
<p>The above operations should provide the required result. I think using regex would just complicate the solution without any added benefits.</p>
<p>Quoting the <a href="https://docs.python.org/2/reference/lexical_analysis.html" rel="nofollow noreferrer">doc</a> on lexical analysis:</p>
<blockquote>
<p>When an 'r' or 'R' prefix is present, a character following a
  backslash is included in the string without change, and all
  backslashes are left in the string. For example, the string literal
  r"\n" consists of two characters: a backslash and a lowercase 'n'.
  String quotes can be escaped with a backslash, but the backslash
  remains in the string; for example, r"\"" is a valid string literal
  consisting of two characters: a backslash and a double quote; r"\" is
  not a valid string literal (even a raw string cannot end in an odd
  number of backslashes). Specifically, a raw string cannot end in a
  single backslash (since the backslash would escape the following quote
  character). Note also that a single backslash followed by a newline is
  interpreted as those two characters as part of the string, not as a
  line continuation.</p>
</blockquote>
</div>
<span class="comment-copy">couldn't you just use <code>\\?</code></span>
<span class="comment-copy">have you investigated what <code>$</code> means in regular expressions? I recommend a trip to <a href="https://www.regular-expressions.info" rel="nofollow noreferrer">regular-expressions.info</a></span>
<span class="comment-copy">Any ideas why that might be? What effect is the \ having at the end of `hellothere\`?</span>
<span class="comment-copy">I think you're confused about defining a backslash at the end of a raw string. Here's why you can't have that in your source and some workarounds: <a href="https://stackoverflow.com/questions/647769/why-cant-pythons-raw-string-literals-end-with-a-single-backslash" title="why cant pythons raw string literals end with a single backslash">stackoverflow.com/questions/647769/…</a></span>
<span class="comment-copy">Yes, and there are solutions in that question. The problem isn't related to the regex, it's with your syntax</span>
<span class="comment-copy">But question still remains... <code>print(re.search(r'\\$', 'hellothere\'))</code> should not work but  <code>print(re.search(r'\$', r'hellothere\'))</code> should work with raw string... because backslash is just a backslash but not part of escape sequence</span>
<span class="comment-copy">read <a href="https://stackoverflow.com/questions/647769/why-cant-pythons-raw-string-literals-end-with-a-single-backslash" title="why cant pythons raw string literals end with a single backslash">stackoverflow.com/questions/647769/…</a></span>
<span class="comment-copy">@ialarmedalien Your referred answer says: <i>Specifically, a raw string cannot end in a single backslash (since the backslash would escape the following quote character)</i>. This breaks the purpose of using rawstrings... because <a href="http://www.interfaceware.com/manual/python_escape_sequences_raw_strings.html" rel="nofollow noreferrer">here</a> it says: <i>If you want to create a string that contains backslashes, and you do not want Python to try to interpret these backslashes as escape sequences, you can create a raw string.</i></span>
<span class="comment-copy">from the <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-byte-literals" rel="nofollow noreferrer">python docs</a>: Even in a raw literal, quotes can be escaped with a backslash, but the backslash remains in the result; for example, r"\"" is a valid string literal consisting of two characters: a backslash and a double quote; r"\" is not a valid string literal (even a raw string cannot end in an odd number of backslashes). Specifically, a raw literal cannot end in a single backslash (since the backslash would escape the following quote character).</span>
<span class="comment-copy">Okay, I just added the same content to the answer and saw the comment now. Thanks, @ialarmedalien.</span>
