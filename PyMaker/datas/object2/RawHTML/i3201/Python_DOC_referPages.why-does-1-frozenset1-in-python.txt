<div class="post-text" itemprop="text">
<p>I find it odd that in Python, <code>{1} == frozenset({1})</code> evaluates to <code>True</code>. <code>set</code> and <code>frozenset</code> are different object types, and I don't see this similarity between other iterable object types (ex. <code>{1} == (1,)</code> evaluates to <code>False</code>). Why does this behavior occur with sets? Are there other iterable object types that have similar behavior?</p>
</div>
<div class="post-text" itemprop="text">
<p>As per the <a href="https://docs.python.org/2.4/lib/types-set.html" rel="nofollow noreferrer">documentation python2</a>  and <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">documentation python3</a></p>
<blockquote>
<p>Instances of <code>set</code> are compared to instances of <code>frozenset</code> based on
  their members. For example, "<code>set('abc') == frozenset('abc')</code>" returns
  <code>True</code>.</p>
</blockquote>
<p>and in the python3 documentation:</p>
<blockquote>
<p>Both set and frozenset support set to set comparisons. Two sets are equal if and only if every element of each set is contained in the other (each is a subset of the other). A set is less than another set if and only if the first set is a proper subset of the second set (is a subset, but is not equal). A set is greater than another set if and only if the first set is a proper superset of the second set (is a superset, but is not equal).</p>
</blockquote>
</div>
<span class="comment-copy">I knew that <code>5 == 5.0</code>, and there are similar equivalences for other numeric types (such as <code>complex</code>, so I was wondering if there were equivalences between other iterable types.</span>
<span class="comment-copy">Please link to the 3.x docs.</span>
<span class="comment-copy">The reason is probably that they can be compared in O(1) because of the hashes - very convenient</span>
<span class="comment-copy">@nosklo: They can't.</span>
<span class="comment-copy">@user2357112 nosklo According to this resource (<a href="https://wiki.python.org/moin/TimeComplexity" rel="nofollow noreferrer">wiki.python.org/moin/TimeComplexity</a>), &lt;strike&gt;the average case is O(1), and the worst case is O(n). I'm not sure why O(n) is the worst case complexity, but I'd imagine it has something to do with hash collisions. Do either of you know why?&lt;/strike&gt;</span>
<span class="comment-copy">@Joel: That's elementhood testing, not set equality.</span>
