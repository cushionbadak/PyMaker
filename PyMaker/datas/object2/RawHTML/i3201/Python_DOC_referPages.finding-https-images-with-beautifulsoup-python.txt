<div class="post-text" itemprop="text">
<p>I'm iterating through all the <code>img</code>'s in a <code>request.POST</code> to see if they are HTTPS (I'm using <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#quick-start" rel="nofollow noreferrer">Beautiful Soup</a> to help)</p>
<p>Here's my code:</p>
<pre><code>content = request.POST['content']
print(content) #prints:
&lt;p&gt;test test test&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src="https://www.treefrogfarm.com/store/images/source/IFE_A-K/ClarySage2.jpg" alt=""&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;2nd 2nd&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src="https://www.treefrogfarm.com/store/images/source/IFE_A-K/ClarySage2.jpg" alt=""&gt;&lt;/p&gt;

soup = BeautifulSoup(content, 'html.parser')
for image in soup.find_all('img'):
    print('Source:', image.get('src')[:8]) #prints Source: https://
    if image.get('src')[:7] == "https://":
        print('HTTPS')
    else:
        print('Not HTTPS')
</code></pre>
<p>Even though <code>image.get('src')[:7] == "https://"</code>, the code still prints <code>Not HTTPS</code>.</p>
<p>Any idea why?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well for starters, <code>'https://'</code> is 8 characters, so there's no way that a slice of 7 characters can match it.</p>
<p>Also, please make your question titles actually indicative of the problem you're having rather than unrelated accusations about the python operators.</p>
</div>
<div class="post-text" itemprop="text">
<p>to match the <code>https://</code> string the appropriate slice would be <code>:8</code> instead of <code>:7</code></p>
<p><code>if image.get('src')[:8] == "https://":</code></p>
</div>
<span class="comment-copy"><code>'https:/' != 'https://'</code></span>
<span class="comment-copy">Have a look at <a href="https://docs.python.org/3/library/urllib.parse.html" rel="nofollow noreferrer"><b><code>urllib.parse</code></b></a></span>
<span class="comment-copy">You specified a 7-character slice and compared it to an 8-character string.  These can never be equal.</span>
<span class="comment-copy">In general, this is exactly why Python strings have the <code>startswith</code> method, so you don't make silly off-by-one errors like this. (But in this case, you probably should be using a URL parser, as @PeterWood suggests.)</span>
<span class="comment-copy">Completely missed that, thankyou....working now</span>
