<div class="post-text" itemprop="text">
<p>I have a nested list how can I make the same elements removed with addition of its numbers.</p>
<p>What my list contains:</p>
<pre><code>lis = [['apple', 32], ['Blue shirt', 323], ['Blue shirt', 320]]
</code></pre>
<p>I want this <code>'Blue Shirt'</code> to merge, to make this:</p>
<pre><code>lis = [['apple', 32], ['Blue shirt', 643]]
</code></pre>
<p>what i've tried so far</p>
<pre><code>lis = [['apple',32],['Blue shirt',323],['Blue shirt',320]]
l = -1
new = 0
n = []
for i in lis:
    l+=1
    if lis[l][0] in i:
        count = lis[l].count('Blue shirt')
        if count &gt; 1:
            new += lis[l][1]
            n.append(new)
            name = lis[l][0]
            n.append(name)
            lis.pop(l)

print(n)
</code></pre>
<p>My approch was to count the occurrence of name if its more than 2 then make a new list with that name and updated price and put it in the place of the previous list but it was not simple enough.  </p>
<p>I am trying the count function but its seems to not work efficiently on a nested list. Would love to have to most simplest option to solve this without using some external functions (imports).</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list.count('Blue shirt')</code> counts how many times the string <code>'Blue shirt'</code> is present in a list. That's exactly once, and not a useful number for your needs.</p>
<p>You want to put your strings into a dictionary, so you can track the numbers without having to do a full scan:</p>
<pre><code>counts = {}
for name, count in lis:
    counts[name] = counts.get(name, 0) + count
</code></pre>
<p>Now you have a mapping with the sums of all your numbers; turn that back into a list of lists:</p>
<pre><code>lis = [[name, count] for name, count in counts.items()]
</code></pre>
<p>This doesn't necessarily keep the same order as the elements in the input list. If that's needed, you'd have to loop over the original list and see if the name string is still there, and if so, add the name and count from the mapping to a new list and remove the name from the mapping:</p>
<pre><code>ordered_lis = []
for name, __ in lis:
    if name in counts:
        ordered_lis.append([name, counts.pop(name)])
</code></pre>
<p>However, in Python 3.6 and newer, dictionaries will remember the insertion order of keys, meaning that the loop over <code>counts.items()</code> gives you your strings in the original first-seen order again.</p>
<p>Demo, using Python 3.6:</p>
<pre><code>&gt;&gt;&gt; lis = [['apple', 32], ['Blue shirt', 323], ['Blue shirt', 320]]
&gt;&gt;&gt; counts = {}
&gt;&gt;&gt; for name, count in lis:
...     counts[name] = counts.get(name, 0) + count
...
&gt;&gt;&gt; [[name, count] for name, count in counts.items()]
[['apple', 32], ['Blue shirt', 643]]
</code></pre>
<p>If you can use the standard library, then you could also use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a> object to avoid having to use <code>counts.get(name, 0)</code> (you'd use <code>counts = defaultdict(int)</code> outside the loop, and <code>counts[name] += 1</code> in the loop instead), or <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict()</code></a> for the dictionary to remember insertion order on Python versions before Python 3.6.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using only base Python:</p>
<pre><code>grouped = dict.fromkeys((x[0] for x in lis), 0) # count dict with unique lis names

for el in lis:
    grouped[el[0]] += el[1] # sum values per name

[[k,v] for k, v in grouped.items()] # convert back to list
#[['apple', 32], ['Blue shirt', 643]]
</code></pre>
<p>Not sure if "external functions" means no additional imports - but if you can use Pandas, use <code>groupby</code> and <code>sum</code>:</p>
<pre><code>import pandas as pd

pd.DataFrame(lis).groupby(0, as_index=False).sum().values

array([['Blue shirt', 643],
       ['apple', 32]], dtype=object)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another approach to use without any libraries (like <code>collections.Counter</code>):</p>
<pre><code>lis = [['apple',32],['Blue shirt',323],['Blue shirt',320]]

d = {}

for name, item in lis:
    try:
        d[name] += item
    except KeyError:
        d[name] = item

lis = [[k ,v] for k, v in d.items()]
print(lis)
</code></pre>
<p>Output:</p>
<pre><code>[['apple', 32], ['Blue shirt', 643]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you are not able to use neither an external library nor <code>collections.Counter()</code> The following solution might help you:</p>
<pre><code>lis = [['apple', 32], ['Blue shirt', 323], ['Blue shirt', 320]]
d = {}

for (name, count) in lis:
    d[name] = d.get('name', 0) + count

lis = [[name, count] for name, count in d.items()]
</code></pre>
<p>The problem using <code>list.count()</code> is that it just applies to a single list, but you are having a list of lists. Basically, my solution uses a dictionary that has as keys the items you need to count and as values the count. Then I use a list comprehension to produce your desire output. </p>
</div>
<span class="comment-copy">Why is the new list nested further? Wouldn't <code>[['apple', 32], ['Blue shirt', 643]]</code> do?</span>
<span class="comment-copy">And how did you use the count function? Have you considered using <code>collections.Counter()</code>?</span>
<span class="comment-copy">i haven't used the counter yet but i am using the count function inside a for loop</span>
<span class="comment-copy">Can you share your code that isn't working?</span>
<span class="comment-copy">updated the post</span>
<span class="comment-copy">I will upvote yours for the detailed clarification of your solution, and I loved the Python 3.6 explanation.</span>
<span class="comment-copy">hi thanks for the solution. But i wonder if i have 2 values for example ['Blue shirt', 643 , 2] how can i make it inside the list</span>
<span class="comment-copy">@NoobSaibot: that's not enough information for me to help. Do those numbers have different meaning? Are they counts to be added up? Can you give a good input example and the expected output?</span>
<span class="comment-copy">hi , thanks for replying .. Imagine i have the same list [['apple', 32 , 2], ['Blue shirt', 323 , 3], ['Blue shirt', 320 , 1]]  these 3rd numbers are actually quanitity that needed to be added as well just like the same way price  were summing up.. I need these qty to sum up to other qty as well</span>
<span class="comment-copy">the output would be  [['apple', 32 , 2], ['Blue shirt', 643 , 4]]</span>
<span class="comment-copy">it is not allowed BTW thanks</span>
<span class="comment-copy">Updated with base Python solution.</span>
<span class="comment-copy">You can drop the <code>[</code> and <code>]</code> brackets from the <code>set()</code> call and just pass in a generator expression. That avoids creating a new list object just to be discarded again once <code>set()</code> is done. And then you should replace the <code>set()</code> with a <code>{...}</code> set comprehension, while you are at it: <code>names = {x[0] for x in lis}</code>. However, you then never use the <code>names</code> other than to produce a dictionary, so you could just use <code>grouped = dict.fromkeys((x[0] for x in lis), 0)</code>.</span>
<span class="comment-copy">Wow, great.  Thanks for the instruction @Martijn Pieters.</span>
