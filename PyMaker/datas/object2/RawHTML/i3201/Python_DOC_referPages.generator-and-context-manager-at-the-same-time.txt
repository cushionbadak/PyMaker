<div class="post-text" itemprop="text">
<p>Imagine I have some code that I want it to run:</p>
<pre><code>with F() as o:
    while True:
        a = o.send(2)
        print(a)
</code></pre>
<p>It means that the <code>F</code> class should return an <code>generator</code> and also it is <code>context manager</code>, generally I want a context manager to be generator too.</p>
<p>I tried this:</p>
<pre><code>class F:

    def __enter__(self):
        return self

    def __exit__(self, *exc):
        print('exit')

    def __next__(self):
        return 5

    def __iter__(self):
        return self
</code></pre>
<p>As expected this will return <code>AttributeError: 'F' object has no attribute 'send'</code>, I handled this error by adding:</p>
<pre><code>def send(self, param):
    self.__next__()
</code></pre>
<p>but I think it is not a good way to do this, I look around and find <a href="https://stackoverflow.com/questions/42983569/how-to-write-a-generator-class">this</a>, but they are not using <code>send</code> as I want, I need that instance to be a generator.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>collections.abc</code> and subclass your class <code>F</code> from <code>Generator</code> (<a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Generator" rel="nofollow noreferrer">manual pages</a>). If you implement <strong>enter</strong> and <strong>exit</strong>, your instance will be generator and have context manager support as well:</p>
<pre><code>from collections.abc import Generator

class F(Generator):
    def __init__(self):
        self.__my_generator = self._my_generator()
        next(self.__my_generator)   # prime the generator

    def _my_generator(self):
        while True:
            v = yield 42
            print('generator received ', v)

    # context manager interace:
    def __enter__(self):
        return self

    def __exit__(self, *exc):
        print('exit')

    # Generator interface:
    def send(self, value):
        return self.__my_generator.send(value)

    def throw(self, typ, value=None, traceback=None):
        return self.__my_generator.throw(typ, value, traceback)


with F() as o:
    while True:
        a = o.send(2)
        print('I received ', a)
</code></pre>
<p>Prints:</p>
<pre><code>generator received  2
I received  42
...etc.
</code></pre>
</div>
<span class="comment-copy">This is surely better than my solution, thanks, the only question now is: the <code>o</code> can not be instance of generator? because I dont want to implement <code>send</code> on the class ?</span>
<span class="comment-copy">@mehrdad-pedramfar <code>collections.abc.Generator</code> will implement <code>close, __iter__, __next__</code> for you (if you provide <code>send</code> and <code>throw</code> methods). If you not subclass from <code>Generator</code>, you need to implement all those methods yourself.</span>
