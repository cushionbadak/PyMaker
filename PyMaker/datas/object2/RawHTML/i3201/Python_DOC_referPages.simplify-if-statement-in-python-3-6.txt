<div class="post-text" itemprop="text">
<p>I have the following code which is working fine and giving me the expected result, but i know there is a way to simplify it and i don't whats the best to way make to following code can be 3/4 lines instead of 20 odd or so. Python experts need your advice how i can ease the following code.</p>
<pre><code>for ele in hng_row:
    if not ele.isdigit():
        if not ele.isalpha():
            if not ele.isalnum():
                if ele.endswith('.00'):
                    get_index = hng_row.index(ele)
                    ele = ele[:-1]
                    hng_row[get_index] = ele
                if ele.startswith('0.') and ele.endswith('0') and ele != '0.0':
                    get_index = hng_row.index(ele)
                    ele = ele[:-1]
                    hng_row[get_index] = ele
                if (ele[-2] != '0' ) and (ele[-2] != '.') and (ele[-1] == '0'):
                    get_index = hng_row.index(ele)
                    ele = ele[:-1]
                    hng_row[get_index] = ele
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This could be simplified (or, well, lets say "shortened") further. First, note that checking <code>not isdigit</code>, <code>not isalpha</code> and <code>not isalnum</code> is redundant, you just have to check <code>not isalnum</code>. Second, you could use a <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expression</a> for checking the format of the number, combining your three conditions with <code>|</code>. Also, you can <code>enumerate</code> the items instead of getting the <code>index</code>.</p>
<pre><code>for index, ele in enumerate(hng_row):
    if not ele.isalnum() and re.match(r"^.*\.00|0\..+0|.*[^0.]0$", ele):
        hng_row[index] = ele[:-1]
</code></pre>
<p>Here, the regex is <code>^.*\.00|0\..+0|.*[^0.]0$</code>. <code>^</code> marks the start of the string, <code>$</code> the end, and <code>|</code> a disjunction, i.e. the string has to match <code>.*\.00</code> (something followed by <code>.00</code>) or <code>0\..+0</code> (<code>0.</code>, then something, then <code>0</code>) or <code>.*[^0.]0</code> (something followed by neither <code>0</code> nor <code>.</code>, then <code>0</code>).</p>
<p>You could also replace the loop with a list comprehension:</p>
<pre><code>&gt;&gt;&gt; hng_row =  ['1531402200', 'primary', '2', '2100.00', '1.03', '1.05', '1.01', '2', '151'] 
&gt;&gt;&gt; p = r"^.*\.00|0\..+0|.*[^0.]0$"
&gt;&gt;&gt; [ele[:-1] if re.match(p, ele) else ele for ele in lst]
['1531402200', 'primary', '2', '2100.0', '1.03', '1.05', '1.01', '2', '151']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First step: combine conditions (+pylint)</p>
<pre><code>for ele in hng_row:
    if not ele.isdigit() and not ele.isalpha() and not ele.isalnum():
        if ele.endswith('.00'):
            get_index = hng_row.index(ele)
            ele = ele[:-1]
            hng_row[get_index] = ele
        if ele.startswith('0.') and ele.endswith('0') and ele != '0.0':
            get_index = hng_row.index(ele)
            ele = ele[:-1]
            hng_row[get_index] = ele
        if (ele[-2] != '0') and (ele[-2] != '.') and (ele[-1] == '0'):
            get_index = hng_row.index(ele)
            ele = ele[:-1]
            hng_row[get_index] = ele
</code></pre>
<p>Second step: refactor if-blocks</p>
<pre><code>for ele in hng_row:
    if not ele.isdigit() and not ele.isalpha() and not ele.isalnum():
        if (ele.endswith('.00')
                or ele.startswith('0.') and ele.endswith('0') and ele != '0.0'
                or (ele[-2] != '0') and (ele[-2] != '.') and (ele[-1] == '0')):
            get_index = hng_row.index(ele)
            ele = ele[:-1]
            hng_row[get_index] = ele
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The first few if statements can go on one line.</p>
<pre><code>  for ele in hng_row:
        if not ele.isdigit() and not ele.isalpha() and not ele.isalnum():
            if ele.endswith('.00'):
                get_index = hng_row.index(ele)
                ele = ele[:-1]
                hng_row[get_index] = ele
            if ele.startswith('0.') and ele.endswith('0') and ele != '0.0':
                get_index = hng_row.index(ele)
                ele = ele[:-1]
                hng_row[get_index] = ele
            if (ele[-2] != '0' ) and (ele[-2] != '.') and (ele[-1] == '0'):
                get_index = hng_row.index(ele)
                ele = ele[:-1]
                hng_row[get_index] = ele
</code></pre>
</div>
<span class="comment-copy">It would help if you explained what the code does.</span>
<span class="comment-copy">I'm voting to close this question as off-topic because it should be post in the <a href="https://codereview.stackexchange.com/">codereview.stackexchange.com</a></span>
<span class="comment-copy">What is the actual input and expected output? it may be easier to think on another approach than attempting to fix this one.</span>
<span class="comment-copy">If your code is working, this question might be better suited for <a href="http://codereview.stackexchange.com/">codereview.stackexchange.com</a></span>
<span class="comment-copy">oh thanks i was not aware of the codereview thing. Will delete this question and post it there</span>
<span class="comment-copy">getting the following error -  AttributeError: module 're' has no attribute 'matches'</span>
<span class="comment-copy">@PrateekGupta Whoops, it should be <code>re.match</code> (I did not really test this, since you provided no test cases)</span>
<span class="comment-copy">thanks i have corrected it  another thing i have the following list and the code does not goes on to change any value                ['1531402200', 'primary', '2', '2100.00', '1.03', '1.05', '1.01', '2', '151']</span>
<span class="comment-copy">actually it should change value from 2100.00 to 2100.0</span>
<span class="comment-copy">@PrateekGupta Strange, it works for me. See my update.</span>
<span class="comment-copy">thanks that seems more reasonable</span>
<span class="comment-copy">third: combine conditions again, fourth: extract condition as helper function to improve maintainability</span>
<span class="comment-copy">Also, <code>isdigit</code>, <code>isalpha</code> and <code>isalnum</code> is redundant.</span>
<span class="comment-copy">Can you please throw an example</span>
