<div class="post-text" itemprop="text">
<p>Lets say I have an incoming string which is a python function and I would like to convert that to a python signature. I can do that using the importlib function.</p>
<p>For example lets say I have an incoming string "os.getenv" and I want to resolve to the corresponding function signature. I can do something like below.</p>
<pre><code>&gt;&gt;&gt; import importlib
&gt;&gt;&gt; fn = "os.getenv"
&gt;&gt;&gt; package_signature = importlib.import_module("os")
&gt;&gt;&gt; getattr(package_signature, "getenv")
</code></pre>
<p>How can I parse and return functions when the functions are lambda functions. For example something like <code>fn = "lambda x: 'a' + x"</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can achieve this by using <code>eval()</code> just like this:</p>
<pre><code>function_str = "lambda x: 'a' + x"    
fn = eval(function_str)

test_input = ['a', 'b', 'c']

print(list(map(fn, test_input)))
# Outputs: ['aa', 'ab', 'ac']
</code></pre>
<p>Here is the corresponding section in Python Docs: <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer" title="eval()">eval()</a></p>
<p>You can only do this with statements, so defining a function will not work with eval. Then you would have to use <code>exec</code>, e.g.:</p>
<pre><code>exec("def fun(x): return 'a' + x")

fun('b')
# yields 'ab'
</code></pre>
<p>Anywhere be careful when using <code>eval()</code> or <code>exec()</code> within your code for example when you write a web application and are thinking of executing some user input. There are a couple of ways to exploit such functionality. Just google for something like "exec python vulnerability" or similar and you will find a lot of information.</p>
</div>
<span class="comment-copy">Using <code>eval()</code>?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/37320401/can-i-execute-a-lambda-function-passed-as-a-string">can i execute a lambda function passed as a string</a></span>
<span class="comment-copy">Thanks for this but I was hoping there is something other than eval.</span>
