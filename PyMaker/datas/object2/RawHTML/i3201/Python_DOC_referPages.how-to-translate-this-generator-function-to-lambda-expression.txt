<div class="post-text" itemprop="text">
<pre><code>def f(nums):
    sum = 0
    for i in nums:
        sum += i
        yield sum
</code></pre>
<p>I was trying to initiate a new list which every index's value is previous accumulation, according to args nums(type list), using list comprehension.</p>
<p>the final result would look like<code>[i for i in f(nums)]</code></p>
<p>Is there ways to translate the function to lambda expression? or any other ones to make it one-line?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would propose the following as a replacement for that:</p>
<pre><code>nums=[1,2,3,4]
gen=(sum(li[0:i]) for i,_ in enumerate(li,1))
</code></pre>
<p>That is a generator, so a <code>O(n^2)</code> operation is not being performed for elements not yet needed.</p>
<p>Then to get the elements, use <code>next</code>:</p>
<pre><code>&gt;&gt;&gt; next(gen)
1
&gt;&gt;&gt; next(gen)
3
&gt;&gt;&gt; next(gen)
6
&gt;&gt;&gt; next(gen)
10
</code></pre>
<p>And if you do want them all at once, just use <code>list</code> on the generator:</p>
<pre><code>&gt;&gt;&gt; gen=(reduce(add, li[0:i]) for i,_ in enumerate(li,1))
&gt;&gt;&gt; list(gen)
[1, 3, 6, 10]]
</code></pre>
<p><strong>The performance of this function on non trivial lists is HORRIBLE because it has <code>O(n^2)</code> complexity. Only use it as a curiosity. See timings below.</strong> </p>
<hr/>
<p>And (thanks to AChampion) another reduce:</p>
<pre><code>&gt;&gt;&gt; reduce(lambda x, y: x+[y+next(iter(x[-1:]), 0)], nums, [])
[1, 3, 6, 10]
</code></pre>
<p>But the right answer is <code>itertools.accumulate</code> or your your original function. Any one line solution will have far greater computational complexity.</p>
<hr/>
<p>Here is a set of timings to show that other than <code>itertools.accumulate</code>, the single line replacements have <code>O(n^2)</code> type complexity (ie, 10x more items, 100x more time roughly). That is because for each element in the list, because lambdas or reduce or comprehensions do not have any form of accumulator, the entire list up to that point must be looped over again. Your original function and <code>itertools.accumulate</code> are both <code>O(n)</code> type complexity (ie, 10x more items, a linear 10x more time).</p>
<p><a href="http://bigocheatsheet.com" rel="nofollow noreferrer">Here</a> is a graph and cheatsheet of O Complexity.</p>
<p>Here is the timing and results:</p>
<pre><code>from itertools import accumulate
from functools import reduce 

def f1(nums):
    sum_ = 0
    for i in nums:
        sum_ += i
        yield sum_

def f2(nums):
    return (sum(nums[0:i]) for i,_ in enumerate(nums,1))

def f3(nums):
    return  accumulate(nums)

def f4(nums):
    return reduce(lambda x, y: x+[y+next(iter(x[-1:]), 0)], nums, [])

if __name__=='__main__':
    import timeit    
    for case, x in (('small',100),('med',1000),('large',10000),('huge',100000)):  
        data=list(range(x))
        print("Case {}, {:,} x, All equal: {}".format(case,x,(list(f1(data))==list(f2(data))==list(f3(data))==list(f4(data)))))
        for f in (f1,f2,f3,f4):
            print("   {:^10s}{:.4f} secs".format(f.__name__, timeit.timeit("list(f(data))", setup="from __main__ import f, data", number=10)))
</code></pre>
<p>Results:</p>
<pre><code>Case small, 100 x, All equal: True
       f1    0.0001 secs
       f2    0.0007 secs
       f3    0.0000 secs
       f4    0.0006 secs
Case med, 1,000 x, All equal: True
       f1    0.0007 secs
       f2    0.0424 secs
       f3    0.0003 secs
       f4    0.0139 secs
Case large, 10,000 x, All equal: True
       f1    0.0083 secs
       f2    3.9526 secs
       f3    0.0036 secs
       f4    1.2756 secs
Case huge, 100,000 x, All equal: True
       f1    0.0977 secs
       f2    427.4129 secs
       f3    0.0532 secs
       f4    159.2506 secs
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is one way to do it:</p>
<pre><code>nums=[1,2,3,4]

[sum(nums[:idx+1]) for idx, i in enumerate(nums)]
</code></pre>
<p>Output:</p>
<pre><code>[1, 3, 6, 10]
</code></pre>
<p>Another way is to use <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer">itertools.accumulate</a> as suggested by @Blckknght.</p>
<pre><code>from itertools import accumulate

list(accumulate(nums))
</code></pre>
<p>Output:</p>
<pre><code>[1, 3, 6, 10]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the list is continuously.</p>
<p>A simple but not efficient way:</p>
<p><code>
[sum(range(1, i+1)) for i in range(1, 5))]
</code></p>
<p>Output:</p>
<p><code>
[1, 3, 6, 10]
</code></p>
</div>
<span class="comment-copy">Why don't you just use <code>list(nums)</code></span>
<span class="comment-copy">Why do you want this as a lambda expression?</span>
<span class="comment-copy">It sounds like you want <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a>.</span>
<span class="comment-copy">@SheshankS. that also works. but it is not the confusions on this question</span>
<span class="comment-copy"><code>itertools.accumulate()</code> is the right answer, but just because you want a lambda: <code>functools.reduce(lambda x, y: x+[y+next(iter(x[-1:]), 0)], [1,2,3,4], []) == [1, 3, 6, 10]</code></span>
<span class="comment-copy">Why <code>reduce(add, nums[0:i])</code> isn't this just the same a <code>sum(nums[0:i])</code> and <code>enumerate()</code> seems a strange way to get a <code>range(1, len(nums)+1)</code>.</span>
<span class="comment-copy">In this case, yes, but to parallel the ability of <code>accumulate</code> to take a callable.</span>
<span class="comment-copy">Warning: <code>O(n^2)</code> complexity. Only use this on really small lists...</span>
