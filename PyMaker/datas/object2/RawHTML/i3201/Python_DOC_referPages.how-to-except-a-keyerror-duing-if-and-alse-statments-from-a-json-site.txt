<div class="post-text" itemprop="text">
<p>I'm scraping a text .json site for information and sometimes the elements that i'm monitoring go away because they don't need to be there. This makes the program stop and cant be restarted because they are gone. I need to be able to except that they aren't there and continue on and print / send the right information.</p>
<p>I tried doing something with <code>except KeyError:</code>but it doesn't seem like i'm doing it right.</p>
<p>If anyone could please help me out, that would be awesome! Note: I took the endpoint out!</p>
<p>The elements in particular that don't show all the time are, <code>PID</code>, <code>ReleaseType</code>and <code>Time</code></p>
<pre><code>def check_endpoint():

    endpoint = ""
    req = requests.get(endpoint)
    reqJson = json.loads(req.text)
    for id in reqJson['threads']:  # For each id in threads list
        PID = id['product']['globalPid']  # Get current PID
        if PID in list:
            print('checking for new products')

        else:
            title = (id['product']['title'])    
            Image = (id['product']['imageUrl'])
            ReleaseType = (id['product']['selectionEngine'])
            Time = (id['product']['effectiveInStockStartSellDate'])
            send(title, PID, Image, ReleaseType, Time)
            print ('added to database'.format(PID))
            list.append(PID)  # Add PID to the list
    return
</code></pre>
<p>If i run the code as is right now, i get the current error. This is the element i want to except. </p>
<pre><code>Traceback (most recent call last):
  File "C:\Users\Desktop\Final.py", line 89, in 
&lt;module&gt;
main()
  File "C:\Users\Desktop\Final.py", line 84, in 
main
    check_endpoint()
  File "C:\Users\Desktop\Final.py", line 74, in 
check_endpoint
    ReleaseType = (id['product']['selectionEngine'])
KeyError: 'selectionEngine'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Then you want something like this (and please change the name of the <code>list</code> variable, see comment)</p>
<pre><code>def check_endpoint():

    endpoint = ""
    req = requests.get(endpoint)
    reqJson = json.loads(req.text)
    for id in reqJson['threads']:  # For each id in threads list
        PID = id['product']['globalPid']  # Get current PID
        if PID in list:
            print('checking for new products')

        else:
          try:
            title = (id['product']['title'])    
            Image = (id['product']['imageUrl'])
            ReleaseType = (id['product']['selectionEngine'])
            Time = (id['product']['effectiveInStockStartSellDate'])

          except KeyError as e:
            print("... ", e)

          else:
            # When all OK ...
            send(title, PID, Image, ReleaseType, Time)
            print ('added to database: {}'.format(PID))
            list.append(PID)  # Add PID to the list
</code></pre>
<p>How you want it precise is up to you.  You can handle things in different ways.</p>
</div>
<div class="post-text" itemprop="text">
<p>A nice way to work around KeyError responses in Python is to use the <code>.get()</code> method on dictionaries. If you call the get method, you can provide a default value to provide if the key doesn't exist in the dictionary:</p>
<pre><code>&gt;&gt;&gt; d = {'hi': 'there'}
&gt;&gt;&gt; d.get('hi', 'cats') # return 'cats' if 'hi' is missing
'there'
&gt;&gt;&gt; d.get('apples', 'cats') # return 'cats' if 'apple' is missing
'cats'
</code></pre>
<p>If you have nested dictionaries, you can set <code>{}</code> as the default value to provide from one dictionary, so you can keep calling <code>.get()</code> on each child dictionary:</p>
<pre><code>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d['a'] = {}
&gt;&gt;&gt; d['a']['b'] = 'c'

&gt;&gt;&gt; d.get('a', {}).get('b', 'cats')
'c'
&gt;&gt;&gt; d.get('x', {}).get('y', 'cats')
'cats'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of getting a value from a dictionary with square brackets, you can use the <code>.get(key[, default])</code> method from the <code>dict</code> type (see <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer">docs here</a>) and set a default value. For your example:</p>
<pre><code>id['product'].get('selectionEngine', None)
</code></pre>
<p>This will give <code>id['product']['selectionEngine']</code> if <code>id['product']</code> has key <code>'selectionEngine'</code>, otherwise it will give <code>None</code>. Of course, you can change the <code>None</code> to some other value that might make more sense for you application.</p>
</div>
<span class="comment-copy">What part of the code do you want caught? Just wrap a <code>try:</code> <code>except KeyError:</code> around that part. Also, you don't need a void <code>return</code> and I'm pretty sure your <code>.format(PID)</code> doesn't do anything since it's missing a <code>{}</code> inside the string.</span>
<span class="comment-copy">Please show how you tried to deal with the exception, and someone may be able to show you how to fix it.</span>
<span class="comment-copy">@ggorlen The part of code that needs to be caught is where it either check if the PID is in the list or in the else section where its getting the other values.</span>
<span class="comment-copy">you can't use: <code>if PID in list:</code> this will raise a TypeError, never use <i>list</i> as a variable name since  <code>list()</code> is a python function</span>
<span class="comment-copy">@hootnot the code is working in the above example, im just trying to catch the exceptions and continue. Ill post what im trying at the moment</span>
<span class="comment-copy">ohhhh thank you very much! Ill mess around with the code some more to get it how i would like it. Have an awesome day!!</span>
