<div class="post-text" itemprop="text">
<p>In a python console:</p>
<pre><code>&gt;&gt;&gt; del list # Just to make sure kw: list is not assigned to any variable
&gt;&gt;&gt; my_list = ["a", "b", "c"]
&gt;&gt;&gt; my_iter = iter(my_list)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'list' object is not callable
&gt;&gt;&gt; type(my_list)
&lt;class 'list'&gt;
&gt;&gt;&gt; type(list)
&lt;class 'type'&gt;
</code></pre>
<p>What am I missing here? I want an iterable object so that I can access <code>next()</code> when looping over it. e.g.:</p>
<pre><code>&gt;&gt;&gt; for letter in my_iter:
...     print(next(my_iter))
b
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
StopIteration
</code></pre>
<p>I understand that this will throw an error on the last letter but that's irrelevant.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have bound the name <code>iter</code> to a list:</p>
<pre><code>&gt;&gt;&gt; my_list = ["a", "b", "c"]
&gt;&gt;&gt; iter(my_list)
&lt;list_iterator object at 0x10b1e04e0&gt;
&gt;&gt;&gt; iter = [42]  # rebinding the name iter to a list object
&gt;&gt;&gt; iter(my_list)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'list' object is not callable
&gt;&gt;&gt; type(iter)
&lt;class 'list'&gt;
&gt;&gt;&gt; callable(iter)
False
</code></pre>
<p>The exception isn't telling you the list object being passed to the call is the problem. You are not calling the <code>my_list</code> object, you are calling <code>iter</code>.</p>
<p>Use <code>del iter</code> to delete the global name in the current namespace; The <code>iter()</code> function is a built-in and it'll be found again once you delete the shadowing global:</p>
<pre><code>&gt;&gt;&gt; del iter
&gt;&gt;&gt; iter(my_list)
&lt;list_iterator object at 0x10b1e0358&gt;
&gt;&gt;&gt; type(iter)
&lt;class 'builtin_function_or_method'&gt;
&gt;&gt;&gt; callable(iter)
True
&gt;&gt;&gt; my_iter = iter(my_list)
&gt;&gt;&gt; for letter in my_iter:
...     print(next(my_iter))
...
b
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
StopIteration
</code></pre>
<p>That last traceback <em>could</em> be fixed by asking <code>next()</code> to return a default instead, e.g. <code>next(my_iter, 'no more letters')</code>.</p>
<p>You could also recover the function reference from the <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow noreferrer"><code>builtins</code> module</a>, so via <code>builtins.iter</code>.</p>
</div>
<span class="comment-copy">You have assigned a list object to the name <code>iter</code>. So <code>iter(...)</code> will raise that exception, regardless of what you pass in.</span>
<span class="comment-copy">Do you get this same error when you start over again in a new console?</span>
