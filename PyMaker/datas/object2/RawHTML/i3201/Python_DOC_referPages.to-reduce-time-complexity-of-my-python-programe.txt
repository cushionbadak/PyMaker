<div class="post-text" itemprop="text">
<p>I want to find all subsequences of length 3 within a list. My program's complexity is too high, so I want to reduce my program's time complexity. My code is here.</p>
<pre><code>def generate(lst):
    end = len(lst)
    for i in range(0, end - 2):
        for j in range(i + 1, end - 1):
            for k in range(j + 1, end):
                yield lst[i], lst[j], lst[k]

for a, b, c in generate([6, 3, 88, 4]):
    print(a, b, c)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can refer to how <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer"><code>itertools.combinations</code></a> is implemented:</p>
<pre><code>from itertools import combinations
print(list(combinations([6, 3, 88, 4], 3)))
</code></pre>
</div>
<span class="comment-copy">Although this question might technically be on-topic here, I think that you may find <a href="https://codereview.stackexchange.com/">codereview.stackexchange.com</a> to be more suited to your needs.</span>
<span class="comment-copy">Are <code>subsequence_triplets</code> and <code>generate</code> the same function? Also are you happy with a standard library based solution i.e. itertool.combinations or did you want to implement the algorithm?</span>
<span class="comment-copy">yup, those are the same. sorry for the silly mistake. Actually, I want to implement the algorithm.</span>
<span class="comment-copy">What are you actually trying to return? The question says subsequences, but your code produces combinations that aren't subsequences. There are only two subsequences in that list: <code>[6, 3, 88]</code> and <code>[3, 88, 4]</code>.</span>
<span class="comment-copy">If you're really trying to return all combinations, you can't reduce the time complexity. The number of combinations is O(n^3), and you can't produce them in less time. You can use <code>itertools.combinations()</code>, but it will have the same time complexity.</span>
