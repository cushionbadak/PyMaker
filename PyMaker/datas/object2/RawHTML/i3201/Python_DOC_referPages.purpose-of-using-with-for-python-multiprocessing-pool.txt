<div class="post-text" itemprop="text">
<p>I have been learning the multi process module in python and I notice in the 
<a href="https://docs.python.org/3.4/library/multiprocessing.html?highlight=process#multiprocessing.pool.Pool" rel="nofollow noreferrer">documentation</a> they use with Pool ...</p>
<p><code>with Pool(processes=4) as pool:
    pool.map(function,item)</code>
vs.</p>
<p><code>pool=Pool(4)
pool.map(function,item)</code></p>
<p>But in all the examples I have been seeing, and practice I have just been using pool=Pool(#). What is the difference and purpose of the with. I know that with is <a href="https://docs.python.org/3/reference/compound_stmts.html#with" rel="nofollow noreferrer">used to wrap the execution of a block with methods defined by a context manager</a> but what does it achieve for Pool. I think I am just not understanding Pool.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you read the source code of the <code>multiprocessing.pools.Pool</code> class you'll see that it has:</p>
<pre><code>def __exit__(self, exc_type, exc_val, exc_tb):
    self.terminate()
</code></pre>
<p>So it simply calls the <code>terminate()</code> method for you when the context manager ends.</p>
<p>The <code>terminate()</code> method stops the worker processes immediately without completing outstanding work, while the <code>close()</code> method only prevents any more tasks from being submitted to the pool.</p>
<p>From the <a href="https://docs.python.org/3.4/library/multiprocessing.html?highlight=process#multiprocessing.pool.Pool.terminate" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>New in version 3.3: <code>Pool</code> objects now support the context management
  protocol – see Context Manager Types. <code>__enter__()</code> returns the pool
  object, and <code>__exit__()</code> calls <code>terminate()</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>with is used in python for context management.</p>
<p>When used with pool, it's the equivalent of calling pool.close() after the map or apply method. 
If not called, you'll end up with a whole lot of ghost processes on your machine. </p>
<p>Another example, is the usage of with while handling files, thus implicitly calling f.close()</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.4/library/multiprocessing.html?highlight=process#multiprocessing.Connection.recv_bytes_into" rel="nofollow noreferrer">It just implicitly calls the <code>close</code> method:</a></p>
<blockquote>
<p>New in version 3.3: Connection objects now support the context management protocol – see Context Manager Types. <code>__enter__()</code> returns the connection object, and <code>__exit__()</code> calls <code>close()</code>.</p>
</blockquote>
</div>
