<div class="post-text" itemprop="text">
<p>I have a list containing a number of strings. Some of the strings are repeated so I want to count how many times they are repeated. For the singular strings I will only print it, for the repeating strings I want to print the number of duplications it has. the code is as follows:</p>
<pre><code>for string in list:
    if list.count(string) &gt; 1:
    print(string+" appeared: ")
    print(list.count(string))
elif list.count(string) == 1:
    print(string)
</code></pre>
<p>However it has some problems as it is printing all the instances of the repeated strings. For example, if there are two "hello" strings in the list, it will print <code>hello appeared 2</code> for twice. So is there a way to skip to check all the instances of the repeated strings? Thanks for help. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>list.count</code> in a loop is expensive. It will parse the entire list for each word. That's O(n<sup>2</sup>) complexity. You <em>can</em> loop over a set of words, but that's O(m*n) complexity, still not great.</p>
<p>Instead, you can use <code>collections.Counter</code> to parse your list once. Then iterate your dictionary key-value pairs. This will have O(m+n) complexity.</p>
<pre><code>lst = ['hello', 'test', 'this', 'is', 'a', 'test', 'hope', 'this', 'works']

from collections import Counter

c = Counter(lst)

for word, count in c.items():
    if count == 1:
        print(word)
    else:
        print(f'{word} appeared: {count}')

hello
test appeared: 2
this appeared: 2
is
a
hope
works
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>set</code></p>
<p><strong>Ex:</strong></p>
<pre><code>for string in set(list):
    if list.count(string) &gt; 1:
        print(string+" appeared: ")
        print(list.count(string))
    elif list.count(string) == 1:
        print(string)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a></p>
<p>To create:</p>
<pre><code>In [166]: import collections

In [169]: d = collections.Counter(['hello', 'world', 'hello'])
</code></pre>
<p>To display:</p>
<pre><code>In [170]: for word, freq in d.items():
     ...:     if freq &gt; 1:
     ...:         print('{0} appeared {1} times'.format(word, freq))
     ...:     else:
     ...:         print(word)
     ...:
hello appeared 2 times
world
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use python's <code>collections.counter</code> like so -</p>
<pre><code>import collections
result = dict(collections.Counter(list))
</code></pre>
<p>Another way to do this manually is:</p>
<pre><code>result = {k, 0 for k in set(list)}
for item in list:
    result[item] += 1
</code></pre>
<p>Also, you should not name your list as list as its python's inbuilt type. Now both the methods will give you dicts like - </p>
<pre><code>{"a": 3, "b": 1, "c": 4, "d": 1}
</code></pre>
<p>Where <code>keys</code> are the unique values from your list and values are how many time a key has appeared in your list</p>
</div>
<span class="comment-copy">Use <code>collections.Counter</code> for this.</span>
<span class="comment-copy">Side note: never name a variable after a built-in. Use <code>lst</code> instead of <code>list</code>.</span>
