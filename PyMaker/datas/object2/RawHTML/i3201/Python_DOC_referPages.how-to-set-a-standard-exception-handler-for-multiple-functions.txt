<div class="post-text" itemprop="text">
<p>Let's say I have three functions that do different things but should react to a set of exceptions in the same way. One of them might look like:</p>
<pre><code>def get_order_stat(self, Order_id):
    status_returned = False
    error_count = 0
    while status_returned == False:
        try:
            stat_get = client.queryOrder(orderId=Order_id)
        except MalformedRequest:
            print('Order ID not yet findable, keep trying')
            error_count += 1
            time.sleep(int(1))
        except InternalError:
            print('Order check returned InternalError, keep trying')
            error_count += 1
            time.sleep(int(1))
        except StatusUnknown:
            print('Order check returned StatusUnknown, keep trying')
            error_count += 1
            time.sleep(int(1))
        else:
            status = stat_get['status']
            status_returned = True
        finally:
            if error_count &gt;= 10:
                print('Error loop, give up')
                break
    return status
</code></pre>
<p>The vast majority of the code is the exception handling, and I'd like to avoid having to repeat it in every function that needs it. Is there a way to define something like an exception handling function containing the handling code? Ideally my function would end up effectively:</p>
<pre><code>def get_order_stat(self, Order_id):
    status_returned = False
    while status_returned == False:
        try:
            stat_get = client.queryOrder(orderId=Order_id)
        except:
            handler_function()
        else:
            status = stat_get['status']
            status_returned = True
    return status
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You practically already did it. Just define the handler_function() somewhere and it gets called when an Exception in the try block gets raised. </p>
<p>Maybe helpful: you can bind the Exception to a variable and use it for exception handling in the handler function:</p>
<pre><code>except Exception as e:
    handler_function(e)
</code></pre>
<p>Then you can for example do `print(e)Ì€  to give out the exception or do different handling for different exceptions in the function. Hope that helps!  </p>
<p>You also can specify several exceptions in one line if you don't want to be general, but catch all specific exceptions with one statement:</p>
<pre><code> except (ExceptionType1, ExceptionType2, ExceptionType3) as e:
     handler_function(e)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I might write a decorator function for the exception handling; for instance using <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer">functool.wraps</a>.</p>
<pre><code>from functool import wraps
def retry(f):
  @wraps(f)
  def wrapper(*args, **kwargs):
    error_count = 0
    while error_count &lt; 10:
      try:
        return f(*args, **kwargs)
      except MalformedRequest:
        print('Order ID not yet findable, keep trying')
      except InternalError:
        print('Order check returned InternalError, keep trying')
      error_count += 1
      time.sleep(int(1))
    print('Error loop, give up')
    return None
  return wrapper
</code></pre>
<p>Then you can write a very simple API call function, and wrap it with the retry wrapper:</p>
<pre><code>@retry
def get_order(order_id):
  stat_get = client.queryOrder(orderId=order_id)
  return stat_get['status']
</code></pre>
<p>In your original function, notice that you can move the contents of the <code>try</code>...<code>else</code> block into the main <code>try</code> block without affecting the logic (extracting the value from the query result won't raise one of the network-related exceptions), and then you can just return out of the <code>try</code> block instead of arranging to stop the loop.  Then the contents of the <code>try</code> block are what I've broken out here into <code>get_order()</code>.  I restructured the remaining loop a little and turned it into decorator form.</p>
</div>
<span class="comment-copy">I believe you might be looking for python decorators.</span>
<span class="comment-copy">Did either of the two ansers solve your problem?</span>
<span class="comment-copy">In that case, what happens when a different exception happens? I would think the except: would catch everything, handler_function() would deal with the expected errors, but other errors would just be ignored?</span>
<span class="comment-copy">Going by your second code example at the end: For every exception the handler_function would be called, since the except is general for all exception. They wouldn't be ignored but every exception would call that handler. You could do differential exception handling in the handler function, I edited my answer</span>
