<div class="post-text" itemprop="text">
<p>I am searching for an easy way to create enums in python with many and potentially an infinite number of members.</p>
<p>For example, this could be proven useful to enumerate countable sets or when you do not want to create enum with 10000 members, but rather create them on demand (on the fly).</p>
<p>My use case is to create an enum for the WRS-2 tiling grid, but it could be used as well for chemistry formulas for example.</p>
<hr/>
<p>I was thinking about first defining four methods: </p>
<ul>
<li>name = f1(value)</li>
<li>value = f2(name)</li>
<li>f3(value) returns if value is correct</li>
<li>f4(name) returns if name is correct</li>
</ul>
<p>Then I wanted to use some magic methods of python to plug these methods at the right place.</p>
<hr/>
<p>For example, I tried to catch the <code>__getattr__</code> call in a new metaclass, and to extend the enum using aenum package but I could not get it work.</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>I am not quite sure what is your understanding of <code>enum</code> and what properties do you want it to have, but it really looks like you are defining a function where to some <code>item</code> you associate it to a number (any number), as long as it is the same. I think this could be done relatively easily with a generator and a list like this: </p>
<pre><code>def ienum(item, items=[]):
    if item in items:
        return items.index(item)
    else:
        items.append(item)
        return items.index(item)

ienum('foo')
# 0
ienum('bar')
# 1
ienum('foo')
# 0

# etc.
</code></pre>
<p>If you want to have control over what value gets associated to the name, what you want is actually a <code>dict</code> (possibly with slightly different syntax) or a (hash?) function.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think what you're looking for is the <code>set</code> builtin class. Following the <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">tutorial within the official documentation</a> is a good place to start: </p>
<p>Sets can be created via literal syntax or via a function call:</p>
<pre><code>&gt;&gt;&gt; basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
&gt;&gt;&gt; basket = set(['apple', 'orange', 'apple', 'pear', 'orange', 'banana'])
</code></pre>
<p>They do not contain duplicates:</p>
<pre><code>&gt;&gt;&gt; print(basket)
{'orange', 'banana', 'pear', 'apple'}
</code></pre>
<p>They support very fast membership testing, which is why I think they're suited for your problem at hand:</p>
<pre><code>&gt;&gt;&gt; 'orange' in basket         
True
</code></pre>
<p>Sets can grow as large as they need to grow:</p>
<pre><code>&gt;&gt;&gt; basket.add('grape')
</code></pre>
</div>
<span class="comment-copy">Just... what property do you want your enum to have? Does <code>class MyEnum:\ndef __init__(self,name):self.name=name</code> suffice?</span>
<span class="comment-copy">Having <code>.name</code>, <code>.value</code>, accessing with parentheses (from a value) and brackets (from a name), comparison.</span>
<span class="comment-copy">I am not getting a sense of what you want -- can you define an actual <code>Enum</code> with a few members and show some examples of how you would like to use it?  And are there better names than <code>f1</code>, <code>f2</code>, etc.?</span>
