<div class="post-text" itemprop="text">
<p>Look at the following code:</p>
<pre><code>a = 3
type(a) == object
False
isinstance(a, object)
True
</code></pre>
<p>How is this to be explained?</p>
<p>Your advice will be appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a common construct in most object-oriented languages that support inheritance. When a child class (in your case <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int</code></a>) inherits from a parent (in your case <a href="https://docs.python.org/3/library/functions.html#object" rel="nofollow noreferrer"><code>object</code></a>), it is said to have an "is-a" relationship. That is, an <code>int</code> <strong>is a</strong> (or <strong>an</strong>) <code>object</code>.</p>
<p>This "is-a" relationship is what <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance</code></a> is checking. From the docs:</p>
<blockquote>
<p>Return true if the <em>object</em> argument is an instance of the <em>classinfo</em> argument, or of a (direct, indirect or virtual) subclass thereof.</p>
</blockquote>
<p>There is a similar <a href="https://docs.python.org/3/library/functions.html#issubclass" rel="nofollow noreferrer"><code>issubclass</code></a> function to check the same relationship for a class instead of an instance of that class. In fact, in most cases, <code>isinstance(x, y) == issubclass(type(x), y)</code>.</p>
<p><a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type</code></a> returns the exact class that an object was constructed from. That means that checking <code>type(3) == object</code> is exactly equivalent to checking <code>int == object</code>. Hopefully you can see that that's unambiguously false.</p>
<p>On a related tangent, classes should always be the same reference within a given run of the interpreter, so you can use <code>is</code> instead of <code>==</code> for comparison. So <code>type(3) is int</code> will be true. That's how <code>==</code> is implemented for all the types you're ever likely to come across anyway.</p>
</div>
<div class="post-text" itemprop="text">
<p>Everything is an object in Python, which includes ints, strings, functions and classes. Therefore, <code>isinstance(a, object)</code> will return you <code>True</code> . But 3 is actually an <code>integer</code>, which is a <code>sub_class</code> create from <code>object</code>. Therefore <code>type(a)</code> can equal to <code>int</code> only.</p>
<p>I can give you an example.</p>
<p>Suppose we have two classes, Sub is a sub_class of Base.</p>
<pre><code>class Base:
    def __init__(self):
        self.kappa='kappa'
class Sub(Base):
    def __init__(self):
        super().__init__()

obj=Base()
int_rino=Sub()


print(isinstance(obj,Base))
print(isinstance(obj,Sub))
print(isinstance(int_rino,Base))
print(isinstance(int_rino,Sub))


print(type(int_rino)==Base)
</code></pre>
<p>The result will be:</p>
<pre><code>True
False
True
True
False
</code></pre>
</div>
<span class="comment-copy">Object is base class. Type is metaclass.</span>
<span class="comment-copy">@Mad Physicist,deleted.</span>
<span class="comment-copy">Object is base-class. int is a sub_class from object. You can check here.<a href="https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python?rq=1" title="what are metaclasses in python">stackoverflow.com/questions/100003/â€¦</a></span>
<span class="comment-copy"><code>a</code> is of type <code>int</code>, and <code>int</code>is a subclass of <code>object</code>. When you're using <code>isinstance(object, classinfo)</code> method, you're taking subclasses into account whereas using <code>type(object)</code> method generally returns the same than : <code>object.__class__</code> attribute.</span>
<span class="comment-copy">Python's recommandation is to use <code>isinstance(object, classinfo)</code> method to test the type.</span>
<span class="comment-copy">Great answer, however do not oppose <code>class</code> and <code>instance</code> because classes are instance of Type</span>
<span class="comment-copy">@Florian. I wouldn't say that I'm opposing instances and types. Of course you're right that all classes are an instance of their metaclass (which doesn't have to be <code>type</code> or even inherit from it). However, I feel that this is a level of pedantic detail OP does not need and possibly can't handle at the moment. Also, keep in mind that functions like <code>issubclass</code> and <code>isinstance</code> <i>require</i> a class or tuple of classes for their second argument. So classes, regardless of metaclass, do have a special purpose here.</span>
<span class="comment-copy">@Florian. What I'm really trying to say is "upvote if you like" :)</span>
<span class="comment-copy">I've edited in a couple of words of clarification</span>
<span class="comment-copy">I had already upvoted, and with the edit, it's perfectly clear and accurate :)  I was not accurate, classes are instance of <code>Type</code> <b>by default</b>, but it's <b>not necessarily true</b>. (for example : in most API using metaclasses as factory pattern)</span>
<span class="comment-copy">based on your terminology I'm guessing that you're confusing baseclass and metaclass</span>
<span class="comment-copy">@ Mad Physicis, is it right now? sir.</span>
<span class="comment-copy">Much better. I feel like I wrote that exact line "everything is an object in python" earlier today with the exact same emphasis. I'd recommend removing the superfluous comma.</span>
<span class="comment-copy">@ Mad Physicis, ok, sir.</span>
<span class="comment-copy">My mistake. My phrasing was <i>slightly</i> different: <a href="https://stackoverflow.com/a/51317646/2988730">stackoverflow.com/a/51317646/2988730</a> :)</span>
