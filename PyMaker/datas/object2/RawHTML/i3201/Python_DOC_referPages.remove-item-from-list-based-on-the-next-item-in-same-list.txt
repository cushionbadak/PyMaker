<div class="post-text" itemprop="text">
<p>I just started learning python and here I have a sorted list of protein sequences (total 59,000 sequences) and some of them overlap. I have made a toy list here for example:</p>
<pre><code>ABCDE
ABCDEFG
ABCDEFGH
ABCDEFGHIJKLMNO
CEST
DBTSFDE
DBTSFDEO
EOEUDNBNUW
EOEUDNBNUWD
EAEUDNBNUW
FEOEUDNBNUW
FG
FGH
</code></pre>
<p>I would like to remove those shorter overlap and just keep the longest one so the desired output would look like this:</p>
<pre><code>ABCDEFGHIJKLMNO
CEST
DBTSFDEO
EAEUDNBNUW
FEOEUDNBNUWD
FGH
</code></pre>
<p>How can I do it? My code looks like this:</p>
<pre><code>with open('toy.txt' ,'r') as f:
    pattern = f.read().splitlines()
    print pattern

    for i in range(0, len(pattern)):
        if pattern[i] in pattern[i+1]:
            pattern.remove(pattern[i])
        print pattern
</code></pre>
<p>And I got the error message:</p>
<pre><code>['ABCDE', 'ABCDEFG', 'ABCDEFGH', 'ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDE', 'DBTSFDEO', 'EOEUDNBNUW', 'EAEUDNBNUW', 'FG', 'FGH']
['ABCDEFG', 'ABCDEFGH', 'ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDE', 'DBTSFDEO', 'EOEUDNBNUW', 'EAEUDNBNUW', 'FG', 'FGH']
['ABCDEFG', 'ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDE', 'DBTSFDEO', 'EOEUDNBNUW', 'EAEUDNBNUW', 'FG', 'FGH']
['ABCDEFG', 'ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDE', 'DBTSFDEO', 'EOEUDNBNUW', 'EAEUDNBNUW', 'FG', 'FGH']
['ABCDEFG', 'ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDEO', 'EOEUDNBNUW', 'EAEUDNBNUW', 'FG', 'FGH']
['ABCDEFG', 'ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDEO', 'EOEUDNBNUW', 'EAEUDNBNUW', 'FG', 'FGH']
['ABCDEFG', 'ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDEO', 'EOEUDNBNUW', 'EAEUDNBNUW', 'FG', 'FGH']
['ABCDEFG', 'ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDEO', 'EOEUDNBNUW', 'EAEUDNBNUW', 'FGH']
Traceback (most recent call last):
  File "test.py", line 8, in &lt;module&gt;
    if pattern[i] in pattern[i+1]:
IndexError: list index out of range
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is other working answers, but none of them explain your actual problem. you were actually really close of a valid solution and what is, in my opinion, the most readable answer.</p>
<p>The error came from the fact that you were <strong>mutating the same list while checking for index using <code>range()</code>.</strong></p>
<p>Thus, while increasing the <code>i</code> variable you were removing item from the list which at one point causes the <code>index error</code> inevitably. </p>
<p>Therefore, here is a working version of your initial code with some changes, </p>
<pre><code>pattern = ["ABCDE","ABCDEFG","ABCDEFGH","ABCDEFGHIJKLMNO","CEST","DBTSFDE","DBTSFDEO","EOEUDNBNUW","EAEUDNBNUW","FG","FGH"]
output_pattern = []


for i in range(0, (len(pattern)-1)):
    if not pattern[i] in pattern[i+1]:
        output_pattern.append(pattern[i]) 

# Adding the last item
output_pattern.append(pattern[-1])   
print (output_pattern)

&gt;&gt;&gt;&gt; ['ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDEO', 'EOEUDNBNUW', 'EAEUDNBNUW', 'FGH']    
</code></pre>
<p>Note that this code will work if your list is previously sorted as you mentioned in comment section.</p>
<p><strong>What is this code doing ?</strong></p>
<p>Basically, it use the same logic of your initial answer where it iterates on the list and check if the next item contains the current item. But, using another list and iterating until the <em>before last</em> item, will fix your index problem. But now comes a question, </p>
<p><em>What should I do with the last item ?</em> </p>
<p>Since the list is sorted, <strong>you can consider the last item as always being unique</strong>. This is why I'm using </p>
<pre><code>output_pattern.append(pattern[-1])
</code></pre>
<p>which adds the last item of the initial list. </p>
<p><strong>Important note</strong></p>
<p>This answer was written in response to OP's initial question where he wanted to keep the longer overlap and I quote <em>based on the next item in same list</em>. As stated by @Chris_Rands if your concerns are related to a biological task and need to find <strong>any</strong> overlap, this solution is not suited for your needs. </p>
<p>Example where this code would fail to recognize a potential overlap,</p>
<pre><code>pattern = ["ACD", "AD", "BACD"]
</code></pre>
<p>where it would output the same result without removing the possible <code>"ACD"</code> overlap. Now, just as a clarification though, <strong>this would imply a much more complex algorithm</strong> and I initially thought it was out of the scope of the question's requirements. If ever this is your case, I may be completely wrong here, but I truly think a C++ implementation seems more appropriate. have a look at the CD-Hit algorithm suggested by @Chris_Rands in the comment section.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html?highlight=groupby#itertools.groupby" rel="noreferrer"><code>groupby()</code></a> and <code>max()</code> to help here:</p>
<pre><code>from itertools import groupby

with open('toy.txt') as f_input:
    for key, group in groupby(f_input, lambda x: x[:2]):
        print(max(group, key=lambda x: len(x)).strip())
</code></pre>
<p>This would display:</p>
<pre><code>ABCDEFGHIJKLMNO
CEST
DBTSFDEO
EOEUDNBNUW
EAEUDNBNUW
FGH
</code></pre>
<p><code>groupby()</code> works by returning a list of matching items based on a function, in this case consecutive lines with the same first 2 characters. The <code>max()</code> function then takes this list and returns the list item with the longest length.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code># assuming list is sorted:
pattern = ["ABCDE",
"ABCDEFG",
"ABCDEFGH",
"ABCDEFGHIJKLMNO",
"CEST",
"DBTSFDE",
"DBTSFDEO",
"EOEUDNBNUW",
"EAEUDNBNUW",
"FG",
"FGH"]

pattern = list(reversed(pattern))

def iterate_patterns():
    while pattern:
        i = pattern.pop()
        throw_it_away = False
        for p in pattern:
            if p.startswith(i):
                throw_it_away = True
                break
        if throw_it_away == False:
            yield i

print(list(iterate_patterns()))
</code></pre>
<p>Output:</p>
<blockquote>
<p>['ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDEO', 'EOEUDNBNUW', 'EAEUDNBNUW',
  'FGH']</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open('demo.txt') as f:
    lines = f.readlines()

l_lines = len(lines)

n_lst = []

for i, line in enumerate(lines):
    line = line.strip()
    if i == l_lines - 1:
        if lines[-2] not in line:
            n_lst.append(line)
        break
    if line not in lines[i + 1]:
        n_lst.append(line)

print(n_lst)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDEO', 'EOEUDNBNUW', 'EAEUDNBNUW', 'FGH']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a binary tree whose insertion process attempts to find nodes that precede the value:</p>
<pre><code>class Tree:
  def __init__(self, val=None):
    self.left, self.value, self.right = None, val, None
  def insert_val(self, _val):
    if self.value is None or _val.startswith(self.value):
       self.value = _val
    else:
       if _val &lt; self.value:
          getattr(self.left, 'insert_val', lambda x:setattr(self, 'left', Tree(x)))(_val)
       else:
          getattr(self.right, 'insert_val', lambda x:setattr(self, 'right', Tree(x)))(_val)
  def flatten(self):
     return [*getattr(self.left, 'flatten', lambda :[])(), self.value, *getattr(self.right, 'flatten', lambda :[])()]

t = Tree()
for i in open('filename.txt'):
  t.insert_val(i.strip('\n'))
print(t.flatten())
</code></pre>
<p>Output:</p>
<pre><code>['ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDEO', 'EAEUDNBNUW', 'EOEUDNBNUW', 'FGH']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will get you where you want to be:</p>
<pre><code>with open('toy.txt' ,'r') as f:
    lines = f.readlines()
    data = set(lines)
    print(sorted([i for i in lines if len([j for j in data if j.startswith(i)])==1]))

#['ABCDEFGHIJKLMNO', 'CEST', 'DBTSFDEO', 'EAEUDNBNUW', 'EOEUDNBNUW', 'FGH']
</code></pre>
<p>I've added <code>set</code> just in case of multiple occurrences of same text.</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way is to process the input file one line at a time, compare each line with the previous one and keep <em>previous</em> one if it is not contained in current one.</p>
<p>Code can be as simple as:</p>
<pre><code>with open('toy.txt' ,'r') as f:
    old = next(f).strip()               # keep first line after stripping EOL 

    for pattern in f:
        pattern = pattern.strip()       # strip end of line...
        if old not in pattern:
            print old                   # keep old if it is not contained in current line
        old = pattern                   # and store current line for next iteration
    print old                           # do not forget last line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not an exact match with your expectations, but, given that you state it's sorted (and it's not, near <code>EOEUDNBNUWD EAEUDNBNUW</code>) and that I don't know why you're missing <code>EOEUDNBNUWD</code> I am not sure if your expectations are correctly stated or if I've misread your question.</p>
<p><em>(ah, yes, I see the notion of <strong>overlap</strong> throws a wrench into the <code>sort</code> and <code>startswith</code> approach).</em></p>
<p><em>Might be nice for the OP to restate that particular aspect, I read @DSM comment without really understanding his concern.  Now I do.</em></p>
<pre><code>li = sorted([i.strip() for i in """
ABCDE
ABCDEFG
ABCDEFGH
ABCDEFGHIJKLMNO
CEST
DBTSFDE
DBTSFDEO
EOEUDNBNUW
EOEUDNBNUWD
EAEUDNBNUW
FEOEUDNBNUW
FG
FGH""".splitlines() if i.strip()])

def get_iter(li):
    prev = ""
    for i in li:
        if not i.startswith(prev):
            yield(prev)
        prev = i
    yield prev

for v in get_iter(li):
    print(v)
</code></pre>
<p>output:</p>
<pre><code>ABCDEFGHIJKLMNO
CEST
DBTSFDEO
EAEUDNBNUW
EOEUDNBNUWD
FEOEUDNBNUW
FGH
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Kenny,
You almost got it, but there are two problems which @scharette pointed out:</p>
<ol>
<li><code>for</code> loop and removing of list item should not go together. The fix is to use the <code>while</code> loop and explicitly increase the index. The <code>while</code> loop is less efficient because it calls <code>len()</code> several times instead once, but that's what it take to get the correct result.</li>
<li>The <code>IndexError</code>. This only happens at the very last line. My way to deal with this problem is to ignore the error.</li>
</ol>
<p>With that, I modified your code to:</p>
<pre><code>with open('toy.txt' ,'r') as f:
    pattern = f.read().splitlines()
    print pattern

    try:
        i = 0
        while i &lt; len(pattern):
            if pattern[i] in pattern[i+1]:
                pattern.remove(pattern[i])
            print pattern
            i += 1
    except IndexError:
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Code</strong></p>
<pre><code>import collections as ct


def read_file(filepath):
    """Yield a generator of lines from a file."""
    with open(filepath, "r") as f:
        for line in f:
            yield line.strip()


def find_longest_sequences(seqs):
    """Return a dict of the long common sequences."""
    seqs = tuple(seqs) 
    dd = ct.defaultdict(list)
    [dd[k].append(seq) for seq in seqs for k in seqs if k in seq]
    return {max(v, key=len) for v in dd.values()}


data = read_file("test.txt")
find_longest_sequences(data)
</code></pre>
<p>Output</p>
<pre><code>{'ABCDEFGHIJKLMNO',
 'CEST',
 'DBTSFDEO',
 'EAEUDNBNUW',
 'EOEUDNBNUWD',
 'FEOEUDNBNUW'}
</code></pre>
<hr/>
<p><strong>Details</strong></p>
<p>We use <code>read_file</code> to yield each line of the file.</p>
<p><code>find_longest_sequences</code> builds a <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">defaultdict</a> that groups similar sequences together.  It iterates the data with two loops:  </p>
<ol>
<li>The first loop builds a dict of empty lists with unique sequences as keys.  </li>
<li>The second loop appends as values any strings that are similar to the key.  </li>
</ol>
<p>A set of the values is made of the resulting dict, and the longest sequences are returned.</p>
<p>Note some discrepancies with your expected output:</p>
<ol>
<li><code>FGH</code> overlaps with <code>ABCDEFGHIJKLMNO</code> and is thus not a valid output.</li>
<li><code>FEOEUDNBNUWD</code> is not an original sequence.  Post-processing is needed for overlapping sequences.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>As stated in other answers, your error comes from calculating the length of your input at the start and then not updating it as you shorten the list.</p>
<p>Here's another take at a working solution:</p>
<pre><code>with open('toy.txt', 'r') as infile:
    input_lines = reversed(map(lambda s: s.strip(), infile.readlines()))

output = []
for pattern in input_lines:
    if len(output) == 0 or not output[-1].startswith(pattern):        
        output.append(pattern)

print('\n'.join(reversed(output)))
</code></pre>
</div>
<span class="comment-copy">what troubles do you have?</span>
<span class="comment-copy">Do the proteins always start the same or they may overlap elsewhere? Is your file sorted? These assumptions could lead to a more efficient solution if they are true</span>
<span class="comment-copy">@Kenny: okay, that's trickier, because then your sort won't put ABCD and EABCD next to each other, so I think some of the answers won't help much.</span>
<span class="comment-copy">@DSM I agree with you. Considering OP did not mention that though I think the question (and answers) stays valid and really interesting. Unfortunately it won't apply to his specific problem, but will most likely apply to futur users.</span>
<span class="comment-copy">@Kenny Now that I think about it. i'm not sure if you understand what we mean. In the case you would have "ABCD" and "DCBA", which one would you keep ? because you want the shorter version but these two are the same length ? So, would you keep both ?</span>
<span class="comment-copy">It's not fully appropriate, because e.g. 'abcd' in 'babcd' -&gt; True but they are different.</span>
<span class="comment-copy">@Rob No. This is what OP wanted. The question was to keep the biggest overlap if it <i>contains</i> the next one. Therefore, considering <code>"ABCD"</code> and <code>"BABCD"</code> the code should keep the former. This is what it is doing.</span>
<span class="comment-copy">You can't only consider <code>i+1</code>, for example this fails for <code>pattern = ['ACD', 'AD', 'BACD']</code></span>
<span class="comment-copy">@chris_rands Please read the question's comments section. I've discussed this issue with OP. His initial question was to base his search and I quote <i>on the next item of the list</i>. Therefore, this is what I did. He kept on changing the requirements, so I decided to keep the original state of the question which people up-voted.</span>
<span class="comment-copy">@Chris_Rands I understand your concern. I'll add a note for future users.</span>
<span class="comment-copy">They do not want to merely group on the first 2 characters, they want to group based on one string containing another</span>
