<div class="post-text" itemprop="text">
<p>The most <a href="https://docs.python.org/3/library/urllib.parse.html#module-urllib.parse" rel="noreferrer">recent documentation for <code>urllib</code></a> states:</p>
<blockquote>
<p>Changed in version 3.7: Moved from RFC 2396 to RFC 3986 for quoting URL strings. “~” is now included in the set of reserved characters.</p>
</blockquote>
<p>Why is this the case? In <a href="https://tools.ietf.org/html/rfc2396.html" rel="noreferrer">RFC 3986</a>, <code>~</code> is not a reserved character:</p>
<blockquote>
<pre><code> reserved    = gen-delims / sub-delims

 gen-delims  = ":" / "/" / "?" / "#" / "[" / "]" / "@"

 sub-delims  = "!" / "$" / "&amp;" / "'" / "(" / ")"
             / "*" / "+" / "," / ";" / "="
</code></pre>
</blockquote>
<p>Explicitly in <a href="https://tools.ietf.org/html/rfc2396.html#section-2.3" rel="noreferrer">the next section</a> it is included as an unreserved character:</p>
<blockquote>
<p>2.3.  Unreserved Characters</p>
<p>Characters that are allowed in a URI but do not have a reserved
    purpose are called unreserved.  These include uppercase and lowercase
    letters, decimal digits, hyphen, period, underscore, and tilde.</p>
<pre><code> unreserved  = ALPHA / DIGIT / "-" / "." / "_" / "~"
</code></pre>
</blockquote>
<p>Furthermore, <a href="https://tools.ietf.org/html/rfc3986.html#section-2.4" rel="noreferrer">later on</a>, the RFC states that (emphasis mine):</p>
<blockquote>
<p>For example, the octet corresponding to the tilde ("~") character is often encoded as "%7E" by <strong>older</strong> URI processing implementations;</p>
</blockquote>
<p>So it seems like 3.7 is inconsistent: it asserts the support for the newer RFC while simultaneously regressing the processing of <code>~</code>. (In fact, in the <a href="https://tools.ietf.org/html/rfc2396.html#section-2.2" rel="noreferrer">older RFC</a>, <code>~</code> is also not reserved nor '<a href="https://tools.ietf.org/html/rfc2396.html#section-2.4.3" rel="noreferrer">unwise</a>')</p>
</div>
<div class="post-text" itemprop="text">
<p>This bug was tracked and closed in <a href="https://bugs.python.org/issue16285" rel="nofollow noreferrer">https://bugs.python.org/issue16285</a></p>
<p>And indeed, the most recent version of the code reflects the changes. </p>
<p>Ref <a href="https://github.com/python/cpython/blob/master/Lib/urllib/parse.py" rel="nofollow noreferrer">https://github.com/python/cpython/blob/master/Lib/urllib/parse.py</a> </p>
<pre><code>_ALWAYS_SAFE = frozenset(b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                     b'abcdefghijklmnopqrstuvwxyz'
                     b'0123456789'
                     b'_.-~')
</code></pre>
</div>
<span class="comment-copy"><code>urllib.parse.quote('~')</code> does in fact yield <code>'~'</code> instead of <code>%7E</code>, so it's definitely not reserved. However, <code>urllib.parse.quote('ñ')</code> yields <code>'%C3%B1'</code></span>
<span class="comment-copy"><a href="https://github.com/python/cpython/blob/3.7/Lib/urllib/parse.py#L755-L756" rel="nofollow noreferrer">github.com/python/cpython/blob/3.7/Lib/urllib/…</a> has <code>reserved    = ";" | "/" | "?" | ":" | "@" | "&amp;" | "=" | "+" | "$" | "," | "~"</code>, but there is no detailed explanation.</span>
<span class="comment-copy">It looks like someone misread the but report in <a href="https://bugs.python.org/issue16285" rel="nofollow noreferrer">#16285</a>. The author was asking for <code>~</code> to be added to an explicit list of safe characters like <code>-</code> and <code>_</code>, so <code>quote('/~connolly')</code> would stop yielding <code>'/%7econnolly/'</code>. But it got added to the list of reserved characters instead of to a list of safe characters. (Although the ultimate problem ended up fixed anyway, somehow?)</span>
<span class="comment-copy">so it's just the documentation that's wrong?</span>
<span class="comment-copy">No the documentation representers the intended functionality - which is that <code>~</code> should not be encoded. However, the code was incorrect and has now been fixed. So the latest code <i>does indeed</i> follow RFC 3986, just as the documentation says it does.</span>
<span class="comment-copy">huh? The documentation says "~" is reserved, when it should not be, as demonstrated by the RFC and the code.</span>
<span class="comment-copy">You're right. My bad - sorry.</span>
