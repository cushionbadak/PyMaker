<div class="post-text" itemprop="text">
<p>I have two classes: Vehicle() and Route_plan() as follows:</p>
<pre><code>class Vehicle():
def __init__(self,unique_id):
    self.capacity = 9000
    self.unique_id = unique_id
    self.routes = []

class Plan():
    def assignment(self):
        # create a vehicle as 'this_vehicle' with id = 0 from class Vehicle()
        this_vehicle = Vehicle(0)
        this_vehicle.routes.append(5)
        this_vehicle.routes.append(8)

#run the route_plan process to assgin the specfic routes to vehicle 0
Plan().assignment()

output: [5,8]
</code></pre>
<p>Now, I have another drawing function to try to plot the routes of each vehicle (in this case the vehicle 0):</p>
<pre><code>def Draw():
    # if I have 10 vehicles (with id = 0,1,....9), how do I access them and their updated routes? 
    # Is there a simple way to update the vehicle's own variable (routes) directly using the vehicle ID and have it being flexibly called by any other classes and functions?
    # plotting process
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have assignment(self) return this_vehicle, then use Plan().assignment() within Draw().</p>
<p>Eg:</p>
<pre><code>class Plan():
    def assignment(self):
        # create a vehicle as 'this_vehicle' with id = 0 from class Vehicle()
        this_vehicle = Vehicle(0)
        this_vehicle.routes.append(5)
        this_vehicle.routes.append(8)

        return this_vehicle

def Draw():
    vehicle0 = Plan().assignment()
    # whatever else you want to do
</code></pre>
<p>Alternatively, store the vehicle within the Plan class.</p>
<pre><code>class Plan():
    def assignment(self):
        # create a vehicle as 'this_vehicle' with id = 0 from class Vehicle()
        self.this_vehicle = Vehicle(0)
        self.this_vehicle.routes.append(5)
        self.this_vehicle.routes.append(8)

def Draw():
    route_plan = Plan()
    route_plan.assignment()
    # route_plan.this_vehicle now holds vehicle0
    # whatever else you want to do
</code></pre>
<p>Multiple Vehicles:
For this, you'll have to restructure Plan a little, although i feel this is getting a little messy, a dictionary is probably best here.</p>
<pre><code>class Plan():
    def __init__(self):
        self.vehicles = dict()

    def assignment(self, id):
        # create a vehicle as 'this_vehicle' with id = 0 from class Vehicle()
        self.vehicles[id] = Vehicle(id)
        self.vehicles[id].routes.append(5)
        self.vehicles[id].routes.append(8)

def Draw():
    route_plan = Plan()
    route_plan.assignment(0)

    # route_plan.vehicles[0] now holds vehicle0
    # whatever else you want to do
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>class Vehicle(object):
    def __init__(self,unique_id):
        self.capacity = 9000
        self.unique_id = unique_id
        self.routes = []

class Plan(object):

    @staticmethod
    def assignment():
        # create a vehicle as 'this_vehicle' with id = 0 from class Vehicle()
        this_vehicle = Vehicle(0)
        this_vehicle.routes.append(5)
        this_vehicle.routes.append(8)

        return this_vehicle
# This list will save all of objects created by vehicle class and you can
# change their attributes when ever you want 
vehicles_list = []
def Draw():
    vehicle = Plan.assignment()
    vehicles_list.append(vehicle)
    # now you have Your routes and you can complete Your plotting code
    # for example now you can change first vehicle routes  in this way:
    # vehicles_list[0].routes[0] = 6
</code></pre>
</div>
<span class="comment-copy">At the moment you don't assign the <code>Plan</code> instance to anything or store the <code>Vehicle</code> beyond a local variable within the method, so: you <b>can't</b> get access to it.</span>
<span class="comment-copy">Call <code>Plan().assignment()</code> in <code>Draw()</code> function</span>
<span class="comment-copy">could you give an example for storing the Vehicle in Plan class?</span>
<span class="comment-copy">@ThatBird even then <code>assignment</code> doesn't actually <i>return</i> the <code>Vehicle</code> instance, so it won't be accessible outside the method.</span>
<span class="comment-copy">I'd recommend reading basic tutorials on OOP in Python, e.g. <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/classes.html</a>.</span>
<span class="comment-copy">if I have 10 vehicles (with id = 0,1,....9), how do I access them and their updated routes?</span>
<span class="comment-copy">Updated answer, although this is getting a little messy, since you're now holding the id in two separate places, but there's no other logical way to do it nicely here.</span>
<span class="comment-copy">unfortunately it's not working. report 'NameError: name 'self' is not defined'. Even when I add a constructor for self.vehicles = dict() the output shows 'None'</span>
<span class="comment-copy">My bad, did a dumb thing, that should have been created within the <b>init</b> function (edited answer again).</span>
<span class="comment-copy">after running the Draw() and print(Vehicle(0).routes), I still get empty list for Vehicle 0</span>
<span class="comment-copy">If You have for example 10 vehicles You have to save them in different variables when they are returning by assignment function, if You don't assign them to any variable it's not possible to use and manipulate then</span>
<span class="comment-copy">you mean creating new variables in class plan() to store each unique vehicle?(that seems to be duplication work for me) Is there a simple way to update the vehicle's own variable (routes) and have it being called by any other classes and functions?</span>
<span class="comment-copy">No i mean declare some thing like a list in main body of Your code ( outside of classes and functions) and append all of vehicle objects there then manipulate them whenever you want. see my updated answer</span>
<span class="comment-copy">that's what I did before and i but I dont like this method. Cannot understand why we cannot easily pull out the attributes from a object once it is created (no matter where it is created and updated)</span>
<span class="comment-copy">Ok maybe you need to study object oriented programming, it seems You're not familiar with it enough, be lucky !</span>
