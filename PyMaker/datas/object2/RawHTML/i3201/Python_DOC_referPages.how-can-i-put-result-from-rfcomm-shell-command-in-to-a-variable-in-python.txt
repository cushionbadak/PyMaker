<div class="post-text" itemprop="text">
<p>I am using this script in python in order to connect to a Bluetooth device and then get data, but I want to know the result of this shell command in order to do next works</p>
<pre><code>import os
import time
import signal
import subprocess


p = subprocess.Popen("sudo rfcomm connect /dev/rfcomm0 XX:XX:XX:XX:XX:XX 1",shell=True)
(stderr,stdout) = p.communicate()
print 'stderr: [%s]' % stderr
print 'stdout: [%s]' % stdout
time.sleep(5)
while True:
     print "Device is ready"
     time.sleep(5)
</code></pre>
<p>this code is a sample when I run the command:</p>
<pre><code>"sudo rfcomm connect /dev/rfcomm0 XX:XX:XX:XX:XX:XX 1" 
</code></pre>
<p>in shell, it returns: </p>
<pre><code>Connected /dev/rfcomm0 to XX:XX:XX:XX:XX:XX on channel 1
Press CTRL-C for hangup
</code></pre>
<p>but how can I put above result in a variable, because I need to know the result of this command?
I use stdout, stderr in subprocess but does not work.
I am using python 2.7</p>
<p><a href="https://stackoverflow.com/questions/14457303/python-subprocess-and-user-interaction">Python subprocess and user interaction</a></p>
<p>above <a href="https://stackoverflow.com/questions/14457303/python-subprocess-and-user-interaction">link</a> talk about getting output in a variable in general, but the problem in my question related to rfcomm, which does not put its result in variable, I run those script and they works well, but it does not works when it used with rfcomm command</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using <strong>Python 3.5 or higher</strong>,
you can use <a href="https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module" rel="nofollow noreferrer"><code>run</code></a> instead. That way you'll have access directly like so, </p>
<pre><code>result = subprocess.run(["sudo rfcomm connect /dev/rfcomm0 XX:XX:XX:XX:XX:XX 1"], stdout=subprocess.PIPE)
</code></pre>
<p>Then access what you want like this, </p>
<pre><code>result.stdout
</code></pre>
<p>If ever you use <strong>Python 2.7</strong>, as suggested by documentation I linked, they redirect you to the <a href="https://docs.python.org/3/library/subprocess.html#older-high-level-api" rel="nofollow noreferrer">Older high-level API</a> section. 
From there you'll notice that you could use <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>check_output</code></a></p>
<pre><code>result = subprocess.check_output(["sudo rfcomm connect /dev/rfcomm0 XX:XX:XX:XX:XX:XX 1"])
</code></pre>
<p>Note, <strong>if ever you want to catch error</strong> also use the <code>stderr=subprocess.STDOUT</code> flag.</p>
<pre><code>result = subprocess.check_output("sudo rfcomm connect /dev/rfcomm0 XX:XX:XX:XX:XX:XX 1", stderr=subprocess.STDOUT, shell=True)
</code></pre>
<p>Lasty, there is an important not you should be aware,</p>
<blockquote>
<p>By default, this function will return the data as encoded bytes. The actual encoding of the output data may depend on the command being invoked, so the decoding to text will often need to be handled at the application level.</p>
</blockquote>
<p><strong>EDIT</strong></p>
<p>Since your goal seems to get output while running. Take a look at this <a href="https://stackoverflow.com/a/4417735/7692463">answer</a>. I prefer linking instead of re-inventing the wheel. </p>
</div>
<div class="post-text" itemprop="text">
<p>You may need to issue the CTRL+C command before the data is returned.</p>
<p>Send a signal and catch the exception to deal with what is returned.</p>
<pre><code>import os
import time
import signal
import subprocess


stream = []
try:
    p = subprocess.Popen("sudo rfcomm connect /dev/rfcomm0 XX:XX:XX:XX:XX:XX 1",shell=True)
    #(stderr, stdout) = p.communicate()

    #print 'stderr: [%s]' % stderr
    #print 'stdout: [%s]' % stdout
    #time.sleep(5)
    #print "Device is ready"

    time.sleep(5)

    os.kill(p.pid, signal.CTRL_C_EVENT)
    p.wait()

except KeyboardInterrupt:                
#except Exception: 
    for line in p.stdout: #May also be p.stderr
        stream.append(line)                         

    for x in stream:                    
        print(x)
</code></pre>
</div>
<span class="comment-copy">What is the desired result? you want <code>Connected /dev/rfcomm0 to XX:XX:XX:XX:XX:XX on channel 1</code> to be a variable?</span>
<span class="comment-copy">yes, I need to put this result or any result, for example, error results put in a variable</span>
<span class="comment-copy">you can just do <code>my_Variable = stdout</code></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/14457303/python-subprocess-and-user-interaction">Python subprocess and user interaction</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/4417546/constantly-print-subprocess-output-while-process-is-running" title="constantly print subprocess output while process is running">stackoverflow.com/questions/4417546/â€¦</a></span>
<span class="comment-copy">actually, I am using python 2.7</span>
<span class="comment-copy">@Ali Ok will edit.</span>
<span class="comment-copy"><code>run</code> and <code>check_output</code> will only finish when <code>rfcomm</code> finishes. My impression is that the OP wants the process to remain running and interact with it.</span>
<span class="comment-copy">@tripleee Yea I see now. Thank you for insight. i linked a solution in my edit.</span>
<span class="comment-copy">Indeed, but the proper way to do that is to nominate this question as a duplicate.</span>
<span class="comment-copy">I run your code, but with this script, it waits after "Connected /dev/rfcomm0 to 00:13:EF:C0:01:79 on channel 1 Press CTRL-C for hangup " and does not go to "Device is ready" command and others.</span>
<span class="comment-copy">did you take out the <code>while</code> loop?</span>
<span class="comment-copy">I exactly run your code and it after runs the "p = subprocess.Popen("sudo rfcomm connect /dev/rfcomm0 XX:XX:XX:XX:XX:XX 1",shell=True)" it returns Connected /dev/rfcomm0 to 00:13:EF:C0:01:79 on channel 1 Press CTRL-C for hangup " and waits for infinite</span>
<span class="comment-copy">what happens if you take out the line <code>p.wait()</code>?</span>
<span class="comment-copy">I took out that line and not happened. same as before</span>
