<div class="post-text" itemprop="text">
<pre><code>import random
b=[]
o=[]
v=0
g=2
y=0
V=0
q=0
compat=0
alex=[]
zach=[]
while v != 5:
    name="name"
    position="position"
    answers=[]
    for i in range(10):
        answer=random.randint(1,4)
        answers.append(answer)
    b.append(name)
    b.append(position)
    b.append(answers)
    v+=1
print(b)
for ii in range(0,5):
    t=b[g]
    o.append(t)
    g+=3
    l=len(o)
for iii in list(o):
    C = o[y]
    y = y + 1
    alex = []
    for iiii in range(5):
        I = 0
        compat=0
        R=o[q]
        V=0
        Y = C[V]
        for iiiii in range(10):
            r=R[I]
            if r == Y:
                compat+=1
            else:
                compat=compat
            I+=1
            V += 1
            print(compat)
        alex.append(compat)
        print(alex)
    zach.append(alex)
    q+=1
w=len(zach)
print(zach)
print(w)
</code></pre>
<p>this is my code and it works pretty well. but it should put every single value against every other one but it doesnt it just put the same Y value and does not change. i have put v+=1 in tons of different places and moved around the a couple variable but it doesnt change. there should be 25 different answers for 5 people but it doesnt it just prints the same number 5 times then restarts.
any help would be appreciared
Edit: this is what i will intergrat the code above into</p>
<pre><code>global compatability
import sqlite3
with sqlite3.connect("Questionare.db") as db:
    cursor = db.cursor()
class mentee:           # these classes are made to create a place where atributes can be filled with variables
    def __init__(self,mentee_name,mentee_position):
        self._mentee_posisition=mentee_position
        self._mentee_name=mentee_name
    def menteereport(self):
        return{"mentee name:":self._mentee_name,"mentee position":self._mentee_posisition}
class mentor:
    def __init__(self,mentor_name,mentor_position):
        self._mentor_position=mentor_position
        self._mentor_name=mentor_name
    def mentorreport(self):        # these are methods and they use a function with the variables instanciated within the class to make this appen
        return {"mentor name":self._mentor_name,"mentor position":self._mentor_position}
class calculation:
    def __init__(self,number_of_questions,compatability,mentoranswers,menteeanwers):
        self._question_number= 1
        self._number_of_questions=number_of_questions
        self._compatability=compatability
        self._mentor_values=mentoranswers
        self._mentee_values=menteeanwers
    def calc(self):
        compat=0
        c=0
        for i in range(0,self._number_of_questions):
            if self._mentee_values[c] == self._mentor_answers[c]:
                compat += 1
                c+=1
            else:
                compat += 0
                c+=0
        compatability=compat/self._number_of_questions
        self._compatability=compatability
        compatability=compatability*100
        print(self._mentee_answers)
        print(self._mentor_answers)
        print("\n{:0.2f}%.\n".format(compatability))
    def mentoranswer(self):
        self._number_of_questions = int(self._number_of_questions)
        self._question_number=1
        for i in range(0,self._number_of_questions):
            answer=input("Q{}".format(self._question_number))
            self._question_number+=1
            self._mentor_answers.append(answer)
    def menteeanswer(self):
        self._number_of_questions = int(self._number_of_questions)
        self._question_number=1
        for i in range(0,self._number_of_questions):
            answer=input("Q{}".format(self._question_number))
            self._question_number+=1
            self._mentee_answers.append(answer)
class timerequirements:
    def __init__(self,mentor_time_allotment,mentee_time_allotment,ideal_length_of_mentoring,ideal_length_of_being_mentored):
        self._mentor_time_allotment=mentor_time_allotment
        self._mentee_time_allotment=mentee_time_allotment
        self._ideal_length_of_mentoring=ideal_length_of_mentoring
        self._ideal_length_of_being_mentored=ideal_length_of_being_mentored
def main(): # this function is created to put the variables into the artibutes so that everything will work.
    v = True
    mentoranswers = []
    menteeanswers = []
    no_of_q = int(input("numebr of questions"))
    while v == True:
        morm = input("are your a mentor or a mentee")
        if morm.lower() == "mentor":
            name = input("name")
            position = input("position")
            answers = []
            for i in range(0, no_of_q):
                answer = int(input("1 or 2"))
                answers.append(answer)
            mentoranswers.append(name)
            mentoranswers.append(position)
            mentoranswers.append(answers)
            print(mentoranswers)
        elif morm.lower() == "mentee":
            name = input("name")
            position = input("position")
            answers = []
            for i in range(0, no_of_q):
                answer = int(input("1 or 2"))
                answers.append(answer)
            menteeanswers.append(name)
            mentoranswers.append(position)
            menteeanswers.append(answers)
            print(menteeanswers)
        elif morm.lower() == "q":
            v = False
        else:
            print("try again")
    print(mentoranswers.mentorreport())
    print(menteeanswers.menteereport())
main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you are adding way too much noise.</p>
<pre><code>for iii in list(o):
    C = o[y]
    y = y + 1
</code></pre>
<p>why don't you simply use the variable you just created? it will be incremented automatically</p>
<pre><code>for iii in list(o):
    C = o[iii]
</code></pre>
<p>you should learn how to use a loop and a few other basics. there are <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">good tutorials</a> on the official python site. here the <a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">for-loop one</a>. most of your variables exist just to repeat what you are already doing.</p>
<p>i've avoided some high-level constructs, but i left zip. </p>
<pre><code>import random

mentees = []
names = ['zach', 'alex', 'fred', 'jane', 'sara']

for name in names:
    mentee = dict()
    mentee['name'] = name
    mentee['compatibility'] = []
    answers = []
    for i in range(10):
        answers.append(random.randint(1,4))
    mentee['answers'] = answers
    mentees.append(mentee)

for mentee1 in mentees:
    m1_answers = mentee1['answers']
    for mentee2 in mentees:
        m2_answers = mentee2['answers']
        compat = 0
        # zip fuses both lists into one
        for m1_answer, m2_answer in zip(m1_answers, m2_answers):
            if m1_answer == m2_answer:
                compat += 1
        mentee1['compatibility'].append((mentee2['name'], compat))

print(mentees)
</code></pre>
</div>
<span class="comment-copy">What is the purpose of the code and what is your desired output? Try to reduce your example to be <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable</a>.</span>
<span class="comment-copy">How would you compare the and whats the logic to create the list?</span>
<span class="comment-copy">This code is a mess: 1- why are your loops i, ii ,iii .. not used efficiently as in iterating through elements? 2- <code>for iii in list(o):</code> you don't need to do <code>list(o)</code>, o is already type list. 3-  the variable names are so confusing, refrain from using 1 letter variables and both uppercase and lowercase at the same time.</span>
<span class="comment-copy">firstly this will be intergrated into a far large program that is built to match mentors with mentees. and secondly well i know that to get 5 list comared 5 times i need 25 loops. so i have the first one sent through all 4 of the other lists then i have it go through each of the questions to see if they are the same if they are "compat" will gain 1 i will then covert compat into a percentage and send it back into a dictionarty or another 3d list</span>
<span class="comment-copy">ya hadi i agree i was just trying to do this in a rush so i could intergrate it into my main code. i was just looking for a way of getting it done</span>
<span class="comment-copy">well you are a magic worker thank yotu</span>
<span class="comment-copy">also how would i do this with 2 different lists and then give everyone a compatability with the other members</span>
