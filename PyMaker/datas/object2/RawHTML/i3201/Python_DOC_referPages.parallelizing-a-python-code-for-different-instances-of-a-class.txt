<div class="post-text" itemprop="text">
<p>My question is related to parallelizing a python code and I want to know how we can run a function for different instances of a class to decrease the runtime. </p>
<p><strong>What I have:</strong> I have multiple instances of a class <em>A</em> (stored in a list called <em>instances</em>). This class has a function <em>add</em>. Now, we have multiple independent tasks, one for each instance of class <em>A</em> where the input to all these tasks is one thing (number <em>n</em> in my example). Each instance needs to apply function <em>add</em> to <em>n</em> and return a number. We want to store the returned numbers of all instances in a list (list <em>results</em> in my example). </p>
<p><strong>What I want:</strong> As you can see, in this example, the tasks can be parallelized as there is no need for one to wait for the other one to gets done. How can we parallelize the simple code below? Since nothing is shared between the different instances, I guess we can even use multithreading, right? Or the only way is to use multiprocessing?</p>
<pre><code>class A(object):
    def __init__(self, q):
        self.p = q

    def add(self, num):
        return self.p + num


instances = []
for i in xrange(5):
    instances.append(A(i))
n = 20
results = []
for inst in instances:
    results.append(inst.add(n))

print(results)
</code></pre>
<blockquote>
<p>Output: [20, 21, 22, 23, 24]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The pattern that your toy code seems to follow would suggest to map a wrapper function to the list using a thread pool / process pool. The number of instances and the basic arithmetic operation that you want to apply for each instance however suggests that the overhead for parallelizing this would outweigh any potential benefit.</p>
<p>Whether it makes sense to do this, depends on the number of instances and the time it takes to run each of those member functions. So make sure to do at least some basic profiling of your code before you try to parallelize this. Find out whether the tasks you attempt to parallelize is CPU-bound or IO-bound.</p>
<p>Here's an example that should demonstrate the basic pattern:</p>
<pre><code># use multiprocessing.Pool for a processes-based worker pool
# use multiprocessing.dummy.Pool for a thread-based worker pool
from multiprocessing.dummy import Pool
# make up list of instances
l = [list() for i in range(5)]
# function that calls the method on each instance
def foo(x):
    x.append(20)
    return x
# actually call functions and retrieve list of results
p = Pool(3)
results = p.map(foo, l)
print(results)
</code></pre>
<p>Obviously you need to fill the blanks to adapt this to your real code.</p>
<p>For further reading:</p>
<ul>
<li><a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">https://docs.python.org/3/library/multiprocessing.html</a></li>
<li><a href="https://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.dummy" rel="nofollow noreferrer">https://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.dummy</a></li>
<li><a href="https://stackoverflow.com/q/2846653/1025391">How to use threading in Python?</a></li>
<li><a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">https://wiki.python.org/moin/GlobalInterpreterLock</a></li>
<li><a href="https://stackoverflow.com/q/1294382/1025391">What is a global interpreter lock (GIL)?</a></li>
<li><a href="https://stackoverflow.com/q/868568/1025391">What do the terms "CPU bound" and "I/O bound" mean?</a></li>
</ul>
<p>Also maybe have a look at <em>futures</em>:</p>
<ul>
<li><a href="https://pymotw.com/3/concurrent.futures/index.html#module-concurrent.futures" rel="nofollow noreferrer">https://pymotw.com/3/concurrent.futures/index.html#module-concurrent.futures</a></li>
<li><a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">https://docs.python.org/3/library/concurrent.futures.html</a></li>
</ul>
<p>If you <em>really</em> want to have this parallel, also consider to port your calculations to a GPU (you might need to move away from Python then).</p>
</div>
<span class="comment-copy">For problems this simple it doesn't make any sense at all to use multiple threads. If you're having a specific problem, please describe it. This rather broad question with toy code is not really useful.</span>
<span class="comment-copy">@moooeeeep I have a very complicated task (for each instance of the class to accomplish) but if I know how to use multithreading for this simple example, I should be able to use it for my task.</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/2846653/1025391">stackoverflow.com/q/2846653/1025391</a> and <a href="https://stackoverflow.com/q/1294382/1025391">stackoverflow.com/q/1294382/1025391</a> and <a href="https://stackoverflow.com/q/9038711/1025391">stackoverflow.com/q/9038711/1025391</a></span>
<span class="comment-copy">@moooeeeep I have already seen the first link, thank though</span>
<span class="comment-copy">Can you write your answer based on my example? This example is not helping me as I don't have one function that I can apply to different tasks, instead I have one similar function inside different instances of a class.</span>
<span class="comment-copy">@user491626 Of course, you need to come up with a function that does what you want specifically. Just replace my <code>.append(20)</code> with <code>.add(20)</code> to fit your example. This is the pattern, which I think you need. You just need to fill in the blanks.</span>
<span class="comment-copy">It is not just that. You function takes l as input. I mean you have modified the function. I don't wan to change my class (if it is possible)</span>
<span class="comment-copy">@user491626 Then it seems I don't know what you are actually asking about.</span>
<span class="comment-copy">Can you take a look the updated question? I guess I can use multithreading. Can you also add how we can use multithreading in your answer?</span>
