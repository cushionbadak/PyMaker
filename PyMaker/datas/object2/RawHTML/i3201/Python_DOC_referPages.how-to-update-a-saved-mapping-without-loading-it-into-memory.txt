<div class="post-text" itemprop="text">
<p>I'm maintaining some mappings that I need to continually update.</p>
<p>These mappings are implemented as <code>pickle</code> serialized <code>dict</code>s right now.</p>
<p>The update process is like this:</p>
<ol>
<li>Load the <code>pickle</code> file into memory, so that I have access to the <code>dict</code></li>
<li>Do any update to the <code>dict</code> and serialize it again.</li>
</ol>
<p>The problem with this solution is it could consume a lot of memory for large <code>dict</code>s.</p>
<p>I've looked into other solutions like <code>shelve</code> and <code>leveldb</code>, but they could both generates many files instead of one, which is more complex to save to systems like key-value storage.</p>
</div>
<div class="post-text" itemprop="text">
<p>To read and modify your mappings without reading the entire map into memory, you'll need to store it as an indexed structure in some sort of database. There are lots of databases with good Python bindings that store the data on disk as a file, so that you don't have to worry about database servers or separate index files. <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">Sqlite</a> is almost certainly the most common choice. However, as you pointed out in the comments, the full functionality of an SQL database is probably unnecessary for your purpose, since you really only need to store key-value pairs. </p>
<p>Based on your particular requirements, then, I'd probably recommend <a href="https://vedis-python.readthedocs.io/en/latest/" rel="nofollow noreferrer">vedis</a>. It's a single-file, key-value database which can support very large database sizes (the documentation claims it can handle on the order of terrabytes), which is transactional and thread-safe to boot.</p>
</div>
<span class="comment-copy">Generally, to get random access (the ability to modify parts of a file without reading the whole thing into memory) you need to use some sort of database. If your only problem with the ones listed is that they store things in multiple files, then there are plenty of databases which use only a single file. I believe, for instance, that sqlite stores the entire database and indexing information in a single file, and comes with <a href="https://docs.python.org/3/library/sqlite3.html" rel="nofollow noreferrer">built in Python bindings</a> to boot.</span>
<span class="comment-copy">Yes, sqlite would make a good candidate, but I think what I need is something like a single-file key-value database.</span>
<span class="comment-copy">Yes, sqlite would make a good candidate, but I think what I need is something like a single-file key-value database.</span>
<span class="comment-copy">Maybe <a href="https://vedis-python.readthedocs.io/en/latest/" rel="nofollow noreferrer">vedis</a>?</span>
<span class="comment-copy">@Kwarrtz Thanks, it seems to be a good fit for my requirement. Could you please explain more in a answer so that I can accept it as the correct answer?</span>
