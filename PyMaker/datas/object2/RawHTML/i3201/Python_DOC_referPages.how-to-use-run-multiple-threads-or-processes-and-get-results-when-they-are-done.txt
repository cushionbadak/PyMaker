<div class="post-text" itemprop="text">
<p>Have function that has a dynamic amount of time it will 'do something', I dont' want to keep the rest of my program waiting on this function, so I want to send it to a different process or thread. Let's say I run the function 10 times concurrently, but i want to use the data from the quickest functions first. (like a queue on who works the fastest) I tried this approach, but as you can see by the output some functions finish first, but I still have to wait until all 10 are done before I can iterate through the results.??????????????????????????????????????</p>
<pre><code>from multiprocessing.dummy import Pool as ThreadPool 
from time import sleep
import random

class bob:
    def __init__(self):
        self.res = []
    def do(self,x):
        l = [True,False]
        if random.choice(l):
            sleep(3)
        self.res.append(x)
        return 'bob'+str(x)


urls = [
  1,2,3,4,5,6,7,8,9,10
]


for i in xrange(3):
    b = bob()
    # make the Pool of workers
    pool = ThreadPool(4) 

    # open the urls in their own threads
    # and return the results
    pool.map(b.do, urls)

    # close the pool and wait for the work to finish 
    pool.close() 
    pool.join() 
    print '\n\n'
    for r in b.res:
        print r
</code></pre>
<p>---------------------------------also tried this</p>
<pre><code>import threading
import time
import random

class bob:
    def __init__(self):
        self.res = []
    def do(self,x):
        l = (True,False)
        if random.choice(l):
            time.sleep(3)
        self.res.append(x)

arg_list = (1,2,3,4,5,6,7,8,9,10)

b = bob()
for arg in arg_list:
    d = threading.Thread(target=b.do,args=[arg])
    d.setDaemon(True)
    d.start()


for r in b.res:
    print r
</code></pre>
<p>how to loop through queue infinite? there could be situation where the do() takes so long the queue will become empty, but i still want to check until something goes in queue?? tried this, but it just shows last item in queue</p>
<pre><code>import threading
import Queue, time, random

urls = [
  1,2,3,4,5,6,7,8,9,10
]

class bob:
    def __init__(self):
        self.q = Queue.Queue()
    def do(self,x):
        l = (True,False)
        if random.choice(l):
            time.sleep(3)
        self.q.put(x,False)

def main():
    b = bob()
    for u in urls:
        th = threading.Thread(target=b.do, args=(u,) )
        th.daemon = True
        th.start()

    for job in iter(b.q.get, None):
        print job

if __name__=='__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You might not need <code>multiprocessing</code> unless you need something <code>CPU intense</code>. Look out for <code>multithreads</code> which is more preferred for I/O operations. I would recommend <code>gevents</code> within Python.</p>
<p>For your use case, where you just want fastest results, use a <code>queue</code>.</p>
<pre><code>import threading
import queue

urls = [
  1,2,3,4,5,6,7,8,9,10
]

def do(x, r_q):
    #do whatever else here
    r_q.put(('bob'+str(x), 'done'))

def main():
    q = queue.Queue()
    threads = [ threading.Thread(target=do, args=(i, q)) for i in urls ]
    for th in threads:
        th.daemon = True
        th.start()

    r_1 = q.get()
    r_2 = q.get()

if __name__=='__main__':
    main()
</code></pre>
<p><code>.q.get()</code> is a blocking get. Whatever thread completes first and puts the results in queue, you will get it right away.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import threading
import Queue, time, random

urls = [
  1,2,3,4,5,6,7,8,9,10
]

class bob:
    def __init__(self):
        self.q = Queue.Queue()
    def do(self,x):
        l = (True,False)
        if random.choice(l):
            time.sleep(3)
        self.q.put(x)


b = bob()
for u in urls:
    th = threading.Thread(target=b.do, args=(u,) )
    th.daemon = True
    th.start()

for u in urls:
    print b.q.get()
</code></pre>
<p>---------- in this scenario i </p>
</div>
<span class="comment-copy">If you look at <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map" rel="nofollow noreferrer">the docs</a>, <code>map</code> explicitly gives you the outputs in order of the inputs, but there are variants like <code>map_async</code> and <code>imap_unordered</code> that do different things, and probably one of them does exactly what you want here.</span>
<span class="comment-copy">And if not, you may want to <code>pip install futures</code> to get the 2.x backport of <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer"><code>concurrent.futures</code></a>, so you can use <code>as_completed</code>, as in <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example" rel="nofollow noreferrer">the first <code>ThreadPoolExecutor</code> example</a>.</span>
<span class="comment-copy">thanks, i was waiting on 'the network' with urllib2.urlopen, is that intense? i tweaked your code and posted new answer, still intersted in infinite loop for queue, though not relevant to original q</span>
<span class="comment-copy"><code>infinite q</code> does not sound appropriate. The way to loop over a queue remains the same to python's basics. If the answer helped, appreciate if you could accept it. Thanks</span>
