<div class="post-text" itemprop="text">
<p>I have two arrays. <code>column_names</code> hold the column titles. <code>values</code> hold all the values.</p>
<p>I understand if I do this:</p>
<pre><code>column_names = ["a", "b", "c"]
values = [1, 2, 3]
for n, v in zip(column_names, values):
    print("{} = {}".format(n, v))
</code></pre>
<p>I get</p>
<pre><code>a = 1
b = 2
c = 3
</code></pre>
<p>How do I code it so if I pass:</p>
<pre><code>column_names = ["a", "b", "c"]
values = [1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>I would get</p>
<pre><code>a = 1, 4, 7
b = 2, 5, 8
c = 3, 6, 9
</code></pre>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it as follows</p>
<pre><code>&gt;&gt;&gt; for n, v in zip(column_names, zip(*[values[i:i+3] for i in range(0,len(values),3)])):
...     print("{} = {}".format(n, ', '.join(map(str, v))))
... 
a = 1, 4, 7
b = 2, 5, 8
c = 3, 6, 9
</code></pre>
<p>Alternatively, you can use <code>grouper</code> defined in <code>itertools</code></p>
<pre><code>&gt;&gt;&gt; def grouper(iterable, n, fillvalue=None):
...     "Collect data into fixed-length chunks or blocks"
...     # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
...     args = [iter(iterable)] * n
...     return zip_longest(*args, fillvalue=fillvalue)
... 
&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; for n, v in zip(column_names, zip(*grouper(values, 3))):
...     print("{} = {}".format(n, ', '.join(map(str, v))))
... 
a = 1, 4, 7
b = 2, 5, 8
c = 3, 6, 9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With pandas and numpy it is easy and the result will be a much more useful table. Pandas excels at arranging tabular data. So lets take advantage of it: 
install pandas with:</p>
<p><code>pip install pandas
</code></p>
<pre><code>#pandas comes with numpy
import numpy as np
import pandas as pd

# this makes a normal python list for integers 1-9
input = list(range(1,10))

#lets convert that to numpy array
num = numpy.array(input)

#currently its shape is single dimensional, lets change that to a two dimensional matrix that turns it into the clean breaks you want
reshaped = num.reshape(3,3)

#now construct a beautiful table
pd.DataFrame(reshaped, columns=['a','b','c'])

#ouput is
   a  b  c
0  1  2  3
1  4  5  6
2  7  8  9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer">itertools.cycle</a> seems appropriate in this case. Here's another version for future readers:</p>
<pre><code>import itertools

column_names = ["a", "b", "c"]
values = [1, 2, 3, 4, 5, 6, 7, 8, 9]

L = zip(itertools.cycle(column_names), values)

for g, v in itertools.groupby(sorted(L), lambda x: x[0]):
    print("{} = {}".format(g, [i[1] for i in v]))
</code></pre>
<p>gives:</p>
<pre><code>a = [1, 4, 7]
b = [2, 5, 8]
c = [3, 6, 9]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This has two sub-steps that you want to do.</p>
<p>First, you want to divide your list into chunks, and then you want to assign those chunks to a dictionary.</p>
<p>To split the list into chunks, we can create a function:</p>
<pre><code>def chunk(values, chunk_size):
    assert len(values)%chunk_size == 0 # Our chunk size has to evenly fit in our list
    steps = len(values)/chunk_size
    chunky_list = []
    for i in range(0,steps):
        position = 0 + i
        sub_list = []
        while position &lt; len(values):
            sub_list.append(values[position])
            position += chunk_size
        chunky_list.append(sub_list)
    return chunky_list
</code></pre>
<p>At this point we will have:
    [[1,4,7],[2,5,8],[3,6,9]]</p>
<p>From here, creating the dict is really easy. First, we zip the two lists together:</p>
<pre><code>zip(column_names, chunk(3))
</code></pre>
<p>And take advantage of the fact that Python knows how to convert a list of tuples into a dictionary:</p>
<pre><code>dict(zip(column_names, chunk(3)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use slicing and a <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> to collect your values:</p>
<pre><code>from collections import defaultdict

column_names = ["a", "b", "c"]
values = [1, 2, 3, 4, 5, 6, 7, 8, 9]

column_len = len(column_names)

d = defaultdict(list)
for i in range(0, len(values), column_len):
    seq = values[i:i+column_len]

    for idx, number in enumerate(seq):
        d[column_names[idx]].append(number)

for k, v in d.items():
    print('%s = %s' % (k, ', '.join(map(str, v))))
</code></pre>
<p>Which Outputs:</p>
<pre><code>a = 1, 4, 7
b = 2, 5, 8
c = 3, 6, 9
</code></pre>
<p>This can be imporoved if you create zipped lists with <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a>, avoiding the slicing all together:</p>
<pre><code>from collections import defaultdict
from itertools import cycle

column_names = ["a", "b", "c"]
values = [1, 2, 3, 4, 5, 6, 7, 8, 9]

column_names = cycle(column_names)

d = defaultdict(list)
for column, val in zip(column_names, values):
    d[column].append(val)

for k, v in d.items():
    print('%s = %s' % (k, ', '.join(map(str, v))))
</code></pre>
</div>
<span class="comment-copy">Sunitha you are a rockstar :)</span>
<span class="comment-copy">thank you for your advice. i've already selected an answer that worked for me but i will try this as well :)</span>
