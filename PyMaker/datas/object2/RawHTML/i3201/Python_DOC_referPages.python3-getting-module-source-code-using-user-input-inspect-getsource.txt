<div class="post-text" itemprop="text">
<p>what I want to do... <br/>
I have a module called <strong>'my_library.py'</strong> which contains some functions or methods. <br/>
I have another module called <strong>'test_library.py'</strong> and from test_library I want to print source code of some specific functions which is inside "my_library" module <br/>
I know we can do it using.... <br/>
<code>print(inspect.getsource(my_library.add))</code> <br/>
or <br/>
<code>print(open(my_library.__file__).read())</code> <br/>
here, i want to take the function or module name from the user as an input <br/>
example : <br/></p>
<pre><code>    **my_library.py**
    def add(x,y):
        return x+y

    def substract(x,y):
        return x-y

    **test_library.py**
    import inspect
    import my_library
    name = "my_library.substract"
    print(inspect.getsource(name))
</code></pre>
<p><br/>
<code>TypeError: module, class, method, function, traceback, frame, or code object was expected, got str</code>
<br/>
I have tried to convert that string input into object, file, class ...nothing seems to work <br/>
is there any way to take the input from a user and show that specific function or module?
<br/>
any suggestions or advice to solve the problem?</p>
<p>thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to create an actual object to pass to <code>get_source</code>, e.g.:</p>
<pre><code>In [1]: def add(x,y):
   ...:         return x+y
   ...:

In [2]: def substract(x,y):   return x-y

In [3]: %save my_library.py 1-2
The following commands were written to file `my_library.py`:
def add(x,y):
        return x+y
def substract(x,y):   return x-y

In [4]: import inspect

In [5]: import my_library

In [6]: obj = my_library.substract

In [7]: inspect.getsource(obj)
Out[7]: 'def substract(x,y):   return x-y\n'

In [8]: obj = my_library.add

In [9]: inspect.getsource(obj)
Out[9]: 'def add(x,y):\n        return x+y\n'

In [10]:
</code></pre>
<p>You can generate them from strings by using <code>eval</code> on the strings, e.g.:</p>
<pre><code>for item in dir(my_library):
     if not item.startswith('_'):
         print(item)
         nam = '.'.join(['my_library', item])
         print(inspect.getsource(eval(nam)))
</code></pre>
<p>Gives:</p>
<pre><code>add
def add(x,y):
        return x+y

substract
def substract(x,y):   return x-y
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Say we had a file <code>module.py</code>:</p>
<pre><code>def test_func(arg1, arg2):
    return arg1 + arg2
</code></pre>
<p>We can resolve this member for use by <code>getsource()</code> from another region of code by getting a reference to the function object:</p>
<pre><code>import inspect
import sys
import module

def main():
    # what the user would input
    input_str = 'module.test_func'  
    # split user input up into individual members
    name_list = input_str.split('.')
    # extract the starting point name
    base_name = name_list[0]
    # check to make sure that name exists in the current scope and extract a reference to it
    if base_name in locals():
        base_obj = locals()[base_name]
    elif base_name in globals():
        base_obj = globals()[base_name]
    else:
        print('base name {} is unknown'.format(base_name))
        return 1
    # iteratively step through the attribute chain
    containing_object = base_obj
    for name in name_list[1:]:
        try:
            containing_object = getattr(containing_object, name)
        except AttributeError:
            print('unable to resolve name {} from object {}'.format(name, containing_object))
            return 1
    # print out source of final reference
    print(inspect.getsource(containing_object))
    return 0


if __name__ == '__main__':
    sys.exit(main())
</code></pre>
<p>You could also extend this to retrieve members of modules that haven't yet been imported using <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">importlib</a></p>
</div>
