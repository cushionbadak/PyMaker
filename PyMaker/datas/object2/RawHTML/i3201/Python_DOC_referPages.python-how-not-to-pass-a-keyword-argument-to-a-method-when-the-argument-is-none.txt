<div class="post-text" itemprop="text">
<p>I wrote two example codes which share a same pattern.</p>
<p>As you can read below, I used if statement to not to pass keyword argument down to a sub function if the argument is None.
I want to do it in a better way.</p>
<p>Please share your thoughts if you have an idea.</p>
<pre><code># example_1
def mysort(alist, key=None):
    if key is None:
        alist = sorted(alist)
    else:
        alist = sorted(alist, key=key)

    return alist

# example_2
def create_index(index_name, mapping=None):
    es = Elasticsearch()
    if mapping in None:
        response = es.indices.create(index=index_name)
    else:
        response = es.indices.create(index=index_name, body=mapping)
    return respone
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The default value of the parameter <code>key</code> of the function <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> is <code>None</code>. Because of this, your first <code>if</code>/<code>else</code> is not necessary. Simple use</p>
<pre><code>alist = sorted(alist, key=key)
</code></pre>
<p>Use the default value of <code>body</code> of <code>es.indices.create</code> as the default value for <code>mapping</code> in your function <code>create_index</code>. Then you can get rid of the <code>if</code>/<code>else</code> in this function, too.</p>
<p><strong>Edit:</strong> The <a href="https://elasticsearch-py.readthedocs.io/en/master/api.html#elasticsearch.Elasticsearch.create" rel="nofollow noreferrer">documentation</a> says:</p>
<blockquote>
<p>body – The document</p>
</blockquote>
<p>Try to find out if this is a JSON string or a Python dictionary that represents the document. In the JSON string case, use the string <code>"{}"</code>as the default value:</p>
<pre><code>def create_index(index_name, mapping="{}"):
</code></pre>
<p><strong>Edit 2:</strong> Using an empty dict would not work (see link in comment). So in the second case, you would have to use <code>if</code>/<code>else</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>For the first example the default value for <code>key</code> is <code>None</code>, so you can just pass it directly:</p>
<pre><code># example_1
def mysort(alist, key=None):
    alist = sorted(alist, key=key)
    return alist
</code></pre>
<p>You can also setup a different default value. For instance the new default value of <code>123</code> would be passed to <code>sorted</code>.</p>
<pre><code># example_1
def mysort(alist, key=some_key):
    alist = sorted(alist, key=key)
    return alist
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As already stated, for sorted, you are basically just packing the original function. I don't think you can avoid the <code>if</code> for the second example, but you can shorten it a little.</p>
<pre><code>def create_index(index_name, mapping=None):
    kwargs = {'index': index_name}
    if mapping is not None:
        kwargs['body'] = mapping
    return Elasticsearch().indices.create(**kwargs)
</code></pre>
</div>
<span class="comment-copy">is there a typo in <code>if mapping in None:</code>? I guess it should read <b>is</b> None</span>
<span class="comment-copy">careful with <code>mapping={}</code><a href="https://stackoverflow.com/questions/1132941/least-astonishment-and-the-mutable-default-argument" title="least astonishment and the mutable default argument">stackoverflow.com/questions/1132941/…</a></span>
<span class="comment-copy">@Chris_Rands Of course, stupid me. I've changed that.</span>
<span class="comment-copy">@intentionallyleftblank   Thank your for your insights on my question. You're right.  If a default value for a keyword argument is None, I don't need to use if-else statement.  And in other cases I could find what the default value is and put it in my wapper function.</span>
<span class="comment-copy">surely just <code>def mysort(alist, key=123)</code> for the 2nd case, assuming non-mutable value of the key</span>
<span class="comment-copy">Or <code>mysort = functools.partial(sorted,key=123)</code> (not that using an integer key makes much sense)</span>
<span class="comment-copy">Yep that makes more sense, edited.</span>
