<div class="post-text" itemprop="text">
<p>I'm rather new in this Python-area and want to read from a file that is written by another programme while that is running. So my script should read a line as soon as it is written by the other programme.</p>
<p>Here is what I have:</p>
<pre><code>#!/usr/bin/env python

import datetime
import os
import select
import sys

FILENAME = "/home/sjngm/coding/source/python/text.log"
with open(FILENAME, "r", encoding = "utf-8", errors = "ignore") as log:
    print("blocks: " + str(os.get_blocking(log.fileno())) + " / fd: " + str(log.fileno()) + " / " + str(log))
    while True:
        os.pread(log.fileno(), 1, 0)
        sel = select.select([log], [], [], 60000.0) #[0]
        line = log.readline().replace("\n", "")
        if line:
            print(line)
        else:
            print("-" + str(datetime.datetime.now()), end = "\r")

        # do something interesting with line...
</code></pre>
<p>text.log (for now it's just a regular text file and no other process accesses it):</p>
<pre><code>line 1
line 2
line 3
</code></pre>
<p><em>It doesn't matter if there is a <code>\n</code> at the end of the last line or not</em></p>
<p>Output:</p>
<pre><code>[sjngm@runlikehell ~]$ python ~/coding/source/python/test.py 
blocks: True / fd: 3 / &lt;_io.TextIOWrapper name='/home/sjngm/coding/source/python/text.log' mode='r' encoding='utf-8'&gt;
line 1
line 2
line 3
^CTraceback (most recent call last):
  File "/home/sjngm/coding/source/python/test.py", line 16, in &lt;module&gt;
    line = log.readline().replace("\n", "")
  File "/usr/lib/python3.6/codecs.py", line 321, in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
KeyboardInterrupt
[sjngm@runlikehell ~]$ uname -a
Linux runlikehell 4.14.53-1-MANJARO #1 SMP PREEMPT Tue Jul 3 17:59:17 UTC 2018 x86_64 GNU/Linux
[sjngm@runlikehell ~]$ 
</code></pre>
<p>So it says that blocking is enabled. After printing the three lines the script keeps going and prints the current time constantly without any pause.</p>
<p>It actually should pause at <code>pread()</code>, <code>select()</code> or <code>readline()</code>. Or as a matter of fact at any other command that I just don't know of.</p>
<p>How do I make this work?</p>
<p><em>Note that I don't want to pipe the file to the script as I want to use curses later on and its <code>getch()</code> wouldn't work in such a scenario.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Seems like this isn't a common situation. What I'm doing now is this:</p>
<pre><code>import subprocess

with subprocess.Popen([ "tail", "-10000f", FILENAME ], encoding = "utf-8", errors = "ignore", universal_newlines = True, bufsize = 1, stdout = subprocess.PIPE).stdout as log:
    line = log.readline()
</code></pre>
<p>In other words I'm opening the pipe <strong>in</strong> the script rather than pipeing something <strong>to</strong> the script. The buffering seems to be done in <code>tail</code> in connection with <code>Popen</code>'s parameter <code>bufsize</code>. <code>encoding</code> and <code>universal_newlines</code> allow <code>readline()</code> to read a string rather than a byte-array (see <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow noreferrer">Python's documentation</a> for more info on that).</p>
<p>System's <code>stdin</code> is now still available and <code>curses</code> works nicely with keyboard/mouse events.</p>
</div>
