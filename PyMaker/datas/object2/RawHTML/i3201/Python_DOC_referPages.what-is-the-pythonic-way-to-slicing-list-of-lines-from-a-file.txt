<div class="post-text" itemprop="text">
<p>I have two lists <code>start_list</code> and <code>end_list</code>. I need to strip the lines starting from the line numbers in the <code>start_list</code> and ending with the corresponding line number in the <code>end_list</code>. And then need to write these into another file. What is the most "pythonic" way to do it?</p>
<p>I tried it with using two <code>for</code> loops way in C++. I would like to know about the most efficient way in python to do this. I tried to use <code>islice()</code> function inside the loop, but it is not giving the correct result. Please check the below code for my implementation.</p>
<pre><code>content = []    
try:
    with open(dir+ '/' + file_name, "r") as file: 
        for start, end in zip(start_list, end_list):
            for lines in itertools.islice(file, start, end):
                content.append(lines)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you cannot use islice with file object this way. Once the lines are read, you cannot go backward into the file without explicitly asking for it.</p>
<p>Either you add a <code>file.seek(0)</code> before your second <code>for</code></p>
<p>Or you read the file once, and you iterate on the file content in memory:</p>
<pre><code>content = []
try:
    with open(os.path.join(dir, file_name), "r") as file:
        file_content = file.readlines()

    for start, end in zip(start_list, end_list):
        content.extend(file_content[start:end])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this once with linecache util-</p>
<pre><code>import linecache
content=[]
file_path="path_to_file"
for start, end in zip(start_list, end_list):
    for line_no in range(start,end):
        content.append(linecache.getline(file_path,line_no))
</code></pre>
<p>be aware that </p>
<blockquote>
<p>This function will never raise an exception â€” it will return '' on
  errors (the terminating newline character will be included for lines
  that are found).</p>
</blockquote>
<p>more details at <a href="https://docs.python.org/2/library/linecache.html" rel="nofollow noreferrer">https://docs.python.org/2/library/linecache.html</a></p>
</div>
<span class="comment-copy"><i>What is the most "pythonic" way to do this?</i> Generally the most "pythonic" way of building a list with for loops is to make use of <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List Comprehensions</a></span>
<span class="comment-copy">from documentation: "If you want to read all the lines of a file in a list you can also use list(f) or f.readlines()". then you can 'islice' that list. If your file is very big then maybe use a counter in your for loop and check when you start and end</span>
<span class="comment-copy">better use os.path.join(). Note dir is a reserved word</span>
<span class="comment-copy">@joaquin you are right. I did not change the initial code.</span>
