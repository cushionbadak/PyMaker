<div class="post-text" itemprop="text">
<p>I have a list that's something like this:</p>
<pre><code>foo = ['bar', 'bar', 'bar', 'foo', 'foo','bar']
</code></pre>
<p>and I want it to be converted to something like this:</p>
<pre><code>'1-3 = bar'
'4-5 = foo'
'6 = bar'
</code></pre>
<p>The conversion needs to be done automatically, to accommodate list changes. How would I go about automating this?</p>
</div>
<div class="post-text" itemprop="text">
<p>One possible solution (without <code>groupby</code> from <code>itertools</code>):</p>
<pre><code>foo = ['bar', 'bar', 'bar', 'foo', 'foo','bar']

def my_groupby(l):
    first, last, current_value = 0, 0, l[0]
    for i, value in enumerate(l):
        if value != current_value:
            yield first + 1, last + 1, current_value
            current_value, first, last = value, i, i
        else:
            last = i
    yield first + 1, last + 1, current_value

for first, last, value in my_groupby(foo):
    if first != last:
        print(f'{first}-{last} = {value}')
    else:
        print(f'{first} = {value}')
</code></pre>
<p>Prints:</p>
<pre><code>1-3 = bar
4-5 = foo
6 = bar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import groupby
foo = ['bar', 'bar', 'bar', 'foo', 'foo','bar']
pos = 1
for k, g in groupby(foo):
    count = len(list(g))
    if count == 1:
        print('%d = %s' % (pos, k))
    else:
        print('%d - %d = %s' % (pos, pos + count - 1, k))
    pos += count
</code></pre>
<p>This outputs:</p>
<pre><code>1 - 3 = bar
4 - 5 = foo
6 = bar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is not clear what you really want,but you can count elements</p>
<pre><code>&gt;&gt;&gt; foo = ['bar', 'bar', 'bar', 'foo', 'foo','bar']
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(foo)
Counter({'bar': 4, 'foo': 2})
</code></pre>
<p>Or</p>
<pre><code>&gt;&gt;&gt; ['bar', 'bar', 'bar', 'foo', 'foo','bar'].count('bar')
4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>start_value = foo[0]
start_position = 0
for entry in range(1, len(foo)):
    if start_value == foo[entry]:
        pass
    else:
        print(str(start_position+1) + " - " + str(entry) + " = " + start_value)
        start_value = foo[entry]
        start_position = entry
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.groupby</code></p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; foo = ['bar', 'bar', 'bar', 'foo', 'foo', 'bar']
&gt;&gt;&gt; [(i,[v[0] for v in list(v)]) for i,v in groupby(enumerate(foo, 1), lambda x: x[1])]
[('bar', [1, 2, 3]), ('foo', [4, 5]), ('bar', [6])]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>i think function below can help you</p>
<pre><code>def fooRange(foo):
    a = []
    b = []
    #check if first value is equal to second value
    if foo[0] == foo[1]: 
        a.append(1)
    else:
        b.append([foo[0],1,1])
        a = []
    #loop for other values
    for i in range(1,len(foo)):
        if foo[i] == foo[i-1]: 
            a.append(i+1)
            if i == len(foo)-1: 
                b.append([foo[i],min(a),max(a)])
        else:
            if i == 1:
                a = [i+1]
            else:
                b.append([foo[i-1],min(a),max(a)])
                a = [i+1]
                if i == len(foo)-1: 
                    b.append([foo[i],min(a),max(a)])
    #prepare output
    for i in range(len(b)):
        if b[i][1] == b[i][2]:
            print('\''+str(b[i][1])+' = '+str(b[i][0])+'\'')
        else:
            print('\''+str(b[i][1])+'-'+str(b[i][2])+' = '+str(b[i][0])+'\'');

fooRange(foo)
</code></pre>
</div>
<span class="comment-copy">Do you also want a way to convert your condensed version back to a normal list?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.groupby</a></span>
<span class="comment-copy">@Marcus.Aurelianus No, it's not sorted. And "alrd" isn't a word.</span>
