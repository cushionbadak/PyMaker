<div class="post-text" itemprop="text">
<p>I've referred to the following threads and I don't think that this post is a duplicate of any of them:</p>
<ol>
<li><a href="https://stackoverflow.com/questions/3061/calling-a-function-of-a-module-by-using-its-name-a-string">Calling a function of a module by using its name (a string)</a></li>
<li><a href="https://stackoverflow.com/questions/28372223/python-call-function-from-string">Python Call Function from String</a></li>
<li><a href="https://stackoverflow.com/questions/4131864/use-a-string-to-call-function-in-python">Use a string to call function in Python</a></li>
</ol>
<p>For instance, assume that I have a string, <code>data_type = "int"</code>, and I want to call the built-in function <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int</code></a> directly with the string. BTW I cannot have <code>data_type = int</code> because <code>data_type</code> is actually loaded from a JSON file, i.e. <code>data_type</code> is always a string or <code>None</code>.</p>
<p>My best (neatest) attempt is <code>eval(data_type)("4")</code>, but as people suggested, <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a> doesn't seem to be a good option and should be avoided whatever.</p>
<p>An alternative is creating a dictionary like <code>data_type_dic = {"int": int, "float": float}</code> and executing <code>data_type_dic[data_type]("4")</code>. However, creating that dictionary feels like "reinventing the wheel" to me.</p>
<p>Since <code>int</code> is a built-in function, not a method in a module, so <code>getattr</code> seems unworkable. It is not a self-defined function either, so <code>locals()[data_type]</code> gives <code>KeyError</code>.</p>
<p>What is the best way to call a built-in function with the corresponding string then?</p>
</div>
<div class="post-text" itemprop="text">
<p>The best way is <a href="https://stackoverflow.com/questions/2283210/python-function-pointer"><em>still</em> a dictionary</a>, but:</p>
<pre><code>&gt;&gt;&gt; import builtins
&gt;&gt;&gt; getattr(builtins, 'int')
&lt;class 'int'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a <code>dict</code> is the <strong>only</strong> sane solution here, period. Not only because it's the most explicit, obvious, readable and maintainable solution but also because you definitly want to have full control when it comes to mapping user inputs (anything that comes from the outside world) to executable code (security 101: <em>never</em> trust user inputs).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get attributes by names using <code>getattr</code> function: </p>
<pre><code>getattr(obj, 'attr') == obj.attr
</code></pre>
<p>So you can use: </p>
<pre><code>import builtins
getattr(builtins, 'int')
</code></pre>
<p>But with code like this you cloud get things like <code>input</code> or <code>print</code>, so you should do: </p>
<pre><code>if data_type in ('int',  'float'): 
  getattr(builtins, data_type)
else: 
  raise Exception('...')
</code></pre>
</div>
<span class="comment-copy">Using a dict like you have said would be the skimpiest solution. Don't want to go overkill</span>
<span class="comment-copy"><code>{item.__name__:item for item in (int, float)}</code></span>
<span class="comment-copy">yes +1 for re-inforcing this, like <code>getattr(builtins, "quit")()</code> maybe</span>
