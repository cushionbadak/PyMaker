<div class="post-text" itemprop="text">
<p>When I was trying to mock an async function in unittest with MagicMock, I got this exception:</p>
<blockquote>
<p>TypeError: object MagicMock can't be used in 'await' expression</p>
</blockquote>
<p>With sample code like:</p>
<pre><code># source code
class Service:
    async def compute(self, x):
        return x

class App:
    def __init__(self):
        self.service = Service()

    async def handle(self, x):
        return await self.service.compute(x)

# test code
import asyncio
import unittest
from unittest.mock import patch


class TestApp(unittest.TestCase):
    @patch('__main__.Service')
    def test_handle(self, mock):
        loop = asyncio.get_event_loop()
        app = App()
        res = loop.run_until_complete(app.handle('foo'))
        app.service.compute.assert_called_with("foo")

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>How should I fix it with built-in python3 libraries?</p>
</div>
<div class="post-text" itemprop="text">
<p>I ended up with this hack.</p>
<pre><code># monkey patch MagicMock
async def async_magic():
    pass

MagicMock.__await__ = lambda x: async_magic().__await__()
</code></pre>
<p>It only works for MagicMock, not other pre-defined return_value</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get mocks to return objects that can be awaited by using a <a href="https://docs.python.org/3/library/asyncio-future.html" rel="nofollow noreferrer">Future</a>. The following is a <a href="https://docs.pytest.org/en/latest/" rel="nofollow noreferrer">pytest</a> test case, but something similar should be possible with <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">unittest</a>.</p>
<pre><code>async def test_that_mock_can_be_awaited():
    mock = MagicMock(return_value=Future())
    mock.return_value.set_result(123)
    result = await mock()
    assert result == 123
</code></pre>
<p>In your case, since you're patching <code>Service</code> (which gets passed in as <code>mock</code>), <code>mock.return_value = Future()</code> should do the trick.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/48761985/how-to-mock-aiohttp-client-clientsession-get-async-context-manager">How to mock aiohttp.client.ClientSession.get async context manager</a></span>
<span class="comment-copy">I'm not using asynctest as a third party library. Is there any standard way to fix it without any external dependency?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/32480108/mocking-async-call-in-python-3-5" title="mocking async call in python 3 5">stackoverflow.com/questions/32480108/â€¦</a></span>
<span class="comment-copy">That is really cool. Thanks!</span>
