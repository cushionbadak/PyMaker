<div class="post-text" itemprop="text">
<pre><code>def do_stuff_before_python_terminates():
    save_variables_in_mysql()
    do_this_and_that()...

def main():
    do stuff
    while loops ect...

def sigterm(x, y):
    raise Exception()
def sigint(signal, frame):
    raise Exception()





signal.signal(signal.SIGINT, sigint)
signal.signal(signal.SIGTERM, sigterm)  
try:
    while True:
        main()
except Exception as e:
    logger.error("Exception")
    do_stuff_before_python_terminates()
    logger.log("sys.exit")
    sys.exit(0)
</code></pre>
<p>I use Python in a Docker Container</p>
<p>When i do ctrl+c via terminal tty or stop the image 
python does stop and do it not always successfully 
"do_stuff_before_python_terminates()". </p>
<p>The reason is that when python is randomly in a while loop then i don't have luck it does not exit it stays in the while loop and do still other stuffs and do not terminate successfully. </p>
<p>Docker only waits 10 seconds before it kills the container and than voila it does not "do_stuff_before_python_terminates()" </p>
<p>what am i doing here wrong, how to solve the problem that even when its in a while loop it instantly exits and "do_stuff_before_python_terminates()"</p>
<p>Updated Explanation:</p>
<h2>if python threws an error</h2>
<p>it does successfully jump to </p>
<pre><code>except Exception as e:
    logger.error("Exception")
    do_stuff_before_python_terminates()
    logger.log("sys.exit")
    sys.exit(0)
</code></pre>
<h2>if i stop the container or use ctrl+c and python is NOT in a while loop</h2>
<p>it does successfully jump to</p>
<pre><code>sigterm() or sigint() -&gt; then raise an Exception() -&gt;  then jumps to
except Exception as e:
    logger.error("Exception")
    do_stuff_before_python_terminates()
    logger.log("sys.exit")
    sys.exit(0)
</code></pre>
<h2>if i stop the container or use ctrl+c and python is IN an Loop</h2>
<pre><code>it does stay in the loop 
do stuff
do stuff
do stuff
after nearly 20-30seconds
sigterm() or sigint() -&gt; then raise an Exception() -&gt;  then jumps to
except Exception as e:
    logger.error("Exception")
    do_stuff_before_python_terminates()
    logger.log("sys.exit")
    sys.exit(0)
</code></pre>
<h2>what i need is, that it does instantly jumps out the while loop whenever i stop the container or do ctrl+c  (sigterm + sigint)</h2>
<pre><code>sigterm() or sigint() -&gt; then raise an Exception() -&gt;  then jumps to
except Exception as e:
    logger.error("Exception")
    do_stuff_before_python_terminates()
    logger.log("sys.exit")
    sys.exit(0)
</code></pre>
<p>Docker does kill the container after 10seconds so, python only has 10 seconds to exit, the effect is that it does never do_stuff_before_python_terminates() when python is in a loop</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>do_stuff_before_python_terminates()</code> is not called properly (from my experience with signals and python at least).</p>
<p>Make the call to <code>do_stuff_before_python_terminates()</code> in your <code>sigterm</code> and/or <code>sigint</code> function.</p>
<pre><code>def do_stuff_before_python_terminates():
    save_variables_in_mysql()
    do_this_and_that()...

def sigterm(x, y):
    do_stuff_before_python_terminates()
    raise Exception()
def sigint(signal, frame):
    do_stuff_before_python_terminates()
    raise Exception()
</code></pre>
<p>Make sure to put the <code>do_stuff</code> function above the sigterm &amp; sigint functions.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>Register the signal in main(). For example: </p>
<pre><code>    def signal_handler(signal, frame):
            print('\n')
            sys.exit(0)

    def main():
        signal.signal(signal.SIGINT, signal_handler)
        do_stuff_before_python_terminates()
</code></pre></li>
<li><p>Signals won't fire until low-level C code finishes; from the documentation: "A long-running calculation implemented purely in C (such as regular expression matching on a large body of text) may run uninterrupted for an arbitrary amount of time, regardless of any signals received. The Python signal handlers will be called when the calculation finishes."</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/signal.html#execution-of-python-signal-handlers" rel="nofollow noreferrer">Execution of Python signal handlers</a>:</p>
<blockquote>
<p>A long-running calculation implemented purely in C (such as regular expression matching on a large body of text) may run uninterrupted for an arbitrary amount of time, regardless of any signals received. The Python signal handlers will be called when the calculation finishes.</p>
</blockquote>
<p>This may be the cause of your problem. Because of this limitation (<a href="https://docs.python.org/3/library/signal.html#signals-and-threads" rel="nofollow noreferrer">and others</a>), signal handlers written in Python rarely behave as expected except in the simplest programs.</p>
<p>If you really need to catch the signal immediately, you may need to write a wrapper for your program in a low level language (e.g. C) that calls your Python code.</p>
</div>
<span class="comment-copy">Two possible explanations: code called from <code>main()</code> installs its own signal handler or code called from main catches the <code>Exception</code>.</span>
<span class="comment-copy">sorry no clue what you mean, i corrected the structure to be more readable maybe that was the reason it looked like signals are in main function , can you provide a solution</span>
<span class="comment-copy">I mean that some of the functions that are called may interfere with the exception raise and catch mechanism you are relying upon. Maybe it isn't the case, I cannot know,  but you can test and rule it out by minimizing the code.</span>
<span class="comment-copy">Does the text <code>except:</code> or <code>except Exception</code> exist anywhere else in your code?  Either of those might catch the signal-generated exception before it reaches the handler that does <code>do_stuff_before_python_terminates()</code>.</span>
<span class="comment-copy">Yes - if your code is currently executing inside another try/except, that gets first chance to catch the <code>Exception</code>.  All of your <code>except</code>s need to use the most specific exception name possible, so that they don't catch things they shouldn't.</span>
<span class="comment-copy">This might be the proper way to write the signal handlers, but I would like to understand what's wrong with the original code.</span>
<span class="comment-copy">i added more information, thank you for your answer i appreciate that, but your answer does not help</span>
<span class="comment-copy">what is  the difference if i register them global before my code goes into main()? i only have the problem to jump out of while loops</span>
<span class="comment-copy">there is no "global" -- if you have a main(), the script starts there and proceeds from there.</span>
<span class="comment-copy">my code does work from up to down, and then jumps in to main at the end of my code where i tell him to, outside of any function im registering the sigint and sigterm handler like in my example code</span>
<span class="comment-copy">thanks, but thats just not possible for me. i can't code in C and i need definitely python run do_stuff_before_python_terminates() on every sigterm or sigint (shutdown or ctr+l).</span>
