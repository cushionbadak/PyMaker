<div class="post-text" itemprop="text">
<p>I was expecting <code>Path('')</code> to be a path that does not exist because it does not correspond to a file or directory name. Why is this considered to exist?</p>
<pre><code>from pathlib import Path

print(Path('').exists())
</code></pre>
<p>I assume there is an advantage gained by defining the <code>Path('')</code> to be the same as <code>Path('.')</code>. In what case is there an advantage?</p>
</div>
<div class="post-text" itemprop="text">
<p>As other said, it resolves to the current path and therefore exists, but here's why,</p>
<p><a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path" rel="nofollow noreferrer">pathlib.Path</a> is acutally a subclass of <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath" rel="nofollow noreferrer">pathlib.PurePath</a> which assumes the current directory when the <code>pathsegments</code> (argument) is empty (equivalent to <code>''</code>).</p>
<p>You can prove that empirically like this,</p>
<pre><code>from pathlib import PurePath
print(PurePath())
&gt;&gt;&gt;&gt; .
</code></pre>
<blockquote>
<p>I assume there is an advantage gained by defining the Path('') to be the same as Path('.').</p>
</blockquote>
<p>Correct. Even though I'm not the creator of that lib, I assume this is for syntax and logical reasons. Indeed, people often want to refer to the current directory to compute something dynamically. Therefore, for the same reason <code>.</code> points to the current directory, the lib creator probably wanted to let you write something like this,</p>
<pre><code>&gt;&gt;&gt;&gt; p = Path() # or possibly Path('.')
&gt;&gt;&gt; [x for x in p.iterdir() if x.is_dir()]
</code></pre>
<p>that would list sub directories.</p>
<p>Basically, see this as a <strong><em>default</em></strong>. It was logic that the default path returned by <code>Path()</code> was the current directory. Thus, logically, an empty string value should have the same behavior.</p>
</div>
<span class="comment-copy">Because it resolves to the current directory, which exists</span>
<span class="comment-copy">See <code>Path('') == Path() == Path('.')</code></span>
<span class="comment-copy">Try <code>print(Path('').resolve())</code>. On my machine it gives <code>C:\Users\PeterWood\AppData\Local\Programs\Python\Python36-32</code></span>
