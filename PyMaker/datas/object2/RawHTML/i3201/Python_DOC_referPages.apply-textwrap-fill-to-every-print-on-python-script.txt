<div class="post-text" itemprop="text">
<p>I would like to have my print output length limited to X characters. </p>
<p>I've been looking for some info and I found the command <code>textwrap.fill</code> which makes just what I was looking for by using something like: </p>
<pre><code>print(textwrap.fill("Hello world", X))
</code></pre>
<p>However, I was wondering if there is a way to apply this length limitation to every print without having to write it (I do have plenty of them) by creating or setting a class or something at the very beginning of the script.</p>
</div>
<div class="post-text" itemprop="text">
<p>Monkeypatching <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer"><code>print</code></a> <em>is</em> doable, but it's not a good idea. For one thing, what do you want to happen if someone does a <code>print(spam, eggs)</code>? Or <code>print(spam, end='')</code>? Or <code>print(spam, file=outfile)</code>?</p>
<hr/>
<p>A better solution is probably replacing <a href="https://docs.python.org/3/library/sys.html#sys.stdout" rel="nofollow noreferrer"><code>sys.stdout</code></a> with a wrapper. </p>
<p>The normal <code>sys.stdout</code> is a plain old text file object, a <a href="https://docs.python.org/3/library/io.html#io.TextIOWrapper" rel="nofollow noreferrer"><code>TextIOWrapper</code></a> just like the ones you get from <code>open</code>, except that when you write to it, it goes to the console instead of to a file on disk.</p>
<p>And you're allowed to replace it with anything else that meets the <a href="https://docs.python.org/3/library/io.html#io.TextIOBase" rel="nofollow noreferrer"><code>TextIOBase</code></a> protocol.</p>
<p>And writing a <code>TextIOBase</code> is really simple. All you really need to implement is <code>write</code> and/or <code>read</code> and <code>readline</code> (depending on whether you're wrapping output, input, or both), and all our wrapper needs to do in <code>write</code> is to buffer up lines, <code>fill</code> them, and pass them to the real file object underneath.</p>
<p>Like this:</p>
<pre><code>import io
import sys
import textwrap

class Filler(io.TextIOBase):
    def __init__(self, file, width=70):
        self.file = file
        self.textwrapper = textwrap.TextWrapper(width=width)
        self.buf = ''
    def write(self, buf):
        self.buf += buf
        lines = self.buf.split('\n')
        self.buf = lines.pop()
        for line in lines:
            self.file.write(self.textwrapper.fill(line) + '\n')
    def close(self):
        if self.buf:
            self.file.write(self.textwrapper.fill(buf))
        self.buf = ''
        self.file.close()

sys.stdout = Filler(sys.stdout, 32)

print('Spam spam spam spammity ' * 10)
print('Spam', 'Eggs')
sys.stdout.textwrapper.width = 72
print('Spam ' + 'spam ' * 50, 'and eggs', sep='... ')
print('Spam', end=' ')
print('Eggs', end=' ')
print('Cheese')
</code></pre>
<hr/>
<p>Technically, I think I may be cheating in a few ways here:</p>
<ul>
<li>The docs say the ABC <code>TextIOBase</code> wants <code>detach</code>, <code>read</code>, and <code>readline</code>, even if they don't make sense here. But the ABC doesn't seem to enforce them as abstract methods, so I didn't bother.</li>
<li>I <em>think</em> it's legal (and it works) to leave <code>encoding</code> and <code>errors</code> set to <code>None</code>, since we're just passing through to another <code>TextIOBase</code> and expecting it to do the encoding, but I can't find anything that <em>says</em> it's legal. And if some code were to test <code>sys.stdout.encoding</code> to see if it's UTF-8 or something, that might be trouble.</li>
<li>Similarly for <code>newlines</code>. And, since I haven't tested on Windows, I can't be as sure that it works.</li>
</ul>
<p>Also, forwarding other methods to <code>self.file</code> might be a good idea, like <code>fileno()</code> and <code>isatty()</code>. But I'd worry that any app that wants to access <code>stdout</code> as a TTY probably need to know about the <code>Filler</code> that we stuck in front of it, not just transparently go through it.</p>
<hr/>
<p>This is of course all Python 3-specific. In Python 2:</p>
<ul>
<li><a href="https://docs.python.org/2/library/sys.html#sys.stdout" rel="nofollow noreferrer"><code>sys.stdout</code></a> is a <code>file</code>, not a <code>TextIOWrapper</code>. The API you need to wrap is a bit different, and not nearly as well defined. </li>
<li>Unless you <code>__future__</code> up the 3.x-style <code>print</code> function, <code>print</code> is a statement, so you can't monkeypatch it. (I mean, you could write an import hook that bytecode-hacks out every <code>PRINT_*</code> bytecode, or maybe even inject a .so that replaces <code>PyObject_Print</code>â€¦ but who cares anyway? It's Python 2.)</li>
</ul>
</div>
<span class="comment-copy">Before looking at my somewhat complicated answer, would it be acceptable to just have a function <code>def pf(arg): print(textwrap.fill(arg, 70))</code>, and then everywhere you were calling <code>print</code> just call <code>pf</code> instead? It obviously won't give you the full API of <code>print</code>, and it won't affect anything that other modules you <code>import</code> try to output, and so on, but it has the virtue of being dead simple.</span>
<span class="comment-copy">What do you want to happen when stuff gets printed that doesn't end in a newline? Eg, should <code>print('a', end=''); print('b', end=''); print('c')</code> print <code>abc</code> followed by a single newline, or should it print on 3 separate lines?</span>
<span class="comment-copy">I <i>was</i> going to post an answer, but it's so similar to yours that I won't bother. However, you should consider creating a <code>textwrap.TextWrapper</code> instance and call its <code>.fill</code> method. The <code>textwrap.fill</code> convenience function creates a new instance on every call.</span>
<span class="comment-copy">@PM2Ring Yeah, the disadvantage is that if you want to change the width, you have to either forward a <code>@property</code> in <code>Filler</code>, or explicitly set <code>stdout.textwrapper.width</code>, and now that I think about it, that's not much of a disadvantage.</span>
<span class="comment-copy">Indeed. :) And the upside is that your Filler <code>__init__</code> could easily accept all the <code>Textwrap</code> kwargs and pass them on. Of course, the OP may not need that flexibility. Speaking of which, it would be nice to get some feedback from the OP...</span>
