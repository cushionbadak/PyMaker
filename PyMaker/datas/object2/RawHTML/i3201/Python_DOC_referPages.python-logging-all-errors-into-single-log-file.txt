<div class="post-text" itemprop="text">
<p>I am coding a tool in python and I want to put all the errors -and only the errors-(computations which didn't go through as they should have) into a single log file. Additionally I would want to have a different text in the error log file for each section of my code in order to make the error log file easy to interpret. How do I code this? Much appreciation for who could help with this!</p>
</div>
<div class="post-text" itemprop="text">
<p>Check out the python module <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging</a>. This is a core module for unifying logging not only in your own project but potentially in third party modules too.</p>
<p>For a minimal logging file example, this is taken directly from <a href="https://docs.python.org/3/howto/logging.html#logging-to-a-file" rel="nofollow noreferrer">the documentation</a>:</p>
<pre class="lang-python prettyprint-override"><code>import logging
logging.basicConfig(filename='example.log',level=logging.DEBUG)
logging.debug('This message should go to the log file')
logging.info('So should this')
logging.warning('And this, too')
</code></pre>
<p>Which results in the contents of <code>example.log</code>:</p>
<pre class="lang-none prettyprint-override"><code>DEBUG:root:This message should go to the log file
INFO:root:So should this
WARNING:root:And this, too
</code></pre>
<p>However, I personally recommend using the yaml configuration method (requires <a href="https://pyyaml.org/" rel="nofollow noreferrer">pyyaml</a>):</p>
<pre class="lang-none prettyprint-override"><code>#logging_config.yml

version: 1
disable_existing_loggers: False
formatters:
  standard:
    format: '%(asctime)s [%(levelname)s] %(name)s - %(message)s'
handlers:
  console:
    class: logging.StreamHandler
    level: INFO
    formatter: standard
    stream: ext://sys.stdout
  file:
    class: logging.FileHandler
    level: DEBUG
    formatter: standard
    filename: output.log
  email:
    class: logging.handlers.SMTPHandler
    level: WARNING
    mailhost: smtp.gmail.com
    fromaddr: to@address.co.uk
    toaddrs: to@address.co.uk
    subject: Oh no, something's gone wrong!
    credentials: [email, password]
    secure: []
root:
  level: DEBUG
  handlers: [console, file, email]
  propagate: True
</code></pre>
<p>Then to use, for example:</p>
<pre class="lang-Python prettyprint-override"><code>import logging.config
import yaml

with open('logging_config.yml', 'r') as config:
    logging.config.dictConfig(yaml.safe_load(config))

logger = logging.getLogger(__name__)

logger.info("This will go to the console and the file")
logger.debug("This will only go to the file")
logger.error("This will go everywhere")

try:
    list = [1, 2, 3]
    print(list[10])
except IndexError:
    logger.exception("This will also go everywhere")
</code></pre>
<p>This prints:</p>
<pre class="lang-none prettyprint-override"><code>2018-07-18 13:29:21,434 [INFO] __main__ - This will go to the console and the file
2018-07-18 13:29:21,434 [ERROR] __main__ - This will go everywhere
2018-07-18 13:29:21,434 [ERROR] __main__ - This will also go everywhere
Traceback (most recent call last):
  File "C:/Users/Chris/Desktop/python_scratchpad/a.py", line 16, in &lt;module&gt;
    print(list[10])
IndexError: list index out of range
</code></pre>
<p>While the contents of the log file is:</p>
<pre class="lang-none prettyprint-override"><code>2018-07-18 13:35:55,423 [INFO] __main__ - This will go to the console and the file
2018-07-18 13:35:55,424 [DEBUG] __main__ - This will only go to the file
2018-07-18 13:35:55,424 [ERROR] __main__ - This will go everywhere
2018-07-18 13:35:55,424 [ERROR] __main__ - This will also go everywhere
Traceback (most recent call last):
  File "C:/Users/Chris/Desktop/python_scratchpad/a.py", line 15, in &lt;module&gt;
    print(list[10])
IndexError: list index out of range
</code></pre>
<p>Of course, you can add or remove handlers, formatters, etc, or do all of this in code (see the Python documentation) but this is my starting point whenever I use logging in a project. I find it helpful to have the configuration in a dedicated config file rather than polluting my project with defining logging in code.</p>
</div>
