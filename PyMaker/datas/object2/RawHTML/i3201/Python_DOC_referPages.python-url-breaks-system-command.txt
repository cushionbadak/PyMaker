<div class="post-text" itemprop="text">
<p>I am trying to open chromium to an authorization URL with a specific launch parameter. I was not able to find the solution to this launch parameter using the webbrowser library, so I moved onto os.system</p>
<pre><code>browser_cmd = "chromium-browser --password-store=basic " + auth_url
os.system(browser_cmd)
</code></pre>
<p>This works up until the "&amp;" in the URL. So chromium opens without bothering me with keyring nonsense, but only opens the URL until the first &amp;. Is there a way of handling the URL and maintaining its integrity?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is because <code>&amp;</code> is special to the shell. The canonical way to run a subprocess from within Python 3 is:</p>
<pre><code>import subprocess
subprocess.run(['chromium-browser', '--password-store=basic', auth_url],
               check=True)
print('chromium-browser exited successfully')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is exactly why you shouldn't use <code>os.system</code> for anything non-trivial. As <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">the docs</a> for that function say:</p>
<blockquote>
<p>The <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow noreferrer"><code>subprocess</code></a> module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function. See the <a href="https://docs.python.org/3/library/subprocess.html#subprocess-replacements" rel="nofollow noreferrer">Replacing Older Functions with the <code>subprocess</code> Module</a> section in the <a href="https://docs.python.org/3/library/subprocess.html#module-subprocess" rel="nofollow noreferrer"><code>subprocess</code></a> documentation for some helpful recipes.</p>
</blockquote>
<p>If you follow that link, you'll see that you can write this as:</p>
<pre><code>subprocess.call(['chromium-browser', '--password-store=basic', auth_url])
</code></pre>
<p>Because you're passing a list of arguments, rather than trying to put them together into a string that you can smuggle through the shell, you don't have to worry about quoting, or anything else.</p>
<p>By the way, you probably want to use <code>run</code> rather than <code>call</code> here, but for some reason the recipes still haven't been updated in the docs as of 3.7, and I didn't want to add confusion by showing something that doesn't matchâ€¦ Anyway, you should read the at least the quick-start "Using" section at the top of the docs.</p>
<hr/>
<p>If you really want to use <code>os.system</code> anyway for some reason, you will need to quote and/or escape the <code>auth_url</code> argument. Assuming you don't care about Windows, the best way to do this is with the <a href="https://docs.python.org/3/library/shlex.html#shlex.quote" rel="nofollow noreferrer"><code>shlex</code></a> module:</p>
<pre><code>browser_cmd = "chromium-browser --password-store=basic " + shlex.quote(auth_url)
os.system(browser_cmd)
</code></pre>
<p>If you <em>do</em> care about Windows, you can add <code>posix=False</code> to the <code>quote</code> call. The effects of the <code>posix</code> flag are documented under the <a href="https://docs.python.org/3/library/shlex.html#shlex.shlex" rel="nofollow noreferrer"><code>shlex</code> constructor</a>. The default <code>True</code> value means it follows POSIX rules as closely as possible, which means it should be able to handle anything that could possibly be handled, as long as your shell is strictly compatible with <code>sh</code> (as, e.g., <code>bash</code> is, but Windows <code>cmd</code> is definitely not, and even <code>tcsh</code> or <code>fish</code> may not be). With <code>False</code>, it uses "compatibility mode". For simple examples like yours, it should work for most shells without fiddling, but if you need to get more complicated, you need to read <a href="https://docs.python.org/3/library/shlex.html#improved-shell-compatibility" rel="nofollow noreferrer">Improved Compatibility with Shells</a>. (And, for Windows <code>cmd</code> or <code>PowerShell</code>, there's a limit to how far you can push things.)</p>
</div>
<span class="comment-copy">Why not just use selenium eh?</span>
<span class="comment-copy">It's more likely that <code>&amp;</code> is special to the shell, not the browser.</span>
<span class="comment-copy">@jwodder Of course, thanks, that was a typo.</span>
<span class="comment-copy">This is an excellent explanation. I appreciate your help.</span>
