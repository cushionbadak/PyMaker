<div class="post-text" itemprop="text">
<p>Let's say I have this folder structure:</p>
<pre><code>My Project
├── One
│   ├── Another Thing
│   └── Two
│       ├── Three
│       │   └── foo.py
│       └── Whatever
└── Something Else
</code></pre>
<p>From <code>foo.py</code>, using Python 2, how would I get a list of all its parent directories? It should look something like this:</p>
<pre><code>['My Project', 'One', 'Two', 'Three']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get the path of the current Python module by using the <a href="https://docs.python.org/3/reference/import.html#__file__" rel="nofollow noreferrer"><code>__file__</code> attribute</a> set on all Python modules when Python loads them from a file on disk. This is a string representing the absolute or relative path (the latter usually only when it's the <code>__main__</code> script) to the source file or <code>.pyc</code> byte-cache file of the module.</p>
<p>Use the <a href="https://docs.python.org/library/os.path.html" rel="nofollow noreferrer"><code>os.path</code> module</a> to a) ensure that the path is absolute, and b), get all the directory names:</p>
<pre><code>import os

HERE = os.path.dirname(os.path.abspath(__file__))

def path_list(pathname):
    drive, directory = os.path.splitdrive(pathname)
    path = [] if not drive else [drive]
    # with no UNC prefix, normpath guarantees the path uses os.sep
    path += filter(None, os.path.normpath(directory).split(os.sep))
    return path
</code></pre>
<p>The <a href="https://docs.python.org/3/library/os.path.html#os.path.splitdrive" rel="nofollow noreferrer"><code>os.path.splitdrive()</code></a> call is needed to on Windows, where network (UNC) paths can start with <code>\\hostname\mount</code> or with <code>C:\\</code> (drive letters). The above includes such a prefix as the first element. Another happy side-effect of splitting of a UNC prefix is that this avoids one corner-case where <code>os.path.normpath()</code> would not replace <code>os.altsep</code> separators (<code>/</code> on Windows) with <code>\</code> (the Windows <code>os.sep</code> value) if the path starts with the special <code>\\?\</code> or <code>\\.\</code> prefixes.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; __file__ = os.path.join(os.sep, 'My Project', 'One', 'Two', 'Three', 'foo.py')
&gt;&gt;&gt; __file__
'/My Project/One/Two/Three/foo.py'
&gt;&gt;&gt; HERE = os.path.dirname(os.path.abspath(__file__))
&gt;&gt;&gt; HERE
'/My Project/One/Two/Three'
&gt;&gt;&gt; path_list(HERE)
['My Project', 'One', 'Two', 'Three']
</code></pre>
<p>On Python 3.x, or if you are prepared to install a <a href="https://pypi.org/project/pathlib2/" rel="nofollow noreferrer">backport</a>, you can also use the <a href="https://docs.python.org/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code> library</a>; it provides <code>Path</code> instances that have a <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parts" rel="nofollow noreferrer"><code>Path.parts</code> attribute</a> that gives you exactly the same info (with the root part represented by <code>os.sep</code> or the drive letter or UNC path on Windows):</p>
<pre><code>try:
    from pathlib import Path
except ImportError:
    # pathlib2 backport
    from pathlib2 import Path

HERE = Path(__file__).resolve().parent
path_list = HERE.parts[1:] if HERE.root else HERE.parts
</code></pre>
<p>(Note: <code>Path.parts</code> produces a tuple, if you must have a list, pass the result to <code>list()</code> first).</p>
<p>You may also be interested in the <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parents" rel="nofollow noreferrer"><code>Path.parents</code> sequence</a>, which gives you all the parent directories as <code>Path</code> instances, in reverse order:</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; HERE = Path(__file__).resolve().parent
&gt;&gt;&gt; HERE
PosixPath('/My Project/One/Two/Three')
&gt;&gt;&gt; HERE.parts[1:] if HERE.root else HERE.parts
('My Project', 'One', 'Two', 'Three')
&gt;&gt;&gt; list(HERE.parents)
[PosixPath('/My Project/One/Two'), PosixPath('/My Project/One'), PosixPath('/My Project'), PosixPath('/')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get the list of the directory in a list, Just get your current working directory and split with <code>/</code></p>
<pre><code>In [6]: import os

In [7]: print os.getcwd().split(os.sep)[1:]
['home', 'rahul', 'Projects', 'Resume_parser', 'Code_base']
</code></pre>
<p>For a specific file,</p>
<pre><code>In [16]: print os.path.abspath('helpers.py').split(os.sep)[1:-1]
['home', 'rahul', 'Projects', 'Resume_parser', 'Code_base']
</code></pre>
</div>
<span class="comment-copy">So you want to find the full path of the <i>current Python module</i>?</span>
<span class="comment-copy">@MikeScotty: at the very least, include <i>in your comment here</i> what that link is about. Just such a link is not constructive as it lacks any and all context. See <a href="//meta.stackoverflow.com/a/356051">Is idownvotedbecau.se recommended?</a> I've deleted your comment, if you want to re-post, please address those concerns.</span>
<span class="comment-copy">Hi, try taking a look at this question, it might give you an idea of what to do <a href="https://stackoverflow.com/questions/31525697/how-do-i-get-a-files-parent-directory">Reference</a></span>
<span class="comment-copy">@MartijnPieters Yes, and ideally in a list (although a string could also work, since I can split it by <code>/</code>)</span>
<span class="comment-copy">@jeffchef That seems to only be for going up by one directory -- I need the whole path.</span>
<span class="comment-copy">This is not cross-platform safe. <b>At the very least</b> use <code>os.path.normpath</code> and then split on <code>os.sep</code>, but this can still lead to issues with network drive paths on Windows.</span>
<span class="comment-copy">Also <code>os.getcwd()</code> returns the current working directory, not the directory in which a module lives...</span>
<span class="comment-copy">@MartijnPieters It doesn't need to be cross-platform safe. It will only be running on one Mac OS X device.</span>
<span class="comment-copy">@TheoC: that may be the case for <i>you</i>, but answers on Stack Overflow are viewed and used by a far wider audience. It's important to be aware of what issues code might have on the different platforms those other visitors might be using.</span>
