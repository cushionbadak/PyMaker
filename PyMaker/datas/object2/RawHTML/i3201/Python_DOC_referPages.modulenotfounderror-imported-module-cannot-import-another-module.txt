<div class="post-text" itemprop="text">
<p>Working directory is shaped like:</p>
<pre><code>* main_script.py

/ module_to_import

    * __init__.py

    * script_1.py

    * script_2.py
</code></pre>
<p>In main_script.py we have</p>
<pre><code>from module_to_import import script_1

script_1.call_something()
</code></pre>
<p>In script_1.py we have</p>
<pre><code>import script_2

def call_something():
    something = script_2.get_something()
    something = something + 1
    return something
</code></pre>
<p>When main_script.py is run
This returns a </p>
<blockquote>
<blockquote>
<p>ModuleNotFoundError: No Module named 'script_2'</p>
</blockquote>
</blockquote>
<p>I understand this could be provisionally resolved by directly importing script_2 into main_script.</p>
<p>Is there a way to resolve this so that script_1 can reliably import script_2 even when main_script has not imported script_2 itself?</p>
</div>
<div class="post-text" itemprop="text">
<p>When your package is structured as a subpackage, in script_1.py you can use either absolute import</p>
<pre><code>import module_to_import.script_2 as script_2
</code></pre>
<p>or relative one:</p>
<pre><code>from . import script_2
</code></pre>
<p>You can find the documentation about it here:
<a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html#intra-package-references</a></p>
</div>
