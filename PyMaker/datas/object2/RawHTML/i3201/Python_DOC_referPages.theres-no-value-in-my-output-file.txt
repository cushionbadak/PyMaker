<div class="post-text" itemprop="text">
<p>my file contains "Name" and 5 eye movement values (TFF, TFD, TVD, FB, FC). I want to sum up each eye movement values if the rows under Name column are the same. It seems like the code is working, there's no error happened, but my output files stayed empty. Could anyone give me some pointers where went wrong? Here's the code:</p>
<pre><code>import csv

file  = open("P01_All.csv", "r") #Open CSV File in Read Mode
reader = csv.reader(file) #Create reader object which iterates over lines
outfile = open("Name.csv","w")
outfile2 = open("TFF.csv","w")
outfile3 = open("TFD.csv","w")
outfile4 = open("TVD.csv","w")
outfile5 = open("FB.csv","w")
outfile6 = open("FC.csv","w")


class Object:                   #Object to store unique data
    def __init__(self, Name, TFF, TFD, TVD, FB, FC):
        self.Name = Name
        self.TFF = TFF
        self.TFD = TFD
        self.TVD = TVD
        self.FB = FB
        self.FC = FC



rownum = 0 #Row Number currently iterating over
list = []  #List to store objects

def checkList(Name, TFF, TFD, TVD, FB, FC):

    for object in list:  #Iterate through list        
        if object.Name == Name:  
            object.TFF += float(TFF)
            object.TFD += float(TFD)
            object.TVD += float(TVD)
            object.FB += float(FB)
            object.FC += float(FC)
            return

    newObject = Object(Name, float(TFF),float(TFD), float(TVD), float(FB), float(FC)) #Create a new object with new eye and TFF
    list.append(newObject)  #Add to list and break out

for row in reader:  #Iterate through all the rows
    if rownum == 0:  #Store header row seperately to not get confused
        header = row
    else:
        Name = row[0]
        TFF = row[1]
        TFD = row[2]
        TVD = row[3]
        FB = row[4]
        FC = row[5]

        if len(list) == 0:  #Default case if list = 0
            newObject = Object(Name, float(TFF),float(TFD), float(TVD), float(FB), float(FC))
            list.append(newObject)
        else:  #If not...
            checkList(Name, TFF, TFD, TVD, FB, FC)


rownum += 1

for each in list: #Print out result
#   print(each.Name, each.TFF, each.TFD, each.TVD, each.FB, each.FC)
    outfile.write(each.Name + "\n" )
    outfile2.write(str(each.TFF)+ "\n" )
    outfile3.write(str(each.TFD)+ "\n" )
    outfile4.write(str(each.TVD)+ "\n" )
    outfile5.write(str(each.FB)+ "\n" )
    outfile6.write(str(each.FC)+ "\n" )

file.close() #Close file
outfile.close()
outfile2.close()
outfile3.close()
outfile4.close()
outfile5.close()
outfile6.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like @zwer said, the reason why you have nothing in your output file is because you don't increment <code>rownum</code> while you are iterating the rows from your input file. By indenting the line <code>rownum += 1</code> you put it inside your loop where you read each row. So with minimal modification it would look</p>
<pre><code>import csv

file  = open("P01_All.csv", "r") #Open CSV File in Read Mode
reader = csv.reader(file) #Create reader object which iterates over lines
outfile = open("Name.csv","w")
outfile2 = open("TFF.csv","w")
outfile3 = open("TFD.csv","w")
outfile4 = open("TVD.csv","w")
outfile5 = open("FB.csv","w")
outfile6 = open("FC.csv","w")


class Movement_value:                   #Object to store unique data
    def __init__(self, Name, TFF, TFD, TVD, FB, FC):
        self.Name = Name
        self.TFF = TFF
        self.TFD = TFD
        self.TVD = TVD
        self.FB = FB
        self.FC = FC



rownum = 0 #Row Number currently iterating over
notebook = []  #List to store objects

def checkList(Name, TFF, TFD, TVD, FB, FC):

    for value in notebook:  #Iterate through list        
        if value.Name == Name:  
            value.TFF += float(TFF)
            value.TFD += float(TFD)
            value.TVD += float(TVD)
            value.FB += float(FB)
            value.FC += float(FC)
            return

    newObject = Movement_value(Name, float(TFF),float(TFD), float(TVD), float(FB), float(FC)) #Create a new object with new eye and TFF
    notebook.append(newObject)  #Add to list and break out

for row in reader:  #Iterate through all the rows
    if rownum == 0:  #Store header row seperately to not get confused
        header = row
    else:
        Name = row[0]
        TFF = row[1]
        TFD = row[2]
        TVD = row[3]
        FB = row[4]
        FC = row[5]

        if len(notebook) == 0:  #Default case if list = 0
            newObject = Movement_value(Name, float(TFF),float(TFD), float(TVD), float(FB), float(FC))
            notebook.append(newObject)
        else:  #If not...
            checkList(Name, TFF, TFD, TVD, FB, FC)


    rownum += 1

for each in notebook: #Print out result
#   print(each.Name, each.TFF, each.TFD, each.TVD, each.FB, each.FC)
    outfile.write(each.Name + "\n" )
    outfile2.write(str(each.TFF)+ "\n" )
    outfile3.write(str(each.TFD)+ "\n" )
    outfile4.write(str(each.TVD)+ "\n" )
    outfile5.write(str(each.FB)+ "\n" )
    outfile6.write(str(each.FC)+ "\n" )

file.close() #Close file
outfile.close()
outfile2.close()
outfile3.close()
outfile4.close()
outfile5.close()
outfile6.close()
</code></pre>
<p>I have made some additional change: It's better that you don't use <a href="https://docs.python.org/3/library/functions.html?highlight=object#func-list" rel="nofollow noreferrer"><code>list</code></a> or <a href="https://docs.python.org/3/library/functions.html?highlight=object#object" rel="nofollow noreferrer"><code>object</code></a> as variable names because they are already used in Python and by doing so you'll override their meaning. You could have a bad surprise eventually.</p>
<p>But we can do more. </p>
<ul>
<li>We don't need to create a class to hold the values</li>
<li>We can work with files using context managers to make sure that our file is not kept open for not relevant reasons.</li>
</ul>
<p>Here's a version that is shorter than yours: </p>
<pre><code>import csv
import pathlib

input_filepath = pathlib.Path("Input.csv")
output_filepath = pathlib.Path("")

with open(input_filepath, newline="") as input_file:
    # Where our data will be kept
    input_data = {}

    csv_reader = csv.reader(input_file)
    # Skip the first line
    next(csv_reader)

    for (Name, *rest_of_data) in csv_reader:
        if Name in input_data:
            for (index_of_data_to_update, data_to_update) in enumerate(rest_of_data):
                input_data[Name][index_of_data_to_update] += float(data_to_update)
        else:
            input_data[Name] = [float(x) for x in rest_of_data]

output_rows = ([name] + list(data) for (name, data) in input_data.items())

output_filenames = [
    "Name.csv",
    "TFF.csv",
    "TFD.csv",
    "TVD.csv",
    "FB.csv",
    "FC.csv"
    ]

output_files = [open(output_filepath / filename, "w") for filename in output_filenames]

# Open all the files
with output_files[0], output_files[1], output_files[2], output_files[3], \
     output_files[4], output_files[5]:
    for row in output_rows:
        for (output_file, data) in zip(output_files, row):
            output_file.write("{}\n".format(data))
</code></pre>
</div>
<span class="comment-copy">Welcome to StackOverflow.  Please read and follow the posting guidelines in the help documentation, as suggested when you created this account.  <a href="http://stackoverflow.com/help/mcve">Minimal, complete, verifiable example</a> applies here.  We cannot effectively help you until you post your MCVE code and accurately describe the problem. We should be able to paste your posted code into a text file and reproduce the problem you described.</span>
<span class="comment-copy">This code is hardly minimal and contains no apparent debugging attempt, such as tracing <code>print</code> statements.  See this lovely <a href="https://ericlippert.com/2014/03/05/how-to-debug-small-programs/" rel="nofollow noreferrer">debug</a> blog for help.</span>
<span class="comment-copy">What I would suggest you do is break this down s/t you are only looking at one eye movement; get the entire process working for it, then expand your code.</span>
<span class="comment-copy">Your <code>rownum</code> will always be zero as it's not in your <code>for row in reader:</code> block, hence <code>if rownum == 0</code> will always evaluate to <code>True</code>. Unless you screwed up the indentation while pasting to SO, that's probably your main issue.</span>
