<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2458026/python-gui-events-out-of-order">python gui events out of order</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>Consider the following simple code:</p>
<pre><code>from tkinter import *

startingWindow = Tk()

entry = Entry(startingWindow)
entry.grid(row=0, column=0)

def writeWhatYouGet():        
    print((entry.get()).strip())

entry.bind('&lt;Key&gt;', lambda event:writeWhatYouGet())
startingWindow.mainloop()
</code></pre>
<p>I expect that when I type "1", I get "1" printed right away. However, I only get "1", when I press the second key, which is "2" in this case.</p>
<p>Like the following:</p>
<p><a href="https://i.stack.imgur.com/1UQVB.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/1UQVB.jpg"/></a></p>
<p>and the printed output is like</p>
<pre><code>1
12
123
</code></pre>
<p>However I <strong>expect</strong> the output to be like:</p>
<pre><code>1
12
123
1234
</code></pre>
<p><strong><em>How I can solve this so I get what I write right away?</em></strong></p>
</div>
<div class="post-text" itemprop="text">
<p>This behavior happens because the class binding that inserts the key in the Entry is executed after the widget's binding. Therefore, when <code>writeWhatYouGet</code> is executed, the Entry does not contains\ the new key yet. You can check this with the following code:</p>
<pre><code>from tkinter import *

startingWindow = Tk()

entry = Entry(startingWindow)
entry.grid(row=0, column=0)

def writeWhatYouGet():        
    print('bind', (entry.get()).strip())

def writeWhatYouGet2():        
    print('bind_class', (entry.get()).strip())

entry.bind('&lt;Key&gt;', lambda event:writeWhatYouGet())
entry.bind_class('Entry', '&lt;Key&gt;', lambda event:writeWhatYouGet2(), True)
startingWindow.mainloop()
</code></pre>
<p>To solve this problem, you can use figbeam solution or you can use the validate command option of the Entry:</p>
<pre><code>from tkinter import *

startingWindow = Tk()


def writeWhatYouGet(text):        
    print(text.strip())
    return True

validatecmd = startingWindow.register(writeWhatYouGet)

entry = Entry(startingWindow, validate='key', validatecommand=(validatecmd, '%P'))
# %P means that the value the text will have if the change is allowed is passed to validatecmd.
entry.grid(row=0, column=0)

startingWindow.mainloop()
</code></pre>
<p>More details about entry validation: <a href="http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/entry-validation.html" rel="nofollow noreferrer">http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/entry-validation.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I don't understand why your code does not work, but I can offer a solution that does work. </p>
<p>Associate the entry with a StringVar and then trace all changes to the StringVar:</p>
<pre><code>from tkinter import *

startingWindow = Tk()

text = StringVar()
entry = Entry(startingWindow, textvariable=text)
entry.grid(row=0, column=0)

def writeWhatYouGet(*args):
    print(text.get())

text.trace("w", writeWhatYouGet)   # Trace changes to StringVar "text"

startingWindow.mainloop()
</code></pre>
<p>Reference: <a href="http://effbot.org/tkinterbook/variable.htm" rel="nofollow noreferrer">The Variable Classes (BooleanVar, DoubleVar, IntVar, StringVar)</a></p>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/2458026/3714930">python gui events out of order</a></span>
<span class="comment-copy">@downvoter, please comment when downvoting. Beind duplicate doesn't deserve downvoting, just marking as dublicate.</span>
<span class="comment-copy">@AhmedWas Down-votes can be for many reason. You should not assume the reason is specifically for the duplicate post (though people do down-vote for this reason). For example in your question you only describe a problem you ran into but do not show any attempt to solve the problem or show what you have tried to fix it on your own before posting. So I would argue the down-vote is for this lack of effort instead of the duplicate post. (does't matter if you did try something to fix it your post does not show it)</span>
<span class="comment-copy">Excellent answer with fine explanation. Thanks man.</span>
<span class="comment-copy">By the way, the <code>text.trace("w", writeWhatYouGet)</code> syntax is deprecated in python 3.6 (<a href="https://docs.python.org/3/whatsnew/3.6.html" rel="nofollow noreferrer">docs.python.org/3/whatsnew/3.6.html</a>), the new syntax is <code>text.trace_add("write", writeWhatYouGet)</code>.</span>
