<div class="post-text" itemprop="text">
<p>I´m new to matplotlib and python in general.  </p>
<ul>
<li>I'm on windows running typeperf.exe to basically reads processor information in real time using cli:</li>
</ul>
<p><code>C:\&gt;typeperf "\Procesador(_Total)\% de tiempo de procesador" &gt; C:\Users\hb\Documents\Scripts\log.csv</code></p>
<ul>
<li>The data structure at the CSV is as follows:</li>
</ul>
<p><code>"07/18/2018 15:50:55.574","3.429826"
"07/18/2018 15:50:56.577","0.307183"
"07/18/2018 15:50:57.589","18.932128"</code></p>
<ul>
<li><p>At the same time - same machine - I run a code which basically reads that CSV producing a live plot ( it works! )</p></li>
<li><p>The plot is being drawn with a new line every 1 second. </p></li>
</ul>
<blockquote>
<p><strong>Objective:</strong>  make the graph to show only the last 60 seconds of capture and continue moving forward with the new data in the CSV.</p>
</blockquote>
<p>I've read pyplot documentation and tried .clf() and .clear() with no luck. Here's just the portion of code where I´m having a hard time:</p>
<pre><code>def animate(i):
    with open(data_in, 'r', newline='') as f_input:
        x, y = [], []

        end_t = time.time() + 60

        while time.time() &lt; end_t:
            for line in range(2):
                next(f_input)

            for row in csv.reader(f_input):
                if row:
                    x.append(datetime.strptime(row[0], '%m/%d/%Y %H:%M:%S.%f'))
                    y.append(float(row[1]))

    ax1.clear()
    plt.title('system\n')
    plt.xlabel('Current Time')
    plt.ylabel('Current HTTP Connections\n')
    ax1.plot(x,y)
    time_format = DateFormatter('%H:%M:%S')
    plt.gca().xaxis.set_major_formatter(time_format)
    start += 1

data_out = animation.FuncAnimation(fig, animate, interval=1000)
plt.show()
</code></pre>
<p>I tried the while loop in an attempt to make the plot read just for that amount of time. It doesn't work.</p>
<p>Would you please point me out to the right path?</p>
<p>Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>X and Y currently contain all timesteps and values in the .csv file. Instead of plotting X and Y entirely, you could only plot the last 60 values:</p>
<pre><code>if len(x) &lt; 60:
    ax1.plot(x,y)
else:
    ax1.plot(x[60:],y[60:])
</code></pre>
<p>This approach could become cumbersome as the .csv file grows with days and years. In that case refreshing (and archiving) the file every now and then should fix it.</p>
</div>
<span class="comment-copy">It seems like you comparing the actual times, not the times from your csv file.</span>
<span class="comment-copy">If you are confident of the period/sample rate of the data a quick fix might be to just plot the last 60 items in <code>x</code> and <code>y</code> - <code>ax1.plot(x[:-60],y[:-60])</code>.  though you may want to look at the actual timestamps  to determine the  60 second span.  Making <code>datetime</code> objects and <i>doing math</i> with them would work.</span>
<span class="comment-copy">Another option would be to use <a href="https://docs.python.org/3/library/collections.html#deque-objects" rel="nofollow noreferrer"><code>collections.deque(maxlen=60)</code></a> for <code>x</code> and <code>y</code></span>
<span class="comment-copy">Sorry the dealy.  I've succesfully used deque!  Thank you very much !</span>
