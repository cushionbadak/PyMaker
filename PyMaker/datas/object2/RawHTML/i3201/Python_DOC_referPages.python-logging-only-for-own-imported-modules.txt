<div class="post-text" itemprop="text">
<p>referring to this question here: <a href="https://stackoverflow.com/questions/35325042/python-logging-disable-logging-from-imported-modules">LINK</a>
How can I set up a config, that will only log my root script and my own sub-scripts? The question of the link asked for disabling all imported modules, but that is not my intention.</p>
<p><strong>My root setup</strong>:</p>
<pre><code>import logging
from exchangehandler import send_mail
log_wp = logging.getLogger(__name__)

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s - %(levelname)s [%(filename)s]: %(name)s %(funcName)20s - Message: %(message)s',
                    datefmt='%d.%m.%Y %H:%M:%S',
                    filename='C:/log/myapp.log',
                    filemode='a')

handler = logging.StreamHandler()
log_wp.addHandler(handler)

log_wp.debug('This is from root')

send_mail('address@eg.com', 'Request', 'Hi there')
</code></pre>
<p><strong>My sub-module exchangehandler.py</strong>:</p>
<pre><code>import logging
log_wp = logging.getLogger(__name__)

def send_mail(mail_to,mail_subject,mail_body, mail_attachment=None):
log_wp.debug('Hey this is from exchangehandler.py!')
    m.send_and_save()
</code></pre>
<p><strong>myapp.log</strong>:</p>
<pre><code>16.07.2018 10:27:40 - DEBUG [test_script.py]: __main__                   &lt;module&gt; - Message: This is from root
16.07.2018 10:28:02 - DEBUG [exchangehandler.py]: exchangehandler        send_mail - Message: Hey this is from exchangehandler.py!
16.07.2018 10:28:02 - DEBUG [folders.py]: exchangelib.folders            get_default_folder - Message: Testing default &lt;class 'exchangelib.folders.SentItems'&gt; folder with GetFolder
16.07.2018 10:28:02 - DEBUG [services.py]: exchangelib.services          get_payload - Message: Getting folder ArchiveDeletedItems (archivedeleteditems)
16.07.2018 10:28:02 - DEBUG [services.py]: exchangelib.services          get_payload - Message: Getting folder ArchiveInbox (archiveinbox)
</code></pre>
<p>My problem is, that the log-file contains also a lot of information of the exchangelib-module, that is imported in exchangehandler.py. Either the imported exchangelib-module is configured incorrectly or I have made a mistake. So how can I reduce the log-output only to my logging messages?</p>
<p><strong>EDIT</strong>:
An extract of the folder.py of the exchangelib-module. This is not anything that I have written:</p>
<pre><code>import logging
log = logging.getLogger(__name__)

def get_default_folder(self, folder_cls):
        try:
            # Get the default folder
            log.debug('Testing default %s folder with GetFolder', folder_cls)
            # Use cached instance if available
            for f in self._folders_map.values():
                if isinstance(f, folder_cls) and f.has_distinguished_name:
                    return f
            return folder_cls.get_distinguished(account=self.account)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The imported exchangelib module is not configured at all when it comes to logging. You are configuring it implicitly by calling <code>logging.basicConfig()</code> in your main module.</p>
<p>exchangelib does create loggers and logs to them, but by default these loggers do not have handlers and formatters attached, so they don't do anything visible. What they do, is propagating up to the root logger, which by default also has no handlers and formatters attached.</p>
<p>By calling <code>logging.basicConfig</code> in your main module, you actually attach handlers to the root logger. Your own, desired loggers propagate to the root logger, hence the messages are written to the handlers, but the same is true for the exchangelib loggers from that point onwards.</p>
<p>You have at least two options here. You can explicitly configure "your" named logger(s):</p>
<p><strong>main module</strong></p>
<pre><code>import logging
log_wp = logging.getLogger(__name__) # or pass an explicit name here, e.g. "mylogger"
hdlr = logging.StreamHandler()
fhdlr = logging.FileHandler("myapp.log")
log_wp.addHandler(hdlr)
log_wp.addHandler(fhdlr)
log_wp.setLevel(logging.DEBUG)
</code></pre>
<p>The above is very simplified. To explicitly configure multiple named loggers, refer to the <a href="https://docs.python.org/3/howto/logging.html#configuring-logging" rel="nofollow noreferrer">logging.config HowTo</a></p>
<p>If you rather want to stick to just using the root logger (configured via <code>basicConfig()</code>), you can also explicitly disable the undesired loggers after exchangelib has been imported and these loggers have been created:</p>
<pre><code>logging.getLogger("exchangelib.folders").disabled = True
logging.getLogger("exchangelib.services").disabled = True
</code></pre>
<p>If you don't know the names of the loggers to disable, <code>logging</code> has a dictionary holding all the known loggers. So you could temporarily do this to see all the loggers your program creates:</p>
<pre><code># e.g. after the line 'log_wp.addHandler(handler)'
print([k for k in logging.Logger.manager.loggerDict])
</code></pre>
<p>Using the dict would also allow you to do sth. like this:</p>
<pre><code>for v in logging.Logger.manager.loggerDict.values():
    if v.name.startswith('exchangelib'):
        v.disabled = True
</code></pre>
</div>
<span class="comment-copy">Thank you! I used fileConfig in my main.py to set up an output to console, file1 with level debug and file2 with level info. However, I got a ValueError in my main.py. This is not logged to file1 nor file2. I can only see it in the colsole. How can I catch such error without knowing that it could occur? <a href="https://pastebin.com/TgQZHq05" rel="nofollow noreferrer">link_to_config</a></span>
<span class="comment-copy">Is the ValueError related to your new logging setup? Could you please add the Traceback to your question?</span>
<span class="comment-copy">The setup of logging is fine. There is a problem in my regular code that raise a ValueError: Traceback (most recent call last):&lt;br&gt;x_usr_name, x_password, x_mail, x_servername, x_server, x_endpoint, x_contacts = load_setup()&lt;br&gt;ValueError: too many values to unpack (expected 7)&lt;br&gt;But this is a good example for my logging setup which will not log this error in my files. I just see it in the console of PyCharm. So in general write a function that will raise an error and you will see that it is not logged in a logging file.</span>
<span class="comment-copy">In that case, simply put the part of your code that raises the error inside a <code>try:</code>-<code>except ValueError as e:</code>-block. Inside the <code>except</code> you'd do sth. like <code>log_wp.exception(e)</code>. Please note that you'll have to re-raise the caught exception after logging it in the <code>except</code> block in oder to terminate your program if the severity of the caught exception warrants this.</span>
<span class="comment-copy">This is not an issue introduced by logging, nor can logging solve that on it's own. Logging only does things if you instruct it to do so. You could wrap your whole main program in a <code>try-except Exception as e</code>. That would catch any Exception that raises during execution and is not caught. However, it is the developer's responsibility to identify and handle all potential error cases that might occur during execution, either by validating input before processing or by handling potential excpetions accordingly.</span>
