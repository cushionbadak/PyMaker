<div class="post-text" itemprop="text">
<p>So I'm working on making a simple research bot but I've run into a problem. I was following a guide on using wolfram alpha in python and when I test it I sometimes get the error <code>Traceback (most recent call last):
  File "python", line 6, in &lt;module&gt;
StopIteration</code>. </p>
<p>Here is my code:</p>
<pre><code>import wolframalpha
import wikipedia
client = wolframalpha.Client('XPAQWX-PPQX4AHGAP')
q=input('Problem: ')
res = client.query(q)
print(next(res.results).text)
</code></pre>
<p>It only happens with some queries and it often works, but still its rather annoying. I looked online but didn't find any help, so I don't know if this is new or something is wrong with my code. Anyway, here is a link to a repl I made where its not working <a href="https://repl.it/@Polloz/RowdyVengefulAttributes" rel="nofollow noreferrer">here</a>. Try it with "uranium" I know that one brings the error and so do a few others I've tried. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>This error is telling you that your query had no results.</p>
<hr/>
<p>This line:</p>
<pre><code>print(next(res.results).text)
</code></pre>
<p>… calls <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next</code></a> on an iterator, <code>res.results</code>, without a default value:</p>
<blockquote>
<p>Retrieve the next item from the iterator by calling its <code>__next__()</code> method. If <em>default</em> is given, it is returned if the iterator is exhausted, otherwise <code>StopIteration</code> is raised.</p>
</blockquote>
<p>If <code>res</code> had no results to show you, <code>res.results</code> is an empty iterator. Meaning it's exhausted right from the start, so when you call <code>next</code> on it, you're going to get <code>StopIteration</code>.</p>
<p>And just passing a default isn't going to do much good here. Consider this:</p>
<pre><code>    print(next(res.results, None).text)
</code></pre>
<p>Now, if there are no results, <code>next</code> will return your default value <code>None</code>, and you'll immediately try to do <code>None.text</code>, which will just raise an <code>AttributeError</code>.</p>
<hr/>
<p>One way to fix this is to just handle the error:</p>
<pre><code>try:
    print(next(res.results).text)
except StopIteration:
    print('No results')
</code></pre>
<p>Another is to break that compound expression up into simpler ones, so you <em>can</em> use a default:</p>
<pre><code>result = next(res.results, None)
print(res.text if res else 'No results')
</code></pre>
<hr/>
<p>However, <code>res</code> can include 2 or 3 results just as easily as 0—that's the whole reason it returns an iterator. And usually, you're going to want all of them, or at least a few of them. If that's the case, the best solution is to use a <code>for</code> loop. Iterators are born hoping they'll be used in a <code>for</code> loop, because it makes everyone's like easier:</p>
<pre><code>for result in res.results:
    print(result.text)
</code></pre>
<p>This will do nothing if <code>results</code> is empty, print one result if there's only one, or print all of the results if there are multiple.</p>
<p>If you're worried about getting 500 results when you only wanted a few, you can stop at, say, 3:</p>
<pre><code>for result in itertools.islice(res.results, 3):
    print(result.text)
</code></pre>
<p>… or:</p>
<pre><code>for i, result in enumerate(res.results):
    print(result.text)
    if i &gt; 2: break
</code></pre>
</div>
<span class="comment-copy">Whenever you ask a question that starts with "I was following a guide", please include a link to the guide if at all possible. Sometimes it's useless (but harmless) info, but sometimes it immediately tells us the answer, because someone here knows that it's an outdated guide and can link you to the new version, or because it's a notoriously bad guide that you just shouldn't following, or because the author of the guide is here and knows exactly what you're talking about, etc.</span>
<span class="comment-copy">Also, is that the complete traceback? Usually a traceback includes the line that actually caused the error. I'm <i>pretty sure</i> it's the last one, but it would be better to know than to have to make an educated guess.</span>
<span class="comment-copy">It's because you have no result for this query.</span>
