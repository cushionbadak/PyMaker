<div class="post-text" itemprop="text">
<p>I'm working on some basic animations for python cli interfaces that appear when the script is running.  This is a problem I have with pretty much every script I've written.  If I'm executing the following animation;</p>
<pre><code>def animatedSpinner(*arg):
    animation = ["|","/","-","\\"]
    a = 0
    while True:
        print(animation[a % len(animation)], end="\r")
        a += 1
        time.sleep(0.1)
</code></pre>
<p>It runs fine, but any key presses a user makes while it's running shows up on the screen.  How can I prevent key presses from appearing on screen during an animation or any time a functioning is running? </p>
</div>
<div class="post-text" itemprop="text">
<p>The ways to do this on POSIX and Windows are so different that, unless you want to search for a very high-level wrapper library (which do exist—some of them are lowest-common-denominator but probably have enough functionality for this, while others are very complicated), you might as well consider them separate problems. Since you said POSIX is what you really care about, I'll explain that.</p>
<hr/>
<p>The right way to do this is with <a href="https://docs.python.org/3/library/termios.html" rel="nofollow noreferrer"><code>termios</code></a>. But this can be a bit hairy for beginners, so I'll come back to that at the end. </p>
<p>If you want a quick&amp;dirty solution, you can just call out to the <a href="https://linux.die.net/man/1/stty" rel="nofollow noreferrer"><code>stty</code></a> tool:</p>
<pre><code>import subprocess

def echooff():
    subprocess.run(['stty', '-echo'], check=True)
def echoon():
    subprocess.run(['stty', 'echo'], check=True)
</code></pre>
<hr/>
<p>Whichever way you do it, make sure that you always call <code>echoon</code> before exit, no matter what. Otherwise, you'll leave the console in non-echoing mode, and your user (or you) will have to blindly do a <code>reset</code> or <code>stty echo</code>.</p>
<p>For example, in your main code:</p>
<pre><code>try:
    echooff()
    # do stuff
finally:
    echoon()
</code></pre>
<p>Or, better, using <a href="https://docs.python.org/3/library/contextlib.html" rel="nofollow noreferrer"><code>contextlib</code></a>:</p>
<pre><code>@contextlib.contextmanager
def echo_disabled():
    try:
        echooff()
        yield
    finally:
        echoon()
</code></pre>
<p>Then:</p>
<pre><code>with echo_disabled():
    # do stuff    
</code></pre>
<hr/>
<p>The <a href="https://docs.python.org/3/library/tty.html" rel="nofollow noreferrer"><code>tty</code></a> module's <a href="https://github.com/python/cpython/blob/3.6/Lib/tty.py" rel="nofollow noreferrer">source code</a> is good sample code for getting started—but in this case, what you're doing is pretty close to the example right there in the <code>termios</code> docs:</p>
<pre><code>@contextlib.contextmanager
def echo_disabled():
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    new = termios.tcgetattr(fd)
    new[3] = new[3] &amp; ~termios.ECHO          # lflags
    try:
        yield
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)
</code></pre>
</div>
<span class="comment-copy">Do you need this to be cross-platform? If not, what platform(s) do you care about? For Mac or Linux, you can use the <code>tty</code> and <code>termios</code> modules, or call out to <code>stty -echo</code>, or go higher-level and use <code>curses</code> instead of dealing directly with <code>stdout</code> and <code>stdin</code>.</span>
<span class="comment-copy">Hi, abernert.  stty -echo works great, but would like for the code to be portable to Windows.  What can be used there?  I am reading about using mode.com, not sure if this is the write track.</span>
<span class="comment-copy">The basic mechanisms for talking to Unix ttys and Windows cmd.exe windows are so different that you need (1) separate code for both, (2) a high-level wrapper with minimal features, (3) a ridiculously-high-level wrapper, or (4) a library like <code>ntcurses</code> that knows how to fake things on Windows. The easiest way is probably #2 or #3, but I don't have any specific libraries to recommend (and an SO question is, sadly, not a good place to ask for such recommendations).</span>
<span class="comment-copy">If you want to do #1, I can probably help you get started looking for the Windows solution. But you might be better off searching SO for the question specifically for each platform, and having two separate questions (with a link between them and an explanation of why you're writing two separate versions of the code, etc.) if you can't find anything.</span>
<span class="comment-copy">The traditional answer was conio and wconio, which respectively wrapped Borland and Microsoft libraries for doing basic console stuff like turning off echo, but I'm pretty sure you only want to use those if you need Win9x support, which I assume you don't.</span>
<span class="comment-copy">Amazing explanation, totally understandable.  Thanks again, abarnet, I appreciate it.</span>
