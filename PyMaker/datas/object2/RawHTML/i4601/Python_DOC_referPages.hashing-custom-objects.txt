<div class="post-text" itemprop="text">
<p>hash() method in python can match all immutable objects to unique hash value. However, I cannot understand the behavior of hash() method for objects of user-defined classes. Some of the resources say that if user-defined class do not contain <code>__hash__()</code> and <code>__eq__()</code> methods, that object cannot be hashed. On the other hand, the others claim the opposite one. </p>
<p>In other words, what is the role of <code>__eq__()</code> and <code>__hash__()</code> methods in order to hash custom objects ?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't implement <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer"><code>__hash__</code></a>, <a href="https://docs.python.org/3/library/functions.html#hash" rel="nofollow noreferrer"><code>hash()</code></a> will use the default implementation. If you don't implement <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer"><code>__eq__</code></a>, the default implementation will be used when you compare two instances.</p>
<pre><code>class C:
    pass

class D:
    def __hash__(self):
        return 1

    def __eq__(self, other):
        return True

print(hash(C()))  # changing for every C instance
print(C() == C()) # False since objects are different

print(hash(D()))  # always 1
print(D() == D()) # always True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Basically, 'hash' should be quick, and act as a "triage" calculation to know if two objects are equal or not.</p>
<p>The 'eq' should precisely be the function that tells if the objects are definitely 
 equal or not. Maybe this funciton has to perform a lot of checks ( for instance if you want to define the equality of your objects by the equality of all the member fields, and maybe there is are a lot of them)</p>
<p>The purpose of these two functions is to have a quick way of saying "no, they are not equal" (the hash function), since the comparisons are often used a lot, and most often two objects are not supposed to be "equals".</p>
<p>Instead of executing a lot of "eq" functions, you execute a lot of quick "hash" functions, and if both the hashes match, you execute "eq" to confirm the equality or not.</p>
</div>
<span class="comment-copy">Custom methods =&gt; custom implementation. No custom methods =&gt; default implementation.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/14535730/what-do-you-mean-by-hashable-in-python">What do you mean by hashable in Python?</a></span>
