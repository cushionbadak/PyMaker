<div class="post-text" itemprop="text">
<p>As described in this answer <a href="https://stackoverflow.com/a/13707428/7468395">how to import module</a> one can import a module located in another path this way:</p>
<pre><code>import sys
sys.path.append('PathToModule')
import models.user
</code></pre>
<p>My question is: </p>
<p>How can I execute this other module (and also pass parameters to it), if this other module is setup this way:</p>
<pre><code>if __name__ == '__main__':
    do_something()
</code></pre>
<p>and <code>do_something()</code> uses <code>argparse.ArgumentParser</code> to work with the parameters supplied?</p>
<p><strong>I ADDED THE FOLLOWING AFTER THE FIRST QUESTIONS/COMMENTS CAME UP</strong></p>
<p>I am able to pass the parameters via </p>
<pre><code>sys.argv[1:] = [
    "--param1", "123",
    "--param2", "456",
    "--param3", "111"
]
</code></pre>
<p>so this topic is already covered.</p>
<p>Why do I want to call another module with parameters?</p>
<p>I would like to be able to do a kind of a small regression test for another project. I would like to get this other project via a <code>git clone</code> and have different versions locally available, that I can debug, too, if needed. </p>
<p>But I do not want to be involved too much in that other project (so that forking does not make sense).</p>
<p><strong>AND SO MY REMAINING QUESTION IS</strong></p>
<p>How can I tweak the contents of <code>__name__</code> when calling the other module? </p>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple ways to approach this problem.</p>
<ol>
<li><p>If the module you want to import is well-written, it should have separate functions for parsing the command line arguments and for actually doing work. It should look something like this:</p>
<pre><code>def main(arg1, arg2):
    pass  # do something

def parse_args():
    parser = argparse.ArgumentParser()
    ... # lots of code
    return vars(parser.parse_args())

if __name__ == '__main__':
    args = parse_args()
    main(**args)
</code></pre>
<p>In this case, you would simply import the module and then call its <code>main</code> function with the correct arguments:</p>
<pre><code>import yourModule
yourModule.main('foo', 'bar')
</code></pre>
<p>This is the optimal solution.</p></li>
<li><p>If the module doesn't define such a <code>main</code> function, you can manually set <code>sys.argv</code> and use <a href="https://docs.python.org/3/library/runpy.html#runpy.run_module" rel="nofollow noreferrer"><code>runpy.run_module</code></a> to execute the module:</p>
<pre><code>import runpy
import sys

sys.argv[1:] = ['foo', 'bar']
runpy.run_module('yourModule', run_name='__main__', alter_sys=True)
</code></pre>
<p>Note that this only <em>executes</em> the module; it doesn't <em>import</em> it. (I.e. the module won't be added to <code>sys.modules</code> and you don't get a module object that you can interact with.)</p></li>
</ol>
</div>
<span class="comment-copy">Presumably you can write around the <code>argparse</code> bit. What exactly is it doing?</span>
<span class="comment-copy">A nicely-designed module (which is intended to be used this way) will argparse things into a set of arguments to pass to that <code>do_something</code> function, in which case you just call <code>module.do_something</code> with the right arguments.</span>
<span class="comment-copy">If the module wasn't intended to be used this way, it may be that the right answer is to launch it as a <code>subprocess</code> instead.</span>
<span class="comment-copy">If it is meant to work this way, but just wasn't designed very carefully, you can usually either fake out argparse in some way (if worst comes to worse hackily setting <code>sys.argv</code> or monkeypatching the module) or copy/paste the same work the top-level script code does (but simplified to only handle your case). Ugly, but the fix is to improve the other module.</span>
<span class="comment-copy">so my question is: how can I tweak the contents of <code>__name__</code> when it gets supplied to the module I would like to call</span>
