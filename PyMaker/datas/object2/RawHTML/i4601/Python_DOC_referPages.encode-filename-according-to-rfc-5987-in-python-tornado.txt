<div class="post-text" itemprop="text">
<p>From <a href="https://stackoverflow.com/questions/93551/how-to-encode-the-filename-parameter-of-content-disposition-header-in-http">How to encode the filename parameter of Content-Disposition header in HTTP?</a> I learnt that the encoding defined in RFC 5987 is used to encode filenames in <code>Content-disposition</code> headers. And from <a href="https://stackoverflow.com/a/1361646/739619">https://stackoverflow.com/a/1361646/739619</a> I learnt that support in major browsers is good at least since November 2012. Both questions are rather old, yet I couldn't find a standard way to encode filenames according to this encoding in python / tornado. I have a </p>
<pre><code>self.set_header('Content-Disposition', 'attachment;filename="{}.{}"'.format(basename, format))
</code></pre>
<p>in my code that fails when <code>basename</code> contains characters outside latin1, and I am loking for a standard way to encode it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote" rel="nofollow noreferrer"><code>urllib.parse.quote</code></a> to encode. Just add the boilerplate of <code>filename*=UTF-8''</code>. For instance, this simple server serves a file with a UTF-8 filename:</p>
<pre><code>import tornado.httpserver
import tornado.ioloop
import tornado.web

import urllib.parse

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        filename = 'file "\'√§‚Ü≠ùïê.txt'
        encoded_filename = urllib.parse.quote(filename, encoding='utf-8')
        self.set_header(
            'Content-Disposition',
            'attachment;filename*=UTF-8\'\'{}'.format(encoded_filename))
        self.write('text file with file name file "\'√§‚Ü≠ùïê.txt.\n')
        self.write('Most browsers will encode the " as _ or so.')


application = tornado.web.Application([
    (r"/", MainHandler),
])
http_server = tornado.httpserver.HTTPServer(application)
http_server.listen(8888)
tornado.ioloop.IOLoop.current().start()
</code></pre>
</div>
<span class="comment-copy">Might want to note that it is <a href="https://tools.ietf.org/html/rfc2183" rel="nofollow noreferrer">RFC2183</a> that restricts parameter values to US-ASCII.</span>
<span class="comment-copy">That's exactly what I was looking for, thank you!</span>
<span class="comment-copy">...well, it works in Firefox, while Chrome seems to ignore <code>filename*</code> and to accept <code>filename</code> with the encoded value. Also, it seems to me that the boilerplate <code>UTF-8''</code> is not needed, at least not in Chrome and in Firefox...</span>
<span class="comment-copy">You are right, if I run a server with your code it works for me as well; if I run my complete code it doesn't. I am extending your example piece after piece to reach mine and see where it starts giving the problem, I didn't get there yet, but eventually I will :)</span>
<span class="comment-copy">Got it, it was a typo so stupid that it's not worth mentioning :) now it works as it should. Thanks again!</span>
