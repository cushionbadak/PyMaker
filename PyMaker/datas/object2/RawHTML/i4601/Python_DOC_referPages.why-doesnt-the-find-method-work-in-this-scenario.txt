<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3906137/why-cant-i-call-read-twice-on-an-open-file">Why can't I call read() twice on an open file?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>Contents of file2.txt:</p>
<pre><code>zalgoalpha
beta
</code></pre>
<p>My code:</p>
<pre><code>file = open("file2.txt", "r", encoding = "utf-8")
print(file.read())
print(file.read().find("beta"))
</code></pre>
<p>Why does the second print convey "-1" ("beta" doesn't exist), even though it's right in the file, at index 11?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you call <code>file.read</code>, it moves the cursor to the end of the file, therefore when you call it the second time to find "beta" it will return -1</p>
<p>You can fix this by doing</p>
<pre><code>file.seek(0)
</code></pre>
<p>before you read the file the second time. Alternatively, save the contents of the file into a variable</p>
<pre><code>contents = file.read()
</code></pre>
<p>then you can do what you did before</p>
<pre><code>print(contents)
print(contents.find("beta")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because you've already  consumed the file object on the previous line. The file pointer has nothing left to read </p>
<p>Try this</p>
<pre><code>with open("file2.txt", "r", encoding = "utf-8") as file:
    content = file.read()
    print(content) 
    print(content.find("beta"))
</code></pre>
<p>This way of reading files prevents you from forgetting to close a file, too </p>
</div>
<div class="post-text" itemprop="text">
<p>As written in the <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">Python documentation</a>:</p>
<blockquote>
<p>To read a file’s contents, call f.read(size), which reads some quantity of data and returns it as a string (in text mode) or bytes object (in binary mode). size is an optional numeric argument. When size is omitted or negative, the entire contents of the file will be read and returned; it’s your problem if the file is twice as large as your machine’s memory. Otherwise, at most size bytes are read and returned. If the end of the file has been reached, f.read() will return an empty string ('').</p>
</blockquote>
<p>Which basically means you just read the content of the file and reached the end of file. 
you can do something like that:</p>
<pre><code>with open("file2.txt", "r", encoding = "utf-8") as text_file:
    text = file.read()
    print(text)
    print(text.find("beta"))
</code></pre>
</div>
<span class="comment-copy">You've already read <i>all</i> of the file's data the first time you called <code>file.read</code>. The next time <code>file.read</code> is called, there is no data left to return, so <code>file.read</code> returns an empty string. Thus, <code>str.find</code> will, indeed, return <code>-1</code>.</span>
<span class="comment-copy">Just to add a bit more info: The way @cricket_007 recommends opening your file OP, uses the <i>context manger statement</i> <code>with</code>. You can read more about <code>with</code> and context managers in general <a href="http://book.pythontips.com/en/latest/context_managers.html" rel="nofollow noreferrer">here</a>.</span>
