<div class="post-text" itemprop="text">
<p>I've created an app that works locally and I would like to deploy it to Heroku.
As I deploy it I get error in the Heroku logs about not finding the folders that I specified in my script(as expected, they are absolute paths).</p>
<p>I am trying to make changes but none of them work.
I am using flask for the server side.
I tried using all of the os.path functions but I can't get it to work.</p>
<p>I am also using Windows if it changes anything (I think it should because it goes into the Heroku Server)</p>
<p>The architecture system basically loos like this:</p>
<pre><code>MonKeyGenerator
└── src
    └── MonkeyGenerator.py
└── server
    ├── static
        └── Images
            └── MonKeys
    └── server.py
</code></pre>
<p>Some examples:</p>
<p>this line is in server.py does not work anymore (needs to find the src 
folder)</p>
<pre><code>dir_of_interest = 'C:\\Users\\user\\PycharmProjects\\MonKeyGenerator\\src'
</code></pre>
<p>Also this line is in MonKeyGenerator.py does not work because it needs to find a deep folder named 'MonKeys' inside the server folder</p>
<pre><code>output_img = os.path.join("C:\\Users\\user\\PycharmProjects\\MonKeyGenerator\\server\\static\\images\\MonKeys", image_name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As per <a href="https://devcenter.heroku.com/articles/stack#viewing-which-stack-your-app-is-using" rel="nofollow noreferrer">Heroku Documentation</a> you can read that:</p>
<blockquote>
<p>A stack is an operating system image that is curated and maintained by Heroku. Stacks are typically based on an existing open-source <strong>Linux</strong> distribution, such as Ubuntu.</p>
</blockquote>
<p>The code example you provided shows us that you have used file path names specific for Windows, and this may cause problems when you try to run your code on other platforms.</p>
<p>To avoid this kind of problems and make paths platform-independent you should use <a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer">os.path</a> which takes care of it.</p>
<p>You could use for example in your <code>server.py</code>:</p>
<pre><code># absolute path to this file
FILE_DIR = os.path.dirname(os.path.abspath(__file__))
# absolute path to this file's root directory
PARENT_DIR = os.path.join(FILE_DIR, os.pardir) 
</code></pre>
<p>and then:</p>
<pre><code>dir_of_interest = os.path.join(PARENT_DIR, 'src')
</code></pre>
<p>Read more about <a href="https://docs.python.org/3/library/os.path.html#os.path.join" rel="nofollow noreferrer">os.path.join</a> to see how to handle the example in <code>MonKeyGenerator.py</code></p>
<p>If you are using Python 3.4+ you could also have a look at <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib</a>.
This should give you some instinct on how to follow with the rest of your code example. I hope this helps.</p>
</div>
<span class="comment-copy">Is there a reason to not use relative paths?</span>
