<div class="post-text" itemprop="text">
<p>I create two python files named "test.py" and <code>__main__.py</code>.</p>
<p>in test.py:</p>
<pre><code>import __main__
</code></pre>
<p>in <code>__main__.py</code>:</p>
<pre><code>print(__name__)
</code></pre>
<p>but when I run test.py, it outputs nothing.</p>
<p>then, I change <code>__main__.py</code> to:</p>
<pre><code>def main():
    print("ok")
</code></pre>
<p>and test.py:</p>
<pre><code>import __main__
__main__.main()
</code></pre>
<p>When I run test.py, it appears an error:</p>
<pre><code>Traceback (most recent call last):
   File "/Users/lyz/test.py", line 2, in &lt;module&gt;
    __main__.main()
AttributeError: module '__main__' has no attribute 'main'
</code></pre>
<p>who can tell me why? Thanks a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>As indicated by the underscores, <code>__main__</code> is a magic module name. It refers to the module first executed by the Python interpreter. If you run <code>python test.py</code>, <code>__main__</code> will be the module formed by <code>test.py</code>.</p>
<p>Instead, rename your <code>__main__.py</code> to <code>main.py</code> and use <code>import main</code> and <code>main.main()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are never importing anything.  Since your own file is given the name <code>__main__</code> (this is true because <code>__name__</code> returns <code>'__main__'</code>), whatever name you give your file.</p>
<p>You are never actually importing anything but the file you are running:</p>
<p>Run this throught the interpreter to see what I mean.</p>
<pre><code>&gt;&gt;&gt;def hello(): print('HELLO')
...
&gt;&gt;&gt;import __main__
&gt;&gt;&gt;__main__.hello()
HELLO
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt;__main__
&lt;module '__main__' (built-in)&gt;
</code></pre>
<p>You can quite clearly see that <code>__main__</code> is an inbuilt command, and <code>__main__.py</code> and is never imported, only the original script.</p>
<blockquote>
<p>A module’s <code>__name__</code> is set equal to <code>'__main__'</code> when read from standard input, a script, or from an interactive prompt.</p>
</blockquote>
<p>See <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">29.4. <strong>main</strong> — Top-level script environment</a></p>
<p>To fix the problem rename <code>__main__.py</code> to something that does not conflict with inbuilt commands.</p>
</div>
<span class="comment-copy">Reading <a href="https://stackoverflow.com/questions/4042905/what-is-main-py_">this</a> probably help you to understand "why"</span>
<span class="comment-copy">I have a really bad feeling about naming a file _<i>main_</i> since this is really reserved for other purposes. Maybe someone could give a hint of the function of _<i>main_</i>?</span>
<span class="comment-copy"><code>__main__</code> is a special name and you should use it only for a module with special function. <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">docs.python.org/3/library/__main__.html</a></span>
