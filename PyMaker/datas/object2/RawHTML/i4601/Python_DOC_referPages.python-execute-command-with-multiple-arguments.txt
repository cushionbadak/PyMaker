<div class="post-text" itemprop="text">
<p>I want to run the following command using Python on a Mac OS X computer:</p>
<pre><code>openssl enc -aes-128-cbc -K $(echo -n 'blabla1' | xxd -p) -iv blabla2 -in /tmp/clair -nopad -out /tmp/crypte1 -d
</code></pre>
<p>Here is what I have tried:</p>
<pre><code>clef = 'blabla1'
iv = 'blabla2'
arguments = ['openssl','enc', '-aes-128-cbc', '-K $(echo -n \'%s\' | xxd -p)' % clef ,'-iv' ,'%s' % iv,'-in', '/tmp/clair','-nopad','-out','/tmp/crypte1','-d']
execute = Popen(arguments, stdout=PIPE)
out, err = execute.communicate()
</code></pre>
<p>The command works fine from a terminal but I get an error from the Python script:</p>
<pre><code>unknown option '-K $(echo -n 'blabla1' | xxd -p)'
</code></pre>
<p>I have tried several variants of python shell functions (<code>os.system</code> for example), but I have a problem in each case.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are a number of things that users often take for granted when using a shell. Some examples are:</p>
<ul>
<li>Variable expansion (<code>${var}</code>)</li>
<li>Input/output redirection (<code>cmd &gt; out &lt; in</code>)</li>
<li>Pipes (<code>cmd1 | cmd2</code>)</li>
<li>Subshell creation (<code>$(cmd)</code>)</li>
</ul>
<p>All of these are features that the shell sets up <em>before</em> passing the actual command to the system. Python's <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> module does not do any of these things for you automatically, but it does give you the tools to emulate them.</p>
<p>You have correctly redirected your output to a pipe for your Python process to pick up. However, the subshell created by <code>$(echo -n 'blabla1' | xxd -p)</code> is not something that will get processed the way you want without a shell. There are two simple workarounds.</p>
<ol>
<li><p>The quick and dirty solution is to pass the entire command line in as a string to <a href="https://docs.python.org/3/library/subprocess.html#popen-constructor" rel="nofollow noreferrer"><code>subprocess.Popen</code></a> and set <a href="https://docs.python.org/3/library/subprocess.html#frequently-used-arguments" rel="nofollow noreferrer"><code>shell=True</code></a>:</p>
<pre><code>execute = Popen("openssl enc -aes-128-cbc -K $(echo -n 'blabla1' | xxd -p) "
                "-iv blabla2 -in /tmp/clair -nopad -out /tmp/crypte1 -d",
                shell=True)
</code></pre>
<p>This will pass the string to a shell instead of directly to the system, thereby giving you access all the behaviors that you expect from a shell. This approach has major security problems, and is not generally recommended. However, it is very easy, and it will get you started.</p></li>
<li><p>Implement the convenience of <code>$(... | ...)</code> in your code directly by <a href="https://stackoverflow.com/q/2502833/2988730">capturing</a> the output of <code>xxd</code> to a string using <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code></a>. This is lengthier, but probably more robust and portable in the long run. It is certainly the option I would chose in a production environment:</p>
<pre><code>from subprocess import Popen, run

value = run(['xxd', '-p'], input='blabla1', universal_newlines=True).stdout
execute = Popen(['openssl', 'enc', '-aes-128-cbc', '-K', value,
                 '-iv', 'blabla2', '-in', '/tmp/clair', '-nopad',
                 '-out', '/tmp/crypte1', '-d'])
</code></pre></li>
</ol>
<p>Since you are setting up your own pipes, you don't need to call <code>echo</code> any more (you never did really, <code>xxd -p &lt;&lt;&lt; 'blabla1'</code> would have worked fine), and <code>-K</code> needs to be a separate argument.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>subprocess</code> adds quotes <code>"</code> to the argument <code>"-K $(echo -n 'blabla1' | xxd -p)"</code>. You can check by </p>
<pre><code>print(subprocess.list2cmdline(execute.args))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>openssl enc -aes-128-cbc "-K $(echo -n 'blabla1' | xxd -p)" -iv blabla2 -in /tmp/clair -nopad -out /tmp/crypte1 -d
</code></pre>
</div>
<span class="comment-copy">Mightn't that be a shell error message?</span>
<span class="comment-copy">No because the command works fine in the terminal. I think python is changing something...</span>
<span class="comment-copy">@Bob5421. Nope. Will explain momentarily.</span>
<span class="comment-copy"><code>Popen</code> does not run a bash that could expand <code>-K $(...)</code>.</span>
<span class="comment-copy">You neglect to mention the fact that you got <i>other</i> error messages from <code>os.system</code>, and to show those messages.</span>
<span class="comment-copy">I have tried your solution 1. I get this error: "hex string is too long invalid hex key value". And i have no error if i launch directly from my terminal</span>
<span class="comment-copy">Can you tell me the difference between running <code>echo ... | xxd -p</code> from the command line and running <code>run(['xxd', '-p'], input='blabla1', universal_newlines=True).stdout</code> in the Python shell?</span>
<span class="comment-copy">@Bob5421. I'm assuming you were referring to the second option by the way.</span>
<span class="comment-copy">@Bob5421. Could you also please edit a list of the alternatives you've tried and the errors they gave you into your question?</span>
<span class="comment-copy">In fact i am wondering if the problem is not that some chars are not encoded on 1 byte</span>
<span class="comment-copy">That is a very minor issue and does not address the actual problem with the subshell OP is trying to create.</span>
<span class="comment-copy">Well, of course its not full solution but it addresses the problem of <code>Popen(arguments, stdout=PIPE)</code> with subsell. Thank you for your comprehensive answser.</span>
<span class="comment-copy">Upvotes are the proper way to thank :)</span>
<span class="comment-copy">I've removed my downvote. You are right that this is not really a minor issue, and you did address the immediate question, even if the question is incomplete.</span>
