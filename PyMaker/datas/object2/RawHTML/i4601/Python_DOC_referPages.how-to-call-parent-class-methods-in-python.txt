<div class="post-text" itemprop="text">
<p>I am writing a class in python.</p>
<pre><code>class my_class(object):
    def __init__(self):
    # build my objects 
    def foo(self,*args,**kwargs):
    # do something with them
</code></pre>
<p>Then I would like to extend this class:</p>
<pre><code>class my_extended_class(my_class):
</code></pre>
<p>But I can not figure out what is the correct way of accessing parent methods.</p>
<p>Shall I:</p>
<p>1) create an instance of a father object? at constructor time</p>
<pre><code>def __init__(self):
    self.my_father=my_class()
    # other child-specific statements
    return self
def foo(self,*args,**kwargs):
    self.my_father.foo(*args,**kwargs)
    # other child-specific statements
    return self
</code></pre>
<p>2)  call father methods 'directly'?</p>
<pre><code>def foo(self,*args,**kwargs):
    my_class.foo(*args,**kwargs)
    # other child-specific statements
    return self
</code></pre>
<p>3) other possible ways?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>super(ClassName, self)</code></p>
<pre><code>class my_class(object):
    def __init__(self):
    # build my objects 
    def foo(self,*args,**kwargs):
    # do something with them

class my_extended_class(my_class):
    def foo(self,*args,**kwargs):
        super(my_extended_class, self).foo(*args,**kwargs)
        # other child-specific statements
        return self
</code></pre>
<p>Compatibility is discussed in <a href="https://stackoverflow.com/questions/21768391/how-can-i-call-super-so-its-compatible-in-2-and-3">How can I call super() so it's compatible in 2 and 3?</a> but in a nutshell, Python 3 supports calling <code>super</code> with or without args while Python 2 requires them.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer">super()</a> method. For example:</p>
<pre><code>class my_extended_class(my_class):
   def foo(self,*args,**kwargs):
      #Do your magic here 
      return super(my_extended_class, self).foo(self,*args,**kwargs)
</code></pre>
<p>You might go to this link and find other answers as well. </p>
<p><a href="https://stackoverflow.com/questions/805066/call-a-parent-classs-method-from-child-class-in-python">Call a parent class's method from child class in Python?</a></p>
</div>
<span class="comment-copy">Use the super() function</span>
<span class="comment-copy">would that work consistency across python versions 2.6 to 3.5?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/805066/call-a-parent-classs-method-from-child-class-in-python">Call a parent class's method from child class in Python?</a></span>
<span class="comment-copy">yes, parameters to <code>super</code> are optional in python 3 but if you specify them for python2 compatibility it will work fine</span>
