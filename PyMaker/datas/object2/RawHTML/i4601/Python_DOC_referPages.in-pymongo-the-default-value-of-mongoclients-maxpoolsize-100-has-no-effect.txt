<div class="post-text" itemprop="text">
<p>Below is a simple test snippet for PyMongo connections:</p>
<pre><code>from pymongo import MongoClient

clients = [] 
for i in range(0,1000):
    con = MongoClient('mongodb://localhost:27017/')
    clients.append(con)
    print(i)
</code></pre>
<p>Here is the output:</p>
<blockquote>
<p>... 
  ...
  998
  999</p>
</blockquote>
<p>And here is the output in MongoDB Console:</p>
<blockquote>
<p>2018-03-24T20:00:55.746+0530 I NETWORK  [listener] connection
  accepted
      from 127.0.0.1:51272 #1500 (1000 connections now open)
      2018-03-24T20:00:55.747+0530 I NETWORK  [conn1500] received client
      metadata from 127.0.0.1:51272 conn: { driver: { name: "PyMongo",
      version: "3.6.1" }, os: { type: "Darwin", name: "Darwin",
      architecture: "x86_64", version: "10.10.1" }, platform: "CPython
      3.6.0.final.0" } 2018-03-24T20:00:55.773+0530 I NETWORK  [conn1486] end connection 127.0.0.1:51286 (999 connections now open)
      2018-03-24T20:00:55.773+0530 I NETWORK  [conn1485] end connection
      127.0.0.1:51285 (998 connections now open) 2018-03-24T20:00:55.773+0530 I NETWORK  [conn1484] end connection
      127.0.0.1:51284 (997 connections now open)
      . . .
      . . .</p>
</blockquote>
<p>I see MongoClient has a keyword argument <code>maxPoolSize</code>. This has the default value of only 100. </p>
<p>But how the above code works?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>MongoClient has a keyword argument maxPoolSize. This has the default value of only 100.</p>
</blockquote>
<p>That is correct. The default value of <code>maxPoolSize</code> in <a href="http://api.mongodb.com/python/current/" rel="nofollow noreferrer">PyMongo</a> (as of v3.6) <a href="http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient" rel="nofollow noreferrer">MongoClient</a> is 100. However, the <code>maxPoolSize</code> parameter controls the maximum built-in connection pool per MongoDB server for an instance of MongoClient. </p>
<p>Your example snippet creates 1000 MongoClient instances. Please note that you only need one MongoClient for each process, and reuse it for all operations. It is a common mistake to create a new client for each request, which is very inefficient.</p>
<blockquote>
<p>But how the above code works?</p>
</blockquote>
<p>If you would like to check whether the limit works, you can utilise <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">Python threading module</a> to create threads to test the limit of MongoClient connections. </p>
<p>There are two other parameters that you could utilise:</p>
<ul>
<li><p><code>waitQueueMultiple</code>: this parameter sets the limit of how many threads can wait in the queue before getting a connection from the pool. By setting a low <code>maxPoolSize</code> and low <code>waitQueueMultiple</code> your code would receive <a href="http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ExceededMaxWaiters" rel="nofollow noreferrer">ExceededMaxWaiters</a> exception. </p></li>
<li><p><code>waitQueueTimeoutMS</code>: this parameter sets the time of how long threads should wait in the queue before getting a connection from the pool. By setting a low <code>maxPoolSize</code> and low <code>waitQueueTimeoutMS</code> your code would receive <a href="http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ConnectionFailure" rel="nofollow noreferrer">ConnectionFailure</a> exception. </p></li>
</ul>
<p>Example: </p>
<pre><code>def worker(num, db): 
    print("Thread number %s" % num)
    try:
        print(db.test.insert({"a":num, "b":num*2}))
    except Exception as e: 
        print("Exception: %s" % e)
    return 

client = MongoClient("mongodb://localhost:27017/", 
                     maxPoolSize=1, 
                     waitQueueTimeoutMS=1, 
                     waitQueueMultiple=1)
database = client.test
threads = []

for i in range(100): 
    t = threading.Thread(target=worker, args=(i, database))
    threads.append(t) 
    # Start thread.
    t.start()

# Wait for all threads to complete. 
for t in threads: 
    t.join() 
</code></pre>
<p>See <a href="http://api.mongodb.com/python/current/faq.html#how-does-connection-pooling-work-in-pymongo" rel="nofollow noreferrer">How does connection pooling work in PyMongo?</a> for more details. Please use the default values provided unless you have specific use case that requires alteration of the above values. </p>
</div>
<span class="comment-copy">That was very clear and I tested...it works....thanks!</span>
