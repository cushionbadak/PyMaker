<div class="post-text" itemprop="text">
<p>I want to know if is there a way to make multiprocessing working in this code. What should I change or if there exist other function in multiprocessing that will allow me to do that operation.</p>
<p>You can call the <code>locateOnScreen('calc7key.png')</code> function to get the screen coordinates. The return value is a 4-integer tuple: <code>(left, top, width, height)</code>.  </p>
<p>I got error:</p>
<pre class="lang-none prettyprint-override"><code>checkNumber1 = resourceBlankLightTemp[1]

TypeError: 'Process' object does not support indexing
</code></pre>
<hr/>
<pre class="lang-py prettyprint-override"><code>import pyautogui, time, os, logging, sys, random, copy
import multiprocessing as mp

BLANK_DARK = os.path.join('images', 'blankDark.png')
BLANK_LIGHT = os.path.join('images', 'blankLight.png')

def blankFirstDarkResourcesIconPosition():
    blankDarkIcon = pyautogui.locateOnScreen(BLANK_DARK)
    return blankDarkIcon


def blankFirstLightResourcesIconPosition():
    blankLightIcon = pyautogui.locateOnScreen(BLANK_LIGHT)
    return blankLightIcon


def getRegionOfResourceImage():

    global resourceIconRegion

    resourceBlankLightTemp = mp.Process(target = blankFirstLightResourcesIconPosition)
    resourceBlankDarkTemp = mp.Process(target = blankFirstDarkResourcesIconPosition)

    resourceBlankLightTemp.start()
    resourceBlankDarkTemp.start()

    if(resourceBlankLightTemp == None):
        checkNumber1 = 2000
    else:
        checkNumber1 = resourceBlankLightTemp[1]

    if(resourceBlankDarkTemp == None):
        checkNumber2 = 2000
    else:
        checkNumber2 = resourceBlankDarkTemp[1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In general, if you just want to use multiprocessing to run existing CPU-intensive functions in parallel, it is easiest to do through a <a href="https://docs.python.org/3/library/multiprocessing.html#using-a-pool-of-workers" rel="nofollow noreferrer"><code>Pool</code></a>, as shown in the example at the beginning of <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">the documentation</a>:</p>
<pre><code># ...

def getRegionOfResourceImage():

    global resourceIconRegion

    with mp.Pool(2) as p:
        resourceBlankLightTemp, resourceBlankDarkTemp = p.map(
            lambda x: x(), [blankFirstLightResourcesIconPosition,
                            blankFirstDarkResourcesIconPosition])

    if(resourceBlankLightTemp == None):
        # ...
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.Process" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a> <code>mp.Process</code> returns a Process object, not an iterable. I think you're looking to use <code>Pipe</code>, but I'm not well versed in MP.</span>
<span class="comment-copy">So the actual question is: How to get the result of a function call handled in a <code>Process</code>. Does <a href="https://stackoverflow.com/q/30189270/1639625">this</a> help?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/27767206/how-to-access-the-result-of-a-function-called-in-a-multiprocessing-in-python">How to access the result of a function called in a multiprocessing in Python?</a></span>
<span class="comment-copy">@tobias_k Shockingly enough, there exists a question with almost that <i>exact</i> same title.</span>
