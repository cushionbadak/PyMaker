<div class="post-text" itemprop="text">
<p>In my Python Shell, deleting <code>__name__</code> makes it become <code>'builtins'</code>. Although, checking with <code>globals</code> confirms that I am not refering to <code>__name__</code> from some global variable.</p>
<pre><code>Python 3.6.2 (v3.6.2:5fd33b5, Jul  8 2017, 04:57:36) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; __name__
'__main__'
&gt;&gt;&gt; del __name__
&gt;&gt;&gt; __name__
'builtins'
&gt;&gt;&gt; globals()[__name__]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'builtins'
</code></pre>
<p>My guess is that we are using it from some closure. How is this behaviour taking place?</p>
</div>
<div class="post-text" itemprop="text">
<p>All names are looked up first from local variables, then global variables, then <code>__builtins__</code>, which is available everywhere. It's where all the built in functions are.</p>
<pre><code>In[6]: __builtins__
Out[6]: &lt;module 'builtins' (built-in)&gt;
In[7]: __builtins__.__name__
Out[7]: 'builtins'
In[8]: __builtins__.len
Out[8]: &lt;function len&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you can probably guess from the <code>__name__</code>, you're accessing the name of the <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow noreferrer"><code>builtins</code> module</a>.</p>
<p>Whenever you access a variable and that variable isn't found in any closure, the local scope or the global scope, the lookup falls back to the builtins. This is why you can access things like <code>min</code> or <code>max</code> or <code>type</code> even though they're not global variables:</p>
<pre><code>&gt;&gt;&gt; 'min' in globals()                                                                   
False
&gt;&gt;&gt; min
&lt;built-in function min&gt;      
&gt;&gt;&gt; __builtins__.min
&lt;built-in function min&gt;                                                    
</code></pre>
<p>The same thing happens with <code>__name__</code>. Initially, there's a <code>__name__</code> variable defined in the global scope:</p>
<pre><code>&gt;&gt;&gt; globals()['__name__']
'__main__'
</code></pre>
<p>But once that name is deleted with <code>del __name__</code>, the lookup in the globals fails and falls back to the builtins - so you end up with the name of the <code>builtins</code> module.</p>
<pre><code>&gt;&gt;&gt; del __name__
&gt;&gt;&gt; __name__
'builtins'
&gt;&gt;&gt; __builtins__.__name__
'builtins'
</code></pre>
</div>
<span class="comment-copy">That also explains why we cannot <code>del</code> builtins. Thanks.</span>
