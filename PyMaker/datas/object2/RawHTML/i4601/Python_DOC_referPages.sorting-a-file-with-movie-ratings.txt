<div class="post-text" itemprop="text">
<p>Here is my code for reading in a file with Movie Titles and their ratings, I need to read the file and sort them according to their ratings. I'm using Python Code.</p>
<p>This is what the file looks like:</p>
<p>Harry Potter and the Prisoner of Azkaban , 7.8
Lord of the Rings: The Two Towers , 8.7
Spider Man , 7.3
Alice in Wonderland , 6.5
The Good Dinosaur , 6.7
Kung Fu Panda , 7.6</p>
<pre><code>filename =("movie_ratings.txt")
def ratings_sort(array):
with open (filename) as f:
    for pair in f:
        title.append(pair.strip())
    for index in f:
        value = array[index]
        i = index-1
    while i&gt;=0:
        if value &lt; array[i]:
            array[i+1]=array[i]
            array[i]=value
            i = i-1
        else:
            break

title  = list ()
rating = list('.')
filename =("movie_ratings.txt")
with open (filename) as f:
for pair in f:
    title.append(pair.strip())

title.sort()

ratings_sort = sorted(title, key=lambda rating:rating[2])    




print ("Old List :\n",title)
print('\n')
print("New List :\n" ,ratings_sort)
</code></pre>
<p>These are my results,</p>
<p>Old List :
 ['Alice in Wonderland , 6.5', 'Harry Potter and the Prisoner of Azkaban , 7.8', 'Kung Fu Panda , 7.6', 'Lord of the Rings: The Two Towers , 8.7', 'Spider Man , 7.3', 'The Good Dinosaur , 6.7']</p>
<p>New List :
 ['The Good Dinosaur , 6.7', 'Alice in Wonderland , 6.5', 'Spider Man , 7.3', 'Kung Fu Panda , 7.6', 'Harry Potter and the Prisoner of Azkaban , 7.8', 'Lord of the Rings: The Two Towers , 8.7']</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue is that the "for x in file" loop reads lines from a file and so the <code>title</code> array contains the lines of the file as strings. As such, your <code>key</code> argument to <code>sorted</code> is receiving these strings and returning the third character of each of them (<code>rating[2]</code>); notice that "New List" is indeed sorted by the third character - e, i, i, n, r, r. To fix this, you can parse the lines of the file into tuples of the form (title, rating) and store those in the array. Then, sorting by the rating will be as easy as grabbing the rating from the tuple in the <code>key</code> argument to <code>sorted</code>.</p>
<p>However, it seems to me that you want to make your own sort implementation rather than using the built-in <code>sorted</code>. It looks like you were going for an implementation of insertion sort and the indentation got messed up when you posted here. The function has the same sort of problem with not parsing the lines of the file, and you need to iterate through the numerical indices of <code>array</code> rather than the lines of <code>f</code> in the second loop. The logic can also be improved a little by moving the <code>if</code> right into the <code>while</code> condition and only assigning the final position of the compared-rating rather than swapping.</p>
<pre><code>from collections import namedtuple

def ratings_sort(movies):
        for index in range(1, len(movies)):
                movie = movies[index]
                i = index-1
                while i&gt;=0 and movie.rating &lt; movies[i].rating:
                        movies[i+1] = movies[i]
                        i -= 1
                movies[i+1] = movie


filename = "movie_ratings.txt"

Movie = namedtuple("Movie", "title rating")
movies = list()

with open(filename) as f:
        for line in f:
                part = line.partition(",") # gives a tuple: ("movie title", ",", "rating)
                movies.append(Movie(title=part[0].strip(), rating=float(part[2])))

print("Old List:\n", movies, "\n")

# Sort using sorted
sorted_movies = sorted(movies, key=lambda movie:movie.rating)
# Sort using ratings_sort (modifies movies array unlike sorted)
ratings_sort(movies)

print("New List (using sorted):\n", sorted_movies, "\n")
print("New List (using ratings_sort):\n", movies, "\n")
</code></pre>
<p>Note that I renamed some variables and used <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a> for clarity. Also, I moved the file reading out of <code>ratings_sort</code> so I could compare it to <code>sorted</code> as an example.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Let's solve your problem step by step:</p>
</blockquote>
<p>So your problem has two parts :</p>
<ul>
<li><p><strong>first, fetch data in the correct form from the file</strong> </p></li>
<li><p><strong>second sort them according to their ratings</strong></p></li>
</ul>
<blockquote>
<p>For the first part i tried two approaches :</p>
</blockquote>
<p>first approach , using manual generator approach,</p>
<p><strong>First let's open file :</strong></p>
<pre><code>with open('dsda') as f:
    data=[line.strip().split() for line in f if line!='\n'][0]
</code></pre>
<p>for that i needed float isdigit , But isdigit only support int so i come up with something like this :</p>
<pre><code>def isfloat(point):
    try:
        float(point)
        return True
    except ValueError:
        return False
</code></pre>
<p><strong>Now let's use generator approach to get data in proper form :</strong></p>
<pre><code>def generator_approach(data_):
    storage=[]
    flag=True
    for word in data_:

        storage.append(word)
        if isfloat(word)==True:
            yield storage
            storage=[]


closure_ = generator_approach(data)
print(list(closure_))
</code></pre>
<p>output:</p>
<pre><code>[['Harry', 'Potter', 'and', 'the', 'Prisoner', 'of', 'Azkaban', ',', '7.8'], ['Lord', 'of', 'the', 'Rings:', 'The', 'Two', 'Towers', ',', '8.7'], ['Spider', 'Man', ',', '7.3'], ['Alice', 'in', 'Wonderland', ',', '6.5'], ['The', 'Good', 'Dinosaur', ',', '6.7'], ['Kung', 'Fu', 'Panda', ',', '7.6']]
</code></pre>
<p><strong>Now let's try second approach which is regex approach:</strong></p>
<pre><code>import re
pattern=r'\w.+?[0-9.]+'

with open('dsda') as f:
    for line in f:
        data_r=[line1.split() for line1 in re.findall(pattern,line)]
</code></pre>
<p>output:</p>
<pre><code>[['Harry', 'Potter', 'and', 'the', 'Prisoner', 'of', 'Azkaban', ',', '7.8'], ['Lord', 'of', 'the', 'Rings:', 'The', 'Two', 'Towers', ',', '8.7'], ['Spider', 'Man', ',', '7.3'], ['Alice', 'in', 'Wonderland', ',', '6.5'], ['The', 'Good', 'Dinosaur', ',', '6.7'], ['Kung', 'Fu', 'Panda', ',', '7.6']]
</code></pre>
<p>As you can see  output from both approaches are same , Now sorting them basis on rating is not a big deal :</p>
<pre><code>print(sorted(data_r,key=lambda x:float(x[-1])))
</code></pre>
<p>output:</p>
<pre><code>[['Alice', 'in', 'Wonderland', ',', '6.5'], ['The', 'Good', 'Dinosaur', ',', '6.7'], ['Spider', 'Man', ',', '7.3'], ['Kung', 'Fu', 'Panda', ',', '7.6'], ['Harry', 'Potter', 'and', 'the', 'Prisoner', 'of', 'Azkaban', ',', '7.8'], ['Lord', 'of', 'the', 'Rings:', 'The', 'Two', 'Towers', ',', '8.7']]
</code></pre>
</div>
<span class="comment-copy">I cant seem to figure out how to swap out "The Good Dinosaur" with :Alice in Wonderland"</span>
<span class="comment-copy">Post a small representative sample of the input file too.</span>
<span class="comment-copy">Thank you all so much for your assistance, this cleared up a lot of frustration.</span>
