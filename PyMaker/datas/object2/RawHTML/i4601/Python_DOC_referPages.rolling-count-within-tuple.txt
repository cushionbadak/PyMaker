<div class="post-text" itemprop="text">
<p>I have a list of tuples as follows, with the output as follows:</p>
<pre><code>   (data, Cycle 1)
   (data, Cycle 1)
   (data, Cycle 2)
   (data, Cycle 2)
   (data, Cycle 3)
   (data, Cycle 3)
etc...
</code></pre>
<p>I want a rolling count of each cycle... example output:</p>
<pre><code>   (data, Cycle 1, 1)
   (data, Cycle 1, 2)
   (data, Cycle 2, 1)
   (data, Cycle 2, 2)
   (data, Cycle 3, 1)
   (data, Cycle 3, 2)
</code></pre>
<p>I can do the first cycle:</p>
<pre><code>count = 0
for i, (data, cycle) in enumerate(my_tuple):
     if cycle == 'Cycle 1':
          cumsum = count + 1
          my_tuple[i] += (cumsum,)
</code></pre>
<p>I'm stuck on how to expand this condition to all cycles.</p>
<p>Any help appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>if your cycles appear in order you can use <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools%20groupby#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>:</p>
<pre><code>from itertools import groupby

Cycles = (
    ('data', 'Cycle 1'),
    ('data', 'Cycle 1'),
    ('data', 'Cycle 2'),
    ('data', 'Cycle 2'),
    ('data', 'Cycle 3'),
    ('data', 'Cycle 3'))

for key, group in groupby(Cycles, key=lambda x: x[1]):
    for number, tpl in enumerate(group, start=1):
        new_tpl = (*tpl, number)
        print(new_tpl)
</code></pre>
<p>which prints:</p>
<pre><code>('data', 'Cycle 1', 1)
('data', 'Cycle 1', 2)
('data', 'Cycle 2', 1)
('data', 'Cycle 2', 2)
('data', 'Cycle 3', 1)
('data', 'Cycle 3', 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this case, you would want to keep a running total for <em>every</em> cycle type, for example in a dictionary that maps a cycle to its current count. Then on each iteration the relevant dictionary entry can be incremented and the current value added to the array. For example, using a <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict

my_tuple = [
   ('data', 'Cycle 1'),
   ('data', 'Cycle 1'),
   ('data', 'Cycle 2'),
   ('data', 'Cycle 2'),
   ('data', 'Cycle 3'),
   ('data', 'Cycle 3')
]

counts = defaultdict(int)

for i, (data, cycle) in enumerate(my_tuple):
    counts[cycle] += 1
    my_tuple[i] += (counts[cycle],)

print my_tuple
</code></pre>
<p>This program will always record the total number of each cycle type, even if there was a gap between instances of a type: for example, for input</p>
<pre><code>('data', 'Cycle 1'),
('data', 'Cycle 2'),
('data', 'Cycle 1')
</code></pre>
<p>it would produce</p>
<pre><code>('data', 'Cycle 1', 1),
('data', 'Cycle 2', 1),
('data', 'Cycle 1', 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>dict</code> instead to store your count: </p>
<pre><code>count = {}
for i, (data, cycle) in enumerate(my_tuple):
    cumsum = count.setdefault(cycle, 0) + 1
    count[cycle] = cumsum
    my_tuple[i] += (cumsum,)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>counts = {}

for i, (data, cycle) in enumerate(tup):
    cyclenum = cycle.split()[-1]
    try:
        counts[cyclenum] += 1
    except KeyError:
        counts[cyclenum] = 1
    tup[i] += (counts[cyclenum], )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A little late to the party, but allow me to drop in the full itertools solution:</p>
<pre><code>from itertools import accumulate, chain, groupby
from operator import itemgetter

grouped_cycles = map(itemgetter(1), groupby(cycles, key=itemgetter(1)))
accumulate_group = lambda group: accumulate(group, lambda x, y: (y[0], y[1], x[2] + y[2]))
result = chain.from_iterable(map(accumulate_group, grouped_cycles))
</code></pre>
<p>where</p>
<pre><code>cycles = [('data', 'Cycle 1', 1),
          ('data', 'Cycle 1', 2),
          ('data', 'Cycle 2', 2)]
</code></pre>
<p>produces:</p>
<pre><code>&gt;&gt;&gt; list(result)
[('data', 'Cycle 1', 1), ('data', 'Cycle 1', 3), ('data', 'Cycle 2', 2)]
</code></pre>
<p>You could clean it up a little by making the input a <a href="https://docs.python.org/3.6/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a> (so there aren't so many <code>itemgetter(x)</code>s and magic indexes floating around).</p>
<p>In general, I'd prefer itertools over re-inveting the well because (1) it's almost certainly correct (and already tested &amp; verified by lots of people), (2) because everyone uses it, your intent is a lot more immediately clear, and (3) it's all written in C so (in general) it's going to be faster than any python you could write.</p>
</div>
<span class="comment-copy">If your data is ordered you can check if you are different from the previous one</span>
<span class="comment-copy">Seems to be what I was looking for. Cheers!</span>
<span class="comment-copy">@Graipher Edited it.</span>
