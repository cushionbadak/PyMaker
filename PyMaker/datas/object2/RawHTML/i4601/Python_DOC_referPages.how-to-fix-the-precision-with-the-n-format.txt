<div class="post-text" itemprop="text">
<p>I want to print a decimal using a comma as decimal separator. When I do this</p>
<pre><code>import locale
locale.setlocale(locale.LC_ALL, 'nl_NL')

'{0:#.2n}'.format(1.1)
</code></pre>
<p>I get <code>'1,1'</code>. The comma is there, but the precision is only one, whereas I set it to two. How come?</p>
<hr/>
<p>Note this format is constructed as follows:</p>
<ul>
<li><code>#</code>: "The <code>'#'</code> option causes the "alternate form" to be used for the conversion. ... In addition, for <code>'g'</code> and <code>'G'</code> conversions, trailing zeros are not removed from the result."</li>
<li><code>.2</code>: Precision.</li>
<li><code>n</code>: "Number. This is the same as <code>'g'</code>, except that it uses the current locale setting to insert the appropriate number separator characters."</li>
</ul>
<p>where the quotes come from the manual: <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">Format Specification Mini-Language</a>.</p>
<hr/>
<p>Using <code>{.2f}</code> as suggested in the comments does not do what I want either: <code>'1.10'</code>. The precision is correct, but the comma from the locale is ignored.</p>
</div>
<div class="post-text" itemprop="text">
<p>When <code>n</code> is used to print a <code>float</code>, it acts like <code>g</code>, not <code>f</code>, but uses your locale for the separator characters. And the <a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">documentation</a> of precision says:</p>
<blockquote>
<p>The <em>precision</em> is a decimal number indicating how many digits should be displayed after the decimal point for a floating point value formatted with <code>'f'</code> and <code>'F'</code>, or <strong>before and after the decimal point for a floating point value formatted with <code>'g'</code> or <code>'G'</code></strong>.</p>
</blockquote>
<p>So <code>.2n</code> means to print 2 total digits before and after the decimal point.</p>
<p>I don't think there's a simple way to get <code>f</code>-style precision with <code>n</code>-style use of locale. You need to determine how many digits your number has before the decimal point, add 2 to that, and then use that as the precision in your format.</p>
<pre><code>precision = len(str(int(number))) + 2
fmt = '{0:#.' + str(precision) + 'n'
print(fmt.format(number))
</code></pre>
</div>
<span class="comment-copy">What is <code>n</code>? For floats <code>f</code> is used. And it works with <code>.2f</code>.</span>
<span class="comment-copy">It does not work with 2f as it prints 1.1</span>
<span class="comment-copy">Technically <code>1.1</code> is a float not a decimal.</span>
<span class="comment-copy">@Psytho, @BlueTomato, @Martin: The <code>n</code> is to obey the locale. <code>f</code> ignores this, see edit.</span>
<span class="comment-copy">print(format('{0:#.2f}'.format(1.1)).replace('.',','))</span>
<span class="comment-copy">Ok. That clarifies (I should be a better reader apparently). But how can I fix the precision? Or is that simply impossible?</span>
<span class="comment-copy">I've added an example showing how to make the format dynamic.</span>
