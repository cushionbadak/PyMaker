<div class="post-text" itemprop="text">
<p>I have a txt file as here:</p>
<pre class="lang-none prettyprint-override"><code>pid,party,state,res
SC5,Republican,NY,Donald Trump 45%-Marco Rubio 18%-John Kasich 18%-Ted Cruz 11%
TB1,Republican,AR,Ted Cruz 27%-Marco Rubio 23%-Donald Trump 23%-Ben Carson 11%
FX2,Democratic,MI,Hillary Clinton 61%-Bernie Sanders 34%
BN1,Democratic,FL,Hillary Clinton 61%-Bernie Sanders 30%
PB2,Democratic,OH,Hillary Clinton 56%-Bernie Sanders 35%
</code></pre>
<p>what I want to do, is check that the % of each "res" gets to 100%</p>
<pre><code>def addPoll(pid,party,state,res,filetype):
    with open('Polls.txt', 'a+') as file:  # open file temporarly for writing and reading
        lines = file.readlines()  # get all lines from file
        file.seek(0)
        next(file)  # go to next line --
        #this is suppose to skip the 1st line with pid/pary/state/res
        for line in lines:  # loop
            line = line.split(',', 3)[3]
            y = line.split()
            print y
            #else:
                #file.write(pid + "," + party + ","  + state + ","  + res+"\n")
                #file.close()
    return "pass"
print addPoll("123","Democratic","OH","bla bla 50%-Asd ASD 50%",'f')
</code></pre>
<p>So in my code I manage to split the last ',' and enter it into a list, but im not sure how I can get only the numbers out of that text.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems like what you have is CSV. Instead of trying to parse that on your own, Python <a href="https://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow noreferrer">already has a builtin parser</a> that will give you back nice dictionaries (so you can do <code>line['res']</code>):</p>
<pre><code>import csv

with open('Polls.txt') as f:
    reader = csv.DictReader(f)
    for row in reader:
        # Do something with row['res']
        pass
</code></pre>
<p>For the <code># Do something</code> part, you can either parse the field manually (it appears to be structured): <code>split('-')</code> and then <code>rsplit(' ', 1)</code> each <code>-</code> separated part (the last thing should be the percent). If you're trying to enforce a format, then I'd definitely go this route, but regex are also a fine solution too for quickly pulling out what you want. You'll want to read up on them, but in your case, you want <code>\d+%</code>:</p>
<pre><code># Manually parse (throws IndexError if there isn't a space separating candidate name and %)
percents = [candidate.rsplit(' ', 1)[1] for candidate row['res'].split('-')]

if not all(p.endswith('%') for p in percents):
    # Handle bad percent (not ending in %)
    pass
else:
    # Throws ValueError if any of the percents aren't integers
    percents = [int(p[:-1]) for p in percents]

    if sum(percents) != 100:
        # Handle bad total
        pass
</code></pre>
<p>Or with regex:</p>
<pre><code>percents = [int(match.group(1)) for match in re.finditer(r'(\d+)%', row['res'])]

if sum(percents) != 100:
    # Handle bad total here
    pass
</code></pre>
<p>Regex is certainly shorter, but the former will enforce more strict formatting requirements on <code>row['res']</code> and will allow you to later extract things like candidate names.</p>
<p>Also some random notes:</p>
<ul>
<li>You don't need to open with <code>'a+'</code> unless you plan to append to the file, <code>'r'</code> will do (and <code>'r'</code> is implicit, so you don't have to specify it).</li>
<li>Instead of <code>next()</code> use a for loop!</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can use regex to find all the numbers:</p>
<pre><code>import re
for line in lines:
    numbers = re.findall(r'\d+', line) 
    numbers = [int(n) for n in numbers]
    print(sum(numbers))
</code></pre>
<p>This will print</p>
<pre><code>0    # no numbers in the first line
97
85
97
92
93
</code></pre>
<p>The <code>re.findall()</code> method finds all substrings matching the specified pattern, which in this case is <code>\d+</code>, meaning any continuous string of digits. This returns a list of strings, which we cast to a list of <code>int</code>s, then take the sum.</p>
</div>
<span class="comment-copy">use <code>for [0-9][0-9]['%'] is in [list]:</code> then followed by what you want to do .. collecting values. But keep in mind that you include a line counter.. because next thing you need to do is add up all collected data from the regular expression catcher. Chekc out other SO pages for the use of regular experessions the correct way.</span>
