<div class="post-text" itemprop="text">
<p>Perhaps this has been answered, but I sincerely could not find it.</p>
<p>I wish to have a specific output in the form of:</p>
<pre><code>("A_1", "A_2", ..., "A_100")
</code></pre>
<p>I tried:</p>
<pre><code>a = "A_"
nums_1_100 = str(list(range(1,101)))
for i in range (1,101):
    x = a
    x += nums_1_100
</code></pre>
<p>And this returns:</p>
<pre><code>'A_[1, 2, 3, 4, 5, ..., 100]'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code makes no sense as you overwrite <code>x</code> each iteration, which in result kills what your code produced in previous one. You want rather to use simple list comprehension instead:</p>
<pre><code>result = [ 'A_%d' % i for i in range(1,101)]
</code></pre>
<p>which would then produce list with elements like <code>A_1</code>, <code>A_2</code> ...</p>
</div>
<div class="post-text" itemprop="text">
<p>Try a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to make that list of strings like:</p>
<pre><code>x = ['A_{}'.format(i) for i in range(1, 101)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is the functional approach. This will work with a list of any type, so if you decided to switch from ints at the end to strings/characters, all that would need to change would be the contents of <code>listToAppend</code>.</p>
<pre><code>listToAppend = list(range(1, 101))
output = list(map(lambda x: "A_" + str(x), listToAppend))
</code></pre>
</div>
<span class="comment-copy">Using map <code>print(list(map(lambda x: 'A_%d' % x, range(1, 101))))</code></span>
<span class="comment-copy">Thanks :) I suppose I could've known it didn't make sense, and thanks for the answer!</span>
<span class="comment-copy">I am afraid that this is the type of approach we call "over-engeneering". As result, you will end up with the code that is universal for no real benefits, hard to understand and complicated for every single simple task.</span>
