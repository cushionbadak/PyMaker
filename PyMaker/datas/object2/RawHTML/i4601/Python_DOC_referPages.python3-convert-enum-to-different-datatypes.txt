<div class="post-text" itemprop="text">
<p>I'm currently working with an enum of the following type:</p>
<pre><code>class System(Enum):
  FIRST = 1
  SECOND = 2
</code></pre>
<p>Now I'd like to be able to do the following:</p>
<pre><code>a = System.FIRST
url = a.getSystemURL()
</code></pre>
<p>where the url for the enumeration members <code>FIRST</code> and <code>SECOND</code> are different of course. </p>
<p>I could create a dictionary with the enumeration members as keys and the urls as values, but this won't assure that if I later add an enumeration member I'll remember to add corresponding the dictionary entry.</p>
<p>Is there a clean way to have an enumeration with multiple values for the enumeration members? And to name these different values?</p>
<p>Something like this: </p>
<pre><code>class System(Enum):
  Values = (Value, url, something)
  FIRST = 1, 'https://www.example.com', 42
  SECOND = 2, 'https://www.test.com', 13
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is <a href="https://docs.python.org/3/library/enum.html#planet" rel="nofollow noreferrer">an example</a> like this in the documentation. If the class defines an <code>__init__</code> method, the enum values will be passed to it as arguments. This means you can define your enum like so:</p>
<pre><code>class System(Enum):
    FIRST = 1, 'https://www.example.com', 42
    SECOND = 2, 'https://www.test.com', 13

    def __init__(self, value, url, something):
        self.value_ = value
        self.url = url
        self.something = something
</code></pre>
<p>(Note that <code>value</code> is a special attribute reserved by enums, so I named the attribute <code>value_</code> to avoid a name clash.)</p>
<p>You can now access these attributes on each enum member:</p>
<pre><code>&gt;&gt;&gt; System.FIRST.url
'https://www.example.com'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Both the stdlib <code>Enum</code> and <code>aenum</code><sup>1</sup> easily support your use case (although more work is required for the stdlib version).</p>
<hr/>
<p><code>stdlib enum</code> 3.4+  (See the docs for <a href="https://docs.python.org/3/library/enum.html#using-a-custom-new" rel="nofollow noreferrer"><code>__new__</code></a> and <a href="https://docs.python.org/3/library/enum.html#allowed-members-and-attributes-of-enumerations" rel="nofollow noreferrer"><code>__init__</code></a> explanations.)</p>
<pre><code>import enum
class System(enum.Enum):

    def __new__(cls, *args, **kwds):
        value = len(cls.__members__) + 1
        obj = object.__new__(cls)
        obj._value_ = value
        return obj

    def __init__(self, url, something):
        self.url = url
        self.something = something

    FIRST = 'https://www.example.com', 42
    SECOND = 'https://www.test.com', 13
</code></pre>
<hr/>
<p><code>aenum</code> -- Usable for both Python 2 and 3 code.  <code>aenum</code> also makes a few things easier -- the above code would be:</p>
<pre><code>import aenum
class System(aenum.AutoNumberEnum):
    _init_ = 'url something'
    FIRST = 'https://www.example.com', 42
    SECOND = 'https://www.test.com', 13
</code></pre>
<p>And in use:</p>
<pre><code>--&gt; System.FIRST
&lt;System.First: 1&gt;

--&gt; System.FIRST.url
'https://www.example.com'
</code></pre>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<div class="post-text" itemprop="text">
<p>Make the values a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a>.</p>
<pre><code>from collections import namedtuple
from enum import Enum

Entry = namedtuple('Entry', ['value', 'url', 'something'])

class System(Enum):
  FIRST = Entry(1, 'https://www.example.com', 42)
  SECOND = Entry(2, 'https://www.test.com', 13)

print(System.FIRST.value.url)
# https://www.example.com
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried the code you wrote? It already just works! Of course you don't <em>really</em> have multiple values, you have a single tuple valueâ€”but that isn't a problem:</p>
<pre><code>&gt;&gt;&gt; class System(Enum):
...     FIRST = 1, 'https://www.example.com', 42
...     SECOND = 2, 'https://www.test.com', 13
&gt;&gt;&gt; _, url, _ = System.SECOND.value
&gt;&gt;&gt; url
'https://www.example.com'
&gt;&gt;&gt; a = System.FIRST
&gt;&gt;&gt; url = a.value[1]
&gt;&gt;&gt; url
'https://www.example.com'
</code></pre>
<p>There are things you can do to make this a little nicer, like using a <code>namedtuple</code> instead of a plain <code>tuple</code> so you can write <code>a.value.url</code> instead of <code>a.value[1]</code>, but you've already written something that works.</p>
</div>
<span class="comment-copy">Thank you. This is exactly what I was looking for! If I only use one property. Should I still add the <code>int</code>s to the definition? For the enum would you prefer just to put the <code>url</code> so <code>enum_mem.value</code> and <code>enum_mem.url</code> will give the same result?</span>
<span class="comment-copy">@user9115052 I'd say it depends on your use case. Generally speaking, there's no need to have an integer associated with each enum value. But if you have a use for that integer in your program, go ahead and add it.</span>
