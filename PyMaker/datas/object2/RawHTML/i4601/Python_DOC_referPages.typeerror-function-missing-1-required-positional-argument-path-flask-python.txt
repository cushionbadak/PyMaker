<div class="post-text" itemprop="text">
<p>I have a static folder and my main usage is a sub-directory there that is found in 
root/static/images/monkeys</p>
<p>I have a flask app and I have a variable like so:</p>
<pre><code>app = Flask(__name__)
monkeys_folder_path = os.path.join(app.static_folder, 'images', 'monkeys')
</code></pre>
<p>I use it in two functions, one function serves a static image in that folder, this function works:</p>
<pre><code>@app.route('/monkey/&lt;address&gt;')
def serve_static(address):
    # this creates an image in /static/images/monkeys
    monkey_generator.create_monkey_from_address(address)
    filename = address + ".png"
    return send_from_directory(monkeys_folder_path,filename)
</code></pre>
<p>I also have another function that uses this path, this function deletes images after X seconds from the folder</p>
<pre><code>def remove_monkey_images(path):
  threading.Timer(5.0, remove_monkey_images).start()
  # this function iterates in a loop over the files in the path and deletes them
  helper_functions.delete_images(path)
</code></pre>
<p>This function does not work, when I run the server locally I get</p>
<pre><code> File "C:\Users\user\AppData\Local\Programs\Python\Python36-32\lib\threading.py", line 1182, in run
    self.function(*self.args, **self.kwargs)
TypeError: remove_monkey_images() missing 1 required positional argument: 'path'
</code></pre>
<p>I call the function like so:</p>
<pre><code>remove_monkey_images(path=monkeys_folder_path)
</code></pre>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you create the <code>Timer</code>, you have to pass it the called function's arguments, like this:</p>
<pre><code>threading.Timer(5.0, remove_monkey_images, (path,)).start()
</code></pre>
<p><a href="https://docs.python.org/3/library/threading.html?highlight=lock#threading.Timer" rel="nofollow noreferrer"><em>Source</em></a> </p>
<p>As for the rest of your code I don't really know if it's consistent, but at least that's the cause of the error you're getting.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python function can have <code>positional</code> or <code>keyword</code> <a href="https://docs.python.org/3/glossary.html" rel="nofollow noreferrer">parameters</a>. Your function definition</p>
<pre><code>def remove_monkey_images(path)
</code></pre>
<p>describe function with one <code>positional</code> parameter. This function could be called only with one positional argument like</p>
<pre><code>remove_monkey_images(monkeys_folder_path)
</code></pre>
<p>If you want to use <code>keyword</code> argument you needs</p>
<pre><code>def remove_monkey_images(path='/some_default_path')
</code></pre>
<p>In this case you could call function both with</p>
<pre><code>remove_monkey_images(monkeys_folder_path)
</code></pre>
<p>and</p>
<pre><code>remove_monkey_images(path=monkeys_folder_path)
</code></pre>
<p>and</p>
<pre><code>remove_monkey_images()
</code></pre>
<p>In latter case inside function argument <code>path</code> will have default value '/some_default_path'.</p>
</div>
<div class="post-text" itemprop="text">
<p>there is a syntax issue with your problem.</p>
<p>Either do this:</p>
<pre><code>remove_monkey_images(monkeys_folder_path)
</code></pre>
<p>instead of </p>
<pre><code>remove_monkey_images(path=monkeys_folder_path)
</code></pre>
<p>or</p>
<p>Update your function definition as:</p>
<pre><code>def remove_monkey_images(path=None):
  threading.Timer(5.0, remove_monkey_images).start()
  # this function iterates in a loop over the files in the path and deletes them
  helper_functions.delete_images(path)
</code></pre>
</div>
<span class="comment-copy">This one did the trick :) Thanks</span>
<span class="comment-copy">This isn't true; positional parameters can be passed in kwarg form too. Both <code>remove_monkey_images(monkeys_folder_path)</code> and <code>remove_monkey_images(path=monkeys_folder_path)</code> will work.</span>
<span class="comment-copy">Could you provide function definition for your case?</span>
<span class="comment-copy">Well say you have a function defined as: <code>def my_function(positional_param): pass</code>  You could either call it as: <code>my_function(positional_param="value")</code> or <code>my_function("value")</code>, both will work.</span>
