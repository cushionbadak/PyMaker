<div class="post-text" itemprop="text">
<p>So I understand that:</p>
<blockquote>
<p>The end of a logical line is represented by the token NEWLINE</p>
</blockquote>
<p>This means the way Python's grammar is defined the only way to end a logical line is with a <code>\n</code> token.</p>
<p>The same goes for physical lines (rather an EOL, which is the EOL of the platform you're using when writing the file but nevertheless converted to a universal <code>\n</code> by Python.</p>
<p>A logical line can or cannot be equivalent to one or more physical lines, but usually it's one, and most of the times it's one if you write clean code.</p>
<p>In the sense that:</p>
<pre><code>foo = 'some_value'  # 1 logical line = 1 physical  
foo, bar, baz = 'their', 'corresponding', 'values'  # 1 logical line = 1 physical
some_var, another_var = 10, 10; print(some_var, another_var); some_fn_call()

# the above is still still 1 logical line = 1 physical line
# because ; is not a terminator per se but a delimiter
# since Python doesn't use EBNF exactly but rather a modified form of BNF

# p.s one should never write code as the last line, it's just for educational purposes
</code></pre>
<p>Without showing examples of how 1 logical is equivalent to &gt; 1 physical, <strong>my question is the following part from the docs</strong>:</p>
<blockquote>
<p>Statements cannot cross logical line boundaries except where NEWLINE
  is allowed by the syntax (e.g., between statements in compound
  statements)</p>
</blockquote>
<p>But what does this even mean? I understand the list of the compound statements, be them: <strong>if, while, for,</strong> etc. they are all made up of one or multiple <strong>clauses</strong> and each <strong>clause</strong>, in turn is made up of <strong>a header</strong> and <strong>a suite</strong>.
The <strong>suite</strong> is made up of one or multiple <strong>statements</strong>, let's take an example to be more specific:</p>
<p>So the <strong>if statement</strong> is something like this according to the grammar <strong>(excluding the elifs and else clauses)</strong>:</p>
<pre><code>if_stmt ::=  "if" expression ":" suite
</code></pre>
<p>where the suite and its subsequent statements: </p>
<pre><code>suite         ::=  stmt_list NEWLINE | NEWLINE INDENT statement+ DEDENT
statement     ::=  stmt_list NEWLINE | compound_stmt
stmt_list     ::=  simple_stmt (";" simple_stmt)* [";"]
</code></pre>
<p>so this means that if you want you can choose (given by "|") your suite to be 1 of 2 ways:</p>
<ol>
<li><p>on the same line:</p>
<p><strong>disadvantages</strong>: not pythonic and you cannot have another compound statement that introduces a new block (like a func def, another if, etc)</p>
<p><strong>advatanges</strong>: one liner I guess</p></li>
</ol>
<p>example:</p>
<pre><code>if 'truthy_string': foo, bar, baz = 1, 2, 3; print('whatever'); call_some_fn();
</code></pre>
<ol start="2">
<li><p>introduce a new block:</p>
<p><strong>advantages</strong>: all, and the proper way to do it</p></li>
</ol>
<p>example:</p>
<pre><code>if 'truthy_value':
    first_stmt = 5
    second_stmt = 10
    a, b, c = 1, 2, 3
    func_call()
    result = inception(nested(calls(one_param), another_param), yet_another))
</code></pre>
<p>but I don't see how </p>
<blockquote>
<p>Statements cannot cross logical line boundaries except where NEWLINE
  is allowed by the syntax</p>
</blockquote>
<p>What I see above is a <strong>suite</strong>, which is a <strong>block of code</strong> controlled by the <strong>if clause</strong>, and in turn, that <strong>suite</strong>, is made up of logical, independent lines (statements), where each logical line is one physical line (coincidentally). I don't see how one logical line can cross the boundaries (which basically is just a fancy word for the end, the limit, which is newline), I don't see how one statement can cross those boundaries and span into the next statement, or maybe I'm really confused and have everything mixed up, but if someone can please explain.</p>
<p>Thank you for your time in advance.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Pythons grammar</h2>
<p>Fortunately there is a <a href="https://docs.python.org/reference/grammar.html" rel="nofollow noreferrer">Full Grammar specification</a> in the Python documentation.</p>
<p>A statement is defined in that specification as:</p>
<pre><code>stmt: simple_stmt | compound_stmt
</code></pre>
<p>And a logical line is delimited by <code>NEWLINE</code> (that's not in the specification but based on your question).</p>
<h2>Step-by-step</h2>
<p>Okay, let's go through this, what's the specification for a </p>
<h3><code>simple_stmt</code>:</h3>
<pre><code>simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |
             import_stmt | global_stmt | nonlocal_stmt | assert_stmt)
</code></pre>
<p>Okay now it goes into several different paths and it probably doesn't make sense to go through all of them separately but based on the specification a <code>simple_stmt</code> <em>could</em> cross logical line boundaries <em>if</em> any of the <code>small_stmt</code>s contains a <code>NEWLINE</code> (currently they <em>don't</em> but <em>could</em>).</p>
<p>Apart from that only theoretical possibility there is actually the </p>
<h3><code>compound_stmt</code>:</h3>
<pre><code>compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt
[...]
if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
[...]
suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT
</code></pre>
<p>I picked only the <code>if</code> statement and <code>suite</code> because it already suffices. The <code>if</code> statement <em>including</em> <code>elif</code> and <code>else</code> and all of the content in these is <strong>one statement</strong> (a compound statement). And because it may contain <code>NEWLINE</code>s (if the <code>suite</code> isn't just a <code>simple_stmt</code>) it already fulfills the requirement of "a statement that crosses logical line boundaries".</p>
<h2>An example <code>if</code> (schematic):</h2>
<pre><code>if 1:
    100
    200
</code></pre>
<p>would be:</p>
<pre><code>if_stmt
|---&gt; test        --&gt; 1
|---&gt; NEWLINE
|---&gt; INDENT
|---&gt; expr_stmt   --&gt; 100
|---&gt; NEWLINE
|---&gt; expr_stmt   --&gt; 200
|---&gt; NEWLINE
|---&gt; DEDENT
</code></pre>
<p>And all of this belongs to the if statement (and it's not just a block "controlled" by the <code>if</code> or <code>while</code>, ...).</p>
<h2>The same <code>if</code> with <a href="https://docs.python.org/library/parser.html" rel="nofollow noreferrer"><code>parser</code></a>, <a href="https://docs.python.org/library/symbol.html#module-symbol" rel="nofollow noreferrer"><code>symbol</code></a> and <a href="https://docs.python.org/library/token.html#module-token" rel="nofollow noreferrer"><code>token</code></a></h2>
<p>A way to visualize that would be using the built-in <code>parser</code>, <code>token</code> and <code>symbol</code> modules (really, I haven't known about this modules before I wrote the answer):</p>
<pre><code>import symbol
import parser
import token

s = """
if 1:
    100
    200
"""
st = parser.suite(s)

def recursive_print(inp, level=0):
    for idx, item in enumerate(inp):
        if isinstance(item, int):
            print('.'*level, symbol.sym_name.get(item, token.tok_name.get(item, item)), sep="")
        elif isinstance(item, list):
            recursive_print(item, level+1)
        else:
            print('.'*level, repr(item), sep="")

recursive_print(st.tolist())
</code></pre>
<p>Actually I cannot explain most of the <code>parser</code> result but it shows (if you remove a lot of unnecessary lines) that the <code>suite</code> including it's newlines really belongs to the <code>if_stmt</code>. Indentation represents the "depth" of the parser at a specific point.</p>
<pre><code>file_input
.stmt
..compound_stmt
...if_stmt
....NAME
....'if'
....test
.........expr
...................NUMBER
...................'1'
....COLON
....suite
.....NEWLINE
.....INDENT
.....stmt
...............expr
.........................NUMBER
.........................'100'
.......NEWLINE
.....stmt
...............expr
.........................NUMBER
.........................'200'
.......NEWLINE
.....DEDENT
.NEWLINE
.ENDMARKER
</code></pre>
<p>That could probably be made much more beautiful but I hope it serves as illustration even in it's current form.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's simpler than you think. A compound statement is considered a single statement, even though it may have other statements inside. Quoting the <a href="https://docs.python.org/3/reference/compound_stmts.html" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>Compound statements contain (groups of) other statements; they affect or control the execution of those other statements in some way. <strong>In general, compound statements span multiple lines</strong>, although in simple incarnations a whole compound statement may be contained in one line.</p>
</blockquote>
<p>For example,</p>
<pre><code>if a &lt; b:
    do_thing()
    do_other_thing()
</code></pre>
<p>is a single <code>if</code> statement occupying 3 logical lines. That's how a statement can cross logical line boundaries.</p>
</div>
<span class="comment-copy">I split lines in python 2 with a backslash at the end of the first part/line</span>
<span class="comment-copy">I'm sorry but what does this have to do with my question? also please note that the recommended way is against using backslashes</span>
<span class="comment-copy">what an awesome explanation, all clear now, thank you!</span>
<span class="comment-copy">thank you for your answer! I got it eventually, the problem was that I wasn't seeing the if statement as a whole, but rather as independent simple statements, I was thinking in logical lines rather than statements...so in the sense that... I was thinking, man how can it be possible to ever make a logical line span into the next, well that can't be possible since when you hit enter and add the NEWLINE token, the logical line ends...and that is still valid, but a compound statement as a whole, spans over multiple logical lines, crossing the boundaries of a single logical line..</span>
