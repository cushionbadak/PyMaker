<div class="post-text" itemprop="text">
<p>Problem:</p>
<p>Males and Females can use a unisex bathroom.</p>
<p>The bathroom has infinite capacity but Males and Females cannot use the bathroom at the same time.</p>
<p>I'm having trouble enforcing the sex-segregation provision. I'm trying to use the LightSwitch design pattern from "Little Book of Semaphores" and I can't figure out why the pattern isn't excluding the opposite sex when a male or female is in the bathroom.</p>
<p>This isn't a homework problem. It's a problem I bombed on in an interview.</p>
<p>Users.py:</p>
<pre><code>class User(object):

    def __init__(self, cv, sex, line_full_event):
        self.cv = cv
        self.sex = sex
        self.line_full_event = line_full_event

    def enter_bathroom(self, bathroom):
        with self.cv:
            bathroom.enter(self.sex, self.cv)

    def leave_bathroom(self, bathroom):
        bathroom.leave(self.sex, self.cv)

class Male(User):

    def __init__(self, cv, sex, line_full_event):
        super(Male, self).__init__(cv, sex, line_full_event)

    def go(self, bathroom):
        logging.debug("Male queueing up")
        self.line_full_event.wait()
        super(Male, self).enter_bathroom(bathroom)
        super(Male, self).leave_bathroom(bathroom)

class Female(User):

   def __init__(self, cv, sex, line_full_event):
       super(Female, self).__init__(cv, sex, line_full_event)

   def go(self, bathroom):
       logging.debug("Female queueing up")
       self.line_full_event.wait()
       super(Female, self).enter_bathroom(bathroom)
       super(Female, self).leave_bathroom(bathroom)
</code></pre>
<p>LightSwitch.py:</p>
<pre><code>class LightSwitch:

    def __init__(self):
        self.mutex = Lock()
        self.count = 0

    def inc(self, cv):
        with self.mutex:
            self.count += 1
            logging.debug("inc-ing! count == %d", self.count)
            if self.count == 1:
                cv.acquire()


    def dec(self, cv):
        with self.mutex:
            self.count -= 1
            logging.debug("dec-ing! count == %d", self.count)
            if self.count == 0:
                cv.notify_all()
                cv.release()
</code></pre>
<p>Bathroom.py</p>
<pre><code>MALE = 1
FEMALE = 0

class Bathroom:

    def __init__(self):
        self.male_switch = LightSwitch()
        self.female_switch = LightSwitch()

    def enter(self, sex,  cv):
        if sex == MALE:
            self.female_switch.inc(cv)
        elif sex == FEMALE:
            self.male_switch.inc(cv)

    def leave(self, sex, cv):
        if sex == MALE:
            self.female_switch.dec(cv)
        elif sex == FEMALE:
            self.male_switch.dec(cv)
</code></pre>
<p>Main.py:</p>
<pre><code>def Main():
    logging.basicConfig(format='%(threadName)s, %(asctime)s, %(message)s', datefmt='%M:%S', level=logging.DEBUG)
    # create Bathroom                                                                                                
    b = Bathroom()
    # create whatever threading objects we need                                                                      
    males_can_enter, females_can_enter = get_cvs()
    line_full = threading.Event()
    for i in range(10):
        if random.randint(0,1) == MALE:
            # create Male user                                                                                       
            user =  Male(males_can_enter, MALE, line_full)
        else:
            # create Female user                                                                                     
            user = Female(females_can_enter, FEMALE, line_full)
        t = threading.Thread(target=user.go, args=(b,))
        t.start()
    logging.debug("we're off to the races!")
    line_full.set()

def get_cvs():
    return (threading.Condition(), threading.Condition())


if __name__ == '__main__':
    Main()
</code></pre>
<p>Output:</p>
<pre><code>Thread-1, 10:21, Male queueing up
Thread-2, 10:21, Female queueing up
Thread-3, 10:21, Male queueing up
Thread-4, 10:21, Female queueing up
Thread-5, 10:21, Male queueing up
Thread-6, 10:21, Female queueing up
Thread-7, 10:21, Male queueing up
Thread-8, 10:21, Female queueing up
Thread-9, 10:21, Female queueing up
Thread-10, 10:21, Male queueing up
MainThread, 10:21, we're off to the races!
Thread-2, 10:21, inc-ing! count == 1
Thread-3, 10:21, inc-ing! count == 1
Thread-3, 10:21, dec-ing! count == 0
Thread-2, 10:21, dec-ing! count == 0
Thread-5, 10:21, inc-ing! count == 1
Thread-9, 10:21, inc-ing! count == 1
Thread-5, 10:21, dec-ing! count == 0
Thread-9, 10:21, dec-ing! count == 0
Thread-4, 10:21, inc-ing! count == 1
Thread-7, 10:21, inc-ing! count == 1
Thread-4, 10:21, dec-ing! count == 0
Thread-7, 10:21, dec-ing! count == 0
Thread-8, 10:21, inc-ing! count == 1
Thread-10, 10:21, inc-ing! count == 1
Thread-8, 10:21, dec-ing! count == 0
Thread-10, 10:21, dec-ing! count == 0
Thread-1, 10:21, inc-ing! count == 1
Thread-6, 10:21, inc-ing! count == 1
Thread-1, 10:21, dec-ing! count == 0
Thread-6, 10:21, dec-ing! count == 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First off, I don't have the "Little Book of Sempahores" sitting around and 30 seconds of searching did not yield anything CS-related about "Lightswitch Design Pattern" (but plenty of stuff about home improvement). Anyhow, I believe you're code was a bit too complicated. Here's what I came up with:</p>
<pre><code>import logging, threading, random, time

# Lame enum in case you aren't on Python 3.4.
# FEMALE = 0; MALE = 1
names = ["Female", "Male"]

class User(object):
    def __init__(self, sex):
        self.sex = sex
        self.name = names[sex]

    def go(self, bathroom):
        logging.debug("%s queueing up" % self.name)

        with bathroom.condition:
            while not bathroom.is_open(self):
                bathroom.condition.wait()

        logging.debug("%s entering the bathroom" % self.name)
        bathroom.enter(self)
        time.sleep(1)

        logging.debug("%s leaving the bathroom" % self.name)
        bathroom.leave(self)

class Bathroom(object):
    def __init__(self):
        self.condition = threading.Condition()
        self.current_sex = None
        self.count = 0

    def is_open(self, user):
        return self.current_sex is None or self.current_sex == user.sex

    def enter(self, user):
        assert(self.is_open(user))
        self.current_sex = user.sex
        self.count += 1

    def leave(self, user):
        assert(user.sex == self.current_sex)
        self.count -= 1
        assert(self.count &gt;= 0)

        if self.count == 0:
            logging.debug("Bathroom is empty. Opening for anyone")
            self.current_sex = None
            with self.condition:
                self.condition.notify_all()

def Main():
    logging.basicConfig(format='%(threadName)s, %(asctime)s, %(message)s', datefmt='%M:%S', level=logging.DEBUG)

    b = Bathroom()

    logging.debug("we're off to the races!")
    for i in range(10):
        user = User(random.randint(0, 1))
        t = threading.Thread(target=user.go, args=(b,))
        logging.debug("Starting a thread")
        t.start()

if __name__ == '__main__':
    Main()
</code></pre>
<p>Some general comments about the multi-threaded portion:</p>
<ul>
<li>The whole thing is based around a single <a href="https://docs.python.org/3/library/threading.html#condition-objects" rel="nofollow noreferrer">threading.Condition</a> which the bathroom keeps track of.</li>
<li>Anyone can enter the bathroom when it's already assigned to their sex or if it's empty.</li>
<li>When a bathroom empties out, the bathroom fires off a <a href="https://docs.python.org/3/library/threading.html#threading.Condition.notify_all" rel="nofollow noreferrer">notify_all</a> to let all of the people waiting that the bathroom is available for use.</li>
<li>Beyond the output making sense, I also added a bunch of <code>assert</code>s to make sure that things were working as expected.</li>
</ul>
<p>Output:</p>
<pre><code>MainThread, 19:27, we're off to the races!
MainThread, 19:27, Starting a thread
Thread-1, 19:27, Male queueing up
Thread-1, 19:27, Male entering the bathroom
MainThread, 19:27, Starting a thread
Thread-2, 19:27, Female queueing up
MainThread, 19:27, Starting a thread
Thread-3, 19:27, Male queueing up
MainThread, 19:27, Starting a thread
Thread-3, 19:27, Male entering the bathroom
Thread-4, 19:27, Female queueing up
MainThread, 19:27, Starting a thread
Thread-5, 19:27, Female queueing up
MainThread, 19:27, Starting a thread
Thread-6, 19:27, Female queueing up
MainThread, 19:27, Starting a thread
Thread-7, 19:27, Male queueing up
MainThread, 19:27, Starting a thread
Thread-7, 19:27, Male entering the bathroom
Thread-8, 19:27, Female queueing up
MainThread, 19:27, Starting a thread
Thread-9, 19:27, Male queueing up
MainThread, 19:27, Starting a thread
Thread-9, 19:27, Male entering the bathroom
Thread-10, 19:27, Male queueing up
Thread-10, 19:27, Male entering the bathroom
Thread-3, 19:28, Male leaving the bathroom
Thread-1, 19:28, Male leaving the bathroom
Thread-7, 19:28, Male leaving the bathroom
Thread-10, 19:28, Male leaving the bathroom
Thread-9, 19:28, Male leaving the bathroom
Thread-9, 19:28, Bathroom is empty. Opening for anyone
Thread-2, 19:28, Female entering the bathroom
Thread-4, 19:28, Female entering the bathroom
Thread-5, 19:28, Female entering the bathroom
Thread-6, 19:28, Female entering the bathroom
Thread-8, 19:28, Female entering the bathroom
Thread-6, 19:29, Female leaving the bathroom
Thread-5, 19:29, Female leaving the bathroom
Thread-4, 19:29, Female leaving the bathroom
Thread-2, 19:29, Female leaving the bathroom
Thread-8, 19:29, Female leaving the bathroom
Thread-8, 19:29, Bathroom is empty. Opening for anyone
</code></pre>
<p>Notice how everyone from a single sex mobs the bathroom at first (because it's available to them). After everyone leaves, everyone from the other sex mobs the bathroom. This creates two "waves" of people (where each wave takes slightly more than a second to finish because that's how long the <code>sleep</code> is for.</p>
<p>I also simplified some of your code to make the threading portion clearer and improve separation of concerns in general. Notably, I completely removed the <code>line_full</code> event because I didn't think that was necessary for the rest of the code to work as intended.</p>
</div>
