<div class="post-text" itemprop="text">
<p>Consider the following piece of Python (2.x) code:</p>
<pre><code>for line in open('foo').readlines():
    print line.rstrip()
</code></pre>
<p>I assume that since the open file remains unreferenced it has to be closed automatically. I have read about garbage collector in Python which frees memory allocated by unused objects. Is GC general enough to handle the files too?</p>
</div>
<div class="post-text" itemprop="text">
<p>Taken from the <a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">docs</a> (python 3.6):</p>
<blockquote>
<p>If you’re not using the with keyword, then you should call f.close() to close the file and immediately free up any system resources used by it. If you don’t explicitly close a file, <strong>Python’s garbage collector will eventually destroy the object and close the open file for you</strong>, but the file may stay open for a while. Another risk is that different Python implementations will do this clean-up at different times.</p>
</blockquote>
<p>So yes, the file will be closed automatically, but in order to be in control of the process you should do so yourself or use a <code>with</code> statement:</p>
<pre><code>with open('foo') as foo_file
    for line in foo_file.readlines():
        print line.rstrip()
</code></pre>
<p><code>foo_file</code> will be clsoed once the <code>with</code> block ends</p>
<p>In the python 2.7 <a href="https://docs.python.org/2.7/tutorial/inputoutput.html" rel="nofollow noreferrer">docs</a>, the wording is different:</p>
<blockquote>
<p>When you’re done with a file, call f.close() to close it and free up
  any system resources taken up by the open file. After calling
  f.close(), attempts to use the file object will automatically fail.</p>
</blockquote>
<p>so I assume that you should not depend on the garbage collector automatically closing files for you and just do it manually/use <code>with</code></p>
</div>
<div class="post-text" itemprop="text">
<p>It depends on what you do, check out this <a href="http://blog.lerner.co.il/dont-use-python-close-files-answer-depends" rel="nofollow noreferrer">description how it works</a>.</p>
<p>In general I would recommend to use the context manager of the file:</p>
<pre><code>with open("foo", "r") as f:
    for line in f.readlines():
    # ....
</code></pre>
<p>which is similar to (for basic understanding):</p>
<pre><code>file_context_manager = open("foo", "r").__enter__()
for line in file_context_manager.readlines():
    # ....
file_context_manager.__exit__()
</code></pre>
<p>The first version is a lot more readable, and the <code>with</code>statement calls the exit method automatically (plus a bit more <a href="https://www.python.org/dev/peps/pep-0343/#specification-the-with-statement" rel="nofollow noreferrer">context handling</a>).
The file will be closed automatically when the scope of the <code>with</code> statement is left.</p>
</div>
<span class="comment-copy">Related reading: <a href="https://blogs.msdn.microsoft.com/oldnewthing/20100809-00/?p=13203" rel="nofollow noreferrer">Everybody thinks about garbage collection the wrong way</a>.</span>
<span class="comment-copy">I much prefer using explicit `with' construct.</span>
<span class="comment-copy">"which is the same as" is a confusing statement, since the with block will call <code>__exit__()</code> in the end, whereas there is no guaranteed cleanup at the end of the for loop</span>
<span class="comment-copy">Your second example is very much <i>not</i> the same, since you call <code>__enter__</code> but never call <code>__exit__</code>.</span>
<span class="comment-copy">My bad, I updated the answer.</span>
<span class="comment-copy">The behavior is still not exactly the same. The specification in <a href="https://www.python.org/dev/peps/pep-0343/#specification-the-with-statement" rel="nofollow noreferrer">PEP 343</a> gives the exact translation of what the <code>with</code> block expands to, and it's a lot more complicated.</span>
