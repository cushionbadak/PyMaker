<div class="post-text" itemprop="text">
<p>In a python source code I stumbled upon I've seen a small <strong>b</strong> before a string like in:</p>
<pre><code>b"abcdef"
</code></pre>
<p>I know about the <strong><code>u</code></strong> prefix signifying a unicode string, and the <strong><code>r</code></strong> prefix for a raw string literal. </p>
<p>What does the <code>b</code> stand for and in which kind of source code is it useful as it seems to be exactly like a plain string without any prefix?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is Python3 <code>bytes</code> <a href="http://docs.python.org/py3k/reference/lexical_analysis.html#literals" rel="noreferrer">literal</a>. This prefix is absent in Python 2.5 and older (it is equivalent to a plain string of 2.x, while plain string of 3.x is equivalent to a literal with <code>u</code> prefix in 2.x). In Python 2.6+ it is equivalent to a plain string, <a href="http://docs.python.org/whatsnew/2.6.html#pep-3112-byte-literals" rel="noreferrer">for compatibility with 3.x</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>b</code> prefix signifies a <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="noreferrer"><code>bytes</code> string literal</a>.</p>
<p>If you see it used in Python 3 source code, the expression creates a <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="noreferrer"><code>bytes</code> object</a>, not a regular <a href="https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str" rel="noreferrer">Unicode <code>str</code> object</a>. If you see it echoed in your Python shell or as part of a list, dict or other container contents, then you see a <code>bytes</code> object represented using this notation.</p>
<p><code>bytes</code> objects basically contain a sequence of integers in the range 0-255, but when represented, Python displays these bytes as ASCII codepoints to make it easier to read their contents. Any bytes outside the <em>printable</em> range of ASCII characters are shown as escape sequences (e.g. <code>\n</code>, <code>\x82</code>, etc.). Inversely, you can use both ASCII characters and escape sequences to define byte values; for ASCII values their numeric value is used (e.g. <code>b'A'</code> == <code>b'\x41'</code>)</p>
<p>Because a <code>bytes</code> object consist of a sequence of integers, you can construct a <code>bytes</code> object from any other  sequence of integers with values in the 0-255 range, like a list:</p>
<pre><code>bytes([72, 101, 108, 108, 111])
</code></pre>
<p>and indexing gives you back the integers (but slicing produces a new <code>bytes</code> value; for the above example, <code>value[1]</code> gives you <code>101</code>, but <code>value[:1]</code> is <code>b'H'</code> as 72 is the ASCII code point for the capital letter <em>H</em>).</p>
<p><code>bytes</code> model <em>binary data</em>, including <em>encoded text</em>. If your <code>bytes</code> value does contain text, you need to first decode it, using the correct codec. If the data is encoded as UTF-8, for example, you can obtain a Unicode <code>str</code> value with:</p>
<pre><code>strvalue = bytesvalue.decode('utf-8')
</code></pre>
<p>Conversely, to go from text in a <code>str</code> object to <code>bytes</code> you need to <em>encode</em>. You need to decide on an encoding to use; the default is to use UTF-8, but what you will need is highly dependent on your use case:</p>
<pre><code>bytesvalue = strvalue.encode('utf-8')
</code></pre>
<p>You can also use the constructor, <code>bytes(strvalue, encoding)</code> to do the same. </p>
<p>Both the decoding and encoding methods take an extra argument to <a href="https://docs.python.org/3/library/codecs.html#error-handlers" rel="noreferrer">specify how errors should be handled</a>.</p>
<p>Python 2, versions 2.6 and 2.7 also support creating string literals using <code>b'..'</code> string literal syntax, to ease  code that works on both Python 2 and 3.</p>
<p><code>bytes</code> objects are immutable, just like <code>str</code> strings are. Use a <a href="https://docs.python.org/3/library/stdtypes.html#bytearray" rel="noreferrer"><code>bytearray()</code> object</a> if you need to have a mutable bytes value. </p>
</div>
<span class="comment-copy">@SLott: follow the link you provided you'll see the b prefix is <b>not</b> allowed in string prefix... for 2.6 (looks like a minor error in reference material). And googling about these kind of things is not easy. I tried keywords like "b python string prefix" and got basically nowhere.</span>
<span class="comment-copy">The link S.Lott used is missing a version specifier; this is about Python 3: <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-literals" rel="nofollow noreferrer">docs.python.org/3/reference/…</a>. The prefix is now also supported in <a href="https://docs.python.org/2/whatsnew/2.6.html#pep-3112-byte-literals" rel="nofollow noreferrer">Python 2.6 and up</a> to facilitate cross-version Python code.</span>
<span class="comment-copy">this question is neither "an exact duplicate" nor an answer to the question "Can I get rid of this 'b' character in my print statement?"    <a href="http://stackoverflow.com/questions/42599851/can-i-get-rid-of-this-b-character-in-my-print-statement/42599902#42599902" title="can i get rid of this b character in my print statement">stackoverflow.com/questions/42599851/…</a> would you mind unmarking that please marijin? the person who asked as well as the person who actually attempted an answer might appreciate being able to have an answer to the actual question posed.</span>
<span class="comment-copy">@WRAR: Was in python 2.6 code I saw this, seems it was introduced in python2.6</span>
<span class="comment-copy">I specifically checked it in the 2.6 reference before posting: <a href="http://docs.python.org/reference/lexical_analysis.html#literals" rel="nofollow noreferrer">docs.python.org/reference/lexical_analysis.html#literals</a></span>
<span class="comment-copy">OK, "For future compatibility, Python 2.6 adds bytes as a synonym for the str type, and it also supports the b'' notation.", from the "What's new".</span>
<span class="comment-copy">as the above links now point to 2.7 reference and b prefix was added, here is a link to old bogus reference <a href="http://docs.python.org/release/2.6.8/reference/lexical_analysis.html#literals" rel="nofollow noreferrer">docs.python.org/release/2.6.8/reference/…</a></span>
