<div class="post-text" itemprop="text">
<p>I am using a function that multiplies probabilities there by creating very small values. I am using <code>decimal.Decimal</code> module to handle it and then when the compuation is complete I convert that decimal to <code>logofOdds</code> using <code>math.log</code> module/function. But, below a certain proability python cannot convert these very small probabilities to log2 or 10 of likelyhood ratio.</p>
<p>I am getting <code>ValueError: math domain error</code></p>
<p>So, I printed the value before the traceback started and it seems to be this number:</p>
<p><code>2.4876626750969332485460767406646530276378975654773588506772125620858727319570054153525540357327805722211631386444621446226193195409521079089382667946955357511114536197822067973513019098983691433561051610219726750413489309980667312714519374641433925197450250314924925500181809328656811236486523523785835600132361529950090E-366</code></p>
<p>Other small numbers like this are getting handled by <code>math.log</code> though in the same program:
<code>5.0495856951184114023890172277484001329118412629157526209503867218204386939259819037402424581363918720565886924655927609161379229574865468595907661385853201472751861413845827437245978577896538019445515183910587509474989069747817303700894727201121392323641965506674606552182934813779310061601566189062725979740753305935661E-31</code></p>
<p>Is it true? any way to fix this. I know I can take the log of the probs and then sum it along the way, but when I tried to do that, it seems I have to update several places in my program - could take significant hours or days. and there is another process to convert it back to decimal.</p>
<p>Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to take logarithms of <code>Decimal</code> objects, use the <a href="https://docs.python.org/3/library/decimal.html#decimal.Decimal.ln" rel="nofollow noreferrer"><code>ln</code></a> or <a href="https://docs.python.org/3/library/decimal.html#decimal.Decimal.log10" rel="nofollow noreferrer"><code>log10</code></a> methods. Aside from a <a href="https://github.com/python/cpython/blob/v3.6.4/Modules/mathmodule.c#L1690" rel="nofollow noreferrer">weird special case for huge ints</a>, <code>math.log</code> casts inputs to float.</p>
<pre><code>whatever_decimal.ln()
</code></pre>
</div>
<span class="comment-copy">Hmm, it's good to know that <code>decimal</code> module itself has <code>log methods</code> embedded in it.</span>
<span class="comment-copy">That's not <i>quite</i> true—<code>math.log</code> is documented to work accurately on at least ints and floats, and it <i>could</i> work on other types, although without some kind of protocol it's hard to see how any implementation <i>would</i> work on anything but builtins except by treating any int subclass as int and converting everything else to float, which is <a href="https://github.com/python/cpython/blob/master/Modules/mathmodule.c#L1886" rel="nofollow noreferrer">what CPython does</a>, although with a little extra wrapper work for things that are convertible but might overflow…).</span>
<span class="comment-copy">@user235: I know it may not be a good practice, but may I direct you to another problem. I put bounty on it but it is not receiving attention. Based on your rep, I am hoping you can help. <a href="https://stackoverflow.com/questions/49429368/how-to-solve-memory-issues-problems-while-multiprocessing-using-pool-map" title="how to solve memory issues problems while multiprocessing using pool map">stackoverflow.com/questions/49429368/…</a></span>
<span class="comment-copy">@everestial007 A CPython <code>float</code> is a C <code>double</code>, which on almost every platform is an IEEE double (or newer IEEE binary64, which amounts to the same thing),  and <code>2.4...e-366</code> is smaller than the smallest denormal IEEE double, so converting it to float underflows to 0.0. So you're asking for the log of 0, which is of course a domain error.</span>
<span class="comment-copy">There is no <code>log2</code> method. You can compute it yourself as <code>whatever_decimal.ln() / Decimal('2').ln()</code>.</span>
