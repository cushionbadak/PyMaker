<div class="post-text" itemprop="text">
<p>I am encountering some issues to create and execute a post request from one of my flask @app.route. The idea would be to validate and process the data received from a web form by the server, then to call a remote service with this data as a post parameter and finally to be redirected to a new page indicated by this remote service. This is a simplified skeleton :</p>
<pre><code>import requests

@app.route('/test', methods=['POST'])

    url = 'http://exemple.com'
    headers = {'Content-type': 'text/html; charset=UTF-8'}
    response = requests.post(url, data=data, headers=headers)

    return x
</code></pre>
<p>Any hint about how am I supposed to redirect the user to the remote service using a post request (user that will then again be redirected by the remote service to another page)?</p>
<p>Thank you in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to redirect user to the remote server. Just send POST request inside this route function and <strong>either</strong> wait for the response from that server and then render some template to user with received response <strong>or</strong> send POST request to the desired server in another thread if you know that response can take a lot of time (in this case you can render some page immediately where would be something like "Processing your request" message). In the second case (in case of sending POST request in a different thread) you can show result of the request after reloading page retrieving it from some shared object in main thread that can be modified from the thread you use to send POST request from. </p>
<p>1) Sending request in the route function:</p>
<pre><code>@app.route('/test/', methods=['POST'])
def test():    
    url = 'http://exemple.com'
    headers = {'Content-type': 'text/html; charset=UTF-8'}
    response = requests.post(url, data=data, headers=headers)
    # wait for the response. it should not be higher 
    # than keep alive time for TCP connection

    # render template or redirect to some url:
    # return redirect("some_url")
    return render_template("some_page.html", message=str(response.text)) # or response.json()
</code></pre>
<p>2) Sending POST request in a different thread (you can use this option if you know that response time is much higher than TCP keep alive time):</p>
<pre><code>from threading import Thread
from flask import Flask, redirect   

app = Flask(__name__)  

shared_var = None
req_counter = 0

def send_post_req(url, data):
    global shared_var
    headers = {'Content-type': 'text/html; charset=UTF-8'}
    response = requests.post(url, data=data, headers=headers)
    shared_var = response.text # or response.json() - it's up to you

@app.route('/test/', methods=['POST'])   
def test(): 
    global req_counter 

    url = 'http://exemple.com'
    data = "some data"
    if req_counter == 0:    
        t = Thread(target=send_post_req, args=(url, data))
        t.setDaemon(True)
        t.start()
        req_counter = 1  # use req_counter if you want to send request only one time

    if shared_var:
        # render some page or redirect to desired url using:
        # return redirect(url_for('some_route_name'))
        # or 
        # return redirect("some_url")
        return render_template("some_page.html", message=str(shared_var))

    return render_template("some_page.html", message="Your request is being processed")
</code></pre>
<p>or something like that.</p>
<p>Hope my explanation is clear.</p>
<p>Also you can pay attention to <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">asyncio</a> and <a href="https://sanic.readthedocs.io/en/latest/" rel="nofollow noreferrer">Sanic</a> to use asynchronous approach.</p>
</div>
<div class="post-text" itemprop="text">
<p>Send post request with your user data. Then parse the response to get your link. </p>
<pre><code>import requests
from flask import Flask, redirect   

app = Flask(__name__)    

@app.route('/test', methods=['POST'])
def test():
    # Get your post data from your client request and process it

    # Send POST request 
    r = requests.post("http://example.com", data={your_data})

    res_var = response.text #TEXT/HTML response
    res_code = response.status_code, response.reason #HTTP
    new_destination = '' # get your new link from res_var
</code></pre>
<p>Once you have your redirect link... simply use: </p>
<p><code>return redirect(new_destination, code=302)</code></p>
</div>
