<div class="post-text" itemprop="text">
<p>I was planning to use metaclass to validate the constructor argument in Python3, but it seems <code>__new__</code>method has no access to the variable <code>val</code>, because the class <code>A()</code> has not been instantiated yet. </p>
<p>Sow what's the correct way to do it? </p>
<pre><code>class MyMeta(type):
    def __new__(cls, clsname, superclasses, attributedict):
        print("clsname: ", clsname)
        print("superclasses: ", superclasses)
        print("attributedict: ", attributedict)
        return type.__new__(cls, clsname, superclasses, attributedict)

class A(metaclass=MyMeta):
    def __init__(self, val):
        self.val = val

A(123)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/49455904/1222951">wim is absolutely correct that this isn't a good use of metaclasses</a>, but it's certainly <em>possible</em> (and easy, too).</p>
<p>Consider how you would create a new instance of your class. You do this:</p>
<pre><code>A(123)
</code></pre>
<p>In other words: You create an instance by calling the class. And python allows us to create custom callable objects by defining a <a href="https://docs.python.org/3/reference/datamodel.html#object.__call__" rel="nofollow noreferrer"><code>__call__</code> method</a>. So all we have to do is to implement a suitable <code>__call__</code> method in our metaclass:</p>
<pre><code>class MyMeta(type):
    def __call__(self, val):
        if not isinstance(val, str):
            raise TypeError('val must be a string')

        return super().__call__(val)

class A(metaclass=MyMeta):
    def __init__(self, val):
        self.val = val
</code></pre>
<p>And that's it. Simple, right?</p>
<pre><code>&gt;&gt;&gt; A('foo')
&lt;__main__.A object at 0x007886B0&gt;
&gt;&gt;&gt; A(123)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "untitled.py", line 5, in __call__
    raise TypeError('val must be a string')
TypeError: val must be a string
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>... it seems __new__method has no access to the variable val, because the class A() has not been instantiated yet.</p>
</blockquote>
<p>Exactly.</p>
<blockquote>
<p>So what's the correct way to do it?</p>
</blockquote>
<p>Not with a metaclass.</p>
<p>Metaclasses are for fiddling with the creation of the class object itself, and what you want to do is related to <em>instances</em> of the class.  </p>
<p><strong>Best practice:</strong> don't type-check the <code>val</code> at all.  Pythonic code is <a href="https://en.wikipedia.org/wiki/Duck_typing" rel="nofollow noreferrer">duck-typed</a>.  Simply document that you expect a string-like argument, and users who put garbage in get garbage out.</p>
</div>
<span class="comment-copy">Does it have to be a metaclass? Could it be a parent class instead? Or maybe a decorator?</span>
<span class="comment-copy">Please explain more about "validate the constructor argument".  If you want to validate <code>val</code> you would do that in <code>__init__</code>.</span>
<span class="comment-copy">Just make sure only string value are allowed.</span>
<span class="comment-copy">@Aran-Fey I know I can do it with a parent class or decorator, but I want to try to use it with a metaclass.</span>
<span class="comment-copy">You want <code>A().val</code> to only allow strings?  Better tool for the job is descriptors, not metaclasses.</span>
<span class="comment-copy">â€“1 this does not prevent later assignment of a non-string to the attribute val.</span>
