<div class="post-text" itemprop="text">
<h1>Question</h1>
<p>I'm pretty new at Python and Pygame so I figured I'd jump right it head first and work on making a little rpg style game. I keep getting the error message below. I keep checking the code and re-watching the tutorial I'm following and I can't seem to find the problem.</p>
<p>I'm sure it's pretty obvious but I don't see the problem. I'm pretty sure I formatted the code in this post right but I don't know.</p>
<h1>Error Message</h1>
<pre><code>Traceback (most recent call last):
  File "C:\Users\Clayton\PycharmProjects\newgame\main.py", line 42, in &lt;module&gt;
gameDisplay.blit(Tiles.grass(x, y))
TypeError: 'pygame.Surface' object is not callable
</code></pre>
<h1>Main.py</h1>
<pre><code>import pygame
from gamescripts.textures import *
# initialize PyGame
pygame.init()

# display information
# int defines number a an integer (ex1)
display_width = int(800)
display_height = int(600)
tile_size = 32

# color definitions
black = (0, 0, 0)
white = (255, 255, 255)
red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)
skyblue = (135, 206, 235)
yellow = (255, 255, 0)

# window
gameDisplay = pygame.display.set_mode((display_width, display_height), 
pygame.HWSURFACE | pygame.DOUBLEBUF)
pygame.display.set_caption('test game')
clock = pygame.time.Clock()

crashed = False

while not crashed:

    for event in pygame.event.get():
      if event.type == pygame.QUIT:
        crashed = True

    print(event)

# render graphics
     gameDisplay.fill(skyblue)

        for x in range(0, 620, tile_size):
          for y in range(0, 480, tile_size):
            gameDisplay.blit(Tiles.grass(x, y))

# draws everything to window
    pygame.display.update()

    # num entered is game fps
    clock.tick(60)
# quit PyGame
pygame.quit()
# quit python
quit()
</code></pre>
<h1>Textures.py</h1>
<pre><code>import pygame

pygame.init()


class Tiles:

    Size = 32

      def load_texture(file, Size):
      bitmap1 = pygame.image.load(file)
      bitmap2 = pygame.transform.scale(bitmap1, (Size, Size))
      surface = pygame.Surface((Size, Size), pygame.HWSURFACE | pygame.SRCALPHA)
      surface.blit(bitmap2, (0, 0))
      return surface

grass = load_texture('graphics\\grass.png', Size)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to create an instance of your <code>Tiles</code> class.</p>
<p>Your <code>Tiles</code> class cannot be directly blitted without creating an instance first.</p>
<pre><code>#create a instance of `Tiles`
tile=Tiles()
tile.load_texture('graphics\\grass.png',32)
</code></pre>
<p>Implemented into your code:</p>
<pre><code>import pygame
from gamescripts.textures import *
# initialize PyGame
pygame.init()

# display information
# int defines number a an integer (ex1)
display_width = int(800)
display_height = int(600)
tile_size = 32

# color definitions
black = (0, 0, 0)
white = (255, 255, 255)
red = (255, 0, 0)
green = (0, 255, 0)
blue = (0, 0, 255)
skyblue = (135, 206, 235)
yellow = (255, 255, 0)

# window
gameDisplay = pygame.display.set_mode((display_width, display_height), 
pygame.HWSURFACE | pygame.DOUBLEBUF)
pygame.display.set_caption('test game')
clock = pygame.time.Clock()

#create an instance of your `Tile` class
tile=Tile()
tile.load_texture('graphics\\grass.png',32)

crashed = False

while not crashed:

    for event in pygame.event.get():
      if event.type == pygame.QUIT:
        crashed = True

    print(event)

# render graphics
     gameDisplay.fill(skyblue)

        for x in range(0, 620, tile_size):
          for y in range(0, 480, tile_size):
            #choose example coordinates for x and y
            gameDisplay.blit(tile,(x,y))

# draws everything to window
    pygame.display.update()

    # num entered is game fps
    clock.tick(60)
# quit PyGame
pygame.quit()
# quit python
quit()

import pygame

pygame.init()
</code></pre>
<p>You should change your <code>Tile</code> class as well.</p>
<pre><code>class Tiles:
    #initialize your class
    def__init__(self):
        pass

    #ALWAYS use self as the first parameter
    def load_texture(self,file, Size):
    bitmap1 = pygame.image.load(file)
    bitmap2 = pygame.transform.scale(bitmap1, (Size, Size))
    surface = pygame.Surface((Size, Size), pygame.HWSURFACE | pygame.SRCALPHA)
    surface.blit(bitmap2, (0, 0))
    return surface
</code></pre>
<p>I suggest you really take a look at the the <a href="https://www.pygame.org/docs/" rel="nofollow noreferrer">pygame documentation</a> and the <a href="https://docs.python.org/3/" rel="nofollow noreferrer">python documentation</a>.</p>
<p>You should also look at SO if your question was already posted. For example, I found <a href="https://stackoverflow.com/questions/10325755/typeerror-pygame-surface-object-is-not-callable?rq=1">this example</a>.</p>
</div>
<span class="comment-copy">Pro-tip: excessively chatty titles are not well received here, especially if they sound like begging and pleading. Keep it succinct please.</span>
<span class="comment-copy">Alright, makes sense, thank you.</span>
<span class="comment-copy">Ok, Thank you! I'm still having some problems with changing the Tiles class though :P</span>
<span class="comment-copy">Could you post the error?</span>
<span class="comment-copy">Thanks, the problems I was facing seemed to be deeper in the code. I started drawing the window using code from one tutorial and started writing code in the window from a completely different tutorial thinking they would mesh. I threw out the project and started from the beginning again and things are working much smoother now.</span>
<span class="comment-copy">Hi @ClaytonAdams, if this, or any answer has solved your question please consider <a href="https://meta.stackexchange.com/q/5234/179419">accepting it</a> by clicking the check-mark. This indicates to the wider community that you've found a solution and gives some reputation to both the answerer and yourself. There is no obligation to do this.</span>
