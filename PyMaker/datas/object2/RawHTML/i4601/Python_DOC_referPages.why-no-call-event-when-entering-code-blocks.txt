<div class="post-text" itemprop="text">
<p>I'm using Python's <code>sys.settrace</code> to trace through code execution for a program analysis task.</p>
<p>In contrast to what the <a href="https://docs.python.org/3/library/sys.html#sys.settrace" rel="nofollow noreferrer">documentation</a> states I do not see a call event being registered when entering a code block.</p>
<p>A sample tracer I'm using is below:</p>
<pre><code>class BasicTracer(object):
    def __init__(self, fun):
        self.fun = fun
        self.result_acc = []
        self.orig_tracer = None

    def trace(self, frame, event, arg):
        self.result_acc.append((event, self.fun(frame)))
        return self.trace

    def setup(self):
        self.orig_tracer = sys.gettrace()
        sys.settrace(self.trace)

    def shutdown(self):
        sys.settrace(self.orig_tracer)

    def run(self, file_path):
        if not os.path.exists(file_path):
            with open('_instrumented.py', 'w') as f:
                f.write(file_path)
                file_path = '_instrumented.py'
        src = open(file_path, 'r').read()
        # compile, execute instrumented version
        namespace = {
            '__name__'      : '__main__',
            '__file__'      : file_path,
            '__builtins__'  : __builtins__,
        }
        compiled = compile(src, filename=file_path, mode='exec')
        self.frame_acc = []
        self.result_acc = []
        self.setup()
        exec(compiled, namespace)
        self.shutdown()
</code></pre>
<p>For example, consider the source code:</p>
<pre><code>src = """
x = 1
while x &lt; 3:
  x += 1
"""
</code></pre>
<p>I see the expected return event upon exiting the <code>while</code> body, but there is no call event when entering. Am I missing something here?</p>
<pre><code>import inspect
tracer = BasicTracer(lambda x: inspect.getframeinfo(x).code_context)
tracer.run(src)
tracer.result_acc
[('call', ['x = 1\n']),
 ('line', ['x = 1\n']),
 ('line', ['while x &lt; 3:\n']),
 ('line', ['  x += 1\n']),
 ('line', ['while x &lt; 3:\n']),
 ('line', ['  x += 1\n']),
 ('line', ['while x &lt; 3:\n']),
 ('return', ['while x &lt; 3:\n']),
 ('call', ['    def shutdown(self):\n']),
 ('line', ['        sys.settrace(self.orig_tracer)\n'])]
</code></pre>
<p>I'm using Python 3.6.3 on Mac OSX, in case that is relevant.</p>
</div>
<div class="post-text" itemprop="text">
<p>The docs are poorly worded. They say a <code>'call'</code> event occurs when</p>
<blockquote>
<p>A function is called (or some other code block entered).</p>
</blockquote>
<p>but "some other code block" is referring to anything with its own code <em>object</em> and associated scope, not blocks like <code>while</code>.</p>
</div>
<span class="comment-copy">For anyone seeing this later on: the <code>return</code> event shown is actually not a function of the while loop, but rather of the return of the <code>exec</code> called in <code>BasicTracer.run</code>. @user2357112 's response clarifies the <code>call</code> event confusion.</span>
<span class="comment-copy">Thanks for the clarification. Is there a reason a <code>'return'</code> event would occur for these then? The phrasing in the docs is the same (<code>A function (or other code block) is about to return.</code>), which prompted some of this confusion for me.</span>
<span class="comment-copy">Nevermind. I see what happened, the <code>return</code> is actually associated with the call to <code>exec</code> not the block itself. My examples were misleading me</span>
