<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/43281886/get-a-random-sample-with-replacement">Get a random sample with replacement</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>If I have a list of 10 items like <code>["item1", "item2", "item3", ..., "item10"]</code></p>
<pre><code>random.sample(range(10), 4)
</code></pre>
<p>would return a list of 4 <strong>unique</strong> items within the range.</p>
<p>Is there another "random" method that returns a random list with the possibility of repeating items?</p>
</div>
<div class="post-text" itemprop="text">
<p>There isn't a <em>trivial</em> function (like <code>sample</code>) for sampling with replacement because it's <em>so</em> trivial you really don't need one:</p>
<pre><code>[random.choice(range(10)) for _ in range(4)]
</code></pre>
<p>There <em>is</em> a function for less-trivial uses of sampling with replacement, <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>choices</code></a>. And you can call it with no weights or anything else if you want:</p>
<pre><code>random.choices(range(10), k=4)
</code></pre>
<p>But it's not really any easier to understand.</p>
</div>
<span class="comment-copy">There is <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a> nowadays :)</span>
<span class="comment-copy">@miradulo I was editing that into th question, trying to figure out how to should explain that it adds a 3.6 dependency that you probably don't need and requires using a keyword argument, and then decided to strip all of that out…</span>
<span class="comment-copy">Sure, to each their own I suppose - I find it trivial enough.</span>
<span class="comment-copy">Thank you this code: [random.choice(range(10)) for _ in range(4)] did the job. I have python 2.7, so random.choices wouldn't work</span>
<span class="comment-copy">@miradulo Looks like the 3.6 dependency turned out to be relevant after all. (It's always hard to guess with minimalist questions…)</span>
