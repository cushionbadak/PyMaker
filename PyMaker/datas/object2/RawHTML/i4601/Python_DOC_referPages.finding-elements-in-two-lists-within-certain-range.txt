<div class="post-text" itemprop="text">
<p>So I have two lists L1 is fomatted like this:</p>
<pre><code>L1 = ['12:55:35.87', '12:55:35.70', ...]
L2 = ['12:55:35.53', '12:55:35.30', ...]
</code></pre>
<p>I am trying to find pairs in both list that start with the same 4 characters i.e. 
xx:x and then return the indexes of the pairs for each list </p>
<p>So far I have:</p>
<pre><code>for pair1 in L1:
    for pair2 in L2:
        if pair1[:4] in pair2:
            print(L1.index(pair1))
</code></pre>
<p>This doesn't seem to return the correct indexes and it obviously doesn't return the index of the second list. Any help would be greatly appreciated. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here's how to make your code work. Keep in mind this is a naive solution, there are faster way to solve this if your lists are big. Runtime here is O(n^2) but this could be solved in linear time.</p>
<pre><code>for i,pair1 in enumerate(L1):
    for j,pair2 in enumerate(L2):
        if pair1[:4] == pair2[:4]:
            print("list1: %s , list2: %s" % (i,j))
</code></pre>
<p>Update: for future visitors here's an average linear time solution:</p>
<pre><code>from collections import defaultdict
l1_map = defaultdict([])

for i,val in enumerate(L1):
    prefix = val[:4]
    l1_map[prefix].append(i)


for j,val in enumerate(L2):
     prefix = val[:4]
     for l1 in l1_map[prefix]:
        print("list1: %s , list2: %s" % (l1,j))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because OP lists seem to have lots of repeated "firsts 4 characters", I would do something like the following:</p>
<pre><code>indices = {}
for i, entry in enumerate(L1):
    indices.setdefault(entry[:4], [])
    indices[entry[:4]].append("L1-{}".format(i))
    if L2[i][:4] in indices:
        indices[L2[i][:4]].append("L2-{}".format(i))
</code></pre>
<p>Then you can access your repeated entries as:</p>
<pre><code>for key in indices:
    print(key, indices[key])
</code></pre>
<p>This is better than O(n^2).</p>
<p><strong>edit</strong>: as someone pointed out in the comments this is assuming that the lists do share the same length.</p>
<p>In case they don't, assume <code>L2</code> is larger than <code>L1</code>, then after doing the above you can do:</p>
<pre><code>for j, entry in enumerate(L2[i+1:]):
    indices.setdefault(entry[:4], [])
    indices[entry[:4]].append("L2-{}".format(j))
</code></pre>
<p>If <code>L2</code> is shorter than <code>L1</code> just change the variables names in the code shown.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to loop the Cartesian product.</p>
<pre><code>from itertools import product

L1 = ['12:55:35.87', '12:55:35.70']
L2 = ['12:55:35.53', '12:45:35.30']

res = [(i, j) for (i, x), (j, y) in 
       product(enumerate(L1), enumerate(L2)) 
       if x[:4] == y[:4]]

# [(0, 0), (1, 0)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>range()</code> or <code>enumerate()</code> function in the for-loops to provide you loop index.</p>
<p>For example, using the <code>range()</code> function:</p>
<pre><code>for x in range(len(L1)):
   for y in range(len(L2)):
       if L1[x][:4] == L2[y][:4]:
           print(x, y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>enumerate is great for things like this.</p>
<pre><code>indexes = []
for index1, pair1 in enumerate(L1):
    pair1_slice = pair1[:4] 
    for index2, pair2 in enumerate(L2):        
        if pair1_slice == pair2[:4]:
            indexes.append([index1, index2])
            print(index1, index2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> function is what you're looking for!</p>
<pre><code>L1 = ['12:55:35.87', '12:55:35.70', 'spam']
L2 = ['12:55:35.53', 'eggs', '12:55:35.30']

idxs = []

for idx1, pair1 in enumerate(L1):
    for idx2, pair2 in enumerate(L2):
        if pair1[:4] == pair2[:4]:
            idxs.append((idx1, idx2))

print(idxs)
</code></pre>
<p>Output</p>
<pre><code>[(0, 0), (0, 2), (1, 0), (1, 2)]
</code></pre>
</div>
<span class="comment-copy">what are <code>ra_1</code> and <code>ra1</code>?</span>
<span class="comment-copy">Are these times or other data which can be stored numerically?</span>
<span class="comment-copy">if statement should be if pair1[:4] == pair2[:4]. Also there's a much more efficient way to solve this problem.</span>
<span class="comment-copy">Apologies I fixed the ra_1 stuff</span>
<span class="comment-copy">Do you have any more examples? All first 4 digits occur in all of these strings. Do you only want the <i>first</i> index?</span>
<span class="comment-copy">How do you solve this in linear time? Don't you have to check every pairwise combination?</span>
<span class="comment-copy">O(n^2) should be fine and this worked a treat. Thanks!</span>
<span class="comment-copy">We can sort both lists, and then we get O(n logn), but I'm also curious about linear. Well, dd:d is limited, so we could use a table with 1000 entries.</span>
<span class="comment-copy">@gidim, man, this question was an arms race!  You beat us to the punch though, have an upvote!</span>
<span class="comment-copy">@ArndtJonasson added linear time solution</span>
<span class="comment-copy">This is assuming that both lists have the same length</span>
<span class="comment-copy">@OluwafemiSule True that, it is easy to fix tho, see edit (still faster than O(n^2)).</span>
<span class="comment-copy">This doesn't solve the problem in the question, he asked for a list of pairs of indexs rather then pairs of the elements themselves.</span>
<span class="comment-copy">Nice, upvoted!  However, I would argue that maybe a list comprehension hurts the readability at that point?</span>
<span class="comment-copy">Yeh, maybe, I've split it across 3 lines. Seems readable to me now, but may not be to everyone's liking.</span>
<span class="comment-copy">It's also possible I'm just not great at understanding list comprehensions at a glance &amp; it's actually fine. ¯\_(ツ)_/¯</span>
<span class="comment-copy">So many similar answers so close together, nice job!  Have an upvote!</span>
<span class="comment-copy">Neat, you only perform the slice <code>len(L1)</code> times!</span>
