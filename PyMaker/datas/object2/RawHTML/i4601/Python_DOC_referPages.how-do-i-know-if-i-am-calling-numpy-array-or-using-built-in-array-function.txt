<div class="post-text" itemprop="text">
<p>If, for example, I import as follows:</p>
<pre><code>from numpy import empty, full, zeros, matrix, arange, asarray, array
</code></pre>
<p>Then I might have some list that I generated:</p>
<pre><code>stuff = []

for i in range(N):
    stuff.append(things)
</code></pre>
<p>then, I realize I have to do some math! so I type:</p>
<pre><code>math_stuff = array(stuff)
</code></pre>
<p>Since I didn't have to type numpy.array or np.array, based on how I declared my imports, how do I know that my IDE is preferring the numpy version over the built in version? Is this automatic?</p>
<p>I checked the docs on for numpy.array() and python's built in array(), and it looks like they both accept the same "list like" argument. </p>
</div>
<div class="post-text" itemprop="text">
<p>As the commenters have said, you can easily tell which one is being used just by looking at the most recent import statement. However, in case you get worried/confused, you can also directly check the module from which a function or class originates using Python's handy built-in reflection features.</p>
<p>For example, the following Python statement:</p>
<pre><code>print(array.__module__)
</code></pre>
<p>will print out the string <code>'numpy.core.multiarray'</code> if <code>array</code> was imported from the <code>numpy</code> package, or the string <code>'array'</code> if it was imported from the <code>array</code> package.</p>
<h3>If <code>x.__module__</code> fails, explore alternatives via <code>dir(x)</code></h3>
<p>@ShadowRanger raises the good point that some Python objects don't have the <code>__module__</code> property. In particular, if you run just <code>import array</code>, then <code>array</code> is a module and the <code>print(array.__module__)</code> call will fail. In these kinds of situations you can always discover what reflection information is actually available via the <code>dir()</code> function.</p>
<p><code>dir()</code> is easily my favorite feature of Python. For any Python object <code>x</code>, <code>dir(x)</code> prints out the complete list of the attributes of <code>x</code>. For example, given that you just ran <code>import array</code>, executing <code>dir(array)</code> would then print out:</p>
<pre><code>['ArrayType',
'__doc__',
'__file__',
'__loader__',
'__name__',
'__package__',
'__spec__',
'_array_reconstructor',
'array',
'typecodes']
</code></pre>
<p>Which shows that even though the array module lacks <code>__module__</code>, if does have other reflection information available such as <code>__name__</code> and <code>__file__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best way is probably to keep your namespaces clean, if you can:  </p>
<p>do: <code>import numpy</code> or <code>import numpy as np</code>,  </p>
<p>instead of: <code>from numpy import empty, full, zeros, matrix, arange, asarray, array</code></p>
<p>In case it is not up to you, and it is unclear what came earlier, <code>help(array)</code>, or <code>repr(array)</code>, or <code>type(array)</code> will be handy. (as mentioned in the comments)</p>
</div>
<span class="comment-copy"><code>print(type(math_stuff))</code>... But you are using numpy array, since you've imported it from numpy. If you've also imported a module/function/class/object earlier with a same name from another library. The last import will override others.</span>
<span class="comment-copy">@umutto Ok, so the last import will override earlier imports and any built in functions of the same name. Got it.</span>
<span class="comment-copy">@rocksNwaves: There is no built-in <code>array</code> name in Python. You can <code>import</code> the <code>array</code> module, but if you do that, you're explicitly creating the conflict (which is won by whoever took the name last). The code you provide doesn't show any indication that you did <code>import array</code> or <code>from array import array</code>, so the answer is there is no conflict, because there is only one thing named <code>array</code> in the code shown.</span>
<span class="comment-copy">By the way, the idiomatic way of importing numpy is <code>import numpy as np</code>, rather than <code>from numpy import stuff</code>. That way you can write <code>np,array</code>, <code>np.empty</code>, etc., which is a pretty good balanceâ€”a lot more concise than <code>numpy.empty</code>, but no risk of colliding with other things named <code>empty</code>.</span>
<span class="comment-copy">@rocksNwaves: Yar. The only names that exist without you <code>import</code>ing them from somewhere are <a href="https://docs.python.org/3/library/functions.html#built-in-funcs" rel="nofollow noreferrer">the built-in functions</a> and <a href="https://docs.python.org/3/library/constants.html#built-in-consts" rel="nofollow noreferrer">built-in constants</a>. Aside from those specific things, everything else comes from imports.</span>
<span class="comment-copy">Although if you just did <code>import array</code>, rather than <code>from array import array</code>, <code>print(array.__module__)</code> will raise an <code>AttributeError</code>, since <code>__module__</code> is not defined on modules themselves.</span>
