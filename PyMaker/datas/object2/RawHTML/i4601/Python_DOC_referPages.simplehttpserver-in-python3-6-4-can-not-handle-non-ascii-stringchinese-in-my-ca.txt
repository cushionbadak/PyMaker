<div class="post-text" itemprop="text">
<p>I run SimpleHTTPServer in Python3.6.4 64bit by this command:</p>
<blockquote>
<p>python -m http.server --cgi</p>
</blockquote>
<p>then I make a form in test.py, submit it to test_form_action.py to print the input text.</p>
<p>cgi-bin/test.py  </p>
<pre><code># coding=utf-8
from __future__ import unicode_literals, absolute_import

print("Content-Type: text/html")  # HTML is following
print()
reshtml = '''&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html" charset="utf-8"/&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div style="text-align: center;"&gt;
    &lt;form action="/cgi-bin/test_form_action.py" method="POST"
          target="_blank"&gt;
        输入:&lt;input type="text" id= "id" name="name"/&gt;&lt;/td&gt;
        &lt;button type="submit"&gt;Submit&lt;/button&gt;
    &lt;/form&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;'''

print(reshtml)
</code></pre>
<p>cgi-bin/test_form_action.py</p>
<pre><code># coding=utf-8
from __future__ import unicode_literals, absolute_import

# Import modules for CGI handling
import cgi, cgitb
cgitb.enable()

if __name__ == '__main__':
    print("Content-Type: text/html")  # HTML is following
    print()

    form = cgi.FieldStorage()
    print(form)
    id = form.getvalue("id")
    name = form.getvalue("name")

    print(id)
</code></pre>
<p>When I visit <a href="http://127.0.0.1:8000/cgi-bin/test.py" rel="nofollow noreferrer">http://127.0.0.1:8000/cgi-bin/test.py</a>,
The Chinese Character "输入" doesn't show right, it look like "����",
I have to manually change the Text Encoding of this page from 
"Unicode" to "Chinese Simplified" in Firefox to make Chinese Character look normal.</p>
<p>It's weird, since I put charset="utf-8" in cgi-bin/test.py.</p>
<p>Further more, when I put some Chinese in input form, and submit. But cgi-bin/test_form_action.py is blank.</p>
<p>meanwhile some error show in windows terminal where I run SimpleHTTPServer:</p>
<blockquote>
<p>127.0.0.1 - - [23/Mar/2018 23:43:32] b'Error in sys.excepthook:\r\nTraceback (most recent call last):\r\n  File
  "E:\Python\Python36\Lib\cgitb.py", line 26 8, in <strong>call</strong>\r\n<br/>
  self.handle((etype, evalue, etb))\r\n  File
  "E:\Python\Python36\Lib\cgitb.py", line 288, in handle\r\n<br/>
  self.file.write(doc + \'\ n\')\r\nUnicodeEncodeError: \'gbk\' codec
  can\'t encode character \'\ufffd\' in position 1894: illegal
  multibyte sequence\r\n\r\nOriginal exception was:\r\nT raceback (most
  recent call last):\r\n  File
  "G:\Python\Project\VideoHelper\cgi-bin\test_form_action.py", line
  13, in \r\n    print(form)\r\nUnico deEncodeError: \'gbk\'
  codec can\'t encode character \'\ufffd\' in position 52: illegal
  multibyte sequence\r\n'
  127.0.0.1 - - [23/Mar/2018 23:43:32] CGI script exit status 0x1</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>When you use the <code>print()</code> expression, Python converts the strings to bytes, ie. it <code>encode</code>s them using a default codec.
The choice of this default value depends on the environment – in your case it seems to be GBK (judging from the error message).</p>
<p>In the HTML page your CGI script returns, you specify the codec ("charset") as UTF-8.
You can of course change this to GBK, but it will only solve your first problem (display of test.py), not the second one (encoding error in test_form_action.py).
Instead, it's probably better to get Python to send UTF-8-encoded data on STDOUT.</p>
<p>One approach is to replace all occurrences of</p>
<pre><code>print(x)
</code></pre>
<p>with</p>
<pre><code>sys.stdout.buffer.write(x.encode('utf8'))
</code></pre>
<p>Alternatively, you can replace <code>sys.stdout</code> with a re-encoded wrapper, without changing the <code>print()</code> occurrences:</p>
<pre><code>sys.stdout = open(sys.stdout.buffer.fileno(), 'w', encoding='utf8'))
</code></pre>
<p><strong>Note:</strong> These two solutions don't work in Python 2.x (you'd have to omit the <code>.buffer</code> part there).
I'm writing this because your code has <code>from __future__ import</code> statements, which have no use in code that is run with Python 3 exclusively.</p>
</div>
<span class="comment-copy">Thank for you explain. I am using Python3.6.4, so I put your code:sys.stdout = open(sys.stdout.fileno(), 'w', encoding='utf8') before I use print(), then every Chinese Character is work fine. I didn't expect codec could be some complicate in Python3.</span>
<span class="comment-copy">I'm glad if it helped. The <code>print()</code> function is designed to work with your terminal, so Python tries to be clever and sync the standard-channel config with your environment. This makes life easier most of the time, but apparently not in your particular situation.</span>
<span class="comment-copy">could I change the default codec in Python?</span>
<span class="comment-copy">Since the default depends on the environment, you could achieve this through setting environment variables (eg. <code>PYTHONIOENCODING</code>). I'm not sure how to specifically do this on Windows, though. Anyway, it's probably a good idea to do this inside a <a href="https://docs.python.org/3/tutorial/venv.html" rel="nofollow noreferrer">virtual environment</a>.</span>
