<div class="post-text" itemprop="text">
<p>I'm working over python, making a function that must open a python file (it must compile), and extract the name of all functions contained on it.</p>
<p>But it has to ignore every commented line. I tried everything and I'm not be able to do it. It includes the lines, or enter in infinite loops.</p>
<p>My code looks right now like this:</p>
<pre><code>import py_compile

def isPythonFile(is_python_file):
    try:
        py_compile.compile(is_python_file)
        return True
    except py_compile.PyCompileError:
        print(is_python_file + "does not contain syntactically correct Python code")
        return False


def get_functions(python_file, fun_data_file):
    if (isPythonFile(python_file)):
        archivo = open(python_file, "r")
        contenido = archivo.readlines()

    contFuncs = []
    isComentario = False
    i = 0

    while (i &lt; len(contenido)):
        print(i)

        if(contenido[i].startswith("\"\"\"") or isComentario): #In this conditional I want to start ignoring multiline comments
            isComentario = True


        elif(contenido[i].startswith("#") or contenido[i].startswith("\"") or contenido[i].startswith("\'")):
            i += 1
        elif(contenido[i].startswith("def")):
            contFuncs.append(contenido[i].split("#"))
            i += 1
        else:
            i += 1

    print(contFuncs)
</code></pre>
<p>EDIT: For example, the test file I'm using for input is this:</p>
<pre><code>def funcionPrueba(self):
    pass
def alex(self):
    pass
# def comentada(self):
#   pass
"""def hola""" """Hola
asd"""


'''
Pues nosotros declaramos esta mierda como
def tomaYjodete y nos la marcamos
'''

'toma ahi'

"Y esta que"
def monxo(self): #def hacker():
    pass
def cla(self): 
    def cla2(): 
        pass
    cla2()

    pass

"""
Yieeepale casiiii
"""

def zilveztre(self):
    pass
    enter code here
</code></pre>
<p>It must output only defined functions:</p>
<pre><code>"def funcionPrueba(self),
def alex(self),
def monxo(self),
def cla(self),
def cla2(),
def zilveztre(self)"
</code></pre>
<p>This will be sorted lately, but I want only defined functions and its lines, or, as default, managed in lines.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your code is here:</p>
<pre><code>while (i &lt; len(contenido)):
    if(contenido[i].startswith("\"\"\"") or isComentario):
        isComentario = True
    ...
    else:
        i += 1
</code></pre>
<p>When <code>isComentario</code> is set to True, this <code>if</code> statement will evaluate to true and your loop won't increment <code>i</code>. So the next iteration of the loop checks the same line again, the <code>if</code> evaluates to True again, <code>i</code> isn't incremented, and you have an infinite loop.</p>
<hr/>
<p>The correct way to work with python source code is to use the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">ast module</a>. You use <a href="https://docs.python.org/3/library/ast.html#ast.parse" rel="nofollow noreferrer"><code>ast.parse</code></a> to parse the code, and then <a href="https://docs.python.org/3/library/ast.html#ast.walk" rel="nofollow noreferrer"><code>ast.walk</code></a> to find all function definitions:</p>
<pre><code>import ast

tree = ast.parse(code)
functions = []

for node in ast.walk(tree):
    if isinstance(node, ast.FunctionDef):
        args = ', '.join(arg.arg for arg in node.args.args)
        function = '{}({})'.format(node.name, args)
        functions.append(function)

print(functions)
# output:
# ['funcionPrueba(self)', 'alex(self)', 'monxo(self)',
# 'cla(self)', 'zilveztre(self)', 'cla2()']
</code></pre>
</div>
<span class="comment-copy">Please add some example input and the expected output. See also <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">The <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer"><code>ast</code></a> module can parse Python and return a machine-readable representation.</span>
<span class="comment-copy">Wow! It's a very quick method to do it! But I must do it with string methods, my teacher only wants strings uses, but I think that isn't optimal.</span>
<span class="comment-copy">@cejotaTP You'll run into a lot of problems without <code>ast</code>. Python syntax is very complex. It's not easy to parse with string operations.</span>
<span class="comment-copy">Thank you very much! With ast module, I only have to find how to open correctly a .py file to parse it, because I have to be able to open any python file with valid syntax code.</span>
<span class="comment-copy">Is there any way to know at which line is defined the function?? ast.lineno may return me the line, but I don't know if it return to me the line of source code or the line in the tree.</span>
<span class="comment-copy">@cejotaTP The <code>lineno</code> attribute is exactly what you're looking for. The <a href="https://docs.python.org/3/library/ast.html#ast.AST.lineno" rel="nofollow noreferrer">documentation</a> says <i>"The lineno is the line number of source text [...]"</i>.</span>
