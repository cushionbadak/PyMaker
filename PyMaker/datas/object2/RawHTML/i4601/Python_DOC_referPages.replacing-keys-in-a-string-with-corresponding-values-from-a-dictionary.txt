<div class="post-text" itemprop="text">
<p>I have a dictionary with keys that look like this:</p>
<pre><code>['NAME', 'ID', 'COURSE', 'DUE', 'SUBMITTED', 'MINUTESLATE', 'LATEDEDUCTION', 'P1', 'P1COMMENTS', 'P2', 'P2COMMENTS', 'SUBTOTAL', 'TOTAL']
</code></pre>
<p>My goal is to go through a file and replace occurrences of these keys with values that I've read in from another file. For instance:</p>
<pre><code>Problem 1: &lt;&lt;P1&gt;&gt;/35 &lt;&lt;P1COMMENTS&gt;&gt;
</code></pre>
<p>would be replaced with something like:</p>
<pre><code>Problem 1: 30/35 comment
</code></pre>
<p>However, I'm having issues with doing this, as the keys can be overlapping. I wrote this method using some code that I looked up previously for another assignment:</p>
<pre><code>def replace_all(text, dic):
    for i, j in dic.items():
        text = text.replace(i, j)
    return text
</code></pre>
<p>However, this is the first time I've had overlapping keys in my dictionary, so I'm having a tough time tweaking this method to work properly. Currently, this is what my output looks like:</p>
<pre><code>Problem 1: 30/35 30COMMENTS
</code></pre>
<p>Any ideas on a better way to approach this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>re.sub()</code> to find each <code>&lt;&lt; key &gt;&gt;</code> and then replace it with the corresponding value from the dictionary.</p>
<pre><code>import re

dct = {
  'P1': 30,
  'P1COMMENTS': 'comment'
}

print(dct)

s = 'Problem 1: &lt;&lt;P1&gt;&gt;/35 &lt;&lt;P1COMMENTS&gt;&gt;'
s = re.sub(r'&lt;&lt;(.*?)&gt;&gt;', lambda x: str(dct[x.group(1)]), s)
print(s)
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>Problem 1: 30/35 comment
</code></pre>
<p>Explanation:</p>
<p><code>&lt;&lt;(.*?)&gt;&gt;</code>:</p>
<pre class="lang-none prettyprint-override"><code>&lt;&lt;                // matches &lt;&lt;
  (               // start of group 1
    .*?           // matches any number (0 or more) of characters (lazy)
  )               // end of group 1
&gt;&gt;                // matches &gt;&gt;
</code></pre>
<p><a href="https://docs.python.org/2/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code></a> will take a pattern, a replacement value, and a string, and will replace any pattern matches in the string, with the replacement value.  The function:</p>
<pre><code>lambda x: str(dct[x.group(1)])
</code></pre>
<p>Will lookup the match in the dictionary, and return the value for the key.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you need is a customizable <a href="https://en.wikipedia.org/wiki/Template_processor" rel="nofollow noreferrer">template engine</a>. Luckily, Python is shipped with <a href="https://docs.python.org/3/library/string.html#template-strings" rel="nofollow noreferrer">string.Template</a>.</p>
<pre><code>import re
import string

class CustomTemplate(string.Template):
    pattern = r'&lt;&lt;(?P&lt;named&gt;[^&gt;]+)&gt;&gt;'

template = '&lt;&lt;FOO&gt;&gt; 123456 &lt;&lt;FOOBAR&gt;&gt;tail'
print(CustomTemplate(template).substitute(
    FOO='foo_content',
    FOOBAR='foobar_stuff',
    ))
</code></pre>
<p>Output: <code>foo_content 123456 foobar_stufftail</code></p>
</div>
<span class="comment-copy">What do you mean, overlapping? Can you give an example?</span>
<span class="comment-copy">Yes! So in that list of keys I gave, we have P1 and P1COMMENTS, but my function sees P1 over P1COMMENTS in some cases, since dictionaries aren't ordered. TOTAL and SUBTOTAL would be another example of this.</span>
<span class="comment-copy">Does <code>Problem 1: &lt;&lt;P1&gt;&gt;/35 &lt;&lt;P1COMMENTS&gt;&gt;</code> have those <code>&lt;&lt; &gt;&gt;</code> surrounding the keys to be replaced? Or is it really Problem 1: P1/35 P1COMMENTS`?</span>
<span class="comment-copy">If you have some idea of how the strings are structured, you should look into <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions.</a></span>
<span class="comment-copy">It does. Currently I'm calling replace() to get rid of those after calling my function. This works fine for non-overlapping keys.</span>
<span class="comment-copy">Slick. Beat me to it. Mind explaining what <code>re</code>, <code>sub</code>, and <code>lambda</code> are/do, since this seems to be a homework assignment?</span>
<span class="comment-copy">That gave me what I was looking for. Thanks for the explanation of what it actually does!</span>
<span class="comment-copy">@jpruee happy to help!  If this answered your question, check out <a href="https://stackoverflow.com/help/someone-answers">What to do if someone answers my question</a></span>
<span class="comment-copy">You can even improve this by using <a href="https://docs.python.org/3.4/library/string.html#template-strings" rel="nofollow noreferrer">string.Template</a>. The key matching can be completely customized via regex groups.</span>
