<div class="post-text" itemprop="text">
<p>I am trying to implement python-to-c binding via <code>ctypes</code> for <code>libnfc</code>.
I have a structure, here is a wrong variant:</p>
<pre><code>class nfc_iso14443a_info(Structure):
    _fields_ = [
        ('abtAtqa',  c_uint8 * 2),
        ('btSak',    c_uint8),
        ('szUidLen', c_uint8 * 8),
        ('abtUid',   c_uint8 * 10),
        ...
</code></pre>
<p>At some moment during debug session it looks like that:
<a href="https://i.stack.imgur.com/ypREL.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ypREL.png"/></a></p>
<p>The problem here is that I want <code>szUidLen</code> to be 64-bit unsigned integer equal to 7. More precisely, it must match <code>size_t  szUidLen;</code> from <code>nfc-types.h</code>. So i tried an obvious variant and changed <code>c_uint8 * 8</code> to <code>c_size_t</code> and it doesn't work:</p>
<pre><code>class nfc_iso14443a_info(Structure):
    _fields_ = [
        ('abtAtqa',  c_uint8 * 2),
        ('btSak',    c_uint8),
        ('szUidLen', c_size_t),
        ('abtUid',   c_uint8 * 10),
        ...
</code></pre>
<p><a href="https://i.stack.imgur.com/1xziX.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/1xziX.png"/></a></p>
<p>What am I missing here?</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue here is that the C struct you're trying to map is packed, as (tersely) explained in the <a href="https://docs.python.org/3/library/ctypes.html#structure-union-alignment-and-byte-order" rel="nofollow noreferrer">Structure/union alignment and byte order</a> section of the docs:</p>
<blockquote>
<p>By default, Structure and Union fields are aligned in the same way the C compiler does it. It is possible to override this behavior be specifying a <code>_pack_</code> class attribute in the subclass definition. This must be set to a positive integer and specifies the maximum alignment for the fields. This is what <code>#pragma pack(n)</code> also does in MSVC.</p>
</blockquote>
<p>That only makes sense if you already know about packing and alignment in C, but it's not that complicated.</p>
<p>By default, C structure elements are aligned to start on nice boundaries. For example, a 32-bit int following an 8-bit int doesn't run from bytes 1-4, it runs from bytes 4-7 (and bytes 1-3 are unused padding). So, <code>ctypes</code> follows the same rules.</p>
<p>That means that, while <code>szUidLen</code> runs from bytes 3-10 when it's defined as an array of 8-bit ints, it gets aligned to bytes 8-15 (or 4-11, depending on your compiler) when it's defined as a 64-bit int. You can see this by printing out <code>nfc_iso14443a_info.szUidLen.offset</code>.</p>
<p>So, the first one gets the bytes <code>7, 0, 0, 0, 0, 0, 0, 0</code>, which is little-endian int64 for <code>7</code>, while the second one gets the bytes <code>0, 0, 0, a, b, c, d, e</code>, where <code>abcde</code> are the first 5 bytes of the next field, which is little-endian int64 for some huge number (unless the next field happens to be 0).</p>
<p>Of course you don't want to just guess that this is the problem. If you based your <code>Structure</code> on a <code>struct</code> from a C header, this can only be true if the header or the compile flags specify some non-default packing, like the <code>#pragma pack(1)</code> used by MSVC. If you based your <code>Structure</code> on something like an RFC packet description, the alignment is not even according to C rules, but is defined somewhere in the documentation you're reading (although protocol RFCs almost always use 1-byte alignment).</p>
<p>Anyway, the docs don't explain the problem very well, but they explain the solution:</p>
<pre><code>class nfc_iso14443a_info(Structure):
    _pack_ = 1
    _fields_ = [
        ('abtAtqa',  c_uint8 * 2),
        ('btSak',    c_uint8),
        ('szUidLen', c_size_t),
        ('abtUid',   c_uint8 * 10),
        ...
</code></pre>
<p>Now <code>szUidLen</code> runs from bytes 3-10, but it's interpreted as a 64-bit int instead of an array of 8-bit ints.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from ctypes import *
c_size_t = c_unit64
</code></pre>
<p>and go ahead
You <strong>may</strong> need to specify <code>._pack_=1</code> too (if your compiler generates code that way) <strong>before</strong> defining <code>_fields_</code>.</p>
<p><strong>Update:</strong> There is ready made <code>c_size_t</code> (and <code>c_ssize_t</code>) type in <code>ctypes</code>.</p>
<p><strong>Note:</strong> <code>(c_char * 8)</code> is <em>not</em> equal to <code>c_int64</code> or <code>c_long</code> because of possible alignment issues (<code>c_char</code> fields are not aligned). <code>ctypes.alignment(c_type)</code> may give you a hint on how <em>c_type</em> is aligned:</p>
<pre><code>In [7]: c.alignment(c.c_char * 8), c.alignment(c.c_size_t)
Out[7]: (1, 8)
</code></pre>
</div>
<span class="comment-copy">Can you copy the C struct definition into your question, or at least link to the file somewhere?</span>
<span class="comment-copy">Also, can you put the actual values in text instead of a screenshot? It would be helpful to be able to, e.g., copy that huge number so I can turn it to hex and see if it’s just endian-swapped or off by one byte or the like.</span>
<span class="comment-copy">I think the problem here may be packing. When you put a uint8*8 field, that aligns like uint8, so you end up with bytes 3-11; when you put a size_t, that aligns like size_t, so you get bytes 8-16. Try adding <code>_pack_=1</code> to the Structure class and see what that does. (This probably isn’t actually the right answer, unless this isn’t really a C in-memory struct but a network packet or file format chunk, but at least it will verify or rule out the issue.)</span>
<span class="comment-copy">@abarnert 1. Thanks - it works! 2. I don't get why pack is needed: structure is defined on line 185 here: <a href="https://github.com/nfc-tools/libnfc/blob/master/include/nfc/nfc-types.h#L185" rel="nofollow noreferrer">github.com/nfc-tools/libnfc/blob/master/include/nfc/…</a> There is no packing as far as I can see. 3. - it only works when <i>pack</i> = 1 and doesn't work if it is 2 or more. Why? Anyway, could you please copy your comments to the answer so I will be able to accept it? Thanks!</span>
<span class="comment-copy">@abarnert I might be blind. <code># pragma pack(1)</code> is there.</span>
<span class="comment-copy">Please provide a detailed explanation of why this solution works.</span>
