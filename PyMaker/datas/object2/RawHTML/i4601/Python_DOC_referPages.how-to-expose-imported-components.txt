<div class="post-text" itemprop="text">
<p>I'm very new to python, and am using Python 3.5</p>
<p>I have a file structure like this:</p>
<pre><code>main.py
MyModule/
MyModule/__init__.py
MyModule/component.py
MyModule/component/
MyModule/component/__init__.py      # blank
MyModule/component/subcomponent.py
</code></pre>
<p>In some script I would like to be able to use <code>MyModule.component.subcomponent.myfunc()</code> using either of these two approaches:</p>
<pre><code>import MyModule.component
result = MyModule.component.subcomponent.myfunc()
</code></pre>
<p>or </p>
<pre><code>import MyModule.component.subcomponent
result = MyModule.component.subcomponent.myfunc()
</code></pre>
<p>I tried making my <code>./MyModule/component.py</code> have the following, but it didn't work:</p>
<pre><code># This didn't expose the subcomponent stuff
from MyModule.component.subcomponent import *

# I tried this too, but it also didn't work
subcomponent = MyModule.component.subcomponent
</code></pre>
<p>What's the right way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You have a name conflict. You can't have both <code>component.py</code> <em>and</em> a <code>component</code> package. When Python imports <code>MyModule.component</code> it'll either find the <code>component.py</code> module <strong><em>or</em></strong> the <code>component/__init__.py</code> package. <strong>You can't have both</strong>.</p>
<p>On my Python 3.7 setup on OS X, packages win:</p>
<pre><code>$ mkdir -p demopackage/nested
$ cat &gt; demopackage/nested.py &lt;&lt;EOF
&gt; print('This is the nested.py module file')
&gt; EOF
$ cat &gt; demopackage/nested/__init__.py &lt;&lt;EOF
&gt; print('This is the nested/__init__.py package file')
&gt; EOF
$ python3.7 -c 'import demopackage.nested'
This is the nested/__init__.py package file
</code></pre>
<p>which would mean your <code>component.py</code> file is never even executed.</p>
<p>Move the <code>component.py</code> contents into <code>component/__init__.py</code> and import your submodules there. When you import a submodule of a package, that module automatically becomes an attribute.</p>
<p>So all you need to do is remove <code>component.py</code>, and then you can use</p>
<pre><code>import MyModule.component.subcomponent
</code></pre>
<p>anywhere, at which point <code>import MyModule.component</code> will suffice to be able to reach <code>MyModule.component.subcomponent.myfunc()</code>.</p>
<p>See the <a href="https://docs.python.org/3/reference/import.html#submodules" rel="nofollow noreferrer"><em>Submodules</em> section</a> of the Python reference documentation on the import system:</p>
<blockquote>
<p>When a submodule is loaded <em>[...]</em> a binding is placed in the parent moduleâ€™s namespace to the submodule object. For example, if package <code>spam</code> has a submodule <code>foo</code>, after importing <code>spam.foo</code>, <code>spam</code> will have an attribute <code>foo</code> which is bound to the submodule.</p>
</blockquote>
<p>I'd use package-relative imports at the top of your <code>MyModule/component/__init__.py</code> file:</p>
<pre><code>from . import submodule
</code></pre>
<p>to ensure that the submodule is loaded when you import <code>MyModule.component</code>.</p>
</div>
<span class="comment-copy">I wonder why this was down-voted?  It's a valid question, not overly specific or opinionated.  Anyone coming from another language that doesn't use this paradigm could have the same question.  Whoever down-voted it, please let me know so I can improve my questions in the future?</span>
<span class="comment-copy">Ahh, it wasn't clear to me that the <code>__init__.py</code>  was the package definition.  The most common way I had seen it discussed was as a <i>signifier</i> of a package to Python, and as a place where some package pre-processing code could be run.  It's helpful to understand that it also carries with it the implicit meaning of a package definition file.  This is (maybe?) the first language I've used where this is not allowed, so it didn't even occur to me.</span>
