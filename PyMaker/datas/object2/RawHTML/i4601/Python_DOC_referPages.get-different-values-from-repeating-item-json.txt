<div class="post-text" itemprop="text">
<p>I have this json derived dict:</p>
<pre><code>{
    "stats": [
        {
            "name": "Jengas",
            "time": 166,
            "uid": "177098244407558145",
            "id": 1
        },
        {
            "name": "- k",
            "time": 20,
            "uid": "199295228664872961",
            "id": 2
        },
        {
            "name": "MAD MARX",
            "time": "0",
            "uid": "336539711785009153",
            "id": 3
        },
        {
            "name": "loli",
            "time": 20,
            "uid": "366299640976375818",
            "id": 4
        },
        {
            "name": "Woona",
            "time": 20,
            "uid": "246996981178695686",
            "id": 5
        }
    ]
}
</code></pre>
<p>I want to get the "time" from everybody in the list and use it with sort.</p>
<p>So the result I get has this:</p>
<pre class="lang-none prettyprint-override"><code>TOP 10:
Jengas: 166
Loli: 20
</code></pre>
<p>My first try is to list different values from repeating item.</p>
<p>Right now the code is:</p>
<pre><code>with open('db.json') as json_data:
    topvjson = json.load(json_data)
    print(topvjson)
    d = topvjson['stats'][0]['time']
    print(d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Extract the <code>stats</code> list, apply <code>sort</code> to it with the appropriate key:</p>
<pre><code>from json import loads

data = loads("""{
  "stats": [{
    "name": "Jengas",
    "time": 166,
    "uid": "177098244407558145",
    "id": 1
  }, {
    "name": "- k",
    "time": 20,
    "uid": "199295228664872961",
    "id": 2
  }, {
    "name": "MAD MARX",
    "time": "0",
    "uid": "336539711785009153",
    "id": 3
  }, {
    "name": "loli",
    "time": 20,
    "uid": "366299640976375818",
    "id": 4
  }, {
    "name": "Woona",
    "time": 20,
    "uid": "246996981178695686",
    "id": 5
  }]
}""")

stats = data['stats']
stats.sort(key = lambda entry: int(entry['time']), reverse=True)

print("TOP 10:")
for entry in stats[:10]:
  print("%s: %d" % (entry['name'], int(entry['time'])))     
</code></pre>
<p>This prints:</p>
<pre><code>TOP 10:
Jengas: 166
- k: 20
loli: 20
Woona: 20
MAD MARX: 0
</code></pre>
<p>Note that your <code>time</code> is neither an integer nor string: there are both <code>0</code> and <code>"0"</code> in the dataset. That's why you need the conversion <code>int(...)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can sort the list of dict values like:</p>
<h3>Code:</h3>
<pre><code>top_three = [(x[1], -x[0]) for x in sorted(
    (-int(user['time']), user['name']) for user in stats['stats'])][:3]
</code></pre>
<p>This works by taking the time and the name and building a tuple.  The tuples can the be sorted, and then the names can be extracted (via: <code>x[1]</code>) after the sort.</p>
<h3>Test Code:</h3>
<pre><code>stats = {
    "stats": [{
        "name": "Jengas",
        "time": 166,
        "uid": "177098244407558145",
        "id": 1
    }, {
        "name": "- k",
        "time": 20,
        "uid": "199295228664872961",
        "id": 2
    }, {
        "name": "MAD MARX",
        "time": "0",
        "uid": "336539711785009153",
        "id": 3
    }, {
        "name": "loli",
        "time": 20,
        "uid": "366299640976375818",
        "id": 4
    }, {
        "name": "Woona",
        "time": 20,
        "uid": "246996981178695686",
        "id": 5
    }]
}

top_three = [x[1] for x in sorted(
    (-int(user['time']), user['name']) for user in stats['stats'])][:3]

print(top_three)
</code></pre>
<h3>Results:</h3>
<pre><code>[('Jengas', 166), ('- k', 20), ('Woona', 20)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way to do it using the built-in <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted()</code></a> function:</p>
<pre><code>data = {
    "stats": [
        {
            "name": "Jengas",
            "time": 166,
            "uid": "177098244407558145",
            "id": 1
        },
        {   
           etc ...
        }
    ]
}

print('TOP 3')
sorted_by_time = sorted(data['stats'], key=lambda d: int(d['time']), reverse=True)

for i, d in enumerate(sorted_by_time, 1):
    if i &gt; 3: break
    print('{name}: {time}'.format(**d))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>TOP 3
Jengas: 166
- k: 20
loli: 20
</code></pre>
</div>
<span class="comment-copy">It starts with smallest values. And how to get hightst value first?</span>
<span class="comment-copy">try this: <code>print(sorted(data['stats'], key=lambda item : int(item['time']), reverse=True)[:10])</code></span>
<span class="comment-copy">@Jengas add <code>sort( ... , reverse = True)</code>, as Sphinx said. Updated answer.</span>
<span class="comment-copy">Getting this error:  Traceback (most recent call last):   File "C:\Users\Jengas\Desktop\Voice_stats\bot.py", line 93, in &lt;module&gt;     stats.sort(key = lambda entry: entry['time'], reverse=True) TypeError: '&lt;' not supported between instances of 'str' and 'int'</span>
<span class="comment-copy">@Jengas As I said, your data seems a little bit broken. If you want to tolerate <code>"0"</code> instead of <code>0</code> in <code>time</code>, then you should replace every <code>entry['time']</code> by <code>int(entry['time'])</code>. Updated again.</span>
<span class="comment-copy">Ah, <code>sorted</code> immediately returns something meaningful! I always trip up on the strange side-effecty <code>.sort</code>-method that doesn't return anything. Thanks!</span>
<span class="comment-copy">@Andrey: You could also do something like this with the list's <code>sort()</code> method. Its main "side-effect" is that it sorts the list <i>in-place</i> â€” which means it doesn't return anything (but does change the list).</span>
