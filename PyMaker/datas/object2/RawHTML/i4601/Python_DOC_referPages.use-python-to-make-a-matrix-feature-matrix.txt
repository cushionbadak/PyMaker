<div class="post-text" itemprop="text">
<p>Let's say I have an excel file that has columns like:</p>
<pre><code>Name      Day of Shopping     Food bought      
 Bob       March 14, 2015           Apple            
 Bob       March 14, 2015            Pear                
 Joe       April 15, 2013           Apple             
 Bob        June 28, 2017     Pomegranite   
Jake      January 4, 2008          Orange   
Jake        April 9, 2010           Peach
 Joe     December 6, 2016          Banana
</code></pre>
<p>And another excel file that reads:</p>
<pre><code>Name      Day of Shopping     Drink bought       
 Bob       March 14, 2015            Water    
 Joe       April 15, 2013            Juice    
 Bob        June 28, 2017             Soda
Jake      January 4, 2008            Water
Jake        April 9, 2010              Tea
 Joe     December 6, 2016             Soda
</code></pre>
<p>What I want to do is make this into a new excel sheet or just a matrix that reads something like:</p>
<pre><code>Name   Apple  Pear  Pomegranite Orange Peach Banana Water Juice Soda Tea
Bob     1      1     0           0       0     0     1      0    0    0 
Joe     1      0     0           0       0     0     0      1    0    0 
Jake    0      0     0           1       0     0     1      0    0    0 
</code></pre>
<p>So that in the end I get a matrix that has the names, and the following columns list out the food options and the values that the names are assigned (1 or 0) are for whether or not the item was bought for that day. Notice that in the matrix that I described above only values for the first date was found even though each person had a different initial date. More columns would describe the other dates.</p>
<p>Please help.</p>
</div>
<div class="post-text" itemprop="text">
<p>In terms of reading your excel sheets, you can export them as CSV files and use Python's <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">CSV Parser</a> to read your values from the sheet. Personally, I would use a defaultdict from the <code>collections</code> module. This allows you to set default values for your dictionary keys. You can create a default dict with a default value of 0 for every unique name that you have, and as they buy new products, increase their values by 1. To create the output, you iterate through each customer, and then you iterate through the list of products that they can buy -- since it is a defaultdict with 0 as the default value, you will not have issues of keys not matching.  </p>
<p>Rough example code:</p>
<pre><code>from collections import defaultdict

customers = {}

# Name represents the first column of your CSV entries, and product is the third column
for entry in csvdata:
    name = entry[0]
    if name not in customers:
        customers[name] = defaultdict(int) # Sets the default value to zero
    product = entry[2]
    customers[name][product] += 1

# Now you have a dictionary with customers as sub-dictionaries
# Each sub-dictionary has the count for each product

product_list = ["apples", "oranges", "pears"]

for customer, purchases in customers.items():
    for product in product_list:
        print(purchases[product])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you have the first spreadsheet in a data frame named <code>df1</code> and the second in <code>df2</code>, the correct way to do this would be:</p>
<pre><code>import pandas as pd
df = pd.concat([df1, df2])
pd.get_dummies(df, columns=['Food bought'], 'Drink bought']).groupby('Name').sum()
</code></pre>
<p>Explanation: first use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html" rel="nofollow noreferrer"><code>pd.concat</code></a> to combine the two tables vertically. Then, use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html" rel="nofollow noreferrer"><code>pd.get_dummies</code></a> to one-hot encode the values in the "bought" columns -- this will add a column for each unique food and drink found, and a 1 when that row contains the value (so only one 1 per row). Then <a href="https://pandas.pydata.org/pandas-docs/stable/groupby.html" rel="nofollow noreferrer"><code>groupby</code></a> "Name" to condense down into names, and finally take the <a href="https://pandas.pydata.org/pandas-docs/stable/groupby.html#aggregation" rel="nofollow noreferrer"><code>sum</code></a> for each person to aggregate the total items bought into one row for each person.</p>
<p>To read excel files into python, use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_excel.html" rel="nofollow noreferrer"><code>pd.read_excel</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.crosstab.html" rel="nofollow noreferrer"><code>pd.crosstab</code></a> to do this. Ill assume you loaded your data into pandas and named your dataframe's <code>df1</code> and <code>df2</code>. First rename both columns <code>Food bought</code> and <code>Drink bought</code> to a similar name (I chose <code>Item</code>) to easily concatenate values</p>
<pre><code>df1.rename(columns={'Food bought':'Item'},inplace=True)
df2.rename(columns={'Drink bought':'Item'},inplace=True)
df = pd.concat([df1,df2])
</code></pre>
<p>Then compute the cross tabulation </p>
<pre><code>pd.crosstab(df.Name,df.Item)
</code></pre>
<p>Which will output</p>
<pre><code>Item  Apple  Banana  Juice  Orange  Peach  Pear  Pomegranite  Soda  Tea  Water
Name                                                                          
Bob       1       0      0       0      0     1            1     1    0      1
Jake      0       0      0       1      1     0            0     0    1      1
Joe       1       1      1       0      0     0            0     1    0      0
</code></pre>
<hr/>
<p>Moving on step further, you can compute the cross tabulation grouped by the date. To do this in pandas we need to convert <code>Day of Shopping</code> into datetime objects </p>
<pre><code>df['Day of Shopping'] = pd.to_datetime(df['Day of Shopping'])
</code></pre>
<p>Now just add this information to <code>pd.crosstab</code></p>
<pre><code>pd.crosstab([df['Day of Shopping'],df.Name],df.Item)

Item                  Apple  Banana  Juice  Orange  Peach  Pear  Pomegranite  \
Day of Shopping Name                                                           
2008-01-04      Jake      0       0      0       1      0     0            0   
2010-04-09      Jake      0       0      0       0      1     0            0   
2013-04-15      Joe       1       0      1       0      0     0            0   
2015-03-14      Bob       1       0      0       0      0     1            0   
2016-12-06      Joe       0       1      0       0      0     0            0   
2017-06-28      Bob       0       0      0       0      0     0            1   
Item                  Soda  Tea  Water  
Day of Shopping Name                    
2008-01-04      Jake     0    0      1  
2010-04-09      Jake     0    1      0  
2013-04-15      Joe      0    0      0  
2015-03-14      Bob      0    0      1  
2016-12-06      Joe      1    0      0  
2017-06-28      Bob      1    0      0  
</code></pre>
</div>
<span class="comment-copy">What do you mean by "excel file"? Like, an <code>.xls</code> file, or just a csv?</span>
<span class="comment-copy">I mean its contained in an .xlsx but I could save it as a .xls or csv</span>
<span class="comment-copy">Is this possible if I personally do not know all the "Names"? The file in actuality is very large (about 70,000 names some of which are duplicate values) where each name also has listed a day of shopping, and an item bought. I would like for if there is a duplicate value of Name and Day (like if Bob and March 14 appear twice in the list) that Bob only appear in the new matrix once and the multiple items he bought on that day be stored as 1's in their respective columns.</span>
<span class="comment-copy"><code>if name not in customers</code> checks to see if a customer is already in the dictionary of customers. So even if there are two entries named "Bob", their purchases will be considered as one.</span>
<span class="comment-copy">This is incredible. A couple questions. Since the list is very large, I would like to only look at people who have shopped at least 4 times. Further I want to make the matrix so that you have the names listed in column 1, columns 2 - 7 would list 1's or 0's for if they bought the food, columns 8-11 would list 1's or 0's for if they bought the drink, and then columns 12 - 17 would be the same as 2-7 but for date #2, 18-21 same as 8-11 but for date #2, 22 - 27 for date#3, and 28-31 for date#3.</span>
<span class="comment-copy">Quick questions I have about this. With a two large excel files, I don't know exactly if the orientation of the frames will be the same i.e. if row concerning Bob in one will concern Bob or Joe in the other. Will this create any complications? Also I would like the columns to be grouped together by day of shopping (so if Bob went shopping in March, all his purchased items would be marked as 1's and then when he shopped in June, all his purchased items would be marked as 1 in a new group of columns.</span>
<span class="comment-copy">You don’t need to worry about the order of the rows, if that’s what you’re asking.</span>
<span class="comment-copy">Great. Also what about the day of shopping. I think in more detail, I want to make the matrix so that you have the names listed in column 1, columns 2 - 7 would list 1's or 0's for if they bought the food, columns 8-11 would list 1's or 0's for if they bought the drink, and then columns 12 - 17 would be the same as 2-7 but for date #2, 18-21 same as 8-11 but for date #2, 22 - 27 for date#3, and 28-31 for date#3</span>
<span class="comment-copy">A couple questions. Since the list is very large, I would like to only look at people who have shopped at least 4 times. Is there a way to do this and then only look at the first three shopping dates? Also is there a way to make the dates instead of being separate rows, be the same row just in new columns?</span>
<span class="comment-copy">I struggle personally with just <i>giving</i> you all the answers to these sub questions especially since you did not provide code that you tried to use to solve the problem in your original question. SO is a one question one answer website. The questions you are asking can be found by looking around this website a bit, and this will help improve your understanding of pandas. I think this answer provides a great starting point for your additional questions while directly answering your initial question</span>
