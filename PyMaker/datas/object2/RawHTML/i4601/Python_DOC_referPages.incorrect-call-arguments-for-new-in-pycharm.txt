<div class="post-text" itemprop="text">
<pre><code>class IntTuple(tuple):
    def __new__(cls, iterable):
        generator = (x for x in iterable if isinstance(x, int) and x &gt; 0)
        return super().__new__(cls, generator)
</code></pre>
<p>Pycharm suggests me to remove the <code>generator</code> which is in the <code>return</code>. Why?</p>
<p>It said: This inspection reports discrepancies between declared parameters and actual arguments, as well as incorrect arguments (e.g. duplicate named arguments) and incorrect argument order. Decorators are analyzed, too.</p>
<p>But its output was what I expected.</p>
<p>Example:</p>
<pre><code>t = IntTuple([1, -1, "abc", 2, [1, 2], 3])

print(t)
</code></pre>
<hr/>
<pre><code>output: (1, 2, 3)
</code></pre>
<p>I'm new to Python, so I think this may lack of standardization.</p>
<p>How should I improve it?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not specific to <code>tuple</code>, calling most builtin type's special method leads <em>PyCharm</em> to get confused with type signatures.</p>
<pre><code>str.__new__(str, 'foo') # This will confuse PyCharm even though it is correct
</code></pre>
<p>PyCharm resolves <code>tuple.__new__</code> as being inherited from <code>builtins.object.__new__</code>. This is not the real method used to create a tuple, but it fails to find the correct one (which is not in a <code>.py</code> file since it is written in C).</p>
<p><a href="https://i.stack.imgur.com/lDJ6i.png" rel="nofollow noreferrer"><img alt="tuple.__new__" src="https://i.stack.imgur.com/lDJ6i.png"/></a></p>
<p>This is most likely a bug and, unfortunately, this is not something you can fix through settings, except by disabling <em>Incorrect call arguments</em> inspection which I do not recommend.</p>
<p>The bottom line is that PyCharm inspection sometimes gives false positives due to having to inspect a dynamically typed language. This is not a surprise and you will sometimes have to ignore inspection errors it raises.</p>
<h2>A word on your code</h2>
<p>On another note, I want to point out that you might want to cover the case where you create an empty <code>IntTuple</code> in the same way it can be done with <code>tuple</code>.</p>
<pre><code>tuple() # ()
</code></pre>
<p>For this you could have a default <code>iterable</code>.</p>
<pre><code>class IntTuple(tuple):
    def __new__(cls, iterable=()):
        generator = (x for x in iterable if isinstance(x, int) and x &gt; 0)
        return super().__new__(cls, generator)

IntTuple() # ()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is saying this because <code>tuple</code>'s <code>__new__</code> method accepts parameters <code>__new__(*args, **kwargs)</code>.</p>
<p>You probably found documentation that you could construct a <code>tuple</code> instance using <code>tuple(iterable)</code> to pre-fill the tuple with initial values. This <code>iterable</code> is an argument to the <code>__init__</code> method of the <code>tuple</code> class, not the <code>__new__</code> method.</p>
<p>I think what you meant to use was <code>__init__</code> instead of <code>__new__</code>. In Python, the <code>__new__</code> method is used mostly for metaprogramming. The <code>__init__</code> method can be seen as the constructor like you would use it in other languages. The <code>__new__</code> method is used to create an instance of the class, so you'd need to construct an <code>object</code> and return that. You could use <code>__new__</code> to implement the singleton pattern for instance, by always returning the same static object. The <code>__init__</code> method just initialises the instance after it's been created, like a normal constructor does.</p>
<p>So you'd be using something like:</p>
<pre><code>class IntTuple(tuple):
    def __init__(self, iterable):
        generator = (x for x in iterable if isinstance(x, int) and x &gt; 0)
        super().__init__(self, generator)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not expert, but as pointed in the documentation:</p>
<p><strong>Classes</strong></p>
<blockquote>
<p>Classes are callable. These objects normally act as factories for new instances of themselves, but variations are possible for class types that override <strong>new</strong>(). The arguments of the call are passed to <strong>new</strong>() and, in the typical case, to <strong>init</strong>() to initialize the new instance.</p>
</blockquote>
<p><a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Classes: Types that overrides <code>__new__()</code></a></p>
<p>In the instatiation of your <code>IntTuple</code> you are passing a list, but since you are inheriting from <code>tuple</code> it might be conflicting there, because a <code>tuple</code> expects a sequence in the type <code>(x,)</code> instead of <code>[x]</code> at its instatiation.</p>
<p><strong>Correction</strong>:
I meant conflicting with PyCharm only. Sometimes PyCharm makes very unecessary inpections that really bother us. You have the choice of disabling them. And for the sake of clearification, <code>tuple</code> can be generated from any iterable, so your code is really fine. Also, just a note, you could simply use pass <code>self</code> to your method, it works fine as well. PyCharm might get confused about all this.</p>
<p>And what if you want to expand the scope of your code a little bit? Your code works fine and it's short, but here's an alternative, if you want more flexibility in the future (not really necessary though and you might find better approches):</p>
<pre><code>class IntTuple:

    def __new__(self, *args, **kwargs):
        _tuple = ()
        if args:
            for v in args:
                if isinstance(v, int) and v &gt; 0:
                    _tuple += (v,)

        if kwargs.items():
            for k in kwargs:
                if type(kwargs[k] == list):
                    for i in kwargs[k]:
                        if isinstance(i, int) and i &gt; 0:
                            _tuple += (i,)
                elif isinstance(kwargs[k], int) and kwargs[k] &gt; 0:
                    _tuple += (v,)
    return _tuple


t = IntTuple(1, -1, "abc", 2, [1, 2], 3, someList=[8,16,32,[64, 'abc'], 'xyz', 128])
print(t)
</code></pre>
<p>output
<code>(1, 2, 3, 8, 16, 32, 128)</code></p>
</div>
<span class="comment-copy">If you hover over it PyCharm normally tells you what the problem is.</span>
<span class="comment-copy">@wohe1 I paste the detail here. But I can't get any help from it.</span>
<span class="comment-copy">I copy-pasted your code in pycharm and I also don't really know what the problem is, I hope someone else does..</span>
<span class="comment-copy">PyCharm's inspections give false positives sometimes. Ignore or disable this one if the code works.</span>
<span class="comment-copy">I turn off most PyCharm inspections and just use a linter that enforces PEP8</span>
<span class="comment-copy">I'm using other JetBrains product. I think this maybe a bug, but I'm new to python so I can't confirm that it's or not. And I really appreciate your tips. I almost forget to handle the empty tuple.</span>
<span class="comment-copy">Issue about <code>str</code> is <a href="https://youtrack.jetbrains.com/issue/PY-26747" rel="nofollow noreferrer">known</a></span>
<span class="comment-copy">That does not work, tuple has no <code>__init__</code> method so you call <code>object.__init__</code> and that takes no argument. In that case, <code>__new__</code> is exactly what should be called.</span>
<span class="comment-copy">Please read about subclassing immutable objects: <a href="https://stackoverflow.com/a/1565448/5378816">stackoverflow.com/a/1565448/5378816</a></span>
<span class="comment-copy"><code>tuple</code> can be instantiated from any iterable.</span>
