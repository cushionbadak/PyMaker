<div class="post-text" itemprop="text">
<p>I have a file which is separated by newline into chunks of the same number of rows. Each row is a field. For example, in chunk1, the first field = a1,a2,a3. In chunk2, the same field = a2,a3,a4.</p>
<pre><code>a1,a2,a3
b1
c1,c2,c3,c4
d1
e1

a2,a3,a4
b2
c3,c4
d2
e2

a3,a5
b3
c4,c6
d3
e3
</code></pre>
<p>How can I get a dataframe (or other data structure) like below?</p>
<pre><code>    f1        f2       f3            f4  f5 
    a1,a2,a3  b1       c1,c2,c3,c4   d1  e1
    a2,a3,a4  b2       c3,c4         d2  e2
    a3,a5     b3       c4,c6         d3  e3
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>An open file is an iterator of lines. You want an iterator of groups of lines.</p>
<p>Since all of these groups are 6 lines long (counting the blank line at the end), the easiest way to do this is to use the <code>grouper</code> example from the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> recipes</a> in the docs. (You can also get a pre-made version from the <code>more-itertools</code> library on PyPI, if you prefer.)</p>
<pre><code>from itertools import *

def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)

with open(path) as f:
    for group in grouper(f, 6):
        do_something(group)
</code></pre>
<hr/>
<p>If the length of your groups isn't known in advance (even if it will always be consistent within a file), you can instead use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> to create alternating groups of empty and non-empty lines. This is kind of like using <code>split</code> on a string.</p>
<p>We can just use <code>bool</code> as a key function here—a non-empty line is truthy, and an empty line is falsey. (If that seems odd to you, you can write something like <code>lambda line: line</code> or <code>lambda line: line != ''</code> instead.)</p>
<pre><code>with open(path) as f:
    for nonempty, group in groupby(f, bool):
        if nonempty:
            do_something(group)
</code></pre>
<p>Or, if this seems way over your head… well, first read David Beazley's <a href="http://www.dabeaz.com/generators/" rel="nofollow noreferrer">Generator Tricks for Systems Programmers</a>, and maybe it <em>won't</em> be over your head anymore. But if it is, we can do the same thing a bit more explicitly:</p>
<pre><code>with open(path) as f:
    group = []
    for line in f:
        if line:
            group.append(line)
        else:
            do_something(group)
            group = []
    if group:
        do_something(group)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you can use pandas and know how many fields there are:</p>
<pre class="lang-py prettyprint-override"><code>fields = 5
df = pd.read_table('data.txt', header=None)
df = pd.DataFrame(df.values.reshape(-1, fields)))
</code></pre>
<p>If don't know how many fields:</p>
<pre class="lang-py prettyprint-override"><code>df = (pd
      .read_table('data.txt', header=None, skip_blank_lines=False)
      .append([np.nan]))
# empty lines become NaN. Find the first of them.
fields = np.where(pd.isnull(f))[0][0]
df = pd.DataFrame(df.values.reshape(-1, fields + 1)))
del df[df.columns[-1]]  # delete the NaN column
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can try generator approach:</p>
<pre><code>def chunks_by_space(file):
    with open(file,'r') as f:
        data=[line.strip() for line in f.readlines()]
        store=[]

        for line_no,value in enumerate(data):
            if value=='':
                yield store
                store=[]
            else:
                store.append(value)
        yield store

gen=chunks_by_space('file_name')
print(list(zip(*gen)))
</code></pre>
<p>output:</p>
<pre><code>[('a1,a2,a3', 'a2,a3,a4', 'a3,a5'), ('b1', 'b2', 'b3'), ('c1,c2,c3,c4', 'c3,c4', 'c4,c6'), ('d1', 'd2', 'd3'), ('e1', 'e2', 'e3')]
</code></pre>
</div>
