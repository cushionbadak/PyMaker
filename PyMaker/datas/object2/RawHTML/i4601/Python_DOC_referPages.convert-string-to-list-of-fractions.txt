<div class="post-text" itemprop="text">
<p>I'm trying to convert strings of the form</p>
<pre><code>'[[2, 3.1], [4/5, 5/6]]'
</code></pre>
<p>to a 2d list of Fraction objects from the fractions module.  In the particular case given above, the result should be</p>
<pre><code>[[Fraction(2, 1), Fraction(31, 10)], [Fraction(4, 5), Fraction(5, 6)]]
</code></pre>
<p>The spacing in the string won't necessarily be as uniform as I've written it (no spaces, extra spaces, uneven numbers of spaces, etc).</p>
<p>I can do this in several steps by peeling off the outer brackets, splitting the string at the <code>']'</code>s, removing empty strings from the resulting list, removing any nondigit from the beginning of each string in the list in a while loop, splitting each of those strings at the comma, and finally converting the elements of the nested lists to Fractions.</p>
<p>But that's fairly cumbersome.  Is there a better solution for this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use regular expressions to transform the numeric literals in your string into calls to <code>Fraction</code>. After the transformation, you can call <code>eval</code> on the result to get the appropriately nested list.</p>
<p>You don't need to handle the division operations in a special way, since they will work exactly as you want if we just convert both numerator and denominator into <code>Fraction</code> objects (so <code>4/5</code> becomes <code>Fraction("4")/Fraction("5")</code>, which evaluates to <code>Fraction(4, 5)</code>).</p>
<p>The transformation should put quotation marks around the numbers you pass to <code>Fraction</code>, as that prevents <code>eval</code> from parsing numbers with decimal points into <code>float</code> instances (which usually causes a loss of precision). <code>Fraction</code> can do the parsing instead, from a string, and it won't lose any precision since all finite-length decimal numbers have an exact <code>Fraction</code> representation.</p>
<p>Code:</p>
<pre><code>import re
from fractions import Fraction

input_text = '[[2, 3.1], [4/5, 5/6]]'

transformed_text = re.sub(r'([\d.]+)', r'Fraction("\1")', input_text)

results = eval(transformed_text)
print(results) # [[Fraction(2, 1), Fraction(31, 10)], [Fraction(4, 5), Fraction(5, 6)]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I came up with a nifty code snippet that can help you out with it:</p>
<pre><code>from fractions import Fraction
input_string = '[[2, 3.1], [4/5, 5/6]]'
parsed_input = [item for item in ''.join((char if char in '0123456789./' else '-') for char in input_string).split('-') if item]
output_array = [Fraction(i).limit_denominator(10) for i in parsed_input]
</code></pre>
<p>I hope this helps. Please use the comments section incase of any ambiguities. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import ast
import re
from fractions import Fraction

input_text = '[[2, 3.1], [1e100, -5/6]]'

transformed_text = ast.literal_eval(re.sub(r'([^,\[\]\s]+)', r'"\1"', input_text))
transformed_text =  [[ Fraction(j) for j in i]  for i in transformed_text ]
</code></pre>
<ul>
<li>regex is simpler: <code>Fraction(...)</code> can handle many different input forms; see here <a href="https://docs.python.org/3/library/fractions.html#fractions.Fraction" rel="nofollow noreferrer">https://docs.python.org/3/library/fractions.html#fractions.Fraction</a> with the note<br/>
that since version 3.2 the <code>Fraction</code> constructor now accepts <code>float</code> and <code>decimal.Decimal instances</code>.</li>
<li><code>ast.literal_eval</code> not <code>eval</code></li>
</ul>
</div>
<span class="comment-copy">Parse to an AST and replace the inner elements with the appropriate calls.</span>
<span class="comment-copy">I don't know what that means.  The docs page for the ast module is a bit over my head.</span>
<span class="comment-copy">AST is a <code>built-in</code> with python <code>import ast</code> <code>ast.literal_eval(input)</code></span>
<span class="comment-copy">@iam.Carrot: In this case, I think you'd want <code>ast.parse</code>, so you can get the actual AST tree to modify before passing it to <code>eval</code>. Doing a <code>literal_eval</code> immediately converts the <code>3.1</code>, <code>4/5</code> and <code>5/6</code> values to floats, which loses some precision.</span>
<span class="comment-copy">@Blckknght: Do you know how to do this and could provide an answer?</span>
<span class="comment-copy">Regex is fragile, e.g. it does not cover signs and scientific notation.</span>
