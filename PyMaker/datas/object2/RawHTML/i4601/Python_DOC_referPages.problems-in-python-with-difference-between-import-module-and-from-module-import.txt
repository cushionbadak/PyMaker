<div class="post-text" itemprop="text">
<p>I have had a problem with the difference between <code>import module</code> and <code>from module import name1, name2 ...</code> in Python. I am a newcomer (last week) to Python, using Python 3.6 on Windows-64.</p>
<p>In the <a href="https://docs.python.org/3.6/tutorial/modules.html#more-on-modules" rel="nofollow noreferrer">Python Tutorial</a> there is a short discussion of these two <code>import</code> approaches. It is stated that <code>from module import *</code> is not recommended because of the danger of polluting the current namespace. However, there is no indication that there is any material operational difference between <code>import module</code> and <code>from module import name1, name2..</code>, with the implication that this is a matter of preference or convenience.</p>
<p>However, there seems to be a big difference in practice. Consider this module named ModuleA, defining a global variable and a function:</p>
<pre><code># ModuleA
iGlobalA = 0

def fA():
    iGlobalA += 1
    print( "MA: iGlobalA=", iGlobalA )

print( "Module A Initialised, iGlobalA=", iGlobalA )
</code></pre>
<p>Using <code>import ModuleA</code> creates a separate <code>ModuleA</code> namespace. Now the members of that module are available as public members of the namespace, like this:</p>
<pre><code>import ModuleA as MA

def fX():
    print( "MX: Before, ModuleA.iGlobalA=", MA.iGlobalA )
    MA.fA()
    print( "MX: After 1, ModuleA.iGlobalA=", MA.iGlobalA )
    MA.fA()
    print( "MX: After 2, ModuleA.iGlobalA=", MA.iGlobalA )

fX()
</code></pre>
<p>This is the output:</p>
<pre><code>MA: Initialised, iGlobalA= 100
MX: Before, ModuleA.iGlobalA= 100
MA: iGlobalA incremented to 101
MX: After 1, ModuleA.iGlobalA= 101
MA: iGlobalA incremented to 102
MX: After 2, ModuleA.iGlobalA= 102
</code></pre>
<p>which is exactly as expected. Contrast this with ModuleY which uses the form <code>from ModuleA import fA, iGlobalA</code> and then refers to these members of ModuleA without qualification:</p>
<pre><code># ModuleY
from ModuleA import fA, iGlobalA   

def fY():
    print( "MY: Before, ModuleA.iGlobalA=", iGlobalA )
    fA()
    print( "MY: After 1, ModuleA.iGlobalA=", iGlobalA )
    fA()
    print( "MY: After 2, ModuleA.iGlobalA=", iGlobalA )

fY()
</code></pre>
<p>In this case the output is:</p>
<pre><code>MA: Initialised, iGlobalA= 100
MY: Before, ModuleA.iGlobalA= 100
MA: iGlobalA incremented to 101
MY: After 1, ModuleA.iGlobalA= 100
MA: iGlobalA incremented to 102
MY: After 2, ModuleA.iGlobalA= 100
</code></pre>
<p>In this case the global variable <code>iGlobalA</code> is imported <em>as a copy from ModuleA</em> after ModuleA is initialised, and becomes a completely separate variable from <code>ModuleA.iGlobalA</code>. It is also true that function <code>fA</code> is imported as a reference to the function in ModuleA <em>as defined at the time of import</em> - if the function is reassigned at some later point within ModuleA, then the reference to <code>fA()</code> in the importing module remains unchanged, pointing only to the function as originally imported.</p>
<p>I would have thought these differences between these import syntaxes should be more clearly stated in the documentation. It also means that someone designing a library module needs to specify how that module should be imported. </p>
<p>Edit - after comment by @abdullah-ahmed-ghaznavi
These are my questions</p>
<ul>
<li>Did I miss something in the documentation? </li>
<li>Is this behaviour the same across all platforms? </li>
<li>Is this the intended behaviour that can be relied upon in future?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>In this case the global variable iGlobalA is imported as a copy from ModuleA </p>
</blockquote>
<p>Nope. Just after <code>from ModuleA import iGlobalA</code>, both <code>ModuleA.iGlobalA</code> and <code>ModuleY.iGlobalA</code> point to the very same object - you can check this by printing <code>id(iGlobalA)</code> in both modules. Now while both names (initially) point to the same object, the <em>names</em> themselves are distinct - they live in different namespaces (one in <code>ModuleA</code> and the other in <code>ModuleY</code>), so when <code>fA()</code> rebinds the name <code>iGlobalA</code> - which is really <code>ModuleA.iGlobalA</code> - only the name leaving in <code>ModuleA</code> is impacted (so at this point both names point to different objects).</p>
<p>On the other hand when in <code>ModuleY</code> you use the qualified name <code>ModuleA.iGlobalA</code>, you only have one single name, so when this name is rebound (in <code>ModuleA</code>) by <code>fA()</code> you see the change in <code>ModuleY</code>, because you are really checking the same <em>name</em>.</p>
<p>Note that if instead of rebiding a name you had tried the same thing with mutating a mutable object (ie appending to a list, updating a dict etc) you wouldn't have noticed any difference in behaviour:</p>
<pre><code># ModuleA
iGlobalA = []

def fA():
    iGlobalA.append(1)
    print( "MA: iGlobalA=", iGlobalA )

print( "Module A Initialised, iGlobalA=", iGlobalA )
</code></pre>
<p>What you need to understand here is mainly <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">what Python "variables" really are</a>, and also that Python has no real global namespace ("global" really means "module level"). </p>
<blockquote>
<p>I would have thought these differences between these import syntaxes should be more clearly stated in the documentation.</p>
</blockquote>
<p>Possibly yes. Note that there actually some documentation about the whole thing, cf <a href="https://docs.python.org/3/reference/simple_stmts.html#import" rel="nofollow noreferrer">https://docs.python.org/3/reference/simple_stmts.html#import</a> and <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/import.html</a>, but you do indeed have to understand what "defines a name in the local namespace" and "a reference to that value is stored in the local namespace" really imply.</p>
<blockquote>
<p>It also means that someone designing a library module needs to specify how that module should be imported.</p>
</blockquote>
<p>The problem here is either that the lib is badly designed (and if it uses globals that way it <em>is</em> badly designed indeed) or (at least) that the name you tried to access is not (or should not be) part of the lib's API.</p>
<blockquote>
<p>Did I miss something in the documentation?</p>
</blockquote>
<p>Possibly too, I'm afraid I'm far too used to how this work to remember how I first learned it </p>
<blockquote>
<p>Is this behaviour the same across all platforms?
  Is this the intended behaviour that can be relied upon in future?</p>
</blockquote>
<p>Yes and yes. This is part of the language's specifications actually and changing it would break almost all existing code.</p>
</div>
<span class="comment-copy"><i>"someone designing a library module needs to specify how that module should be imported"</i> That's not really true. That person should just avoid using global variables or redefining methods. With any well-written module, it doesn't matter if you use <code>import module</code> or <code>from module import whatever</code>.</span>
<span class="comment-copy">@Aran-Fey - fair enough, so I guess the corollary would be that anyone designing a library should be aware of the implications of these differences and ensure that the importer can use either import syntax.</span>
<span class="comment-copy">Well nice explanation, <b><i>but what you want from this question ?</i></b> do you only want to discuss that the library writer/programmer  must state the import statement in there documentation ? and i am agree with @Aran-Fey</span>
<span class="comment-copy">@abdullah-ahmed-ghaznavi - Sorry, that's true, I hit the problem then found out the answer - but I have added some actual questions in my edit..</span>
<span class="comment-copy">Python modules are namespaces. When you use <code>from module mod import func</code> or whatever, that is equivalent to <code>import mod; func = mod.func; del mod</code>. The rest of the behavior you are seeing stems from the documented semantics of Python assignment. You can read a good summary <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">here</a></span>
<span class="comment-copy">I am embarrased that I never took the opportunity to express my thanks for your answers to my questions - I really appreciated the time you took to consider the questions and answer them so clearly. Many thanks! It was a great help and pushed my understanding of Python forwards in a single leap that might otherwise have taken a lot of trial and error.</span>
<span class="comment-copy">@JohnRC you're welcome - and I'm glad if it helped.</span>
