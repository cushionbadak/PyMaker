<div class="post-text" itemprop="text">
<p>I have multiple python threads printing output to a command line window. Each process writes logging messages to the command line window. Depending on the timing of the print operations, it sometimes happens that two lines (from different processes) are printed on a single line:</p>
<pre><code>time1:Output_process_1time2:Output_process_2
</code></pre>
<p>Is there any way of guaranteeing every line is printed on a different line in the command window, as such</p>
<pre><code> Time1:Output_process_1
 Time2:Output_process_2
</code></pre>
<p>I've played around with adding breakline characters. But this only makes empty lines appear.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answers given above are good suggestions. I also found another solution on stack overflow after some more searching:</p>
<p><a href="https://stackoverflow.com/questions/31137458/how-to-share-stdout-for-multi-threaded-python-script">How to share stdout for multi-threaded python script?</a></p>
<p>This answer suggest to use the logging module for python, which is supposed to be thread safe. </p>
</div>
<span class="comment-copy"><a href="https://www.youtube.com/watch?v=9zinZmE3Ogk" rel="nofollow noreferrer">Keynote on Concurrency, PyBay 2017</a> is a good watch, it even has an example demonstrating the problem you are having. One way to fix it might be to have another thread that just prints what it is <i>fed</i> then all the other threads feed it but don't print.</span>
<span class="comment-copy">Use a <a href="https://docs.python.org/3/library/threading.html#lock-objects" rel="nofollow noreferrer">lock</a>?</span>
<span class="comment-copy">The best approach for this should be (as wwii wrote) using a designated thread for logging and a queue. Each thread push its log message to the queue and the logging thread print them one by one.</span>
