<div class="post-text" itemprop="text">
<p>Is there a an operation similar to <a href="https://docs.python.org/2/c-api/int.html#c.PyInt_Check" rel="nofollow noreferrer"><code>PyInt_Check</code></a>/<a href="https://docs.python.org/2/c-api/long.html#c.PyLong_Check" rel="nofollow noreferrer"><code>PyLong_Check</code></a> that takes into account whether or not the type has an <code>__int__</code> method?</p>
<p>The closest workaround I have been able to find so far is</p>
<pre><code>int check_int(PyObject *obj)
{
    long lng;
    int over;

    lng = PyLong_AsLongAndOverflow(obj, &amp;over);
    if(lng == -1 &amp;&amp; over == 0 &amp;&amp; PyErr_Occurred()) {
        PyErr_Clear();
#if PY_MAJOR_VERSION &lt;= 2
        lng = PyInt_AsLong(obj);
        if(lng == -1L &amp;&amp; PyErr_Occurred()) {
            PyErr_Clear();
            return 0;
        }
#else
        return 0;
#endif
    }
    return 1;
}
</code></pre>
<p>The problem here is that I am effectively doing something like</p>
<pre><code>def isint(obj):
    try:
        int(obj)
    except TypeError:
        return False
    else:
        return True
</code></pre>
<p>However, this being C, I would prefer to do something like</p>
<pre><code>def isint(obj):
    return isinstance(obj, int) or hasattr(type(obj), '__int__')
</code></pre>
<p>I would expect such a check to already exist because <a href="https://docs.python.org/2/c-api/int.html#c.PyInt_AsLong" rel="nofollow noreferrer"><code>PyInt_AsLong</code></a> and <a href="https://docs.python.org/2.7/c-api/long.html#c.PyLong_AsLongAndOverflow" rel="nofollow noreferrer"><code>PyLong_AsLongAndOverflow</code></a> already perform it. I just want to be able to know if an object might be an integer without getting the integer value at all.</p>
<p>That being said, I can see the point of actually getting the value, since <code>hasattr(type(obj), '__int__')</code> does not actually guarantee that the object can be reasonably used as an integer: e.g., if the attribute is not a function or just raises an error. In that case "no" may be a valid answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>The closest thing to a function for that is <a href="https://docs.python.org/3/c-api/number.html#c.PyNumber_Long" rel="nofollow noreferrer"><code>PyNumber_Long</code></a>, or <a href="https://docs.python.org/2/c-api/number.html#c.PyNumber_Int" rel="nofollow noreferrer"><code>PyNumber_Int</code></a> on Python 2. Both of these functions actually perform the conversion. They will also consider methods like <code>__trunc__</code>, and convert strings to ints, just like calling <code>int</code> from Python-level code.</p>
<p>If you want to check for the presence of an <code>__int__</code> conversion method, you can look for the corresponding slot directly:</p>
<pre><code>if (o-&gt;ob_type-&gt;tp_as_number and o-&gt;ob_type-&gt;tp_as_number-&gt;nb_int) {
    do_whatever();
}
</code></pre>
</div>
<span class="comment-copy">Are you sure you want <code>__int__</code> and not <code>__index__</code>?</span>
<span class="comment-copy">@user2357112. Absolutely. In case you are wondering why, I am adding it to <a href="https://github.com/numpy/numpy/pull/10820" rel="nofollow noreferrer">numpy PR#10820</a></span>
<span class="comment-copy">@user2357112. That being said, if you know something relevant about <code>__index__</code>, please share.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/c-api/number.html#c.PyIndex_Check" rel="nofollow noreferrer"><code>PyIndex_Check</code></a> checks for an <code>__index__</code> method.</span>
<span class="comment-copy">I see. Unfortunately that is not what I want. I'm fixing up my C code BTW. It's a mess ATM</span>
<span class="comment-copy">As I noted in the end of my question, I am perfectly fine to do the conversion, I just didn't want to do it myself. It is also very nice that both functions eat up the exception. I will still have to add the <code>#if</code>, but that is a small price to pay.</span>
<span class="comment-copy">Thanks for the update. Perhaps that is not what I want after all. Excellent answer and food for thought.</span>
<span class="comment-copy">@MadPhysicist: I'm not sure about the exception part; the docs don't mention raising an exception, but the <a href="https://github.com/python/cpython/blob/v3.6.4/Objects/abstract.c#L1314" rel="nofollow noreferrer">implementation</a> seems to produce an exception for invalid input.</span>
<span class="comment-copy">That is to be expected since <code>int</code> raises a <code>TypeError</code> if you try funny stuff.</span>
