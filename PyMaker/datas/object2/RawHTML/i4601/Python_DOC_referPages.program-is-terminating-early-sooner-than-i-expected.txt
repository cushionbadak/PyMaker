<div class="post-text" itemprop="text">
<p>I am working on a MyProgrammingLab problem that states the following:</p>
<blockquote>
<p>You work for a bakery that sells two items: muffins and cupcakes. The number of muffins and cupcakes in your shop at any given time is stored in the variables muffins and cupcakes, which have been defined for you. 
  Write a program that takes strings from standard input indicating what your customers are buying ("muffin" for a muffin, "cupcake" for a cupcake). If they buy a muffin, decrease muffins by one, and if they buy a cupcake, decrease cupcakes by one. If there is no more of that baked good left, print ("Out of stock"). </p>
<p>Once you are done selling, input "0", and have the program print out the number of muffins and cupcakes remaining, in the form "muffins: 9 cupcakes: 3" (if there were 9 muffins and 3 cupcakes left, for example).</p>
</blockquote>
<p>I am testing my code in jGRASP (not a fan, unfortunately required for the course) and the program works as intended, but it seems to terminate early sometimes, and I'm struggling to figure out why, as I can not find any errors in my logic. Here is what I have:</p>
<pre><code>muffins = 5
cupcakes = 6
buyItem = raw_input("")
while buyItem == "m":
   if muffins &lt;= 0:
      if cupcakes &lt;= 0:
         print("All out of stock.")
         break
      else:
         print("Out of stock.")
         buyItem = raw_input("")
   else:
      muffins -= 1
      print("muffins: {} cupcakes: {}".format(muffins, cupcakes))
      buyItem = raw_input("")
while buyItem == "c":
   if cupcakes &lt;= 0:
      if muffins &lt;=0:
         print("All out of stock.")
         break
      else:
         print("Out of stock.")
         buyItem = raw_input("")
   else:
      cupcakes -= 1
      print("muffins: {} cupcakes: {}".format(muffins, cupcakes))
      buyItem = raw_input("")
</code></pre>
<p>And here is an example of an output that terminates early:</p>
<pre class="lang-none prettyprint-override"><code>----jGRASP exec: python test.py
m
muffins: 4 cupcakes: 6
m
muffins: 3 cupcakes: 6
m
muffins: 2 cupcakes: 6
c
muffins: 2 cupcakes: 5
c
muffins: 2 cupcakes: 4
c
muffins: 2 cupcakes: 3
m
----jGRASP: operation complete.
</code></pre>
<p>However, if I input differently, it works just fine:</p>
<pre class="lang-none prettyprint-override"><code>----jGRASP exec: python test.py
m
muffins: 4 cupcakes: 6
m
muffins: 3 cupcakes: 6
m
muffins: 2 cupcakes: 6
m
muffins: 1 cupcakes: 6
m
muffins: 0 cupcakes: 6
m
Out of stock.
c
muffins: 0 cupcakes: 5
c
muffins: 0 cupcakes: 4
c
muffins: 0 cupcakes: 3
c
muffins: 0 cupcakes: 2
c
muffins: 0 cupcakes: 1
c
muffins: 0 cupcakes: 0
c
All out of stock.
----jGRASP: operation complete.
</code></pre>
<p>I'm not sure what's wrong. Thoughts?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because once you leave the <code>while "m"</code>, you can't get back there.</p>
<pre><code>while buyItem == "m":
   #do stuff
while buyItem == "c":
   #do other stuff

#end program
</code></pre>
<p>When you input <code>m -&gt; c -&gt; m</code>, <code>m != c</code>, so we leave <code>while buyItem == "c":</code> and end the program.</p>
<p>We should instead have one loop, and only ask for input once at the end if we have stock, otherwise break out of the loop when entirely out of stock. Additionally, since your assignment says to only print when input is <code>0</code>:</p>
<pre><code>muffins = 5
cupcakes = 6
buyItem = raw_input("")

while buyItem in ["m", "c", "0"]:
    if buyItem == "m":
        if muffins &lt;= 0:
            print("Out of stock.")
        else:
            muffins -= 1
    elif buyItem == "c":
        if cupcakes &lt;= 0:
            print("Out of stock.")
        else:
            cupcakes -= 1
    elif buyItem == "0":
        print("muffins: {} cupcakes: {}".format(muffins, cupcakes))
        break
    else:  # input is not "m" or "c" or "0"
        print(buyItem.join(" is not a valid input"))
        break

    if muffins &lt;= 0 and cupcakes &lt;= 0:  # we can check this once at the end and break out if we are entirely out of stock
        print("All out of stock.")
        break
    else:  # otherwise, if we have some stock, ask for input
        buyItem = raw_input("")
</code></pre>
</div>
<span class="comment-copy">You only check for muffins, <i>then</i> cupcakes, <i>then</i> you don't check for anything. Walk through the code and it will make sense.</span>
<span class="comment-copy">Hi @Tree, check out the <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">python debugger</a> which is a way to stop your Python script at any place where you put <code>import pdb; pdb.set_trace()</code> and then step through line by line, reveal variable values, step into sub-functions, etc., to try to discover the root cause of your issue. Debugging is a valuable skill that every coder should have in their toolkit. Most IDE's like PyCharm, Spyder, Visual Studio w/PythonTools, and Eclipse+PyDev/LiClipse have a built-in graphical debugger. Hope this helps you for the next time.</span>
<span class="comment-copy">what kind of crazy person would buy muffins after buying cupcakes?</span>
<span class="comment-copy">@Tree Welcome to StackOverflow. Since you're new, have you read <a href="https://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a></span>
<span class="comment-copy">Thanks! Also, I included the print statements while testing it so I could see the variables. Is there a better or easier way to do that?</span>
<span class="comment-copy">A debugger is a god-send for programmers. It lets you view program <i>state</i>, like where the program is during execution, what variables have what values, etc. instead of just blindly printing stuff. I personally have used PyCharm and its wonderful, and free. Otherwise, what you did was fine, since it at least gave you (and me) a starting point to identify the issue.</span>
