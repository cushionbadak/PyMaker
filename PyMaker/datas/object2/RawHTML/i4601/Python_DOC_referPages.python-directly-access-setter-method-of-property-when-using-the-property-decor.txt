<div class="post-text" itemprop="text">
<p>I want to make use of properties in python while still being able to call the setter method of a property directly in some cases. The reason being, that I need to assign variables in lambda statements while using PySide/PyQt.</p>
<p>The following example includes two classes which should behave almost identical. One using <code>property()</code> and one <code>@property</code>.</p>
<pre><code>class Test1:
    def __init__(self):
        self._x = 0

    def setx(self, value):
        print(f'x set to {value}')
        self._x = value

    x = property(fset=setx)


class Test2:
    def __init__(self):
        self._x = False

    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        print(f'x set to {value}')
        self._x = value


t1 = Test1()
print('Test1:')
t1.x = 1
setattr(t1, 'x', 2)
t1.setx(3)


t2 = Test2()
print('Test2:')
t2.x = 1
setattr(t2, 'x', 2)
</code></pre>
<p>This works pretty well. For class <code>Test1</code> i can assign values to the variable using 3 different ways. 2 of them are possible to use in a lambda statement.</p>
<p>However, if I'm using the <code>@property</code> decorator I only have 2 ways left (As far as I can see at least!). And the only possible way to assign in a lambda statement is using <code>setattr</code>, which I'd rather avoid since it hurts readability in my opinion :(</p>
<h1>Question</h1>
<p>Is there a way to use the syntactic sugar of the <code>@property</code> decorator while still being able to use the setter directly?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit: actually, there is a way to do it</strong></p>
<pre><code>class C:
    def __init__(self):
        self._x = 4
    @property
    def x(self):
        return self._x
    @x.setter
    def x(self, x):
        self._x = x        

c = C()

c.x == 4

C.x.fset(c, 3)

c.x == 3
</code></pre>
<p>But this is far less readable than <code>setattr</code> so I wouldn't use it.</p>
<hr/>
<p>No there isn't. But you shouldn't expect there to be.</p>
<p>Complaining you now only have <em>two different ways to do something</em> is not a good argument. </p>
<p>Like @Aran-Fey said, you can use a real <code>def</code> function or <code>setattr</code> like in your example. It is not wrong to use these and anyone worth their salt in python will understand what is going on.</p>
</div>
<span class="comment-copy"><i>"The reason being, that I need to assign variables in lambda statements"</i> That's not a good reason. 1) You can use a real function instead of a lambda. 2) There's <a href="https://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr</code></a>.</span>
<span class="comment-copy">@Aran-Fey: 1) I don't really want to use real functions because I have dozens of those assignments and this would bloat my code tremendously. 2) A tiny bit ugly in my opinion, but true nevertheless :)</span>
<span class="comment-copy">@johnson. Surely getter/setter methods would <i>decrease</i> the bloat, since there would be no need for decorators. I also think they are much more effective and readable in pyqt/pyside programs, because they can be used as slots and are consistent with the style of the existing qt apis.</span>
<span class="comment-copy">I'm not complaining, I'm rather trying to find out about every way possible before deciding which approach I like most and want to use in the future</span>
<span class="comment-copy">@johnson see my edit :)</span>
