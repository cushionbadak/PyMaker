<div class="post-text" itemprop="text">
<pre><code>import datetime
date = datetime.datetime(2000,9,17)
for i in range(50): 
    date += datetime.timedelta(days=1)
    print(date) 
</code></pre>
<p>I want to print only the last date in the form 2075-01-30 and Not as 2075-01-30 00:00:00</p>
</div>
<div class="post-text" itemprop="text">
<p>Unindent the print statement in the last line </p>
<pre><code>import datetime
date = datetime.datetime(2000,9,17)
for i in range(50): 
    date += datetime.timedelta(days=1)
print(date) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To not print the date every time, you just need to move the <code>print</code> outside the loop by unindenting it, as Stephen Rauch explained.</p>
<p>If you want print just the date instead of the date and time, you probably actually want to use a <a href="https://docs.python.org/3/library/datetime.html#date-objects" rel="nofollow noreferrer"><code>date</code></a> object instead of a <code>datetime</code> object:</p>
<pre><code>date = datetime.date(2000,9,17)
for i in range(50): 
    date += datetime.timedelta(days=1)
    print(date) 
</code></pre>
<hr/>
<p>If there's some reason you actually want to use a <code>datetime</code> for your intermediate calculations (which may have implications for weird cases like daylight saving transitions, which maybe you've thought through and want?), you can instead convert to <code>date</code> only at the end, or print any format you want with <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer"><code>strftime</code></a>:</p>
<pre><code>date = datetime.datetime(2000,9,17)
for i in range(50): 
    date += datetime.timedelta(days=1)
    print(date.strftime('%Y-%m-%d')
</code></pre>
<p>But if not, it's simpler to just use <code>date</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>That can be done simply as:</p>
<pre><code>import datetime as dt
date_str = dt.datetime(2000, 9, 17) + dt.timedelta(days=50)
print(date_str.strftime("%Y-%m-%d"))
</code></pre>
<h3>Result:</h3>
<pre><code>2000-11-06
</code></pre>
</div>
<span class="comment-copy">unindent <code>print(date)</code></span>
<span class="comment-copy">@StephenRauch thank you , how to remove 00:00:00?</span>
<span class="comment-copy">You probably want to use a <code>date</code> rather than a <code>datetime</code>. But if you actually do want to do the calculations on <code>datetime</code>, you can either convert to <code>date</code> at the end, or use <code>strftime</code> to print the <code>datetime</code> in whatever format you want, including one that ignore the time bits.</span>
<span class="comment-copy">I'm assuming this is just a simplified <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>, and in your real code you're doing something a bit more complicated. But just in case: you realize you can add <code>timedelta(days=50)</code>, or <code>50 * timedelta(days=1)</code> without a loop, right?</span>
<span class="comment-copy">I'm surprised also. This isn't as good as Steven's answer for this exact task but is a great general solution. Perhaps mentioning that module variables retain their last value when the for exits.</span>
<span class="comment-copy">@tdelaney Why mention that? This variable existed before the loop, so nobody expecting C-style block scoping would be confused here. (I ask because, if I'm missing something confusing here, my answer probably needs it just as much as Jai's does.)</span>
<span class="comment-copy">You didn't say why it works and I think that since this question is obviously from someone new to python, a quick explanation is helpful. We don't have to go to first principles for everything, but that's the "a-ha" OP needed.</span>
<span class="comment-copy">Good point on using <code>date</code></span>
