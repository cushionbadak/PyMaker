<div class="post-text" itemprop="text">
<p>I am working on a signal processing application in python. I want call the same function using multiple threads in python, to achieve concurrent execution is it possible to do it? If so how?</p>
</div>
<div class="post-text" itemprop="text">
<p>Long story short : No, because of the <a href="https://en.wikipedia.org/wiki/Global_interpreter_lock" rel="nofollow noreferrer">Global Interpreter Lock</a>.</p>
<p>But you might want to consider using processes instead of threads, which appear to be your real need on your application (as far as one can understand from your explanations), since it seems you do not need to make use of a shared memory space.</p>
<p>A (very) simple example:</p>
<pre><code>import multiprocessing

def worker(num):
    """ Worker procedure
    """
    print('Worker:', str(num))

# Mind the "if" instruction!
if __name__ == '__main__':
    jobs = [] # list of jobs
    jobs_num = 5 # number of workers
    for i in range(jobs_num):
        # Declare a new process and pass arguments to it
        p1 = multiprocessing.Process(target=worker, args=(i,))
        jobs.append(p1)
        # Declare a new process and pass arguments to it
        p2 = multiprocessing.Process(target=worker, args=(i+10,))
        jobs.append(p2)
        p1.start() # starting workers
        p2.start() # starting workers
</code></pre>
<p>This example will give you the following output:</p>
<pre><code>$ python multiprocessing_example.py

Worker: 0
Worker: 10
Worker: 1
Worker: 11
Worker: 2
Worker: 12
Worker: 3
Worker: 13
Worker: 4
Worker: 14
</code></pre>
<p>To make good use of multiples processes, I recommend you learn a little about <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing" rel="nofollow noreferrer">the documentation of the module</a>, the GIL, the differences between threads and processes and, especially, how it can speed up or limit what you want to do and how.</p>
<p>For example, going multiprocessing will not help you if your bottleneck is I/O, but will help if your processing is limited by your CPU.</p>
</div>
<span class="comment-copy">This question is really broad.  You can always call the same function.  That is not a problem.  The problem might come if the functions are sharing data.  For that we will need a lot more details.</span>
<span class="comment-copy">If you really want <code>concurrent execution</code> with <code>multiple threads in python</code>, then the answer is: Due to the Global Interpreter Lock, that is not possible. You could use multi-processes instead.</span>
<span class="comment-copy">@StephenRauch I am trying to implement a LMS filter bank. Each branch of the bank gets unique data for it to process. They all have the same function though.</span>
<span class="comment-copy">@rollstuhlfahrer thank you</span>
