<div class="post-text" itemprop="text">
<p>I have a list of around 131000 arrays, each of length 300. I am using python
I want to check which of the arrays are repeating in this list. I am trying this by comparing each array with others. like :</p>
<pre><code>Import numpy as np
wordEmbeddings = [[0.8,0.4....upto 300 elements]....upto 131000 arrays]
count = 0
for i in range(0,len(wordEmbeddings)):
   for j in range(0,len(wordEmbeddings)):
      if i != j:
         if np.array_equal(wordEmbeddings[i],wordEmbeddings[j]):
         count += 1
</code></pre>
<p>this is running very slowly, It might take hours to finish, how can I do this efficiently ?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> to count the frequency of each sub list</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter(list(map(tuple, wordEmbeddings)))
</code></pre>
<p>We need to cast the sublist to tuples since list is unhashable i.e. it cannot be used as a key in dict. </p>
<p>This will give you result like this:</p>
<pre><code>&gt;&gt;&gt; Counter({(...4, 5, 6...): 1, (...1, 2, 3...): 1})
</code></pre>
<p>The key of <code>Counter</code> object here is the list and value is the number of times this list occurs. Next you can filter the resulting <code>Counter</code> object to only yield elements where value is &gt; 1:</p>
<pre><code>&gt;&gt;&gt; items = Counter(list(map(tuple, wordEmbeddings)))
&gt;&gt;&gt; list(filter(lambda x: items[x] &gt; 1,items))
</code></pre>
<p>Timeit results:</p>
<pre><code>$ python -m timeit -s "a = [range(300) for _ in range(131000)]" -s "from collections import Counter" "Counter(list(map(tuple, a)))"
10 loops, best of 3: 1.18 sec per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can remove duplicate comparisons by using</p>
<pre><code>for i in range(0,len(wordEmbeddings)):
    for j in range(i,len(wordEmbeddings)):
</code></pre>
<p>You could look in to <a href="https://pypy.org/" rel="nofollow noreferrer">pypy</a> for general purpose speed ups.<br/>
It might also be worth looking into hashing the arrays somehow.</p>
<p>Here's <a href="https://stackoverflow.com/questions/29872350/fastest-way-of-comparing-two-numpy-arrays">a question on the speeding up np array comparison</a>. Do the order of the elements matter to you?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>set</code> and <code>tuple</code> to find duplicated arrays inside another array. Create a new list contains tuples, we use tuples because lists are unhashable type. And then filter new list with using set.</p>
<pre><code>tuple = list(map(tuple, wordEmbeddings))
duplications = set([t for t in tuple if tuple.count(t) &gt; 1])
print(duplications)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>maybe you can reduce the initial list to unique hashes, or non-unique sums,
and go over the hashes first - which may be a faster way to compare elements </p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you first sort the list (might also be helpful for further processing) and then compare. The advantage is that you only need to compare every array element to the previous one:</p>
<pre><code>import numpy as np
from functools import cmp_to_key
wordEmbeddings = [[0.8, 0.4, 0.3, 0.2], [0.2,0.3,0.7], [0.8, 0.4, 0.3, 0.2], [ 1.0, 3.0, 4.0, 5.0]]
def smaller (x,y):
    for i in range(min(len(x), len(y))):
        if x[i] &lt; y[i]:
            return 1
        elif y[i] &lt; x[i]:
            return -1
    if len(x) &gt; len(y):
        return 1
    else:
        return -1
wordEmbeddings = sorted(wordEmbeddings, key=cmp_to_key(smaller))
print(wordEmbeddings)
# output: [[1.0, 3.0, 4.0, 5.0], [0.8, 0.4, 0.3, 0.2], [0.8, 0.4, 0.3, 0.2], [0.2, 0.3, 0.7]]
count = 0
for i in range(1, len(wordEmbeddings)):
    if (np.array_equal(wordEmbeddings[i], wordEmbeddings[i-1])):
        count += 1

print(count)
# output: 1
</code></pre>
<p>If N is the length of word embedding and n is the length of the inner array, then your approach was to do <code>O(N*N*n)</code> comparisons. When reducing the comparisons as in con--'s answer, then you still have <code>O(N*N*n/2)</code> comparisons.</p>
<p>Sorting will take <code>O(N*log(N)*n)</code> time and the subsequent step of counting only takes <code>O(N*n)</code> time which all in all is shorter than <code>O(N*N*n/2)</code></p>
</div>
