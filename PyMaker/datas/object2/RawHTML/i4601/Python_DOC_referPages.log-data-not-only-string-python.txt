<div class="post-text" itemprop="text">
<p>I want to log data, not just string in a python.</p>
<p>I would like to avoid implementing this myself, since I think this was done before.</p>
<p>I read the <a href="https://docs.python.org/3/howto/logging.html#using-arbitrary-objects-as-messages" rel="nofollow noreferrer">Logging HOWTO</a>, but it does not cover this topic</p>
<p>Same here: <a href="https://docs.python.org/2/howto/logging-cookbook.html" rel="nofollow noreferrer">Logging Cookbook</a></p>
<p>I want to support these primitive data types:</p>
<ul>
<li>strings</li>
<li>integers</li>
<li>datetime</li>
<li>lists</li>
<li>dictionaries</li>
</ul>
<p>After logging I want to parse the log back to data again ...</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>logging</code> module already supports this, as explained in the <a href="https://docs.python.org/3/howto/logging.html#using-arbitrary-objects-as-messages" rel="nofollow noreferrer">documentation</a> you already linked to:</p>
<pre><code>import logging
import datetime

if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)

    s = "test"
    i = 5
    today = datetime.datetime.today()
    l = [1, 2, 3, 4, "5"]
    d = {1:2, "a": 5}

    logging.debug(s)
    logging.info(i)
    logging.warning(today)
    logging.error(l)
    logging.fatal(d)
</code></pre>
<p>Output:</p>
<pre><code>DEBUG:root:test
INFO:root:5
WARNING:root:2018-03-29 11:54:14.408168
ERROR:root:[1, 2, 3, 4, '5']
CRITICAL:root:{1: 2, 'a': 5}
</code></pre>
<p>If you need mixed strings and objects, use the formatting abilities (using <code>%</code> formatting by default):</p>
<pre><code>logging.info("i = %s; s = %s", i, s)
# INFO:root:i = 5; s = test
</code></pre>
<p>Note that the logging module is clever. If you do <code>logging.debug("%s" % , obj)</code>, the <code>__str__</code> method of <code>obj</code> will always be called, but if you do either <code>logging.debug(obj)</code> or <code>logging.debug("%s", obj)</code>, it will only be called if the logging level is set to show debugging output. This saves some time, especially if this method is expensive.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to use any explicit library, you may simply type-cast any object to <code>str</code> and concatenate it's value to your log string. For example:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime

&gt;&gt;&gt; 'My String: ' + str(datetime.now())
'My String: 2018-03-29 15:32:35.487581'
</code></pre>
<p>Personally I use <code>str.format</code> method for such tasks. It internall makes a call to <code>__str__</code> function while filling the values.</p>
<p>Firstly create a <code>dict</code> with the keys you want to log. For example:</p>
<pre><code>log_data = {
    'string': '**some string**',
    'dict': {'some': 'dict'},
    'list': ['some', 'list'],
    'tuple': ('some', 'tuple'),
    'int': 1234,
    'datetime': datetime.now()
}
</code></pre>
<p>Now use unpacked version of the above dict with the <code>string.format</code> function on your string as:</p>
<pre><code>&gt;&gt;&gt; my_log_string = 'My String - {string}, My Dict - {dict}, My List - {list}, My Tuple - {tuple}, My int - {int}, My Datetime - {datetime}'

&gt;&gt;&gt; my_log_string.format(**log_data)
"My String - **some string**, My Dict - {'some': 'dict'}, My List - ['some', 'list'], My Tuple - ('some', 'tuple'), My int - 1234, My Datetime - 2018-03-29 15:28:37.474416"
</code></pre>
</div>
<span class="comment-copy">why can't you just log as <code>"your log string" + str(whatever_value_you_have)</code></span>
<span class="comment-copy">I still don't understand why questions concerning "which library to use" are are not allowed here. I "moved" the question to this page: <a href="https://softwarerecs.stackexchange.com/questions/49402/log-data-not-only-string-python" title="log data not only string python">softwarerecs.stackexchange.com/questions/49402/â€¦</a></span>
<span class="comment-copy">Using the built-in methods of the <code>logging</code> module has the advantage that the string will not be formatted if it is below the logging level. This saves some time for objects for which <code>__str__</code> is expensive.</span>
