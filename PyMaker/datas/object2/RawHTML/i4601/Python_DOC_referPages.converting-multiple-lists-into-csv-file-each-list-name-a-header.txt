<div class="post-text" itemprop="text">
<p>I'm using Python 3.6. I have three lists with about 11,000 elements that I am converting to a csv file, but because there is no writecolumn() function like there is a writerow(), my lists are displayed near infinitely rightward. Here is a sample code with sample lists of only three elements each. How do I get the elements from the lists 'number', 'session', and 'stage' under their own column and header? To clarify, I want all three 'number' elements under one column, and the same for 'session' and 'stage'.</p>
<p>The question here comes close to answering but not quite, so please don't duplicate: <a href="https://stackoverflow.com/questions/32839387/write-multiple-lists-into-csv-file-in-python">Write multiple lists into csv. file in Python</a></p>
<p>I've tried converting to a dictionary but dictionaries don't take variables in the values section. I've tried iterating but that only makes each element iterable going rightward. I've tried using the zip() function but that only groups each list by index under one column.</p>
<pre><code>import csv
import sys

number = ['H. R. 43', 'H. Con. Res. 22', 'S. 11']
session = ['1st Session', '1st Session', '2nd Session']
stage = ['Introduced in House', 'Engrossed in House', 'Referred in Senate']


def main(anything):
    global number
    global session
    global stage
    with open('BILLS.csv', 'w') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Number', 'Session', 'Stage'])
        writer.writerow(number)
        writer.writerow(session)
        writer.writerow(stage)


if __name__ == '__main__':
    main(sys.argv)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>zip</code> function</p>
<pre><code>import csv
number = ['H. R. 43', 'H. Con. Res. 22', 'S. 11']
session = ['1st Session', '1st Session', '2nd Session']
stage = ['Introduced in House', 'Engrossed in House', 'Referred in Senate']

# setting newline to '' is required because csv will add blank line 
with open('BILLS.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['Number', 'Session', 'Stage'])
    writer.writerows(zip(number, session, stage))
</code></pre>
<p>or you could use the <code>pandas</code> module</p>
<pre><code>import pandas as pd 

number = ['H. R. 43', 'H. Con. Res. 22', 'S. 11']
session = ['1st Session', '1st Session', '2nd Session']
stage = ['Introduced in House', 'Engrossed in House', 'Referred in Senate']

#building a dictionary out of your lists
data = {'number':number, 'session':session, 'stage':stage}

df = pd.DataFrame.from_dict(data)

#pandas even has a buildin to_csv() function
#with open('BILLS.csv', 'w') as f:
#   df.to_csv(f)
</code></pre>
<p>You should also stop using <code>global</code> variables</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import zip_longest

combine_three_list = zip_longest(number, session, stage)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you have same number of elements in each list you can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>. </p>
<pre><code>import csv
import sys

number = ['H. R. 43', 'H. Con. Res. 22', 'S. 11']
session = ['1st Session', '1st Session', '2nd Session']
stage = ['Introduced in House', 'Engrossed in House', 'Referred in Senate']


def main():
    global number
    global session
    global stage
    with open('BILLS.csv', 'w') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Number', 'Session', 'Stage'])
        for ele in list(zip(number, session, stage)):
            writer.writerow(ele)


if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">I think <code>zip()</code> is what you need here, how have you tried to use it ?</span>
<span class="comment-copy">This worked well, thank you. I also took out the global declarations and input the variables as parameters, instead. For those reading this who don't know, that not only shortens your script but reduces the memory usage per build.</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.</span>
