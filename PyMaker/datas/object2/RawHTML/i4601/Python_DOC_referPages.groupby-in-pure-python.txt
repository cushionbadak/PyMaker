<div class="post-text" itemprop="text">
<p>I need some sql like functionality preferably with pure python but not panda. My requirement is to get the tag which length is just less than the max length. </p>
<p>Step 1: Get the max count of / in second column. </p>
<p>Step 2: Return the tag whose count of / in second column is one less than the one from step 1.</p>
<p><strong>My List is:</strong></p>
<pre><code>['MYDATA_FILE_XT', '/MYDATA/FILE/XT/ROW/STATUS', 'string']
['MYDATA_FILE_XT_ROW', '/MYDATA/FILE/XT/ROW/STATUS', 'string']
['MYDATA_FILE_XT_ROW_STATUS', '/MYDATA/FILE/XT/ROW/STATUS', 'string']
['XX', '/MYDATA/FILE/XV/ROW/CURRENCY_CODE', 'string']
['MYDATA', '/MYDATA/FILE/XV/ROW/CURRENCY_CODE', 'string']
['MYDATA_FILE', '/MYDATA/FILE/XV/ROW/CURRENCY_CODE', 'string']
['MYDATA_FILE_XV', '/MYDATA/FILE/XV/ROW/CURRENCY_CODE', 'string']
['MYDATA_FILE_XV_ROW', '/MYDATA/FILE/XV/ROW/CURRENCY_CODE', 'string']
['MYDATA_FILE_XV_ROW_CURRENCY_CODE', '/MYDATA/FILE/XV/ROW/CURRENCY_CODE', 'string']
['YY', '/MYDATA/FILE/XV/ROW/EXCESS_AMOUNT', 'string']
['MYDATA', '/MYDATA/FILE/XV/ROW/EXCESS_AMOUNT', 'string']
['MYDATA_FILE', '/MYDATA/FILE/XV/ROW/EXCESS_AMOUNT', 'string']
['MYDATA_FILE_XV', '/MYDATA/FILE/XV/ROW/EXCESS_AMOUNT', 'string']
['MYDATA_FILE_XV_ROW', '/MYDATA/FILE/XV/ROW/EXCESS_AMOUNT', 'string']
['MYDATA_FILE_XV_ROW_EXCESS_AMOUNT', '/MYDATA/FILE/XV/ROW/EXCESS_AMOUNT', 'string']
['LM', '/MYDATA/FILE/XV/ROW/USD_EQUIVALENT', 'string']
['MYDATA', '/MYDATA/FILE/XV/ROW/USD_EQUIVALENT', 'string']
['MYDATA_FILE', '/MYDATA/FILE/XV/ROW/USD_EQUIVALENT', 'string']
['MYDATA_FILE_XV', '/MYDATA/FILE/XV/ROW/USD_EQUIVALENT', 'string']
['MYDATA_FILE_XV_ROW', '/MYDATA/FILE/XV/ROW/USD_EQUIVALENT', 'string']
['MYDATA_FILE_XV_ROW_USD_EQUIVALENT', '/MYDATA/FILE/XV/ROW/USD_EQUIVALENT', 'string']
</code></pre>
<p><strong>Expected Output:</strong>
['MYDATA_FILE_XT_ROW'] ['MYDATA_FILE_XV_ROW']</p>
</div>
<div class="post-text" itemprop="text">
<pre><code># create a set of (unique) paths
groups = set([line[1] for line in data])

# group tags as list per path
groupedTags = {}
for group in groups:
    groupedTags[group] = []

for line in data:
    groupedTags[line[1]].append(line[0])

# save the second longest tag for each group in output
output = []
for group in groups:
    if len(groupedTags[group]) &lt; 2:
        output.append(groupedTags[group][0]) # if there is only one tag
    else:
        output.append(sorted(groupedTags[group], key = len)[-2])
</code></pre>
</div>
<span class="comment-copy">You can replicate <code>pandas</code>-like functions with <code>itertools.groupby</code> after sorting. There are lots of similar examples. Would this be an acceptable method?</span>
<span class="comment-copy">I am looking for a pure python solution. However how to do that using pandas?</span>
<span class="comment-copy">@SimpleOne What is "pure python"? why is <code>itertools.groupby</code> not "pure python" ?</span>
<span class="comment-copy"><code>itertools</code> is as pythonic as it gets. It is not quite pure Python (lots of C implementation under the hood), but the documentation contains an (almost) equivalent Python implementation for most functions (<a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> included), if you insist on it being functionally the same but slower.</span>
<span class="comment-copy">@SimpleOne, Since you are new to Python: my advice is to lookup <code>itertools.groupby</code> (there are hundreds of examples on SO &amp; elsewhere), <i>try and implement</i> a solution yourself. If &amp; when you get stuck, come back and show what you've done / why you got stuck. That way, not only will you learn more, but other users might find the Q&amp;A helpful.</span>
<span class="comment-copy">Thanks Niklas. Seems my query has an issue. I should rephrase it: Step1: Group by second column. Step 2: get the tag which length is just less than the max length of that group</span>
<span class="comment-copy">I don't understand what you want. Can you privide a short example illustrating the output of these two steps?</span>
<span class="comment-copy">Step1: Group by. This should return   ['/MYDATA/FILE/XT/ROW/STATUS']  [/MYDATA/FILE/XV/ROW/CURRENCY_CODE]  [/MYDATA/FILE/XV/ROW/EXCESS_AMOUNT] [/MYDATA/FILE/XV/ROW/USD_EQUIVALENT]        Step 2: Get the tag where length of tag is just less than the max of each group. For group  [/MYDATA/FILE/XV/ROW/CURRENCY_CODE] should return   ['MYDATA_FILE_XV_ROW'] .similarly for group [/MYDATA/FILE/XT/ROW/STATUS]   it should return  ['MYDATA_FILE_XT_ROW']  ..and so on</span>
<span class="comment-copy">Looking at your example data tells me that you might be looking for every tag that ends with <code>'ROW'</code>: <code>output = [line[0] for line in data if line[0][-3:] == 'ROW']</code></span>
<span class="comment-copy">Niklas, the snippet shared is a small snippet out of a huge part. ROW is the not the last tag in every case. We have to make it generic.</span>
