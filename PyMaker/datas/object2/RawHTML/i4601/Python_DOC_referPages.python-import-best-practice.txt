<div class="post-text" itemprop="text">
<p>I have a python module with several functions (say 10-20 functions). About 50% of those functions use an imported module (that is potentially 'heavy'). Is it 'better practice' to:</p>
<p>1- Call the 'import' function inside each of the 5 functions that require it.</p>
<p>or</p>
<p>2- Make that import in the module header - even though 50% of the functions in that module do NOT use the imported module.</p>
<p>I guess the larger question is what's the more 'pythonic' to decide whether imports are done within the module, within specific classes or within methods (functions) in those classes.</p>
</div>
<div class="post-text" itemprop="text">
<p>An import is only a <strong>name binding</strong>. It is better to import the whole module at once because it will search the module in your files only one time.</p>
<p>You can find more information here:
<a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/import.html</a></p>
</div>
<span class="comment-copy">For that you can check PEP8.</span>
<span class="comment-copy">the short answer is "it depends" are you calling those functions a lot?  because then it will import every time you call the function.</span>
<span class="comment-copy">Why is the imported module "heavy"? That seems like the anti-pattern to me.</span>
<span class="comment-copy">Why not make 2 modules, putting the 50% that require the import in the same module of course?</span>
<span class="comment-copy">What are you trying to optimize for?</span>
