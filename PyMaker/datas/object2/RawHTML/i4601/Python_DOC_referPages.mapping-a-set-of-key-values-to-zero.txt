<div class="post-text" itemprop="text">
<p>I am entering a set of keys through a for loop.</p>
<pre><code>myDict = {}

for i in range(n):
    team = input().split()

    t1 = team[0]
    t2 = team[1]
</code></pre>
<p>The values being entered (for n = 10) are:</p>
<pre><code>Truckers Trekkers 
Riders Bikers 
Wanderers Rovers 
Rovers Riders 
Trekkers Wanderers 
Bikers Truckers 
Wanderers Bikers 
Truckers Rovers 
Riders Trekkers 
Trekkers Wanderers 
</code></pre>
<p>I have been trying to get these names to be initialized to a value 0 in a dictionary while in the for loop. For instance, this is the end result I want:</p>
<pre><code>myDict = {'Truckers': 0, 'Trekkers':0,'Riders':0,'Bikers':0,'Wanderers':0,'Rovers':0}
</code></pre>
<p>To get this implemented, I tried using <code>myDict.fromkeys(t1,0)</code> and I keep getting a series of empty lists. Alternately, I have also tried creating an empty list (<code>lst</code>), and appending every value of <code>t1</code> to it: <code>lst.append(t1)</code> and creating another empty list <code>lst1</code> and appended 0 each time: <code>lst1.append(0)</code>. I then used:</p>
<pre><code>myDict = dict(zip(lst, lst1))
</code></pre>
<p>However, although this gets the result, it is only until after the for loop is finished. Is there any way to add the above input values to the dictionary while in the for loop? For example, as you enter 'Trucker' 'Trekkers', it gets added to myDict with a value of 0 (eg. <code>myDict = 'Trucker':0,'Trekkers':0</code>).</p>
<p>EDIT:</p>
<pre><code>Truckers Trekkers 87 75

Riders Bikers 80 90

Wanderers Rovers 53 81

Rovers Riders 47 51

Trekkers Wanderers 72 70

Bikers Truckers 25 30

Wanderers Bikers 40 35

Truckers Rovers 50 55

Riders Trekkers 61 45

Trekkers Wanderers 70 73
</code></pre>
<p>For each team in this league, the first team (t1) represents the home team and the second team represents the away team (t2), the 3rd and 4th arguments represent the points by each team respectively(i.e Truckers score is 87 and Trekkers score is 75). In this league, when a home team wins they are awarded 3000 points, when an away team wins - 3500 points, draw - 1000 and a loss - 50 points.</p>
<p>In the first case Truckers is the home team and they win (87 &gt; 75), so they awarded 3000 points plus the 87 points from the match. Also since Trekkers lost, the awarded 50 points (due to the loss) + 75 from the result of the match. So therefore, 3087 would be added to Truckers and 125 to the Trekkers. In the second case, Riders is the home team and Bikers is the away team since 80 &lt; 90. Bikers is awarded 3500 points + 90 (3590); and Riders is awarded 3000 + 80 (3080). So currently, the myDict would look like this: </p>
<pre><code>{'Truckers': 3087, 'Trekkers': 125, 'Bikers': 3590, 'Riders': 3080}
</code></pre>
<p>In the end, the dictionary should look this:</p>
<pre><code>{'Wanderers': 6836, 'Truckers': 6717, 'Bikers': 3750, 'Rovers': 7233, 'Riders': 6742, 'Trekkers': 3412}
</code></pre>
<p>Complete Code:</p>
<pre><code>if __name__ == '__main__':
    n = int(input())
    homeWin = 3000
    awayWin = 3500
    draw = 1000
    loss = 50
    myDict = {}
    lst = []
    lst1 = []
    myDict[t1] = 0
    myDict[t2] = 0

    for n_itr in range(n):
        team = input().split()

        t1 = team[0]
        t2 = team[1]
        p1 = int(team[2])
        p2 = int(team[3])        
        #lst.append(t1)
        #lst1.append(0)
        #myDict.update(dict.fromkeys(lst, 0))
        #myDict = dict(zip(lst, lst1))

        if p1 &gt; p2:
            myDict[t1] += p1 + homeWin
            myDict[t2] += p2 + loss
        elif p1 &lt; p2:
            myDict[t2] += p2 + awayWin
            myDict[t1] += p1 + loss
        elif p1 == p2:
            myDict[t1] += t1 + draw
            myDict[t2] += t2 + draw 

print(myDict)
#print(max(myDict.items(), key=operator.itemgetter(1))[0])
#print(min(myDict.items(), key=operator.itemgetter(1))[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> can be used to keep track of these scores for you.</p>
<p>It removes the need to set starting scores at 0 for each team. It also removes the need to define keys before you run your algorithm.</p>
<p><strong>Solution</strong></p>
<pre><code>from collections import Counter

lst = ['Truckers Trekkers 87 75', 'Riders Bikers 80 90',
       'Wanderers Rovers 53 81', 'Rovers Riders 47 51',
       'Trekkers Wanderers 72 70', 'Bikers Truckers 25 30',
       'Wanderers Bikers 40 35', 'Truckers Rovers 50 55',
       'Riders Trekkers 61 45', 'Trekkers Wanderers 70 73']

c = Counter()

for i in lst:

    home, away, home_score, away_score = i.split()

    home_score = int(home_score)
    away_score = int(away_score)

    if home_score &gt; away_score:
        c[home] += 3000 + home_score
        c[away] += 50 + away_score
    elif away_score &gt; home_score:
        c[home] += 50 + home_score
        c[away] += 3500 + away_score
    elif home_score == away_score:
        c[home] += 1000 + home_score
        c[away] += 1000 + away_score
</code></pre>
<p><strong>Result</strong></p>
<pre><code>Counter({'Bikers': 3750,
         'Riders': 6742,
         'Rovers': 7233,
         'Trekkers': 3412,
         'Truckers': 6717,
         'Wanderers': 6836})
</code></pre>
<p><strong>Explanation</strong></p>
<ul>
<li><code>collections.Counter</code> acts like a simple counter for any keys which are provided, even if they have not been explicitly added.</li>
<li>Therefore, <code>c['MyTeam'] += 100</code> will add 100 to an existing score, or set <code>c['MyTeam'] = 100</code> if the key does not exist.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>you just need to add</p>
<pre><code>myDict[t1] = 0
myDict[t2] = 0
</code></pre>
<p>within your for loop</p>
</div>
<span class="comment-copy">You were almost doing the right thing with <code>fromkeys</code>, but that's an alternate-constructor class method you want to call on dict itself, not a method you want to call on an existing dict. Like this: <code>myDict = dict.fromkeys(lst, 0)</code>. Or, if you want to add on to an existing dict, <code>myDict.update(dict.fromkeys(list, 0))</code>.</span>
<span class="comment-copy">You could instead do this with a dict comprehension: <code>myDict = {key: 0 for key in lst}</code> or <code>myDict.update({key: 0 for key in lst})</code>. Or with an explicit loop: <code>for key in lst: myDict[key] = 0</code>.</span>
<span class="comment-copy">What does <code>0</code> represent? Is it a counter / running score of some sort? If it is, as I suspect, then <code>collections.Counter</code> or <code>collections.defaultdict</code> may be good choices.</span>
<span class="comment-copy">Have you tried myDict[t1] = 0, myDict[t2] = 0?</span>
<span class="comment-copy">@abarnert this works, yes but it doesn't really answer the second part of my question. I want to insert it into a dictionary for each string being inputted while in the for loop. This works after it has been completed</span>
