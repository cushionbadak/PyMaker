<div class="post-text" itemprop="text">
<p>I want to get all the modules imported from an arbitrary module <code>m</code>.
When <code>m</code> imports a module in the following way:</p>
<pre><code>from a.b import c
</code></pre>
<p>or:</p>
<pre><code>import a.b.c as c
</code></pre>
<p>(where <code>a</code> and <code>b</code> are packages, and <code>c</code> is a module)</p>
<p>The result of <code>dir(m)</code> would contain <code>c</code> (among other things).</p>
<p>However, when I use:</p>
<pre><code>import a.b.c
</code></pre>
<p>The result of <code>dir(m)</code> would contain <code>a</code>, and not <code>c</code>.</p>
<p>I also tried iterating over <code>sys._getframe(1).f_locals.items()</code> after importing <code>m</code>, but got the same result.
How can I, having the object of <code>m</code> that imports <code>c</code> that way, know that it actually imported <code>c</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer"><code>ast</code> module</a> to parse the module's source code and extract imports:</p>
<pre><code>import sys
import ast
import inspect


def find_imports(module):
    code = inspect.getsource(module)
    tree = ast.parse(code)

    imports = set()
    for node in ast.walk(tree):
        if isinstance(node, ast.Import):
            imports.update(alias.name for alias in node.names)
        elif isinstance(node, ast.ImportFrom):
            imports.add(node.module)
            for alias in node.names:
                module_name = '{}.{}'.format(node.module, alias.name)
                if module_name in sys.modules:
                    imports.add(module_name)

    return imports
</code></pre>
<p>Keep in mind that this only works if the module's source is available as plain python code.</p>
<hr/>
<p>As an example, consider this module:</p>
<pre><code>from os.path import isfile
from importlib import util
import urllib.request as urlquest
import urllib.parse
import sys
</code></pre>
<p>The output for this module would be</p>
<pre><code>{'sys', 'urllib.request', 'os.path', 'importlib', 'importlib.util', 'urllib.parse'}
</code></pre>
<hr/>
<h1>Notes:</h1>
<ol>
<li>This code also catches imports in functions, not just imports in the global scope.</li>
<li>If the code performs an import like <code>from module import submodule</code>, <code>"module.submodule"</code> will appear in the output. However, if the code performs an import like <code>from module import non_module</code>, only <code>"module"</code> will appear in the output.</li>
</ol>
</div>
<span class="comment-copy">Not very clear that do you exactly want, if c is a module then c is the module itself, anyway depends of your project structure and the content of <code>__init__.py</code> of each package</span>
<span class="comment-copy">Sorry, let me clarify: I want to get all the imported modules from an arbitrary module <code>m</code>. Now if <code>m</code> imported <code>c</code> that way (<code>import a.b.c</code>), I won't get <code>c</code> by iterating over <code>dir(m)</code>. And suppose that I don't know that <code>c</code> is inside <code>a.b</code> - how can I get it?</span>
<span class="comment-copy">Thanks a lot, it solves my problem. But note that it fails when imports are done from within functions (which is really not good practice, but it is done a few times throughout my project's code...)</span>
<span class="comment-copy">@ezer1337 Code updated; imports in functions should work now.</span>
