<div class="post-text" itemprop="text">
<p>I'm in the process of learning python, and I can't wrap my head around a piece of code in the book:</p>
<pre><code>def find_value(List, value):

    for i in range(len(List)):
        if List[i] == value:
            return i

    return -1
</code></pre>
<p>I've tried running the code, and it returns the index if the value is in it, and returns -1 if it isn't, but what I don't understand is since the 'return -1' is outside the for loop, and if statement, should it not be run every time the code is executed?
Or does return only get processed once, the first time it is called?</p>
<p>I just want to make sure I understand this concept before moving on.
Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>No, you can have as many <a href="https://docs.python.org/3/reference/simple_stmts.html#the-return-statement" rel="nofollow noreferrer"><code>return</code></a> statements in as many places as you like:</p>
<pre><code>def function():
    ... # do something
    return 1
    return 
    return [3, 4, 5]
    return next(__import__('os').walk('.'))[-1:-1000000000:-1]
</code></pre>
<p>Though the important thing to keep in mind that <em>only the first <code>return</code> that your function encounters will count</em>, and anything else that would've succeeded it is not touched. </p>
<p>In the function above, you'll get <code>1</code> as the result and nothing else. </p>
<p>This sort of "flow of control" is why you can even do weird stuff like this - </p>
<pre><code>def foo():
    return True
    whatIsThisIdontEven__somethingWeird.jpg  # would ordinarily throw RuntimeErrors anywhere else

print(foo())
# True
</code></pre>
<p>In your case, it entirely depends on your code flow at runtime, but you'll still end up encountering only one <code>return</code>, and consequently returning only once.</p>
<p>Note that one difference is in the case of try-except-finally, where the <code>return</code> in the <code>final</code> clause <em>always wins</em>.</p>
<pre><code>def function():
    try:
        ... # do something
        return 1
    except SomeException:
        ... # do something else
    finally:
        return 2
</code></pre>
<p>In the case of normal execution, you'll encounter <code>return 1</code> in <code>try</code>, but because of the semantics of the <code>finally</code> clause, you'd <em>still</em> end up returning 2. I believe this is the only exception.</p>
<p>Now, <a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do"><code>yield</code></a>, on the other hand, is a different matter...</p>
</div>
<div class="post-text" itemprop="text">
<p>Once the function sees a return statement, the function will end and return the variable in the return statement. So the rest of the function will not be executed once the function comes across a return statement.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The return statement causes your function to exit and hand back a
  value to its caller. The point of functions in general is to take in
  inputs and return something.</p>
<p>Keep in mind :  function return one at a time by memory .</p>
</blockquote>
<p>So when you start the loop and then 'if' condition goes true so function return and exit. </p>
<pre><code>if List[i] == value:
    return i
</code></pre>
<p>and if you have to return many items then don't return the output instead of store the output in a list and return that list at last .</p>
<pre><code>def find_value(List, value):

    return_list=[]

    for i in range(len(List)):
        if List[i] == value:
            return_list.append(i)


    return return_list
</code></pre>
<p>In you code you wanted two return so you can try conditional return like this:</p>
<pre><code>def find_value(List, value):

    return_list=[]

    for i in range(len(List)):
        if List[i] == value:
            return_list.append(i)


    if return_list:
        return return_list
    else:
        return -1

print(find_value([1,2,3,4,5,6],4))
</code></pre>
</div>
<span class="comment-copy">A function <i>ends</i> when it returns.</span>
<span class="comment-copy">Regarding the try/fail aspect - - is a <code>return</code> inside a try statement common? From your comment it seems like it's pointless and would (generally speaking) only be there by mistake or if you're learning.  Or is there a reason to use a <code>return</code> within a try even if the <code>finally</code> has one too?</span>
