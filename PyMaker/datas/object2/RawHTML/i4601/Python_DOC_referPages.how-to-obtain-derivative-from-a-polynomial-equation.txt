<div class="post-text" itemprop="text">
<p>I was doing my own method to solve the derivative of the polynomial problem just for fun. But I come up with a problem. I could not delete or remove <code>'*x**2'</code> from <code>array_1 = '3*x**3 + 2*x**2 + 3*x + 5'</code> to obtain an array like this; <code>array = [3, 2, 3, 5]</code>.</p>
<pre><code>array_1 = '3*x**3 + 2*x**2 + 3*x + 5'

def converter(array_1):
    array_1 = array_1.split(' + ')

    return str(array_1)

array = [5, 3, 2] # for testing ( I reversed order of an array.)

def derivative(array):
    new_array = []
    for x, elem in enumerate(array):
        z = x*elem
        new_array.append(z)
    return new_array[1:]



result = derivative(array)
print(result)
print(converter(array_1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>array</code> is just a string—which is nothing but a sequence of characters. So each <code>elem</code> is just going to be a single character. What you need to do is write a <em>parser</em>.</p>
<hr/>
<p>For something this simple, you could parse everything with just string operations, or <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions</a> if you know how to use them or want to read a tutorial on them. Here's an example with just the methods of the <code>str</code> class:</p>
<pre><code>s = '3*x**3 + 2*x**2 + 3*x + 5'
for term in s.split('+'):
    coefficient, _, factor = term.partition('*')
    variable, power = factor.partition('**')
    do_something_with(coefficient, variable, power)
</code></pre>
<p>(Of course you probably want to turn the <code>coefficient</code> and <code>power</code> into numbers in that <code>do_something_with</code> code, but that's easy; just use <code>int</code> or <code>float</code>.)</p>
<p>But this will be somewhat brittle. It'll handle the exact format you have (as long as <code>do_something_with</code> can deal with extra whitespace, and with empty strings for <code>variable</code> and <code>power</code>—just calling <code>int</code> or <code>float</code> can handle the former, but not the latter). But if you try it with, say, <code>3 * x**3 + 2 * x**2 + 3 * x + 5</code>, it will fail.</p>
<hr/>
<p>A better option is to use a parsing or parser-generating library. There's a bit of a learning curve, but it's worth doing. For example, <a href="http://pythonhosted.org/pyparsing/" rel="nofollow noreferrer"><code>pyparsing</code></a> is a reasonably easy one to learn, there are some great tutorials out there for it, and it comes with extensive <a href="http://pyparsing.wikispaces.com/Examples" rel="nofollow noreferrer">examples</a>, one of which I think is pretty close to what you're doing.</p>
<hr/>
<p>Finally, your format happens to be a subset of Python syntax. You could take advantage of that by using <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer"><code>ast</code></a>, the Python parser that comes with Python. However, this isn't exactly a novice-friendly option.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is what I did. I know it is not functional. I'll try to improve it. </p>
<pre><code>array_1 = '3*x**3 + 2*x**2 + 3*x + 5'

def converter(array_1):
    array_1 = array_1.split(' + ')
    print(array_1)

    new_array = []
    for x in array_1:
        new_array.append(x[-0])

    return new_array

array = [5, 3, 2] # for testing

def derivative(array):
    new_array = []
    for x, elem in enumerate(array):
        z = x*elem
        new_array.append(z)
    return new_array[1:]



result = derivative(array)
print(result)
print(converter(array_1))
</code></pre>
<p>Output: </p>
<pre><code>[3, 4]
['3*x**3', '2*x**2', '3*x', '5']
['3', '2', '3', '5']
</code></pre>
</div>
<span class="comment-copy">how about using regular expressions so that take a character that is before + or - signs?</span>
<span class="comment-copy">It makes sense but I should not lose coefficients</span>
