<div class="post-text" itemprop="text">
<p>I know <code>@</code> is for decorators, but what is <code>@=</code> for in Python? Is it just reservation for some future idea?</p>
<p>This is just one of my many questions while reading <code>tokenizer.py</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3.5/reference/expressions.html#binary-arithmetic-operations" rel="noreferrer">the</a> <a href="https://docs.python.org/3.5/reference/simple_stmts.html#augmented-assignment-statements" rel="noreferrer">documentation</a>:</p>
<blockquote>
<p>The <code>@</code> (at) operator is intended to be used for matrix multiplication. No builtin Python types implement this operator.</p>
</blockquote>
<p>The <code>@</code> operator was introduced in Python 3.5. <code>@=</code> is matrix multiplication followed by assignment, as you would expect. They map to <code>__matmul__</code>, <code>__rmatmul__</code> or <code>__imatmul__</code> similar to how <code>+</code> and <code>+=</code> map to <code>__add__</code>, <code>__radd__</code> or <code>__iadd__</code>.</p>
<p>The operator and the rationale behind it are discussed in detail in <a href="http://www.python.org/dev/peps/pep-0465/" rel="noreferrer">PEP 465</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>@=</code> and <code>@</code> are new operators introduced in Python <strong>3.5</strong> performing <strong>matrix multiplication</strong>. They are meant to clarify the confusion which existed so far with the operator <code>*</code> which was used either for element-wise multiplication or matrix multiplication depending on the convention employed in that particular library/code. As a result, in the future, the operator <code>*</code> is meant to be used for element-wise multiplication only. </p>
<p>As explained in <a href="https://www.python.org/dev/peps/pep-0465/" rel="noreferrer">PEP0465</a>, two operators were introduced:</p>
<ul>
<li>A new binary operator <code>A @ B</code>, used similarly as <code>A * B</code></li>
<li>An in-place version <code>A @= B</code>, used similarly as <code>A *= B</code></li>
</ul>
<h3>Matrix Multiplication vs Element-wise Multiplication</h3>
<p>To quickly highlight the difference, for two matrices:</p>
<pre><code>A = [[1, 2],    B = [[11, 12],
     [3, 4]]         [13, 14]]
</code></pre>
<ul>
<li><p>Element-wise multiplication will yield:</p>
<pre><code>A * B = [[1 * 11,   2 * 12], 
         [3 * 13,   4 * 14]]
</code></pre></li>
<li><p>Matrix multiplication will yield:</p>
<pre><code>A @ B  =  [[1 * 11 + 2 * 13,   1 * 12 + 2 * 14],
           [3 * 11 + 4 * 13,   3 * 12 + 4 * 14]]
</code></pre></li>
</ul>
<h3>Usage in Numpy</h3>
<p>So far, Numpy used the following convention:</p>
<ul>
<li><p>the <code>*</code> operator (and <a href="http://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html#arithmetic-and-comparison-operations" rel="noreferrer">arithmetic operators</a> in general) were defined as element-wise operations on <a href="http://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html" rel="noreferrer">ndarrays</a> and as matrix-multiplication on <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.matrix.html" rel="noreferrer">numpy.matrix</a> type.</p></li>
<li><p><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html" rel="noreferrer">method/function</a> <code>dot</code> was used for matrix multiplication of ndarrays</p></li>
</ul>
<p>Introduction of the <code>@</code> operator makes the code involving matrix multiplications much easier to read. PEP0465 gives us an example:</p>
<pre><code># Current implementation of matrix multiplications using dot function
S = np.dot((np.dot(H, beta) - r).T,
            np.dot(inv(np.dot(np.dot(H, V), H.T)), np.dot(H, beta) - r))

# Current implementation of matrix multiplications using dot method
S = (H.dot(beta) - r).T.dot(inv(H.dot(V).dot(H.T))).dot(H.dot(beta) - r)

# Using the @ operator instead
S = (H @ beta - r).T @ inv(H @ V @ H.T) @ (H @ beta - r)
</code></pre>
<p>Clearly, the last implementation is much easier to read and interpret as an equation.</p>
</div>
<div class="post-text" itemprop="text">
<p>@ is the new operator for Matrix Multiplication added in Python3.5</p>
<p>Reference: <a href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-465" rel="nofollow noreferrer">https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-465</a></p>
<p>Example</p>
<pre><code>C = A @ B
</code></pre>
</div>
<span class="comment-copy">See cset <a href="https://hg.python.org/cpython/rev/c553d8f72d65" rel="nofollow noreferrer">c553d8f72d65</a> (<a href="https://github.com/python/cpython/commit/c8555769ea6ca6ce7718172d8e9830593ac2ae94" rel="nofollow noreferrer">GitHub mirror...easier to read</a>) in the CPython repo.</span>
<span class="comment-copy">SymbolHound is a search-engine which can search on punctuation symbols. However <a href="http://symbolhound.com/?q=%40%3D+python" rel="nofollow noreferrer">searching on @= python</a> doesn't currently return relevant results, because Python 3.5 documentation contains '@' but not an example of '@=' anywhere. I sent SH a message to help improve that. Python doc could improve too.</span>
<span class="comment-copy">That explains why it's in the latest version of tokenizer.py but not the 3.4 docs.</span>
<span class="comment-copy">This is covered in 3.5's docs - <a href="https://docs.python.org/3.5/reference/simple_stmts.html#augmented-assignment-statements" rel="nofollow noreferrer">docs.python.org/3.5/reference/…</a> and <a href="https://docs.python.org/3.5/reference/expressions.html#binary-arithmetic-operations" rel="nofollow noreferrer">docs.python.org/3.5/reference/…</a></span>
<span class="comment-copy">Does this have conflict with Python decorators? This is not implemented in Python 2.n, right?</span>
<span class="comment-copy">This does not conflict decorators, because decorators may never be preceded by an expression, and binary operators must always be preceded by an expression.</span>
<span class="comment-copy">Just for clarification: from your first example, we could think that <code>@</code> has been implemented for <code>list</code>, which is not the case.</span>
<span class="comment-copy"><code>@</code> is associated with <code>np.matmul</code>, not <code>np.dot</code>. The two are similar but not the same.</span>
