<div class="post-text" itemprop="text">
<pre><code>class parent:
    def fun1(self):
        print("foo")

    fun2 = fun1

class child(parent):
    def fun1(self):
        print("bar")

child().fun2()
</code></pre>
<p>This code outputs "foo". I'm pretty sure I understand why this is happening, but I'm wondering if there is a straightforward way to implement what I want (inheritable aliases that behave according to MRO, so it outputs "bar") or a reason why this is bad programming practice.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no way to <em>directly</em> do what you want. </p>
<p>To understand why, you need to understand the way method lookup works. It's explained in detail in <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">the Descriptor HOWTO</a>, and I tried to write a less expert-level explanation <a href="http://stupidpythonideas.blogspot.com/2013/06/how-methods-work.html" rel="nofollow noreferrer">here</a>, so I'll assume you read both of those and just show the effects:</p>
<pre><code>&gt;&gt;&gt; child.fun1
&lt;function __main__.child.fun1&gt;
&gt;&gt;&gt; child.fun2
&lt;function __main__.parent.fun1&gt;
&gt;&gt;&gt; child().fun2
&lt;bound method parent.fun1 of &lt;__main__.child object at 0x10b735ba8&gt;&gt;
</code></pre>
<p>Notice that <code>child.fun2</code> is <code>parent.fun1</code>, not <code>child.fun1</code>. Which explains why <code>child().fun2</code> ends up as a bound method around <code>parent.fun1</code>, even though the <code>self</code> ends up as a <code>child</code> instance. Why? Well, obviously <code>fun2</code> is not in <code>child.__dict__</code> (or we wouldn't need an MRO). And in <code>parent.__dict__</code>, it can't be anything but <code>parent.fun1</code>.</p>
<p>So, what are the workarounds?</p>
<p>You could make <code>fun2</code> into a <code>property</code> that forwards to <code>fun2</code>, as Patrick Haugh suggested. Or you can just do this:</p>
<pre><code>def fun2(self):
    return self.fun1()
</code></pre>
<p>This solution has the benefit of being dead simple—anyone who can Python will understand why it works.</p>
<p>But Patrick's solution has the advantage of making not just <code>child().fun2()</code>, but also <code>child().fun2</code> (as an object you can pass around, compare for identity, etc.) work the way you want it to.</p>
<hr/>
<p>Meanwhile, there is an idiom closely related to what you're asking for, where a set of public methods that you don't expect to override call a "protected" implementation method that you do. For example, a simple 1D array-math class might do this:</p>
<pre><code>def _math(lhs, rhs, op):
    # not actually a useful implementation...
    return [op(x, y) for x, y in zip(lhs, rhs)] 
def __add__(self, other):
    return self._math(other, add)
def __radd__(self, other):
    return self._math(other, add)
# etc.
</code></pre>
<p>And now there's no asymmetry between <code>__add__</code> and <code>__radd__</code>, only between the "public" interface (<code>__add__</code> and <code>__radd__</code>) and the "protected" one (<code>_math</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a very straightforward way—that's perfectly OK:</p>
<pre><code>class Parent:
    def fun1(self):
        print("foo")

    def fun2(self):
        return self.fun1()


class Child(Parent):
    def fun1(self):
        print("bar")


Child().fun2()  # -&gt; bar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could have <code>fun2</code> be a property that returns <code>self.fun1</code></p>
<pre><code>class Parent:
    def fun1(self):
        print('foo')
    @property
    def fun2(self):
        return self.fun1

class Child(Parent):
    def fun1(self):
        print('bar')

Child().fun2()
# bar
</code></pre>
</div>
<span class="comment-copy">If you want it to work the other way too, with overrides of <code>fun2</code> also overriding <code>fun1</code>, things get even messier.</span>
