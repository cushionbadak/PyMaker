<div class="post-text" itemprop="text">
<p>I am trying to evaluate whether there is any elements in an object (series in the following example). I used <code>any</code> and I couldn't understand it's behavior. I am wondering why <code>len(s)&gt;=1</code> returns True while <code>any(s)</code> return False?</p>
<pre><code>import pandas as pd
import numpy as np
data = np.array([0])
s = pd.Series(data)
print(s)
print(len(s))
print(len(s)&gt;=1)
print(any(s))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The Python <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer">any</a> function is a short-circuiting boolean test of all elements of <strong>inside</strong> a <a href="https://docs.python.org/3/glossary.html#term-sequence" rel="nofollow noreferrer">sequence</a> or <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer">iterable</a>:</p>
<pre><code>&gt;&gt;&gt; any([0,0,0])
False
&gt;&gt;&gt; any([0,0,1])
True
</code></pre>
<p>The sequence itself is <code>True</code> unless it is empty or has 0 length:</p>
<pre><code>&gt;&gt;&gt; bool([]),bool('')
(False, False)
&gt;&gt;&gt; bool([0]),bool('0')
(True, True)
</code></pre>
<p>The Python function <a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow noreferrer">len</a> returns the length of a sequence and is completely unrelated to <code>any</code>. </p>
<p>Although you could force <code>len</code> to be like <code>any</code> I suppose:</p>
<pre><code>&gt;&gt;&gt; bool(len([e for e in [0,0,0] if bool(e)]))
False
&gt;&gt;&gt; bool(len([e for e in [0,0,1] if bool(e)]))
True
</code></pre>
<p>(An iterable, such as a generator, may not support <code>len</code> but <code>any</code> can still be used on these iterables.)</p>
<p>To answer your question of <em>I am wondering why len(s)&gt;=1 returns True while any(s) return False?</em> you need to understand <a href="https://docs.python.org/2.0/lib/truth.html" rel="nofollow noreferrer">Truth Value Testing in Python</a></p>
<p><strong>All objects</strong> are <code>True</code> in Python <strong>except</strong>:</p>
<ol>
<li><code>None</code>;</li>
<li><code>0</code> in a numeric object;</li>
<li>Empty containers, mappings or sequences (those where <code>len(obj)==0</code>);</li>
<li>A user written object that has defined its own notion of true or false.</li>
</ol>
<p>So <code>any(s)</code> is <code>False</code> because all the elements of the sequence <code>s</code> are <code>False</code> while <code>len(s)&gt;1</code> indicates that <code>s</code> contains objects and therefor <code>bool(s)</code> would be <code>True</code>.</p>
<p>This is way simpler, once understood, than other languages sense of 'truthiness', such as <a href="https://www.perlmonks.org/?node_id=495975" rel="nofollow noreferrer">Perl's</a></p>
<hr/>
<p>Pandas <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.any.html" rel="nofollow noreferrer">any</a> and <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.size.html" rel="nofollow noreferrer">len</a> methods mirror the Python built-in functions.</p>
</div>
<span class="comment-copy"><code>any()</code> returns True if any element of the iterable is True</span>
<span class="comment-copy"><a href="http://idownvotedbecau.se/noresearch/" rel="nofollow noreferrer">idownvotedbecau.se/noresearch</a>  What didn't you understand from the documentation for <code>len</code> and <code>any</code>?</span>
<span class="comment-copy"><code>any</code>'s behavior is confusing</span>
<span class="comment-copy"><code>any</code> and <code>all</code> are actually very useful. <code>any</code> is equivalent to placing <code>or</code> between every element in a sequence and <code>all</code> is equivalent to placing <code>and</code> between every element in a sequence. So <code>any([x,y,z])</code> is equivalent to <code>x or y or z</code> for logical tests.</span>
<span class="comment-copy">Ah it makes sense. Just wondering why a non-boolean value returns True? For example <code>any(['0'])</code> returns True.</span>
<span class="comment-copy">Because <code>'0'</code> is <code>True</code> in Python. Try <code>bool('0')</code> And note that <code>'0'</code> is not the same as <code>0</code>. All strings except <code>''</code> are <code>True</code> in Python. Almost all objects are True except a limited <a href="https://docs.python.org/2.0/lib/truth.html" rel="nofollow noreferrer">few</a></span>
<span class="comment-copy">Thanks for the clarification. Just one more questions on this: print(bool([0])) print(any([0])) : how these two are different?</span>
<span class="comment-copy">Look again at the link Truth Value Testing in Python. A sequence in only <code>False</code> if it is empty so <code>[0]</code> is True as a sequence so <code>bool([0])</code> is <code>True</code>. <code>any([0])</code> is testing the individual elements of the sequence, <code>bool(0)</code> is <code>False</code> so <code>any([0])</code> would be <code>False</code></span>
