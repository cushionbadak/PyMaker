<div class="post-text" itemprop="text">
<p>I have the following piece of code:</p>
<pre><code>def is_it_bad(word):
    try:
        res = next((item for item in all_names if str(word) in str(item["name"])))
    except:
        res = {'name':word, 'gender':2}
return res
</code></pre>
<p>It looks like It is blocking my async function that is calling <em>is_it_bad</em>. I'm not very familiar with async, is there any way to make this function non-blocking?</p>
<p>Function calling <em>is_it_bad</em>:</p>
<pre><code>async def get_genders_by_dict(res):
    letters = re.compile('[^a-zA-Z\ ]')
    fname = unidecode(str(letters.sub('', res['full_name'])).lower())
    fname = letters.sub('', res['username']).lower() + ' ' + fname + ' ' + fname.replace(' ', '')
    fname = fname.split(' ')    
    genders = []
    for j in fname:
        if len(j) &gt; 2:
            print(j)
            genders.append(is_it_bad_tst('_' + j + '_')['gender'])
            for k in genders:
                if int(k) != 2:
                    gender = k
                    print('GOOD: ', '_' + j + '_', gender)


async def get_genders_by_dict_main(loop):
    tasks = [get_genders_by_dict(res) for res in results]
    await asyncio.gather(*tasks)


loop = asyncio.get_event_loop()
loop.run_until_complete(get_genders_by_dict_main(loop))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>make this function non-blocking?</p>
</blockquote>
<p>In context of <code>asyncio</code> blocking function is a function that spends much time waiting for network-related operations (when you're requesting something from web) or a function that spends much CPU-time (long calculations).</p>
<p>Usually you can use <code>asyncio</code> to run network-related operations concurrently that allows to get results faster. <code>asyncio</code> can't somehow speedup CPU-related operations other than running them in <a href="https://docs.python.org/3/library/asyncio-eventloop.html#executor" rel="nofollow noreferrer">executor</a> (pool of processes) to get benefit of multiple cores. Latter however can be achieved with pure <a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor-example" rel="nofollow noreferrer">ProcessPoolExecutor</a>, without <code>asyncio</code> at all.</p>
<p>As far as I can tell your code is none of the described situations: <code>get_genders_by_dict</code> has nothing to do with network and it doesn't seem to contain long-running calculations that can be parallelized on multiple cores.
 Read <a href="https://stackoverflow.com/a/33399896/1113207">this answer</a> for detailed explanations.</p>
<p>Long story short, if I'm not missing something you don't need <code>asyncio</code> at all, there's just no sense to use it. Just make <code>get_genders_by_dict</code> a plain function and use it so.</p>
</div>
<div class="post-text" itemprop="text">
<p>What I see from your code is that you are doing CPU bounded call and it can block the reactor(loop), I think the better way to solve your problem is using multiprocessing or just using a wrapper to run the tasks in an executor(another process)</p>
<p><a href="https://docs.python.org/3/library/asyncio-eventloop.html#executor" rel="nofollow noreferrer">https://docs.python.org/3/library/asyncio-eventloop.html#executor</a></p>
<p><a href="https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor" rel="nofollow noreferrer">https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor</a></p>
</div>
<span class="comment-copy">Can you please add part of the code that is calling <code>is_it_bad</code> function.</span>
<span class="comment-copy">@SumitJha Sorry, added</span>
<span class="comment-copy">What python version are you using? What is all_names(is it a big sequence)?</span>
<span class="comment-copy">@fabiocerqueira python 3.6.4   all_names = [{'gender': 0.0, 'name': '<i>aaralyn</i>'},  {'gender': 1.0, 'name': '<i>aaric</i>'}] It has around 20 000 items</span>
<span class="comment-copy">I have tried with ThreadPoolExecutor - no difference in time compared to plain for loop. I believe I need an async generator function to replace current <i>is_it_bad</i></span>
