<div class="post-text" itemprop="text">
<p>Given a path such as <code>"mydir/myfile.txt"</code>, how do I find the file's absolute path relative to the current working directory in Python? E.g. on Windows, I might end up with:</p>
<pre><code>"C:/example/cwd/mydir/myfile.txt"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath("mydir/myfile.txt")
'C:/example/cwd/mydir/myfile.txt'
</code></pre>
<p>Also works if it is already an absolute path:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath("C:/example/cwd/mydir/myfile.txt")
'C:/example/cwd/mydir/myfile.txt'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the new Python 3.4 library <code>pathlib</code>. (You can also get it for Python 2.6 or 2.7 using <code>pip install pathlib</code>.) The authors <a href="http://www.python.org/dev/peps/pep-0428/#abstract">wrote</a>: "The aim of this library is to provide a simple hierarchy of classes to handle filesystem paths and the common operations users do over them."</p>
<p>To get an absolute path in Windows:</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; p = Path("pythonw.exe").resolve()
&gt;&gt;&gt; p
WindowsPath('C:/Python27/pythonw.exe')
&gt;&gt;&gt; str(p)
'C:\\Python27\\pythonw.exe'
</code></pre>
<p>Or on UNIX:</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; p = Path("python3.4").resolve()
&gt;&gt;&gt; p
PosixPath('/opt/python3/bin/python3.4')
&gt;&gt;&gt; str(p)
'/opt/python3/bin/python3.4'
</code></pre>
<p>Docs are here: <a href="https://docs.python.org/3/library/pathlib.html">https://docs.python.org/3/library/pathlib.html</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath('mydir/myfile.txt')
'C:\\example\\cwd\\mydir\\myfile.txt'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Better still, install the <a href="http://pypi.python.org/pypi/path.py/2.2" rel="noreferrer"><code>path.py</code></a> module, it wraps all the <code>os.path</code> functions and other related functions into methods on an object that can be used wherever strings are used:</p>
<pre><code>&gt;&gt;&gt; from path import path
&gt;&gt;&gt; path('mydir/myfile.txt').abspath()
'C:\\example\\cwd\\mydir\\myfile.txt'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Today you can also use the <code>unipath</code> package which was based on <code>path.py</code>: <a href="http://sluggo.scrapping.cc/python/unipath/" rel="noreferrer">http://sluggo.scrapping.cc/python/unipath/</a></p>
<pre><code>&gt;&gt;&gt; from unipath import Path
&gt;&gt;&gt; absolute_path = Path('mydir/myfile.txt').absolute()
Path('C:\\example\\cwd\\mydir\\myfile.txt')
&gt;&gt;&gt; str(absolute_path)
C:\\example\\cwd\\mydir\\myfile.txt
&gt;&gt;&gt;
</code></pre>
<p>I would recommend using this package as it offers <a href="http://sluggo.scrapping.cc/python/unipath/Unipath-current/README.html" rel="noreferrer">a clean interface to common os.path utilities</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Update for Python 3.4+ <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> that actually answers the question:</p>
<pre><code>from pathlib import Path

relative = Path("mydir/myfile.txt")
absolute = relative.absolute()  # absolute is a Path object
</code></pre>
<p>If you only need a temporary string, keep in mind that you can use <code>Path</code> objects with all the relevant functions in <a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer"><code>os.path</code></a>, including of course <a href="https://docs.python.org/3/library/os.path.html#os.path.abspath" rel="nofollow noreferrer"><code>abspath</code></a>:</p>
<pre><code>from os.path import abspath

absolute = abspath(relative)  # absolute is a str object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I prefer to use glob</p>
<p>here is how to list all file types in your current folder:</p>
<pre><code>import glob
for x in glob.glob():
    print(x)
</code></pre>
<p>here is how to list all (for example) .txt files in your current folder:</p>
<pre><code>import glob
for x in glob.glob('*.txt'):
    print(x)
</code></pre>
<p>here is how to list all file types in a chose directory:</p>
<pre><code>import glob
for x in glob.glob('C:/example/hi/hello/'):
    print(x)
</code></pre>
<p>hope this helped you</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
os.path.abspath(os.path.expanduser(os.path.expandvars(PathNameString)))
</code></pre>
<p>Note that <code>expanduser</code> is necessary (on Unix) in case the given expression for the file (or directory) name and location may contain a leading <code>~/</code>(the tilde refers to the user's home directory), and <code>expandvars</code> takes care of any other environment variables (like <code>$HOME</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>Module <code>os</code> provides a way to find abs path.</p>
<p><strong>BUT</strong> most of the paths in Linux start with <code>~</code> (tilde), which doesn't give a satisfactory result.</p>
<p>so you can use <code>srblib</code> for that.</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath('~/hello/world')
'/home/srb/Desktop/~/hello/world'
&gt;&gt;&gt; from srblib import abs_path
&gt;&gt;&gt; abs_path('~/hello/world')
'/home/srb/hello/world'
</code></pre>
<p>install it using <code>python3 -m pip install srblib</code></p>
<p><a href="https://pypi.org/project/srblib/" rel="nofollow noreferrer">https://pypi.org/project/srblib/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>if you are on a mac </p>
<pre><code>import os
upload_folder = os.path.abspath("static/img/users")
</code></pre>
<p>this will give you a full path:</p>
<pre><code>print(upload_folder)
</code></pre>
<p>will show the following path:</p>
<pre><code>&gt;&gt;&gt;/Users/myUsername/PycharmProjects/OBS/static/img/user
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case someone is using python and linux and looking for full path to file:</p>
<pre><code>&gt;&gt;&gt; path=os.popen("readlink -f file").read()
&gt;&gt;&gt; print path
abs/path/to/file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This <strong>always</strong> gets the right filename of the current script, even when it is called from within another script. It is especially useful when using <code>subprocess</code>.</p>
<pre><code>import sys,os

filename = sys.argv[0]
</code></pre>
<p>from there, you can get the script's full path with:</p>
<pre><code>&gt;&gt;&gt; os.path.abspath(filename)
'/foo/bar/script.py'
</code></pre>
<p>It also makes easier to navigate folders by just appending <code>/..</code> as many times as you want to go 'up' in the directories' hierarchy. </p>
<p>To get the cwd:</p>
<pre><code>&gt;&gt;&gt; os.path.abspath(filename+"/..")
'/foo/bar'
</code></pre>
<p>For the parent path:</p>
<pre><code>&gt;&gt;&gt; os.path.abspath(filename+"/../..")
'/foo'
</code></pre>
<p>By combining <code>"/.."</code> with other filenames, you can access any file in the system.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>filePath = os.path.abspath(directoryName)
filePathWithSlash = filePath + "\\"
filenameWithPath = os.path.join(filePathWithSlash, filename)
</code></pre>
</div>
<span class="comment-copy">Similar question: <a href="https://stackoverflow.com/questions/7165749/open-file-in-a-relative-location-in-python" title="open file in a relative location in python">stackoverflow.com/questions/7165749/â€¦</a></span>
<span class="comment-copy">Note: On most platforms, this is equivalent to calling the function <code>normpath()</code> as follows: <code>normpath(join(os.getcwd(), path))</code>. So if <code>mydir/myfile.txt</code> do not under <code>os.getcwd()</code>, the absolute path is <b>not the real path</b>.</span>
<span class="comment-copy">@coanor ? Without an explicit root, <code>mydir/myfile.txt</code> implicitly refers to a path inside the current working directory as is therefore equivalent to <code>./mydir/myfile.txt</code>. That might not be the path you intended to input, but it seems like the correct interpretation of the path as far as I can tell. Could you elaborate?</span>
<span class="comment-copy">@jpmc26 I don't exactly follow coanor, but I would say that (contrary to what I presumed), there is no linkage between the argument to the <code>abspath</code> function and a real file. You could give any pathname- non-existent files and directory heirarchies are fine- and abspath will simply resolve the bits of the path (including the parent directory "<code>..</code>" element) and return a string. This is just a string computed from the current directory; any correlation to an actual file is accidental, it seems. Try <code>os.path.abspath("/wow/junk/../blha/hooey")</code>. It works.</span>
<span class="comment-copy">@MikeS I'm honestly not sure why that would be unexpected behavior. It's absolute <i>path</i>, not absolute file or directory. If you want an existence check, call <code>os.path.exists</code>. To the contrary, systems like PowerShell that insist on the path existing with the standard path resolution function are a pain to use.</span>
<span class="comment-copy">@jpmc26 To assume that a path is just a string that looks like a pathname is not clear at all, and goes counter to how I've been thinking and speaking of pathnames for many years. I quote the Python 3 docs for abspath: "Return a normalized absolutized version of the pathname <i>path</i>." Not a"...version of the <i>string</i> <i>path</i>". A pathname, as defined by Posix, is "A string that is used to identify a file." The Python docs are explicit about <code>relpath</code>: "the filesystem is not accessed to confirm the existence or nature of <code>path</code>". If the argument here is obvious, why be explicit for <code>relpath</code>?</span>
<span class="comment-copy">Very helpful. Using <code>os.path.abspath()</code> gave me an error: <code>AttributeError: 'NoneType' object has no attribute 'startswith'</code>, using <code>Path().resolve()</code> does not with the same relative filepath. (Linux and Python3.4)</span>
<span class="comment-copy">Too bad they never got a proper filename abstraction module into the stdlib.</span>
<span class="comment-copy">@Torsten Marek: it's a sore and longstanding omission.</span>
<span class="comment-copy">They did now for Python 3.4: <code>pathlib</code>. See my answer in this thread.</span>
<span class="comment-copy">There are yypos in this answer. It should be <code>from path import Path</code> then <code>Path('mydir/myfile.txt').abspath()</code></span>
<span class="comment-copy">There are no typos, you may have been using a different <code>path</code> module.  The linked module uses a class named <code>path</code>.</span>
<span class="comment-copy">You seem to be answering a different question. It was not "How do I get a path?", but "an absolute path". One could apply the correct answer (<code>os.path.abspath()</code>) to whatever relative path <code>glob</code> provides for your first two cases ...</span>
<span class="comment-copy">The question was not, how to rename images or something like this. It was only asked for your 5th line <code>filePath = os.path...</code></span>
<span class="comment-copy">derM yes you are right, I was looking at something else when I posted that. I removed what is irrelevant to the question on this page.</span>
