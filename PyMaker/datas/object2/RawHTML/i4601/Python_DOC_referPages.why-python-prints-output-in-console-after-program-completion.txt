<div class="post-text" itemprop="text">
<p>This code:</p>
<pre><code>import time
for i in range(10):
    print(i)
    time.sleep(.5)
</code></pre>
<p>Causes my computer to hang for 5 seconds, and then print out 0-9, as opposed to printing a digit every half second.  Am I doing something wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#print"><code>print</code></a>, by default, prints to <code>sys.stdout</code> and that buffers the output to be printed, internally.</p>
<blockquote>
<p>Whether output is buffered is usually determined by file, but if the <code>flush</code> keyword argument is true, the stream is forcibly flushed.</p>
<p>Changed in version 3.3: Added the <code>flush</code> keyword argument.</p>
</blockquote>
<p>Quoting <a href="https://docs.python.org/3/library/sys.html#sys.stdout"><code>sys.stdout</code>'s documentation</a>,</p>
<blockquote>
<p>When interactive, standard streams are line-buffered. Otherwise, they are block-buffered like regular text files.</p>
</blockquote>
<p>So, in your case, you need to explicitly flush, like this</p>
<pre><code>import time
for i in range(10):
    print(i, flush=True)
    time.sleep(.5)
</code></pre>
<hr/>
<p>Okay, there is a lot of confusion around this buffering. Let me explain as much as possible.</p>
<p>First of all, if you are trying this program in a terminal, they do <strong>line buffering</strong> (which basically means, whenever you encounter a newline character, send the buffered data to <code>stdout</code>), by default. So, you can reproduce this problem in Python 2.7, like this</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; for i in range(10):
...     print i,
...     time.sleep(.5)
... 
</code></pre>
<p>And in Python 3.x,</p>
<pre><code>&gt;&gt;&gt; for i in range(10):
...     print(i, end='')
...     time.sleep(.5)
</code></pre>
<p>We pass <code>end=''</code> because, the default <code>end</code> value is <code>\n</code>, as per the <a href="https://docs.python.org/3/library/functions.html#print"><code>print</code>'s documentation</a>,</p>
<pre><code>print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
</code></pre>
<p>Since the default <code>end</code> breaks the line buffering, the data will be sent to <code>stdout</code> immediately.</p>
<p>Another way to reproduce this problem is to store the actual program given by OP in a file and execute with Python 3.x interpreter, you will see that the <code>stdout</code> internally buffers the data and waits till the program finishes to print.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>for i in range(10):
        sys.stdout.write('\r' + str(i))
        time.sleep(.5)
</code></pre>
<p>here <code>'/r'</code> is carriage return, it brings the cursor first place again. </p>
</div>
<span class="comment-copy">I don't know much python, but do you need to print a newline character to have the output printed to the console?</span>
<span class="comment-copy">no,  As I said, this does print the digits, just without a delay in between them.</span>
<span class="comment-copy">it working fine on my computer</span>
<span class="comment-copy">Working fine on mine too. Do you maybe have an indentation issue? For the record I'm using python3.4</span>
<span class="comment-copy">@Startec I am able to reproduce the problem and I have explained the solution in my answer, please check. Others, don't use the interactive shell, which is line-buffered, try writing the code in a file and execute it with the interpreter.</span>
<span class="comment-copy">@vks No it is not. I am able to reproduce the problem. Don't use the interactive shell, which is line-buffered, try writing the code in a file and execute it with the interpreter.</span>
<span class="comment-copy">@vks Because the interactive shell is line buffered, so you couldn't see the difference. It prints immediately.</span>
<span class="comment-copy">@vks That is exactly the point. The code in loop runs 10 times, and all the data written to <code>stdout</code> are buffered. So nothing gets printed for 5 seconds (10 * 0.5 seconds) and finally when the program exits, <code>stdout</code> is flushed.</span>
<span class="comment-copy">Let us <a href="http://chat.stackoverflow.com/rooms/71744/discussion-between-thefourtheye-and-vks">continue this discussion in chat</a>.</span>
