<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9763116/parse-a-tuple-from-a-string">Parse a tuple from a string?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>My situation is that I'm trying to convert an array of tuples in a string format into an array of tuples.</p>
<p>i.e. I want to go from:</p>
<pre><code>['(-109.080842,45.002073)','(-105.91517,45.002073)','(-109.080842,45.002073)']
</code></pre>
<p>to</p>
<pre><code>[(-109.080842,45.002073),(-105.91517,45.002073),(-109.080842,45.002073)]
</code></pre>
<p>The purpose of this is to be able to create a shapely Polygon.  It throws an error when the tuples are a string.  What is the best way to go from strings to actual tuple objects?</p>
</div>
<div class="post-text" itemprop="text">
<p><strike>They're literals, so</strike> you can safely evaluate them:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; L = ['(-109.080842,45.002073)','(-105.91517,45.002073)','(-109.080842,45.002073)']
&gt;&gt;&gt; [ast.literal_eval(x) for x in L]
[(-109.080842, 45.002073), (-105.91517, 45.002073), (-109.080842, 45.002073)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is the functional way with <code>ast.literal_eval</code>:</p>
<pre><code>from ast import literal_eval

lst = ['(-109.080842,45.002073)','(-105.91517,45.002073)','(-109.080842,45.002073)']

res = list(map(literal_eval, lst))

# [(-109.080842, 45.002073), (-105.91517, 45.002073), (-109.080842, 45.002073)]
</code></pre>
</div>
<span class="comment-copy">You can parse tuples of builtin Python objects with <code>ast.literal_eval</code>.</span>
<span class="comment-copy">But, before you run off and do thatâ€”why do you have reprs of tuples as strings in the first place? If you're storing data by writing it to a file that way, there are much better ways to do it.</span>
<span class="comment-copy">@abarnert Poor coding from someone else where they manipulated the string to get it in an odd format.  Turns out I can straight up just do the ast.literal_eval on the string returned from the postgres polygon type and everything works.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/expressions.html#literals" rel="nofollow noreferrer">They're actually not literals.</a> But <code>literal_eval</code> does work on them anyway.</span>
<span class="comment-copy">Hmm odd, when I printed my array of tuple strings after doing a ast.literal_eval it showed them as strings still, but it did work when passing it into the shapely Polygon.  Thanks!</span>
<span class="comment-copy">@abarnert  Huh.  TIL.</span>
