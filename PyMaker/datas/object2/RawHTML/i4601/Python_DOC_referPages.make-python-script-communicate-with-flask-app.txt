<div class="post-text" itemprop="text">
<p>I have two scripts that are running in loop independently: a simple python script that generates data</p>
<pre><code>myData=0
while True:
    myData = get_data() # this data is now available for Flask App
</code></pre>
<p>and the flask application that displays data</p>
<pre><code>from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world(myData):
    return str(myData)

app.run()
</code></pre>
<p>I wish to somehow connect the two scripts, so the application displays the data produced by the python script.</p>
<pre><code>myData=0
app = Flask(__name__)

@app.route('/')
def hello_world(myData):
    return str(myData)

app.run()  # does not return until server is terminated

while True:
    myData = get_data()
</code></pre>
<p>When I combine the scripts as shown above, I can see that the execution does not get to the while loop (past <code>app.run()</code> line) until I terminate the app.</p>
<p>I found a similar question <a href="https://stackoverflow.com/questions/12631305/using-a-python-script-written-with-flask-to-call-a-function-from-another-python">here</a>, but not not helpful, and another question <a href="https://stackoverflow.com/questions/47624567/python-flask-app-with-mqtt">here</a> that is identical to what I am trying to do, but it also does not give me any clue. I can not find any info that tells how to make a flask application to communicate with a separately running script. Here's a similar <a href="https://raspberrypi.stackexchange.com/questions/60145/have-a-running-script-a-website-that-interact">question</a> with no definite answer. Please, give me an insight how these two things should run together, or an example would be greatly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since your script keeps generating data indefinitely, I would suggest transforming it into a <a href="https://wiki.python.org/moin/Generators" rel="nofollow noreferrer">generator</a> and iterating over it from the web request handler:</p>
<pre><code>def my_counter():
    i = 0
    while True:
        yield i    # I'm using yield instead of return
        i = i + 1

my_counter_it = my_counter()

@app.route('/')
def hello_world():
    return str(next(my_counter_it))  # return next value from generator
</code></pre>
<p>You can also communicate with a long running separate process (external command):</p>
<pre><code>import subprocess

def my_counter():
    # run the yes command which repeatedly outputs y
    # see yes(1) or http://man7.org/linux/man-pages/man1/yes.1.html
    p = subprocess.Popen('yes', stdout=subprocess.PIPE)

    # the following can also be done with just one line: yield from p.stdout
    for line in p.stdout:
        yield line
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a function that will procedure the data, which can then be served on the route:</p>
<pre><code>def get_data():
  i = 0
  while i &lt; 1000:
    i += 1
  return str(i)

@app.route('/')
def hello_world(): 
   return get_data()
</code></pre>
</div>
<span class="comment-copy"><code>i</code> will be incremented to infinity, which will not allow it to be rendered as a string. Are you trying to display a listing of <code>range(n)</code>? i.e <code>[0, 1, 2, 3, 4, 5...]</code></span>
<span class="comment-copy">@Ajax1234 That was just a conceptual example. I have a python script that is running and generating data. Then I need a flask app to access that data somehow when user requests from the web interface.</span>
<span class="comment-copy">@Nazar, if it's just a "conceptual example" then make it stop after a while, say 10 steps. What about <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer"><code>subprocess.check_output</code></a>, would this be good for your use case?</span>
<span class="comment-copy">What is exactly what are you trying to do? The code from <a href="https://stackoverflow.com/revisions/49467581/4">revision 4</a> doesn't answer this, it's just some lines of code without much meaning.</span>
<span class="comment-copy">@CristianCiupitu I moved on and implemented a flask app in a thread of my main code. This seems to work fine so far, however, I am having trouble properly <a href="https://stackoverflow.com/questions/49469978/properly-terminate-flask-web-app-running-in-a-thread">terminating the app in the thread</a>.</span>
<span class="comment-copy">I just added the actual script. I think I run the web application in the <code>try</code> section, but I see that the entire script executes every second. And I can not terminate it using CTRL+C. Also the script and the app do not currently share the data, however, work fine if run separately.</span>
<span class="comment-copy">Is this even a good idea to merge the two scripts?</span>
<span class="comment-copy">@Nazar, then keep them separate. Generally speaking, it's good to split an application into smaller pieces.</span>
<span class="comment-copy">I agree, but how do I share a dynamically changing variable between the two? I would eventually run them as separate system processes in systemd.</span>
<span class="comment-copy">See the <code>Listener</code> and <code>Client</code> examples from <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a> module for an easy way to communicate between two Python programs.</span>
<span class="comment-copy">I probably can not do that since data generation should run constantly, not only when I call <code>get_data()</code> in fact the data is being collected from some other sources. I wish I had a more precise question, but I first need to know the proper approach of implementation.</span>
