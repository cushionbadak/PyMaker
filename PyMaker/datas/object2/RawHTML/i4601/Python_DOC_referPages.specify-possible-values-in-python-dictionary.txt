<div class="post-text" itemprop="text">
<p>I have a class that I use as a container for parameters:</p>
<pre><code>class Parameters:
    param1 = {'name': 'color', 'value': 'blue'}
    param2 = {'name': 'distance', 'value': 'far, far away'}
    .
    .
    .
</code></pre>
<p>Can I specify what values can be written to a parameter?
For example color can be only blue and red, and if I do this:</p>
<pre><code>params.param1['value'] = 'green'
</code></pre>
<p>it should fail.</p>
<p>In C++ I can create an enum and use it as a type, I guess similar functionality should be possible in Python too.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could subclass <code>dict</code> and add your controls there. Then define <code>param1 = ControlDict({...})</code>.</p>
<pre><code>class ControlDict(dict):
    def __init__(self, *args, **kwargs):
        self.permitted_vals = {'onekey': {1, 2, 3},
                               'value': {'blue', 'red'}}

    def update(self, *args, **kwargs):
        other = dict(args[0])
        for key in other:
            if other[key] not in self.permitted_vals[key]:
                raise ValueError("invalid value supplied for {0}".format(key))
            self[key] = other[key]


d = ControlDict({})

d.update({'value': 'blue'})
# works

d.update({'value': 'green'})
# ValueError: invalid value supplied for value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a descriptor.  The descriptor would be an attribute of the class accesible with <em>dot</em> notation.</p>
<pre><code>from weakref import WeakKeyDictionary

class RestrictedColor:
    """A descriptor that restricts values"""
    def __init__(self, default):
        self.value = default
        self.data = WeakKeyDictionary()

    def __get__(self, instance, owner):
        return self.data.get(instance, self.value)

    def __set__(self, instance, value):
        if value.lower() not in ('blue','red'):
            raise ValueError(f'{value} is not allowed')
        self.data[instance] = value                            

class Parameters:
    color = RestrictedColor('blue')
</code></pre>
<p>Usage:</p>
<pre><code>&gt;&gt;&gt; p = Parameters()
&gt;&gt;&gt; p.color
'blue'
&gt;&gt;&gt; p.color = 'orange'
Traceback (most recent call last):
  File "&lt;pyshell#17&gt;", line 1, in &lt;module&gt;
    p.color = 'orange'
  File "foo.py", line 40, in __set__
    raise ValueError(f'{value} is not allowed')
ValueError: orange is not allowed
&gt;&gt;&gt; p.color = 'red'
&gt;&gt;&gt; p.color
'red'
&gt;&gt;&gt; getattr(p, 'color')
'red'
&gt;&gt;&gt; 
</code></pre>
<hr/>
<p>If you need Parameters instances to be subscriptable:</p>
<pre><code>class BenignDescriptor:
    """A descriptor that accepts anything"""
    def __init__(self, default):
        self.value = default
        self.data = WeakKeyDictionary()
    def __get__(self, instance, owner):
        return self.data.get(instance, self.value)
    def __set__(self, instance, value):
        self.data[instance] = value                            

class Parameters:
    color = RestrictedColor('blue')
    distance = BenignDescriptor('far, far away')

    def __getitem__(self, item):
        return getattr(self, item)
    def __setitem__(self, item, value):
        return setattr(self, item, value)
</code></pre>
<p>Usage</p>
<pre><code>&gt;&gt;&gt; p = Parameters()
&gt;&gt;&gt; p['color']
'blue'
&gt;&gt;&gt; p.distance
'far, far away'
&gt;&gt;&gt; p['distance'] = 'close'
&gt;&gt;&gt; p['distance']
'close'
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">If you're asking <i>"does Python have an enum?"</i>, then did you try <a href="https://docs.python.org/3/library/enum.html#enum.Enum" rel="nofollow noreferrer"><code>enum.Enum</code></a>? In your case, though, a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a> might be a better bet for storing items that will all have the same two attributes. But the short answer is: no, a Python dictionary can contain any arbitrary keys; you'd have to create your own class to implement that.</span>
<span class="comment-copy">You can use &lt;b&gt;Enum&lt;/b&gt; library Link: <a href="https://stackoverflow.com/questions/36932/how-can-i-represent-an-enum-in-python/1695250#1695250" title="how can i represent an enum in python">stackoverflow.com/questions/36932/â€¦</a></span>
