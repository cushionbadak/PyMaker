<div class="post-text" itemprop="text">
<p>I have the following string:</p>
<pre><code>08 Jan 2018 08:45:30 +0100
</code></pre>
<p>which I would like to conert to a unix timestamp. I know how to convert a time from this answer <a href="https://stackoverflow.com/questions/9637838/convert-string-date-to-timestamp-in-python">Convert string date to timestamp in Python</a> , however this only describes how to do it if the name is given as a number like <code>01/12/1991</code>. Furthermore, I do not know how to include the timezoen (+0100) into the conversion.</p>
<p>For the month I would have come up with a look up table which is a workaround, and I thought there may be a better way to do this</p>
<p>Here is the code I came up with for that:</p>
<pre><code>lookup = {}


lookup['Jan'] = '01'
lookup['Feb'] = '02'
lookup['Mar'] = '03'
lookup['Apr'] = '04'
lookup['Mai'] = '05'
lookup['Jun'] = '06'
lookup['Jul'] = '07'
lookup['Aug'] = '08'
lookup['Sep'] = '09'
lookup['Okt'] = '10'
lookup['Nov'] = '11'
lookup['Dec'] = '12'

dates_to_convert = '08 Jan 2018 08:45:30 +0100'


dates_to_convert.replace(dates_to_convert.split()[1],lookup[dates_to_convert.split()[1]])

## Now continue with solution from linked answer...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you were to look at the <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer"><code>datetime.strptime()</code> documentation on patterns</a>, you'll see that the <code>%b</code> pattern matches abbreviated month names, and <code>%z</code> handles a timezone offset:</p>
<blockquote>
<p><code>%b</code>  Month as localeâ€™s abbreviated name.</p>
<p>[...]</p>
<p><code>%z</code>  UTC offset in the form +HHMM or -HHMM (empty string if the object is naive).</p>
</blockquote>
<p>Unless you set a locale, the default <code>C</code> locale matches US month names out of the box.</p>
<p>For your string, the pattern is <code>%d %b %Y %H:%M:%S %z</code>:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; dates_to_convert = '08 Jan 2018 08:45:30 +0100'
&gt;&gt;&gt; datetime.strptime(dates_to_convert, '%d %b %Y %H:%M:%S %z')
datetime.datetime(2018, 1, 8, 8, 45, 30, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can combine <code>datetime.strptime</code> to parse your string and <code>datetime.timestamp</code> to output a UNIX timestamp</p>
<p><a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime</a><br/>
<a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp</a></p>
<p>Something like this should work:</p>
<pre><code>from datetime import datetime

datetime.strptime('08 Jan 2018 08:45:30 +0100', '%d %b %Y %H:%M:%S %z').timestamp()
&gt;&gt;&gt; 1515397530.0
</code></pre>
<p>If you want the integer part only (seconds):</p>
<pre><code>timestamp = datetime.strptime('08 Jan 2018 08:45:30 +0100', '%d %b %Y %H:%M:%S %z').timestamp()
timestamp = int(timestamp)
&gt;&gt;&gt; 1515397530
</code></pre>
</div>
<span class="comment-copy">Do look at the <a href="https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior" rel="nofollow noreferrer">documentation for <code>datetime.strptime()</code></a> and you'll see there is a pattern matcher for abbreviated month names too.</span>
<span class="comment-copy">@Martijn Pieters thank you - but what about the timezone?</span>
<span class="comment-copy">Did you scan the table further down? :-)</span>
