<div class="post-text" itemprop="text">
<p>There is one nested list [[1, 1], [2, 2], [3, 3], [4,4]].</p>
<p>I would like to iterate the list by three slices. I belong to [0, 3], j=i-1, k=i-2</p>
<p>For example: </p>
<pre><code>     slice 1: [3, 3], [4, 4]
     slice 2: [2, 2], [3, 3]
     slice 3: [1, 1], [2, 2]
</code></pre>
<p>How can I do it?    </p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>s = [[1, 1], [2, 2], [3, 3], [4,4]]
new_s = {"slice {}".format(len(s)-i-1):[s[i], s[i+1]] for i in range(len(s)-1)}
</code></pre>
<p>Output:</p>
<pre><code>{'slice 1': [[3, 3], [4, 4]], 'slice 3': [[1, 1], [2, 2]], 'slice 2': [[2, 2], [3, 3]]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a> you can create that output like:</p>
<h3>Code:</h3>
<pre><code>new_data = list(zip(reversed(data[:-1]), reversed(data)))
</code></pre>
<h3>Test Code:</h3>
<pre><code>data = [[1, 1], [2, 2], [3, 3], [4, 4]]
new_data = list(zip(reversed(data[:-1]), reversed(data)))
print(new_data)
</code></pre>
<p>And if you want a dict from that:</p>
<pre><code>new_data = {'slice_{}'.format(i): d for i, d in
            enumerate(zip(reversed(data[:-1]), reversed(data)), 1)}
print(new_data)
</code></pre>
<h3>Results:</h3>
<pre><code>[([3, 3], [4, 4]), ([2, 2], [3, 3]), ([1, 1], [2, 2])]

{'slice_1': ([3, 3], [4, 4]), 'slice_2': ([2, 2], [3, 3]), 'slice_3': ([1, 1], [2, 2])}
</code></pre>
</div>
<span class="comment-copy">Can you clarify how you determine which elements should be shown on which line? What is <code>j</code> and <code>k</code> about?</span>
<span class="comment-copy">Welcome to SO. Unfortunately this isn't a discussion forum or tutorial service. Please take the time to read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and the other links on that page.  You should invest some time working your way through <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">the Tutorial</a>, practicing the examples. It will give you an introduction to the tools Python has to offer and you may even start to get ideas for solving your problem.</span>
<span class="comment-copy">You can get rid of one of the <code>reversed</code> calls by inverting, well, everything :) <code>new_data = list(reversed(zip(data, data[:-1])))</code>.</span>
<span class="comment-copy">@chepner, <code>TypeError: 'zip' object is not reversible</code></span>
<span class="comment-copy">You need an extra <code>list</code> wrapper for Python 3. <code>new_data = list(reversed(list(zip...))))</code>. (Which, admittedly, makes it a less exciting change.)</span>
<span class="comment-copy">But then you end up building an extra list.  Hmm..  So many possibilities.  Thanks for the feedback.</span>
<span class="comment-copy">Depending on what the OP wants, the <i>outer</i> list might not be necessary, e.g., <code>for x, y in reversed(list(zip(data, data[:-1])))</code>. The best answer will depend on what is actually needed. It's somewhat annoying that <code>reversed</code> doesn't work with an arbitrary iterator, although in principle I get why it doesn't.</span>
