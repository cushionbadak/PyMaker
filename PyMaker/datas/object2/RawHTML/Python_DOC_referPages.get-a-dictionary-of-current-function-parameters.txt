<div class="post-text" itemprop="text">
<p>I recently had to use a function conditionally dispatching tasks to other functions, with a lot of mandatory and optional named arguments (e.g. manipulating connection strings, spark connectors configs and so on), and it occurred to me that It would have been really much "cleaner" (or "pythonesque") to have a syntax allowing me to pass every arguments from a function to another similar to this :</p>
<pre><code>def sisterFunction(**kwargs) : # Doing things with a bunch of mandatory and optional args
  &lt;do various things/&gt;

def motherFunction(a,b,**kwargs) : 
  &lt;do various things/&gt;
  sisterFunction(**allArgs)
</code></pre>
<p>where allArgs would be a dictionary containing keys a,b, and everything in kwargs. This sounds like something python would be inclined to allow and ease but I can't seem to find something similar to a "super kwargs" implemented. Is there a straightforward way to do this ? Is there an obvious good reason it's not a thing ?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def sisterFunction(**kwargs):
    pass

def motherFunction(a, b, **kwargs):
    sisterFunction(a=a, b=b, **kwargs)
</code></pre>
<p><code>kwargs</code> in <code>sisterFunction</code> will contain <code>a</code> and <code>b</code> keys with corresponding values.</p>
<p><strong>UPDATE</strong></p>
<p>If you don't want to pass long list of function parameters via <code>a=a</code>, there is some workaround to get <code>allArgs</code>:</p>
<pre><code>def motherFunction(a, b, **kwargs):
    allArgs = locals().copy()
    allArgs.update(allArgs.pop('kwargs', {}))
    sisterFunction(**allArgs)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would probably go with just using <code>kwargs</code></p>
<pre><code>def sisterFunction(**kwargs):
    pass

def motherFunction(**kwargs):
    # use the values directly from 'kwargs'
    print(kwargs['a'])

    # or assign them to local variables for this function
    b = kwargs['b']

    sisterFunction(**kwargs)
</code></pre>
<p>This will probably be the option with the least code in your function signatures (the definitions of all the parameters to the function).</p>
<p>A <code>KeyError</code> will be raised if some parameters were not passed to the function and the function tries to use them.</p>
</div>
<span class="comment-copy"><code>allArsg = {'a': a, 'b': b, **kwargs}; sisterFunction(**allArgs)</code> ?</span>
<span class="comment-copy">@hansolo That's is in fact precisely what I'm trying to avoid. Because with a longer list of arguments it's rapidly becoming tedious. I feel like there should be a standard function returning a dictionary of current function's arguments.</span>
<span class="comment-copy">you could look into <code>inspect</code> module</span>
