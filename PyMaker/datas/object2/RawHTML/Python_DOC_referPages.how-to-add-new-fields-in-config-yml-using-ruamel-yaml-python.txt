<div class="post-text" itemprop="text">
<p>This is my YAML file (<code>input.yaml</code>):</p>
<pre><code>team_member:
  name: Max
  hobbies:
    - Reading

team_leader:
  name: Stuart
  hobbies:
    - dancing
</code></pre>
<p>I want to edit this YAML file to add more values in key 'hobbies', example:</p>
<pre><code>team_member:
  name: Max
  hobbies:
    - Reading
    - Painting

team_leader:
  name: Stuart
  hobbies:
    - Dancing
    - Fishing
</code></pre>
<p>I tried to implement the code <a href="https://stackoverflow.com/a/49767944">Anthon</a> to fit my situation but it didn't helped at all, because the indention level of that YAML file is different from mine.<br/>
Example:</p>
<pre><code>import sys
import ruamel.yaml

yaml = ruamel.yaml.YAML()
# yaml.preserve_quotes = True
with open('input.yaml') as fp:
    data = yaml.load(fp)
for elem in data:
    if elem['name'] == 'Stuart':
         elem['hobbies'] = ['Fishing']
         break  # no need to iterate further
yaml.dump(data, sys.stdout)
</code></pre>
<p>I get error "TypeError('string indices must be integers',)", I know this code might be completely wrong, but I am new to ruamel.yaml.</p>
<p>How to code this? </p>
</div>
<div class="post-text" itemprop="text">
<p>The thing missing form the error message displayed is the line number (I assume that it is 9). That points to the line </p>
<pre><code>    if elem['name'] == 'Stuart':
</code></pre>
<p>And if that doesn't give you a clue, the approach that I recommend in such cases is starting to add some <code>print</code> functions, so that you know what you are working on. The <code>for</code> loop looks like:</p>
<pre><code>for elem in data:
    print('elem', elem)
    if elem['name'] == 'Stuart':
         print('elem-&gt;hobbies', elem['hobbies'])
         elem['hobbies'] = ['Fishing']
</code></pre>
<p>this prints</p>
<pre><code> elem team_member
</code></pre>
<p>before the exception is thrown, and I hope that will make you realize your are not iterating over the <em>elem</em>ents (items) of a list, but over the <em>key</em>s of a dict (constructed from the root level mapping in your YAML). And the <em>value</em> associated with the key is the object having a key <code>name</code> and a key <code>hobbies</code>.</p>
<p>So change the variable <code>elem</code> to <code>key</code> to make clear what you're handling and then proceed to work with <code>value</code>, the value associated with that key instead of <code>elem</code> within that loop¹:</p>
<pre><code>for key in data:
    value = data[key]
    if value['name'] == 'Stuart':
         print('value-&gt;hobbies', value['hobbies'])
         value['hobbies'] = ['Fishing']
</code></pre>
<p>This gives:</p>
<pre><code>value-&gt;hobbies ['dancing']
team_member:
  name: Max
  hobbies:
  - Reading

team_leader:
  name: Stuart
  hobbies:
  - Fishing
</code></pre>
<p>So we got rid of the exception, but the result is not exactly what you want. The element <code>dancing</code> for the key 'hobbies' is gone, because you assign a new (list) value to that key, whereas what you should do is append a single item to the list. We can also get rid of the print function by now:</p>
<pre><code>for key in data:
    value = data[key]
    if value['name'] == 'Stuart':
         value['hobbies'].append('Fishing')
</code></pre>
<p>This will get you two items in the final sequence in the file. There is a few more things to address:</p>
<ul>
<li>the capitalization of <code>dancing</code> incorrect. To correct that, add a line handling the list if there is only one element</li>
<li>the code for the name <code>Max</code>, needs to be added (and that is why you need to get rid of the <code>break</code> in your code)</li>
<li>the empty line, is considered a comment on the last element of the first sequence, that comment needs to be moved</li>
<li>your indentation of sequences is non-default</li>
</ul>
<p>The final code would be like:</p>
<pre><code>from pathlib import Path
import ruamel.yaml

path = Path('input.yaml')
yaml = ruamel.yaml.YAML()
yaml.indent(sequence=4, offset=2)  # for the non-default indentation of sequences

data = yaml.load(path)
for key in data:
    value = data[key]
    if value['name'] == 'Stuart':
         if len(value['hobbies']) == 1:
             value['hobbies'][0] = value['hobbies'][0].capitalize()
         value['hobbies'].append('Fishing')
    elif value['name'] == 'Max':
         last_item_index = len(value['hobbies']) - 1
         value['hobbies'].append('Painting')
         comments = value['hobbies'].ca
         if not comments.items[last_item_index][0].value.strip():
             # move empty comment lines from previous last item to new last item
             comments.items[last_item_index + 1] = comments.items.pop(last_item_index)

yaml.dump(data, path)
</code></pre>
<p>Which gives something quite close to what you wanted to get</p>
<pre><code>team_member:
  name: Max
  hobbies:
    - Reading
    - Painting

team_leader:
  name: Stuart
  hobbies:
    - Dancing
    - Fishing
</code></pre>
<hr/>
<p>¹<sub>Alternative for the first two lines: <code>for key, value in data.items()</code></sub> </p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks Anthon your code worked I have to edit this code as follows:</p>
<pre><code>import sys
import ruamel.yaml
from pathlib import Path

yaml = ruamel.yaml.YAML()
path = Path('input.yaml')
yaml.indent(sequence=4, offset=2)  # for the non-default indentation of sequences
with open(path) as fp:
    data = yaml.load(fp)
for key in data:
    value = data[key]
    if value['name'] == 'Stuart':
         if len(value['hobbies']) == 1:
             value['hobbies'][0] = value['hobbies'][0].capitalize()
         value['hobbies'].append('Fishing')
    elif value['name'] == 'Max':
         last_item_index = len(value['hobbies']) - 1
         value['hobbies'].append('Painting')
         comments = value['hobbies'].ca
         if not comments.items[last_item_index][0].value.strip():
             # move empty comment lines from previous last item to new last item
             comments.items[last_item_index + 1] = comments.items.pop(last_item_index)
yaml.dump(data, path)
</code></pre>
</div>
<span class="comment-copy">Thanks Anthon, I tried your code and it gets executed completely but my yaml file is not getting edited. I have also tried adding these line in code:      out = Path('output.yaml')     out = sys.stdout     yaml.dump(data, out)</span>
<span class="comment-copy">Actually, I am using Visual Studio to run this code, the python console window shows the output as you showed above but the actual yaml file does not gets edited. I want to edit the same input.yaml file but just for testing I added out = Path('output.yaml') | out = sys.stdout | yaml.dump(data, out) , but didn't helped.</span>
<span class="comment-copy">There is no indication in your question that you want to write the original file., what you added doesn't work because the first assignment to out gets nullified by doing <code>out = sys.stdout</code>. If you leave that part out things of course work.</span>
<span class="comment-copy">I updated my answer to reflect that you want to dump the output back to <code>input.yaml</code>, and updated to use <code>Path</code>. Using <code>open(path)</code> is not good Python, use <code>path.open()</code> instead (or pass <code>path</code> in directly to load as I do). You are importing <code>sys</code> in your code, but are not using it.</span>
