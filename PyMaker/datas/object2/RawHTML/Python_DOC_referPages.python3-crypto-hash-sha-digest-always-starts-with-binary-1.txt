<div class="post-text" itemprop="text">
<p>I am working on a project where I am trying to create a very simple blockchain-based cryptocurrency. This is an oversimplified version of the way I try to hash a block object (obviously the fields of the <code>Block</code> class are much more complicated, but this is the main idea):</p>
<pre><code>from Crypto.Hash import SHA
import json
from collections import OrderedDict
from random import random

class Block(object):

    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def to_dict(self):
        d = OrderedDict({
            'x' : self.x,
            'y' : self.y,
            'z' : self.z
        })
        return d

    def json(self):
        return json.dumps(self.to_dict())

    def hash(self):
        return SHA.new(self.json().encode('utf8')).hexdigest()

# driver code to test hashing
while True:
    x, y, z = [random() for _ in range(3)]
    b = Block(x, y, z)
    if not bin(int(b.hash(), 16)).startswith('0b1'):
        break
</code></pre>
<p>The above driver program loops forever. The problem is that (regardless of the number and/or value of the fields) the hash ALWAYS starts with <code>0b1</code>, which messes with the whole idea of mining difficulty and proof-of-work. More importantly, though, this is not the expected behavior of a hashing function. What do I miss?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't zero pad the front of binary numbers by default, so the first digit of <em>any</em> binary number will be one.</p>
<pre><code>&gt;&gt;&gt; bin(1)
'0b1'
&gt;&gt;&gt; bin(2)
'0b10'
&gt;&gt;&gt; bin(3)
'0b11'
&gt;&gt;&gt; bin(8)
'0b1000'
</code></pre>
<p>If you want fixed with binary strings, use string formatting</p>
<pre><code>&gt;&gt;&gt; "{:04b}".format(1)
'0001'
&gt;&gt;&gt; "{:04b}".format(2)
'0010'
&gt;&gt;&gt; "{:04b}".format(8)
'1000'
&gt;&gt;&gt; "{:04b}".format(15)
'1111'
</code></pre>
<p>Otherwise, just use a binary and (<code>&amp;</code>) to check if the specific bit is set.</p>
<pre><code>&gt;&gt;&gt; bool(1 &amp; 0b1000)
False
&gt;&gt;&gt; bool(3 &amp; 0b1000)
False
&gt;&gt;&gt; bool(8 &amp; 0b1000)
True
&gt;&gt;&gt; bool(15 &amp; 0b1000)
True
</code></pre>
</div>
<span class="comment-copy">"...the first digit of any binary number will be one." Except for zero, naturally.</span>
<span class="comment-copy">Thank you very much! After reading your answer, I also found that <code>format(int(h, 16), '0256b')</code> will do the trick, if <code>h</code> is a hex representation of the hash (as a string).</span>
