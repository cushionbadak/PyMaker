<div class="post-text" itemprop="text">
<p>I'm working on unittesting some python3 code that calls sendmail on an <code>SMTP</code> class via a context manager and attempts to catch exceptions to log them.  I can successfully mock the <code>SMTP</code> class and do some checking on it in other tests (e.g. verifying that <code>send_message</code> was actually called), but I can't seem to get the method call to <code>send_message</code> on the class to raise an exception to log the error.</p>
<p>Code to be tested (from siteidentity_proxy_monitoring.py):</p>
<pre><code>def send_alert(message, email_address):
    with SMTP('localhost') as email:
        try:
            email.send_message(message)
        except SMTPException:
            # retry the send
            print('exception raised') # debugging statement
            try:
                email.send_message(message)
            except:
                logging.error(
                    'Could not send email alert to %s', email_address
                )
</code></pre>
<p>Unittest method:</p>
<pre><code>@unittest.mock.patch('siteidentity_proxy_monitoring.SMTP')
@unittest.mock.patch('siteidentity_proxy_monitoring.logging')
def test_logging_when_email_fails(self, mock_logger, mock_smtp):
    """
    Test that when alert email fails to send, an error is logged
    """
    test_print('Testing logging when email send fails')
    email_instance = mock_smtp.return_value
    email_instance.send_message.side_effect = SMTPException
    siteidentity_proxy_monitoring.send_alert(
        'test message',
        'email@example.com'
    )
    mock_logger.error.assert_called_with(
        'Could not send email alert to %s', 'email@example.com'
    )
</code></pre>
<p>Output from the test result:</p>
<pre><code>[TEST] ==&gt; Testing logging when email send fails
F
======================================================================
FAIL: test_logging_when_email_fails (__main__.TestSiteidentityMonitors)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/lib/python3.6/unittest/mock.py",line 1179, in patched
    return func(*args, **keywargs)
  File "tests/siteidentity_monitor_tests.py", line 108, in 
test_logging_when_email_fails
    'Could not send email alert to %s', 'email@example.com' 
  File "/lib/python3.6/unittest/mock.py", line 805, in assert_called_with
     raise AssertionError('Expected call: %s\nNot called' % (expected,))
AssertionError: Expected call: error('Could not send email alert to %s', 'email@example.com')
Not called

----------------------------------------------------------------------
Ran 4 tests in 0.955s

FAILED (failures=1)
</code></pre>
<p>I feel like I'm missing something related to the calls to <code>__enter__</code> and <code>__exit__</code>, but I can't quite seem to tease out why my patching doesn't seem to trigger the side effect where I expect it to.  Unfortunately, most of the examples and documentation I've come across don't quite go that in depth with mocking method calls within contexts (as far as I've understood them, anyway).</p>
</div>
<div class="post-text" itemprop="text">
<p>Got stuck on similar issue just now, this is how get around it:</p>
<ol>
<li>Put a <code>import pdb;pdb.set_trace()</code> before line <code>email.send_message(message)</code></li>
<li>Run your test.</li>
<li>When you get dropped into the PDB session, type <code>email.send_message</code> and you'll see something like <code>&lt;Mock name='mock_smtp().__enter__().send_message' id='...'&gt;</code>.</li>
<li>In your test case, replace all <code>()</code>s with <code>return_value</code>. In your case: <code>mock_smtp.return_value.enter.return_value.send_message.side_effect = SMTPException</code>.</li>
</ol>
</div>
<span class="comment-copy">There is an example of correctly mocking a context manager <a href="https://docs.python.org/3/library/unittest.mock.html#mocking-magic-methods" rel="nofollow noreferrer">in the <code>unittest.mock</code> docs</a>.</span>
<span class="comment-copy">Thanks @jonrsharpe, but it seems like the documentation points out how to mock the actual context manager call.  The problem I have is that I am concerned with method calls that happen <i>within</i> the context manager.  It could very well be my limited understanding of them, but I can't figure out how to descend in scope to get to the method called inside of them.</span>
<span class="comment-copy">What's the actual output you get, then?</span>
<span class="comment-copy">Added test output to the original question.</span>
