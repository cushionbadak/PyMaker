<div class="post-text" itemprop="text">
<p>I would like to inherit the <code>OrderedDict</code> class to set up a maximum length to the dict.</p>
<p>I did : </p>
<pre><code>from collections import OrderedDict

class limitedDict(OrderedDict):
    def __init__(self, length):
        OrderedDict.__init__(self)
        self.length = length
</code></pre>
<p>But now I don't see which function to overwrite to catch the "adding a key" event.
I Googled for a while without finding the answer. Even special functions are not clearly an answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the dunder method <a href="https://docs.python.org/3/reference/datamodel.html#object.__setitem__" rel="nofollow noreferrer"><code>__setitem__</code></a> as <a href="https://stackoverflow.com/questions/49274532/which-method-is-called-when-adding-a-key-to-a-dict/49274998#comment85551483_49274532">mentioned in the comments</a> by  <a href="https://stackoverflow.com/users/846892/ashwini-chaudhary">@AshwiniChaudhary</a>. You need to distinguish overwriting and setting a new key, though.</p>
<pre><code>from collections import OrderedDict

class limitedDict(OrderedDict):
    def __init__(self, length):
        OrderedDict.__init__(self)
        self.length = length

    def __setitem__(self, key, value):
        if key not in self and len(self) &gt;= self.length:
            raise RuntimeWarning("Dictionary has reached maximum size.")
            # Or do whatever else you want to do in that case
        else:
            OrderedDict.__setitem__(self, key, value)
</code></pre>
<p>Note that while the <code>update</code> method also allows adding new keys, it calls <code>__setitem__</code> under the hood, as <a href="https://stackoverflow.com/questions/49274532/which-method-is-called-when-adding-a-key-to-a-dict/49274998#comment85555472_49274998">mentioned in the comments</a>.</p>
<p>If the dictionary exceeds the maximum size you might want to <code>self.popitem(last=False)</code> until it matches the length (<code>last=False</code> for FIFO order, <code>last=True</code> for LIFO order, the default).</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/datamodel.html#object.__setitem__" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object.__setitem__</a></span>
<span class="comment-copy">seems to be correct insight, thanks !</span>
<span class="comment-copy">Note that your current <code>__init__</code> signature doesn't allow initializing the dict as <code>limitedDict(a=2, b=2)...</code>.</span>
<span class="comment-copy"><code>update</code> will eventually be calling <code>__setitem__</code> for items present in <code>other</code>, hence it is redundant. Secondly, <code>update</code> also works with iterables, not just dicts.</span>
<span class="comment-copy">@AshwiniChaudhary True.</span>
