<div class="post-text" itemprop="text">
<p>I have this string: <code>https://app.redretarget.com/sapp/ptag/jxy666.myshopify.com</code>.</p>
<p>How do I use Python Regular expression to get the character in the middle of the forward slash? </p>
<p>I want to Get: <code>['app.redretarget.com','sapp','ptag','jxy666.myshopify.com']</code></p>
<p>When I use:</p>
<pre><code>cmd = 'https://app.redretarget.com/sapp/ptag/jxy666.myshopify.com'
pin_url = re.compile(r'/(.*?)/{0,1}')
print pin_url.findall(cmd)
</code></pre>
<p>I get an error.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>split</code> by "/". I am using <code>filter</code> to remove empty elements in the list. </p>
<pre><code>string ='https://app.redretarget.com/sapp/ptag/jxy666.myshopify.com'
print filter(None, string.split("/"))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>['https:', 'app.redretarget.com', 'sapp', 'ptag', 'jxy666.myshopify.com']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>str.split</code> is good, but it gives you a few unwanted entries. You may consider modifying your regex a bit, to only get the relevant portions of your URL:</p>
<pre><code>&gt;&gt;&gt; re.findall('(?&lt;=/)[^/]+', cmd)
['app.redretarget.com', 'sapp', 'ptag', 'jxy666.myshopify.com']
</code></pre>
<p>Note that <code>https:</code> and the <code>''</code> empty string are not present.</p>
<p><strong>Details</strong></p>
<pre><code>(?&lt;=      # positive lookbehind 
/         # match should begin with a forward slash before it
)        
[^/]+     # match 1+ characters that are not forward slashes
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>instead of regex you could use <a href="https://docs.python.org/3/library/urllib.parse.html?highlight=urlparse#urllib.parse.urlparse" rel="nofollow noreferrer"><code>urllib.parse.urlparse</code></a> and <a href="https://docs.python.org/3/library/pathlib.html?highlight=pathlib%20path#basic-use" rel="nofollow noreferrer"><code>pathlib.Path</code></a>:</p>
<pre><code>from urllib.parse import urlparse
from pathlib import Path

cmd = 'https://app.redretarget.com/sapp/ptag/jxy666.myshopify.com'
parsed = urlparse(cmd)
parts = (parsed.netloc, ) + Path(parsed.path).parts[1:]
print(parts)  # ('app.redretarget.com', 'sapp', 'ptag', 'jxy666.myshopify.com')
</code></pre>
<p>note that <code>urlparse</code> could also parse more complex urls; the result of <code>urlparse</code> in your case is</p>
<pre><code>print(parsed)
# ParseResult(scheme='https', netloc='app.redretarget.com', 
#             path='/sapp/ptag/jxy666.myshopify.com', params='', query='',
#             fragment='')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd propose splitting twice</p>
<pre><code>cmd.split('//', 1)[1].split('/')

['app.redretarget.com', 'sapp', 'ptag', 'jxy666.myshopify.com']
</code></pre>
</div>
<span class="comment-copy">Is it me?  Or does this not match OP's desired output?</span>
<span class="comment-copy">Also, using <code>filter</code> with <code>None</code> seems a clumsy way to handle the <code>//</code>.</span>
