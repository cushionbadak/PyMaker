<div class="post-text" itemprop="text">
<p>For example there is some folder:</p>
<pre><code>.
├── file_a.py
├── file_b
│   └── __init__.py
└── file_b.py
</code></pre>
<p>where <code>file_a.py</code> has something like:</p>
<pre><code>from file_b import some_function
</code></pre>
<p>I know this is definitely not good practice, but what is the order of resolution behind?</p>
<p>i.e. How python decides which module to be imported for an "absolute import"?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure where (or whether) this information is in the documentation - a quick check in the <a href="https://docs.python.org/3/reference/import.html#importsystem" rel="noreferrer">import system docs</a> didn't turn it up - but <a href="https://www.python.org/dev/peps/pep-0420/" rel="noreferrer">PEP 420</a> says the following:</p>
<blockquote>
<p>While looking for a module or package named "foo", for each directory
  in the parent path:</p>
<ul>
<li>If <code>&lt;directory&gt;/foo/__init__.py</code> is found, a regular package is imported and returned.</li>
<li>If not, but <code>&lt;directory&gt;/foo.{py,pyc,so,pyd}</code> is found, a module is imported and returned. The exact list of extension varies by platform
  and whether the -O flag is specified. The list here is representative.</li>
<li>If not, but <code>&lt;directory&gt;/foo</code> is found and is a directory, it is recorded and the scan continues with the next directory in the parent
  path.</li>
<li>Otherwise the scan continues with the next directory in the parent path.</li>
</ul>
<p>If the scan completes without returning a module or package, and at
  least one directory was recorded, then a namespace package is created.</p>
</blockquote>
<p>So according to PEP 420, if a package and a non-package module are found in the same directory with the same name, the package wins.</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on @JonKiparsky 's suggestion, I dug through importlib a bit, and finally found <a href="https://github.com/python/cpython/blob/069b8d20be8018fbd49ed5aaf64c4caba311e48f/Lib/importlib/_bootstrap_external.py#L1233" rel="nofollow noreferrer"><code>importlib._bootstrap.FileFinder.find_spec</code></a>, which does indeed explicitly check for a directory before looking for valid files that fit the package name. Glad to see @user2357112 's answer, though, that this is supposed to be defined behavior, and isn't just happenstance.</p>
</div>
<div class="post-text" itemprop="text">
<p>I did a little experiment, made <code>somelib.py</code> and <code>somelib/__init__.py</code>
Then tried the following</p>
<pre><code>&gt;&gt;&gt; from somelib import foo
in somelib/__init__.py
&gt;&gt;&gt;
</code></pre>
<p>Evidently python prefers a directory-based module to a file-based one</p>
<p>As @scnerd points out, this could be accidental behavior, but it's what I'm seeing in the default implementation. </p>
<p>If you want to know how this happens, you would probably review <a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/__init__.py" rel="nofollow noreferrer">importlib</a> for the gruesome details</p>
</div>
<span class="comment-copy">The Python path?</span>
<span class="comment-copy">I can't find any definition of what the "right answer" should be, though... It seems entirely possible that Pypy, Jython, IronPython, etc. might coincidentally do it differently</span>
<span class="comment-copy">Good point, amended my answer to reflect this.</span>
