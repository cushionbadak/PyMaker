<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/89228/calling-an-external-command-in-python">Calling an external command in Python</a>
<span class="question-originals-answer-count">
                    56 answers
                </span>
</li>
</ul>
</div>
<p>I have a Python program, it generates a string, say fileName. In fileName I hold something like "video1.avi", or "sound1.wav". Then I make an os call to start a program <code>! program arg1 arg2</code>, where my fileName is arg2. How can I achieve that on the fly, without making the whole program return a single string (the fileName) and then pass it to the shell line? How can I make that during execution. The script executes in Jupyter.</p>
<p>P.S. I am looping and changing the file name and I have to run that script at every loop.  </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want your script to run some outside program, passing in an argument, the way to do that is the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code></a> module.</p>
<p>Exactly which function to call depends on what exactly do you want to do. Just start it in the background and ignore the result? Wait for it to finish, ignore any output, but check that it returned success? Collect output so you can log it? I'm going to pick one of the many options arbitrarily, but read the linked docs to see how to do whichever one you actually want.</p>
<pre><code>for thingy in your_loop:
    fileName = your_filename_creating_logic(thingy)
    try:
        subprocess.run(['program', 'arg1', fileName],
                       check=True)
        print(f'program ran on {filename} successfully')
    except subprocess.CalledProcessError as e:
        print(f'program failed on {filename} with #{e.returncode}')
</code></pre>
<p>Notice that I'm passing a list of arguments, with the program name (or full path) as the first one. You can throw in hardcoded strings like <code>arg1</code> or <code>--breakfast=spam</code>, and variables like <code>fileName</code>. Because it's a list of strings, not one big string, and because it's not going through the shell at all (at least on Mac and Linux; things are a bit more complicated on Windows, but mostly it "just works" anyway), I don't have to worry about quoting <code>filename</code> in case it has spaces or other funky characters.</p>
<p>If you're using Python 3.4 or 2.7, you won't have that <code>run</code> function; just change it to <code>check_call</code> (and without that <code>check=True</code> argument).</p>
</div>
<span class="comment-copy">add some code here</span>
<span class="comment-copy">If you use something like <code>subprocess.run(['program', 'arg1', filename])</code> you don't need to deal with string tokenization at all.</span>
<span class="comment-copy">Definitely a dup… but the canonical answer really should be updated for Python 3.5, given that 3.7 is about to come out…</span>
<span class="comment-copy">Nice answer. ^_^</span>
