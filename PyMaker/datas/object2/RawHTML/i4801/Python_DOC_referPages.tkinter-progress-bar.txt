<div class="post-text" itemprop="text">
<p>I looked through the internet and couldn't really get an answer, if I have a process that is heavy on CPU usage, and I would like to present a progress bar while it's running (so the program will not get in the state of "not responding") on another thread probably, how do I do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>The solution should be something like:<br/></p>
<p>You have at least 2 threads, <strong>threadA</strong> and <strong>threadB</strong>.<br/></p>
<ul>
<li><strong>ThreadA</strong> is the thread that calls <code>mainloop()</code> and where the progress bar lives.<br/></li>
<li><strong>ThreadB</strong> is the thread where your heavy process do his stuff.</li>
</ul>
<p>When every thing starts:<br/></p>
<ul>
<li><strong>ThreadB</strong> put a message in a shared queue.<br/>
<ul>
<li>(this way ThreadB tells ThreadA it is not in "not responding" state)</li>
</ul></li>
<li><strong>ThreadA</strong> get the message from the shared queue and updates the progress bar

<ul>
<li>(this way ThreadA tells the user that ThreadB is not in "not responding" state)</li>
</ul></li>
</ul>
<p>This is a very general solution pattern.<br/>
If you try to write down some code that implements this pattern, post it and I will try to help.</p>
<p>Here some reference: <br/></p>
<ul>
<li>for the threads: <a href="https://docs.python.org/3/tutorial/stdlib2.html#multi-threading" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/stdlib2.html#multi-threading</a></li>
<li>for the shared queue: <a href="https://docs.python.org/3/library/queue.html#module-queue" rel="nofollow noreferrer">https://docs.python.org/3/library/queue.html#module-queue</a></li>
</ul>
<p><strong>EDIT</strong></p>
<p>Here a complete example of the general solution.
I hope this helps.</p>
<pre><code>import tkinter as tk
from tkinter import ttk

import threading
import queue

import time

shared_queue = queue.Queue()

def thread1_main():
    tot_time = 5 # seconds

    elapsed_time = 0

    while(True):
        time.sleep(1)
        shared_queue.put("I'm working")
        elapsed_time += 1
        if(elapsed_time &gt; tot_time):
            break;

    shared_queue.put("task done")

def updates_progress_bar():
    try:
        msg = shared_queue.get(block=False)
    except queue.Empty:
        msg = None
    else:
        # do update the progress bar here
        delta = 1
        val = bar_value.get()+delta
        val = val if val &lt;= bar["maximum"] else 0
        bar_value.set(val)

    if(msg != "task done"):
        root.after(500, updates_progress_bar)
    else:
        print(msg)

if(__name__ == "__main__"):
    root = tk.Tk()
    root.wm_geometry("200x200")

    root.rowconfigure(0, weight=1)
    root.columnconfigure(0, weight=1)

    bar_value = tk.IntVar()
    bar = ttk.Progressbar(  root,
                            maximum=3, length=100, variable=bar_value)
    bar.grid(row=0, column=0, sticky="we", padx=5) 

    shared_queue = queue.Queue()
    thread1 = threading.Thread(target=thread1_main)
    thread1.deamon = True
    thread1.start()

    root.after(500, updates_progress_bar)

    root.mainloop()

    print("that's all folks")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a primitive progress bar implementation with an indefinite mode of operation. It does not run in a thread as it really should. If you integrate this in a thread that is NOT doing the heavy lifting, and send a stop message to this thread, then the process will stop. This example uses a timer to stop the progress bar, but you can use any event just as well.</p>
<pre><code>import tkinter as tk
from tkinter import ttk
import sys

class MyProgress(tk.Frame):

    def __init__(self, parent, **kwargs):
        tk.Frame.__init__(self, parent)
        self.pack()
        label = tk.Label(self, text="Progress:", anchor='w')
        label.pack(side='left')
        self.progress = ttk.Progressbar(self)
        for attribute,value in kwargs.items():
            try:
                self.progress[attribute] = value
            except:
                print("Attribute error:", attribute)
                print("Try one of:")
                print(self.progress.configure())
                sys.exit()
        self.progress.pack(side='left')
        self.running = False
        self.parent = parent

    def start(self):
        self.running = True
        self.increaseProgress()

    def stop(self):
        self.running = False
        print("End of Job")

    def increaseProgress(self):
        if not self.running:
            return
        self.progress['value'] += 1
        self.parent.after(100, self.increaseProgress)


if __name__ == '__main__':
    root = tk.Tk()
    app = MyProgress(root, mode='indeterminate', maximum=10, length=100, value=0)
    app.start()
    # Trigger a stop after 5 seconds
    root.after(5000, app.stop)
    root.mainloop()
</code></pre>
</div>
<span class="comment-copy">Should it be a progress bar? Or are you looking for some kind of graphical feedback so that the user knows the process is not in "not responding" state?</span>
<span class="comment-copy">I just think that a progress bar will be better looking rather than a message....</span>
<span class="comment-copy">The progress bar, as the name suggests, is meant to keep track of the "percentage"  of completion; This means that your process should have a way to compute how much work was done and how much work is to be done. Can your process calc this? Here is an example: If you have analyse 1000 files, you can use how much files was analysed and how much files has to be analysed.</span>
<span class="comment-copy">I think it doesn't, its loading a keras model and predicting on an image input which takes about 5 seconds. no way of making somehow a progress bar of it?</span>
<span class="comment-copy">Can your process give you some kind of feedback at regular intervals of time? Example: a feedback every second? If yes, you can use the progress bar as a loop progress bar (a progress bar that restart from 0% when it arrives at 100%, in a loop, if the work of the process is not completed)</span>
<span class="comment-copy">Sorry, but I don't thinks this is a proper solution. This progress bar works independently and does not tells the user if the "heavy process" is working or not. If the heavy process is in "not responding" state, this progress bar is lying to the user because it tells that the "heavy process is still working. The only moments this progress bar tells the true to the user is when the "heavy processes" starts and when it ends and sends the <code>stop</code> message to the progress bar.</span>
<span class="comment-copy">True. If you have a code problem, please show your code so that we can help you solve the problem. Without your effort displayed here, there's not much we can do. See <a href="https://stackoverflow.com/help/mcve">how to ask a question</a></span>
