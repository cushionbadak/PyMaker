<div class="post-text" itemprop="text">
<p>I have a string that holds a very long sentence without whitespaces/spaces. </p>
<pre><code>mystring = "abcdthisisatextwithsampletextforasampleabcd"
</code></pre>
<p>I would like to find all of the repeated substrings that contains minimum 4 chars. </p>
<p>So I would like to achieve something like this:</p>
<pre><code>'text' 2 times
'sample' 2 times
'abcd' 2 times
</code></pre>
<p>As both <code>abcd</code>,<code>text</code> and <code>sample</code> can be found two times in the <code>mystring</code> they were recognized as propely matched substrings with more than 4 char length. It's important that I am seeking repeated substrings, finding only existing english words is not a requirement. </p>
<p>The answers I found are helpful for finding duplicates in texts with whitespaces, but I couldn't find a proper resource that covers the situation when there are no spaces and whitespaces in the string. I would really appreciate if somebody could show me how this should be done the most efficient way. </p>
</div>
<div class="post-text" itemprop="text">
<p>This is in Python 2 because I'm not doing Python 3 at this time. So you'll have to adapt it to Python 3 yourself.</p>
<pre><code>#!python2

# import module
from collections import Counter

# get the indices
def getIndices(length):
    # holds the indices
    specific_range = []; all_sets = []

    # start building the indices
    for i in range(0, length - 2):

        # build a set of indices of a specific range
        for j in range(1, length + 2):
            specific_range.append([j - 1, j + i + 3])

            # append 'specific_range' to 'all_sets', reset 'specific_range'
            if specific_range[j - 1][1] == length:
                all_sets.append(specific_range)
                specific_range = []
                break

    # return all of the calculated indices ranges
    return all_sets

# store search strings
tmplst = []; combos = []; found = []

# string to be searched
mystring = "abcdthisisatextwithsampletextforasampleabcd"
# mystring = "abcdthisisatextwithtextsampletextforasampleabcdtext"

# get length of string
length = len(mystring)

# get all of the indices ranges, 4 and greater
all_sets = getIndices(length)

# get the search string combinations
for sublst in all_sets:
    for subsublst in sublst:
        tmplst.append(mystring[subsublst[0]: subsublst[1]])
    combos.append(tmplst)
    tmplst = []

# search for matching string patterns
for sublst in all_sets:
    for subsublst in sublst:
        for sublstitems in combos:
            if mystring[subsublst[0]: subsublst[1]] in sublstitems:
                found.append(mystring[subsublst[0]: subsublst[1]])

# make a dictionary containing the strings and their counts
d1 = Counter(found)

# filter out counts of 2 or more and print them
for k, v in d1.items():
    if v &gt; 1:
        print k, v
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's go through this step by step. There are several sub-tasks you should take care of:</p>
<ol>
<li>Identify all substrings of length 4 or more.</li>
<li>Count the occurrence of these substrings.</li>
<li>Filter all substrings with 2 occurrences or more.</li>
</ol>
<p>You can actually put all of them into a few statements. For understanding, it is easier to go through them one at a time.</p>
<p>The following examples all use</p>
<pre><code>mystring = "abcdthisisatextwithsampletextforasampleabcd"
min_length = 4
</code></pre>
<h2>1. Substrings of a given length</h2>
<p>You can easily get substrings by slicing - for example, <code>mystring[4:4+6]</code> gives you the substring from position 4 of length 6: <code>'thisis'</code>. More generically, you want substrings of the form <code>mystring[start:start+length]</code>.</p>
<p>So what values do you need for <code>start</code> and <code>length</code>?</p>
<ul>
<li><code>start</code> must...

<ul>
<li>cover all substrings, so it must include the first character: <code>start in range(0, ...)</code>.</li>
<li>not map to short substrings, so it can stop <code>max_length</code> characters before the end: <code>start in range(..., len(mystring) - max_length + 1)</code>.</li>
</ul></li>
<li><code>length</code> must...

<ul>
<li>cover the shortest substring of length 4: <code>length in range(min_length, ...)</code>.</li>
<li>not exceed the remaining string after <code>i</code>: <code>length in range(..., len(mystring) - i + 1))</code></li>
</ul></li>
</ul>
<p>The <code>+1</code> terms come from converting lengths (&gt;=1) to indices (&gt;=0).
You can put this all together into a single comprehension:</p>
<pre><code>substrings = [
    mystring[i:i+j]
    for i in range(0, len(mystring) - min_length + 1)
    for j in range(min_length, len(mystring) - i + 1)
]
</code></pre>
<h2>2. Count substrings</h2>
<p>Trivially, you want to keep a count for each substring. Keeping <em>anything</em> for each specific object is what <code>dict</code>s are made for. So you should use substrings as keys and counts as values in a <code>dict</code>. In essence, this corresponds to this:</p>
<pre><code>counts = {}
for substring in substrings:
    try:  # increase count for existing keys, set for new keys
         counts[substring] += 1
    except KeyError:
         counts[substring] = 1
</code></pre>
<p>You can simply feed your <code>substrings</code> to <code>collections.Counter</code>, and it produces something like the above.</p>
<pre><code>&gt;&gt;&gt; counts = collections.Counter(substrings)
&gt;&gt;&gt; print(counts)
Counter({'abcd': 2, 'abcdt': 1, 'abcdth': 1, 'abcdthi': 1, 'abcdthis': 1, ...})
</code></pre>
<p>Notice how the duplicate <code>'abcd'</code> maps to the count of 2.</p>
<h2>3. Filtering duplicate substrings</h2>
<p>So now you have your substrings and the count for each. You need to remove the non-duplicate substrings - those with a count of 1.</p>
<p>Python offers several constructs for filtering, depending on the output you want. These work also if <code>counts</code> is a regular <code>dict</code>:</p>
<pre><code>&gt;&gt;&gt; list(filter(lambda key: counts[key] &gt; 1, counts))
['abcd', 'text', 'samp', 'sampl', 'sample', 'ampl', 'ample', 'mple']
&gt;&gt;&gt; {key: value for key, value in counts.items() if value &gt; 1}
{'abcd': 2, 'ampl': 2, 'ample': 2, 'mple': 2, 'samp': 2, 'sampl': 2, 'sample': 2, 'text': 2}
</code></pre>
<h2>Using Python primitives</h2>
<p>Python ships with primitives that allow you to do this more efficiently.</p>
<ol>
<li><p>Use a generator to build substrings. A generator builds its member on the fly, so you never actually have them all in-memory. For your use case, you can use a generator expression:</p>
<pre><code>substrings = (
    mystring[i:i+j]
    for i in range(0, len(mystring) - min_length + 1)
    for j in range(min_length, len(mystring) - i + 1)
)
</code></pre></li>
<li><p>Use a pre-existing Counter implementation. Python comes with a <code>dict</code>-like container that counts its members: <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> can directly digest your substring generator. Especially in newer version, this is much more efficient.</p>
<pre><code>counts = collections.Counter(substrings)
</code></pre></li>
<li><p>You can exploit Python's lazy filters to only ever inspect one substring. The <code>filter</code> builtin or another generator generator expression can produce one result at a time without storing them all in memory.</p>
<pre><code>for substring in filter(lambda key: counts[key] &gt; 1, counts):
    print(substring, 'occurs', counts[substring], 'times')
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Script (explanation where needed, in comments):</p>
<pre><code>from collections import Counter

mystring = "abcdthisisatextwithsampletextforasampleabcd"
mystring_len = len(mystring)

possible_matches = []
matches = []

# Range `start_index` from 0 to 3 from the left, due to minimum char count of 4
for start_index in range(0, mystring_len-3):
    # Start `end_index` at `start_index+1` and range it throughout the rest of
    # the string
    for end_index in range(start_index+1, mystring_len+1):
        current_string = mystring[start_index:end_index]
        if len(current_string) &lt; 4: continue # Skip this interation, if len &lt; 4
        possible_matches.append(mystring[start_index:end_index])

for possible_match, count in Counter(possible_matches).most_common():
    # Iterate until count is less than or equal to 1 because `Counter`'s
    # `most_common` method lists them in order. Once 1 (or less) is hit, all
    # others are the same or lower.
    if count &lt;= 1: break
    matches.append((possible_match, count))

for match, count in matches:
    print(f'\'{match}\' {count} times')
</code></pre>
<p>Output:</p>
<pre><code>'abcd' 2 times
'text' 2 times
'samp' 2 times
'sampl' 2 times
'sample' 2 times
'ampl' 2 times
'ample' 2 times
'mple' 2 times
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Nobody is using <code>re</code>! Time for an answer [ab]using the regular expression built-in module ;)</p>
<pre><code>import re
</code></pre>
<h2>Finding all the maximal substrings that are repeated</h2>
<pre><code>repeated_ones = set(re.findall(r"(.{4,})(?=.*\1)", mystring))
</code></pre>
<p>This matches the longest substrings which have at least a single repetition after (without consuming). So it finds all disjointed substrings that are repeated while only yielding the longest strings.</p>
<h2>Finding all substrings that are repeated, including overlaps</h2>
<pre><code>mystring_overlap = "abcdeabcdzzzzbcde"
# In case we want to match both abcd and bcde
repeated_ones = set()
pos = 0

while True:
    match = re.search(r"(.{4,}).*(\1)+", mystring_overlap[pos:])
    if match:
        repeated_ones.add(match.group(1))
        pos += match.pos + 1
    else:
        break
</code></pre>
<p>This ensures that <em>all</em> --not only disjoint-- substrings which have repetition are returned. It should be much slower, but gets the work done.</p>
<p>If you want in addition to the longest strings that are repeated, <em>all</em> the substrings, then:</p>
<pre><code>base_repetitions = list(repeated_ones)

for s in base_repetitions:
    for i in range(4, len(s)):
        repeated_ones.add(s[:i])
</code></pre>
<p>That will ensure that for long substrings that have repetition, you have also the smaller substring --e.g. "sample" and "ample" found by the <code>re.search</code> code; but also "samp", "sampl", "ampl" added by the above snippet.</p>
<h2>Counting matches</h2>
<p>Because (by design) the substrings that we count are non-overlapping, the <code>count</code> method is the way to go:</p>
<pre><code>from __future__ import print_function
for substr in repeated_ones:
    print("'%s': %d times" % (substr, mystring.count(substr)))
</code></pre>
<h1>Results</h1>
<h3>Finding maximal substrings:</h3>
<p>With the question's original <code>mystring</code>:</p>
<pre><code>{'abcd', 'text', 'sample'}
</code></pre>
<p>with the <code>mystring_overlap</code> sample:</p>
<pre><code>{'abcd'}
</code></pre>
<h3>Finding all substrings:</h3>
<p>With the question's original <code>mystring</code>:</p>
<pre><code>{'abcd', 'ample', 'mple', 'sample', 'text'}
</code></pre>
<p>... and if we add the code to get <em>all substrings</em> then, of course, we get absolutely all the substrings:</p>
<pre><code>{'abcd', 'ampl', 'ample', 'mple', 'samp', 'sampl', 'sample', 'text'}
</code></pre>
<p>with the <code>mystring_overlap</code> sample:</p>
<pre><code>{'abcd', 'bcde'}
</code></pre>
<h1>Future work</h1>
<p>It's possible to filter the results of the <em>finding all substrings</em> with the following steps:</p>
<ul>
<li>take a match "A"</li>
<li>check if this match is a substring of another match, call it "B"</li>
<li>if there is a "B" match, check the counter on that match "B_n"</li>
<li>if "A_n = B_n", then remove A</li>
<li>go to first step</li>
</ul>
<p>It cannot happen that "A_n &lt; B_n" because A is smaller than B (is a substring) so there must be at least the same number of repetitions.</p>
<p>If "A_n &gt; B_n" it means that there is some extra match of the smaller substring, so it is a distinct substring because it is repeated in a place where B is not repeated.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>$ cat test.py

import collections
import sys 


S = "abcdthisisatextwithsampletextforasampleabcd"


def find(s, min_length=4):
    """ 
    Find repeated character sequences in a provided string.

    Arguments:
    s -- the string to be searched
    min_length -- the minimum length of the sequences to be found
    """
    counter = collections.defaultdict(int)
    # A repeated sequence can't be longer than half the length of s
    sequence_length = len(s) // 2
    # populate counter with all possible sequences
    while sequence_length &gt;= min_length:
        # Iterate over the string until the number of remaining characters is 
        # fewer than the length of the current sequence.
        for i, x in enumerate(s[:-(sequence_length - 1)]):
            # Window across the string, getting slices
            # of length == sequence_length. 
            candidate = s[i:i + sequence_length]
            counter[candidate] += 1
        sequence_length -= 1

    # Report.
    for k, v in counter.items():
        if v &gt; 1:
            print('{} {} times'.format(k, v)) 
    return



if __name__ == '__main__':
    try:
        s = sys.argv[1]
    except IndexError:
        s = S 
    find(s)

$ python test.py

sample 2 times
sampl 2 times
ample 2 times
abcd 2 times
text 2 times
samp 2 times
ampl 2 times
mple 2 times
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Here's a Python3 friendly solution:</strong></p>
<pre><code>from collections import Counter

min_str_length = 4
mystring = "abcdthisisatextwithsampletextforasampleabcd"

all_substrings =[mystring[start_index:][:end_index + 1] for start_index in range(len(mystring)) for end_index in range(len(mystring[start_index:]))]
counted_substrings = Counter(all_substrings)
not_counted_final_candidates = [item[0] for item in counted_substrings.most_common() if item[1] &gt; 1 and len(item[0]) &gt;= min_str_length]
counted_final_candidates = {item: counted_substrings[item] for item in not_counted_final_candidates}
print(counted_final_candidates)
</code></pre>
<p><strong>Bonus: largest string</strong> </p>
<pre><code>sub_sub_strings = [substring1 for substring1 in not_counted_final_candidates for substring2 in not_counted_final_candidates if substring1!=substring2 and substring1 in substring2    ]
largest_common_string = list(set(not_counted_final_candidates) - set(sub_sub_strings))
</code></pre>
<p><strong>Everything as a function:</strong></p>
<pre><code>from collections import Counter
def get_repeated_strings(input_string, min_str_length = 2, calculate_largest_repeated_string = True ):

    all_substrings = [input_string[start_index:][:end_index + 1]
                      for start_index in range(len(input_string))
                      for end_index in range(len(input_string[start_index:]))]
    counted_substrings = Counter(all_substrings)
    not_counted_final_candidates = [item[0]
                                    for item in counted_substrings.most_common()
                                    if item[1] &gt; 1 and len(item[0]) &gt;= min_str_length]
    counted_final_candidates = {item: counted_substrings[item] for item in not_counted_final_candidates}

    ### This is just a bit of bonus code for calculating the largest repeating sting 

    if calculate_largest_repeated_string == True:
        sub_sub_strings = [substring1 for substring1 in not_counted_final_candidates for substring2 in
                       not_counted_final_candidates if substring1 != substring2 and substring1 in substring2]
        largest_common_strings = list(set(not_counted_final_candidates) - set(sub_sub_strings))

        return counted_final_candidates, largest_common_strings
    else:
        return counted_final_candidates
</code></pre>
<p><strong>Example</strong>:</p>
<pre><code>mystring = "abcdthisisatextwithsampletextforasampleabcd"
print(get_repeated_strings(mystring, min_str_length= 4))
</code></pre>
<p><strong>Output</strong>:</p>
<pre><code>({'abcd': 2, 'text': 2, 'samp': 2, 'sampl': 2, 'sample': 2, 'ampl': 2, 'ample': 2, 'mple': 2}, ['abcd', 'text', 'sample'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>CODE:</strong> </p>
<pre><code>pattern = "abcdthisisatextwithsampletextforasampleabcd"

string_more_4 = []
k = 4
while(k &lt;= len(pattern)):
    for i in range(len(pattern)):
        if pattern[i:k+i] not in string_more_4 and len(pattern[i:k+i]) &gt;= 4:
            string_more_4.append( pattern[i:k+i])
    k+=1

for i in string_more_4:
    if pattern.count(i) &gt;= 2:
        print(i + " -&gt; " +  str(pattern.count(i)) + " times")
</code></pre>
<p><strong>OUTPUT:</strong></p>
<pre><code>abcd -&gt; 2 times
text -&gt; 2 times
samp -&gt; 2 times
ampl -&gt; 2 times
mple -&gt; 2 times
sampl -&gt; 2 times
ample -&gt; 2 times
sample -&gt; 2 times
</code></pre>
<p><strong><em>Hope this helps as my code length was short and it is easy to understand. Cheers!</em></strong></p>
</div>
<div class="post-text" itemprop="text">
<p>This is my approach to this problem:</p>
<pre><code>def get_repeated_words(string, minimum_len):

    # Storing count of repeated words in this dictionary
    repeated_words = {}

    # Traversing till last but 4th element
    # Actually leaving `minimum_len` elements at end (in this case its 4)
    for i in range(len(string)-minimum_len):

        # Starting with a length of 4(`minimum_len`) and going till end of string
        for j in range(i+minimum_len, len(string)):

            # getting the current word
            word = string[i:j]

            # counting the occurrences of the word
            word_count = string.count(word)

            if word_count &gt; 1:

                # storing in dictionary along with its count if found more than once
                repeated_words[word] = word_count

    return repeated_words

if __name__ == '__main__':              
    mystring = "abcdthisisatextwithsampletextforasampleabcd"
    result = get_repeated_words(mystring, 4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is how I would do it, but I don't know any other way:</p>
<pre><code>string = "abcdthisisatextwithsampletextforasampleabcd"
l = len(string)
occurences = {}
for i in range(4, l):
  for start in range(l - i):
    substring = string[start:start + i]
    occurences[substring] = occurences.get(substring, 0) + 1
for key in occurences.keys():
  if occurences[key] &gt; 1:
    print("'" + key + "'", str(occurences[key]), "times")
</code></pre>
<p>Output:</p>
<pre><code>'sample' 2 times
'ampl' 2 times
'sampl' 2 times
'ample' 2 times
'samp' 2 times
'mple' 2 times
'text' 2 times
</code></pre>
<p>Efficient, no, but easy to understand, yes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is simple solution using the <a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer"><code>more_itertools</code> library</a>.</p>
<p><strong>Given</strong></p>
<pre><code>import collections as ct

import more_itertools as mit


s = "abcdthisisatextwithsampletextforasampleabcd"
lbound, ubound = len("abcd"), len(s)
</code></pre>
<p><strong>Code</strong></p>
<pre><code>windows = mit.flatten(mit.windowed(s, n=i) for i in range(lbound, ubound))
filtered = {"".join(k): v for k, v in ct.Counter(windows).items() if v &gt; 1}
filtered
</code></pre>
<p>Output</p>
<pre><code>{'abcd': 2,
 'text': 2,
 'samp': 2,
 'ampl': 2,
 'mple': 2,
 'sampl': 2,
 'ample': 2,
 'sample': 2}
</code></pre>
<hr/>
<p><strong>Details</strong></p>
<p>The procedures are:</p>
<ol>
<li>build <a href="https://stackoverflow.com/questions/8269916/what-is-sliding-window-algorithm-examples">sliding windows</a> of varying sizes <code>lbound &lt;= n &lt; ubound</code></li>
<li>count all occurrences and filter replicates</li>
</ol>
<p><code>more_itertools</code> is a third-party package installed by <code>&gt; pip install more_itertools</code>.</p>
</div>
<span class="comment-copy">Please don't post interview questions !!!</span>
<span class="comment-copy">@Harry_pb What is the problem with this question?</span>
<span class="comment-copy">Nothing, just all want to see your attempt to solve, not question. PS, I didn't downvote but I am sure eveyone here shows what they attempted to get correct answers, not just questions.</span>
<span class="comment-copy">Quite some people went through a large effort to solve your interview question, so you have a big chance of getting hired because of them. Please don't forget to give them the bounty for which they have done all the work.</span>
<span class="comment-copy">@Dominique I doubt the interviewers gave the OP three months to answer the question ;-)</span>
<span class="comment-copy">It should be: <code>for i in range(0, len(mystring) - min_length + 1)</code>, otherwise it doesn't get the last substrings on the string --you can check it is not working in the example, it is not finding the substring abcd.</span>
