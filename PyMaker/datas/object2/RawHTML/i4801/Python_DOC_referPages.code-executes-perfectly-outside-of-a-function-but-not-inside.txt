<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2626582/running-exec-inside-function">Running exec inside function</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/25076883/creating-dynamically-named-variables-in-a-function-in-python-3-understanding-e">Creating dynamically named variables in a function in python 3 / Understanding exec / eval / locals in python 3</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p><strong>EDIT:</strong> This question is <strong>NOT ANSWERED BY THE LINKS ABOVE</strong> that a mod added. As I said before in a comment, Python 3 brought changes, and the <a href="https://stackoverflow.com/questions/2626582/running-exec-inside-function">examples</a> given in those answers were for Python 2. If I compile those in my Python 3 environment, I get the same error as here.</p>
<p>Consider</p>
<pre><code>str = "x = [113, 223]"
exec(str)
print(x[0]) #113
</code></pre>
<p>This works perfectly. But if I want this code to be executed in a function, it returns an error <code>NameError: name 'x' is not defined</code>. Here's a minimal working example:</p>
<pre><code>def some_code():
    str = "x = [1, 2]"
    exec(str)
    print(x)

some_code()
</code></pre>
<p>What is going on here? </p>
<p>I need a solution to </p>
<ul>
<li><p>use exec inside the function (because ultimately its a tkinter function -see the first edit history of this question- and I'm reading this from a file that should be executed</p></li>
<li><p>I would like to easily be able to refer to x, because I will need to do that in a lot of places. So using a long line of code to refer to x will be cumbersome.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Naively moving the relevant code to first level scope solved it.</p>
<pre><code>string = "x = [113, 223]"
exec(string)

def some_code():
    print(x[0]) #113
</code></pre>
<p><strong>Another approach:</strong> I started toying around with <code>exec()</code> more and from what I can see <code>exec()</code> writes its results (in this case <code>x</code>) into the <code>locals()</code> and <code>globals()</code> builtin dictionaries. Therefore, the following is another solution to the problem, but it seems rather hacky:</p>
<pre><code>def some_code():
    string = "x = [113, 223]"
    exec(string)
    print(locals()['x'][0]) #113

some_code()
</code></pre>
<p>In the same manner, you can define your own dictionary for use instead of <code>locals()</code> where <code>exec()</code> stores <code>x</code>, which in my opinion is much cleaner:</p>
<pre><code>exec_results = {}

def some_code():
    string = "x = [113, 223]"
    exec(string, None, exec_results)
    print(exec_results['x'][0]) #113

some_code()
</code></pre>
<p>I highly discourage using <code>exec()</code> for really simple cases such as this, but if you wish to use it in the future, I highly suggest checking out other threads on the same topic that were created prior to this question, such as <a href="https://stackoverflow.com/questions/2626582/running-exec-inside-function">running-exec-inside-function</a> and <a href="https://stackoverflow.com/questions/2904274/globals-and-locals-in-python-exec">globals and locals in python exec()</a>. Check out the <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">Python docs</a> on <code>exec()</code> to read more about <code>exec()</code> as well.</p>
</div>
<span class="comment-copy">This has <i>nothing</i> to do with tkinter. It's a python issue.</span>
<span class="comment-copy">@Nae You are right about not being tkinters fault. I edited my question. Though why it doesn't work is still open, as in that question what is claimed to be working is almost the same as my code, which does not work. Perhaps CPython has changed so much in the meantime, that now this throws an error?</span>
<span class="comment-copy">@nicht the second link <i>is</i> python 3</span>
<span class="comment-copy">Just wanna mention that the first link should be removed, because the solution there is not applicable anymore for Python 3.</span>
<span class="comment-copy">Hm, I will meditate on this answer. I'm not sure if I can actually throw the first two lines out of the function, as you did on the top, because this problem arose in the context of a tkinter function, where I'm reading stuff from a while, and the read-in stuff is what I want to execute (see my edit), so it will have to be in function...</span>
<span class="comment-copy">There is also a second issue, namely in my actual project I will want to use <code>x</code> very very often. Having to use <code>locales</code> each time would be very cumbersome. I'm really surprised that Python maks this so difficult.</span>
<span class="comment-copy">(I added these requirements to my question, as they are essential for me)</span>
<span class="comment-copy">The main issue with <code>exec()</code> here is definitely that it does not seem to be working on a local scope (i.e. inside a function as seen in your question). Calling <code>locals</code> or <code>globals</code> each time you want to access <code>x</code> is indeed very cumbersome. The only "clean" solution I can think of for your problem is using your own dictionary to store the results of <code>exec()</code> (in your case <code>x</code>) for use across an entire class and/or several functions. The 3rd alternative I provided in my answer makes use of this because I, too, thought that using <code>locals()</code> is overdoing it for accessing just one variable.</span>
<span class="comment-copy">However, I do not know if there are any downsides of using said custom dictionary for storing the results of <code>exec()</code> (especially in tkinter). I simply lack the experience in this regard, my apologies..</span>
