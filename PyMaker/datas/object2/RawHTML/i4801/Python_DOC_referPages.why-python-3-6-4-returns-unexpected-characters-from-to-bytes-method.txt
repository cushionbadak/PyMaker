<div class="post-text" itemprop="text">
<p>could someone explain to me why some of the integers passed to to_bytes() method gives a strange result?</p>
<pre><code>&gt;&gt;&gt; b = 5152
&gt;&gt;&gt; b.to_bytes(2, byteorder='big')
b'\x14 '
&gt;&gt;&gt; b = 5153
&gt;&gt;&gt; b.to_bytes(2, byteorder='big')
b'\x14!'
&gt;&gt;&gt; b=16592
&gt;&gt;&gt; b.to_bytes(2, byteorder='big')
b'@\xd0'
</code></pre>
<p>How to interpret '@' '!' ' '? For 16592 I expected b'\x40\xd0'.</p>
<p>I read Python 3 documentation and all examples from there work fine. <a href="https://docs.python.org/3/library/stdtypes.html?highlight=to_bytes#int.to_bytes" rel="nofollow noreferrer">Python 3 to_byte() description</a>.</p>
<pre><code>&gt;&gt;&gt; b=1024
&gt;&gt;&gt; b.to_bytes(2, byteorder='big')
b'\x04\x00'
</code></pre>
<p>I also try an example for <a href="https://stackoverflow.com/questions/846038/convert-a-python-int-into-a-big-endian-string-of-bytes">this Stackoverflow post</a> and it works like a charm. </p>
<pre><code>&gt;&gt;&gt; b = 1245427
&gt;&gt;&gt; b.to_bytes(3, byteorder='big')
b'\x13\x00\xf3'
</code></pre>
<p>Aditional info:</p>
<pre><code>Python 3.6.4 (default, Feb  1 2018, 11:06:09) 
[GCC 7.2.1 20170915 (Red Hat 7.2.1-2)] on linux
</code></pre>
<p>Program runs on Fedora 27.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the value of a byte, interpreted as ASCII, is printable, then the <code>repr()</code> of that byte is the printable character.</p>
<p>Since the ASCII value of <code>@</code> is 0x40, these two values are equivalent <code>b'@'</code>, <code>b'\x40'</code>.</p>
<p>This may be more easily seen through demonstration than an explanation:</p>
<pre><code>&gt;&gt;&gt; b'\x40'
b'@'
</code></pre>
<p>But regardless of representation, that object is a <code>bytes</code> of length 1, with a value of 64 in the first byte:</p>
<pre><code>&gt;&gt;&gt; b'\x40'[0] == 64
True
&gt;&gt;&gt; b'@'[0] == 64
True
</code></pre>
<p>Returning to your example, if you want to know the hex value of each byte, you can use <code>bytes.hex()</code>: </p>
<pre><code>&gt;&gt;&gt; b=16592
&gt;&gt;&gt; b.to_bytes(2, byteorder='big').hex()
'40d0'
</code></pre>
</div>
<span class="comment-copy">Thanks. All is clear now.</span>
