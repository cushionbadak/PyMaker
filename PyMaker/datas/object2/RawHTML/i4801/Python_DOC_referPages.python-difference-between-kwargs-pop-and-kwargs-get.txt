<div class="post-text" itemprop="text">
<p>I have seen both ways but I do not understand what the difference is and what I should use as "best practice":</p>
<pre><code>def custom_function(**kwargs):
    foo = kwargs.pop('foo')
    bar = kwargs.pop('bar')
    ...

def custom_function2(**kwargs):
    foo = kwargs.get('foo')
    bar = kwargs.get('bar')
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="noreferrer">get(key[, default])</a>: return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a <code>KeyError</code>.</p>
</blockquote>
<pre><code>d = {'a' :1, 'c' :2}
print(d.get('b', 0)) # return 0
print(d.get('c', 0)) # return 2
</code></pre>
<blockquote>
<p><a href="https://docs.python.org/3/library/stdtypes.html#dict.pop" rel="noreferrer">pop(key[, default])</a> if key is in the dictionary, remove it and return its value, else return default. If default is not given and key is not in the dictionary, a <code>KeyError</code> is raised.</p>
</blockquote>
<pre><code>d = {'a' :1, 'c' :2}
print(d.pop('c', 0)) # return 2
print(d) # returns {'a': 1}
print(d.get('c', 0)) # return 0
</code></pre>
<p><strong>NB:</strong> Regarding best practice question, I would say it depends on your use case but I would go by default for <code>.get</code> unless I have a real need to <code>.pop</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The difference is <code>pop</code> also removes the item from the dict.</p>
<p>There is no best practice. Use the one which is more convenient for your particular use case.</p>
<p>Most times, all you need is <code>get</code>ting the value.</p>
<p>Other times, you want to make sure no extra/unexpected kwargs are provided. In this case, it is convenient to use <code>pop</code>. E.g.:</p>
<pre><code>a = kw.pop('a')
b = kw.pop('b')
if kw:
    raise TypeError('Unepxected kwargs provided: %s' % list(kw.keys()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>So the get and pop functions do very different things</p>
<p>get is used to return a value for a given key in the dictionary</p>
<p>pop removes the value from the dictionary and returns the removed value</p>
<p>All of the dictionary functions are documented here (for python3): <a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#mapping-types-dict</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Consider the next example, where the use of <code>get</code> or <code>pop</code> makes a difference:</p>
<p>Let's begin with <code>get</code>:</p>
<pre><code>class Foo(object):
    def __init__(self, foo_param=None):
        print("In Foo: {}".format(foo_param))

class Bar(Foo):
    def __init__(self, **kwargs):
        bar_param = kwargs.get('bar_param')
        print("In Bar: {}".format(bar_param))
        super(Bar, self).__init__(**kwargs)

bar = Bar(foo_param='F', bar_param='B')
</code></pre>
<p>This code snippet raises <code>TypeError</code> exception:</p>
<pre><code>TypeError: __init__() got an unexpected keyword argument 'bar_param'
</code></pre>
<p>When Bar executes <code>super(Bar, self).__init__(**kwargs)</code> it is forwarding to Foo the same dict he has recived: <code>{foo_param='F', bar_param='B'}</code>. Then Foo raises <code>TypeError</code> because input paramteres doesn't respect its interface.</p>
<p>If you <code>pop</code> <code>bar_param</code> before executing the call to <code>super</code>, Foo only recives its required input parameter <code>foo_param</code>, and all goes fine.</p>
<pre><code>class Foo(object):
    def __init__(self, foo_param=None):
        print("In Foo: {}".format(foo_param))

class Bar(Foo):
    def __init__(self, **kwargs):
        bar_param = kwargs.pop('bar_param')
        print("In Bar: {}".format(bar_param))
        super(Bar, self).__init__(**kwargs)

bar = Bar(foo_param='F', bar_param='B')
</code></pre>
<p>Output is:</p>
<pre><code>In Bar: B
In Foo: F
</code></pre>
</div>
<span class="comment-copy">Hint: see <code>help(dict)</code></span>
<span class="comment-copy">@heemayl or more specifically: <code>help(dict.get)</code> and <code>help(dict.pop)</code>...</span>
<span class="comment-copy">Best practice, generally ypu use pop when you need to call super function and dont want a specific parameter there for anything else get is your way to go or get_object_or_404 too</span>
