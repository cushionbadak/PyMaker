<div class="post-text" itemprop="text">
<p>My script below takes files with a predetermined string in the filename and merges them into one file. I have to pre-define the <code>number_of_files</code> for a reason.</p>
<pre><code>number_of_files = 3
merged_file = 'C://path//to//file//merged_file.csv'
files = os.listdir (work_folder)
for i in files:
    if 'FOO' in i:
        for i in range (number_of_files):
            path_file = 'C://path//to//file//FOO' + str(i+1).zfill(2) + '.txt'
            with open(merged_file, 'a+') as outfile:
                with open(path_file) as infile:
                    for line in infile:
                        outfile.write(line)
</code></pre>
<p>What I expect:</p>
<ul>
<li>Contents from files <code>FOO1.TXT</code> <code>FOO2.TXT</code> <code>FOO3.TXT</code> to be added to
the <code>merged_file</code> (in order, but not crucial).</li>
</ul>
<p>What happens: </p>
<ul>
<li>The <code>merged_file</code> has the content from the 3 files (in order), but 9
times each (1, 2, 3, 1, 2, 3, [...]).</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Your issue lies here:</p>
<pre><code>for i in files:
    if 'FOO' in i:
        for i in range (number_of_files):
</code></pre>
<p>For each file, check if <code>FOO</code> is in <code>i</code>, the filename, then for a predefined number of files, you append to the output file. This is being done 3 x 3 times, since there are 3 <code>FOO</code> files, which you then are telling it to loop another 3 times any time it finds a file.</p>
<p>My suggestion is to remove the inner <code>for</code> loop <code>for i in range (number_of_files):</code>. </p>
<pre><code>import os
number_of_files = 3
merged_file = 'C://path//to//file//merged_file.csv'
files = os.listdir (work_folder)
for filename in files:
    if any(stringToCheck in filename for stringToCheck in ['FOO', 'BAR']):
        path_file = filename
        with open(merged_file, 'a+') as outfile:
            with open(path_file) as infile:
                for line in infile:
                    outfile.write(line)
</code></pre>
<p>I defined my test <code>FOO#.txt</code> files as such:</p>
<pre><code>test# line1
test# line2
</code></pre>
<p>The output of the original script using my test data is below, where <code>test#</code> comes from <code>FOO#.txt</code> in my test sample. Notice the triplication of the data, as described in the question:</p>
<pre><code>test1 line1
test1 line2

test2 line1
test2 line2

test3 line1
test3 line2

test1 line1
test1 line2

test2 line1
test2 line2

test3 line1
test3 line2

test1 line1
test1 line2

test2 line1
test2 line2

test3 line1
test3 line2
</code></pre>
<p>The output of the corrected script is below, where <code>test#</code> comes from <code>FOO#.txt</code> in my test sample:</p>
<pre><code>test1 line1
test1 line2

test2 line1
test2 line2

test3 line1
test3 line2
</code></pre>
<p>You also reuse <code>i</code>, which can cause problems. I have eliminated this reuse.</p>
</div>
<span class="comment-copy">Is the merged file in the same folder as the source files?  Such that it would show up in <code>files</code>?</span>
<span class="comment-copy">@ScottHunter they are but they are different file types, inputs are txt, output is csv (fixed script above, sorry)</span>
<span class="comment-copy">Question text the sources are .CSV files; code says they are .txt.</span>
<span class="comment-copy">It looks like you should get rid of the inner loop and use <a href="https://docs.python.org/3/library/glob.html#module-glob" rel="nofollow noreferrer">glob</a> to match whatever pattern of filenames is required.</span>
<span class="comment-copy">I can confirm with a simple test data set that the issue exists. Working on debugging.</span>
<span class="comment-copy">Modified my samples to take up less space, but still show that multiple lines are being read from the files. The additional newline was intentionally added to each file for ease of reading. SO code blocks however omit the last blank line.</span>
<span class="comment-copy">Thanks Drise. This would work, however I do need the variable <code>number_of_files</code> to be used. This isn't "critical" but it allows me to change one variable as opposed to the several iterations. File names are conserved in that they have certain defining strings, and a file number (so if <code>number_of_files</code> = 5 there will always be 5 files with <code>Foo</code>, numbered 1,2,3,4,5; 5 files with <code>Bar</code> 1,2,3,4,5, etc). So to avoid going through my script manually when this changes with each batch I used the variable. And thanks for editing my question, it is easier to read now.</span>
<span class="comment-copy">Do you have <code>FOO</code> and <code>BAR</code> files within the same directory, and want to process them at the same time? I'm not following 100% why you need to define a file count, when you can determine that at run-time.</span>
<span class="comment-copy">sorry this is a little confusing, but yes, I have a script that processes many file types differently depending on whether or not they contain certain strings (i.e. <code>FOO</code>, <code>BAR</code>, etc.). use of <code>number_of_files</code> I explained above. Now my script works fine, but I noticed that if there were no files with <code>FOO</code> in the folder during a run it would stop, and not process the other "strings". This is why I added <code>for i in files:</code> <code>if 'path' in i</code>, so that it would continue even if one "string" was not present. I see now that this is causing the duplication.</span>
<span class="comment-copy">If you want to handle <code>FOO</code> and <code>BAR</code> at the same time, but process them differently, instead of <code>if any(...</code>, add an <code>elif 'BAR' in filename:</code> for each string you want to look for.</span>
