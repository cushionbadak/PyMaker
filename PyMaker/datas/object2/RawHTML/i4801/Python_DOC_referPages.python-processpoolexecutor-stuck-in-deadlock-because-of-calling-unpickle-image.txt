<div class="post-text" itemprop="text">
<p>Hi I am working on image processing</p>
<p>I am using <code>ProcessPoolExecutor</code> to make image data processing faster, it works fine until it seems to find an unpickled image (but I am not sure if it is the real problem, I did some googling for many hours..)</p>
<p>It raised...</p>
<blockquote>
<p>TypeError</p>
</blockquote>
<p>... and got stuck into deadlock forever.</p>
<p>The code works fine without ProcessPoolExecutor, so I do not think any problem with my code but ProcessPoolExecutor.</p>
<p>So my question is, "is there any way to avoid from ProcessPoolExecutor getting stuck in deadlock status?"</p>
<p>My code is the following :</p>
<pre><code>def image_resize(filename):
    image_size = 50
    img = Image.open(filename)
    img = img.convert("RGB")
    img = img.resize((image_size, image_size))
    return img

def main():
    for idx, cat in enumerate(categories):
        image_dir = root_dir + "/" + cat
        files = glob.glob(image_dir + "/01" + "/*.jpg")

        with concurrent.futures.ProcessPoolExecutor() as executor:
            for f, img in zip(files, executor.map(image_resize, files, timeout=3, chunksize=1)):

                data = np.asarray(img)
                X.append(data)
                Y.append(idx)

if __name__ == '__main__':
    main()
    X = np.array(X)
    Y = np.array(Y)
    X_train, X_test, y_train, y_test = train_test_split(X, Y)
    xy = (X_train, X_test, y_train, y_test)
    np.save("./food3.npy", xy)
    print("ok,", len(Y))
</code></pre>
<p>Error Message :</p>
<pre><code>Exception in thread Thread-1:
Traceback (most recent call last):
  File "C:\Programs\Python\Python35\lib\threading.py", line 914, in _bootstrap_inner
    self.run()
  File "C:\Programs\Python\Python35\lib\threading.py", line 862, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Programs\Python\Python35\lib\concurrent\futures\process.py", line 273, in _queue_management_worker
    result_item = reader.recv()
  File "C:\Programs\Python\Python35\lib\multiprocessing\connection.py", line 251, in recv
    return ForkingPickler.loads(buf.getbuffer())
TypeError: __new__() missing 2 required positional arguments: 'lang' and 'tkey'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are probably affected by this Pillow <a href="https://github.com/python-pillow/Pillow/issues/1434" rel="nofollow noreferrer">bug</a>.</p>
<p>Only workaround I see for the time being, is to try to pickle the <code>img</code> object in <code>image_resize</code> before returning it. If it fails you simply return something else (<code>False</code>, <code>None</code>) or raise the exception within the function itself.</p>
<p>The <a href="https://pypi.python.org/pypi/Pebble" rel="nofollow noreferrer">pebble</a> pool is a bit more robust and it might deal with the issue transparently for you.</p>
</div>
<span class="comment-copy">Fix the indentation if you want help. Indentation in Python is critical for the correct interpretation of code. We are not computers but we don't want to waste our time with unreadable code.</span>
<span class="comment-copy">Seems strange that that bug has been open for so long, that class just needs a <a href="https://docs.python.org/3/library/pickle.html#object.__getnewargs__" rel="nofollow noreferrer"><code>__getnewargs__</code></a> method. As workaround monkeypatching it in seems to work: <code>PngImagePlugin.iTXt.__getnewargs__ = lambda self: (str(self), self.lang, self.tkey)</code>, but depending on the multiprocessing start mode that would have to be doen in every subprocess.</span>
<span class="comment-copy">It is not that simple as they need to support multiple python and pickle versions without considering the different multiprocessing start methods. Tests need to be written etc.. So I guess they have other priorities..</span>
