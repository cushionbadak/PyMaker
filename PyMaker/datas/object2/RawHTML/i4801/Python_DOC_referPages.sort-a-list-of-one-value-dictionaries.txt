<div class="post-text" itemprop="text">
<p>I have data:</p>
<pre><code>{'foo': [{1: 55}, {'c': 43}], 'bar': [{1: 43}, {'c': 40}]}
</code></pre>
<p>I wanna sort the dictionaries inside the foo and bar by its values:</p>
<pre><code>{'foo': [{'c': 43}, {1: 55}], ...}
</code></pre>
<p>I dont wanna sort the 'foo' and 'bar'.</p>
<p>Is there an easy way yo do this? Sorry if I make mistake in writing the dicts/lists. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is one way. <code>sorted</code> accepts a <code>key</code> argument which accepts an anonymous <code>lambda</code> function. Since each dictionary only has one key/value, you can list your values and select the first.</p>
<pre><code>d = {'foo': [{1: 55}, {'c': 43}], 'bar': [{1: 43}, {'c': 40}]}

res = {k: sorted(v, key=lambda x: list(x.values())[0]) for k, v in d.items()}

# {'bar': [{'c': 40}, {1: 43}], 'foo': [{'c': 43}, {1: 55}]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Then tell it to sort by the value:</p>
<pre><code>&gt;&gt;&gt; x={'foo': [{1: 55}, {'c': 43}], 'bar': [{1: 43}, {'c': 40}]}
&gt;&gt;&gt; for a in x: x[a].sort(key=lambda i: list(i.values())[0])
&gt;&gt;&gt; x
{'bar': [{'c': 40}, {1: 43}], 'foo': [{'c': 43}, {1: 55}]}
</code></pre>
<p>Note since it's a dict, you have to retrieve all values, convert to list, and take first index. Probably not the best sturcture to sort.</p>
</div>
<div class="post-text" itemprop="text">
<p>As an alternative to kabanus' <a href="https://stackoverflow.com/a/49220486">answer</a> (which uses <code>O(len(x))</code> <code>dict</code> lookup), this is an approach that use <a href="https://docs.python.org/3/library/stdtypes.html#dict.values" rel="nofollow noreferrer"><code>dict</code> values view</a>:</p>
<pre class="lang-python prettyprint-override"><code>x={'a': [{1: 55}, {'c': 43}], 'b': [{1: 43}, {'c': 40}]}
for a in x.values(): a.sort(key=lambda i: list(i.values())[0])
print(x)
</code></pre>
<p>prints</p>
<pre class="lang-python prettyprint-override"><code>{'a': [{'c': 43}, {1: 55}], 'b': [{'c': 40}, {1: 43}]}
</code></pre>
<p><a href="https://tio.run/##PcrBCoQgFEDRfV/xdipENFQboS8JF6@pSMbRUGcwxG83N7W8nHucfje6yzmMkSDhMMUXh2FINUTyLt13SdRA5ptKP9QmkarNWECQGkLzR/VbHWUcsHHGevpZz1Hhd17KwEFJ56l8Lja1glWHldrTwHK@AA" rel="nofollow noreferrer" title="Python 3 â€“ Try It Online">Try it online!</a></p>
<hr/>
<p>I have not measured the performance of this method, but I expect it would be faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply do:</p>
<pre><code>data={'foo': [{1: 55}, {'c': 43}], 'bar': [{1: 43}, {'c': 40}]}

print({i:sorted(j,key=lambda x:list(x.values())) for i,j in data.items()})
</code></pre>
<p>output:</p>
<pre><code>{'foo': [{'c': 43}, {1: 55}], 'bar': [{'c': 40}, {1: 43}]}
</code></pre>
</div>
<span class="comment-copy">Just sort them, what's the problem?</span>
<span class="comment-copy">It will probally sort by the key, not value.</span>
<span class="comment-copy">I dont wanna sort the 'foo' and 'bar'.</span>
<span class="comment-copy">'foo' and 'bar' are <i>not</i> being sorted. Dictionaries are not ordered. Your input dictionary also has no order. Just because it is represented as such when you instantiate or print it, does not mean it is ordered.</span>
<span class="comment-copy">@jpp Why we are doing <code>list(x.values())[0]</code> I mean why we are using 0th index here ?</span>
<span class="comment-copy">@Shashank <code>x</code> is a dictionary with exactly one element, so <code>list(x.values())[0]</code> will get all the values of the dictionary and use the first one of it (which is the only one).</span>
<span class="comment-copy">@Shashank Exactly, so those 55 and 43 will be used as the key for the items in the <code>foo</code> list, and <code>sorted()</code> will sort by that.</span>
<span class="comment-copy">I just noticed a difference in the answers - I rather use the built in list <code>sort</code>, rather than <code>sorted</code> to regenerate a list (I assumed OP wants in place).</span>
