<div class="post-text" itemprop="text">
<p>Note: This is not an issue with Visual Studio, but rather with incompatible dll versions. The steps below replicate the problem since running in Visual Studio in debug mode breaks on exceptions being thrown. If you just run, the thrown exception is handled elsewhere and the program works fine. But since I spend a lot of time in debug mode, I would prefer to fix this problem.</p>
<p>When debugging, I want to be able to step into modules I have added to my Virtual Environment in Visual Studio. I get a 'library not found' error that I am not able to fix. Here are the steps:</p>
<ol>
<li>In Visual Studio create a new Python Application.</li>
<li>Create a virtual environment for that application (Python 3.6 64
bit).</li>
<li><code>pip install twilio</code> into your virtual environment. You get the
    following output.</li>
</ol>
<p>...</p>
<pre><code>   ----- Installing 'twilio' -----
Collecting twilio
  Using cached twilio-6.10.5-py2.py3-none-any.whl
Collecting pytz (from twilio)
  Using cached pytz-2018.3-py2.py3-none-any.whl
Collecting six (from twilio)
  Using cached six-1.11.0-py2.py3-none-any.whl
Collecting PyJWT&gt;=1.4.2 (from twilio)
  Using cached PyJWT-1.6.0-py2.py3-none-any.whl
Collecting requests&gt;=2.0.0; python_version &gt;= "3.0" (from twilio)
  Using cached requests-2.18.4-py2.py3-none-any.whl
Collecting pysocks; python_version &gt;= "3.0" (from twilio)
  Using cached PySocks-1.6.8.tar.gz
Collecting certifi&gt;=2017.4.17 (from requests&gt;=2.0.0; python_version &gt;= "3.0"-&gt;twilio)
  Using cached certifi-2018.1.18-py2.py3-none-any.whl
Collecting chardet&lt;3.1.0,&gt;=3.0.2 (from requests&gt;=2.0.0; python_version &gt;= "3.0"-&gt;twilio)
  Using cached chardet-3.0.4-py2.py3-none-any.whl
Collecting urllib3&lt;1.23,&gt;=1.21.1 (from requests&gt;=2.0.0; python_version &gt;= "3.0"-&gt;twilio)
  Using cached urllib3-1.22-py2.py3-none-any.whl
Collecting idna&lt;2.7,&gt;=2.5 (from requests&gt;=2.0.0; python_version &gt;= "3.0"-&gt;twilio)
  Using cached idna-2.6-py2.py3-none-any.whl
Installing collected packages: pytz, six, PyJWT, certifi, chardet, urllib3, idna, requests, pysocks, twilio
  Running setup.py install for pysocks: started
    Running setup.py install for pysocks: finished with status 'done'
Successfully installed PyJWT-1.6.0 certifi-2018.1.18 chardet-3.0.4 idna-2.6 pysocks-1.6.8 pytz-2018.3 requests-2.18.4 six-1.11.0 twilio-6.10.5 urllib3-1.22
----- Successfully installed 'twilio' -----
</code></pre>
<ol start="4">
<li><p>Add the following line to the top of your .py file:</p>
<p><code>from twilio.rest import Client</code></p></li>
<li><p>In Visual Studio go to tools &gt; options &gt; python &gt; debugging. Make
sure 'Enable debugging of Python standard library' is checked</p></li>
<li><p>Run the application. You get the following error:</p></li>
</ol>
<blockquote>
<p>ModuleNotFoundError: No module named 'OpenSSL'</p>
</blockquote>
<ol start="7">
<li><code>pip install pyopenssl</code> You get the following output:</li>
</ol>
<p>...</p>
<pre><code>----- Installing 'pyopenssl' -----
Collecting pyopenssl
  Using cached pyOpenSSL-17.5.0-py2.py3-none-any.whl
Requirement already satisfied: six&gt;=1.5.2 in c:\users\x\source\repos\pythonapplication9\pythonapplication9\env\lib\site-packages (from pyopenssl)
Collecting cryptography&gt;=2.1.4 (from pyopenssl)
  Using cached cryptography-2.1.4-cp36-cp36m-win_amd64.whl
Requirement already satisfied: idna&gt;=2.1 in c:\users\x\source\repos\pythonapplication9\pythonapplication9\env\lib\site-packages (from cryptography&gt;=2.1.4-&gt;pyopenssl)
Collecting cffi&gt;=1.7; platform_python_implementation != "PyPy" (from cryptography&gt;=2.1.4-&gt;pyopenssl)
  Using cached cffi-1.11.5-cp36-cp36m-win_amd64.whl
Collecting asn1crypto&gt;=0.21.0 (from cryptography&gt;=2.1.4-&gt;pyopenssl)
  Using cached asn1crypto-0.24.0-py2.py3-none-any.whl
Collecting pycparser (from cffi&gt;=1.7; platform_python_implementation != "PyPy"-&gt;cryptography&gt;=2.1.4-&gt;pyopenssl)
  Using cached pycparser-2.18.tar.gz
Installing collected packages: pycparser, cffi, asn1crypto, cryptography, pyopenssl
  Running setup.py install for pycparser: started
    Running setup.py install for pycparser: finished with status 'done'
Successfully installed asn1crypto-0.24.0 cffi-1.11.5 cryptography-2.1.4 pycparser-2.18 pyopenssl-17.5.0
----- Successfully installed 'pyopenssl' -----
</code></pre>
<ol start="8">
<li><p>Run the application. You get the following error:</p>
<p><code>asn1crypto._ffi.LibraryNotFoundError: The library libcrypto could not be found</code></p></li>
</ol>
<p>The error is thrown in the file named <code>_big_num_ctypes.py</code> in <code>asn1crypto</code>. The code line where this is thrown is:</p>
<pre><code>libcrypto_path = find_library(b'crypto' if sys.version_info &lt; (3,) else 'crypto')
if not libcrypto_path:
    raise LibraryNotFoundError('The library libcrypto could not be found')
</code></pre>
<p><strong>Update:</strong> I was asked to provide the full backtrace. I modified the code in this way to print it:</p>
<pre><code>import unittest
import traceback

class Test_test1(unittest.TestCase):
    def test_A(self):
        try:
            from twilio.rest import Client
        except Exception as e:
            print('foo')
            foo = traceback.extract_stack()
            traceback.print_exc(e)

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>As before the import line throws the exception but the exception is not caught and the lines in 'except' clause are never executed
from twilio.rest import Client</p>
<p>update 2: I somehow had gotten this to work following @Prateek and @user8212173. But now it is not working again. As both suggested, the problem is that crypto.dll is not there. So I went thru the steps below to add it with no success:</p>
<ol>
<li>I installed Win64 OpenSSL v1.1.0j from <a href="https://slproweb.com/products/Win32OpenSSL.html" rel="noreferrer">https://slproweb.com/products/Win32OpenSSL.html</a>  (pointed to from <a href="https://wiki.openssl.org/index.php/Binaries" rel="noreferrer">https://wiki.openssl.org/index.php/Binaries</a>). It does not contain crypto.dll. </li>
<li>I then installed crypto.dll from  <a href="http://www.dlldownloader.com/crypto-dll/" rel="noreferrer">http://www.dlldownloader.com/crypto-dll/</a> (as @user8212173 suggested) (there is only a 32 bit version) and followed the instructions. I then got a new error message "ImportError: DLL load failed: %1 is not a valid Win32 application" which means that the crypto.dll I installed has a version conflict (I am running 64bit python on a 64bit computer). I remember installing it from <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="noreferrer">Unofficial Windows Binaries for Python Extension Packages</a> I can't find it there. So where do I get a working 64bit version of crypto.dll?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I searched a lot and could find that you are missing <code>crypto.dll</code> file. Your code is looking for this dll file and it is unable to find it. </p>
<p>Please note this wont be installed by <code>pip install crypto</code> as this is python library and the code is looking for a dll file.</p>
<p><code>ctypes.util.find_library</code> searches for dll file from windows environment path variable.</p>
<p><a href="https://stackoverflow.com/questions/23804438/find-library-in-ctypes#23805306">Reference : find_library() in ctypes</a></p>
<p>To verify I checked.</p>
<pre><code>find_library('l2gpstore')
&gt;&gt;'C:\\WINDOWS\\system32\\l2gpstore.dll'
find_library('java')
&gt;&gt;'C:\\Program Files\\Java\\jdk-9.0.4\\bin\\java.dll'
</code></pre>
<p>Furthermore you should install <code>OpenSSL</code> with <code>libcrypto</code> module from here </p>
<p><a href="https://github.com/openssl/openssl" rel="nofollow noreferrer">OpenSSL</a></p>
<h2>OpenSSL installation <a href="https://www.openssl.org/source/" rel="nofollow noreferrer">instructions</a></h2>
<blockquote>
<p>The master sources are maintained in our git repository, which is
  accessible over the network and cloned on GitHub, at
  <a href="https://github.com/openssl/openssl" rel="nofollow noreferrer">https://github.com/openssl/openssl</a>. Bugs and pull patches (issues and
  pull requests) should be file on the GitHub repo. Please familiarize
  yourself with the license.</p>
</blockquote>
<h2>libcrypto with respect to OpenSSL</h2>
<p><a href="https://github.com/openssl/openssl" rel="nofollow noreferrer">reference : GitHub</a></p>
<blockquote>
<p>libcrypto (with platform specific naming):
       Provides general cryptographic and X.509 support needed by SSL/TLS but
       not logically part of it.</p>
</blockquote>
<p>Once you install binaries and check <code>crypto.dll</code> is available in one of the path strings in your environment variables this issue should be resolved. </p>
<p>If not add it into path variable and check.</p>
<h1>Update:</h1>
<p>Update since the question has been updated and the issue has recurred.</p>
<p>There are architectural changes with OpenSSL 1.1.0 as compared to 1.0.2</p>
<blockquote>
<p>September 13, 2018 - OpenSSL 1.1.0 and later are quite different from previous releases. Users should install BOTH the 1.0.2 series (LTS) and the 1.1.1 (LTS) series for maximum application compatibility. Developers need to recompile their software to support 1.1.1. See the official OpenSSL release strategy document for more details. â€“ Prateek yesterday</p>
</blockquote>
<p>If you open 1.0.2 from Github you can see <code>crypto.h</code> file , the same file is missing in latest version. Also <code>OpenSSL</code> there is change in <code>DLL</code> names , they <a href="https://github.com/arvidn/libtorrent/issues/1931" rel="nofollow noreferrer">renamed <code>libeay32</code> to <code>libcrypto</code></a></p>
<p>You need to post code which makes use of <code>asn1crypto</code> library in the post. There is no code that explicitly uses asn1crypto in your post. So, not able to reproduce your issue using <code>pipenv</code>. </p>
<p>Make sure you are using updated libraries too.</p>
<p>I <em>would not recommend</em> downloading DLL source from unreliable source like <a href="http://www.dlldownloader.com/" rel="nofollow noreferrer">DLLdownloader</a></p>
<hr/>
<p>If you are having issues with latest version of <code>OpenSSL</code> and <code>asn1crypto</code> its better to downgrade <code>OpenSSL</code> to <code>1.0.2</code> ,I think that would work considering it ships with <code>crypto.h</code> file.</p>
<p>Good luck!</p>
</div>
<div class="post-text" itemprop="text">
<p>I tried to reproduce the error on my computer and was successful when I ran the "error-producing" file <code>_big_num_ctypes.py</code>. Although, I do not have Visual Studio, the error stems from the missing <code>crypto.dll</code> file. We will deduce this step-by-step. Let's first examine the error causing code snippet in the file <code>_big_num_ctypes.py</code>:</p>
<pre><code>#imports
from ctypes.util import find_library
.
.
from .._ffi import LibraryNotFoundError, FFIEngineError

try:
# On Python 2, the unicode string here may raise a UnicodeDecodeError as it
# tries to join a bytestring path to the unicode name "crypto"
    libcrypto_path = find_library(b'crypto' if sys.version_info &lt; (3,) else 'crypto')
    if not libcrypto_path:
        raise LibraryNotFoundError('The library libcrypto could not be found')
.
.
except (AttributeError):
    raise FFIEngineError('Error initializing ctypes')
</code></pre>
<p>I ran the file:</p>
<pre><code>C:\&gt;cd "C:\ProgramData\Anaconda3\Lib\site-packages\asn1crypto\_perf"
C:\ProgramData\Anaconda3\Lib\site-packages\asn1crypto\_perf&gt;python _big_num_ctypes.py
</code></pre>
<p>and had a <code>Traceback</code> for the library import:</p>
<pre><code>Traceback (most recent call last):
  File "_big_num_ctypes.py", line 27, in &lt;module&gt;
    from .._ffi import LibraryNotFoundError, FFIEngineError
ValueError: attempted relative import beyond top-level package
</code></pre>
<p>So, I changed the import path for<code>.ffi</code>to:</p>
<pre><code>from asn1crypto._ffi import LibraryNotFoundError, FFIEngineError
</code></pre>
<p>On the second run, the missing libcrypto library error appeared: </p>
<pre><code>asn1crypto._ffi.LibraryNotFoundError: The library libcrypto could not be found
</code></pre>
<p>The exception is raised when the <em>dll</em> library named <strong>crypto</strong> could not be found at C:\Windows\System32 and/or SYSWOW64(for 64-bit)</p>
<pre><code>libcrypto_path = find_library(b'crypto' if sys.version_info &lt; (3,) else 'crypto')
</code></pre>
<p>The purpose of <code>find_library</code> is to find a specified library and return a pathname. The behavior of this method varies with OS as described in the <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">docs</a>. If this method cannot find any packages, it returns <code>None</code>.</p>
<pre><code>&gt;&gt;&gt; from ctypes.util import find_library
&gt;&gt;&gt; print(find_library("c"))
None
</code></pre>
<p>In our case, the search is for <code>crypto.dll</code> and I couldn't find this file on my computer. So, I downloaded and installed it exactly according to the instructions <a href="http://www.dlldownloader.com/crypto-dll/" rel="nofollow noreferrer">here</a>. When I checked again:</p>
<pre><code> &gt;&gt;&gt; find_library('crypto')
'C:\\windows\\system32\\crypto.dll'
</code></pre>
<p>Now I ran <code>python _big_num_ctypes.py</code> again and got a different <code>Traceback</code>:</p>
<pre><code>    Traceback (most recent call last):
  File "_big_num_ctypes.py", line 37, in &lt;module&gt;
    libcrypto = CDLL(libcrypto_path)
  File "C:\ProgramData\Anaconda3\lib\ctypes\__init__.py", line 348, in __init__
    self._handle = _dlopen(self._name, mode)
OSError: [WinError 193] %1 is not a valid Win32 application
</code></pre>
<p>A further investigation into the above error revealed that if I'm using a 32bit DLL with 64bit Python, or vice-versa, then I may get such errors as explained <a href="https://stackoverflow.com/questions/19849077/error-loading-dll-in-python-not-a-valid-win32-application">here</a>. So, I installed Python 3.6 32-bit and tried again with <code>py -3.6-32 _big_num_ctypes.py</code>. I also installed all the required packages, but this error persisted.</p>
<p>Could it be possible that we may require 32-bit binaries for the <code>Crypto</code> package? This <a href="https://www.pycryptodome.org/en/latest/src/installation.html#windows-from-sources-python-3-5-and-newer" rel="nofollow noreferrer">answer</a> and <a href="https://stackoverflow.com/questions/19019720/importerror-dll-load-failed-1-is-not-a-valid-win32-application-but-the-dlls">this</a> give more information. </p>
<p>I realized that <a href="https://www.pycryptodome.org/en/latest/src/installation.html#windows-from-sources-python-3-5-and-newer" rel="nofollow noreferrer">Pycryptodome</a> is a regularly maintained package and is preferred over the old <code>Crypto</code> package but can still be installed under <code>Crypto</code>. Another point to notice is that one of the requirements for this package is MS Visual Studio 2015 (Community Edition) and the C/C++ compilers and the redistributable only. It could be possible that some C++ compiler files or MS Visual Studio files are missing at present and causing these issues to happen.</p>
<p>If you install all the above prerequisites, the <code>crypto.dll</code> file and the <code>Pycryptodome</code>package, I believe this error will be Resolved. You have already installed other required packages <code>OpenSSL</code> &amp; <code>Twilio</code>. Unfortunately, I am restricted to install MS Visual Studio on my computer and so I couldn't test this further.</p>
<p>I also ran the <code>unittest</code> code and it ran successfully for me:</p>
<pre><code>#Output

.
----------------------------------------------------------------------
Ran 1 test in 0.771s

OK
</code></pre>
</div>
<span class="comment-copy">Can you post the full backtrace for the error <code>asn1crypto._ffi.LibraryNotFoundError: The library libcrypto could not be found</code>?  This library is used to improve performance, but should not be necessary to use asn1crypto. If you provide the full backtrace, I should be able to provide more help.</span>
<span class="comment-copy">Were you able to debug in Visual Studio before installing the Twilio library?</span>
<span class="comment-copy">@dprothero, yes the debugging works fine.</span>
<span class="comment-copy">@wbond I am having a hard time getting that. I updated the question with more info</span>
<span class="comment-copy">I've just opened an issue for this  <a href="https://github.com/wbond/asn1crypto/issues/123" rel="nofollow noreferrer">github.com/wbond/asn1crypto/issues/123</a></span>
<span class="comment-copy">Revisiting this since it stopped working? Where do I get crypto.dll? 1. I installed Win64 OpenSSL v1.1.0j from <a href="https://slproweb.com/products/Win32OpenSSL.html" rel="nofollow noreferrer">slproweb.com/products/Win32OpenSSL.html</a>  (pointed to from <a href="https://wiki.openssl.org/index.php/Binaries" rel="nofollow noreferrer">wiki.openssl.org/index.php/Binaries</a>). It does not contain crypto.dll. I then installed crypto.dll from  <a href="http://www.dlldownloader.com/crypto-dll/" rel="nofollow noreferrer">dlldownloader.com/crypto-dll</a> (as @user8212173 suggested) (there is only a 32bit version) and followed the instructions.</span>
<span class="comment-copy">... 2. I then got a new error message "ImportError: DLL load failed: %1 is not a valid Win32 application" which means that the crypto.dll I installed has a version conflict (my system is 64bit). I remember installing it from <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="nofollow noreferrer">lfd.uci.edu/~gohlke/pythonlibs</a> but cant find it there.</span>
<span class="comment-copy">If you open 1.0.2 from Gthub you can see <code>crypto.h</code> file , the same file is missing in latest version. Also <code>OpenSSL</code> there is change in DLL names , <a href="https://github.com/arvidn/libtorrent/issues/1931" rel="nofollow noreferrer">they renamed  libeay32 to libcrypto</a> There are some changes in OpenSSL library base since version 1.1.1, install both 1.1.1 and 1.0.2 Not able to reproduce your issue using pipenv. You need to post code which makes use of <code>asn1crypto</code> libary in the post.</span>
