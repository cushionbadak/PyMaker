<div class="post-text" itemprop="text">
<p>I can't understand why my below code raise an error.</p>
<p>I'm trying to build a priority list based on heapq module of Python.
The only difference with a basic example of the module is that want to use it with custom objects in it it, instead of simple (int,int) or (int,str) tuples.</p>
<pre><code>import heapq

class MyObject():

 def __init__(self,a=0,name='toto'):

     self.a = a
     self.name = name

if __name__ == '__main__':

 priority_list = []
 heapq.heappush(priority_list,(1,MyObject()))
 heapq.heappush(priority_list,(1,MyObject()))
</code></pre>
<p>This is the error I have:</p>
<pre><code>heapq.heappush(priority_list,(1,MyObject()))

TypeError: '&lt;' not supported between instances of 'MyObject' and 'MyObject'
</code></pre>
<p>The error is not raised if I use a different key to insert in the heap, but isn't heapq supposed to deal with same keys?
I don't understand very well this behaviour.</p>
<p>Thanks a lot</p>
</div>
<div class="post-text" itemprop="text">
<p>The operator <code>&lt;</code> is not defined for your class. That way <code>heapq</code> can't define priority.</p>
<pre><code>ob1 = MyObject()
ob1 &lt; ob1
</code></pre>
<p>raises</p>
<pre><code>TypeError: unorderable types: MyObject() &lt; MyObject()
</code></pre>
<p>You must then define the logical operators. See <a href="https://docs.python.org/3.6/library/operator.html#mapping-operators-to-functions" rel="nofollow noreferrer">this</a> for more info.</p>
<pre><code>class MyObject():
    def __init__(self,a=0,name='toto'):
        self.a = a
        self.name = name

    def __lt__(ob1, ob2):
        return ob1.a &lt; ob2.a

ob1 = MyObject()
ob1 &lt; ob1 # returns False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A heap has the property that the smallest object is always on top. In order for Python to preserve that invariant, it must have some way of determining which object is smaller. Your MyObject class does not provide this.</p>
<p>You can define <code>__gt__</code> or <code>__lt__</code> to enable this.</p>
</div>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/heapq.html#priority-queue-implementation-notes" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a>.  Since you have the same priority, the two object instances will be compared, and your <code>MyObject()</code> definition doesn't support comparison.</span>
<span class="comment-copy">Okay understood, thanks. Still I'm kind of surpised that an automatic tie-breaker in that case is not implemented - such as the order of insertion.</span>
<span class="comment-copy">Why does his script work under python 2.7, and not 3.6 ? I already figured the <code>__gt__</code> and <code>__lt__</code> problem, but I noticed python 2.7 handles this, and can't find why.</span>
