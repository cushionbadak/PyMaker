<div class="post-text" itemprop="text">
<p>I have my own local HTML file open in my browser. When I click a certain button, the class to the button changes to "selected." What I want to do is have Python take the current updated HTML of the file in the browser and overwrite it as the original HTML file. The goal here is to save the changes that were updated from the browser as the new HTML file, so the next time I open this file, the changes don't need to be made again.</p>
<p>Typically I would: </p>
<ol>
<li>send an HTTP request to a url</li>
<li>turn the response into a BeautifulSoup object</li>
<li><p>then save it as a string as <code>myfile.html</code></p>
<pre><code>url = 'http://google.com'
r = requests.get(url)
soup = str(BeautifulSoup(r.content,'lxml'))
file.write(soup)
</code></pre></li>
</ol>
<p>But I cannot send an HTTP request because it's a file currently open in my browser, not a web page on a server to be requested. So I'm not sure how to receive the structured HTML into Python for further processing.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try using the <code>selenium</code> package. You will need to have the webdriver.exe for the browser of your choice in the same folder you are running this from (code below uses Chrome Web Driver). This example, for brevity, requires you to run it as a live script from the console.</p>
<pre><code>from selenium import webdriver

browser = webdriver.Chrome()
</code></pre>
<p>This will start the webdriver. It will look just like an ordinary browser.</p>
<pre><code>browser.get('YOUR URL HERE')
</code></pre>
<p>Make some changes to the site, and when you are done:</p>
<pre><code>html = browser.page_source
</code></pre>
<p>This will return the modified html as a string into <code>html</code> that you can use to overwrite your original html file.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the built in library <a href="https://docs.python.org/3/library/http.server.html" rel="nofollow noreferrer">http.server</a> to serve pages.</p>
<p>In one console, change to your working directory:</p>
<pre><code>J:\&gt;echo hello &gt; hello.html

J:\&gt;python -m http.server 8000
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
</code></pre>
<p>And in another:</p>
<pre><code>&gt;&gt;&gt; import requests
&gt;&gt;&gt; resp = requests.get("http://127.0.0.1:8000/hello.html")
&gt;&gt;&gt; resp.text
'hello \r\n'
&gt;&gt;&gt; resp.status_code
200
</code></pre>
<p>You'll see log entries in the server window, e.g.</p>
<pre><code>127.0.0.1 - - [15/Mar/2018 13:45:40] "GET /hello.html HTTP/1.1" 200 -
</code></pre>
</div>
<span class="comment-copy">Sounds like an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY Problem</a>. If you are going through the trouble to manually click a button in your browser to update the HTML, why don't you instead manually update the HTML in a text editor?</span>
