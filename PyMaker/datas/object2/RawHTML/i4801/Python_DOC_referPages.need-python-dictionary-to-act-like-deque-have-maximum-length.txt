<div class="post-text" itemprop="text">
<p>Is there any builtin (or very simple) method of having a python dictionary work in a similar fashion as deque.</p>
<p>I need it to have a maximum size, and when new keys are added, if the maximum length is reached then the key added first is deleted. It shouldn't be too difficult to implement as a custom class, but using builtins is always prefered.</p>
<p>I am using Python 3.6 if that is of any help.</p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like a variant of <code>OrderedDict</code>.</p>
<pre><code>class FixSizeOrderedDict(OrderedDict):
    def __init__(self, *args, max=0, **kwargs):
        self._max = max
        super().__init__(*args, **kwargs)

    def __setitem__(self, key, value):
        OrderedDict.__setitem__(self, key, value)
        if self._max &gt; 0:
            if len(self) &gt; self._max:
                self.popitem(False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you want a least recently used (LRU) cache.</p>
<p>The <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer">functools.lru_cache decorator</a> might be useful to you. If you want more control, then check out the package <a href="https://pypi.python.org/pypi/pylru" rel="nofollow noreferrer">pylru</a> or just google Python LRU cache.</p>
</div>
<span class="comment-copy">Anything you've tried so far?</span>
<span class="comment-copy">I disagree that “using builtins is always prefered.” Yours seems like the perfect use case for a custom class that is composed of builtins. If you try to do it without a custom class, you’ll be fighting the standard library the whole way.</span>
<span class="comment-copy">Hristov: I've started to implement a custom class that contains two deques (one for the keys and one for the values) where I overload the getitem, len, contains and iter function, but I was hoping for a builtin datastructure.</span>
<span class="comment-copy">ndmeiri: Ok, I guess I'll finish my custom class then</span>
<span class="comment-copy">You can easily subclass <code>dict</code> (or variant) to achieve this. If you come up with a solution not already posted, do answer the question yourself.</span>
<span class="comment-copy">This is so much better than what I had started doing, thanks a lot!</span>
<span class="comment-copy">@Aran-Fey Yes, you are right, I will correct it.</span>
<span class="comment-copy">This is exactly what I was looking for, however, the code I'm writing should be used by people that has not used Python too much, so I'm going to use Sraw's solution.</span>
