<div class="post-text" itemprop="text">
<p>I have a column called `cc_flags' in a Python astropy table. It looks like::</p>
<h2>cc_flags</h2>
<pre><code>0000
ddOO
0000
hHOO
0000
DD00
hHOO
hHPO
P000
00h0
...
0000
</code></pre>
<p>I'd like to pull out every row with the last character of the four if it is a '0'., i.e a '***0' or a '???0' matcher. </p>
<p>I'm getting an </p>
<pre><code>error: nothing to repeat at position 0
</code></pre>
<p>with </p>
<pre><code>import re
regex = r"???0"
re.findall(regex,data['cc_flags'])
</code></pre>
<p>What am I doing wrong?!</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're not limited to regex or regex like, this is simple:</p>
<pre><code>has_zeros = [line for line in data['cc_flags'] if line[-1] == '0']
</code></pre>
<p>This list comprehension will extract out each element from <code>data['cc_flags']</code> into a variable named line, and return a resulting list that is only comprised of the last character of line being a 0.</p>
<p>(Obviously, if you need your if statement to be more specific, you can add whatever else you need into the filter condition.)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>?</code> does not mean "any character" in regex. Swap your <code>?</code>s for <code>.</code>s</p>
</div>
<div class="post-text" itemprop="text">
<p>As others have said, you need to use <code>.</code> instead of <code>?</code>. Another way is to use <code>{}</code> to specify how many matches.</p>
<p>For example, try this:</p>
<pre><code>import re
regex = r".{3}0"
re.findall(regex,data['cc_flags'])
</code></pre>
<ul>
<li><code>.</code> means match any character (except for line terminators)</li>
<li><code>{3}</code> means match exactly 3 times</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The issue is with regex not escaping the special characters in your search term. To get this to work, simply change your statement to the following:</p>
<pre class="lang-py prettyprint-override"><code>import re
regex = re.escape("???0")
re.findall(regex,data['cc_flags'])
</code></pre>
<p><code>data['cc_flags']</code> should be a string, not a list.</p>
</div>
<span class="comment-copy">Do you have to use regex?</span>
<span class="comment-copy">You are using wildcard-matching instead of regular expressions. Consider using <a href="https://docs.python.org/3/library/fnmatch.html" rel="nofollow noreferrer">fnmatch</a> or changing your regex to <code>...0</code></span>
<span class="comment-copy">You could also use <a href="https://docs.python.org/3/library/stdtypes.html#str.endswith" rel="nofollow noreferrer"><code>str.endswith</code></a>.</span>
<span class="comment-copy">@DeliriousLettuce Absolutely, though I would expect line[-1] to be more efficient than line.endswith() .</span>
<span class="comment-copy">Sure, it probably is, but so is array access.  At least on my system, [-1] is much more efficient for this case:  <code>$ python -m timeit 'if "1230"[-1] == "0": pass'</code> 100000000 loops, best of 3: 0.0177 usec per loop <code>$ python -m timeit 'if "1230".endswith("0"): pass'</code> 10000000 loops, best of 3: 0.0709 usec per loop  But we're getting lost in the weeds.  I simply wanted to present a non-regex solution.  Either [-1] or .endswith can work, depending on your needs.  (Both are much more efficient than regex.  :-) )</span>
<span class="comment-copy">I kinda wanted the regex solution for general learning, but this does work and does ultimately do what I want!! Thanks.</span>
<span class="comment-copy">regex = "...0"                                                      re.findall(regex,data['cc_flags'])                                                               then gives me a "TypeError: cannot use a string pattern on a bytes-like object"</span>
<span class="comment-copy">@npross <code>regex = rb'...0'</code>?</span>
<span class="comment-copy">@npross The the astropy data structure you're using is the "bytes-like object". As Mr Lettuce mentions, adding the <code>b</code> flag to your regex will allow it to match.</span>
<span class="comment-copy">(Also) gives me a  TypeError: cannot use a string pattern on a bytes-like object</span>
<span class="comment-copy">@npross <code>regex = rb'.{3}0'</code>?</span>
<span class="comment-copy">This doesn't crash, but gives me::                                   [b'\x00\x00\x000',  b'\x00\x00\x000',  b'\x00\x00\x000',  b'\x00\x00\x000',</span>
