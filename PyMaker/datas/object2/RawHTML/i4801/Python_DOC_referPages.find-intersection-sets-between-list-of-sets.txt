<div class="post-text" itemprop="text">
<p>The following question is on python 3.6. Suppose I have lists of sets, for example     </p>
<pre><code>L1 = [{2,7},{2,7,8},{2,3,6,7},{1,2,4,5,7}]      
L2 = [{3,6},{1,3,4,6,7},{2,3,5,6,8}]      
L3 = [{2,5,7,8},{1,2,3,5,7,8}, {2,4,5,6,7,8}] 
</code></pre>
<p>I need to find all the intersection sets between each element of L1, L2, and L3. E.g.:      </p>
<pre><code>    {2,7}.intersection({3,6}).intersection({2,5,7,8})= empty  
    {2,7}.intersection({3,6}).intersection({1,2,3,5,7,8})= empty  
    {2,7}.intersection({3,6}).intersection({2,4,5,6,7,8})= empty  
    {2,7}.intersection({1,3,4,6,7}).intersection({2,5,7,8})= {7}  
    {2,7}.intersection({1,3,4,6,7}).intersection({1,2,3,5,7,8})= {7}  
    {2,7}.intersection({1,3,4,6,7}).intersection({2,4,5,6,7,8})= {7}
</code></pre>
<p>...............................   </p>
<p>If we keep doing like this, we end up with the following set:      </p>
<p>{{empty},{2},{3},{6},{7},{2,3},{2,5},{2,6},{2,8},{3,7},{4,7},{6,7}}</p>
<p>Suppose:<br/>
        - I have many lists L1, L2, L3,...Ln. And I do not know how many lists I have.<br/>
        - Each list L1, L2, L3..Ln are big, so I can not load all of them into the memory.</p>
<p>My question is: Is there any way to calculate that set <strong>sequentially</strong>, e.g., calculate between L1 and L2, then using result to calculate with L3, and so on...</p>
</div>
<div class="post-text" itemprop="text">
<p>You can first calculate all possible intersections between L1 and L2, then calculate the intersections between that set and L3 and so on.</p>
<pre><code>list_generator = iter([  # some generator that produces your lists 
    [{2,7}, {2,7,8}, {2,3,6,7}, {1,2,4,5,7}],      
    [{3,6}, {1,3,4,6,7}, {2,3,5,6,8}],      
    [{2,5,7,8}, {1,2,3,5,7,8}, {2,4,5,6,7,8}], 
])
# for example, you can read from a file:
# (adapt the format to your needs)
def list_generator_from_file(filename):
    with open(filename) as f:
        for line in f:
            yield list(map(lambda x: set(x.split(',')), line.strip().split('|')))
# list_generator would be then list_generator_from_file('myfile.dat')

intersections = next(list_generator)  # get first list
new_intersections = set()

for list_ in list_generator:
    for old in intersections:
        for new in list_:
            new_intersections.add(frozenset(old.intersection(new)))
    # at this point we don't need the current list any more
    intersections, new_intersections = new_intersections, set()

print(intersections)
</code></pre>
<p>Output looks like <code>{frozenset({7}), frozenset({3, 7}), frozenset({3}), frozenset({6}), frozenset({2, 6}), frozenset({6, 7}), frozenset(), frozenset({8, 2}), frozenset({2, 3}), frozenset({1, 7}), frozenset({4, 7}), frozenset({2, 5}), frozenset({2})}</code>, which matches what you have except for the <code>{1,7}</code> set you missed.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functools.html?highlight=functools#functools.reduce" rel="nofollow noreferrer"><code>functools.reduce(set.intersection, sets)</code></a> to handle variable inputs. And <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product(nested_list_of_sets)</code></a> to generate combinations with one element from each of several sequences.</p>
<p>By using generator functions (<code>yield</code>) and lazy iterators such as itertools.product, you can reduce memory usage by orders of magnitude.</p>
<pre><code>import itertools
import functools

nested_list_of_sets = [
    [{2,7}, {2,7,8}, {2,3,6,7}, {1,2,4,5,7}], 
    [{3,6}, {1,3,4,6,7}, {2,3,5,6,8}],
    [{2,5,7,8}, {1,2,3,5,7,8}, {2,4,5,6,7,8}],
]

def find_intersections(sets):
    """Take a nested sequence of sets and generate intersections"""
    for combo in itertools.product(*sets):
        yield (combo, functools.reduce(set.intersection, combo))

for input_sets, output_set in find_intersections(nested_list_of_sets):
    print('{:&lt;55}  -&gt;   {}'.format(repr(input_sets), output_set))
</code></pre>
<p>Output is </p>
<pre><code>({2, 7}, {3, 6}, {8, 2, 5, 7})                           -&gt;   set()
({2, 7}, {3, 6}, {1, 2, 3, 5, 7, 8})                     -&gt;   set()
({2, 7}, {3, 6}, {2, 4, 5, 6, 7, 8})                     -&gt;   set()
({2, 7}, {1, 3, 4, 6, 7}, {8, 2, 5, 7})                  -&gt;   {7}
({2, 7}, {1, 3, 4, 6, 7}, {1, 2, 3, 5, 7, 8})            -&gt;   {7}
({2, 7}, {1, 3, 4, 6, 7}, {2, 4, 5, 6, 7, 8})            -&gt;   {7}
({2, 7}, {2, 3, 5, 6, 8}, {8, 2, 5, 7})                  -&gt;   {2}
({2, 7}, {2, 3, 5, 6, 8}, {1, 2, 3, 5, 7, 8})            -&gt;   {2}
# ... etc
</code></pre>
<p><a href="https://repl.it/@haakenlid/Combinations-of-sets" rel="nofollow noreferrer">Online demo on repl.it</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This may be what you are looking for:</p>
<pre><code>res = {frozenset(frozenset(x) for x in (i, j, k)): i &amp; j &amp; k \
       for i in L1 for j in L2 for k in L3}
</code></pre>
<p><strong>Explanation</strong></p>
<ul>
<li><code>frozenset</code> is required because <code>set</code> is not hashable. Dictionary keys must be hashable.</li>
<li>Cycle through every length-3 combination of items in L1, L2, L3.</li>
<li>Calculate intersection via <code>&amp;</code> operation, equivalent to <code>set.intersection</code>.</li>
</ul>
</div>
<span class="comment-copy">Thank you very much. In fact, I need to read a file a line of which represents a list of sets. E.g., line 1: 2,7|2,7,8|2,3,6,7|1,2,4,5,7; line 2: 3,6|1,3,4,6,7|2,3,5,6,8; line 3: 2,5,7,8|1,2,3,5,7,8|2,4,5,6,7,8.  Because I can only read the file line by line, so, I am going to read each line, split it and convert each line to a list of sets. Then, I will calculate the intersections sequentially. By this way ,the list_generator which contains all the lists of sets is unavailable. Based on your method, can you suggest a way to read the file line by line then find the intersections between them?</span>
<span class="comment-copy">@cdt This is why I made <code>list_generator</code> an iterator. You can read lines from the file and yield them one by one, using the fact that the file object you get from <code>open()</code> already is an iterator over the file's lines.</span>
<span class="comment-copy">@cdt I added an example, but I didn't test it extensively, you might need to tweak the parser.</span>
<span class="comment-copy">Thank you very much. This is exactly what I am looking for.</span>
<span class="comment-copy">Norrius, I have an extra question. If I split my input lists into multiple parts, then find intersections for each part and then aggregate results.  e.g., L12=intersect(L1, L2), L345=intersect(L3,L4,L5), and L6n=intersect(L6,L7,...Ln). Then, does intersect(L12,L345,L6n) gives same result as your code above?</span>
<span class="comment-copy">Given the description that he cannot hold all the lists in memory, he'll also need an iterable lazy loading type. In particular it needs to be rewound for all the latter lists. That also means serializing the data, and in turn likely that there's no point transforming the collections to actual hashed sets for any but the first list.</span>
<span class="comment-copy">The question is a bit hard to interpret. The sample code only makes sense with all L1, L2, L3 ... available to create a carthesian product. The entire product is not in memory, but the input has to be available to create the product.</span>
<span class="comment-copy">According to the top answer to <a href="https://stackoverflow.com/questions/45586863/does-itertools-product-evaluate-its-arguments-lazily">this question</a> <code>itertools.product</code> must convert its arguments to tuples. So it cannot accept lazy sequences that are too large to fit in memory. I think it might be possible to implement a carthesian product generator that might work with streams of inputs. But I believe you would need some way to rewind sequences.</span>
<span class="comment-copy">Thank you for your help. In fact, I need to read a file, in which a line represents a list of sets. For example,     line 1: 2,7|2,7,8|2,3,6,7|1,2,4,5,7     line 2: 3,6|1,3,4,6,7|2,3,5,6,8     line 3: 2,5,7,8|1,2,3,5,7,8|2,4,5,6,7,8  I can only read the file line by line. So, I am going to read each line, split it (by |) and convert each line into a list of sets. Because the file is large and each line is long, I can not read the whole file into a list. So, define nested_list_of_sets seems impossible to me.</span>
<span class="comment-copy">I think it should be possible to modify my answer to get what you want. You can pass a number of lines into <code>find_intersections</code>, create a list of the output, that list can be passed back to <code>find_intersections</code> along some more lines from the feed. You might want to prune empty sets from each iteration, if you are not interested in those.</span>
