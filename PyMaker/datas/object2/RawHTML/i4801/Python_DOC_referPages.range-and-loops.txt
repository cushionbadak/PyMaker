<div class="post-text" itemprop="text">
<p>Looking for a way to explain something in Python to my students. If we start with number_list = range(100), we can use a for loop such as...</p>
<pre><code>for n in number_list: (do something)  
</code></pre>
<p>If we have the same set up, but try to use a while loop, n comes back as undefined. How do I explain that?</p>
<pre><code>while n in number_list &lt; 20: (do something)  --&gt; n is undefined
</code></pre>
<p>I guess it is more curious why it's OK in the for loop. I have been harping on them to initialize variables before using them, so why does n work just fine in the for loop?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>in</code> in a <code>for</code> loop has a different connotation from the <code>in</code> used in a <code>while</code> loop.</p>
<p>The <code>for</code> loop's syntax is defined in the <a href="https://docs.python.org/3/reference/grammar.html#full-grammar-specification" rel="nofollow noreferrer">grammar file</a> for the language, particularly, this line:</p>
<pre><code>for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
</code></pre>
<p>Which indicates that <code>in</code> is part of the <em>syntax</em> that defines a <code>for</code> loop.</p>
<p>In the case of a <code>while</code> loop, which is a <em>condition controlled</em> loop. Anything that comes after <code>while</code> is treated as an expression that is to be evaluated and its truthiness tested.</p>
<p>So, the <code>&lt;something&gt;</code> in <code>while &lt;something&gt;:</code> is an expression. In your case, it is <code>n in number_list &lt; 20</code>. In this case, the <code>in</code> has a different connotation, it is an <em>operator</em> that is used to test inclusion.</p>
<pre><code>In [173]: n = 4

In [174]: n in range(1, 10)
Out[174]: True
</code></pre>
<p>In your particular case, <code>n</code> is not defined at the time the expression is evaluated, and so a <code>NameError</code> is raised.</p>
<hr/>
<p>I understand that this might be too complicated an answer to throw at students who have next to no experience with python.</p>
<p>I would touch upon the fact that the <code>in</code> in <code>for ... in ...</code> is an artefact of the syntax for a <code>for</code> loop, and the <code>in</code> in the <code>while &lt;something&gt;</code> statement is an operator, and go from there.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your current <code>while</code> loop is mostly gibberish. There's no <code>in</code> clause in a <code>while</code> statement (unless you're using the <code>in</code> operator to check if a value is a member of a container). Unlike a for loop, a <code>while</code> doesn't assign any value to a name on each iteration, it just checks the truth value of the expression you give it. That expression needs to be valid <em>before</em> the loop runs!</p>
<p>You can write a <code>while</code> loop that is almost equivalent to your <code>for</code> loop:</p>
<pre><code>number_list = range(100)

iterator = iter(number_list)
try:
    while True:
        n = next(iterator)

        # do stuff here with n (body of the loop)

except StopIteration:
    pass
</code></pre>
<p>(The only way this is different from the for loop is that it creates the name <code>iterator</code> in the current namespace, while a <code>for</code> loop stores its iterator internally, without it being accessible to Python code.)</p>
<p>Unfortunately, that loop is unlikely to be easier for your students to understand, since exceptions are probably more complicated than looping.</p>
<p>If you only need to be able to iterate over a sequence (such as a <code>list</code> or a <code>range</code>), you can make a simpler <code>while</code> loop that uses an index to get each value from the sequence, rather than using the iterator protocol:</p>
<pre><code>number_list = range(100)

i = 0
while i &lt; len(number_list):
    n = number_list[i]

    # do stuff with n here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for n in number_list: (do something)  
</code></pre>
<p>Pick one element from the number_list(in Pur case its a range) then save that value in a variable called 'n' , the value of the 'n' will change every time you run the for loop. the loop will exit when it encounters a 'StopIteration'. The variable 'n' will get created automatically with a value we fetch from the number_list</p>
<blockquote>
<p><code>while n in number_list &lt; 20:</code></p>
</blockquote>
<p>Here you checking a variable's value present inside the list number_list. But it is not defined. while only runs when it get True value from the condition</p>
</div>
<div class="post-text" itemprop="text">
<p>Although the <code>for</code> type-statement-construct appears in many programming languages, its meaning in Python comes alive due to the ability to iterate over the contents of container objects. But here is a really simple 'for loop' constructed in Python using the 'while` statement.</p>
<pre><code>n = 0
while n &lt; 100:
    print (n)
    n = n + 1
</code></pre>
</div>
<span class="comment-copy">I am (happily!) surprised that you received your answer here, where "how to explain" is typically not on-topic, but just so you know, questions like this would typically fare better in <a href="https://cseducators.stackexchange.com">Computer Science Educators</a>, a whole community of educators created specifically for this sort of thing. ;-)</span>
<span class="comment-copy">Thanks, very helpful way to explain.</span>
