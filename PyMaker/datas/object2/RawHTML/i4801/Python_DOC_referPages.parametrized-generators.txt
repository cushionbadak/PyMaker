<div class="post-text" itemprop="text">
<p>I need parametrized generator. Such one that will accept parameters on the call to .next(arg).
In this specific case I want the generator to change with +1 when arg is True and -1 on False.</p>
<p>Is this possible in python ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using the <a href="https://docs.python.org/3/reference/expressions.html#generator.send" rel="nofollow noreferrer"><code>.send</code></a> method on a generator instance allows you to inject state into the generator.  That makes something like this possible:</p>
<pre><code>&gt;&gt;&gt; def mygen():
...     i = 0
...     sign = 1
...     while True:
...         val = yield sign*i
...         if val is not None:
...             sign = 1 if val else -1
...         i += 1
...         
&gt;&gt;&gt; g = mygen()
&gt;&gt;&gt; next(g)
0
&gt;&gt;&gt; next(g)
1
&gt;&gt;&gt; next(g)
2
&gt;&gt;&gt; g.send(False)
-3
&gt;&gt;&gt; next(g)
-4
&gt;&gt;&gt; next(g)
-5
&gt;&gt;&gt; g.send(True)
6
&gt;&gt;&gt; next(g)
7
</code></pre>
<p>Note that <code>next(g)</code> is equivalent to <code>g.send(None)</code>.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my final version :</p>
<pre><code>def flip_flop(low=0, high=10):  
    i = 0
    while i &gt;= low and i &lt;= high :
        cond = yield i
        if cond : i += 1
        else    : i -= 1




 In [64]: ff = flip_flop()

 In [65]: ff.next()
 Out[65]: 0

 In [66]: ff.send(True)
 Out[66]: 1

 In [67]: ff.send(True)
 Out[67]: 2

 In [68]: ff.send(True)
 Out[68]: 3

 In [69]: ff.send(False)
 Out[69]: 2
</code></pre>
</div>
<span class="comment-copy">Do you know of the <code>generator.send</code> method?</span>
<span class="comment-copy">can .send() work in 'for' loop, or it is only good in 'while'</span>
<span class="comment-copy">@user1019129 why would that make a difference? Anyway, you could check that pretty easily...</span>
<span class="comment-copy">How would you send arguments in a <code>for</code> loop? The whole point of a <code>for</code> loop is to wrap up the interaction with the iterator so you don't see it; where in the syntax would you plug in the args?</span>
