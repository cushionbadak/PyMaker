<div class="post-text" itemprop="text">
<p>I want to parse the command line arguments while attempting to call the program in the following manner:</p>
<pre><code>python plot.py --w --Develop origin plot --+3.5
</code></pre>
<p>I have been using <code>sys.argv</code> to parse them using a <code>for</code> loop: </p>
<pre><code>for arg in sys,argv:
    print(arg)
</code></pre>
<p>Output:</p>
<pre><code>plot.py
--w
--Developoriginplot
--+3.5
</code></pre>
<p>But I wish to get the output as follows:</p>
<pre><code>plot.py
w
Develop origin plot
+3.5
</code></pre>
<p>Is there a way to split the line by specifying the delimeter <code>--</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>" ".join()</code> the args first, then split by <code>--</code>. </p>
<pre><code>import sys

args = " ".join(sys.argv) # join by spaces
args = [a.strip() for a in args.split("--")] # split by --, remove any extra spaces
print(args)
print("\n".join(args))
</code></pre>
<p>Output:</p>
<pre><code>$ python plot.py --w --Develop origin plot --+3.5
['plot.py', 'w', 'Develop origin plot', '+3.5']
plot.py
w
Develop origin plot
+3.5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you need to use the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparser</a></p>
<p>and here is a sample code of usage:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('integers', metavar='N', type=int, nargs='+',
                help='an integer for the accumulator')
parser.add_argument('--sum', dest='accumulate', action='store_const',
                const=sum, default=max,
                help='sum the integers (default: find the max)')

args = parser.parse_args()
print(args.accumulate(args.integers))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use split() and replace() functions. split() takes delimiter as an argument and replace takes two arguments - first one is the character you would like to replace (in your case the white space) and the second one is what you would like to replace it with.   </p>
<pre><code>#Your string
s = "--w --Develop origin plot --+3.5"

d = s.replace(' ','').split('--')[1:] 
print(d)

&gt;&gt;['w', 'Developoriginplot', '+3.5']
</code></pre>
<p>Then you can reference your arguments by the indices of this list. </p>
<p>Hope this helps.</p>
</div>
<span class="comment-copy">Can't have spaces in arguments, see <a href="https://stackoverflow.com/questions/11894815/specifying-arguments-with-spaces-for-running-a-python-script" title="specifying arguments with spaces for running a python script">stackoverflow.com/questions/11894815/â€¦</a></span>
<span class="comment-copy">@seam Thank you so much! I wish I could up vote this twice!</span>
<span class="comment-copy">I don't see how this is relevant to my problem? Could you enlighten me?</span>
<span class="comment-copy">you are trying to manage command line aguments to your application, right? and you are doing it manually; however the argparser is the one for this purpose, and if you read the documentation you will find the answer.</span>
<span class="comment-copy">Thank you! Let me go through it in detail.</span>
<span class="comment-copy">Yes, split method can be used to break it down at the de-limited but you will notice that I get my desired output "Develop orign plot" as "Desiredorigin plot"</span>
<span class="comment-copy">Updated as per your requirement.</span>
<span class="comment-copy">Thank you Mick! But the thing is that I am parsing this from the argument line and the line is coming as a single string unless we add double quotes at beginning and end of the entire line. But had given a good work around for it.</span>
<span class="comment-copy">No problem. I think i got your comment wrong and provided wrong solution anyway. Glad you got it to work.</span>
