<div class="post-text" itemprop="text">
<p>After executing the following code to generate a copy of a text file with Python, the <code>newfile.txt</code> doesn't have the exact same file size as <code>oldfile.txt</code>.</p>
<pre><code>with open('oldfile.txt','r') as a, open('newfile.txt','w') as b:
    content = a.read()
    b.write(content)
</code></pre>
<p>While <code>oldfile.txt</code> has e.g. 667 KB, <code>newfile.txt</code> has 681 KB.</p>
<p>Does anyone have an explanation for that?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are various causes.</p>
<p>You are opening a file as text file, so the bytes of file are interpreted (decoded) into python, and than encoded.  So there could be changes.</p>
<p>From <code>open</code> documentation (<a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#open</a>):</p>
<blockquote>
<p>When reading input from the stream, if newline is None, universal newlines mode is enabled. Lines in the input can end in '\n', '\r', or '\r\n', and these are translated into '\n' before being returned to the caller.</p>
</blockquote>
<p>So if the original file were ASCII (e.g. generated in Windows), you will have the <code>\r</code> removed. But when writing back the file you can have no more the original <code>\r</code> (if you are in Linux or MacOs) or you will have always <code>\r\n</code>, if you are on Windows (which it seems the case, because you file increase in size).</p>
<p>Also encoding could change text. E.g. BOM mark could be removed (or added), and potentially (but AFAIK it is not done implicitly), unneeded codes could be removed (you can have some extra code in Unicode, which change the behaviour of nearby codes. One could add more of one of them, but only the last one is effective.</p>
</div>
<div class="post-text" itemprop="text">
<p>I tried on Linux / Ubuntu. It works as expected, the file-size of both files is perfectly equal. </p>
<p>At this point, i guess this behavior does not relate to python, maybe it depends on your filesystem (compression) or operating system.</p>
</div>
<span class="comment-copy">Is it difficult for you to check two files for differences? There are tools for that. (But my guess is you may find it's End-of-line related.)</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/31483253/when-to-open-file-in-binary-mode-b">When to open file in binary mode (b)?</a> answers that, with longer explanations of "text" mode than in the answers here.</span>
<span class="comment-copy">Are you a Windows user, right?</span>
<span class="comment-copy">Yes, I generated oldfile.txt in Windows. It's newline characters were <code>\r\n</code>, while the newline characters in newfile.txt were <code>\n</code>. I see, opening the files in binary mode <code>with open('oldfile.txt', 'rb') as a, open('newfile.txt', 'wb') as b:</code>... preserves the newline characters.</span>
<span class="comment-copy">True, thank you. When I read/write in binary mode, the file content remains unchanged.</span>
<span class="comment-copy">One test is definitive just if it prove that is is wrong. You have not tested all cases.</span>
