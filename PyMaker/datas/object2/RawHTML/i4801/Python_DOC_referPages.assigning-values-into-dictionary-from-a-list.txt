<div class="post-text" itemprop="text">
<p>I want to create a dictionary that stores the full name of the 50 states in the word, and the abbreviations in the value, given a list of the names and abbreviations. I am expecting a dictionary like {'Alabama' : 'AK', 'Alaska': 'AL', ...}. I've tried </p>
<pre><code>state_to_abbrev = {}
for word in states:
    for i in range(50):
        state_to_abbrev[word] = states[i]
        state_to_abbrev[word] = abbreviations[i]

state_to_abbrev
</code></pre>
<p>And I'm getting {'Alabama': 'WY',
 'Alaska': 'WY',
 'Arizona': 'WY',
 'Arkansas': 'WY',
 'California': 'WY',
 'Colorado': 'WY',
 'Connecticut': 'WY',
 'Delaware': 'WY',
 'Florida': 'WY',
 'Georgia': 'WY',
 'Hawaii': 'WY', .....} </p>
</div>
<div class="post-text" itemprop="text">
<p>You can try:</p>
<pre><code>state_to_abbrev = {}
for word in states:
    for i in range(50):
        state_to_abbrev[states[i]] = abbreviations[i]

state_to_abbrev
</code></pre>
<h1>Update:</h1>
<p>As suggested in comment, you don't need extra loop for word, you can simply try:</p>
<pre><code>state_to_abbrev = {}
for i in range(50):
    state_to_abbrev[states[i]] = abbreviations[i]

state_to_abbrev
</code></pre>
<p>Then, using <code>dict comprehension</code> you can assign in single line for above loop:</p>
<pre><code>state_to_abbrev = {states[i]:abbreviations[i] for i in range(50)}
</code></pre>
<p>Also, since you are using two lists, you can try using <code>zip</code>, you can also look for example in <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">documentation</a>:</p>
<pre><code>dict(zip(states,abbreviations))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try <code>enumerate</code></p>
<pre><code>state_to_abbrev = {}
for i, word in enumerate(states):
    state_to_abbrev[word] = abbreviations[i]

state_to_abbrev
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The naive way to do what you are trying to do is the following:</p>
<pre><code>state_to_abbrev = {}

for i in range(len(states)):
    state_to_abbrev[states[i]] = abbreviations[i]
</code></pre>
<p>You have instead a <em>nested loop</em>, but that's not what you want, the nested loop loops over the cartesian product of your two lists, i.e.:</p>
<pre><code>In [46]: for a in ('a','b'):
    ...:     for n in (1, 2):
    ...:         print(a, n)
    ...:
a 1
a 2
b 1
b 2

In [47]:
</code></pre>
<p>But really, in Python, instead of using indices, you'd use <code>zip</code> to iterate over two lists "in parallel":</p>
<pre><code>state_to_abbrev = {}

for st, abbr in zip(states, abbreviations):
    state_to_abbrev[st] = abbr
</code></pre>
<p>But <em>really</em>, you should know that the <code>dict</code> constructor takes an iterable of key-value pairs already, so what you <strong>really</strong> want is:</p>
<pre><code>state_to_abbrev = dict(zip(states, abbreviations))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a 1-liner version: (Python 3)</p>
<pre><code>state_to_abbrev = dict(zip(states,abbreviations))

print(state_to_abbrev)
</code></pre>
<p>Prints out:</p>
<pre><code>{'Alabama': 'AK', 'Alaska': 'AL', ...}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try anyone of these method :</p>
<pre><code>states=['Alabama','Arizona']
abbreviations=['AK','AL']

print(dict([i for i in zip(states,abbreviations)]))
print({i[0]:i[1] for i in zip(states,abbreviations)})
</code></pre>
<p>output:</p>
<pre><code>{'Alabama': 'AK', 'Arizona': 'AL'}
{'Alabama': 'AK', 'Arizona': 'AL'}
</code></pre>
</div>
<span class="comment-copy">Looks like relatively straightforward array access. Verify that the content of <code>abbreviations</code> is what you expect.</span>
<span class="comment-copy">You have an unnecessary loop here -- for word in states means for each of the 50 states in your state list, loop through an index of 50 and assign the value of that state's name with state[i] then immediately overwrite it with abbreviation[i]</span>
<span class="comment-copy">... why the nested loop?</span>
<span class="comment-copy">You have an extra loop like the OP, see my comment</span>
<span class="comment-copy">Oops, I just tried fixing the code, I will edit it thanks!</span>
<span class="comment-copy">I think zip method is the best answer overall</span>
