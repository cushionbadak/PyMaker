<div class="post-text" itemprop="text">
<p>I have 3 dataframes: df1, df2, and df3. </p>
<pre><code>df1 = 'num' 'type' 
       23     a 
       34     b 
       89     a 
       90     c

df2 = 'num' 'type' 
       23     a 
       34     b 
       56     a 
       90     c

df3 = 'num' 'type' 
       56     a 
       34     s 
       71     a 
       90     c
</code></pre>
<p>What I want is an output of all of the 'num' values which appear in 2 or more of the dfs, and I want to flag how many dfs that 'num' value appeared in. So I want something like this: </p>
<pre><code>df = 'num' 'type' 'count' 
       23     a       2 
       34     s       3 
       90     c       3 
       56     a       2
</code></pre>
<p>I tried doing an inner merge, but that only accounts for 'num' values that appear in all 3 dfs, ignoring the ones that appear in 2/3 dfs. 
What's the best way to go about this? </p>
</div>
<div class="post-text" itemprop="text">
<p>et voila my friend</p>
<pre><code>df_full = pd.concat([df1,df2,df3], axis = 0)
df_agg = df_full.groupby('num').agg({'type': 'count'})
df_agg = df_agg.loc[df_agg['type'] &gt;= 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> solution, which has O(n) complexity.</p>
<p>The results of the count can easily be brought back into <code>pandas</code>, if required.</p>
<pre><code>from collections import Counter

c = sum((Counter(df['num']) for df in [df1, df2, df3]), Counter())

c_masked = {k: v for k, v in c.items() if v&gt;=2}

# {23: 2, 34: 3, 90: 3, 56: 2}

df = pd.DataFrame.from_dict(c_masked, orient='index')

#     0
# 23  2
# 34  3
# 90  3
# 56  2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another way to get the desired result using groupby and size  </p>
<pre><code>d1 = {'num': [23,34,89,90], 'type': ['a', 'b', 'a', 'c']}
d2 = {'num': [23,34,56,90], 'type': ['a', 'b', 'a', 'c']}
d3 = {'num': [56,34,71,90], 'type': ['a', 's', 'a', 'c']}

df1 = pd.DataFrame(data=d1)
df2 = pd.DataFrame(data=d2)
df3 = pd.DataFrame(data=d3)

df10 = pd.concat([df1,df2,df3], axis=0)
# Using groupby with 'num' and 'type' and then using size to get the count.
# resent_index(name='count') will name the size column as 'count'
df20 = df10.groupby(['num','type']).size().reset_index(name='count')

# getting the index with 'count' &gt;= 2 and storing those in df_out.
df_out = df20[df20['count'] &gt;=2].reset_index(drop=True)
print(df_out)
</code></pre>
<p>The output looks like:</p>
<pre><code>   num type  count
0   23    a      2
1   34    b      2
2   56    a      2
3   90    c      3
</code></pre>
<p>For reference </p>
<pre><code>print(df20)
   num type  count
0   23    a      2
1   34    b      2
2   34    s      1
3   56    a      2
4   71    a      1
5   89    a      1
6   90    c      3
</code></pre>
</div>
<span class="comment-copy">are you kidding dude, this is my solution</span>
<span class="comment-copy">@NOOBIE, When you run your code the output has 2 columns 'num' and 'type', which is not what was asked the output to be. If you see the requirement, the output was intended to have 3 columns with 'num', 'type' and 'count'. My solution uses .size and creates the column 'count' which is different from your solution. I hope you see the differences in the solution submitted with yours.</span>
