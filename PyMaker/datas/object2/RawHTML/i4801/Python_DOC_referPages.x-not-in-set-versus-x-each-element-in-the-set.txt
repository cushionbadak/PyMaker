<div class="post-text" itemprop="text">
<p>Suppose we have <code>x = ['a', 'b']</code>. </p>
<p>What is happening under the hood for the statement:</p>
<pre><code>x not in {None, False}
</code></pre>
<p>that raises the <code>unhashable type: 'list'</code> error?</p>
<p>The workaround I found is to write this instead:</p>
<pre><code>x != None and x!= False
</code></pre>
<p>but I am confused because, mathematically, both boolean expressions are equivalent.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Rationale</h2>
<p>Here's what the official documentation states:</p>
<ol>
<li><p><a href="https://docs.python.org/3/library/stdtypes.html#set" rel="nofollow noreferrer">[Python 3]: class <strong>set</strong>(<em>[iterable]</em>)</a>:</p>
<blockquote>
<p>Return a new set or frozenset object whose elements are taken from <em>iterable</em>. The elements of a set <strong>must be</strong> <a href="https://docs.python.org/3/glossary.html#term-hashable" rel="nofollow noreferrer"><strong>hashable</strong></a>.</p>
</blockquote></li>
<li><p><a href="https://docs.python.org/3/glossary.html#term-hashable" rel="nofollow noreferrer">[Python 3]: <strong>hashable</strong></a>:</p>
<blockquote>
<p>An object is <em>hashable</em> if it has a hash value which never changes during its lifetime (it needs a <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer">__hash__()</a> method), and can be compared to other objects (it needs an <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer">__eq__()</a> method). Hashable objects which compare equal must have the same hash value.<br/>
  ...<br/>
  All of Pythonâ€™s immutable built-in objects are hashable; <strong>mutable containers (such as lists or dictionaries) are not</strong>.</p>
</blockquote></li>
<li><p><a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer">[Python 3]: object.<strong>__contains__</strong>(<em>self, item</em>)</a> (just above the anchor):</p>
<blockquote>
<p>The membership test operators (<a href="https://docs.python.org/3/reference/expressions.html#in" rel="nofollow noreferrer">in</a> and <a href="https://docs.python.org/3/reference/expressions.html#not-in" rel="nofollow noreferrer">not in</a>) are normally implemented as an iteration through a sequence. However, <strong>container objects can supply</strong> the following special method with a more efficient implementation, which also does not require the object be a sequence.</p>
</blockquote></li>
</ol>
<p>Going into <a href="https://github.com/python/cpython/blob/v3.5.4/Objects/setobject.c" rel="nofollow noreferrer">[GitHub]: python/cpython - (v3.5.4) cpython/Objects/setobject.c</a>:</p>
<ul>
<li><p>Line <em>#1991</em>:</p>
<pre><code>static PyMethodDef set_methods[] = {
    {"add",             (PyCFunction)set_add,           METH_O,
     add_doc},
    {"clear",           (PyCFunction)set_clear,         METH_NOARGS,
     clear_doc},
    {"__contains__",(PyCFunction)set_direct_contains,           METH_O | METH_COEXIST,  // @TODO - cfati: MARK THIS LINE
</code></pre></li>
<li><p>Line <em>#1843</em>:</p>
<pre><code>static PyObject *
set_direct_contains(PySetObject *so, PyObject *key)
{
    long result;

    result = set_contains(so, key);  // @TODO - cfati: MARK THIS LINE
    if (result == -1)
        return NULL;
    return PyBool_FromLong(result);
}
</code></pre></li>
<li><p>Line <em>#1823</em>:</p>
<pre><code>static int
set_contains(PySetObject *so, PyObject *key)
{
    PyObject *tmpkey;
    int rv;

    rv = set_contains_key(so, key);    // @TODO - cfati: MARK THIS LINE
    if (rv == -1) {
        if (!PySet_Check(key) || !PyErr_ExceptionMatches(PyExc_TypeError))
            return -1;
        PyErr_Clear();
        tmpkey = make_new_set(&amp;PyFrozenSet_Type, key);
        if (tmpkey == NULL)
            return -1;
        rv = set_contains_key(so, tmpkey);  // @TODO - cfati: MARK THIS LINE
        Py_DECREF(tmpkey);
    }
    return rv;
}
</code></pre></li>
<li><p>Line <em>#627</em>:</p>
<pre><code>static int
set_contains_key(PySetObject *so, PyObject *key)
{
    setentry entry;
    Py_hash_t hash;

    if (!PyUnicode_CheckExact(key) ||
        (hash = ((PyASCIIObject *) key)-&gt;hash) == -1) {  // @TODO - cfati: MARK THIS LINE
        hash = PyObject_Hash(key);
        if (hash == -1)
            return -1;
    }
    entry.key = key;
    entry.hash = hash;
    return set_contains_entry(so, &amp;entry);  // @TODO - cfati: MARK THIS LINE
}
</code></pre></li>
<li><p>Line <em>#614</em>:</p>
<pre><code>static int
set_contains_entry(PySetObject *so, setentry *entry)
{
    PyObject *key;
    setentry *lu_entry;

    lu_entry = set_lookkey(so, entry-&gt;key, entry-&gt;hash);  // @TODO - cfati: MARK THIS LINE
    if (lu_entry == NULL)
        return -1;
    key = lu_entry-&gt;key;
    return key != NULL &amp;&amp; key != dummy;
}
</code></pre></li>
</ul>
<p>As seen from the "callstack" (presented in reversed order), in order to test for membership (<code>in</code> / <code>not in</code>), <em>hash</em> is being performed (on all code paths) on the candidate member ("<em>includee</em>"), and since the <em>list</em> instance doesn't have the <em>hash</em> functionality, the interpreter spits out <em>TypeError</em>.</p>
<h2>Resolution</h2>
<p>There is a number of ways to get around this (as many others already pointed out most of them):</p>
<ul>
<li>Use a container that doesn't require its elements to be hashable (<em>list</em>, <em>tuple</em>)</li>
<li>Test for <em>__hash__</em> member</li>
<li>Wrap the membership test in a <strong><em>try</em></strong> / <strong><em>except</em></strong> block</li>
<li>Use a a hashable container (<em>tuple</em>) for the element: <code>x = ('a', 'b')</code></li>
</ul>
<p>but (generally) these are just ways to <strong>get around</strong> the problem (this is my personal opinion), since if you end up comparing a list to <em>None</em> and <em>False</em>, the code (that yields that list) could use some refactoring.</p>
</div>
<div class="post-text" itemprop="text">
<p>if you can enter all elements you want to test in a <code>set</code>, it means that all unhashable elements <em>don't</em> belong to your set (because you can't put them in)</p>
<p>You could do:</p>
<pre><code>if x.__hash__ and x in {None,False}:
</code></pre>
<p>when object isn't hashable, <code>x.__hash__</code> is <code>None</code> (other alternatives: <a href="https://stackoverflow.com/questions/3460650/asking-is-hashable-about-a-python-value">Asking "is hashable" about a Python value</a>) and the second part isn't evaluated.</p>
<p>or (better ask forgiveness than permission):</p>
<pre><code>def belongs(x):
    try:
        return x in {None,False}
    except TypeError:   # unhashable type
        return False
</code></pre>
<p>both solutions are faster than using a <code>list</code> or <code>tuple</code> (<code>(None,False)</code>), because there's no linear search involved (that is if there are a lot of elements in the test list, not true for only 2 elements)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>{None, False}</code> is a set. Sets can only contain <em>hashable</em> objects, and therefore you can only test for membership of hashable objects. Lists are not hashable.</p>
<p>Instead, you could use a tuple to perform the same sort of membership comparison. Tuple elements do not need to be hashable.</p>
<pre><code>x not in (None, False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would like to do a brief comparison on membership tests on <code>set</code> vs <code>list</code></p>
<p>Membership tests invoke <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>__contains__</code></a> dunder(if class implement this method). So, if we write </p>
<pre><code>&gt;&gt;&gt; 1 in [1,2] 
</code></pre>
<p>it will equivalent to </p>
<pre><code>&gt;&gt;&gt; list.__contains__([1,2],1)
&gt;&gt;&gt; True
</code></pre>
<p>If we do:</p>
<pre><code>&gt;&gt;&gt; [1,2] in [1,2,3]
&gt;&gt;&gt; False #We get False instead of TypeError here
</code></pre>
<p>But why is above case not applicable to sets? Membership tests work in a different way in list and set. Infact list and set are implemented differently. Talking about set, they are implemented using <a href="https://en.wikipedia.org/wiki/Hash_table" rel="nofollow noreferrer"><code>Hash-Table</code></a>. This allow <code>sets</code> to perform membership test i.e. lookups in <code>O(1)</code> as compared to <code>list</code> where lookups are <code>O(n)</code>. So when <code>in</code> is performed on a set, <code>__contains__</code> try to compute the <code>hash</code> of the object that need to be looked using <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer"><code>__hash__</code></a>. Since 
lists are unhashable in python, you get the error: <code>TypeError: unhashable type: 'list'</code>. If you do same with list you won't get any error since list don't compute hash for membership testing.</p>
<p>In short membership tests cannot be performed on sets with an object that is unhashable. Generally speaking all mutable objects<code>(list, sets, dict)</code> are unhashable. </p>
</div>
<span class="comment-copy">Out of curiosity, can you describe what you're actually trying to achieve in words? I suspect that neither option is really what you want.</span>
<span class="comment-copy"><code>x</code> is not hashable, so it cannot be in your <code>set</code></span>
<span class="comment-copy">You are trying to find whether a list object is within a set of two values (meaning whether one of the two values in the set <i>is a list</i>). Lists cannot be hashed, so cannot be part of a set, so are not comparable. What do you want that operation to do?</span>
<span class="comment-copy">Is there some rationale for <code>[] in set()</code> raising an error rather than evaluating to <code>False</code>?</span>
<span class="comment-copy">@Patrick Python warning you of nonsensical operations rather than quietly failing.</span>
<span class="comment-copy">I would argue that <code>try: [] in {} except TypeError: ...</code> would be more pythonic.</span>
<span class="comment-copy">@deceze yeah, I wanted to use short-circuit. Exceptions force to create a function. There are also other alternatives in the link I provided (like testing type aganst <code>collections.Hashable</code> but I suspect this is going to be slooooow)</span>
<span class="comment-copy">Exceptions don't force the creation of a function; it depends on the context in which this code is used and how verbose/concise you want it. Perhaps you can abort your entire operation when a <code>TypeError</code> occurs or doesn't occur because obviously <code>x</code> is of the wrong typeâ€¦</span>
<span class="comment-copy">so if <code>x</code> is unhashable, then it's not in the set :)</span>
<span class="comment-copy">@Jean-FranÃ§oisFabre Yes, that's true.</span>
