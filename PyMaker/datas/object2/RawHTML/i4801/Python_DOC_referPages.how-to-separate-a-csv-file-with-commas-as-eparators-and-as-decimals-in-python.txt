<div class="post-text" itemprop="text">
<p>I have this data in a CSV file and i want to read it in python. The problem is that the decimal points and the delimiter are both commas. How can I read the CSV file in a way that the 1,2,3,4,6,8,10,11 and 15 commas are used as delimiters and the other commas are used as decimals?. Thanks</p>
<p><a href="https://i.stack.imgur.com/JOCIu.png" rel="nofollow noreferrer">data in csv file</a></p>
</div>
<div class="post-text" itemprop="text">
<p>As a workaround you could read the data as follows:</p>
<pre><code>with open('input.txt') as f_input:
    data = [next(f_input).strip().split(',')]   # Read header normally

    for line in f_input:
        row = line.split(',')
        data.append(row[:2] + ['.'.join([x, y]) for x, y in zip(*[iter(row[2:])] * 2)])

print data
</code></pre>
<p>This would give you output starting like:</p>
<pre class="lang-none prettyprint-override"><code>[
  ['$Date', '$Time', 'PIT_2612_EU', 'PIT_3611_EU', 'PT2614_EU', 'PIT_3614_UE', 'E1_QBRT_D3', 'E1_QBRT_D4', 'DT_2611_EU'], 
  ['04/01/015', '00:00:00', '799.8047', '686.0352', '780.7617', '380.8594', '0.1058', '298.0', '8324219.0']
]
</code></pre>
<p>This first reads the header line in and splits on commas. Then for each data row it splits again on commas, keeps the first two values and then recombines each following pair with a <code>.</code>. The resulting <code>data</code> could be loaded into Pandas.</p>
</div>
<span class="comment-copy">If that's the case, then your csv file is invalid. Values that contain special characters, such as delimiters, quotechars or lineterminators must be quoted. How else should a parser know how to parse the values? If values are not quoted, delimiters wihin values must be escaped. Have a look at the quoting options of the <a href="https://docs.python.org/3/library/csv.html#csv.QUOTE_MINIMAL" rel="nofollow noreferrer">csv module</a> to get an idea how valid data should look like.</span>
<span class="comment-copy">You could conditionally split on commas with some pattern matching, but it would require making assumptions about a regular structure to the data, and it would get messy very fast. Like @MikeScotty said: better to get valid data first, since then separation becomes trivial.</span>
<span class="comment-copy">Thank you for taking the time to respond, now i will stop wasting time triying to parse this files, and I will ask for the RAW data again.</span>
