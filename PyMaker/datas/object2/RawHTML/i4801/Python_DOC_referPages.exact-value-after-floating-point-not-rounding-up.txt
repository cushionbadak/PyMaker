<div class="post-text" itemprop="text">
<p>I want to remove digits from a float to have a fixed number of digits after the dot, like:</p>
<pre><code>1.923328437452 -&gt; 1.923
</code></pre>
<p>I need to output as a string to another function, not print.</p>
<p>Also I want to ignore the lost digits, not round them.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, the function, for those who just want some copy-and-paste code:</p>
<pre><code>def truncate(f, n):
    '''Truncates/pads a float f to n decimal places without rounding'''
    s = '{}'.format(f)
    if 'e' in s or 'E' in s:
        return '{0:.{1}f}'.format(f, n)
    i, p, d = s.partition('.')
    return '.'.join([i, (d+'0'*n)[:n]])
</code></pre>
<p>This is valid in Python 2.7 and 3.1+. For older versions, it's not possible to get the same "intelligent rounding" effect (at least, not without a lot of complicated code), but rounding to 12 decimal places before truncation will work much of the time:</p>
<pre><code>def truncate(f, n):
    '''Truncates/pads a float f to n decimal places without rounding'''
    s = '%.12f' % f
    i, p, d = s.partition('.')
    return '.'.join([i, (d+'0'*n)[:n]])
</code></pre>
<h1>Explanation</h1>
<p>The core of the underlying method is to convert the value to a string at full precision and then just chop off everything beyond the desired number of characters. The latter step is easy; it can be done either with string manipulation</p>
<pre><code>i, p, d = s.partition('.')
'.'.join([i, (d+'0'*n)[:n]])
</code></pre>
<p>or the <code>decimal</code> module</p>
<pre><code>str(Decimal(s).quantize(Decimal((0, (1,), -n)), rounding=ROUND_DOWN))
</code></pre>
<p>The first step, converting to a string, is quite difficult because there are some pairs of floating point literals (i.e. what you write in the source code) which both produce the same binary representation and yet should be truncated differently. For example, consider 0.3 and 0.29999999999999998. If you write <code>0.3</code> in a Python program, the compiler encodes it using the IEEE floating-point format into the sequence of bits (assuming a 64-bit float)</p>
<pre><code>0011111111010011001100110011001100110011001100110011001100110011
</code></pre>
<p>This is the closest value to 0.3 that can accurately be represented as an IEEE float. But if you write <code>0.29999999999999998</code> in a Python program, the compiler translates it into <em>exactly the same value</em>. In one case, you meant it to be truncated (to one digit) as <code>0.3</code>, whereas in the other case you meant it to be truncated as <code>0.2</code>, but Python can only give one answer. This is a fundamental limitation of Python, or indeed any programming language without lazy evaluation. The truncation function only has access to the binary value stored in the computer's memory, not the string you actually typed into the source code.<sup>1</sup></p>
<p>If you decode the sequence of bits back into a decimal number, again using the IEEE 64-bit floating-point format, you get</p>
<pre><code>0.2999999999999999888977697537484345957637...
</code></pre>
<p>so a naive implementation would come up with <code>0.2</code> even though that's probably not what you want. For more on floating-point representation error, <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="noreferrer">see the Python tutorial</a>.</p>
<p>It's very rare to be working with a floating-point value that is so close to a round number and yet is <em>intentionally</em> not equal to that round number. So when truncating, it probably makes sense to choose the "nicest" decimal representation out of all that could correspond to the value in memory. Python 2.7 and up (but not 3.0) includes a <a href="https://bugs.python.org/issue1580" rel="noreferrer">sophisticated algorithm to do just that</a>, which we can access through the default string formatting operation.</p>
<pre><code>'{}'.format(f)
</code></pre>
<p>The only caveat is that this acts like a <code>g</code> format specification, in the sense that it uses exponential notation (<code>1.23e+4</code>) if the number is large or small enough. So the method has to catch this case and handle it differently. There are a few cases where using an <code>f</code> format specification instead causes a problem, such as trying to truncate <code>3e-10</code> to 28 digits of precision (it produces <code>0.0000000002999999999999999980</code>), and I'm not yet sure how best to handle those.</p>
<p>If you actually <em>are</em> working with <code>float</code>s that are very close to round numbers but intentionally not equal to them (like 0.29999999999999998 or 99.959999999999994), this will produce some false positives, i.e. it'll round numbers that you didn't want rounded. In that case the solution is to specify a fixed precision.</p>
<pre><code>'{0:.{1}f}'.format(f, sys.float_info.dig + n + 2)
</code></pre>
<p>The number of digits of precision to use here doesn't really matter, it only needs to be large enough to ensure that any rounding performed in the string conversion doesn't "bump up" the value to its nice decimal representation. I think <code>sys.float_info.dig + n + 2</code> may be enough in all cases, but if not that <code>2</code> might have to be increased, and it doesn't hurt to do so.</p>
<p>In earlier versions of Python (up to 2.6, or 3.0), the floating point number formatting was a lot more crude, and would regularly produce things like</p>
<pre><code>&gt;&gt;&gt; 1.1
1.1000000000000001
</code></pre>
<p>If this is your situation, if you <em>do</em> want to use "nice" decimal representations for truncation, all you can do (as far as I know) is pick some number of digits, less than the full precision representable by a <code>float</code>, and round the number to that many digits before truncating it. A typical choice is 12,</p>
<pre><code>'%.12f' % f
</code></pre>
<p>but you can adjust this to suit the numbers you're using.</p>
<hr/>
<p><sup>1</sup>Well... I lied. Technically, you <em>can</em> instruct Python to re-parse its own source code and extract the part corresponding to the first argument you pass to the truncation function. If that argument is a floating-point literal, you can just cut it off a certain number of places after the decimal point and return that. However this strategy doesn't work if the argument is a variable, which makes it fairly useless. The following is presented for entertainment value only:</p>
<pre><code>def trunc_introspect(f, n):
    '''Truncates/pads the float f to n decimal places by looking at the caller's source code'''
    current_frame = None
    caller_frame = None
    s = inspect.stack()
    try:
        current_frame = s[0]
        caller_frame = s[1]
        gen = tokenize.tokenize(io.BytesIO(caller_frame[4][caller_frame[5]].encode('utf-8')).readline)
        for token_type, token_string, _, _, _ in gen:
            if token_type == tokenize.NAME and token_string == current_frame[3]:
                next(gen) # left parenthesis
                token_type, token_string, _, _, _ = next(gen) # float literal
                if token_type == tokenize.NUMBER:
                    try:
                        cut_point = token_string.index('.') + n + 1
                    except ValueError: # no decimal in string
                        return token_string + '.' + '0' * n
                    else:
                        if len(token_string) &lt; cut_point:
                            token_string += '0' * (cut_point - len(token_string))
                        return token_string[:cut_point]
                else:
                    raise ValueError('Unable to find floating-point literal (this probably means you called {} with a variable)'.format(current_frame[3]))
                break
    finally:
        del s, current_frame, caller_frame
</code></pre>
<p>Generalizing this to handle the case where you pass in a variable seems like a lost cause, since you'd have to trace backwards through the program's execution until you find the floating-point literal which gave the variable its value. If there even is one. Most variables will be initialized from user input or mathematical expressions, in which case the binary representation is all there is.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>round(1.923328437452, 3)
</code></pre>
<p>See <a href="http://docs.python.org/library/stdtypes.html#numeric-types-int-float-long-complex" rel="noreferrer">Python's documentation on the standard types</a>. You'll need to scroll down a bit to get to the round function. Essentially the second number says how many decimal places to round it to.</p>
</div>
<div class="post-text" itemprop="text">
<p>The result of <code>round</code> is a float, so watch out (example is from Python 2.6):</p>
<pre><code>&gt;&gt;&gt; round(1.923328437452, 3)
1.923
&gt;&gt;&gt; round(1.23456, 3)
1.2350000000000001
</code></pre>
<p>You will be better off when using a formatted string:</p>
<pre><code>&gt;&gt;&gt; "%.3f" % 1.923328437452
'1.923'
&gt;&gt;&gt; "%.3f" % 1.23456
'1.235'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>n = 1.923328437452
str(n)[:4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>At my Python 2.7 prompt:</p>
<p><code>&gt;&gt;&gt; int(1.923328437452 * 1000)/1000.0
1.923</code></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def trunc(num, digits):
   sp = str(num).split('.')
   return '.'.join([sp[0], sp[1][:digits]])
</code></pre>
<p>This should work.  It should give you the truncation you are looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple python script -</p>
<pre><code>n = 1.923328437452
n = float(int(n * 1000))
n /=1000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The truely pythonic way of doing it is</p>
<pre><code>from decimal import *

with localcontext() as ctx:
    ctx.rounding = ROUND_DOWN
    print Decimal('1.923328437452').quantize(Decimal('0.001'))
</code></pre>
<p>or shorter:</p>
<pre><code>from decimal import D, ROUND_DOWN

D('1.923328437452').quantize(D('0.001'), rounding=ROUND_DOWN)
</code></pre>
<p><strong>Update</strong></p>
<p>Usually the problem is not in truncating floats itself, but in the improper usage of float numbers <em>before</em> rounding. </p>
<p>For example: <code>int(0.7*3*100)/100 == 2.09</code>. </p>
<p>If you are <em>forced</em> to use floats (say, you're accelerating your code with <code>numba</code>), it's better to use cents as "internal representation" of prices: (<code>70*3 == 210</code>) and multiply/divide the inputs/outputs.</p>
</div>
<div class="post-text" itemprop="text">
<p>So many of the answers given for this question are just completely wrong. They either round up floats (rather than truncate) or do not work for all cases.</p>
<p>This is the top Google result when I search for 'Python truncate float', a concept which is really straightforward, and which deserves better answers. I agree with Hatchkins that using the <code>decimal</code> module is the pythonic way of doing this, so I give here a function which I think answers the question correctly, and which works as expected for all cases.</p>
<p>As a side-note, fractional values, in general, cannot be represented exactly by binary floating point variables (see <a href="https://stackoverflow.com/questions/1089018/why-cant-decimal-numbers-be-represented-exactly-in-binary">here</a> for a discussion of this), which is why my function returns a string. </p>
<pre class="lang-py prettyprint-override"><code>from decimal import Decimal, localcontext, ROUND_DOWN

def truncate(number, places):
    if not isinstance(places, int):
        raise ValueError("Decimal places must be an integer.")
    if places &lt; 1:
        raise ValueError("Decimal places must be at least 1.")
    # If you want to truncate to 0 decimal places, just do int(number).

    with localcontext() as context:
        context.rounding = ROUND_DOWN
        exponent = Decimal(str(10 ** - places))
        return Decimal(str(number)).quantize(exponent).to_eng_string()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I did something like this:</p>
<pre><code>from math import trunc


def truncate(number, decimals=0):
    if decimals &lt; 0:
        raise ValueError('truncate received an invalid value of decimals ({})'.format(decimals))
    elif decimals == 0:
        return trunc(number)
    else:
        factor = float(10**decimals)
        return trunc(number*factor)/factor
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do:</p>
<pre><code>def truncate(f, n):
    return math.floor(f * 10 ** n) / 10 ** n
</code></pre>
<p>testing:</p>
<pre><code>&gt;&gt;&gt; f=1.923328437452
&gt;&gt;&gt; [truncate(f, n) for n in range(5)]
[1.0, 1.9, 1.92, 1.923, 1.9233]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you fancy some mathemagic, this works for +ve numbers:</p>
<pre><code>&gt;&gt;&gt; v = 1.923328437452
&gt;&gt;&gt; v - v % 1e-3
1.923
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just wanted to mention that the old "make round() with floor()" trick of</p>
<pre><code>round(f) = floor(f+0.5)
</code></pre>
<p>can be turned around to make floor() from round()</p>
<pre><code>floor(f) = round(f-0.5)
</code></pre>
<p>Although both these rules break around negative numbers, so using it is less than ideal:</p>
<pre><code>def trunc(f, n):
    if f &gt; 0:
        return "%.*f" % (n, (f - 0.5*10**-n))
    elif f == 0:
        return "%.*f" % (n, f)
    elif f &lt; 0:
        return "%.*f" % (n, (f + 0.5*10**-n))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>int(16.5);
this will give an integer value of 16, i.e. trunc, won't be able to specify decimals, but guess you can do that by </p>
<pre><code>import math;

def trunc(invalue, digits):
    return int(invalue*math.pow(10,digits))/math.pow(10,digits);
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an easy way:</p>
<pre><code>def truncate(num, res=3):
    return (floor(num*pow(10, res)+0.5))/pow(10, res)
</code></pre>
<p>for num = 1.923328437452, this outputs 1.923</p>
</div>
<div class="post-text" itemprop="text">
<p>use numpy.round</p>
<pre><code>import numpy as np
precision = 3
floats = [1.123123123, 2.321321321321]
new_float = np.round(floats, precision)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def trunc(f,n):
  return ('%.16f' % f)[:(n-16)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A general and simple function to use:</p>
<pre><code>def truncate_float(number, length):
    """Truncate float numbers, up to the number specified
    in length that must be an integer"""

    number = number * pow(10, length)
    number = int(number)
    number = float(number)
    number /= pow(10, length)
    return number
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def precision(value, precision):
    """
    param: value: takes a float
    param: precision: int, number of decimal places
    returns a float
    """
    x = 10.0**precision
    num = int(value * x)/ x
    return num
precision(1.923328437452, 3)
</code></pre>
<blockquote>
<blockquote>
<p>1.923</p>
</blockquote>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>&gt;&gt;&gt;floor((1.23658945) * 10**4) / 10**4
<br/>1.2365</p>
<p># <em>divide and multiply by 10**number of desired digits</em></p>
</div>
<div class="post-text" itemprop="text">
<p>There is an easy workaround in python 3. Where to cut I defined with an help variable decPlace to make it easy to adapt.</p>
<pre><code>f = 1.12345
decPlace= 4
f_cut = int(f * 10**decPlace) /10**decPlace
</code></pre>
<p>Output:</p>
<pre><code>f = 1.1234
</code></pre>
<p>Hope it helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>Something simple enough to fit in a list-comprehension, with no libraries or other external dependencies. For Python &gt;=3.6, it's very simple to write with f-strings.</p>
<p>The idea is to let the string-conversion do the rounding <em>to one more place than you need</em> and then chop off the last digit.</p>
<pre><code>&gt;&gt;&gt; nout = 3  # desired number of digits in output
&gt;&gt;&gt; [f'{x:.{nout+1}f}'[:-1] for x in [2/3, 4/5, 8/9, 9/8, 5/4, 3/2]]
['0.666', '0.800', '0.888', '1.125', '1.250', '1.500']
</code></pre>
<p>Of course, there <em>is</em> rounding happening here (namely for the fourth digit), but rounding <em>at some point</em> is unvoidable. In case the transition between truncation and rounding is relevant, here's a slightly better example:</p>
<pre><code>&gt;&gt;&gt; nacc = 6  # desired accuracy (maximum 15!)
&gt;&gt;&gt; nout = 3  # desired number of digits in output
&gt;&gt;&gt; [f'{x:.{nacc}f}'[:-(nacc-nout)] for x in [2.9999, 2.99999, 2.999999, 2.9999999]]
&gt;&gt;&gt; ['2.999', '2.999', '2.999', '3.000']
</code></pre>
<p>Bonus: removing zeros on the right</p>
<pre><code>&gt;&gt;&gt; nout = 3  # desired number of digits in output
&gt;&gt;&gt; [f'{x:.{nout+1}f}'[:-1].rstrip('0') for x in [2/3, 4/5, 8/9, 9/8, 5/4, 3/2]]
['0.666', '0.8', '0.888', '1.125', '1.25', '1.5']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The core idea given <a href="https://stackoverflow.com/a/784665/10645311">here</a> seems to me to be the best approach for this problem. 
Unfortunately, it has received less votes while the <a href="https://stackoverflow.com/a/4176526/10645311">later answer</a> that has more votes is not complete (as observed in the comments). Hopefully, the implementation below provides a short <strong><em>and</em></strong> complete solution for <strong><em>truncation</em></strong>.</p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>def trunc(num, digits):
    l = str(float(num)).split('.')
    digits = min(len(l[1]), digits)
    return (l[0]+'.'+l[1][:digits])</code></pre>
</div>
</div>
</p>
<p>which should take care of all corner cases found <a href="https://stackoverflow.com/a/4176526/10645311">here</a> and <a href="https://stackoverflow.com/a/784665/10645311">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Short and easy variant</p>
<pre><code>def truncate_float(value, digits_after_point=2):
    pow_10 = 10 ** digits_after_point
    return (float(int(value * pow_10))) / pow_10

&gt;&gt;&gt; truncate_float(1.14333, 2)
&gt;&gt;&gt; 1.14

&gt;&gt;&gt; truncate_float(1.14777, 2)
&gt;&gt;&gt; 1.14


&gt;&gt;&gt; truncate_float(1.14777, 4)
&gt;&gt;&gt; 1.1477
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Am also a python newbie and after making use of some bits and pieces here, I offer my two cents</p>
<pre><code>print str(int(time.time()))+str(datetime.now().microsecond)[:3]
</code></pre>
<p>str(int(time.time())) will take the time epoch as int and convert it to string and join with...
str(datetime.now().microsecond)[:3] which returns the microseconds only, convert to string and truncate to first 3 chars</p>
</div>
<div class="post-text" itemprop="text">
<pre><code># value  value to be truncated
# n  number of values after decimal

value = 0.999782
n = 3
float(int(value*1en))*1e-n
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you mean when printing, then the following should work:</p>
<pre><code>print '%.3f' % number
</code></pre>
</div>
<span class="comment-copy">Should -1.233 be truncated to -1.23 or -1.24?</span>
<span class="comment-copy">OIC. That was dumb of me. Removing comment.</span>
<span class="comment-copy">How can we apply this function to a dataframe?</span>
<span class="comment-copy">@RohithRNair Off the top of my head, the same way you'd apply any other function that operates on individual elements (i.e. <code>applymap()</code>). Maybe there's a way to make the whole operation more efficient, but that would be a matter for a separate question.</span>
<span class="comment-copy">applymap() is taking a lot time since my dataframes are really big. I am trying to compare two dataframes for differences but the floating point precision is skewing my output from the desired. Like you said, I will raise a separate question for the same. Thanks.</span>
<span class="comment-copy">@RohithRNair Ah, well if you're trying to compare two dataframes for differences, ask about that instead. Truncating the values (which is what this question is about) is not the best way to do it.</span>
<span class="comment-copy">Just a note, your code seems to chop negative numbers to negative zero, which can get confusing...</span>
<span class="comment-copy">I meant rounding isn't what i need. I need truncating, which is different.</span>
<span class="comment-copy">Ahhh, fair enough. My mistake sorry.</span>
<span class="comment-copy">That's a lot of upvotes for an incorrect solution! One of those strange Stackoverflow rarities. I wonder if there's a badge for it...</span>
<span class="comment-copy">It is just appalling how many wrong answers (and upvotes for the wrong answers) there are for this question.</span>
<span class="comment-copy">A lot of people will come to this page looking for rounding ;)</span>
<span class="comment-copy">On my Python, that rounds: '%.3f' % 1.23456 == '1.235'</span>
<span class="comment-copy">@David: You are absolutely right.</span>
<span class="comment-copy">This is way more elegant than the manual string formatting nonsense, good post!</span>
<span class="comment-copy"><code>round(1.23456, 3)</code> is <code>1.235</code> and not <code>1.2350000000000001</code></span>
<span class="comment-copy">@Ahmad not necessarily. The example here is from Python 2.6 (note the date of the answer). The string formatting was improved in Python 2.7/3.1, that's probably why you get different results. Nevertheless, floating point numbers will often have unexpected string representations, see: <a href="https://docs.python.org/3.6/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/3.6/tutorial/floatingpoint.html</a></span>
<span class="comment-copy">Simple and pythonic. 4 is the size of the whole number though, not only the digits after the dot.</span>
<span class="comment-copy">So if the user enters for example <code>2</code>, you'll have a decimal dot <code>.</code> at the end of the string - not really a good solution I think.</span>
<span class="comment-copy">This is specific to a case to this number. How would it generalise to 11.923328437452?</span>
<span class="comment-copy">Best answer! you also could add float() to return a number: float(str(n)[:4])</span>
<span class="comment-copy">In many languages this could result in integer overflow, but not Python!</span>
<span class="comment-copy">This is my answer without the extra steps. :)</span>
<span class="comment-copy">Clean answer. You just miss one step, to convert back to float before dividing by 1000. Otherwise, you will get 1.</span>
<span class="comment-copy">Parson me for asking this, but... why?</span>
<span class="comment-copy">@markroxor, not sure what exactly you're asking about. As a sidenote, usually the problem is not with the rounding itself, but with the improper usage of float numbers <i>before</i> rounding. Eg <code>int(0.7*3*100)/100 == 2.09</code>. Where did my 1 cent go?</span>
<span class="comment-copy">that makes sense, can you edit your answer with this explanation? thanks.</span>
<span class="comment-copy">@markroxor done</span>
<span class="comment-copy">This only truncates with positive numbers, negative numbers will round down (away from zero).</span>
<span class="comment-copy">Great! The cast to int truncates both positive and negative numbers.</span>
<span class="comment-copy">Nice but you are not rounding.</span>
<span class="comment-copy">You mean '%.3f'</span>
<span class="comment-copy">yep, that's what i mean</span>
<span class="comment-copy">That rounds the number off, it doesn't truncate.</span>
