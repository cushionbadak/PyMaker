<div class="post-text" itemprop="text">
<p>I am creating and manipulating a list in Python, I am having trouble categorizing my lists via filter function...</p>
<p>I have 3 lists, that I append into one list, I frequently print (the_list) along the way, here is my code:</p>
<pre><code>list1 = ['Georgia', 10.5, 'Peach'];
list2 = ['Florida', 21.3, 'Sunshine'];
list3= ['Alabama', 4.9, 'Dixie'];

#List that includes list1, list2 and list3 called "the_list"
the_list = []
the_list.append(list1)
the_list.append(list2)
the_list.append(list3)
the_list

#insert new values into the list (these values represent state numbers)
list1.insert(3, 4)
list2.insert(3, 27)
list3.insert(3, 22)

#print the modified list
print (the_list)

#Organize the list from lowest to highest (based off numbers in index 1)
the_list.sort(key=lambda tup: tup[1])

print (the_list)

#filter states by category based off their population
#This is where I need help

#Small States
def lessThanTen(index):
return index &lt; 10
the_list

filter(lessThanTen, the_list)

print (the_list)

#Big States
def greaterThanTen(index):
    return index &gt; 10
    the_list

filter(greaterThanTen, the_list)

print (the_list)
</code></pre>
<p>Is there a way to filter these lists into categories by a specific index number, in this case index [1] (Which is population), and subsequently output these list items by printing, either their list name or their value at index [0]...example 'Georgia' or "list1"</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to pass index as argument and maintain some flexibility of your list (you may have population at index other than 1), you can do this</p>
<pre><code>def greaterThanTen(index):
    return lambda x: x[index] &gt; 10

def lessThanTen(index):
    return lambda x: x[index] &lt; 10

def myfilter(f, L):
    return [x[0] for x in filter(f, L)]

print(myfilter(greaterThanTen(1), the_list)) # -&gt; ['Georgia', 'Florida']
print(myfilter(lessThanTen(1), the_list))    # -&gt; ['Alabama']
</code></pre>
<p>Or more generically,</p>
<pre><code>import operator

def index_vs_num(index):
    ops = {
           '&gt;' : operator.gt,
           '&lt;' : operator.lt,
           '&gt;=': operator.ge,
           '&lt;=': operator.le,
           '=' : operator.eq
          }
    return lambda relation: lambda num: lambda x: ops[relation](x[index], num)

greaterThanTwenty = index_vs_num(1)('&gt;')(20) 
# the 1st argument is index of your population in the list
# the 2nd argument is the type of comparation 
# the 3rd argument is the number to be compared
lessThanFive =  index_vs_num(1)('&lt;')(5)

def filter_by_outindex(*index):
    def filter_by_f(f, L):
        try:
            return [x[index[0]] for x in filter(f, L)]
        except IndexError:
            return list(filter(f, L))
    return filter_by_f

myfilter=filter_by_outindex(0)

print(myfilter(greaterThanTwenty, the_list)) # -&gt; ['Florida']
print(myfilter(lessThanFive, the_list))   # -&gt; ['Alabama']
</code></pre>
<p>I think this is what you actually want to achieve.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">Python filter documentation:</a></p>
<blockquote>
<p>filter(function, iterable) <strong>Construct an iterator from those elements
  of iterable for which function returns true.</strong> iterable may be either a
  sequence, a container which supports iteration, or an iterator. If
  function is None, the identity function is assumed, that is, all
  elements of iterable that are false are removed.</p>
<p>Note that filter(function, iterable) is equivalent to the generator
  expression (item for item in iterable if function(item)) if function
  is not None and (item for item in iterable if item) if function is
  None.</p>
</blockquote>
<p>It's unclear what you mean, but I'll try to help you the best I can.</p>
<p><strong>First of all</strong>: you're <code>greaterThanTen</code> function takes <code>index</code> as input, at least it looks that way. <code>filter</code> doesn't pass index as an argument to <code>greaterThanTen</code>, but rather the element at that index.</p>
<p><strong>Another thing:</strong> I don't know if you understand that <code>filter</code> only returns one 'category' as output -- you can only sort one condition at a time. Also, filter doesn't operate on the original list, but creates a new sequence, so <code>filter(greaterThanTen, the_list)</code> doesn't actually change anything. What you should do is: <code>the_list = filter(greaterThanTen, the_list)</code>.</p>
<p>If you want to sort by the value at index 1 for each element in the list, you can do this:</p>
<pre><code>filter(lambda element: yourSortFunction(elmenet[1]), list)
</code></pre>
<p>This is similar to the function you're using as a key to sort.</p>
<p><strong>Another another thing:</strong> Why are you trying to call <code>the_list</code> in <strong><code>greaterThanTen</code></strong>, it makes no sense. The function stops evaluating code after the <code>return</code> statement.</p>
<p><strong>Printing:</strong></p>
<p>If you want to print a value from a specific index in a list just ask for that index.</p>
<blockquote>
<p>print(LIST[index])</p>
</blockquote>
<p><strong>I hope this helps.</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>You could probably just do some sort of list comprehension and avoid filtering altogether. </p>
<pre><code>the_final_list = [x for x in the_list if x[1] &lt; 10]
</code></pre>
<p>This to me is simpler/more readable and accomplishes your objective. </p>
</div>
<span class="comment-copy">I liked my solution as much simpler, but yours is far more complete and provides good documentation, so +1</span>
<span class="comment-copy">so what you are telling me is this code will reorder my list according to my specifications?  def greaterThanTen(index):     return index &gt; 10 the_list = filter(greaterThanTen,the_list)  no need for sorting at this point, just categorizing.</span>
<span class="comment-copy">@Joseph Good catch. There's no need to sort, you're right. <b>Filter only returns those items for which <code>yourSortFunction</code> returns True.</b></span>
<span class="comment-copy">and to print this it would be something along the lines of print "Small States Include:" (the_final_list)  , i guess similarly for big states, i would just change the operator to greater than and print for similar results? This code seems to allow me to remove the def and filter function, correct?</span>
<span class="comment-copy">You'll end up with a list that looks just like your current the_list which you can use however you wish. And correct, you could safely remove your filter line and your filter function. You could do <code>small_states = [x for x in the_list if x[1] &lt; 10]</code> and <code>large_states = [x for x in the_list if x[1] &gt; 20]</code> or whatever numbers you wanted</span>
