<div class="post-text" itemprop="text">
<pre><code>from collections import defaultdict
phn_dictionary = {"actual": [], "predicted": []}
phn_dict = defaultdict(lambda: phn_dictionary)
phn_dict["qwe"]["actual"].extend([123,456])

phn_dict
&gt;&gt;&gt;defaultdict(&lt;function __main__.&lt;lambda&gt;&gt;,
        {'qwe': {'actual': [123, 456], 'predicted': []}})

phn_dict["asd"]["actual"].extend([123,456])
phn_dict
&gt;&gt;&gt;defaultdict(&lt;function __main__.&lt;lambda&gt;&gt;,
        {'asd': {'actual': [123, 456, 123, 456], 'predicted': []},
         'qwe': {'actual': [123, 456, 123, 456], 'predicted': []}})
</code></pre>
<p>I am running Python 3.6.4 64 bit. I need to use a defaultdict that produces phn_dictionary as its default as shown in the code above.
I dont know in advance what are the the keys like "asd" and "qwe" that I will be accessing. It can be seen that in the line i extend to "asd" the "actual" key of both asd AND qwe is extended. Is this a bug or am I doing something wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that <code>lambda: phn_dictionary</code> is a function that returns <code>phn_dictionary</code>—the exact same dictionary object—every time you call it. So, you end up with the same dictionary as the value for a bunch of keys. Every time you append through one key, that's visible on all other keys.</p>
<p>What you want is not this dictionary, but a new dictionary that starts off as a copy of that one. As Brendan Abel points out in a comment, you probably want a <em>deep</em> copy here—not just a new dict, but a new dict with new lists in it:</p>
<pre><code>phn_dict = defaultdict(lambda: copy.deepcopy(phn_dictionary))
</code></pre>
<p>Or, maybe this is clearer (relying on the fact that the original lists should always be empty):</p>
<pre><code>phn_dict = defaultdict(lambda: {key: [] for key in phn_dictionary})
</code></pre>
<p>Or, if you don't need <code>phn_dictionary</code> anywhere except here, just use Brendan's answer and create the dict from scratch in the function:</p>
<pre><code>phn_dict = defaultdict(lambda: {"actual": [], "predicted": []})
</code></pre>
<p>If this is a stripped-down sample, and the real dict is much larger, or a variable, etc., obviously the last version won't work, but if this is the real code, it's the simplest.</p>
<p>There are other ways to solve this, some of which may be clearer, but this is the one that fits best into an inline lambda, which seems to match the way you're thinking.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's because they're both representing the same dictionary.  If you defined the factory to return a dictionary literal, it would fix the issue</p>
<pre><code>phn_dict = defaultdict(lambda: {"actual": [], "predicted": []})
</code></pre>
<p>This is because <em>each</em> time the default factory lambda is called, it returns a new dictionary instead of just returning the same dictionary over and over.</p>
<p>Alternatively, you could use <a href="https://docs.python.org/2/library/copy.html#copy.deepcopy" rel="nofollow noreferrer"><code>copy.deepcopy</code></a></p>
<pre><code>phn_dict = defaultdict(lambda: copy.deepcopy(phn_dictionary))
</code></pre>
<p>This will copy the defined dictionary <em>and</em> all the internal values as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>Other answers point out the reuse of the references of the inner lists.</p>
<p>Unless you <em>really</em> want to raise a <code>KeyError</code> if the object is used with a wrong key, you could go with a defaultdict of a defaultdict of lists:</p>
<pre><code>from collections import defaultdict
phn_dict = defaultdict(lambda: defaultdict(list))
phn_dict["qwe"]["actual"].extend([123,456])
phn_dict["qwe"]["predicted"].extend([768,333])
print(dict(phn_dict)) # clearer repr
</code></pre>
<p>result:</p>
<pre><code>{'qwe': defaultdict(&lt;class 'list'&gt;, {'actual': [123, 456], 'predicted': [768, 333]})}
</code></pre>
</div>
<span class="comment-copy">The default here isn't "a dict that looks like <code>phn_dictionary</code>". The default is <b><code>phn_dictionary</code></b>.</span>
<span class="comment-copy">Thanks, i will update the wording of the question</span>
<span class="comment-copy">@UsamaArif it wasn't the wording he was talking about</span>
<span class="comment-copy">This is not quite the same problem as mutable shared default values, but the visible confusion is the same, so <a href="https://docs.python.org/3/faq/programming.html#why-are-default-values-shared-between-objects" rel="nofollow noreferrer">the FAQ about those</a> may be helpful for understanding this case.</span>
<span class="comment-copy">@UsamaArif no, you don't understand, the default <b>is the same dictionary</b> as <code>phn_dictionary</code></span>
<span class="comment-copy">Note that unless you're doing a deep copy, the lists in the values of the copied dictionary will still be shared.</span>
<span class="comment-copy">@BrendanAbel, no, since <code>phn_dictionary</code> is empty when cloned.</span>
<span class="comment-copy">@Jean-FrançoisFabre <code>php_dictionary</code> isn't empty it is <code>{"actual": [], "predicted": []}</code></span>
<span class="comment-copy">yes. I mean: the lists are empty. but I think your answer is clearer. No need to clone a variable that noone else uses.</span>
<span class="comment-copy">@Jean-FrançoisFabre Yes, but the copied dictionaries are both referencing the <i>same</i> empty list.  The lists aren't copied when doing a <code>dict.copy</code>.  If you modify the list in on dictionary, it will affect the same list in all the other copied dictionaries.</span>
