<div class="post-text" itemprop="text">
<p>For example, if I want to detect all odd numbers in an array and set them to zero, I can use:</p>
<pre><code>def setToZeroIfOdd(n):
   if n % 2 == 0:
      pass
   else:
      return 0

numbers = range(1,1000)

numbers = map(setToZeroIfOdd, numbers)
</code></pre>
<p>which works like a charm.</p>
<p>But when I try something like</p>
<pre><code>def setToZeroIfDivisibleBy(n, divisor):
  if n % divisor == 0:
     return 0
  else:
     pass

numbers = map(setToZeroIfDivisibleBy(divisor=3), numbers)
</code></pre>
<p>it expects two arguments. Likewise,  </p>
<pre><code>numbers = map(setToZeroIfDivisibleBy, numbers, divisor=3)
</code></pre>
<p>does not work. How can I pass that <code>divisor</code> argument from within <code>map()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try using lambda function</p>
<pre><code>numbers = map(lambda n: setToZeroIfDivisibleBy(n, divisor=3), numbers)
</code></pre>
<p>And rather than <code>pass</code> did you mean <code>return n</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="noreferrer"><code>functools.partial</code></a> to make partial functions</p>
<pre><code>from functools import partial

def setToZeroIfDivisibleBy(n, divisor):
  if n % divisor == 0:
     return 0
  else:
     pass

numbers = range(1,1000)

numbers = map(partial(setToZeroIfDivisibleBy, divisor=3), numbers)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You make a function which returns a function:</p>
<pre><code>def setToZeroIfDivisibleBy(divisor):
    def callback(n):
        if n % divisor == 0:
            return 0
        else:
            pass

    return callback

numbers = map(setToZeroIfDivisibleBy(3), numbers)
</code></pre>
<p>BTW, you can entirely omit empty branches like <code>else: pass</code>; it doesn't do anything. Since it results in a <code>None</code>, I don't think that's what you want either. You probably want <code>return n</code> there instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another approach, instead of using <code>partial</code>, is to supply an infinite (or at least, long enough) sequence of 2nd arguments for the two-argument function:</p>
<pre><code>from itertools import repeat
numbers = map(setToZeroIfDivisibleBy, numbers, repeat(3))
</code></pre>
<hr/>
<p>In Python 2, <code>map</code> will append <code>None</code> as necessary to the shorter of the two sequences to make them the same length. Assuming that will cause problems (either because your function cannot handle <code>None</code> as an input value or you end up with an infinite loop), you can either use <code>itertools.imap</code>, which stops after exhausting the shorter sequence:</p>
<pre><code>from itertools import imap, repeat
numbers = list(imap(setToZeroIfDivisibleBy, numbers, repeat(3)))
</code></pre>
<p>or pass the length of <code>numbers</code> as a second argument to <code>repeat</code> so that the two sequences are the same length.</p>
<pre><code>from itertools import repeat
numbers = map(setToZeroIfDivisibleBy, numbers, repeat(3, len(numbers)))
</code></pre>
</div>
<span class="comment-copy">"which works like a charm." Certainly not. <code>pass</code> implicitly returns <code>None</code> here.</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/9458271/1639625">stackoverflow.com/q/9458271/1639625</a> or <a href="https://stackoverflow.com/q/38800245/1639625">stackoverflow.com/q/38800245/1639625</a></span>
