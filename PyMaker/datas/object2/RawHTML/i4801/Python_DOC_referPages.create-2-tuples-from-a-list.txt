<div class="post-text" itemprop="text">
<p>I need to generate 2-tuples from a list in Python, such that, in a tuple <code>(a,b)</code>, <code>a!=b</code> and if a tuple <code>(a,b)</code> has already been generated, skip generating <code>(b,a)</code>.</p>
<p>Here is something I have written. It serves the purpose. </p>
<p>However, when it is run in a pandas <code>dataframe</code>, it takes some good time to run.</p>
<pre><code>def tuplize(word_list):
    tuple_list = []
    if len(word_list) == 1:
        return None
    else:
        for i in range(len(word_list)):
            for j in range(i+1, len(word_list)):
                a = tuple([word_list[i], word_list[j]])
                tuple_list.append(a)
        return tuple_list
</code></pre>
<p>I would like to know if there is a faster way to attack the problem.</p>
<p>Thanks in advance!!</p>
<p><strong>Update:</strong></p>
<p>I tried the solution by @ThalishSajeed. I enclosed it in a function and the function works perfect on a list of words as input. However, when I try applying it on a pandas <code>Series</code> containing list of words. </p>
<p>This was my function,</p>
<pre><code>def tuplize_faster(word_list):
    if len(word_list) &lt;= 1:
        return None
    else:
        ret_object = itertools.combinations(word_list, 2)
        return [tuple(i) for i in ret_object]
</code></pre>
<p>and the result I got on passing a single list (<code>tuplize_faster(['Zero', 'rating', 'worst', 'service'])</code>) is,</p>
<pre><code>[('Zero', 'rating'),
 ('Zero', 'worst'),
 ('Zero', 'service'),
 ('rating', 'worst'),
 ('rating', 'service'),
 ('worst', 'service')]
</code></pre>
<p>Applying the same function on a pandas <code>Series</code> containing list of words </p>
<pre><code>df_preprocessed['tuples'] = df_preprocessed.lemma_corrected.apply(lambda x: tuplize_faster(x)) 
</code></pre>
<p>gives this result.</p>
<pre><code> [('[', "'"),
 ('[', 'Z'),
 ('[', 'e'),
 ('[', 'r'),
 ('[', 'o'),
 ('[', "'"),
 ('[', ','),
 ('[', ' '),
 ('[', "'"),
 ('[', 'r'),
 ('[', 'a'),
 ('[', 't'),
 ('[', 'i'),
 ('[', 'n'),
 ('[', 't'),
 ('[', "'"),
 ('[', ','),
 ('[', ' '),
 ('[', "'"),
 ('[', 'w'),
 ('[', 'o'),
 ('[', 'r'),
 ('[', 's'),
 ('[', 't'),
 ('[', "'"),
 ('[', ','),
 ('[', ' '),
 ('[', "'"),
 ('[', 's'),
 ('[', 'e'),
 ('[', 'r'),
 ('[', 'v'),
 ('[', 'i'),
 ('[', 'c'),
 ('[', 'e'),
 ('[', "'"),
 ('[', ']'),
 ("'", 'Z'),
 ("'", 'e'),
 ("'", 'r'),
 ("'", 'o'),
 ("'", "'"),
 ("'", ','),
 ("'", ' '),
 ("'", "'"),
 ("'", 'r'),
 ("'", 'a'),
 ("'", 't'),
 ("'", 'i'),
 ("'", 'n'),
 ("'", 't'),
 ("'", "'"),
 ("'", ','),
 ("'", ' '),
 ("'", "'"),
 ("'", 'w'),
 ("'", 'o'),
 ("'", 'r'),
 ("'", 's'),
 ("'", 't'),
 ("'", "'"),
 ("'", ','),
 ("'", ' '),
 ("'", "'"),
 ("'", 's'),
 ("'", 'e'),
 ("'", 'r'),
 ("'", 'v'),
 ("'", 'i'),
 ("'", 'c'),
 ("'", 'e'),
 ("'", "'"),
 ("'", ']'),
 ('Z', 'e'),
 ('Z', 'r'),
 ('Z', 'o'),
 ('Z', "'"),
 ('Z', ','),
 ('Z', ' '),
 ('Z', "'"),
 ('Z', 'r'),
 ('Z', 'a'),
 ('Z', 't'),
 ('Z', 'i'),
 ('Z', 'n'),
 ('Z', 't'),
 ('Z', "'"),
 ('Z', ','),
 ('Z', ' '),
 ('Z', "'"),
 ('Z', 'w'),
 ('Z', 'o'),
 ('Z', 'r'),
 ('Z', 's'),
 ('Z', 't'),
 ('Z', "'"),
 ('Z', ','),
 ('Z', ' '),
 ('Z', "'"),
 ('Z', 's'),
 ('Z', 'e'),
 ('Z', 'r'),
 ('Z', 'v'),
 ('Z', 'i'),
 ('Z', 'c'),
 ('Z', 'e'),
 ('Z', "'"),
 ('Z', ']'),
 ('e', 'r'),
 ('e', 'o'),
 ('e', "'"),
 ('e', ','),
 ('e', ' '),
 ('e', "'"),
 ('e', 'r'),
 ('e', 'a'),
 ('e', 't'),
 ('e', 'i'),
 ('e', 'n'),
 ('e', 't'),
 ('e', "'"),
 ('e', ','),
 ('e', ' '),
 ('e', "'"),
 ('e', 'w'),
 ('e', 'o'),
 ('e', 'r'),
 ('e', 's'),
 ('e', 't'),
 ('e', "'"),
 ('e', ','),
 ('e', ' '),
 ('e', "'"),
 ('e', 's'),
 ('e', 'e'),
 ('e', 'r'),
 ('e', 'v'),
 ('e', 'i'),
 ('e', 'c'),
 ('e', 'e'),
 ('e', "'"),
 ('e', ']'),
 ('r', 'o'),
 ('r', "'"),
 ('r', ','),
 ('r', ' '),
 ('r', "'"),
 ('r', 'r'),
 ('r', 'a'),
 ('r', 't'),
 ('r', 'i'),
 ('r', 'n'),
 ('r', 't'),
 ('r', "'"),
 ('r', ','),
 ('r', ' '),
 ('r', "'"),
 ('r', 'w'),
 ('r', 'o'),
 ('r', 'r'),
 ('r', 's'),
 ('r', 't'),
 ('r', "'"),
 ('r', ','),
 ('r', ' '),
 ('r', "'"),
 ('r', 's'),
 ('r', 'e'),
 ('r', 'r'),
 ('r', 'v'),
 ('r', 'i'),
 ('r', 'c'),
 ('r', 'e'),
 ('r', "'"),
 ('r', ']'),
 ('o', "'"),
 ('o', ','),
 ('o', ' '),
 ('o', "'"),
 ('o', 'r'),
 ('o', 'a'),
 ('o', 't'),
 ('o', 'i'),
 ('o', 'n'),
 ('o', 't'),
 ('o', "'"),
 ('o', ','),
 ('o', ' '),
 ('o', "'"),
 ('o', 'w'),
 ('o', 'o'),
 ('o', 'r'),
 ('o', 's'),
 ('o', 't'),
 ('o', "'"),
 ('o', ','),
 ('o', ' '),
 ('o', "'"),
 ('o', 's'),
 ('o', 'e'),
 ('o', 'r'),
 ('o', 'v'),
 ('o', 'i'),
 ('o', 'c'),
 ('o', 'e'),
 ('o', "'"),
 ('o', ']'),
 ("'", ','),
 ("'", ' '),
 ("'", "'"),
 ("'", 'r'),
 ("'", 'a'),
 ("'", 't'),
 ("'", 'i'),
 ("'", 'n'),
 ("'", 't'),
 ("'", "'"),
 ("'", ','),
 ("'", ' '),
 ("'", "'"),
 ("'", 'w'),
 ("'", 'o'),
 ("'", 'r'),
 ("'", 's'),
 ("'", 't'),
 ("'", "'"),
 ("'", ','),
 ("'", ' '),
 ("'", "'"),
 ("'", 's'),
 ("'", 'e'),
 ("'", 'r'),
 ("'", 'v'),
 ("'", 'i'),
 ("'", 'c'),
 ("'", 'e'),
 ("'", "'"),
 ("'", ']'),
 (',', ' '),
 (',', "'"),
 (',', 'r'),
 (',', 'a'),
 (',', 't'),
 (',', 'i'),
 (',', 'n'),
 (',', 't'),
 (',', "'"),
 (',', ','),
 (',', ' '),
 (',', "'"),
 (',', 'w'),
 (',', 'o'),
 (',', 'r'),
 (',', 's'),
 (',', 't'),
 (',', "'"),
 (',', ','),
 (',', ' '),
 (',', "'"),
 (',', 's'),
 (',', 'e'),
 (',', 'r'),
 (',', 'v'),
 (',', 'i'),
 (',', 'c'),
 (',', 'e'),
 (',', "'"),
 (',', ']'),
 (' ', "'"),
 (' ', 'r'),
 (' ', 'a'),
 (' ', 't'),
 (' ', 'i'),
 (' ', 'n'),
 (' ', 't'),
 (' ', "'"),
 (' ', ','),
 (' ', ' '),
 (' ', "'"),
 (' ', 'w'),
 (' ', 'o'),
 (' ', 'r'),
 (' ', 's'),
 (' ', 't'),
 (' ', "'"),
 (' ', ','),
 (' ', ' '),
 (' ', "'"),
 (' ', 's'),
 (' ', 'e'),
 (' ', 'r'),
 (' ', 'v'),
 (' ', 'i'),
 (' ', 'c'),
 (' ', 'e'),
 (' ', "'"),
 (' ', ']'),
 ("'", 'r'),
 ("'", 'a'),
 ("'", 't'),
 ("'", 'i'),
 ("'", 'n'),
 ("'", 't'),
 ("'", "'"),
 ("'", ','),
 ("'", ' '),
 ("'", "'"),
 ("'", 'w'),
 ("'", 'o'),
 ("'", 'r'),
 ("'", 's'),
 ("'", 't'),
 ("'", "'"),
 ("'", ','),
 ("'", ' '),
 ("'", "'"),
 ("'", 's'),
 ("'", 'e'),
 ("'", 'r'),
 ("'", 'v'),
 ("'", 'i'),
 ("'", 'c'),
 ("'", 'e'),
 ("'", "'"),
 ("'", ']'),
 ('r', 'a'),
 ('r', 't'),
 ('r', 'i'),
 ('r', 'n'),
 ('r', 't'),
 ('r', "'"),
 ('r', ','),
 ('r', ' '),
 ('r', "'"),
 ('r', 'w'),
 ('r', 'o'),
 ('r', 'r'),
 ('r', 's'),
 ('r', 't'),
 ('r', "'"),
 ('r', ','),
 ('r', ' '),
 ('r', "'"),
 ('r', 's'),
 ('r', 'e'),
 ('r', 'r'),
 ('r', 'v'),
 ('r', 'i'),
 ('r', 'c'),
 ('r', 'e'),
 ('r', "'"),
 ('r', ']'),
 ('a', 't'),
 ('a', 'i'),
 ('a', 'n'),
 ('a', 't'),
 ('a', "'"),
 ('a', ','),
 ('a', ' '),
 ('a', "'"),
 ('a', 'w'),
 ('a', 'o'),
 ('a', 'r'),
 ('a', 's'),
 ('a', 't'),
 ('a', "'"),
 ('a', ','),
 ('a', ' '),
 ('a', "'"),
 ('a', 's'),
 ('a', 'e'),
 ('a', 'r'),
 ('a', 'v'),
 ('a', 'i'),
 ('a', 'c'),
 ('a', 'e'),
 ('a', "'"),
 ('a', ']'),
 ('t', 'i'),
 ('t', 'n'),
 ('t', 't'),
 ('t', "'"),
 ('t', ','),
 ('t', ' '),
 ('t', "'"),
 ('t', 'w'),
 ('t', 'o'),
 ('t', 'r'),
 ('t', 's'),
 ('t', 't'),
 ('t', "'"),
 ('t', ','),
 ('t', ' '),
 ('t', "'"),
 ('t', 's'),
 ('t', 'e'),
 ('t', 'r'),
 ('t', 'v'),
 ('t', 'i'),
 ('t', 'c'),
 ('t', 'e'),
 ('t', "'"),
 ('t', ']'),
 ('i', 'n'),
 ('i', 't'),
 ('i', "'"),
 ('i', ','),
 ('i', ' '),
 ('i', "'"),
 ('i', 'w'),
 ('i', 'o'),
 ('i', 'r'),
 ('i', 's'),
 ('i', 't'),
 ('i', "'"),
 ('i', ','),
 ('i', ' '),
 ('i', "'"),
 ('i', 's'),
 ('i', 'e'),
 ('i', 'r'),
 ('i', 'v'),
 ('i', 'i'),
 ('i', 'c'),
 ('i', 'e'),
 ('i', "'"),
 ('i', ']'),
 ('n', 't'),
 ('n', "'"),
 ('n', ','),
 ('n', ' '),
 ('n', "'"),
 ('n', 'w'),
 ('n', 'o'),
 ('n', 'r'),
 ('n', 's'),
 ('n', 't'),
 ('n', "'"),
 ('n', ','),
 ('n', ' '),
 ('n', "'"),
 ('n', 's'),
 ('n', 'e'),
 ('n', 'r'),
 ('n', 'v'),
 ('n', 'i'),
 ('n', 'c'),
 ('n', 'e'),
 ('n', "'"),
 ('n', ']'),
 ('t', "'"),
 ('t', ','),
 ('t', ' '),
 ('t', "'"),
 ('t', 'w'),
 ('t', 'o'),
 ('t', 'r'),
 ('t', 's'),
 ('t', 't'),
 ('t', "'"),
 ('t', ','),
 ('t', ' '),
 ('t', "'"),
 ('t', 's'),
 ('t', 'e'),
 ('t', 'r'),
 ('t', 'v'),
 ('t', 'i'),
 ('t', 'c'),
 ('t', 'e'),
 ('t', "'"),
 ('t', ']'),
 ("'", ','),
 ("'", ' '),
 ("'", "'"),
 ("'", 'w'),
 ("'", 'o'),
 ("'", 'r'),
 ("'", 's'),
 ("'", 't'),
 ("'", "'"),
 ("'", ','),
 ("'", ' '),
 ("'", "'"),
 ("'", 's'),
 ("'", 'e'),
 ("'", 'r'),
 ("'", 'v'),
 ("'", 'i'),
 ("'", 'c'),
 ("'", 'e'),
 ("'", "'"),
 ("'", ']'),
 (',', ' '),
 (',', "'"),
 (',', 'w'),
 (',', 'o'),
 (',', 'r'),
 (',', 's'),
 (',', 't'),
 (',', "'"),
 (',', ','),
 (',', ' '),
 (',', "'"),
 (',', 's'),
 (',', 'e'),
 (',', 'r'),
 (',', 'v'),
 (',', 'i'),
 (',', 'c'),
 (',', 'e'),
 (',', "'"),
 (',', ']'),
 (' ', "'"),
 (' ', 'w'),
 (' ', 'o'),
 (' ', 'r'),
 (' ', 's'),
 (' ', 't'),
 (' ', "'"),
 (' ', ','),
 (' ', ' '),
 (' ', "'"),
 (' ', 's'),
 (' ', 'e'),
 (' ', 'r'),
 (' ', 'v'),
 (' ', 'i'),
 (' ', 'c'),
 (' ', 'e'),
 (' ', "'"),
 (' ', ']'),
 ("'", 'w'),
 ("'", 'o'),
 ("'", 'r'),
 ("'", 's'),
 ("'", 't'),
 ("'", "'"),
 ("'", ','),
 ("'", ' '),
 ("'", "'"),
 ("'", 's'),
 ("'", 'e'),
 ("'", 'r'),
 ("'", 'v'),
 ("'", 'i'),
 ("'", 'c'),
 ("'", 'e'),
 ("'", "'"),
 ("'", ']'),
 ('w', 'o'),
 ('w', 'r'),
 ('w', 's'),
 ('w', 't'),
 ('w', "'"),
 ('w', ','),
 ('w', ' '),
 ('w', "'"),
 ('w', 's'),
 ('w', 'e'),
 ('w', 'r'),
 ('w', 'v'),
 ('w', 'i'),
 ('w', 'c'),
 ('w', 'e'),
 ('w', "'"),
 ('w', ']'),
 ('o', 'r'),
 ('o', 's'),
 ('o', 't'),
 ('o', "'"),
 ('o', ','),
 ('o', ' '),
 ('o', "'"),
 ('o', 's'),
 ('o', 'e'),
 ('o', 'r'),
 ('o', 'v'),
 ('o', 'i'),
 ('o', 'c'),
 ('o', 'e'),
 ('o', "'"),
 ('o', ']'),
 ('r', 's'),
 ('r', 't'),
 ('r', "'"),
 ('r', ','),
 ('r', ' '),
 ('r', "'"),
 ('r', 's'),
 ('r', 'e'),
 ('r', 'r'),
 ('r', 'v'),
 ('r', 'i'),
 ('r', 'c'),
 ('r', 'e'),
 ('r', "'"),
 ('r', ']'),
 ('s', 't'),
 ('s', "'"),
 ('s', ','),
 ('s', ' '),
 ('s', "'"),
 ('s', 's'),
 ('s', 'e'),
 ('s', 'r'),
 ('s', 'v'),
 ('s', 'i'),
 ('s', 'c'),
 ('s', 'e'),
 ('s', "'"),
 ('s', ']'),
 ('t', "'"),
 ('t', ','),
 ('t', ' '),
 ('t', "'"),
 ('t', 's'),
 ('t', 'e'),
 ('t', 'r'),
 ('t', 'v'),
 ('t', 'i'),
 ('t', 'c'),
 ('t', 'e'),
 ('t', "'"),
 ('t', ']'),
 ("'", ','),
 ("'", ' '),
 ("'", "'"),
 ("'", 's'),
 ("'", 'e'),
 ("'", 'r'),
 ("'", 'v'),
 ("'", 'i'),
 ("'", 'c'),
 ("'", 'e'),
 ("'", "'"),
 ("'", ']'),
 (',', ' '),
 (',', "'"),
 (',', 's'),
 (',', 'e'),
 (',', 'r'),
 (',', 'v'),
 (',', 'i'),
 (',', 'c'),
 (',', 'e'),
 (',', "'"),
 (',', ']'),
 (' ', "'"),
 (' ', 's'),
 (' ', 'e'),
 (' ', 'r'),
 (' ', 'v'),
 (' ', 'i'),
 (' ', 'c'),
 (' ', 'e'),
 (' ', "'"),
 (' ', ']'),
 ("'", 's'),
 ("'", 'e'),
 ("'", 'r'),
 ("'", 'v'),
 ("'", 'i'),
 ("'", 'c'),
 ("'", 'e'),
 ("'", "'"),
 ("'", ']'),
 ('s', 'e'),
 ('s', 'r'),
 ('s', 'v'),
 ('s', 'i'),
 ('s', 'c'),
 ('s', 'e'),
 ('s', "'"),
 ('s', ']'),
 ('e', 'r'),
 ('e', 'v'),
 ('e', 'i'),
 ('e', 'c'),
 ('e', 'e'),
 ('e', "'"),
 ('e', ']'),
 ('r', 'v'),
 ('r', 'i'),
 ('r', 'c'),
 ('r', 'e'),
 ('r', "'"),
 ('r', ']'),
 ('v', 'i'),
 ('v', 'c'),
 ('v', 'e'),
 ('v', "'"),
 ('v', ']'),
 ('i', 'c'),
 ('i', 'e'),
 ('i', "'"),
 ('i', ']'),
 ('c', 'e'),
 ('c', "'"),
 ('c', ']'),
 ('e', "'"),
 ('e', ']'),
 ("'", ']')]
</code></pre>
<p>Is there something wrong with the way I have used <code>apply</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried itertools? <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">link to documentation</a></p>
<p><code>retObject = itertools.combinations(word_list, 2)</code></p>
<p>since you want 2 tuples</p>
<p>edits - To return the list </p>
<p><code>s = [tuple(i) for i in retObject]</code></p>
<p>Edited to show that the approach works for a Pandas Series. </p>
<p><code>a = pd.Series(['Zero', 'rating', 'worst', 'service'])</code><br/>
<code>tuplize_faster(a)</code><br/>
output<br/>
<code>[('Zero', 'rating'),
 ('Zero', 'worst'),
 ('Zero', 'service'),
 ('rating', 'worst'),
 ('rating', 'service'),
 ('worst', 'service')]</code></p>
</div>
<span class="comment-copy">What does the dataframe look like? I don't see how this fits into pandas. What is your current performance (<code>timeit</code>)?</span>
<span class="comment-copy">maybe convert the <code>word_list</code> into a set first, to eliminate duplicates?</span>
<span class="comment-copy">@Constance I think the list already only has unique elements, judging by the <code>tuplize</code> function.</span>
<span class="comment-copy">@FHTMitchell It depends on the length of the 'dataframe', I guess. Running it on a simple list, <code>a = ['a', 'b', 'c']</code> gave me result and timing it gave me this message, <code>The slowest run took 6.85 times longer than the fastest. This could mean that an intermediate result is being cached. 100000 loops, best of 3: 5.57 µs per loop</code>.  Running it on a <code>dataframe</code> gave this message: <code>1 loop, best of 3: 1.63 s per loop</code></span>
<span class="comment-copy">Can you provide example sample inputs and outputs?</span>
<span class="comment-copy">This works perfectly and is a lot faster. Thanks :)</span>
<span class="comment-copy">@LaBee - Is this question resolved?</span>
<span class="comment-copy">Yes, the same code worked well, I restarted the notebook kernel and ran it again. Thanks :)</span>
