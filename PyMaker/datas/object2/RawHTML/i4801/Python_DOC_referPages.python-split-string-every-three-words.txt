<div class="post-text" itemprop="text">
<p>I've been searching around for a while now, but I can't seem to find the answer to this small problem.</p>
<p>I have this code that is supposed to split the string after every three words:</p>
<pre><code>import re

def splitTextToTriplet(Text):
    x = re.split('^((?:\S+\s+){2}\S+).*',Text)
    return x


print(splitTextToTriplet("Do you know how to sing"))
</code></pre>
<p>Currently the output is as such:</p>
<pre><code>['', 'Do you know', '']
</code></pre>
<p>But I am actually expecting this output:</p>
<pre><code>['Do you know', 'how to sing'] 
</code></pre>
<p>And if I print(splitTextToTriplet("Do you know how to")), it should also output:</p>
<pre><code>['Do you know', 'how to'] 
</code></pre>
<p>how can I change the regex so it produces the expected output?</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe <code>re.split</code> might not be the best approach for this since look-behind cannot take variable-length patterns.</p>
<p>Instead, you could use <code>str.split</code> and then join back words together.</p>
<pre><code>def splitTextToTriplet(string):
    words = string.split()
    grouped_words = [' '.join(words[i: i + 3]) for i in range(0, len(words), 3)]
    return grouped_words

splitTextToTriplet("Do you know how to sing")
# ['Do you know', 'how to sing']

splitTextToTriplet("Do you know how to")
# ['Do you know', 'how to'] 
</code></pre>
<p>Although be advised that with this solution, if some of your white spaces are linebreaks, that information will be lost in the process.</p>
</div>
<div class="post-text" itemprop="text">
<p>I used <code>re.findall</code> for the output you expected. To get more generic split function, I replaced <code>splitTextToTriplet</code> on <code>splitTextonWords</code> with <code>numberOfWords</code> as a param:</p>
<pre><code>import re

def splitTextonWords(Text, numberOfWords=1):
    if (numberOfWords &gt; 1):
        text = Text.lstrip()
        pattern = '(?:\S+\s*){1,'+str(numberOfWords-1)+'}\S+(?!=\s*)'
        x =re.findall(pattern,text)
    elif (numberOfWords == 1):
        x = Text.split()
    else: 
        x = None
    return x

print(splitTextonWords("Do you know how to sing", 3))
print(splitTextonWords("Do you know how to", 3))
print(splitTextonWords("Do you know how to sing how to dance how to", 3))
print(splitTextonWords("A sentence this code will fail at", 3))
print(splitTextonWords("A sentence this             code will fail at ", 3))
print(splitTextonWords("   A sentence this code will fail at s", 3))
print(splitTextonWords("   A sentence this code will fail at s", 4))
print(splitTextonWords("   A sentence this code will fail at s", 2))
print(splitTextonWords("   A sentence this code will fail at s", 1))
print(splitTextonWords("   A sentence this code will fail at s", 0))
</code></pre>
<p>output:</p>
<blockquote>
<p>['Do you know', 'how to sing']<br/>
  ['Do you know', 'how to']<br/>
  ['Do you know', 'how to sing', 'how to dance', 'how to']<br/>
  ['A sentence this', 'code will fail', 'at']<br/>
  ['A sentence this', 'code will fail', 'at']<br/>
  ['A sentence this', 'code will fail', 'at s']<br/>
  ['A sentence this code', 'will fail at s']<br/>
  ['A sentence', 'this code', 'will fail', 'at s']<br/>
  ['A', 'sentence', 'this', 'code', 'will', 'fail', 'at', 's']<br/>
  None<br/></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Using the <code>grouper</code> <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertools recipe</a>:</p>
<pre><code>import itertools


def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)
</code></pre>
<p>See also the <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.grouper" rel="nofollow noreferrer"><code>more_itertools</code></a> third-party library that implements this recipe for you.</p>
<p><strong>Code</strong></p>
<pre><code>def split_text_to_triplet(s):
    """Return strings of three words."""
    return [" ".join(c) for c in grouper(3, s.split())]


split_text_to_triplet("Do you know how to sing")
# ['Do you know', 'how to sing']
</code></pre>
</div>
<span class="comment-copy">Does the solution have to be regex? Is there any additional logic needed besides splitting the string in two after the third word?</span>
<span class="comment-copy">I agree with @thesilkworm. There are potentially easier ways to do this, than using regex. Is regex a requirement?</span>
<span class="comment-copy">Not really. But  if you have another suggestion how to approach this, I am okay with that as well. XD</span>
<span class="comment-copy">use <code>re.findall</code></span>
<span class="comment-copy">Oh... it didn't read the last word. Why though?</span>
<span class="comment-copy">I fixed the problem</span>
<span class="comment-copy">I want to accept both answer but I can only press that click once. I think I'm going to edit the title so all people can find it.</span>
