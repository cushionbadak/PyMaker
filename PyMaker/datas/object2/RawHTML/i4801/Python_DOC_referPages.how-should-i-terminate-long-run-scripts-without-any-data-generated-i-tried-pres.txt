<div class="post-text" itemprop="text">
<p>This is really interesting.
I have following scripts on my linux machine:</p>
<p><strong>sleep.py</strong></p>
<pre><code>import time
from datetime import datetime
print(datetime.now())
time.sleep(20)
print('Over!')
print(datetime.now())
</code></pre>
<p><strong>loop.py</strong></p>
<pre><code>import time
for i in range(20):
    time.sleep(1)
    print(i)
</code></pre>
<p>I can terminate them directly by <code>ctrl+c</code> if I login through PuTTY or git-bash.
But when I trying to run the Python scripts on Windows console:</p>
<p><strong>test.py</strong></p>
<pre><code>def ssh_pty_command(cmd, ip, username, passwd=None, key_filename=None):
    """run ssh.exec_command with realtime output and return exit_code."""
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        logging.debug('Connecting to remote server {}...'.format(ip))
        ssh.connect(ip, 22, username, password=passwd,
                    key_filename=key_filename, timeout=5)
        stdin, stdout, stderr = ssh.exec_command(cmd, get_pty=True)
        logging.info('ssh_In: {}'.format(cmd))
        # print '$: {}'.format(cmd)
        for line in iter(stdout.readline, ""):
            logging.info('ssh_Out: {}'.format(
                line.rstrip('\n').encode('utf-8')))
        for err in iter(stderr.readline, ""):
            logging.error('ssh_Error: {}'.format(
                err.rstrip().encode('utf-8')))
        exit_code = stdout.channel.recv_exit_status()
        logging.debug('Task exit with code {}.\n'.format(exit_code))
        return exit_code
    except Exception as err:
        logging.error('*** Caught SSH exception: %s: %s' %
                      (err.__class__, err))
        raise
    finally:
        ssh.close()

  ssh_pty_command('python loop.py',ip,username)
  ssh_pty_command('python sleep.py',ip,username)
</code></pre>
<p>When I press <code>ctrl+c</code> , the <code>loop.py</code> terminated immediately, but the <code>sleep.py</code> waits until the <code>time.sleep(20)</code> is finished and then terminate the execution.
<strong>How can I terminate the <code>sleep.py</code> immediately?</strong></p>
<p><strong>Note</strong> I did try to use <code>get_pty=True</code> in my <code>exec_command</code> method in my function, but it didn't help.
I guess it should have something to do with the signal sent by Paramiko, but not sure where to dig in...</p>
</div>
<div class="post-text" itemprop="text">
<p><kbd>Ctrl+C</kbd> signals an interrupt. Python interpreter checks for the interrupt regularly, and raises <code>KeyboardInterrupt</code> exception, when it detects one.</p>
<p>When Paramiko is waiting for an incoming data on a socket, the checking for interrupts is probably suspended (just guessing). So if a remote command is not producing any output, you cannot break the <em>local</em> script. </p>
<p>Your <code>loop.py</code> produces an output using <code>print(i)</code>, so your local Python script can be interrupted at the moment it's processing the output.</p>
<p>In any case, it's not the <em>remote</em> script that cannot be interrupted, it's the <em>local</em> script. So it has probably nothing to do with <code>time.sleep</code> as such.</p>
<p>See also:</p>
<ul>
<li><a href="https://stackoverflow.com/q/1364173/850848">Stopping python using ctrl+c</a></li>
<li><a href="https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt" rel="nofollow noreferrer">https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt</a></li>
</ul>
<hr/>
<p>If you actually do not want to wait for the command to finish, your question is not really about Python (nor Paramiko), but about Linux. See <a href="https://unix.stackexchange.com/q/30400/119732">Execute remote commands, completely detaching from the ssh connection</a>.</p>
</div>
<span class="comment-copy">It's not really clear what do you do to terminate the commands. Do press Ctrl+C in the <b>local</b> Python console window?</span>
<span class="comment-copy">@MartinPrikryl, yes, that's what I do exactly! Sorry for the confusion, I find no where to edit my question again.</span>
<span class="comment-copy">Oh man, you are right! When I delete the print(i) in loop.py, it also fails, it has nothing to do with time.sleep.</span>
<span class="comment-copy">But the question remain the same, how can I terminate any long run script without data on a socket?</span>
<span class="comment-copy">Try checking <code>.readable</code> before <code>.readline</code>, not to block the script, when there's no data (and sleep local script for a short period, when <code>!readable</code>).</span>
<span class="comment-copy">The problem is that I don't have much control of the local scripts, it could be written by someone else. What I want to do is simply terminate the python scripts without waiting remotely via paramiko.</span>
<span class="comment-copy"><b>But it's the local script that prevents the interruption!</b> You should not try to fix that from the remote script. You can of course hack it by producing sopme output (as your <code>loop.py</code> does). But that's just a hack in a response to a particular known behavior of the local script. - And note that you can use <code>Ctrl+Break</code> to forcefully terminate local script.</span>
