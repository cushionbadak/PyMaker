<div class="post-text" itemprop="text">
<p>Here is the given list. </p>
<pre><code>   Pets = [{'f1': {'dogs': 2, 'cats': 3, 'fish': 1},
         'f2': {'dogs': 3, 'cats': 2}},
        {'f1': {'dogs': 5, 'cats': 2, 'fish': 3}}]
</code></pre>
<p>I need to use the map and reduce function so that I can have a final result of </p>
<pre><code>{'dogs': 10, 'cats': 7, 'fish': 4}
</code></pre>
<p>I have written a function using map</p>
<pre><code>def addDict(d):
    d2 = {}
    for outKey, inKey in d.items():
        for inVal in inKey:
            if inVal in d2:
                d2[inVal] += inKey[inVal]
            else:
                d2[inVal] = inKey[inVal]
    return d2


def addDictN(L):
    d2 = list(map(addDict, L))
    print(d2)
</code></pre>
<p>That returns</p>
<pre><code>[{'dogs': 5, 'cats': 5, 'fish': 1}, {'dogs': 5, 'cats': 2, 'fish': 3}]
</code></pre>
<p>It combines the f1 and f2 of the first and second dictionaries, but I am unsure of how to use reduce on the dictionaries to get the final result. </p>
</div>
<div class="post-text" itemprop="text">
<p>Without using <code>map</code> and <code>reduce</code>, I would be inclined to do something like this:</p>
<pre><code>from collections import defaultdict
result = defaultdict()
for fdict in pets:
    for f in fdict.keys():
        for pet, count in fdict[f].items():
            result[pet] += count
</code></pre>
<p>Using <code>reduce</code> (which really is <em>not</em> the right function for the job, and is not in Python 3) on your current progress would be something like this:</p>
<pre><code>from collections import Counter
pets = [{'dogs': 5, 'cats': 5, 'fish': 1}, {'dogs': 5, 'cats': 2, 'fish': 3}]
result = reduce(lambda x, y: x + Counter(y), pets, Counter())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a> to sum your list of counter dictionaries.</p>
<p>Moreover, your dictionary flattening logic can be optimised via <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain</code></a>.</p>
<pre><code>from itertools import chain
from collections import Counter

Pets = [{'f1': {'dogs': 2, 'cats': 3, 'fish': 1},
         'f2': {'dogs': 3, 'cats': 2}},
        {'f1': {'dogs': 5, 'cats': 2, 'fish': 3}}]

lst = list(chain.from_iterable([i.values() for i in Pets]))

lst_sum = sum(map(Counter, lst), Counter())

# Counter({'cats': 7, 'dogs': 10, 'fish': 4})
</code></pre>
<p>This works for an arbitrary length list of dictionaries, with no key matching requirements across dictionaries.</p>
<p>The second parameter of <code>sum</code> is a start value. It is set to an empty Counter object to avoid <code>TypeError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use purely <code>map</code> and <code>reduce</code> like so:</p>
<pre><code>Pets = [{'f1': {'dogs': 2, 'cats': 3, 'fish': 1},
     'f2': {'dogs': 3, 'cats': 2}},
    {'f1': {'dogs': 5, 'cats': 2, 'fish': 3}}]

new_pets = reduce(lambda x, y:[b.items() for _, b in x.items()]+[b.items() for _, b in y.items()], Pets)
final_pets = dict(reduce(lambda x, y:map(lambda c:(c, dict(x).get(c, 0)+dict(y).get(c, 0)), ['dogs', 'cats', 'fish']), new_pets))
</code></pre>
<p>Output:</p>
<pre><code>{'fish': 4, 'cats': 7, 'dogs': 10}
</code></pre>
</div>
<span class="comment-copy">Any particular reason why you have to use <code>map</code> and <code>reduce</code>?</span>
<span class="comment-copy">@DavidA Its just the requirements for this particular function. I understand how to use the map function, and I think I understand reduce, but I have no idea how to run it with dictionaries</span>
<span class="comment-copy">I use <code>from functools import reduce</code> in order to use the reduce function. Thank you for the response</span>
<span class="comment-copy">hello, can i ask what is the role of of <code>map(counter,lst)</code> ? it doesnt seem to be callable function.</span>
<span class="comment-copy">Sure, it's actually <code>map(Counter, lst)</code>. It applies <code>Counter</code> to every element of <code>lst</code>. It is an iterator, so you need to apply another function to it to see its output, e.g. <code>list</code> or <code>sum</code>.</span>
<span class="comment-copy">Ah, so it's an iterator object like <code>itertools.combinations</code> it doesn't execute until you list or evaluate it, thanks for the tip.</span>
<span class="comment-copy">How would you do this without explicitly saying 'dogs' 'cats' 'fish' so that any list could be passed into the function?</span>
<span class="comment-copy">@TrashMachine139 Does that mean that there could be other keys used besides <code>['dogs', 'cats', 'fish']</code>?</span>
