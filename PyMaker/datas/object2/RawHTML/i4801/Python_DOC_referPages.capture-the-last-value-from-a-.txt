<div class="post-text" itemprop="text">
<p>Let's assume we want to have a generator that is recursively yielding values and, as a convenience, we have a sub-iterator that we yield from.</p>
<pre><code>def gen(l, last_value=0):

    if not l:
        return None

    yield from (l[0] + i + last_value for i in range(3))
    yield from gen(l[1:])
</code></pre>
<p>How can we capture the last returned value from the sub-iterator, so that we can feed it to the second one?</p>
<p>Is this even possible?</p>
<p>Here is a possible solution, that drops the use of the yield from:</p>
<pre><code>def gen(l, last_value=0):

    if not l:
        return None

    for x in (l[0] + i + last_value for i in range(3)):
        yield x

    yield from gen(l[1:], x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As we are aware of sub-iterator's length in this case, we can slice it using <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a> till the second last item and then fetch the last item by simply calling <code>next()</code> on the remaining slice.</p>
<p>Using <code>islice</code> you prevent a Python level for-loop:</p>
<pre><code>from itertools import islice

def gen(l, last_value=0):

    if not l:
        return None

    it = (l[0] + i + last_value for i in range(3))
    yield from islice(it, 2)
    last = next(it)
    yield last
    yield from gen(l[1:], last)
</code></pre>
<hr/>
<p>Another way, but something that defeats the purpose of using an iterator is using the <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">extended variable unpacking</a>:</p>
<pre><code>it = (l[0] + i + last_value for i in range(3))
*items, last = it # Now items is a tuple
yield from items
yield last
yield from gen(l[1:], last)
</code></pre>
</div>
<span class="comment-copy">If we have control ove the  sub-iterator we can return a value once it is exhausted. Which can work in cases where you have control over the sub-iterator.  <code>extended variable unpacking</code> can't believe I did not know of the existence of such a feature. Thanks!</span>
