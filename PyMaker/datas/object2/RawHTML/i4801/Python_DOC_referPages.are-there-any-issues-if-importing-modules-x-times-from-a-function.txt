<div class="post-text" itemprop="text">
<p>I extracted and placed the <a href="https://pypi.python.org/pypi/PyPDF2/1.26.0" rel="nofollow noreferrer">PyPDF2 1.26.0</a> toolkit into my plugin directory. The hierarchy looks like this:</p>
<pre><code>plugin
  |__example.py
  |__report
       |__PyPDF2
            |__(PyPDF2 contents)
</code></pre>
<p>In the beginning of the <code>example.py</code> file, I tried to import the PyPDF2 module using:</p>
<pre><code>from report.PyPDF2.PyPDF2 import PdfFileMerger
</code></pre>
<p>Unfortunately, this results in an error:</p>
<blockquote>
<p>ImportError: No module named report.PyPDF2.PyPDF2</p>
</blockquote>
<p>But I can import it using <code>sys</code>:</p>
<pre><code>import os, sys

class plugin:
    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        ...

    def pdf_merger(self):
        # Import PyPDF2
        sys.path.append(str(self.plugin_dir) + '/report/PyPDF2')        
        from PyPDF2 import PdfFileMerger

        merger = PdfFileMerger()
        return merger

    def func(self):
        merger = self.pdf_merger()
        ...
</code></pre>
<hr/>
<p>The issue is that <code>func()</code> will be called multiple times, so each time <code>from PyPDF2 import PdfFileMerger</code> will be run. Would this cause any problems (i.e. memory issues or such) and why could I not import the module using <code>from report.PyPDF2.PyPDF2 import PdfFileMerger</code>?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I extracted and placed the PyPDF2 1.26.0 toolkit into my plugin directory</p>
</blockquote>
<p>I don't know what your "plugin directory" is, but that's not the way to install a python package. You want to use something like <code>pip</code> instead, preferably with a <code>virtualenv</code>.</p>
<blockquote>
<p>ImportError: No module named report.PyPDF2.PyPDF2</p>
</blockquote>
<p>I assume the first "PyPDF2" directory is the github root directory (cf <a href="https://github.com/mstamy2/PyPDF2" rel="nofollow noreferrer">https://github.com/mstamy2/PyPDF2</a>). This directory is not a <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">proper python package</a> (it doesn't have an <code>__init__.py</code> file) but the project's directory. What you want is to only have the "second-level" PyPDF2 directory (which <em>is</em> the actual python package) in "report", and then import from it using <code>from report.PyPDF2 import PdfFileMerger</code>. </p>
<p>But once again, this is not the right way to install a python package, cf above.</p>
<pre><code>def pdf_merger(self):
    # Import PyPDF2
    sys.path.append(str(self.plugin_dir) + '/report/PyPDF2')        
    from PyPDF2 import PdfFileMerger
</code></pre>
<p>This will keep on appending to <code>sys.path</code> over and over and over again (which might indeed end up causing memory issues by itself if your process runs for a few weeks or months, and depending on how often this function is called). IOW : <strong>don't do that</strong>. Properly install PyPDF2 as a dependancy instead (once again, <code>pip</code> and <code>virtualenv</code> are your friends) or <em>at least</em> only install the "inner" PyPDF2 package as explained above.</p>
<p>Note that the problem here is not with importing the same module over and over again (the very first import will cache the module) but with appending to <code>sys.path</code> over and over again. The only issue with a "local" import is a very slight performance hit but you would probably never notice it unless this is a critical function called in a very tight loop).</p>
<p>Also and while we're at it:</p>
<pre><code>    sys.path.append(str(self.plugin_dir) + '/report/PyPDF2')        
</code></pre>
<p>1/ there's no need to pass <code>self.plugin_dir</code> to <code>str</code> (it's alreay one), and 
2/ hardcoding path separators is a very bad idea - you want <code>os.path.join(self.plugin_dir, 'report', 'PyPDF2')</code> instead (well in this case you actually want none of this - leave <code>sys.path</code> alone and properly install PyPDF2 instead)</p>
</div>
<div class="post-text" itemprop="text">
<p>Did you try:</p>
<pre><code>from report.PyPDF2 import PdfFileMerger
</code></pre>
<p>Anyway, imported modules are cached, so don't worry if you import one many times.</p>
</div>
<span class="comment-copy">Thanks for your answer. I have used <code>pip</code> before but wanted to see if this method would work (which it does to some extent) :)</span>
<span class="comment-copy">Thanks for your answer, the issue still remains.</span>
