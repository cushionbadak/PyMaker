<div class="post-text" itemprop="text">
<p>min, max have O(N) time complexity because they have to loop over the given list/string and check every index to find min/max. But I am wondering what would be the time complexity of min,max if used on a set? For example:</p>
<pre><code>s = {1,2,3,4} # s is a set
</code></pre>
<p>using min/max we get:</p>
<pre><code>min(s) = 1
max(s) = 4
</code></pre>
<p>Since sets do not use indices like lists and strings, but instead operate using buckets that can be accessed directly, does the time complexity of min/max differ than the general case?</p>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>As pointed out in the comments above, python is a well documented language and one must always refer to the docs first. </p>
<p>Answering the question, according to the <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">docs</a>,</p>
<blockquote>
<p>A set object is an unordered collection of distinct hashable objects.</p>
</blockquote>
<p>Being unordered means that to evaluate maximum or minimum among all the elements using any means (inbuilt or not) would at least require one to look at each element, which means O(n) complexity at best.</p>
<p>On top of it, max and min functions of python iterate over each element and are O(n) in all cases. 
You can always look up the <a href="https://hg.python.org/cpython/file/de17b0cf1a20/Python/bltinmodule.c#l1260" rel="nofollow noreferrer">source code</a> yourself.</p>
</div>
<span class="comment-copy">You are aware that <a href="https://github.com/python/cpython" rel="nofollow noreferrer">python</a> is open source, well-commented and easy-to-understand, right?</span>
<span class="comment-copy">You must still check all elements, or how would the <code>set</code> know? If you know up front, that you need the min and max values, you can store them along with your data. However, then you end up with O(log n) when deleting elements.</span>
<span class="comment-copy">If they're not sorted set, they're likely O(n).</span>
<span class="comment-copy">You may be able to utilize a sorted set to get better than O(n) min max operations: <a href="https://stackoverflow.com/questions/1653970/does-python-have-an-ordered-set" title="does python have an ordered set">stackoverflow.com/questions/1653970/â€¦</a></span>
