<div class="post-text" itemprop="text">
<p>Update: I realize now that errors can occur when you scale down your code and then post a question. This is the same question but with the sample code matching the true situation. I also learned that you don't need the line continuation "\" when your python expression is ending in a comma ",".</p>
<hr/>
<p>I can certainly get my projection/sum dictionary by using <code>for</code> loops, but is there a more Pythonic method? If <code>for</code> loops must be used is there a 'best python practice'.</p>
<p>Also, if any of my wording is off please let me know the proper way to frame this using python terminology.</p>
<p>Here is the code:</p>
<pre><code>import sys
from collections import defaultdict
D = defaultdict(int)
while True:
    D = { ('a', 'mike'):  1, 
          ('b', 'mike'):  2,
          ('c', 'mike'):  3, 
          ('b', 'tom'):   1, 
          ('e', 'mary'): 11,
          ('k', 'mike'):  2, 
          ('f', 'mike'):  1, 
          ('z', 'tom'):   1,  
        }
    #print (D)
    # how to create prD:
    prD_A = defaultdict(int)    
    prD_A = { 'mike': 9, 'tom': 2, 'mary': 11 }

#Answer supplied by Delirious Lettuce:

    prD_B = defaultdict(int)
    for k, v in D.items():
        _, name = k
        prD_B[name] += v

    #print(prD_B) 

    if prD_A == prD_B:
        print("Same result")

    sys.exit() # END PROGRAM        
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You were asked in the comments whether or not your keys were supposed to be strings (of tuples) or tuples themselves. Since you didn't really answer, here are two versions which account for both possibilities.</p>
<pre><code># Keys as strings of tuples
In[2]: correct = {'mike': 9, 'tom': 2, 'mary': 11}
In[3]: my_dict = {
  ...:     "('a', 'mike')": 1,
  ...:     "('b', 'mike')": 2,
  ...:     "('c', 'mike')": 3,
  ...:     "('b', 'tom')": 1,
  ...:     "('e', 'mary')": 11,
  ...:     "('k', 'mike')": 2,
  ...:     "('f', 'mike')": 1,
  ...:     "('z', 'tom')": 1
  ...: }
In[4]: from ast import literal_eval
  ...: from collections import defaultdict
  ...: 
  ...: result = defaultdict(int)
  ...: for k, v in my_dict.items():
  ...:     _, name = literal_eval(k)
  ...:     result[name] += v
  ...: 
In[5]: result == correct
Out[5]: True

# Keys as actual tuples
In[6]: my_dict_2 = {
  ...:     ('a', 'mike'): 1,
  ...:     ('b', 'mike'): 2,
  ...:     ('c', 'mike'): 3,
  ...:     ('b', 'tom'): 1,
  ...:     ('e', 'mary'): 11,
  ...:     ('k', 'mike'): 2,
  ...:     ('f', 'mike'): 1,
  ...:     ('z', 'tom'): 1
  ...: }
In[7]: from collections import defaultdict
  ...: 
  ...: result_2 = defaultdict(int)
  ...: for k, v in my_dict_2.items():
  ...:     _, name = k
  ...:     result_2[name] += v
  ...: 
In[8]: result_2 == correct
Out[8]: True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>here is my solution for your problem:
But it has one assumption, the key to your dictionary must be a tuple instead of a string</p>
<pre><code>from functools import reduce
from itertools import groupby
D = { ('a', 'mike'): 1,  
          ('b', 'mike'): 2,  
          ('c', 'mike'): 3,  
          ('b', 'tom'): 1,   
          ('e', 'mary'): 11, 
          ('k', 'mike'): 2,  
          ('f', 'mike'): 1,  
          ('z', 'tom'): 1,   
        }
D = [ (k[1], v)  for k, v in D.items()]
results={}
for a_key , a_groups in groupby(sorted(D), lambda x: x[0]):
    results[a_key] = reduce((lambda x, y : x+y[1]), list(a_groups), 0)
</code></pre>
<p>here are the steps :</p>
<ol>
<li>I created the list of tuples from your input dictionary, the first element is the name, the second is the number.</li>
<li>was to sort the array, it's important for the groupby function.</li>
<li>group the items in the list day using the name as a key</li>
<li>Sum the element in the groups iterator using reduce and put the final results in a dictionary.<code>{'mary': 11, 'mike': 9, 'tom': 2}</code></li>
</ol>
<p>if your input was is a string as you posted : </p>
<p>create the list like this :</p>
<pre><code>D = [ (k.split(", ")[1].replace("'", "").replace("\'", "").replace(")", ""), v)  for k, v in D.items()]
</code></pre>
<p>but it still dirty a solution using regex solution may be better.</p>
</div>
<span class="comment-copy">For loops are pythonic.</span>
<span class="comment-copy">Are your keys tuple or do you actually want them to be strings?</span>
<span class="comment-copy">@wwi   guess I should delete my questiion</span>
<span class="comment-copy">@ol I have a working program and this is what is working. #noDesign</span>
<span class="comment-copy">Donâ€™t delete your question instead post the answer it could help others with the same problems, you could also grab some upvotes from your answer</span>
<span class="comment-copy">Plus 1 for ussing literal</span>
<span class="comment-copy">Is ast in python standard library ??</span>
<span class="comment-copy">@EspoirMurhabazi Yep, <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer">docs.python.org/3/library/ast.html#ast.literal_eval</a></span>
<span class="comment-copy">I am not exactly sure what python does when it sees  <code>_, name = k</code>, but it looks like you can easily 'parse out' the coordinates of a tuple.</span>
<span class="comment-copy">@MikeMathMan Here are a few examples to try to explain it: <a href="https://bpaste.net/show/6aad0e0da1e0" rel="nofollow noreferrer">bpaste.net/show/6aad0e0da1e0</a></span>
<span class="comment-copy">This question doesn't seem to need any sorting whatsoever. Your solution seems over-complicated for the actual question. Also, why would you use <code>key=lambda x: x[0]</code> when that is essentially the default sort? In this case, <code>sorted(D, key=lambda x: x[0]) == sorted(D)</code>. There seems to be a much simpler way to solve this question by simply iterating once through the unsorted/grouped key/value pairs.</span>
<span class="comment-copy">Yes @DeliriousLettuce , thanks for taking time to review, noticed that your answer seems better</span>
<span class="comment-copy">I was only trying to say your answer could be simplified, not that mine was better. Your answer is still valid because it produces the correct result.</span>
