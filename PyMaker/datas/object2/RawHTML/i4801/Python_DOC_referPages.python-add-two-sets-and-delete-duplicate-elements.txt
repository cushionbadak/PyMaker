<div class="post-text" itemprop="text">
<p>How to add two sets and delete duplicates</p>
<pre><code>&gt;&gt;&gt; a = set(['a', 'b', 'c'])
&gt;&gt;&gt; b = set(['c', 'd', 'e'])
&gt;&gt;&gt; c = a + b
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'set' and 'set'
&gt;&gt;&gt;

Expected output:
c = set(['a','b','c', 'd', 'e']) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>&gt;&gt;&gt; a = set(['a', 'b', 'c'])
&gt;&gt;&gt; b = set(['c', 'd', 'e'])
&gt;&gt;&gt; c = a.union(b)
</code></pre>
<p>Result:</p>
<blockquote>
<p><code>set(['a','b','c', 'd', 'e'])</code></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can get the union of both sets using the logical or operator <code>|</code></p>
<pre><code>a = set(['a', 'b', 'c'])
b = set(['c', 'd', 'e'])
c = a | b

print(c)
</code></pre>
<blockquote>
<p>{'e', 'a', 'b', 'd', 'c'}</p>
</blockquote>
<p>If you want the set ordered and as a list </p>
<pre><code>c = sorted(list(c))
print(c)
</code></pre>
<blockquote>
<p>['a', 'b', 'c', 'd', 'e']</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><strong>Use <code>union</code> method</strong></p>
<p>You want to use the <code>union</code> method of a set:</p>
<pre><code>c = a.union(b)
</code></pre>
<p><a href="https://docs.python.org/2/library/stdtypes.html#frozenset.union" rel="nofollow noreferrer">https://docs.python.org/2/library/stdtypes.html#frozenset.union</a>
<a href="https://docs.python.org/3/library/stdtypes.html?highlight=sets#frozenset.union" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html?highlight=sets#frozenset.union</a></p>
<p>The union method is the same as the <code>|</code> operator, so the line of code above is equivalent to</p>
<pre><code>c = a | b
</code></pre>
<p><strong>Use in-place operator</strong></p>
<p>If you have no need to retain <code>a</code> or <code>b</code>, it would be better to use the <code>update</code> method, which will add the new members in place. That is,</p>
<pre><code>a.update(b)
</code></pre>
<p>will produce the union in the existing data structure <code>a</code>. This is also performed by the equivalent code</p>
<pre><code>a |= b
</code></pre>
<p><strong>Sidenote: use <code>set</code> literal</strong></p>
<p>In the code you provide, it would be faster to use the set literal notation with <code>{element, element, ...}</code>:</p>
<pre><code>a = {'a', 'b', 'c'}
</code></pre>
<p>because it will execute twice as fast and not generate the unused list object.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>c = set(set(list(a) + list(b))
</code></pre>
<p>set() return <code>&lt;str set&gt;</code> so can't add two set together</p>
<p><a href="https://docs.python.org/2/library/sets.html" rel="nofollow noreferrer">https://docs.python.org/2/library/sets.html</a></p>
</div>
<span class="comment-copy"><code>union</code> or <code>update </code></span>
<span class="comment-copy">Sets don't have <code>+</code>, they have <code>|</code>. (Or the <code>union</code> method.)</span>
<span class="comment-copy">Also, "delete duplicate elements" is misleadingâ€”sets can't have duplicate elements; there's only going to be one <code>'c'</code> in the output, no matter how you do it.</span>
<span class="comment-copy">The <code>|</code> operator is not the logical OR operator in this case. The operands would have to be Boolean for that operator to be applied. It is the same character, of course.</span>
<span class="comment-copy">Semantics, however: <a href="https://en.wikipedia.org/wiki/Logical_disjunction" rel="nofollow noreferrer">en.wikipedia.org/wiki/Logical_disjunction</a>.</span>
<span class="comment-copy"><code>set.union</code> is a distinct Python function from <code>bool.__or__</code>. They call different code, accept different arguments, and have different behavior. Only the latter, for example, uses shortcut evaluation.</span>
<span class="comment-copy">You're right. Are you compiling everyone's answers into yours?</span>
<span class="comment-copy">@BennettBrown: <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">Boolean operations</a> defines <code>or</code>. It doesn't explain that you can't overload it, but <a href="https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types" rel="nofollow noreferrer">Emulating numeric types</a> does explain that <code>__or__</code> is for <code>|</code>. See <a href="https://www.python.org/dev/peps/pep-0335/" rel="nofollow noreferrer">PEP 335</a> and the linked discussions for suggestions to change this up to 2011, when it was finally (after many years) rejected, and <a href="https://www.python.org/dev/peps/pep-0532/" rel="nofollow noreferrer">PEP 532</a> for a newer deferred-but-still-live proposal.</span>
<span class="comment-copy">What is <code>&lt;str set&gt;</code> supposed to mean, and why should it mean you can't add two sets together? Also, why would you convert the result to a set and then convert it to a set again?</span>
<span class="comment-copy">you can try print " print type(set(['a', 'b', 'c'])) - python 2.7</span>
<span class="comment-copy">Have you actually tried what you suggested? Because it gives <code>&lt;type 'set'&gt;</code>, not <code>&lt;str set&gt;</code>. And of course <code>set()</code> doesn't return the same thing as <code>type(set())</code>; the set type is a type, not a set. And meanwhile, why would the name of the type control which operators it supports? It's the dunder methods (or type slots, for builtins) that control that.</span>
