<div class="post-text" itemprop="text">
<pre><code>def adjacentElementsProduct(inputArray):
    i = 0
    n = []
    t = int(0)
    b = int(1)
    while i &lt; len(inputArray):
        noob = inputArray[t] * inputArray[b]
        t += 1
        b += 1
        i += 1
        n.append(noob)
    return n

print(adjacentElementsProduct([3, 6, -2, -5, 7, 3]))
</code></pre>
<p>Can some one help me when I try to execute this its return </p>
<pre><code>IndexError: list index out of range
</code></pre>
<p>Sorry for my bad English Grammar</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to change your loop so that <code>i</code> only iterates up to <code>len(inputArray) - 1</code>.</p>
<p>Like this:</p>
<pre><code>def adjacentElementsProduct(inputArray):
    i = 0
    n = []
    t = 0
    b = 1
    while i &lt; len(inputArray) - 1:
        noob = inputArray[t] * inputArray[b]
        t += 1
        b += 1
        i += 1
        n.append(noob)
    return n

print(adjacentElementsProduct([3, 6, -2, -5, 7, 3]))
</code></pre>
<p>This is because your <code>noob</code> array is essentially just each adjacent pair of elements in <code>inputArray</code>. Naturally, the number of pairs in a <code>list</code> of <code>i</code> elements is <code>i - 1</code>. This means that you need to change your loop to stop one iteration before, as it's throwing the <code>IndexError</code> when <code>t</code> is the <code>len(inputArray) - 1</code> and <code>b</code> is the <code>len(inputArray)</code> (<code>b</code> isn't a valid value in the last iteration of your current code as there's not that many elements).</p>
</div>
<div class="post-text" itemprop="text">
<p>Here you set <code>i=0</code>, <code>t=0</code>, and <code>b=1</code>, thus your <code>b</code> always greater than <code>i</code> by 1. So, in the last loop (where <code>t</code> and <code>i</code> should equal <code>len(inputArray) -1</code>), the value of <code>b</code> should be <code>len(inputArray)</code> which is bigger than the length of your array.<br/>
I am not very sure about your excepted output, but I guess you could fix it like following: </p>
<pre><code>while i &lt; len(inputArray) - 1:
    noob = inputArray[t] * inputArray[b]
    t += 1
    b += 1
    i += 1
    n.append(noob)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can change the <code>while</code> loop for a <code>for</code> loop and use <code>try / except</code> to return the result when it reaches the end of the iteration.  You can also add in extra <code>except</code> clauses to catch other errors and make use of <code>else</code> and <code>finally</code> if needs be .. <a href="https://docs.python.org/3/tutorial/errors.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/errors.html</a></p>
<pre><code>def adjacentElementsProduct(inputArray):
    i = 0
    n = []
    t = int(0)
    b = int(1)
    for i in range(len(inputArray)):
        try:
            noob = inputArray[t] * inputArray[b]
            t += 1
            b += 1
            i += 1
            n.append(noob)

        except IndexError:
            return n
    return n

print(adjacentElementsProduct([3, 6, -2, -5, 7, 3]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>l=[3, 6, -2, -5, 7, 3]
print([x*y for x,y in zip(l,l[1:])])
</code></pre>
<p>Here <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> is used to create the adjacency pair</p>
</div>
<span class="comment-copy">Trace the values. You'll get it.</span>
<span class="comment-copy">Thanks. This is very helpful :)</span>
<span class="comment-copy">@Flame25 No problem :) Please can you accept (and possibly upvote ;) ) this answer if it helped you? (as this will help those in the future who encounter your problem to know which solution worked for you)</span>
<span class="comment-copy">While this code may answer the question, providing additional context regarding why and/or how this code answers the question improves its long-term value.</span>
