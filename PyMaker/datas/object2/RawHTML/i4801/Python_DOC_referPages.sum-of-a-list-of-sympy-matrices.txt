<div class="post-text" itemprop="text">
<p>My python list contains sympy matrix object, and I need to sum them all.
If all list elements are just symbols, then using built-in sum function in python works fine.</p>
<pre><code>import sympy as sp
x = sp.symbols('x')
ls = [x, x+1, x**2]
print(sum(ls))

&gt;&gt;&gt; x**2 + 2*x + 1
</code></pre>
<p>But for the elements of matrix type, sum function looks not working.</p>
<pre><code>import sympy as sp
ls = [sp.eye(2), sp.eye(2)*5, sp.eye(2)*3]
print(sum(ls))

&gt;&gt;&gt; TypeError: cannot add &lt;class 'sympy.matrices.dense.MutableDenseMatrix'&gt; and &lt;class 'int'&gt;
</code></pre>
<p>How can I resolve this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is why Python's <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer"><code>sum</code> function</a> has an optional "start" argument: so you can initialize it with a "zero object" of the kind you are adding. In this case, with a zero matrix. </p>
<pre><code>&gt;&gt;&gt; print(sum(ls, sp.zeros(2)))
Matrix([[9, 0], [0, 9]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't really know how the built-in function <code>sum</code> works, perhaps it kinda looks like this. </p>
<pre><code>def _sum(data):
    total = 0
    for i in data:
        total += i
    return total
</code></pre>
<p>Now consider the following lines of code.</p>
<pre><code>&gt;&gt;&gt; import sympy
&gt;&gt;&gt; x = sympy.symbols('x')
&gt;&gt;&gt; x
x
&gt;&gt;&gt; print(0+x)
x
&gt;&gt;&gt; x = sympy.symbols('x')
&gt;&gt;&gt; matrix=sympy.eye(3)
&gt;&gt;&gt; matrix
Matrix([
[1, 0, 0],
[0, 1, 0],
[0, 0, 1]])
&gt;&gt;&gt; print(0+x)
x
&gt;&gt;&gt; print(0+matrix)
Traceback (most recent call last):
  File "&lt;pyshell#50&gt;", line 1, in &lt;module&gt;
    print(0+matrix)
  File "C:\Python36\lib\site-packages\sympy\core\decorators.py", line 132, in binary_op_wrapper
    return func(self, other)
  File "C:\Python36\lib\site-packages\sympy\matrices\common.py", line 2061, in __radd__
    return self + other
  File "C:\Python36\lib\site-packages\sympy\core\decorators.py", line 132, in binary_op_wrapper
    return func(self, other)
  File "C:\Python36\lib\site-packages\sympy\matrices\common.py", line 1964, in __add__
    raise TypeError('cannot add %s and %s' % (type(self), type(other)))
TypeError: cannot add &lt;class 'sympy.matrices.dense.MutableDenseMatrix'&gt; and &lt;class 'int'&gt;
&gt;&gt;&gt; 
</code></pre>
<p>What we can conclude is you add any <code>sympy.core.symbol.Symbol</code>(btw there are more such as Sum and Pow) to integer but not <code>sympy.matrices.dense.MutableDenseMatrix</code></p>
</div>
<span class="comment-copy">The role of <code>start</code> argument of <code>sum</code> function looks like something determines the return type and starting value and type to be added. Initially it is set to be an integer zero, so normal summation works, but since I'm adding Sympy.Matrix type, the starting value should be also that type.</span>
