<div class="post-text" itemprop="text">
<p>I have trying to generate a deck of cards that print out a list of 7 values and then I want to put the list into order. I am a basic python coder and working my way through a python for beginners book I bought. </p>
<pre><code>import random
for x in range(7):
    rank = random.choice( ('A','2','3','4','5','6','7','8','9','T','J','Q','K') )
    suit = random.choice( ('c','d','h','s') )
    card = rank + suit
    print(card)
</code></pre>
<p>how could I put the list into order or am I completely wrong </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import random

#create an empty list
y = list()

# continue picking cards until you have 7 cards -&gt; avoid duplicates
while len(y) &lt; 7:
    rank = random.choice(('A','2','3','4','5','6','7','8','9','T','J','Q','K'))
    suit = random.choice( ('c','d','h','s') )
    card = rank + suit

    #if the card is not present in the list, add it 
    if not card in y:
        y.append(card)

        #sort your list (by 1st letter -&gt; no sort criteria were given)
        y = sorted(y)

print(y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to generate the full deck of cards. It basically gives you a sequence of every element of the first iterable with every element of the second iterable. You can then shuffle the deck using <a href="https://docs.python.org/3/library/random.html#random.shuffle" rel="nofollow noreferrer"><code>random.shuffle</code></a>, just like you would a real deck.</p>
<p>Then take a slice of the first 7 elements and perform a sort on them. </p>
<p>To sort you will need to provide a <code>key</code> function, as the natural sort order is not what you want. We can provide a <code>tuple</code> as a return value of the key function and it acts as a tie breaker for when the first character is the same. What we want to sort on is the index of a particular character in the input <code>tuple</code>s (<code>rank</code>, <code>suit</code>). </p>
<p>The first sorting key just uses the <code>tuple.index</code> method to get the indexes of the particular characters in the <code>tuples</code>. This is simple but it is slow, as it has to count up the <code>tuple</code> every time (O(n) or linear time complexity). Those indices never change, so we can precompute them into a <code>dict</code> and get constant time look up in the key function, which is faster. For applications like this where the tuples are small and number of calculations are small the gains may not be so significant, so either solution is probably acceptable.</p>
<p>I did the sort as rank first then suit. Your question doesnt specify either way, but perhaps sorting them suit is what you want? In which case you should find it a useful exercise to convert the key functions. </p>
<p>Here's the code</p>
<pre><code>from itertools import product
from random import choice, shuffle

rank = ('A','2','3','4','5','6','7','8','9','T','J','Q','K')
suit = ('c','d','h','s')

# make the full deck in the format of a 2 char string
deck = [r+s for r,s in product(rank, suit)]

# inplace shuffle of card
shuffle(deck)

# take the first 7 (we know there will be that many)
hand = deck[:7]

print(hand)

# sorting

# first way, slow but simpler
keyfn = lambda c: (rank.index(c[0]), suit.index(c[1]))
sortedhand = sorted(hand, key=keyfn)

print(sortedhand)

# second way, faster but more complex
def mkkeyfn():
    rankmap = {v: i for i, v in enumerate(rank)}
    suitmap = {v: i for i, v in enumerate(suit)}
    def keyfn(val):
        rank, suit = val
        return rankmap[rank], suitmap[suit]
    return keyfn

sortedhand2 = sorted(hand, key=mkkeyfn())
print(sortedhand2)
</code></pre>
</div>
<span class="comment-copy">What list? You're just printing individual values at the moment.</span>
<span class="comment-copy">my goal is to create a list of 7 values from a deck of cards and then print them in order</span>
<span class="comment-copy">Right, so maybe you should start by <i>actually creating a list?</i> See e.g. <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">docs.python.org/3/tutorial/introduction.html#lists</a>, <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html#more-on-lists</a>. Once you have the list, look at e.g. <a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">docs.python.org/3/howto/sorting.html</a> for information on ordering the results.</span>
<span class="comment-copy">Once you do what @jonrsharpe has suggested, you're going to notice a bug: occasionally, you get dealt two copies of the same card. You need to either rewrite you code to choose-without-replacement, or you need to filter out and retry duplicate cards (whichever one is easier for your to write).</span>
<span class="comment-copy">^^ this. Or make a list of all possible cards then <code>random.sample</code> seven specific cards out of it.</span>
