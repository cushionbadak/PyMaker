<div class="post-text" itemprop="text">
<p>Please look at the below Python code that I've entered into a Python 3.6 interpreter:</p>
<pre><code>&gt;&gt;&gt; 0.00225 * 100.0
0.22499999999999998
&gt;&gt;&gt; '{:.2f}'.format(0.00225 * 100.0)
'0.22'
&gt;&gt;&gt; '{:.2f}'.format(0.225)
'0.23'
&gt;&gt;&gt;  '{:.2f}'.format(round(0.00225 * 100.0, 10))
'0.23'
</code></pre>
<p>Hopefully you can immediately understand why I'm frustrated. I am attempting to display <code>value * 100.0</code> on my GUI, storing the full precision behind a cell but only displaying 2 decimal points (or whatever the users precision setting is). The GUI is similar to an Excel spreadsheet.</p>
<p>I'd prefer not to lose the precision of something like <code>0.22222444937645</code> and round by <code>10</code>, but I also don't want a value such as <code>0.00225 * 100.0</code> displaying as <code>0.22</code>.</p>
<p>I'm interested in hearing about a standard way of approaching a situation like this or a remedy for my specific situation. Thanks ahead of time for any help.</p>
</div>
<div class="post-text" itemprop="text">
<p>Consider using the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">Decimal module</a>, which "provides support for fast correctly-rounded decimal floating point arithmetic." The primary advantages of <code>Decimal</code> relevant to your use case are:</p>
<blockquote>
<ul>
<li><p>Decimal numbers can be represented exactly. In contrast, numbers like <code>1.1</code> and <code>2.2</code> do not have exact representations in binary floating point. End users typically would not expect <code>1.1 + 2.2</code> to display as <code>3.3000000000000003</code> as it does with binary floating point.</p></li>
<li><p>The exactness carries over into arithmetic. In decimal floating point, <code>0.1 + 0.1 + 0.1 - 0.3</code> is exactly equal to zero. In binary floating point, the result is <br/><code>5.5511151231257827e-017</code>. While near to zero, the differences prevent reliable equality testing and differences can accumulate. For this reason, decimal is preferred in accounting applications which have strict equality invariants.</p></li>
</ul>
</blockquote>
<p>Based on the information you've provided in the question, I cannot say how much of an overhaul migrating to <code>Decimal</code> would require. However, if you're creating a spreadsheet-like application and always want to preserve maximal precision, then you will probably want to refactor to use <code>Decimal</code> sooner or later to avoid unexpected numbers in your user-facing GUI.</p>
<p>To get the behavior you desire, you may need to change the rounding mode (which defaults to <code>ROUND_HALF_EVEN</code>) for <code>Decimal</code> instances.</p>
<pre><code>from decimal import getcontext, ROUND_HALF_UP

getcontext().rounding = ROUND_HALF_UP

n = round(Decimal('0.00225') * Decimal('100'), 2)
print(n)  # prints Decimal('0.23')

m = round(Decimal('0.00225') * 100, 2)
print(m)  # prints Decimal('0.23')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>perhaps use decimal? docs.python.org/2/library/decimal.html</p>
<pre><code>from decimal import *
getcontext().prec = 2
n = Decimal.from_float(0.00225)
m = n * 100
print(n, m)
print(m.quantize(Decimal('.01'), rounding=ROUND_DOWN))
print(m.quantize(Decimal('.01'), rounding=ROUND_UP)
</code></pre>
</div>
<span class="comment-copy">Hi! Thank you for the information on Decimal.   Unfortunately <code>'{:.2f}'.format(Decimal(0.00225 * 100))</code> results in <code>0.22</code></span>
<span class="comment-copy"><code>'{:.2f}'.format(Decimal(Decimal('0.00225') * Decimal('100')))</code> yields the same result</span>
<span class="comment-copy">Please read through all the documentation for the <code>decimal</code> module. You need to change the rounding mode for <code>Decimal</code> instances. I've edited my answer with details.</span>
<span class="comment-copy">@Riptyde4 Did that help?</span>
<span class="comment-copy">It looks like it has been working so far, yes.  thank you! still evaluating results</span>
<span class="comment-copy">This returns <code>0.22</code>, the desired result is <code>0.23</code></span>
<span class="comment-copy">then ROUND_UP, if you round it up it does 0.23</span>
