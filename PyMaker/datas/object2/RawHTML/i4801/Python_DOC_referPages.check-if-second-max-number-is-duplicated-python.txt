<div class="post-text" itemprop="text">
<p>I'm learning python, I want to check if the second largest number is duplicated in a list. I've tried several ways, but I couldn't. Also, I have searched on google for this issue, I have got several answers to get/print 2nd largest number from a list but I couldn't find any answer to check if the 2nd largest number is duplicated. can anyone help me, please?</p>
<p>Here is my sample list:</p>
<pre><code>list1 = [5, 6, 9, 9, 11]
list2 = [8, 9, 13, 14, 14]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a <em>1-liner</em>:</p>
<pre><code>&gt;&gt;&gt; list1 = [5, 6, 9, 9, 11]
&gt;&gt;&gt; list1.count(sorted(list1)[-2]) &gt; 1
True
</code></pre>
<p>or using <a href="https://docs.python.org/3/library/heapq.html#heapq.nlargest" rel="noreferrer">heapq</a></p>
<pre><code>&gt;&gt;&gt; import heapq
&gt;&gt;&gt; list1 = [5, 6, 9, 9, 11]
&gt;&gt;&gt; list1.count(heapq.nlargest(2, list1)[1]) &gt; 1
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a simple algorithm:</p>
<ol>
<li>Makes values unique</li>
<li>Sort your list by max value</li>
<li>Takes the second element</li>
<li>Check how many occurences of this elemnt exists in list</li>
</ol>
<p>Code:</p>
<pre><code>list1 = [5, 6, 9, 9, 11]
list2 = [8, 9, 13, 14, 14]

def check(data):
    # 1. Make data unique
    unique = list(set(data))
    # 2. Sort by value
    sorted_data = sorted(unique, reverse=True)
    # 3. Takes the second element
    item = sorted_data[1]
    # 4. Check occurences
    if data.count(item) &gt; 1:
        return True
    else:
        return False

print(check(list1))
print(check(list2))
</code></pre>
<p>Ouput</p>
<pre><code>True
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>collections.Counter</code> with <code>sorted</code> offers one solution:</p>
<pre><code>from collections import Counter

lst1 = [5, 6, 9, 9, 11]
lst2 = [8, 9, 13, 14, 14]

res1 = sorted(Counter(lst1).items(), key=lambda x: -x[0])[1]  # (9, 2)
res2 = sorted(Counter(lst2).items(), key=lambda x: -x[0])[1]  # (13, 1)
</code></pre>
<p>The result is a tuple of second largest item and its count. It is then simple to check if the item is duplicated, e.g. <code>res1[1] &gt; 1</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my proposal</p>
<pre><code>li = [5, 6, 9, 9, 11]
li_uniq = list(set(li))               # list's elements are uniquified
li_uniq_sorted = sorted(li_uniq)      # sort in ascending order
second_largest = li_uniq_sorted[-2]   # get the 2nd largest -&gt; 9
li.count(second_largest)              # -&gt; 2 (duplicated if &gt; 1)
</code></pre>
</div>
<span class="comment-copy">@delowar what should the output look like ?</span>
<span class="comment-copy">You know how to find the 2nd largest number. Do you know how to <b><i>.count</i></b> (hint) the number of times an element is in a list?</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/16225677/get-the-second-largest-number-in-a-list-in-linear-time">Literally the first google result for "python get 2nd largest number in list".</a> <a href="https://stackoverflow.com/questions/2600191/how-to-count-the-occurrences-of-a-list-item">Literally the first google result for "python count number of occurrences".</a></span>
<span class="comment-copy">oh, I didn't know about .count() function. Thank you @DeepSpace</span>
