<div class="post-text" itemprop="text">
<p>I have a list of full names which I am splitting into two variables currently like so:</p>
<pre><code>first, last = full_name.split(" ")
</code></pre>
<p>which works only if <code>full_name</code> is two words when split, otherwise I get. Is there a concise way to account for a name with more parts to keep <code>first</code> as the first word and <code>last</code> as the rest of the words? I could do it with an extra line or two but I was wondering if there was an elegant way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Look into the second parameter of <a href="https://docs.python.org/2/library/string.html#string.split" rel="nofollow noreferrer">split</a> </p>
<pre><code>first, last = "First Last Second Last".split(" ", 1)
</code></pre>
<p>If <code>full_name</code> can be one word:</p>
<pre><code>name_arr = full_name.split(" ", 1)
first = name_arr[0]
last = name_arr[1] if len(name_arr) &gt; 1 else ""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow noreferrer">str.partition</a> that guarantee three tuple output in the format:</p>
<p><code>(part before separator, separator itself, part after separator)</code></p>
<pre><code>&gt;&gt;&gt; "a".partition(" ")
&gt;&gt;&gt; ('a', '', '')

&gt;&gt;&gt; "a b".partition(" ")
&gt;&gt;&gt; ('a', ' ', 'b')

&gt;&gt;&gt; "a b c".partition(" ")
&gt;&gt;&gt; ('a', ' ', 'b c')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use:</p>
<pre><code>first, last = full_name.split(" ", 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you're using Python3, you can also use <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">Extended Iterable Unpacking</a>.</p>
<p>For example:</p>
<pre><code>name = "John Jacob Jingleheimer Schmidt"
first, *last = name.split()
print("First = {first}".format(first=first))
#First = John
print("Last = {last}".format(last=" ".join(last)))
#Last = Jacob Jingleheimer Schmidt
</code></pre>
<p>This stores everything after the first element of the split string in <code>last</code>. Use <code>" ".join(last)</code> to put the string back together.</p>
<p>It also works if there's only two elements to unpack.</p>
<pre><code>name = "John Schmidt"
first, *last = name.split()
print("First = {first}".format(first=first))
#First = John
print("Last = {last}".format(last=" ".join(last)))
#Last = Schmidt
</code></pre>
<p>Or if you wanted first, middle, and last:</p>
<pre><code>name = "John Jacob Jingleheimer Schmidt"
first, middle, *last = name.split()
print("First = {first}".format(first=first))
#First = John
print("Middle = {middle}".format(middle=middle))
#Middle = Jacob
print("Last = {last}".format(last=" ".join(last)))
#Last = Jingleheimer Schmidt
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had this problem before while what I had is a little bit more complicated, like including middle name. And the solution I found is name-cleaver <a href="https://github.com/sunlightlabs/name-cleaver" rel="nofollow noreferrer">https://github.com/sunlightlabs/name-cleaver</a></p>
<p>It works well cleaving name into parts, like title, first name, last name, etc.</p>
</div>
<span class="comment-copy">Can you provide some sample input and output?</span>
<span class="comment-copy">Can the first name not also be multi-word? In real life, I know people who go by first names like "Ellie Mae". (Not anyone with that <i>specific</i> first name, because I'm not from 1950s Oklahoma, but you know what I mean.)</span>
<span class="comment-copy">This wont work if <code>full_name</code> consist of single word.</span>
<span class="comment-copy">I added a possible solution to fix that @bro-grammer . Thanks for the heads up!</span>
<span class="comment-copy">You can also use <a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow noreferrer">str.partition</a> to avoid the conditional statement.</span>
<span class="comment-copy">@bro-grammer I think that's sufficiently different (and useful, because so many Python devs seem to not know about <code>partition</code> for some reasonâ€¦) that you should write a separate answer.</span>
<span class="comment-copy">Oh wow, thanks @bro-grammer. Learned something new today! <code>str.partition</code> would suit this problem significantly better.</span>
<span class="comment-copy">Nice, but it would be ideal to show it with <code>"a b c"</code> to demonstrate that it automatically solves the problem the OP was asking about.</span>
<span class="comment-copy">It even works if there's only one element to unpack. Try it with <code>"Cher"</code> and you'll get <code>Last = </code>, just as you'd presumably hope. That being said, I'm not sure it's worth redundantly splitting the last name just to join it back together.</span>
<span class="comment-copy">Also, since you're advertising new-ish features of Python here, why not use f-strings instead of explicit <code>format</code>?</span>
<span class="comment-copy">@abarnert Thanks for the comments. I'm not typically a python3 user, so I'm not totally familiar with all of the new features including f-strings. Feel free to edit the answer if you think it's worth including. (TBH, I only started using <code>.format</code> in my code this week- I come from a C++ background, so I'm comfortable with the C-style string formatting.)</span>
