<div class="post-text" itemprop="text">
<p>I face this peculiar situation:</p>
<p>I am using <code>str</code> format to give my filenames a certain pattern. For example I am using a prefix and then a fixed-length number to create the filename. The problem occurred when I needed to also control the fixed-length number length:</p>
<pre><code>prefix = 'action1'
n = 6    
for i in range(0, 6):
    filename = '{}_{:06}.jpg'.format(prefix, i)
    print(filename)
</code></pre>
<blockquote>
<p>action1_000000.jpg<br/>
  action1_000001.jpg<br/>
  ...</p>
</blockquote>
<p>I came up with this idea which combines old and new style string formatting but it's peculiar and surely prone to being deprecated:</p>
<pre><code>n = 4    
for i in range(0, 6):
    filename = ('{}_{:0%d}.jpg' % n).format(prefix, i)
    print(filename)
</code></pre>
<blockquote>
<p>action1_0000.jpg<br/>
  action1_0001.jpg<br/>
  ...</p>
</blockquote>
<p>So, is there any other approach to control the string format (the <code>:06</code> part) inside a string format (<code>{}_{:06}.jpg</code>)?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>{}</code> inside <code>{}</code> in <code>str.format()</code>. Try this:</p>
<pre><code>'{}_{:0{}}.jpg'.format(prefix, i, 4)
</code></pre>
<p>See at "<em>Nesting arguments and more complex examples</em>" at <a href="https://docs.python.org/3/library/string.html#format-examples" rel="nofollow noreferrer">this link</a></p>
<p>Or, using the <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">f-string feature</a>:</p>
<pre><code>prefix = 'action1'
n = 4
for i in range(0, 6):
    filename = f'{prefix}_{i:0{n}}.jpg'
    print(filename)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not use .rjust()?</p>
<pre><code>prefix = 'action1_'
n = 6
counter = 1
filename = prefix + str(counter).rjust(n, '0')
print(filename)
</code></pre>
</div>
