<div class="post-text" itemprop="text">
<p>I am trying to make a solar system in OpenGL but the planet is not revolving around sun. That is revolving around some other axis. How to fix this?</p>
<p>First, I am drawing a sun, Then, there is rotation, translation and again rotation of first planet. So it should revolve around the sun and rotate on it's own axis, but that's not happening.</p>
<p>I also want to make the circle on which planet will revolve. How to make the circles in XZ plane (possibly)</p>
<pre><code>from __future__ import division
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *

year = 0
day = 0

def init(): 
   glClearColor (0.0, 0.0, 0.0, 0.0)
   glShadeModel (GL_FLAT)


def display():

   global day, year

   glClear (GL_COLOR_BUFFER_BIT)

   glColor3f (1.0, 1.0, 0, 1)
   glPushMatrix()
   glutSolidSphere(1.0, 20, 16)   # draw sun

   glRotatef(year, 0.0, 1.0, 0.0)
   year = (year + 1) % 360

   glPushMatrix()
   glTranslatef(2.0, 0.0, 0.0)
   glRotatef(day, 0.0, 1.0, 0.0)
   day = (day + 1) % 360

   glColor3f (0, 0, 1.0);
   glutWireSphere(0.2, 10, 8)    # draw smaller planet
   glPopMatrix()

   glPushMatrix()
   glTranslatef(4.0, 0.0, 0.0)
   glRotatef(day, 0.0, 1.0, 0.0)
   glColor3f (1, 0, 0.0, 1)
   glutWireSphere(0.2, 10, 8)
   glPopMatrix()

   glPopMatrix()
   glutSwapBuffers()

   # delay
   for i in range(100000):
      pass

def reshape(w, h):
   glViewport (0, 0, w, h)
   glMatrixMode (GL_PROJECTION)
   glLoadIdentity ()
   gluPerspective(70.0, w/h, 1.0, 20.0)
   glMatrixMode(GL_MODELVIEW)
   glLoadIdentity()
   gluLookAt (0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)

glutInit()
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB)
glutInitWindowSize(800, 800)
glutInitWindowPosition (100, 100)
glutCreateWindow("Transformation")
init ()
glutDisplayFunc(display)
glutIdleFunc(display)
glutReshapeFunc(reshape)
glutMainLoop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Planet should go behind the sun (invisible for some time) and then it would be visible after coming back, but that' not happening. </p>
</blockquote>
<p>You have to enable the depth test and you have to clear the depth buffer. </p>
<p>The depth test can be enabled by <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glEnable.xhtml" rel="nofollow noreferrer"><code>glEnable(GL_DEPTH_TEST)</code></a>. The default depth function <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glDepthFunc.xhtml" rel="nofollow noreferrer"><code>glDepthFunc</code></a> is <code>GL_LESS</code>. This causes that fragments which are behind a fragment that was drawn before, are skipped:</p>
<p>Before every frame the depth buffer has to be cleared, by <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glClear.xhtml" rel="nofollow noreferrer"><code>glClear(GL_DEPTH_BUFFER_BIT)</code></a>, to restart this process.</p>
<p>Add the following lines to your code, at the begin of <code>display</code>:</p>
<pre><code>glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT )
glEnable( GL_DEPTH_TEST )
</code></pre>
<p>Of coures you have to create a window with a depth buffer (<a href="https://www.opengl.org/resources/libraries/glut/spec3/node12.html" rel="nofollow noreferrer"><code>glutInitDisplayMode(GLUT_DEPTH)</code></a>):</p>
<pre><code>glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)
</code></pre>
<p>See the preview:</p>
<p><a href="https://i.stack.imgur.com/hJqgt.gif" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/hJqgt.gif"/></a></p>
<p><br/></p>
<hr/>
<blockquote>
<p>Can you also tell how to make circle where the planet is revolving? </p>
</blockquote>
<p>I recommend to use <a href="https://docs.python.org/3/library/time.html" rel="nofollow noreferrer"><code>time</code></a> for setting up the simulation. The following example shows the sun, earth and the moon (Of course it is a very very simplified simulation with completely wrong sizes and distance relations):</p>
<pre><code>import time

start_time = time.time()

def display():

    t = time.time() - start_time
    year_period = 5.0                  # 5 seconds for simulating one year 
    year     = (t / year_period)
    day      = 365 * year
    moon_sid = (365 / 27.3) * year

    glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT )
    glEnable( GL_DEPTH_TEST )

    glColor4f (1.0, 1.0, 0, 1)
    glPushMatrix()
    glutSolidSphere(1.0, 20, 16)             # sun

    glRotatef(year*360.0, 0.0, 1.0, 0.0)     # earth rotation around the sun 
    glTranslatef(3.0, 0.0, 0.0)              # earth location

    glPushMatrix()                           # push earth system 

    glPushMatrix()
    glRotatef(day*360.0, 0.0, 1.0, 0.0)      # earth spinn
    glRotatef(90-23.4, 1.0, 0.0, 0.0)        # earth axis
    glColor3f (0, 0, 1)                      # blue
    glutWireSphere(0.3, 10, 8)               # earth
    glPopMatrix()

    glPushMatrix()
    glRotatef(moon_sid*360.0, 0.0, 1.0, 0.0) # moon sidereal
    glTranslatef(1.0, 0.0, 0.0)              # distance moon to earth
    glRotatef(90, 1.0, 0.0, 0.0)
    glColor4f (0.4, 0.5, 0.6, 1)                         
    glutWireSphere(0.1, 10, 8)               # moon
    glPopMatrix()

    glPopMatrix()                            # pop earth system 

    glPopMatrix()
    glutSwapBuffers()
</code></pre>
<p><a href="https://i.stack.imgur.com/Yru4h.gif" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Yru4h.gif"/></a></p>
</div>
<span class="comment-copy">Planet should go behind the sun (invisible for some time) and then it would be visible after coming back, but that' not happening.</span>
<span class="comment-copy">If you want the real thing see <a href="https://stackoverflow.com/a/28020934/2521214">Is it possible to make realistic n-body solar system simulation in matter of size and mass?</a> and use Kepler's equation. It is also better to manage the matrices for each body a bit differently for more info see <a href="https://stackoverflow.com/a/28084380/2521214">Understanding 4x4 homogenous transform matrices</a> so compute position by Kepler, orientation from time and periods and construct your matrix... as glRotate will not give you elliptic trajectory ...</span>
<span class="comment-copy">Thanks @Rabbid76</span>
<span class="comment-copy">Can you also tell how to make circle where the planet is revolving?</span>
