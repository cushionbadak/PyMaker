<div class="post-text" itemprop="text">
<p>I come from C++, and I want to access another static member function in one member function.</p>
<p>S1:</p>
<pre><code>class Test:
    @staticmethod
    def hello():
        print("static method is on")

    def hey(self):
        hello()
</code></pre>
<p>output:</p>
<p>error, the hello() isn't defined</p>
<p>S2:</p>
<pre><code>def hello():
    print("hello outside")

def hey():
    hello()
</code></pre>
<p>output:</p>
<p>ok</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="nofollow noreferrer">staticmethod</a> documentation:</p>
<blockquote>
<p>A static method does not receive an implicit first argument.</p>
<p>...</p>
<p>It can be called either on the class (such as C.f()) or on an instance (such as C().f()).</p>
</blockquote>
<p>You still need to self reference the object. Otherwise, the interpreter will be looking for a top level function named <code>hello</code>. </p>
<pre><code>class Test:
    @staticmethod
    def hello():
        print("static method is on")

    def hey(self):
        self.hello()


t = Test()
t.hey()

out: "static method is on"

Test.hey()

out: "static method is on"
</code></pre>
<p>Hopefully, this example explains better.</p>
<pre><code>def hello():
    print("this is not the static method you are loking for")


class Test:
    @staticmethod
    def hello():
        print("static method is on")

    def hey(self):
        hello()


t = Test()
t.hey()

out: "this is not the static method you are loking for"
</code></pre>
</div>
<span class="comment-copy">actually , it only look up <code>hello</code> in the top level namespace. but it doesn't look up inside the class.  why does this happen</span>
<span class="comment-copy">The interpreter needs to know where to look for in order to call your function. The <code>staticmethod</code> decorator binds the function in the class namespace. Therefore, you need to reference the class or the object.</span>
<span class="comment-copy">@LFBuildAMountain this is a general principle in Python that's not specific to static methods. Unlike Java or C++, you need to do the same (explicitly refer to self or another instance or class) for all methods and attributes.</span>
