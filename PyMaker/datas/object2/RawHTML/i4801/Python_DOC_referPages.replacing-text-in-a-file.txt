<div class="post-text" itemprop="text">
<p>Is it possible to parse a file line by line, and edit a line in-place while going through the lines?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is it possible to parse a file line by line, and edit a line in-place while going through the lines?</p>
</blockquote>
<p>It can be simulated using a backup file as stdlib's <a href="http://docs.python.org/library/fileinput" rel="noreferrer"><code>fileinput</code> module</a> does.</p>
<p>Here's an example script that removes lines that do not satisfy <code>some_condition</code> from files given on the command line or <code>stdin</code>:</p>
<pre><code>#!/usr/bin/env python
# grep_some_condition.py
import fileinput

for line in fileinput.input(inplace=True, backup='.bak'):
    if some_condition(line):
        print line, # this goes to the current file
</code></pre>
<p>Example: </p>
<pre><code>$ python grep_some_condition.py first_file.txt second_file.txt
</code></pre>
<p>On completion <code>first_file.txt</code> and <code>second_file.txt</code> files will contain only lines that satisfy <code>some_condition()</code> predicate.</p>
</div>
<div class="post-text" itemprop="text">
<p>fileinput module has very ugly API, I find beautiful module for this task - <a href="https://pypi.org/project/in-place/" rel="noreferrer">in_place</a>, example for Python 3:</p>
<pre><code>import in_place

with in_place.InPlace('data.txt') as file:
    for line in file:
        line = line.replace('test', 'testZ')
        file.write(line)
</code></pre>
<p>main difference from fileinput:</p>
<ul>
<li>Instead of hijacking sys.stdout, a new filehandle is returned for writing.</li>
<li>The filehandle supports all of the standard I/O methods, not just readline().</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>No. You cannot safely write to a file you are also reading, as any changes you make to the file could overwrite content you have not read yet. To do it safely you'd have to read the file into a buffer, updating any lines as required, and then re-write the file.</p>
<p>If you're replacing byte-for-byte the content in the file (i.e. if the text you are replacing is the same length as the new string you are replacing it with), then you can get away with it, but it's a hornets nest, so I'd save yourself the hassle and just read the full file, replace content in memory (or via a temporary file), and write it out again.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you only intend to perform localized changes that do not change the length of the part of the file that is modified (e.g. changing all characters to lower case), then you can actually overwrite the old contents of the file dynamically.</p>
<p>To do that, you can use random file access with the <code>seek()</code> method of a <a href="http://docs.python.org/library/stdtypes.html#file-objects" rel="nofollow"><code>file</code></a> object.</p>
<p>Alternatively, you may be able to use an <a href="http://docs.python.org/library/mmap.html" rel="nofollow"><code>mmap</code></a> object to treat the whole file as a mutable string. Keep in mind that <code>mmap</code> objects may impose a maximum file-size limit in the 2-4 GB range on a 32-bit CPU, depending on your operating system and its configuration.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to back up by the size of the line in characters.  Assuming you used <code>readline</code>, then you can get the length of the line and back up using:</p>
<pre><code>file.seek(offset[, whence])
</code></pre>
<p>Set whence to <code>SEEK_CUR</code>, set offset to <code>-length</code>.</p>
<p>See <a href="http://docs.python.org/library/stdtypes.html#file-objects" rel="nofollow">Python Docs</a> or look at the manpage for <code>seek</code>.</p>
</div>
<span class="comment-copy">It is possible under certain conditions. If the line resulting of the editing of a treated line is shorter or of the same longer as the treated line, it is easy to do. If it isn't the case, it becomes more difficult , though not impossible if the lines that undergo the editing are not too numerous. Do you ask this because you want to treat a big file ?</span>
<span class="comment-copy">&gt;&gt;&gt; f = open('tmp', 'r+') &gt;&gt;&gt; f.readline() '75.14\n' &gt;&gt;&gt; f.readline() '100\n' &gt;&gt;&gt; l = _ &gt;&gt;&gt; f.seek(-l.len(), file.SEEK_CUR) &gt;&gt;&gt; f.seek(-len(l), os.SEEK_CUR) &gt;&gt;&gt; f.write('999\n') &gt;&gt;&gt; f.close() &gt;&gt;&gt;</span>
<span class="comment-copy">See exemple here (<a href="http://stackoverflow.com/questions/5286020/python-string-replace-in-a-file-without-touching-the-file-if-no-substitution-was" title="python string replace in a file without touching the file if no substitution was">stackoverflow.com/questions/5286020/â€¦</a>)</span>
<span class="comment-copy"><a href="http://stackoverflow.com/q/1582750/4279">edit text file using Python</a></span>
<span class="comment-copy">Methods that don't actually write to the middle of a file are also wise because it's easy to make the modification atomic (that is, the file doesn't end up in a partially-modified state if the program is interrupted).</span>
<span class="comment-copy">How about giving a file name in code?</span>
<span class="comment-copy">Ah, fileinput has a <code>files</code> parameter, <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer">docs.python.org/3/library/fileinput.html</a></span>
<span class="comment-copy">Mode 'rb+' allows to read , move and write in a file</span>
<span class="comment-copy">@eyquem - Good point, I'll update my answer.</span>
