<div class="post-text" itemprop="text">
<p>I am stuck trying to write a test case that will check whether the code goes inside of an <code>except</code> block.</p>
<p>My method <code>foo()</code> in case of an exception doesn't throw/raise it, it just logs information.</p>
<p>I have tried to use <a href="https://docs.python.org/2/library/unittest.html#unittest.TestCase.assertRaises" rel="nofollow noreferrer">assertRaises</a> but later I realized that this is not working for me because I am not raising an exception.</p>
<p>In Python docs it is clearly said that:</p>
<blockquote>
<p>Test that an exception is raised when callable is called with any positional or keyword arguments that are also passed to assertRaises(). The test passes if exception is raised, is an error if another exception is raised, or fails if no exception is raised.</p>
</blockquote>
<p>So, if I have following method:</p>
<pre><code>def foo():
    try:
        # Something that will cause an exception
    except AttributeError:
        log.msg("Shit happens")
</code></pre>
<p>is it possible to write a test case that will test whether execution goes inside of an except block?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't do this the way you want to. Python raises and handles exceptions all over the place—e.g., every single <code>for</code> loop exits by raising and handling a <code>StopIteration</code>. So, an assert that there was an exception somewhere, even if it was handled, would pretty much always pass.</p>
<p>What you <em>can</em> do is mock the logger, like this:</p>
<pre><code>_logs = []
def mocklog(str):
    _logs.append(str)

mymodule.log = mocklog
mymodule.foo()
assertEqual(_logs, ['Shit happens'])
</code></pre>
<p>Of course in a real-life project, you probably want to use a mocking library instead of hacking it in by hand like this, but that should demonstrate the idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use assertRaises (<a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises</a>) like this:</p>
<pre><code>with self.assertRaises(Exception):
     foo()
</code></pre>
<p>There is also a method assertLogs if you want to test logging.</p>
</div>
<span class="comment-copy">You really can't test for exceptions that were raised and handled. If you could, that would fire all over the place—in Python, everything from <code>hasattr</code> to simple <code>for</code> loops works by raising and handling exceptions.</span>
<span class="comment-copy">One thing you can do is mock the logger, and assert that your mock logger got the message that's logged inside that handler.</span>
<span class="comment-copy">Wow, never heard about it <i>every single for loop exits by raising and handling a StopIteration</i></span>
<span class="comment-copy">Appreciate your help, thanks.</span>
<span class="comment-copy">@UserNotFoundException Exceptions are even more ubiquitous in Python than most people realize. When you call a method from a base class, that raises and handles an exception for not finding it in the current class. When you add <code>2 + 3.0</code>, <code>int.__add__</code> doesn't know how to add a float, so it raises and the interpreter calls <code>float.__radd__</code>. And so on. Some of these have special fast-path optimizations in CPython, but, more generally, exceptions are as simple and fast as possible so they can be used everywhere</span>
<span class="comment-copy">The OP already explained that he tried this and it didn't work, and explained (correctly) <i>why</i> it didn't work.</span>
<span class="comment-copy">And in your update, there is no method <code>assertLogs</code> in the stdlib unittest.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLogs" rel="nofollow noreferrer">docs.python.org/3/library/…</a> here is the assertLogs</span>
<span class="comment-copy">Notice that "new in Python 3.4" in the docs you linked? That means it's not in Python 2.7.</span>
