<div class="post-text" itemprop="text">
<p>hi there is one same quetion in stackoverflow with this link:
<a href="https://stackoverflow.com/questions/1360101/how-to-generate-temporary-urls-in-django">How to generate temporary URLs in Django</a></p>
<p>but the accepted answer code is for python 2 and i converted it to python3 vertion:</p>
<pre><code>import hashlib, zlib
import pickle as pickle
import urllib.request, urllib.parse, urllib.error

my_secret = "michnorts"

def encode_data(data):
    """Turn `data` into a hash and an encoded string, suitable for use with `decode_data`."""
    text = zlib.compress(pickle.dumps(data, 0)).encode('base64').replace('\n', '')
    m = hashlib.md5(my_secret + text).hexdigest()[:12]
    return m, text

def decode_data(hash, enc):
    """The inverse of `encode_data`."""
    text = urllib.parse.unquote(enc)
    m = hashlib.md5(my_secret + text).hexdigest()[:12]
    if m != hash:
        raise Exception("Bad hash!")
    data = pickle.loads(zlib.decompress(text.decode('base64')))
    return data

hash, enc = encode_data(['Hello', 'Goodbye'])
print(hash, enc)
print(decode_data(hash, enc))
</code></pre>
<p>but it have error :</p>
<pre><code>    text = zlib.compress(pickle.dumps(data, 0)).encode('base64').replace('\n', '')
AttributeError: 'bytes' object has no attribute 'encode'
</code></pre>
<p>how should i fix this? </p>
</div>
<div class="post-text" itemprop="text">
<p>Trying to adapt your code to Python 3, I came up with this:</p>
<pre><code>import hashlib, zlib
import pickle as pickle
import urllib.request, urllib.parse, urllib.error
import base64

my_secret = "michnorts"

def encode_data(data):
    """Turn `data` into a hash and an encoded string, suitable for use with `decode_data`."""
    compressed_text = zlib.compress(pickle.dumps(data, 0))
    text = base64.b64encode(compressed_text).decode().replace('\n', '')
    m = hashlib.md5(str.encode('{}{}'.format(my_secret, text))).hexdigest()[:12]
    return m, text

def decode_data(hash, enc):
    """The inverse of `encode_data`."""
    text = urllib.parse.unquote(enc)
    m = hashlib.md5(str.encode('{}{}'.format(my_secret, text))).hexdigest()[:12]
    if m != hash:
        raise Exception("Bad hash!")
    data = pickle.loads(zlib.decompress(base64.b64decode(text)))
    return data

hash, enc = encode_data(['Hello', 'Goodbye'])
print(hash, enc)
print(decode_data(hash, enc))
</code></pre>
<p>There are some things that I needed to take into account:</p>
<ul>
<li>in Python 3, the way to encode/decode into base64 is by using the <a href="https://docs.python.org/3/library/base64.html" rel="nofollow noreferrer">base64 module</a></li>
<li>to cast a <code>bytes</code> object into a string, I used the <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer">bytes.decode method</a></li>
<li>to cast a string object into a <code>bytes</code> object, I used the <a href="https://docs.python.org/3/library/stdtypes.html#str.encode" rel="nofollow noreferrer">str.encode function</a></li>
<li>the <code>hashlib.md5</code> function accepts a <code>bytes</code>object (strings need to be previously encoded)</li>
<li>I changed the way you concatenate strings (i.e. <code>str1 + str2</code>) with a more pythonic construction: <code>'{}{}'.format(str1, str2)</code></li>
</ul>
<p>I hope this will be helpful ;)</p>
</div>
<span class="comment-copy">Just one more additional info : <code>zlib.compress</code> returns <code>string</code> in python2 and <code>bytes</code> in python3.</span>
<span class="comment-copy">perfect answer with valuable info . thankyou</span>
