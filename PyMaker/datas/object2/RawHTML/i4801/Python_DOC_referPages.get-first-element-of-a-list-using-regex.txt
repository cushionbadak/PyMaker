<div class="post-text" itemprop="text">
<p>I have a list in the following format:</p>
<pre><code>s = "['abc', 'xxx', '3c2', '111112', 'x']"
</code></pre>
<p>How would I get the element "1" -- the item that comes after the <code>[</code> but before the <code>,</code>. So far I had:</p>
<pre><code>re.search(r'[.+,',s)
</code></pre>
<p>But it is too 'greedy'. What would be the correct regex here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your list appears to be valid python, so regex is not an option (regexes cannot reliably parse programming languages). Consider <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> instead:</p>
<pre><code>&gt;&gt;&gt; s = "['abc', 'xxx', '3c2', '111112', 'x']"
&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(s)[0]
'abc'
</code></pre>
<p>If you insist of using regexes, you'll have to create a fairy complex expression to match python literals. A naive example, that only handles single-quoted strings, would be:</p>
<pre><code>&gt;&gt;&gt; s = "['abc', 'xxx', '3c2', '111112', 'x']"
&gt;&gt;&gt; import re
&gt;&gt;&gt; str_re = r"'(\\.|[^'])*'"
&gt;&gt;&gt; re.search(str_re, s).group(1)
'abc'
</code></pre>
<p>Quite obviously, adding double-quoted, multi-quoted, raw- and byte-strings, and eventually a variety of number formats to this would be a tedious and totally pointless job ;)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
s = "['abc', 'xxx', '3c2', '111112', 'x']"
m = next(re.finditer(r"'([^']+)'", s))

print(m.group())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using regex <a href="https://regex101.com/r/Flyxj6/4" rel="nofollow noreferrer"><code>'[^,]+'</code></a> or if you want to capture value inside single quotes use capturing group <a href="https://regex101.com/r/Flyxj6/5" rel="nofollow noreferrer"><code>'([^,]+)'</code></a> and <code>re.search().group(1)</code>.</p>
<pre><code>re.search(r"'[^,]+'",s).group()
</code></pre>
<p>Output:</p>
<pre><code>'abc'
</code></pre>
</div>
<span class="comment-copy">@chrisz the first element could be anything -- it's just a list element, it could be "123adi j3o",</span>
<span class="comment-copy">Just add <code>?</code> to make it non-greedy: <code>[(.+?),</code></span>
<span class="comment-copy">@georg please see updated question.</span>
<span class="comment-copy">How about <code>'I hate \'quotes\'...'</code> ;)</span>
<span class="comment-copy">@georg Yup...You got a point.</span>
