<div class="post-text" itemprop="text">
<p>I want to assign 0-6 depend on the starting day. For example, if Wednesday is the starting day, I should set Wednesday to be 0 then Thursday to be 1, and Friday to be 2 etc...</p>
<p>Here is what I have tried</p>
<pre><code>def date_manipulate(startday):
    #df['Month']=df.index.strftime("%B")
    temp_week=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
    week={}
    currentday=0
    offset=temp_week.index(startday)
    for day in temp_week:
        if temp_week:
            pointer=temp_week.index(day)+offset%len(temp_week)
            if (pointer&gt;=8):
                pointer-=7
            week[temp_week[pointer]]=currentday
            currentday+=1
        else:
            break
    return week
</code></pre>
<p>This do not return the right number(ie:Wednesday is 7), It's iterating 9 times instead of 7 for some reason. I also tried slicing index starting at position 3 [3:] and this will skip the first 2 which is also not what I want. Ultimately, I'm just trying to change the start day of the week to be what I define instead of the fix Sunday hence the function. Once the I get the function working, I will do some sort of if statement to loop through the default week and replace it with this new dictionary. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>default_week =['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']

def date_manipulate(startday):
    week = {}
    temp_week = default_week[startday:] + default_week[0:startday]
    for index, day in enumerate(temp_week):
        week[index] = day
    return week
</code></pre>
<p>Output for Tuesday as the starting day (<code>date_manipulate(2)</code>)</p>
<blockquote>
<p>{0: 'Tuesday', 1: 'Wednesday', 2: 'Thursday', 3: 'Friday', 4: 'Saturday', 5: 'Sunday', 6: 'Monday'}</p>
</blockquote>
<p><strong>EDIT</strong></p>
<p>If you meant to get <code>Tuesday: 0</code> and not <code>0: Tuesday</code> in the dictionary, use</p>
<pre><code>week[day] = index
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can split the list into its two parts and concatenate them.</p>
<pre><code>n = week.index(day)
new_week = week[n:] + week[:n]
</code></pre>
<p>In the 2nd sub list, it goes up to, but not including n</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simplify your function by using <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate</code></a> like this:</p>
<pre><code>def date_manipulate(day):
    temp_week=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']
    i = temp_week.index(day)
    return dict(enumerate(temp_week[i:] + temp_week[:i]))

&gt;&gt;&gt; date_manipulate('Wednesday')
&gt;&gt;&gt; {0: 'Wednesday', 1: 'Thursday', 2: 'Friday', 3: 'Saturday', 4: 'Sunday', 5: 'Monday', 6: 'Tuesday'}

&gt;&gt;&gt; date_manipulate('Tuesday')
&gt;&gt;&gt; {0: 'Tuesday', 1: 'Wednesday', 2: 'Thursday', 3: 'Friday', 4: 'Saturday', 5: 'Sunday', 6: 'Monday'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have <code>for day in temp_week:</code> but the only purpose of this is so that you can turn <code>day</code> into an integer by <code>temp_week.index(day)</code>. You don't use <code>day</code> for anything else.</p>
<p>Why so complicated? Simpler would be <code>for i in range(7):</code>,
then just use <code>i</code> instead of <code>temp_week.index(day)</code>.</p>
<p>Next, <code>temp_week.index(day)+offset%len(temp_week)</code>
will take <code>offset</code> modulo <code>len(temp_week)</code>, which just evaluates to <code>offset</code> since <code>offset</code> is always at least 0 and less than <code>len(temp_week)</code>;
then you add <code>offset</code> to <code>temp_week.index(day)</code>, which of course sometimes gives results greater than 6.</p>
<p>Pay attention to the precedence of operators and use parentheses where needed:</p>
<pre><code>pointer = (temp_week.index(day) + offset) % len(temp_week)
</code></pre>
<p>Of course the <em>better</em> way is to use the slices correctly as in Evyatar's answer.</p>
</div>
<div class="post-text" itemprop="text">
<p>This can be done using itertools really easily using <code>cycle</code> and <code>dropwhile</code>. The logic is <code>cycle</code> will create an infinitely long list of weeks, and <code>dropwhile</code> will be used to get the first day in the "cycle":</p>
<pre><code>from itertools import cycle, dropwhile

target_day = 'Wednesday'
week_cycle =  cycle(['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'])
day_number = range(7)

print(list(zip(dropwhile(lambda x: x != target_day, week_cycle), day_number)))
</code></pre>
<p>Output</p>
<pre><code>[('Wednesday', 0), ('Thursday', 1), ('Friday', 2), ('Saturday', 3), ('Sunday', 4), ('Monday', 5), ('Tuesday', 6)]
</code></pre>
<p>Or in a function</p>
<pre><code>def day_week(day='Wednesday'):
    return list(zip(dropwhile(lambda x: x != target_day, week_cycle), range(7)))
</code></pre>
</div>
