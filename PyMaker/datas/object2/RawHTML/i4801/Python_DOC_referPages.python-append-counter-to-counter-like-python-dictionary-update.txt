<div class="post-text" itemprop="text">
<p>I have 2 Counters (Counter from collections), and I want to append one to the other, while the overlapping keys from the first counter would be ignored. Like the <a href="https://stackoverflow.com/a/8930969/7252805">dic.update</a> (python dictionaries update)</p>
<p>For example:</p>
<pre><code>from collections import Counter
a = Counter(a=4, b=0, c=1)
b = Counter(z=1, b=2, c=3)
</code></pre>
<p>So something like (ignore overlapping keys from the first counter):</p>
<pre><code># a.update(b) 
Counter({'a':4, 'z':1, 'b':2, 'c':3})
</code></pre>
<p>I guess I could always convert it to some kind of a dictionary and then convert it back to Counter, or use a condition. But I was wondering if there is a better option, because I'm using it on a pretty large data set.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code> is a <code>dict</code> subclass</a>, so you can explicitly invoke <code>dict.update</code> and pass two counters as the arguments:</p>
<pre><code>a = Counter(a=4, b=0, c=1)
b = Counter(z=1, b=2, c=3)

dict.update(a, b)

print(a)
# Counter({'a': 4, 'c': 3, 'b': 2, 'z': 1})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="http://python-reference.readthedocs.io/en/latest/docs/operators/dict_unpack.html" rel="noreferrer"><code>dict unpacking</code></a></p>
<pre><code>from collections import Counter
a = Counter(a=4, b=0, c=1)
b = Counter(z=1, b=2, c=3)
Counter({**a, **b})
Counter({'a': 4, 'c': 3, 'b': 2, 'z': 1})
</code></pre>
</div>
<span class="comment-copy">I guess you could do <code>for key in b: if key not in a: a[key] = b[key]</code></span>
<span class="comment-copy">well I tried it, but it returns a <code>NoneType</code>. Am I missing something?</span>
<span class="comment-copy">@sheldonzy Of course. It modifies <code>a</code> in-place, so it doesn't have to return anything.</span>
<span class="comment-copy">@Aran-Fey Oh smart, you call <code>dict.update</code> instead of <code>Counter.update</code>. Way more subtle than I thought at first, good job.</span>
