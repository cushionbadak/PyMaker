<div class="post-text" itemprop="text">
<p>CPython automatically compiles and caches all <code>.py</code> files into <code>.pyc</code> files in the same directory or a <code>__pycache__</code> directory, depending on the version.  How much speed improvement does using these cached files provide?</p>
<p>I an <em>not</em> asking about the execution speed of the python code - that question has been answered many times: "there is no difference in execution speed, the <code>.pyc</code> files are only to improve the startup speed." </p>
<p>I am asking how much that improvement in startup speed is.</p>
</div>
<div class="post-text" itemprop="text">
<p>It depends on how complex the modules in question are, how many you're importing, etc.</p>
<p>In local tests, I copied <code>collections.py</code> to my local directory, then tested with:</p>
<pre><code>time python -B -E -S -c 'import collections; print(collections)'
</code></pre>
<p>to try to nail down the rough end-to-end cost of the <code>collections</code> module alone without cached bytecode, then the same without <code>-B</code> (so it would create and use bytecode caches). The difference was around 5 ms (36 ms with <code>-B</code>, then 31 ms without <code>-B</code> on second and subsequent runs).</p>
<p>For more fine-grained testing, explicitly compiling without invoking any other import machinery using <code>ipython</code> <code>%timeit</code> magic got:</p>
<pre><code>&gt;&gt;&gt; with open('collections.py') as f: data = f.read()
...

&gt;&gt;&gt; %timeit -r5 compile(data, 'collections.py', 'exec', 0, 1)
100 loops, best of 5: 2.9 ms per loop
</code></pre>
<p>That's omitting some of the other <code>import</code> machinery work, just recompiling over and over, and it runs ~3 ms, which seems reasonable. If you're importing a hundred source modules (not entirely unreasonable, counting all the cascading imports the handful of explicit imports trigger), saving 1-5 ms each can make a meaningful difference for short program runs.</p>
</div>
<span class="comment-copy">A good computer scientist would say "it depends...". I think this question is probably too broad.</span>
<span class="comment-copy">You can use the <a href="https://docs.python.org/3/library/py_compile.html" rel="nofollow noreferrer">py_compile</a> module to do this yourself, like <a href="https://stackoverflow.com/a/2042442/9348376">this</a>, but it really depends on your program - It saves you however long it would have taken to compile.</span>
<span class="comment-copy">Note: To be clear, my test was done with Python 2, but I wouldn't expect significantly different results on Python 3. I followed up with the Python 3.5 equivalent (copying the whole <code>collections</code> directory, since it's not a single file anymore), and the difference was larger, around 10 ms less (from 51-52 down to 39-41 ms), though that could be due to the more complex package design (more cascading imports occur). The <code>compile</code> microbenchmark also took longer, around 8 ms rather than 3 ms.</span>
