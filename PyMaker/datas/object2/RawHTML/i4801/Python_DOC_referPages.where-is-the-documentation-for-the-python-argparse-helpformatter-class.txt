<div class="post-text" itemprop="text">
<p>I've found the documenation for the python argparse module, and it mentions the formatter_class. I see nothing on that page for things like the width parameter or max_help_position. Where are those documented?</p>
<p><a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">https://docs.python.org/3/library/argparse.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Argparse uses a helper class argparse.helpformatter() which uses the <code>max_help_position</code> and <code>width</code> parameter (among others). See this excellent answer that explains how it is used <a href="https://stackoverflow.com/questions/44333577/explain-lambda-argparse-helpformatterprog-width">Explain lambda argparse.HelpFormatter(prog, width)</a>. </p>
<p>The problem you are having with finding documentation for it, is because the HelpFormatter is only public in the sense of its name. All its methods are private. </p>
<p>This is taken from the source linked in the documentation you provided <a href="https://github.com/python/cpython/blob/2.7/Lib/argparse.py" rel="nofollow noreferrer">https://github.com/python/cpython/blob/2.7/Lib/argparse.py</a>:</p>
<blockquote>
<p>class HelpFormatter(object):</p>
<p>Formatter for generating usage messages and argument help strings.</p>
<p>Only the name of this class is considered a public API. All the methods
  provided by the class are considered an implementation detail.</p>
</blockquote>
<p>So the the argparse documentation itself is a mix of how-to and formal API description.  Mostly it describes how to perform common parsing tasks.  Even though argparse consists of classes, the documentation does not formally describe the classes, and their subclassing and all methods.  It's not a reference API.</p>
<p>A workaround, would be to find another service that uses the HelpFormatter class that better document its variables, like this one from Discord <a href="https://discordpy.readthedocs.io/en/rewrite/ext/commands/api.html#discord.ext.commands.HelpFormatter" rel="nofollow noreferrer">https://discordpy.readthedocs.io/en/rewrite/ext/commands/api.html#discord.ext.commands.HelpFormatter</a>. </p>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>argparse</code> documentation more of a common usage manual than a formal module documentation.  It doesn't, for example, list all (public) classes, and their methods.  So for more custom uses you will have to look at the code, which fortunately is in just one file, <code>argparse.py</code>.</p>
<p>The help calling sequence is:</p>
<pre><code>parser.print_help
   parser.format_help
       parser._get_formatter
           self.formatter_class(prog=self.prog)
</code></pre>
<p>In that use only the <code>prog</code> parameter is set; other values are default.</p>
<pre><code>class HelpFormatter(object):
         def __init__(self,
             prog,
             indent_increment=2,
             max_help_position=24,
             width=None):
</code></pre>
<p>So these other parameters are available in the <code>__init__</code> but not readily accessible to users.</p>
<p>Customizing the <code>_get_formatter</code> method is one way of customizing these values.  Another is to subclass <code>HelpFormatter</code>.  It might also be possible to use <code>partial</code> to set these values in the <code>formatter_class</code> parameter.</p>
<p>I see @Magnus has found my earlier answer on this topic.  </p>
<p>So despite name, the <code>formater_class</code> parameter does not have to be a class.  In Python duck_typing, it just has to be something that <code>_get_formatter</code> can use.  It can be any function or lambda that takes <code>prog</code> paramater.</p>
<p>Drawing on the previous answer:</p>
<pre><code>f = lambda prog: argparse.HelpFormatter(prog, width=100)
f = functools.partial(argparse.HelpFormatter, width=100)
</code></pre>
<p>can both be used as:</p>
<pre><code>parser = argparse.ArgumentParser(formatter_class=f)
</code></pre>
<h2>(illustration)</h2>
<p>Let's see if I can illustrate how <code>argparse</code> uses the formatter class.</p>
<p><code>print_usage</code> uses <code>format_usage</code> (<code>print_help</code> is similar but longer)</p>
<pre><code>def format_usage(self):
    formatter = self._get_formatter()
    formatter.add_usage(self.usage, self._actions,
                        self._mutually_exclusive_groups)
    return formatter.format_help()
</code></pre>
<p>With parser from a previous question:</p>
<pre><code>In [459]: p.print_usage()
usage: ipython3 [-h] [-f F] [-g [G [G ...]]] [-k [K [K ...]]]
</code></pre>
<p>I can replicate that with a direct call to the <code>HelpFormatter</code> class:</p>
<pre><code>In [460]: f = argparse.HelpFormatter(prog='foo')
In [461]: f.add_usage(p.usage, p._actions,p._mutually_exclusive_groups)
In [462]: print(f.format_help())
usage: foo [-h] [-f F] [-g [G [G ...]]] [-k [K [K ...]]]
</code></pre>
<p>If I create a formatter with a <code>width</code> parameter I get some line wrapping:</p>
<pre><code>In [463]: f = argparse.HelpFormatter(prog='foo',width=40)
In [464]: f.add_usage(p.usage, p._actions,p._mutually_exclusive_groups)
In [465]: print(f.format_help())
usage: foo [-h] [-f F] [-g [G [G ...]]]
           [-k [K [K ...]]]
</code></pre>
<p>The purpose of the suggested <code>lambda</code> (and variations) is to replace the default formatter creation as in [460] with a custom one.  The <code>formatter_class</code> parameter lets us do that.  It requires more Python knowledge than a simple <code>width</code> parameter would, but ultimately gives us a lot more customizing power.  </p>
</div>
<span class="comment-copy">On that page, there is a link to the source. You could look through it and see how it works.</span>
<span class="comment-copy">is there a way to pass the width other than with a lamda function?</span>
<span class="comment-copy">Here and in the other answer I attempted to describe various ways.  But, no, there isn't a simple parameter that you can use that will change the width.</span>
<span class="comment-copy">I found that I can adjust the width by setting this:     os.environ["COLUMNS"]='200'</span>
<span class="comment-copy">@kdubs, With <code>width</code> as the default <code>None</code>, it looks to the environment for a value.</span>
