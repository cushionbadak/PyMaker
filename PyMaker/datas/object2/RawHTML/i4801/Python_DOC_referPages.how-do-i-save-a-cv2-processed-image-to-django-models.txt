<div class="post-text" itemprop="text">
<p>I use opencv to crop images and I'd like to save them to the models, I load the file directly to <code>computeLogoFromMemoryFILE</code> where it is processed, from there how can I save the image to <code>TempImage</code> model?</p>
<p><strong>views.py:</strong> </p>
<pre><code>form = myForm(request.FILES)
if form.is_valid():
    cropped_image = computeLogoFromMemoryFILE(request.FILES.get('logo'))
    # ...
    temp_image = TempImage.objects.create(image=?)
</code></pre>
<p><strong>cv2:</strong></p>
<pre><code># (np == numpy)
def computeLogoFromMemoryFILE(logo):
    logo.seek(0)
    image = cv2.imdecode(np.fromstring(logo.read(), np.uint8), cv2.IMREAD_UNCHANGED)
    cropped_img = crop_image(image)
</code></pre>
<hr/>
<p><strong><em>cropped_image</em></strong> variable is an opencv array :</p></div>
<div class="post-text" itemprop="text">
<p>In Django everytime you needs to manipulate uploaded files, similar images and set these to Model-Fields you must use <a href="https://docs.djangoproject.com/en/dev/ref/files/file/#the-file-object" rel="nofollow noreferrer">Django File</a> class, you can doing similar this code:</p>
<pre><code>from django.core.files import File

def my_view(request):
    ...
    form = myForm(request.FILES)

    if form.is_valid():
        temp_image = myForm.save(commit=False)
        cropped_image = computeLogoFromMemoryFILE(request.FILES.get('logo'))
        with open('path/of/cropped_image.png', 'rb') as destination_file:
            temp_image.image.save('dest.png', File(destination_file), save=False)
        temp_image.save()
    ...
</code></pre>
<p><strong>Note:</strong> After setup file to model field this file cloned on the <a href="https://docs.djangoproject.com/en/dev/ref/settings/#media-root" rel="nofollow noreferrer"><code>MEDIA_ROOT</code></a>, it is better that you remove old image or use <a href="https://docs.python.org/3/library/io.html#io.BytesIO" rel="nofollow noreferrer"><code>BytesIO</code></a> instead of using file to store manipulated image.</p>
</div>
<span class="comment-copy">If the image is big, you should prefer uploading it separately and only storing the link to it in your database.  If it's fairly small, you can convert your np array into a string and store it - convert it back when you want to read it.  I haven't worked with django all that much, but I guess you can store images as blobs too.</span>
<span class="comment-copy">@Zeokav Of course only the link will be stored, since the images are on AWS, but I don't understand how I can make the transition from the opencv array to the new dbb record. The images are also fairly small (less than 1MB).</span>
<span class="comment-copy">I guess you are familiar with storing and accessing objects in AWS (s3?), since you say that the images are stored on AWS. In general you convert the image to bytes string, upload this file object to AWS and then store key (usually a filename) in your database, because you'll be accessing files with this key. I suggest you update your question, because this is really a question about uploading files to AWS. The Django part is basically the simplest thing here.</span>
<span class="comment-copy">@Lindow please feedback to my answer</span>
