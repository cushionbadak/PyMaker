<div class="post-text" itemprop="text">
<p>How do you mock a readonly property with <a href="http://www.voidspace.org.uk/python/mock/index.html" rel="noreferrer">mock</a>?</p>
<p>I tried:</p>
<pre><code>setattr(obj.__class__, 'property_to_be_mocked', mock.Mock())
</code></pre>
<p>but the issue is that it then applies to all instances of the class... which breaks my tests.</p>
<p>Do you have any other idea? I don't want to mock the full object, only this specific property.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the better way is to mock the property as <code>PropertyMock</code>, rather than to mock the <code>__get__</code> method directly.</p>
<p>It is stated in the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.PropertyMock" rel="noreferrer">documentation</a>, search for <code>unittest.mock.PropertyMock</code>:
A mock intended to be used as a property, or other descriptor, on a class. <code>PropertyMock</code> provides <code>__get__</code> and <code>__set__</code> methods so you can specify a return value when it is fetched.</p>
<p>Here is how:</p>
<pre><code>class MyClass:
    @property
    def last_transaction(self):
        # an expensive and complicated DB query here
        pass

def test(unittest.TestCase):
    with mock.patch('MyClass.last_transaction', new_callable=PropertyMock) as mock_last_transaction:
        mock_last_transaction.return_value = Transaction()
        myclass = MyClass()
        print myclass.last_transaction
        mock_last_transaction.assert_called_once_with()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually, the answer was (as usual) in the <a href="http://www.voidspace.org.uk/python/mock/examples.html#mocking-properties" rel="noreferrer">documentation</a>, it's just that I was applying the patch to the instance instead of the class when I followed their example.</p>
<p>Here is how to do it:</p>
<pre><code>class MyClass:
    @property
    def last_transaction(self):
        # an expensive and complicated DB query here
        pass
</code></pre>
<p>In the test suite:</p>
<pre><code>def test():
    # Make sure you patch on MyClass, not on a MyClass instance, otherwise
    # you'll get an AttributeError, because mock is using settattr and
    # last_transaction is a readonly property so there's no setter.
    with mock.patch(MyClass, 'last_transaction') as mock_last_transaction:
        mock_last_transaction.__get__ = mock.Mock(return_value=Transaction())
        myclass = MyClass()
        print myclass.last_transaction
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Probably a matter of style but in case you prefer decorators in tests, @jamescastlefield's <a href="https://stackoverflow.com/a/25424012/451710">answer</a> could be changed to something like this:</p>
<pre><code>class MyClass:
    @property
    def last_transaction(self):
        # an expensive and complicated DB query here
        pass

class Test(unittest.TestCase):
    @mock.patch('MyClass.last_transaction', new_callable=PropertyMock)
    def test(mock_last_transaction):
        mock_last_transaction.return_value = Transaction()
        myclass = MyClass()
        print myclass.last_transaction
        mock_last_transaction.assert_called_once_with()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to test whether or not the mocked property was accessed you can simply patch it with the expected <code>return_value</code>.</p>
<pre><code>with mock.patch(MyClass, 'last_transaction', Transaction()):
    ...
</code></pre>
</div>
<span class="comment-copy">I had to mock a class method decorated as <code>@property</code>. This answer worked for me when the other answer (and other answers on many other questions) did not.</span>
<span class="comment-copy">this is the way it should be done. I wish there was a way to move the "accepted" answer</span>
<span class="comment-copy">I find including the return value in the context manager call to be slightly cleaner:  ``` with mock.patch('MyClass.last_transaction', new_callable=PropertyMock, return_value=Transaction()): ... ```</span>
<span class="comment-copy">Indeed, I just moved the accepted answer to this one.</span>
<span class="comment-copy">using mock.patch.object is also nice since you don't have to write the class name as a string (not really a problem in the example) and it's easier to detect/fix if you decide to rename a package and haven't updated a test</span>
<span class="comment-copy">people should use the other example. <code>mock.PropertyMock</code> is the way to do it!</span>
