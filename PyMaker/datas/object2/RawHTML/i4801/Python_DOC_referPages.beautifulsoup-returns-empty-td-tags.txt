<div class="post-text" itemprop="text">
<p>I'm trying to get some info from this url "<a href="http://baloncestoenvivo.feb.es/Game/1881578" rel="nofollow noreferrer">http://baloncestoenvivo.feb.es/Game/1881578</a>". And I want to get all the info that there is inside a table which is inside a div with this <code>id = "keyfacts-playbyplay-content-scroll"</code></p>
<p>I access to this table with this code:</p>
<pre><code>table = page_soup.find(id="keyfacts-playbyplay-content-scroll").findAll("table", {"class" : "twelve even"})
</code></pre>
<p>Then, print "table" to see what I get and I get one tr with no data. However, using firefox or chrome console we can see that there are 799 table rows with data!!!</p>
<p>This is what a I get when I print "table" in python console:</p>
<pre><code>&gt;&gt; table
&lt;table class="twelve even"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th colspan="2"&gt;Tiempo&lt;/th&gt;
&lt;th colspan="2"&gt;Cuarto&lt;/th&gt;
&lt;th colspan="2"&gt;Puntuación&lt;/th&gt;
&lt;th colspan="8"&gt;Acción&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;!-- ko foreach: LINES --&gt;
&lt;tr&gt;
&lt;td class="text-center" colspan="2" data-bind="text : time"&gt;&lt;/td&gt;
&lt;td class="text-center" colspan="2" data-bind="text : quarter"&gt;&lt;/td&gt;
&lt;td colspan="2" data-bind="text : scoreA()==null ? '' : scoreA()+'-'+scoreB()" style="color:#FB0127; text-align: center"&gt;&lt;/td&gt;
&lt;td colspan="8" data-bind="text : text"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- /ko --&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</code></pre>
<p>And this is what we can see in the console:</p>
<p><a href="https://i.stack.imgur.com/ZWPyL.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ZWPyL.png"/></a></p>
<p>Why don't get the same? All the tr tags with their td tags with information?</p>
<p>What am I doing wrong? </p>
</div>
<div class="post-text" itemprop="text">
<p>The contents of the table are dynamically generated through JavaScript. That's why the page source doesn't have them. <code>requests</code> module gets you the page source without the execution of the JavaScript, which is the reason why you are seeing incomplete data.</p>
<p>If you check the <code>XHR</code> tab under the <code>Network</code> tab in the dev tools, a request is being sent to <a href="http://baloncestoenvivo.feb.es/api/KeyFacts/1881578" rel="nofollow noreferrer">http://baloncestoenvivo.feb.es/api/KeyFacts/1881578</a> which returns the data in the form of JSON. You can parse this data using <code>requests</code> module and its built-in <code>.json()</code> function.</p>
<p>Only thing is, you need to pass the following headers. Without them, the website is blocking the script and you'll see <code>requests.exceptions.ConnectionError</code>.</p>
<pre><code>import requests

headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36',
           'Accept': 'application/json, text/javascript, */*; q=0.01'}

r = requests.get('http://baloncestoenvivo.feb.es/api/KeyFacts/1881578', headers=headers)
data = r.json()
</code></pre>
<p>You can now get all the table values from the <code>data</code> variable. To see its structure, use the <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer"><code>pprint</code></a> module.</p>
<p>For example, to get the player names and corresponding points, you can use this:</p>
<pre><code>for player in data['SCOREBOARD']['TEAM'][0]['PLAYER']:
    name = player['name']
    points = player['pts']
    print(name, points)
</code></pre>
<p>Output:</p>
<pre><code>A. ELONU 6
L. NICHOLLS GONZALEZ 10
S. DOMINGUEZ FERNANDEZ 13
L. QUEVEDO CAÑIZARES 0
M. ASURMENDI VILLAVERDE 5
F. ABDI 0
E. DE SOUZA MACHADO 13
L. GIL COLLADO 0
K. GIVENS 12
D. MOSS 2
A. ROBINSON 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason behind it is that we need to use a browser emulator like <code>Selenium</code> to render this dynamic content generated by <code>javascript</code>.
If we try to request this data just with requests we'll not get the <code>td</code>s that you're looking for. I would recommend official Selenium Documentation or a Youtube tutorial on this library, it is very easy to use once you get a grasp of things.</p>
<p><a href="http://selenium-python.readthedocs.io/" rel="nofollow noreferrer">Selenium Documentation</a></p>
<pre><code>from bs4 import BeautifulSoup
import requests


asdf = requests.get('http://baloncestoenvivo.feb.es/Game/1881578').text
soup = BeautifulSoup(asdf, 'lxml')


tabl = soup.find('div',{'id':'keyfacts-playbyplay-content-scroll'}).find('div',{'class':'twelve columns'})

print(tabl)
</code></pre>
<p>This doesn't work and it will return only a portion of the HTML that doesn't contain the information you're looking for (i.e. table elements)</p>
</div>
<span class="comment-copy">Hi!!! I want to thank you for your help, but finally for me is more usefull to get the json. Thank you so much for your appreciated help!!!</span>
