<div class="post-text" itemprop="text">
<p>I have a table containing:</p>
<pre><code>table = [[5, 7],[4, 3],[3, 3],[2, 3],[1, 3]]
</code></pre>
<p>and the first values represented in each list, (5,4,3,2,1) can be said to be an ID of a person. the second values represented (7,3,3,3,3) would be a score. What I'm trying to do is to detect duplicates values in the second column which is in this case is the 3s in the list. Because the 4 lists has 3 as the second value, i now want to sort them based on the first value.</p>
<p>In the table, notice that [1,3] has one as the first value hence, it should replace [4,3] position in the table. [2,3] should replace [3,3] in return.</p>
<pre><code>Expected output: [[5,7],[1,3],[2,3],[3,3],[4,3]]
</code></pre>
<p>I attempted:</p>
<pre><code>def checkDuplicate(arr):
    i = 0
    while (i&lt;len(arr)-1):
        if arr[i][1] == arr[i+1][1] and arr[i][0] &gt; arr[i+1][0]:
             arr[i],arr[i+1] = arr[i+1],arr[i]
        i+=1
    return arr

checkDuplicate(table)
</code></pre>
<p>The code doesn't fulfil the output i wanted and i would appreciate some help on this matter.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>sorted</code> with a key.</p>
<pre><code>table = [[5, 7], [4, 3], [3, 3], [2, 3], [1, 3]]

# Sorts by second index in decreasing order and then by first index in increasing order
sorted_table = sorted(table, key=lambda x: (-x[1], x[0]))

# sorted_table: [[5, 7], [1, 3], [2, 3], [3, 3], [4, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should sort the entire list by the second column, using the first to break ties. This has the advantage of correctly grouping the threes even when the seven is interpersed among them, e.g. something like</p>
<pre><code>table = [[4, 3],[3, 3],[5, 7],[2, 3],[1, 3]]
</code></pre>
<p>In Python, you can do it with a one-liner:</p>
<pre><code>result = sorted(table, key=lambda x: (-x[1], x[0]))
</code></pre>
<p>If you want an in-place sort, do</p>
<pre><code>table.sort(key=lambda x: (-x[1], x[0]))
</code></pre>
<p>Another neat thing you can do in this situation is to rely on the stability of Python's sorting algorithm. <a href="https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts" rel="nofollow noreferrer">The docs</a> actually suggest doing multiple sorts in complex cases like this, in the reverse order of the keys. Using the functions from <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator</code></a> supposedly speeds up the code as well:</p>
<pre><code>from opetator import itemgetter

result = sorted(table, key=itemgetter(0))
result.sort(key=itemgetter(1), reversed=True)
</code></pre>
<p>The first sort will arrange the IDs in the correct order. The second will sort by score, in descending order, leaving the IDs undisturbed for identical scores since the sort is stable.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to leave the list items with non-duplicate second elements untouched, and the ability to deal with the cases where multiple second items can be duplicate, I think you'll need more than the built-in <code>sort</code>.</p>
<h2>What my function achieves:</h2>
<p>Say your list is: <code>table = [[5, 7], [6, 1], [8, 9], [3, 1], [4, 3], [3, 3], [2, 3], [1, 3]]</code></p>
<p>It will not touch the items <code>[5, 7]</code> and <code>[8, 9]</code>, but will sort the remaining items by swapping them based on their second elements. The result will be:</p>
<pre><code>[[5, 7], [3, 1], [8, 9], [6, 1], [1, 3], [2, 3], [3, 3], [4, 3]]
</code></pre>
<p>Here is the code:</p>
<pre><code>def secondItemSort(table):
    # First get your second values
    secondVals = [e[1] for e in table]
    # The second values that are duplicate
    dups = [k for k,v in Counter(secondVals).items() if v&gt;1]
    # The indices of those duplicate second values
    indices = dict()
    for d in dups:
        for i, e in enumerate(table):
            if e[1]==d:
                indices.setdefault(d, []).append(i)
    # Now do the sort by swapping the items intelligently
    for dupVal, indexList in indices.items():
        sortedItems = sorted([table[i] for i in indexList])
        c = 0
        for i in range(len(table)):
            if table[i][1] == dupVal:
                table[i] = sortedItems[c]
                c += 1
    # And return the intelligently sorted list
    return table
</code></pre>
<h2>Test</h2>
<p>Let's test on a little bit more complicated <code>table</code>:</p>
<pre><code>table = [[5, 7], [6, 1], [8, 9], [3, 1], [4, 3], [3, 9], [3, 3], [2, 2], [2, 3], [1, 3]]
</code></pre>
<p>Items that should stay in their places: <code>[5, 7]</code> and <code>[2, 2]</code>.</p>
<p>Items that should be swapped: </p>
<ul>
<li><p><code>[6, 1]</code> and <code>[3, 1]</code>.</p></li>
<li><p><code>[8, 9]</code> and <code>[3, 9]</code></p></li>
<li><p><code>[4, 3], [3, 3], [2, 3], [1, 3]</code></p></li>
</ul>
<p><strong>Drumroll...</strong></p>
<pre><code>In [127]: secondItemSort(table)
Out[127]: 
[[5, 7],
 [3, 1],
 [3, 9],
 [6, 1],
 [1, 3],
 [8, 9],
 [2, 3],
 [2, 2],
 [3, 3],
 [4, 3]]
</code></pre>
</div>
<span class="comment-copy">You need to have a second nested loop in there. This is the beginning of a bubble sort.</span>
<span class="comment-copy">If you want something more efficient, sort the whole list by the second column and then by the first. Are you OK with the <code>5, 7</code> entry moving around?</span>
<span class="comment-copy">Why is <code>5,7</code> in front of all...is it bcz of <code>5</code> or bcz of <code>7</code>?</span>
<span class="comment-copy">Good catch on the first column being in ascending order</span>
<span class="comment-copy">what is the use of -x[1]?</span>
<span class="comment-copy">It is to sort by the second index, what OP calls the score, in decreasing order.</span>
<span class="comment-copy">He wants <code>5,7</code> in front.</span>
<span class="comment-copy">@ShashankSingh. Fixed. Thanks for pointing it out</span>
<span class="comment-copy">@OlivierMelan√ßon. Thanks for pointing that out. That's what I get for not reading the docs carefully. Fixed</span>
