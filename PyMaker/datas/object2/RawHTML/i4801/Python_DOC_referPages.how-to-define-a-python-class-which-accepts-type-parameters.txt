<div class="post-text" itemprop="text">
<p>Python 3.5 introduced <em>type hints</em> which allow one to write the following:</p>
<pre><code>from typing import Union

answer: Union[int, str] = 42
answer = '42'
</code></pre>
<p>documentation: <a href="https://docs.python.org/3/library/typing.html#typing.Union" rel="nofollow noreferrer">https://docs.python.org/3/library/typing.html#typing.Union</a></p>
<p>I think I understand the naive meaning of the above code. In particular, it means that the variable <code>answer</code> has been given a type hint, which says that it is supposed to be of the <code>Union</code> type with type parameters <code>int</code> and <code>str</code>, which in turn means that it is supposed to be either <code>int</code> or <code>str</code>.</p>
<p>What I do not understand, however, are the formal Python language rules around defining and using classes with type parameters in square brackets.</p>
<p>Can someone explain it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Like any other use of square brackets, <code>Union[int, str]</code> is implemented by <code>Union.__getitem__((int, str))</code>. In this case, <code>Union</code> is an instance of the class <code>_Union</code> which defines <code>__getitem__</code>. You don't really need to know those details to use the class.</p>
</div>
<div class="post-text" itemprop="text">
<p>Where you use <code>[]</code> it is calling the <code>__getitem__</code> method. The metaclass of the <code>Union</code> type has a <code>__getitem__</code> method. When you call <code>Union[int, str]</code> you are calling that <code>__getitem__</code> method passing a tuple, containing <code>int</code> and <code>str</code>. You can see this in the <code>typing.py</code> file in the Python library.</p>
</div>
<span class="comment-copy">Are you saying <code>Union(int, str)</code> makes more sense? Can you explain why? <code>()</code> is only reserved for tuples, expression grouping, and function calls.</span>
<span class="comment-copy">No, I am not saying that. I am asking what the rules are around using this syntax and how can one define a class which would accept such type parameters.</span>
<span class="comment-copy">Oh, so a metaclass is involved! Thanks for the explanation! It makes sense I guess, but I did not realize it is possible to use metaclasses for this purpose. I thought that some new syntax was introduced into the language.</span>
<span class="comment-copy">I'll update the answer; there <i>is</i> a metaclass involved, but not for this particular bit. <code>Union</code> is actually an instance of the class <code>_Union</code> which implements <code>__getitem__</code>.</span>
<span class="comment-copy">Thanks for the correction. The basic principle remains, I think, the same, i.e. no new language syntax is involved, but the existing language features are used to implement the classes which accept type parameters in the square brackets.</span>
<span class="comment-copy">Thanks, the possibility to use metaclass is the important piece of information that I was missing.</span>
