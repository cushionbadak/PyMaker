<div class="post-text" itemprop="text">
<p>so this is a collection of questions that are more to clarify things and help better understand rather than an issue I am having.</p>
<p><strong>I apologise now if I got things wrong or if these questions have been answered before. I wasn't able to find them.</strong></p>
<h2>First clarification I want to ask is:</h2>
<p>Let us assume:</p>
<pre><code>import scipy
</code></pre>
<p>First,  I have noticed that you cannot in general access a module in a package by doing import package and then trying to access package.module.</p>
<p>For example <code>scipy.io</code></p>
<p>You often have to do <code>import package.module</code> or even <code>import astropy.io.fits</code>, or you can do <code>from package import module</code>.</p>
<p>My question is why is this the case, and why is it so random -dependent on the package? I can't seem to identify any stable pattern.
Is it due to the fact that some of these libraries (packages) are very big and in order to not have memory problems it only imports the core attributes/modules?</p>
<h2>The second question:</h2>
<p>It relates to actually checking the size of these packages. Is there any way to see how big they are when imported? Any way of knowing what will work and what won't other than trying it? I guess I could check with <code>sys.modules</code> and try to obtain it from there?</p>
<h2>The third and final question:</h2>
<p>In the scenario that I am not running my code on a Raspberry Pi and I don't necessarily have to worry about the memory issue (if that is the reason why they don't allow direct access), is there any way of actually importing package, such that it also loads all the sub packages?</p>
<p><em>I am just being lazy and wondering if it is possible. I am aware that it isn't good practice, but curiosity killed the cat.</em></p>
<hr/>
<p>Just to update and make it accessible to people to see related questions I have looked at:</p>
<p>This answer gives good advice on good general practice:
<a href="https://stackoverflow.com/questions/193919/what-are-good-rules-of-thumb-for-python-imports?rq=1">What are good rules of thumb for Python imports?</a></p>
<p><a href="https://stackoverflow.com/questions/11172623/why-cant-i-use-the-scipy-io?rq=1">Why can't I use the scipy.io?</a> just like the documentation explains why the subpackage isn't necessarily imported</p>
<p>Then there is obviously the documentation:
<a href="https://docs.python.org/3/reference/import.html#packages" rel="nofollow noreferrer">https://docs.python.org/3/reference/import.html#packages</a>
Section 5.2.1 is the reason why <code>import scipy</code> doesn't also <code>import scipy.io</code>, but I was wondering why would developers not make it an automated process.</p>
<p>This question is actually similar to part of my question but doesn`t seem to have a clear answer <a href="https://stackoverflow.com/questions/16931486/python-complex-subpackage-importing?rq=1">Python complex subpackage importing</a></p>
<h2>Status of Questions:</h2>
<p>Question 1: Good reason in answers</p>
<p>Question 2: Pending</p>
<p>Question 3: Pending</p>
</div>
<div class="post-text" itemprop="text">
<h1>Answer Q1</h1>
<p>When you import a package, especially large ones like SciPy, it uses the <strong>init</strong>.py module intialisation module which prevents all subpackages/modules from being imported automatically to save space. I won't go into this further as this is already <a href="https://stackoverflow.com/questions/448271/what-is-init-py-for">mentioned in this question</a>, <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">documented here</a>, and talked about in other answers.</p>
<p>Additionally, if you have questions about scripts vs. modules, <a href="https://stackoverflow.com/a/14132912/7344150">this post</a> is incredibly descriptive.</p>
<h1>Answer Q2</h1>
<p>To find the size of a package I would point you towards <a href="https://stackoverflow.com/questions/4421061/how-to-get-module-location">this post about finding package directories</a>, and then <a href="https://stackoverflow.com/questions/1392413/calculating-a-directorys-size-using-python">this post about reporting the size of a particular directory</a>. You could create some combined code to do both for you.</p>
<h1>Answer Q3</h1>
<p>Update: Unsure on how to do this as the normal <code>from package import *</code> works as explained in the documentation (similar to Q1):</p>
<blockquote>
<p>if a package’s <code>__init__.py</code> code defines a list named <code>__all__</code>, it is taken to be the list of module names that should be imported when <code>from package import *</code> is encountered</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>A package is represented by the file <code>__init__.py</code>. Therefore, the packge <code>scipy</code> is represented by <code>scipy/__init__.py</code>. Inside this file you see a lot of imports like this:</p>
<pre><code>from scipy.version import version as __version__
</code></pre>
<p>This is the reason why <code>scipy.__version__</code> works, even though <code>__version__</code> actually lives in <code>scipy.version</code>. Not all packages do this. There is no rule when such kind of behavior can be expected. It is totally up to the package author(s). </p>
</div>
<div class="post-text" itemprop="text">
<p>The key difference between these import calls is the namespace the module is imported into. Given the following example:</p>
<pre><code>import mypackage
import mypackage.myclass
from mypackage import myclass
</code></pre>
<p>The first example imports everything exposed by <code>__init__.py</code> into the package's namespace. I.E. its elements can be accessed as <code>mypackage.myclass()</code>. The second example imports only <code>mypackage.myclass</code> and still imports it into that package's namespace, so it is still accessed as <code>mypackage.myclass()</code>. The third example imports <code>mypackage.myclass</code> into the <strong>current</strong> namespace, so it is accessed explicitly as <code>myclass()</code>, as if you had defined it yourself in the same script. This may hide things that you have named elsewhere.</p>
<p>One other important use case looks like this:</p>
<pre><code>import mypackage as mp
</code></pre>
<p>This lets you set the namespace that you want that package to be imported into, perhaps making it a shorthand or something more convenient.</p>
<p>In the case of  your question about why scipy doesn't import everything when you call <code>import scipy</code>, what it comes back to is that that import call only imports whatever the developers tell it to in the <code>__init__.py</code>. For scipy specifically, if you do: </p>
<pre><code>import scipy
dir(scipy)
</code></pre>
<p>You will see that it imports a bunch of classes and functions that are used throughout the package. I suspect that they intentionally don't import the submodules so as not to litter your runtime space with things that you aren't using. Perhaps there is a way to import everything automatically, but you probably shouldn't.</p>
</div>
<span class="comment-copy">My third question is actually regarding 'import scipy' such that it also imports all the subpackages/modules, but I guess there is no easy way of doing that. thanks for clarifying all the others</span>
<span class="comment-copy">I genuinely thought that <code>from scipy import *</code> would work for that... thanks for the ✓</span>
<span class="comment-copy">it doesn't. It works the same way as import mypackage.myclass which doesn't do what I meant. I wanted to import mypackage such that it automatically imports myclass as well</span>
<span class="comment-copy">Yes, my apologies, I was too tired to understand the documentation properly. I have updated my post now to reflect this</span>
<span class="comment-copy">ok so essentially it really comes down to individual packages. Now according to <a href="https://docs.python.org/3/reference/import.html#packages" rel="nofollow noreferrer">docs.python.org/3/reference/import.html#packages</a> section 5.2.1: ''Importing parent.one will implicitly execute parent/__init__.py and parent/one/__init__.py." From this, I would expect that in the case that I import astropy.io.fits, it would also import astropy. But I am not certain if this is true. (For ex.:I import matplotlib.pyplot but I still can't use matplotlib.use() --not that it would do anything)Also, I am still baffled as to why people do this and not automatically import the sub-packages as well.</span>
<span class="comment-copy">Ok, the last paragraph of your answer is actually a good answer to my first question. I guess it is a good point that they intentionally only define the core functions and don't import submodules to not affect the runtime and make it as light as possible. As for your point regarding 'import mypackage as mp' I would advise against it, and only use it when there is a conflict. <a href="https://stackoverflow.com/questions/193919/what-are-good-rules-of-thumb-for-python-imports?rq=1" title="what are good rules of thumb for python imports">stackoverflow.com/questions/193919/…</a> . This question/answer gives a nice elaboration as to why</span>
<span class="comment-copy">While the linked question makes a good point about importing classes with different names, in the form <code>from package import class as cls</code> or <code>import package.class as cls</code>, it is fairly standard practice to import an entire package with a shorter name, such as <code>import numpy as np</code> or <code>import matplotlib.pyplot as plt</code>, especially when you are typing out a bunch of references to that namespace</span>
