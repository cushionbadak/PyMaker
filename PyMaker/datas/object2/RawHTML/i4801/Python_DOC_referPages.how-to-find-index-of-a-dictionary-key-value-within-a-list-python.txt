<div class="post-text" itemprop="text">
<p>Lets say I have a list such as:</p>
<pre><code>listofpeople = [{'Jack': ['Blue', 'Red', 'Green']}, {'Barry': ['Red', 'Green', 'Orange']}]
</code></pre>
<p>If I were to go about searching for the index of 'Jack', how would I find his index if 'Jack' is a key value of a dictionary within a list?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; listofpeople = [{'Jack': ['Blue', 'Red', 'Green']}, {'Barry': ['Red', 'Green', 'Orange']}]
&gt;&gt;&gt; [i for i, d in enumerate(listofpeople) if "Jack" in d.keys()]
[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Keeping it simple -  </p>
<pre><code>for people in listofpeople:
    if 'Jack' in people:
        idx = listofpeople.index(people)
</code></pre>
<p>If idx has a value at the end you have the index of the element that had 'jack' as a key</p>
</div>
<div class="post-text" itemprop="text">
<p>Whatever you do, please don't look up the presence of a dictionary key from the list returned by <code>d.keys()</code>. Much more efficient is to query the dictionary directly. (Disclaimer: apparantly this only applies to Python 2, as the view returned in Python 3 also enables efficient membership tests...)</p>
<p>Then you can just fetch the index of the first item that has the key, e.g., like this:</p>
<pre><code>idx = next((i for i,d in enumerate(listofpeople) if "Jack" in d), None)
</code></pre>
<p>For reference:</p>
<ul>
<li><a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#next</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#enumerate</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#mapping-types-dict</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; l = [{'Jack': ['Blue', 'Red', 'Green']}, {'Barry': ['Red', 'Green', 'Orange']}]
&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; list(filter(lambda x: x[1] == 'Jack', enumerate(it.chain(*l))))
[(0, 'Jack')]
</code></pre>
<p>I am unpacking the variable <code>l</code> into positional arguments, which I then pass to <a href="https://docs.python.org/3.6/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain()</code></a>. This results in a flat list with the values <code>['Jack', 'Barry']</code>. The built-in function <code>enumerate()</code> returns a tuple containing a count (starts from 0) and the values obtained from iterating over iterable. The next and last thing I do is filtering with small anonymous function all the tuples where the second element (<code>x[1]</code>) equals to the desired <code>str</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe something like this:</p>
<pre><code>listofpeople = [{'Jack': ['Blue', 'Red', 'Green']}, {'Barry': ['Red', 'Green', 'Orange']}]
idx = 0
for i in listofpeople:
  for j in i.keys():
    if j == 'Jack':
      print(idx)
      break
  idx += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>name = "Jack"
for index, value in enumerate(listofpeople):
    if name in value.keys():
        print('{} at index {}'.format(value, index))
&gt;&gt;&gt;{'Jack': ['Blue', 'Red', 'Green']} at index 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>jack_indices = [i for i in range(len(listofpeople)) if listofpeople[i].keys() == ['Jack']]
</code></pre>
<p>Alternatively, if your dictionaries can have multiple keys and you're looking for all indices of those which contain 'Jack' as a key you could do:</p>
<pre><code>jack_indices = [i for i in range(len(listofpeople)) if 'Jack' in listofpeople[i].keys()]
</code></pre>
</div>
<span class="comment-copy">can the dictionary in list have multiple keys? suchas  <code>listofpeople = [{'Jack': ['Blue', 'Red', 'Green'], 'Rose':['Black','White']}, {'Barry': ['Red', 'Green', 'Orange']}]</code></span>
<span class="comment-copy">Yes, the different names would be the multiple keys.</span>
<span class="comment-copy">Do we need try block here?. Just <code>idx = next(i for i,d in enumerate(listofpeople) if "Jack" in d, None)</code> is enough?`</span>
<span class="comment-copy">surprisingly this answer is slower on my machine than casualcoder's</span>
<span class="comment-copy">@YannicHamann That might be because the list is pretty short, s.t. looking up the index returns immediately. Plus, there is less function call / iterator wrapping overhead ...</span>
<span class="comment-copy">Please explain how your code solves the problem.</span>
<span class="comment-copy">I have updated the answer.</span>
<span class="comment-copy">Please consider improving your answer by adding an explanation to your code.</span>
