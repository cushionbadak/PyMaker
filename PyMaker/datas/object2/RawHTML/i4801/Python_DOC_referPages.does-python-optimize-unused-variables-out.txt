<div class="post-text" itemprop="text">
<p>my linter constantly bugs me with unused variable warning, for the following class that I have created:</p>
<pre><code>class LockGuard(object):
    def __init__(self, mutex):
        self.mutex = mutex
        self.mutex.acquire()

    def __del__(self):
        self.mutex.release()
</code></pre>
<p>in code, I get the warning everytime I use this</p>
<pre><code>def do_something(self)
    locker = LockGuard(self.mutex)
    // do something on the data
    return outcome
</code></pre>
<p>I know that c++ compilers optimize unused variables out, I was wondering if python ever does the same? Therefore remove the lock on data.</p>
</div>
<div class="post-text" itemprop="text">
<p>The linter <em>should</em> bug you about this.  Because the correct way to manage context is with a <a href="https://docs.python.org/3/library/contextlib.html" rel="nofollow noreferrer">context manager</a>.  </p>
<pre><code>with LockGuard():
    # do stuff
</code></pre>
<p>Put the implementation details of how to acquire and release a lock into <code>LockGuard.__enter__</code> and <code>LockGuard.__exit__</code> respectively.  </p>
<p>You should not rely on <code>__init__</code> and <code>__del__</code> for this, because <code>__del__</code> is not reliable.</p>
<blockquote>
<p>I know that C++ compilers optimize unused variables out, I was wondering if Python ever does the same? Therefore remove the lock on data.</p>
</blockquote>
<p>Python will not do the same.  There are some peephole optimizations, but nothing so drastic as removing an object from scope entirely.  Once the reference count of an instance falls to zero (i.e. once <code>locker</code> name goes out of scope), it should be deleted, but there is no guarantee in the implementation about <em>when</em> this happens and there is not even a guarantee that a custom <code>__del__</code> will be called at all.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You are misusing the <code>__del__</code> method.</p>
<p>See the huge warning block in <a href="https://docs.python.org/3/reference/datamodel.html#object.__del__" rel="noreferrer">the documentation for <code>object.__del__</code></a>:</p>
<blockquote>
<p><strong>Warning:</strong> Due to the <strong>precarious circumstances</strong> under which <code>__del__()</code> methods are invoked, <em>[...]</em>. In particular:</p>
<ul>
<li><code>__del__()</code> can be invoked when arbitrary code is being executed, including from any arbitrary thread. <strong>If <code>__del__()</code> needs to take a lock or invoke any other blocking resource, it may deadlock as the resource may already be taken by the code that gets interrupted to execute <code>__del__()</code>.</strong> <em>(emphasis mine)</em></li>
<li><code>__del__()</code> can be executed during interpreter shutdown. <em>[...]</em></li>
</ul>
</blockquote>
<p>The correct solution is to implement a <a href="https://docs.python.org/3/library/stdtypes.html#typecontextmanager" rel="noreferrer">context manager</a> and use the <code>with</code> statement to enter and exit it.</p>
</div>
<div class="post-text" itemprop="text">
<p>for this simple function</p>
<pre><code>def f():
    a = 3
</code></pre>
<p>the answer is no: no optimization; disassembling with</p>
<pre><code>from dis import dis

dis(f)
</code></pre>
<p>gives:</p>
<pre><code>  6           0 LOAD_CONST               1 (3)
              3 STORE_FAST               0 (a)
              6 LOAD_CONST               0 (None)
              9 RETURN_VALUE
</code></pre>
<p>so <code>a</code> is assigned (...and then not used in any way). you can check that for your code; i'm pretty sure it will be the same.</p>
<p>on how to fix your code: i agree with <a href="https://stackoverflow.com/a/49160325/4954037">this answer</a>.</p>
</div>
<span class="comment-copy">Python isn't C++ so this approach might not be the best plan.</span>
<span class="comment-copy">If you want a "scope guard", you really shouldn't be using <code>__del__</code>, as its guarantees are much weaker. You should use a context manager object instead, as that's what they're designed for.</span>
<span class="comment-copy">@DanielPryden I second this. Don't use <code>__del__</code>, use a context manager, that is precisely what they are for.</span>
