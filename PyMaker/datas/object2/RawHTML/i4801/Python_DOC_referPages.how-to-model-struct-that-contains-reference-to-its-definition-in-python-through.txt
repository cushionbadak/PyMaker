<div class="post-text" itemprop="text">
<p>trying to wrap struct the reference it's definition as below</p>
<blockquote>
<p>foo.c</p>
</blockquote>
<pre><code>typedef struct Foo {
  struct Foo *foo;
} Foo;
</code></pre>
<p>how to model that, for example</p>
<blockquote>
<p>foo.py</p>
</blockquote>
<pre><code>class Foo(Structure):
    _fields_ = [('foo', pointer(Foo))]
</code></pre>
<p>of course python doesn't interpret that, I could use c_void_p instead of pointer(Foo), and cast it's value as follow</p>
<pre><code>F = clib.get_foo()
cast(F.foo, pointer(Foo)) #although i'm not sure if it would work
</code></pre>
<p>but, is there a way to model that struct in a python class?</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/ctypes.html#incomplete-types" rel="nofollow noreferrer">[Python]: Incomplete Types</a>:</p>
<blockquote>
<p>... . In <a href="https://docs.python.org/3/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">ctypes</a>, we can define the <code>cell</code> class and and set the <code>_fields_</code> attribute later, after the class statement.</p>
</blockquote>
<p>If we apply that to the current problem, the code would look smth like:</p>
<pre><code>from ctypes import Structure, POINTER


class Foo(Structure):
    pass

Foo._fields_ = [
    ("foo_ptr", POINTER(Foo)),
]
</code></pre>
</div>
