<div class="post-text" itemprop="text">
<pre><code>x = list(range(10))
print(x)
print(len(x))

while x != []: # run this loop if the list x not equal to [] is true
    for i in range(len(x)): # the first index is i =0
        x.pop(i)  #removes the element positioned at index i = 0 from the list x
print(x) 
</code></pre>
<p>Python does not return what I seek.</p>
<p>What is wrong here?</p>
<p><strong>No solutions</strong></p>
<p>Hints are appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you essentially want to do left popping, you might want to consider using a <code>deque</code> rather than a <code>list</code>.</p>
<pre><code>from collections import deque
x = deque(range(10))

while x:
  x.popleft()

print(x)  # deque([])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Once you have removed the element at index <code>0</code>, the element now at index <code>0</code> is really what was at index <code>1</code> as all the elements are "shifted along". So, you do not need the for-loop inside the while, you merely need to call <code>x.pop(0)</code> at the start of the while.</p>
<p>So, the code would look something like:</p>
<pre><code>x = list(range(10))
while x:                                                 #(equivalent to `x != []`)
    x.pop(0)
</code></pre>
<p>completing with <code>x</code> as <code>[]</code>.</p>
<hr/>
<p>Note that popping the first element is actually <code>O(n)</code> complexity (compared to popping the last which is <code>O(1)</code>). So if you were looking for efficiency, you could use a <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer">double-ended queue</a> which permits the use of <code>popleft()</code> (equivalent to <code>pop(0)</code>) but is <code>O(1)</code>.</p>
<p>So the implementation of that would simply be:</p>
<pre><code>import collections
x = collections.deque(range(10))
while x:
    x.popleft()
</code></pre>
<p>which gives <code>x</code> as <code>deque([])</code> but, if necessary, you could convert back to a list with <code>list()</code>.</p>
</div>
<span class="comment-copy">What is the actual output? What is the output you expect?</span>
<span class="comment-copy">@Someprogrammerdude I expect an output of an empty list The output, instead, returns  <code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code></span>
<span class="comment-copy">And remember that <a href="https://docs.python.org/3/library/stdtypes.html?highlight=range#range" rel="nofollow noreferrer"><code>range</code></a> is not a function that is called multiple times in the loop, it's a class which create a single object <i>once</i> and that single object is used all through the <code>for</code> loop.</span>
<span class="comment-copy">The for loop is unnecessary. After the while line, <code>x.pop()</code> will loop as long as <code>x != []</code>.</span>
<span class="comment-copy">@Someprogrammerdude It's a self-created examples to conceive of different ways I may use conditions and functions</span>
<span class="comment-copy">Is there a way to do this algorithmically without the deque function?</span>
<span class="comment-copy">What do you mean by algorithmically? The first way does work just isn't as efficient. You could make the first way as efficient "algorithmically" by reversing <code>x</code> and popping from the end.</span>
<span class="comment-copy">Generating the same output with minimal use of functions.</span>
