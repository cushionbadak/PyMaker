<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4813238/difference-between-subprocess-popen-and-os-system">Difference between subprocess.Popen and os.system</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/6220157/how-does-subprocess-call-differ-from-os-system">How does subprocess.call differ from os.system</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>Is there a functional difference between the following two methods?</p>
<pre><code>os.system("echo $HOME")
subprocess.call("echo $HOME")
</code></pre>
<p>This is a similar question to <a href="https://stackoverflow.com/questions/13334634/the-difference-between-os-system-and-subprocess-calls">this one</a>, but that question really focuses more on <code>subprocess.Popen()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're running python (cpython) on windows the <code>&lt;built-in function system&gt;</code> <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">os.system</a> will execute under the curtains <a href="https://msdn.microsoft.com/en-us/library/277bwbdz.aspx" rel="nofollow noreferrer">_wsystem</a> while if you're using a non-windows os, it'll use <a href="http://man7.org/linux/man-pages/man3/system.3.html" rel="nofollow noreferrer">system</a>.</p>
<p>While subprocess.call will use <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682425(v=vs.85).aspx" rel="nofollow noreferrer">CreateProcess</a> on windows and <a href="https://github.com/python/cpython/blob/master/Lib/subprocess.py#L1423" rel="nofollow noreferrer">_posixsubprocess.fork_exec</a> in posix-based operating-systems.</p>
<p>The above points should answer your questions about the main differences (structurally)... That said, I'd suggest you follow the most important advice from the <a href="https://docs.python.org/3/library/os.html#os.system" rel="nofollow noreferrer">os.system</a> docs, which is:</p>
<blockquote>
<p>The subprocess module provides more powerful facilities for spawning
  new processes and retrieving their results; using that module is
  preferable to using this function. See the Replacing Older Functions
  with the subprocess Module section in the subprocess documentation for
  some helpful recipes.</p>
</blockquote>
</div>
<span class="comment-copy">Yes. And you should basically always use <code>subprocess</code>. If you want a more complete answer, you need to first read the docs, and then tell us what parts you don't understand.</span>
<span class="comment-copy">Side-note: Both of them are completely pointless, since they're basically equivalent to <code>print(os.environ["HOME"])</code>.</span>
<span class="comment-copy">Also see <a href="https://docs.python.org/3/library/subprocess.html#replacing-os-system" rel="nofollow noreferrer">docs.python.org/3/library/subprocess.html#replacing-os-system</a> (in this case, of course, "Calling the program through the shell is usually not required" does not applyâ€¦)</span>
<span class="comment-copy">If you're going to ask a question similar to others, please be more explicit/specific in the question about <i>exactly</i> what aspect of your problem isn't addressed elsewhere ("From question X, I understand A, but this still doesn't answer B").</span>
<span class="comment-copy">@ShadowRanger It's just sample code. Side-note: I guess using <code>subprocess</code> is pointless by the same logic, because you could just type whatever you need on the shell.</span>
<span class="comment-copy">Thank you @BPL - this is a much better answer than ones from the linked questions.</span>
