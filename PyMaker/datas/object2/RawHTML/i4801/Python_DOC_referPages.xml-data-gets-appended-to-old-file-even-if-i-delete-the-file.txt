<div class="post-text" itemprop="text">
<p>I have to write xml data to file and if file exists I have to remove that file first but it appends the data every time to the same file.<br/>
Note: I am doing this in scons file </p>
<p><strong>myfile.py</strong></p>
<pre><code>class AttributeDataXmlBuilder():
    def __init__(self, AttrXml, simAttrXml, logger = logging.getLogger(__name__)):
        self.logger = logger
        self.simAttrXml = os.path.join(simAttrXml, "AttributeData.xml")
        self.AttrXml = AttrXml
        assert len(AttrXml) &gt; 0, 'Need at least two xml file to merge'
        self.roots = [ElementTree.parse(xml_file).getroot() for xml_file in self.AttrXml]

    def combine(self):
        # iteratively add all files to first file
        for root_tag in self.roots[1:]:
            self.combine_element(self.roots[0], root_tag)
        # iterate final file for readaccess and writeaccess tag and change there value to NoAccess
        for read_access in self.roots[0].iter('ReadAccess'):
            if read_access.text != 'NoAccess':
                read_access.text = 'NoAccess'
        for write_access in self.roots[0].iter('WriteAccess'):
            if write_access.text != 'NoAccess':
                write_access.text = 'NoAccess'
        # set owner as System
        self.roots[0].attrib['owner'] = 'System'
        ATT_DATA = ElementTree.ElementTree(self.roots[0])
        ATT_DATA.write(self.simAttrXml, encoding="utf-8", xml_declaration=True)

    def combine_element(self, one, other):
        one.extend(other)
</code></pre>
<p><strong>SConscript</strong></p>
<pre><code>myfile.XmlBuilder(DataXml, sDataXml_loc).combine()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">the Python documentation on <code>open</code></a>:</p>
<blockquote>
<p>mode is an optional string that specifies the mode in which the file is opened. It defaults to 'r' which means open for reading in text mode. Other common values are 'w' for writing (truncating the file if it already exists) ...</p>
</blockquote>
<p>In plain English, this means that when you open the file for writing its existing contents are immediately deleted and whatever you write to the file (if anything) becomes its new content. You say</p>
<blockquote>
<p>"if file exists I have to remove that file first"</p>
</blockquote>
<p>so it looks as though the ElementTree's <code>write</code> method is doing something weird. I presume you have checked that the file size increases after each run, rather than a simple visual inspection of the output? I'd be very surprised if ElementTree outputs were so different from standard Python files.</p>
<p><strong>EDIT</strong>: The following program creates an XML file, parses it and writes a subtree out to a new file:</p>
<pre><code>from xml.etree.ElementTree import ElementTree

data = """\
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Example page&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;p&gt;Moved to &lt;a href="http://example.org/"&gt;example.org&lt;/a&gt;
        or &lt;a href="http://example.com/"&gt;example.com&lt;/a&gt;.&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
"""

with open('input.xml', 'w') as f:
    f.write(data)

tree = ElementTree()
tree.parse('input.xml')
p = tree.find("body/p")     # Finds first occurrence of tag p in body
links = list(p.iter("a"))   # Returns list of all links
for i in links:             # Iterates through all found links
    i.attrib["target"] = "blank"

tree.write("output.xhtml")
</code></pre>
<p>I run it once:</p>
<pre><code>(static_web) Airhead:tmp sholden$ ls -l input.xml output.xhtml
-rw-r--r--  1 sholden  wheel  225 15 Mar 10:23 input.xml
-rw-r--r--  1 sholden  wheel  254 15 Mar 10:23 output.xhtml
</code></pre>
<p>I run it again:</p>
<pre><code>(static_web) Airhead:tmp sholden$ ls -l input.xml output.xhtml
-rw-r--r--  1 sholden  wheel  225 15 Mar 10:23 input.xml
-rw-r--r--  1 sholden  wheel  254 15 Mar 10:23 output.xhtml
</code></pre>
<p>and the files are the same length. Not even the creation time has changed, since they have been truncated rather than removed and rewritten. You could add an <code>os.remove</code> call to verify it made no difference to the file sizes.</p>
</div>
<span class="comment-copy">The code snippet looks OK. Please provide <a href="https://stackoverflow.com/help/mcve">a minimal, complete, and verifiable example</a> of your problem.</span>
<span class="comment-copy">@SergiyKolesnikov minimal code updated</span>
<span class="comment-copy">It may be minimal but it certainly isn't complete. And I presume the call to <code>myfile.XmlBuilder</code> should be a call to <code>myfile.AttributeXmBuilder</code>?</span>
<span class="comment-copy">@user3812837 In your example, you do not remove any files as you describe. Also see the comment by holdenweb.</span>
<span class="comment-copy">Please provide a working sample. Above is not sufficient. A Usable SConstruct shouldn't be that much bigger than what you have above.</span>
<span class="comment-copy">You asked : <i>I presume you have checked that the file size increases after each run, rather than a simple visual inspection of the output?</i> Ans: <b>File size doubles(if you run twice ) , then triples(if you run thrice) , then four times (if you run four times) and same elements are added again</b>  I have updated minimal code so that it gives more clarity</span>
<span class="comment-copy">In which case you will need to be more explicit in the question - you don't show the values for the arguments to your class creation call, for example.</span>
