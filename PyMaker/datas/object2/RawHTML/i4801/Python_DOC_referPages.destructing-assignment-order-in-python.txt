<div class="post-text" itemprop="text">
<p>Today I came across this expression:</p>
<pre><code>(x,_),(y,_) = load_data()
</code></pre>
<p>...and I'm wondering what is the order of assignment.</p>
<hr/>
<p>For example <code>x,x,x = 1,2,3</code> set <code>x</code> to <code>3</code> from my test, does it actually set <code>x</code> to 1, 2, than 3?</p>
<p>What's the rule it follows? And what happens in more complex conditions like the first code snippet?</p>
</div>
<div class="post-text" itemprop="text">
<p>The relevant part of the <a href="https://docs.python.org/3.6/reference/simple_stmts.html" rel="nofollow noreferrer">documentation on assignment statements</a> is: </p>
<blockquote>
<p>If the target list is a comma-separated list of targets, or a single target in square brackets: The object must be an iterable with the same number of items as there are targets in the target list, and the items are assigned, <strong>from left to right</strong>, to the corresponding targets.</p>
</blockquote>
<p>(Emphasis mine: that's how the order is determined.)</p>
</div>
<div class="post-text" itemprop="text">
<p>It will load the couple of tuples that load_data() returns into variables x, y and _ which you define. This in turn will assign the first member of each tuple to x and y and the last value to the <code>_</code> variable (which gets overridden the second time it's called).</p>
<p>Example:</p>
<pre><code>def load_data():
    return (1,2), (3,4)

(x, _), (y, _) = load_data()

print(x, y, _)
</code></pre>
<p>Outputs</p>
<blockquote>
<p>1 3 4</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>This is a really interesting question, though I should say first that you probably shouldn't assign the same variable more than once per line.</p>
<p>The first example expects <code>load_data()</code> to return two tuples. It will assign <code>(x, _)</code> to the first one. The underscore is a convention for unpacking values you don't care about. It will be overwritten when the second tuple is unpacked.</p>
</div>
<span class="comment-copy">expressions are evaluated from left to right. to last one wins, yes.</span>
<span class="comment-copy">also, the type of <code>1,2,3</code> is a tuple. So it has a defined order.</span>
<span class="comment-copy">You can find out what a statement does by entering it into the Python console. The rules are defined in the reference manual: <a href="https://docs.python.org/3.6/reference/simple_stmts.html" rel="nofollow noreferrer">docs.python.org/3.6/reference/simple_stmts.html</a> - it maps tuple items in the left hand side to tuple items in the right hand side, 1:1, recursively. (When not using the star operator.) In general, if an assignment statement is ambiguous, I'd recommend just writing out multiple assignments explicitly.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer"><i>"... and assigns the single resulting object to each of the target lists, from left to right"</i></a></span>
<span class="comment-copy"><code>import dis; dis.dis('(x,_),(y,_) = load_data()')</code> This makes the order very clear</span>
