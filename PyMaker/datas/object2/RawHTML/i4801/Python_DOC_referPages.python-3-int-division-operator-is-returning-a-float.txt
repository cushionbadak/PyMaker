<div class="post-text" itemprop="text">
<p>In one of my assignments I came across a weird implementation, and I was curious if it's a bug or the designed behavior.</p>
<p>In Python 3, division by <code>/</code> returns a floating point number, and <code>//</code> means integer division and should return an integer. I've discovered though that if either of the values is a float when doing integer division, it will return a float.</p>
<p>Example:</p>
<pre><code># These all work as expected
10 / 2
-&gt; 5.0
11 / 2
-&gt; 5.5
10 // 2
-&gt; 5
11 // 2
-&gt; 5
# Here things start to get weird
10.0 // 2
-&gt; 5.0
10 // 2.0
-&gt; 5.0
11.0 // 2
-&gt; 5.0
</code></pre>
<p>Is this <em>supposed</em> to behave this way? If so, <em>why</em> does it behave this way?</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://www.python.org/dev/peps/pep-0238/" rel="nofollow noreferrer">PEP-238</a>, which introduced the new division (emphasis mine):</p>
<blockquote>
<h2>Semantics of Floor Division</h2>
<p>Floor division will be implemented in all the Python numeric types,
  and will have the semantics of:</p>
<pre class="lang-py prettyprint-override"><code>a // b == floor(a/b)
</code></pre>
<p>except that the result type will be the common type into which <em>a</em> and
  <em>b</em> are coerced before the operation.</p>
<p><strong>Specifically, if <em>a</em> and <em>b</em> are of the same type, <code>a//b</code> will be of that type too.</strong> If the inputs are of different types, they are first
  coerced to a common type using the same rules used for all other
  arithmetic operators.</p>
<p>In particular, if <em>a</em> and <em>b</em> are both ints or longs, the result has the
  same type and value as for classic division on these types (including
  the case of mixed input types; <code>int//long</code> and <code>long//int</code> will both
  return a long).</p>
<p><strong>For floating point inputs, the result is a float.</strong> For example:</p>
<pre class="lang-py prettyprint-override"><code>3.5//2.0 == 1.0
</code></pre>
<p>For complex numbers, <code>//</code> raises an exception, since <code>floor()</code> of a
  complex number is not allowed.</p>
<p>For user-defined classes and extension types, all semantics are up to
  the implementation of the class or type.</p>
</blockquote>
<p>So yes, it is supposed to behave that way. <em>"<code>//</code> means integer division and should return an integer"</em> - not quite, it means <strong>floor division</strong> and should return something <em>equal to</em> an integer (you'd always expect <code>(a // b).is_integer()</code> to be true where either operand is a float).</p>
</div>
<div class="post-text" itemprop="text">
<p>I hope this clarifies the situation:</p>
<blockquote>
<p><strong>/ Division</strong></p>
<p>Divides left hand operand by right hand operand</p>
<pre><code>b / a = 2
</code></pre>
<p><strong>// Floor Division</strong></p>
<p>The division of operands where the result is the quotient in which the
  digits after the decimal point are removed. But if one of the operands
  is negative, the result is floored, i.e., rounded away from zero
  (towards negative infinity)</p>
<pre><code>9//2 = 4 and 9.0//2.0 = 4.0, -11//3 = -4, -11.0//3 = -4.0
</code></pre>
</blockquote>
<p><a href="https://www.tutorialspoint.com/python/python_basic_operators.htm" rel="nofollow noreferrer">https://www.tutorialspoint.com/python/python_basic_operators.htm</a></p>
</div>
<span class="comment-copy">Internally what is happening? For mixed, ints and floats, values are converted to floats and then float.__floordiv__ is called?</span>
<span class="comment-copy">@Chris_Rands you mean in the CPython implementation? I don't know, you'd have to look into <a href="https://github.com/python/cpython" rel="nofollow noreferrer">github.com/python/cpython</a></span>
<span class="comment-copy">Is there a use case where it would be desired for you to get a float instead of an int, since there will never be anything to the right of the decimal point?</span>
<span class="comment-copy">@Kayla if you always want an int, it's easy to be explicit and say <code>int(a // b)</code>. But in general this behaviour is consistent with <a href="https://docs.python.org/3/reference/expressions.html#arithmetic-conversions" rel="nofollow noreferrer">arithmetic conversions</a> and other <a href="https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations" rel="nofollow noreferrer">binary arithmetic operations</a>, and e.g. <code>1 == 1.0</code> and behaves similarly enough for most use cases.</span>
<span class="comment-copy">Interestingly, <a href="https://www.python.org/dev/peps/pep-3141" rel="nofollow noreferrer">PEP 3141</a> proposes that the <code>__floordiv__</code> special method should always return an <code>Integral</code> instance, but that part of PEP 3141 never got implemented for the <code>float</code> type. See also <a href="https://bugs.python.org/issue22444" rel="nofollow noreferrer">bugs.python.org/issue22444</a>.</span>
