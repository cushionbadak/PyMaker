<div class="post-text" itemprop="text">
<p>I have a str like:</p>
<pre><code>-110-108 -95 -92 -88 -87 -85 -75  -73 -69 -67 -59 -51 -49 -47 -42  -39 -35 -36 -36 -32 -27 -29 -32
</code></pre>
<p><strong>I need to split it into a list so that I get all the 24 elements like:</strong></p>
<pre><code>["-110", "-108", "-95" ....]
</code></pre>
<p>I tried <code>line.split(" ")</code> but this doesn't work as I get the list as:</p>
<pre><code>["-110-108" ...]
</code></pre>
<p>This is because there is no space between -110 &amp; -108.</p>
<p>I tried splitting as <code>line.split("-")</code> but this has 2 problems:</p>
<p>The delim is lost, and if there is no negative sign, the whole number is treated as a string.</p>
<p>Like: <code>["-", "110", "-", "95" .... , "5 6 7"]</code> assuming there are positive numbers.</p>
<p>How do I split it exactly as the str contains 24 numbers and I need a list with all the 24 numbers as elements with magnitude.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer"><code>regex</code></a>:</p>
<pre><code>import re

s = "-110-108 -95 -92 -88 -87 -85 -75  -73 -69 -67 -59 -51 -49 -47 -42  -39 -35 -36 -36 -32 -27 -29 -32"

l = [x for x in re.split("(-?\d+)",s) if x.rstrip()]

print(l)
</code></pre>
<p>Output:</p>
<pre><code>['-110', '-108', '-95', '-92', '-88', '-87', '-85', '-75', '-73', 
 '-69', '-67', '-59', '-51', '-49', '-47', '-42', '-39', '-35', 
 '-36', '-36', '-32', '-27', '-29', '-32']
</code></pre>
<p>Explanation:</p>
<p><code>re.split(pattern, string)</code> useses a pattern to split, the pattern I provided it with <code>(-?\d+)</code> means: optional <code>-</code> followed by 1 or more digits.</p>
<p>The list comprehension filters "empty" or "whitespace only" splits by discaring empty (== False) results using <code>if x.rstrip()</code>.</p>
<p>If you want to convert them as well, use:</p>
<pre><code>l = [int(x) for x in re.split("(-?\d+)",s) if x.rstrip()]
</code></pre>
<hr/>
<p>Or - not as performant, creates lots of intermediate strings, you can "fix" it:</p>
<pre><code>s = "-110-108 -95 -92 -88 -87 -85 -75  -73 -69 -67 -59 -51 -49 -47 -42  -39 -35 -36 -36 -32 -27 -29 -32"

for i in range(10): 
    s = s.replace(f'-{i}',f' -{i}') # replace any "-0","-1",...,"-9" 
                                    #        with " -0"," -1",...," -9" 

l = [x for x in s.split(" ") if x] # split by ' ' only use non-empty ones
</code></pre>
<hr/>
<p>You can split it yourself by iterating over the chars (still better then producing lots of intermediate strings)</p>
<pre><code>s = "-110-108 -95 -92 -88 -87 -85 -75  -73 -69 -67 -59 -51 -49 -47 -42  -39 -35 -36 -36 -32 -27 -29 -32"

result = [] # complete list
tmp = [] # partlist
for c in s: # char-wise iteration 
    if c != '-':
        tmp.append(c)  
    else:
        if tmp:
            result.append(''.join(tmp).strip())
        tmp = ['-']

if tmp: # tmp not empty, and not yet added (last number in s)
    result.append(''.join(tmp))

print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>re.findall()</code> and regex <code>-\d+</code>.</p>
<pre><code>re.findall(r'-\d+', str)
</code></pre>
<p>Output:</p>
<pre><code>['-110', '-108', '-95', '-92', '-88', '-87', '-85', '-75', '-73', '-69', '-67', '-59', '-51', '-49', '-47', '-42', '-39', '-35', '-36', '-36', '-32', '-27', '-29', '-32']
</code></pre>
</div>
<span class="comment-copy">Great answer Patrick. I just stumbled on to this question. Because the <code>-</code> is optional, does that mean your solution would work seamlessly for positive numbers in the list as well? Looks like it does.</span>
<span class="comment-copy">@rishijd yes - because that what normally happens ;) you need them for both - it wont work for positive ones if you add a <code>+</code> in front though - you would have to adjust the regexpatters for that - or simply replace all <code>+</code> by <code>' '</code> beforehand</span>
<span class="comment-copy">Works like a charm!</span>
<span class="comment-copy">@theprogrammer  all 3 of 3 versions work ;)</span>
<span class="comment-copy">Haha, got it - thanks @Patrick Artner :)</span>
