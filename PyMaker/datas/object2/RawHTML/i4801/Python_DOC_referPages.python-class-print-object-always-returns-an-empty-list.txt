<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>class Mylist(list):

    def __init__(self,lst=[]):
        self.lst=list(lst)

    def append(self,item):
        self.lst.append(item)
m=Mylist([1,2])
m.append(3)
m
</code></pre>
<p>Intuitively, this code should print [1,2,3] or maybe [3]? but definitely not []. I am wondering why is this happening? Although when I use m.lst instead of just m, then it prints [1,2,3]. </p>
</div>
<div class="post-text" itemprop="text">
<p>As <code>MyList</code> inherits from <code>list</code>, it already contains internal storage for items that <code>append</code> (and <code>extend</code>) would normally add to. When you <code>print(m)</code> it is this <em>internal</em> storage that is shown.</p>
<p>In your case you have then overridden <code>append</code> to redirect items to be added to a separate attribute (<code>lst</code>), meaning that internal storage remains empty.</p>
<p>Note that you have not overridden <code>extend</code>.  Thus:</p>
<pre><code># this will add to the *internal* storage, not `.lst`
&gt;&gt;&gt; m.extend(["my", "gosh"])`
&gt;&gt;&gt; print(m)
['my', 'gosh']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>Mylist</code> doesn't in any way utilize the fact that it's subclassing <code>list</code>. Your code would work if <code>list</code> actually had a <code>lst</code> attribute that itself was a list, but this is not the case. </p>
<p>You need to use the exposed interface of the <code>list</code> object that you inherited from if you want your overridden methods to do things that are picked up by the underlying <code>list</code> object:</p>
<pre><code>class MyList(list):
    def __init__(self, iterable):
        print('I was passed:', iterable)

        super().__init__(iterable)

    def append(self, element):
        print('I am appending the element:', element)

        super().append(element)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to <em>use</em> a list, you don't need to inherit from <code>list</code>, and shouldn't:</p>
<pre><code>class Mylist: # no (list) here!
    def __init__(self,lst=[]):
        self.lst=list(lst)
    def append(self,item):
        self.lst.append(item)
m=Mylist([1,2])
m.append(3)
</code></pre>
<p>This works. Of course printing out <code>m</code> will just get you something like <code>&lt;__main__.MyList at 0x12345678&gt;</code>, because you haven't told it how you want to be printed. You need to add another method like this:</p>
<pre><code>    def __repr__(self):
        return '{}({})'.format(type(self).__name__, self.lst)
</code></pre>
<p>And now you'll print out <code>MyList([1, 2, 3])</code>.</p>
<hr/>
<p>If you want to <em>look</em> like a <code>list</code>, you still don't inherit from <code>list</code> for that. In most cases, in Python, "looking like a list" is just a matter of duck-typing: you implement all the right methods, and everything just works.</p>
<p>However, you might want to consider inheriting from <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer"><code>MutableSequence</code></a>. Then, you just implement about 7 or 8 methods, and you get the whole rest of the <code>list</code>'s behavior for free. And you're also providing a way that code that, for whatever reason, needs to explicitly check whether you "act like a list" can do so.</p>
<hr/>
<p>So, when <em>should</em> you inherit from <code>list</code>? When you want to use the <code>list</code>'s internal storage and implementation as your own.</p>
<p>Here's a silly example. To the extent that it has any reason to exist at all, it's reasonable that it should be a <code>list</code> subclass:</p>
<pre><code>class FreezableList(list):
    def frozen_copy(self):
        return tuple(self)
    def __repr__(self):
        return '{}({})'.format(type(self).__name__, self.lst)
</code></pre>
</div>
<span class="comment-copy">.... why are you overriding the <code>list</code> class to add an attribute that <i>is a list</i> which you then redirect <code>.append</code>'s to???</span>
<span class="comment-copy">@donkopotamus Just don't use it <i>unless you understand it's semantics</i>. Here, it should work just fine.</span>
<span class="comment-copy">Anyway, your code prints <code>[1, 2, 3]</code> so I cannot reproduce your issue...</span>
<span class="comment-copy">@juanpa.arrivillaga  It does not print [1,2,3]</span>
<span class="comment-copy"><code>m</code> however, will definitely print <code>[]</code>.... why did you think it would do something different?</span>
