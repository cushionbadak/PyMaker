<div class="post-text" itemprop="text">
<h1>What I need help with</h1>
<p>I want to receive variables from a external .json file in the local directory
using python27</p>
<p>(import doesn't work)</p>
<p>I want to store the variables in the .json like below</p>
<pre><code>value1 = "this_is_value1"
value2 = "this_is_value2"
value3 = "this_is_value3"
</code></pre>
<p>and have them being used in a script.</p>
<p>If I can get it to the point of which the .json includes</p>
<pre><code>value1 = "this_is_value1"
</code></pre>
<p>and my .py includes</p>
<pre><code>print(value1)
</code></pre>
<p>with output </p>
<pre><code>&gt;&gt;&gt;this_is_value1
</code></pre>
<p>I can take it from there</p>
<h1>My end Task</h1>
<p>The idea is that I need to change specific parts of another .yaml file, this program needs to take variables like (ID, System_id, IP) and for this case I need a .json I can change which the python27 script then pulls the information from to change the .yaml file. </p>
<p>I've done this part fine, just need to do  this part</p>
<h1>Have I researched the issue?</h1>
<p>In short, YES. </p>
<p>however, theses answer use .py or other file types.</p>
<p>I've already tried importing the file but since it needs to sit next to the script I can't use <b>import</b></p>
<p>Other anwser simply give no information back about how they solved the issue.</p>
</div>
<div class="post-text" itemprop="text">
<p>With a json formatted file (say "my_file.json"), for instance:</p>
<pre><code>{
  "x": "this is x",
  "y": "this is x",
  "z": "this is z"
}
</code></pre>
<p>Then in Python: </p>
<pre><code>import json

with open("my_file.json", "r") as f:
    my_dict = json.load(f)
print(my_dict["x"])
</code></pre>
<p>Yields:</p>
<pre><code>this is x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work:</p>
<pre><code>&gt;&gt; string1 = 'value1 = "this_is_value1"'

&gt;&gt; exec(string1)

&gt;&gt; print(value1)
"this_is_value1"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I generally like to control this process with a method or function. Here is a code snip I use frequently that will read the format of the text file you've shown:</p>
<pre><code>class MainApp(object):

    def __init__(self, config_file):
        # Initialization stuff from a configuration file.
        self.readConfigFile(config_file)

    def readConfigFile(self, file):
        try:
            with open(file, 'r') as cfg:
                lines = list(cfg)
            print("Read", len(lines), "lines from file", file)
            # Set configured attributes in the application
            for line in lines:
                key, value = line.split('=')
                setattr(self, key.strip(), value.strip())
        except:
            print('Configuration file read error')
            raise

if __name__ == '__main__':
    # Create an instance of the application.
    # It will read the configuration file provided here.
    app = MainApp('myconfig.txt')
    # Now you can access the attributes of the class (read from config file)
    print(app.value1, app.value2, app.value3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If what you really need is a .txt file, then I recommend you to take a look at the documentation:
<a href="https://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/inputoutput.html</a>
Go to section: 7.2 Reading and Writing a file</p>
<p>Basically, you'll need is:</p>
<pre><code>lines = [] # for further data manipulation
file = open("c:\path\to\your.txt", "r")
for line in file:
    lines.append([line.split("=")])
file.close()
</code></pre>
<p>Now if you have in your .txt bar="foo"
Then in the lines list you can do:</p>
<pre><code>lines[0][0] # output "bar"
lines[0][1] # output "foo"
</code></pre>
<p>Of course there are some more smater way of doing this, but this is just basic idea.</p>
</div>
<span class="comment-copy">Why do you need them as variables? Is a <code>dict</code> not good enough?</span>
<span class="comment-copy">Have a look at the <code>configparser</code> module for a safe, easy way to store this kind of config.</span>
<span class="comment-copy">Either an inifile, or a json formatted file loaded into a dict should solve your issue</span>
<span class="comment-copy">"... these answer[s] use .py or other file types" â€“ but the methods do work? Then cheat. Rename your .txt file to .py, import, rename back.</span>
<span class="comment-copy">Or you could use pickle, pickle.dump and pickle.load</span>
<span class="comment-copy">This doesn't really answer my questions, as I wanted the "string1" variable stored in a external .txt file. I thank you though :).</span>
<span class="comment-copy">You can simple read the lines of that file into strings with <code>f.readline()</code> and use this to convert it to a variable.</span>
<span class="comment-copy">That's not a good idea, suppose someone writes in that text file on a line <code>os.removedirs("/")</code></span>
<span class="comment-copy">I'm slightly confused about what this does, Could you please explain a little more :)</span>
<span class="comment-copy">I updated the answer with a use case example. It's beneficial because the app contains all of the configured parameters as attributes of the class.</span>
