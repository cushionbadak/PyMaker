<div class="post-text" itemprop="text">
<p>I am using win32com to convert a .docx file into a .txt file. It works well until it gets unrecognized characters in Spanish.</p>
<pre><code>DOC_FILEPATH = r"C:\Temp\Hugo- Ortíz -.docx"
s = find_between_r(DOC_FILEPATH, '.', '')
FILETXT = DOC_FILEPATH.strip(s)
FILETXT = FILETXT + "txt"
doc = win32com.client.GetObject(DOC_FILEPATH) 
text = doc.Range().Text 
with open(FILETXT, "wb") as f:
   f.write(text.encode("utf-8"))
</code></pre>
<p>When win32com.client reads the DOC_FILEPATH, I get this error</p>
<pre><code>moniker, i, bindCtx = pythoncom.MkParseDisplayName(Pathname)
pywintypes.com_error: (-2147221014, 'El moniker no puede abrir un archivo', None, None)
</code></pre>
<p>Is there a way to read that file without changing the name?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is not how <em>Word Automation</em> works. Check <em>Word Object Model</em> (<a href="https://docs.microsoft.com/en-us/office/client-developer/word/word-home" rel="nofollow noreferrer">[MS.Docs]: Word</a>) for more details.</p>
<p>You should create a <code>Word.Application</code> instance, and that will deal with the documents.</p>
<p>I adapted <a href="https://stackoverflow.com/questions/49088748/python-using-win32com-client-to-accept-all-changes-in-word-documents">[SO]: Python - Using win32com.client to accept all changes in Word Documents</a> and tested it on a dummy doc for you.</p>
<p><em>code.py</em>:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python3

# -*- coding: cp1252 -*-

import sys
import os
import win32com.client as w32comcl


if __name__ == "__main__":
    print("Python {:s} on {:s}\n".format(sys.version, sys.platform))
    doc_path = r"Documento ficticío.docx"
    txt_path = os.path.splitext(doc_path)[0] + ".txt"
    word = w32comcl.Dispatch("Word.Application")
    try:
        word.Visible = False
        doc = word.Documents.Open(os.path.abspath(doc_path))
        try:
            text = doc.Range().Text
            with open(txt_path, "wb") as f:
                f.write(text.encode("utf8"))
        finally:
            doc.Close(False)
    finally:
        word.Application.Quit()
</code></pre>
<p><strong>Notes</strong>:</p>
<ul>
<li>Changed the variable names a bit</li>
<li>Added some error handling</li>
<li>Using <a href="https://docs.python.org/3/library/os.path.html#os.path.splitext" rel="nofollow noreferrer">[Python 3]: os.path.<strong>splitext</strong>(<em>path</em>)</a> to handle file path name (basically, changing the extension)</li>
<li>1<sup>st</sup> line is to avoid getting a <em>SyntaxError</em> because of the "<strong>í</strong>" (<em>0xED</em>) char (<a href="https://www.python.org/dev/peps/pep-0263/" rel="nofollow noreferrer">[Python]: PEP 263 -- Defining Python Source Code Encodings</a>) - frankly I don't know how come you didn't run into this, since for me, both <em>Python 3</em> and <em>Python 2</em> are behaving the same</li>
</ul>
<p><strong>Output</strong>:</p>
<blockquote>
<pre class="lang-bat prettyprint-override"><code>(py35x64_test) e:\Work\Dev\StackOverflow\q049179872&gt;dir /b
code.py
Documento ficticío.docx

(py35x64_test) e:\Work\Dev\StackOverflow\q049179872&gt;"e:\Work\Dev\VEnvs\py35x64_test\Scripts\python.exe" code.py
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32


(py35x64_test) e:\Work\Dev\StackOverflow\q049179872&gt;dir /b
code.py
Documento ficticío.docx
Documento ficticío.txt

(py35x64_test) e:\Work\Dev\StackOverflow\q049179872&gt;type "Documento ficticío.txt"
P├írrafo fictic├¡o0: 1234567890qwertyuioopasdfghjklzxcvbnm.
</code></pre>
</blockquote>
</div>
<span class="comment-copy">Did this answer your question?</span>
