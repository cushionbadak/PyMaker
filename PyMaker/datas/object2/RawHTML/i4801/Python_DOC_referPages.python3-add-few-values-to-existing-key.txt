<div class="post-text" itemprop="text">
<p>I know there is a lot of information about this subject, but I'm really stuck with this problem.</p>
<p>I have a dictionary loaded from a file:</p>
<pre><code>datastore = json.load(f)    
print(datastore)
{"a": "999", "b": "345"}
</code></pre>
<p>Now, I need to add more values to the existing key.</p>
<p>But instead I receive an error: </p>
<blockquote>
<p><code>AttributeError: 'str' object has no attribute 'append'</code></p>
</blockquote>
<p>Here's what I've tried so far:</p>
<pre><code>if key in datastore:
    temp = []
    [temp.extend([k, v]) for k, v in datastore.items()]
    print(temp)
    print(type(temp))
    i = temp.index(key)
    print(i)
    temp[i].append(value)
    print(temp)
</code></pre>
<p>and:</p>
<pre><code>if key in datastore:
    datastore.setdefault(key, [])
    datastore[key].append(value)
</code></pre>
<p>Result is the same: </p>
<blockquote>
<p><code>'str' object has no attribute 'append'</code></p>
</blockquote>
<p>Please help!</p>
<p>Full code below:</p>
<pre><code>import os
import json
import argparse
import sys

if len(sys.argv) &gt; 3:

  parser = argparse.ArgumentParser()
  parser.add_argument("--key")
  parser.add_argument("--val")
  args = parser.parse_args()

  key = args.key
  value = args.val

  storage = {}
  storage[key] = value

  if os.path.exists('storage_file'):
    with open('storage_file', 'r') as f:
      datastore = json.load(f)
      if key in datastore:
        datastore.setdefault(key, [])
        datastore[key].append(value)
      else:
        datastore.update({key: value})
      with open('storage_file', 'w') as f:
        json.dump(datastore, f)
  else:
    with open('storage_file', 'w') as f:
      json.dump(storage, f)

else:
  parser = argparse.ArgumentParser()
  parser.add_argument("--key", action="store")
  args = parser.parse_args()

  key = args.key

  with open('storage_file', 'r') as f:
    datastore = json.load(f)
    print(datastore.get(key))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This can not work, reason see comments:</p>
<pre><code>if os.path.exists('storage_file'):
   with open('storage_file', 'r') as f:
     datastore = json.load(f)
     if key in datastore:
       datastore.setdefault(key, [])   # key already exists, you just checked it, so it  
       datastore[key].append(value)    # will not create [], tries append to existing data
     else:
       datastore.update({key: value})
     with open('storage_file', 'w') as f:
       json.dump(datastore, f) 
</code></pre>
<p>You can try to fix it with:</p>
<pre><code>if os.path.exists('storage_file'):
   with open('storage_file', 'r') as f:
     datastore = json.load(f)
     if key in datastore:
       val = datastore[key]
       if type(val) == str:               # check if it is a string / if you use other
         datastore[key] = [ val ]         # types you need to check if not them as well
       datastore[key].append(value) 
     else:
       datastore.setdefault(key, [ value ])    # create default [] of value

     with open('storage_file', 'w') as f:
        json.dump(datastore, f) 
</code></pre>
<p>(Disclaimer: Code not executed, may contain typos, tell me, I'll fix)</p>
<p>Reads: </p>
<ul>
<li><a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer">dict.setdefault</a></li>
<li><a href="https://docs.python.org/3.6/library/functions.html#type" rel="nofollow noreferrer">type()</a></li>
</ul>
<p>You check if a <em>key</em> that you parsed from the commandline was already stored into the json-file that load as <code>datastore</code>. If you have a file that contains a string for a certain key, loadign it will always recreate it as string. </p>
<p>Your code checks if a <em>key</em> is already in <code>datastore</code> - if so the <em>new</em> code reads the value into <code>val</code>. Then it checks if <code>val</code> is of type <code>str</code> - if so it replaces the value in <code>datastore</code> for <code>key</code> with a list containing <code>val</code>. Then it appends the new parameter that you parsed from the commandline. </p>
<p>In case the <em>key</em> is <strong>not</strong> in the dictionary, it creates the entry in <code>datastore</code> directly as list, using the just parsed value as defaultvalue inside the list.</p>
<p>Then all is stored back and replaces the current file. </p>
</div>
<span class="comment-copy">Can you show what you expect <code>datastore</code> to be after you've added values to existing keys?</span>
<span class="comment-copy">Great read: <a href="https://ericlippert.com/2014/03/05/how-to-debug-small-programs/" rel="nofollow noreferrer">How to debug small programs (#1)</a></span>
<span class="comment-copy">That's help, thank you very much, but i really do not understand how does it work =\</span>
<span class="comment-copy">@PavelMi  more clear now?</span>
<span class="comment-copy">Patrick, thank you that is very helpful. And i understand the picture its self, but i missing the magic that happens here:<code>val = datastore[key] #here i take existing value to val variable - ok        if type(val) == str:  #doing check - ok                      datastore[key] = [ val ]   # magic here!              datastore[key].append(value)</code> - #and now that is doing append without error! magic again!</span>
<span class="comment-copy">When you load the datastore the former value you saved as string is restored as string in datastore. I check if it is a string. if so I save it as list.  So the value is now no longer a string but a list containing a string. and lists have got the <code>.append()</code> method to put more things into the list. Thats why it works.. its the same as when you use <code>sillyExample = [ 1, 2, 3]</code> or <code>a=1</code> + <code>b=1</code> + <code>c=1</code> + <code>sillyAgain = [ a,b,c]</code> - you store the value of a variable inside a list. You changed the type of the value that is stored under that key from "string" to "list of strings". No magic involved.</span>
<span class="comment-copy">Good. Feel free to mark as answer. Howto: <a href="https://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work" title="how does accepting an answer work">meta.stackexchange.com/questions/5234/â€¦</a></span>
