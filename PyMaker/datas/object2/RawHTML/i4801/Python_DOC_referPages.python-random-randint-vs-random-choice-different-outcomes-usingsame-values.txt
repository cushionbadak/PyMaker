<div class="post-text" itemprop="text">
<p>I asked my students to write a python program in which the results of 100 rolls of a pair of 6-sided dice were stored in a list and then plotted in a histogram. </p>
<p>I was treating <code>random.choice(1,2,3,4,5,6)</code> as inferior to <code>random.randint(1,6)</code>, until I noticed that the histograms of the students who used <code>random.choice</code> better reflected expected outcomes. For example, the occurrence of rolls of 12 (6+6) was unnaturally high in nearly all histograms of students who used <code>random.randint(1,6)</code>. Does anyone have an idea of what's going on? </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer">From the documentation</a>:</p>
<blockquote>
<p>Almost all module functions depend on the basic function random(),
  which generates a random float uniformly in the semi-open range [0.0,
  1.0). Python uses the Mersenne Twister as the core generator. It produces 53-bit precision floats and has a period of 2**19937-1. The
  underlying implementation in C is both fast and threadsafe. The
  Mersenne Twister is one of the most extensively tested random number
  generators in existence. However, being completely deterministic, it
  is not suitable for all purposes, and is completely unsuitable for
  cryptographic purposes.</p>
</blockquote>
<p>So there shouldn't be any real difference in results.  However, I would disagree that <code>random.choice()</code> is inferior to <code>randint()</code>, in fact, random choice is actually faster at generating random numbers.  When you look at the source code:</p>
<pre><code>def randint(self, a, b):
    return self.randrange(a, b+1)

def randrange(self, start, stop=None, step=1, _int=int, _maxwidth=1L&lt;&lt;BPF):
    istart = _int(start)
    if istart != start:
        # not executed
    if stop is None:
        # not executed

    istop = _int(stop)
    if istop != stop:
        # not executed
    width = istop - istart
    if step == 1 and width &gt; 0:
        if width &gt;= _maxwidth:
            # not executed
        return _int(istart + _int(self.random()*width))
</code></pre>
<p>And for <code>choice()</code>:</p>
<pre><code>def choice(self, seq):
    return seq[int(self.random() * len(seq))]
</code></pre>
<p>You can see that <code>randint()</code> has the additional overhead of using <code>randrange()</code></p>
<p><strong>EDIT</strong> <em>As @abarnert has noted in the comments, there really is almost no performance difference here, and <code>randint(1,6)</code> is a clear and intuitive way of representing a dice roll</em></p>
<p>I ran both for 10000 rolls, and didn't see any skewing, so there is a chance your input samples were just too small:</p>
<p><a href="https://i.stack.imgur.com/T9TWz.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/T9TWz.png"/></a></p>
<p>And here is a distribution for rolling one dice twice, it is also very uniform:</p>
<p><a href="https://i.stack.imgur.com/ESJvc.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/ESJvc.png"/></a></p>
<p>I borrowed pieces of this from these two helpful answers: <a href="https://stackoverflow.com/questions/29574605/performance-of-choice-vs-randint">Performance of choice vs randint</a>
<a href="https://stackoverflow.com/questions/12164280/is-pythons-random-randint-statistically-random">Is Pythons random.randint statistically random?</a>, which are helpful for further reading.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are correct that the number of 12s you have been observing in your students' histograms is higher than the theoretical probability of rolling a 12, but not for the reason that you think.</p>
<p>An experiment:</p>
<pre><code>import random

def roll_dice(method):
    if method == "choice":
        return random.choice([1,2,3,4,5,6]) + random.choice([1,2,3,4,5,6])
    else:
        return random.randint(1,6) + random.randint(1,6)

def est_prob(n,k,method):
    rolls = [roll_dice(method) for _ in range(k)]
    return rolls.count(n)/k

def test12(n,k,method):
    return sum(1 if est_prob(12,n,method) &gt; 1/36 else 0 for _ in range(k))/k
</code></pre>
<p>Note that <code>test12(100,10000,"randint")</code> estimates the probability that a histogram of 100 dice rolls based on <code>randint</code> over-represents the sum of 12.</p>
<p>Typical run:</p>
<pre><code>&gt;&gt;&gt; test12(100,10000,"randint")
0.5288
</code></pre>
<p>This is greater than 50% by a statistically significant amount (10000 trials is a fairly large number of trials to estimate a probability). </p>
<p>So evidence of bias in <code>randint()</code>, no? Not so fast:</p>
<pre><code>&gt;&gt;&gt; test12(100,10000,"choice")
0.5342
</code></pre>
<p>With <code>random.choice()</code> you see the same thing. None of this is surprising since <em>most</em> dice roll histograms based on 100 rolls overestimate the probability of 12.</p>
<p>When you roll a pair of dice 100 times, the expected number of rolls which sum to 12 is 100/36 = 2.78. But -- you can only ever observe an integer number of 12s. The probability that the observed number of 12s is 3 or above (and hence leads to a histogram which over-represents 12) is P(X &gt;= 3) where X is a binomial random variable with parameters p = 1/36 and n = 100. This probability can be worked out to be </p>
<pre><code>P(X &gt;= 3) = 1 - P(X&lt;=2) 
          = 1 - P(0) - P(1) - P(2)
          = 1 - 0.0598 - 0.1708 - 0.2416
          = 0.5278
</code></pre>
<p>Thus around 53% of such histograms have "too many" 12s, something which you will see with both <code>random.choice()</code> and <code>random.randint()</code>.</p>
<p>It seems that you <em>noticed</em> this phenomenon more in the context of <code>randint</code>, interpreted it as bias (even though it isn't), and hypothesized that it was a deficiency in <code>randint</code>.  </p>
</div>
<div class="post-text" itemprop="text">
<p>The fastest way to generate random integers in Python is actually surprising to me:</p>
<pre><code>import random

die = int(random.random() * 6) + 1  # The equivalent to 'die = random.randint(1, 6)
</code></pre>
<p>Just looking at it, it looks more complicated to compute but the speed difference is quite stark.</p>
<p>I tested both methods in a MONTY algorithm, their was around a 200% speed increase using the int(random.random) method.</p>
<p>Also faster than random.choice by a descent margin.</p>
</div>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/29574605/performance-of-choice-vs-randint" title="performance of choice vs randint">stackoverflow.com/questions/29574605/…</a> give this a read</span>
<span class="comment-copy">What is going on is that you "noticed" chance fluctuations and ascribed to them more than is warranted.</span>
<span class="comment-copy">@JohnColeman: If that were true, the kind of skewing would be random, wouldn't it? But it's not, and this is over many, many trials over multiple years.</span>
<span class="comment-copy">The added overhead of using <code>randrange</code> is pretty small—a function call isn't free, but compared to the work being done, it's probably not enough to make a difference. At any rate, instead of guessing, if it really matters you should test. From a quick test on my laptop, <code>choice(range(1, 6))</code> takes 1070ns, <code>choice((1,2,3,4,5,6))</code> takes 786ns, <code>randint(1,6)</code> takes 1099ns, and <code>randrange(1, 7)</code> takes 1070ns. So, it looks like that extra overhead is small enough to be lost in the noise, but <code>choice</code> is a bit faster for other reasons—as long as you have a tuple to give it.</span>
<span class="comment-copy">Yea the difference in time doesn't seem to grow for larger inputs, stays fairly small.</span>
<span class="comment-copy">Still, the differences are never more than 30%, and an extra 30ns to roll each die is unlikely to matter in a real problem, so a more important question is which one is clearer for a given app. I think <code>randint(1, 6)</code> is the most obvious way to implement a 1d6 roll, even if it is slightly slower than <code>randrange(1, 7)</code> or <code>choice</code> on a constant tuple.</span>
