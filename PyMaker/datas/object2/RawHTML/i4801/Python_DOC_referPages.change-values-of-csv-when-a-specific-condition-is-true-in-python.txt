<div class="post-text" itemprop="text">
<p>I want want to multiply values by 10 which have prefix "0.0".</p>
<p>Below in the example of my csv file.</p>
<pre><code>1987-01-14, 0.63, 0.0657, 0.0652, 0.0677
1987-01-15, 0.0639, 0.0662, 0.0652, 0.0676
1987-01-16, 0.0642, 0.0662, 0.0653, 0.0678
1987-01-19, 0.0644, 0.0663, 0.0653, 0.0677
1987-01-20, 0.065, 0.0664, 0.0653, 0.0676
1987-01-21, 0.0652, 0.0666, 0.0658, 0.0679
1987-01-22, 0.0651, 0.0672, 0.0662, 0.0684
1987-01-23, 0.0652, 0.0672, 0.0661, 0.0687
1987-01-26, 0.0654, 0.0674, 0.0663, 0.0688
1987-01-27, 0.0661, 0.0681, 0.0656, 0.0681

import csv
import math,pandas
s = open('input1.csv')
checkIt = csv.reader(s)
for c in checkIt:
       #print(line)
    #values = c.split(',')
    for value in c:
        if "0.0" in value:
            int_v =10* float(value)
            print (int_v)
</code></pre>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import csv
with open('input1.csv') as csvfile:
    spamreader = csv.reader(csvfile)
    lines = list(spamreader)
    for row in lines:
        for i, value in enumerate(row):
            if value.startswith("0.0"):
                row[i] = "{0:.2f}".format(float(value)*10)
with open('eggs.csv', 'w') as csvfile:
    spamwriter = csv.writer(csvfile)
    for row in lines:
        spamwriter.writerow(row)

out:
1987-01-13,0,0.66,0.66,0.65,0.68,0.68
1987-01-14,0.63,0.66,0.66,0.65,0.68,0.68
1987-01-15,0.64,0.66,0.66,0.65,0.68,0.68
1987-01-16,0.64,0.66,0.66,0.65,0.68,0.68
1987-01-19,0.64,0.66,0.66,0.66,0.68,0.68
1987-01-20,0.65,0.67,0.67,0.66,0.69,0.69
1987-01-21,0.65,0.67,0.67,0.66,0.69,0.69
1987-01-22,0.65,0.67,0.67,0.66,0.68,0.68
1987-01-23,0.65,0.67,0.67,0.66,0.68,0.68
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use:</p>
<pre><code>df = df.applymap(lambda x: x*10 if "0.0" in str(x) else x)
</code></pre>
<p>Input:</p>
<pre><code>a           b       c       d       e       f       g
1987-01-13  0       0.0657  0.0657  0.0652  0.0678  0.0678
1987-01-14  0.63    0.0662  0.0662  0.0653  0.0677  0.0677
1987-01-15  0.0639  0.0662  0.0662  0.0653  0.0676  0.0676
1987-01-16  0.0642  0.0663  0.0663  0.0653  0.0679  0.0679
1987-01-19  0.0644  0.0664  0.0664  0.0658  0.0684  0.0684
1987-01-20  0.065   0.0666  0.0666  0.0662  0.0687  0.0687
1987-01-21  0.0652  0.0672  0.0672  0.0661  0.0688  0.0688
1987-01-22  0.0651  0.0672  0.0672  0.0663  0.0681  0.0681
1987-01-23  0.0652  0.0674  0.0674  0.0656  0.0681  0.0681
</code></pre>
<p>Output:</p>
<pre><code>            a      b      c      d      e      f      g
0  1987-01-13  0.000  0.657  0.657  0.652  0.678  0.678
1  1987-01-14  0.630  0.662  0.662  0.653  0.677  0.677
2  1987-01-15  0.639  0.662  0.662  0.653  0.676  0.676
3  1987-01-16  0.642  0.663  0.663  0.653  0.679  0.679
4  1987-01-19  0.644  0.664  0.664  0.658  0.684  0.684
5  1987-01-20  0.650  0.666  0.666  0.662  0.687  0.687
6  1987-01-21  0.652  0.672  0.672  0.661  0.688  0.688
7  1987-01-22  0.651  0.672  0.672  0.663  0.681  0.681
8  1987-01-23  0.652  0.674  0.674  0.656  0.681  0.681
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One possible solution without converting to <code>float</code>s - check if <code>0.0</code> and remove first <code>0</code> after <code>0.</code>. Very important is set <code>dtype=str</code> parameter in read_csv for convert all columns to <code>str</code></p>
<pre><code>import pandas as pd
import numpy as np

temp=u"""1987-01-13 0 0.0657 0.0657 0.0652 0.0678 0.0678
1987-01-14 0.63 0.0662 0.0662 0.0653 0.0677 0.0677
1987-01-15 0.0639 0.0662 0.0662 0.0653 0.0676 0.0676
1987-01-16 0.0642 0.0663 0.0663 0.0653 0.0679 0.0679
1987-01-19 0.0644 0.0664 0.0664 0.0658 0.0684 0.0684
1987-01-20 0.065 0.0666 0.0666 0.0662 0.0687 0.0687
1987-01-21 0.0652 0.0672 0.0672 0.0661 0.0688 0.0688
1987-01-22 0.0651 0.0672 0.0672 0.0663 0.0681 0.0681
1987-01-23 0.0652 0.0674 0.0674 0.0656 0.0681 0.0681"""
#after testing replace 'pd.compat.StringIO(temp)' to 'filename.csv'
df = pd.read_csv(pd.compat.StringIO(temp), sep="\s+", header=None, dtype=str, index_col=[0])

print (df)
                 1       2       3       4       5       6
0                                                         
1987-01-13       0  0.0657  0.0657  0.0652  0.0678  0.0678
1987-01-14    0.63  0.0662  0.0662  0.0653  0.0677  0.0677
1987-01-15  0.0639  0.0662  0.0662  0.0653  0.0676  0.0676
1987-01-16  0.0642  0.0663  0.0663  0.0653  0.0679  0.0679
1987-01-19  0.0644  0.0664  0.0664  0.0658  0.0684  0.0684
1987-01-20   0.065  0.0666  0.0666  0.0662  0.0687  0.0687
1987-01-21  0.0652  0.0672  0.0672  0.0661  0.0688  0.0688
1987-01-22  0.0651  0.0672  0.0672  0.0663  0.0681  0.0681
1987-01-23  0.0652  0.0674  0.0674  0.0656  0.0681  0.0681
</code></pre>
<hr/>
<pre><code>df = df.applymap(lambda x:  x.replace('0.0', '0.') if  '0.0' in x else x)
print (df)
                1      2      3      4      5      6
0                                                   
1987-01-13      0  0.657  0.657  0.652  0.678  0.678
1987-01-14   0.63  0.662  0.662  0.653  0.677  0.677
1987-01-15  0.639  0.662  0.662  0.653  0.676  0.676
1987-01-16  0.642  0.663  0.663  0.653  0.679  0.679
1987-01-19  0.644  0.664  0.664  0.658  0.684  0.684
1987-01-20   0.65  0.666  0.666  0.662  0.687  0.687
1987-01-21  0.652  0.672  0.672  0.661  0.688  0.688
1987-01-22  0.651  0.672  0.672  0.663  0.681  0.681
1987-01-23  0.652  0.674  0.674  0.656  0.681  0.681

df.to_csv(file, header=False)
</code></pre>
<hr/>
<p>Solution with <code>float</code>s - multiple by <code>10</code> if some value is less as <code>0.1</code>:</p>
<pre><code>import pandas as pd
import numpy as np

temp=u"""1987-01-13 0 0.0657 0.0657 0.0652 0.0678 0.0678
1987-01-14 0.63 0.0662 0.0662 0.0653 0.0677 0.0677
1987-01-15 0.0639 0.0662 0.0662 0.0653 0.0676 0.0676
1987-01-16 0.0642 0.0663 0.0663 0.0653 0.0679 0.0679
1987-01-19 0.0644 0.0664 0.0664 0.0658 0.0684 0.0684
1987-01-20 0.065 0.0666 0.0666 0.0662 0.0687 0.0687
1987-01-21 0.0652 0.0672 0.0672 0.0661 0.0688 0.0688
1987-01-22 0.0651 0.0672 0.0672 0.0663 0.0681 0.0681
1987-01-23 0.0652 0.0674 0.0674 0.0656 0.0681 0.0681"""
#after testing replace 'pd.compat.StringIO(temp)' to 'filename.csv'
df = pd.read_csv(pd.compat.StringIO(temp), sep="\s+", header=None, index_col=[0])
</code></pre>
<hr/>
<pre><code>print (df)
                 1       2       3       4       5       6
0                                                         
1987-01-13  0.0000  0.0657  0.0657  0.0652  0.0678  0.0678
1987-01-14  0.6300  0.0662  0.0662  0.0653  0.0677  0.0677
1987-01-15  0.0639  0.0662  0.0662  0.0653  0.0676  0.0676
1987-01-16  0.0642  0.0663  0.0663  0.0653  0.0679  0.0679
1987-01-19  0.0644  0.0664  0.0664  0.0658  0.0684  0.0684
1987-01-20  0.0650  0.0666  0.0666  0.0662  0.0687  0.0687
1987-01-21  0.0652  0.0672  0.0672  0.0661  0.0688  0.0688
1987-01-22  0.0651  0.0672  0.0672  0.0663  0.0681  0.0681
1987-01-23  0.0652  0.0674  0.0674  0.0656  0.0681  0.0681


df = df.mask(df &lt; 0.1, df * 10)
print (df)
                1      2      3      4      5      6
0                                                   
1987-01-13  0.000  0.657  0.657  0.652  0.678  0.678
1987-01-14  0.630  0.662  0.662  0.653  0.677  0.677
1987-01-15  0.639  0.662  0.662  0.653  0.676  0.676
1987-01-16  0.642  0.663  0.663  0.653  0.679  0.679
1987-01-19  0.644  0.664  0.664  0.658  0.684  0.684
1987-01-20  0.650  0.666  0.666  0.662  0.687  0.687
1987-01-21  0.652  0.672  0.672  0.661  0.688  0.688
1987-01-22  0.651  0.672  0.672  0.663  0.681  0.681
1987-01-23  0.652  0.674  0.674  0.656  0.681  0.681

df.to_csv(file, header=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import pandas as pd
df = pd.read_csv('input1.csv', sep=',', header=None)
df.applymap(lambda x: x*10 if "0.0" in str(x) else x).to_csv('out1.csv')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best is to use pandas and then do manipulation within that. </p>
<p>Your data doesnt seem to have separators .. or maybe they are just spaces</p>
<pre><code>import pandas as pd
df=pd.read_csv('YourFile.csv',sep=' ',header=None)
</code></pre>
<p>alternatively, if you have saved the csv or data in xls format</p>
<pre><code>df=pd.read_excel('YourFile.xlsx',header=None)
df.set_index(0,inplace=True)
</code></pre>
<p>The last command is needed because the first column is a time stamp index and mathematical manipulations will not work like on the float/number types on the rest of the data, so best to make it an index</p>
<pre><code>def mm(x):
  if (x &lt; 0.1):
    y=x*10
else: 
  y=x
return y

df.applymap(mm).to_csv('name of file to save')
</code></pre>
</div>
<span class="comment-copy">Please try it first yourself. starts with <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">docs.python.org/3/library/csv.html</a></span>
<span class="comment-copy">i have added my code please check it, i want to write this data in new csv in same order.</span>
<span class="comment-copy">you csv is not consitant. it has two space some and 4 somewhere. If you have edited here, please don't. paste content as it is.</span>
<span class="comment-copy">If my or some another answer was helpful, don't forget <a href="https://stackoverflow.com/help/someone-answers">accept</a> it - click on the check mark (<code>v</code>) beside the answer to toggle it from greyed out to filled in. Thanks.</span>
