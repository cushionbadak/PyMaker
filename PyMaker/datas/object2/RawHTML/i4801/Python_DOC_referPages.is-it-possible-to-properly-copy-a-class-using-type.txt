<div class="post-text" itemprop="text">
<p>According to <a href="https://stackoverflow.com/a/13379957/2988730">this answer</a>, a class object <code>cls</code> can be replicated with</p>
<pre><code>cls_copy = type('cls_copy', cls.__bases__, dict(cls.__dict__))
</code></pre>
<p>This works perfectly for most normal cases. It does <em>not</em> work when the metaclass of <code>cls</code> is not <code>type</code>. My initial naive fix was to do</p>
<pre><code>cls_copy = type(cls)('cls_copy', cls.__bases__, dict(cls.__dict__))
</code></pre>
<p>However, this is simply pointless. There is no way to know what a metaclass does, as <a href="https://stackoverflow.com/a/49140775/2988730">this answer</a> to a related question points out, how it transforms the input dictionary, what additional keywords it requires, etc.</p>
<p>The original use of <code>type</code> is almost good enough with a couple of minor exceptions:</p>
<ol>
<li>The <code>__dict__</code> created by metaclasses that do not end up calling <code>type.__new__</code> may be of a different type than the usual proxy object.</li>
<li>Classes extending the copy will not have the correct metaclass, which may cause unexpected behavior.</li>
<li>Any properties or other data descriptors defined in the original metaclass will no longer be available on the class object.</li>
</ol>
<p>I am willing to ignore item #1. It is a corner case that I am willing to document away should I find a viable solution to the other items. Items #2 and #3 can be solved if it were possible to change the metaclass of the copy. I tried (again, naively)</p>
<pre><code>cls_copy = type('cls_copy', cls.__bases__, dict(cls.__dict__),
                metaclass=type(cls))
</code></pre>
<p>This just raised a <code>TypeError</code>, as could be expected:</p>
<pre><code>TypeError: __init_subclass__() takes no keyword arguments
</code></pre>
<p>This makes sense in light of the <a href="https://docs.python.org/3/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>Like its identity, an object’s type is also unchangeable. <a href="https://stackoverflow.com/a/13379957/2988730">1</a></p>
</blockquote>
<p>However, the <a href="https://docs.python.org/3/reference/datamodel.html#id8" rel="nofollow noreferrer">footnote</a> states that</p>
<blockquote>
<p>It <em>is</em> possible in some cases to change an object’s type, under certain controlled conditions. It generally isn’t a good idea though, since it can lead to some very strange behaviour if it is handled incorrectly.</p>
</blockquote>
<p>What are the conditions under which it is possible to change an object's type, specifically that of a class? Is this one of those cases, and if so, how?</p>
<p><strong>Note</strong></p>
<p>I am aware that <code>copy.deepcopy</code> and inheritance are viable alternatives here. For the purpose of this question, I wish to ignore those alternatives and stick with using <code>type</code>-related techniques.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>type.__new__(type(cls), cls.__name__, cls.__bases__, dict(cls.__dict__))</code>. This uses the normal <code>type</code> creation process, but creates an instance of <code>type(cls)</code> instead of <code>type</code>.</p>
<p>As for the <code>__metaclass__</code> issue, I think that is because <code>__metaclass__</code> is usually what is called, so <code>type</code> can't use it.</p>
</div>
<span class="comment-copy"><code>type.__new__(type(cls), cls.__bases__, ...)</code> might work. Am I missing any corner cases with that?</span>
<span class="comment-copy">@internet_user. None that I am not OK with :) thanks very much for that. Would you be willing to write that up for formal points?</span>
<span class="comment-copy">@internet_user. I half-expected the answer to be just "no", so it's awesome that I missed something so simple.</span>
<span class="comment-copy">Oops, yeah I forgot the name argument.</span>
<span class="comment-copy">Added name in :)</span>
<span class="comment-copy">Docs say "Any <i>other</i> keyword arguments that are specified in the class definition are passed through to all metaclass operations described below." [Emphasis mine]. This implies that the metaclass keyword just doesn't figure outside the interpreter.</span>
<span class="comment-copy">Part of the problem is that I wrote <code>__metaclass__</code> instead of <code>metaclass</code>, but the error is the same either way.</span>
<span class="comment-copy">I hope you don't mind that I explicitly added in <code>dict(cls.__dict__)</code>. Without the <code>dict</code>, it will raise an error <code>TypeError: type.__new__() argument 3 must be dict, not mappingproxy</code>, so I though it would be worth mentioning.</span>
<span class="comment-copy">Yeah, that's fine.</span>
