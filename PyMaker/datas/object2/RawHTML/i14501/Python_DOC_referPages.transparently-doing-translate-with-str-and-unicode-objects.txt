<div class="post-text" itemprop="text">
<p>This is the implementation I am using to abstract away the differences for <code>.translate</code> between unicode and str:</p>
<pre><code>import types
from string import maketrans

def str_translate(txt, inchars, outchars, deletechars):
    if inchars : transtab = maketrans(inchars, outchars)
    else       : transtab = None
    return txt.translate(transtab, deletechars)


def maketrans_u(inchars, outchars, deletechars):
    '''Create a translation table for unicode. We assume that we
    want to map one inchar to one outchar (but the actual unicode.translate function
    is more powerful: it can also map one inchar to a unicode string)
    We assume deletechars and inchars do not overlap (no checking done!)'''
    if inchars : transtab = dict((ord(inchar), ord(outchar)) for inchar, outchar in zip(inchars, outchars))
    else       : transtab = { }
    # Now map the deletechars to None
    for char in deletechars:
        transtab[ord(char)] = None
    return transtab


def unicode_translate(txt, inchars, outchars, deletechars):
    transtab = maketrans_u(inchars, outchars, deletechars)
    return txt.translate(transtab)


def translate(txt, inchars=None, outchars=None, deletechars=None):
    t = type(txt)
    if   t == types.StringType  : return str_translate(txt, inchars, outchars, deletechars)
    elif t == types.UnicodeType : return unicode_translate(txt, inchars, outchars, deletechars)
    else                        : raise Exception('Not supported type %s' % (t))


if __name__ == '__main__' :
    a = 'abc%=def'
    deletechars = '=%'
    print translate(a, deletechars=deletechars)
</code></pre>
<p>Here I am losing some of the power of the <code>unicode.translate</code> (namely, translating one character to a string), but at least I have a uniform interface that I can use to translate unicode and plain strings, without having to care about the type.</p>
<p>What I do not like is:</p>
<ul>
<li>this implementation relies in checking the type of the string in order to call the right function</li>
<li>I can not do <code>txt.translate(...)</code> (I must do <code>translate(txt, ...)</code>, which means I can not chain function calls like <code>txt[:50].translate(...)</code></li>
</ul>
<p>Is there a better way to implement a transparent <code>.translate</code>?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>this implementation relies in checking the type of the string in order to call the right function</p>
</blockquote>
<p>Well, what else <em>could</em> it do? You want to do different things for different types, and you can't monkeypatch the types to do it in dot-syntax OO style, so how can you automatically dispatch on types? What you're looking for is <em>external dispatch</em>. Python can do this in 3.4+ (only dispatching on the first argument, not all arguments like CLOS or Dylan… although there are multiple-dispatch libraries on PyPI) with <a href="https://docs.python.org/3/library/functools.html#functools.singledispatch" rel="nofollow"><code>singledispatch</code></a>, and there's <a href="https://pypi.python.org/pypi/singledispatch" rel="nofollow">a backport</a> on PyPI that works back to 2.6. So, you can do this:</p>
<pre><code>from singledispatch import singledispatch

@singledispatch
def translate(txt, inchars=None, outchars=None, deletechars=None):
    raise Exception('Not supported type %s' % (t))

@translate.register(str)
def translate(txt, inchars=None, outchars=None, deletechars=None):
    return str_translate(txt, inchars, outchars, deletechars)

@translate.register(unicode)
def translate(txt, inchars=None, outchars=None, deletechars=None):
    return unicode_translate(txt, inchars, outchars, deletechars)
</code></pre>
<p>Notice also that I just used <code>str</code> and <code>unicode</code> instead of <a href="https://docs.python.org/2/library/types.html#types.StringType" rel="nofollow"><code>types.StringType</code></a> and <code>types.UnicodeType</code>. As the docs say, those types are just aliases, and they aren't really necessary. All they do is make your code less backward-compatible. (And they don't help for forward compatibility with 3.x; 3.0 just removed the unnecessary aliases instead of making <code>StringType</code> and <code>UnicodeType</code> both aliases for <code>str</code> and adding a <code>BytesType</code>…)</p>
<p>If you don't want to use a library off PyPI or implement the same thing yourself, and instead want manual type-switching, you probably want <code>isinstance</code> rather than <code>type(x) ==</code>.</p>
<hr/>
<blockquote>
<p>I can not do txt.translate(...) (I must do translate(txt, ...)</p>
</blockquote>
<p>That's true; you can't monkeypatch <code>str</code> and <code>unicode</code>. But so what?</p>
<blockquote>
<p>which means I can not chain function calls like txt[:50].translate(...)</p>
</blockquote>
<p>Sure, but you can chain function calls like <code>translate(txt[:50], …).rstrip().split(':')</code>. While that might look anti-idiomatic in a "everything-is-a-method" language like Java or Ruby, it's perfectly fine in Python. Especially since it's pretty rare to chain more than 2 or 3 calls in Python anyway. After all, the next thing after that <code>split</code> is going to have to be a <code>map</code> call or a comprehension, and those aren't done by methods in Python.</p>
<hr/>
<blockquote>
<p>Here I am losing some of the power of the <code>unicode.translate</code> (namely, translating one character to a string)</p>
</blockquote>
<p>Yes, that's pretty much inherent in the lowest-common-denominator design. And so is some performance loss. <code>str.translate</code> and <code>unicode.translate</code> aren't really doing exactly the same thing. The former is a table-based translation, because that's a great optimization when you only have 256 possible values, but it does mean you give up some flexibility and power. The latter is a dict-based translation, because a table would be a pessimization for 1.1 million values, but that means you get some extra flexibility and power.</p>
<p>So, here, you're giving up the performance of <code>str.translate</code> (especially since you have to build the <code>transtab</code> on the fly for each translation), and the flexibility of <code>unicode.translate</code>, to get the worst of both worlds.</p>
<p>If you actually know the encodings of your <code>str</code> strings (and they actually do represent text—after all, <code>str.translate</code> can also be useful for binary data…), you could instead write this by just <code>s.decode(encoding).translate(…).encode(encoding)</code>. But then if you know the encodings, you might as well just have <code>unicode</code> instead of <code>str</code> in the first place.</p>
<hr/>
<p>But I think a better solution might to be wrap up <code>maketrans</code> in a way that returns a tuple of two tables for <code>str</code>, and a tuple of one dict for <code>unicode</code>. Then you can just call the native <code>s.translate(*transtab)</code> for either, instead of wrapping <code>translate</code>.</p>
<p>Unfortunately, you can't use <code>singledispatch</code> for this, because any of the arguments may be <code>None</code>, which means we're back to explicit type-switching.</p>
<pre><code>def maketrans(inchars, outchars, deletechars):
    if isinstance(inchars, str) or isinstance(deletechars, str):
        return maketrans_s(inchars, outchars, deletechars)
    elif isinstance(inchars, unicode) or isinstance(deletechars, unicode):
        return maketrans_u(inchars, outchars, deletechars)
    raise Exception('Not supported type %s' % (t))

def maketrans_s(inchars, outchars, deletechars):
    if inchars: transtab = maketrans(inchars, outchars)
    else: transtab = None
    return transtab, deletechars

def maketrans_u(inchars, outchars, deletechars):
    # The if was unnecessary here; if inchars is empty, the zip
    # will be too, so you'll get {} as the result. Also notice
    # no ord(outchar); this means you _can_ use Unicode strings
    # when you know the string is Unicode.
    transtab = dict((ord(inchar), outchar) for inchar, outchar in zip(inchars, outchars))
    for char in deletechars:
        transtab[ord(char)] = None
    return transtab,
</code></pre>
<p>Now you can do this:</p>
<pre><code>transtab = maketrans(inchars, outchars, deletechars)
return s.translate(*transtab).rstrip().split(':')
</code></pre>
<hr/>
<p>But really, I'm not sure where this would be useful in the first place. How can you even call <code>maketrans</code> or <code>translate</code> without knowing whether your <code>inchars</code> and <code>deletechars</code> are <code>str</code> or <code>unicode</code>?</p>
</div>
<span class="comment-copy">I think this might go better on <a href="https://codereview.stackexchange.com/">code review stackexchange</a>...</span>
<span class="comment-copy">Wow, thanks for your great ideas. I'll let it through my head for a bit.</span>
<span class="comment-copy">Re "How can you even call maketrans or translate without knowing whether your inchars and deletechars are str or unicode": in my (limited) usecase, inchars. outchars and deletechars are all str, but txt can be either str or unicode.</span>
<span class="comment-copy">@jeckyll2hide: Are they guaranteed to be all ASCII? Because if you try to translate, say, <code>'é'</code>, what happens will depend on whether that's a Latin-1 <code>é</code> or a UTF-8 <code>é</code>. (In fact, even with pure ASCII you can have that problem, because not every encoding is 100% ASCII-compatible—e.g., JIS encodes the yen symbol to the ASCII backslash… But usually you can ignore that and just pretend that every encoding is ASCII-compatible; you can't ignore the fact that every encoding is not whatever-your-default-charset-is-compatible.)</span>
