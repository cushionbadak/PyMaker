<div class="post-text" itemprop="text">
<p>I would like to know how to put a time delay in a Python script.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import time
time.sleep(5)   # Delays for 5 seconds. You can also use a float value.
</code></pre>
<p>Here is another example where something is run approximately once a minute:</p>
<pre><code>import time
while True:
    print("This prints once a minute.")
    time.sleep(60) # Delay for 1 minute (60 seconds).
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>sleep()</code> function in the <a href="https://docs.python.org/2/library/time.html" rel="noreferrer">time module</a>. It can take a float argument for sub-second resolution.</p>
<pre><code>from time import sleep
sleep(0.1) # Time in seconds.
</code></pre>
<p>Read more <a href="https://docs.python.org/2/library/time.html#time.sleep" rel="noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Please read <a href="https://web.archive.org/web/20090207081238/http://faqts.com/knowledge_base/view.phtml/aid/2609/fid/378" rel="noreferrer">this</a>, which can help you further:</p>
<blockquote>
<p>Try the sleep function in the time module.</p>
<pre><code>import time
time.sleep(60)
</code></pre>
<p>And put this in a <code>while</code> loop and a statement will only execute on the
  minute...  That allows you to run a statement at predefined intervals
  regardless of how long the command takes (as long as it takes less than 
  a minute or 5 or 60 or whatever you set it to)  For example, I wanted to 
  run a ping once a minute.  If I just <code>time.sleep(60)</code> or <code>time.sleep(45)</code> 
  even, the ping will not always take the same amount of time.  Here's the 
  code :)</p>
<pre><code>time.sleep(time.localtime(time.time())[5])
</code></pre>
<p>The <code>[5]</code> just pulls the seconds out of the <code>time.localtime()</code>'s return 
  value.</p>
<p>The great thing about <code>time.sleep</code> is that it supports floating point numbers!</p>
<pre><code>import time
time.sleep(0.1) 
</code></pre>
<p><a href="http://python.org/doc/current/lib/module-time.html" rel="noreferrer">More information</a></p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h1>How can I make a time delay in Python?</h1>
</blockquote>
<p>In a single thread I suggest the <a href="https://docs.python.org/3/library/time.html#time.sleep" rel="noreferrer">sleep function</a>:</p>
<pre><code>&gt;&gt;&gt; from time import sleep

&gt;&gt;&gt; sleep(4)
</code></pre>
<p>This function actually suspends the processing of the thread in which it is called by the operating system, allowing other threads and processes to execute while it sleeps.</p>
<p>Use it for that purpose, or simply to delay a function from executing. For example:</p>
<pre><code>&gt;&gt;&gt; def party_time():
...     print('hooray!')
... 
&gt;&gt;&gt; sleep(3); party_time()
hooray!
</code></pre>
<p>"hooray!" is printed 3 seconds after I hit <kbd>Enter</kbd>.</p>
<h3>Example using <code>sleep</code> with multiple threads and processes</h3>
<p>Again, <code>sleep</code> suspends your thread - it uses next to zero processing power.</p>
<p>To demonstrate, create a script like this (I first attempted this in an interactive Python 3.5 shell, but sub-processes can't find the <code>party_later</code> function for some reason):</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed
from time import sleep, time

def party_later(kind='', n=''):
    sleep(3)
    return kind + n + ' party time!: ' + __name__

def main():
    with ProcessPoolExecutor() as proc_executor:
        with ThreadPoolExecutor() as thread_executor:
            start_time = time()
            proc_future1 = proc_executor.submit(party_later, kind='proc', n='1')
            proc_future2 = proc_executor.submit(party_later, kind='proc', n='2')
            thread_future1 = thread_executor.submit(party_later, kind='thread', n='1')
            thread_future2 = thread_executor.submit(party_later, kind='thread', n='2')
            for f in as_completed([
              proc_future1, proc_future2, thread_future1, thread_future2,]):
                print(f.result())
            end_time = time()
    print('total time to execute four 3-sec functions:', end_time - start_time)

if __name__ == '__main__':
    main()
</code></pre>
<p>Example output from this script:</p>
<pre><code>thread1 party time!: __main__
thread2 party time!: __main__
proc1 party time!: __mp_main__
proc2 party time!: __mp_main__
total time to execute four 3-sec functions: 3.4519670009613037
</code></pre>
<h2>Multithreading</h2>
<p>You can trigger a function to be called at a later time in a separate thread with the <code>Timer</code> <a href="https://docs.python.org/3/library/threading.html" rel="noreferrer">threading</a> object:</p>
<pre><code>&gt;&gt;&gt; from threading import Timer
&gt;&gt;&gt; t = Timer(3, party_time, args=None, kwargs=None)
&gt;&gt;&gt; t.start()
&gt;&gt;&gt;
&gt;&gt;&gt; hooray!

&gt;&gt;&gt; 
</code></pre>
<p>The blank line illustrates that the function printed to my standard out and I had to hit <kbd>Enter</kbd> to ensure I was on a prompt.</p>
<p>The upside of this method is that while the <code>Timer</code> thread was waiting, I was able to do other things, in this case, hitting <kbd>Enter</kbd> one time - before the function executed (see the first empty prompt).</p>
<p>There isn't a respective object in the <a href="https://docs.python.org/3/library/multiprocessing.html" rel="noreferrer">multiprocessing library</a>. You can create one, but it probably doesn't exist for a reason. A sub-thread makes a lot more sense for a simple timer than a whole new sub-process.</p>
</div>
<div class="post-text" itemprop="text">
<p>A bit of fun with a sleepy <a href="https://wiki.python.org/moin/Generators" rel="noreferrer">generator</a>.</p>
<p>The question is about time delay. It can be fixed time, but in some cases we might need a delay measured since last time. Here is one possible solution:</p>
<h1>Delay measured since last time (waking up regularly)</h1>
<p>The situation can be, we want to do something as regularly as possible and we do not want to bother with all the <code>last_time</code>, <code>next_time</code> stuff all around our code.</p>
<h2>Buzzer generator</h2>
<p>The following code (<strong>sleepy.py</strong>) defines a <code>buzzergen</code> generator:</p>
<pre><code>import time
from itertools import count

def buzzergen(period):
    nexttime = time.time() + period
    for i in count():
        now = time.time()
        tosleep = nexttime - now
        if tosleep &gt; 0:
            time.sleep(tosleep)
            nexttime += period
        else:
            nexttime = now + period
        yield i, nexttime
</code></pre>
<h2>Invoking regular buzzergen</h2>
<pre><code>from sleepy import buzzergen
import time
buzzer = buzzergen(3) # Planning to wake up each 3 seconds
print time.time()
buzzer.next()
print time.time()
time.sleep(2)
buzzer.next()
print time.time()
time.sleep(5) # Sleeping a bit longer than usually
buzzer.next()
print time.time()
buzzer.next()
print time.time()
</code></pre>
<p>And running it we see:</p>
<pre><code>1400102636.46
1400102639.46
1400102642.46
1400102647.47
1400102650.47
</code></pre>
<p>We can also use it directly in a loop:</p>
<pre><code>import random
for ring in buzzergen(3):
    print "now", time.time()
    print "ring", ring
    time.sleep(random.choice([0, 2, 4, 6]))
</code></pre>
<p>And running it we might see:</p>
<pre><code>now 1400102751.46
ring (0, 1400102754.461676)
now 1400102754.46
ring (1, 1400102757.461676)
now 1400102757.46
ring (2, 1400102760.461676)
now 1400102760.46
ring (3, 1400102763.461676)
now 1400102766.47
ring (4, 1400102769.47115)
now 1400102769.47
ring (5, 1400102772.47115)
now 1400102772.47
ring (6, 1400102775.47115)
now 1400102775.47
ring (7, 1400102778.47115)
</code></pre>
<p>As we see, this buzzer is not too rigid and allow us to catch up with regular sleepy intervals even if we oversleep and get out of regular schedule.</p>
</div>
<div class="post-text" itemprop="text">
<p>The tkinter library in the Python standard library is an interactive tool which you can import. Basically, you can create buttons and boxes and popups and stuff that appear as windows which you manipulate with code.</p>
<p>If you use tkinter, DO NOT USE <code>TIME.SLEEP()</code> because it will muck up your program. This happened to me. Instead, use <code>root.after()</code> and replace the values for however many seconds, with a milliseconds. E.g, <code>time.sleep(1)</code> is equivalent to <code>root.after(1000)</code> in tkinter.</p>
<p>Otherwise, <code>time.sleep()</code>, which many answers have pointed out, which is the way to go.</p>
</div>
<div class="post-text" itemprop="text">
<p>Delays are done with the <a href="https://docs.python.org/2/library/time.html" rel="nofollow noreferrer">time library</a>, specifically the <a href="https://docs.python.org/2/library/time.html#time.sleep" rel="nofollow noreferrer"><code>time.sleep()</code></a> function.</p>
<p>To just make it wait for a second:</p>
<pre><code>from time import sleep
sleep(1)
</code></pre>
<p>This works because by doing:</p>
<pre><code>from time import sleep
</code></pre>
<p>You extract the <a href="https://docs.python.org/2/library/time.html#time.sleep" rel="nofollow noreferrer">sleep function</a> <strong>only</strong> from the <a href="https://docs.python.org/2/library/time.html" rel="nofollow noreferrer">time library</a>, which means you can just call it with:</p>
<pre><code>sleep(seconds)
</code></pre>
<p>Rather than having to type out</p>
<pre><code>time.sleep()
</code></pre>
<p>Which is awkwardly long to type.</p>
<p>With this method, you wouldn't get access to the other features of the <a href="https://docs.python.org/2/library/time.html" rel="nofollow noreferrer">time library</a> and you can't have a variable called <code>sleep</code>. But you could create a variable called <code>time</code>.</p>
<p>Doing <a href="https://docs.python.org/2/tutorial/modules.html#more-on-modules" rel="nofollow noreferrer"><code>from [library] import [function] (, [function2])</code></a> is great if you just want certain parts of a module.</p>
<p>You could equally do it as:</p>
<pre><code>import time
time.sleep(1)
</code></pre>
<p>and you would have access to the other features of the <a href="https://docs.python.org/2/library/time.html" rel="nofollow noreferrer">time library</a> like <a href="https://docs.python.org/2/library/time.html#time.clock" rel="nofollow noreferrer"><code>time.clock()</code></a> as long as you type <code>time.[function]()</code>, but you couldn't create the variable time because it would overwrite the import. A solution to this to do</p>
<pre><code>import time as t
</code></pre>
<p>which would allow you to reference the <a href="https://docs.python.org/2/library/time.html" rel="nofollow noreferrer">time library</a> as <code>t</code>, allowing you to do:</p>
<pre><code>t.sleep()
</code></pre>
<p>This works on any library.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are 5 methods which I know: <code>time.sleep()</code>, <code>pygame.time.wait()</code>, matplotlib's <code>pyplot.pause()</code>, <code>.after()</code>, and <code>driver.implicitly_wait()</code>.</p>
<hr/>
<p><code>time.sleep()</code> example (do not use if using Tkinter):</p>
<pre><code>import time
print('Hello')
time.sleep(5) #number of seconds
print('Bye')
</code></pre>
<hr/>
<p><code>pygame.time.wait()</code> example (not recommended if you are not using the pygame window, but you could exit the window instantly):</p>
<pre><code>import pygame
#If you are going to use the time module
#don't do "from pygame import *"
pygame.init()
print('Hello')
pygame.time.wait(5000)#milliseconds
print('Bye')
</code></pre>
<hr/>
<p>matplotlib's function <code>pyplot.pause()</code> example (not recommended if you are not using the graph, but you could exit the graph instantly):</p>
<pre><code>import matplotlib
print('Hello')
matplotlib.pyplot.pause(5)#seconds 
print('Bye')
</code></pre>
<hr/>
<p>The <code>.after()</code> method (best with Tkinter):</p>
<pre><code>import tkinter as tk #Tkinter for python 2
root = tk.Tk()
print('Hello')
def ohhi():
 print('Oh, hi!')
root.after(5000, ohhi)#milliseconds and then a function
print('Bye')
</code></pre>
<hr/>
<p>Finally, the <code>driver.implicitly_wait()</code> method (selenium):</p>
<pre><code>driver.implicitly_wait(5)#waits 5 seconds
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best way to delay time in Python is to use the <code>time</code> library. 
Like this:</p>
<pre><code>import time
time.sleep(10)
</code></pre>
<p>Just replace 10 with the amount of seconds you want to delay. You can use formats like '10.1', '5.07', etc.</p>
<p>It is not recommended to use this with Tkinter</p>
</div>
<div class="post-text" itemprop="text">
<p>Delays can be implemented by using three methods.</p>
<p>Let's start with the easiest one:</p>
<pre><code>import time
time.sleep(5) # Delay for 5 seconds.
</code></pre>
<p>The second method to delay would be using the implicit wait method:</p>
<pre><code> driver.implicitly_wait(5)
</code></pre>
<p>The third method is more useful when you have to wait until a particular action is completed or until an element is found:</p>
<pre><code>self.wait.until(EC.presence_of_element_located((By.ID, 'UserName'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import time
time.sleep(1) #sleep for one second.
</code></pre>
<p>Simple example:</p>
<pre><code>#After five seconds,output "hello python!!!"
import time
time.sleep(5)
print("hello python!!!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>asyncio.sleep</h2>
<p>Notice in recent python versions (python 3.4 or higher) you can use <strong>asyncio.sleep</strong>. It's related to asynchronous programming and asyncio. Check out next example:</p>
<pre><code>import asyncio
from datetime import datetime

@asyncio.coroutine
def countdown(iteration_name, countdown_sec):
    """
    Just count for some countdown_sec seconds and do nothing else
    """
    while countdown_sec &gt; 0:
       print(f'{iteration_name} iterates: {countdown_sec} seconds')
       yield from asyncio.sleep(1)
       countdown_sec -= 1

loop = asyncio.get_event_loop()
tasks = [asyncio.ensure_future(countdown('First Count', 2)),
         asyncio.ensure_future(countdown('Second Count', 3))]

start_time = datetime.utcnow() 

# run both methods. How much time will both run...?
loop.run_until_complete(asyncio.wait(tasks))

loop.close()

print(f'total running time: {datetime.utcnow() - start_time}')
</code></pre>
<p>We may think it will "sleep" for 2 seconds for first method and then 3 seconds in the second method, total of 5 seconds running time of this code. But.. it will print:</p>
<pre><code>total_running_time: 0:00:03.01286
</code></pre>
<p>Recommend to read <a href="https://docs.python.org/3/library/asyncio.html" rel="noreferrer">asyncio official documentation</a> for more details</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an easy example of a time delay:</p>
<pre><code>import time

def delay(period='5'):
    # If the user enters nothing, It'll wait 5 seconds
    try:
        #If the user not enters a int, I'll just return ''
        time.sleep(period)
    except:
        return ''
</code></pre>
<p>Another, in Tkinter:</p>
<pre><code>import tkinter

def tick():
    pass

root=Tk()
delay=100 # time in milliseconds
root.after(delay,tick)
root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can use sleep method in time package to make delay in python program execution</p>
<pre><code>import time
time.sleep(1)   # Delays for 1 seconds.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While everyone else has suggested the de facto <code>time</code> module, I thought I'd share a different method using <code>matplotlib</code>'s <code>pyplot</code> function, <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pause.html" rel="nofollow noreferrer"><code>pause</code></a>.</p>
<h3>An example</h3>
<pre><code>from matplotlib import pyplot as plt
plt.pause(5)    # Pauses the program for 5 seconds
</code></pre>
<p>Typically this is used to prevent the plot from disappearing as soon as it is plotted or to make crude animations.</p>
<p>This would save you an <code>import</code> if you already have <code>matplotlib</code> imported.</p>
</div>
<div class="post-text" itemprop="text">
<h3>If you would like to put a time delay in Python script:</h3>
<p>Use <strong><code>time.sleep</code></strong> or <strong><code>Event().wait</code></strong> like this:          </p>
<pre><code>from threading import Event
from time import sleep

delay_in_sec = 2

# use time.sleep like this
sleep(delay_in_sec)         # returns None
print(f'slept for {delay_in_sec} seconds')

# or use Event().wait like this
Event().wait(delay_in_sec)  # returns False
print(f'waited for {delay_in_sec} seconds')       
</code></pre>
<h1>However, if you want to delay the execution of a function do this:</h1>
<p>Use <a href="https://docs.python.org/2.7/library/threading.html?highlight=timer#threading.Timer" rel="nofollow noreferrer"><strong><code>threading.Timer</code></strong></a> like this:</p>
<pre><code>from threading import Timer 

delay_in_sec = 2

def hello(delay_in_sec):
    print(f'function called after {delay_in_sec} seconds')

t = Timer(delay_in_sec, hello, [delay_in_sec])  # hello function will be called 2 sec later with [delay_in_sec] as *args parameter
t.start()  # returns None
print("Started")
</code></pre>
<p>Outputs:           </p>
<pre><code>Started
function called after 2 seconds         
</code></pre>
<h3>Why use the later approach?</h3>
<ul>
<li>Does <strong>not</strong> stops execution of the whole script. (except for the function you pass it)</li>
<li>After starting the timer you can also stop it by doing <code>timer_obj.cancel()</code>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I have been looking a the previous answers and I would simply like to build on them.</p>
<p>I have often wanted to create a typing effect, here is how you can do this (Python 3):</p>
<pre class="lang-py prettyprint-override"><code>import time # For pausing

def typewrite(text):
    for i in text:
        print(i, end="", flush=True) # flush is True, so the result will get printed before waiting
        time.sleep(0.1)
</code></pre>
<p>And in Python 2:</p>
<pre class="lang-py prettyprint-override"><code>import time, sys # Time is for pausing, sys for printing without a new line

def typewrite(text):
    sys.stdout.flush() # flush is True, so the result will get printed before waiting
    for i in text:
        sys.stdout.write(i)
        time.sleep(0.1)
</code></pre>
<p>I hope this has helped you in some way.</p>
</div>
<span class="comment-copy">if you need some conditions to happen. It better to user threading.Event.wait.</span>
<span class="comment-copy">Well... it'll print less frequently than that, because it takes time to print and handle all the buffers that entails (possibly doing a kernel context switch), and to register the alarm signal, but... yeah. A little under once per minute.</span>
<span class="comment-copy">when using tkinter as graphical user interface, sleep() won't do the job - use after() instead: <i>tkinter.Tk.after(yourrootwindow,60000)</i> or <i>yourrootwindow.after(60000)</i></span>
<span class="comment-copy">thanks for this wasn't able to understand what sleep is , thanks again .</span>
<span class="comment-copy">It is worth mentioning that in Windows the best granularity you can hope for is about 0.015 seconds (15 ms) accuracy.  Most versions of Linux on modern processors can get down to 0.001 seconds (1 ms) granularity.</span>
<span class="comment-copy">Is there a function for wakeup?</span>
<span class="comment-copy">@Elfinforest what do you mean?</span>
<span class="comment-copy">Yes, but what can be said about the actual time resolution on different platforms? Are there some guarantees? Could the resolution be 16.666 ms?</span>
<span class="comment-copy"><code>time.sleep(time.localtime(time.time())[5])</code> makes no sense at all. This would wait longer if there's less time until the next full minute. If you want to wait until the end of the current minute I would suggest: <code>time.sleep(-time.time() % 60)</code> (this works with other intervals, too)</span>
<span class="comment-copy">where 10 means 10 seconds..</span>
<span class="comment-copy">yes! I have already mentioned in the code. "amount of time you want to delay"</span>
<span class="comment-copy">Yes, but the amount is in what unit of time? Seconds? Minutes?</span>
<span class="comment-copy">The second and the third method are not Python per-se, but selenium related. And you'd use them when you're doing E2E tests. OP hasn't mentioned about any of those.</span>
