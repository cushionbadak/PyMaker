<div class="post-text" itemprop="text">
<p>I have the fallowing problem, 
Im supposed to get user input in the form of <code>10:10:10</code> (hh:mm:ss) or <code>10:10</code>(mm:ss) or <code>10</code>(ss). Now i need check the fallowing parameters: </p>
<ul>
<li>If I'm getting only seconds then there is no limit.</li>
<li>If I'm getting <code>mm:ss</code> then the seconds are limited to 0..59 and minutes are unlimited.</li>
<li>If I'm getting <code>hh:mm:ss</code> then both seconds and minutes are limited to 0..59 while hours are unlimited.</li>
</ul>
<p>Then return a TimeDelta object.</p>
<p>The naive way is to write multiply <code>if</code> statements to check all this. 
But im looking for a smoother way.</p>
<pre><code>val = "11:66:11"
try:
    val = map(int, val.split(':'))
except ValueError:
    return False
if len(val) == 1:
    return val
if len(val) == 2:
    if val[1] &gt; 59:
        print  "Bad seconds"
        return False
if len(val) == 3:
    if val[2] &gt; 59 or val[1] &gt;59:
        print  "Bad seconds / minutes"
        return False
while len(val) &lt; 3:
        split.insert(0,0)
return = timedelta(hours=split[0],minutes=split[1],seconds=split[2])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about using regular expression here:</p>
<pre><code>import re
import datetime
pattern = re.compile(r'^(\d+)(?::([0-5]?\d)(?::([0-5]?\d))?)?$')

def str2seconds(val):
    match = pattern.match(val)
    if not match:
        raise ValueError("Invalid input: %s" % val)
    else:
        result = 0
        for i in match.groups():
            if i is not None:
                result *= 60
                result += int(i)

    return datetime.timedelta(seconds=result)
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; print(str2seconds('255'))
0:04:15
&gt;&gt;&gt; print(str2seconds('255:25'))
4:15:25
&gt;&gt;&gt; print(str2seconds('255:25:25'))
10 days, 15:25:25
&gt;&gt;&gt; print(str2seconds('255:25:25:255'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "y.py", line 8, in str2seconds
    raise ValueError("Invalid input: %s" % val)
ValueError: Invalid input: 255:25:25:255
&gt;&gt;&gt; print(str2seconds('255:25:60'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "y.py", line 8, in str2seconds
    raise ValueError("Invalid input: %s" % val)
ValueError: Invalid input: 255:25:60
</code></pre>
<hr/>
<p>The regular expression part by part:</p>
<ul>
<li><code>^</code>: beginning of string</li>
<li><code>(\d+)</code>: 1-n digits, captured as group 1</li>
<li><code>(?::([0-5]?\d)(?::([0-5]?\d))?)?</code> optional part:
<ul>
<li><code>(?:...)</code> is a non-capturing group</li>
<li><code>:</code> matches literal <code>:</code></li>
<li><code>([0-5]?\d)</code> an optional digit 0-5, followed by a digit, captured as group 2</li>
<li>there is a second non-capturing group in the first:
<code>(?::([0-5]?\d))?</code> that optionally matches second <code>:</code> followed by
an optional digit 0-5 followed by a digit; and capturing the digits into group 3</li>
<li>and finally <code>$</code> matches the end of the string. Strictly, <code>^</code> at the beginning is not necessary as <code>match</code> anchors the match at the beginning; however the <code>$</code> is necessary, as otherwise the match is not anchored at the end of the string! (Python 3.4 added <a href="https://docs.python.org/3/library/re.html#re.fullmatch" rel="nofollow">the <code>re.fullmatch</code></a> to fix this.)</li>
</ul></li>
</ul>
<p>The <code>match.groups()</code> will be a tuple of 3 items; the non-matching groups will be returned as <code>None</code>.</p>
</div>
<span class="comment-copy">Have you got any error? What problem u are facing ?</span>
<span class="comment-copy">No errors, the code i wrote is the native way to do what i want. Im asking for a more smoother way. A more pythonic way.</span>
<span class="comment-copy">Works like a charm! Can you please exlain the regex? Tried to understand it but got kinda stuck.</span>
<span class="comment-copy">If you try to solve a problem using regexs, very often you end up having two problems. I think a more basic string analysis is more appropriate.</span>
<span class="comment-copy">@ikaros45 bad joke</span>
<span class="comment-copy">@AnttiHaapala What joke? If the OP has to change that regexp, he will have a hard time. Using however a more standard (verbose, if you may) approach, he or anybody else will be able to change it now or in three years.</span>
<span class="comment-copy">Awesome! It is an excellent example on how to use regexes.</span>
