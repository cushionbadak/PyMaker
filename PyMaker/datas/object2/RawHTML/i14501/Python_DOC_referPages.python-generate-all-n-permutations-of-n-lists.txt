<div class="post-text" itemprop="text">
<p>I have n lists of different lengths of wich I want to create all possible permutations. </p>
<p>so e.g. if <code>a=[1,2]</code> and <code>b=[3,4,5]</code> then I would love to obtain <code>res=[[1,3],[1,4],[1,5],[2,3],[2,4],[2,5]]</code>
I've been trying to achieve this using a recursive function, which turned out to be neither very efficient nor very pythonic. 
How would an experienced python programmer tackle the problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's called the <a href="https://en.wikipedia.org/wiki/Cartesian_product" rel="noreferrer">Cartesian product</a> of two sequences.</p>
<p>This is already available in Python as a library function: <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="noreferrer"><strong><code>itertools.product</code></strong></a>.</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; b = [3, 4, 5]
&gt;&gt;&gt; list(itertools.product(a, b))
[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can do this by product function in itertools,</p>
<pre><code>import itertools
a = [1,2]
b = [3, 4, 5]
out = list(itertools.product(a,b))
print out
[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>itertools is definitely the way to go but if you don't want to go the easy route.....</p>
<pre><code>def print_permutations(lists, perms=[]):
    if not lists:
        print perms
    else:
        current_layer = lists[0]
        remaining_layers = lists[1:]
        for word in current_layer:
            print_permutations(remaining_layers, perms + [word])



l = (('quick', 'lazy'), ('brown', 'black', 'grey'), ('fox', 'dog'))
print_permutations(l)
</code></pre>
</div>
<span class="comment-copy">For each i from a: for each j from b: add [a, b] to res.</span>
<span class="comment-copy">Do you only need a solution that supports 2 lists, or should it accept any number of them?</span>
<span class="comment-copy">arbitrary many lists. With a known number of lists this would be to easy.</span>
<span class="comment-copy">Thank you. I knew the answer needed to be simple. I really got stuck in the wrong mindset and have missed that it was a simple cartesian product.</span>
