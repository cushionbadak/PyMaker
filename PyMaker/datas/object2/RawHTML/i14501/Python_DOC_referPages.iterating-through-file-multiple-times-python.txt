<div class="post-text" itemprop="text">
<p>I have a file that looks like this:</p>
<pre><code>1,var1
2,var2
3,var3
4,var1_val1
5,var2_val2
6,var1_val2
7,var3_val1
8,var2_val1
9,var3_val2
</code></pre>
<p>Output file should look like:</p>
<pre><code>var1 1 4 6 
var2 2 8 5
var3 3 7 9
</code></pre>
<p>My code is quite complicated. It works, but it's very inefficient. Can this be done more efficiently:</p>
<pre><code>def findv(var):
    with open(inputfile) as f:
        for line in f:
            elems=line.split(',')
            name=elems[0]
            if var!=name:
                continue
            field=elems[0]
        f.seek(0)
        for line in f:
            elems2=line.split(',')
            if elems2[1].endswith(var+'_val1'):
                first=elems2[0]
        f.seek(0)
        for line in f:
            elems3=line.split(',')
            if elems3[1].endswith(var+'_val3'):
                second=elems3[0]
    return var,field,first,second
</code></pre>
<p>main part of the code:</p>
<pre><code>with open(inputfile) as f:
    with open(outputfile) as fout:
        for line in f:
            tmp=line.split(',')
        if current[1].endswith('val1') or current[1].endswith('val2'):
            continue
        v=tmp[1]
        result=findv(v)
        f2.write(result)
</code></pre>
<p>My function findv(var) is called each time a line in input file starts with varx and then searches through the file multiple times until it finds fields that correspond to varx_val1 and varx_val2. </p>
<p>EDIT: I need to preserve the order of the input file, so var1 has to appear first in the output file, then var2, then var3 etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a dictionary, with the keys being your labels and a list to store your values.  This way, you only have to loop over your file once.</p>
<pre><code>from collections import defaultdict

results = defaultdict(list)

with open('somefile.txt') as f:
   for line in f:
      if line.strip():
         value, key = line.split(',')
         if '_' in key:
             key = key.split('_')[0] # returns var1 from var1_val1
         results[key].append(value)

for k,v in results.iteritems():
    print('{} {}'.format(k, ' '.join(v)))
</code></pre>
<p>Here is a version that includes the below comments:</p>
<pre><code>from collections import OrderedDict

results = OrderedDict

with open('somefile.txt') as f:
   for line in f:
      line = line.strip()
      if line:
         value, key = line.split(',')
         key = key.split('_')[0] # returns var1 from var1_val1
         results.setdefault(key, []).append(value)

for k,v in results.iteritems():
    print('{} {}'.format(k, ' '.join(v)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have written a python program that iterates over the file only once, reads all the important data into a dict, and then writes the dict into the output file.</p>
<pre><code>#!/usr/bin/env python3
import collections

output = collections.OrderedDict()

with open(inputfile, 'r') as infile:
    for line in infile:
        dat, tmp = line.strip().split(',')
        if '_val' in tmp:
            key, idxstr = tmp.split('_val')
            idx = int(idxstr)
        else:
            key = tmp
            idx = 0
        output.setdefault(key, ["", "", ""])[idx] = dat

with open(outoutfile, 'w') as outfile:
    for var in output:
        v = output[var]
        outfile.write('{} {}\n'.format(var, ' '.join(v)))
</code></pre>
<p><strong>Update:</strong> modified according to comments</p>
</div>
<span class="comment-copy">I clarified my question. I need to preserve the order of input file, so the output file has to be in order var1, var2,var3</span>
<span class="comment-copy">@Anastasia:  Then make <code>results</code> be an <code>OrderedDict</code>.  Change <code>results[key].append(value)</code> to <code>results.setdefault(key, []).append(value)</code>.</span>
<span class="comment-copy">Also, the names of variables are words, they don't end with a number, so I can't simply re-order the file based on the numerical value.</span>
<span class="comment-copy">No need to guard <code>key = key.split('_')[0]</code> with <code>if '_' in key:</code> because <code>"nounderscore" == "nounderscore".split('_')[0]</code>.</span>
<span class="comment-copy">@Anastasia:  No need to sort the result.  <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a> preserves the insertion order of keys.</span>
<span class="comment-copy">Don't use naked <code>except</code>s. Use <code>except ValueError</code>. No need to specify <code>'r'</code> mode, since this is the default for <code>open()</code>. Use <code>dict.setdefault()</code> to assign to keys that may have missing values.</span>
