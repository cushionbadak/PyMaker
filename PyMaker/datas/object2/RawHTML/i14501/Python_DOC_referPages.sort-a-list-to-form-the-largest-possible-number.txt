<div class="post-text" itemprop="text">
<p>I am trying to write a function that given a list of non negative integers, arranges them such that they form the largest possible number. </p>
<p>For example, given <code>[50, 2, 1, 9]</code>, the largest formed number is <code>95021</code>. </p>
<p>Here is the code that I have tried to solve the problem:</p>
<pre><code>a = [50, 2, 1, 9]
a.sort()
ans = []
for i in range(len(a)-1,-1,-1):
    ans.append(a[i])

print ''.join(map(str,ans))
</code></pre>
<p>However, I get <code>50921</code> , as <code>50</code> is largest, but it should show <code>9</code> first.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2 you can do this with an appropriate comparison function passed to <code>sort</code>.</p>
<pre><code>#!/usr/bin/env python

''' Sort a list of non-negative integers so that
    if the integers were converted to string, concatenated 
    and converted back to int, the resulting int is the highest
    possible for that list

    From http://stackoverflow.com/q/30140796/4014959

    Written by PM 2Ring 2015.05.10

    Python 2 version
'''

data = [
    [50, 2, 1, 9],
    [10, 1],
    [2, 23, 21],
]

def mycmp(a, b):
    a, b = str(a), str(b)
    ab, ba = a + b, b + a
    if ab == ba:
        return 0
    if ab &lt; ba:
        return -1
    return 1

for a in data:
    print 'In: ', a
    a.sort(cmp=mycmp, reverse=True)
    print 'Out:', a
    print
</code></pre>
<p><strong>output</strong></p>
<pre><code>In:  [50, 2, 1, 9]
Out: [9, 50, 2, 1]

In:  [10, 1]
Out: [1, 10]

In:  [2, 23, 21]
Out: [23, 2, 21]
</code></pre>
<hr/>
<p>In Python 3, <code>sort</code> no longer takes a custom comparison function. scpio's answer shows how to use <code>functools</code> to convert a comparison function into a key function, but it's not that hard to do "by hand".</p>
<pre><code>#!/usr/bin/env python

''' Sort a list of non-negative integers so that
    if the integers were converted to string, concatenated 
    and converted back to int, the resulting int is the highest
    possible for that list

    From http://stackoverflow.com/q/30140796/4014959

    Written by PM 2Ring 2015.05.10

    Python 3 compatible version
'''

from __future__ import print_function

class cmpclass(object):
    def __init__(self, n):
        self.n = str(n)

    def __str__(self):
        return self.n

    def _cmp(self, other):
        a, b = self.n, str(other)
        ab, ba = a + b, b + a
        if ab == ba:
            return 0
        if ab &lt; ba:
            return -1
        return 1

    def __lt__(self, other): return self._cmp(other) == -1
    def __le__(self, other): return self._cmp(other) &lt;= 0
    def __eq__(self, other): return self._cmp(other) == 0
    def __ne__(self, other): return self._cmp(other) != 0
    def __gt__(self, other): return self._cmp(other) == 1
    def __ge__(self, other): return self._cmp(other) &gt;= 0


data = [
    [50, 2, 1, 9],
    [10, 1],
    [2, 23, 21],
]

for a in data:
    print('In: ', a)
    a.sort(key=cmpclass, reverse=True)
    print('Out:', a)
    print('')
</code></pre>
<p><strong>output</strong></p>
<pre><code>In:  [50, 2, 1, 9]
Out: [9, 50, 2, 1]

In:  [10, 1]
Out: [1, 10]

In:  [2, 23, 21]
Out: [23, 2, 21]
</code></pre>
<p>The previous Python 3 compatible version I posted doesn't actually work on Python 3 :oops:! That's because the <code>__cmp__</code> method is no longer supported in Python 3. So I've changed my old <code>__cmp__</code> method to <code>_cmp</code> and used it to implement all 6 of the <a href="https://docs.python.org/3/reference/datamodel.html#object.__lt__" rel="noreferrer">rich comparison methods</a>.</p>
<p><strong>Important note</strong></p>
<p><strike>I have to mention that this comparison function is a bit weird: it's non-transitive, in other words, a&gt;b and b&gt;c doesn't <em>necessarily</em> imply a&gt;c. And that means that the results of using it in <code>.sort()</code> are <em>unpredictable</em>. It does appear to do the right thing for the data I've tested it with, eg, it returns the correct result for all permutations of <code>[1, 5, 10]</code>, but I guess it really shouldn't be trusted to do so for all input.</strike></p>
<p>An alternative strategy that's <em>guaranteed</em> to work is brute force: generate all permutations of the input list &amp; find the permutation that yields the maximum result. But hopefully there's a more efficient algorithm, since generating all permutations of a large list is rather slow.</p>
<hr/>
<p>As Antti Haapala points out in the comments, my old comparison functions were unstable when comparing different numbers that consist of the same sequences of repeating digits, eg 123123 and 123123123. Such sequences should compare equal, my old functions didn't do that. The latest modification addresses that problem.</p>
<hr/>
<p><strong>Update</strong></p>
<p>It turns out that <code>mycmp() / _cmp()</code> actually <em>is</em> transitive. It's also stable, now that it handles the <code>ab == ba</code> case properly, so it's safe to use with TimSort (or any other sorting algorithm). And it can be shown that it gives the same result as Antti Haapala's <code>fractionalize()</code> key function.</p>
<p>In what follows I'll use uppercase letters to represent integers in the list and I'll use the lowercase version of a letter to represent the number of digits in that integer. Eg, <code>a</code> is the number of digits in <code>A</code>. I'll use <code>_</code> as an infix operator to represent digit concatenation. Eg, <code>A_B</code> is <code>int(str(A)+str(B)</code>; note that <code>A_B</code> has <code>a+b</code> digits. Arithmetically,<br/>
<code>A_B = A * 10**b + B</code>.</p>
<p>For the sake of brevity, I'll use <code>f()</code> to represent Antti Haapala's <code>fractionalize()</code> key function. Note that <code>f(A) = A / (10**a - 1)</code>.</p>
<p>Now for some algebra. I'll put it in a code block to keep the formatting simple.</p>
<pre class="lang-none prettyprint-override"><code>Let A_B = B_A
A * 10**b + B = B * 10**a + A
A * 10**b - A = B * 10**a - B
A * (10**b - 1) = B * (10**a - 1)
A / (10**a - 1) = B / (10**b - 1)
f(A) = f(B)

So A_B = B_A if &amp; only if f(A) = f(B)

Similarly,
A_B &gt; B_A if &amp; only if f(A) &gt; f(B)
This proves that using mycmp() / _cmp() as the sort comparison function
is equivalent to using fractionalize() as the sort key function.

Note that
f(A_B) = (A * 10**b + B) / (10**(a+b)-1)
and
f(B_A) = (B * 10**a + A) / (10**(a+b)-1)

So f(A_B) = f(B_A) iff A_B = B_A, and f(A_B) &gt; f(B_A) iff A_B &gt; B_A

Let's see what happens with 3 integers.

f(A), f(B), f(C) are just real numbers, so comparing them is
transitive. 
And so if f(A) &gt; f(B) and f(B) &gt; f(C) then f(A) &gt; f(C). 
This proves that mycmp() / _cmp() is also transitive.

Clearly, if f(A) &gt; f(B) &gt; f(C) then
A_B &gt; B_A, B_C &gt; C_B, A_C &gt; C_A

Let B_C &gt; C_B
For any A,
A * 10**(b+c) + B_C &gt; A * 10**(b+c) + C_B
So A_B_C &gt; A_C_B
i.e. adding the same integer to the beginning of B_C and C_B preserves
the inequality.

Let A_B &gt; B_A
For any C,
(A_B) * 10**c + C &gt; (B_A) * 10**c + C
So A_B_C &gt; B_A_C,
i.e. adding the same integer to the end of A_B and B_A preserves the
inequality.

Using these results, we can show that
if f(A) &gt; f(B) &gt; f(C) then
A_B_C &gt; A_C_B &gt; C_A_B &gt; C_B_A and
A_B_C &gt; B_A_C &gt; B_C_A &gt; C_B_A.

This covers all 6 permutations of [A, B, C] and shows that A_B_C is the
largest possible integer for that list.
</code></pre>
<p>A mathematical induction-style argument shows that sorting a list of any
finite length using pairwise comparisons with <code>mycmp()</code> / <code>_cmp()</code> as the
comparison function or with <code>fractionalize()</code> as the key function suffices
to find the permutation that yields the largest possible integer
produced by digit concatenation. The details of this argument will be
left as an exercise for the reader. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>One-liner using insights from Antti Haapala, PM 2Ring and Stefan Pochmann:</p>
<pre><code>from fractions import Fraction
sorted(a, key=lambda n: Fraction(n, 10**len(str(n))-1), reverse=True)
</code></pre>
<p>Given <code>a = [50, 5, 51, 59, 2, 1, 9, 98]</code>:</p>
<pre><code>[9, 98, 59, 5, 51, 50, 2, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is an ugly solution that does work without passing a <code>cmp</code> comparison  function to the <code>sorted</code>. Basically, the key function takes each number and calculates a rational number that has that number as the <a href="http://en.wikipedia.org/wiki/Repeating_decimal" rel="nofollow">repeating decimals</a>; that is</p>
<pre><code>0   =&gt; 0
100 =&gt; 100/999 == 0.100100100...
10  =&gt; 10/99   == 0.1010101010...
1   =&gt; 1/9     == 0.1111111111...
11  =&gt; 11/99   == 0.1111111111...
12  =&gt; 12/99   == 0.1212121212...
9   =&gt; 9/9     == 1
99  =&gt; 99/99   == 1
999 =&gt; 999/999 == 1
</code></pre>
<p>The 0 is sorted the smallest with sort key 0, and 1 followed by most zeroes would have key closest to <code>0.1</code>, and thus sorted second smallest. Numbers that consist of digit 9 all have sort key equal to <code>1</code>; it does not really matter if you sort <code>9</code> before or after <code>99</code>.</p>
<p>Sorting using these values as the key will necessarily give the correct output, unless you use numbers that are too big for float precision. (probably much sooner than <code>2 ** 53</code>)</p>
<p>Thus we get the following program:</p>
<pre><code># for Python 2, not needed in Python 3
from __future__ import division

a = [50, 5, 51, 59, 2, 1, 9, 98]

def fractionalize(i):
    divisor = 9
    while divisor &lt; i:
        divisor = 10 * divisor + 9 

    return i / divisor

print(sorted(a, key=fractionalize, reverse=True))
</code></pre>
<p>Which produces</p>
<pre><code>[9, 98, 59, 5, 51, 50, 2, 1]
</code></pre>
<hr/>
<p>As we're essentially calculating <code>i / (10 ** ceil(log10(i + 1)) - 1)</code> here, one can also write the following oneliner:</p>
<pre><code>from math import ceil, log10

print(sorted(a, key=lambda i: i and i/(10**ceil(log10(i+1))-1), reverse=True))
</code></pre>
<p>The <code>i and</code> part guards for division by zero error, in case <code>0</code> is among the numbers.</p>
</div>
<div class="post-text" itemprop="text">
<p>I hope I'm not varying too much on this.  My input is cast as a list of strings.  I generate the list of permutations, creating a list of lists, and then sort the sublists from least to greatest.  Finally, I take the last element of the sorted list.</p>
<pre><code>import itertools

digits = ['50', '2', '1', '9']
perms = itertools.permutations(digits)
sorted_numlist = sorted(perms)
print sorted_numlist[-1]
</code></pre>
<p>If you'd rather have the number itself rather than the list of elements...</p>
<pre><code>import itertools

digits = ['11', '68', '4', '12']
perms = itertools.permutations(digits)
numlist = []
for sublist in perms:
    permutated_num = "".join(sublist)
    numlist.append(int(permutated_num))

sorted_numlist = sorted(numlist)
print sorted_numlist[-1]
</code></pre>
<p>That second one actually also serves to show the the first is properly sorting on lists.</p>
<p>I'm pretty new with Python and would appreciate comments/improvements.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import functools

def cmpr(x, y):
    xy = str(x) + str(y)
    yx = str(y) + str(x)
    return -1 if (xy &gt; yx) else 1

a = [50, 2, 1, 9]
a.sort(key=functools.cmp_to_key(cmpr))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most straight-forward way is to use <a href="https://docs.python.org/2.7/library/itertools.html#module-itertools" rel="nofollow noreferrer"><em>itertools.permutations()</em></a> to model how you would solve this by hand:</p>
<pre><code>&gt;&gt;&gt; from itertools import permutations, imap
&gt;&gt;&gt; a = [50, 2, 1, 9]
&gt;&gt;&gt; int(max(imap(''.join, permutations(map(str, a)))))
95021
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would love to understand from all the python experts here what is wrong with my one-liner solution. Leet code website keeps rejecting with failed tcs which works just fine on my local env.</p>
<pre><code>from itertools import permutations as pm

def max_number(lst):

    if all(v == 0 for v in nums):
        return "0"

    lst1 = [str(item) for item in lst]
    return max([int(''.join(list(perm))) for perm in pm(lst, len(lst1))])
</code></pre>
</div>
<span class="comment-copy">What have you already tried to do?  How has it failed to work?</span>
<span class="comment-copy"><a href="https://blog.svpino.com/2015/05/07/five-programming-problems-every-software-engineer-should-be-able-to-solve-in-less-than-1-hour?utm_source=facebook&amp;utm_medium=social&amp;utm_content=Oktopost-facebook-profile&amp;utm_campaign=Oktopost-2015-05+General+Campaign" rel="nofollow noreferrer">blog.svpino.com/2015/05/07/…</a></span>
<span class="comment-copy">can there be negative numbers?</span>
<span class="comment-copy">@PadraicCunningham "non negative integers"</span>
<span class="comment-copy">The Py3 version doesn't work for me, I get <code>TypeError: unorderable types: cmpclass() &lt; cmpclass()</code>.</span>
<span class="comment-copy">@StefanPochmann: I've fixed that problem. However, as I mention in the <b>Important note</b> there's a fundamental flaw in my algorithm. Fortunately Antti Hapala has posted a much better solution.</span>
<span class="comment-copy">How do you know it's not transitive?</span>
<span class="comment-copy">@StefanPochmann it is transitive and equivalent to my algorithm, I just made PM 2Ring a bit confused when I asked that how does he know that it is transitive...</span>
<span class="comment-copy">@StefanPochmann there is a slight bug, numbers that are prefixes of each other, say <code>22</code> and <code>222</code> are unstable...</span>
<span class="comment-copy"><code>10 ** len(str(n)) - 1</code> actually seemed to be quite fast</span>
<span class="comment-copy">@AnttiHaapala Yeah, that does seem quite a bit faster. Updated, thanks!</span>
<span class="comment-copy">Might as well use <code>key=lambda n:str(n)*100</code>, right?</span>
<span class="comment-copy">@StefanPochmann yeah, but no fun in that ;)</span>
<span class="comment-copy">@AnttiHaapala Ok but how about using <code>Fraction</code>?</span>
<span class="comment-copy">@StefanPochmann: 1) <code>str(n)*100</code> is a bit wasteful of RAM, but I guess it won't slow the comparisons down much. 2) A <code>Fraction</code> is good because it allows the list to contain <code>int</code>s that are too big for float precision. OTOH, <code>Fraction</code> comparison is slower than <code>float</code> comparison, since it needs to do two multiplications on top of the (possibly short-circuited) subtraction.</span>
<span class="comment-copy">It's a pity that integers don't have a decimal equivalent of <a href="https://docs.python.org/3/library/stdtypes.html#int.bit_length" rel="nofollow noreferrer">.bit_length()</a>. But I guess you could calculate the number of digits in <code>i</code> by dividing the bit length by log10(2).</span>
<span class="comment-copy">Please consider adding some explanation to this code.</span>
<span class="comment-copy">I don't think this will work, even on the given example; your comparison function doesn't return the right values for a cmp.</span>
<span class="comment-copy">did this in a hurry and forgot that a sort comparator returns -1 or 1 instead of 0 and 1. But my answer was already roughly replicated by @PM 2Ring, so take either ;)</span>
<span class="comment-copy">@scpio: An old-style comparison function needs to return <i>three</i> different values, not just two. It needs to return <code>(negative, zero, positive)</code> for <code>(&lt;, ==, &gt;)</code>, respectively.</span>
<span class="comment-copy">Gives wrong result for <code>a = [50, 5, 51, 59, 2, 1, 9, 98]</code></span>
<span class="comment-copy">Kostas, it produces a correct result, but that requires a <code>long</code> if run on a 32-bit Python 2. <code>permutations</code> was introduced in 2.6, but you'd have to go all the way back to 2.2 to get an <code>int</code> that doesn't produce <code>long</code> (and therefore is incorrect). In Python 3, you'd use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> rather than <a href="https://docs.python.org/2/library/itertools.html#itertools.imap" rel="nofollow noreferrer"><code>imap</code></a>, and <code>int</code> already handles arbitrary precision.</span>
