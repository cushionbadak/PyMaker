<div class="post-text" itemprop="text">
<p>Hey guys am new to python development and i tried to undrstand the use of <code>with</code>..The code i have wrote is</p>
<pre><code>  class Mgr(object):

       def __enter__(self): pass
       def __exit__(self, ext, exv, trb):
          if ext is not None: print "no not possible"
                 print "OK I caught you"
                 return True

       def honey(self):
           print 'guli'



b = Mgr()
with b.honey() as d:
        print d
</code></pre>
<p>When i run the code it gaves me output <code>guli</code> along with an attribute error.</p>
<p>I know with works with context managers and is <code>b.honey()</code> a context manager ??..  Can you guys please explain me why this error occurs ..Thanx for the help..</p>
<p><code>Traceback (most recent call last):
  File "C:/Python27/c", line 18, in &lt;module&gt;
    with b.honey() as d:
AttributeError: __exit__</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that, while <code>b</code> is a context mananger, <code>b.honey()</code> isn't.</p>
<p><code>b.honey()</code> is just whatever you return from the <code>honey</code> method. In this case, you don't return anything, so it's <code>None</code>.</p>
<hr/>
<p>If you want <code>b.honey()</code> to return <code>b</code>, you could—just add <code>return self</code> to the end of the method. But this is kind of strange. You wouldn't normally expect using <code>b.honey()</code> in a <code>with</code> statement to "close" <code>b</code>. That would be like <code>with f.read(8192) as buf:</code> closing the file <code>f</code>. (There are some use cases where that might make sense, but not in general.)</p>
<hr/>
<p>Or, there's no reason <code>b</code> and <code>b.honey()</code> can't both be totally separate context managers. It's hard to think of a case where you'd want this, but if you did, you could return an instance of some other class—or use the <a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager" rel="nofollow"><code>contextmanager</code></a> decorator:</p>
<pre><code>@contextlib.contextmanager
def honey(self):
    print 'guli'
    yield 'this is d'
    print 'ilug'
</code></pre>
<hr/>
<p>But more likely, what you actually wanted is something like this:</p>
<pre><code>with Mgr() as d:
    d.honey()
    print d
</code></pre>
<p>But in that case, you probably want to change the <code>__enter__</code> method to <code>return self</code>. Whatever it returns is what's going to end up in <code>d</code>.</p>
<p>So, for example:</p>
<pre><code>class Mgr(object):
     def __enter__(self): 
         return self
     def __exit__(self, ext, exv, trb):
         if ext is not None: print "no not possible"
         print "OK I caught you"
         return True

    def honey(self):
        print 'guli'

with Mgr() as d:
    d.honey()
    print d
</code></pre>
<p>Now, the <code>with Mgr() as d</code> constructs and initializes an <code>Mgr</code> instance (you don't have an <code>__init__</code>, so that does nothing), then calls its <code>__enter__</code> method, which returns that instance, then assigns the result to <code>d</code>. Then it runs <code>d.honey()</code> and <code>print d</code>. And then (whether there was an exception or not) it calls <code>d.__exit__(…)</code>.</p>
</div>
<span class="comment-copy">when i did this it gaves me output like <code>OK I caught you" and no not possible</code> ..but i didnt get output <code>gulli</code></span>
<span class="comment-copy">@pythonlover: Which "this" did you do? I gave three different suggestions that all do different things, and I just gave you the relevant code rather than a complete program for all of them, which makes it hard to guess which one you tried and how you may have gotten it wrong.</span>
<span class="comment-copy">i tried the last method you have given me..this is my code .. <a href="http://pastebin.com/eLgtwP0i..what" rel="nofollow noreferrer">pastebin.com/eLgtwP0i..what</a> i need is that i need an output <code>gulli</code> without any errors</span>
<span class="comment-copy">@pythonlover: When I go there, I just see "This paste has been removed!"</span>
<span class="comment-copy">@abarnert seems like he have done the last method..can you just provide the full code ?</span>
