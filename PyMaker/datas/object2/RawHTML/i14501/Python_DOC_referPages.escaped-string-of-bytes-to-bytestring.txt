<div class="post-text" itemprop="text">
<p>I'm new to Python and I need to read bytestring from a command line argument. I'm using Python 3.4.</p>
<p>At the moment, I'm using argparse to parse the arguments, with this configuration for the data: <code>parser.add_argument("-d", "--data", default=b'\0')</code></p>
<p>When I call my program with -d argument (e.g. <code>python myprogram.py -d b'd\x00!\x00W\x00'</code>), it interprets the value of -d as a string, escaping slashes and treating the 'b' as part of the string, like this: <code>'b\\'d\\x00!\\x00W\\x00\\''</code></p>
<p>Is there a way to unescape the output from argparse and convert it to bytes?</p>
</div>
<div class="post-text" itemprop="text">
<p>You'd normally have the shell formulate the exact bytes, but since you <a href="https://stackoverflow.com/questions/17105225/how-to-escape-a-null-byte-as-an-argument-to-a-shell-command-inside-a-makefile">cannot pass in NUL bytes as arguments</a> asking users to pass in escape sequences is a reasonable work-around.</p>
<p>However, the shell is not going to interpret Python byte string literal notation.</p>
<p>In this case, I'd ask the user to enter <em>hexadecimal</em> values instead:</p>
<pre><code>python myprogram.py -d "64 00 21 00 57 00"
</code></pre>
<p>and use the <a href="https://docs.python.org/3/library/binascii.html#binascii.unhexlify" rel="nofollow noreferrer"><code>binascii.unhexlify()</code> function</a> to produce your <code>bytes</code> value from that (removing any whitespace first):</p>
<pre><code>whitespace = dict.fromkeys((9, 10, 13, 32))  # tab, space, newline and carriage return
data = binascii.unhexlify(args.data.translate(whitespace))
</code></pre>
<p>This does require that you set your default argument value to a compatible value:</p>
<pre><code>parser.add_argument("-d", "--data", default='00')
</code></pre>
<p>The alternative would be to use the <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval()</code> function</a> to interpret the Python byte string literal syntax:</p>
<pre><code>data = ast.literal_eval(args.data)
</code></pre>
<p>and your default'd be:</p>
<pre><code>parser.add_argument("-d", "--data", default=repr(b'\0'))
</code></pre>
<p>but take into account that this function accepts any Python literal, so you could end up with any other object type, including numbers, strings and containers.</p>
</div>
<span class="comment-copy">@thefourtheye: which doesn't help anything here because that doesn't handle interpreting escape sequences. You also still cannot pass in a NUL byte as <code>sys.argv</code> value.</span>
<span class="comment-copy">Yup, I was about to add that bug was not helpful, but my browser won't allow me for some reason. I ll remove that.</span>
<span class="comment-copy"><code>ast.literal_eval(...)</code> did the trick. Thanks</span>
