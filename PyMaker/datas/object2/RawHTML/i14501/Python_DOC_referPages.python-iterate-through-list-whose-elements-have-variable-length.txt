<div class="post-text" itemprop="text">
<p>How can I iterate through a list or tuple whose elements as lists with variable length in Python? For example I want to do </p>
<pre><code>tup=( [1,2], [2,3,5], [4,3], [4,5,6,7] )
for a,b,c,d in tup:
     print a,b,c,d
</code></pre>
<p>and then have the elements of <code>tup</code> that are short to be completed with, say, <code>None</code>. I have found a workaround with the following code but I believe there must be a better way.</p>
<pre><code>tup=( [1,2], [2,3,5], [4,3], [4,5,6,7] )
for a,b,c,d in [ el if len(el)==4 else [ el[i] if i&lt;len(el) else None for i in range(4)] for el in tup ]:
     print a,b,c,d
</code></pre>
<p>Where <code>4</code> is actually the length of the "longest" element. </p>
<p>Is there a better way?</p>
</div>
<div class="post-text" itemprop="text">
<p>To match your own output you can use <a href="https://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow noreferrer"><code>izip_longest</code></a> to fill with <code>None</code>'s and transpose again to get back to the original order:</p>
<pre><code>from itertools import izip_longest

tup=( [1,2], [2,3,5], [4,3], [4,5,6,7] )
for a,b,c,d in zip(*izip_longest(*tup)):
    print(a,b,c,d)
(1, 2, None, None)
(2, 3, 5, None)
(4, 3, None, None)
(4, 5, 6, 7)
</code></pre>
<p>If an <code>int</code>, <code>float</code> etc.. would be better then you can specify a different <code>fillvalue</code> argument to the <code>izip_longest</code> function:</p>
<pre><code>tup=( [1,2], [2,3,5], [4,3], [4,5,6,7])
for a,b,c,d in zip(*izip_longest(*tup,fillvalue=0)):
    print(a,b,c,d)

(1, 2, 0, 0)
(2, 3, 5, 0)
(4, 3, 0, 0)
(4, 5, 6, 7)
</code></pre>
<p>Judging by your <code>print</code> statement you are likely to be using python2 but for anyone using python3 as @TimHenigan <a href="https://stackoverflow.com/questions/30060671/python-iterate-through-element-variable-length/30060753#comment48236641_30060753">commented below</a> it is  <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>zip_longest</code></a>.</p>
<p>If you don't need a list you can use <a href="https://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow noreferrer">itertools.izip</a> which returns an iterator:</p>
<pre><code> from itertools import izip_longest, izip

tup = ( [1, 2], [2, 3, 5], [4, 3], [4, 5, 6, 7])
for a, b, c, d in izip(*izip_longest(*tup, fillvalue=0)):
    print(a, b, c, d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3 we can do like this:</p>
<pre><code>for i in tup:
    for j in i:
        print(j,"",end="")
    print()
</code></pre>
</div>
<span class="comment-copy">what are you doing with the values? Do you always need four values?</span>
<span class="comment-copy">going to use them in <code>pyplot</code>. But each value is actually going to be a list.</span>
<span class="comment-copy"><code>for a,b,c,d in ((vals+[None]*4)[:4] for vals in tup)</code> is shorter, but still not elegant</span>
<span class="comment-copy">For Python &gt;=3, replace <code>izip_longest</code> with <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>zip_longest</code></a>.</span>
<span class="comment-copy">very nice! Smart use of the <code>*</code> syntax. This is just what I had in mind.</span>
