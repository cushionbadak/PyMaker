<div class="post-text" itemprop="text">
<p>Lets say I have a list like this:</p>
<pre><code>list_of_lists = [['how to apply'],['a function'],['to each list?']]
</code></pre>
<p>And I have a function let's say I want to apply the <code>F</code> function to each sublist of the <code>F</code> function can compute some score about two lists. How can apply this <code>F</code> function to each list of <code>list_of_lists</code> and return each score in a new list like this:</p>
<pre><code>new_list = [score_1, score_2, score_3]
</code></pre>
<p>I tried with the <code>map</code> function the following:</p>
<pre><code>map(F, list_of_lists).append(new_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the builtin <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow"><code>map</code></a> to do this. </p>
<p>So if the function you want to apply is <code>len</code>, you would do:</p>
<pre><code>&gt;&gt;&gt; list_of_lists = [['how to apply'],['a function'],['to each list?']]
&gt;&gt;&gt; map(len, list_of_lists)
[1, 1, 1]
</code></pre>
<p>In <code>Python3</code>, the above returns a map iterator, so you will need an explicit <code>list</code> call:</p>
<pre><code>&gt;&gt;&gt; map(len, list_of_lists)
&lt;map object at 0x7f1faf5da208&gt;
&gt;&gt;&gt; list(map(len, list_of_lists))
[1, 1, 1]
</code></pre>
<hr/>
<p>If you are looking to write some code for this which has to be compatible in both Python2 and Python3, list comprehensions are the way to go. Something like:</p>
<pre><code>[apply_function(item) for item in list_of_lists]
</code></pre>
<p>will work in both Python 2 and 3 without any changes.</p>
<p>However, if your input list_of_lists is huge, using <code>map</code> in Python3 would make more sense because the iterator will be much faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about</p>
<pre><code>[ F(x) for x in list_of_lists ]
</code></pre>
<p>which will iterate over list_of_lists, call F with each sublist as an argument, then generate a list of the results.</p>
<p>If you want to use the sublists as all the arguments to <code>F</code> you could do it slightly differently as</p>
<pre><code>[ F(*x) for x in list_of_lists ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension, like this</p>
<pre><code>[function_to_be_done(item) for item in list_of_lists]
</code></pre>
<p>For example,</p>
<pre><code>&gt;&gt;&gt; list_of_lists = [['how to apply'],['a function'],['to each list?']]
&gt;&gt;&gt; [len(item) for item in list_of_lists]
[1, 1, 1]
</code></pre>
<p><strong>Note:</strong> Though list comprehensions look like a way to apply a function to all the elements, its main purpose is to construct a new list. So, if you don't want to construct a new list, then just iterate with <code>for</code> loop and call the function.</p>
<hr/>
<p>Apart from that, you can use the <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow"><code>map</code></a> function in Python 2.7, to apply a function to all the elements and construct a list. For example,</p>
<pre><code>&gt;&gt;&gt; list_of_lists = [['how to apply'],['a function'],['to each list?']]
&gt;&gt;&gt; map(len, list_of_lists)
[1, 1, 1]
</code></pre>
<p>But, <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> returns a map iterator object in Python 3.x. So, you need to explicitly convert that to a list, like this</p>
<pre><code>&gt;&gt;&gt; list_of_lists = [['how to apply'],['a function'],['to each list?']]
&gt;&gt;&gt; map(len, list_of_lists)
&lt;map object at 0x7f94026afd30&gt;
&gt;&gt;&gt; list(map(len, list_of_lists))
[1, 1, 1]
</code></pre>
<hr/>
<p>You might want to read about, what Guido thinks about <code>map</code> in this <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="nofollow">post</a>.</p>
<p>Basically, <code>map</code> would more often demand you to create a new function (mostly people create a <code>lambda</code> function). But in many cases, list comprehension avoids that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Something that works on arbitrarily nested lists, e.g. [[1,2],[[5]],[7,[8,[9,11]]]] :</p>
<pre><code>def apply_f(a,f):
 if isinstance(a,list):
     return map(lambda t:apply_f(t,f), a)
 else:
     return f(a)
</code></pre>
<p>here is an example of running this:</p>
<pre><code>&gt;&gt;&gt; ll=[[1,2],[[5]],[7,[8,[9,11]]]]
&gt;&gt;&gt; apply_f(ll,lambda t:t**2)
[[1, 4], [[25]], [49, [64, [81, 121]]]]
</code></pre>
<hr/>
<p>and here is how to do the same only on selected levels:</p>
<pre><code>def apply_f(a,f,depth,levels):
    if isinstance(a,list):
        return map(lambda t:apply_f(t,f,depth+1,levels), a)
    else:
        if depth in levels:
            return f(a)
        else:
            return a
</code></pre>
<p>getting e.g.</p>
<pre><code>&gt;&gt;&gt; apply_f(ll,lambda t:t**2, 0, [2,4])
[[1, 4], [[5]], [49, [8, [81, 121]]]]
</code></pre>
<p>there are some optimisations to do here, by avoiding passing <code>f</code> and <code>levels</code>
around (making the recursive function an inner function in a wrapper,
so that it can use <code>f</code> and <code>levels</code> from the outer scope), but that's minor. (Note that this is Python 2, for Python 3 you need to replace <code>map</code> with something else).</p>
<hr/>
<p>For a more generic input, the following would do the trick:</p>
<pre><code>def apply_f(a,f):
    try: 
       return(f(a))
    except:
       return map(lambda t:apply_f(t,f), a)
</code></pre>
<p>So now also the following sort of works:</p>
<pre><code>&gt;&gt; apply_f([(1,2),[[5]],[7,(8,[9,11])]],lambda t:t**2)
[[1, 4], [[25]], [49, [64, [81, 121]]]]
</code></pre>
<p>(things get slightly rewritten, as <code>map()</code> always produces lists...)</p>
</div>
<div class="post-text" itemprop="text">
<p>Map is your friend! <code>map</code> takes a function and an iterable (list, for example) and applies the function on each element of the list.</p>
<pre><code>map(len, [['how to apply'],['a function'],['to each list?']]) 
</code></pre>
<p>Output</p>
<pre><code>[1, 1, 1]
</code></pre>
<p>If you wanted to do more granular calculation on elements of the sublist, you can nest the map:</p>
<pre><code>map(lambda x: map(lambda y: y + 1, x), [[1], [1, 2], [1, 2, 3]])
</code></pre>
<p>Output</p>
<pre><code>[[2], [2, 3], [2, 3, 4]]
</code></pre>
<p>Another possible approach (also from functional programming) are list comprehensions. List comprehension is a way of constructing a list from iterable in Python. The syntax is <code>[element for element in iterable]</code>. Any computation can be done on the element, so</p>
<pre><code>[f(element) for element in iterable]
</code></pre>
<p>means that the resulting list will be a list of elements, where each element is the result of function f. Like map, list comprehension can be further nested, resulting in a nested element function application.</p>
<pre><code>[element + 1 for element in el] for el in [[1], [1, 2], [1, 2, 3]]]
</code></pre>
<p>Output</p>
<pre><code>[[2], [2, 3], [2, 3, 4]]
</code></pre>
</div>
<span class="comment-copy">What is the best way to do this efficienttelly?</span>
<span class="comment-copy">There's nothing special about a list of lists. <code>map</code> or a list comprehension will iterate over the elements of the list, whether those be <code>int</code>s, strings, or other lists.</span>
<span class="comment-copy">Thanks for the amazing answers guys</span>
<span class="comment-copy">Sorry, I thought last night I accepted it @muç„¡</span>
<span class="comment-copy">this does not work for deeper nested lists.</span>
<span class="comment-copy">The question is for list of lists, for which the solution works. In case you are looking for a generic solution, ask a new question :)</span>
<span class="comment-copy">Can you generalize to map at a user-specified level or list of levels?</span>
<span class="comment-copy">yes, this is easy: you need to store the nestedness level of apply_f in its parameter, and increase it in recursive calls; and return f(a) or a itself, conditioned on the nestedness level.</span>
<span class="comment-copy">Can you please implement this in your code above?</span>
<span class="comment-copy">here you are. In case, I am available for  consulting work, and actually passed Google Foobar for the lols a couple of years ago :-)</span>
<span class="comment-copy">Dima, thanks, will test. Im new to "pythonic" but can't wait to get back to a high level language vs this assembly-level sh*. What you just implemented is built in the system I like to use and it works generically for all expressions not just lists. van Rossum is a clown.</span>
<span class="comment-copy">yuck: <code>map(lambda x: map(lambda y: y + 1, x), [[1], [1, 2], [1, 2, 3]])</code> ... pythonic = assembly</span>
