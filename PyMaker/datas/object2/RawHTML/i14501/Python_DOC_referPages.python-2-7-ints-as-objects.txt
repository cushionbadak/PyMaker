<div class="post-text" itemprop="text">
<p>How does an int in python avoid being an object but yet is one:</p>
<p>If I do the following:</p>
<pre><code>&gt;&gt;&gt; dir(10)
['__abs__', '__add__', '__and__', '__class__', '__cmp__', '__coerce__', '__delattr__', '__div__', '__divmod__', '__doc__', '__float__', '__floordiv__', '__format__', '__getattribute__', '__getnewargs__', '__hash__', '__hex__', '__index__', '__init__', '__int__', '__invert__', '__long__', '__lshift__', '__mod__', '__mul__', '__neg__', '__new__', '__nonzero__', '__oct__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdiv__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'imag', 'numerator', 'real']
&gt;&gt;&gt; 10.__add__(20)
  File "&lt;stdin&gt;", line 1
    10.__add__(20)
             ^
SyntaxError: invalid syntax
</code></pre>
<p>If I type in 10. it produces 10.0 whereas anything such as 10.__ anything __ produces a syntax error. It does make sense since a float would be considered as 10.5 but</p>
<ol>
<li>how is this achieved/implemented? </li>
<li>how can I call the int methods on an int?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>The Python tokenizer is greedy, it always tries to match the longest token possible at any given position; otherwise it could think that <code>10.e+123</code> is the same as <code>(10).e + 123</code>.</p>
<p>In the case of <code>10.__add__(20)</code> it sees the following tokens:</p>
<pre><code>&gt;&gt;&gt; tokenize.tokenize(iter(['10.__add__(20)']).next)
1,0-1,3:        NUMBER  '10.'
1,3-1,10:       NAME    '__add__'
1,10-1,11:      OP      '('
1,11-1,13:      NUMBER  '20'
1,13-1,14:      OP      ')'
2,0-2,0:        ENDMARKER       ''
</code></pre>
<p>i.e., the <code>.</code> was considered to be a part of the number literal, e.g. a <code>float</code>. If you parenthesize the number (<code>(10).__add__(20)</code>), you'll get:</p>
<pre><code>&gt;&gt;&gt; tokenize.tokenize(iter(['(10).__add__(20)']).next)
1,0-1,1:        OP      '('
1,1-1,3:        NUMBER  '10'
1,3-1,4:        OP      ')'
1,4-1,5:        OP      '.'
1,5-1,12:       NAME    '__add__'
1,12-1,13:      OP      '('
1,13-1,15:      NUMBER  '20'
1,15-1,16:      OP      ')'
2,0-2,0:        ENDMARKER       ''
</code></pre>
<p>Similarly, just adding a space between the number and the dot (<code>10 .</code>) would work here.</p>
<p>Here the <code>.</code> is tokenized as a separate operator. If a <code>float</code> constant would do, then you could actually type:</p>
<pre><code>10..__add__(20)
</code></pre>
<p>This is tokenized as float literal <code>10.</code> followed by a <code>.</code> followed by identifier <code>__add__</code> and so forth.</p>
<hr/>
<p>The silly <code>iter().next</code> needs to be <code>iter().__next__</code> on Python 3. The <a href="https://docs.python.org/3/library/tokenize.html#tokenize.tokenize" rel="nofollow"><code>tokenize.tokenize</code></a> requires an argument that is a <code>readline</code> -like function; when called, it should return a line of program input.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use parenthesis around the number:</p>
<pre><code>(10).__add__(20)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's a matter of lexing. You can wrap the number in parenthesis to access members, e.g. <code>(10).__add__(20)</code></p>
<p>The expression <code>10.__add__(20)</code> is parsed/lexed as <code>(10.) __add__(20)</code>.</p>
</div>
<span class="comment-copy">What does the  left hand side parenthesis do in this case? Does it evaluate the expression into an int object?</span>
<span class="comment-copy">I guess you could say that, but it's to disambiguate it from a float</span>
<span class="comment-copy"><code>(10.) __add__(20)</code> and <code>10.__add__(20)</code> is the same.</span>
