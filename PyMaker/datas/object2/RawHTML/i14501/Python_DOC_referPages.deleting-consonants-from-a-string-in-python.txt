<div class="post-text" itemprop="text">
<p>Here is my code. I'm not exactly sure if I need a counter for this to work. The answer should be <code>'iiii'</code>.</p>
<pre><code>def eliminate_consonants(x):
        vowels= ['a','e','i','o','u']
        vowels_found = 0
        for char in x:
            if char == vowels:
                print(char)

eliminate_consonants('mississippi')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>Correcting your code</h2>
<p>The line <code>if char == vowels:</code> is wrong. It has to be <code>if char in vowels:</code>. This is because you need to check if that particular character is present in the list of vowels. Apart from that you need to <code>print(char,end = '')</code> (in python3) to print the output as <code>iiii</code> all in one line.</p>
<p>The final program will be like</p>
<pre><code>def eliminate_consonants(x):
        vowels= ['a','e','i','o','u']
        for char in x:
            if char in vowels:
                print(char,end = "")

eliminate_consonants('mississippi')
</code></pre>
<p>And the output will be</p>
<pre><code>iiii
</code></pre>
<hr/>
<h2>Other ways include</h2>
<ul>
<li><p><strong><em>Using <code>in</code> a string</em></strong></p>
<pre><code>def eliminate_consonants(x):
    for char in x:
        if char in 'aeiou':
            print(char,end = "")
</code></pre>
<p>As simple as it looks, the statement <code>if char in 'aeiou'</code> checks if <code>char</code> is present in the string <code>aeiou</code>. </p></li>
<li><p><strong><em><a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">A list comprehension</a></em></strong></p>
<pre><code> ''.join([c for c in x if c in 'aeiou'])
</code></pre>
<p>This list comprehension will return a list that will contain the characters only if the character is in <code>aeiou</code> </p></li>
<li><p><strong><em><a href="https://docs.python.org/2/reference/expressions.html#generator-expressions" rel="nofollow noreferrer">A generator expression</a></em></strong></p>
<pre><code>''.join(c for c in x if c in 'aeiou')
</code></pre>
<p>This gen exp will return a generator than will return the characters only if the character is in <code>aeiou</code></p></li>
<li><p><strong><em><a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">Regular Expressions</a></em></strong></p>
<p>You can use <a href="https://docs.python.org/2/library/re.html#re.findall" rel="nofollow noreferrer"><code>re.findall</code></a> to discover only the vowels in your string. The code</p>
<pre><code>re.findall(r'[aeiou]',"mississippi")
</code></pre>
<p>will return a list of vowels found in the string i.e. <code>['i', 'i', 'i', 'i']</code>. So now we can use <code>str.join</code> and then use </p>
<pre><code>''.join(re.findall(r'[aeiou]',"mississippi"))
</code></pre></li>
<li><p><strong><em><a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow noreferrer"><code>maketrans</code></a></em></strong></p>
<p>For this technique you will need to store a map which matches each of the non vowels to a <code>None</code> type. For this you can use <a href="https://docs.python.org/2/library/string.html#string.ascii_lowercase" rel="nofollow noreferrer"><code>string.ascii_lowecase</code></a>. The code to make the map is </p>
<pre><code>str.maketrans({i:None for i in string.ascii_lowercase if i not in "aeiou"})
</code></pre>
<p>this will return the mapping. Do store it in a variable (here <code>m</code> for map)</p>
<pre><code>"mississippi".translate(m)
</code></pre>
<p>This will remove all the non <code>aeiou</code> characters from the string. </p></li>
<li><p><strong><em>Using <a href="https://docs.python.org/3/library/stdtypes.html#dict.fromkeys" rel="nofollow noreferrer"><code>dict.fromkeys</code></a></em></strong></p>
<p>You can use <code>dict.fromkeys</code> along with <a href="https://docs.python.org/3/library/sys.html#sys.maxunicode" rel="nofollow noreferrer"><code>sys.maxunicode</code></a>. But remember to <code>import sys</code> first! </p>
<pre><code>dict.fromkeys(i for i in range(sys.maxunicode+1) if chr(i) not in 'aeiou')
</code></pre>
<p>and now use <code>str.translate</code>. </p>
<pre><code>'mississippi'.translate(m)
</code></pre></li>
<li><p><strong><em>Using <a href="https://docs.python.org/3/library/functions.html#bytearray" rel="nofollow noreferrer"><code>bytearray</code></a></em></strong></p>
<p>As mentioned by <a href="https://stackoverflow.com/users/4279/j-f-sebastian">J.F.Sebastian</a> in the <a href="https://stackoverflow.com/questions/29998052/print-vowels-in-string-python/29998062?noredirect=1#comment50843538_29998062">comments below</a>, you can create a bytearray of lower case consonants by using</p>
<pre><code>non_vowels = bytearray(set(range(0x100)) - set(b'aeiou'))
</code></pre>
<p>Using this we can translate the word ,</p>
<pre><code>'mississippi'.encode('ascii', 'ignore').translate(None, non_vowels)
</code></pre>
<p>which will return <code>b'iiii'</code>. This can easily be converted to <code>str</code> by using <code>decode</code> i.e. <code>b'iiii'.decode("ascii")</code>. </p></li>
<li><p><strong><em>Using <a href="https://docs.python.org/3/library/functions.html#bytes" rel="nofollow noreferrer"><code>bytes</code></a></em></strong></p>
<p><code>bytes</code> returns an bytes object and is the immutable version of <code>bytearray</code>. (<strong>It is Python 3 specific</strong>)</p>
<pre><code>non_vowels = bytes(set(range(0x100)) - set(b'aeiou'))
</code></pre>
<p>Using this we can translate the word ,</p>
<pre><code>'mississippi'.encode('ascii', 'ignore').translate(None, non_vowels)
</code></pre>
<p>which will return <code>b'iiii'</code>. This can easily be converted to <code>str</code> by using <code>decode</code> i.e. <code>b'iiii'.decode("ascii")</code>. </p></li>
</ul>
<hr/>
<h2>Timing comparison</h2>
<h2>Python 3</h2>
<pre><code>python3 -m timeit -s "text = 'mississippi'*100; non_vowels = bytes(set(range(0x100)) - set(b'aeiou'))" "text.encode('ascii', 'ignore').translate(None, non_vowels).decode('ascii')"
100000 loops, best of 3: 2.88 usec per loop
python3 -m timeit -s "text = 'mississippi'*100; non_vowels = bytearray(set(range(0x100)) - set(b'aeiou'))" "text.encode('ascii', 'ignore').translate(None, non_vowels).decode('ascii')"
100000 loops, best of 3: 3.06 usec per loop
python3 -m timeit -s "text = 'mississippi'*100;d=dict.fromkeys(i for i in range(127) if chr(i) not in 'aeiou')" "text.translate(d)"
10000 loops, best of 3: 71.3 usec per loop
python3 -m timeit -s "import string; import sys; text='mississippi'*100; m = dict.fromkeys(i for i in range(sys.maxunicode+1) if chr(i) not in 'aeiou')" "text.translate(m)"
10000 loops, best of 3: 71.6 usec per loop
python3 -m timeit -s "text = 'mississippi'*100" "''.join(c for c in text if c in 'aeiou')"
10000 loops, best of 3: 60.1 usec per loop
python3 -m timeit -s "text = 'mississippi'*100" "''.join([c for c in text if c in 'aeiou'])"
10000 loops, best of 3: 53.2 usec per loop
python3 -m timeit -s "import re;text = 'mississippi'*100; p=re.compile(r'[aeiou]')" "''.join(p.findall(text))"
10000 loops, best of 3: 57 usec per loop
</code></pre>
<p>The timings in sorted order</p>
<pre><code>translate (bytes)    |  2.88
translate (bytearray)|  3.06
List Comprehension   | 53.2
Regular expressions  | 57.0
Generator exp        | 60.1
dict.fromkeys        | 71.3
translate (unicode)  | 71.6
</code></pre>
<p>As you can see the final method using <code>bytes</code> is the fastest. </p>
<hr/>
<h2>Python 3.5</h2>
<pre><code>python3.5 -m timeit -s "text = 'mississippi'*100; non_vowels = bytes(set(range(0x100)) - set(b'aeiou'))" "text.encode('ascii', 'ignore').translate(None, non_vowels).decode('ascii')"
100000 loops, best of 3: 4.17 usec per loop
python3.5 -m timeit -s "text = 'mississippi'*100; non_vowels = bytearray(set(range(0x100)) - set(b'aeiou'))" "text.encode('ascii', 'ignore').translate(None, non_vowels).decode('ascii')"
100000 loops, best of 3: 4.21 usec per loop
python3.5 -m timeit -s "text = 'mississippi'*100;d=dict.fromkeys(i for i in range(127) if chr(i) not in 'aeiou')" "text.translate(d)"
100000 loops, best of 3: 2.39 usec per loop
python3.5 -m timeit -s "import string; import sys; text='mississippi'*100; m = dict.fromkeys(i for i in range(sys.maxunicode+1) if chr(i) not in 'aeiou')" "text.translate(m)"
100000 loops, best of 3: 2.33 usec per loop
python3.5 -m timeit -s "text = 'mississippi'*100" "''.join(c for c in text if c in 'aeiou')"
10000 loops, best of 3: 97.1 usec per loop
python3.5 -m timeit -s "text = 'mississippi'*100" "''.join([c for c in text if c in 'aeiou'])"
10000 loops, best of 3: 86.6 usec per loop
python3.5 -m timeit -s "import re;text = 'mississippi'*100; p=re.compile(r'[aeiou]')" "''.join(p.findall(text))"
10000 loops, best of 3: 74.3 usec per loop
</code></pre>
<p>The timings in sorted order</p>
<pre><code>translate (unicode)  |  2.33
dict.fromkeys        |  2.39
translate (bytes)    |  4.17
translate (bytearray)|  4.21
List Comprehension   | 86.6
Regular expressions  | 74.3
Generator exp        | 97.1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try pythonic way like this,</p>
<pre><code>In [1]: s = 'mississippi'
In [3]: [char for char in s if char in 'aeiou']
Out[3]: ['i', 'i', 'i', 'i']
</code></pre>
<p>Function;</p>
<pre><code>In [4]: def eliminate_consonants(x):
   ...:     return ''.join(char for char in x if char in 'aeiou')
   ...: 

In [5]: print(eliminate_consonants('mississippi'))
iiii
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>==</code> tests for equality. You are looking to see if any of the characters exist in the string that are in your list 'vowels'. To do that, you can simply use <code>in</code> such as below.</p>
<p>Additionally, I see you have a 'vowels_found' variable but are not utilizing it. Below one example how you can solve this:</p>
<pre><code>def eliminate_consonants(x):
    vowels= ['a','e','i','o','u']
    vowels_found = 0
    for char in x:
        if char in vowels:
            print(char)
            vowels_found += 1

    print "There are", vowels_found, "vowels in", x

eliminate_consonants('mississippi')
</code></pre>
<p>Your output would then be:</p>
<pre><code>i
i
i
i
There are 4 vowels in mississippi
</code></pre>
</div>
<span class="comment-copy">Thank you! :) Appreciate the fast response. :) :)</span>
<span class="comment-copy">Can you pls let me know how to print the output all in one line in Python 2.7 as this: <code>print(char,end = "")</code> only seems to works in Paython 3. Thanks.</span>
<span class="comment-copy">@JoeR <code>print char,</code> in py2 (Note the trailing comma)</span>
<span class="comment-copy">What does <code>vowels_found = 0</code> mean ?</span>
<span class="comment-copy">If you need speed; work with bytes and call <code>bytestring.translate(None, non_vowels)</code></span>
<span class="comment-copy">Errr! I rather prefer <code>return ''.join([char for char in x if char in 'aeiou'])</code>. Direct and easy to understand :)</span>
<span class="comment-copy">@BhargavRao thanks updated,</span>
<span class="comment-copy">@BhargavRao Building your intermediate list is both unnecessary and costly. You should remove those <code>[]</code>. Another alternative is <code>''.join(filter('aeiou'.__contains__, s))</code>. I tested a 10 million lowercase letters string, Bhargav's way took 2.16 seconds, mine took 1.47 seconds, Bhargav's without creating that intermediate list took 1.25 seconds.</span>
<span class="comment-copy">@StefanPochmann Thanks Buddy for that info. I will update <a href="http://stackoverflow.com/a/29998062/4099593">my</a> answer.</span>
<span class="comment-copy">@BhargavRao The update there was good as well, but what I meant was your comment here. Just use <code>''.join(char ... 'aeiou')</code> without those <code>[]</code>.</span>
<span class="comment-copy">At best, this is a comment, not an answer.</span>
<span class="comment-copy">was still editing my response @abarnert</span>
<span class="comment-copy">still good to know ;). thank you for your response.</span>
