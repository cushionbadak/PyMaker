<div class="post-text" itemprop="text">
<p>I'd like to pass some command line arguments to a python script run via <code>gdb</code> command, but importing the gdb module in python removes the argv attribute from sys. How do I access arg1 and arg2 within my python script shown in my example?</p>
<h3>Command line execution:</h3>
<pre><code>$ gdb -x a.py --args python -arg1 -arg2
</code></pre>
<h3>a.py:</h3>
<pre><code>#!/usr/bin/env python
import gdb
import sys
print('The args are: {0}'.format(sys.argv))
gdb.execute('quit')
</code></pre>
<h3>Error raised:</h3>
<pre><code>AttributeError: 'module' object has no attribute 'argv'
</code></pre>
<h3>Versions:</h3>
<ul>
<li>GNU gdb (GDB) 7.2</li>
<li>Python 2.6.6</li>
</ul>
<h3>Edit:</h3>
<p>The end target I'll be debugging is a C executable that is already running, so I'll be attaching to it later in the script, so <code>gdb -x a.py --args python -arg1 -arg2</code> is not correct either since the <code>python</code> part prints a gdb error: <code>Reading symbols from /usr/bin/python...(no debugging symbols found)...done.</code>...</p>
</div>
<div class="post-text" itemprop="text">
<p><strong><code>-ex py</code></strong></p>
<p>This is a possibility:</p>
<p>argv.py:</p>
<pre><code>print(arg0)
print(arg1)
</code></pre>
<p>Invocation:</p>
<pre><code>gdb --batch -ex 'py arg0 = 12' -ex 'py arg1 = 3.4' -x argv.py
</code></pre>
<p>Then you could wrap that in the following script:</p>
<pre><code>#!/usr/bin/env bash

doc="
Pass parameters to python script.

Usage:

  $0 scrpit.py 1 2

Where scrpit.py uses the arguments like:

  print(arg0)
  print(arg1)
"

py="$1"
shift
cli=''
i=0
for arg in $*; do
  cli="$cli -ex 'py arg$i = $arg'"
  i=$(($i+1))
done
eval gdb --batch $cli -x "$py"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's not totally clear to me what you are trying to do.</p>
<p>An invocation of the form:</p>
<pre><code>gdb --args something arg arg
</code></pre>
<p>Tells gdb to use <code>something</code> as the program to be debugged, with <code>arg arg</code> as the initial command-line arguments for the <code>run</code> command.  You can inspect these inside gdb with <code>show args</code>.</p>
<p>So, your command is saying "I want to debug the <code>python</code> executable, passing it some arguments".</p>
<p>However, later you say you plan to <code>attach</code> to some already-running executable.</p>
<p>So, I think you're probably trying to script gdb in Python -- not debug the <code>python</code> executable.</p>
<p>The good news is, this is possible, just not the way you've written it.  Instead you have a couple choices:</p>
<ul>
<li><p>Make a <code>.py</code> file holding your script and tell gdb to <code>source</code> it, e.g., with <code>gdb -x myscript.py</code> (which you've already done...)</p></li>
<li><p>Use <code>-ex</code> to invoke some Python explicitly, like <code>-ex 'python print 23'</code>.</p></li>
</ul>
</div>
<span class="comment-copy">You might find something helpful in <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html</a> or its equivalent in 2 if you're using that.</span>
<span class="comment-copy">@AdamBorgo argparse was added in Python version 2.7 and I'm using 2.6, however I had tried using optparse originally but it relies on sys.argv. So I boiled all that down to this simplified question actually. Thanks for your suggestion though (maybe argparse it <i>would</i> work, just not in this application)!</span>
<span class="comment-copy">This isn't exactly what you want, but: If you can make <code>a.py</code> define a python function, say <code>a</code>, then you can give gdb an argument such as <code>-ex "python a('the answer is ',42)"</code>.</span>
<span class="comment-copy">@MarkPlotnick your answer is the closest I've come to a solution. What I don't like is its kludginess, I was hoping there would be a more straightforward method. This does work, and thank you, but maybe the answer is it cannot be done? <code>$ gdb -ex "python import os,sys; sys.path.append(os.getcwd()); from a import *; main('arg1', 'arg2')"</code>. My best idea is to write a helper bash script that launches a.py (what I'm already doing), but redirects the command line arguments to a temp file that the a.py script reads from &lt;- this is less kludgy especially with tricky arguments and can use optparse..</span>
<span class="comment-copy">Your first suggestion is what I would like to accomplish: <code>$ gdb -x a.py</code>, but I need to send command line arguments TO this a.py script. The a.py script eventually attaches to a C program running in the background (unimportant). I don't want to just start gdb <code>$ gdb</code> then use the <code>r</code> command later which is what using <code>args</code> seems to assume because it needs the program name <code>something</code> as its initial argument.</span>
<span class="comment-copy">Write a wrapper script that takes your arguments, generates a Python file, and then invokes gdb appropriately.</span>
<span class="comment-copy">We should add a <code>set pyargs</code> command :-)</span>
