<div class="post-text" itemprop="text">
<p>I need to absorb output of a bash command via pipe in real time. 
E.g </p>
<pre class="lang-sh prettyprint-override"><code>for i in $(seq 1 4); do echo $i; sleep 1; done | ./script.py
</code></pre>
<p>Where script.py has this</p>
<pre class="lang-py prettyprint-override"><code>for line in sys.stdin.readlines():
        print line
</code></pre>
<p>I'm expecting the sequence to be printed as it becomes available, but the python script is waiting for bash script to end before proceeding. </p>
<p>I looked at <a href="https://stackoverflow.com/questions/2082850/real-time-subprocess-popen-via-stdout-and-pipe">this</a> related answer, but that didn't solve my problem. How do I go about achieving this in python?</p>
</div>
<div class="post-text" itemprop="text">
<p>The first problem is that <a href="https://docs.python.org/2.7/library/stdtypes.html#file.readlines" rel="nofollow noreferrer"><code>readlines</code></a> reads all the lines into a list. It can't do that until all of the lines are present, which won't be until <code>stdin</code> has reached EOF.</p>
<p>But you don't actually need a <em>list</em> of the lines, just <em>some iterable</em> of the lines. And a file, like <code>sys.stdin</code>, already <em>is</em> such an iterable. And it's a lazy one, that generates one line at a time as soon as they're available, instead of waiting to generate them all at once.</p>
<p>So:</p>
<pre><code>for line in sys.stdin:
    print line
</code></pre>
<p>Whenever you find yourself reaching for <code>readlines</code>, ask yourself whether you really need it. The answer will <em>always</em> be no. (Well, except when you want to call it with an argument, or on some defective not-quite-file-like object.) See <a href="http://stupidpythonideas.blogspot.com/2013/06/readlines-considered-silly.html" rel="nofollow noreferrer">Readlines Considered Silly</a> for more.</p>
<hr/>
<p>But meanwhile, there's a <em>second</em> problem. It's not that Python is buffering its <code>stdin</code>, or that the other process is buffering its <code>stdout</code>, but that the file-object iterator itself is doing internal buffering, which may (depending on your platform—but on most POSIX platforms, it usually will) prevent you from getting to the first line until EOF, or at least until a lot of lines have been read.</p>
<p>This is a known problem with Python 2.x, which has been fixed in 3.x,<sup>*</sup> but that doesn't help you unless you're willing to upgrade.</p>
<p>The solution is mentioned in the Command line and environment docs, and in the manpage on most systems, but buried in the middle of the <a href="https://docs.python.org/2/using/cmdline.html#cmdoption-u" rel="nofollow noreferrer"><code>-u</code> flag documentation</a>:</p>
<blockquote>
<p>Note that there is internal  buffering  in  xreadlines(),  readlines()  and  file-object  iterators ("for line in sys.stdin") which is not influenced by  this  option.   To  work around  this, you will want to use "sys.stdin.readline()" inside a "while 1:" loop.</p>
</blockquote>
<p>In other words:</p>
<pre><code>while True:
    line = sys.stdin.readline()
    if not line:
        break
    print line
</code></pre>
<p>Or:</p>
<pre><code>for line in iter(sys.stdin.readline, ''):
    print line
</code></pre>
<hr/>
<p>For a different problem, in <a href="https://stackoverflow.com/questions/3670323/setting-smaller-buffer-size-for-sys-stdin/3670470#3670470">this answer</a>, Alex Martelli points out that you can always just ignore <code>sys.stdin</code> and re-<code>fdopen</code> the file descriptor. Which means that you get a wrapper around a POSIX fd instead of a C stdio handle. But that's neither necessary nor sufficient for <em>this</em> question, because the problem isn't with the C stdio buffering, but the way the <code>file.__iter__</code> buffering interacts with it.</p>
<hr/>
<p><sub>* Python 3.x doesn't use the C stdio library's buffering anymore; it does everything itself, in the types in the <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer"><code>io</code></a> module, which means the iterator can just share the same buffer the file object itself is using. While <code>io</code> is available on 2.x as well, it's not the default thing you get for <code>open</code>—or for the stdio file handles, which is why it doesn't help here.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>With Python 2.7.9 (and probably all Python's prior to 3.x), this does what you expect:</p>
<pre><code>#!/usr/bin/python

import sys

while True:
   line=sys.stdin.readline()
   if not line:
      break
   print line   
</code></pre>
<p>You can also do:</p>
<pre><code>#!/usr/bin/python

import sys

for line in iter(sys.stdin.readline, ''):
   print line 
</code></pre>
<p>On Python 3.4.3, you can do what abarnert suggests:</p>
<pre><code>#!/usr/local/bin/python3

import sys

for line in sys.stdin:
    print(line)
</code></pre>
<p>You can also reopen sys.stdin with the <a href="https://docs.python.org/2/library/io.html#io.open" rel="nofollow">io class</a> as Python 3 uses:</p>
<pre><code>#!/usr/bin/python

import sys, io

for line in io.open(sys.stdin.fileno()):
    print(line)
</code></pre>
<p>The 1st, 2nd, and last methods all work on Python 2.7.6 and 2.7.9 and Python 3.4.3 on OS X; the third method, only on Python 3. </p>
</div>
<div class="post-text" itemprop="text">
<p>The current most upvoted answer does not actually answer the question as it does not print the output as it streams. Something like the code below should do what you want:</p>
<pre><code>import sys

def readline():
    while True:
        res = sys.stdin.readline()
        if not res:
            break
        yield res

for line in readline():
    print line
</code></pre>
<p>Here, rather than wait for readlines to construct a list, we read a single line and then yield the value. And we just continue consuming input and yielding until the end of the stream is signaled by an empty return from sys.stdin.readline().</p>
</div>
<span class="comment-copy"><code>readlines()</code> collects all the lines into a list. It can't make the list until it has all the lines.</span>
<span class="comment-copy">Worth reading (or at least skimming): <a href="http://stupidpythonideas.blogspot.com/2013/06/readlines-considered-silly.html?m=1" rel="nofollow noreferrer">stupidpythonideas.blogspot.com/2013/06/…</a></span>
<span class="comment-copy">Oops, abarnert beat me to it.</span>
<span class="comment-copy">At least on OS X, this still has to wait the entire loop before there is any output from Python</span>
<span class="comment-copy">Not the entire loop; just enough to fill the pipe buffer before the OS will actually write any data to the Python script.</span>
<span class="comment-copy">If you change <code>$(seq 1 4)</code> to <code>$(seq 1 100)</code> you will wait the entire time -- at least on OS X...</span>
<span class="comment-copy">iter(sys.stdin.readline...) worked for me (for both seq 4 and 100). Thanks a lot abarnert.</span>
<span class="comment-copy">@chepner not on Python 2.7.9 on OS X either. Try it. Does it work on your system?</span>
<span class="comment-copy">If you read Alex Martelli's answer, you shouldn't expect <code>-u</code> to help here. Just because it's relevant to a different problem doesn't mean it's relevant to this one. The manpage fragment he quoted explicitly tells you it won't work here, and what to do instead…</span>
