<div class="post-text" itemprop="text">
<p>I have a <strong>large program</strong> with multiple classes. </p>
<pre><code>class Dog(object):    
    def __init__(self):
        self.food = 10

    def print_dog_food(self):
        print(self.food)


class Cat(object):    
    def __init__(self):
        self.food = 5

    def print_cat_food(self):
        print(self.food)
</code></pre>
<p>They are inherited by other classes: </p>
<pre><code>class AllAnimals(Cat, Dog):
    def __init__(self):
        Cat.__init__(self)
        Dog.__init__(self)
</code></pre>
<p>Some variables will be having similar names. I am afraid of accidentally overriding an existing variable and creating nasty bugs: </p>
<pre><code># Wrong result. 
AllAnimals().print_cat_food()  # prints 10
AllAnimals().print_dog_food()  # prints 10
</code></pre>
<p>Keeping track of all those variables to avoid accidents seems impractical, so I was thinking of using mangling: </p>
<pre><code>def __init__(self):
    self.__food = ...... 
</code></pre>
<p>and get what i expect: </p>
<pre><code># Correct result.
AllAnimals().print_cat_food()  # prints 5
AllAnimals().print_dog_food()  # prints 10
</code></pre>
<hr/>
<p><a href="https://stackoverflow.com/a/70900/4230591">Mangling</a> solves my problem, but reading this <a href="https://stackoverflow.com/a/7456865/4230591">highly upvoted answer</a> stating that:</p>
<blockquote>
<p>If you want to use it eventually, you can, but it is neither usual nor
  recommended.</p>
</blockquote>
<p>and the "This is culture" section of that answer makes me sceptical. </p>
<p><strong>Questions</strong>:<br/>
 - Should I use mangling as in the example?<br/>
 - If not, what are my alternatives to avoid accidental overriding of variables?   </p>
</div>
<div class="post-text" itemprop="text">
<p>Using mangling to produce 'private' attributes is neither usual nor recommended, because there is no such thing as truly private attributes in Python.</p>
<p>Using mangling for what it was <em>designed to do</em>, reduce the likelyhood of subclasses clashing on attribute names, is absolutely pythonic and fine.</p>
<p>From the <a href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers" rel="nofollow">documentation</a>:</p>
<blockquote>
<p>Names in this category, when used within the context of a class definition, are re-written to use a mangled form <strong>to help avoid name clashes between “private” attributes of base and derived classes</strong>.</p>
</blockquote>
<p><em>Emphasis mine.</em></p>
<p>However, the use-case is pretty rare; there are not many situations where you want the attribute to not be accidentally overridden. But if you <em>are</em> building base classes that are going to be widely subclassed (in a large project or as part of a framework or library intended for a wide range of uses), then using double-underscore names for implementation details is perfectly fine.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is unusual, because what you're doing here is unusual. However, given your requirements, I would say that using name-mangled variables is a perfectly appropriate thing to do.</p>
</div>
<span class="comment-copy"><code>Cat</code> and <code>Dog</code> should inherit from a class <code>Animal</code>, not the other way around.</span>
<span class="comment-copy">@chepner Why? (i was simply trying to create a simple example of a class inheriting from 2 others)</span>
<span class="comment-copy">@user5061 because <a href="http://en.wikipedia.org/wiki/Inheritance_%28object-oriented_programming%29" rel="nofollow noreferrer">inheritance</a> (subtyping, more specifically) is generally used to establish an <code>is-a</code> relationship. <code>Car</code> is a (special type of) <code>Vehicle</code>. <code>Teacher</code> is a <code>Person</code>. -&gt; <code>Subclass</code> is special type of <code>Superclass</code>.</span>
<span class="comment-copy">And specific to this example, an <code>Animal</code> is not a type of <code>Dog</code>; a <code>Dog</code> is a type of <code>Animal</code>.</span>
<span class="comment-copy">I had posted the answer you linked. Sorry if my answer caused confusion - it was a poor choice of words! In fact, your use case exactly the one which would be perfectly solved with double underscores. Use them!</span>
<span class="comment-copy">I didn't know this is what mangling was created for. So the linked post discourages mangling only when used to hide everything for no real reason?</span>
<span class="comment-copy">@user5061: that's my take on it, yes.</span>
<span class="comment-copy"><i>"..use-case is pretty rare.."</i>- Isn't a large program with (some) similar names one of those cases? Am i doing something wrong?</span>
<span class="comment-copy">@user5061: the Python standard library reserves the use for classes that are expected to be widely subclassed and where 3rd parties should not need to know the internal implementation. The <code>__name</code> convention then is used in situations you want to support arbitrary subclassing where altering the base class is not feasible. If you have a large project being developed by multiple teams of developers then using the convention is a good use case.</span>
<span class="comment-copy">What makes it unusual?</span>
