<div class="post-text" itemprop="text">
<pre><code>s = 'ABBCbDAbCdC'
a = 100
</code></pre>
<p>Using these, I want to make a list:</p>
<pre><code>list = ['100', '101', '102', '103', '105', '106', '108', '110']
</code></pre>
<p>My main goal is to create a list of numbers starting from an integer  (<code>a =100</code> for example) corresponding to the letters in the string by ignoring the lowercase letters.</p>
<p>Is there any solutions to do this with python? I will apply the solution to a large file consisting of lots of fields and rows.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer"><code>enumerate()</code> function</a> to create a counter, the second argument is the starting value, letting you set it to <code>a</code> if you need that as a starting point.</p>
<p>To test if a string is uppercase, use the <a href="https://docs.python.org/3/library/stdtypes.html#str.isupper" rel="noreferrer"><code>str.isupper()</code> method</a>.</p>
<p>Combined together in a list comprehension with filter gives you:</p>
<pre><code>[str(number) for number, char in enumerate(s, a) if char.isupper()]
</code></pre>
<p>This numbers all characters in <code>s</code> starting at <code>a</code>, but only includes those numbers in the output list where the character is uppercase; the numbers are converted to strings:</p>
<pre><code>&gt;&gt;&gt; s = 'ABBCbDAbCdC'
&gt;&gt;&gt; a = 100
&gt;&gt;&gt; [str(number) for number, char in enumerate(s, a) if char.isupper()]
['100', '101', '102', '103', '105', '106', '108', '110']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Martijn's answer indeed the best. I have tried to make use of <a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> and <a href="https://docs.python.org/2/library/functions.html#filter" rel="nofollow noreferrer"><code>filter</code></a> functions<sup>1</sup>. </p>
<pre><code>&gt;&gt;&gt; filter(None,map(lambda x:str(x[0]) if x[1].isupper() else None,enumerate(s,a)))
['100', '101', '102', '103', '105', '106', '108', '110']
</code></pre>
<p>Do note that this is terribly slow compared to the List comprehension. Another <code>lambda</code> expression as <a href="https://stackoverflow.com/questions/30013604/how-to-make-a-list-based-on-a-string-ignore-lowercase/30014892?noredirect=1#comment48150463_30014892">Pochmann</a> has mentioned below is <code>lambda x: x[1].isupper() and str(x[0])</code>. The difference between the two <code>lambda</code>s is negligible. </p>
<p><sup>1</sup><sub>Any list comp can have an alternative using these functions</sub></p>
</div>
<span class="comment-copy">Yes, there are solutions to do this with Python; have you made any attempts yourself yet though? We can help you with your code here, not write the solution for you from scratch.</span>
<span class="comment-copy">I addition to what @MartijnPieters said, it seems you have three basic problems to solve: <i>How to count the uppercase characters in a string</i> then <i>how to produce n consecutive integers</i> and finally <i>how to convert an integer into a string</i> . These three questions have answers  easily found online.</span>
<span class="comment-copy">Sorry for taking your time, I am very very new in writing codes, trying to learn on my own, and probably did not know how to search in a correct way. Sorry for my silly question. thank you.</span>
<span class="comment-copy">Alternative lambda: <code>lambda x: x[1].isupper() and str(x[0])</code></span>
<span class="comment-copy">@StefanPochmann I actually tried that logical operation, however it was a bit slow. So I settled for this</span>
<span class="comment-copy">Hmm, I tried it as well now, and found no speed difference. Ran several tests, sometimes your expression won, sometimes mine. Difference was always very small.</span>
<span class="comment-copy">Yeah. It was around 3 micro secs slow</span>
