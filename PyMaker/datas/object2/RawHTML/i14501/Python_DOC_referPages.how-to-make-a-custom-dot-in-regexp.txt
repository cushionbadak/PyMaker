<div class="post-text" itemprop="text">
<p>The normal dot match all of characters except line break. If I want to match all of characters include line break, I can use [\s\S](just an example) to get the right result. </p>
<p>But how about some cases like " match all of the characters except ';' "?  </p>
<p>or " match all of the characters except 'A' and 'b' and 'c' "? </p>
<p>how can I custom a dot with a * to match what I want?</p>
</div>
<div class="post-text" itemprop="text">
<p>To get dot to match a linebreak as well, use <code>re.DOTALL</code> as an option. For example:</p>
<pre><code>In [4]: print re.match("A.+B","A\n\nB")
None

In [5]: print re.match("A.+B","A\n\nB",re.DOTALL)
&lt;_sre.SRE_Match object at 0x10c5d17e8&gt;
</code></pre>
<p>This changes <em>all</em> dots in your expression, though. Alternatively, you could use (|) to only match "\n" in some cases:</p>
<pre><code>In [6]: print re.match("A(?:\n|.)+B","A\n\nB")
&lt;_sre.SRE_Match object at 0x10ca5feb8&gt;
</code></pre>
<p>Here we use ?: in order to keep from making a group. Each <code>(?:\n|.)</code> will match a dot <em>or</em> a newline.</p>
<p>For the other things, you generally use "[]" or "[^]" to match only a set of things, or anything but a set of things. So for anything but ';', use "[^;]", and for all characters except A, b, and c, use "[^Abc]", while to <em>only</em> match those three, use "[Abc]". There are also all sorts of shorthand things, like \s for whitespace, and \S for non-whitespace. Looking through <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow">the <code>re</code> documentation</a> is really helpful here.</p>
</div>
<div class="post-text" itemprop="text">
<p>The Python <a href="https://pypi.python.org/pypi/regex" rel="nofollow">regex</a> module and some other regex flavor support sets operations in character classes beyond simple negation.</p>
<p>For example, in Python regex (but not in re in the standard library):</p>
<pre><code>&gt;&gt;&gt; import regex
&gt;&gt;&gt; s='abcdefghijklmnopqrstuvwxyz'
&gt;&gt;&gt; regex.findall(r'(?V1)[[a-z]--[c-o]]', s)
['a', 'b', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
</code></pre>
<p>The character class <code>[a-z]</code> would usually find all ascii lower case letters. In this case, not including any between <code>[c-o]</code> because they were subtracted.</p>
<p>The sense of that can be negated as well:</p>
<pre><code>&gt;&gt;&gt; regex.findall(r'(?V1)[^[a-z]--[c-o]]', s)
['c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o']
</code></pre>
<p>Or, no vowels:</p>
<pre><code>&gt;&gt;&gt; regex.findall(r'(?V1)[[a-zA-Z]--[aAeEiIoOuU]]', s)
['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']
</code></pre>
</div>
<span class="comment-copy">Regex flavor vary dramatically. Some (.NET, Python's regex) support sets. Which regex? Awk, old Python, sed, Javascript not even close to being able to do this...</span>
<span class="comment-copy">@dawg: He's tagged this Python, so he presumably doesn't care about POSIX regex, JavaScript, etc. Also, which old Python didn't support sets of characters as a character class? I'm pretty sure Python's regex engine borrowed its syntax from perl right from the start. As has JavaScripts. Not to mention that even POSIX basic regexes support it. I can't think of any flavor that <i>doesn't</i>.</span>
<span class="comment-copy">@abarnert: I meant the form of <code>/[[a-z]--[aeiou]]/</code> as an example which POSIX, sed, Python re, definitely do not support as a shorthand for all non-vowel letters.</span>
<span class="comment-copy">@dawg: Sure, but he didn't ask for that, he asked for all characters except <code>;</code>, or all characters except <code>A</code>, <code>B</code>, and <code>C</code>, and all of them support <code>[^;]</code> and <code>[^ABC]</code>. And meanwhile, you said that "Python" supports sets but "old Python" doesn't; Python 3.5 and 1.5 both support <code>[^;]</code> and neither supports <code>[a-z]--[aeiou]</code>; nothing relevant has changed.</span>
<span class="comment-copy">@dawg: Yeah, I think it's just that you're assuming that <code>regex</code> is already "part of Python", while I'm forgetting that it's ever going to be there after being bumped from the release schedule 3 times in a row. :) (Either that, or you've actually got a time machine and can tell me when Matthew will finally be happy with it and check it in. Or maybe something more profitable, like who wins the next World Series.:)</span>
<span class="comment-copy">The <code>re</code> module in the standard library <i>also</i> supports sets. It doesn't support set operations like difference, but then he doesn't need such operations for any of the examples he asked for.</span>
