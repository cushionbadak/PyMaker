<div class="post-text" itemprop="text">
<p>Similar to the system path, I want to offer some convenience in my code allowing a user to specify a file name that could be in one of a handful of paths.</p>
<p>Say I had two or more config paths</p>
<pre><code>['~/.foo-config/', '/usr/local/myapp/foo-config/']
</code></pre>
<p>And my user wants to open <code>bar</code>, (AKA <code>bar.baz</code>)</p>
<ol>
<li><p><strike>Is there a convenient build in way to let <code>open('bar')</code> or <code>open('bar.baz')</code> automatically search these paths for that file in LTR order of precedence? Eg, will temporary adjusting my <code>sys.path</code> to only be these directories do this for me?</strike></p></li>
<li><p>Else, how would you suggest implementing a PATH-like searching open-wrapper?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><code>open</code> doesn't get into that kind of logic. If you want, write a wrapper function that uses <code>os.path.join</code> to join each member of <code>sys.path</code> to the parameter filename, and tries to open them in order, handling the error that occurs when no such file is found. </p>
<p>I'll add that, as another user stated, this is kind of a misuse of <code>sys.path</code>, but this function would work for any list of paths. Indeed, maybe the nicest option is to use the environment variables suggested by another user to specify a colon-delimited list of config directories, which you then parse and use within your search function. </p>
</div>
<div class="post-text" itemprop="text">
<p>As other people already mentioned: <code>sys.path</code> <em>only</em> affects the module search path, i.e. it's relevant for importing Python modules, but not at all for <code>open()</code>.</p>
<p>I would suggest separating the logic for searching the paths in order of precedence and opening the file, because that way it's easier to <strong>test</strong> and <strong>read</strong>.</p>
<p>I would do something like this:</p>
<pre><code>import os

PATHS = ['~/.foo-config/', '/usr/local/myapp/foo-config/']


def find_first(filename, paths):
    for directory in paths:
        full_path = os.path.join(directory, filename)
        if os.path.isfile(full_path):
            return full_path


def main():
    filename = 'file.txt'
    path = find_first(filename, PATHS)
    if path:
        with open(path) as f:
            print f
    else:
        print "File {} not found in any of the directories".format(filename)


if __name__ == '__main__':
    main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>environmental variables</strong></p>
<p>say your app is named foo ... in the readme tell the user to use the FOO_PATH environmental variable to specify the extra paths</p>
<p>then inside your app do something like</p>
<pre><code> for path in os.environ.get("FOO_PATH",".").split(";"):
     lookfor(os.path.join(path,"somefile.txt"))
</code></pre>
<p>you could wrap it into a generic function</p>
<pre><code>def open_foo(fname):
   for path in os.environ.get("FOO_PATH",".").split(";"):
       path_to_test = os.path.join(path,"somefile.txt")
       if os.path.exists(path_to_test):
              return open(path_to_test)
   raise Exception("No File Found On FOOPATH")
</code></pre>
<p>then you could use it just like normal open</p>
<pre><code>with open_foo("my_config.txt") as f:
     print f.read()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Extract from Python Standard Library documentation for <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow">open built-in function</a>:</p>
<p><em><code>open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)</code></em></p>
<p><em>...file is either a string or bytes object giving the pathname (absolute or <strong>relative to the current working directory</strong>) of the file to be opened ...</em></p>
<p>Explicitely, open does not bring anything to automagically find a file : if path is not absolute, it is only searched in current directory.</p>
<p>So you will have to use a custom function or a custom class for that. For example:</p>
<pre><code>class path_opener(object):
    def __init__(self, path = [.]):
        self.path = path
    def set(self, path):
        self.path = path
    def append(self, path):
        self.path.append(path)
    def extent(self, path):
        self.path.extend(path)
    def find(self, file):
        for folder in self.path:
            path = os.path.join(folder, file)
            if os.path.isfile(path):
                return path
        raise FileNotFoundError()
    def open(self, file, *args, **kwargs):
        return open(self.find(file), *args, **kwargs)
</code></pre>
<p>That means that a file opener will keep its own <em>path</em>, will be initialized by default with current path, will have methods to set, append to or extend its path, and will normaly raise a FileNotFoundError is a file is not found in any of the directories listed in its path.</p>
<p>Usage :</p>
<pre><code>o = path_opener(['~/.foo-config/', '/usr/local/myapp/foo-config/'])
with o.open('foo') as fd:
    ...
</code></pre>
</div>
<span class="comment-copy">Not an answer, but FYI: <code>sys.path</code> has nothing to do with the <code>open()</code> builtin. <code>sys.path</code> is about the <code>import</code> statement.</span>
<span class="comment-copy">You peeked my interest about testibility, is it possible to unit test a method that scans paths for a file? woudln't that require a unit test that prepares a set of real directories+files? Do you have any tips for unit testing this kind of thing cleanly?</span>
<span class="comment-copy">Yes, having your test setup create actual directory structures is one way. There's not much to it actually, create the structure in <code>setUp()</code> and remove it again in <code>tearDown()</code>. A different approach would be to mock <code>os.path.isfile()</code> - you'd use something like <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer"><code>unittest.mock.patch()</code></a>` to replace <code>os.path.isfile()</code> with a mock that returns the values you tell it to, and allows you to make assertions on whether is has been called or not.</span>
<span class="comment-copy">A third approach would be to factor out <code>os.path.isfile()</code> entirely from <code>find_first()</code>. So you'd pass a third argument <code>isfile_function</code> to <code>find_first()</code> - in production, that would just be the original <code>os.path.isfile</code>, but in tests it could be a no-op function that just records calls to it and returns a predefined value (this is not unlike the <a href="http://en.wikipedia.org/wiki/Strategy_pattern" rel="nofollow noreferrer">Strategy Pattern</a>).</span>
<span class="comment-copy">Would this handle multiple paths though? Being that FOO_PATH would be like <code>/usr/local/foo/:.</code>?</span>
<span class="comment-copy">whoops forgot to split it :P ... now it should split on <code>;</code> if you want to split on <code>:</code> just change the split character</span>
