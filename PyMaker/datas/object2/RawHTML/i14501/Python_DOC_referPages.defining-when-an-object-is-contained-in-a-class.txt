<div class="post-text" itemprop="text">
<p>From what I have researched most operators and methods can be overridden when creating a class in python. By using <code>__add__(self, other)</code> and others for example.</p>
<p>My "problem" (more like I don't quite understand how it is done) is for verifying is something is in my class I have to obviously use <code>__contains__(self, theThing)</code>.
Alas I thought this should return a boolean value in the code itself, but from example code I have seen, like this:</p>
<pre><code>def __contains__(self, posORname):
     return [node.getId() for node in self.tree if node.getId() == posORname or node.getName() == posORname]
</code></pre>
<p>What I am returning is therefore a tuple containing the Id of where said item is. 
Could someone explain why this is done instead of returning <code>True</code> or <code>False</code>? And if so, shouldn't it be implicitly possible to get the index of an item in a structure by just using in?</p>
<p>Thanks :D</p>
</div>
<div class="post-text" itemprop="text">
<p>For <a href="https://docs.python.org/2/reference/datamodel.html#object.__contains__" rel="nofollow">python2 __contains__</a> or <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow">python3 __contains__</a> both should return true or false. And now the question is what is True and what is False. <a href="https://docs.python.org/3/library/stdtypes.html?highlight=truth#truth-value-testing" rel="nofollow"><strong>Truth value testing</strong></a>. </p>
<p>The following values are considered false:</p>
<ul>
<li>None</li>
<li>False</li>
<li>zero of any numeric type, for example, 0, 0.0, 0j.</li>
<li>any empty sequence, for example, '', (), [].</li>
<li>any empty mapping, for example, {}.</li>
<li>instances of user-defined classes, if the class defines a <strong>bool</strong>() or <strong>len</strong>() method, when that method returns the integer zero or bool value False.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>__contains__()</code></a>  is expected to return a boolean value. In your case, <code>__contains__()</code> is returning a list with any tree nodes that match <code>posORname</code>. Thus, it's basically just a lazy way of implementing <code>__contains__()</code>, because in a boolean context:</p>
<ol>
<li>An empty list is equivalent to <code>False</code>.</li>
<li>A non-empty list is equivalent to <code>True</code>.</li>
</ol>
<p>While you could potentially have <code>__contains__()</code> return a data structure with the index or ID of the matching tree node, the <code>in</code> operator doesn't care; it only exists to check whether or not an item is contained by an object. Also, <code>__contains__()</code> is <a href="https://stackoverflow.com/a/1964949/800579">not intended to be called directly</a>, so relying on it to return such information would be an abuse of the <code>__contains__()</code> method.</p>
<p>Instead, you would be better off implementing an separate method for getting the index/id of a node.</p>
</div>
<div class="post-text" itemprop="text">
<p>The result of <code>__contains__</code> is converted to a boolean according to the usual rules, so that, e.g., empty lists count as False while lists with something in them count as True.  So for your example, if the list has anything in it --- that is, any items match the criteria in that list comprehension --- then the <code>in</code> test will be True.</p>
<p>This auto-conversion-to-bool behavior does not appear to be explicitly documented, and is different from other operators (like <code>&lt;</code> and <code>&gt;</code>), which return what they return without converting to bool.  There is some discussion of the behavior <a href="https://mail.python.org/pipermail/python-ideas/2010-July/007733.html" rel="nofollow">here</a>.</p>
</div>
<span class="comment-copy">thanks Rafael ^^</span>
<span class="comment-copy">Is you goal to find if a class has a specific attribute? Why not attempt to call the attribute and then handle an <code>AttributeError</code> exception when it doesn't exist?</span>
<span class="comment-copy">Its rather I am working with a tree as Abstract Data Type, with "n" children for each node, and therefore instead of having to create a function like: def myTreeContains(self, value) I would like to be able to just call this with an "in", like so: <code>thisTree = Tree() if "Harry" in thisTree:    print("Harry is in the tree")</code></span>
<span class="comment-copy">That a rather odd looking <code>__contains__</code> method. <code>return any(posOrName in [node.getId() or node.getName()] for node in self.tree)</code> would be sufficient. Generally speaking, the contexts where <code>__contains__</code> is used will just look at the boolean value of the list it is returning (empty <code>False</code>, non-empty <code>True</code>), so it's not incorrect but it is doing far more work than necessary.</span>
<span class="comment-copy">ah, I see what you mean, so in short this is just overly complicating it and it basically is True False, thanks :D</span>
<span class="comment-copy">Thanks :D I think I will maybe create a dynamic variable in the namespace of the class for storing the id of the most recent '<b>contains()</b>' call thanks for the info and link :D</span>
<span class="comment-copy">thanks for info and links^^</span>
