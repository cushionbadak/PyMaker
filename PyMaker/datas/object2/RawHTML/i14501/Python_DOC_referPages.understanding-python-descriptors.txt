<div class="post-text" itemprop="text">
<p>I am trying to understand descriptors better.</p>
<p>I don't understand why in the foo method the descriptors <em><code>__get__</code></em> method doesn't get called.</p>
<p>As far as I understand descriptors the <em><code>__get__</code></em> method always get called when I access the objects attribute via dot operator or when I use <code>__getattribute__()</code>.</p>
<p>According to the <a href="https://docs.python.org/2/howto/descriptor.html#descriptor-protocol" rel="nofollow noreferrer">Python documentation</a>:</p>
<pre><code>class RevealAccess(object):
    def __init__(self, initval=None, name='var'):
        self.val = initval
        self.name = name

    def __get__(self, obj, objtype):
        print('Retrieving', self.name)
        return self.val

    def __set__(self, obj, val):
        print('Updating', self.name)
        self.val = val

class MyClass(object):
    x = RevealAccess(10, 'var "x"')
    y = 5

    def foo(self):
        self.z = RevealAccess(13, 'var "z"')
        self.__getattribute__('z')
        print(self.z)

m = MyClass()
m.foo()
m.z # no print
m.x # prints var x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>z</code> is an attribute on the <em>instance</em>, not on the class. The descriptor protocol only applies to attributes retrieved from a class.</p>
<p>From the <a href="https://docs.python.org/3/howto/descriptor.html#invoking-descriptors" rel="nofollow">Descriptor HOWTO</a>:</p>
<blockquote>
<p>For objects, the machinery is in <code>object.__getattribute__()</code> which transforms <code>b.x</code> into <code>type(b).__dict__['x'].__get__(b, type(b))</code>. </p>
</blockquote>
<p>and in the <a href="https://docs.python.org/3/reference/datamodel.html#implementing-descriptors" rel="nofollow"><em>Implementing Descriptors</em> section</a> of the Python Data Model:</p>
<blockquote>
<p>The following methods only apply when an instance of the class containing the method (a so-called <em>descriptor</em> class) appears in an <em>owner</em> class (the descriptor must be in either the ownerâ€™s class dictionary or in the class dictionary for one of its parents). </p>
</blockquote>
<p>Your <code>m.z</code> cannot be found in the class dict; <code>type(m).__dict__['z']</code> does not exist; it is found in <code>m.__dict__['z']</code> instead. Here <code>m</code> is the instance and the <em>owner</em> class is <code>MyClass</code>, and <code>z</code> does not appear in the <em>owner</em> class dictionary.</p>
</div>
<span class="comment-copy">I don't exactly understand what your problem is?</span>
<span class="comment-copy">@user3467349: <code>m.z</code> and <code>m.x</code> are both instances of the class <code>RevealAccess</code>, which implements the descriptor protocol. The OP expected the protocol to be used for both <code>m.z</code> and <code>m.x</code>.</span>
<span class="comment-copy">@user3467349: e.g. you need to understand what the descriptor protocol <i>is</i> before you can answer the question.</span>
<span class="comment-copy">m.z returns exactly the instance that was assigned to it for me, I'm still not sure what the expected output is here?</span>
<span class="comment-copy">Does he mean to call <code>m.z.__getattribute__</code> ? MyClass is not subclassing  RevealClass...</span>
