<div class="post-text" itemprop="text">
<p>Asked my friend to give me an assignment for me to practice. It is:</p>
<blockquote>
<p>If a user enters a string <code>"AAABNNNNNNDJSSSJENDDKEW"</code> the program will return 
  <code>"3AB6NDJ2SJEN2DKEW"</code> and vice versa.</p>
</blockquote>
<p>This what I tried so far:</p>
<pre><code>from collections import Counter
list_user_input =[]
list_converted_output=[]
current_char = 0 #specifies the char it is reading
next_char = 1
cycle = 0 # counts number of loops
char_repeat = 1
prev_char=""
count = 1
user_input = input("Enter your string: ")
user_input_strip = user_input.strip()
user_input_striped_replace = user_input_strip.replace(" ", "").lower()
list_user_input.append(user_input_striped_replace[0:len(user_input_striped_replace)])
print(list_user_input)
print(user_input_striped_replace)
</code></pre>
<p>I have "cleaned" the code so it removes white spaces and keeps it in low cap</p>
<p>Here is where I am stuck - the logics. I was thinking to go the through the string one index at a time and compare the next on to the other. Is this the wright way to go about it? And I'm not even sure about the loop construction.</p>
<pre><code>#counter = Counter(list_user_input)
#print(counter)


#while cycle &lt;= len(user_input_striped_replace):
for letter in user_input_striped_replace:
    cycle+=1
    print("index nr {}, letter: ".format(current_char)+letter +" and cycle : " + str(cycle))
    current_char+=1

    if letter[0:1] == letter[1:2]:
        print("match")


    print("index nr {}, letter: ".format(current_char)+letter +" and cycle : " + str(cycle))
    current_char+=1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>Counter</code> is a good choice for such task but about the rest you can use <code>sorted</code> to sort the items of <code>Counter</code> then use a list comprehension to create the desire list then concatenate with <code>join</code> :</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c=Counter(s)
&gt;&gt;&gt; sor=sorted(c.items(),key=lambda x:s.index(x[0]))
&gt;&gt;&gt; ''.join([i if j==1 else '{}{}'.format(j,i) for i,j in sor])
'3AB7N3D2J3S2EKW'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd do it with <a href="https://docs.python.org/3/library/re.html" rel="nofollow">regular expressions</a>. Have a look at those.</p>
<p>Spoiler:</p>
<pre><code>import re
def encode(s):
    return re.sub(r'(.)\1+', lambda m: str(len(m.group(0)))+m.group(1), s)
def decode(e):
    return re.sub('(\d+)(.)', lambda m: int(m.group(1))*m.group(2), e)

s = "AAABNNNNNNDJSSSJENDDKEW"
e = encode(s)
print(e, decode(e) == s)
</code></pre>
<p>Prints:</p>
<pre><code>3AB6NDJ3SJEN2DKEW True
</code></pre>
<p>Your <em>"and vice versa"</em> sentence sounds like the program needs to detect itself whether to encode or to decode, so here's that (proof of correctness left as an exercise :-)</p>
<pre><code>def switch(s):
    e = re.sub(r'(\D)\1+', lambda m: str(len(m.group(0)))+m.group(1), s)
    d = re.sub('(\d+)(.)', lambda m: int(m.group(1))*m.group(2), s)
    return e if e != s else d
</code></pre>
</div>
<span class="comment-copy">How will getting the answer here help you practice?</span>
<span class="comment-copy">That doesn't handle separate runs of the same letter correctly.</span>
<span class="comment-copy">Thank you both ! Stefan the 1+ part in encode, what does that do ?</span>
<span class="comment-copy"><code>\D</code> means non-digit. The parentheses capture it so I can refer to it with <code>\1</code>. The <code>+</code> says "one or more". Overall, here, this says <i>"a letter that is repreated at least once"</i>.</span>
