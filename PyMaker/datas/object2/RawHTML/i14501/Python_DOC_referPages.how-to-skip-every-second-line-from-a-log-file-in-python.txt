<div class="post-text" itemprop="text">
<p>The file for the code to use contains this bit of data:   </p>
<pre><code>&lt;188&gt; 2005 Sep 22 11:07:38 (FR114W-52-8f-a8) 66.190.168.225 UDP packet - Source:38.113.146.178,20841,WAN - Destination:66.190.168.225,1026,LAN [Drop] - [Inbound Default rule match]
#!^
&lt;189&gt; 2005 Sep 22 11:07:38 (FR114W-52-8f-a8) 66.190.168.225 Device Receive ICMP Packet - Source:192.168.1.201,[Echo Request],LAN - Destination:192.168.1.1,LAN [Receive]
#!^
&lt;189&gt; 2005 Sep 22 11:07:43 (FR114W-52-8f-a8) 66.190.168.225 Device Receive UDP Packet - Source:10.135.48.1,67,WAN - [Drop]
</code></pre>
<p>The code I have so far is:</p>
<pre><code>import re
import string

with open('RouterLogger.log', 'r') as file:
     for line in file:
         words = line.split()
         print words
         print ("IP ", words[6], 'Time ', words[4])
</code></pre>
<p>The output for this code is this:</p>
<pre><code>['#!^&lt;188&gt;', '2005', 'Sep', '22', '11:07:38', '(FR114W-52-8f-a8)', '66.190.168.225', 'UDP', 'packet', '-', 'Source:38.113.146.178,20841,WAN', '-', 'Destination:66.190.168.225,1026,LAN', '[Drop]', '-', '[Inbound', 'Default', 'rule', 'match]']   

('IP ', '66.190.168.225', 'Time ', '11:07:38')

['\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00#!^']   
Traceback (most recent call last):   
  File "/Users/PythonTutorials/print_line_with_match.py", line 10, in &lt;module&gt;   
    print ("IP ", words[6], 'Time ', words[4])   
IndexError: list index out of range   

Process finished with exit code 1
</code></pre>
<p>I would like to know how can I skip every second line to avoid this error. I know every other line causes an error because I get a <code>Traceback</code> error as soon as it hits the second line.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can skip every second line explicitly:</p>
<pre><code>evenline = False
with open('RouterLogger.log', 'r') as file:
     for line in file:
         if not evenline:
             words = line.split()
             print words
             print ("IP ", words[6], 'Time ', words[4])
         evenline = not evenline
</code></pre>
<p>Or you can (lazily) slice it with <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow"><code>islice</code></a>:</p>
<pre><code>with open('RouterLogger.log', 'r') as file:
     for line in itertools.islice(file, 0, None, 2):
         words = line.split()
         print words
         print ("IP ", words[6], 'Time ', words[4])
</code></pre>
<p>Or you can iterate over pairs of lines instead of lines, using the <code>pairwise</code> function in the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow"><code>itertools</code> recipes</a>:</p>
<pre><code>with open('RouterLogger.log', 'r') as file:
     for first, second in pairwise(file):
         words = first.split()
         print words
         print ("IP ", words[6], 'Time ', words[4])
</code></pre>
<p>However, are you absolutely sure that your format is "every second line"? If not, maybe you want to skip lines that start with <code>#</code>:</p>
<pre><code>with open('RouterLogger.log', 'r') as file:
     for line in file:
         if not line.startswith('#'):
             words = line.split()
             print words
             print ("IP ", words[6], 'Time ', words[4])
</code></pre>
<p>â€¦ or <code>try</code> every line and skip the ones without enough words:</p>
<pre><code>with open('RouterLogger.log', 'r') as file:
     for line in file:
         try:
             words = line.split()
             print words
             print ("IP ", words[6], 'Time ', words[4])
         except IndexError:
             pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Rather than skipping a line during your for loop you can handle the exception by modifying your code to:</p>
<pre><code>import re
import string

with open('RouterLogger.log', 'r') as file:
     for line in file:
         words = line.split()
         print words
         try:
            print ("IP ", words[6], 'Time ', words[4])
         except IndexError:
            continue
</code></pre>
</div>
<span class="comment-copy">Surprised that you haven't suggested this - <code>open('log.txt').readlines()[::2]</code>. What edge case am I missing ?</span>
<span class="comment-copy">@fixxxer: The case where you don't want to read the whole file into memory at once, or don't want to leak the file descriptor?</span>
<span class="comment-copy">1. <i>light bulb</i> but how large is the file?  2. How so?</span>
<span class="comment-copy">@fixxxer: 1. I have no idea. But the nice thing about not using <code>readlines</code> is that I don't have to guess; I can write code that works as well on a 36GB file as on a 36KB file. 2. You're <code>open</code>ing a file, and never calling <code>close</code>. You're relying on the garbage collector to find the file and close it for you, which means you're inviting bugs in your code for no reason. This is explained in <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">the tutorial</a>.</span>
