<div class="post-text" itemprop="text">
<p>I have a tab delimited text file with each record having 10 columns as follows:</p>
<pre><code>p001    64      20141209      meals (attendees)    ML   ENTER   Entertainment   xyz Restaurants      6.0     "_e' Restaurants (123) 456-7890 \r\n          FORUM \r\n     ,Around \r\n\r\n':33 113-2 \r\n\r\n 8440 XYZ09'15       1:11PM \r\n\r\n   1 Burger          6.00 \r\n\r\n    SSIONS      6.00 \r\n    TOTAL PAID    6 .00 \r\n    XXXXXXXXXXX2012 XX/XX \r\n    XYZ EXPRESS
6.00 \r\n\r\n\r\n  7,-10( YOU! FOR DINING WITH US! \r\n\r\n         113-2 \r\n\r\nYour r is: 840     \r\n"
</code></pre>
<p>P.S: The last column has text enclosed in "". And my 1st column is NOT unique.</p>
<p>I would like to convert this text file into a csv file such that I only pick the data from the 1st, 2nd, 8th, 9th and 10th columns of the record. In addition, all the data should be enclosed in "".</p>
<p>For example, the above record should be converted to the following line in the output csv file:</p>
<pre><code>"p001","64","xyz Restaurants","6.0","_e' Restaurants (123) 456-7890 \r\n          FORUM \r\n     ,Around \r\n\r\n':33 113-2 \r\n\r\n 8440 XYZ09'15       1:11PM \r\n\r\n   1 Burger          6.00 \r\n\r\n    SSIONS      6.00 \r\n    TOTAL PAID    6 .00 \r\n    XXXXXXXXXXX2012 XX/XX \r\n    XYZ EXPRESS
    6.00 \r\n\r\n\r\n  7,-10( YOU! FOR DINING WITH US! \r\n\r\n         113-2 \r\n\r\nYour r is: 840     \r\n"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work for you.  Note that this uses the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow">csv</a> library for both input and output, we just change the text delimiter.  <a href="https://docs.python.org/3/library/csv.html" rel="nofollow">CSV</a> should automatically escape your quote characters when you write the file.</p>
<pre><code>import csv
try:
    with open(r'input.tsv', 'r', newline='\n') as in_f, \
         open(r'output.csv', 'w', newline='\n') as out_f:
        reader = csv.reader(in_f, delimiter='\t')
        writer = csv.writer(out_f, delimiter=',', quoting=csv.QUOTE_ALL)  # Quoting added per comment from @Rob.
        for li in reader:
            try:
                writer.writerow([li[0], li[1], li[2], li[7], li[8], li[9],])
            except IndexError:  # Prevent errors on blank lines.
                pass
except IOError as err:
    print(err)
</code></pre>
<p>I wasn't able to parse out where the tabs should be in your sample data (as opposed to spaces), but testing it with the following data for <code>input.tsv</code>:</p>
<pre><code>1   2   3   4   5   6   7   8   9   10
11  12  13  14  15  16  17  18  19  20
21  22  23  24  25  26  27  28  29  30
</code></pre>
<p>Will generate the following results in <code>output.csv</code>:</p>
<pre><code>"1","2","3","8","9","10"
"11","12","13","18","19","20"
"21","22","23","28","29","30"
</code></pre>
<hr/>
<h1>Update</h1>
<p>Note that the update in the code to add <code>quoting=csv.QUOTE_ALL</code> was per a suggestion in the comments from Rob.  Thanks for the catch!</p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/13992971/reading-and-parsing-a-tsv-file-then-manipulating-it-for-saving-as-csv-efficie">reading and parsing a TSV file, then manipulating it for saving as CSV (*efficiently*)</a></span>
<span class="comment-copy">I think you missed the « <i>all the data should be enclosed in ""</i> ». Try <code>csv.writer(out_f, delimiter=',', quoting=csv.QUOTE_ALL)</code>.</span>
<span class="comment-copy">@Rob - Added to the code.  Thanks for the catch.</span>
