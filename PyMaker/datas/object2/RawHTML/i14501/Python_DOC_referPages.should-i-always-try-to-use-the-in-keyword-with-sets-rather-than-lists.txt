<div class="post-text" itemprop="text">
<p>Which approach is better? Using a tuple, like:</p>
<pre><code>if number in (1, 2):
</code></pre>
<p>or a list, like:</p>
<pre><code>if number in [1, 2]:
</code></pre>
<p>Which one is recommended for such uses and why (both logical and performance wise)? </p>
</div>
<div class="post-text" itemprop="text">
<p>The CPython interpreter <em>replaces the second form with the first</em>.</p>
<p>That's because loading the tuple from a constant is one operation, but the list would be 3 operations; load the two integer contents and build a new list object.</p>
<p>Because you are using a list literal that isn't otherwise reachable, it is substituted for a tuple:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(compile('number in [1, 2]', '&lt;stdin&gt;', 'eval'))
  1           0 LOAD_NAME                0 (number)
              3 LOAD_CONST               2 ((1, 2))
              6 COMPARE_OP               6 (in)
              9 RETURN_VALUE        
</code></pre>
<p>Here the second bytecode loads a <code>(1, 2)</code> tuple as a constant, in <em>one</em> step. Compare this to creating a list object not used in a membership test:</p>
<pre><code>&gt;&gt;&gt; dis.dis(compile('[1, 2]', '&lt;stdin&gt;', 'eval'))
  1           0 LOAD_CONST               0 (1)
              3 LOAD_CONST               1 (2)
              6 BUILD_LIST               2
              9 RETURN_VALUE        
</code></pre>
<p>Here N+1 steps are required for a list object of length N.</p>
<p>This substitution is a CPython-specific peephole optimisation; see the <a href="http://hg.python.org/cpython/file/66d6fa61ac38/Python/peephole.c#l84" rel="nofollow noreferrer"><code>Python/peephole.c</code> source</a>. For <strong>other</strong> Python implementations then, you want to stick with immutable objects instead.</p>
<p>That said, the <em>best</em> option when using Python 3.2 and up, is to use a <em>set literal</em>:</p>
<pre><code>if number in {1, 2}:
</code></pre>
<p>as the peephole optimiser will replace that with a <code>frozenset()</code> object and membership tests against sets are O(1) constant operations:</p>
<pre><code>&gt;&gt;&gt; dis.dis(compile('number in {1, 2}', '&lt;stdin&gt;', 'eval'))
  1           0 LOAD_NAME                0 (number)
              3 LOAD_CONST               2 (frozenset({1, 2}))
              6 COMPARE_OP               6 (in)
              9 RETURN_VALUE
</code></pre>
<p>This optimization was added in <a href="https://docs.python.org/3/whatsnew/3.2.html#optimizations" rel="nofollow noreferrer">Python 3.2</a> but wasn't backported to Python 2.</p>
<p>As such, the Python 2 optimiser doesn't recognize this option and the cost of building either a <code>set</code> or <code>frozenset</code> from the contents is almost guaranteed to be more costly than using a tuple for the test.</p>
<p>Set membership tests are O(1) and fast; testing against a tuple is O(n) worst case. Although testing agains a set has to calculate the hash (higher constant cost, cached for immutable tupes), the cost for testing against a tuple <em>other than the first element</em> is always going to be higher. So on average, sets are easily faster:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('1 in (1, 3, 5)', number=10**7)  # best-case for tuples
0.21154764899984002
&gt;&gt;&gt; timeit.timeit('8 in (1, 3, 5)', number=10**7)  # worst-case for tuples
0.5670104179880582
&gt;&gt;&gt; timeit.timeit('1 in {1, 3, 5}', number=10**7)  # average-case for sets
0.2663505630043801
&gt;&gt;&gt; timeit.timeit('8 in {1, 3, 5}', number=10**7)  # worst-case for sets
0.25939063701662235
</code></pre>
</div>
<span class="comment-copy">Third option: <code>set</code> (which has a faster membership test).</span>
<span class="comment-copy">CPython will do some internal optimisation and store your list literal as a tuple anyway...</span>
<span class="comment-copy">Fourth option: <code>frozenset</code>, which has same membership test cost as set, <code>O(1)</code>, but because it's immutable, the python interpreter knows the exact size of the hash table it needs to allocate, rather than leaving room for additional elements.</span>
<span class="comment-copy">@IceArdor: but only in Python 3; using a set literal or <code>frozenset([...])</code> expression in Python 2 means the object has to be created first, an operation more costly than the membership test against a tuple of equal length.</span>
<span class="comment-copy">@sapam: in which case a simple equality test will beat both. You need to take the <i>average cost</i> into account here, not the best-case scenario. For 2 elements or more, the set wins. Provided it is a constant stored with the bytecode.</span>
<span class="comment-copy">I've heard there's some youtube video available by a leading Python expert that explains all the optimisations that (C)Python can do... :p</span>
<span class="comment-copy">@JonClements: <i>some</i>, not all. :-P</span>
<span class="comment-copy">In Python 2: <code>set([1, 2])</code></span>
<span class="comment-copy">@IceArdor: No, because the <b>cost</b> of building that set is greater than the cost of testing against a tuple. The tuple test is O(N) worst case, while creating the set is guaranteed to cost O(N), plus the membership test. This isn't about literal syntax, this is about the optimizer <i>recognising</i> you can replace the set with a <code>frozenset</code> constant.</span>
<span class="comment-copy">Many Python programs that really care about efficiency will pre-build the data structure, regexp, etc. that is being matched. So if <code>ACCEPTABLE = {1,2}</code> is pre-defined (as a global or phantom kwarg), the only overhead is the testing, not the construction of what's being tested against.</span>
