<div class="post-text" itemprop="text">
<p>My program utilises Qt's <code>QFileSystemWatcher</code> function to monitor a network directory (not on the local machine itself) for changes, and then run a script when a change is found. This function performs as required for the most part. The program is designed to run 24/7, which has raised some issues using this particular function.</p>
<p>The error which is causing issues is as follows:</p>
<pre><code>QFileSystemWatcher: FindNextChangeNotification failed!! (The specified network name is no longer available.)
</code></pre>
<p>The functionality I'd like to implement is as follows:</p>
<ol>
<li>Build in error handling surrounding network availability for <code>QFileSystemWatcher</code></li>
<li>If the network becomes unavailable and the error is raised, go to <code>Script()</code></li>
<li>Run <code>Script()</code> for handling the unavailable network</li>
</ol>
<p>Given that the <code>QFileSystemWatcher</code> function is established in the initialisation of the program, I'm not sure how to go about error handling. Here's the basic outline of my current code:</p>
<pre><code>class Main(QMain, Ui_Main):
    def __init__(self, parent=None):
        super(Main, self).__init__(parent)
        self.setupUi(self)

        self.DirectoryWatcher = QtCore.QFileSystemWatcher([r'U:\NetworkAddress\Directory'])
        self.DirectoryWatcher.directoryChanged.connect(self.GoToThisDirectory)

    def GoToThisDirectory(self):
        print("foo")
</code></pre>
<p>Is there a way to explicitly establish error handling for the <code>'FindNextChangeNotification'</code> error? Any input would be greatly appreciated!</p>
</div>
<div class="post-text" itemprop="text">
<p>As per ekhumoro's comments above, I've managed to solve this question using both the qInstallMsgHandler and sys.excepthook functions.</p>
<pre><code>import sys
import os
from PySide.QtCore import qInstallMsgHandler

def myCustomHandler(ErrorType, ErrorContext):
    print("Qt error found.")
    print("Error Type: " + str(ErrorType))
    print("Error Context: " + str(ErrorContext))

    #Error logging code
    #Error emailing code

    os.execv(sys.executable, [sys.executable] + sys.argv)

qInstallMsgHandler(myCustomHandler)

def ErrorHandling(ErrorType, ErrorValue, TraceBack):
    print("System error found.")
    print("Error Type: " + str(ErrorType))
    print("Error Value: " + str(ErrorValue))
    print("Traceback: " + str(TraceBack))

    #Error logging code
    #Error emailing code

    os.execv(sys.executable, [sys.executable] + sys.argv)

sys.excepthook = ErrorHandling

#Rest of the script
</code></pre>
<p>My solution addresses Qt and Python/system-related errors separately, but handles them in the same way. The error is logged in a .log file, emailed to the system administrator and the software is restarted. Thanks for guiding me in the right direction ekhumoro!</p>
</div>
<span class="comment-copy">I forgot to mention the OS! It's running on Windows 7 64-bit.</span>
<span class="comment-copy">If you want to work around this, you'll probably have to do something hackish and use <a href="http://doc.qt.io/qt-4.8/qtglobal.html#qInstallMsgHandler" rel="nofollow noreferrer">qInstallMsgHandler</a> to detect the error messages.</span>
<span class="comment-copy">Thanks @ekhumoro, much appreciated as always. I've tried putting my entire program in a 'while True' loop, with an exception handler for Exception, OSError, SystemError and WindowsError. Do you think this could be a workable solution, or should I look more seriously at qInstallMsgHandler?</span>
<span class="comment-copy">The <code>FindNextChangeNotification</code> message is produced Qt, so it will never raise an error that can be caught by a Python <code>try/except</code> block. AFAIK, the only way to detect it is via <code>qInstallMsgHandler</code>, which could allow you to raise a custom exception of your own. As for the while-loop you suggested: that is not the way to do things. Take a look at <a href="https://docs.python.org/3/library/sys.html#sys.excepthook" rel="nofollow noreferrer">sys.excepthook</a>, instead.</span>
<span class="comment-copy">I had a feeling the FindNextChangeNotification exception resided outside of Python :( I'll delve more deeply into qInstallMsgHandler then, and have a look at sys.excepthook as well, thanks!</span>
