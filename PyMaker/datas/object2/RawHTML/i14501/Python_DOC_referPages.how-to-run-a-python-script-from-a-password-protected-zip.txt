<div class="post-text" itemprop="text">
<p>I know python modules/scripts can be run from within a zip archive, as outlined here: 
<a href="https://www.python.org/dev/peps/pep-0441/" rel="nofollow">https://www.python.org/dev/peps/pep-0441/</a>
and
<a href="https://blogs.gnome.org/jamesh/2012/05/21/python-zip-files/" rel="nofollow">https://blogs.gnome.org/jamesh/2012/05/21/python-zip-files/</a></p>
<p>But my question is:</p>
<p>Is it possible to password protect this archive or .pyz file and run it with another small python script that will send the password and then run the <code>__main__.py</code> ?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>I needed something like this for myself, so I made it. You need the module found here: <a href="https://github.com/Dakkaron/ArchiveImporter" rel="nofollow noreferrer">https://github.com/Dakkaron/ArchiveImporter</a></p>
<p>Then you can just use it like this:</p>
<pre><code>python ArchiveImporter.py [zipfile] [-p=password] [args...]
</code></pre>
<p>Works for both Python2 and Python3.</p>
<p>The module can also be used from code:</p>
<pre><code># First import the ArchiveImporter module
import ArchiveImporter
# Then add the password encrypted file you want to import from using addZip(zippath, password)
ArchiveImporter.addZip("test.pyz", "password")
# Now import modules from the archive as usual
import testmod
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code that manages the import is inside the <code>zipimport</code> module.
Reading the archive is done in the function <a href="https://github.com/python/cpython/blob/1aacc96906ef710139722ebda529ed8500c369de/Modules/zipimport.c#L1062" rel="nofollow"><code>getdata</code></a>
It supposes that the file is unencrypted by decompressing it (see <a href="https://github.com/python/cpython/blob/1aacc96906ef710139722ebda529ed8500c369de/Modules/zipimport.c#L1162" rel="nofollow">here</a>).</p>
<p>So no, unfortunately it does not seem possible to use encrypted file directly from the command line. However you can imagine a wrapper that do this by using <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow">importlib</a> (an <a href="http://thomassileo.com/blog/2012/12/21/dynamically-load-python-modules-or-classes/" rel="nofollow">example</a>).</p>
</div>
