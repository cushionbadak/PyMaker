<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/406230/regular-expression-to-match-a-line-that-doesnt-contain-a-word">Regular expression to match a line that doesn't contain a word?</a>
<span class="question-originals-answer-count">
                    28 answers
                </span>
</li>
</ul>
</div>
<p>I need a regex that will match the following line:</p>
<pre><code>{"httpStatus": "OK", "payload": {"status": "OK"}, "httpCode": 200}
</code></pre>
<p>but not</p>
<pre><code>{"httpStatus": "OK", "payload": {"status": "OK", "config": {}}, "httpCode": 200}
</code></pre>
<p>So basically it should match the string if it not contains <strong>config</strong></p>
<p>For checking if the string contains <strong>status</strong> the regex is:</p>
<pre><code>(?=\"status\": \"OK\")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need to use regex you can use the following negative look ahead based regex :</p>
<pre><code>^((?!"config").)*$
</code></pre>
<p><a href="https://regex101.com/r/vD7qN2/1" rel="nofollow">Demo</a></p>
<p>Along side the good notes by @Jerry and @nhahtdh You may note that this regex doesn't consider the type of words and i match the dictionaries that has <code>config</code> in values.(you can see the detail in <a href="https://regex101.com/r/vD7qN2/1" rel="nofollow">demo</a>) as a better solution you can use <code>json</code> module.</p>
<p>The following recursion function will do the task for any nested dictionary :</p>
<pre><code>&gt;&gt;&gt; def checker(s,val):
...    for k in s:
...        if k==val:
...           return False
...        elif isinstance(s[k],dict):
...           return checker(s[k],val)
...    return True
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; s="""{"httpStatus": "OK", "payload": {"status": "OK"}, "httpCode": 200}"""
&gt;&gt;&gt; js=json.loads(s)
&gt;&gt;&gt; checker(js,'config')
True

&gt;&gt;&gt; s="""{"httpStatus": "OK", "payload": {"status": "OK", "config": {}}, "httpCode": 200}"""
&gt;&gt;&gt; js=json.loads(s)
&gt;&gt;&gt; checker(js,'config')
False
</code></pre>
<p>And a nested dictionary :</p>
<pre><code>&gt;&gt;&gt; s="""{"httpStatus": "OK", "payload": {"status": "OK", "sts":{"nested":{"config": {}}}}, "httpCode": 200}"""
&gt;&gt;&gt; 
&gt;&gt;&gt; js=json.loads(s)
&gt;&gt;&gt; checker(js,'config')
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Parse the input as JSON using the <a href="https://docs.python.org/3/library/json.html" rel="nofollow"><code>json</code> module</a>:</p>
<pre><code>import json

s = """{"httpStatus": "OK", "payload": {"status": "OK"}, "httpCode": 200}"""
j = json.loads(s)
if "config" not in j:
    print("match")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do all the other fields have to be there in that exact form, or does it suffice that it does not contain <code>"config"</code>?</p>
<pre><code>import re
n = str({"httpStatus": "OK", "payload": {"status": "OK", "config": {}}, "httpCode": 200})
print len(re.findall("config", n)) == 0
</code></pre>
</div>
<span class="comment-copy">Why not use a JSON parser?</span>
<span class="comment-copy">Iterate on the dictionary keys, once you find <code>config</code>, you don't match.</span>
<span class="comment-copy">It's not possible to match JSON-Data with regular expressions.</span>
<span class="comment-copy">@alexm "I need to use regex". Why?</span>
<span class="comment-copy">@alexm "I need to use regex" - You're opposing to finding robust solutions to your problem. :)</span>
<span class="comment-copy">Thanks this worked perfectly</span>
<span class="comment-copy">@alexm Welcome ;)</span>
<span class="comment-copy">@alexm Just as a side note, this method would be one of the slowest out there, even in the 'regex realm'. Also, the above would avoid a match if the string contains a word containing <code>config</code>, for example <code>nonconfig</code> or <code>sideconfigurations</code> and the likes.</span>
<span class="comment-copy">This is a terrible solution. There is no differentiation between data and key here (apart from what Jerry has mentioned about wrong keys).</span>
<span class="comment-copy">@alexm Checkout the edit!</span>
