<div class="post-text" itemprop="text">
<p>There is already a <a href="https://pypi.python.org/pypi/multi_key_dict/1.0.2" rel="nofollow">multi key dict</a> in python and also a multivalued dict. I needed a python dictionary which is both:</p>
<p>example:</p>
<pre><code># probabilistically fetch any one of baloon, toy or car
d['red','blue','green']== "baloon" or "car" or "toy"  
</code></pre>
<p>Probability of  d['red']==d['green'] is high and Probability of d['red']!=d['red'] is low but possible</p>
<p>the single output value should be probabilistically determined (fuzzy) based on a rule from keys 
eg:in above case rule could be if keys have both "red" and "blue" then return "baloon" 80% of time if only blue then return "toy" 15% of time  else "car" 5% of time.</p>
<p>The setitem method should be designed such that following is possible:</p>
<pre><code>d["red", "blue"] =[
    ("baloon",haseither('red','green'),0.8),
    ("toy",.....)
    ,....
]
</code></pre>
<p>Above  assigns multiple values to the dictionary with a predicate function and corresponding probability. And instead of the assignment list above even a dictionary as assignment would be preferable:</p>
<pre><code>d["red", "blue"] ={ 
    "baloon": haseither('red','green',0.8),
    "toy": hasonly("blue",0.15),
    "car": default(0.05)
}
</code></pre>
<p>In the above baloon will be returned 80% of time if "red" or green is present
, return toy 15% of time if blue present and return car 5% of time without any condition.</p>
<p>Are there any existing data structures which  already satisfy the above requirements in python? if no then how can multikeydict code be modified to meet the above requirements in python?</p>
<p>if using dictionary then there can be a configuration file or use of appropriate nested decorators which configures the above probabilistic predicate logics without having to hard code if \else statements .</p>
<p>Note: Above is a useful automata  for a  rule based auto responder application hence do let me know if any similar rule based framework is available in python even if it does not use the dictionary structure?</p>
</div>
<div class="post-text" itemprop="text">
<h1>Simulated MultiKey Dictionary</h1>
<p><a href="https://pypi.python.org/pypi/multi_key_dict" rel="nofollow noreferrer"><code>multi_key_dict</code></a> did not allow <a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer"><code>__getitem__()</code></a> with multiple keys at onces... </p>
<p>(e.g. <code>d["red", "green"]</code>) </p>
<p>A multi key can be simulated with <a href="https://docs.python.org/3.5/library/stdtypes.html#tuples" rel="nofollow noreferrer"><code>tuple</code></a> or <a href="https://docs.python.org/3.5/library/stdtypes.html#set" rel="nofollow noreferrer"><code>set</code></a> keys. If order does not matter, <a href="https://docs.python.org/3.5/library/stdtypes.html#set" rel="nofollow noreferrer"><code>set</code></a> seems the best (actually the hashable <a href="https://docs.python.org/3.5/library/stdtypes.html#frozenset" rel="nofollow noreferrer"><code>frozen set</code></a>, so that [<code>"red", "blue"]</code> is the same a <code>["blue", "red"]</code>.</p>
<h1>Simulated MultiVal Dictionary</h1>
<p>Multi values are inherent by using certain datatypes, it can be <a href="https://docs.python.org/3.5/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">any <em>storage</em> element</a> that may be conveniently indexed.  A standard <a href="https://docs.python.org/3.5/library/stdtypes.html#dict" rel="nofollow noreferrer"><code>dict</code></a> should provide that.</p>
<h1>Non-determinism</h1>
<p>Using a probability distribution defined by the rules and assumptions<sup>1</sup>, non-deterministic selection is performed using <a href="https://docs.python.org/3/library/random.html#examples-and-recipes" rel="nofollow noreferrer">this recipe</a> from the python docs.</p>
<h1><code>MultiKeyMultiValNonDeterministicDict</code> Class</h1>
<p><sup>What a name.   \o/<sup><sup>-nice!</sup></sup></sup></p>
<p>This class takes multiple keys that define a probabilistic rule set of  multiple values.  During item creation (<a href="https://docs.python.org/3/reference/datamodel.html#object.__setitem__" rel="nofollow noreferrer"><code>__setitem__()</code></a>) all value probabilities are precomputed for all combinations of keys<sup>1</sup>.  During item access (<a href="https://docs.python.org/3/reference/datamodel.html#object.__getitem__" rel="nofollow noreferrer"><code>__getitem__()</code></a>) the precomputed probability distribution is selected and the result is evaluated based on a random weighted selection.</p>
<h2>Definition</h2>
<pre><code>import random
import operator
import bisect
import itertools

# or use itertools.accumulate in python 3
def accumulate(iterable, func=operator.add):
    'Return running totals'
    # accumulate([1,2,3,4,5]) --&gt; 1 3 6 10 15
    # accumulate([1,2,3,4,5], operator.mul) --&gt; 1 2 6 24 120
    it = iter(iterable)
    try:
        total = next(it)
    except StopIteration:
        return
    yield total
    for element in it:
        total = func(total, element)
        yield total

class MultiKeyMultiValNonDeterministicDict(dict):

    def key_combinations(self, keys):
        """get all combinations of keys"""
        return [frozenset(subset) for L in range(0, len(keys)+1) for subset in itertools.combinations(keys, L)]

    def multi_val_rule_prob(self, rules, rule):
        """
        assign probabilities for each value, 
        spreading undefined result probabilities
        uniformly over the leftover results not defined by rule.
        """
        all_results = set([result for result_probs in rules.values() for result in result_probs])
        prob = rules[rule]
        leftover_prob = 1.0 - sum([x for x in prob.values()])
        leftover_results = len(all_results) - len(prob)
        for result in all_results:
            if result not in prob:
                # spread undefined prob uniformly over leftover results
                prob[result] = leftover_prob/leftover_results
        return prob

    def multi_key_rule_prob(self, key, val):
        """
        assign probability distributions for every combination of keys,
        using the default for combinations not defined in rule set
        """ 
        combo_probs = {}
        for combo in self.key_combinations(key):
            if combo in val:
                result_probs = self.multi_val_rule_prob(val, combo).items()
            else:
                result_probs = self.multi_val_rule_prob(val, frozenset([])).items()
            combo_probs[combo] = result_probs
        return combo_probs

    def weighted_random_choice(self, weighted_choices):
        """make choice from weighted distribution"""
        choices, weights = zip(*weighted_choices)
        cumdist = list(accumulate(weights))
        return choices[bisect.bisect(cumdist, random.random() * cumdist[-1])]

    def __setitem__(self, key, val):
        """
        set item in dictionary, 
        assigns values to keys with precomputed probability distributions
        """

        precompute_val_probs = self.multi_key_rule_prob(key, val)        
        # use to show ALL precomputed probabilities for key's rule set
        # print precompute_val_probs        

        dict.__setitem__(self, frozenset(key), precompute_val_probs)

    def __getitem__(self, key):
        """
        get item from dictionary, 
        randomly select value based on rule probability
        """
        key = frozenset([key]) if isinstance(key, str) else frozenset(key)             
        val = None
        weighted_val = None        
        if key in self.keys():
            val = dict.__getitem__(self, key)
            weighted_val = val[key]
        else:
            for k in self.keys():
                if key.issubset(k):
                    val = dict.__getitem__(self, k)
                    weighted_val = val[key]

        # used to show probabality for key
        # print weighted_val

        if weighted_val:
            prob_results = self.weighted_random_choice(weighted_val)
        else:
            prob_results = None
        return prob_results
</code></pre>
<h2>Usage</h2>
<pre><code>d = MultiKeyMultiValNonDeterministicDict()

d["red","blue","green"] = {
    # {rule_set} : {result: probability}
    frozenset(["red", "green"]): {"ballon": 0.8},
    frozenset(["blue"]): {"toy": 0.15},
    frozenset([]): {"car": 0.05}
}
</code></pre>
<h1>Testing</h1>
<p>Check the probabilities</p>
<pre><code>N = 10000
red_green_test = {'car':0.0, 'toy':0.0, 'ballon':0.0}
red_blue_test = {'car':0.0, 'toy':0.0, 'ballon':0.0}
blue_test = {'car':0.0, 'toy':0.0, 'ballon':0.0}
red_blue_green_test = {'car':0.0, 'toy':0.0, 'ballon':0.0}
default_test = {'car':0.0, 'toy':0.0, 'ballon':0.0}

for _ in xrange(N):
    red_green_test[d["red","green"]] += 1.0
    red_blue_test[d["red","blue"]] += 1.0
    blue_test[d["blue"]] += 1.0
    default_test[d["green"]] += 1.0
    red_blue_green_test[d["red","blue","green"]] += 1.0

print 'red,green test      =', ' '.join('{0}: {1:05.2f}%'.format(key, 100.0*val/N) for key, val in red_green_test.items())
print 'red,blue test       =', ' '.join('{0}: {1:05.2f}%'.format(key, 100.0*val/N) for key, val in red_blue_test.items())
print 'blue test           =', ' '.join('{0}: {1:05.2f}%'.format(key, 100.0*val/N) for key, val in blue_test.items())
print 'default test        =', ' '.join('{0}: {1:05.2f}%'.format(key, 100.0*val/N) for key, val in default_test.items())
print 'red,blue,green test =', ' '.join('{0}: {1:05.2f}%'.format(key, 100.0*val/N) for key, val in red_blue_green_test.items())
</code></pre>
<hr/>
<pre><code>red,green test      = car: 09.89% toy: 10.06% ballon: 80.05%
red,blue test       = car: 05.30% toy: 47.71% ballon: 46.99%
blue test           = car: 41.69% toy: 15.02% ballon: 43.29%
default test        = car: 05.03% toy: 47.16% ballon: 47.81%
red,blue,green test = car: 04.85% toy: 49.20% ballon: 45.95%
</code></pre>
<h3>Probabilities match rules!</h3>
<hr/>
<h3>Footnotes</h3>
<ol>
<li><p>Distribution Assumption</p>
<p>Since the rule set is not fully defined, assumptions are made about the probability distributions, most of this is done in <code>multi_val_rule_prob()</code>.  Basically any undefined probability will be spread uniformly over the remaining values. This is done for <em>all</em> combinations of keys, and creates a generalized key interface for the random weighted selection.</p>
<p>Given the example rule set</p>
<pre><code>d["red","blue","green"] = {
    # {rule_set} : {result: probability}
    frozenset(["red", "green"]): {"ballon": 0.8},
    frozenset(["blue"]): {"toy": 0.15},
    frozenset([]): {"car": 0.05}
}
</code></pre>
<p>this will create the following distributions</p>
<pre><code>'red'           = [('car', 0.050), ('toy', 0.475), ('ballon', 0.475)]
'green'         = [('car', 0.050), ('toy', 0.475), ('ballon', 0.475)]
'blue'          = [('car', 0.425), ('toy', 0.150), ('ballon', 0.425)]
'blue,red'      = [('car', 0.050), ('toy', 0.475), ('ballon', 0.475)]
'green,red'     = [('car', 0.098), ('toy', 0.098), ('ballon', 0.800)]
'blue,green'    = [('car', 0.050), ('toy', 0.475), ('ballon', 0.475)]
'blue,green,red'= [('car', 0.050), ('toy', 0.475), ('ballon', 0.475)]
 default        = [('car', 0.050), ('toy', 0.475), ('ballon', 0.475)]
</code></pre>
<p>If this is incorrect, please advise.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>the single output value should be probabilistically determined (fuzzy) based on a rule from keys eg:in above case rule could be if keys have both "red" and "blue" then return "baloon" 80% of time if only blue then return "toy" 15% of time else "car" 5% of time.</p>
</blockquote>
<p>Bare in mind your case analysis is not complete, and it's ambiguous, but you can do the following "in spirit" (fleshing out the desired results):</p>
<pre><code>import random

def randomly_return(*colors):
    colors = set(*colors)
    if 'red' in colors and 'blue' in colors:
        if random.random() &lt; 0.8:  # 80 % of the time
            return "baloon"

    if 'blue' in colors and len(colors) == 1:  # only blue in colors
        if random.random() &lt; 0.15:
            return "toy"
        else:
            if random.random() &lt; 0.05:
                return "car"

# other cases to consider
</code></pre>
<hr/>
<p>I would keep this as a function, because it is a function! But if you insist to make it dict-like, then python let's you do this by overriding <code>__getitem__</code> (IMO it's not pythonic).</p>
<pre><code>class RandomlyReturn(object):
    def __getitem__(self, *colors):
        return randomly_return(*colors)

&gt;&gt;&gt; r = RandomlyReturn()
&gt;&gt;&gt; r["red", "blue"]  # 80% of the time it'll return "baloon"
"baloon"
</code></pre>
<hr/>
<p>From your clarification, OP wants to pass and generate:</p>
<blockquote>
<p>randreturn((haseither(red,blue),baloon:0.8),((hasonly(blue),toy:0.15)),(default(‌​),car:0.05)))</p>
</blockquote>
<p>you want to generate a function as follows:</p>
<pre><code>funcs = {"haseither": lambda needles, haystack: any(n in haystack for n in needles),
         "hasonly": lambda needles, haystack: len(needles) == 1 and needles[1] in haystack}

def make_random_return(crits, default):
    def random_return(*colors):
        colors = set(*colors)
        for c in crits:
            if funcs[c["func"]](c["args"], colors) and random.random() &gt; c["with_prob"]:
                return c["return_value"]
        return default
    return random_return
</code></pre>
<p>where the crit and default in this case would be:</p>
<pre><code>crit = [{"func": "haseither", "args": ("red", "blue"), "return_value": "baloon", "with_prob": 0.8}, ...]
default = "car"  # ??
my_random_return = make_random_return(crits, default)
</code></pre>
<p><em>As I say, your probabilities are ambiguous/don't add up, so you're most likely going to need to tweak this...</em></p>
<p>You can extend the class definition by passing crit and default upon instantiation:</p>
<pre><code>class RandomlyReturn(object):
    def __init__(self, crit, default):
        self.randomly_return = make_random_return(crit, default)
    def __getitem__(self, *colors):
        return self.randomly_return(*colors)

&gt;&gt;&gt; r = RandomlyReturn(crit, default)
&gt;&gt;&gt; r["red", "blue"]  # 80% of the time it'll return "baloon"
"baloon"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If it is possible to change the data structure, it would be simpler to have a function returning the data you need. This will be completely flexible and could accommodate any kind of data, should you need to change them later.</p>
<pre><code>import random

def myfunc(*args):
    if 'red' in args:
        return 'blue'
    elif 'green' in args or 'violet' in args:
        return 'violet'
    else:
        r = random.random()
        if 0 &lt; r &lt; 0.2:
            return 'blue'
        else:
            return 'green'

print(myfunc('green', 'blue'))
print(myfunc('yellow'))
</code></pre>
<p>output (the second line obviously changes):</p>
<pre><code>violet
blue
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The OP wants as follows,  </p>
<pre><code>d["red", "blue"] ={ 
    "baloon": haseither('red','green',0.8),
    "toy": hasonly("blue",0.15),
    "car": default(0.05)
}  
</code></pre>
<p>but this is data with embeded logic. It's very tedious to define a function for every value. What I suggest is to seprate the data and logic.  </p>
<p>Python has a data type for this, that's <code>class</code>. A callable instance of a <code>class</code> can be assigned to the <code>dict</code> and let the <code>dict</code> pass the keys and call the object to return the result.  </p>
<p>I've inherited and extended <code>multiple_key_dict</code> to support multi-key fetch and to pass keys to the object and call the object which has been stored in the dict.  </p>
<p>I assume data is recalculated per rule. This is <code>Rule</code> class, it has list of rules. A rule is a Python expressions and it has access to <code>len</code> function and <code>keys</code> list. So one can write a rule like <code>len(keys) == 1 and 'blue' in keys</code>.  </p>
<pre><code>class Rule(object):

    def __init__(self, rule, data):
        self.rule = rule
        self.data = data
</code></pre>
<p>This is <code>Data</code> class which has both set of data and rules.  </p>
<pre><code>class Data(object):
    def __init__(self, rules):
        self.rules= rules

    def make_choice(self, data):
        data = tuple(self.make_list_of_values(data))
        return random.choice(data)

    def make_list_of_values(self, data):
        for val, weight in data:
            percent = int(weight * 100)
            for v in [val] * percent:
                yield v

    def __call__(self, keys):
        for rule in self.rules:
            if eval(rule.rule,dict(keys=keys)):
                return self.make_choice(rule.data)
</code></pre>
<p>This is <code>RuleDict</code>, but non-callables can not be fetched.</p>
<pre><code>class RuleDict(multi_key_dict):
    def __init__(self, *args, **kwargs):
        multi_key_dict.__init__(self, *args, **kwargs)

    def __getitem__(self, keys):
        if isinstance(keys, str):
            keys = (keys, )
        keys_set = frozenset(keys)
        for key in self.keys():
            key = frozenset(key)
            if keys_set &lt;= key:
                return multi_key_dict.__getitem__(self,keys[0])(keys)
        raise KeyError(keys)
</code></pre>
<p>usage example,  </p>
<pre><code>d = RuleDict()
rule1 = Rule('"red" in keys and "green" in keys',(('baloon',0.8), ('car',0.05), ('toy',0.15)))
rule2 = Rule('len(keys) ==1 and "blue" in keys',(('baloon',0.25), ('car',0.35), ('toy',0.15)))
data = Data((rule1, rule2))
d['red','blue','green'] = data

print(d['red','green'])  
</code></pre>
<p><code>d['red','green']</code> calls the object, with keys, that was assigned and return the result.  </p>
<p>Another approach is, to make the <code>dict</code> callable. This one seems a sound approach, because data and logic are separate. By this, you pass the keys and the logic, a callable, to the dict and return the result. f.e.,  </p>
<pre><code>def f(keys, data):
    pass # do the logic and return data

d['red','blue','green'] = ('baloon', 'car', 'toy')
</code></pre>
<p>Now call the <code>dict</code> </p>
<pre><code>d(('red','blue'),f)
</code></pre>
<p>This is callable <code>dict</code>. If no callable is given, just returns the whole data.  </p>
<pre><code>class callable_mkd(multi_key_dict):
    def __init__(self, *args, **kwargs):
        multi_key_dict.__init__(self, *args, **kwargs)

    def __call__(self, keys, process=None):
        keys_set = frozenset(keys)
        for key in self.keys():
            key = frozenset(key)
            if keys_set &lt;= key:
                if process:
                    return process(keys, self[keys[0]])
                return self[keys[0]]
        raise KeyError(keys)
</code></pre>
</div>
<span class="comment-copy">From what I understand, the multi-key part is like a "synonym" key: different ways to refer to the same thing, like 1000, k, kilo in the multi-key-dict readme. My question is: when you say multi-value, Are you saying synonym values? or many different values?</span>
<span class="comment-copy">What do you mean by <code>d['red']==d['green']</code> ? Is that because you've looked up a multi-key including both of those before? I understood your question to mean that d['red'] != d['red'] necessarily...</span>
<span class="comment-copy">@chapelo ideally it should have provision for both synonym values as well as different values , to be configured by a "setting" in the dictionary.</span>
<span class="comment-copy">WoJ has the right idea, there's no need for this to be dict-like - it's a function. Making it dict-like is obscurification. :(</span>
<span class="comment-copy">What about setting an item? Say you have <code>d['red','blue','green']= "baloon" or "car" or "toy"</code> with the probabilities set for those things. What happens with <code>d['red']='ball'</code>?</span>
<span class="comment-copy">that looks to be a great implementation, thanks, I will soon check it and share doubts if any. I had many praises for this but  comment system does not allow it</span>
<span class="comment-copy">in the default case , you used "green" key what makes you assume that "green" is default key?</span>
<span class="comment-copy">1 also the dictionary keys should be frozenset as the order of keys dont matter and it needs to be hashable. I had used that construct for illustrative example.</span>
<span class="comment-copy">2 what if   another dict assignment comes later like d["blue"]== {frozenset(["blue"]): {"doll": 0.55} ...} how will this be handled?</span>
<span class="comment-copy">and will this program be tractable if the keys are say 10 keys ? 10!=3628800</span>
<span class="comment-copy">Thanks ,but it needs to not use logics in the function , but independently specified either as a decorator or seperate configuration eg:a decorator randreturn(baloon:0.8,toy:0.15, car:0.05)</span>
<span class="comment-copy">the getitem will have the above decorator</span>
<span class="comment-copy">randreturn((has(red,blue),baloon:0.8),(...))</span>
<span class="comment-copy">@stackit you need to make this clearer....</span>
<span class="comment-copy">@NizamMohamed you can always modify above code or write a new answer(preferable)</span>
<span class="comment-copy">Yes it is possible , you can give an example</span>
<span class="comment-copy">@stackit: updated with some example code</span>
<span class="comment-copy">Thanks , but how to incorporate this in the multidict structure</span>
<span class="comment-copy">It is not possible, these data containers are expected to hold static (deterministic) values. Is there a specific reason why you do not want to go for a function-based approach?</span>
<span class="comment-copy">classes can also have this function, how would you incorporate above in multikey dict</span>
