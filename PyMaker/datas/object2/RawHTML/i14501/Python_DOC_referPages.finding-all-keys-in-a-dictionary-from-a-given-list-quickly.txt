<div class="post-text" itemprop="text">
<p>I have a (potentially quite big) dictionary and a list of 'possible' keys. I want to quickly find which of the keys have matching values in the dictionary. I've found lots of discussion of <em>single</em> dictionary values <a href="https://stackoverflow.com/questions/1602934/check-if-a-given-key-already-exists-in-a-dictionary">here</a> and <a href="https://stackoverflow.com/questions/19241680/python-check-that-key-is-defined-in-dictionary">here</a>, but no discussion of speed or multiple entries.</p>
<p>I've come up with four ways, and for the three that work best I compare their speed on different sample sizes below - are there better methods? If people can suggest sensible contenders I'll subject them to the analysis below as well.</p>
<p>Sample lists and dictionaries are created as follows:</p>
<pre><code>import cProfile
from random import randint

length = 100000

listOfRandomInts = [randint(0,length*length/10-1) for x in range(length)]
dictionaryOfRandomInts = {randint(0,length*length/10-1): "It's here" for x in range(length)}
</code></pre>
<p> </p>
<p><strong>Method 1: the <code>'in'</code> keyword:</strong></p>
<pre><code>def way1(theList,theDict):
    resultsList = []
    for listItem in theList:
        if listItem in theDict:
            resultsList.append(theDict[listItem])
    return resultsList

cProfile.run('way1(listOfRandomInts,dictionaryOfRandomInts)')
</code></pre>
<p>32 function calls in 0.018 seconds</p>
<p> </p>
<p><strong>Method 2: error handling:</strong></p>
<pre><code>def way2(theList,theDict):
    resultsList = []
    for listItem in theList:
        try:
            resultsList.append(theDict[listItem])
        except:
            ;
    return resultsList

cProfile.run('way2(listOfRandomInts,dictionaryOfRandomInts)')
</code></pre>
<p>32 function calls in 0.087 seconds</p>
<p> </p>
<p><strong>Method 3: set intersection:</strong></p>
<pre><code>def way3(theList,theDict):
    return list(set(theList).intersection(set(theDict.keys())))

cProfile.run('way3(listOfRandomInts,dictionaryOfRandomInts)')
</code></pre>
<p>26 function calls in 0.046 seconds</p>
<p> </p>
<p><strong>Method 4: Naive use of <code>dict.keys()</code>:</strong></p>
<p>This is a cautionary tale - it was my first attempt and <strong>BY FAR</strong> the slowest!</p>
<pre><code>def way4(theList,theDict):
    resultsList = []
    keys = theDict.keys()
    for listItem in theList:
        if listItem in keys:
            resultsList.append(theDict[listItem])
    return resultsList

cProfile.run('way4(listOfRandomInts,dictionaryOfRandomInts)')
</code></pre>
<p>12 function calls in 248.552 seconds</p>
<p> </p>
<p><em>EDIT: Bringing the suggestions given in the answers into the same framework that I've used for consistency. Many have noted that more performance gains can be achieved in Python 3.x, particularly list comprehension-based methods. Many thanks for all of the help!</em></p>
<p><strong>Method 5: Better way of performing intersection (thanks jonrsharpe):</strong></p>
<pre><code>def way5(theList, theDict):
    return = list(set(theList).intersection(theDict))
</code></pre>
<p>25 function calls in 0.037 seconds</p>
<p> </p>
<p><strong>Method 6: List comprehension (thanks jonrsharpe):</strong></p>
<pre><code>def way6(theList, theDict):
    return [item for item in theList if item in theDict]
</code></pre>
<p>24 function calls in 0.020 seconds</p>
<p> </p>
<p><strong>Method 7: Using the <code>&amp;</code> keyword (thanks jonrsharpe):</strong></p>
<pre><code>def way7(theList, theDict):
    return list(theDict.viewkeys() &amp; theList)
</code></pre>
<p>25 function calls in 0.026 seconds</p>
<p>For methods 1-3 and 5-7 I timed them as above with list/dictionaries of length 1000, 10000, 100000, 1000000, 10000000 and 100000000 and show a log-log plot of time taken. Across all lengths the intersection and in-statement method perform better. The gradients are all about 1 (maybe a bit higher), indicating O(n) or perhaps slightly super-linear scaling.</p>
<p><img alt="Log-Log plot comparing time-scaling of the 6 sensible methods with list/dict length" src="https://i.stack.imgur.com/sG5iU.png"/></p>
</div>
<div class="post-text" itemprop="text">
<p>Of a couple of additional methods I've tried, the fastest was a simple list comprehension:</p>
<pre><code>def way6(theList, theDict):
    return [item for item in theList if item in theDict]
</code></pre>
<p>This runs the same process as your fastest approach, <code>way1</code>, but more quickly. For comparison, the quickest <code>set</code>-based way was </p>
<pre><code>def way5(theList, theDict):
    return list(set(theList).intersection(theDict))
</code></pre>
<p><code>timeit</code> results:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; setup = """from __main__ import way1, way5, way6
from random import randint
length = 100000
listOfRandomInts = [randint(0,length*length/10-1) for x in range(length)]
dictionaryOfRandomInts = {randint(0,length*length/10-1): "It's here" for x in range(length)}
"""
&gt;&gt;&gt; timeit.timeit('way1(listOfRandomInts,dictionaryOfRandomInts)', setup=setup, number=1000)
14.550477756582723
&gt;&gt;&gt; timeit.timeit('way5(listOfRandomInts,dictionaryOfRandomInts)', setup=setup, number=1000)
19.597916393388232
&gt;&gt;&gt; timeit.timeit('way6(listOfRandomInts,dictionaryOfRandomInts)', setup=setup, number=1000)
13.652289059326904
</code></pre>
<hr/>
<p>Having added @abarnert's suggestion:</p>
<pre><code>def way7(theList, theDict):
    return list(theDict.viewkeys() &amp; theList)
</code></pre>
<p>and re-run the timing I now get:</p>
<pre><code>&gt;&gt;&gt; timeit.timeit('way1(listOfRandomInts,dictionaryOfRandomInts)', setup=setup, number=1000)
13.110055883138497
&gt;&gt;&gt; timeit.timeit('way5(listOfRandomInts,dictionaryOfRandomInts)', setup=setup, number=1000)
17.292466681101036
&gt;&gt;&gt; timeit.timeit('way6(listOfRandomInts,dictionaryOfRandomInts)', setup=setup, number=1000)
14.351759544463917
&gt;&gt;&gt; timeit.timeit('way7(listOfRandomInts,dictionaryOfRandomInts)', setup=setup, number=1000)
17.206370930653392
</code></pre>
<p><code>way1</code> and <code>way6</code> have switched places, so I re-ran again:</p>
<pre><code>&gt;&gt;&gt; timeit.timeit('way1(listOfRandomInts,dictionaryOfRandomInts)', setup=setup, number=1000)
13.648176054011941
&gt;&gt;&gt; timeit.timeit('way6(listOfRandomInts,dictionaryOfRandomInts)', setup=setup, number=1000)
13.847062579316628
</code></pre>
<p>So it looks like the set approach is slower than the list, but the difference between the list and list comprehension is (surprisingly, to me at least) is a bit variable. I'd say just pick one, and not worry about it unless it becomes a real bottleneck later.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, I think you're on 2.7, so I'll do most of this with 2.7. But it's worth noting that if you're really interested in optimizing your code, the 3.x branch continues to get performance improvements, and the 2.x branch never will. And why are you using CPython instead of PyPy?</p>
<hr/>
<p>Anyway, some further micro-optimizations to try (in addition to the ones in <a href="https://stackoverflow.com/a/29965698/908494">jonrsharpe's answer</a>:</p>
<hr/>
<p>Caching attribute and/or global lookups in local variables (it's called <code>LOAD_FAST</code> for a reason). For example:</p>
<pre><code>def way1a(theList, theDict):
    resultsList = []
    rlappend = resultsList.append
    for listItem in theList:
        if listItem in theDict:
            rlappend(theDict[listItem])
    return resultsList

In [10]: %timeit way1(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 13.2 ms per loop
In [11]: %timeit way1a(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 12.4 ms per loop
</code></pre>
<p>But for some operator special methods, like <code>__contains__</code> and <code>__getitem__</code>, that may not be worth doing. Of course you won't know until you try:</p>
<pre><code>def way1b(theList, theDict):
    resultsList = []
    rlappend = resultsList.append
    tdin = theDict.__contains__
    tdgi = theDict.__getitem__
    for listItem in theList:
        if tdin(listItem):
            rlappend(tdgi(listItem))
    return resultsList

In [14]: %timeit way1b(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 12.8 ms per loop
</code></pre>
<p>Meanwhile, Jon's <code>way6</code> answer already optimizes out the <code>resultList.append</code> entirely by using a listcomp, and we just saw that optimizing out the lookups he does have probably won't help. Especially in 3.x, where the comprehension is going to be compiled into a function of its own, but even in 2.7 I wouldn't expect any benefit, for the same reasons as in the explicit loop. But let's try just to be sure:</p>
<pre><code>def way6(theList, theDict):
    return [theDict[item] for item in theList if item in theDict]
def way6a(theList, theDict):
    tdin = theDict.__contains__
    tdgi = theDict.__getitem__
    return [tdgi(item) for item in theList if tdin(item)]

In [31]: %timeit way6(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 14.7 ms per loop
In [32]: %timeit way6a(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 13.9 ms per loop
</code></pre>
<p>Surprisingly (at least to me), this time it actually helped. Not sure why.</p>
<p>But what I was really setting up for was this: another advantage of turning both the filter expression and the value expression into function calls is that we can use <code>filter</code> and <code>map</code>:</p>
<pre><code>def way6b(theList, theDict):
    tdin = theDict.__contains__
    tdgi = theDict.__getitem__
    return map(tdgi, filter(tdin, theList))
def way6c(theList, theDict):
    tdin = theDict.__contains__
    tdgi = theDict.__getitem__
    return map(tdgi, ifilter(tdin, theList))

In [34]: %timeit way6b(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 10.7 ms per loop
In [35]: %timeit way6c(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 13 ms per loop
</code></pre>
<p>But that gain is largely 2.x-specific; 3.x has faster comprehensions, while its <code>list(map(filter(…)))</code> is slower than 2.x's <code>map(filter(…))</code> or <code>map(ifilter(…))</code>.</p>
<hr/>
<p>You don't need to convert both sides of a set intersection to a set, just the left side; the right side can be any iterable, and a dict is already an iterable of its keys.</p>
<p>But, even better, a dict's key view (<code>dict.keys</code> in 3.x, <code>dict.keyview</code> in 2.7) is already a set-like object, and one backed by the dict's hash table, so you don't need to transform <em>anything</em>. (It doesn't have quite the same interface—it has no <code>intersection</code> method but its <code>&amp;</code> operator takes iterables, unlike <code>set</code>, which has an <code>intersection</code> method that takes iterables but its <code>&amp;</code> only takes sets. That's annoying, but we only care about performance here, right?)</p>
<pre><code>def way3(theList,theDict):
    return list(set(theList).intersection(set(theDict.keys())))
def way3a(theList,theDict):
    return list(set(theList).intersection(theDict))
def way3b(theList,theDict):
    return list(theDict.viewkeys() &amp; theList)

In [20]: %timeit way3(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 23.7 ms per loop
In [20]: %timeit way3a(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 15.5 ms per loop
In [20]: %timeit way3b(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 15.7 ms per loop
</code></pre>
<p>That last one didn't help (although using Python 3.4 instead of 2.7, it was 10% faster…), but the first one definitely did.</p>
<p>In real life, you may also want to compare the sizes of the two collections to decide which one gets setified, but here that information is static, so there's no point writing the code to test it.</p>
<hr/>
<p>Anyway, my fastest result was the <code>map(filter(…))</code> on 2.7, by a pretty good margin. On 3.4 (which I didn't show here), Jon's listcomp was fastest (even fixed to return the values rather than the keys), and faster than any of the 2.7 methods. Also, 3.4's fastest set operation (using the key view as a set and the list as an iterable) were a lot closer to the iterative methods than in 2.7.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>$ ipython2 # Apple CPython 2.7.6
[snip]
In [3]: %timeit way1(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 13.8 ms per loop

$ python27x -m ipython # custom-built 2.7.9
[snip]
In [3]: %timeit way1(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 13.7 ms per loop

$ ipython3 # python.org CPython 3.4.1
[snip]
In [3]: %timeit way1(listOfRandomInts, dictionaryOfRandomInts)
100 loops, best of 3: 12.8 ms per loop    
</code></pre>
<p>So, that's an 8% speedup just by using a later Python. (And the speedup was closer to 20% on the listcomp and dict-key-view versions.) And it's not because Apple's 2.7 is bad or anything, it's just that 3.x has continued to get optimizations over the past 5+ years, while 2.7 has not (and never will again).</p>
<p>And meanwhile:</p>
<pre><code>$ ipython_pypy # PyPy 2.5.0 Python 2.7.8
[snip]
In [3]: %timeit way1(listOfRandomInts, dictionaryOfRandomInts)
1000000000 loops, best of 3: 1.97 ns per loop
</code></pre>
<p>That's a 7000000x speedup just by typing 5 extra characters. :)</p>
<p>I'm sure it's cheating here. Either the JIT implicitly memoized the result, or it's noticed that I didn't even look at the result and pushed that up the chain and realized it didn't need to do any of the steps, or something. But this actually happens in real life sometimes; I've had a huge mess of code that spent 3 days debugging and trying to optimize before realizing that everything it did was unnecessary…</p>
<p>At any rate, speedups on the order of 10x are pretty typical from PyPy even when it can't cheat. And it's a lot easier than tweaking attribute lookups or reversing the order of who gets turned into a set for 5%.</p>
<p>Jython is more unpredictable—sometimes almost as fast as PyPy, sometimes much slower than CPython. Unfortunately, <code>timeit</code> is broken in Jython 2.5.3, and I just broke my Jython 2.7 completely by upgrading from rc2 to rc3, so… no tests today. Similarly, IronPython is basically Jython redone on a different VM; it's usually faster, but again unpredictable. But my current version of Mono and my current version of IronPython aren't playing nice together, so no tests there either.</p>
</div>
<span class="comment-copy">Which version(s) of Python? In 2.x, where <code>dict.keys</code> returns a list, I'd expect <code>set(theDict.keys())</code> to be slower than <code>set(theDict)</code>, for example, and <code>set(theList).intersection(theDict)</code> to be faster than <code>set(theList).intersection(set(theDict.keys()))</code> (and <a href="https://docs.python.org/2/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a> agrees...)</span>
<span class="comment-copy">Additionally, a <a href="https://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> is generally faster than looping and <code>append</code>ing.</span>
<span class="comment-copy">For future reference, <code>[c]profile</code> isn't appropriate for doing benchmarks, especially micro-benchmarks. In fact, there's a Note right at the top of <a href="https://docs.python.org/3/library/profile.html#introduction-to-the-profilers" rel="nofollow noreferrer">the docs</a> that explains that, and recommends using <code>timeit</code> (as all of the answers do). In this particular case, on top of all the other things it doesn't do that <code>timeit</code> does, it's also adding overhead to every Python function call, but not to builtins, which skews some of the answers worse than others.</span>
<span class="comment-copy">What you use <code>profile</code> for is to determine which part of your code is making it slow, not whether it's slow.</span>
<span class="comment-copy">Also, why did you mention Python 3.x in the edit, but not PyPy or IronPython? If an 8% improvement is worth switching language versions for, surely a 700000000% improvement is worth switching implementations within the same language version, right? :)</span>
<span class="comment-copy">If this is 2.7, try <code>list(theDict.viewkeys() &amp; theList)</code>. On my machine, it's about 10% faster than your <code>way5</code>. (For 3.x, you can do the same thing with <code>keys()</code>. And yes, unlike <code>set</code>, whose <code>&amp;</code> operator only takes sets but there's an <code>intersection</code> method for any iterable, set-like views have an <code>&amp;</code> operator that takes any iterable but no <code>intersection</code> method…)</span>
<span class="comment-copy">Your <code>way6</code> returns the matching keys; his <code>way1</code> returns the values corresponding to the matching keys. But then the same is true of his <code>way3</code>, so… I'm not sure what he actually wants.</span>
<span class="comment-copy">@abarnert I hadn't spotted that... once you have the keys, I suppose, it's easy enough to get the associated values! I've updated my answer with your suggestion.</span>
<span class="comment-copy">That "10% faster" measurement was on 3.4 and <code>keys</code>. Repeating it on 2.7 and <code>viewkeys</code>, it's within 1% either way, just as you found. It looks like it's also no gain in 3.2. I'm not sure which of the recent dict changes would affect this (split hash tables, hash randomization, … none of it seems relevant…).</span>
<span class="comment-copy">The list comprehensions runs in its own scope thing is true only for Python 3.x, in Python 2.7 it is still not the case.</span>
<span class="comment-copy">Note that with <code>dict.viewkeys()</code> we are not transforming anything explicitly but internally it is equivalent to <code>res = set(dict); intersection_update(res, iterable)</code>, here <code>intersection_update</code> now calls <code>set_intersection</code> on <code>res</code> and <code>iterable</code>. Hence almost the same performance as <code>way3a</code>.</span>
<span class="comment-copy">@AshwiniChaudhary: Are you sure <code>viewkeys</code> or its <code>__and__</code> method does something equivalent to <code>res = set(dict)</code>? That isn't true with 3.4's <code>keys</code> objects, so that would explain why 3.4 gets a significant speedup but 2.7 doesn't…</span>
<span class="comment-copy">@AshwiniChaudhary: Never mind, <a href="https://hg.python.org/cpython/file/2.7/Objects/dictobject.c#l2981" rel="nofollow noreferrer">I found it</a>, and you're right. Good catch.</span>
<span class="comment-copy">@AshwiniChaudhary: Also, good catch on the 2.7 listcomp thing. I didn't write what I meant to say, so it was completely wrong… fixed.</span>
