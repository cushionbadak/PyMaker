<div class="post-text" itemprop="text">
<p>How would I go about breaking the following line? The <a href="https://www.python.org/dev/peps/pep-0008/#maximum-line-length" rel="nofollow">PEP8</a> guideline doesn't make it very clear to me.</p>
<pre><code>confirmation_message = _('ORDER_CREATED: %(PROPERTY_1)s - %(PROPERTY_2)s - %(PROPERTY_3)s - %(PROPERTY_4)s')  % {'PROPERTY_1': order.lorem, 'PROPERTY_2': order.ipsum, 'PROPERTY_4': order.dolor, 'PROPERTY_5': order.sit}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One would typically do something like:</p>
<pre><code>confirmation_message = _(
    'ORDER_CREATED: %(PROPERTY_1)s - '
    '%(PROPERTY_2)s - %(PROPERTY_3)s - %(PROPERTY_4)s') % {
        'PROPERTY_1': order.lorem,
        'PROPERTY_2': order.ipsum,
        'PROPERTY_3': order.ipsum,
        'PROPERTY_4': order.dolor,
        'PROPERTY_5': order.sit
    }
</code></pre>
<p>This takes advantage of the fact that adjacent strings (<code>'like ' 'this'</code>) are concatenated to shorten the long line of text; everything else is split on commas.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>confirmation_message = (
    _(
        'ORDER_CREATED: %(PROPERTY_1)s - %(PROPERTY_2)s - '
        '%(PROPERTY_3)s - %(PROPERTY_4)s'
    ) % {
        'PROPERTY_1': order.lorem,
        'PROPERTY_2': order.ipsum,
        'PROPERTY_4': order.dolor,
        'PROPERTY_5': order.sit,
    })
</code></pre>
<p>Or also:</p>
<pre><code>confirmation_message_tmpl = _(
    'ORDER_CREATED: %(PROPERTY_1)s - %(PROPERTY_2)s - '
    '%(PROPERTY_3)s - %(PROPERTY_4)s'
)
confirmation_message = confirmation_message_tmpl % {
    'PROPERTY_1': order.lorem,
    'PROPERTY_2': order.ipsum,
    'PROPERTY_4': order.dolor,
    'PROPERTY_5': order.sit,
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's not much point in using a dictionary <em>literal</em> as the right-hand argument of the <code>%</code>. It takes up a lot of space without really enhancing the readability of your code.</p>
<pre><code>confirmation_message = _('ORDER_CREATED: %s - %s - %s - %s') % (
    order.lorem, 
    order.ipsum, 
    order.dolor,
    order.sit
)
</code></pre>
<p>The <code>operator.attrgetter</code> function is useful here:</p>
<pre><code>import operator
attrs = operator.attrgetter('lorem', 'ipsum', 'dolor', 'sit')
confirmation_message = _('ORDER_CREATED: %s - %s - %s - %s') % attrs(order)
</code></pre>
<p>If you can, switch to using the <code>format</code> method:</p>
<pre><code>msg_template = 'ORDER_CREATED: {0.lorem} - {0.ipsum} - {0.dolor} - {0.sit}'
confirmation_message = _(msg_template).format(order)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The way you'd probably see this broken up the most often is using <a href="https://docs.python.org/3/reference/lexical_analysis.html#implicit-line-joining" rel="nofollow">implicit line joining</a>, similar to this:</p>
<pre><code>confirmation_message = (_('ORDER_CREATED: %(PROPERTY_1)s - %(PROPERTY_2)s - '
                          '%(PROPERTY_3)s - %(PROPERTY_4)s')  %
                        {'PROPERTY_1': order.lorem, 'PROPERTY_2': order.ipsum,
                         'PROPERTY_4': order.dolor, 'PROPERTY_5': order.sit})
</code></pre>
<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#implicit-line-joining" rel="nofollow">Implicit line joining</a> means that:</p>
<blockquote>
<p>Expressions in parentheses, square brackets or curly braces can be split
  over more than one physical line without using backslashes.</p>
</blockquote>
<p>The problem with explicit joining using the <code>\</code> character is that an extra character (like a space) at the end of the physical line after the <code>\</code> will cause an error, like so:</p>
<pre><code>&gt;&gt;&gt; c = '1 2 3 4 5 6 ' \  # This will generate an error.
  File "&lt;stdin&gt;", line 1
    c = '1 2 3 4 5 6 ' \  # This will generate an error.
                                                       ^
SyntaxError: unexpected character after line continuation character
&gt;&gt;&gt;
</code></pre>
<p>This doesn't happen with implicit joining:</p>
<pre><code>&gt;&gt;&gt; c = ('1 2 3 4 5 6 ' # No error.
...      '7 8 9 10')
&gt;&gt;&gt; print(c)
1 2 3 4 5 6 7 8 9 10
&gt;&gt;&gt;
</code></pre>
</div>
<span class="comment-copy">Are you intentionally leaving the <code>order</code> outside of the call to <code>_</code>, so that they aren't translated?</span>
<span class="comment-copy">The code was modified and simplified for the question. In reality the variables are also translated.</span>
<span class="comment-copy">This is pretty much what <a href="https://github.com/google/yapf" rel="nofollow noreferrer">yapf</a> would give you, although yapf won't break the string up like that.</span>
<span class="comment-copy">++ for mentioning <code>.format()</code></span>
<span class="comment-copy">I have to use it like that so that the persons doing the translation for the application knows what field is what in case that some language requires some weird positioning of the variables inside the string</span>
<span class="comment-copy">@yoshi - Wouldn't the <code>confirmation_message = _(msg_template).format(order)</code> method both accomplish the same thing and be more readable?  Unless the <code>dict</code> method is a project requirement/standard?</span>
<span class="comment-copy">@Veedrac None of my answers or your suggestions are invalidated just because the actual property names are different than posted. At worst, short names just make the issue of trying to split the line less urgent. The accepted answer is fine; I upvoted it.</span>
<span class="comment-copy">@yoshi Sorry if I came across as angry (I'm not). I do disagree, but I'm not going to push the matter further.</span>
