<div class="post-text" itemprop="text">
<p>How do I initialize the python interpreter such that it already has variables in its memory?  For example, how could I initialize a[n i]Python interpreter, and type as my first input:</p>
<pre><code>In [1]: today
Out[1]: '2015-05-05 17:49:32.726496'
</code></pre>
<p>without first binding the name <code>str(today = datetime.datetime.today())</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using ipython, you can configure it to load scripts automatically for you.</p>
<p>Run </p>
<pre><code>$ ipython profile create
</code></pre>
<p>which will create default profile in your home directory.</p>
<p>Create a file called <code>~/.ipython/ipython_init.py</code> and add</p>
<pre><code>import datetime
today = datetime.datetime.today
</code></pre>
<p>Now at the end of <code>~/.ipython/profile_default/ipython_config.py</code>, add this line so that it will load that file every time interpreter starts</p>
<pre><code>c.InteractiveShellApp.exec_files = ['~/.ipython/ipython_init.py']
</code></pre>
<p>Next time when you launch ipython shell, you can access those variables.</p>
<pre><code>In [1]: today
Out[1]: datetime.datetime(2017, 3, 2, 13, 31, 26, 776744)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a script containing your "setup" code, and then execute it and enter interactive mode. </p>
<p>For example:  </p>
<pre><code># foo.py
import datetime
today = datetime.datetime.today
</code></pre>
<p>Run with:</p>
<pre><code>python -i foo.py
&gt;&gt;&gt; today
'2015-05-05 17:49:32.726496'
</code></pre>
<p>I believe IPython should support the same option. The other alternative for IPython specifically is to just start it, then say:</p>
<pre><code>In [1]: %run foo.py
</code></pre>
<p>Which will run that script in your current shell, giving you access to everything defined there.</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the other answer, you can explicitly drop into interactive mode like this:</p>
<pre><code>// setup.py
import code, datetime
today = datetime.datetime.today()
code.interact(local=locals())
</code></pre>
<p>execute normally</p>
<pre><code>python setup.py
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are three options for the standard Python interpreter:</p>
<ul>
<li><a href="https://docs.python.org/3/using/cmdline.html#cmdoption-i" rel="nofollow noreferrer"><code>python -i setup.py</code></a>, as explained in <a href="https://stackoverflow.com/a/30065745/908494">tzaman's answer</a></li>
<li>dropping into interactive mode from within <code>setup.py</code>, as explained in <a href="https://stackoverflow.com/a/30065768/908494">Jordan P's answer</a></li>
<li>setting the environment variable <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP" rel="nofollow noreferrer"><code>PYTHONSTARTUP=setup.py</code></a>.</li>
</ul>
<p>That last one is useful if you want to start and stop Python hundreds of times. Just <code>export PYTHONSTARTUP=setup.py</code> and as long as you're in the same shell, it'll always load <code>setup.py</code>. Or, if you want it more permanent, put it in your profile (or Windows System Control Panel Environment Variables or whatever).</p>
<p><code>PYTHONSTARTUP</code> is especially handy with <code>virtualenvwrapper</code> and its <a href="http://virtualenvwrapper.readthedocs.org/en/latest/plugins.html#plugins-post-activate" rel="nofollow noreferrer"><code>post_activate</code></a> hook. Just set the hook to <code>export PYTHONSTARTUP=${VIRTUAL_ENV}/setup.py</code> and you can have a different setup for each environment.</p>
<p>In fact, what <code>-i</code> actually does is, in effect, override <code>PYTHONSTARTUP</code> with a one-time temporary value.</p>
<hr/>
<p>IPython has its own very powerful (but somewhat complicated) <a href="http://ipython.org/ipython-doc/3/config/index.html" rel="nofollow noreferrer">configuration and customization system</a>. You can build a dozen different profiles, and edit each one to enable and disable the use of <code>-i</code> and <code>PYTHONSTARTUP</code>, change <code>PYTHONSTARTUP</code> to use a different variable name, execute various lines of code each time a kernel is started, and so on. Most of what you want is under <a href="http://ipython.org/ipython-doc/3/config/options/terminal.html" rel="nofollow noreferrer">Terminal IPython options</a>, if you're using it at the terminal.</p>
</div>
<span class="comment-copy">Neat, did not know about the env var option.</span>
