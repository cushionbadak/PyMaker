<div class="post-text" itemprop="text">
<p>I'm trying to calculate/generate the CRC32 hash of some random strings using Python but they do not match the values I generate from online sources. Here is what I'm doing on my PC,</p>
<pre><code>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.crc32('hello-world')
-1311505829
</code></pre>
<p>Another approach,</p>
<pre><code>&gt;&gt;&gt; import zlib
&gt;&gt;&gt; zlib.crc32('hello-world')
-1311505829
</code></pre>
<p>The fact that the above results are identical tells me that I'm calling the function correctly. But, if I go to the following online sources,</p>
<ul>
<li><a href="http://www.lammertbies.nl/comm/info/crc-calculation.html" rel="noreferrer">http://www.lammertbies.nl/comm/info/crc-calculation.html</a></li>
<li><a href="http://crc32-checksum.waraxe.us/" rel="noreferrer">http://crc32-checksum.waraxe.us/</a> </li>
<li><a href="http://www.md5calc.com/" rel="noreferrer">http://www.md5calc.com/</a>   (select CRC32B from drop-down)</li>
</ul>
<p>For the string "hello-world" they all give the same value = b1d4025b</p>
<p>Does anyone know what I need to do, to get matching results?</p>
<p>As I was typing this question it occurred to me that I might need to convert my Python result to hex,</p>
<pre><code>&gt;&gt;&gt; hex(zlib.crc32('hello-world'))
'-0x4e2bfda5'
</code></pre>
<p>Unfortunately, that hasn't helped either. :(</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is doing a signed 32-bit CRC.</p>
<p>Those sites are doing an unsigned 32-bit CRC.</p>
<p>The values are the same otherwise, as you can see from this:</p>
<pre><code>&gt;&gt;&gt; 0x100000000 - 0xb1d4025b == 0x4e2bfda5
True
</code></pre>
<p>One quick way to convert from 32-bit signed to 32-bit unsigned is:<sup>*</sup></p>
<pre><code>&gt;&gt;&gt; -1311505829 % (1&lt;&lt;32)
2983461467
</code></pre>
<p>Or, in hex:</p>
<pre><code>&gt;&gt;&gt; hex(-1311505829 % (1&lt;&lt;32))
'0xb1d4025b'
</code></pre>
<p><code>&amp; 0xFFFFFFFF</code> or <code>% 0x100000000</code> or <code>&amp; (2**32-1)</code> or <code>% (2**32)</code> and so on are all equivalent ways to do the same bit-twiddling; it just comes down to which one you find most readable.</p>
<hr/>
<p><sub>* This only works in languages that do floored integer division, like Python (<code>-3 // 2 == -2</code>); in languages that do truncated integer division, like Java (<code>-3 / 2 == -1</code>), you'll still end up with a negative number. And in languages that don't even require that division and mod go together properly, like C, all bets are off—but in C, you'd just cast the bytes to the type you want…</sub></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/zlib.html#zlib.crc32" rel="nofollow noreferrer">zlib.crc32 documentation</a> suggests using the following approach "to generate the same numeric value across all Python versions and platforms".</p>
<pre><code>import zlib
hex(zlib.crc32(b'hello-world') &amp; 0xffffffff)
</code></pre>
<p>The result is <code>0xb1d4025b</code> as expected.</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that python is returning an signed integer (hence the negative number), whereas the others are returning an unsigned integer.</p>
<p>I have tried using a modulus with 2^32, and it gave the same value as these sites.</p>
<pre><code>&gt;&gt;&gt; hex(zlib.crc32('hello-world')% 2**32))                          
'0xb1d4025b'
</code></pre>
</div>
<span class="comment-copy">that's the correct CRC32 of <code>hello-world</code>, what do you expect to be the CRC32?</span>
<span class="comment-copy">@Yeo: The correct CRC32 of <code>hello-world</code> is <code>0xb1d4025b</code> as an unsigned int, <code>-0x4e2bfda5</code> as a signed int. He clearly doesn't know how those two values are related, hence the question.</span>
<span class="comment-copy">I think you mixed up truncation and floor.</span>
<span class="comment-copy">@user2357112: Thanks; fixed.</span>
<span class="comment-copy"><code>Python is doing a signed 32-bit CRC</code>  Just a note: in Python3, this was changed so that it runs an unsigned CRC. See the <a href="https://docs.python.org/3/library/binascii.html#binascii.crc32" rel="nofollow noreferrer">docs</a>.</span>
<span class="comment-copy">This does not depend on how division is done, but the definition of <code>%</code>. In most languages, it is defined as one of: <code>x % y == x - floor(x / y) * y</code> ("same sign as divisor", what Python does. So positive, as <code>2**32</code> is positive), <code>x % y == x - truncate(x / y) * y</code> ("same sign as dividend") or <code>x % y == x - round_towards_zero(x / y)</code> ("positive modulo"). Usually this is the same as /, but not always. To always have positive integer division in other languages, you would do something like this: <code>def positive_mod(a, b): return ((a % b) + b) % b</code>. See <a href="https://en.wikipedia.org/wiki/Modulo_operation" rel="nofollow noreferrer">en.wikipedia.org/wiki/Modulo_operation</a></span>
<span class="comment-copy">On some platforms it'll be signed, others unsigned. That doesn't help the OP, who's on a platform where it's signed.</span>
<span class="comment-copy">I'm curious why this would be different across platforms. Wouldn't Python behavior be identical across the board? (ignoring 2.x and 3.x differences)</span>
<span class="comment-copy">@chronodekar: I'm sure it wouldn't be too hard to find in the source; if you can't find it yourself, you can create a new question. But from a quick test, it's negative on Mac 2.7 and Linux 2.7, positive on Windows 2.7 and Mac 3.5, so I'm pretty sure it's a platform issue, not a 2-vs.-3 issue. Or maybe it's a combination of the two. (Regardless, it doesn't help the OP, whose Python clearly does signed crc32, just like my Mac 2.7 does…)</span>
<span class="comment-copy">@abarnert Thanks, fixed.</span>
<span class="comment-copy">@chronodekar I haven't found any clear answer to that in Python documentation, so I've edited my answer to have the same behavior across all Python versions and platforms.</span>
