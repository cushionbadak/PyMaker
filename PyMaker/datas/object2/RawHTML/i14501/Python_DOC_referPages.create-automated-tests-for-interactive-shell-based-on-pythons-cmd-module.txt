<div class="post-text" itemprop="text">
<p>I am building an interactive shell using Python 3 and the cmd module.  I have already written simple unit tests using py.test to test the individual functions, such as the do_* functions.  I'd like to create more comprehensive tests that actually interact with the shell itself by simulating a user's input.  For example, how could I test the following simulated session:</p>
<pre><code>bash$ console-app.py
md:&gt; show options
  Available Options:
  ------------------
  HOST      The IP address or hostname of the machine to interact with
  PORT      The TCP port number of the server on the HOST
md:&gt; set HOST localhost
  HOST =&gt; 'localhost'
md:&gt; set PORT 2222
  PORT =&gt; '2222'
md:&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can <code>mock</code> <code>input</code> or input stream passed to cmd to inject user input but I find more simple and flexible test  it by <code>onecmd()</code> <code>Cmd</code> API method and trust how <code>Cmd</code> read input. In this way you cannot care how <code>Cmd</code> do the dirty work and test directly by users command: I use <code>cmd</code> both by console and socket and this I cannot care where the stream come from.</p>
<p>Moreover I use <code>onecmd()</code> to test even <code>do_*</code> (and occasionally <code>help_*</code>) methods and make my test less coupled to the code. </p>
<p>Follow a simple example of how I use it. <code>create()</code> and <code>_last_write()</code> are helper methods to build a <code>MyCLI</code> instance and take the last output lines respectively.</p>
<pre><code>from mymodule import MyCLI
from unittest.mock import create_autospec

class TestMyCLI(unittest.TestCase):
    def setUp(self):
        self.mock_stdin = create_autospec(sys.stdin)
        self.mock_stdout = create_autospec(sys.stdout)

    def create(self, server=None):
        return MyCLI(stdin=self.mock_stdin, stdout=self.mock_stdout)

    def _last_write(self, nr=None):
        """:return: last `n` output lines"""
        if nr is None:
            return self.mock_stdout.write.call_args[0][0]
        return "".join(map(lambda c: c[0][0], self.mock_stdout.write.call_args_list[-nr:]))

    def test_active(self):
        """Tesing `active` command"""
        cli = self.create()
        self.assertFalse(cli.onecmd("active"))
        self.assertTrue(self.mock_stdout.flush.called)
        self.assertEqual("Autogain active=False\n", self._last_write())
        self.mock_stdout.reset_mock()
        self.assertFalse(cli.onecmd("active TRue"))
        self.assertTrue(self.mock_stdout.flush.called)
        self.assertEqual("Autogain active=True\n", self._last_write())
        self.assertFalse(cli.onecmd("active 0"))
        self.assertTrue(self.mock_stdout.flush.called)
        self.assertEqual("Autogain active=False\n", self._last_write())

    def test_exit(self):
        """exit command"""
        cli = self.create()
        self.assertTrue(cli.onecmd("exit"))
        self.assertEqual("Goodbay\n", self._last_write())
</code></pre>
<p>Take care that <code>onecmd()</code> return <code>True</code> if your cli should terminate, <code>False</code> otherwise.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use python <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">mock</a> library to simulate user input. Here you will find similar problems with examples <a href="https://stackoverflow.com/questions/21046717/python-mocking-raw-input-in-unittests">1</a>, <a href="https://stackoverflow.com/questions/2617057/supply-inputs-to-python-unit-tests">2</a>.</p>
</div>
