<div class="post-text" itemprop="text">
<p>I know you can run Linux terminal commands through Python scripts using subprocess</p>
<pre><code>subprocess.call(['ls', '-l'])    # for linux
</code></pre>
<p>But I can't find a way to do the same thing on windows</p>
<pre><code>subprocess.call(['dir'])         # for windows
</code></pre>
<p>is it possible using Python without heavy tinkering?</p>
<p>Should I stick to good old fashioned batch files?</p>
</div>
<div class="post-text" itemprop="text">
<p>dir is not a file, it is an internal command, so the shell keyword must be set to True.</p>
<pre><code>subprocess.call(["dir"], shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this </p>
<p>import os</p>
<p>os.system("windows command")</p>
<p>ex: for date </p>
<p>os.system("date")</p>
</div>
<div class="post-text" itemprop="text">
<p>Almost everyone's answers are right but it seems I can do what I need using os.popen -- <code>varStr = os.popen('dir /b *.py').read()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>First of all, to get a directory listing, you should rather use <a href="https://docs.python.org/3/library/os.html?highlight=os%20listdir#os.listdir" rel="nofollow noreferrer"><code>os.listdir()</code></a>. If you invoke <code>dir</code> instead, you'll have to parse its output to make any use of it, which is lots of unnecessary work and is error-prone.</p>
<hr/>
<p>Now,</p>
<p><code>dir</code> is a <code>cmd.exe</code> built-in command, it's not a standalone executable. <code>cmd.exe</code> itself is the executable that implements it.</p>
<p>So, you have two options (use <a href="https://docs.python.org/3/library/subprocess.html?highlight=popen#subprocess.check_output" rel="nofollow noreferrer"><code>check_output</code></a> instead of <code>check_call</code> if you need to get the output instead of just printing it):</p>
<ul>
<li><p>use <code>cmd</code>'s <code>/C</code> switch (execute a command and quit):</p>
<pre><code>subprocess.check_call(['cmd','/c','dir','/s'])
</code></pre></li>
<li><p>use <code>shell=True</code> <a href="https://docs.python.org/3/library/subprocess.html?highlight=popen#popen-constructor" rel="nofollow noreferrer"><code>Popen()</code></a> option (execute command line through the system shell):</p>
<pre><code>subprocess.check_call('dir /s', shell=True)
</code></pre></li>
</ul>
<p>The first way is the recommended one. That's because:</p>
<ul>
<li>In the 2nd case, <code>cmd</code>, will do any shell transformations that it normally would (e.g. splitting the line into arguments, unquoting, environment variable expansion etc). So, <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow noreferrer">your arguments may suddenly become something else and potentially harmful</a>. In particular, if they happen to contain any spaces and <code>cmd</code> special characters and/or keywords.</li>
<li><code>shell=True</code> uses the "default system shell" (pointed to via <code>COMSPEC</code> environment variable in the case of Windows), so if the user has redefined it, your program will behave unexpectedly.</li>
</ul>
</div>
<span class="comment-copy"><code>ipconfig</code> is a Windows command. This should work (and it does on my computer).</span>
<span class="comment-copy">why cant you do the same on windows? That is a windows command. Also if you want the output use <code>check_output("ipconfig")</code></span>
<span class="comment-copy">You can use <code>shell=True</code> <code>check_output("ipconfig",shell=True)</code></span>
<span class="comment-copy">Some Windows commands are built into the shell, such as <code>dir</code>. You need to run the command process itself: <code>'cmd.exe /c dir'</code>. Edit: or do as @PadraicCunningham suggests.</span>
<span class="comment-copy">If you are just looking to get a list of files, you should be using <code>os.listdir</code> or maybe <code>glob.glob</code> rather than shelling out to do a <code>dir</code>.</span>
<span class="comment-copy">The documentation for <code>os.popen()</code> states: <i>Deprecated since version 2.6:</i> This function is obsolete. Use the <a href="https://docs.python.org/2/library/subprocess.html#module-subprocess" rel="nofollow noreferrer"><code>subprocess</code></a> module. Check especially the <a href="https://docs.python.org/2/library/subprocess.html#subprocess-replacements" rel="nofollow noreferrer">Replacing Older Functions with the subprocess Module</a> section.</span>
