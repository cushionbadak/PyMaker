<div class="post-text" itemprop="text">
<p>I apologize this must be a basic question for using dictionaries. I'm learning python, and the objective I have is to compare two dictionaries and recover the Key and Value entries from both entries that are identical. I understand that the order in dictionaries is not relevant like if one is working with a list. But I adopted a code to compare my dictionaries and i just wanted to make sure that the order of the dictionaries does not matter. </p>
<p>The code I have written so far is: </p>
<pre><code>def compare_dict(first,second): 
    with open('Common_hits_python.txt', 'w') as file: 
            for keyone in first: 
                for keytwo in second: 
                    if keytwo == keyone: 
                        if first[keyone] == second[keytwo]: 
                            file.write(keyone + "\t" + first[keyone] + "\n") 
</code></pre>
<p>Any recommendations would be appreciated. I apologize for the redundany in the code above. But if someone could confirm that comparing two dictionaries this way does not require the key to be in the same order would great. Other ways of writing the function would be really appreciated as well. </p>
</div>
<div class="post-text" itemprop="text">
<p>Since you loop over both dictionaries and compare all the combinations, no, order doesn't matter. Every key in one dictionary is compared with every key in the other dictionary, eventually.</p>
<p>It is not a very efficient way to test for matching keys, however. Testing if a key is present is as simple as <code>keyone in second</code>, no need to loop over all the keys in <code>second</code> here.</p>
<p>Better still, you can use set intersections instead:</p>
<pre><code>for key, value in first.viewitems() &amp; second.viewitems():
    # loops over all key - value pairs that match in both.
    file.write('{}\t{}\n'.format(key, value)) 
</code></pre>
<p>This uses <a href="https://docs.python.org/2/library/stdtypes.html#dictionary-view-objects" rel="nofollow">dictionary view objects</a>; if you are using Python 3, then you can use <code>first.items() &amp; second.items()</code> as dictionaries there return dictionary views by default.</p>
<p>Using <code>dict.viewitems()</code> as a set only works if the values are hashable too, but since you are treating your values as strings when writing to the file I assumed they were.</p>
<p>If your values are <em>not</em> hashable, you'll need to validate that the values match, but you can still use views and intersect just the keys:</p>
<pre><code>for key in first.viewkeys() &amp; second.viewkeys():
    # loops over all keys that match in both.
    if first[key] == second[key]:
        file.write('{}\t{}\n'.format(key, first[key])) 
</code></pre>
<p>Again, in Python 3, use <code>first.keys() &amp; second.keys()</code> for the intersection of the two dictionaries by keys.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your way of doing it is valid. As you look through both lists, the order of the dictionaries does not matter.
You could do this instead, to optimize your code.</p>
<pre><code>for keyone in first: 
    if keyone in second: # returns true if keyone is present in second.
        if first[keyone] == second[keyone]:
             file.write(keyone + "\t" + first[keyone] + "\n") 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The keys of a dictionary are effectively a set, and Python already has a built-in set type with an efficient <code>intersection</code> method.  This will produce a set of keys that are common to both dictionaries:</p>
<pre><code>dict0 = {...}
dict1 = {...}
set0 = set(dict0)
set1 = set(dict1)
keys = set0.intersection(set1)
</code></pre>
<p>Your goal is to build a dictionary out of these keys, which can be done with a dictionary comprehension.  It will require a condition to keep out the keys that have unequal values in the two original dictionaries:</p>
<pre><code>new_dict = {k: dict0[k] for k in keys if dict0[k] == dict1[k]}
</code></pre>
<p>Depending on your intended use for the new dictionary, you might want to <a href="https://docs.python.org/3/library/copy.html" rel="nofollow"><code>copy</code> or <code>deepcopy</code></a> the old dictionary's values into the new one.</p>
</div>
<span class="comment-copy">Is this code working for you now?</span>
<span class="comment-copy">yes I retrieve an output that looks right but its quite a large dataset (74,000 lines approximately) for both dictionaries and so I wanted to see if others saw the same logic.</span>
<span class="comment-copy">In python, for comments, use <code>#</code> not <code>//</code></span>
<span class="comment-copy">Yes of course! The struggle of programming in multiple languages..</span>
