<div class="post-text" itemprop="text">
<p>i use threading.semaphore in my code and i wonder if there is way i can use code like This</p>
<pre><code>if(sema.acquire()!=True):
   #do Somthing
</code></pre>
<p>i want to use this piece of code in loop so i need to get if semaphore is taken or it's released 
 or use code like this in my code</p>
<pre><code>if(sema.get_value!=1):
  #do something
</code></pre>
<p>i read this doc but i can't find my answer
<a href="https://docs.python.org/3/library/threading.html" rel="nofollow">https://docs.python.org/3/library/threading.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Semaphores are designed around the idea, that threads just grab one, and wait until it becomes available, because it's not really predictable in which order they wil be acquired. </p>
<p>The counter is not part of the abstraction called 'Semaphore'. It is not guaranteed, that your access to the semaphore counter is atomic. If you could peek into the counter, and another thread acquires the semaphore before you do anything with it, what should you do?</p>
<p>Without breaking your code you can't know the value. </p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers are correct but for whom reaches this page in order to actually know how to get the semaphore value you can do it like this:</p>
<pre><code>&gt;&gt;&gt; from threading import Semaphore
&gt;&gt;&gt; sem = Semaphore(5)
&gt;&gt;&gt; sem._Semaphore__value
5
&gt;&gt;&gt; sem.acquire()
True
&gt;&gt;&gt; sem._Semaphore__value
4
</code></pre>
<p><strong>Be aware</strong> that the <code>_Semaphore__</code> that prefixes the name of the variable <code>value</code> means that this is an implementation detail. Do not write production code based on this variable as it may change in the future. Moreover do not try to edit the value manually, otherwise.. any bad thing can happen.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use</p>
<pre><code>if(sema.acquire(blocking=False)):
    # Do something with lock taken
    sema.release()
else:
    # Do something in case when lock is taken by other
</code></pre>
<p>Such mechanism is useful for avoiding deadlocks in complex cases, but also may be used for other purposes.</p>
<p><a href="https://docs.python.org/2/library/threading.html#threading.Semaphore.acquire" rel="nofollow noreferrer">More information on acquire function</a></p>
</div>
<div class="post-text" itemprop="text">
<p>In python3.6, you can get is like this:</p>
<pre><code>from threading import Semaphore
sem = Semaphore(5)
print(sem._value)
</code></pre>
<p>This value is useful for debug</p>
</div>
<span class="comment-copy">Don't compare booleans with <code>!=</code>; use <code>if not sema.acquire()</code> instead.</span>
