<div class="post-text" itemprop="text">
<p>Is there a difference between the two code snippets:</p>
<pre><code>if __name__ == '__main__':
  sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
  main()
</code></pre>
<p>Vs</p>
<pre><code>if __name__ == '__main__':
  sys.argv[0] = re.sub(r'(-script\.pyw|\.exe)?$', '', sys.argv[0])
  sys.exit(main())
</code></pre>
<p>I see, most python executables in my ubuntu /usr/bin (or) /usr/local/bin directory use sys.exit. Doesn't the process stop, once the function returns. </p>
<p>Why do people wrap their executable functions inside sys.exit?</p>
<p>Note: This code is taken from openstack-nova python client and this question focusses only on python's sys.exit and not about openstack internals.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are actually two ways to use <a href="https://docs.python.org/3/library/sys.html#sys.exit" rel="nofollow"><code>sys.exit</code></a>, as explained in the docs.</p>
<p>Your <code>main</code> can return 0 on success and 1 (or any other number from 2-127) on error; that number becomes your program's exit status. (The number 2 has a special meaning; it implies that the failure was because of invalid arguments. Some argument-parsing libraries will automatically <code>sys.exit(2)</code> if they can't parse the command line. The other numbers 3-127 all mean whatever you want them to.)</p>
<p>Or you can return <code>None</code> on success, and a string (or any object with a useful <code>__str__</code> method) on failure. A <code>None</code> means exit status 0, anything else gets <code>print</code>ed to <code>stderr</code> and gives exit status 1.</p>
<p>It used to be traditional to use the second form to signal failure by doing something like <code>return "Failed to open file"</code> from your <code>main</code> function, and the docs still mention doing that, but it's not very common anymore; it's just as easy, and more flexible, to output what you want and return the number you want.</p>
<hr/>
<p>If you just fall off the end of the script without a <code>sys.exit</code>, that's equivalent to <code>sys.exit(0)</code>; if you exit through an exception, that's equivalent to passing the traceback to <code>sys.exit</code>â€”it prints the traceback to <code>stderr</code> and exits with status 1.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.exit()</code> is there to pass the right exit code back to shell. If you want to differentiate the response in case of (for example) bad authentication, network issues, broken response, etc. exit codes are useful for that.</p>
<p>If you don't use specific <code>sys.exit(value)</code>, you have two options only - success (exit code 0), or exception was thrown (exit code 1).</p>
</div>
<span class="comment-copy">Can you show us the source of <code>main()</code>? I'm guessing that it returns an exit code, but I can't tell based on the code you've provided.</span>
<span class="comment-copy">As a side note, most of the Python executables you'll find in those directories are probably either (a) part of Ubuntu, (b) generated by setuptools' standard entry-points stuff, or (c) both. So, it's not too surprising they're all similar.</span>
