<div class="post-text" itemprop="text">
<p>I have a Python script that is reading from a file.
The first command counts the lines. The second one prints the second line although the second one is not working.</p>
<pre><code>lv_file = open("filename.txt", "rw+")

# count the number of lines =================================
lv_cnt = 0
for row in lv_file.xreadlines():
    lv_cnt = lv_cnt + 1

# print the second line =====================================
la_lines = la_file.readlines()
print la_lines[2]

lv_file.close()
</code></pre>
<p>When I write it like this it works but I don't see why I would have to close the file and reopen it to get it to work. Is there some kind of functionality that I am misusing?</p>
<pre><code>lv_file = open("filename.txt", "rw+")

# count the number of lines =================================
lv_cnt = 0
for row in lv_file.xreadlines():
    lv_cnt = lv_cnt + 1

lv_file.close()

lv_file = open("filename.txt", "rw+")

# print the second line =====================================
la_lines = la_file.readlines()
print la_lines[2]

lv_file.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A file object is an iterator. Once you've gone through all the lines, the iterator is exhausted, and further reads will do nothing.</p>
<p>To avoid closing and reopening the file, you can use <code>seek</code> to rewind to the start:</p>
<pre><code>lv_file.seek(0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you are after is <a href="https://docs.python.org/3/library/io.html?highlight=seek#io.IOBase.seek" rel="nofollow"><code>file.seek()</code></a>:</p>
<p><strong>Example:</strong> (<em>based on your code</em>)</p>
<pre><code>lv_file = open("filename.txt", "rw+")

# count the number of lines =================================
lv_cnt = 0
for row in lv_file.xreadlines():
    lv_cnt = lv_cnt + 1

lv_file.seek(0)  # reset file pointer

# print the second line =====================================
la_lines = la_file.readlines()
print la_lines[2]

lv_file.close()
</code></pre>
<p>This will reset the file pointer back to it's starting position.</p>
<p><code>pydoc file.seek</code>:</p>
<blockquote>
<p><code>seek(offset, whence=SEEK_SET)</code> Change the stream position to the
  given byte offset. offset is interpreted relative to the position
  indicated by whence. Values for whence are:</p>
<p>SEEK_SET or 0 – start of the stream (the default); offset should be
  zero or positive SEEK_CUR or 1 – current stream position; offset may
  be negative SEEK_END or 2 – end of the stream; offset is usually
  negative Return the new absolute position.</p>
<p>New in version 2.7: The SEEK_* constants</p>
</blockquote>
<p><strong>Update:</strong> A better way of counting the no. of lines in a file iteratively and only caring about the 2nd line:</p>
<pre><code>def nth_line_and_count(filename, n):
    """Return the nth line in a file (zero index) and the no. of lines"""

    count = 0

    with open(filename, "r") as f:
        for i, line in enumerate(f):
            count += 1
            if i == n:
                value = line

    return count, value

nlines, line = nth_line_and_count("filename.txt", 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since xreadlines() keeps a pointer to the last line it sent you, when you do </p>
<pre><code>la_lines = la_file.readlines()
</code></pre>
<p>it basically remembers the index of the last line it gave you.
when you close the file and then open it, it create a new iterator, and it again points to line 0.</p>
</div>
<span class="comment-copy"><code>la_lines[2]</code> wont get you to the second line instead it will return the <b>third</b> line of the file.</span>
<span class="comment-copy">Deprecated since release 2.3. Use for line in file instead -- <a href="https://docs.python.org/release/2.3/lib/module-xreadlines.html" rel="nofollow noreferrer">docs.python.org/release/2.3/lib/module-xreadlines.html</a></span>
