<div class="post-text" itemprop="text">
<p>I am attempting to use <a href="https://docs.python.org/2/library/functions.html#all" rel="nofollow"><code>all()</code></a> but it is not working for me:</p>
<pre><code>&gt;&gt;&gt; names = ["Rhonda", "Ryan", "Red Rackham", "Paul"]
&gt;&gt;&gt; all([name for name in names if name[0] == "R"])
True
&gt;&gt;&gt; 
</code></pre>
<p>I am trying to check if all the names begin with <code>"R"</code>, and even though I added <code>"Paul"</code> to <code>names</code>, <code>all()</code> still returns <code>True</code>. How do I fix this so that <code>all()</code> returns <code>False</code> until <code>"Paul"</code> is removed?</p>
</div>
<div class="post-text" itemprop="text">
<p>You misunderstand how <code>all</code> works.  From the <a href="https://docs.python.org/3/library/functions.html#all" rel="nofollow">docs</a>:</p>
<blockquote>
<p><code>all(iterable)</code></p>
<p>Return <code>True</code> if all elements of the <code>iterable</code> are true (or if the
  <code>iterable</code> is empty).</p>
</blockquote>
<p>In your code, you are first collecting all names that start with <code>R</code> into a list and then passing this list to <code>all</code>.  Doing this will always return <code>True</code> because non-empty strings evaluate to <code>True</code>.</p>
<hr/>
<p>Instead, you should write:</p>
<pre><code>all(name[0] == "R" for name in names)
</code></pre>
<p>This will pass an iterable of booleans to <code>all</code>.  If all of them are <code>True</code>, the function will return <code>True</code>; otherwise, it will return <code>False</code>.</p>
<p>As an added bonus, the result will now be computed lazily because we used a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression" rel="nofollow">generator expression</a> instead of a list comprehension.  With the list comprehension, the code needed to test <em>all</em> strings before determining a result.  The new code however will only check as many as necessary. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>names = ["Rhonda", "Ryan", "Red Rackham", "Paul"]
print all(map(lambda name: name[0] == "R", names))
# prints False
names = ["Rhonda", "Ryan", "Red Rackham"]
print all(map(lambda name: name[0] == "R", names))
# prints True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>names = ["Rhonda", "Ryan", "Red Rackham", "Paul"]
if all(c[0] == "R" for c in names):
    print "ALL MATCH"
</code></pre>
<hr/>
<p>Demo:</p>
<p><a href="http://ideone.com/KenqJl" rel="nofollow">http://ideone.com/KenqJl</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The reason why you were getting wrong result was because you are already creating a new list using list comprehension by applying the desired condition, So if we do a little breakdown then:</p>
<pre><code>&gt;&gt;&gt; print [name for name in names if name[0] == "R"]
&gt;&gt;&gt; ['Rhonda', 'Ryan', 'Red Rackham']
&gt;&gt;&gt; print all(['Rhonda', 'Ryan', 'Red Rackham'])
&gt;&gt;&gt; True
</code></pre>
<p>So the correct way may be:</p>
<pre><code>names = ["Rhonda", "Ryan", "Red Rackham", "Paul"]

res = all(map(lambda x : x[0]=="R", names))
# map() returns: [True, True, True, False] 
# all([True, True, True, False]) == False
print res
</code></pre>
</div>
<span class="comment-copy">What were you expecting ?</span>
<span class="comment-copy">Aside: strings have a <code>startswith</code> method, so <code>name.startswith("R")</code> works too.</span>
<span class="comment-copy"><code>if all(c[0] == "R" for c in names):</code></span>
<span class="comment-copy">Thanks! I was trying to put an <i>evaluating</i> list comprehension in the <code>all</code> :)</span>
