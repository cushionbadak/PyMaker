<div class="post-text" itemprop="text">
<p>As far as I know, Python's threading library uses POSIX threads for threading and it does not run on multiple cores. So is it possible that we implement a multicore threading system for Python threads using Open MP?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow">multiprocessing</a>:</p>
<blockquote>
<p>The multiprocessing package offers both local and remote concurrency,
  effectively side-stepping the <a href="https://docs.python.org/3/glossary.html#term-global-interpreter-lock" rel="nofollow">Global Interpreter Lock</a> by using
  subprocesses instead of threads. Due to this, the multiprocessing
  module allows the programmer to fully leverage multiple processors on
  a given machine. It runs on both Unix and Windows.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>CPython ("default" Python implementation) is not utilizing multiple cores because of <a href="http://en.wikipedia.org/wiki/Global_Interpreter_Lock" rel="nofollow">Global Interpreter Lock</a>. So every Python statement has to hold that lock. </p>
<p>But modules that are written in C may release interpreter lock before time-consuming operation. I.e. <strong>numpy</strong> does that: <a href="http://wiki.scipy.org/ParallelProgramming" rel="nofollow">http://wiki.scipy.org/ParallelProgramming</a></p>
<p>They have handy example for that:</p>
<pre><code>import numpy as np
import math

def f(x):
    print x
    # This statements hold GIL and cannot be run
    # in two parallel threads 
    y = [1]*10000000
    [math.exp(i) for i in y]

def g(x):
    print x
    # This statements fall to NumPy C code
    # than release GIL and can be multithreaded
    y = np.ones(10000000)
    np.exp(y)
</code></pre>
<p>Since OpenMP is also a tool for C, I think that is what you seek for.</p>
</div>
<div class="post-text" itemprop="text">
<p>CPython has a Global Interpreter Lock a.k.a <code>GIL</code>. The GIL ensures that only one thread runs in the interpreter at once. Can your multicore threading system beat the GIL?</p>
<p>More about GIL:</p>
<ul>
<li><a href="http://www.dabeaz.com/python/UnderstandingGIL.pdf" rel="nofollow">Understanding the Python GIL</a></li>
<li><a href="https://stackoverflow.com/questions/265687/why-the-global-interpreter-lock">Why the Global Interpreter Lock?</a></li>
</ul>
</div>
<span class="comment-copy">Who's stopping you?</span>
<span class="comment-copy">I think the <code>GIL</code> is the issue : <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">wiki.python.org/moin/GlobalInterpreterLock</a></span>
<span class="comment-copy">See the wiki on <a href="https://wiki.python.org/moin/ParallelProcessing" rel="nofollow noreferrer">parallel processing</a> for ways to do it.</span>
<span class="comment-copy">@Rayu please consider to mark an answer as accepted and upvote  answers that helped you</span>
