<div class="post-text" itemprop="text">
<p>I have a list of objects(rectangles). Each object has 2 attributes(height and width). I would like to get all 'orientations'(not sure how to call it exactly) of this list, so all the 2^n(for a list of n rectangles) orientations in which height and width of the rectangles are (possibly) swapped. For a list of 3 objects this would look like this(the order is not important):</p>
<pre><code>[R1(w, h), R2(w2, h2), R3(w3, h3)]
[R1(w, h), R2(w2, h2), R3(h3, w3)]
[R1(w, h), R2(h2, w2), R3(w3, h3)]
[R1(w, h), R2(h2, w2), R3(h3, w3)]
[R1(h, w), R2(w2, h2), R3(w3, h3)]
[R1(h, w), R2(w2, h2), R3(h3, w3)]
[R1(h, w), R2(h2, w2), R3(w3, h3)]
[R1(h, w), R2(h2, w2), R3(h3, w3)]
</code></pre>
<p>My rectangle-class looks like this:</p>
<pre><code>class Rectangle:
    def __init__(self, height, width):
        self.height = height
        self.width = width

    def place(self):
        """Method to place tile in a larger grid"""

    def remove(self):
        """Method to remove tile from larger grid"""
</code></pre>
<p>Is there an easy way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Preparation:</p>
<pre><code>class Rectangle:
    def __init__(self, height, width):
        self.height = height
        self.width = width

    def flipped(self):
        return Rectangle(self.width, self.height)

    def __repr__(self):
        return 'Rectangle({}, {})'.format(self.height, self.width)

rectangles = [Rectangle(1, 10), Rectangle(2, 20), Rectangle(3, 30)]
</code></pre>
<p>Solution:</p>
<pre><code>from itertools import product
for orientation in product(*zip(rectangles, map(Rectangle.flipped, rectangles))):
    print(orientation)
</code></pre>
<p>Output:</p>
<pre><code>(Rectangle(1, 10), Rectangle(2, 20), Rectangle(3, 30))
(Rectangle(1, 10), Rectangle(2, 20), Rectangle(30, 3))
(Rectangle(1, 10), Rectangle(20, 2), Rectangle(3, 30))
(Rectangle(1, 10), Rectangle(20, 2), Rectangle(30, 3))
(Rectangle(10, 1), Rectangle(2, 20), Rectangle(3, 30))
(Rectangle(10, 1), Rectangle(2, 20), Rectangle(30, 3))
(Rectangle(10, 1), Rectangle(20, 2), Rectangle(3, 30))
(Rectangle(10, 1), Rectangle(20, 2), Rectangle(30, 3))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's some Python code that does what you want. It should easily run on Python 3 if you fix the print statement in the <code>show()</code> function.</p>
<pre><code>#!/usr/bin/env python

''' Build a list of lists containing all combinations of orientations
    (i.e. landscape &amp; portrait) for a list of Rectangle objects

    From http://stackoverflow.com/q/29988288/4014959

    Written by PM 2Ring 2015.05.02
'''

from itertools import product

#A simple rectangle class
class Rectangle(object):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def __repr__(self):
        return 'Rectangle({0}, {1})'.format(self.width, self.height)

    def transpose(self):
        return Rectangle(self.height, self.width)

#Helper function to print sequences
def show(seq):
    for item in seq:
        print item
    print

#A list of rectangle objects
rects_orig = [
    Rectangle(1, 2), 
    Rectangle(3, 4), 
    Rectangle(5, 6),
]
show(rects_orig)

#The transposed versions of those rectangles
rects_rot = [rect.transpose() for rect in rects_orig]
show(rects_rot)

#Join both lists into a list of tuples
rects_both = zip(rects_orig, rects_rot) 
show(rects_both)

#Build the combinations.
combos = [] 
for align in product([0, 1], repeat=len(rects_both)):
   combos.append([rect_pair[a] for a, rect_pair in zip(align, rects_both)])

show(combos)
</code></pre>
<p><strong>output</strong></p>
<pre><code>Rectangle(1, 2)
Rectangle(3, 4)
Rectangle(5, 6)

Rectangle(2, 1)
Rectangle(4, 3)
Rectangle(6, 5)

(Rectangle(1, 2), Rectangle(2, 1))
(Rectangle(3, 4), Rectangle(4, 3))
(Rectangle(5, 6), Rectangle(6, 5))

[Rectangle(1, 2), Rectangle(3, 4), Rectangle(5, 6)]
[Rectangle(1, 2), Rectangle(3, 4), Rectangle(6, 5)]
[Rectangle(1, 2), Rectangle(4, 3), Rectangle(5, 6)]
[Rectangle(1, 2), Rectangle(4, 3), Rectangle(6, 5)]
[Rectangle(2, 1), Rectangle(3, 4), Rectangle(5, 6)]
[Rectangle(2, 1), Rectangle(3, 4), Rectangle(6, 5)]
[Rectangle(2, 1), Rectangle(4, 3), Rectangle(5, 6)]
[Rectangle(2, 1), Rectangle(4, 3), Rectangle(6, 5)]
</code></pre>
</div>
<span class="comment-copy">I partially understood your question but the data is not adequate to get a solid foundation of the problem you are talking about. Can you be more clear ?</span>
<span class="comment-copy">I have a list of objects(rectangles). These rectangles can be rotated(so height and width are swapped). For a list of say 8 rectangles, this results in 2^8 different orientations of the 8 rectangles. Is there an easy way to generate these 2^8 different orientations? Hope this makes it a bit more clear..</span>
<span class="comment-copy"><code>[[R1(w, h), R2(w, h), R3(w, h)] for _ in range(2**len([R1(w, h), R2(w, h), R3(w, h)]))]</code> should work. You can store that list in a variable and use it.</span>
<span class="comment-copy">This sounds like a job for <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a>, specifically, the <code>product</code> method. You'll also need a function or method that can receive a rectangle and return a transposed (rotated ) rectangle. But that should be fairly easy to do. Can you add a definition for your rectangle class to your question? If your actual class is complicated, just post a stripped-down version, so we can see how to access the width &amp; height attributes.</span>
<span class="comment-copy">Here's a good start: <code>product([orientation1,orientation2], repeat=len(objects))</code></span>
<span class="comment-copy">Well, I <i>did</i> say  "there may be some fancier itertools trick". :) That use of <code>map</code> is nice; I really need to get more practice using it...</span>
<span class="comment-copy">It's not a trick, though, it's <i>exactly</i> how product is supposed to be used. <i>Yours</i> was a trick :-)</span>
<span class="comment-copy">Yeah, ok. I suppose I ought to admit that I'm not as familiar with the proper use of itertools as I should be...</span>
<span class="comment-copy">BTW, feel free to drop by the <a href="http://chat.stackoverflow.com/rooms/6/python">SO Python Chat room</a> some time.</span>
<span class="comment-copy">@PM2Ring Thanks, I didn't know the chat. I'll have a look.</span>
<span class="comment-copy">Thank you! That does exactly what I was looking for:)</span>
<span class="comment-copy">My pleasure! That code <i>could</i> be condensed down into less lines, but I think it's more readable in it's current state. Also, there may be some fancier itertools trick to achieve the desired result with less code, but I prefer straight-forward code to code that I won't be able to figure out in 6 months time. :)</span>
<span class="comment-copy">It's not straight-forward if you take that complicated <code>[0,1]</code> detour. See my answer for the actual straight-forward use of <code>product</code>.</span>
<span class="comment-copy">@StefanPochmann: Good call. I ought to know better than to code at 1 AM. :)</span>
<span class="comment-copy">@Koen: You should "accept" Stefan's answer. It's better than mine, so he deserves (some of :) ) the points.</span>
