<div class="post-text" itemprop="text">
<p>I am still having troubles adjusting to 'more pythonian ways' of writing code sometimes ... right now I am iterating over some values (x). I have many arrays and I always compare the first value of all the arrays, the second value ... shortly: a mean value of all the entries in an array by position in the array.</p>
<pre><code>   sum_mean_x = []
   for i in range(0, int_points):
       for j in range(0, len(x)):
           mean_x.append(x[j][i])
       sum_mean_x.append(sum(mean_x)/len(x))
       mean_x = []
</code></pre>
<p>I am pretty sure that can be done super beautiful. I know I could change the second last line to something like <code>sum_mean_x.append(mean_x.mean)</code> but, I guess I miss some serious magic this way.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://www.numpy.org/">numpy</a> package for numeric processing. Suppose you have the following three lists in plain Python:</p>
<pre><code>a1 = [1., 4., 6.]
a2 = [3., 7., 3.]
a3 = [2., 0., -1.]
</code></pre>
<p>And you want to get the mean value for each position. Arrange the vectors in a single array:</p>
<pre><code>import numpy as np
a = np.array([a1, a2, a3])
</code></pre>
<p>Then you can get the per-column mean like this:</p>
<pre><code>&gt;&gt;&gt; a.mean(axis=0)
array([ 2.        ,  3.66666667,  2.66666667])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like what you're trying to do is treat your list of lists are a 2D array where each list is a row, and then average each column.</p>
<p>The obvious way to do this is to use NumPy, make it an actual 2D array, and just call <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html#numpy.mean" rel="nofollow noreferrer"><code>mean</code></a> by columns. See <a href="https://stackoverflow.com/a/29963570/908494">simleo's answer</a>, which is better than what I was going to add here. :)</p>
<p>But if you want to stick with lists of lists, going by column effectively means transposing, and that means <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a>:</p>
<pre><code>&gt;&gt;&gt; from statistics import mean
&gt;&gt;&gt; arrs = [[1., 2., 3.], [0., 0., 0.], [2., 4., 6.]]
&gt;&gt;&gt; column_means = [mean(col) for col in zip(*arrs)]
&gt;&gt;&gt; column_means
[1.0, 2.0, 3.0]
</code></pre>
<p>That <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistics.mean</code></a> is only in the stdlib in 3.4+, but it's based on <a href="https://pypi.python.org/pypi/stats/" rel="nofollow noreferrer"><code>stats</code></a> on PyPI, and if yur Python is too old even for that, you can write it on your own. Getting the error handling right on the edge cases is tricky, so you probably want to look at the code from <code>statistics</code>, but if you're only dealing with values near 1, you can just do it the obvious way:</p>
<pre><code>def mean(iterable):
    total, length = 0.0, 0
    for value in iterable:
        total += value
        length += 1
    return total / length
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>ar1 = [1,2,3,4,5,6]
ar2 = [3,5,7,2,5,7]

means = [ (i+j)/2.0 for (i,j) in zip(ar1, ar2)]
print(means)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You mean something like</p>
<pre><code>import numpy as np    

ar1 = [1,2,3,4,5,6]
ar2 = [3,5,7,2,5,7]

mean_list = []
for i, j in zip(ar1, ar2):
    mean_list.append(np.array([i,j]).mean())

print(mean_list)
[2.0, 3.5, 5.0, 3.0, 5.0, 6.5]
</code></pre>
</div>
<span class="comment-copy">Can you add an example of <code>int_points</code> and <code>x</code>?</span>
<span class="comment-copy">First, the most pythonic way to get the mean of something is probably to call <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistics.mean</code></a> if you have some kind of Python iterable like a <code>list</code>, or the <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html#numpy.mean" rel="nofollow noreferrer"><code>ndarray.mean</code></a> method if you actually have (NumPy) arrays.</span>
<span class="comment-copy">+1 you beat me to the exact same answer. I was almost writing at the <code>zip(*arrs)</code> part. Strangely, I was using the exact same variable name <code>arrs</code>!</span>
<span class="comment-copy">@ComputerFellow: There have been at least like 5 questions in the past hour where <code>zip</code> was the core of the answer, and at least 2 of them used <code>arrs</code> as a variable name (and all of them referred to "arrays" despite actually having lists) so maybe that's why it was in both our heads?</span>
<span class="comment-copy">The question says "I have many arrays." So an answer that doesn't scale to more than 2 probably isn't helpful.</span>
<span class="comment-copy">Your true I misunderstood the question.</span>
<span class="comment-copy">Mixing NumPy and iteration like this is usually not a good idea. Once you bring in NumPy, you can do the whole thing in NumPy a lot more simply (and efficiently, if that matters), as <a href="http://stackoverflow.com/a/29963570/908494">simleo's answer</a> shows.</span>
