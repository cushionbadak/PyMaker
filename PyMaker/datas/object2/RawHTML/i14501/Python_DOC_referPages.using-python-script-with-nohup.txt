<div class="post-text" itemprop="text">
<p>I am having a strange problem (this is my first exercise using python).</p>
<p>I have a python script called run_class. I want to store the output (to stdout and stderr) in run-class.out.</p>
<p>So I do the following (after looking on the web at some examples)</p>
<pre><code>nohup ./run_class &gt; run-class.out &amp;
</code></pre>
<p>I get:</p>
<blockquote>
<p>[1] 13553 
  ~$ nohup: ignoring input and redirecting stderr to stdout</p>
</blockquote>
<p>So, all is well for now. Indeed the program runs fine until I log out from the remote. Then the program comes crashing down. Logging out is exactly what is causing the program to crash. Not logging out takes the program to run to completion.</p>
<p>The run-class.out has the following error:</p>
<pre><code>Traceback (most recent call last):                                              
  File "./run_class", line 84, in &lt;module&gt;                                      
    wait_til_free(checkseconds)                                                 
  File "./run_class", line 53, in wait_til_free                                 
    while busy():                                                               
  File "./run_class", line 40, in busy                                          
    kmns_procs = subprocess.check_output(['ps', '-a', '-ocomm=']).splitlines()  
  File "/usr/lib64/python2.7/subprocess.py", line 573, in check_output          
    raise CalledProcessError(retcode, cmd, output=output)                       
subprocess.CalledProcessError: Command '['ps', '-a', '-ocomm=']' returned non-zero exit status 1                                                               
</code></pre>
<p>What is wrong with my nohup?</p>
<p>Many thanks!</p>
<p>Note that my command works without exiting, so I don't quite understand the problem.</p>
<p>Btw: here is the program:</p>
<pre><code>#!/usr/bin/python

import os
import os.path
import sys

ncpus = 8
datadir = "data" # double quotes preferred to allow for apostrophe's
ndatasets = 100
checkseconds = 1
basetries = 100

gs = [0.001, 0.005, 0.01, 0.05, 0.1]
trueks = [4, 7, 10]
ps = [4, 10, 100]
ns = [10, 100]  # times k left 1000 out, would be too much
shapes = ["HomSp"]
methods = ["Ma67"]


def busy(): 
    import subprocess
    output = subprocess.check_output("uptime", shell=False)
    words = output.split()
    sys.stderr.write("%s\n"%(output)) 
    try:
        kmns_procs = subprocess.check_output(['ps', '-a', '-ocomm=']).splitlines()
    except subprocess.CalledProcessError as x:
        print('ps returned {}, time to quit'.format(x))
        return
    kmns_wrds = 0
    procs = ["run_kmeans", "AdjRand", "BHI", "Diag", "ProAgree", "VarInf", "R"]
    for i in procs:
        kmns_wrds += kmns_procs.count(i)

    wrds=words[9]
    ldavg=float(wrds.strip(','))+0.8
    sys.stderr.write("%s %s\n"%(ldavg,kmns_wrds))
    return max(ldavg, kmns_wrds) &gt;= ncpus


def wait_til_free(myseconds):
    while busy():
        import time
        import sys
        time.sleep(myseconds)

if True:
    for method in methods:
        for shape in shapes:
            for truek in trueks:
                for p in ps:
                    for n in ns:
                        actualn = n*truek
                for g in gs:
                            fnmprfix = "%sK%sp%sn%sg%s"%(shape,truek,p,n,g)
                            fname = "%sx.dat"%(fnmprfix)
                            for k in range(2*truek+2)[2:(2*truek+2)]:
                                ofprfix = "%sk%s"%(fnmprfix,k)
                                ntries =  actualn*p*k*basetries
                                ofname = "%s/estk/class/%s.dat"%(datadir,ofprfix,)
                                if os.path.isfile(ofname):
                                    continue
                                else :
                                    wait_til_free(checkseconds)
                                    mycmd = "nice ../kmeans/run_kmeans -# %s -N %s -n %s -p %s -K %s -D %s -X %s -i estk/class/%s.dat -t estk/time/%s_time.dat -z estk/time/%s_itime.dat -w estk/wss/%s_wss.dat  -e estk/error/%s_error.dat -c estk/mu/%s_Mu.dat -m %s &amp;"%(ndatasets,ntries,actualn,p,k,datadir,fname,ofprfix,ofprfix,ofprfix,ofprfix,ofprfix,ofprfix,method)
                                    sys.stderr.write("%s\n"%(mycmd))
                                    from subprocess import call
                                    call(mycmd, shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://pubs.opengroup.org/onlinepubs/009604499/utilities/ps.html" rel="nofollow"><code>ps</code></a> command is returning an error (a nonzero exit status). Possibly just from being interrupted by a signal by your attempt to log out. Possibly even the very <code>SIGHUP</code> you didn't want. (Note that <code>bash</code> will explicitly send <code>SIGHUP</code> to every job in the job control table if it gets <code>SIGHUP</code>'d, and if the <code>huponexit</code> option is set, it does so for <em>any</em> exit reason.)</p>
<p>You're using <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow"><code>check_output</code></a>. The <code>check</code> part of the name means "check the exit status, and if it's nonzero, raise an exception". So, of course it raises an exception.</p>
<p>If you want to handle the exception, you can use a <code>try</code> statement. For example:</p>
<pre><code>try:
    kmns_procs = subprocess.check_output(['ps', '-a', '-ocomm=']).splitlines()
except subprocess.CalledProcessError as x:
    print('ps returned {}, time to quit'.format(x))
    return
do_stuff(output)
</code></pre>
<p>But you can also just use a <code>Popen</code> directly. The high-level wrapper functions like <code>check_output</code> are really simple; basically, all they do is create a <code>Popen</code>, call <code>communicate</code> on it, and check the exit status. For example, here's <a href="https://hg.python.org/cpython/file/3.4/Lib/subprocess.py#l565" rel="nofollow">the source to the 3.4 version of <code>check_output</code></a>. You can do the same thing manually (and without all the complexity of dealing with different edge cases that can't arise for your use, creating and raising exceptions that you don't actually want, etc.). For example:</p>
<pre><code>ps = subprocess.Popen(['ps', '-a', '-ocomm='], stdout=subprocess.PIPE)
output, _ = ps.communicate()
if ps.poll():
    print('ps returned {}, time to quit'.format(ps.poll()))
    return
do_stuff(output)
</code></pre>
<hr/>
<p>Meanwhile, if you just want to know how to make sure you never get <code>SIGHUP</code>'d, don't just <code>nohup</code> the process, also <a href="https://www.gnu.org/software/bash/manual/html_node/Signals.html#Signals" rel="nofollow"><code>disown</code> it</a>.</p>
</div>
<span class="comment-copy">Do you see any error at the end of run-class.out?</span>
<span class="comment-copy">Sorry there is an error. Posted above.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/28675138/python-check-output-fails-with-exit-status-1-but-popen-works-for-same-command">python check_output fails with exit status 1 but Popen works for same command</a></span>
<span class="comment-copy">Use <code>Popen</code> directly and understand your exit status(es).</span>
<span class="comment-copy">So I should replace the subprocess with Popen?</span>
<span class="comment-copy">OK, since this is inside a function (which actually returns True if number of cpus used is greater than total number of cpus, does it matter that there is a return in the exception or ps.poll? It is part of a function.</span>
<span class="comment-copy">@user3236841: I just put the <code>return</code> there to prevent it from trying to run all the <code>do_stuff</code> code with output that either won't exist, or won't mean what you expect it to. How you handle this case in your real code is up to you. What do you want to happen when you fail to count the number of CPUs used? Probably treat it if everything's OK, we aren't using too many CPUs, I'd guess?</span>
<span class="comment-copy">I don't want it to fail, I guess:-) Basically, I am running about 300 jobs, 8 at a time. I don't want it to give up when it fails (I exit) because that will choke my machine.</span>
<span class="comment-copy">@user3236841: So it sounds like you want to skip the rest of the checking and just <code>return False</code>, meaning we're not overusing CPUs, right?</span>
<span class="comment-copy">I guess, but does that mean that adding the processes will stop only while exiting?</span>
