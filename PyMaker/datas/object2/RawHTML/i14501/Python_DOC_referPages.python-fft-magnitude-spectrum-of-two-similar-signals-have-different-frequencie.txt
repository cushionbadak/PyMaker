<div class="post-text" itemprop="text">
<p>My goal is to compare the FFT of similar signals. For some reason, when I take the magnitude spectrum of two signals of the same length, the frequencies are different... I can't do a simple side by side comparison of two signals because of this. Anyone have any tips on how to get the same FFT on the signals?</p>
<p>So for instance Signal1 provides the following:</p>
<p><img alt="Signal 1" src="https://i.stack.imgur.com/zDpu5.png"/> <img alt="Signal 2" src="https://i.stack.imgur.com/B2AOi.png"/></p>
<p>Update: Here's the two signals plotted from 0-400Hz
<img alt="Plotted signals" src="https://i.stack.imgur.com/n9kdz.png"/></p>
<p>Here's my code:
The logic behind the code is to import the signal, find where the sound starts, chop the signal to be 1 second in length, perform FFT on signal for comparison.</p>
<pre><code>import numpy as np
from scipy.io.wavfile import read
from pylab import plot
from pylab import plot, psd, magnitude_spectrum
import matplotlib.pyplot as plt

#Hello Signal!!!
(fs, x) = read('C:\Desktop\Spectral Work\EB_AB_1_2.wav') 

#Remove silence out of beginning of signal with threshold of 1000 

def indices(a, func):
    #This allows to use the lambda function for equivalent of find() in matlab
    return [i for (i, val) in enumerate(a) if func(val)]

#Make the signal smaller so it uses less resources
x_tiny = x[0:100000]
#threshold is 1000, 0 is calling the first index greater than 1000
thresh = indices(x_tiny, lambda y: y &gt; 1000)[1]
# backs signal up 20 bins, so to not ignore the initial pluck sound...
thresh_start = thresh-20
#starts at threshstart ends at end of signal (-1 is just a referencing thing)
analysis_signal = x[thresh_start-1:] 

#Split signal so it is 1 second long
one_sec = 1*fs
onesec = x[thresh_start-1:one_sec]

#***unsure is just a placeholder because it spits out a weird error if I don't use
#a third variable
(xsig, ysig, unsure) = magnitude_spectrum(onesec, Fs=fs)
</code></pre>
<p>xsig is the amplitude and ysig is the Frequencies. </p>
<p>Here's links to the .wav files if you're interested in trying it out yourself:
<a href="https://drive.google.com/file/d/0BxHc4PVaRU7obTZ5TDlhTXdMNW8/view?usp=sharing" rel="nofollow noreferrer" title="wav1">.wav1</a>
<a href="https://drive.google.com/file/d/0BxHc4PVaRU7oWE5YZGttU3lhcEU/view?usp=sharing" rel="nofollow noreferrer" title="wav2">.wav2</a>
Note: originally i uploaded the wrong .wav1 file... the correct one is now up.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm guessing your signals aren't actually the same length. If you're thresholding them independently, your <code>thresh_start</code> value won't be the same, so: </p>
<pre><code>onesec = x[thresh_start-1:one_sec]
</code></pre>
<p>will give you different-length arrays for the two files. You can either calculate the <code>threshold</code> value separately and then provide that number to this module as a constant, or make your <code>onesec</code> array be the same length from the start of <em>each</em> threshold value:</p>
<pre><code>onesec = x[thresh_start-1:one_sec+thresh_start-1]
</code></pre>
<p>(Remember that slice notations is <code>[start:stop]</code>, not <code>[start:length]</code>)</p>
</div>
<span class="comment-copy">Surely this breaks at <code>thresh-20</code>, since thresh is a <code>list</code>, not an <code>np.array</code>?</span>
<span class="comment-copy"><i>"unsure is just a placeholder because..."</i> - the convention here would be to use <code>xsig, ysig, _ = magnitude_spectrum...</code>, ie an underscore for unwanted values</span>
<span class="comment-copy">@Eric - it doesn't break. Though I didn't even realize that could have been a problem. And thanks for the convention tip! I'll change my code accordingly.</span>
<span class="comment-copy">I missed the <code>[1]</code>. Are you sure you don't want <code>[0]</code>, if you've come from matlab. <code>indices(x_tiny, lambda y: y &gt; 1000)[1]</code> is better spelt <code>x_tiny[x_tiny &gt; 1000][1]</code></span>
<span class="comment-copy">Or the slightly faster version, <code>x_tiny[nonzero(x_tiny &gt; 1000)[1]]</code></span>
<span class="comment-copy">Thanks @tzaman - that's really helpful. Do you know of any sites that i can read to learn  more about slice notations? I used code academy to get as far as I did... but it obviously didn't stick if they talked about it.</span>
<span class="comment-copy">@ClaytonPipkin you're welcome! Just read through the <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">official tutorial</a>, it's pretty good.</span>
