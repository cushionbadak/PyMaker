<div class="post-text" itemprop="text">
<p>I'm working with a couple of binary files and I want to parse UTF-8 strings that exist.</p>
<p>I currently have a function that takes the starting location of a file, then returns the string found:</p>
<pre><code>def str_extract(file, start, size, delimiter = None, index = None):
   file.seek(start)
   if (delimiter != None and index != None):
       return file.read(size).explode('0x00000000')[index] #incorrect
   else:
       return file.read(size)
</code></pre>
<p>Some strings in the file are separated by <code>0x00 00 00 00</code>, is it possible to split these like PHP's explode? I'm new to Python so any pointers on code improvements are welcome.</p>
<p>Sample file:</p>
<p><code>48 00 65 00 6C 00 6C 00 6F 00 20 00 57 00 6F 00 72 00 6C 00 64 00 | 00 00 00 00 | 31 00 32 00 33 00</code> which is <code>Hello World123</code>, I've noted the <code>00 00 00 00</code> separator by enclosing it with <code>|</code> bars.</p>
<p>So:</p>
<pre><code>str_extract(file, 0x00, 0x20, 0x00000000, 0) =&gt; 'Hello World'
</code></pre>
<p>Similarly:</p>
<pre><code>str_extract(file, 0x00, 0x20, 0x00000000, 1) =&gt; '123'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm going to assume you are using Python 2 here, but write the code to work on both Python 2 and Python 3.</p>
<p>You have UTF-16 data, not UTF-8. You can read that as binary data and split on the four NUL bytes with the <a href="https://docs.python.org/2/library/stdtypes.html#str.split" rel="nofollow"><code>str.split()</code> method</a>:</p>
<pre><code>file.read(size).split(b'\x00' * 4)[index]
</code></pre>
<p>The resulting data is encoded as UTF-16 little-endian (you may or may not have omitted the <a href="http://en.wikipedia.org/wiki/Byte_order_mark" rel="nofollow">UTF-16 BOM</a> at the start; you can decode the data with:</p>
<pre><code>result.decode('utf-16-le')
</code></pre>
<p>This will however <em>fail</em> as we just cut off the text at that last NUL byte; Python splits on the first 4 NULs found, and won't skip that last NUL byte that is part of the text.</p>
<p>The better idea is to decode to Unicode first, <em>then</em> split on a Unicode double-NUL codepoint:</p>
<pre><code>file.read(size).decode('utf-16-le').split(u'\x00' * 2)[index]
</code></pre>
<p>Putting this together as a function would be:</p>
<pre><code>def str_extract(file, start, size, delimiter = None, index = None):
   file.seek(start)
   if (delimiter is not None and index is not None):
       delimiter = delimiter.decode('utf-16-le')  # or pass in Unicode
       return file.read(size).decode('utf-16-le').split(delimiter)[index]
   else:
       return file.read(size).decode('utf-16-le')

with open('filename', 'rb') as fobj:
    result = str_extract(fobj, 0, 0x20, b'\x00' * 4, 0)
</code></pre>
<p>If the file as a BOM at the start, consider opening the file as UTF-16 instead to start with:</p>
<pre><code>import io

with io.open('filename', 'r', encoding='utf16') as fobj:
    # ....
</code></pre>
<p>and remove the explicit decoding.</p>
<p>Python 2 demo:</p>
<pre><code>&gt;&gt;&gt; from io import BytesIO
&gt;&gt;&gt; data = b'H\x00e\x00l\x00l\x00o\x00 \x00W\x00o\x00r\x00l\x00d\x00\x00\x00\x00\x001\x002\x003\x00'
&gt;&gt;&gt; fobj = BytesIO(data)
&gt;&gt;&gt; str_extract(fobj, 0, 0x20, '\x00' * 4, 0)
u'Hello World'
&gt;&gt;&gt; str_extract(fobj, 0, 0x20, '\x00' * 4, 1)
u'123'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First you need to open the file in <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">binary mode</a>.</p>
<p>Then you <code>split</code> the <code>str</code> (or <code>bytes</code>, dependend on the version of Python) with a delimiter of four zero bytes <code>b'\0\0\0\0'</code>:</p>
<pre><code>def str_extract(file, start, size, delimiter = None, index = None):
   file.seek(start)
   if (delimiter is not None and index is not None):
       return file.read(size).split(delimiter)[index]
   else:
       return file.read(size)
</code></pre>
<p>Furthermore you need to handle the encoding, since <code>str_extract</code> only returns the binary data and your test data is in UTF-16 little endian like <a href="https://stackoverflow.com/users/100297/martijn-pieters">Martijn Pieters</a> noted:</p>
<pre><code>&gt;&gt;&gt; str_extract(file, 0x00, 0x20, b'\0\0\0\0', 0).decode('utf-16-le')
u'Hello World'
</code></pre>
<p>Besides: test with <a href="https://stackoverflow.com/a/3965129/3385212"><code>is not None</code></a> for a variable not to be <code>None</code>.</p>
</div>
<span class="comment-copy"><code>split</code> is the equivalent function to PHP's <code>explode</code>. Are you splitting based on an <i>actual string</i> of <code>0x00000000</code> or are you checking for actual zero bytes in your file?</span>
<span class="comment-copy">@figs Checking for actual sequence of 4 zeros. I've put up an example to illustrate my point.</span>
<span class="comment-copy">So what are the <code>|</code> characters in your file?</span>
<span class="comment-copy">They're not actually in my file, just pipes I use to indicate a sequence of zeros for readability.</span>
<span class="comment-copy">Is this in Python 2 or Python 3?</span>
<span class="comment-copy">Reading up on BOM right now, how would I detect this? I prefer this way as it is cleaner than doing explicit decoding.</span>
<span class="comment-copy">@VeraWang: your file would start with the bytes FF FE (encoding U+FEFF ZERO WIDTH NO-BREAK SPACE to UTF-16 little-endian).</span>
<span class="comment-copy">Sorry another question here: these files contain characters in English, German, French, Japanese and can also contain stuff not in the string. Does Python have a predetermined hex range for these set of characters? I only want "readable" characters if that makes sense.</span>
<span class="comment-copy">@VeraWang: you can use <code>str.translate()</code> to efficiently remove certain codepoints; <code>result.translate({0: None})</code> tells the method to map the <code>0</code> codepoint (a NUL) to <code>None</code>, which means <i>delete it</i>.</span>
<span class="comment-copy">@VeraWang: alternatively, have the dictionary (whose keys must be integers, denoting Unicode codepoints) map to other codepoints (so again an integer, but a single Unicode character is fine too) to replace codepoints with other codepoints. So <code>result.translate({0: u'?'})</code> would replace NUL characters with a question mark.</span>
<span class="comment-copy">Not quite <code>'Hello World'</code>; more like <code>'H\x00e\x00l\x00l\x00o\x00 \x00W\x00o\x00r\x00l\x00d'</code>, which is UTF-16 little endian data.</span>
