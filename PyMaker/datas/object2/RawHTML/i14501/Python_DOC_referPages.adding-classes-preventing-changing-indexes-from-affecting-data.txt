<div class="post-text" itemprop="text">
<p>I have a class <code>K()</code> that has an <code>__add__()</code> method that works as follows</p>
<pre><code>d_1 = K(dict(a=3, b=5), dict(b=45,c=23))
d_2 = K(dict(a='three',b='two'), dict(b='wa',c='wo'))
&gt;&gt;d = d_1 + d_2
&gt;&gt;d == K({'a': 3, 'b': 5}, {'b': 45, 'c': 23}, {'a': 'three', 'b': 'two'}, {'b': 'wa', 'c': 'wo'})
True
</code></pre>
<p>However, if I change some data</p>
<pre><code>d_1['c'] = 'apples'
d_2['c'] = 'oranges'
</code></pre>
<p>and check again...</p>
<pre><code>&gt;&gt;d == K({'a': 3, 'b': 5}, {'b': 45, 'c': 23}, {'a': 'three', 'b': 'two'}, {'b': 'wa', 'c': 'wo'})
False
</code></pre>
<p>The changing data has affected the original addition method. I've tried using .copy() to create copies of the variables we're adding, and use those- however I haven't had any luck...</p>
<pre><code>def __add__(self, other):
    scopy, ocopy = self.copy(),other.copy()
    slist,olist = [],[]
    for x in scopy.list_of_dictionaries_from_init:
        self_temp.append(x)
    for i in other_copy.list_of_dictionaries_from_init:
         temp.append(i)
    return K(*(self_copy.list_of_dictionaries_from_init + olist))
</code></pre>
<p>This just outright doesn't work</p>
<p>I'm not sure how to make this work with copies</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that your <code>copy</code> method is presumably just making a new list with the same dicts. When you copy a collection whose elements are themselves mutable collections, they don't get copied.</p>
<p>If you want to copy "all the way down", use the <a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow"><code>deepcopy</code></a> function. For example, you can change your own <code>copy</code> method to call <code>deepcopy</code>. (And probably your <code>__init__</code> method as well.)</p>
<p>For example, maybe something like this:</p>
<pre><code>def copy(self):
    return K(copy.deepcopy(self.list_of_dictionaries_from_init))
</code></pre>
<hr/>
<p>Meanwhile, your <code>add</code> method doesn't make any sense. You create <code>slist</code> and <code>olist</code> lists, but then you try to append to <code>self_temp</code> and <code>temp</code> lists, and then you try to use <code>self_temp</code> as if it were a <code>K</code> instance instead of a list. If you've got a <code>copy</code> method, it may be simpler to first define <code>__iadd__</code>, and then define <code>__add__</code> in terms of it:</p>
<pre><code>def __iadd__(self, other):
    self.list_of_dictionaries_from_init += other.list_of_dictionaries_from_init

def __add__(self, other):
    self_copy = self.copy()
    self_copy += other
    return self_copy
</code></pre>
</div>
