<div class="post-text" itemprop="text">
<p>Is there a function to test floating point approximate equality in python?  Something like,</p>
<pre><code> def approx_equal(a, b, tol):
     return abs(a - b) &lt; tol
</code></pre>
<p>My use case is similar to how Google's C++ testing library, gtest.h, defines <code>EXPECT_NEAR</code>.</p>
<p>Here is an example:</p>
<pre><code>def bernoulli_fraction_to_angle(fraction):
    return math.asin(sqrt(fraction))
def bernoulli_angle_to_fraction(angle):
    return math.sin(angle) ** 2
def test_bernoulli_conversions():
    assert(approx_equal(bernoulli_angle_to_fraction(pi / 4), 0.5, 1e-4))
    assert(approx_equal(
              bernoulli_fraction_to_angle(bernoulli_angle_to_fraction(0.1)),
                0.1, 1e-4))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>For comparing numbers, there is <code>math.isclose</code> as per <a href="https://www.python.org/dev/peps/pep-0485/" rel="nofollow noreferrer">PEP 485</a> since Python 3.5.</li>
<li>For comparing numbers or arrays, there is <code>numpy.allclose</code>.</li>
<li>For testing numbers or arrays, there is <code>numpy.testing.assert_allclose</code></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Another approach is to compute the <a href="http://en.wikipedia.org/wiki/Relative_difference" rel="nofollow">relative change</a> (or relative difference) of the two numbers, which is "used to compare two quantities while taking into account the 'sizes' of the things being compared". The two <a href="https://en.wikipedia.org/wiki/Relative_change_and_difference#Formulae" rel="nofollow">formulas</a> mentioned in the Wikipedia article could be used in comparisons like the following in Python, which also handle cases where one or both of the values being compared are zero:</p>
<pre><code>def approx_equal(a, b, tol):
    return abs(a-b) &lt;= max(abs(a), abs(b)) * tol

def approx_equal(a, b, tol):
    return abs(a-b) &lt;= (abs(a)+abs(b))/2 * tol
</code></pre>
<p>The calculated value in either case is a unitless fraction. In the first case the baseline value is the maximum absolute value of the two numbers and in the second it's their mean absolute value. The article discusses each in more detail as well as their pros and cons. The latter can turned into a <a href="https://en.wikipedia.org/wiki/Percent_difference#Percentage_change" rel="nofollow">percentage difference</a> if multiplied by 100 before the comparison (with <code>tol</code> becoming a percentage value). Note that the article suggests that if the changing value "is a percentage itself, it is better to talk about its change by using percentage points" — i.e. absolute change.</p>
<p>Both of these methods (obviously) require a little more computation than simply taking the absolute value of the difference of the two numbers, which might be a consideration.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there a function to test floating point approximate equality in python? </p>
</blockquote>
<p>There can't be <strong>a</strong> function, since the definition depends on context.</p>
<pre><code>def eq( a, b, eps=0.0001 ):
    return abs(a - b) &lt;= eps
</code></pre>
<p>Doesn't always work.  There are circumstances where</p>
<pre><code>def eq( a, b, eps=0.0001 ):
     return abs( a - b ) / abs(a) &lt;= eps
</code></pre>
<p>could be more appropriate.</p>
<p>Plus, there's the always popular.</p>
<pre><code>def eq( a, b, eps=0.0001 ):
    return abs(math.log( a ) - math.log(b)) &lt;=  eps
</code></pre>
<p>Which might be more appropriate.</p>
<p>I can't see how you can ask for <strong>a</strong> (single) function do combine all the mathematical alternatives.  Since it depends on the application.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I were you, I'd just use what you wrote, and either put it in a separate module (perhaps with other utilities you need that Python doesn't have an implementation for) or at the top of whatever code requires it.</p>
<p>You can also use a lambda expression (one of my favorite language features, but probably less clear):</p>
<pre><code>approx_equal = lambda a, b, t: abs(a - b) &lt; t
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Comparing floats for equality is just usually a bad idea.  Even with the tolerance feature you're using, this isn't really what you want to do.  </p>
<p>If you want to use floats, a reasonable option is to refactor your algorithm to use inequalities, <code>a &lt; b</code> because this is more likely to do what you expect, with far fewer false negatives or positives, and most importantly, it means you don't have to guess how equal they must be for them to be equal.</p>
<p>If you can't do that, another option is to use an exact representation.  If your algorithm is composed only of arithmetic operations (<code>+</code>, <code>-</code>, <code>*</code> and <code>/</code>) then you can use a rational represntation, as provided by <code>fractions.Fraction</code>, or maybe <code>decimal.Decimal</code> is what you want (for instance, with financial calculations).</p>
<p>If your algorithm cannot be expressed easily with an arbitrary precision representation, another choice is to manage the roundoff error explicitly with interval arithmetic, for instance with <a href="http://pyinterval.googlecode.com/svn/trunk/html/index.html" rel="nofollow">this module</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">the tutorial</a>:</p>
<blockquote>
<p>... Though the numbers cannot be made closer to their intended exact values, the round() function can be useful for post-rounding so that results with inexact values become comparable to one another...</p>
</blockquote>
<p>Therefore, this is the way that I define "isclose" functions in Python:</p>
<pre><code>def isclose(a, b, ndigits):
   return round(a-b, ndigits) == 0
</code></pre>
<p>I usually use 5 as <code>ndigits</code>; However, it depends on the precision that you expect. </p>
</div>
<span class="comment-copy">I think you just wrote it!</span>
<span class="comment-copy">:)  I just figured they might be a module for this...</span>
<span class="comment-copy">Well, one potential problem is that <code>tol</code> is likely only approximately equal to the value you want.</span>
<span class="comment-copy">You're not supposed to compare to a single tolerance value, since very large numbers and very small numbers have different tolerances.  Numpy's <code>spacing()</code> function will tell you the distance between a given floating point number and the nearest floating point number, which might be a way to make a good test.</span>
<span class="comment-copy">The documentation for Numpy's <code>spacing</code> function is at <a href="https://github.com/numpy/numpy/blob/master/numpy/core/code_generators/ufunc_docstrings.py#L2905" rel="nofollow noreferrer">github.com/numpy/numpy/blob/master/numpy/core/code_generators/…</a> (it doesn't show up in normal Google searches).</span>
<span class="comment-copy">This is actually just a redirect to unittest's assertAlmostEqual, so you can use it even if you're not using nose.</span>
<span class="comment-copy">If you want to compare arrays and to get the result of all the comparisons number by number: <code>[True, False, ...]</code> <code>numpy.isclose()</code> can be used as well.</span>
<span class="comment-copy"><code>max(abs(a)-abs(b))</code> reduces to <code>max(single_value)</code> which raises a TypeError, as <code>max()</code> expects an iterable.</span>
<span class="comment-copy">You're welcome. The Internet knows all The Internet sees all. :-)</span>
<span class="comment-copy">Note: You get ZeroDivisionError if you do approx_equal(0, 0, .00001) even though comparing for equal works with assertAlmostEqual</span>
<span class="comment-copy">rather than dividing by <code>max(abs(a), abs(b))</code> which can be zero, you should move this term to the right side, i.e. require <code>&lt; tol * max(abs(a), abs(b))</code></span>
<span class="comment-copy">@Andre: Not quite, the <code>&lt;</code> must also be changed to <code>&lt;=</code>. Regardless that's an excellent suggestion -- answer updated. Thanks.</span>
<span class="comment-copy">Since he has to implement it himself anyway, can't he just implement it appropriately for his application? You're basically answering his question with a question.</span>
<span class="comment-copy">"Is there a function to test floating point approximate equality in python?"  That question -- as asked -- is a bad question.  The answer is a useless "No".  Since the question is bad, we have to move on to a related question like "why not?"  The answer to the more useful related question is "There can't be a function".  As in singular.  This isn't built-in because there's no point in building it in.  You <b>always</b> have to implement it yourself.  The "answer" is a useless "no, there is no function" which the questioner already knew.</span>
<span class="comment-copy">Do no specify arbitrary epsilon values. This is defined: <code>from sys.float_info import epsilon</code></span>
<span class="comment-copy">FYI: <a href="https://www.python.org/dev/peps/pep-0485/" rel="nofollow noreferrer">python.org/dev/peps/pep-0485</a></span>
<span class="comment-copy">@Vince The value of epsilon you use necessarily depends on the circumstances surrounding your comparison — in particular, you <i>cannot</i> just use machine epsilon (<code>sys.float_info.epsilon</code> or <code>FLT/DBL_EPSILON</code> in C) everywhere (which is a common mistake). Yes, you can multiply an arbitrary value by machine epsilon to compute something suitable if that makes sense, but <i>please</i> don't advocate just using machine epsilon on its own.</span>
<span class="comment-copy">That's very nice, thanks.  (Will leave this question open for a day just in case.)</span>
<span class="comment-copy">@NeilG: okay, let's see if a guru can descend on this question and find a more elegant solution :D</span>
<span class="comment-copy">no reason to use a lambda here,  points are not awarded for shorter code, and it is otherwise exactly the same code.  you even gave it a name...</span>
<span class="comment-copy">@Rafe Kettler - yes, but think of it like a narcotic. Sure, you love them. But one day you'll wake up on a concrete floor in a pool of your own sweat and think "why does this code only make sense when I read it backwards?"</span>
<span class="comment-copy">In the Python language, I've found it is better to use the "def" keyword to define named functions. I also use "lambda" frequently but only in cases where there is no need to define a name, such as the key parameter on the min() function. I often define named functions inside of named functions as a way to name the bodies of for-loops! You will read elsewhere that lambdas are severely restricted in Python to only be a single expression, which is doubly bad in Python where statements and expressions are two different things. Use lambdas only where you don't need a name.</span>
<span class="comment-copy">what about in tests where you calculate a value in two different ways?</span>
<span class="comment-copy">Can you elaborate on that?</span>
<span class="comment-copy">I will do that in the question.</span>
<span class="comment-copy">In that specific case, interval math is the way to go.  each operation tracks the amount of round-off error it will cause.</span>
<span class="comment-copy">Thanks for your answer  You should read the pep that lead to isclose being adopted</span>
