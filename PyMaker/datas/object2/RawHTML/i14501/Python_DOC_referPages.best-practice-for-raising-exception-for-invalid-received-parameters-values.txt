<div class="post-text" itemprop="text">
<p>Each time I write a function which has (one ore more) parameters, the first thing I do in the function body is to check that the received value of each parameter is valid. </p>
<p>For example:</p>
<pre><code>    def turn_on_or_off_power_supplies (engine, power_supply, switch_on_or_off = RemoteRebootConst.OFF):

        '''
            @summary:                                     
                The function turns off or turns on the switch.

            @param engine:
                SSH connection to the switch

            @param switch_on_or_off:
                This sets whether to turn off, or turn on the switch.
                Use the following constants in infra_constants.py:
                    RemoteRebootConst.OFF = off 
                    RemoteRebootConst.ON = on
        '''

        if switch_on_or_off != RemoteRebootConst.ON and switch_on_or_off =! RemoteRebootConst.OFF:
            raise Exception("-ERROR TEST FAILED \n" 
                            "Function Name: turn_on_or_off_power_supplies \n"
                            "Parameter 'switch_on_or_off' \n" 
                            "Expected value: %s or %s \n"
                            "Actual value: %s"
                            % (RemoteRebootConst.ON, RemoteRebootConst.OFF, switch_on_or_off))

Output omitted...
</code></pre>
<p>Why do I do this? Because in this way, if exception is received, the developer which debugs, can know immediately in which function the problems happens, what are expected value/s and what is the actual value. This error messages makes debugging this kind of problems much more easier.</p>
<p>As said earlier, If there have been more parameters,I will do the above code for EACH parameter. </p>
<p>This makes my function body to me much bigger in terms of number of lines of code. </p>
<p>Is there a more pythonic way to print all of the above details in case there is an exception due to invalid parameter value received (function name, parameter name, expected values, actual values?</p>
<p>I can write a function which receives 4 parameters (function name, parameter name, expected value/s, actual value), and then use it each time I would like to raise this kind of exception (this will cause each exception of this sort to be just one line of code instead of several ones)</p>
<p>I will appreciate any help here. </p>
<p>Thanks in advance. </p>
</div>
<div class="post-text" itemprop="text">
<p>Note that checking the types of your arguments is against duck-typing, which is part of the python philosophy. If you want another developer to be able to debug your code more easily, you should use an assertion:</p>
<pre><code>def turn_on_or_off_power_supplies (engine, power_supply, switch_on_or_off=RemoteRebootConst.OFF):
    assert switch_on_or_off in {RemoteRebootConst.ON, RemoteRebootConst.OFF}, 'wrong argument switch_on_or_off'
</code></pre>
<p>for more about assertions look <a href="https://docs.python.org/3/reference/simple_stmts.html?#assert" rel="nofollow">here</a>.
Note that assertions will be remove if you optimive your code with the <code>-O</code> flag.</p>
</div>
<span class="comment-copy">Seems like overkill to me to list function name and parameter and expected value and actual value. The function name is already visible in the stack trace. The other stuff can be inspected with <code>pdb.set_trace</code>, assuming the dev has write permissions for the file.</span>
<span class="comment-copy">I am working with Eclipse GUI debugger (I did not work yet with pdb). set_trace is just the command in pdb for specifying a breakpoint. I found it very useful to print the expected and actual values instead of just saying "invalid value". I thought there is more 'standardized' way of doing it...</span>
<span class="comment-copy">In my opinon a good docstring is all that's needed. If it explains the parameters etc. sufficiently and your code has no bugs, then it's not your code that's faulty. Besides, if you pass some "invalid" data to a function / method that's not being handled, the problem occurs BEFORE your code becomes really relevant.</span>
<span class="comment-copy">@Daniel in some cases were an Error would go unnoticed for a lot of function calls it can be helpful to check the arguments</span>
<span class="comment-copy">I'd post this on codereview (SE site), as it seems more suited for them.  In short: python displays function name when an error is raised, a good doc string (@Daniel) can easily show what the input should be, and good debugging would check that datatypes being passed into the function are the correct ones, so there's 3 lines you can remove.   I read <code>raise Exception("string")</code> is bad practice, to use more detailed ones, but that might be preference!</span>
