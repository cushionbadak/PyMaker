<div class="post-text" itemprop="text">
<p>I am brand new to Python and looking to read in a CSV file with the below listed contents:</p>
<pre><code>DN, whenCreated, name, pwdLastSet, location
"CN=Jackson2,OU=Domain Controllers,DC=one,DC=onecity,DC=net",20100623145323.0Z,Jackson8,1.30745E+17,Japan,
"CN=Jackson4,OU=Prod,OU=Windows 2014 Servers,OU=STE,DC=one,DC=onecity,DC=net",20041208192730.0Z,Jackson7,1.30735E+17,Aussie,
</code></pre>
<p>This CSV file will be thousands of lines long and I would like to output all fields to a new CSV file and change the <code>whenCreated</code> and <code>pwdLastSet</code> fields to a human readable format. Any advice would be appreciated. Please note in this example there are 5 columns with 3 rows, the first row being the column headers.</p>
<p>So go easy on me as this is the first python script I have ever written. But any advice, comments, best practices would be appreciated. </p>
<pre><code>    import csv
    import sys
    import time
    from datetime import datetime

    def adTimestampToUnix(ad):
        #Convert an 18-digit Windows NT timestamp to a UNIX timestamp
        return int(((ad / 10000000) - 11644473600))
    import datetime

    file = open("source.csv", 'rt')
    fileWrite = open("target.csv", 'w', newline='')
    try:
        csvFile = csv.reader(file)
        csvWrite = csv.writer(fileWrite, dialect='excel')
        for row in csvFile:
            csvWrite.writerow(row)
            for row in csvFile:
                whenCreated = row[1]
                year = whenCreated[:4]
                month = whenCreated[4:6]
                day = whenCreated[6:8]
                hour = whenCreated[8:10]
                minute = whenCreated[10:12]
                seconds = whenCreated[12:14]
                whenCreated =(month+"/"+day+"/"+year+" "+hour+":"+minute+":"+seconds)
                pwdLastSet = int(row[3])
                pwdLastSet = adTimestampToUnix(pwdLastSet)
                if pwdLastSet &lt; 1:
                    pwdLastSet = ""
                else:
                    pwdLastSet = datetime.datetime.utcfromtimestamp(pwdLastSet).strftime('%Y-%m-%d %H:%M:%S')
                row = (row[0],whenCreated,row[2],pwdLastSet,row[4])
                csvWrite.writerow(row)
    finally:
        file.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in the first comment to your question, the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow">csv</a> module will take care of the basic reading and writing of CSV files. Using the first <a href="https://docs.python.org/3/library/csv.html#examples" rel="nofollow">example</a> </p>
<pre class="lang-python prettyprint-override"><code>import csv
with open('some.csv', newline='') as f:
    reader = csv.reader(f)
    for row in reader:
        print(row)
</code></pre>
<p>with your CSV file shows us that a <code>csv.reader</code> will convert each line from the file into a List of Strings</p>
<pre class="lang-none prettyprint-override"><code>['DN',' whenCreated',' name',' pwdLastSet',' location']
['"CN=Jackson2,OU=Domain Controllers,DC=one,DC=onecity,DC=net"','20100623145323.0Z','Jackson8','1.30745E+17','Japan','']
</code></pre>
<p>Similarly, a <code>csv.writer</code> will take a List of values and write it to a line in the output file.</p>
<p>Easy.</p>
<p>So, the really interesting parts of your question are:</p>
<p><strong>I) Fixing the first line (column headers)</strong></p>
<p>Notice that most of the column names in the first list have a leading space. We want to get rid of those because they could be problematic. If you have worked with other languages you might think about using a loop, e.g.</p>
<pre class="lang-python prettyprint-override"><code>for i in range(len(row)):
    row[i] = row[i].strip()
</code></pre>
<p>However, in Python the preferred form is to use "List comprehension", </p>
<pre class="lang-python prettyprint-override"><code>row = [x.strip() for x in row]
</code></pre>
<p><strong>II) Getting <code>whenCreated</code> into "a human readable format".</strong></p>
<p>It already is, really, but some dashes and colons will get it into ISO 8601 date format, so let's use the <code>.format</code> method of a string object like this</p>
<pre class="lang-python prettyprint-override"><code>x = row[1]
row[1] = '{}-{}-{}T{}:{}:{}'.format(x[:4],x[4:6],x[6:8],x[8:10],x[10:12],x[12:])
</code></pre>
<p>to convert <code>row[1]</code> from this ...</p>
<pre class="lang-none prettyprint-override"><code>20100623145323.0Z
</code></pre>
<p>... to this:</p>
<pre class="lang-none prettyprint-override"><code>2010-06-23T14:53:23.0Z
</code></pre>
<p><strong>III) Getting <code>pwdLastSet</code> into "a human readable format".</strong></p>
<p>I see from your updated question that these numbers are 18-digit Active Directory timestamps (in scientific notation) so you're absolutely right that we can use <code>datetime</code> to convert them</p>
<pre class="lang-python prettyprint-override"><code>from datetime import datetime
row[3] = datetime.utcfromtimestamp(float(row[3])/10000000-11644473600).isoformat() + 'Z'
</code></pre>
<p>will convert <code>row[3]</code> from this ...</p>
<pre class="lang-none prettyprint-override"><code>1.30745E+17
</code></pre>
<p>... to this:</p>
<pre class="lang-none prettyprint-override"><code>2015-04-26T05:33:20Z
</code></pre>
</div>
<span class="comment-copy">Can you post what you've written so far?  If you haven't written anything yet, as a hint, start with the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">CSV</a> module.</span>
<span class="comment-copy">put the code you've put in the comments into the question. It will help others to help you.</span>
<span class="comment-copy">Just curious - using this approach, do you need to worry about the first row (the header row), or does the csv parser know to skip it? I notice you don't have any logic to avoid the first case where row[1] = "whenCreated"</span>
<span class="comment-copy">@RandyBanks - Yes, our code would need to explicitly handle the first line if we know (or can determine) that it contains column headings. For example, we wouldn't want to try doing datetime conversions on a string like 'pwdLastSet' because it obviously won't work.</span>
<span class="comment-copy">Thanks Gord! Appreciate it</span>
