<div class="post-text" itemprop="text">
<p>If I have a CVS file with rows of data and the row index was as below:</p>
<pre><code>1
2
3
4
5
1
2
3
4
5
1
2
3
4
5
1
2
3
4
5
</code></pre>
<p>If I iterate the file, how could I then create an object from the data between 1-5, thus creating a new object for every 1-5 block of data ?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're trying to treat every group of 5 rows as a separate object, that's a perfect job for the <code>grouper</code> function in the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow"><code>itertools</code> recipes</a>.</p>
<p>For example:</p>
<pre><code>with open('spam.csv') as f:
    rows = csv.reader(f)
    groups = grouper(rows, 5)
    for group in groups: # there will be 4 groups
        for row in group: # each one with 5 rows
            do_stuff(row)
</code></pre>
<hr/>
<p>If that "5" is just approximate, and the real rule is that every time the index starts over at 1, you start a new group, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>groupby</code></a>. Or, if you want to understand how it works, first write it explicitly. For example:</p>
<pre><code>with open('spam.csv') as f:
    group = []
    for row in csv.reader(f):
        if row[0] == '1':
             # new group, process the old group
             do_stuff(group)
             group = []
        group.append(row)
    # don't forget the leftover group at the end
    do_stuff(group)
</code></pre>
</div>
<span class="comment-copy">Is each group always exactly 5 rows, or is it however many rows until the index starts over at 1, or â€¦?</span>
<span class="comment-copy">PS, don't use the "code snippet" button, just the "code" button. A "code snippet" is for JavaScript code that runs right inside the question.</span>
<span class="comment-copy">Sorry about using the code snippet button, and the rows are different lengths, with 1 being the start of the next block of data.</span>
<span class="comment-copy">Thanks for the sample, so how would I then parse until the next 1, creating, and then either create an object, or dict that can be saved as a temporary data file to be further parsed ?</span>
