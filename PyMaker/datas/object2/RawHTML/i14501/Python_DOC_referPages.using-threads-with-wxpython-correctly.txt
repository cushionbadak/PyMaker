<div class="post-text" itemprop="text">
<p>I'm using wxPython to build the GUI of my program,I am having trouble with running a function that uses a thread to get data from a file and display it in the ObjectListView, reading the data from the file runs fine but displaying the data from the thread sometimes crashes the whole program. gui.ProgressDialog is a wx.Frame that will show progress bar until the thread is finished. self.dv is an ObjectListView, an object that is derived from wx.ListCtrl, the set_data is a function I have written, that iterate over the data and adds it to the list.</p>
<pre><code>def set_data(self,data):
    """set the data on the ObjectListView"""
    pd = gui.ProgressDialog("Setting Data..")
    def set_thread():
        self.dv.set_data(data) #Takes time
        pd.Close()

    #opens a thread that sets the data
    t = Thread(target = set_thread,name="SetDataThread")
    t.start()
</code></pre>
<p>I have read something about <code>wx.CallAfter</code> and that I should use it but I didn't understand how. I tried calling the set_data like this - 
<code>wx.CallAfter(self.dv.set_data,data)</code> but it didn't work either. can someone explain the functions <code>wx.CallAfter</code> , <code>wx.CallLater</code> , <code>wx.PostEvent</code> , how can they be helpful when using threads with wxPython and which one of them should I use? or another solution for this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You cannot make any GUI calls from a secondary thread. This is explained in the <a href="http://docs.wxwidgets.org/3.0/classwx_thread.html" rel="nofollow"><code>wx.Thread</code></a> docs, but it applies to normal Python <code>threading.Thread</code> threads too:</p>
<blockquote>
<p>GUI calls, such as those to a wxWindow or wxBitmap are explicitly not safe at all in secondary threads and could end your application prematurely.</p>
</blockquote>
<p>So, what you have to do instead is send a message to the main thread, asking it to make the GUI calls for you.</p>
<p><a href="http://wxpython.org/Phoenix/docs/html/functions.html#PostEvent" rel="nofollow"><code>PostEvent</code></a> is the low-level solution. You create a new kind of event. You write a handler for that event type on your main thread that does some GUI work based on the information in the event. Then on your background thread, you construct one of those events with the appropriate information, and <code>PostEvent</code> it, which puts it on the main thread's message queue.</p>
<p>The other options are basically higher-level wrappers around this. And <a href="http://wxpython.org/Phoenix/docs/html/functions.html#CallAfter" rel="nofollow"><code>CallAfter</code></a> is probably the one you want. The <a href="http://wiki.wxpython.org/CallAfter" rel="nofollow"><code>CallAfter</code></a> page on the wxPyWiki, has a great explanation and a complete sample, and there's also a nice example on the docs page itself, so I won't try to compete with them; instead, I'll try to cover your specific question.</p>
<p>I think what you're missing is that the point is to push the <em>GUI</em> calls onto the main thread. All GUI calls, and no other calls.</p>
<p>I don't know what <code>self.dv</code> is, but it doesn't look like a <code>wx</code> GUI object (it has a Python-style <code>set_data</code> method, not a <code>wx</code>-style <code>SetData</code>). Of course if it's shared between multiple threads, and it's not self-synchronized, you almost certainly want a <a href="https://docs.python.org/3/library/threading.html#lock-objects" rel="nofollow"><code>Lock</code></a> or other sync object protecting it. But you don't need, or want, <code>CallAfter</code> here.</p>
<p>That <code>pd.Close</code>, on the other hand, is a GUI call. (Well, it would be if you remembered the parentheses.) You definitely need <code>CallAfter</code> for that.</p>
<p>So:</p>
<pre><code>def set_data(self,data):
    """set the data on the ObjectListView"""
    pd = gui.ProgressDialog("Setting Data..")
    def set_thread():
        data = takes_time()
        with self.dv_lock:
            self.dv.set_data(data)
        wx.CallAfter(pd.Close)

    #opens a thread that sets the data
    t = Thread(target = set_thread,name="SetDataThread")
    t.start()
</code></pre>
<hr/>
<p>You also asked about <a href="http://wxpython.org/Phoenix/docs/html/CallLater.html#CallLater" rel="nofollow"><code>CallLater</code></a>. You use this when you want some code to be run on the main thread after X milliseconds, not as soon as possible. While you could use <code>CallLater(0, pd.Close)</code> in place of <code>CallAfter(pd.Close)</code>, there's no good reason to do so.</p>
</div>
<span class="comment-copy">On top of the bigger problems, you've left the parentheses off on at least one function call, which means that the progress dialog will never get closedâ€¦</span>
<span class="comment-copy">What is <code>self.dv</code>, and what does its <code>set_data</code> do?</span>
<span class="comment-copy">Nice explanation, thanks!</span>
