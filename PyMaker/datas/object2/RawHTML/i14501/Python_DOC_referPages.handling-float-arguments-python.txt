<div class="post-text" itemprop="text">
<p>I have a function that takes an optional argument like so:</p>
<p><code>myProgram -n 8</code></p>
<p>I want to add in error handling that will exit the program and print an error message if the argument that the user enters is a float.  How would I test for this if the argument always comes in as a string?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/stdtypes.html#str.isdigit" rel="nofollow">str.isdigit()</a>:</p>
<pre><code>&gt;&gt;&gt; '12345'.isdigit()
True
&gt;&gt;&gt; '12.345'.isdigit()
False
</code></pre>
<p>If you want to support negative numbers, strip the sign off first:</p>
<pre><code>&gt;&gt;&gt; '+12345'.strip(' -+').isdigit()
True
&gt;&gt;&gt; '-12345'.strip(' -+').isdigit()
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It may seem heavy-weight at first, but the <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow"><code>argparse</code></a> module can do exactly what you want. The first example on the page shows an integer-only argument (notice the <code>type=int</code> part):</p>
<pre><code>parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('integers', metavar='N', type=int, nargs='+',
                   help='an integer for the accumulator')
</code></pre>
<p>Calling that example with <code>python deleteme.py 3.5</code> (i.e. 3.5 is the argument that should be an integer) gives the following output:</p>
<pre><code>usage: scriptname.py [-h] [--sum] N [N ...]
scriptname.py: error: argument N: invalid int value: '3.5'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To parse command line arguments, you should be using <a href="https://docs.python.org/dev/library/argparse.html" rel="nofollow"><code>argparse</code></a>.</p>
<pre><code>import argparse

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", type=int)
    args = parser.parse_args()

    print args

if __name__ == '__main__':
    main()
</code></pre>
<p>Usage:</p>
<pre><code>[10:39pm][wlynch@watermelon /tmp] python blah.py
Namespace(n=None)
[10:39pm][wlynch@watermelon /tmp] python blah.py -n 4
Namespace(n=4)
[10:39pm][wlynch@watermelon /tmp] python blah.py -n 4.0
usage: blah.py [-h] [-n N]
blah.py: error: argument -n: invalid int value: '4.0'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could perhaps do something like this:</p>
<pre><code>from math import modf

if modf(float(args.n))[0] != 0.0:
    # ERROR: Float entered!
</code></pre>
<p>From the <a href="https://docs.python.org/2/library/math.html#math.modf" rel="nofollow">math.modf</a> docs:</p>
<blockquote>
<p><code>math.modf(x)</code>Â¶ Return the fractional and integer parts of x. Both
  results carry the sign of x and are floats.</p>
</blockquote>
<p>Or alternatively (<em>as @dawg mentioned</em>):</p>
<pre><code>"." in args.n  # A possible float

# or

args.n.isdigit()  # Returns False if args.n does not contain all digits only
</code></pre>
</div>
<span class="comment-copy">You say function but your example is a program.  Which is it?</span>
