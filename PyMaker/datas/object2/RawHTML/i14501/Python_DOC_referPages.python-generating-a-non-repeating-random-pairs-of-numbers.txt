<div class="post-text" itemprop="text">
<p>I'm trying to generate random pairs of numbers to place objects at random locations in a grid. I've tried looking for answers but I haven't found one that works for what I need. I don't want the pair to repeat but the objects can still be placed in the same row or column. Also the size of the grid and the number of objects is inputted by the user</p>
<pre><code>def create_bombs(self):
    bombs_flaged = 0
    #creates the bombs 
    for i in range(self.bomb_num):
        bomb_row = randint(0,self.board_size - 1)
        bomb_col = randint(1,self.board_size)
        self.bomb_list.append(Bomb(bomb_row, bomb_col, self, bombs_flaged))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python's <code>set</code>s are meant to do just what you need: membership testing is very fast, with them (constant time):</p>
<pre><code>def create_bombs(self):
    bombs_flagged = 0
    existing_bomb_coords = set()  # All bomb coordinates so far
    # Creates the bombs 
    while len(existing_bomb_coords) &lt; self.bomb_num:  # Looping as much as needed
        bomb_row = randint(0, self.board_size-1)
        bomb_col = randint(1, self.board_size)
        bomb_coords = (bomb_row, bomb_col)
        if bomb_coords not in existing_bomb_coords:  # Very fast test
            self.bomb_list.append(Bomb(bomb_row, bomb_col, self, bombs_flagged))
            existing_bomb_coords.add(bomb_coords)  # New bomb registration
</code></pre>
<p>Now, I like @abarnert's answer too: it is a bit wasteful, as he indicates, but it is very legible.</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to think about this is: there are <code>X</code>*<code>Y</code> possible positions (specifically <code>board_size * board_size</code>, in your case), and you want to pick <code>N</code> (<code>self.bomb_num</code>) random samples from those positions, <em>without repetition</em>.</p>
<p>The <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow"><code>sample</code></a> function in the <code>random</code> module does this perfectly:</p>
<pre><code>possible_coordinates = [(x, y) for x in range(X) for y in range(1, Y+1)]
bomb_coordinates = random.sample(possible_coordinates, N)
</code></pre>
<p>Creating that list is a little wastefulâ€”but given that <code>board_size</code> is probably something small, like 30, a temporary list of 900 elements is not worth worrying about.</p>
</div>
