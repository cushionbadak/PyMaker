<div class="post-text" itemprop="text">
<p>I'm trying to figure out how to create all possible n sized permutations from a list recursively. </p>
<p>For example the result of <code>n=2</code> and <code>list=[0,1,5]</code> would be:</p>
<pre><code>[[0, 0], [1, 0], [5, 0], [0, 1], [1, 1], [5, 1], [0, 5], [1, 5], [5, 5]]
</code></pre>
<p>or <code>n=3</code>  and <code>list=[2,3]</code>:</p>
<pre><code>[[2, 2, 2], [3, 2, 2], [2, 3, 2], [3, 3, 2], [2, 2, 3], [3, 2, 3], [2, 3, 3], [3, 3, 3]]
</code></pre>
<p>(sort of like cartesian product).</p>
<p>I've managed to come up with this piece of code:</p>
<pre><code>def perm(nlist, m):

    if m &gt; len(nlist):
        return 
    if m == 0 or m == len(nlist):
        return [[]]
    results = []            
    for list_i in nlist:
        temp = list(nlist)          
        temp.remove(list_i)
        results.extend(map(lambda x: [list_i] + x, perm(temp, m-1)))
    return results
</code></pre>
<p>but it doesn't give permutations like <code>[0,0] [1,1] [2,2]</code> etc.</p>
<p>Does anybody have a solution for me?</p>
<p>How can I make this without using <code>map()</code> and <code>lambda()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>This isn't <em>sort of</em> like cartesian product; it's <em>exactly</em> like cartesian product.</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product([0,1,5], repeat=2))
[(0, 0), (0, 1), (0, 5), (1, 0), (1, 1), (1, 5), (5, 0), (5, 1), (5, 5)]
&gt;&gt;&gt; list(product([2,3], repeat=3))
[(2, 2, 2), (2, 2, 3), (2, 3, 2), (2, 3, 3), (3, 2, 2), (3, 2, 3), (3, 3, 2), (3, 3, 3)]
</code></pre>
<p>The polyfill for <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product</code></a> is the following:</p>
<pre><code>def product(*args, **kwds):
    # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
</code></pre>
<p>But since you can't use itertools, you might as well take the liberty of writing a slightly more efficient solution to your problem. Since we are just computing the product of <code>n</code> identical iterables, let's just call it a cartesian exponent:</p>
<pre><code>def cartesian_exponent(li, e=1):
    pools = [li] * e
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    return result
</code></pre>
<p>Or recursively using yet another incomprehensible list comprehension:</p>
<pre><code>def cartesian_exponent(li, e=1):
    if e == 1:
        return [[x] for x in li]
    else:
        return [[x]+y for x in li for y in cartesian_exponent(li, e=e-1)]
</code></pre>
<p>Which can be compressed to one line:</p>
<pre><code>def cartesian_exponent(li, e=1):
    return [[x] for x in li] if e == 1 else [[x] + y for x in li for y in cartesian_exponent(li, e=e-1)]
</code></pre>
<p>But then you would be sacrificing readability for terseness and that's no bueno. The incomprehensible list comprehension is already opaque enough.</p>
<p>Some tests:</p>
<pre><code>&gt;&gt;&gt; cartesian_exponent([0,1,5], e=2)
[[0, 0], [0, 1], [0, 5], [1, 0], [1, 1], [1, 5], [5, 0], [5, 1], [5, 5]]
&gt;&gt;&gt; cartesian_exponent([2,3], e=3)
[[2, 2, 2], [2, 2, 3], [2, 3, 2], [2, 3, 3], [3, 2, 2], [3, 2, 3], [3, 3, 2], [3, 3, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The result you are looking for is the <a href="https://en.wikipedia.org/wiki/Cartesian_product" rel="nofollow">Cartesian product</a> which is the set of all ordered pairs (a, b) where a ∈ A and b ∈ B. Or, all permutations of all combinations.</p>
<pre class="lang-py prettyprint-override"><code>from itertools import combinations_with_replacement as iter_combs
from itertools import permutations

def perms_combs(l, n):
    all_combs = []
    for l in list(iter_combs(l, n)):
          [all_combs.append(perm) for perm in list(permutations(l, n))]
    return list(set(all_combs))
</code></pre>
<pre><code>&gt;&gt; print list(product([0, 1, 5], repeat=2))
    [(0, 0), (0, 0), (0, 1), (1, 0), (0, 5), (5, 0), (1, 1), (1, 1), (1, 5), (5, 1), (5, 5), (5, 5)]

&gt;&gt; print list(product([2, 3], repeat=3))
    [(3, 3, 3), (2, 2, 2), (2, 3, 2), (3, 3, 2), (2, 3, 3), (3, 2, 2), (3, 2, 3), (2, 2, 3)]
</code></pre>
<p>This process, however, is already covered by an itertools functions: <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow">product</a></p>
<pre><code>from itertools import product

&gt;&gt; print product([0, 1, 5], 2)
    [(0, 0), (0, 0), (0, 1), (1, 0), (0, 5), (5, 0), (1, 1), (1, 1), (1, 5), (5, 1), (5, 5), (5, 5)]

&gt;&gt; print product([2, 3], 3)
    [(3, 3, 3), (2, 2, 2), (2, 3, 2), (3, 3, 2), (2, 3, 3), (3, 2, 2), (3, 2, 3), (2, 2, 3)]
</code></pre>
</div>
<span class="comment-copy">Hint: Don't use <code>list</code> as a name, it is a <a href="https://docs.python.org/3/library/functions.html#func-list" rel="nofollow noreferrer">built-in function</a>.</span>
<span class="comment-copy">Have you considered using <a href="https://docs.python.org/2/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">itertools.permutations</a>?</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/104420/how-to-generate-all-permutations-of-a-list-in-python">How to generate all permutations of a list in Python</a></span>
<span class="comment-copy">This question is about permutations of combinations_with_replacements. NOT just permutations.</span>
<span class="comment-copy">i need to implement a function without itertools</span>
<span class="comment-copy">i like its simplicity but im looking for a recursive solution. thx</span>
<span class="comment-copy">@runtuchman A recursive solution has been added to my answer.</span>
<span class="comment-copy">how can write this code without list comprehensions?</span>
<span class="comment-copy">@runtuchman List comprehensions are just loops that append values to an initially empty list. So just unravel the loops.</span>
<span class="comment-copy">i couldn't figure out how to unravel them to a simple loop can you show me how?</span>
