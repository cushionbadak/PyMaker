<div class="post-text" itemprop="text">
<p>I have this csv file</p>
<pre><code>Cat, and, dog, bites
Yahoo, news, claims, a, cat, mated, with, a, dog, and, produced, viable, offspring
Cat, killer, likely, is, a, big, dog
Professional, free, advice, on, dog, training, puppy, training
Cat, and, kitten, training, and, behavior
Dog, &amp;, Cat, provides, dog, training, in Eugene, Oregon
Dog, and, cat, is, a, slang, term, used, by, police, officers, for, a, male-female, relationship
Shop, for, your, show, dog, grooming, and, pet, supplies
</code></pre>
<p>I want to make all the words start with a small letter and create a list which will include all the unique items from the above csv file.
Have you any idea? Thanks in advance!
So far, I have managed to convert all the words with a small letter:</p>
<pre><code>unique_row_items = set([field.strip().lower() for field in row])
</code></pre>
<p>But i can't manage the other one.</p>
<pre><code>def unique():

    rows = list(csv.reader(open('example_1.csv', 'r'), delimiter=','))

    result = []

    for r in rows:
        key = r
        if key not in result:
            result.append(r)
    return result
</code></pre>
<p>Which does not give the results I want</p>
</div>
<div class="post-text" itemprop="text">
<p>If you can't figure out how to do everything at once, do it step by step.</p>
<p>So, let's write an explicit <code>for</code> statement over the rows:</p>
<pre><code>result = []
# use `with` so the file gets closed
with open('example_1.csv', 'r') as f:
    # no need for `list` here
    rows = csv.reader(f, delimiter=',')
    for row in rows:
        # no need for `set([...])`, just `set(...)`
        unique_row_items = set(field.strip().lower() for field in row)
        for item in unique_row_items:
            if item not in result:
                result.append(item)
</code></pre>
<p>But if you look at this, you're trying to use a list as a set; it'll be easier (and more efficient) if you just use a set as a set; then you don't need the <code>if â€¦ in</code> check:</p>
<pre><code>result = set()
with open('example_1.csv', 'r') as f:
    # no need for `list` here
    rows = csv.reader(f, delimiter=',')
    for row in rows:
        unique_row_items = set(field.strip().lower() for field in row)
        for item in unique_row_items:
            result.add(item)
</code></pre>
<p>And now, <code>add</code>ing each element from one set to another is just <code>union</code>ing the sets, so you can replace those last two lines with, e.g.:</p>
<pre><code>result |= unique_row_items
</code></pre>
<p>And now, if you want to turn it all back into one big expression, you can:</p>
<pre><code>with open('example_1.csv', 'r') as f:
    result = set.union(*(set(field.strip().lower() for field in row)
                         for row in csv.reader(f, delimiter=',')))
</code></pre>
<p>Also, in Python 2.7+, you can just use a set comprehension, instead of calling <code>set</code> on a list comprehension or generator expression:</p>
<pre><code>with open('example_1.csv', 'r') as f:
    result = set.union(*({field.strip().lower() for field in row}
                         for row in csv.reader(f, delimiter=',')))
</code></pre>
<p>In fact, you can even turn the whole thing into one big comprehension with a nested loop:</p>
<pre><code>with open('example_1.csv', 'r') as f:
    result = {field.strip().lower() 
              for row in csv.reader(f, delimiter=',')
              for field in row}
</code></pre>
<p>Or, alternatively, you don't have to make it one big expression:</p>
<pre><code>with open('example_1.csv', 'r') as f:
    rows = csv.reader(f, delimiter=',')
    rowsets = ({field.strip().lower() for field in row} for row in rows)
    result = set.union(*rowsets)
</code></pre>
<p>Also, as Padraic Cunningham pointed out, one of the dialect options the <code>csv</code> module offers is <a href="https://docs.python.org/3/library/csv.html#csv.Dialect.skipinitialspace" rel="nofollow"><code>skipinitialspace</code></a>, which does just like it sounds like, so you don't need the <code>strip</code> anymore. For example, using the big set comprehension:</p>
<pre><code>with open('example_1.csv', 'r') as f:
    result = {field.lower() 
              for row in csv.reader(f, delimiter=',', skipinitialspace=True)
              for field in row}
</code></pre>
<p>Or, alternatively, it looks like your format is really using comma-space rather than comma as a delimiter, so:</p>
<pre><code>with open('example_1.csv', 'r') as f:
    result = {field.lower() 
              for row in csv.reader(f, delimiter=', ')
              for field in row}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To store all the words in lowercase , you can use <code>.lower()</code> method on strings and after creating a list of all the words in the list we create a <code>set</code> which returns only the unique values.</p>
<pre><code>with open("data_file.csv", "r") as data_file:
    all_words = []
    for line in data_file.readlines():
        for word in line.split(","):
            all_words.append(word.lower())

unique_words = set(all_words)
print unique_words
</code></pre>
</div>
<span class="comment-copy">To format code or similar pre-formatted text chunks, use the <code>{}</code> button (this indents it 4 spaces and makes sure there's a blank line before and after, if you ever need to do it manually), not the <code>I</code> button. I fixed this one for you.</span>
<span class="comment-copy">This is what I tried to do now, thank you!</span>
<span class="comment-copy">The <code>csv</code> module will parse the file for you, and give you each row as a list of columns. You can use a <code>dict</code> or ` set` to store unique items, depending on exactly what you want to store (just values, or keys that map to values?). You can use the <code>lower()</code> method on a string to convert it to lowercase. And you can access the first element of a list with <code>row[0]</code>, or each element with a <code>for</code> loop. So, do what you can, and then tell us where you get stuck.</span>
<span class="comment-copy">this is what I have tried:</span>
<span class="comment-copy">def unique():     rows = list(csv.reader(open('example_1.csv', 'r'), delimiter=','))     result = []     for r in rows:         key = r         if key not in result:             result.append(r)     return result</span>
<span class="comment-copy">You could also <code>skipinitialspace=True</code> to remove the extra whitespace</span>
<span class="comment-copy">@PadraicCunningham: Good point; I'll edit it into the answer. Thanks.</span>
<span class="comment-copy">this is just what I wanted! Thank you very much!!!</span>
<span class="comment-copy">thank you very much!!!</span>
