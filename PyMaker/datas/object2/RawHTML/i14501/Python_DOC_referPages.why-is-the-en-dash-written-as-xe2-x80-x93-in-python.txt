<div class="post-text" itemprop="text">
<p>Specifically, what does each escape in <code>\xe2\x80\x93</code> do and why does it need 3 escapes? Trying to decode one by itself leads to an 'unexpected end of data' error.</p>
<pre class="lang-python prettyprint-override"><code>&gt;&gt;&gt; print(b'\xe2\x80\x93'.decode('utf-8'))
–
&gt;&gt;&gt; print(b'\xe2'.decode('utf-8'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe2 in position 0: unexpected end of data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have <a href="http://en.wikipedia.org/wiki/UTF-8">UTF-8 bytes</a>, which is a <em>codec</em>, a standard to represent text as computer-readable data. The <a href="https://codepoints.net/U+2013">U+2013 EN-DASH codepoint</a> encodes to those 3 bytes when encoded to that codec.</p>
<p>Trying to decode just one such byte as UTF-8 doesn't work because in the UTF-8 standard that one byte does not, on its own, carry meaning. In the UTF-8 encoding scheme, a <code>\xe2</code> byte is used for all codepoints between U+2000 and U+2FFF in the Unicode standard (which would all be encoded with an additional 2 bytes); thats 4095 codepoints in all.</p>
<p>Python represents values in a <code>bytes</code> object in a manner that lets you reproduce the value by copying it back into a Python script or terminal. Anything that isn't printable ASCII is then represented by a <code>\xhh</code> hex escape. The two characters form the hexadecimal value of the byte, an integer number between 0 and 255.</p>
<p>Hexadecimal is a very helpful way to represent bytes because you can represent the 2 pairs of 4 bytes each with one character, a digit in the range 0 - F.</p>
<p><code>\xe2\x80\x93</code> then means there are three bytes, with the hexadecimal values E2, 80 and 93, or 226, 128 and 147 in decimal, respectively. The UTF-8 standard tells a decoder to take the last 4 bits of the first byte, and the last 6 bytes of each of the second and third bytes (the remaining bits are used to signal what type of byte you are dealing with for error handling). Those 4 + 6 + 6 == 16 bits then encode the hex value 2013 (<code>0010 000000 010011</code> in binary).</p>
<p>You probably want to read up about the difference between codecs (encodings) and Unicode; UTF-8 is a codec that can handle all of the Unicode standard, but is not the same thing. See:</p>
<ul>
<li><p><a href="http://joelonsoftware.com/articles/Unicode.html">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</a> by Joel Spolsky</p></li>
<li><p><a href="http://nedbatchelder.com/text/unipain.html">Pragmatic Unicode</a> by Ned Batchelder</p></li>
<li><p>The <a href="http://docs.python.org/3/howto/unicode.html">Python Unicode HOWTO</a></p></li>
</ul>
</div>
<span class="comment-copy">Thanks for the answer. Could you clarify what the specific purpose of the <code>\xe2</code> escape is in Unicode? Does it indicate anything?</span>
<span class="comment-copy">@minerz029: UTF-8 is not Unicode. It is a <i>codec</i>, but one that can handle all of the Unicode standard. <code>\xe2</code> is just a byte. If you decoded it with a different codec, then you'd get a different Unicode result. <code>\xe2</code> decoded as ISO-8859-1 (Latin-1) would give you the U+00E2 codepoint, or the <code>â</code> character (small latin a with circumflex).</span>
<span class="comment-copy">@minerz029: to paraphrase Martijn, <code>\xe2</code> is a byte that does not have much meaning in itself, it's the first (4+)4 bits of some UTF8-encoded character between codepoints U+2000 and U+2FFF</span>
