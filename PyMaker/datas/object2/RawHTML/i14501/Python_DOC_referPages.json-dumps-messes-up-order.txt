<div class="post-text" itemprop="text">
<p>I'm working with the <a href="https://docs.python.org/2/library/json.html" rel="noreferrer">json module</a> creating a <code>json</code> file containing entries of the like</p>
<pre><code>json.dumps({"fields": { "name": "%s", "city": "%s", "status": "%s", "country": "%s" }})
</code></pre>
<p>However, in the <code>json</code>-file created the fields are in the wrong order</p>
<pre><code>{"fields": {"status": "%s", "city": "%s", "name": "%s", "country": "%s"}}
</code></pre>
<p>which is a problem because the substitions for the <code>%s</code>-strings are now incorrect.</p>
<p>How can I force the <code>dumps</code> function to keep the given order? </p>
</div>
<div class="post-text" itemprop="text">
<p>Like the other answers correctly state, before Python 3.6, dictionaries are <em>unordered</em>.</p>
<p>That said, <a href="https://stackoverflow.com/a/4920304/42973">JSON is also supposed to have <em>unordered</em> mappings</a>, so in principle it does not make much sense to store ordered dictionaries in JSON. Concretely, this means that upon reading a JSON object, the order of the returned keys can be arbitrary.</p>
<p>A good way of preserving the order of a mapping (like a Python OrderedDict) in JSON is therefore to output an array of (key, value) pairs that you convert back to an ordered mapping upon reading:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; import json
&gt;&gt;&gt; d = OrderedDict([(1, 10), (2, 20)])                                         
&gt;&gt;&gt; print d[2]
20
&gt;&gt;&gt; json_format = json.dumps(d.items())                   
&gt;&gt;&gt; print json_format  # Order maintained
[[1, 10], [2, 20]]
&gt;&gt;&gt; OrderedDict(json.loads(json_format))  # Reading from JSON: works!
OrderedDict([(1, 10), (2, 20)])
&gt;&gt;&gt; _[2]  # This works!
20
</code></pre>
<p>(Note the way the ordered dictionary is constructed from a <em>list</em> of (key, value) pairs: <code>OrderedDict({1: 10, 2: 20})</code> would not work: its keys are not necessarily ordered as in the dictionary literal, since the literal creates a Python dictionary whose keys are unordered.)</p>
<p><strong>PS</strong>: Starting with Python 3.1, the json modules <a href="https://docs.python.org/3/library/json.html#json.load" rel="nofollow noreferrer">offers a hook</a> for automatically converting a list of pairs (like above) to something else like an OrderedDict.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can choose <code>OrderedDict</code> to be used instead of an ordinary <code>dict</code> when creating a json object to remember the order of insertions:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; a = '{"fields": { "name": "%s", "city": "%s", "status": "%s", "country": "%s" }}'
&gt;&gt;&gt; b = json.loads(a, object_pairs_hook=OrderedDict)
&gt;&gt;&gt; json.dumps(b)
'{"fields": {"name": "%s", "city": "%s", "status": "%s", "country": "%s"}}'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a dictionary, and dictionaries don't keep order.
You can use <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="noreferrer">OrderedDict</a> instead.</p>
<p>You could also add the sort_keys=False parameter:</p>
<pre><code>json.dumps(values, sort_keys=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You cannot create an OrderedDict from a dict because order has already changed the moment you create a dictionary.So best way is to use tuples to create a OrderedDict</p>
<pre><code>from collections import OrderedDict
import json

a = (("name","foo"),("city","bar"),("status","baz"),("country","my"))

b = OrderedDict(a)

c = {"fileds": b}

print json.dumps(c)
Output:
{"fileds": {"name": "foo", "city": "bar", "status": "baz", "country": "my"}}
</code></pre>
</div>
<span class="comment-copy">Python dictionaries have no order.</span>
<span class="comment-copy">@Klaus D. Yet <code>OrderedDict</code>s do have it (see my <a href="http://stackoverflow.com/a/43640347/237105">answer</a> below)</span>
<span class="comment-copy">I had the same issue with python2. Python 3 fixed it for me.</span>
<span class="comment-copy">Even though JSON is unordered, it would still be useful to have an ordered abstraction for it in the json library, for the same reasons that OrderedDict is useful. For instance, I want to output some JSON objects for both human and machine readability, and I want to preserve a particular key order for the human aspect.</span>
<span class="comment-copy">@John B There's a mechanism for that, see <a href="https://stackoverflow.com/a/43640347/237105">my answer</a> below.</span>
<span class="comment-copy">One reason to have consistent ordering is if you need to generate a JSON response and then build a hash for use in an ETag or a cache. In this case we don't need it to be in a specific order, but we do need it to be in a consistent and reproducible order. Each time you call it you should get the same string. json.dumps(d, sort_keys=True) will accomplish that.</span>
<span class="comment-copy">Fly in the ointment: Python 3.6+ dictionaries <i>are</i> ordered.</span>
<span class="comment-copy">Indeed. Answer updated to reflect this.</span>
<span class="comment-copy">This is interesting. Is it guaranteed that <code>json.dumps()</code> preserves the order of the <code>OrderedDict</code> <code>b</code>? I can't find anything in the documentation.</span>
<span class="comment-copy">@EOL <code>items = dct.items()</code>, line 355 in Lib/json/encoder.py (python3.6). I can't think of a way or reason for json lib to scramble this order.</span>
<span class="comment-copy">Me neither, but it would be nice to officially guarantee it in the documentation (for the current and future versions of the <code>json</code> module), especially since JSON itself does not have any concept of ordered set of key/value pairs (<a href="http://json.org" rel="nofollow noreferrer">json.org</a>).</span>
<span class="comment-copy">I created a documentation enhancement request: <a href="http://bugs.python.org/issue30550" rel="nofollow noreferrer">bugs.python.org/issue30550</a>.</span>
<span class="comment-copy">@EOL good idea, thanks</span>
<span class="comment-copy">This is good for writing JSON, but not for reading: JSON mappings have no order, i.e., the mapping that you read from JSON is not guaranteed to be ordered as in the JSON file.</span>
<span class="comment-copy">I guess you meant <code>dumps</code> instead of <code>loads</code>? In fact, <code>loads</code> does not have any <code>sort_keys</code> argument, by default.</span>
<span class="comment-copy">You are right. I meant 'dumps' and not 'loads'. Sorry for that. I will edit this</span>
<span class="comment-copy">Thanks for the edit. No need to be sorry: this happens. :)</span>
<span class="comment-copy">sort_keys already defaults to False, so this doesn't change anything. json.dumps will not preserve the order of keys from the supplied OrderedDict</span>
<span class="comment-copy">JSON has no concept of ordered mapping, so dumping the OrderedDict <code>b</code> to JSON can change the key order, in principle. You must dump the <code>.items()</code> of the OrderedDict, as in my answer. Furthermore, there is no need for the indirection you added with the <code>c</code> variable: it has no effect (but to complicate the code).</span>
<span class="comment-copy">Thanks..I didn't know this</span>
