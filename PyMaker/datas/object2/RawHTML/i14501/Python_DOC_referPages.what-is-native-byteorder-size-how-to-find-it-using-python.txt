<div class="post-text" itemprop="text">
<p>How to find native byteorder size value using python.</p>
<pre><code>import sys
sys.byteorder //It return endianness of the system.
</code></pre>
<p><a href="https://docs.python.org/2/library/struct.html#byte-order-size-and-alignment" rel="nofollow">https://docs.python.org/2/library/struct.html#byte-order-size-and-alignment</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You obviously already know how to get the native byteorder, with <code>sys.byteorder</code>.</p>
<p>I suspect you're asking how to also get the native "64-bitness".</p>
<p>As the <a href="https://docs.python.org/3/library/platform.html" rel="nofollow"><code>platform</code></a> module docs explain, you can't use any of the information built into Python at compile time to determine this,<sup>*</sup> so you should use this runtime value:</p>
<pre><code>is_64bits = sys.maxsize &gt; 2**32
</code></pre>
<p><sub>* The problem is "fat binaries" that can run as both 32-bit and 64-bit based on a command-line switch or similar. Whichever answer is compiled in will be wrong if you use the other switch.</sub></p>
</div>
<span class="comment-copy">Yes, <code>sys.byteorder</code> returns the byteorder value. So… what's your question?</span>
<span class="comment-copy">Your question is unclear,can you add an example to your question?</span>
<span class="comment-copy">sys.byteorder gives byteorder value like little or big-endian, but i want to find native byte order size.</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/struct.html#byte-order-size-and-alignment" rel="nofollow noreferrer">docs.python.org/2/library/…</a></span>
<span class="comment-copy">Should that be <code>is_64bits = sys.maxsize &gt; (2**32-1)</code>?</span>
<span class="comment-copy">@SiHa: So are you expecting that <code>sys.maxsize == 2**32</code> means a 32-bit machine with 1-based addresses, or that it means a 64-bit machine with very oddly constrained addressing?</span>
<span class="comment-copy">@SiHa: My guess would be that if any such machine existed and someone managed to port Python to it, they'd update the docs to change the recommendations, so I'll just follow the recommendations in the docs. :)</span>
<span class="comment-copy">Actually, what I meant so say was <code>(2**31)-1</code> which is actually the max size of a 32-bit machine. So, while <code>is_64bits = sys.maxsize &gt; 2**32</code> will give you the correct answer, the comparison is actually wrong. It may be in the docs, but it's still wrong. Sarcasm does you no credit...</span>
<span class="comment-copy">@SiHa: I'm not being sarcastic. If you found a platform whose C compiler gave you a max size value of <code>2**31</code> or <code>(2**32)-1</code> or really <i>anything</i> under <code>2**32</code>, would you call it 32-bit or 64-bit? I think you'd call it 32-bit. So what the docs say it correct. You could actually argue about <code>2**32</code> itself, which is what I read your initial comment as saying… but if you're actually arguing about the values in <code>[(2**31)-1, 2**32)</code> , I think that's misguided.</span>
