<div class="post-text" itemprop="text">
<p>I have the following letters:</p>
<pre><code>Letters = ["a", "b", "c", "d", "e"]
</code></pre>
<p>What I would like is to write a generator function that will create strings that can be formed by taking a combination of any of the letters, preferably in some deterministic order like from smallest to biggest.</p>
<p>So for example if I were to run the generator 20 times I would get</p>
<pre><code> a
 b
 c
 d
 e

aa
ab
ac
ad
ae

ba
bb
bc
bd
be

ca
cb
cc
cd
ce

da
</code></pre>
<p>How would I write this generator?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the combinations functions from the itertools library. There's both combinations with replacement and without replacement</p>
<pre><code>for item in itertools.combinations(Letters, 2):
    print("".join(item))
</code></pre>
<p><a href="https://docs.python.org/3.4/library/itertools.html" rel="nofollow">https://docs.python.org/3.4/library/itertools.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Generator function:</p>
<pre><code>from itertools import *

def wordgen(letters):
    for n in count(1):
        yield from map(''.join, product(letters, repeat=n))
</code></pre>
<p>Usage:</p>
<pre><code>for word in wordgen('abcde'):
    print(word)
</code></pre>
<p>Output:</p>
<pre><code>a
b
c
d
e
aa
ab
ac
ad
ae
ba
bb
bc
bd
be
ca
...
</code></pre>
<p>A self-made alternative without using itertools:</p>
<pre><code>def wordgen(letters):
    yield from letters
    for word in wordgen(letters):
        for letter in letters:
            yield word + letter
</code></pre>
<p>Golf-version (admittedly starts with the empty string):</p>
<pre><code>def w(s):yield'';yield from(w+c for w in w(s)for c in s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product()</code></a>:</p>
<pre><code>from itertools import product, imap
letters = ["a", "b", "c", "d", "e"]
letters += imap(''.join, product(letters, repeat=2))
print letters
</code></pre>
<blockquote>
<p>['a', 'b', 'c', 'd', 'e', 'aa', 'ab', 'ac', 'ad', 'ae', 'ba', 'bb', 'bc', 'bd', 'be', 'ca', 'cb', 'cc', 'cd', 'ce', 'da', 'db', 'dc', 'dd', 'de', 'ea', 'eb', 'ec', 'ed', 'ee']</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I use a recursive generator function (without itertools) </p>
<pre><code>Letters = ["a", "b", "c", "d", "e"]

def my_generator(list, first=""):
  for letter in list:
    yield first + letter
  my_generators = []
  for letter in list:
    my_generators.append(my_generator(list, first + letter))
  i = 0
  while True:
    for j in xrange(len(list)**(i/len(list)+1)):
      yield next(my_generators[i%len(list)])
    i+=1

gen = my_generator(Letters)
[next(gen) for c in xrange(160)]
</code></pre>
<p>you get</p>
<pre><code>['a', 'b', 'c', 'd', 'e', 'aa', 'ab', 'ac', 'ad', 'ae', 'ba', 'bb',
'bc', 'bd', 'be', 'ca', 'cb', 'cc', 'cd', 'ce', 'da', 'db', 'dc',
'dd', 'de', 'ea', 'eb', 'ec', 'ed', 'ee', 'aaa', 'aab', 'aac', 'aad',
'aae', 'aba', 'abb', 'abc', 'abd', 'abe', 'aca', 'acb', 'acc', 'acd',
'ace', 'ada', 'adb', 'adc', 'add', 'ade', 'aea', 'aeb', 'aec', 'aed', 
'aee', 'baa', 'bab', 'bac', 'bad', 'bae', 'bba', 'bbb', 'bbc', 'bbd',
'bbe', 'bca', 'bcb', 'bcc', 'bcd', 'bce', 'bda', 'bdb', 'bdc', 'bdd',
'bde', 'bea', 'beb', 'bec', 'bed', 'bee', 'caa', 'cab', 'cac', 'cad',
'cae', 'cba', 'cbb', 'cbc', 'cbd', 'cbe', 'cca', 'ccb', 'ccc', 'ccd',
'cce', 'cda', 'cdb', 'cdc', 'cdd', 'cde', 'cea', 'ceb', 'cec', 'ced',
'cee', 'daa', 'dab', 'dac', 'dad', 'dae', 'dba', 'dbb', 'dbc', 'dbd',
'dbe', 'dca', 'dcb', 'dcc', 'dcd', 'dce', 'dda', 'ddb', 'ddc', 'ddd',
'dde', 'dea', 'deb', 'dec', 'ded', 'dee', 'eaa', 'eab', 'eac', 'ead',
'eae', 'eba', 'ebb', 'ebc', 'ebd', 'ebe', 'eca', 'ecb', 'ecc', 'ecd', 
'ece', 'eda', 'edb', 'edc', 'edd', 'ede', 'eea', 'eeb', 'eec', 'eed',
'eee', 'aaaa', 'aaab', 'aaac', 'aaad', 'aaae']
</code></pre>
</div>
<span class="comment-copy">I tried <code>combinations</code>, then looked at the rest of the module and found that <code>permutations</code> was more suitable for what I needed. Thanks!</span>
<span class="comment-copy">Don't clutter the namespace with a <code>from module import *</code>. Either import the individual functions you need, or just use <code>import module</code> and dot notation.</span>
<span class="comment-copy">@pzp I'm not writing a tutorial on how to import. I'm writing an mcve answer for the question. That said, I'm new here, so if you show me a community guideline saying I should do it differently, then I likely will.</span>
<span class="comment-copy"><code>yield from</code>is python 3?</span>
<span class="comment-copy">@JoseRicardoBustosM. <a href="https://docs.python.org/3/whatsnew/3.3.html" rel="nofollow noreferrer">looks like it</a>, yes. First time I'm using it, actually. Good exercise :-)</span>
<span class="comment-copy">I'm curious , <code>map(''.join, product(letters, repeat=n))</code> generates whole list (stored in RAM) and then each element is passed when is required, or each item in the list is generated in each iteration (this would be the best) ....</span>
<span class="comment-copy">this code have a problem: i required to use <code>my_generators</code> variable and store generators ( &gt; RAM )</span>
<span class="comment-copy">Thanks, you motivated me to write my own generator without using itertools. I added it to my answer.</span>
