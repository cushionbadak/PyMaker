<div class="post-text" itemprop="text">
<p>I have been trying to figure out a simple way to replace the integers within a string with x's in python. I was able to get something ok by doing the following:</p>
<pre><code>In [73]: string = "martian2015"
In [74]: string = list(string)

In [75]: for n, i in enumerate(string):
   ....:     try:
   ....:         if isinstance(int(i), int):
   ....:             string[n]='x'
   ....:     except ValueError:
   ....:         continue
</code></pre>
<p>This actually yields something like the following:</p>
<pre><code>In [81]: string
Out[81]: ['m', 'a', 'r', 't', 'i', 'a', 'n', 'x', 'x', 'x', 'x']
In [86]: joiner = ""

In [87]: string = joiner.join(string)

In [88]: string
Out[88]: 'martianxxxx'
</code></pre>
<p>My question is: is there any way of getting the result in a <strong><em>simpler manner</em></strong> without relying on <em>error/exception handling</em>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, using regex and the <a href="http://pymotw.com/2/re/" rel="nofollow"><code>re</code></a> module:</p>
<pre><code>import re

new_string = re.sub("\d", "x", "martin2015")
</code></pre>
<p>The string <code>"\d"</code> tells Python to search for all digits in the string. The second argument is what you want to replace all matches with, and the third argument is your input. (<code>re.sub</code> stands for "substitute")</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow"><code>str.isdigit</code></a> function and <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>, like this</p>
<pre><code>&gt;&gt;&gt; data = "martian2015"
&gt;&gt;&gt; "".join(["x" if char.isdigit() else char for char in data])
'martianxxxx'
</code></pre>
<p>The <code>isdigit</code> function will return <code>True</code> if all the characters in it are numeric digits. So, if it is a digit, then we use <code>"x"</code> otherwise we use the actual character itself.</p>
<hr/>
<p>You can actually use generator expression instead of list comprehension to do the same, like this</p>
<pre><code>&gt;&gt;&gt; "".join("x" if char.isdigit() else char for char in data)
'martianxxxx'
</code></pre>
<p>The only difference is generators are lazy evaluated, unlike the list comprehension which builds the entire list. The generator will give values only on demand. Read more about them <a href="https://wiki.python.org/moin/Generators" rel="nofollow">here</a>.</p>
<p>But in this particular case, with <code>str.join</code>, the list is built anyway.</p>
<hr/>
<p>If you are going to do this kind of replacement often, then you might want to know about <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow"><code>str.translate</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="nofollow"><code>str.maketrans</code></a>.</p>
<pre><code>&gt;&gt;&gt; mapping = str.maketrans("0123456789", "x" * 10)
&gt;&gt;&gt; "martin2015".translate(mapping)
'martinxxxx'
&gt;&gt;&gt; "10-03-2015".translate(mapping)
'xx-xx-xxxx'
&gt;&gt;&gt; 
</code></pre>
<p>The <code>maketrans</code> builds a dictionary with the character codes of values in the first string and the corresponding character in the second string. So, when we use the <code>mapping</code> with the <code>translate</code>, whenever it finds a character in the <code>mapping</code>, it will simply replace it with the corresponding value.</p>
</div>
<div class="post-text" itemprop="text">
<p>change <code>isinstance</code> to <code>.isdigit</code></p>
<pre><code>string = "martian2015"
for i in string:
    if i.isdigit():
        string.replace(i, "x")
</code></pre>
<p>(or <a href="https://docs.python.org/2/library/re.html" rel="nofollow">regular expressions, regex / re</a> )</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [102]: import string

In [103]: mystring
Out[103]: 'martian2015'

In [104]: a='x'*10

In [105]: leet=maketrans('0123456789',a)

In [106]: mystring.translate(leet)
Out[106]: 'martianxxxx'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't know advance data process method, you can invoke <code>string</code> module to filter num string.</p>
<pre><code>import string

old_string = "martin2015"
new_string = "".join([s if s not in string.digits else "x" for s in old_string ])

print new_string
# martinxxxx
</code></pre>
<p>Although I know my anwser is not the best solution, I want to offer different methods help people solve problems.</p>
</div>
<span class="comment-copy">Just a quick observation: try not to attribute something of <code>type &lt;list&gt;</code> to a variable called <code>string</code> as a good programming practices ;)</span>
<span class="comment-copy">@RafaelCardoso, thanks for the tip; I will definitely make sure to remember that going forward :)</span>
<span class="comment-copy">Thank you so much!</span>
<span class="comment-copy">If experience with <code>re</code> module, it can save much time and code line. It no doubt, it's best answer.</span>
<span class="comment-copy">Thank you so much!</span>
<span class="comment-copy">A list is still built using the generator expression with join, python does two passes so if you use a generator expression python first  needs to build a list.</span>
<span class="comment-copy">@PadraicCunningham You are correct. I left a note about that.</span>
<span class="comment-copy">It's <code>.isdigit()</code>, not <code>.isnum()</code> :)</span>
<span class="comment-copy">yeah, was thinking in the wrong language again (or something)... whoops</span>
<span class="comment-copy">Thanks a bunch guys!</span>
