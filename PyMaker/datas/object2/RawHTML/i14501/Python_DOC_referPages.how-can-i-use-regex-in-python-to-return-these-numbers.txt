<div class="post-text" itemprop="text">
<p>I have the following code stored as a string variable in Python. How can I use regex, along with <code>re.findall('', text)</code>, to parse out the five 9-digit numbers (all starting with "305...") under "attributeLookup" lookup in the below code?</p>
<pre><code>var PRO_META_JSON = {
    "attributeDefinition":{
        "defaultSku":305557121,
        "attributeListing":[{ 
            "label":"Finish",
                    "defaultIndex":0,
                    "options":[
                        "White::f33b4086",
                        "Beige::8e0900fa",
                        "Blue::3c3a4707",
                        "Orange::1d8cb503",
                        "Spring Green::dd5e599a"
                     ]
            }],
            "attributeLookup":[
            [0,305557121],
            [1,305557187],
            [2,305557696],
            [3,305557344],
            [4,305696435]
            ]
        }
    };
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a way to do it. First parse your string to get the json object (everything inside the most outer braces). Then decode the json object using the json module and access what you need.</p>
<pre><code>astr = '''var PRO_META_JSON = {
    "attributeDefinition":{
        "defaultSku":305557121,
        "attributeListing":[{ 
            "label":"Finish",
                    "defaultIndex":0,
                    "options":[
                        "White::f33b4086",
                        "Beige::8e0900fa",
                        "Blue::3c3a4707",
                        "Orange::1d8cb503",
                        "Spring Green::dd5e599a"
                     ]
            }],
            "attributeLookup":[
            [0,305557121],
            [1,305557187],
            [2,305557696],
            [3,305557344],
            [4,305696435]
            ]
        }
    };'''

import re
import json
pat = re.compile('^[^\{]*(\{.*\});.*$', re.MULTILINE|re.DOTALL)
json_str = pat.match(astr).group(1)
d = json.loads(json_str)

for x in d['attributeDefinition']['attributeLookup']:
    print x[1]
# 305557121
# 305557187
# 305557696
# 305557344
# 305696435
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just use the built in <a href="https://docs.python.org/3/library/json.html" rel="nofollow">json</a> library to parse it. I've assumed you've got rid of the Javascript already:</p>
<pre><code>import json

input = """{
"attributeDefinition":{
    "defaultSku":305557121,
    "attributeListing":[{ 
        "label":"Finish",
                "defaultIndex":0,
                "options":[
                    "White::f33b4086",
                    "Beige::8e0900fa",
                    "Blue::3c3a4707",
                    "Orange::1d8cb503",
                    "Spring Green::dd5e599a"
                 ]
        }],
        "attributeLookup":[
        [0,305557121],
        [1,305557187],
        [2,305557696],
        [3,305557344],
        [4,305696435]
        ]
    }
}"""

data = json.loads(input)

# Get a list you can do stuff with. This gives you:
# [[0, 305557121], [1, 305557187], [2, 305557696], [3, 305557344], [4, 305696435]]
els = data['attributeDefinition']['attributeLookup']

for el in els:
    # Each el looks like: [0, 305557121]
    print(el[1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>string = '''var PRO_META_JSON = {
    "attributeDefinition":{
        "defaultSku":305557121,
        "attributeListing":[{ 
            "label":"Finish",
                    "defaultIndex":0,
                    "options":[
                        "White::f33b4086",
                        "Beige::8e0900fa",
                        "Blue::3c3a4707",
                        "Orange::1d8cb503",
                        "Spring Green::dd5e599a"
                     ]
            }],
            "attributeLookup":[
            [0,305557121],
            [1,305557187],
            [2,305557696],
            [3,305557344],
            [4,305696435]
            ]
        }
    };'''

import json
data = json.loads(string.split('=', 1)[1].strip(';'))
for d in data['attributeDefinition']['attributeLookup']:
    print(d[1])
</code></pre>
<p>Don't know why you want to use regex. Do you also take your car to visit your neighbour?</p>
</div>
<div class="post-text" itemprop="text">
<p>in the findall you want to select the digits 0 to 9 over 9 characters like this. This still would be better using the json module rather than storing as a string.</p>
<p>I really useful tester for python regex can be found here </p>
<p><a href="http://pythex.org/" rel="nofollow">http://pythex.org/</a></p>
<pre><code>re.findall('[0-9]{9}', PRO_META_JSON.split('attributeLookup')[1])
</code></pre>
</div>
<span class="comment-copy">This looks like <code>Java</code> code, not <code>Python</code>. Did you read this from a file? You can use the <code>JSON</code> library in <code>Python</code>, then dig down to that key/value and search using native <code>Python</code> without any need for regex.</span>
<span class="comment-copy">I think you should use the <a href="https://docs.python.org/2/library/json.html" rel="nofollow noreferrer">JSON parser</a> instead.</span>
<span class="comment-copy">@Cyber it's not Java or Python. It's Javascript, apparently inside a Python string.</span>
<span class="comment-copy">Is this the only code or this is just the sample?</span>
<span class="comment-copy">this look like javascript</span>
<span class="comment-copy">Thanks for the help. When I use this, the <code>json_str</code> line gives me a <code>TypeError: expected string or buffer</code> error. I believe this is because the <code>astr</code> is actually a BeautifulSoup object and not a string. However, when I turn it into a string with <code>astr_string = str(astr)</code>, I get this error on the <code>json_str</code> line: <code>AttributeError: 'NoneType' object has no attribute 'group'</code>. Any advice?</span>
<span class="comment-copy">The second error comes from the fact that the regular expression is not a match to your string. The snippet of code I wrote works with the string you provided but if the string is slightly different (like an additional space or line at the end), it won't find a match ... the regular expression probably needs adjustment to your exact string (which i cannot see). I made a small edit in my regular expression that should be more forgiving but without seeing your exact string, it is difficult to debug.</span>
<span class="comment-copy">Thanks Julien! Your edit worked perfectly!</span>
<span class="comment-copy">You're welcome :-)</span>
<span class="comment-copy">When I try to run <code>data = json.loads(input)</code>, I get a <code>TypeError: expected string or buffer</code> error. My variable still has the <code>var PRO_META_JSON =</code> at the beginning, so I'm guessing that's why. When I try to manipulate the string and remove the first "x" characters, I get a <code>TypeError: unhashable type</code> error. Any idea what I'm doing wrong? Thanks for the help!</span>
<span class="comment-copy">Hm. Just <code>print</code> out the content of input before you try and use <code>json.loads</code> on it, so you can have a look at it. You might spot something there (e.g. in your data, there is a <i>trailing semicolon</i> you need to get rid of)</span>
<span class="comment-copy">Thanks. I tried using <code>input[-1:]</code> to remove the trailing semicolon, but it gives a <code>TypeError: unhashable type</code> error. How can I trim that semicolon from the data?</span>
<span class="comment-copy">@user994585 sorry to insist but have you not seen my answer? I think it does exactly what you're trying to do</span>
<span class="comment-copy">@user994585 you're looking for <code>input[:-1]</code> to do that one operation, or you can use Julien's code to trim it all in one go.</span>
<span class="comment-copy"><code>under "attributeLookup"</code></span>
<span class="comment-copy">DO NOT USE REGEX HERE <a href="http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags" title="regex match open tags except xhtml self contained tags">stackoverflow.com/questions/1732348/â€¦</a></span>
