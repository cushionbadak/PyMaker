<div class="post-text" itemprop="text">
<p>In matlab, it's easy to find the path to a '.m' file by 'which XX.m' and also convenient to view the code by 'open XXX.m'.</p>
<p>In Python, is there any similar command?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you've already imported the module (or can do so without any harm), the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow"><code>inspect</code></a> module is probably what you want. For example, <code>getsourcefile</code> will give you the path to the file the module was loaded from, while <code>getsource</code> will give you the source code.</p>
<p>Of course these don't always work, because some Python modules can be extension modules written in C, or cached <code>.pyc</code> files that someone installed without the <code>.py</code> file, or bundled up in a <code>.zip</code> file instead of a flat directory, or anything else you can think up and write a loader for… But in those cases, <em>nothing</em> could work; when something reasonable could work, <code>inspect</code> will.</p>
<p>There's nothing quite like the <code>open</code> function because Matlab is a GUI environment, whereas Python is just a language that can run in a wide variety of different GUIs or none at all, but once you know the path, presumably you can figure out how to open it in your IDE session or in your favorite text editor or whatever.</p>
<hr/>
<p>If you can't actually import the module (maybe the reason you're asking is because <code>import XX</code> is failing and you want to find the code to fix the problem…), but want to know which module <em>would</em> be imported, that's not quite as easy in Python 2.7 as in 3.4, but the <a href="https://docs.python.org/2.7/library/imp.html" rel="nofollow"><code>imp</code></a> module is often good enough—in particular, <code>imp.find_module('XX')</code> will usually get you what you want (as long as you pay attention to the explanation about packages in the docs).</p>
</div>
<span class="comment-copy">You can use help() to determine a module location on your file system. Is what you're looking for?</span>
<span class="comment-copy">inspect.getsourcefile() works. Thx. I'm using the IDE spyder. There is a command 'edit XXX' to open the source file in editor, but working for .py files in current folder only.</span>
<span class="comment-copy">@Lee: I know nothing about spyder, but if it has some way to open a file by pathname, or if it's good enough to just do it manually, hopefully this answer is sufficient.</span>
<span class="comment-copy">I found it. open_in_spyder(inspect.getsourcefile()). Thanks @abarnert</span>
