<div class="post-text" itemprop="text">
<p>I want to write some shorthand expression in while(like c),but it wouldn't work in python.     </p>
<pre><code>while token=TokenBuffer.peek() and token != sentinel
    doSomeThing()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't do this in Python. Assignments are statements in Python, not expressions.</p>
<p>So, what can you do instead? The most pythonic is probably using the <a href="https://docs.python.org/3/library/functions.html#iter"><code>iter</code></a> function:</p>
<pre><code>for token in iter(TokenBuffer.peek, sentinel):
</code></pre>
<p>The docs for this are a little confusing to a novice:</p>
<blockquote>
<p>… If the second argument, <em>sentinel</em>, is given, then object must be a callable object. The iterator created in this case will call object with no arguments for each call to its <code>__next__()</code> method; if the value returned is equal to <em>sentinel</em>, <code>StopIteration</code> will be raised, otherwise the value will be returned.</p>
</blockquote>
<p>That's great if you already understand how iterators and for loops work under the covers, but if you don't, the example below may be more helpful:</p>
<blockquote>
<p>One useful application of the second form of <code>iter()</code> is to read lines of a file until a certain line is reached. The following example reads a file until the <code>readline()</code> method returns an empty string:</p>
</blockquote>
<pre><code>with open('mydata.txt') as fp:
    for line in iter(fp.readline, ''):
        process_line(line)
</code></pre>
<p>That makes it a lot clearer: <code>for line in iter(fp.readline, ''):</code> calls <code>fp.readline()</code> over and over until it gets a <code>''</code>. Just like you want to do calling <code>TokenBuffer.peek()</code> over and over until it gets a <code>sentinel</code>.</p>
</div>
<span class="comment-copy">Note that most of the time this is a symptom of poor design - much better is just building an <code>__iter__</code> or a method that returns an iterable (eg. for the file example, one would do <code>for line in fp: ...</code>).</span>
<span class="comment-copy">@Veedrac: But <code>for line in fp:</code> doesn't stop at the first empty line, so it's not a general-purpose replacement. (Yes, it's a bad example, because <code>readline</code> only returns an empty line at EOF, not at a blank line… but it's a bad example from the official docs, so…) Sure, you could use <code>for line in takewhile(bool, fp):</code> or something, but I don't think that's clearer.</span>
<span class="comment-copy"><code>readline</code> includes line-ends, so it won't stop until the end of the file (blank lines will still give <code>'\n'</code>). Anyway, I agree with what you've written in the answer - my comment was for the OP.</span>
<span class="comment-copy">@Veedrac: My comment already says that, inside the parentheses. (And the sad thing is, they could easily have made it a good example without making it incomprehensible. For example, if you had <code>map(str.rstrip, fp)</code> instead of <code>fp</code>, then the <code>iter</code> function would read the RFC822 header and leave the body for later, while the <code>for</code> loop would read the whole file. Although a completely different example, like <code>iter(sock.recv, b'')</code> would probably be better.)</span>
<span class="comment-copy">Whoops, not sure how I missed your parenthetical.</span>
