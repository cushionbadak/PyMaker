<div class="post-text" itemprop="text">
<p>I have a binary file and I want to extract all ascii characters while ignoring non-ascii ones. Currently I have:</p>
<pre><code>with open(filename, 'rb') as fobj:
   text = fobj.read().decode('utf-16-le')
   file = open("text.txt", "w")
   file.write("{}".format(text))
   file.close
</code></pre>
<p>However I'm encountering an error when writing to file <code>UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 0: ordinal not in range(128)</code>. How would I get Python to ignore non-ascii?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the built-in ASCII codec and tell it to ignore any errors, like:</p>
<pre><code>with open(filename, 'rb') as fobj:
   text = fobj.read().decode('utf-16-le')
   file = open("text.txt", "w")
   file.write("{}".format(text.encode('ascii', 'ignore')))
   file.close()
</code></pre>
<hr/>
<p>You can test &amp; play around with this in the Python interpreter:</p>
<pre><code>&gt;&gt;&gt; s = u'hello \u00a0 there'
&gt;&gt;&gt; s
u'hello \xa0 there'
</code></pre>
<p>Just trying to convert to a string throws an exception.</p>
<pre><code>&gt;&gt;&gt; str(s)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 6: ordinal not in range(128)
</code></pre>
<p>...as does just trying to encode that unicode string to ASCII:</p>
<pre><code>&gt;&gt;&gt; s.encode('ascii')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 6: ordinal not in range(128)
</code></pre>
<p>...but telling the codec to ignore the characters it can't handle works okay:</p>
<pre><code>&gt;&gt;&gt; s.encode('ascii', 'ignore')
'hello  there'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Basically, the ASCII table takes value in range [0, 2<sup>7</sup>) and associates them to (writable or not) characters. So, to ignore non-ASCII characters, you just have to ignore characters whose code isn't comprise in [0, 2<sup>7</sup>), aka inferior or equal to 127.</p>
<p>In python, there is a function, called <code>ord</code>, which accordingly to the docstring</p>
<blockquote>
<p>Return the integer ordinal of a one-character string.</p>
</blockquote>
<p>In other words, it gives you the code of a character. Now, you must ignore all characters that, passed to <code>ord</code>, return a value greater than 128. This can be done by:</p>
<pre><code>with open(filename, 'rb') as fobj:
    text = fobj.read().decode('utf-16-le')
    out_file = open("text.txt", "w")

    # Check every single character of `text`
    for character in text:
        # If it's an ascii character
        if ord(character) &lt; 128:
            out_file.write(character)

    out_file.close
</code></pre>
<p>Now, if you just want to conserve <em>printable</em> characters, you must notice that all of them - in the ASCII table at least - are between 32 (space) and 126 (tilde), so you must simply do:</p>
<pre><code>if 32 &lt;= ord(character) &lt;= 126:
</code></pre>
</div>
<span class="comment-copy">Are you sure that the file does not have unicode characters within?</span>
<span class="comment-copy">It looks like your input file is encoded as utf-16-le, so you should specify that encoding when you open the file. In Python 2 you need to use <a href="https://docs.python.org/2/library/codecs.html#codecs.open" rel="nofollow noreferrer">codecs.open</a>, but in Python 3 you can use the normal built-in <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">open</a></span>
<span class="comment-copy">Is there a predetermined range for what is Python considers ascii? Output is still picking up characters such as SOH,ACK (not sure what these are I'm just typing them as they appear in Sublime Text).</span>
<span class="comment-copy">@VeraWang SOH and ACK are ASCII. The range is 0 to 127 and those are 1 and 6.</span>
<span class="comment-copy">@VeraWang -- ASCII characters 0..31 are non-printable (including those two, see the charts on this wikipedia page about ASCII - <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_printable_code_chart" rel="nofollow noreferrer">en.wikipedia.org/wiki/ASCII#ASCII_printable_code_chart</a>)  Maybe more information on the actual problem you're trying to solve would be useful if this isn't giving you what you need...</span>
<span class="comment-copy">So if I only wanted ASCII <i>printable</i> characters [32, 127] it's a simple <code>ord(char) &lt; 128 and ord(char) &gt; 31</code>?</span>
<span class="comment-copy">@VeraWang Almost (127 isn't printable), although <code>31 &lt; ord(char) &lt; 127</code> is simpler.</span>
<span class="comment-copy">@Spirine Brackets are wrong, should be [0, 2^7).</span>
<span class="comment-copy">Or change to <code>32 &lt;= ord(character) &lt;= 126</code>, as that's apparently what she wants anyway. That should be enough change then.</span>
<span class="comment-copy">You keep doing that as <code>if ord(character) &gt;= 32 and ord(character) &lt;= 126</code>... why?</span>
