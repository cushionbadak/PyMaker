<div class="post-text" itemprop="text">
<p>I have this function</p>
<pre><code>def conseq_sequences(li, length):
    """ Takes a list and a length. Returns all sub-sequences in li that
    are successice (e.g. [1,2,3] or [5,6,7,8]) and of the right length.

    E.g.  &gt;&gt;&gt; conseq_sequences([1,6,7,8,9,8,9], length=3)
          [[6,7,8], [7,8,9]]
    """
    return [li[n:n + length] for n in range(len(li) - length + 1)
            if li[n:n + length] == range(li[n], li[n] + length)]
</code></pre>
<p>This function is present in a class, and I can not understand way it does not work. When I invoke it, I get an empty sequence.</p>
<pre><code>&gt;&gt;&gt; conseq_sequences([1,6,7,8,9,8,9], length=3)
[]
</code></pre>
<p>Can someone help to make the modification in it in order to return all sub-sequences in list that are successive, as in the example?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.x, <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow"><code>range</code></a> doesn't return a list, but a range object.</p>
<pre><code>&gt;&gt;&gt; range(1, 10)
range(1, 10)
&gt;&gt;&gt; type(range(1, 10))
&lt;class 'range'&gt;
&gt;&gt;&gt; [1, 2, 3] == range(1, 4)
False
&gt;&gt;&gt; [1, 2, 3] == list(range(1, 4))
True
</code></pre>
<p>So, you need to explicitly convert that to a list, and then compare, like this</p>
<pre><code>[li[n:n + length] for n in range(len(li) - length + 1)
    if li[n:n + length] == list(range(li[n], li[n] + length))]
</code></pre>
<p>Here, we create a new list, by converting the range object to a list, with</p>
<pre><code>list(range(li[n], li[n] + length))
</code></pre>
<p><strong>Demo</strong></p>
<pre><code>Python 3.4.0 (default, Apr 11 2014, 13:05:11) 
[GCC 4.8.2] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def conseq_sequences(li, length):
...     """ Takes a list and a length. Returns all sub-sequences in li that
...     are successice (e.g. [1,2,3] or [5,6,7,8]) and of the right length.
... 
...     E.g.  &gt;&gt;&gt; conseq_sequences([1,6,7,8,9,8,9], length=3)
...           [[6,7,8], [7,8,9]]
...     """
...     return [li[n:n + length] for n in range(len(li) - length + 1)
...             if li[n:n + length] == list(range(li[n], li[n] + length))]
... 
&gt;&gt;&gt; conseq_sequences([1, 6, 7, 8, 9, 8, 9], 3)
[[6, 7, 8], [7, 8, 9]]
</code></pre>
</div>
<span class="comment-copy"><code>and I can not understand way it does not work</code> - what do you mean by that?</span>
<span class="comment-copy">When i make: conseq_sequences([1,6,7,8,9,8,9], length=3), it return: [ ]</span>
<span class="comment-copy">I get <code>[[6, 7, 8], [7, 8, 9]]</code> as expected.</span>
<span class="comment-copy">@ thefourtheye I use python 3.4</span>
<span class="comment-copy">What did you do?  thefourtheye</span>
<span class="comment-copy">only one question #thefourtheye: Why we did not create a list in [for n in range(len(li) - length + 1)]</span>
<span class="comment-copy">Because we are just iterating the range object there. When we compare a list object to another object, that also has to be a list object. That is why we are converting only during the comparison.</span>
<span class="comment-copy">Can I ask one more thing,  #thefourtheye? If a have a class written in python2, should I convert all the range objects in a list?</span>
<span class="comment-copy">@user3573552 Nope. If you are just iterating a <code>range</code>, then you don't have to. You should convert that to a list, only when you want that to be treated as a list. Otherwise, <code>range</code> object is enough for most of the cases.</span>
<span class="comment-copy">@ thefourtheye thank you very much</span>
