<div class="post-text" itemprop="text">
<p>I am making a text based game with my friend for a programming class, we are avoiding using object oriented stuff so please avoid those suggestions. to use the program I would normally do type "help" then I can go in any direction to move like "right", "left", "down" and "up" when I try to use those commands I get an error. this happend after I added the spawnMonster command part</p>
<pre><code>#Connor and Griffin's text based adventure
import os
import random

############################
####---Variable setup---####




#########ADD COMMAND VARIATION############

#########ADD ITEM LISTS#################




commands = 1 #for debuging only please
maxHealth = 100 #Default begin health
health = 100 #Current health
mana = 0 #THERES NO MAGIC
mapS = [5, 5]
objects = {}
color = "0f"
output = "" #this is where whats happening is told to you
level = 1



canMove = 1

playerSym = "P"


# for activeQuests remember that if the value is 0 its not completed and if its 1 its completed
activeQuests = {"Journey To Riverwood": 0}
# Add new quest names above^
commandList = {"help", "legend", "color", "show inv", "quests", "console", "up", "left", "right", "down", "clear", "map"}
#Default inventory
inv = {"apple(s)":2, "shortsword":1, "gold":50,"cloth shirt":1,"pair of cloth pants":1,"pair of shoes":1}
clearedSpaces = []

##### "Name":baseDMG #####
monsters = {"Goblin":1, "Troll":3, "Bear":2, "Giant Spider": 1, "Bandit":1, "Goblin Chief":3}

###########################
###########################



#####   Name:lv:monsterSpawnRate    #####
zones = {"Forest":[1,90]}



#######################
#---Quest Log Stuff---#


def checkQuest():
    for questn in activeQuests:
        print("\n------", questn, "------")

        if activeQuests[questn] == 0:
            print("\nNot  Complete")

        else:

            print("\nComplete")

            ######Description for quests######
        if questn == "Journey To Riverwood":
            print("""
Welcome to Connor and Griffins excellent adventure!
try out some of the commands like; help, quests,
color, inv or show inv. now using your new found
commands move to the city of riverwood.\n\n""")


#########################
#########################


############################
###---Scenes/Functions---###


def mapSize(x, y):
    global mapS
    mapS = [x, y]

####Ads point to map
def addObject(name, x, y, symbol):
    objects[name] = [x, y, symbol]
    legend[symbol] = name

#### Clears some variables
def roomStart():
    global objects
    objects = {}
    global legend
    legend = {"░":"Unknown area"}
    global roomName
    roomName = "BLANK"

def newArea():
    for area in zones:
        global spawnChance
        spawnChance = zones[area][1]


def spawnMonster():
    enemy, DMG = random.choice(monsters)
    return enemy


def moveToNewSpace():
    rand = random.randint(1,100)
    if rand &lt;= spawnChance:
        global spawnedMonster
        spawnMonster()

###Move player
def changePos(name, newx, newy):
    objects[name][0] += newx
    objects[name][1] += newy
    global clearedSpaces
    clearedSpaces.append([objects[name][0],objects[name][1]])
    moveToNewSpace()




###First room
def roomBegin():
    roomStart()
    mapSize(15,10)
    global roomName
    roomName = "Forest"
    newArea()
    addObject("Riverwood",10,5,"R")
    addObject("Griffin's House",2,2,"G")
    addObject("Player",2,3,playerSym) #######Remember to make a "ChangePos" command to change the pos of the player when they move#######
    clearedSpaces.append([2,3])




    ################### MAPPING HERE ##################
def makeMap():
    print("\n------"+roomName+"------")
    for y in range(mapS[1]):
        line = ""
        numy = y+1
        for x in range(mapS[0]):
            numx = x + 1
            for place in objects:
                if objects[place][:2] == [numx, numy]:
                    line += objects[place][2] 
                    break
            else:

                if [numx, numy] in clearedSpaces:
                    line += " "
                else:
                    line += "░"

        print(line)
    print("\n----Legend----\n")
    for thing in legend:
        print(thing + " - " + legend[thing])



############################
############################


#######################
###--- MAIN LOOP ---###

roomBegin()

while 1 == 1:
    makeMap()
    print("\n\n" + output + "\n\n")
    print("\n\nHealth is at ",health,"/",maxHealth)
    command = input("Enter action: ")

    if command.lower() == "quests":
        os.system("cls")
        checkQuest()

    elif command.lower() == "legend":
        os.system("cls")
        print("\n----Legend----\n")
        for thing in legend:
            print(thing + " - " + legend[thing])


    elif command.lower() == "help":
        os.system("cls")
        print("\n\n------HelpMenu------\n")
        for comd in commandList:
            print(comd)

    elif command.lower() == "color":
        newc = input("new color: ")
        os.system("color 0" + newc)
        os.system("cls")

    elif command.lower() == "show inv" or command.lower() == "inv" or command.lower() == "inventory":
        os.system("cls")
        print("\n------Inventory------\n")
        for item in inv:
            print(" ", inv[item]," ", item)

    elif command.lower() == "console":
        if commands == 1:
            consolecmd = input("Enter a command: ")
            os.system(consolecmd)
        else:
            print("Sorry, you dont have permition to use that command.")

    elif command.lower() == "up":
        if canMove == 1:
            os.system("cls")
            changePos("Player", 0,-1)

        else:
            os.system("cls")
            output += "\nCant move that way right now!"

    elif command.lower() == "down":
        if canMove == 1:
            os.system("cls")
            changePos("Player", 0,1)
        else:
            os.system("cls")
            output += "\nCant move that way right now!"


    elif command.lower() == "left":
        if canMove == 1:
            os.system("cls")
            changePos("Player", -1,0)
        else:
            os.system("cls")
            output += "\nCant move that way right now!"

    elif command.lower() == "right":
        if canMove == 1:
            os.system("cls")
            output = "There are some trees here, and a small pond"
            changePos("Player", 1,0)
        else:
            os.system("cls")
            output += "\nCant move that way right now!"

    elif command.lower() == "clear":
        os.system("cls")

    else:
        os.system("cls")
        print("Previous attempt was an invalid command, try again.")


#######END MAIN#######
######################
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow"><code>random.choice</code></a> function requires a <em>sequence</em>.</p>
<p>In a previous version of your code (or maybe it was code from a classmate of yours just having similar but not identical problems with similar code?), you had the monsters stored in a list, like <code>[("Goblin", 1), ("Troll", 3), …]</code>. For that code, <code>random.choice</code> works, because a list is a sequence.</p>
<p>But now you have a dict. And a dict is not a sequence.</p>
<p>You can get a list of all of the keys in a dict just by writing <code>list(d)</code>. So, you could do this:</p>
<pre><code>return random.choice(list(monsters))
</code></pre>
<p>But you're not actually getting any benefit from <code>monsters</code> being a dict from what I can tell, so why not just use a list in the first place?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>monsters</code> is a dictionary. It is being passed to <code>random.choice()</code>, however, <code>random.choice()</code> accepts a sequence as its argument (from which it randomly selects one element). This will not work for a dictionary and you will see a <code>KeyError</code> exception if you try.</p>
<p>Since you just want to return an enemy from <code>spawnMonster()</code> you can instead use the keys of <code>monsters</code> which is a list:</p>
<pre><code>monsters = {"Goblin":1, "Troll":3, "Bear":2, "Giant Spider": 1, "Bandit":1, "Goblin Chief":3}

def spawnMonster():
    return random.choice(monsters.keys())
</code></pre>
<p><strong>Update</strong></p>
<p>Since you are using Python 3 you can do this instead (also works in Python 2):</p>
<pre><code>def spawnMonster():
    return random.choice(tuple(monsters))
</code></pre>
</div>
<span class="comment-copy">That was me. To be honest I fell asleep coding and I accidentally deleted some of that work without realizing it. Thank you for reminding me and also helping me all day.</span>
<span class="comment-copy">The OP's code is almost certainly Python 3 (see his <code>input</code> calls), so  <code>monsters.keys()</code> will be a dict key view, which is a set-like object, not a list or other sequence, so this will give him the same error he's already got.</span>
<span class="comment-copy">Yes sorry I should have mentioned that im using 3.4.3. When I use the updated code I get the error "TypeError: 'dict_keys' object does not support indexing.</span>
<span class="comment-copy">@user3666755: You should edit your question to add the <code>python-3.x</code> tag.</span>
<span class="comment-copy">@abarnert: thanks for noticing use of Python 3. Updated for both Pythons.</span>
