<div class="post-text" itemprop="text">
<p>we have a module of static methods in our python app. these methods use a lot of private (e.g: "__do_sub_task2(**args)") I would like to write unit tests for these private static methods within this module, but I am getting refernce errors.</p>
<p>is there a way to do this?</p>
<p><strong>update: adding scenario</strong></p>
<p>I have a module file named 'my_module.py'
contents of said file is as follows:</p>
<pre><code>def public_method_foo(my_number):
  return __sub_method_bar(my_number * 10)

def __sub_method_bar(other_number)
  return other_number + 11
</code></pre>
<p><strong>update #2</strong>
The reason I am asking this question is because I have a similar scenario as above, but when I add the following reference to my test.py module file:</p>
<pre><code>from my_module import __sub_method_bar
</code></pre>
<p>and try to use it in my test, I get the following exception in my test </p>
<p>global name '_MyTests__sub_method_bar' is not defined</p>
</div>
<div class="post-text" itemprop="text">
<p>What you have are not methods, not private, and not static; they're just plain old public functions in the module. So you call them the same way as any other function. For your example:</p>
<pre><code>&gt;&gt;&gt; my_module.__sub_method_bar(5)
</code></pre>
<p>That's it; nothing tricky.<sup>*</sup></p>
<p><sub>* Well, there is <em>one</em> tricky thing, but it's probably not going to affect you here: If <code>my_module</code> doesn't have an <code>__all__</code>, and you do <code>from my_module import *</code>, you will not get any of the globals (including functions) whose names start with <code>_</code>. But normally your unit tests are going to <code>import my_module</code>, so this won't be relevant.</sub></p>
<hr/>
<p><em>Methods</em> are callables that are members of a <em>class</em>. And methods <em>can</em> be private ("private" in this sense means "visible only to this class, not even to super- or sub-classes", so it doesn't make sense for anything but methods). The tutorial chapter on <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow">Classes</a> explains how private methods are implemented, with name-mangling. Methods (private or otherwise) can also be static ("static" in this context means "does not take the normal <code>self</code>", so again, it doesn't make sense for anything but methods). Either way, for a private method, you have to manually demangle the name to call it from outside:</p>
<pre><code>&gt;&gt;&gt; thingy = Thingy()
&gt;&gt;&gt; thingy._Thingy__private_method(5)
&gt;&gt;&gt; Thingy._Thingy__private_static_method(5)
</code></pre>
</div>
<span class="comment-copy">Aside - typically you do not write unit tests for private methods, but instead the public methods that use them.</span>
<span class="comment-copy">but that would not be a unit test, it would be an integration test of both methods</span>
<span class="comment-copy">Are these really <code>@staticmethod</code>s? Or do you mean something different by "static"? (And if so, what?)</span>
<span class="comment-copy">Not necessarily. E.g. <a href="http://programmers.stackexchange.com/questions/100959/how-do-you-unit-test-private-methods" title="how do you unit test private methods">programmers.stackexchange.com/questions/100959/â€¦</a></span>
<span class="comment-copy">@NathanTregillus: OK, I've updated the answer to answer what you're actually trying to ask, and also to explain why it's not what you actually asked.</span>
<span class="comment-copy">from my_module import __sub_method_bar as sub_method_bar</span>
<span class="comment-copy">@Reishin: He's asking about <code>__methodname</code>, which is different from <code>_methodname</code> (but only in methods, not in module-level functions).</span>
<span class="comment-copy">@abarnert possibly you mean "in classes" :)</span>
<span class="comment-copy">@Reishin: Yeah, either "in classes" or "for methods", not "in methods". Apparently much of talking at Germans today has broken my prepositions. :)</span>
