<div class="post-text" itemprop="text">
<p>I have a loop that looks like this:</p>
<pre><code>for i in range(len(some_list)):
    response = requests.post(some_url, some_params)
    if response.status_code != HTTPOk:
       # do something
</code></pre>
<p>What I would like to do is change response of requests.post in the second iteration of the loop. From within my test, I know I can do something like:</p>
<pre><code>mock_response = mock.Mock()
mock_response.status_code = 404
with mock.patch(mymodule.requests.post, return_value=mock_response):
   mymodule.some_function()
</code></pre>
<p>But that only seems to work for one status_code. I looked at <a href="http://www.voidspace.org.uk/python/mock/mock.html#mock.Mock.side_effect" rel="noreferrer">side_effect</a>, and it looks like I can iterate through the loop like so:</p>
<pre><code>mock_response.side_effect = [
    mock.Mock(status_code=400), mock.Mock(status_code=200)
]
with mock.patch(mymodule.requests.post, return_value=mock_response):
   mymodule.some_function()
</code></pre>
<p>However, it looks like it doesn't actually get the "right" status code. What's the best way of changing the behavior in side_effect or return_value to properly get the behavior I want? I think side_effect is what I want, but I'm not sure what the best way is to mock the responses.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simpler and cleaner way to do it is</p>
<pre><code>with mock.patch("mymodule.requests.post", 
                side_effect=[Mock(status_code=400), Mock(status_code=200)]) as mock_post:
   mymodule.some_function()
</code></pre>
<p><a href="https://docs.python.org/3/library/unittest.mock.html#patch" rel="nofollow"><code>patch</code></a> create <code>mock_post</code> object by <code>MagicMock(side_effect=mock_responses)</code> and replace <code>mymodule.requests.post</code> reference. You can also use <code>mock_post</code> to check <code>post()</code> calls by something like:</p>
<pre><code>mock_post.assert_has_calls([mock.call(first_url, first_params), mock.call(second_url, second_params)])
</code></pre>
<p>You can do the same work by build and configure <code>mock_post</code> before and then pass it as <code>new</code> parameter (the second <code>patch</code> argument) but by this way you have 2 downside</p>
<ol>
<li>More code to write  </li>
<li>Lose the ability to use <code>autospec=True</code> options in <code>patch</code></li>
</ol>
<p><a href="https://docs.python.org/3/library/unittest.mock.html#autospeccing" rel="nofollow">Autospeccing</a> is a very powerful feature of <code>mock</code> framework that prevent a lot of silly bug both in test and code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually turns out it was as simple as:</p>
<pre><code>mock_response.side_effect = [
    mock.Mock(status_code=400), mock.Mock(status_code=200)
]
with mock.patch(mymodule.requests.post, mock_response):
   mymodule.some_function()
</code></pre>
</div>
