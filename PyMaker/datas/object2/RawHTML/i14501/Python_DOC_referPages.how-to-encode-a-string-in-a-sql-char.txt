<div class="post-text" itemprop="text">
<p><code>'admin'</code> encoded is = <code>CHAR(97, 100, 109, 105, 110)</code></p>
<p>I would like to know if there is a module or a way to convert each letter of a string to SQL <code>CHAR</code>s. If not, how do I convert it myself? I have access to a chart that says a=97, b=98, etc., if that helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure why you need this at all. It's not hard to get the string representation of a <code>CHAR</code> field holding ASCII or Unicode or whatever code points. But I'm pretty sure you don't need that, because databases already know how to compare those to strings passed in SQL, etc. Unless you're trying to, say, generate a dump that looks exactly like the ones you get from some other tool. But, assuming you <em>do</em> need to do this, here's how.</p>
<hr/>
<p>I think you're looking for the <a href="https://docs.python.org/3/library/functions.html#ord" rel="nofollow"><code>ord</code></a> function:</p>
<blockquote>
<p>Given a string representing one Unicode character, return an integer representing the Unicode code point of that character. For example, ord('a') returns the integer 97 and ord('\u2020') returns 8224. This is the inverse of chr().</p>
</blockquote>
<p>This works because Python has access to that same chart that you have—in fact, to a bunch of different ones, one for each encoding it knows about. In fact, that chart is pretty much what an encoding <em>is</em>.</p>
<p>So, for example:</p>
<pre><code>def encode_as_char(s):
    return 'CHAR({})'.format(', '.join(str(ord(c)) for c in s))
</code></pre>
<p>Or, if you just wanted a list of numbers, not a string made out of those numbers, it's even simpler:</p>
<pre><code>def encode_as_char(s):
    return [ord(c) for c in s]
</code></pre>
<hr/>
<p>This is all assuming that either (a) your database is storing Unicode characters and you're using Python 3, or (b) your database is storing 8-bit characters and you're using Python 2. Otherwise, you need an <code>encode</code> or <code>decode</code> step in there as well.</p>
<p>For a Python 3 Unicode string to a UTF-8 database (notice that we don't need <code>ord</code> here, because a Python 3 <code>bytes</code> is actually a sequence of numbers):</p>
<pre><code>def encode_as_utf8_char(s):
    return 'CHAR({})'.format(', '.join(str(c) for c in s.encode('utf-8')))
</code></pre>
<p>For Python 2 UTF-8 string to a Unicode database:</p>
<pre><code>def encode_utf8_as_char(s):
    return 'CHAR({})'.format(', '.join(str(ord(c)) for c in s.decode('utf-8')))
</code></pre>
</div>
<span class="comment-copy">something tells me you are doing it wrong .... not sure what you are doing but you should not have to be worrying about this</span>
<span class="comment-copy">Put Python 2.7 in the <i>tags</i> not the title. I'll do it for you to show you what I mean.</span>
<span class="comment-copy">@abarnet Hey, I am not so sure about how to use it. For example: i have  user_choice = 'admin' and I wish to convert it, how do I do? And I am using python 2.7</span>
<span class="comment-copy">@bob: You just call <code>encode_as_char(user_choice)</code> and it will return the string <code>'CHAR(97, 100, 109, 105, 110)'</code>, which is what you wanted, right?</span>
<span class="comment-copy">@JoranBeasley: Yes, probably. I moved the "you probably don't need this" from the bottom to the top of the answer.</span>
<span class="comment-copy">@bob: I don't know how to do a step by step when there's only one step: call the function. If you're asking how to fit it into your existing code, then nobody can do that without seeing the existing code you're trying to fit it into. And nobody can debug "it doesn't work" without knowing exactly what you did and exactly how it didn't work.</span>
<span class="comment-copy">@bob: Well, it was my mistake, not yours. :) I'm just pointing out that it's important to learn to look for that mistake, because you are never going to stop making it (at least I haven't stopped after a few decades…), and neither are the people you collaborate with.</span>
