<div class="post-text" itemprop="text">
<p>From the ctypes documentation of <a href="https://docs.python.org/2/library/ctypes.html#specifying-the-required-argument-types-function-prototypes" rel="nofollow">python 2.x</a>, we have:</p>
<pre><code>&gt;&gt;&gt; printf("String '%s', Int %d, Double %f\n", "Hi", 10, 2.2)
</code></pre>
<p>And from the ctypes documentation of <a href="https://docs.python.org/3/library/ctypes.html#specifying-the-required-argument-types-function-prototypes" rel="nofollow">python 3.x</a>, we have:</p>
<pre><code>&gt;&gt;&gt; printf(b"String '%s', Int %d, Double %f\n", b"Hi", 10, 2.2)
</code></pre>
<p>So in one case the argtypes for <code>c_char_p</code> requires a <code>str</code> as input, while in the second case it requires <code>bytes</code>. How should I write my function to handle both python 2.x and python 3.x ?</p>
<p>Typical scenario is:</p>
<pre><code>my_c_func.argtypes = [ c_char_p ]
if __name__ == '__main__':
  import sys
  filename = sys.argv[1];
  my_c_func( filename )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Those types are equivalent. In C strings are arrays or pointers to the char type (each char represented by one byte). In python 3 the closest data type is <code>bytes</code>. Strings in python 3 are encoded using UTF-8, so each char is not guaranteed to be exactly one byte. Whereas, in python 2 strings are typically encoded using Latin-1 (depends on your locale I believe) -- one char, one byte.</p>
<p>To write code that works regardless of interpreter version you should just write <code>b"your string"</code>. This creates a <code>str</code> object in python 2 and a <code>bytes</code> object in python 3. Conversely to guarantee a unicode string use <code>u"your string"</code>. This creates a <code>unicode</code> object in python 2 and a <code>str</code> object in python 3.</p>
</div>
<span class="comment-copy">My quick check suggest that in python 2 <code>b'abc'</code> is the same as <code>'abc'</code>.</span>
<span class="comment-copy">The main thing is to ensure you don't get a unicode string both p2 and p3 work the same way if it's a bytes variable</span>
<span class="comment-copy">The default encoding in Python 2 is ASCII, not Latin-1, but typically byte strings will be in the filesystem or locale encoding. Strings in Python 3 are not encoded. You probably mean the default encoding used for source code and <code>str.encode</code> is UTF-8 in Python 3, but of course you can use whatever encoding you want. The OP's <code>sys.argv</code> example will use the filesystem encoding in Python 2 and a unicode string in Python 3. These issues aren't particular to ctypes. The <a href="http://pythonhosted.org/six" rel="nofollow noreferrer">six module</a> can help ease the pain of supporting 2.x and 3.x from a common code base.</span>
