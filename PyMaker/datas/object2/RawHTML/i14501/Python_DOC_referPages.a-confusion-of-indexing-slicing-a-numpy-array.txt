<div class="post-text" itemprop="text">
<p>I have a clarification to make when slicing through numpy arrays.</p>
<p>Suppose I want to slice an array with the index counting down from some higher value to the first index.  For example, a = np.zeros(10)</p>
<p>If I do a[5::-1], I get array([ 0.,  0.,  0.,  0.,  0.,  0.]), but why when I do a[5:-1:-1], I get the following array([], dtype=float64).  I don't understand the logic behind it.  It is important for me to specify the last index.  On the other hand if I want the first 5 entries of this array, both a[0:5:1] and a[:5:1] give me the same result. What is wrong in using the -1 as the index?</p>
<p>On a side note, how do I obtain the union of two disjoint slices?</p>
<p>Thanks </p>
</div>
<div class="post-text" itemprop="text">
<p>To slice backwards with last index <code>-1</code>, you need your start index to be <em>larger</em> than your stop index, so:</p>
<pre><code>import numpy as np
a = 10+np.arange(10)

print a[-1:5:-1]   # [19 18 17 16]
print a[6:][::-1]  # [19 18 17 16]  A less confusing alternative
</code></pre>
<p>How does this make sense:<br/> </p>
<p>First a negative step always means "stepping towards smaller indices".  So to list an array with a negative step, the first index must be larger than that last.  This gets a  bit confusing when negative indices are used, but here, as elsewhere, one must think of negative step as "interpreted as <code>n+step</code>".  After all, stepping in a positive direction from <code>5</code> to <code>-1</code>, makes no more sense than than stepping in a negative direction from <code>-1</code> to <code>5</code>; both only make sense by the understanding that <code>-1</code> is interpreted as <code>n-1</code>.</p>
<p>What is intrinsically confusing about reverse stepping is the Python policy of not including the <code>end</code> element in a <code>a[start:end]</code>.  In general, this allows for much cleaner indexing, but here one has to explicitly deal with this issue since what was the end point (and was excluded) is now the start point (and is included).  That is, <code>a[5:-1:-1]</code> is not the reverse of <code>a[-1:5:-1]</code>.</p>
<p>Given that I want to think about these endpoint issues as little as possible, I usually just do what I have above as the less confusing option.</p>
<p>(All quotes in above are taken from <a href="http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html" rel="nofollow">here</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, by convention the index -1 refers to the last element of the array.  -2 is the next-to-last, and so on.  When you slice from 5 to -1, that's equivalent to the slice <code>[5:9]</code> for an array of length 10.  When you add a <code>-1</code> step, you're saying "slice <em>downwards</em> from 5 to 9."  But that's nonsensical since 5 is below 9, so you get an empty list.</p>
<blockquote>
<p>On a side note, how do I obtain the union of two disjoint slices?</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow"><code>itertools.chain()</code></a>.</p>
</div>
<span class="comment-copy">Your union question is a bit unclear because "union" is a word for a set, but an array isn't usually treated as a set.  Do you want <code>concatenate</code>?  Regardless, it's better to ask this as a separate question.</span>
<span class="comment-copy"><code>a[slice(5,None,-1)]</code> is the equivalent to <code>a[5::-1]</code>.  This <code>slice</code> notation may help if you have to specify the last index.  <code>a[5:None:-1]</code> also works.</span>
<span class="comment-copy">Thanks!  I get it.  However, the ambiguity is in the fact that -1 is not larger than 5 in physical terms, but only in terms of indices.  Don't you think that's a little confusing?</span>
<span class="comment-copy">Yes, personally I find it confusing enough that I rarely do it and always need to test it when I do.  I listed an alternative which is what I usually use in practice.  Both will be very fast since they don't copy the actually data, but the second will make two new headers rather than one, so if you're using many small arrays it might have some impact on speed.</span>
<span class="comment-copy">Thanks for being frank about it.  I will adopt the second option you mentioned in the future.</span>
<span class="comment-copy">@user3317287: I've added an explanation that I hope clarifies these issues, explaining what's confusing and what's not, and why it's that way.  If one's going to be confused, it's best to at least be confused by the right thing :)</span>
