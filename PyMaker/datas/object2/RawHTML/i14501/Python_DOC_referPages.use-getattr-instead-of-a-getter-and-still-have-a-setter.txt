<div class="post-text" itemprop="text">
<p>Say my class already has <code>__getattr__</code> and <code>__setattr__</code> like so:</p>
<pre><code>def __getattr__(self, attr):
    return _global_user_data[self.userid][attr]

def __setattr__(self, attr, value):
    _global_user_data[self.userid][attr] = value
</code></pre>
<p>I want to make it so that player's gold (for example) cannot drop below zero.
Here's a setter for it:</p>
<pre><code>def gold(self, value):
    if value &lt; 0:
        raise ValueError
    self.__setattr__('gold', value)
</code></pre>
<p>However, I find it stupid to write a getter which does nothing but calls for <code>self.__getattr__('gold')</code>, is there a way to make it so I don't need do define yet an other method here?</p>
<p>It's not just one property (gold in this example), I have multiple properties and the getter seemS to be just some extra work.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I've correctly understood what you're after (this time!) you could do something like:</p>
<pre><code>class User:

    def __init__(self, id_):
        self.user_id = id_

    def __getattr__(self, attr):
        return _global_user_data[self.user_id][attr]

    def set_x(self, val):
        if val &lt; 0:
            raise ValueError
        _global_user_data[self.user_id]['x'] = val

    x = property(lambda self: self.__getattr__('x'), set_x)
</code></pre>
<p>You only need to define a specific setter for <code>x</code>, the getter just redirects to the existing <code>__getattr__</code>. Note that this creates the <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow"><code>property</code></a> directly, rather than using the decorator syntax, but otherwise does exactly the same thing. In use:</p>
<pre><code>&gt;&gt;&gt; _global_user_data = {0: {'x': None}}
&gt;&gt;&gt; user = User(0)
&gt;&gt;&gt; user.x
&gt;&gt;&gt; user.x = -1
Traceback (most recent call last):
  File "&lt;pyshell#38&gt;", line 1, in &lt;module&gt;
    user.x = -1
  File "&lt;pyshell#35&gt;", line 8, in set_x
    raise ValueError
ValueError
&gt;&gt;&gt; user.x = 1
&gt;&gt;&gt; user.x
1
</code></pre>
</div>
<span class="comment-copy">Why are are you storing per-object data in a global dictionary  instead of the object itself?</span>
<span class="comment-copy">@chepner I'm subclassing a player class which is basically just a wrapper for the player in the game itself (I'm creating an additional plugin for the game), and this player class I'm subclassing is used by always receiving a new instance when you need to access the player's data. So I can't store my mod's gold etc. in the instance, since the instance is always a different one.</span>
<span class="comment-copy">Ah, it's not always "keeping positive" that I wanna do, some properties I need to keep positive, some I need to make sure the player has access to use, etc. :) For example, I want to prevent a player from picking a gun which he's not trained to use.</span>
<span class="comment-copy">Why would I? If I wanna get player's weapon, I simply return it. However, if I wanna set it, I will have to make sure it's accessible by the player (maybe I wanna see if it's a weapon in his inventory?). So I don't need any extra logic for the getter, but I need a custom setter. And there are already third party applications using my code, which use the old attributes (which I'm now updating to properties), so I'd prefer not to add functions with new names. If any of that makes sense, sorry english is not my mother tongue :)</span>
<span class="comment-copy">I can't see why would I add any logic into the <code>__setattr__</code> either, that's why I'm creating the setters for those properties that need some complex logic? What info do you need?</span>
<span class="comment-copy">@MarkusMeskanen sorry, I think I'd misunderstood your aim. Does that better match what you're looking for?</span>
<span class="comment-copy">Thank you very much, sorry if my explanation was bad :) But yes, your solution is exactly what I was looking for! I didn't realize I could just create properties using the <code>property</code> function (or class?) itself! Thanks, accepted! :)</span>
