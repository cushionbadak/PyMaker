<div class="post-text" itemprop="text">
<p>Let's say I have the following list </p>
<pre><code>List = ['Apple', 'Banana', 'Orange', 'Grapes']
</code></pre>
<p>From this I want to search <code>Apple</code> I have to use the following code </p>
<pre><code>if 'Apple' in List: 
    print "Found"
</code></pre>
<p>But I want to search the string which contains <code>'App'</code> what do I have to do? </p>
<p>I can use <code>For</code> loop and <code>if</code> statement combined. </p>
<pre><code>for items in List: 
    if 'App' in items: 
        print "Found"
</code></pre>
<p>But is there any other way to do this process? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>map</code> + <code>any</code>:</p>
<pre><code>lst = ['apple', 'banana']

if any(map(lambda x: 'app' in x.lower(), lst)):
    print "Found"
</code></pre>
<p>Slightly more pythonic:</p>
<pre><code>lst = ['apple', 'banana']
if any(['app' in x.lower() for x in lst]):
    print "Found"
</code></pre>
<p>A slightly more optimized version using a generator (if the first element is "apple", it won't check the rest of the lst):</p>
<pre><code>generator = ('app' in x.lower() for x in lst)
if any(generator):
    print "Found"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>if(True in ["app" in k for k in ["apple","orange","grapes"]]):
    print("woot")
</code></pre>
<p>Is more or less readable but does the same thing.</p>
<p>you could even make it a one liner,</p>
<pre><code>print "woot" if(True in ["app" in k for k in ["apple","orange","grapes"]]) else ""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're just looking for something more concise, the exact same logic can be written with a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">comprehension</a> (in this case, a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow">generator expression</a>)
and the <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow"><code>any</code></a> function:</p>
<pre><code>if any('App' in item for item in List):
    print "Found"
</code></pre>
<hr/>
<p>If it isn't obvious why this does almost the same thing as your existing code:</p>
<p>If you expand the comprehension to an explicit <code>for</code> statement, it looks like this:</p>
<pre><code>for item in List:
    yield 'App' in item
</code></pre>
<p>Then, the <code>any</code> function iterates over each thing that got <code>yield</code>ed until one of them is true, or until it gets to the end and they were all false.</p>
<p>So, the only difference is that instead of printing <code>"Found"</code> once for each time something was found, it just prints it once and then stops looking.</p>
<hr/>
<p>If you want something more <em>efficient</em>, you'd need to change your data structure. But I doubt that's an issue when you've only got 4 things in <code>List</code>.</p>
</div>
<span class="comment-copy">What is a generator? that syntax looks like a n-tuple to me.</span>
<span class="comment-copy">@kpie: Start at <a href="https://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow noreferrer">Iterators</a> in the tutorial, and read through the end of the chapter.</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/1756096/understanding-generators-in-python" title="understanding generators in python">stackoverflow.com/questions/1756096/â€¦</a> - essentially it's a lazy way of iterating over the list. Instead doing all the work immediately, it will only do work on the current element while iterating.</span>
<span class="comment-copy">Not quite pythonic<code>any(['app' in x.lower() for x in list])</code> always creates a full list every time, also <code>list</code> is probably not a great name for a variable. <code>if any('app' in x.lower() for x in lst)</code> would be pythonic</span>
<span class="comment-copy">Hey @PadraicCunningham, thanks for the feedback - changed the var name of <code>list</code>, for your suggested code, it's actually in the answer at the end.</span>
<span class="comment-copy">Why make a list and then scan it for <code>True</code> instead of just using <code>any</code>?</span>
<span class="comment-copy">No reason that I know of.</span>
