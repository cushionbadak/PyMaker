<div class="post-text" itemprop="text">
<p>How can I compare all strings in a list e.g:</p>
<pre><code>"A-B-C-D-E-F-H-A", 
"A-B-C-F-G-H-M-P",
</code></pre>
<p>And output until which character they are identical:</p>
<p>In the example above it would be: </p>
<pre><code>Character 6
</code></pre>
<p>And output the most similar strings.</p>
<p>I tried with collections.Counter but that did not work. </p>
</div>
<div class="post-text" itemprop="text">
<p>You're trying to go character by character in the two strings in lockstep. This is a job for <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a>:</p>
<pre><code>A = "A-B-C-D-E-F-H-A"
B = "A-B-C-F-G-H-M-P"

count = 0
for a, b in zip(A, B):
    if a == b:
        count += 1
    else:
        break
</code></pre>
<p>Or, if you prefer "…as long as they are…" is a job for <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow"><code>takewhile</code></a>:</p>
<pre><code>from itertools import takewhile
from operator import eq

def ilen(iterable): return sum(1 for _ in iterable)

count = ilen(takewhile(lambda ab: eq(*ab), zip(A, B)))
</code></pre>
<hr/>
<p>If you have a list of these strings, and you want to compare every string to every other string:</p>
<p>First, you turn the above code into a function. I'll do it with the itertools version, but you can do it with the other just as easily:</p>
<pre><code>def shared_prefix(A, B):
    return ilen(takewhile(lambda ab: eq(*ab), zip(A, B)))
</code></pre>
<p>Now, for every string, you compare it to all the rest of the strings. There's an easy way to do it with <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow"><code>combinations</code></a>:</p>
<pre><code>from itertools import combinations

counts = [shared_prefix(pair) for pair in combinations(list_o_strings, 2)]
</code></pre>
<p>But if you don't understand that, you can write it as a nested loop. The only tricky part is what "the rest of the strings" means. You can't loop over <em>all</em> the strings in both the outer and inner loops, or you'll compare each pair of strings twice (once in each order), and compare each string to itself. So it has to mean "all the strings after the current one". Like this:</p>
<pre><code>counts = []
for i, s1 in enumerate(list_o_strings):
    for s2 in list_o_strings[i+1:]:
        counts.append(prefix(s1, s2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this code will solve your problem. </p>
<pre><code>listA = "A-B-C-D-E-F-H-A"
listB = "A-B-C-F-G-H-M-P"

newListA = listA.replace ("-", "")
newListB = listB.replace ("-", "")

# newListA = "ABCDEFHA"
# newListB = "ABCFGHMP"

i = 0
exit = 0
while ((i &lt; len (newListA)) &amp; (exit == 0)):

    if (newListA[i] != newListB[i]):
        exit = 1

    i = i + 1

print ("Character: " + str(i))
</code></pre>
</div>
<span class="comment-copy">These are strings and not lists. I could do the same with the following words/strings "carpark" and "carparkstreet" and I would get a value of 7. The first 7 letters are the same.</span>
<span class="comment-copy">@Kasra: The first 6 characters in each are <code>A</code>, <code>-</code>, <code>B</code>, <code>-</code>, <code>C</code>, <code>-</code>. The 7th is different, <code>D</code> vs. <code>F</code>. So, 6 makes sense.</span>
<span class="comment-copy">@Kasra For your seconds question, ask yourself what is the 6-th character of each <i>string</i>... ;)</span>
<span class="comment-copy">@abarnert thanks!</span>
<span class="comment-copy">@Spirine :D actually i wanted to the OP refines the question!</span>
<span class="comment-copy">How can I use this in a loop, iterating through the a list of strings ? Thank you. The second approach (takewhile) I have to understand yet.</span>
<span class="comment-copy">@user413734: I'm not sure what you want to loop over. Do you have N strings, and you want to compare each string to every other string? Or do you have N pairs of strings, and want to compare the two strings in each pair to each other? Or …?</span>
<span class="comment-copy">@user413734: I've taken a guess at what you wanted and added it to the answer.</span>
<span class="comment-copy">Thanks for the elaborate answer ! I have a list of strings which I want to loop over. But because I can sort the list before, I can line them up so I compare items consecutively. item1 to item2, item2 to item3. Thank you again.</span>
<span class="comment-copy">@user413734: OK, to loop over every adjacent pair of strings, look at <code>pairwise</code> in the <code>itertools</code> recipes, or just <code>zip(list_o_strings, list_o_strings[1:])</code>.</span>
<span class="comment-copy">You have to squint really hard to even tell that this is Python…</span>
<span class="comment-copy">Sorry I'm new with python.</span>
