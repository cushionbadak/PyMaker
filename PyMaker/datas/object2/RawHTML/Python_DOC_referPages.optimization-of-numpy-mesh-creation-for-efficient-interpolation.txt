<div class="post-text" itemprop="text">
<p>I am reading magnetic field data from a text file. My goal is to correctly and efficiently load the mesh points (in 3 dimensions) and the associated fields (for simplicity I will assume below that I have a scalar field).</p>
<p>I managed to make it work, however I feel that some steps might not be necessary. In particular, reading the <code>numpy</code> doc it might be that "broadcasting" would be able to work its magic to my advantage.</p>
<pre><code>import numpy as np
from scipy import interpolate
# Loaded from a text file, here the sampling over each dimension is identical but it is not required
x = np.array([-1.0, -0.5, 0.0, 0.5, 1.0])
y = np.array([-1.0, -0.5, 0.0, 0.5, 1.0])
z = np.array([-1.0, -0.5, 0.0, 0.5, 1.0])
# Create a mesh explicitely
mx, my, mz = np.meshgrid(x, y, z, indexing='ij')  # I have to switch from 'xy' to 'ij'
# These 3 lines seem odd
mx = mx.reshape(np.prod(mx.shape))
my = my.reshape(np.prod(my.shape))
mz = mz.reshape(np.prod(mz.shape))
# Loaded from a text file
field = np.random.rand(len(mx))
# Put it all together
data = np.array([mx, my, mz, field]).T
# Interpolate
interpolation_points = np.array([[0, 0, 0]])
interpolate.griddata(data[:, 0:3], data[:, 3], interpolation_points, method='linear')
</code></pre>
<p>Is it really necessary to construct the mesh like this? Is it possible to make it more efficient?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's one with <code>broadcasted-assignment</code> to generate <code>data</code> directly from <code>x,y,z</code> and hence avoid the memory overhead of creating all the mesh-grids and hopefully lead to better performance -</p>
<pre><code>m,n,r = len(x),len(y),len(z)
out = np.empty((m,n,r,4))
out[...,0]  = x[:,None,None]
out[...,1]  = y[:,None]
out[...,2]  = z
out[...,3]  = np.random.rand(m,n,r)
data_out = out.reshape(-1,out.shape[-1])
</code></pre>
</div>
<span class="comment-copy">Feel free to let me know if this should be moved to codereview.SE</span>
<span class="comment-copy">Your reshape lines could use <code>mx = mx.ravel()</code> or <code>reshape(-1)</code>.  And <code>data = np.stack([mx,my,mz,field], axis=1)</code> is an alternative to <code>np.array</code>.</span>
<span class="comment-copy">Did the posted solution work for you?</span>
<span class="comment-copy">@Divakar See my comment to your answer.</span>
<span class="comment-copy">Thanks for the suggestion! I tested it: it works, but on my machine and for the size of data that I have I could not see a significant gain. This is still more elegant I believe than what I had. I think it's a pity that <code>meshgrid</code> does not provide that kind of output directly.</span>
<span class="comment-copy">@CedricH. Smells like others are the bottleneck, I see <code>interpolate.griddata</code> being one of them.</span>
