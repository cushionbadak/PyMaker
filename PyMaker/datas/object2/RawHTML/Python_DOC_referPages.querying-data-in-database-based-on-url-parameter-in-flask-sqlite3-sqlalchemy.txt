<div class="post-text" itemprop="text">
<p>Ok so I'm not that experienced in Python.</p>
<p>I have the following Python code: </p>
<pre><code>cursor.execute("INSERT INTO table VALUES var1, var2, var3,")
</code></pre>
<p>where <code>var1</code> is an integer, <code>var2</code> &amp; <code>var3</code> are strings.</p>
<p>How can I write the variable names without python including them as part of the query text?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>cursor.execute("INSERT INTO table VALUES (%s, %s, %s)", (var1, var2, var3))
</code></pre>
<p>Note that the parameters are passed as a tuple.</p>
<p>The database API does proper escaping and quoting of variables. Be careful not to use the string formatting operator (<code>%</code>), because</p>
<ol>
<li>it does not do any escaping or quoting.</li>
<li>it is prone to Uncontrolled string format attacks e.g. <a href="http://en.wikipedia.org/wiki/SQL_injection" rel="noreferrer">SQL injection</a>.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Different implementations of the Python DB-API are allowed to use different placeholders, so you'll need to find out which one you're using -- it could be (e.g. with MySQLdb):</p>
<pre><code>cursor.execute("INSERT INTO table VALUES (%s, %s, %s)", (var1, var2, var3))
</code></pre>
<p>or (e.g. with sqlite3 from the Python standard library):</p>
<pre><code>cursor.execute("INSERT INTO table VALUES (?, ?, ?)", (var1, var2, var3))
</code></pre>
<p>or others yet (after <code>VALUES</code> you could have <code>(:1, :2, :3)</code> , or "named styles" <code>(:fee, :fie, :fo)</code> or <code>(%(fee)s, %(fie)s, %(fo)s)</code> where you pass a dict instead of a map as the second argument to <code>execute</code>).  Check the <code>paramstyle</code> string constant in the DB API module you're using, and look for paramstyle at <a href="http://www.python.org/dev/peps/pep-0249/" rel="noreferrer">http://www.python.org/dev/peps/pep-0249/</a> to see what all the parameter-passing styles are!</p>
</div>
<div class="post-text" itemprop="text">
<p>Many ways. <strong>DON'T</strong> use the most obvious one (<code>%s</code> with <code>%</code>) in real code, it's open to <a href="http://en.wikipedia.org/wiki/SQL_injection">attacks</a>.</p>
<p>Here copy-paste'd <strong><a href="http://docs.python.org/2/library/sqlite3.html">from pydoc of sqlite3</a></strong>:</p>
<pre><code># Never do this -- insecure!
symbol = 'RHAT'
c.execute("SELECT * FROM stocks WHERE symbol = '%s'" % symbol)

# Do this instead
t = ('RHAT',)
c.execute('SELECT * FROM stocks WHERE symbol=?', t)
print c.fetchone()

# Larger example that inserts many records at a time
purchases = [('2006-03-28', 'BUY', 'IBM', 1000, 45.00),
             ('2006-04-05', 'BUY', 'MSFT', 1000, 72.00),
             ('2006-04-06', 'SELL', 'IBM', 500, 53.00),
            ]
c.executemany('INSERT INTO stocks VALUES (?,?,?,?,?)', purchases)
</code></pre>
<p><strong>More examples if you need:</strong></p>
<pre><code># Multiple values single statement/execution
c.execute('SELECT * FROM stocks WHERE symbol=? OR symbol=?', ('RHAT', 'MSO'))
print c.fetchall()
c.execute('SELECT * FROM stocks WHERE symbol IN (?, ?)', ('RHAT', 'MSO'))
print c.fetchall()
# This also works, though ones above are better as a habit as it's inline with syntax of executemany().. but your choice.
c.execute('SELECT * FROM stocks WHERE symbol=? OR symbol=?', 'RHAT', 'MSO')
print c.fetchall()
# Insert a single item
c.execute('INSERT INTO stocks VALUES (?,?,?,?,?)', ('2006-03-28', 'BUY', 'IBM', 1000, 45.00))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://www.amk.ca/python/writing/DB-API.html" rel="noreferrer">http://www.amk.ca/python/writing/DB-API.html</a></p>
<p>Be careful when you simply append values of variables to your statements:
Imagine a user naming himself <code>';DROP TABLE Users;'</code> --
That's why you need to use sql escaping, which Python provides for you when you use the cursor.execute in a decent manner. Example in the url is:</p>
<pre><code>cursor.execute("insert into Attendees values (?, ?, ?)", (name,
seminar, paid) )
</code></pre>
</div>
<span class="comment-copy">Interesting, why does it work with the vars separately instead of in an array (var1,var2,var3)?</span>
<span class="comment-copy">According to the DB API specs, it looks like it can be either way: <a href="http://www.python.org/dev/peps/pep-0249/" rel="nofollow noreferrer">python.org/dev/peps/pep-0249</a></span>
<span class="comment-copy"><a href="http://docs.python.org/2/library/sqlite3.html#" rel="nofollow noreferrer">docs.python.org/2/library/sqlite3.html#</a> Escaping</span>
<span class="comment-copy">@thekashyap Read again carefully. What's insecure is using the string formatting operator <code>%</code>. In fact, I say so in the answer.</span>
<span class="comment-copy">my bad.. I imagined a <code>%</code>  instead of <code>,</code> beteween the string and variables.. can't undo my vote-down due to various reasons.. I personally would like to see words like insecure / attack etc mentioned in the description where you say don't use <code>%</code>..</span>
<span class="comment-copy">Is possible to do the same thing but with the external SQL script?</span>
<span class="comment-copy">Some of the DB-API implementations actually use %s for their variables -- most notably psycopg2 for PostgreSQL. This is not to be confused (though it easily is) with using %s with the % operator for string replacement.  I would be really nice if, for portability, we could just have a defined standard way of specifying SQL parameters for DB-API.</span>
<span class="comment-copy">Actually, it is not SQL escaping.  It's variable binding, which is far simpler and more direct.  The values are bound into the SQL statement after parsing, making it immune to any injection attack.</span>
<span class="comment-copy">"Little Bobby Tables, we call him." Sanitize your inputs. <a href="https://xkcd.com/327/" rel="nofollow noreferrer">xkcd.com/327</a></span>
