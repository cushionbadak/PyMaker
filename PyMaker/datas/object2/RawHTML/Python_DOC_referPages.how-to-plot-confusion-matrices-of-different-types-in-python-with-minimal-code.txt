<div class="post-text" itemprop="text">
<p>I have 2 <code>numpy</code> arrays, <code>y_actual</code> (actual values) and <code>y_pred</code> (ML model predictions), both having binary values, either 0 or 1.</p>
<p>Currently, I am forming a <code>confusion matrix</code> based on the following syntax:-</p>
<pre><code>df_confusion = pd.crosstab(y_actual, y_pred, rownames=['Actual'], colnames=['Predicted'], margins=True)
print('Confusion Matrix:')
print(df_confusion)
</code></pre>
<p>However, I checked out SO and other documentation and couldn't find a comprehensive example with minimal code, which can help me accomplish the following:-</p>
<ol>
<li>Form a confusion matrix figure (using <code>matplotlib</code> or <code>Seaborn</code>, in which the actual number of samples for each class are displayed, alongside, there is name labels for 0 as <code>Class A</code>, and 1 as <code>Class B</code>.</li>
<li>Plot a similar confusion matrix plot, in which the percentage of samples which lie in each class are displayed (such as true positive rate, false positive rate etc.) within the confusion matrix.</li>
<li>Plot a further confusion matrix, which shows the confusion matrix, along with a scale on right hand side showing number of samples (like this) <a href="https://scikit-learn.org/stable/_images/sphx_glr_plot_confusion_matrix_001.png" rel="nofollow noreferrer">https://scikit-learn.org/stable/_images/sphx_glr_plot_confusion_matrix_001.png</a>. Form a similar confusion matrix for normalised case, like <a href="https://scikit-learn.org/stable/_images/sphx_glr_plot_confusion_matrix_001.png" rel="nofollow noreferrer">https://scikit-learn.org/stable/_images/sphx_glr_plot_confusion_matrix_001.png</a>. </li>
</ol>
<p>Also, as stated in the question, the aim is to accomplish labelling of Class 0 as <code>Class A</code> and Class 1 as <code>Class B</code>, as presently these show only as <code>0</code> and <code>1</code>, not looking very coherent. I would prefer minimal code to accomplish the same, and generate coherent and nice looking Confusion Matrix plots. Any help in this regard is highly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'll point you to <a href="https://www.kaggle.com/diegosch/classifier-evaluation-using-confusion-matrix" rel="nofollow noreferrer">Kaggle</a> which has some tremendous resources. You should be able to easily adapt the example below to suit your needs.</p>
<pre><code>from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, precision_recall_fscore_support

clf = SVC(kernel = 'linear').fit(x_train,y_train)
clf.predict(x_train)
y_pred = clf.predict(x_test)

# Creates a confusion matrix
cm = confusion_matrix(y_test, y_pred) 

# Transform to df for easier plotting
cm_df = pd.DataFrame(cm,
                     index = ['setosa','versicolor','virginica'], 
                     columns = ['setosa','versicolor','virginica'])

plt.figure(figsize=(5.5,4))
sns.heatmap(cm_df, annot=True)
plt.title('SVM Linear Kernel \nAccuracy:{0:.3f}'.format(accuracy_score(y_test, y_pred)))
plt.ylabel('True label')
plt.xlabel('Predicted label')
plt.show()

</code></pre>
<p><a href="https://i.stack.imgur.com/bDtck.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/bDtck.png"/></a></p>
</div>
