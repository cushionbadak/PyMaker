<div class="post-text" itemprop="text">
<p>smer_prods is a dictionary which looks like this:</p>
<pre><code>smer_prods = {
    #'vermicelli' : ['vermicelli', 'ragi vermicelli', 'rice vermicelli'],
    'ragi vermicelli' : ['ragi vermicelli'],
    'rice vermicelli' : ['rice vermicelli'],
    'vermicelli jupiter' : ['vermicelli jupiter'],
    'lemon &amp; tamarind vermicelli' : ['lemon &amp; tamarind vermicelli'],
    'finosta vermicelli' : ['finosta vermicelli-5kg'],
    'rosted vermicelli' : ['roasted vermicelli'],
    'semiya/vermicelli' : ['semiya / vermicelli 900grams'],
    'vermicelli upma' : ['vermicelli upma'],
    'vermicelli payasam mix' : ['vermicelli payasam mix'],
    'mung bean vermicelli' : ['mung bean vermicelli'],
    'red chili' : ['red chilli (lal mirch)','guntur red chilli','red chilly whole(lal mirch)', 'red chilly wg', 'red chilli whole (hot) 1 kg', 'red chilli whole (rich colour) 1 kg'],
    'red chili powder' : ['red chilli fresh-kg','red chilli powder (rich colour) 1 kg','red chilli powder (hot) 1 kg','red chilli powder','lal mirch powder','lal mirch powder 100gms', 'lal mirch powder 1kg', 'lal mirch powder 200gms', 'lal mirch powder 500gms'],
    'red chilli sauce' : ['red chilli sauce', 'red chilli sauce 200gm pet bottle 48X200gm', 'hot chili sauce'],
    'sriraja hot chilli sauce' : ['sriraja hot chilli sauce', 'sriracha hot chilli sauce'],
    'mineral water' : ['himalayan orchard pure peach flavoured natural mineral water - 500 ml','himalayan orchard pure strawberry flavoured natural mineral water - 500 ml','himalayan orchard pure apple flavoured natural mineral water - 500 ml','himalayan - the natural mineral water - 500ml bottle', 'himalayan - the natural mineral water - 200ml bottle', 'himalayan - the natural mineral water - 1ltr bottle'],
}
</code></pre>
<p>The csv for dataframe df is this:
<a href="https://i.stack.imgur.com/Wy369.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/Wy369.png"/></a></p>
<p>Now when I execute this simple code:</p>
<pre><code>for x in smer_prods:
    mask = df['ITEM NAME'] == x
    df1 = df[mask]
    print(df1['ITEM NAME'])
</code></pre>
<p>It should print only the ITEM_NAME column, but it prints a lot of unnecessary extra info:</p>
<pre><code>4    rice vermicelli
Name: ITEM NAME, dtype: object
Series([], Name: ITEM NAME, dtype: object)
Series([], Name: ITEM NAME, dtype: object)
5    ragi vermicelli
Name: ITEM NAME, dtype: object
Series([], Name: ITEM NAME, dtype: object)
Series([], Name: ITEM NAME, dtype: object)
Series([], Name: ITEM NAME, dtype: object)
Series([], Name: ITEM NAME, dtype: object)
Series([], Name: ITEM NAME, dtype: object)
Series([], Name: ITEM NAME, dtype: object)
Series([], Name: ITEM NAME, dtype: object)
Series([], Name: ITEM NAME, dtype: object)
1    sriraja hot chilli sauce
Name: ITEM NAME, dtype: object
Series([], Name: ITEM NAME, dtype: object)
Series([], Name: ITEM NAME, dtype: object)
</code></pre>
<p>I want only the matched items in a list. For which I wrote a code:</p>
<pre><code>for x in smer_prods:
    mask = df['ITEM NAME'] == x
    df1 = df[mask]
    item_name = df1['ITEM NAME'].tolist()
    print(item_name)
</code></pre>
<p>It produced this output:
['rice vermicelli']</p>
<pre><code>[]
[]
['ragi vermicelli']
[]
[]
[]
[]
[]
[]
[]
[]
['sriraja hot chilli sauce']
[]
[]
</code></pre>
<p>Desired output:</p>
<pre><code>['rice vermicelli', 'ragi vermicelli', 'sriraja hot chili sauce']
</code></pre>
<p><strong>Edit:</strong>
If I write this:</p>
<pre><code>match = []
for x in smer_prods:
    mask = df['ITEM NAME'] == x
    if mask.any() == True:
        df1 = df[mask]

        item_name = df1['ITEM NAME']#note
        match.append(item_name)
print(match)
print('-'*80)
</code></pre>
<p>It outputs:</p>
<pre><code>[4    rice vermicelli
Name: ITEM NAME, dtype: object, 5    ragi vermicelli
Name: ITEM NAME, dtype: object, 1    sriraja hot chilli sauce
Name: ITEM NAME, dtype: object]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you need test values in lists, so use list comprehension with <code>isin</code> for test values of dictionary:</p>
<pre><code>df = pd.DataFrame({'ITEM NAME':['ragi vermicelli','red chilli (lal mirch)']})
print (df)
                ITEM NAME
0         ragi vermicelli
1  red chilli (lal mirch)

#if need matched values
L = [y for k, v in smer_prods.items() 
       for y in df.loc[df['ITEM NAME'].isin(v), 'ITEM NAME'].tolist()]
print (L)
['ragi vermicelli', 'red chilli (lal mirch)']

#if need matched key of dictionary
L1 = [k for k, v in smer_prods.items() 
        for y in df.loc[df['ITEM NAME'].isin(v), 'ITEM NAME'].tolist()]
print (L1)
['ragi vermicelli', 'red chili']
</code></pre>
<p>Loop solution:</p>
<pre><code>L = []
for k, v in smer_prods.items():
    for y in df.loc[df['ITEM NAME'].isin(v), 'ITEM NAME'].tolist():
        print (y)
        L.extend([y])
        #if need matched key of dictionary
        #L.extend([k])

print (L)
['ragi vermicelli', 'red chilli (lal mirch)']
</code></pre>
</div>
<span class="comment-copy">Do you need test in dictionary by value? i think for <code>'red chili' : ['red chilli (lal mirch)','guntur red chilli','red chilly whole(lal mirch)', 'red chilly wg', 'red chilli whole (hot) 1 kg', 'red chilli whole (rich colour) 1 kg']</code> do you need compare <code>['red chilli (lal mirch)','guntur red chilli','red chilly whole(lal mirch)', 'red chilly wg', 'red chilli whole (hot) 1 kg', 'red chilli whole (rich colour) 1 kg'],</code> or <code>'red chili'</code> ?</span>
<span class="comment-copy">the problem persists. It outputs: 4    rice vermicelli Name: ITEM NAME, dtype: object 5    ragi vermicelli Name: ITEM NAME, dtype: object 1    sriraja hot chilli sauce Name: ITEM NAME, dtype: object</span>
<span class="comment-copy">I want all the matched items in a list.</span>
<span class="comment-copy">@Debbie - Is possible convert DataFrame to text, because cannot copy data.</span>
<span class="comment-copy">@Debbie - Answer is edited.</span>
