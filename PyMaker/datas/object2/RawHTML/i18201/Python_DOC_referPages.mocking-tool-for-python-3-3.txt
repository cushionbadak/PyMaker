<div class="post-text" itemprop="text">
<p>I have a few classes that rely on <code>time.perf_counter()</code> to timestamp events and do things after a certain amount of time passes, like this:  </p>
<pre><code>class Alarm:
    def setAlarm(self):
        self.alarmed = False
        self._saved = time.perf_counter()

    def runStep(self):
        now = time.perf_counter()
        if now - self._saved &gt; 1000.0 and self._saved != -1:
            self.alarmed = True
            self._saved = -1
</code></pre>
<p>I would like to test the class <code>Alarm</code> using a fake clock, it does not necessary to be a call to <code>time.perf_counter()</code> (though it would be more elegant if it does, I guess). I want that the fake clock does not increment by itself, but rather upon my command, like this:  </p>
<pre><code>    alarm = Alarm()
    alarm.setAlarm()
    clock.increment(999.0)
    alarm.runStep()
    self.assertFalse(alarm.alarmed)
    clock.increment(1.1)    # tick another second
    alarm.runStep()
    self.assertTrue(alarm.alarmed)
</code></pre>
<p>Could you please advise on how to mock <code>time.perf_counter()</code> or mock my class for it, and what kind of tool should be used for this kind of job?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/3/library/unittest.mock.html" rel="nofollow"><code>unittest.mock</code></a>.</p>
<p>For example:</p>
<pre><code>import time
import unittest
import unittest.mock

class Alarm:
    def setAlarm(self):
        self.alarmed = False
        self._saved = time.perf_counter()
    def runStep(self):
        now = time.perf_counter()
        if now - self._saved &gt; 1000.0 and self._saved != -1:
            self.alarmed = True
            self._saved = -1

class MockPerfCounter:
    def __init__(self):
        self.t = 0
    def increment(self, n):
        self.t += n
    def perf_counter(self):
        return self.t

class TestAlarm(unittest.TestCase):
    def test_foo(self):
        clock = MockPerfCounter()
        with unittest.mock.patch('time.perf_counter', clock.perf_counter):
            alarm = Alarm()
            alarm.setAlarm()
            clock.increment(999.0)
            alarm.runStep()
            self.assertFalse(alarm.alarmed)
            clock.increment(1.1)    # tick another second
            alarm.runStep()
            self.assertTrue(alarm.alarmed)

if __name__ == '__main__':
    unittest.main()
</code></pre>
<hr/>
<p>Alterantively, instead of manual <code>MockPerfCounter</code>, you can also use <a href="http://docs.python.org/3/library/unittest.mock.html#the-mock-class" rel="nofollow"><code>unittest.mock.Mock</code></a>:</p>
<pre><code>class TestAlarm(unittest.TestCase):
    def test_foo(self):
        clock = unittest.mock.Mock()
        clock.t = 0
        with unittest.mock.patch('time.perf_counter', lambda: clock.t):
            alarm = Alarm()
            alarm.setAlarm()
            clock.t += 999.0
            alarm.runStep()
            self.assertFalse(alarm.alarmed)
            clock.t += 1.1
            alarm.runStep()
            self.assertTrue(alarm.alarmed)
</code></pre>
</div>
<span class="comment-copy">Looks good to me!</span>
<span class="comment-copy">This was most helpful, however, I have noticed that if import <code>perf_counter</code> as in <code>from time import perf_counter</code> than the above patch does no longer work, is there a way to patch a function imported like this?</span>
<span class="comment-copy">@dkrikun, Replace <code>unittest.mock.patch('time.perf_counter', ...)</code> with <code>unittest.mock.patch('__main__.perf_counter', ..)</code>.</span>
