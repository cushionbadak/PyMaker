<div class="post-text" itemprop="text">
<p>I am trying to execute a shell script(not command) from python:</p>
<pre><code>main.py
-------
from subprocess import Popen

Process=Popen(['./childdir/execute.sh',str(var1),str(var2)],shell=True)

execute.sh
----------

echo $1 //does not print anything
echo $2 //does not print anything
</code></pre>
<p>var1 and var2 are some string that I am using as an input to shell script. Am I missing something or is there another way to do it?</p>
<p>Referred: <a href="https://stackoverflow.com/questions/12605498/how-to-use-subprocess-popen-python">How to use subprocess popen Python</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is with <code>shell=True</code>. Either remove that argument, or pass all arguments as a string, as follows:</p>
<pre><code>Process=Popen('./childdir/execute.sh %s %s' % (str(var1),str(var2),), shell=True)
</code></pre>
<p>The shell will only pass the arguments you provide in the 1st argument of <code>Popen</code> to the process, as it does the interpretation of arguments itself.
See a similar question answered <a href="https://stackoverflow.com/questions/10661457/why-does-shell-true-eat-my-subprocess-popen-stdout">here.</a> What actually happens is your shell script gets no arguments, so $1 and $2 are empty.</p>
<p>Popen will inherit stdout and stderr from the python script, so usually there's no need to provide the <code>stdin=</code> and <code>stderr=</code> arguments to Popen (unless you run the script with output redirection, such as <code>&gt;</code>). You should do this only if you need to read the output inside the python script, and manipulate it somehow.</p>
<p>If all you need is to get the output (and don't mind running synchronously), I'd recommend trying <code>check_output</code>, as it is easier to get output than <code>Popen</code>:</p>
<pre><code>output = subprocess.check_output(['./childdir/execute.sh',str(var1),str(var2)])
print(output)
</code></pre>
<p>Notice that <code>check_output</code> and <code>check_call</code> have the same rules for the <code>shell=</code> argument as <code>Popen</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>you actually are sending the arguments ... if your shell script wrote a file instead of printing you would see it.  you need to communicate to see your printed output from the script ...</p>
<pre><code>from subprocess import Popen,PIPE

Process=Popen(['./childdir/execute.sh',str(var1),str(var2)],shell=True,stdin=PIPE,stderr=PIPE)
print Process.communicate() #now you should see your output
</code></pre>
</div>
<span class="comment-copy">Yes...that was useful it solved my problem.</span>
<span class="comment-copy">@user2837135 If it solved your problem, you should accept it (click on the check mark) and maybe consider upvoting as well.</span>
<span class="comment-copy"><code>shell=True</code> should <i>not</i> be used in this case but if you use it then you should escape <code>var1</code>, <code>var2</code> using <a href="http://docs.python.org/3/library/shlex.html#shlex.quote" rel="nofollow noreferrer"><code>shlex.quote()</code></a>: <code>output = check_output("./childdir/execute.sh " + " ".join(pipes.quote(str(v)) for v in [var1, var2]), shell=True)</code></span>
<span class="comment-copy">Note that the type of output is <code>bytes</code> and might need to be converted to a <code>str</code> before using it, for example like so: <code>output.decode("utf-8")</code></span>
<span class="comment-copy">Also, they could use <code>subprocess.call(['./childdir/execute.sh',str(var1),str(var2)],shell=True)</code> if all they want to do is see the output.</span>
<span class="comment-copy">@Joran : I was able to see the shell script output with shell=True, I am able to see $0('./childdir/execute.sh') i.e. the script that is executing, but not the arguments var1, var2..</span>
<span class="comment-copy">maybe add a shebang to the top of the shell script ... it might not be running in bash, however I guarantee you are sending the arguments (maybe the arguments are not what you think they are)</span>
<span class="comment-copy">@SethMMorton : I tried both the option and I am getting the error (./execute.sh: premission denied). Although I have given execute prev.(chmod +x execute.sh)</span>
<span class="comment-copy">@Joran I tried with shebang too...to debug, I created 2 small scripts to check this, but when I print process.communicate() it prints (None.[])</span>
