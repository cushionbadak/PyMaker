<div class="post-text" itemprop="text">
<p>I have thousands of lists inside one list. </p>
<p>Each of the thousands of lists contain [name, gender, age] with the name and gender being a str and age being an int.</p>
<p>I want to sort all of the lists by age is descending order. </p>
<p>How would i go about this?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow"><code>list.sort</code></a> allows you to specify a <em>key</em> which is essentially something that is used for every item in the list when sorting the list. That key is a function that takes the item as its argument. By default, it is the identity, so it always returns the original object, but you can easily change that by specifying a different function.</p>
<p>In your case, you will want to return the 3rd item in the inner list:</p>
<pre><code>biglist.sort(key=lambda x: x[2])
</code></pre>
<p>Note that this won’t specify a good ordering when ages are not unique (they are usually not). As such, you might want to specify a second order, for example using the name:</p>
<pre><code>biglist.sort(key=lambda x: (x[2], x[0]))
</code></pre>
<p>To get a descending order, you will have to further set <code>reverse=True</code> in the sort-call:</p>
<pre><code>biglist.sort(key=lambda x: (x[2], x[0]), reverse=True)
</code></pre>
<p>Note, that doing this will also affect the order of the name, so you would get a descending age <em>and</em> name. If you don’t want that, you could sort the list twice (separately; name first, and then age descending), or you could trick a bit: You could assume that no living person will ever get older than 200—or say 1000 to be super safe—So you could sort <em>ascending</em> by <code>1000-age</code> to get a descending sort on <code>age</code>:</p>
<pre><code>biglist.sort(key=lambda x: (1000 - x[2], x[0]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import operator
myBigList.sort(key=operator.itemgetter(2), reverse=True)
</code></pre>
</div>
<span class="comment-copy">Have you looked at the documentation of the <code>list.sort()</code> method (specifically the <code>key</code> argument)?</span>
<span class="comment-copy">Note that the very first Google result I got for <code>python sort</code> was a link to the official <a href="https://wiki.python.org/moin/HowTo/Sorting/" rel="nofollow noreferrer">howto</a> on the subject, which includes some similar examples.</span>
<span class="comment-copy">Or, instead of that trick - just <code>-x[2]</code> so it's negated</span>
<span class="comment-copy">@JonClements Oh, yeah. That works too xD</span>
