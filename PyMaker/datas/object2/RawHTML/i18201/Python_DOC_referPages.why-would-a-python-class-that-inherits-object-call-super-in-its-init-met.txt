<div class="post-text" itemprop="text">
<p>I was poking around at the source of the <code>requests</code> module, and noticed <a href="https://github.com/kennethreitz/requests/blob/master/requests/models.py" rel="nofollow noreferrer">this code:</a></p>
<pre><code>class Response(object):
    """The :class:`Response &lt;Response&gt;` object, which contains a
    server's response to an HTTP request.
    """

    def __init__(self):
        super(Response, self).__init__()
        ... more init method...
</code></pre>
<p>My understanding of <code>super()</code> suggests this call wouldn't do anything at all. I've found <a href="https://stackoverflow.com/questions/576169/understanding-python-super-and-init-methods">quite</a> a few <a href="https://stackoverflow.com/questions/753640/inheritance-and-overriding-init-in-python">questions</a> about <a href="https://stackoverflow.com/questions/2399307/python-invoke-super-constructor">superclass calling</a>, but all work from subclasses of other classes, not <code>object</code> itself. The <a href="http://docs.python.org/3/library/functions.html?highlight=super#super" rel="nofollow noreferrer">python docs</a>, too, don't mention this construction.</p>
<p>It occurred to me this might simply be a mistake, and if you <code>git blame</code> that file to the <a href="https://github.com/kennethreitz/requests/blob/ab27027aa8916e6e199bbb35083beb5d6339f6aa/requests/models.py" rel="nofollow noreferrer">commit that introduced that line</a>, you'll see that at the time of authorship, <code>Response</code> was a subclass of <code>BaseResponse</code>. Is the line just a holdover from a class refactoring, or does it this super() call do anything at all?</p>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned in <a href="https://stackoverflow.com/questions/19280166/why-would-a-python-class-that-inherits-object-call-super-in-its-init-met#comment28547816_19280166">Corley Brigman's comment</a>, it's unnecessary but harmless.</p>
<p>For some background, the <code>BaseResponse</code> class was added during Kenneth's sprint on Requests 1.0. The 1.0 code change introduced <a href="http://docs.python-requests.org/en/latest/user/advanced/#transport-adapters" rel="nofollow noreferrer">transport adapters</a>, which make it possible to define specific behaviour for some HTTP endpoints (or indeed <a href="https://github.com/Lukasa/requests-ftp" rel="nofollow noreferrer">non-HTTP endpoints</a>). An important part of the Transport Adapter interface is the <a href="http://docs.python-requests.org/en/latest/api/#requests.adapters.HTTPAdapter.build_response" rel="nofollow noreferrer"><code>HTTPAdapter.build_response()</code></a> method, which takes the returned raw response from <code>HTTPAdapter.send()</code> and builds a Requests <code>Response</code> object from it.</p>
<p>It is clear that Kenneth saw potential utility in having some form of abstract base class for <code>Response</code>s, which would allow transport adapters to return <code>Response</code>s with very different behaviours to the standard HTTP <code>Response</code> object. For this reason, the refactor into an ABC with the bulk of the logic in the subclass seemed to make sense.</p>
<p>Later in the refactor this got yanked out again as unnecessary complexity. The reality is that people wanting to define specialised <code>Response</code> objects can simply subclass <code>Response</code>, rather than having an ABC that does nothing much. This makes the mainline use case (vanilla Requests) much cleaner in the code, and takes away almost no utility.</p>
<p>When the <code>BaseRequest</code> class got pulled out, this line got overlooked, but since it causes no problems there's never been need to remove it.</p>
</div>
<div class="post-text" itemprop="text">
<p>This code might actually do something if <em>Response</em> becomes part of a multiple inheritance tree.  The next class in the "MRO" list could be something other than <em>object</em>!  In that case, the call to <em>super</em> could be very much <strong>necessary</strong>.</p>
<p>For example,</p>
<pre><code>class NewerClass(A, Response):
    def __init__(self):
        ... do stuff ...
        super(NewerClass, self).__init__()
</code></pre>
<p>From that class definition and without knowing what the hierarchy of <em>A</em> is, you can not determine what the next class that <code>super(Response, self).__init__()</code> calls will be.  It might be <em>object</em> or it might be a base class of <em>A</em>.</p>
<p>I think one problem is that the name <em>super</em> causes confusion.  It does not act like Smalltalk's <em>super</em> variable unless you only use single inheritance, and it does not return a "super class" object.  Instead what it is doing is figuring out the "next" class to be used according to MRO order.</p>
<p>Classic articles on the subject are:
<a href="http://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="nofollow">Python's Super Considered Super</a> and <a href="https://fuhm.net/super-harmful/" rel="nofollow">Python's Super Considered Harmful</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>darinbob is right.
When talking about single inheritance, it is unnecessary, but with multiple inheritance, things are different:</p>
<pre><code>class WithSuper:
    def __init__(self):
        print('With super')
        super().__init__()

class NoSuper:
    def __init__(self):
        print('No super')

class TestOne(WithSuper, NoSuper):
    def __init__(self):
        print('Test 1')
        super().__init__()

class TestTwo(NoSuper, WithSuper):
    def __init__(self):
        print('Test 2')
        super().__init__()


one = TestOne()
print(TestOne.__mro__)

print('\n' * 2)

two = TestTwo()
print(TestTwo.__mro__)
</code></pre>
<p>Run the code above with python3, you'll see the difference.</p>
<pre><code>Test 1
With super
No super
(&lt;class '__main__.TestOne'&gt;, &lt;class '__main__.WithSuper'&gt;, &lt;class '__main__.NoSuper'&gt;, &lt;class 'object'&gt;)



Test 2
No super
(&lt;class '__main__.TestTwo'&gt;, &lt;class '__main__.NoSuper'&gt;, &lt;class '__main__.WithSuper'&gt;, &lt;class 'object'&gt;)
</code></pre>
</div>
<span class="comment-copy">afaik, it's unnecessary here, but harmless, and a standard thing to do for subclasses of any kind, since invoking superclass constructors isn't automatic - this might even have been auto-inserted by a RAD tool.</span>
<span class="comment-copy">For anyone reading over this answer, "ABC" = "Abstract Base Class". I stumbled over that one the first read through.</span>
<span class="comment-copy">Interesting point. Yet another reason to avoid multiple inheritance, unless you really really ... really know what you are doing and need it.</span>
<span class="comment-copy">Very often multiple inheritance is used only to add a "mixin" or "interface" class.  That type of multiclassing is a lot simpler to work with.</span>
