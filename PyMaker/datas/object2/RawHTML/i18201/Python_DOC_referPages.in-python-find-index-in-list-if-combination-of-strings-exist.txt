<div class="post-text" itemprop="text">
<p>I'm writing my first script and trying to learn python. 
But I'm stuck and can't get out of this one.</p>
<p>I'm writing a script to change file names.</p>
<p>Lets say I have a <code>string = "this.is.tEst3.E00.erfeh.ervwer.vwtrt.rvwrv"</code></p>
<p>I want the result to be <code>string = "This Is Test3 E00"</code></p>
<p>this is what I have so far:</p>
<pre><code>l = list(string) 

//Transform the string into list

for i in l:
    if "E" in l:
        p = l.index("E")
        if isinstance((p+1), int () is True:
            if isinstance((p+2), int () is True:
                delp = p+3
                a = p-3
                del l[delp:]

new = "".join(l)
new = new.replace("."," ")
print (new)
</code></pre>
<p>get in index where "E" and check if after "E" there are 2 integers.
Then delete everything after the second integer.</p>
<p>However this will not work if there is an "E" anyplace else.</p>
<p>at the moment the result I get is:</p>
<blockquote>
<p>this is tEst</p>
</blockquote>
<p>because it is finding index for the first "E" on the list and deleting everything after index+3</p>
<p>I guess my question is how do I get the index in the list if a combination of strings exists.</p>
<p>but I can't seem to find how.</p>
<p>thanks for everyone answers.
I was going in other direction but it is also not working.
if someone could see why it would be awesome. It is much better to learn by doing then just coping what others write :)</p>
<p>this is what I came up with:</p>
<blockquote>
<p>for i in l:</p>
<pre><code>if i=="E" and isinstance((i+1), int ) is True:
    p = l.index(i)
    print (p)
</code></pre>
</blockquote>
<p>anyone can tell me why this isn't working. I get an error.</p>
<p>Thank you so much</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you ever heard of a Regular Expression?</p>
<p>Check out python's <code>re</code> module. <a href="http://docs.python.org/3.3/library/re.html" rel="nofollow">Link to the Docs</a>.</p>
<p>Basically, you can define a "regex" that would match "E and then two integers" and give you the index of it.</p>
<p>After that, I'd just use python's "Slice Notation" to choose the piece of the string that you want to keep.</p>
<p>Then, check out the <a href="http://docs.python.org/3/library/stdtypes.html#string-methods" rel="nofollow">string methods</a> for <code>str.replace</code> to swap the periods for spaces, and <code>str.title</code> to put them in Title Case</p>
</div>
<div class="post-text" itemprop="text">
<p>An easy way is to use a regex to find up until the <code>E</code> followed by 2 digits criteria, with <code>s</code> as your string:</p>
<pre><code>import re
up_until = re.match('(.*?E\d{2})', s).group(1)
# this.is.tEst3.E00
</code></pre>
<p>Then, we replace the <code>.</code> with a space and then title case it:</p>
<pre><code>output = up_until.replace('.', ' ').title()
# This Is Test3 E00
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The technique to consider using is Regular Expressions.  They allow you to search for a pattern of text in a string, rather than a specific character or substring.  Regular Expressions have a bit of a tough learning curve, but are invaluable to learn and you can use them in many languages, not just in Python.  Here is the Python resource for how Regular Expressions are implemented:</p>
<p><a href="http://docs.python.org/2/library/re.html" rel="nofollow">http://docs.python.org/2/library/re.html</a></p>
<p>The pattern you are looking to match in your case is an "E" followed by two digits.  In Regular Expressions (usually shortened to "regex" or "regexp"), that pattern looks like this:</p>
<pre><code>E\d\d # ('\d' is the specifier for any digit 0-9)
</code></pre>
<p>In Python, you create a string of the regex pattern you want to match, and pass that and your file name string into the search() method of the the re module.  Regex patterns tend to use a lot of special characters, so it's common in Python to prepend the regex pattern string with 'r', which tells the Python interpreter not to interpret the special characters as escape characters.  All of this together looks like this:</p>
<pre><code>import re
filename = 'this.is.tEst3.E00.erfeh.ervwer.vwtrt.rvwrv'
match_object = re.search(r'E\d\d', filename)
if match_object:
    # The '0' means we want the first match found
    index_of_Exx = match_object.end(0)
    truncated_filename = filename[:index_of_Exx]
    # Now take care of any more processing
</code></pre>
<p>Regular expressions can get very detailed (and complex). In fact, you can probably accomplish your entire task of fully changing the file name using a single regex that's correctly put together. But since I don't know the full details about what sorts of weird file names might come into your program, I can't go any further than this. I will add one more piece of information: if the 'E' could possibly be lower-case, then you want to add a flag as a third argument to your pattern search which indicates case-insensitive matching. That flag is 're.I' and your search() method would look like this:</p>
<pre><code>match_object = re.search(r'E\d\d', filename, re.I)
</code></pre>
<p>Read the documentation on Python's 're' module for more information, and you can find many great tutorials online, such as this one:</p>
<p><a href="http://www.zytrax.com/tech/web/regex.htm" rel="nofollow">http://www.zytrax.com/tech/web/regex.htm</a></p>
<p>And before you know it you'll be a <a href="http://xkcd.com/208/" rel="nofollow">superhero</a>.  :-)</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason why this isn't working:</p>
<pre><code>for i in l:

    if i=="E" and isinstance((i+1), int ) is True:
        p = l.index(i)
        print (p)
</code></pre>
<p>...is because 'i' contains a character from the string 'l', not an integer.  You compare it with 'E' (which works), but then try to add 1 to it, which errors out.</p>
</div>
<span class="comment-copy">In addition to the correct regular expression answers below, also see that you don't need to convert the string to a list, it already is a list (note you never use <code>i</code> from the loop). You are already using it as a list in <code>del l[delp:]</code>.</span>
<span class="comment-copy">Thanks I will start studying re module.</span>
<span class="comment-copy">ahhh I thought i+1 would do the next i in the list and not literally the value of i+1. how I can say if this i and the next i do something??</span>
<span class="comment-copy">You're better off making 'i' an index in the above code like this --&gt; <code>for i in range(len(l)): if l[i] == 'E' and ord('0') &lt;= ord(l[i+1]) &lt;= ord('9'):</code>  ...but, this kind of code really won't be as clean as Regular Expressions.</span>
