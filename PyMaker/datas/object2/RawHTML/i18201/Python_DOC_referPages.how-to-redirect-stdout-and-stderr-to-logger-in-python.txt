<div class="post-text" itemprop="text">
<p>I have a logger that has a <code>RotatingFileHandler</code>.
I want to redirect all <code>Stdout</code> and <code>Stderr</code> to the logger.
How to do so?</p>
</div>
<div class="post-text" itemprop="text">
<p>Not enough rep to comment, but I wanted to add the version of this that worked for me in case others are in a similar situation.</p>
<pre><code>class LoggerWriter:
    def __init__(self, level):
        # self.level is really like using log.debug(message)
        # at least in my case
        self.level = level

    def write(self, message):
        # if statement reduces the amount of newlines that are
        # printed to the logger
        if message != '\n':
            self.level(message)

    def flush(self):
        # create a flush method so things can be flushed when
        # the system wants to. Not sure if simply 'printing'
        # sys.stderr is the correct way to do it, but it seemed
        # to work properly for me.
        self.level(sys.stderr)
</code></pre>
<p>and this would look something like:</p>
<pre><code>log = logging.getLogger('foobar')
sys.stdout = LoggerWriter(log.debug)
sys.stderr = LoggerWriter(log.warning)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If it's an all-Python system (i.e. no C libraries writing to fds directly, as Ignacio Vazquez-Abrams asked about) then you might be able to use an approach as suggested <a href="http://plumberjack.blogspot.co.uk/2009/09/how-to-treat-logger-like-output-stream.html">here</a>:</p>
<pre><code>class LoggerWriter:
    def __init__(self, logger, level):
        self.logger = logger
        self.level = level

    def write(self, message):
        if message != '\n':
            self.logger.log(self.level, message)
</code></pre>
<p>and then set <code>sys.stdout</code> and <code>sys.stderr</code> to <code>LoggerWriter</code> instances.</p>
</div>
<div class="post-text" itemprop="text">
<p>All of the prior answers seem to have problems adding extra newlines where they aren't needed.  The solution that works best for me is from <a href="http://www.electricmonk.nl/log/2011/08/14/redirect-stdout-and-stderr-to-a-logger-in-python/" rel="noreferrer">http://www.electricmonk.nl/log/2011/08/14/redirect-stdout-and-stderr-to-a-logger-in-python/</a>, where he demonstrates how send both stdout and stderr to the logger:</p>
<pre><code>import logging
import sys

class StreamToLogger(object):
   """
   Fake file-like stream object that redirects writes to a logger instance.
   """
   def __init__(self, logger, log_level=logging.INFO):
      self.logger = logger
      self.log_level = log_level
      self.linebuf = ''

   def write(self, buf):
      for line in buf.rstrip().splitlines():
         self.logger.log(self.log_level, line.rstrip())

logging.basicConfig(
   level=logging.DEBUG,
   format='%(asctime)s:%(levelname)s:%(name)s:%(message)s',
   filename="out.log",
   filemode='a'
)

stdout_logger = logging.getLogger('STDOUT')
sl = StreamToLogger(stdout_logger, logging.INFO)
sys.stdout = sl

stderr_logger = logging.getLogger('STDERR')
sl = StreamToLogger(stderr_logger, logging.ERROR)
sys.stderr = sl

print "Test to standard out"
raise Exception('Test to standard error')
</code></pre>
<p>The output looks like:</p>
<pre><code>2011-08-14 14:46:20,573:INFO:STDOUT:Test to standard out
2011-08-14 14:46:20,573:ERROR:STDERR:Traceback (most recent call last):
2011-08-14 14:46:20,574:ERROR:STDERR:  File "redirect.py", line 33, in 
2011-08-14 14:46:20,574:ERROR:STDERR:raise Exception('Test to standard error')
2011-08-14 14:46:20,574:ERROR:STDERR:Exception
2011-08-14 14:46:20,574:ERROR:STDERR::
2011-08-14 14:46:20,574:ERROR:STDERR:Test to standard error
</code></pre>
<p>Note that self.linebuf = '' is where the flush is being handled, rather than implementing a flush function.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use redirect_stdout context manager:</p>
<pre><code>import logging
from contextlib import redirect_stdout

logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
logging.write = lambda msg: logging.info(msg) if msg != '\n' else None

with redirect_stdout(logging):
    print('Test')
</code></pre>
<p>or like this</p>
<pre><code>import logging
from contextlib import redirect_stdout


logger = logging.getLogger('Meow')
logger.setLevel(logging.INFO)
formatter = logging.Formatter(
    fmt='[{name}] {asctime} {levelname}: {message}',
    datefmt='%m/%d/%Y %H:%M:%S',
    style='{'
)
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
ch.setFormatter(formatter)
logger.addHandler(ch)

logger.write = lambda msg: logger.info(msg) if msg != '\n' else None

with redirect_stdout(logger):
    print('Test')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With flush added to Vinay Sajip's answer:</p>
<pre><code>class LoggerWriter:
    def __init__(self, logger, level): 
        self.logger = logger
        self.level = level 

    def write(self, message):
        if message != '\n':
            self.logger.log(self.level, message)

    def flush(self): 
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As an evolution to Cameron Gagnon's response, I've improved the <code>LoggerWriter</code>class to:</p>
<pre><code>class LoggerWriter(object):
    def __init__(self, writer):
        self._writer = writer
        self._msg = ''

    def write(self, message):
        self._msg = self._msg + message
        while '\n' in self._msg:
            pos = self._msg.find('\n')
            self._writer(self._msg[:pos])
            self._msg = self._msg[pos+1:]

    def flush(self):
        if self._msg != '':
            self._writer(self._msg)
            self._msg = ''
</code></pre>
<p>now uncontrolled exceptions look nicer:</p>
<pre><code>2018-07-31 13:20:37,482 - ERROR - Traceback (most recent call last):
2018-07-31 13:20:37,483 - ERROR -   File "mf32.py", line 317, in &lt;module&gt;
2018-07-31 13:20:37,485 - ERROR -     main()
2018-07-31 13:20:37,486 - ERROR -   File "mf32.py", line 289, in main
2018-07-31 13:20:37,488 - ERROR -     int('')
2018-07-31 13:20:37,489 - ERROR - ValueError: invalid literal for int() with base 10: ''
</code></pre>
</div>
<span class="comment-copy">Do you have external modules/libraries that write to FDs 1 and 2 directly?</span>
<span class="comment-copy">@IgnacioVazquez-Abrams I don't really understand what you meant but I'll try to explain. I'm using several python processes, and from all of them I want to redirect all <code>stdout</code> and <code>stderr</code> message to my logger.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/616645/how-do-i-duplicate-sys-stdout-to-a-log-file-in-python">How do I duplicate sys.stdout to a log file in python?</a></span>
<span class="comment-copy">I get a weird output because of the flush method: <code>warning  archan_pylint:18: &lt;archan_pylint.LoggerWriter object at 0x7fde3cfa2208&gt;</code>. It seems the stderr object is printed rather than a newline or else, so I just removed the flush method and it seems to work now.</span>
<span class="comment-copy">@Cameron Please look at my answer below for a small improvement in output readability.</span>
<span class="comment-copy">It works both with python2 and 3, in case you log to a file (e.g. logging.basicConfig(filename='example.log', level=logging.DEBUG). But if you want e.g. logging.basicConfig(stream=sys.stdout, level=logging.DEBUG) then it does not work (on python3 it also causes stack overflow). (I guess because it captures std out), so not so useful for logging e.g. from a Kubernetes pod to std out. Note that the code found by shellcat_zero does work also with stream=sys.stdout.</span>
<span class="comment-copy">thank you, that did the job, but for some reason <code>stderr</code> send it's message each word separately, do you know why?</span>
<span class="comment-copy">@orenma presumably because write is called word-by-word. You can adapt my example code to suit your needs more closely.</span>
<span class="comment-copy">What if sys.stderr.flush() is called after redirecting stderr?</span>
<span class="comment-copy">I cant make library code not use sys.stderr .flush() etc. What is the best way to handle all its attributes?</span>
<span class="comment-copy">What if C libraries are involved?  Then what?  How to get the C library to output to the same LoggerWriter?</span>
<span class="comment-copy">This code is licensed <a href="https://www.electricmonk.nl/log/posting-license/" rel="nofollow noreferrer">GPL</a>. I'm not sure if it can even be posted on SO, which requires compatibility with <a href="https://meta.stackexchange.com/help/licensing">CC by-sa</a>.</span>
<span class="comment-copy">Any idea why I'm getting this error message? "Exception ignored in: &lt;__main__.StreamToLogger object at 0x7f72a6fbe940&gt; AttributeError 'StreamToLogger' object has no attribute 'flush' "</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/contextlib.html" rel="nofollow noreferrer">docs.python.org/3/library/contextlib.html</a> : "Context manager for temporarily redirecting sys.stdout to another file or file-like object." "Note that the global side effect on sys.stdout means that this context manager is not suitable for use in library code and most threaded applications. It also has no effect on the output of subprocesses. However, it is still a useful approach for many utility scripts." So it seems quite inconvenient (if possible at all) to cover a whole application (e.g. I have a microservice which runs a grpc server, which starts threads when serving requests).</span>
