<div class="post-text" itemprop="text">
<p>I have multiple classes that have common functionality, which is implemented differently for various reasons. I'm using all these classes in the same context, but I don't know which one will be used until run time. I want to instantiate different classes, but use <em>the same</em> line of code to invoke the common functionality.</p>
<p>So, I've though of using inheritance (obviously), and now my code looks like this:</p>
<pre><code>class Base():
  def common(self):
    return "abstract"

class A(Base):
  def common(self):
    return "A"

class B(Base):
  def common(self):
    return "B"
</code></pre>
<p>I want to be able to instantiate any of the derived classes as Base (so that I don't have to make a special case and checks for every new class I add) and call it's <code>common</code> method and get the desired "A" or "B" result.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is a dynamically typed language with duck typing. Unlike statically typed languages like Java, there is no need to have interfaces. If you have an object, you can just call <em>any</em> method of it in any way you want. The interpreter will try to find such a method and call it and the worst that can happen is that you get an exception at run time. That’s how dynamically typed languages work.</p>
<p>With duck typing, just having the methods you want in an object, you can expect the object to be of a type you expect it to be. There is no need to check the inheritance of it.</p>
<p>So in your case, you can even get rid of <code>Base</code> (unless you of course want to provide a default implementation). And then you just get an object an call <code>obj.common()</code>. If you want to be on the very safe side, you can also check if the method exists first:</p>
<pre><code>if hasattr(obj, 'common'):
    obj.common()
</code></pre>
<p>Alternatively, if you keep your base type around, you could also do the check for inheritance if you want:</p>
<pre><code>if isinstance(obj, Base):
    obj.common()
</code></pre>
<p>But in general, you would just call the method and check if it works: It’s <a href="http://docs.python.org/3/glossary.html#term-eafp">easier to ask for forgiveness than permission</a>. So you would do this:</p>
<pre><code>try:
    obj.common()
except AttributeError:
    print('Oops, object wasn’t right after all')
</code></pre>
</div>
<span class="comment-copy">Does your posted code work?  Why or why not?</span>
<span class="comment-copy">Write Python instead of Java!  Don't check for types and do away with your base class alltogether.</span>
<span class="comment-copy">In short: duck-typing makes interfaces quasi-obsolete. Longer answer: <a href="http://www.python.org/dev/peps/pep-3119/" rel="nofollow noreferrer">PEP-3119</a> and <a href="http://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">abstract base classes</a>.</span>
<span class="comment-copy">If the base type is kept around, it should be an ABC.</span>
<span class="comment-copy">@delnan Well, I’m assuming that the base type is doing more than just defining that default method.</span>
