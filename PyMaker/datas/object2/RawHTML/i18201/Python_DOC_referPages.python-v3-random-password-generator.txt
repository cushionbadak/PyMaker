<div class="post-text" itemprop="text">
<p>My question is: how to generate a random password with a  length that varies from (8 to 12 characters) each time generated. </p>
<p>This is my code: </p>
<pre><code>import string
import random

def randompassword():
    chars=string.ascii_uppercase + string.ascii_lowercase + string.digits
    size=8 
    return ''.join(random.choice(chars) for x in range(size,12))

print(randompassword())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>size = 8; range(size, 12)</code> always returns array <code>[8,9,10,11]</code>, so you always get a password of length 4.
Instead, determine the size of this particular password using <code>randint</code> ahead of time:</p>
<pre><code>import string
import random

def randompassword():
  chars = string.ascii_uppercase + string.ascii_lowercase + string.digits
  size = random.randint(8, 12)
  return ''.join(random.choice(chars) for x in range(size))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import random
import string

def randompassword():
    return ''.join([random.choice(string.printable) for _ in range(random.randint(8, 12))])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>range(size,12)</code> only returns numbers between <code>size</code> (which you've hardcoded to 8) and 12, so your passwords will only be 4 characters long. Make that <code>... for x in range(size)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe it's only printing 4 characters due to<code>size = 8</code> and <code>range(size,12)</code>. This translates to range(8, 12) = 4 characters. You could increase the second number to allocate for a larger range to print random characters for like so</p>
<pre><code>import string
import random

def randompassword():
    chars=string.ascii_uppercase + string.ascii_lowercase + string.digits
    size= 8
    return ''.join(random.choice(chars) for x in range(size,20))

print(randompassword())
</code></pre>
<p>Also be sure to check out python's random documentation <a href="http://docs.python.org/2/library/random.html" rel="nofollow">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A couple of nuances to this question:</p>
<ul>
<li>Some answers employ <code>string.printable</code>, but this isn't a good idea since that contains <strong>whitespace</strong> characters. While they are not strictly illegal for passwords, you cannot easily see them and therefore cannot differentiate, say, a <strong>tab</strong> from several <strong>spaces</strong> (and so on). <em>Below I only employ lower &amp; uppercase letters, digits and punctuation characters</em>.</li>
<li>Randomly choosing from a set of characters based on <strong>element-position</strong> isn't random since the cardinality of each included <strong>character-class</strong> isn't uniformly distributed: <strong>26</strong> Lowercase letters; <strong>26</strong> Uppercase letters; <strong>10</strong> Digits; <strong>32</strong> Punctuation characters. Therefore generated passwords are likely to have more letters than punctuation characters and digits; and more punctuation characters than digits; (and so ono). So if<code>random.choices()</code> is used (as in other answers), one should also employ it's <code>weights=</code> and <code>cum_weights=</code> options, to eliminate aforementioned biases by evening out the distribution.</li>
<li>That said, I encourage use of Python's <code>secrets</code> module rather that its <code>random</code> module for this use case. From their <a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer">documentation on random</a>:</li>
</ul>
<blockquote>
<p>Warning: The pseudo-random generators of this module should not be used
  for security purposes. For security or cryptographic uses, see the
  <a href="https://docs.python.org/3/library/secrets.html#module-secrets" rel="nofollow noreferrer">secrets</a> module.</p>
</blockquote>
<p>Here is one <strong>functionally-oriented</strong> solution using <strong>Python-3</strong>. It uses <code>secrets.choice()</code> only. It doesn't totally solve the random problem (other nuances remain), but it does improve selection-distribution to reduces bias:</p>
<pre><code>&gt;&gt;&gt; import string, secrets

&gt;&gt;&gt; char_classes = (string.ascii_lowercase,
                    string.ascii_uppercase,
                    string.digits,
                    string.punctuation)

&gt;&gt;&gt; size = lambda: secrets.choice(range(8,13))                  # Chooses a password length.
&gt;&gt;&gt; char = lambda: secrets.choice(secrets.choice(char_classes)) # Chooses one character, uniformly selected from each of the included character classes.
&gt;&gt;&gt; pw   = lambda: ''.join([char() for _ in range(size())])     # Generates the variable-length password.
</code></pre>
<p><strong>DEMO</strong>: Generate 10 variable-length password-strings using characters uniformly selected from each of our character classes:</p>
<pre><code>&gt;&gt;&gt; for i in range(1,11):
&gt;&gt;&gt;    p = pw()
&gt;&gt;&gt;    print('%i) %i chars :: %s' % (i,len(p),p))
 1) 11 chars :: IwWNEAUmnJt
 2) 10 chars :: ;N/'tO6RTv
 3)  8 chars :: l=5.2CDh
 4) 10 chars :: V0=I+A`t2Q
 5) 12 chars :: PQm8:f,#56"9
 6) 10 chars :: KOdx9~%r;F
 7) 11 chars :: &lt;?67U8}3&gt;F{
 8) 11 chars :: G$5y~3fE7o*
 9) 10 chars :: 70,|=Rexwn
10)  8 chars :: &amp;31P^@cU
</code></pre>
<p>Finally, while we used the <code>secrets</code> module here, something similar could be done using <code>numpy</code> and <code>numpy.random</code>. I hope this helps!</p>
</div>
<span class="comment-copy">Wouldn't this only generate a length-4 password since range(8, 12) has 4 elements?</span>
<span class="comment-copy">Thank you :) I was missing the randint function.</span>
<span class="comment-copy">If it isnâ€™t obvious, this will also work in Python 2.</span>
<span class="comment-copy">V good ty - includes all characters not just alphanumeric</span>
