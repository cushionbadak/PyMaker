<div class="post-text" itemprop="text">
<p>What is the most pythonic way to iterate a dictionary and conditionally execute a method on values.</p>
<p>e.g. </p>
<pre><code>if dict_key is "some_key":
  method_1(dict_keys_value)
else 
  method_2(dict_keys_value)
</code></pre>
<p>It can't be a dict comprehension because I am not trying to create a dictionary from the result. It is just iterating a dictionary and executing some method on values of the dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you have is perfectly fine, and you can iterate with something like:</p>
<pre><code>for key, value in my_dict.items():  # use `iteritems()` in Python 2.x
    if key == "some_key":  # use `==`, not `is`
        method_1(value)
    else:
        method_2(value)
</code></pre>
<p>See: <a href="http://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow"><code>dict.items()</code></a></p>
<hr/>
<p>For your enlightenment, it is possible to condense that into two lines:</p>
<pre><code>for key, value in my_dict.items():
    (method_1 if key == "some_key" else method_2)(value)
</code></pre>
<p>but I don't think this gains you anything... it just makes it more confusing. I would <em>by far</em> prefer the first approach.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not create a dict with lambda functions?</p>
<pre><code>methods = {
    'method1': lambda val: val+1,
    'method2': lambda val: val+2,
}

for key, val in dict.iteritems():
    methods[key](val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to do this is to have a dictionary of functions to call, and then use the key to locate the actual function that you wish to call:</p>
<pre><code>function_table = { "key_1": function_1, "key_2": function_2 }
for key, value in my_dict.items():
    f = function_table .get(key, None)
    if f is not None:
        f(value)
</code></pre>
<p>If you have a lot of functions / keys, this makes the code a lot easier to read and maintain.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to complicate things, if you are always going to have two methods that you are going to call then something like this will work:</p>
<pre class="lang-py prettyprint-override"><code># Here are my two functions
func_list=[lambda x: x*2,lambda x:x*3] 

# Here is my dictionary
my_dict = {'item1':5,'item2':2}

# Now the fun part:
for key,value in my_dict.items():
    funct_list[key=="item1"](value)
</code></pre>
<p>As you can see from all the answers there are plenty of ways to do this, but do yourself and anyone else who will be reading your code and keep it simple.</p>
</div>
<span class="comment-copy">You should not use <code>if dict_key is "some_key"</code> to test equality. Use <code>if dict_key=="some_key"</code> instead.</span>
<span class="comment-copy">Thanks. I am using the same in my code. Wondering if there is more pythonic/elegant way which doesn't three levels of indentation.</span>
<span class="comment-copy">@user462455 This is absolutely fine. Don't try to change something so simple in an effort to be "more Pythonic". :)</span>
<span class="comment-copy">ok, fair enough</span>
<span class="comment-copy">Note that if <code>method_1</code> or <code>method_2</code> are actually "methods" of the values (rather than functions or methods of some other object) you'd usually call <code>value.method_x()</code>. Though passing an instance as the first argument to an unbound method does work, it's not the usual way to do things.</span>
