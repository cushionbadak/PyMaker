<div class="post-text" itemprop="text">
<p>I am working on designing a bejeweled style game with a twist.  Rather than trying to match all the blocks of the same shape, you are trying to match a pair of letters.  The board will always have roughly 10 letters on the board and you are trying to get them together.  There are three different color blocks.  Each color has 1 blank block and then 5 blocks with different letters.  The goal is to get say a red "T" block next to a red "A" block.  This is where I am running into problems.</p>
<p>Right now, the code will clear from the board three or more of the same color and letter.  So, if I can get three red "T" blocks next to each other they will clear.  The code basically scans each line looking for a group of three (or more).  I have tried to modify the code so it will clear even just the same color (regardless of letter combo) but I can't even get that working.  I think it has to do with how I load the images.  I have posted most of the code (without any of my crazy modifications to try and get this working since it just broke it) that deals with loading the images and finding matches.  Can anybody help me modify the code so it can at least find one correct match.  When a red "T" block is next to a red "A" block and a blank red block, it should be classified as a match and be removed from the board.  It doesn't need to be anything that complex as long as it works.  Thanks for any help!</p>
<p>Find matches code:</p>
<pre><code>def find_matches(self):
    def lines():
        for j in range(self.h):
            yield range(j * self.w, (j + 1) * self.w)
        for i in range(self.w):
            yield range(i, self.size, self.w)
    def key(i):
        return self.board[i].image
    def matches():
        for line in lines():
            for _, group in itertools.groupby(line, key):
                match = list(group)
                if len(match) &gt;= MINIMUM_MATCH:
                    yield match
    return list(matches())
</code></pre>
<p>Image loading:</p>
<pre><code>    shapes = 'red blue yellow'
    rareshapes = 'reda redc redg redt redu bluea bluec blueg bluet blueu yellowa yellowc yellowg yellowt yellowu'
    self.shapes = [pygame.image.load('images/{}.png'.format(shape))
                   for shape in shapes.split()]
    self.rareshapes = [pygame.image.load('rareimages/{}.png'.format(shape))
                       for shape in rareshapes.split()]
</code></pre>
<p>EDIT:</p>
<p>Since this post, a lot has changed and been updated with the game.  It has sound and background music, the groundwork for a new scoring system, a new timer system, and I can specify which rare shape I want to appear in a specific spot on the grid when the game first starts.  However, I am still having issues with the core gameplay.  I hate to drag up and older post, but I am at a loss as to how to get this to work.  I have messed around with the code dealing with matches with no luck.  </p>
<p>Basically, the rareshapes are assigned numbers.  So, a red A is 0, a red T is 3, all the way up to a yellow T which is 14.  For the gameplay to work the way we intend, the user will need to get a red A (0), a red T(3), and 2 blank red squares next to each other for it to be a valid match and clear from the board.  This is the ONLY correct way you can clear squares from the board.  Getting 4 blank squares of the same color next to each other DOES NOT remove them.</p>
<p>However, the code needs to detect if they get an invalid pair as well.  For example, if they get a red A(0), a red C(1), and two blank red squares, it will disappear but count as a strike against them.  </p>
<p>The goal of the game is to remove all the letter blocks before time runs out without getting three strikes.  Since we can specify how many and where letter blocks appear now, it just comes down to the matching.  Does anybody have any idea how to make this work?  </p>
</div>
<div class="post-text" itemprop="text">
<p>I was reading the code you posted, and I said to myself, <em>that looks pretty good — one-dimensional board representation, well-named variables, use of <code>itertools.groupby</code> — that's pretty much how I would have written it myself.</em> <a href="https://codereview.stackexchange.com/a/15895/11728">And then I remembered that I <em>had</em> written it myself.</a> Still, I'm glad to see someone's making use of my code!</p>
<p>(Having said that, I notice that you removed the docstring. Why did you do that? <em>Put it back right away!</em>)</p>
<p>Anyway, this match finder uses <a href="http://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to find runs of identical items in a sequence. Or rather, since a <code>key</code> function is given, runs of items where the <code>key</code> function returns identical results.</p>
<p>You can see that the key function as written just returns the image at the board location. This means that board locations match so long as they contain identical images. But you want to relax that: you want board locations to match so long as they contain images <em>of the same colour</em>.</p>
<p>So you need to revise the key function so that it returns the colour of the image at the board location. For example, when you loaded the images you could create a dictionary mapping images to their colour:</p>
<pre><code>self.image_colour = {}
self.shapes = []
self.rareshapes = []

colours = 'red blue yellow'
letters = 'acgtu'

for c in colours.split():
    im = pygame.image.load('images/{}.png'.format(c))
    self.shapes.append(im)
    self.image_colour[im] = c
    for l in letters:
        im = pygame.image.load('rareimages/{}{}.png'.format(c, l))
        self.rareshapes.append(im)
        self.image_colour[im] = c
</code></pre>
<p>and then in the key function you could look up the image to find its colour:</p>
<pre><code>def key(i):
    return self.image_colour.get(self.board[i].image)
</code></pre>
</div>
<span class="comment-copy">Sorry it took me a while to get back with you.  First off, your code is amazing!  As for the docstring, I simply removed them for this post to keep the code smaller.  Its still in the code.  I can't believe I didn't think of using the color.  I haven't had a chance to add it to the code yet (will in a few hours), but will this change be able to detect not only the color, but also the letter it is next to.  Making the game about grouping DNA.  So, for example, if a user gets "A" and "T" red along with a blank red square, it would be a valid match, but if they get "A" and "G", it will not clear.</span>
<span class="comment-copy">hopefully this comment gets to you.  Can you please check out the edits to the main post above?  Been making a lot of progress on this game, but the core gameplay is still not working right.  I know this post is fairly old, but I figured it would be better to just edit this one since we still can't get it rather than create a whole new post asking the same question.</span>
