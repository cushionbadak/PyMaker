<div class="post-text" itemprop="text">
<p>In Python 2 I used:</p>
<pre><code>print "a=%d,b=%d" % (f(x,n),g(x,n))
</code></pre>
<p>I've tried:</p>
<pre><code>print("a=%d,b=%d") % (f(x,n),g(x,n))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python2, <code>print</code> was a keyword which introduced a statement:</p>
<pre><code>print "Hi"
</code></pre>
<p>In Python3, <code>print</code> is a function which may be invoked:</p>
<pre><code>print ("Hi")
</code></pre>
<p>In both versions, <code>%</code> is an operator which requires a string on the left-hand side and a value or a tuple of values or a mapping object (like <code>dict</code>) on the right-hand side.</p>
<p>So, your line ought to look like this:</p>
<pre><code>print("a=%d,b=%d" % (f(x,n),g(x,n)))
</code></pre>
<p>Also, the recommendation for Python3 and newer is to use <code>{}</code>-style formatting instead of <code>%</code>-style formatting:</p>
<pre><code>print('a={:d}, b={:d}'.format(f(x,n),g(x,n)))
</code></pre>
<p>Python 3.6 introduces yet another string-formatting paradigm: <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="noreferrer">f-strings</a>.</p>
<pre><code>print(f'a={f(x,n):d}, b={g(x,n):d}')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The most recommended way to do is to use <code>format</code> method. Read more about it <a href="http://docs.python.org/2/library/string.html#format-string-syntax" rel="noreferrer">here</a></p>
<pre><code>a, b = 1, 2

print("a={0},b={1}".format(a, b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple printf() function from <a href="https://www.safaribooksonline.com/library/view/python-cookbook-2nd/0596007973/ch04s21.html">O'Reilly's Python Cookbook</a>.</p>
<pre><code>import sys
def printf(format, *args):
    sys.stdout.write(format % args)
</code></pre>
<p>Example output:</p>
<pre><code>i = 7
pi = 3.14159265359
printf("hi there, i=%d, pi=%.2f\n", i, pi)
# hi there, i=7, pi=3.14
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3.6 introduced f-strings for inline interpolation. What's even nicer is it extended the syntax to also allow format specifiers with interpolation. Something I've been working on while I googled this (and came across this old question!):</p>
<pre><code>print(f'{account:40s} ({ratio:3.2f}) -&gt; AUD {splitAmount}')
</code></pre>
<p><a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer">PEP 498</a> has the details. And... it sorted my pet peeve with format specifiers in other langs -- allows for specifiers that themselves can be expressions! Yay! See: <a href="https://www.python.org/dev/peps/pep-0498/#format-specifiers" rel="noreferrer">Format Specifiers</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple Example: </p>
<p><code>print("foo %d, bar %d" % (1,2))</code> </p>
</div>
<div class="post-text" itemprop="text">
<p>A simpler one.</p>
<pre><code>def printf(format, *values):
    print(format % values )
</code></pre>
<p>Then:</p>
<pre><code>printf("Hello, this is my name %s and my age %d", "Martin", 20)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because your <code>%</code> is outside the <code>print(...)</code> parentheses, you're trying to insert your variables into the <em>result</em> of your <code>print</code> call. <code>print(...)</code> returns <code>None</code>, so this won't work, and there's also the small matter of you already having printed your template by this time and time travel being prohibited by the laws of the universe we inhabit.</p>
<p>The whole thing you want to print, including the <code>%</code> and its operand, needs to be <em>inside</em> your <code>print(...)</code> call, so that the string can be built before it is printed.</p>
<pre><code>print( "a=%d,b=%d" % (f(x,n), g(x,n)) )
</code></pre>
<p>I have added a few extra spaces to make it clearer (though they are not necessary and generally not considered good style).</p>
</div>
<div class="post-text" itemprop="text">
<p>Other words printf absent in python... I'm surprised!
Best code is</p>
<pre><code>def printf(format, *args):
    sys.stdout.write(format % args)
</code></pre>
<p>Because of this form allows not to print \n. All others no. That's why print is bad operator. And also you need write args in special form. There is no disadvantages in function above. It's a standard usual form of printf function.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>print("Name={}, balance={}".format(var-name, var-balance))
</code></pre>
</div>
<span class="comment-copy"><code>%</code> has always been a string operator, not related to the <code>print</code> statement. You could, for example, create a string with <code>s="a=%d,b=%d"%(f(x,n),g(x,n))</code>, then print that string with <code>print s</code>.</span>
<span class="comment-copy"><i>or:</i> <code>print('a={first:4.2f}, b={second:03d}'.format(first=f(x,n),second=g(x,n)))</code>  where this example shows how you can use the printf-style modifiers <i>and</i> still use keywords.</span>
<span class="comment-copy">This syntax sucks big time.</span>
<span class="comment-copy">@rapt, it has some huge advantages. Not the least of which is you can reference the same format only multiple times or out of order: "{1}, {1}, {0}, and {1} ".format("eggs","spam")=="spam, spam, eggs, and spam"</span>
<span class="comment-copy">Heh...  <code>PRINT</code> and <code>FORMAT</code>...?  Back in time 60+ years to the days of FORTRAN :)</span>
<span class="comment-copy">Note: This is also the most performant way to inject variables into strings.</span>
