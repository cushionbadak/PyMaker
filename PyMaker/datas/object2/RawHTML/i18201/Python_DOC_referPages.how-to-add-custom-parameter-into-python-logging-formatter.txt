<div class="post-text" itemprop="text">
<p>I using standard Python logging module with Flask framework. I want to have one log file with the all records of users actions with custom parameter - %(username)s to logging.Formatter:</p>
<pre><code>admin - 2013-10-11 15:11:47,033 action0
user1 - 2013-10-11 15:11:48,033 action1
user2 - 2013-10-11 15:11:49,033 action2
admin - 2013-10-11 15:11:50,033 action3
</code></pre>
<p>I'm using RotatingFileHandler:</p>
<pre><code>def get_user_name():
    return session.get("username", "")

file_handler = RotatingFileHandler(fname, maxBytes=1 * 1024 * 1024, backupCount=5)
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(logging.Formatter(
    '%(username)s - %(asctime)s %(levelname)-10s %(message)s  [in %(pathname)s:%(lineno)d]'
)) # how to insert get_user_name() instead %(username)s?

app.logger.addHandler(file_handler)
</code></pre>
<p>What is the right way to do such logger? Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>u can do it with logging.LoggerAdapter</p>
<pre><code>myLogger = logging.LoggerAdapter(logging.getLogger("my-logger"), {"username" : get_user_name()})
</code></pre>
<p>Here is the complete solution for your program. I use a dict to build my configuration. It is better, if you have more logger</p>
<pre><code>    def get_user_name():
        return session.get("username", "")

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': True,
        'formatters': {
            'my_format': {
                'format': '%(username)s - %(asctime)s %(levelname)-10s %(message)s  [in %(pathname)s:%(lineno)d]'
            },
        },
        'handlers': {
            'my_handler': {
                'level': 'DEBUG',
                'class': 'logging.handlersRotatingFileHandler',
                'filename': fname,
                'maxBytes': 1 * 1024 * 1024,
                'backupCount': 5,
            },
        },
        'loggers': {
            'my_logger': {
                'handlers': ['my_handler'],
                'propagate': True,
                'level': 'DEBUG',
            },
        } }

logging.config.dictConfig(LOGGING) 
logging.LoggerAdapter(logging.getLogger('my_logger'),
                                           {"username" : get_user_name()})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Isn't the easier way to just subclass a Formatter and add your custom attribute to the LogRecord just before formatting?</p>
<p>For instance I use this code:</p>
<pre><code># A custom formatter to add the timestamp from the simulated clock.
class _Formatter(logging.Formatter):
  def format(self, record):
    record.simulated_clock = clock.get_time()
    return super(_Formatter, self).format(record)

# Creates a logger object.
def _create_logger():
  logger = logging.getLogger("simulation")
  logger.setLevel(kLevel)
  ch = logging.StreamHandler()
  ch.setLevel(kLevel)
  formatter = _Formatter("%(simulated_clock)s - %(levelname)s - %(message)s")
  ch.setFormatter(formatter)
  logger.addHandler(ch)

  return logger
</code></pre>
<p>I don't consider myself a Python expert, but it works for me....</p>
</div>
<span class="comment-copy">Is <code>2013-10-11 15:11:47,033 [DEBUG] admin - action0</code> ok?</span>
<span class="comment-copy">@xiaowl The problem is that I don't know how to insert <code>admin</code> into this log message. <code>%(username)s</code> can be in any place, if it's important.</span>
<span class="comment-copy">This is discussed at <a href="https://docs.python.org/3/howto/logging-cookbook.html#adding-contextual-information-to-your-logging-output" rel="nofollow noreferrer">docs.python.org/3/howto/â€¦</a></span>
<span class="comment-copy">great! thanks. logging module is so flexible.</span>
