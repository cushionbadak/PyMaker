<div class="post-text" itemprop="text">
<p>I want to write data that I have to create a histogram into a csv file. I have my 'bins' list and I have my 'frequencies' list. Can someone give me some help to write them into a csv in their respective columns?</p>
<p>ie bins in the first column and frequency in the second column</p>
</div>
<div class="post-text" itemprop="text">
<h1>The original Python 2 answer</h1>
<p>This example uses <a href="http://docs.python.org/2/library/itertools.html#itertools.izip" rel="nofollow noreferrer"><code>izip</code></a> (instead of <code>zip</code>) to avoid creating a new list and having to keep it in the memory. It also makes use of <a href="http://docs.python.org/2/library/csv.html" rel="nofollow noreferrer">Python's built in csv module</a>, which ensures proper escaping. As an added bonus it also avoids using any loops, so the code is short and concise.</p>
<pre><code>import csv
from itertools import izip

with open('some.csv', 'wb') as f:
    writer = csv.writer(f)
    writer.writerows(izip(bins, frequencies))
</code></pre>
<h1>The code adapted for Python 3</h1>
<p>In Python 3, you don't need <code>izip</code> anymore—the builtin <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> now does what <code>izip</code> used to do. You also don't need to open the file in binary mode:</p>
<pre><code>import csv

with open('some.csv', 'w') as f:
    writer = csv.writer(f)
    writer.writerows(zip(bins, frequencies))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you should use zip()
<a href="http://docs.python.org/2/library/functions.html#zip" rel="nofollow">http://docs.python.org/2/library/functions.html#zip</a></p>
<p>something like :</p>
<pre><code>f=open(my_filename,'w')
for i,j in zip(bins,frequencies):
    f.write(str(i)+","+str(j))
f.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hm, am I missing something? This sounds pretty straightforward:</p>
<pre><code>bins = [ 1,2,3,4,5 ]
freq = [ 9,8,7,6,5 ]

f = open("test.csv", "w")

for i in xrange(len(bins)):
    f.write("{} {}\n".format(bins[i], freq[i]))

f.close()
</code></pre>
</div>
<span class="comment-copy">What have you tries so far?</span>
<span class="comment-copy">Upvoted for what?</span>
<span class="comment-copy">What kind of data are in the bins and frequencies lists (numbers, strings, lists, dictionaries, instances of classes, etc)? You'll get better answers the more details you put in your questions.</span>
<span class="comment-copy">Even better, don't just describe the data, give us some sample data, and the exact output format you want.</span>
<span class="comment-copy">Thanks, this worked great. I will try and add more detail into the question in future, in hindsight I can see how vague it is.</span>
<span class="comment-copy">Also, in Python 3, you don't need to open it as binary: use 'w' rather than 'wb'</span>
<span class="comment-copy">In python 3 you don't need to import zip you can just use it. (<a href="https://stackoverflow.com/questions/32659552/izip-not-working-in-python-3-x" title="izip not working in python 3 x">stackoverflow.com/questions/32659552/…</a>)</span>
<span class="comment-copy">@Suleka_28 That is correct. This was mentioned in my answer, but I see there is still a lot of confusion about this so I added an explicit Python 3 example.</span>
<span class="comment-copy">Since he hasn't told us anything about what the bin labels look like, I'd definitely want to use <code>csv</code> here. Otherwise, a bin like <code>"a=0-10,b=0-10"</code> will end up as two columns.</span>
<span class="comment-copy">@abarnert : agreed</span>
