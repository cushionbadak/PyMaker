<div class="post-text" itemprop="text">
<p>I will have this random number generated e.g 12.75 or 1.999999999 or 2.65</p>
<p>I want to always round this number down to the nearest integer whole number so 2.65 would be rounded to 2.</p>
<p>Sorry for asking but I couldn't find the answer after numerous searches, thanks :)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can us either <code>int()</code>, <a href="http://docs.python.org/3/library/math.html#math.trunc" rel="nofollow noreferrer">math.trunc()</a>, or <a href="http://docs.python.org/3/library/math.html#math.floor" rel="nofollow noreferrer">math.floor()</a>. They all will do what you want for positive numbers:</p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.floor(12.6)  # returns 12.0 in Python 2
12   
&gt;&gt;&gt; int(12.6)
12
&gt;&gt;&gt; math.trunc(12.6)
12
</code></pre>
<p>However, note that they behave differently with negative numbers: int and <code>math.trunc</code> will go to 0, whereas <code>math.floor</code> always floors downwards:</p>
<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; math.floor(-12.6)  # returns -13.0 in Python 2
-13
&gt;&gt;&gt; int(-12.6)
-12
&gt;&gt;&gt; math.trunc(-12.6)
-12
</code></pre>
<p>Note that <code>math.floor</code> and <code>math.ceil</code> used to return floats in Python 2. </p>
<p>Also note that <code>int</code> and <code>math.trunc</code> will both (at first glance) appear to do the same thing, though their exact semantics differ. In short: int is for general/type conversion and <code>math.trunc</code> is specifically for numeric types (and will help make your intent more clear). </p>
<p>Use <code>int</code> if you don't really care about the difference, if you want to convert strings, or if you don't want to import a library. Use <code>trunc</code> if you want to be absolutely unambiguous about what you mean or if you want to ensure your code works correctly for non-builtin types.</p>
<p>More info below:</p>
<hr/>
<p><strong>Math.floor() in Python 2 vs Python 3</strong></p>
<p>Note that <code>math.floor</code> (and <code>math.ceil</code>) were changed slightly from Python 2 to Python 3 -- in Python 2, both functions will return a float instead of an int. This was changed in Python 3 so that both methods return an int (more specifically, they call the <code>__float__</code> method on whatever object they were given). So then, if you're using Python 2, or would like your code to maintain compatibility between the two versions, it would generally be safe to do <code>int(math.floor(...))</code>.</p>
<p>For more information about why this change was made + about the potential pitfalls of doing <code>int(math.floor(...))</code> in Python 2, see 
<a href="https://stackoverflow.com/q/8582741/646543">Why do Python's math.ceil() and math.floor() operations return floats instead of integers?</a></p>
<p><strong>int vs math.trunc()</strong></p>
<p>At first glance, the <code>int()</code> and <code>math.trunc()</code> methods will appear to be identical. The primary differences are:</p>
<ul>
<li><strong>int(...)</strong>
<ul>
<li>The int function will accept floats, strings, and ints.</li>
<li>Running <code>int(param)</code> will call the <code>param.__int__()</code> method in order to perform the conversion (and then will try calling <code>__trunc__</code> if <code>__int__</code> is undefined)</li>
<li>The <code>__int__</code> magic method was not always unambiguously defined -- for some period of time, it turned out that the exact semantics and rules of how <code>__int__</code> should work were largely left up to the implementing class. </li>
<li>The <code>int</code> function is meant to be used when you want to convert a <em>general object</em> into an int. It's a type conversion method. For example, you can convert strings to ints by doing <code>int("42")</code> (or do things like change of base: <code>int("AF", 16) -&gt; 175</code>).</li>
</ul></li>
<li><strong>math.trunc(...)</strong>
<ul>
<li>The trunc will only accept numeric types (ints, floats, etc)</li>
<li>Running <code>math.trunc(param)</code> function will call the <code>param.__trunc__()</code> method in order to perform the conversion</li>
<li>The exact behavior and semantics of the <code>__trunc__</code> magic method was precisely defined in <a href="https://www.python.org/dev/peps/pep-3141/" rel="nofollow noreferrer">PEP 3141</a> (and more specifically in the <a href="https://www.python.org/dev/peps/pep-3141/#changes-to-operations-and-magic-methods" rel="nofollow noreferrer">Changes to operations and __magic__ methods</a> section). </li>
<li>The <code>math.trunc</code> function is meant to be used when you want to take an existing real number and specifically <em>truncate and remove</em> its decimals to produce an integral type. This means that unlike <code>int</code>, <code>math.trunc</code> is a purely numeric operation.</li>
</ul></li>
</ul>
<p>All that said, it turns out all of Python's built-in types will behave exactly the same whether you use int or trunc. This means that if all you're doing is using regular ints, floats, <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow noreferrer">fractions</a>, and <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">decimals</a>, you're free to use either int or trunc. </p>
<p>However, if you want to be very precise about what exactly your intent is (ie if you want to make it absolutely clear whether you're flooring or truncating), or if you're working with custom numeric types that have different implementations for <code>__int__</code> and <code>__trunc__</code>, then it would probably be best to use <code>math.trunc</code>.</p>
<p>You can also find more information and debate about this topic on <a href="http://www.gossamer-threads.com/lists/python/dev/617453" rel="nofollow noreferrer">Python's developer mailing list</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can do this easily with a built in python functions, just use two forward slashes and divide by 1.</p>
<pre><code>&gt;&gt;&gt; print 12.75//1
12.0
&gt;&gt;&gt; print 1.999999999//1
1.0
&gt;&gt;&gt; print 2.65//1
2.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No need to import any module like math etc....
python bydeafault it convert if you do simply type cast by integer </p>
<pre><code>&gt;&gt;&gt;x=2.65
&gt;&gt;&gt;int(x)
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure whether you want math.floor, math.trunc, or int, but... it's almost certainly one of those functions, and you can probably read the docs and decide more easily than you can explain enough for usb to decide for you. </p>
</div>
<div class="post-text" itemprop="text">
<p>Obviously, Michael0x2a's answer is what you should do. But, you can always get a bit creative.</p>
<pre><code>int(str(12.75).split('.')[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you only looking for the nearest integer part I think the best option would be to use <a href="https://docs.python.org/3/library/math.html#math.trunc" rel="nofollow noreferrer">math.trunc()</a> function.</p>
<pre><code>import math
math.trunc(123.456)
</code></pre>
<p>You can also use int()</p>
<pre><code>int(123.456)
</code></pre>
<p>The difference between these two functions is that int() function also deals with string numeric conversion, where trunc() only deals with numeric values.</p>
<pre><code>int('123')
# 123
</code></pre>
<p>Where trunc() function will throw an exception</p>
<pre><code>math.trunc('123')

---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-62-f9aa08f6d314&gt; in &lt;module&gt;()
----&gt; 1 math.trunc('123')

TypeError: type str doesn't define __trunc__ method
</code></pre>
<p>If you know that you only dealing with numeric data, you should consider using trunc() function since it's faster than int()</p>
<pre><code>timeit.timeit("math.trunc(123.456)", setup="import math", number=10_000)
# 0.0011689490056596696

timeit.timeit("int(123.456)", number=10_000)
# 0.0014109049952821806
</code></pre>
</div>
<span class="comment-copy">See <code>math.floor()</code>.</span>
<span class="comment-copy">Do you want 2.65 to give you the float value 2.0 or the int value 2? And for -2.65 do you want -2 or -3?</span>
<span class="comment-copy">As a side note, it might be better to generate random integers than to generate random floats and floor them. That may not apply to your use case, but if it seems like it might, read through the docs for the random module.</span>
<span class="comment-copy">I think you flipped the outputs in your second codeblock. <code>int(-12.6)</code> gives -12 for me.</span>
<span class="comment-copy">@kevinsa5: whoops -- sorry about that!</span>
<span class="comment-copy"><code>math.floor</code> always returns a float.</span>
<span class="comment-copy">I just cast math.floor to int so it will do its job well. Thanks for this answer. :D</span>
<span class="comment-copy">Just out of curiosity, is there ever a difference in math.floor() and int()?</span>
<span class="comment-copy">Oh it looks like another guy explained it.</span>
