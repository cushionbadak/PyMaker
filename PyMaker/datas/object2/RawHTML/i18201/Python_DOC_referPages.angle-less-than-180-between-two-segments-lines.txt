<div class="post-text" itemprop="text">
<p>I need to find the 'inner' angle in degrees between two segments (lines), the less than 180 degrees that is.
Any fast way to do it in python2.7? (Shapely doesnt seem to have a function for this)</p>
<p>segment1 is x1,y1,x2,y2</p>
<p>segment2 is x3,y3,x4,y4</p>
<p><img alt="enter image description here" src="https://i.stack.imgur.com/ZiTfy.jpg"/></p>
</div>
<div class="post-text" itemprop="text">
<p>I originally suggested using the <a href="http://en.wikipedia.org/wiki/Law_of_cosines#Vector_formulation" rel="nofollow">law of cosines</a> in vector form: if your two line segments are given by the vectors <strong>b</strong> and <strong>c</strong>, and the angle between them is θ, then</p>
<blockquote>
<p><strong>b</strong> · <strong>c</strong> = |<strong>b</strong>| |<strong>c</strong>| cos θ</p>
</blockquote>
<p>and so</p>
<blockquote>
<p>θ = cos<sup>−1</sup>((<strong>b</strong> · <strong>c</strong>) / |<strong>b</strong>| |<strong>c</strong>|) </p>
</blockquote>
<p>But as Alex Wien points out in comments, this gives poor results when θ is close to zero:</p>
<pre><code>&gt;&gt;&gt; theta = 1e-6
&gt;&gt;&gt; a = Vector(1, 0)
&gt;&gt;&gt; b = Vector(cos(theta), sin(theta))
&gt;&gt;&gt; acos(a.dot(b) / (a.length * b.length))
9.999334257726859e-07
&gt;&gt;&gt; abs(theta - _) / theta
6.657422731408927e-05
</code></pre>
<p>which is a relative error of getting on for one part in ten thousand. For very small angles you can get 100% relative error:</p>
<pre><code>&gt;&gt;&gt; theta = 1e-9
&gt;&gt;&gt; a = Vector(1, 0)
&gt;&gt;&gt; b = Vector(cos(theta), sin(theta))
&gt;&gt;&gt; acos(a.dot(b) / (a.length * b.length))
0.0
</code></pre>
<p>An alternative formula uses the arc tangent instead of the arc cosine:</p>
<blockquote>
<p>θ = tan<sup>−1</sup>(|<strong>a</strong> × <strong>b</strong>| / (<strong>a</strong> · <strong>b</strong>))</p>
</blockquote>
<p>and this gives a more accurate result for small angles:</p>
<pre><code>&gt;&gt;&gt; atan2(abs(a.cross(b)), a.dot(b))
1e-09
&gt;&gt;&gt; theta == _
True
</code></pre>
<p>(The alternative formula follows from the <a href="http://en.wikipedia.org/wiki/Cross_product#Geometric_meaning" rel="nofollow">property of the cross product</a> that |<strong>a</strong> × <strong>b</strong>| = |<strong>a</strong>| |<strong>b</strong>| sin θ. Divide this by the law of cosines to get the result used here.)</p>
</div>
<span class="comment-copy">if you are able to calculate the angle between 3 points, then if &gt; 180: innerAngle = 360.0 - angle; Your accepted solution is not recomended (ill conditioned acos() ), better search further.</span>
<span class="comment-copy">A general way to calculated the angle between two line segments <a href="http://stackoverflow.com/a/3366569/327026">is shown in this answer</a>.</span>
<span class="comment-copy">How do I write this cos^-1( etc...) in python?</span>
<span class="comment-copy">Well, you read the manual! Mathematical functions like arc cosine are in the <a href="http://docs.python.org/3/library/math.html" rel="nofollow noreferrer"><code>math</code></a> module.</span>
<span class="comment-copy">:) a bit of RTFM is always good, you are right!</span>
<span class="comment-copy">This is unusable for an computer program. This is far away from working code.</span>
<span class="comment-copy">The inverse cos is ill conditioned for computer programms, the right solution uses atan2() for this task, and handles special cases like division by 0</span>
