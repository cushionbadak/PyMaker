<div class="post-text" itemprop="text">
<p>I had a lab today about making a power set from a set of arbitrary size, but I couldn't seem to think of the best way to do it. No one in the class has done Python before either. Only done java</p>
</div>
<div class="post-text" itemprop="text">
<p>There's a recipe in <a href="http://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools</code></a> for that:</p>
<pre><code>def powerset(iterable):
    "powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The insight is that for each set S in the powerset, a given member of the original set is either in S or it isn't. Since this is a binary decision, the powerset doubles for each additional element in the original set.</p>
<pre><code>powerset({a}) = {{}, {a}}

powerset({a,b}) = {{}, {a}, {b}, {a,b}}

powerset({a,b,c}) = union(
                       powerset({a,b}),
                       union({c}, X) where X in powerset({a,b})
                    )
</code></pre>
<p>This leads to a nice recursive algorithm that works for sets of "arbitrary size" as long as arbitrary is not too large.</p>
</div>
<span class="comment-copy">What have you tried so far?  I would recommend looking at the itertools module.</span>
<span class="comment-copy">maybe you could team up with your classmate here: <a href="http://stackoverflow.com/q/19308021/17875">stackoverflow.com/q/19308021/17875</a>  ;)</span>
<span class="comment-copy">+1, <code>from itertools import chain, combinations</code> in case that isn't obvious.</span>
<span class="comment-copy">Well, let's just say I'm an idiot. This code below is what I have now. She wants us to input a set and output a set of frozensets that represents the powerset. I'm not expressly looking for an answer, maybe just a point in the right direction.   <code>def powerset(s): 	list = [] 	result = set() 	for element in (s): 		list.append(s.pop) 	for i in range (0, len(list)-1): 		temp1 = list[i:len(list)-2] 		temp2 = list[i+1:len(list)-1] 		temp = list.pop(i) """ 		result.add(frozenset([temp])) 		result.add(frozenset([temp1])) 		result.add(frozenset([temp2])) """ 	return result</code></span>
<span class="comment-copy">@user2869097 If you want to do all this manually, you'll need a method like <code>combinations</code> and then you can call that method to create combinations of <code>n</code> elements for <code>n</code> from 0 to the length of the set. I'm sure you can find a pure Python <code>combinations</code>-like method online.</span>
<span class="comment-copy">Who is "she", @user2869097?</span>
