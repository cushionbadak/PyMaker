<div class="post-text" itemprop="text">
<p>I have :</p>
<pre><code>class A:
    def a():
       pass
</code></pre>
<p>After typing in the python command line:</p>
<pre><code>Aobj = A()
aBoundMeth = getattr(Aobj, 'a')
</code></pre>
<p>My goal is to get the name of the method that <strong>aBoundMeth</strong> object represents. Is it possible to do it?
Thank you in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that the name of the method is the string <code>'a'</code> (in this case), You can use the <code>__name__</code> attribute on the function object.</p>
<p>e.g.</p>
<pre><code>&gt;&gt;&gt; Aobj = A()
&gt;&gt;&gt; aBoundMeth = getattr(Aobj, 'a')
&gt;&gt;&gt; aBoundMeth.__name__
'a'
</code></pre>
<p>Note that this is the function name when it was created.  You can make more references to the same function, but the name doesn't change.  e.g.</p>
<pre><code>&gt;&gt;&gt; class A(object):
...     def a(self):
...        pass
...     b = a
... 
&gt;&gt;&gt; Aobj = A()
&gt;&gt;&gt; Aobj.a.__name__
'a'
&gt;&gt;&gt; Aobj.b.__name__
'a'
</code></pre>
</div>
<span class="comment-copy">Why use <code>getattr</code> here?</span>
<span class="comment-copy">I think the question is given <code>aboundMeth</code> (regardless of how it obtained its value), what is a/the name associated with the bound method object. Using <code>aBoundMeth = Aobj.a</code> would not affect the answer.</span>
<span class="comment-copy">Thanks. I was wondering why it's impossible to see <b><i>_name_</i></b> using <b>dir(aBoundMeth)</b></span>
<span class="comment-copy">@user1264304 - "<i>Note Because dir() is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names</i>" - <a href="http://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#dir</a></span>
<span class="comment-copy"><code>dir</code> gets it's its info from <code>__dict__</code>.  If you actually look at a function object's <code>__dict__</code>.  If you look at the function object's dict, it is empty -- So python must be doing some sort of special <code>__getattr__</code> magic within the interpreter to give you the name.</span>
