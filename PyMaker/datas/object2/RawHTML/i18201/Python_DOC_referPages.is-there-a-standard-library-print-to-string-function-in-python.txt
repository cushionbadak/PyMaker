<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/19223108/how-to-print-terminal-formatted-output-to-a-variable">How to print terminal formatted output to a variable</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
<li>
<a dir="ltr" href="/questions/2321939/assign-output-of-print-to-a-variable-in-python">assign output of print to a variable in python</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I'm wondering if there is a function in the standard library that takes whatever the print function would print and returns it as a string. It seems like there ought to be but if it's there I'm not looking in the right spot.</p>
<p>My situation is I've done a programming exercise that creates (after some calculation) a string of digits stored in a list, e,g,</p>
<pre><code>digits=[1, 0, 0, 1, 0, 1, 0, 0, 0, 1]
</code></pre>
<p>and the position of a decimal point <code>dp=4</code></p>
<p>and I want to roll this into something that looks like a decimal. The print function works nicely to display what I want:</p>
<pre><code>print(*(digits[:dp + 1] + ['.'] + digits[dp + 1:]), sep='')
</code></pre>
<p>produces <code>10010.10001</code></p>
<p>but if I want to return this result as a string is seems I have to write additional code. Not that it would be difficult but it's unnecessary if there's something already built-in. None of print, format or the % operator seem to do the trick. The closest thing I could find was the StringIO class but I was hoping for something a bit simpler and less arcane.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define your own function which behaves pretty similar to <code>print</code> like this (untested, have no python on tablet):</p>
<pre><code>def print_to_string(*objects, sep=' ', end='\n'):
     return sep.join(str(obj) for obj in objects) + end
</code></pre>
<p>The <code>file</code> argument in <a href="http://docs.python.org/3.0/library/functions.html#print" rel="nofollow">print</a> does not make a lot of sense for strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can give an alternate buffer to the print statement:</p>
<pre><code>&gt;&gt;&gt; import io
&gt;&gt;&gt; buf=io.StringIO()
&gt;&gt;&gt; print('hello',file=buf)
&gt;&gt;&gt; buf.getvalue()
'hello\n'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python3's print function <a href="http://docs.python.org/3/library/functions.html?highlight=print#print" rel="nofollow">will call write method of the file argument</a></p>
<p>If you don't like using StringIO, you can write your own:</p>
<pre><code>class StringWrapper:
  def __init__(self): 
    self.string = "";
  def write(self, string):
    self.string += string
</code></pre>
<p>This is used with the file argument:</p>
<pre><code>s = StringWrapper()
print("foo", "bar", file=s)
# s.string will be "foo bar\n"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check out the join command on strings - first you must convert your digits to strings:</p>
<pre><code>sdigits = [str(i) for i in digits]
''.join(sdigits[:dp+1] + ['.'] + sdigits[dp+1:])
&gt;&gt;&gt; '10010.10001
</code></pre>
</div>
<span class="comment-copy">@BartoszKP: Nah, this is the right question for the wrong answers to that question.</span>
<span class="comment-copy">but printing to a StringIO buffer is simple and non-arcane.</span>
<span class="comment-copy">Just an aside, it would be neater to use [(x) for x in digits].insert(dp+1, '.') to add the decimal point</span>
<span class="comment-copy">So I take it that the answer is there is nothing built it, but I could put this in MyLib.py and get essentially the same effect. Thanks.</span>
<span class="comment-copy">or print &gt;&gt;buf, "hello"</span>
<span class="comment-copy">also, cStringIO is supposedly faster ?</span>
<span class="comment-copy">@ychaouche - This is a python3 example where cStringIO and the '&gt;&gt;' print thing have gone away. Judging from the way the poster wrote his print statement, I think he's using python3.</span>
