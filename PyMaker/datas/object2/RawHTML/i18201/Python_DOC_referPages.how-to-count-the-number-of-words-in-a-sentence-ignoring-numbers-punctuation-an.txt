<div class="post-text" itemprop="text">
<p>How would I go about counting the words in a sentence? I'm using Python.</p>
<p>For example, I might have the string: </p>
<pre><code>string = "I     am having  a   very  nice  23!@$      day. "
</code></pre>
<p>That would be 7 words. I'm having trouble with the random amount of spaces after/before each word as well as when numbers or symbols are involved. </p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/stdtypes.html#str.split" rel="noreferrer"><code>str.split()</code></a> without any arguments splits on runs of whitespace characters:</p>
<pre><code>&gt;&gt;&gt; s = 'I am having a very nice day.'
&gt;&gt;&gt; 
&gt;&gt;&gt; len(s.split())
7
</code></pre>
<p>From the linked documentation:</p>
<blockquote>
<p>If <em>sep</em> is not specified or is <code>None</code>, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/re.html#re.findall"><code>regex.findall()</code></a>:</p>
<pre><code>import re
line = " I am having a very nice day."
count = len(re.findall(r'\w+', line))
print (count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a simple word counter using regex. The script includes a loop which you can terminate it when you're done.</p>
<pre><code>#word counter using regex
import re
while True:
    string =raw_input("Enter the string: ")
    count = len(re.findall("[a-zA-Z_]+", string))
    if line == "Done": #command to terminate the loop
        break
    print (count)
print ("Terminated")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>s = "I     am having  a   very  nice  23!@$      day. "
sum([i.strip(string.punctuation).isalpha() for i in s.split()])
</code></pre>
<p>The statement above will go through each chunk of text and remove punctuations before verifying if the chunk is really string of alphabets. </p>
</div>
<div class="post-text" itemprop="text">
<p>Ok here is my version of doing this. I noticed that you want your output to be <code>7</code>, which means you dont want to count special characters and numbers. So here is regex pattern:</p>
<pre><code>re.findall("[a-zA-Z_]+", string)
</code></pre>
<p>Where <code>[a-zA-Z_]</code> means it will match <strong>any</strong> character beetwen <code>a-z</code> (lowercase) and <code>A-Z</code> (upper case). </p>
<hr/>
<p>About spaces. If you want to remove all extra spaces, just do:</p>
<pre><code>string = string.rstrip().lstrip() # Remove all extra spaces at the start and at the end of the string
while "  " in string: # While  there are 2 spaces beetwen words in our string...
    string = string.replace("  ", " ") # ... replace them by one space!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>    def wordCount(mystring):  
        tempcount = 0  
        count = 1  

        try:  
            for character in mystring:  
                if character == " ":  
                    tempcount +=1  
                    if tempcount ==1:  
                        count +=1  

                    else:  
                        tempcount +=1
                 else:
                     tempcount=0

             return count  

         except Exception:  
             error = "Not a string"  
             return error  

    mystring = "I   am having   a    very nice 23!@$      day."           

    print(wordCount(mystring))  
</code></pre>
<p>output is 8</p>
</div>
<div class="post-text" itemprop="text">
<p>How about using a simple loop to count the occurrences of number of spaces!?</p>
<pre><code>txt = Just an example here move along  
count = 1
for i in txt:
    if i == " ":
        count += 1
print(count)
</code></pre>
</div>
<span class="comment-copy">To accomodate the numbers, you can change the regex. <code>\w</code> matches <code>[a-zA-Z0-9]</code> Now, you need to define what your use case is. What happens to <code>I am fine2</code> ? Would it be 2 words or 3 ?</span>
<span class="comment-copy">You needed to explicitly add <i>"ignoring numbers, punctuation and whitespace"</i> since that's part of the task.</span>
<span class="comment-copy">FYI some punctuation symbols may merit separate consideration. Otherwise, <i>"carry-on luggage"</i> becomes three words, as does <i>"U.S.A."</i> So answers may want to parameterize what punctuation is allowed, rather than blanket regex like <code>\S+</code></span>
<span class="comment-copy">One (very minor) disadvantage of this would be that you could have punctuation groups counted as words.  For example, in <code>'I am having a very nice day -- or at least I was.'</code>, you'd get <code>--</code> counted as a word.  <code>isalnum</code> might help, I guess, depending on the OP's definition of "word".</span>
<span class="comment-copy">This seems to be faster than regex</span>
<span class="comment-copy">Of course it's faster, but it's also much more limited.</span>
<span class="comment-copy">Nope, counts punctuation: <code>'apple &amp; orange'.split()</code> gives <code>['apple', '&amp;', 'orange']</code></span>
<span class="comment-copy">Hmm, I'd usually avoid regex if I can, but this seems like a pretty good use case.</span>
<span class="comment-copy">+1 for using <code>re</code>, it is truly better than <code>[i for i in string.split() if i.isalnum()]</code></span>
<span class="comment-copy">I'd rather rely on counting <code>\S+</code> to handle things like decimal numbers in <code>"It's 2.5 times faster"</code></span>
<span class="comment-copy">If line is <code>'inter-process communication'</code>, it will count 3 words</span>
<span class="comment-copy">Change <code>raw_input</code> to <code>input</code> in Python 3.</span>
<span class="comment-copy">1. Using <code>i</code> as a nonindex variable is really misleading; 2. you don't need to create a list, it's just wasting memory. Suggestion: <code>sum(word.strip(string.punctuation).isalpha() for word in s.split())</code></span>
<span class="comment-copy">I like the idea of counting spaces, good approach</span>
<span class="comment-copy">here is another approach print(input().count(' ') + 1)</span>
