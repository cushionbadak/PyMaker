<div class="post-text" itemprop="text">
<p>My code is for a Tic Tac Toe game and checking for a draw state but I think this question could be more useful in a general sense.</p>
<p>I have a list that represents the board, it looks like this:</p>
<pre><code>board = [1,2,3,4,5,6,7,8,9]
</code></pre>
<p>When a player makes a move the int they moved on is replaced with their marker ('x' or 'o'), I already have checks in place to look for a winning state, what I can't do is check for a draw state, where none of the list values are ints but a winning state has not been set.</p>
<p>The code I have so far:</p>
<pre><code>if any(board) != playerOne or any(board) != playerTwo:
    print 'continue'
elif all(board) == playerOne or playerTwo:
    print 'Draw'
</code></pre>
<p>The if statement works, the elif does not, I think the problem is my 'or' operator, what I want to check for is: if the every item on the board is either playerOne marker or playerTwo marker, if I where to make the code:</p>
<pre><code>elif all(board) == playerOne or all(board) == playerTwo:
</code></pre>
<p>I would be checking to see if every place on the board was playerOne or every place on the board is playerTwo, which it won't be.</p>
<p>So how do I check if the board is taken up by a combination of playerOne markers and playerTwo markers?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>all</code> and <code>any</code> are functions that take an iterable and determine...</p>
<ul>
<li>...in the case of <code>all()</code>: if <em>all</em> the values in that iterable are non-<code>False</code>;</li>
<li>...in the case of <code>any()</code>: if <em>any</em> of the values in that iterable is non-<code>False</code>.</li>
</ul>
<p>The above definitions make sense also in case of an empty iterable, otherwise one could more naturally say that <code>all</code> sees if all values are true, and <code>any</code> sees if any value is true. </p>
<hr/>
<p>So you misunderstood a little bit how these functions work. Hence, the following does something completely not what you thought:</p>
<pre><code>if any(foobars) == big_foobar:
</code></pre>
<p>...because <code>any(foobars)</code> would first be evaluated to either <code>True</code> or <code>False</code>, and then that boolean value would be compared to <code>big_foobar</code>, which generally always gives you <code>False</code> (unless <code>big_foobar</code> happens to be the same boolean value).</p>
<p><strong>Note:</strong> the iterable can be a list, but it can also be a generator/generator expression (≈ lazily evaluated/generated list) or any other iterator.</p>
<p><strong>What you want instead is:</strong></p>
<pre><code>if any(x == big_foobar for x in foobars):
</code></pre>
<p>which basically first constructs an iterable that yields a sequence of booleans—for each item in <code>foobars</code>, it compares the item to <code>big_foobar</code> and emits the resulting boolean to the resulting sequence:</p>
<pre><code>tmp = (x == big_foobar for x in foobars)
</code></pre>
<p>then <code>any</code> walks over all items in <code>tmp</code> and returns <code>True</code> as soon as it finds the first <code>True</code> item. It's as if you did the following:</p>
<pre><code>foobars = ['big', 'small', 'medium', 'nice', 'ugly']
big_foobar = 'big'
any(['big' == big_foobar, 'small' == big_foobar, 'medium' == big_foobar, ...])
</code></pre>
<p><strong>Note:</strong> As DSM pointed out, <code>any(x == y for x in xs)</code> is equivalent to <code>y in xs</code> but the latter is more readable, quicker to write and runs faster.</p>
<p><strong>Some examples:</strong></p>
<pre><code>any(x &gt; 5 for x in range(4))  # =&gt; False
all(isinstance(x, int) for x in range(10))  # =&gt; True
any(x == 'Erik' for x in ['Erik', 'John', 'Jane', 'Jim'])  # =&gt; True
all([True, True, True, False, True])  # =&gt; False
</code></pre>
<p>I would strongly suggest simply playing with <code>any</code> and <code>all</code> with various inputs on the Python shell, or better yet, on the <a href="http://ipython.org" rel="noreferrer">IPython</a> shell to get a feel of how this works before you continue writing actual code.</p>
<p>See also: <a href="http://docs.python.org/2/library/functions.html#all" rel="noreferrer">http://docs.python.org/2/library/functions.html#all</a></p>
</div>
<span class="comment-copy">That's really not how <a href="http://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a> and <a href="http://docs.python.org/3/library/functions.html#all" rel="nofollow noreferrer"><code>all()</code></a> work: <i>"Return <code>True</code> if (any/all) element of the iterable is true. If the iterable is empty, return False."</i></span>
<span class="comment-copy">I think instead of <code>any(x == big_foobar for x in foobars)</code> it'd be more idiomatic to write <code>big_foobar in foobars</code>.</span>
<span class="comment-copy">Okay, so to change my line: if any(board) != playerOne or any(board) != playerTwo: Would that become:  if any(x != playerOne or x != playerTwo for x in board):?</span>
<span class="comment-copy">@DSM: yes, of course, but I had to base my examples on his use case :)</span>
<span class="comment-copy">@DasSnipez: that would mean "if there exist an item in board that does not belong to either of the players"... so if that's what you want, yeah.</span>
