<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1419046/normal-arguments-vs-keyword-arguments">Normal arguments vs. keyword arguments</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>This is an example of of code from <a href="http://pyinsci.blogspot.de/2010/12/efficcient-mcmc-in-python.html" rel="nofollow">here</a>:</p>
<p>What does the equality mean in the argument assignment to function? like <code>N=20000</code> here?
What is the difference between that and simply <code>N</code> as argument?
import random,math</p>
<pre><code>def gibbs(N=20000,thin=500):
   x=0
   y=0
   samples = []
   for i in range(N):
       for j in range(thin):
           x=random.gammavariate(3,1.0/(y*y+4))
           y=random.gauss(1.0/(x+1),1.0/math.sqrt(x+1))
       samples.append((x,y))
   return samples

smp = gibbs()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In a function definition, it specifies a default value for the parameter. For example:</p>
<pre><code>&gt;&gt;&gt; def func(N=20000):
...     print(N)
&gt;&gt;&gt; func(10)
10
&gt;&gt;&gt; func(N=10)
10
&gt;&gt;&gt; func()
20000
</code></pre>
<p>In the first call, we're specifying a value for the <code>N</code> parameter with a positional argument, <code>10</code>. In the second call, we're specifying a value for the <code>N</code> parameter with a keyword argument, <code>N=10</code>. In the third call, we aren't specifying a value at all—so it gets the default value, <code>20000</code>.</p>
<p>Notice that the syntax for calling a function with a keyword argument looks very similar to the syntax for defining a function with a parameter with a default value. This parallel isn't accidental, but it's important not to get confused by it. And it's even easier to confuse yourself when you get to unpacking arguments vs. variable-argument parameters, etc. In all but the simplest cases, even once you get it, and it all makes sense intuitively, it's still hard to actually get the details straight in your head. <a href="http://stupidpythonideas.blogspot.com/2013/08/arguments-and-parameters.html" rel="nofollow">This blog post</a> attempts to get all of the explanation down in one place. I don't think it does a great job, but it does at least have useful links to everything relevant in the documentation…</p>
</div>
<div class="post-text" itemprop="text">
<p>It specifies a default value. This can be especially useful if the program will fail on an undefined value. For instance, if it was simply n, and you did not feed the function any variables it would fail. With the default it does not. </p>
</div>
<span class="comment-copy">As a side note, calling this "assignment" can make things a little confusing, and "equality" even more so. Unfortunately, there's no better name for <code>=</code> that's any less confusing. So this is really just a warning to be careful not to read too much into the name for the symbol, not anything actually helpful…</span>
<span class="comment-copy">@abarnert, assignement was not for equality but assigning arguments to a function.</span>
<span class="comment-copy">@Naji: I don't know what that comment means. But your question title and description both refer to "the/an equality", and the description then goes on to talk about "the argument assignment". The <code>=</code> is neither equality nor assignment here; it's something different. But there is no good word for what it is. (The <a href="http://docs.python.org/3/reference/compound_stmts.html#function-definitions" rel="nofollow noreferrer">syntax</a> doesn't name it, it just uses the literal <code>"="</code>, and the semantics described below don't give a name either.)</span>
<span class="comment-copy">@abarnert, I just mean that the "assignment" used above is used for assigning a parameter to a function.</span>
<span class="comment-copy">@DavidRobinson This is not a duplicate of that Q - this one concerns default parameters, while the linked question asks about positional vs. keyword arguments. I can't seem to find a suitable duplicate for this question.</span>
<span class="comment-copy">If you're interested in what happens under the covers, you can inspect the function object (<code>func.__code__.co_varnames</code> is <code>('N',)</code>, and <code>func.__defaults__</code> is <code>(20000,)</code>, and the <a href="http://docs.python.org/2/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> module tells you a bit about what those mean), or <code>ast.parse</code> your defining code and <code>ast.dump</code> the results.</span>
