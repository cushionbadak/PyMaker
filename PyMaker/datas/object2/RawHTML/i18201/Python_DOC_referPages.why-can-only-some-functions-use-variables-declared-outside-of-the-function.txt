<div class="post-text" itemprop="text">
<p>I have this code:</p>
<pre><code>def r():
    i += 1
    return i

def f():
    return x*a

i = 0

a=2 
x=3

print f()
print r()
</code></pre>
<p>I get this error for <code>r()</code>, but not for <code>f()</code>:</p>
<pre><code>~$ python ~/dev/python/inf1100/test.py 
6
Traceback (most recent call last):
  File "/home/marius/dev/python/inf1100/test.py", line 18, in &lt;module&gt;
    print r()
  File "/home/marius/dev/python/inf1100/test.py", line 2, in r
    i += 1
UnboundLocalError: local variable 'i' referenced before assignment
</code></pre>
<p>Why can <code>f()</code> use variables defined outside of the function, whilst <code>r()</code> cannot?</p>
</div>
<div class="post-text" itemprop="text">
<p>That's because <code>r</code> <em>reassigns</em> the global variable <code>i</code>.  <code>f</code> on the other hand just uses it.  Remember that <code>i += 1</code> is the same as <code>i = i + 1</code>.</p>
<p>Unless you explicitly tell it otherwise, Python treats all variables used within a function as being local.  Furthermore, since there is no variable <code>i</code> defined within the local scope of <code>r</code>, it throws the error.</p>
<p>If you want to reassign a global variable within a function, you have to put:</p>
<pre><code>global var
</code></pre>
<p>at the top of your function to explicitly declare <code>var</code> to be global.  </p>
<p>So, to make <code>r</code> work, it should be rewritten to this:</p>
<pre><code>def r():
    global i
    i += 1
    return i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This piece:</p>
<pre><code>def r():
    i += 1
    return i
</code></pre>
<p>not only <em>uses</em> global variables, but also tries to <em>modify</em> them (or more accurately: assign different value to global variable <code>i</code>).</p>
<p>To make it work, you can just declare this variable as global:</p>
<pre><code>def r():
    global i
    i += 1
    return i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd like to point out that most of the time, this:</p>
<pre><code>x = 1

def f():
    global x
    x += 1

f()
</code></pre>
<p>is bad practice, and you want to use parameters instead:</p>
<pre><code>x = 1

def f(a_number):
    return a_number + 1

x = f(x)
</code></pre>
<p>Also, here:</p>
<pre><code>def r():
    global i
    i += 1
    return i
</code></pre>
<p><code>return i</code> is redundant, the variable is increased by the calling of the function.</p>
<p>Also <a href="http://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="nofollow">this</a> part of the Python FAQ is relevant and useful.</p>
</div>
<div class="post-text" itemprop="text">
<p>In <code>r</code> you are shadowing your global <code>i</code>. Since it is not assigned before you attempt to add to it, you get an error.</p>
<p>A possible solution is to use <code>global i</code> in the <code>r</code> function like so</p>
<pre><code>def r():
    global i
    i += 1
    return i
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you assign into a variable, python will consider the variable local and won't bother looking for a global variable of the same name. Use <code>global</code> as suggested in other answers.</p>
</div>
<span class="comment-copy">When you do assignment in a function then you creates a <i>new</i> object in local namespace, otherwise you are using variable from global namespace.</span>
<span class="comment-copy">Note that 99% of the time, if you want to write to a global variable, you're doing it wrong :)</span>
