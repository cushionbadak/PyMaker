<div class="post-text" itemprop="text">
<p>Below is a simple test. <code>repr</code> seems to work fine. yet <code>len</code> and <code>x for x in</code> doesn't seem to divide the unicode text correctly in Python 2.6 and 2.7:</p>
<pre><code>In [1]: u"爨爵"
Out[1]: u'\U0002f920\U0002f921'

In [2]: [x for x in u"爨爵"]
Out[2]: [u'\ud87e', u'\udd20', u'\ud87e', u'\udd21']
</code></pre>
<p>Good news is Python 3.3 does the right thing ™.</p>
<p>Is there any hope for Python 2.x series?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, provided you compiled your Python with wide-unicode support.</p>
<p>By default, Python is built with narrow unicode support only. Enable wide support with:</p>
<pre><code>./configure --enable-unicode=ucs4
</code></pre>
<p>You can verify what configuration was used by testing <a href="http://docs.python.org/3.1/library/sys.html#sys.maxunicode" rel="nofollow"><code>sys.maxunicode</code></a>:</p>
<pre><code>import sys
if sys.maxunicode == 0x10FFFF:
    print 'Python built with UCS4 (wide unicode) support'
else:
    print 'Python built with UCS2 (narrow unicode) support'
</code></pre>
<p>A wide build will use UCS4 characters for <em>all</em> unicode values, doubling memory usage for these. Python 3.3 switched to variable width values; only enough bytes are used to represent all characters in the current value.</p>
<p>Quick demo showing that a wide build handles your sample Unicode string correctly:</p>
<pre><code>$ python2.6
Python 2.6.6 (r266:84292, Dec 27 2010, 00:02:40) 
[GCC 4.4.5] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxunicode
1114111
&gt;&gt;&gt; [x for x in u'\U0002f920\U0002f921']
[u'\U0002f920', u'\U0002f921']
</code></pre>
</div>
<span class="comment-copy">Which encoding does 3.3 use?</span>
<span class="comment-copy">@DavidHeffernan: See <a href="http://docs.python.org/3/whatsnew/3.3.html#pep-393" rel="nofollow noreferrer">PEP 393</a>; up to UCS4, dropping down to UCS2 if the 2 LSB bytes are 0 for all characters, down to Latin-1 if the remaining LSB is 0 for all characters.</span>
<span class="comment-copy">Thanks. Looks pretty wild. Maintaining parallel copies of the string. And interesting that they chose payload dependent encoding.</span>
<span class="comment-copy">@qarma: Python 3.3 did away with narrow vs. wide altogether, so <code>sys.maxunicode</code> is hardcoded to 0x10ffff there. The OS X bundled Python versions are all narrow.</span>
<span class="comment-copy">@HerrKaputt: well spotted. Corrected now!</span>
