<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5036700/how-can-you-dynamically-create-variables-via-a-while-loop">How can you dynamically create variables via a while loop? [duplicate]</a>
<span class="question-originals-answer-count">
                    8 answers
                </span>
</li>
</ul>
</div>
<p>I want to use some code similar to what follows that actually works:</p>
<pre><code>P = 20
n = 1
for x in range(1, P+1):
    Ax = n #Hoping that you can name the variable from the current element in the range
    n = n+1
</code></pre>
<p>I want to make varibles A1, A2, A3....A20   they would have the values 1, 2, 3...20  in this example...</p>
<p>Is this possible at all, and what coding does it require?</p>
<p>Cheers</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't actually want to do this. Instead, you want something like this:</p>
<pre><code>P = 20
n = 1
A = []        # Or `A = list()`
for x in range(1, P+1):
    A.append(n)
    n += 1
</code></pre>
<p>Then, instead of <code>A0</code>, you do <code>A[0]</code> and instead of <code>A5</code> you do <code>A[5]</code>.</p>
<p><a href="http://docs.python.org/3/library/stdtypes.html#list" rel="nofollow">Here</a> is the Python 3.x list documentation (I presume you are using Python 3.x due to using <code>range</code> rather than <code>xrange</code>.</p>
<p>Also, as I understand it, your code could just be this:</p>
<pre><code>P = 20
A = []
for x in range(1, P+1):
    A.append(x)
</code></pre>
<p>Or this:</p>
<pre><code>P = 20
A = [i for i in range(1, P+1)]
</code></pre>
<p>(See the documentation for <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions</a>, a very useful feature of Python.)</p>
<p>Or even:</p>
<pre><code>P = 20
A = list(range(1, P+1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do not try to dynamically name variables.  That way madness lies.</p>
<p>Instead, leverage python's data structures to do what you want.  In most cases, people really want to be using a <code>dict</code> or a <code>list</code>.</p>
<pre><code>a = {} 

for x in range(1,21):
    a[x] = x**2


b = []

for x in range(1,21):
    b.append(x**2)
</code></pre>
<p>You will get a feel for when you want to use one over the other.  For example, in the above if I needed to quickly look up the square of a given integer, I would use a <code>dict</code>.  If I instead just needed to do something to the collection of squares between 1 and 20, that's when I use a <code>list</code>.</p>
<p>Trivial example, but this scales up as far as you need it to.  Any hashable data type can be a key in a dictionary, so you're no longer restricted from naming your variables with clunky letters and numbers - any object will do!</p>
</div>
<div class="post-text" itemprop="text">
<p>I almost agree with all the answers and comments you got so far: 
<strong>99.99% of the times, you don't want to do this. It's dangerous, ugly and bad.</strong></p>
<p>However there is a way to do it, using <code>exec</code>:</p>
<pre><code>P = 20
n = 1
for x in range(1, P+1):
    exec("A{} = n".format(x))
    n = n+1
</code></pre>
<p>Again, you probably shouldn't use this.</p>
</div>
<span class="comment-copy">You <b>really</b> do not want to do this. Use a list instead. <a href="http://nedbatchelder.com/blog/201112/keep_data_out_of_your_variable_names.html" rel="nofollow noreferrer">Keep your data out of your variable names</a>.</span>
