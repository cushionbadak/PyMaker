<div class="post-text" itemprop="text">
<p>Most languages have a NaN constant you can use to assign a variable the value NaN.  Can python do this without using numpy?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes -- use <code>float('nan')</code>. As of Python 3.5, you can also use <a href="https://docs.python.org/3/library/math.html#math.nan" rel="noreferrer"><code>math.nan</code></a>.</p>
<pre><code>&gt;&gt;&gt; a = float('nan')
&gt;&gt;&gt; print(a)
nan
&gt;&gt;&gt; print(a + 2)
nan
&gt;&gt;&gt; a == a
False
&gt;&gt;&gt; import math
&gt;&gt;&gt; math.isnan(a)
True
&gt;&gt;&gt; # Python 3.5+
&gt;&gt;&gt; math.isnan(math.nan)
True
</code></pre>
<p>The <code>float(...)</code> function is case-insensitive -- doing <code>float('NAN')</code> or <code>float('naN')</code> or similar things will also work.</p>
<p>Note that checking to see if two things that are NaN are equal to one another will always return false. This is in part because two things that are "not a number" cannot (strictly speaking) be said to be equal to one another -- see <a href="https://stackoverflow.com/q/1565164/646543">What is the rationale for all comparisons returning false for IEEE754 NaN values?</a> for more details and information. </p>
<p>Instead, use <a href="https://docs.python.org/3/library/math.html#math.isnan" rel="noreferrer"><code>math.isnan(...)</code></a> if you need to determine if a value is NaN or not.</p>
<p>Furthermore, the exact semantics of the <code>==</code> operation on NaN value may cause subtle issues when trying to store NaN inside container types such as <code>list</code> or <code>dict</code> (or when using custom container types). See <a href="https://stackoverflow.com/q/9904699/646543">Checking for NaN presence in a container</a> for more details.</p>
<hr/>
<p>You can also construct NaN numbers using Python's <a href="https://docs.python.org/3/library/decimal.html" rel="noreferrer">decimal</a> module:</p>
<pre><code>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; b = Decimal('nan')
&gt;&gt;&gt; print(b)
NaN
&gt;&gt;&gt; print(repr(b))
Decimal('NaN')
&gt;&gt;&gt;
&gt;&gt;&gt; Decimal(float('nan'))
Decimal('NaN')
&gt;&gt;&gt; 
&gt;&gt;&gt; import math
&gt;&gt;&gt; math.isnan(b)
True
</code></pre>
<p><code>math.isnan(...)</code> will also work with Decimal objects.</p>
<hr/>
<p>However, you <em>cannot</em> construct NaN numbers in Python's <a href="https://docs.python.org/3/library/fractions.html" rel="noreferrer">fractions</a> module:</p>
<pre><code>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction('nan')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python35\lib\fractions.py", line 146, in __new__
    numerator)
ValueError: Invalid literal for Fraction: 'nan'
&gt;&gt;&gt;
&gt;&gt;&gt; Fraction(float('nan'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python35\lib\fractions.py", line 130, in __new__
    value = Fraction.from_float(numerator)
  File "C:\Python35\lib\fractions.py", line 214, in from_float
    raise ValueError("Cannot convert %r to %s." % (f, cls.__name__))
ValueError: Cannot convert nan to Fraction.
</code></pre>
<hr/>
<p>Incidentally, you can also do <code>float('Inf')</code>, <code>Decimal('Inf')</code>, or <a href="https://docs.python.org/3/library/math.html#math.inf" rel="noreferrer"><code>math.inf</code></a> (3.5+) to assign infinite numbers. (And also see <a href="https://docs.python.org/3/library/math.html#math.isinf" rel="noreferrer"><code>math.isinf(...)</code></a>)</p>
<p>However doing <code>Fraction('Inf')</code> or <code>Fraction(float('inf'))</code> isn't permitted and will throw an exception, just like NaN.</p>
<p>If you want a quick and easy way to check if a number is neither NaN nor infinite, you can use <a href="https://docs.python.org/3/library/math.html#math.isfinite" rel="noreferrer"><code>math.isfinite(...)</code></a> as of Python 3.2+.</p>
<hr/>
<p>If you want to do similar checks with complex numbers, the <code>cmath</code> module contains a similar set of functions and constants as the <code>math</code> module:</p>
<ul>
<li><a href="https://docs.python.org/3/library/cmath.html#cmath.isinf" rel="noreferrer"><code>cmath.isnan(...)</code></a></li>
<li><a href="https://docs.python.org/3/library/cmath.html#cmath.isinf" rel="noreferrer"><code>cmath.isinf(...)</code></a></li>
<li><a href="https://docs.python.org/3/library/cmath.html#cmath.isfinite" rel="noreferrer"><code>cmath.isfinite(...)</code></a> (Python 3.2+)</li>
<li><a href="https://docs.python.org/3/library/cmath.html#cmath.nan" rel="noreferrer"><code>cmath.nan</code></a> (Python 3.6+; equivalent to <code>complex(float('nan'), 0.0)</code>)</li>
<li><a href="https://docs.python.org/3/library/cmath.html#cmath.nanj" rel="noreferrer"><code>cmath.nanj</code></a> (Python 3.6+; equivalent to <code>complex(0.0, float('nan'))</code>)</li>
<li><a href="https://docs.python.org/3/library/cmath.html#cmath.inf" rel="noreferrer"><code>cmath.inf</code></a> (Python 3.6+; equivalent to <code>complex(float('inf'), 0.0)</code>)</li>
<li><a href="https://docs.python.org/3/library/cmath.html#cmath.infj" rel="noreferrer"><code>cmath.infj</code></a> (Python 3.6+; equivalent to <code>complex(0.0, float('inf'))</code>)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre><code>nan = float('nan')
</code></pre>
<p>And now you have the constant, <code>nan</code>.</p>
<p>You can similarly create NaN values for decimal.Decimal.:</p>
<pre><code>dnan = Decimal('nan')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>float("nan")</code>:</p>
<pre><code>&gt;&gt;&gt; float("nan")
nan
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do <code>float('nan')</code> to get NaN.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can get NaN from "inf - inf", and you can get "inf" from a number greater than 2e308, so, I generally used:</p>
<pre><code>&gt;&gt;&gt; inf = 9e999
&gt;&gt;&gt; inf
inf
&gt;&gt;&gt; inf - inf
nan
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A more consistent (and less opaque) way to generate inf and -inf is to again use float():</p>
<pre><code>&gt;&gt; positive_inf = float('inf')
&gt;&gt; positive_inf
inf
&gt;&gt; negative_inf = float('-inf')
&gt;&gt; negative_inf
-inf
</code></pre>
<p>Note that the size of a float varies depending on the architecture, so it probably best to avoid using magic numbers like 9e999, even if that is likely to work.</p>
<pre><code>import sys
sys.float_info
sys.float_info(max=1.7976931348623157e+308,
               max_exp=1024, max_10_exp=308,
               min=2.2250738585072014e-308, min_exp=-1021,
               min_10_exp=-307, dig=15, mant_dig=53,
               epsilon=2.220446049250313e-16, radix=2, rounds=1)
</code></pre>
</div>
<span class="comment-copy">C, C++, java, C#, ocaml, its a part of a lot of languages.</span>
<span class="comment-copy">NaN, in C, is <code>NAN</code>; it's a constant defined in <code>math.h</code>, as of C99. (I feel it's fair to call the most recent standardized version of the language as that language. Thus "C" is C11.) (see <a href="http://stackoverflow.com/questions/1923837/how-to-use-nan-and-inf-in-c" title="how to use nan and inf in c">stackoverflow.com/questions/1923837/how-to-use-nan-and-inf-in-c</a>); in C++, it's <code>NAN</code> as well, there's also <code>nan()</code>, <code>nanf()</code>, and <code>nanl()</code>, though I'm a bit less certain as to what they do. <code>double.NaN</code> in Java, <code>Double.NaN</code> in C#â€¦</span>
<span class="comment-copy">This answer downvoted unreasonably. I'm writing lots of small parsing tests in .txt files and using ast.literal_eval to get expected output part. It's impossible to call float('nan') there, and this answer was helpful for me.</span>
