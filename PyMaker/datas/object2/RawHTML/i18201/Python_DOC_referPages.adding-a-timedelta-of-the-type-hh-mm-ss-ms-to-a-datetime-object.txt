<div class="post-text" itemprop="text">
<p>I have a string like the following <code>"0:07:38.701"</code> which means 0 hours, 7 minutes, 38 seconds and 701 ms.</p>
<p>I then have a <code>datetime</code> object like the following: <code>datetime.datetime(1945, 1, 3, 11, 45, 0, 44000)</code></p>
<p>I would like to add these times (the first one is a delta, while the second is an absolute time reference) and get a new <code>datetime.datetime</code> object.</p>
<p>How can I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Once you have a <code>datetime</code> and a <code>timedelta</code>, adding them is as simple as using the <code>+</code> operator:</p>
<pre><code>&gt;&gt;&gt; dt = datetime.datetime(1945, 1, 3, 11, 45, 0, 44000)
&gt;&gt;&gt; td = datetime.timedelta(hours=0, minutes=7, seconds=38.701)
&gt;&gt;&gt; dt + td
datetime.datetime(1945, 1, 3, 11, 52, 38, 745000)
</code></pre>
<hr/>
<p>There is no built-in parser for <code>timedelta</code> objects akin to <code>strptime</code> for <code>datetime</code> objects.</p>
<p>You can sometimes fake it by actually parsing the string as a <code>datetime</code>, then extracting the fields to build a <code>timedelta</code>, but this is both hacky and complicated—and, for your simple format, you can write one trivially:</p>
<pre><code>def strpdelta(s):
    hr, min, sec = map(float, s.split(':'))
    return datetime.timedelta(hours=hr, minutes=min, seconds=sec)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="http://docs.python.org/3/library/datetime.html#datetime.timedelta" rel="nofollow">time delta</a>:</p>
<pre><code>&gt;&gt;&gt; import datetime, re
&gt;&gt;&gt; s = "0:07:38.701"
&gt;&gt;&gt; hours, minutes, seconds = [float(val) for val in s.split(':')]
&gt;&gt;&gt; delta = datetime.timedelta(hours=hours, minutes=minutes, seconds=seconds)
&gt;&gt;&gt; datetime.datetime(1945, 1, 3, 11, 45, 0, 44000) + delta
datetime.datetime(1945, 1, 3, 11, 52, 38, 745000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT:</strong> As pointed out in the comment, timedelta can handle float values. i.e. if <code>seconds=38.701</code>, it will convert it to <code>seconds</code> and <code>milliseconds</code></p>
<pre><code>from datetime import timedelta, datetime

dtime = datetime(1945, 1, 3, 11, 45, 0, 44000)
str = "0:07:38.701"

elems = str.split(':')
hr, min, sec= int(elems[0]), int(elems[1]), float(elems[2])

tdelta = timedelta(hours=hr, minutes=min, seconds=sec)

new_datetime = dtime + tdelta
</code></pre>
<p><strong>Version before edit:</strong></p>
<pre><code>from datetime import timedelta, datetime

dtime = datetime(1945, 1, 3, 11, 45, 0, 44000)
str = "0:07:38.701"

stuff = str.split(':')
elems = stuff[:-1] + stuff[2].split('.')
hr, min, sec, mls= int(elems[0]), int(elems[1]), int(elems[2], int(elems[3]))

tdelta = timedelta(hours=hr, minutes=min, seconds=sec, milliseconds=mls)

new_datetime = dtime + tdelta
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One more solution, and my favorite so far since it requires no manual parsing and uses existing functionality in <code>datetime</code> to parse dates in string format:</p>
<pre><code># Input times:
init_time       =  datetime.datetime(1945, 1, 3, 11, 45, 0, 44000)
time_to_add_str = '0:00:05.00'

# Adding them up:
time_to_add = datetime.strptime(time_to_add_str, '%H:%M:%S.%f') - datetime(1900,1,1)
final_time  = time_to_add  + init_time
</code></pre>
</div>
<span class="comment-copy">Thanks. Any way to convert the string to a <code>timedelta</code> in first place? (e.g. something similar to <code>datetime.strptime</code>)</span>
<span class="comment-copy">@Josh, as <i>abarnert</i> points out, there is no builtin parser for timedeltas, but if you know the format before hand, it should not be too complicated (see my updated answer).</span>
<span class="comment-copy">There's no need to parse out the milliseconds separately; <code>38.701</code> is a perfectly valid <code>seconds</code> argument. Also, you've left out the <code>hours</code>. Also, using a regex is overkill here; if you were using it to write something more robust than just <code>split(':')</code> that would be one thing, but here the added complexity is actually making it <i>less</i> robust…</span>
<span class="comment-copy">@abarnert, thanks for the hints, I updated my answer.</span>
<span class="comment-copy">@miku: The new version won't work, because <code>int('38.701')</code> is a <code>ValueError</code> (and, even if it weren't, it would obviously lose the millis part).</span>
<span class="comment-copy">You don't need to parse the milliseconds out; <code>timedelta</code> can handle float values. And the extra complexity let you to at least two bugs here: <code>elems[2]</code> is the unsplit seconds part, like <code>38.701</code>, which will raise a <code>ValueError</code> when you call <code>int</code> on it; <code>elems[3]</code> is the integral part of the seconds part, so you'll end up with <code>milliseconds=38</code> instead of <code>milliseconds=701</code>. You can fix that by using <code>elems[3]</code> and <code>elems[4]</code> for the last part, but I wouldn't exactly call that <i>obviously</i> correct; someone would have to read and think about the code to figure out that it works right.</span>
<span class="comment-copy">Your new version still doesn't work; <code>int(elems[2])</code> is still a <code>ValueError</code>. And if you fix this, it's exactly the same as the two answers that already exist.</span>
<span class="comment-copy">Thankyou for pointing out the 'seconds could be float part'. Also fixed the millisecond=38 in the previous answer.  Yes the answers are similar. When I started writing the answer, the first answer was not edited for string conversion and the second answer wasn't posted.</span>
<span class="comment-copy">You really think <code>[float(val) for val in s.split(':')]</code> is more complicated/brittle/whatever than <code>datetime.strptime(s, '%H:%M:%S.%f') - datetime(1900,1,1)</code>?</span>
<span class="comment-copy">Thanks @abarnert - I guess that I what I like about this approach is that it uses existing functionality to parse dates in string format (<code>strptime</code>), but you are right, it's a very close call.</span>
<span class="comment-copy">What I don't like about it is that it relies on knowing about the 1900-1-1-default rule, which is actually only really guaranteed for <code>strftime</code>, not <code>strptime</code>. But that's a pretty minor quibble; the only <i>real</i> downside to doing it this way is that it's not nicely extensible to days or beyond—and since you're not in any way implying that it is, or giving any indication that you want to do that, that isn't relevant here.</span>
