<div class="post-text" itemprop="text">
<p>I'm trying to take user input that is separated by a comma and create a list from the entered data. For example, the user inputs <code>1,2,3,4,5.6,7</code> and I build a list <code>[1,2,3,4,5.6,7]</code>. I also want to make sure that there will not be any letters, but allow spaces, single dots, and numbers. If the user inputs <code>1,2,3,4.4.3,a</code>, for example, it should  return a blank <code>[]</code> list. </p>
<p>So far I have created</p>
<pre><code>def is_numeric(s):
    if s == :
        print("True")
    else:
        print("False")

def main():
    s = input("Enter a set of numbers (integers or floats) separated by comman:")
    is_numeric(s)

main()
</code></pre>
<p>I'm stuck on how I can check if entered numbers would meet these requirements. </p>
<p>Thanks for any help!</p>
<p>By the way, this was a problem I received from a teacher who was giving out practice problems before a quiz but I cannot figure out and he will go over the problems the same day of the quiz which is really too late for me to learn it. This isn't for a grade.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simple way to do this is to walk the string character by character. But if you're teacher suggested splitting on dots, I think he wanted something like this pseudocode:</p>
<pre><code>def is_numeric(s):
    remove whitespace before and after the string
    split on the first '.'
    if and only if all of the split-out parts are all digits, return True
</code></pre>
<p>If you know the <code>strip</code>, <code>split</code>, <code>all</code>, and <code>isdigit</code> functions, this should be even shorter and more readable in Python than in pseudocode. The documentation for <a href="http://docs.python.org/3/library/functions.html" rel="nofollow">Built-In Functions</a> and <a href="http://docs.python.org/3/library/stdtypes.html#string-methods" rel="nofollow">String Methods</a> should fill in the gaps if you don't know everything.</p>
<p>Now, to see if the input as a whole is valid, you need to split on commas and check each part, so:</p>
<pre><code>parts = s.split(',')
if not all(is_numeric(part) for part in parts):
    result = []
else:
    result = [float(part) for part in parts]
</code></pre>
<p>If those comprehensions are beyond your knowledge, you can write the same thing more verbosely as:</p>
<pre><code>parts = s.split(',')
result = []
for part in parts:
    if not is_numeric(part):
        result = []
        break
    else:
        result.append(float(part))
</code></pre>
<hr/>
<p>Here's the entire thing:</p>
<pre><code>def is_numeric(s):
    s = s.strip()
    parts = s.split('.', 1)
    return all(part.isdigit() for part in parts)

def parse_input(line):
    parts = line.split(',')
    if not all(is_numeric(part) for part in parts):
        return []
    else:
        return [float(part) for part in parts]

while True:
    line = input("You will provide numbers. Provide! Provide! ")
    if not line:
        break
    values = parse_input(line)
    print("Reporting provided numbers:", values)
</code></pre>
<p>And here's a transcript:</p>
<pre><code>You will provide numbers. Provide! Provide! 1,2,3,4,5.6,7
Reporting provided numbers: [1.0, 2.0, 3.0, 4.0, 5.6, 7.0]
You will provide numbers. Provide! Provide! 1,2,3,4.4.3,a
Reporting provided numbers: []
You will provide numbers. Provide! Provide! 1, 2, 3, 4
Reporting provided numbers: [1.0, 2.0, 3.0, 4.0]
You will provide numbers. Provide! Provide! 1.2, 3.4.5
Reporting provided numbers: []
You will provide numbers. Provide! Provide!
</code></pre>
<p>It's worth testing out some of the expressions in the interactive interpreter to see what they do. And adding some <code>print</code> statements in the middle of the code to show you intermediate values, if you're not sure what they are. For example, if you don't know what gets fed to <code>is_numeric</code>, have it <code>print(s)</code>. If you want to know what <code>.split('.', 1)</code> returns for different strings, try it: <code>'1.2.3'.split('.', 1), '1.2'.split('.', 1), '1'.split('.', 1)</code>. And so on.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd solve this with regex. </p>
<pre><code># make sure the input is valid (probably a better way than sub) 
if input == ':)' or re.sub('^[\d\.,]+$', ':)', input) != ':)':
   return []

# get all the comma separated values and convert it to an array of floats
return [float(num) for num in re.findall('([\d\.]+),?', input)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First I'd normalize the input so I know what to expect. Spaces are slightly easier to deal with than commas, so separate everything by a space.</p>
<pre><code>inpt.replace(',', ' ')
</code></pre>
<p>Now input is something like <code>'2 3 4.5   6'</code> with some nonzero number of spaces between each value to be parsed. <code>split</code> can deal with that nicely.</p>
<pre><code>inlist = inpt.split()
</code></pre>
<p>Now we have a list, and we just need to know if we need to throw it away.</p>
<pre><code>if all([is_numeric(i) for i in inlist]):
  return [int(i, 10) if i.isdigit() else float(i) for i in inlist]
else:
  return []
</code></pre>
<p>So, what is <code>is_numeric</code>? It's a function that, given an element, determines if it is an <code>int</code> or a <code>float</code> or not. If it's not one of those, we toss it. mgilson suggested something like</p>
<pre><code>def is_numeric(i):
  try:
    float(i)
    return True
  except ValueError:
    pass
  return False
</code></pre>
<p>which would be great, but if you don't want to do try/except, you can still use the second argument to <code>split</code> your teacher suggested.</p>
<pre><code>def is_numeric(i):
  parts = i.split('.', 1)
  if len(parts) == 2:
    characteristic, mantissa = parts # I really just wanted an excuse to use these terms
    if '.' in mantissa:
      return False
    return True
  elif i.isdigit():
    return True
  return False
</code></pre>
</div>
<span class="comment-copy">Do you know about <code>try</code> and <code>except</code>?  Here I would <code>try</code> to convert the strings to <code>float</code> and then handle the error if it fails.</span>
<span class="comment-copy">unfortunately i have not learned about try or except... :( my teacher gave a hint that for multi dots you could use the split() method, ex 4.5.6</span>
<span class="comment-copy">@mgilson: But <code>float</code> isn't going to work on spaces or single dots.</span>
<span class="comment-copy">thats what i was thinking.... would utilizing ascii.digits and ascii.lowercase be of any benefit in this problem?</span>
<span class="comment-copy">@user2840144 Hint: How many arguments does <code>str.split</code> take?</span>
<span class="comment-copy">well the is_numeric is supposed to either return true or false when look for digits, comma, space, or dot in the string s. After that i should be converting the string to a list. i need to convert the string characters to ints assuming there are no dots, and to floats if and only if there is one . between two commas right?</span>
<span class="comment-copy">@user2840144: If you look at the "driver" code in the second half, it's already splitting on commas. So, you don't want <code>is_numeric</code> to check for digits, comma, space, or dot; you want it to check for digits, exactly zero or one dots, and extra spaces only before and after the numberâ€”in other words, something that's a single valid number.</span>
<span class="comment-copy">@user2840144: Meanwhile, if you get stuck translating the pseudocode to Python, I can write it for you, but see how far you can get first.</span>
<span class="comment-copy">for removing the whitespaces, i used this, s.replace(" ", ""), for splitting the first '.' i am unsure to do, and for the all of the split out parts, that would be where i use something like if i.isdigit(): return true, else false?</span>
<span class="comment-copy">@user2840144: <code>s.replace(" ", "")</code> will remove <i>all</i> spaces. Do you want <code>"5 . 6"</code> to be a valid number, or just things like <code>" 5.6"</code>? For the latter, see the <code>strip</code> method.</span>
<span class="comment-copy">Thanks for the submission, i havent learned about regex yet, but is this checking the entire string for invalid characters here? if re.sub('^[\d\.,]+$', ':)', input) != ':)':</span>
<span class="comment-copy">@user2840144 Yes. However, if the input is ':)' that's another story. Lets me update my answer to fix this.</span>
<span class="comment-copy">haha the mantissa part gave me a chuckle! so basically the try and except test if the number is indeed a float and if there is a value error it returns false?</span>
<span class="comment-copy">@user2840144 yes, open a terminal and try casting a few different strings to <code>float</code> to see what happens. You hopefully will also see why I'm careful to cast <i>some</i> values to <code>int</code>, not <code>float</code>.</span>
