<div class="post-text" itemprop="text">
<p>I have a set of data that looks like so:</p>
<pre><code>OutletCntrTemp|25degreesC|ok
InletTemp|17degreesC|ok
PCHTemp|46degreesC|ok
P0ThermMargin|-57degreesC|ok
P1ThermMargin|-59degreesC|ok
P0DIMMTemp|27degreesC|ok
P1DIMMTemp|27degreesC|ok
HSC0InputPower|60Watts|ok
HSC0InputVolt|12.46Volts|ok
CPU0Tjmax|90degreesC|ok
......
</code></pre>
<p>Now I want to loop through this data and create a list or a tuple in a function and return each row but name that tuple using the first part of the string:</p>
<pre><code>CPUTjmax = ('90degreesC','ok')
</code></pre>
<p>now i did some spliting up of the string via | but hit a wall when i tried to use <code>string[0] = (string[1],string[2])</code> to define the tuple.</p>
<p>Could anyone give me a pointer here please.</p>
<p>Ric</p>
</div>
<div class="post-text" itemprop="text">
<p>What you can do is, create a <code>dict</code>, and add them as key:value pair in it:</p>
<pre><code>&gt;&gt;&gt; d = dict()
&gt;&gt;&gt; 
&gt;&gt;&gt; s = 'CPU0Tjmax|90degreesC|ok'
&gt;&gt;&gt; li = s.split("|")
&gt;&gt;&gt; 
&gt;&gt;&gt; d[li[0]] = (li[1], li[2])
&gt;&gt;&gt; d
{'CPU0Tjmax': ('90degreesC', 'ok')}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You almost certainly don't want to create variables, use a <code>dict</code> instead:</p>
<pre><code>data = [
    'CPU0Tjmax|90degreesC|ok',
    'InletTemp|17degreesC|ok'
]
d = {el[0]: tuple(el[1:]) for el in (item.split('|') for item in data)}
# {'InletTemp': ('17degreesC', 'ok'), 'CPU0Tjmax': ('90degreesC', 'ok')}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answers are good. Here is one more way, similar to the answer using <code>locals()</code>. You just create an empty object, and fill its __dict__:</p>
<pre><code>class X(object):
    pass

Var = X()

for ...:
    Var.__dict__[string[0]] = (string[1], string[2])

#now you can refer to your vars as Var.whatever
if Var.InletTemp[1] != 'ok':
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use should definitely use a dictionary variable.</p>
<p>For completeness here a non-standard solution for creating new local variables:</p>
<pre><code>for line in open("data.dat"):
   e=line.split("|")
   locals()[e[0]] = ( e[1], e[2] )
</code></pre>
<p>Internally, the local variables are also a dictionary which you can access with <code>locals()</code>.
However, as <a href="http://docs.python.org/3/library/functions.html#locals" rel="nofollow">the documentation</a> says: </p>
<blockquote>
<p>The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter.</p>
</blockquote>
</div>
<span class="comment-copy">You can't dynamically create variables (well, you can, but you shouldn't). Why do you want to do this?</span>
<span class="comment-copy">Please read: <a href="http://docs.python.org/2/library/functions.html#locals" rel="nofollow noreferrer">docs.python.org/2/library/functions.html#locals</a></span>
<span class="comment-copy">@JonClements Thanks for your comment, I extended the answer.</span>
