<div class="post-text" itemprop="text">
<blockquote>
<p>I want to add two items at a time to a list comprehension. One item is constant. How can this be achieved using only one for loop inside of a list comprehension, and no additional functions. Answers that do not use any import will be favored.</p>
</blockquote>
<p>Take a look at at the following:</p>
<pre><code>&gt;&gt;&gt; mystring = 'ABCELKJSDLHFWEHSJDHFKHIUEHFSDF'
&gt;&gt;&gt; sum([['^', char] for char in mystring.lower()], [])
['^', 'a', '^', 'b', '^', 'c', '^', 'e', '^', 'l', '^', 'k', '^', 'j', '^', 's', '^', 'd', '^', 'l', '^', 'h', '^', 'f', '^', 'w', '^', 'e', '^', 'h', '^', 's', '^', 'j', '^', 'd', '^', 'h', '^', 'f', '^', 'k', '^', 'h', '^', 'i', '^', 'u', '^', 'e', '^', 'h', '^', 'f', '^', 's', '^', 'd', '^', 'f']
</code></pre>
<p>I am trying to make a list with the character <code>^</code> prepended before each letter in lower case. In this example, you need to use <code>sum</code> to flatten the list. However, my question is, if it is possible to make a flat list in the first place. The output above is the desired output.</p>
<p>As in, append something <em>constantly</em> before a variable that changes with each iteration of the <code>for</code> loop. One cannot use two <code>for</code> loops here, as that would be too simple, for example:</p>
<pre><code>mystring = 'ABCELKJSDLHFWEHSJDHFKHIUEHFSDF'
print [item for x in mystring.lower() for item in ['^', x]]
</code></pre>
<p>If one does something like this:</p>
<pre><code>&gt;&gt;&gt; mystring = 'ABCELKJSDLHFWEHSJDHFKHIUEHFSDF'
&gt;&gt;&gt; [['^', x] for x in mystring]
['^', 'a', '^', 'b', '^', 'c', '^', 'e', '^', 'l', '^', 'k', '^', 'j', '^', 's', '^', 'd', '^', 'l', '^', 'h', '^', 'f', '^', 'w', '^', 'e', '^', 'h', '^', 's', '^', 'j', '^', 'd', '^', 'h', '^', 'f', '^', 'k', '^', 'h', '^', 'i', '^', 'u', '^', 'e', '^', 'h', '^', 'f', '^', 's', '^', 'd', '^', 'f']
</code></pre>
<p>You get lists within lists. Thus, is there a way that you can append two items at a time in a list comprehension without have to use an addition for loop or an additional function like <code>sum</code>? I ask this, because its something quite simple, yet I can't find a way to do it. If one tries to do the following:</p>
<pre><code>&gt;&gt;&gt; ['^', x for x in mystring.lower()]
  File "&lt;console&gt;", line 1
    ['^', x for x in mystring.lower()]
              ^
SyntaxError: invalid syntax
</code></pre>
<p>The attempt gives a <code>SyntaxError</code>. So, is what I'm asking impossible to do in Python? Using <code>()</code> gives me a list of tuples.</p>
<p>I've also <em>tried</em> using the <code>splat</code>/<code>unpacking</code> operator:</p>
<pre><code>&gt;&gt;&gt; [*['^', x] for x in mystring.lower()]
  File "&lt;console&gt;", line 1
    [*['^', x] for x in mystring.lower()]
     ^
SyntaxError: invalid syntax
</code></pre>
<p>But as above, this too is a syntax error. Sorry for this late edit, but I <em>have</em> tried the following:</p>
<pre><code>import itertools
mystring = "HELLOWORLD"
print(list(itertools.chain.from_iterable(('^', x) for x in mystring.lower())))
</code></pre>
<p>But the above still required an import.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can start with this:</p>
<pre><code>print list( '^'.join(mystring.lower()) )
</code></pre>
<p>which gives:</p>
<pre><code>['a', '^', 'b', '^', 'c', '^', ...]
</code></pre>
<p>So this would give the desired output:</p>
<pre><code>l = list( '^'.join(mystring.lower()) )
l.insert(0, '^')
print l
</code></pre>
<p>And another way:</p>
<pre><code>print [ y for x in zip(['^'] * len(mystring), mystring.lower()) for y in x ]
</code></pre>
<p>which gives:</p>
<pre><code>['^', 'a', '^', 'b', '^', 'c', ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.chain.from_iterable</code>, this is equivalent to that nested list comprehension version but slightly efficient(for large lists):</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; mystring = 'ABCELKJSDLHFWEHSJDHFKHIUEHFSDF'
&gt;&gt;&gt; list(chain.from_iterable([['^', x] for x in mystring]))
['^', 'A', '^', 'B', '^', 'C', '^', 'E', '^', 'L', '^', 'K', '^', 'J', '^', 'S', '^', 'D', '^', 'L', '^', 'H', '^', 'F', '^', 'W', '^', 'E', '^', 'H', '^', 'S', '^', 'J', '^', 'D', '^', 'H', '^', 'F', '^', 'K', '^', 'H', '^', 'I', '^', 'U', '^', 'E', '^', 'H', '^', 'F', '^', 'S', '^', 'D', '^', 'F']
</code></pre>
<p>In Python 3.3+ you can also use <a href="http://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow"><code>yield from</code></a> in a generator function:</p>
<pre><code>&gt;&gt;&gt; mystring = 'ABCELKJSDLHFWEHSJDHFKHIUEHFSDF'
&gt;&gt;&gt; def solve(strs):
...     for x in strs:
...         yield from ['^', x]
...         
&gt;&gt;&gt; list(solve(mystring))
['^', 'A', '^', 'B', '^', 'C', '^', 'E', '^', 'L', '^', 'K', '^', 'J', '^', 'S', '^', 'D', '^', 'L', '^', 'H', '^', 'F', '^', 'W', '^', 'E', '^', 'H', '^', 'S', '^', 'J', '^', 'D', '^', 'H', '^', 'F', '^', 'K', '^', 'H', '^', 'I', '^', 'U', '^', 'E', '^', 'H', '^', 'F', '^', 'S', '^', 'D', '^', 'F']
</code></pre>
</div>
<span class="comment-copy">What is your expected output? Do you want <code>^</code> as separate list element, before each character, or just appended to the character.</span>
<span class="comment-copy">Under the first code sample, the the output is given. I think its fairly clear.</span>
<span class="comment-copy">Same question here - <a href="http://stackoverflow.com/questions/11868964/python-list-comprehension-returning-two-or-more-items-for-each-item" title="python list comprehension returning two or more items for each item">stackoverflow.com/questions/11868964/â€¦</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/11868964/python-list-comprehension-returning-two-or-more-items-for-each-item">Python (List Comprehension): Returning two (or more) items for each item</a></span>
<span class="comment-copy">This <i>is</i> an interesting answer, but <code>^</code> has to come before the first letter.</span>
<span class="comment-copy">The <code>insert</code> does what you expect</span>
<span class="comment-copy">@GamesBrainiac, added a pure comprehension solution</span>
<span class="comment-copy">@perreal Uses 2 <code>for</code> loops. And this is clearer <code>[item for x in mystring.lower() for item in ['^', x]]</code></span>
<span class="comment-copy">if <code>^</code> has to come before the first letter, <code>list('^'+'^'.join(mystring.lower()))</code> works and can be equivalently written <code>[x for x in '^' + '^'.join(mystring.lower())]</code></span>
<span class="comment-copy">Is it possible without <code>itertools</code>, because I've tried this as well.</span>
<span class="comment-copy">@GamesBrainiac <code>sum()</code> is highly inefficient for this(<a href="http://docs.python.org/2/library/functions.html#sum" rel="nofollow noreferrer">also not recommended for this purpose</a>), and <code>itertools.chain</code> will surely beat nested LC solution for larger lists.</span>
<span class="comment-copy">I understand this, but is there no way to add one constant every time to a list comprehension? This feels like it <i>should</i> be there. You are using imports, but its seems strange that something <i>this</i> basic is not available. I understand that <code>sum</code> is inefficient, but that is besides the point, I just wanted to show what I've tried. Is there no way to use the <code>splat</code> operator in a creative way to get what I want?</span>
<span class="comment-copy">@GamesBrainiac No splat operator will not work here.</span>
<span class="comment-copy">So, I guess this can't be done without imports or nested for loops?</span>
