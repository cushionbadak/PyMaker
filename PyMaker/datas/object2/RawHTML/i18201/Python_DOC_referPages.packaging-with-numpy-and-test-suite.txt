<div class="post-text" itemprop="text">
<h1>Introduction</h1>
<p>Disclaimer: I'm very new to python packaging with distutils. So far I've just stashed everything into modules, and packages manually and developed on top of that. I never wrote a <code>setup.py</code> file before.</p>
<p>I have a Fortran module that I want to use in my python code with numpy. I figured the best way to do that would be f2py, since it is included in numpy. To automate the build process I want to use distutils and the corresponding numpy enhancement, which includes convenience functions for f2py wrappers.</p>
<p>I do not understand how I should organize my files, and how to include my test suite.</p>
<p>What I want is the possibility to use <code>./setup.py</code> for building, installing, and testing, and developing.</p>
<p>My directory structure looks as follows:</p>
<pre><code>volterra
├── setup.py
└── volterra
    ├── __init__.py
    ├── integral.f90
    ├── test
    │   ├── __init__.py
    │   └── test_volterra.py
    └── volterra.f90
</code></pre>
<p>And the <code>setup.py</code> file contains this:</p>
<pre><code>def configuration(parent_package='', top_path=None):
    from numpy.distutils.misc_util import Configuration
    config = Configuration('volterra', parent_package, top_path)
    config.add_extension('_volterra',
                         sources=['volterra/integral.f90', 'volterra/volterra.f90'])
    return config


if __name__ == '__main__':
    from numpy.distutils.core import setup
    setup(**configuration(top_path='').todict())
</code></pre>
<p>After running <code>./setup.py build</code> I get.</p>
<pre><code>build/lib.linux-x86_64-2.7/
└── volterra
    └── _volterra.so
</code></pre>
<p>Which includes neither the <code>__init__.py</code> file, nor the tests.</p>
<h1>Questions</h1>
<ul>
<li>Is it really necessary to add the path to every single source file of the extension? (I.e. <code>volterra/integral.f90</code>) Can't I give a parameter which says, look for stuff in <code>volterra/</code>? The <code>top_path</code>, and <code>package_dir</code> parameters didn't do the trick.</li>
<li>Currently, the <code>__init__.py</code> file is not included in the build. Why is that?</li>
<li>How can I run my tests in this setup?</li>
<li>What's the best workflow for doing development in such an environment? I don't want to <em>install</em> my package for every single change I do. How do you do development in the source directory when you need to compile some extension modules?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Here is a setup.py that works for me:</p>
<pre><code># pkg - A fancy software package
# Copyright (C) 2013  author (email)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/gpl.html.
"""pkg: a software suite for 

Hey look at me I'm a long description
But how long am I?

"""

from __future__ import division, print_function

#ideas for setup/f2py came from:
#    -numpy setup.py: https://github.com/numpy/numpy/blob/master/setup.py 2013-11-07
#    -winpython setup.py: http://code.google.com/p/winpython/source/browse/setup.py 2013-11-07
#    -needing to use 
#        import setuptools; from numpy.distutils.core import setup, Extension: 
#        http://comments.gmane.org/gmane.comp.python.f2py.user/707 2013-11-07
#    -wrapping FORTRAN code with f2py: http://www2-pcmdi.llnl.gov/cdat/tutorials/f2py-wrapping-fortran-code 2013-11-07
#    -numpy disutils: http://docs.scipy.org/doc/numpy/reference/distutils.html 2013-11-07
#    -manifest files in disutils: 
#        'distutils doesn't properly update MANIFEST. when the contents of directories change.'
#        https://github.com/numpy/numpy/blob/master/setup.py         
#    -if things are not woring try deleting build, sdist, egg directories  and try again: 
#        https://stackoverflow.com/a/9982133/2530083 2013-11-07
#    -getting fortran extensions to be installed in their appropriate sub package
#        i.e. "my_ext = Extension(name = 'my_pack._fortran', sources = ['my_pack/code.f90'])" 
#        Note that sources is a list even if one file: 
#        http://numpy-discussion.10968.n7.nabble.com/f2py-and-setup-py-how-can-I-specify-where-the-so-file-goes-tp34490p34497.html 2013-11-07
#    -install fortran source files into their appropriate sub-package 
#        i.e. "package_data={'': ['*.f95','*.f90']}# Note it's a dict and list":
#        https://stackoverflow.com/a/19373744/2530083 2013-11-07
#    -Chapter 9 Fortran Programming with NumPy Arrays: 
#        Langtangen, Hans Petter. 2013. Python Scripting for Computational Science. 3rd edition. Springer.
#    -Hitchhikers guide to packaging :
#        http://guide.python-distribute.org/
#    -Python Packaging: Hate, hate, hate everywhere : 
#        http://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere/
#    -How To Package Your Python Code: 
#        http://www.scotttorborg.com/python-packaging/
#    -install testing requirements: 
#        https://stackoverflow.com/a/7747140/2530083 2013-11-07

import setuptools
from numpy.distutils.core import setup, Extension
import os
import os.path as osp

def readme(filename='README.rst'):
    with open('README.rst') as f:
        text=f.read()
    f.close()
    return text

def get_package_data(name, extlist):
    """Return data files for package *name* with extensions in *extlist*"""
    #modified slightly from taken from http://code.google.com/p/winpython/source/browse/setup.py 2013-11-7
    flist = []
    # Workaround to replace os.path.relpath (not available until Python 2.6):
    offset = len(name)+len(os.pathsep)
    for dirpath, _dirnames, filenames in os.walk(name):
        for fname in filenames:            
            if not fname.startswith('.') and osp.splitext(fname)[1] in extlist:
#                flist.append(osp.join(dirpath, fname[offset:]))
                flist.append(osp.join(dirpath, fname))
    return flist

DOCLINES = __doc__.split("\n")
CLASSIFIERS = """\
Development Status :: 1 - Planning
License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)
Programming Language :: Python :: 2.7
Topic :: Scientific/Engineering
"""

NAME = 'pkg'
MAINTAINER = "me"
MAINTAINER_EMAIL = "me@me.com"
DESCRIPTION = DOCLINES[0]
LONG_DESCRIPTION = "\n".join(DOCLINES[2:])#readme('readme.rst')
URL = "http://meeeee.mmemem"
DOWNLOAD_URL = "https://github.com/rtrwalker/geotecha.git"
LICENSE = 'GNU General Public License v3 or later (GPLv3+)'
CLASSIFIERS = [_f for _f in CLASSIFIERS.split('\n') if _f]
KEYWORDS=''
AUTHOR = "me"
AUTHOR_EMAIL = "me.com"
PLATFORMS = ["Windows"]#, "Linux", "Solaris", "Mac OS-X", "Unix"]
MAJOR = 0
MINOR = 1
MICRO = 0
ISRELEASED = False
VERSION = '%d.%d.%d' % (MAJOR, MINOR, MICRO)

INSTALL_REQUIRES=[]
ZIP_SAFE=False
TEST_SUITE='nose.collector'
TESTS_REQUIRE=['nose']

DATA_FILES = [(NAME, ['LICENSE.txt','README.rst'])]
PACKAGES=setuptools.find_packages()
PACKAGES.remove('tools')

PACKAGE_DATA={'': ['*.f95','*f90']}               
ext_files = get_package_data(NAME,['.f90', '.f95','.F90', '.F95'])
ext_module_names = ['.'.join(osp.splitext(v)[0].split(osp.sep)) for v in ext_files]
EXT_MODULES = [Extension(name=x,sources=[y]) for x, y in zip(ext_module_names, ext_files)]      


setup(
    name=NAME,
    version=VERSION,
    maintainer=MAINTAINER,
    maintainer_email=MAINTAINER_EMAIL,
    description=DESCRIPTION,
    long_description=LONG_DESCRIPTION,
    url=URL,
    download_url=DOWNLOAD_URL,
    license=LICENSE,
    classifiers=CLASSIFIERS,
    author=AUTHOR,
    author_email=AUTHOR_EMAIL,
    platforms=PLATFORMS,
    packages=PACKAGES,
    data_files=DATA_FILES,
    install_requires=INSTALL_REQUIRES,
    zip_safe=ZIP_SAFE,
    test_suite=TEST_SUITE,
    tests_require=TESTS_REQUIRE,
    package_data=PACKAGE_DATA,    
    ext_modules=EXT_MODULES,
    )
</code></pre>
<p>To install, at the command line I use:</p>
<pre><code>python setup.py install
python setup.py clean --all
</code></pre>
<p>The only issue I seem to have is a minor one.  when I look in site-packages for my package it is installed inside the egg folder <code>C:\Python27\Lib\site-packages\pkg-0.1.0-py2.7-win32.egg\pkg</code>.  Most other packages I see there have a <code>C:\Python27\Lib\site-packages\pkg</code> folder separate to the egg folder.  Does anyone know how to get that separation?</p>
<p>As for testing, after installing,  I type the following at the command line:</p>
<pre><code>nosetests package_name -v
</code></pre>
<p>Try investigating <code>python setup.py develop</code> (<a href="https://stackoverflow.com/a/19048754/2530083">Python setup.py develop vs install</a>) for not having to install the package after every change.</p>
<p>As I commented in the code I found the following useful:</p>
<ul>
<li>numpy setup.py: <a href="https://github.com/numpy/numpy/blob/master/setup.py" rel="nofollow noreferrer">https://github.com/numpy/numpy/blob/master/setup.py</a> 2013-11-07</li>
<li>winpython setup.py: <a href="http://code.google.com/p/winpython/source/browse/setup.py" rel="nofollow noreferrer">http://code.google.com/p/winpython/source/browse/setup.py</a> 2013-11-07</li>
<li>needing to use 
    import setuptools; from numpy.distutils.core import setup, Extension: 
    <a href="http://comments.gmane.org/gmane.comp.python.f2py.user/707" rel="nofollow noreferrer">http://comments.gmane.org/gmane.comp.python.f2py.user/707</a> 2013-11-07</li>
<li>wrapping FORTRAN code with f2py: <a href="http://www2-pcmdi.llnl.gov/cdat/tutorials/f2py-wrapping-fortran-code" rel="nofollow noreferrer">http://www2-pcmdi.llnl.gov/cdat/tutorials/f2py-wrapping-fortran-code</a> 2013-11-07</li>
<li>numpy disutils: <a href="http://docs.scipy.org/doc/numpy/reference/distutils.html" rel="nofollow noreferrer">http://docs.scipy.org/doc/numpy/reference/distutils.html</a> 2013-11-07</li>
<li>manifest files in disutils: 
    'distutils doesn't properly update MANIFEST. when the contents of directories change.'
    <a href="https://github.com/numpy/numpy/blob/master/setup.py" rel="nofollow noreferrer">https://github.com/numpy/numpy/blob/master/setup.py</a> </li>
<li>if things are not woring try deleting build, sdist, egg directories  and try again: 
    <a href="https://stackoverflow.com/a/9982133/2530083">https://stackoverflow.com/a/9982133/2530083</a> 2013-11-07</li>
<li>getting fortran extensions to be installed in their appropriate sub package
    i.e. "my_ext = Extension(name = 'my_pack._fortran', sources = ['my_pack/code.f90'])" 
    Note that sources is a list even if one file: 
    <a href="http://numpy-discussion.10968.n7.nabble.com/f2py-and-setup-py-how-can-I-specify-where-the-so-file-goes-tp34490p34497.html" rel="nofollow noreferrer">http://numpy-discussion.10968.n7.nabble.com/f2py-and-setup-py-how-can-I-specify-where-the-so-file-goes-tp34490p34497.html</a> 2013-11-07</li>
<li>install fortran source files into their appropriate sub-package 
    i.e. "package_data={'': ['<em>.f95','</em>.f90']}# Note it's a dict and list":
    <a href="https://stackoverflow.com/a/19373744/2530083">https://stackoverflow.com/a/19373744/2530083</a> 2013-11-07</li>
<li>Chapter 9 Fortran Programming with NumPy Arrays: 
    Langtangen, Hans Petter. 2013. Python Scripting for Computational Science. 3rd edition. Springer.</li>
<li>Hitchhikers guide to packaging :
    <a href="http://guide.python-distribute.org/" rel="nofollow noreferrer">http://guide.python-distribute.org/</a></li>
<li>Python Packaging: Hate, hate, hate everywhere : 
    <a href="http://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere/" rel="nofollow noreferrer">http://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere/</a></li>
<li>How To Package Your Python Code: 
    <a href="http://www.scotttorborg.com/python-packaging/" rel="nofollow noreferrer">http://www.scotttorborg.com/python-packaging/</a></li>
<li>install testing requirements: 
    <a href="https://stackoverflow.com/a/7747140/2530083">https://stackoverflow.com/a/7747140/2530083</a> 2013-11-07</li>
<li>'python setup.py develop' : 
    <a href="https://stackoverflow.com/a/19048754/2530083">https://stackoverflow.com/a/19048754/2530083</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Here is setup.py from a project I made. I have found figuring out setup.py / packaging to be frustrating with no solid answers and definitely not pythonic in the sense of having one and only one obvious way to do something. Hopefully this will help a little.</p>
<p>The points you may find useful are:</p>
<ul>
<li><code>find_packages</code> which removes the drudgery of including lots of files or messing around with generating manifest.</li>
<li><code>package_data</code> which allows you to easily specify non .py files to be included</li>
<li><code>install_requires</code> / <code>tests_require</code></li>
</ul>
<p>You'll need to find the source for distribute_setup.py if you don't have it already.</p>
<blockquote>
<ul>
<li>Is it really necessary to add the path to every single source file of
  the extension? (I.e. volterra/integral.f90) Can't I give a parameter
  which says, look for stuff in volterra/? The top_path, and package_dir
  parameters didn't do the trick.</li>
<li>Currently, the <strong>init</strong>.py file is not
  included in the build. Why is that?</li>
</ul>
</blockquote>
<p>Hopefully <code>find_packages()</code> will solve both of those. I don't have much experience packaging but I haven't had to go back to manual inclusion yet.</p>
<blockquote>
<ul>
<li>How can I run my tests in this
  setup?</li>
</ul>
</blockquote>
<p>I think this is probably a different question with many answers depending on how you are doing tests. Maybe you can ask it separately?</p>
<p>As a side note, I am under the impression that the standard is to put your tests directory at the top level. I.e. <code>volterra/volterra</code> and <code>volterra/tests</code>.</p>
<blockquote>
<ul>
<li>What's the best workflow for doing development in such an
  environment? I don't want to install my package for every single
  change I do. How do you do development in the source directory when
  you need to compile some extension modules?</li>
</ul>
</blockquote>
<p>This might be worth another question as well. I don't see why you would need to install your package for every single change. If you are uploading the package, just don't install it on your dev system (except to test installation) and work directly from your development copy. Maybe I'm missing something though since I don't work with compiled extensions.</p>
<hr/>
<p>Here is the example </p>
<pre><code>try:
    from setuptools import setup, find_packages
except ImportError:
    from distribute_setup import use_setuptools
    use_setuptools()
    from setuptools import setup, find_packages


setup(
    # ... other stuff
    py_modules=['distribute_setup'],
    packages=find_packages(),
    package_data={'': ['*.png']},  # for me to include anything with png
    install_requires=['numpy', 'treenode', 'investigators'],
    tests_require=['mock', 'numpy', 'treenode', 'investigators'],
)
</code></pre>
</div>
<span class="comment-copy">To include the fortran files you can use a MANIFEST.in file (<a href="http://docs.python.org/3/distutils/sourcedist.html#manifest" rel="nofollow noreferrer">docs.python.org/3/distutils/sourcedist.html#manifest</a>) containing something like "include *.f90"</span>
<span class="comment-copy">But, especially the <code>__init__.py</code> file is part of the package and should be included automatically without me having to specify this manually in a manifest, right? Otherwise what's the point of automatic manifest generation if it doesn't even include the package?</span>
<span class="comment-copy">I believe you do need to include every single source file. I'll try to confirm tonight from home (I used to play with NumPy and F2Py at a previous job.)</span>
<span class="comment-copy">I take it back, I don't think disutils uses manifest.  From numpy.setup.py <code># BEFORE importing distutils, remove MANIFEST. distutils doesn't properly update it when the contents of directories change.</code>.</span>
<span class="comment-copy">Thanks for the very detailed answer. I adapted it and it works for my use-case. I moved away from f2py and was able to rewrite the thing in Cython instead. For the cython setup I used <a href="http://stackoverflow.com/a/13602504/841562">this</a> answer.</span>
<span class="comment-copy">Thanks for your answer. I went for rtrwalker's solution because it is more detailed. I will consider posting some of the sub-questions as new individual questions, as you suggested, once I find the time.</span>
