<div class="post-text" itemprop="text">
<p>I expected <code>bool(1)</code> to equate to True using Python - it does - then I expected other integers to error when converted to <code>bool</code> but that doesn't seem to be the case:</p>
<pre><code>&gt;&gt;&gt; x=23 #&lt;-- replace with any integer
&gt;&gt;&gt; bool(x)
True
</code></pre>
<p>What is happening? Am I misunderstanding <code>bool(x)</code> - does this not convert x to a <code>Boolean</code> data type?</p>
<hr/>
<p>A lot of comments about why I find this counter-intuitive. If I write the above like the below then, on first sight with no knowledge of the language, it would seem counter-intuitive:</p>
<pre><code>&gt;&gt;&gt;True == bool(23)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="http://docs.python.org/2/library/stdtypes.html#truth-value-testing">5.1 Truth Value Testing</a>:</p>
<blockquote>
<p>The following values are considered false:</p>
<ul>
<li><code>None</code></li>
<li><code>False</code></li>
<li>zero of any numeric type, for example, <code>0</code>, <code>0L</code>, <code>0.0</code>, <code>0j</code>.</li>
<li>any empty sequence, for example, <code>''</code>, <code>()</code>, <code>[]</code>.</li>
<li>any empty mapping, for example, <code>{}</code>.</li>
<li>instances of user-defined classes, if the class defines a <code>__nonzero__()</code> or <code>__len__()</code> method, when that method returns the integer <code>zero</code> or <code>bool</code> value <code>False</code>.</li>
</ul>
<p><strong>All other values</strong> are considered <strong>true</strong> â€” so objects of many types are
  always true.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>bool</code>'s purpose is not to convert a value to the bool data type, per se. Rather, it returns whether the value is truthy, i.e. it behaves in the same manner that this function does:</p>
<pre><code>def bool_mimic(val):
    if val:
        return True
    else:
        return False
</code></pre>
<p>From <a href="http://docs.python.org/2/library/functions.html#bool" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<blockquote>
<p>bool([x])</p>
<p>Convert a value to a Boolean, using the standard truth testing procedure [see <a href="https://stackoverflow.com/a/19256012/15055">Rohit</a>'s answer]. If x is false or omitted, this returns <code>False</code>; otherwise it returns <code>True</code>. <code>bool</code> is also a class, which is a subclass of <code>int</code>. Class <code>bool</code> cannot be subclassed further. Its only instances are <code>False</code> and <code>True</code>.</p>
</blockquote>
</blockquote>
<p>In the case of ints, the only non-truthy integer is <code>0</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>bool(x)</code> converts its argument to <code>Bool</code> by using the standard truth testing procedure. Anything that would return true on an <code>if</code> test, for example, will return <code>True</code> when passed as the argument to <code>bool</code>.</p>
<p>Check <a href="http://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="nofollow">Truth Value Testing</a> to see which values are treated as <code>True</code> or <code>False</code> in Python</p>
</div>
<div class="post-text" itemprop="text">
<p>As other posters have mentioned, its giving true on any non-zero integer. </p>
<p>Its kind of similar to other things in python, like mentioned here:</p>
<p><a href="https://stackoverflow.com/questions/16739555/python-if-not-syntax">Python 'If not' syntax</a></p>
<p>(Rohit quotes a good paragraph about truth testing)</p>
</div>
<span class="comment-copy"><code>bool(-1)</code> is <code>True</code>. If you're talking about integers, only <code>bool(0)</code> is <code>False</code>.</span>
<span class="comment-copy">You can also check it here for a bit more info: <a href="http://docs.python.org/3/library/functions.html#bool" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#bool</a></span>
<span class="comment-copy">Why would you expect other integer values to be non-convertible to a bool?</span>
<span class="comment-copy">You shouldn't assume that <code>True</code> has any particular non-zero value; it's an implementation detail that it has any integer value at all, let alone 1 specifically.</span>
<span class="comment-copy">If you know that <code>bool(23)</code> is <code>True</code>, why would you not expect <code>True == bool(23)</code>?</span>
<span class="comment-copy">+1 ok - I like this. At first glance to me it seems crazy ...just 0 amongst the integers that is False with every other being True. Now I see the answer though it seems ok - why should just 0==False, 1==True and all others be some sort of error: it's just a decision that the language designer makes.</span>
<span class="comment-copy">@whytheq I wouldn't say it's a language specific thing. It's pretty common in programming world to denote <code>0</code> as <code>falsy</code>, and everything else as <code>truthy</code>. Things become easy to handle with this. For the reverse case though, <code>True</code> are always converted to <code>1</code>, and <code>False</code> to <code>0</code>. Some language however don't have such mapping from numeric values to boolean values, like <code>Java</code>.</span>
<span class="comment-copy">@RohitJain There are languages that don't follow this though. In Ruby, <code>0</code> is not falsy. Only <code>false</code> and <code>nil</code> are treated as <code>false</code>.</span>
<span class="comment-copy">@Cezar Yeah that's what I said in my last line. Same is true with <code>Java</code>. No mapping from numerical value to boolean value.</span>
<span class="comment-copy">is " [see Rohit's answer]" in the docs?</span>
<span class="comment-copy">@Nirk: no, but it's relevant and it's a common convention to mark text that isn't in the original quote with square brackets. Hardly seems worth a downvote if that was you..</span>
<span class="comment-copy">in retrospect a downvote probably wasn't warranted.  un-downvoted</span>
<span class="comment-copy">@Nirk: thankee sir</span>
<span class="comment-copy">+1 so more like a test of existence: although 0 exists. This doesn't exist = ()</span>
