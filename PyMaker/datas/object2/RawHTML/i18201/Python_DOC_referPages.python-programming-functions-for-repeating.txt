<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/19257895/simple-function-in-python">Simple function in python</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<pre><code>def main() :
    n = 5
    def repeat(string, n, delim) :

        name = "string" + "delim"
    nametwo = name * n
    print(nametwo)
</code></pre>
<p>I need to write a function <code>def repeat(string, n, delim)</code> which returns the <code>string "string"</code>repeated n times, separated by the string deli. exampleL <code>repeat("ho", 3, ", ") "ho, ho, ho"</code>Could someone give me tips how i should go along of writing this? </p>
</div>
<div class="post-text" itemprop="text">
<p>Look at this:</p>
<pre><code>&gt;&gt;&gt; ", ".join("ho" for _ in range(3))
'ho, ho, ho'
&gt;&gt;&gt; def repeat(string, n, delim):
...     return delim.join(string for _ in range(n))
...
&gt;&gt;&gt; repeat("ho", 3, ", ")
'ho, ho, ho'
&gt;&gt;&gt;
</code></pre>
<p>Mainly, this takes advantage of the <a href="http://docs.python.org/2/library/stdtypes.html#str.join" rel="nofollow"><code>join</code></a> method of a string and the <a href="http://docs.python.org/3.2/library/functions.html#range" rel="nofollow"><code>range</code></a> built-in.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're asking for already exists: <a href="http://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join</code></a>. <code>join</code> is only doing the hard part; we still need something for the easy part… but that's the easy part.</p>
<p>Also, as others have pointed out, you can use the <code>*</code> operator on strings to get you most of the way there. But, despite having nearly written that yourself, I get the feeling you don't understand why that's most of the way there.</p>
<p>You can even combine the two: <code>delim.join([string] * n)</code>. (Here, I'm repeating a <em>list</em> rather than the string itself, because otherwise I'd just get one big string <code>"spamspamspamspamspam"</code> instead of five separate <code>"spam"</code>s to <code>join</code> up.)</p>
<hr/>
<p>But, I'm going to assume this is a homework assignment or a self-teaching attempt, and you want to know how to write it yourself from scratch.</p>
<p>Normally, when you want to repeat something, you want a loop.</p>
<p>If you want to repeat something for each element in the list <code>spam</code>, you write the loop <code>for element in spam:</code>.</p>
<p>But what if you want to repeat it 5 times? There's no "each element in the number 5". You need for find something that has 5 elements. And <a href="http://docs.python.org/3/library/functions.html#range" rel="nofollow"><code>range(5)</code></a> is perfect for that. So:</p>
<pre><code>def repeat(string, n, delim):
    for i in range(n):
        # something
</code></pre>
<p>Next, you already know how to concatenate strings, with the <code>+</code> operator. So, let's start with an empty string, and concatenate onto the end of it:</p>
<pre><code>def repeat(string, n, delim):
    result = ""
    for i in range(n):
        result = result + string + delim
    return result
</code></pre>
<hr/>
<p>But this has a problem:</p>
<pre><code>&gt;&gt;&gt; repeat("spam", 5, ", ")
'spam, spam, spam, spam, spam, '
</code></pre>
<p>There's just the right amount of spam, but too many commas. </p>
<p>If you go back to the <code>*</code> solution, you'll see that this is the same thing as <code>(string + delim) * n</code>, we just got there the long way. Either way, you get the same problem.</p>
<hr/>
<p>How do you avoid that?</p>
<p>Here you have to get a bit tricky. You can treat the last value special, or the first one. Or you can look at <code>result</code> so far to see if you're at the start. Or you can just let it add the extra delimiter and then lop it off at the end. I'll show you one of those options, but you should try to write another one yourself. (Looking at <code>result</code> is probably the easiest, and the cleanest, once you figure out how to adjust the algorithm to make it possible.)</p>
<pre><code>def repeat(string, n, delim):
    result = ""
    for i in range(n):
        result = result + string + delim
    return result[:-len(delim)]
</code></pre>
<p>The way I lopped off the extra delimiter at the end was by using slicing, with a negative index. You probably haven't learned that yet, which is why you should write a solution for yourself. (Plus, this is probably the hackiest of the solutions.)</p>
<p>Going all the way back to the top, if you play around with <code>join</code>, you'll see that it solves this problem for you. It's obviously not using magic, so you might think about looking at how it's implemented. Unfortunately, it's probably a big mess of C code somewhere in <a href="http://hg.python.org/cpython/file/263001204b96/Objects/unicodeobject.c" rel="nofollow">this</a> file, not nice clear Python, so you probably wouldn't learn much.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're so close..</p>
<pre><code>def repeat(string, n, delim):
      name = string + delim
      nametwo = name*n
      print(nametwo)
</code></pre>
<p>You don't need the quotes there. With the quotes, the value of <code>name</code> will be "stringdelim", instead of the values of "string" and "delim".</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; def repeat(s, n, d):
...     return d.join([s]*n)
... 
&gt;&gt;&gt; repeat("ho", 3, ", ")
'ho, ho, ho'
</code></pre>
<p>You can avoid the temporary list (<code>n</code> might be very large) by using <code>itertools.repeat</code></p>
<pre><code>&gt;&gt;&gt; import itertools as it
&gt;&gt;&gt; def repeat(s, n, d):
...     return d.join(it.repeat(s, n))
... 
&gt;&gt;&gt; repeat("ho", 3, ", ")
'ho, ho, ho'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a recursive version</p>
<pre><code>def repeat(s, n, d):
    if n == 0:
        return ""
    if n == 1:
        return s
    return repeat(s, n/2, d) + d + repeat(s, n - n/2, d)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def repeat(string, n, delim):
    print((string + delim)*(n-1) + string*(n&gt;0))

&gt;&gt;&gt; repeat('ho', 5, ", ")
ho, ho, ho, ho, ho
</code></pre>
</div>
<span class="comment-copy">what's your current attempt?</span>
<span class="comment-copy">Presuming that the line <code>nametwo = name * n</code> is intended to be part of the function <code>repeat()</code>, this almost does what you want - the only thing left to do is to remove the last <code>delim</code> from the string before returning it - look up "string slicing" to do that.</span>
<span class="comment-copy">also <code>("ho,"*5)[:-1]</code></span>
<span class="comment-copy">@FooBarUser: <code>[:-1]</code> isn't very useful if the delimiter is more than one character, as it is in every example on this page…</span>
<span class="comment-copy">I haven't quite learned the join term yet, along with xrange.   if i used it without the terms would it look something like this?  def main() :     n = input("enter amount of repeats: ") ba = "ho" ca = ", " def repeat(ba, n, ca) :      return (sorry for the layout, i haven't quite learned how to set it as a code in a comment)</span>
<span class="comment-copy">@iCodez: How many times have you written <code>dir + '/' + file</code> just this once because it's not worth importing <code>os</code> for something this simple, and then it grows into a real program and suddenly you have Windows users with all kinds of bugs that make no sense and the next thing you know Posh Spice has been elected President of the US? OK, probably not too many, in fact, probably 0, but still, use the batteries when they help.</span>
<span class="comment-copy">@iCodez, that's really not a good reason to not use itertools. Have you measured how long it takes to import? Or do you mean it's extra typing?</span>
<span class="comment-copy">i really appreciate you taking the time to help me, i have one thing though that I'm a little confused on, i understand the steps of your code, but how do i go along of testing it like you did with your spam example? when i switch the value of n, and run it in my terminal i get no results.</span>
<span class="comment-copy">@Brandon: I started an interactive Python session, then typed the lines of the <code>repeat</code> definition, then typed <code>repeat("spam", 5, ", ")</code>, and it gave me the output. The interactive session always shows you the value of each thing you type, unless the value is <code>None</code> (or you type a statement, which has no value). If you're putting this in a script and running it, you'll need to add a <code>print</code> statement to get the output printed out. For example: you could write <code>spam5 = repeat("spam", 5, ", ")</code>, then <code>print(spam5)</code>.</span>
<span class="comment-copy">This will add the delimiter onto the end of the string - I'm not sure if that's desired</span>
<span class="comment-copy">Does this give the correct result for <code>n=0</code>?</span>
<span class="comment-copy">Nice catch, Thanks.</span>
