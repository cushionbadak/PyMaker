<div class="post-text" itemprop="text">
<p>I've got a pickle of a problem that I can't seem to wrap my head around. I need to find the product of columns two and three in a text file (rate of pay * hours worked). I can tell my program to do it for a given line (shown below)  but can't figure out how to do it for every line.</p>
<pre><code>Filename = "database.txt"


rawtext = open(Filename, "r")
text = rawtext.read()
line = text.split('\n')
column0 = line[0].split('\t')
column1 = line[1].split('\t')
column2 = line[2].split('\t')

print("Last Name \t Hours \t Wages" )
print(column0[0],"\t",column0[2],"\t","$",int(column0[1])*int(column0[2]))
print(column1[0],"\t",column1[2],"\t","$",int(column1[1])*int(column1[2]))
print(column2[0],"\t",column2[2],"\t","$",int(column2[1])*int(column2[2]))
</code></pre>
<p>I'm pretty sure some kind of for loop or while statement is what I'm looking for but I just can't figure it out.</p>
<p>The file is formatted as</p>
<blockquote>
<p>Name \t Hours \t Rate</p>
</blockquote>
<p>If it matters.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use the csv-module. </p>
<pre><code>import csv

with open("database.txt", "r", newline="") as csvfile:
    csvreader = csv.reader(csvfile, delimiter='\t')
    print("Last Name \t Hours \t Wages")
    for row in csvreader:
        print('{}\t{}$\t{}'.format(row[0], row[2], float(row[1])*float(row[2])))
</code></pre>
<p><strong>Edit:</strong> Changed from casting to int, to casting to float.</p>
<p>You should also validate the input. Depending on what you want to do if the input aren't as expected, you could try something like this:</p>
<pre><code>import csv

with open("database.txt", "r", newline="") as csvfile:
    csvreader = csv.reader(csvfile, delimiter='\t')
    print("Last Name \t Hours \t Wages")
    for row in csvreader:
        try:
            print('{}\t{}\t{}'.format(row[0], row[2], float(row[1])*float(row[2])))
        except ValueError:
            # Handle cases where the casting of row[1] and row[2] to float fails
            code
        except IndexError:
            # Handle cases where index is out of bounds
            code
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Save column0, column1,column2 as a list or a tuple. Example:</p>
<pre><code>lines=line[0].split('\t'),line[1].split('\t'),line[2].split('\t')
print("Last Name \t Hours \t Wages" )
for column in lines:
    print(column[0],"\t",column[2],"\t","$",int(column[1])*int(column[2]))
</code></pre>
</div>
<span class="comment-copy"><code>for i in xrange(len(line)):</code> should get you started...</span>
<span class="comment-copy">The canonical way is to use the <a href="http://pydoc.org/2.4.1/csv.html" rel="nofollow noreferrer">csv module</a>, which takes care of such things for you.</span>
<span class="comment-copy">One minor tweak: if the OP is using Python 3 as the <code>print</code> syntax suggests, then <code>with open("database.txt", "r", newline=""):</code> is the right <code>open</code> (see <a href="http://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer">here</a>).</span>
<span class="comment-copy">@DSM Thanks, I've altered the answer accordingly.</span>
<span class="comment-copy">Wahoo! Exactly what I needed. Thank you! Just had to move the $ to after the  \t, but that's pretty minor.</span>
