<div class="post-text" itemprop="text">
<p>In python I can get some rudimentary documentation for any object using <code>help(&lt;object&gt;)</code>. But to be able to <em>search</em> the documentation, I have to go online. This isn't really helpful if I'm somewhere where the internet isn't accessible.</p>
<p>In R, there is a handy double question mark feature (<code>??&lt;topic&gt;</code>) that allows me to search through the documentation of all installed libraries for any function that includes <code>&lt;topic&gt;</code> in its name or documentation string. Is there anything similar for python? Perhaps even just for loaded objects?</p>
</div>
<div class="post-text" itemprop="text">
<p>Look in the python folder in the folder: <code>Doc</code>. This folder has the entire downloaded documentation of the python docs from <a href="http://python.org">python.org</a>. I know this is a VERY late answer, but it brings up an easy solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>pydoc comes with python and can do searches but only in the synopsis lines of available modules. Quoting <code>pydoc --help</code>:</p>
<pre>
pydoc -k 
    Search for a keyword in the synopsis lines of all available modules.
</pre>
<p>Note that into pydoc you can perform searches using "/".</p>
</div>
<div class="post-text" itemprop="text">
<p>Just to add another option for offline access of python docs (mostly core):</p>
<p>I don't have access to a linux computer at the moment, but on windows, you can navigate to <code>your_python_dist_folder/doc</code> to find some help files. Particularly <code>python275.chm</code> for instance.</p>
<p>If there's no doc folder on your linux machine, you can download the file <a href="http://python.org/ftp/python/2.7.6/python276.chm" rel="nofollow">here</a> and google for a linux chm viewer:</p>
<p><a href="https://www.google.com/search?q=linux+chm+viewer" rel="nofollow">https://www.google.com/search?q=linux+chm+viewer</a></p>
<p>::Note:</p>
<p>Some distributions also include docs for other packages in there... might be worth a check. Other than that, <code>help(module)</code> usually returns good information.</p>
<p><strong>Edit</strong>:</p>
<p>You could get something that might be a little closer to what you want by using <code>pydoc</code>. E.g. you are looking for something about <code>sin</code> in the math module:</p>
<pre><code>import math
import pydoc
[i for i in dir(math) if 'sin' in pydoc.getdoc(getattr(math,i))]
</code></pre>
<p>This would return the methods whose docstrings include <code>sin</code>:</p>
<pre><code>['acos', 'acosh', 'asin', 'asinh', 'cos', 'cosh', 'isinf', 'sin', 'sinh']
</code></pre>
<p>for which you then could run the <code>help()</code> function</p>
</div>
<div class="post-text" itemprop="text">
<p>This was mentioned in the comments already: <a href="http://zealdocs.org/" rel="nofollow">Zeal</a>
 is similar to Dash but for Windows/Linux. It uses the same sources as Dash. It's built using Qt and is available in the repositories for several distros, for Ubuntu there is a PPA. Download it <a href="http://zealdocs.org/download.html" rel="nofollow">here</a>.</p>
<blockquote>
<p>Zeal is a simple offline API documentation browser inspired by Dash (OS X app), available for Linux and Windows.</p>
<ul>
<li>Quickly search documentation using Alt+Space (or customised) hotkey to display Zeal from any place in your workspace.</li>
<li>Search in multiple sets of documentation at once.</li>
<li>Don't be dependent on your internet connection.</li>
<li>Integrate Zeal with Emacs, Sublime Text, or Vim. See Usage » Editor plugins for details.</li>
</ul>
</blockquote>
<p>It is open source (GPL), development happens on <a href="https://github.com/zealdocs/zeal" rel="nofollow">GitHub</a>. Zeal uses the same stylesheets/HTML as the online docs, so everything should look familiar.</p>
<p>An in-browser alternative is <a href="http://devdocs.io/" rel="nofollow">devdocs.io</a>. You can access the website even if you are offline, provided that you've marked them for local offline storage. You'll need to enable the Python 2 docs, and then mark them for offline storage <a href="http://devdocs.io/offline" rel="nofollow">here</a>. However, as a longtime user of the online Python docs, I find the custom stylesheet that DevDocs uses a bit distracting.</p>
</div>
<div class="post-text" itemprop="text">
<p>In case your working in a Mac there is <a href="http://kapeli.com/dash" rel="nofollow">Dash</a>, which allows you to download docsets and then explore/search offline. Despite its documentation functionality, <a href="http://kapeli.com/dash" rel="nofollow">Dash</a> is also a Snippet Manager.</p>
</div>
<div class="post-text" itemprop="text">
<p>Windows Idle - F1 from shell window or editing window gets you a windows help file of all the docs.  I think it's better than the online version - it's easier to find stuff.</p>
</div>
<div class="post-text" itemprop="text">
<p>Although there are certainly better documentations built into your computer than help() like windows idle, another option for some of the more common topics would just be to save some of the online documentation to your computer. For the modules you use a lot and want to access offline, you could just download a text file version of the official online python documentation, which is the best place to get documentation. (file &gt; save page as &gt; select .txt file format)</p>
</div>
<div class="post-text" itemprop="text">
<p>This may not have been available at the time the question asked and answered, but python.org now makes all the documentation available online as an archive of HTML files which can be navigated and searched offline: <a href="https://docs.python.org/2/download.html" rel="nofollow">https://docs.python.org/2/download.html</a></p>
<p>(The link directs to docs for the latest version of 2.x, but you can choose 3.x and older 2.x versions from that page)</p>
</div>
<div class="post-text" itemprop="text">
<p>You should try <a href="http://ipython.org/" rel="nofollow">ipython</a>. </p>
<blockquote>
<p><strong>object_name?</strong> will print all sorts of details about any object,
  including docstrings, function definition lines (for call arguments)
  and constructor details for classes.</p>
</blockquote>
<p>The magic commands %pdoc, %pdef, %psource and %pfile will respectively print the docstring, function definition line, full source code and the complete file for any object (when they can be found). If automagic is on (it is by default), you don’t need to type the ‘%’ explicitly.</p>
</div>
<span class="comment-copy">What platform/operating system?</span>
<span class="comment-copy">@wii: I'm on linux, but a cross-platform answer would be preferable, if possible.</span>
<span class="comment-copy">Note that <a href="http://stackoverflow.com/questions/723017">stackoverflow.com/questions/723017</a> points to <a href="http://docs.python.org/3/download.html" rel="nofollow noreferrer">docs.python.org/3/download.html</a> which is certainly useful, but only includes core python docs. I'm interested in searching the docs for python core <i>and</i> all installed modules (or just the imported ones).</span>
<span class="comment-copy">Would be really interesting in the reason for the downvotes here. If such a feature is available in other languages (like R), then is it somehow not applicable to python? Unpythonic? Against the Zen?</span>
<span class="comment-copy">On many modules, you can go through the files and figure it out by reading the comments or code.</span>
<span class="comment-copy">The question is about <i>searching</i> the docs. What's your proposal? I guess grep might work, depending on the format..</span>
<span class="comment-copy">@naught101 Well, there is the option to search in the documentation window. It is, as my answer says, the same documentation as on the site.</span>
<span class="comment-copy">You're right, I missed that at the time. However, it doesn't include thrid-party libraries, like numpy. They have separate docs available, but you can't search across the entire ecosystem at once...</span>
<span class="comment-copy">I actually think this is the best answer now - the HTML versions of the python docs are quite good, and the search works pretty well. However, it seems that if there's no python-[module]-doc package in your package manager (e.g. for less popular packages), then there's no easy way to install a packages' docs and use it in this way.</span>
<span class="comment-copy">I still agree with the first comment. This answer is incomplete - more of a hint in the right direction. In my case, for example, I'm not even sure where the Doc folder is or how to find it. Also, what command to use to search it? I could figure out something using grep, I suppose. I think it could benefit from an example code snippet.</span>
<span class="comment-copy">That sounds like just about exactly what I'm searching for, except that it fails badly when I use it: <code>AttributeError: 'NoneType' object has no attribute 'load_module'</code>. I think perhaps I have a module somewhere with problems, but I can't find it, and presumably such a tool should handle that kind of problem. Also, it looks like it loads all modules every time, which takes a while: It would be awesome if it cached the results (maybe it does and I'm just not seeing it, because it's failing).</span>
<span class="comment-copy">Indeed pydoc works by importing the modules. If you have one in your python path that cannot be imported, it will fail.</span>
<span class="comment-copy">do you know if there a open source alternative to Dash? The state of offline documentation browsing is abysmal and I'm considering writing one myself.</span>
<span class="comment-copy">Check out Zeal - <a href="http://zealdocs.org" rel="nofollow noreferrer">zealdocs.org</a></span>
<span class="comment-copy">Yeah, unfortunately, it's just the core documentation, no 3rd party libraries.</span>
<span class="comment-copy">Sorry, but that's totally irrelevant to the question. I know how to read the docs of an object, and I already use ipython. But none of that allows me to <b>search</b> the documentation for all available modules, or all loaded objects.</span>
