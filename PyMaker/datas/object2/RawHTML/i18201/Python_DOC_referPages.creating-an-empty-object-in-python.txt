<div class="post-text" itemprop="text">
<p>Are there any shortcuts for defining an empty object in Python or do you always have to create an instance of a custom empty class?</p>
<p>Edit: I mean an empty object usable for duck typing.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use type to create a new class on the fly and then instantiate it. Like so:</p>
<pre><code>&gt;&gt;&gt; t = type('test', (object,), {})()
&gt;&gt;&gt; t
&lt;__main__.test at 0xb615930c&gt;
</code></pre>
<p>The arguments to type are: Class name, a tuple of base classes, and the object's dictionary. Which can contain functions (the object's methods) or attributes.</p>
<p>You can actually shorten the first line to </p>
<pre><code>&gt;&gt;&gt; t = type('test', (), {})()
&gt;&gt;&gt; t.__class__.__bases__
(object,)
</code></pre>
<p>Because by default type creates new style classes that inherit from object. </p>
<p><code>type</code> is used in Python for <a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Metaprogramming.html">metaprogramming</a>. </p>
<p>But if you just want to create an instance of object. Then, just create an instance of it. Like lejlot suggests. </p>
<p>Creating an instance of a new class like this has an important difference that may be useful. </p>
<pre><code>&gt;&gt;&gt; a = object()
&gt;&gt;&gt; a.whoops = 1
Traceback (most recent call last):
   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'object' object has no attribute 'whoops'
</code></pre>
<p>Where as:</p>
<pre><code>&gt;&gt;&gt; b = type('', (), {})()
&gt;&gt;&gt; b.this_works = 'cool'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, in Python 3.3 <a href="https://docs.python.org/3/library/types.html#additional-utility-classes-and-functions" rel="noreferrer">SimpleNamespace</a> was added</p>
<blockquote>
<p>Unlike object, with SimpleNamespace you can add and remove attributes. If a SimpleNamespace object is initialized with keyword arguments, those are directly added to the underlying namespace.</p>
</blockquote>
<p>Example:</p>
<pre><code>import types

x = types.SimpleNamespace()
x.happy = True

print(x.happy) # True

del x.happy
print(x.happy) # AttributeError. object has no attribute 'happy'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One simple, less-terrifying-looking way to create an empty(-ish) object is to exploit the fact that functions are objects in Python, including Lambda Functions:</p>
<pre><code>obj = lambda: None
obj.test = "Hello, world!"
</code></pre>
<p>For example:</p>
<pre><code>In [18]: x = lambda: None

In [19]: x.test = "Hello, world!"

In [20]: x.test
Out[20]: 'Hello, world!'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What do you mean by "empty object"? Instance of class <code>object</code>? You can simply run</p>
<pre><code>a = object()
</code></pre>
<p>or maybe you mean initialization to the null reference? Then you can use </p>
<pre><code>a = None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>All the proposed solutions are somewhat awkward.</p>
<p>I found a way that is not hacky but is actually according to the original design.</p>
<pre><code>&gt;&gt;&gt; from mock import Mock
&gt;&gt;&gt; foo = Mock(spec=['foo'], foo='foo')
&gt;&gt;&gt; foo.foo
'foo'
&gt;&gt;&gt; foo.bar
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/prezi/virtualenv/local/lib/python2.7/site-packages/mock/mock.py", line 698, in __getattr__
    raise AttributeError("Mock object has no attribute %r" % name)
AttributeError: Mock object has no attribute 'bar'
</code></pre>
<p><a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">See the documentation of unittest.mock here.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Constructs a new <a href="https://docs.python.org/2/library/sets.html#sets.Set" rel="nofollow noreferrer">empty Set object</a>. If the optional iterable parameter is supplied, updates the set with elements obtained from iteration. All of the elements in iterable should be immutable or be transformable to an immutable using the protocol described in section Protocol for automatic conversion to immutable.</p>
<p>Ex:</p>
<pre><code>myobj = set()
for i in range(1,10): myobj.add(i)
print(myobj)
</code></pre>
</div>
<span class="comment-copy">You can even shorten the first line to <code>t = type('', (), {})()</code></span>
<span class="comment-copy">Excellent.  I was hoping this had been made easier in Python 3!</span>
<span class="comment-copy">I like this solution, because dont need to give a name</span>
<span class="comment-copy">Hmmm, but it has the downside that you cant assign to <code>x.__class__.somefunc</code></span>
<span class="comment-copy">I wonder what the OP will be able to do with <code>a</code> defined either as <code>object()</code> or <code>None</code> because in such cases, <code>a</code> has no namespace <code>__dict__</code> and no attribute can be added to <code>a</code> like that for example <code>a.x = 10</code>.</span>
