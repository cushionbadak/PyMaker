<div class="post-text" itemprop="text">
<p>I'm trying to create a function to check if the user inputs a number. If the user inputs a number my program should output an error message, if the users enters a string of letters, my program should proceed with program. How can I do this?</p>
<p>I've come up with this so far:</p>
<pre><code> #Checks user input

def CheckInput():
    while True:
        try:
            city=input("Enter name of city: ")
            return city
        except ValueError:
            print ("letters only no numbers")
</code></pre>
<p>This function doesn't seem to work. Please help. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the type(variable_name) function to retrieve the type.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking to filter out any responses that include digits in the string. The answers given will do that using a regular expression. </p>
<p>If that's all you want, job done. But you will also accept city names like Ad€×¢® or john@example.com.</p>
<p>Depending on how choosy you want to be, and whether you're just looking to fix this code snippet or to learn the technique that the answers gave you so that you can solve the next problem where you want to reject anything that is not a dollar amount, say),you could try writing a regular expression. This lets you define the characters that you want to match against. You could write a simple one to test if the input string contains a character that is not a letter [^a-zA-Z] (the ^ inside [ ] means any character that is not in the class listed). If that RE matches, you can then reject the string.</p>
<p>Then consider whether the strict rule of "letters only" is good enough? Have you replaced one flawed rule (no digits allowed) with another? What about 'L.A.' as a city name? Or 'Los Angeles'? Maybe you need to allow for spaces and periods. What about hyphens? Try [^a-zA-Z .-] which now includes a space, period and hyphen. The backslash tells the RE engine to treat that hyphen literally unlike the one in "a-z".</p>
<p>Details about writing a regex here:<a href="http://docs.python.org/3/howto/regex.html#regex-howto" rel="nofollow">http://docs.python.org/3/howto/regex.html#regex-howto</a></p>
<p>Details about using the Re module in Python here: <a href="http://docs.python.org/3/library/re.html#module-re" rel="nofollow">http://docs.python.org/3/library/re.html#module-re</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re

def CheckInput():
    city = input('Enter name of city: ')
    if re.search(r'\d', city):
        raise Exception('Invalid input')
</code></pre>
<p>You wouldn't be type checking because in Python 3 all text inputs are strings. This checks for a decimal value in the input using regular expressions and raises an exception if one is found.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>val = input("Enter name of city:")
try:
    int( val )
except ValueError:
    return val
else:
    print("No numbers please")
</code></pre>
<hr/>
<p><strong>Edit:</strong> I saw mention that no number should be present in the input at all. This version checks for numbers at any place in the input:</p>
<pre><code>import re

val = input("Enter name of city:")

if re.search( r'\d', val ) is not None:
    print("No numbers please")
else:
    return val
</code></pre>
</div>
<span class="comment-copy">Python 2 or 3? <code>input</code> has changed in Python 3.</span>
<span class="comment-copy">Your requirement isn't very clear. Do you want a string consisting of letters only? Or a string containing no digits? Or a string not consisting entirely of digits?</span>
<span class="comment-copy">@larsmans Since it should be a city name I would think the string should only consist of letters</span>
<span class="comment-copy">@LostAvatar: how about <code>"Los Angeles"</code> then?</span>
<span class="comment-copy">@larmans Ok, you got me :D But I can't imagine a valid city with digits in its name</span>
<span class="comment-copy">The type() of input() will always be a string</span>
<span class="comment-copy">In Python 3 it will. In Python 2, it won't.</span>
<span class="comment-copy">Thank you for your answer. I have found the answer to my problem, therefore I would like to delete this question. Can you please remove your answer? That will be very helpful. Thanks again.</span>
<span class="comment-copy">@user2889627 That is not the way stack overflow works, questions and answers are supposed to be of long term usefulness to a large number of people</span>
<span class="comment-copy">As said by Richard Tingle, all questions and answers should be kept as reference for others. Unless the question (and answers) are debatable.</span>
<span class="comment-copy">So "ZYX987" is a valid input?</span>
<span class="comment-copy">Guys, updated the answer.</span>
<span class="comment-copy">The first solution is not a good programming practice: if the rule changes, you have to change your logic. The second one is far a better choice: you validate your string through a pattern, not through a side-effect of 'int'! (I would suggest a validation function...)</span>
<span class="comment-copy">First: Others might have the same problem. Second: Teachers might want to look whether the students took their answer from StackOverflow.</span>
