<div class="post-text" itemprop="text">
<p>I'm using <code>imaplib</code> to query Gmail's IMAP, but some requests are taking more than 60 seconds to return. This is already done in a task, so I have a full 10 minutes to do the request, but my tasks are failing due to the 60 second limit on <code>urlfetch</code>. </p>
<p>I've tried setting <code>urlfetch.set_default_fetch_deadline(600)</code>, but it doesn't seem to do anything. </p>
<p>Here's a stacktrace:</p>
<pre><code>The API call remote_socket.Receive() took too long to respond and was cancelled.
Traceback (most recent call last):
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/imaplib.py", line 760, in uid
    typ, dat = self._simple_command(name, command, *args)
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/imaplib.py", line 1070, in _simple_command
    return self._command_complete(name, self._command(name, *args))
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/imaplib.py", line 897, in _command_complete
    typ, data = self._get_tagged_response(tag)
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/imaplib.py", line 999, in _get_tagged_response
    self._get_response()
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/imaplib.py", line 916, in _get_response
    resp = self._get_line()
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/imaplib.py", line 1009, in _get_line
    line = self.readline()
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/imaplib.py", line 1171, in readline
    return self.file.readline()
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/socket.py", line 445, in readline
    data = self._sock.recv(self._rbufsize)
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/ssl.py", line 301, in recv
    return self.read(buflen)
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/ssl.py", line 220, in read
    return self._sslobj.read(len)
  File "/base/data/home/runtimes/python27/python27_lib/versions/1/google/appengine/api/remote_socket/_remote_socket.py", line 864, in recv
    return self.recvfrom(buffersize, flags)[0]
  File "/base/data/home/runtimes/python27/python27_lib/versions/1/google/appengine/api/remote_socket/_remote_socket.py", line 903, in recvfrom
    apiproxy_stub_map.MakeSyncCall('remote_socket', 'Receive', request, reply)
  File "/base/data/home/runtimes/python27/python27_lib/versions/1/google/appengine/api/apiproxy_stub_map.py", line 94, in MakeSyncCall
    return stubmap.MakeSyncCall(service, call, request, response)
  File "/base/data/home/runtimes/python27/python27_lib/versions/1/google/appengine/api/apiproxy_stub_map.py", line 328, in MakeSyncCall
    rpc.CheckSuccess()
  File "/base/data/home/runtimes/python27/python27_lib/versions/1/google/appengine/api/apiproxy_rpc.py", line 133, in CheckSuccess
    raise self.exception
DeadlineExceededError: The API call remote_socket.Receive() took too long to respond and was cancelled.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Which kind of DeadlineExceededError?</h1>
<p>There are three kinds of <code>DeadlineExceededError</code> in AppEngine.<br/>
<a href="https://developers.google.com/appengine/articles/deadlineexceedederrors" rel="nofollow">https://developers.google.com/appengine/articles/deadlineexceedederrors</a></p>
<blockquote>
<ol>
<li>google.appengine.runtime.DeadlineExceededError: raised if the overall request times out, typically after 60 seconds, or 10 minutes
  for task queue requests.</li>
<li>google.appengine.runtime.apiproxy_errors.DeadlineExceededError: raised if an RPC exceeded its deadline. This is typically 5 seconds,
  but it is settable for some APIs using the 'deadline' option.</li>
<li>google.appengine.api.urlfetch_errors.DeadlineExceededError: raised if the URLFetch times out.</li>
</ol>
</blockquote>
<p>As you can see. The 10mins limit of <code>taskqueue</code> only help the<code>google.appengine.runtime.DeadlineExceededError</code>. The type of <code>DeadlineExceededError</code> can be identified via traceback (list below). In this case, it is <code>google.appengine.runtime.apiproxy_errors.DeadlineExceededError</code>. Which will raise in 5secs by default. (I will update the post after figure out how to change it)</p>
<h2>TYPE 1. google.appengine.runtime.DeadlineExceededError</h2>
<p>The traceback looks like</p>
<pre><code>Traceback (most recent call last):
  File "/base/data/home/runtimes/python27/python27_lib/versions/1/google/appengine/runtime/wsgi.py", line 266, in Handle
    result = handler(dict(self._environ), self._StartResponse)
  File "/base/data/home/runtimes/python27/python27_lib/versions/third_party/webapp2-2.3/webapp2.py", line 1505, in __call__
    rv = self.router.dispatch(request, response)
  File "/base/data/home/runtimes/python27/python27_lib/versions/third_party/webapp2-2.3/webapp2.py", line 1253, in default_dispatcher
    return route.handler_adapter(request, response)
  File "/base/data/home/runtimes/python27/python27_lib/versions/third_party/webapp2-2.3/webapp2.py", line 1077, in __call__
    return handler.dispatch()
  File "/base/data/home/runtimes/python27/python27_lib/versions/third_party/webapp2-2.3/webapp2.py", line 545, in dispatch
    return method(*args, **kwargs)
  File "/base/data/home/apps/s~tagtooadex2/test.371204033771063679/index.py", line 9, in get
    pass
DeadlineExceededError
</code></pre>
<h3>Solution</h3>
<p>This exception can be solved by using taskqueue (10mins), backend or manual scaling options.
<a href="https://developers.google.com/appengine/docs/python/modules/#Python_Instance_scaling_and_class" rel="nofollow">https://developers.google.com/appengine/docs/python/modules/#Python_Instance_scaling_and_class</a></p>
<h2>TYPE 2. google.appengine.runtime.apiproxy_errors.DeadlineExceededError</h2>
<p>The traceback looks like     </p>
<pre><code>DeadlineExceededError: The API call remote_socket.Receive() took too long to respond and was cancelled.
</code></pre>
<h2>TYPE 3. google.appengine.api.urlfetch_errors.DeadlineExceededError</h2>
<p>The traceback looks like</p>
<pre><code>DeadlineExceededError: Deadline exceeded while waiting for HTTP response from URL:     http://www.sogi.com.tw/newforum/article_list.aspx?topic_ID=6089521
</code></pre>
<h3>Solution:</h3>
<p>This exception can be solved by extend the deadline.</p>
<pre><code>urlfetch.fetch(url, deadline=10*60)
</code></pre>
<p><a href="https://developers.google.com/appengine/docs/python/urlfetch/fetchfunction" rel="nofollow">https://developers.google.com/appengine/docs/python/urlfetch/fetchfunction</a></p>
</div>
<div class="post-text" itemprop="text">
<p>There's no mentioning of timeout in imaplib sources. So there are several options:</p>
<ol>
<li>IMAP uses socket library to establish the connection, consider using
<a href="http://docs.python.org/3.3/library/socket.html#socket.setdefaulttimeout" rel="nofollow">socket.setdefaulttimeout(timeoutValue)</a> but if you do so be
aware of side-effects.</li>
<li>The second option is to create your own IMAP4 class child with
tunable timeout, shall we say in <a href="http://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.open" rel="nofollow">open function</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://developers.google.com/appengine/articles/deadlineexceedederrors" rel="nofollow">Google App Engine documentation</a>, it seems like there are many
possible causes for <code>DeadlineExceededError</code>.</p>
<p>In your case, it seems that it may be one of the last two (out of three) types of <code>DeadlineExceededError</code> presented on the page.</p>
</div>
<span class="comment-copy">You'd rather added some code to reproduce the problem, I think, that will increase your chances to get the answer</span>
<span class="comment-copy">I tried the imaplib but cannot reproduce the error. It can execute until the request timeout.</span>
<span class="comment-copy">It's type 2. Problem is, there's no (documented) way to set the timeout for sockets. Actually, it's documented that sockets don't have timeouts by default. So I don't understand why some of my requests are timing out at exactly 60 seconds.</span>
<span class="comment-copy">A google guy said in fact the imap ports is blocked... I tried to access gmail account but received no IMAP4_SSL error.   If your imap server is gmail, try:  <a href="http://googleappengine.blogspot.tw/2011/05/accessing-gmail-accounts-from-app.html" rel="nofollow noreferrer">googleappengine.blogspot.tw/2011/05/…</a> <a href="http://stackoverflow.com/questions/9476777/accessing-gmail-emails-through-google-app-engine" title="accessing gmail emails through google app engine">stackoverflow.com/questions/9476777/…</a></span>
<span class="comment-copy">I don't think it's the socket library that's timing out. (It <a href="http://docs.python.org/2/library/socket.html#socket.setdefaulttimeout" rel="nofollow noreferrer">doesn't have timeout by default</a>). It's AppEngine that's throwing the DeadlineExceededError. All requests are limited to 60 seconds. But since I'm doing this in a taskqueue, I should have up to 10 minutes to do requests.</span>
