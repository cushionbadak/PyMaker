<div class="post-text" itemprop="text">
<pre><code>places = ["Jack", "John", "Sochi"]
count=0
multi_word=0
place  = places[count]
while place != "Sochi" and count &lt; len(places):
    if ' ' in place:
        multi_word += 1

    count += 1
    place = places[count]

print ('Number of cities before Sochi:', count)
</code></pre>
<p>My code should print the number of cities before Sochi excluding Sochi  .  I don't understand what this line (place = places[count]) does, nor do I understand why I need it twice. </p>
</div>
<div class="post-text" itemprop="text">
<p>foreach would neaten it up</p>
<pre><code>places = ["Jack", "John", "Sochi"]
count = 0
for place in places:
    if ' ' in place:
        multi_word += 1
    if place == "Sochi":
        break
    count += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>count=0
place = places[count]
</code></pre>
<p>Now <code>place</code> is always <code>places[0]</code>, i.e. Jack. Thus the while loop only terminates on the second condition, giving you the list length of 3.</p>
<p><code>place = places[count]</code> should go in the loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following <code>while</code> loop to check for the number of places before Sochi:</p>
<pre><code>places = ["Jack", "John", "Sochi"]
count = 0
multi_word = 0
while count &lt; len(places):
    place = places[count]
    if ' ' in place:
        multi_word += 1
    if place == "Sochi":
        break
    count += 1

print('Number of cities before Sochi:', count)
</code></pre>
<p>The <a href="http://docs.python.org/3/reference/simple_stmts.html#break" rel="nofollow"><code>break</code></a> statement means you'll exit your <code>while</code> loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not try a more pythonic solution instead ?</p>
<pre><code>places = ["Jack", "John", "Sochi"]

try:
    count = places.index("Sochi")
except ValueError:
    count = len(places)

multi_word = len([place for place in places[:count] if ' ' in place])
</code></pre>
</div>
<span class="comment-copy">what is the line <code>**place  = places[count]**</code>?</span>
<span class="comment-copy">@MrE it is the <i>bolded</i> line which is not displayed bold because it is formatted as source code. ...and by the way it is initializing the variable <code>place</code> before used in the while loop.</span>
<span class="comment-copy">Why not just <code>places.index('Sochi')</code> which will return the index for the string 'Sochi' in the list and since lists are zero-indexed you'll  get the sought after number</span>
<span class="comment-copy">This feels more Python, whilst a while loops feels more C/C++</span>
<span class="comment-copy">I'd keep the <code>count &lt; len(places)</code> condition. If "Sochi" is not in the list, you'll get out of bounds after the end.</span>
<span class="comment-copy">@dornhege: thanks, good point. I've updated the answer.</span>
