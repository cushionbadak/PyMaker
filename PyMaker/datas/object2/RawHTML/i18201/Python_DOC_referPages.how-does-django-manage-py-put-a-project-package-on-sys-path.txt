<div class="post-text" itemprop="text">
<p>I read the django <a href="https://docs.djangoproject.com/en/dev/ref/django-admin/" rel="nofollow">doc</a> and some SO posts to know the differences between  manage.py and django-admin.py.</p>
<p>They all say:</p>
<blockquote>
<p>manage.py is automatically created in each Django project. manage.py
  is a thin wrapper around django-admin.py that takes care of two things
  for you before delegating to django-admin.py:</p>
<ol>
<li>It puts your project’s package on sys.path. </li>
<li>It sets the DJANGO_SETTINGS_MODULE environment variable so that it points to
  your project’s settings.py file.</li>
</ol>
</blockquote>
<p>So I checked the scource code of these 2 files(latest version, so it the doc).</p>
<p>Then I am confused. <code>manage.py</code> does the second thing: sets the DJANGO_SETTINGS_MODULE environment variable. Besides that, I really can not find any differences between these 2 scripts.</p>
<p>[django-admin.py]</p>
<pre><code>#!/usr/bin/env python
from django.core import management

if __name__ == "__main__":
    management.execute_from_command_line()
</code></pre>
<p>[manage.py]</p>
<pre><code>#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "{{ project_name }}.settings")

    from django.core.management import execute_from_command_line

    execute_from_command_line(sys.argv)
</code></pre>
<p>Why? Is the django documentation out of date? Or I missed something here? And where is the code that puts the project’s package on sys.path?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>sys.path</code> is updated <a href="https://github.com/django/django/blob/1.5.4/django/core/management/base.py#L45" rel="nofollow">here</a> using <code>handle_default_options(options)</code> statement located <a href="https://github.com/django/django/blob/1.5.4/django/core/management/__init__.py#L364" rel="nofollow">here</a>. The execution path is as follows:</p>
<ul>
<li><code>execute_from_command_line(argv)</code> (your <code>manage.py</code>)</li>
<li><code>utility.execute()</code> <a href="https://github.com/django/django/blob/1.5.4/django/core/management/__init__.py#L364" rel="nofollow">here</a></li>
<li><code>handle_default_options(options)</code> <a href="https://github.com/django/django/blob/1.5.4/django/core/management/__init__.py#L364" rel="nofollow">here</a></li>
</ul>
<p>The same method is used by <code>Command</code> class used as base class for management commands.</p>
</div>
<div class="post-text" itemprop="text">
<p>From what I can see it's not <code>./manage.py</code> who "puts your project’s package on sys.path."</p>
<p><a href="https://docs.python.org/3/tutorial/modules.html#the-module-search-path" rel="nofollow noreferrer">The doc</a> says:</p>
<blockquote>
<p>sys.path is initialized from these locations:</p>
<ul>
<li>The directory containing the input script (or the current directory when no file is specified).</li>
<li>PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).</li>
<li>The installation-dependent default.</li>
</ul>
</blockquote>
<p>The installation-dependent default must be what <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer"><code>site.py</code></a> adds. But it can be disabled with <code>-S</code> switch. Now then when I run this script (<code>1.py</code>):</p>
<pre><code>import sys
print(sys.path)
</code></pre>
<p>I get:</p>
<pre><code>$ python -S ../1.py   # to show that it's not current directory that is added
['/path/to/the/script/directory', '/usr/lib/python35.zip', '/usr/lib/python3.5/', \
'/usr/lib/python3.5/plat-linux', '/usr/lib/python3.5/lib-dynload']
</code></pre>
<p>So, when you run <code>django-admin</code>, <code>/path/to/env/bin/django-admin</code> will be the first on the <code>sys.path</code>. And when <code>./manage.py</code>, <code>/path/to/project</code>.</p>
<p>As such, one can probably say that <code>./manage.py</code> "puts your project’s package on sys.path," but indirectly, by being at the root of your project.</p>
</div>
<span class="comment-copy">I know this is a really old post and we're at Django 1.10 now but based on the code above the Python path is only set when the <code>--pythonpath</code> option is given by the user. So something else has to be setting the Python path when the option isn't given and that's the case that the question is asking about. BTW. It's still the same way in Django 1.10 as well.</span>
<span class="comment-copy">This is the correct answer. Since, if you place <code>import pdb; pdb.set_trace()</code> right after <code>if __name__ == "__main__":</code> in <code>manage.py</code> and check <code>sys.path</code> you'd see that the path is already set to the directory containing <code>manage.py</code>, i.e. the input script.</span>
