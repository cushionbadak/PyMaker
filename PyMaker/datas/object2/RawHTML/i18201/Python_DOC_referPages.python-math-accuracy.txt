<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5997027/python-rounding-error-with-float-numbers">Python rounding error with float numbers [duplicate]</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/11950819/python-math-is-wrong">Python math is wrong [duplicate]</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I have try this simple math operation in python</p>
<pre><code>&gt;&gt;&gt; math.floor(8.2-0.21)
7.0
&gt;&gt;&gt; math.floor(8.21-0.2)
8.0
&gt;&gt;&gt; math.floor(8.2-0.2)
7.0
</code></pre>
<p>The third one should return 8 but it is return 7?!</p>
<p><strong>UPDATE</strong></p>
<p>i have try it in PHP, ruby and JAVA and i have got the same results.</p>
<p><strong>Update 2</strong>
i don't know why the question get many votes down !!</p>
</div>
<div class="post-text" itemprop="text">
<p>The languages you cite use either IEEE-754 64-bit binary floating-point or use the floating-point of the underlying hardware, which is likely IEEE-754 binary floating-point.</p>
<p>In IEEE-754 64-bit binary floating-point, the nearest representable value to 8.2 is 8.199999999999999289457264239899814128875732421875, and the nearest representable value to .2 is 0.200000000000000011102230246251565404236316680908203125.</p>
<p>So, when you write <code>8.2 - 0.2</code>, what actually happens is that 0.200000000000000011102230246251565404236316680908203125 is subtracted from 8.199999999999999289457264239899814128875732421875. The result is a value slightly under 8, and the floor of a value slightly under 8 is 7.</p>
<p>The lesson here is that floating-point arithmetic is generally approximate, so you must be careful when evaluating functions with discontinuities (like floor) or steep slopes. You must either design your code to accept results that may cross the discontinuities or you must design your calculations to avoid errors that cross the discontinuities.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your first two examples are to be expected:</p>
<ul>
<li><p><code>8.2 - 0.21</code> is <code>7.99</code>. Floor of <code>7.99</code> is <code>7</code>, and that's what is returned. Remember that <code>floor(x)</code> is the greatest integer less than or equal to <code>x</code>. <code>8</code> is greater than <code>7.99</code>, so it can't possibly be returned. <code>7</code>, on the other hand, meets this requirement.</p></li>
<li><p><code>8.21 - 0.2</code> is <code>8.01</code>. Floor of <code>8.01</code> is <code>8</code> -- no magic here.</p></li>
</ul>
<hr/>
<pre><code>&gt;&gt;&gt; math.floor(8.2-0.2)
7.0
</code></pre>
<p>Now this is more interesting. It has to do with the fact that <code>8.2</code> and <code>0.2</code> cannot be exactly represented with floats, so the result of the computation is perhaps not what you might have thought:</p>
<pre><code>&gt;&gt;&gt; 8.2 - 0.2
7.999999999999999
</code></pre>
<p>Again, <code>floor()</code> is working <a href="http://docs.python.org/3/library/math.html#math.floor" rel="nofollow">as documented</a>.</p>
<p>You can see this for yourself using <a href="http://docs.python.org/2/library/decimal.html#module-decimal" rel="nofollow"><code>decimal</code></a>:</p>
<pre><code>&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal(0.2)
Decimal('0.200000000000000011102230246251565404236316680908203125')
&gt;&gt;&gt; Decimal(8.2)
Decimal('8.199999999999999289457264239899814128875732421875')
</code></pre>
<p>Relevant: <a href="http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html" rel="nofollow">What Every Computer Scientist Should Know About Floating-Point Arithmetic</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Why should it be 8? Floor functions return the nearest integer rounded down, so those two examples are correct.</p>
<p>8.2 - 0.21 = 7.99, which rounded down is 7.</p>
<p>8.21 - 0.2 = 8.01, which rounded down is 8.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a=0.2
&gt;&gt;&gt; a
0.20000000000000001
&gt;&gt;&gt; b = 8.2
&gt;&gt;&gt; b
8.1999999999999993
&gt;&gt;&gt; b-a
7.9999999999999991
&gt;&gt;&gt; math.floor(b-a)
7.0
</code></pre>
<p>Due to floating point inaccuracies</p>
</div>
<span class="comment-copy">your math is wrong I think ... maybe you want <code>math.round</code>?</span>
<span class="comment-copy">You edited it in after everyone answered you, but your third example is floating-point error.</span>
<span class="comment-copy"><a href="http://docs.python.org/2/tutorial/floatingpoint.html" rel="nofollow noreferrer">Read this</a> and use the <code>decimal</code> module instead if you want to avoid these shallow surprises.</span>
<span class="comment-copy">You're using <code>round()</code> instead of <code>floor()</code> in your Java/Ruby tests...</span>
<span class="comment-copy">All the down votes are kinda harsh IMHO. +1 from me (even tho this is a common question...)</span>
<span class="comment-copy">@EricPostpischil Nevermind, you are correct -- I was thinking of 0.8. The error stems from <code>8.2</code> and <code>0.2</code> themselves. I'll update the answer.</span>
