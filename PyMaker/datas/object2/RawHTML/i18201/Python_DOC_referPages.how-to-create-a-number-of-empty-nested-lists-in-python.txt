<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/240178/list-of-lists-changes-reflected-across-sublists-unexpectedly">List of lists changes reflected across sublists unexpectedly</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>I want to have a variable that is a nested list of a number of empty lists that I can fill in later. Something that looks like:  </p>
<pre><code>my_variable=[[], [], [], []]
</code></pre>
<p>However, I do not know beforehand how many lists I will need, only at the creation step, therefore I need a variable <code>a</code> to determine it. 
I thought about simple <code>my_variable=[[]]*a</code>, but that creates copies of lists and it is not what I want to have. </p>
<p>I could do:</p>
<pre><code>my_variable=[]  
for x in range(a):
   my_variable.append([])
</code></pre>
<p>but I'm looking for a more elegant solution (preferably one-liner). Is there any?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try a <a href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions">list comprehension</a>:</p>
<pre><code>lst = [[] for _ in xrange(a)]
</code></pre>
<p>See below:</p>
<pre><code>&gt;&gt;&gt; a = 3
&gt;&gt;&gt; lst = [[] for _ in xrange(a)]
&gt;&gt;&gt; lst
[[], [], []]
&gt;&gt;&gt; a = 10
&gt;&gt;&gt; lst = [[] for _ in xrange(a)]
&gt;&gt;&gt; lst
[[], [], [], [], [], [], [], [], [], []]
&gt;&gt;&gt; # This is to prove that each of the lists in lst is unique
&gt;&gt;&gt; lst[0].append(1)
&gt;&gt;&gt; lst
[[1], [], [], [], [], [], [], [], [], []]
&gt;&gt;&gt;
</code></pre>
<p>Note however that the above is for Python 2.x.  On Python 3.x., since <code>xrange</code> was removed, you will want this:</p>
<pre><code>lst = [[] for _ in range(a)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt;[[] for x in range(10)] #To make a list of n different lists, do this:
[[], [], [], [], [], [], [], [], [], []]
</code></pre>
<p>Edit :-</p>
<pre><code>[[]]*10
</code></pre>
<p>This will give you the same result like above but the list are not distinct instances,they are just n references to the same instance.</p>
</div>
<span class="comment-copy">I think you need to rethink this, This seems like it could be better to use a dictionary for your needs. Consult <a href="http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">this post</a></span>
<span class="comment-copy"><code>my_variable=[[] for _ in xrange(a)]</code></span>
<span class="comment-copy">+1 to Inbar Rose's comment... i had to convert some perl code (where you can instantiate any index at any time, which python doesn't allow.. x = [], x[4] = 1 works in perl, throws an error in python). however, just make x a dictionary, and it will work the same way: x = {}, x[4] = 1 now works just fine. you will have to sort the keys, and they won't be monotonic though (i.e. you could have indexes like [0,3,4,7]).</span>
<span class="comment-copy">Something you may want instead: <a href="http://docs.python.org/3/library/collections.html?highlight=defaultdict#collections.defaultdict" rel="nofollow noreferrer">defaultdict(list)</a>.</span>
<span class="comment-copy">This is a duplicate</span>
<span class="comment-copy">I mast have had a black-out, that I haven't thought about list comprehension before. :) However, I'm wondering why <code>xrange</code> on Python 2.x is better than <code>range</code>? They both work the same, aren't they?</span>
<span class="comment-copy">@AndyS.c. - Not actually.  In Python 2.x, <code>xrange</code> (which returns an xrange iterator) is faster than <code>range</code> (which returns a list).  In Python 3.x. however, <code>range</code> was made to do what <code>xrange</code> does and so <code>xrange </code> was removed.  Here is a reference: <a href="http://stackoverflow.com/questions/135041/should-you-always-favor-xrange-over-range" title="should you always favor xrange over range">stackoverflow.com/questions/135041/…</a></span>
<span class="comment-copy">It would be helpful to demonstrate how this differs from <code>[[]]*10</code></span>
<span class="comment-copy">ya that is good.i missed it.</span>
<span class="comment-copy">Consider expanding your answer to explain to the asker why this achieves the desired result, possibly linking to documentation. As is, this is only marginally useful.</span>
<span class="comment-copy">@inspectorG4dget it differs like so: <a href="http://stackoverflow.com/questions/12791501/python-initializing-a-list-of-lists" title="python initializing a list of lists">stackoverflow.com/questions/12791501/…</a></span>
