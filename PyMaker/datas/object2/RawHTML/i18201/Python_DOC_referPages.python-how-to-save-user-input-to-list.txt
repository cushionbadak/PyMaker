<div class="post-text" itemprop="text">
<p>I am looking to take a list that contains data in it and append it so that it will save next time i execute the code. So far i have this that works, but when i execute the code again it does not include the new data that was entered. Any suggestions?</p>
<pre><code>def the_list():

    data = ['data1', 'data2', 'data3 ' , 'data4', 'data5' ]

    for i in data:
        print (i)

    print (' would you like to add')
    a = input()

    if a == ('yes'):
        b = input()

        data.append(b)
        print (data) 

the_list()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def the_list():
    try:
        with open('data.txt', 'r') as f:
            data = [line.strip() for line in f]
    except:
        data = []

    for i in data:
        print(i)

    print (' would you like to add')
    a = raw_input()

    if a == 'yes':
        b = input()

        data.append(b)
        print (data)

    with open('data.txt', 'r') as nf:
        nf.write('\n'.join(data))
the_list()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you mean to save data across executions, everything in memory of the "live" program gets discarded at the end of execution, so you must save data to a file (or some other persistent medium), then read it back in.</p>
<p>You can save to a file as simple strings, or you can use <code>pickle</code> to easily serialize objects like lists.</p>
<p><strong>Using simple strings</strong></p>
<p>Wrap your program with code to load and save data to a file:</p>
<pre><code>data=[]
try:
    old_data= open("save_data", "r").read().split('\n')
    data.extend(old_data)
except: 
    print ("Unable to load old data!")
    data = ['data1', 'data2', 'data3 ' , 'data4', 'data5' ]

#YOUR PROGRAM HERE

try:
    with open("save_data", "w") as out:
        out.write('\n'.join(data))
except:
    print ("Unable to write data!")
</code></pre>
<p>Of course, you have to do some work to prevent having duplicates in <code>data</code> if they must not appear.</p>
<p><strong>Using pickle</strong></p>
<pre><code>import pickle

data_fn = "save_data"
data=[]
try: 
    with open(data_fn, "rb") as data_in:
        old_data = pickle.load(data_in)
        data.extend(old_data)
except: 
    print ("Unable to load last data")
    data = ['data1', 'data2', 'data3 ' , 'data4', 'data5' ]


#REST OF YOUR PROGRAM

try: 
    with open(data_fn, "w") as data_out:
        pickle.dump(data, data_out)
except:
    print ("Unable to save data")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>but when i execute the code again it does not include the new data
  that was entered</p>
</blockquote>
<p>Of course, because the list is in memory. You would have to save it to a file or to a database in order for it to persist. </p>
<p>For example, read about <a href="http://docs.python.org/3/tutorial/inputoutput.html" rel="nofollow">Input and Output in python</a>.</p>
</div>
<span class="comment-copy">You need some kind of persistence mechanism, the simplest one I can think of is a plain text file.</span>
<span class="comment-copy">I think using <code>pickle</code> or <code>json</code> might be even simpler, just because you can read and write the whole file with a single line <code>pickle.dumps(data, datafile)</code>. No need to worry about remembering to add/remove newlines, whether or not to quote things, etc.</span>
<span class="comment-copy">The OP appears to be using Python 3 (<code>input</code>, and <code>print</code> as a function), so you should do the same. (If you really want to explain the differences, you can; I'd just put parens around your <code>print</code> so it works in both 2.x and 3.x and leave it at that.)</span>
<span class="comment-copy">Thanks, good catch</span>
<span class="comment-copy">Ahh, just saw your implementation. Much nicer :)</span>
<span class="comment-copy">Your implementation is fine, about the same as mine, you should only make sure to catch possible exceptions with file IO. Using <code>pickle</code> is another good alternative to provide.</span>
<span class="comment-copy">I originally wrote it with <code>cPickle</code>, but figured that because it was just a simple list, file readability might be useful.</span>
