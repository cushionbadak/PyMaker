<div class="post-text" itemprop="text">
<p>For example:</p>
<pre><code>&gt;&gt;&gt; a
[2, -4, -2, 4, -3, -1, 3, 4, 2, 2]

&gt;&gt;&gt; unique(a)
[2, 3, 4, -2, -4, -3, -1]
</code></pre>
<p>It gives me a list of values such that each value appears only once, but I'd like it to also print them in the same order as the original list.</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>set</code> does not have an order, so after converting a list to a set, the resulting order when iterating the elements is implementation detail.</p>
<p>You could use the <a href="http://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>OrderedDict</code></a> to get some set behavior with an order:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; a = [2, -4, -2, 4, -3, -1, 3, 4, 2, 2]
&gt;&gt;&gt; x = OrderedDict.fromkeys(a)
&gt;&gt;&gt; list(x)
[2, -4, -2, 4, -3, -1, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a faster (<em>albeit less compact</em>) approach, which basically iterates over the elements in the original list, checking if they are yet in a <code>set</code> you are adding to. There may be some subtle changes which could further speed up my approach:</p>
<pre><code>def _order(orig):
    ordset = set()
    for x in orig:
        if x in ordset:
            continue
        ordset.add(x)
        yield x
def unique(orig):
    return list(_order(orig))
</code></pre>
<p><strong>Outputs:</strong></p>
<pre><code>&gt;&gt;&gt; unique(a)
[2, -4, -2, 4, -3, -1, 3]
</code></pre>
<hr/>
<p><strong>Benchmarking</strong>:</p>
<p><a href="https://stackoverflow.com/a/19306245/4686625">Poke's answer</a>:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; setup = '''
a = [2, -4, -2, 4, -3, -1, 3, 4, 2, 2]
from collections import OrderedDict
def unique():
    x = OrderedDict.fromkeys(a)
    return list(x)
'''
&gt;&gt;&gt; print (min(timeit.Timer('unique()', setup=setup).repeat(100, 1000)))
0.031305141204512665
</code></pre>
<p>The above answer:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; setup = '''
a = [2, -4, -2, 4, -3, -1, 3, 4, 2, 2]
def _order(orig):
    ordset = set()
    for x in orig:
        if x in ordset:
            continue
        ordset.add(x)
        yield x
def unique(orig):
    return list(_order(orig))
'''
&gt;&gt;&gt; print (min(timeit.Timer('unique(a)', setup=setup).repeat(100, 1000)))
0.0031761333803501657
</code></pre>
<p>This approach is nearly 10 times faster. For a small list like this, the difference is negligible, and Poke's answer is great. If you do happen to be doing this for massive lists (<em>e.g. 10000 times longer for instance</em>) however, the difference is 75 seconds compared to 5 seconds. </p>
</div>
<span class="comment-copy">your example does not preserve the order</span>
<span class="comment-copy">Checkout itertools <a href="http://docs.python.org/2/library/itertools.html#recipes" rel="nofollow noreferrer"><code>unique_everseen</code> recipe</a>.</span>
<span class="comment-copy">Those <a href="http://docs.python.org/2/library/itertools.html#recipes" rel="nofollow noreferrer">itertools recipes</a> are so useful. I can't count how many times I've used that powerset recipe.</span>
<span class="comment-copy"><code>x.keys()</code> will already return a list so there is no need to explicitly pass it to the <code>list</code> function.</span>
<span class="comment-copy">@ShashankGupta Python 3 will return a <code>KeysView</code> object, which is a special type iterator/generator.</span>
<span class="comment-copy">Oh okay sorry, I am in Python 2 so I didn't know.</span>
<span class="comment-copy"><code>list(x)</code> will also produce a list of the keys, but avoids creating the list view object (or intermediary list of keys in Python 2).</span>
