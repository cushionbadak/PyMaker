<div class="post-text" itemprop="text">
<p>It would be useful to save the session variables which could be loaded easily into memory at a later stage.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [23]: %logstart /tmp/session.log
Activating auto-logging. Current session state plus future input saved.
Filename       : /tmp/session.log
Mode           : backup
Output logging : False
Raw input log  : False
Timestamping   : False
State          : active

In [24]: x = 1

In [25]: %logstop

In [26]: quit()
Do you really want to exit ([y]/n)? y
</code></pre>
<p>Then we can restore the session with:</p>
<pre><code>% ipython -log /tmp/session.log 
Activating auto-logging. Current session state plus future input saved.
Filename       : ipython_log.py
...

In [1]: x
Out[1]: 1
</code></pre>
<p>For more on "Session logging and restoring" see <a href="http://ipython.org/ipython-doc/stable/interactive/reference.html#session-logging-and-restoring" rel="nofollow noreferrer">the docs</a>.</p>
<p>Note that this merely stores the <em>commands</em> run by IPython. It does not save the
state of the IPython session.  Restoring the session requires re-execution of
the commands.</p>
<hr/>
<p>If you set the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP" rel="nofollow noreferrer">PYTHONSTARTUP</a> environment variable to point at a file called, say, <code>startup.py</code>:</p>
<pre><code>PYTHONSTARTUP=/path/to/startup.py
</code></pre>
<p>then put the following in /path/to/startup.py:</p>
<pre><code>try:
    # https://stackoverflow.com/a/5377051/190597 (Tom Dunham)
    __IPYTHON__
except NameError:
    pass
else:
    # https://stackoverflow.com/a/15898875/190597 (user2261139)
    from IPython import get_ipython
    ipython = get_ipython()
    ipython.magic("%logstart /tmp/session.log")
</code></pre>
<p>then IPython will call %logstart automatically whenever you start an interactive session.</p>
</div>
<div class="post-text" itemprop="text">
<p>Looking for something similar I came across <a href="https://pypi.python.org/pypi/save_ipython_variables/0.0.3" rel="nofollow">save_ipython_variables</a>:</p>
<blockquote>
<p><code>save-ipython-variables</code> lets you ... save your global IPython
  variables to  disk easily, and load them back into the global
  namespace when you need them again, even in a whole new IPython
  session.</p>
</blockquote>
<p>I haven't had much chance to use it yet, but looks promising.</p>
</div>
<div class="post-text" itemprop="text">
<p>I haven't tried this yet, but starting from AE Drew's answer, I found a possible alternative. Looks like IPython has a built in magic command that does this called <a href="http://ipython.org/ipython-doc/rel-0.12/config/extensions/storemagic.html" rel="nofollow">%store</a>:</p>
<blockquote>
<p>%store magic for lightweight persistence. Stores variables, aliases and macros in IPythonâ€™s database. To automatically restore stored variables at startup, add this to your ipython_config.py file:</p>
</blockquote>
<pre><code>c.StoreMagic.autorestore = True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is also a magic command, <code>history</code>, that can be used to write all the commands/statements given by user.</p>
<p>Syntax : <code>%history -f file_name</code>.
Also <code>%save file_name start_line-end_line</code>, where star_line is the starting line number and end_line is ending line number. Useful in case of selective save.</p>
<p><code>%run</code> can be used to execute the commands in the saved file</p>
</div>
<div class="post-text" itemprop="text">
<p>Not my solution, but this seems to be the closest solution, if you are using ipython: <a href="https://stackoverflow.com/a/28552465/4752883">https://stackoverflow.com/a/28552465/4752883</a></p>
</div>
<span class="comment-copy">Have you considered <code>pickle</code>? It's pretty nice for saving things so they can be loaded again later ...</span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/947810/">How to save a Python interactive session?</a></span>
<span class="comment-copy">Why was this answer accepted? This does not address the question of saving all of the variables and data defined in the session (for which there is not a clean solution to my knowledge for Python).</span>
<span class="comment-copy">Totally agree - whilst its interesting its not the solution, I don't think. Does anyone know anything more about this? I would love to be able to just load a session and start from where I left off. Its common in other data analysis languages/suites</span>
<span class="comment-copy">Well. To the best of my knowledge, it is the solution if you know about it before you defined those variables. Another way would be to figure out how to run this by default when you start ipython command-line.</span>
<span class="comment-copy">Not the solution</span>
<span class="comment-copy">@alpha_989: I've edited the answer above to show how.</span>
<span class="comment-copy">Did anyone get the line <code>data = build_data_dictionary_from_db()</code> from this package to work?</span>
<span class="comment-copy">You need to call %store to store every variable you want to save. If your variable has refreshed value you need to call %store again. That sounds very annoying.</span>
<span class="comment-copy">Agree that this is a pain, but it's still useful and better than not having the ability to do this.</span>
<span class="comment-copy">if you are using ipython, you dont need to worry about the commands. Those are automatically saved as a session, anytime you enter a command. OP is asking about saving variables</span>
