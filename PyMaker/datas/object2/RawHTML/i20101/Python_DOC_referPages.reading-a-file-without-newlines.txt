<div class="post-text" itemprop="text">
<p>In Python, calling</p>
<pre><code>temp = open(filename,'r').readlines()
</code></pre>
<p>results in a list in which each element is a line in the file. Its a little stupid but still: <code>readlines()</code> also writes newline character to each element, something I do not wish to happen. How can I avoid it? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can read the whole file and split lines using <a href="https://docs.python.org/2/library/stdtypes.html#str.splitlines" rel="noreferrer"><code>str.splitlines</code></a>:</p>
<pre><code>temp = file.read().splitlines()
</code></pre>
<p>Or you can strip the newline by hand:</p>
<pre><code>temp = [line[:-1] for line in file]
</code></pre>
<p><strong>Note:</strong> this last solution only works if the file ends with a newline, otherwise the last line will lose a character.</p>
<p>This assumption is true in most cases (especially for files created by text editors, which often <em>do</em> add an ending newline anyway).</p>
<p>If you want to avoid this you can add a newline at the end of file:</p>
<pre><code>with open(the_file, 'r+') as f:
    f.seek(-1, 2)  # go at the end of the file
    if f.read(1) != '\n':
        # add missing newline if not already present
        f.write('\n')
        f.flush()
        f.seek(0)
    lines = [line[:-1] for line in f]
</code></pre>
<p>Or a simpler alternative is to <code>strip</code> the newline instead:</p>
<pre><code>[line.rstrip('\n') for line in file]
</code></pre>
<p>Or even, although pretty unreadable:</p>
<pre><code>[line[:-(line[-1] == '\n') or len(line)+1] for line in file]
</code></pre>
<p>Which exploits the fact that the return value of <code>or</code> isn't a boolean, but the object that was evaluated true or false.</p>
<hr/>
<p>The <code>readlines</code> method is actually equivalent to:</p>
<pre><code>def readlines(self):
    lines = []
    for line in iter(self.readline, ''):
        lines.append(line)
    return lines

# or equivalently

def readlines(self):
    lines = []
    while True:
        line = self.readline()
        if not line:
            break
        lines.append(line)
    return lines
</code></pre>
<p>Since <code>readline()</code> keeps the newline also <code>readlines()</code> keeps it.</p>
<p><strong>Note:</strong> for symmetry to <code>readlines()</code> the <a href="https://docs.python.org/3/library/io.html#io.IOBase.writelines" rel="noreferrer"><code>writelines()</code></a> method does <em>not</em> add ending newlines, so <code>f2.writelines(f.readlines())</code> produces an exact copy of <code>f</code> in <code>f2</code>.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>temp = open(filename,'r').read().split('\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>temp = open(filename,'r').read().splitlines()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this is the best option.</p>
<p><code> temp = [line.strip() for line in file.radlines()]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>another example:</p>
<p>Reading file one row at the time. Removing unwanted chars with from end of the string <a href="https://docs.python.org/2/library/stdtypes.html#str.rstrip" rel="nofollow noreferrer"><code>str.rstrip(chars)</code></a></p>
<pre><code>with open(filename, 'r') as fileobj:
    for row in fileobj:
        print( row.rstrip('\n') )
</code></pre>
<p>see also <code>str.strip([chars])</code> and <code>str.lstrip([chars])</code></p>
<p>(python &gt;= 2.0)</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>u=open("url.txt","r")  
url=u.read().replace('\n','')  
print(url)  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-python prettyprint-override"><code>import csv

with open(filename) as f:
    csvreader = csv.reader(f)
    for line in csvreader:
         print(line[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>my_file = open("first_file.txt", "r")
for line in my_file.readlines():
    if line[-1:] == "\n":
        print(line[:-1])
    else:
        print(line)
my_file.close() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def getText():
    file=open("ex1.txt","r");

    names=file.read().split("\n");
    for x,word in enumerate(names):
        if(len(word)&gt;=20):
            return 0;
            print "length of ",word,"is over 20"
            break;
        if(x==20):
            return 0;
            break;
    else:
        return names;


def show(names):
    for word in names:
        len_set=len(set(word))
        print word," ",len_set


for i in range(1):

    names=getText();
    if(names!=0):
        show(names);
    else:
        break;
</code></pre>
</div>
<span class="comment-copy">Use strip: <code>[l.strip('\n\r') for l in temp]</code>. Or even <code>rstrip</code>. And since iteration here it can be <code>in open</code> instead of <code>in temp</code>.</span>
<span class="comment-copy">I would be nice if in Python 3 there was a value to set open's <code>newline</code> argument to that chomped trailing newlines.</span>
<span class="comment-copy">Note that <code>[line.rstrip('\n') for line in file]</code> will remove more than one trailing <code>\n</code>.</span>
<span class="comment-copy">More simply, <code>[line[:-(line[-1] == '\n') or len(line)+1] for line in file]</code> could instead be <code>[line[:-(line[-1] == '\n') or None] for line in file]</code>.</span>
<span class="comment-copy">These solutions read the entire file into memory. Changing the square brackets of a list comprehension to parentheses makes a generator expression which lets you iterate over the file one line at a time:  <code>for line in (x.strip() for x in f):</code></span>
<span class="comment-copy">@velotron That's not really the point of the question/answer. Also: keep in mind that <code>with</code> closes the files when the block terminates, which means you cannot do <code>with open(...) as f: lines = (line for line in f)</code> and use <code>lines</code> outside the <code>with</code> because you'll get an I/O error. You can be lazy using a genexp, but you must consume it before closing the file.</span>
<span class="comment-copy">@WesTurner. But there won't be more than one trailing newline. The extra newline will be part of the next empty line</span>
<span class="comment-copy">What would happen with <code>\r\n</code> newlines though? ;)</span>
<span class="comment-copy">Python automatically handles universal newlines, thus <code>.split('\n')</code> will split correctly, independently of the newline convention. It would matter if you read the file in binary mode.In that case <code>splitlines()</code> handles universal newlines while <code>split('\n')</code> doesn't.</span>
<span class="comment-copy">And there's always <code>os.linesep</code> :)</span>
<span class="comment-copy">@LarsH, it would help in some circumstances, on my system <code>\r\n</code> line endings are <i>not</i> converted to <code>\n</code>, whether read as text or binary, so <code>os.linesep</code> would work where <code>\n</code> does not. But <code>splitlines</code> is clearly the better choice, in the case you mention where the file does not match the os. Really I mostly mentioned it in case people looking at this discussion were unaware of its existence.</span>
<span class="comment-copy">@askewchan Maybe you're using an out of date version of Python. I believe that as of Python 3, universal newlines are enabled by default i.e. <code>\r\n</code> would be converted for text files even when you are running on Linux.</span>
<span class="comment-copy">Are you sure this closes the file ? I think it does not, so it is not really a one-liner...</span>
<span class="comment-copy">Correction for the typo: temp = [line.strip() for line in file.readlines()]</span>
<span class="comment-copy">While this code snippet may solve the question, <a href="//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers">including an explanation</a> really helps to improve the quality of your post. Remember that you are answering the question for readers in the future, and those people might not know the reasons for your code suggestion. Please also try not to crowd your code with explanatory comments, as this reduces the readability of both the code and the explanations!</span>
<span class="comment-copy">But what if the line has a comma in it?</span>
<span class="comment-copy">Please add some explanation so that it will be useful to others.</span>
