<div class="post-text" itemprop="text">
<p>Basically my question is say you have an list containing 'None' how would you try retrieving the sum of the list. Below is an example I tried which doesn't work and I get the error: <code>TypeError: unsupported operand type(s) for +: 'int' and 'NoneType'</code>. Thanks</p>
<pre><code>def sumImport(self):
    my_list = [[1,2,3,None],[1,2,3],[1,1],[1,1,2,2]]
    k = sum(chain.from_iterable(my_list))
    return k
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>filter</code> function</p>
<pre><code>&gt;&gt;&gt; sum(filter(None, [1,2,3,None]))
6
</code></pre>
<p><strong>Updated from comments</strong></p>
<p>Typically <code>filter</code> usage is <code>filter(func, iterable)</code>, but passing <code>None</code> as first argument is a special case, described in <a href="http://docs.python.org/library/functions.html#filter">Python docs</a>. Quoting:</p>
<blockquote>
<p>If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Remove <code>None</code> (and zero) elements before summing by using <code>filter</code>:</p>
<pre><code>&gt;&gt;&gt; k = sum(filter(None, chain.from_iterable(my_list)))
&gt;&gt;&gt; k
20
</code></pre>
<p>To see why this works, see the <a href="http://docs.python.org/library/functions.html#filter" rel="noreferrer">documentation for <code>filter</code></a>:</p>
<blockquote>
<p><code>filter(function, iterable)</code></p>
<p>Construct a list from those elements of <code>iterable</code> for which <code>function</code> returns true. <code>iterable</code> may be either a sequence, a container which supports iteration, or an iterator. If iterable is a string or a tuple, the result also has that type; otherwise it is always a list. If function is <code>None</code>, the identity function is assumed, that is, all elements of iterable that are false are removed.</p>
<p>Note that <code>filter(function, iterable)</code> is equivalent to <code>[item for item in iterable if function(item)]</code> if function is not <code>None</code> and <code>[item for item in iterable if item]</code> if function is <code>None</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Another suggestion:</p>
<pre><code>from itertools import chain
k = sum(x for x in chain.from_iterable(my_list) if x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you want to treat <code>None</code> as zero, a simple way is</p>
<pre><code>sum(x if x is not None else 0 for x in chain.from_iterable(my_list))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You always have the option of just writing the loop you want:</p>
<pre><code>k = 0
for sublist in my_list:
    for val in sublist:
        if val is not None:
            k += val
</code></pre>
<p>But it certainly doesn’t hurt to know about <code>filter</code> either.</p>
</div>
<div class="post-text" itemprop="text">
<p>Explicitly, this is equivalent to filter:</p>
<pre><code>k = sum([x for x in chain.from_iterable(my_list) if x])
</code></pre>
<p>That saves me from remembering another function.  :P</p>
</div>
<span class="comment-copy">Maybe useful to mention for people who don't know (like me): <i>"If <code>function</code> is <code>None</code>, the identity function is assumed, that is, all elements of <code>iterable</code> that are false are removed."</i> (<a href="http://docs.python.org/library/functions.html#filter" rel="nofollow noreferrer">docs</a>)</span>
<span class="comment-copy">@FelixKling Updated my answer with doc link.</span>
<span class="comment-copy">Notice every falsy element will be filtered : <code>list(filter(None, [0, 1, 2, None, False, True]))  # = [1, 2, True]</code></span>
<span class="comment-copy">Cheers Mark this helped me out</span>
<span class="comment-copy">+1 Very simple.</span>
<span class="comment-copy">It would fail if you pass in the iterable some object which is "false" but nonetheless give some contribute to the sum. Using <code>if x is None</code> would solve this[even though I don't know why someone would create an object that results "false" but gives a contribute to a sum].</span>
<span class="comment-copy">@Bakuriu: There doesn't exist <i>anything</i> that tests false but could contribute to a sum.</span>
<span class="comment-copy">This would do that: <code>class MyClass(object): def __nonzero__(self):return False def __add__(self, other): return other + 1</code>. So there may exist something like this, even though no built-in type has this "property", and anyway creating such an object is probably not really useful.</span>
<span class="comment-copy">@Mausy5043: Oops. Yes, actually: <code>from itertools import chain</code> is required. See <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">You may as well drop the <code>None</code> values, since <code>0</code> is not going to contribute to the total sum either.</span>
<span class="comment-copy">@MartijnPieters This answer is helpful for those that want to add a value to each element in a list that may contain some <code>None</code> values.</span>
<span class="comment-copy">@virtualxtc: yes, but the <code>if x is not None</code> test should go to the <i>end</i> of the loop, to filter out elements rather than add another <code>0</code> to the sum: <code>sum(x for x in chain.from_iterable(my_list) if x is not None)</code>. I didn't say the answer was not helpful!</span>
