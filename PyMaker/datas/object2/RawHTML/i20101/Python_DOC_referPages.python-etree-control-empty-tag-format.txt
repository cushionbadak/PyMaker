<div class="post-text" itemprop="text">
<p>When creating an XML file with Python's etree, if we write to the file an empty tag using <code>SubElement</code>, I get:</p>
<pre><code>&lt;MyTag /&gt;
</code></pre>
<p>Unfortunately, our XML parser library used in Fortran doesn't handle this even though it's a correct tag. It needs to see:</p>
<pre><code>&lt;MyTag&gt;&lt;/MyTag&gt;
</code></pre>
<p>Is there a way to change the formatting rules or something in etree to make this work?</p>
</div>
<div class="post-text" itemprop="text">
<p>As of Python 3.4, you can use the <code>short_empty_elements</code> argument for both the <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring" rel="nofollow noreferrer"><code>tostring()</code> function</a> and the <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.write" rel="nofollow noreferrer"><code>ElementTRee.write()</code> method</a>:</p>
<pre><code>&gt;&gt;&gt; from xml.etree import ElementTree as ET
&gt;&gt;&gt; ET.tostring(ET.fromstring('&lt;mytag/&gt;'), short_empty_elements=False)
b'&lt;mytag&gt;&lt;/mytag&gt;'
</code></pre>
<p>In older Python versions, (2.7 through to 3.3), as a work-around you can use the <code>html</code> method to write out the document:</p>
<pre><code>&gt;&gt;&gt; from xml.etree import ElementTree as ET
&gt;&gt;&gt; ET.tostring(ET.fromstring('&lt;mytag/&gt;'), method='html')
'&lt;mytag&gt;&lt;/mytag&gt;'
</code></pre>
<p>Both the <code>ElementTree.write()</code> method and the <code>tostring()</code> function support the <code>method</code> keyword argument.</p>
<p>On even earlier versions of Python (2.6 and before) you can install the external ElementTree library; version 1.3 supports that keyword.</p>
<p>Yes, it sounds a little weird, but the <code>html</code> output mostly outputs empty elements as a start and end tag. Some elements still end up as empty tag elements; specifically <code>&lt;link/&gt;</code>, <code>&lt;input/&gt;</code>, <code>&lt;br/&gt;</code> and such. Still, it's that or upgrade your Fortran XML parser to actually parse standards-compliant XML!</p>
</div>
<div class="post-text" itemprop="text">
<p>This was directly solved in Python 3.4. From then, the <code>write</code> method of <code>xml.etree.ElementTree.ElementTree</code> has the <code>short_empty_elements</code> parameter which: </p>
<blockquote>
<p>controls the formatting of elements that contain no content. If True (the default), they are emitted as a single self-closed tag, otherwise they are emitted as a pair of start/end tags.</p>
</blockquote>
<p>More details in the <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.write" rel="nofollow noreferrer">xml.etree documentation</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding an empty <code>text</code> is another option:</p>
<pre><code>etree.SubElement(parent, 'child_tag_name').text=''
</code></pre>
<p>But note that this will change not only the representation but also the structure of the document: i.e. <code>child_el.text</code> will be <code>''</code> instead of <code>None</code>.</p>
<p>Oh, and like Martijn said, try to use better libraries.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you have sed available, you could pipe the output of your python script to </p>
<pre><code>sed -e "s/&lt;\([^&gt;]*\) \/&gt;/&lt;\1&gt;&lt;\/\1&gt;/g"
</code></pre>
<p>Which will find any occurence of <code>&lt;Tag /&gt;</code> and replace it by <code>&lt;Tag&gt;&lt;/Tag&gt;</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Paraphrasing the code, the version of <code>ElementTree.py</code> I use contains the following in a <code>_write</code> method:</p>
<pre><code>write('&lt;' + tagname)
...
if node.text or len(node): # this line is literal
    write('&gt;')
    ...
    write('&lt;/%s&gt;' % tagname)
else:
    write(' /&gt;')
</code></pre>
<p>To steer the program counter I created the following:</p>
<pre><code>class AlwaysTrueString(str):
    def __nonzero__(self): return True
true_empty_string = AlwaysTrueString()
</code></pre>
<p>Then I set <code>node.text = true_empty_string</code> on those ElementTree nodes where I want an open-close tag rather than a self-closing one.</p>
<p>By "steering the program counter" I mean constructing a set of inputs—in this case an object with a somewhat curious truth test—to a library method such that the invocation of the library method traverses its control flow graph the way I want it to. This is ridiculously brittle: in a new version of the library, my hack might break—and you should probably treat "might" as "almost guaranteed". In general, don't break abstraction barriers. It just worked for me here.</p>
</div>
<span class="comment-copy">Unfortunately, there's no other Fortran XML parser to use, so this is our only option. Thanks!</span>
<span class="comment-copy">Any chance there is a way to maintain the case of the tag? Apparently case sensitivity is an issue also and <code>html</code> doesn't preserve case...</span>
<span class="comment-copy">@tpg2114: nope, sorry.</span>
<span class="comment-copy">Can't have it all... Thanks for answering the question though!</span>
<span class="comment-copy">If I want to read an XML and write to another XML after adding End tags, how can I do that?</span>
<span class="comment-copy">This doesn't work in Python 2.7. It will ignore it, except if you actually write something, like a whitespace for example, <code>' '</code>.</span>
<span class="comment-copy">This doesn't work in Python 2.7 at least. I added the class below my imports, and then did assign the <code>true_empty_string</code> to the node's <code>text</code>, but nothing happened.</span>
