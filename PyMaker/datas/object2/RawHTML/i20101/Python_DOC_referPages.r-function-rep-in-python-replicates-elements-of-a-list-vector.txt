<div class="post-text" itemprop="text">
<p>The R function rep() replicates each element of a vector:</p>
<pre><code>&gt; rep(c("A","B"), times=2)
[1] "A" "B" "A" "B"
</code></pre>
<p>This is like the list multiplication in Python:</p>
<pre><code>&gt;&gt;&gt; ["A","B"]*2
['A', 'B', 'A', 'B']
</code></pre>
<p>But with the rep() R function it is also possible to specifiy the number of repeats for each element of the vector:</p>
<pre><code>&gt; rep(c("A","B"), times=c(2,3))
[1] "A" "A" "B" "B" "B"
</code></pre>
<p>Is there such a function availbale in Python ? Otherwise how could one define it ? By the way I'm also interested in such a function for duplicating rows of an array.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>numpy</code> arrays and the <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.repeat.html">numpy.repeat</a> function:</p>
<pre><code>import numpy as np

x = np.array(["A", "B"])
print np.repeat(x, [2, 3], axis=0)

['A' 'A' 'B' 'B' 'B']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not sure if there's a built-in available for this, but you can try something like this:</p>
<pre><code>&gt;&gt;&gt; lis = ["A", "B"]
&gt;&gt;&gt; times = (2, 3)
&gt;&gt;&gt; sum(([x]*y for x,y in zip(lis, times)),[])
['A', 'A', 'B', 'B', 'B']
</code></pre>
<p>Note that <code>sum()</code> runs in quadratic time. So, it's not the recommended way.</p>
<pre><code>&gt;&gt;&gt; from itertools import chain, izip, starmap
&gt;&gt;&gt; from operator import mul
&gt;&gt;&gt; list(chain.from_iterable(starmap(mul, izip(lis, times))))
['A', 'A', 'B', 'B', 'B']
</code></pre>
<p><strong>Timing comparions:</strong></p>
<pre><code>&gt;&gt;&gt; lis = ["A", "B"] * 1000
&gt;&gt;&gt; times = (2, 3) * 1000
&gt;&gt;&gt; %timeit list(chain.from_iterable(starmap(mul, izip(lis, times))))
1000 loops, best of 3: 713 Âµs per loop
&gt;&gt;&gt; %timeit sum(([x]*y for x,y in zip(lis, times)),[])
100 loops, best of 3: 15.4 ms per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you say "array" and mention R. You may want to use numpy arrays anyways, and then use:</p>
<pre><code>import numpy as np
np.repeat(np.array([1,2]), [2,3])
</code></pre>
<p>EDIT: Since you mention you want to repeat rows as well, I think you should use numpy. <code>np.repeat</code> has an axis argument to do this.</p>
<p>Other then that, maybe:</p>
<pre><code>from itertools import izip, chain, repeat
list(chain(*(repeat(a,b) for a, b in izip([1,2], [2,3]))))
</code></pre>
<p>As it doesn't make the assumption you have  a list or string to multiply. Though I admit, passing everything as argument into chain is maybe not perfect, so writing your own iterator may be better.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>l = ['A','B']
n = [2, 4]
</code></pre>
<p>Your example uses strings which are already iterables.
You can produce a result string which is similar to a list.</p>
<pre><code>''.join([e * m for e, m in zip(l, n)])
'AABBBB'
</code></pre>
<p>Update: the list comprehension is not required here:</p>
<pre><code>''.join(e * m for e, m in zip(l, n))
'AABBBB'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What do you think about this way?</p>
<p>To repeat a value:</p>
<pre><code>&gt;&gt;&gt; repetitions=[]
&gt;&gt;&gt; torep=3
&gt;&gt;&gt; nrep=5
&gt;&gt;&gt; for i in range(nrep):
&gt;&gt;&gt;     i=torep
&gt;&gt;&gt;     repetitions.append(i)
[3, 3, 3, 3, 3]
</code></pre>
<p>To repeat a sequence:</p>
<pre><code>&gt;&gt;&gt; repetitions=[]
&gt;&gt;&gt; torep=[1,2,3,4]
&gt;&gt;&gt; nrep= 2
&gt;&gt;&gt; for i in range(nrep):
&gt;&gt;&gt;     repetitions=repetitions+torep
&gt;&gt;&gt; print(repetitions)
[1, 2, 3, 4, 1, 2, 3, 4]
</code></pre>
</div>
<span class="comment-copy">I think the answer would be better if you straight up removed the <code>sum(...)</code> solution that should never be used anyway. And I want to point out that <code>izip(lis, times)</code> only works because the input list contains strings. Non-iterables in the input like <code>lis = [1, 2]</code> would cause a crash. You should just use <a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow noreferrer"><code>itertools.repeat</code></a> instead of <code>mul</code>.</span>
<span class="comment-copy">@AshwiniChaudhary Correct...for your solution - But as I write above I suggest to go with a string instead of a list</span>
<span class="comment-copy">but you can skip the list comprehension part and use just : <code>''.join(e * m for e, m in zip(l, n))</code></span>
<span class="comment-copy">@AshwiniChaudhary Cool!...Thx...I'll update my answer</span>
