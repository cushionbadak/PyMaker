<div class="post-text" itemprop="text">
<p>I'm new to python and I'm trying to do a simple application (age calculator); I'm using Python 3.</p>
<p>This is my code:</p>
<pre><code>date=2012
age=input("type in the date you born to calculate your age")

print ("your age is ") + (date-age)
</code></pre>
<p>It seems fine to me, but it gives me a <code>TypeError: cannot concatente 'str' and 'int' objects</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>print("Your age is ",date-int(age))
</code></pre>
<p><code>str</code> will cast your integer result to a string so that it can properly be "added" to the rest of the string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Pass everything as a series of arguments to the <code>print</code> function:</p>
<pre><code>print("your age is", date - int(age))
</code></pre>
<p>The <code>print()</code> function will convert the result of <code>date - int(age)</code> to a string for you. Note that you need to turn <code>age</code> (a string) into an integer first before you can subtract it from <code>date</code> though.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is <a href="http://en.wikipedia.org/wiki/Strong_typing" rel="nofollow">strongly typed</a> so you need to convert your data to the appropriate type.</p>
<ul>
<li><p><code>age</code> is a <code>str</code> (string), because it comes from an input. You should write:</p>
<p><code>
    date - int(age)
</code></p></li>
<li><p><code>print ("your age is ") + (date-age)</code> is not going to work for two reasons:  </p>
<ol>
<li><p><code>print</code> in python 3 is a function so it only consider <code>print ("your age is ") + (date-age)</code> as its argument list;</p></li>
<li><p>Again, you're concatanating a <code>str</code> and an <code>int</code>, which is illegal in a strongly typed language.</p></li>
</ol></li>
</ul>
<p>The last conversion can be overridden since <code>print</code> does all the job for you:</p>
<pre><code>print("your age is ", date - int(age))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>input</code> is going to give you a string.  2012, however is an int.  They need to both be of arithmetic types to do mathematical operations on them.  You want input to be a number, probably an int.  Cast it as such with <code>int(age)</code>.
So you would do <code>print("Your age is ", date - int(age))</code></p>
<p>To nitpick your code, what if I was born in December 1992?  Then your code would say I'm 20 even though I'd actually be 19.  Also, what if I type in the actual date I was born, <code>June 6, 1992</code>?</p>
<p>These aren't relevant if you're just getting started and learning the syntax, but it's good to think about because you'll quickly find that those kinds of things are what will actually give you problems in programming, while the basic syntax and little technicalities tend to be things that you can look up on Google or use a cheat-sheet for (my preferred approach since I work with so many different languages with C-style syntax) after you gain familiarity with the language.</p>
</div>
<div class="post-text" itemprop="text">
<p>As you learn python, it's a good idea to take the error as it appears on the last line and feed that to a search engine.</p>
<p><code>TypeError: cannot concatenate 'str' and 'int' objects</code> is by no means unique.</p>
<p><a href="https://stackoverflow.com/questions/7001664/typeerror-cannot-concatenate-str-and-int-objects">TypeError: cannot concatenate 'str' and 'int' objects</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The issue here is that you're trying to concatenate a string and an int. That is not supported by Python (or most other languages), and that is what the error message is telling you. What you've done is wrong because you are mixing up two different concepts</p>
<ol>
<li><p>Incorrectly called the function - you should call it this way.</p>
<pre><code>print('Your age is: ', date-age)
</code></pre></li>
<li><p>You used the + operator. This is an alternate method for concatenating a string and number, however to do that you have to first make sure they're both of the same type. In this case - String. You can do this by using the string function.</p>
<pre><code>print('Your age is: ' + str(date-age))
</code></pre></li>
</ol>
<p>A better way to have done this would be by using string formatting, mainly because it supports various formats without the need to convert them into strings as well as making a long string of text with multiple values easier.</p>
<pre><code>print('Your age is: %d' % date-age)
</code></pre>
<p>You can read more about string formatting <a href="http://docs.python.org/library/stdtypes.html#string-formatting" rel="nofollow">here</a>.</p>
<p>:)</p>
</div>
<div class="post-text" itemprop="text">
<p>First thing you want to do is keep everything you want to print within the print() function brackets.</p>
<pre><code>print ("your age is ") + (date-age)
</code></pre>
<p>Will not work. </p>
<p>This may work better</p>
<pre><code> print("your age is" + str(date-int(age)))
</code></pre>
<p>As you move on with python you will realize why you can not do what you did with the print function. 
Anyway I hope this was helpful for you. 
Also you may notice in the code I used some functions; str() and int(). These are type conversion function. You may have came across these before or you will do very soon. </p>
</div>
<span class="comment-copy">Do you know about types of variables such as strings and integers?</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/7001664/typeerror-cannot-concatenate-str-and-int-objects">TypeError: cannot concatenate 'str' and 'int' objects</a></span>
<span class="comment-copy">I don't think it's a dup; that poster apparently knew that you can't add a string and an integer, but didn't know enough about operator precedence to realize that he <i>was</i> adding a string and an integer.</span>
<span class="comment-copy">This is not going to fly in Python 3; <code>print()</code> is a function, you are now adding <code>None</code> to a string as <code>print()</code> returns nothing.</span>
<span class="comment-copy">@MartijnPieters whoops. Editing.</span>
<span class="comment-copy">You cannot do <code>date - age</code>, they're different types (date is <code>str</code>, while <code>age</code> is <code>int</code>). As I wrote in my answer it should be <code>date - int(age)</code>. Also the <code>str</code> casting isn't needed because print converts its arguments to <code>str</code> by itself.</span>
<span class="comment-copy">@NadirSampaoli Whoops - didn't look at how date and age are set up. Fixed</span>
<span class="comment-copy">As @NadirSampaoli says, doing a <code>str</code> around an argument to <code>print</code> is at best unnecessary, and can be misleading.</span>
<span class="comment-copy">+1 but perhaps you could say why string formatting is better? (and link to the relevant part of the doc?) :)</span>
<span class="comment-copy">If you're going to recommend string formatting, recommend new-style <code>{}</code> formatting, not old-style <code>'%s'</code> formatting. If you look at <a href="http://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">the docs</a> on old-style formatting, the very first thing you see is a big <b>*Note</b> saying "The formatting operations described here exhibit a variety of quirks that lead to a number of common errors… the newer str.format() interface helps avoid these errors, and also provides a generally more powerful, flexible and extensible approach…"</span>
<span class="comment-copy">I wasn't aware of it. But I'll certainly look into it and improve my answer accordingly. Thanks :)</span>
