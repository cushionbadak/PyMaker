<div class="post-text" itemprop="text">
<p>I'm trying to pickle quite an involved object hierarchy and getting the exception:</p>
<pre><code>pickle.PicklingError: Can't pickle &lt;class 'function'&gt;: attribute lookup builtins.function failed
</code></pre>
<p>Are there any reasonable methods one can use to test the pickleablility of an object hierarchy? My aim would be to find the location of the offending function</p>
</div>
<div class="post-text" itemprop="text">
<p>To do this, I'd use <a href="https://github.com/uqfoundation/dill" rel="nofollow noreferrer">dill</a>, which can serialize almost anything in python. Dill also has <a href="https://github.com/uqfoundation/dill/blob/master/dill/detect.py" rel="nofollow noreferrer">some good tools</a> for helping you understand what is causing your pickling to fail when your code fails.</p>
<pre><code>&gt;&gt;&gt; import dill
&gt;&gt;&gt; dill.loads(dill.dumps(your_bad_object))
&gt;&gt;&gt; ...
&gt;&gt;&gt; # if you get a pickling error, use dill's tools to figure out a workaround
&gt;&gt;&gt; dill.detect.badobjects(your_bad_object, depth=0)
&gt;&gt;&gt; dill.detect.badobjects(your_bad_object, depth=1)
&gt;&gt;&gt; ...
</code></pre>
<p>If you absolutely wanted to, you could use dill's <code>badobjects</code> (or one of the other detection functions) to dive recursively into your object's reference chain, and pop out the unpickleable objects, instead of calling it at at every depth, as above.</p>
<p>Also, <a href="http://mg.pov.lt/objgraph/" rel="nofollow noreferrer">objgraph</a> is a pretty handy compliment to the test suite too.</p>
<pre><code>&gt;&gt;&gt; # visualize the references in your bad objects
&gt;&gt;&gt; objgraph.show_refs(your_bad_object, filename='your_bad_object.png')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I did this, it does the trick for me a lot of the time... I'll update this once I have found something totally foolproof</p>
<p>It makes a bunch of prints then raises an exception if there is one to be raised so you can see what part of the object hierarchy is causing the problem.</p>
<pre><code>def test_pickle(xThing,lTested = []):
    import pickle
    if id(xThing) in lTested:
        return lTested
    sType = type(xThing).__name__
    print('Testing {0}...'.format(sType))

    if sType in ['type','int','str']:
        print('...too easy')
        return lTested
    if sType == 'dict':
        print('...testing members')
        for k in xThing:
            lTested = Pickalable.test_pickle(xThing[k],lTested)
        print('...tested members')
        return lTested
    if sType == 'list':
        print('...testing members')
        for x in xThing:
            lTested = Pickalable.test_pickle(x)
        print('...tested members')
        return lTested

    lTested.append(id(xThing))
    oClass = type(xThing)

    for s in dir(xThing):
        if s.startswith('_'):
            print('...skipping *private* thingy')
            continue
        #if it is an attribute: Skip it
        try:
            xClassAttribute = oClass.__getattribute__(oClass,s)
        except AttributeError:
            pass
        else:
            if type(xClassAttribute).__name__ == 'property':
                print('...skipping property')
                continue

        xAttribute = xThing.__getattribute__(s)
        print('Testing {0}.{1} of type {2}'.format(sType,s,type(xAttribute).__name__))
        #if it is a function make sure it is stuck to the class...
        if type(xAttribute).__name__ == 'function':
            raise Exception('ERROR: found a function')
        if type(xAttribute).__name__ == 'method':
            print('...skipping method')
            continue
        if type(xAttribute).__name__ == 'HtmlElement':
            continue
        if type(xAttribute) == dict:
            print('...testing dict values for {0}.{1}'.format(sType,s))
            for k in xAttribute:
                lTested = Pickalable.test_pickle(xAttribute[k])
                continue
            print('...finished testing dict values for {0}.{1}'.format(sType,s))

        try:
            oIter = xAttribute.__iter__()
        except AttributeError:
            pass
        except AssertionError:
            pass #lxml elements do this
        else:
            print('...testing iter values for {0}.{1} of type {2}'.format(sType,s,type(xAttribute).__name__))
            for x in xAttribute:   
                lTested = Pickalable.test_pickle(x,lTested)
            print('...finished testing iter values for {0}.{1}'.format(sType,s))

        try:
            xAttribute.__dict__
        except AttributeError:
            pass
        else:
            #this attribute should be explored seperately...
            lTested = Pickalable.test_pickle(xAttribute,lTested)
            continue
        pickle.dumps(xAttribute)


    print('Testing {0} as complete object'.format(sType))
    pickle.dumps(xThing)
    return lTested   
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a slightly tweaked version of @Sheena's code that also works with python 2 and some additional types:</p>
<pre><code>def test_pickle(xThing, lTested = []):
    import pickle
    if id(xThing) in lTested:
        return lTested
    sType = type(xThing).__name__
    print('Testing {0}...'.format(sType))

    if sType in ['type','int','str', 'bool', 'NoneType', 'unicode']:
        print('...too easy')
        return lTested
    if sType == 'dict':
        print('...testing members')
        for k in xThing:
            lTested = test_pickle(xThing[k],lTested)
        print('...tested members')
        return lTested
    if sType == 'list':
        print('...testing members')
        for x in xThing:
            lTested = test_pickle(x)
        print('...tested members')
        return lTested

    lTested.append(id(xThing))
    oClass = type(xThing)

    for s in dir(xThing):
        if s.startswith('_'):
            print('...skipping *private* thingy')
            continue
        #if it is an attribute: Skip it
        try:
            xClassAttribute = oClass.__getattribute__(oClass,s)
        except (AttributeError, TypeError):
            pass
        else:
            if type(xClassAttribute).__name__ == 'property':
                print('...skipping property')
                continue

        xAttribute = xThing.__getattribute__(s)
        print('Testing {0}.{1} of type {2}'.format(sType,s,type(xAttribute).__name__))
        if type(xAttribute).__name__ == 'function':
            print("...skipping function")
            continue
        if type(xAttribute).__name__ in ['method', 'instancemethod']:
            print('...skipping method')
            continue
        if type(xAttribute).__name__ == 'HtmlElement':
            continue
        if type(xAttribute) == dict:
            print('...testing dict values for {0}.{1}'.format(sType,s))
            for k in xAttribute:
                lTested = test_pickle(xAttribute[k])
                continue
            print('...finished testing dict values for {0}.{1}'.format(sType,s))

        try:
            oIter = xAttribute.__iter__()
        except (AttributeError, TypeError):
            pass
        except AssertionError:
            pass #lxml elements do this
        else:
            print('...testing iter values for {0}.{1} of type {2}'.format(sType,s,type(xAttribute).__name__))
            for x in xAttribute:
                lTested = test_pickle(x,lTested)
            print('...finished testing iter values for {0}.{1}'.format(sType,s))

        try:
            xAttribute.__dict__
        except AttributeError:
            pass
        else:
            #this attribute should be explored seperately...
            lTested = test_pickle(xAttribute,lTested)
            continue
        print(0, xThing, xAttribute)
        pickle.dumps(xAttribute)

    print('Testing {0} as complete object'.format(sType))
    pickle.dumps(xThing)
    return lTested
</code></pre>
<p>I found this the most useful option (also from the far more forgiving <code>dill</code> at places where pickle wasn't). You can simply run it with</p>
<pre><code>test_pickle(my_complex_object)
print("Done!")
</code></pre>
</div>
<span class="comment-copy">dill may be too strong than <code>pickle</code> so that it can pickle which <code>pickle</code> can not pickle, and I can not find what <code>pickle</code> can not pickle...</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a>.  Similar link for python 2.x</span>
<span class="comment-copy">@acgtyrant - I just used <code>dill.load()</code> in place of a pickle load to debug why a pickle produced by <code>pickle.dumps</code> wouldn't work.</span>
