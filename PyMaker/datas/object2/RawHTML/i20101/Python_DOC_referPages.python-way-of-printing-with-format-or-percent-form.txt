<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5082452/python-string-formatting-vs-format">Python string formatting: % vs. .format</a>
<span class="question-originals-answer-count">
                    17 answers
                </span>
</li>
</ul>
</div>
<p>In Python there seem to be two different ways of generating formatted output:</p>
<pre><code>user = "Alex"
number = 38746
print("%s asked %d questions on stackoverflow.com" % (user, number))
print("{0} asked {1} questions on stackoverflow.com".format(user, number))
</code></pre>
<p>Is there one way to be preferred over the other? Are they equivalent, what is the difference? What form should be used, especially for Python3?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>format</code> method, especially if you're concerned about Python 3 and the future.  From <a href="http://docs.python.org/release/3.1.5/library/stdtypes.html#old-string-formatting-operations" rel="noreferrer">the documentation</a>:</p>
<blockquote>
<p>The formatting operations described here [% substitutions] are obsolete and may go away in future versions of Python. Use the new String Formatting in new code.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>.format</code> was introduced in Python2.6</p>
<p>If you need backward compatibility with earlier Python, you should use <code>%</code></p>
<p>For Python3 and newer you should use <code>.format</code> for sure</p>
<p><code>.format</code> is more powerful than <code>%</code>. Porting <code>%</code> to <code>.format</code> is easy but the other way round can be non trivial</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use both .No one said % formatting expression is deprecated.However,as stated before the format method call is a tad more powerful.
Also note that the % expressions are bit more concise and easier to code.Try them and see what suits you best</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/py3k/library/stdtypes.html#old-string-formatting-operations" rel="noreferrer">The docs</a> say that the <code>format</code> method is preferred for new code. There are currently no plans to remove % formatting, though.</p>
</div>
<span class="comment-copy">New documentation says this about the percent operator: "The formatting operations described here exhibit a variety of quirks that lead to a number of common errors ..." but it is <b>not</b> deprecated. <a href="http://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">It's not officially deprecated, but you're encouraged not to use it.</span>
<span class="comment-copy">Related: <a href="http://bugs.python.org/issue14123" rel="nofollow noreferrer">bugs.python.org/issue14123</a></span>
<span class="comment-copy">Is .format significantly slower than % ?</span>
<span class="comment-copy">From Python 3.6, you can <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">use f-strings to access previously defined variables</a>: <code>print(f"{user} asked {number} questions on stackoverflow.com"</code></span>
<span class="comment-copy">how is it more powerful ?</span>
<span class="comment-copy">@yossi Here's one example <a href="http://stackoverflow.com/a/3228928/174728">stackoverflow.com/a/3228928/174728</a>. It also lets you do key/index lookups <code>import sys;"{[version]}".format(vars(sys))</code></span>
<span class="comment-copy">how about: <code>import sys;"%(version)s" % (vars(sys))</code></span>
<span class="comment-copy">@Pax0r: The linked example is <code>'{num:{fill}{width}}'.format(num=123, fill='0', width=6)</code>. You can't do this with <code>%</code> unless you "double escape" and apply it twice</span>
<span class="comment-copy">'%s' % (str(123).rjust(6, '0'))</span>
<span class="comment-copy">It's probably worth noting that <code>logging</code> module uses <code>%</code>-like syntax, so it may be preferred for consistency reasons.</span>
