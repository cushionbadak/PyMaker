<div class="post-text" itemprop="text">
<p>I have apache beam pipeline where i am getting some texts from input files using pubsub and after that i am doing some transformation and i am getting the sentence and score but my writer over writes the results instead of appending, I wanted to know is there any append module for beam.filesystems?</p>
<pre><code>from __future__ import absolute_import

import argparse
import logging
from datetime import datetime

from past.builtins import unicode
import json
from google.cloud import language
from google.cloud.language import enums
from google.cloud.language import types
import apache_beam as beam
import apache_beam.transforms.window as window

from apache_beam.io.filesystems import FileSystems
from apache_beam.io.gcp.pubsub import WriteToPubSub

from apache_beam.examples.wordcount import WordExtractingDoFn
from apache_beam.options.pipeline_options import PipelineOptions
from apache_beam.options.pipeline_options import SetupOptions
from apache_beam.options.pipeline_options import StandardOptions
from apache_beam.io.textio import ReadFromText, WriteToText



def run(argv=None):
  """Build and run the pipeline."""
  parser = argparse.ArgumentParser()
  parser.add_argument(
      '--output',
         dest='output',
        required=True,
        help='GCS destination folder to save the images to (example: gs://BUCKET_NAME/path')
  group = parser.add_mutually_exclusive_group(required=True)
  group.add_argument(
      '--input_topic',
      help=('Input PubSub topic of the form '
            '"projects&lt;project name&gt;/subscriptions/&lt;topic name&gt;".'))
  group.add_argument(
      '--input_subscription',
      help=('Input PubSub subscription of the form '
            '"projects&lt;project name&gt;/subscriptions/&lt;subsciption name&gt;."'))
  known_args, pipeline_args = parser.parse_known_args(argv)

  # We use the save_main_session option because one or more DoFn's in this
  # workflow rely on global context (e.g., a module imported at module level).
  pipeline_options = PipelineOptions(pipeline_args)
  pipeline_options.view_as(SetupOptions).save_main_session = True
  pipeline_options.view_as(StandardOptions).streaming = True
  p = beam.Pipeline(options=pipeline_options)

  # Read from PubSub into a PCollection.
  if known_args.input_subscription:
    messages = (p
                | beam.io.ReadFromPubSub(
                    subscription=known_args.input_subscription)
                .with_output_types(bytes))
  else:
    messages = (p
                | beam.io.ReadFromPubSub(topic=known_args.input_topic)
                .with_output_types(bytes))


  def print_row(row):
    print(type(row))
  file_metadata_pcoll = messages | 'decode' &gt;&gt; beam.Map(lambda x: json.loads(x.decode('utf-8')))
                            #| "print" &gt;&gt; beam.Map(print_row))

  lines = file_metadata_pcoll | 'read_file' &gt;&gt; beam.FlatMap(lambda metadata: FileSystems.open('gs://%s/%s' % (metadata['bucket'], metadata['name'])))
                     #| "print" &gt;&gt; beam.Map(print_row))


  # Count the occurrences of each word.
  class Split(beam.DoFn):
    def process(self,element):
        #element = str(element)
        #print(type(element))
        element = element.rstrip(b"\n")
        text = element.split(b',') 
        result = []
        for i in range(len(text)):
            dat = text[i]
            #print(dat)
            client = language.LanguageServiceClient()
            document = types.Document(content=dat,type=enums.Document.Type.PLAIN_TEXT)
            sent_analysis = client.analyze_sentiment(document=document)
            sentiment = sent_analysis.document_sentiment
            data = [
            (dat,sentiment.score)
            ] 
            result.append(data)
        return result

  # Format the counts into a PCollection of strings.
  class WriteToCSV(beam.DoFn):
    def process(self, element):
        return [
            "{},{}".format(
            element[0][0],
            element[0][1]
            )]


  class WriteToGCS(beam.DoFn):
    def __init__(self, outdir):
        source_date=datetime.now().strftime("%Y%m%d-%H%M%S")
        self.outdir = "gs://bucket-name/output"+format(source_date) +'.txt'
    def process(self, element):
        writer = FileSystems.create(self.outdir,'text/plain')
        writer.write(element)
        writer.close()

  sentiment_analysis =( lines | 'split' &gt;&gt; beam.ParDo(Split()) 
                             | beam.WindowInto(window.FixedWindows(15, 0)))

  format_csv = (sentiment_analysis | 'CSV formatting' &gt;&gt; beam.ParDo(WriteToCSV())
                                  | 'encode' &gt;&gt; beam.Map(lambda x: (x.encode('utf-8'))).with_output_types(bytes)
                                  |  'Save file' &gt;&gt; beam.ParDo(WriteToGCS(known_args.output)))


  result = p.run()
  result.wait_until_finish()

if __name__ == '__main__':
  logging.getLogger().setLevel(logging.INFO)
  run()
</code></pre>
<p>So instead of getting this :</p>
<pre><code>&lt;sentence 1&gt; &lt;score&gt;
&lt;sentence 2&gt; &lt;score&gt;
.
.
.
.
&lt;sentence n&gt; &lt;score&gt;
</code></pre>
<p>i just get this :</p>
<pre><code>&lt;sentence n&gt; &lt;score&gt;
</code></pre>
<p>I need some minor fixes , i am stuck please help me someone.</p>
</div>
<div class="post-text" itemprop="text">
<p>For this, you could try using <a href="https://beam.apache.org/releases/pydoc/2.11.0/apache_beam.io.textio.html#apache_beam.io.textio.WriteToText" rel="nofollow noreferrer">beam.io.textio.WriteToText</a>:</p>
<pre><code>messages = (p | "Read From PubSub" &gt;&gt; beam.io.ReadFromPubSub(subscription=known_args.subscription)
    | "Write to GCS" &gt;&gt; beam.io.WriteToText('gs://&lt;your_bucket&gt;/&lt;your_file&gt;', file_name_suffix='.txt',append_trailing_newlines=True,shard_name_template=''))
</code></pre>
<p>This will give you one file as the output when you finish your streaming job.</p>
<p>Hope it helps!</p>
</div>
