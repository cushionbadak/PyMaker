<div class="post-text" itemprop="text">
<p>I'm trying to replace the global IP inside a file with a private one and create a mapping of them, so i can revert it back even if part of the new string is different.
I'm stuck at the point of replace the global IP with the bogus one and write it to a file.</p>
<p>Starting file example:</p>
<pre>
ip route 192.168.1.0 255.255.0.0 10.10.10.2
ip route 192.168.1.0 255.255.0.0 1.1.1.2
ip route 1.1.1.1 255.255.0.0 1.1.1.3
interface FastEthernet1
ip address 1.1.1.1
duplex auto
speed auto
</pre>
<p>Wanted end result, some wording may change before revert back:</p>
<pre>
ip route ipv4 192.168.1.0 255.255.0.0 10.10.10.2
ip route ipv4 192.168.1.0 255.255.0.0 10.1.1.11
ip route ipv4 10.1.1.10 255.255.0.0 10.1.1.12
interface FastEthernet1
ip address 10.1.1.10
duplex auto
speed auto
</pre>
<p>The mapping I though is a dictionary like this:</p>
<pre>
mapping = {
    '1.1.1.2': "10.1.1.10", 
    '1.1.1.1': "10.1.1.10", 
    '1.1.1.3': "10.1.1.30
    }
</pre>
<p>I came out with this script until now, but it not doing what I want:</p>
<pre><code>import re
import ipaddress


def load_file(file) -&gt; str:
    with open(file, 'r') as f:
        return f.read()


def find_ips(config) -&gt; set:
    ip_regex = '\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'
    match = set(re.findall(ip_regex, config))
    return match


def mapping_ip(ips) -&gt; dict:
    counter = 0
    ip_table = {}
    for ip in ips:
        ip4_type = ipaddress.IPv4Address(ip)

        if ip4_type.is_global:
            counter += 1
            private = ipaddress.IPv4Address('10.1.1.10') + counter
            ip_table.update({
                ip: str(private),
                })
    return ip_table


def replace(mapping, s_file, d_file):
    with open(s_file, 'r') as reader, open(d_file, 'w') as writer:
        for line in reader:
            for orig, temp in mapping.items():
                if orig in line:
                    x = line.replace(orig, temp)
                    writer.write(x)
</code></pre>
<p>Any suggestion on how should I do the replace funcion?
Only the IP can be change, the rest of the string need to stay as it's(revert back process).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can simply use string replace on the lines of your source file:</p>
<p>Create source file:</p>
<pre><code>t = """ip route 192.168.1.0 255.255.0.0 10.10.10.2
ip route 192.168.1.0 255.255.0.0 1.1.1.2
ip route 1.1.1.1 255.255.0.0 1.1.1.3
interface FastEthernet1
ip address 1.1.1.1
duplex auto
speed auto"""

with open("t.txt","w") as f: 
    f.write(t)
</code></pre>
<p>Replace stuff and write to <code>"mod.txt"</code>:</p>
<pre><code>mapping = {
    '1.1.1.2': "10.1.1.10", 
    '1.1.1.1': "10.1.1.10", 
    '1.1.1.3': "10.1.1.30"
    }

with open("mod.txt","w") as m, open("t.txt") as data:
    for line in data:
        for key,replacewith in mapping.items():
            line = line.replace(key,replacewith)
        m.write(line)

with open("mod.txt") as f:
    print(f.read()) 
</code></pre>
<p>Output:</p>
<pre><code>ip route 192.168.1.0 255.255.0.0 10.10.10.2
ip route 192.168.1.0 255.255.0.0 10.1.1.10
ip route 10.1.1.10 255.255.0.0 10.1.1.30
interface FastEthernet1
ip address 10.1.1.10
duplex auto
speed auto
</code></pre>
<p>This will try to replace each line <code>m</code> times (m == len(mapping)) and is not very speedy due to creating lots of intermediate strings (if something got replaced) - it is more a hacky solution to your problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could harness <code>re.sub</code> in this case, following way:</p>
<pre><code>import re
txt = 'ip route 192.168.1.0 255.255.0.0 10.10.10.2\nip route 192.168.1.0 255.255.0.0 1.1.1.2\nip route 1.1.1.1 255.255.0.0 1.1.1.3\ninterface FastEthernet1\nip address 1.1.1.1\nduplex auto\nspeed auto'
out = re.sub(r'1\.1\.1\.([1-3])','10.1.1.\g&lt;1&gt;0',txt)
print(out)
</code></pre>
<p>Output:</p>
<pre><code>ip route 192.168.1.0 255.255.0.0 10.10.10.2
ip route 192.168.1.0 255.255.0.0 10.1.1.20
ip route 10.1.1.10 255.255.0.0 10.1.1.30
interface FastEthernet1
ip address 10.1.1.10
duplex auto
speed auto
</code></pre>
<p>For simplicity I hardcoded <code>txt</code>, most important line is that of <code>re.sub</code>:</p>
<pre><code>out = re.sub(r'1\.1\.1\.([1-3])','10.1.1.\g&lt;1&gt;0',txt)
</code></pre>
<p>It replaces substrings of <code>txt</code> which match first argument with second argument, first argument contain one group (<code>[1-3]</code>) which is later referenced in second argument (<code>\g&lt;1&gt;</code>) thus it in fact of executing following relacement:</p>
<p><code>1.1.1.1</code> to <code>10.1.1.10</code></p>
<p><code>1.1.1.2</code> to <code>10.1.1.20</code></p>
<p><code>1.1.1.3</code> to <code>10.1.1.30</code></p>
<p>However keep in mind that <code>re.sub</code> is working in single-pass fashion, unlike repeating usage of <code>.replace</code> method of <code>str</code>.</p>
</div>
