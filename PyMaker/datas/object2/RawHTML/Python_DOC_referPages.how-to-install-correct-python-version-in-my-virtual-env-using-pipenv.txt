<div class="post-text" itemprop="text">
<p>I'm trying to use pipenv as my primary tool for managing dependencies for a django app I'm trying to get deployed, and hitting a snag at the python version specified in the Pipfile.</p>
<p>The server is an ubuntu 18.04 machine where I have manually installed pip3 and pipenv. System python3 is 3.6.7, but I developed with 3.7.2 and that's what is specified in project's Pipfile. I want to use pipenv to create my virtual environment and install all dependencies in one go, including the correct python version, but I'm getting blocked when I run pipenv deploy:</p>
<pre><code>$ pipenv install --deploy
Warning: Python 3.7 was not found on your systemâ€¦
You can specify specific versions of Python with:
  $ pipenv --python path/to/python
</code></pre>
<p>Seems like a chicken vs egg issue but I'm assuming there's a best practice about deploying apps using pipenv on fresh servers that I'm missing. Will I just need to install the correct version and pass it to pipenv as an argument manually?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you just need to install the correct version. You can refer to <a href="https://pipenv.readthedocs.io/en/latest/basics/#specifying-versions-of-python" rel="nofollow noreferrer">pipenv document</a>.</p>
<p>As it said, "Pipenv will automatically scan your system for a Python that matches that given version"</p>
</div>
<span class="comment-copy">Just my opinion but, maybe try <a href="https://www.anaconda.com/" rel="nofollow noreferrer">anaconda</a>? I usually use that whenever I want to switch between development python versions.</span>
<span class="comment-copy">Anaconda just contains a lot more software than I actually need for this deployment...I've been looking into using pyenv for switching python versions, but was hoping there was a way to do it with pipenv to reduce dependency management to one step instead of two</span>
<span class="comment-copy">Python is not a dependency and <code>pipenv</code> cannot install it. If you cannot install Python 3.7 using system package manager try <a href="https://stackoverflow.com/questions/tagged/pyenv">pyenv</a>. Or compile from sources. After that use it to create virtual environments.</span>
<span class="comment-copy">Thanks. I think answers the questions, suppose I'll just download and install the old fashioned way. It would be cool if there were a way to install the runtime along with the dependencies but I guess it really does become a "chicken or egg" problem.</span>
