<div class="post-text" itemprop="text">
<p>I need some help on how to properly use <code>os.path.split</code> with tkinters <code>scrolledtext</code>.</p>
<p>I tried using <code>split</code> with the (head/tail) parts in different ways, but I have no idea how to make it work. Mainly on how to output it into a string text that can change and update on the user input. That would be next on the list, but right now I need to get this <code>split</code> part to work.</p>
<pre><code>from tkinter import filedialog, Tk, Button, Label, Grid, Entry,
scrolledtext
from os import path
import os

# FUNCTIONS

def browseFunc():
    filename = filedialog.askopenfilename()
    dirname = os.path.dirname(os.path.split(usermod, filename))
    pathlabel.config(text='current path %s' % dirname)

# START

root = Tk()

# BROWSE BUTTON

browseButton = Button (root, text="Browse", command=browseFunc)
browseButton.grid(row=0, column=0)

# BROWSE BUTTON OUTPUT

pathlabel = Label(root)
pathlabel.grid(row=0, column=1)

# END
root.mainloop()
</code></pre>
<p><strong><em>If tkinter is not the right thing to use for what I want, let me know.</em></strong></p>
<h1>Input</h1>
<p><strong>User</strong>: select file → <code>H:\SteamLibrary\SteamApps\common\SourceFilmmaker\game\usermod\models\nitpick\test\test.dmx</code></p>
<h1>Output</h1>
<p><strong>scrolled text</strong>: </p>
<p>$modelname "<code>nitpick\test\test</code>.mdl" <strong>← takes input of askfilename and auto completes scrolled text, adds .mdl at the end</strong></p>
<p>$body "body" "<code>test.dmx</code>" <strong>← only selected file</strong></p>
<p>$cdmaterials "<code>nitpick\test</code>" <strong>← assuming the textures are in the materials folder and not models</strong></p>
<p>$sequence "idle" "<code>test.dmx</code>" loop fps 30 <strong>← only selected file</strong>
<hr/></p>
<h1>Edits</h1>
<p>I found something called <code>argparse</code> which sounds promising. I don't know if this will help me with what I'm trying to do.</p>
<p>Also is there a way to print a string on a specific line of <code>scrollingtext</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems to me that your problem arises from faulty use of os.path.dirname and os.path.split . They are complementary in the sense that basically</p>
<pre><code>os.path.dirname(path) = os.path.split(path)[0]
</code></pre>
<p>Further you seem to pass two arguments to os.path.split, while according to the python reference it takes only one argument. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>os.path.split</code> takes only one argument:</p>
<pre><code>&gt;&gt;&gt; os.path.split('foo/bar')
('foo', 'bar')
</code></pre>
<p>All it does is split apart the "containing directory" portion from the "file name" portion, so here the containing directory is <code>foo</code> and the file name is <code>bar</code>.  There is no notion of a file-name-extension—file names can have any number of dots in them, and, e.g., <code>bar.tex.txt.tar.gz</code> is just the <em>name</em> <code>bar.tex.txt.tar.gz</code>:</p>
<pre><code>&gt;&gt;&gt; os.path.split('bar.tex.txt.tar.gz')
('', 'bar.tex.txt.tar.gz')
</code></pre>
<p>There's no containing directory part here, so that's empty.</p>
<p>The result of Tkinter's <code>filename = filedialog.askopenfilename()</code> appears to always be a full path name of an existing file (this is based on a quick experiment, not any documentation; <a href="https://pythonspot.com/tk-file-dialogs/" rel="nofollow noreferrer">the documentation appears to be a bit thin</a>), so that after <code>os.path.split</code> you should always have a non-empty directory portion and file-name portion.  However, if all you want is to replace the final <code>.abc</code> extension with <code>.def</code>, consider doing just that, without calling <code>os.path.split</code> at all:</p>
<pre><code>&gt;&gt;&gt; filename = 'some arbitrary/name.with.dots/ending with foo.abc'
&gt;&gt;&gt; os.path.splitext(filename)[0] + '.def'
'some arbitrary/name.with.dots/ending with foo.def'
</code></pre>
<p>If you wish to limit the extensions matched, you can do that with an argument to <code>filedialog.askopenfilename()</code>.  The documentation implies that <code>filedialog.askopenfilename()</code> returns an empty string if the user presses "cancel".  However, this appears to be true <em>only after at least one successful selection</em>: instead, it returns an empty <em>tuple</em> for the very first "cancel".  So it seems best to test for this with <code>if not filename</code>:</p>
<pre><code>def browseFunc():
    filename = filedialog.askopenfilename(title='select a file',
                                          filetypes=(('py', '*.py'),
                                                     ('all', '*')))
    if not filename:
        pathlabel.config(text='no path, you chose Cancel')
    else:
        pathlabel.config(text='current path {!r}'.format(filename))
</code></pre>
<p>Incidentally, <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib</a> is a bit heavyweight for what it seems you're doing, but it's a handy way to express all of the kinds of manipulations you might ever want to do with paths.</p>
</div>
<span class="comment-copy">Like this in the edits? ↑</span>
<span class="comment-copy">Code in my answer is meant as equality of function. Meaning that left side does same thing as right sode and yoi should uae only one of them</span>
<span class="comment-copy">I'm skimming through the pathlib docs, it's seems like the kind of thing I am looking for, but it's tricky to find the exact one. What would you recommend?</span>
<span class="comment-copy">I haven't actually <i>used</i> pathlib for anything so I'm not sure.</span>
