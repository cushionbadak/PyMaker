<div class="post-text" itemprop="text">
<p>I have a large number of text files with data; each file can be imported into excel separately. However, while most of the columns are the same between the files, in many files there's a column or two added/missing so when I merge all the text files and put it into excel, many columns of data are shifted. </p>
<p>I can make a 'master list' of all the possible data entries, but I'm not exactly sure how to tell excel to put certain types of data in specific columns. </p>
<p>For instance, if I have two files that look like: </p>
<ul>
<li>Name Year Food Color</li>
<li>Bob 2018 Cake Blue </li>
<li>Charlie 2017 Figs Red </li>
</ul>
<p>and </p>
<ul>
<li>LastName Name Age Year Color Size</li>
<li>Lily James 17 2021 green 0</li>
</ul>
<p>How would I go about merging them like this in excel: </p>
<ul>
<li>LastName Name Age Year Food Color Size</li>
<li>na Bob na 2018 Cake Blue na</li>
<li>na Charlie na 2017 Figs Red na</li>
<li>Lily James 17 2021 na green 0 </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Question</strong>: Merging inconsistent data in text files into a single excel spreadsheet</p>
</blockquote>
<p>This solution is using the following <code>build-in</code> and <code>moudules</code>:  </p>
<ul>
<li><a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">Set Types</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#lists" rel="nofollow noreferrer">Lists</a></li>
<li><a href="https://docs.python.org/3/library/csv.html#module-csv" rel="nofollow noreferrer">CSV File Reading and Writing</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#mapping-types-dict" rel="nofollow noreferrer">Mapping Types — dict</a></li>
</ul>
<p>The core of this solution is to <strong>normalize</strong> the columns names using a <code>set()</code> object and<br/>
the parameter <code>.DictWriter(..., extrasaction='ignore')</code> to handle the inconsistent columns.</p>
<p>The output format is <code>CSV</code>, which can be read from MS-Excel.</p>
<hr/>
<ul>
<li><p>The given data, separated by <code>blank</code></p>
<pre><code>text1 = """Name Year Food Color
Bob 2018 Cake Blue
Charlie 2017 Figs Red
"""
text2 = """LastName Name Age Year Color Size
Lily James 17 2021 green 0
"""
</code></pre></li>
<li><p>Open <strong>three</strong> files an get the headers.<br/>
Aggregate all columns names, drop double names using a <code>set()</code>.<br/>
Create a <code>DictReader</code> object for the <code>in_*</code> files.  </p>
<blockquote>
<p><strong>Note</strong>: Replace <code>io.StringIO(...</code> with <code>open(&lt;Path to file&gt;)</code></p>
</blockquote>
<pre><code>with io.StringIO(text1) as in_text1, \
     io.StringIO(text2) as in_text2, \
     io.StringIO() as out_csv:

    columns = set()
    reader = []
    for n, fh in enumerate([in_text1, in_text2]):
        fieldnames = fh.readline().rstrip().split()
        [columns.add(name) for name in fieldnames]
        reader.append(csv.DictReader(fh, delimiter=' ', fieldnames=fieldnames))
</code></pre></li>
<li><p>Create a <code>DictWriter</code> object using the <strong>normalized</strong> column names. 
The parameter <code>extrasaction='ignore'</code>, handle the inconsistent columns.   </p>
<blockquote>
<p><strong>Note</strong>: The column order is <strong>not</strong> guaranteed. If you need a defined order, sort the <code>list(columns)</code> to your needs before assigning to <code>fieldnames=</code>.</p>
</blockquote>
<pre><code>    writer = csv.DictWriter(out_csv, fieldnames=list(columns), , extrasaction='ignore')
    writer.writeheader()
</code></pre></li>
<li><p>Loop all <code>DictReader</code> objects reading <strong>all</strong> lines  and write it to the target <code>.csv</code> file.</p>
<pre><code>    for dictReader in reader:
        for _dict in dictReader:
            writer.writerow(_dict)
</code></pre></li>
</ul>
<blockquote>
<p><strong>Output</strong>:</p>
<pre><code>print(out_csv.getvalue())

Color,LastName,Year,Food,Age,Name,Size
Blue,,2018,Cake,,Bob,
Red,,2017,Figs,,Charlie,
green,Lily,2021,,17,James,0
</code></pre>
</blockquote>
<p><strong><em>Tested with Python: 3.4.2</em></strong></p>
</div>
<div class="post-text" itemprop="text">
<p>If you were happy to work with the text files directly in Excel ... this will work but may need some refinement from yourself.</p>
<p>I understand it’s probably not what you’re looking for but it provides another option.</p>
<p>Open the Visual Basic editor, add a new module and copy the below code and paste in ...</p>
<pre><code>Public Sub ReadAndMergeTextFiles()
    Dim strSrcFolder As String, strFileName As String, strLine As String, strPath As String, bFirstLine As Boolean
    Dim arrHeaders() As String, lngHeaderIndex As Long, arrFields, i As Long, objDestSheet As Worksheet, bFound As Boolean
    Dim objLastHeader As Range, x As Long, lngLastColumn As Long, lngHeaderCol As Long, arrHeaderCols() As Long
    Dim lngWriteRow As Long

    lngLastColumn = 1
    lngWriteRow = 2

    Application.EnableEvents = False
    Application.ScreenUpdating = False

    ' Change the sheet name being assigned to your destination worksheet name.
    ' Alternatively, display a prompt that asks for the sheet or simply uses the active sheet.
    Set objDestSheet = Worksheets("Result")

    With Application.FileDialog(msoFileDialogFolderPicker)
        .Title = "Select Source Folder"
        .Show

        If .SelectedItems.Count = 1 Then
            objDestSheet.Cells.Clear

            strSrcFolder = .SelectedItems(1)

            strFileName = Dir(strSrcFolder &amp; "\*.txt")

            Do While Len(strFileName) &gt; 0
                strPath = strSrcFolder &amp; "\" &amp; strFileName

                Open strPath For Input As #1

                bFirstLine = True

                Do Until EOF(1)
                    Line Input #1, strLine

                    arrFields = Split(strLine, vbTab, , vbTextCompare)

                    lngHeaderIndex = -1

                    For i = 0 To UBound(arrFields)
                        If bFirstLine Then
                            ' Loop through the header fields already written to the destination worksheet and find a match.
                            For x = 1 To objDestSheet.Columns.Count
                                bFound = False

                                If Trim(objDestSheet.Cells(1, x)) = "" Then Exit For

                                If UCase(objDestSheet.Cells(1, x)) = UCase(arrFields(i)) Then
                                    lngHeaderCol = x
                                    bFound = True
                                    Exit For
                                End If
                            Next

                            If Not bFound Then
                                objDestSheet.Cells(1, lngLastColumn) = arrFields(i)
                                lngHeaderCol = lngLastColumn
                                lngLastColumn = lngLastColumn + 1
                            End If

                            lngHeaderIndex = lngHeaderIndex + 1
                            ReDim Preserve arrHeaderCols(lngHeaderIndex)
                            arrHeaderCols(lngHeaderIndex) = lngHeaderCol
                        Else
                            ' Write out each value into the column found.
                            objDestSheet.Cells(lngWriteRow, arrHeaderCols(i)) = "'" &amp; arrFields(i)
                        End If
                    Next

                    If Not bFirstLine Then
                        lngWriteRow = lngWriteRow + 1
                    End If

                    bFirstLine = False
                Loop

                Close #1

                strFileName = Dir
            Loop

            objDestSheet.Columns.AutoFit
        End If
    End With

    Application.ScreenUpdating = True
    Application.EnableEvents = True
End Sub
</code></pre>
<p>... I did some basic testing with the data you provided and it seemed to work.  If for some reason it fails over the data you're using and you can't work it out, let me know and I'll put a fix in.</p>
<p>Some points ...</p>
<ol>
<li><p>The order of the columns depends on the order of your files and which columns appear first.  Of course, that could be enhanced upon but it is what it is for now.</p></li>
<li><p>It assumes all files in the one folder and all files end in .txt</p></li>
<li><p>The separator within each file is assumed to be a TAB.</p></li>
</ol>
<p>Let me know if that helps.</p>
</div>
<span class="comment-copy">What sort of volumes of data are we talking about here?</span>
<span class="comment-copy">I have maybe 400 text files with 7.5k+ entries. The tables within each text file are consistent, but so far I have manually merged all the text files into one and imported it into excel, but that results in the misaligned columns.</span>
<span class="comment-copy">What’s the separator in each column in each file? Tab? Comma?</span>
<span class="comment-copy">You should really decide explicitly what the data structure should be (which fields you want) before you write any code.</span>
<span class="comment-copy">Thanks so much! It worked, but quick question--how would you go about implementation this when you try to open all the files in a folder; since a for loop only opens the one at a time, I can't see how to best structure this solution so it applies.</span>
<span class="comment-copy"><i>"all the files in a folder"</i>:  This needs a <b>two step</b> approach. <b>First</b>: aggregate all <code>columns</code> names from <b>all</b> files. <b>Second</b>: Loop <b>all</b> files using the <b>normalized</b> columns.</span>
