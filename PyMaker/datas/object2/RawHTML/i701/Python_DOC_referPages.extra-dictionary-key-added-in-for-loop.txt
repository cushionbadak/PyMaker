<div class="post-text" itemprop="text">
<p>I'm try to write a python function that takes a dict with movie titles as keys and a list of performers in that movie as values, and returns a new dict with performers as keys and the movies they appear in as values. This code comes close, but returns something different for each run.</p>
<p>Here is the original function call:</p>
<pre><code>    movies = {"How to Be Single": ["Alison Brie", "Dakota Johnson",
                               "Rebel Wilson"],
              "The Lego Movie": ["Will Arnett", "Elizabeth Banks",
                             "Alison Brie", "Will Ferrell"]}
    print(stars,movies)
</code></pre>
<p>Here is the code:</p>
<pre><code>def stars(movies):
# create a new dictionary
films_dict= {}
performances_films = []

# for each movie actor, add as key to new_dict
for movie, actors in movies.items():
    for actor in actors:
        if not actor in films_dict.keys():
            #print(actor)
            performances_films = []
            performances_films.append(movie)
            films_dict[actor] = performances_films
        else:
            performances_films.append(movie)
            films_dict[actor] = performances_films

return(films_dict)
</code></pre>
<p>Here is the output:</p>
<pre><code>RUN 1
    {'Rebel Wilson': ['How to Be Single'], 'Will Ferrell': ['The Lego 
    Movie'], 
    'Will Arnett': ['The Lego Movie'], 'Elizabeth Banks': ['The Lego Movie', 
    'The Lego Movie'], 'Alison Brie': ['The Lego Movie', 'The Lego Movie'], 
    'Dakota Johnson': ['How to Be Single']}

RUN 2
{'Will Arnett': ['The Lego Movie'], 'Dakota Johnson': ['How to Be Single'], 'Elizabeth Banks': ['The Lego Movie', 'The Lego Movie'], 'Rebel Wilson': ['How to Be Single'], 'Will Ferrell': ['The Lego Movie'], 'Alison Brie': ['The Lego Movie', 'The Lego Movie']}
</code></pre>
<p>I think its either iterating through the dict items in a different order each run, or saving data from one run to the next. Either way I can't seem to resolve it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't really get why you're keeping a <code>performances_films</code> list around. You can just use the ones you created previously in the <code>dict</code> itself.</p>
<p>Here's something I think will work:</p>
<pre><code>def stars(movies):
    # create a new dictionary
    films_dict= {}

    # for each movie actor, add as key to new_dict
    for movie, actors in movies.items():
        for actor in actors:
            if not actor in films_dict.keys():
                performances_films = []
                performances_films.append(movie)
                films_dict[actor] = performances_films
            else:
                films_dict[actor].append(movie)

    return(films_dict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>movies = {"How to Be Single": ["Alison Brie", "Dakota Johnson",
                               "Rebel Wilson"],
              "The Lego Movie": ["Will Arnett", "Elizabeth Banks",
                             "Alison Brie", "Will Ferrell"]}
stars = {}
for movie, v in movies.items():
    for star in v:
        if star in stars:
            stars[star].append(movie)
        else:
            stars[star] = [movie]

print(stars)
</code></pre>
<p>prints:</p>
<pre><code>{'Alison Brie': ['How to Be Single', 'The Lego Movie'], 'Dakota Johnson': ['How to Be Single'], 'Rebel Wilson': ['How to Be Single'], 'Will Arnett': ['The Lego Movie'], 'Elizabeth Banks': ['The Lego Movie'], 'Will Ferrell': ['The Lego Movie']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The mistake in your code is that the <code>list</code> instance <code>performances_films</code> is persisting from one loop iteration to the next. That's why (say) Alison Brie has The Lego Movie listed twiceâ€”it was really supposed to be added for <em>another</em> actor, but the <code>list</code> instance previously created for Alison Brie was still occupying the name slot <code>performances_films</code>.  In fact it looks like multiple actors might be sharing that same <code>list</code> instance.</p>
<p>You can simplify the code a lot if you use the "default value" concept when accessing your dictionary.  This is either done by using the <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> class:</p>
<pre><code>import collections
filmography = collections.defaultdict(list)
for movie, actors in movies.items():
    for actor in actors:
        filmography[actor].append(movie)
</code></pre>
<p>or my preferred way would be with a vanilla <code>dict</code> and its <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>setdefault()</code></a> method:</p>
<pre><code>filmography = {}                     
for movie, actors in movies.items():
    for actor in actors:
        filmography.setdefault(actor, []).append(movie)
</code></pre>
<p>Either way, you can treat each new movie uniformly without having to test explicitly for the actor's prior membership of <code>filmography</code>.</p>
</div>
<span class="comment-copy">Python dictionaries are unordered, which is why the output changes for each run. If you want to keep consistent order of items in the dictionary you may want to use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a></span>
