<div class="post-text" itemprop="text">
<p>I would like to know how could be possible to create a loop for in Python 3 to increment the values of i, j, k ... for a specific application. </p>
<p>I need to select different columns but they cannot be select with themselves. Let's suppose that my dataframe has 7 columns. I will put an example bellow.</p>
<p>The idea is to create a selection like that:</p>
<pre><code>[0, 1]
[0, 2]
[0, 3]
[0, 4]
[0, 5]
[0, 6]
 ...
[0, 3, 6]
[0, 3, 7]
[0, 4, 5]
[0, 4, 6]
[0, 4, 7]
[0, 5, 6]
[0, 5, 7]
[0, 6, 7]
[0, 1, 2, 3]
[0, 1, 2, 4]
[0, 1, 2, 5]
[0, 1, 2, 6]
[0, 1, 2, 7]
[0, 1, 2, 3, 4]
[0, 1, 2, 3, 5]
[0, 1, 2, 3, 6]
[0, 1, 2, 3, 7]
 ...
[0, 1, 2, 3, 4, 7]
[0, 1, 2, 3, 4, 5, 6]
[0, 1, 2, 3, 4, 5, 7]
[0, 1, 2, 3, 4, 5, 8]
[0, 1, 2, 3, 4, 5, 6, 7]
</code></pre>
<p>After some replies, I could be able to create the following code:</p>
<pre><code>from itertools import combinations 
numbers = [] 
A = [0,1,2,3,4,5,6,7] 
for i in range(8): 
   for combo in combinations(A, i+2): 
      numbrs.append(combo)
</code></pre>
<p>The output is:</p>
<pre><code>[(0, 1),
 (0, 2),
 (0, 3),
 (0, 4), ...
</code></pre>
<p>How could I use those numbers as index of a iloc iterator ?</p>
<p>For examples, the numbers generated must substitute the code:</p>
<pre><code>df.iloc[:,[i, j, k, ...]]
</code></pre>
<p>Then I will be able to interact among the columns</p>
</div>
<div class="post-text" itemprop="text">
<p>You can solve this using <code>itertools.combinations</code> and <code>itertools.chain</code>:</p>
<pre><code>import itertools as it

list(it.chain(*(it.combinations(range(8), r) for r in range(2, 9))))
</code></pre>
<p>Or using a list comprehension if you prefer:</p>
<pre><code>[x for r in range(2, 9) for x in it.combinations(range(8), r)] 
</code></pre>
<p>This produces the following output:</p>
<pre><code>[(0, 1),
 (0, 2),
 (0, 3),
 (0, 4),
 (0, 5),
 (0, 6),
 (0, 7),
 (1, 2),
 (1, 3),
 (1, 4),
 (1, 5),
 (1, 6),
 (1, 7),
 (2, 3),
 (2, 4),
 (2, 5),
 (2, 6),
 (2, 7),
 (3, 4),
 (3, 5),
 (3, 6),
 (3, 7),
 (4, 5),
 (4, 6),
 (4, 7),
 (5, 6),
 (5, 7),
 (6, 7),
 (0, 1, 2),
 (0, 1, 3),
 (0, 1, 4),
 (0, 1, 5),
 (0, 1, 6),
 (0, 1, 7),
 (0, 2, 3),
 (0, 2, 4),
 (0, 2, 5),
 (0, 2, 6),
 (0, 2, 7),
 (0, 3, 4),
 (0, 3, 5),
 (0, 3, 6),
 (0, 3, 7),
 (0, 4, 5),
 (0, 4, 6),
 (0, 4, 7),
 (0, 5, 6),
 (0, 5, 7),
 (0, 6, 7),
 (1, 2, 3),
 (1, 2, 4),
 (1, 2, 5),
 (1, 2, 6),
 (1, 2, 7),
 (1, 3, 4),
 (1, 3, 5),
 (1, 3, 6),
 (1, 3, 7),
 (1, 4, 5),
 (1, 4, 6),
 (1, 4, 7),
 (1, 5, 6),
 (1, 5, 7),
 (1, 6, 7),
 (2, 3, 4),
 (2, 3, 5),
 (2, 3, 6),
 (2, 3, 7),
 (2, 4, 5),
 (2, 4, 6),
 (2, 4, 7),
 (2, 5, 6),
 (2, 5, 7),
 (2, 6, 7),
 (3, 4, 5),
 (3, 4, 6),
 (3, 4, 7),
 (3, 5, 6),
 (3, 5, 7),
 (3, 6, 7),
 (4, 5, 6),
 (4, 5, 7),
 (4, 6, 7),
 (5, 6, 7),
 (0, 1, 2, 3),
 (0, 1, 2, 4),
 (0, 1, 2, 5),
 (0, 1, 2, 6),
 (0, 1, 2, 7),
 (0, 1, 3, 4),
 (0, 1, 3, 5),
 (0, 1, 3, 6),
 (0, 1, 3, 7),
 (0, 1, 4, 5),
 (0, 1, 4, 6),
 (0, 1, 4, 7),
 (0, 1, 5, 6),
 (0, 1, 5, 7),
 (0, 1, 6, 7),
 (0, 2, 3, 4),
 (0, 2, 3, 5),
 (0, 2, 3, 6),
 (0, 2, 3, 7),
 (0, 2, 4, 5),
 (0, 2, 4, 6),
 (0, 2, 4, 7),
 (0, 2, 5, 6),
 (0, 2, 5, 7),
 (0, 2, 6, 7),
 (0, 3, 4, 5),
 (0, 3, 4, 6),
 (0, 3, 4, 7),
 (0, 3, 5, 6),
 (0, 3, 5, 7),
 (0, 3, 6, 7),
 (0, 4, 5, 6),
 (0, 4, 5, 7),
 (0, 4, 6, 7),
 (0, 5, 6, 7),
 (1, 2, 3, 4),
 (1, 2, 3, 5),
 (1, 2, 3, 6),
 (1, 2, 3, 7),
 (1, 2, 4, 5),
 (1, 2, 4, 6),
 (1, 2, 4, 7),
 (1, 2, 5, 6),
 (1, 2, 5, 7),
 (1, 2, 6, 7),
 (1, 3, 4, 5),
 (1, 3, 4, 6),
 (1, 3, 4, 7),
 (1, 3, 5, 6),
 (1, 3, 5, 7),
 (1, 3, 6, 7),
 (1, 4, 5, 6),
 (1, 4, 5, 7),
 (1, 4, 6, 7),
 (1, 5, 6, 7),
 (2, 3, 4, 5),
 (2, 3, 4, 6),
 (2, 3, 4, 7),
 (2, 3, 5, 6),
 (2, 3, 5, 7),
 (2, 3, 6, 7),
 (2, 4, 5, 6),
 (2, 4, 5, 7),
 (2, 4, 6, 7),
 (2, 5, 6, 7),
 (3, 4, 5, 6),
 (3, 4, 5, 7),
 (3, 4, 6, 7),
 (3, 5, 6, 7),
 (4, 5, 6, 7),
 (0, 1, 2, 3, 4),
 (0, 1, 2, 3, 5),
 (0, 1, 2, 3, 6),
 (0, 1, 2, 3, 7),
 (0, 1, 2, 4, 5),
 (0, 1, 2, 4, 6),
 (0, 1, 2, 4, 7),
 (0, 1, 2, 5, 6),
 (0, 1, 2, 5, 7),
 (0, 1, 2, 6, 7),
 (0, 1, 3, 4, 5),
 (0, 1, 3, 4, 6),
 (0, 1, 3, 4, 7),
 (0, 1, 3, 5, 6),
 (0, 1, 3, 5, 7),
 (0, 1, 3, 6, 7),
 (0, 1, 4, 5, 6),
 (0, 1, 4, 5, 7),
 (0, 1, 4, 6, 7),
 (0, 1, 5, 6, 7),
 (0, 2, 3, 4, 5),
 (0, 2, 3, 4, 6),
 (0, 2, 3, 4, 7),
 (0, 2, 3, 5, 6),
 (0, 2, 3, 5, 7),
 (0, 2, 3, 6, 7),
 (0, 2, 4, 5, 6),
 (0, 2, 4, 5, 7),
 (0, 2, 4, 6, 7),
 (0, 2, 5, 6, 7),
 (0, 3, 4, 5, 6),
 (0, 3, 4, 5, 7),
 (0, 3, 4, 6, 7),
 (0, 3, 5, 6, 7),
 (0, 4, 5, 6, 7),
 (1, 2, 3, 4, 5),
 (1, 2, 3, 4, 6),
 (1, 2, 3, 4, 7),
 (1, 2, 3, 5, 6),
 (1, 2, 3, 5, 7),
 (1, 2, 3, 6, 7),
 (1, 2, 4, 5, 6),
 (1, 2, 4, 5, 7),
 (1, 2, 4, 6, 7),
 (1, 2, 5, 6, 7),
 (1, 3, 4, 5, 6),
 (1, 3, 4, 5, 7),
 (1, 3, 4, 6, 7),
 (1, 3, 5, 6, 7),
 (1, 4, 5, 6, 7),
 (2, 3, 4, 5, 6),
 (2, 3, 4, 5, 7),
 (2, 3, 4, 6, 7),
 (2, 3, 5, 6, 7),
 (2, 4, 5, 6, 7),
 (3, 4, 5, 6, 7),
 (0, 1, 2, 3, 4, 5),
 (0, 1, 2, 3, 4, 6),
 (0, 1, 2, 3, 4, 7),
 (0, 1, 2, 3, 5, 6),
 (0, 1, 2, 3, 5, 7),
 (0, 1, 2, 3, 6, 7),
 (0, 1, 2, 4, 5, 6),
 (0, 1, 2, 4, 5, 7),
 (0, 1, 2, 4, 6, 7),
 (0, 1, 2, 5, 6, 7),
 (0, 1, 3, 4, 5, 6),
 (0, 1, 3, 4, 5, 7),
 (0, 1, 3, 4, 6, 7),
 (0, 1, 3, 5, 6, 7),
 (0, 1, 4, 5, 6, 7),
 (0, 2, 3, 4, 5, 6),
 (0, 2, 3, 4, 5, 7),
 (0, 2, 3, 4, 6, 7),
 (0, 2, 3, 5, 6, 7),
 (0, 2, 4, 5, 6, 7),
 (0, 3, 4, 5, 6, 7),
 (1, 2, 3, 4, 5, 6),
 (1, 2, 3, 4, 5, 7),
 (1, 2, 3, 4, 6, 7),
 (1, 2, 3, 5, 6, 7),
 (1, 2, 4, 5, 6, 7),
 (1, 3, 4, 5, 6, 7),
 (2, 3, 4, 5, 6, 7),
 (0, 1, 2, 3, 4, 5, 6),
 (0, 1, 2, 3, 4, 5, 7),
 (0, 1, 2, 3, 4, 6, 7),
 (0, 1, 2, 3, 5, 6, 7),
 (0, 1, 2, 4, 5, 6, 7),
 (0, 1, 3, 4, 5, 6, 7),
 (0, 2, 3, 4, 5, 6, 7),
 (1, 2, 3, 4, 5, 6, 7),
 (0, 1, 2, 3, 4, 5, 6, 7)]
</code></pre>
</div>
<span class="comment-copy">Use <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">itertools.combinations</a> with different <code>r</code> lengths (e.g. <code>range(2, number_of_columns+1)</code></span>
<span class="comment-copy">It's not exactly clear what you want to do but this sounds a lot like a job for <code>itertools.combinations</code>.</span>
<span class="comment-copy">Thank you, I would like to print the exactly numbers inside the square brackets that I mentioned.</span>
<span class="comment-copy">@Alambek logic here , if you have [1,2]....[1 7] why you do not have [1,2,3]....[1,2,7]</span>
<span class="comment-copy">The index of the dataframe <code>df.iloc[:,[0, 1, 2, 3]]</code> must be accessed using the i,j,k... generated by the intertools <code>df.iloc[:,[i, j, k, ...]]</code></span>
<span class="comment-copy">Thank you for your reply; I am using the following code: <code>from itertools import combinations numbers = [] A = [0,1,2,3,4,5,6,7] for i in range(8):     for combo in combinations(A, i+2):         numbrs.append(combo)</code></span>
<span class="comment-copy">But now I cannot be able to run the numbers generated with the iloc command. Like this way: <code>df.iloc[:,[i, j, k, ...]] </code></span>
<span class="comment-copy">@Alambek <code>i + 2</code> runs until <code>9</code> but your sequence has only 8 elements. Also <code>it.combinations</code> returns tuples so you need to convert to <code>list</code> for usage with <code>iloc</code>.</span>
