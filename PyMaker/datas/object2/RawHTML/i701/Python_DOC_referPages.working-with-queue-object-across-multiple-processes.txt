<div class="post-text" itemprop="text">
<p>I'm trying to reduce the processing time of reading a database with roughly 100,000 entries, but I need them to be formatted a specific way, in an attempt to do this, I tried to use python's <code>multiprocessing.map</code> function which works perfectly except that I can't seem to get any form of queue reference to work across them.</p>
<p>I've been using information from <a href="https://stackoverflow.com/questions/17241663/filling-a-queue-and-managing-multiprocessing-in-python">Filling a queue and managing multiprocessing in python</a> to guide me for using queues across multiple processes, and <a href="https://stackoverflow.com/questions/19790570/using-a-global-variable-with-a-thread">Using a global variable with a thread</a> to guide me for using global variables across threads.  I've gotten the software to work, but when I check the list/queue/dict/map length after running the process, it always returns zero</p>
<p>I've written a simple example to show what I mean:
You have to run the script as a file, the <code>map</code>'s <code>initialize</code> function does not work from the interpreter.</p>
<pre><code>from multiprocessing import Pool
from collections import deque

global_q = deque()

def my_init(q):
    global global_q
    global_q = q
    q.append("Hello world")


def map_fn(i):
    global global_q
    global_q.append(i)


if __name__ == "__main__":
    with Pool(3, my_init, (global_q,)) as pool:
        pool.map(map_fn, range(3))
    for p in range(len(global_q)):
        print(global_q.pop())
</code></pre>
<p>Theoretically, when I pass the queue object reference from the main thread to the worker threads using the <code>pool</code> function, and then initialize that thread's global variables using with the given function, then when I insert elements into the queue from the <code>map</code> function later, that object reference should still be pointing to the original queue object reference (long story short, everything should end up in the same queue, because they all point to the same location in memory).</p>
<p>So, I expect:</p>
<pre class="lang-none prettyprint-override"><code>Hello World
Hello World
Hello World
1
2
3
</code></pre>
<p>of course, the <code>1, 2, 3</code>'s are in arbitrary order, but what you'll see on the output is <code>''</code>.</p>
<p>How come when I pass object references to the <code>pool</code> function, nothing happens?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's an example of how to share something between processes by extending the <code>multiprocessing.managers.BaseManager</code> class to support <code>deque</code>s. Note that the output shown isn't the same what you show as expected in your question, but it is correct. (because calling <code>pool.map(map_fn, range(3))</code> only results in <em>three</em> calls being made to <code>map_fn</code>).</p>
<p>There's a section in the documentation about creating <a href="https://docs.python.org/3/library/multiprocessing.html#customized-managers" rel="nofollow noreferrer">Customized managers</a>.</p>
<pre><code>import collections
from multiprocessing import Pool
from multiprocessing.managers import BaseManager


class DequeManager(BaseManager):
    pass

class DequeProxy(object):
    def __init__(self, *args):
        self.deque = collections.deque(*args)
    def __len__(self):
        return self.deque.__len__()
    def appendleft(self, x):
        self.deque.appendleft(x)
    def append(self, x):
        self.deque.append(x)
    def pop(self):
        return self.deque.pop()
    def popleft(self):
        return self.deque.popleft()

# Currently only exposes a subset of deque's methods.
DequeManager.register('DequeProxy', DequeProxy,
                      exposed=['__len__', 'append', 'appendleft',
                               'pop', 'popleft'])


process_shared_deque = None  # Global only within each process.


def my_init(q):
    global process_shared_deque  # Initialize module-level global.
    process_shared_deque = q
    q.append("Hello world")

def map_fn(i):
    process_shared_deque.append(i)  # deque's don't have a "put()" method.


if __name__ == "__main__":
    manager = DequeManager()
    manager.start()
    shared_deque = manager.DequeProxy()

    with Pool(3, my_init, (shared_deque,)) as pool:
        pool.map(map_fn, range(3))

    for p in range(len(shared_deque)):  # Show left-to-right contents.
        print(shared_deque.popleft())
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>Hello world
0
1
2
Hello world
Hello world
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You cant use global variable for multiprocesing.</p>
<p>Pass to the function multiprocessing queue.</p>
<pre><code>from multiprocessing import Queue
queue= Queue() 

def worker(q):
    q.put(something)
</code></pre>
<p>Also you are propably experiencing that the code is allright, but as the pool create separate processes, even the errors are separeted and therefore you dont see the code not only isnt working, but that it throws error.</p>
<p>The reason why your output is <strong>''</strong>, is because nothing was appended to your q/global_q. And if it was appended, then only some variable, that may be called global_q, but its totally different one than your global_q in your main thread</p>
<p>Try to print('Hello world') inside the function you want to multiprocess and you will see by yourself, that nothing is actually printed at all. That processes is simply outside of your main thread and the only way to access that process is by multiprocessing Queues. You access the Queue by queue.put('something') and something = queue.get() </p>
<p>Try to understand this code and you will do well:</p>
<pre><code>import multiprocessing as mp

shared_queue = mp.Queue() # This will be shared among all procesess, but you need to pass the queue as an argument in the process. You CANNOT use it as global variable. Understand that the functions kind of run in total different processes and nothing can really access them... Except multiprocessing.Queue - that can be shared across all processes.


def channel(que,channel_num):
    que.put(channel_num)

if __name__ == '__main__':
    processes = [mp.Process(target=channel, args=(shared_queue, channel_num)) for channel_num in range(8)]

    for p in processes:
        p.start()


    for p in processes: # wait for all results to close the pool
        p.join()

    for i in range(8): # Get data from Queue. (you can get data out of it at any time actually)
        print(shared_queue.get())
</code></pre>
</div>
<span class="comment-copy">A <code>deque</code> isn't the same thing as a <code>Queue</code>, and multiple processes aren't the same thing as multiple threads — you know this, right? Processes each run in their own "memory space" making it impossible for them to directly share global variables. It's possible to do so indirectly for <i>some</i> types using a <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager" rel="nofollow noreferrer"><code>multiprocessing.managers.SyncManager</code></a> to create proxies that will allow the types documented to be shared. Unfortunately <code>deque</code> isn't among them—but you could probably implement one yourself.</span>
<span class="comment-copy">This is the concept I was talking about, or hoping to show when talking about initializing global variables on different threads, which I only care about doing because I've seen that each process in python has it's own environment/interpreter, so theoretically I figured if I pass in a reference to the original object to the new interpreter, then I should be able to reinitialize its global variables to the old ones, at least that's what I'm guessing</span>
<span class="comment-copy">iggy12345: I can understand how you might have gotten that impression, but the fact is you can't pass references to other processes because the object is in another memory space that they can't access. See the answer I just posted which shows how to accomplish something like what you want using a multiprocessing <code>Manager</code>.</span>
<span class="comment-copy">Is there any reason not to just make <code>DequeProxy</code> inherit from <code>deque</code> ie <code>class DequeProxy(deque):</code> and then use <code>DequeManager.register('DequeProxy', DequeProxy, exposed=dir(DequeProxy))</code>, I'm just curious?</span>
<span class="comment-copy">You cannot just use <code>dir</code> to register the methods, for some reason <code>register</code> does not support all methods, but this answer solved my problem and is some 10x faster than the other, thank you!</span>
<span class="comment-copy">iggy12345 Regarding your first comment, don't know. I used what is shown in the documentation and the way proxy types are implemented in the <code>managers.SyncManager</code> class. As for using <code>dir</code>, if you look at source file for <a href="https://github.com/python/cpython/blob/3.7/Lib/multiprocessing/managers.py" rel="nofollow noreferrer"><code>multiprocessing.managers</code></a> around line 103, there's a couple of utility functions you might find interesting: <code>all_methods()</code> and <code>public_methods()</code>. I considered using them in my answer, but neither did quite what I wanted—because well, you know, "Simple is better than complex"... <code>;¬)</code></span>
<span class="comment-copy">I would like to see timing of both solutions resulting this one in being 10x faster. Maybe its time to write to multiprocesing developers that their standard solutions sucks even for easy problems and that poor comunity needs to hack the lib in order to pass objects between processes and also use such save statements like global</span>
<span class="comment-copy">I will try and get you timings later today</span>
<span class="comment-copy">A multiprocessing queue isn't quite the same as a deque, which is what the OP is actually trying to share. Also, you've got some extremely long one line comments in your code, which isn't very readable in my opinion.</span>
<span class="comment-copy">@martineau Are you telling me I should advice him to pour gasoline in a car that needs diesel?  There is absolutetly no reason why to use deque. And I am not going hack multiprocessing library just so it fits 'deque', which if you payed attention, he uses only because of not really understanding multiprocessing and threading</span>
<span class="comment-copy">I'm telling you the OP's question is about how to share a <b><code>deque</code></b>, not a <code>Queue</code>. Admittedly, the question's title is a bit misleading in that regard, but it's tagged "deque" and that is what is being used in the sample code it contains.</span>
<span class="comment-copy">@martineau question is not about deque but about passing objects across processes. You need to read between lines. BTW you can't use deque in his case anyway.</span>
<span class="comment-copy">@martineau in the sample code is also used ridiculous use of global statement. Do I have to fit in his sample code to provide answer? I wish for him best answer while you are being pedantic. Why don't you post answer too?</span>
