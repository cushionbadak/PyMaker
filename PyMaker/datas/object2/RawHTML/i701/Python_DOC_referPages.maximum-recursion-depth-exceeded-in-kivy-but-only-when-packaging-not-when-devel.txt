<div class="post-text" itemprop="text">
<p>I am trying to pack an app that requires several imports, among those matplotlib.pyplot</p>
<p>The kivy app (simplified, but still working) is:</p>
<pre><code>from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.lang import Builder
import matplotlib.pyplot


Builder.load_string("""
&lt;MyWidget&gt;:
    id: my_widget
    FileChooserIconView:
        id: filechooser
        on_selection: my_widget.selected(filechooser.selection)
    Image:
        id: image
        source: ""
""")


class MyWidget(BoxLayout):

    def selected(self,filename):
        self.ids.image.source = filename[0]


class MyApp(App):
    def build(self):
        return MyWidget()


if __name__ == '__main__':
    MyApp().run()
</code></pre>
<p>This app works perfectly in python using spyder.</p>
<p>However, when I try to pack it as an independent kivy app it gives me error maximum recursion depth exceeded.</p>
<p>I am surprised and I do not know what the problem is because:</p>
<p>1.There are no recursive functions in the app.</p>
<p>2.Works perfectly in python spyder while developing it and testing it, the only problem is during packaging.</p>
<p>3.I have tried multiple options, including commenting out several portions and, most surprising, when I comment out the import matplotlib.pyplot the app packages well. However I need matplotlib.pyplot for this app so taking it out is not an option.</p>
<pre><code>from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.lang import Builder
#import matplotlib.pyplot


Builder.load_string("""
&lt;MyWidget&gt;:
    id: my_widget
    FileChooserIconView:
        id: filechooser
        on_selection: my_widget.selected(filechooser.selection)
    Image:
        id: image
        source: ""
""")


class MyWidget(BoxLayout):

    def selected(self,filename):
        self.ids.image.source = filename[0]


class MyApp(App):
    def build(self):
        return MyWidget()


if __name__ == '__main__':
    MyApp().run()
</code></pre>
<p>The above code works and packages well.</p>
<p>Is it that there is some limit of the size of the files one can import to a kivy app? I have already tried to increase the recursion limit with sys.setrecursionlimit(high numbers) but it is not a solution to this problem. 
I am really lost. Any insight appreciated. </p>
<p>Thank you</p>
<p>Edit 2/4/2019:
It has been suggested that the question: <a href="https://stackoverflow.com/questions/38977929/pyinstaller-creating-exe-runtimeerror-maximum-recursion-depth-exceeded-while-ca">pyinstaller creating EXE RuntimeError: maximum recursion depth exceeded while calling a Python object</a> is a duplicate and answers this question. Although this is definitively a related question and is helpful, my error occurs in the first stage of the creation of the kivy package:
python -m PyInstaller --name touchtracer examples-path\demo\touchtracer\main.py</p>
</div>
<div class="post-text" itemprop="text">
<p>When we go into a recursion, there is a risk of stack overflow and the Cpython working under the hood does not take it upon itself to optimize tail recursion, so if you go too deep, you will move closer towards a stack overflow. Generally different Cpython/python flavors have different recursion permit depth, The version of python you have running locally has a more liberal depth limit (Generally because it is assumed developers have good enough computers that this can take place). But when you use tools to package your application they generally override the <a href="https://docs.python.org/3/library/sys.html#sys.setrecursionlimit" rel="nofollow noreferrer">sys.setrecursionlimit</a> to a more conservative value as they try to make sure you don't cause an stack overflow on systems with lower hardware.</p>
<p>Sadly there is no silver bullet for this problem, you can try to look into your specific manager and change the limit (Not recommended) or you can try to convert your recursive blocks into iterative blocks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Thank you so MUCH to everybody who tried to help. 
I found an answer and I hope it helps other people who tries to create a kivy package and there is a problem importing python module(s).</p>
<p>Once you have your <code>main.py</code> script ready to package:</p>
<p>1.Start with the instructions at</p>
<pre><code>https://kivy.org/doc/stable/guide/packaging-windows.html
</code></pre>
<p>and do the first step: </p>
<pre><code>python -m PyInstaller --name touchtracer examples-path\demo\touchtracer\main.py
</code></pre>
<p>This will give you the error of <code>maximum recursion depth exceeded</code> or whatever error this gives to you originally. No worries. The purpose of this step is to create an initial <code>spec</code> file.</p>
<p>2.Open the <code>spec</code> file and add all the extras that the <code>kivy</code> instructions give you at </p>
<pre><code>https://kivy.org/doc/stable/guide/packaging-windows.html
</code></pre>
<p>that is:</p>
<pre><code>from kivy.deps import sdl2, glew
Tree('examples-path\\demo\\touchtracer\\'),
*[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins)],
</code></pre>
<p>3.In addition to that, add at the beginning of the spec file the following:</p>
<pre><code>import sys
sys.setrecursionlimit(5000) # (or some big number)
</code></pre>
<p>4.Also add any imports in the hidden imports that you might need.</p>
<pre><code>hiddenimports=[] # change to (example importing pandas and matplotlib) hiddenimports=['pandas', 'matplotlib']
</code></pre>
<p>5.Just follow the last step at </p>
<pre><code>https://kivy.org/doc/stable/guide/packaging-windows.html
</code></pre>
<p>that is:</p>
<pre><code>python -m PyInstaller touchtracer.spec
</code></pre>
<p>and get your app built</p>
</div>
<span class="comment-copy">What are you using to package the app?</span>
<span class="comment-copy">I am following the kivy packaging instructions for Windows <a href="https://kivy.org/doc/stable/guide/packaging-windows.html" rel="nofollow noreferrer">kivy.org/doc/stable/guide/packaging-windows.html</a></span>
<span class="comment-copy">I am following the kivy packaging instructions for Windows <a href="https://kivy.org/doc/stable/guide/packaging-windows.html" rel="nofollow noreferrer">kivy.org/doc/stable/guide/packaging-windows.html</a> I am using Windows 7, python 3.6 in an anaconda environment. The packaging starts as usual, it creates the spec file and empty folders for dist and build. At some point, around the lines of "Processing pre safe import ....six.moves" it stays there for a longer while than usual and suddenly goes very rapidly to several lines of File:.... for different files and finally maximum recursion depth exceeded. I have no idea what is going on or how to approach it. Thank you</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/38977929/pyinstaller-creating-exe-runtimeerror-maximum-recursion-depth-exceeded-while-ca">pyinstaller creating EXE RuntimeError: maximum recursion depth exceeded while calling a Python object</a></span>
<span class="comment-copy">Although the question suggested by John Anderson (thanks for the link) has an answer: import sys sys.setrecursionlimit(5000) at the beginning of the spec file, it does not work because my problem occurss at the first stage of creating the kivy package: python -m PyInstaller --name touchtracer examples-path\demo\touchtracer\main.py and this step overwrites anything I have written on the spec file.</span>
<span class="comment-copy">Thank you for your answer anand_v.singh. However, there should be some solution, right? It cannot be that you cannot use such a common module like matplotlib.pyplot in kivy. My code does not have any recursive blocks, which makes it even more surprising as I have tried to explain in point 1 of the question.</span>
<span class="comment-copy">@Ivan Try changing the sys.setrecursionlimit flag, You will have to search how to do it exactly for kivy, but it can be done.</span>
