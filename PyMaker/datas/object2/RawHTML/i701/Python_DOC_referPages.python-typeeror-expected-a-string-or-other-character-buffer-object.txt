<div class="post-text" itemprop="text">
<p>I am pretty new to python. For this task, I am trying to import a text file, add <s> and </s> to id, and remove punctuation from the text. I tried this method <a href="https://stackoverflow.com/questions/18570182/how-to-strip-punctuation-from-a-text-file?noredirect=1&amp;lq=1">How to strip punctuation from a text file</a>. </p>
<pre><code>import string
def readFile():

translate_table = dict((ord(char), None) for char in string.punctuation)
with open('out_file.txt', 'w') as out_file:
    with open('moviereview.txt') as file:
        for line in file:
            line = ' '.join(line.split(' '))
            line = line.translate(translate_table)
            out_file.write("&lt;s&gt;" + line.rstrip('\n') + "&lt;/s&gt;" + '\n')

return out_file
</code></pre>
<p>However, I get an error saying: </p>
<blockquote>
<p>TypeError: expected a string or other character buffer object</p>
</blockquote>
<p>My thought is that after I split and join the line, I get a list of strings, so I cannot use str.translate() to process it. But it seems like everyone else have the same thing and it works, 
ex. <a href="https://appliedmachinelearning.blog/2017/04/30/language-identification-from-texts-using-bi-gram-model-pythonnltk/" rel="nofollow noreferrer">https://appliedmachinelearning.blog/2017/04/30/language-identification-from-texts-using-bi-gram-model-pythonnltk/</a> in example code from line 13. </p>
<p>So I am really confused, can anyone help? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>On Python 2, only <code>unicode</code> types have a <code>translate</code> method that takes a <code>dict</code>. If you intend to work with arbitrary text, the simplest solution here is to just use the Python 3 version of <code>open</code> on Py2; it will seamlessly decode your inputs and produce <code>unicode</code> instead of <code>str</code>.</p>
<p>As of Python 2.6+, replacing the normal built-in <code>open</code> with the Python 3 version is simple. Just add:</p>
<pre><code>from io import open
</code></pre>
<p>to the imports at the top of your file. You can also remove <code>line = ' '.join(line.split(' '))</code>; that's definitionally a no-op (it splits on single spaces to make a <code>list</code>, then rejoins on single spaces). You may also want to add:</p>
<pre><code>from __future__ import unicode_literals
</code></pre>
<p>to <a href="https://docs.python.org/2/library/__future__.html" rel="nofollow noreferrer">the <em>very</em> top of your file</a> (before <em>all</em> of your code); that will make all of your uses of plain quotes automatically <code>unicode</code> literals, not <code>str</code> literals (prefix actual binary data with <code>b</code> to make it a <code>str</code> literal on Py2, <code>bytes</code> literal on Py3).</p>
<p>The above solution is best if you can swing it, because it will make your code work correctly on both Python 2 and Python 3. If you can't do it for whatever reason, then you need to change your <code>translate</code> call to use the API <a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="nofollow noreferrer">Python 2's <code>str.translate</code></a> expects, which means removing the definition of <code>translate_table</code> entirely (it's not needed) and just doing:</p>
<pre><code>line = line.translate(None, string.punctuation)
</code></pre>
<p>For Python 2's <code>str.translate</code>, the arguments are a one-to-one mapping table for all values from 0 to 255 inclusive as the first argument (<code>None</code> if no mapping needed), and the second argument is a string of characters to delete (which <code>string.punctuation</code> already provides).</p>
</div>
<div class="post-text" itemprop="text">
<p>Answering here because a comment doesn't let me format code properly:</p>
<pre><code>def r():
    translate_table = dict((ord(char), None) for char in string.punctuation)
    a = []
    with open('out.txt', 'w') as of:
        with open('test.txt' ,'r') as f:
            for l in f:
                l = l.translate(translate_table)
                a.append(l)
                of.write(l)
    return a
</code></pre>
<p>This code runs fine for me with no errors. Can you try running that, and responding with a screenshot of the code you ran?</p>
</div>
<span class="comment-copy">using <code>" ".join(line.split(" "))</code> serves no purpose. you end up with exactly what you started with. Also, what line does the error occur on? also I assume it's just a copying issue but that's some very strange indenting.</span>
<span class="comment-copy">@Recessive the error occurs at the line "line = line.translate(translate_table) "</span>
<span class="comment-copy">Is this Python 2 or Python 3? If it's Python 2, this would be expected to fail unless you used <code>io.open</code> to open the file, not the normal built-in <code>open</code>.</span>
<span class="comment-copy">First thanks for all the explanation! It is very clear.  I tried the first solution you recommended, adding import from io and <i>future</i>.  But now I get this error: "UnicodeDecodeError: 'ascii' codec can't decode byte 0xe9 in position 2561: ordinal not in range(128)"   at line "for line in file:" . Is that because of the content of my input text file?</span>
<span class="comment-copy">@YuheZhu: Yup. Your input file is likely in something other than your locale's default encoding (<code>locale.getpreferredencoding(False)</code> will tell you what the default <code>io.open</code> uses is). If that's the case, you need to explicitly specify the <code>encoding</code> argument, e.g. <code>with open('test.txt' ,'r', encoding='utf-8') as f:</code> if the file is in UTF-8. <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow noreferrer">The codecs module has a list of standard encodings</a>; I'd try UTF-8, UTF-16 (if generated on Windows), then for Chinese, <code>gb18030</code> or some other unified East Asian or Chinese codec.</span>
<span class="comment-copy">@YuheZhu: When opening the file for write, you can match the encoding, though if the input is a locale specific codec like <code>gb18030</code>, you may want to switch to a portable encoding like <code>'utf-8'</code> that handles all Unicode characters, not just ASCII+East Asian characters.</span>
<span class="comment-copy">@YuheZhu: Okay. Be careful with single byte ASCII superset encodings like <code>'iso-8859-15'</code> though; they're one-to-one encodings that cover all, or most, possible byte values. They match up on ASCII, but each of them can usually validly decode most random strings of bytes, so unless a human checks that the results make sense, you can end up with no exceptions raised, but the result remaining total gibberish. You definitely don't want to preserve that encoding in the output file though; use UTF-8 (which is self-checking) so future users of the output files aren't as confused.</span>
<span class="comment-copy">For example, <code>iso-8859-15</code> (aka <code>latin-9</code>) is actually identical to <code>iso-8859-1</code> (aka <code>latin-1</code>) for all but eight bytes (out of 256), so if those eight bytes don't show up, the two encodings are indistinguishable.</span>
<span class="comment-copy">Are you using python3 or python2? I tried it with python2 and it is not working.</span>
<span class="comment-copy">python 3. try changing line <code>out_file.write("&lt;s&gt;" + line.rstrip('\n') + "&lt;/s&gt;" + '\n')</code> to <code>out_file.write(str("&lt;s&gt;" + line.rstrip('\n') + "&lt;/s&gt;" + '\n'))</code>. Also, chuck a print statement on every second line printing various variables if that deosn't work.</span>
