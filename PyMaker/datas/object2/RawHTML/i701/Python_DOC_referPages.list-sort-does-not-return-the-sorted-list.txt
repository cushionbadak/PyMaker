<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/22442378/what-is-the-difference-between-sortedlist-vs-list-sort">What is the difference between `sorted(list)` vs `list.sort()`?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I'm beginning python and am a little confused about why the following outputs <code>None</code>:</p>
<pre><code>x= [3,1,2]
y = x.sort()
print(y)  # output = None
</code></pre>
<p>I was expecting the output to be [1,2,3], but instead I get None. <em>Please note: I am aware of how to get the correct output now but am still curious about what is happening here for the output to be none.</em>
In my mind, the second line evaluates
x.sort() as [1,2,3], and then this be assigned to variable y.</p>
</div>
<div class="post-text" itemprop="text">
<p>The documentation for list tells you that calling the sort method on a list will do an INPLACE sort. I.E it will sort the values inside the current object. Thus it doesnt return any value for you to store in y.</p>
<pre><code>&gt;&gt;&gt; x = [3,1,2]
&gt;&gt;&gt; x.sort()
&gt;&gt;&gt; print(x)
[1, 2, 3]
</code></pre>
<p>However you may have a legitimate reason to want to sort the list of X without actually changing it and instead store the sorted output as a new object. You can do this by passing X to sorted function </p>
<pre><code>&gt;&gt;&gt; x = [3,1,2]
&gt;&gt;&gt; y = sorted(x)
&gt;&gt;&gt; print(x, y)
[3, 1, 2] [1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>OP: <em>I was expecting the output to be [1,2,3] but instead I get none.</em></p>
<p>Ans: because it does <strong>not</strong> return a list, rather just sorts it.</p>
<p>Hence:</p>
<pre><code>x = [3,1,2]
x.sort()
print(x)
</code></pre>
<p>OUTPUT:</p>
<pre><code>[1, 2, 3]
</code></pre>
<p>EDIT:</p>
<p>But if you must assign it to <code>y</code>, you could create a new sorted list and then assign it:</p>
<pre><code>x = [3,1,2]
y = sorted(x)
print(y)
</code></pre>
<p>OUTPUT:</p>
<pre><code>[1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code should be</p>
<pre><code>x= [3,1,2]
x.sort()
print(x)
</code></pre>
<p>Output</p>
<pre><code> [1,2,3]
</code></pre>
<p>There is no need to assign <code>x.sort()</code> to y</p>
<p>If you want to assign to other variable use:</p>
<pre><code>x= [3,1,2]
y=x.sorted()
print(y)
</code></pre>
<p>Hope it helps</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason why what you're doing is not working is that the method <code>sort()</code> does not return anything. Instead, it applies itself to the object which calls it (in this case <code>x</code>), but does not return any result.</p>
<p>You can verify this with <code>print(x.sort())</code>, which returns <code>None</code>.</p>
<p>To achieve what you'd like to do, you could first copy x: <code>y = x.copy()</code>, then sort y: <code>y.sort()</code>.
Here you're able to check that <code>x</code> is still equal to <code>[3,1,2]</code>, while <code>y</code> equals <code>[1,2,3]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer"><code>list.sort</code></a> in the documentation:</p>
<blockquote>
<p>This method modifies the sequence in place for economy of space when
  sorting a large sequence. To remind users that it operates by side
  effect, <strong>it does not return the sorted sequence</strong> (use sorted() to
  explicitly request a new sorted list instance).</p>
</blockquote>
<p>This is why your <code>y</code> ends up being <code>None</code>.</p>
<pre><code>x= [3,1,2]
y = sorted(x)
print(y)
</code></pre>
<p>works, as <code>sorted</code> returns the sorted list and doesn't sort in-place.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Python lists have a built-in <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer"><code>list.sort()</code></a> method that modifies the list in-place. There is also a <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted()</code></a> built-in function that builds a new sorted list from an iterable.</p>
</blockquote>
<p>Source: <a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">Python3 sorting HOW TO</a></p>
<hr/>
<p>Try this:</p>
<pre><code>x = [3,1,5,2,4]
print("x         =", x)
print("sorted(x) =", sorted(x))
print("x         =", x)
print("x.sort()  =", x.sort())
print("x         =", x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This has to do with mutability of python objects. <code>List</code> is mutable. The <code>sort()</code> method does an <code>in-place</code> change to the list <code>x</code> and does not <code>return</code>  a copy of the object. Hence your <code>y</code> is <code>None</code>. However if you inspect <code>x</code> itself it has  been modified and no longer holds the original list.</p>
</div>
<span class="comment-copy">Thanks guys, so the answer is because sort doesn't return a list. Sorry I can't give votes but that settles in my mind</span>
<span class="comment-copy">@user3880632 Exactly, if you want to store it to another var you could use <code>sorted()</code> as I described in the answer below.</span>
<span class="comment-copy">As far as first questions go, I've seen a lot worse! Have my upvote &lt;3</span>
<span class="comment-copy">@Blacksilver Ah, I got your back on this one!</span>
<span class="comment-copy">@Blacksilver I said the same thing. no reason to downvote. Perfectly valid question and its not a duplicate either. I would think coming from another programming language the  fact that the return value is <code>None</code> can often throw off people specially around mutability of data structures</span>
<span class="comment-copy">Worth noting: the lack of return value from <code>.sort()</code> is a feature; it's there to remind users that sorting is a side-effect.</span>
<span class="comment-copy">I am  not the downvoter but why would you write your own sorted function when python already provides one that is probably faster. <code>sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list</code></span>
<span class="comment-copy">I've not downvoted you. But I think is because you defined your own sorted function, when there is the built-in function <code>sorted</code> which do exactly the same thing.</span>
<span class="comment-copy">FML. too much of caffeine for the day, fixed. Thank you!</span>
<span class="comment-copy">Do you mean <code>y = sorted(x)</code>? Because as far as I know, list do not have a <code>sorted</code> method. <code>sorted</code> is a buil-in function.</span>
<span class="comment-copy">@Valentino Edited it, thanks.</span>
