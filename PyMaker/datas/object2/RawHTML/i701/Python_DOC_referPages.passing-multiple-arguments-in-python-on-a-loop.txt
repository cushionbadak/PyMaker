<div class="post-text" itemprop="text">
<p>I have a function that takes multiple arguments of tuples and process it accordingly. I was wondering if I can pass the arguments in a for-loop. 
For example: </p>
<pre><code>def func(*args):
   for a in args:
      print(f'first {a[0]} then {a[1]} last {a[2]}')
</code></pre>
<p>Then I would call the function as </p>
<p><code>func(('is', 'this', 'idk'), (1,2,3), ('a', '3', 2))</code></p>
<p>My question is if there is a way that I could modify the function calling in a loop without changing the function definition itself:</p>
<pre><code>func((i, i, i) for i in 'yes'))
</code></pre>
<p>such that it will print:</p>
<pre class="lang-none prettyprint-override"><code>first y then y last y
first e then e last e
first s then s last s
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, with a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow noreferrer">generator expression</a> and <a href="https://docs.python.org/dev/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer"><code>*</code> argument unpacking</a> in the call:</p>
<pre><code>func(*((i, i, i) for i in 'yes'))
</code></pre>
<p>which could also be written with the generator expression assigned to a variable first:</p>
<pre><code>args = ((i, i, i) for i in 'yes')
func(*args)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; func(*((i, i, i) for i in 'yes'))
first y then y last y
first e then e last e
first s then s last s
&gt;&gt;&gt; args = ((i, i, i) for i in 'yes')
&gt;&gt;&gt; func(*args)
first y then y last y
first e then e last e
first s then s last s
</code></pre>
</div>
