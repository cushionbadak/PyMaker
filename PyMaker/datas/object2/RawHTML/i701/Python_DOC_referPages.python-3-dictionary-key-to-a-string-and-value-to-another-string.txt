<div class="post-text" itemprop="text">
<p>if there is a dictionary: </p>
<pre><code>dict={'a':'b'}
</code></pre>
<p>in python 3, i would like to convert this dictionary key to a string and its value to another string:</p>
<pre><code>print(key)
key='a'
print(type(key))
str

print(value)
value='a'
print(type(value))
str
</code></pre>
<p>Some attempts:</p>
<pre><code>str(dict.key()) # returns 'dict' object has no attribute 'key'

json.dump(dict) # returns {'a':'b'} in string, but hard to process
</code></pre>
<p>Any easy solution? Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Use <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" rel="nofollow noreferrer"><code>dict.items()</code></a></strong>:</p>
<p>You can use <code>dict.items()</code> (<a href="https://docs.python.org/3/library/stdtypes.html#dict.iteritems" rel="nofollow noreferrer"><code>dict.iteritems()</code></a> for python 2), it returns pairs of keys and values, and you can simply pick its first.</p>
<pre><code>&gt;&gt;&gt; d = { 'a': 'b' }
&gt;&gt;&gt; key, value = list(d.items())[0]
&gt;&gt;&gt; key
'a'
&gt;&gt;&gt; value
'b'
</code></pre>
<p>I converted <code>d.items()</code> to a list, and picked its <code>0</code> index, you can also convert it into an iterator, and pick its first using <code>next</code>:</p>
<pre><code>&gt;&gt;&gt; key, value = next(iter(d.items()))
&gt;&gt;&gt; key
'a'
&gt;&gt;&gt; value
'b'
</code></pre>
<p><strong>Use <a href="https://docs.python.org/3/library/stdtypes.html#dict.keys" rel="nofollow noreferrer"><code>dict.keys()</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#dict.values" rel="nofollow noreferrer"><code>dict.values()</code></a></strong>:</p>
<p>You can also use <code>dict.keys()</code> to retrieve all of the dictionary keys, and pick its first key. And use <code>dict.values()</code> to retrieve all of the dictionary values:</p>
<pre><code>&gt;&gt;&gt; key = list(d.keys())[0]
&gt;&gt;&gt; key
'a'
&gt;&gt;&gt; value = list(d.values())[0]
&gt;&gt;&gt; value
'b'
</code></pre>
<p>Here, you can use <code>next(iter(...))</code> too:</p>
<pre><code>&gt;&gt;&gt; key = next(iter(d.keys()))
&gt;&gt;&gt; key
'a'
&gt;&gt;&gt; value = next(iter(d.values()))
'b'
</code></pre>
<p><strong>Ensure getting a <code>str</code></strong>:</p>
<p>The above methods don't ensure retrieving a string, they'll return whatever is the actual type of the key, and value. You can explicitly convert them to <code>str</code>:</p>
<pre><code>&gt;&gt;&gt; d = {'some_key': 1}
&gt;&gt;&gt; key, value = next((str(k), str(v)) for k, v in d.items())
&gt;&gt;&gt; key
'some_key'
&gt;&gt;&gt; value
'1'
&gt;&gt;&gt; type(key)
&lt;class 'str'&gt;
&gt;&gt;&gt; type(value)
&lt;class 'str'&gt;
</code></pre>
<p>Now, both <code>key</code>, and <code>value</code> are <code>str</code>. Although actual value in dict was an <code>int</code>.</p>
<p><strong>Disclaimer</strong>: These methods will pick first key, value pair of dictionary if it has multiple key value pairs, and simply ignore others. And it will NOT work if the dictionary is empty. If you need a solution which simply fails if there are multiple values in the dictionary, <a href="https://stackoverflow.com/questions/54488095/python-3-dictionary-key-to-a-string-and-value-to-another-string/54488163?#54488269">@SylvainLeroux's answer</a> is the one you should look for.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#typesmapping" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#typesmapping</a></p>
<p>The methods are you looking for are <code>keys()</code> and <code>values()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Make lists of keys and values:</p>
<pre><code>dict={'a':'b'}

keys = list(dict.keys())
values = list(dict.values())
</code></pre>
<p>then make variables:</p>
<pre><code>key = keys[0]
value = values[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; d = { 'a': 'b' }
&gt;&gt;&gt; d.items()
dict_items([('a', 'b')])
</code></pre>
<p>At this point, you can use a destructuring assignement to get your values:</p>
<pre><code>&gt;&gt;&gt; [[key, value]] = d.items()
&gt;&gt;&gt; key
'a'
&gt;&gt;&gt; value
'b'
</code></pre>
<p>One advantage in this solution is it will <a href="https://softwareengineering.stackexchange.com/questions/190528/error-handling-should-a-program-fail-on-errors-or-silently-ignore-them">fail in case of <code>d</code> containing several entries, instead of silently ignoring the issue</a>.</p>
<pre><code>&gt;&gt;&gt; d = { 'a': 'b', 'c':'d' }
&gt;&gt;&gt; [[key, value]] = d.items()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: too many values to unpack (expected 1)
</code></pre>
<p>Finally, if you need to ensure <code>key</code> and <code>value</code> to be strings, you may add a list comprehension:</p>
<pre><code>&gt;&gt;&gt; d = { 1: 2 }
&gt;&gt;&gt; [[key, value]] = ((str(key), str(value)) for key,value in d.items())
&gt;&gt;&gt; key
'1'
&gt;&gt;&gt; value
'2'
</code></pre>
</div>
<span class="comment-copy">The method you are looking for is <code>keys()</code> not <code>key()</code>.</span>
<span class="comment-copy"><code>print(str(dict.keys()))</code>  shows <code>a</code> you need to use <code>keys()</code> instead of <code>key()</code></span>
