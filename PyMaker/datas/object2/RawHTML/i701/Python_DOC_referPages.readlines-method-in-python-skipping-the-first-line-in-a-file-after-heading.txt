<div class="post-text" itemprop="text">
<pre><code>filename = os.path.abspath(r'C:\x\y\Any.ini') #Using absolute path
file = (open(filename, 'r', encoding='UTF-8'))
for line in file:
    if ("Heading A") in line:
        for line in file:
            out = file.readlines()[1:]
                    print(out)
</code></pre>
<p>Inside File the structure is</p>
<pre><code>[Heading A] #I don't want to read 
a[0]    # Not being read although i want to
a[1]    # Starts to be read in the program
b 
c
</code></pre>
<p>I also tried with </p>
<pre><code>file.read().splitlines()
</code></pre>
<p>Now I am getting prints from a[1]. a[0] is always being skipped. </p>
<p>Is there anything i am missing out to continue reading from 2nd line of the file</p>
</div>
<div class="post-text" itemprop="text">
<p>try this: </p>
<pre><code>firstLine = file.readline()
    if firstLine.startsWith("[Heading A]"):
        for line in file:
            //code
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have a sane configuration file. Read the following;</p>
<pre><code>https://docs.python.org/3/library/configparser.html
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following might work.</p>
<pre><code>filename = os.path.abspath(r'C:\x\y\Any.ini') #Using absolute path
file_lines = open(filename, 'r', encoding='UTF-8').readlines()[1:]
for line in file_lines:
    print(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is because the read pointer (or the stream position to be specific) advances as you iterate through the file. In your case, the two <code>for</code> loops are to be held responsible for it. When you call <code>readlines()</code> in the second loop, it only loops through the remaining lines in the file, and hence it looks like it is skipping lines.</p>
<p>Since you want to read lines post 'Heading A', you can simply read all lines once you encounter it. The code for the same should look something like:</p>
<pre><code>filename = os.path.abspath(r'C:\x\y\Any.ini')
file = (open(filename, 'r', encoding='UTF-8'))
for line in file:
    if ("Heading A") in line:
        out = file.readlines()[
        print(out)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To Add some explanations:</p>
<p>For reading a file line by line, see <a href="http://cmdlinetips.com/2011/08/three-ways-to-read-a-text-file-line-by-line-in-python/" rel="nofollow noreferrer">here</a>.</p>
<p>Your problem is that you are using multiple calls that each read one or multiple lines from the file and that line is gone for the next reading call - see my comments in the code:</p>
<pre><code>for line in file: // reads the first line and would read again if we came back here before the end of the file, which we do not
if ("Heading A") in line:
    for line in file: // reads the second line of the file and would read again if we came back here before the end of the file, which we do not
        out = file.readlines()[1:] // reads all remaining lines from the file ( beginning from the third) and drops the first (line three in the file) by indexing [1:]
                print(out) // prints out all lines begining with the fourth; after this, the file is at its and and both for loops will be finished
</code></pre>
<p>What you want to do is reading line by line and dropping the on containing <code>Heading A</code>:</p>
<pre><code>filename = os.path.abspath(r'C:\x\y\Any.ini') #Using absolute path
file = (open(filename, 'r', encoding='UTF-8'))
for line in file:
    if not ("Heading A") in line: print (line)
</code></pre>
</div>
<span class="comment-copy">what are you getting when you change <code>file.readlines()[1:]</code> to <code>file.readlines()</code></span>
<span class="comment-copy">file.readlines()[1:] gives me from b  and file.readlines() from a[1]</span>
