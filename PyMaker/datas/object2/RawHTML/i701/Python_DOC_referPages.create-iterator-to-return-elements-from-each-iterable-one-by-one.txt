<div class="post-text" itemprop="text">
<p>I was learning the itertools module and I am trying to make an iterator to return each element from the iterables provided as input.</p>
<pre><code>Agruments   Results
p, q, …     p0, q0, … plast, qlast 
</code></pre>
<p>with one more rider that if say the lists are not of the same length then <code>next(it)</code> should return elements from the longer list when the shorter one runs out.</p>
<p>Attempt at solution</p>
<pre><code>import itertools
l1=[1,2,3,4,5,6]
l2=['a','b','c','d']
l=[]
for x,y in itertools.zip_longest(l1,l2):
    l.extend([x,y])
it=iter(x for x in l if x is not None)
</code></pre>
<p>Which kind of solves my problem</p>
<pre><code>print(list(it))
</code></pre>
<p>Outputs:</p>
<pre><code>[1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 6]
</code></pre>
<p>Is there an easier or better way to do this? I searched for a solution on SO and was not able to get one.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable()</code></a> to flatten the sequence, and use a generator expression to filter out the <code>None</code> values:</p>
<pre><code>from itertools import chain, zip_longest

it = (v for v in chain.from_iterable(zip_longest(l1, l2)) if v is not None)
</code></pre>
<p>Rather than use <code>None</code> as the sentinel value, you may want to use a dedicated sentinel so you can use <code>None</code> in the input list:</p>
<pre><code>_sentinel = object()
flattened = chain.from_iterable(zip_longest(l1, l2, fillvalue=_sentinel))
it = (v for v in flattened if v is not _sentinel)
</code></pre>
<p>If you want to filter out <a href="https://docs.python.org/3/library/stdtypes.html#truth" rel="nofollow noreferrer"><em>falsey</em> values</a>, then you can also use <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter(None, ...)</code></a>:</p>
<pre><code>it = filter(None, chain.from_iterable(zip_longest(l1, l2)))
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain, zip_longest
&gt;&gt;&gt; l1 = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; l2 = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; it = (v for v in chain.from_iterable(zip_longest(l1, l2)) if v is not None)
&gt;&gt;&gt; list(it)
[1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 6]
</code></pre>
<p>and with a local sentinel:</p>
<pre><code>&gt;&gt;&gt; l1 = [1, None, 2, None, 3, None]
&gt;&gt;&gt; l2 = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; _sentinel = object()
&gt;&gt;&gt; flattened = chain.from_iterable(zip_longest(l1, l2, fillvalue=_sentinel))
&gt;&gt;&gt; it = (v for v in flattened if v is not _sentinel)
&gt;&gt;&gt; list(it)
[1, 'a', None, 'b', 2, 'c', None, 'd', 3, None]
</code></pre>
<p>The <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>itertools</code> recipes section</a> also has:</p>
<pre><code>def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
    # Recipe credited to George Sakkis
    num_active = len(iterables)
    nexts = cycle(iter(it).__next__ for it in iterables)
    while num_active:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            # Remove the iterator we just exhausted from the cycle.
            num_active -= 1
            nexts = cycle(islice(nexts, num_active))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a modified version of your code, building a generator from the start (no storing list <code>l</code>):</p>
<pre><code>import itertools
l1=[1,2,3,4,5,6]
l2=['a','b','c','d']

def flat_zip(l1,l2):
    for x,y in itertools.zip_longest(l1,l2):
        if x:
            yield x
        if y:
            yield y
it=flat_zip(l1,l2)
</code></pre>
<p>Though I advise for using the builtin solutions above.</p>
</div>
<span class="comment-copy">The <code>itertools</code> documentation includes an implementation of this in the <a href="https://docs.python.org/2/library/itertools.html#recipes" rel="nofollow noreferrer">Recipes</a> section, called <code>roundrobin</code>.</span>
