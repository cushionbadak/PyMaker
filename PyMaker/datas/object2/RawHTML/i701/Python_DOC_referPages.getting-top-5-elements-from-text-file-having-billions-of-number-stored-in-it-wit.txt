<div class="post-text" itemprop="text">
<ol>
<li>Find list of 5 top number from a text file having billions of numbers stored. Numbers are either coma separated or in new lines.I cannot store the content of list in a variable because of memory issue.</li>
<li>I have used generator and giving the batch size as 5. So that each time when I call <code>next(result_generator)</code> I get 5 elements from the text file.</li>
<li>First time when the <code>next(result_generator)</code> is called, I will get 5 elements and sort them.I will consider them as the top 5.</li>
<li>Next time when I will call <code>next(result_generator)</code>, I will get another 5.I will combine it with previous 5. I will sort it and then get top 5 out of those 10.</li>
<li>Similarly, taking next 5 and combining with previous 5 to get top fifty until it <code>next(result_generator)</code> return <code>None</code>.</li>
</ol>
<p>The problem I am facing is generator is not working properly, it is not taking the next 5 elements.It is going to Exception when making 2nd call of <code>next(result_generator)</code>.
I tried to do the same thing with database , it is working fine there.I suspect file operation has some issue.
I am using random function to generate numbers and writing it in text file for sample input.</p>
<p>Code to generate random numbers in text file:</p>
<pre><code>count =500
f = open('billion.txt','w')
while(count &gt;1):
     a = random.randint(1, 1000)
     f.write(str(a)+"\n")
     count-=1
f.close()
</code></pre>
<p>Code to find top 5 elements from text file:</p>
<pre><code>result = []
full_list = []
final_list = []
def result_generator(batchsize=5):
    while True:
        global result
        global full_list
        global final_list
        result = sorted([int(next(myfile).rstrip()) for x in range(batchsize)], reverse=True)
        final_list = sorted(full_list + result, reverse=True)[:5]
        full_list = result.copy()
        # print("result list is : {}".format(final_list))
        if not final_list:
            break
        else:
            yield final_list


with open("billion.txt") as myfile:
    result = result_generator()
    print("datatype is :", type(result))
    print("result is ",next(result))
    for i in range (0,2):
        try:
            for each in next(result):
                print("Row {} is :".format(each))
        except StopIteration:
            print("stop iteration")
        except Exception:
            print("Some different issue")
</code></pre>
<p>e.g.</p>
<p>131,205,65,55,222,278,672,902,69,26.......billions</p>
<p>Expected result : <code>[902,672,278,222,205]</code><br/>
Actual  result : <code>[222,205,131,65,55]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Why not use <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer">heapq</a></p>
<p>With some file like file.txt</p>
<pre><code>131
205
65
55
222
278
672
902
69
26
</code></pre>
<p>You iterate your file normally and can do</p>
<pre class="lang-py prettyprint-override"><code>import heapq

data = []
heapq.heapify(data)
N = 5

result = []
# Assuming numbers are each on a new line
with open('file.txt', 'r') as f:
    for line in f:
        heapq.heappush(data, int(line.strip()))
        if len(data) &gt; N:
            heapq.heappop(data)
while data:
    result.append(heapq.heappop(data))

result.reverse()
print(result)
</code></pre>
<pre><code>[902, 672, 278, 222, 205]
</code></pre>
<p>You will be using O(N) memory and O(MlogN) time where M is in billions for your problem and N is however many top numbers you want to get</p>
</div>
<span class="comment-copy">How is this batch file related? Should that tag be removed?</span>
<span class="comment-copy">@JohnKens - A large number of people have a tendency to use [batch-file] when they really mean [batch-processing]. You get used to it eventually.</span>
<span class="comment-copy">It would be useful for testing if you used a reproducible list of random numbers. To do this please add a <code>random.seed(42)</code> at the beginning of the code that generats the file of numbers and make a new file. After that, rerun you code and the update the expected and actual results shown in your question.</span>
<span class="comment-copy">@JohnKens, yes it should be removed. Thankyou !</span>
<span class="comment-copy">@SomethingDark, my confusion always with batch and batch processing is, whenever i need to process something in bits ,i consider it as batch processing because our inputs are in batches(not whole but in pieces).So, can we call my above code as batch processing using generator ?</span>
<span class="comment-copy">Like I linked to heapq in my answer, it uses binary heaps under the hood. You should read the module documentation as well as lookup binary heaps for better understanding <a href="https://en.m.wikipedia.org/wiki/Heap_(data_structure)" rel="nofollow noreferrer">en.m.wikipedia.org/wiki/Heap_(data_structure)</a>. Binary heaps have a special property of maintaining minimum (or maximum) of all values in its subtree at the root. All I do in my above program is pop that minimum once we have more than N elements in our heap, thus maintaining greatest N observed so far at any time</span>
