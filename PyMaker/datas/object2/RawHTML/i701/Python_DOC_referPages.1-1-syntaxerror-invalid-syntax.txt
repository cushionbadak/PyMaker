<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; 1, == (1,)
  File "&lt;ipython-input-34-bddb0dd08d2c&gt;", line 1
    1, == (1,)
        ^
SyntaxError: invalid syntax
</code></pre>
<p>Why am I getting a <code>SyntaxError</code>? The line in the console points to the comparison operator '=='. I was trying to compare 2 tuples. Yes, <code>(1,) == (1,)</code> works.</p>
<p>Is this related to this ... ?</p>
<pre><code>    1,

Out[1]: (1,)
,1
Traceback (most recent call last):
File "&lt;ipython-input-2-d73977cd7b2e&gt;", line 1, in &lt;module&gt;
1("")
TypeError: 'int' object is not callable
def h():
print("hello from h")
h
Out[4]: &lt;function __main__.h&gt;
h()
hello from h
,h
Traceback (most recent call last):
File "&lt;ipython-input-6-89db5d24b531&gt;", line 1, in &lt;module&gt;
h("")
TypeError: h() takes 0 positional arguments but 1 was given
def h(""):
print("hello from h")
File "&lt;ipython-input-7-e4606aaf3740&gt;", line 1
def h(""):
^
SyntaxError: invalid syntax
def h(a):
print("hello from h")
,h
hello from h
</code></pre>
<p>I am finding it funny - Python 3.6.3, doesn't happen on 2.7 or 3.5...</p>
<pre><code>,ord A
Out[112]: 65
</code></pre>
<p>This is getting a bit ugly. Just tried new IDE - Pycharm with python 3.6.3. Console gives me syntax error on ",ord A" but Spyder 3.3.1 doesn't. Is this something to do with IPython? 7.2 gives same result on ",ord A" &gt;&gt; 65.</p>
<p>Ok, 5 Feb 2019. I seem to have fallen into a black hole. An IPython black hole. Seems Like I was getting confused by another sub language IPython which is what the console uses. %Autocall in IPython 'Make functions callable without having to type parentheses'.  Although setting %Autocall to 0 still seems to enable this behaviour.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's invalid syntax. Python sees a tuple with 2 values created from the expressions <code>1</code> and <code>== (1,)</code>. The latter is an incomplete expression, so you get an error just for that part.</p>
<p>See the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer"><em>Operator precedence</em> table</a>, <em>tuple displays</em> have the highest precedence, so the expressions between commas are executed before creating the tuple object from the results.</p>
<p>So yes, you can create tuples with just commas, but then <em>each constituent part</em> has to be a complete expression. You can't create a tuple without using parentheses if you want the tuple to be part of a larger expression.</p>
<p>That's because for <em>any</em> expression that doesn't use parentheses but which does contain a comma, the comma will result in a tuple being created from the sub-expressions that lie before and after the comma (with the part coming after being optional). Use parentheses to change what Python sees as a complete expression. So if you want to compare two distinct tuples, you <em>must</em> use parentheses to deliniate both tuples, so use <code>(1,) == (1,)</code>. As soon as you drop either set of parentheses you are creating a single tuple containing larger expressions (e.g. <code>(1,) == 1,</code> creates a single-element tuple from the <code>(1,) == 1</code> equality test, resulting in <code>(False,)</code>).</p>
</div>
<span class="comment-copy">you have a comma after the <code>int</code> 1 which is not valid python</span>
<span class="comment-copy">formating caused ^ to seemingly point to first equals sign but console says last equals sign.</span>
<span class="comment-copy">@aws_apprentice I do not think this is what OP intends, rather the question is why syntax like in <code>a = 1,2</code> can not be used in this case.</span>
<span class="comment-copy">does this help? <code>1, 1 == 1</code> &gt;&gt;&gt; <code>(1, True)</code></span>
<span class="comment-copy">Makes sense to me. <code>1, 1 == 1</code> is equivalent to <code>1, (1 == 1)</code>.</span>
<span class="comment-copy">'Binding or tuple display'  I don't think I understand the operator precedence. Is the ',' (comma) an operator? If I put 1, in console it spits back (1,)  - so it assumes that is a tuple. -  (), = ()   in console gives me 'ValueError: not enough values to unpack (expected 1, got 0)'</span>
<span class="comment-copy"><code>1,</code> is a tuple, yes. <code>(), = ()</code> is an <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">assignment statement</a>, which attempts to assign a single value (the empty tuple <code>()</code>)` to a tuple of targets. That requires that the right-hand side is an iterable with 1 element in it, and that fails. That you can't assign to the empty tuple hasn't yet been determined. In assignment, the expression to the right of the rightmost <code>=</code> is always evaluated first, as per the statement documentation.</span>
<span class="comment-copy">(1,) == 1, &gt;&gt;&gt; Out[87]: (False,)</span>
<span class="comment-copy">@JoePythonKing: Yes, because that's <code>(1,) == 1</code> inside a 1-element tuple.</span>
<span class="comment-copy">@JoePythonKing: again, the <code>,</code> is a <i>highest-precedence</i> operation. The expression before and after the comma (if there are any) are evaluated first, then the tuple is constructed from the results of those expressions.</span>
