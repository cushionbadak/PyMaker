<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/509211/understanding-slice-notation">Understanding slice notation</a>
<span class="question-originals-answer-count">
                    31 answers
                </span>
</li>
</ul>
</div>
<p>Hay fellow programmers, </p>
<p>I'm new to programming and was wondering if someone could help clear something up for me? I'm not sure if it's because of the way it's written or if it is simply a real, but contradictory way of doing something. </p>
<p>I'm currently learning Python from the book 'Learn Python in One Day' and their explanation of list slicing has confused me. At the beginning, they state individual indexes always start from zero, but in a later example they seem to be using '1' as the starting point(?) and ending at index 5 - 1? </p>
<p>The example they're using for below is: userAge = [21, 22, 23, 24, 25]</p>
<p>At the beginning, in the extract below, they explain that the index for 21 = 0, the index for 22 = 1, 23 = 2, 24 = 3, and 25 = 4.</p>
<p>But when they get to the bottom of the extract they are talking about a 5th index (despite there not being one in the example above)...</p>
<p>Here's the extract from the book. I've highlighted the bits that have confusticated me:</p>
<p><em>"Individual values in the list are accessible by their indexes, and <strong>indexes always start from ZERO, not 1</strong>. This is a common practice in almost all programming languages, such as C and Java. Hence the first value has an index of 0, the next has an index of 1 and so forth. For instance, userAge[0] = 21, userAge[1] = 22.</em> </p>
<p><em>Alternatively, you can access the values of a list from the back. The last item in the list has an index of -1, the second last has an index of -2 and so forth. Hence, userAge[-1] = 25, userAge[-2] = 24.</em> </p>
<p><em>You can assign a list, or part of it, to a variable. If you write userAge2 = userAge, the variable userAge2 becomes [21, 22, 23, 24, 25].</em> </p>
<p><em>If you write userAge3 = userAge[2:4], you are assigning items with index 2 to index 4-1 from the list userAge to the list userAge3. In other words, userAge3 = [23, 24].</em> </p>
<p><em>The notation 2:4 is known as a slice. Whenever we use the slice notation in Python, the item at the start index is always included, <strong>but the item at the end is always excluded.</strong> Hence the notation 2:4 refers to items from index 2 to index 4-1 (i.e. index 3), which is why userAge3 = [23, 24] and not [23, 24, 25].</em> </p>
<p><em>The slice notation includes a third number known as the stepper. If we write userAge4 = userAge[1:5:2], we will get a sub list consisting of every second number from index 1 to index 5-1 because the stepper is 2. Hence, userAge4 = [22, 24].</em> </p>
<p><em>In addition, slice notations have useful defaults. The default for the first number is zero, and the default for the second number is size of the list being sliced. For instance, userAge[ :4] gives you values from index 0 to index 4-1 while userAge[1: ] gives you values <strong>from index 1 to index 5-1</strong> (since the size of userAge is 5, i.e. userAge has 5 items)."</em> </p>
<p>I'm not sure where they are getting the '5 - 1' if the original example had only index 0 - 4 (despite that meaning there are five items in the list). Is this a "rule change" or have they changed the index numbers from 0 to 4, to 1 to 5? I know the '5 - 1' means you would go back to index 4 due to the "end exclusive" they mention above, but don't you need the item there before you can minus it? In the original example, there is no 5th index (though there are 5 items on the list)...</p>
<p>Needless to say, I am very confused! Haha.</p>
<p>Thanks in advance for your help!</p>
<p>Jane. x</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, there's quite a lot of misleading explanations in this extract.</p>
<p>Regarding default values for slicing – forget the indexes, in "human" interpretation:</p>
<ul>
<li><code>data[x:]</code> – slice starting from index <code>x</code> all the way till the end</li>
<li><code>data[:x]</code> – slice starting from the very beginning and up to <code>x</code>-th element</li>
</ul>
<p>Reason reason they're telling about <code>5 - 1</code> is because second value for slicing is exclusive, i.e. to explicitly slice till the end of array of length N, you're writing <code>[:N]</code>, but last element will have index <code>N-1</code> – exactly because indexing starts at 0, but element count starts from 1.</p>
</div>
<div class="post-text" itemprop="text">
<p>When slicing <code>userAge[1:]</code>, you get everything from the <em>2nd</em> element all the way to the last one.</p>
<p><code>userAge[1:]</code> = [22, 23, 24, 25]</p>
</div>
<div class="post-text" itemprop="text">
<p>Slicing can be explained like this.</p>
<pre><code>a[first:last]#items goes at first to last-1
a[first:]#items goes from first to the rest of the array
a[:last]#items from the beginning to the end-1
a[:]#copy of the whole array.
</code></pre>
<p><strong>For Step</strong></p>
<pre><code>a[first:last:step]#starts from first, not past last,by step.
</code></pre>
<p>I will give you another example, if you ask for a[:-2] and an only contains one element, you get an empty list instead of an error.</p>
<p>So, in this when we use `userage[1:], everything starts from 2nd element.</p>
</div>
<span class="comment-copy"><code>userAge[1: ]</code> is a slice starting at index 1 (explicitly written) and ending at index 4 in this particular case (length is 5, default for an unspecified end index is length-1).  It's not clear why you think that anything different is happening here.</span>
<span class="comment-copy">No, there is no change to the indexing method, that always starts from 0. Think of it as: the first part of the slice is the first index to include, the second part is the first index after that to <i>not</i> include. You seem to be thinking of it as specifying the first and last indices to include, which is causing the confusion.</span>
<span class="comment-copy">When slicing <code>userAge[1:]</code>, it's getting everything from the <i>2nd</i> element all the way to the last one.</span>
<span class="comment-copy">I've always found the <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">official Python tutorial</a> more than good enough at explaining these kinds of things. The section on <a href="https://docs.python.org/3/tutorial/introduction.html#strings" rel="nofollow noreferrer">strings</a> contains a discussion of slices.</span>
<span class="comment-copy">@VictorValente - So, their note "the item at the end is always excluded" is not applicable in this case?</span>
