<div class="post-text" itemprop="text">
<p>According to the documentation: <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">https://docs.python.org/3/library/threading.html</a></p>
<blockquote>
<p>A thread can be flagged as a “daemon thread”. The significance of this flag is that the entire Python program exits when only daemon threads are left. The initial value is inherited from the creating thread. The flag can be set through the daemon property or the daemon constructor argument.</p>
</blockquote>
<p>Sample code:</p>
<pre><code>thread = threading.Thread(target=MultiHandler().network, args=(conn, data), daemon=True)
thread.start()
</code></pre>
<p>Refering to many other StackOverflow answers, it is not clear to me if daemon threads are forced to close when the main thread calls <code>sys.exit()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Referring to the comment posted by zwer,</p>
<blockquote>
<p>When a program exits, all of its children threads are killed with it. Threads that are not daemonic will prevent the program from exiting, hence preventing their own destruction. - zwer</p>
</blockquote>
<p>In short, yes daemon threads will not stop the program from exiting thus they will be killed on exit.</p>
</div>
<span class="comment-copy">When a program exits, all of its children threads are killed with it. Threads that are not <i>daemonic</i> will prevent the program from exiting, hence preventing their own destruction.</span>
<span class="comment-copy">@zwer In that case if my threads are non-daemon do I still have to call <code>join()</code> to wait for the thread before calling <code>sys.exit()</code>?</span>
<span class="comment-copy">You don't, but then you lose control over your program exit. If you don't manage graceful exit you'll end up with your main thread <i>finishing</i> and then hanging there waiting for other threads to finish with no way to instigate that.</span>
<span class="comment-copy">Documentation for <code>sys.exit()</code> is less than clear about multi-threaded programs, but if you look closely, you'll see that it says that <code>sys.exit()</code> doesn't do anything but throw an exception.  So, it will only terminate the one thread that calls it, and only if the thread has no handler that swallows the exception.</span>
