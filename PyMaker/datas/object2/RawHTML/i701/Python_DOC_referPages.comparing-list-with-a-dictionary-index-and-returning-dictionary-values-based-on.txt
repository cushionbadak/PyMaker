<div class="post-text" itemprop="text">
<p>I have a list that has 'index' values that I want to compare to a dictionary index. I want the dictionary values to be returned in the same order as the list. example below:</p>
<pre><code>list =['a','b','c','d'...n]

dict = {'d':'fourth' ,'a': 'first','b':'second','c':'third'...n}
</code></pre>
<p>The issue is, when I execute the following: </p>
<pre><code>sorted_list = [value for index, value in dict.items() if index in list]
</code></pre>
<p>I end up with a list:</p>
<pre><code>['fourth','first','second','third']
</code></pre>
<p>instead of:</p>
<pre><code>['first','second','third','fourth']
</code></pre>
<p>Is there a way to ensure that the sorting maintains the original list order?</p>
<p>I cannot change the dictionary order to match the list because the list may have different combinations of values. </p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, there is, just iterate over the list and fetch the values from the dictionary:</p>
<pre><code>lst =['a','b','c','d']
dct = {'d':'fourth' ,'a': 'first','b':'second','c':'third'}
result = [dct[i] for i in lst]

print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['first', 'second', 'third', 'fourth']
</code></pre>
<p>As a side note do not use <em>built-in</em> names as variable names. The above <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> is equivalent to the following <code>for</code> loop:</p>
<pre><code>result = []
for e in lst:
    result.append(dct[e])
</code></pre>
<p>If you want a more robust version, you could use the <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer">get</a> method and provide a default value, like this:</p>
<pre><code>lst =['a','b','c','d', 'f']
dct = {'d':'fourth' ,'a': 'first','b':'second','c':'third'}
result = [dct.get(e, 'missing') for e in lst]
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['first', 'second', 'third', 'fourth', 'missing']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using </p>
<pre><code>list(map(dct.get,lst))
Out[60]: ['first', 'second', 'third', 'fourth']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a simple way using <a href="https://docs.python.org/2/library/operator.html" rel="nofollow noreferrer"><code>operator.itemgetter</code></a>:</p>
<pre><code>l =['a','b','c','d']
d = {'d':'fourth' ,'a': 'first','b':'second','c':'third'}

itemgetter(*l)(d)
('first', 'second', 'third', 'fourth')
</code></pre>
<hr/>
<p>The problem with your code is that you are iterating over <code>dict.items()</code>, and thus you will be extracting values following the order in which the values appear in the dictionary. You want to do this the other way around, thus to get values from the dictionary by iterating over the values in the list to get them in the same order.</p>
<p>By using <code>itemgetter</code> you are fetching from <code>d</code> all elements in <code>l</code>, so it is a more concise way of doing as I mentioned, which could also be done quite easily using a list comprehension.</p>
</div>
<div class="post-text" itemprop="text">
<p>a couple options depending on your needs:</p>
<pre><code>from collections import OrderedDict


def ret(items, lookup):
    # using a Generator, which you can then get items as needed. if you need all items, just cast to list
    for li in items:
        yield lookup[li]


def ret2(lookup):
    # if all you are concerned with is alphanumeric sort by keys, use the inbuilt OrderedDict
    lookup = OrderedDict(sorted(lookup.items(), key=lambda t: t[0]))
    return lookup.values()
</code></pre>
<h1>usage:</h1>
<pre><code>print (list(
    ret(
        items=['a','b','c','d'],
        lookup={'d':'fourth' ,'a': 'first','b':'second','c':'third'}
    )
))

print (ret2(lookup={'d':'fourth' ,'a': 'first','b':'second','c':'third'}))
</code></pre>
<p><a href="https://docs.python.org/2/library/collections.html" rel="nofollow noreferrer">https://docs.python.org/2/library/collections.html</a></p>
</div>
<span class="comment-copy">don't use built-ins as names for your variables!</span>
<span class="comment-copy">Just sort the final list using <code>list_ = [value for index, value in dict.items() if index in list]; sorted_list = sorted(list_)</code> ?</span>
<span class="comment-copy">What should happen to duplicates, and elements not present in the dict? For example, what should the output be if <code>list</code> is <code>['a', 'b', 'a', 'this_string_is_not_in_dict']</code>?</span>
