<div class="post-text" itemprop="text">
<p>I am trying to use the deck list from Deck class in Hand class, I am getting the error "NameError: name 'deck' is not defined" in line "deckCopy=deck"</p>
<pre><code>class Deck(Card):
    def __init__(self):
        pass
    def get_cards(self):
        deck=[]
        for i in range(1,15):
            deck.append(Card("red","heart",i))
            deck.append(Card("red","diamond",i))
            deck.append(Card("black","club",i))
            deck.append(Card("black","spade",i))
        random.shuffle(deck)
        for i in deck:
            if i.number==11:
                deck.remove(i)
        return deck
class Hand(Deck):
    def __init__(self):
        pass
    deck=Deck.get_cards()
    deckCopy=deck
    random.shuffle(deckCopy)
    def get_hand():
        Hand=[]
        counter=1
        for i in deckCopy:
            Hand.append(i)
            deckCopy.remove(i)
            if counter==5:
                break
        return Hand
</code></pre>
<p>I expect to return a list of 4 Card objects, not sure if the counter should be 4 or 5, but that is not important.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a modified version of my answer, I misinterpreted your code earlier which made my answer kind of irrelevant.</p>
<pre><code>class Card:                                                                                                                                                                                   
    def __init__(self, color, suit, count):                                                                                                                                                   
        self.color = color                                                                                                                                                                    
        self.suit = suit                                                                                                                                                                      
        self.count = count  

class Deck(Card):                                                                                                                                                                             
    def __init__(self):                                                                                                                                                                       
        pass   

    @staticmethod                                                                                                                                                                             
    def get_cards():                                                                                                                                                                          
        deck=[]                                                                                                                                                                               
        for i in range(1,15):                                                                                                                                                                 
            deck.append(Card("red","heart",i))                                                                                                                                                
            deck.append(Card("red","diamond",i))                                                                                                                                              
            deck.append(Card("black","club",i))                                                                                                                                               
            deck.append(Card("black","spade",i))                                                                                                                                              
        random.shuffle(deck)                                                                                                                                                                  
         for i in deck:                                                                                                                                                                      
             if i.number==11:                                                                                                                                                                
                 deck.remove(i)                                                                                                                                                              
        return deck                                                                                                                                                                           

class Hand(Deck):                                                                                                                                                                             
    def __init__(self):                                                                                                                                                                       
        pass                                                                                                                                                                                  
    deck=Deck.get_cards()                                                                                                                                                                     
    deckCopy=deck                                                                                                                                                                             
    random.shuffle(deckCopy)                                                                                                                                                                  
    def get_hand():                                                                                                                                                                           
        Hand=[]                                                                                                                                                                               
        counter=1                                                                                                                                                                             
        for i in deckCopy:                                                                                                                                                                    
            Hand.append(i)                                                                                                                                                                    
            deckCopy.remove(i)                                                                                                                                                                
            if counter==5:                                                                                                                                                                    
                break                                                                                                                                                                         
        return Hand 
</code></pre>
<p>Please note I have made one of the methods as <code>static</code> since you are not using you are not doing anything specific to instance in this method. It is just creating a deck of cards whenever you call it</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Question</strong>: I am trying to use the deck list from Deck class in Hand class</p>
</blockquote>
<p>Wrong approach, a <code>Hand</code> should not access the <strong>whole</strong> <code>Deck</code>.<br/>
To get a <code>Hand</code> ask  the <code>Deck</code> <strong>give me a random <code>Hand</code></strong>, e.g:</p>
<pre><code>myDeck = Deck()
hand = myDeck.hand(5)
</code></pre>
<blockquote>
<p><strong>Question</strong>:  I am getting the error <code>NameError: name 'deck' is not defined" in line "deckCopy=deck</code></p>
</blockquote>
<p>This means your Questions code is different from the code you are running.<br/>
You are getting: <code>TypeError: get_cards() missing 1 required positional argument: 'self'</code>,<br/>
on line <code>deck=Deck.get_cards()</code></p>
<p>You are calling <code>.get_cards()</code> using this notation <strong><code>Deck.get_cards()</code></strong> and it sould be <code>Deck.get_cards(self)</code>. As you inherited from <code>Desk</code> you could simple use <strong><code>deck=self.get_cards()</code></strong></p>
<hr/>
<blockquote>
<p>Rethink your whole approach, you don't need <code>inheritance</code> at all.  </p>
</blockquote>
<p>A <code>Card</code> is a <code>Card</code>, a <code>Suit</code> is a <code>Suit</code> and a <code>Desk</code> is a <code>Desk</code>:</p>
<blockquote>
<p><strong>Note: This example does not take attention to already handed cards!!</strong></p>
</blockquote>
<pre><code>import random

class Card:
    def __init__(self, color, symbol, rank):
        self.color = color
        self.symbol = symbol
        self.rank = rank

    def __str__(self):
        return '({} color:{}, rank:{})'.format(self.symbol, self.color, self.rank)

class Suit:
    def __init__(self, symbol):
        color = {'heart': 'red', 'diamond':'red', 'club':'black', 'spade':'black'}
        self.cards = []

        for rank in range(1, 11):
            self.cards.append(Card(color[symbol], symbol, rank))

        for rank in ['king', 'queen', 'jack', 'ace']:
            self.cards.append(Card(color[symbol], symbol, rank))

class Deck:
    def __init__(self):
        self.card_suits = []

        for symbol in ['heart', 'diamond', 'club', 'spade']:
            self.card_suits.append(Suit(symbol))

    def sample(self, count):
         cards = []
         for card_suit in self.card_suits:
            for card in card_suit.cards:
               cards.append(card)

         return random.sample(cards, count)

    def hand(self, count):
        return self.sample(count)
</code></pre>
<blockquote>
<p><strong>Usage</strong>:</p>
</blockquote>
<pre><code>if __name__ == '__main__':
    myDeck = Deck()

    for _ in range(3):
       hand = myDeck.hand(5)
       print('hand:{}'.format(', '.join([str(card) for card in hand])))
</code></pre>
<blockquote>
<p><strong>Output</strong>:</p>
<pre><code>hand:(heart color:red, rank:6), (club color:black, rank:king), (spade color:black, rank:9), (club color:black, rank:8), (diamond color:red, rank:queen)
hand:(diamond color:red, rank:8), (spade color:black, rank:5), (club color:black, rank:1), (club color:black, rank:5), (spade color:black, rank:2)
hand:(heart color:red, rank:10), (heart color:red, rank:6), (diamond color:red, rank:8), (club color:black, rank:3), (heart color:red, rank:ace)
</code></pre>
</blockquote>
<p><strong><em>Tested with Python: 3.4.2</em></strong></p>
</div>
<span class="comment-copy">Shouldn't it be <code>slef.deck</code>?</span>
<span class="comment-copy">Are those lines really meant to define attributes of class <code>Hand</code> as their placement and indentation suggests? This code should have failed in the previous line already due to missing argument of calling instance method <code>get_cards</code> through its class (missing argument <code>self</code>). And btw. <code>deckCopy=deck</code> does not create copy, just a new reference (name) for the very same object.</span>
<span class="comment-copy">@Rabbid76 Not where it's sitting right now. :) Not sure if that was intentional though.</span>
<span class="comment-copy">The line where you get the error and the two ones surrounding it should be part of a method. The reason behind this behaviour in the body of a class is explained <a href="https://docs.python.org/3/library/codecs.html#text-transforms" rel="nofollow noreferrer">here</a>. Anyway, there are a lot of problems in your code. For a start, <code>Deck</code> should not inherit from <code>Card</code>, as it isn't a <code>Card</code></span>
<span class="comment-copy">@ThierryLathuille I don't know if I can add a card in a deck if the program doesn't know what a card is. Open to suggestions here.</span>
<span class="comment-copy">don't you have to actually call <code>super()</code>?</span>
<span class="comment-copy">Yeah.. I missed, it was typo. I will edit my post.</span>
<span class="comment-copy">Did all of that and now i get "TypeError: get_cards() missing 1 required positional argument: 'self' " on line "deck=Deck.get_cards()"</span>
<span class="comment-copy"><a href="https://stackoverflow.com/posts/54501900/edit">Edit</a> your Answer, this <code>Super()</code> have to be lowercase <code>super()</code></span>
