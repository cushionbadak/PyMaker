<div class="post-text" itemprop="text">
<p>Hello I want to implement for myself a little library access control in my copy of python and I want to know if there is some way to create a Hook on the import system so my programm Can check on a file every time an import is made if that programm has the permission to import that library.
I saw something about the sys library and pep 302 (<a href="https://www.python.org/dev/peps/pep-0302/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0302/</a>) but I didn't understood. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can change the import of modules by implementing you own custom import loader object. A starting point in the documentation can be found here: <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">https://docs.python.org/3/library/importlib.html</a></p>
<p>What you need to do is to create a loader that will act on the packages you want to check on, and then either load them, or raise a desired exception. In the case of modules what are not in your access control list, you should return None, this makes the import machinery load them normally. I have create a minimal example of this type of functionality that you can start from and extend to build your desired functionality.</p>
<pre><code>import sys
import importlib

class ImportInterceptor(importlib.abc.Loader):
    def __init__(self, package_permissions):
        self.package_permissions = package_permissions

    def find_module(self, fullname, path=None):
        if fullname in self.package_permissions:
            if self.package_permissions[fullname]:
                return self
            else:
                raise ImportError("Package import was not allowed")

    def load_module(self, fullname):
        sys.meta_path = [x for x in sys.meta_path[1:] if x is not self]
        module = importlib.import_module(fullname)
        sys.meta_path = [self] + sys.meta_path
        return module


if not hasattr(sys,'frozen'):
    sys.meta_path = [ImportInterceptor({'textwrap': True, 'Pathlib': False})] + sys.meta_path


import textwrap

print(textwrap.dedent('    test'))
# Works fine

from pathlib import Path
# Raises exception
</code></pre>
<p>Note that the loader removes itself from sys.meta_path when loading the package. This is to avoid an infinite loop where it keeps calling itself every time it tries to load the module "for real".</p>
</div>
<span class="comment-copy">Welcome to Stackoverflow. StackOverflow is <b>not</b> a code-writing service. Please post what you have tried, along with your inputs and expected outputs.</span>
<span class="comment-copy">Well, where should I Ask then?</span>
<span class="comment-copy"><a href="https://www.google.com/" rel="nofollow noreferrer">google.com</a> btw <a href="https://idownvotedbecau.se/" rel="nofollow noreferrer">idownvotedbecau.se</a></span>
<span class="comment-copy">Hi, welcome to stackoverflow. I'm so sorry for the rude welcome you received from Chris and Jaba. This is sadly not an uncommon a part of the community culture but something that stackexchange is trying hard to change. Your question is perfectly reasonable, and every question that can be answered by rigorously studying documentation should not be deferred to google. That defies the entire point of this site. I have submitted an answer that I hope will help you along your way.</span>
<span class="comment-copy">Should I write that in every python file I were I want to have this system or does it somehow registers for the entier system?</span>
<span class="comment-copy">Thanks by the way!</span>
<span class="comment-copy">It doesn't register for the entire system, so I would advice creating a module yourself if you need to use it widely.</span>
<span class="comment-copy">What do you mean?</span>
<span class="comment-copy">So for instance you could put all the code (except the tests at the bottom) into a file called <code>ImportInterceptor.py</code> and then at the top of each file where you want it to work you start out with Import <code>ImportInterceptor</code> if you want it to always run automatically before any file is run you could look at this answer for guidence: <a href="https://stackoverflow.com/questions/32184440/making-python-run-a-few-lines-before-my-script" title="making python run a few lines before my script">stackoverflow.com/questions/32184440/â€¦</a></span>
