<div class="post-text" itemprop="text">
<p>I have been playing around with asyncio module recently. Below is the code I came up with for sending some parallel requests which seem to work fine on my laptop ( Mac OS ) but the same seems to run slow in another machine( Ubuntu 18.04). In the machine where it was running slowly ( Ubuntu 18.04 ) I installed virtualbox vm with again Ubuntu 18.04 in it and to my surprise the code seems to run perfectly fine there. I have multiple versions of python in Ubuntu machine and I am trying to run this with 3.7.2. I am not sure how to narrow down the issue here. It would be great if someone can help me on this.</p>
<p>I am sure that its not an network issue. In the Ubuntu physical machine this code takes ~130 seconds to get completed. But inside the Ubuntu VM where it is working as expected it just takes less than 5 seconds.</p>
<pre><code>import aiohttp
import asyncio
import ssl
import time
from bs4 import BeautifulSoup


async def get_app_updated_date(html_content):
    soup = BeautifulSoup(html_content, 'lxml')
    section_titles_divs = [x for x in soup.select('div.hAyfc div.BgcNfc')]

    title_normalization = {
        'Updated': 'updated',
    }

    data = {
        'updated': None,
    }

    for title_div in section_titles_divs:
        section_title = title_div.string
        if section_title in title_normalization:
            title_key = title_normalization[section_title]
            value_div = title_div.next_sibling.select_one('span.htlgb')
            value = value_div.text
            data[title_key] = value
    return data


async def fetch(session, url, app_id):
    print(f'Fetching information for {app_id}')
    async with session.get(url, params={'id': app_id}, ssl=ssl.SSLContext()) as response:
        html_resp = await response.text()
        app_lastupdated_date = await get_app_updated_date(html_resp)
        return {app_id: app_lastupdated_date}


async def main():
    url = 'https://play.google.com/store/apps/details'
    app_list = ['com.google.android.youtube',
                'com.whatsapp',
                'com.instagram.android',
                'com.google.android.apps.maps',
                'com.kiloo.subwaysurf',
                'com.halfbrick.fruitninjafree',
                'com.adobe.reader',
                'org.mozilla.firefox',
                'com.zeptolab.ctr.ads',
                'com.fingersoft.hillclimb']
    async with aiohttp.ClientSession() as session:
        url_requests = [fetch(session, url, app_id) for app_id in app_list]
        print(url_requests)
        results = await asyncio.gather(*url_requests)
        for r in results:
            print(r)
        print(f'Result size  = {len(results)}')


if __name__ == '__main__':
    start_time = time.time()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    print(f'Script execution completed in: {time.time() - start_time} seconds')
</code></pre>
<p><strong>UPDATE:</strong>
As advised, attaching my profiler report. Not able to understand the jargon. Again, seeking expertise of folks in this forum.</p>
<p><a href="https://i.stack.imgur.com/lkskV.png" rel="nofollow noreferrer"><img alt="profiler_screenshot_1" src="https://i.stack.imgur.com/lkskV.png"/></a>
<a href="https://i.stack.imgur.com/2Pyg0.png" rel="nofollow noreferrer"><img alt="profiler_screenshot_2" src="https://i.stack.imgur.com/2Pyg0.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you narrowing down to function, at least. Use <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer">profiling</a> module or profiler in your IDE (i.e. Pycharm gives pretty good tools) to understand the problematic function.</p>
<p>But IMO, this actually does look like network issue, because running under Ubuntu on bare metal is:</p>
<ul>
<li>python environment</li>
<li>event loop implementation</li>
<li>bindings to system packages</li>
<li>ubuntu networking (including DNS resolver)</li>
</ul>
<p>Ubuntu in VM is:</p>
<ul>
<li>python environment</li>
<li>event loop implementation</li>
<li>bindings to system packages</li>
<li>bridged network from VM to host system (depends on VM setting tho)</li>
<li>windows networking (including DNS resolver)</li>
</ul>
</div>
<span class="comment-copy">One thing that strikes me as off in your code is that <code>get_app_updated_date</code> is defined <code>async def</code>, but doesn't <code>await</code> anything. If beautifulsoup takes some time to process data, it could halt progress of other tasks, and you might be hitting a pathological case there. I've <a href="https://pastebin.com/WRaAtqxs" rel="nofollow noreferrer">updated the script</a> to run beautifulsoup in a separate process. For me it speeds it up from 1s to 0.75s; you might want to check if it helps in your case.</span>
<span class="comment-copy">Running the requests sequentially completes faster and other ways of achieving concurrency also seem to yield faster results. It looks like only asyncio has the problem.</span>
<span class="comment-copy">That's an assumption. I suggest profiling your code to see where's the actual problem, cProfile should do the job</span>
<span class="comment-copy">As advised i did run the profiler on my code and have updated my original question with the screenshots. I see some events having the max execution time but I am not able to understand what they are meant for. Can you please help me on that.</span>
<span class="comment-copy">@chidori I'm not the answerer, but the profile makes it clear that your program spends the majority of time waiting for the network (the "method <code>poll</code> of <code>select.epoll</code> object"). Since <code>gather</code> is waiting for <i>all</i> the requests to finish, my next step would be to add a print at the beginning and end of each fetch and try to find out which site is hogging the download. Whatever it is, it is unlikely to be a purely asyncio issue - but it could be some weird interaction between the network, the OS, and asyncio.</span>
