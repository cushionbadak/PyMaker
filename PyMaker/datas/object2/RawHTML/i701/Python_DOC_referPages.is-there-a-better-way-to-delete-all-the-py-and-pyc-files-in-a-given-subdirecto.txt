<div class="post-text" itemprop="text">
<p>I wrote a script to delete all the .py and .pyc files in a given sub-directory called "migrations". The end goal is to remove all migration files from my django project, so there are multiple sub-folders called "migrations" and I would like to remove all .py and .pyc (except <strong>init</strong>.py) from these folders. The script I wrote below works but I am new to python and figure there has to be a better way then all the nested loops. Any suggestions? This is a windows system which complicates things for me.</p>
<pre><code>import os
import sys

def delete_py(path, subfolder):
    try:
        if os.path.exists(path):
            for (root, dirs, files) in os.walk(path):
                for dir in dirs:
                    if dir == subfolder:
                        goto = os.path.join(root, dir)
                        for (root, dirs, files) in os.walk(goto):
                            for file in files:
                                if (file.lower().endswith('.py') | 
                                    file.lower().endswith('.pyc')) and 
                                    file != '__init__.py':
                                    print('file: ', file)
                                    # will change to os.remove once finsihed
    except:
        print('Unable to delete files')


if __name__ == "__main__":
    current = os.getcwd()
    delete_py(current, 'migrations')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are doing double work with calling <code>os.walk()</code> for subdirectories that will already be handled by the outer <code>os.walk()</code> loop.</p>
<p>All you need to test for is if <code>migrations</code> is an element in the current <code>root</code> path to the directory being handled:</p>
<pre><code>def delete_py(path, subfolder):
    for root, dirs, files in os.walk(path):
        if subfolder in root.split(os.sep):
            # has subfolder as a directory name in the path, delete .py files here
            for file in files:
                if file == '__init__.py':
                    continue
                if file.endswith(('.py', '.pyc')):
                    os.unlink(os.path.join(root, file))
</code></pre>
<p>You could also just use a recursive glob pattern, with the <a href="https://docs.python.org/3/library/glob.html" rel="nofollow noreferrer"><code>glob</code> module</a>:</p>
<pre><code>from itertools import chain

def delete_py(path, subfolder):
    pyfiles = glob.iglob(f'**/{subfolder}/**/*.py', recursive=True)
    pycfiles = glob.iglob(f'**/{subfolder}/**/*.pyc', recursive=True)
    for filename in chain(pyfiles, pycfiles):
        if os.path.basename(filename) == '__init__.py':
            continue
        os.unlink(filename)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One <code>os.walk</code> should do most of the work for you; the only other loop you should need is to go trhough the <code>files</code> in each directory it gets you to.  You certainly don't need a <em>nested</em> <code>os.walk</code>.</p>
</div>
<span class="comment-copy">Why not just give the <code>migrations</code> path to <code>os.walk()</code>? You are needlessly everything else too.</span>
<span class="comment-copy">Note that you don't want to use <code>|</code>! That's bitwise or, not the boolean logic OR. And <code>str.endswith()</code> takes a tuple of options to test, so <code>file.lower().endswith(('*.py', '*.pyc'))</code> suffices.</span>
<span class="comment-copy">Thank you, that's much better. Just had to change "root.split(os.pathsep):"  to "root.split(os.path.sep):"</span>
<span class="comment-copy">@dpoiesz: apologies for that, that was actually meant to be <code>os.sep</code>.</span>
