<div class="post-text" itemprop="text">
<p>In Python you can do </p>
<pre><code>print (0 or None or False or "" or [] or "hello" or None or "bar")
</code></pre>
<p>which will print</p>
<pre><code>hello
</code></pre>
<p>Can you do the same with a list? I.e. is there a Python function <code>foo</code> so that the following will also print <code>hello</code>?</p>
<pre><code>print (foo([0, None, False, "", [], "hello", None, "bar"]))
</code></pre>
<p>Note that <code>bar</code> is not printed.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>next(filter(None, ...))</code> or <code>next(filter(bool, ...))</code> to find the first truthy value from a list:</p>
<pre><code>def foo(l):
    return next(filter(None, l))
</code></pre>
<p>The <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer"><code>filter()</code> function</a> takes both a filter function, and an iterable, and returns an iterator that of the values from the iterable that pass the filter.</p>
<p>But when you set the filter function to <code>None</code>, then it is essentially the same thing as using <code>bool</code> as the filter function, so only values that <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow noreferrer">are <em>true</em></a> are allowed through. The <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code> function</a> then gives you the first such value.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; def foo(l):
...     return next(filter(None, l))
...
&gt;&gt;&gt; print(foo([0, None, False, "", [], "hello", None, "bar"]))
hello
</code></pre>
<p>You <em>may</em> want to add the last value in <code>l</code> as a default for the <code>next()</code> call, in case there are only falsey values; <code>v1 or v2 or v3 or v4</code> would at least produce <code>v4</code> if none of the values are truthy, so the following does too:</p>
<pre><code>def foo(l):
    return next(filter(None, l), l[-1])
</code></pre>
<p>Using <code>filter(None, ...)</code> is a <em>fraction</em> faster than <code>filter(bool, ...)</code> because the <code>filter.__next__</code> implementation <a href="https://github.com/python/cpython/blob/10354cbb5067b4719ba1c2d51d22314a644ed3e5/Python/bltinmodule.c#L593" rel="nofollow noreferrer">tests for <code>None</code> before it tests for <code>bool</code></a>; this speed difference is very small and barely measurable (within a margin of error):</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; import random
&gt;&gt;&gt; t = [random.choice([True, False]) for _ in range(10 ** 6)]
&gt;&gt;&gt; for ff in ('bool', 'None'):
...     count, total = timeit.Timer(f'deque(filter({ff}, t), maxlen=0)', 'from collections import deque; from __main__ import t').autorange()
...     print(f"{ff}: {total / count * 1000:8.4f} ms")
...
bool:  98.9971 ms
None:  95.7907 ms
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the function <code>reduce()</code> with the operator <code>or</code> in the <code>lambda</code> function:</p>
<pre><code>from functools import reduce, partial

foo = partial(reduce, lambda x, y: x or y)

print(foo([0, None, False, "", [], "hello", None, "bar"]))
# hello
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/16962994/finding-the-first-list-element-for-which-a-condition-is-true">Finding the first list element for which a condition is true</a></span>
<span class="comment-copy">I always get told I should use <code>filter(bool, ...)</code> instead of <code>filter(None, ...)</code> because it's more transparent.</span>
<span class="comment-copy">@khelwood: <code>None</code> is literally the same thing as <code>bool</code>, actually, in the current implementation. Except that the test that checks if the first argument is <code>None</code> or <code>bool</code> is made each <code>__next__</code> iteration and if you use <code>None</code> then that test is <i>fractionaly</i> faster, resulting in a few % speed advantage for <code>filter(None, ...)</code>. It's not going to cost you more than a few microseconds per million filter iterations, so using <code>filter(bool, ...)</code> for documentation clarity is still a good idea.</span>
