<div class="post-text" itemprop="text">
<p>I want to list the arguments of my methods for a self documenting REST API. I have found that I can get the arguments of a method using: </p>
<pre><code>method.__code__.co_varnames[:method.__code__.co_argcount]
</code></pre>
<p>However, this does not work when the method is decorated.</p>
<pre><code>class Rator:

    def __init__(self):
        pass

    def __call__(self, func):
        def wrapper(instance, **kwargs):
            func(instance, **kwargs)
        return wrapper


class Klass:

    def method(self, var_one=None, var_two=None):
        pass

    @Rator()
    def decorated_method(self, var_one=None, var_two=None):
        pass


if __name__ == '__main__':
    klass = Klass()
    print("method args is " + str(klass.method.__code__.co_varnames))
    print("decorated method args is " + str(klass.decorated_method.__code__.co_varnames))
</code></pre>
<p>Outputs</p>
<pre><code>method args is ('self', 'var_one', 'var_two')
decorated method args is ('instance',)
</code></pre>
<p>A solution that does not require change of the decorator is preferred.</p>
<p>I know that this question is a duplicate of <a href="https://stackoverflow.com/questions/34459177/how-to-retrieve-method-arguments-of-a-decorated-python-method">How to retrieve method arguments of a decorated python method</a>, but it has since long been dead.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need wrap you decorator with <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer">functools.wraps</a>, then you can can inspect the methods via <a href="https://docs.python.org/3/library/inspect.html#inspect.signature" rel="nofollow noreferrer">inspect.signature()</a>:</p>
<pre><code>import inspect
from functools import wraps


class Rator:
    def __init__(self):
        pass

    def __call__(self, func, **kwargs):
        @wraps(func)
        def wrapper(instance):
            func(instance, **kwargs)
        return wrapper


class Klass:
    def method(self, var_one=None, var_two=None):
        pass

    @Rator()
    def decorated_method(self, argument1, var_one=None, var_two=None):
        pass


if __name__ == '__main__':
    klass = Klass()
    print("method args is ", inspect.signature(klass.method))
    print("decorated method args is ", inspect.signature(klass.decorated_method))
</code></pre>
<p>Prints:</p>
<pre><code>method args is  (var_one=None, var_two=None)
decorated method args is  (argument1, var_one=None, var_two=None)
</code></pre>
</div>
<span class="comment-copy">Have you tried <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>functools.wraps</code></a>? See <a href="https://stackoverflow.com/q/147816">Preserving signatures of decorated functions</a>. Also, consider using <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> to retrieve function parameters (see <a href="https://stackoverflow.com/q/218616">Getting method parameter names in Python</a>).</span>
<span class="comment-copy">@jdehesa Yep. That solved the problem. But a solution that doesn't require changes to the decorator would have been better. For the cases where the decorator is part of a third party library.</span>
<span class="comment-copy">Thanks. Too bad it is the decorator that needs to change. So this would not solve the cases where the decorator code is not under my control. I guess wrapping the decorator would be the solution to that but not ideal.</span>
