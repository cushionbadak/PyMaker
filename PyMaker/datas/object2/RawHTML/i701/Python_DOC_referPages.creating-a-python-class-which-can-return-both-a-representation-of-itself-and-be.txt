<div class="post-text" itemprop="text">
<p>I want to have a class that represents a polynomial function. When calling an instance of the class, I want to see a string representation of that function</p>
<p>e.g.</p>
<pre><code>f = Polynomial([0,1,2])
f
&gt; 𝑥+2𝑥²
</code></pre>
<p>This is fine, I just write a suitable <code>__repr__</code> function - it would also be nice to be able to evaluate this function at a given value of 𝑥 - and so what I'd like to do is something like:</p>
<pre><code>f(3)
&gt; 21
</code></pre>
<p>So how do I do this? Do I write a second overloaded <code>__repr__</code> function with the additional parameter, or do I alter the existing <code>__repr__</code> so it has an optional argument?</p>
<p>Sadly, I can't seem to get the first working, and using the second of these options, I get the error:</p>
<pre><code>TypeError: 'Polynomial' object is not callable
</code></pre>
<p>Any ideas on having this dual behaviour so:</p>
<pre><code>f
&gt; 𝑥+2𝑥²
</code></pre>
<p>and</p>
<pre><code>f(3)
&gt; 21
</code></pre>
<p>The first is just the representation of f, and the second, it's evaluation at 𝑥=3.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to support <em>calling</em> your object, then just implement the <a href="https://docs.python.org/3/reference/datamodel.html#object.__call__" rel="nofollow noreferrer"><code>__call__</code> method</a>, and return a result that gives the desired representation.</p>
<p>If, for a given value of <code>x</code>, the result is always an integer, just returning that integer suffices:</p>
<pre><code>class Polynomial:
    X = "\U0001d465"
    X_squared = X + "\u00b2"

    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def __repr__(self):
        parts = []
        if self.a:
            a = self.X_squared
            if self.a &gt; 1:
                a = f"{self.a}{a}"
            parts.append(a)
        if self.b:
            b = self.X
            if self.b &gt; 1:
                b = f"{self.b}{b}"
            parts.append(b)
        if self.c:
            parts.append(str(self.c))
        if not parts:
            parts = ['0']
        return ' + '.join(parts)

    def __call__(self, x):
        return self.a * (x ** 2) + self.b * x + self.c
</code></pre>
<p>which achieves the output you are looking for:</p>
<pre><code>&gt;&gt;&gt; p = Polynomial(2, 1, 0)
&gt;&gt;&gt; p
2𝑥² + 𝑥
&gt;&gt;&gt; p(3)
21
</code></pre>
<p>Note that <code>__repr__</code> is usually intended to produce <em>debugging output</em>. There is no configuration possible, an object has a specific state, and <code>__repr__</code> should show that state, more or less.</p>
<p>If you want to make string formatting configurable, then look at the <a href="https://docs.python.org/3/reference/datamodel.html#object.__format__" rel="nofollow noreferrer"><code>__format__</code> hook</a>, used by <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format()</code></a> and <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>format()</code></a>. That's probably not that suitable for your uses if you want to enable your objects to be used in an interactive Python setting.</p>
<p>You may also want to study how the <a href="https://docs.sympy.org/latest/tutorial/printing.html" rel="nofollow noreferrer">SymPy project handles output formatting</a>; that project <a href="https://docs.sympy.org/latest/tutorial/printing.html#srepr-fn" rel="nofollow noreferrer">explicitly avoids using <code>__repr__</code></a>. Instead, outside of IPython they set a custom <a href="https://docs.python.org/3/library/sys.html#sys.displayhook" rel="nofollow noreferrer"><code>sys.displayhook()</code> function</a> to use their own pretty-printing functions instead of <code>repr()</code> when a sympy-project object is being displayed. For details, see the <a href="https://github.com/sympy/sympy/blob/4ab4f8b69462daf1cbdd2550221a6c1e654db3d5/sympy/interactive/printing.py" rel="nofollow noreferrer"><code>sympy.interactive.printing</code> module source code</a>.</p>
</div>
<span class="comment-copy">I can't understand why you think this has anything to do with <code>__repr__</code>. If you want a class instance to do something when called, you should define <code>__call__</code>.</span>
<span class="comment-copy">Thanks Daniel, I’ve not come across <code>__call__</code> before and <code>__repr__</code> felt related because it’s what you get when you reference an instance of a class directly with no additional dot-method call. Using the principle of the least amount of surprise I thought there might be a way of overloading <code>__repr__</code> to behave differently when passed a parameter. But that’s probably more due to my previous life/bias as a java dabbler (and javas fondness for overloading) than anything else.</span>
