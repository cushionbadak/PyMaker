<div class="post-text" itemprop="text">
<p>I have a class like this...</p>
<pre><code>class person:
    def __init__(self, name):
        self.name = name
        self.carData = ""        
        self.HouseData = ""
        #other assets 
</code></pre>
<p>And am loading data like this...</p>
<pre><code>for someone in person:
     someone.carData = runCarQuery()
     someone.HouseData = runHouseQuery()
     #load other assets
</code></pre>
<p>But the data varies by year, e.g. 2019, 2020 etc and I'm struggling to visualise an appropriate way to represent that in the data structure.  I know I could in theory do this...</p>
<pre><code>class person:
    def __init__(self, name):
        self.name = name
        self.carData2019 = ""        
        self.HouseData2019 = ""
        self.carData2020 = ""        
        self.HouseData2020 = ""
        #other assets 
</code></pre>
<p>But it feels super clumsy so I'm hoping there's a way to point to a 2019 version of the carData object.  For example, a data model that supports something like...</p>
<pre><code>for someone in person:
     someone.carData['2019'] = runCarQuery('2019')
     someone.carData['2020'] = runCarQuery('2020')
     someone.HouseData['2019'] = runHouseQuery('2019')
     someone.HouseData['2020'] = runHouseQuery('2020')
     #load other assets
</code></pre>
<p>I know that's not valid but am a bit lost on how to achieve the scenario in python.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You mean:</p>
<pre><code># __init__
â€¦
someone.carData = {}
someone.HouseData = {}
</code></pre>
<p>and then:</p>
<pre><code>for someone in person:
    for year in (2019, 2020):
        someone.carData[year] = runCarQuery(year)
        someone.HouseData[year] = runHouseQuery(year)
</code></pre>
<p>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use @property <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#property</a></p>
<pre><code>class person:
    def __init__(self, name):
        self.name = name  
        self.HouseData = ""
        #other assets
    @property
    def carData(self):
        this_year = get_this_year()
        return  runCarQuery(this_year)

some_person = Person()

some_person.carData
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a method that does the filtering for you:</p>
<pre><code>class Person:
  def __init__(self, name):
      self.name = name
      self.car_data = []
      self.house_data = []

   def car_by_year(self, year):
      return filter(lambda x: x['date'].year() == year, self.car_data)

   def house_by_year(self, year):
      return filter(lambda x: x['date'].year() == year, self.house_data)
</code></pre>
<p>You'll have to get some data structure in the <code>car_data</code> and <code>house_data</code> objects, perhaps a dictionary to store the year or date values.</p>
<pre><code>p = Person('John')
p.car_data.append({'date': date(2018, 01, 01), 'model': 'Ford'})

for car in p.car_by_year(2018):
    print(car)
</code></pre>
</div>
<span class="comment-copy">Store it in a dictionary where keys are years and values are the data for that year.</span>
<span class="comment-copy">"But the data varies by year, e.g. 2019, 2020 etc" what does that mean? Varies how?</span>
