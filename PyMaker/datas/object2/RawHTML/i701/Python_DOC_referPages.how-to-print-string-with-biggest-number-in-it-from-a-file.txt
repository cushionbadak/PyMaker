<div class="post-text" itemprop="text">
<p>I want to know how to find the string with the biggest number in it and I also want the solution to be simple and easy to understand.</p>
<p>I have a file that has these scores in it in this format:</p>
<pre><code>bob has 46 points
fred has 0 points
leo has 27 points
max has 34 points
john has 58 points
paolw has 32 points
piper has 20 points
hasan has 72 points
</code></pre>
<p>I want it so that these scores get printed largest to smallest like this:</p>
<pre><code>hasan has 72 points
john has 58 points
bob has 46 points
max has 34 points
paolw has 32 points
leo has 27 points
piper has 20 points
fred has 0 points
</code></pre>
<p>This is what I have tried:</p>
<pre><code>f = open("file.txt","r") print(sorted(f)) 
</code></pre>
<p>The result was this:</p>
<pre><code>['\n', 'bob has 46 points\n', 'fred has 0 points\n', 'hasan has 72 points\n', 'john has 58 points\n', 'leo has 27 points\n', 'max has 34 points\n', 'paolw has 32 points\n', 'piper has 20 points\n']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your first attempt was halfway there, but you seem to have gotten hung up on the sorting. When you called <code>sorted(f)</code> there actually were a few things happening there.</p>
<ol>
<li><code>sorted</code> asked the object <code>f</code> for something iterable, and <code>f</code> returned a bunch of strings representing each line of your <code>file.txt</code></li>
<li>The strings were then sorted based on the <a href="http://www.asciitable.com/" rel="nofollow noreferrer">ascii values</a> of each character in lexicographic order (sorted like a dictionary).</li>
<li>The sorted strings were put into a list and returned.</li>
</ol>
<p>The big takeaway here is that each line was sorted based on the text not based on the numerical value buried somewhere in the middle.</p>
<p>If you want to sort using the built-in <code>sorted</code> function (ie: you don't want to write your own sorting algorithm), you'll need to either re-structure your data so that the default sorting method gives you the order you want, or you'll need to tell the <code>sorted</code> function how to slightly change its default behavior. The latter involves specifying the <code>key</code> parameter passed to <code>sorted</code> which other answers have covered.</p>
<p>In order to get <code>sorted</code> to do what we want out of the gate we need to give it the value we want to sort first in each line. We can do this by extracting the number from each line and putting it first in a list, then getting rid of it again after we've sorted the list of strings.</p>
<pre><code>f = open("file.txt","r")
lines = list(f) #create a list of strings
f.close() #don't forget to close our files when we're done. It's good practice.
modified_lines = [] #empty list to put our modified lines in (extracted number, original line)
for line in lines: #iterate over each line
    if line.strip(): #if there's anything there after we strip away whitespace
        score = line.split(' ')[2] #split our text on every space and take the third item
        score = int(score) #convert the string of our score into a number
        modified_lines.append([score, line]) #add our modified line to modified_lines

#sort our list that now has the thing we want to sort based on is first
sorted_modified_lines = sorted(modified_lines) 

#take only the string (not the number we added before) and print it without the trailing newline.
for line in sorted_modified_lines: print(line[1].strip())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">Sorted </a> is what you want, add a <code>key</code> to get what you want.</p>
<p>Replace the list with you file data.</p>
<pre><code>l = ["bob has 46 points", "fred has 0 points", "leo has 27 points"]
l = sorted(l, key = lambda i: int(i.split()[2]), reverse = True)
</code></pre>
<p>Output</p>
<pre><code>['bob has 46 points', 'leo has 27 points', 'fred has 0 points']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this is a beginner friendly solution:</p>
<pre><code>scores = {}

with open("file.txt", "r") as f:
    for score in f.readlines():
        try:
            name = score.split(" ")[0]
            points = score.split(" ")[2]
            scores.update({name: int(points)})
        except IndexError:
            pass

scores = sorted(scores.items(), key=lambda kv: kv[1], reverse=True)


for name, points in scores:
    row = f"{name} has {points} points\n"
    print(row)
</code></pre>
<p><strong>EDIT:</strong> Add exception handling, in case you file.txt differs from my example file.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>sorted</code>:</p>
<pre><code>with open('file.txt') as f: 
    print(
        '\n'.join(
            sorted(
                filter(
                    lambda line: len(line.split(' ')) &gt;= 2,
                    f.readlines()
                ), 
                key=lambda line: int(line.split(' ')[-2]), 
                reverse=True
            )
        )
    )
</code></pre>
</div>
<span class="comment-copy">What have you tried, and where did you get stuck?</span>
<span class="comment-copy">What sort of file? A txt  file?</span>
<span class="comment-copy">I tried this <code>f = open("file.txt","r") print(sorted(f))</code> and the result was this:<code>['\n', 'bob has 46 points\n', 'fred has 0 points\n', 'hasan has 72 points\n', 'john has 58 points\n', 'leo has 27 points\n', 'max has 34 points\n', 'paolw has 32 points\n', 'piper has 20 points\n']</code></span>
<span class="comment-copy">and i want them printed in seperate lines</span>
<span class="comment-copy">yes a text file.</span>
<span class="comment-copy">how would make it so that it takes the scores frrom the file and make it print in the format that I mentioned above?</span>
<span class="comment-copy">@system123456 You would just print them out from the list...</span>
<span class="comment-copy">Im getting this error:<code>line 6, in &lt;module&gt;     points = score.split(" ")[2] IndexError: list index out of range</code></span>
<span class="comment-copy">I take your rows as input for my <code>file.txt</code> maybe its differ from the original file from you? Are there empty rows or similar in your file?</span>
<span class="comment-copy">There's probably an empty <code>'\n'</code> at the end of the file... either account for it in code, or delete  it using a text editor.</span>
<span class="comment-copy">@Aaron Yeah you were right thanks for all of your help</span>
<span class="comment-copy">please try it again, I make an edit on my answer!</span>
<span class="comment-copy">Where would I put that in my code?</span>
<span class="comment-copy">Im getting this error:<code>line 2, in &lt;lambda&gt;     print('\n'.join(sorted(f.readlines(), key=lambda line: int(line.split(' ')[-2])), reverse=True)) IndexError: list index out of range</code></span>
<span class="comment-copy">Then your file is not as mentioned. I edited my answer to check that</span>
<span class="comment-copy">now im getting this error<code>line 2, in &lt;module&gt;     print('\n'.join(sorted(f.readlines(), key=lambda line: int(line.split(' ')[-2])), reverse=True)) TypeError: join() takes no keyword arguments</code></span>
<span class="comment-copy">And now, It should work</span>
