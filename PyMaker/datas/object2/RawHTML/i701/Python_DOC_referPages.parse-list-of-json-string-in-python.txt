<div class="post-text" itemprop="text">
<p>Using an incoming string like list:</p>
<pre><code>[{"FECHA":"2019-01-28 13:15:42","SERIAL":2,"LONGITUD":-4.2958984375,"LATITUD":50.4469470596,"ID":1,"VALOR":193,"JOURNEYID":1},
{"FECHA":"2019-01-28 13:15:44","SERIAL":3,"LONGITUD":-4.2958984375,"LATITUD":40.4469470596,"ID":1,"VALOR":34,"JOURNEYID":1},
{"FECHA":"2019-01-28 13:15:46","SERIAL":6,"LONGITUD":-3.2958984375,"LATITUD":50.4469470596,"ID":1,"VALOR":14,"JOURNEYID":1},&lt;..&gt;]
</code></pre>
<p>With a lenght N and each element with the following format:</p>
<pre><code>{"FECHA":"2019-01-28 13:15:42","SERIAL":2,"LONGITUD":-4.2958984375,"LATITUD":50.4469470596,"ID":1,"VALOR":193,"JOURNEYID":1}
</code></pre>
<p><strong>What I want?</strong></p>
<p>Iterate the list and process each JSON elem individually </p>
<pre><code>first output: {"FECHA":"2019-01-28 13:15:42","SERIAL":2,"LONGITUD":-4.2958984375,"LATITUD":50.4469470596,"ID":1,"VALOR":193,"JOURNEYID":1}

second output: {"FECHA":"2019-01-28 13:15:44","SERIAL":3,"LONGITUD":-4.2958984375,"LATITUD":40.4469470596,"ID":1,"VALOR":34,"JOURNEYID":1}

&lt;...&gt;
</code></pre>
<blockquote>
<p>How could I split to take each JSON element?</p>
</blockquote>
<hr/>
<p>What I have tried:</p>
<p>Option 1:</p>
<pre><code>def ParseIncomingDataAzure(message):
    print ("incoming data: {}".format(message))
    x = ast.literal_eval(message)
    for frame in x:
        print("x: {}".format(frame))
</code></pre>
<p>Output:</p>
<pre><code>x: {'LATITUD': 50.4469470596, 'FECHA': '2019-01-28 13:15:42', 'JOURNEYID': 1, 'VALOR': 193, 'SERIAL': 2, 'ID': 1, 'LONGITUD': -4.2958984375}
x: {'LATITUD': 40.4469470596, 'FECHA': '2019-01-28 13:15:44', 'JOURNEYID': 1, 'VALOR': 34, 'SERIAL': 3, 'ID': 1, 'LONGITUD': -4.2958984375}
x: {'LATITUD': 50.4469470596, 'FECHA': '2019-01-28 13:15:46', 'JOURNEYID': 1, 'VALOR': 14, 'SERIAL': 6, 'ID': 1, 'LONGITUD': -3.2958984375}
</code></pre>
<hr/>
<p>Option 2:</p>
<pre><code>def ParseIncomingDataAzure(message):
    messages = message.split(",")
    for frame in messages:
        print("x: {}".format(frame))
</code></pre>
<p>Output:</p>
<pre><code>x: [{"FECHA":"2019-01-28 13:15:42"
x: "SERIAL":2
x: "LONGITUD":-4.2958984375
x: "LATITUD":50.4469470596
x: "ID":1
x: "VALOR":193
x: "JOURNEYID":1}
x: {"FECHA":"2019-01-28 13:15:44"
x: "SERIAL":3
x: "LONGITUD":-4.2958984375
x: "LATITUD":40.4469470596
x: "ID":1
x: "VALOR":34
x: "JOURNEYID":1}
x: {"FECHA":"2019-01-28 13:15:46"
x: "SERIAL":6
x: "LONGITUD":-3.2958984375
x: "LATITUD":50.4469470596
x: "ID":1
x: "VALOR":14
x: "JOURNEYID":1}]
</code></pre>
<hr/>
<p>Option 3:</p>
<p>Simple for to iterate over the list</p>
<pre><code>def ParseIncomingDataAzure(message):
    for frame in message:
         print("x: {}".format(frame))
</code></pre>
<p>Output:</p>
<pre><code>x: [
x: {
x: "
x: F
x: E
x: C
x: H
x: A
&lt;....&gt;
</code></pre>
<hr/>
<p>Possible solution:</p>
<pre><code>def ParseIncomingDataAzure(message):
    print ("incoming data: {}".format(message))
    x = ast.literal_eval(message)
    for frame in x:
        print("x: {}".format(json.dumps(frame)))
</code></pre>
<p><strong>Is this the correct way?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Consider using the json package for this:</p>
<pre><code>In [2]: import json                                                                                                                                                                                                                                                                       
In [3]: s = '{"FECHA":"2019-01-28 13:15:42","SERIAL":2,"LONGITUD":-4.2958984375,"LATITUD":50.4469470596,"ID":1,"VALOR":193,"JOURNEYID":1}'                                                                                                                                                
In [4]: json.loads(s)                                                                                                                                                                                                                                                                     
Out[4]: 
{'FECHA': '2019-01-28 13:15:42',
 'SERIAL': 2,
 'LONGITUD': -4.2958984375,
 'LATITUD': 50.4469470596,
 'ID': 1,
 'VALOR': 193,
 'JOURNEYID': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This both functions solved my use case:</p>
<pre><code>def ParseIncomingDataAzure(message):
    print ("incoming data: {}".format(message))
    x = ast.literal_eval(message)
    for frame in x:
        print("x: {}".format(json.dumps(frame)))
        &lt;...&gt;
</code></pre>
<p>The inconvenient of the following function is that you will need to know the position where the "," is separating each element of the incoming list, so for real data where the number of fields of the json could be different in each element of the list you can not use: </p>
<pre><code>def ParseIncomingDataAzure(message):
    n = 7
    frames = message.split(",")
    while frames:
        y= ','.join(frames[:n])
        frames = frames[7:]
        print (y)
</code></pre>
</div>
<span class="comment-copy">What you started with and what you are after is quite unclear.  You likely want this: <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">docs.python.org/3/library/json.html</a></span>
<span class="comment-copy">Sorry, I don't understand. As far as I can tell, you have a list of valid dictionaries. What's wrong with a simple <code>for</code> loop to iterate over them?</span>
<span class="comment-copy">@Valentino that was I thought and the begging but I'm not sure why that way doesn't work for my example (option 3).</span>
<span class="comment-copy">From where does your list come? If is not coded in your script but you read it from a file or something similar, then you just have a sequence of character, and you need to parse it with json as other people have said.</span>
<span class="comment-copy">Are streaming data, so I finally added a solution to the main post just waiting to know if that is optimal according to performance.</span>
<span class="comment-copy">Thank you for your answer. I also tried before post the questions with json, but i'm not able to iterate over my list and return each element in json format. I supposed a simple loop over the list should be enough but I can not find how to do it</span>
<span class="comment-copy">@IoTuser you can directly parse the whole list as json and iterate the resulting python list</span>
<span class="comment-copy">If the message is JSON, you shouldn't use <code>ast.literal_eval</code>, you should use <code>json.loads</code>.</span>
<span class="comment-copy">well, the incoming message is a list of string with json format and if I try to use <code>json.load</code> I have an error: ´AttributeError: 'str' object has no attribute 'read'´</span>
<span class="comment-copy">Note the <code>s</code> in <code>loads</code> that means it takes a string. The function <code>load</code> without the <code>s</code> takes a file.</span>
<span class="comment-copy">My mistake @DanD. I forgot the ´s´. The problem using ´json.loads´is that the output is string(u') and I also need to send as JSON. It should be enough to iterate over the incoming list which contains  JSON elements  but I'm not able to do it with a simple loop</span>
