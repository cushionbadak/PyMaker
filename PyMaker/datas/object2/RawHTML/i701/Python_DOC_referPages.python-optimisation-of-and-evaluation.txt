<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2580136/does-python-support-short-circuiting">Does Python support short-circuiting?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>In Python 3, I have to check that 3 conditions are not happening in a function parameter, so, I created 3 functions:</p>
<pre><code>def check_lenght(string_id):
    # if length is right, return True, otherwise, False

def check_format(string_id):
    # return True if some internal format has to be used, in another case, False

def check_case_num(string_id):
    # manual iteration to check if certain characters are not contained, return True, otherwise, False


def valid_product_code(id_str):
    return check_lenght(id_str) and check_format(id_str) and check_case_num(id_str)
</code></pre>
<p>So, there are 3 functions, one of them iterating a string, an operation that is very heavy potentially. 
But, if one function returns already False, it is not necessary to check the remaining ones, we know the logical AND will return False, being able to make this less computationally expensive.</p>
<p>So, I am wondering if Python (CPython or other implementations) is optimizing this, therefore, the usage of <code>return check_lenght(id_str) and check_format(id_str) and check_case_num(id_str)</code> is right, or if it would be better to check these functions one by one and returning False as soon as the first of them is False, having a more optimal but, maybe, less readable solution.</p>
<p>How this expression is being evaluated in Python?</p>
<p>I tried to find the answer to this question googling for it and also in this site</p>
</div>
<div class="post-text" itemprop="text">
<p>It's called <code>short-circuiting</code> and, Yes, Python does support it:</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>a and b and c</code> will not evaluate <code>b</code> or <code>c</code> if <code>a</code> already returns <code>False</code>.</p>
<p><code>x or y</code> will not evaluate <code>y</code> if <code>x</code> already returns <code>True</code>.</p>
<p>You will find that this is how bool operators work in almost all C-like languages.</p>
</div>
<span class="comment-copy">Inevitably similar to <a href="https://stackoverflow.com/a/2580142/2988730">stackoverflow.com/a/2580142/2988730</a></span>
<span class="comment-copy">hmm. Of course it's been asked and answered before. welcome to SO</span>
<span class="comment-copy">The trick is knowing where to look for the duplicates.</span>
<span class="comment-copy">Thanks and sorry for the duplicate, I searched in Google and here, but I could not find the answer</span>
<span class="comment-copy">That doesn't sound right. Perhaps I'm misunderstanding your meaning though.</span>
<span class="comment-copy">@MadPhysicist it's part of the definition of short-circuiting. <code>b</code> will not be evaluated if <code>a</code> is already <code>False</code>.</span>
<span class="comment-copy">Ah I think I understand the confusion, edited for clarity.</span>
<span class="comment-copy">Thanks. Vote flipped.</span>
