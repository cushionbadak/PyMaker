<div class="post-text" itemprop="text">
<p>I've been trying to break a loop which is meant to look for a file in a certain location. My intention is to make my script look for that file for a certain time and then break whether the file is found or not but I can't get any idea.</p>
<p><strong><em>How can I make the script wait for a certain time and then break when the time is up?</em></strong></p>
<p>This is my script at this moment:</p>
<pre><code>import os
import time

file_path = r"C:\Users\WCS\Desktop\item.txt"

time_limit = 5
while not os.path.exists(file_path):
    time.sleep(1)
    #is there any logic I can apply here to make the following line valid
    # if waiting_time&gt;=time_limit:break

print("Time's up")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def exists_timeout(path, timeout):
    """Return once &lt;path&gt; exists, or after &lt;timeout&gt; seconds,
    whichever is sooner
    """
    timer = timeout
    while (not os.path.exists(path)) and timer &gt; 0:
        time.sleep(1)
        timer -= 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Calculate the elapsed time by doing <code>actual time</code> <em>minus</em> <code>start time</code> by using <code>time.time()</code> function and assign a variable (<code>file_exists</code> in this code) which will be modified and check whether the file exist or not and use it for the loop.</p>
<p>As below:</p>
<pre><code>import os
import time

file_path = r"C:\Users\WCS\Desktop\item.txt"

time_limit = 5

start = time.time()
file_exists = os.path.exists(file_path)

while not file_exists:
    time.sleep(1)
    file_exists = os.path.exists(file_path)
    elapsed = time.time() - start
    if elapsed &gt;= time_limit:
        break
else:
    print("File exist.")

print(elapsed)
print("Time's up")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import os
import time

file_path = r"C:\Users\WCS\Desktop\item.txt"
cTime=0
time_limit = 5

while cTime&lt;time_limit:

    if os.path.exists(file_path)==False:
        cTime=cTime+1
        time.sleep(1)

    else:
        pass

if cTime==5:
    responce="Time's Up"
else:        
    responce='Found'

print(responce)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As roganjosh commented, it would be simpler if you used time stamps. I have added relevant code below:</p>
<pre><code>import os
import time
from datetime import datetime, timedelta

file_path = r"C:\Users\WCS\Desktop\item.txt"
time_limit = datetime.now() + timedelta(seconds=5)
present = datetime.now()   

while (not os.path.exists(path)) and present &lt; time_limit:
    present = datetime.now()
    if present &gt;= time_limit:
        print("Time's up")
        break
    time.sleep(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's how to do it with the <a href="https://docs.python.org/3/library/threading.html#timer-objects" rel="nofollow noreferrer"><code>threading.Timer()</code></a> class. These can be configured to delay a specified amount of time and the call as function of your choosing.</p>
<pre><code>import os
from threading import Timer
import time


file_path = r"C:\Users\WCS\Desktop\item.txt"

# Timer callback function.
def timeout():
    global time_ran_out
    time_ran_out = True

time_limit = 5
time_ran_out = False  # Define variable the callback function modifies.
timer = Timer(time_limit, timeout)  # Create a timer thread object.
timer.start()  # Start the background timer.

while not os.path.exists(file_path):
    time.sleep(1)
    if time_ran_out:
        print('Times up!')
        break

print("Done")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To check for the availability of a file in a certain location you can try the following. The script will break as soon as the file is found otherwise it will wait upto 5 seconds for the file to be available before breaking.</p>
<pre><code>import os
import time

file_path = r"C:\Users\WCS\Desktop\item.txt"

time_to_wait = 5
time_counter = 0
while not os.path.exists(file_path):
    time.sleep(1)
    time_counter += 1
    if time_counter &gt; time_to_wait:break

print("done")
</code></pre>
</div>
<span class="comment-copy">If you used actual time stamps then it would be simple. Take the time stamp before the loop and compare the current timestamp within the loop.</span>
<span class="comment-copy">All the solutions below force the script wait for that <code>time_limit</code> to hit or exceed even when the file is present. Ain't it possible that the script will break as soon as the file is found otherwise it will wait till the <code>time_limit</code>? Thanks.</span>
