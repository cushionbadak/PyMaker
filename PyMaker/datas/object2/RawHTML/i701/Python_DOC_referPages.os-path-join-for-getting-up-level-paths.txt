<div class="post-text" itemprop="text">
<p>Consider you have the following code:<br/>
<code>os.path.abspath(os.path.join('../../', __file__))</code></p>
<p>I am quite puzzled because currently, it is returning me the same path such in  <code>__file__</code> path.  </p>
<p>Any idea why I don't get two levels up of the <code>__file__</code> path?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__file__</code> is an absolute file path and so the join attempts something like the following:</p>
<pre><code>os.path.join('../../', '/path/to/file')
</code></pre>
<p>Since the second argument is already an absolute path, all previous ones are ineffective.</p>
<p>Also note that <code>__file__</code> contains the file name itself so if you want to go two directories up you'd need to split that off. The easiest solution is to use <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib.Path</code></a>:</p>
<pre><code>Path(__file__).parents[2]
</code></pre>
<p>If you want to go <code>n</code> levels up you can use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parents" rel="nofollow noreferrer"><code>Path(__file__).parents[n]</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the documentation (emphasis mine):</p>
<blockquote>
<p>os.path.join(path, *paths)</p>
<p>Join one or more path components
  intelligently. The return value is the concatenation of path and any
  members of *paths with exactly one directory separator (os.sep)
  following each non-empty part except the last, meaning that the result
  will only end in a separator if the last part is empty. <strong>If a component
  is an absolute path, all previous components are thrown away and
  joining continues from the absolute path component</strong>.</p>
</blockquote>
<p><code>__file__</code> is an absolute path, so <code>join</code> ignores the preceding <code>../../</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>After some more trial and error I found the best solution I think:<br/>
<code>os.path.abspath(os.path.join(__file__, '../../'))</code></p>
<p>Works like a charm</p>
</div>
<span class="comment-copy">How can I achieve this is a similar way lets say I even want to go up 3 levels or more</span>
<span class="comment-copy">3 levels from <i>where</i>? There is no "up" from an absolute path to a file. If <code>__file__</code> names a <i>directory</i>, though, you can <i>append</i> the <code>../..</code> to <code>__file__</code>.</span>
<span class="comment-copy">Now that's a pretty weird workaround which doesn't exactly achieve the highest level of readability. The result of <code>os.path.join</code> is something like <code>"/path/to/module.py/../../"</code> which then gets repaired by <a href="https://docs.python.org/3/library/os.path.html#os.path.normpath" rel="nofollow noreferrer"><code>os.path.normpath</code></a> (invoked through <code>os.path.abspath</code>). So why perform that detour in the first place?</span>
