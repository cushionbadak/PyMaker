<div class="post-text" itemprop="text">
<p>I'm coding a pretty simple Twitch Chatbot in Python and I have all my "commands" running in if statements (basically if the chatbot sees something in chat it activates). </p>
<p>However, I want to add a cooldown of about 3 seconds or really an amount of time <strong>per</strong> command (or if statement), so that I can customize it depending. To do that I tried this (pseudo code)</p>
<pre><code>if command is seen in chat
    newtimestamp = create timestamp at now
    if (newtimestamp - previoustimestamp) &gt; 30
        execute the command
        make (previoustimestamp)
    else
        return
</code></pre>
<p>but that didn't work because obviously it does not detect the (previoustimestamp) on the first run since it's not declared yet, but when you declare it, it declares it every time the command is run. </p>
<p>So is there a way to make a declaration <strong>only once</strong> at the beginning of an if statement and then ignore it subsequently every other time? Or any other ideas? I'm still a pretty novice programmer so I apologize. </p>
<p>Here's an example code that I would want the cooldown for, something quite simple</p>
<pre><code>if "!redb match" in message:    
   x = str(randint(1, 100))
   realmessage = message.replace('!redb ship ', '')
   array = realmessage.split(' ')
   person1 = array[0]
   person2 = array[1]
   if ((9 - 2) &gt; 5):
      sendMessage(s, person1 + " and " + person2 + "have a " + x + "% love compatibility &lt;3")           
   else:
      break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd use a dictionary for the timestamps, accessing it like <code>previous_timestamp = command_timestamps.get('!redb match', 0)</code>. This will give you the stored timestamp if it's in the dictionary, and 0 (Jan 1 of 1970 if you're using <code>time.time()</code> for your timestamps, which is hopefully far enough in the past that it won't foul up any of your cooldowns).</p>
</div>
<div class="post-text" itemprop="text">
<p>You could write a decorator for a function that stores the last time it was called, and return <code>None</code> if that was too close to now</p>
<pre><code>from functools import wraps
from datetime import datetime, timedelta


def cooldown(*delta_args, **delta_kwargs):
    delta = timedelta(*delta_args, **delta_kwargs)
    def decorator(func):
        last_called = None
        @wraps(func)
        def wrapper(*args, **kwargs):
            nonlocal last_called
            now = datetime.now()
            if last_called and (now - last_called &lt; delta):
                return
            last_called = now
            return func(*args, **kwargs)
        return wrapper
    return decorator

@cooldown(seconds=5)
def foo():
    print("Run")

foo() # Run
time.sleep(1)
foo()
time.sleep(4) 
foo() # Run
</code></pre>
<p>The arguments to <code>cooldown</code> are sent to <code>timedelta</code>, so you should read <a href="https://docs.python.org/3/library/datetime.html#timedelta-objects" rel="nofollow noreferrer">the documentation</a> more on those objects</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>time.sleep(3)</code> to wait 3 seconds if a certain condition triggers for example. This will pause the execution for 3 seconds.</p>
<p>Edit: Since you want these if statements to have their own cooldowns you could try putting this within a control loop which is a bit more complex</p>
<pre><code>cooldowns_dict = {"trigger_1": 0, "trigger_2":0}

while(True):
    loop_start = time.time()
    if ("!redb match" in message) and cooldowns_dict["trigger_1"] &lt;= 0:
        # Send message etc.
        cooldowns_dict["trigger_1"] = 3    # Set a 3 second cooldown

    time.sleep(0.1)    # Just to stop this looping too fast
    loop_end = time.time()
    # update the cooldowns
    for key, value in cooldowns_dict.items():
        if value &gt; 0:
            cooldowns_dict[key] -= (loop_end - loop_start)
        else:
            cooldowns_dict[key] = 0
</code></pre>
</div>
<span class="comment-copy">I'm sorry but I having a lot of trouble implementing this into my code, and still confused at most of it... I've been going back and forth through different solutions and I still haven't been able to do it. All my commands for this bot are in a while true loop so basically they are embedded if statements, so I would need to apply the @cooldown decorator to a def, and then run that function when the if statement is activated? Also with this I get a syntax error with "nonlocal last_called" and I dont understand what that's doing could you clarify on that</span>
<span class="comment-copy"><code>nonlocal last_called</code> means that the <code>last_called</code> in <code>wrapper</code> is the same variable as <code>last_called</code> in <code>decorator</code>. That's how it can "remember" the time it was called last.  As for your other point, it would be <i>possible</i> to use this logic in a huge nested block, but you should consider refactoring your code into functions anyways.</span>
<span class="comment-copy">Okay so I just restructured all my commands as functions, but I still am getting errors with the last_called bit, giving syntax error. I think I'm missing something here  but other examples I look up seem to have the same syntax</span>
<span class="comment-copy">Oh you know what, nonlocal is only a python 3 thing and I'm on 2.7 so I'll have to fix that lol</span>
<span class="comment-copy">Yeah I thought about that but wouldn't that pause the entire program instead of just that if statement? I guess I forgot to mention I have multiple other if statements in this same file that I would like to have custom cooldowns and still work even if a cooldown is active on a different command..  maybe I should be working in a way where each of my if statements is in a different file, then that approach may work actually...</span>
<span class="comment-copy">@Redicebergz Yeah you're right, since python is single threaded this will pause the whole execution. See an alternative approach using a control loop in my edit.</span>
