<div class="post-text" itemprop="text">
<p>I am getting duplicate log output from a logger that only has 1 handler attached.</p>
<p>How can I debug this?</p>
<p>Code (should be copy-and-paste-able):</p>
<pre><code>import io
import logging
import os
import sys
from typing import Optional


DEFAULT_LOG_LEVEL = logging.INFO


def get_sub_loggers():
    return [
        logging.getLogger('a'),
        logging.getLogger('b'),
        logging.getLogger('c')
    ]


def safe_add_handler(logger: logging.Logger, h: logging.Handler) -&gt; None:
    if h not in logger.handlers:
        logger.addHandler(h)


def safe_add_filter(logger: logging.Logger, f: logging.Filter) -&gt; None:
    if f not in logger.filters:
        logger.addFilter(f)


def configure_logging(main_logger: logging.Logger,
                      log_level = DEFAULT_LOG_LEVEL,
                      log_file = None,
                      fmt: Optional[str] = None,
                      force_add_handler: bool = False) -&gt; None:
    main_logger.setLevel(log_level)
    logging.captureWarnings(True)  # send all warnings to be logged

    if force_add_handler or not main_logger.hasHandlers():
        if log_file is None or log_file == '-':
            log_file = sys.stderr

        if isinstance(log_file, (str, os.PathLike)):
            handler = logging.FileHandler(log_file)
        else:
            handler = logging.StreamHandler(log_file)

        handler.setFormatter(logging.Formatter(fmt if fmt is not None else logging.BASIC_FORMAT))

        main_logger.addHandler(handler)
        log_output_location = handler.stream.name if isinstance(handler, logging.StreamHandler) else handler.baseFilename
        main_logger.info('Writing logs to {}'.format(log_output_location))
    else:
        main_logger.info('Using existing log handlers')

    main_logger.info('Using log level {}'.format(log_level))

    for logger in get_sub_loggers():
        logger.setLevel(log_level)
        for h in main_logger.handlers:
            safe_add_handler(logger, h)
        for f in main_logger.filters:
            safe_add_filter(logger, f)
        main_logger.debug('Configured logger {}'.format(logger.name))

    main_logger.info('Configured submodule loggers.')


configure_logging(logging.getLogger())

a_logger = logging.getLogger('a')
assert len(a_logger.handlers) == 1

# Should only output "hi" once, but it does it twice
a_logger.info('hi')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Loggers <a href="https://docs.python.org/3/library/logging.html#logging.Logger.propagate" rel="nofollow noreferrer"><em>propagate</em></a> log events to their ancestors' handlers by default. <code>a_logger</code> may only have one handler, but its parent, the root logger, also has a handler (actually the same handler). <code>a_logger.info('hi')</code> is handled by both handlers (actually the same handler twice).</p>
<p>You don't need to attach the same handler to every logger. Attaching it to the root logger is enough.</p>
</div>
<span class="comment-copy">Why are you adding the same handler to four loggers?</span>
<span class="comment-copy">I see, so I need to check to see if any of the sub-loggers' parents have handlers, in addition to checking the loggers themselves?</span>
<span class="comment-copy">@shadowtalker: You don't need to attach your handler to every logger manually. You attached it to the root logger. That's enough.</span>
<span class="comment-copy">This code will be used on loggers other than the root logger (which might not be a parent of any of the sub-loggers).</span>
<span class="comment-copy">@shadowtalker: Are you saying the root logger might not be a parent of any of the sub-loggers? The root logger is an ancestor of every other logger. If you're saying the root logger might not be one of the loggers you add the handler to, you're going to have problems with things like what happens when you add a handler to a logger <i>after</i> adding that handler to a descendant of that logger.</span>
<span class="comment-copy">@shadowtalker: I don't know. Either way has problems. (I really dislike the <code>logging</code> module design in general.)</span>
