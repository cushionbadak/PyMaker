<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4233476/sort-a-list-by-multiple-attributes">Sort a list by multiple attributes?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I have a sorted list such as </p>
<pre><code>[[1, 'start'], [13, 'start'], [13, 'end'], [15, 'end']]
</code></pre>
<p>which is the output of <code>my_list.sort(key=lambda x: x[0])</code>. However, if there is a tie with the 0th element of each sub-list, as is the case with the middle two elements, then I need the sort to have the lists with <code>end</code> come first. So the desired output would be</p>
<pre><code>[[1, 'start'], [13, 'end'], [13, 'start'], [15, 'end']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it sorting by another element, a <code>boolean</code>, indicating whether or not the second element is <code>end</code>:</p>
<pre><code>my_list.sort(key=lambda x: (x[0], x[1] != 'end'))
[[1, 'start'], [13, 'end'], [13, 'start'], [15, 'end']]
</code></pre>
<p>This will be using the following list of tuples in order to sort the list:</p>
<pre><code>[(x[0], x[1] != 'end') for x in my_list]
[(1, True), (13, True), (13, False), (15, False)]
</code></pre>
<p>Where the second element will be <code>False</code> if it is not <code>end</code> in <code>my_list</code>. Now sorting this array will yield the expected result, given that <code>False</code> i.e. <code>(0)</code> will come before <code>True</code> <code>(1)</code> when the first elements match:</p>
<pre><code>sorted([(x[0], x[1] != 'end') for x in my_list])
[(1, True), (13, False), (13, True), (15, False)]
</code></pre>
<hr/>
<p>As @jpp points out you could simply sort by the second element lexicographically in this case:</p>
<pre><code>my_list.sort(key=lambda x: (x[0], x[1]))
[[1, 'start'], [13, 'end'], [13, 'start'], [15, 'end']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this</p>
<pre><code>my_list.sort(key = lambda x:(x[0],x[1]))
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">docs.python.org/3/howto/sorting.html</a></span>
<span class="comment-copy"><code>sorted(my_list)</code> is sufficient here (try it yourself). It works because <code>end</code> is before <code>start</code> alphabetically.</span>
<span class="comment-copy">Can you explain how the tuple in the lambda works?</span>
<span class="comment-copy">In the case where you only have <code>start</code> and <code>end</code>, <code>(x[0], x[1])</code> is sufficient.</span>
<span class="comment-copy">Yes good point @jpp lexicographic order is good enough here</span>
<span class="comment-copy">@yatu I think you have a mistake in your example. Shouldn't the output of <code>[(x[0], x[1] != 'end') for x in my_list]</code> be <code>[(1, True), (13, False), (13, False), (15, False)]</code>?</span>
<span class="comment-copy">No,  you can check it yourself, it gives  the mentioned output which is then used to sort</span>
