<div class="post-text" itemprop="text">
<p>I am trying to create a list that holds dictionaries of randomly generated colors. So for instance, the first dictionary of the list would be color 0 with values of 255, 255, 255. I am getting a syntax error with the "color{x}" where python is saying that it should be an integer or a splice, but not a string. Removing the color part gives me another error where python is saying the set object has no format attribute. </p>
<p>This is using pygame 1.9.4 and python 3.7 and I am rather new to python programming in general. I have tried messing with the "color{x}" part, but this previous <a href="https://stackoverflow.com/questions/6181935/how-do-you-create-different-variable-names-while-in-a-loop">thread</a> had something similar that work for them, so I just copied the syntax to see if I could get it to work.</p>
<pre><code>colors = []
colorLength = len(colors)
for x in range(3):
    colors["color{x}".format(x)]= random.randint(0,255), 
           random.randint(0,255), random.randint(0,255)
    #colors.append()
else:
    print(colorLength)
</code></pre>
<p>I am trying to get the list colors to hold 3 dictionaries (at the moment, plan on expanding the list when I get it working), that hold a randomly generated color.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand correctly you actually want a dictionary of tuples. Something like this:</p>
<pre><code>import numpy as np
a = {i: tuple(np.random.randint(256, size=3)) for i in range(3)}

print(a)
{0: (65, 168, 140), 1: (193, 85, 66), 2: (28, 25, 7)}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are confusing <code>list</code> with <code>dictionary</code> - a list is simply that ... a list - an indexable collection  of things . What you need is a dictionary - something that stores a <em>value</em> under a <em>key</em> . Dictionarys are created by:  <code>colors = {}</code>.</p>
<p>The other error you get is from using str.format() with a named parameter -you can omit the x or fix it like this:</p>
<pre><code>for xxx in range(3):
    # x is the name inside the {x} and it should be replaced by xxx
    colors["color{x}".format( x = xxx)] = ...
</code></pre>
<p>if you just use </p>
<pre><code>for xxx in range(3):
    colors["color{}".format(xxx)] = ...
</code></pre>
<p><code>format</code> will replace positionally .. the 1st <code>{}</code>placeholder is replaced with the <code>1st</code> value in <code>format( 1st, 2nd, ...)</code> etc.                         </p>
<p>Readup:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">lists</a></li>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer">more on lists</a></li>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionaries</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">str.format()</a></li>
</ul>
<hr/>
<p>Fixed code:</p>
<pre><code>import random 

colors = {} # create empty dictionary

for x in range(3):
    # random.choices creates k random values from the given iterable in one go
    colors["color{}".format(x)] = random.choices(range(0,256), k =3) 

print(colors) 
</code></pre>
<p>Output:</p>
<pre><code>{'color0': [189, 5, 3], 'color1': [57, 218, 56], 'color2': [64, 150, 255]}
</code></pre>
<p>Doku:</p>
<ul>
<li><a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer">random.choices(iterable, k= number)</a></li>
</ul>
<hr/>
<p>If you <em>really</em> need tuples, you can use <code>tuple( random.choices(range(0,256), k =3) )</code></p>
</div>
<span class="comment-copy">I am always astonished what numpy is good for :) pulling it in for random numbers when nothing else uses numpy is a bit mucht though.</span>
<span class="comment-copy">yeah, sorry eheh. Work with numpy everyday nowadays, so it is easy to fall in some overkills with it :)</span>
