<div class="post-text" itemprop="text">
<p>I've got class A and its inner class B</p>
<p>They're in different files(suppose a.py and b.py)</p>
<p>I need to change A.x in method of class B <strong>without sending "self"</strong>. I.e. self.inner = B() and not self.inner = B(self). I can't send "self" because class A is in generated file that I mustn't touch.</p>
<p>How do I do it?</p>
<p>That's how I'd do it if I could send self</p>
<pre><code>#a.py
from b import B
class A():
    def __init__(self):
        self.x = 1
        #this would be self.inner = B() instead
        self.inner = B(self)

example = A()
print(example.x)


#b.py
class B():
    def __init__(self, parent):
        self.change(parent)

    def change(self, parent):
        parent.x = 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try that with the <code>inspect</code> module (although as @Slam advises, it's far from being recommended):</p>
<pre><code>import inspect
class B():
    def __init__(self):
        inspect.currentframe().f_back.f_locals["self"].x = 2

class A():

    def __init__(self):    
        self.x = 1
        self.inner = B()
    def print_x(self):
        print(self.x)

a = A()
a.print_x()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe you can so dome black magic with <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> module.</p>
<p>But I advise you re-thinking if you really need this, and why. Because this is good example of breaking the ideas of OOP and sane architecture overall — outer scopes should not be altered until they're explicitly providing you a handle to do so. In case you're not following this idea, you'll get super-tightly coupled code.</p>
</div>
<span class="comment-copy"><code>B()</code> is initialized as an instance attribute or class attribute of <code>A</code>? If the latter, can possibly use the <code>__get__</code> descriptor to achieve your purpose.  See <a href="https://stackoverflow.com/questions/3798835/understanding-get-and-set-and-python-descriptors" title="understanding get and set and python descriptors">stackoverflow.com/questions/3798835/…</a></span>
<span class="comment-copy">I'm using PyQt5 and QtDesigner(with pyuic generated file), so I don't know how to implement it the other way. I need to change App.canvas in its inner Slider Class. App inherits Ui_MainWindow, which sets Slider Class as its attribute(I can't really change Ui_MainWindow class, this one is generated). It goes like self.y = QWidget(...), self.x = Slider(self.y) in generated file.</span>
