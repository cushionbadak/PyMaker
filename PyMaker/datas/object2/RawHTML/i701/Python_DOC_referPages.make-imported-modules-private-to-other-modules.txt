<div class="post-text" itemprop="text">
<p>Suppose I have a code like this in module <code>a.py</code></p>
<pre><code>import numpy as np

def sqrt(x):
  return np.sqrt(x)
</code></pre>
<p>And I have a module <code>b.py</code> written like this:</p>
<pre><code>import a
print(a.sqrt(25))
print(a.np.sqrt(25))
</code></pre>
<p>I will see that the code runs fine and that when using autocomplete in most IDEs, I found that <code>a.np</code> is accessible. I want to make <code>a.np</code> private so that only <code>a</code> code can see that variable.
I don't want <code>b</code> to be able to access <code>a.np</code>.</p>
<p>What is a good approach to make this possible?</p>
<p>Why do I want <code>a.np</code> to be inaccessible? Because I want it to not show in the autocomplete when I type <code>a.</code> and press <kbd>Tab</kbd> in Jupyter Lab. It hides what the modules can do because there are so many imports that I use in my module.</p>
</div>
<div class="post-text" itemprop="text">
<p>The solution is the same as for "protected" attributes / methods in a class (names defined in a module are actually - at runtime - attributes of the module object): prefix those names with a single leading underscore, ie</p>
<pre><code>import numpy as _np

def sqrt(x):
  return _np.sqrt(x)
</code></pre>
<p>Note that this will NOT prevent someone to use <code>a._np.sqrt(x)</code>, but at least it makes it quite clear that he is using a protected attribute.</p>
</div>
<div class="post-text" itemprop="text">
<p>I see 2 approaches here:</p>
<ol>
<li><p>more user-friendly solution: change alias names to "underscored" ones</p>
<pre><code>import numpy as _np
...
</code></pre>
<p>this will not prevent from importing it, but it will say to user that this are implementation details and one should not depend on them.</p></li>
<li><p>preferred-by-me solution: do nothing, leave it as it is, use semver and bump versions accordingly.</p></li>
</ol>
</div>
<span class="comment-copy">Is there a way that I don't have to rename all my variables or a smarter way to structure the code entirely? Because I think that no one wants to use <code>_np</code> in their code.</span>
<span class="comment-copy">I don't know how Jupyter handles auto-completion (and I'm not going to install it to try out), but you can always try to define <code>__all__</code> in your module (cf <a href="https://docs.python.org/3/tutorial/modules.html#importing-from-a-package" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a>) - if Jupyter uses this attribute it might solve the issue, else, well, you'll either have to do a search/replace or live with it.</span>
<span class="comment-copy">Did you actually try your first solution ? I don't think so...</span>
<span class="comment-copy">hint: the resolution of the name <code>np</code> in the <code>sqrt</code> function happens at runtime... What do you think will happens when calling <code>a.sqrt</code> when <code>a.np</code> isn't defined anymore ?</span>
<span class="comment-copy">@brunodesthuilliers: you are right, my bad, fixed</span>
