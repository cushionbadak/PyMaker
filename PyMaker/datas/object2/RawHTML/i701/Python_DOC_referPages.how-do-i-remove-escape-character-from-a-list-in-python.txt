<div class="post-text" itemprop="text">
<p>I want to remove the extra '\' from a list of strings in python.</p>
<p>For example, if my list is this:</p>
<pre><code>cmd = ['a', 'b', '{word}\\\\*', 'd']
</code></pre>
<p>it should be this:</p>
<pre><code>cmd = ['a', 'b', '{word}\\\*', 'd']  # I need this exact result
</code></pre>
<p>If I iterate through this list while printing each string separately, I am able to get the string "{word}\*".</p>
<p>Meanwhile, when printing this as a whole list, it's showing up as:</p>
<pre><code>['a', 'b', '{word}\\\\*', 'd']
</code></pre>
<p><strong>Program:</strong></p>
<pre><code>import re
cmd = ['a', 'b', '{word}\\\\*', 'd']
for i in cmd:
    print("val : ", i)
print("whole list : ", cmd)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>C:\Users\Elcot&gt;python test.py
val :  a
val :  b
val :  {word}\\*
val :  d
whole list :  ['a', 'b', '{word}\\\\*', 'd']
</code></pre>
<p><strong>Expected Result:</strong></p>
<pre><code>whole list :  ['a', 'b', '{word}\\*', 'd']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can convert the string to bytes and then use the <code>bytes.decode</code> method with <code>unicode_escape</code> as the encoding to un-escape a given string:</p>
<pre><code>cmd = [bytes(s, 'utf-8').decode('unicode_escape') for s in cmd]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you really are dealing with an assignment statement, you should know about <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer"><em>raw strings</em></a> in Python. A raw string literal uses the <code>r</code> prefix like this:</p>
<pre><code>rstr = r"raw string"
regex = r"\(.*\)"
</code></pre>
<p>The purpose of raw strings is to reduce the amount of escaping needed when using backslash characters; it is intended for use with other processing engines (like Windows paths, or regular expressions) where the processing engine is going to do its own backslash-handling. There are many fewer escape sequences in raw strings.</p>
<p>Your example of <code>'word\\\\*'</code> would normally be converted to <code>word\\*</code> by the string backslash-escape mechanism. If you want a string with exactly three backslashes, however, you could say <code>r'word\\\*'</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe you're looking for str.rstrip() which removes the last instance of the character and returns a copy of the resulting string</p>
<p><a href="https://docs.python.org/3.6/library/stdtypes.html#str.rstrip" rel="nofollow noreferrer">https://docs.python.org/3.6/library/stdtypes.html#str.rstrip</a> </p>
<p>So looping through your list of strings one-by-one</p>
<pre><code>
for i in range(len(cmd)):
    cmd[i] = cmd[i].rstrip('\\')

</code></pre>
<p>Should remove the last '\' character from each of your strings in your list of strings.</p>
</div>
<span class="comment-copy">Printing a list uses the <code>repr()</code> of its elements.  The <code>repr()</code> of a string with a backslash will double that backslash, to make the result a syntactically valid Python string literal.  In other words, <i>there is no extra \ in your list</i>, this is purely a display issue.  If you want to display the list with no extra processing done to the elements, you need to write that yourself - <code>", ".join(cmd)</code> would be a good place to start.</span>
