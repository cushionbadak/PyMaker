<div class="post-text" itemprop="text">
<p>There may be a lapse in my understanding of how try/except/finally work in Python, but I would expect the following to work as described in comments.</p>
<pre><code>from sys import argv

try:
    x = argv[1]  # Set x to the first argument if one is passed
finally:
    x = 'default'  # If no argument is passed (throwing an exception above) set x to 'default'

print(x)
</code></pre>
<p>I would expect that the file above (foo.py) should print <code>default</code> when run as <code>python .\foo.py</code> and would print <code>bar</code> if run as <code>python .\foo.py bar</code>.</p>
<p>The <code>bar</code> functionality works as expected, however, the <code>default</code> behaviour does not work; if I run <code>python .\foo.py</code>, I get an IndexError:</p>
<pre><code>Traceback (most recent call last):
  File ".\foo.py", line 4, in &lt;module&gt;
    x = argv[1]
IndexError: list index out of range
</code></pre>
<p>As a result, I have two questions:</p>
<ul>
<li>Is this a bug or is it an expected behavior in a try-finally block?</li>
<li>Should I just never use try-finally without an <code>except</code> clause?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>This is expected behaviour. <code>try:..finally:...</code> alone <strong>doesn't catch exceptions</strong>. Only the <code>except</code> clause of a <code>try:...except:...</code> does.</p>
<p><code>try:...finally:...</code> only guarantees that the statements under <code>finally</code> are always executed, whatever happens in the <code>try</code> section, whether the block succeeds or is exited because of a <code>break</code>, <code>continue</code>, <code>return</code> or an exception. So <code>try:...finally:...</code> is <em>great</em> for cleaning up resources; you get to run code no matter what happens in the block (but note that the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer"><code>with</code> statement</a> and context managers let you encapsulate cleanup behaviour too). If you want to see examples, then the <a href="https://github.com/python/cpython/search?q=finally+path%3ALib%2F+-path%3ALib%2Ftest+-path%3ALib%2Fdistutils%2Ftests%2F+-path%3ALib%2Flib2to3%2Ftests+-path%3ALib%2Funittest%2Ftest%2F+-path%3ALib%2Ftkinter%2Ftest%2F&amp;unscoped_q=finally+path%3ALib%2F+-path%3ALib%2Ftest+-path%3ALib%2Fdistutils%2Ftests%2F+-path%3ALib%2Flib2to3%2Ftests+-path%3ALib%2Funittest%2Ftest%2F+-path%3ALib%2Ftkinter%2Ftest%2F" rel="nofollow noreferrer">Python standard library has hundreds</a>.</p>
<p>If you need to handle an <code>IndexError</code> exception in a <code>try</code> block, then you <em>must</em> use an <code>except</code> clause. You can still use a <code>finally</code> clause <em>as well</em>, it'll be called after the <code>except</code> suite has run.</p>
<p>And if you ever get to work with much older Python code, you'll see that in code that must run with Python 2.4 or older <code>try:....finally:...</code> and <code>try:...except:...</code> are never used together. That's because <a href="https://docs.python.org/3.7/whatsnew/2.5.html#pep-341" rel="nofollow noreferrer">only as of Python 2.5</a> have the two forms been unified.</p>
</div>
<span class="comment-copy"><code>try: ....  except:  ... finally: ....</code>  You do not catch anything so the exeption terminates your program. Quite expectedly.</span>
<span class="comment-copy">The <code>finally</code> block is being executed but the error is raised nevertheless (since not <code>except</code>'ed).</span>
<span class="comment-copy">You are confusing <code>except IndexError</code> with <code>finally</code>. <code>finally</code> <i>always</i> executes, exception or no (unless the process is killed).</span>
<span class="comment-copy">Reread: <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html#handling-exceptions</a></span>
<span class="comment-copy">There are reasonst to use <code>try: ... finally: ...</code> - f.e. if you get a strained ressource in your try by f.e. loggin into some service that needs explicit logout to free your "license" - you would wan't to put the logout in the <code>finally:</code> part. If exceptions happen - you get logged out and whatever happens with the exception ... happens.</span>
