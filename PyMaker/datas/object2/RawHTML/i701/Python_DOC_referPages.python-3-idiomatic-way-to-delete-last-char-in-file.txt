<div class="post-text" itemprop="text">
<p>Is there an idiomatic way to do this? I just upgraded from Python 2 to Python 3 and I'm trying to port my script, and I gotta say I'm not impressed. From what I can tell, my code gets to go</p>
<p>from this</p>
<pre><code># Not allowed by Python 3 anymore without being in binary mode.
card_names_file.seek(-1, os.SEEK_END)
if card_names_file.read() == ',':
    card_names_file.truncate()
</code></pre>
<p>to this</p>
<pre><code># Go to end of file just to get position index. lawl.
card_names_file.seek(0, os.SEEK_END)
# Create a temporary just to store said index. More lawl.
eof = card_names_file.tell()
# Index one from the back. ugh. w/e, that's fine.
card_names_file.seek(eof - 1, os.SEEK_SET)

# Oh wait, .read() will advance my pointer. Oh hey Python 3 doesn't let me
# use .peek() either. Fantastic. I'll have to read this...
if card_names_file.read() == ',':
    # Then go back to where I was by indexing from front AGAIN
    card_names_file.seek(eof - 1, os.SEEK_SET)
    # Then remove last character.
    card_names_file.truncate()
</code></pre>
<p>This is the dumbest code I've almost ever seen and I've spent 2 and a half hours so far trying to delete a character from the back of a file, and this looks like a hack.</p>
<p>The alternative is that I have code that looks like this</p>
<pre><code># open file
with open(file, a+)
    # do stuff

# open same file
with open(file, w+b)
    # do different stuff
</code></pre>
<p>But I can't actually get that to work either.</p>
</div>
<div class="post-text" itemprop="text">
<p>Underlying buffer does have a <code>peek()</code> method you were looking for, so:</p>
<pre><code>f = open('FILE', 'a+')
f.seek(f.seek(0, os.SEEK_END) - 1)
# or with the same effect you can also:
os.lseek(f.fileno(), -1, os.SEEK_END)
# Actually in append mode we could just seek by -1 from where we are
# (cursor at the end after opening)
f.tell()  # just to see...
f.buffer.peek(1)
f.tell()  # ...still where we were
</code></pre>
<p>Alternatively, you could also use <a href="https://docs.python.org/3/library/os.html#os.pread" rel="nofollow noreferrer"><code>os.pread()</code></a>. For instance:</p>
<pre><code>os.pread(f.fileno(), 1, os.fstat(f.fileno()).st_size - 1)
</code></pre>
<p>It's not very idiomatic as in relying on higher level abstraction accessing files, but I'd <a href="https://www.python.org/dev/peps/pep-0020/#id3" rel="nofollow noreferrer">invoke</a>: <em>"Although practicality beats purity."</em></p>
</div>
<span class="comment-copy">Your first snippet is b0rked. The <code>card_names_file.truncate()</code> does nothing because you're already at the end of the file.</span>
<span class="comment-copy">I'm also fairly sure that the <code>seek</code> function always operates on bytes, so your code never really worked in python 2 either.</span>
<span class="comment-copy">Related <a href="https://stackoverflow.com/questions/18857352/python-remove-very-last-character-in-file" title="python remove very last character in file">stackoverflow.com/questions/18857352/â€¦</a></span>
<span class="comment-copy">@aran It definitely worked, so maybe in Pyhton 2 .read didn't advance the pointer.  @ snakecharmerb, I've definitely read that entire thread, it didn't answer my question. You'll notice that the selected answer doesn't work in Python 3 at all, and one of them i is like 30 lines of code. No thanks.</span>
<span class="comment-copy">It may look like the code works because your file is using an encoding where a comma is encoded as a single byte. If there is an encoding where the comma is represented by more than 1 byte, or another multi-byte character <i>contains</i> a byte that looks like a comma, your code will most certainly not work correctly.</span>
<span class="comment-copy">This works and its pretty much the same amount of code as my Python 2 impl. Thank you so much! I was unaware of the underlying buffer. Thanks again!</span>
