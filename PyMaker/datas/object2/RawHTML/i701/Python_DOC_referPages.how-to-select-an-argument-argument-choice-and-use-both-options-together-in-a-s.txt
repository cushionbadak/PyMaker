<div class="post-text" itemprop="text">
<p>Working with this argument:</p>
<pre><code>def get_args(arglist):
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''
           text '''))
    parser.add_argument('--add',
                    default='',
                    nargs='?',
                    choices=['user', 'database'],
                    help='Add user or database (default: %(default)s)')

    args = parser.parse_args(arglist) # Passing argument list into parse
    args_dict = vars(args)  # Dictionary for args
    return args, args_dict  # Return the parsed arguments
</code></pre>
<p>I need to perform logic that will read which <code>choice</code> was made and go down a path of if statements based on that choice.</p>
<p>Here is basically what I'm trying to do:</p>
<pre><code>if args.add+args.user:
    print(f"do something to add user {args.add}")
if args.add+args.database:
    print(f"do something to add database {args.add}")
</code></pre>
<p>I want this CLI script to know what the user is trying to add (for now, a <code>user</code> or a <code>database</code>).</p>
<p>The end goal is that the user will enter <code>./myscript.py --add user USERNAME</code> to add a user.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just compare the value stored in your argument to check what had the user entered:</p>
<pre><code>if args.add == 'user':
    print(f"do something to add user {args.add}")
if args.add == 'database':
    print(f"do something to add database {args.add}")
</code></pre>
<p><strong>For the <code>USERNAME</code> or <code>MYDB</code> part</strong></p>
<p>A solution that came right now in my mind is to add one more argument. It could be a positional or optional too.</p>
<p>Positional:</p>
<pre><code>parser.add_argument('name',
                    default='',
                    help='USERNAME or DATABASE name to be added (default: %(default)s)')
</code></pre>
<p>Script call: <code>./myscript.py USERNAME --add user</code> or <code>./myscript.py MYDB --add database</code></p>
<p>Optional:</p>
<pre><code>parser.add_argument('--name',
                    default='',
                    help='USERNAME or DATABASE name to be added (default: %(default)s)')
</code></pre>
<p>Script call: <code>./myscript.py --add user --name USERNAME</code> or <code>./myscript.py --add database --name MYDB</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to Hemerson's answer you could also create a <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_subparsers" rel="nofollow noreferrer">subparser</a> with a <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_mutually_exclusive_group" rel="nofollow noreferrer">mutually exclusive group</a> containing the arguments <code>--database</code> and <code>--user</code>.</p>
<p>Here is an example:</p>
<pre><code>import argparse


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='command')
    add_command = subparsers.add_parser('add', help='Add database or user.')
    add_group = add_command.add_mutually_exclusive_group(required=True)
    add_group.add_argument('--database')
    add_group.add_argument('--user')
    args = parser.parse_args()
    if args.command == 'add':
        if args.user:
            print('Adding user:', args.user)
        if args.database:
            print('Adding database:', args.database)
</code></pre>
<p>Now you can call:</p>
<ul>
<li><code>./myscript.py add --database MYDB</code></li>
<li><code>./myscript.py add --user MYUSER</code></li>
</ul>
<p>But not:</p>
<ul>
<li><code>./myscript.py add</code></li>
<li><code>./myscript.py add --database MYDB --user MYUSER</code> </li>
</ul>
</div>
<span class="comment-copy">Have you tried to use <code>if args.add == 'user':</code> and <code>if args.add == 'database':</code> ? If I understood the question, this should be enough...</span>
<span class="comment-copy">not until you suggested it, thank you, it worked!</span>
<span class="comment-copy">Glad to hear that! I will add this as the answer, could kindly accept it? :)</span>
<span class="comment-copy">But I have one more issue now it seems... my output is <code>do something to add database database</code> but i need it to be <code>do something to add database MYDB</code></span>
<span class="comment-copy">of course I will :)</span>
<span class="comment-copy">This did answer the question, but now I'm seeing <code>do something to add database database</code> but i need it to be <code>do something to add database MYDB</code></span>
<span class="comment-copy">Could you elaborate a little more? Where MYDB came from?</span>
<span class="comment-copy">Yes, <code>MYDB</code> would be for example: input = <code>./myscript --add database MYDB</code> .. basically it would be the name of the database that i want to add, whereas the <code>database</code> keyword would be just telling the script that what i want to add is a database.</span>
<span class="comment-copy">I added a possible solution to this in the answer.</span>
<span class="comment-copy">Awesome, thanks! my input is <code>./myscript.py --add database mydb</code>, output is <code>do something to add database mydb</code></span>
