<div class="post-text" itemprop="text">
<p>I am new to python. I want to define a function with <code>from</code> and <code>to</code> date. If I call the function with one argument, It should take that argument as <code>to</code> date. If I pass two arguments, It should assign <code>from</code> and <code>to</code> date.</p>
<p>I defined as follows,</p>
<pre><code>def __init__(self,fdate="",edate):
        self.fdate = fdate
        self.edate = edate
</code></pre>
<p>I get the below error,</p>
<pre><code>    def __init__(self,fdate="",edate):
                ^
SyntaxError: non-default argument follows default argument
</code></pre>
<p>I understand the error. But How can I define a function for my requirment in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Required arguments must come before default arguments, otherwise python doesn't know which one the value is meant for.</p>
<p>See <a href="https://www.diveinto.org/python3/your-first-python-program.html#optional-arguments" rel="nofollow noreferrer">Dive into python section on default and named arguments</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>As error message says, default arguments should follow non-default ones, like this:</p>
<pre><code>def __init__(self, edate, fdate=""):
    self.fdate = fdate
    self.edate = edate
</code></pre>
<p>Refer to <a href="https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions" rel="nofollow noreferrer">docs</a> where this behaviour is clearly depicted.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>SyntaxError: non-default argument follows default argument</p>
</blockquote>
<p>Your default arguments must come later to non default arguments.</p>
<p>The reason: Your interpreter will have a hard time assigning the arguments if you do a mix up. So it doesn't support it and throws a SyntaxError.</p>
<p>Just change it to </p>
<pre class="lang-py prettyprint-override"><code>def __init__(self, edate, fdate=""):
</code></pre>
<p><strong>@Edit1:</strong> Few languages like Kotlin allows you to have default args before non-default args. In this case you will be using a named arg to set the function parameters.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you are passing a value default argument, all arguments to the right of it should also have default values.</p>
<p>This holds true for C++ as well.</p>
<p>Eg:</p>
<p><strong>Valid</strong>
<code>def example(a = 1, b = 2):pass</code><br/>
<strong>Valid</strong>
<code>def example(a , b = 2):pass</code></p>
<p><strong>Error</strong>
<code>def example(a = 1, b):pass</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is how I would solve it: I would write a small class and two factory functions that call the class constructor and return the result:</p>
<pre><code>class DateRange:
    def __init__(self, dfrom='', dto=''):
        self.dfrom = dfrom
        self.dto = dto

def date_from_to(dfrom, dto):
    return DateRange(dfrom, dto)

def date_to(dto):
    return DateRange(dto=dto)
</code></pre>
<p>As you have seen from the error message, you can't define a function that behaves the way you want.  If you use two functions it's easy enough to document them and to remember how to use them.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could get the wanted functionality, but its quite a bit longer and if you want to add arguments it will become very hard to maintain. You can catch all arguments and keyword arguments and then decide what to do with them:</p>
<pre><code>class Test:
    def __init__(self, *args, **kwargs):
        self.__args, self.__kwargs = args, kwargs
        self.edate = ""
        self.fdate = ""

        # Sanity checking the arguments
        if len(args) + len(kwargs) &lt; 1:
            raise ValueError('Too few arguments.')
        if len(args) + len(kwargs) &gt; 2:
            raise ValueError('Too many arguments.')
        if any(i not in {'edate', 'fdate'} for i in kwargs):
            raise ValueError('Unrecognized keyword arguments.')
        if 'edate' not in kwargs and len(args) &lt; 1:
            raise ValueError('"edate" must be defined either by a keyword'
                             ' argument or by passing an argument.')

        if kwargs.get('edate'):
            self.edate = kwargs['edate']
        if kwargs.get('fdate'):
            self.fdate = kwargs['fdate']

        if len(args) == 2:
            self.fdate = args[0]
            self.edate = args[1]
        elif len(args) == 1:
            if not self.edate:
                self.edate = args[0]
            else:
                self.fdate = args[0]

    def __repr__(self):
        args = ', '.join(str(i) for i in self.__args)
        kwargs = (', '.join(f'{key}={repr(value)}' 
                  for key, value in self.__kwargs.items()))
        return (f'Test({args}, {kwargs}) -&gt;'
                f' self.fdate={repr(self.fdate)},'
                f' self.edate={repr(self.edate)}')

print(Test(1, 2))
print(Test(1))
print(Test(1, edate=3))
print(Test(1, fdate=3))
print(Test(edate=4))

# Will raise exceptions:
#print(Test())
#print(Test(fdate=3))
#print(Test(1, 2, fdate=3))
#print(Test(1, 2, 3))
#print(Test(cdate=4, edate=1))
</code></pre>
<p>output:</p>
<pre><code>Test(1, 2, ) -&gt; self.fdate=1, self.edate=2
Test(1, ) -&gt; self.fdate='', self.edate=1
Test(1, edate=3) -&gt; self.fdate=1, self.edate=3
Test(1, fdate=3) -&gt; self.fdate=3, self.edate=1
Test(, edate=4) -&gt; self.fdate='', self.edate=4
</code></pre>
</div>
<span class="comment-copy">Swap <code>edate</code> and <code>fdate</code> positions.</span>
<span class="comment-copy">The arguments with default values must come after arguments that donâ€™t have default values.</span>
