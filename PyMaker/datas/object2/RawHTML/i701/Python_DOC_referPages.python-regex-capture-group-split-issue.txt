<div class="post-text" itemprop="text">
<p>Trying to understand a regex example in python and here is my code</p>
<pre><code>line='bar asdfgh klmn,     foo'
print(re.split(r'(;|,|\s)\s*',line))
#output is ['bar', ' ', 'asdfgh', ' ', 'klmn', ',', 'foo']
</code></pre>
<p>In the output it shows the strings and the seperators, the last seperetor is a comma with five spaces not just a comma</p>
<p>If the seperator was just a comma, shouldn't the output be like this?</p>
<pre><code>#output ['bar', ' ', 'asdfgh', ' ', 'klmn', ',', '     foo']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split</code></a> splits the provided string by the pattern, returning what you capture in parentheses as part of the results.</p>
<p>In this case your regular expression matches "a semi-colon, a comma, or a whitespace character (which is captured and returned) followed by 0 or more whitespace characters (which are discarded)". As a result the whitespace after the comma in your example is consumed when the comma is matched and is not present in your output.</p>
</div>
<div class="post-text" itemprop="text">
<p>If capturing groups are used in the regex, then <code>re.split</code> includes the contents of the captured groups. However, it still uses the whole match as the separator, which leads to the behavior you observed. If you want <code>"".join(split_results)</code> to be equal to the original string, you'll need to capture the entire separator (and use non-capturing parens where you've got parens now: <code>r'((?:;|,|\s)\s*)'</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend splitting on the following pattern:</p>
<pre><code>\s*[,;]?\s+
</code></pre>
<p>This says to split on optional whitespace and either comma or semicolon separator, followed by one or more spaces.</p>
<pre><code>line='bar asdfgh klmn,     foo'
print(re.split(r'\s*[,;]?\s+', line))

['bar', 'asdfgh', 'klmn', 'foo']
</code></pre>
<p>The problem with your current pattern is that it leaves space optional, if a comma/semicolon separator be present.  This is resulting in spaces appearing as matched terms.</p>
</div>
