<div class="post-text" itemprop="text">
<p>The line <code>import re; print(re.findall("(.*) (.*)", "john smith"))</code> outputs <code>[("john", "smith")]</code>, which can be unpacked like <code>[(first_name, last_name)] = re.findall(...)</code>. However, in the event of a non-match (<code>findall</code> returning <code>[]</code>) this unpacking throws <code>ValueError: not enough values to unpack (expected 1, got 0)</code>.</p>
<p>What is the correct way to <em>safely</em> unpack this array of tuples, which would work in both match (<code>[("john", "smith")]</code>) and non-match (<code>[]</code>) scenarios?</p>
</div>
<div class="post-text" itemprop="text">
<p>The generic answer is to look before you leap:</p>
<pre><code>if result:
    [(first_name, last_name)] = result
</code></pre>
<p>or to ask for forgiveness:</p>
<pre><code>try:
    [(first_name, last_name)] = result
except ValueError:
    pass
</code></pre>
<p>but you are actually overcomplicating things by using <code>re.findall()</code> to find a single result. Use <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer"><code>re.seach()</code></a> and extract your <a href="https://docs.python.org/3/library/re.html#re.Match.groups" rel="nofollow noreferrer">matched groups</a>:</p>
<pre><code>match = re.search("(.*) (.*)", value)
if match:
    firstname, lastname = match.groups()
</code></pre>
<p>or</p>
<pre><code>try:
    firstname, lastname = re.search("(.*) (.*)", value).groups()
except AttributeError:
    # An attribute error is raised when `re.search()` returned None
    pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There isn't one; you have to explicitly check the return value to see if there is, in fact, anything to unpack.</p>
<pre><code>x = re.findall(...)
if x:
    [(first_name, last_name)] = x
</code></pre>
<p>In Python 3.8, you'll be able to compact this slightly:</p>
<pre><code>if x := re.findall(...):
    [(first_name, last_name)] = x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since <code>re.findall</code> returns an empty list in the event of a non-match, you can use the <code>or</code> operator to assign default values to <code>first_name</code> and <code>last_name</code> instead:</p>
<pre><code>[(first_name, last_name)] = re.findall("(.*) (.*)", "johnsmith") or [(None, None)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is terrible, so don't do it, but you could use</p>
<pre><code>first, last = getattr(re.search(r"(.*) (.*)", "john smith"), 'groups', lambda: (None, None))()
</code></pre>
<p>to do what you want as a one-liner without using <code>findall</code> (which could return multiple hits, and so still fail, or ignore spaces depending on whether you limit the <code>.</code> to <code>\S</code>).</p>
<p>Given your pattern current matches literally anything with a single space in it (capturing everything before the final space, and everything after it), avoid <code>findall</code> doesn't gain you much, but if you want to actually exclude stuff with more than one space, or things that match only partially, you could switch the <code>.</code> to <code>\S</code>, and possibly <code>search</code> to <code>fullmatch</code>:</p>
<pre><code>first, last = getattr(re.fullmatch(r"(\S*) (\S*)", "john smith"), 'groups', lambda: (None, None))()
</code></pre>
<p>Either way, it abuses the fact that a non-match returns <code>None</code>, which has no <code>groups</code> method, so <code>getattr</code> can return a bound <code>groups</code> method on a match, or a <code>lambda</code> that returns the defaults otherwise. Regardless, you immediately call it, and get the result of <code>groups</code> or the <code>lambda</code> as appropriate.</p>
<p>Again, don't do this. It's legal, it's just ugly (and likely slower than any reasonable method).</p>
</div>
<span class="comment-copy"><code>if result:  # unpacking code</code></span>
<span class="comment-copy"><code>findall</code> is a weird choice when you only expect (and can only handle) one match.</span>
<span class="comment-copy">@user2357112 I went with it as it's iterable, whereas <code>search</code> is not</span>
<span class="comment-copy">@Frayt: <a href="https://docs.python.org/3/library/re.html#re.Match.groups" rel="nofollow noreferrer">docs.python.org/3/library/re.html#re.Match.groups</a></span>
<span class="comment-copy">@user2357112 thanks, that makes more sense. I would hope to be able to do something like <code>first,last = re.search(r"(.*) (.*)", "john smith").groups(default=[None, None])</code> (which in a non-match scenario errors due to <code>search</code> returning <code>None</code>)</span>
<span class="comment-copy">any way to use <code>re.search</code> as a one liner, perhaps using the <code>or</code> operator as in @bihsing's answer?</span>
<span class="comment-copy">@Frayt: yes, but then you are code golfing, not writing production-level Python code.</span>
<span class="comment-copy">@Frayt: and it'd would require that you create a dummy class with <code>group()</code> method that returns <code>(None, None)</code> to make the tuple assignment work to be able to do <code>(re.search("(.*) (.*)", value) or dummy_object).groups()</code>. That really, really hurts maintainability of your code base.</span>
<span class="comment-copy">I agree that a dummy object is a bad idea for the sake of a one-liner, if None propogation was a thing I could do <code>first, last = re.search(...)?.groups() or (None, None)</code>, and I wouldn't consider that 'code golfing'</span>
<span class="comment-copy">@Frayt: right, but <code>None</code> in Python is just another object (even though it is a singleton) and not a NULL (which is the absence of an object), so <code>None</code>-propagation is not really going to happen in Python.</span>
