<div class="post-text" itemprop="text">
<p>In Java the code is structured in packages with you each class in a separate file. Is there any similar practice in python? Is it better to have each class in a different python file and have them import each other or should I just dump my code(all my classes)  in a single file?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>In Java the code is structured in packages with you each class in a separate file. Is there any similar practice in python?</p>
</blockquote>
<p>Definitly no. Actually, Python doesn't force you to put all your code in classes - plain functions are ok too - so even the "each class" premise doesn't make sense.</p>
<blockquote>
<p>Is it better to have each class in a different python file</p>
</blockquote>
<p>Definitly no either - it would just make your code a nightmare to maintain.</p>
<blockquote>
<p>or should I just dump my code(all my classes) in a single file?</p>
</blockquote>
<p>Neither (unless it's a very small app). You want to regroup your code (functions, classes, etc) in cohesive, decoupled modules/packages, which is the known best practice for all languages anyway. If you have a "full" app with domain code, persistance and UI you'll probably want to use this as your first level packages. </p>
</div>
<div class="post-text" itemprop="text">
<p>When you structure your code in Python, it's useful  to think in terms of namespaces (mapping from names to objects) : <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/classes.html</a> . Then you can organize your code (depending on his complexity) in modules (file containing Python definitions and statements) and then packages ( a way of structuring Python’s module namespace by using “dotted module names”): <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This depends on use case/how you want to structure your code/application.</p>
<p>Here's the first excerpt from the documentation of <a href="https://docs.python.org/2/tutorial/classes.html" rel="nofollow noreferrer">classes</a>:</p>
<blockquote>
<p>Compared with other programming languages, Python’s class mechanism
  adds classes with a minimum of new syntax and semantics. It is a
  mixture of the class mechanisms found in <code>C++</code> and <code>Modula-3</code>. Python
  classes provide all the standard features of <strong>Object Oriented</strong>
  Programming: the class inheritance mechanism allows multiple base
  classes, a derived class can override any methods of its base class or
  classes, and a method can call the method of a base class with the
  same name. Objects can contain arbitrary amounts and kinds of data. <strong>As
  is true for modules, classes partake of the dynamic nature of Python</strong>:
  they are created at runtime, and can be modified further after
  creation.</p>
</blockquote>
<p>Basically in Python, "Everything is an Object" <em><a href="https://iopress.info/index.php/books/programmer-s-python-everything-is-an-object" rel="nofollow noreferrer">cough cough</a></em> including classes.</p>
<p>With this being said, if you go further to read in the docs, there are use cases where you would want to have multiple classes in the same file such as <a href="https://docs.python.org/2/tutorial/classes.html#exceptions-are-classes-too" rel="nofollow noreferrer">exceptions</a> <em>as they "are classes too"</em></p>
<pre><code>class ApplicationError(Exception):
    pass

class LoadingError(Exception):
    pass

class ValidationError(ApplicationError):
    pass
</code></pre>
<p>Something like this can be placed into a file such as <code>errors.py</code></p>
<p>Or if you have a class that overrides another for example:</p>
<pre><code>class Dog:
    def __init__(self, name, weight):
        self.name = name
        self.weight = weight

    def bark():
        return("Bark")

class Chihuahua(Dog):

    def bite_ankles():
        return("Pain")
</code></pre>
<p>Something like this can be in one file called <code>breeds.py</code>.</p>
<p>What I have now made essentially are 2 python <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">modules</a> these help break a python application into bite size pieces.</p>
<blockquote>
<p>As your program gets longer, you may want to split it into several
  files for easier maintenance. You may also want to use a handy
  function that you’ve written in several programs without copying its
  definition into each program.</p>
<p>Python has a way to put definitions in a file and use them in a script
  or in an interactive instance of the interpreter. Such a file is
  called a module; definitions from a module can be imported into other
  modules or into the main module <em>(the collection of variables that you
  have access to in a script executed at the top level and in calculator
  mode)</em>.</p>
<p><strong>A module is a file containing Python definitions and statements.</strong> The
  file name is the module name with the suffix .py appended.</p>
</blockquote>
<p>There's are cases where using multiple classes and definitions in one file can be handy but it depends on how you plan to structure your project. Sure you could put all your code into one file but this is difficult to manage and goes way against the <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">Zen of Python</a> "Readability Counts".</p>
</div>
<div class="post-text" itemprop="text">
<p>By default python did not create one file for each class in code file.</p>
<p>To create separate file for each class, it code of each class should be in separate file</p>
<p>If two classes are related or tightly coupled, and client code will need to instantiate each, It is good to put them in the same file.</p>
<p>If one parent class has many child classes, and child class has very little code, better to put in one file.</p>
</div>
<span class="comment-copy">You certainly don't need to put every class in its own file. You can divide them up however makes sense for your project.</span>
<span class="comment-copy">You don't <i>need</i> to in java either, but it's a strong convention. It's a good question: what is the established best practice in Python, in this respect? As far as I know, the answer is "it varies".</span>
<span class="comment-copy">So it is fine in python to have classes starting by importing other classes they interact with/use/(inherit from?) ?</span>
<span class="comment-copy">@alexis In Java  you must put each public class in its own file. It's a real restriction, not just a convention.</span>
<span class="comment-copy">ok, i stand corrected.</span>
