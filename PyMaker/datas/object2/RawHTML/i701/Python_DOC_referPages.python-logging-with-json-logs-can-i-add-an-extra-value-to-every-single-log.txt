<div class="post-text" itemprop="text">
<p>I'm using the python <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging</a> module, along with <a href="https://github.com/madzak/python-json-logger" rel="nofollow noreferrer">python-json-logger</a> and I would like to add a few keys:</p>
<pre><code>{
  "app_name": "myapp",
  "env": "prod"
}
</code></pre>
<p>To all of my logs automatically without doing the following.</p>
<pre class="lang-py prettyprint-override"><code>logger.info("Something happened", extra={"app_name": "myapp", "env": "prod"})
</code></pre>
<p>But for it to work as if I had. :)</p>
</div>
<div class="post-text" itemprop="text">
<p>I would just wrap the main logging class with the custom logic I needed like this:</p>
<pre><code>import logging

class CustomLogger(object):
    def __init__(self, logger_name, log_format, extra=None):
        logging.basicConfig(format=log_format)
        self.logger = logging.getLogger(logger_name)
        self.extra = extra

    def debug(self, msg, *args, **kwargs):
        self.logger.debug(msg, *args, extra=self.extra, **kwargs)

    def info(self, msg, *args, **kwargs):
        self.logger.info(msg, *args, extra=self.extra, **kwargs)

    def warning(self, msg, *args, **kwargs):
        self.logger.warning(msg, *args, extra=self.extra, **kwargs)

    def error(self, msg, *args, **kwargs):
        self.logger.error(msg, *args, extra=self.extra, **kwargs)
</code></pre>
<p>Then wherever you need a logger create it from that class:</p>
<pre><code>from custom_logging import CustomLogger

logger_name = 'my_logger'       
log_format = '%(asctime)-15s %(app_name)-8s %(env)-8s %(message)s'
extras = {"app_name": "myapp", "env": "prod"}

logger = CustomLogger(logger_name, log_format, extras)
logger.info('Testing it out')
</code></pre>
<p>Hope this helps!</p>
</div>
