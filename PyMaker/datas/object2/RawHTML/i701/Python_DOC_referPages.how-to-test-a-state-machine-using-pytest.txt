<div class="post-text" itemprop="text">
<p>I am new to testing, and I need to find a way to test a state machine I wrote, similar to this <a href="https://code.activestate.com/recipes/577308-simple-state-machine-implementation/" rel="nofollow noreferrer">https://code.activestate.com/recipes/577308-simple-state-machine-implementation/</a> using pytest.</p>
<p>The code takes a time series dictionary as input {timestamp: value}, then produces a new dictionary {timestamp: string}.</p>
<p>Here is an example of one of the functions that decide the state change:</p>
<pre><code>def state_t_high():
    global current_element, duration_timer, recovery_timer, output_series
    # print("T_HIGH")
    if current_element == number_of_elements:
        return state_done
    elif input_series[inputList[current_element]] &lt; THRESHOLD:
        current_element += 1
        return state_normal
    elif input_series[inputList[current_element]] &gt;= THRESHOLD and duration_timer &lt;= TRIGGER_DUR:
        duration_timer += 1
        current_element += 1
        return state_t_high
    elif input_series[inputList[current_element]] &gt;= THRESHOLD and duration_timer &gt; TRIGGER_DUR:
        duration_timer += 1
        output_series[inputList[current_element]] = 'too high'
        current_element += 1
        return state_p_high
</code></pre>
<p>As far as I can tell, the code is working fine, however I don't know how to actually test it properly. I haven't created any classes, the rest of the code is just downloading the input file and then uploading the result to a server.</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>Using global variables isn't good for testing. But, of course, you could always use <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">mock</a> and mock everything in the file. But it's an indicator that something not right with your code.</p>
<p>The problem of your function having too many side effects. It's always hard to test functions which not encapsulate data inside and change everything outside of their context.</p>
<p>I don't know the context of your app, but try to encapsulate global elements into a class. And try to follow TDD methodology. Start to write tests first defining interfaces. </p>
</div>
<span class="comment-copy">Your <code>global</code>s are the main problem. You need to encapsulate them in one way or another. E.g. as class members. I recommend to look at <a href="https://python-3-patterns-idioms-test.readthedocs.io/en/latest/StateMachine.html" rel="nofollow noreferrer">python-3-patterns-idioms-test.readthedocs.io/en/latest/â€¦</a></span>
