<div class="post-text" itemprop="text">
<p>We have created a pip wheel file for a package which has a collection of python and perl scripts. Since python packaging will only add the python files to the wheel file what is the best way to package the perl files as well.</p>
<p>This is my project structure</p>
<pre><code>.
|____myproject
| |____logging.ini
| |____utils.py
| |____myperlscript.pl
| |____config.py
| |____version.py
| |____scripta.py
| |____scriptb.py
| |____scriptc.py
| |______init__.py
|____test
| |____test_scripts.py
|______init__.py
|____MANIFEST.in
|____README.md
|____setup.py
|____.gitignore
|____Jenkinsfile
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are currently using <code>setuptools</code> in the <code>setup.py</code> for your project, and making use of <code>python setup.py bdist_wheel</code> as the method to generate the <code>.whl</code> file, add the following line to the <code>MANIFEST.in</code> file which is already present at the root of your project.</p>
<pre><code>recursive-include myproject *
</code></pre>
<p>Naturally, replace <code>myproject</code> for the actual top level directory that will include the target <code>.pl</code> scripts (or any other file).</p>
<p>As a demo, if your <code>setup.py</code> is written approximately like so:</p>
<pre><code>from setuptools import setup
from setuptools import find_packages

setup(
    name='myproject',
    version='0.0.0',
    description='demo package',
    long_description=open('README.md').read(),
    classifiers=[
        'Programming Language :: Python',
    ],
    packages=find_packages(),
    include_package_data=True,
    zip_safe=False,
)
</code></pre>
<p>Running <code>python setup.py bdist_wheel</code> will show output that looks like:</p>
<pre><code>...
adding 'myproject/__init__.py'
adding 'myproject/config.py'
adding 'myproject/logging.ini'
adding 'myproject/myperlscript.pl'
adding 'myproject/scripta.py'
adding 'myproject/utils.py'
adding 'myproject/version.py'
adding 'test/__init__.py'
...
</code></pre>
<p>The files are packaged inside the <code>.whl</code>:</p>
<pre><code>$ unzip -t dist/myproject-0.0.0-py3-none-any.whl 
Archive:  dist/myproject-0.0.0-py3-none-any.whl
    testing: myproject/__init__.py    OK
    testing: myproject/config.py      OK
    testing: myproject/logging.ini    OK
    testing: myproject/myperlscript.pl   OK
...
</code></pre>
<p>Installing the resulting <code>.whl</code> file in a new environment:</p>
<pre><code>$ pip install -U myproject-0.0.0-py3-none-any.whl 
Processing myproject-0.0.0-py3-none-any.whl
Installing collected packages: myproject
Successfully installed myproject-0.0.0
$ ls env/lib/python3.6/site-packages/myproject/
config.py    logging.ini      __pycache__  utils.py
__init__.py  myperlscript.pl  scripta.py   version.py
</code></pre>
<p>Also note that if the <code>MANIFEST.in</code> method is unwanted, include <code>package_data={'': ['*']},</code> argument for the <code>setup</code> call should also make it work with the recent versions of <code>setuptools</code>.</p>
<p>Further addendum: The <code>setuptools</code> package actually has a <a href="https://github.com/pypa/setuptools/blob/v40.8.0/MANIFEST.in" rel="nofollow noreferrer"><code>MANIFEST.in</code></a> that include this particular syntax, though restricted to specific filename extensions for the files they want to include.  This is clearly a supported option despite some guides/documentation that might suggest otherwise.  In fact, this is a feature <a href="https://docs.python.org/3/distutils/sourcedist.html#specifying-the-files-to-distribute" rel="nofollow noreferrer">provided by the core <code>distutils</code> module</a> that is shipped with Python by default.  Related questions:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/10924885/is-it-possible-to-include-subdirectories-using-dist-utils-setup-py-as-part-of">Is it possible to include subdirectories using dist utils (setup.py) as part of package data?</a></li>
<li><a href="https://stackoverflow.com/questions/7522250/how-to-include-package-data-with-setuptools-distribute">How to include package data with setuptools/distribute?</a></li>
</ul>
</div>
<span class="comment-copy">Either use <a href="https://stackoverflow.com/search?q=%5Bsetuptools%5D+package_data">package_data</a> or <a href="https://stackoverflow.com/search?q=%5Bsetuptools%5D+data+files">data files</a>.</span>
<span class="comment-copy"><a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/#manifest-in" rel="nofollow noreferrer">Note: MANIFEST.in does not affect binary distributions such as wheels.</a></span>
<span class="comment-copy">@phd the documentation is wrong, it does actually work, as I have projects that are packaged in this manner.</span>
<span class="comment-copy">@phd also if you read my updates to this answer, you may come across <a href="http://blog.codekills.net/2011/07/15/lies,-more-lies-and-python-packaging-documentation-on--package_data-/" rel="nofollow noreferrer">this</a> link (via <a href="https://stackoverflow.com/a/14159430/2904896">this answer</a>) explaining why your suggestion to use <code>package_data</code> doesn't actually work, and <code>data_files</code> take a lot more effort to use.</span>
<span class="comment-copy">Both links point to quite an outdated answers ("damn lies" in their own terms). These days the primary distribution format is wheels, and <code>package_data</code> works perfectly.</span>
<span class="comment-copy">As for <code>MANIFEST.in</code> — your update answer contains <code>include_package_data=True,</code> — that makes it work.</span>
