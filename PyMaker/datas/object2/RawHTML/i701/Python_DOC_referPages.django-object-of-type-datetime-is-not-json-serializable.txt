<div class="post-text" itemprop="text">
<p>I'm trying to save a date in my sessions. I always receive the error <code>Object of type 'datetime' is not JSON serializable</code>. I found this <a href="https://docs.djangoproject.com/en/2.1/topics/http/sessions/#using-sessions-out-of-views" rel="nofollow noreferrer">here</a> in the Django documentation: <code>stored as seconds since epoch since datetimes are not serializable in JSON.</code></p>
<p>How can I save my <code>expiry_date</code> as seconds instead of datetime?</p>
<pre><code>code = social_ticketing_form.cleaned_data['a']
expiry_date = timezone.now() + timezone.timedelta(days=settings.SOCIAL_TICKETING_ATTRIBUTION_WINDOW)
request.session[social_ticketing_cookie_name(request.event)] = {'code': code, 'expiry_date': expiry_date}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Either <a href="https://docs.djangoproject.com/en/stable/topics/http/sessions/#write-your-own-serializer" rel="nofollow noreferrer">write your own session serialiser</a> to allow you to serialise <code>datetime</code> objects directly, or store the <code>datetime</code> value in some other form.</p>
<p>If you want to save it as seconds, then use the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp" rel="nofollow noreferrer"><code>datetime.timestamp()</code> method</a>:</p>
<pre><code>request.session[social_ticketing_cookie_name(request.event)] = {
    'code': code, 
    'expiry_date': expiry_date.timestamp()
}
</code></pre>
<p>Your own <code>SESSION_SERIALIZER</code> class only needs to provide <code>loads</code> and <code>dumps</code> methods, directly analogous to <code>json.loads()</code> and <code>json.dumps()</code> (which is how the <a href="https://github.com/django/django/blob/a8b03bea180e0660c0e159f3e7cf6192b512925f/django/core/signing.py#L81-L90" rel="nofollow noreferrer">standard JSON serializer is implemented</a>).</p>
<p>If you want to encode <code>datetime</code> objects and be able to transparently turn those back into <code>datetime</code> objects again, I'd use a nested object format to flag such values as special:</p>
<pre><code>from datetime import datetime

class JSONDateTimeSerializer:
    @staticmethod
    def _default(ob):
        if isinstance(ob, datetime):
            return {'__datetime__': ob.isoformat()}
        raise TypeError(type(ob))

    @staticmethod
    def _object_hook(d):
        if '__datetime__' in d:
            return datetime.fromisoformat(d['__datetime__'])
        return d

    def dumps(self, obj):
        return json.dumps(
            obj, separators=(',', ':'), default=self._default
        ).encode('latin-1')

    def loads(self, data):
        return json.loads(
            data.decode('latin-1'), object_hook=self._object_hook
        )
</code></pre>
<p>and set <code>SESSION_SERIALIZER</code> to the full qualified name of the above module (<code>path.to.module.JSONDateTimeSerializer</code>).</p>
<p>The above uses the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat" rel="nofollow noreferrer"><code>datetime.fromisoformat()</code> method</a>, new in Python 3.7.</p>
</div>
<span class="comment-copy">you need to decide on a serialization method. You could transform it in unixtimestamp (number of seconds since EPOCH long/int)  or you could transform it in a string using <code>strftime</code> and afterwards use <code>strptime</code> to transform it back in datetime</span>
<span class="comment-copy"><code>expiry_date.timestamp()</code>?</span>
<span class="comment-copy">check <a href="https://stackoverflow.com/questions/19801727/convert-datetime-to-unix-timestamp-and-convert-it-back-in-python">this</a> for indications</span>
<span class="comment-copy">check <a href="https://stackoverflow.com/a/47034670/3702377">this post</a></span>
<span class="comment-copy">Dear Martijn, thanks a lot for the long answer. I try to go with the <code>JSONDateTimeSerializer</code>. I currently struggle with the code you wrote. I always receive <code>'EventDetail' object has no attribute '_default'</code>. I used <code>JSONDateTimeSerializer.dumps(self, expiry_date)</code> Do you have any idea what's going wrong?</span>
<span class="comment-copy">@JoeyCoder you need to register the class in your Django configuration, so it is used as the serialiser for sessions. Don’t use it directly, or if you must, then at least create an instance of the class: <code>JSONDateTimeSerializer().dumps(expiry_date)</code>.</span>
<span class="comment-copy">@JoeyCoder But really, don’t use it for manual serialisation. Just store <code>expirely_date.isoformat()</code> directly if you don’t want to set <code>SESSION_SERIALIZER</code>.</span>
<span class="comment-copy">Just struggled for the last hour until I realised I'm running on Python 3.6. That explains why it didn't work. At least I know what to do now! Thanks a lot, great help!</span>
