<div class="post-text" itemprop="text">
<p>In <em>Python 2.7</em>, I could get dictionary <em>keys</em>, <em>values</em>, or <em>items</em> as a list:</p>
<pre><code>&gt;&gt;&gt; newdict = {1:0, 2:0, 3:0}
&gt;&gt;&gt; newdict.keys()
[1, 2, 3]
</code></pre>
<p>Now, in <em>Python &gt;= 3.3</em>, I get something like this:</p>
<pre><code>&gt;&gt;&gt; newdict.keys()
dict_keys([1, 2, 3])
</code></pre>
<p>So, I have to do this to get a list:</p>
<pre><code>newlist = list()
for i in newdict.keys():
    newlist.append(i)
</code></pre>
<p>I'm wondering, is there a better way to return a list in <em>Python 3</em>? </p>
</div>
<div class="post-text" itemprop="text">
<p>Try <code>list(newdict.keys())</code>.</p>
<p>This will convert the <code>dict_keys</code> object to a list.</p>
<p>On the other hand, you should ask yourself whether or not it matters. The Pythonic way to code is to assume duck typing (<em>if it looks like a duck and it quacks like a duck, it's a duck</em>). The <code>dict_keys</code> object will act like a list for most purposes. For instance:</p>
<pre><code>for key in newdict.keys():
  print(key)
</code></pre>
<p>Obviously, insertion operators may not work, but that doesn't make much sense for a list of dictionary keys anyway.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Python &gt;= 3.5 alternative: unpack into a list literal</strong> <code>[*newdict]</code></p>
<p>New <a href="https://www.python.org/dev/peps/pep-0448/" rel="noreferrer">unpacking generalizations (PEP 448)</a> were introduced with Python 3.5 allowing you to now easily do:</p>
<pre><code>&gt;&gt;&gt; newdict = {1:0, 2:0, 3:0}
&gt;&gt;&gt; [*newdict]
[1, 2, 3]
</code></pre>
<p>Unpacking with <code>*</code> works with <em>any</em> object that is iterable and, since dictionaries return their keys when iterated through, you can easily create a list by using it within a list literal. </p>
<p>Adding <code>.keys()</code> i.e <code>[*newdict.keys()]</code> might help in making your intent a bit more explicit though it will cost you a function look-up and invocation. (which, in all honesty, isn't something you should <em>really</em> be worried about).</p>
<p><sub>
The <code>*iterable</code> syntax is similar to doing <code>list(iterable)</code> and its behaviour was initially documented in the <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="noreferrer">Calls section</a> of the Python Reference manual. With PEP 448 the restriction on where <code>*iterable</code> could appear was loosened allowing it to also be placed in list, set and tuple literals, the reference manual on <a href="https://docs.python.org/3/reference/expressions.html#expression-lists" rel="noreferrer">Expression lists</a> was also updated to state this.
</sub></p>
<hr/>
<p>Though equivalent to <code>list(newdict)</code> with the difference that it's faster (at least for small dictionaries) because no function call is actually performed:</p>
<pre><code>%timeit [*newdict]
1000000 loops, best of 3: 249 ns per loop

%timeit list(newdict)
1000000 loops, best of 3: 508 ns per loop

%timeit [k for k in newdict]
1000000 loops, best of 3: 574 ns per loop
</code></pre>
<p>with larger dictionaries the speed is pretty much the same (the overhead of iterating through a large collection trumps the small cost of a function call).</p>
<hr/>
<p>In a similar fashion, you can create tuples and sets of dictionary keys:</p>
<pre><code>&gt;&gt;&gt; *newdict,
(1, 2, 3)
&gt;&gt;&gt; {*newdict}
{1, 2, 3}
</code></pre>
<p>beware of the trailing comma in the tuple case!</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list(newdict)</code> works in both Python 2 and Python 3, providing a simple list of the keys in <code>newdict</code>. <code>keys()</code> isn't necessary. (:</p>
</div>
<div class="post-text" itemprop="text">
<p>A bit off on the "duck typing" definition -- <code>dict.keys()</code> returns an iterable object, not a list-like object. It will work anywhere an iterable will work -- not any place a list will. a list is also an iterable, but an iterable is NOT a list (or sequence...)</p>
<p>In real use-cases, the most common thing to do with the keys in a dict is to iterate through them, so this makes sense. And if you do need them as a list you can call <code>list()</code>. </p>
<p>Very similarly for <code>zip()</code> -- in the vast majority of cases, it is iterated through -- why create an entire new list of tuples just to iterate through it and then throw it away again?</p>
<p>This is part of a large trend in python to use more iterators (and generators), rather than copies of lists all over the place.</p>
<p><code>dict.keys()</code> should work with comprehensions, though -- check carefully for typos or something... it works fine for  me:</p>
<pre><code>&gt;&gt;&gt; d = dict(zip(['Sounder V Depth, F', 'Vessel Latitude, Degrees-Minutes'], [None, None]))
&gt;&gt;&gt; [key.split(", ") for key in d.keys()]
[['Sounder V Depth', 'F'], ['Vessel Latitude', 'Degrees-Minutes']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use a <strong>list comprehension</strong>:</p>
<pre><code>&gt;&gt;&gt; newdict = {1:0, 2:0, 3:0}
&gt;&gt;&gt; [k  for  k in  newdict.keys()]
[1, 2, 3]
</code></pre>
<p>Or, shorter,</p>
<pre><code>&gt;&gt;&gt; [k  for  k in  newdict]
[1, 2, 3]
</code></pre>
<p>Note: Order is not guaranteed on versions under 3.7 (ordering is still only an implementation detail with CPython 3.6). </p>
</div>
<div class="post-text" itemprop="text">
<p>Converting to a list without using the <code>keys</code> method makes it more readable:</p>
<pre><code>list(newdict)
</code></pre>
<p>and, when looping through dictionaries, there's no need for <code>keys()</code>:</p>
<pre><code>for key in newdict:
    print key
</code></pre>
<p>unless you are modifying it within the loop which would require a list of keys created beforehand:</p>
<pre><code>for key in list(newdict):
    del newdict[key]
</code></pre>
<hr/>
<p><em>On Python 2 there is a marginal performance gain using <a href="https://stackoverflow.com/a/10190228/175584"><code>keys()</code></a></em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you need to store the keys separately, here's a solution that requires less typing than every other solution presented thus far, using <a href="https://www.python.org/dev/peps/pep-3132/" rel="nofollow noreferrer">Extended Iterable Unpacking</a> (python3.x+). </p>
<pre><code>newdict = {1: 0, 2: 0, 3: 0}
*k, = newdict

k
# [1, 2, 3]
</code></pre>
<hr/>
<pre><code>            ╒═══════════════╤═════════════════════════════════════════╕
            │ k = list(d)   │   9 characters (excluding whitespace)   │
            ├───────────────┼─────────────────────────────────────────┤
            │ k = [*d]      │   6 characters                          │
            ├───────────────┼─────────────────────────────────────────┤
            │ *k, = d       │   5 characters                          │
            ╘═══════════════╧═════════════════════════════════════════╛
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Other than the ways mentioned on this page, you could use <code>itemgetter</code> from the operator module:</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; list(map(itemgetter(0), dd.items()))
[1, 2, 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also do a <code>tuple(dict)</code> or <code>set(dict)</code>:</p>
<pre><code>&gt;&gt;&gt; list(set(newdict))
[1, 2, 3]
&gt;&gt;&gt; list(tuple(newdict))
[1, 2, 3]
</code></pre>
</div>
<span class="comment-copy">If you're trying to sort a dictionary by values, try this oneliner: <code>sorted(newdict.items(),key=lambda x: x[1])</code>. <code>newdict.items()</code> returns the key-value pairs as tuples (just like you're doing with the zip above). <code>sorted</code> is the built-in sort function and it permits a <code>key</code> parameter which should be a function that transforms each list element into the value which should be used to sort.</span>
<span class="comment-copy">Interesting thread safety issue regarding this topic is here: <a href="http://blog.labix.org/2008/06/27/watch-out-for-listdictkeys-in-python-3" rel="nofollow noreferrer">blog.labix.org/2008/06/27/…</a></span>
<span class="comment-copy"><i>tldr;</i> <code>[*the_dict]</code> is succinct and pythonic, even though I argue that <code>[*the_dict.keys()]</code> is more readable. You are welcome.</span>
<span class="comment-copy">This simple solution works in both Python 2.x and 3.x: sorted( newdict.keys() )</span>
<span class="comment-copy">If you need to store the keys in a new variable and hate typing, here's <a href="https://stackoverflow.com/a/55448660/4909087">a concise alternative using extended iterable unpacking</a>.</span>
<span class="comment-copy">newdict.keys() does not support indexing</span>
<span class="comment-copy"><code>list(newdict)</code> also works (at least in python 3.4). Is there any reason to use the <code>.keys()</code> method?</span>
<span class="comment-copy">Note: in the debugger <code>pdb&gt; list(newdict.keys()) </code> fails because it clashes with pdb's command of the same name. Use <code>pdb&gt; !list(newdict.keys())</code> to escape pdb commands.</span>
<span class="comment-copy">random.choice(newdict.keys()) does not also work!</span>
<span class="comment-copy">@naught101 Yes, <code>.keys()</code> is way more clear on what goes on.</span>
<span class="comment-copy">great explanation,but please can you refer any link which describes this "*newdict" type of syntax,I mean how and why this returns the keys from dictionary just for understanding.Thanx</span>
<span class="comment-copy">@MYounas That syntax has been available for quite some time, even in Python 2. In function calls you can do <code>def foo(*args): print(args)</code> followed by <code>foo(*{1:0, 2:0})</code> with the result <code>(1, 2)</code> being printed. This behavior is specified in the <a href="https://docs.python.org/3/reference/expressions.html#calls" rel="nofollow noreferrer">Calls</a> section of the reference manual. Python 3.5 with PEP 448 just loosened the restrictions on where these can appear allowing <code>[*{1:0, 2:0}]</code> to now be used. Either way, I'll edit my answer and include these.</span>
<span class="comment-copy"><code>*newdict</code> - this is definitely the answer for code golfers ;P. Also: <i>which, in all honesty, isn't something you should really be worried about</i> - and if you are, <b>don't use python</b>.</span>
<span class="comment-copy">It does, but I can't help but think that the intent with d.keys() is clearer than with list(d). there are lots of ways that a dictionary might be converted to a list, but the information-losing conversion performed by list() is not the obvious one, imo.</span>
<span class="comment-copy">IMHO the best answer. Writing <code>for i in newdict: print(i)</code> seem preferable over <code>for i in newdict.keys(): print(i)</code>. <code>newdict.items()</code> is for iterating over key-value pairs.</span>
<span class="comment-copy"><code>[k for  k in  newdict]</code>, is shorter.</span>
<span class="comment-copy">The only minor caveat I'd point out is that <code>k</code> is always a list here. If a user wants a tuple or set from the keys they'll need to fall back to the other options.</span>
<span class="comment-copy">A more noteworthy note is the fact that, as a statement, <code>*k, = d</code> has limitations on where it can appear (but see, and maybe update this answer for, <a href="https://www.python.org/dev/peps/pep-0572/" rel="nofollow noreferrer">PEP 572</a> -- extended unpacking is not supported for assignment expressions atm <i>but</i> it might be someday!)</span>
<span class="comment-copy">Using <code>dd.keys()</code> is a lot more straightforward than generating a view of the items. This is an answer for the sake of an answer...</span>
<span class="comment-copy">Why would you use <code>list</code> + something else when you could directly use <code>list</code>?</span>
