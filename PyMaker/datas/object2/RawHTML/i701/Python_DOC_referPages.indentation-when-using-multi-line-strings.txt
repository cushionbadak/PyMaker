<div class="post-text" itemprop="text">
<p>I sometimes need to use multi-line strings, but in a nested block. This works, but the readability is really poor:</p>
<pre><code>CONDITION1 = CONDITION2 = CONDITION3 = True

if CONDITION1:
    if CONDITION2:
        s = """jkljkj
dfkjslfds
sqjdlqkj"""
    elif CONDITION3:
        s = """azeazea
azeoiuaez
azeytzae
azetzae"""
</code></pre>
<p>Using:</p>
<pre><code>if CONDITION1:
    if CONDITION2:
        s = """jkljkj
               dfkjslfds
               sqjdlqkj"""
</code></pre>
<p>(as suggested in <a href="https://stackoverflow.com/a/10660443">Pythonic way to create a long multi-line string</a>) is not an option because the string <code>s</code> would be:</p>
<pre><code>jkljkj
               dfkjslfds
               sqjdlqkj
</code></pre>
<p>with unwanted left spaces.</p>
<p><strong>Question: how to use multi-line strings in nested blocks with a good readability?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Wrap the string in <a href="https://docs.python.org/3/library/inspect.html#inspect.cleandoc" rel="nofollow noreferrer">a call to <code>inspect.cleandoc</code></a> and it will clean it up the same way docstrings get cleaned up (removing leading and trailing whitespace, and any level of common indentation).</p>
<pre><code>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; s = """jkljkj
...        dfkjslfds
...        sqjdlqkj"""
...
&gt;&gt;&gt; print(s)
jkljkj
       dfkjslfds
       sqjdlqkj
&gt;&gt;&gt; s = inspect.cleandoc(s)
&gt;&gt;&gt; print(s)
jkljkj
dfkjslfds
sqjdlqkj
</code></pre>
<p><a href="https://docs.python.org/3/library/textwrap.html#textwrap.dedent" rel="nofollow noreferrer"><code>textwrap.dedent</code></a> is also an option, but it's uglier, as it requires you to put no text on the first line, and explicitly use a line continuation character to ensure <em>every</em> line (not just the second and onwards) has identical leading indentation:</p>
<pre><code>&gt;&gt;&gt; print(textwrap.dedent('''\
...                       The^backslash is a pain
...                       so I don't recommend this approach
...                       '''))
The^backslash is a pain
so I don't recommend this approach
</code></pre>
<p>Note that while code blocks on SO don't show it properly, <code>dedent</code> left the empty final line (from putting the closing <code>'''</code> on a line by itself), where <code>cleandoc</code> would have removed it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried using '\'. For example:</p>
<pre><code>if CONDITION1:

   if CONDITION2:

       s = "jkljkj "\
           "dfkjslfds "\
           "sqjdlqkj"
</code></pre>
</div>
<span class="comment-copy">Thank you very much! For completeness, could you add the same example with <code>dedent</code>? (I can also edit myself if you're ok)</span>
<span class="comment-copy">@Basj: Done. I think it's usually the inferior solution, so I didn't want to emphasize it, but it's occasionally useful.</span>
<span class="comment-copy">Thanks! I accepted your answer. I think <code>dedent</code> might be useful when we actually want to keep a particular indentation but just remove the left spaces. Example: <code>print(textwrap.dedent(""" some indented python code here """))</code>.</span>
<span class="comment-copy">Thank you, but not an option either, because my multiline string is very long. I don't want to have to manually add `" ... "` around each line.</span>
