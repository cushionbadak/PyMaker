<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3061/calling-a-function-of-a-module-by-using-its-name-a-string">Calling a function of a module by using its name (a string)</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p>I am making a python script which hashes a string using an algorithm that the user specifies in input using hashlib. After I hash the string, I want to do the same thing to it, no matter what hash algorithm the user chose. Because of that I wanted to make a function for it, not to repeat code but wouldn't know how to change the built-in hash function based on the input. My code right now looks like this:</p>
<pre><code>current_algorithm = input('Hash algorithm: ')    

if current_algorithm == 'md5':
    hashed = hashlib.md5(word).hexdigest()
    # Execute the same code here
elif current_algorithm == 'sha256':
    hashed = hashlib.sha256(word).hexdigest()
    # Execute the same code here 
elif current_algorithm == 'sha512':
    hashed = hashlib.sha512(word).hexdigest()
    # Execute the same code here
</code></pre>
<p>The function <code>hashlib.algorithm(word).hexdigest()</code> has to change depending on which algorithm the user chose. For example, if the user chose sha512, the code would look like this: <code>hashlib.sha512(word).hexdigest()</code>, instead, if the user chose md5, the code would look like this: <code>hashlib.md5(word).hexdigest()</code> and so on. However, the code under these lines is exactly the same and right now I am repeating it 3 times, and possibly more if I will add more algorithms in the future. Therefore how do I make a function that changes algorithm based on user input, so that I do not have to repeat so much code? I was thinking to take advantage of arguments, but wouldn't know how to work around it. This is kind of what I had in mind, but would not work since you can't change built-in methods:</p>
<pre><code>def func(algorithm):
    hashlib.algorithm(word).hexdigest()
    # Execute the same code here

if current_algorithm == 'md5':
    func(current_algorithm)
elif current_algorithm == 'sha256':
    func(current_algorithm)
elif current_algorithm == 'sha512':
    func(current_algorithm)
</code></pre>
<p>Then, under every if statement I would call the function with and passing it the user input (containing the hash algorithm) as an argument.</p>
<p>I hope the question is clear and would appreciate any help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer">getattr</a>:</p>
<pre><code>import hashlib

current_algorithm = input('Hash algorithm: ')    
try:
    hashed = getattr(hashlib, current_algorithm)(word).hexdigest()
except AttributeError:
    print('Invalid algorithm choice')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also simply extract the common code from the <code>if/else</code> block like this:</p>
<pre><code>current_algorithm = input('Hash algorithm: ')    

if current_algorithm == 'md5':
    hashed = hashlib.md5(word).hexdigest()
elif current_algorithm == 'sha256':
    hashed = hashlib.sha256(word).hexdigest()
elif current_algorithm == 'sha512':
    hashed = hashlib.sha512(word).hexdigest()

# Execute the same code here (using hashed variable)
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/3061/calling-a-function-of-a-module-by-using-its-name-a-string">Calling a function of a module by using its name (a string)</a> (I'm guessing this would be useful for you since you want to call a function name which has the algo in it's name, there for you should be able to stitch something together like `hashlib.'+userinput)</span>
<span class="comment-copy">You can pass a function as a value in a dictionary or Pandas data frame, maybe this could help you, test = {"key": func}</span>
<span class="comment-copy">@Torxed You are right, that post would have helped me a lot. I am sorry I did not see it. Thanks anyway!</span>
<span class="comment-copy">This one works perfectly! Thank you very much for your help!</span>
