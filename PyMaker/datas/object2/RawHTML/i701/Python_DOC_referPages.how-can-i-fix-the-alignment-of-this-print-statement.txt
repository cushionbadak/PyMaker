<div class="post-text" itemprop="text">
<p>I'm trying to create a table that loops through various wind speed values in order to compute a table that looks like this:<a href="https://i.stack.imgur.com/lRlZg.png" rel="nofollow noreferrer">Ideal Run</a>. However once I run the follwing code:</p>
<pre><code>import math
y=' '
print("Big Blue Wind Chill") 
print(y) 
airTemp=float(input("Enter air temperature (F): ")) 
startWS=eval(input("Enter starting wind speed (mph): ")) 
print(y)
print("Temperature = " + str(airTemp) + " degrees F") 
print(y) 
entries = x = [[] for i in range(91-startWS)]
def Main(): 
    i=startWS
    for i in range(startWS,91):
        entries[i-startWS].append(i)
        i=i+1 
Main()    
def oldForumula():
    i=startWS
    for i in range(startWS,91):
            old=round(0.081*(3.71*math.sqrt(i)+5.81-0.25*i)*(airTemp-91.4)+91.4)
            entries[i-startWS].append(old)
            i=i+1 
oldForumula()
def newForumula():
    i=startWS
    for i in range(startWS,91):
            new=round(35.74+0.6215*airTemp-35.75*(i**0.16)+0.4275*airTemp*(i**0.16))
            #print(new) 
            entries[i-startWS].append(new)
            i=i+1 
newForumula()      
def difference():
    i=startWS
    for i in range(startWS,91):
            diff=round((0.081*(3.71*math.sqrt(i)+5.81-0.25*i)*(airTemp-91.4)+91.4)-(35.74+0.6215*airTemp-35.75*(i**0.16)+0.4275*airTemp*(i**0.16)),1)
            #print(diff) 
            entries[i-startWS].append(diff)
            i=i+1 
difference()

print('Wind Speed', 'Old Formula', 'New Formula', 'Difference', sep='\t')
print(y)
for i in range(len(entries)):
    for j in range(4):
        print(entries[i][j], end='\t\t')
    print()
</code></pre>
<p>I end up with the tables being created, but the alignment on the names of the columns and the actual numerical values is completely off. Here's what it looks like once I run the following code:<a href="https://i.stack.imgur.com/IfZpV.png" rel="nofollow noreferrer">Actual run</a>. If you could help me fix the alignment, I'd be greatly appreciative. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use String formatting using the<a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">Format Specification Mini-Language</a>.</p>
<p>For instance:</p>
<pre><code>for i in range(len(entries)):
    print("{0:&gt;6.2f}\t{1:&gt;6.2f}\t{2:&gt;6.2f}\t{3:&gt;6.2f}".format(*entries[i]))
</code></pre>
<p>You get something like that:</p>
<pre><code>Wind Speed  Old Formula New Formula Difference

  5.00    9.00    4.00    5.10
  6.00    5.00    2.00    2.80
  7.00    2.00    1.00    0.80
  8.00   -1.00    0.00   -1.10
  9.00   -3.00    0.00   -2.80
 10.00   -5.00   -1.00   -4.30
 11.00   -7.00   -2.00   -5.70
</code></pre>
<p>Or, using a more pythonic loop:</p>
<pre><code>for entry in entries:
    print("{0:&gt;6.2f}\t{1:&gt;6.2f}\t{2:&gt;6.2f}\t{3:&gt;6.2f}".format(*entry))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just pad with spaces using str.format().</p>
<pre><code>def draw_padded_string(s, width, align="left"):
    if align == "left":
        return "{s: &lt;{width}}".format(s=s, width=width)
    elif align == "center":
        return s.center(width, ' ')
    elif align == "right":
        return "{s: &gt;{width}}".format(s=s, width=width)
</code></pre>
<p>In this case, s is the string and width is the entire width of your column.</p>
<p>You would define this somewhere in your code, probably under your imports just to get it out of your way, but so long as it is defined before you start calling your print statements.  This would change your print block a little, too:</p>
<pre><code>width = 13

headers = ["Wind Speed", "Old Formula", "New Formula", "Difference"]
print_headers = []
for header in headers:
    print_headers.append(draw_padded_string(header, width))
print("".join(print_headers))
print()

for row in entries:
    print_row = []
    for data in row:
        print_row.append(draw_padded_string(data, width))
    print("".join(print_row))
</code></pre>
<p>What I did:</p>
<ul>
<li>set width at 13 (your widest column right now is 11)</li>
<li>created lists of each row to be printed</li>
<li>applied our function to each item on the list</li>
<li>print the list as a single row using <code>"".join(list)</code></li>
<li>changed from using your own integer tracking using <code>i</code> and <code>j</code> and instead let python iterate over your rows and columns for you</li>
</ul>
<p>What you might want to do differently:</p>
<ul>
<li>Use list comprehension to generate your lists (instead of <code>for item in list</code></li>
<li>Adjust your column width based on the actual maximum list as below</li>
</ul>
<pre><code>column_length = max([len(word) for word in list_of_words])
</code></pre>
</div>
<span class="comment-copy">did you try pprint? <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer">link</a></span>
<span class="comment-copy"><a href="https://pypi.org/project/tabulate/" rel="nofollow noreferrer">pypi.org/project/tabulate</a></span>
<span class="comment-copy">I haven't tried either of those methods. But I think I could  add one extra tab or calculate necessary amount of space after each entry to make them all aligned. I'm just not sure how to do that.</span>
<span class="comment-copy">They look aligned to me. What inputs did you use?</span>
<span class="comment-copy">The inputs I used woud be the airTemp and startWS variable.</span>
<span class="comment-copy">Thank you so much for your help!</span>
<span class="comment-copy">hmmm. Interesting. Hypothetically, where would I put that first function you wrote?</span>
<span class="comment-copy">Edited to show how you would use it in context of your script.  I personally prefer this over tabs, but the other answer could work, too.</span>
