<div class="post-text" itemprop="text">
<p>I would like to put my dictionary to csv file. I would like to have key and value in separate columns. But now I am ending with two rows: one with all keys and one with values</p>
<pre><code>dic={'Previous Close': '150.42', 'Open': '165.60', 'Bid': '168.81 x 900', 'Ask': '168.90 x 800', "Day's Range": '57,881,627', '52 Week Range': '25,593,803', 'Volume': '482.308B', 'Avg. Volume': '0.65', 'Market Cap': '25.29', 'Beta (3Y Monthly)': '6.64', 'PE Ratio (TTM)': 'N/A', 'EPS (TTM)': '184.67', 'Earnings Date': '339.89', 'Forward Dividend &amp; Yield': '308.42', 'Ex-Dividend Date': '1,110.19', '1y Target Est': '1,717.32'}

df=pd.DataFrame([(k,v) for k,v in dic.items()],columns=["key","value"] )
df.to_csv("test2.csv",sep=",")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have <code>,</code> as thousands-seperator in your numbers - with <code>,</code> as csv-seperator this will make it difficult to load it again - I removed them.</p>
<p>No-pandas-solution:</p>
<pre><code>dic={'Previous Close': '150.42', 'Open': '165.60', 'Bid': '168.81 x 900', 
     'Ask': '168.90 x 800', "Day's Range": '57,881,627', '52 Week Range': '25,593,803', 
     'Volume':'482.308B', 'Avg. Volume': '0.65', 'Market Cap': '25.29', 
     'Beta (3Y Monthly)': '6.64', 'PE Ratio (TTM)': 'N/A', 'EPS (TTM)': '184.67', 
     'Earnings Date': '339.89', 'Forward Dividend &amp; Yield': '308.42', 
     'Ex-Dividend Date': '1,110.19', '1y Target Est': '1,717.32'}


with open ("t.csv","w") as f:
    f.write("key,value\n")
    for k,v in dic.items():
        f.write(f"{k},{v.replace(',','')}\n")

print(open("t.csv").read())
</code></pre>
<p>Output (removed , from values to allow reloading easier):</p>
<pre><code>key,value
Previous Close,150.42
Open,165.60
Bid,168.81 x 900
Ask,168.90 x 800
Day's Range,57881627
52 Week Range,25593803
Volume,482.308B
Avg. Volume,0.65
Market Cap,25.29
Beta (3Y Monthly),6.64
PE Ratio (TTM),N/A
EPS (TTM),184.67
Earnings Date,339.89
Forward Dividend &amp; Yield,308.42
Ex-Dividend Date,1110.19
1y Target Est,1717.32
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this is what you are looking for...</p>
<pre><code>dic={'Previous Close': '150.42', 'Open': '165.60', 'Bid': '168.81 x 900', 'Ask': '168.90 x 800', "Day's Range": '57,881,627', '52 Week Range': '25,593,803', 'Volume': '482.308B', 'Avg. Volume': '0.65', 'Market Cap': '25.29', 'Beta (3Y Monthly)': '6.64', 'PE Ratio (TTM)': 'N/A', 'EPS (TTM)': '184.67', 'Earnings Date': '339.89', 'Forward Dividend &amp; Yield': '308.42', 'Ex-Dividend Date': '1,110.19', '1y Target Est': '1,717.32'}

df=pd.DataFrame([[k,v] for k,v in dic.items()],columns=["key","value"] )
df.to_csv("test2.csv",sep=",")
</code></pre>
<p>Here is the output that I get </p>
<pre><code>key,value
0,Previous Close,150.42
1,Open,165.60
2,Bid,168.81 x 900
3,Ask,168.90 x 800
4,Day's Range,"57,881,627"
5,52 Week Range,"25,593,803"
6,Volume,482.308B
7,Avg. Volume,0.65
8,Market Cap,25.29
9,Beta (3Y Monthly),6.64
10,PE Ratio (TTM),N/A
11,EPS (TTM),184.67
12,Earnings Date,339.89
13,Forward Dividend &amp; Yield,308.42
14,Ex-Dividend Date,"1,110.19"
15,1y Target Est,"1,717.32"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you use the <a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow noreferrer">module csv</a> you can specify a quoting-character and quote all fields:</p>
<pre><code>dic={'Previous Close': '150.42', 'Open': '165.60', 'Bid': '168.81 x 900', 
     'Ask': '168.90 x 800', "Day's Range": '57,881,627', '52 Week Range': '25,593,803', 
     'Volume':'482.308B', 'Avg. Volume': '0.65', 'Market Cap': '25.29', 
     'Beta (3Y Monthly)': '6.64', 'PE Ratio (TTM)': 'N/A', 'EPS (TTM)': '184.67', 
     'Earnings Date': '339.89', 'Forward Dividend &amp; Yield': '308.42', 
     'Ex-Dividend Date': '1,110.19', '1y Target Est': '1,717.32'}

import csv
with open ("t.csv", "w", newline="") as f: 

    # quote all and use tab as quotechar - makes it easier when using excel
    w = csv.writer(f, delimiter="\t", quotechar='"', quoting=csv.QUOTE_ALL)
    w.writerow(["key","value"])
    w.writerows( dic.items() )

print(open("t.csv").read())
</code></pre>
<p>Output (tabstops look like differently spaced spaces here):</p>
<pre><code>"key"   "value"
"Previous Close"    "150.42"
"Open"  "165.60"
"Bid"   "168.81 x 900"
"Ask"   "168.90 x 800"
"Day's Range"   "57,881,627"
"52 Week Range" "25,593,803"
"Volume"    "482.308B"
"Avg. Volume"   "0.65"
"Market Cap"    "25.29"
"Beta (3Y Monthly)" "6.64"
"PE Ratio (TTM)"    "N/A"
"EPS (TTM)" "184.67"
"Earnings Date" "339.89"
"Forward Dividend &amp; Yield"  "308.42"
"Ex-Dividend Date"  "1,110.19"
"1y Target Est" "1,717.32"
</code></pre>
</div>
<span class="comment-copy">Can you show a sample of the expected output?</span>
<span class="comment-copy">you have <code>,</code> as thousands-seperator - with <code>,</code> as csv-seperator this will make it difficult to load it again</span>
<span class="comment-copy">Thank you for reply, but i still get key and values in one cell. I want to have keys and values in separate cells.</span>
<span class="comment-copy">What do you mean with "1 cell" ? Are you using excel?</span>
<span class="comment-copy">When opening the file with excel, tick the checkbox for <code>,</code> as dividercharacter ... or use tabs <code>'\t'</code> when writing: <code>f.write("key\tvalue\n")</code> and <code>f.write(f"{k}\t{v.replace(',','')}\n")</code> .. thats not a "writing problem" - it is a reader problem</span>
