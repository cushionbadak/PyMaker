<div class="post-text" itemprop="text">
<p>In TypeScript, you would do something like</p>
<pre class="lang-ts prettyprint-override"><code>async function getString(word: string): Promise&lt;string&gt; {
   return word;
}
</code></pre>
<p>How can I do the same in Python? I tried the following:</p>
<pre><code>async def get_string(word: str) -&gt; Coroutine[str]:
    return word
</code></pre>
<p>And got this traceback:</p>
<pre><code>TypeError: Too few parameters for typing.Coroutine; actual 1, expected 3
</code></pre>
<p>So <code>Coroutine</code> expects 3 types. But why? And what should they be in this case?</p>
<p>This is also specified in <a href="https://docs.python.org/3/library/typing.html#typing.Coroutine" rel="nofollow noreferrer">the docs</a>, but I still don't understand</p>
</div>
<div class="post-text" itemprop="text">
<p>The example <a href="https://docs.python.org/3/library/typing.html#typing.Coroutine" rel="nofollow noreferrer">in the docs</a> shows what the three types are: </p>
<blockquote>
<pre><code>from typing import List, Coroutine
c = None # type: Coroutine[List[str], str, int]
...
x = c.send('hi') # type: List[str]
async def bar() -&gt; None:
    x = await c # type: int
</code></pre>
</blockquote>
<ol>
<li>what you'd get back if you sent a value; </li>
<li>what value you can send; and </li>
<li>what you'd get it you awaited it. </li>
</ol>
<p>It also links to the <a href="https://docs.python.org/3/library/typing.html#typing.Generator" rel="nofollow noreferrer">Generator definition</a> with more examples, and a slightly clearer definition:</p>
<blockquote>
<pre><code>Generator[YieldType, SendType, ReturnType]
</code></pre>
</blockquote>
<p>In your case I'd guess <code>[None, None, str]</code>, as you only care about the awaitable value.</p>
</div>
