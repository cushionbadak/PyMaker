<div class="post-text" itemprop="text">
<p>With a generator function, this is how <code>itertools.count</code> can be implemented (from <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">documentation</a>):</p>
<pre><code>def count(start=0, step=1):
    # count(10) --&gt; 10 11 12 13 14 ...
    # count(2.5, 0.5) -&gt; 2.5 3.0 3.5 ...
    n = start
    while True:
        yield n
        n += step
</code></pre>
<p>I am trying to find how a similar iterator could be implemented without a generator function.</p>
<pre><code>class Count:
    def __init__(self, start=0, step=1):
        self.c = start
        self.step = step

    def __iter__(self):
        return self

    def __next__(self):
        n = self.c
        self.c += self.step
        return n
</code></pre>
<p>Is this the implementation?</p>
<p>For sure, it does not make any practical sense, the point is just to get an idea of how it is achieved with generators.</p>
</div>
<div class="post-text" itemprop="text">
<p>One of the best practices is to write a small unit test. You can use the <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">unittest</a> framework for that.</p>
<p>Here is an example with several tests which use your class in a loop and check the values of your iterator:</p>
<pre><code>import unittest
import random


class TestCount(unittest.TestCase):
    loops = 20

    def test_default(self):
        c = Count()
        for i in range(self.loops):
            self.assertEqual(i, next(c))

    def test_start(self):
        start = random.randint(-10, 10)
        c = Count(start=start)
        for i in range(start, start + self.loops):
            self.assertEqual(i, next(c))

    def test_step_pos(self):
        step = random.randint(1, 5)
        c = Count(step=step)
        for i in range(0, self.loops, step):
            self.assertEqual(i, next(c))

    def test_step_neg(self):
        step = random.randint(-5, -1)
        c = Count(step=step)
        for i in range(0, -self.loops, step):
            self.assertEqual(i, next(c))
</code></pre>
</div>
<span class="comment-copy">Looks ok to me.</span>
