<div class="post-text" itemprop="text">
<p>My company is using a database and I am writing a script that interacts with that database. There is already an script for putting the query on database and based on the query that script will return results from database.</p>
<p>I am working on unix environment and I am using that script in my script for getting some data from database and I am redirecting the result from the query to a file. Now when I try to read this file then I am getting an error saying-</p>
<pre><code>UnicodeEncodeError: 'ascii' codec can't encode character '\u2013' in position 9741: ordinal not in range(128)
</code></pre>
<p>I know that python is not able to read file because of the encoding of the file. The encoding of the file is not ascii that's why the error is coming. I tried checking the encoding of the file and tried reading the file with its own encoding.</p>
<p>The code that I am using is-</p>
<pre><code> os.system("Query.pl \"select title from bug where (ste='KGF-A' AND ( status = 'Not_Approved')) \"&gt;patchlet.txt")
 encoding_dict3={}
 encoding_dict3=chardet.detect(open("patchlet.txt", "rb").read())
 print(encoding_dict3)
# Open the patchlet.txt file for storing the last part of titles for latest ACF in a list
 with codecs.open("patchlet.txt",encoding='{}'.format(encoding_dict3['encoding'])) as csvFile
readCSV = csv.reader(csvFile,delimiter=":")
    for row in readCSV:
        if len(row)!=0:
            if len(row) &gt; 1:
                j=len(row)-1
                patchlets_in_latest.append(row[j])
            elif len(row) ==1:
                patchlets_in_latest.append(row[0])               
patchlets_in_latest_list=[]
# calling the strip_list_noempty function for removing newline and whitespace characters
patchlets_in_latest_list=strip_list_noempty(patchlets_in_latest)
# coverting list of titles in set to remove any duplicate entry if present
patchlets_in_latest_set= set(patchlets_in_latest_list)
# Finding duplicate entries in  list
duplicates_in_latest=[k for k,v in Counter(patchlets_in_latest_list).items() if v&gt;1]
# Printing imp info for logs
    print("list of titles of patchlets in latest list are : ")
for i in patchlets_in_latest_list:
   **print(str(i))**
print("No of patchlets in latest list are : {}".format(str(len(patchlets_in_latest_list))))
</code></pre>
<p>Where Query.pl is the perl script that is written to bring in the result of query from database.The encoding that I am getting for "patchlet.txt" (the file used for storing result from HSD) is:</p>
<pre><code>{'encoding': 'Windows-1252', 'confidence': 0.73, 'language': ''}
</code></pre>
<p>Even when I have provided the same encoding for reading the file, then also I am getting the error. </p>
<p>Please help me in resolving this error. </p>
<p><strong>EDIT:</strong>
I am using python3.6</p>
<p><strong>EDIT2:</strong></p>
<p>While outputting the result I am getting the error and there is one line in the file which is having some unknown character. The line looks like:</p>
<blockquote>
<p>Some failure because of which vtrace cannot be used along with some trace.</p>
</blockquote>
<p>I am using gvim and in gvim the "vtrace" looks like "~Vvtrace" . Then I checked on database manually for this character and the character is "–" which is according to my keyboard is neither hyphen nor underscore.These kinds of characters are creating the problem.</p>
<p>Also I am working on linux environment.</p>
<p><strong>EDIT 3:</strong>
I have added more code that can help in tracing the error. Also I have highlighted a "print" statement <code>(print(str(i)))</code> where I am getting the error. </p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Problem</strong></p>
<p>Based on the information in the question, the program is processing non-ASCII input data, but is unable to output non-ASCII data.</p>
<p>Specifically, this code:</p>
<pre><code>for i in patchlets_in_latest_list:
   print(str(i))
</code></pre>
<p>Results in this exception:</p>
<blockquote>
<p>UnicodeEncodeError: 'ascii' codec can't encode character '\u2013'</p>
</blockquote>
<p>This behaviour was common in Python2, where calling <code>str</code> on a <code>unicode</code> object would cause Python to try to encode the object as ASCII, resulting in a <code>UnicodeEncodeError</code> if the object contained non-ASCII characters.</p>
<p>In Python3, calling <code>str</code> on a <code>str</code> instance doesn't trigger any encoding.  However calling the <code>print</code> function on a <code>str</code> will encode the <code>str</code> to <code>sys.stdout.encoding</code>.  <code>sys.stdout.encoding</code> defaults to that returned by <a href="https://docs.python.org/3/library/locale.html#locale.getpreferredencoding" rel="nofollow noreferrer">locale.getpreferredencoding</a>.  This will generally be your linux user's <code>LANG</code> environment variable.</p>
<p><strong>Solution</strong></p>
<p>If we assume that your program is not overriding normal encoding behaviour, the problem should be fixed by ensuring that the code is being executed by a Python3 interpreter in a UTF-8 locale. </p>
<ul>
<li>be <em>100%</em> certain that the code is being executed by a Python3 interpreter - print <code>sys.version_info</code> from <em>within the program</em>.</li>
<li>try setting the <a href="https://docs.python.org/3/using/cmdline.html?highlight=pythonioencoding#envvar-PYTHONIOENCODING" rel="nofollow noreferrer">PYTHONIOENCODING</a> environment variable when running your script: <code>PYTHONIOENCODING=UTF-8 python3 myscript.py</code></li>
<li>check your locale using the <code>locale</code> command in the terminal (or <code>echo $LANG</code>).  If it doesn't end in <code>UTF-8</code>, consider changing it.  Consult your system administrators if you are on a corporate machine.</li>
<li>if your code runs in a cron job, bear in mind that cron jobs often run with the 'C' or 'POSIX' locale - which could be using ASCII encoding - unless a locale is explicitly set.  Likewise if the script is run under a different user, check their locale settings.</li>
</ul>
<p><strong>Workaround</strong></p>
<p>If changing the environment is not feasible, you can workaround the problem in Python by encoding to ASCII with an error handler, then decoding back to <code>str</code>.</p>
<p>There are four useful error handlers in your particular situation, their effects are demonstrated with this code:</p>
<pre><code>&gt;&gt;&gt; s = 'Hello \u2013 World'
&gt;&gt;&gt; s
'Hello – World'
&gt;&gt;&gt; handlers = ['ignore', 'replace', 'xmlcharrefreplace', 'namereplace']
&gt;&gt;&gt; print(str(s))
Hello – World
&gt;&gt;&gt; for h in handlers:
...     print(f'Handler: {h}:', s.encode('ascii', errors=h).decode('ascii'))
... 
Handler: ignore: Hello  World
Handler: replace: Hello ? World
Handler: xmlcharrefreplace: Hello &amp;#8211; World
Handler: namereplace: Hello \N{EN DASH} World
</code></pre>
<p>The <em>ignore</em> and <em>replace</em> handlers lose information - you can't tell what character has been replaced with an space or question mark.</p>
<p>The <em>xmlcharrefreplace</em> and <em>namereplace</em> handlers do not lose information, but the replacement sequences may make the text less readable to humans.</p>
<p>It's up to you to decide which tradeoff is acceptable for the consumers of your program's output.</p>
<p>If you decided to use the <em>replace</em> handler, you would change your code like this:</p>
<pre><code>for i in patchlets_in_latest_list:
    replaced = i.encode('ascii', errors='replace').decode('ascii')
    print(replaced)
</code></pre>
<p>wherever you are printing data that might contain non-ASCII characters. </p>
</div>
<span class="comment-copy"><code>encoding='windows-1252'</code> (note the lower case'w') or <code>encoding='cp1252'</code> ought to work - see <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow noreferrer">codec names and aliases</a></span>
<span class="comment-copy">No, both are not working, Still getting the same error-@ snakecharmerb</span>
<span class="comment-copy">Are you able to share an <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>, and let us know which version of python that you are running? And a traceback?</span>
<span class="comment-copy">I'm guessing the problem is happening when you are outputing your results, not when reading the input.  But it isn't possible to do more than guess without some code and data that reproduces the problem, or at least the code and a traceback.</span>
<span class="comment-copy">Again, the traceback comes from code you have not shown. Something after the <code>with codecs.open</code> is probably trying to simply <code>print</code> to a place where Python cannot determine a correct encoding.</span>
<span class="comment-copy">hi....thank you very much for such an amazing explanatory answer. It has completely resolved the issue....loads of thanks - @ snakecharmerb</span>
