<div class="post-text" itemprop="text">
<p>I have some script, i.e. <code>main.py</code> 
It uses a module <code>module.py</code> with some variables:</p>
<p>functions <code>func1, func2...</code></p>
<p>integers <code>int1, int2...</code></p>
<p>and so on</p>
<p>So, I need to extend the functionality of <code>module.py</code> by a nice brand-new submodule named <code>submodule.py</code> that should use variables of <code>module.py</code> to deliver me new features.</p>
<p>Here's some code of <code>submodule.py</code>:</p>
<pre><code>class New_Feature:
    def __init__(self, param1):
        result = func1(param1, default_param)
        self.attr1 = func2(result.attr2)
    def inner_func(self)
        return self.attr1 + int1
</code></pre>
<p>So I'm using <code>from submodule import *</code> (I know there are no overriding names) in the <code>module.py</code> code and then using <code>module.New_Feature</code> in <code>main.py</code></p>
<p>That code throws <code>NameError: name 'func1' is not defined</code></p>
<p>So how I can import submodule to use module's variables in it?</p>
<p>EDIT: Just explaining why I need this. I'm writing an API wrapper with a bunch of features, but these features should be optional to not overweight main file so users can just use what they need.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>So, I need to extend the functionality of module.py by a nice brand-new submodule named submodule.py that should use variables of module.py to deliver me new features.</p>
</blockquote>
<p>What are you trying to achieve is <a href="https://docs.python.org/2/library/functions.html#execfile" rel="nofollow noreferrer">execfile</a> from Python 2.x</p>
<p>Note that you can pass <code>locals</code> and <code>globals</code> in <code>execfile</code>-call.</p>
<p>For Python 3.x you can use <a href="https://stackoverflow.com/users/432509/ideasman42">ideasman42</a> recipe from <a href="https://stackoverflow.com/questions/436198/what-is-an-alternative-to-execfile-in-python-3">What is an alternative to execfile in Python 3?</a></p>
<pre><code>def execfile(filepath, globals=None, locals=None):
    if globals is None:
        globals = {}
    globals.update({
        "__file__": filepath,
        "__name__": "__main__",
    })
    with open(filepath, 'rb') as file:
        exec(compile(file.read(), filepath, 'exec'), globals, locals)
</code></pre>
</div>
<span class="comment-copy">You can't. Importing a module brings that module's names into your namespace, not the other way around.</span>
<span class="comment-copy">The way you have described it should work. So clearly there is something in the imported that is a bit different from the description. I would start by switching temporarily to fully-qualified names. That is  likely to clarify things.</span>
<span class="comment-copy">You should post your full code for module, submodule and main. Right now it isn't clear what the problem is. But I suspect you are not importing within submodule. You are probably missing <code>from module import func1, func2, ...</code> in submodule</span>
<span class="comment-copy">@Karl I can't just use imports in submodule as variables in module might change. So I need to "insert" submodule in the module. Is it possible in any way?</span>
<span class="comment-copy">It isn't at all clear what you want to achieve. Please post a minimal, complete and verifiable examole. Show us what's in module, show us how that changes, show us how how that should be used in submodule, show us what you do in main. And explain what you expect to see happen. Chances are there is a much better way to do this</span>
<span class="comment-copy">It seems like my interpreter looking on globals as on undefined local variable. Will see what I should fix there.  So submodule would share variables and functions with module, am I right? It just seems like it would copy everything in another script</span>
<span class="comment-copy">Without explicit <code>globals</code>/<code>locals</code> code will be executed just as if it were written in your <code>module.py</code>. Substitution of them give you a new level of control what is accessible from <code>exec</code>-uted code. Refer to <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer">exec documentation</a>. Beware: here be dragons!</span>
