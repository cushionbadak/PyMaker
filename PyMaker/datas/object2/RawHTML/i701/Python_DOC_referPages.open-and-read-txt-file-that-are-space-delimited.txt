<div class="post-text" itemprop="text">
<p>I have a space seperated txt file like following:</p>
<pre><code>2004          Temperature for KATHMANDU AIRPORT       
        Tmax  Tmin
     1  18.8   2.4 
     2  19.0   1.1 
     3  18.3   1.7 
     4  18.3   1.0 
     5  17.8   1.3 
</code></pre>
<p>I want to calculate the mean of  both Tmax and Tmin seperately. But, I am having hard time reading txt file. I tried <a href="https://stackoverflow.com/questions/25757934/opening-a-space-delimited-text-file-in-python-2-7">this link like</a>.</p>
<pre><code>import re
list_b = []
list_d = []

with open('TA103019.95.txt', 'r') as f:
    for line in f:
        list_line = re.findall(r"[\d.\d+']+", line)
        list_b.append(float(list_line[1])) #appends second column
        list_d.append(float(list_line[3])) #appends fourth column

print list_b
print list_d
</code></pre>
<p>But, it is giving me error :
 <code>IndexError: list index out of range</code>
what is wrong here?</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way to solve that is to use <a href="https://docs.python.org/3/library/stdtypes.html?highlight=split#str.split" rel="nofollow noreferrer"><code>split()</code></a> function.
Of course, you need to drop the first two lines:</p>
<pre class="lang-py prettyprint-override"><code>with io.open("path/to/file.txt", mode="r", encoding="utf-8") as f:
    next(f)
    next(f)
    for line in f:
        print(line.split())
</code></pre>
<p>You get:</p>
<pre><code>['1', '18.8', '2.4']
['2', '19.0', '1.1']
['3', '18.3', '1.7']
['4', '18.3', '1.0']
['5', '17.8', '1.3']
</code></pre>
<p>Quoting the documentation:</p>
<blockquote>
<p>If <em>sep</em> is not specified or is <code>None</code>, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
list_b = []
list_d = []

with open('TA103019.95.txt', 'r') as f:
    for line in f:
        # regex is corrected to match the decimal values only
        list_line = re.findall(r"\d+\.\d+", line) 

        # error condition handled where the values are not found 
        if len(list_line) &lt; 2: 
            continue

        # indexes are corrected below
        list_b.append(float(list_line[0])) #appends second column
        list_d.append(float(list_line[1])) #appends fourth column

print list_b
print list_d
</code></pre>
<p>I have added my answer with some comments in the code itself.</p>
<p>You were getting the <code>Index out of range error</code> because your list_line was having only a single element(i.e. 2004 in the first line of file) and you were trying to access the 1st and 3rd index of the list_line.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Full Solution</strong></p>
<pre><code>def readit(file_name,start_line = 2): # start_line - where your data starts (2 line mean 3rd line, because we start from 0th line) 
    with open(file_name,'r') as f:
        data = f.read().split('\n')
    data = [i.split(' ') for i in data[start_line:]]
    for i in range(len(data)):
        row = [(sub) for sub in data[i] if len(sub)!=0]
        yield int(row[0]),float(row[1]),float(row[2])


iterator = readit('TA103019.95.txt')


index, tmax, tmin = zip(*iterator)


mean_Tmax = sum(tmax)/len(tmax)
mean_Tmin = sum(tmin)/len(tmin)
print('Mean Tmax: ',mean_Tmax)
print('Mean Tmnin: ',mean_Tmin)

&gt;&gt;&gt; ('Mean Tmax: ', 18.439999999999998)
&gt;&gt;&gt; ('Mean Tmnin: ', 1.5)
</code></pre>
<p>Thanks to <strong>Dan D.</strong> for more Elegant solution</p>
</div>
<div class="post-text" itemprop="text">
<p>As stated <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">here</a>, <code>re.findall</code> lists all matches of your regular expression. the expression you define does not match anything in your file and you therefore get an empty array, leading to the error when you try to access <code>list_line[1]</code>.</p>
<ul>
<li>the expression you want to match base on that file would be <code>r"\d+\.\d+"</code>, matching any decimal number with at least one digit before the decimal point, that decimal point and at least one digit after it</li>
<li>even this expression will not match anything in the first two lines, so you will want to check for empty arrays</li>
<li>the result does not know of any columns, just matches of the pattern, and there will be two matches for each data line - you will want indizes <code>0</code> and <code>1</code></li>
</ul>
<p>so:
    import re
    list_b = []
    list_d = []</p>
<pre><code>with open('TA103019.95.txt', 'r') as f:
    for line in f:
        list_line = re.findall(r'\d+\.\d+', line)
        if len(list_line) == 2 :
            list_b.append(float(list_line[0])) #appends second column
            list_d.append(float(list_line[1])) #appends fourth column

print list_b
print list_d
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simplify your life and avoid 're' for this problem.</p>
<p>Perhaps you are reading the header row mistakenly?  If the format of the file is fixed, I usually "burn" the header row with a line read before starting the loop like:</p>
<pre><code>with open(file_name, 'r') as f:
    f.readline()  # burn the header row
    for line in f:
        tokens = line.strip().split(' ')   # tokenize the row based on spaces
</code></pre>
<p>Then you have a list of tokens, which will be strings that you'll need to convert to int or float or whatever and go from there!</p>
<p>Put in a couple print statements to see what you are picking up...</p>
</div>
<div class="post-text" itemprop="text">
<p>Is it possible that your file is tab delimited?</p>
<p>For Tab Delimited:</p>
<pre><code>with open('TA103019.95.txt', 'r') as f:
    for idx, line in enumerate(f):
        if idx &gt; 1:                    
            cols = line.split('\t'): #for space delimited change '\t' to ' '
            tmax = float(col[1])
            tmin = float(col[2])
            #calc mean

            mean = (tmax + tmin) / 2
            #not sure what you want to do with the result
</code></pre>
</div>
<span class="comment-copy">It is giving me error  <code>NameError: name 'io' is not defined</code></span>
<span class="comment-copy">Use <code>import io</code></span>
<span class="comment-copy">You could have skipped two lines by calling <code>next(f)</code> twice and then in a single <code>for line in f:</code> you could have parsed and yielded each line. This would eliminate both lists data and processed. And the transpose can be done with <code>zip</code> as <code>index, tmax, tmin = zip(*iterator)</code>.</span>
<span class="comment-copy">Thanks. I partly edited solution, not fully (didnt know much how to implement next(f) but also didnt want to spend too much time on it). Feel free to edit the answer.</span>
<span class="comment-copy">It is giving me error <code>IndexError: list index out of range</code></span>
<span class="comment-copy">It's because we didn't deal with the first two lines that are not the data.</span>
<span class="comment-copy">I fixed the code to ignore the first two lines.</span>
