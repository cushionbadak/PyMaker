<div class="post-text" itemprop="text">
<p>I coded an algorithm and it worked properly till 2 weeks ago. I get this warning and I cannot understand why I get it. The warning is:</p>
<blockquote>
<p>"C:/Users/Administrator/Documents/Python/sezg_1_diffne.py:147:
  DeprecationWarning: Calling np.sum(generator) is deprecated, and in
  the future will give a different result. Use
  np.sum(np.from_iter(generator)) or the python sum builtin instead.
  obje_1=detmas.objVal+sum(hopen[i]*fixedCost for i in Fset)"</p>
</blockquote>
<p>A part of my code is:</p>
<pre><code>obje_1=detmas.objVal+sum(hopen[i]*fixedCost for i in Fset)
</code></pre>
<p>I tried something which I found in internet such as removing numpy and reinstall it. However these solutions did not work for my code. How I can solve it? Thanks in advance...</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't import <code>sum</code> from <code>numpy</code>. Look for <code>from numpy import sum</code> or <code>from numpy import *</code> in your code and delete those lines. Otherwise, you will override the built-in <code>sum</code>. <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.sum.html" rel="nofollow noreferrer"><code>np.sum</code></a> and <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">built-in <code>sum</code></a> are independent functions with different requirements.</p>
<p>The warning suggests while your code may work now, it may not work in the future. Notice you do in fact use a generator implicitly. These lines are equivalent:</p>
<pre><code>sum(hopen[i]*fixedCost for i in Fset)
sum((hopen[i]*fixedCost for i in Fset))
</code></pre>
<p>In Python, extra parentheses are not required to explicitly denote a generator. Your error will disappear when you avoid importing <code>sum</code> from the NumPy library.</p>
</div>
<span class="comment-copy">What is there to solve? It is a warning and tells you that in the future your current solution (<code>np.sum</code>) may not work as expected and gives you the exact code to replace it with. You can either replace it with the suggested code now, or leave it for now - up to you.</span>
<span class="comment-copy">It looks like you must have done <code>from numpy import sum</code>. Don't, otherwise you're overwritting the built-in <code>sum</code> method, which does work with generators</span>
<span class="comment-copy">Thanks for your answers. However my code include only <code>import numpy as np</code> line. I solve with <code>obje_1=detmas.objVal+sum(hopen.values())*fixedCost</code> code. However I cannot solve for <code>for ind in range(0,sjt): tot_dis[ind]=sum(dist[unop[ind],ophu[stz]])</code></span>
<span class="comment-copy">Thanks for your quick response, but hopen is a dictionary. So it did not work. I solved via values edit for all sums. However I did not solve how can i rewrite for ind in range(0,sjt):                 tot_dis[ind]=sum(dist[unop[ind],ophu[stz]]) constraint sets.</span>
<span class="comment-copy">@nsener, No problem, seen update.</span>
<span class="comment-copy">How about <code>np.sum([a[i] for i in range])</code>, just a new set of []?</span>
<span class="comment-copy">@hpaulj, True, but I see not benefit of NumPy in this instance.. do you? It might be marginally more efficient to create a list (for small iterables) as iterating generators is expensive, but the performance difference is often marginal.</span>
