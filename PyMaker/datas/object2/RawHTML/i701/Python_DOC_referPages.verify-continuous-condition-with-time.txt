<div class="post-text" itemprop="text">
<p>I would like to develop a python program that, starting from a moment of time, wait 60 seconds before performing an action. Another feature that must have the program, is that if I update the initial time, it must start to check the condition. I thought about doing it with threads, but I do not know how to stop the thread and get it started again with the new start time.</p>
<pre><code>import thread
import time


# Define a function for the thread
def check_message (last, timer):
    oldtime = time.time()
    print oldtime
    # check
    while time.time() - oldtime &lt;= 60:
    print (time.time() - oldtime)
    print "One minute"+ str(time.time())
    return 1

# Create two threads as follows
try:
    named_tuple = time.localtime() # get struct_time
    time_string = time.strftime("%H:%M:%S", named_tuple)
    thread.start_new_thread(check_message , (time_string, 60))
except:
    print "Error: unable to start thread"

while 1:
    pass
</code></pre>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Checking times in a loop is probably not necessary here and wasteful since you can put a thread to sleep and let the kernel wake it up if the time has come.
The threading library provides <a href="https://docs.python.org/3/library/threading.html#timer-objects" rel="nofollow noreferrer"><code>threading.Timer</code></a> for such use cases. The difficulty in your case is, that you cannot interrupt such a sleeping thread to adjust the interval after which the specified function should be executed.</p>
<p>I'm using a custom manager-class <code>TimeLord</code> in my example below, to overcome this limitation. It adds a wrapping worker-function which sets a flag when the target-function
is starting execution. This flag will be checked by the parent-thread to decide if you still can adjust the execution or if it's too late. If it's not too late, a new timer
will be started with the new interval specified in the <code>timelord.reset</code>-method.</p>
<p>This code runs with Python 2 and 3:</p>
<pre><code>import time
from datetime import datetime
from threading import Timer, current_thread


def f(x):
    print('{} {} performing action with {}'.format(
        datetime.now(), current_thread().name, x)
    )
    time.sleep(10)
    print('{} {} exiting'.format(datetime.now(), current_thread().name))


class TimeLord:
    """
    Manager Class for threading.Timer instance. Allows "resetting" `interval`
    as long execution of `function` has not started by canceling the old
    and constructing a new timer instance.
    """

    def worker(self, *args, **kwargs):
        self._timer.executing = True
        self.func(*args, **kwargs)

    def __init__(self, interval, function, args=None, kwargs=None):
        self.func = function
        self.args = args if args is not None else []
        self.kwargs = kwargs if kwargs is not None else {}
        self._init_timer(interval)

    def _init_timer(self, interval):
        self._timer = Timer(interval, self.worker, self.args, self.kwargs)
        self._timer.daemon = True
        self._timer.executing = False # In Python 2 Timer is a
        # factory function, so we can't add this by subclassing Timer.

    def start(self):
        self._timer.start()
        print('{} Timer-thread with `interval={}` started'.format(
            datetime.now(), self._timer.interval)
        )  # DEBUG

    def reset(self, interval):
        """Try to cancel old timer and start a new one if cancellation was
        successful.
        """
        print('{} cancel Timer-thread'.format(datetime.now()))  # DEBUG
        self._timer.cancel()  # this order prevents race condition and is
        # potentially redundant

        # start new thread only if existing one is not already executing
        # `function`.
        if self._timer.is_alive() and not self._timer.executing:
            self._init_timer(interval)
            self.start()

    def cancel(self):
        self._timer.cancel()

    def join(self, timeout=None):
        self._timer.join(timeout=timeout)
</code></pre>
<hr/>
<pre><code>def run_demo(initial_interval):

    x = 'x'
    print("testing with initial interval {}".format(initial_interval))
    tl = TimeLord(interval=initial_interval, function=f, args=(x,))
    tl.start()

    print('{} sleeping two seconds'.format(datetime.now()))
    time.sleep(2)

    tl.reset(interval=10)
    tl.join()
    print("-" * 70)


if __name__ == '__main__':

    run_demo(initial_interval=5)
    run_demo(initial_interval=1)
</code></pre>
<p>Example Output:</p>
<pre class="lang-none prettyprint-override"><code>testing with initial interval 5
2019-02-02 22:58:12.594050 Timer-thread with `interval=5` started
2019-02-02 22:58:12.594101 sleeping two seconds
2019-02-02 22:58:14.596165 cancel Timer-thread
2019-02-02 22:58:14.596889 Timer-thread with `interval=10` started
2019-02-02 22:58:24.596810 Thread-2 performing action with x
2019-02-02 22:58:34.605854 Thread-2 exiting
----------------------------------------------------------------------
testing with initial interval 1
2019-02-02 22:58:34.606483 Timer-thread with `interval=1` started
2019-02-02 22:58:34.606541 sleeping two seconds
2019-02-02 22:58:35.606587 Thread-3 performing action with x
2019-02-02 22:58:36.608610 cancel Timer-thread
2019-02-02 22:58:45.616692 Thread-3 exiting
----------------------------------------------------------------------

Process finished with exit code 0
</code></pre>
<p>Note, with interval=1 the cancelation after two seconds had no effect, since the timer was already executing the target-function.</p>
</div>
<div class="post-text" itemprop="text">
<p>One option would be to do the check outside of the thread, so that the main loop executed a thread every 60 seconds that does X job:</p>
<pre><code>import threading
import time

# Define a function for the thread
def check_message():
    print("One minute"+ str(time.time()))
    return 1

last_execution = time.time()
while 1:
    if time.time() - last_execution &lt; 60:
        time.sleep(1)
    else:
        last_execution = time.time()
        threading.Thread(target=check_message).start()
        # Python2:
        # import thread
        # thread.start_new_thread(check_message)
</code></pre>
<p>I swapped the code for a syntax that works in Python3 since I don't have Python2 installed. But the overall idea should work the same in both version.</p>
</div>
