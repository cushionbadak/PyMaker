<div class="post-text" itemprop="text">
<p>I am trying to create a program to find the largest power of two less than or equal to a given number.</p>
<p>Given below is the code I have made for it:</p>
<pre><code>boundary = int(input("Enter your number: "))
x = boundary
ctr = 0                           
if x % 2 == 0:                      
    while x &gt;= 0:
        x /= 2
        ctr += 1
else:
    ctr = 0
    while x &gt;= 1:
        x /= 2
        ctr += 1
    ctr -= 1
</code></pre>
<p>It seems to work only with odd numbers (the else statement part) and does not output anything when an even number is entered.
I'd like to know what I'm doing wrong here.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why should you treat odd and even numbers differently?
To me it seems the algoritm for odd numbers works fine for both:</p>
<pre><code>boundary = int(input("Enter your number: "))
x = boundary
ctr = 0
while x &gt;= 1:
    x /= 2
    ctr += 1
ctr -= 1

print(boundary, ctr, 2**ctr)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Start with <code>answer = 1</code>, and multiply that by two as long as the result is less than your input:</p>
<pre><code>boundary = int(input("..."))
answer = 1
while True:
    tmp = answer * 2
    if tmp &gt; boundary:
        break
    answer = tmp
print("{} is less than or equal to {}".format(answer, boundary)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a loop is a very inefficient way to solve this problem.</p>
<p>Notice that the required exponent is one less than the length of the <code>boundary</code> in binary.</p>
<p>An efficient way to find the answer is thus to use <a href="https://docs.python.org/3/library/stdtypes.html#int.bit_length" rel="nofollow noreferrer">int.bit_length()</a>.</p>
<pre><code>power = boundary.bit_length() - 1
x = 1 &lt;&lt; power
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to solve this is to evaluate each power of two and check if it is less or equal to a given boundary.</p>
<pre><code>def highest_power2_loe(boundary):
    """Return the highest power of two less than or equal to `boundary`.
    """
    power = 0
    while 2**power &lt;= boundary:
        power += 1

   return power - 1

highest_power2_low(10)    # == 3
</code></pre>
<p>Note that you have to return <code>power - 1</code> since the loop stops only if <code>(2**power &lt;= boundary) == False</code> and this only the case if <code>2**power</code> is actually greater than <code>boundary</code>.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/3797575/find-largest-power-of-two-less-than-x-number">find largest power of two less than X number?</a></span>
<span class="comment-copy">Do not use loops to do log2 operations in binary, it's terribly inefficient</span>
<span class="comment-copy">"less than or <b>equal</b> to a given number"</span>
<span class="comment-copy">SimonF, edited, thanks for the correction. @Nico, the code is pretty self explanatory in my opinion, with variables well named and only very basic operations used. Was there a part that you didn't understand?</span>
<span class="comment-copy">@ArranDuff It's not about Nico understanding your code. It's about Python newbies. Obviously people struggled with this, or they wouldn't have asked the question. Your approach is very different from the code in the question. Both these are good reasons for some explanation.</span>
<span class="comment-copy">Fair enough. I'll add an explanation next time</span>
