<div class="post-text" itemprop="text">
<p>I have some questions on the split() description/examples from the  <a href="https://docs.python.org/3/library/re.html#match-objects" rel="nofollow noreferrer">Python RE documents</a></p>
<blockquote>
<p>If there are capturing groups in the separator and it matches at the start of the string, the result will start with an empty string. The same holds for the end of the string:</p>
</blockquote>
<pre><code>re.split(r'(\W+)', '...words, words...')
['', '...', 'words', ', ', 'words', '...', '']
</code></pre>
<p>In this example there is a capturing group, it matches at the start and end of the string, thus, the result starts and ends with an empty string. Outside of understanding that this happens, I would like to better understand the reasoning. The explanation for this is:</p>
<blockquote>
<p>That way, separator components are always found at the same relative
  indices within the result list.</p>
</blockquote>
<p>Could someone expand on this? Relative to what?</p>
<p>My other query is related to this example: </p>
<pre><code>re.split(r'(\W*)', '...words...')
['', '...', '', '', 'w', '', 'o', '', 'r', '', 'd', '', 's', '...', '', '', '']
</code></pre>
<p><code>\w</code> will match any character that can be used in any word in any language (Flag:unicode), or will be the equivalent of <code>[a-zA-Z0-9_]</code> (Flag:ASCII), <code>\W</code> is the inverse of this. Can someone talk about each of the matches in the example above, explain each (if possible) in terms of what is matched (\B, \U, ...).</p>
<p>Added 29/01/2019:</p>
<p>Apart of what I am after wasn't stated very clear (my bad). In terms of the second example, I am curious about the steps taken to come to the result (how the python re module processed the example). After reading this post on <a href="https://www.regular-expressions.info/zerolength.html" rel="nofollow noreferrer">Zero-Length Regex Matches</a> things are clearer, but I would still be interest if anyone can break down the logic up to <code>['', '...', '', '', 'w',</code> in the results.</p>
</div>
<div class="post-text" itemprop="text">
<p>What it's trying to say is that when you have a capturing group in the delimiter, and it matches the beginning of the string, the resulting list will always start with the delimiter. Similarly, if it matches at the end of the string, the list will always end with the delimiter.</p>
<p>For consistency, this is true even when the delimiter matches an empty string. The input string is considered to have an empty string before the first character and after the last character, and the delimiter will match these. And then they'll be the first and last elements of the resulting list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check this:</p>
<pre><code>&gt;&gt;&gt; re.split('(a)', 'awords')
['', 'a', 'words']
&gt;&gt;&gt; re.split('(w)', 'awords')
['a', 'w', 'ords']
&gt;&gt;&gt; re.split('(o)', 'awords')
['aw', 'o', 'rds']
&gt;&gt;&gt; re.split('(s)', 'awords')
['aword', 's', '']
</code></pre>
<p>Always at the second place (index of 1).  </p>
<p>On the other hand:</p>
<pre><code>&gt;&gt;&gt; re.split('a', 'awords')
['', 'words']
&gt;&gt;&gt; re.split('w', 'awords')
['a', 'ords']
&gt;&gt;&gt; re.split('s', 'awords')
['aword', '']
</code></pre>
<p>Almost the same, only the catching group not inside.</p>
</div>
<span class="comment-copy">Your question is too broad. For the first part: separators are guaranteed to be found a odd indices in the resulting list.</span>
<span class="comment-copy">That's what <code>split</code> does. If you don't want the empty strings maybe you want <code>findall</code>. The pattern matches seperators not resulting strings.</span>
<span class="comment-copy">Thanks Barmar, this brings some clarity for me. Could you expand a bit on the logic going on? maybe in terms of the steps and results up to "['', '...', '', '', 'w'".</span>
<span class="comment-copy">went as far as digging in the re source - hit a dead end at _sre.compile</span>
