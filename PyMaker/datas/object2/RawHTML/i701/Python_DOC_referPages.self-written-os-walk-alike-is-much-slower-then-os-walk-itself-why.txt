<div class="post-text" itemprop="text">
<p>Unfortunately this code runs slower than "os.walk", but why?</p>
<p>Can it be "for" cycle that causes it to run slowly?</p>
<p><strong>"Code that works like 'os.walk':</strong> (The "os.walk" function does what it does)</p>
<p><strong>Note:</strong> <em>I wrote to improve myself!</em>:</p>
<pre><code>import os, time
from os.path import *

x = ""
y = []
z = []
var = 0

def walk(xew):
    global top, var, x,y,z
    if not var: var = [xew]
    for i in var:
        try:
            for ii in os.listdir(i):
                y.append(ii) if isdir(i+os.sep+ii) else z.append(ii)

            x = top = i
            var = [top+os.sep+i for i in os.listdir(top) if isdir(top+os.sep+i)]         
        except:
            continue
        yield x,y,z
        yield from walk(var)
        var.clear();y.clear();z.clear()
</code></pre>
<p><strong>for example</strong>:</p>
<p><em>It ends in 2 seconds:</em></p>
<pre><code>for x,y,z in walk(path):
    print(x)
</code></pre>
<p><em>It is in 0.5 seconds:</em></p>
<pre><code>for x,y,z in os.walk(path):
    print(x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>os.walk()</code> doesn't use <code>os.listdir()</code>. It uses the much faster <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer"><code>os.scandir()</code> function</a>, which provides an iterator with more information per directory entry:</p>
<blockquote>
<p>Using <code>scandir()</code> instead of <code>listdir()</code> can significantly increase the performance of code that also needs file type or file attribute information, because <code>os.DirEntry</code> objects expose this information if the operating system provides it when scanning a directory. All <code>os.DirEntry</code> methods may perform a system call, but <code>is_dir()</code> and <code>is_file()</code> usually only require a system call for symbolic links; <code>os.DirEntry.stat()</code> always requires a system call on Unix but only requires one for symbolic links on Windows.</p>
</blockquote>
<p>The <code>os.walk()</code> code makes heavy use of the <code>DirEntry.is_dir()</code> call, which with <code>os.scandir()</code> is much cheaper than using <code>os.isdir()</code> (which must make separate <code>os.stat()</code> calls).</p>
<p>Next, your code is calling <code>os.isdir()</code> too often. You are effectively calling it twice for every file entry in your path. You already collected all the subdirectories in <code>y</code>, you don't need to test the paths again when re-creating <code>var</code>. These extra <code>isdir()</code> calls cost you a lot of time. </p>
<p>You also recurse when <code>var</code> is <em>empty</em> (no further subdirectories), causing you to first wrap the empty list in another list, after which <code>os.listdir()</code> throws a <code>TypeError</code> exception which your blanket Pokemon-catch-em-all except handler silences.</p>
<p>Next, you should get rid of the global variables, and use proper variable names. <code>files</code> and <code>dirs</code> would be far clearer names than <code>y</code> and <code>z</code>. Because you made <code>y</code> and <code>z</code> globals you are retaining all file and directory names for a given level, and for every first subdirectory on down, you then re-report those same file and directory names as if they are members of those subdirectories. Only when the first leaf of such a directory tree (with no further subdirectories) is reached do the <code>.clear()</code> calls on <code>y</code> and <code>z</code> get executed, leading to very confusing results with repeated filenames.</p>
<p>You can study the <a href="https://github.com/python/cpython/blob/v3.6.8/Lib/os.py#L277-L415" rel="nofollow noreferrer"><code>os.walk()</code> source code</a>, but if we simplify it down to only use top-down traversal and no error handling, then it comes down to:</p>
<pre><code>def walk(top):
    dirs = []
    nondirs = []

    with os.scandir(top) as scandir_it:
        for entry in scandir_it:
            if entry.is_dir():
                dirs.append(entry.name)
            else:
                nondirs.append(entry.name)

    yield top, dirs, nondirs

    for dirname in dirs:
        new_path = os.path.join(top, dirname) 
        yield from walk(new_path)
</code></pre>
<p>Note that there are <em>no global variables used</em>; there simply is no need for any in this algorithm. There is only a single <code>os.scandir()</code> call per directory, and the <code>dirs</code> variable is re-used to recurse into subdirectories.</p>
</div>
<div class="post-text" itemprop="text">
<p>This code it works almost as fast as <code>os.walk</code>!</p>
<pre><code>import os, time
from os.path import *

def walk(top):
    x = top;y=[];z=[]
    try:
        for i in os.listdir(top):
            y.append(i) if isdir(top+os.sep+i) else z.append(i)
    except: pass
    else:
        yield x,y,z
        for q in y: yield from walk(top+os.sep+q)
</code></pre>
</div>
<span class="comment-copy">Apart from implementation details, definitely check this <a href="https://stackoverflow.com/questions/12590058/python-performance-with-global-variables-vs-local" title="python performance with global variables vs local">stackoverflow.com/questions/12590058/…</a> if it will affect the performance</span>
<span class="comment-copy">@mfrackowiak: that doesn't account for the big difference, however.</span>
<span class="comment-copy">I would guess anything that takes <code>os.walk</code> half a second to walk to be a somewhat large directory tree. Perhaps with some symlinks. OPs implementation follows symlink directories whilst the version in <code>os</code> does not by default.</span>
<span class="comment-copy">If I'm not mistaken the change to using <code>os.scandir</code> (which was a relatively recent work by Giampaolo Rodolà) accounts for something like 20-50% performance improvement and a similar amount of decrease in number of syscalls, however the OP experiences a 200% performance difference. So this is not the only reason, even though it is a significant factor.</span>
<span class="comment-copy">@GiacomoAlzetta: it depends on the number of files and the number of subdirectories to recurse into as well. We don't know the mix here.</span>
<span class="comment-copy">Yes you are right. The OP should test <code>os.walk</code> on the same directory for two different python versions (e.g. python2.7 vs python3.7) and see whether they see a significant difference or not... if there is not a huge difference then an other factor is at play, if the difference is big then it's probably just the change to <code>os.scandir</code>.</span>
<span class="comment-copy">@GiacomoAlzetta: here it is the doubled <code>os.isdir()</code> calls that cover the remaining time differences.</span>
<span class="comment-copy">@MartijnPieters Thanks for your answer, my purpose was to understand why this code was slow, and thanks to you,i learned something to satisfy myself!</span>
