<div class="post-text" itemprop="text">
<p>I am measuring the response time on a function using the time module. The time module is supposed to output seconds as a float, so I am saving a start time value (time.clock()) and taking another reading at the end, and using the difference as a runtime. While watching the results, we noted the runtimes seemed high -- something that seemed to take less than 2 seconds, was printing as 3-and-change, for instance. Based on the perceived issue, I decided to double-check the results using the datetime module. Printing the two side-by-side shows the time module values are almost double the datetime values. </p>
<p>Anyone know why that might be?</p>
<p>Here is my code:</p>
<pre><code>for datum in data:
    start = datetime.datetime.now()
    startts = time.clock()
    check = test_func(datum)
    runtime = datetime.datetime.now() - start
    runts = time.clock() - startts
    print(check, "Time required:", runtime, "or", runts)
</code></pre>
<p>Some of my results:</p>
<pre><code>XYZ Time required: 0:00:01.985303 or 3.7836029999999994
XYZ Time required: 0:00:01.476289 or 3.3465039999999817
XYZ Time required: 0:00:01.454407 or 3.7140109999999993
XYZ Time required: 0:00:01.550416 or 3.860824000000008
</code></pre>
<p>I am assuming this sort of issue would have been noticed before, and I am just missing something basic in my implementation. Can someone clue me in?</p>
</div>
<div class="post-text" itemprop="text">
<p>Looks like time.clock() has been Deprecated since version 3.3</p>
<p>Maybe <a href="https://docs.python.org/3/library/time.html#time.clock" rel="nofollow noreferrer">this</a> will help ?</p>
<blockquote>
<p>time.clock()
  On Unix, return the current processor time as a floating point number
  expressed in seconds. The precision, and in fact the very definition
  of the meaning of “processor time”, depends on that of the C function
  of the same name.</p>
<p>On Windows, this function returns wall-clock seconds elapsed since the
  first call to this function, as a floating point number, based on the
  Win32 function QueryPerformanceCounter(). The resolution is typically
  better than one microsecond.</p>
<p>Deprecated since version 3.3: The behaviour of this function depends
  on the platform: use perf_counter() or process_time() instead,
  depending on your requirements, to have a well defined behaviour.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>We found the issue. The test_func I am testing is using a multi-threaded process. I both did not know that, and did not know it was an issue. </p>
<p>The time module uses processor time (<a href="https://docs.python.org/3.6/library/time.html" rel="nofollow noreferrer">https://docs.python.org/3.6/library/time.html</a>), while the datetime module uses wall clock time (<a href="https://docs.python.org/3.6/library/datetime.html" rel="nofollow noreferrer">https://docs.python.org/3.6/library/datetime.html</a>). Using the difference in the datetime timestamps told me how much actual time had elapsed, and for our purposes was the relevant information. </p>
<p>I hope this helps someone else in the future!</p>
</div>
<span class="comment-copy">True but this doesn't explain the source of the discrepancy.</span>
