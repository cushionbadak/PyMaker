<div class="post-text" itemprop="text">
<p>What I am specifically trying to do:</p>
<p>2D list:</p>
<pre><code>l1 = [[2,4,5],
      [5,7,5],
      [1,9,7]]
</code></pre>
<p>I want the output to be:</p>
<pre><code>row = 2,4,5 column = 2,5,1
row = 5,7,5 column = 4,7,9
row = 1,9,7 column = 5,5,7
</code></pre>
<p>This is all I've got:</p>
<pre><code>x = -1
for i in range(3):
    x+=1
    print(l1[i], end="")
    print(l1[x][i])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Rows:</p>
<pre><code>rows = l1
Output: [[2, 4, 5], [5, 7, 5], [1, 9, 7]]
</code></pre>
<p>Cols:</p>
<pre><code>cols = [[row[i] for row in l1] for i in range(col_length)]
Output: [[2, 5, 1], [4, 7, 9], [5, 5, 7]]
</code></pre>
<p>Or as noted in the comments:</p>
<pre><code>cols = list(zip(*rows))
Output: [(2, 5, 1), (4, 7, 9), (5, 5, 7)]
</code></pre>
<p>Zip and manipulate:</p>
<pre><code>&gt;&gt;&gt; for row, col in zip(rows, cols):
...     print(str(row), str(col))
... 
[2, 4, 5] [2, 5, 1]
[5, 7, 5] [4, 7, 9]
[1, 9, 7] [5, 5, 7]

&gt;&gt;&gt; for row, col in zip(rows, cols):
...     print("rows = {} columns = {}".format(",".join(map(str, row)), ",".join(map(str, col))))
... 
rows = 2,4,5 columns = 2,5,1
rows = 5,7,5 columns = 4,7,9
rows = 1,9,7 columns = 5,5,7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Below script produce expected result.</p>
<pre><code>l1 = [[2,4,5],
      [5,7,5],
      [1,9,7]]

ll_rotated = list(zip(*l1))
for row, col in zip(l1, ll_rotated):
    row_str = ','.join(map(str, row))
    col_str = ','.join(map(str, col))
    print('rows = {} column = {}'.format(row_str, col_str))
</code></pre>
<p>output is:</p>
<pre><code>row = 2,4,5 column = 2,5,1
row = 5,7,5 column = 4,7,9
row = 1,9,7 column = 5,5,7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can print them out using a print statement. I think the point is to determine what's being printed at each line. I'd suggest keeping track of the row and column for each i if your matrix is square. </p>
<pre><code>for i in range(3):
    row = [str(matrix[i][j]) for j in range(3)]
    column = [str(matrix[j][i]) for j in range(3)]
    print("row =", ",".join(row), "column = ", ",".join(column)
</code></pre>
</div>
<span class="comment-copy">Looks like someone is trying to get an answer to their class project. Please post what you have done so far and where you are stuck.</span>
<span class="comment-copy">Arun Subramanian not for a class project, just me trying to understand nested loops :)</span>
<span class="comment-copy">Edit your question to post what you have done so far and where you are stuck. Only then can people help you. If you just post the question without your work, it is going to get downvoted and you won't receive help. That is how the community works. Apologies if it comes across as rude.</span>
<span class="comment-copy"><code>cols = list(zip(*rows))</code> is a bit more succinct.</span>
<span class="comment-copy">Notice that print can consume multiple arguments with varying types. If you concatenate them all together using string +, then yes; otherwise, no. It appears that OP has tried.</span>
<span class="comment-copy">At the time of my comment, OP hadn't tried. It's true that print can consume multiple arguments with varying types; however, that is not where the problem is. Running your code throws the following error: <code>TypeError: sequence item 0: expected str instance, int found</code>, since when using the <code>.join</code> method you need to have all elements in the iterable be strings (see <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">python docs</a>). OP's matrix consists of all integers.</span>
<span class="comment-copy">Nice catch. Made the fix.</span>
