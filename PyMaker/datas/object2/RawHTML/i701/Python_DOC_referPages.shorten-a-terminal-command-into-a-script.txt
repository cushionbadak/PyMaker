<div class="post-text" itemprop="text">
<p>I'm trying to come up with a way to shorten a command that would let me push my configurationfrom a network device to my backup (oxidized)
the full command goeslike this:</p>
<pre><code>curl http://192.168.195.57:8888/node/IPofDevicetoPush
</code></pre>
<p>The command is long and annoying to type when wanting to push the config, so I want to shorten it. In my python script I have as following:</p>
<pre><code>#!/usr/bin/env python
import os
IPofDevicetoPush =raw_input("IP or hostname: ")
os.system("curl http://192.168.X.X/node/next/IPofDevicetoPush")
</code></pre>
<p>What I want to do from the terminal window is something like this:</p>
<pre><code>sudo oxs -x Mypush.py IPofDevicetoPush 
</code></pre>
<p>And for IPofDevicetoPush to be "copied" into the script so that the script would run </p>
<pre><code>os.system("curl http://192.168.X.X/node/next/IPofDevicetoPush") 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something very very simple:</p>
<pre><code>import sys
import os

os.system("curl http://192.168.X.X/node/next/{}".format(sys.argv[1]))
</code></pre>
<p><code>sys.argv</code> is a list containing the command line arguments separated by space. <code>sys.argv[0]</code> is the script itself, so your argument is <code>sys.argv[1]</code>.</p>
<p>Of course you may improve it with all the checks you wish to be sure that the input argument is present an satisfies any requisite you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Note you should <a href="https://docs.python.org/3/library/subprocess.html#replacing-os-system" rel="nofollow noreferrer">favor subprocess methods over os.system</a>.</p>
<p>Try something like this:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python
import sys
from subprocess import call

if len(sys.argv) != 2:
    print("Pass an arg.")
    sys.exit(1)

cmd = "curl http://192.168.X.X/node/next/{}".format(sys.argv[1])
sys.exit(call(cmd, shell=True))
</code></pre>
</div>
<span class="comment-copy">Have you tried using sys.argv and inputting the arguments as a string to the script?</span>
<span class="comment-copy">@ZWang No, I'm not familiar with the sys.argv function.</span>
<span class="comment-copy">If you are writing new Python scripts in 2019, you should probably be targeting the currently supported and recommended version of the language, which is Python 3.</span>
<span class="comment-copy">When running my full command: sudo oxs -x Myscript.py 192.168.55.10, im getting an error saying curl is unrecognized command. I assum I should count space only within the argument and not anything before that</span>
<span class="comment-copy"><code>sys.argv</code> splits the command line by spaces. If you type on the command line <code>test.py one two - three</code>, <code>sys.argv</code> is <code>['test.py', 'one', 'two', '-', 'three']</code>. It does not include anything before your script. So if you type <code>sudo test.py one two - three</code>, <code>sys.argv</code> is the same as before.</span>
<span class="comment-copy">Thank you for the clarification</span>
<span class="comment-copy"><code>shell=True</code> is no better than <code>os.system</code>. Use <code>call(["curl", "http://192.168.X.X/node/next/{}".format(sys.argv[1])])</code>.</span>
<span class="comment-copy">From the <code>os.system</code> docs: "The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function." The example that the subprocess docs provide for replacing <code>os.system</code> is virtually identical to my answer. As far as the security considerations, OP literally stated he'll be typing this as a shorthand and not accepting input from some other source.</span>
