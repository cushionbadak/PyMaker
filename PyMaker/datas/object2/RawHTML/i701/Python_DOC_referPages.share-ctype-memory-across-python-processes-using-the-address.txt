<div class="post-text" itemprop="text">
<p>I am trying to send a dynamic array across multiple processes in python. My first solution was sending the data directly through the Queue/Pipe of multiprocessing class. The problem is that it is limited by the bandwidth of the ethernet connection. Therefore I am trying to use the ctype array and pass just the address of the object. When I try to access the array from the second process (either A.raw or A.value) the process exit without any exception. Does somebody have an idea what is going on? Maybe some problems with lock etc.</p>
<pre><code>from multiprocessing import Process,Queue
from ctypes import c_char,addressof

from time import sleep
import os




class ProcessIn(Process):
    def __init__(self,QueueI):
        super().__init__(daemon=True)
        self.QueueI=QueueI

    def run(self):
        Array=[]
        while True:
            N=100000
            A=(c_char*N)()
            A.value=b'\x01'
            Address=addressof(A)
            Array.append(A)
            print(os.getpid(),'putted',Address)
            self.QueueI.put((Address,N))
            sleep(2)





class ProcessOut(Process):
    def __init__(self,QueueI):
        super().__init__(daemon=True)
        self.QueueI=QueueI

    def run(self):
        while True:
            print(os.getpid(),'step 1')
            Address,N=self.QueueI.get()
            print(os.getpid(),'step 2',Address)
            A=(c_char*N).from_address(Address)      
            print(os.getpid(),'step 3')
            Value=A.raw         #This will fail 
            print(os.getpid(),'step 4',Value)   
            sleep(1)

if __name__ == '__main__':
    QueueI=Queue()

    In=ProcessIn(QueueI)
    Out=ProcessOut(QueueI)
    print(os.getpid(),'main')
    In.start()
    Out.start()
    input('press key to finish\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ok, I got it - using mmap with tag:</p>
<pre><code>from multiprocessing import Process,Queue
from ctypes import c_char,addressof
import pyarrow as pa
import numpy as np
from time import sleep
import os
import datetime
import mmap
from sys import getsizeof



class ProcessIn(Process):
    def __init__(self,QueueI):
        super().__init__(daemon=True)
        self.QueueI=QueueI

    def run(self):  
        i=0
        while True:
            N=np.random.randint(10,14)*100000
            data = b'abcdefghijklmnopqrstuvwxyz'        
            Tag='Data_'+str(i)
            buf = mmap.mmap(-1, N*len(data),tagname=Tag)            
            buf[0]=i
            NN=N*len(data)
            # print(buf[0:10])

            print(os.getpid(),'putted',Tag,NN)
            if self.QueueI.qsize()==0:
                self.QueueI.put((Tag,NN,datetime.datetime.now()))           


            i+=1
            sleep(1)


class ProcessOut(Process):
    def __init__(self,QueueI):
        super().__init__(daemon=True)
        self.QueueI=QueueI

    def run(self):
        while True:
            # print(os.getpid(),'step 1')
            Tag,N,start=self.QueueI.get()           
            buf =  mmap.mmap(-1, N,tagname=Tag)

            print('got',buf[0:10],Tag)

            # data=buf.read()
            dt=(datetime.datetime.now()-start).total_seconds()
            if dt!=0:
                print(os.getpid(),N/dt/1024**2,'MBs',dt*1000,'ms',N/1024**2,'MB',N) 
            else:
                print(os.getpid(),np.nan,'MBs',dt*1000,'ms',N/1024**2,'MB',N)   
            buf=None

if __name__ == '__main__':
    QueueI=Queue()

    In=ProcessIn(QueueI)
    Out=ProcessOut(QueueI)
    print(os.getpid(),'main')
    In.start()
    Out.start()
    input('press key to finish\n')
</code></pre>
</div>
<span class="comment-copy">Have you read about shared memory in the multiprocessing module? <a href="https://docs.python.org/3/library/multiprocessing.html?highlight=process#sharing-state-between-processes" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Yes, the problem is that the Array has static size, I would like to use a dynamic array</span>
<span class="comment-copy">ctype Arrays are always fixed size, you have a python list called <code>Array</code> and add <code>c_char </code> to it</span>
<span class="comment-copy">Sure, but the idea is that the required array is created by the first process (with needed variable size), and then pass to the second process by its address and size. If I am correct the standard approach of multiprocessing Value and Array assume that the object is created in the main process and then passed to subprocesses - there is therefore not an option to change its size</span>
<span class="comment-copy"><a href="https://arrow.apache.org/docs/python/data.html#arrays" rel="nofollow noreferrer">pyarrow</a> may be of interest to you</span>
