<div class="post-text" itemprop="text">
<p>In Bottle, let's say I have a form with 10 inputs:</p>
<pre><code>&lt;form method="POST" action="/machine" enctype="multipart/form-data"&gt;
    &lt;input type="text" name="one" placeholder="one" required&gt;
    &lt;input type="text" name="two" placeholder="two" required&gt;
    ...
    &lt;input type="text" name="ten" placeholder="ten" required&gt;
&lt;/form&gt;
</code></pre>
<p>I want to then process all the potential inputs and don't want to do this statically by calling each one individually on the POST route (e.g. request.forms.get("one")). </p>
<p>Is there a way to process all the inputs in the form. I've been seeing request.params and request.query ...</p>
<pre><code>@route('/machine', method='POST')
def machine_learn():
    my_dict = dict(request.params)
    return str(my_dict)
</code></pre>
<p>... but don't fully understand how I can use these to get all the input data as either a dictionary or list. When I use the above code, I get an empty dictionary</p>
<p>Any help is appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>request.forms</code> returns a <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">Python Dictionary</a> of all the inputs in the request.</p>
<p>So you can process the request dynamically like this</p>
<pre><code>for key, value in request.forms.items():
  print("For name " + key + ", the value is " + value)

</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>request.forms</code> is an instance of <code>bottle.FormsDict</code> class. <sup><a href="https://github.com/bottlepy/bottle/blob/0.12.16/bottle.py#L1886" rel="nofollow noreferrer">1</a></sup></p>
<p>When you examine <code>bottle.MultiDict</code> class with FormsDict subclasses, there is a <code>allitems</code> method that can be used to retrieve a list containing tuples of field name and value. <sup><a href="https://github.com/bottlepy/bottle/blob/0.12.16/bottle.py#L1833" rel="nofollow noreferrer">2</a></sup></p>
<pre><code>form_items = request.forms.allitems()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for some additional help. </p>
<pre><code>def merge_dicts(*args):
    result = {}
    for dictionary in args:
        result.update(dictionary)
    return result

class Api(object):
    def __init__(self, user, request, option):
        self.user = user
        self.option = option
        self.payload = merge_dicts(dict(request.forms), dict(request.query.decode()))
</code></pre>
<p>This can now take any form, or query post and combine them into a payload.  The reason for the <code>dict()</code> is because Bottle technically doesn't return a true dict, instead it is a FormsDict which does not have all the features of a dict in place.  This makes that process simple, and turns everything into a dict.  </p>
</div>
<span class="comment-copy">Thanks Shabbab! This works beautifully!</span>
<span class="comment-copy">Welcome! Best of luck on the web app! :-)</span>
