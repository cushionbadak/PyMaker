<div class="post-text" itemprop="text">
<p>I have this unique list:</p>
<pre><code>unique_list = {'apple', 'banana', 'coconut'}
</code></pre>
<p>I want to find how many of the elements occur exactly in my large text file. I just need the number, not the names. For example, if only 'apple' and 'banana' are found for a particular person, then it should return 2. </p>
<p>For each person (name and family name), I need to get how many of these unique fruit does this person have. In a large file, this might be difficult. I need the fastest way to do it. </p>
<p>Let's say I get names from the text file:</p>
<pre><code>people = {'cody meltin', 'larisa harris', 'harry barry'}
</code></pre>
<p>The text file is as below:</p>
<pre><code>Name           Fruit unit

cody melton    apple  3

cody melton    banana 5

cody melton    banana 7

larisa harris  apple  8

larisa harris  apple  5
</code></pre>
<p>The output should look like this:</p>
<pre><code>{'cody meltin':2, 'larisa harris':1, 'harry barry':0}
</code></pre>
<p>I do not want to use any packages, just built-ins and basic libraries.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can leverage python's basic library - <code>collections</code></p>
<pre><code>from collections import Counter

dict(Counter(pd.Series(['cody', 'cody ', 'cody ', 'melton', 'melton', 'harry'])))
</code></pre>
<p>Output</p>
<pre><code>{'cody ': 2, 'melton': 2, 'cody': 1, 'harry': 1}
</code></pre>
<p>In my example above, I passed a <code>pd.Series</code> as its argument, but in your case, you can pass <code>df['name']</code> to it, which is a <code>pd.Series</code> object.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't specify what is the format of your source data, so let's say it's a list of lists:</p>
<pre><code>&gt;&gt;&gt; data = [["cody melton", "apple", 3], ["cody melton", "banana", 5],
            ["cody melton", "banana", 7], ["larisa harris", "apple", 8],
            ["larisa harris", "apple", 5]]
</code></pre>
<p>When you are looking for performance in the "vanilla" python, look at the standard library - in this case <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>; we'll use it to count all unique combos of name-fruit:</p>
<pre><code>&gt;&gt;&gt; pairs = Counter(((x[0], x[1]) for x in data))
&gt;&gt;&gt; pairs
Counter({('cody melton', 'banana'): 2, ('larisa harris', 'apple'): 2, ('cody melton', 'apple'): 1})
</code></pre>
<p>The argument is an iterator, that creates a tuple <code>(name, fruit)</code> out of the source data, and <code>Counter</code> does the counting of their occurrence.</p>
<hr/>
<p><strong>EDIT:</strong> And if you want to count only the ones where the fruit is in a specific set:</p>
<pre><code>fruits = set(['apple', 'banana', 'coconut'])
</code></pre>
<p>, then just add this as a condition in the comprehension:</p>
<pre><code>&gt;&gt;&gt; pairs = Counter(((x[0], x[1]) for x in data if x[1] in fruits))
</code></pre>
<hr/>
<p>We're almost there - what is left is to count the occurrences of the individual names:</p>
<pre><code>&gt;&gt;&gt; names = Counter((pair[0] for pair in pairs))
&gt;&gt;&gt; names
Counter({'cody melton': 2, 'larisa harris': 1})
&gt;&gt;&gt; dict(names)  # this is how to cast it to a regular dict
{'larisa harris': 1, 'cody melton': 2}
</code></pre>
<p>I see you have in your output a "harry barry" with 0 occurrences- they obviously did not appear in the source <code>data</code>, so just add them to the dict with value 0.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just do it:</p>
<pre><code>xx = ['apple', 'apple', 'banana', 'coconut'];
d = dict()

for x in xx:    
    if x in d:
        d[x] += 1
    else:
        d[x] = 1


print (d)
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow noreferrer">docs.python.org/2/library/collections.html#collections.Counter</a></span>
