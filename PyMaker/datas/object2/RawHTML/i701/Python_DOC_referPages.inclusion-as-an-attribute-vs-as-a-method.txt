<div class="post-text" itemprop="text">
<p>In many beginner Python tutorials on OOP, methods dependent only on <code>self</code> are often included.</p>
<p>For example, <a href="https://www.youtube.com/watch?v=ZDa-Z5JzLYM&amp;index=1&amp;list=PL-osiE80TeTsqhIuOqKhwlXsIBIdSeYtc" rel="nofollow noreferrer">a YouTube video</a> includes this example:</p>
<pre><code>class Employee:

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.pay = pay
        self.email = first + '.' + last + '@company.com'

    def fullname(self):
        return '{} {}'.format(self.first, self.last)
</code></pre>
<p>What would influence the decision to include something like this in a method, rather than as an attribute?</p>
<p>For example:</p>
<pre><code>class Employee:

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.pay = pay
        self.email = first + '.' + last + '@company.com'
        self.fullname = "{} {}".format(first, last)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Imagine the following:</p>
<pre><code>class Employee:
    def __init__(self, first, last):
        self.first = first
        self.last = last
        self.fullname = f'{first} {last}'
</code></pre>
<p>This results in:</p>
<pre><code>&gt;&gt;&gt; e = Employee('John', 'Smith')
&gt;&gt;&gt; e.fullname
'John Smith'
&gt;&gt;&gt; e.first = 'Pete'
&gt;&gt;&gt; e.fullname
'John Smith'
</code></pre>
<p>which means the full name is not updated when the first or last name is changed.</p>
<p>If we instead use a property:</p>
<pre><code>class Employee:
    def __init__(self, first, last):
        self.first = first
        self.last = last

    @property
    def fullname(self):
        return f'{self.first} {self.last}'
</code></pre>
<p>We get:</p>
<pre><code>&gt;&gt;&gt; e = Employee('John', 'Smith')
&gt;&gt;&gt; e.fullname
'John Smith'
&gt;&gt;&gt; e.first = 'Pete'
&gt;&gt;&gt; e.fullname
'Pete Smith'
</code></pre>
<p>As you can see, the full name will now update whenever the first or last name updates and they will not get out of sync.</p>
</div>
<div class="post-text" itemprop="text">
<p>Having <code>fullname</code> as a method makes <code>fullname</code> "property" dynamic. If you change first and/or last name and call <code>fullname</code> it will return the expected fullname.</p>
<p>In the code you posted, not clear what is the logic of composing <code>email</code>. If it is strictly "first.last@company.com" then it makes sense to make a method for it as well. From the other side, however, email is normally something user-provided, changing names doesn't necessarily mean email change.</p>
<p>Now, why I put "property" in quotes above: Python (and many other languages) has a notion of <a href="https://docs.python.org/3/howto/descriptor.html#properties" rel="nofollow noreferrer">properties</a>. So fullname is actually a property that is dynamically composed from first and last.</p>
</div>
<span class="comment-copy">Jacob, please could you clarify what you mean by "rather than as an attribute"? I am not sure if you're asking why in python every method takes the class instance as an argument (self), or why people create methods that do "simple" things like the method fullname(), in which case I would ask you what would be a better implementation for you.</span>
<span class="comment-copy">@gmagno, I'm asking why people create "simple" methods. Hopefully the question edit clarifies that.</span>
<span class="comment-copy">def fullname is only evaluated when you explicitly call it, whereas an attribute will be evaluated when the class is instantiated</span>
<span class="comment-copy">let's say after instatiating the class you decide to change 'self.last'. calling the functiin will reflect that change whereas self.fullname would still reflect the 'last' that the class was instatiated with. Which means to keep your variables consistent you would have to remember to update self.fullname as well</span>
<span class="comment-copy">@Jacob: The benefit is, not wasting memory to hold doubled info.</span>
