<div class="post-text" itemprop="text">
<p>For a given array I want to perform a number of right circular rotations. For instance given array <code>[1, 2, 3]</code> and number of rotation as 2, I want to obtain <code>[2, 3, 1]</code>.</p>
<p>For that I have written the a code in Python given below. I have also looked into the solution given in <a href="https://stackoverflow.com/questions/54282194/hackerrank-circular-array-rotation-python">here</a>. However I am looking for an elegant algorithm that can perform it more efficiently using native data structure in Python.</p>
<p>Here is my code:</p>
<pre><code>def circularArrayRotation(a, k):
    for i in range(k):
        temp = [0]*len(a)
        for j in range(len(a)-1):
            temp[j+1] = a[j]
        temp[0] = a[len(a)-1]
        a = temp
a = [1,2,3]
k = 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use this trick : </p>
<pre><code>l = [1, 2, 3]
number_of_rotations = int(input())
number_of_rotations = number_of_rotations % len(l) 

rotated = l[number_of_rotations-1:] + l[:number_of_rotations-1]
print(rotated)
</code></pre>
<p>Look at the trick at line 3. If we rotate a list by its length number of times then we will get the original list back. That's why we don't need to do that. We will rotate that times which will actually effect.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><strong><code>islice</code></strong></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><strong><code>cycle</code></strong></a> from <code>itertools</code> module:</p>
<pre><code>from itertools import islice, cycle

lst = [1, 2, 3]

def rotate(lst, n):
    return list(islice(cycle(lst[::-1]), n, len(lst)+n))
</code></pre>
<p><strong>Usage</strong>:</p>
<pre><code>&gt;&gt;&gt; rotate(lst, 2)[::-1]
[2, 3, 1]
</code></pre>
<p>Alternatively, use <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><strong><code>deque</code></strong></a> from <code>collections</code> module:</p>
<pre><code>from collections import deque

lst = deque([1, 2, 3])
lst.rotate(2)

print(lst)
# [2, 3, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a recursive appraoch:</p>
<pre><code>def circularArrayRotation(a, k):
    if k == 0 or len(a) == 0: 
      return a
    return circularArrayRotation([a[-1]]+a[:-1], k-1)  

print(circularArrayRotation([1, 2, 3], 2))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[2, 3, 1]
</code></pre>
<p>The basic idea behind this is as follows. If you let the function <code>circularArrayRotation</code> be <code>f</code> then our function follows the following steps:</p>
<pre><code>f([1, 2, 3], 2) = f([3] + [1, 2], 1) = f([3, 1, 2], 1)

f([3, 1, 2], 1) = f([2, 3, 1, 0) --&gt; [3, 4, 1, 2] // we return the array instead of another function call as k == 0 (our base case)
</code></pre>
</div>
<span class="comment-copy">Have you seen <a href="https://docs.python.org/2/library/collections.html#collections.deque.rotate" rel="nofollow noreferrer"><code>deque</code></a> from the collections module?</span>
<span class="comment-copy">this is a great answer :) it could be better maybe using itertools.islice and itertools.cycle ... maybe</span>
<span class="comment-copy">I agree ... but i think you need to reverse lst, and then unreverse it after the slice .... in order to get OP's output ... also you should take advantage of the modulo trick to not have to walk 300 rotations through a 3 item list</span>
