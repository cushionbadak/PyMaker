<div class="post-text" itemprop="text">
<p>I have a bunch of very small python scripts that I want to run from the command line. Here is one such example:</p>
<pre><code>import os
for f in os.listdir():
    if not os.path.isdir(f) and f.endswith('.c'):
        dir=f[:-2]
        os.makedirs(dir)
        os.rename( f, dir + '/' + f  )  
</code></pre>
<p>I am abundantly aware that I could save this as a python script (e.g. <code>renamer.py</code>) and run the script like this:</p>
<pre><code>python renamer.py
</code></pre>
<p>However, in compiling a library, I have a lot of these small scripts, and would just like to concatenate these into a single shell script. I just can't figure out the syntax. I thought that the shell script should look like this: </p>
<pre><code>#!/usr/bin/env bash

python -c/
"import os;"/
"for f in os.listdir():;"/
"    if not os.path.isdir(f) and f.endswith('.c'):;"/
"        dir=f[:-2];"/
"        os.makedirs(dir);"/
"        os.rename( f, dir + '/' + f  );"  
</code></pre>
<p>But when I run this I get the error:</p>
<pre><code>  File "&lt;string&gt;", line 1
    /
    ^
SyntaxError: invalid syntax
./py_test.sh: line 4: import os;/: No such file or directory
./py_test.sh: line 5: for f in os.listdir():;/: No such file or directory
./py_test.sh: line 6:     if not os.path.isdir(f) and f.endswith('.c'):;/: No such file or directory
./py_test.sh: line 7:         dir=f[:-2];/: No such file or directory
./py_test.sh: line 8:         os.makedirs(dir);/: No such file or directory
./py_test.sh: line 9:         os.rename( f, dir + '/' + f  );: No such file or directory
</code></pre>
<p>What am I missing here? </p>
</div>
<div class="post-text" itemprop="text">
<p>It would be better to put them in a Python module say <code>x.py</code> as functions and use <code>python -c "import x; x.y()"</code> as the command to call them.</p>
<p>Then you would have a place to put common code and you'd be able to open the file and get Python syntax highlighting.</p>
</div>
<div class="post-text" itemprop="text">
<p>I was waaaay overthinking it. </p>
<p>This works</p>
<pre><code>#!/usr/bin/env bash

python -c "
import os
for f in os.listdir():
    if not os.path.isdir(f) and f.endswith('.c'):
        dir=f[:-2]
        os.makedirs(dir)
        os.rename( f, dir + '/' + f  )  
"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would recommend collecting the functions into a proper <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">Python module</a> (as per Dan D's answer) somewhere on your <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" rel="nofollow noreferrer"><code>PYTHONPATH</code></a>.</p>
<p>Instead of calling <code>python -c "import renamer; renamer.rename()"</code> in the shell script however, I would suggest calling the functions in a single Python script, avoiding shell script altogether:</p>
<pre><code>#!/usr/bin/env python3

import renamer
import other_fun

if __name__ == "__main__":
    renamer.rename()
    ...
</code></pre>
</div>
<span class="comment-copy">Makes sense....</span>
<span class="comment-copy">Glad you've found a shell script that works for you, but I would recommend not doing this. A better solution would be saving a bunch of scripts somewhere and running <code>python renamer.py</code> as per your example. However, a better solution still would be to collect the functions into a <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">proper library</a> (<code>def renamer</code>, <code>def other_function</code> etc.) and call the functions in a single Python script, instead of using a shell script at all.</span>
<span class="comment-copy">That's not grounds for downvoting this perfectly good solution though. If this is really all you need, the answer is fine.</span>
