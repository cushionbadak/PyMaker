<div class="post-text" itemprop="text">
<p>I have a sequence of events. 1's are good, 0s are bad.
Looking for the most Pythonic way of finding the maximum, minimum and average length of 1 sequences.</p>
<p>For example:</p>
<pre><code>seq ="001000000000001101001000000000111100001000000011000010000010001100000110011001000010000010101100001110110001000000100100000011000000001000001000101001000000001000010000010011011000100001000011100000001100010001010100100011011000001000000100010110001101100000000100001000001"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One approach would be splitting your string on zeros, dropping empty strings, mapping by length, and sorting:</p>
<pre><code>wins = sorted(map(len, filter(None, seq.split("0"))))
</code></pre>
<p>After that your shortest streak would be at index zero, the longest one would be at the last index (accessible with <code>-1</code>) and the average would be easily computable by applying <code>sum</code> and dividing by length converted to <code>float</code>:</p>
<pre><code>print(wins[-1])                     # 4
print(wins[0])                      # 1
print(sum(wins) / float(len(wins))) # 1.4339622641509433
</code></pre>
<p><a href="http://ideone.com/ywJFku" rel="nofollow">Demo.</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this using list comprehensions and the <code>len</code> function to get the list of <em>wins</em> length but before that you need to split your string on zeros using the <code>split</code> method.</p>
<pre><code>seq = "001000000000001101001000000000111100001000000011000010000010001100000110011001000010000010101100001110110001000000100100000011000000001000001000101001000000001000010000010011011000100001000011100000001100010001010100100011011000001000000100010110001101100000000100001000001"
&gt;&gt;&gt; wins_len = [len(el) for el in seq.split('0') if el]
&gt;&gt;&gt; max(wins_len)
4
&gt;&gt;&gt; min(wins_len)
1
</code></pre>
<p>To compute the average use <code>sum</code> and <code>len</code></p>
<pre><code>&gt;&gt;&gt; sum(wins_len) / len(wins_len)
1.4339622641509433
</code></pre>
<p>or the <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow"><code>mean</code></a> function from the <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow">statistics</a> module new in Python 3.4</p>
<pre><code>&gt;&gt;&gt; from statistics import mean
&gt;&gt;&gt; mean(wins_len)
1.4339622641509433
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not very Pythonic, but I would catch all the ones with regex like this :</p>
<pre><code>(1{1,})
</code></pre>
<p><a href="https://regex101.com/r/mE0tA2/1" rel="nofollow">Demo</a></p>
<p>and then proceed like this, </p>
<pre><code>&gt;&gt;&gt; s=re.findall(r'(1{1,})',a)
&gt;&gt;&gt; length_of_ones=[len(i) for i in s]
&gt;&gt;&gt; max(length_of_ones)
4
&gt;&gt;&gt; min(length_of_ones)
1
&gt;&gt;&gt; sum(length_of_ones)*1.0/len(length_of_ones)
1.4339622641509433
</code></pre>
<p>where a is your given string.</p>
</div>
<span class="comment-copy">thanks - this version combined with the mean convenience function handled edge cases better</span>
