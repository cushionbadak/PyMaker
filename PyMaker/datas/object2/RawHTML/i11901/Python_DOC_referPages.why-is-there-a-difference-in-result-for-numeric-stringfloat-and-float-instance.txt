<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction(2.6)
**Fraction(5854679515581645, 2251799813685248)**
&gt;&gt;&gt; Fraction(2.6).limit_denominator(10)
Fraction(13,2)
&gt;&gt;&gt; Fraction('2.6') #Fraction(str(2.6)) or Fraction(repr(2.6))
**Fraction(13,2)**
</code></pre>
<p>Why doesn't Fraction return closest fraction for float instances?</p>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/3/library/fractions.html?highlight=fraction#module-fractions" rel="nofollow">the documentation</a>:</p>
<blockquote>
<p>Note that due to the usual issues with binary floating-point (see <a href="https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues" rel="nofollow">Floating Point Arithmetic: Issues and Limitations</a>), the argument to <code>Fraction(1.1)</code> is not exactly equal to <code>11/10</code>, and so <code>Fraction(1.1)</code> does <em>not</em> return <code>Fraction(11, 10)</code> as one might expect. (But see the documentation for the <a href="https://docs.python.org/3/library/fractions.html?highlight=fraction#fractions.Fraction.limit_denominator" rel="nofollow"><code>limit_denominator()</code></a> method below.)</p>
</blockquote>
<p>Basically, <code>2.6</code> cannot be precisely represented in binary. The Issues and Limitations link in the above excerpt goes into much more detail.</p>
<p>As suggested, you can use <code>limit_denominator()</code> to help here:</p>
<pre><code>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; Fraction(2.6)
Fraction(5854679515581645, 2251799813685248)
&gt;&gt;&gt; Fraction(2.6).limit_denominator(100)
Fraction(13, 5)
</code></pre>
<p>Alternatively, you can use string inputs (which you seem to have already discovered).</p>
</div>
<span class="comment-copy">The limit denominator method doesn't always solve the problem, and may also give inaccurate result. eg. <code>Fraction(2.36)</code> returns large integers , <code>Fraction(2.36).limit_denominator(10)</code> returns <code>Fraction(19,8)</code> which is 2.375. The closest fraction is 59/25. How is one supposed to know the max limit of denominator? or rather what is a good range/estimate for a limit?</span>
<span class="comment-copy">That is correct. "How is one supposed to know the max limit of denominator?" My advice is to avoid the problem when you can by converting your arguments to strings (e.g. <code>Fraction(str(2.36))</code>). But this won't always work; some values simply <i>cannot</i> be precisely represented by fractions. If you set your denominator limit to be on the order of the number of digits in your argument rounded up you should be okay, assuming you're working in base 10. Since <code>2.36</code> contains three digits, use <code>10**3</code> as your denominator limit.</span>
<span class="comment-copy">Won't it be 10**2? 236/1 ?</span>
