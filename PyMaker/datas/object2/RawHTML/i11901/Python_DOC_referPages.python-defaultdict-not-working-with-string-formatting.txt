<div class="post-text" itemprop="text">
<p>This is easy-peasy:</p>
<pre><code>'foo {bar}'.format(**{'bar': 0})
</code></pre>
<p>This doesn't work, yielding a <code>KeyError</code>:</p>
<pre><code>from collections import defaultdict
d = defaultdict(int)
'foo {bar}'.format(**d)
</code></pre>
<p>Is there a way to accommodate a <code>defaultdict</code> in string formatting?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>**</code> unpacking produces a <code>dict</code>, which is why this isn't working. If you're running Python 3.2 or higher though, you can pass the <code>defaultdict</code> without unpacking to <a href="https://docs.python.org/3/library/stdtypes.html#str.format_map"><code>str.format_map</code></a> which exists for precisely the purpose of passing non-<code>dict</code> mapping types:</p>
<pre><code>'foo {bar}'.format_map(d)
</code></pre>
<p><strong>Edit</strong>: Apparently, in Python 3.5 at least, <code>'foo {bar}'.format(**d)</code> actually does work with a <code>defaultdict(int)</code>, and <code>d</code> is modified (after the formatting, the <code>repr</code> is <code>defaultdict(&lt;class 'int'&gt;, {'bar': 0})</code>), so it looks like in modern Python, <code>format_map</code> may not be necessary for subclasses of <code>dict</code>. Interesting.</p>
</div>
<div class="post-text" itemprop="text">
<p>Given another answer and in a comment, apparently that <em>does</em> work in Python3, but in Python2 you need to do something a little more hackish:</p>
<pre><code>from string import Formatter
from collections import defaultdict

mystring = 'foo {bar}'
d = defaultdict(int)
parts = Formatter().parse(mystring)
newstring = mystring.format(**{part[1]: d[part[1]] for part in parts})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on <a href="https://stackoverflow.com/a/36273585/355230">@zondo's answer</a> (and to a small degree, <a href="https://stackoverflow.com/a/36273526/355230">@ShadowRanger's</a>), you could do something like this which worked correctly in both Python 2.7.11 and 3.5.1 for me.</p>
<pre><code>from string import Formatter
from collections import defaultdict

def string_format_map(fmt, d):
    try:
        str.format_map
    except AttributeError:
        parts = Formatter().parse(fmt)
        return fmt.format(**{part[1]: d[part[1]] for part in parts})
    else:
        return fmt.format(**d)

d = defaultdict(int)
print(string_format_map('foo {bar}', d))
</code></pre>
</div>
<span class="comment-copy">Keyword arguments are passed as a dictionary, not a <code>defaultdict</code>.  I highly doubt that there is an easy way.</span>
<span class="comment-copy">This seems to work in modern Python. What version are you using?</span>
<span class="comment-copy">Fails in 2.7.10</span>
<span class="comment-copy">Damn, guess I'm stuck as I'm using 2.7.10.</span>
