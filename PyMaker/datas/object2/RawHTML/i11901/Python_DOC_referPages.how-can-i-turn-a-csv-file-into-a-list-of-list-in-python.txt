<div class="post-text" itemprop="text">
<p>I want to be able to turn csv file into a list of lists with the column values for each list. For example:</p>
<pre><code>6,2,4
5,2,3
7,3,6
</code></pre>
<p>into</p>
<pre><code>[[6,5,7],[2,2,3],[4,3,6]]
</code></pre>
<p>Ive only managed to open the file and only having success printing it as rows</p>
<pre><code>with open(input,'rb') as csvfile:
        csv_file = csv.reader(csvfile)

        header = csv_file.next() 

        raw_data = csv_file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you sure it's fixed number of items in each row, you can use <a href="https://docs.python.org/3.5/library/functions.html#zip" rel="nofollow">zip</a>:</p>
<pre><code>import csv

with open('test.csv') as csvfile:
    rows = csv.reader(csvfile)
    res = list(zip(*rows))
    print(res)
    # [('6', '5', '7'), ('2', '2', '3'), ('4', '3', '6')]
</code></pre>
<p>Or in case it's different number of items in row:</p>
<pre><code>6,2,4
5,2
7
</code></pre>
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow">zip_longest</a> and <a href="https://docs.python.org/3.5/library/functions.html#filter" rel="nofollow">filter</a>:</p>
<pre><code>import csv
from itertools import zip_longest

with open('test.txt') as csvfile:
    rows = csv.reader(csvfile)

    res = list(zip_longest(*rows))
    print(res)
    # [('6', '5', '7'), ('2', '2', None), ('4', None, None)]

    res2 = [list(filter(None.__ne__, l)) for l in res]
    print(res2)
    # [['6', '5', '7'], ['2', '2'], ['4']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could probably start by reading it into a list of lists first:</p>
<pre><code>from csv import reader as csvreader
with open(input, 'r') as fp:
    reader = csvreader(fp)
    li = list(reader)
</code></pre>
<p>Then chop it into a new sequence, I'm sure there are other tricks with itertools but this is what I came up with:</p>
<pre><code>from itertools import count
def my_gen():
    for i in count():
        try:
            yield [x[i] for x in li]
        except IndexError:
            break
</code></pre>
<p>You can now turn the generator into a list, which will have the desired columns as rows. </p>
<pre><code>list(my_gen())
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/16503560/read-specific-columns-from-csv-file-with-python-csv" title="read specific columns from csv file with python csv">stackoverflow.com/questions/16503560/â€¦</a></span>
<span class="comment-copy">import csv  aList =[] with open('/Users/YYY/Desktop/Workbook1.csv', 'rU') as f:     reader = csv.reader(f)     for row in reader:         aList.append( row )     print aList # [['6', '2', '4'], ['5', '2', '3'], ['7', '3', '6']]</span>
<span class="comment-copy">output needs to be arranged by columns so [[6,5,7],[2,2,3],[4,3,6]]</span>
<span class="comment-copy">or izip from itertools if you're using python2.x, and avoid turning it into a list unless you really NEED a list :-)</span>
<span class="comment-copy">@germn's answer is better than mine. zip/izip essentially does what my my_gen does.</span>
