<div class="post-text" itemprop="text">
<p>I have this function:</p>
<pre><code>def findScore(g):
    gLetter = ["A", "B", "C", "D", "F"]
    gPoint = [4.0, 3.0, 2.0, 1.0, 0.0]

    for i, v in enumerate(gLetter):
        if v==g:
            gp = gPoint[i]
    return gp
</code></pre>
<p>And I want to take number of subjects, then take grade letter of each by calling "findScore' and then return GPA by using one more fucntion like this:</p>
<pre><code>def findGPA(n, list):
</code></pre>
<p>Noted:</p>
<ol>
<li><p>number of subject (n) and a list of grade letters (list)"</p></li>
<li><p>findGPA() must call findScore() to turn each grade letter to grade point.</p></li>
</ol>
<p>What is the function body ?</p>
<p>I want the output should be like:</p>
<pre><code>&gt;&gt;&gt; findGPA(3, ['A', 'B', 'C'])
3.0
&gt;&gt;&gt; findGPA(4, ['B', 'B', 'C', 'B'])
2.75
'''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>findGPA</code> doesn't actually <em>need</em> its first argument like you've proposed, because you could just find the length of the list of grade letters.</p>
<p>You can use your <code>findScore</code> function with a list comprehension to work out the score for each grade, and then sum these with the <code>sum</code> function. Finally, this is divided by the length of the scores list, found with the <code>len</code> function.</p>
<p>This can be done like so:</p>
<pre><code>def findGPA(grades):
    return sum([findScore(x) for x in grades]) / max(len(grades), 1)
</code></pre>
<p>This then gives your desired output:</p>
<pre><code>&gt;&gt;&gt; findGPA(['A', 'B', 'C'])
3.0
&gt;&gt;&gt; findGPA(['B', 'B', 'C', 'B'])
2.75
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a dictionary for the grade scores, then simply do lookups for each grade in the list passed in, sum the divide by the number of grades:</p>
<pre><code>def  grd_dict():
    gLetter = ["A", "B", "C", "D", "F"]
    gPoint = [4.0, 3.0, 2.0, 1.0, 0.0]
    return dict(zip(gLetter, gPoint))


def find_gpa(num, grds):
    scores = grd_dict()
    return sum((scores[g] for g in grds),0.0) / num
</code></pre>
<p>Output:</p>
<pre><code>In [2]: find_gpa(4, ['B', 'B', 'C', 'B'])
Out[2]: 2.75

In [3]: find_gpa(3, ['A', 'B', 'C'])
Out[3]: 3.0
</code></pre>
<p>Personally I would do it all in a single function and just take a list of grades, you can get the number of subjects from the list passed in so num is not really needed.</p>
<p>A dict is the most efficient way to do your lookups but if you have to use lists maybe then you can use a the logic closely related  to an example in the <a href="https://docs.python.org/2/library/bisect.html#other-examples" rel="nofollow">biect</a> docs:</p>
<pre><code>from bisect import bisect_left

def grade(g):
    g_point = [4, 3, 2, 1, 0]
    grades = 'ABCDF'
    i = bisect_left(grades, g)
    return g_point[i]


def find_gpa(grds):
    return sum((grade(g) for g in grds), 0.0) / (len(grds) or 1)
</code></pre>
<p><code>(len(grds) or 1)</code> will also handle an empty list:</p>
<pre><code>In [44]: find_gpa(['F', 'F', 'F'])
Out[44]: 0.0

In [45]: find_gpa(['B', 'B', 'C', 'B'])
Out[45]: 2.75

In [46]: find_gpa(['A', 'B', 'C'])
Out[46]: 3.0

In [47]: find_gpa([])
Out[47]: 0.0
</code></pre>
<p>Using bisect you can search a sorted structure in <code>log(n)</code> time as opposed to potentially looking at every element.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually you don't need two functions for this also you can completly remove the first argument to your <code>find_gpa</code> function and use the built-in <a href="https://docs.python.org/2/library/functions.html#len" rel="nofollow"><code>len</code></a> function.</p>
<pre><code>&gt;&gt;&gt; gLetter = ["A", "B", "C", "D", "F"]
&gt;&gt;&gt; gPoint = [4.0, 3.0, 2.0, 1.0, 0.0]
&gt;&gt;&gt; mapped_values = dict(zip(gLetter, gPoint))
&gt;&gt;&gt; def find_gpa(score):
...     return sum(mapped_values[g] for g in score) / len(score)
... 
&gt;&gt;&gt; find_gpa(['A', 'B', 'C'])
3.0
</code></pre>
<p><em>If you are on Python 3.4 or newer</em> you can use the <a href="https://docs.python.org/3/library/statistics.html#statistics.mean" rel="nofollow"><code>mean</code></a> function from the <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow">statistics</a> module.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from statistics import mean
&gt;&gt;&gt; def find_gpa(score):
...     return mean(mapped_values[g] for g in score)
... 
&gt;&gt;&gt; find_gpa(['B', 'B', 'C', 'B'])
2.75
&gt;&gt;&gt; find_gpa(['A', 'B', 'C'])
3.0
</code></pre>
</div>
<span class="comment-copy">What is the first argument of <code>findGPA</code> supposed to do?</span>
<span class="comment-copy">oh I just want to do some function more from the first argument</span>
<span class="comment-copy">You <i>may</i> want to divide by <code>max(len(grades),1)</code> to avoid a division by zero in case the array is empty.</span>
<span class="comment-copy">@JoachimIsaksson Thanks, I've changed my answer.</span>
<span class="comment-copy">Isn't better to combine both functions into one?...Is there any particular reason for having two besides OP design?</span>
<span class="comment-copy">@IronFist, if you were repeatedly finding gpa's say in a loop for multiple users I would first call   <code>scores = grd_dict()</code> then for each user just use that dict, if it were one call per run I would just do it all in the one function. I only really used the two in this case to match the OP.</span>
<span class="comment-copy">Just pass the list of grades g and use the len of g in place of num</span>
