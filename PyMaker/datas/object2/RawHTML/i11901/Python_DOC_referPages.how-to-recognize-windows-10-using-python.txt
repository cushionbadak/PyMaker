<div class="post-text" itemprop="text">
<pre><code>import platform 
if platform.release() == 'post2008Server' and platform.version() ==   '6.2.9200':
     print "It's windows 8"
</code></pre>
<p>I have used this before to recognize Windows 8.
But it's returning same for Windows 10. So is there any other way to recognize it ?</p>
</div>
<div class="post-text" itemprop="text">
<p>With the following Python versions everything works fine.</p>
<p>Python 3.5.1:</p>
<pre><code>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.release()
'10'
&gt;&gt;&gt; platform.version()
'10.0.10240'
</code></pre>
<p>Python 2.7.11</p>
<pre><code>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.release()
'10'
&gt;&gt;&gt; platform.version()
'10.0.10240'
</code></pre>
<p>How about upgrading to at least 2.7.x ?</p>
<hr/>
<p>Edit: As mentioned by @Rogalski, you can always pipe the <code>ver</code> command, and this should return the following independently of the Python version:</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; subprocess.Popen('ver', shell=True, stdout=subprocess.PIPE).communicate()[0]
'\r\nMicrosoft Windows [Version 10.0.10240]\r\n'
</code></pre>
</div>
<span class="comment-copy">I donâ€™t have a Windows 10 here atm., can you check <a href="https://docs.python.org/3/library/platform.html#windows-platform" rel="nofollow noreferrer"><code>platform.win32_ver</code></a>?</span>
<span class="comment-copy">If everything fails, you could call the <code>systeminfo</code> executable using <code>subprocess</code> and parse the information it gives you.</span>
<span class="comment-copy">Cannot repro; I get <code>10.0.10586</code> from both <code>version()</code> and <code>win32_ver()</code></span>
<span class="comment-copy">Note that Python 2.6 effectively ended support in 2013, so it may well be that Python 2.6 simply does not support the fine-grained Windows version detection here. You should consider upgrading to Python 2.7 (which should be mostly painless), or even a current Python 3 release (3.5 at the moment).</span>
<span class="comment-copy">In Python 2.6? <code>subprocess.Popen('ver', shell=True, stdout=subprocess.PIPE).communicate()[0]</code></span>
<span class="comment-copy">As of now I cant switch to 2.7 due to some dependencies, so I will go with second option. Thanks for your help.</span>
<span class="comment-copy">@Deepak, for a GUI app you can add the <code>Popen</code> option <code>creationflags=8</code> to avoid creating a console window. 8 is the value of the <code>DETACHED_PROCESS</code> flag. In this case Windows won't create or attach a console (i.e. conhost.exe) to the cmd.exe process.</span>
