<div class="post-text" itemprop="text">
<p>Why does this:</p>
<pre><code>del a[:]
</code></pre>
<p>delete all entries in the list <code>a</code>?</p>
<p>As far as I understand, <code>a[:]</code> returns a copy of <code>a</code>. So shouldn't <code>del a[:]</code> delete the copy of <code>a</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3.5/tutorial/datastructures.html#the-del-statement" rel="nofollow"><code>del</code></a> is a special statement that will check the original value and delete it using the given slice.<br/>
It calls <a href="https://docs.python.org/3/reference/datamodel.html#object.__delitem__" rel="nofollow"><code>__delitem__</code></a> on the object and the object itself handles the deletion.</p>
<p>If you're curious regarding the operation happening under the hood, you're welcome to implement the following class and use the <code>del</code> statement with different slices or key references:</p>
<pre><code>class A:
    def __delitem__(self, key):
        print(key)
</code></pre>
<p>The test in the interpreter:</p>
<pre><code>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; del a[:]
slice(None, None, None)
&gt;&gt;&gt; del a[2]
2
&gt;&gt;&gt; del a["test"]
test
</code></pre>
</div>
<span class="comment-copy">Because that's what it's defined to do? <code>del</code> is a statement, not a function, so it's not like you're passing a slice to it.</span>
<span class="comment-copy"><code>a[:]</code> doesn't return a copy it returns a slice, for example <code>a[:] = [1,2]</code> replaces the contents of <code>a</code> not a copy of <code>a</code>. Similarly <code>del</code> on a slice is defined as deleting the elements of that slice.</span>
<span class="comment-copy">So if I do <code>del a[:]</code> it calls <code>a.__delitem__(i)</code> for every <code>i</code>  within the slice, but if I do <code>del a</code> it just deletes the object <code>a</code> itself?</span>
<span class="comment-copy">@spiderface It hands over <code>slice(None, None, None)</code> to <code>a.__delitem__</code> if you use <code>a[:]</code> but if you do <code>del a</code> it indeed deletes the object (by removing the reference and if no other reference exists it calls the object's <code>__del__</code> and deletes it)</span>
<span class="comment-copy">@spiderface: Not exactly. If you <code>del a</code>, then that reference to the <code>list</code> goes away, but if it is referenced elsewhere, those references are unchanged. <code>del a[:]</code> releases the references to the <i>contents</i> of <code>a</code>, so both <code>a</code> and any other reference to that <code>list</code> now see an empty <code>list</code>.</span>
<span class="comment-copy">@Bharel: It only calls the <code>__del__</code> if the last reference was released; it's important to distinguish releasing references (can happen many times) from actually deleting the object (happens once, when the final reference is released).</span>
<span class="comment-copy">@ShadowRanger edited the comment at the same time of your post ;-)</span>
