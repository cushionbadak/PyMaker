<div class="post-text" itemprop="text">
<p>I am trying to get the sum of certain numbers from a file without changing the file itself</p>
<pre><code>1 #person number
Marlon Holmes  #Name
18.86 # First number
13.02 # Second Number
13.36 # Third Number
</code></pre>
<p>For the sum of numbers, it needs to be the #First, #second and #third number</p>
<p>The numbers currently are in cm which have been converted to inches which the two decimal places are necessary for </p>
<p>My code at present is to provide the top 3 people based on the sum of the #first,#second and #third numbers.</p>
<p>Current code:</p>
<pre><code>data = []
names = OrderedDict([('Competitor Number', int),
    ('Competitor Name', str),
    ('Cucumber', to_inch),
    ('Carrot', to_inch),
    ('Runner Bean', to_inch)])

with open('veggies_2016.txt') as fobj:
    while True:
        item = {}
        try:
            for name, func in names.items():
                item[name] = func(next(fobj).strip())
            data.append(item)
        except StopIteration:
            break
sorted_data = sorted(data, key=itemgetter('Runner Bean'), reverse = True)
for entry in sorted_data[:3]:
    for key, value in entry.items():
        print value
    print
</code></pre>
<p>There are about 50 records in the file that im reading from, which the sum must be added up for all then put in order to find the top 3 and ideally in two decimal places</p>
<p>Code referring to to_inch:</p>
<pre><code>def to_inch(cm):
    return float(cm) / 2.54
</code></pre>
<p>The whole document works around a main menu</p>
<p>To get the sum, I have tried <code>sum(item.entry.items())</code> but with no success and have also tried <code>"%.2f"</code> for the decimal figures/significant figures but with no success, any help would be appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p>If we disregard reading from the file for now and assume we can put the numbers in a <code>list</code> we can use Python's <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow"><code>round()</code></a>, <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow"><code>sum()</code></a>, and <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map()</code></a>.</p>
<p><strong>Code:</strong></p>
<pre><code>numbers = [18.86, 13.02, 13.36]

def to_inch(cm):
    return cm/2.54

numbers_in_inches = list(map(to_inch, numbers))
print(numbers_in_inches)

numbers_rounded = list(map(round, numbers_in_inches, [0 for _ in numbers]))
print(numbers_rounded)

sum_numbers = sum(numbers_rounded)
print(sum_numbers)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>[7.4251968503937, 5.125984251968504, 5.259842519685039]
[7.0, 5.0, 5.0]
17.0
</code></pre>
<p><strong>What is happening:</strong></p>
<ol>
<li>Mapped your function <code>to_inch</code> on each of the items in the list <code>numbers</code></li>
<li>Mapped Python's <code>round()</code> function onto each the values in <code>numbers_in_inches</code>, the reasoning for the list comprehension on the end is it creates a list of <code>0</code>'s for <code>map()</code> to use for <code>round(number, places)</code>'s <code>places</code>.</li>
<li>Uses Python's <code>sum()</code> to take the sum of all of the numbers, of course, you can just use <code>round(sum_numbers, 0)</code> if you want to round after the sum. <em>Note:</em> If you want to round <strong>after</strong> you sum, use <code>math.fsum</code> instead of <code>sum</code> as mentioned by Copperfield in the comments.</li>
</ol>
<p><strong>Now to parse the file:</strong></p>
<pre><code>import re

numbers_names = {}
numbers = []
player_number = ''
name = ''

with open('file.txt', 'r') as f:
    for line in f:
        if '#person number' in line:
            player_number = int(line.split('#')[0])
        elif '#Name' in line:
            name = line.split('#')[0]
        else:
            line_numbers = re.sub(r"[^\d.]", "", line)
            if '.' in line_numbers:
                numbers.append(float(line_numbers))
        if len(numbers) &gt;= 3 and player_number and name:
            numbers_names.update({'player_number': player_number, 'name': name,  'numbers': numbers})
            numbers, player_number, name = [], 0, ''

print(numbers_names)
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>{'name': 'Marlon Holmes  ', 'numbers': [18.86, 13.02, 13.36], 'player_number': 1}
</code></pre>
<p><strong>How It's parsing the file:</strong></p>
<ol>
<li>First opens the file.</li>
<li>Next iterates over each line in the file.</li>
<li><p>For each line in the file, it sees whether it's a line containing the player's name, the players number, or the numbers that he has.</p>
<ul>
<li><p><strong>Player Number</strong> Splits line into the note and the data then takes the data and sets it equal to <code>player_number</code>.</p></li>
<li><p><strong>Name</strong> Splits line into the note and the data then takes the data and sets it equal to <code>name</code></p></li>
<li><strong>Numbers He Has</strong> It removes all non-word characters except for <code>.</code> in the file using <code>re</code>'s <code>re.sub()</code>. Then, checks to see if there is a decimal in the cleaned-up line. Finally, if so it appends the line to <code>numbers</code>.</li>
</ul></li>
<li><p>If all three values are present, it appends them all to the <code>numbers_names</code> dictionary and resets the variables for the next player.</p></li>
</ol>
</div>
<span class="comment-copy">It's <code>"%.2f"</code> by the way.</span>
<span class="comment-copy">must have mis typed</span>
<span class="comment-copy">How would i get this to work with all the numbers coming from the file?</span>
<span class="comment-copy">Parse the file and put all the numbers into a list called <code>numbers</code>.</span>
<span class="comment-copy">How would i do that around the code i already have?</span>
<span class="comment-copy">@NeilHouston Updated</span>
<span class="comment-copy">@NeilHouston you can add the rounding part to <code>to_inch</code> like this: <code>return round( float(cm)/2.54, 2)</code> where the 2 is if you want 2 decimal places, or any other number that you want</span>
