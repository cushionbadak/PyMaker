<div class="post-text" itemprop="text">
<p>In the following code fragment function <code>f</code> gets executed as expected:</p>
<pre><code>def f():
  print('hi')
f() and False
#Output: 'hi'
</code></pre>
<p>But in the following similar code fragment <code>a</code> doesn't increment:</p>
<pre><code>a=0
a+=1 and False
a
#Output: 0
</code></pre>
<p>But if we shortcircuit with  True instead of False <code>a</code> gets incremented:</p>
<pre><code>a=0
a+=1 and True
a
#Output: 1
</code></pre>
<p>How does shortcircuit work for this to run this way?</p>
</div>
<div class="post-text" itemprop="text">
<p>That's because <code>f() and False</code> is an expression (technically a single-expression statement) whereas <code>a += 1 and False</code> is an assignment statement. It actually resolves to <code>a += (1 and False)</code>, and since <code>1 and False</code> equals <code>False</code> and <code>False</code> is actually the integer 0, what happens is <code>a += 0</code>, a no-op.</p>
<p><code>(1 and True)</code>, however, evaluates to <code>True</code> (which is the integer 1), so <code>a += 1 and True</code> means <code>a += 1</code>.</p>
<p>(also note that Python's <code>and</code> and <code>or</code> always return the first of their operands that can unambiguously determine the result of the operatio)</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe that </p>
<pre><code>a+=1 and False
</code></pre>
<p>is equivalent to</p>
<pre><code>a+=(1 and False)
</code></pre>
<p>and</p>
<pre><code>a+=1 and True
</code></pre>
<p>is equivalent to</p>
<pre><code>a+=(1 and True)
</code></pre>
<p>For example:</p>
<pre><code>In [15]: a = 0

In [16]: a+=2 and True

In [17]: a
Out[17]: 1
</code></pre>
</div>
<span class="comment-copy">It might be worth clarifying "<code>(1 and True)</code> evaluates to <code>True</code> which is the integer 1."</span>
<span class="comment-copy">Indeed. Good catch.</span>
<span class="comment-copy">Shouldn't  <code>a += 1 and False</code> resolve to <code>a = (a + 1) and False</code> as <code>+</code> operator has <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">higher precedence</a> then the whole expression resolve to <code>a = False</code>?</span>
<span class="comment-copy">No, because <code>+=</code> is not an operator, it's an assignment instruction (statement, not expression). Assuming <code>__iadd__</code> is not overridden, <code>a += b</code> first evaluates <code>a</code>, then evaluates <code>b</code>, then adds the two together and reassigns the result to <code>a</code>.</span>
<span class="comment-copy">Yep, that's it. In python assignment does not return value as in C.</span>
