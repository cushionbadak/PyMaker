<div class="post-text" itemprop="text">
<p><code>sys.getsizeof</code> is returning different size for a unicode string on different versions of python.</p>
<p><code>sys.getsizeof(u'Hello World')</code> return <code>96</code> on <code>Python 2.7.3</code> and returns <code>72</code> on <code>Python 2.7.11</code> </p>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.getsizeof</code> is giving you implementation details by definition, and none of those details are guaranteed to remain stable between versions or even builds.</p>
<p>It's unlikely that anything significant changed between 2.7.3 and 2.7.11 though; YOU's comment on character width likely explains the discrepancy; including the internally stored NUL terminator, there are 12 characters in <code>Hello World</code>, and UCS4 encoding would require 24 more bytes to store them than UCS2 encoding (but in exchange, it could handle non-<a href="https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane" rel="nofollow">BMP</a> characters).</p>
<p>Other things that could change size (in other circumstances) would be 32 vs. 64 bit builds (all pointers and <code>ssize_t</code>s double in size on 64 bit builds, as do <code>long</code>s on non-Windows machines), Python 2 vs. Python 3 (Python 3 removed a single pointer width field from the common object header), and for <code>str</code>, Python 3.2 (which uses build option specified fixed width UCS2 or UCS4 <code>str</code>, same as Py2 <code>unicode</code>) vs. Python 3.3+ (which <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-393-flexible-string-representation" rel="nofollow">uses one of three different fixed widths depending on the largest ordinal in the <code>str</code></a>, so an ASCII/latin-1 <code>str</code> uses one byte per character, a BMP <code>str</code> uses two, and a non-BMP <code>str</code> uses four, but can also cache alternate representations, so the same <code>str</code> can grow or shrink in "real" size based on usage).</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>sys.getsizeof
  Can differ on different computers. However I think this can solve your issues. Take the size of a string for example and subtract the size of an empty string.</p>
</blockquote>
<p><code>
import sys
def get_size_of_string(s):
   return sys.getsizeof(s)-sys.getsizeof("")
a=get_size_of_string("abc")
print (a)
</code></p>
</div>
<span class="comment-copy">looks like UCS4 and UCS2 builds</span>
<span class="comment-copy">@YOU yes one was compiled with UCS4 and other with UCS2. thanks.</span>
