<div class="post-text" itemprop="text">
<p>Trying to remove min and max values from two dimensional list in array.
My code:</p>
<pre><code>myList = [[1, 3, 4], [2, 4, 4], [3, 4, 5]]
maxV = 0
minV = myList[0]0]
for list in myList:
   for innerlist in list:
      if innerlist &gt; maxV:
         maxV = innerlist
      if innerlist &lt; minV:
         minV = innerlist
   innerlist.remove(maxV)
   innerlist.remove(minV)
print(myList)
</code></pre>
<p>This causes me some erros, which i not particulary understand. I'm quite sure that innerlist is not array but ordinary variable. But still i think it should be somehow possible to remove min and max elements from two dimensional list.
I mean I need to remove in every innerlist in my list highest and lowest values.
LF help!
Regards.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just for the sake of showing a much simpler way of doing this using <code>list comprehensions</code>, the <code>sorted</code> method and <code>slicing</code>:</p>
<pre><code>d = [[1, 3, 4], [2, 4, 4], [3, 4, 5]]

n = [sorted(l)[1:-1] for l in d]

print(n)

# [[3], [4], [4]]
</code></pre>
<p>Some reading material on each of the items used to solve this problem: </p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list
comprehension</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">sorted</a></li>
<li><a href="https://stackoverflow.com/a/509295/1832539">slicing</a></li>
</ul>
<p>To take care of duplicates, <a href="https://stackoverflow.com/a/36224499/1832539">this</a> answer by Padraic is very well done. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to remove all occurrences, you will have to find the min and max and remove all occurrence from each sublist:</p>
<pre><code>def remove(l):
    for sub in l:
        t = {min(sub), max(sub)}
        sub[:] = (ele for ele in sub if ele not in t)


l = [[1, 3, 4], [1, 2, 4, 4], [3, 4, 5]]

remove(l)
</code></pre>
<p>Which will give you:</p>
<pre><code>[[3], [2], [4]]
</code></pre>
<p>To find the min and max in a single pass you can use a helper function:</p>
<pre><code>def min_max(sub):
    # all numbers are &gt; float("-inf") and &lt; float("inf")
    mx, mn = float("-inf"), float("inf")
    for ele in sub:
        if ele &lt; mn:
            mn = ele
        if ele &gt; mx:
            mx = ele
    return {mn, mx}

def remove(l):
    for sub in l:
        # find min and max
        mn_mx = min_max(sub)
        # update sublist so all occurrences of either are removed
        sub[:] = (ele for ele in sub if ele not in mn_mx)
</code></pre>
<p>Even if your own logic worked and you wanted to remove all the elements equal to the max, it would not work using remove as it will only remove the first occurrence each time.</p>
<pre><code>In [8]: l = [1,2,3,4,4]

In [9]: l.remove(4)

In [10]: l
Out[10]: [1, 2, 3, 4]
</code></pre>
<p>Based on one of your comments you seem to have strings in your sublists which will error when compared to an int, if the string is always the first element you can slice it off:</p>
<pre><code>   from itertools import islice

   def remove(l):
        for sub in l:
            sub = sub[1:]
            mn_mx = min_max(sub)
            sub[:] = (ele for ele in sub if ele not in mn_mx)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this approach:</p>
<p>foreach innerlist:</p>
<ol>
<li>sort the array</li>
<li>remove the first element</li>
<li>remove the last element</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>It should work like this:</p>
<pre><code>myList = [[1, 3, 4], [2, 4, 4], [3, 4, 5]]
for list in myList:
   maxV = list[0] #initialise them here
   minV = list[0] #because you look for max in list
   for value in list:
      if value&gt; maxV:
         maxV = innerlist
      if value&lt; minV:
         minV = innerlist
   list.remove(maxV) #remove from list
   list.remove(minV)
print(myList)
</code></pre>
<p>Your errors where:</p>
<ol>
<li><code>minV = myList[0]0]</code> a <code>[</code> to little</li>
<li><code>maxV = 0</code> works only if the list is always positive</li>
<li><code>maxV</code> and <code>minV</code> should be inside the first loop</li>
<li><code>innerlist.remove(maxV)</code> should be <code>list.remove(maxV)</code></li>
</ol>
<p>I also renamed innerList to value</p>
</div>
<div class="post-text" itemprop="text">
<p>Unindent your removes, to take them out of the loop and:</p>
<pre><code>maxV = -10000000
minV = 10000000   # !!
</code></pre>
</div>
<span class="comment-copy">What about duplicates?  For instance, should the middle list be empty after the operation since there are 2 "high" values?</span>
<span class="comment-copy"><code>innerlist</code> is not a list; it's an integer. <code>myList</code> and <code>list</code> are the only lists you have.</span>
<span class="comment-copy">But 4 is equal to the max</span>
<span class="comment-copy">Thanks a lot! Just one more things if my array begins with string element, and i've already have read about sorting, i know that  (lets say have list <i>d = [["xa",1, 3, 4], ["la",2, 4, 4], ["ta",3, 4, 5]]</i>)     <i>n = [sorted(l)[2:-1] for l in d]</i> should take from the second element in array but still it messes me with error, seems he still tries to sort string :(</span>
<span class="comment-copy">@Karolis≈†iaulys,  you are slicing the sorted list no the original list, if the. 2:-1 also starts at the third not the second, in python2 the string will get sorted to the end of the list so you still have the max  when you <code>sorted(l)[2:-1] </code>  and lose the two lowest ints, if you want to remove the string and the max use <code>sorted(l)[1:-2]</code>, you should also be aware that sorting or any comparison using python 3 will cause an <code>unorderable types</code> error as you cannot compare a string to an int</span>
<span class="comment-copy">Nicely done. +1 and referenced your answer in mine.</span>
<span class="comment-copy">Unindenting would not work if you want to remove a value from an integer. Also setting minV to the first element works and a big - and + value offers no security. You should use <code>sys.maxint</code> instead</span>
