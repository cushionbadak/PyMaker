<div class="post-text" itemprop="text">
<p>I made a function which will look up ages in a <code>Dictionary</code> and show the matching name:</p>
<pre><code>dictionary = {'george' : 16, 'amber' : 19}
search_age = raw_input("Provide age")
for age in dictionary.values():
    if age == search_age:
        name = dictionary[age]
        print name
</code></pre>
<p>I know how to compare and find the age I just don't know how to show the name of the person. Additionally, I am getting a <code>KeyError</code> because of line 5. I know it's not correct but I can't figure out how to make it search backwards.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is none. <code>dict</code> is not intended to be used this way.</p>
<pre><code>for name, age in dictionary.items():    # for name, age in dictionary.iteritems():  (for Python 2.x)
    if age == search_age:
        print(name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>mydict = {'george':16,'amber':19}
print mydict.keys()[mydict.values().index(16)] # Prints george
</code></pre>
<p>Or in Python 3.x:</p>
<pre><code>mydict = {'george':16,'amber':19}
print(list(mydict.keys())[list(mydict.values()).index(16)]) # Prints george
</code></pre>
<p>Basically, it separates the dictionary's values in a list, finds the position of the value you have, and gets the key at that position.</p>
<p>More about <code>keys()</code> and <code>.values()</code> in Python 3: <a href="https://stackoverflow.com/questions/16228248/python-simplest-way-to-get-list-of-values-from-dict">Python: simplest way to get list of values from dict?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you want both the name <em>and</em> the age, you should be using <code>.items()</code> which gives you key <code>(key, value)</code> tuples:</p>
<pre><code>for name, age in mydict.items():
    if age == search_age:
        print name
</code></pre>
<p>You can unpack the tuple into two separate variables right in the <code>for</code> loop, then match the age.</p>
<p>You should also consider reversing the dictionary if you're generally going to be looking up by age, and no two people have the same age:</p>
<pre><code>{16: 'george', 19: 'amber'}
</code></pre>
<p>so you can look up the name for an age by just doing</p>
<pre><code>mydict[search_age]
</code></pre>
<p>I've been calling it <code>mydict</code> instead of <code>list</code> because <code>list</code> is the name of a built-in type, and you shouldn't use that name for anything else.</p>
<p>You can even get a list of all people with a given age in one line:</p>
<pre><code>[name for name, age in mydict.items() if age == search_age]
</code></pre>
<p>or if there is only one person with each age:</p>
<pre><code>next((name for name, age in mydict.items() if age == search_age), None)
</code></pre>
<p>which will just give you <code>None</code> if there isn't anyone with that age.</p>
<p>Finally, if the <code>dict</code> is long and you're on Python 2, you should consider using <code>.iteritems()</code> instead of <code>.items()</code> as Cat Plus Plus did in his answer, since it doesn't need to make a copy of the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>I thought it would be interesting to point out which methods are the quickest, and in what scenario:</p>
<p>Here's some tests I ran (on a 2012 MacBook Pro)</p>
<pre><code>&gt;&gt;&gt; def method1(list,search_age):
...     for name,age in list.iteritems():
...             if age == search_age:
...                     return name
... 
&gt;&gt;&gt; def method2(list,search_age):
...     return [name for name,age in list.iteritems() if age == search_age]
... 
&gt;&gt;&gt; def method3(list,search_age):
...     return list.keys()[list.values().index(search_age)]
</code></pre>
<p>Results from <code>profile.run()</code> on each method 100000 times:</p>
<p>Method 1:</p>
<pre><code>&gt;&gt;&gt; profile.run("for i in range(0,100000): method1(list,16)")
     200004 function calls in 1.173 seconds
</code></pre>
<p>Method 2:</p>
<pre><code>&gt;&gt;&gt; profile.run("for i in range(0,100000): method2(list,16)")
     200004 function calls in 1.222 seconds
</code></pre>
<p>Method 3:</p>
<pre><code>&gt;&gt;&gt; profile.run("for i in range(0,100000): method3(list,16)")
     400004 function calls in 2.125 seconds
</code></pre>
<p>So this shows that for a small dict, method 1 is the quickest. This is most likely because it returns the first match, as opposed to all of the matches like method 2 (see note below).</p>
<hr/>
<p>Interestingly, performing the same tests on a dict I have with 2700 entries, I get quite different results (this time run 10000 times):</p>
<p>Method 1:</p>
<pre><code>&gt;&gt;&gt; profile.run("for i in range(0,10000): method1(UIC_CRS,'7088380')")
     20004 function calls in 2.928 seconds
</code></pre>
<p>Method 2:</p>
<pre><code>&gt;&gt;&gt; profile.run("for i in range(0,10000): method2(UIC_CRS,'7088380')")
     20004 function calls in 3.872 seconds
</code></pre>
<p>Method 3:</p>
<pre><code>&gt;&gt;&gt; profile.run("for i in range(0,10000): method3(UIC_CRS,'7088380')")
     40004 function calls in 1.176 seconds
</code></pre>
<p>So here, method 3 is <em>much</em> faster. Just goes to show the size of your dict will affect which method you choose.</p>
<p>Notes:
Method 2 returns a list of <em>all</em> names, whereas methods 1 and 3 return only the first match.
I have not considered memory usage. I'm not sure if method 3 creates 2 extra lists (keys() and values()) and stores them in memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>one line version: (i is an old dictionary, p is a reversed dictionary)</p>
<p>explanation : i.keys() and i.values() returns two lists with keys and values of the dictionary respectively. The zip function has the ability to tie together lists to produce a dictionary.</p>
<p>warning : This would work only if the values are hashable and unique.</p>
<pre><code>p = dict(zip(i.values(),i.keys()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-py prettyprint-override"><code>a = {'a':1,'b':2,'c':3}
{v:k for k, v in a.items()}[1]
</code></pre>
<p>or better</p>
<pre class="lang-py prettyprint-override"><code>{k:v for k, v in a.items() if v == 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>lKey = [key for key, value in lDictionary.iteritems() if value == lValue][0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is my take on this problem. :)
I have just started learning Python, so I call this:</p>
<p>"The Understandable for beginners" solution.</p>
<pre><code>#Code without comments.

list1 = {'george':16,'amber':19, 'Garry':19}
search_age = raw_input("Provide age: ")
print
search_age = int(search_age)

listByAge = {}

for name, age in list1.items():
    if age == search_age:
        age = str(age)
        results = name + " " +age
        print results

        age2 = int(age)
        listByAge[name] = listByAge.get(name,0)+age2

print
print listByAge
</code></pre>
<p>.</p>
<pre><code>#Code with comments.
#I've added another name with the same age to the list.
list1 = {'george':16,'amber':19, 'Garry':19}
#Original code.
search_age = raw_input("Provide age: ")
print
#Because raw_input gives a string, we need to convert it to int,
#so we can search the dictionary list with it.
search_age = int(search_age)

#Here we define another empty dictionary, to store the results in a more 
#permanent way.
listByAge = {}

#We use double variable iteration, so we get both the name and age 
#on each run of the loop.
for name, age in list1.items():
    #Here we check if the User Defined age = the age parameter 
    #for this run of the loop.
    if age == search_age:
        #Here we convert Age back to string, because we will concatenate it 
        #with the person's name. 
        age = str(age)
        #Here we concatenate.
        results = name + " " +age
        #If you want just the names and ages displayed you can delete
        #the code after "print results". If you want them stored, don't...
        print results

        #Here we create a second variable that uses the value of
        #the age for the current person in the list.
        #For example if "Anna" is "10", age2 = 10,
        #integer value which we can use in addition.
        age2 = int(age)
        #Here we use the method that checks or creates values in dictionaries.
        #We create a new entry for each name that matches the User Defined Age
        #with default value of 0, and then we add the value from age2.
        listByAge[name] = listByAge.get(name,0)+age2

#Here we print the new dictionary with the users with User Defined Age.
print
print listByAge
</code></pre>
<p>.</p>
<pre><code>#Results
Running: *\test.py (Thu Jun 06 05:10:02 2013)

Provide age: 19

amber 19
Garry 19

{'amber': 19, 'Garry': 19}

Execution Successful!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get key by using <a href="https://docs.python.org/2/library/stdtypes.html#dict.keys" rel="noreferrer"><code>dict.keys()</code></a>, <a href="https://docs.python.org/2/library/stdtypes.html#dict.values" rel="noreferrer"><code>dict.values()</code></a> and <a href="https://docs.python.org/2/tutorial/datastructures.html#more-on-lists" rel="noreferrer"><code>list.index()</code></a> methods, see code samples below:</p>
<pre><code>names_dict = {'george':16,'amber':19}
search_age = int(raw_input("Provide age"))
key = names_dict.keys()[names_dict.values().index(search_age)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to find the key by the value, you can use a dictionary comprehension to create a lookup dictionary and then use that to find the key from the value.</p>
<pre><code>lookup = {value: key for key, value in self.data}
lookup[value]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider using Pandas. As stated in William McKinney's "Python for Data Analysis'</p>
<blockquote>
<p>Another way to think about a Series is as a fixed-length, ordered
  dict, as it is a mapping of index values to data values. It can be
  used in many contexts where you might use a dict.</p>
</blockquote>
<pre><code>import pandas as pd
list = {'george':16,'amber':19}
lookup_list = pd.Series(list)
</code></pre>
<p>To query your series do the following:</p>
<pre><code>lookup_list[lookup_list.values == 19]
</code></pre>
<p>Which yields:</p>
<pre><code>Out[1]: 
amber    19
dtype: int64
</code></pre>
<p>If you need to do anything else with the output transforming the 
answer into a list might be useful:</p>
<pre><code>answer = lookup_list[lookup_list.values == 19].index
answer = pd.Index.tolist(answer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here, recover_key takes dictionary and value to find in dictionary. We then loop over the keys in dictionary and make a comparison with that of value and return that particular key.</p>
<pre><code>def recover_key(dicty,value):
    for a_key in dicty.keys():
        if (dicty[a_key] == value):
            return a_key
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found this <a href="https://stackoverflow.com/a/13149770/7127519">answer</a> very effective but still no very easy to read for me.</p>
<p>To make it more clear you can invert the key and the value of a dictionary. This is make the keys values and the values keys, as seen <a href="https://stackoverflow.com/a/1031878/7127519">here</a>.</p>
<pre><code>mydict = {'george':16,'amber':19}
res = dict((v,k) for k,v in mydict.iteritems())
print(res[16]) # Prints george
</code></pre>
<p>or</p>
<pre><code>mydict = {'george':16,'amber':19}
dict((v,k) for k,v in mydict.iteritems())[16]
</code></pre>
<p>which is essentially the same that this other <a href="https://stackoverflow.com/a/24012167/7127519">answer</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this one-liner to reverse a dictionary:</p>
<pre><code>reversed_dictionary = dict(map(reversed, dictionary.items()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>for name in mydict.keys():
    if mydict[name] == search_age:
        print name 
        #or do something else with it. 
        #if in a function append to a temporary list, 
        #then after the loop return the list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>it's answered, but it could be done with a fancy 'map/reduce' use, e.g.:</p>
<pre><code>def find_key(value, dictionary):
    return reduce(lambda x, y: x if x is not None else y,
                  map(lambda x: x[0] if x[1] == value else None, 
                      dictionary.iteritems()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def get_Value(dic,value):
    for name in dic:
        if dic[name] == value:
            del dic[name]
            return name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>get_key = lambda v, d: next(k for k in d if d[k] is v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>here is my take on it. This is good for displaying multiple results just in case you need one. So I added the list as well </p>
<pre><code>myList = {'george':16,'amber':19, 'rachel':19, 
           'david':15 }                         #Setting the dictionary
result=[]                                       #Making ready of the result list
search_age = int(input('Enter age '))

for keywords in myList.keys():
    if myList[keywords] ==search_age:
    result.append(keywords)                    #This part, we are making list of results

for res in result:                             #We are now printing the results
    print(res)
</code></pre>
<p>And that's it... </p>
</div>
<div class="post-text" itemprop="text">
<p>There is no easy way to find a key in a list by 'looking up' the value. However, if you know the value, iterating through the keys, you can look up values in the dictionary by the element. If D[element] where D is a dictionary object, is equal to the key you're trying to look up, you can execute some code.</p>
<pre><code>D = {'Ali': 20, 'Marina': 12, 'George':16}
age = int(input('enter age:\t'))  
for element in D.keys():
    if D[element] == age:
        print(element)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know this is old but you could quite easily find all the people in the list with your search age using list comprehension.</p>
<pre><code>ages = {'george':16,'amber':19}
search = 16
print([name for (name, age) in ages.items() if age == search])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I hope this might help...</p>
<pre><code>for key in list:
   if list[key] == search_value:
       return key
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Cat Plus Plus mentioned that this isn't how a dictionary is intended to be used. Here's why:</p>
<p>The definition of a dictionary is analogous to that of a mapping in mathematics. In this case, a dict is a mapping of K (the set of keys) to V (the values) - but not vice versa. If you dereference a dict, you expect to get exactly one value returned. But, it is perfectly legal for different keys to map onto the same value, e.g.:</p>
<pre><code>d = { k1 : v1, k2 : v2, k3 : v1}
</code></pre>
<p>When you look up a key by it's corresponding value, you're essentially inverting the dictionary. But a mapping isn't necessarily invertible! In this example, asking for the key corresponding to v1 could yield k1 or k3. Should you return both? Just the first one found? That's why indexof() is undefined for dictionaries.</p>
<p>If you know your data, you could do this. But an API can't assume that an arbitrary dictionary is invertible, hence the lack of such an operation.</p>
</div>
<div class="post-text" itemprop="text">
<p>Sometimes int() may be needed:</p>
<pre><code>titleDic = {'Фильмы':1, 'Музыка':2}

def categoryTitleForNumber(self, num):
    search_title = ''
    for title, titleNum in self.titleDic.items():
        if int(titleNum) == int(num):
            search_title = title
    return search_title
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to use a dictionary and reverse of that dictionary. It means you need another data structure. If you are in python 3, use <code>enum</code> module but if you are using python 2.7 use <code>enum34</code> which is back ported for python 2.</p>
<p>Example:</p>
<pre><code>from enum import Enum

class Color(Enum): 
    red = 1 
    green = 2 
    blue = 3

&gt;&gt;&gt; print(Color.red) 
Color.red

&gt;&gt;&gt; print(repr(Color.red)) 
&lt;color.red: 1=""&gt; 

&gt;&gt;&gt; type(Color.red) 
&lt;enum 'color'=""&gt; 
&gt;&gt;&gt; isinstance(Color.green, Color) 
True 

&gt;&gt;&gt; member = Color.red 
&gt;&gt;&gt; member.name 
'red' 
&gt;&gt;&gt; member.value 
1 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>already been answered, but since several people mentioned reversing the dictionary, here's how you do it in one line (assuming 1:1 mapping) and some various perf data:</p>
<p>python 2.6:</p>
<pre><code>reversedict = dict([(value, key) for key, value in mydict.iteritems()])
</code></pre>
<p>2.7+:</p>
<pre><code>reversedict = {value:key for key, value in mydict.iteritems()}
</code></pre>
<p>if you think it's not 1:1, you can still create a reasonable reverse mapping with a couple lines:</p>
<pre><code>reversedict = defaultdict(list)
[reversedict[value].append(key) for key, value in mydict.iteritems()]
</code></pre>
<p>how slow is this: slower than a simple search, but not nearly as slow as you'd think - on a 'straight' 100000 entry dictionary, a 'fast' search (i.e. looking for a value that should be early in the keys) was about 10x faster than reversing the entire dictionary, and a 'slow' search (towards the end) about 4-5x faster. So after at most about 10 lookups, it's paid for itself. </p>
<p>the second version (with lists per item) takes about 2.5x as long as the simple version.</p>
<pre><code>largedict = dict((x,x) for x in range(100000))

# Should be slow, has to search 90000 entries before it finds it
In [26]: %timeit largedict.keys()[largedict.values().index(90000)]
100 loops, best of 3: 4.81 ms per loop

# Should be fast, has to only search 9 entries to find it. 
In [27]: %timeit largedict.keys()[largedict.values().index(9)]
100 loops, best of 3: 2.94 ms per loop

# How about using iterkeys() instead of keys()?
# These are faster, because you don't have to create the entire keys array.
# You DO have to create the entire values array - more on that later.

In [31]: %timeit islice(largedict.iterkeys(), largedict.values().index(90000))
100 loops, best of 3: 3.38 ms per loop

In [32]: %timeit islice(largedict.iterkeys(), largedict.values().index(9))
1000 loops, best of 3: 1.48 ms per loop

In [24]: %timeit reversedict = dict([(value, key) for key, value in largedict.iteritems()])
10 loops, best of 3: 22.9 ms per loop

In [23]: %%timeit
....: reversedict = defaultdict(list)
....: [reversedict[value].append(key) for key, value in largedict.iteritems()]
....:
10 loops, best of 3: 53.6 ms per loop
</code></pre>
<p>Also had some interesting results with ifilter. Theoretically, ifilter should be faster, in that we can use itervalues() and possibly not have to create/go through the entire values list. In practice, the results were... odd...</p>
<pre><code>In [72]: %%timeit
....: myf = ifilter(lambda x: x[1] == 90000, largedict.iteritems())
....: myf.next()[0]
....:
100 loops, best of 3: 15.1 ms per loop

In [73]: %%timeit
....: myf = ifilter(lambda x: x[1] == 9, largedict.iteritems())
....: myf.next()[0]
....:
100000 loops, best of 3: 2.36 us per loop
</code></pre>
<p>So, for small offsets, it was dramatically faster than any previous version (2.36 *u*S vs. a minimum of 1.48 *m*S for previous cases). However, for large offsets near the end of the list, it was dramatically slower (15.1ms vs. the same 1.48mS). The small savings at the low end is not worth the cost at the high end, imho. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>d= {'george':16,'amber':19}

dict((v,k) for k,v in d.items()).get(16)
</code></pre>
<p>The output is as follows:</p>
<pre><code>-&gt; prints george
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is how you access the dictionary to do what you want:</p>
<pre><code>list = {'george': 16, 'amber': 19}
search_age = raw_input("Provide age")
for age in list:
    if list[age] == search_age:
        print age
</code></pre>
<p>of course, your names are so off it looks like it would be printing an age, but it DOES print the name. Since you are accessing by name, it becomes more understandable if you write:</p>
<pre><code>list = {'george': 16, 'amber': 19}
search_age = raw_input("Provide age")
for name in list:
    if list[name] == search_age:
        print name
</code></pre>
<p>Better yet: </p>
<pre><code>people = {'george': {'age': 16}, 'amber': {'age': 19}}
search_age = raw_input("Provide age")
for name in people:
    if people[name]['age'] == search_age:
        print name
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>dictionary = {'george' : 16, 'amber' : 19}
search_age = raw_input("Provide age")
key = [filter( lambda x: dictionary[x] == k  , dictionary ),[None]][0] 
# key = None from [None] which is a safeguard for not found.
</code></pre>
<p>For multiple occurrences use:</p>
<pre><code>keys = [filter( lambda x: dictionary[x] == k  , dictionary )]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a solution which works both in Python 2 and Python 3:</p>
<pre><code>dict((v, k) for k, v in list.items())[search_age]
</code></pre>
<p>The part until <code>[search_age]</code> constructs the reverse dictionary (where values are keys and vice-versa).
You could create a helper method which will cache this reversed dictionary like so:</p>
<pre><code>def find_name(age, _rev_lookup=dict((v, k) for k, v in ages_by_name.items())):
    return _rev_lookup[age]
</code></pre>
<p>or even more generally a factory which would create a by-age name lookup method for one or more of you lists</p>
<pre><code>def create_name_finder(ages_by_name):
    names_by_age = dict((v, k) for k, v in ages_by_name.items())
    def find_name(age):
      return names_by_age[age]
</code></pre>
<p>so you would be able to do:</p>
<pre><code>find_teen_by_age = create_name_finder({'george':16,'amber':19})
...
find_teen_by_age(search_age)
</code></pre>
<p>Note that I renamed <code>list</code> to <code>ages_by_name</code> since the former is a predefined type.</p>
</div>
<span class="comment-copy">In <code>Python 3.x</code> <code>list.items()</code> instead of <code>list.iteritems()</code> should be used</span>
<span class="comment-copy">I don't agree... agf's answer below is more constructive. A perfectly reasonable use case is not "unintended" (list comprehension fits such a use case anyway). A <code>dict</code> can be for multiple things at different times; keys and values have a clear meaning, of course, but <i>"<code>dict</code> items with a given value"</i> is a perfectly reasonable request. The recommendation to use a list of pairs would discard the context that one item is a '<i>definition</i>' from the other, e.g. in parameter lists...</span>
<span class="comment-copy">Looks great but is it works always? I mean, do <code>list.keys()</code> and <code>list.values()</code> functions generate items in same order?</span>
<span class="comment-copy">Yes, they are guaranteed to be consistent. Additionally order is guaranteed not to change through iterations as long as the dictionary is not modified.</span>
<span class="comment-copy">Wow, you got it, that's exactly what I wanted. Something that doesn't loop for nothing. Thanks for the elegant solution.</span>
<span class="comment-copy">This looks to be a good solution but index gave only one value right, so if you ve multiple equal values, then it should return multiple keys right ?</span>
<span class="comment-copy">@ArtOfWarfare <a href="https://docs.python.org/3/library/stdtypes.html#dict-views" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#dict-views</a>, "If keys, values and items views are iterated over with no intervening modifications to the dictionary, the order of items will directly correspond."</span>
<span class="comment-copy">Correct, but if you're going to do linear search, you might as well replace the <code>dict</code> with a list of pairs.</span>
<span class="comment-copy">Unless your usual action is looking ages up by name, in which case a <code>dict</code> makes sense.</span>
<span class="comment-copy">The [name for name, age in mydict.items() if age == search_age] answer is the easiest to read and seems the most intuitive to me.</span>
<span class="comment-copy">It seems peculiar to assume that there is only one person with each age, while on the other hand, it is completely logical for each person to have a single age.</span>
<span class="comment-copy">@RegisMay Could you clarify what you mean? What advantage do we lose, because of what suggestion? What functionality is Python missing?</span>
<span class="comment-copy">Just an update: it seems that dict.values() and dict.keys() both return lists that reference the objects from the original dict, so method 3 is also the one that uses the least memory (it only creates two thin list objects which wrap the contents of the dicts, whereas the others create iterator items</span>
<span class="comment-copy">I just wanted to benchmark it myself, scrolled down, bam there you have it. Thanks! Technically as you already pointed out method 2 doesn't do the exact same thing as 1 and 3 because it returns all matches. would be nice to see the results for e.g. return next([..]).</span>
<span class="comment-copy">Another important note to make is Python version. I know some versions have more efficient implementations of methods than others.</span>
<span class="comment-copy">@Patrick: all methods use direct references to the values and keys, there is no memory advantage to any. Except in Python 3 <code>.keys()</code> and` <code>.values()</code> return dictionary views, which are light-weight.</span>
<span class="comment-copy">Yes, this will work: <a href="http://stackoverflow.com/questions/835092/python-dictionary-are-keys-and-values-always-the-same-order" title="python dictionary are keys and values always the same order">stackoverflow.com/questions/835092/…</a></span>
<span class="comment-copy">this work only when values are hashable.</span>
<span class="comment-copy">... and when there are no duplicate values.</span>
<span class="comment-copy">Beautiful. W.r.t the comment above, of course it only works when there are no duplicate values, but then, the question that started this thread makes the assumption that we have a one-to-one function, so given that assumption, this is the most elegant response by far.</span>
<span class="comment-copy">expanding on hashable values: if your values are  lists/sets convert them to tuple for this to work (they still need to be unique).</span>
<span class="comment-copy">What if there is another key which holds the same value of a? May be pythonic way. But not a good idea.</span>
<span class="comment-copy">good point, i added solution which works with nonunique values</span>
<span class="comment-copy">Can I also have an 'else' in this same line? For the case when my value is not in the dict values</span>
<span class="comment-copy"><code>lKey = [k for k, v in lDictionary.iteritems() if v == lValue][0] or 'else-key'</code></span>
<span class="comment-copy">you don't use defined <code>search_age</code> var on next line... Maybe you should replace <code>value</code> with <code>search_age</code>?</span>
<span class="comment-copy">I get this error: 'dict_values' object has no attribute 'index'</span>
<span class="comment-copy">@Blue_Elephant could you please provide code snippet you've got error and python version ( also print of <code>type(dict_values)</code> would be useful ) ?</span>
<span class="comment-copy">A clarification could be added when this would and wouldn't work...</span>
<span class="comment-copy">Who's William McKinney?</span>
<span class="comment-copy">He's the creator of pandas. He's more commonly known as Wes, though.</span>
<span class="comment-copy">Good answers <i>explain</i> as well as provide code. Consider updating your answer to include an explanation about how this code works and why it is the best option.</span>
<span class="comment-copy">how this will work when the value is a list</span>
<span class="comment-copy">Using a for loop and append is much slower than a list comprehension and it's also longer.</span>
<span class="comment-copy">I so much want this (reversedict = defaultdict(list) reversedict[value].append(key) for key, value in largedict.iteritems()] ) to work, but using Python 2.7.3, I get syntax error on the word 'for'</span>
<span class="comment-copy">is that what you actually typed? you're missing a <code>[</code> in it, if it is. otherwise, make sure it's on two lines, or put a <code>;</code> between them if it's not.</span>
<span class="comment-copy">argh.. you're right. can't believe I missed that bracket.  eh. sorry.  brain broken</span>
<span class="comment-copy">[k for k, v in d.items() if v==16]</span>
<span class="comment-copy"><code>*** NameError: global name 'dictionary' is not defined</code></span>
<span class="comment-copy"><code>filter( lambda x, dictionary=dictionary, search_age=int(search_age): dictionary[x] == search_age  , dictionary )</code></span>
