<div class="post-text" itemprop="text">
<p>I have a dictionary:</p>
<pre><code>bank_accts={accno:{"Name":"&lt;str&gt;","Balance":&lt;num&gt;}, repeat}.
</code></pre>
<p>I need to run a function where the user can view all of the accounts either by sorting by account number (accno), name, or balance.</p>
<p>I have an if, elif, else statement and I have the sort by accno working. I can't seem to be able to sort by Name or Balance. I have seen some complicated code but couldn't get it to work the way I need. So I decided to try to make all the "Name" values get put into a list, which I could then sort; however, the problem is each value gets put into a separate list with each character separated.</p>
<p>Any help is deeply appreciated. I am very new and am in a boot camp for learning python in a couple weeks. The instructor is more of a Google the answer, so I am trying to learn as I go. Thanks!</p>
<pre><code>#This function will show all the bank accounts
def view_all_accts():
    sort=input("How would you like to sort? Please choose by account, name, or balance. ")
    if sort.lower() == "account":
        for acct in sorted(bank_acct.keys()):
            print("Account: %s" %(acct))
            for key in bank_acct[acct]:
                print(key +":"+str(bank_acct[acct][key]))
    elif sort.lower() == "name":
        for acct in bank_acct.keys():
            name=bank_acct[acct]["Name"]
            #gives every value of "Name"
            print(name)
            #will make every value into own list with each char separated
            temp=list(name)
            print(temp)
    #elif sort.lower()=="balance":
    else:
        print("Please choose account, name, or balance!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The trick is to use the <code>key</code> parameter to the <a href="https://docs.python.org/3/library/functions.html?highlight=sorted#sorted" rel="nofollow"><code>sorted()</code></a> function; this will allow us to use any key in a data structure we want as the comparison value for sorting.</p>
<p>Another thing you want to do is to effectively split the program in three more or less separate parts:</p>
<ol>
<li>Get user input</li>
<li>Make a sorted data structure</li>
<li>Print out this data structure.</li>
</ol>
<p>If you don't do this, you end up repeating yourself. In your example you're doing looping over and printing out <code>bank_acct</code> in two places − now what if you want to change something later? You'd have to change it in two places ;-)</p>
<p>Here's a full example with commented added:</p>
<pre><code>bank_accts = {
    '456': {"Name":"LaVey","Balance":666},
    '123': {"Name":"Adams","Balance":42},
    '999': {"Name":"Zelany","Balance":64},
}

def view_all_accts():
    #########################
    ### 1. Get user input ###
    #########################
    # Get input, lowercase it
    sort = input("How would you like to sort? Please choose by account, name, or balance. ").lower()

    # Check if this is a valid key 
    valid_keys = ['account', 'name', 'balance']
    if sort not in valid_keys:
        print("Please choose account, name, or balance!")

        # Ask for input again
        return view_all_accts()

    #######################################
    ### 2. Make a sorted data structure ###
    #######################################
    # The key name (account) is a special case, so handle that first
    if sort == 'account':
        sorted_list = sorted(bank_accts.items())
    # Sort by one of the values
    else:
        # Capitalize the first letter of the sort key
        sort_key = sort.capitalize()

        # Now we can use the key= parameter for sorted()
        sorted_list = sorted(bank_accts.items(), key=lambda v: v[1][sort_key])

    #########################################
    ### 3. Print out this data structure. ###
    #########################################
    for account, data in sorted_list:
        print("Account: %s" % account)
        for k, v in data.items():
            print("  %s: %s" % (k, v))

view_all_accts()
</code></pre>
<p>Notice how this function is now separated in three independent parts − parts that you can now move to their own functions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your primary dictionary has accno as key.
Create 2 index dictionaries, having name and balance as keys and accno as elements of a value list. (Since a name or balance can occur multiple times)</p>
<p>With each insert in the prim dict, also insert in the index dicts under the right key.</p>
<p>With each delete from the prim. dict., also delete from the index dicts using name and balance as keys. As the list for a name or balance gets empty, delete the whole element of the index.</p>
<p>You can now simply sort the keys from each dict. This is (normal) "database indexing".</p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the input! I like carpetsmoker's answer. I did come up with the below solution on my own as well, and would repeat that elif statement for my other value "Balance":</p>
<pre><code>elif sort.lower() == "name":
        temp=[]
        for acct in bank_acct.keys():
            temp.append(bank_acct[acct]["Name"])
        #print(temp)
            temp.sort()
        #print(temp)
        for name in temp:
            for acct in bank_acct.keys():
                if name==bank_acct[acct]["Name"]:
                    print("Name: %s, Balance: $%d, Account #%s" %(bank_acct[acct]["Name"],bank_acct[acct]["Balance"],acct))
</code></pre>
</div>
<span class="comment-copy">Thanks for this! I understand what you are doing, which is wonderful! There was a slight error, in case anyone else uses this, in which in part 2., the if sort = = 'account': it should be sorted_dict=sorted(bank_acct.items()). Also, don't forget to add the sorted_dict={} before starting anything. In addition, this does restrict the formatting to be the same for all 3 searches, which may or may not be wanted. Thanks again!</span>
<span class="comment-copy">@Tigger Oops, I tested the code, copied it to the answer, and changed some minor details &amp; added the comments. I forgot to test it after that &gt;_&lt; I don't think you need a <code>sorted_dict={}</code> anywhere though? First off, it's a list not a dict (yeah, the name is silly, I changed it to <code>sorted_list</code>), but more importantly, it's always set...</span>
