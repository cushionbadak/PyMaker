<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/33159106/sort-filenames-in-directory-in-ascending-order">Sort filenames in directory in ascending order [duplicate]</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>For example I have list </p>
<pre><code>my_list= ['image101.jpg', 'image2.jpg', 'image1.jpg']
</code></pre>
<p>and </p>
<pre><code>my_list.sort()
</code></pre>
<p>gives me </p>
<pre><code>['image1.jpg', 'image101.jpg', 'image2.jpg']
</code></pre>
<p>but I of course need</p>
<pre><code>['image1.jpg', 'image2.jpg', 'image101.jpg']
</code></pre>
<p>How it can be done?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="noreferrer"><code>list.sort</code></a> accepts optional <code>key</code> function. Each item is passed to the function, and the return value of the function is used to compare items instead of the original values.</p>
<pre><code>&gt;&gt;&gt; my_list= ['image101.jpg', 'image2.jpg', 'image1.jpg']
&gt;&gt;&gt; my_list.sort(key=lambda x: int(''.join(filter(str.isdigit, x))))
&gt;&gt;&gt; my_list
['image1.jpg', 'image2.jpg', 'image101.jpg']
</code></pre>
<hr/>
<p><a href="https://docs.python.org/3/library/functions.html#filter" rel="noreferrer"><code>filter</code></a>, <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="noreferrer"><code>str.isdigit</code></a> were used to extract numbers:</p>
<pre><code>&gt;&gt;&gt; ''.join(filter(str.isdigit, 'image101.jpg'))
'101'
&gt;&gt;&gt; int(''.join(filter(str.isdigit, 'image101.jpg')))
101
</code></pre>
<ul>
<li><code>''.join(..)</code> is not required in Python 2.x</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Use a regex to pull the number from the string and cast to int:</p>
<pre><code>import  re
r = re.compile("\d+")
l = my_list= ['image101.jpg', 'image2.jpg', 'image1.jpg']
l.sort(key=lambda x: int(r.search(x).group()))
</code></pre>
<p>Or maybe use a more specific regex including the <code>.</code>:</p>
<pre><code>import  re

r = re.compile("(\d+)\.")
l = my_list= ['image101.jpg', 'image2.jpg', 'image1.jpg']
l.sort(key=lambda x: int(r.search(x).group()))
</code></pre>
<p>Both give the same output for you example input:</p>
<pre><code>['image1.jpg', 'image2.jpg', 'image101.jpg']
</code></pre>
<p>If you are sure of the extension you can use a very specific regex:</p>
<pre><code> r = re.compile("(\d+)\.jpg$")
 l.sort(key=lambda x: int(r.search(x).group(1)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Actually you don't need any <code>regex</code> patern. You can parse easily like that.</p>
<pre><code>&gt;&gt;&gt; 'image101.jpg'[5:-4]
'101'
</code></pre>
<p>Solution:</p>
<pre><code>&gt;&gt;&gt; sorted(my_list, key=lambda x: int(x[5:-4]))
['image1.jpg', 'image2.jpg', 'image101.jpg']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to do this in the general case, I would try a natural sorting package like <a href="https://pypi.python.org/pypi/natsort" rel="nofollow">natsort</a>.</p>
<pre><code>from natsort import natsorted
my_list = ['image101.jpg', 'image2.jpg', 'image1.jpg']
natsorted(my_list)
</code></pre>
<p>Returns:</p>
<pre><code>['image1.jpg', 'image2.jpg', 'image101.jpg']
</code></pre>
<p>You can install it using pip i.e. <code>pip install natsort</code></p>
</div>
<span class="comment-copy"><code>sorted(my_list, key=lambda x: int(re.search(r'\d+(?=\.)', x).group()))</code></span>
<span class="comment-copy">Just wanted to mention this, it won't work if the file name is something like <code>image21_20160328.jpg</code>. The number it will extract is <code>2120160328</code>.</span>
<span class="comment-copy">@JasonEstibeiro, You're right. In such case, need to capture all digits and convert them, using something like <code>lits(map(int, re.findall(r'\d+', x)))</code></span>
<span class="comment-copy">for accuracy, you must use lookahead.</span>
<span class="comment-copy">You need to convert the matched string to number. Otherwise, the result is different from what OP want. <code>['image1.jpg', 'image101.jpg', 'image2.jpg'] != ['image1.jpg', 'image2.jpg', 'image101.jpg']</code></span>
<span class="comment-copy">@falsetru, yep, posted wrong version originally</span>
