<div class="post-text" itemprop="text">
<p>I have two lists:</p>
<p><code>list_a = list_b = list(range(2, 6))
final_list = []
</code></p>
<p>I was wondering how to multiply all of the values in both lists together. I want my final_list to contain</p>
<p><code>[2*2, 2*3, 2*4, 2*5, 3*2, 3*3, 3*4, 3*5, 4*2, 4*3, 4*4, 4*5, 5*2, 5*3, 5*4, 5*5]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a list comprehension:</p>
<pre><code>&gt;&gt;&gt; list_a = list_b = list(range(2, 6))
&gt;&gt;&gt; [x*y for x in list_a for y in list_b]
[4, 6, 8, 10, 6, 9, 12, 15, 8, 12, 16, 20, 10, 15, 20, 25]
</code></pre>
<p>Note that <code>list_a = list_b = list(range(2, 6))</code> makes both variables point to the same list object. If this is not desirable, use separate lists:</p>
<pre><code>&gt;&gt;&gt; list_a, list_b = list(range(2, 6)), list(range(2, 6))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/itertools.html#itertools.product"><code>itertools.product</code></a> may be used to get cartesian product from arbitrary number of iterables.</p>
<pre><code>import itertools
l1 = range(2,6)
l2 = range(2,6)
result = [x*y for x, y in itertools.product(l1, l2)]
</code></pre>
<p>To handle general case you may use reduce approach. This will work fine for arbitrary number of input sequences.</p>
<pre><code>import functools
import operator
import itertools
result = [functools.reduce(operator.mul, operands)
          for operands in itertools.product(l1, l2)]
</code></pre>
</div>
<span class="comment-copy">Be careful when you do <code>list_a = list_b = ...</code> because both variables will reference the same <code>list</code>. By the way, there is no real need to convert <code>range</code> to <code>list</code> in python (<code>range</code> are not generators).</span>
<span class="comment-copy">@soon No, <code>range</code> returns custom type, see <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="nofollow noreferrer"><code>range</code></a>. Try <code>range(10)[4]</code> in python3, or <code>a = range(10); print(list(a)); print(list(a));</code></span>
<span class="comment-copy">Should I make list_a and list_b seperate lists?</span>
<span class="comment-copy">@RandomCoder It depends on what you planned to do with them. If you only create them to compute the product, then there is no need to have two separate list, you should simply be aware that with the above instruction, <code>list_a</code> and <code>list_b</code> targets the same object (if you modify <code>list_a</code>, <code>list_b</code> will also be modified).</span>
<span class="comment-copy">@Holt, you are right, missed that.</span>
