<div class="post-text" itemprop="text">
<p>What are the conventions for ordering parameters in Python? For instance,</p>
<pre><code>def plot_graph(G, filename, ...)

# OR

def plot_graph(filename, G, ...)
</code></pre>
<p>There is no discussion in <a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow noreferrer">PEP 0008 -- Style Guide for Python Code | Python.org</a></p>
<p>Excerpt from the answer of <a href="https://stackoverflow.com/questions/2796557/conventions-for-order-of-parameters-in-a-function">Conventions for order of parameters in a function</a>,</p>
<blockquote>
<p>If a language allows passing a hash/map/associative array as a single parameter, try to opt for passing that. This is especially useful for methods with &gt;=3 parameters, ESPECIALLY when those same parameters will be passed to nested function calls.</p>
</blockquote>
<p>Is it extreme to convert each parameter into a key-value pair, like <code>def plot_graph(graph=None, filename=None, ...)</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>There's really no convention for ordering <a href="https://docs.python.org/3/glossary.html#term-parameter" rel="nofollow">function parameters</a>, except a limitation that positional non-default parameters must go before parameters with defaults and only then keyword parameters, i.e. <code>def func(pos_1, pos_n, pos_1_w_default='default_val', pos_n_w_default='default_val', *args, kw_1, kw_n, kw_1_w_default='default_val', kw_n_w_default='default_val', **kwargs)</code>.</p>
<p>Usually you define parameters order logically based on their meaning for the function, e.g. if you define a function that does subtraction, it's logical, that minuend should be the first parameter and subtrahend should be second. In this case reverse order is possible, but it's not logical.</p>
<p>Also, if you consider that your function might be used <a href="https://docs.python.org/3/library/functools.html?#functools.partial" rel="nofollow">partially</a>, that might affect your decision on parameter ordering.</p>
<p>Most things you need to know about function parameters are in the <a href="https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions" rel="nofollow">official tutorial</a>.</p>
<p>P.S. Regarding your particular example with graph function... Considering your function name, it is used for displaying a graph, so a <code>graph</code> must be provided as argument, otherwise there's nothing to display, so making <code>graph=None</code> by default doesn't make much sense.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is not extreme to use only keyword arguments. I have seen that in many codebases. This allows you to extend functionalities (by adding new keyword arguments to your functions) without breaking your previous code. It can be slightly more tedious to use, but definitely easier to maintain and to extend.</p>
<p>Also have a look at <a href="https://www.python.org/dev/peps/pep-3102/" rel="nofollow">PEP 3102 -- Keyword-Only Arguments</a>, which is a way to force the use of keyword arguments in python 3.</p>
</div>
<span class="comment-copy">It really depends on  if you want to give a default value or some args are optional etc.. If all args are necessary and you go giving default values it will be a mess checking each arg, if args1 is None if args2 is None .. that will get ugly pretty quick</span>
<span class="comment-copy">As others mentioned, there is no convention and limitation other then if you gonna have default values, but I would make it so that the function signature reads as a complete sentence. Like, "function to plat a graph G and filename foo".</span>
