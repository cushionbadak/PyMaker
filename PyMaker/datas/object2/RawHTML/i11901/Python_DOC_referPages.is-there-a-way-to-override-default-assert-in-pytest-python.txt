<div class="post-text" itemprop="text">
<p>I'd like to a log some information to a file/database every time assert is invoked. Is there a way to override assert or register some sort of callback function to do this, every time assert is invoked?</p>
<p>Regards
Sharad</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't think that would be possible. <code>assert</code> is a statement (and not a function) in Python and has a predefined behavior. It's a language element and cannot just be modified. Changing the language cannot be the solution to a problem. Problem has to be solved using what is provided by the language</p>
<p>There is one thing you can do though. Assert will raise <code>AssertionError</code> exception on failure. This can be exploited to get the job done. Place the <code>assert statement</code> in <code>Try-expect</code> block and do your callbacks inside that block. It isn't as good a solution as you are looking for. You have to do this with every assert. Modifying a statement's behavior is something one won't do.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try overload the <code>AssertionError</code> instead of <code>assert</code>. The original assertion error is available in <a href="https://docs.python.org/2/library/exceptions.html#module-exceptions" rel="nofollow">exceptions module</a> in python2 and <a href="https://docs.python.org/3/library/builtins.html" rel="nofollow">builtins</a> module in python3.</p>
<pre><code>import exceptions

class AssertionError:
    def __init__(self, *args, **kwargs):
        print("Log me!")
        raise exceptions.AssertionError
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is possible, because pytest is actually re-writing assert expressions in some cases. I do not know how to do it or how easy it is, but here is the documentation explaining when assert re-writing occurs in pytest:
<a href="https://docs.pytest.org/en/latest/assert.html" rel="nofollow noreferrer">https://docs.pytest.org/en/latest/assert.html</a></p>
<blockquote>
<p>By default, if the Python version is greater than or equal to 2.6, py.test rewrites assert statements in test modules.</p>
<p>...</p>
<p>py.test rewrites test modules on import. It does this by using an
  import hook to write a new pyc files.</p>
</blockquote>
<p>Theoretically, you could look at the pytest code to see how they do it, and perhaps do something similar.</p>
<blockquote>
<p>For further information, Benjamin Peterson wrote up Behind the scenes of py.testâ€™s new assertion rewriting [ at <a href="http://pybites.blogspot.com/2011/07/behind-scenes-of-pytests-new-assertion.html" rel="nofollow noreferrer">http://pybites.blogspot.com/2011/07/behind-scenes-of-pytests-new-assertion.html</a> ]</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I suggest to use <a href="https://github.com/hamcrest/PyHamcrest/" rel="nofollow">pyhamcrest</a>. It has very beatiful matchers which can be simply reimplemented. Also you can write your own.</p>
</div>
