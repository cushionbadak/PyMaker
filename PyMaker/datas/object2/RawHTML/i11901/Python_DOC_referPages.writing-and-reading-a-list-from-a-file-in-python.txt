<div class="post-text" itemprop="text">
<p>I want to save a list in python to a file which should be able to read later and added to a list variable in later use.</p>
<p>As an example </p>
<pre><code>list = [42,54,24,65]
</code></pre>
<p>This should be written to a file as</p>
<pre><code>[42,54,24,65] or
list = [42,54,24,65]
</code></pre>
<p>And should be able to read later from python for a later use and assign it to a list variable</p>
<p>Right now I'm using the following code.</p>
<pre><code>    f = open('list_file', 'w')
    f.write(values)
    f.close()
</code></pre>
<p>This gives me an error</p>
<pre><code>TypeError: write() argument must be str, not list
</code></pre>
<p>How can I fix this? 
Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do it also with <code>pickle</code>, it works similarly to json, but it can serialize a broader set of Python objects than json. Json serializes text, and is human readable, while pickle serializes bytes, not human readable.</p>
<p>Consider this example:</p>
<pre><code>import pickle, json

list_ = [42,54,24,65]

with open('list_file.pickle', 'wb') as fp, open('list_file.json', 'w') as fj:
    pickle.dump(list_, fp)
    json.dump(list_, fj)

with open('list_file.pickle', 'rb') as fp, open('list_file.json', 'r') as fj:
    list_unpickled = pickle.load(fp)
    list_from_json = json.load(fj)

print(list_unpickled) #[42, 54, 24, 65]
print(list_from_json) #[42, 54, 24, 65]
</code></pre>
<p>Notice that with pickle you have to open the files with the 'b' for binary reading/writing.</p>
<p>A side note: do not use variables with the same name as python keywords, like <code>list</code>.</p>
<p>According to 12.1.4 in the documentation:</p>
<blockquote>
<p>The following types can be pickled:</p>
<ul>
<li>None, True, and False</li>
<li>integers, floating point numbers, complex numbers</li>
<li>strings, bytes, bytearrays</li>
<li>tuples, lists, sets, and dictionaries containing only picklable objects</li>
<li>functions defined at the top level of a module (using def, not lambda)</li>
<li>built-in functions defined at the top level of a module</li>
<li>classes that are defined at the top level of a module</li>
<li>instances of such classes whose <strong>dict</strong> or the result of calling <strong>getstate</strong>() is picklable (see section Pickling Class Instances for details).</li>
</ul>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>If you just have a simple list, then you can use JSON and the <a href="https://docs.python.org/3/library/json.html" rel="nofollow"><code>json</code></a> module. </p>
<pre><code>import json
data = [42,54,24,65]

with open('output.txt', 'w') as f_out:
    json.dump(data, f_out)

with open('output.txt', 'r') as f_in:
    data2 = json.load(f_in)
print(data2) # [42,54,24,65]
</code></pre>
<p>And the contents of <code>output.txt</code> looks like </p>
<pre><code>[42,54,24,65]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Map all values in the list to strings first, the <code>write</code> method only supports strings.
E.g. <code>list = list(map(str, list))</code>
Also calling a variable "list" is a bad practice, use something like "ls" or whatever differs from standard Python keywords. If you want to use it later, you can just delimit the values using spaces. Just write it like <code>f.write(" ".join(list))</code>. Then, to read it back into a list, do <code>list = f.readline().split()</code> This, however, will keep the values in the list as strings, to get them back to ints, map again like <code>list = list(map(int, list))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>According to the error in your code you passing a list to f.write().you need to pass string.</p>
<p>I assuming you want to write one word per line.try the code below it should work.</p>
<pre><code>f = open('list_file', 'w')
for value in list:
       f.write(value+"\n")
f.close() 
</code></pre>
<p>To read later you can just open file again and read using this code:</p>
<pre><code>f = open('list_file', 'r')
for line in f:
      print line.strip()
f.close() 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Turning my comment into an answer:</p>
<p>Try <a href="https://stackoverflow.com/q/4530611/584846">Saving and loading objects and using pickle</a>:</p>
<pre><code>import pickle
filehandler = open(b"Fruits.obj","wb")
pickle.dump(banana,filehandler)
</code></pre>
<p>To load the data, use:</p>
<pre><code>file = open("Fruits.obj",'r')
object_file = pickle.load(file)
</code></pre>
</div>
<span class="comment-copy">Saving and loading objects and using pickle: <a href="http://stackoverflow.com/q/4530611/584846">stackoverflow.com/q/4530611/584846</a></span>
<span class="comment-copy">Did you try <code>write(str(values))</code>?</span>
<span class="comment-copy">@BrentWashburne I'm new to python, please could you tell me whether pickle is an external module that I have to install or something built in?</span>
<span class="comment-copy"><a href="https://docs.python.org/3.5/library/pickle.html?highlight=pickle#module-pickle" rel="nofollow noreferrer"><code>pickle</code></a> module is part of the standard python library, <code>import pickle</code>. Alternatively, you could write it out in <code>json</code> also part of the standard python library.</span>
<span class="comment-copy">@BrentWashburne Pickle will do the trick thanks :)</span>
<span class="comment-copy">Any reason not to just use <code>json.dump(data, f_out)</code> and <code>data2 = json.load(f_in)</code> avoids converting to string.</span>
<span class="comment-copy">@AChampion Edited. I tried that initially, but couldn't remember the syntax. Had the file pointer in the wrong spot.</span>
<span class="comment-copy">All you did was convert the contents of the list to strings. That doesn't help write a list to a file.</span>
<span class="comment-copy">@cricket_007 Yea, sorry, not anymore</span>
<span class="comment-copy">There are still much better ways to serialize objects into a file.</span>
