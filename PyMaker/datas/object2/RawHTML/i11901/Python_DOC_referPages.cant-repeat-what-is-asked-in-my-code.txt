<div class="post-text" itemprop="text">
<p>I'm creating a text-based adventure game in Python 3.4.3 and I can't figure out how to make the code repeat a question. There's a bunch of narration before this, if that helps understand what's going on at all.</p>
<pre><code>print("\n\n\n\n\nYou awake to find yourself in the center of a clearing in a forest.")
print("You stand up and decide to take a look around.")

str = input("Which direction do you steer your head? d= down, l= left, r= right, u= up, b= behind you: ")
print(" ")
if str in ("d"):
    print("You see your combat boots and the grassy ground below your feet. ")

if str in ("l"):
    print("The forest trees grow thicker and darker that way. You stare into the shadows and feel... cold...")

if str in ("r"):
    print("The forest is warm and inviting that way, you think you can hear a distant birds chirp.")

if str in ("u"):
    print("The blue sky looks gorgeous, a crow flies overhead... that's not a crow...")
    print("It's a Nevermore, an aerial Grim. You stand still until it passes.")

if str in ("b"):
    print("the grass slowly grows to dirt as the area falls into a mountain cliff. You now know where you are.")
    print("Mount Glenn, one of the most Grim-infested places in all of Remnant.")
    print("It's a bit unsettling.")

else:
    print("Try that again")
</code></pre>
<p>I want the code to repeat the question to the user, until they've answered every possible answer and move on to the next question. I also want it to repeat the question when they get else. How do I do this? </p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use <code>str</code> as a variable name, it will shadow an important builtin and cause weird problems.</p>
<p>Use a while loop to restrict the output to valid options.</p>
<pre><code>valid_choices = ('d', 'l', 'r', 'u', 'b',)

choice = None
while choice not in valid_choices:
    text = input("Which direction do you steer your head? d= down, l= left, r= right, u= up, b= behind you: ")
    choice = text.strip()

if choice == 'd':
    print ('...')
elif choice == 'u':
    print ('...')
</code></pre>
<p>See also:</p>
<ul>
<li><a href="https://docs.python.org/2/library/string.html#string.strip" rel="nofollow"><code>string.strip</code></a></li>
<li><a href="https://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow">tuples</a></li>
<li><a href="https://docs.python.org/2/library/constants.html#None" rel="nofollow"><code>None</code></a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Basically you can put your question in a loop and iterate through it until you enter one of the desired 'if' case. I have modified your code as below. Please have a look</p>
<pre><code>print("\n\n\n\n\nYou awake to find yourself in the center of a clearing in a forest.")
print("You stand up and decide to take a look around.")

while True:
    str = input("Which direction do you steer your head? d= down, l= left, r= right, u= up, b= behind you: ")
    print(" ")
    if str in ("d"):
        print("You see your combat boots and the grassy ground below your feet. ")
        break

    if str in ("l"):
        print("The forest trees grow thicker and darker that way. You stare into the shadows and feel... cold...")
        break

    if str in ("r"):
        print("The forest is warm and inviting that way, you think you can hear a distant birds chirp.")
        break

    if str in ("u"):
        print("The blue sky looks gorgeous, a crow flies overhead... that's not a crow...")
        print("It's a Nevermore, an aerial Grim. You stand still until it passes.")
        break

    if str in ("b"):
        print("the grass slowly grows to dirt as the area falls into a mountain cliff. You now know where you are.")
        print("Mount Glenn, one of the most Grim-infested places in all of Remnant.")
        print("It's a bit unsettling.")
        break

    else:
        print("Try that again")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do something like this:</p>
<pre><code>answered = False
while not answered:
    str = input("Question")
    if str == "Desired answer":
        answered = True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's how I would do this; explanation is in the comments:</p>
<pre><code># Print out the start text
print("\n\n\n\n\nYou awake to find yourself in the center of a clearing in a forest.")
print("You stand up and decide to take a look around.")

# Use a function to get the direction; saves some repeating later
def get_direction():
        answer = input("Which direction do you steer your head? d= down, l= left, r= right, u= up, b= behind you: ")
        print(" ")
        return answer

# Keep running this block until the condition is False.
# In this case, the condition is True, so it keeps running forever
# Until we tell Python to "break" the loop.
while True:
        # I changed "str" to "answer" here because "str" is already a Python
        # built-in. It will work for now, but you'll get confused later on.
        answer = get_direction()

        if answer == "d":
                print("You see your combat boots and the grassy ground below your feet. ")

                # Stop the loop
                break
        elif answer == "l":
                print("The forest trees grow thicker and darker that way. You stare into the shadows and feel... cold...")
                break
        elif answer == "r":
                print("The forest is warm and inviting that way, you think you can hear a distant birds chirp.")
                break
        elif answer == "u":
                print("The blue sky looks gorgeous, a crow flies overhead... that's not a crow...")
                print("It's a Nevermore, an aerial Grim. You stand still until it passes.")
                break
        elif answer == "b":
                print("the grass slowly grows to dirt as the area falls into a mountain cliff. You now know where you are.")
                print("Mount Glenn, one of the most Grim-infested places in all of Remnant.")
                print("It's a bit unsettling.")
                break
        else:
                print("Try that again")

                # NO break here! This means we start over again from the top
</code></pre>
<p>Now, none of this scales very well if you add more than a few directions;
because I assume that after you go "right" you want a new question, so that's a
new loop inside the loop, etc.</p>
<pre><code># The start text
print("\n\n\n\n\nYou awake to find yourself in the center of a clearing in a forest.")
print("You stand up and decide to take a look around.")

# Use a function to get the direction
def get_direction():
    answer = input("Which direction do you steer your head? d= down, l= left, r= right, u= up, b= behind you: ")
    print(" ")
    return answer


# Use a function to store a "location" and the various descriptions that
# apply to it
def location_start():
    return {
        'down': [
            # Function name of the location we go to
            'location_foo',

            # Description of this
            'You see your combat boots and the grassy ground below your feet.'
        ],

        'left': [
            'location_bar',
            'The forest trees grow thicker and darker that way. You stare into the shadows and feel... cold...'
        ],

        'right': [
            'location_other',
            'The forest is warm and inviting that way, you think you can hear a distant birds chirp.'
        ],

        'up': [
            'location_more',
            "The blue sky looks gorgeous, a crow flies overhead... that's not a crow...\n" +
                "It's a Nevermore, an aerial Grim. You stand still until it passes."
        ],

        'behind': [
            'location_and_so_forth',
            "The grass slowly grows to dirt as the area falls into a mountain cliff. You now know where you are.\n" +
                "Mount Glenn, one of the most Grim-infested places in all of Remnant.\n" +
                "It's a bit unsettling."
        ],
    }

# And another location ... You'll probably add a bunch more...
def location_foo():
    return {
        'down': [
            'location_such_and_such',
            'desc...'
        ],
    }

# Store the current location
current_location = location_start

# Keep running this block until the condition is False.
# In this case, the condition is True, so it keeps running forever
# Until we tell Python to "break" the loop.
while True:
    # Run the function for our current location
    loc = current_location()
    answer = get_direction()

    if answer == ("d"):
        direction = 'down'
    elif answer == ("l"):
        direction = 'left'
    elif answer == ("r"):
        direction = 'right'
    elif answer == ("u"):
        direction = 'up'
    elif answer == ("b"):
        direction = 'behind'
    else:
        print("Try that again")

        # Continue to the next iteration of the loop. Prevents the code below
        # from being run
        continue

    # print out the key from the dict
    print(loc[direction][1])

    # Set the new current location. When this loop starts from the top,
    # loc = current_location() is now something different!
    current_location = globals()[loc[direction][0]]
</code></pre>
<p>Now, this is just <em>one</em> way of doing it; one downside here is that you'll need
to repeat the descriptions for the locations if you want to allow the player to
approach one location from different directions. This may not apply to your
adventure game (the original <code>adventure</code> doesn't allow this, if I remember
correctly).<br/>
You can fix that quite easily, but I'll leave that as an exercise to you ;-)</p>
</div>
<span class="comment-copy">Use a while loop, break out when a breaking condition is met.</span>
<span class="comment-copy">I don't understand loop's. They are... frustrating. How would I go about this?</span>
<span class="comment-copy">Why are you using <code>str in ("d")</code> and not <code>str == d</code>?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/compound_stmts.html#while" rel="nofollow noreferrer">docs.python.org/3/reference/compound_stmts.html#while</a></span>
<span class="comment-copy">Would you like to elaborate why they are frustrating? They do an action, then check a condition, then re-execute on a condition. Seems simple</span>
<span class="comment-copy">Thank you! This is ludicrously helpful! I do want to ask, what does text.strip do, what does the () do, and what is the choice=none?</span>
<span class="comment-copy">The <code>text.strip()</code> will remove the whitespace.  The parens syntax is a <code>tuple</code>, it's similar to a <code>list</code> but immutable.  <code>None</code> is a constant that represents a special invalid value.  <a href="https://docs.python.org/2/library/constants.html#None" rel="nofollow noreferrer">docs.python.org/2/library/constants.html#None</a></span>
<span class="comment-copy">Interesting! So, since it's immutable, it will display regardless of what may conflict with it normally, right? And thank you on the none.</span>
<span class="comment-copy">The immutability of the tuple is not interesting, I wouldn't focus on it.  It's only used because we don't need a mutable list here.</span>
<span class="comment-copy">Neato! Thank you! So the "break", that makes it jump outside of the while loop and go to the next part? So not breaking, continues it, am I correct in my understanding?</span>
<span class="comment-copy">Yes exactly. If it enters any one of the 'if' condition, break command will exit the while loop. Otherwise, it would keep on executing the same loop again and again</span>
<span class="comment-copy">You are incredible, thank you.</span>
