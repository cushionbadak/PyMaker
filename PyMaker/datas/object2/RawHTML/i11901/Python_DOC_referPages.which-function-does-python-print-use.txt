<div class="post-text" itemprop="text">
<p>I've got an object which I print to the terminal, and it looks like this:</p>
<pre><code>&gt;&gt;&gt; print b
&lt;p&gt;„De neergang kan een duikvlucht worden.”&lt;/p&gt;
</code></pre>
<p>So I then wondered from which function this the result is. So I tried the following:</p>
<pre><code>&gt;&gt;&gt; b.__repr__()
'&lt;lxml.etree._XSLTResultTree object at 0x112c6a980&gt;'
&gt;&gt;&gt; b.__str__()
'\xe2\x80\x9eDe neergang kan een duikvlucht worden.\xe2\x80\x9d&lt;/p&gt;'
&gt;&gt;&gt; b.__unicode__()
'u'&lt;p&gt;\u201eDe neergang kan een duikvlucht worden.\u201d&lt;/p&gt;'
</code></pre>
<p>As you can see, neither of these functions displays what the <code>print</code> statement shows. I always thought that <code>print</code> actually shows the result of either <code>__repr__()</code>, <code>__str__()</code> or <code>__unicode__()</code>, but that is clearly not the case. </p>
<p>So what does <code>print</code> actually call?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is easy enough to check this sort of thing:</p>
<pre><code>&gt;&gt;&gt; class C(object):
    def __repr__(self):
        print("repr called")
        return "repr"
    def __str__(self):
        print("str called")
        return "str"
    def __unicode__(self):
        print("unicode called")
        return "unicode"


&gt;&gt;&gt; print C()
str called
str
&gt;&gt;&gt; 
</code></pre>
<p>In fact what happens internally is that <code>print</code> (as a function that is, I haven't checked the opcode though I think it is the same) calls PyFile_WriteObject with the Py_PRINT_RAW flag.</p>
<blockquote>
<p>int PyFile_WriteObject(PyObject *obj, PyObject *p, int flags)</p>
<p>Write
  object obj to file object p. The only supported flag for flags is
  Py_PRINT_RAW; if given, the str() of the object is written instead of
  the repr(). Return 0 on success or -1 on failure; the appropriate
  exception will be set.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><code>object.__str__(self)</code></p>
<p>Called by <code>str(object)</code> and the built-in functions <code>format()</code> and <code>print()</code> to compute the &gt;'informal' or nicely printable string representation of an object. The return value must &gt;be a string object.</p>
</blockquote>
<p>This is from python <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer">documentation</a>. So clearly, <code>print</code> function will call defined <code>__str()__</code>, if you define both <code>__str()__</code> and <code>__repr()__</code> inside the class. But in the case you just implement <code>__repr()__</code>, then <code>print(object)</code> shall use <code>__repr()__</code>.</p>
<p>Hope this will help.</p>
</div>
<span class="comment-copy">It is <code>__str__</code>, but when you do just <code>b.__str__()</code>, you are in effect doing <code>print b.__str__().__repr__()</code>, so it still prints differently.</span>
<span class="comment-copy">Try <code>print b.__str__()</code></span>
