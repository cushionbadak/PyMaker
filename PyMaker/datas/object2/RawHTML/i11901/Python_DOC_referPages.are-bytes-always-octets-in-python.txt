<div class="post-text" itemprop="text">
<p>Could there be a Python implementation where the assertion fails:</p>
<pre><code>assert all(byte in range(256) for byte in any_bytes_object) # Python 3 semantics 
assert all(byte in range(256) for byte in map(ord, any_bytes_object)) # Python 2
</code></pre>
<p><a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/limits.h.html" rel="nofollow">POSIX specifies explicitly that <code>CHAR_BIT == 8</code> (8 bits per byte)</a>. Is there a similar guarantee in Python? Is it documented somewhere?</p>
<p><a href="https://docs.python.org/2/reference/datamodel.html#index-20" rel="nofollow">Python 2 reference says: <em>"Characters represent (<strong>at least</strong>) 8-bit bytes."</em></a></p>
<p>If <code>bytes</code> name is not defined (on old Python versions) e.g., on Jython 2.5 then the question is about <code>str</code> type (bytestrings) i.e., <code>bytes = str</code> on Python 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>The bytes object <a href="https://docs.python.org/3/library/stdtypes.html#binaryseq" rel="nofollow">Python 3 documentation</a> says</p>
<blockquote>
<p>bytes objects actually behave like immutable sequences of integers, with each value in the sequence restricted such that 0 &lt;= x &lt; 256</p>
</blockquote>
<p>And the <code>bytearray</code> type is documented in both <a href="https://docs.python.org/3/library/functions.html#bytearray" rel="nofollow">Python 3</a> and <a href="https://docs.python.org/2/library/functions.html#bytearray" rel="nofollow">Python 2</a> as</p>
<blockquote>
<p>a mutable sequence of integers in the range 0 &lt;= x &lt; 256</p>
</blockquote>
<p>so the language is designed under the assumption of 8-bit bytes.</p>
<hr/>
<p>The Python 2 data model section saying "at least" 8 bits seems to just be one of the places where the Python 2 documentation hasn't been kept up to date very well compared to the Python 3 documentation. It dates back to at least <a href="https://docs.python.org/release/1.4/ref/ref3.html#REF22319" rel="nofollow">Python 1.4</a>, back in the really early days when they weren't sure whether they might want to support weird byte sizes.</p>
<p>Since at least the introduction of unicode support in the 2.0 release, the documentation has been full of places referring to the bytestring type as "8-bit strings". Python isn't as rigorously specified as something like C, but I'd say any "conforming" implementation of Python 2.0 or up would have to have 8-bit bytes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Additionally to the official documentation <a href="https://stackoverflow.com/a/36265778/674064">cited by user2357112</a>, we can consult the Python enhancement proposals that introduced the bytes object.</p>
<p><a href="https://www.python.org/dev/peps/pep-0358/" rel="nofollow noreferrer">PEP 358 -- The "bytes" Object</a> specified:</p>
<blockquote>
<p>A bytes object stores a mutable sequence of integers that are in the range 0 to 255.</p>
</blockquote>
<p>As we know that bytes objects ended up <em>immutable</em>, <strong>this specification can not be fully applicable</strong> and the 'range' part of it <em>might</em> be moot, too.</p>
<p>Interestingly, <a href="https://www.python.org/dev/peps/pep-3137/" rel="nofollow noreferrer">PEP 3137 -- Immutable Bytes and Mutable Buffer</a>, which partially superseded PEP 358 (and specifies bytes as <em>immutable</em> and introduces bytearrays as the <em>mutable</em> equivalent) only specifies what you can <em>put into</em> bytes objects and into bytearrays ("int[eger]s in range(256)"), but not what may <em>come out</em> of them.</p>
<p>Neither PEP mentions "bit" or "bits" at all. (Though we know from bitwise boolean operations how Python integers map to bit patterns, so there shouldn't be any surprises there, I hope.)</p>
</div>
<div class="post-text" itemprop="text">
<h1>Python 3</h1>
<p><a href="https://docs.python.org/3.0/reference/datamodel.html#index-686" rel="nofollow">Since Python 3.0</a>, the Python language reference specifies:</p>
<blockquote>
<p>A bytes object is an immutable array. The items are 8-bit bytes, represented by integers in the range 0 &lt;= x &lt; 256.</p>
</blockquote>
<h1>Python 2</h1>
<p><a href="https://docs.python.org/2/reference/datamodel.html#index-20" rel="nofollow">Before that</a> (i.e., up to Python 2.7), it specified (as already mentioned in the question):</p>
<blockquote>
<p>The items of a string are characters. […] Characters represent <strong>(at least)</strong> 8-bit bytes.</p>
</blockquote>
<p>(Emphasis added.)</p>
<p>Note that Python 2 did not have a <code>bytes</code> object. To hold immutable sequences of byte-chunked binary data in Python 2, strings were/are usually used. (Python 3 strings in contrast are meant for textual data only and are more equivalent to Python 2's <code>unicode</code> objects than to Python 2 strings.)</p>
<h2>but ...</h2>
<p>Python 2 documentation of the <a href="https://docs.python.org/2/library/functions.html#ord" rel="nofollow"><code>ord()</code> function</a> mentions "8-bit strings" and contrasts them to unicode objects. It might be implied that all non-unicode Python-2 strings are 8-bit strings, but I wouldn't count on that.</p>
<h1>Conclusion</h1>
<p>A Python implementation that provides Python-3-compliant <code>bytes</code> objects would be restricted to only hold 8-bit bytes in them. A Python implementation compliant to Python 2 would not be bound by this (as a <code>bytes</code> object, if it features one, would be unspecified) and if you'd use its Python-2-compliant strings as a substitute, there wouldn't be any guarantees about maximum byte size (actually, character size), either, unless the implementation states some guarantees of its own.</p>
</div>
<span class="comment-copy">I was gonna nit pick(a str is not bytes in python3) ... but then i saw it was you... Im pretty sure you know this and really mean a bytes object</span>
<span class="comment-copy">@JoranBeasley: I don't see <code>str</code> being mention in the question. I've updated the question to show both Python 3 and Python 2 code examples.</span>
<span class="comment-copy">While in C the terms <code>char</code> and <code>byte</code> are basically synonymous, POSIX originally made no claims about the number of bits in a byte.  The C99 spec in a roundabout way required that a byte be 8-bits (by constructing an obtuse set of requirements whose only solution was an 8-bit byte, without actually stating it explicitly), and as such The Open Group has in modern POSIX standards (2001-now) mandated that bytes are 8 bits (rationale here: <a href="http://pubs.opengroup.org/onlinepubs/009695399/xrat/xbd_chap03.html" rel="nofollow noreferrer">pubs.opengroup.org/onlinepubs/009695399/xrat/xbd_chap03.html</a>).  All that being said, the Python language reference does require that bytes be 8-bits.</span>
<span class="comment-copy">@NickBastin:  1- I don't see where Python language reference (Python 2) requires that bytes be <b>exactly</b> 8-bits. Python 2 spec says <a href="http://stackoverflow.com/questions/36265726/are-bytes-always-octets-in-python/36266136#comment60160415_36266136"><b>at least</b></a> 2- I don't understand how is it relevant for this question why POSIX has chosen <code>CHAR_BIT == 8</code> (<code>sizeof(char) == 1</code> i.e., char is byte here) 3- In principle, Python definition of what <code>byte</code> is may differ from the <code>byte</code> definition used by other parts of the system such as JVM, C compiler, CPU. Though they are in agreement in practice.</span>
<span class="comment-copy">@J.F.Sebastian: The python spec for 3.6 says exactly 8 bits: <a href="https://docs.python.org/3.6/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">docs.python.org/3.6/reference/…</a>  Also the POSIX question is relevant because your question implicitly claims that CHAR_BIT is a byte (when you say <code>8 bits per byte)</code>, but that is not true.  CHAR_BIT and byte have no specified relationship.</span>
<span class="comment-copy">Could you comment on the <a href="http://stackoverflow.com/a/36267980/4279">"at least" part in Python 2 reference</a>?</span>
<span class="comment-copy">@J.F.Sebastian: I'd say that's something they just never bothered to change in the Python 2 docs. It's at least as old as the <a href="https://docs.python.org/release/1.4/ref/ref3.html#REF19057" rel="nofollow noreferrer">1.4 documentation</a>. There are a lot of places where the Python 2 documentation hasn't been kept up to date as well as the Python 3 docs. Plenty of other places in the Python 2 docs talk about "8-bit strings", apparently because they suddenly had to disambiguate them from unicode strings when 2.0 introduced unicode support.</span>
<span class="comment-copy">Python isn't as rigorously specified as a language like C, but I'd say any "conforming" implementation of a Python version 2.0 or up would have to have 8-bit bytestrings.</span>
<span class="comment-copy">Yes, <a href="https://hg.python.org/cpython/rev/dfd0114cf9ec/" rel="nofollow noreferrer">8-bit is enforced in CPython since 2003 (at least)</a>. Python 3 docs formalize it. Every other place in Python 2 docs mentions only 8-bit strings. I don't know of any Python 2 implementation that does not use 8-bit strings; therefore the answer is: "bytes are always octets in Python". Could you incorporate your comment into the answer.</span>
<span class="comment-copy">@J.F.Sebastian: My comments have been incorporated into the answer.</span>
<span class="comment-copy"><a href="https://docs.python.org/3.6/reference/datamodel.html#objects-values-and-types" rel="nofollow noreferrer">docs.python.org/3.6/reference/…</a>  The section under immutable sequences explicitly states that bytes are 8-bits.</span>
<span class="comment-copy">@NickBastin Good find. That should probably be an answer it it's own right, quoting the relevant section of that page!</span>
<span class="comment-copy">@NickBastin: <a href="https://docs.python.org/2/reference/datamodel.html#index-20" rel="nofollow noreferrer">Python 2 reference says: <i>"Characters represent (<b>at least</b>) 8-bit bytes."</i></a></span>
<span class="comment-copy">@das-g: <code>bytes</code> is an <i>immutable</i> sequence in Python and therefore PEP 358  that says differently can't be used as a reference.</span>
<span class="comment-copy">@J.F.Sebastian re (im)mutability: You're right. I've edited the question to account for that.</span>
<span class="comment-copy"><code>bytes is str</code> on Python 2. If <code>bytes</code> is not defined (old Python versions) then the question is about <code>str</code> type (bytestrings).</span>
