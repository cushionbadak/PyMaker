<div class="post-text" itemprop="text">
<p>This:</p>
<pre><code>import os

class A(object):

    os_sep = os.sep
    _silentSkipsStart = {u'a dir%s' % os_sep}

    def _refreshBasic(self,os_sep=os_sep, skips_start=tuple(
                x.replace(os_sep, u'') for x in _silentSkipsStart)):
        pass
</code></pre>
<p>Fails with:</p>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "C:/Users/MrD/.PyCharm50/config/scratches/scratch", line 3, in &lt;module&gt;
    class A(object):
  File "C:/Users/MrD/.PyCharm50/config/scratches/scratch", line 9, in A
    x.replace(os_sep, u'') for x in _silentSkipsStart)):
  File "C:/Users/MrD/.PyCharm50/config/scratches/scratch", line 9, in &lt;genexpr&gt;
    x.replace(os_sep, u'') for x in _silentSkipsStart)):
NameError: global name 'os_sep' is not defined
</code></pre>
<p>I guess that bringing <code>os_sep = os.sep</code> to global scope should cure that (and I probably should from a design point of view) - but here I am not getting python scoping rules: why is <code>os_sep</code> resolved alright in the other cases and not in <code>genexpr</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well as explained to the <a href="https://stackoverflow.com/a/30445493/281545">answer</a> linked in the comments by @PadraicCunningham:</p>
<blockquote>
<p><a href="https://docs.python.org/3/reference/executionmodel.html#naming" rel="nofollow noreferrer">The scope of names defined in a class block is limited to the class block; it does not extend to the code blocks of methods – this includes comprehensions and generator expressions since they are implemented using a function scope</a></p>
</blockquote>
<p>That is for python 3 - for python 2 <a href="https://docs.python.org/2/reference/executionmodel.html#naming" rel="nofollow noreferrer">list comprehensions would work</a> - but the comprehension variable would leak into class scope - so this would leak x:</p>
<pre><code>    def _refreshBasic(self,os_sep=os_sep, skips_start=tuple(
                [x.replace(os_sep, u'') for x in _silentSkipsStart])):
        pass
</code></pre>
<p>So I went with:</p>
<pre><code>import os

os_sep = os.sep
class A(object):
    _silentSkipsStart = {u'a dir%s' % os_sep}

    def _refreshBasic(self,os_sep=os_sep, skips_start=tuple(
                x.replace(os_sep, u'') for x in _silentSkipsStart)):
        pass
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/30444962/python-beginner-class-variable-error/30445493#30445493" title="python beginner class variable error">stackoverflow.com/questions/30444962/…</a> if you used a list comp it would work in python2</span>
<span class="comment-copy">@PadraicCunningham: "if you used a list comp it would work in python2" - thanks! Should I delete this ?</span>
<span class="comment-copy">@Mr_andMrs_D, no worries, it is  up to yourself, if you fancy writing an answer with what worked fire ahead.</span>
<span class="comment-copy">It happens, if you had something like <code>foo = ["foobar"]</code>  declared after the class and used for in your loop pycharm would also not warn you even though you would get the same error, the scoping rules are obviously slightly different for pycharm.</span>
<span class="comment-copy">Note that if you do use a list comprehension in Python 2, the loop variable <code>x</code> will leak out into the class namespace.</span>
