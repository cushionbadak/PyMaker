<div class="post-text" itemprop="text">
<p>I am trying split an integer into a list and convert every element into it's ASCII character. I want something like this:</p>
<pre><code>    integer = 97097114103104
    int_list = [97, 97, 114, 103, 104]

    chr(int_list[0]) = 'a'
    chr(int_list[1]) = 'a'
    chr(int_list[2]) = 'r'
    chr(int_list[3]) = 'g'
    chr(int_list[4]) = 'h'

    ascii_char = 'aargh'
</code></pre>
<p>Is there a way I can do this? I want it to work for any number such as  <code>'65066066065'</code>, which will return <code>'ABBA'</code>, or <code>'70'</code>, which will return <code>'F'</code>. The issue I'm having is that I want to split the integers into the right numbers. </p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that you take the decimal ascii values, so 3 digits are a char.
Using x mod 1000, would give you the last three digits of the number.
iterate on the number.
Example code:</p>
<pre><code>integer = 97097114103104
ascii_num = ''
while integer &gt; 0:
    ascii_num += chr(integer % 1000)
    integer /= 1000
print ascii_num[::-1] #to Reverse the string
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way can be using <a href="https://docs.python.org/3/library/textwrap.html#textwrap.wrap" rel="nofollow"><code>textwrap</code></a>. </p>
<pre><code>&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; integer = 97097114103104
&gt;&gt;&gt; temp = str(integer) 
&gt;&gt;&gt; temp = '0'+temp if len(temp)%3==2 else temp
&gt;&gt;&gt; [chr(int(i)) for i in textwrap.wrap(temp,3)]
['a', 'a', 'r', 'g', 'h']
</code></pre>
<p>And for your other example</p>
<pre><code>&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; integer = 65066066065
&gt;&gt;&gt; temp = str(integer) 
&gt;&gt;&gt; temp = '0'+temp if len(temp)%3==2 else temp
&gt;&gt;&gt; [chr(int(i)) for i in textwrap.wrap(temp,3)]
['A', 'B', 'B', 'A']
</code></pre>
<p>For <code>integer = 102103</code></p>
<pre><code>&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; integer = 102103 
&gt;&gt;&gt; temp = str(integer) 
&gt;&gt;&gt; temp = '0'+temp if len(temp)%3==1 else temp
&gt;&gt;&gt; [chr(int(i)) for i in textwrap.wrap(temp,3)]
['f', 'g']
</code></pre>
<p>If you want to make the padding of zeroes "fool-proof" you can use <code>zfill</code> as in </p>
<pre><code>temp = temp.zfill((1+len(temp)/3)*3)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about something like this</p>
<pre><code>integer = 97097114103104
#Add leaving 0 as a string
data='0'+str(integer)
d=[ chr(int(data[start:start+3])) for start in range(0,len(data),3)]
</code></pre>
<p>Yields </p>
<pre><code>['a', 'a', 'r', 'g', 'h']
</code></pre>
</div>
<span class="comment-copy">Why would it be <code>[97, 97, ...]</code> instead of <code>[9, 70, 97, ...]</code>?</span>
<span class="comment-copy">@mgilson Prepend 0s to make the length into multiples of 3.. and then split. (or at least that's what I could understand)</span>
<span class="comment-copy">I am thinking something similar tho i think you should check the case where it is an ascii code under 100. like 97, in case there is no 0 before that.</span>
<span class="comment-copy">But that is because it is at the beginning of the number so no problem for this code, for example in the middle of the number it is save as 097</span>
<span class="comment-copy">Yes the first 97 will get eaten last, meaning its no problem, but there is no guarantee there will not be another 97 in the middle without 0. if there is a 0 promised after the first input, then as is your code is a finished product.</span>
<span class="comment-copy">Works for me with your given input, care to elaborate the error you are getting?</span>
<span class="comment-copy">Because I wrote this code according to your example integer, where a two digit ascii value was written as 09.</span>
<span class="comment-copy">@Opticgenius Yep, <code>import textwrap</code>. I will add that</span>
<span class="comment-copy">Thanks, I also like this approach.</span>
<span class="comment-copy">You are welcome, Glad to be of help</span>
<span class="comment-copy">Yeah I'm just trying to figure out a way where I can use a digit like "5555" and return the correct ASCII value.</span>
<span class="comment-copy">@Opticgenius 5555 is illegal; ASCII is only from 0 to 127 and hence 5555 parsed as 005 , 555 is wrong.</span>
<span class="comment-copy">How did you get <code>integer='097097114103104'</code>? In the OPs example it is <code>integer = 97097114103104</code></span>
<span class="comment-copy">I edited the starting values !</span>
<span class="comment-copy">integer = 97097114103104     data='0'+str(integer)</span>
<span class="comment-copy">Please see the new code - This does not handle ABBA !!</span>
<span class="comment-copy">Can you try for <code>integer = 102103</code>?</span>
