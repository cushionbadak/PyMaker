<div class="post-text" itemprop="text">
<p>Given a setup like this:</p>
<pre><code>class Foo():
   state = 'x'
   amount = 1


a = Foo()
b = Foo()
c = Foo()
c.state = 'y'
foos = [a, b, c]
</code></pre>
<p>I want to get a dict that has keys = <code>object.state</code>, values = <code>sum(object.amounts of objects with that state)</code>. In this case:</p>
<pre><code>{'x': 2, 'y': 1}
</code></pre>
<p>I want to do this automatically, so I don't need to know the different possible states in advance.</p>
<p>For sure I could iterate through in some boring manner like this:</p>
<pre><code>my_dict = {}
for foo in foos:
    try:
        my_dict[foo.state] += foo.value
    except (KeyError, TypeError):
        my_dict[foo.state] = foo.value 
</code></pre>
<p>But that is a bit verbose, and I'm wondering if there's a nicer way to do it, maybe with dict comprehensions or something, but my efforts so far have been in vain.</p>
</div>
<div class="post-text" itemprop="text">
<p>How about <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>Counter</code></a>:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt;
&gt;&gt;&gt; foos = [a,b,c]
&gt;&gt;&gt; 
&gt;&gt;&gt; c = Counter()
&gt;&gt;&gt; for x in foos:
        c[x.state] += x.amount


&gt;&gt;&gt; c
Counter({'x': 2, 'y': 1})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dictionary comprehension is not the most optimized approach in this case. Instead you can use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow"><code>collections.defaultdict()</code></a> like following :</p>
<pre><code>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; 
&gt;&gt;&gt; for obj in foos:
...     d[obj.state] += obj.amount
... 
&gt;&gt;&gt; d
defaultdict(&lt;type 'int'&gt;, {'y': 1, 'x': 2})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use defaultdict.</p>
<pre><code>from collections import defaultdict
my_dict = defaultdict(lambda: 0)
for foo in foos:
    my_dict[foo.type] += foo.value
</code></pre>
<p>You could also use setdefault.</p>
<pre><code>my_dict = {}
for foo in foos:
    my_dict.setdefault(foo.type, 0)
    my_dict[foo.type] += foo.value
</code></pre>
</div>
<span class="comment-copy">Where is <code>foo.type</code> coming from?</span>
<span class="comment-copy">Oops, sorry, fixed it, was from an old version.</span>
<span class="comment-copy">@Kasramvd .. my bad .. I was working with <code>itertools</code> at the same time on another question..:P</span>
<span class="comment-copy">For completness, it's possible to do <code>Counter(f.state for f in foos for x in range(f.amount))</code>, but I don't feel it's good enough to get a separate answer.</span>
