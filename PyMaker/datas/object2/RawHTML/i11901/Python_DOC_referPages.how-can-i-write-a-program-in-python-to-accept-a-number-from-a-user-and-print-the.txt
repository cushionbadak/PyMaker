<div class="post-text" itemprop="text">
<pre><code>d = int(input("Please Enter any Number: "))
a = 0

def product_of_digits(Number):
        d= str(Number)
        for integer in d:
            s = 0
            k = []
            while s &lt; (len(d)):
             print (int(d[s])*int(d[s+1])*int(d[s+2])*int(d[s+3])*int(d[s+4]))
            s += 1

print (product_of_digits(a))  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have <strong>multiple</strong> problems in your code. Let’s start in the order of execution:</p>
<ul>
<li><code>print(product_of_digits(a))</code> – Assuming that <code>product_of_digits</code> is supposed to return the product of the digits of the number you pass in, then this would always return <code>0</code> since you pass <code>a</code> (which is zero) instead of the number the user entered (<code>d</code>).</li>
<li><code>for integer in d</code> – <code>for</code> loops iterate over the elements of something, not the indexes. In this case, this will iterate over the characters in the string <code>d</code>. This means that in each iteration <code>integer</code> will be a single digit.</li>
<li><code>s = 0</code> – In every loop iteration, you reset it to zero.</li>
<li>Similarly <code>s += 1</code> at the end of the <code>for</code> loop will not cause any effect, since at the beginning of the next iteration, <code>s</code> will be zero again. You probably meant this line to be inside the <code>while</code> loop (it has the wrong indentation level for that though).</li>
<li><code>while s &lt; (len(d))</code> – So inside the loop where you are iterating over the digits of the number, you then want to iterate over the digits again? Why</li>
<li><code>int(d[s]) * int(d[s+1]) …</code> – Statically multiplying five digits here defeats the purpose of handling every number – instead of just those numbers that have 5 digits.</li>
<li><code>d[s+4]</code> – In order for that to work, <code>s</code> needs to be lower than <code>len(d)-5</code> but you are iterating until <code>s</code> is <code>len(d) - 1</code>.</li>
<li><code>print()</code> – You should have your function return the product instead of printing it.</li>
</ul>
<p>A possible solution could look like this:</p>
<pre><code>def product_of_digits (number):
    product = 1
    for digit in str(number):
        product = product * int(digit)
    return product

print(product_of_digits(d))
</code></pre>
</div>
<span class="comment-copy">You should take a look at the <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">itertools.reduce()</a> function.</span>
<span class="comment-copy">Another good solution: <code>return itertools.reduce(lambda x,y:int(x)*int(y), str(number), 1)</code></span>
<span class="comment-copy">@zondo based on how the question looks, I doubt the guy is expected to use lambdas in his homework.</span>
<span class="comment-copy">@AmitGold: That's why I said <i>another</i> good solution.  I don't propose to replace this one.</span>
