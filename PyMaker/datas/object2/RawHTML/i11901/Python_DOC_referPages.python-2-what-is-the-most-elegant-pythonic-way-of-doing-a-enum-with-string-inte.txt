<div class="post-text" itemprop="text">
<p>I want a enum with predefined single character constants (good for storing in database) and string interpretation. Here is what I am thinking of:</p>
<pre><code>class Fruits(Enum):
    APPLE = 'A'
    PEAR = 'P'
    BANANA = 'B'
    def __unicode__(self):
        if self == APPLE: return "Crunchy Apple"
        if self == PEAR: return "Sweet Pear"
        if self == BANANA: return "Long Banana"
</code></pre>
<p>But </p>
<pre><code>fruit = Fruits.APPLE
print fruit.__unicode__()
</code></pre>
<p>gives </p>
<pre><code>AttributeError: 'unicode' object has no attribute '__unicode__'
</code></pre>
<p>And besides there must be a more elegant way of doing it</p>
<p>How to do it better?</p>
</div>
<div class="post-text" itemprop="text">
<p>A couple observations:</p>
<ul>
<li><p>You shouldn't call <code>__dunder__</code> methods directly; instead use the matching command: <code>unicode</code> instead of <code>__unicode__</code></p></li>
<li><p>I am unable to duplicate your problem</p></li>
</ul>
<p>Using the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">stdlib <code>Enum</code></a> (3.4+) or the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a> (Python 2.x) you will have to do it the hard way -- make your own base <code>Enum</code> class:</p>
<pre><code>class EnumWithDescription(Enum):
    def __new__(cls, value, desc):
        member = object.__new__(cls)
        member._value_ = value
        member.description = desc
        return member
    def __unicode__(self):
        return self.description

class Fruits(EnumWithDescription):
    _order_ = 'APPLE PEAR BANANA'   # if using Python 2.x and order matters
    APPLE = 'A', 'Crunchy Apple'
    PEAR = 'P', 'Sweet Pear'
    BANANA = 'B', 'Long Banana'
</code></pre>
<p>and in use:</p>
<pre><code>&gt;&gt;&gt; fruit = Fruits.APPLE
&gt;&gt;&gt; unicode(fruit)
u'Crunchy Apple'
</code></pre>
<hr/>
<p>If you can use the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer"><code>aenum library</code></a><sup>1</sup> you will have an easier time of it:</p>
<pre><code>from aenum import Enum

class Fruits(Enum, init='value description'):
    APPLE = 'A', 'Crunchy Apple'
    PEAR = 'P', 'Sweet Pear'
    BANANA = 'B', 'Long Banana'
    def describe(self):
        return self.description
</code></pre>
<p>and in use:</p>
<pre><code>fruit = Fruits.APPLE
fruit.describe()
</code></pre>
<p>Note that since <code>unicode</code> is the default in Python 3 I changed the name to <code>describe</code>.</p>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://pypi.python.org/pypi/enum34" rel="nofollow">enum34</a> module has what you want. </p>
<pre><code>from enum import Enum

class Fruits(Enum):
    apple = 'A'
    pear = 'P'
    banana = 'B'

fruit = Fruits.apple

print fruit.value
&gt;&gt; 'A'
</code></pre>
<p>Possibly even better is using integers</p>
<pre><code>from enum import Enum

class Fruits(Enum):
    apple = 1
    pear = 2
    banana = 3

fruit = Fruits.apple

print fruit.value
&gt;&gt; 1
</code></pre>
<p>And recreate the object if you get it's value (from a database for instance) using:</p>
<pre><code>fruit = Fruits(1)
</code></pre>
</div>
<span class="comment-copy">You appear to be using Python2. Can you confirm whether you are using Python2 or Python3? (You can examine <code>sys.version</code> to be sure.)</span>
<span class="comment-copy">Where did <code>Fruits.TYPE_APPLE</code> come from? You only defined <code>Fruits.APPLE</code>. If you retyped the code in the question from memory, copy-paste it from a file you've actually run or an actual interactive session next time.</span>
<span class="comment-copy">@Rob I am more interested in Python 2</span>
<span class="comment-copy">@user2357112 Fixed.</span>
<span class="comment-copy">This doesn't answer the OP's question.</span>
<span class="comment-copy">Ah you're actually correct I think. But there's also fruit.name for the requested sting interpretation.</span>
