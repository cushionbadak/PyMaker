<div class="post-text" itemprop="text">
<p>Assume I have the following two dimensional array:</p>
<pre><code>m_array = [['String A', 1, 1.1, 'haha'],
           ['String B', 2, 0.9, 'haha'],
           ['String C', 0, 1.1, 'haha'],
           ['String D', 3, 0.9, 'haha']]
</code></pre>
<p><strong>To Do:</strong> I want to get extract the 0-index values for this multi-array, that is the 'String A', 'String B', 'String C', 'String C' and store it in a single array: <code>s_array</code> dynamically.</p>
<p><strong>Problem</strong>: I use a for loop to iterate through all the values. Here is the code</p>
<pre><code>    # create a single dimensional array
    s_array = []
    # Iterator is the length of the m_array. (Which should be 4; 0-index, 1-index, 2-index and 3-index     
    iterator = range(len(m_array))

    i_array = 0

    if(i_array &lt;=iterator):
        for str_value in m_array[i_array][0]:
            s_array.append(str_value)  
</code></pre>
<p>At this point s_array should be have:</p>
<p><code>s_array['String A', 'String B', 'String C', 'String D']</code></p>
<p>But it does NOT.</p>
<p>I think something is wrong with the logic of my code. But I can't identify the issue, any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a list comprehension:</p>
<pre><code>s_array = [sublist[0] for sublist in m_array]
print s_array
&gt;&gt;&gt; ['String A', 'String B', 'String C', 'String D']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A very compact way to do this is to use the built-in <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> function. Given</p>
<pre><code>m_array = [['String A', 1, 1.1, 'haha'],
           ['String B', 2, 0.9, 'haha'],
           ['String C', 0, 1.1, 'haha'],
           ['String D', 3, 0.9, 'haha']]
</code></pre>
<p>then</p>
<pre><code>zip(*m_array)
</code></pre>
<p>returns</p>
<pre><code>[('String A', 'String B', 'String C', 'String D'), (1, 2, 0, 3), (1.1000000000000001, 0.90000000000000002, 1.1000000000000001, 0.90000000000000002), ('haha', 'haha', 'haha', 'haha')]
</code></pre>
<p>That's because the <code>*</code> "splat" operator unpacks the items in <code>m_array</code> and passes each one as an argument to <code>zip</code>. See <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow">Unpacking Argument Lists</a> in the official Python tutorial.</p>
<p>So we just need to extract the first tuple and convert it to a list.</p>
<pre><code>s_array = list(zip(*m_array)[0])
print(s_array)
</code></pre>
<p><strong>output</strong></p>
<pre><code>['String A', 'String B', 'String C', 'String D']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are iterating through each item in <code>m_array[i_array][0]</code> and appending each item instead of appending the whole list.  You don't need to use indexing, though, because you can just iterate through <code>m_array</code>:</p>
<pre><code>s_array = []
for array in m_array:
    s_array.append(array[0])
</code></pre>
<p>When all a <code>for</code> loop does is add things to a list, that is a sign that you can probably use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>:</p>
<pre><code>s_array = [array[0] for array in m_array]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you can see there's many ways. Best of all for current situation, I think, is <a href="https://stackoverflow.com/a/36264343/1113207">list comprehension</a>.</p>
<p>One more interesting way is to use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">map</a> and <a href="https://docs.python.org/3.5/library/operator.html#operator.itemgetter" rel="nofollow noreferrer">itemgetter</a>:</p>
<pre><code>m_array = [['String A', 1, 1.1, 'haha'],
           ['String B', 2, 0.9, 'haha'],
           ['String C', 0, 1.1, 'haha'],
           ['String D', 3, 0.9, 'haha']]

from operator import itemgetter

print(list(map(itemgetter(0), m_array)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think see the issue. You are iterating through "String A" instead of m_array. m_array[i_array][0] is "String A" and you aren't changing value of i_array.</p>
<p>Simple fix:</p>
<pre><code>for sublist in m_array:
    s_array.append(sublist[0])
</code></pre>
<p>I am sorry if this doesn't help but I can't ask for clarification on what are you trying to achieve (not enough reputation). </p>
</div>
<div class="post-text" itemprop="text">
<p>Following the comments on <a href="https://stackoverflow.com/users/4014959/pm-2ring">PM 2RING</a>'s answer, I did some profiling tests which revealed the following results:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('[x[0] for x in m_array]', "m_array = [['String A', 1, 1.1, 'haha'], ['String B', 2, 0.9, 'haha'],['String C', 0, 1.1, 'haha'],['String D', 3, 0.9, 'haha']]",number = 10**6)
0.3232365940002637
&gt;&gt;&gt; timeit.timeit('list(zip(*m_array))[0]', "m_array = [['String A', 1, 1.1, 'haha'], ['String B', 2, 0.9, 'haha'],['String C', 0, 1.1, 'haha'],['String D', 3, 0.9, 'haha']]",number = 10**6)
0.6186811590014258
</code></pre>
<p>Note:
Test performed on my ubuntu 14.04 Box, LENOVO THINKPAD ULTRABOOK, with CORE i7.</p>
</div>
<span class="comment-copy">What do you expect <code>if(i_array &lt;=iterator):</code> to do?</span>
<span class="comment-copy">base Python, this is the best approach!</span>
<span class="comment-copy">@ColonelBeauvel .. Why do u say it's the best approach?...What about list comprehension one?</span>
<span class="comment-copy">@Iron Fist, for speed reason and conciseness. For reading purposes it's however harder than list comprehension for non initiated.</span>
<span class="comment-copy">@IronFist: Well, <code>zip</code> <i>is</i> written in C... at least, it is in standard Python (aka CPython). Here's the relevant <a href="https://hg.python.org/cpython/file/57c157be847f/Python/bltinmodule.c#l2490" rel="nofollow noreferrer">source code</a>, if you're interested.</span>
<span class="comment-copy">@IronFist: OTOH, to see what the speed differences are one should do some proper <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code></a> tests. But I don't have the time to do that right now...</span>
<span class="comment-copy">FWIW, I suspect that the OP is using Python 2 (otherwise they'd get an error when comparing an <code>int</code> to a <code>range</code> object). And in Python 2 the <code>list</code> call can be omitted, since  Python 2's <code>map</code> returns a <code>list</code> rather than an iterator.</span>
