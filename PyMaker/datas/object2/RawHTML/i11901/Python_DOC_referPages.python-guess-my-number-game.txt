<div class="post-text" itemprop="text">
<pre><code>import random

print("hello, what is your name?")
GG = input()

print("well, " + GG + ", I am thinking of a number between 0 and 20")
number = random.randint(0,20)

try:
    for taken in range(1,7):
        print("Take a guess.")   
        guess = int(input())

        if guess &lt; number:
            print("your guess is too low.")
        elif guess &gt; number:
            print("your guess is too high.")
        else:
            break

except ValueError:
    print("please enter a valid number")

    if guess == number:
       print("good job, "+ GG + " you guessed my number in " + str(taken) + " guesses")
    else:
       print("nope,the number i was thinking of was " + str(number))
</code></pre>
<p>If I want everytime when the player types an invalid input and the "Take a guess" game continues, how can I do?</p>
</div>
<div class="post-text" itemprop="text">
<h3>Design</h3>
<p>I think that you should separate, as far as possible, the two issues of looping on the responses and getting a validated response, and you can achieve this by writing a function that handles the problem of validating the user input.</p>
<p>Such a function needs to know how to prompt the user and what to tell the user if their input is invalid, so we must provide two arguments to the function, but we provide also reasonable defaults for the arguments...</p>
<p>To look at the correctness of the input, we use a <code>try: ... except: ...</code> clause, if the body of <code>try</code> raises an error, <code>except</code> looks at the error and if it is a particular one (for us, <code>ValueError</code>) the body of the except is executed.</p>
<p>The body of the <code>except</code> ends with a call to the function that we are defining, because this is another way of looping, if you consider what is happening... and in this case it is a <em>simpler</em> way of looping.</p>
<h3>Implementation</h3>
<p>That said, with the understanding of what we need in our function, we write it:</p>
<pre><code>def get_integer(prompt='Enter an integer: ',
                err_prompt='Not an integer, please try again.'):
    answer = input(prompt)
    try:
        number = int(answer)
        return number
    except ValueError:
        print(err_prompt)
        return get_integer(prompt, err_prompt)
</code></pre>
<h3>Testing</h3>
<p>And now a bit of testing,</p>
<pre class="lang-none prettyprint-override"><code>In [19]: get_integer()
Enter an integer: 1
Out[19]: 1

In [20]: get_integer()
Enter an integer: a
Not an integer, please try again.
Enter an integer: 1
Out[20]: 1

In [21]: get_integer(prompt='Un numero intero, per favore: ')
Un numero intero, per favore: 23.2
Not an integer, please try again.
Un numero intero, per favore: 22
Out[21]: 22

In [22]: get_integer(err_prompt='Naaaah!')
Enter an integer: q
Naaaah!
Enter an integer: 11
Out[22]: 11

In [23]: 
</code></pre>
<h3>Putting it all together</h3>
<p>I've used your implementation, because for sure it is good enough, but I've changed a little the capitalization of the strings, no more <code>try ... except</code> as this is hidden in <code>get_integer()</code> and the introduction of an <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow"><code>else</code> clause to the <code>for</code> loop</a> that is executed on normal termination, so that your user is informed of the reason why the program is stopping.</p>
<pre><code>import random

def get_integer(prompt='Enter an integer: ',
                err_prompt='Not an integer, please try again.'):
    answer = input(prompt)
    try:
        return int(answer)
    except ValueError:
        print(err_prompt)
        return get_integer(prompt, err_prompt)

print("Hello, what is your name?")
GG = input()

print("Well, " + GG + ", I am thinking of a number between 0 and 20...")
number = random.randint(0,20)

for taken in range(1,7):
    print("Take a guess.")   
    guess = get_integer()

    if guess &lt; number:
        print("Your guess is too low.")
    elif guess &gt; number:
        print("Your guess is too high.")
    else:
        print("Your guess is exact!")
        break
else:
    print("Too many attempts. You lose!")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Wrap your input in some kind of while loop. </p>
<pre><code>def checkIsValid(value):
     #some validity checking function here.     
</code></pre>
<p>â€Œ </p>
<pre><code>for taken in range(1,7):
        print("Take a guess.")
        guess = input() 
        isValid = checkIsValid(guess)

        while (not isValid):
             print("Invalid input")
             guess = input()
             isValid = checkIsValid(guess)

        guess = int(guess) 
        #continue with the valid value. 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>'''
Created on 2016-3-24

@author: GuangFa
'''

import random

def get_name():
    """
    Get  name from the input.
    :Usage:
        get_name()
    """
    print("hello,what is your name?")
    name=raw_input()
    return name

def get_number():
    """
    Get  number from the input.Return the number until the input is a valid number
    :Usage:
        get_number()
    """
    is_number=False
    while not is_number:
        try:
            number=input('please enter a valid number:')
        except Exception ,e:
            is_number=False

        else:
            is_number=True


    return number    

def  guess():
    """
    Guess the number.The system generates a random number,
    Only 7 chances to guess the number.

    :Usage:
        guess()
    """
    name=get_name()
    print("well,%s, I am thinking of a number between 0 and 20"%name)
    number = random.randint(0,20)
    for taken in range(1,7):
        print("Take a guess.")
        guess=get_number()
        if number==guess:
            print ("good job, %s you guessed my number in %s guesses"%(name,str(taken)) )
            break
        if guess &lt; number:
            print("your guess is too low.")
        elif guess &gt; number:
            print("your guess is too high.")
        if taken==6:
            print "nope,the number i was thinking of was " + str(number)
guess()       
</code></pre>
</div>
<span class="comment-copy">perfect!!!!thank you so much senpai!!!!</span>
<span class="comment-copy">I hate the code repetition in this answer though. Does anyone have a more elegant solution - such that it's not going to display the 'Invalid input' message on the first iteration?</span>
<span class="comment-copy">You can use exceptions for this. Have the program throw a <code>ValueError</code> if the input is not what's expected. (Although I'm not sure if it's okay to use it for this purpose).</span>
<span class="comment-copy">do you have a specific solution?im new to python,i tired your code in everyway i can think of,and it didnt work...</span>
<span class="comment-copy">@Z.Q what's not working about it? To be fair, I haven't tested it, but it looks right.</span>
<span class="comment-copy">@Z.Q apologies - the syntax in python is <code>not</code> ie <code>while(not isValid)</code></span>
<span class="comment-copy">sir,i copied your code and run it,its not working...sorry im new to python,dont know where went wrong.</span>
<span class="comment-copy"><a href="https://github.com/opentesting/Technical_communication/blob/master/guess.py" rel="nofollow noreferrer">guess.py</a></span>
