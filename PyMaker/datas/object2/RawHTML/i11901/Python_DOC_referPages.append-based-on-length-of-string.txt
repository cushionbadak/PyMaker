<div class="post-text" itemprop="text">
<p>I have a df like so:</p>
<pre><code>Year   Month  Day
1984   1      1
1985   12     22
</code></pre>
<p>and I want to make it so <code>Month</code> and <code>Day</code> have two digits no matter what.  So my desired dataframe is like this:</p>
<pre><code>Year   Month  Day
1984   01     01
1985   12     22
</code></pre>
<p>I have been playing around with this:</p>
<pre><code>for i in df.Month:
    i=str(i)
    if len(i) &lt; 2:
        i='0' + i
    print i
</code></pre>
<p>but I am not sure how to actually reinsert the new values into the dataframe and I am pretty sure there is a better way to do this in the first place</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.astype.html" rel="nofollow"><code>astype</code></a> for converting to <code>string</code> and <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.zfill.html" rel="nofollow"><code>zfill</code></a> for filling <code>0</code>:</p>
<pre><code>#df['Year'] = df['Year'].astype(str) #if column Year has to be string
df['Month'] = df['Month'].astype(str).str.zfill(2)
df['Day'] = df['Day'].astype(str).str.zfill(2)
print df
   Year Month Day
0  1984    01  01
1  1985    12  22
</code></pre>
<p>If <code>type</code> of all columns has to be converted to <code>string</code>:</p>
<pre><code>df = df.astype(str) 
df['Month'] = df['Month'].str.zfill(2)
df['Day'] = df['Day'].str.zfill(2)
print df
</code></pre>
<p><strong>Timings</strong>:</p>
<pre><code>In [225]: %timeit df1.apply(lambda x: x.astype(str).str.zfill(2), axis=1)
1 loops, best of 3: 500 ms per loop

In [226]: %timeit a(df)
100 loops, best of 3: 10.8 ms per loop
</code></pre>
<p><strong>Code</strong>:</p>
<pre><code>df1 = df.copy()

def a(df):
    df = df.astype(str); 
    df['Month'] = df['Month'].str.zfill(2);
    df['Day'] = df['Day'].str.zfill(2);
    return df

print df1.apply(lambda x: x.astype(str).str.zfill(2), axis=1)
print a(df)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should let those <code>DataFrame</code>s be as is and only when you need to produce reports should you worry about this presentation problem.</p>
<p>Then it becomes a general string formatting problem (<sup><a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow">see also <code>format()</code></a></sup>).  Shown below are (1) convert-to-string, (2) padded-to-length-two-with-leading-spaces, (3) padded-to-length-two-with-leading-zeroes:</p>
<pre><code>&gt;&gt;&gt; ['{}'.format(x) for x in range(10)]
['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
&gt;&gt;&gt; ['{:2}'.format(x) for x in range(10)]
[' 0', ' 1', ' 2', ' 3', ' 4', ' 5', ' 6', ' 7', ' 8', ' 9']
&gt;&gt;&gt; ['{:02}'.format(x) for x in range(10)]
['00', '01', '02', '03', '04', '05', '06', '07', '08', '09']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think it could be a good idea to create a date column using <code>to_datetime</code> to use the numpy datetime datatype. It acutally looks like this will give you the formatting close to what you want, however you can also format your dates from here using any format you want with <code>dt.strftime</code>:</p>
<pre><code>df['Date'] = pd.to_datetime(df.Year.astype(str) + ' ' 
                          + df.Month.astype(str) + ' ' 
                          + df.Day.astype(str))

df['Date']

0   1984-01-01
1   1985-12-22
Name: Date, dtype: datetime64[ns]

df.Date.dt.strftime("%Y %m %d")

0    1984 01 01
1    1985 12 22
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please try this option. If you want to have month and date with 2 digits each.</p>
<pre><code>for i in df.Month:
    i=str(i)
    print('%02d'%(i,)) #this is for python 3.4.4 in previous version this may be print "%02d" % (i,)
</code></pre>
</div>
<span class="comment-copy">Or with oneliner: <code>df.apply(lambda x: x.astype(str).str.zfill(2), axis=1)</code></span>
<span class="comment-copy">Yes, it is nice, but slow. I will add some timings.</span>
<span class="comment-copy">Very interesting, it is <code>50</code> times slower.</span>
<span class="comment-copy">It's interesting why it's so slow. I thought that they are should have almost the same timings...</span>
<span class="comment-copy">I think <code>zfill</code> without <code>apply</code> is vectorized. It can explain better performance.</span>
