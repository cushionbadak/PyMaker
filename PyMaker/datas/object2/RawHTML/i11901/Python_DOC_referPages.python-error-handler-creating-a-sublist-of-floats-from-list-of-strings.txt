<div class="post-text" itemprop="text">
<p>I have a list of strings as follows</p>
<pre><code>list1 = [' ', '(', '13', 'temp', '1.0E-02', 'given', '42.35', '=', '5']
</code></pre>
<p>How to get the first 'n' float values? For example the code below gets me the last value of float. How to modify it to get the first n values</p>
<pre><code>list1 = [' ', '(', '13', 'temp', '1.0E-02', 'given', '42.35', '=', '5']
for val in list1:
   try:
      float1 = float(val)
   except ValueError:
      continue
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Updating to <code>n=4</code> since people seem to be getting thrown off by the output.</p>
<p>Here's an approach with map/filter that only prints the first n float elements:</p>
<pre><code>n = 4 # Put the number of elements you'd like to see here, for more use 4, 5, etc.
list1 = [' ', '(', '13', 'temp', '1.0E-02', 'given', '42.35', '=', '5']

def get_float(x):
    try:
        return float(x)
    except ValueError:
        pass

for x in list(filter(lambda _: _ is not None, map(get_float, list1)))[:n]:
    print(x)
</code></pre>
<p>Prints:</p>
<pre><code>13.0
0.01
42.35
5.0
</code></pre>
<p><strong>EDIT</strong></p>
<p>To elaborate a bit as requested in comment:</p>
<p><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> takes in a function, and an iterable, and applies that function to every element in the iterable, in our case we are trying to map <code>get_float</code> to every element, <code>x</code>.</p>
<p>Now if <code>x</code> is a float, <code>get_float</code> succeeds and returns x cast into a float value. If x cannot be cast to a float, the function will throw a <code>ValueError</code>, which we don't really need to do anything with - so we pass, and since there is no return statement, we end up returning <code>None</code>.</p>
<p>However, after initial pass of our <code>map</code>, the <code>None</code>s that we got as result of all <code>ValueError</code>s end up in the output of the map, so if you printed <code>list(map(get_float, list1))</code> would see something like: <code>[None, None, 13.0, None, 0.01, None, 42.35, None, 5.0]</code>, with all those extra <code>None</code>s.</p>
<p><a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter</code></a> takes in a function that returns <code>True</code> if you want to keep an element, and <code>False</code> if you want to get rid of it, and an iterable, and results in another iterable with only the elements you want to keep. <code>filter(None, iterable)</code> just uses the default filter where everything where <code>bool(x)</code> evaluates to <code>False</code> is discarded. Thus, after applying the filter, we only end up with the floats inside our <code>filter</code> iterable, which we cast into a <code>list</code>, and slice the outcome of that (<code>[:n]</code>) to only keep the first n elements.</p>
</div>
<div class="post-text" itemprop="text">
<h2>Option 1</h2>
<p>Building on Tgsmith61591's solution: simply get a boolean array to use as index for the list.</p>
<pre><code>import numpy as np

def floatable(x):
  try:
    float(x)
    return True
  except:
    return False

floatable_vec = np.vectorize(floatable) 
list1 = np.array([' ', '(', '13', 'temp', '1.0E-02', 'given', '42.35', '=', '5', '0'])
floats = list1[floatable_vec(list1)]
</code></pre>
<p>Where you vectorize the function so it accepts an entire vector as input, and then simply use the function applied to your list as index to get the desired elements.</p>
<h2>Option 2</h2>
<p>You convert your entire array to floats and placeholder values and then filter out the placeholders.</p>
<pre><code>import numpy as np

def floatify(val):
  try:
    return float(val)
  except ValueError:
    return np.nan

list1 = [' ', '(', '13', 'temp', '1.0E-02', 'given', '42.35', '=', '5', '0']
floats_raw = np.array(map(floatify, list1))
floats = floats_raw[~np.isnan(floats_raw)]
</code></pre>
<p><code>map</code> applies the function <code>floatify</code> to each element in <code>list1</code>. It produces an array of floats and <code>np.nan</code> for values that couldn't be converted. The <code>np.isnan()</code> function gives an array of booleans that are true for <code>np.nan</code> values. The inverse of this boolean array (so only the values that aren't nan) is then used as an index to generate the new array.</p>
<h2>Option 3</h2>
<p>If you <em>aren't</em> concerned with speed (if your arrays aren't that long) and want a quick and dirty solution, you can stick to a for loop that appends:</p>
<pre><code>list1 = [' ', '(', '13', 'temp', '1.0E-02', 'given', '42.35', '=', '5', '0']
floats=[]
for val in list1:
   try:
      floats.append(float(val))
   except ValueError:
      continue
</code></pre>
<h2>Output</h2>
<p><em>Notice I changed the input slightly and added a <code>0</code> value, this value is a difficult one to filter.</em></p>
<p>All the above methods give the following output:</p>
<pre><code>In: print(floats)
Out: [  1.30000000e+01   1.00000000e-02   4.23500000e+01   5.00000000e+00   0.00000000e+00]
</code></pre>
<p>Getting the first <code>n</code> values can be achieved by simply getting the first <code>n</code> values of the <code>floats</code> array:</p>
<pre><code>n = 2
floats_fewer = floats[:n]
</code></pre>
<p>which gives:</p>
<pre><code>In: print(floats_fewer)
Out: [  1.30000000e+01   1.00000000e-02]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is kind of kludgey... but, if you want to do it in a comprehension:</p>
<pre><code>def floatable(x):
    try:
        float(x)
        return True
    except:
        return False

floats = [float(x) for x in list1 if floatable(x)]
&gt;&gt;&gt; floats
[13.0, 0.01, 42.35, 5.0]
</code></pre>
<p>Then to get the first <code>n</code>...</p>
<pre><code>floats[:n]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this way is quite similar to yours. I have just added the condition <em>len (floats) &lt; max_floats</em>:</p>
<pre><code>list1 = [' ', '(', '13', 'temp', '1.0E-02', 'given', '42.35', '=', '5']
floats = []
max_floats = 3

i=0
while i &lt; len(list1) and len(floats) &lt; max_floats:
   try:
      floats.append(float(list1[i]))
   except ValueError:
      continue
   finally:
      i+=1

print (floats)
</code></pre>
<p>So this code produces the following output:</p>
<pre><code>[13.0, 0.01, 42.35]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another one with regex</p>
<pre><code>import re

list1 = [' ', '(', '13', 'temp', '1.0E-02', 'given', '42.35', '=', '5']
print [x for x in list1 if re.match("^\d+?\.\d+?", x)]
</code></pre>
</div>
<span class="comment-copy">Can you please provide more details on working of filter and map functions</span>
<span class="comment-copy">What about 5.0? Does it not print that? :)</span>
<span class="comment-copy">@Tgsmith61591 the question only asked for the first <code>n</code> elements; @WanderingMind editing my answer to elaborate on map/filter</span>
<span class="comment-copy">Ah I see now, I didn't see the 3 in the question, so it didn't register until you said that</span>
<span class="comment-copy">@WanderingMind added more details about map/filter</span>
<span class="comment-copy">What if the list contained <code>'0'</code> as well?</span>
<span class="comment-copy">Good point, I'll see if I can fix that.</span>
<span class="comment-copy">yeah, my edited answer was almost identical to yours I guess, but it's different now. I'll add some more to my answer.</span>
<span class="comment-copy">No worries, I deleted my comment</span>
