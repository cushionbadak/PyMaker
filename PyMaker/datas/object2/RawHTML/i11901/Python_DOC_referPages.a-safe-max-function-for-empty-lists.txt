<div class="post-text" itemprop="text">
<p>Evaluating,</p>
<pre><code>max_val = max(a)
</code></pre>
<p>will cause the error,</p>
<pre><code>ValueError: max() arg is an empty sequence
</code></pre>
<p>Is there a better way of safeguarding against this error other than a <code>try</code>, <code>except</code> catch?</p>
<pre><code>a = []
try:
    max_val = max(a)
except ValueError:
    max_val = default 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.4+, you can use <a href="https://docs.python.org/3/library/functions.html#max" rel="noreferrer"><code>default</code> keyword argument</a>:</p>
<pre><code>&gt;&gt;&gt; max([], default=99)
99
</code></pre>
<p>In lower version, you can use <code>or</code>:</p>
<pre><code>&gt;&gt;&gt; max([] or [99])
99
</code></pre>
<p>NOTE: The second approach does not work for all iterables. especially for iterator that yield nothing but considered truth value.</p>
<pre><code>&gt;&gt;&gt; max(iter([]) or 0)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: max() arg is an empty sequence
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In versions of Python older than 3.4 you can use <code>itertools.chain()</code> to add another value to the possibly empty sequence. This will handle any empty iterable but note that it is not precisely the same as supplying the <code>default</code> argument as the extra value is always included:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; max(chain([42], []))
42
</code></pre>
<p>But in Python 3.4, the default is ignored if the sequence isn't empty:</p>
<pre><code>&gt;&gt;&gt; max([3], default=42)
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The max of an empty sequence "should" be an infinitely small thing of whatever type the elements of the sequence have. Unfortunately, (1) with an empty sequence you can't tell what type the elements were meant to have and (2) there is, e.g., no such thing as the most-negative integer in Python.</p>
<p>So you need to help <code>max</code> out if you want it to do something sensible in this case. In recent versions of Python there is a <code>default</code> argument to <code>max</code> (which seems to me a misleading name, but never mind) which will be used if you pass in an empty sequence. In older versions you will just have to make sure the sequence you pass in isn't empty -- e.g., by <code>or</code>ing it with a singleton sequence containing the value you'd like to use in that case.</p>
<p>[EDITED long after posting because Yaakov Belch kindly pointed out in comments that I'd written "infinitely large" where I should have written "infinitely small".]</p>
</div>
<div class="post-text" itemprop="text">
<p>Considering all the comments above it can be a wrapper like this:</p>
<pre><code>def max_safe(*args, **kwargs):
    """
    Returns max element of an iterable.

    Adds a `default` keyword for any version of python that do not support it
    """
    if sys.version_info &lt; (3, 4):  # `default` supported since 3.4
        if len(args) == 1:
            arg = args[0]
            if 'default' in kwargs:
                default = kwargs.pop('default')
                if not arg:
                    return default

                # https://stackoverflow.com/questions/36157995#comment59954203_36158079
                arg = list(arg)
                if not arg:
                    return default

                # if the `arg` was an iterator, it's exhausted already
                # so use a new list instead
                return max(arg, **kwargs)

    return max(*args, **kwargs)
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer"><i>The <code>default</code> argument specifies an object to return if the provided iterable is empty.</i></a></span>
<span class="comment-copy">@vaultah Why you no post answer as answer?!</span>
<span class="comment-copy">@Carpetsmoker: because it's too simple.</span>
<span class="comment-copy">@vaultah ... What's wrong with posting answers that are "too simple"? Now someone else has to...</span>
<span class="comment-copy">Anyway if you are going to handle the error you should use <code>except ValueError:</code>, not <code>except:</code>. In your example, you will catch <code>TypeError: 'builtin_function_or_method' object is not subscriptable</code>, so no matter what value <code>a</code> has, <code>max_val</code> will end up <code>False</code>.</span>
<span class="comment-copy">Another option for pre-3.4 would be to create a <code>my_max</code> function that mimics the newer behavior.</span>
<span class="comment-copy"><code>max(iter([]) or 0)</code> is precisely what gave me the grief in the first place... Do you have any further suggestions on what do do with it? Secondly it never occurred to me to check the docs... I assumed such a simple function was a one-in-one-out process</span>
<span class="comment-copy">@AlexanderMcFarlane, Duncan suggested a nice alternative. Check it out.</span>
<span class="comment-copy">@AlexanderMcFarlane, I'm not a native speaker. I don't understand what <code>one-in-one-out process</code>. Does it mean a common task?</span>
<span class="comment-copy">@falsetru by one-in-one-out I mean one argument in and one return value :)</span>
<span class="comment-copy">is there any reason to use <code>chain</code> over simple list concatenation e.g. <code>max( [42], [] )</code> where the default is <code>42</code>?</span>
<span class="comment-copy">@MajorInc calling <code>max</code> with multiple arguments has a different meaning than calling it with a single argument. With a single iterable argument <code>max</code> will return the largest element it contains, but with multiple arguments it compares them directly (i.e. it won't iterate). e.g. <code>max([42], [])</code> is a list <code>[42]</code> but <code>max(chain([42], []))</code> and <code>max([], default=42)</code> both give <code>42</code>.</span>
<span class="comment-copy">It's counter-intuitive: the max of an empty list should be infinitely small (so that max(x,list...)=max(x,max(list...))) and the min of an empty list should be infinitely large.</span>
<span class="comment-copy">Whoops, yes, I wrote that the wrong way around; my apologies. I will fix my answer and credit you for spotting the mistake. [... Done. Thanks again.]</span>
