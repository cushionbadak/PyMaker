<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1894269/convert-string-representation-of-list-to-list">Convert string representation of list to list</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>I have a file whose content is in the form of a python list such as the following: </p>
<pre><code>['hello','how','are','you','doing','today','2016','10.004']
</code></pre>
<p>Is there any way to read the python file back into a list object? instead of using <code>.read()</code> and having the whole file just read as a string.</p>
<p>EDIT: for those who may be interested i ran into a strange issue using (import ast) as suggested as a solution for the above problem. </p>
<p>the program i used it in has a function which fetches historical stock data from the yahoo finance python module. this function is in no way related or dependent on the function which used ast.literal_eval(). </p>
<p>anyways every night after market close i collect new batches of historical data from yahoo finance and last night i ran into an error : simplejson.scanner.jsondecodeerror expecting value. </p>
<p>it was strange because it would collect data just fine for some companies but throw the error for others, and sometime work for the same company but a minute later it would not work.  after trying all kinds of things to debug and solve the issue remembered that the import ast was recently added and thought i should try to see if it could have an effect, after removing the import ast the program went back to workin as it normally did. </p>
<p>does anybody know why import ast caused issues? @Apero why did you initially warn against using eval or ast.literal_eval?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="noreferrer"><code>ast.literal_eval()</code></a>:</p>
<pre><code>import ast

with open('filename.txt', 'r') as f:
    mylist = ast.literal_eval(f.read())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>rename the file from i.e. <strong><em>foo.txt</em></strong> to <strong><em>foo.py</em></strong></li>
<li>add <code>my_list =</code> in front of that line</li>
<li>in your code: <code>import foo; l = foo.my_list</code></li>
</ol>
<p>Simpler, no? ;-)</p>
</div>
<span class="comment-copy">Do you control how the file was saved?  If so, you had to write the list as a string, can you modify that process so you don't have to deal with this complication</span>
<span class="comment-copy">file was created in python using  f.write(str(my_list))</span>
<span class="comment-copy">Rewrite the file with: <code>f.write(' '.join(map(str, mylist)))</code></span>
<span class="comment-copy">@Apero:  <code>['this data', 'would not round trip']</code></span>
<span class="comment-copy">If your file used double quotes, you could use <code>import json ; data = json.load(open("filename.txt"))</code></span>
<span class="comment-copy">Never, ever, ever use <code>eval</code> or <code>ast.literal_eval</code>. That's the best advice I received when I started coding in python.</span>
<span class="comment-copy">@Apero It's the best solution in this case ...</span>
<span class="comment-copy">@Apero:  Why not <code>ast.literal_eval</code>?  It fits this use case quite well.</span>
<span class="comment-copy">Agreed, but the real best solution is to rewrite the file IMO ;-)</span>
<span class="comment-copy">@Apero: "never, ever" is bad advice. <code>eval</code> and <code>ast.literal_eval</code> are tools that serve a specific purpose. When you understand how they work and what they do, there is no reason to avoid them under the right circumstances. Instead of saying "never, ever use them", say "gain a deep understanding before using them".</span>
<span class="comment-copy">I know, I know, ..... I'm gonna make friends hahaha, but it can be a real solution too.</span>
<span class="comment-copy">i would need to implement that programatically.... since there are about 7000 of these files</span>
