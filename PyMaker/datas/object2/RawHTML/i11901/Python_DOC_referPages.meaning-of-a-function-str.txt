<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/14379753/what-does-mean-in-python-function-definitions">What does -&gt; mean in Python function definitions?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p><code>def f(ham: str, eggs: str = 'eggs') -&gt; str:
    print("Annotations:", f.__annotations__)
    print("Arguments:", ham, eggs)
    return ham + ' and ' + eggs</code></p>
<p>In the above block of code which got from <b><a href="https://docs.python.org/3.5/tutorial/controlflow.html#documentation-strings" rel="nofollow">https://docs.python.org/3.5/tutorial/controlflow.html#documentation-strings</a></b></p>
<p>My question is about the <code>-&gt; str</code> in the above block of code. What does it do ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Those are type hints. Various type checkers can use them to determine if you're using the correct types. In your example, you function is expecting <code>ham</code> of type <code>str</code>, and <code>eggs</code> of type <code>str</code> (defaulting to <code>eggs</code>). The final <code>-&gt; str</code> implies that this function, should have a return type of <code>str</code> as well.</p>
<p>For more information see:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/32557920/what-are-type-hints-in-python-3-5">What are Type hints in Python 3.5</a></li>
<li><a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">https://docs.python.org/3/library/typing.html</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">https://www.python.org/dev/peps/pep-0484/</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>It specifies the return value. It has nothing to do with the code at all and is just for documentation purposes.</p>
</div>
<span class="comment-copy">But.. that link <i>explicitly explains</i> what it does. You have quite literally linked to the canonical documentation for that syntax.</span>
<span class="comment-copy">@DanielRoseman  <code>def f(ham: str, eggs: str = 'eggs')</code> in this block they did mention <b>str</b>, so why did they again have to mark/say the same at the last?</span>
<span class="comment-copy">Because the <code>str</code> in that block has to do with the types of the variables getting passed in, not the one getting returned.</span>
<span class="comment-copy">@DanielRoseman is right, your link also references <a href="https://www.python.org/dev/peps/pep-0484/#abstract" rel="nofollow noreferrer">PEP 0484</a> which goes into greater detail about this.</span>
<span class="comment-copy"><a href="https://www.python.org/dev/peps/pep-0484/" rel="nofollow noreferrer">PEP 0484</a> is probably all you want to know about the current state of type hints / function annotations.</span>
<span class="comment-copy">What if I do not return it as a string?</span>
<span class="comment-copy">Your code won't be affected - it would still run, but if you ran your code through a type checker, such as <a href="http://mypy.readthedocs.org/en/latest/basics.html#type-checking-and-running-programs" rel="nofollow noreferrer">mypy</a>, you would get a warning.</span>
<span class="comment-copy"><code>What if I do not return it as a string?</code> Try it and see. It depends on the context. Python will not type check the return if that is what you are asking.</span>
<span class="comment-copy">And as @dawg mentioned - the best way to learn about these things is to try them out for yourself - bring up a shell, create a function that has that annotation (or copy it from the example) and try running it.</span>
