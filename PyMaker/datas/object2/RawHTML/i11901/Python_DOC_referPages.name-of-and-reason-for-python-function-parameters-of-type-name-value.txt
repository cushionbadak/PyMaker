<div class="post-text" itemprop="text">
<p>It's entirely possible that this question is a duplicate, but I don't know what this concept is called so I don't even know how to search for it.</p>
<p>I'm new to Python and trying to understand this function from a <a href="http://nbviewer.jupyter.org/github/BVLC/caffe/blob/master/examples/pascal-multilabel-with-datalayer.ipynb" rel="nofollow">Caffe example</a>:</p>
<pre><code>def conv_relu(bottom, ks, nout, stride=1, pad=0, group=1):
    conv = L.Convolution(bottom, kernel_size=ks, stride=stride,
                                num_output=nout, pad=pad, group=group)
    return conv, L.ReLU(conv, in_place=True)
</code></pre>
<p>I figured the parameters <code>stride=1</code>, <code>pad=1</code>, etc in the <code>conv_relu</code> function definition are default initial values, but then what do <code>kernel_size=ks</code>, <code>stride=stride</code>, etc in the <code>L.Convolution</code> call mean? Is it kind of like a name/value pair?</p>
<p>If nothing else, can someone please tell me what this is called?</p>
</div>
<div class="post-text" itemprop="text">
<p>Those are keyword arguments. </p>
<pre><code>some_function(x=y, z=zz) 
</code></pre>
<p><code>x</code> is the name of the parameter when the function was declared, and <code>y</code> is the value that's being passed in. </p>
<p>Reasons to use keyword arguments:</p>
<ul>
<li>You can give them in any order, instead of only the order in the function definition</li>
<li>When you look back on the code later, if the parameters have good names, you can immediately tell the purpose of the passed variables instead of needing to check the function definition or documentation to see what the data means.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You have a <a href="https://docs.python.org/2/reference/expressions.html#calls" rel="nofollow">call expression</a> using <em>keyword arguments</em>. Each <code>name=value</code> pair assigns a value to a specific parameter the function accepts.</p>
<p>Keyword arguments can be used in any order. If the named parameter in the function signature has a default value, the value in the call overrides that default. If you omit a specific argument, the default value is used.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, arguments can be provided by position, or by keyword.</p>
<p>For example, say you have the following function:</p>
<pre><code>def foo(bar, baz=1, qux=2):
    pass
</code></pre>
<p>You can call it as <code>foo(3)</code>, so in the callee scope, <code>bar</code> would be <code>3</code>. <code>baz</code> and <code>qux</code> will be assigned their default values - <code>1</code> and <code>2</code>, respectively - so you don't have to provide them explicitly.</p>
<p>You can also call this function using <strong>keyword arguments</strong> (that's the term you were searching for). The exact same call with <code>bar</code> as a named argument would be <code>foo(bar=3)</code>.</p>
<p>Of course, we would rather just use <code>foo(3)</code> since it's more concise, unless there are specific reasons to use named arguments. An example of such reason is if we wish to provide a non-default argument for <code>qux</code>, while leaving the default argument for <code>baz</code> unchanged: <code>foo(3, qux=4)</code>.</p>
</div>
<span class="comment-copy">They're called keyword arguments.</span>
<span class="comment-copy">I recommend that you read the Python tutorial; <a href="https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments" rel="nofollow noreferrer">this and many other things are explained there</a></span>
<span class="comment-copy">@AnttiHaapala: Not a bad idea. I have been making my way through it, but piecemeal as necessary</span>
<span class="comment-copy">Should I adjust the title of the post to include "keyword arguments" for future users who may have the same question?</span>
<span class="comment-copy">@marcman Using exact terminology will only help the users that already know what they're called, and in that case, they can look up the documentation. I do recommend trying to make it more descriptive though, as it's currently very generic.</span>
<span class="comment-copy">The Python documentation calls these <i>keyword</i> arguments, not named arguments.</span>
<span class="comment-copy">I swear another language uses the term "named". I think that's where the confusion comes from.</span>
<span class="comment-copy">@MartijnPieters: thanks, I corrected my answer. For what it's worth, "named arguments" was the term used by Dive Into Python: <a href="http://www.diveintopython.net/power_of_introspection/optional_arguments.html" rel="nofollow noreferrer">diveintopython.net/power_of_introspection/â€¦</a></span>
<span class="comment-copy">@Carcigenicate you can use google to check that the docs are <i>very</i> exact on this; while there are "named parameters" mentioned in the about a dozen times, only a couple of them apply to functions, and then it means that which is in parentheses in <code>def foo(bar)</code></span>
