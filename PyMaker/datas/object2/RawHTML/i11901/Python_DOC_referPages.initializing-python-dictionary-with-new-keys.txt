<div class="post-text" itemprop="text">
<p>How can I initialise a python dictionary with keys that are not pre-determined? </p>
<p>If I just initialise the dictionary with <code>dict = {}</code>, it gives me a Key Error once I try to populate it with new key-value pairs.</p>
<p>A workaround would be to do a try-except so that it tries to access existing keys first or initialises the dictionary for a new key if the former fails. A concrete example would be counting words in a text (this code example would lead to a <code>Key Error</code>): </p>
<pre><code>wordcount = {}
for word in text:
     wordcount[word] += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No need to initialize your dict with predefined values.</p>
<p>You also don't need any try/except, but just use Python's <code>defaultdict</code> with the default type set to <code>int</code>:</p>
<pre><code>from collections import defaultdict
wordcount = defaultdict(int)
for word in text:
    wordcount[word] += 1
</code></pre>
<p>However, if you just need to count the words in a list, Python also had a helper class called <code>Counter</code>, in collections as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>With the approach that you are doing, the way you <em>should</em> be doing this is checking to see if the key exists already by using the <code>in</code> keyword. If it does then do your increment, otherwise just assign 1. like this: </p>
<pre><code>wordcount = {}
text = ["this", "is", "my", "sentence", "yes", "it", "is", "my", "stuff"]
for word in text:
    if word in wordcount:    
        wordcount[word] += 1
    else:
        wordcount[word] = 1

print(wordcount)

# {'yes': 1, 'stuff': 1, 'sentence': 1, 'my': 2, 'is': 2, 'this': 1, 'it': 1}
</code></pre>
<p>Per your comments, you can avoid this condition if you actually use <code>defaultdict</code> from the <code>collections</code> module (<a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow">documentation</a>). You simply set what the <code>default</code> value is to your dictionary entries and proceed with your <code>+=</code>. Example:</p>
<pre><code>from collections import defaultdict
my_dict = defaultdict(int)
text_list = ["this", "is", "my", "sentence", "yes", "it", "is", "my", "stuff"]

for text in text_list:
    my_dict[text] += 1

print(my_dict)

# defaultdict(&lt;class 'int'&gt;, {'sentence': 1, 'this': 1, 'is': 2, 'my': 2, 'yes': 1, 'it': 1, 'stuff': 1})
</code></pre>
<p>Now, if you are simply trying to count words in text, then there is something built-in to do this already for you called <code>Counter</code> from the <code>collections</code> module (<a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">documentation</a>). This will keep a count of all like elements. Observe the example: </p>
<pre><code>from collections import Counter
text = ["this", "is", "my", "sentence", "yes", "it", "is", "my", "stuff"]    
my_count_dict = Counter(text)

print(my_count_dict)

Counter({'my': 2, 'is': 2, 'stuff': 1, 'this': 1, 'it': 1, 'sentence': 1, 'yes': 1})
</code></pre>
<p>Pay attention to the output as it is in order of most frequent. If you need to get the most common word, call <code>most_common</code> on it: </p>
<pre><code>print(my_count_dict.most_common(1))
# [('my', 2)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to make sure to initialize the keys before you try to increment them (<code>+=1</code>). Try this:</p>
<pre><code>wordcount = {}
text = ["word","foo","word","word","bar","bar","word","something"]
for word in text:
    if word in wordcount:  # tests to see if the key exists already
        wordcount[word] += 1
    else:  # initializes the key to 1
        wordcount[word] = 1
print(wordcount)
# prints {'bar': 2, 'word': 4, 'something': 1, 'foo': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need firstly to add key-value pair to your dict.</p>
<pre><code>wordcount = {}
for word in text:
    if word not in wordcount:
        wordcount[word] = 0
    wordcount[word] += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If I've understood your objective here which is to get a <code>dict</code> of word:count mapping, then you could do it also with dictionary comprehension(taking example of <code>idjaw</code>):</p>
<pre><code>&gt;&gt;&gt; text = ["this", "is", "my", "sentence", "yes", "it", "is", "my", "stuff"]
&gt;&gt;&gt; 
&gt;&gt;&gt; {c:text.count(c) for c in text}
{'it': 1, 'my': 2, 'yes': 1, 'is': 2, 'stuff': 1, 'this': 1, 'sentence': 1}
</code></pre>
<p>Or also <code>Counter</code> from <code>collections</code> module would also do the job:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; 
&gt;&gt;&gt; c = Counter()
&gt;&gt;&gt; 
&gt;&gt;&gt; for word in text:
        c[word] += 1


&gt;&gt;&gt; c
Counter({'my': 2, 'is': 2, 'it': 1, 'yes': 1, 'stuff': 1, 'this': 1, 'sentence': 1})
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>word_count = {}
for word in text:
    word_count[word] = word_count.setdefault(word, 0) + 1
</code></pre>
</div>
<span class="comment-copy">You can use either defaultdict(int) to create your dictionary or use wordcount[word] = wordcount.get(word,0) + 1.</span>
<span class="comment-copy">Start with what <code>wordcount[word] += 1</code> does without the shorthand</span>
<span class="comment-copy">If You don't want other user to down vote your question, help them to understand your problem. Your question consider python language usage, so please past Your python code. It is easier to say what's wrong by just looking on code then trying to understand what was the intention of author.</span>
<span class="comment-copy">@Alpha check the update. I added the defaultdict example</span>
<span class="comment-copy">One problem with using Counter (which works btw, thanks!) is that I'd like to sort in the end and it seems that dictionaries are more suitable for sorting...</span>
<span class="comment-copy">Dictionaries are un-ordered. However, if you look through the documentation, and observe from my output, the collections Counter that it is 'ordered' by the most frequent letters. Plus, if you need the most frequent letter you call <code>.most_common(1)</code>. I'll show an example</span>
<span class="comment-copy">I suggest reading the documentation carefully to understand what is going on behind the scenes.</span>
<span class="comment-copy">Thanks, that's super helpful!</span>
<span class="comment-copy">On line 4, you should set <code>wordcount[word]</code> to <code>0</code> instead of <code>1</code>.</span>
<span class="comment-copy">@AMACB you are right, or <code>continue</code> :)</span>
<span class="comment-copy">For this case, placing the count in the comprehension like that would make it <code>O(n^2)</code></span>
<span class="comment-copy">@idjaw...correct...That's why I've included the <code>Counter</code> solution as well...Thanks for the head's up</span>
