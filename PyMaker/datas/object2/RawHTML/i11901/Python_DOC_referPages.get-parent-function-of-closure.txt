<div class="post-text" itemprop="text">
<pre><code>def foo():
    def bar():
        pass

    return bar

inner_func = foo()
</code></pre>
<p>Is that somehow possible to get reference to parent function <code>foo</code> from <code>inner_func</code> or <code>bar</code>?</p>
<p>Looking into source code of <code>PythonTutorOnline</code> I found what I need <a href="https://github.com/pgbovine/OnlinePythonTutor/blob/52f73531c2778e48a80ea765587372247988afeb/v3/pg_logger.py#L526" rel="nofollow">here</a>. Is there any other approach to do that so? if not how I can get current stack info without using <code>Bdb</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>This will only find FunctionDef's inside the body of another function:</p>
<p><em>test.py</em>:</p>
<pre><code>def bar():
    pass

def foo():
    def bar():
        pass
    return bar

inner_func = foo()
</code></pre>
<p>Code:</p>
<pre><code>import ast


def find_parent(par):
    for par_node in mod.body:
        if isinstance(par_node, ast.FunctionDef):
            for node in par_node.body:
                if isinstance(node, ast.FunctionDef) and node.name == inner_func.func_name:     
                    return eval(par_node.name)
</code></pre>
<p>Output:</p>
<pre><code>n [12]: from test import  *

In [13]: mod =  ast.parse(open("/home/padraic/test.py").read())

In [14]: find_parent(mod)
Out[14]: &lt;function test.foo&gt;

In [15]: find_parent(mod).func_name
Out[15]: 'foo'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's far from perfect, but here's an idea:</p>
<p><code>getattr(__import__(foo().__module__), 'foo')</code></p>
<p>where the name <code>'foo'</code> can be obtained somehow according to a comment by @zondo.</p>
</div>
<span class="comment-copy">I think <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> might help. Try <code>inspect.stack()</code> in <code>bar</code>. (I am not quite sure tho)</span>
<span class="comment-copy">@BhargavRao: I just tested it and you can get the <i>name</i> of <code>foo()</code>, but you can't get the actual function object.</span>
<span class="comment-copy">@zondo How would you obtain the name? I posted an answer that relies on that.</span>
<span class="comment-copy">@AlexHall: <code>inspect.stack()[0]</code> is the level where <code>inspect.stack()</code> is being called, so <code>inspect.stack()[1]</code> is the next level up: where <code>bar()</code> is called in <code>foo()</code>. .  That list is the frame, the file, the line number, <i>the function</i>, the actual code text, and some other number that always seems to be zero.  Therefore, to get the name, you use <code>inspect.stack()[1][3]</code> inside of <code>bar()</code>.  That will get the name <code>foo</code> because it is one up from <code>bar()</code>, but if you want it because it is one level lower than the module, use <code>inspect.stack()[-2][3]</code>.</span>
<span class="comment-copy">@BhargavRao, that involves changing the function and calling the inner_func which I am not sure is what is wanted.</span>
<span class="comment-copy">If we have a previously function defined with same name as closure, it fails saying <code>AttributeError: 'NoneType' object has no attribute 'name'</code>.</span>
<span class="comment-copy">@AdnanUmer, that is in the first line of my answer, are you open to using calling inner_func to get the parent?</span>
<span class="comment-copy">No that is just a sample. In real that can be any closure and I've to figure out where that is actually defined.</span>
<span class="comment-copy">@AdnanUmer, what do you mean  figure out where it is defined? What do you essentially want to do with it?</span>
<span class="comment-copy">Ah the good ol' <code>ast</code>, had forgotten bout that ... :(</span>
