<div class="post-text" itemprop="text">
<p>Folks,
  What is the proper way in python <em>not</em> to execute a statement until necessary.</p>
<p>Lets say I have a function that does exponential api backoff:</p>
<pre><code>def exponential_backoff_task(config, task, description):
    retry_count = config.get( 'retry_count', 5 )
    api_backoff_initial_msec = config.get( 'api_backoff_initial_msec', 200)
    print 'Running api-backoff task: %s, retry_count: %d, initial_backoff: %d' % (description, retry_count, api_backoff_initial_msec)
    result = None
    for r in range(retry_count):
        try:
            result = task
        except boto.exception.BotoServerError:
            delay_msec = (2 ** r) * api_backoff_initial_msec
            print 'Exponential backoff, retry %d for %d msecs...' % (r, delay_msec)
            time.sleep(delay_msec/1000)
            continue
        except:
            raise
    return result


def foo():
    all_instances = exponential_backoff_task(config, conn.get_all_dbinstances(), 'foo'))
</code></pre>
<p>In this case, <code>conn.get_all_instances()</code> gets executed when a function is called, instead of being exercised inside the <code>exponential_backup</code> function </p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Well don't call it when passing it in, and only call it when you need it:</p>
<pre><code>from functools import partial

def exponential_backoff_task(config, task_fn, description):
    retry_count = config.get('retry_count', 5)
    api_backoff_initial_msec = config.get('api_backoff_initial_msec', 200)
    print 'Running api-backoff task: %s, retry_count: %d, initial_backoff: %d' % (description, retry_count, api_backoff_initial_msec)
    result = None
    for r in range(retry_count):
        try:
            # Call the function that got passed in
            result = task_fn()
        except boto.exception.BotoServerError:
            delay_msec = (2 ** r) * api_backoff_initial_msec
            print 'Exponential backoff, retry %d for %d msecs...' % (r, delay_msec)
            time.sleep(delay_msec / 1000)
            continue
        except:
            raise
    return result


def foo():
    # Note the missing parens: here you're just passing in the function
    all_instances = exponential_backoff_task(config, conn.get_all_dbinstances, 'foo')
</code></pre>
<p><strong>EDIT</strong>:
To predefine some arguments in your function you can use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>partial</code></a>, that can take in a function apply the arguments to it and return a new function with those arguments already applied, here's an example:</p>
<pre><code>from functools import partial

def f(a, b):
    print a
    print b

g = partial(f, a=1, b=2)

g()
</code></pre>
<p>This prints</p>
<pre><code>1
2
</code></pre>
</div>
<span class="comment-copy">You never even call <code>task()</code> within your method, you just return it or <code>None</code> back to <code>all_instances</code></span>
<span class="comment-copy">what if you want the <code>conn.get_all_dbinstances</code> be instantiated with certain parameters?</span>
<span class="comment-copy">@Cmag see edited answer</span>
