<div class="post-text" itemprop="text">
<p>This is my code:</p>
<pre><code>s = "I love the python"
i = 0
while i &lt; len(s):
    print (i in range(10))
    i += 1
</code></pre>
<p>The output I want is <code>01234567890123456</code>, i.e. I want to enumerate the string in the loop between number 0 to 9.</p>
<p>The above code gives me:</p>
<pre><code>True
True
True
True
True
True
True
True
True
True
False
False
False
False
False
False
False 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is what <a href="https://docs.python.org/2.3/whatsnew/section-enumerate.html" rel="nofollow"><code>enumerate</code></a> is for.</p>
<pre><code>s = "I love the python"
for index, char in enumerate(s):
    print(index % 10, end='')
</code></pre>
<p>This also uses the <code>end</code> parameter of print, where otherwise it will add a new line after each <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>print</code></a> call.</p>
</div>
<div class="post-text" itemprop="text">
<p>The code in your question prints <code>True</code> and <code>False</code> because you are asking "Is <code>i</code> in the range 0..9?"</p>
<p>You can use list-comprehension to make a single line of numbers in the range 0..9. </p>
<pre><code>&gt;&gt;&gt; s = "I love the python"
&gt;&gt;&gt; ''.join(str(i % 10) for i in range(len(s)))
'01234567890123456'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of loops, converting numbers to strings and modulo operations, you can generate the string instantly knowing the length. Concatenate whole versions of "0123456789" enough times and attach the any partial remainder. For example,</p>
<pre><code>&gt;&gt;&gt; s = "I love the python"
&gt;&gt;&gt; numbers = '0123456789'
&gt;&gt;&gt; quotient, remainder = divmod(len(s), 10)
&gt;&gt;&gt; (numbers * quotient) + numbers[:remainder]
'01234567890123456'
</code></pre>
<p><a href="https://docs.python.org/2/library/functions.html#divmod" rel="nofollow"><code>divmod()</code></a> returns both the integer division and remainder part of it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>s = "I love the python"
i = 0
while i &lt; len(s):
    print i % 10
    i += 1
</code></pre>
<p><code>%</code> is the modulus operator - it gives you the remainder when you divide by the number provided (in this case the remainder when you divide by 10).</p>
<p>If you want the result on one line you could do something like this:</p>
<pre><code>s = "I love the python"
i = 0
while i &lt; len(s):
    print i % 10,
    i += 1
</code></pre>
<p>Or save it in a string:</p>
<pre><code>s = "I love the python"
i = 0
result = ''
while i &lt; len(s):
    result += str(i % 10)
    i += 1

print result
</code></pre>
</div>
<span class="comment-copy">Why use <code>enumerate</code>? You don't use the <code>char</code> value</span>
<span class="comment-copy">Thank you, my first attempt was to use enumerate, but couldn't get it working. Now looking at your code now I know why my code wasn't working.</span>
<span class="comment-copy">@cricket_007 It may be a false presumption, but usually the character is needed for things like this.</span>
<span class="comment-copy">@cricket_007 Oops, I amended my answer for a no <code>char</code> version and it was almost identical, but slightly worse, than your answer (I used <code>map</code> instead of the comprehension). I'll leave this here in case the character is wanted.</span>
<span class="comment-copy">I would do +1 for cleverness, but I don't want this to be a canon answer to this question.</span>
<span class="comment-copy">Very clever. I would want to extract the 10 and do <code>numbers = ''.join(map(str, range(10)))</code>, though</span>
<span class="comment-copy">@JaredGoguen Well, it's up to the OP what he wants to be canon. Besides, he explicitly stated that he wanted to enumerate the string in a loop and I respect that. I just provided a different approach by focusing on efficiency.</span>
<span class="comment-copy">I ended up upvoting anyway, but you can't judge efficiency on a function that prints versus a function that doesn't print. Your's does time better than the solution offered by @cricket_007 (10x or so in Python 3.4), but it seems terribly unlikely that this would ever be a bottleneck and there is a very real sacrifice of readability. Either way, this is all pedantic, clever/fast solution!</span>
<span class="comment-copy">Thank you very much, It works. I still can't get my head around why does it work, but i'll look into it. You are a champion.</span>
<span class="comment-copy"><code>i % 10</code> means <code>remainder of i / 10</code></span>
<span class="comment-copy">Thank you I got it now, I put this code is python visualizer and with your explanation it became clear.</span>
<span class="comment-copy">Is there any way that I can print the output in one line like 01234567890123456</span>
<span class="comment-copy">edited my answer to show single line output.</span>
