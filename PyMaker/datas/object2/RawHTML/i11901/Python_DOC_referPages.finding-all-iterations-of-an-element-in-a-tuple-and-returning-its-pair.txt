<div class="post-text" itemprop="text">
<p>So I have a list of tuples that looks something like:</p>
<pre><code>visits_country = (['123', 'United States'], ['456', 'United States'], ['1', 'Canada'], ['24', 'Canada'], ['12', 'Mexico'])
</code></pre>
<p>I've managed to sum all of the first entries which have a second entry 'United States' as follows</p>
<pre><code>us_visits = [x[0] for x in visits_country if x[1] == 'United States']
total_us_visits = sum(map(int, us_visits))
</code></pre>
<p>Is there a way to automate this task so that I don't have to write a whole new line for every single country to sum all of its paired integers? Possibly a function that will return a list with each unique country and its total visits from each occurrence in the original list (visits_country)?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Easy:</p>
<pre><code>visits_country = (['123', 'United States'], ['456', 'United States'], 
                  ['1', 'Canada'], ['24', 'Canada'], ['12', 'Mexico'])

dictionary = {}

for count, country in visits_country:
    dictionary[country] = dictionary.get(country, 0) + int(count)

print dictionary
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yup. The most obvious approaches are to use either <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a> or <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>, the latter requiring a presort. For example:</p>
<pre><code>from itertools import groupby
from operator import itemgetter

visits_country.sort(itemgetter(1))
sums = [(sum(int(x) for _, x in grp), key)
        for key, grp in groupby(visits_country, itemgetter(1))]
</code></pre>
<p>or:</p>
<pre><code>from collections import Counter

counts = Counter()
for visits, country in visits_country:
    counts[country] += int(visits)
</code></pre>
</div>
<span class="comment-copy">That returns a list of 'Country': [1, 2, 3] . How do I modify that such that it will return a list 'Country': [sum(1, 2, 3)]? Thanks!!</span>
<span class="comment-copy">I have updated it, check this @NickOsborn</span>
<span class="comment-copy">Beautiful, thank you!</span>
<span class="comment-copy">Why do use import if we have standard tools?</span>
<span class="comment-copy">@Siddhant Are you kidding me? Simple tools? What's difficult in the task? It is a simple task in two lines of code (maybe one if we will use a generator of dictionaries)</span>
<span class="comment-copy">@JRazor: Because stuff like <code>Counter</code> (or <code>defaultdict(int)</code>) allows you to simplify actual use from <code>counts[country] = counts.get(country, 0) + int(visits)</code> to <code>counts[country] += int(visits)</code> and <code>Counter</code> has a number of additional utility methods for getting the most common items. Because <code>groupby</code> is more efficient in the case where the input is already sorted. Because the whole point of having built-in libraries is to push more of the implementation into common code so we aren't writing it by hand? These aren't obscure third party packages, they're standard Python modules.</span>
<span class="comment-copy">In fact, in this case, the presort isn't actually needed for the <code>groupby</code> case (assuming the example data is in fact in the order given, with all data for the same country grouped), so dropping the <code>sort</code> would still leave <code>groupby</code> equally efficient and have it preserve the original order.</span>
<span class="comment-copy">Dictionary of Python provides ample opportunity to work with him. I don't think it is worth importing this stuff for such a simple task.</span>
