<div class="post-text" itemprop="text">
<p>I have tried a number of ways to download files from google drive via oauth and the API, however I am not able to get the files downloaded. I believe I have properly authenticated. After running my code, it looks like there was success with downloading the file (no errors), but no files were downloaded.</p>
<p>This is the code I have tried so far:</p>
<pre><code>def download_file(file_id, mimeType):
    if "google-apps" in mimeType:
        return
    request = drive_service.files().get(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while done is False:
        status, done = downloader.next_chunk()
        print "Download %d%%." % int(status.progress() * 100)
</code></pre>
<p>However, this results in "Download 100%." being printed to the console, but no file downloaded.</p>
<p>I have also tried:</p>
<pre><code>def download2(download_url):
    resp, content = drive_service._http.request(download_url)
    if resp.status == 200:
        print 'Status: %s' % resp
        return content
    else:
        print 'An error occurred: %s' % resp
        return None
</code></pre>
<p>This also does not produce a downloaded file, but it does give me a 200 message.</p>
<p>Both of these seem like they are properly making contact with the API. Is there an additional step I have to do to actually get the files on my computer?</p>
<p>Edit:</p>
<p>this was the remainder of my code:</p>
<pre><code>import json
import webbrowser

import httplib2
import io
from apiclient.http import MediaIoBaseDownload

from apiclient import discovery
from oauth2client import client

if __name__ == '__main__':
  flow = client.flow_from_clientsecrets(
    'client_secrets.json',
    scope='https://www.googleapis.com/auth/drive.readonly',
    redirect_uri='urn:ietf:wg:oauth:2.0:oob')

  auth_uri = flow.step1_get_authorize_url()
  webbrowser.open(auth_uri)

  auth_code = raw_input('Enter the auth code: ')

  credentials = flow.step2_exchange(auth_code)
  http_auth = credentials.authorize(httplib2.Http())

  drive_service = discovery.build('drive', 'v3', http_auth) #also tried v2
  files = drive_service.files().list().execute()
  for f in files['files']:
    #call one of the two download methods with the proper arguments
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Changing from BytesIO to FileIO allowed the file to actually be downloaded. This was the line I modified my code to:</p>
<pre><code>fh = io.FileIO(filename, 'wb')
</code></pre>
<p>Here is the complete code that allowed me to download the file:</p>
<pre><code>def download_file(file_id, mimeType, filename):
    if "google-apps" in mimeType:
        # skip google files
        return
    request = drive_service.files().get_media(fileId=file_id)
    fh = io.FileIO(filename, 'wb')
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while done is False:
        status, done = downloader.next_chunk()
        print "Download %d%%." % int(status.progress() * 100)


if __name__ == '__main__':
    flow = client.flow_from_clientsecrets(
      'client_secrets.json',
      scope='https://www.googleapis.com/auth/drive.readonly',
      redirect_uri='urn:ietf:wg:oauth:2.0:oob')

    auth_uri = flow.step1_get_authorize_url()
    webbrowser.open(auth_uri)

    print auth_uri

    auth_code = raw_input('Enter the auth code: ')

    credentials = flow.step2_exchange(auth_code)
    http_auth = credentials.authorize(httplib2.Http())

    drive_service = discovery.build('drive', 'v3', http_auth)
    files = drive_service.files().list().execute()
    for f in files['files']:
        print f['name']
        download_file(f['id'], f['mimeType'], f['name'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The file is downloading, but the example given by google doesn't do anything with the file.</p>
<p>You simply need to return the contents of the BytesIO buffer like this (just adding a return at the end)...</p>
<pre><code>def download_file(service, file_id):
    request = service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while done is False:
        status, done = downloader.next_chunk()
        print("Download %d%%." % int(status.progress() * 100))
    return fh.getvalue()
</code></pre>
</div>
<span class="comment-copy">is the auth code the id of the file in the drive?</span>
<span class="comment-copy">No. What happens is that auth_uri will be a generated url that you will need to send to the owner of the drive account. When they access that link, they will have to approve you, then will be given a code that they will have to give back to you. You would then enter that code. Beware that the code is only valid once and for some limited time (maybe 15 minutes).</span>
<span class="comment-copy">Yeah fh = io.FileIO(filename, 'wb') worked for me, Thank you.</span>
<span class="comment-copy">hrmm, so I added with open(filename, 'wb') as output: 		fh.seek(0) 		output.write(fh.read()) to the end of the download_file function. But it's just downloading the metadata of the file.</span>
<span class="comment-copy">@user1253952 <code>html = download_file(service,'file_id') with open('file.csv', 'wb') as f:      f.write(html)</code></span>
<span class="comment-copy">Thanks, for some reason <code>fh.read()</code> doesn't work but <code>fh.getvalue()</code> does.</span>
<span class="comment-copy">It's a buffer. Check out this ref: <a href="https://docs.python.org/3/library/io.html#io.BytesIO.getbuffer" rel="nofollow noreferrer">docs.python.org/3/library/io.html#io.BytesIO.getbuffer</a></span>
