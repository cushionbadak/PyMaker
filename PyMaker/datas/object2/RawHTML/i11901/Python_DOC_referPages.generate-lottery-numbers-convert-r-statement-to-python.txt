<div class="post-text" itemprop="text">
<p>I have the following function in R to generate 10 random lottery numbers:</p>
<pre><code> sprintf("%05d", sort(sample(0:99999, 10)))
</code></pre>
<p>output:</p>
<pre><code>"00582" "01287" "01963" "10403" "13274" "17705" "23798" "32808" "33668" "35794"
</code></pre>
<p>I've converted it to Python like this:</p>
<pre><code> print(sorted(sample(range(99999), 10)))
</code></pre>
<p>output:</p>
<pre><code>[208, 10724, 12078, 27425, 34903, 49666, 60057, 67482, 68730, 78811]
</code></pre>
<p>In the first case I get numbers of 5 digits while in the second one the numbers could have up to 5 digits, <em>but also less</em>.</p>
<p>So, is there any similar way to obtain a list (or string as in the first case) of 5 digits numbers?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can combine <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow"><code>str.format</code></a> and <code>map</code>, for one</p>
<pre><code>print(*map('{:05}'.format, sorted(sample(range(99999), 10))))
</code></pre>
<p>The asterisk in this context <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow">unpacks argument lists</a>. In other words it generates positional arguments from the given <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow">iterable</a> (map in this case).</p>
<p>You can also store the lottery numbers as a list of strings</p>
<pre><code># Again using a map
ns = list(map('{:05}'.format, sorted(sample(range(99999), 10))))

# Using a list comprehension
ns = ['{:05}'.format(n) for n in sorted(sample(range(99999), 10))]
</code></pre>
<p>Note that python's <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow"><code>range</code></a> is open as in <em>[start, stop)</em>, so use</p>
<pre><code>range(100000)
</code></pre>
<p>for a range of values from 0 to 99999.</p>
</div>
<div class="post-text" itemprop="text">
<p>You will want to <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow">format</a> your <code>string</code></p>
<pre><code>out = []
for number in sorted(sample(range(99999), 10))):
    out.append('{:05d}'.format(number))
print(out)
</code></pre>
</div>
<span class="comment-copy">Using <code>range()</code> with <code>random.sample()</code> is fast and memory-efficient for Python 3. But if you are using Python 2, <code>range()</code> will build an entire list of 100,000 integers in memory. Instead, use <code>xrange()</code>.</span>
<span class="comment-copy">I like the use of  <code>map</code> and unzipping :)</span>
<span class="comment-copy">One of the pros of having a print function :P It's lovely when used along with <code>sep=", "</code> for example.</span>
<span class="comment-copy">@Ilja what does the asterisk before map?</span>
<span class="comment-copy">The <code>*</code> operator packs and unpacks containers. In the case of <code>*map</code>... it unpacks the <code>iterator</code> that <code>map</code> generators (for python3 for python2 it unpacks a list) so instead of printing a <code>&lt;map object at 0x...&gt;</code> you print the content.</span>
<span class="comment-copy">@Alex_Loar if the answer was suitable to your needs, would you consider accepting it?</span>
