<div class="post-text" itemprop="text">
<p>Define a function test_sort that takes a tuple containing a sort function reference and a function description as a parameter and executes that sort function with the data from the previous task. Track the comparisons for each set of data, calculate the average number of comparisons for the list of random lists.</p>
<p>The sort function reference just means that you can put a function definition into a variable just like any other value, and then execute that function variable. You can also pass a function definition as an argument to a another function and then execute the resulting parameter as a function.</p>
<p>this is the code</p>
<pre><code>def test_sort(function_tuple, a_sorte, a_reverse, a_random):
    Number.comparisons = 0
    f = function_tuple[0]
   f(a_sorte)
    x = Number.comparisons

    Number.comparisons = 0
    f = function_tuple[0]
    f(a_reverse)
    y = Number.comparisons

    Number.comparisons = 0
    f = function_tuple[0]
    for i in range(len(a_random)):
        f(a_random[i])
    z = Number.comparisons
    print("{0}        {1}         {2}        {3}".format(
        function_tuple[1], x, y, z))
    return
</code></pre>
<p>the main:</p>
<pre><code>import copy

from sorts_array import Sorts
import functions
SORTS = (
    ('Bubble Sort', Sorts.bubble_sort),
    ('Insertion Sort', Sorts.insertion_sort),
    ('Selection Sort', Sorts.selection_sort),
    ('Merge Sort', Sorts.merge_sort),
    ('Quick Sort', Sorts.quick_sort),
    ('Heap Sort', Sorts.heap_sort),
    ('Shell Sort', Sorts.shell_sort),
    ('Cocktail Sort', Sorts.cocktail_sort),
    ('Comb Sort', Sorts.comb_sort),
    ('Bin. Ins. Sort', Sorts.binary_insert_sort)
)

a_sorte = functions.create_sorted()

a_reverse = functions.create_reversed()

a_random = functions.create_randomly()


for i in range(0, 9):
    x = copy.deepcopy(a_sorte)
    y = copy.deepcopy(a_reverse)
    z = copy.deepcopy(a_random)
    functions.test_sort(SORTS[i], x, y, z)
</code></pre>
<p>The error I get:</p>
<pre><code>Traceback (most recent call last):
 functions.test_sort(SORTS[i], x, y, z)
        f(a_sorte)
  TypeError: 'str' object is not callable
</code></pre>
<p>This what I did in the previous task as mentioned in the question above:</p>
<pre><code>def create_sorted():

    value = []
    for i in range(0, SIZE):
        n = Number(i)
        value.append(copy.deepcopy(n))
    return value


def create_reversed():
    value = []
    for i in range(SIZE, -1, -1):
        n = Number(i)
        value.append(copy.deepcopy(n))
    return value


def create_randomly():
    value = []
    for i in range(N):
        n = Number(random.randint(0, RANGE))
        value.append(copy.deepcopy(n))
    return value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Define a function test_sort that takes a tuple containing a sort function reference and a function description as a parameter </p>
</blockquote>
<p>Following those instructions, your logic is fine, but your tuple is not. You put the description first. </p>
<pre><code>SORTS = (
    ('Bubble Sort', Sorts.bubble_sort),
    ('Insertion Sort', Sorts.insertion_sort),
    ('Selection Sort', Sorts.selection_sort),
    ('Merge Sort', Sorts.merge_sort),
    ('Quick Sort', Sorts.quick_sort),
    ('Heap Sort', Sorts.heap_sort),
    ('Shell Sort', Sorts.shell_sort),
    ('Cocktail Sort', Sorts.cocktail_sort),
    ('Comb Sort', Sorts.comb_sort),
    ('Bin. Ins. Sort', Sorts.binary_insert_sort)
)
</code></pre>
<p>Therefore, your error starts with </p>
<pre><code>f = function_tuple[0]
f(a_sorte) # TypeError: 'str' object is not callable
</code></pre>
<p>Because <code>f</code> is a string (the description of the function). </p>
<p>I also see you have </p>
<pre><code>print("{0}        {1}         {2}        {3}".format(
    function_tuple[1], x, y, z))
</code></pre>
<p>Which will print the <strong>function</strong> object (<code>&lt;function Sorts.bubble_sort at 0x1029beae8&gt;</code>), not the description string. </p>
<p>So, you have two options. </p>
<ol>
<li>Switch the ordering of all the tuples. I.e <code>(Sorts.bubble_sort, 'Bubble Sort')</code> and keep the other code the same</li>
<li>Use <code>f = function_tuple[1]</code> for the function that you can call and <code>function_tuple[0]</code> as the string to print. </li>
</ol>
<hr/>
<p>Also, why is <code>a_random</code> treated any differently than the others? Just do the same thing as the other lists. </p>
<pre><code>Number.comparisons = 0
f = function_tuple[0]
f(a_random)
z = Number.comparisons
</code></pre>
</div>
<span class="comment-copy">Well, yes; <code>f</code> is a string, and you can't call it. What exactly is that supposed to do? Did you perhaps mean to set <code>f</code> to <code>function_tuple[1]</code>?</span>
<span class="comment-copy">Daniel: I try to solve the question that I posted in the beginning. Yes, I do</span>
<span class="comment-copy">You pass tuple, the first part is string, the second is function, so you should use <code>f = function_tuple[1]</code></span>
<span class="comment-copy">also you don't need deep copies here <code>x = copy.deepcopy(a_sorte)</code>, <code>x = list(a_sorte)</code> is enough</span>
<span class="comment-copy">To call a function you have to use round brackets: <code>f(a_random[i])</code>. I suggest you to take a look at <a href="https://docs.python.org/3/tutorial/" rel="nofollow noreferrer">docs.python.org/3/tutorial</a></span>
<span class="comment-copy">thank you very much, know it's clear to me and works.</span>
