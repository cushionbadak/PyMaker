<div class="post-text" itemprop="text">
<p>I am new to programming so when I wanted a command to turn a hard-coded function's name into a string, I looked it up and started using the built-in <code>__name__</code> function. The problem is that I don't think I understand how <code>__name__</code> retrieves the wanted name. I know it has something to do with what is currently visible with local() or dir() but that's about it... (my own research on this topic has been kinda of hard to understand for me) As a result, I stumbled across an error that I don't know how to solve.</p>
<p>Here is some code that recreates my error:</p>
<pre><code>class Abc:
    @staticmethod
    def my_static_func():
        return

    def my_method(self):
        return

    class_list = [my_static_func]
    method_list = [my_method]

#These calls work
Abc.my_static_func.__name__
Abc.my_method.__name__
Abc.method_list[0].__name__

#But This call raises an AttributeError
Abc.class_list[0].__name__
</code></pre>
<p>I get this error message:</p>
<pre><code>AttributeError: 'staticmethod' object has no attribute '__name__'
</code></pre>
<p>So why is that when I put my static method into a list and then try to get the function's name from the list it doesn't work? Please forgive me if this question is dumb. As you can clearly see, I don't understand the underlying principle of how <code>__name__</code> works (and other stuff that I just don't know about to even give these topics names!). An answer would be nice but a reference to some docs would be also welcome.</p>
</div>
<div class="post-text" itemprop="text">
<p>With this code</p>
<pre><code>@staticmethod
def my_static_method(...):
    ....
</code></pre>
<p>The function <code>my_static_method</code> is wrapped in a <code>staticmethod</code>. When you access a <code>staticmethod</code> from a class some magic happens to the <code>staticmethod</code> and you actually get a proper function back. Thats why you can access its <code>__name__</code></p>
<p>Putting the <code>staticmethod</code> in a list and accessing it from that list prevents the magic from happening and you get the <code>staticmethod</code> object back.</p>
<pre><code>Abc.my_static_func  # this is a function
Abc.class_list[0]   # this is a staticmethod object
</code></pre>
<p>As a <code>staticmethod</code> does not have a <code>__name__</code> you get an <code>AttibuteError</code> when accessing its <code>__name__</code>.</p>
<p>To solve your problem you could get the underlying function from the <code>staticmethod</code></p>
<pre><code>Abc.class_list[0].__func__           # the function
Abc.class_list[0].__func__.__name__  # its name
</code></pre>
<p>To find out more about the "magic" that happens when you access attributes/methods from a class/object look up <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow" title="descriptors">descriptors</a></p>
</div>
<span class="comment-copy">I found this:  <a href="http://stackoverflow.com/questions/1987919/why-can-decorator-not-decorate-a-staticmethod-or-a-classmethod" title="why can decorator not decorate a staticmethod or a classmethod">stackoverflow.com/questions/1987919/â€¦</a>.  Apparently a staticmethod doesn't return a function: classmethod and staticmethod return descriptor objects, not functions. Most decorators are not designed to accept descriptors.</span>
<span class="comment-copy">Ok so a staticmethod object differs from a function object? Cool thanks so much!</span>
<span class="comment-copy">That's right. It is a small wrapper that gives back the original function if accessed correctly.</span>
