<div class="post-text" itemprop="text">
<p>I have a bit of a tricky question - I want to count only words that say 'red' and avoid those which have red in their name, but are not just 'red'. For example I would want to avoid counting 'redish', 'darkred' etc. I have my code below but I'm not having a whole lot of luck. The input would be for example: 'red', 'redish', 'darkred'</p>
<p>I know my code is only looking for 'red' so I guess my question is how do I use the split function to only pull out 'red' and avoid everything else?</p>
<pre><code>cars = input("Cars: ") #'redish, darkred, sortofred, red'
cars_red = cars.split('red') #I only want to count the one 'red'
print('red:', cars_red.count(cars_red))
</code></pre>
<p>Thanks,</p>
</div>
<div class="post-text" itemprop="text">
<p>Try the following code:            </p>
<pre><code>cars = input("Cars: ") 
cars_red = cars.split(', ') 
count = 0
for word in cars_red:
    if word == 'red':
        count += 1
print('red:',count)
</code></pre>
<p><strong>Input:</strong> </p>
<pre><code>redish, darkred, sortofred, red
</code></pre>
<p><strong>Output:</strong> </p>
<pre><code>red: 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Remember that split() is used to "split" a string according to a delimiter.  It may be used to create the list of colors.  Then you need to think about how to count all that match exactly 'red'. </p>
<p>One method is to count using the reduce() function:</p>
<pre><code># parse input into cars list
cars = input("Cars: ").split(', ')

# Prepend initial count of 0 and accumulate by matching 'red'
cars.insert(0, 0)
count = reduce(lambda count, color: count + (color == 'red'), cars)

print 'red: ' + str(count)
</code></pre>
<p>The same may be done in many ways including usage of a for loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>To have a filtered list just with cars of specific colors, and thus counting them, you can use <a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter</code></a> function that allows to have a very concise code.
Supposing that you are using a CSV format, possibly with some spaces (as in your input example) to trim using <code>strip</code>, a possible solution with the <code>main</code> would look like:</p>
<pre><code>def filter_cars_by_color(cars, color):
    return list(filter(lambda car: car == color, [car.strip() for car in cars.split(',')]))

if __name__ == "__main__":
    cars = input("Cars: ")
    color = input("Color to search:")
    cars_red =  filter_cars_by_color(cars, color)
    print('Number of cars exactly %s: %d' % (color, len(cars_red)))
</code></pre>
<p>Note that, in the answer, I am referring to python 3.x, as, even if not marked, it seems that the OP is using python 3.x. If python 2.7 is used, then, instead of <code>input</code>, <a href="https://docs.python.org/2/library/functions.html#raw_input" rel="nofollow"><code>raw_input</code></a> should be used, as otherwise the input would be processed as python expression.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>var valueToLookup = "red";

var count = cars.filter(function(v) { return v === valueToLookup; }).length;
</code></pre>
</div>
<span class="comment-copy">Thank you! That worked perfectly :-)</span>
<span class="comment-copy">Based on the content of the question, please answer in Python (hint, python also has filter)</span>
