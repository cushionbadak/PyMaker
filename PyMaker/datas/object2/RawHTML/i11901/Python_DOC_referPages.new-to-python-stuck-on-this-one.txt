<div class="post-text" itemprop="text">
<p>This is my first post but I've found a lot of great information here via Google. At the moment, I'm working through Python Programming for the Absolute Beginner. I'm stuck on one of the challenge questions relatively early on in the book. The challenge is to create a program that will guess a number you've randomly selected between 1 and 100. </p>
<p>At this point it works, weeds out non-valid answers, and guesses eventually if you play by the rules. If you play the game honestly, it works. However, if you put "lower" instead of "higher" it gets to a point where the program crashes. This works, but I would rather reset the counter and chastise the user with a message.</p>
<p>Anyway, here's my code so far. You can see what where I have been trying to make if work with the first "if" clause of the while loop. What do you think?</p>
<pre><code>#Computer Guesses Number Program

import random

print("Please select a number between 1 and 100.")
print("As I attempt to guess, you may respond with Higher, Lower, or Yes.")

input("\nPress enter to continue.")

#Start Guessing in the Middle
guess = 50
response = input("\nIs your number " + str(guess) + "?")

#Narrow down guessing further
if response.lower() == "higher":
    guess = 75
    lowerbound = 50
    upperbound = 100
    response = input("\nIs your number " + str(guess) + "?")
else:
    guess = 25
    lowerbound = 1
    upperbound = 50
    response = input("\mIs your number " + str(guess) + "?")

#Guess loop - eliminates invalid responses and need for capitalization
while response.lower() != "yes":
    if lowerbound &gt; upperbound or upperbound &lt; lowerbound:
        print("You've been dishonest, let's try again.")
        guess = 50
        lowerbound = 1
        upperbound = 100
    elif response.lower() == "higher":
        lowerbound = guess + 1
        guess = random.randint(lowerbound, upperbound)
    elif response.lower() == "lower":
        upperbound = guess - 1
        guess = random.randint(lowerbound, upperbound)
    else:
        print("The response options are 'Higher', 'Lower', or 'Yes'.")

    response = input("Is this your number " + str(guess) + "?")

print("\nI knew it was ", guess, "the whole time!")
input("\n\nPress enter to exit.")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The error you get is that you pass an invalid range to <code>randint</code>, for example:</p>
<pre><code>ValueError: empty range for randrange() (51,51, 0)
</code></pre>
<p><a href="https://docs.python.org/3/library/random.html#random.randrange" rel="nofollow">randrange</a> is internally used by <code>randint</code> and expects a <code>start</code> and a <code>stop</code> value as the first two arguments. It indirectly requires that <code>start</code> is lower than <code>stop</code>.</p>
<p>In your code, you use <code>randint</code> with the arguments <code>lowerbound</code> and <code>upperbound</code>, so you have to take care that <code>lowerbound &lt; upperbound</code> before you call <code>randint</code>.</p>
<p>You already have a check in place with that first <code>if</code> inside the loop (btw. note that <code>a &lt; b</code> is the same as <code>b &gt; a</code>—you just read it in another direction), but it’s being checked at the wrong time: You want to perform that check after one of those boundaries changes and before you call <code>randint</code>.</p>
<p>One way to do that is to change your flow like this:</p>
<pre><code>while response.lower() != "yes":
    if response.lower() == "higher":
        lowerbound = guess + 1
    elif response.lower() == "lower":
        upperbound = guess - 1
    else:
        print("The response options are 'Higher', 'Lower', or 'Yes'.")
        response = input("Is this your number " + str(guess) + "?")
        continue

    if lowerbound &gt; upperbound:
        print("You've been dishonest, let's try again.")
        guess = 50
        lowerbound = 1
        upperbound = 100
    guess = random.randint(lowerbound, upperbound)
    response = input("Is this your number " + str(guess) + "?")
</code></pre>
<p>Here, we only change the boundaries when we parse the user’s input. If the user entered something invalid, we just ask them again and continue the loop from the beginning (skipping the lower part). Otherwise, after the boundaries are updated, we perform the validation on the boundaries and only then use <code>randint</code> to make a new guess.</p>
<p>That way, we ensure that we only ever use <code>randint</code> with valid boundaries.</p>
</div>
<span class="comment-copy">Thanks for your help, that makes a lot of sense. I had a feeling I was close there but couldn't quite see it.</span>
<span class="comment-copy">You’re welcome. Please remember to <a href="http://meta.stackexchange.com/a/5235/141542">accept the answer</a> if it answered your question to mark it as resolved.</span>
