<div class="post-text" itemprop="text">
<p>The idea is that I have a string 'four' consisting of 4 sub-strings. I am trying to find words from the list 'folder' that match exclusively with the 4 sub-strings (subsets). So 'paul' would match but 'pauls' wouldn't. The only issue I have is that 'sets' cant handle identical strings. The code below will print 'aa' but there is only one a in the string 'four'. Is there an operation 'issubset' available for use with lists? </p>
<pre><code>four = "laup"

four = set(four)

folder = ["paul","joshua","other","asdf","joshua","aa","hello"]

for word in folder:
    wordstrings = set(word)
    if wordstrings.issubset(four):
            print(word)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to match the same chars  including repeats use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow">Counter dict</a> to count the chars in each word:</p>
<pre><code>four = "laup"
from collections import Counter
four = Counter(four)

folder = ["paul","joshua","other","asdf","joshua","aa","hello"]

for word in folder:
    wordstrings = Counter(word)
    if not wordstrings - four:
            print(word)
</code></pre>
<p>If you get an empty Counter after A - B it means all the letters in A appeared at least as many times in A as they did in B:</p>
<pre><code>In [14]: Counter("foos") - Counter("foo")
Out[14]: Counter({'s': 1})

In [15]: Counter("foo") - Counter("foos")
Out[15]: Counter()

In [16]: Counter("pauls") - Counter("paul")
Out[16]: Counter({'s': 1})

In [17]: Counter("paul") - Counter("paul")
Out[17]: Counter()
</code></pre>
<p>You could also use <code>all</code> making sure at least as chars in wordstrings appears in four app which would short circuit if one did not:</p>
<pre><code>for word in folder:
    wordstrings = Counter(word)
    if all(wordstrings[k] - four[k] &lt;= 0 for k in wordstrings):
            print(word)
</code></pre>
<p>sets simply won't work as all elements are unique so repeated chars will be counted as 1.</p>
</div>
<div class="post-text" itemprop="text">
<p>To the best of my knowledge, lists don't have a function like subset. Sets always strip away duplicates because you don't need to know that a value is duplicated to know that it exists in a set. The problem here is that when you're iterating through in the for-loop, word = 'aa' becomes wordstrings = {'a'} which is a subset of four. Do you have to use set? I'd just have a counter and not convert the words into set.</p>
<pre><code>     four = list(four) #keep it as a workable list instead?

     for word in folder:
          n = 0
          for letter in word:
              if four.count(letter) != word.count(letter):
        # iterating through and counting if the letter is not in 
        # both four and word in equal quantities 
                    n += 1
          if n == 0:
              print(word)
</code></pre>
</div>
<span class="comment-copy">Many thanks Padraic! Great solution</span>
<span class="comment-copy">the count does not have to be the same to be a subset</span>
