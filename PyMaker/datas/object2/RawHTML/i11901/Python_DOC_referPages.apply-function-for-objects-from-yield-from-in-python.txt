<div class="post-text" itemprop="text">
<pre><code># currently I have

def some_func():
    for match in re.finditer(regex, string):
        yield other_func(match)
</code></pre>
<p>I was wondering if there was a way to syntactically squash it into one line</p>
<pre><code># looking for something like

def some_func():
    yield from other_func(re.finditer(regex, string))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a>. The <code>map</code> accepts two parameters: a function and an iterable. It iterates the iterable and apply the function and returns an iterator (which yields mapped values - function(first item), function(seoncd item), ...)</p>
<pre><code>def some_func():
    yield from map(other_func, re.finditer(regex, string))
</code></pre>
<p><code>yield from</code> here is not necessary, because the <code>map</code> returns an iterator (in Python 3.x):</p>
<pre><code>def some_func():
    return map(other_func, re.finditer(regex, string))
</code></pre>
<hr/>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt;
&gt;&gt;&gt; def other_func(match):
...     return match.group()
...
&gt;&gt;&gt; def some_func():
...     return map(other_func, re.finditer(regex, string))
...
&gt;&gt;&gt; regex = '.'
&gt;&gt;&gt; string = 'abc'
&gt;&gt;&gt; list(some_func())
['a', 'b', 'c']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For something simple and short you can return a generator expression which basically is the same as yield,</p>
<pre><code>def some_func():
    return (other_func(match) for match in re.finditer(regex, string))
</code></pre>
</div>
