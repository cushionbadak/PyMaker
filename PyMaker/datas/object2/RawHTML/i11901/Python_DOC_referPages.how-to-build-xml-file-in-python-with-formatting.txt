<div class="post-text" itemprop="text">
<p>I'm trying to build a xml file in python so I can write it out to a file, but I'm getting complications with new lines and tabbing etc...</p>
<p>I cannot use a module to do this - because Im using a cut down version of python 2. It must all be in pure python.</p>
<p>For instance, how is it possible to create a xml file with this type of formatting, which keeps all the new lines and tabs (whitespace)?</p>
<p>e.g.</p>
<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;myfiledata&gt;
    &lt;mydata&gt;
            blahblah
    &lt;/mydata&gt;
&lt;/myfiledata&gt;
</code></pre>
<p>I've tried enclosing each line </p>
<pre><code>'    &lt;myfiledata&gt;' +\n
'                blahblah' +\n
</code></pre>
<p>etc.</p>
<p>However, the output Im getting from the script is not anything close to how it looks in my python file, there is extra white space and the new lines arent properly working.</p>
<p>Is there any definitive way to do this? I would rather be editing a file that looks somewhat like what I will end up with - for clarity sake...</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/xml.sax.utils.html" rel="nofollow">XMLGenerator</a> from saxutils to generate the XML and <a href="https://docs.python.org/2/library/xml.dom.minidom.html" rel="nofollow">xml.dom.minidom</a> to parse it and print the pretty xml (both modules from standard library in Python 2).</p>
<p>Sample code creating a XML and pretty-printing it:</p>
<pre><code>from __future__ import print_function
from xml.sax.saxutils import XMLGenerator
import io
import xml.dom.minidom

def pprint_xml_string(s):
    """Pretty-print an XML string with minidom"""
    parsed = xml.dom.minidom.parse(io.BytesIO(s))
    return parsed.toprettyxml()

# create a XML file in-memory:
fp = io.BytesIO()
xg = XMLGenerator(fp)

xg.startDocument()
xg.startElement('root', {})

xg.startElement('subitem', {})
xg.characters('text content')
xg.endElement('subitem')

xg.startElement('subitem', {})
xg.characters('text content for another subitem')
xg.endElement('subitem')

xg.endElement('root')
xg.endDocument()

# pretty-print it
xml_string = fp.getvalue()
pretty_xml = pprint_xml_string(xml_string)
print(pretty_xml)
</code></pre>
<p>Output is:</p>
<pre class="lang-xml prettyprint-override"><code>&lt;?xml version="1.0" ?&gt;
&lt;root&gt;
    &lt;subitem&gt;text content&lt;/subitem&gt;
    &lt;subitem&gt;text content for another subitem&lt;/subitem&gt;
&lt;/root&gt;
</code></pre>
<p>Note that the text content elements (wrapped in <code>&lt;subitem&gt;</code> tags) aren't indented because doing so would change their content (XML doesn't ignore whitespace like HTML does).</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer was to use xml.element.tree and from xml.dom import minidom</p>
<p>Which are all available on python 2.5</p>
</div>
<span class="comment-copy">Have a look at the <a href="https://pypi.python.org/pypi/lxml" rel="nofollow noreferrer"><code>lxml</code></a> package and see if it can help you out.</span>
<span class="comment-copy">Sorry I updated the answer, I cant use lxml, its gotta be pure python</span>
<span class="comment-copy">You probably want a multi-line string. See this <a href="http://stackoverflow.com/questions/2504411/proper-indentation-for-python-multiline-strings" title="proper indentation for python multiline strings">stackoverflow.com/questions/2504411/â€¦</a> for some ideas.</span>
<span class="comment-copy">Can you use <code>xml.etree.ElementTree</code> from the standard library?</span>
<span class="comment-copy">Then maybe <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">string formatting</a> will help.</span>
<span class="comment-copy">Not working in python 2.5.2 im afraid</span>
<span class="comment-copy">@Ke. next time please state that kind of requirement in your question.</span>
