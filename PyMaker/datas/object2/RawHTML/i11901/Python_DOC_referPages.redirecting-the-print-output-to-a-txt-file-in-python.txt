<div class="post-text" itemprop="text">
<p>I am complete beginner in Python. I have tried many methods from stackoverflow answers on this question, but neither of them works in my script.<br/>
I have this little script to use, however I can not get the huge result to .txt file so I can analyize the data.  How do I redirect the print output to txt file on my computer?</p>
<pre><code>from nltk.util import ngrams
import collections

with open("text.txt", "rU") as f:
    sixgrams = ngrams(f.read().decode('utf8').split(), 2)

result = collections.Counter(sixgrams)
print result
for item, count in sorted(result.iteritems()):
    if count &gt;= 2:
        print " ".join(item).encode('utf8'), count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/reference/simple_stmts.html#the-print-statement" rel="nofollow"><code>print</code> statement in Python 2.x</a> support redirection (<code>&gt;&gt; fileobj</code>):</p>
<pre><code>...
with open('output.txt', 'w') as f:
    print &gt;&gt;f, result
    for item, count in sorted(result.iteritems()):
        if count &gt;= 2:
            print &gt;&gt;f, " ".join(item).encode('utf8'), count
</code></pre>
<p>In Python 3.x, <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow"><code>print</code> function</a> accepts optional keyword parameter <code>file</code>:</p>
<pre><code>print("....", file=f)
</code></pre>
<p>If you do <a href="https://docs.python.org/2/library/__future__.html" rel="nofollow"><code>from __future__ import print_function</code></a> in Python 2.6+, above approach is possible even in Python 2.x.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just do it on command line: <code>python script.py &gt; text.txt</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Using a BufferedWriter you can do it like this</p>
<pre><code>os = io.BufferedWriter(io.FileIO(pathOut, "wb"))
os.write( result+"\n")
for item, count in sorted(result.iteritems()):
     if count &gt;= 2:
     os.write(" ".join(item).encode('utf8')+ str(count)+"\n")

outs.flush()
outs.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As Antti mentioned, you should prefer python3 and leave all this annoying
python2 junk behind you. The following script works with python2 and python3.</p>
<p>To read/write files, use <code>open</code> function from the <a href="https://docs.python.org/3/library/io.html" rel="nofollow">io</a> module, this is
python2/python3 compatible. Allways use the <code>with</code> statment to open a resource like a file. The <code>with</code> is used to wrap the execution of a block within a  <a href="https://en.wikibooks.org/wiki/Python_Programming/Context_Managers" rel="nofollow">Python Context Manager</a>. File descriptors have context mananger implementend, and will be closed automaticly on leaving the <code>with</code> block.</p>
<p>Not depend on python, if you want to read a text-file, you should know the
encoding of this file to read it proper (if you are unsure try <code>utf-8</code>
first). Beside, the correct UTF-8 signature is <code>utf-8</code> and the mode <code>U</code> is
depricated.</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/env python
# -*- coding: utf-8; mode: python -*-

from nltk.util import ngrams
import collections
import io, sys

def main(inFile, outFile):

    with io.open(inFile, encoding="utf-8") as i:
        sixgrams = ngrams(i.read().split(), 2)

    result = collections.Counter(sixgrams)
    templ = "%-10s %s\n"

    with io.open(outFile, "w", encoding="utf-8") as o:

        o.write(templ %  (u"count",  u"words"))
        o.write(templ %  (u"-" * 10, u"-" * 30))

        # Sorting might be expensive. Before sort, filter items you don't want
        # to handle, btw. place *count* in front of the tuple.

        filtered = [ (c, w) for w, c in result.items() if c &gt; 1]
        filtered.sort(reverse=True)

        for count, item in filtered:
            o.write(templ % (count, " ".join(item)))

if __name__ == '__main__':
    sys.exit(main("text.txt", "out_text.txt"))
</code></pre>
<p>With the input <code>text.txt</code> file:</p>
<pre class="lang-none prettyprint-override"><code>At eight o'clock on Thursday morning and Arthur didn't feel very good 
he missed 100 € on Thursday morning. The Euro symbol of 100 € is here
to test the encoding of non ASCII characters, because encoding errors
do occur only on Thursday morning.
</code></pre>
<p>I get the following <code>output_text</code>:</p>
<pre class="lang-none prettyprint-override"><code>count      words
---------- ------------------------------
3          on Thursday
2          Thursday morning.
2          100 €
</code></pre>
</div>
<span class="comment-copy">If you're complete beginner to Python and especially since it seems you're doing NLP, I'd recommend you to switch to Python 3 outright!</span>
