<div class="post-text" itemprop="text">
<p>I have a list 'l' of tuples.</p>
<pre><code>l = [('apple',4), ('carrot',2), ('apple',1), ('carrot',7)]
</code></pre>
<p>I want to arrange the first elements of tuples according to the values in ascending order. </p>
<p>The expected result is:</p>
<pre><code>result = [('apple', (1,4)), ('carrot', (2,7))]
</code></pre>
<p>I tried as:</p>
<pre><code>for x in l:
  variables = list(set(x[0]))
</code></pre>
<p>I suppose that there is more better way of doing it. Any ideas please.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my solution:</p>
<pre><code>from collections import defaultdict

l = [('apple',4), ('carrot',2), ('apple',1), ('carrot',7)]

d = defaultdict(list)
for i, j in l:
    d[i].append(j)

result = sorted([tuple([x, tuple(sorted(y))]) for x, y in d.items()])

print(result)
</code></pre>
<p>And here is the result:</p>
<pre><code>[('apple', (1, 4)), ('carrot', (2, 7))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow">defaultdict</a> to collect those values, and then get the items from the dictionary to get the desired result:</p>
<pre><code>&gt;&gt;&gt; l = [('apple',4), ('carrot',2), ('apple',1), ('carrot',7)]
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k, v in l:
        d[k].append(v)

&gt;&gt;&gt; dict(d)
{'carrot': [2, 7], 'apple': [4, 1]}
&gt;&gt;&gt; list(d.items())
[('carrot', [2, 7]), ('apple', [4, 1])]
</code></pre>
<p>In order to sort those sublists then, you could use a list comprehension:</p>
<pre><code>&gt;&gt;&gt; [(k, tuple(sorted(v))) for k, v in d.items()]
[('carrot', (2, 7)), ('apple', (1, 4))]
</code></pre>
<p>And if you want to sort that also by the “key”, just sort that resulting list using <code>list.sort()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a one liner for you:</p>
<pre><code>&gt;&gt;&gt; a = [('apple',4), ('carrot',2), ('apple',1), ('carrot',7)]
&gt;&gt;&gt; sorted([(n, tuple(sorted([e[1] for e in a if e[0] == n]))) for n in set(e for e,f in a)])
[('apple', (1, 4)), ('carrot', (2, 7))]
</code></pre>
<p>This sorts both the first element (<code>apple</code>, <code>carrot</code>, ...), and each second element ( <code>(1,4) (2,7)</code> ).</p>
<p>Note that @poke's solution does not sort it.</p>
</div>
