<div class="post-text" itemprop="text">
<p>I'm still a beginner when it comes to programming, and I'm especially new when it comes GUI programming. I'm using python with PyQt4 and im following a tutorial guide. The following code block is relatively easy to follow:</p>
<pre><code>import sys
from PyQt4 import QtGui
def window():
    app = QtGui.QApplication(sys.argv)
    w = QtGui.QWidget()
    b= QtGui.QLabel(w)
    b.setText("Hello World!")
    w.setGeometry(100,100,200,50)
    b.move(50,20)
    w.setWindowTitle(“PyQt”)
    w.show()
    sys.exit(app.exec_())
if __name__ == '__main__':
    window()
</code></pre>
<p>I can follow whats going on here quite well, but could someone explain to me what the sys.argv is actually doing? I don't want to just blindly put this in every time in the hope that it will make my code work!</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>argc</code> (argument count = number of arguments) and <code>argv</code> (an array, or list of argument values, depending on the language) <strong>is what the operating system gives to the program as parameters. In other worlds: "how it was called".</strong></p>
<p>As clearly stated by cptPH's answer, this is not specific to <code>Qt</code> or <code>Python</code>. Have a look here:</p>
<p><a href="https://en.wikipedia.org/wiki/Entry_point" rel="nofollow">https://en.wikipedia.org/wiki/Entry_point</a></p>
<p>For C and C++:</p>
<p><a href="https://en.wikipedia.org/wiki/Entry_point#C_and_C.2B.2B" rel="nofollow">https://en.wikipedia.org/wiki/Entry_point#C_and_C.2B.2B</a></p>
<p>For Python:</p>
<p><a href="https://en.wikipedia.org/wiki/Entry_point#Python" rel="nofollow">https://en.wikipedia.org/wiki/Entry_point#Python</a></p>
<p>Even shell scripting have these, called "Positional parameters":</p>
<p><a href="http://www.tldp.org/LDP/abs/html/othertypesv.html" rel="nofollow">http://www.tldp.org/LDP/abs/html/othertypesv.html</a></p>
<p>Even if your program takes no command line options at all, whatever the language or OS (unless very, <em>very</em> exotic ones), you will always have to a bare minimum:</p>
<ul>
<li>a <code>argc</code> of 1, because,</li>
<li><code>argv</code> number 0 will be the name under which your program is called
(this may vary, for example if you call it via a symlink, or
simply because you changed the target binary of the build process,
and your program "foo" is now "bar" - ex use: don't use hardcoded program name when printing output, rather use <code>argv</code> number 0).</li>
</ul>
<p>Sooner or later, you'll be writing programs which use options/parameters. So you'll use these. Example: you may want to add a "--verbose" or "--debug" option. Or a "--input-file" if it's about file processing. Whatever. Your program will parse these argv at startup, and through your wise coding, will change its runtime behavior accordingly.</p>
<p>Example: even the Python can takes quite of lot of optional options, and processes them using <code>argc</code>/<code>argv</code>. From Python 3 man page:</p>
<pre><code>   python [ -B ] [ -b ] [ -d ] [ -E ] [ -h ] [ -i ] [ -I ]
          [ -m module-name ] [ -q ] [ -O ] [ -OO ] [ -s ] [ -S ] [ -u ]
          [ -v ] [ -V ] [ -W argument ] [ -x ] [ [ -X option ] -?  ]
          [ -c command | script | - ] [ arguments ]
</code></pre>
<p>...these are all possible <code>argv</code> for the Python interpreter.</p>
<p>EDIT:</p>
<p>Real life example for a Qt application:</p>
<p>I take part in the developed a Qt networking application. It can run under 2 mutually exclusive modes:</p>
<ul>
<li>"normal" mode,</li>
<li>or "spy mode": this is special because it will required network
administrator privileges for some low-level operations.</li>
</ul>
<p>So I added a CLI <code>-s/--spy-mode</code> CLI options to it. These is an optional <code>argv</code>.</p>
<p>At the beginning of the application code, I check for this <code>argv</code> <code>-s/--spy-mode</code> CLI options</p>
<ul>
<li><strong>If run in "normal" mode without this option</strong>, the GUI elements related
to "spy" mode are simply not even displayed to the user, nor any of
its class instanciated. That is clean, because otherwise it would
fail miserably anyway in many object instanciation/methods, with
errors all over the place, since the low-level calls would fail
anyway, and then I'd exit with a non-zero return code. That is not
good. If you might fail, fail ASAP.</li>
<li><strong>If launched in "spy" mode using this <code>argv</code> options</strong>, the first things
I do in my code is check that the calling user do actually have such
"network administrator" privileges, and then 1/ if he does not, issue
an explicit error message/popup window explaining the "you should
have blablabla privilege, blablabal try sudo blablabla", and then
exit with a non-zero return code, or 2/ if the user does indeed have
the required privilege, offer the special "spy mode" GUI elements and
put them to use, no problem (and hide most of the GUI "normal mode"
elements, meaningless in this mode of operation).</li>
</ul>
<p>This is what <code>argc/argv</code> are good for.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to use <a href="http://docs.python.org/3/library/sys.html#module-sys" rel="noreferrer">sys.argv</a> in a PyQt application.</p>
<p>It's only really useful if you want to use command-line arguments. If you don't, you can just pass in an empty list:</p>
<pre><code>app = QtGui.QApplication([])
</code></pre>
<p>When you do use <code>sys.argv</code>, the first argument is automatically set to the script name, and Qt will use this to set the <a href="http://doc.qt.io/qt-4.8/qcoreapplication.html#applicationName-prop" rel="noreferrer">applicationName()</a>. The list of arguments can be accessed later via the <a href="http://doc.qt.io/qt-4.8/qcoreapplication.html#arguments" rel="noreferrer">arguments()</a> method:</p>
<pre><code># test.py
import sys
from PyQt4 import QtGui

app = QtGui.QApplication(sys.argv)

print('ARGS: %s' % app.arguments())
print('NAME: %r' % app.applicationName())
</code></pre>
<p>Output:</p>
<pre><code>$ python test.py -f foo
ARGS: ['test.py', '-f', 'foo']
NAME: 'test.py'
</code></pre>
<p>But note that some <a href="http://doc.qt.io/qt-4.8/qapplication.html#QApplication" rel="noreferrer">pre-defined arguments</a> are handled internally by Qt, and will be automatically removed from the arguments:</p>
<pre><code>$ python test.py -f foo -stylesheet=style.qss
ARGS: ['test.py', '-f', 'foo']
NAME: 'test.py'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.argv</code> is not PyQt4 specific. It contains all the command line arguments that were used to start the program in the form of a list.</p>
<p>For example when you start <strong>./test.py arg1 arg2</strong> <code>sys.argv</code> would contain:</p>
<pre><code>sys.argv[0] == "./test.py"
sys.argv[1] == "arg1"
sys.argv[2] == "arg2"
</code></pre>
<p>And with this you could count the number of arguments, this will include the name of the program itself as shown above:</p>
<pre><code>len(sys.argv) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.argv</code> contains all the command-line arguments that were passed to the program when it was launched. The constructor of <code>QApplication</code> needs these launch options in some circumstances, such as debugging. </p>
</div>
<div class="post-text" itemprop="text">
<p>QApplication can optionally accept additional command line arguments, say you have a PyQT or PySide program with CheckBox and Slider, and you run it with the following command:</p>
<pre><code>$ python3 checkbox_slider.py -style fusion  
</code></pre>
<p>you'll find the style is different, that mean sys.argv has its practical use in some cases. see <a href="https://doc.qt.io/archives/qt-4.8/qapplication.html#QApplication" rel="nofollow noreferrer">more argument options</a> from official website</p>
</div>
<span class="comment-copy">thank you very much, lots of useful info here!</span>
<span class="comment-copy">Thank you. After reading jbm's answer full of info, this practical example makes a lot of sense. Thanks guys!</span>
<span class="comment-copy">Any chance you could give an example of what kind of command-line argument would be passed to the program? I'm trying to understand what kind of information this relates to</span>
<span class="comment-copy">@KierranPurden Take a look at the <a href="http://doc.qt.io/qt-5/qapplication.html#QApplication" rel="nofollow noreferrer">Qt documentation about QApplication</a></span>
<span class="comment-copy">@KierranPurden For example, <code>-style x</code> will force the application to use style <code>x</code> that run. There's plenty of others in that article that are useful for debugging.</span>
<span class="comment-copy">@KierranPurden: Say, you write a text editor in Qt. Then the usual command line argument may be the name of the edited file. This is only an example. It fully depends on what you need to pass through the command line arguments. But for that you can read <code>sys.argv</code> directly. More important is that there is a convention  for a window applications (in Unix-based systems) for how to pass the initial dimensions of the main window, for example. And this is what Qt tries to get on its own -- independently on what you want to solve.</span>
