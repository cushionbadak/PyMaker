<div class="post-text" itemprop="text">
<p>I have an error: <code>UnicodeEncodeError: 'UCS-2' codec can't encode characters in position 266-266: Non-BMP character not supported in Tk</code></p>
<p>I'm parsing the data, and some emoji's falls to array. <code>data = 'this variable contains some emoji'sãƒ„ðŸ˜‚'</code> I want: <code>data = 'this variable contains some emoji's'</code></p>
<p>How I can remove these characters from my data or handle this situation in Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p>If the goal is just to remove all characters above <code>'\uFFFF'</code>, the straightforward approach is to do just that:</p>
<pre><code>data = "this variable contains some emoji'sãƒ„ðŸ˜‚"
data = ''.join(c for c in data if c &lt;= '\uFFFF')
</code></pre>
<p>It's possible your string is in decomposed form, so you may need <a href="https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize" rel="nofollow">to <code>normalize</code> it to composed form</a> first so the non-BMP characters are identifiable:</p>
<pre><code>import unicodedata

data = ''.join(c for c in unicodedata.normalize('NFC', data) if c &lt;= '\uFFFF')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; printable = set(string.printable)
&gt;&gt;&gt; filter(lambda x: x in printable, data)
"this variable contains some emoji's"
</code></pre>
<p>For BMP read this: <a href="https://stackoverflow.com/questions/33404752/removing-emojis-from-a-string-in-python">removing emojis from a string in Python</a></p>
</div>
<span class="comment-copy">How about some relevant pieces of code?...and is this related to <code>Tkinter</code> ?</span>
<span class="comment-copy">I'm parsing the data, and some emoji's falls to array. data = 'this variable contains some emoji'sãƒ„ðŸ˜‚' I want: data = 'this variable contains some emoji's'</span>
<span class="comment-copy">ãƒ„ is not an emoji and inside the BMP. You want to remove that too?</span>
<span class="comment-copy">For whatever reason this didn't work for me with Python 2.7.5. (I tried both solutions.) The lowercase characters were stripped out. Instead I used <code>re_pattern = re.compile(u'[^\u0000-\uFFFF]', re.UNICODE); data = re_pattern.sub('', data)</code></span>
<span class="comment-copy">That would eliminate anything outside the printable ASCII range, not just stuff outside the BMP. Also, on Python 3, <code>filter</code> returns a generator always, not a <code>str</code>/<code>tuple</code>/<code>list</code> by argument type. Lastly, don't bother with <code>filter</code>/<code>map</code> if you need a <code>lambda</code> to do it; the genexpr/listcomp will be faster and more succinct. <code>''.join(x for x in data if x in printable)</code> (though in this case, <code>''.join(filter(printable.__contains__, data))</code> would get the speed the <code>lambda</code> version doesn't).</span>
<span class="comment-copy">Yea...I was to comment about it as well...only printable ASCII range</span>
<span class="comment-copy">@ShadowRanger Ooops... I thought that he wants to remove all non-ascii, not only BMP... sorry</span>
