<div class="post-text" itemprop="text">
<pre><code>dictionary[pattern_key] = {"key": index_key, "document": index_source, "startPos":index_start, "endPos": index_end}
</code></pre>
<p>This is an extract of my list of dictionaries</p>
<pre><code>{
'AGACAATCTC': {'startPos': '174', 'document': 'source-document01012.txt', 'endPos': '183', 'key': 'AGACAATCTC'}, 
'GGTCAGACAA': {'startPos': '18', 'document': 'source-document01012.txt', 'endPos': '27', 'key': 'GGTCAGACAA'}, 
'TAGATGAAGT': {'startPos': '102', 'document': 'source-document01012.txt', 'endPos': '111', 'key': 'TAGATGAAGT'}
}
</code></pre>
<p>How can i sort that by <strong>document</strong> and then by <strong>startPos</strong> ?</p>
<p>i tried something like this but does not work</p>
<p><code>sorted_dict = sorted(dictionary, key=itemgetter(pattern_key[document]))</code></p>
<p>script.py</p>
<pre><code>#!/usr/bin/env python
import sys

dictionary = {};

for pattern in sys.stdin:

    if "," in pattern:
        pattern_key, pattern_source, pattern_start, pattern_end = pattern.strip().split(",")
        index_file =  open('index.txt', 'r')

        for line in index_file:
            if "," in line:
                index_key, index_source, index_start, index_end = line.strip().split(",")
                if pattern_key == index_key:
                    dictionary[pattern_key] = {"document": index_source, "startPos":index_start, "endPos": index_end}

sorted(dictionary.items(), key = lambda x: (x[1]['document'], int(x[1]['startPos'])))

for k, v in dictionary.items():
    print (k, '--&gt;', v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can get the entries in the inner dictionary as keys for <code>sorted</code>:</p>
<pre><code>sorted(dictionary.items(), key = lambda x: (x[1]['document'], int(x[1]['startPos'])))
</code></pre>
<p>A tuple key will be sorted first by the 0th element, then 1st, and so on.</p>
<p>Note that this produces a list of tuples, where each tuple is <code>(str, dict)</code>.</p>
<p>EDIT:<br/>
In your context, the correct implementation is the following:</p>
<pre><code>sorted_values = sorted(dictionary.items(), key = lambda x: (x[1]['document'], int(x[1]['startPos'])))

for k, v in sorted_values:
    print (k, '--&gt;', v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Make your sorting based on your desired criteria then create a new <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow"><code>OrderedDict</code></a> from the sorted list, since <code>dict</code> cannot keep the sorting by it's nature:</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt;
&gt;&gt;&gt; d = {'AGACAATCTC': {'endPos': '183', 'document': 'source-document01010.txt', 'key': 'AGACAATCTC', 'startPos': '174'}, 'GGTCAGACAA': {'endPos': '27', 'document': 'source-document01010.txt', 'key': 'GGTCAGACAA', 'startPos': '18'}, 'TAGATGAAGT': {'endPos': '111', 'document': 'source-document01011.txt', 'key': 'TAGATGAAGT', 'startPos': '102'}}
&gt;&gt;&gt; 
&gt;&gt;&gt; d_ordered = OrderedDict(sorted(d.items(), key=lambda t:(t[1]['document'], int(t[1]['startPos']))))
&gt;&gt;&gt; 
&gt;&gt;&gt; d_ordered
OrderedDict([('GGTCAGACAA', {'endPos': '27', 'document': 'source-document01010.txt', 'key': 'GGTCAGACAA', 'startPos': '18'}), ('AGACAATCTC', {'endPos': '183', 'document': 'source-document01010.txt', 'key': 'AGACAATCTC', 'startPos': '174'}), ('TAGATGAAGT', {'endPos': '111', 'document': 'source-document01011.txt', 'key': 'TAGATGAAGT', 'startPos': '102'})])
</code></pre>
</div>
<span class="comment-copy">For output, do you want the entire dict values, or just the keynames?  ['AGACAATCTC', 'TAGATGAAGT'] like that?</span>
<span class="comment-copy">i need the entire output sorted by document and then startPos...</span>
<span class="comment-copy">Sorted does NOT update the dictionary to have sorted values. You need to use the list of (&lt;key&gt;, &lt;dict-val&gt;) tuple returned by sorted() command. If you convert list of tuples to dictionary and then use it, it may again disturb the sorted order.</span>
<span class="comment-copy">I don't see a list of dict. but instead a dict. of dict. or am I missing something here?</span>
<span class="comment-copy">If you want a dictionary to be sorted, you'll need to use <code>collections.OrderedDict</code>. Regular dictionaries do not guarantee the order of the keys.</span>
<span class="comment-copy">hmm thanks but it does not get sorted by startPos..</span>
<span class="comment-copy">Running this on your sample data returns: <code>('GGTCAGACAA', {'document': 'source-document01012.txt', 'endPos': '27', 'startPos': '18', 'key': 'GGTCAGACAA'}) ('TAGATGAAGT', {'document': 'source-document01012.txt', 'endPos': '111', 'startPos': '102', 'key': 'TAGATGAAGT'}) ('AGACAATCTC', {'document': 'source-document01012.txt', 'endPos': '183', 'startPos': '174', 'key': 'AGACAATCTC'})</code>. This is sorted by <code>document</code> and <code>startPos</code>.</span>
<span class="comment-copy">Can you give an example, for what value it did not sort using 'startPos'? Because I tried similar approach and it worked for me.</span>
<span class="comment-copy">hmm weird, it gives me a randomized output? <code>('AAAGCTTACA', '--&gt;', {'startPos': '132', 'document': 'source-document01012.txt', 'endPos': '141'}) ('GGAGAAATCT', '--&gt;', {'startPos': '78', 'document': 'source-document01012.txt', 'endPos': '87'}) ('TCGGGAGCAA', '--&gt;', {'startPos': '216', 'document': 'source-document01012.txt', 'endPos': '225'}) ('CGGTTTATGT', '--&gt;', {'startPos': '204', 'document': 'source-document01012.txt', 'endPos': '213'}) ('TCACGTAGGA', '--&gt;', {'startPos': '234', 'document': 'source-document01012.txt', 'endPos': '243'})</code> i removed "key" just for clarity, do not mind the "--&gt;"</span>
<span class="comment-copy">No the sort works. Are you sure everything else is in place and proper?</span>
