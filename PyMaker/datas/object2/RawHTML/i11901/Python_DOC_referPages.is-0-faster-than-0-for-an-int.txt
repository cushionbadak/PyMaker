<div class="post-text" itemprop="text">
<p>Which test is faster : equality or inequality ?</p>
<p>For example, in a big <code>while</code> loop, should the condition be <code>a&gt;0</code> rather than <code>a!=0</code> ?</p>
</div>
<div class="post-text" itemprop="text">
<p>When asking yourself a question about speed differences between different operators, use the <a href="https://docs.python.org/2/library/timeit.html"><code>timeit</code> module</a> to <em>measure</em>. They are equally fast:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('a &gt; 0', 'a = 1', number=10**7)
0.2486400604248047
&gt;&gt;&gt; timeit.timeit('a &gt; 0', 'a = 0', number=10**7)
0.2411360740661621
&gt;&gt;&gt; timeit.timeit('a != 0', 'a = 1', number=10**7)
0.24765801429748535
&gt;&gt;&gt; timeit.timeit('a != 0', 'a = 0', number=10**7)
0.24990510940551758
</code></pre>
<p>That's the comparisons repeated 10 million times, and if you re-run the above tests you'll find the timings can vary somewhat and none are clear winners.</p>
<p>You should be focusing on readability here, not speed. A simple integer comparison is going to be an <em>infinitesimal</em> part of your overall execution speed, even in a loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>If we’re talking about <code>a</code> being an <code>int</code>, then on my machine at this very moment, an equality check is <em>very slightly</em> faster than a greater-than check. You can quickly check that yourself using the <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow"><code>timeit</code> module</a>:</p>
<pre><code>&gt;&gt;&gt; for s in 'a = 2', 'a = 0', 'a = -2':
        timeit('a != 0', s)
        timeit('a &gt; 0', s)

0.06030992519848155
0.06666935212976455
0.053299842422489974
0.06516424110179742
0.05866621696540619
0.06685335186756447
</code></pre>
<p><strong>However</strong>, those numbers are super close to another. So you should only take one thing out of this answer: <strong>It does not matter</strong>.</p>
<p>These kind of things are micro optimizations. And micro optimizations very rarely have <em>any</em> impact on the real performance of an application. It is a lot more likely that there are thousand other parts in your application that have more impact on the performance to make this difference negligible. You should only care about such things if you actually <a href="https://docs.python.org/3/library/profile.html" rel="nofollow"><em>profiled</em> your application</a> and confirmed that this part of your code is a bottleneck that is taking down the performance of your application. But for this particular code, I doubt that will ever be the case.</p>
<p>So please, don’t bother about these minor difference but just <strong>use whatever makes more sense</strong>: Considering that these two checks have a different semantic meaning (a number being unequal to zero, or a number being larger than zero), choose the one that you actually meant to check for.</p>
</div>
<div class="post-text" itemprop="text">
<p>For me, <code>timeit</code> doesn't show any consistently noticeable difference (assuming you're working with integers)...</p>
<pre><code>&gt;&gt;&gt; timeit.timeit('1 &gt; 0')
0.031796932220458984
&gt;&gt;&gt; timeit.timeit('1 != 0')
0.03249096870422363
&gt;&gt;&gt; timeit.timeit('1 &gt; 0')
0.03250718116760254
&gt;&gt;&gt; timeit.timeit('1 != 0')
0.031616926193237305
</code></pre>
<p>As stated in the comments on this question, rather than focusing on what operator is the fastest, you should focus on the one that makes the most sense.  If you really mean "do this while <code>a</code> is greater than <code>0</code>" than use <code>&gt;</code>.  The amount of time spent doing this comparison is going to be a very minor contributor to your overall runtime, so it probably isn't worth worrying which operator is faster...</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Is it the bottleneck of your program?</strong> <em>Only if the answer is yes, you should be worried about it</em>. Moreover, there is not something that says this will be sure faster in any OS, or with any type.</p>
<hr/>
<p>For fun, I timed the while loop:</p>
<pre><code>#!/usr/bin/python
import time

a = 1000000
t0 = time.time()
while(a != 0):
    a = a - 1
t1 = time.time()

total = t1-t0
print total
</code></pre>
<p>and:</p>
<p><code>a &gt; 0</code> gives:</p>
<blockquote>
<p>0.12652015686</p>
</blockquote>
<p><code>a != 0</code> gives:</p>
<blockquote>
<p>0.111998081207</p>
</blockquote>
<hr/>
<p>For timing, check this: <a href="https://stackoverflow.com/questions/2866380/how-can-i-time-a-code-segment-for-testing-performance-with-pythons-timeit">How can I time a code segment for testing performance with Pythons timeit?</a></p>
<hr/>
<p><em>But</em>, use <a href="https://docs.python.org/2/library/timeit.html" rel="nofollow noreferrer">timeit</a>, as Martijn Pieters suggested (<a href="https://stackoverflow.com/questions/15707056/get-time-of-execution-of-a-block-of-code-in-python-2-7">Get time of execution of a block of code in Python 2.7</a>), like this:</p>
<pre><code>#!/usr/bin/python

import timeit
a = 1000000
start_time = timeit.default_timer()
while(a != 0):
    a = a - 1
elapsed = timeit.default_timer() - start_time
print elapsed
</code></pre>
<p>which gave for <code>a &gt; 0</code>:</p>
<blockquote>
<p>0.10852098465</p>
</blockquote>
<p>and for <code>a != 0</code>:</p>
<blockquote>
<p>0.108459949493</p>
</blockquote>
<p>See the difference in the two timing approaches!</p>
</div>
<div class="post-text" itemprop="text">
<p>I think this somewhat leaden test program shows in the case of character and integer compares there is basically no difference</p>
<pre><code>import string
def numericgtmostfail():
    for i in range(100):
        x= i &gt; 99
    return x

def numericgtmostsucceed():
    for i in range(100):
        x= i &gt; 1
    return x

def numericnemostsucceed():
    for i in range(100):
        x= i != 99
    return x

def numericnemostfail():
    for i in range(100):
        x= i != i
    return x

def chgtmostfail():
    for s in (string.lowercase * 4)[0:100]:
        x = s &gt; 'y'
    return x

def chgtmostsucceed():
    for s in (string.lowercase * 4)[0:100]:
        x = s &gt; 'a'
    return x

def chnemostfail():
    for s in (string.lowercase * 4)[0:100]:
        x = s != s 
    return x

def chnemostsucceed():
    for s in (string.lowercase * 4)[0:100]:
        x = s != 'a' 
    return x

if __name__ == '__main__':
    import timeit
    print(timeit.timeit("numericgtmostfail()", setup="from __main__ import numericgtmostfail"))
    print(timeit.timeit("numericgtmostsucceed()", setup="from __main__ import numericgtmostsucceed"))
    print(timeit.timeit("numericnemostsucceed()", setup="from __main__ import numericnemostsucceed"))
    print(timeit.timeit("numericnemostfail()", setup="from __main__ import numericnemostfail"))
    print(timeit.timeit("chgtmostfail()", setup="from __main__ import chgtmostfail"))
    print(timeit.timeit("chgtmostsucceed()", setup="from __main__ import chgtmostsucceed"))
    print(timeit.timeit("chnemostsucceed()", setup="from __main__ import chnemostsucceed"))
    print(timeit.timeit("chnemostfail()", setup="from __main__ import chnemostfail"))
</code></pre>
</div>
<span class="comment-copy">You could try timing it.</span>
<span class="comment-copy">There is no defined performance difference between these constructs. Thus, even <i>if</i> any difference exists in practice, it's not guaranteed to persist across platforms, interpreter versions, etc.</span>
<span class="comment-copy">Moreover, which of these is faster will vary <b>greatly</b> on the data type in question; if it's a class that implements <code>__eq__</code> or such, then there you are. Without locking down data type, interpreter version, CPU, and numerous other variables, there simply <i>is</i> no canonical answer for this question.</span>
<span class="comment-copy">There is a good chance that whatever you do within that while loop, takes considerably longer than the comparison made by the while loop at each iteration..</span>
<span class="comment-copy">...so, if you want to be Pythonic, use the code that's easiest for the reader to follow, and don't worry about speed. In general, <code>a &gt; 0</code> is the safer approach, since that way you can't get into an endless loop if the value is somehow negative.</span>
<span class="comment-copy">Thanks ! You just satisfied my curiosity.</span>
<span class="comment-copy">In my tests the equality test is <i>slower</i>. But then I test again and the numbers are reversed. Neither is a winner here.</span>
<span class="comment-copy">Then that only further proves the point that it doesn’t matter ;)</span>
<span class="comment-copy">Always use the <a href="https://docs.python.org/2/library/timeit.html" rel="nofollow noreferrer"><code>timeit</code> module</a> for comparisons. It'll disable garbage collection and use the most accurate timer available for your platform. You should also focus on <i>just</i> the operator, really.</span>
<span class="comment-copy">@MartijnPieters, thanks ninja, new to Python here! Weird that the answers in my linked question do not highlight it. Should I delete the answer or modify it?</span>
<span class="comment-copy">I'm indeed surprised no-one actually used <code>timeit</code> in that post. I've left a comment on the accepted answer; they could more easily have used <code>timeit.timeit(function, number=n)</code> there and get more accurate results still.</span>
<span class="comment-copy">It's up to you if you want to keep your answer here.</span>
<span class="comment-copy">For what it's worth, I've added a <code>timeit</code> answer to the question you found. That's rather terrible, that there was no answer to that effect there.</span>
