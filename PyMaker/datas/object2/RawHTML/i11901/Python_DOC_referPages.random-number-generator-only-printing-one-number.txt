<div class="post-text" itemprop="text">
<p>This is the code I have so far:</p>
<pre><code> from quick_pick import quick_pick
    def main():
     LIMIT = 67
     number = 9
     list_1 = []*number
     quick_pick(number, LIMIT, list_1)
     print (list_1)
     main()

import random
def quick_pick(n,limit,lottery):
    main_count = 0
    while main_count &lt;n:
        lotto_numbers = random.randint(1, limit)
        if lotto_numbers not in lottery:
            lottery.append(lotto_numbers)
            main_count += 1
            return (lottery * n)
</code></pre>
<p>but when I run it I get this: <code>[21]</code></p>
<p>Im not sure how to get all 9 numbers to show up in the list so I can print it. If someone could help it would be appreciated as this is for part of my assignment and I need it to do the rest of it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Fix you indentation, lose the <code>* n</code>, and viola(!), your code works:</p>
<pre><code>def quick_pick(n,limit,lottery):
    main_count = 0
    while main_count &lt;n:
        lotto_numbers = random.randint(1, limit)
        if lotto_numbers not in lottery:
            lottery.append(lotto_numbers)
            main_count += 1
    return lottery

&gt;&gt;&gt; quick_pick(number,LIMIT,list_1)
[44, 43, 62, 13, 11, 25, 36, 29, 15]
</code></pre>
<p>The problem was, as you can see, the fact that you <code>return</code> after finding the <strong>first</strong> number to add to your <code>lottery</code>. You need to wait until it is filled up. Also multiplying by <code>n</code> (9) doesn't make much sense.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/random.html#random.sample" rel="nofollow"><code>random.sample</code></a> to pick the numbers:</p>
<pre><code>limit = 67
n = 9
print(random.sample(range(1, limit + 1), n)) # [49, 32, 66, 57, 25, 9, 22, 4, 48]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way to get random numbers following some particular distribution is to use the probability distributions directly..</p>
<p>Example:</p>
<pre><code>import numpy as np

nums = np.random.uniform(-1, 1, (100, 2))
</code></pre>
<p>This will generate a hundred 2-dimensional points in the range (-1, 1) from the underlying uniform distribution (all the numbers in the range have the same probability of being picked).</p>
</div>
<span class="comment-copy">Idk much about python, but why are you recursing and looping in the same function?</span>
<span class="comment-copy">Idk much about python, but why do you return the lottery numbers on the first successful draw, which will always be the first one, instead of allowing the loop to complete before returning?</span>
<span class="comment-copy">Thanks works now!!!</span>
<span class="comment-copy">This is very nice(!), but I think this is homework of some sort so using this would be "cheating" :p</span>
