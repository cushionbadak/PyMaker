<div class="post-text" itemprop="text">
<p>I am trying to complete a rock, paper, scissors assignment for class. </p>
<p>I'm getting a <code>"UnboundLocalError: local variable 'tied' referenced before assignment"</code> error. </p>
<p>Can someone please tell me why I'm getting this error? </p>
<pre><code>import random

user_score = 0
computer_score = 0
tied = 0

def main():
print ("Let's play the game of Rock, Paper, Scissors. ")

while True:
    print ("Your current record is", user_score, "wins,", computer_score,     "losses and", tied, "ties")

    computer_choice = random.randint(1,3)
    if computer_choice == 1:
        computer_rock()
    elif computer_choice == 2:
        computer_paper()
    else:
        computer_scissors()    

def computer_rock():
     user_choice = input("1 for Rock, 2 for Paper, 3 for Scissors: ")
     if user_choice == "1":
        print ("Draw! You both chose Rock.")
        tied += 1            
        try_again()
     elif user_choice == "2":
        print ("You Win! The computer chose Rock, while you picked Paper.")
        user_score += 1            
        try_again()
    elif user_choice == "3":
        print ("You Lose! You chose scissors, while the computer picked Rock.")
        computer_score += 1            
        try_again()
else:
    print ("ERROR: Invalid entry, please re-enter your choice. ")
    computer_rock()

def computer_paper():
    user_choice = input("1 for Rock, 2 for Paper, 3 for Scissors: ")
    if user_choice == "1":
        print ("You Lose! You chose rock, while the computer picked Paper.")
        computer_score += 1        
        try_again()
    elif user_choice == "2":
        print ("Draw! You both picked Paper.")
        tied += 1            
        try_again()
    elif user_choice == "3":
        print ("You Win! The computer chose Paper, while you picked Scissors.")
        user_score += 1                    
        try_again()
    else:
        print ("ERROR: Invalid entry, please re-enter your choice. ")
        computer_paper()

def computer_scissors():
    user_choice = input("1 for Rock, 2 for Paper, 3 for Scissors: ")
    if user_choice == "1":
        print ("You Win! You chose rock, while the computer picked Scissors.")
        user_score += 1  
        try_again()                  
    elif user_choice == "2":
        print ("You Lose! The computer chose Scissors, while you picked Paper.")
        computer_score += 1                    
        try_again()
    elif user_choice == "3":
        print ("Draw! You both picked Scissors.")
        tied += 1            
        try_again()
    else:
        print ("ERROR: Invalid entry, please re-enter your choice. ")
        computer_scissors()

def try_again():
    choice = input("Play again? Yes or no. ")
    if choice == "y" or choice == "Y" or choice == "yes" or choice == "Yes":
        main()
    elif choice == "n" or choice == "N" or choice == "no" or choice == "No":
        print ("Thanks for playing. ") 
    else:
        print ("Try again")
        try_again()

main()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While Triptych's answer is perfectly acceptable (and also widely used), for a relatively novice-level programmer it is usually better practice to pass arguments into functions instead of utilizing the global keyword.</p>
<p>More info can be found at the Python Documentation: <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/controlflow.html#defining-functions</a></p>
<p>In essence, the point is for the programmer to pass what is called an <em>argument</em> (or arguments) into the function, and the function containing those <em>parameters</em> can process this data and <em>return</em> values back to the location where it was called, similar to how the <code>print()</code> function works. You pass a string (ex. <code>"Hi"</code>) into the <code>print()</code> function (ex. <code>print("Hi")</code>), and code within this built-in function displays the characters <code>"Hi"</code> onto the screen.</p>
<p>In this case, your code would look something like this:</p>
<pre><code># In your main function:

def main():
print ("Let's play the game of Rock, Paper, Scissors. ")

while True:
    print ("Your current record is", user_score, "wins,", computer_score, "losses and", tied, "ties")
        computer_choice = random.randint(1,3)
    if computer_choice == 1:
        result = computer_rock(user_score, computer_score, tied)  ## Notice the difference here
    elif computer_choice == 2:
        result = computer_paper(user_score, computer_score, tied)  ## Those variables you put in the function call are arguments
    else:
        result = computer_scissors(user_score, computer_score, tied)


# ...

# In the computer_rock() function:
# Even though I only modified this function, you should probably modify all three to suit your needs.

def computer_rock(user_score, computer_score, tied): ## &lt;-- See the parameters?
    user_choice = input("1 for Rock, 2 for Paper, 3 for Scissors: ")
    if user_choice == "1":
        print ("Draw! You both chose Rock.")
        tied += 1            
        try_again()
    elif user_choice == "2":
        print ("You Win! The computer chose Rock, while you picked Paper.")
        user_score += 1            
        try_again()
    elif user_choice == "3":
        print ("You Lose! You chose scissors, while the computer picked Rock.")
        computer_score += 1            
        try_again()
    return [user_score, computer_score, tied] # Returning a list so it is easier to sort variables
</code></pre>
<p>Another thing to note, even though you are calling <code>try_again()</code> to restart the game, it is not a very good idea to call <code>main()</code> inside of a function that will be called by <code>main()</code>. It is better to use a while loop in the main function to regulate and control the flow of the program.</p>
<p>Hopefully this helped!</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding the following code as the first line in each of the three <code>computer_()</code> functions should fix your problem.</p>
<pre><code>global tied, user_score, computer_score
</code></pre>
<p>There are better ways to accomplish what you're doing, but that should get you over the hump here :) </p>
</div>
<div class="post-text" itemprop="text">
<p>It caused from a feature in Python.
The following example emits the same <em>Exception</em>. Note that <strong>You can't assign to <em>Global-Variable</em> in <em>Local-Scope</em>.</strong></p>
<pre><code>&gt;&gt;&gt; variable = 1
&gt;&gt;&gt; def function():
...     variable += 1
...
&gt;&gt;&gt; function()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in function
UnboundLocalError: local variable 'variable' referenced before assignment
</code></pre>
<p>So if you write as the following, the value of <em>Globale-Variable</em> is <strong>not changed.</strong> This variable in <em>function()</em> is not <em>Global-Variable</em> but <strong>Local-Variable</strong>. Right?</p>
<pre><code>&gt;&gt;&gt; variable = 1
&gt;&gt;&gt; def function():
...  variable = 2
...
&gt;&gt;&gt; function()
&gt;&gt;&gt; variable
1
</code></pre>
<p>By the way, this feature is useful for us, <strong>because we want to use functions as small as possible, if speaking loudly, simply because we humans don't understand long functions.</strong></p>
<p>Perhaps you want to use the <em>Global-Variable</em> here now, but when you write many and many codes, and can use <em>Global-Variable</em>, you will be panic such as "Where did this variable change?" because there are many places you changed.</p>
<p>If we have codes which we can't know where we change, these codes will be mysterious codes. It's so disgusting.</p>
<p>@Triptych 's answer is also right. If you adopt his answer, this codes will work. However I recommend that you don't use <em>global</em>.</p>
<p>p.s. You can do it in <em>JavaScript</em>.</p>
</div>
<span class="comment-copy">Is your indentation broken? - the code below <code>main()</code> isn't indented.</span>
<span class="comment-copy">btw - look at <a href="http://codereview.stackexchange.com/a/107607/35301">this answer on code review</a> for a better way to write this code. What happens if you want to extend your game to include 'lizard,spock'? That's a lot of addtional code you'll have to write if you use your existing structure.</span>
<span class="comment-copy">You should also write <code>global computer_score</code>  and <code>global user_score</code> since these variables are also modified.</span>
<span class="comment-copy">This solved it. Thank you for your guidance.</span>
