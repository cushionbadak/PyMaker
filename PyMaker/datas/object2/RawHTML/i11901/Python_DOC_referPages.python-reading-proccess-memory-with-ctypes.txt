<div class="post-text" itemprop="text">
<p>I am attempting to read my players health.  I have been on a roll but have run into a problem. I am able to read what type of information is at a certain address but can't read what the actual value is, for example here is the response I receive.</p>
<pre><code>&lt;ctypes.c_char_Array_64 object at 0x0000000002EBF9C8&gt;
</code></pre>
<p>I am looking for what information is held in the c_char_Array_64 object but have no idea how I would go about it.</p>
<p>Here is my code:</p>
<pre><code>class User:
    ctypes.wintypes.DWORD = "Entity"
    ctypes.wintypes.c_int = "Team"
    ctypes.wintypes.c_int = "Health"
    ctypes.wintypes.c_int = "Player"

    def getSelfInfo(self):
        adr1 = clientdll + dw_LocalPlayer
        adr2 = ctypes.create_string_buffer(64)
        bytes_read = ctypes.c_size_t()

        (rPM(PROCESS.handle, adr1, adr2, sys.getsizeof(ctypes.wintypes.DWORD), ctypes.byref(bytes_read)))
        print adr2
t = User()
t.getSelfInfo()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to get the value:</p>
<pre><code>print(ar2.value)
</code></pre>
<p>From the <a href="https://docs.python.org/2/library/ctypes.html" rel="nofollow">docs</a>:</p>
<p>If you need mutable memory blocks, ctypes has a create_string_buffer() function which creates these in various ways. The current memory block contents can be accessed (or changed) with the <em>raw</em> property; if you want to access it as NUL terminated string, use the <em>value</em> property: </p>
<pre><code>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; p = create_string_buffer(3)      # create a 3 byte buffer, initialized to NUL bytes
&gt;&gt;&gt; print sizeof(p), repr(p.raw)
3 '\x00\x00\x00'
&gt;&gt;&gt; p = create_string_buffer("Hello")      # create a buffer containing a NUL terminated string
&gt;&gt;&gt; print sizeof(p), repr(p.raw)
6 'Hello\x00'
&gt;&gt;&gt; print repr(p.value)
'Hello'
&gt;&gt;&gt; p = create_string_buffer("Hello", 10)  # create a 10 byte buffer
&gt;&gt;&gt; print sizeof(p), repr(p.raw)
10 'Hello\x00\x00\x00\x00\x00'
&gt;&gt;&gt; p.value = "Hi"
&gt;&gt;&gt; print sizeof(p), repr(p.raw)
10 'Hi\x00lo\x00\x00\x00\x00\x00'
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The empty slice of most <code>ctypes</code> array types will return the Python equivalent type.  So to convert your 64 byte buffer to a <code>str</code> (in Py3 <code>bytes</code>), you can do:</p>
<pre><code>print ar2[:]
</code></pre>
<p>That will read the full raw 64 bytes mind you. If you want to read it as a C-style string (so the first <code>NUL</code> byte terminates the Python equivalent <code>str</code>), you'd use <code>.value</code>:</p>
<pre><code>print ar2.value
</code></pre>
</div>
<span class="comment-copy">Side-note: <code>sys.getsizeof(ctypes.wintypes.DWORD)</code> is not getting you a useful value; it's telling you the Python interpreter's (rough) overhead to store the Python level class. If you want the size of a C <code>DWORD</code>, you want <code>ctypes.sizeof(ctypes.wintypes.DWORD)</code>. You also can't do <code>ctypes.wintypes.DWORD = "Entity"</code> and the like, that's not how you declare a variable (you're actually overwriting the <code>DWORD</code> type). I assume your goal it to make a <code>ctypes</code> struct; look at <a href="https://docs.python.org/3/library/ctypes.html#structures-and-unions" rel="nofollow noreferrer">the docs for how you're supposed to do this.</a></span>
<span class="comment-copy">It fails to print any value just a blank line</span>
<span class="comment-copy">@Scheming: If <code>ar2</code> is the empty string both of those may <code>print</code> nothing, because printing the <code>NUL</code> byte doesn't display anything on most terminal setups. I should have been a bit more clear. If you were writing to a file, or processing the data in Python, the difference is meaningful, but not necessarily printing to the terminal. If you assigned <code>a[12] = b'a'</code>, then printed, even with <code>NUL</code>s preceding the <code>a</code> you'd see the <code>a</code> printed, likely at an offset.</span>
<span class="comment-copy">It is still unclear, I don't understand how this would allow me to get the health of my player</span>
<span class="comment-copy">@Scheming: Well, assuming the <code>ReadProcessMemory</code> is actually reading the correct location, it's still reading far too much (see my comment on the question; you're trying to read a thousand bytes or so into that buffer by misusing <code>sys.getsizeof</code>, which is a buffer overflow). I don't know where in the process the health is, and if ASLR is involved, odds are the location of the DLL is not where you think it is. Your example is missing too much information.</span>
