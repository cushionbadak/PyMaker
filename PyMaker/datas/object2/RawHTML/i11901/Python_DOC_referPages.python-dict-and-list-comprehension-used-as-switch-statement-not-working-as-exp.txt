<div class="post-text" itemprop="text">
<p>I'm having trouble using a Dict and list comprehension as a case statement. I only want the first match - but I'm getting all matches. The dict is rather long, but it looks lie this:</p>
<pre><code>categories = {  'rhsa' : 'Red Hat',
            'red hat' : 'Red Hat', 
            '.net' : 'Microsoft .Net',
            'sql server' : 'MS SQL', 
            'microsoft' : 'Microsoft',
             etc..}
</code></pre>
<p>The function is simple:</p>
<pre><code>def vuln_category(vuln_title):
    vuln_cat = ''
    vuln_title = vuln_title.lower()
    try:
      vuln_cat = ''.join([categories[k] for k in categories if (k in vuln_title and len(vuln_cat)==0)]) # ''.join() to convert to string
       if vuln_cat == '':
            vuln_cat = 'Other'
    except KeyError:
        vuln_cat = 'Other'
return vuln_cat
</code></pre>
<p>What I'm getting is "3rd Party SoftwareVMWareMicrosoftVMWare".  Clearly the "and len(vuln_cat)==0" is not evaluating in the loop as I expected, resulting in every category match concatenating the dict value.</p>
<p>Yes, I can (and have) code it as nested loops as an easy fix, but I'd like to know the right way to fix this.   </p>
<p>Python version is 3.4. I'm trying to keep this simple as it is an fugly script.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>vuln_cat</code> is only set <strong>after</strong> the list comprehension completes, you can't access the list being built from inside the comprehension.</p>
<p>Use a <a href="https://docs.python.org/3/tutorial/classes.html#generator-expressions" rel="nofollow">generator expression</a> inside the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow"><code>next()</code> function</a> instead, this'll only pick the <em>first</em> matching result:</p>
<pre><code>def vuln_category(vuln_title):
    vuln_title = vuln_title.lower()
    return next(
        (categories[k] for k in categories if k in vuln_title),
        'Other')
</code></pre>
<p>The second argument to the <code>next()</code> function is a default, used if the generator expression did not yield any results.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; categories = {
...     'rhsa': 'Red Hat',
...     'red hat': 'Red Hat',
...     '.net': 'Microsoft .Net',
...     'sql server': 'MS SQL',
...     'microsoft': 'Microsoft',
... }
&gt;&gt;&gt; def vuln_category(vuln_title):
...     vuln_title = vuln_title.lower()
...     return next(
...         (categories[k] for k in categories if k in vuln_title),
...         'Other')
...
&gt;&gt;&gt; vuln_category('Microsoft SQL Server on .NET')
'MS SQL'
&gt;&gt;&gt; vuln_category('Red Hat RHSA')
'Red Hat'
&gt;&gt;&gt; vuln_category('Mac OS X')
'Other'
</code></pre>
</div>
<span class="comment-copy">Change made and it works perfectly. Kudos my new friend; take a pat on the back out of petty cash. And I learned something new about Python today! Thanks!</span>
