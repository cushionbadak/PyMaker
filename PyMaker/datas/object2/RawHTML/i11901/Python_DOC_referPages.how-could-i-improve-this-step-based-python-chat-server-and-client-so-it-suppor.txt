<div class="post-text" itemprop="text">
<p>Here is the server:</p>
<pre><code>import socket


HOST = '127.0.0.1'
PORT = 4444

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST, PORT))
s.listen(5)

conn, addr = s.accept()
print addr, 'connected.'

while True:
    data = conn.recv(1024)
    print '&gt; ', data
    reply = raw_input("&gt;&gt; ")
    conn.sendall(reply)
    if reply == 'bye':
        break

conn.close()
</code></pre>
<p>And here is the client:</p>
<pre><code>import socket

HOST = '127.0.0.1'
PORT = 4444


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
while True:
    message = raw_input("&gt; ")
    s.send(message)
    reply = s.recv(1024)
    print "&gt;&gt; ", repr(reply)
    if message == 'bye':
        break

s.close()  
</code></pre>
<p>What is the most efficient way to upgrade this code to support multiple instances, and more importantly: how could I assign names (nicknames) to all clients and make it so clients could type whenever they want? I tried to use Threading, but that was a huge <strong>disaster</strong> .</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Multiple client</strong></p>
<p>For multiple client connection, you need to have some non-linear execution.
You can either use coroutines or threads to achieve this.</p>
<p>Python 3 comes with <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow">asyncio</a>, library that uses coroutines (and lot of other features) to <em>emulate</em> multithreading. I suggest you look into this.</p>
<p>You can also use threads, it's not that complicated. Whenever a client connects to your server, you just have to create a new thread to execute your function. <a href="https://docs.python.org/3/tutorial/stdlib2.html#multi-threading" rel="nofollow">Python official documentation</a> should help you achieve that.</p>
<p><strong>Nickname</strong></p>
<p>Whenever a client connects to your server, you could instantiate a User object in the newly created thread with your client information, so that each thread has its own User instance.</p>
</div>
