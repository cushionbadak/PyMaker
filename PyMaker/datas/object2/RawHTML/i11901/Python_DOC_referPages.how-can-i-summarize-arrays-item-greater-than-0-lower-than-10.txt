<div class="post-text" itemprop="text">
<p>I'm new to Python, and I'm trying to run a simple code, that summarize arrays item, greater, than 0, lower than 10.</p>
<p>can you, please look through my code - can't get, why it still summarize all entered numbers:</p>
<pre><code>import sys

print ("Hello word")
data = sys.stdin.readline()
tokens = data.split()

for i in range(len(tokens)):
    tokens[i] = int(tokens[i])

for token in tokens:
    if (token &gt; 0 &amp; token &lt; 10):
        b = sum(tokens)
    else:
        print("err")



print (b)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should be using <code>and</code> not <code>&amp;</code>, <code>&amp;</code> is <a href="https://wiki.python.org/moin/BitwiseOperators" rel="nofollow">bitwise</a> and:</p>
<p><strong>x &amp; y</strong></p>
<p>Does a "bitwise and". Each bit of the output is 1 if the corresponding bit of x AND of y is 1, otherwise it's 0.</p>
<p>What you should be doing:</p>
<pre><code>for token in tokens:
    if token &gt; 0 and token &lt; 10:
      ....
</code></pre>
<p>The difference:</p>
<pre><code>In [8]: token = 100

In [9]: token &gt; 0 &amp; token &lt; 10
Out[9]: True

In [10]: token &gt; 0 and token &lt; 10
Out[10]: False

 # would work but don't do it
In [11]: (token &gt; 0)  &amp; (token &lt; 10)
Out[1]: True
</code></pre>
<p>You cam also simplify it further with chained comparison:</p>
<pre><code>for token in tokens:
    if 0 &lt; token &lt; 10:
</code></pre>
<p>If you are trying to get the sum of all in the range 0-10, you can just use sum and filter with the if after mapping to <code>int</code>:</p>
<pre><code>data = sys.stdin.readline()
tokens = data.split()

print (sum(token for token in map(int, tokens.split(",")) if 0 &lt; token &lt; 10))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also while <code>sum</code>ming, <code>filter</code> those integers which are outside your desired range:</p>
<pre><code>&gt;&gt;&gt; tokens = ['1','2','3','5','10','11', '4', '6']
&gt;&gt;&gt; sum(filter(lambda x: 0 &lt; x &lt; 10, map(int, (x for x in tokens))))
21
</code></pre>
<p>And like it's been mentioned in the previous answers, you were using the bitwise and <code>&amp;</code> instead of the logical one <code>and</code></p>
<p>Another better approach, is to do it with generator expression avoiding using any of <code>filter</code>, 'lambda' and <code>map</code>:</p>
<pre><code>&gt;&gt;&gt; sum(i for i in (int(x) for x in tokens) if 0 &lt; i &lt; 10)
</code></pre>
<p>Profiling both methods, lead to:</p>
<pre><code>&gt;&gt;&gt; timeit.timeit('sum(filter(lambda x: 0&lt;x&lt;10, map(int, (x for x in tokens))))', "tokens = ['1','2','3','5','10','11', '4', '6']", number=10**5)
0.2696745040011592
&gt;&gt;&gt; 
&gt;&gt;&gt; timeit.timeit('sum(i for i in(int(x) for x in tokens) if 0 &lt; i &lt; 10)', "tokens = ['1','2','3','5','10','11', '4', '6']", number=10**5)
0.24827877001371235
</code></pre>
<p>As one can notice, the generator expression is faster in this case.</p>
</div>
<div class="post-text" itemprop="text">
<p>Each time one token is bigger than 0 and smaller than 10 you set b equal to the sum of all tokens (independent of the value of these). You should either:</p>
<ul>
<li>create a "filtered" list and sum that one</li>
<li>write the "sum" yourself</li>
</ul>
<p>The second approach would look like the following:</p>
<pre><code>b = 0
for token in tokens:
    if (token &gt; 0 &amp; token &lt; 10):
        b = b + token
    else:
        print("err")
</code></pre>
<p>That said, your code isn't very "pythonic" (that means it does not use the capabilities python gives you do deal with problems). A for loop can not only count an integer variable up (like a java <code>for (int i=0; i&lt;10; i++)</code> loop) but iterate over any iterable (comparable to a <code>for (Object : iterable)</code> loop in java). See the <a href="https://docs.python.org/3.5/tutorial/controlflow.html#for-statements" rel="nofollow">official tutorial</a> for more information.</p>
<p>Later you might want to use <a href="https://docs.python.org/3.5/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions</a> instead of a for loop in this case.</p>
</div>
<span class="comment-copy">why are you using <code>stdin.readline()</code>? what is <code>data</code>?  Please create a <a href="http://stackoverflow.com/help/mcve">MCVE</a></span>
<span class="comment-copy">do you wanna raise an error in case one of the condition is not filled or simply sum filtered list?</span>
<span class="comment-copy">any reason to use <code>sys.stdin.readline()</code> instead of the build-in <a href="https://docs.python.org/3/library/functions.html#input" rel="nofollow noreferrer"><code>input</code></a>??</span>
<span class="comment-copy">Slightly over kill - you can avoid <code>filter</code> and <code>lambda</code> and <code>map</code> and make it using just gen-exps with <code>sum</code> - which'll have exactly the same behaviour in 2.x as and 3.x - eg: <code>sum(i for i in (int(t) for t in tokens) if 0 &lt; i &lt; 10)</code></span>
<span class="comment-copy">@JonClements .. Totally agree...Thanks for the Tips...</span>
