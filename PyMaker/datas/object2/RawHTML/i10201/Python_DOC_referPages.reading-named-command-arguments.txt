<div class="post-text" itemprop="text">
<p>Can I use <code>argparse</code> to read named command line arguments that do not need to be in a specific order? I browsed through the <a href="https://docs.python.org/3/library/argparse.html" rel="noreferrer">documentation</a> but most of it focused on displaying content based on the arguments provided (such as <code>--h</code>).</p>
<p>Right now, my script reads ordered, unnamed arguments:</p>
<blockquote>
<p>myscript.py foo-val bar-val</p>
</blockquote>
<p>using <code>sys.argv</code>:</p>
<pre><code>foo = sys.argv[1]
bar = sys.argv[2]
</code></pre>
<p>But I would like to change the input so that it is order agnostic by naming arguments:</p>
<blockquote>
<p>myscript.py --bar=bar-val --foo=foo-val </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/2/howto/argparse.html#introducing-optional-arguments" rel="noreferrer">Optional Arguments</a> like so:</p>
<pre><code>import argparse, sys

parser=argparse.ArgumentParser()

parser.add_argument('--bar', help='Do the bar option')
parser.add_argument('--foo', help='Foo the program')

args=parser.parse_args()

print args
print sys
</code></pre>
<p>Then if you call it with <code>./prog --bar=bar-val --foo foo-val</code> it prints:</p>
<pre><code>Namespace(bar='bar-val', foo='foo-val')
['Untitled 14.py', '--bar=bar-val', '--foo', 'foo-val']
</code></pre>
<p>Or, if the user wants help argparse builds that too:</p>
<pre><code> $ ./prog -h
usage: Untitled 14.py [-h] [--bar BAR] [--foo FOO]

optional arguments:
  -h, --help  show this help message and exit
  --bar BAR   Do the bar option
  --foo FOO   Foo the program
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answer is <strong>yes</strong>. A quick look at <a href="https://docs.python.org/3.6/library/argparse.html?highlight=argparse#module-argparse" rel="noreferrer">the argparse documentation</a> would have answered as well.</p>
<p>Here is a very simple example, argparse is able to handle far more specific needs.</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--foo', '-f', help="a random options", type= str)
parser.add_argument('--bar', '-b', help="a more random option", type= int, default= 0)

print(parser.format_help())
# usage: test_args_4.py [-h] [--foo FOO] [--bar BAR]
# 
# optional arguments:
#   -h, --help         show this help message and exit
#   --foo FOO, -f FOO  a random options
#   --bar BAR, -b BAR  a more random option

args = parser.parse_args("--foo pouet".split())
print(args)  # Namespace(bar=0, foo='pouet')
print(args.foo) # pouet
print(args.bar) # 0
</code></pre>
<p>Off course, in a real script, you won't hard-code the command-line options and will call <code>parser.parse_args()</code> (without argument) instead. It will make argparse take the <code>sys.args</code> list as command-line arguments.</p>
<p>You will be able to call this script this way:</p>
<pre><code>test_args_4.py -h  # prints the help message
test_args_4.py -f pouet  # foo="pouet", bar=0 (default value)
test_args_4.py -b 42  # foo=None, bar=42
test_args_4.py -b 77 -f knock  # foo="knock", bar=77
</code></pre>
<p>You will discover a lot of other features by reading the doc ;)</p>
</div>
<span class="comment-copy">cannot find a good duplicate, but check here for some examples: <a href="http://stackoverflow.com/questions/11415570/directory-path-types-with-argparse" title="directory path types with argparse">stackoverflow.com/questions/11415570/â€¦</a></span>
<span class="comment-copy">I did not know that it was possible to use the <code>--opt=val</code> syntax. This is wonderful :)</span>
<span class="comment-copy">how do I read the value of <code>foo</code> after the args have been loaded ?</span>
<span class="comment-copy">is there like <code>args.get('foo')</code> ?</span>
<span class="comment-copy">Use <code>args.bar</code> to read <code>--bar</code> It will return <code>None</code> if not included in the command. You can also use a default instead.</span>
<span class="comment-copy">Using python 3.5.1, and when not included it doesn't return <code>None</code>; it gives an error.  So as an alternative, <code>d = vars(args)</code> gives a dictionary (maps named arguments to values)</span>
<span class="comment-copy">but in your script, you don't know that 'pouet' is passed as the arg value</span>
<span class="comment-copy">Great answer. It would be better without the RTM comments though...</span>
<span class="comment-copy">@amphibient I don't understand what you mean...</span>
<span class="comment-copy">in line <code>args = parser.parse_args("--foo pouet".split())</code>, why do you hard code what argument value the script should read rather than reading whatever was supplied by the command ?</span>
<span class="comment-copy">@amphibient This is an example to show you how to access the arguments values then. in a real script, you will just call <code>parser.parse_args()</code> with no argument and it will take the <code>sys.args</code> list</span>
