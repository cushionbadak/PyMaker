<div class="post-text" itemprop="text">
<p>I don't know what attributes an object supports. How can I open up the module and figure out what's going on "under the hood"?</p>
<p>For example, I want to figure out what attributes the <code>datetime</code> object from the <code>datetime</code> module has in its <code>__init__</code>:</p>
<pre><code>import datetime
curtime = datetime.datetime.now()
print(curtime[0])
</code></pre>
<p>But, since <code>datetime</code> has no <code>__getitem__</code> method, there must be a different way of accessing each part of the time (<code>day</code>, <code>month</code>, <code>year</code>, etc.)</p>
<p>I have found (by trial and error) that you can do this:</p>
<pre><code>datetime.datetime.now().time()
datetime.datetime.now().date()
</code></pre>
<p>but I'm not sure what the proper name for what I'm doing here is, and how I can find other methods that belong to this object/class.</p>
</div>
<div class="post-text" itemprop="text">
<p>In your terminal, type <code>pydoc (whatever)</code> and you should be able to see all the variables and functions it has. If it's undocumented, <code>dir([whatever])</code> is the way to go. In any situation, obviously Google.
BTW, to clarify the terms in your question, <code>datetime</code> is a <em>module</em>. You have to understand modules, classes, and objects are different things. You can learn more about modules and the <code>dir()</code> function <a href="https://docs.python.org/2/tutorial/modules.html" rel="nofollow">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I find the <code>dir</code> function to be the most useful when dealing with unknown and undocumented objects (<a href="https://docs.python.org/2/library/datetime.html" rel="nofollow"><code>datetime</code> is well documented</a>, btw).</p>
<p>But if it weren't documented:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt;
&gt;&gt;&gt; dir(datetime)
['MAXYEAR', 'MINYEAR', '__doc__', '__name__', '__package__', 'date', 
'datetime', 'datetime_CAPI', 'time', 'timedelta', 'tzinfo']
&gt;&gt;&gt; datetime.date
&lt;type 'datetime.date'&gt;
&gt;&gt;&gt; dir(datetime.date)
['__add__', '__class__', '__delattr__', '__doc__', '__eq__', '__format__',
'__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__',
'__lt__', '__ne__', '__new__', '__radd__', '__reduce__', '__reduce_ex__',
'__repr__', '__rsub__', '__setattr__', '__sizeof__', '__str__', '__sub__',
'__subclasshook__', 'ctime', 'day', 'fromordinal', 'fromtimestamp',
'isocalendar', 'isoformat', 'isoweekday', 'max', 'min', 'month', 'replace',
'resolution', 'strftime', 'timetuple', 'today', 'toordinal', 'weekday',
'year']
</code></pre>
<p>and so on...</p>
</div>
<span class="comment-copy">Read <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">the documentation</a>? Use <a href="https://docs.python.org/3/library/functions.html#help" rel="nofollow noreferrer"><code>help</code></a> and <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer"><code>dir</code></a>? Go and look at <a href="https://github.com/python/cpython/blob/master/Lib/datetime.py" rel="nofollow noreferrer">the source code</a>?</span>
<span class="comment-copy">Why on earth would you use "trial and error" to determine how to use <code>datetime</code>? The proper name for what you're doing here is "being silly"!</span>
<span class="comment-copy">Thank you! I didn't know about these. dir() in particular works very well. Do you know if there is a way to actually open up the module in an IDE so I can see what's going on? (I'm using Eclipse)</span>
<span class="comment-copy">In PyCharm you can just keep hitting Cmd-B to get to the standard library definitions, not sure about Eclipse.</span>
<span class="comment-copy">Thanks Drew, although all the answers I got really helped, yours was great because that page really helped me with the terminology. Having the right words to Google is half the battle! (Maybe more than half...)</span>
<span class="comment-copy">Could you help me understand what "primary and secondary prompts" mean, in the link you posted? (Under 6.2)</span>
<span class="comment-copy">Ah okay. Glad you asked. The primary and secondary prompts mean the string used before you type something in your Python shell. So if you type <code>python</code> in your terminal, the default prompt looks like this: <code>&gt;&gt;&gt;</code>. If you want to change the primary prompt, type <code>import sys</code> and then set <code>sys.ps1</code> to whatever prompt you like. (<code>C&gt; </code> for example)</span>
