<div class="post-text" itemprop="text">
<p>I don't understand how looping over a dictionary or set in python is done by 'arbitrary' order.</p>
<p>I mean, it's a programming language so everything in the language must be 100% determined, correct? Python must have some kind of algorithm that decides which part of the dictionary or set is chosen, 1st, second and so on. </p>
<p>What am I missing?</p>
</div>
<div class="post-text" itemprop="text">
<p>The order is not arbitrary, but depends on the insertion and deletion history of the dictionary or set, as well as on the specific Python implementation. For the remainder of this answer, for 'dictionary', you can also read 'set'; sets are implemented as dictionaries with just keys and no values.</p>
<p>Keys are hashed, and hash values are assigned to slots in a dynamic table (it can grow or shrink based on needs). And that mapping process can lead to collisions, meaning that a key will have to be slotted in a <em>next</em> slot based on what is already there.</p>
<p>Listing the contents loops over the slots, and so keys are listed in the order they <em>currently</em> reside in the table.</p>
<p>Take the keys <code>'foo'</code> and <code>'bar'</code>, for example, and lets assume the table size is 8 slots. In Python 2.7, <code>hash('foo')</code> is <code>-4177197833195190597</code>, <code>hash('bar')</code> is <code>327024216814240868</code>. Modulo 8, that means these two keys are slotted in slots 3 and 4 then:</p>
<pre><code>&gt;&gt;&gt; hash('foo')
-4177197833195190597
&gt;&gt;&gt; hash('foo') % 8
3
&gt;&gt;&gt; hash('bar')
327024216814240868
&gt;&gt;&gt; hash('bar') % 8
4
</code></pre>
<p>This informs their listing order:</p>
<pre><code>&gt;&gt;&gt; {'bar': None, 'foo': None}
{'foo': None, 'bar': None}
</code></pre>
<p>All slots except 3 and 4 are empty, looping over the table first lists slot 3, then slot 4, so <code>'foo'</code> is listed before <code>'bar'</code>.</p>
<p><code>bar</code> and <code>baz</code>, however, have hash values that are exactly 8 apart and thus map to the exact same slot, <code>4</code>:</p>
<pre><code>&gt;&gt;&gt; hash('bar')
327024216814240868
&gt;&gt;&gt; hash('baz')
327024216814240876
&gt;&gt;&gt; hash('bar') % 8
4
&gt;&gt;&gt; hash('baz') % 8
4
</code></pre>
<p>Their order now depends on which key was slotted first; the second key will have to be moved to a next slot:</p>
<pre><code>&gt;&gt;&gt; {'baz': None, 'bar': None}
{'bar': None, 'baz': None}
&gt;&gt;&gt; {'bar': None, 'baz': None}
{'baz': None, 'bar': None}
</code></pre>
<p>The table order differs here, because one or the other key was slotted first.</p>
<p>The technical name for the underlying structure used by CPython (the most commonly used Python implemenation) is a <a href="http://en.wikipedia.org/wiki/hash_table" rel="noreferrer">hash table</a>, one that uses open addressing. If you are curious, and understand C well enough, take a look at the <a href="http://hg.python.org/cpython/file/tip/Objects/dictobject.c" rel="noreferrer">C implementation</a> for all the (well documented) details. You could also watch this <a href="http://pyvideo.org/video/276/the-mighty-dictionary-55" rel="noreferrer">Pycon 2010 presentation by Brandon Rhodes</a> about how CPython <code>dict</code> works, or pick up a copy of <a href="http://shop.oreilly.com/product/9780596510046.do" rel="noreferrer">Beautiful Code</a>, which includes a chapter on the implementation written by Andrew Kuchling.</p>
<p>Note that as of Python 3.3, a random hash seed is used as well, making hash collisions unpredictable to prevent certain types of denial of service (where an attacker renders a Python server unresponsive by causing mass hash collisions). This means that the order of a given dictionary is then <em>also</em> dependent on the random hash seed for the current Python invocation.</p>
<p>Other implementations are free to use a different structure for dictionaries, as long as they satisfy the documented Python interface for them, but I believe that all implementations so far use a variation of the hash table.</p>
<p>CPython 3.6 introduces a <em>new</em> <code>dict</code> implementation that maintains insertion order, and is faster and more memory efficient to boot. Rather than keep a large sparse table where each row references the stored hash value, and the key and value objects, the new implementation adds a smaller hash <em>array</em> that only references indices in dense table (one that only contains as many rows as there are actual key-value pairs), and it is the dense table that happens to list the contained items in order. See the <a href="https://mail.python.org/pipermail/python-dev/2012-December/123028.html" rel="noreferrer">proposal to Python-Dev for more details</a>. Note that in Python 3.6 this is considered an <em>implementation detail</em>, Python-the-language does not specify that other implementations have to retain order. This changed in Python 3.7, where this detail was <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="noreferrer">elevated to be a <em>language specification</em></a>; for any implementation to be properly compatible with Python 3.7 or newer it <strong>must</strong> copy this order-preserving behaviour.</p>
<p>Python 2.7 and newer also provides an <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>OrderedDict</code> class</a>, a subclass of <code>dict</code> that adds an additional data structure to record key order. At the price of some speed and extra memory, this class remembers in what order you inserted keys; listing keys, values or items will then do so in that order. It uses a doubly-linked list stored in an additional dictionary to keep the order up-to-date efficiently. See the <a href="https://mail.python.org/pipermail/python-dev/2012-December/123028.html" rel="noreferrer">post by Raymond Hettinger outlining the idea</a>. Note that the <code>set</code> type is still unordered.</p>
<p>If you wanted an ordered set, you can install the <a href="https://pypi.python.org/pypi/oset" rel="noreferrer"><code>oset</code> package</a>; it works on Python 2.5 and up.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is more a response to <a href="https://stackoverflow.com/questions/26098775/python-3-41-a-set">Python 3.41 A set</a> before it was closed as a duplicate.</p>
<hr/>
<p>The others are right: don't rely on the order. Don't even pretend there is one.</p>
<p>That said, there is <em>one</em> thing you can rely on:</p>
<pre class="lang-py prettyprint-override"><code>list(myset) == list(myset)
</code></pre>
<p>That is, the order is <em>stable</em>.</p>
<hr/>
<p>Understanding why there is a <em>perceived</em> order requires understanding a few things:</p>
<ul>
<li><p>That Python uses <em>hash sets</em>,</p></li>
<li><p>How CPython's hash set is stored in memory and</p></li>
<li><p>How numbers get hashed</p></li>
</ul>
<p>From the top:</p>
<p>A <em>hash set</em> is a method of storing random data with really fast lookup times.</p>
<p>It has a backing array:</p>
<pre class="lang-none prettyprint-override"><code># A C array; items may be NULL,
# a pointer to an object, or a
# special dummy object
_ _ 4 _ _ 2 _ _ 6
</code></pre>
<p>We shall ignore the special dummy object, which exists only to make removes easier to deal with, because we won't be removing from these sets.</p>
<p>In order to have really fast lookup, you do some magic to calculate a hash from an object. The only rule is that two objects which are equal have the same hash. (But if two objects have the same hash they can be unequal.)</p>
<p>You then make in index by taking the modulus by the array length:</p>
<pre class="lang-py prettyprint-override"><code>hash(4) % len(storage) = index 2
</code></pre>
<p>This makes it really fast to access elements.</p>
<p>Hashes are only most of the story, as <code>hash(n) % len(storage)</code> and <code>hash(m) % len(storage)</code> can result in the same number. In that case, several different strategies can try and resolve the conflict. CPython uses "linear probing" 9 times before doing complicated things, so it will look <em>to the left of the slot</em> for up to 9 places before looking elsewhere.</p>
<p>CPython's hash sets are stored like this:</p>
<ul>
<li><p>A hash set can be <strong>no more than 2/3 full</strong>. If there are 20 elements and the backing array is 30 elements long, the backing store will resize to be larger. This is because you get collisions more often with small backing stores, and collisions slow everything down.</p></li>
<li><p>The backing store resizes in powers of 4, starting at 8, except for large sets (50k elements) which resize in powers of two: (8, 32, 128, ...).</p></li>
</ul>
<p>So when you create an array the backing store is length 8. When it is 5 full and you add an element, it will briefly contain 6 elements. <code>6 &gt; ²⁄₃·8</code> so this triggers a resize, and the backing store quadruples to size 32.</p>
<p>Finally, <code>hash(n)</code> just returns <code>n</code> for numbers (except <code>-1</code> which is special).</p>
<hr/>
<p>So, let's look at the first one:</p>
<pre class="lang-py prettyprint-override"><code>v_set = {88,11,1,33,21,3,7,55,37,8}
</code></pre>
<p><code>len(v_set)</code> is 10, so the backing store is at least 15(+1) <strong>after all items have been added</strong>. The relevant power of 2 is 32. So the backing store is:</p>
<pre class="lang-none prettyprint-override"><code>__ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
</code></pre>
<p>We have</p>
<pre class="lang-py prettyprint-override"><code>hash(88) % 32 = 24
hash(11) % 32 = 11
hash(1)  % 32 = 1
hash(33) % 32 = 1
hash(21) % 32 = 21
hash(3)  % 32 = 3
hash(7)  % 32 = 7
hash(55) % 32 = 23
hash(37) % 32 = 5
hash(8)  % 32 = 8
</code></pre>
<p>so these insert as:</p>
<pre class="lang-none prettyprint-override"><code>__  1 __  3 __ 37 __  7  8 __ __ 11 __ __ __ __ __ __ __ __ __ 21 __ 55 88 __ __ __ __ __ __ __
   33 ← Can't also be where 1 is;
        either 1 or 33 has to move
</code></pre>
<p>So we would expect an order like</p>
<pre class="lang-py prettyprint-override"><code>{[1 or 33], 3, 37, 7, 8, 11, 21, 55, 88}
</code></pre>
<p>with the 1 or 33 that isn't at the start somewhere else. This will use linear probing, so we will either have:</p>
<pre class="lang-none prettyprint-override"><code>       ↓
__  1 33  3 __ 37 __  7  8 __ __ 11 __ __ __ __ __ __ __ __ __ 21 __ 55 88 __ __ __ __ __ __ __
</code></pre>
<p>or</p>
<pre class="lang-none prettyprint-override"><code>       ↓
__ 33  1  3 __ 37 __  7  8 __ __ 11 __ __ __ __ __ __ __ __ __ 21 __ 55 88 __ __ __ __ __ __ __
</code></pre>
<p>You might expect the 33 to be the one that's displaced because the 1 was already there, but due to the resizing that happens as the set is being built, this isn't actually the case. Every time the set gets rebuilt, the items already added are effectively reordered.</p>
<p>Now you can see why</p>
<pre class="lang-py prettyprint-override"><code>{7,5,11,1,4,13,55,12,2,3,6,20,9,10}
</code></pre>
<p>might be in order. There are 14 elements, so the backing store is at least 21+1, which means 32:</p>
<pre class="lang-none prettyprint-override"><code>__ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
</code></pre>
<p>1 to 13 hash in the first 13 slots. 20 goes in slot 20.</p>
<pre class="lang-none prettyprint-override"><code>__  1  2  3  4  5  6  7  8  9 10 11 12 13 __ __ __ __ __ __ 20 __ __ __ __ __ __ __ __ __ __ __
</code></pre>
<p>55 goes in slot <code>hash(55) % 32</code> which is 23:</p>
<pre class="lang-none prettyprint-override"><code>__  1  2  3  4  5  6  7  8  9 10 11 12 13 __ __ __ __ __ __ 20 __ __ 55 __ __ __ __ __ __ __ __
</code></pre>
<p>If we chose 50 instead, we'd expect</p>
<pre class="lang-none prettyprint-override"><code>__  1  2  3  4  5  6  7  8  9 10 11 12 13 __ __ __ __ 50 __ 20 __ __ __ __ __ __ __ __ __ __ __
</code></pre>
<p>And lo and behold:</p>
<pre class="lang-py prettyprint-override"><code>{1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 20, 50}
#&gt;&gt;&gt; {1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 50, 20}
</code></pre>
<hr/>
<p><code>pop</code> is implemented quite simply by the looks of things: it traverses the list and pops the first one.</p>
<hr/>
<h3>This is all implementation detail.</h3>
</div>
<div class="post-text" itemprop="text">
<p>"Arbitrary" isn't the same thing as "non-determined".</p>
<p>What they're saying is that there are no useful properties of dictionary iteration order that are "in the public interface". There almost certainly are many properties of the iteration order that are fully determined by the code that currently implements dictionary iteration, but the authors aren't promising them to you as something you can use. This gives them more freedom to change these properties between Python versions (or even just in different operating conditions, or completely at random at runtime) without worrying that your program will break.</p>
<p>Thus if you write a program that depends on <em>any property at all</em> of dictionary order, then you are "breaking the contract" of using the dictionary type, and the Python developers are not promising that this will always work, even if it appears to work for now when you test it. It's basically the equivalent of relying on "undefined behaviour" in C.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers to this question are excellent and well written.  The OP asks "how" which I interpret as "how do they get away with" or "why".</p>
<p>The Python documentation says <a href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries" rel="noreferrer">dictionaries</a> are not ordered because the Python dictionary implements the <a href="http://en.wikipedia.org/wiki/Abstract_data_type" rel="noreferrer">abstract data type</a> <a href="http://en.wikipedia.org/wiki/Associative_array" rel="noreferrer">associative array</a>.  As they say </p>
<blockquote>
<p>the order in which the bindings are returned may be arbitrary</p>
</blockquote>
<p>In other words, a computer science student cannot assume that an associative array is ordered.  The same is true for sets in <a href="http://en.wikipedia.org/wiki/Set_(mathematics)" rel="noreferrer">math</a> </p>
<blockquote>
<p>the order in which the elements of a set are listed is irrelevant</p>
</blockquote>
<p>and <a href="http://en.wikipedia.org/wiki/Set_(computer_science)" rel="noreferrer">computer science</a> </p>
<blockquote>
<p>a set is an abstract data type that can store certain values, without any particular order</p>
</blockquote>
<p>Implementing a dictionary using a hash table is an <a href="https://hg.python.org/cpython/file/tip/Objects/dictobject.c" rel="noreferrer">implementation detail</a> that is interesting in that it has the same properties as associative arrays as far as order is concerned.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python use <a href="http://en.wikipedia.org/wiki/Hash_table" rel="nofollow"><strong>hash table</strong></a> for storing the dictionaries, so there is no order in dictionaries or other iterable objects that use hash table.</p>
<p>But regarding the indices of items in a hash object, python calculate the indices based on following code <a href="https://hg.python.org/cpython/file/661cdbd617b8/Modules/hashtable.c#l317" rel="nofollow">within <code>hashtable.c</code></a>:</p>
<pre><code>key_hash = ht-&gt;hash_func(key);
index = key_hash &amp; (ht-&gt;num_buckets - 1);
</code></pre>
<p>Therefor, as the hash value of integers is the integer itself<sup>*</sup> the index  is based on the number (<code>ht-&gt;num_buckets - 1</code> is a constant) so the index calculated by <em>Bitwise-and</em> between <code>(ht-&gt;num_buckets - 1)</code> and the number itself<sup>*</sup> (expect for -1 which it's hash is -2) , and for other objects with their hash value. </p>
<p>consider the following example with <code>set</code> that use hash-table :</p>
<pre><code>&gt;&gt;&gt; set([0,1919,2000,3,45,33,333,5])
set([0, 33, 3, 5, 45, 333, 2000, 1919])
</code></pre>
<p>For number <code>33</code> we have : </p>
<pre><code>33 &amp; (ht-&gt;num_buckets - 1) = 1
</code></pre>
<p>That actually it's :</p>
<pre><code>'0b100001' &amp; '0b111'= '0b1' # 1 the index of 33
</code></pre>
<p><em>Note</em> in this case <code>(ht-&gt;num_buckets - 1)</code> is <code>8-1=7</code> or <code>0b111</code>. </p>
<p>And for <code>1919</code> :</p>
<pre><code>'0b11101111111' &amp; '0b111' = '0b111' # 7 the index of 1919
</code></pre>
<p>And for <code>333</code> :</p>
<pre><code>'0b101001101' &amp; '0b111' = '0b101' # 5 the index of 333
</code></pre>
<p>For more details about python hash function its good to read the following quotes from <a href="https://hg.python.org/cpython/file/661cdbd617b8/Objects/dictobject.c#l106" rel="nofollow">python source code</a> :</p>
<blockquote>
<p>Major subtleties ahead:  Most hash schemes depend on having a "good" hash
  function, in the sense of simulating randomness.  Python doesn't:  its most
  important hash functions (for strings and ints) are very regular in common
  cases:</p>
<pre><code>&gt;&gt;&gt; map(hash, (0, 1, 2, 3))
  [0, 1, 2, 3]
&gt;&gt;&gt; map(hash, ("namea", "nameb", "namec", "named"))
  [-1658398457, -1658398460, -1658398459, -1658398462]
</code></pre>
<p>This isn't necessarily bad!  To the contrary, in a table of size 2**i, taking
  the low-order i bits as the initial table index is extremely fast, and there
  are no collisions at all for dicts indexed by a contiguous range of ints.
  The same is approximately true when keys are "consecutive" strings.  So this
  gives better-than-random behavior in common cases, and that's very desirable.</p>
<p>OTOH, when collisions occur, the tendency to fill contiguous slices of the
  hash table makes a good collision resolution strategy crucial.  Taking only
  the last i bits of the hash code is also vulnerable:  for example, consider
  the list <code>[i &lt;&lt; 16 for i in range(20000)]</code> as a set of keys.  <strong>Since ints are their own hash codes, and this fits in a dict of size 2**15, the last 15 bits of every hash code are all 0:  they <em>all</em> map to the same table index.</strong></p>
<p>But catering to unusual cases should not slow the usual ones, so we just take
  the last i bits anyway.  It's up to collision resolution to do the rest.  If
  we <em>usually</em> find the key we're looking for on the first try (and, it turns
  out, we usually do -- the table load factor is kept under 2/3, so the odds
  are solidly in our favor), then it makes best sense to keep the initial index
  computation dirt cheap.</p>
</blockquote>
<hr/>
<p><sub>
* The hash function for class <code>int</code> :</sub></p>
<pre><code>class int:
    def __hash__(self):
        value = self
        if value == -1:
            value = -2
        return value
</code></pre>
<p></p></div>
<div class="post-text" itemprop="text">
<p>Starting with Python 3.7 (and <a href="https://docs.python.org/3/whatsnew/3.6.html#new-dict-implementation" rel="nofollow noreferrer">already in CPython 3.6</a>), dictionary items <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="nofollow noreferrer">stay in the order they were inserted</a>.</p>
</div>
<span class="comment-copy">The order is deterministic for a given Python implementation, but it's an implementation detail that you shouldn't rely on.</span>
<span class="comment-copy">@Wooble Actually not even that. In CPython since is gained hash randomization, the hashes and thus dict order may be different for otherwise identical processes due to a random value mixed into the hash process. Aside from this deal breaker, it should be stressed that implementation details may even change between minor versions and the <i>entire</i> history of the dict (<i>all</i> inserts, deletions, etc. and their order) factors into dictionary order.</span>
<span class="comment-copy">The newest PyPy build (2.5, for Python 2.7) makes <a href="http://morepypy.blogspot.co.uk/2015/01/faster-more-memory-efficient-and-more.html" rel="nofollow noreferrer">dictionaries ordered by default</a>.</span>
<span class="comment-copy"><code>arbitrary</code> does not mean <code>non-deterministic</code>.</span>
<span class="comment-copy">FYI folks dictionaries (not sets) maintain insertion order from Python 3.6/3.7 onward <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6" title="are dictionaries ordered in python 3 6">stackoverflow.com/questions/39980323/…</a></span>
<span class="comment-copy">I don't think other Python implementations can use anything that isn't a hash table in one way or another (though there are now billions of different ways to implement hash tables, so there's still some liberty). The fact that dictionaries use <code>__hash__</code> and <code>__eq__</code> (and nothing else) is practically a language guarantee, not an implementation detail.</span>
<span class="comment-copy">@delnan: I wonder if you can still use a BTree with hashes and equality tests.. I am certainly not ruling that out, in any case. :-)</span>
<span class="comment-copy">It's certainly correct, and I'd be glad to be proven wrong w.r.t. feasibility, but I don't see any way one could beat a hash table without requiring a broader contract. A BTree wouldn't have better average-case performance and doesn't give you better worst-case either (hash collisions still mean linear search). So you only gain better resistance to many hashes neomg congruent (mod tablesize), and there are many other great ways to handle that (some of which are used in <code>dictobject.c</code>) and end up with far fewer comparisons than a BTree needs to even find the right subtree.</span>
<span class="comment-copy">@delnan: I agree completely; I most of all didn't want to be bashed for not allowing for other implementation options.</span>
<span class="comment-copy">This is a beautiful explanation. Thanks to the author.</span>
<span class="comment-copy">Note that one part of dictionary iteration is well defined: Iterating over the keys, values or items of a given dictionary will each happen in the same order, as long as no changes have been made to the dictionary in between. That means that <code>d.items()</code> is essentially identical to <code>zip(d.keys(), d.values())</code>. If any items are added to the dictionary however, all bets are off. The order could change completely (if the hash table needed to be resized), though most of the time you'd just find the new item turning up in some arbitrary spot in the sequence.</span>
<span class="comment-copy">You're <i>basically</i> right but it would be a little closer (and give a good hint at the reason it's "unordered") to say it's an implementation of a <a href="https://en.wikipedia.org/wiki/Hash_table" rel="nofollow noreferrer">hash table</a> rather than an assoc array.</span>
<span class="comment-copy">Is that true of sets as well?</span>
<span class="comment-copy">@user1712447: no.</span>
