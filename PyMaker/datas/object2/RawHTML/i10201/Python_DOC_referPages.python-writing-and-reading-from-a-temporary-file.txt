<div class="post-text" itemprop="text">
<p>I am trying to create a temporary file that I write in some lines from another file and then make some objects from the data.  I am not sure how to find and open the temp file so I can read it.   My code:</p>
<pre><code>with tempfile.TemporaryFile() as tmp:
    lines = open(file1).readlines()
    tmp.writelines(lines[2:-1])

dependencyList = []

for line in tmp:
    groupId = textwrap.dedent(line.split(':')[0])
    artifactId = line.split(':')[1]
    version = line.split(':')[3]
    scope = str.strip(line.split(':')[4])
    dependencyObject = depenObj(groupId, artifactId, version, scope)
    dependencyList.append(dependencyObject)
tmp.close()
</code></pre>
<p>Essentially I just want to make a middleman temporary document to protect against accidentally overwriting a file. </p>
</div>
<div class="post-text" itemprop="text">
<p>As per the <a href="https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile" rel="noreferrer">docs</a>, the file is deleted when the <code>TemporaryFile</code> is closed and that happens when you exit the <code>with</code> clause. So... don't exit the <code>with</code> clause. Rewind the file and do your work in the <code>with</code>. </p>
<pre><code>with tempfile.TemporaryFile() as tmp:
    lines = open(file1).readlines()
    tmp.writelines(lines[2:-1])
    tmp.seek(0)

    for line in tmp:
        groupId = textwrap.dedent(line.split(':')[0])
        artifactId = line.split(':')[1]
        version = line.split(':')[3]
        scope = str.strip(line.split(':')[4])
        dependencyObject = depenObj(groupId, artifactId, version, scope)
        dependencyList.append(dependencyObject)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You've got a scope problem; the file <code>tmp</code> only exists within the scope of the <code>with</code> statement which creates it. Additionally, you'll need to use a <code>NamedTemporaryFile</code> if you want to access the file later outside of the initial <code>with</code> (this gives the OS the ability to access the file). Also, I'm not sure why you're trying to append to a temporary file... since it won't have existed before you instantiate it.</p>
<p>Try this:</p>
<pre><code>import tempfile

tmp = tempfile.NamedTemporaryFile()

# Open the file for writing.
with open(tmp.name, 'w') as f:
    f.write(stuff) # where `stuff` is, y'know... stuff to write (a string)

...

# Open the file for reading.
with open(tmp.name) as f:
    for line in f:
        ... # more things here
</code></pre>
</div>
<span class="comment-copy">I've never used temporary files, is there any reason you arn't using the standard <code>open()</code> <code>write</code> and <code>read</code> methods?</span>
<span class="comment-copy">I want to protect against the possibility that the filename already exists and I could overwrite it</span>
<span class="comment-copy">1. have you considered simply piping the output from one script into the input of the second script? 2. Are you checking to be sure the temp file exists in the path that you're looking in?</span>
<span class="comment-copy">You have a scope problem. The temporary file <code>tmp</code> only exists within the scope of the <code>with</code> loop which creates it.</span>
<span class="comment-copy">Please post your comment as an answer, Pierce Darragh, so I can mod it up.</span>
<span class="comment-copy">Thank you that solved it.  What does the .seek(0) accomplish?</span>
<span class="comment-copy">is that the rewinding you are talking about?</span>
<span class="comment-copy">After you <code>tmp.writelines</code> the file pointer is at the end of the file. <code>tmp.seek(0)</code> puts it back to the beginning again (rewinds it - maybe this is ancient cassette tape lingo!) so you can read what you've written.</span>
<span class="comment-copy">Also make sure that you add "f.seek(0)" after writing to a file if you are going to read from it without closing and reopening it. Otherwise you will be reading the end of the file which will give you wrong result.</span>
