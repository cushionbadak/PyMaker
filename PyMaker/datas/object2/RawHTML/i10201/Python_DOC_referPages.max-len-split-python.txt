<div class="post-text" itemprop="text">
<p>I'm trying to find all combinations of A,B repeated 3 times.
Once I've done this I would like to count how many A's there are in a row, by splitting the string and returning the len.max value. However this is going crazy on me. I must have misunderstood the len(max(tmp.split="A")</p>
<p>Can anyone explain what this really does (len returns the length of the string, and max returns the highest integer of that string, based on my split?) I expect it to return the number of A's in a row. "A,B,A" should return 1 even though there are two A's. </p>
<p>Suggestions and clarifications would be sincerely welcome</p>
<pre><code>import itertools
list = list(itertools.product(["A", "B"], repeat=3))

count = 0;

for i in list:
    count += 1;
    tmp = str(i);
    var = len(max(tmp.split("B")))
    print(count, i, var)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a> to find groups of identical elements in an iterable. <code>groupby</code> generates a sequence of (key, group) tuples, where <code>key</code> is the value of the elements in the group, and <code>group</code> is an iterator of that group (which shares the underlying iterable with <code>groupby</code>. To get the length of the group we need to convert it to a list. </p>
<pre><code>from itertools import product, groupby

for t in product("AB", repeat=3):
    a = max([len(list(g)) for k, g in groupby(t) if k == "A"] or [0])
    print(t, a)
</code></pre>
<p><strong>output</strong></p>
<pre><code>('A', 'A', 'A') 3
('A', 'A', 'B') 2
('A', 'B', 'A') 1
('A', 'B', 'B') 1
('B', 'A', 'A') 2
('B', 'A', 'B') 1
('B', 'B', 'A') 1
('B', 'B', 'B') 0
</code></pre>
<p>We need to append <code>or [0]</code> to the list comprehension to cover the situation where no "A"s are found, otherwise <code>max</code> complains that we're trying to find the maximum of an empty sequence. </p>
<h3>Update</h3>
<p>Padraic Cunningham reminded me that the Python 3 version of <code>max</code> accepts a default arg to handle the situation when you pass it an empty iterable. He also shows another way to calculate the length of an iterable that is a bit nicer since it avoids capturing the iterable into a list, so it's a bit faster and consumes less RAM, which can be handy when working with large iterables. So we can rewrite the above code as</p>
<pre><code>from itertools import product, groupby

for t in product("AB", repeat=3):
    a = max((sum(1 for _ in g) for k, g in groupby(t) if k == "A"), default=0)
    print(t, a)
</code></pre>
</div>
<span class="comment-copy">Why not separate it into three separate steps if you're unclear? Then you'd <i>know</i> what <code>tmp.split</code> gives you, what the <code>max</code> of that is and why <code>len</code> is apparently not what you expected.</span>
<span class="comment-copy">@Dartmouth er, no. <code>max</code> will return a string here, and <code>len</code> will give you the length of that string. Calling <code>len</code> on an integer would be a TypeError.</span>
<span class="comment-copy">BTW, it's a bad idea to shadow the built-in <code>list</code> type with a variable named <code>list</code>, especially when you want to use the  <code>list</code> type constructor in your code.</span>
<span class="comment-copy">Perfect! Thanks alot!</span>
<span class="comment-copy">For python3 you can use a default value with max, <code>max((sum(1 for _ in g) for k, g in groupby(t) if k == "A"),default=0)</code></span>
<span class="comment-copy">@PadraicCunningham: Oh yeah! I keep forgetting about that very useful feature. But I'll keep my code as it is, just in case Python 2 people want to use it...</span>
<span class="comment-copy">@PadraicCunningham: I changed my mind. :)</span>
