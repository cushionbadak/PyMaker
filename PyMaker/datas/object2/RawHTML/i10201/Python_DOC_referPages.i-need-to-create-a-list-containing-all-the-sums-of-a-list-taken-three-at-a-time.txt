<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks">How do you split a list into evenly sized chunks?</a>
<span class="question-originals-answer-count">
                    57 answers
                </span>
</li>
</ul>
</div>
<p>I need to add the first three elements of a list then add the next three elements of a list and so forth. This is the code I have got so far:</p>
<pre><code>def get_triple_sums_list(a_list):
    new_list = []
    for numbers in range(0,len(a_list)):
        numbers = sum(a_list[:3])
        new_list.append(numbers)
        return new_list
    if a_list == []:
        return []
</code></pre>
<p>For the list:</p>
<pre><code> [1, 5, 3, 4, 5, 2]
</code></pre>
<p>This in turn gives me the result:</p>
<pre><code>[9]
</code></pre>
<p>I need to get</p>
<pre><code>[9, 11]
</code></pre>
<p>If the remaining numbers is less than 3, it gives me the remainder of the sum ie,</p>
<pre><code>[1, 6, 2, 4, 3]
</code></pre>
<p>Gives me</p>
<pre><code>[9, 7]
</code></pre>
<p>And</p>
<pre><code>[1, 6, 2, 4]
</code></pre>
<p>Give me</p>
<pre><code>[9, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Let's analyze your code!</p>
<pre><code>def get_triple_sums_list(a_list):
    new_list = []
    for numbers in range(0,len(a_list)):
        numbers = sum(a_list[:3]) #You should be using the variable
                                  #numbers here somehow.
       #^^^^^^^ - You are overwriting the for-loop index.
        new_list.append(numbers)
        return new_list  #Why are you returning here? You should be
                         #appending to `new_list`.
    if a_list == []:
        return []
</code></pre>
<hr/>
<p>Here is the fixed code:</p>
<pre><code>def get_triple_sums_list(a_list):
    new_list = []
    for index in range(0,len(a_list), 3): #Range takes a 3rd param!
        total = sum(a_list[index:index+3])#Get all the elements from the
                                          #index to index+3
        new_list.append(total)
    return new_list
</code></pre>
<hr/>
<p>UPDATE: It seems there's a shortening contest going on -- and I do not want to be left behind. Here's an ugly version I'd like to add to the list.</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3,4,5,6,7,8]
&gt;&gt;&gt; a += [0]*(len(a)%3) #For people who are too lazy to import izip_longest
&gt;&gt;&gt; map(sum,zip(a[::3], a[1::3], a[2::3]))
[6, 15, 15]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I like SuperSaiyan's approach of explaining things, I'll be the one who shortens it a bit. You can get the same result with a single comprehension:</p>
<pre><code>l = [1, 5, 3, 4, 5, 2]
n = 3    
r = [sum(l[i:i+n]) for i in range(0, len(l), n)]

print(r)
[9, 11]
</code></pre>
<p><code>l[i:i+n]</code> splits the list in even chunks of length <code>3</code> and <code>sum</code> takes care of adding these together. Using the <code>for i in range(0, len(l), n)</code> we dictate that this operation is to happen for <code>ceil(len(l) / 3)</code> times.</p>
</div>
<div class="post-text" itemprop="text">
<p>The other answer mentions the <a href="https://stackoverflow.com/a/39828367/4099593">fault with your code</a>. However do note that it's always easier to use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> in these cases. </p>
<pre><code>&gt;&gt;&gt; l =  [1, 5, 3, 4, 5, 2]
&gt;&gt;&gt; [sum(l[i:i+3]) for i in range(0,len(l),3)]
[9, 11]
</code></pre>
<p>It also works for un-mod-3 lists </p>
<pre><code>&gt;&gt;&gt; l =  [1, 5, 3, 4, 5]
&gt;&gt;&gt; [sum(l[i:i+3]) for i in range(0,len(l),3)]
[9, 9]
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/34835951/what-does-list-comprehension-in-python-mean-how-does-it-work-and-how-can-i-us">What does "list comprehension" mean? How does it work and how can I use it?</a>  for more details about a list comprehension. </p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a slightly different way of doing it using <code>zip_longest</code> from <code>itertools</code> (<code>izip_longest</code> in python2), it splits the list in three lists then zip them to get packs of three elements and finally sums the packs:</p>
<pre><code>from itertools import zip_longest
a=[1, 6, 2, 4, 3]
b=zip_longest(a[0::3],a[1::3],a[2::3],fillvalue=0)
result=[sum(x) for x in b]
&gt;&gt;&gt;[9, 7]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just cuz I like to be different.</p>
<pre><code>l = [1, 5, 3, 4, 5, 3, 42]
g = lambda l,s: [sum(l[i:i+s]) for i in range(0,len(l),s)]
print g(l,3)

#&gt;&gt; [9,12,42]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively, you may achieve it by using <code>map()</code> with <code>lambda</code> function as:</p>
<pre><code>&gt;&gt;&gt; my_list = [1, 5, 3, 4, 5, 2]
&gt;&gt;&gt; list(map(lambda x: sum(my_list[x:x+3]), range(0, len(my_list), 3)))
[9, 11]
</code></pre>
</div>
<span class="comment-copy">How on earth can you <code>delete</code> my answer <a href="https://stackoverflow.com/a/20389922/2310289">stackoverflow.com/a/20389922/2310289</a> for providing a link just like you did in this answer?  I think you should re-visit your decision</span>
<span class="comment-copy">@ScaryWombat Your answer was a complete copy of the other one. See this meta post <a href="https://meta.stackoverflow.com/questions/321299/answers-entirely-copied-though-properly-attributed" title="answers entirely copied though properly attributed">meta.stackoverflow.com/questions/321299/…</a>. If you want to dispute my decision, you can flag your answer for a second look by another moderator.</span>
<span class="comment-copy">already done, the explanation that you gave did not mention then you closed due to it being a duplicate and more information was added in the comments</span>
<span class="comment-copy">This is almost the same answers as others, but with a lambda wrapped on the outside.</span>
<span class="comment-copy">Really? That's funny, it's the same question...</span>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/26939931/moving-non-overlapping-window-in-numpy" title="moving non overlapping window in numpy">stackoverflow.com/questions/26939931/…</a> <a href="http://stackoverflow.com/questions/25879735/how-to-implement-a-function-with-non-overlapping-and-rolling-features-simultaneo" title="how to implement a function with non overlapping and rolling features simultaneo">stackoverflow.com/questions/25879735/…</a> <a href="http://stackoverflow.com/questions/21097039/average-on-overlapping-windows-in-python" title="average on overlapping windows in python">stackoverflow.com/questions/21097039/…</a></span>
<span class="comment-copy">You could just say: <code>[sum(my_list[i:i+3]) for i in range(0, len(my_list), 3)]</code></span>
<span class="comment-copy">It was already answered here. However removed that solution, as it was not the right way to do it even though it was working</span>
<span class="comment-copy">In my opinion, it is a more pythonic way of achieving the same thing. I am not sure why you'd consider it wrong. (List comprehension is more <i>pythonic</i> than map/lambda combination)</span>
<span class="comment-copy">Yes. I agree on that. I meant that the solution with <i>list comprehension</i> is already mentioned here. That's why I haven't mentioned that. Instead the one I removed was having list comprehension + map, which was not at all pythonic.</span>
