<div class="post-text" itemprop="text">
<p>I have two text files, say file1.txt contains something like </p>
<pre><code>100.145 10.0728
100.298 10.04
100.212 10.0286
</code></pre>
<p>and file2.txt contains something like </p>
<pre><code>100.223 8.92739
100.209 9.04269
100.084 9.08411
</code></pre>
<p>I want to compare column 1 and column 2 of both files and print match
if the difference of both columns in file1.txt and in file2.txt is less or equal to 0.001.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just read both files, split by line break, split those lines by spaces and then loop over the first files lines and for each line check whether the second files line at this position matches your condition.</p>
<pre class="lang-py prettyprint-override"><code>with open("file1.txt", "r") as f:
  f1_content = f.read()

with open("file2.txt", "r") as f:
  f2_content = f.read()

f1_lines = [line.split() for line in f1_content.split("\n")]
f2_lines = [line.split() for line in f2_content.split("\n")]

for i, line in enumerate(f1_lines):
  if abs(float(line[0]) - float(f2_lines[i][0])) &lt;= 0.001 and abs(float(line[1]) - float(f2_lines[i][1])) &lt;= 0.001:
    print("Match at line {0}".format(i))
</code></pre>
<p>Solution using <code>zip</code> as proposed by @BrianCain:</p>
<pre class="lang-py prettyprint-override"><code>with open("file1.txt", "r") as f:
  f1_content = f.read()

with open("file2.txt", "r") as f:
  f2_content = f.read()

f1_lines = [line.split() for line in f1_content.split("\n") if line != ""]
f2_lines = [line.split() for line in f2_content.split("\n") if line != ""]

for line in zip(f1_lines, f2_lines):
  if abs(float(line[0][0]) - float(line[1][0])) &lt;= 0.001 and abs(float(line[0][1]) - float(f2_lines[1][1])) &lt;= 0.001:
    print("Match at line {0}".format(line))
</code></pre>
<p><strong>Requested Explanation</strong> of the solution using <code>zip</code>:
First we open both file (using with, as this closes the file after the block) and save the content to some variables. We use <code>read()</code> instead of <code>readlines()</code> bacause the latter doesnt remove an <code>\n</code> when splitting at linebreaks. So i usually just use read() and split by <code>\n</code>, as this does the job.</p>
<p>We then create ourselves for each file a list of tuples. Each entry in the list represents one line, each tuple (which is one of those entries) contains one entry per column. This is done using <a href="http://www.python-course.eu/list_comprehension.php" rel="nofollow">list comprehensions</a>:</p>
<pre class="lang-py prettyprint-override"><code>f1_lines = [line.split() for line in f1_content.split("\n") if line != ""]
</code></pre>
<p>now we can iterate over the lines. <code>zip</code> is pretty useful for that, as it can combine two lists of equal length to one list, containing tuples of the entries of the lists at the same index. Example:</p>
<pre class="lang-py prettyprint-override"><code>zip([1, 2, 3], [4, 5, 6])
</code></pre>
<p>would produce</p>
<pre class="lang-py prettyprint-override"><code>[(1, 4), (2, 5), 3, 6)]
</code></pre>
<p>For more look here: <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow">zip</a></p>
<p>So now we have a list, containing tuples for the lines with an entry for each file. Each entry itself contains two entries for the columns:</p>
<pre class="lang-py prettyprint-override"><code>[(['100.145', '10.0728'], ['100.223', '8.92739']),
 (['100.298', '10.04'], ['100.2985', '10.04001']),
 (['100.212', '10.0286'], ['100.084', '9.08411']),
 (['100.212', '100.2125'], ['100.084', '100.0845'])]
</code></pre>
<p>if we iterate over this list we can access files via the first [x] as in line[0] and columns via the second [y] as in line<a href="http://www.python-course.eu/list_comprehension.php" rel="nofollow">0</a> (accessing the first file at line at the second column).
Now we simply subtract at each line the second files first column value from the first files first column value, take the absolute value (to only get positive floats) and check if its less than or equal to 0.001. The same is done for the second column, and if both are true (or one, if you use OR) then we print our message.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use <code>paste</code> to combine the files and then let <code>awk</code> do the rest:</p>
<pre><code>paste file1.txt file2.txt |
awk '
  function abs(v) {return v &lt; 0 ? -v : v}
  abs($1-$3) &lt;= lim &amp;&amp; abs($2-$4) &lt;= lim
' lim=0.001
</code></pre>
<p><code>abs</code> function definition copied from <a href="https://unix.stackexchange.com/a/220590/17666">an answer by St√©phane Chazelas</a></p>
</div>
<span class="comment-copy">I don't think SQL is an appropriate tag.  You should also specify how large the files are, because this could have an impact on the solution.</span>
<span class="comment-copy">As I was wondering what exactly your condition would be could you add a line in which it applies and point out which one this would be? Bacause at this point no way I can read your condition would apply on any of those lines</span>
<span class="comment-copy">post the expected output given that input.</span>
<span class="comment-copy">Another popular way to iterate elementwise through a pair of iterables is to use <code>zip</code> (or <code>itertools.izip</code>).</span>
<span class="comment-copy">Thanks @ weidler: it worked. Although the condition i gave earlier required "and", but i discovered later i needed "or" so I had to change "and" to "or" because if either condition is true, it should print match line. Please can you explain the code to me? am refering to the solution using "zip".</span>
<span class="comment-copy">@Offor added explanation to the answer</span>
<span class="comment-copy">@Weidler: Thanks so much for the explanation. I understood it very well. The two files don't have the same number of rows. That is affecting the number of match am getting. Will it be possible to modify the code such that it takes the first record of file2.txt (assuming file2.txt is the one with shorter numbers of rows) and compare with every record of file1.txt, if it finds a match,it should print, after which it picks the second and third until it does that for all records in file2.txt (with shorter no. of rows). Is it possible to print the matched into a new file, file3.txt?</span>
<span class="comment-copy">@offor sure thats possible ;) You may just nest two for-loops, iterating over one file in the outer loop and over the other file in the inner loop. I am sure with some try and error you will be able to achieve this yourself. To look up how to write the matches into another file you may consult the python documentation or simply google</span>
<span class="comment-copy">Thanks for the answer. What i want the code to do is: it should pick the first record of file2.txt and compare with every record in file1.txt, after which it will pick the second record in file2.txt, and the third record and so on until it's done with all the records in file2.txt and it should print the match records in a new file, file3.txt. Thanks in advance</span>
<span class="comment-copy">@Offor: this is not what the question says. Care to improve the question first? Please include expected output as well.</span>
