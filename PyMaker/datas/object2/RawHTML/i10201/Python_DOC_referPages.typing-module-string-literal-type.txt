<div class="post-text" itemprop="text">
<p>I'm using the new Python 3.5 module <a href="https://docs.python.org/3/library/typing.html#module-typing" rel="nofollow noreferrer">typing</a> and it has been joyous.</p>
<p>I was wondering how one might specify a type based on an exact string literal. For example, a function is guaranteed to return one of the four strings - "North", "West", "East", "South - how can we express that as a specific type variable, instead of just <code>str</code>.</p>
<p>I looked through the documentation, finding the <code>Union</code> type and the <code>TypeVar</code> function, but was unable to find an answer.</p>
<p>An example function expressing this problem:</p>
<pre><code>def compute_quadrant(x: int, y: int) -&gt; str:
    if x &gt; 0 and y &gt; 0:
        return 'I'
    elif x &lt; 0 and y &gt; 0:
        return 'II'
    elif x &lt; 0 and y &lt; 0:
        return 'III'
    elif x &gt; 0 and y &lt; 0:
        return 'IV'
</code></pre>
<p>Instead of just returning <code>str</code>, I'd like to to return a more specific type that is one of four values - <code>"I"</code>, <code>"II"</code>, <code>"III"</code>, or <code>"IV"</code>.</p>
<p>In Typescript, one can do: <code>type Quadrant = "I" | "II" | "III" | "IV"</code> - is there any nice Python sugar for this use case with the <code>typing</code> module?</p>
</div>
<div class="post-text" itemprop="text">
<p>Disregarding the <code>typing</code> module you asked about, one solution to your problem could be the use of an <code>Enum</code> as supposed in multiple comments. The code for this would look like this:</p>
<pre class="lang-py prettyprint-override"><code>from enum import Enum

class Quadrant(Enum):
    I = 1
    II = 2
    III = 3
    IV = 4

def compute_quadrant(x: int, y: int) -&gt; Quadrant:
    if x &gt; 0 and y &gt; 0:
        return Quadrant.I
    elif x &lt; 0 and y &gt; 0:
        return Quadrant.II
    elif x &lt; 0 and y &lt; 0:
        return Quadrant.III
    elif x &gt; 0 and y &lt; 0:
        return Quadrant.IV
    # return None  # this is what happens without an else clause!

if __name__ == "__main__":
    quad = compute_quadrant(1, -1)
    print(quad, type(quad))              # -&gt; Quadrant.IV &lt;enum 'Quadrant'&gt;
    print(quad.name, type(quad.name))    # -&gt; IV &lt;class 'str'&gt;
    print(quad.value, type(quad.value))  # -&gt; 4 &lt;class 'int'&gt;
</code></pre>
<p>As you can see you can use the Enums name and value. The name is one of the strings you asked for.</p>
<p>One issue I see here is the missing else clause in the function and mypy's current behaviour of accepting <code>None</code> as a valid return value for <code>Quadrant</code>. This should be handled manually.</p>
</div>
<span class="comment-copy">Not related to typing, but have you considered <code>enum</code>?</span>
<span class="comment-copy">Can i ask, why do you need such thing? Because type annotations are made for text editors and programmers that view the code. If you can limit the range of elements that function could return then you definitely can say that from looking at code.</span>
<span class="comment-copy">how about this: <a href="http://stackoverflow.com/questions/39398138/">stackoverflow.com/questions/39398138</a></span>
<span class="comment-copy">As the name says, type hinting only cares about <i>type</i>. <code>"I"</code>, <code>"II"</code> ... aren't types. Unless you make a subclass of str only capable of holding these values, it simply doesn't make sense to do this as type hints.</span>
<span class="comment-copy">The way to go would be to define your <code>class MyValues(Enum): first = 'I'; second = 'II'; ...</code> and then use <code>-&gt; MyValues</code> as return type.</span>
