<div class="post-text" itemprop="text">
<p>What I'm trying to do is ship my code to a remote server, that may have different python version installed and/or may not have packages my app requires.</p>
<p>Right now to achieve such portability I have to build relocatable virtualenv with interpreter and code. That approach has some issues (for example, you have to manually copy a bunch of libraries into your virtualenv, since <code>--always-copy</code> doesn't work as expected) and generally slow.</p>
<p>There's (in theory) <a href="https://wiki.python.org/moin/BuildStatically">a way</a> to build python itself statically.</p>
<p>I wonder if I could pack interpreter with my code into one binary and run my application as module. Something like that: <code>./mypython -m myapp run</code> or <code>./mypython -m gunicorn -c ./gunicorn.conf myapp.wsgi:application</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two ways you could go about to solve your problem</p>
<ol>
<li>Use a static builder, like freeze, or pyinstaller, or py2exe</li>
<li>Compile using cython</li>
</ol>
<p>I will explain how you can go about doing it using the second, since the first method is not cross platform and version, and has been explained in other answers. Also, using programs like pyinstaller typically results in huge file sizes, where as using cython will result in a file that's KBs in size</p>
<p>First, install cython. Then, rename your python file (say test.py) into a pyx file </p>
<pre><code>$ sudo pip install cython
$ mv test.py test.pyx
</code></pre>
<p>Then, you can use cython along with GCC to compile it (Cython generates a C file out of a Python .pyx file, and then GCC compiles the C file)
(in reference to <a href="https://stackoverflow.com/a/22040484/5714445">https://stackoverflow.com/a/22040484/5714445</a>)</p>
<pre><code>$ cython test.pyx --embed
$ gcc -Os -I /usr/include/python3.5m -o test test.c -lpython3.5m -lpthread -lm -lutil -ldl
</code></pre>
<p>NOTE: Depending on your version of python, you might have to change the last command. To know which version of python you are using, simply use</p>
<pre><code>$ python -V
</code></pre>
<p>You will now have a binary file 'test', which is what you are looking for</p>
<p>NOTE: Cython is used to use C-Type Variable definitions for static memory allocation to speed up Python programs. In your case however, you will still be using traditional Python definitions.</p>
<p>NOTE2: If you are using additional libraries (like opencv, for example), you might have to provide the directory to them using -L and then specify the name of the library using -l in the GCC Flags. For more information on this, please refer to GCC flags</p>
</div>
<div class="post-text" itemprop="text">
<p>You might wish to investigate <a href="http://nuitka.net/" rel="nofollow">Nuitka</a>. It takes python source code and converts it in to C++ API calls. Then it compiles into an executable binary (ELF on Linux). It has been around for a few years now and supports a wide range of Python versions.</p>
<p>You will probably also get a performance improvement if you use it. Recommended.</p>
</div>
<div class="post-text" itemprop="text">
<p>Freeze options:</p>
<ul>
<li><a href="https://pypi.python.org/pypi/bbfreeze/1.1.3" rel="nofollow noreferrer">https://pypi.python.org/pypi/bbfreeze/1.1.3</a></li>
<li><a href="http://cx-freeze.sourceforge.net/" rel="nofollow noreferrer">http://cx-freeze.sourceforge.net/</a></li>
</ul>
<p>However, your target server should have the environment you want -&gt; you should be able to 'create' it. If it doesn't, you should build your software to match the environment. </p>
<p>I found this handy guide on how to install custom version of python to a virtualenv, assuming you have ssh access: <a href="https://stackoverflow.com/a/5507373/5616110">https://stackoverflow.com/a/5507373/5616110</a></p>
<p>In virtualenv, you should be able to pip install anything and you shouldn't need to worry about sudo privileges. Of course, having those and access to package manager like apt makes everything a lot easier.</p>
</div>
<div class="post-text" itemprop="text">
<p>You're probably looking for something like Freeze, which is able to compile your Python application with all its libraries into a static binary:</p>
<p><a href="https://pypi.python.org/pypi/cx_Freeze" rel="nofollow">PyPi page of Freeze</a></p>
<p><a href="https://wiki.python.org/moin/Freeze" rel="nofollow">Python Wiki page of Freeze</a></p>
<p><a href="http://cx-freeze.sourceforge.net/" rel="nofollow">Sourceforge page of Freeze</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To freeze your python executable and ship it along your code, embed it in an empty shell app. Follow the instructions how to embed python in an application from the <a href="https://docs.python.org/3/extending/embedding.html#embedding-python-in-another-application" rel="nofollow">official documentation</a>. You can start building a sample app directly from the C sample code they give on the web page. </p>
<p>Make that program execute your python application through the embedded python. Ship the program, the embedded python you used and your python program. Execute that program.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are on a Mac you can use py2app to create a .app bundle, which starts your Django app when you double-click on it.</p>
<p>I described how to bundle Django and CherryPy into such a bundle at <a href="https://moosystems.com/articles/14-distribute-django-app-as-native-desktop-app-01.html" rel="nofollow">https://moosystems.com/articles/14-distribute-django-app-as-native-desktop-app-01.html</a></p>
<p>In the article I use pywebview to display your Django site in a local application window.</p>
</div>
<span class="comment-copy">Do you mean something like cx_freeze?</span>
<span class="comment-copy">@TigerhawkT3, I've never heard of cx_freeze until today. Looked through docs, seems like it's what I want, but it fails to build on Ubuntu 12.04.5 with python3.5.1. I'm looking for alternatives, thanks for kick in the right direction.</span>
<span class="comment-copy">Sadly, pyinstaller doesn't work with Django 1.9 and py2app/py2exe don't support linux :(</span>
<span class="comment-copy">if cx_Freeze and pyinstaller don't work, there is still hope. You can create package(s) for your target distribution(s) which will resolve all dependencies on installation.  Or, maybe use something like docker to run your app.</span>
<span class="comment-copy">other options are nuitka and cython</span>
<span class="comment-copy">Hi, what if my application spans across multiple files. This approach seems to only compile the current script and not all the Python dependencies.</span>
<span class="comment-copy">I couldn't find any information about using Nuitka with Django. Do you, by any chance, have such experience?</span>
<span class="comment-copy">@roboslone, Prakhar Agarwal Cython supports external libraries really well, when compared to Nuitka PyPy's static builder. For instance, from the link at the end of this comment, "people use Cython because it helps them solve a problem. Which is either that they want to connect to external non-Python libraries from Python code or that they want to be able to manually optimise their code, or both.", the link being <a href="http://blog.behnel.de/posts/indexp241.html" rel="nofollow noreferrer">blog.behnel.de/posts/indexp241.html</a></span>
<span class="comment-copy">R. S. Nikhil Krishna, I'm not trying to make my code faster, I'm trying to ship it in one binary with python interpreter inside.</span>
<span class="comment-copy">Aah okay. I thought you wanted to bind it with some external library. My bad.</span>
<span class="comment-copy">I'm already using virtualenv, this is not the case. My question is about statically compiled python witn required modules and applications.</span>
<span class="comment-copy">Then you have to freeze it, no other way around that.</span>
<span class="comment-copy">My application runs on Linux mostly, so py2app doesn't apply</span>
<span class="comment-copy">Though the article uses py2app, it can be done using pyinstaller, too.</span>
