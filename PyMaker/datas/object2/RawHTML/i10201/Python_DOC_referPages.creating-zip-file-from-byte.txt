<div class="post-text" itemprop="text">
<p>I'm sending byte string of a zip file from client side using <code>JSZip</code> and need to convert it back to zip on server side. the code I've tried isn't working.</p>
<pre><code>b = bytearray()
b.extend(map(ord, request.POST.get("zipFile")))

zipPath = 'uploadFile' + str(uuid.uuid4()) + '.zip'
myzip = zipfile.ZipFile(zipPath, 'w') 
with  myzip:
    myzip.write(b)
</code></pre>
<p>It gives the error:</p>
<pre><code>stat: path too long for Windows 
</code></pre>
<p>How do I save my byte string as a zip file?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/zipfile.html#zipfile.ZipFile.write" rel="nofollow"><code>ZipFile.write(filename, [arcname[, compress_type]])</code></a> takes the name of a local file to be added to the zip file. To write data from a <code>bytearray</code> or <code>bytes</code> object you need to use the <a href="https://docs.python.org/2/library/zipfile.html#zipfile.ZipFile.writestr" rel="nofollow"><code>ZipFile.writestr(zinfo_or_arcname, bytes[, compress_type])</code></a> method instead:</p>
<pre><code>with zipfile.ZipFile(zipPath, 'w'):
    zipFile.write('name_of_file_in_archive', zipContents)
</code></pre>
<p>Note: if <code>request.POST.get("zipFile")</code> already is <code>bytes</code> (or <code>str</code> in python2) you don't need to convert it to a <code>bytearray</code> before writing it to the archive.</p>
</div>
<div class="post-text" itemprop="text">
<p>JSZip already made a zip archive. The zipfile module is for accessing zip file contents, but you don't need to parse it to store it. In addition, bytearray can be created directly from strings so the map(ord,) is superfluous, and write can handle strings as well (bytearray is for handling numeric binary data or making a mutable stringlike object). So a slightly simplified variant might be:</p>
<pre><code>zipContents = request.POST.get("zipFile")
zipPath = 'uploadFile' + str(uuid.uuid4()) + '.zip'
with open(zipPath, 'wb') as zipFile:
    zipFile.write(zipContents)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Haven't tried it, but you could  use <a href="https://docs.python.org/3/library/io.html#buffered-streams" rel="nofollow"><code>io.BytesIO</code></a> to construct a Buffered Stream
with your bytes and then create your zip file like so:</p>
<pre><code>import io

with ZipFile('my_file.zip', 'w') as myzip:
    myzip.write(io.BytesIO(b))
</code></pre>
</div>
<span class="comment-copy">Are you <i>sure</i> that the data returned from <code>request.POST.get("zipFile")</code> is a zipfile? In particular, are the first 4 bytes <code>b'PK\x03\x04'</code>? Also, you should mention whether you're using Python 2 or Python 3 (preferably by using the appropriate tag).</span>
<span class="comment-copy">I used <code>zip.generateAsync({type:"base64"})</code> method from <code>JSZip</code> to convert the uploaded file to zip and get the byte string. Gotta trust the library to get it right, right? And I'm using Python 3</span>
<span class="comment-copy">You'll likely want to decode that using <code>binascii.a2b_base64</code>.</span>
<span class="comment-copy">with a slight modification (` zipFile.write(bytes(zipContents, 'UTF-8')) `) it created the zip file but opening it gives error that the file is damaged.</span>
<span class="comment-copy">I give up. I'll just compress the file from client side instead. Thanks.</span>
<span class="comment-copy">What? I thought you already did, why else would you mention JSZip? Also, zip files aren't text and shouldn't use character encodings like UTF-8. They're binary data. Your <code>request</code> object might be important because of that; it likely has to decode the data from base64, urlescape or similar.</span>
<span class="comment-copy">i meant I would manually zip the file and then upload it.</span>
<span class="comment-copy">it gives error <code>argument should be string, bytes or integer, not _io.BytesIO </code></span>
<span class="comment-copy">@TahreemIqbal  could you please tell me what output gives the <code>type(b)</code> cause I supposed that it was <code>bytes</code> type, else it won't work</span>
