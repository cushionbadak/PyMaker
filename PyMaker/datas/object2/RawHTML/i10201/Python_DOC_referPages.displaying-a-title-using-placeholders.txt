<div class="post-text" itemprop="text">
<p>I am quite new to Python and I am now struggling with formatting my data nicely for printed output.</p>
<p>I have one list that is used for two headings, and a matrix that should be the contents of the table. Like so:</p>
<pre><code>teams_list = ["Man Utd", "Man City", "T Hotspur"]
data = np.array([[1, 2, 1],
                 [0, 1, 0],
                 [2, 4, 2]])
</code></pre>
<p>Note that the heading names are not necessarily the same lengths. The data entries are all integers, though.</p>
<p>Now, I want to represent this in a table format, something like this:</p>
<pre><code>            Man Utd   Man City   T Hotspur
  Man Utd         1          0           0
 Man City         1          1           0
T Hotspur         0          1           2
</code></pre>
<p>I have a hunch that there must be a data structure for this, but I cannot find it. I have tried using a dictionary and formatting the printing, I have tried for-loops with indentation and I have tried printing as strings.</p>
<p>I am sure there must be a very simple way to do this, but I am probably missing it due to lack of experience.</p>
</div>
<div class="post-text" itemprop="text">
<p>Some ad-hoc code for Python 2.7:</p>
<pre><code>row_format ="{:&gt;15}" * (len(teams_list) + 1)
print row_format.format("", *teams_list)
for team, row in zip(teams_list, data):
    print row_format.format(team, *row)
</code></pre>
<p>This relies on <a href="http://docs.python.org/py3k/library/stdtypes.html#str.format" rel="noreferrer"><code>str.format()</code></a> and the <a href="http://docs.python.org/py3k/library/string.html#formatspec" rel="noreferrer">Format Specification Mini-Language</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are some light and useful python packages for this purpose:</p>
<p><strong>1. tabulate</strong>:  <a href="https://pypi.python.org/pypi/tabulate" rel="noreferrer">https://pypi.python.org/pypi/tabulate</a></p>
<pre><code>&gt;&gt;&gt; from tabulate import tabulate
&gt;&gt;&gt; print tabulate([['Alice', 24], ['Bob', 19]], headers=['Name', 'Age'])
Name      Age
------  -----
Alice      24
Bob        19
</code></pre>
<p>tabulate has many options to specify headers and table format.</p>
<pre><code>&gt;&gt;&gt; print tabulate([['Alice', 24], ['Bob', 19]], headers=['Name', 'Age'], tablefmt='orgtbl')
| Name   |   Age |
|--------+-------|
| Alice  |    24 |
| Bob    |    19 |
</code></pre>
<p><strong>2. PrettyTable</strong>: <a href="https://pypi.python.org/pypi/PrettyTable" rel="noreferrer">https://pypi.python.org/pypi/PrettyTable</a></p>
<pre><code>&gt;&gt;&gt; from prettytable import PrettyTable
&gt;&gt;&gt; t = PrettyTable(['Name', 'Age'])
&gt;&gt;&gt; t.add_row(['Alice', 24])
&gt;&gt;&gt; t.add_row(['Bob', 19])
&gt;&gt;&gt; print t
+-------+-----+
|  Name | Age |
+-------+-----+
| Alice |  24 |
|  Bob  |  19 |
+-------+-----+
</code></pre>
<p>PrettyTable has options to read data from csv, html, sql database. Also you are able to select subset of data, sort table and change table styles.</p>
<p><strong>3. texttable</strong>: <a href="https://pypi.python.org/pypi/texttable" rel="noreferrer">https://pypi.python.org/pypi/texttable</a></p>
<pre><code>&gt;&gt;&gt; from texttable import Texttable
&gt;&gt;&gt; t = Texttable()
&gt;&gt;&gt; t.add_rows([['Name', 'Age'], ['Alice', 24], ['Bob', 19]])
&gt;&gt;&gt; print t.draw()
+-------+-----+
| Name  | Age |
+=======+=====+
| Alice | 24  |
+-------+-----+
| Bob   | 19  |
+-------+-----+
</code></pre>
<p>with texttable you can control horisontal/verical align, border style and data types.</p>
<p>Other options:</p>
<ul>
<li><a href="https://github.com/Robpol86/terminaltables" rel="noreferrer">terminaltables</a> Easily draw tables in terminal/console applications from a list of lists of strings. Supports multi-line rows.</li>
<li><a href="https://pypi.python.org/pypi/asciitable/0.8.0" rel="noreferrer">asciitable</a> Asciitable can read and write a wide range of ASCII table formats via built-in Extension Reader Classes.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; import pandas
&gt;&gt;&gt; pandas.DataFrame(data, teams_list, teams_list)
           Man Utd  Man City  T Hotspur
Man Utd    1        2         1        
Man City   0        1         0        
T Hotspur  2        4         2        
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python actually makes this quite easy.</p>
<p>Something like</p>
<pre><code>for i in range(10):
    print '%-12i%-12i' % (10 ** i, 20 ** i)
</code></pre>
<p>will have the output</p>
<pre><code>1           1           
10          20          
100         400         
1000        8000        
10000       160000      
100000      3200000     
1000000     64000000    
10000000    1280000000  
100000000   25600000000
1000000000  512000000000
</code></pre>
<p>The % within the string is essentially an escape character and the characters following it tell python what kind of format the data should have. The % outside and after the string is telling python that you intend to use the previous string as the format string and that the following data should be put into the format specified.</p>
<p>In this case I used "%-12i" twice. To break down each part:</p>
<pre><code>'-' (left align)
'12' (how much space to be given to this part of the output)
'i' (we are printing an integer)
</code></pre>
<p>From the docs: <a href="https://docs.python.org/2/library/stdtypes.html#string-formatting" rel="noreferrer">https://docs.python.org/2/library/stdtypes.html#string-formatting</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Updating Sven Marnach's answer to work in Python 3.4:</p>
<pre><code>row_format ="{:&gt;15}" * (len(teams_list) + 1)
print(row_format.format("", *teams_list))
for team, row in zip(teams_list, data):
    print(row_format.format(team, *row))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When I do this, I like to have some control over the details of how the table is formatted. In particular, I want header cells to have a different format than body cells, and the table column widths to only be as wide as each one needs to be. Here's my solution:</p>
<pre><code>def format_matrix(header, matrix,
                  top_format, left_format, cell_format, row_delim, col_delim):
    table = [[''] + header] + [[name] + row for name, row in zip(header, matrix)]
    table_format = [['{:^{}}'] + len(header) * [top_format]] \
                 + len(matrix) * [[left_format] + len(header) * [cell_format]]
    col_widths = [max(
                      len(format.format(cell, 0))
                      for format, cell in zip(col_format, col))
                  for col_format, col in zip(zip(*table_format), zip(*table))]
    return row_delim.join(
               col_delim.join(
                   format.format(cell, width)
                   for format, cell, width in zip(row_format, row, col_widths))
               for row_format, row in zip(table_format, table))

print format_matrix(['Man Utd', 'Man City', 'T Hotspur', 'Really Long Column'],
                    [[1, 2, 1, -1], [0, 1, 0, 5], [2, 4, 2, 2], [0, 1, 0, 6]],
                    '{:^{}}', '{:&lt;{}}', '{:&gt;{}.3f}', '\n', ' | ')
</code></pre>
<p>Here's the output:</p>
<pre><code>                   | Man Utd | Man City | T Hotspur | Really Long Column
Man Utd            |   1.000 |    2.000 |     1.000 |             -1.000
Man City           |   0.000 |    1.000 |     0.000 |              5.000
T Hotspur          |   2.000 |    4.000 |     2.000 |              2.000
Really Long Column |   0.000 |    1.000 |     0.000 |              6.000
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think <a href="http://ginstrom.com/scribbles/2007/09/04/pretty-printing-a-table-in-python/">this</a> is what you are looking for.</p>
<p>It's a simple module that just computes the maximum required width for the table entries and then just uses <a href="http://www.tutorialspoint.com/python/string_rjust.htm">rjust</a> and <a href="http://www.tutorialspoint.com/python/string_ljust.htm">ljust</a> to do a pretty print of the data.</p>
<p>If you want your left heading right aligned just change this call:</p>
<pre><code> print &gt;&gt; out, row[0].ljust(col_paddings[0] + 1),
</code></pre>
<p>From line 53 with:</p>
<pre><code> print &gt;&gt; out, row[0].rjust(col_paddings[0] + 1),
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pure Python 3</p>
<pre><code>def print_table(data, cols, wide):
    '''Prints formatted data on columns of given width.'''
    n, r = divmod(len(data), cols)
    pat = '{{:{}}}'.format(wide)
    line = '\n'.join(pat * cols for _ in range(n))
    last_line = pat * r
    print(line.format(*data))
    print(last_line.format(*data[n*cols:]))

data = [str(i) for i in range(27)]
print_table(data, 6, 12)
</code></pre>
<p>Will print</p>
<pre><code>0           1           2           3           4           5           
6           7           8           9           10          11          
12          13          14          15          16          17          
18          19          20          21          22          23          
24          25          26
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would try to loop through the list and use a CSV formatter to represent the data you want. </p>
<p>You can specify tabs, commas, or any other char as the delimiter.</p>
<p>Otherwise, just loop through the list and print "\t" after each element</p>
<p><a href="http://docs.python.org/library/csv.html" rel="nofollow">http://docs.python.org/library/csv.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>A simple way to do this is to loop over all columns, measure their width, create a row_template for that max width, and then print the rows. <strong>It's not exactly what you are looking for</strong>, because in this case, you first have to put your headings <strong>inside</strong> the table, but I'm thinking it might be useful to someone else.</p>
<pre><code>table = [
    ["", "Man Utd", "Man City", "T Hotspur"],
    ["Man Utd", 1, 0, 0],
    ["Man City", 1, 1, 0],
    ["T Hotspur", 0, 1, 2],
]
def print_table(table):
    longest_cols = [
        (max([len(str(row[i])) for row in table]) + 3)
        for i in range(len(table[0]))
    ]
    row_format = "".join(["{:&gt;" + str(longest_col) + "}" for longest_col in longest_cols])
    for row in table:
        print(row_format.format(*row))
</code></pre>
<p>You use it like this:</p>
<pre><code>&gt;&gt;&gt; print_table(table)

            Man Utd   Man City   T Hotspur
  Man Utd         1          0           0
 Man City         1          1           0
T Hotspur         0          1           2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I found this just looking for a way to output simple columns. <strong>If you just need no-fuss columns</strong>, then you can use this:</p>
<pre><code>print("Titlex\tTitley\tTitlez")
for x, y, z in data:
    print(x, "\t", y, "\t", z)
</code></pre>
<p>EDIT: I was trying to be as simple as possible, and thereby did some things manually instead of using the teams list. To generalize to the OP's actual question:</p>
<pre><code>#Column headers
print("", end="\t")
for team in teams_list:
    print(" ", team, end="")
print()
# rows
for team, row in enumerate(data):
    teamlabel = teams_list[team]
    while len(teamlabel) &lt; 9:
        teamlabel = " " + teamlabel
    print(teamlabel, end="\t")
    for entry in row:
        print(entry, end="\t")
    print()
</code></pre>
<p>Ouputs:</p>
<pre><code>          Man Utd  Man City  T Hotspur
  Man Utd       1       2       1   
 Man City       0       1       0   
T Hotspur       2       4       2   
</code></pre>
<p>But this no longer seems any more simple than the other answers, with perhaps the benefit that it doesn't require any more imports. But @campkeith's answer already met that and is more robust as it can handle a wider variety of label lengths.</p>
</div>
<div class="post-text" itemprop="text">
<p>The following function will create the requested table (with or without numpy) with Python 3 (maybe also Python 2). I have chosen to set the width of each column to match that of the longest team name. You could modify it if you wanted to use the length of the team name for each column, but will be more complicated. </p>
<p>Note: For a direct equivalent in Python 2 you could replace the <code>zip</code> with <code>izip</code> from itertools.</p>
<pre><code>def print_results_table(data, teams_list):
    str_l = max(len(t) for t in teams_list)
    print(" ".join(['{:&gt;{length}s}'.format(t, length = str_l) for t in [" "] + teams_list]))
    for t, row in zip(teams_list, data):
        print(" ".join(['{:&gt;{length}s}'.format(str(x), length = str_l) for x in [t] + row]))

teams_list = ["Man Utd", "Man City", "T Hotspur"]
data = [[1, 2, 1],
        [0, 1, 0],
        [2, 4, 2]]

print_results_table(data, teams_list)
</code></pre>
<p>This will produce the following table:</p>
<pre><code>            Man Utd  Man City T Hotspur
  Man Utd         1         2         1
 Man City         0         1         0
T Hotspur         2         4         2
</code></pre>
<p>If you want to have vertical line separators, you can replace <code>" ".join</code> with <code>" | ".join</code>.</p>
<p>References:</p>
<ul>
<li>lots about formatting <a href="https://pyformat.info/" rel="nofollow noreferrer">https://pyformat.info/</a> (old and new formatting
styles) </li>
<li>the official Python tutorial (quite good) -
<a href="https://docs.python.org/3/tutorial/inputoutput.html#the-string-format-method" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/inputoutput.html#the-string-format-method</a></li>
<li>official Python information (can be difficult to read) -
<a href="https://docs.python.org/3/library/string.html#string-formatting" rel="nofollow noreferrer">https://docs.python.org/3/library/string.html#string-formatting</a></li>
<li>Another resource -
<a href="https://www.python-course.eu/python3_formatted_output.php" rel="nofollow noreferrer">https://www.python-course.eu/python3_formatted_output.php</a></li>
</ul>
</div>
<span class="comment-copy">+1, I was just trying to do the same thing last night. Are you just trying to print to the command line or are you using a GUI module?</span>
<span class="comment-copy">Just printing to the command line.  However, it needs to pass a unit-test case, so formatting is pretty important here.</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/5122347/printing-tabular-data-in-python">Printing tabular data in Python</a></span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/5909873/python-pretty-printing-ascii-tables">Python: pretty-printing ascii tables?</a></span>
<span class="comment-copy">Note that the requirement here is pretty specialized, since the row and column labels are the same.  So for this particular case, the ad-hoc code is a nice example of how easy this can be.  But the other solutions here may be better for more generic table display.</span>
<span class="comment-copy">If using python2.6 remember to add team_list index on row_format: row_format ="{0:&gt;15}{1:&gt;15}{2:&gt;15}"</span>
<span class="comment-copy">u'{:&gt;15}' for unicodes</span>
<span class="comment-copy">If the data in the body is larger than the headers, you can set column width based on the first row of data.     for t in data[0]:                                                                                                                                                            row_format+="{:&lt;"+str(len(t)+5)+"}"</span>
<span class="comment-copy">I updated this for Python 3 in an answer below.</span>
<span class="comment-copy">I've found tabulate to be a very useful tool for building data-centric CLI tools.  That, combined with click (pip install click), and you've got a real stew going.</span>
<span class="comment-copy">This is wonderful, thank you. Personally, which one would you prefer among those three?</span>
<span class="comment-copy">Brilliant reply! PrettyTable is just so good - the perfect balance between the other two options.</span>
<span class="comment-copy">terminaltables is good for Chinese, maybe other non-english languages</span>
<span class="comment-copy">I just played with the main packages and IMO "beautifultable" - best, maintained, good API &amp; doco, support for colored. "texttable" - nice, maintained, good API but use of colored use throws tables out of alignment. "terminaltables" - good, doco via code examples only.  "PrettyTable" - ok, but old, table 'titles' don't work for me. "Tabulate" - good, but column alignment <code>coalign</code> keyword not supported in official pypi release. "tableprint" - average, API complex, not enough common usage examples.</span>
<span class="comment-copy">This looks very promising, thanks, but I am trying to do this without using any more imported libraries than absolutely necessary.</span>
<span class="comment-copy">Using pandas just for output formatting seems like Overkill (capital O intended).</span>
<span class="comment-copy">@NielsBom: come for the output formatting, stay for data analysis and modeling :)</span>
<span class="comment-copy">@J.F.Sebastian to me it was more like "come for the output formatting, run away screaming because of the 10 minute numpy compilation that made my computer sound like a hairdryer" ;-)</span>
<span class="comment-copy">@NielsBom: <a href="https://pypi.python.org/pypi/numpy" rel="nofollow noreferrer"><code>pip install numpy</code> uses binary wheels now on most platforms (no compilation)</a>. Obviously, other binary installation options were available even before that.</span>
<span class="comment-copy">This was my initial attempt, it can probably be done, but it seems to be a lot of effort to get the formatting perfect.</span>
<span class="comment-copy">this is discussed on meta <a href="https://meta.stackoverflow.com/questions/381571/answer-that-doesnt-answer-the-question" title="answer that doesnt answer the question">meta.stackoverflow.com/questions/381571/…</a></span>
