<div class="post-text" itemprop="text">
<p>I have a dot-matrix printer LX-300 connected to my computer through the network. How do I send a raw string with ESCP characters directly to my printer in Python?</p>
<p>The computer is connected to the printer through another computer. I need to send a raw string because LX-300 image printing result is blurry.</p>
</div>
<div class="post-text" itemprop="text">
<h2>The Problem</h2>
<p>To send data down this route:</p>
<p>Client computer ---&gt; Server (Windows machine) ---&gt; printer (dot-matrix)</p>
<p>...and to <em>not</em> let Windows mess with the data; instead to send the raw data, including printer control codes, straight from the client computer.</p>
<h2>My Solution</h2>
<p>Here's how I solved a near-identical problem for a small in-house database application:</p>
<p>Step 1) Make the printer network-accessible without Windows getting its fingers in the data routed to it. I accomplished this by installing the printer using the "Generic/Text Only" driver, then installing 
<a href="https://sourceforge.net/projects/rawprintserver/" rel="nofollow">RawPrintServer</a> on the Windows machine connected to the printer.</p>
<p>Step 2) Send raw data over the network to the TCP/IP port specified when you set up RawPrintServer (default is 9100). There are various ways to do that, here's what I did:</p>
<pre><code>data = b"\x1B@A String To Print\x1B@" # be sure to use the right codes for your printer
ip_addr = 123.123.123.123 # address of the machine with the printer
port = 9100 # or whatever you set it to
s = socket.socket()
try:
    s.connect((ip_addr, port))
    s.send(data)
except:
    # deal with the error
finally:
    s.close()
</code></pre>
<h2>Background</h2>
<p>I thought about the problem in two parts:</p>
<ol>
<li>Client machine: spitting out the data I need from Python with the correct formatting/control codes for my printer, and sending it across the network</li>
<li>Print server machine: transmitting the data to the locally connected printer</li>
</ol>
<p>Number 1 is the easy part. There are actually <a href="https://pypi.python.org/pypi?%3Aaction=search&amp;term=escpos&amp;submit=search" rel="nofollow">some libraries in PyPI</a> that may help with all the printer codes, but I found most of them are aimed at the little point-of-sale label printers, and were of limited use to me. So I just hard-coded what I needed into my Python program.</p>
<p>Of course, the way you choose to solve number 2 will effect how you send the data from Python. I chose the TCP/IP route to avoid dealing with Samba and Windows print issues.</p>
<p>As you probably discovered, Windows normally tries very hard to convert whatever you want to print to a bitmap and run the printer in graphics mode. We can use the generic driver and dump the data straight into the (local) printer port in order to prevent this.</p>
<p>The missing link, then, is getting from the network to the local printer port on the machine connected to the printer. Again, there are various ways to solve this. You could attempt to access the Windows printer share in some way. If you go the TCP/IP route like I did, you could write your own print server in Python. In my case, the RawPrintServer program "just worked" so I didn't investigate any further. Apparently all it does is grab incoming data from TCP port 9100 and shove it into the local printer port. Obviously you'll have to be sure the firewall isn't blocking the incoming connections on the print server machine. This method does not require the printer to be "shared" as far as Windows is concerned.</p>
<p>Depending on your situation (if you use DHCP), you might need to do some extra work to get the server's IP address in Python. In my case, I got the IP for free because of the peculiarity of my application.</p>
<p>This solution seems to be working out very well for me. I've got an old Panasonic printer running in Epson ESC/P compatibility mode connected to a Windows 7 machine, which I can print to from any other computer on the local network. Incidentally, this general idea should work regardless of what OS the client computer is running.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ultimately, you will need and want to write your own wrapper/script to do this. And since you are using a distribution of Linux, this is relatively easy.</p>
<p>On a Linux OS, the simplest way to issue a print job is to open a <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer" title="subprocess">subprocess</a> to the <a href="http://www.computerhope.com/unix/ulpr.htm" rel="nofollow noreferrer">lpr</a>. Generally, using <code>lpr</code> lets you access the printer without the need to be logged in as root (being a superuser), which is desirable considering the amount of damage that can be done while logged in as a "superuser".</p>
<p>Code like the following:</p>
<pre><code>import subprocess
lpr = subprocess.Popen("/usr/bin/lpr", stdin=subprocess.PIPE)
lpr.stdin.write(data_to_send_to_printer)
</code></pre>
<p>Should be a good jumping off point for you. Essentially, this code should allow you to accomplish what you need.</p>
<p><strong>Be careful though; depending on your privilege levels, a call to open a subprocess might need root level/Superuser permissions.</strong></p>
<p>Subprocesses generally <a href="https://stackoverflow.com/questions/22233454/will-a-python-subprocess-popen-call-inherit-root-privs-if-the-calling-script-i" title="inherit">inherit</a> the User IDs and access rights by the user that is running the command. For example, if the subprocess is created by a root user, then you will need root user/Superuser rights to access that subprocess.</p>
<p>For more information, check out the hyperlinks I've included in the post.</p>
<p>Good luck!</p>
</div>
<span class="comment-copy">Is the computer running python connected directly to the printer? How are the computers and printers connected? What is the method of communication you are using? Are you sure of your problem -- Can you explain how you've determined sending a raw string in Python to the printer will fix the blurry image?</span>
<span class="comment-copy">@Gator_Python It isn't connected directly, I use CUPS samba connection over network to a pc running on windows 7 on which the printer is directly connected. I am convinced because of my experience. I've tried both raw string printing and image printing and the raw string printing image quality and speed is far more superior. Not to mention the ESC/P capabilities to directly control the printer behavior.</span>
<span class="comment-copy">Duude, you da man! Thanks a lot.</span>
<span class="comment-copy">How do I specify which printer I use?</span>
<span class="comment-copy">I hyperlinked the page for the <code>lpr</code> command. If using the <code>lpr</code> command via a Terminal, pass <code>lpr</code> the <code>-P</code> parameter with the path to the printer. The <code>lpr</code> page should have most of the information needed to get you started. It also has a "quick start" guide, so-to-speak.</span>
<span class="comment-copy">So does this code work? <code>lpr = subprocess.Popen("/usr/bin/lpr -P lx300", stdin=subprocess.PIPE)</code>. I am not sure how to pass the parameter to the subprocess.</span>
<span class="comment-copy">You will need to check the printers under the <code>/usr/bin/</code> directory. <code>lpr</code> can also be used as a command line command which is where the <code>-P</code> comes into play. If you don't need to write a custom program, you could save out the data you want to print into a raw text file and then using the following in a Terminal should send the (raw) data from the file to the printer <code>cat &lt;Path_To_Text_File_Here&gt;.txt  |  lpr -P &lt;Printer_Path_Here&gt;</code> using cat first and piping then piping to lpr, which will read the contents from standard input which should give you the desired results.</span>
<span class="comment-copy">I've tried that using the os module, but it doesn't allow me to use the printer default font, and I can't control the font it uses. Suppose the printer name is lx300 will <code>lpr = subprocess.Popen("/usr/bin/lpr -P lx300", stdin=subprocess.PIPE)</code> work then?</span>
