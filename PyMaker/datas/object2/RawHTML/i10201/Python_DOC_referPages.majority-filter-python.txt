<div class="post-text" itemprop="text">
<p>I am trying to create a function, which will replace a list element with the value that occurs maximum number of times adjacent to it within a given frame of say x elements.</p>
<p>Eg- </p>
<ul>
<li><p>A=[2,2,2,3,2,1,4,4,4,4,5,5,5,5,6,7,7,7,8,8,8,8]</p></li>
<li><p>If x=5, the modified list should be- 
A=[2,2,2,2,2,4,4,4,4,4,5,5,5,5,5,7,7,7,8,8,8,8]</p></li>
</ul>
<hr/>
<p>I have done the naive sliding window implementation. 
Is there any built in function or <em>pythonic</em> way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here are three implementation of a naive sliding window 1D majority filter.</p>
<p>The first one uses a "traditional" <code>for</code> loop, the second is virtually the same algorithm, but using a generator expression in a list comprehension. These both determine the majority element in a given window using</p>
<pre><code>max(set(a), key=a.count)
</code></pre>
<p>where <code>a</code> is the window. We first create a set to get the unique elements in <code>a</code> and then find which of those elements has the highest count in <code>a</code>.</p>
<p>The third version uses the <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a>, which is enhanced dictionary, to find the majority element.</p>
<pre><code>#!/usr/bin/env python3

from collections import Counter

def majority_filter_traditional(seq, width):
    offset = width // 2
    seq = [0] * offset + seq
    result = []
    for i in range(len(seq) - offset):
        a = seq[i:i+width]
        result.append(max(set(a), key=a.count))
    return result

def majority_filter_listcomp(seq, width):
    offset = width // 2
    seq = [0] * offset + seq
    return [max(set(a), key=a.count) 
        for a in (seq[i:i+width] for i in range(len(seq) - offset))]

def majority_filter_counter(seq, width):
    offset = width // 2
    seq = [0] * offset + seq
    return [Counter(a).most_common(1)[0][0]
        for a in (seq[i:i+width] for i in range(len(seq) - offset))]

majority_filter = majority_filter_listcomp

seq = [2, 2, 2, 3, 2, 1, 4, 4, 4, 4, 5, 5, 5, 5, 6, 7, 7, 7, 8, 8, 8, 8]
print(seq)
print(majority_filter(seq, 5))
</code></pre>
<p><strong>output</strong></p>
<pre><code>[2, 2, 2, 3, 2, 1, 4, 4, 4, 4, 5, 5, 5, 5, 6, 7, 7, 7, 8, 8, 8, 8]
[2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 7, 7, 7, 8, 8, 8, 8]
</code></pre>
<p>The above code will also work on Python 2. The Counter class is not in the standard library on versions earlier than Python 2.7, however there is <a href="http://code.activestate.com/recipes/576611-counter-class/" rel="nofollow">code available for Counter</a> which will work on Python 2.5.</p>
</div>
<span class="comment-copy">How do you get 5 x 2s and 5 x 5s?</span>
<span class="comment-copy">@JonClements: I assume the 6 gets converted to a 5, but what happened to the 1 is a bit of a mystery.</span>
<span class="comment-copy">I don't understand what you are seeking. You drop (1, 3, 6) and add (2, 5) using x = 5  Please give your implementation so we can understand you better.</span>
<span class="comment-copy">I think you have a typo in your output list since it's not the same length as the input list. As I mentioned earlier, the 1 seems to have disappeared. What's wrong with your naive sliding window implementation? I don't think there's a function in the standard modules to do this, but it's easy enough to do it in a couple of lines with a generator expression in a list comprehension.</span>
<span class="comment-copy">BTW, you really should have pasted your code into the question. You probably got most of those downvotes due to lack of code, and because people couldn't understand exactly what you wanted. If you'd shown some code it would have been a lot easier to figure out what you're trying to do (despite the typo that was originally in your expected output list). Also, seeing code gives people a rough idea of your coding skills, which can help people in formulating an answer that you'll understand. And when you post your own code it shows that you've made a sincere attempt to solve the problem yourself.</span>
<span class="comment-copy">thanks a lot! learnt so many new things today. i didn't even know about the max(iter, key) function. Read up on high performance containers also.  python is truly an amazing language.</span>
<span class="comment-copy">This is not the same implementation as mentioned in <a href="http://pro.arcgis.com/en/pro-app/tool-reference/spatial-analyst/majority-filter.htm" rel="nofollow noreferrer">pro.arcgis.com/en/pro-app/tool-reference/spatial-analyst/â€¦</a>. It is not taking all neighbors into account (one in the row above and below).</span>
<span class="comment-copy">@Abhijay The OP wanted a 1D filter. If you need help with a 2D filter please ask a new question.</span>
