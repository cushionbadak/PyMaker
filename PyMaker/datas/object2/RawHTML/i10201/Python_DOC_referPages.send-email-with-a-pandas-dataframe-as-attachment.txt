<div class="post-text" itemprop="text">
<p>I have a pandas dataframe that I am looking to convert into an xlsx and attach to an email. I can send emails based on outlook(this is the only way I can do it). I am able to convert the dataframe into an xlsx and save it on my drive and afterwards send it as attachment but I am looking to attach it directly without having to save it on my drive. see bellow my function to send emails:</p>
<pre><code>def email():
olMailItem = 0x0
obj = win32com.client.Dispatch("Outlook.Application")
newMail = obj.CreateItem(olMailItem)
newMail.Subject ="FRANCE SO"
newMail.Body =' '
newMail.To = "email adress"
newMail.Attachments.Add(attachment)
newMail.Send()
return
</code></pre>
<p>attachment is the dataframe that has been transformed into xlsx</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried to play with the <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer"><code>io</code></a> module in Python 3? It allows you to use streams as file-like objects, so that APIs that expect a file can read from or save their content to the stream instead.</p>
<p>That works nicely, using a <code>StringIO</code> along with <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html" rel="nofollow noreferrer"><code>pandas.DataFrame.to_csv</code></a>:</p>
<pre class="lang-python prettyprint-override"><code>import io

def export_csv(df):
  with io.StringIO() as buffer:
    df.to_csv(buffer)
    return buffer.getvalue()
</code></pre>
<p>That works, because <code>to_csv</code> expects a string (interpreted as a path) or a file handle, and <code>StringIO</code> can be used like a file handle. Unfortunately, <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_excel.html" rel="nofollow noreferrer"><code>pandas.DataFrame.to_excel</code></a> works with either a string (interpreted as a path) <em>or an <code>ExcelWriter</code></em>. In that case, we need to create the <code>ExcelWriter</code> ourselves, and wrap a <code>BytesIO</code> with it.</p>
<pre class="lang-python prettyprint-override"><code>import io
import pandas as pd

def export_excel(df):
  with io.BytesIO() as buffer:
    writer = pd.ExcelWriter(buffer)
    df.to_excel(writer)
    writer.save()
    return buffer.getvalue()
</code></pre>
<p>I am not familiar with the Outlook Python tools for sending emails, I use SMTP:</p>
<pre class="lang-python prettyprint-override"><code>from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import smtplib

SEND_FROM = 'noreply@example.com'
EXPORTERS = {'dataframe.csv': export_csv, 'dataframe.xlsx': export_excel}

def send_dataframe(send_to, subject, body, df):
  multipart = MIMEMultipart()
  multipart['From'] = SEND_FROM
  multipart['To'] = send_to
  multipart['Subject'] = subject
  for filename in EXPORTERS:    
    attachment = MIMEApplication(EXPORTERS[filename](df))
    attachment['Content-Disposition'] = 'attachment; filename="{}"'.format(filename)
    multipart.attach(attachment)
  multipart.attach(MIMEText(body, 'html'))
  s = smtplib.SMTP('localhost')
  s.sendmail(SEND_FROM, send_to, multipart.as_string())
  s.quit()
</code></pre>
<p>I hope this helps, good luck!</p>
</div>
<span class="comment-copy">Unfortunately, for me, the only way has been to save to the drive first before Outlook can attach the file. However, if you don't want to keep the file after you attach and send, you can just delete the file after you send it.</span>
<span class="comment-copy">how would you delete it straight away</span>
<span class="comment-copy">So after sending, just use <code>os.remove(attachment)</code>. Make sure to <code>import os</code> first.</span>
<span class="comment-copy">Heres the <a href="https://docs.python.org/2/library/os.html#os.remove" rel="nofollow noreferrer">documentation</a> on <code>os.remove()</code></span>
<span class="comment-copy">If you <i>are</i> creating temporary files, you could use <a href="https://docs.python.org/3.4/library/tempfile.html" rel="nofollow noreferrer"><code>tempfile</code></a> to keep things clean and simple.</span>
