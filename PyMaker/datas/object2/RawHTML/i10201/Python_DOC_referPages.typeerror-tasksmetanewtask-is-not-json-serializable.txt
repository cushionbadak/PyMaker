<div class="post-text" itemprop="text">
<p>I am trying to dump this json - </p>
<pre><code>{'total_run_count': 9, 'task': 'tasks.add', 'enabled': True, 'schedule': {'period': 'seconds', 'every': 3}, 'kwargs': {'max_targets': 100}, 'running': False, 'options': {}, 'delete_key': 'deleted:tasks:meta:newtask', 'name': b'tasks:meta:newtask', 'last_run_at': datetime.datetime(2016, 10, 3, 19, 9, 50, 162098), 'args': ['3', '2'], 'key': 'tasks:meta:newtask'}
</code></pre>
<p>and it fails for the key 'name'. I have decoded it in utf-8 but still not luck. I am getting the following error.</p>
<p>TypeError: 'tasks:meta:newtask' is not JSON serializable</p>
<p>what is not serializable about the above string ? I am clueless.</p>
</div>
<div class="post-text" itemprop="text">
<p>The "name" value in your dict is a <code>bytes</code> object, not string. You have to decode it or you can write your <a href="https://docs.python.org/3/library/json.html#json.JSONEncoder" rel="nofollow">custom JSON encoder</a>:</p>
<pre><code>import json

def default(o):
    if isinstance(o, bytes):
        return o.decode()
    return json.JSONEncoder.default(self, o)

data = {'name': b'tasks:meta:newtask'}
json.JSONEncoder(default=default).encode(data)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Notice how that item is displayed in the dictionary:</p>
<pre><code>'name': b'tasks:meta:newtask'
</code></pre>
<p>That leading <code>b</code> indicates that 'tasks:meta:newtask' is a <em>byte string</em>, not a regular character string.  JSON is telling you that it doesn't know how to handle a byte string object.</p>
<p>Does it really need to be a byte string?  If not, you should convert it to a regular string before calling json dump.</p>
</div>
<span class="comment-copy">try json.dumps(yourObject.__dict__), check answers here <a href="http://stackoverflow.com/questions/10252010/serializing-python-object-instance-to-json" title="serializing python object instance to json">stackoverflow.com/questions/10252010/â€¦</a></span>
<span class="comment-copy">"Still not luck" -- meaning what, <i>exactly</i>? When I try to reproduce this, and have decoded the bytestring, what I then have is the following: <code>TypeError: datetime.datetime(2016, 10, 3, 19, 9, 50, 162098) is not JSON serializable</code> -- which it's indeed not. But that's a different error, and your question should reflect that.</span>
<span class="comment-copy">@Shamik, ...show us <i>how</i> you're trying to decode the object (and then serialize the result), so we can tell that it's done correctly.</span>
<span class="comment-copy">I have a custom decoder inside which i am handling for datetime objects. But somehow even after decoding the byte string i am getting the above error. The error doesn't have the byte,  check .</span>
<span class="comment-copy">@Shamik, <i>show us</i>: Provide a reproducer people who aren't you can run that generates your errors even after your attempts to avoid it. Right now, you're <i>saying</i> that you fixed some relevant issues, but without seeing the details of the implementation, we have no possible way of finding still-outstanding problems. See also <a href="http://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a></span>
<span class="comment-copy">Not the only problem in this data -- at least with Python 3.4.5, <code>datetime.datetime</code> objects aren't JSON-serializable either.</span>
<span class="comment-copy">@CharlesDuffy, that's a good point! It's easy to extend the <code>default</code> function to handle that.</span>
<span class="comment-copy">I have handled it by decoding it in utf-8. If you see the error it doesn't have the leading b.</span>
<span class="comment-copy"><i>I have handled it</i> So you've solved your problem then?  Great!</span>
<span class="comment-copy">@Shamik, if what you're actually trying to JSON-serialize differs from what's given in your question (such as because you're modifying the bytestring to be a character string instead), <i>update the question to reflect the actual data</i> -- but make sure (completely, 100% sure) that it can be reproduced in that state.</span>
