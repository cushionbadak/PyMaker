<div class="post-text" itemprop="text">
<p>I'd like to <strong>automatically</strong> delete a temporary file when my QWidget is destroyed (for example, at the end of the program).</p>
<p>I tried to handle it with the <strong>destroyed</strong> signal, but it doesn't work, my callback function is never executed.</p>
<p>Source code:</p>
<pre><code>import sys
from os import remove
from PyQt5.QtCore import Qt, pyqtSlot
from PyQt5.QtWidgets import QApplication, QWidget


class MyWidget(QWidget):
    def __init__(self):
        super(MyWidget, self).__init__(flags=Qt.Window)
        self.setAttribute(Qt.WA_DeleteOnClose, True)
        with open('temporary_file.txt', 'w') as f:
            f.write("Hello World!")
        self.destroyed.connect(self._on_destroyed)

    @pyqtSlot(name='_on_destroyed')
    def _on_destroyed(self):
        print("Never executed.")
        remove('temporary_file.txt')

app = QApplication(sys.argv)
widget = MyWidget()
widget.show()
sys.exit(app.exec_())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use <a href="http://doc.qt.io/qt-5/qwidget.html#closeEvent" rel="nofollow"><code>closeEvent</code></a> for this:</p>
<pre><code>class MyWidget(QWidget):
    def __init__(self):
        super(MyWidget, self).__init__(flags=Qt.Window)
        self.setAttribute(Qt.WA_DeleteOnClose, True)
        with open('temporary_file.txt', 'w') as f:
            f.write("Hello World!")

    def closeEvent(self, event):
        print('close event')
        remove('temporary_file.txt')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The solution is trivial: replace <code>_on_destroyed</code> with <code>__del__(self)</code>, and remove the slot annotation. That's really all there's to it.</p>
<p>Alas, you don't need to do that. Use a <code>QTemporaryFile</code> member and it will be automatically removed upon destruction.</p>
</div>
<span class="comment-copy">The <code>destroyed</code> signal is emitted after the python part has been removed, so your code can't catch it. Implement the <a href="https://docs.python.org/2/reference/datamodel.html#object.__del__" rel="nofollow noreferrer"><code>__del__</code></a> special Python method instead. Be sure not to throw exceptions from this method though. Alternatively, use the <a href="https://docs.python.org/2/library/tempfile.html" rel="nofollow noreferrer"><code>tempfile</code></a> module</span>
<span class="comment-copy">Do you really need to delete the file when the widget is actually destroyed, rather than just on program exit?</span>
<span class="comment-copy">closeEvent doesn't mean, that widget will be destroyed.</span>
<span class="comment-copy">@DmitrySazonov. I know - that's why I said the OP <b>should</b> use it (i.e. it's the normal way to do cleanup on program exit).</span>
<span class="comment-copy">A widget is not guaranteed to receive a <code>closeEvent</code> before its destructor is called.</span>
<span class="comment-copy">@KubaOber. That's true - I'm assuming it's a top-level widget (as in the OPs example). Anyway, if the OP really needs to do cleanup after the widget has been destroyed, <a href="http://docs.python.org/3/library/atexit.html#module-atexit" rel="nofollow noreferrer">atexit</a> is probably the best solution.</span>
<span class="comment-copy">If you don't want to subclass a widget, or any other QObject, yet track its destruction, you should attach to its <code>destroyed</code> signal. Otherwise, you should implement a destructor, whether in C++ or Python. <code>atexit</code> is not a solution that has has anything to do with object lifetime.</span>
