<div class="post-text" itemprop="text">
<p>My loop seems to iterate over the first letter and then breaks though it's supposed to iterate through each letter in the secretWord, for example, the code bellow is supposed to print out "_pp_e" but instead it only prints "_". I don't understand, what's the problem with that code??</p>
<pre><code>def getGuessedWord(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters and underscores that represents
      what letters in secretWord have been guessed so far.
    '''
    # FILL IN YOUR CODE HERE...
    for letter in secretWord:
        if letter in lettersGuessed:
            return letter
        else:
            return '_'

print(getGuessedWord("apple",  ['e', 'i', 'k', 'p', 'r', 's']))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You <code>return</code> from the function in the first iteration. <code>return</code> <strong>ends</strong> a function, there and then, so the <code>for</code> loop won't continue either.</p>
<p>You need to build up your return value <em>in the function itself</em>. Build up the resulting string one character at a time, by using a list to hold all the characters first then joining those together into one string at the end:</p>
<pre><code>def getGuessedWord(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters and underscores that represents
      what letters in secretWord have been guessed so far.
    '''
    guessed = []
    for letter in secretWord:
        if letter in lettersGuessed:
            guessed.append(letter)
        else:
            guessed.append('_')
    return ''.join(guessed)
</code></pre>
<p>If you are feeling adventurous, you could even make that a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> and do all the work in one line:</p>
<pre><code>def getGuessedWord(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters and underscores that represents
      what letters in secretWord have been guessed so far.
    '''
    return ''.join([l if l in lettersGuessed else '_' for l in secretWord])
</code></pre>
<p>Either version produces the expected output:</p>
<pre><code>&gt;&gt;&gt; print(getGuessedWord("apple",  ['e', 'i', 'k', 'p', 'r', 's']))
_pp_e
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The return keyword exits the calling function. This should do the trick: </p>
<pre><code>def getGuessedWord(secretWord, lettersGuessed):

    result = ''
    for letter in secretWord:
        if letter in lettersGuessed:
            result += letter
        else:
            result += '_'
    return result

print(getGuessedWord("apple",  ['e', 'i', 'k', 'p', 'r', 's']))
</code></pre>
<p>Here, you start with an empty string as the result and either append a letter (if it was included in the list) or an underscore (if it was not), then return the result string.</p>
</div>
<span class="comment-copy">Well, you <code>return</code> from the function in the first iteration. <code>return</code> <b>ends</b> a function, there and then, so the <code>for</code> loop won't continue either.</span>
<span class="comment-copy">you should create a set of results from your loop before determining your answer, as you are shortcircuiting the return, like what Martijn said.</span>
<span class="comment-copy">For educational purposes, you can use list comprehension for this as well: <code>''.join([x if x in lettersGuessed else '_' for x in secretWord])</code></span>
