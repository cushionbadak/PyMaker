<div class="post-text" itemprop="text">
<p>I have a Python script that pauses for user input (using <code>raw_input</code>, recently I created a Django web UI for this script. Now when I execute the script via Django is pauses as it's waiting for input in the backend. </p>
<p>How can I determine if the script was ran from Django or terminal/cmd/etc? I don't want to maintain 2 streams of code, one for web and another one for terminal.</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not use <code>__main__</code>: <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">https://docs.python.org/3/library/<strong>main</strong>.html</a></p>
<pre><code>if __name__ == '__main__':
    print ('running as a script')
else:
    print ('running as a web app')
</code></pre>
<p>Works on both python 2.7 and 3.x</p>
</div>
<div class="post-text" itemprop="text">
<p>Just ask!</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; import sys
&gt;&gt;&gt; os.isatty(sys.stdin.fileno())
True
</code></pre>
<p>if true, you are attached to a console.</p>
</div>
<div class="post-text" itemprop="text">
<p>Explicit is better than implicit. Wrap your interactivity in a function that's called only if the <code>__name__ == "__main__"</code> part was executed. From the django parts, just use it as a library. Most ways of doing these kinds of checks are semi-magical and hence flaky.</p>
</div>
<span class="comment-copy">Why don't you restructure your code a little? The webserver could pass in some placeholder for the optional input, telling whatever you're calling not to ask for further input. The script shouldn't have to care what called it, just what they called it <i>with</i>.</span>
<span class="comment-copy">How about to check for the parent process, if it's a console or the web server?</span>
<span class="comment-copy">It prints 'True' for both terminal (mac OS) and django! (FYI: I have imported the script to views.py and running django on UBuntu).</span>
<span class="comment-copy">@user3784080  Hmmm... I assumed django would deal with its scripts differently.</span>
