<div class="post-text" itemprop="text">
<p>I have the following Python list:</p>
<pre><code>list1 = ['EW:G:B&lt;&lt;LADHFSSFAFFF', 'CB:E:OWTOWTW', 'PP:E:A,A&lt;F&lt;AF', 'GR:A:OUO-1-XXX-EGD:forthyFive:1:HMJeCXX:7', 'SX:F:-111', 'DS:f:115.5', 'MW:AA:0', 'MA:A:0XT:i:0', 'EY:EE:KJERWEWERKJWE']
</code></pre>
<p>I would like to take the entries of this list and create a dictionary of key-values pairs that looks like</p>
<pre><code>dictionary_list1 = {'EW':'G:B&lt;&lt;LADHFSSFAFFF', 'CB':'E:OWTOWTW', 'PP':'E:A,A&lt;F&lt;AF', 'GR':'A:OUO-1-XXX-EGD:forthyFive:1:HMJeCXX:7', 'SX':'F:-111', 'DS':'f:115.5', 'MW':'AA:0', 'MA':'A:0XT:i:0', 'EW':'EE:KJERWEWERKJWE'}
</code></pre>
<p>How does one parse/split the list above <code>list1</code> to do this? My first instinct was to try <code>try1 = list1.split(":")</code>, but then I think it is impossible to retrieve the "key" for this list, as there are multiple colons <code>:</code></p>
<p>What is the most pythonic way to do this? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can specify a maximum number of times to split with the second argument to <a href="https://docs.python.org/3.5/library/stdtypes.html#str.split" rel="nofollow"><code>split</code></a>.</p>
<pre><code>list1 = ['EW:G:B&lt;&lt;LADHFSSFAFFF', 'CB:E:OWTOWTW', 'PP:E:A,A&lt;F&lt;AF', 'GR:A:OUO-1-XXX-EGD:forthyFive:1:HMJeCXX:7', 'SX:F:-111', 'DS:f:115.5', 'MW:AA:0', 'MA:A:0XT:i:0', 'EW:EE:KJERWEWERKJWE']
d = dict(item.split(':', 1) for item in list1)
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(d)
{'CB': 'E:OWTOWTW',
 'DS': 'f:115.5',
 'EW': 'EE:KJERWEWERKJWE',
 'GR': 'A:OUO-1-XXX-EGD:forthyFive:1:HMJeCXX:7',
 'MA': 'A:0XT:i:0',
 'MW': 'AA:0',
 'PP': 'E:A,A&lt;F&lt;AF',
 'SX': 'F:-111'}
</code></pre>
<p>If you'd like to keep track of values for non-unique keys, like <code>'EW:G:B&lt;&lt;LADHFSSFAFFF'</code> and <code>'EW:EE:KJERWEWERKJWE'</code>, you could add keys to a <code>collections.defaultdict</code>:</p>
<pre><code>import collections
d = collections.defaultdict(list)
for item in list1:
    k,v = item.split(':', 1)
    d[k].append(v)
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; pprint.pprint(d)
{'CB': ['E:OWTOWTW'],
 'DS': ['f:115.5'],
 'EW': ['G:B&lt;&lt;LADHFSSFAFFF', 'EE:KJERWEWERKJWE'],
 'GR': ['A:OUO-1-XXX-EGD:forthyFive:1:HMJeCXX:7'],
 'MA': ['A:0XT:i:0'],
 'MW': ['AA:0'],
 'PP': ['E:A,A&lt;F&lt;AF'],
 'SX': ['F:-111']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use <a href="https://docs.python.org/3/library/stdtypes.html#str.partition" rel="nofollow"><code>str.partition</code></a></p>
<pre><code>list1 = ['EW:G:B&lt;&lt;LADHFSSFAFFF', 'CB:E:OWTOWTW', 'PP:E:A,A&lt;F&lt;AF', 'GR:A:OUO-1-XXX-EGD:forthyFive:1:HMJeCXX:7', 'SX:F:-111', 'DS:f:115.5', 'MW:AA:0', 'MA:A:0XT:i:0', 'EW:EE:KJERWEWERKJWE']

d = dict([t for t in x.partition(':') if t!=':'] for x in list1)

# or more simply as TigerhawkT3 mentioned in the comment
d = dict(x.partition(':')[::2] for x in list1)

for k, v in d.items():
    print('{}: {}'.format(k, v))
</code></pre>
<p>Output:</p>
<pre><code>MW: AA:0
CB: E:OWTOWTW
GR: A:OUO-1-XXX-EGD:forthyFive:1:HMJeCXX:7
PP: E:A,A&lt;F&lt;AF
EW: EE:KJERWEWERKJWE
SX: F:-111
DS: f:115.5
MA: A:0XT:i:0
</code></pre>
</div>
<span class="comment-copy">I just noticed you are going to have duplicate keys based on how you are splitting. Your resulting dictionary will end up replacing one of your values for the duplicate key that comes up. For example when you split for <code>EW</code> you will end up replacing one of your values. Is this OK?</span>
<span class="comment-copy">@idjaw That was a copy error on my part. Each key above should be unique. I've edited the above.</span>
<span class="comment-copy">Thanks for clarifying! There are two great solutions below you should look at and consider accepting the one you found the most helpful to your solution.</span>
<span class="comment-copy">Just noticed something, thought I'd make you aware. But, there are duplicate keys that end up coming up based on the data structure provided. So, one of the values for the keys when creating the dictionary will end up getting replaced. Asked OP for clarification.</span>
<span class="comment-copy">@idjaw - That's a good point; I hadn't noticed. If the OP wants to retain all key/value pairs, this might need a <code>collections.defaultdict(list)</code> instead.</span>
<span class="comment-copy">I've found that it's generally more convenient to use <code>partition</code> if you're interested in reusing the delimiter and <code>split</code> if you're not.</span>
<span class="comment-copy">And maybe you could replace <code>[t for t in x.partition(':') if t!=':']</code> with <code>x.partition(':')[::2]</code>?</span>
<span class="comment-copy">@TigerhawkT3 Yeah, that's cleverer. Why can't I come up with such things myself!</span>
