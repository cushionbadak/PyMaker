<div class="post-text" itemprop="text">
<p>Does Python have a recursive sequence generating function? For instance,</p>
<pre><code>def generateSequence(seed, f, n):
    sequence = list(seed)
    for i in range(n):
        sequence.append(f(sequence, i))
    return sequence
</code></pre>
<p>Which may be used like so:</p>
<pre><code>fibSequence = generateSequence([0, 1], lambda x, i: x[-1] + x[-2], 8)
</code></pre>
<p>To produce:</p>
<pre><code>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow"><code>itertools.accumulate</code></a> may meet your needs, but it's return value may be different from what you expect.</p>
<p>For instance:</p>
<pre><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from itertools import accumulate

def callback(seq, i):
    """
        seq: the sequence you will modified
        i: the number of times this function is called
    """
    seq.append(seq[-1] + seq[-2])
    return seq

res = accumulate([[0, 1]] + list(range(1, 8 + 1)), callback)
for item in res:
    print(item)
</code></pre>
<p>The <code>[0, 1]</code> is the init sequence, and the <code>8</code> is the number of times you want to call the <code>callback</code> function. </p>
<p>And the result of above code is this:</p>
<pre><code>In [48]: run test.py
[0, 1]
[0, 1, 1]
[0, 1, 1, 2]
[0, 1, 1, 2, 3]
[0, 1, 1, 2, 3, 5]
[0, 1, 1, 2, 3, 5, 8]
[0, 1, 1, 2, 3, 5, 8, 13]
[0, 1, 1, 2, 3, 5, 8, 13, 21]
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
</code></pre>
<p>The last one is you wanted.</p>
</div>
<span class="comment-copy"><code>for i in range(n): yield f(sequence,i)</code>?</span>
<span class="comment-copy">Well, since <code>seed</code> is a list, <code>sequence = seed</code> doesn't accomplish much, so you can remove that line. And since that list was passed in from outside, maybe there's no need to return it - just save a reference to the list and then pass in that reference instead of using a literal. That takes away some of the "junk," at least.</span>
<span class="comment-copy">I don't understand what you mean by recursive sequence generator.</span>
<span class="comment-copy">Essentially, I want to know if there's an existing library function similar to the one I wrote above that can be used to create recursive sequences (like the Fibonacci sequence).</span>
<span class="comment-copy">And that <code>generateSequence</code> function is not, as far as I can tell, recursive.</span>
