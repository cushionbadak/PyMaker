<div class="post-text" itemprop="text">
<p>How can I speed up this code in python?</p>
<pre><code>while ( norm_corr &gt; corr_len ): 

    correlation = 0.0

    for i in xrange(6):
        for j in xrange(6):
            correlation += (p[i] * T_n[j][i]) * ((F[j] - Fbar) * (F[i] - Fbar))      

    Integral += correlation
    T_n =np.mat(T_n) * np.mat(TT)
    T_n = T_n.tolist()
    norm_corr = correlation / variance 
</code></pre>
<p>Here, TT is a fixed 6x6 matrix, p is a fixed 1x6 matrix, and F is fixed 1x6 matrix. T_n is the nth power of TT. </p>
<p>This while loop might be repeated for 10^4 times.</p>
</div>
<div class="post-text" itemprop="text">
<p>The way to do these things quickly is to use Numpy's built-in functions and operators to perform the operations. Numpy is implemented internally with optimized C code and if you set up your computation properly, it will run much faster.</p>
<p>But leveraging Numpy effectively can sometimes be tricky. It's called "vectorizing" your code - you have to figure out how to express it in a way that acts on whole arrays, rather than with explicit loops.</p>
<p>For example in your loop you have <code>p[i] * T_n[j][i]</code>, which IMHO can be done with a vector-by-matrix multiplication: if v is 1x6 and m is 6x6 then <code>v.dot(m)</code> is 1x6 that computes dot products of <code>v</code> with the columns of <code>m</code>. You can use transposes and reshapes to work in different dimensions, if necessary.</p>
</div>
<span class="comment-copy">Is there a reason you want <code>T_n</code> to be a list of list instead of a numpy matrix?</span>
<span class="comment-copy">Could you please provide some example data for TT, p, F and T_n. Than this would be a working example to be easily tested (of course, we can create random matrices of our own, but the other way your code would be copy &amp; paste executable (if you also include imports...).</span>
<span class="comment-copy">You may also want to ask on <a href="http://codereview.stackexchange.com/">Code Review</a></span>
<span class="comment-copy">Have you tried running a profiler to see which part of the code is slow? <a href="https://docs.python.org/3/library/profile.html" rel="nofollow noreferrer">docs.python.org/3/library/profile.html</a></span>
<span class="comment-copy">Roughly half of the computational time is consumed by the nested loop and the other half is consumed by the matrix multiplication.</span>
<span class="comment-copy">Thank you for your suggestions. I tried two different methods in order to replace nested loop with a single line of code: list comprehensions, and numpy.einsum. However, nested loops were faster compare to both alternatives.</span>
