<div class="post-text" itemprop="text">
<p>I'm trying to return multiple values that are obtained inside a scipy root finding function (scipy.optimize.root).</p>
<p>For example:</p>
<pre><code>B = 1
def testfun(x, B):
    B = x + 7
    return B**2 + 9/18 - x

y = scipy.optimize.root(testfun, 7, (B))
</code></pre>
<p>Is there any way to return the value of B without using globals? </p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not aware of anything SciPy specific, but how about a simple closure:</p>
<pre><code>from scipy import optimize

def testfun_factory():
    params = {}
    def testfun(x, B):
        params['B'] = x + 7
        return params['B']**2 + 9/18 - x
    return params, testfun

params, testfun = testfun_factory()
y = optimize.root(testfun, 7, 1)
print(params['B'])
</code></pre>
<p>Alternatively, an instance of a class with <a href="https://docs.python.org/3/reference/datamodel.html#object.__call__" rel="nofollow"><code>__call__</code></a> could also be passed as the callable.</p>
</div>
<span class="comment-copy">@ wrwrwr Perfect, this did the trick. I'm curious, is there a way to use a closure like this with a variable or list of variables such that they retain their names? In this case, B would be updated rather than params['B']</span>
<span class="comment-copy">Technically, you could probably extend <a href="http://stackoverflow.com/questions/31675756/temporarily-unpack-dictionary#answer-31675967">this</a> to update the dictionary in <code>__exit__</code>. For simplicity, just use <code>B</code> in place of <code>params['B']</code> and update the dictionary before the inner return. You can also use a namespace (<code>class Params: pass</code>) or a <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer"><code>namedtuple</code></a> instead of the <code>dict</code> to shorten the notation to <code>params.B</code>.</span>
