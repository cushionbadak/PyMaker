<div class="post-text" itemprop="text">
<p>Python Version 3.5</p>
<p>I'm trying to make an API call to configure a device using json as the format. Some of the json will vary depending on the desired naming, so I need to call a variable in the string. I am able to accomplish this using the old style <code>%s... % (variable)</code>, but not with the new style <code>{}... .format(variable)</code>.</p>
<p>Failed EX: </p>
<pre><code>(Testing with {"fvAp":{"attributes":{"name":(variable)}}})

a = "\"app-name\""

app_config = ''' { "fvAp": { "attributes": { "name": {} }, "children": [ { "fvAEPg": { "attributes": { "name": "app" }, "children": [ { "fvRsBd": { "attributes": { "tnFvBDName": "default" }, } } ] } }, { "fvAEPg": { "attributes": { "name": "db" }, "children": [ { "fvRsBd": { "attributes": { "tnFvBDName": "default" }, } } ] } } ] } } '''.format(a)

print(app_config)
</code></pre>
<blockquote>
<p>Traceback (most recent call last): File "C:/..., line 49, in '''.format('a') KeyError: '\n "fvAp"'</p>
</blockquote>
<p>Working EX:</p>
<pre><code>a = "\"app-name\""

app_config = ''' { "fvAp": { "attributes": { "name": %s }, "children": [ { "fvAEPg": { "attributes": { "name": "app" }, "children": [ { "fvRsBd": { "attributes": { "tnFvBDName": "default" }, } } ] } }, { "fvAEPg": { "attributes": { "name": "db" }, "children": [ { "fvRsBd": { "attributes": { "tnFvBDName": "default" }, } } ] } } ] } } ''' % a

print(app_config)
</code></pre>
<p>How do I get this to work using <code>str.format</code> method?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="noreferrer">Format String Syntax</a> section says:</p>
<blockquote>
<p>Format strings contain “replacement fields” surrounded by curly braces <code>{}</code>. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output. If you need to include a brace character in the literal text, it can be escaped by doubling: <code>{{</code> and <code>}}</code>.</p>
</blockquote>
<p>So if you want to use <code>.format</code> method, you need to escape all JSON curly braces in your template string:</p>
<pre><code>&gt;&gt;&gt; '{{"fvAp": {{"attributes": {{"name": {}}}}}}}'.format('"app-name"')
'{"fvAp": {"attributes": {"name": "app-name"}}}'
</code></pre>
<p>That looks really bad.</p>
<p>There's a better way to do that with <a href="https://docs.python.org/3/library/string.html#template-strings" rel="noreferrer"><code>string.Template</code></a>:</p>
<pre><code>&gt;&gt;&gt; from string import Template
&gt;&gt;&gt; t = Template('{"fvAp": {"attributes": {"name": "${name}"}}')
&gt;&gt;&gt; t.substitute(name='StackOverflow')
'{"fvAp": {"attributes": {"name": "StackOverflow"}}'
</code></pre>
<p>Though I suggest you to abandon the idea to generate configs this way altogether and use a factory function and <a href="https://docs.python.org/3/library/json.html#json.dumps" rel="noreferrer"><code>json.dumps</code></a> instead:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; def make_config(name):
...     return {'fvAp': {'attributes': {'name': name}}}
&gt;&gt;&gt; app_config = make_config('StackOverflow')
&gt;&gt;&gt; json.dumps(app_config)
'{"fvAp": {"attributes": {"name": "StackOverflow"}}}'
</code></pre>
</div>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/5466451/how-can-i-print-a-literal-characters-in-python-string-and-also-use-format">How can I print a literal "{}" characters in python string and also use .format on it?</a></span>
