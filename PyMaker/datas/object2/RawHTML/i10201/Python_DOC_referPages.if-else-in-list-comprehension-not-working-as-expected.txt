<div class="post-text" itemprop="text">
<p>How can I do the following in Python?</p>
<pre><code>row = [unicode(x.strip()) for x in row if x is not None else '']
</code></pre>
<p>Essentially:</p>
<ol>
<li>replace all the Nones with empty strings, and then</li>
<li>carry out a function.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can totally do that, it's just an ordering issue:</p>
<pre><code>[unicode(x.strip()) if x is not None else '' for x in row]
</code></pre>
<p>In general,</p>
<pre><code>[f(x) if condition else g(x) for x in sequence]
</code></pre>
<p>And, for list comprehensions with <code>if</code> conditions only,</p>
<pre><code>[f(x) for x in sequence if condition]
</code></pre>
<p>Note that this actually uses a different language construct, a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">conditional expression</a>, which itself is not part of the <a href="https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries" rel="nofollow noreferrer">comprehension syntax</a>, while the <code>if</code> after the <code>for…in</code> is part of list comprehensions and used to <em>filter</em> elements from the source iterable.</p>
<hr/>
<p>Conditional expressions can be used in all kinds of situations where you want to choose between two expression values based on some condition. This does the same as the <a href="https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="nofollow noreferrer">ternary operator <code>?:</code> that exists in other languages</a>. For example:</p>
<pre><code>value = 123
print(value, 'is', 'even' if value % 2 == 0 else 'odd')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way:</p>
<pre><code>def change(f):
    if f is None:
        return unicode(f.strip())
    else:
        return ''

row = [change(x) for x in row]
</code></pre>
<p>Although then you have:</p>
<pre><code>row = map(change, row)
</code></pre>
<p>Or you can use a lambda inline.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is another illustrative example:</p>
<pre><code>&gt;&gt;&gt; print(", ".join(["ha" if i else "Ha" for i in range(3)]) + "!")
Ha, ha, ha!
</code></pre>
<p>It exploits the fact that <code>if i</code> evaluates to <code>False</code> for <code>0</code> and to <code>True</code> for all other values generated by the function <code>range()</code>. Therefore the list comprehension evaluates as follows:</p>
<pre><code>&gt;&gt;&gt; ["ha" if i else "Ha" for i in range(3)]
['Ha', 'ha', 'ha']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The specific problem has already been solved in previous answers, so I will address the general idea of using conditionals inside list comprehensions.</p>
<p>Here is an example that shows how conditionals can be written inside a list comprehension:</p>
<pre><code>X = [1.5, 2.3, 4.4, 5.4, 'n', 1.5, 5.1, 'a']     # Original list

# Extract non-strings from X to new list
X_non_str = [el for el in X if not isinstance(el, str)]  # When using only 'if', put 'for' in the beginning

# Change all strings in X to 'b', preserve everything else as is
X_str_changed = ['b' if isinstance(el, str) else el for el in X]  # When using 'if' and 'else', put 'for' in the end
</code></pre>
<p>Note that in the first list comprehension for <code>X_non_str</code>, the order is: </p>
<blockquote>
<p><em>value</em> <strong>for</strong> <em>expression1</em> <strong>if</strong> <em>expression2</em></p>
</blockquote>
<p>and in the last list comprehension for <code>X_str_changed</code>, the order is:</p>
<blockquote>
<p><em>value1</em> <strong>if</strong> <em>expression1</em> <strong>else</strong> <em>value2</em> <strong>for</strong> <em>expression2</em></p>
</blockquote>
<p>I always find it hard to remember that <em>value1</em> has to be before <strong>if</strong> and <em>value2</em> has to be after <strong>else</strong>. My head wants both to be either before or after. </p>
<p>I guess it is designed like that because it resembles normal language, e.g. "I want to stay inside <strong>if</strong> it rains, <strong>else</strong> I want to go outside"</p>
</div>
<div class="post-text" itemprop="text">
<p>The other solutions are great for a single <code>if</code> / <code>else</code> construct. However, ternary statements within list comprehensions are arguably difficult to read.</p>
<p>Using a function aids readability, but such a solution is difficult to extend or adapt in a workflow where the mapping is an input. A dictionary can alleviate these concerns:</p>
<pre><code>row = [None, 'This', 'is', 'a', 'filler', 'test', 'string', None]

d = {None: '', 'filler': 'manipulated'}

res = [d.get(x, x) for x in row]

print(res)

['', 'This', 'is', 'a', 'manipulated', 'test', 'string', '']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code># coding=utf-8

def my_function_get_list():
    my_list = [0, 1, 2, 3, 4, 5]

    # You may use map() to convert each item in the list to a string, 
    # and then join them to print my_list

    print("Affichage de my_list [{0}]".format(', '.join(map(str, my_list))))

    return my_list


my_result_list = [
   (
       number_in_my_list + 4,  # Condition is False : append number_in_my_list + 4 in my_result_list
       number_in_my_list * 2  # Condition is True : append number_in_my_list * 2 in my_result_list
   )

   [number_in_my_list % 2 == 0]  # [Condition] If the number in my list is even

   for number_in_my_list in my_function_get_list()  # For each number in my list
]

print("Affichage de my_result_list [{0}]".format(', '.join(map(str, my_result_list))))
</code></pre>
<p>(venv) $ python list_comp.py <br/>
Affichage de my_list [0, 1, 2, 3, 4, 5] <br/>
Affichage de my_result_list [0, 5, 4, 7, 8, 9]</p>
<p>So, for you:
<code>row = [('', unicode(x.strip()))[x is not None] for x in row]</code></p>
</div>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/2951701/is-it-possible-to-use-else-in-a-python-list-comprehension">Is it possible to use 'else' in a python list comprehension?</a></span>
<span class="comment-copy">Note that the if/else here is now "ternary operator" syntax and not list comprehension syntax.</span>
<span class="comment-copy">That's why I prefer to put the ternary operator in brackets, it makes it clearer that it's just a normal expression, not a comprehension.</span>
<span class="comment-copy">So the trick is "In list compression I write if before for then I have to add else part too". because if my <code>l = [ 2, 3, 4, 5]</code> then <code>[x if x % 2 == 0 for x in l]</code> give me error whereas <code>[x if x % 2 == 0 else 200 for x in l]</code> works.  Yes I know to filter it I should write <code>[ x for x in l if x % 2 == 0]</code>. Sorry for botheration. Thanks for your  answer.</span>
<span class="comment-copy">The <a href="http://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="nofollow noreferrer">python docs mention the ternary operator</a>. Note that it requires the else, or it doesn't work.</span>
<span class="comment-copy">@Phani Yes, it’s still a list comprehension, just with a conditional in its expression.</span>
<span class="comment-copy">This is also a good (maybe only) technique to use when you have to handle possible exceptions from the <code>if</code> expression or code in its or the <code>else</code>s statement block. The accepted answer is better for simple cases.</span>
<span class="comment-copy">This is much easier to read than using it in a list comprehension.</span>
<span class="comment-copy">Very nice......</span>
<span class="comment-copy">This is a cool pattern! Thanks for sharing! Dict usage in Python can be so deep and surprising!</span>
