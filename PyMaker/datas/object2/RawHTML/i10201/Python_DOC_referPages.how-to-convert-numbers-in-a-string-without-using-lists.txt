<div class="post-text" itemprop="text">
<p>My prof wants me to create a function that return the sum of numbers in a string but without using any lists or list methods.</p>
<p>The function should look like this when operating:</p>
<pre><code>&gt;&gt;&gt; sum_numbers('34 3 542 11')
    590
</code></pre>
<p>Usually a function like this would be easy to create when using lists and list methods. But trying to do so without using them is a nightmare.</p>
<p>I tried the following code but they don't work:</p>
<pre><code> &gt;&gt;&gt; def sum_numbers(s):
    for i in range(len(s)):
        int(i)
        total = s[i] + s[i]
        return total


&gt;&gt;&gt; sum_numbers('1 2 3')
'11'
</code></pre>
<p>Instead of getting 1, 2, and 3 all converted into integers and added together, I instead get the string '11'. In other words, the numbers in the string still have not been converted to integers.</p>
<p>I also tried using a <code>map()</code> function but I just got the same results:</p>
<pre><code>&gt;&gt;&gt; def sum_numbers(s):
    for i in range(len(s)):
        map(int, s[i])
        total = s[i] + s[i]
        return total


&gt;&gt;&gt; sum_numbers('1 2 3')
'11'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Totally silly of course, but for fun:</p>
<pre><code>s = '34 3 542 11'

n = ""; total = 0
for c in s:
    if c == " ":
        total = total + int(n)
        n = ""
    else:
        n = n + c
# add the last number
total = total + int(n)

print(total)
&gt; 590
</code></pre>
<p>This assumes all characters (apart from whitespaces) are figures.</p>
</div>
<div class="post-text" itemprop="text">
<p>You've definitely put some effort in here, but one part of your approach definitely won't work as-is: you're iterating over the <em>characters</em> in the string, but you keep trying to treat each character as its own number. I've written a (very commented) method that accomplishes what you want without using any lists or list methods:</p>
<pre><code>def sum_numbers(s):
    """
    Convert a string of numbers into a sum of those numbers.

    :param s: A string of numbers, e.g. '1 -2 3.3 4e10'.
    :return: The floating-point sum of the numbers in the string.
    """
    def convert_s_to_val(s):
        """
        Convert a string into a number. Will handle anything that
        Python could convert to a float.

        :param s: A number as a string, e.g. '123' or '8.3e-18'.
        :return: The float value of the string.
        """
        if s:
            return float(s)
        else:
            return 0
    # These will serve as placeholders.
    sum = 0
    current = ''
    # Iterate over the string character by character.
    for c in s:
        # If the character is a space, we convert the current `current`
        # into its numeric representation.
        if c.isspace():
            sum += convert_s_to_val(current)
            current = ''
        # For anything else, we accumulate into `current`.
        else:
            current = current + c
    # Add `current`'s last value to the sum and return.
    sum += convert_s_to_val(current)
    return sum
</code></pre>
<hr/>
<p>Personally, I would use this one-liner, but it uses <code>str.split()</code>:</p>
<pre><code>def sum_numbers(s):
    return sum(map(float, s.split()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No lists were used (nor harmed) in the production of this answer:</p>
<pre><code>def sum_string(string):
    total = 0

    if len(string):
        j = string.find(" ") % len(string) + 1
        total += int(string[:j]) + sum_string(string[j:])

    return total
</code></pre>
<p>If the string is noisier than the OP indicates, then this should be more robust:</p>
<pre><code>import re

def sum_string(string):
    pattern = re.compile(r"[-+]?\d+")

    total = 0

    match = pattern.search(string)

    while match:

        total += int(match.group())

        match = pattern.search(string, match.end())

    return total
</code></pre>
<p><strong>EXAMPLES</strong></p>
<pre><code>&gt;&gt;&gt; sum_string('34 3 542 11')
590
&gt;&gt;&gt; sum_string('   34    4   ')
38
&gt;&gt;&gt; sum_string('lksdjfa34adslkfja4adklfja')
38
&gt;&gt;&gt; # and I threw in signs for fun
... 
&gt;&gt;&gt; sum_string('34 -2 45 -8 13')
82
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to be able to handle floats and negative numbers:</p>
<pre><code>def sum_numbers(s):
    sm = i = 0
    while i &lt; len(s):
        t = ""
        while  i &lt; len(s) and not s[i].isspace():
            t += s[i]
            i += 1
        if t:
            sm += float(t)
        else:
            i += 1
    return sm
</code></pre>
<p>Which will work for all cases:</p>
<pre><code>In [9]: sum_numbers('34 3 542 11')
Out[9]: 590.0

In [10]: sum_numbers('1.93 -1 23.12 11')
Out[10]: 35.05

In [11]: sum_numbers('')
Out[11]: 0

In [12]: sum_numbers('123456')
Out[12]: 123456.0
</code></pre>
<p>Or a variation taking slices:</p>
<pre><code>def sum_numbers(s):
    prev = sm = i = 0
    while i &lt; len(s):
        while i &lt; len(s) and not s[i].isspace():
            i += 1
        if i &gt; prev:
            sm += float(s[prev:i])
            prev = i
        i += 1
    return sm
</code></pre>
<p>You could also use <em>itertools.groupby</em> which uses no lists, using a set of allowed chars to group by:</p>
<pre><code>from itertools import groupby


def sum_numbers(s):
    allowed = set("0123456789-.")
    return sum(float("".join(v)) for k,v in groupby(s, key=allowed.__contains__) if k)
</code></pre>
<p>which gives you the same output:</p>
<pre><code>In [14]: sum_numbers('34 3 542 11')
Out[14]: 590.0

In [15]: sum_numbers('1.93 -1 23.12 11')
Out[15]: 35.05

In [16]: sum_numbers('')
Out[16]: 0

In [17]: sum_numbers('123456')
Out[17]: 123456.0
</code></pre>
<p>Which if you only have to consider positive ints could just use <em>str.isdigit</em> as the key:</p>
<pre><code>def sum_numbers(s):
    return sum(int("".join(v)) for k,v in groupby(s, key=str.isdigit) if k)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>def sum_numbers(s):
    sum = 0
    #This string will represent each number
    number_str = ''
    for i in s:
        if i == ' ':
            #if it is a whitespace it means
            #that we have a number so we incease the sum
            sum += int(number_str)
            number_str = ''
            continue
        number_str += i
    else:
        #add the last number
        sum += int(number_str)
    return sum
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could write a generator:</p>
<pre><code>def nums(s):
    idx=0
    while idx&lt;len(s):
        ns=''
        while idx&lt;len(s) and s[idx].isdigit():
            ns+=s[idx]
            idx+=1
        yield int(ns)
        while idx&lt;len(s) and not s[idx].isdigit():
            idx+=1

&gt;&gt;&gt; list(nums('34 3 542 11'))
[34, 3, 542, 11]
</code></pre>
<p>Then just sum that:</p>
<pre><code>&gt;&gt;&gt; sum(nums('34 3 542 11')) 
590
</code></pre>
<p>or, you could use <code>re.finditer</code> with a regular expression and a generator construction:</p>
<pre><code>&gt;&gt;&gt; sum(int(m.group(1)) for m in re.finditer(r'(\d+)', '34 3 542 11'))
590
</code></pre>
<p>No lists used...</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def sum_numbers(s):
    total=0
    gt=0 #grand total
    l=len(s)
    for i in range(l):
        if(s[i]!=' '):#find each number
            total = int(s[i])+total*10
        if(s[i]==' ' or i==l-1):#adding to the grand total and also add the last number
            gt+=total
            total=0
    return gt

print(sum_numbers('1 2 3'))
</code></pre>
<p>Here each substring is converted to number and added to grant total</p>
</div>
<div class="post-text" itemprop="text">
<p>If we omit the fact <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a> is <a href="https://stackoverflow.com/questions/1832940/is-using-eval-in-python-a-bad-practice">evil</a>, we can solve that problem with it.</p>
<pre><code>def sum_numbers(s):
    s = s.replace(' ', '+')
    return eval(s)
</code></pre>
<p>Yes, that simple. But i won't put that thing in production.</p>
<p>And sure we need to test that:</p>
<pre><code>from hypothesis import given
import hypothesis.strategies as st


@given(list_num=st.lists(st.integers(), min_size=1))
def test_that_thing(list_num):
    assert sum_numbers(' '.join(str(i) for i in list_num)) == sum(list_num)

test_that_thing()
</code></pre>
<p>And it would raise nothing.</p>
</div>
<span class="comment-copy">When you say "without using any lists or list methods", does this include things like <code>"1 2 3".split()</code>? (Technically <code>str.split()</code> creates a list, but you don't have to store it explicitly.)</span>
<span class="comment-copy">Pretty much. I used split() for a different question that allowed it. On the assignment sheet it says explicitly "Requirement: Do not use lists".</span>
<span class="comment-copy">I provided an answer (which I think addresses all your issues!). But I wanted to comment about your use of <code>map</code>. <code>map</code> takes a function and an iterable (like a list) and returns a list where each element of the list had the function applied to it. Imagine a function <code>def add_one(x): return x + 1</code>, then doing <code>map(add_one, [1, 2, 3])</code> would return <code>[2, 3, 4]</code>.</span>
<span class="comment-copy">@PierceDarragh, in Python3, <code>map()</code> doesn't return a list any more than <code>range()</code> does -- why pick on it?  I agree that using <code>map()</code> is not in the spirit of the exercise, but then again, I feel that way about <code>range()</code>, <code>sum()</code>, and <code>re.finditer()</code> too!</span>
<span class="comment-copy">@cdlane I'm confused... I wasn't talking about whether <code>map</code> is list-like. OP's example tries to use <code>map</code> on a single character... which won't work. So I was explaining how <code>map</code> works, since it seemed to me that OP didn't really know how to use it.</span>
<span class="comment-copy">@PierceDarragh you make use of <code>split()</code>, which returns a list. This means it doesn't meet the objective of the question.</span>
<span class="comment-copy">@roganjosh I don't think you read my actual solution... the little bit at the end was a one-liner to show what <i>I</i> would do.</span>
<span class="comment-copy">@roganjosh no worries! I misread things all the time, haha. :)</span>
<span class="comment-copy">This code will fail if the input is empty or has leading or trailing whitespace. It's better to test with <code>isdigit()</code>.</span>
<span class="comment-copy">@JacobVlijm. If you use <code>isdigit()</code>, all the whitespace issues go away.</span>
<span class="comment-copy">This the only solution that is really robust (although checking for non-digits is perhaps beyond the scope of the question).</span>
<span class="comment-copy">@ekhumoro, it blows up on negative numbers.</span>
<span class="comment-copy">@cdlane I've revised it to account for negative numbers</span>
<span class="comment-copy">@cdlane. Sure - and none of the answers take account of floats, scientific notation or anything else that might reasonably be interpreted as a "number" ;-)</span>
<span class="comment-copy">@ekhumoro since you said that, I updated my submission to account for these things. :)</span>
<span class="comment-copy">Wouldn't list slicing be considered a list method?</span>
<span class="comment-copy">@PierceDarragh,  a slice is an operation on a sequence, including strings.  The string slice returns a substring, not a list.</span>
<span class="comment-copy">That's fair! I guess I chose to avoid anything list-like at all in my solution, since I wasn't sure how far OP's prof wanted them to take the "no lists and no list methods" thing. I like that your solution took a different approach to the problem though!</span>
<span class="comment-copy">This code will fail if the input has leading whitespace, or if there are runs of multiple whitespace characters.</span>
<span class="comment-copy">@ekhumoro, I've added an alternative solution that handles lots of such things the OP didn't mention.</span>
<span class="comment-copy">This is similar to my solution, but yours doesn't handle non-space non-digit characters at all.</span>
<span class="comment-copy">@PierceDarragh It assumes that the input is correct, but i used for/else just to add the last number inside the function and present an other solution.</span>
<span class="comment-copy">the for/else is good, but I think a better solution would (1) check for multiple types of whitespace and (2) potentially handle errors in the input.</span>
<span class="comment-copy">@PierceDarragh I just wanted to show the op that this mechanism exists.I never said it is optimal, but it is  beautiful.Also it is not bad for the op to learn something new and useful.</span>
<span class="comment-copy">Please provide some commentry to explain how this code works and how it answers the question.</span>
<span class="comment-copy">While this answer is probably correct and useful, it is preferred if you <a href="http://meta.stackexchange.com/q/114762/159034">include some explanation along with it</a> to explain how it helps to solve the problem. This becomes especially useful in the future, if there is a change (possibly unrelated) that causes it to stop working and readers need to understand how it once worked.</span>
