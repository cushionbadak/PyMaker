<div class="post-text" itemprop="text">
<p>I am looping through dictionaries and accessing the dictionary values to append to a list. </p>
<p>Consider one dictionary as an example, <code>example_dict</code>:</p>
<pre><code>example_dict = {"first":241, "second": 5234, "third": "Stevenson", "fourth":3.141592...}
first_list = []
second_list = []
third_list = []
fourth_list = []
...
first_list.append(example_dict["first"])  # append the value for key "first"
second_list.append(example_dict["second"])  # append the value for key "second"
third_list.append(example_dict["third"])     # append the value for key "third"
fourth_list.append(example_dict["fourth"])   # append the value for key "fourth"
</code></pre>
<p>I am looping through hundreds of dictionaries. It is possible that some keys do not have values. In this case, I would like an <code>NaN</code> appended to the lists---after running the script, each list should have the same number of elements. </p>
<p>If <code>new_dict = {"first":897, "second": '', "third": "Duchamps", ...}</code>, then <code>second_list.append(new_dict["second"])</code> would append <code>NaN</code>. </p>
<p>How does one write in a check for this to occur? An if statement?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can perform a check for values that are not <code>""</code> and simply do something like this:</p>
<pre><code>second_list.append(new_dict["second"] if new_dict["second"] != "" else "NaN"))
</code></pre>
<p>So, if key <code>second</code> exists in <code>new_dict</code> and is an empty string, then <code>NaN</code> will be appended to <code>second_list</code>. </p>
<p>If you were looking to create a list of values from the dictionary applying the logic above, you can do the following, both are the same, first is expanded, and the second is the shortened comprehension: </p>
<h1>method 1</h1>
<pre><code>new_dict = {"first":897, "second": '', "third": "Duchamps"}
new_list = []
for _, v in new_dict.items():
    if v != "":
        new_list.append(v)
    else:
        new_list.append('NaN')
</code></pre>
<h1>method 2 (comprehension)</h1>
<pre><code>new_dict = {"first":897, "second": '', "third": "Duchamps"}
new_list = [v if v != "" else 'NaN' for _, v in new_dict.items()]
</code></pre>
</div>
<span class="comment-copy">Use the <code>.get</code> method; <code>'NaN'</code> would be a string: <code>second_list.append(new_dict.get('second', 'NaN'))</code></span>
<span class="comment-copy">@MosesKoledoye you could also use <code>float('nan')</code>.</span>
<span class="comment-copy">Note that technically, a value <i>does</i> exist in this case, namely the empty string.</span>
<span class="comment-copy">Looks like the missing value is an empty string <code>""</code>. In that case, replace <code>new_dict.get("second", "NaN")</code> with <code>new_dict["second"] if new_dict["second"] != "" else "NaN"</code>. A list comprehension might be cleaner.</span>
<span class="comment-copy">@SethDifley Thanks for bringing that to my attention, I somehow missed that. Updating my answer.</span>
<span class="comment-copy">The user @MosesKoledoye mentioned using <code>.get()</code>. This seems to be the shortest answer---how does it hold up to the above answers?</span>
<span class="comment-copy">@ShanZhengYang My original answer actually used <code>get</code> if you check the edit on my answer. But it was realized that your use case needs to check if the key exists but there is no value for the key. When using <code>get('second', 'NaN')</code>, it will return <code>NaN</code> only if the <i>key</i> does not exist in the dictionary, which is not what you want. Read the <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer">doc</a> on get. You will see that it does not match your use case based on what you explained in your question.</span>
<span class="comment-copy">@idjaw You're right---I think the solution provided actually does show what I'm asking. The top of the solution works, and the bottom provides details---don't delete it. Thanks!</span>
