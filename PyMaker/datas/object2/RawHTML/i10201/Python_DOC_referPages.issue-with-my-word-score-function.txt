<div class="post-text" itemprop="text">
<p>So here is my code:</p>
<pre><code>def word_score(string1, string2):    
    '''Returns the word score for two strings'''    
    if len(string1) == 0 or len(string2) == 0:    
        return 0    
    else:    
        if string1[0] in string2:                
            return 1 + word_score(string1[1:], string2)    
        else:    
            return word_score(string1[1:], string2)  
</code></pre>
<p>Basically for every letter that is shared between each string the score should increase by one. However there should not be repeats but my code repeats letters sometimes depending on the output. I have to use recursion for this and can't using anything like map or key because we haven't learned that yet in class. This lab assignment is really tricky and I tried debugging and all my classmates are stumped and its due on Tuesday. </p>
<p>Heres some outputs that don't work and what they should be returning:    </p>
<p><code>word_score('always', 'walking')</code> returns 4 but should return 3 because of the repeat there is one extra</p>
<p><code>word_score('recursion', 'excursion')</code> returns 9 but should return 8 again because of the repeat</p>
<p>Correct outputs:</p>
<p><code>word_score('diner', 'syrup')</code> correctly returns 1</p>
<p><code>word_score('always', 'bananas')</code> correctly returns 3</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that you can't use <code>set</code>, <code>dict</code> or <code>Counter</code> one way would be to iterate the characters in <code>string1</code> one by one and use <a href="https://docs.python.org/3.5/library/stdtypes.html#str.find" rel="nofollow"><code>str.find</code></a> to check if it can be found from <code>string2</code>. If character is found then add <code>1</code> to result and construct new <code>string2</code> by combining the slices before and after the match index:</p>
<pre><code>def word_score(string1, string2):
    if not string1 or not string2:
        return 0

    index = string2.find(string1[0])
    if index != -1:
        return 1 + word_score(string1[1:], string2[:index] + string2[index+1:])
    else:
        return word_score(string1[1:], string2)

TEST_CASES = [
    ['always', 'walking'],
    ['recursion', 'excursion'],
    ['diner', 'syrup'],
    ['always', 'bananas']
]

for s1, s2 in TEST_CASES:
    print('word_score({}, {}) -&gt; {}'.format(s1, s2, word_score(s1, s2)))
</code></pre>
<p>Output:</p>
<pre><code>word_score(always, walking) -&gt; 3
word_score(recursion, excursion) -&gt; 8
word_score(diner, syrup) -&gt; 1
word_score(always, bananas) -&gt; 3
</code></pre>
<p><strong>Update</strong></p>
<p>Assuming that <code>str</code> methods are not available either you can easily implement the search yourself assuming <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow"><code>range</code></a> and <a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow"><code>len</code></a> are allowed:</p>
<pre><code>def word_score(string1, string2):
    if not string1 or not string2:
        return 0

    for i in range(len(string2)):
        if string1[0] == string2[i]:
            return 1 + word_score(string1[1:], string2[:i] + string2[i+1:])

    return word_score(string1[1:], string2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try to "erase" the letters from the second word, when a "positive match" occurs. 
This way, your duplicate issues will disappear. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert the str in a list, then in a set for eliminate duplicates and check the intersection len.</p>
<pre><code>def word_score(string1, string2):
    '''Returns the word score for two strings'''
    string1=list(string1)
    string2=list(string2)
    string1=set(string1)
    string2=set(string2)
    if len(string1) == 0 or len(string2) == 0:
        return 0
    else:
        return len((string1.intersection(string2)))
</code></pre>
<p><strong>EDIT:</strong> you cant use intersection,but <em>list</em> and <em>while</em> you can use?</p>
<pre><code>def word_score2(string1, string2):
    '''Returns the word score for two strings'''
    string_temp1=list(string1)
    string_temp2=list(string2)
    if len(string_temp1) == 0 or len(string_temp2) == 0:
        return 0
    else:
        if string_temp1[0] in string_temp2:
            while string1[0] in string_temp1:
                string_temp1.remove(string1[0])
            return 1 + word_score2(string_temp1, string_temp2)
        else:
            return word_score2(string_temp1[1:], string_temp2)
</code></pre>
</div>
<span class="comment-copy">Is the code edit automatic or did someone help me out there? New to the site.</span>
<span class="comment-copy">I edited it. It's still a bit unclear from your description that what is the logic of calculating the score. Could you copy &amp; paste the description from the assignment or try to explain a bit more?</span>
<span class="comment-copy">Write a function word_score(string1, string2) that takes two strings string1 and string2 as inputs and returns the word score of string1 compared with string2 â€“ i.e., the number of characters in string1 that are shared by string2. The positions and the order of the shared characters within each string do not matter. Repeated letters are counted multiple times, as long as they appear multiple times in both strings.</span>
<span class="comment-copy">We haven't used find either is there some other way to 'find' a string? The directions that prevent all these different things make it really tricky to get. :/</span>
<span class="comment-copy">@jmcnuggsmagic13 If you can use <code>range</code> &amp; <code>len</code> you can implement <code>find</code> yourself with <code>for</code> loop. In case <code>range</code> is not available but <code>len</code> is you could utilize <code>while</code> instead.</span>
<span class="comment-copy">I've been trying to do that.</span>
<span class="comment-copy">Or other probably more "easy" way is to find if the letter you are searching is not the first, but a repetition in the first word, and only return points if it is also the "X" time occurrence in the second word.</span>
<span class="comment-copy">Can't use intersection we haven't learned it yet. Thanks though!</span>
<span class="comment-copy">you can use list? or only strings?</span>
<span class="comment-copy">We can use lists and strings as long as the output is a number but we havent learned .remove yet not sure how the instructor wants us to do this.</span>
