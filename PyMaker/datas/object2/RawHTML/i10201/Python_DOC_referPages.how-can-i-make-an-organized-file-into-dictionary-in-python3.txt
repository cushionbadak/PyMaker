<div class="post-text" itemprop="text">
<p>I'm trying to make the file:</p>
<pre><code>c;f
b;d
a;c
c;e
d;g
a;b
e;d
f;g
f;d
</code></pre>
<p>Into a dict like</p>
<pre><code>{'e': {'d'}, 'a': {'b', 'c'}, 'd': {'g'}, 'b': {'d'}, 'c': {'f', 'e'}, 'f': {'g', 'd'}}.
</code></pre>
<p>The code I'm using now is like below</p>
<pre><code>def read_file(file : open) -&gt; {str:{str}}:
f = file.read().rstrip('\n').split()
answer = {}
for line in f:
    k, v = line.split(';')
    answer[k] = v
return answer
</code></pre>
<p>But it gives me <code>{'f': 'g', 'a': 'c', 'b': 'd', 'e': 'd', 'c': 'e', 'd': 'g'}</code>
How can I fix it?</p>
</div>
<div class="post-text" itemprop="text">
<p>Dictionaries overwrite the previous key, Use a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow">defaultdict here</a> </p>
<pre><code>&gt;&gt;&gt; import collections 
&gt;&gt;&gt; answer = collections.defaultdict(set)
&gt;&gt;&gt; for line in f: 
...     k, v = line.split(";")
...     answer[k].add(v)
... 
&gt;&gt;&gt; answer
defaultdict(&lt;class 'set'&gt;, {'b': {'d'}, 'd': {'g'}, 'f': {'d', 'g'}, 'e': {'d'}, 'a': {'c', 'b'}, 'c': {'f', 'e'}})
</code></pre>
<p>If you prefer the traditional approach, then you can add a <code>if</code> condition </p>
<pre><code>&gt;&gt;&gt; answer = {}
&gt;&gt;&gt; for line in f:
...     k,v = line.split(";")
...     if k in answer:
...         answer[k].add(v)
...     else:
...         answer[k] = {v}
... 
&gt;&gt;&gt; answer
{'b': {'d'}, 'd': {'g'}, 'f': {'d', 'g'}, 'e': {'d'}, 'a': {'c', 'b'}, 'c': {'f', 'e'}}
</code></pre>
</div>
<span class="comment-copy">But I still have a question: the dict class is hashable, so why we don't just use default dict instead for all the coding works? Looks like default dict is more flexiable.</span>
<span class="comment-copy">@ProgrammingDonkey The default dict is more flexible in a few use cases, the normal dict in others. Whenever we don't need to have a default value, or throw an error when we don't have that particular key, we cannot use the default dict. Hence there is a strong reason that dict  is given more prominence over default dict.</span>
