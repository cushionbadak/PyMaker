<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/1602934/check-if-a-given-key-already-exists-in-a-dictionary">Check if a given key already exists in a dictionary</a>
<span class="question-originals-answer-count">
                    21 answers
                </span>
</li>
</ul>
</div>
<p>I have a JSON string from which I am trying to extract a property value using Python as shown below:</p>
<pre><code>def extract_property(node, to_extract):
    data, stat = zk.get(node)
    jsonString = data.decode("utf-8")
    jStr = json.loads(jsonString)
    return jStr[to_extract]
</code></pre>
<p>Now it is possible, the property value that I am trying to extract doesn't exist in that JSON string so it will fail. How can I return empty string if property doesn't exist at all in the JSON string.</p>
<p>This line can fail if property doesn't exist.</p>
<pre><code>return jStr[to_extract]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simply use <code>dict.get()</code>, i.e.:</p>
<pre><code>return jStr.get(to_extract, '')
</code></pre>
<p>See <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow">https://docs.python.org/3/library/stdtypes.html#dict.get</a> for more details.</p>
<p>UPD:</p>
<p>Thanks to @jez for pointing out, that <code>jStr</code> is not guaranteed to be a dictionary. However, the result for JSON parsing is known: if it's not a dictionary, then it's a list, number or a string. In this case, wrap it into a type checking routine, e.g.:</p>
<pre><code>try:
    return jStr[to_extract]
except (KeyError, AttributeError):
    return ''
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like Zaur, I would also have suggested <code>jStr.get(to_extract, '')</code> but I presume the OP's objection to this is that <code>jStr</code> might <em>or might not be</em> a <code>dict</code>  (if it is a <code>dict</code>, then <code>.get()</code> will work in Python 2 or 3).  If that's the problem, then the following might cover a broader range of cases: </p>
<pre><code>try: return jStr[to_extract]
except: return ''
</code></pre>
</div>
<span class="comment-copy"><code>if to_extract in jStr:</code></span>
<span class="comment-copy">Couldn't you just go <code>if jStr[to_extract]: return jStr[to_extract] else: return None</code></span>
<span class="comment-copy">@MooingRawr That will get the same error if the property doesn't exist.</span>
<span class="comment-copy">@barmar I see, learn something new everyday, For some reason I thought JSON objects are special and would return nothing if they couldn't find the property. Thinking about it now, that seems rather silly.</span>
<span class="comment-copy">@MooingRawr There's no such thing as a JSON object. JSON is a string representation of data structures. After you decode it, it's just a native data type. In this case, it's a Python dictionary.</span>
<span class="comment-copy">What this will do? Can you explain a bit for my understanding?</span>
<span class="comment-copy">the linked doc seems pretty straightforward</span>
<span class="comment-copy">Is this Python 3 feature? It doesn't work for me at all. I am on 2.7.3 and cannot upgrade.</span>
<span class="comment-copy">No, this has been there since beginning of time.</span>
