<div class="post-text" itemprop="text">
<p>While studying <a href="http://pandas.pydata.org/pandas-docs/stable/style.html" rel="nofollow">Pandas Style</a>, I got to the following:</p>
<pre><code>df.style.format("{:.2%}")
</code></pre>
<p>Which I understand means, turn every value to 2 decimal places and add a <code>%</code> in the end.</p>
<p>Just after that, there is:</p>
<pre><code>df.style.format({'B': "{:0&lt;4.0f}", 'D': '{:+.2f}'})
</code></pre>
<p>How should I read <code>'B': "{:0&lt;4.0f}"</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the "new" formatting string syntax, explained in <a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="nofollow">https://docs.python.org/2/library/string.html#format-specification-mini-language</a>.</p>
<ul>
<li>The first <code>0</code> means pad with "0"</li>
<li>The <code>&lt;</code> means <a href="https://docs.python.org/2/library/string.html#grammar-token-align" rel="nofollow">align</a> to the left (so the number will be followed by a bunch of 0's, e.g. '4' will be formatted as "400000â€¦")</li>
<li>The <code>4</code> means the <a href="https://docs.python.org/2/library/string.html#grammar-token-width" rel="nofollow">minimum width</a> is 4 characters</li>
<li>The <code>.0</code> means the <a href="https://docs.python.org/2/library/string.html#grammar-token-precision" rel="nofollow">precision</a> is 0, i.e. don't show any decimal parts.</li>
<li>The <code>f</code> means the <a href="https://docs.python.org/2/library/string.html#grammar-token-type" rel="nofollow">type</a> is a fixed-point number.</li>
</ul>
<p>Examples:</p>
<pre><code>&gt;&gt;&gt; '{:0&lt;4.0f}'.format(1)
'1000'
&gt;&gt;&gt; '{:0&lt;4.0f}'.format(3.14)
'3000'
&gt;&gt;&gt; '{:0&lt;4.0f}'.format(26)
'2600'
&gt;&gt;&gt; '{:0&lt;4.0f}'.format(77777)
'77777'
&gt;&gt;&gt; '{:0&lt;4.0f}'.format(-3)
'-300'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow" title="format specification mini language">Python documentation for format strings</a> explains what this means.</p>
<p>In the case of <code>0&lt;4.0f</code>, it means:</p>
<pre><code>0     0-filled
&lt;     left-aligned
4.0   width.precision (4 digits wide, 0 after decimal point)
f     floating-point number
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As according to the <a href="http://pandas.pydata.org/pandas-docs/stable/style.html#Finer-Control:-Display-Values" rel="nofollow">Pandas Style documentation</a> you linked to, it's a python <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow">format specification string</a>.</p>
<p>The specific options break down to:</p>
<ul>
<li><code>0&lt;</code> Forces the field to be left-aligned within the available space, and pads with zeros</li>
<li><code>4</code> Specifies the width of the field</li>
<li><code>.0</code> Specifies the precision of the number, i.e. how many decimal points should be displayed</li>
<li><code>f</code> Displays the number as a fixed-point number.</li>
</ul>
</div>
<span class="comment-copy">Ok, I think I got it. But, also think, the table just below <code>df.style.format({'B': "{:0&lt;4.0f}", 'D': '{:+.2f}'})</code> in the reference (in the question) is wrong. Because there <code>'{:0&lt;4.0f}'.format(132.92)</code> evaluates to <code>1000 </code> (in column B).</span>
<span class="comment-copy">@KcFnMi: You're right, 132.92 will be formatted to <code>1330</code>. The output of this format (<code>0&lt;</code>) is very confusing to human, I don't think there's any actual reason of using <code>0&lt;</code> for numbers.</span>
