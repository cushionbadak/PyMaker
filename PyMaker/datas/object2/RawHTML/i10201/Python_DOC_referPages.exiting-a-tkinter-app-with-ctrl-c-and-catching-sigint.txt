<div class="post-text" itemprop="text">
<p>Ctrl-C/SIGTERM/SIGINT seem to be ignored by tkinter. Normally it can be <a href="https://stackoverflow.com/questions/1112343/how-do-i-capture-sigint-in-python">captured again with a callback</a>. This doesn't seem to be working, so I thought I'd run tkinter <a href="https://stackoverflow.com/a/1835036/1888983">in another thread</a> since its <a href="https://stackoverflow.com/questions/29158220/tkinter-understanding-mainloop">mainloop() is an infinite loop and blocks</a>. I actually also want to do this to read from stdin in a separate thread. Even after this, Ctrl-C is still not processed until I close the window. Here's my MWE:</p>
<pre><code>#! /usr/bin/env python
import Tkinter as tk
import threading
import signal
import sys

class MyTkApp(threading.Thread):
    def run(self):
        self.root = tk.Tk()
        self.root.mainloop()

app = MyTkApp()
app.start()

def signal_handler(signal, frame):
    sys.stderr.write("Exiting...\n")

    # think only one of these is needed, not sure
    app.root.destroy()
    app.root.quit()

signal.signal(signal.SIGINT, signal_handler)
</code></pre>
<p>Results:</p>
<ul>
<li>Run the app</li>
<li>Ctrl-C in the terminal (nothing happens)</li>
<li>Close the window</li>
<li>"Exiting..." is printed and I get an error about the loop already having exited.</li>
</ul>
<p>What's going on here and how can I make Ctrl-C from the terminal close the app?</p>
<hr/>
<p>Update: <a href="https://stackoverflow.com/a/13784297/7432">Adding a poll</a>, <a href="https://stackoverflow.com/questions/39840815/exiting-a-tkinter-app-with-ctrl-c-and-catching-sigint?noredirect=1#comment66972210_39840815">as suggested</a>, works in the main thread but does not help when started in another thread...</p>
<pre><code>class MyTkApp(threading.Thread):
    def poll(self):
        sys.stderr.write("poll\n")
        self.root.after(50, self.poll)

    def run(self):
        self.root = tk.Tk()
        self.root.after(50, self.poll)
        self.root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since your tkinter app is running in another thread, you do not need to set up the signal handler in the main thread and just use the following code block after the <code>app.start()</code> statement:</p>
<pre><code>import time

while app.is_alive():
    try:
        time.sleep(0.5)
    except KeyboardInterrupt:
        app.root.destroy()
        break
</code></pre>
<p>You can then use <kbd>Ctrl-C</kbd> to raise the <code>KeyboardInterrupt</code> exception to close the tkinter app and break the while loop.  The while loop will also be terminated if you close your tkinter app.</p>
<p>Note that the above code is working only in Python 2 (as you use <code>Tkinter</code> in your code).</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Proper CTRL-C &amp; SIGINT Usage in Python</strong></p>
<p>The problem is that you are exiting the main thread, so the signal handler is  basically useless.  You need to keep it running, in a while loop, or my personal preference, <a href="https://docs.python.org/3/library/threading.html#event-objects" rel="nofollow noreferrer">Events</a> from <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">threading</a> module.  You can also just catch the <code>KeyboardInterrupt</code> exception generated by the CTRL-C event, rather than dealing with signal handlers.</p>
<p><strong>SIGINT in Tkinter</strong></p>
<p>Using tkinter, you must have the tkinter app run in a separate thread, so that it doesn't interfere with the signal handler or <code>KeyboardInterrupt</code> exception.  In the handler, to exit, you need to destroy then update tkinter root.  Update allows the tkinter to update so that it closes, without waiting for mainloop.  Otherwise, user has to click on the active window to activate mainloop.</p>
<pre><code># Python 3
from tkinter import *
from threading import Thread
import signal

class MyTkApp(Thread):
    def run(self):
        self.root = Tk()
        self.root.mainloop()

def sigint_handler(sig, frame):
    app.root.quit()
    app.root.update()

app = MyTkApp()

# Set signal before starting
signal.signal(signal.SIGINT, sigint_handler)

app.start()
</code></pre>
<p>Note: SIGINTs can also be caught if you set handler in same thread as tkinter mainloop, but you need to make tkinter window active after the signal so that it's mainloop can run.  There is no way around this unless you run in new thread.</p>
<p><strong>More Information on Tkinter &amp; Command Line Communication</strong></p>
<p>For more on communicating between tkinter and the command line, see <a href="https://gordonlesti.com/use-tkinter-without-mainloop/" rel="nofollow noreferrer">Using Tkinter Without Mainloop</a>.  Basically, you can use update method in your loop, and then communicate with other threads and processes, etc.  I would personally NOT recommend this, as you are essentially doing the job of the python thread control system, which is probably opposite of what you want to do. (python has a process that runs all internal threads in one external thread, so you are not taking advantage of multitheading, unless using <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a> module)</p>
<pre><code># Python 2
from Tkinter import *

ROOT = Tk()
LABEL = Label(ROOT, text="Hello, world!")
LABEL.pack()
LOOP_ACTIVE = True
while LOOP_ACTIVE:
    ROOT.update()
    USER_INPUT = raw_input("Give me your command! Just type \"exit\" to close: ")
    if USER_INPUT == "exit":
        ROOT.quit()
        LOOP_ACTIVE = False
    else:
        LABEL = Label(ROOT, text=USER_INPUT)
        LABEL.pack()
</code></pre>
</div>
<span class="comment-copy">Just to be clear: you want to do control-c from the terminal and not from the GUI itself, correct?</span>
<span class="comment-copy">@BryanOakley yes, it would be very convenient for frequently testing during development.</span>
<span class="comment-copy">Does the following link answer your question? <a href="http://stackoverflow.com/a/13784297/7432">stackoverflow.com/a/13784297/7432</a></span>
<span class="comment-copy">@BryanOakley I have this poll in my application already and it does not affect the behavior. The signal callback simply isn't run until window closes.</span>
<span class="comment-copy">Are you certain the poll is running? When using the poll, are you also using multithreading? Also, what platform are you experiencing this on? If you take the exact code from <a href="http://stackoverflow.com/a/13784297/7432">stackoverflow.com/a/13784297/7432</a> and run it, does it work for you?</span>
<span class="comment-copy">Thanks! This does indeed close the window, but something is still running and the process refuses to close. Would you also be able to say why the signal handler doesn't work? I'd like to understand why it's being so difficult.</span>
<span class="comment-copy">The signal handler does not work because it only works in main thread.  But the main thread in your code is finished after the <code>signal.signal(...)</code> statement.  You can try adding <code>while True: pass</code> after the <code>signal.signal(...)</code> statement which keep your main thread alive, and then the signal handler will be working.</span>
<span class="comment-copy">Thanks @gagarwal. To avoid "link-only-answers" would you be able to copy/paste a key snippet or something from the link just in case the page goes down or moves.</span>
<span class="comment-copy">I updated based on my experience with this.  Sorry can't post code now, as on mobile.  If you have any more questions, please reach out.</span>
