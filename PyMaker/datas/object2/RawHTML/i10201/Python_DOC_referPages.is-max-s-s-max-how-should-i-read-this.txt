<div class="post-text" itemprop="text">
<p>While studying <a href="http://pandas.pydata.org/pandas-docs/stable/style.html" rel="nofollow">Pandas Style</a>, I got to the following:</p>
<pre><code>def highlight_max(s):
    '''
    highlight the maximum in a Series yellow.
    '''
    is_max = s == s.max()
    return ['background-color: yellow' if v else '' for v in is_max]
</code></pre>
<p>How should I read <code>is_max = s == s.max()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>s == s.max()</code> will evaluate to a boolean (due to the <code>==</code> in between the variables). The next step is storing that value in <code>is_max</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In pandas <code>s</code> is very often <code>Series</code> (column in <code>DataFrame</code>).</p>
<p>So you compare all values in <code>Series</code> with <code>max</code> value of <code>Series</code> and get boolean mask. Output is in <code>is_max</code>. And then set style <code>'background-color: yellow'</code> only to cell of table where is <code>True</code> value - where is max value.</p>
<p>Sample:</p>
<pre><code>s = pd.Series([1,2,3])
print (s)
0    1
1    2
2    3
dtype: int64

is_max = s == s.max()
print (is_max)
0    False
1    False
2     True
dtype: bool
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code</p>
<p><code>is_max = s == s.max()</code></p>
<p>is evaluated as</p>
<p><code>is_max = (s == s.max())</code></p>
<p>The bit in parentheses is evaluated first, and that is either <code>True</code> or <code>False</code>. The result is assigned to <code>is_max</code>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>is_max is EQUAL TO comparison of s and s_max</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>According to the document, <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="nofollow">Evaluation order</a>:</p>
<blockquote>
<p>Notice that while evaluating an assignment, the right-hand side is
  evaluated before the left-hand side.</p>
</blockquote>
<p>This is quite reasonable, for you have to know the value of an expression before assigning it to a variable.</p>
<p>So Python first evaluates <code>s.max()</code>, followed by checking if the calculated value is equal to <code>s</code>, resulting in a boolean result, and then assign this boolean to a variable called <code>is_max</code>.</p>
<p>See also: <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow">Assignment statements</a></p>
</div>
<span class="comment-copy"><code>s == s.max()</code> is an expression, the result of which is assigned to <code>is_max</code>. On most objects, <code>==</code> produces a boolean value (<code>False</code> or <code>True</code>). If <code>s</code> is a series, then you'll get a series with boolean values.</span>
<span class="comment-copy">In Python <code>==</code> equality testing can be overloaded. It doesn't necessarily produce a boolean. In Pandas, <code>Series</code> override this and produce a new series with boolean values. So <code>Series([1, 2, 4, 8]) == Series([1, 2, 4, 8]).max()</code> produces <code>Series([1, 2, 4, 8]) == 8</code> produces <code>Series([False, False, False, True])</code>.</span>
<span class="comment-copy">There are many more languages where assignment is not an operator; making assignment an operator is actually an exception, I'd say.</span>
