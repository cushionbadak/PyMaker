<div class="post-text" itemprop="text">
<p>I would like to detect brackets in a string, and if found, remove the brackets and all data in the brackets</p>
<p>e.g.</p>
<p><code>Developer (12)</code></p>
<p>would become</p>
<p><code>Developer</code></p>
<p>Edit: Note that the string will be a different length/text each time, and the brackets will not always be present.</p>
<p>I can detect the brackets using something like</p>
<pre><code>if '(' in mystring: 
   print 'found it'
</code></pre>
<p>but how would I remove the <code>(12)</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can user regex and replace it:</p>
<pre><code>&gt;&gt;&gt; re.sub(r'\(.*?\)', '','Developer (12)')
'Developer '
&gt;&gt;&gt; a='DEf (asd () . as ( as ssdd (12334))'
&gt;&gt;&gt; re.sub(r'\(.*?\)', '','DEf (asd () . as ( as ssdd (12334))')
'DEf  . as )'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe you want something like this</p>
<pre><code>import re
a = "developer (12)"
print(re.sub("\(.*\)", "", a))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since it's always at the end and there is no nested brackets:</p>
<pre><code>s = "Developer (12)"
s[:s.index('(')]  # or s.index(' (') if you want to get rid of the previous space too
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For nested brackets and multiple pairs in string this solution would work</p>
<pre><code>def replace_parenthesis_with_empty_str(str):
    new_str = ""
    stack = []
    in_bracker = False
    for c in str :
        if c == '(' :
            stack.append(c)
            in_bracker = True
            continue
        else:
            if in_bracker == True:
                if c == ')' :
                    stack.pop()
                if not len(stack):
                    in_bracker = False
            else :
                new_str += c
    return new_str

a = "fsdf(ds fOsf(fs)sdfs f(sdfsd)sd fsdf)c  sdsds (sdsd)"
print(replace_parenthesis_with_empty_str(a))
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/2/library/functions.html?highlight=slice#slice" rel="nofollow noreferrer">docs.python.org/2/library/functions.html?highlight=slice#slice</a></span>
<span class="comment-copy">You should probably use a <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expression</a>.</span>
<span class="comment-copy"><code>slice(0, myString.index('('))</code></span>
<span class="comment-copy">Are the brackets always in the end fo the string? Do you need to take care of nested brackets?</span>
<span class="comment-copy">@Franco OK, the problem is much simpler then. The proposed answers work, but a regexp is not even needed.</span>
<span class="comment-copy">It doesn't work with nested brackets.</span>
<span class="comment-copy">@S.deMelo from the op - <i>"yes always at the end, no nested."</i>. He clearly states that he does not need to support nested brackets.</span>
<span class="comment-copy">@leaf It wasn't the case at the time.</span>
<span class="comment-copy">This is identical to the previous solution and has the same limitation</span>
<span class="comment-copy">It doesn't work with nested brackets.</span>
<span class="comment-copy">@brianpck I posted it without seeing the previous answer, but yes its similar to that.</span>
