<div class="post-text" itemprop="text">
<p>I have to convert string to tuple of float.
In Python 2.7, it gives correct conversion, but in Python it is not same case.</p>
<p>I want same behaviour in Python 2.6 </p>
<p>Can anyone help me why this is not same in Python 2.6 and how to do in Python 2.6.</p>
<p><strong>Python 2.6</strong></p>
<pre><code>&gt;&gt;&gt; a
'60.000,494.100,361.600,553.494'
&gt;&gt;&gt; eval(a)
(60.0, 494.10000000000002, 361.60000000000002, 553.49400000000003)
&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(a)
(60.0, 494.10000000000002, 361.60000000000002, 553.49400000000003)
&gt;&gt;&gt; 

&gt;&gt;&gt; for i in a.split(","):
...   float(i)
... 
60.0
494.10000000000002
361.60000000000002
553.49400000000003
&gt;&gt;&gt; 
</code></pre>
<p><strong>Python 2.7</strong></p>
<pre><code>&gt;&gt;&gt; a
'60.000,494.100,361.600,553.494'
&gt;&gt;&gt; eval(a)
(60.0, 494.1, 361.6, 553.494)
&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(a)
(60.0, 494.1, 361.6, 553.494)
&gt;&gt;&gt; 

&gt;&gt;&gt; for i in a.split(","):
...   float(i)
... 
60.0
494.1
361.6
553.494
</code></pre>
<p>Its not look good</p>
<p><strong>[Edit 2]</strong></p>
<p><strong>I just print value and condition</strong></p>
<pre><code>print fGalleyTopRightOddX, "&gt;=", tLinetextBbox[2], fGalleyTopRightOddX&gt;=tLinetextBbox[2]

361.6 &gt;= 361.6 False
</code></pre>
<p>I calculate <code>tLinetextBbox</code> value from string and which is <code>361.60000000000002</code> and <code>fGalleyTopRightOddX</code> value is <code>361.6</code></p>
<p>I am working on <strong>Python Django</strong> project where <strong>apache</strong> is server.</p>
<ol>
<li><code>fGalleyTopRightOddX</code> i.e. <code>361.6</code> is calculated in apache environment</li>
<li><code>tLinetextBbox</code> i.e. <code>361.60000000000002</code> is calculated on cmd means I pass <code>fGalleyTopRightOddX</code> to program which run by command <code>line os.system</code></li>
</ol>
<p><strong>[Edit 3]</strong>
Just one more information,</p>
<p>when I log diction in text file then i get <code>tLinetextBbox</code> vale as <code>361.59999999999997</code></p>
</div>
<div class="post-text" itemprop="text">
<p>In order to get the same result in Python 2.6, you have to explicitly do:</p>
<pre><code>'%.12g' % float_variable
</code></pre>
<p>Better to create a custom function to do this as:</p>
<pre><code>def convert_to_my_float(float_value):
    return float('%.12g' % float_value)
</code></pre>
<hr/>
<p>As per <a href="https://docs.python.org/2/library/decimal.html#decimal-objects" rel="nofollow">Python's Decimal Objects</a> Document:</p>
<blockquote>
<p>Changed in version 2.6: leading and trailing whitespace characters are
  permitted when creating a Decimal instance from a string.</p>
<p>Changed in version 2.7: The argument to the constructor is now
  permitted to be a float instance.</p>
</blockquote>
<p>The answer to <em>Why they are behaving differently?</em> is, because <code>float.__repr__()</code> and <code>float.__str__()</code> methods in Python 2.7 changed.</p>
</div>
<span class="comment-copy">In both cases you've got the correct value, it's just that Python 2.7 <a href="https://docs.python.org/3/whatsnew/2.7.html#other-language-changes" rel="nofollow noreferrer">improved how floating point numbers are displayed</a>. (Cue the "what every computer scientist should know about floating point number" link)</span>
<span class="comment-copy">@kennytm Maybe better to say that in both cases you've got the same <i>incorrect</i> value.</span>
<span class="comment-copy">@kennytm and Johan: thank you, but I still get wrong answer. I updated question, can u look again?</span>
<span class="comment-copy">Thanx, but I still get wrong answer. I updated question, can u look again?</span>
<span class="comment-copy">I think I still didn't got your issue. Why not calculate the value <code>tLinetextBbox </code> from the  <code>os</code> command, get required value from the function I mentioned, and pass the returned value to <i>your command</i>?</span>
<span class="comment-copy">your function is not working,  <code>&gt;&gt;&gt; convert_to_my_float(361.60000000000002) 361.60000000000002 &gt;&gt;&gt; convert_to_my_float(361.6) 361.60000000000002 </code>  I added some info to Edit3 in question . Can u look?</span>
<span class="comment-copy">What is the error your are getting? Is it <code>TypeError: float argument required, not str</code>? If yes, type-cast it to <code>float</code> before passing to the function as: <code>float('361.60000000000002')</code></span>
