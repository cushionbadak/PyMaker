<div class="post-text" itemprop="text">
<p>I'm trying to count the occurrence of each character for any given string input, the occurrences must be output in ascending order( includes numbers and exclamation marks)
  I have this for my code so far, i am aware of the Counter function, but it does not output the answer in the format I'd like it to, and I do not know how to format Counter. Instead I'm trying to find away to use the count() to count each character. I've also seen the dictionary function , but I'd be hoping that there is a easier way to do it with count() </p>
<pre><code>from collections import Counter

sentence=input("Enter a sentence b'y: ")
lowercase=sentence.lower()

list1=list(lowercase)
list1.sort()

length=len(list1)
list2=list1.count(list1)
print(list2)

p=Counter(list1)
print(p)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow"><code>collections.Counter</code></a> objects provide a <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow"><code>most_common()</code></a> method that returns a list of tuples in <em>decreasing</em> frequency. So, if you want it in ascending frequency, reverse the list:</p>
<pre><code>from collections import Counter

sentence = input("Enter a sentence: ")
c = Counter(sentence.lower())
result = reversed(c.most_common())
print(list(result))
</code></pre>
<p><em>Demo run</em></p>
<pre>
Enter a sentence: Here are 3 sentences. This is the first one. Here is the second. The end!
[('a', 1), ('!', 1), ('3', 1), ('f', 1), ('d', 2), ('o', 2), ('c', 2), ('.', 3), ('r', 4), ('i', 4), ('n', 5), ('t', 6), ('h', 6), ('s', 7), (' ', 14), ('e', 14)]
</pre>
</div>
<div class="post-text" itemprop="text">
<p>Just call <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow"><code>.most_common</code></a> and reverse the output with <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow"><em>reversed</em></a> to get the output from least to most common:</p>
<pre><code>from collections import Counter

sentence= "foobar bar"
lowercase = sentence.lower()
for k, count in  reversed(Counter(lowercase).most_common()):
    print(k,count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to format the Counter output differently:</p>
<pre><code>for key, value in Counter(list1).items():
    print('%s: %s' % (key, value))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your best bet is to use <code>Counter</code> (which does work on a string) and then sort on it's output.</p>
<pre><code>from collections import Counter
sentence = input("Enter a sentence b'y: ")
lowercase = sentence.lower()

# Counter will work on strings
p = Counter(lowercase)
count = Counter.items()
# count is now (more or less) equivalent to
#  [('a', 1), ('r', 1), ('b', 1), ('o', 2), ('f', 1)]

# And now you can run your sort
sorted_count = sorted(count)
# Which will sort by the letter. If you wanted to
#  sort by quantity, tell the sort to use the
#  second element of the tuple by setting key:

# sorted_count = sorted(count, key=lambda x:x[1])

for letter, count in sorted_count:
    # will cycle through in order of letters.
    #  format as you wish
    print(letter, count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way to avoid using Counter.</p>
<pre><code>sentence = 'abc 11 222 a AAnn zzz?? !'
list1 = list(sentence.lower())
#If you want to remove the spaces.
#list1 = list(sentence.replace(" ", ""))

#Removing duplicate characters from the string  
sentence = ''.join(set(list1))
dict = {}
for char in sentence:
    dict[char] = list1.count(char)

for item in sorted(dict.items(), key=lambda x: x[1]):
    print 'Number of Occurences of %s is %d.' % (item[0], item[1])
</code></pre>
<p>Output:</p>
<pre><code>Number of Occurences of c is 1.
Number of Occurences of b is 1.
Number of Occurences of ! is 1.
Number of Occurences of n is 2.
Number of Occurences of 1 is 2.
Number of Occurences of ? is 2.
Number of Occurences of 2 is 3.
Number of Occurences of z is 3.
Number of Occurences of a is 4.
Number of Occurences of   is 6.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to do this would be by removing instances of your sub string and looking at the length...</p>
<pre><code>def nofsub(s,ss):
    return((len(s)-len(s.replace(ss,"")))/len(ss))
</code></pre>
<p>alternatively you could use re or regular expressions,</p>
<pre><code>from re import *
def nofsub(s,ss):
    return(len(findall(compile(ss), s)))
</code></pre>
<p>finally you could count them manually,</p>
<pre><code>def nofsub(s,ss):
    return(len([k for n,k in enumerate(s) if s[n:n+len(ss)]==ss]))
</code></pre>
<p>Test any of the three with...</p>
<pre><code>&gt;&gt;&gt; nofsub("asdfasdfasdfasdfasdf",'asdf')
5
</code></pre>
<p>Now that you can count any given character you can iterate through your string's unique characters and apply a counter for each unique character you find. Then sort and print the result.</p>
<pre><code>def countChars(s):
    s = s.lower()
    d = {}
    for k in set(s):
        d[k]=nofsub(s,k)
    for key, value in sorted(d.iteritems(), key=lambda (k,v): (v,k)):
        print "%s: %s" % (key, value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use the list function to break the words apart`from collections </p>
<pre><code>from collections import Counter

sentence=raw_input("Enter a sentence b'y: ")
lowercase=sentence.lower()

list1=list(lowercase)
list(list1)

length=len(list1)
list2=list1.count(list1)
print(list2)

p=Counter(list1)
print(p)
</code></pre>
</div>
<span class="comment-copy">Can you explain what output you are looking for exactly, where Counter did not suffice?</span>
<span class="comment-copy">What, exactly, do you think <code>list1.count(list1)</code> does?</span>
<span class="comment-copy">Are you aware that <code>Counter</code> is practically a dictionary? You can easily sort it by count doing <code>sorted_words = sorted(p.items(), key=lambda item: item[1], reverse=True)</code>. You can print that using <code>print('\n'.join('%10s: %5d' % item for item in sorted_words))</code>. Note that using <code>count</code> would still require you to do the sorting.</span>
<span class="comment-copy">@idjaw Robin explains it in the first sentence "must be output in ascending order"</span>
<span class="comment-copy">@SCB you can still do it with Counter very easily using 'most_common' and then reversing that. Actually there are two solutions that show it.</span>
<span class="comment-copy">Why use reversed when you can <code>c.most_common()[::-1]</code>? reversed is really only useful if you are iterating over the elements and don't want to create a copy as per my own answer.</span>
<span class="comment-copy">@PadraicCunningham: <code>reversed()</code> is more readable. But yes, for the illustrative purposes of this answer, it does make an unnecessary copy.</span>
<span class="comment-copy">They asked for the output to be in ascending order</span>
<span class="comment-copy">In ascending order by character value, or by number of occurrences?</span>
<span class="comment-copy"><code>key = lambda x:x[0]</code> doesn't really do anything here since tuples are already sorted "lexicographically". Also, I believe the OP wants to sort in increasing order based on the <i>counts</i>, so <code>lambda x:x[1]</code>, but it's not clear.</span>
<span class="comment-copy">Yeah, you're right. Thanks.</span>
<span class="comment-copy">Just use <code>Counter</code>. This is very much over-engineered.</span>
<span class="comment-copy">Also, there is nothing about the number of substrings in the question.</span>
<span class="comment-copy">I'm sorry but does this differ from what they already had?</span>
