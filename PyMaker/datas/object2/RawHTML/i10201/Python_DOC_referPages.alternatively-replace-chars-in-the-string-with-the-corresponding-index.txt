<div class="post-text" itemprop="text">
<p>How to replace the alternative characters in the string with the corresponding index without iterating? For example:</p>
<pre><code>'abcdefghijklmnopqrstuvwxyz'
</code></pre>
<p>should be returned as:</p>
<pre><code>'a1c3e5g7i9k11m13o15q17s19u21w23y25'
</code></pre>
<p>I have the below code to achieve this. <em>But is there a way to skip the loop or, more pythonic way to achieve this</em>:</p>
<pre><code>string = 'abcdefghijklmnopqrstuvwxyz'
new_string = ''
for i, c in enumerate(string):
    if i % 2:
        new_string += str(i)
    else:
        new_string += c
</code></pre>
<p>where <code>new_string</code> hold my required value</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>, and re-join the characters with <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow"><code>str.join()</code></a>; the latter avoids repeated (slow) string concatenation):</p>
<pre><code>newstring = ''.join([str(i) if i % 2 else l for i, l in enumerate(string)])
</code></pre>
<p>Note that you can't evade iteration here. Even if you defined a large list of pre-stringified odd numbers here (<code>odds = [str(i) for i in range(1, 1000, 2)]</code>) then re-use that to use slice assignment on a list <code>string_list[1::2] = odds[:len(string) // 2]</code> Python has to iterate under the hood to re-assign the indices. That's the nature of working with an arbitrary-length sequence.</p>
</div>
<span class="comment-copy">"Without iterating" and "pythonic way" ... what if the most pythonic way is with iterating?</span>
<span class="comment-copy">User has mentioned that he wants to skip the <code>for</code> loop. <i>List comprehensions</i> are also the type of loop</span>
<span class="comment-copy">@MoinuddinQuadri No, they are not, no more than the <code>map</code> you used.</span>
<span class="comment-copy">@MoinuddinQuadri: and <code>map()</code> loops too. You <i>have</i> to here, there is no way to avoid iteration <i>in some form or other</i>.</span>
<span class="comment-copy">In case  if I was having <code>list</code> instead of <code>str</code>, still list comprehension was recommended or replacing via slicing?</span>
<span class="comment-copy">@experimenting_python: It <i>could</i> be faster, but I find the list comprehension with <code>enumerate()</code> to be clearer, easier to read.</span>
