<div class="post-text" itemprop="text">
<pre><code>input_elements = ["a", "b", "c", "d"]
my_array = ["1", "2", "3", "4"]
</code></pre>
<p>the output I want is:</p>
<pre><code>["1", "2", "3", "4", "a"]
["1", "2", "3", "4", "b"]
["1", "2", "3", "4", "c"]
["1", "2", "3", "4", "d"]
</code></pre>
<p>I tried:</p>
<pre><code>for e in input_elements:
  my_array.append(e)
</code></pre>
<p>I know the code right above is wrong, so I am wondering how I can generate the output like that.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm assuming the output you're getting is:</p>
<pre><code>['1', '2', '3', '4', 'a', 'b', 'c', 'd']
</code></pre>
<p>...because, that's what I'm getting.</p>
<p>The problem is, in your loop, you're simply adding a new element to the existing array, then printing the "grand total."  So, you add a, then you add b, then you add c, then d... all to the same array, then printing out the whole shebang.</p>
<p>The easiest solution for your particular problem is, in your for loop, print the array as it is, with the <code>e</code> selection concatenated.  Like so:</p>
<pre><code>input_elements = ["a", "b", "c", "d"]
my_array = ["1", "2", "3", "4"]

for e in input_elements:
  print my_array + [e]
</code></pre>
<p>That way, you're printing the array with the extra element, without actually affecting the original array... keeping it "clean" to loop back through and add the next element.</p>
<p>This method allows you to achieve the desired result without having to result to extra memory allocation or unnecessary variables.</p>
<p>If you have other things to do during the <code>for</code> loop, you could always add the element, then remove it after processing using the <code>pop</code> function, like so:</p>
<pre><code>for e in input_elements:
  my_array.append(e)
  print my_array
  # Do some other nifty stuff
  my_array.pop()
</code></pre>
<p>Another option is to use List Comprehension, which allows you to iterate through an array as more of an inherent statement:</p>
<p><code>print [my_array+[e] for e in input_elements]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> to solve your issue. </p>
<pre><code>&gt;&gt;&gt; input_elements = ["a", "b", "c", "d"]
&gt;&gt;&gt; my_array = ["1", "2", "3", "4"]
&gt;&gt;&gt; [my_array+[i] for i in input_elements]
</code></pre>
<p>The result looks like</p>
<pre><code>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint([my_array+[i] for i in input_elements])
[['1', '2', '3', '4', 'a'],
 ['1', '2', '3', '4', 'b'],
 ['1', '2', '3', '4', 'c'],
 ['1', '2', '3', '4', 'd']]
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/34835951/what-does-list-comprehension-in-python-mean-how-does-it-work-and-how-can-i-us">What does "list comprehension" mean? How does it work and how can I use it?</a> for more details about them. </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to make a copy of the old list in the loop:</p>
<pre><code>input_elements = ["a", "b", "c", "d"]
my_array = ["1", "2", "3", "4"]
new_list = []
for e in input_elements:
  tmp_list = list(my_array)
  tmp_list.append(e)
  new_list.append(tmp_list)

print(new_list)
</code></pre>
<p>Output:</p>
<pre><code>[['1', '2', '3', '4', 'a'], ['1', '2', '3', '4', 'b'], ['1', '2', '3', '4', 'c'], ['1', '2', '3', '4', 'd']]
</code></pre>
<p>Note that <code>tmp_list = list(my_array)</code> makes a new copy of <code>my_array</code>.</p>
<p><strong>The above can be shortened by making <code>tmp-list</code> implicit:</strong></p>
<pre><code>input_elements = ["a", "b", "c", "d"]
my_array = ["1", "2", "3", "4"]
new_list = []
for e in input_elements:
  new_list.append(my_array + [e]) # the temporary copy is implicit
print(new_list)
</code></pre>
<p><strong>The above can then be further shortened using lambdas (essentially making the loop implicit in this example):</strong></p>
<pre><code>input_elements = ["a", "b", "c", "d"]
my_array = ["1", "2", "3", "4"]
new_list = [my_array + [e] for e in input_elements]
print(new_list)
</code></pre>
</div>
<span class="comment-copy">These are lists, not arrays.  Python also has an array data type in the <code>array</code> module, but it is used much less frequently than the built-in list type.</span>
<span class="comment-copy"><code>my_array.remove(e)</code> will perform a linear search in the list for the first element matching <code>e</code>, and remove that.  That's wrong in some cases, and even in cases where it happens to work it is inefficient.  <code>my_array.pop()</code> will do what you want in an efficient way.</span>
<span class="comment-copy">no need for a temporary with a list comprehension.</span>
<span class="comment-copy">@MikeMcMahon The temporary list is implicit in the list comprehension.   You could use <code>new_list.appen(my_array + [e])</code> in the for-loop as well.  Why should there be any difference in that regard?  Everything that can be done with a list comprehension can be done with a for loop as well, and more.</span>
<span class="comment-copy">One of the fundamentals in Python is to be pythonic. A list comprehension is both expressive and pythonic.</span>
<span class="comment-copy">I agree about the pythonic part. But the OP who's asking the question seems to be new to python and maybe CS (based on the question alone). In such a case my opinion is that the pythonic way is not instructive.</span>
<span class="comment-copy">I don't think the use of a temporary here is detrimental to understanding what is going on. Though that's debatable of course. To express the implied nature of what is happening under the hood while showing the way in which to code within the paradigm of a given language is probably the best way to do it. That said I'm neither the teacher nor the student!</span>
