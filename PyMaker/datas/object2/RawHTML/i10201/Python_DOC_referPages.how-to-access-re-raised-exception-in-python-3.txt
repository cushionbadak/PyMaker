<div class="post-text" itemprop="text">
<p>In Python 3, there's a <a href="https://blog.ionelmc.ro/2014/08/03/the-most-underrated-feature-in-python-3/" rel="nofollow">useful <code>raise ... from ...</code> feature</a> to re-raise an exception. That said, how do you find the original (/ re-raised) exception from the raised exception? Here's a (silly) example with comments to demonstrate what I mean--</p>
<pre><code>def some_func():
    try:
      None() # TypeError: 'NoneType' object is not callable
    except as err:
      raise Exception("blah") from err

try:
    some_func()
except as err:
    # how can I access the original exception (TypeError)?
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's in the <code>__cause__</code> attribute of the raised exception. Taken from the <a href="https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="nofollow">docs on the <code>raise</code> statement</a> it says regarding <code>raise ... from ...</code>:</p>
<blockquote>
<p>The <code>from</code> clause is used for exception chaining: if given, the second expression must be another exception class or instance, <em>which will then be attached to the raised exception as the <code>__cause__</code> attribute</em> (which is writable). If the raised exception is not handled, both exceptions will be printed.</p>
</blockquote>
<p>So, in your given scenario, <code>repr</code>ing the <code>__cause__</code> attribute:</p>
<pre><code>def some_func():
    try:
      None() # TypeError: 'NoneType' object is not callable
    except TypeError as err:
      raise Exception("blah") from err

try:
    some_func()
except Exception as er:
    print(repr(er.__cause__))
</code></pre>
<p>Will print out:</p>
<pre><code>TypeError("'NoneType' object is not callable",)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Whenever an exception is raised from an exception handler (the <code>except</code> clause), the original exception will bestored in new exception's <code>__context__</code>.</p>
<p>Whenever an exception is raised using <code>from</code> syntax, the exception specified in <code>from</code> will be saved in the <code>__cause__</code> attribute of the new exception.</p>
<p>In the usual use case, that amounts to both <code>__cause__</code> and <code>__context__</code> containing the original exception:</p>
<pre><code>def f():
    try:
        raise Exception('first exception')
    except Exception as e:
        raise Exception('second exception') from e

try:
    f()
except Exception as e:
    print('This exception', e)
    print('Original exception', e.__context__)
    print('Also original exception', e.__cause__)
</code></pre>
<p>Here is also an example of when <code>__context__</code> is set:</p>
<pre><code>try:
    raise Exception('first exception')
except Exception as e:
    raise Exception('second exception')
</code></pre>
<p>and an example of when <code>__cause__</code> is set:</p>
<pre><code>e = Exception('first exception')
raise Exception('second exception') from e
</code></pre>
</div>
<span class="comment-copy">BTW: using <code>from</code> is mostly useful when doing <code>raise Exception("blah") from None</code> which tells python to <i>hide</i> that <code>TypeError</code> and make it unaccesible. <i>By default</i> the <code>TypeError</code> is already stored in the new exception (that's why you see the <code>During handling of the above exception blah</code> message in tracebacks) so doing <code>raise ... from err</code> is mostly useless.</span>
<span class="comment-copy">Ahh, neat. Did not know about <code>__context__</code>.</span>
