<div class="post-text" itemprop="text">
<p>I'm building a website which has a form which captures user data and runs some cgi on the user data.  One of the first steps of the cgi is that it needs to copy files from the linux webserver to windows machines.  The server would be using an active directory role acount for the copy credential.  I had hoped to simply use something like this:</p>
<p><pre><code></code></pre></p>
<pre><code>mount -t cifs -o username=someUsername,password=somePasword //someMachine/someShare /someMountPoint
</code></pre>
<p></p></div>
<div class="post-text" itemprop="text">
<p>I used the SMBConnection class found in pysmb (<a href="https://pythonhosted.org/pysmb/api/smb_SMBConnection.html" rel="nofollow noreferrer">https://pythonhosted.org/pysmb/api/smb_SMBConnection.html</a>). Very simple and no need for mounting.</p>
<pre><code> conn = SMBConnection(user, pw, myname, srv, use_ntlm_v2 = True)
 conn.connect(ip, port=139)
 file2transfer = open(filename,"r")
 conn.storeFile(share,path + filename, file2transfer, timeout=30 )
</code></pre>
<p>Make sure that the user has logon rights to the fileshare.</p>
</div>
<div class="post-text" itemprop="text">
<p>This approach has two drawbacks: the first one is that you mount windows share from your webserver. You don;t need to mount it dynamically and in no account you should not mount it for every request. Separate your implementation and infrastructure. Mount required directory in /etc/fstab and let your webserver to rely on existence of the directory.</p>
<p>But then there is another problem: what for you are copying the files to another machine? Do you want to process them there? How you want to notify windows machine that it needs to process data? Why not to run another web server on it and send it requests when you need to process something. And at this point you can drop all that network file systems and send the files within the requests. So you will have linux based frontend server which performs some actions by sending HTTP requests to windows backend server. This will also allow you to notify frontend when the processing is ready.</p>
</div>
<div class="post-text" itemprop="text">
<p>First, drop the exception block as it hides error details, anyway <code>Popen</code> and other <code>subprocess</code> methods only throw exceptions when they cannot start commands (because of command not found), which means that <code>mount</code> is actually called.</p>
<p>Second, you really don't need <code>Popen</code>, but <code>call</code> (and as a bonus you get the return code directly)</p>
<pre><code>rc = subprocess.call(["mount","-t","cifs", "-o",
                      "username="+username+",password="+password,
                      "//"+hostname+"/c$",
                      "/mntDir/"+mountDir])
if rc:
   print("mount failed")
</code></pre>
<p>In your case, the problem <em>is</em> the general exception block.</p>
<p>This method:</p>
<pre><code>def makeDir():
    tempDir = random.randrange(111111,999999)
    subprocess.Popen(["mkdir","/mntDir/"+str(tempDir)])
    return tempDir
</code></pre>
<p>returns an <em>integer</em>, so if you remove the exception block you get error because you're adding a string with an integer (<code>TypeError: Can't convert 'int' object to str implicitly</code>). It's a simple mistake that you could have seen if it hadn't for the stupid exception catch which mislead you.</p>
<p>But with the generic <code>try/except</code> block without any argument, you just get <code>mount failed</code> useless message. <em>never</em> protect your statements with <code>try:/except:</code>, that's counter-productive.</p>
<p>If you <em>really</em> want to do that,do this:</p>
<pre><code>try:
    some_command
except Exception as e:
    # print detailed exception, not just "error"
    print("Something went wrong "+str(e))
</code></pre>
<p>Now to sum it up, here's a fixed version of your code (with some slight improvements as a bonus):</p>
<pre><code>import subprocess,os
import random


def makeDir():
    # directly create directory name as a string
    tempDir = "/mntDir/{}".format(random.randrange(111111,999999))
    # no need for a subprocess, python handles this well!
    os.mkdir(tempDir)
    # returns the absolute directory name, as string
    return tempDir

def mountShare(hostname, username, password):
    mountDir = makeDir()
    rc = subprocess.call(["mount","-t","cifs", "-o",
                      "username="+username+",password="+password,
                      "//"+hostname+"/c$",
                      mountDir])
    if rc!=0:
        print("Mounting failed")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The solution was not to mount the share but rather to copy on the fly using smbclient.  The command I'm using refers to an authfile which contains an account with the relevant permissions in the form:</p>
<pre><code>username = yourUsername
password = yourPassword
domain = yourDomain
</code></pre>
<p>The permissions on this file are set to 500.</p>
<p>The smbclient command is then used to create a directory on the remote machine and copy files to that directory.</p>
<pre><code>smbclient //hostname/c$ -A /authfile -c "mkdir someDir; cd someDir/; lcd /folderToCopyFrom; prompt; recurse; mput *; exit;"
</code></pre>
<p>Thank you all for the advice, most helpful!</p>
</div>
<span class="comment-copy">You want to run a website which has administrator permissions to the Windows server (needed for the C$ share), and root permissions to mount filesystems on the Linux server, for its everyday ordinary operation? Eww. Much better to use a limited user account on the Windows server with just the right folder and share permissions, and something like <a href="http://superuser.com/a/562728">smbclient</a> on the Linux side to avoid having to mount the share at all. (Also, check the <a href="https://docs.python.org/3/library/tempfile.html" rel="nofollow noreferrer">tempfile</a> module to avoid your random.randrange bodge)</span>
<span class="comment-copy">Yes, I agree with regards to the accounts and ideally mounting would be avoided.  This site will be restricted to a small group of people and is internal but security is obviously important.  I can't really use shares on remote machines because they would need to be created on the fly but it might be possible to get the user to provide the credentials for this.  Thanks for the input, I'll certainly have a look at the possibility of using smbclient, I also like the look of that tempfile module.  Thanks</span>
<span class="comment-copy">This is absolutely the perfect solution.  I have stripped out the other code and replaced it with this.  I'm finding it much more reliable and fast.  Thanks a lot!</span>
<span class="comment-copy">Thanks, I see what you mean.  I think you understand the basic idea.  The linux apache server runs a form which uses https and requires user logons.  The data collected by the form is a username, some other simple variables and a remote windows desktop machine hostname.  The data is used to create an answer file which is copied to the remote desktop machine as well as and additional software component which I am not responsible for.  I then need to trigger an exe on the remote machine.  Everything is deleted during the process.</span>
<span class="comment-copy">Thank you very much for the edits.  What you say makes a lot of sense, thanks for the good advice!</span>
