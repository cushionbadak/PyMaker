<div class="post-text" itemprop="text">
<p>I have a dataframe <code>df</code> that loads data from a database. Most of the columns are json strings while some are even list of jsons. For example:</p>
<pre><code>id     name     columnA                               columnB
1     John     {"dist": "600", "time": "0:12.10"}    [{"pos": "1st", "value": "500"},{"pos": "2nd", "value": "300"},{"pos": "3rd", "value": "200"}, {"pos": "total", "value": "1000"}]
2     Mike     {"dist": "600"}                       [{"pos": "1st", "value": "500"},{"pos": "2nd", "value": "300"},{"pos": "total", "value": "800"}]
...
</code></pre>
<p>As you can see, not all the rows have the same number of elements in the json strings for a column. </p>
<p>What I need to do is keep the normal columns like <code>id</code> and <code>name</code> as it is and flatten the json columns like so:</p>
<pre><code>id    name   columnA.dist   columnA.time   columnB.pos.1st   columnB.pos.2nd   columnB.pos.3rd     columnB.pos.total
1     John   600            0:12.10        500               300               200                 1000 
2     Mark   600            NaN            500               300               Nan                 800 
</code></pre>
<p>I have tried using <code>json_normalize</code> like so:</p>
<pre><code>from pandas.io.json import json_normalize
json_normalize(df)
</code></pre>
<p>But there seems to be some problems with <code>keyerror</code>. What is the correct way of doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution using <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.io.json.json_normalize.html" rel="noreferrer"><code>json_normalize()</code></a> again by using a custom function to get the data in the correct format understood by <code>json_normalize</code> function.</p>
<pre><code>import ast
from pandas.io.json import json_normalize

def only_dict(d):
    '''
    Convert json string representation of dictionary to a python dict
    '''
    return ast.literal_eval(d)

def list_of_dicts(ld):
    '''
    Create a mapping of the tuples formed after 
    converting json strings of list to a python list   
    '''
    return dict([(list(d.values())[1], list(d.values())[0]) for d in ast.literal_eval(ld)])

A = json_normalize(df['columnA'].apply(only_dict).tolist()).add_prefix('columnA.')
B = json_normalize(df['columnB'].apply(list_of_dicts).tolist()).add_prefix('columnB.pos.') 
</code></pre>
<p>Finally, join the <code>DFs</code> on the common index to get:</p>
<pre><code>df[['id', 'name']].join([A, B])
</code></pre>
<p><a href="https://i.stack.imgur.com/SpBIg.png" rel="noreferrer"><img alt="Image" src="https://i.stack.imgur.com/SpBIg.png"/></a></p>
<hr/>
<p><strong><em>EDIT:-</em></strong> As per the comment by @MartijnPieters, the recommended way of decoding the json strings would be to use <a href="https://docs.python.org/3/library/json.html#json.loads" rel="noreferrer"><code>json.loads()</code></a> which is much faster when compared to using <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="noreferrer"><code>ast.literal_eval()</code></a> if you know that the data source is JSON.</p>
</div>
<div class="post-text" itemprop="text">
<p>create a custom function to flatten <code>columnB</code> then use <code>pd.concat</code></p>
<pre><code>def flatten(js):
    return pd.DataFrame(js).set_index('pos').squeeze()

pd.concat([df.drop(['columnA', 'columnB'], axis=1),
           df.columnA.apply(pd.Series),
           df.columnB.apply(flatten)], axis=1)
</code></pre>
<p><a href="https://i.stack.imgur.com/FVzRP.png" rel="noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/FVzRP.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>The quickest seems to be:</p>
<pre><code>json_struct = json.loads(df.to_json(orient="records"))
df_flat = pf.io.json.json_normalize(json_struct)
</code></pre>
</div>
<span class="comment-copy">What about values in column B ? You want to flatten the dictionaries also ?</span>
<span class="comment-copy">yes. they need to be flattened as well. there was a typo in the original question where I put columnA for all the flattened column but corrected it now.</span>
<span class="comment-copy">Great thanks for the answer ! one thing though, is the returned lists on the list_of_dicts (list(d.values())[0], list(d.values())[1]), and not the other way round? Otherwise this worked perfect for me.</span>
<span class="comment-copy">As you would know that <code>dictionaries</code> do not preserve the order while performing iteration, the values present in the <code>dict</code> were appearing in the order opposite to that of yours and hence was the need to use the slicing notation differently compared to yours. If it's appearing in the same order as you've mentioned, go ahead with it or you can even make use of an <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>Ordered Dict</code></a> to preserve the order if you want to.</span>
<span class="comment-copy">Why the (slow!) <code>ast.literal_eval()</code> call when you should be using <code>json.loads()</code>? The latter handles correct JSON data, the former only <i>Python</i> syntax, which <i>differs materially</i> when it comes to booleans, nulls and unicode data outside of the BMP.</span>
<span class="comment-copy">@MartijnPieters: Thanks for the comment. I've updated my post.</span>
<span class="comment-copy">Not only is it faster, it'll also avoid <code>ValueError</code> exceptions when <code>true</code>, <code>false</code> or <code>null</code> values are involved. JSON is not Python.</span>
