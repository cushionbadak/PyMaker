<div class="post-text" itemprop="text">
<p>I'm having trouble solving this task:</p>
<blockquote>
<p>Write a recursive function that inputs a positive integer n and
  outputs all n! permutations of {1, 2, . . . , n}. Do not use any of
  Sage’s permutation commands. Use a list to store the values and work
  with that list.</p>
</blockquote>
<p>Sample Input: <code>3</code></p>
<p>Expected Output: <code>(1,2,3), (1,3,2), (2,3,1),(2,1,3), (3,1,2), (3,2,1)</code></p>
<p>All the things that I have found online generates permutation of list not for an integer. </p>
<p>I thought of calculating my factorial will help determining my output length. I could not thing of how would I do this. Please help me out! Thank you ! </p>
<p>I have tried this </p>
<pre><code>def per(n):
   a = []
   for i in range(n):
       for j in range(n-i):
           a.append((i, j, n-i-j-1))
   return a
per(3) 
</code></pre>
<p>[(0, 0, 2), (0, 1, 1), (0, 2, 0), (1, 0, 1), (1, 1, 0), (2, 0, 0)]</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <a href="http://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/" rel="nofollow">backtracking algorithm</a> to get the permutations:</p>
<pre><code>def backtrack(n=None, arr=None,  i=0, out=None):
    if out is None:
        out = []
        arr = list(range(1, n + 1))
    if i == n:
        out.append(tuple(arr))
    else:
        for j in range(i, len(arr)):
            arr[i], arr[j] = arr[j], arr[i]
            backtrack(n, arr, i + 1, out)
            arr[i], arr[j] = arr[j], arr[i]
    return out
</code></pre>
<p>Just pass in the number of elements:</p>
<pre><code>In [18]: backtrack(3)
Out[18]: [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 2, 1), (3, 1, 2)]
</code></pre>
<p>Or using a generator function:</p>
<pre><code>def backtrack(n=None, arr=None,  i=0):
    if arr is None:
        arr = list(range(1, n + 1))
    if i == n:
        yield (tuple(arr))
    else:
        for j in range(i, len(arr)):
            arr[i], arr[j] = arr[j], arr[i]
            yield from backtrack(n, arr, i + 1)
            arr[i], arr[j] = arr[j], arr[i]



print(list(backtrack(3)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit</strong>: I created a solution that uses no modules and works recursive:</p>
<pre><code>def per(n, current_perm=[], results=[], remaining=None):
    if remaining is None:
        # Create a list of all items
        remaining = list(range(1, n+1))
    if len(remaining) == 1:
        # Only one item remaining - combine with
        # current path and add to results
        current_perm.append(remaining[0])
        results.append(current_perm)
        return
    for item in remaining:
        # Create a copy of the remaining list
        # and the current_permutation
        rem = list(remaining)
        cur = list(current_perm)
        # Remove the current item from the copy
        rem.remove(item)
        # Add the item to the current path
        cur.append(item)
        per(n, cur, results, rem)
    return results

print(per(3))
</code></pre>
<p><strong>Output:</strong> <code>[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</code></p>
</div>
<span class="comment-copy">This function isn't recursive...</span>
<span class="comment-copy">would you please help me out! I have been trying for long time, but I could not get it! Thank you !</span>
<span class="comment-copy">What you actually need is to return combinations of <code>list(range(1, n + 1))</code>. This could be done with <code>itertools.permutations(range(1, n + 1), n)</code>. So, you could take a look at <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer">the docs</a> for a possible implementation of this algorithm.</span>
<span class="comment-copy">Have a look at <a href="https://stackoverflow.com/questions/29910312/algorithm-to-get-all-the-combinations-of-size-n-from-an-array-java">this</a> post. The question appears to be the same as yours and the response explains the algorithm quite well (although it's in Java). In your case <code>n</code> and <code>k</code>should have the same value.</span>
<span class="comment-copy">Not sure why this has been so heavily downvoted, it is not trivial for a beginner especially when a question like this <a href="http://stackoverflow.com/questions/39948902/how-to-generate-all-possible-combinations-of-0-1-matrix-in-python/39948977?noredirect=1#comment67178801_39948977" title="how to generate all possible combinations of 0 1 matrix in python">stackoverflow.com/questions/39948902/…</a> gets upvoted without a line of code.</span>
<span class="comment-copy"><i>Write a recursive function</i>.</span>
<span class="comment-copy">Whoops - I overlooked that requirement. Is it appropriate to delete this answer?</span>
<span class="comment-copy">I understand. Since I have mentioned that I am not allowed to use any of Python build-in command. I believe since no one have voted, you can delete it. Thank you !</span>
<span class="comment-copy">I just updated my answer and created a recursive solution. Not sure if it works similar to the solution of @PadraicCunningham, but it works ;-)</span>
