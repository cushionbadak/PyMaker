<div class="post-text" itemprop="text">
<p>To code a name like DeAnna you type:</p>
<pre><code>name = "de\aanna" 
</code></pre>
<p>and </p>
<pre><code>print(name.title())
</code></pre>
<p>In this code <code>\a</code> capitalizes a normally uncapitalized letter. What do you code to produce a name like <code>"George von Trapp"</code> where I want to uncapitalize a normally capitalized letter?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>\a</code> does not capitalize a letter - it is the <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow">bell escape sequence</a>.</p>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#textseq" rel="nofollow"><code>str.title</code></a> simply capitalizes the first letter of any group of letters. Since the bell is not a letter, it has the same meaning as a space. The following produces equivalent capitalization:</p>
<pre><code>name = "de anna"
print(name.title())
</code></pre>
<p>Anyways, there are no capitalize/uncapitalize magic characters in python. Simply write the name properly. If you want both a proper and a lower-case version, create the <em>later</em> via <code>str.lower</code>:</p>
<pre><code>name = "George von Trapp"
print(name, ':', name.lower())
</code></pre>
<hr/>
<p>If you <strong>really</strong> want to go from <code>"georg van trapp"</code> (I'm just pretending the discussion about <code>\a</code> is over) to <code>"Georg van Trapp"</code> - welcome to having-to-decide-about-the-semantics-of-the-language-you-are-emulating.</p>
<ul>
<li><p>A simple approach is to upper-case every word, but fix some known ones.</p>
<pre><code>name = "georg van trapp"
proper_name = name.title()
proper_name.replace(' Von ', ' von ').replace(' Zu ', ' zu ').replace(' De ', ' de ')
print(name, ':', proper_name)
</code></pre></li>
<li><p>You can do that with a <code>list</code>-and-loop approach for less headache as well:</p>
<pre><code>lc_words = ['von', 'van', 'zu', 'von und zu', 'de', "d'", 'av', 'af', 'der', 'Teer', "'t", "'n", "'s"]
name = "georg van trapp"
proper_name = name.title()
for word in lc_words:
    proper_name = proper_name.replace(' %s ' % word.title(), ' %s ' % word)
print(name, ':', proper_name)
</code></pre></li>
<li><p>If names are of the form <code>First Second byword Last</code>, you can capitalize everything but the second-to-last word:</p>
<pre><code>name = "georg fritz ferdinand hannibal van trapp"
proper_name = name.title().split()  # gets you the *individual* words, capitalized
proper_name = ' '.join(proper_name[:-2] + [proper_name[-2].lower(), proper_name[-1]])
print(name, ':', proper_name)
</code></pre></li>
<li><p>Any words that are shorter than four letters (warning, not feasible for some names!!!)</p>
<pre><code>name = "georg fritz theodores ferdinand markus hannibal von und zu trapp"
proper_name = ' '.join(word.title() if len(word) &gt; 3 else word.lower() for word in name.split())
print(name, ':', proper_name)
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Why not just roll your own function for it?</p>
<pre><code> def capitalizeName(name):
     #split the name on spaces
     parts = name.split(" ")

     # define a list of words to not capitalize
     do_not_cap = ['von']

     # for each part of the name,
     # force the word to lowercase
     # then check if it is a word in our forbidden list
     # if it is not, then go ahead and capitalize it
     # this will leave words in that list in their uncapitalized state
     for i,p in enumerate(parts):
          parts[i] = p.lower()
          if p.lower() not in do_not_cap:
              parts[i] = p.title()

      # rejoin the parts of the word
      return " ".join(parts)
</code></pre>
<p>The point to the <code>do_not_cap</code> list is that allows you to further define parts you may not want to capitalize very easily.  For example, some names may have a "de" in it you may not want capitalized.</p>
<p>This is what it looks like with an example:</p>
<pre><code>name = "geOrge Von Trapp"
capitalizeName(name)
# "George von Trapp"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What do you code to produce a name like <code>"George von Trapp"</code> where I
  want to uncapitalize a normally capitalized letter?</p>
</blockquote>
<p>Letters are not auto-capitalized in Python. In your case, <code>"de\aanna"</code>(I think you should use <code>"de anna"</code> instead) is capitalised because you called <code>title()</code> on it. If I didn't misunderstand your question, what you want is simply to disable such "auto-capitalizing".</p>
<p>Just don't call <code>title()</code>:</p>
<pre><code>name = "George von Trapp"
print(name.lower())
</code></pre>
</div>
<span class="comment-copy">You're making the string <code>'Da\x07Anna'</code> which contains a "bell" character because of your <code>\a</code> It happens to look like it works, but it isn't really doing so</span>
<span class="comment-copy">Yours produces capitalization <i>with</i> a space while in OPs case this doesn't happen; so while the capitalization is equivalent the resulting strings aren't. Your second case really doesn't explain much, how could OP go with a similar trick from <code>'george von trapp'</code> to <code>'George von Trapp</code>'?</span>
<span class="comment-copy">@JimFasarakis-Hilliard The interpretation of a bell basically depends on the output destination. It may do nothing, be a space, flash the screen or <i>be an audible bell</i>. I can very well live with not giving people strings that contain escape characters they don't understand... As for here actual question 'How to produce <code>"George von Trapp"</code>' - well, by typing it of course.</span>
<span class="comment-copy">So, given a list of names, in lower case, that you want to print as proper names (first letter of each word is capitalized) but there are exceptions like de and von, '.title()' caps all words, how do you best deal with the exceptions? Just type it right is not an option.</span>
<span class="comment-copy">@MaggieK Why is typing it directly not possible? Having escape characters/signals also requires adding them explicitly.</span>
<span class="comment-copy">The concern is if I have a list of names, maybe gathered from a web site, all converted to lower case to correct typing errors, and I want to print the list proper, I want to code that some how. I am just learning Python, so Maybe it does not work that way. Ha to try.</span>
