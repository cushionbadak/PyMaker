<div class="post-text" itemprop="text">
<p>I need to join the elements in a list <strong>without using the join command</strong>, so if for example I have the list:</p>
<pre><code>[12,4,15,11]
</code></pre>
<p>The output should be:</p>
<pre><code>1241511
</code></pre>
<p>Here is my code so far:</p>
<pre><code>def lists(list1):
    answer = 0
    h = len(list1)
    while list1 != []:
        answer = answer + list1[0] * 10 ** h
        h = h - 1
        list1.pop(0)
    print(answer)
</code></pre>
<p>But, in the end, the answer ends up being <code>125610</code> which is clearly wrong.</p>
<p>I think the logic is OK, but I can't find the problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just want to print the number rather than <code>return</code> an actual <code>int</code>:</p>
<pre><code>&gt;&gt;&gt; a = [12,4,15,11]
&gt;&gt;&gt; print(*a, sep='')
1241511
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could just convert each element to a <code>string</code>, add them, and then convert back to an <code>int</code>:</p>
<pre><code>def lists(list1):
    answer=''
    for number in list1:
        answer+=str(number)
    print(int(answer))


lists([12,4,15,11])
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; 
1241511
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>s = ""
for x in map(str, x):
    s += x

print(s)
1241511
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There can be few more options like</p>
<h2>Option1</h2>
<pre><code>&gt;&gt;&gt; lst=[12,4,15,11]
&gt;&gt;&gt; str(lst).translate(None, '[,] ')
'1241511'
</code></pre>
<h2>Option 2</h2>
<pre><code>&gt;&gt;&gt; join = lambda e: str(e[0]) + join(e[1:]) if e else ""
&gt;&gt;&gt; join(lst)
'1241511'
</code></pre>
<h2>Option 3</h2>
<pre><code>&gt;&gt;&gt; ("{}"*len(lst)).format(*lst)
'1241511'
</code></pre>
<h2>Option 4</h2>
<pre><code>&gt;&gt;&gt; reduce(lambda a,b:a+b,map(str,lst))
'1241511'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>a numeric solution, using your code</p>
<pre><code>import math

def numdig(n):
  #only positive numbers
  if n &gt; 0:
    return int(math.log10(n))+1
  else:
    return 1

def lists(list1):
  answer = 0
  h = 0
  while list1 != []:
    answer = answer * 10 ** h + list1[0]
    list1.pop(0)
    if list1 != []:
      h = numdig(list1[0])
  print(answer)

lists([12,4,15,11])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may try <code>map</code> and <code>reduce</code> with <code>lambda</code> like this:</p>
<pre><code>def without_join(alist):
  try:
    return int(reduce(lambda a,b: a + b, map(str, alist)))
  except ValueError, error:
    print error

  return None


print without_join([12,4,15,11])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's an entirely numerical solution, playing off of your notion of messing with powers of 10. You were on the right track, but your implementation assumed all values were 1 digit long.</p>
<pre><code>import math

def lists(list1):
    b = 0
    foo = 0
    for item in reversed(list1):
        b += item*(10**foo)
        foo += int(math.floor(math.log10(item))) + 1
    return b

a = [12, 4, 15, 11]
print lists(a)
</code></pre>
<p>This returns <code>1241511</code>, as requested.</p>
<p>All I'm doing here is looping through the list in reverse order and keeping track of how many digits to the left I need to shift each value. This allows integers with an arbitrary number of digits.</p>
</div>
<span class="comment-copy">I think the logic is flawed, you are always multiplying by 10. That will work only if the number has single digit</span>
<span class="comment-copy">Is there a way to fix it so that numbers with more than 1 digit work?</span>
<span class="comment-copy">Why don't you do string concatenation and finally convert it back to a number?</span>
<span class="comment-copy">My guess is that that would be too close to <code>join()</code>, rather than a numerical solution.</span>
<span class="comment-copy">Does it need to print that output, or return the number 1,241,511?</span>
<span class="comment-copy">Wow, I've never seen this :o Is this only on Python 3?</span>
<span class="comment-copy">Yes, only on Python 3, with its convenient <code>print()</code>-as-a-function. :)</span>
<span class="comment-copy">Or with <code>from __future__ import print_function</code> in 2.6+</span>
<span class="comment-copy">Wow this works flawlessly...  But how does it work? Why the * before the list variable? What does "sep" command does?</span>
<span class="comment-copy">@Twhite1195 Its called <a href="https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" rel="nofollow noreferrer">unpacking argument list</a></span>
<span class="comment-copy">Though it works fine, don't use the same variable name for the iterator variable.</span>
<span class="comment-copy">thx! ...does it cause an issue ???</span>
<span class="comment-copy">Try printing <code>x</code> after the loop</span>
<span class="comment-copy">this solution is ugly .... but I wanted to know if I could do</span>
<span class="comment-copy">You can actually do <code>answer = answer * 10 ** h + list1.pop(0)</code> and remove the next line.</span>
