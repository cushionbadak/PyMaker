<div class="post-text" itemprop="text">
<p>I am trying to extract a particular "float" from a string, it contains multiple formatted "integers", "floats" and dates. The particular "float" in question is presided by some standardized text.</p>
<h3>String sample</h3>
<pre class="lang-py prettyprint-override"><code>my_string = """03/14/2019 07:07 AM
ðŸ’µSoles in mDm : 2864.35â¬‡
ðŸ”¶BTC purchase in mdm: 11,202,782.0â¬‡
"""
</code></pre>
<p>I have been able to extract the desired float pattern for, <code>2864.35</code>, from <code>my_string</code> but if this particular float changes in pattern or another float with the same format shows up, my script won't return the desired result</p>
<pre class="lang-py prettyprint-override"><code>regex = r"(\d+\.\d+)"
matches = re.findall(regex, my_string)
for match in matches:
    print(match)
</code></pre>
<ul>
<li>It might truncate the desired float because of inconsistent numerical formatting</li>
<li>It might print two floats because the numerical pattern of an undesired float is too similar to be filtered out by current regular expression <code>regex</code></li>
</ul>
<h3>Desired return from regular expression <code>regex</code></h3>
<ul>
<li>float with a flexible integer-part, sometimes comma is omitted ie. 45000.50 other times 45,000.50</li>
<li>unique line identifier: <code>Soles</code> it could be upper/lower case</li>
<li>line identifier: float prefix <code>:</code></li>
<li>it should only return <strong>one float</strong></li>
</ul>
<h3>Some variances of desired float in the Second line of the string only</h3>
<p>What you see bellow are three examples of the same line, the second line in <code>my_string</code>. The regex should be able to return only line number two despite any variations such as <strong>soles</strong> or <strong>Soles</strong></p>
<ul>
<li>ðŸ’µSoles in mDm : 2864.35â¬‡</li>
<li>soles MDM: 2,864.35</li>
<li>Soles in mdm :2,864.355</li>
</ul>
<p>Any assistance in editing or re-writing the current regular expression <code>regex</code> is greatly appreciated</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDIT - Hmmm... If it has to follow <code>soles</code> then hopefully this helps</strong></p>
<p>Try these, granted my console can't take the extra characters, but based on your input:</p>
<pre><code>&gt;&gt;&gt; my_string = """03/14/2019 07:07 AM
Soles in mDm : 2864.35
BTC purchase in mdm: 11,202,782.0
Soles in mDm : 2864.35
soles MDM: 2,864.35
Soles in mdm :2,864.355
"""


&gt;&gt;&gt; re.findall('(?i)soles[\S\s]*?([\d]+[\d,]*\.[\d]+)', my_string)

#Output
['2864.35', '2864.35', '2,864.35', '2,864.355']



&gt;&gt;&gt; re.findall('[S|s]oles[\S\s]*?([\d]+[\d,]*\.[\d]+)', my_string)

#Output
['2864.35', '2864.35', '2,864.35', '2,864.355']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want to match multiple instances then just add the <code>g</code> flag other wise it'll only match the single instance. <a href="https://regex101.com/r/fsp3FS/23" rel="nofollow noreferrer">REGEX</a> </p>
<pre><code>(?&lt;=:)\s?([\d,]*\.\d+)
</code></pre>
<p><strong>With Python,</strong></p>
<pre><code># coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"(?&lt;=:)\s?([\d,]*\.\d+)"

test_str = ("\n"
    "    ðŸ’µSoles in mDm : 2864.35â¬‡\n"
    "    soles MDM: 2,864.35\n"
    "    Soles in mdm :2,864.355\n")

matches = re.search(regex, test_str, re.IGNORECASE)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))

    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1

        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))
</code></pre>
</div>
<span class="comment-copy">Try <code>soles.*?(\d[\d,]*\.\d+)</code> with the <code>re.I</code> flag.</span>
<span class="comment-copy">float prefix <code>:</code> preceded by space e.g `  :  ` or  just <code>:</code>?</span>
<span class="comment-copy">To answer from Micale's, Try this <code>[S|s]oles.*?(\d[\d,]*\.\d+)</code> or <code>(?i)soles.*?(\d[\d,]*\.\d+)</code></span>
<span class="comment-copy">@FailSafe they line contains the unique identifier 'soles' where it could be lower or uppercase 'Soles', the float at times may properly contain a comma '2,400.00' or sometimes it might be omitted '2400.00' I hope this helps to clarify</span>
<span class="comment-copy">I think so. I provided 2 edits in this line of comments based off of Michael's. Try them  but all the credit goes to him. These: <code>[S|s]oles.*?(\d[\d,]*\.\d+)</code> or <code>(?i)soles.*?(\d[\d,]*\.\d+)</code></span>
<span class="comment-copy">Sure, but why?. I thought I was very diligent in researching, and writing the question. I'll be happy to edit, or remove inappropriate question</span>
<span class="comment-copy">I'm sure you were diligent. I edited my solution btw to include the example. The reason is because if I understood your problem properly, the solution is one that was kind of easy and many users here are very quick to -1 because they jump to conclusions.</span>
<span class="comment-copy">Thank you for the response, but the only number I want is from the following line "Soles in mDm : 2864.35"</span>
<span class="comment-copy">So none of the other numbers should match?</span>
<span class="comment-copy">It should return only the first number in your list, <code>2864.35</code>. @Michael Butscher above has it almost right, since it focuses on the 'Soles' since there is only one line with this word and number. but it should recognize lowercase as well</span>
