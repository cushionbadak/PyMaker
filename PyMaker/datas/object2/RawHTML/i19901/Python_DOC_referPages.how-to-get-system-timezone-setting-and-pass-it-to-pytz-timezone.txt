<div class="post-text" itemprop="text">
<p>We can use <code>time.tzname</code> get a local timezone name, but that name is not compatible with <code>pytz.timezone</code>.</p>
<p>In fact, the name returned by <code>time.tzname</code> is ambiguous. This method returns <code>('CST', 'CST')</code> in my system, but 'CST' can indicate four timezones:</p>
<ul>
<li>Central Time Zone (North America) - observed in North America's Central Time Zone</li>
<li>China Standard Time</li>
<li>Chungyuan Standard Time - the term "Chungyuan Standard Time" is now rarely in use in Taiwan</li>
<li>Australian Central Standard Time (ACST)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/regebro/tzlocal" rel="noreferrer"><code>tzlocal</code> module</a> returns pytz tzinfo's object corresponding to the local timezone:</p>
<pre><code>import time
from datetime import datetime

import pytz # $ pip install pytz
from tzlocal import get_localzone # $ pip install tzlocal

# get local timezone    
local_tz = get_localzone() 

# test it
# utc_now, now = datetime.utcnow(), datetime.now()
ts = time.time()
utc_now, now = datetime.utcfromtimestamp(ts), datetime.fromtimestamp(ts)

local_now = utc_now.replace(tzinfo=pytz.utc).astimezone(local_tz) # utc -&gt; local
assert local_now.replace(tzinfo=None) == now
</code></pre>
<p>It works even during daylight savings time transitions when local time may be ambiguous.</p>
<p><code>local_tz</code> also works for past dates even if utc offset for the local timezone was different at the time. <code>dateutil.tz.tzlocal()</code>-based solution fails in this case e.g., in Europe/Moscow timezone (example from 2013):</p>
<pre><code>&gt;&gt;&gt; import os, time
&gt;&gt;&gt; os.environ['TZ'] = 'Europe/Moscow'
&gt;&gt;&gt; time.tzset()
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; from dateutil.tz import tzlocal
&gt;&gt;&gt; from tzlocal import get_localzone
&gt;&gt;&gt; dateutil_tz = tzlocal()
&gt;&gt;&gt; tzlocal_tz = get_localzone()
&gt;&gt;&gt; datetime.fromtimestamp(0, dateutil_tz)                              
datetime.datetime(1970, 1, 1, 4, 0, tzinfo=tzlocal())
&gt;&gt;&gt; datetime.fromtimestamp(0, tzlocal_tz)
datetime.datetime(1970, 1, 1, 3, 0, tzinfo=&lt;DstTzInfo 'Europe/Moscow' MSK+3:00:00 STD&gt;)
</code></pre>
<p>dateutil returns <strong>wrong</strong> UTC+4 offset instead of the correct UTC+3 on 1970-01-01.</p>
<p><em>For those bumping into this in 2017</em> <code>dateutil.tz.tzlocal()</code> is still broken. The above example works now because the current utf offset is UTC+3 in Moscow (that by accident is equal to the utc offset from 1970). To demonstrate the error we can choose a date when utc offset is UTC+4:</p>
<pre><code>&gt;&gt;&gt; import os, time
&gt;&gt;&gt; os.environ['TZ'] = 'Europe/Moscow'
&gt;&gt;&gt; time.tzset()
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; from dateutil.tz import tzlocal
&gt;&gt;&gt; from tzlocal import get_localzone
&gt;&gt;&gt; dateutil_tz = tzlocal()
&gt;&gt;&gt; tzlocal_tz = get_localzone()
&gt;&gt;&gt; ts = datetime(2014, 6,1).timestamp() # get date in 2014 when gmtoff=14400 in Moscow
&gt;&gt;&gt; datetime.fromtimestamp(ts, dateutil_tz)
datetime.datetime(2014, 5, 31, 23, 0, tzinfo=tzlocal())
&gt;&gt;&gt; datetime.fromtimestamp(ts, tzlocal_tz)
datetime.datetime(2014, 6, 1, 0, 0, tzinfo=&lt;DstTzInfo 'Europe/Moscow' MSK+4:00:00 STD&gt;)
</code></pre>
<p>dateutil returns <strong>wrong</strong> UTC+3 offset instead of the correct UTC+4 on 2014-06-01.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="http://labix.org/python-dateutil#head-5fb12f4538c5a2fd83f87eea8e6c0ddd47f8b4b0"><code>tzlocal</code> function</a> from the <a href="http://pypi.python.org/pypi/python-dateutil"><code>python-dateutil</code> package</a>:</p>
<pre><code>from dateutil.tz import tzlocal

localtimezone = tzlocal()
</code></pre>
<p>Internally, this is a class that uses <code>time.timezone</code> and <code>time.altzone</code> (switching based on <code>time.daylight</code>), but creates a suitable timezone object from that.</p>
<p>You use this <em>instead</em> of a <code>pytz</code> timezone.</p>
<p>The alternative is to read the currently configured timezone from the operating system instead, but this differs widely from OS to OS. On Mac OS X you need to read the output of <code>systemsetup -gettimezone</code>:</p>
<pre><code>$ systemsetup -gettimezone
Time Zone: Europe/Copenhagen
</code></pre>
<p>On Debian and Ubuntu systems, you can read <code>/etc/timezone</code>:</p>
<pre><code>$ cat /etc/timezone
Europe/Oslo
</code></pre>
<p>On RedHat and direved systems, you'll need to read it from <code>/etc/sysconfig/clock</code>:</p>
<pre><code>$ grep ZONE /etc/sysconfig/clock
ZONE="Europe/Oslo"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A very simple method to solve this question:</p>
<pre><code>import time

def localTzname():
    offsetHour = time.timezone / 3600
    return 'Etc/GMT%+d' % offsetHour
</code></pre>
<p><strong>Update</strong>: @MartijnPieters said 'This won't work with DST / summertime.' So how about this version?</p>
<pre><code>import time

def localTzname():
    if time.daylight:
        offsetHour = time.altzone / 3600
    else:
        offsetHour = time.timezone / 3600
    return 'Etc/GMT%+d' % offsetHour
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since Python 3.6, you can simply run <code>naive_datetime.astimezone()</code> and system time zone will be added to <code>naive_datetime</code> object.</p>
<blockquote>
<p>If called without arguments (or with tz=None) the system local timezone is assumed for the target timezone. The .tzinfo attribute of the converted datetime instance will be set to an instance of timezone with the zone name and offset obtained from the OS.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone</a></p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now().astimezone().isoformat(timespec='minutes')
'2018-10-02T13:09+03:00'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>i don't know if this is useful for you or not, but i think it answers your more general problem:</p>
<p>if you have a date that is in an ambiguous timezone, like <code>CST</code>, <a href="https://github.com/andrewcooke/simple-date" rel="nofollow">simple-date</a> (python 3.2+ only, sorry) can automate the search, and allows you to do things like prefer certain countries.</p>
<p>for example:</p>
<pre><code>&gt;&gt;&gt; SimpleDate('2013-07-04 18:53 CST')
Traceback [...
simpledate.AmbiguousTimezone: 3 distinct timezones found: &lt;DstTzInfo 'Australia/Broken_Hill' CST+9:30:00 STD&gt;; &lt;DstTzInfo 'America/Regina' LMT-1 day, 17:01:00 STD&gt;; &lt;DstTzInfo 'Asia/Harbin' LMT+8:27:00 STD&gt; (timezones=('CST',), datetime=datetime.datetime(2013, 7, 4, 18, 53), is_dst=False, country=None, unsafe=False)
&gt;&gt;&gt; SimpleDate('2013-07-04 18:53 CST', country='CN')
SimpleDate('2013-07-04 18:53 CST')
&gt;&gt;&gt; SimpleDate('2013-07-04 18:53 CST', country='CN').utc
SimpleDate('2013-07-04 10:53 UTC', tz='UTC')
</code></pre>
<p>note how, by specifying a country you reduce the range of possible values sufficiently to allow conversion to UTC.</p>
<p>it's implemented by doing a search over the timezones in PyTZ:</p>
<pre><code>&gt;&gt;&gt; SimpleDate('2013-07-04 18:53 CST', country='CN', debug=True)
...
PyTzFactory: Have country code CN
PyTzFactory: Country code CN has 5 timezones
PyTzFactory: Expanded country codes to 5 timezones
PyTzFactory: Expanding ('CST',)
PyTzFactory: Name lookup failed for CST
PyTzFactory: Found CST using Asia/Shanghai
PyTzFactory: Found CST using Asia/Harbin
PyTzFactory: Found CST using Asia/Chongqing
PyTzFactory: Found CST using Asia/Urumqi
PyTzFactory: Found CST using Asia/Kashgar
PyTzFactory: Expanded timezone to 5 timezones
PyTzFactory: New offset 8:00:00 for Asia/Shanghai
PyTzFactory: Known offset 8:00:00 for Asia/Harbin
PyTzFactory: Known offset 8:00:00 for Asia/Chongqing
PyTzFactory: Known offset 8:00:00 for Asia/Urumqi
PyTzFactory: Known offset 8:00:00 for Asia/Kashgar
PyTzFactory: Have 1 distinct timezone(s)
PyTzFactory: Found Asia/Shanghai
...
SimpleDate('2013-07-04 18:53 CST')
</code></pre>
<p>finally, to answer the question asked directly, it also wraps tzlocal, as mentioned in another answer here, so will automatically do what you expect if you don't give a timezone.  for example, i live in chile, so</p>
<pre><code>&gt;&gt;&gt; SimpleDate()
SimpleDate('2013-07-04 19:21:25.757222 CLT', tz='America/Santiago')
&gt;&gt;&gt; SimpleDate().tzinfo
&lt;DstTzInfo 'America/Santiago' CLT-1 day, 20:00:00 STD&gt;
</code></pre>
<p>gives my locale's timezone (ambiguous or not).</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import pytz
</code></pre>
<p>say you have list of utc DateTime values in OBJ list object.</p>
<pre><code>tz=pytz.timezone('Asia/Singapore')
</code></pre>
<p>find below url to get respective timezone positional string parameter
<a href="https://stackoverflow.com/questions/13866926/is-there-a-list-of-pytz-timezones">Is there a list of Pytz Timezones?</a></p>
<p>Now our tz is object having singapore Time</p>
<pre><code>result=[]
for i in OBJ:
    i=i+tz.utcoffset(i)
    result.append(i)
</code></pre>
<p>result list object has DateTime value of your respective timezone</p>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/7669938/4279">Get the Olson TZ name for the local timezone?</a></span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/3168096/4279">Getting computer's utc offset in Python</a></span>
<span class="comment-copy">Interesting, so the <code>tzlocal</code> module returns a <code>pytz</code> zone?</span>
<span class="comment-copy">yes, pytz tzinfo's object. I've update the answer, to mention it explicitly</span>
<span class="comment-copy">Time zones seem to behave according to something like Hoffstadter's Law: they're more complicated than you think, even when you allow for the fact they're more complicated than you think.</span>
<span class="comment-copy">For those bumping into this in 2017, <code>dateutil.tz.tzlocal()</code> is no longer broken and does not exhibit the above mentioned behaviour.</span>
<span class="comment-copy">@WhyNotHugo: <code>dateutil.tz.tzlocal()</code> is still broken. I've updated the answer.</span>
<span class="comment-copy">Thanks, but <code>pytz.timezone</code> needs a timezone name.</span>
<span class="comment-copy">@user805627: You use it <i>instead of</i> a pytz timezone.</span>
<span class="comment-copy">But <code>pytz</code> has already used in many places of my project, I don't want to instead it just because this problem.</span>
<span class="comment-copy">@user805627: I've provided you with some alternatives.</span>
<span class="comment-copy"><code>dateutil.tz.tzlocal()</code> doesn't work for past dates if utc offset for the local timezone was different at the time.</span>
<span class="comment-copy">This won't work with DST / summertime.</span>
<span class="comment-copy">Uh, should timezone change with DST? I've never used DST. I think DST only changes time, doesn't change timezone.</span>
<span class="comment-copy"><code>time.daylight</code> doesn't say whether DST is in effect right now, it just says whether the timezone has DST at all. You could compute utc  offset as follows: <code>is_dst = time.daylight and time.localtime().tm_isdst &gt; 0</code>. You could pass POSIX timestamp to <code>localtime()</code>, to compute <code>is_dst</code> at a different time moment. <code>utc_offset = - (time.altzone if is_dst else time.timezone)</code> (note: the sign is the opposite of that of used in the name)</span>
<span class="comment-copy">This will not work with <a href="http://www.timeanddate.com/time/time-zones-interesting.html" rel="nofollow noreferrer">half-hour and 45-minute timezones</a>.</span>
<span class="comment-copy">Date &amp; time math is like cryptography: DIY is dangerous. Leave it to the experts.</span>
<span class="comment-copy">Thank bro very much!</span>
