<div class="post-text" itemprop="text">
<p>argv</p>
<p>What on Earth is it!?</p>
<p>Edit: If you can, will you please write a line or two and explain how it works? </p>
</div>
<div class="post-text" itemprop="text">
<p>Try this simple program, name it as <code>program.py</code></p>
<pre><code>import sys
print sys.argv
</code></pre>
<p>and try executing</p>
<pre><code>python program.py
python program.py a b c
python program.py hello world
</code></pre>
<p>Note what is argv now.</p>
</div>
<div class="post-text" itemprop="text">
<p>It means <em>arguments vector</em> and it contains the arguments passed to the program. The first one is always the program name.</p>
<p>For example, if you executed your Python program like so...</p>
<pre><code> $ python your_script.py --yes
</code></pre>
<p>...then your <code>sys.argv</code> will contain <code>your_script.py</code> and <code>--yes</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Before you waste time "starting to learn some higher levels of code", you need to learn how to find information like this. Knowing how to look up an unfamiliar function/class/variable, without having to wait 30-60 minutes for people on SO to answer you (and apparently rack up multiple downvotes in the process), will come in far more useful than adding one more piece of information to your repertoire.</p>
<p>From the built-in help:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; help(sys)
…
argv -- command line arguments; argv[0] is the script pathname if known
…
</code></pre>
<p>This works with any module. Often, individual classes and functions within the modules have more detailed information (but that doesn't work for argv, since it's just a <code>list</code>, and lists don't have custom help).</p>
<p>If that's not enough information, <a href="http://docs.python.org/3/library/sys.html" rel="noreferrer">the documentation</a> (or <a href="http://docs.python.org/2/library/sys.html" rel="noreferrer">the 2.x documentation</a>) says:</p>
<blockquote>
<p>sys.<strong>argv</strong></p>
<p>The list of command line arguments passed to a Python script. argv[0] is the script name (it is operating system dependent whether this is a full pathname or not). If the command was executed using the -c command line option to the interpreter, argv[0] is set to the string '-c'. If no script name was passed to the Python interpreter, argv[0] is the empty string.</p>
<p>To loop over the standard input, or the list of files given on the command line, see the fileinput module.</p>
</blockquote>
<p>The first web result for googling "python argv" is <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=4829" rel="noreferrer">a blog post by Python author Guido</a> that may be a bit too advanced for you, but the second one is <a href="http://www.tutorialspoint.com/python/python_command_line_arguments.htm" rel="noreferrer">a tutorial</a> on "Command Line Arguments".</p>
<p>As most of these things tell you, many simple scripts can often just use <code>fileinput</code> instead of dealing with <code>argv</code> directly, while more complicated scripts often need to use <code>argparse</code> (or <code>optparse</code>, <code>getopt</code>, or other alternatives, if you need to work with Python 2.6 or earlier).</p>
<p>One example where <code>sys.argv</code> is just right is this trivial program to convert relative pathnames to absolute (for those who aren't on linux or other platforms that come with an abspath, GNU readlink, or similar tool built-in):</p>
<pre><code>import os, sys
print('\n'.join(os.path.abspath(arg) for arg in sys.argv[1:]))
</code></pre>
<p>Or this "add" tool that just adds a bunch of numbers (for those stuck with cmd.exe or other defective shells that don't have arithmetic built in):</p>
<pre><code>import sys
print(sum(int(arg) for arg in sys.argv[1:]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can run python program with or without arguments. If you use arguments they are inside argv vector. For example</p>
<p><strong>PYTHON PROGRAM!!!</strong></p>
<pre><code>#!/usr/bin/python

import sys

print 'Number of arguments:', len(sys.argv), 'arguments.'
print 'Argument List:', str(sys.argv)
</code></pre>
<p><strong>RUN SCRIPT LIKE THIS</strong></p>
<pre><code>$ python test.py arg1 arg2 arg3
</code></pre>
<p><strong>AND RESULT IS</strong></p>
<pre><code>Number of arguments: 4 arguments.
Argument List: ['test.py', 'arg1', 'arg2', 'arg3']
</code></pre>
<p>examples are from 
<a href="http://www.tutorialspoint.com/python/python_command_line_arguments.htm" rel="nofollow">tutorialspoint</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you have an executable python script and call it with arguments like this:</p>
<pre><code>myscript.py -a -b --input myfile --another_argument
</code></pre>
<p>then <code>sys.argv</code> is a list containing:</p>
<pre><code>['myscript.py', '-a', '-b', '--input', 'myfile', '--another_argument']
</code></pre>
<p>Using it is the only way to access these arguments, and that is its main use.  However, most applications use libraries such as the <a href="http://docs.python.org/2.7/library/argparse.html" rel="nofollow">argparse</a> module to access this information without needing to use <code>sys.argv</code> directly.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/sys.html" rel="nofollow noreferrer">sys</a> .argv will display the command line args passed when running a script or you can say sys.argv will store the command line arguments passed in python while running from terminal</p>
<p><strong>It stores the arguments in a list ds.</strong> </p>
<p><em>sample usage:</em> 
Create a file say: cmdlineargs.py and put the following in it: </p>
<pre><code>import sys
print sys.argv 
</code></pre>
<p>Now run the file in your terminal/cli : </p>
<pre><code>python cmdlineargs.py 
</code></pre>
<p>or something like</p>
<pre><code>python cmdlineargs.py example example1
</code></pre>
<p>Notice what happens now. Your script will print everything passed in your cmd line argument while you ran that script. </p>
<p>Important to know: </p>
<pre><code>print len(sys.argv) #total arguments passed
sys.argv[0] #this is your script name stored in sys.argv.
print sys.argv #display all arguments passed
sys.argv[0] #is the first argument passed, which is basically the filename.
sys.argv #stores all cmd line args in a list ds
</code></pre>
<p>You can look up each specific argument passed like this, probably:</p>
<pre><code>cmdLineArg = len(sys.argv)
i=0
for argv in sys.argv:
    if cmdLineArg&lt;=len(sys.argv) :
        print "argument",i,"is", str(sys.argv[i])
        i=i+1
    else:
        print "Only script name in sys.argv"
</code></pre>
<p><strong>Sample result:</strong></p>
<p>Say you run the following in your terminal.</p>
<pre><code>python cmdlineargs.py example example1
</code></pre>
<p>Your result should look something like: </p>
<pre><code>argument 0 is cmdlineargs.py
argument 1 is example
argument 2 is example1  
</code></pre>
<p><em>Notice argument 0 is the same as the file name</em>  . Hope this was helpful.</p>
<hr/>
<p><em>Thanks for the upvotes,</em> improving my answer for the loop. A little more pythonian answer should look like this:</p>
<pre><code>i=0
for argv in sys.argv:
    if cmdLineArg==1:
        print "Only script name in sys.argv"
    elif (cmdLineArg&gt;1 and cmdLineArg&lt;=len(sys.argv)):
        print "argument ",i,"is", str(argv)
        i=i+1
print "total arguments passed:\t", totalargs
</code></pre>
<p><em>I too am new to python so I had a habit of declaring i and j for traversing arrays. :)</em></p>
</div>
<div class="post-text" itemprop="text">
<p>Script printArgv.py: </p>
<pre><code>import sys
print sys.argv.__class__
spam = sys.argv[1:]
print spam
</code></pre>
<p>Run it with:
<code>python printArgv.py 1 2 3 4 5</code></p>
<p>You would find the output:</p>
<pre><code>&lt;type 'list'&gt;
['1', '2', '3', '4', '5']
</code></pre>
<p>Which means the sys.argv is a list of parameters you input following the script name.</p>
</div>
<span class="comment-copy">Do you know about Python's built-in <code>help</code>? Just start up an interpreter, type <code>import sys</code> then <code>help(sys)</code>, and it says "argv -- command line arguments; argv[0] is the script pathname if known". Alternatively, look at the online documentation (<a href="http://docs.python.org/2/library/sys.html" rel="nofollow noreferrer">docs.python.org/2/library/sys.html</a> for 2.7, <a href="http://docs.python.org/3/library/sys.html" rel="nofollow noreferrer">docs.python.org/3/library/sys.html</a> for 3.3). You'll find things much faster that way than asking a question on SO and waiting an hour for people to do your work for you. (And if you can't find the docs, as Dmitriy says, google is your friend.)</span>
<span class="comment-copy">Haha! Thanks a ton. So how exactly is it useful if I always have to type the arguments in the terminal/command prompt whenever I run the program?</span>
<span class="comment-copy">It's useful because sometimes you want to run the same program many times on different arguments. Think of built-in tools like <code>ls</code> (or <code>dir</code> if you're on Windows). You don't want one tool for <code>ls all text files in the current directory</code>, another for <code>ls all files in my home directory, including the hidden ones</code>, and so on for every possible combination. Instead, you just have a single tool, and you can type <code>ls *.txt</code> or <code>ls -a ~</code> or any of zillions of other combinations.</span>
<span class="comment-copy">+1 because this shows a useful way to find the answer experimentally, instead of just rewording what's in the documentation.</span>
<span class="comment-copy">It would be useful to show what argv actually contains for each of those examples.</span>
<span class="comment-copy">the <code>str()</code> is unnecessary.</span>
<span class="comment-copy">It's true that this is the only way to access these arguments (except on Windows), but it's a bit misleading. Very often you'll use <code>fileinput</code> or <code>argparse</code> instead—and of course those modules themselves do use <code>sys.argv</code> to access the arguments, but as a user you don't need to know that.</span>
<span class="comment-copy">That's what my last sentence was supposed to indicate, but perhaps it wasn't very clear...</span>
<span class="comment-copy">Yes, I was just suggesting making it a bit more clear—it's already technically correct.</span>
<span class="comment-copy">Thanks for the upvotes. Improving my answer further: A little more pythonian answer should look like this:</span>
<span class="comment-copy">cmdLineArg = len(sys.argv) i=0 for argv in sys.argv:     if cmdLineArg==1:     	print "Only script name in sys.argv"     elif (cmdLineArg&gt;1 and cmdLineArg&lt;=len(sys.argv)):         print "argument ",i,"is", str(argv)         i=i+1 print "total arguments passed:\t", totalargs</span>
