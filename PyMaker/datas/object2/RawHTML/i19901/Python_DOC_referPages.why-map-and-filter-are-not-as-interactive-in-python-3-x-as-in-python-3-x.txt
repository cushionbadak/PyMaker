<div class="post-text" itemprop="text">
<p>I used to program interactively in Python 2.7 with IDLE. In 2.7, when I did things like:</p>
<pre><code>map(... some fn ..., ... some collection ...)
</code></pre>
<p>or</p>
<pre><code>filter(... some fn ..., ... some collection ...)
</code></pre>
<p>I got the result as a collection resulting from applying the function.</p>
<p>After upgrading to Python 3.2, when I do the same I just get "Filter object" or "Map object" and have to manually iterate through the collection to see the result.</p>
<p>Was this intended and do you know any Python 3.2 IDE that will behave like old IDLE with respect to printing function outputs? I'm basically looking for "REPL for Python".</p>
</div>
<div class="post-text" itemprop="text">
<p>This has nothing to do with IDLE; the <a href="http://docs.python.org/3/library/functions.html#filter" rel="nofollow"><code>filter()</code></a> and <a href="http://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map()</code></a> functions have changed in Python 3 and now return an iterator instead of a list:</p>
<blockquote>
<p><code>filter</code>: Construct an iterator...</p>
<p><code>map</code>: Return an iterator...</p>
</blockquote>
<p>Use <code>list(filter(...))</code> and <code>list(map(...))</code> if you want to see the results as lists.</p>
<p>Alternatively, you can use list comprehensions:</p>
<pre><code>[func(item) for item in somelist]  # same as list(map(func, somelist))
[item for item in somelist if func(item)]  # same as filter(func, somelist))
</code></pre>
</div>
<span class="comment-copy">The answer to the actual question, as given below by Martijn, is factual.  With the red-herring of Idle removed, I believe this duplicates other questions about the change to map, filter, range, and other builtin functions.</span>
<span class="comment-copy">Thanks for explaining. I'm upset by this. I will revert to 2.7.</span>
<span class="comment-copy">@PiotrGorak: Don't be. The <code>map()</code> and <code>filter()</code> functions just got a whole lot more efficient. I've provided list comprehension alternatives too.</span>
