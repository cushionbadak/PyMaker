<div class="post-text" itemprop="text">
<p>I have this much already i just don't understand how to make it read an unspecified number.</p>
<pre><code>NUMBER_OF_SCORES = (1-100):
numbers = [] 

sum = 0

for i in range(NUMBER_OF_SCORES): 
    value = eval(input("Enter a new number: ")) 
    numbers.append(value)

    sum += value

average = sum / NUMBER_OF_SCORES

count = 0 # The number of elements above average

for i in range(NUMBER_OF_SCORES): 
    if numbers[i] &gt; average:     
        count += 1

count1 = 0

for i in range(NUMBER_OF_SCORES): 
    if numbers[i] &lt; average:
        count1 += 1

stop = "stop"

if numbers (1&lt;=100):
    print("Average is", average*2)
elif numbers (stop):
    print("Number of elements above the average is", count)

else:
    print("sorry i don't understand.")"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For "read on unspecified number of scores", maybe you want a loop and the user hits <kbd>ctrl+D</kbd> to stop?  You can do this by catching <code>EOFError</code> from <code>input()</code>.</p>
<pre><code>scores = []
while True:
    try:
        scores.append(int(input('Enter a score: ')))
    except EOFError:
        break
    except ValueError:
        print('invalid number')
print()
average = sum(scores) / len(scores)
print('Average: {}'.format(average))
print('Number of scores above average: {}'
      .format(sum(x &gt; average for x in scores)))
</code></pre>
<p>Output:</p>
<pre>
Enter a score: <b>1</b>
Enter a score: <b>2</b>
Enter a score: <b>3</b>
Enter a score: <b>4</b>
Enter a score: <kbd>ctrl+D</kbd>
Average: 2.5
Number of scores above average: 2
</pre>
<p>As mentioned, <code>eval</code> is dangerous and you should avoid it.  <strong>DO NOT ATTEMPT THE FOLLOWING:</strong></p>
<pre>
Enter a score: <b>__import__('os').system('rm -rf $HOME')</b>
</pre>
</div>
<div class="post-text" itemprop="text">
<p>Your question is awkwardly phrased, but I think by <em>'read an unspecified number'</em> what you are looking for is generating a random value - in which case, you want <code>random.randint()</code>.</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.randint(1, 100)
17
&gt;&gt;&gt; random.randint(1, 100)
30
&gt;&gt;&gt; random.randint(1, 100)
84
</code></pre>
<p>Also note that you don't need to do so many loops to achieve what you are trying to do. If you are looping over a range of indices in python rather than looping over the list itself, you are doing something wrong. In this case, it's far easier to use <a href="http://docs.python.org/3/library/functions.html#sum" rel="nofollow">the built in <code>sum()</code> function</a>.</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; numbers = [random.randint(0, 100) for _ in range(100)]
&gt;&gt;&gt; numbers
[45, 81, 46, 80, 67, 57, 72, 47, 87, 13, 5, 56, 87, 5, 74, 7, 88, 1, 36, 48, 97, 39, 16, 31, 52, 30, 14, 58, 43, 17, 70, 85, 37, 49, 28, 1, 33, 73, 90, 86, 75, 42, 27, 91, 100, 86, 59, 85, 43, 59, 27, 24, 11, 56, 95, 36, 3, 10, 40, 42, 10, 71, 75, 10, 69, 86, 63, 6, 56, 95, 91, 31, 40, 13, 5, 5, 31, 28, 36, 94, 22, 77, 100, 36, 98, 85, 23, 61, 92, 94, 17, 91, 25, 43, 55, 7, 9, 57, 14, 39]
&gt;&gt;&gt; average = sum(numbers)/len(numbers)
&gt;&gt;&gt; average
49
&gt;&gt;&gt; sum(number &gt; average for number in numbers)
46
&gt;&gt;&gt; sum(number &lt; average for number in numbers)
53
</code></pre>
<p>Here I have also used <a href="http://www.youtube.com/watch?v=t85uBptTDYY" rel="nofollow">list comprehensions and generator expressions</a>, which are useful for these kind of operations.</p>
<p>Alongside this, <code>eval()</code> is a really bad way to get a number from a string. Use <code>int(some_string)</code> instead.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to clarify what you mean by unspecified. If you want it to be user determined, you can pass it in as an argument, eg</p>
<pre><code>import sys

NUMBER_SCORES=sys.argv[1]
</code></pre>
<p>or with an actual argument parsing package like argparse. </p>
<p>Or you can prompt the user for a number of scores before reading in the scores. </p>
<p>@Lattyware has a great answer for the random case. </p>
</div>
<span class="comment-copy">I tried to tidy this up a bit - it'd be useful for future posts if you look at how to format codeblocks correctly. I'll also point out this isn't syntactically correct code...</span>
<span class="comment-copy">thany you very much. And sorry for the ambiguity. I meant a user defined number of scores.</span>
<span class="comment-copy"><code>average = sum(numbers) / float(len(numbers))</code> ?</span>
<span class="comment-copy">@JonClements As he uses <code>eval()</code> on <code>input()</code>, we can presume he is using 3.x, where we don't need to do that. In 2.x, that or <code>from __future__ import division</code> would be necessary.</span>
<span class="comment-copy">Excellent point! I keep forgetting 3.x does true division :(</span>
<span class="comment-copy">@JonClements It's better than forgetting it the other way around. I hate it whenever I have to move back to 2.x these days.</span>
<span class="comment-copy">@Lattyware Thank you for the help, and yea my professor is making us run everything in 3.2. I've learned more from the people on stackoverflow than my professor though.</span>
