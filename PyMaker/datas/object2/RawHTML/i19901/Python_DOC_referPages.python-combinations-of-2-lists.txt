<div class="post-text" itemprop="text">
<p>What is the <code>pythonic</code> way to calculated all the product combinations of two lists. So given two lists of length <code>n</code> I'd liked to return a list of length <code>2^n</code> containing the products. </p>
<p>Like <code>list(itertools.product(on,off))</code> but the results should use all four elements not only combination pairs like:</p>
<pre><code>[(1.05, 5.53), (1.05, 3.12), (1.05, 3.75), (1.05, 4.75), (1.5, 5.53), (1.5, 3.12), (1.5, 3.75), (1.5, 4.75), (2.1, 5.53), (2.1, 3.12), (2.1, 3.75), (2.1, 4.75), (1.7, 5.53), (1.7, 3.12), (1.7, 3.75), (1.7, 4.75)]
</code></pre>
<p>So more like this:</p>
<pre><code>off = [5.53,3.12,3.75,4.75]
on = [1.05,1.5,2.1,1.7]

# calculate combinations
x = combinations(on,off)

# Where... 
# x[0] = off[0] * off[1] * off[2] * off[3] i.e
# x[0] = 5.53 * 3.12 * 3.75 * 4.75
#
# x[1] = off[0] * off[1] * off[2] * on[3] i.e
# x[1] = 5.53 * 3.12 * 3.75 * 1.7
#
# x[2] = off[0] * off[1] * on[2] * on[3] i.e
# x[2] = 5.53 * 3.12 * 2.1 * 1.7
#
# ...
#
# x[15] = on[0] * on[1] * on[2] * on[3] i.e
# x[15] = 1.05 * 1.5 * 2.1 * 1.7
</code></pre>
<p>The output can be similar to the <code>itertools.product()</code> method <em>i.e</em> <code>[(5.53, 3.12, 3.75, 4.75),(5.53, 3.12, 3.75, 1.7), ...]</code>  I need to calculate the product but I'm interesting in the combination method. </p>
<p><em>Note:</em> When I say <code>pythonic</code> way of doing this I mean a simple one or two lines taking advantage of pythons structures, libraries <em>(itertools ect)</em>. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can generate all <code>2**4</code> possibilities by starting with <code>itertools.product([0, 1], 4)</code>.  This enumerates all possible sequences of <code>0</code>s and <code>1</code>s of length 4, and then you can translate each 0-1 sequence to a sequence of values from <code>off</code> and <code>on</code>, by taking <code>off[i]</code> if the ith element of the 0-1 sequence is <code>0</code>, and <code>on[i]</code> otherwise.  In code: </p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; off = [5.53,3.12,3.75,4.75]
&gt;&gt;&gt; on = [1.05,1.5,2.1,1.7]
&gt;&gt;&gt; for choices in itertools.product([0, 1], repeat=len(off)):
...     print [(on[i] if choice else off[i]) for i, choice in enumerate(choices)]
... 
[5.53, 3.12, 3.75, 4.75]
[5.53, 3.12, 3.75, 1.7]
[5.53, 3.12, 2.1, 4.75]
[5.53, 3.12, 2.1, 1.7]
... &lt;10 more entries omitted ...&gt;
[1.05, 1.5, 2.1, 4.75]
[1.05, 1.5, 2.1, 1.7]
</code></pre>
<p>To print the products instead of the lists:</p>
<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; for choices in itertools.product([0, 1], repeat=len(off)):
...     elts = [(on[i] if choice else off[i]) for i, choice in enumerate(choices)]
...     print reduce(operator.mul, elts, 1)
... 
307.32975
109.9917
172.10466
61.595352
...
</code></pre>
<p>If you have numpy available and are willing to work with numpy arrays instead of Python lists, then there are some nice tools like <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.choose.html" rel="nofollow">numpy.choose</a> available.  For example:</p>
<pre><code>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.choose([0, 1, 0, 1], [off, on])
array([ 5.53,  1.5 ,  3.75,  1.7 ])
&gt;&gt;&gt; numpy.product(numpy.choose([0, 1, 0, 1], [off, on]))
52.880624999999995
</code></pre>
<p>Combining with the earlier solutions gives:</p>
<pre><code>&gt;&gt;&gt; for c in itertools.product([0, 1], repeat=4):
...     print numpy.product(numpy.choose(c, [off, on]))
... 
307.32975
109.9917
172.10466
61.595352
147.7546875
52.880625
...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You were very close, <a href="http://docs.python.org/3/library/itertools.html#itertools.combinations" rel="noreferrer"><code>itertools.combinations()</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Is this what you want:</p>
<pre><code>off = [5.53,3.12,3.75,4.75]
on = [1.05,1.5,2.1,1.7]
import itertools as it
import operator

indices = list(it.product([0,1],[0,1],[0,1],[0,1]))
off_on = off,on
a = [reduce(operator.mul,(off_on[z][i] for i,z in enumerate(x))) for x in indices]
print a


#Numpy solution
import numpy as np
indices = list(it.product([0,1],[0,1],[0,1],[0,1]))
off_on = off,on
b = np.array([off,on])
loff = range(len(off))
aa = [np.prod(b[list(x),loff]) for x in indices]

print aa
print aa == a
</code></pre>
</div>
<span class="comment-copy">you want the cartesian product of the lists?</span>
<span class="comment-copy">@Woot4Moo No, that is what <code>itertools.product()</code> does.</span>
<span class="comment-copy">I don't think my question was clear enough <code>list(itertools.combinations(off+on,4))</code> produces the number of ways to order 8 items in length of groups of 4.. i.e n!/(k!(n-k)!) = 70 ways. I want the 16 Binary combinations, think of it as a sports bet 8 teams are playing, the number of results for the 4 matches is 16 different combinations. Hope this clears up what I am asking for.</span>
<span class="comment-copy">@sudo_o -- This still seems unclear.  If it's 8 teams playing, how are the teams matched up?  <code>off[i]</code> plays <code>on[i]</code>?  If thats the case, why do you expect to get <code>x[1] = off[0] * off[1] * off[2] * on[0]</code> instead of <code>x[1] = off[0] * off[1] * off[2] * on[3]</code>?</span>
<span class="comment-copy">@mgilson Yes <code>off[i]</code> vs <code>on[i]</code> it was a typo thanks for pointing it out, I have made the edit.</span>
<span class="comment-copy">Please see my comment on Lattyware's answers and Mark Dickinson answer. I don't think I was clear enough but I'm not trying to calculate <code>n!/(k!(n-k)!</code></span>
<span class="comment-copy">I think I get it now.  See my updated solution...</span>
<span class="comment-copy"><code>print len(a)</code> gives 70 not 16 so nope.</span>
