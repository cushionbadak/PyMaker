<div class="post-text" itemprop="text">
<p>A number is strong number if the sum of the factorials of the individual digits is equal to the number itself.
For example: 145 = 1! + 4! +5!</p>
<p>I wrote the following code in python for this:</p>
<pre><code>import math
def strong_num():
    return [x for x in range(1,1000) if x==int(reduce(lambda p,q:math.factorial(int(p))+math.factorial(int(q)),str(x)))]

print strong_num()
</code></pre>
<p>but the interpreter never returns??
What is wrong with this code?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>reduce</code> input is wrong, the you shouldn't compute the factorial of <code>p</code>. In fact, it is easier to just use <code>sum</code>:</p>
<pre><code>return [x for x in range(1, 1000) 
          if x == sum(math.factorial(int(q)) for q in str(x))]
</code></pre>
<hr/>
<p>The <a href="http://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow"><code>functools.reduce</code></a> function can be  considered as:</p>
<pre><code>reduce(f, [a, b, c, d, ...]) == f(f(f(a, b), c), d) ...
</code></pre>
<p>So, for instance, if x == 145, then your <code>reduce</code> part will compute</p>
<pre><code>   int(reduce(lambda p, q: factorial(int(p)) + factorial(int(q)), str(x)))
== int(reduce(lambda p, q: factorial(int(p)) + factorial(int(q)), "145"))
== int(factorial(factorial(1) + factorial(4)) + factorial(5))
== int(factorial(1 + 24) + 120)
== int(15511210043330985984000000 + 120)
== 15511210043330985984000120
</code></pre>
<p>The interpreter doesn't finish likely because of needing to compute the factorial of an extremely large number (consider (2 Ã— 9!)!...)</p>
<p>If you still need to keep the <code>reduce</code>, you should change it to:</p>
<pre><code> reduce(lambda p,q: p + math.factorial(int(q)),  str(x),  0)
#                   ^                                     ^
#                   No need to factorial                  Add initializer too
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>What is Strong number?</strong></p>
<p>Strong number are those numbers whose sum of factorial of digits is equal to the original number.
<strong>For example:</strong>
<em>145 is strong number.</em> Since, 1! + 4! + 5! = 145</p>
<pre><code>num = int(input("Enter any number"))
user_given_no=num
i = 0
fact = 1
fact_list = []
diff_no = []
while num != 0:
    i = num % 10
    num = num//10
    diff_no.append(i)


for y in diff_no:

    x = y
    fact = 1
    while x != 0:
        fact *= x

        x -= 1
    fact_list.append(fact)

sum = 0
for x in fact_list:
    sum += x

if sum == user_given_no:
    print("Strong number")
else:
   print("Not a Strong number")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are not properly decomposing the number into its component digits. You need reduce to operate the lambda over a list of integers, and str(x) does not produce a list of integers.</p>
</div>
<span class="comment-copy">I am trying to use the <code>lambda</code> here.... i know there are other ways to do it.... check this <a href="http://ideone.com/8cERCb" rel="nofollow noreferrer">ideone.com/8cERCb</a></span>
<span class="comment-copy">It's easier to understand what the code does if you do it in steps, instead of in one long near unreadable line.</span>
<span class="comment-copy">just for the curiosity: <code>print "0, 1, 2, 145, 40585"</code> would solve the problem, too</span>
<span class="comment-copy">isn't what you said is a different way of doing it??</span>
<span class="comment-copy">is it wrong to use <code>lambda</code> in this scenario?? we use it for sum of numbers right? y not here??</span>
<span class="comment-copy">@sasidhar: No it is wrong to use <code>reduce</code>. See update.</span>
<span class="comment-copy">what the?? string is iterable?? am i wrong??</span>
<span class="comment-copy">Sorry - I got the wrong hang of it. I didn't see your taking the int. I think the other guy got the right answer.</span>
