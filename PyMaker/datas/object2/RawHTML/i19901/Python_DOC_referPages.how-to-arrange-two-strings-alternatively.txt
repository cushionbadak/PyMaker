<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Possible Duplicate:</strong><br/>
<a href="https://stackoverflow.com/questions/13208126/traversing-two-strings-at-a-time-python">Traversing two strings at a time python</a> </p>
</blockquote>
<p>Here I have question that how to concate two strings as their words are appear one after another.. I mean as an e.g. If the first strinng is "abc" and second one is "defgh" then the final answer should be "adbecfgh"...</p>
<p>here is my code but it appear in the same line</p>
<pre><code>x = raw_input ('Enter 1st String: ')
y = raw_input ('Enter 2st String: ')
z = [x, y]
a = ''.join(z)
print (a)
</code></pre>
<p>Can anybody know the mistake ?</p>
</div>
<div class="post-text" itemprop="text">
<p>you need <code>itertools.izip_longest()</code> here or <code>itertools.zip_longest()</code> if you're on python 3.x:</p>
<pre><code>In [1]: from itertools import izip_longest

In [2]: strs1="abc"

In [3]: strs2="defgh"

In [4]: "".join("".join(x) for x in izip_longest(strs1,strs2,fillvalue=""))
Out[4]: 'adbecfgh'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you want is the <code>roundrobin()</code> recipe from <a href="http://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow">the <code>itertools</code> docs</a>:</p>
<pre><code>from itertools import cycle, islice

def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
    # Recipe credited to George Sakkis
    pending = len(iterables)
    nexts = cycle(iter(it).__next__ for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))
</code></pre>
<p>Note <a href="http://docs.python.org/2/library/itertools.html#itertools-recipes" rel="nofollow">the slight differences for 2.x users</a>.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; "".join(roundrobin("abc", "defgh"))
adbecfgh
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>x = 'abc'
y = 'defgh'
z = [x, y]

from itertools import izip_longest
print ''.join(''.join(i) for i in izip_longest(*z, fillvalue=''))
</code></pre>
</div>
<span class="comment-copy">There is still a question on first page of asking exactly the same thing!</span>
<span class="comment-copy">@SilentGhost: note that not only the question is duplicate, but some of the answers are also almost exact copy-paste duplicates. I fail to see any sense in these 'activities'.</span>
<span class="comment-copy">As a note, this is renamed to <code>zip_longest()</code> in 3.x, but +1 for a simple answer.</span>
<span class="comment-copy">Yeap its work :)  But is there any other simple way to do this ? I mean using simple variables like counter and length and all..?</span>
<span class="comment-copy">@NishaKothari see my other solution <a href="http://stackoverflow.com/a/13208159/846892">here</a>, but I guess zip_longest() is simple enough and accept this the answer if it worked for you.</span>
<span class="comment-copy">That doesn't put the strings in the desired order</span>
<span class="comment-copy">@JakobBowyer Indeed, misread the question, updated.</span>
<span class="comment-copy">:) good answer +1</span>
<span class="comment-copy">Remember to import islice from itertools</span>
