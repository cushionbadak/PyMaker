<div class="post-text" itemprop="text">
<p>Can I specify other arguments in map ?</p>
<p>For example, I have the following code:</p>
<pre><code>def f(a, b):
    return a + b
l = [1, 2, 3]
ll = map(f, l)
</code></pre>
<p>How can I give an argument to the <code>map</code> above so that each element of <code>ll</code> is the sum of one element in <code>l</code> and the given argument?</p>
<p>For example, if I can use something like <code>map(f(2,), l)</code>, I will get <code>[3, 4, 5]</code> as result.</p>
<p>I know I can achieve the same result by list comprehension, or a for loop, but I just want to know if it is possible to do it in a <code>map</code> way.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>map</code> itself does not directly provide a way to do that.  However, you can do it by using <code>functools.partial</code> to pre-specify the static argument:</p>
<pre><code>&gt;&gt;&gt; def add(x, y):
...     return x+y
&gt;&gt;&gt; map(functools.partial(add, y=10), [1, 2, 3])
[11, 12, 13]
</code></pre>
<p>However, as @jamylak suggested in a comment, there's little reason to do this.  If you don't want to store the result, just do a regular for loop:</p>
<pre><code>for item in [1, 2, 3]:
   add(item, 10)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for <a href="http://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow"><code>functools.partial</code></a>, which is used to implement <a href="http://en.wikipedia.org/wiki/Partial_application" rel="nofollow">partial application</a>:</p>
<pre><code>ll = map(functools.partial(f, 2), l)
</code></pre>
<p>Note that in many cases, a <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a> or <a href="http://docs.python.org/3/reference/expressions.html#generator-expressions" rel="nofollow">generator expression</a> is more readable:</p>
<pre><code>ll = [f(2, x) for x in l]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't use <code>map()</code> for this but a list comprehension:</p>
<pre><code>new_lst = [f(x, other_value) for x in lst]
</code></pre>
<p>Another option would be a lambda. But don't do that:</p>
<pre><code>new_lst = map(lambda x: map(x, other_value), lst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could also consider :-</p>
<pre><code>def f(a):
    return a + b
l = [1, 2, 3]
b = 2
ll = map(f,l)

print ll
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is what you want:</p>
<pre><code>  listA=[1,2,3]

  def f(a,b=2):
    return a+b

  result = map(f,listA)

  print result
</code></pre>
<p>or if you have the same number of items in two lists, you can do:</p>
<pre><code>  listA=[1,2,3]
  listB=[2,2,2]
  def f(a,b):
    return a+b

  result = map(f,listA,listB)

  print result
</code></pre>
</div>
<span class="comment-copy">if you don't want to store the result you could just convert the list comprehension into a for loop</span>
<span class="comment-copy">Are you looking for <code>reduce</code> instead of <code>map</code>? What is the expected output of this code?</span>
<span class="comment-copy">What if I replace partial with lambda x:add(x, 10)? What's the difference? Both in performance and results. Thanks!</span>
<span class="comment-copy">@SpiritZhang: There's no difference in results.  I imagine there's not much difference performance-wise either, but you can test that for yourself if you want.  There's not much point in worrying about the performance of different ways of doing it with <code>map</code> when there's no reason to do it with <code>map</code> in the first place.</span>
<span class="comment-copy">@SpiritZhang, <code>map(lambda x: add(x, 10), [1, 2, 3])</code> gives <code>NameError: global name 'add' is not defined</code>.  One can say <code>map(lambda x: x.__add__(10), [1, 2, 3])</code> but if you bother with a lambda you might as well say <code>map(lambda x: x+10, [1, 2, 3])</code></span>
<span class="comment-copy">@jwpat7: I defined the <code>add</code> function in my example.</span>
<span class="comment-copy">nice, but partial application != currying.</span>
<span class="comment-copy">@thg435 You're right, fixed.</span>
