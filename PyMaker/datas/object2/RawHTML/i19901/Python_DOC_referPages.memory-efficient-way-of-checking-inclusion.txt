<div class="post-text" itemprop="text">
<p>This is a task I could have used a dict for, if it weren't for the fact that I will need to store much more data than can fit in my 4 GBs of RAM. I'm also doing other memory-demanding stuff in the same program, so the lower mem-requirements, the better.</p>
<p>I just want to </p>
<ol>
<li><p>store <em>many</em> strings</p></li>
<li><p>check whether a string is included or not in the collection</p></li>
</ol>
<p>Is there a Python way of doing this? I'm using 3.3 so berkelydbs are out.</p>
<p>It also needs to give exact answers, so no Bloom-filters.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the data won’t fit into your memory, then you won’t have a choice, you will have to store some of that data temporarily in an external storage (your disk). As you correctly guessed, file access is expensive and slow, so the thing is to keep the disk operations at the minimum.</p>
<p>As you seem to have a need for a key-value store (as you have a dict), it would be a good idea to split that up in a way so that related data is in a similar place which you then can quickly read block-wise into the memory for calculations.</p>
<p>But how to do that completely depends on what you are actually doing, and without further information we cannot really help you there.</p>
<p>Btw. as you mentioned Berkeley DB, there are actually <a href="http://pypi.python.org/pypi/bsddb3/" rel="nofollow">bindings</a> for Python 3.2, and I wouldn’t be surprised if they worked on Python 3.3 too. Otherwise 3.3 is still rather new, so an update might be coming. If you are looking for an alternative key-value storage database, maybe give <a href="http://redis.io/" rel="nofollow">redis</a> a try. I haven’t tried the <a href="https://github.com/andymccurdy/redis-py" rel="nofollow">Python bindings</a> though.</p>
</div>
<div class="post-text" itemprop="text">
<p>use <a href="http://docs.python.org/3/library/sqlite3.html" rel="nofollow">sqlite3</a> it fits perfectly your needs</p>
<p>if you abolutly needs fast lookup you can use marisa tree see <a href="http://kmike.ru/python-data-structures/" rel="nofollow">http://kmike.ru/python-data-structures/</a> but first you have to confirm that it's a bottlenneck in your application. Especially cache can do wonderful things with disk database. Don't optimize too early. profile.</p>
</div>
<div class="post-text" itemprop="text">
<p>Well if you just need to store it, why keep it in memory, use some kind of database.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just use the standard <a href="http://docs.python.org/3/library/shelve.html#module-shelve" rel="nofollow"><code>shelve</code></a> module to create a persistent dictionary.</p>
</div>
<span class="comment-copy">Edits for better title appreciated. I drew a blank.</span>
<span class="comment-copy">I wonder what are the other memory demand in the same program, probably a database would fit the well also</span>
<span class="comment-copy">Do you need to keep the original strings around in memory, or could you just store hashes for the "many strings" in a set and check against that?</span>
<span class="comment-copy">But isn't that expensive for checking inclusion? I will need to do these lookups ridiculously many times. And after the program is run, I do not need to store the data at all.</span>
<span class="comment-copy">Will look them up. Thanks.</span>
<span class="comment-copy">@TheUnfunCat: Actually it sounds like what you need is a persistent <code>set</code>. A dictionary can easily be used to implement a set class, for instance as shown <a href="http://joyrex.spc.uchicago.edu/bookshelves/python/cookbook/pythoncook-CHP-5-SECT-18.html" rel="nofollow noreferrer">here</a>. I think almost exactly the same approach could be applied using a <code>Shelf</code> in place of a <code>dict</code>.</span>
<span class="comment-copy">@TheUnfunCat: A more elegant and modern way to implement a persistent <code>set</code> class would be to derive one from the ABC <code>collections.Set</code>.</span>
