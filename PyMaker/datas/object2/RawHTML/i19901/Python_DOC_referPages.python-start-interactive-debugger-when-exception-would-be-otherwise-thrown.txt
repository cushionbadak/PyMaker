<div class="post-text" itemprop="text">
<p>Is there any way to make a python program start an interactive debugger, like what <code>import pdb; pdb.set_trace()</code> instead of actually throwing an exception?</p>
<p>I know the difficulty of making this work, but it would be much more valuable than a huge stack trace after which I have to use to figure out where to insert breakpoints and then restart the program to debug it. I know that simply making the debugger start instead of throwing an exception would not make sense because any exception can be caught at a level or another, so <em>if I could just select a list of exceptions for which an interactive debug session would start <strong>instead</strong> of them being thrown</em> (because I know the exceptions in this list would really be "errors" and no meaningful program behavior could follow afterwards)...</p>
<p>I've heard that Common Lisp has something like this, but I don't know how it works exactly, just that "true lispers" praise it a lot...</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way is to wrap your entire code inside a <code>try</code> block like this:</p>
<pre><code>if __name__ == '__main__':

    try:
        raise Exception()
    except:
        import pdb
        pdb.set_trace()
</code></pre>
<p>There is a more complicated solution which uses <code>sys.excepthook</code> to override the handling of uncaught exceptions, as described in  <a href="https://code.activestate.com/recipes/65287-automatically-start-the-debugger-on-an-exception/" rel="nofollow noreferrer">this recipe</a>:</p>
<pre><code>## {{{ http://code.activestate.com/recipes/65287/ (r5)
# code snippet, to be included in 'sitecustomize.py'
import sys

def info(type, value, tb):
   if hasattr(sys, 'ps1') or not sys.stderr.isatty():
      # we are in interactive mode or we don't have a tty-like
      # device, so we call the default hook
      sys.__excepthook__(type, value, tb)
   else:
      import traceback, pdb
      # we are NOT in interactive mode, print the exception...
      traceback.print_exception(type, value, tb)
      print
      # ...then start the debugger in post-mortem mode.
      pdb.pm()

sys.excepthook = info
## end of http://code.activestate.com/recipes/65287/ }}}
</code></pre>
<p>The above code should be included in a file called <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer"><code>sitecustomize.py</code></a> inside <code>site-packages</code> directory, which is automatically imported by python. The debugger is only started when python is run in non-interactive mode.</p>
</div>
<div class="post-text" itemprop="text">
<p><em>This question is quite old, so this is mainly for future me</em></p>
<pre><code>try:
    ...
except:
    import traceback, pdb, sys
    traceback.print_exc()
    print ''
    pdb.post_mortem()
    sys.exit(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are inside the REPL, you can do</p>
<pre><code>import sys
import pdb
pdb.post_mortem(sys.last_traceback)
</code></pre>
<p>See <a href="https://docs.python.org/2/library/pdb.html" rel="nofollow">https://docs.python.org/2/library/pdb.html</a> and <a href="https://docs.python.org/3/library/traceback.html" rel="nofollow">https://docs.python.org/3/library/traceback.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I wrote <a href="https://pypi.org/project/mort/" rel="nofollow noreferrer">a package</a> to start pdb on exception. It takes @boreis-gorelik's answer, and modifies the interpreter state at runtime so no code changes are necessary:</p>
<h1>Installation</h1>
<pre><code> pip install mort
</code></pre>
<h1>Usage</h1>
<pre><code>mort &lt;file.py or module to execute&gt;
</code></pre>
<p>When the exception occurs, the pdb repl should start in the given terminal </p>
</div>
<span class="comment-copy">referring to you second example, as this is what I mean, I don't want to have to modify existing program code: yeah, but what I'd like is to have the debugger dynamically insert a breakpoint and start the 'live' debugger <i>instead</i> of throwing the exception (prevent it from being thrown or smth) not 'post mortem'</span>
<span class="comment-copy">@NeuronQ did you try to substitute <code>pdb.pm()</code> by <code>pdb.set_trace()</code>? This should work</span>
<span class="comment-copy">@NeuroQ see my answer for how to do this without any system modification</span>
<span class="comment-copy">Thanks! It helps a lot, I knew this was possible and it's exactly what I needed.</span>
