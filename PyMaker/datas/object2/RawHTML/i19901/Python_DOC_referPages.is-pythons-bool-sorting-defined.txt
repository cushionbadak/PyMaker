<div class="post-text" itemprop="text">
<p>Is the ordering of True and False well defined in Python, or is it left as an implementation detail?</p>
<p>From the console, I'm seeing False sort before True...but I don't know if that's a behavior I should rely on or not.</p>
<p>(I'm sure there's some Python doc about this, but I can't find it...)</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/2/reference/datamodel.html#the-standard-type-hierarchy">http://docs.python.org/2/reference/datamodel.html#the-standard-type-hierarchy</a></p>
<blockquote>
<p><strong>Booleans</strong>: These represent the truth values False and True. The two objects representing the values False and True are the only Boolean objects. The Boolean type is a subtype of plain integers, and Boolean values behave like the values 0 and 1, respectively, in almost all contexts, the exception being that when converted to a string, the strings "False" or "True" are returned, respectively.</p>
</blockquote>
<p>This reads to me that the python language requires <code>False &lt; True</code>, <code>False == 0</code>, <code>True == 1</code>, <code>True != 2</code>.</p>
<p>The same wording is retained in <a href="http://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy">Python 3</a> as well.</p>
</div>
<span class="comment-copy">For bonus points, try doing arithmetic with bools. <code>(True + True) ** -True == 0.5</code>...</span>
<span class="comment-copy">@JameySharp are you a wizard?</span>
<span class="comment-copy">@rsegal I discovered that <code>sum([True, False, ...])</code> is a nice way to count the number of true cases in a list, and the above awful abuse followed quickly after.</span>
<span class="comment-copy">@JameySharp that's actually not a terrible idea. It's almost like a <code>reduce(filter(list))</code>. Hmmmm.</span>
<span class="comment-copy">and don't forget:     <code>assert isinstance(True,int)</code></span>
<span class="comment-copy">If you're unsure you agree with sharth's understanding, try plugging it into an interpreter. You'll quickly verify that <code>False &lt; True</code>. In fact, reading the spec and playing around with it into the interpreter are always good ideas!</span>
