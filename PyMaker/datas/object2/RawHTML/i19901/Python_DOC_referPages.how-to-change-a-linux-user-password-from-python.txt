<div class="post-text" itemprop="text">
<p>I'm having problems with changing a Linux user's password from python. I've tried so many things, but I couldn't manage to solve the issue, here is the sample of things I've already tried:</p>
<p>sudo_password is the password for sudo, sudo_command is the command I want the system to run,
user is get from a List and is the user who I want to change the password for, and newpass is the pass I want to assign to 'user'</p>
<pre><code>    user = list.get(ANCHOR)
    sudo_command = 'passwd'
    f = open("passwordusu.tmp", "w")
    f.write("%s\n%s" % (newpass, newpass))
    f.close()
    A=os.system('echo -e %s|sudo -S %s &lt; %s %s' % (sudo_password, sudo_command,'passwordusu.tmp', user))
    print A
    windowpass.destroy()
</code></pre>
<p>'A' is the return value for the execution of os.system, in this case 256. I tried also</p>
<pre><code>    A=os.system('echo  %s|sudo -S %s &lt; %s %s' % (sudo_password, sudo_command,'passwordusu.tmp', user))
</code></pre>
<p>but it returns the same error code. I tried several other ways with 'passwd' command, but whithout succes.
With 'chpasswd' command I 've tried this:</p>
<pre><code>    user = list.get(ANCHOR)
    sudo_command = 'chpasswd'
    f = open("passwordusu.tmp", "w")
    f.write("%s:%s" % (user, newpass))
    f.close()
    A=os.system('echo %s|sudo -S %s &lt; %s %s' % (sudo_password, sudo_command,'passwordusu.tmp', user))
    print A
    windowpass.destroy()
</code></pre>
<p>also with:</p>
<pre><code>    A=os.system('echo %s|sudo -S %s:%s|%s' % (sudo_password, user, newpass, sudo_command))
    @;which returns 32512
    A=os.system("echo %s | sudo -S %s &lt; \"%s\"" % (sudo_password, sudo_command,  "passwordusu.tmp"))
    @;which returns 256
</code></pre>
<p>I tried 'mkpasswd' and 'usermod' too like this:</p>
<pre><code>    user = list.get(ANCHOR)
    sudo_command = 'mkpasswd -m sha-512'
    os.system("echo %s | sudo -S %s %s &gt; passwd.tmp" % (sudo_password,sudo_command, newpass))
    sudo_command="usermod -p"
    f = open('passwd.tmp', 'r')
    for line in f.readlines():
        newpassencryp=line
    f.close()
    A=os.system("echo %s | sudo -S %s %s %s" % (sudo_password, sudo_command, newpassencryp, user))
    @;which returns 32512
</code></pre>
<p>but, if you go to <a href="https://www.mkpasswd.net" rel="nofollow">https://www.mkpasswd.net</a> , hash the 'newpass' and substitute for 'newpassencryp', it returns 0 which theoretically means it has gone right, but so far it doesn't changes the password.</p>
<p>I've searched on internet and stackoverflow for this issue or similar and tried what solutions exposed, but again,without success.</p>
<p>I would really apreciate any help, and of course, if you need more info i'll be glad to supply it!</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try using the '--stdin' option to the passwd command in your pipes. To quote from the man page:</p>
<pre>
    --stdin
      This option is used to indicate that passwd should read the new
      password from standard input, which can be a pipe.
</pre>
<p>Another option, if your Linux has the usermod command, as root (or via sudo) you can explicitly set the (encrypted) password using the '-p' option.</p>
</div>
<div class="post-text" itemprop="text">
<p>I ran accross the same problem today and I wrote a simple wrapper around <code>subprocess</code> to call the <code>passwd</code> command and feed <code>stdin</code> with the new password. This code is not fool proof and only works when running as root which does not prompt for the old password.</p>
<pre><code>import subprocess
from time import sleep

PASSWD_CMD='/usr/bin/passwd'

def set_password(user, password):
    cmd = [PASSWD_CMD, user]
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE)
    p.stdin.write(u'%(p)s\n%(p)s\n' % { 'p': password })
    p.stdin.flush()
    # Give `passwd` cmd 1 second to finish and kill it otherwise.
    for x in range(0, 10):
        if p.poll() is not None:
            break
        sleep(0.1)
    else:
        p.terminate()
        sleep(1)
        p.kill()
        raise RuntimeError('Setting password failed. '
                '`passwd` process did not terminate.')
    if p.returncode != 0:
        raise RuntimeError('`passwd` failed: %d' % p.returncode)
</code></pre>
<p>If you need the output of passwd you can also pass <code>stdout=subprocess.PIPE</code> to the <code>Popen</code> call and read from it. In my case I was only interested if the operation succeeded or not so I simply skipped that part.</p>
<p><strong>Security consideration:</strong> Do not use something like <code>echo -n 'password\npassword\n | passwd username'</code> as this will make the password visible in the process list.</p>
<h2>SUDO</h2>
<p>Since you seam to want to be using <code>sudo passwd &lt;username&gt;</code> I would recommend adding a new line to your <code>/etc/sudoers</code> (use <code>visudo</code> for that!)</p>
<pre><code>some_user ALL = NOPASSWD: /usr/bin/passwd
</code></pre>
<p>Sudo will not ask for the password for <code>some_user</code> and the script will run as expected.</p>
<p>Alternatively simply add an extra <code>p.stdin.write(u'%s\n' % SUDO_PASSWORD)</code> line. That way <code>sudo</code> will receive the user password first and then <code>passwd</code> receives the new user password.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://linux.die.net/man/8/usermod" rel="nofollow"><code>usermod</code></a>-based version:</p>
<pre><code>#!/usr/bin/env python
from crypt      import crypt
from getpass    import getpass
from subprocess import Popen, PIPE

sudo_password_callback = lambda: sudo_password # getpass("[sudo] password: ")
username, username_newpassword = 'testaccount', '$2&amp;J|5ty)*X?9+KqODA)7'

# passwd has no `--stdin` on my system, so `usermod` is used instead
# hash password for `usermod`
try:
    hashed = crypt(username_newpassword) # use the strongest available method
except TypeError: # Python &lt; 3.3
    p = Popen(["mkpasswd", "-m", "sha-512", "-s"], stdin=PIPE, stdout=PIPE,
              universal_newlines=True)
    hashed = p.communicate(username_newpassword)[0][:-1] # chop '\n'
    assert p.wait() == 0
assert hashed == crypt(username_newpassword, hashed)

# change password
p = Popen(['sudo', '-S',  # read sudo password from the pipe
           # XXX: hashed is visible to other users
           'usermod',  '-p', hashed, username],
          stdin=PIPE, universal_newlines=True)
p.communicate(sudo_password_callback() + '\n')
assert p.wait() == 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The user you are running this as must have sudo permission to run the <code>passwd</code> command without a password.</p>
<pre><code>&gt;&gt;&gt; from subprocess import Popen
&gt;&gt;&gt; proc = Popen(['/usr/bin/sudo', '/usr/bin/passwd', 'test', '--stdin'])
&gt;&gt;&gt; proc.communicate('newpassword')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned before passing passwords on the command line is not very secure unfortunately. Additionally something like "<code>--stdin</code>" for <code>passwd</code> is not available on every <code>passwd</code> implementation. Therefor here is a more secure version using <code>chpasswd</code>:</p>
<pre><code>def setPassword(userName:str, password:str):
    p = subprocess.Popen([ "/usr/sbin/chpasswd" ], universal_newlines=True, shell=False, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate(userName + ":" + password + "\n")
    assert p.wait() == 0
    if stdout or stderr:
        raise Exception("Error encountered changing the password!")
</code></pre>
<p>Explanation:</p>
<p>With <code>subprocess.Popen</code> we launch an instance of <code>chpasswd</code>. We pipe the user name and password to an instance of <code>chpasswd</code>. <code>chpasswd</code> will then change the password using the settings defined for the current operating system. <code>chpasswd</code> will remain completely silent if no error occurred. Therefor the code above will raise an exception if any kind of error occurred (without having a closer look to the actual error).</p>
</div>
<span class="comment-copy">The problem is that <code>passwd</code> and <code>sudo</code> do not read passwords from standard input, but from <code>/dev/tty</code>. You have to trick them using a pseudo-terminal; <code>pexpect</code> is good at doing that.</span>
<span class="comment-copy">So, there isn't any other way to do what I want without installing any module? I have been reading about pexpect and it sure seems to get the work done, but I would like to do it in a similar way like above.</span>
<span class="comment-copy">Thanks a lot, I have just tried both ways, but seem not working for me</span>
<span class="comment-copy">Just a thought on the usermod approach -- make user your password is either quoted or doesn't contain shell special characters (e.g. $) otherwise they will be interpreted in the system command and won't give the values you expect.</span>
<span class="comment-copy">Thanks for your tip</span>
<span class="comment-copy">@NeilWinton: <code>$</code> (and other shell meta-characters) may be used in a password if you use Popen (that doesn't invoke any shell by default) to start the processes, <a href="http://stackoverflow.com/a/13193900/4279">example</a>.</span>
<span class="comment-copy">Yes that's true, but in the example code above it's os.system() that is being used, which will invoke (effectively) "sh -c 'command-string'" and meta-character expansion will happen as a result.</span>
<span class="comment-copy">Could you explain why it is necessary to include the code for <code>give passwd cmd 1 second to finish</code> ? I noticed that if I didn't include that code, python would hang until I hit enter. Including that code makes this problem go away.</span>
<span class="comment-copy">Additionally, why do I need to include the <code>else</code> clause? In what circumstance would it take longer than 1 second for <code>passwd</code> to conclude? Thanks.</span>
<span class="comment-copy">There are several possibilities why changing the password could take more than 1 second. Just think of a very busy system or authentication using an LDAP server. By giving "passwd" 1 second to finish I made sure the case where passwd answers for the old password terminates in an acceptable time. As stated in the response this code is not fool proof and was written by me because I needed a quick and dirty solution to this problem. If you want a more elegant solution set the locale to "C" and implement a parser that works like "expect" and feeds the passwd command the proper responses.</span>
<span class="comment-copy">in the try statement, how is crypt used? I've read that you need the password to hash and then, a 'salt', but, does it affects at the time of verifying the password given at login?</span>
<span class="comment-copy"><a href="http://docs.python.org/3/library/crypt" rel="nofollow noreferrer"><code>crypt(plaintext)</code></a> returns something like <a href="http://linux.die.net/man/3/crypt" rel="nofollow noreferrer"><code>$6$salt$encrypted</code></a> where <code>salt</code> is generated automatically. Look at your /etc/passwd or /etc/shadow files</span>
<span class="comment-copy">Thank you, I'll take a look!</span>
<span class="comment-copy">Thanks for your effort but, although the code runs correctly, it isn't changing the password.I don't know what else to try.</span>
<span class="comment-copy">@Vaulor are you running it as root?</span>
<span class="comment-copy">Well, not, I'm running the commands through sudo</span>
<span class="comment-copy">@Vaulor you have to be root to change the password.  The above will only work if python is running as root.  If not, you can <code>Popen</code> sudo, but your user will have to be configured to run <code>passwd</code> with no password.</span>
<span class="comment-copy">Thanks I'll give it a try!</span>
