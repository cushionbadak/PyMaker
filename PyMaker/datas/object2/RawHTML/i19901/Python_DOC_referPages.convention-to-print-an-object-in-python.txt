<div class="post-text" itemprop="text">
<p>Is there any standard convention to print an object in python. I know that if I just try to print the object it would print the memory address but I would like to overwrite that method and be able to print human readable format of the object to help in debugging.</p>
<p>is there any standard convention people follow or is it not a good way to define such a method instead there are better alternatives?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can overwrite either the <code>__str__</code> or the <code>__repr__</code> method.</p>
<p>There is no convention on how to implement the <code>__str__</code> method; it can just return any human-readable string representation you want. There is, however, a convention on how to implement the <code>__repr__</code> method: it should return a string representation of the object so that the object could be recreated from that representation (if possible), i.e. <code>eval(repr(obj)) == obj</code>.</p>
<p>Assuming you have a class <code>Point</code>, <code>__str__</code> and <code>__repr__</code> could be implemented like this:</p>
<pre><code>class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __str__(self):
        return "(%.2f, %.2f)" % (self.x, self.y)
    def __repr__(self):
        return "Point(x=%r, y=%r)" % (self.x, self.y)
    def __eq__(self, other):
        return isinstance(other, Point) and self.x == other.x and self.y == other.y
</code></pre>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; p = Point(0.1234, 5.6789)
&gt;&gt;&gt; str(p)
'(0.12, 5.68)'
&gt;&gt;&gt; "The point is %s" % p  # this will call str
'The point is (0.12, 5.68)'
&gt;&gt;&gt; repr(p)
'Point(x=0.1234, y=5.6789)'
&gt;&gt;&gt; p  # echoing p in the interactive shell calls repr internally
Point(x=0.1234, y=5.6789)
&gt;&gt;&gt; eval(repr(p))  # this echos the repr of the new point created by eval
Point(x=0.1234, y=5.6789)
&gt;&gt;&gt; type(eval(repr(p)))
&lt;class '__main__.Point'&gt;
&gt;&gt;&gt; eval(repr(p)) == p
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Implement function <a href="http://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow"><code>__str__</code></a> in the class for the object you are printing.  </p>
<p>If you are printing objects for a class that you can't alter then it is fairly straightforward to provide your own <code>print</code> function, since you are using Python 3.</p>
<p>Edit:  Usually the string returned by <code>__str__</code> will be specific to the class, but will at least be enough to identify the object.  The exact format of the string will vary depending on the class and public attributes.</p>
<p>Edit2:  Here is a simple (cutdown) example from a class describing countries:</p>
<pre><code>def __str__(self):
    return "{0:&lt;32} {1:&gt;010}".
        format(self.__name, self.__population)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your object can be represented in a way that allows recreation, then override the <code>__repr__</code> function. For example, if you can create your object with the following code:</p>
<pre><code>MyObject('foo', 45)
</code></pre>
<p>The the <code>__repr__</code> should return <code>"MyObject('foo', 45)"</code>. You then don't need to implement a <code>__str__</code>.</p>
<p>But if the object is so complex that you can't represent it like that, override <code>__str__</code> instead. You should then return something that both makes it clear the object can't be recreated, and that it is an object. Hence, don't return <code>"foo:45"</code>, because that looks like a string, or <code>{'foo': 45}</code> because that looks like a dictionary, and that will confuse you when you debug.</p>
<p>I'd recommend that you keep the brackets, for example <code>&lt;MyObject  foo:45&gt;</code>. That way it is clear that you have been printing an object, and it is also clear that it is not just a question of writing <code>MyObject('foo', 45)</code> to recreate the object, but that there is more data stored.</p>
</div>
<div class="post-text" itemprop="text">
<p>The standard way to print custom info about an object (class instance) is to use <code>__str__</code> method:</p>
<pre><code>class A:
    var = 1

    def __str__(self):
        return 'Accessing from print function, var = {0}'.format(self.var)
</code></pre>
<p>In this method you can display any info you want</p>
<pre><code>a = A()
print(a)
&gt;&gt;&gt; Accessing from print function, var = 1
</code></pre>
</div>
<span class="comment-copy">I think the question is more about which <i>format</i> people use to implement <code>__str__</code>.</span>
<span class="comment-copy">@Tichodroma; ah, I mis-understood.</span>
<span class="comment-copy">Actually I am interested in knowing both how to overwrite and what to overwrite.</span>
<span class="comment-copy">overwrite?  overwrite what?  (Sorry, I'm a bit slow this morning)</span>
<span class="comment-copy">...as well as 2.7.</span>
<span class="comment-copy">No it does not. print is a statement in 2.x</span>
<span class="comment-copy">... which perfectly accepts <code>(a)</code> as an expression to be printed.</span>
<span class="comment-copy">My bad, did not know, +1</span>
