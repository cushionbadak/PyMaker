<div class="post-text" itemprop="text">
<p>where can i find a complete tutorial or doc on os.urandom? i need to get get a random int to choose a char from a string of 80 char</p>
<p>im runing Ubuntu 12.04
on an aser aspire 5920</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just need a random integer, you can use <a href="http://docs.python.org/3/library/random.html#random.randint" rel="noreferrer"><code>random.randint(a, b)</code> from the random module</a>.</p>
<p>If you need it for crypto purposes, use <code>random.SystemRandom().randint(a, b)</code>, which makes use of <code>os.urandom()</code>.</p>
<h3><a href="http://ideone.com/Nqgq0D" rel="noreferrer">Example</a></h3>
<pre><code>import random

r = random.SystemRandom()
s = "some string"
print(r.choice(s)) # print random character from the string
print(s[r.randrange(len(s))]) # same
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Might not exactly be on topic, but I want to help those coming here from a search engine. To convert <code>os.urandom</code> to an integer I'm using this:</p>
<pre><code> import os

 rand = int(os.urandom(4).encode('hex'), 16)
 # You can then 'cycle' it against the length.
 rand_char = chars_list[rand % 80] # or maybe '% len(chars_list)'
</code></pre>
<p><strong>Note:</strong> The range of the index here is up to that of a 4-byte integer. If you want more, change the <code>4</code> to a greater value.</p>
<p>The idea was taken from here: <a href="https://pythonadventures.wordpress.com/2013/10/04/generate-a-192-bit-random-number/" rel="noreferrer">https://pythonadventures.wordpress.com/2013/10/04/generate-a-192-bit-random-number/</a></p>
</div>
<span class="comment-copy">Why did you accept an answer that doesn't answer the title of your question. Either change your accepted answer or change your question. If you want to know about os.random and its use then you should correct your accepted answer.</span>
<span class="comment-copy"><code>random.choice</code> would also probably be a reasonable option.</span>
<span class="comment-copy"><code>random.choice</code> works too, depending on what he ultimately wants to do with the random character.</span>
<span class="comment-copy">random is a non-cryptographic PRNG, i need a cryptographic quality random</span>
<span class="comment-copy">You can use <code>random.SystemRandom</code> instead of <code>random</code>. It makes use of <code>os.urandom()</code> and provides all the same functionality as <code>random</code>.</span>
<span class="comment-copy">thank u Tim, that helps</span>
<span class="comment-copy">I am assuming that 16 is a argument to the built in function int that tells python that the given string is in base 16 (hexadecial).</span>
<span class="comment-copy">Why did you give urandom 4 and not any other number? I know that 4 indicates a string of n random bytes suitable for cryptographic use,  however, I keep seeing examples on the web where 4 is the the chosen number instead of say, 32 or 64. Why didn't you choose 64 say? More numbers more randomness/harder to predict, right?</span>
<span class="comment-copy">Do you might explaining some of the details of your code? I have written above the details I could find out by reading the docs but wanted to know if there are any caveats (and how to fix them) or some important comments to give the readers when trying to re-use your code to optimize randomness and/or security. Thanks.</span>
<span class="comment-copy">in python3, you need to use <code>rand=int.from_bytes(os.urandom(4), sys.byteorder)</code></span>
