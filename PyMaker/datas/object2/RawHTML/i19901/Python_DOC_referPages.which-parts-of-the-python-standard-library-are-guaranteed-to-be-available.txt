<div class="post-text" itemprop="text">
<p>I'm interested to know which parts of the python standard library are absolutely guaranteed to be available, and which parts might not be installed, dependent on distribution.</p>
<p>I've seen <a href="https://stackoverflow.com/questions/3807111/is-the-python-standard-library-really-standard">this question</a> but it doesn't quite provide the answer I'm looking for.</p>
<p>I'm aware that <a href="http://docs.python.org/3.3/library/someos.html" rel="nofollow noreferrer">these modules</a> aren't always available and that <a href="http://docs.python.org/3.3/library/math.html" rel="nofollow noreferrer">the math module always is</a>.  How about other modules?  Are there any modules besides math that are guaranteed to be available?</p>
<p>Edit: <a href="http://docs.python.org/3.3/library/sys.html" rel="nofollow noreferrer">the sys module is also always available</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are talking about the standard Python implementation (CPython), then the <a href="http://docs.python.org/3/library/index.html" rel="noreferrer">http://docs.python.org/3/library/index.html</a> page lists the modules it provides (you can choose the Python version on the top of the page).</p>
<p>These are the standard modules included in the Python implementation, but some of them are operating-system specific or may depend on some other platform component. This is usually noted in the documentation of a module with such dependency. E.g.: 
<a href="http://docs.python.org/3/library/posix.html" rel="noreferrer">http://docs.python.org/3/library/posix.html</a> – there is „Platform: POSIX” annotation at the top.</p>
<p>Other dependencies may not be that explicit – 
<a href="http://docs.python.org/3/library/sqlite3.html" rel="noreferrer">http://docs.python.org/3/library/sqlite3.html</a> doesn't say that this module is built only if the sqlite3 was available during Python build, but it is something one can expect.</p>
<p>Anyway, the Python Standard Library reference is always the best place to start. If a module documentation there doesn't say anything about platform and nothing suggests it depends on any external library or platform specific mechanism, then you may assume it is safe to use. But us other had said – anyone is free to remove anything from his Python build.</p>
<p>Anything not from the Standard Library must be considered optional in any Python installation, but the 'pure python' modules from <a href="http://pypi.python.org/pypi" rel="noreferrer">http://pypi.python.org/pypi</a> may be more available for the target audience that some binary modules from the Standard Library.</p>
</div>
<span class="comment-copy">I'd say as stated there that It's down to a matter of what the maintainers of each distribution ported</span>
<span class="comment-copy">anyone can build python and exclude/include whatever they want ... typically the modules listed at <a href="http://docs.python.org" rel="nofollow noreferrer">docs.python.org</a> are the ones included but really you can not guarantee even those will always be available  ... It might be better to understand why you want to know? (as you can often bundle your program with required bits/ or at least have as a requirement)</span>
<span class="comment-copy">even if it says its always available ... you could make a build in which it is not (or is available under a different name)...</span>
