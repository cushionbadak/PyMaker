<div class="post-text" itemprop="text">
<p>I wonder if it is possible to wrap Windows DLL (driver for specific hardware) to use it from Python under Linux. If yes, what would be the best approach?</p>
</div>
<div class="post-text" itemprop="text">
<p><em>Disclaimer: Depending on the context, the following is certainly NOT the best approach. It is just ONE possible approach that kind of fits the description.</em></p>
<p>I wrote a small Python module for calling into Windows DLLs from Python on Linux. It is based on IPC between a regular Linux/Unix Python process and a Wine-based Python process. Because I have needed it in too many different use-cases / scenarios myself, I designed it as a "generic" <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer"><code>ctypes</code> module</a> drop-in replacement, which does most of the required plumbing automatically in the background.</p>
<p>Example: Assume you're in Python on Linux, you have Wine installed, and you want to call into <code>msvcrt.dll</code> (the Microsoft C runtime library). You can do the following:</p>
<pre><code>import zugbruecke as ctypes
dll_pow = ctypes.cdll.msvcrt.pow
dll_pow.argtypes = (ctypes.c_double, ctypes.c_double)
dll_pow.restype = ctypes.c_double
print('You should expect "1024.0" to show up here: "%.1f".' % dll_pow(2.0, 10.0))
</code></pre>
<p><a href="https://github.com/pleiszenburg/zugbruecke" rel="nofollow noreferrer">Source code (LGPL)</a>, <a href="https://pypi.python.org/pypi/zugbruecke" rel="nofollow noreferrer">PyPI package</a> &amp; <a href="http://zugbruecke.readthedocs.io/" rel="nofollow noreferrer">documentation</a>.</p>
<p>It's still a bit rough around the edges (i.e. alpha and insecure), but it does handle most types of parameters (including pointers).</p>
<p><em>I'd be really interested to see how it behaves and performs when used with a hardware driver. Feedback is highly welcomed!</em></p>
</div>
<span class="comment-copy">Porting (wrapping) drivers (at least kernel mode drivers) should <b>not</b> work inside Linux. You'd have to have two parallel systems running in one memory sharing the same global special-meaning registers.</span>
<span class="comment-copy">I'm assuming you do not have access to the source code for this driver?</span>
<span class="comment-copy">The short answer is: most probably not. <a href="http://en.wikipedia.org/wiki/NDISwrapper" rel="nofollow noreferrer">NDISWrapper</a> does this, but for the very specific case of network device drivers. Are you sure the device isn't supported on Linux? Is it a USB device?</span>
<span class="comment-copy">After five years I totally forgot about this question and marked is as "undoable" on my list. Thanks for giving it a new life ;) And good luck with your library, looks very promising!</span>
