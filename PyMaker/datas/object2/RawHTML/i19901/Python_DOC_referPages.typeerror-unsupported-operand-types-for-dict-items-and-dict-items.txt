<div class="post-text" itemprop="text">
<p>I try to sum two dictionaries like that:</p>
<pre><code>my_new_dict = dict(my_existing_dict.items() + my_new_dict.items())
</code></pre>
<p>but recieve error </p>
<pre><code>TypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'
</code></pre>
<p>What I do wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>In python3, <code>dict.items()</code> returns an object with type <code>dict_items</code> which apparently can't be added.  (in python 2, it returned a <code>list</code> which could be added).</p>
<p>An alternative way to add a pair of dictionaries which works on py2k and py3k:</p>
<pre><code>d = dict1.copy()
d.update(dict2)
</code></pre>
<p>Of course, there's some ambiguity about what you want to happen in the case of key collisions.  e.g. if both dicts have <code>key1</code>, whose <code>key1</code> should be preserved in the output?  Or should you use some combination of both of their values?  In the latter case, you'll probably want something from the <code>collections</code> module (either <code>defaultdict</code> or <code>Counter</code>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Since <a href="https://www.python.org/dev/peps/pep-0448/" rel="nofollow noreferrer">PEP 448</a> (Python 3.5), there is a very simple and readable solution I would recommend:</p>
<pre><code>{**d1, **d2}
</code></pre>
<p>You can now provide unpackings into literals and multiple unpackings, which means this works. </p>
<p>One problem is the behavior you want is ambiguous - dictionaries can't have duplicate keys, so it is unclear what you want to happen if both contain the same key. The spec is explicit about what should happen when using this method:</p>
<blockquote>
<p>In dictionaries, later values will always override earlier ones</p>
</blockquote>
<p>If you want the reverse behaviour, you can simply swap the order of the dictionaries in the literal. If you want to throw an exception, you can use the <code>dict()</code> method which won't accept duplicate arguments, i.e:</p>
<pre><code>dict(**d1, **d2)
</code></pre>
<p>In older versions of Python 3, your approach is valid, but the issue here is that <a href="http://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">dictionary views are set-like</a>, so they don't have addition implemented.</p>
<p>What you probably want is the <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.union" rel="nofollow noreferrer">union</a>: <code>d1.items() | d2.items()</code>, which will give you a set of tuples of <code>(key, value)</code>. If you then pass it to <code>dict()</code> and there are duplicates, the "last" value will be the one used, however sets (unlike the views themselves) are unordered, so there is no guarantee about which item will end up "first" in the combined set, meaning that which one "wins" will be arbitrary.</p>
<p>So, in short, as long as order/duplicate selection isn't important:</p>
<pre><code>dict(d1.items() | d2.items())
</code></pre>
<p>Note that in Python 2, <code>dict.items()</code> simply returns a <code>list</code>, where your approach will work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another approach to the other suggested answers is:</p>
<p><code>dict(list(d1.items()) + list(d2.items()))</code></p>
<p>If there are keys present in both <code>d1</code> and <code>d2</code>, the value in <code>d2</code> will be used in the final dictionary.</p>
</div>
<span class="comment-copy">Sidenote: If you want to iterate over two dictionaries, and you know they have unique keys (or it doesn't matter if you process the same key twice), consider using itertools.chain(dict_a, dict_b)</span>
<span class="comment-copy">thanks, it works! I hate 2.7&gt;3.2 migration...</span>
<span class="comment-copy">@VladislavIl'ushin: you <b>really</b> should read docs.</span>
<span class="comment-copy">@mgilson: I think that <code>dict.items()</code> in 3+ is equivalent to <code>dict.iteritems()</code> in 2.6, that is, it's an iterator.</span>
<span class="comment-copy">@Lattyware well, I stand corrected (and more learnt...)</span>
<span class="comment-copy">@PierreGM -- It's good to learn something new every day :).</span>
<span class="comment-copy">When I try this I get: <code>TypeError: unhashable type: 'dict'</code></span>
<span class="comment-copy">lifesaver!  nice trick, my friend!</span>
<span class="comment-copy">With Python 3.6.1, I noticed if an item is in both <code>d1</code> and <code>d2</code>, it seems <code>dict(d1.items() | d2.items())</code> results in <i>d1</i>'s items taking effect in case of duplicates, which is not what I expected. <code>dict(list(d1.items()) + list(d2.items()))</code> behaves as I expect, with <code>d2</code> winning in case of duplicates.</span>
<span class="comment-copy">@erwaman Yes, sets are unordered, while dictionaries are (now) ordered. My wording was misleading because "last" doesn't mean much when sets are ordered arbitrarily. If you want to preserve order, you indeed need to use an ordered collection like a list (at a small additional cost of constructing them).</span>
<span class="comment-copy">@erwaman See my latest edit for an updated approach I think is the best option in all cases.</span>
