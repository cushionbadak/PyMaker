<div class="post-text" itemprop="text">
<p>I want to chunk an input stream for batch processing. Given an input list or generator,</p>
<pre><code>x_in = [1, 2, 3, 4, 5, 6 ...]
</code></pre>
<p>I want a function that will return chunks of that input. Say, if <code>chunk_size=4</code>, then,</p>
<pre><code>x_chunked = [[1, 2, 3, 4], [5, 6, ...], ...]
</code></pre>
<p>This is something I do over and over, and was wondering if there is a more standard way than writing it myself. Am I missing something in <code>itertools</code>? (One could solve the problem with <code>enumerate</code> and <code>groupby</code>, but that feels clunky.) In case anyone wants to see an implementation, here it is,</p>
<pre><code>def chunk_input_stream(input_stream, chunk_size):
    """partition a generator in a streaming fashion"""
    assert chunk_size &gt;= 1
    accumulator = []
    for x in input_stream:
        accumulator.append(x)
        if len(accumulator) == chunk_size:
            yield accumulator
            accumulator = []
    if accumulator:
        yield accumulator
</code></pre>
<h2>Edit</h2>
<p>Inspired by kreativitea's answer, here's a solution with <code>islice</code>, which is straightforward &amp; doesn't require post-filtering,</p>
<pre><code>from itertools import islice

def chunk_input_stream(input_stream, chunk_size):
    while True:
        chunk = list(islice(input_stream, chunk_size))
        if chunk:
            yield chunk
        else:
            return

# test it with list(chunk_input_stream(iter([1, 2, 3, 4]), 3))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>[Updated version thanks to the OP: I've been throwing <code>yield from</code> at everything in sight since I upgraded and it didn't even occur to me that I didn't need it here.]</p>
<p>Oh, what the heck:</p>
<pre><code>from itertools import takewhile, islice, count

def chunk(stream, size):
    return takewhile(bool, (list(islice(stream, size)) for _ in count()))
</code></pre>
<p>which gives:</p>
<pre><code>&gt;&gt;&gt; list(chunk((i for i in range(3)), 3))
[[0, 1, 2]]
&gt;&gt;&gt; list(chunk((i for i in range(6)), 3))
[[0, 1, 2], [3, 4, 5]]
&gt;&gt;&gt; list(chunk((i for i in range(8)), 3))
[[0, 1, 2], [3, 4, 5], [6, 7]]
</code></pre>
<p>Warning: the above suffers the same problem as the OP's <code>chunk_input_stream</code> if the input is a list.  You could get around this with an extra <code>iter()</code> wrap but that's less pretty.  Conceptually, using <code>repeat</code> or <code>cycle</code> might make more sense than <code>count()</code> but I was character-counting for some reason.  :^)</p>
<p>[FTR: no, I'm <em>still</em> not entirely serious about this, but hey-- it's a Monday.]</p>
</div>
<div class="post-text" itemprop="text">
<p>The recipe from <code>itertools</code>:</p>
<pre><code>def grouper(n, iterable, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is there any reason you're not using something like this?:</p>
<pre><code># data is your stream, n is your chunk length
[data[i:i+n] for i in xrange(0,len(data),n)]
</code></pre>
<p><strong>edit:</strong></p>
<p>Since people are making generators....</p>
<pre><code>def grouper(data, n):
    results = [data[i:i+n] for i in xrange(0,len(data),n)]
    for result in results:
        yield result
</code></pre>
<p><strong>edit 2</strong>:</p>
<p>I was thinking, if you have the input stream in memory as a deque, you can <code>.popleft</code> very efficiently to yield n number of objects.  </p>
<pre><code>from collections import deque
stream = deque(data)

def chunk(stream, n):
    """ Returns the next chunk from a data stream. """
    return [stream.popleft() for i in xrange(n)]

def chunks(stream, n, reps):
    """ If you want to yield more than one chunk. """
    for item in [chunk(stream, n) for i in xrange(reps)]:
        yield item
</code></pre>
</div>
<span class="comment-copy">You don't need the <code>yield from</code>; this can work perfectly well in Python 2.x if you just <code>return takewhile...</code>. Make that edit and I'll mark this as the correct answer. Also, you might include the import line for completeness <code>from itertools import takewhile, islice, count</code>. Your solution is concise, actually pretty straightforward (see my comments as to why Jon's is not), and works -- Thank you!!</span>
<span class="comment-copy">+1 for takewhile, I learned something new today.</span>
<span class="comment-copy">And, naturally, note <a href="http://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">the slight difference of <code>zip_longest</code> for 3.x</a>.</span>
<span class="comment-copy">Can't you use <code>itertools.repeat</code> instead of <code>[]*n</code>?</span>
<span class="comment-copy">This will require a little tweaking for the OP's case-- the OP's code doesn't fill, IIUC.</span>
<span class="comment-copy">@jpm As the whole thing will be exhausted straight away into the <code>zip_longest()</code> call as arguments, I imagine the overhead from the generator will make it slower than the list multiplication. This way is simpler and probably faster.</span>
<span class="comment-copy">@gatoatigrado There was no intent to be patronizing. I really see no solution here that reads any better than this solution, to be honest.</span>
<span class="comment-copy">The streaming property is really important when you're dealing with a lot of data. OTOH, <code>islice</code> is good ...</span>
<span class="comment-copy">Nice.  And with islice you don't have to assert for a negative value, the exception is built-in.</span>
<span class="comment-copy">@gatoatigrado See edit for a deque version.</span>
