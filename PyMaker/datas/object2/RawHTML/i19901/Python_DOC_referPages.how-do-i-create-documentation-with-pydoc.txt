<div class="post-text" itemprop="text">
<p>I'm trying to create a document out of my module. I  used <code>pydoc</code> from the command-line in Windows 7 using Python 3.2.3:</p>
<pre><code>python "&lt;path_to_pydoc_&gt;\pydoc.py" -w myModule
</code></pre>
<p>This led to my shell being filled with text, one line for each file in my module, saying:</p>
<pre><code>no Python documentation found for '&lt;file_name&gt;'
</code></pre>
<p>It's as if Pydoc's trying to get documentation for my files, but I want to autocreate it. I couldn't find a good tutorial using Google. Does anyone have any tips on how to use Pydoc?</p>
<p>If I try to create documentation from one file using </p>
<pre><code>python ... -w myModule\myFile.py, it says "wrote myFile.html", and when I open it, it has one line of text saying:

# ../myModule/myFile.py
</code></pre>
<p>Also, it has a link to the file itself on my computer, which I can click and it shows what's inside the file on my web-browser.</p>
</div>
<div class="post-text" itemprop="text">
<p>As RocketDonkey suggested, your module itself needs to have some docstrings.</p>
<p>For example, in <code>myModule/__init__.py</code>:</p>
<pre><code>"""
The mod module
"""
</code></pre>
<p>You'd also want to generate documentation for each file in <code>myModule/*.py</code> using</p>
<pre><code>pydoc myModule.thefilename
</code></pre>
<p>to make sure the generated files match the ones that are referenced from the main module documentation file.</p>
</div>
<div class="post-text" itemprop="text">
<p>Another thing that people may find useful...make sure to leave off ".py" from your module name.  For example, if you are trying to generate documentation for <strong>'original'</strong> in '<strong>original.py</strong>':</p>
<blockquote>
<pre><code>yourcode_dir$ pydoc -w original.py
no Python documentation found for 'original.py'

yourcode_dir$ pydoc -w original
wrote original.html
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>pydoc is fantastic for generating documentation, but the documentation has to be written in the first place.  You must have docstrings in your source code as was mentioned by RocketDonkey in the comments:</p>
<pre><code>"""
This example module shows various types of documentation available for use
with pydoc.  To generate HTML documentation for this module issue the
command:

    pydoc -w foo

"""

class Foo(object):
    """
    Foo encapsulates a name and an age.
    """
    def __init__(self, name, age):
        """
        Construct a new 'Foo' object.

        :param name: The name of foo
        :param age: The ageof foo
        :return: returns nothing
        """
        self.name = name
        self.age = age

def bar(baz):
    """
    Prints baz to the display.
    """
    print baz

if __name__ == '__main__':
    f = Foo('John Doe', 42)
    bar("hello world")
</code></pre>
<p>The first docstring provides instructions for creating the documentation with pydoc.  There are examples of different types of docstrings so you can see how they look when generated with pydoc.</p>
</div>
<div class="post-text" itemprop="text">
<p>use pydoc.doc() can show docstring,  can be class, module, etc.</p>
</div>
<span class="comment-copy"><code>pydoc -w moduleName</code> works for me for a single module with one function in it. Can you try to create a simple example that would reproduce this? A directory layout and the contents of the files, and where you're running which command?</span>
<span class="comment-copy">Apologies in advance if this is a stupid question, but do you have docstrings/etc. in your module? Meaning do you have the content in your source file that running <code>pydoc</code> should produce?</span>
<span class="comment-copy">... And once you have <a href="https://docs.python.org/3/glossary.html#term-docstring" rel="nofollow noreferrer">docstrings</a> in place, consider using <a href="https://pdoc3.github.io/pdoc" rel="nofollow noreferrer">pdoc</a> instead, because it produces a result that is closer to what is expected of API documentation today.</span>
<span class="comment-copy">I wonder why the accepted answer not provide this tiny little detail! WIthout dropping .py, it won't work atleast in Py3.</span>
<span class="comment-copy">This helped. I also found that, when executing the pydoc, we need to be in the same directory... i.e., we can't do <code>pydoc dir/prg.py</code>. We need to <code>cd dir</code> and then do <code>pydoc prg.py</code>. Is that right?</span>
<span class="comment-copy">@abhijithda: Actually, as long as the directory containing the module is in sys.path, pydoc will be able to find it.</span>
<span class="comment-copy">This was the most helpful way to do this, I know this is closed but at least in python 2.7 I can now do python -m pydoc Example_Pydoc (without the .py) and get my documentation . Thank you</span>
<span class="comment-copy">this solved my problem as well...</span>
