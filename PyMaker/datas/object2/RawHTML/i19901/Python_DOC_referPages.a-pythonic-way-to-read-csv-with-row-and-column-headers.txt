<div class="post-text" itemprop="text">
<p>Let's have a CSV table with row and column headers, e.g.:</p>
<pre class="lang-py prettyprint-override"><code>, "Car", "Bike", "Boat", "Plane", "Shuttle"
"Red", 1, 7, 3, 0, 0
"Green", 5, 0, 0, 0, 0
"Blue", 1, 1, 4, 0, 1
</code></pre>
<p>I want to get row and column headers, i.e.:</p>
<pre><code>col_headers = ["Car", "Bike", "Boat", "Plane", "Shuttle"]
row_headers = ["Red", "Green", "Blue"]
data = [[1, 7, 3, 0, 0],
        [5, 0, 0, 0, 0],
        [1, 1, 4, 0, 1]]
</code></pre>
<p>Of course I can do something like</p>
<pre class="lang-py prettyprint-override"><code>import csv
with open("path/to/file.csv", "r") as f:
    csvraw = list(csv.reader(f))
col_headers = csvraw[1][1:]
row_headers = [row[0] for row in csvraw[1:]]
data = [row[1:] for row in csvraw[1:]]
</code></pre>
<p>...but it does not look Pythonic enough.</p>
<p>Is there a neater way for this natural operation?</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="http://docs.python.org/3/library/csv.html#csv.DictReader" rel="nofollow"><code>csv.DictReader</code></a>.</p>
<blockquote>
<p>If the fieldnames parameter is omitted, the values in the first row of the csvfile will be used as the fieldnames.</p>
</blockquote>
<p>Then you can just do <code>reader.fieldnames</code>. This, of course, only gives you column headers. You would still have to parse the row headers manually.</p>
<p>I think your original solution is pretty good, however.</p>
</div>
<div class="post-text" itemprop="text">
<p>Now I see that what I want is the easiest (and the most robust) to accomplish with <a href="http://pandas.pydata.org/" rel="nofollow">Pandas</a>.</p>
<pre><code>import pandas as pd
df = pd.read_csv('foo.csv', index_col=0)
</code></pre>
<p>And if I want, it is easy to extract:</p>
<pre><code>col_headers = list(df.columns)
row_headers = list(df.index)
</code></pre>
<p>Otherwise, in the "raw" Python, it seems that the method I wrote in the question is "good enough".</p>
</div>
<div class="post-text" itemprop="text">
<p>I am aware that this solution gives you another output format than the requested, but
it is very convenient. This reads the csv line into a dictionary:</p>
<pre><code>reader = csv.reader(open(parameters_file), dialect)

keys = [key.lower() for key in reader.next()]
for line in reader:
    parameter = dict(zip(keys, cells))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Without 3rd party libs (and if you can live with results being tuples from the <code>zip</code> op):</p>
<pre><code>import csv

with open('your_csv_file') as fin:
    csvin = csv.reader(fin, skipinitialspace=True)
    col_header = next(csvin, [])[1:]
    row_header, data = zip(*((row[0], row[1:]) for row in csvin))
</code></pre>
<p>Gives you for <code>col_header</code>, <code>row_header</code> and <code>data</code>:</p>
<pre><code>['Bike', 'Boat', 'Plane', 'Shuttle']
('Red', 'Green', 'Blue')
(['1', '7', '3', '0', '0'], ['5', '0', '0', '0', '0'], ['1', '1', '4', '0', '1'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Agree, pandas is the best I found too. I'm interested into read specific values of my dataframe. Here is what I did:</p>
<pre><code>import pandas as pd
d=pd.read_csv(pathToFile+"easyEx.csv")
print(d)
print(d.index.values)
print(d.index.values[2])
print(d.columns.values)
print(d.columns.values[2])
print(pd.DataFrame(d,index=['Blue'],columns=['Boat'])+0.333)
</code></pre>
<p>And this is what it returns:</p>
<pre><code>         Car  Bike  Boat  Plane  Shuttle                                                                                                            
Red      1     7     3      0        0                                                                                                            
Green    5     0     0      0        0                                                                                                            
Blue     1     1     4      0        1                                                                                                            
['Red' 'Green' 'Blue']                                                                                                                            
Blue                                                                                                                                              
['Car' 'Bike' 'Boat' 'Plane' 'Shuttle']                                                                                                           
Boat                                                                                                                                              
      Boat                                                                                                                                        
Blue     4.333                              
</code></pre>
<p>Note that I can check row names with 'index' and column names with 'columns'. Also note that I can read a specific element of the 'dataframe' base on its row and column names, and that the values are still numeric, that why I added '+0.333' in the last print.</p>
<p>I chaged the data file, I removed the quote chars (" ") and spaces after commas in the first row. Here you have 'easyEx.csv' file:</p>
<pre><code>Car,Bike,Boat,Plane,Shuttle
Red, 1, 7, 3, 0, 0
Green, 5, 0, 0, 0, 0
Blue, 1, 1, 4, 0, 1
</code></pre>
<p>Hope this can help =)</p>
</div>
<span class="comment-copy">What's <code>csvraw</code>?</span>
<span class="comment-copy">@martineau There was a mistake in my code. <code>csvraw = list(csv.reader(f))</code>.</span>
<span class="comment-copy">Why would you post this when I'd already posted about <code>DictReader</code>, which does this without the need to do it manually?</span>
<span class="comment-copy">@Lattyware, because it allows you to transform the field. For example make them lower key or even filter them.</span>
