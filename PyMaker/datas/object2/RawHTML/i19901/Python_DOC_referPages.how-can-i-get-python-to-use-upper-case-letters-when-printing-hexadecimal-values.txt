<div class="post-text" itemprop="text">
<p>In Python v2.6 I can get hexadecimal for my integers in one of two ways:</p>
<pre><code>print(("0x%x")%value)
print(hex(value))
</code></pre>
<p>However, in both cases, the hexadecimal digits are lower case. How can I get these in upper case?</p>
</div>
<div class="post-text" itemprop="text">
<p>Capital X (Python 2 and 3 using <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow noreferrer">sprintf-style formatting</a>):</p>
<pre><code>print("0x%X" % value)
</code></pre>
<p>Or in python 3+ (using <a href="https://docs.python.org/3/library/string.html#formatstrings" rel="nofollow noreferrer"><code>.format</code> string syntax</a>):</p>
<pre><code>print("0x{:X}".format(value))
</code></pre>
<p>Or in python 3.6+ (using <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="nofollow noreferrer">formatted string literals</a>):</p>
<pre><code>print(f"0x{value:X}")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use upper().</p>
<pre><code>intNum = 1234
hexNum = hex(intNum).upper()
print('Upper hexadecimal number = ', hexNum)
</code></pre>
<p>Output:</p>
<pre><code>Upper hexadecimal number =  0X4D2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By using uppercase <code>%X</code>:</p>
<pre><code>&gt;&gt;&gt; print("%X" % 255)
FF
</code></pre>
<p>Updating for Python 3.6 era: Just use 'X' in the format part, inside f-strings:</p>
<pre><code>print(f"{255:X}")
</code></pre>
<p>(f-strings accept any valid Python expression before the <code>:</code> - including  direct numeric expressions and variable names). </p>
</div>
<div class="post-text" itemprop="text">
<p>The more Python 3 idiom using f-strings would be:</p>
<pre><code>value = 1234
print(f'0x{value:X}')
'0x4D2'
</code></pre>
<p>Notes (and why this is not a duplicate):</p>
<ul>
<li>shows how to <strong>avoid capitalizing the '0x' prefix</strong>, which was an issue in other answers</li>
<li>shows <strong>how to get variable interpolation</strong> <code>f'{value}'</code>; nobody actually ever puts hex literals in real code. There are plenty of pitfalls in doing interpolation: it's not <code>f'{x:value}'</code> nor <code>f'{0x:value}'</code> nor <code>f'{value:0x}'</code> nor even <code>f'{value:%x}'</code> as I also tried. So many ways to trip up. It still took me 15 minutes of trial-and-error after rereading four tutorials and whatsnew docs to get the syntax. This answer shows how to get f-string variable interpolation right; others don't.</li>
</ul>
</div>
<span class="comment-copy">See my answer for the more Python 3 idiom using f-strings: <code>print(f'0x{value:X}')</code></span>
<span class="comment-copy">To be clear, that's a 3 <b>.6</b> idiom</span>
<span class="comment-copy">Yes. I'm saying <code>%</code> is the older operator hangover from 2.x which while not officially deprecated, is discouraged. <a href="https://docs.python.org/3.7/reference/lexical_analysis.html#index-20" rel="nofollow noreferrer">Python 3.6+ finally allows variable interpolation</a> like we've wanted ever since 3.0 and <code>.format()</code>.</span>
<span class="comment-copy">It's not much of a "Python 3 idiom" if it fails on 6/8 of all released versions of python 3 (although admittedly most are EOL)</span>
<span class="comment-copy"><i>'As of today, "3.x" means "3.6+" or "3.7"'</i> - in my experience, this is not true. For me, 3.x means "the earliest version of python 3 that my package will support", which typically is "all non-EOL python 3.x". <i>"where f-strings are awesome"</i> - you're not wrong about that.</span>
<span class="comment-copy">But I don't think "0X4D2" is the correct notation. It should be "0x4D2" (lowercase "x").</span>
<span class="comment-copy">'%X' is best. @PeterMortensen is correct. This way, you'd need something clunky like <code>''.join([ '0x', hex(value).upper()[2:] ])</code></span>
<span class="comment-copy">@wim: No it's not a) jsbueno's answer show neither how to avoid capitalizing the '0x' prefix, nor b) how to get variable interpolation <code>f'{value}'</code>; nobody actually puts hex literals in real code. And there are pitfalls in doing interpolation: it's not <code>f'{x:value}'</code> nor <code>f'{0x:value}'</code> nor <code>f'{value:0x}'</code>. Many ways to trip up. I show how not to.</span>
