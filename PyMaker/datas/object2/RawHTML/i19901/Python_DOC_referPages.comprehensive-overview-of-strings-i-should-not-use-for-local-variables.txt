<div class="post-text" itemprop="text">
<p>If I understood correctly, it's better not to use an expression for a local variable that's already a global function in Python. So I believe this</p>
<pre><code>list = [1,2,3]
</code></pre>
<p>is disrecommended in favor of</p>
<pre><code>mylist = [1,2,3]
</code></pre>
<p>because <code>list</code> is already a built-in object in Python and <code>mylist</code> is not. However, I'm not always sure whether I should or should not use some expression (e.g. <code>dir</code>, <code>num</code> or <code>cnt</code>). Is there any comprehensive overview of the strings I'd better avoid for naming local variables?</p>
</div>
<div class="post-text" itemprop="text">
<p>The names to avoid are keywords (which will give you an error, so are easy to spot) and builtins, which will get silently masked. Here's a snippet of code to test for bad names:</p>
<pre><code>from keyword import kwlist

def bad_name(name):
    return name in dir(__builtins__) + kwlist
</code></pre>
<p>... and here's a list (for Python 3.3):</p>
<p><strong>Builtin functions, types etc.</strong></p>
<pre><code>abs                 all                 any                 ascii
bin                 bool                bytearray           bytes
callable            chr                 classmethod         compile
complex             copyright           credits             delattr
dict                dir                 divmod              enumerate
eval                exec                exit                filter
float               format              frozenset           getattr
globals             hasattr             hash                help
hex                 id                  input               int
isinstance          issubclass          iter                len
license             list                locals              map
max                 memoryview          min                 next
object              oct                 open                ord
pow                 print               property            quit
range               repr                reversed            round
set                 setattr             slice               sorted
staticmethod        str                 sum                 super
tuple               type                vars                zip
</code></pre>
<p>Anything in CamelCase (like the builtin exceptions) or beginning with a double underscore is excluded from the list above, as you shouldn't be using those anyway.</p>
<p><strong>Keywords</strong></p>
<pre><code>False               None                True                and
as                  assert              break               class
continue            def                 del                 elif
else                except              finally             for
from                global              if                  import
in                  is                  lambda              nonlocal
not                 or                  pass                raise
return              try                 while               with
yield
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Basically, avoid all of <a href="http://docs.python.org/2/library/functions.html" rel="nofollow">these</a>. All those are inside the <a href="http://docs.python.org/2/library/__builtin__.html" rel="nofollow"><code>__builtin__</code></a> module (<a href="http://docs.python.org/3/library/builtins.html" rel="nofollow"><code>builtins</code></a> in Python 3).</p>
<p><strong>Source:</strong> <a href="http://docs.python.org/2/library/functions.html" rel="nofollow">The Python Standard Library Â» Built-in Functions</a>.</p>
</div>
<span class="comment-copy">I've defined a custom vim syntax color file that has all the builtins listed in it and are colored when I enter them. That automatically alerts me if i use one of those names.</span>
<span class="comment-copy">Am I missing something here?  from keyword import kwlist def bad_name(name):     return name in dir(<b>builtins</b>) + kwlist bad_name(list) bad_name("list")</span>
<span class="comment-copy">So is it safe to say that I'll be safe as long as I avoid 1) the builtin functions AND 2) all Keywords from the two tables above?</span>
<span class="comment-copy">Yes ... although I suppose you might also confuse people if you used the name of a common module. There are <a href="http://docs.python.org/py-modindex.html" rel="nofollow noreferrer">rather a lot</a> of those in the standard library, though, and many more that are commonly used but not in the standard library.</span>
<span class="comment-copy">@pythonforspss.org It's not that you have to avoid keywords, you're simply not allowed to used them.</span>
<span class="comment-copy">OK, that will do. Thanks everyone for your help!</span>
<span class="comment-copy">I think you mean <code>__builtin__</code></span>
<span class="comment-copy">A small typo, thanks @Tim! :)</span>
<span class="comment-copy">No, it's <code>__builtins__</code> ...</span>
<span class="comment-copy">Unfortunately, it's not that simple:  <code>id</code> is a built-in function. The function itself is nearly useless, and the name <code>id</code> is too useful, for this rule to apply to it.  Also, no one needs to invoke <code>help</code> in their program.</span>
<span class="comment-copy">@ Ned Batchelder: knowledge = learning the rule; wisdom = learning when to break it ;-) As it happens I wouldn't use <code>id</code> except maybe for an attribute, and even then I'd feel a little dirty.</span>
