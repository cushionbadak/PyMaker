<div class="post-text" itemprop="text">
<p>What is the correct way to show an operation has failed in python. In this code what should the return values be?</p>
<pre><code>def compare(y,x):
     if y ==  x:
         return 'true'
     return 'false'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python has literal values <code>True</code> and <code>False</code> which you can use. However, it's rarely necessary to use them explicitly, as comparison operations will return one or the other value in most cases. For instance, you could redo your function to be:</p>
<pre><code>def compare(y, x):
    return y == x
</code></pre>
<p>It's also worth noting that non-Boolean values can be considered "true" or "false", if necessary. The "falsy" values are <code>None</code>, <code>0</code> and all empty containers (such as the empty string <code>''</code>, the empty list <code>[]</code>, the empty tuple <code>()</code>, the empty dictionary <code>{}</code> and so on). Everything else is "truthy" by default, including all instances of most kinds of objects.</p>
<p>Custom classes can have a boolean conversion defined by implementing the magical method <a href="http://docs.python.org/2/reference/datamodel.html#object.__nonzero__" rel="nofollow"><code>__nonzero__</code></a> (which is renamed to <a href="http://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow"><code>__bool__</code></a> in Python 3). If it doesn't exist, Python will check for <code>__len__</code>, and if that doesn't exist give up and assume all instances are true.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def compare(y,x):
     if y == x:
         return True
     return False
</code></pre>
<p>or implicit:</p>
<pre><code>def compare(y,x):
    return x == y
</code></pre>
<p>Here is a more detailed introduction the python boolean type:
<a href="http://docs.python.org/release/2.3.5/whatsnew/section-bool.html" rel="nofollow">http://docs.python.org/release/2.3.5/whatsnew/section-bool.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>compare()</code> example is problematic for this question for two reasons:</p>
<ul>
<li>You'd normally just use a bare <code>==</code> to get a boolean comparison result in Python, rather than calling a function. </li>
<li>Neither result here is "succeeded" or "failed", so they don't really address the title question.</li>
</ul>
<p>In Python, it's common for functions to indicate success or failure not by a return value but rather by assuming that they succeeded unless they raise an exception. Exceptions are preferable to return indications for three reasons:</p>
<ul>
<li>They're harder to accidentally ignore.</li>
<li>They don't require you to reserve a return value that would otherwise be valid.</li>
<li>They can be handled directly at the most convenient point in the call tree without having to explicitly pass an error value up through several function returns.</li>
</ul>
<p>Here's a more Pythonic example:</p>
<pre><code>def doThing(x,low,high):        
    """
    Do a thing if x is between the low and high values, inclusive. 
    If x is out of bounds, the thing fails.
    """
    if x &lt; low or x &gt; high:
         raise ValueError( "x is out of bounds" )
    return (x-low)/(high-low)
</code></pre>
</div>
<span class="comment-copy">+1 for nonzero - that is what I call comprehensive :)</span>
<span class="comment-copy">Actually, in Python, exceptions are usually raised to show an operation has failed.</span>
<span class="comment-copy">@martineau: I suppose that depends on what is meant by "failure". I think the questioner meant failure of a simple Boolean test (like equality), not a more serious failure where an exception would be more appropriate.</span>
<span class="comment-copy">though in python, "explicit is better than implicit" ;)</span>
<span class="comment-copy">I totally agree</span>
<span class="comment-copy">Wouldn't <code>if not (low &lt;= x &lt;= high):</code> be technically more <i>Pythonic</i>? ;-)</span>
<span class="comment-copy">Arguably. Since that syntax works very differently in the curly-brace languages, I am not personally comfortable with it.</span>
