<div class="post-text" itemprop="text">
<p>What is the best way to split a string like <code>"HELLO there HOW are YOU"</code> by upper case words (in Python)? </p>
<p>So I'd end up with an array like such: <code>results = ['HELLO there', 'HOW are', 'YOU']</code></p>
<hr/>
<p>EDIT: </p>
<p>I have tried: </p>
<pre><code>p = re.compile("\b[A-Z]{2,}\b")
print p.split(page_text)
</code></pre>
<p>It doesn't seem to work, though.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest</p>
<pre><code>l = re.compile("(?&lt;!^)\s+(?=[A-Z])(?!.\s)").split(s)
</code></pre>
<p>Check <strong><a href="http://ideone.com/qoaTqr">this demo</a></strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a lookahead:</p>
<pre><code>re.split(r'[ ](?=[A-Z]+\b)', input)
</code></pre>
<p>This will split at every space that is followed by a string of upper-case letters which end in a word-boundary.</p>
<p>Note that the square brackets are only for readability and could as well be omitted.</p>
<p>If it is enough that the first letter of a word is upper case (so if you would want to split in front of <code>Hello</code> as well) it gets even easier:</p>
<pre><code>re.split(r'[ ](?=[A-Z])', input)
</code></pre>
<p>Now this splits at every space followed by any upper-case letter.</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need split, but rather findall:</p>
<pre><code> re.findall(r'[A-Z]+[^A-Z]*', str)
</code></pre>
</div>
<span class="comment-copy"><a href="http://www.whathaveyoutried.com" rel="nofollow noreferrer">What have you tried</a>? - You couldn't find <a href="http://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer"><code>re.split()</code></a>?</span>
<span class="comment-copy">When you say something doesn't work, you should explain why. Do you get an exception? (If so, post the whole exception) Do you get the wrong output?</span>
<span class="comment-copy">what happens when you dont use compile ?</span>
<span class="comment-copy">How would I change <code>re.split(r'[ ](?=[A-Z]+\b)', input)</code> so it didn't find upper case letters? E.g. It wouldn't match "A"? I tried <code>re.split(r'[ ](?=[A-Z]{2,}+\b)', input)</code>. thanks!</span>
<span class="comment-copy">@JamesEggers You mean that you want to require at least two upper-case letters, so that you do not split at words like <code>I</code>? <code>re.split(r'[ ](?=[A-Z]{2,}\b)', input)</code> should do it.</span>
<span class="comment-copy">I'd suggest at least <code>[ ]+</code> or maybe even <code>\W+</code> to catch slightly more cases. Still, a good answer.</span>
<span class="comment-copy">That splits at consecutive upper-case letters not upper-case words</span>
<span class="comment-copy">@m.buettner: I don't know what you mean by "word".</span>
<span class="comment-copy">See his example. A word that is entirely uppercase. And I would take word, as something that is between to (regex) word boundaries. Yours would split <code>someThing</code> between <code>some</code> and <code>Thing</code></span>
<span class="comment-copy">@m.buettner: Well, "word" as "something that is between <code>\b</code>'s" is only true for (a some subset of) English language. Natural language tokenization is a complex problem and cannot be solved with regular expressions alone. Unless you come up with an expression that is able to match "co-coalgebra", "O'Hara" or "N/A" in an unambiguous way, I refuse to discuss any matters concerning "words".</span>
<span class="comment-copy">Great! Just as example from a real data cleaning: "AntidepressantAntiarrhythmicAdrenergic (beta) blocker" must be understood as ['Antidepressant', 'Antiarrhythmic', 'Adrenergic (beta) blocker']</span>
