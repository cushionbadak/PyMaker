<div class="post-text" itemprop="text">
<p>Why is the animation not working? The shape doesn't move when I run the program.</p>
<pre><code>from Tkinter import *
import time



class alien(object):
     def __init__(self):
        self.root = Tk()
        self.canvas = Canvas(self.root, width=400, height = 400)
        self.canvas.pack()
        alien1 = self.canvas.create_oval(20, 260, 120, 360, outline='white',         fill='blue')
        alien2 = self.canvas.create_oval(2, 2, 40, 40, outline='white', fill='red')
        self.canvas.pack()
        self.root.mainloop()

     def animation(self):
        track = 0
        while True:
        x = 5
        y = 0
        if track == 0:
           for i in range(0,51):
                self.time.sleep(0.025)
                self.canvas.move(alien1, x, y)
                self.canvas.move(alien2, x, y)
                self.canvas.update()
           track = 1
           print "check"

        else:
           for i in range(0,51):
                self.time.sleep(0.025)
                self.canvas.move(alien1, -x, y)
                self.canvas.move(alien2, -x, y)
                self.canvas.update()
           track = 0
        print track

alien()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You never called the <code>animation</code> method. There were a couple of other naming issues.</p>
<pre><code># Assuming Python 2.x
# For Python 3.x support change print -&gt; print(..) and Tkinter to tkinter
from Tkinter import *
import time

class alien(object):
     def __init__(self):
        self.root = Tk()
        self.canvas = Canvas(self.root, width=400, height = 400)
        self.canvas.pack()
        self.alien1 = self.canvas.create_oval(20, 260, 120, 360, outline='white',         fill='blue')
        self.alien2 = self.canvas.create_oval(2, 2, 40, 40, outline='white', fill='red')
        self.canvas.pack()
        self.root.after(0, self.animation)
        self.root.mainloop()

     def animation(self):
        track = 0
        while True:
            x = 5
            y = 0
            if track == 0:
               for i in range(0,51):
                    time.sleep(0.025)
                    self.canvas.move(self.alien1, x, y)
                    self.canvas.move(self.alien2, x, y)
                    self.canvas.update()
               track = 1
               print "check"

            else:
               for i in range(0,51):
                    time.sleep(0.025)
                    self.canvas.move(self.alien1, -x, y)
                    self.canvas.move(self.alien2, -x, y)
                    self.canvas.update()
               track = 0
            print track

alien()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>animation</code> method has a <code>while True</code> loop in it which never breaks. This is a no-no in a GUI program, because by never returning, it prevents the GUI's event-loop from processing events. So, for example, if you had a Menu, then the user would not be able to select any menu item. The GUI would appear frozen, except for whatever actions you implement in the <code>animation</code> method.</p>
<p>Here is a slight modification of @Tim's code which fixes this problem by removing the <code>while</code> loop and simply moving the aliens one step before returning. <code>self.master.after</code> is called at the end of the <code>animation</code> method to have the event loop call animation again after a short pause.</p>
<hr/>
<pre><code>import tkinter as tk
import time

class Alien(object):
    def __init__(self, canvas, *args, **kwargs):
        self.canvas = canvas
        self.id = canvas.create_oval(*args, **kwargs)
        self.vx = 5
        self.vy = 0

    def move(self):
        x1, y1, x2, y2 = self.canvas.bbox(self.id)
        if x2 &gt; 400:
            self.vx = -5
        if x1 &lt; 0:
            self.vx = 5
        self.canvas.move(self.id, self.vx, self.vy)

class App(object):
    def __init__(self, master, **kwargs):
        self.master = master
        self.canvas = tk.Canvas(self.master, width=400, height=400)
        self.canvas.pack()
        self.aliens = [
            Alien(self.canvas, 20, 260, 120, 360,
                  outline='white', fill='blue'),
            Alien(self.canvas, 2, 2, 40, 40, outline='white', fill='red'),
        ]
        self.canvas.pack()
        self.master.after(0, self.animation)

    def animation(self):
        for alien in self.aliens:
            alien.move()
        self.master.after(12, self.animation)

root = tk.Tk()
app = App(root)
root.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a way of doing it using a loop:</p>
<pre><code>from tkinter import * # version 3.x

tk = Tk()

frame = Frame(tk)
canvas = Canvas(frame) # use canvas

frame.pack(fill = BOTH, expand = 1)
canvas.pack(fill = BOTH, expand = 1)

ball = canvas.create_oval(10, 10, 30, 30, tags = 'ball') # create object to animate

def animation(x_move, y_move):
    canvas.move(ball, x_move, y_move) # movement
    canvas.update()
    canvas.after(20) # milliseconds in wait time, this is 50 fps

    tk.after_idle(animation, x_move, y_move) # loop variables and animation, these are updatable variables

animation(2, 2) # run animation
</code></pre>
<p>An updatable variable is a variable that stays the same when updated and can be updated again.</p>
</div>
<span class="comment-copy">more question marks please</span>
<span class="comment-copy">was trying to get the oval to move from left to right on the x-xis</span>
<span class="comment-copy">is there something that i need to import ? because i looked up forum online and it make sense to only import Tkinter and timer, not sure what i am missing</span>
<span class="comment-copy">wow i wouldn't of caught those mistake, can u give tips on how to become i good programmer? any website or book that may help me improve on this hobby because i Find it very interesting.... and thank you very much sir!!!</span>
<span class="comment-copy">Practice as much as possible and pay attention to small details. In this case, all the naming issues were identified by reading the error messages when the program was run.</span>
<span class="comment-copy">Putting sleeps in the code is a bad idea. Even though they are short, every time you sleep the entire GUI will be unresponsive.</span>
<span class="comment-copy">o ic, but what is the difference between from Tkinter import * and import Tkinter as tk??</span>
<span class="comment-copy"><code>from Tkinter import *</code> imports the <code>Tkinter</code> module and adds all the (public) globals from the <code>Tkinter</code> module into the current module's namespace. <code>import Tkinter as tk</code> imports the <code>Tkinter</code> module and adds the module object itself -- referenced by <code>tk</code> -- to the current module's namespace. I never use <code>from modulename import *</code> because it makes it harder to trace where variables come from. See <a href="http://docs.python.org/3/faq/programming.html#what-are-the-best-practices-for-using-import-in-a-module" rel="nofollow noreferrer">this FAQ</a> for advice on "best practices" for using import in a module.</span>
<span class="comment-copy">@unutbu Nice, if we want to use a more complex gui with animations, we put the animation in the "animation" method and then, the gui itself, with something like event management should be in or called by the _____init_____ function, after the self.master.after. I'm right ? or it should be before ?</span>
<span class="comment-copy">@Yann: I would build the GUI as normal (and which is usually done in <code>App.__init__</code>) and at the end of <code>App.__init_</code>, call <code>self.master.after(0, self.animation)</code>. Think of it this way: you get all the widgets in place, and then add an action (the calling of <code>self.animation</code>) to the event loop.</span>
<span class="comment-copy">@unutbu ok ty ! I'm on it. Feel the power of python :3</span>
<span class="comment-copy">I got a lot smoother program by removing <code>canvas.update()</code> and <code>canvas.after_idle(...)</code> and instead using <code>canvas.after(20, animation, x_move, y_move)</code>. Also add a <code>tk.mainloop()</code> after the last line.</span>
<span class="comment-copy">i am informed but i am now using advanced Opengl with shaders and 3d lighting in c++ and thanks for the input! Opengl is better than tkinter though...</span>
