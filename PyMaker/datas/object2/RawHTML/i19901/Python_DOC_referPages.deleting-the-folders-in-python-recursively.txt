<div class="post-text" itemprop="text">
<p>I'm having a problem with deleting empty directories. Here is my code:</p>
<pre><code>for dirpath, dirnames, filenames in os.walk(dir_to_search):
    //other codes

    try:
        os.rmdir(dirpath)
    except OSError as ex:
        print(ex)
</code></pre>
<p>The argument <code>dir_to_search</code> is where I'm passing the directory where the work needs to be done. That directory looks like this:</p>
<pre><code>test/20/...
test/22/...
test/25/...
test/26/...
</code></pre>
<p>Note that all the above folders are empty. When I run this script the folders <code>20</code>,<code>25</code> alone gets deleted! But the folders <code>25</code> and <code>26</code> aren't deleted, even though they are empty folders.</p>
<h3>Edit:</h3>
<p>The exception that I'm getting are:</p>
<pre><code>[Errno 39] Directory not empty: '/home/python-user/shell-scripts/s3logs/test'
[Errno 39] Directory not empty: '/home/python-user/shell-scripts/s3logs/test/2012'
[Errno 39] Directory not empty: '/home/python-user/shell-scripts/s3logs/test/2012/10'
[Errno 39] Directory not empty: '/home/python-user/shell-scripts/s3logs/test/2012/10/29'
[Errno 39] Directory not empty: '/home/python-user/shell-scripts/s3logs/test/2012/10/29/tmp'
[Errno 39] Directory not empty: '/home/python-user/shell-scripts/s3logs/test/2012/10/28'
[Errno 39] Directory not empty: '/home/python-user/shell-scripts/s3logs/test/2012/10/28/tmp'
[Errno 39] Directory not empty: '/home/python-user/shell-scripts/s3logs/test/2012/10/26'
[Errno 39] Directory not empty: '/home/python-user/shell-scripts/s3logs/test/2012/10/25'
[Errno 39] Directory not empty: '/home/python-user/shell-scripts/s3logs/test/2012/10/27'
[Errno 39] Directory not empty: '/home/python-user/shell-scripts/s3logs/test/2012/10/27/tmp'
</code></pre>
<p>Where am I making a mistake?</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="https://docs.python.org/3/library/shutil.html#shutil.rmtree" rel="noreferrer"><code>shutil.rmtree</code></a>:</p>
<pre><code>import shutil
shutil.rmtree('/path/to/your/dir/')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The default behavior of <code>os.walk()</code> is to walk from root to leaf. Set <code>topdown=False</code> in <code>os.walk()</code> to walk from leaf to root.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try rmtree in <a href="https://docs.python.org/2/library/shutil.html#shutil.rmtree" rel="noreferrer">shutil</a>. in python std library</p>
</div>
<div class="post-text" itemprop="text">
<p>A bit late to the show but here is my pure <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer">Pathlib</a> recursive directory unlinker</p>
<pre><code>def rmdir(dir):
    dir = Path(dir)
    for item in dir.iterdir():
        if item.is_dir():
            rmdir(item)
        else:
            item.unlink()
    dir.rmdir()

rmdir(pathlib.Path("dir/"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>better to use absolute path and import only the rmtree function
<code>from shutil import rmtree</code> 
as this is a large package the above line will only import the required function.</p>
<pre><code>from shutil import rmtree
rmtree('directory-absolute-path')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for the next guy searching for a micropython solution, this works purely based on os (listdir, remove, rmdir). It is neither complete (especially in errorhandling) nor fancy, it will however work in most circumstances.</p>
<pre><code>def deltree(target):
    print("deltree", target)
    for d in os.listdir(target):
        try:
            deltree(target + '/' + d)
        except OSError:
            os.remove(target + '/' + d)

    os.rmdir(target)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The command (given by Tomek) <strong>can't delete</strong>  a file, if it  is <strong>read only</strong>. therefore, one can use -</p>
<pre><code>import os, sys
from stat import *

def del_evenReadonly(action, name, exc):
    os.chmod(name, stat.S_IWRITE)
    os.remove(name)

if  os.path.exists("test/qt_env"):
    shutil.rmtree('test/qt_env',onerror=del_evenReadonly)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is a recursive solution:</p>
<pre><code>def clear_folder(dir):
    if os.path.exists(dir):
        for the_file in os.listdir(dir):
            file_path = os.path.join(dir, the_file)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
                else:
                    clear_folder(file_path)
                    os.rmdir(file_path)
            except Exception as e:
                print(e)
</code></pre>
</div>
<span class="comment-copy">are you sure they don't have hidden files?</span>
<span class="comment-copy">Is an exception or traceback printed? If so - it would help if you added that to the question</span>
<span class="comment-copy">@Jeff: Yes I'm sure. In fact in my ubuntu machine I tried <code>rmdir /path/to/25th/folder</code> is deleting the entire directory. Which means that directory is an empty one!</span>
<span class="comment-copy">Possible duplicate of <a href="http://stackoverflow.com/questions/303200/how-do-i-remove-delete-a-folder-that-is-not-empty-with-python">How do I remove/delete a folder that is not empty with Python?</a> of both question AND answer</span>
<span class="comment-copy">Does the <code>rmtree</code> deleted the entire directory? I guess it is similar to the one <code>rm -Rf $DIR</code></span>
<span class="comment-copy">@GroovyUser Yes</span>
<span class="comment-copy"><a href="https://docs.python.org/2/library/shutil.html#shutil.rmtree" rel="nofollow noreferrer">docs.python.org/2/library/shutil.html#shutil.rmtree</a></span>
<span class="comment-copy">Be careful as rmtree deletes the files too. As asked, the question was how to delete EMPTY directories.The docs for os.walk give an example that almost exactly matches this question:   <code>import os   for root, dirs, files in os.walk(top, topdown=False):         for name in dirs:            os.rmdir(os.path.join(root, name))   </code></span>
<span class="comment-copy">Does the <code>rmtree</code> deleted the entire directory? I guess it is similar to the one <code>rm -Rf $DIR</code></span>
<span class="comment-copy">from docs: "Delete an entire directory tree; path must point to a directory (but not a symbolic link to a directory). If ignore_errors is true, errors resulting from failed removals will be ignored; if false or omitted, such errors are handled by calling a handler specified by onerror or, if that is omitted, they raise an exception."</span>
<span class="comment-copy">You would then reference this as <code>rmtree()</code>; not <code>shutil.rmtree()</code></span>
<span class="comment-copy">when trying your code with my own folder to be deleted, I get an error saying:  <code>NameError: name 'stat' is not defined</code>. How has it been defined?</span>
<span class="comment-copy">The stat module defines constants and functions for interpreting the results of os.stat(), os.fstat() and os.lstat(). what you can try : import os, sys from stat import *</span>
