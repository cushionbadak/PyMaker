<div class="post-text" itemprop="text">
<p>I need to read a certain path from three different possible places in two config files:</p>
<ul>
<li>A global one, <code>/etc/program.conf</code></li>
<li>A local one, <code>~/.config/program/config</code></li>
</ul>
<p>The local one has a <code>[DEFAULT]</code> section and may or may not have a per case specific section, say <code>[case]</code>. I'd like to</p>
<ol>
<li>Read the path given by the case-specific section of the local config</li>
<li>Absent that, read the path given by the default section of the local config</li>
<li>Absent that, read the path given by the global config</li>
<li>Absent that (!), provide a default path</li>
</ol>
<p>I'm using <code>configparser</code> in Python. This is actually not a difficult problem, but the solution I've come up with strikes me as inelegant and clunky. As this is, I think, a fairly common situation, I thought I'd ask more experienced programmers for better solutions. </p>
<p>The code I have is this:</p>
<pre><code>def retrieve_download_path(feed):
    download_path = os.path.expanduser('~/Downloads')
    config = configparser.ConfigParser()
    if os.path.isfile(CONFIG_FILENAME_GLOBAL):
        config.read(CONFIG_FILENAME_GLOBAL)
        if config.has_option('DEFAULT','Download directory'):
            download_path = os.path.expanduser(config['DEFAULT']['Download directory'])
    if os.path.isfile(CONFIG_FILENAME_USER):
        config.read(CONFIG_FILENAME_USER)
        if config.has_option(feed,'Download directory'):
            download_path = os.path.expanduser(config[feed]['Download directory'])
        elif config.has_option('DEFAULT','Download directory'):
            download_path = os.path.expanduser(config['DEFAULT']['Download directory'])
    return download_path
</code></pre>
<p>How may I improve this? What's the usual way of sourcing different config files?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/configparser.html#module-configparser" rel="nofollow"><code>configparser</code></a> seems to provide support for what you're trying to implement, specifically multiple config files and a <code>DEFAULT</code> section.</p>
<p>Does this do what you want?</p>
<pre><code>def retrieve_download_path(feed):
    # Read the config files.
    config = configparser.ConfigParser()
    config.read((CONFIG_FILENAME_GLOBAL, CONFIG_FILENAME_USER))

    # Resolve the section (configparser doesn't fallback to DEFAULT if the entire section is missing).
    section = feed if config.has_section(feed) else config.default_section

    # Extract the download path.
    download_path = config.get(section, 'Download directory', fallback='~/Downloads')

    # Expand the user directory.
    return os.path.expanduser(download_path)
</code></pre>
<p>The only difference I see is that will allow (and consult) a <code>DEFAULT</code> section in the global config file (which seems desirable).</p>
</div>
<span class="comment-copy">Thanks, this is useful. I had overlooked the possibility of reading different files. Is there a way to establish a hierarchy among them, though? I mean: the local file should take preeminence, the global as a default, etc.</span>
<span class="comment-copy">@Schiphol I'm pretty sure that the order of the filenames passed to <a href="http://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read" rel="nofollow noreferrer"><code>read()</code></a> determines the precedence. I think <code>read()</code> expects them in reverse-precedence order, which seems backwards to me, but whatever. So the file you want consulted first should be the last filename passed to <code>read()</code>. (And if I'm wrong, reverse the list. :) And the "fallback" (parameter to <a href="http://docs.python.org/3/library/configparser.html#configparser.ConfigParser.get" rel="nofollow noreferrer"><code>get()</code></a>) is always returned as a last resort.</span>
<span class="comment-copy">Actually, this doesn't quite work: suppose feed is "blah"; if neither CONFIG_FILENAME_GLOBAL nor _USER have a ["blah"] section, config.get goes directly to the fallback, without checking the ["DEFAULT"] section.</span>
<span class="comment-copy">@Schiphol You are correct. I was surprised that configparser only handles missing <i>options</i>, not missing <i>sections</i>. I added a line to fallback to the default section if the section is missing. This worked in my limited testing.</span>
<span class="comment-copy">This looks indeed the best one can do. Thanks again for all the help!</span>
