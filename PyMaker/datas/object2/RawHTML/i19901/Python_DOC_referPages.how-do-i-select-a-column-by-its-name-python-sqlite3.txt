<div class="post-text" itemprop="text">
<p>Currently I have the following code: </p>
<pre><code>c.execute("SELECT * FROM table")
for row in c.fetchall():
    print row[0]
    print row[1]
</code></pre>
<p>However, I changed the structure of my table and now I have to change the index values to represent this change. Is there a way to get use column names instead? </p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="http://docs.python.org/2/library/sqlite3.html#row-objects" rel="noreferrer">Row Objects</a> in the docs for the sqlite3 module.  If you use the <code>sqlite3.Row</code> row_factory you'll get back an object that's slightly more powerful than the normal tuples.  I imagine it has slightly higher overhead, hence not being the default behavior.</p>
</div>
<div class="post-text" itemprop="text">
<p>For this reason, it is recommended to always use explicit column names when doing a <code>SELECT</code>:</p>
<pre class="lang-py prettyprint-override"><code>c.execute("SELECT color, fluffiness FROM table")
for row in c.fetchall():
    print row[0]         #  &lt;-- is always guaranteed to be the color value
    print row[1]
</code></pre>
</div>
<span class="comment-copy">No real higher overhead according to the doc: <i>"Row provides both index-based and case-insensitive name-based access to columns <b>with almost no memory overhead</b>. It will probably be better than your own custom dictionary-based approach or even a db_row based solution."</i> <a href="http://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.row_factory" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Yeah that makes sense--I haven't looked at the code but it probably just uses <code>__getitem__</code> to map column names to their corresponding indices.</span>
<span class="comment-copy">This is a good answer too. Or some combination thereof. Though it can be a pain of you're fetching all columns of a large-ish table.</span>
