<div class="post-text" itemprop="text">
<p>I'm bit confused about how the global variables work. I have a large project, with around 50 files, and I need to define global variables for all those files.</p>
<p>What I did was define them in my projects <code>main.py</code> file, as following:</p>
<pre><code># ../myproject/main.py

# Define global myList
global myList
myList = []

# Imports
import subfile

# Do something
subfile.stuff()
print(myList[0])
</code></pre>
<p>I'm trying to use <code>myList</code> in <code>subfile.py</code>, as following</p>
<pre><code># ../myproject/subfile.py

# Save "hey" into myList
def stuff():
    globals()["myList"].append("hey")
</code></pre>
<p><strong>An other way I tried, but didn't work either</strong></p>
<pre><code># ../myproject/main.py

# Import globfile    
import globfile

# Save myList into globfile
globfile.myList = []

# Import subfile
import subfile

# Do something
subfile.stuff()
print(globfile.myList[0])
</code></pre>
<p>And inside <code>subfile.py</code> I had this:</p>
<pre><code># ../myproject/subfile.py

# Import globfile
import globfile

# Save "hey" into myList
def stuff():
    globfile.myList.append("hey")
</code></pre>
<p>But again, it didn't work. How should I implement this? I understand that it cannot work like that, when the two files don't really know each other (well subfile doesn't know main), but I can't think of how to do it, without using io writing or pickle, which I don't want to do.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is you defined <code>myList</code> from <code>main.py</code>, but <code>subfile.py</code> needs to use it. Here is a clean way to solve this problem: move all globals to a file, I call this file <code>settings.py</code>. This file is responsible for defining globals and initializing them:</p>
<pre><code># settings.py

def init():
    global myList
    myList = []
</code></pre>
<p>Next, your <code>subfile</code> can import globals:</p>
<pre><code># subfile.py

import settings

def stuff():
    settings.myList.append('hey')
</code></pre>
<p>Note that <code>subfile</code> does not call <code>init()</code>— that task belongs to <code>main.py</code>:</p>
<pre><code># main.py

import settings
import subfile

settings.init()          # Call only once
subfile.stuff()         # Do stuff with global var
print settings.myList[0] # Check the result
</code></pre>
<p>This way, you achieve your objective while avoid initializing global variables more than once.</p>
</div>
<div class="post-text" itemprop="text">
<p>See Python's document on <a href="https://docs.python.org/3/faq/programming.html#how-do-i-share-global-variables-across-modules" rel="noreferrer">sharing global variables across modules</a>:</p>
<blockquote>
<p>The canonical way to share information across modules within a single program is to create a special module (often called config or cfg).</p>
<p>config.py:
      </p>
<pre><code>x = 0   # Default value of the 'x' configuration setting
</code></pre>
<p>Import the config module in all modules of your application; the module then becomes available as a global name.</p>
<p>main.py:
      </p>
<pre><code>import config
print config.x
</code></pre>
<p>or 
      </p>
<pre><code>from config import x
print x
</code></pre>
<p>This will also let you <em>set</em> such a variable <em>dynamically</em>:
      </p>
<pre><code>import config
config.x = my_function
</code></pre>
</blockquote>
<hr/>
<blockquote>
<p>In general, <strong>don’t use</strong> from <em>modulename import *</em>. Doing so clutters the importer’s namespace, and makes it much harder for linters to detect undefined names.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You can think of Python global variables as "module" variables - and as such they are much more useful than the traditional "global variables" from C.</p>
<p>A global variable is actually defined in a module's <code>__dict__</code> and can be accessed from outside that module as a module attribute.</p>
<p>So, in your example:</p>
<pre><code># ../myproject/main.py

# Define global myList
# global myList  - there is no "global" declaration at module level. Just inside
# function and methods
myList = []

# Imports
import subfile

# Do something
subfile.stuff()
print(myList[0])
</code></pre>
<p>And:</p>
<pre><code># ../myproject/subfile.py

# Save "hey" into myList
def stuff():
     # You have to make the module main available for the 
     # code here.
     # Placing the import inside the function body will
     # usually avoid import cycles - 
     # unless you happen to call this function from 
     # either main or subfile's body (i.e. not from inside a function or method)
     import main
     main.mylist.append("hey")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>from your_file import *</code> should fix your problems. It defines everything so that it is globally available (with the exception of local variables in the imports of course).</p>
<p>for example:</p>
<pre><code>##test.py:

from pytest import *

print hello_world
</code></pre>
<p>and:</p>
<pre><code>##pytest.py

hello_world="hello world!"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Hai Vu answer works great, just one comment: </p>
<p>In case you are using the global in other module and you want to set the global dynamically, pay attention to import the other modules after you set the global variables, for example:</p>
<pre><code># settings.py
def init(arg):
    global myList
    myList = []
    mylist.append(arg)


# subfile.py
import settings

def print():
    settings.myList[0]


# main.py
import settings
settings.init("1st")     # global init before used in other imported modules
                         # Or else they will be undefined

import subfile    
subfile.print()          # global usage
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your 2nd attempt will work perfectly, and is actually a really good way to handle variable names that you want to have available globally.  But you have a name error in the last line.  Here is how it should be:</p>
<pre><code># ../myproject/main.py

# Import globfile    
import globfile

# Save myList into globfile
globfile.myList = []

# Import subfile
import subfile

# Do something
subfile.stuff()
print(globfile.myList[0])
</code></pre>
<p>See the last line?  myList is an attr of globfile, not subfile.  This will work as you want.</p>
<p>Mike</p>
</div>
<span class="comment-copy">Actually, your second approach works just fine for me. main.py correctly prints out "hey". Can you be more specific on what you me by "it didn't work"?</span>
<span class="comment-copy">@rodion: importing cycles - the code in subfile tries to import globfile, which in itś body imports itself back</span>
<span class="comment-copy"><code>NameError: name 'myList' is not defined</code> from <code>main.py</code> line <code>print(globfile.myList[0])</code></span>
<span class="comment-copy">I like the general approach, but not the whole <code>init()</code> stuff. Modules are only evaluated the first time they're imported, so it's perfectly OK to initialize those variables in the body of the module.</span>
<span class="comment-copy">+1 Kirk: I agree. However, my approach prevent the case where other modules modify globals.myList before the main program starts.</span>
<span class="comment-copy">You should call it something other than globals, which is a builtin name. PyLint gives the warning: "Redefining built-in 'globals' (redefined-builtin)"</span>
<span class="comment-copy">Thanks. Any idea how to remove the “Undefined variable from import” errors that appear in Eclipse PyDev by using this file structure (i.e. importing global variables from settings.py)? I had to <a href="http://stackoverflow.com/a/32111638/395857">disable the error in PyDev</a>, which is not ideal.</span>
<span class="comment-copy">@FranckDernoncourt I am sorry, I don't use Eclipse so I am even more clueless than you are.</span>
<span class="comment-copy">Lifesaver - just for that link!</span>
<span class="comment-copy">This seems like a cleaner approach than the accepted answer.</span>
<span class="comment-copy">wow, normally one would expect two files importing each other to get into an infinite loop.</span>
<span class="comment-copy">Except if you assign to one such variable</span>
<span class="comment-copy">I personally avoid the use of <code>import *</code> at all cost so that references are explicit (and not confusing), Besides, when ever have you actually used all "<code>*</code>" references in any module?</span>
<span class="comment-copy">DON'T DO import *. Your global variables will no longer remain in sync.  Each module receives its own copy. Changing the variable in one file will not reflect in another. It is also warned against in <a href="https://docs.python.org/2/faq/programming.html#how-do-i-share-global-variables-across-modules" rel="nofollow noreferrer">docs.python.org/2/faq/…</a></span>
