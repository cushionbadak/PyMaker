<div class="post-text" itemprop="text">
<p>I'm making a combat helper for D&amp;D. I plan to make it get the stats of each monster from a .txt file in this format:</p>
<pre><code>_Name of monster_
HP = 45
AC = 19
Fort = -3
</code></pre>
<p>I'm using a class called <code>Monster</code>, and <code>__init__</code> iterates through the .txt file. It iterates fine, my problem is that I can't get the variables to have <code>self.</code> before it. <code>Monsterfind()</code> simply finds the path to the monster .txt file, and I know that is not the problem, as the variables are printing fine.</p>
<pre><code>class Monster:
    def __init__(self, monster):
        """Checks if the monster is defined in the directory. 
        If it is, sets class attributes to be the monster's as decided in its .txt file"""
        self.name = monster.capitalize()
        monstercheck = self.monsterfind()
        if monstercheck != Fales:
            monsterchck = open(monstercheck, 'r')
            print monstercheck.next() # Print the _Name of Monsters, so it does not execute
            for stat in monstercheck:
                print 'self.{}'.format(stat) # This is to check it has the correct .txt file
                eval('self.{}'.format(stat))
            monstercheck.close()
            print 'Monster loaded'
        else: # if unfound
            print '{} not found, add it?'.format(self.name)
            if raw_input('Y/N\n').capitalize() == 'Y':
                self.addmonster() # Function that just makes a new file
            else:
                self.name = 'UNKNOWN'
</code></pre>
<p>It just says: <code>self.AC = 5</code> <code>SyntaxError: invalid syntax @ the equals sign</code></p>
<p>If there is any problem with my class or my <code>__init__</code>, even if it is unimportant, please tell me as this is the first time I'm using classes.</p>
<p>Thank you in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need <code>eval()</code> (or <code>exec</code>) here (they should pretty much never be used) - Python has <a href="http://docs.python.org/3/library/functions.html#setattr" rel="nofollow"><code>setattr()</code></a>, which does what you want.</p>
<p>Note that it might be easier to use a data format that already exists, such as <a href="http://docs.python.org/3/library/json.html" rel="nofollow">JSON</a>, to avoid manually parsing it.</p>
<p>As another note, when working with files, it's best to use a context manager, as it reads nicely, and ensures a file is closed, even if there is an exception:</p>
<pre><code>with open(monstercheck, 'r') as monsterchck:
        print monstercheck.next()
        for stat, value in parse(monstercheck):
            setattr(self, stat, value)
</code></pre>
<p>Obviously, you would need to do some real parsing here.</p>
</div>
<div class="post-text" itemprop="text">
<p>as mentioned by @Lattyware, you really should be using <code>setattr</code> for this.  I'll simply discuss <em>why</em> the code raises a error.  The reason <code>eval</code> doesn't work is because it evaluates expressions and assignment isn't an expression.  In other words, what you pass to <code>eval</code> should only be the right hand side of the equation:</p>
<pre><code>eval("a = 5")
</code></pre>
<p>This fails just like your code.</p>
<p>You could change from using <code>eval</code> to <code>exec</code>:</p>
<pre><code>exec "a = 5"  #exec("a = 5") on py3k
</code></pre>
<p>But again this is ill advised.</p>
</div>
<span class="comment-copy">Parsing wouldn't be too tricky.  Just a <code>pre_stat,pre_value = line.split('=')</code> followed by <code>stat = pre_stat.strip()</code> and <code>value = ast.literal_eval(pre_value)</code>, but <code>json</code>'s probably easier</span>
<span class="comment-copy">@mgilson No, but it might be easier just to use an existing tool unless the input format matters.</span>
<span class="comment-copy">Thank you so very much! So to ask further, but is where is some good documentation on JSON, as I am unfamiliar with it. The format does not matter to me, so I'll look into JSON. Also, what are the main advantages, other than not needing to manually parse it? Thank you again for your help!</span>
<span class="comment-copy">@PrestonCarpenter Just google JSON, it's a pretty popular markup language for simple data, and read the Python API docs I linked, it's all very simple as JSON translates very nicely to core Python data structures.</span>
<span class="comment-copy">Thank you very much, I appreciate your help.</span>
<span class="comment-copy">Thank you for the explanation, I'll be sure to keep that in mind.</span>
