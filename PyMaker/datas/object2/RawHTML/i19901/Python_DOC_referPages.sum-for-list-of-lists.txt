<div class="post-text" itemprop="text">
<p>I'm looking for method in python to sum a list of list that contain only integers.
I saw that the method <code>sum()</code> works only for list but not for list of list.
There is anything fit for me?</p>
<p>thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>sum()</code> with a generator expression here:</p>
<pre><code>In [18]: lis = [[1, 2], [3, 4], [5, 6]]

In [19]: sum(sum(x) for x in lis)
Out[19]: 21
</code></pre>
<p><strong>or:</strong></p>
<pre><code>In [21]: sum(sum(lis, []))
Out[21]: 21
</code></pre>
<p><code>timeit</code> comparisons:</p>
<pre><code>In [49]: %timeit sum(sum(x) for x in lis)
100000 loops, best of 3: 2.56 us per loop

In [50]: %timeit sum(map(sum, lis))
100000 loops, best of 3: 2.39 us per loop

In [51]: %timeit sum(sum(lis, []))
1000000 loops, best of 3: 2.21 us per loop

In [52]: %timeit sum(chain.from_iterable(lis))       # winner 
100000 loops, best of 3: 1.43 us per loop

In [53]: %timeit sum(chain(*lis))
100000 loops, best of 3: 1.55 us per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools

sum(itertools.chain.from_iterable([[1,2],[3,4],[5,6]]))
</code></pre>
<p><code>itertools.chain</code> flattens one level of iterable (which is all you need here), so <code>sum</code> gets the list with the sublists broken out.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>sum(map(sum, my_list))</code></p>
<p>This runs sum on every element of the first list, then puts the results from those into sum again.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>l = [[1,2,3], [3,4,5], [3,5,6]]
total = sum([sum(x) for x in l])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-python prettyprint-override"><code>import re
#print sum( [ ****** *** * in **********('[0-9]+',**************************.read()) ] )

name = raw_input("Enter file:")
if len(name) &lt; 1 : name = "sam.txt"
handle = open(name)
#handle = handle.read()
num = list()
total = 0
for line in handle:
    line = line.rstrip()
    if len(re.findall('([0-9]+)', line))== 0: continue
    num.append(re.findall('([0-9]+)', line))



print sum(sum(num,[]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
print sum( [int(i) for i in re.findall('[0-9]+', open("regex_sum_301799.txt").read()) ] )
</code></pre>
<p>Example File Source: <a href="http://python-data.dr-chuck.net/regex_sum_301799.txt" rel="nofollow">http://python-data.dr-chuck.net/regex_sum_301799.txt</a></p>
</div>
<span class="comment-copy">thank you all for the help!</span>
<span class="comment-copy">As an explanation, this works by summing the sum of each individual list, using a <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow noreferrer">generator expression</a>.</span>
<span class="comment-copy">Note that readability should always trump performance unless it's a proven bottleneck.</span>
<span class="comment-copy">Also note that the second version works by concatenating the lists together to flatten them, and then summing the flattened list. While this may be quick in CPython, there is no guarantee that this method of flattening a list will be efficient in other implementations, and so <code>itertools.chain.from_iterable()</code> would be considered preferable (and is <a href="http://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">recommended over <code>sum()</code> in the Python docs</a> for this use).</span>
<span class="comment-copy">@Lattyware <code>itertools.chain.from_iterable()</code> also came out to be the fastest one in these, after I did some edits.</span>
<span class="comment-copy">As an explanation, this works by flattening the list, and then summing the new iterable of all the contained values.</span>
