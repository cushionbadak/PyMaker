<div class="post-text" itemprop="text">
<p>I am wondering how I could check to see if two functions are the same. An example would be <code>(lambda x: x) == (lambda y: y)</code> evaluating to true. As far as I know, Python will check to see if the functions occupy the same location in memory, but not whether they have the same operation. I know it seems impractical to have that functionality. </p>
<p>Another solution would be some method I can run on a function to see what it contains or how it works. So a kind of <code>(lambda x: x).what()</code> that would return how the method works, maybe in a dictionary or something.</p>
<p>I would love an answer, but I doubt it's possible.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really want to know whether two functions always do the same thing for all inputs, you will have to run them both on all inputs (which will take infinite time), and also intercept all possible side effects (which is effectively impossible).</p>
<p>You could of course come up with some heuristics, throwing a set of different values at them that, for your application area, are very likely to generate different outputs if the functions are different. But there's obviously no general-purpose solution to thatâ€”otherwise, all unit tests would be generated automatically, saving us all a whole lot of work, right?</p>
<hr/>
<p>Conversely, you might just want to know whether two functions have the exact same implementation. For that, Martijn Pieters's answer is the obvious starting point, and possibly even the ending point (depending on whether you care about closures, globals, etc.).</p>
<hr/>
<p>But what you asked for is something different from either of these; you apparently want to look over the code manually to see "how it works":</p>
<blockquote>
<p>Another solution would be some method I can run on a function to see what it contains or how it works. So a kind of (lambda x: x).what() that would return how the method works, maybe in a dictionary or something.</p>
</blockquote>
<p>That function already exists: <a href="http://docs.python.org/3/library/dis.html#dis.dis" rel="noreferrer"><code>dis.dis</code></a>. When you run it on a function, it tells you how that function works. Not in a dictionary (a dictionary of what?) but in a sequence of lines of bytecode for the Python interpreter (which is a relatively simple stack machine with some higher-level stuff added on top, mostly described right there in the <code>dis</code> docs).</p>
<p>Or, even more simply, you can get the source with <a href="http://docs.python.org/3/library/inspect.html#inspect.getsource" rel="noreferrer"><code>inspect.getsource</code></a>.</p>
<p>Here's what the two look like with your examples:</p>
<pre><code>&gt;&gt;&gt; f1 = lambda x: x
&gt;&gt;&gt; f2 = lambda y: y
&gt;&gt;&gt; def f3(z):
...     return z
&gt;&gt;&gt; dis.dis(f1)
  1           0 LOAD_FAST                0 (x)
              3 RETURN_VALUE
&gt;&gt;&gt; dis.dis(f2)
  1           0 LOAD_FAST                0 (y)
              3 RETURN_VALUE
&gt;&gt;&gt; dis.dis(f3)
  1           0 LOAD_FAST                0 (z)
              3 RETURN_VALUE
&gt;&gt;&gt; inspect.getsource(f1)
'f1 = lambda x: x\n'
&gt;&gt;&gt; inspect.getsource(f2)
'f2 = lambda y: y\n'
&gt;&gt;&gt; inspect.getsource(f3)
'def f3(z):\n    return z\n'
</code></pre>
<p>In the first case, you need to know enough about <code>dis</code> to realize that the <code>(x)</code>, etc., are not part of the bytecode, but rather part of the function's list of local names. (This is explained as much in the <code>inspect</code> docs as in the <code>dis</code> docs.) In the second, you need to know enough about Python to realize that the <code>def</code> and the <code>lambda</code> are defining the exact same function. So, either way, there's no way to <em>automate</em> this (or, really, anything much beyond Martijn's answer).</p>
</div>
<div class="post-text" itemprop="text">
<p>The one thing you could test for is code object equality:</p>
<pre><code>&gt;&gt;&gt; x = lambda x: x
&gt;&gt;&gt; y = lambda y: y
&gt;&gt;&gt; x.__code__.co_code
'|\x00\x00S'
&gt;&gt;&gt; x.__code__.co_code == y.__code__.co_code
True
</code></pre>
<p>Here the bytecode for both functions is the same. You'll perhaps need to verify more aspects of the code objects (constants and closures spring to mind), but equal bytecode should equal the same execution path.</p>
<p>There are of course ways to create functions that return the same value for the same input, but with different bytecode; there are always more ways to skin a fish.</p>
</div>
<span class="comment-copy">Closely related: <a href="http://stackoverflow.com/q/9963155">Developing a heuristic to test simple anonymous Python functions for equivalency</a>, <a href="http://stackoverflow.com/q/9393713">Clojure test for equality of function expression</a></span>
<span class="comment-copy">â€¦ although the answers to the Python question seem to assume that it's impossible to get the bytecode directly, and therefore you have to disassemble it and then try to strip out all the extra stuff the disassembler added from sources other than the bytecode, which is silly when it's actually perfectly possible (and a lot simpler) to just get the bytecode directlyâ€¦</span>
<span class="comment-copy">In case anybody else came here to find out how to compare two references to the same function: <code>f==g</code> works for me</span>
<span class="comment-copy">You can also create objects where your test is true, but the result is different. (This is a bit contrived, but whatever...): <a href="https://gist.github.com/sharth/7536465" rel="nofollow noreferrer">gist.github.com/sharth/7536465</a></span>
<span class="comment-copy">@sharth: And the answer already covers that: "You'll perhaps need to verifyâ€¦" He gave closures as one example. Custom function attributes are another. Giving the function a different <code>__globals__</code> is another. I don't think we need an exhaustive list.</span>
<span class="comment-copy">ðŸŽ¶ <i>You say fish and I say catato.</i> â™ªðŸŽ¶â€Ž</span>
