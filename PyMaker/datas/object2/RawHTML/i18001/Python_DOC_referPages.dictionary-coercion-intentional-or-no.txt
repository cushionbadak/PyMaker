<div class="post-text" itemprop="text">
<p>If I write:</p>
<pre><code>d = { 0:'a', 1:'b' }
d[False] = 'c'
d[True] = 'd'
print(d)
</code></pre>
<p>I get:</p>
<pre><code>{ 0:'c', 1:'d' }
</code></pre>
<p>Why is it coercing them into ints? It does the same thing in reverse.</p>
<pre><code>d = {False:'a', True:'b'}
d[0] = 'c'
d[1] = 'd'
print(d)
</code></pre>
<p>Output is:</p>
<pre><code>{False:'c', True: 'd'}
</code></pre>
<p>Can this be disabled? Is it a bug?</p>
</div>
<div class="post-text" itemprop="text">
<p>It's because those values are considered equal:</p>
<pre><code>&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; 
&gt;&gt;&gt; False == 0
True
</code></pre>
<p>and have the same hash values:</p>
<pre><code>&gt;&gt;&gt; hash(True), hash(1)
(1, 1)
&gt;&gt;&gt; 
&gt;&gt;&gt; hash(False), hash(0)
(0, 0)
</code></pre>
<p>Therefore, from the dictionary's point of view, <code>True</code> and <code>1</code> are indistinguishable as are <code>False</code> and <code>0</code>.</p>
<p>There is no way to "disable" this -- you shouldn't be using non-homogenous keys in a dict to begin with.</p>
<p>A potential workaround in this specific case would be to reserve special int values for <code>True</code> and <code>False</code> other than <code>1</code> and <code>0</code>, respectively (presuming you need <code>1</code> and <code>0</code> as independent keys). For instance, you could have <code>-1</code> represent <code>True</code> and <code>-2</code> represent <code>False</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just offering some background on arshajii's answer.</p>
<p>The two boolean values, <code>True</code> and <code>False</code>, have a strange relation with integers.</p>
<p>On one hand, they have different string representations, and have separate identities:</p>
<pre><code>&gt;&gt;&gt; print(True)
True
&gt;&gt;&gt; print(1)
1

&gt;&gt;&gt; True is 1
False
</code></pre>
<p>On the other hand, they behave as integers under comparisons and arithmetic:</p>
<pre><code>&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; True + 1
2
</code></pre>
<p>The reason for this behavior is compatibility. A long time ago, the <code>bool</code> type didn't exist. "Boolean" operators copied C behavior, reusing <code>0</code> and <code>1</code> for "false" and "true".</p>
<p>Eventually Guido realized <a href="http://www.python.org/dev/peps/pep-0285/" rel="noreferrer">this didn't make much sense</a>, and added the constants we know and love.</p>
<p>But there was a problem. Even then, there was already a lot of code that treated boolean values like integers. If boolean operations started using the "correct" type, all this code would break.</p>
<p>So Guido made a compromise. Booleans have their own type, <code>bool</code>, and display differently to integers. But in arithmetic operations and comparisons, most notably <code>__eq__</code> and <code>__hash__</code>, they are treated as one and the same. So old code would continue to work, while new code can still take advantage of the new <code>bool</code> type.</p>
<p>Maybe that'll change in Python 4. But for now, <code>bool</code> is a subclass of <code>int</code>, and we'll have to live with that.</p>
<p>(On a related note, that's one of the reasons why <code>True</code> and <code>False</code> are in Title Case, rather than lower case like other Python keywords.)</p>
</div>
<div class="post-text" itemprop="text">
<p><code>bool</code> is a subclass of <code>int</code> whose <em>representation</em> is "False" or "True", but whose <em>value</em> is 0 or 1.</p>
</div>
<span class="comment-copy">Notice that <code>isinstance(True, int)</code> returns <code>True</code>. If I recall correctly, booleans are just special subclasses of <code>int</code>.</span>
<span class="comment-copy">Yep, <code>True.__class__.__base__</code> is <code>&lt;type 'int'&gt;</code>.</span>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/2764017/is-false-0-and-true-1-in-python-an-implementation-detail-or-is-it-guarante">Is False == 0 and True == 1 in Python an implementation detail or is it guaranteed by the language?</a></span>
<span class="comment-copy">@Ashwini Chaudhari: for the definition of True and False see here: <a href="https://docs.python.org/3/reference/expressions.html#booleans" rel="nofollow noreferrer">docs.python.org/3/reference/expressions.html#booleans</a></span>
<span class="comment-copy">@Humbalan I think I pretty much know what they mean.</span>
<span class="comment-copy">They aren't aliases...if they were, <code>False is 0</code> would be <code>True</code>. I understand what you mean, but just for clarity...</span>
<span class="comment-copy">Edited and fixed. That's what happens when you StackOverflow right before leaving for work ;)</span>
<span class="comment-copy">there's more than just the value -- It also has the same hashing function.</span>
