<div class="post-text" itemprop="text">
<p>After reading parts of Django source code, I want to do some test and write codes below to watch how <strong>metaclass</strong> works:</p>
<pre><code>class MyMeta(type):
    def __new__(cls, name, bases, attrs):
        print cls, name, bases, attrs
        return super(MyMeta, cls).__new__(cls, name, bases, attrs)

class AttrFiled(object): pass

class Test(MyMeta):
    name = AttrField()
</code></pre>
<p>It always complains:</p>
<pre><code>TypeError: __new__() takes at least 2 arguments (1 given)
</code></pre>
<p>And I add modify it as below:</p>
<pre><code>def with_metaclass(meta, *bases):  # copied from Django code.
    return meta("NewBase", bases, {})

class Test(with_metaclass(MyMeta)):
    name = CharField()
</code></pre>
<p>and it works.</p>
<p>I also read this <a href="https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python">What is a metaclass in Python?</a>.
But still feel confused.</p>
<p>Thanks in advance !</p>
</div>
<div class="post-text" itemprop="text">
<p><code>with_metaclass</code> was first introduced in the <code>six</code> library (if I recall correctly), that eases transition from Python 2 to Python 3. It's a clever trick to make code compatible with both of them.</p>
<p>Python 2 has the following syntax for declaring use of metaclass:</p>
<pre><code>class Foo(object):
    __metaclass__ = FooMeta
</code></pre>
<p>Python 3, has a different one:</p>
<pre><code>class Foo(metaclass=FooMeta):
    pass
</code></pre>
<p>What <code>with_metaclass(meta)</code> does: it creates an intermediate temporary class using <code>meta</code> metaclass' constructor directly, and you derive your class from it. So both Pythons -- 2 and 3 are happy.</p>
<p>You should also read Python documentation on this topic: <a href="http://docs.python.org/3/reference/datamodel.html#metaclasses" rel="nofollow">http://docs.python.org/3/reference/datamodel.html#metaclasses</a></p>
<hr/>
<p>In your specific case, when you write <code>class Test(MyMeta):</code> you're just declaring a <strong>metaclass</strong> <code>Test</code> that is derived from <code>MyMeta</code>. To make a <strong>class</strong>, you need to write either</p>
<pre><code> class Test:
     __metaclass__ = MyMeta
</code></pre>
<p>or</p>
<pre><code> class Test(metaclass=MyMeta):
     ...
</code></pre>
<p>depending on what python version you have.  Or, if you are not sure if you need to support Python 2 or not, you can simply use <code>with_metaclass</code>, it's also OK.</p>
</div>
<span class="comment-copy">Thanks! It's really helpful. BTW, why is it named with six.py ? 2*3 ? :)</span>
<span class="comment-copy">Quoting six' official documentation: "The name, “six”, comes from the fact that 2*3 equals 6. Why not addition? Multiplication is more powerful, and, anyway, “five” has already been snatched away by the Zope Five project." ;)</span>
