<div class="post-text" itemprop="text">
<p>I was using python dictionary built-in methods and found they behave a bit differently in terms of giving the output on 2.7 and 3.3 version of Python. </p>
<p>Here is an example:</p>
<p>Let my dictionary be the following:</p>
<pre><code>d = {'A': [1, 2, 3], 'B': "Hello", 'C': ["this is good"]}

&gt;&gt;&gt; d
{'B': 'Hello', 'C': ['this is good'], 'A': [1, 2, 3]}
</code></pre>
<p>Now when I use the <code>keys()</code> or <code>items()</code> or <code>values()</code> method in 3.3 it is giving me the following output:</p>
<pre><code>&gt;&gt;&gt; print(d.keys())
dict_keys(['B', 'C', 'A'])

&gt;&gt;&gt; print(d.values())
dict_values(['Hello', ['this is good'], [1, 2, 3]])

&gt;&gt;&gt; print(d.items())
dict_items([('B', 'Hello'), ('C', ['this is good']), ('A', [1, 2, 3])])
</code></pre>
<p>While ideally it should give me a list of the keys or values or items as given by 2.7 version below:</p>
<pre><code>&gt;&gt;&gt; print(d.keys())
['A', 'C', 'B']

&gt;&gt;&gt; print(d.values())
[[1, 2, 3], ['this is good'], 'Hello']

&gt;&gt;&gt; print(d.items())
[('A', [1, 2, 3]), ('C', ['this is good']), ('B', 'Hello')]
</code></pre>
<p>I see that in the help on <code>dict.keys()</code> or <code>dict.values</code> on 3.3 it now says it returns a set of keys. unlike a list of keys on 2.7</p>
<p>My problem is that since it is also appending <code>dict_keys</code> or <code>dict_values</code> or <code>dict_items</code> keywords in the output I am unable to use the list of keys or values or items to store it in some variable in 3.3 unlike in 2.7</p>
<p>Can anyone help on this why is this happening?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 switched to using more efficient data structures and methods throughout; you can get the same <a href="http://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow">dictionary view objects</a> in Python 2 with using <a href="http://docs.python.org/2/library/stdtypes.html#dict.viewkeys" rel="nofollow"><code>dict.viewkeys()</code></a>, <a href="http://docs.python.org/2/library/stdtypes.html#dict.viewvalues" rel="nofollow"><code>dict.viewvalues()</code></a> and <a href="http://docs.python.org/2/library/stdtypes.html#dict.viewitems" rel="nofollow"><code>dict.viewitems()</code></a>.</p>
<p>If you have to have a list, simply use <code>list()</code> to turn collect all values in the view into a list:</p>
<pre><code>&gt;&gt;&gt; d={'A': [1,2,3], 'B': "Hello", 'C': ["this is good"]}
&gt;&gt;&gt; d.keys()
dict_keys(['C', 'B', 'A'])
&gt;&gt;&gt; list(d.keys())
['C', 'B', 'A']
&gt;&gt;&gt; list(d.values())
[['this is good'], 'Hello', [1, 2, 3]]
&gt;&gt;&gt; list(d.items())
[('C', ['this is good']), ('B', 'Hello'), ('A', [1, 2, 3])]
</code></pre>
<p>For just the keys, you can also call <code>list()</code> on the dictionary, <em>directly</em>:</p>
<pre><code>&gt;&gt;&gt; list(d)
['C', 'B', 'A']
</code></pre>
</div>
<span class="comment-copy">It is not without reason that one is called <code>2.x</code> and the other is called <code>3.x</code> :)</span>
<span class="comment-copy">That helps!! Thanks a lot!</span>
