<div class="post-text" itemprop="text">
<p>I have names like "Western Michigan" "Northern Illinois" and I need to change them to "W Michigan" and "N Illinois".  The following is the closest I have but this fails cause let's say I match the word "Western Michigan" it throws an error and says \2 is an unmatched group (\3 seems to return the W I want).  (this is python)  </p>
<pre><code>re.sub("^((S)outhern|(E)astern|(W)estern|(N)orthern)", r"\2", long_name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have 5 capturing groups - but that's already been explained.  You can get what you want easily if you reduce it to 1 capturing group, but it's a little subtle.  First you use a "positive lookahead assertion" to ensure that you're looking at one of the "long words" of interest.  An assertion doesn't <em>match</em> anything, though.  It just constrains the search.  Then you can capture the letter following, and consume the rest.  Like so:</p>
<pre><code>pat = r"""(?=Southern|Eastern|Western|Northern)  # looking at one of these words
          (.)   # just capture the first character
          (outhern|astern|estern|orthern)  # and consume the rest"""
pat = re.compile(pat, re.VERBOSE)
pat.sub(r"\1", long_name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of passing a replace pattern, you can pass a callback:</p>
<pre><code> re.sub("^(?P&lt;word&gt;Southern|Eastern|Western|Northern)", 
        lambda match: match.group('word')[0], 
        'Northern Illinois')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The grouping for the regular expression is by the n<sup>th</sup> open paren:</p>
<pre><code>#        12          3         4         5
re.sub("^((S)outhern|(E)astern|(W)estern|(N)orthern)", r"\2", long_name)
</code></pre>
<p>Thus, the 2nd group would be 'S' if it matched, the third group the 'E' if it matched, and so on.</p>
<p>To rectify this, instead match the word and use the first character of the matched word.</p>
</div>
<span class="comment-copy">Do you really need a regex for this?</span>
<span class="comment-copy">thanks this works perfectly.  could you please explain the syntax.  i dont understand 1) "?P&lt;word&gt;"    2)how this lambda works here</span>
<span class="comment-copy"><code>(?P&lt;group_name&gt; [your pattern] )</code> denotes a named group, so instead of referencing it by number (<code>match.group(1)</code>), you can reference it by name <code>match.group('group_name')</code>. More on this here: <a href="http://docs.python.org/3/library/re.html#module-re" rel="nofollow noreferrer">docs.python.org/3/library/re.html#module-re</a></span>
<span class="comment-copy">I like your explanation of the problem but I think your answer could benefit from a concrete example of what you mean by "match the word and use the first character" since it isn't obvious from just that text.</span>
<span class="comment-copy">absolutely it could, the problem is that while I'm rather familiar with some of the nuances of regular expressions, my python skills are rather lacking and I'm certain I couldn't produce something properly pythonic for it.  If another answer wants to incorporate the two lines that I've got into their own, I would be quite happy to delete my own answer as redundant.</span>
