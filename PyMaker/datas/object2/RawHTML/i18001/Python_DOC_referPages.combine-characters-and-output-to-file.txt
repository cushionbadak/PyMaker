<div class="post-text" itemprop="text">
<p>I have a quick question, is there a way to have python combine a range of characters, combine them, then put them into a text file?</p>
<p>What I mean is, if I have the characters, "a", "b", "3", "F", "@", etc, is there a way to combine them in various ways to make, "abF", "F@b", "3F@ab", etc and then print them each on a separate line of a text file?</p>
<p>so far, what I've got is this:</p>
<pre><code>lst = ("ab@F3")
list1 = list()
for ch in lst:
    list1.append(ch)
    print(list1)
</code></pre>
<p>I would like it to be able to output something like, "abF3" AND "3Fab" AND "Fb3a"</p>
<p>Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools
with open('output.txt', 'w') as f:
    for n in range(1,5):
        for p in itertools.permutations('ab@F3',n):
            print(''.join(p), file=f)
</code></pre>
<p>based on above but with some fixes</p>
</div>
<div class="post-text" itemprop="text">
<p>From your sample output, it looks like you want all 120 of the 4-element permutations of the 5-element set. That's simple with <a href="http://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow"><code>itertools.permutations</code></a>:</p>
<pre><code>list1 = list(itertools.permutations(lst, 4))
</code></pre>
<p>You also seem to want them in random order, but that's easy:</p>
<pre><code>random.shuffle(list1)
</code></pre>
<p>If you want all permutations of <em>any</em> number of characters (well, any number from 1 to 5 inclusive), you just chain together the <code>permutations</code> for each number:</p>
<pre><code>perms = (itertools.permutations(lst, n) for n in range(1, 6))
list1 = list(itertools.chain.from_iterable(perms))
</code></pre>
<p>There are 120+120+60+20+5=325 of these. And again, if you want them in random order, just <code>shuffle</code> them.</p>
<p>Almost anything reasonable that you want to do will be easy to doâ€”but until you know, and can explain to a human, what it is that you actually want, you won't be able to explain it to Python either.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not 100% clear what you mean, but I guess this is what you want:</p>
<pre><code>import itertools

chain = itertools.chain(*(itertools.permutations(chars, n) for n in xrange(1, len(chars) + 1)))
print ' AND '.join('"%s"' % ''.join(x) for x in chain)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this.</p>
<pre><code>from itertools import permutations
chars = 'ab@F3'
for r in range(len(chars)):
    for p in permutations('ab@F3', r+1):
        print ''.join(p)
</code></pre>
<p>You'll get every permutation of those characters.  In this example, there are 325 permutations.</p>
<p>Hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>One liner (list comprehension) approach (because I don't want to add a duplicate answer)</p>
<pre><code>import itertools
my_chars = "ab3F@"
print [''.join(p) for i in range(1, len(my_chars)+1) for p in itertools.permutations(my_chars,i)]
</code></pre>
</div>
<span class="comment-copy">Why <code>@</code> is not included in the last example?</span>
<span class="comment-copy">You realize that there are 3905 possible permutations of any length for those 5 characters?</span>
<span class="comment-copy">Basically you want all permutations for every element in the powerset of your list?</span>
<span class="comment-copy">@ShashankGupta: I don't think he wants that; he just wants either all 120 4-element permutations, or all 120+120+60+20+5=325 N-element permutations for any N in [1, 5]. Either way, it's a whole lot more reasonable than what you're suggesting.</span>
<span class="comment-copy">@abarnert Yeah my math was off. :P Sorry.</span>
<span class="comment-copy">I have no idea what this is trying to do, but whatever it is, it's doing it wrong. You're trying to joining each 2-element permutation with each number from 1 to 5. Why?</span>
<span class="comment-copy">Thanks @abarnert!  I dropped the 2nd parameter of <code>permutations</code> down into the <code>join</code> call.  Corrected, and thank you!</span>
<span class="comment-copy">You just took my two-liner and turned it into one longer-than-80-character line. What's the point of that?</span>
<span class="comment-copy">Haha, I didn't see your answer before writing mine. But, mine isn't exactly a replica of yours. Atleast better than the other duplicate answers. :|</span>
