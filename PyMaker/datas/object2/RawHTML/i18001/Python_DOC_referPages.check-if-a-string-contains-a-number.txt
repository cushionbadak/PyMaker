<div class="post-text" itemprop="text">
<p>Most of the questions I've found are biased on the fact they're looking for letters in their numbers, whereas I'm looking for numbers in what I'd like to be a numberless string.
I need to enter a string and check to see if it contains any numbers and if it does reject it.</p>
<p>The function <code>isdigit()</code> only returns <code>True</code> if ALL of the characters are numbers. I just want to see if the user has entered a number so a sentence like
"I own 1 dog" or something.</p>
<p>Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#any" rel="noreferrer"><code>any</code></a> function, with the <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="noreferrer"><code>str.isdigit</code></a> function, like this</p>
<pre><code>&gt;&gt;&gt; def hasNumbers(inputString):
...     return any(char.isdigit() for char in inputString)
... 
&gt;&gt;&gt; hasNumbers("I own 1 dog")
True
&gt;&gt;&gt; hasNumbers("I own no dog")
False
</code></pre>
<p>Alternatively you can use a Regular Expression, like this</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; def hasNumbers(inputString):
...     return bool(re.search(r'\d', inputString))
... 
&gt;&gt;&gt; hasNumbers("I own 1 dog")
True
&gt;&gt;&gt; hasNumbers("I own no dog")
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a combination of <a href="http://docs.python.org/2/library/functions.html#any" rel="noreferrer"><code>any</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="noreferrer"><code>str.isdigit</code></a>:</p>
<pre><code>def num_there(s):
    return any(i.isdigit() for i in s)
</code></pre>
<p>The function will return <code>True</code> if a digit exists in the string, otherwise <code>False</code>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; king = 'I shall have 3 cakes'
&gt;&gt;&gt; num_there(king)
True
&gt;&gt;&gt; servant = 'I do not have any cakes'
&gt;&gt;&gt; num_there(servant)
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/re.html">https://docs.python.org/2/library/re.html</a></p>
<p>You should better use regular expression. It's much faster.</p>
<pre><code>import re

def f1(string):
    return any(i.isdigit() for i in string)


def f2(string):
    return re.search('\d', string)


# if you compile the regex string first, it's even faster
RE_D = re.compile('\d')
def f3(string):
    return RE_D.search(string)

# Output from iPython
# In [18]: %timeit  f1('assdfgag123')
# 1000000 loops, best of 3: 1.18 Âµs per loop

# In [19]: %timeit  f2('assdfgag123')
# 1000000 loops, best of 3: 923 ns per loop

# In [20]: %timeit  f3('assdfgag123')
# 1000000 loops, best of 3: 384 ns per loop
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>use <pre>str.isalpha() </pre></p>
<p>Ref: <a href="https://docs.python.org/2/library/stdtypes.html#str.isalpha" rel="noreferrer">https://docs.python.org/2/library/stdtypes.html#str.isalpha</a></p>
<blockquote>
<p>Return true if all characters in the string are alphabetic and there
  is at least one character, false otherwise.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You could apply the function isdigit() on every character in the String. Or you could use regular expressions.</p>
<p>Also I found <a href="https://stackoverflow.com/questions/8234641/how-do-i-find-one-number-in-a-string-in-python">How do I find one number in a string in Python?</a> with very suitable ways to return numbers. The solution below is from the answer in that question.</p>
<pre><code>number = re.search(r'\d+', yourString).group()
</code></pre>
<p>Alternatively:</p>
<pre><code>number = filter(str.isdigit, yourString)
</code></pre>
<p>For further Information take a look at the regex docu: <a href="http://docs.python.org/2/library/re.html" rel="nofollow noreferrer">http://docs.python.org/2/library/re.html</a></p>
<p>Edit: This Returns the actual numbers, not a boolean value, so the answers above are more correct for your case</p>
<p>The first method will return the first digit and subsequent consecutive digits. Thus 1.56 will be returned as 1.  10,000 will be returned as 10. 0207-100-1000 will be returned as 0207. </p>
<p>The second method does not work.</p>
<p>To extract all digits, dots and commas, and not lose non-consecutive digits, use:</p>
<pre><code>re.sub('[^\d.,]' , '', yourString)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What about this one?</p>
<pre><code>import string

def containsNumber(line):
    res = False
    try:
        for val in line.split():
            if (float(val.strip(string.punctuation))):
                res = True
                break
    except ValueError, e:
        pass
    return res

print containsNumber('234.12 a22') # returns True
print containsNumber('234.12L a22') # returns False
print containsNumber('234.12, a22') # returns True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can accomplish this as follows:</p>
<p><code>if a_string.isdigit():
     do_this()
 else:
     do_that()</code></p>
<p><a href="https://docs.python.org/2/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer">https://docs.python.org/2/library/stdtypes.html#str.isdigit</a></p>
<p>Using <code>.isdigit()</code> also means <strong>not having to resort to exception handling</strong> (try/except) in cases where you need to use list comprehension (try/except is not possible inside a list comprehension).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use NLTK method for it.</p>
<p>This will find both '1' and 'One' in the text:</p>
<pre><code>import nltk 

def existence_of_numeric_data(text):
    text=nltk.word_tokenize(text)
    pos = nltk.pos_tag(text)
    count = 0
    for i in range(len(pos)):
        word , pos_tag = pos[i]
        if pos_tag == 'CD':
            return True
    return False

existence_of_numeric_data('We are going out. Just five you and me.')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use range with count to check how many times a number appears in the string by checking it against the range:</p>
<pre><code>def count_digit(a):
    sum = 0
    for i in range(10):
        sum += a.count(str(i))
    return sum

ans = count_digit("apple3rh5")
print(ans)

#This print 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simpler way to solve is as</p>
<pre><code>s = '1dfss3sw235fsf7s'
count = 0
temp = list(s)
for item in temp:
    if(item.isdigit()):
        count = count + 1
    else:
        pass
print count
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm surprised that no-one mentionned this combination of <code>any</code> and <code>map</code>:</p>
<pre><code>def contains_digit(s):
    isdigit = str.isdigit
    return any(map(isdigit,s))
</code></pre>
<p>in python 3 it's probably the fastest there (except maybe for regexes) is because it doesn't contain any loop (and aliasing the function avoids looking it up in <code>str</code>). </p>
<p>Don't use that in python 2 as <code>map</code> returns a <code>list</code>, which breaks <code>any</code> short-circuiting</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import string
import random
n = 10

p = ''

while (string.ascii_uppercase not in p) and (string.ascii_lowercase not in p) and (string.digits not in p):
    for _ in range(n):
        state = random.randint(0, 2)
        if state == 0:
            p = p + chr(random.randint(97, 122))
        elif state == 1:
            p = p + chr(random.randint(65, 90))
        else:
            p = p + str(random.randint(0, 9))
    break
print(p)
</code></pre>
<p>This code generates a sequence with size n which at least contain an uppercase, lowercase, and a digit. By using the while loop, we have guaranteed this event.   </p>
</div>
<span class="comment-copy">Regular expressions!</span>
<span class="comment-copy">What about negative numbers?</span>
<span class="comment-copy">@Ray Then the RegEx can be extended like this <code>r'-?\d+'</code></span>
<span class="comment-copy">Wouldn't the original regex detect the negative numbers anyway?</span>
<span class="comment-copy">@confused00 Nope, <code>\d</code> will match only a single digit in the range <code>0</code> to <code>9</code>.</span>
<span class="comment-copy">@thefourtheye: -1 is still a digit.  It is a dash, followed by the digit '1'</span>
<span class="comment-copy">No need to create a temporary list, you can use a generator expression instead just by removing those square brackets.</span>
<span class="comment-copy">Ah yeah, just realized that <code>any</code> accepts generator expressions.</span>
<span class="comment-copy">f3 is not returning anything</span>
<span class="comment-copy">That means there is no match, it returns <code>None</code></span>
<span class="comment-copy">There are other types of characters than alphabetic and numeric - eg, <code>'_'.isalpha()</code> is False.</span>
<span class="comment-copy">Please don't just throw your source code here. Be nice and try to give a nice description to your answer, so that others will like it and upvote it. See: <a href="https://stackoverflow.com/help/how-to-answer">How do I write a good answer?</a></span>
<span class="comment-copy">Welcome to Stack Overflow! Please don't just throw your source code here. Be nice and try to give a nice description to your answer, so that others will like it and upvote it. See: <a href="https://stackoverflow.com/help/how-to-answer">How do I write a good answer?</a></span>
<span class="comment-copy">Please add explanation to your answer</span>
