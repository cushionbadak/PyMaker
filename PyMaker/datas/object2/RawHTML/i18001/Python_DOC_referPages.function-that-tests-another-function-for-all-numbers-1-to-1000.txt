<div class="post-text" itemprop="text">
<p>I've created a function named <code>number(x)</code> that tests a number to see whether or not a number is perfect or not. Now my goal is to create a tester function that tests all numbers from 1 to 1000 and return numbers that are perfect. This is the code i have for the test function:</p>
<pre><code>def unittest():

    for i in range(0,1000):
        perfect(i)
        if True:
            return i
</code></pre>
<p>It's not working, but i think i'm close. Any advice or help?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you meant this, and notice the correct parameters for <code>range</code>, and how we use a list to accumulate all the results - otherwise, the function will return only <em>one</em> value!</p>
<pre><code>def unittest():
    ans = []
    for i in range(1, 1001):
        if perfect(i):
            ans.append(i)
    return ans
</code></pre>
<p>Alternatively, and <em>not</em> recommended (it's redundant), you could test if the returned value was <code>True</code>:</p>
<pre><code>def unittest():
    ans = []
    for i in range(1, 1001):
        if perfect(i) is True :
            ans.append(i)
    return ans
</code></pre>
<p>Yet another alternative would be to use <a href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehensions</a>, which is more idiomatic and potentially faster than using an explicit loop:</p>
<pre><code>def unittest():
    return [i for i in range(1, 1001) if perfect(i)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you <code>return</code>, that's the end of your function. If you want to return <em>all</em> of the perfect numbers, you have to keep track of them and return them all at the end.</p>
<p>On top of that, your <code>if True:</code> means you'll return <code>0</code> whether it's perfect or not.</p>
<p>So, what you need to do is:</p>
<pre><code>def unittest():
    results = []
    for i in range(1000):
        if perfect(i):
            results.append(i)
    return results
</code></pre>
<hr/>
<p>There actually <em>is</em> a way to solve this without building the list, by using <code>yield</code> instead of <code>return</code>. That's probably too advanced for you to learn right now, but I'll explain it anyway. First, here's the code:</p>
<pre><code>def unittest():
    for i in range(1000):
        if perfect(i):
            yield i
</code></pre>
<p>See the tutorial section on <a href="http://docs.python.org/3/tutorial/classes.html#iterators" rel="nofollow">Iterators</a>, and the following two sections, for details. But basically, a <code>yield</code> is like a <code>return</code> that doesn't return. What your function actually returns is not a list, but a generator. If someone then iterates over that generator, it will go through your function until the first <code>yield</code>, then go through until the next <code>yield</code>, and so on until you're done. The tutorial explains this much better than a single paragraph ever could.</p>
</div>
<span class="comment-copy">This will only return the <i>first</i> perfect number. He want to return <i>all</i> perfect numbers.</span>
<span class="comment-copy">@abarnert right, that's fixed now!</span>
