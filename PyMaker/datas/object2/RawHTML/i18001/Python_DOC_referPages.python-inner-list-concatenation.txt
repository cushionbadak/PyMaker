<div class="post-text" itemprop="text">
<p>Ok, while I maybe wrong, I have the feeling I can solve this without the help of a function.
With this kind of input list:</p>
<pre><code>input=[[1,2,3],[4,5],[7],[5,4,6],[5,4]]
</code></pre>
<p>I want a resulting list where inner lists sharing a common element are concatenated:</p>
<pre><code>result=[[1,2,3],[4,5,6],[7]]
</code></pre>
<p>I already found the </p>
<pre><code>if any(x in result[j] for x in input[i])
</code></pre>
<p>syntax that seems helpful for my problem, but now I'm stuck.</p>
<p>[EDIT]
one of my trials:</p>
<pre><code>input=[[1,2,3],[4,5],[7],[5,4,6],[5,4]]

result=[input[0]]
for i in range(len(input)):
    for j in range(len(result)):
        if result[j] != input[i]:
            if any(x in result[j] for x in input[i]):
                result[j].extend(input[i])
                result[j]=list(set(result[j]))
                print "concatenate ",result[j], input[i]
                break
            else :
                result.append(input[i])
                print "append ", result[j], input[i]
                break
&gt;&gt;&gt; (bad) result
[[1, 2, 3], [4, 5], [7], [5, 4, 6], [5, 4]]
</code></pre>
<p>While if I initialize result with result=[input[-1]] it works:</p>
<pre><code>input=[[1,2,3],[4,5],[7],[5,4,6],[5,4]]

result=[input[-1]]
for i in range(len(input)):
    for j in range(len(result)):
        if result[j] != input[i]:
            if any(x in result[j] for x in input[i]):
                result[j].extend(input[i])
                result[j]=list(set(result[j]))
                print "concatenate ",result[j], input[i]
                break
            else :
                result.append(input[i])
                print "append ", result[j], input[i]
                break
&gt;&gt;&gt; (good) result
[[4, 5, 6], [1, 2, 3], [7]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a more simple and well-performing approach to solve your problem:</p>
<pre><code>def concat(myinput) :
    myinput_copy = [set(elem) for elem in myinput]
    result = []
    i = 0

    # use `while` to avoid `for` problems (you're deleting list elems)
    while i &lt; len(myinput_copy) :
        result.append(myinput_copy[i])
        j = i + 1
        while j &lt; len(myinput_copy) :
            if result[i] &amp; myinput_copy[j] :
                result[i] |= myinput_copy[j]
                del myinput_copy[j]
                j = i + 1
            else :
                j += 1
        i += 1

    return result

print concat([[1,2,3],[4,5],[7],[5,4,6],[5,4]])
</code></pre>
<p>It's about two times faster than <a href="https://stackoverflow.com/a/13715626/1763602">J.F. Sebastian's answer</a> to the other question, even if the other question wanted a different sorting.</p>
<p>I used myinput because <code>input</code> is a built-in function, and it's better to not masque it.</p>
<p>About sets and their operators: <a href="http://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">http://docs.python.org/3/tutorial/datastructures.html#sets</a> (Python 3)</p>
<p>By the way, your solution is wrong, user1189129. Try your code with this input to see the problem: <code>input = [[1, 2, 3], [1, 8], [1, 9], [4, 5], [7], [5, 4, 6], [5, 4]]</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert your list to plain list (extract all variables from sublist into a bigger list) and then split them into the chunks:</p>
<pre><code>def chunks(l, n):
    for i in xrange(0, len(l), n):
        yield l[i:i+n]

def plain(lst):
    return set([x for y in lst for x in y])

lst = [[1,2,3],[4,5],[7],[5,4,6],[5,4]]

print list(chunks(tuple(plain(l)), 3))
</code></pre>
</div>
<span class="comment-copy">Welcome to Stack Overflow! It looks like you want us to write some code for you.  While many users are willing to produce code for a coder in distress,  they usually only help when the poster has already tried to solve the problem on their own.  A good way to demonstrate this effort is to include the code you've written so far,  example input (if there is any), the expected output, and the output you actually get (console output, stack traces, compiler errors - whatever is applicable).  The more detail you provide, the more answers you are likely to receive. Check the <a href="https://stackoverflow.com/tour">FAQ</a> and <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a></span>
<span class="comment-copy">Not sure exactly what you are trying to do, please supply more information on what you are attempting to do, as I mentioned above - sample input/output is greatly helpful in this case.</span>
<span class="comment-copy">@InbarRose I think the output and input is already there..</span>
<span class="comment-copy">I don't get what you're asking for.</span>
<span class="comment-copy">@user1189129 I am still unable to understand what you are trying to do here. Can you add a small summary of what you want to achieve?</span>
