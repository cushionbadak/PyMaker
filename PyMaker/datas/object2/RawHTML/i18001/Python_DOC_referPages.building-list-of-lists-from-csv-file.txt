<div class="post-text" itemprop="text">
<p>I have an Excel file(that I am exporting as a csv) that I want to parse, but I am having trouble with finding the best way to do it. The csv is a list of computers in my network, and what accounts are in the local administrator group for each one. I have done something similar with tuples, but the number of accounts for each computer range from 1 to 30. I want to build a list of lists, then go through each list to find the accounts that should be there(Administrator, etc.) and delete them, so that I can then export a list of only accounts that shouldn't be a local admin, but are. The csv file is formatted as follows:</p>
<pre><code>"computer1"    Administrator    localadmin    useraccount
"computer2"    localadmin       Administrator 
"computer3"    localadmin       Administrator user2account
</code></pre>
<p>Any help would be appreciated</p>
<p>EDIT: Here is the code I am working with</p>
<pre><code>import csv 
import sys #used for passing in the argument
file_name = sys.argv[1] #filename is argument 1
with open(file_name, 'rU') as f:  #opens PW file
    reader = csv.reader(f)
    data = list(list(rec) for rec in csv.reader(f, delimiter=',')) #reads csv into a list of lists
    f.close() #close the csv

for i in range(len(data)):
    print data[i][0] #this alone will print all the computer names
    for j in range(len(data[i])) #Trying to run another for loop to print the usernames
        print data[i][j]
</code></pre>
<p>The issue is with the second for loop. I want to be able to read across each line and for now, just print them.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should get you on the right track:</p>
<pre><code>import csv 
import sys #used for passing in the argument
file_name = sys.argv[1] #filename is argument 1
with open(file_name, 'rU') as f:  #opens PW file
    reader = csv.reader(f)
    data = list(list(rec) for rec in csv.reader(f, delimiter=',')) #reads csv into a list of lists

    for row in data:
        print row[0] #this alone will print all the computer names
        for username in row: #Trying to run another for loop to print the usernames
            print username
</code></pre>
<p>Last two lines will print all of the row (including the "computer"). Do</p>
<pre><code>for x in range(1, len(row)):
    print row[x]
</code></pre>
<p>... to avoid printing the computer twice.</p>
<p>Note that f.close() is not required when using the "with" construct because the resource will automatically be closed when the "with" block is exited.</p>
<p>Personally, I would just do:</p>
<pre><code>import csv 
import sys #used for passing in the argument
file_name = sys.argv[1] #filename is argument 1
with open(file_name, 'rU') as f:  #opens PW file
    reader = csv.reader(f)
    # Print every value of every row. 
    for row in reader:
        for value in row: 
            print value
</code></pre>
<p>That's a reasonable way to iterate through the data and should give you a firm basis to add whatever further logic is required.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is how I opened a .csv file and imported columns of data as numpy arrays - naturally, you don't need numpy arrays, but...</p>
<pre><code>data = {}

app = QApplication( sys.argv )
fname = unicode ( QFileDialog.getOpenFileName() )
app.quit()
filename = fname.strip('.csv') + ' for release.csv'

#open the file and skip the first two rows of data
imported_array = np.loadtxt(fname, delimiter=',', skiprows = 2)

data = {'time_s':imported_array[:,0]}
data['Speed_RPM'] = imported_array[:,1]
</code></pre>
</div>
<span class="comment-copy">Can you post any code you already have? Even if the attempt failed - it'll be much more helpful to include the problematic code.</span>
<span class="comment-copy">Look at either python's csv library or tablib and give it a shot.</span>
<span class="comment-copy">Also is there any way you could use commas as delimiters in the CSV file? It just makes it follow the default, that may be the problem you're facing. Furthermore, what isn't working for you <i>exactly</i>, i.e. what is the problem?</span>
<span class="comment-copy">Posting the code now. The csv does use commas as a delimiter. I just used tabs to show the format the csv file is saved in.</span>
<span class="comment-copy">Have you considered working directly with the excel files?  You could do this by using the Python Excel modules (<a href="http://www.python-excel.org/" rel="nofollow noreferrer">python-excel.org</a>) and this should save you the trouble of having to worry about dealing with a csv</span>
<span class="comment-copy">The mode <code>U</code> is deprecated since <code>3.4</code> and will be removed in <code>4.0</code>. Refer to <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">You don't need a list comprehension. <code>data = list(csv.reader(f, delimiter=','))</code> is plenty (each row is already a list).</span>
