<div class="post-text" itemprop="text">
<pre><code>def somefunction():
    outputs = []
    a = 0
    while a &lt; 100:
        if a%2 == 0:
            b = 2*a + 1
            outputs.append(list(zip(a,b)))
        a += 1
    return outputs
</code></pre>
<p>The above code is not what i'm using exactly but produces the same error, why does the above code return:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 4, in &lt;module&gt;
TypeError: zip argument #1 must support iteration
</code></pre>
<p>Is this a particularly efficient way of returning all the items within a function as one? If not, what is a better method?</p>
</div>
<div class="post-text" itemprop="text">
<p>It returns that error because of its exact error message; that is, the <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow">zip</a> arguments must support iteration. You just have two numbers that you are trying to "store together". In that case, I'm assuming what you are looking for is the <a href="http://docs.python.org/3/library/functions.html#func-tuple" rel="nofollow">tuple</a> data type. Either that or "put them together" with the list data type you already have. The zip is entirely unnecessary. I would suggest reading more about <a href="http://docs.python.org/3/library/stdtypes.html" rel="nofollow">Python's built-in types</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just get a list of tuples!! (or list if you prefer, but since you can't change tuples and you want to return all the outputs, tuples make more sense)</p>
<pre><code>def somefunction():
    outputs = []
    a = 0
    while a &lt; 100:
        if a%2 == 0:
            b = 2*a + 1
            tup = (a,b)
            outputs.append(tup)
        a += 1
    return outputs
</code></pre>
<p>There is no need to use <code>zip</code> here, zip is for joining two lists together, you only have two integers so you can store them in a tuple and then <code>append</code> the tuple to <code>outputs</code></p>
<h1>when zip would work for this</h1>
<p>Zip would work if you stored all <code>a</code>s in <code>a_list</code> and all <code>b</code>s in <code>b_list</code>. Then you could do:</p>
<pre><code>outputs.append(zip(a_list,b_list))
</code></pre>
<p>this is unnecessary because you can just <code>append</code> <code>a</code> and <code>b</code> together in a tuple to <code>output</code> just like my example. But that is how it would be done.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can also use list comprehension in this case:</p>
<pre><code>def f():
    return [(x, 2*x + 1) for x in range(100) if x%2 == 0]
</code></pre>
</div>
<span class="comment-copy">zip expects two lists ... its unclear what you are trying to accomplish</span>
<span class="comment-copy">Exactly what do you want the returned value to be?  If you want a list of 2-tuples, is something wrong with <code>outputs.append((a, b))</code>?</span>
<span class="comment-copy">Hi, what are you trying to do? Possibly, are you trying to return multiple values? If so, it's perfectly acceptable to return multiple values in Python.</span>
<span class="comment-copy">It sounds like you want to make your function a generator - look up <a href="http://www.jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/" rel="nofollow noreferrer"><code>yield</code></a>.</span>
<span class="comment-copy">I am trying to group all the returns from the loop into one list but keep both a and b related to eachother. But in my original function I have more than 2 items.</span>
