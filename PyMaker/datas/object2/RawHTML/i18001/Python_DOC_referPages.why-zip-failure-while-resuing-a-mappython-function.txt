<div class="post-text" itemprop="text">
<p>I construct a map <code>columns = map(lambda x: x[0], cur.description)</code>,and use it in a for loop:<br/></p>
<pre><code>for r in rows:
    proxy_list.append(Proxy(dict(zip(columns, [e for e in r]))))
</code></pre>
<p>But I find the result is weird.Only first zip successed, all of left ones <code>return {}</code> .<br/></p>
<p>sample for test:</p>
<pre><code>r = ('204.93.54.15', '7808', 6, 0, '', '2013-11-12 20:27:54', 0, 3217.0, 'United States', 'HTTPS')
description = (('ip', None, None, None, None, None, None), ('port', None, None, None, None, None, None), ('level', None, None, None, None, None, None), ('active', None, None, None, None, None, None), ('time_added', None, None, None, None, None, None), ('time_checked', None, None, None, None, None, None), ('time_used', None, None, None, None, None, None), ('speed', None, None, None, None, None, None), ('area', None, None, None, None, None, None), ('protocol', None, None, None, None, None, None))
columns = map(lambda x: x[0], description)
</code></pre>
<p>My test result is as below:</p>
<pre><code>&gt;&gt;&gt; dict(zip(columns, [e for e in r]))
{'protocol': 'HTTPS', 'level': 6, 'time_used': 0, 'ip': '204.93.54.15', 'area': 'United States', 'port': '7808', 'active': 0, 'time_added': '', 'speed': 3217.0, 'time_checked': '2013-11-12 20:27:54'}
&gt;&gt;&gt; zip(columns, [e for e in r])
&lt;zip object at 0x0000000004079848&gt;
&gt;&gt;&gt; dict(zip(columns, [e for e in r]))
{}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map</code></a> returns an iterator in Python3, so after the first iteration it is exhausted:</p>
<pre><code>&gt;&gt;&gt; columns = map(int, '12345')
&gt;&gt;&gt; list(zip(columns, range(5)))
[(1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]
&gt;&gt;&gt; list(zip(columns, range(5)))
[]
</code></pre>
<p>Convert it to a <code>list</code> first:</p>
<pre><code>&gt;&gt;&gt; columns = list(map(int, '12345'))
&gt;&gt;&gt; list(zip(columns, range(5)))
[(1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]
&gt;&gt;&gt; list(zip(columns, range(5)))
[(1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]
</code></pre>
<p>For your case it would be better to use a <code>list comprehension</code>:</p>
<pre><code>columns = [x[0] for x in  description]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check the documentation for <a href="http://docs.python.org/3/library/functions.html#map" rel="nofollow">Python3 map(..)</a>. It does not return a list; but returns an iterator. So if you plan on reusing, then do:</p>
<pre><code>columns = list(map(lambda x: x[0], cur.description))
</code></pre>
</div>
<span class="comment-copy">Test <code>list(zip(columns, [e for e in r]))</code>.</span>
<span class="comment-copy">@hcwhsa it <code>return []', </code>Proxy` is a class which accept only one dict type argument.</span>
<span class="comment-copy">I think some functions will return an iterable that can be iterated over only once.  I've had this happen to me with <code>shlex</code> and <code>open</code> I believe.</span>
<span class="comment-copy">What is the type of <code>columns</code> and <code>r</code>?</span>
<span class="comment-copy">To add on, can you do <code>r = list(r)</code> before executing the code two times, and share if you have the same result?</span>
