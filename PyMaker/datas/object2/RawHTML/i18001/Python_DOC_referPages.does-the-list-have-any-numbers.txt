<div class="post-text" itemprop="text">
<p>I have a list: <br/></p>
<pre><code>my_list = [12,8,0,4,7,21,27,"O",29,3,"X","O","X","X"]
</code></pre>
<p>This list gets updated throughout the program. Every time it gets updated, I want to check to see if it contains only numbers or only strings, or both. What can I use to do that?
<strong>I need to check all the elements in the list. Any suggestion? **<br/><br/>
**With Explanation on how the code works please.</strong> </p>
<p>Thank you all for your help.I appreciate your help. </p>
</div>
<div class="post-text" itemprop="text">
<p>How about using <a href="http://docs.python.org/3/library/functions.html#type" rel="nofollow"><code>type</code></a> and <a href="http://docs.python.org/3/library/stdtypes.html#set" rel="nofollow"><code>set</code></a>:</p>
<pre><code>&gt;&gt;&gt; my_list = [12,8,0,4,7,21,27,"O",29,3,"X","O","X","X"]
&gt;&gt;&gt; set(map(type, my_list))
{&lt;class 'int'&gt;, &lt;class 'str'&gt;}
&gt;&gt;&gt; set(map(type, my_list)) == {int, str}
True
&gt;&gt;&gt; set(map(type, my_list)) == {int}
False
&gt;&gt;&gt; set(map(type, my_list)) == {str}
False

&gt;&gt;&gt; my_list = [12,8,0,4,7,21,27]
&gt;&gt;&gt; set(map(type, my_list))
{&lt;class 'int'&gt;}

&gt;&gt;&gt; my_list = ["X", "O", "X", "X"]
&gt;&gt;&gt; set(map(type, my_list))
{&lt;class 'str'&gt;}
&gt;&gt;&gt; set(map(type, my_list)) == {str}
True
</code></pre>
<p><code>type</code> returns the type of an object:</p>
<pre><code>&gt;&gt;&gt; type(1)
&lt;class 'int'&gt;
&gt;&gt;&gt; type('X')
&lt;class 'str'&gt;
</code></pre>
<p><code>map(type, seq)</code> apply <code>type</code> to the <code>seq</code>:</p>
<pre><code>&gt;&gt;&gt; map(type, [1, 2, 3, 'X'])
&lt;map object at 0x7fc763de6e90&gt;
&gt;&gt;&gt; list(map(type, [1, 2, 3, 'X']))
[&lt;class 'int'&gt;, &lt;class 'int'&gt;, &lt;class 'int'&gt;, &lt;class 'str'&gt;]
&gt;&gt;&gt; # Using `set`, you can get unique types.
&gt;&gt;&gt; set(map(type, [1, 2, 3, 'X']))
{&lt;class 'int'&gt;, &lt;class 'str'&gt;}
</code></pre>
<p><strong>NOTE</strong> (@lvc's comment)</p>
<blockquote>
<p>This will break if you happen to have <strong>subclases</strong> of <code>int</code> or <code>str</code> in the
  list. This is probably unlikely with those classes specifically, but
  it means it doesn't generalise very well.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Use a combination of <code>isinstance</code> and <code>all</code>:</p>
<pre><code>&gt;&gt;&gt; all(isinstance(x, (int, str)) for x in my_list)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The isinstance function tells if a element x is a instance of a class. So, isinstance(2, int) evaluates to true.</p>
<p>Using map we can apply isinstance to every member of the list, generating a list with the results. So:</p>
<pre><code>map(lambda x: isinstance(x, int), my_list)
</code></pre>
<p>evaluates to:</p>
<pre><code>[True, True, True, True, True, True, True, False, True, True, False, False, False, False]
</code></pre>
<p>If you just want to know if there is a string on the list, you can do something like that:</p>
<pre><code>True in map(lambda x: isinstance(x, str), my_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think <code>filter</code> is more suitable. </p>
<pre><code>result = filter(lambda x: isinstance(x, int), my_list)
if result: print 'find integer'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just for the sake of another alternative:</p>
<pre><code>totint = sum(isinstance(x, int) for x in my_list)
if totint == 0:
    print "all are strings"
elif totint == len(my_list):
    print "all are ints"
else:
    print "mixed"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://docs.python.org/2/library/functions.html#any" rel="nofollow"><code>any()</code></a>:</p>
<pre><code>my_list = [12,8,0,4,7,21,27,"O",29,3,"X","O","X","X"]
if any(isinstance(i, (str, int)) != True for i in my_list):
    print "There is something else in the list!"
</code></pre>
<p>The <code>any()</code> statement is equivalent to:</p>
<pre><code>def any(iterable):
    for element in iterable:
        if element:
            return True
    return False
</code></pre>
<p>So pretty much, the code is equivalent to:</p>
<pre><code>for item in my_list:
    if not isinstance(i, (str, int)):
        print item, "is not a string or list!"
        break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>And another alternative, should be quicker than scanning the whole list:</p>
<pre><code>if not any(isinstance(x, int) for x in my_list):
    print "all are strings"
elif not any(isinstance(x, str) for x in my_list):
    print "all are ints"
else:
    print "mixed"
</code></pre>
<p>Or even better:</p>
<pre><code>if any(isinstance(x, int) for x in my_list):
    if any(isinstance(x, str) for x in my_list):
        print "mixed"
    else:
        print "all are ints"
else:
    print "all are strings"
</code></pre>
</div>
<span class="comment-copy">Why do you need to check all the elements in the list? Can't you just check the items that were updated?</span>
<span class="comment-copy">Why does your list contain inhomogeneous data in the first place? That's usually a bad idea.</span>
<span class="comment-copy">@Gabe I must check every element to see if they are all numbers or strings.</span>
<span class="comment-copy">I want to check using an if statement only.</span>
<span class="comment-copy">Great elegant, intuitive solution.</span>
<span class="comment-copy">@Andy: What is that supposed to mean? What aren't you allowed to use? What counts as using more than an if statement?</span>
<span class="comment-copy">@Andy, <code>if</code> statement only? I don't understand what you mean.</span>
<span class="comment-copy">@Andy: You can use <code>if set(map(type, my_list)) == {str}: return True ....</code> or use <code>any</code>/<code>all</code> as other suggested.</span>
<span class="comment-copy">@ivc Thank you very much for trying to help me. I appreciate your help.</span>
<span class="comment-copy">Can you please explain how that works?</span>
<span class="comment-copy">Thank you for answering and editing the question again. You are such a nice person. Thank you for trying to help me. :)</span>
<span class="comment-copy">Thank you for trying to help me. You are awesome.</span>
<span class="comment-copy">I never thought of that. This is a very special way of writing it. Thank you for sharing.</span>
<span class="comment-copy">interesting way of writing <code>all</code> :)</span>
<span class="comment-copy">This is such a unique answer. I am not that advanced with Python, but thank you very much for trying to help me.</span>
<span class="comment-copy">Thank you very much. I appreciate your help.</span>
