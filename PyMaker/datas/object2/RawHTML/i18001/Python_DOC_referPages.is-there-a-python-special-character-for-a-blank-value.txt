<div class="post-text" itemprop="text">
<p>I don't know how to ask this so I'm going to explain what I'm doing instead. I'm trying to search a list of lists with only 2 values. The first value I don't care about the second how ever I need to check and if it exsists I need the first value. Example</p>
<pre><code>list = [[1,'text1'],[1,'text2'],[3,'text3'],[2,'text4']]
</code></pre>
<p>so basically I need to know if there is a character like % or ! that when used in find basically means any value. Link find(!,'text2') would get me the value of 1. (i know that wouldn't work like that). Ik I have the option of searching just the second value in lists but that's unecessary code if there is a special character as such. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with a list comprehension:</p>
<pre><code>def findit(word, lst):
    return [el[0] for el in lst if el[1] == word][0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no specific character or value for that, but you can either create your own sentinel object or you can use <code>None</code> for this. Just make sure to use <code>is</code> to detect it within your code.</p>
<pre><code># fmod.py
Any = object()
def find(first=Any, second=Any):
  if first is Any:
   ...
</code></pre>
<p>...</p>
<pre><code>import fmod

fmod.find(None, 'text2')
fmod.find(fmod.Any, 'text2')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try <code>None</code> value.
You can read more information about it here: <a href="http://docs.python.org/3/library/constants.html" rel="nofollow">Python 3 Constrants</a></p>
</div>
<div class="post-text" itemprop="text">
<p>When you say "the second how ever I need to check and if it exists I need the first value", I'm thinking you need to check if the second value is a) there (if the list has two elements) and b) of nonzero length (assuming they'll always be strings). This leads me to:</p>
<pre><code>list_to_search = [[1,'text1'],[1,'text2'],[3,'text3'],[2,'text4'], [3], [4, '']]
firsts_with_seconds = [item[0] for item in list_to_search 
                               if len(item) &gt; 0 and len(item[1]) &gt; 0]
</code></pre>
</div>
<span class="comment-copy">Special cases aren't special enough to break the rules.</span>
<span class="comment-copy">Well I was trying to avoid making my own search but apparently that's my option.</span>
<span class="comment-copy">I give. What is <code>import fmod</code> do?</span>
<span class="comment-copy">The first code block he's calling <code>fmod.py</code> (in the comments), so it would import that.  Rolling-your-own object to compare against (<code>fmod.Any</code>) seems <i>very</i> strange.</span>
<span class="comment-copy">@NickT: Unless <code>None</code> is a valid value to search for.</span>
