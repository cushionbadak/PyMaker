<div class="post-text" itemprop="text">
<p>I have a long running processes which may have a resource leak.  How can I obtain a list of all instantiated objects (possibly only of a particular class) in my environment? </p>
</div>
<div class="post-text" itemprop="text">
<p>Try <a href="http://docs.python.org/3/library/gc.html#gc.get_objects"><code>gc.get_objects()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import gc
&gt;&gt;&gt; 
&gt;&gt;&gt; class Foo: pass
... 
&gt;&gt;&gt; f1 = Foo()
&gt;&gt;&gt; 
&gt;&gt;&gt; [o for o in gc.get_objects() if isinstance(o, Foo)]
[&lt;__main__.Foo instance at 0x2d2288&gt;]
&gt;&gt;&gt; 
&gt;&gt;&gt; f2 = Foo()
&gt;&gt;&gt; 
&gt;&gt;&gt; [o for o in gc.get_objects() if isinstance(o, Foo)]
[&lt;__main__.Foo instance at 0x2d2288&gt;, &lt;__main__.Foo instance at 0x2d22b0&gt;]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There's a few ways that you pretty much have to combine. I've used this module in the past to check for exactly that, memory leaks</p>
<p><a href="https://mg.pov.lt/objgraph/" rel="nofollow">https://mg.pov.lt/objgraph/</a></p>
<p>It can make your process use a TON more memory and be pretty slow though, depending on how you use it.</p>
</div>
<div class="post-text" itemprop="text">
<p>All instantiated objects (I'm assuming just for Python itself in a single module):</p>
<p><code>globals().keys()</code>.</p>
<p>For all of these that are instances only of a particular class:</p>
<p><code>filter(lambda x: isinstance(x, some_class), globals().keys())</code>.</p>
</div>
<span class="comment-copy">My instant (maybe snide) response, is just to put every instantiated object in a list. Since it's of a particular class, implement methods in that class for handling this list. Additionally, if you make the only reference to these objects those in the list, cleaning them up would be easy.</span>
<span class="comment-copy">Are you using CPython?</span>
<span class="comment-copy">@DylanLawrence, this is for troubleshooting a program.  The code frees up the object instances, and I want to verify that this is happening; i.e. that there's not a bug in that section of the code.  Using gc.get_objects() verifies that there are no dangling object instances causing the problem.</span>
<span class="comment-copy">Thanks, this is exactly what I was looking for.</span>
<span class="comment-copy">That is <i>just one module</i>, and wouldn't list objects that are attributes of others.</span>
<span class="comment-copy">This only lists globals in the current module, this is <b>not</b> what the OP is looking for.</span>
