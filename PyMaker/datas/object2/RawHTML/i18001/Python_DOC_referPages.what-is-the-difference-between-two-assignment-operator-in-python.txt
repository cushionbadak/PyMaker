<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15376509/when-is-i-x-different-from-i-i-x-in-python">When is “i += x” different from “i = i + x” in Python?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<pre><code>In [38]: d = set(range(3))

In [39]: d
Out[39]: set([0, 1, 2])

In [40]: for i in d:
    d  -= set([2])
   ....:     
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
/home/gridlex/workspace/HomeBackSites/nava_scripts/&lt;ipython-input-40-b79926ab34ec&gt; in &lt;module&gt;()
----&gt; 1 for i in d:
      2     d  -= set([2])
      3 

RuntimeError: Set changed size during iteration
</code></pre>
<p>what is the difference between these two assignments in python? </p>
<p>1.<strong>d -= set([2])</strong></p>
<p>2 <strong>d = d - set([2])</strong></p>
<pre><code>In [41]: d = set(range(3))

In [42]: for i in d:
    d = d - set([2])
   ....:     

In [43]: d
Out[43]: set([0, 1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With immutable types like integers, <code>a -= b</code> is the same thing as <code>a = a - b</code>: It creates a new value, <code>a - b</code>, and re-binds the name <code>a</code> to refer to that new value instead of the old one.</p>
<p>But with mutable types like sets, <code>a -= b</code> changes the value that <code>a</code> is pointing to in-place. (It also re-binds <code>a</code> to the same value it's already referring to, but that's not important.)</p>
<p>The best way to see this is by looking at the object's identity:</p>
<pre><code>&gt;&gt;&gt; s1 = set(range(3))
&gt;&gt;&gt; s2 = s1
&gt;&gt;&gt; s1, id(s1), s2, id(s2)
({0, 1, 2}, 4303749432, {0, 1, 2}, 4303749432)
&gt;&gt;&gt; s1 -= {1}
&gt;&gt;&gt; s1, id(s1), s2, id(s2)
({0, 2}, 4303749432, {0, 2}, 4303749432)
&gt;&gt;&gt; s1 = s1 - {2}
&gt;&gt;&gt; s1, id(s1), s2, id(s2)
({0}, 4303749664, {0, 2}, 4303749432)
</code></pre>
<p>Notice that the <code>-=</code> leaves <code>s1</code> still referring to the same set as <code>s2</code>, and changes that set; the <code>-</code> leaves <code>s1</code> referring to a brand-new set with a different <code>id</code>, and doesn't affect <code>s2</code>.</p>
<hr/>
<p>Under the covers, <code>a = a - b</code> is roughly* equivalent to <code>a = a.__sub__(b)</code>, while <code>a -= b</code> is equivalent to <code>a = a.__isub__(b)</code>. Except that if there is no <code>__isub__</code> method, <code>a -= b</code> just uses <code>__sub__</code> instead.</p>
<p>The fact that <code>__isub__</code> changes the value, while <code>__sub__</code> returns a new value, isn't really enforced by the language, but it's something that's true of all built-in and stdlib types, and expected to be true of any custom types. It's described in <a href="http://docs.python.org/3/reference/datamodel.html#emulating-numeric-types" rel="nofollow">Emulating numeric types</a> in the docs:</p>
<blockquote>
<p>These [<code>__ifoo__</code>] methods should attempt to do the operation in-place (modifying <em>self</em>) and return the result (which could be, but does not have to be, <em>self</em>). If a specific method is not defined, the augmented assignment falls back to the normal methods. For instance, to execute the statement <code>x += y</code>, where <em>x</em> is an instance of a class that has an <code>__iadd__()</code> method, <code>x.__iadd__(y)</code> is called. If <em>x</em> is an instance of a class that does not define a <code>__iadd__()</code> method, <code>x.__add__(y)</code> and <code>y.__radd__(x)</code> are considered, as with the evaluation of <code>x + y</code>.</p>
</blockquote>
<hr/>
<p>* It's not <em>exactly</em> equivalent because of (a) <code>__rsub__</code>, (b) types implemented in C (like <code>set</code>), and (c) rules for looking up certain special methods being different from normal methods.</p>
</div>
<span class="comment-copy">Damn you search and operators. Surely this is a duplicate.</span>
<span class="comment-copy">Was thinking the same thing.</span>
<span class="comment-copy">Searching for <code>__iadd__</code>, <code>__isub__</code>, etc. should be easier. But the first thing I found, <a href="http://stackoverflow.com/questions/11836570/how-to-implement-iadd-for-immutable-type">here</a>, is about how to implement +=, not what it does, and its accepted answer is misleading.</span>
