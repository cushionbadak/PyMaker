<div class="post-text" itemprop="text">
<p>I wrote the following code:</p>
<pre><code>initial_list = [item1, item2, item3, item4, ...]
lists = [[list1], [list2], [list3], [list4], ..., [list(n-1)], [list(n)]]
# The number of elements in the both lists might chance

while len(initial_list) &gt; 0:
    for list in lists:
        if len(initial_list) == 0:
            break
        item = initial_list.pop(0)
        list.append(item)
</code></pre>
<p>I would like to know if there is any nicer/simpler/shorter way to write the code above? If yes, please do not use difficult functions (etc.) because I am still a beginner and will not understand it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe you are trying to append items from <code>initial_list</code> to the nested list values in <code>lists</code> until all value <code>initial_list</code> are used, cycling over <code>lists</code> from the start if there are fewer nested lists than initial values to append.</p>
<p>Use <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip()</code></a> to pair up nested lists with <code>initial_list</code> items:</p>
<pre><code>from itertools import cycle

for nested, value in zip(cycle(lists), initial_list):
    nested.append(value)
</code></pre>
<p>The <a href="http://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow"><code>itertools.cycle()</code> function</a> here ensures that all values from <code>initial_list</code> are used; <code>zip()</code> stops at the <em>shortest</em> list, which will always be <code>initial_lists</code> here.</p>
<p>Demo with an initial list of 10 values (integers <code>0</code> through to <code>9</code>) and a nested list with 4 empty sublists:</p>
<pre><code>&gt;&gt;&gt; from itertools import cycle
&gt;&gt;&gt; initial_list = range(10)
&gt;&gt;&gt; lists = [[] for _ in range(4)]
&gt;&gt;&gt; for nested, value in zip(cycle(lists), initial_list):
...     nested.append(value)
... 
&gt;&gt;&gt; lists
[[0, 4, 8], [1, 5, 9], [2, 6], [3, 7]]
</code></pre>
<p>Not using cycling would require you to keep a counter and append to <code>lists[count % len(lists)]</code>. The counter can be generated with the <code>enumerate()</code> function:</p>
<pre><code>for i, value in enumerate(initial_list):
    lists[i % len(lists)].append(value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use:</p>
<pre><code>if container:
</code></pre>
<p>...instead of:</p>
<pre><code>if len(container) &gt; 0:
</code></pre>
<p>Also, list_.pop(0) is slow.  Maybe you are looking for a <a href="http://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow">http://docs.python.org/3/library/collections.html#collections.deque</a> ?  It'll allow you to rapidly remove things from either end, but you won't be able to conveniently access (EG) the middle anymore.</p>
</div>
<span class="comment-copy">Are you trying to add each item from the initial list to each nested list in the <code>lists</code> list?</span>
<span class="comment-copy">It looks like <code>initial_list</code> can have more or less elements than <code>lists</code>.</span>
<span class="comment-copy">Yes. Like that: first item from the initial list goes to the first nested list, the second one goes to the second nested list, ..., the Nth item in the initial list goes to the last (i.e. Nth) nested list, and then (N + 1)th item goes to the first nested list again etc. And it stops when there's no elements in the initial list anymore.</span>
<span class="comment-copy">Thanks! But is there any way to use the basic things (conditionals, iteration(for, while), etc) and make the code above better because your code is a bit too advanced for me.</span>
<span class="comment-copy">You asked for efficient code, this is (very) efficient code. It avoids popping the <code>initial_list</code> (shrinking a list costs you). I cannot re-cast this to something with basic things so easily. All I used is the standard library here, <code>zip()</code> is a built-in function.</span>
<span class="comment-copy">I gave you an alternative version, one that uses a counter instead.</span>
<span class="comment-copy">Ok, thanks! I will investigate your code, especially the 3rd and 4th lines because I don't understand these very well (I am a total beginner and I don't want to jump to new and more difficult before not knowing the basics well).</span>
<span class="comment-copy">Thanks for the alternative version as well!</span>
<span class="comment-copy">Thanks! That's a good point!</span>
