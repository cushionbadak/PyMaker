<div class="post-text" itemprop="text">
<p>I've created a setInterval like function in python but cntrl-c can't terminate it Heres the code</p>
<pre><code>import threading
def setInterval(sec,func,*args,**kw):
    def wrapper():
        setInterval(sec,func,*args,**kw) 
        func(*args,**kw) 
    t = threading.Timer(sec, wrapper)
    t.start()
    return t
</code></pre>
<p>And here's what I do to run it</p>
<pre><code>&gt;&gt;&gt; setInterval(3,print,"hello")
&lt;Timer(Thread-1, started 6576)&gt;
&gt;&gt;&gt; hello
KeyboardInterrupt
&gt;&gt;&gt; hello
</code></pre>
<p>It continues to run after I've hit ctrl-c. How would I add something to have it stop if I use the keyboard interupt? </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use an <a href="http://docs.python.org/3/library/threading.html#event-objects" rel="nofollow">Event</a> to stop the thread programmatically:</p>
<pre><code>import time
import threading

def setInterval(sec,func,*args,**kw):
    e = threading.Event()
    def wrapper():
        print('Started')
        while not e.wait(sec):
            func(*args,**kw)
        print('Stopped')
    t = threading.Thread(target=wrapper)
    t.start()
    return t,e

if __name__ == '__main__':
    try:
        t,e = setInterval(1,print,'hello')
        time.sleep(5)
    except KeyboardInterrupt:
        pass
    e.set()
    t.join()
    print('Exiting')
</code></pre>
<p>Output:</p>
<pre><code>Started
hello
hello
hello
hello
Stopped
Exiting
</code></pre>
<p>Hitting Ctrl-C:</p>
<pre><code>Started
hello
hello
Stopped
Exiting
</code></pre>
</div>
<span class="comment-copy">You might want to add in your original post which OS you are using (and though probably not as relevant, what version of Python)</span>
<span class="comment-copy">@Levon Windows 8.1 Python version 3.3 running it in python shell</span>
<span class="comment-copy">Signals (including KeyboardInterrupt) are always delivered to the main thread in Python, regardless of platform.  That's why your thread doesn't see it.  Can't be changed.</span>
<span class="comment-copy">If you want to kill it, full-stop, when your main thread exits, make it a daemon thread.  Otherwise if you need to do cleanup, Things Get Complicated.</span>
<span class="comment-copy">The other comments are spot-on. The meaning is that python shell is not a good envirnment for testing thread-related logic. Write a test-scrtipt and run it.</span>
