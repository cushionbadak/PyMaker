<div class="post-text" itemprop="text">
<p>I know that assignment is a statement in Python, i.e., it doesn't evaluate to a value unlike an expression. How does the following line of code work in Python, then? Please explain what happens internally in the Python interpreter (lexing, parsing, formation of abstract syntax tree).</p>
<pre><code># this works
spam = eggs = 'ham'

# this doesn't work. Throws SyntaxError
spam = (eggs = 'ham')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>why the first line above works while the second doesn't?</p>
</blockquote>
<p>It's not about operator precedence. It's a designated syntax. It cannot be "reconcilliated" by adding parenthesis.</p>
<p>Now for the full answer (as @Rob's comments already indicate) see <a href="https://stackoverflow.com/questions/7601823/how-do-chained-assignments-work">here</a> and <a href="http://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/7601823/how-do-chained-assignments-work" title="how do chained assignments work">stackoverflow.com/questions/7601823/…</a></span>
<span class="comment-copy">I want to understand why the first line above works while the second doesn't. How are they treated differently by the interpreter.</span>
<span class="comment-copy">The definitive answer is here: <a href="http://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">docs.python.org/3/reference/…</a></span>
<span class="comment-copy">@shx2 Had forgotten it. Thanks :)</span>
