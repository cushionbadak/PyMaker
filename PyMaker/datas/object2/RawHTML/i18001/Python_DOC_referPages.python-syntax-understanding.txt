<div class="post-text" itemprop="text">
<pre><code>def counting_sort(array, maxval):
    """in-place counting sort"""
    m = maxval + 1
    count = [0] * m               # init with zeros
    for a in array:
        count[a] += 1             # count occurences
    i = 0
    for a in range(m):            # emit
        for c in range(count[a]): # - emit 'count[a]' copies of 'a' #CONFUSED
            array[i] = a
            i += 1
    return array

print counting_sort( [1, 4, 7, 2, 1, 3, 2, 1, 4, 2, 3, 2, 1], 7 )
#            prints: [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 7]
</code></pre>
<p>So in the code above i dont understand the line I marked with confused, 4 lines before the last. 
Might be because I am new to python or just stupid.</p>
<ol>
<li>What happends in the first case? When the range is [ ] ? ... "for each c in the range of empty array....?</li>
<li>i dont get <code>array[i] = a</code> on the line under aswell. If a is the first element in the counting array which might be zero, how can it be added....? Really confused...</li>
</ol>
<p>Cheers!</p>
</div>
<div class="post-text" itemprop="text">
<p>You've apparently figured out that <code>count[a]</code> will be 0, and that <code>range(count[a])</code> will therefore be <code>[]</code>.</p>
<p>So, what you're asking is, what does this do:</p>
<pre><code>for i in []:
   do_stuff(i)
</code></pre>
<p>The answer is that it loops over each of the 0 elements—in other words, it doesn't loop at all. It just does nothing.*</p>
<p>This is explained in the docs for <a href="http://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow">the <code>for</code> statement</a>:</p>
<blockquote>
<p>… The suite is then executed once for each item provided by the iterator… <strong>When the items are exhausted (which is immediately when the sequence is empty…)</strong> … the loop terminates.</p>
</blockquote>
<hr/>
<p>And that implicitly explains your second bit of confusion:</p>
<blockquote>
<p>If a is the first element in the counting array which might be zero, how can it be added</p>
</blockquote>
<p>When <code>count[a]</code> is 0, you will never get into the loop, so that case cannot ever arise.</p>
<hr/>
<p>* If the <code>for</code> statement has an <code>else</code> clause, it does run the <code>else</code> clause.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p><code>range</code> will give you a list with specified start and end values. For example</p>
<pre><code>print range(5) 
</code></pre>
<p>will print</p>
<pre><code>[0, 1, 2, 3, 4]
</code></pre>
<p>When you say, <code>range(m)</code> or <code>range(count[a])</code> it will generate a list till <code>m</code> or <code>count[a]</code> starting from 0.</p></li>
<li><p>About <code>array[i] = a</code></p>
<p>In the <code>range(m)</code>, for each element, the code checks the <code>count[a]</code>. If the <code>count[a]</code> is 0, the second loop will not be executed. (<code>range(0)</code> will produce an empty list) So, for when <code>a</code> is 0  <code>array[i] = a</code> will not be executed.</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I simplified part of you code, maybe it it can help you understand the core of the algorithm well . After counting all the elements in the array, we can reconstruct  a sorted array only with the information stored in <code>count[]</code>.</p>
<pre><code>array=[]
for a in range(m): 
    array.extend([a]*count[a])
</code></pre>
</div>
