<div class="post-text" itemprop="text">
<p>I've been trying to explore how python stores signs for longs on my system.</p>
<p>Unsure that this is the way, I've tried <code>buffer(long(-10))</code> hoping it will bring me closer.</p>
<p>But I've got <code>TypeError: buffer object expected</code>.</p>
<p>From <code>help(buffer)</code>:</p>
<pre><code>class buffer(object)
 |  buffer(object [, offset[, size]])
 |
 |  Create a new buffer object which references the given object.
 |  The buffer will reference a slice of the target object from the
 |  start of the object (or at the specified offset). The slice will
 |  extend to the end of the target object (or with the specified size).
</code></pre>
<p>I thought everything is an object in python and I interpreted this docstring so that I could give just any object to the buffer's init. Doesn't seem to be the case.</p>
<p>Could you help me understand what's going on? </p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/2/library/functions.html#buffer" rel="nofollow"><code>buffer()</code> function</a> <em>only</em> works for objects that support the buffer protocol:</p>
<blockquote>
<p>The <em>object</em> argument must be an object that supports the buffer call interface (such as strings, arrays, and buffers). </p>
</blockquote>
<p>Note that the function is actually deprecated; it has been largely replaced by <a href="http://docs.python.org/2/library/functions.html#func-memoryview" rel="nofollow"><code>memoryview()</code></a>, returning a  <a href="http://docs.python.org/2/library/stdtypes.html#typememoryview" rel="nofollow"><code>memoryview</code> type</a>. This still will <em>not</em> give you insight into the internal structure of a Python long integer however, as that function only works with objects supporting the buffer protocol still.</p>
<p>The Python 3 documentation contains more information about the buffer protocol in the <a href="http://docs.python.org/3/c-api/buffer.html#bufferobjects" rel="nofollow">C API documentation</a>:</p>
<blockquote>
<p>Certain objects available in Python wrap access to an underlying memory array or buffer.</p>
<p>[...]</p>
<p>While each of these types have their own semantics, they share the common characteristic of being backed by a possibly large memory buffer. It is then desirable, in some situations, to access that buffer directly and without intermediate copying.</p>
</blockquote>
<p>So these functions are meant to make access to larger chunks of data efficient, not to give you insight into underlying C structures.</p>
</div>
<span class="comment-copy">"I've been trying to explore how python stores signs for longs on my system." Then just download the sources and read <code>Include/longintrepr.h</code>. Quote: <code>Negative numbers are represented with ob_size &lt; 0; zero is represented by ob_size == 0.</code> To understand what <code>ob_size</code> is you should read about the <code>PyObject_VAR_HEAD</code> macro of the Python C/API.</span>
