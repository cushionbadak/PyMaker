<div class="post-text" itemprop="text">
<pre><code>1/2
</code></pre>
<p>gives</p>
<pre><code>0
</code></pre>
<p>as it should. However,</p>
<pre><code>-1/2
</code></pre>
<p>gives</p>
<pre><code>-1
</code></pre>
<p>, but I want it to round towards 0 (i.e. I want -1/2 to be 0), regardless of whether it's positive or negative. What is the best way to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>Do floating point division then convert to an int. No extra modules needed.</p>
<pre><code>&gt;&gt;&gt; int(float(-1)/2)
0
&gt;&gt;&gt; int(float(-3)/2)
-1
&gt;&gt;&gt; int(float(1)/2)
0
&gt;&gt;&gt; int(float(3)/2)
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python's default division of integers is return the floor (towards negative infinity) with no ability to change that. You can <a href="http://python-history.blogspot.com/2010/08/why-pythons-integer-division-floors.html" rel="nofollow noreferrer">read</a> the BDFL's reason why.</p>
<p>To do 'round up' division, you would use:</p>
<pre><code>&gt;&gt;&gt; a=1
&gt;&gt;&gt; b=2
&gt;&gt;&gt; (a+(-a%b))//b
1
&gt;&gt;&gt; a,b=-1,2
&gt;&gt;&gt; (a+(-a%b))//b
0
</code></pre>
<p>To do truncation towards zero, and maintain integer division, you use <code>(a+(-a%b))//b</code> if either a or b are negative and the default division if both are positive.</p>
<p>This will do integer division and always round towards zero:</p>
<pre><code>&gt;&gt;&gt; a=1
&gt;&gt;&gt; b=2
&gt;&gt;&gt; a//b if a*b&gt;0 else (a+(-a%b))//b
0
&gt;&gt;&gt; a=-1
&gt;&gt;&gt; b=2
&gt;&gt;&gt; a//b if a*b&gt;0 else (a+(-a%b))//b
0
&gt;&gt;&gt; a,b=-3,2
&gt;&gt;&gt; a//b if a*b&gt;0 else (a+(-a%b))//b
-1
&gt;&gt;&gt; a,b=3,2
&gt;&gt;&gt; a//b if a*b&gt;0 else (a+(-a%b))//b
1
</code></pre>
<hr/>
<h3>footnote</h3>
<p>Interestingly enough, C99 declares that <a href="https://stackoverflow.com/a/3602857/298607">round towards zero</a> is the default:</p>
<pre><code>#include &lt;stdio.h&gt;
int main(int argc, const char * argv[])
{

    int a=-3;
    int b=2;
    printf("a=%d, b=%d, a/b=%d\n",a,b,a/b);
    a=3;
    printf("a=%d, b=%d, a/b=%d\n",a,b,a/b);
    return 0;
}
</code></pre>
<p>Prints:</p>
<pre><code>a=-3, b=2, a/b=-1
a=3, b=2, a/b=1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For what it's worth, my own favourite solution is this one.  Integer arithmetic only, a single division, and everything else linear time:</p>
<pre><code>def integer_divide_towards_zero(a, b):
    return -(-a // b) if a &lt; 0 else a // b
</code></pre>
<p>That assumes that <code>b</code> is positive, but in most of the applications I've seen that's true.  If you need to deal with negative <code>b</code> too, then the function becomes marginally more complicated:</p>
<pre><code>def integer_divide_towards_zero(a, b):
    return -(-a // b) if (a &lt; 0) ^ (b &lt; 0) else a // b
</code></pre>
<p>Some sample outputs:</p>
<pre><code>&gt;&gt;&gt; integer_divide_towards_zero(11, 3)
3
&gt;&gt;&gt; integer_divide_towards_zero(-11, 3)
-3
&gt;&gt;&gt; integer_divide_towards_zero(6, 3)
2
&gt;&gt;&gt; integer_divide_towards_zero(-6, 3)
-2
&gt;&gt;&gt; integer_divide_towards_zero(11, -3)
-3
&gt;&gt;&gt; integer_divide_towards_zero(-11, -3)
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this.  Only works for numbers greater than -1</p>
<pre><code>import math

x = .5
y = -.5

print math.floor(math.fabs(x))
&gt;&gt; 0

print math.floor(math.fabs(y))
&gt;&gt; 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Correct code to do this is, in my opinion, too obscure to write as a 1-liner.  So I'd put it in a function, like:</p>
<pre><code>def int0div(a, b):
    q = a // b
    if q &lt; 0 and b*q != a:
        q += 1
    return q
</code></pre>
<p>Good features:  it works for any size of int, doesn't make any adjustment to the raw (<code>a//b</code>) result unless necessary, only does one division (<code>%</code> also does a division under the covers), and doesn't create any integers larger than the inputs.  Those may or may not matter in your application; they become more important (for speed) if you use "big" integers.</p>
</div>
<div class="post-text" itemprop="text">
<p>Throwing my hat in with a few alternate ideas:</p>
<p>Multiple the sign of the number [abs(x)/x] by the abs(x)/2</p>
<pre><code>(abs(x)/x)*(abs(x)/2)
</code></pre>
<p>Perform the addition, but if the number is less than zero add one to shift it closer to 0.</p>
<pre><code>x/2 + int(x&lt;0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">Decimal</a> module as part of the standard python libraries.</p>
<p>Specifically, 
" The integer division operator // behaves analogously, returning the integer part of the true quotient (truncating towards zero) rather than its floor, so as to preserve the usual identity x == (x // y) * y + x % y:"</p>
<pre><code>&gt;&gt;&gt; -7 // 4
-2
&gt;&gt;&gt; Decimal(-7) // Decimal(4)
Decimal('-1')
</code></pre>
<p>Also, have a look at <a href="https://docs.python.org/3/library/decimal.html#rounding-modes" rel="nofollow noreferrer">Rounding Modes</a> as they've got quite a few ways to view/round your information - Ceiling, down, floor, half-down, half-even, half-up, up and 05up rounding. </p>
<p>Decimal was written as a solution to the traditional problem of binary mathematics in a world expecting decimals solutions</p>
</div>
<span class="comment-copy"><code>int(1./2)</code> should work.</span>
<span class="comment-copy">This should work the same in both 2 and 3, without importing anything from <code>__future__</code>, right?</span>
<span class="comment-copy">Yep, this behaviour should be consistent between 2 and 3.</span>
<span class="comment-copy">Note: using <code>float</code> is meaningful only in Python 2. It serves no utility in Python 3.</span>
<span class="comment-copy">Err.. what happened to the readable <code>math</code> module?</span>
<span class="comment-copy">This doesn't give the correct answer. -1.5 should give -1, but this gives +1.</span>
<span class="comment-copy">You're right.  updated.</span>
<span class="comment-copy">It hurts readability a fair bit, but it is interesing to note that you can leave out the call to <code>int</code> here - <code>x/2 + x&lt;0</code> works just fine (since <code>bool</code> subclasses <code>int</code> and doesn't redefine how arithmetic operations work).</span>
<span class="comment-copy">@lvc I've had issues in the past with <code>int + bool</code> becoming a <code>bool</code> since you can cast an int to bool and vice versa. I just thought it better to be more explicit.</span>
