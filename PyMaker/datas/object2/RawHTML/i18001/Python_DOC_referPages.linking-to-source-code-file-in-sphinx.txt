<div class="post-text" itemprop="text">
<p>I am documenting a python module in Sphinx. I have a source code file full of examples of the use of my module. I'd like to reference this file. It is too long to inline as continuous code. Is there a way to create a link to the full source file, formatted in a code-friendly way (ie literal or with line numbers)?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 does this.  For example, <a href="http://docs.python.org/3/library/argparse.html#module-argparse" rel="nofollow noreferrer">the argparse docs</a> link to the source code (near the top of the page, where it says "Source code").  You can see how they do it by looking at the <a href="http://docs.python.org/3/_sources/library/argparse.txt" rel="nofollow noreferrer">source for the docs</a> (linked from the first link, down at the bottom of the left had column).</p>
<p>I assume they're using standard Sphinx, but I am having a hard time finding <code>:source:</code> in their docs...</p>
<p><strong>Update</strong>: the <code>:source:</code> role is  defined <a href="https://hg.python.org/cpython/file/tip/Doc/tools/extensions/pyspecific.py#l89" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I get the question right, you want a link from your documentation to the original source file. You can do this by adding the <code>sphinx.ext.viewcode</code> extension to your conf file (under extensions entry). This will create a "source" link for every header of a class, method, function, etc. Clicking the link will open the original file highlighting the clicked item. More explanation <a href="http://www.sphinx-doc.org/en/master/usage/extensions/viewcode.html" rel="nofollow noreferrer">here</a></p>
</div>
<div class="post-text" itemprop="text">
<h1>literalinclude</h1>
<pre><code>.. literalinclude:: filename
</code></pre>
<p>From the <a href="http://web.archive.org/web/20170111135721/http://www.sphinx-doc.org/en/1.5.1/markup/code.html#includes" rel="nofollow noreferrer">Sphinx (v1.5.1) documentation</a>:</p>
<blockquote>
<p>Longer displays of verbatim text may be included by storing the example text in an external file containing only plain text. The file may be included using the literalinclude directive.</p>
</blockquote>
<p>For example, to include the Python source file <code>example.py</code>, use:</p>
<pre><code>.. literalinclude:: example.py
</code></pre>
<blockquote>
<p>The file name is usually relative to the current file’s path. However, if it is absolute (starting with /), it is relative to the top source directory.</p>
<p>Tabs in the input are expanded if you give a tab-width option with the desired tab width.</p>
<p>Like code-block, the directive supports the linenos flag option to switch on line numbers, the lineno-start option to select the first line number, the emphasize-lines option to emphasize particular lines, and a language option to select a language different from the current file’s standard language. Example with options:</p>
</blockquote>
<pre><code>.. literalinclude:: example.rb
   :language: ruby
   :emphasize-lines: 12,15-18
   :linenos:
</code></pre>
<blockquote>
<p>Include files are assumed to be encoded in the source_encoding. If the file has a different encoding, you can specify it with the encoding option:</p>
</blockquote>
<pre><code>.. literalinclude:: example.py
   :encoding: latin-1
</code></pre>
<blockquote>
<p>The directive also supports including only parts of the file. If it is a Python module, you can select a class, function or method to include using the pyobject option:</p>
</blockquote>
<pre><code>.. literalinclude:: example.py
   :pyobject: Timer.start
</code></pre>
<blockquote>
<p>This would only include the code lines belonging to the start() method in the Timer class within the file.</p>
<p>Alternately, you can specify exactly which lines to include by giving a lines option:</p>
</blockquote>
<pre><code>.. literalinclude:: example.py
   :lines: 1,3,5-10,20-
</code></pre>
<blockquote>
<p>This includes the lines 1, 3, 5 to 10 and lines 20 to the last line.</p>
<p>Another way to control which part of the file is included is to use the start-after and end-before options (or only one of them). If start-after is given as a string option, only lines that follow the first line containing that string are included. If end-before is given as a string option, only lines that precede the first lines containing that string are included.</p>
<p>When specifying particular parts of a file to display, it can be useful to display exactly which lines are being presented. This can be done using the lineno-match option.</p>
<p>You can prepend and/or append a line to the included code, using the prepend and append option, respectively. This is useful e.g. for highlighting PHP code that doesn’t include the  markers.</p>
<p>If you want to show the diff of the code, you can specify the old file by giving a diff option:</p>
</blockquote>
<pre><code>.. literalinclude:: example.py
   :diff: example.py.orig
</code></pre>
<blockquote>
<p>This shows the diff between example.py and example.py.orig with unified diff format.</p>
</blockquote>
</div>
<span class="comment-copy">Read it as a file.. But i'm not sure why you want that, why don't you just provide running examples?</span>
<span class="comment-copy">I have pulled out running examples, but some users like having a single compilable file to read. In a sense all I want to do is 'read it as a file' but if that file is buried deep in the filesystem (as site-packages often is, particularly on an Enthought distribution with virtual .</span>
<span class="comment-copy">... environments it is perceived as a usability hit. So I'd like a link to the file.</span>
<span class="comment-copy">I had the same doubt but found something in Sphinx documentation. It is supported by standard Sphinx and actually has many more features then I was looking for, such as <code>diff</code>. Added as answer <a href="http://stackoverflow.com/a/41592881/5496529">here</a>.</span>
<span class="comment-copy">please check out this answer <a href="https://stackoverflow.com/a/21650878/246235">stackoverflow.com/a/21650878/246235</a> as that is the prevailed method</span>
