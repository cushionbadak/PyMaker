<div class="post-text" itemprop="text">
<p>I have a function with many arguments and a detailed help message, e.g.:</p>
<pre><code>def worker_function(arg1, arg2, arg3):
    """ desired help message:
    arg1 - blah
    arg2 - foo
    arg3 - bar
    """
    print arg1, arg2, arg3
</code></pre>
<p>I also have a wrapper function which does some accounting and then calls my worker_function, passing all arguments to it <em>as is</em>.</p>
<pre><code>def wrapper_function(**args):
    """ this function calls worker_function """
    ### do something here ...
    worker_function(**args)
</code></pre>
<p>I want the help message (displayed by python built-in help() function) for wrapper function to have argument list <em>and</em> help message from worker function.</p>
<p>The closest solution I could get is to do:</p>
<pre><code>wrapper_function.__doc__ += "\n\n" + worker_function.__doc__
</code></pre>
<p>This results in:</p>
<pre><code>&gt;&gt;? help(wrapper_function)
Help on function wrapper_function in module __main__:

wrapper_function(**args)
    this function calls worker function

    desired help message:
       arg1 - blah
       arg2 - foo
       arg3 - bar
</code></pre>
<p>But this description is missing the essential part - the argument list, that is:</p>
<pre><code>worker_function(arg1, arg2, arg3)
</code></pre>
<p>(In real-life function the argument list is long, with telling default values, and I would like that to be displayed automatically).</p>
<p>Is there a way to add an argument list or worker_function to the help message of wrapper_function?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>help()</code> internally looks up the function data using the <code>inspect</code> module. Unless you overwrite the function meta data by default (if that’s even possible) I don’t think you can get rid of the wrapper function’s definition.</p>
<p>What you can do however is fill the wrapper function’s help text with information from the wrapped function. You can either use the <a href="http://docs.python.org/3/library/inspect.html" rel="noreferrer"><code>inspect</code></a> module yourself (especially the <a href="http://docs.python.org/3/library/inspect.html#inspect.getfullargspec" rel="noreferrer"><code>getfullargspec</code></a> method), or you can just use the <a href="http://docs.python.org/3/library/pydoc.html" rel="noreferrer"><code>pydoc</code></a> module (which is what <code>help</code> internally uses) to generate it for you.</p>
<pre><code>import pydoc
def wrappedHelpText (wrappedFunc):
    def decorator (f):
         f.__doc__ = 'This method wraps the following method:\n\n' + pydoc.text.document(wrappedFunc)
         return f
    return decorator

@wrappedHelpText(worker_function)
def wrapper_function(**args):
    worker_function(**args)
</code></pre>
<p>Calling <code>help</code> on that will then generate a more useful output including the original signature.</p>
<pre><code>&gt;&gt;&gt; help(wrapper_function)
Help on function wrapper_function in module __main__:

wrapper_function(**args)
    This method wraps the following method:

    worker_function(arg1, arg2, arg3)
        desired help message:
        arg1 - blah
        arg2 - foo
        arg3 - bar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To preserve argspec you can use <a href="https://pypi.python.org/pypi/decorator" rel="nofollow">decorator</a> module. Or mimic <a href="https://code.google.com/p/micheles/source/browse/decorator/src/decorator.py" rel="nofollow">its implementation</a>.</p>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/147816/preserving-signatures-of-decorated-functions">Preserving signatures of decorated functions</a>.</span>
<span class="comment-copy">Nice! pydoc.text.document() is exactly what I've been missing. Thanks.</span>
