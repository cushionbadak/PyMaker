<div class="post-text" itemprop="text">
<p>I have the following function:</p>
<pre><code>def InRange(number):
    return 5 &lt;= number &gt;= 1
</code></pre>
<p>I want this to say false if the number is not within the range of 1 to 5 using a chain comparison, but cannot seem to get this right.</p>
<p>Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>You want it like this:</p>
<pre><code>def InRange(number):
    return 1 &lt;= number &lt;= 5
</code></pre>
<p>Note that you could also do:</p>
<pre><code>def InRange(number):
    return 0 &lt; number &lt; 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use this:</p>
<pre><code>1 &lt;= number &lt;= 5
</code></pre>
<p>From <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p><code>x &lt; y &lt;= z</code> is equivalent to <code>x &lt; y</code> and <code>y &lt;= z</code>, except that <code>y</code> is
  evaluated only once (but in both cases <code>z</code> is not evaluated at all when
  <code>x &lt; y</code> is found to be false).</p>
</blockquote>
<p>Your (incorrect)expression is actually equivalent to:</p>
<pre><code>number &gt;=5 and number &gt;= 1
</code></pre>
<p>So, it is going to be <code>True</code> for any number between 1 to infinity:</p>
</div>
<div class="post-text" itemprop="text">
<p>Alternatively you can do (it seemed appropriate based on the function's name):</p>
<pre><code>def InRange(number):
    return number in range(1, 6)
</code></pre>
<p>For large numbers you should use:</p>
<pre><code>def InRange(number):
    return number in xrange(1, 10000000)
</code></pre>
</div>
<span class="comment-copy">I think you mean it is going to be <code>True</code> for any number from <b>5</b> to infinity...</span>
<span class="comment-copy">But don't use this for large ranges.</span>
<span class="comment-copy">@hcwhsa fair point, updated answer to include <code>xrange</code>.</span>
<span class="comment-copy">But note that something like <code>10**6 in xrange(1, 10000000)</code> takes around 40ms while <code>1 &lt;= 10**6 &lt;10000000</code> takes just 240ns. So, I'd always prefer mathematical comparison operators.</span>
<span class="comment-copy">Much more improved membership tests in Py3.x though, <code>10**6 in range(1, 10000000)</code> took just <code>1.41us</code>.</span>
