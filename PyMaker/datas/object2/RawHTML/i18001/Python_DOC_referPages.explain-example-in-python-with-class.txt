<div class="post-text" itemprop="text">
<p>Can anyone explain me the following example?
How does this gets all the elements from the for loop and not only the last one?</p>
<pre><code>class Deck:
    def __init__(self):
        self.cards = [Card(SUITS[i], RANKS[j]) 
                      for i in range (0, len(SUITS)) 
                      for j in range (0, len(RANKS))]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have a list comprehension with nested loops. It can be translated to:</p>
<pre><code>self.cards = []
for i in range(0, len(SUITS)):
    for j in range(0, len(RANKS)):
        self.cards.append(Card(SUITS[i], RANKS[j]))
</code></pre>
<p>It could be simplified further though, by looping over <code>SUITS</code> and <code>RANKS</code> directly:</p>
<pre><code>self.cards = [Card(suit, rank) for suit in SUITS for rank in RANKS]
</code></pre>
<p>or you can use <a href="http://docs.python.org/2/library/itertools.html#itertools.product" rel="nofollow"><code>itertools.product()</code></a> to replace the nested loops:</p>
<pre><code>from itertools import product

self.cards = [Card(suit, rank) for suit, rank in product(SUITS, RANKS)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is a little confusing but it translates to this pseudocode:</p>
<pre><code>self.cards = [];
for i in range (0, len(SUITS))
   for j in range (0, len(RANKS))
        self.cards.append(Card(SUITS[i], RANKS[j]));
</code></pre>
<p>Basically a loop within a loop.</p>
<p>It is much easier to read in my example.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a <a href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" rel="nofollow">list comprehension</a>. It's basically a couple nested for loops:</p>
<pre><code>class Deck:
    def __init__(self):
        self.cards = []
        for i in range(0, len(SUITS):
            for j in range(0, len(RANKS):
                self.cards.append(Card(SUITS[i], RANKS[j]))
</code></pre>
</div>
<span class="comment-copy">It's worth noting that this is a really terrible way to do this - looping by index is slow, inefficient, and hard to read. What you really want is <code>[Card(suit, rank) for suit, rank in itertools.product(SUITS, RANKS)]</code>.</span>
<span class="comment-copy">a crappy python way of looping</span>
<span class="comment-copy">The more pythonic version would be <code>[ Card(suit, rank) for suit in SUITS for rank in RANKS]</code>.</span>
<span class="comment-copy">Hmmmm Did I get the loop backwards? Or does it not matter?</span>
<span class="comment-copy">@qwertynl: It matters; list comprehension loops are executed as if nested from left to right. The order of the cards in your version will differ.</span>
<span class="comment-copy">Ok. Updating my answer then. Thank you!</span>
<span class="comment-copy">I would recommend using <a href="http://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product()</code></a> over nested loops. (<code>[Card(suit, rank) for suit, rank in itertools.product(SUITS, RANKS)]</code>). It's both more efficient and readable.</span>
<span class="comment-copy">@Lattyware: This is from a learning Python book (Dive into Python, IIRC), so <code>itertools.product()</code> is perhaps getting a little advanced, but I added it anyway.</span>
