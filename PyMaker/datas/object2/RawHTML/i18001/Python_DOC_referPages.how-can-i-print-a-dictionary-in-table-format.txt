<div class="post-text" itemprop="text">
<p>Let's say I have a dictionary like:</p>
<pre><code>my_dict = {1:[1,2,3],4:[5,6,7],8:[9,10,11]}
</code></pre>
<p>I want to be able to print it so it looks like:</p>
<pre><code>1 4 8
1 5 9
2 6 10
3 7 11
</code></pre>
<p>I'm actually working with much larger dictionaries and it would be nice if I can see how they look since they're so hard to read when I just say <code>print(my_dict)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>zip()</code> to create columns:</p>
<pre><code>for row in zip(*([key] + value for key, value in sorted(my_dict.items()))):
    print(*row)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; my_dict = {1:[1,2,3],4:[5,6,7],8:[9,10,11]}
&gt;&gt;&gt; for row in zip(*([key] + value for key, value in sorted(my_dict.items()))):
...     print(*row)
... 
1 4 8
1 5 9
2 6 10
3 7 11
</code></pre>
<p>This <em>does</em> assume that the value lists are all of equal length; if not the shortest row will determine the maximum number of rows printed. Use <a href="http://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="noreferrer"><code>itertools.zip_longest()</code></a> to print more:</p>
<pre><code>from itertools import zip_longest
for row in zip_longest(*([key] + value for key, value in sorted(my_dict.items())), fillvalue=' '):
    print(*row)
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; my_dict = {1:[1,2,3],4:[5,6,7,8],8:[9,10,11,38,99]}
&gt;&gt;&gt; for row in zip_longest(*([key] + value for key, value in sorted(my_dict.items())), fillvalue=' '):
...     print(*row)
... 
1 4 8
1 5 9
2 6 10
3 7 11
  8 38
    99
</code></pre>
<p>You may want to use <code>sep='\t'</code> to align the columns along tab stops.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; my_dict = {1:[1,2,3],4:[5,6,7],8:[9,10,11]}
&gt;&gt;&gt; keys = my_dict.keys()
&gt;&gt;&gt; print(*iter(keys), sep='\t')
8   1   4
&gt;&gt;&gt; for v in zip(*(my_dict[k] for k in keys)): print(*v, sep='\t')
... 
9   1   5
10  2   6
11  3   7
</code></pre>
</div>
<span class="comment-copy">Why not use the <code>pprint</code> module to pretty print?</span>
<span class="comment-copy">I want the keys as the headers and when the dictionary gets really long I would really like to view it as a table..</span>
<span class="comment-copy">If I'm not mistaken this doesn't work in python 2.7? Doesn't seem to like either of *row or zip_longest.</span>
<span class="comment-copy">@fantabolous: <code>zip_longest</code> is called <code>izip_longest</code> in Python 2. <code>print(*row)</code> won't work in 2 unless you use <code>from __future__ import print_function</code> in your module, or use <code>print ' '.join(row)</code>.</span>
<span class="comment-copy">Thanks Martijn for the python 2 conversion. I don't think I actually mentioned *zip anywhere either ;)</span>
<span class="comment-copy">@fantabolous: erm, seems I misread your comment, indeed. Removed that from my comment.</span>
