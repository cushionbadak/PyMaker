<div class="post-text" itemprop="text">
<p>I've been trying to code a bit of a "game" to help others learn python, but I've run into a wall right after I jumped out of the brainstorming phase.
See, it involves making a script open another script, and then insert input to it. For example:</p>
<pre><code>username = raw_input('Insert username:')
password = raw_input('Insert password:')
if username == user:
  if password == 1234:
    print('Congratulations, you cracked it!')
</code></pre>
<p>This would be my source code. Then I'd have another code, in which I'd write something to open the former script, insert "user" as if I'd typed it myself in the command prompt, and then tried to insert every number between 0 and, say, 10000. So something like:</p>
<pre><code>for n in range(0, 10000)
  [Insert script to open file]
  [input 'user']
  [input n]
</code></pre>
<p>How would I go on about to code the last part?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow"><code>subprocess</code></a> module lets you run another program—including a script—and control its input and output. For example:</p>
<pre><code>import subprocess, sys
p = subprocess.Popen([sys.executable, 'thescript.py'], stdin=subprocess.PIPE)
p.stdin.write('user\n')
p.stdin.write('{}\n'.format(n))
p.wait()
</code></pre>
<p>If you can build all the input at once and pass it as a single string, you can use <code>communicate</code>.</p>
<p>If you also want to capture its output, add another <code>PIPE</code> for <code>stdout</code>.</p>
<pre><code>import subprocess
p = subprocess.Popen(['python', 'thescript.py'], 
                     stdin=subprocess.PIPE, stdout=subprocess.PIPE)
out, err = p.communicate('user\n{}\n'.format(n))
</code></pre>
<p>For details on how this works, read the documentation; it's all explained pretty well. (However, it's not <em>organized</em> perfectly; you might want to read the opening section, then skip down to "Replacing Older Functions", then read the "Frequently Used Arguments", then come back to the top and go through in order.)</p>
<p>If you need to interact with it in any way more complicated than "send all my input, then get all the output", that gets very hard to do correctly, so you should take a look at the third-party <a href="http://pexpect.readthedocs.org/en/latest/" rel="nofollow"><code>pexpect</code></a> module.</p>
</div>
<div class="post-text" itemprop="text">
<p>Would this be what you wanted?</p>
<pre><code>import subprocess

for n in range(0, 10000):
        p = subprocess.Popen("python another_script.py", shell=True,
                    stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        p.stdin.write("user\n" + str(n) + "\n")
        out = p.stdout.read()
        if "cracked" in out:
                print "cracked: " + str(n)
                break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Okay, I did it. Thanks for the help guys, but I settled with using modules.
I made my own small module like this:</p>
<p>Filename: pass1</p>
<pre><code>def insertpassword(username, password):
  if username == 'user':
    if password == '12345':
      print('You did it!')
</code></pre>
<p>Then what I do is:</p>
<pre><code>import pass1
pass1.insertpassword(raw_input('Insert username:'),raw_input('Insert password:'))
</code></pre>
<p>As for the cracking:</p>
<pre><code>import pass1
for n in range(0, 100000):
  pass1.insertpassword('user', str(n))
</code></pre>
<p>Thanks anyway, everyone.</p>
</div>
<span class="comment-copy">You have the pseudocode. just convert it to python line by line. It is as simple as that. Hint: <code>file_handler = open(file, "w+")</code> then <code>file_handler.write(something)</code></span>
<span class="comment-copy">@karthikr: He's trying to run a script and feed it input, not create a file and write to it. I know this is confusing from the title, but read the second paragraph.</span>
<span class="comment-copy">ah.. i see.thanks</span>
<span class="comment-copy">Meanwhile, are you sure you need to do this? If you can modify the first script, you can turn it into a module for the second one to <code>import</code>, or you can change it to take command-line arguments instead of trying to input from a user, either of which will make your life easier.</span>
<span class="comment-copy">By arguments he likely meant to modify the called input script to accept command line arguments instead of reading from interactive user input. To read the values from sys.argv instead of raw_input().</span>
<span class="comment-copy">Leaking the <code>Popen</code> object isn't a good idea; you should always <code>wait</code> on it. (Or do something equivalent, like using <code>communicate</code>, which will do the <code>write</code>, <code>read</code>, and <code>wait</code> all in one.)</span>
