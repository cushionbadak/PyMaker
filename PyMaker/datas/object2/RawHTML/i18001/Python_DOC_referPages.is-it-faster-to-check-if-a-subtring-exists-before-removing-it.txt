<div class="post-text" itemprop="text">
<p>Is a faster to check if a subtring (in my case a whitespace) exists in a string before removing it, or to use <code>relace()</code> globally, as a matter of speaking;</p>
<p>Use case:</p>
<pre><code>a = ['452 04','45204','455 04','88804']
for i,e in enumerate(a):
    if re.search(r"\s", e):
       a[i] = e.replace(' ','')
</code></pre>
<p>Any other suggestions are welcome, too. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re

def with_re_search():
    a = ['452 04','45204','455 04','88804']
    for i,e in enumerate(a):
        if re.search(r"\s", e):
            a[i] = e.replace(' ','')

def with_in():
    a = ['452 04','45204','455 04','88804']
    for i,e in enumerate(a):
        if ' ' in e:
            a[i] = e.replace(' ','')

def without_search():
    a = ['452 04','45204','455 04','88804']
    for i,e in enumerate(a):
        a[i] = e.replace(' ','')

def with_translate():
    a = ['452 04','45204','455 04','88804']
    for i, e in enumerate(a):
        a[i] = e.translate(None,'')

from timeit import timeit as t
n = 1000000
t('f()', setup='from __main__ import with_re_search as f', number=n) # 5.37417006493
t('f()', setup='from __main__ import with_in as f',        number=n) # 1.04646992683
t('f()', setup='from __main__ import without_search as f', number=n) # 1.2475438118
t('f()', setup='from __main__ import with_translate as f', number=n) # 1.56214690208
</code></pre>
<p>Using <code>re.search</code> was absolutely slower than other options.</p>
<p>This was done in CPython 2.7.3, Ubuntu Linux 12.10 64bit.</p>
<p><strong>UPDATE</strong>: In CPython 3.3.0 (the same machine).</p>
<pre><code>t('f()', setup='from __main__ import with_re_search as f', number=n) # 24.345079875027295
t('f()', setup='from __main__ import with_in as f',        number=n) # 1.1399168980424292
t('f()', setup='from __main__ import without_search as f', number=n) # 1.3967725560069084   
</code></pre>
<p><em>NOTE</em> couldn't time <code>str.translate</code>, because <a href="http://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow"><code>str.translate</code></a> in Python 3 does not accept <code>deletechars</code> parameter.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are talking about removing only the spaces, you can use <code>translate</code>.</p>
<pre><code>a = ['452 04','45204','455 04','88804']
a = [item.translate(None, " ") for item in a]
print a
</code></pre>
</div>
<span class="comment-copy">Did you measure?</span>
<span class="comment-copy">I did not. I thought someone might be able to answer out of experience?</span>
<span class="comment-copy">my experience is 1) the simple program is the better program 2) if you want to <i>know</i> if your program would be faster under different conditions the only way is to time your specific code</span>
<span class="comment-copy">@Vorsprung, Thanks for sharing.</span>
<span class="comment-copy">@falsetru Sorry. Fixed that.</span>
