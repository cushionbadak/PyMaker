<div class="post-text" itemprop="text">
<p>Hi I'm doing some code for a genomics class and I am having difficulty on a certain part.</p>
<p>I have a set of mutually exclusive events <img alt="event1, event2, ... eventn" src="https://i.stack.imgur.com/XwGIZ.png"/>
with probabilities <img alt="p1, p2, ... pn" src="https://i.stack.imgur.com/EufG2.png"/></p>
<p>I want to simulate randomly sampling an event n times with the given probability.</p>
<p>input: probabilities = {0.3, 0.2, 0.5} events{e1,e2,e3} n=100</p>
<p>output: there should be ~50 results for e3, ~20 for e2 and ~30 for e1.
Note that these are probably not exactly 50, 20, 30 because 
empirical values are different from theoretical values...</p>
</div>
<div class="post-text" itemprop="text">
<p>Python doesn't have any weighted sampling functionality built in (NumPy/SciPy does), but for a really simple case like this, it's pretty easy:</p>
<pre><code>import itertools
import random

probabilities = [0.3, 0.2, 0.5]
totals = list(itertools.accumulate(probabilities))

def sample():
    n = random.uniform(0, totals[-1])
    for i, total in enumerate(totals):
        if n &lt;= total:
            return i
</code></pre>
<hr/>
<p>If you don't have Python 3.2+, you don't have the <code>accumulate</code> function; you can fake it with an inefficient one-liner if the list really is this short:</p>
<pre><code>totals = [sum(probabilities[:i+1]) for i in range(len(probabilities))]
</code></pre>
<p>â€¦ or you can write an explicit loop, or an ugly <code>reduce</code> call, or copy the equivalent Python function from <a href="http://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow">the docs</a>.</p>
<hr/>
<p>Also, note that <code>random.uniform(0, totals[-1])</code> is just a more complicated way of writing <code>random.random()</code> if you can be sure that your numbers add up to 1.0.</p>
<hr/>
<p>A quick way to test this:</p>
<pre><code>&gt;&gt;&gt; samples = [sample() for _ in range(100000)]
&gt;&gt;&gt; samples.count(0)
29878
&gt;&gt;&gt; samples.count(1)
19908
&gt;&gt;&gt; samples.count(2)
50214
</code></pre>
<p>Those are pretty close to 30%, 20%, and 50% of 100000, respectively.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's assume that we have three events, each with probabilities .3, .2 and .5, respectively.  Then for each sample generated, we generate a number in the range [0,1), let's call this "rand."  If "rand" &lt; .3, we generate event 1, if .3 &lt;= "rand" &lt; .5, we generate even 2, otherwise we generate event 3.  This can be accomplished using <a href="http://docs.python.org/2/library/random.html" rel="nofollow">random()</a>, which indeed generates a number in the range [0,1).</p>
</div>
<span class="comment-copy">If the <code>probabilities</code> and <code>events</code> inputs are really both sets, as you're showing, there is no way to match up a probability to an event.</span>
<span class="comment-copy">Are you just trying to generate <code>n</code> random numbers?</span>
<span class="comment-copy">See Eli Bendersky's page on <a href="http://eli.thegreenplace.net/2010/01/22/weighted-random-generation-in-python/" rel="nofollow noreferrer">weighted random sampling</a> for a discussion of many ways to achieve this.</span>
<span class="comment-copy">Also see <a href="http://bugs.python.org/issue18844" rel="nofollow noreferrer">Python issue 18844</a>, where a couple of weighted choice implementations are tested against each other (in anticipation of adding one of them to the <code>random</code> module).</span>
<span class="comment-copy">I tried this, but it always gives the index of the last term. Why is that?</span>
<span class="comment-copy">@user2812970: I just copied and pasted this into my interpreter (and added the missing <code>import random</code>) and ran it 100K times  to test it, and it only gives the address of the last term about half the time, exactly as it should. I've edited the answer to show the test. If it's really always giving you <code>2</code>, either you've pasted it wrong, or you've done something wrong in some other part of your code, or you should go to Vegas immediately and take advantage of your mutant probability-influencing powers. :)</span>
