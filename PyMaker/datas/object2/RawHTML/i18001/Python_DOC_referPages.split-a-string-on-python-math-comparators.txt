<div class="post-text" itemprop="text">
<p>So guys here I am asking trivial questions.
I have this string filterE, I want to break filterE on valid mathematical comparators only.</p>
<pre><code>filterE = "x.y.prop1 ==== 1 and x.y.prop2 &gt;= 2 and x.y.prop1 &lt; 3 or x.y.prop4 &gt; 9"
</code></pre>
<p>I thought of using something like <code>re.split(r'(=(?=)|&lt;|&lt;(?=)|&gt;|&gt;(?=)|!(?=))', filterE)</code> but it did not help at all.
Here is my code snippet</p>
<pre><code>import re
pfe = re.split(r'(==|&lt;|&lt;=|&gt;|&gt;=|!=)', filterE)

Desired_op&gt;&gt;&gt; ['x.y.prop1 ==== 1 and x.y.prop2', '&gt;=', '2 and x.y.prop1', '&lt;', '3 or x.y.prop4' ,'&gt;' ,'9']

Compiled_op&gt;&gt;&gt; ['x.y.prop1 ', '==', '', '==', ' 1 and x.y.prop2 ', '&gt;', '= 2 and x.y.prop1 ', '&lt;', ' 3 or x.y.prop4 ', '&gt;', ' 9']

pfe = re.split(r'(=(?=)|&lt;|&lt;(?=)|&gt;|&gt;(?=)|!(?=))', filterE)

Compiled_op&gt;&gt;&gt; ['x.y.prop1 ', '=', '', '=', '', '=', '', '=', ' 1 and x.y.prop2 ', '&gt;', '', '=', ' 2 and x.y.prop1 ', '&lt;', ' 3 or x.y.prop4 ', '&gt;', ' 9']
</code></pre>
<p>I want that filterE should split only on '&lt;=' , '==' ,'&gt;=', '&gt;' ,'&lt;' and '!=' so I made this regex but work properly.</p>
<pre><code>pfe = re.split(r'(=(?&lt;==)|&lt;|&lt;(?&lt;==)|&gt;|&gt;(?&lt;==)|!(?&lt;==))', filterE)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding a negative lookahead and a negative lookbehind to @Anthony's answer</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; filterE = "x.y.prop1====1 and x.y.prop2&gt;=2 and x.y.prop1&lt;3 or x.y.prop4&gt;9"
&gt;&gt;&gt; re.split(r'((?&lt;!=)==(?!=)|&lt;=|&gt;=|!=|&lt;|&gt;)', filterE)
['x.y.prop1====1 and x.y.prop2', '&gt;=', '2 and x.y.prop1', '&lt;', '3 or x.y.prop4', '&gt;', '9']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You just need to improve your re a bit</p>
<pre><code>&gt;&gt;&gt; pfe = re.split(r'(==*|&lt;=|&gt;=|!=|&lt;|&gt;)', filterE)
&gt;&gt;&gt; pfe # match your Desired_op
['x.y.prop1 ', '====', ' 1 and x.y.prop2 ', '&gt;=', ' 2 and x.y.prop1 ', '&lt;', ' 3 or x.y.prop4 ', '&gt;', ' 9']
</code></pre>
<p>Note the placement of '*' and symbols of '&lt;' and '&gt;' in regular expression</p>
</div>
<div class="post-text" itemprop="text">
<p>If your comparators are always surrounded by spaces, simply do</p>
<pre><code>re.split(r'\s(==|&lt;|&lt;=|&gt;|&gt;=|!=)\s', filterE)
</code></pre>
<p>Otherwise, say it looks like:</p>
<pre><code>filterE = "x.y.prop1====1 and x.y.prop2&gt;=2 and x.y.prop1&lt;3 or x.y.prop4&gt;9"
</code></pre>
<p>Then you can use lookahead assertions like:</p>
<pre><code>re.split(r'(?&lt;=\s|[^=&lt;&gt;])(==|&lt;|&lt;=|&gt;|&gt;=|!=)(?=\s|[^=&lt;&gt;])', filterE)
# ['x.y.prop1====1 and x.y.prop2', '&gt;=', '2 and x.y.prop1', '&lt;', '3 or x.y.prop4', '&gt;', '9']
</code></pre>
</div>
<span class="comment-copy">Thanks for the reply but I want that filterE should split only on '&lt;=' , '==' ,'&gt;=', '&gt;' ,'&lt;' and '!=' so I made this regex but it does not work properly.  pfe = re.split(r'(=(?&lt;==)|&lt;|&lt;(?&lt;==)|&gt;|&gt;(?&lt;==)|!(?&lt;==))', filterE)</span>
<span class="comment-copy">I think <code>====</code> is not a valid mathematical comparators.</span>
<span class="comment-copy">I agree. I am just addressing OP's regular expression question.</span>
<span class="comment-copy">I apologize I should have been more clearer but in my Desired_op&gt;&gt;&gt; ['x.y.prop1 ==== 1 and x.y.prop2', '&gt;=', '2 and x.y.prop1', '&lt;', '3 or x.y.prop4' ,'&gt;' ,'9'] .  filterE should not split on '====', or '===' or '=' it should split only on '=='</span>
<span class="comment-copy">@AnthonyKong, you were close. Just need to add a couple of negative assertions around <code>==</code></span>
<span class="comment-copy">@gnibbler Thanks. Looks like you gave a better answer than the accepted one.</span>
<span class="comment-copy">works very well for me, but can you point me in right direction for learning more about the regex, as I am not very good at it. And what makes the difference between two syntax's. Any followup answers are not needed but will be greatly appreciated.</span>
<span class="comment-copy">@VaibhavChauhan - This is a very good <a href="http://www.regular-expressions.info/tutorialcnt.html" rel="nofollow noreferrer">reference</a>.  I learned Regex from here.</span>
<span class="comment-copy">@VaibhavChauhan: Always read the <a href="http://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs</a></span>
