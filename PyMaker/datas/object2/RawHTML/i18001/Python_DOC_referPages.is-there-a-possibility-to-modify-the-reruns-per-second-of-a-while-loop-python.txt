<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13197686/how-do-i-ensure-that-a-python-while-loop-takes-a-particular-amount-of-time-to-ru">How do I ensure that a Python while-loop takes a particular amount of time to run?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I have the following problem: I need a program that runs every minute. I have managed to do this with python's time-module and an infinite while-loop. It looks like this:</p>
<pre><code>while True:
    time_now = tm.gmtime(tm.time())
    min_now = time_now.tm_min

    if min_now - min_then == 1 or min_now - min_then == -59:

        min_then = min_now

        ......
</code></pre>
<p>The loop runs about 150.000 times a second and while I don't think that the general performance is harmed worthy of mention, I wonder if there are alternatives. </p>
<p>Can I modify the number of reruns of a while loop? Or does the algorithm (in assembler, machine code etc.) just jump back to the beginning when finished? Can I use something like a 'wait'-command and will that help?</p>
<p>Thanks for listening (and answering ;) ),</p>
<p>best wishes,</p>
<p>Max</p>
<p>EDIT:</p>
<p>A <code>sleep</code>-command indeed solved my problems. I forget to mention that the rerun must take place every full clock-minute. A sleep for 60 seconds wouldn't be satisfying, however, I used a way that Xi Huan's link mentioned: After the execution of a loop, I use <code>sleep(59.9-time_now.tm_sec)</code>. That reduces the CPU usage to 1%. Excellent.
And: Thank you all for your help! I'd like to upvote you, but I don't have enough reputation :D sry</p>
<p>bye!</p>
</div>
<div class="post-text" itemprop="text">
<p>An easy way would be to sleep in the loop, e.g.</p>
<pre><code>import time

while True:
    # do some stuff
    time.sleep(60) #sleeps for a minute
</code></pre>
<p>EDIT:
Also be aware that you will need to 'import time' for this to work.  Also, if you wish to limit the number of times it loops, this could be useful.  The example below will loop once per minute and will loop 10 times in total.</p>
<pre><code>import time

for x in xrange(0, 10):
    #do stuff
    time.sleep(60)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A common way to do this is by calling <a href="http://docs.python.org/3/library/time.html#time.sleep" rel="nofollow"><code>time.sleep</code></a>, which is essentially the 'wait' command you ask about. If you do:</p>
<pre><code>while True:
    time.sleep(60)
    # do stuff
</code></pre>
<p>The loop will end up running approximately once every minute, plus however long the <code>do stuff</code> takes. There are caveats mentioned in the docs that this isn't guaranteed to be an exact wait time, so you probably still want to check the time at each iteration (depending how strict the 'once per minute' is).</p>
</div>
<div class="post-text" itemprop="text">
<p>use a <code>time.sleep</code> method:</p>
<pre><code>import time
while True:
    #do something
    time.sleep(60)
</code></pre>
</div>
<span class="comment-copy">Xi Huan, thanks for the link, indeed my question was answered there as well.</span>
<span class="comment-copy">why wrap it in a function?</span>
<span class="comment-copy">Sorry, that's not necessary - I have edited to remove the function.</span>
