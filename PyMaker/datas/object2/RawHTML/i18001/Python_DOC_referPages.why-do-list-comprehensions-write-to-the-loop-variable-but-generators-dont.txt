<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4198906/list-comprehension-rebinds-names-even-after-scope-of-comprehension-is-this-righ">List comprehension rebinds names even after scope of comprehension. Is this right?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>If I do something with list comprehensions, it writes to a local variable:</p>
<pre><code>i = 0
test = any([i == 2 for i in xrange(10)])
print i
</code></pre>
<p>This prints "9". However, if I use a generator, it doesn't write to a local variable:</p>
<pre><code>i = 0
test = any(i == 2 for i in xrange(10))
print i
</code></pre>
<p>This prints "0".</p>
<p>Is there any good reason for this difference? Is this a design decision, or just a random byproduct of the way that generators and list comprehensions are implemented? Personally, it would seem better to me if list comprehensions didn't write to local variables.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python’s creator, Guido van Rossum, mentions this when he wrote about <a href="http://python-history.blogspot.de/2010/06/from-list-comprehensions-to-generator.html" rel="nofollow noreferrer">generator expressions</a> that were uniformly built into Python 3: (emphasis mine)</p>
<blockquote>
<p>We also made another change in Python 3, to improve equivalence between list comprehensions and generator expressions. In Python 2, the list comprehension "leaks" the loop control variable into the surrounding scope:</p>
<pre><code>x = 'before'
a = [x for x in 1, 2, 3]
print x # this prints '3', not 'before'
</code></pre>
<p><strong>This was an artifact of the original implementation of list comprehensions; it was one of Python's "dirty little secrets" for years. It started out as an intentional compromise to make list comprehensions blindingly fast, and while it was not a common pitfall for beginners, it definitely stung people occasionally.</strong> For generator expressions we could not do this. Generator expressions are implemented using generators, whose execution requires a separate execution frame. Thus, generator expressions (especially if they iterate over a short sequence) were less efficient than list comprehensions.</p>
<p>However, in Python 3, we decided to fix the "dirty little secret" of list comprehensions by using the same implementation strategy as for generator expressions. Thus, in Python 3, the above example (after modification to use print(x) :-) will print 'before', proving that the 'x' in the list comprehension temporarily shadows but does not override the 'x' in the surrounding scope.</p>
</blockquote>
<p>So in Python 3 you won’t see this happen anymore.</p>
<p>Interestingly, <em>dict comprehensions</em> in Python 2 don’t do this either; this is mostly because dict comprehensions were backported from Python 3 and as such already had that fix in them.</p>
<p>There are some other questions that cover this topic too, but I’m sure you have already seen those when you searched for the topic, right? ;)</p>
<ul>
<li><a href="https://stackoverflow.com/questions/4198906/python-list-comprehension-rebind-names-even-after-scope-of-comprehension-is-thi">Python list comprehension rebind names even after scope of comprehension. Is this right?</a></li>
<li><a href="https://stackoverflow.com/questions/16612575/why-the-list-comprehension-variable-is-accessible-after-the-operation-is-done">Why the list comprehension variable is accessible after the operation is done?</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="http://www.python.org/dev/peps/pep-0289/">PEP 289</a> (Generator Expressions) explains:</p>
<blockquote>
<p>The loop variable (if it is a simple variable or a tuple of simple variables) is not exposed to the surrounding function. This facilitates the implementation and makes typical use cases more reliable.</p>
</blockquote>
<p>It appears to have been done for implementation reasons.</p>
<blockquote>
<p>Personally, it would seem better to me if list comprehensions didn't write to local variables.</p>
</blockquote>
<p>PEP 289 clarifies this as well:</p>
<blockquote>
<p>List comprehensions also "leak" their loop variable into the surrounding scope. This will also change in Python 3.0, so that the semantic definition of a list comprehension in Python 3.0 will be equivalent to list().</p>
</blockquote>
<p>In other words, the behaviour you describe indeed differs in Python 2 but it has been fixed in Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Personally, it would seem better to me if list comprehensions didn't write to local variables.</p>
</blockquote>
<p>You are correct. This is fixed in Python 3.x. The behavior is unchanged in 2.x so that it doesn't impact existing code that (ab)uses this hole.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because...  because.</p>
<p>No, really, that's it.  Quirk of the implementation.  And arguably a bug, since it's fixed in Python 3.</p>
</div>
<div class="post-text" itemprop="text">
<p>As a by-product of wandering how list-comprehensions are actually implemented, I found out a good answer for your question.</p>
<p>In Python 2, take a look at the byte-code generated for a simple list comprehension:</p>
<pre><code>&gt;&gt;&gt; s = compile('[i for i in [1, 2, 3]]', '', 'exec')
&gt;&gt;&gt; dis(s)
  1           0 BUILD_LIST               0
              3 LOAD_CONST               0 (1)
              6 LOAD_CONST               1 (2)
              9 LOAD_CONST               2 (3)
             12 BUILD_LIST               3
             15 GET_ITER            
        &gt;&gt;   16 FOR_ITER                12 (to 31)
             19 STORE_NAME               0 (i)
             22 LOAD_NAME                0 (i)
             25 LIST_APPEND              2
             28 JUMP_ABSOLUTE           16
        &gt;&gt;   31 POP_TOP             
             32 LOAD_CONST               3 (None)
             35 RETURN_VALUE  
</code></pre>
<p>it essentially translates to a simple <code>for-loop</code>, that's the syntactic sugar for it. As a result, the same semantics as for <code>for-loops</code> apply:</p>
<pre><code>a = []
for i in [1, 2, 3]
    a.append(i)
print(i) # 3 leaky
</code></pre>
<p>In the list-comprehension case, (C)Python uses a "hidden list name" and a special instruction <code>LIST_APPEND</code> to handle creation but really does nothing more than that. </p>
<p>So your question should generalize to why Python writes to the for loop variable in <code>for-loop</code>s; that is nicely answered <a href="http://eli.thegreenplace.net/2015/the-scope-of-index-variables-in-pythons-for-loops/" rel="nofollow noreferrer">by a blog post from Eli Bendersky</a>.</p>
<p>Python 3, as mentioned and by others, has changed the list-comprehension semantics to better match that of generators (by creating a separate code-object for the comprehension) and is essentially syntactic sugar for the following:</p>
<pre><code>a = [i for i in [1, 2, 3]]

# equivalent to
def __f(it):
    _ = []
    for i in it
        _.append(i)
    return _
a = __f([1, 2, 3])
</code></pre>
<p>this won't leak because it doesn't run in the uppermost scope as the Python 2 equivalent does. The <code>i</code> is leaked, only in <code>__f</code> and then destroyed as a local variable to that function.</p>
<p>If you'd want, take a look at the byte-code generated for Python 3 by 
running <code>dis('a = [i for i in [1, 2, 3]]')</code>. You'll see how a "hidden" code-object is loaded and then a function call is made in the end.</p>
</div>
<div class="post-text" itemprop="text">
<p>One of the subtle consequences of the dirty secret described by poke above, is that <code>list(...)</code> and <code>[...]</code> does not have the same side-effects in Python 2:</p>
<pre><code>In [1]: a = 'Before'
In [2]: list(a for a in range(5))
In [3]: a
Out[3]: 'Before'
</code></pre>
<p>So no side-effect for generator expression inside list-constructor, but the side-effect is there in a direct list-comprehension:</p>
<pre><code>In [4]: [a for a in range(5)]
In [5]: a
Out[5]: 4
</code></pre>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/a/12381841/674039">Bikeshedding? I'm not going to vote close this as a duplicate, but see my answer here</a></span>
<span class="comment-copy">@wim: Trying to understand an unintutive part of a language isn’t bikeshedding.</span>
<span class="comment-copy">@wim: If by "bikeshedding" you mean procrastination, then you are correct! I was just curious, and it has caused bugs for me in the past.</span>
<span class="comment-copy">Sorry, it's just something that's been asked and answered several times already.  +1 for you anyway, for writing the question well.</span>
<span class="comment-copy">How dare you compare an important programming language semantics concern to the choice of paint color for a bike shed?!</span>
<span class="comment-copy">:) I did do a brief search for this, but I didn't find those posts, partly because I didn't know what to call the local variable that a list comprehension creates. Is "loop variable" the preferred term? That's what PEP 289 uses, anyway. Would this term also apply to generators, even though they don't really have a formal loop per se?</span>
<span class="comment-copy">The <a href="http://docs.python.org/3/reference/expressions.html#grammar-token-comp_for" rel="nofollow noreferrer">grammar</a> calls it “target”, but I guess “loop variable” still makes the most sense. And I would say it applies to generators as well, as—just like full generator functions—they still have a loop inside but just pause until the next iteration is requested. So “iterator variable” works fine too, I’d say :)</span>
<span class="comment-copy">@poke Note that a <code>target</code> need not be a variable. For example it can be a tuple (for tuple-unpacking): <code>[x for x,y in something]</code>, however you can also do more odd things like: <code>a = [1,2,3]; [1 for a[0] in range(3)]</code>, or even: <code>[1 for something.attribute in iterable]</code>.</span>
<span class="comment-copy">Does this mean that list comprehensions are slower in python 3 compared to python2?</span>
<span class="comment-copy">@JensTimmerman The directly following paragraph covers this: <i>“And before you start worrying about list comprehensions becoming slow in Python 3: thanks to the enormous implementation effort that went into Python 3 to speed things up in general, both list comprehensions and generator expressions in Python 3 are actually faster than they were in Python 2!”</i></span>
<span class="comment-copy">which doesn't explain why listcomps <i>do</i> expose the variable (and PEP 202 isn't very helpful).  i assume it was originally to match the semantics of <code>for</code>, and later this was realized to be a bad idea.</span>
<span class="comment-copy">"the semantic definition of a list comprehension in Python 3.0 will be equivalent to list(&lt;generator expression&gt;)" -- PEP 289. This seemed to me to be the logical way to do a list comprehension, hence my original question. I didn't realize that generators came later.</span>
