<div class="post-text" itemprop="text">
<p>I just stumbled over what seems to be a flaw in the python syntax-- or else I'm missing something.</p>
<p>See this:</p>
<pre><code>[x for x in range(30) if x % 2 == 0]
</code></pre>
<p>But this is a syntax error:</p>
<pre><code>[x for x in range(30) if x % 2 == 0 else 5]
</code></pre>
<p>If you have an <code>else</code> clause, you have to write:</p>
<pre><code>[x if x % 2 == 0 else 5 for x in range (30)]
</code></pre>
<p>But this is a syntax error:</p>
<pre><code>[x if x %2 == 0 for x in range(30)]
</code></pre>
<p>What am I missing? Why is this so inconsistent?</p>
</div>
<div class="post-text" itemprop="text">
<p>You are <em>mixing</em> syntax here. There are <strong>two</strong> different concepts at play here:</p>
<ul>
<li><p>List comprehension syntax. Here <code>if</code> acts as a filter; include a value in the iteration or not. There is no <code>else</code>, as that is the 'don't include' case already.</p></li>
<li><p>A <a href="http://docs.python.org/2/reference/expressions.html#conditional-expressions">conditional expression</a>. This must always return a value, either the outcome of the 'true' or the 'false' expression.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The difference between the two is that the trailing <code>if</code> in the first one is part of the <a href="http://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension syntax</a>, while the <code>if-else</code> is the conditional operator, not any part of the list comprehension syntax - as it is an expression which is permitted in that part of a list comprehension.</p>
<p>The <a href="http://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="noreferrer">syntax for the conditional operator</a> is as follows:</p>
<pre><code>x if condition1 else y
</code></pre>
<p>This returns the value of the expression that is evaluated, which is why it seems to "work" for your case, though it evaluates all of the time and returns always - which is the key difference between the two.</p>
<p>Meanwhile, for the list comprehension, it tests whether or not the condition applies, and <strong>does <em>not</em> add that in the new list created</strong> if the condition does not evaluate to true according to the <a href="http://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="noreferrer">Truth Value Testing procedure</a>, not <code>None</code> nor anything else.</p>
<p>Compare the following (taking an example from <a href="http://www.python.org/dev/peps/pep-0202" rel="noreferrer">PEP202</a>):</p>
<pre><code>a = [i if i % 2 == 0 else None for i in range(20)]
b =  [i for i in range(20) if i % 2 == 0]
</code></pre>
<p><code>a</code> would be </p>
<pre><code>[0, None, 2, None, 4, None, 6, None, 8, None, 10, None, 12, None, 14, None, 16, None, 18, None]
</code></pre>
<p>while <code>b</code> would be</p>
<pre><code>[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
</code></pre>
<p>which isn't the same at all, as no matter what the result of it is, it will still add it in if there is no <code>if</code> part of the <em>list comprehension</em>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What am I missing?</p>
</blockquote>
<p>The following is a <em>ternary operation</em> (aka "conditional expression" in python parlance)</p>
<pre><code>x if some_boolean else y
</code></pre>
<p>This evaluates like it reads: if <code>some_boolean</code> is <code>True</code>, give me <code>x</code>, else give me y.</p>
<p>Do not confuse this with comprehension syntax:</p>
<pre><code>(expression) for (iteration variable) in (iterable) [if (filter)]
</code></pre>
<p>A conditional expression can go into the (expression) part.  It doesn't have anything to do with the optional <code>if (filter)</code> part.</p>
</div>
<span class="comment-copy">Oh...so there is no way to do an <code>else</code> as part of the comprehension.</span>
<span class="comment-copy">@Aerovistae: No, it is not part of the syntax, as <i>there is no point</i>.</span>
<span class="comment-copy">Well if you wanted to insert blanks (or something) everywhere that something was omitted...</span>
<span class="comment-copy">Then you are not omitting, you are replacing and the conditional expression works just fine.</span>
<span class="comment-copy">@Aerovistae Using <code>if</code> at the end of the list comp syntax is what is telling the list comp whether or not to include it. <code>[foo for foo in bar if isinstance(foo,basestring)]</code> checks <code>isinstance(foo,basestring)</code> and if it's <code>False</code> immediately discards that foo. If you want to include <code>foo</code> regardless of whether or not its a <code>basestring</code>, but maybe do something to it if it isn't (<code>str(foo)</code>?), then don't put it in the filter at the end, instead assign it as a conditional expression. <code>[foo if isinstance(foo,basestring) else str(foo) for foo in bar]</code> now the list comp looks at ALL <code>foo</code>s in <code>bar</code>.</span>
<span class="comment-copy">So how can I do an if/else as part of the comprehension? Is that possible?</span>
<span class="comment-copy">Not to mention elif!</span>
<span class="comment-copy">@Aerovistae: no, you can't use <code>elif</code> in a conditional operator.</span>
<span class="comment-copy">The conditional expression is <i>a</i> ternary operator, just as <code>or</code> is a <i>binary</i> operator. But to use 'ternary operator' as a name for the conditional expression is not correct; ternary just refers to the fact that it takes three operands, and as such ternary operators are a <i>class</i> of expressions, never a specific one. The fact that Python only has one such operator doesn't matter here.</span>
<span class="comment-copy">@MartijnPieters "ternary if" is likely more correct, but I find it needlessly pedantic to further qualify "ternary operator" in a language that only has one ternary operator.  I know it rubs some people the wrong way to say <i>the</i> ternary operator, but if there's only one... eh.  YMMV.</span>
<span class="comment-copy">It is an operator, with 3 operands, so ternary operator is a fine term, but it is still a <i>class</i> or <i>type</i> designation, just like binary operator, and not a name. 'conditional expression' is the name used in the documentation.</span>
