<div class="post-text" itemprop="text">
<p>So this is a question about the ambiguity introduced with questioning indent, not really the matter of <code>not</code>.</p>
<p>==============Original Question==============</p>
<p>I'm using Visual Studio. Basically here's the simplified example of what I've encountered:</p>
<pre><code>class sample():
    def __init__(self):
        self.xData = [0]
        self.yData = [0]
    def trySomething(self, x = [], y = []):
        if not x: x = self.xData; if not y: y = self.yData
        #BlaBlaBla
</code></pre>
<p>Here I want to check if x and y has an input, if not, using the variables of the class itself. However, that can't run, the  <code>if not y:</code> is underscored with red waving line saying <code>Unexpected token 'not'</code>, like this:
<a href="https://i.stack.imgur.com/pgwIe.png" rel="nofollow noreferrer"><img alt="demo" src="https://i.stack.imgur.com/pgwIe.png"/></a>
The wired thing is that once I split it into another row, things would be fixed:</p>
<pre><code>class sample():
    def __init__(self):
        self.xData = [0]
        self.yData = [0]
    def trySomething(self, x = [], y = []):
        if not x: x = self.xData; 
        if not y: y = self.yData
        #BlaBlaBla
</code></pre>
<p>So what's wrong writing them together in one row? Or is that some sort of bug of Visual Studio?</p>
</div>
<div class="post-text" itemprop="text">
<p>Ambiguity. Which one do you mean?</p>
<pre><code>    if not x: 
        x = self.xData
    if not y: 
        y = self.yData
</code></pre>
<p>or</p>
<pre><code>    if not x: 
        x = self.xData
        if not y: 
            y = self.yData
</code></pre>
<p>Here's more details: <a href="https://docs.python.org/3/reference/compound_stmts.html" rel="nofollow noreferrer">https://docs.python.org/3/reference/compound_stmts.html</a></p>
<p>TLDR Just don't use <code>;</code> in this case</p>
</div>
<div class="post-text" itemprop="text">
<p>This is logical. If you <strong>write a lexical scope</strong> (like <code>if</code>), even <strong>after the semicolon</strong>, it is <strong>still under the <code>if</code></strong>.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; if False: print('a'); print('b')
... 
&gt;&gt;&gt; 
</code></pre>
<p>(prints nothing)</p>
<p>So:</p>
<pre><code>if False: print('a'); print('b')
</code></pre>
<p>is <strong>equivalent to</strong>:</p>
<pre><code>if False:
    print('a')
    print('b')  # also under the if
</code></pre>
<p>Since introducing a new scope makes it terribly hard to understand, the syntax is not allowed in Python. It would create ambugity.</p>
<p>So the statement you wrote was incorrect: you would have scoped the <code>if not y</code> under the <code>if not x</code>, which was not what you meant.</p>
</div>
<span class="comment-copy">why do you add a <code>;</code>  ?</span>
<span class="comment-copy">@scharette, because without a semicolon, you can't have two statements on one line.</span>
<span class="comment-copy">@Kevin Oh he needs both on the same line. My bad, I really hate looking code in an image, I always put my attention to posted code.</span>
<span class="comment-copy">Got it, thank you!</span>
<span class="comment-copy">i don't think there is a better explanation than that. excellent :)</span>
