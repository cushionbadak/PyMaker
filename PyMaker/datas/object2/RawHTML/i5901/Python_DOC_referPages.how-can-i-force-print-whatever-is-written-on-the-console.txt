<div class="post-text" itemprop="text">
<p>I'm trying to build a piece of code that prints out whatever is written on the console, but still executing whatever a person writes on it. For example:</p>
<p>I have this function:</p>
<pre><code>def create_set():
    return []
</code></pre>
<p>Whenever someone puts this: <code>c = create_set()</code> in the console. I want the program to create the set AND print out the string <code>"c = create_set()"</code> </p>
<p>How can I do that? Some help would be much aprecciated</p>
</div>
<div class="post-text" itemprop="text">
<p>You could write a decorator that does this, but you'll have to add this to every method per hand or do some magic in the module <code>__dict__</code> (which I don't recommend). This works (I tested it) in python 3.6, if you use the commented version it works in python 2.7. They changed the <code>stack</code>-signature from <a href="https://docs.python.org/2/library/inspect.html" rel="nofollow noreferrer">2.X</a> to <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">3.X</a>.</p>
<pre><code>from inspect import stack
from functools import wraps

def printer(f):
     @wraps(f)
     def wrapped(*args, **kwargs):
         call_info = stack()[1].code_context  # In Python 2.7.X, replace with stack()[1][4]
         # Use index 1 because 0 is always this wrapper function
         for context in call_info:
             print(context.strip())

         return f(*args, **kwargs)
     return wrapped
</code></pre>
<p>Use it like this:</p>
<pre><code>@printer
def test():
    return 5

x = test()
</code></pre>
<p>This will print <code>x = test()</code>to stdout. If you want this for debugging, that is totally fine, but if this is something your code relies on in production I would not recommend it, because it will kill your performance, see for example <a href="https://stackoverflow.com/questions/17407119/python-inspect-stack-is-slow">here</a>.</p>
</div>
<span class="comment-copy">What do you mean by "the console"? Are you trying to modify the REPL?</span>
<span class="comment-copy">For example, when you're in a Python console, and you open a python file, imagine you have functions on that file, and when you call those functions, I want to printout that call as a string, and still allow the program to execute that call. P.S. I could just put a  <code>print("function name")</code> on each function but that's not what I want the program to do.</span>
<span class="comment-copy">@Daniel: are you perhaps looking for the <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer"><code>pdb</code></a> tool?</span>
<span class="comment-copy">@DanielPryden not exactly, I just want a piece of code that whenever some call is made, it prints out exactly what was typed and still executes whatever it was supposed to.</span>
<span class="comment-copy">@Daniel: If you execute with a debugger, you can set breakpoint(s) on the code of interest and dump any local variables. I'm pretty sure that will solve your problem and doesn't require you to write any code at all.</span>
<span class="comment-copy">Yes this is for debugging, I'm kinda desperate. So I just add this to the file?</span>
<span class="comment-copy">It gives me an error:  <code>Traceback (most recent call last):   File "&lt;input&gt;", line 1, in &lt;module&gt;   File "&lt;input&gt;", line 9, in wrapped TypeError: 'NoneType' object is not iterable</code> line 9 being:  <code>for context in call_info:</code></span>
<span class="comment-copy">Are you using this in a live environment? I just tried it again in IPython and in a file and it works for me with Python 3.6.2</span>
<span class="comment-copy">Iâ€™m using it in pycharm for example</span>
<span class="comment-copy">I put a comment in how to use it with python 2</span>
