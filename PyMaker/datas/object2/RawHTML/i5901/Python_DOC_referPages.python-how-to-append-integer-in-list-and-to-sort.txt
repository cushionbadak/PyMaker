<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/36707886/python-appending-and-sorting-a-list">Python - Appending and Sorting a List</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p>i want append in list and to sort</p>
<p>For example</p>
<pre><code>num_list = [5, 10, 15, 20]
num_list.append(13)
num_list.append(17)

print(num_list)
[5, 10, 13, 15, 17, 20]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your list is already sorted, you can insert directly at the correct place: This does the insertion and keeps the list sorted in <code>O(n)</code>.<br/>
(credits to @AntonvBR for the assist in the comments)  </p>
<pre><code>def insert_sorted(seq, elt):
    """inserts elt at the correct place in seq, to keep it in sorted order
    :param seq: A sorted list
    :param elt: An element comparable to the content of seq
    Effect: mutates the param seq.
    Does not return a result
    """
    idx = 0
    if not seq or elt &gt; seq[-1]:
        seq.append(elt)
    else:
        while elt &gt; seq[idx] and idx &lt; len(seq):
            idx += 1
        seq.insert(idx, elt)

num_list = [5, 10, 15, 20]
insert_sorted(num_list, 21)
num_list
</code></pre>
<p>Edit:</p>
<p>You could also use the module bisect, and do the same, probably more efficiently: (credits to @stefan in the comments)</p>
<pre><code>import bisect
num_list = [5, 10, 15, 20]
bisect.insort(num_list, 17)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just use the <a href="https://docs.python.org/3.0/library/bisect.html#bisect.insort" rel="nofollow noreferrer"><code>bisect.insort()</code></a> function:</p>
<pre><code>import bisect

num_list = [5, 10, 15, 20]
bisect.insort(num_list, 13)
bisect.insort(num_list, 17)

print(num_list)
# [5, 10, 13, 15, 17, 20]
</code></pre>
<p>Worst/Average case <code>O(n)</code> time complexity for insertion and easy to use. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use default <code>sort</code> method    </p>
<pre><code>    num_list = [5, 10, 15, 20]
    num_list.append(13)
    num_list.append(17)

    num_list.sort()
    print(num_list)
</code></pre>
</div>
<span class="comment-copy">Use <code>num_list.sort()</code> for sort.</span>
<span class="comment-copy">I think you can use any search engine to find how to do ...</span>
<span class="comment-copy">did you search this before posting your question here ???</span>
<span class="comment-copy">sorry, I missed the word 'same time'. i want append and sort in same time</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/bisect.html#bisect.insort_left" rel="nofollow noreferrer"><code>bisect.insort</code></a>?</span>
<span class="comment-copy">Yes, you are correct, however even bisect finds the index in log(n) time, the insertion is O(n).</span>
<span class="comment-copy">Good catch, thank you @AntonvBR - I fixed it.</span>
<span class="comment-copy">@ReblochonMasque Nice but it returns a duplicate now. Need to use a return after append or else statement</span>
<span class="comment-copy">Good catch again! Thank you. I added your assist in the credits.</span>
<span class="comment-copy">This is what I want. thank you</span>
<span class="comment-copy">there's no need to answer low quality duplicate questions</span>
<span class="comment-copy">There are thousands, not just a few elemental, because i want append and sort at the same time</span>
<span class="comment-copy">@ChanghoLee Are we supposed to guess what you want to do ? :)</span>
