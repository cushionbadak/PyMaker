<div class="post-text" itemprop="text">
<p>I have two lists:</p>
<pre><code>l1 = [[1,2,3,4,5], [1,2,4,6,7]]
l2 = [[1,2,3,4,5], [1,2,4,6,7], [1,2,3,6,8], [1,2,3,0,9], [1,2,6,7,6]]
</code></pre>
<p>I want to create a new list <code>l3</code> that contains the items of <code>l2</code> that are not in <code>l1</code>. Something like this:</p>
<pre><code>l3 = l2-l1
</code></pre>
<p>So, I am expecting an <code>l3</code> as:</p>
<pre><code>l3 = [[1,2,3,6,8], [1,2,3,0,9], [1,2,6,7,6]]
</code></pre>
<p>How can I achieve that?
Any solution Using remove() or delete() in python..?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to remove <code>l2</code> sublists that are in <code>l1</code> and create a new list with the remaining sublists, try this:</p>
<pre><code>l1 = [[1,2,3,4,5], [1,2,4,6,7]]
l2 = [[1,2,3,4,5], [1,2,4,6,7], [1,2,3,6,8], [1,2,3,0,9], [1,2,6,7,6]]

for sub in l1:
    if sub in l2:
        l2.remove(sub)

l3 = l2[:]

&gt;&gt;&gt; l1
[[1, 2, 3, 4, 5], [1, 2, 4, 6, 7]]
&gt;&gt;&gt; l2
[[1, 2, 3, 6, 8], [1, 2, 3, 0, 9], [1, 2, 6, 7, 6]]
&gt;&gt;&gt; l3
[[1, 2, 3, 6, 8], [1, 2, 3, 0, 9], [1, 2, 6, 7, 6]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just do:</p>
<pre><code>l3 = [lst for lst in l2 if lst not in l1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Build a set of tuples for the O(1) membership test. (In your trivial example, that would not be necessary, but I am assuming big lists.) Then filter via list comprehension.</p>
<pre><code>&gt;&gt;&gt; checker = set(map(tuple, l1))
&gt;&gt;&gt; [l for l in l2 if tuple(l) not in checker]
[[1, 2, 3, 6, 8], [1, 2, 3, 0, 9], [1, 2, 6, 7, 6]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use below code:</p>
<pre><code>l1 = [[1,2,3,4,5], [1,2,4,6,7]]
l2 = [[1,2,3,4,5], [1,2,4,6,7], [1,2,3,6,8], [1,2,3,0,9], [1,2,6,7,6]]

l3=[]

for i in l2:
    if i not in l1:
        l3.append(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using Itertool :</p>
<pre><code>import itertools
k = l2+l1
k = sorted(k)
list(k for k,_ in itertools.groupby(k))
</code></pre>
<p><a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a>  offers the fastest and most powerful solutions to this kind of problems , and will be efficient in terms of time  , when the list size grows ,</p>
<p>And it's the pythonic way to achieve the solution , as the saying goes "When you are in Rome, Do like Romans."</p>
</div>
<div class="post-text" itemprop="text">
<p>If order and types are not crucial, use <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">sets</a> instead.  They are fast and resemble your examples:</p>
<pre><code>set1 = {tuple(l) for l in l1}
set2 = {tuple(l) for l in l2}
set2 - set1
# {(1, 2, 3, 0, 9), (1, 2, 3, 6, 8), (1, 2, 6, 7, 6)}
</code></pre>
<p>The first two lines convert the lists into (unordered) sets of tuples, e.g. </p>
<pre><code>{(1, 2, 4, 6, 7), (1, 2, 3, 4, 5)}
{(1, 2, 4, 6, 7), (1, 2, 3, 4, 5), (1, 2, 3, 0, 9), (1, 2, 3, 6, 8), (1, 2, 6, 7, 6)}
</code></pre>
<p>These forms allow set operations, i.e. one equivalent to the difference between <code>set2</code> and <code>set1</code>. </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; l1 = [[1,2,3,4,5],[1,2,4,6,7]]
&gt;&gt;&gt; l2 = [[1,2,3,4,5],[1,2,4,6,7],[1,2,3,6,8],[1,2,3,0,9],[1,2,6,7,6]]
&gt;&gt;&gt; for i in l1:
&gt;&gt;&gt; if i in l2:
&gt;&gt;&gt;     del l2[l2.index(i)]
&gt;&gt;&gt; print(l2)
</code></pre>
</div>
<span class="comment-copy">you can probably gain more if you assume that <code>checker</code> gets <i>depleted</i> which seems to be the case.</span>
<span class="comment-copy">@Ev.Kounis I don't quite follow.</span>
<span class="comment-copy">After <code>[1,2,3,4,5]</code> is found on <code>l2</code> and skipped, <code>checker</code> could be updated to contain <code>[1,2,4,6,7]</code> <b>only</b>. I am assuming here that entries on <code>l2</code> are unique. Scaled up, the membership test would benefit from a smaller-sized <code>checker</code>.</span>
<span class="comment-copy">@Ev.Kounis ok, I see what you mean. I can't make those assumptions without clarification from OP.</span>
<span class="comment-copy">You are right; it would make the question a bit more interesting though.. Anyway, +1</span>
