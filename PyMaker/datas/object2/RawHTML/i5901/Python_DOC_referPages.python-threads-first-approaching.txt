<div class="post-text" itemprop="text">
<p>i'm new to python threads, as first task i wrote this:</p>
<pre><code>from twitterHandler import Twitter_User
from text_analyzer import text_analyzer
import threading

if __name__=='__main__':
    usersIDS = {'user1':24503301,'user2':7375922343546478338,'user3':2144265434,'user4':50090727}
    threads = {}

    def get_data(user_id):
    '''get the most common words used by twitter user un his text tweet and save it in a file object'''
        ...

    for user_name, user_id in usersIDS.items():
        t = threading.Thread(target=get_data,args=(user_id,))
        threads[user_name] = t
        print('Starting to get data for: {}'.format(user_name)
        t.start()


    for name,t in threads.items():
        t.join()
        print('Process for {} Stopped'.format(name))
</code></pre>
<p>The code works, but i'm wondering if that is a typical use case for threads, or i simply could do something like that.</p>
<pre><code>for user_id in usersIDS.values():
    get_data(user_id)
    ...
</code></pre>
<p>In other words, is multithreading the right choice for my problem? many thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, in my opinion it is good approach and pretty common. Threads are used in  cases such as: </p>
<ul>
<li>Asynchronous operations - when some process does not depend on output of the other</li>
<li>Processes which can be parrallelized - like doing filtering on different parts of image</li>
<li>Operations running on backgroud</li>
</ul>
<p>I think your case can be treated as first and second groups. Each person object analysis does not depend on the outputs of other people analysis. However, in case you have big data of users and words, it can cause problems for your computer, since it have to manage creation and destruction of each thread. Anyway, it is personal decision use threads or not.</p>
</div>
<span class="comment-copy">It really depends on what exactly is happening in <code>get_data()</code>. If it's something that takes a while and is I/O bound, then using threads like this might be a good approach.</span>
<span class="comment-copy">By the way, you can simplify your first loop by doing <code>for user_name, user_id in userIDS.items()</code>.</span>
<span class="comment-copy">your right on the first loop. the get_data function simply use the tweepy library and tweet api for get some data and write it into a file, i cannot wrote the entire function because i couldnt publish the post (lot of code and poor text)</span>
<span class="comment-copy">So it's doing HTTP requests to the Twitter API? If so, using threads could speed things up a bit.</span>
<span class="comment-copy">What you're doing here is pretty much replicating the behaviour of a thread pool. If you're running python &gt;= 3.5, you can simplify this code a bit using <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor" rel="nofollow noreferrer">ThreadPoolExecutor</a></span>
