<div class="post-text" itemprop="text">
<p>Hello there :) I was writing a program that uses binary search through a sorted list. it should work as follows: python find.py 3 1 2 3</p>
<p>the program should look for 3 in the numbers 1 2 and 3</p>
<p>it should return true and print found needle if it is in 1 2 and 3,
if it is not in 1 2 and 3 if should return false and print did not find....</p>
<pre><code>def binary_search(needle, haystack):
    first = 0
    last = len(haystack) - 1
    itemlist = str(input(haystack))
    sorted(itemlist)

    while first &lt;= last:
        mid = (first + last) / 2
        if itemlist[mid] == needle :
            print("Found the needle in the haystack")
            return True
        elif needle &lt; itemlist[mid]:
            last = mid - 1
        else:
            first = mid + 1 
        if not True:
            print("Did not find the needle in the haystack")
            return False
</code></pre>
<p>so I tried implementing a standard binary search algorithm, but every version I come across does not take the first number as the item you need to search for in all the following numbers to come...
So my question is, how do I set the first variable as the "item" and then everything to come as a list that may or may not contain the item?</p>
<p>I also need to sort that list of x length, so i Tried the sorted function, but since the list can be of any length, i need to sort a variable? I got kinda stuck there.... Any tips on these topics?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>sys.argv</code></a> is a list containing the command line arguments used to invoke the python process. <code>sys.argv[0]</code> is the name of the script and <code>sys.arv[1:]</code> are the remaining arguments. Access it like this:</p>
<pre><code>def binary_search(needle, haystack):
    print('binary_search(): needle = {}, haystack = {}'.format(needle, haystack))
    # your implementation here

if __name__ == '__main__':
    import sys

    if len(sys.argv) &gt; 2:
        needle = sys.argv[1]
        haystack = sys.argv[2:]
        binary_search(needle, haystack)
    else:
        print('Usage: {} needle haystack...'.format(sys.argv[0]))
</code></pre>
<hr/>
<p>If you need to sort the haystack first, use <a href="https://docs.python.org/3/library/functions.html?highlight=sorted#sorted" rel="nofollow noreferrer"><code>sorted()</code></a>:</p>
<pre><code>binary_search(needle, sorted(haystack))
</code></pre>
<p>However, there is little point in sorting first because that has <em>O(n log n)</em> time complexity, whereas a linear search has only <em>O(n)</em> time complexity. Therefore, if the input is unsorted, it's better to just search by iterating over the list until the target is found.</p>
<hr/>
<p>Finally, you might need to convert the input to numeric values in order for the search to work. You can use <code>int()</code> for that:</p>
<pre><code>        needle = int(sys.argv[1])
        haystack = [int(s) for s in sys.argv[2:]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Binary search is part of the standard library. Here is how to use it for your problem:</p>
<pre><code>import sys
import bisect

argv = [int(_) for _ in sys.argv[1:]]
x = argv.pop(0)
i = bisect.bisect_left(argv, x)
print("Found:", i != len(argv) and argv[i] == x)
</code></pre>
<p>Also, the problem only makes sense if the input list is already sorted. If it's not, simply use <code>x in argv</code>, which is linear (sorting the list is linearithmic).</p>
</div>
<span class="comment-copy">Hey man, thanks for replying! You helped me out a lot here, however, when I run it now it says: typeError: list indices must be integers or slices, not float</span>
<span class="comment-copy">And the Error has to do with the lines: binary_search(int(needle), sorted(int(s) for s in haystack)) and the line: if haystack[mid] == needle:</span>
<span class="comment-copy">@mhawke timsort (the default sort algorithm in Python) has O(n log n) complexity <i>in the worst case</i> only - on already sorted data it's linear.</span>
<span class="comment-copy">I think there is still something wrong with: if haystack[mid] == needle: ................. it says that list indices must be integers or slices, not float, and I define mid as something defined by 2, so maybe it gives the error because mid can be 0.5? I tried using int(mid) but that doesnt work because mid is already an int...</span>
<span class="comment-copy">@RubenWeijers I assume you're using Python 3 - if so you want <code>mid = round((first + last) / 2)</code></span>
