<div class="post-text" itemprop="text">
<p>I'm writing a function that recursively traverses the file system, and returns a list of all files with the <code>.txt</code> extension. </p>
<p>The <code>pass_test_func</code> parameter is just a function that can be run and checked (i.e. is the file greater than 100 bytes, etc) - The <code>nothing</code> function (set as its default), simply returns its argument. </p>
<p>My implementation:</p>
<pre><code>def visit(dname, pass_test_func=nothing):           
    directory = os.listdir(dname)                   
    byte_list = []
    for file in directory:
        file_dir = os.path.join(dname, file)
        if os.path.isfile(file_dir) and file_dir.lower().endswith('.txt'):
            size = os.path.getsize(file_dir)
            if pass_test_func(size):
                byte_list.append(str(size) + ' ' + file_dir)
        elif os.path.isdir(file_dir):
            visit(file_dir, pass_test_func)
    return byte_list
</code></pre>
<p>My problem is that when I recursively call <code>visit</code> in the following lines </p>
<pre><code>elif os.path.isdir(file_dir):
                visit(file_dir, pass_test_func)
</code></pre>
<p>the <code>byte_list</code> is cleared to empty again. I understand why this is happening, but have no idea how I would fix it. The list has to be defined within the definition of <code>visit</code>, so whenever I use recursion it will always be reset no matter what right? Maybe some other data structure is better suited, like a tuple or dictionary? </p>
</div>
<div class="post-text" itemprop="text">
<p>Add an optional argument that can be used in the recursive case:</p>
<pre><code># Using * makes byte_list keyword-only, so it can't be passed by normal callers by accident
def visit(dname, pass_test_func=nothing, *, byte_list=None):           
    directory = os.listdir(dname)           

    # When not passed explicitly, initialize as empty list
    if byte_list is None:
        byte_list = []
    for file in directory:
        file_dir = os.path.join(dname, file)
        if os.path.isfile(file_dir) and file_dir.lower().endswith('.txt'):
            size = os.path.getsize(file_dir)
            if pass_test_func(size):
                byte_list.append(str(size) + ' ' + file_dir)
        elif os.path.isdir(file_dir):
            # Pass explicitly to recursive call
            visit(file_dir, pass_test_func, byte_list=byte_list)
    return byte_list
</code></pre>
<p>As an alternative, as <a href="https://stackoverflow.com/questions/47517099/how-to-use-lists-in-recursive-functions-python/47517153#comment81990314_47517099">suggested by Blorgbeard</a>, since you return <code>byte_list</code>, use that for your <code>visit</code> calls, changing only a single line in your original code:</p>
<pre><code>        visit(file_dir, pass_test_func)
</code></pre>
<p>to:</p>
<pre><code>        byte_list += visit(file_dir, pass_test_func)
</code></pre>
<p>This creates additional temporary <code>list</code>s, but that's usually not a big deal.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your function returns <code>byte_list</code>, so just append the returned value when you make your recursive call, instead of throwing it away as you currently do:</p>
<pre><code>elif os.path.isdir(file_dir):    
    byte_list += visit(file_dir, pass_test_func)
</code></pre>
</div>
<span class="comment-copy">You should know that someone put effort into a solution to your problem already: <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer">docs.python.org/3/library/os.html#os.scandir</a></span>
<span class="comment-copy">@KlausD.: Or on older Python, you can use <a href="https://pypi.python.org/pypi/scandir" rel="nofollow noreferrer">the PyPI <code>scandir</code> module</a> (which <code>os.scandir</code> was based on). On Windows, this will reduce the system call (and associated I/O) overhead from three calls per directory (check if file, check if directory, list directory) + two calls per file (check if file, get size) to just one check per directory; on Linux, it can't avoid the <code>stat</code> for the size check, but it's still a reduction to one call per directory plus one per file (the type check is provided free on the <code>DirEntry</code> object).</span>
<span class="comment-copy">@KlausD.: Mind you, in most cases, you're probably better off just using <code>os.walk</code> (which is <code>os.scandir</code> based once <code>os.scandir</code> is available), since it handles a lot of stuff for you. The whole function simplifies to <code>def visit(dname, pass_test_func=nothing): return [os.path.join(root, f) for root, _, files in os.walk(dname) for f in files if pass_test_func(os.path.getsize(os.path.join(root, f)))]</code> with <code>os.walk</code> (one-lined because this is a comment; you could easily write a proper generator function that doesn't re-<code>join</code> the <code>root</code> and <code>f</code> over and over).</span>
