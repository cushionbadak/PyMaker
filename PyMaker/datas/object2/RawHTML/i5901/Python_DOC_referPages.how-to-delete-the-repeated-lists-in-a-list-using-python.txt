<div class="post-text" itemprop="text">
<p>I  have multiple lists in a list.</p>
<pre><code>l = [[1,2,3,4,5,6],
     [1,1,3,4,5,6],
     [1,4,3,4,5,6],  
     [1,2,3,2,5,6], 
     [1,4,3,2,5,6],
     [1,2,3,2,7,6],
     [1,2,3,5,5,6],
     [1,1,3,5,5,6],
     [1,2,3,4,5,6],
     [1,7,3,4,5,6]]
</code></pre>
<p>I want delete the lists based on repeated values of sub list of( 4th and 5th) values.</p>
<p>for eg: In sub list one 4th and 5th elements are 4&amp;5.I want to check the repetition 4&amp;5 in other lists.deleting the repeated ones.
(same as for 2&amp;5,5&amp;5,4&amp;5)</p>
<p>The output i am expecting is :</p>
<pre><code>[[1,2,3,4,5,6], 
 [1,2,3,2,5,6],
 [1,2,3,2,7,6],
 [1,2,3,5,5,6]]
</code></pre>
<p>I don't want to use numpy. Because it is taking much time in while loop.
I want to use normal methods.</p>
<p>This is just example.
I have large file of data like this.
i want to use a.any() method.
How can use a.any() method for this problem.</p>
<p>Please help!!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try something like this without using any external module, with just one loop:</p>
<p>Data is :</p>
<pre><code> your_data = [[1,2,3,4,5,6],
         [1,1,3,4,5,6],
         [1,4,3,4,5,6],
         [1,2,3,2,5,6],
         [1,4,3,2,5,6],
         [1,2,3,2,7,6],
         [1,2,3,5,5,6],
         [1,1,3,5,5,6],
         [1,2,3,4,5,6],
         [1,7,3,4,5,6]]
</code></pre>
<blockquote>
<p>One line solution:</p>
</blockquote>
<pre><code>result={}
[result.__setitem__((item[3],item[4]),item) for item in your_data if (item[3],item[4]) not in result]





print(result.values())
</code></pre>
<blockquote>
<p>Detailed solution:</p>
</blockquote>
<pre><code>result={}
for item in your_data:
    if (item[3],item[4]) not in result:
        result[(item[3],item[4])]=[item]




print(result.values())
</code></pre>
<blockquote>
<p>output:</p>
</blockquote>
<pre><code>dict_values([[[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 2, 7, 6]], [[1, 2, 3, 2, 5, 6]], [[1, 2, 3, 5, 5, 6]]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>groupby</code> from the <code>itertools</code> package, and take the first element.  You will need to semi-sort the list first using the 4th and 5th elements, then group on those same elements and return the first element of each group.</p>
<pre><code>from itertools import groupby

sorted_list = sorted(l, key=lambda x: (x[3], x[4]))
out = [next(g) for k, g in groupby(sorted_list, key=lambda x: (x[3], x[4]))]
out

# returns:
[[1, 2, 3, 2, 5, 6],
 [1, 2, 3, 2, 7, 6],
 [1, 2, 3, 4, 5, 6],
 [1, 2, 3, 5, 5, 6]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This will get you the output you want.
Basically you want to keep a snapshot of the two values that you look for changing. When you see them change, you add to the new list, and update the snapshot of the two values.<br/>
I happen to use what's called a "slice" to grab both values together, since they're adjacent to each other in the sublists. And I start out by setting the slice to some illegal value to make sure it works for the first iteration through the loop.</p>
<pre><code>l = [[1,2,3,4,5,6],
     [1,1,3,4,5,6],
     [1,4,3,4,5,6],  
     [1,2,3,2,5,6], 
     [1,4,3,2,5,6],
     [1,2,3,2,7,6],
     [1,2,3,5,5,6],
     [1,1,3,5,5,6],
     [1,2,3,4,5,6],
     [1,7,3,4,5,6]]

l2 = []
col3and4 = [None, None]
for sublist in l:
    if sublist[3:5] != col3and4:
        l2.append(sublist)
        col3and4 = sublist[3:5]
print(l2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are looking for uniques, you can do:</p>
<pre><code>&gt;&gt;&gt; seen=set() 
&gt;&gt;&gt; [sl for sl in li if not ((sl[3],sl[4]) in seen or seen.add((sl[3],sl[4])))]
[[1, 2, 3, 4, 5, 6], [1, 2, 3, 2, 5, 6], [1, 2, 3, 2, 7, 6], [1, 2, 3, 5, 5, 6]]
</code></pre>
<p>If you are looking for transitions (ie, the first from a defined duplicate series), you can do:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby 
&gt;&gt;&gt; [next(g) for k, g in groupby(li, key=lambda sl: sl[3:5])]
[[1, 2, 3, 4, 5, 6], [1, 2, 3, 2, 5, 6], [1, 2, 3, 2, 7, 6], [1, 2, 3, 5, 5, 6], [1, 2, 3, 4, 5, 6]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3>You can use Pandas:</h3>
<pre><code>import pandas as pd
df = pd.DataFrame(l)
df.drop_duplcates(subset=[3, 4]).values.tolist()
</code></pre>
<p>Output:</p>
<pre><code>[[1, 2, 3, 4, 5, 6],
 [1, 2, 3, 2, 5, 6],
 [1, 2, 3, 2, 7, 6],
 [1, 2, 3, 5, 5, 6]]
</code></pre>
<h3>Or we can use Numpy:</h3>
<pre><code>import numpy as np
arr_l = np.array(l)
_, idx = np.unique(arr_l[:, 3:5], axis=0, return_index=True)
arr_l[idx].tolist()
</code></pre>
<p>Output:</p>
<pre><code>[[1, 2, 3, 2, 5, 6],
 [1, 2, 3, 2, 7, 6],
 [1, 2, 3, 4, 5, 6],
 [1, 2, 3, 5, 5, 6]]
</code></pre>
</div>
<span class="comment-copy">Why do you have <code>[1,2,3,4,5,6]</code> twice?</span>
<span class="comment-copy">There is a difference between checking for "unique values" and checking for "transitions of values."  Given the explanation of the OP and his sample output, it looks like he is more interested in capturing state transitions than unique values.</span>
<span class="comment-copy">Unfortunately this isn't a discussion forum or tutorial service. Please take the time to read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and the other links on that page.  You should invest some time working your way through <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">the Tutorial</a>, practicing the examples. It will give you an introduction to the tools Python has to offer and you may even start to get ideas for solving your problem.</span>
<span class="comment-copy">Sorry James It's Printing Mistake</span>
<span class="comment-copy">Thank you so much @Ayodhyankit Paul. It' Working as i expected.</span>
<span class="comment-copy">@Tirumala always :)</span>
<span class="comment-copy">Thank You @James</span>
<span class="comment-copy">Thank You @Gary02127</span>
<span class="comment-copy">Thank You @dawg</span>
<span class="comment-copy">Thank You @Scott Boston</span>
