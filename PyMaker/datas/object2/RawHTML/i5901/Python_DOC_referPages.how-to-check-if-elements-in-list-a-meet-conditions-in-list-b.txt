<div class="post-text" itemprop="text">
<p>I have a list of <strong>numbers</strong>:</p>
<pre><code>a = [3, 6, 20, 24, 36, 92, 130]
</code></pre>
<p>And a list of <strong>conditions</strong>:</p>
<pre><code>b = ["2", "5", "20", "range(50,100)", "&gt;120"]
</code></pre>
<p>I want to check if a number in 'a' meets one of the conditions in 'b' and if yes, put these numbers in list 'c'</p>
<p>In above case:</p>
<pre><code>c = [20, 92, 130]
</code></pre>
<p>I created this code what seems to do what I want:</p>
<pre><code>c = []
for x in a:
    for y in b:
        if "range" in y:
            rangelist = list(eval(y))
            if x in rangelist:
                c.append(x)
        elif "&gt;" in y or "&lt;" in y:
            if eval(str(x) + y):
                c.append(x)
        else:
            if x == eval(y):
                c.append(x)
</code></pre>
<p>However my list 'a' can be very big.<br/>
Is there not an easier and faster way to obtain what I want?</p>
</div>
<div class="post-text" itemprop="text">
<p>Building on @user2357112's suggestion, you can create a list of functions for all your conditions, then pass each number, to each function to determine whether the number meets any of the conditions, or not.</p>
<pre><code>In [1]: a = [3, 6, 20, 24, 36, 92, 130]

In [2]: conditions = [lambda x:x==2, lambda x:x==5, lambda x:x==20, lambda x: x in range(50, 100), lambda x: x &gt; 120]  # List of lambda functions

In [3]: output = list()

In [4]: for number in a:
   ...:     if any(func(number) for func in conditions): # Check if the number satisfies any of the given conditions by passing the number as an argument to each function
   ...:         output.append(number)         

In [5]: output
Out[5]: [20, 92, 130]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you could change <code>b</code> to hold valid conditions (when concatinated with elements from <code>a</code>) as discussed in the comments above:</p>
<pre><code>b = ["==2", "==5", "==20", "in range(50,100)", "&gt;120"]
</code></pre>
<p>You could concatinate each element of <code>a</code> with these conditions and use <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a> to check if it evaluates to <code>True</code> or <code>False</code>. This, of course, can be done in a list comprehension:</p>
<pre><code>result = [i for i in a if any(eval(str(i) + x) for x in b)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em> you want simple ,pythonic and easy to grasp forget the above ones</em></p>
<pre><code>a = [3, 6, 20, 24, 36, 92, 130]
[i for i in a if i==2 or i==5 or i==20 or i&gt;120 or 50&lt;=i&lt;=100 ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Based on previous answers, I think there could be 2 more ways.</p>
<pre><code>#1
numbers = [3, 6, 20, 24, 36, 92, 130]
conditions = [
    lambda n: n == 2,
    lambda n: n == 5,
    lambda n: n == 20,
    lambda n: n in range(50, 100),
    lambda n: n &gt; 120,
]
result = [num for num in numbers for condition in conditions if condition(num)]

#2
condition = lambda n: n in {2, 5, 20} or 50 &lt;= n &lt;= 100 or n &gt; 120
result = list(filter(condition, numbers))
</code></pre>
<p>For a really big list, you should go with example #2 because it is more memory efficient and time complexity is linear instead of quadratic-like in #1</p>
</div>
<span class="comment-copy">why are you saving string in the conditions and not integers, that would make things easier.</span>
<span class="comment-copy">Can you change <code>b</code> to be valid condition like <code>=20</code> or <code>in range(50,100)</code>?</span>
<span class="comment-copy">It seems a lot cleaner to put functions in your <code>b</code> list instead of doing a bunch of janky string manipulation and <code>eval</code>.</span>
<span class="comment-copy">Stuff like <code>lambda x: x &gt; 120</code> or <code>lambda x: 50 &lt;= x &lt; 100</code>.</span>
<span class="comment-copy">This was a fun exercise in Haskell, since it involved defining a reverse-map (which is something that's probably in Haskell stdlib but I couldn't find it) of type <code>a -&gt; [(a -&gt; b)] -&gt; [b]</code>. <a href="https://repl.it/repls/QuizzicalMonstrousTurnstone" rel="nofollow noreferrer">See my solution here</a></span>
<span class="comment-copy">Definitely like this solution more, like how the lambda is used creatively.</span>
<span class="comment-copy">Very nice solution but how do I change my list 'b' to the lambda conditions?</span>
<span class="comment-copy">@Reman I have converted all the conditions in list "b", into lambda functions, and stored them in the list "conditions".</span>
<span class="comment-copy">@GaneshTata, yes I've seen it but I don't have the possibility to have lambda function in my list "b". I have a list 'b' as in question. I have to adapt them including lambda functions.. Using list comprehension? Something like this <code>conditions = ["x:x==" + a if a.isdigit() elif "x: x in " + a if "range" in a else "a: a " + a for a in b]</code></span>
<span class="comment-copy">found it: <code>["x:x==" + a if a.isdigit() else "x: x in " + a if "range" in a else "a: a " + a for a in b]</code></span>
<span class="comment-copy">Tnx, If you take <code>a = [3, 6, 20, 24, 36, 92, 130, 180, 182, 190]</code> and <code>b = ['==2', 'in range(150,200)', '&lt;120', '180']</code> the output is wrong</span>
<span class="comment-copy"><code>180</code> is a number, not a condition. The program concatenates the two strings and Python interprets everything with value as <code>True</code>. You can check this with <code>print(not(3180))</code>.</span>
<span class="comment-copy">If I use above lists.. '130' is in result.</span>
