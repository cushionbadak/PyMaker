<div class="post-text" itemprop="text">
<p>I am using BaseManager to share a queue; and queuelistener for logging. This works fine on linux but on windows in the following code the "getting server" message is displayed but the "got server" logging message does not appear. The only line in between is a call to BaseManager.get_server(). Why? Can it be fixed?</p>
<pre><code>def server(eventq, logq):
    """ publish event queue """
    log = logging.getLogger()
    log.handlers = [QueueHandler(logq)]

    BaseManager.register('get_eventq', callable=lambda: eventq)
    m = BaseManager(address=('', config["port"]), authkey=config["authkey"])
    log.info("getting server")
    try:
        s = m.get_server()
    except:
        log.exception()
    log.info("got server")
    s.serve_forever()


def listener(eventq, logq):
    """ listener for event queue """
    log = logging.getLogger()
    log.handlers = [QueueHandler(logq)]

    log.info("starting listener")
    while True:
        p = Process(target=callback, args=(eventq.get(),))
        p.start()


def main():
    """ setup queue and listen for events
    """
    # logging queue
    log = logging.getLogger()
    logq = Queue()
    l = QueueListener(logq, *log.handlers)
    l.start()
    log.handlers = [QueueHandler(logq)]

    # server for event queue
    eventq = Queue()
    p = Process(target=server, args=(eventq, logq))
    p.start()

    # listener
    log.info("starting listener process")
    p = Process(target=listener, args=(eventq, logq))
    p.start()

    p.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure exactly where you're going wrong (concurrency can be tricky), but you're doing things which are not recommended by the logging documentation. For example, you should not assign to <code>log.handlers</code> directly, but use the <code>addHandler</code> API. Remember that Windows and Linux models for multiprocessing are different - Linux uses forking, whereas Windows doesn't. I don't think your problem is connected with logging, but more with the underlying multiprocess instantiations. The cookbook example has <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes" rel="nofollow noreferrer">an example of multiprocessing with logging</a> which uses queues, and which you may be able to adapt to your needs.</p>
</div>
<span class="comment-copy">Thanks. I am following one of the recipes there which is using the queuelistener. I am assigning to handlers directly because I want to replace the handlers with QueueHandler. If I use addHandler then the existing handlers are still there and I end up with each log message being repeated. I have discovered on the code above if I add sys.stdout.flush() after the get_server then the log message prints out correctly but no idea why!</span>
