<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; mydict = {1: {45: 'ades', 54:'adee'}, 2: {68: 'gdes'}}
&gt;&gt;&gt; curr_value = mydict[1][45]
&gt;&gt;&gt; mydict[1][45] = 'zzzz'
&gt;&gt;&gt; print (curr_value)
ades  # Expected value: zzzz
</code></pre>
<p>How come my <code>curr_value</code> is not mutating from <code>mydict</code>? I did not clone <code>curr_value</code> or anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no way to create a plain variable that "updates" itself when some other data structure is updated.  That kind of behavior can only be achieved with kind of expression, like an attribute or item lookup.  In other words, you can make an object <code>curr_value</code> so that evaluating <code>curr_value[0]</code> gives you the value of <code>mydict[1][45]</code> at that moment, or evaluating <code>curr_value.value</code> gives you the value of <code>mydict[1][45]</code> at that moment, but you cannot make it so that evaluating just plain <code>curr_value</code> gives you the value of <code>mydict[1][45]</code> at that moment.  Doing <code>curr_value = mydict[1][45]</code> <em>always</em> sets the <code>curr_value</code> to what it is at the moment you assign it, and it will not be updated later if <code>mydict[1][45]</code> changes.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>mydict = {1: {45: 'ades', 54:'adee'}, 2: {68: 'gdes'}}
curr_value = mydict[1][45]
mydict[1][45] = 'zzzz'
print (curr_value)
print(mydict)
</code></pre>
<p>Output: </p>
<pre><code>ades
{1: {45: 'zzzz', 54: 'adee'}, 2: {68: 'gdes'}
</code></pre>
<p>Your dictionary is mutable - it was mutated. The <code>curr_value</code> is a string and not mutable.</p>
<p>Midly annoing idea:</p>
<pre><code>def boll(tpl):
    return mydict[tpl[0]][tpl[1]]

mydict = {1: {45: 'ades', 54:'adee'}, 2: {68: 'gdes'}}
curr_value = (1,45)
print (boll(curr_value))
mydict[1][45] = 'zzzz'
print (boll(curr_value)) 
</code></pre>
<p>This just encapsules remembering the point inside the dict you want to reference and the funtion gets you the value of the dict at the moment you call it.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you want isn't possible because simple assignment <em>always</em> creates a new binding (i.e., binds the new object to the name on the LHS of the <code>=</code> sign). OTOH, performing a mutation doesn't create a new binding, so you can do, eg </p>
<pre><code>ref = mydict[1]
mydict[1][45] = 'zzzz'
print(ref[45]) 
</code></pre>
<p>which prints <code>zzzz</code> as desired.</p>
<p>This topic is covered nicely by Stack Overflow veteran Ned Batchelder in <a href="http://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">Facts and myths about Python names and values</a>, and summarized in <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#other-languages-have-variables" rel="nofollow noreferrer">Other languages have "variables", Python has "names"</a>.</p>
<p>Another option is to do </p>
<pre><code>mydict = {1: {45: ['ades'], 54:['adee']}, 2: {68: ['gdes']}}
ref = mydict[1][45]
mydict[1][45][0]='zzzz'
print(ref[0]) 
</code></pre>
<p>Generally it's best to avoid creating clutter like that, but sometimes that sort of thing is useful. For example, by adding an extra layer of indirection to a 2D list we can make it accessible via columns as well as via rows.</p>
<pre><code># Create the grid
rows = [[[u+v] for u in 'abcd'] for v in 'wxyz']
cols = [list(u) for u in zip(*rows)]
print(rows)
print(cols)
print()

# Mutate some grid cells
cell = rows[1][2]
cell[0] = cell[0].upper()
cell = cols[0][3]
cell[0] = cell[0].upper()

print(rows)
print(cols)
</code></pre>
<p><strong>output</strong></p>
<pre><code>[[['aw'], ['bw'], ['cw'], ['dw']], [['ax'], ['bx'], ['cx'], ['dx']], [['ay'], ['by'], ['cy'], ['dy']], [['az'], ['bz'], ['cz'], ['dz']]]
[[['aw'], ['ax'], ['ay'], ['az']], [['bw'], ['bx'], ['by'], ['bz']], [['cw'], ['cx'], ['cy'], ['cz']], [['dw'], ['dx'], ['dy'], ['dz']]]

[[['aw'], ['bw'], ['cw'], ['dw']], [['ax'], ['bx'], ['CX'], ['dx']], [['ay'], ['by'], ['cy'], ['dy']], [['AZ'], ['bz'], ['cz'], ['dz']]]
[[['aw'], ['ax'], ['ay'], ['AZ']], [['bw'], ['bx'], ['by'], ['bz']], [['cw'], ['CX'], ['cy'], ['cz']], [['dw'], ['dx'], ['dy'], ['dz']]]
</code></pre>
<hr/>
<p>At the start of this answer I stated that "simple assignment <em>always</em> creates a new binding". However, <a href="https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements" rel="nofollow noreferrer">augmented assignment</a> will perform an in-place operation when that is possible, i.e. the target is a mutable object. From the docs:</p>
<blockquote>
<p>An augmented assignment expression like <code>x += 1</code> can be rewritten as
  <code>x = x + 1</code> to achieve a similar, but not exactly equal effect. In the
  augmented version, x is only evaluated once. Also, when possible, the
  actual operation is performed in-place, meaning that rather than
  creating a new object and assigning that to the target, the old object
  is modified instead.</p>
</blockquote>
</div>
<span class="comment-copy">Strings are immutable. <code>current_value</code> does not hold a reference since it's a <code>string</code> object and not a <code>list</code>.</span>
<span class="comment-copy">Oh... is there a method to reference the point of 'ades'?</span>
<span class="comment-copy">Why are you asking about the dictionary? <code>curr_value</code> <i>doesn't</i> reference a dictionary object, and you can trivially demonstrate to yourself that the dictionary <i>has</i> changed. It references the string object that was previously, but is no longer, also referred to by the dictionary at <code>mydict[1]</code> and therefore indirectly by <code>mydict</code>. You might find this useful: <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">nedbatchelder.com/text/names.html</a></span>
<span class="comment-copy">What do you mean <i>"the point of 'ades'"</i>? Do you mean pointers? You can continue to use <code>mydict[1][45]</code>, which is what you've assigned to anyway. Assigning to <code>curr_value</code> won't change the dictionary, either! What are you actually trying to achieve?</span>
<span class="comment-copy"><code>mydict[1][45]</code> always references <i>the point of ades</i> .. if you keep [1] and [45] alive that is...</span>
<span class="comment-copy">Thank you. I understand now.</span>
<span class="comment-copy">Is there a method to reference the point of 'ades'?</span>
<span class="comment-copy">@user13123  in your case: use 'mydict[1][45]' if the value changes. that way you get whatever is stored at the moment.</span>
<span class="comment-copy">There's no need for that kind of (note!) language, and you've just made a limited version of <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>itemgetter</code></a>.</span>
<span class="comment-copy">Thanks for trying! Your concepts are too advanced for me though :(</span>
<span class="comment-copy">@jonrsharpe corrected the bollocks after looking it up - I had a less "harsh" translation stored, something along the lines of <a href="https://www.dict.cc/?s=bl%C3%B6dsinn" rel="nofollow noreferrer">dict.cc/?s=bl%C3%B6dsinn</a>. If I use <code>f = itemgetter(1,45)</code> on his dict I get a itemerror - from the docu it is used on 1dim lists to get multiples. Is there some "overload" for this usecase?</span>
