<div class="post-text" itemprop="text">
<p>I want to do is find who has the most points and output their name.</p>
<pre><code>name1 = (input("Give me a name"))
name2 = (input("Give me a name"))
name3 = (input("Give me a name"))

point1 = (input("Give me your points "+name1))
point2 = (input("Give me your points "+name2))
point3 = (input("Give me your points "+name3))

score = [point1, point2, point3]

highscore = (max(highscore))
</code></pre>
<p>However, all I can do with this program is print the highest score. How do I print the name, as well?</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest fix from here is to put them into corresponding lists:</p>
<pre><code>name_list = [name1, name2, name3]
score_list = [score1, score2, score3]

# Now, get the best score, its position in the list,
#   and the corresponding name
best_score = max(score_list)
best_idx = score_list.index(best_score)
best_name = name_list[best_idx]
</code></pre>
<p>This is not the "best" way; that would have a single list of 2-tuples, or a dictionary to hold the scores and names.  I leave that to the student, once you understand how this works.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could make a dictionary of players to their points and use <code>max</code>'s <code>key</code> argument.</p>
<pre><code># Get dictionary: dictionary = {"name1": points1, "name2": points2...}
name = max(dictionary, key = lambda name: dictionary[name])
points = dictionary[name]
</code></pre>
<p>What this does is call the <code>key</code> function to determine the value of each thing, instead of just taking their normal value.</p>
</div>
<div class="post-text" itemprop="text">
<p>A clean solution would be, if you would save the highscores in a Dictionary with Player as the key and the <code>score</code> as the value. </p>
<pre><code>import operator
x = {"PlayerA":120, "PlayerB":30, "PlayerC":40}
highest = max(x.items(), key=operator.itemgetter(1)))
print highest
&gt;('PlayerA', 120)
</code></pre>
<p>That's of course to begin with, to really retrieve efficiently retrieve the highest elements there are more sophisticated data-structures that inserts <code>sorted</code>. You could use a list with the bisect method to maintain this</p>
</div>
<div class="post-text" itemprop="text">
<p>You can zip them (like a zipper) - will truncate the result to the lenght of the shortest list:</p>
<pre><code>name_list = ["name1", "name2", "name3"]
score_list = [5,8,39,50,80] # 60 and 80 are discarded by zip as no match inname_list

zipped =  zip(score_list,name_list)
</code></pre>
<p>If you sort this list of tuples it will sort the list by each tuples first param, if they are identical it will sort those 2 by the second tuple param.:</p>
<pre><code>sortZip = sorted(zipped) # https://docs.python.org/3/library/functions.html#sorted

print(sortZip)
</code></pre>
<p>It is sorted ascending (you can specify otherwise, lookup sorted) - you get the last one by <code>sortZip[-1]</code> a list comprehension.</p>
<p>Output via:</p>
<pre><code># list[-1] == last element of the list
# tuple[0] == 1st element, tuple[1] == 2nd element
print("Max: ", sortZip[-1][0] , " points done by " , sortZip[-1][1])  
</code></pre>
<p>gives: </p>
<pre><code>Max:  39  points done by  name3
</code></pre>
</div>
<span class="comment-copy">sure just make them tuples instead or even dictionaries</span>
<span class="comment-copy">You are not using <i>arrays</i> you are using a <code>list</code> object.</span>
<span class="comment-copy">Please don't take this as an offence but maybe it would be wiser to first work through a good beginner's book instead of trying to be taught on SO.</span>
