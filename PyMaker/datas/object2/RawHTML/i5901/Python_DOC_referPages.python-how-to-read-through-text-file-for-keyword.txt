<div class="post-text" itemprop="text">
<p>**This is a practice application</p>
<p>I have a text file containing a id &amp; a password. Each pair is on separate lines like so:</p>
<pre><code>P1 dogs
P2 tree
</code></pre>
<p>I then have 2 functions to allow the user the add another id/password or update the password by selecting an ID then the new password. (I have removed the save functionality so I don't create loads of pairs when testing)</p>
<p>The question is how would I write a check function so that when the user is creating a new pair.. it checks if the id/password already exists. Then on the update password function, it only checks if the password exists?</p>
<p><strong>My code so far:</strong></p>
<pre><code>#Keyword check
def used_before_check(keyword, fname):
    for line in open(fname, 'r'):
        login_info = line.split()
        username_found = False
        for line in login_info:
            if keyword in line:
                username_found == True

            if username_found == True:
                return True
            else:
                return False

# New password function
def new_password():
    print("\nCreate a new password")
    new_id_input = input("Please give your new password an ID: ")
    new_password_input = input("Please enter your new password: ")

    print("ID in use?", used_before_check(new_id_input, txt_file))
    print("Password in use?", used_before_check(new_password_input, txt_file))

#Change password function
def change_password():
    print("\nChange password")
    id_input = input("Enter the ID of the password you'd like to change: ")
    password_input = input("Now enter the new password: ")

    print("password_input",used_before_check(password_input, txt_file))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way would be to use JSON:</p>
<pre><code>import json
import os

def new_password(user, password, password_dict={}):
    if user in password_dict:
        password_dict[user] = password # change password
    else:
        password_dict[user] = password # new password
    return password_dict

def read_passwords(filename):
    if not os._exists(filename):
        return {}
    with open(filename, 'r') as f:
        s = f.read()
    return json.loads(s)

password_filename = 'my_passwords.json'
password_dict = read_passwords(password_filename)
user = ''
while not user == 'q':
    user = input('user:')
    password = input('new password:')
    if user != 'q':
        password_dict = new_password(user, password, password_dict)

s = json.dumps(password_dict)
with open(password_filename, 'w') as f:
    f.write(s)
</code></pre>
<p>Not that I have included a seemingly unnecessary if clause in <code>new_password</code>. This is just for you that you can easily enter your own code what you want to do (maybe different) in each case. </p>
</div>
<div class="post-text" itemprop="text">
<p>Create a function to store your usernames/passwords in a dictionary, then you can easily check it for existing usernames/passwords</p>
<p>To store in dictionary:</p>
<pre><code>def process_file(fname):

    username_pw_dict = {}

    for line in open(fname, 'r'):
        login_info = line.rstrip().split()

        username = login_info[0]
        pw = login_info[1]
        username_pw_dict[username] = pw
    return username_pw_dict

username_pw_dict = process_file(fname)
</code></pre>
<p>Then you can check for existing usernames or passwords like this:</p>
<pre><code>if new_username in username_pw_dict:
    print("username already exists")

if new_pw in username_pw_dict.values():
    print("password already exists")    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you are reading the file, make a dictionary with all the IDs as its keys.
In next step, reverse the dictionary key-value pair so all its values (i.e all passwords) become its keys.</p>
<p>Finally, when you enter a new ID and password, just check those dictionaries to know if they already exist. You may refer to this below code:</p>
<pre><code>dict_ids = {1 : "one", 2:"two", 3:"three"};


dict_pwds = {}
for key, value in dict_ids.items():
    for string in value:           
        dict_pwds[value] = key;


print "dict_ids ", dict_ids;
print "dict_pwds ", dict_pwds;


if 'myid' in dict_ids.keys():
  print "ID exist! "
else:
  print "New ID"

if 'mypwd' in dict_pwds.keys():
  print "Password exist! "
else:
  print "New Password"
</code></pre>
</div>
<span class="comment-copy">Your code check only the first line, I don't get why you want to check the password too. If it's a password then you could use the same for multiple profiles. I'd use a dictionary with id as key or two sets if you want to check for the id or password. Please be explain better you context</span>
<span class="comment-copy">You can make this much easier on yourself if you use a dictionary to store IDs and passwords. Then use the <a href="http://docs.python.org/3/library/json.html" rel="nofollow noreferrer"><code>json</code> module</a> to store/retrieve the data. But besides that (and besides the problems with storing passwords in plaintext), why wouldn't you allow duplicate passwords? Not doing so makes it much easier for attackers to hijack other accounts since they can easily find out which passwords are in use, and they don't have to hack your database at all for it...</span>
<span class="comment-copy">BTW, I hope this is just a toy program, and that you aren't storing plaintext passwords for anything of importance: that's extremely poor security.</span>
<span class="comment-copy">Yeah I've been tasked to learn python so this is my first application.. it's just a little password checker to test the strength of a password. I don't want a user to use the same password. The idea is the user adds a bunch of shit passwords then it flags the shit ones... then they have to go in to edit them</span>
<span class="comment-copy"><code>for line in login_info:</code> is a bit misleading. It's confusing to re-use <code>line</code> like that. That loop iterates over the list of words in the line you just read, but it only looks at the first word, since you <code>return</code> after checking that first word. You don't need a loop: you should just be checking the second word on the line.</span>
<span class="comment-copy">Where would I call the stuff underneath the functions?</span>
<span class="comment-copy">What do you mean with "stuff underneath the functions"?</span>
<span class="comment-copy">password_filename = 'my_passwords.json'</span>
<span class="comment-copy">That is the main function (in python you do not need to wrap the main function but instead just put it anywhere with no indentation).</span>
<span class="comment-copy">You can just copy paste my whole code and it will work as you want it to.</span>
