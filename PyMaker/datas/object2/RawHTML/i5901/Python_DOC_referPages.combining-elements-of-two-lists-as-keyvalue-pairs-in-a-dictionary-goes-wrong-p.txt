<div class="post-text" itemprop="text">
<p>I have two lists:</p>
<pre><code>lists1 = [(0, 75), (75, 38), (38, 86), (86, 119), (119, 85), (85, 44), (44, 65), (65, 127)]
list2 = [12.0, 16.0, 17.0, 6.0, 31.0, 45.0, 13.0, 27.0]
</code></pre>
<p>Both has same length (8)</p>
<pre><code>list_dict = dict(zip(list1,list2))
</code></pre>
<p>Reports</p>
<pre><code>{(0, 75): 12.0, (119, 85): 31.0, (86, 119): 6.0, (38, 86): 17.0, (44, 65): 13.0, (85, 44): 45.0, (75, 38): 16.0, (65, 127): 27.0}
</code></pre>
<p>What i am looking for is,</p>
<pre><code>{(0, 75): 12.0, (75, 38): 16.0,(38, 86): 17.0,(86, 119): 6.0,(119, 85): 31.0,  (85, 44): 45.0, (44, 65): 13.0 , (65, 127): 27.0}
</code></pre>
<p>How to do it? Why the index has changed?</p>
</div>
<div class="post-text" itemprop="text">
<p>By index do you mean ordering? <code>dict</code> does not preserve ordering. If you need ordered dictionary use <code>collections.OrderedDict</code>.</p>
<pre><code>from collections import OrderedDict
list_dict = OrderedDict(zip(lists1,list2))
</code></pre>
<p>That gave me:</p>
<pre><code>&gt;&gt;&gt; list_dict

OrderedDict([((0, 75), 12.0),
             ((75, 38), 16.0),
             ((38, 86), 17.0),
             ((86, 119), 6.0),
             ((119, 85), 31.0),
             ((85, 44), 45.0),
             ((44, 65), 13.0),
             ((65, 127), 27.0)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may notice that the <code>zip</code> matches your elements just fine. So that only leaves the <code>dictionary</code> to contain some problem. And that is in fact the crux of your problem here. </p>
<p><strong>Dictionaries are not Ordered!</strong> And that's why there is a chance that when you print out your <code>dictionary</code>, the order <strong>may</strong> change.</p>
<p>So just use an <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>OrderedDict</code></a> , and it should solve your problems.</p>
<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; d = OrderedDict(zip(l1, l2))
&gt;&gt;&gt; d
=&gt; OrderedDict([((0, 75), 12.0), ((75, 38), 16.0), ((38, 86), 17.0), ((86, 119), 6.0), ((119, 85), 31.0), ((85, 44), 45.0), ((44, 65), 13.0), ((65, 127), 27.0)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is no order on the indices of dictionaries: <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#dictionaries</a></p>
<blockquote>
<p>It is best to think of a dictionary as an unordered set of key: value pairs [...]</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Performing <code>list(d.keys())</code> on a dictionary returns a list of all the keys used in the dictionary, in arbitrary order (if you want it sorted, just use <code>sorted(d.keys())</code> instead)</p>
</blockquote>
<p>So just sort the keys when you need to traverse them in that order:</p>
<pre><code>&gt;&gt;&gt; for k in sorted(list_dict.keys()): print k,list_dict[k]
... 
(0, 75) 12.0
(38, 86) 17.0
(44, 65) 13.0
(65, 127) 27.0
(75, 38) 16.0
(85, 44) 45.0
(86, 119) 6.0
(119, 85) 31.0
</code></pre>
</div>
<span class="comment-copy">Dicts do not promise to preserve order.</span>
<span class="comment-copy">By index do you mean ordering? <code>dict</code> does not preserve ordering. If you need ordered dictionary use <code>collections.OrderedDict</code>.</span>
<span class="comment-copy">@Tuwuh That works! I am not aware of it. You can update it as an answer</span>
