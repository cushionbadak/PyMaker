<div class="post-text" itemprop="text">
<p>I am having a question that is very similar to <a href="https://stackoverflow.com/questions/28656736/using-scikits-labelencoder-correctly-across-multiple-programs">this topic</a> but I want to reuse the <code>StandardScaler</code> instead of <code>LabelEncoder</code>. Here's what I have done:</p>
<pre><code># in one program
dict = {"mean": scaler.mean_, "var": scaler.var_}
# and save the dict 


# in another program
# load the dict first
new_scaler = StandardScaler()
new_scaler.mean_ = dict['mean'] # Hoever it doesn't work
new_scaler.var_ = dict['var'] # Doesn't work either...
</code></pre>
<p>I also tried <code>set_params</code> but it can only change these parameters: <code>copy</code>, <code>with_mean</code>, and <code>with_std</code>. </p>
<p>So, how can I re-use the scaler I got in program one? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Just <a href="https://docs.python.org/3/library/pickle.html" rel="noreferrer">pickle</a> <em>the whole thing</em>.</p>
<p>Follow the official <a href="http://scikit-learn.org/stable/modules/model_persistence.html" rel="noreferrer">docs</a>.</p>
<p>You can either use python's standard-pickle from the first link or the specialized joblib-pickle mentioned in the second link (which i recommend; often more efficient, although not that important for this simple kind of object = scaler):</p>
<pre><code>from sklearn.externals import joblib

new_scaler = StandardScaler()
# ...fit it... do something ...

joblib.dump(new_scaler , 'my_scaler.pkl')     # save to disk

loaded_scaler = joblib.load('my_scaler.pkl')  # load from disk
</code></pre>
<p>If you by any chance want to store your sklearn-objects in databases like MySQL, MongoDB, Redis and co., the above example using file-based storage won't work of course.</p>
<p>The easy approach then: use python-pickle's <a href="https://docs.python.org/3/library/pickle.html#pickle.dumps" rel="noreferrer">dumps</a> which will dump to a bytes-object (ready for most DB-wrappers).</p>
<p>For the more efficient joblib, you have to use python's <a href="https://docs.python.org/3/library/io.html#binary-i-o" rel="noreferrer">BytesIO</a> to use it in a similar way (as the method itself is file-based, but can be used on file-like objects).</p>
</div>
