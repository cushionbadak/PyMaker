<div class="post-text" itemprop="text">
<p>New to python and regular expressions, I have been trying to find a way that I can parse a sentence so that I can take parts of it and assign them to their own variables.</p>
<p><strong>An example sentence is</strong>: Laura Compton, a Stock Broker from Los Angeles, California</p>
<p>My objective is to have: name = "Laura Compton" ( this one is the easy one, I can target the anchor link no problem), position = "Stock Broker", city = Los Angeles, state = California</p>
<p>All of the sentences I need to iterate over follow the same pattern, name is always in the anchor tag, the position always follows the , after the closing anchor, sometimes its uses "a" or "an" so I would like to strip those off. The city and state always follow the word "from" .</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>import re
s = "Laura Compton, a Stock Broker from Los Angeles, California"
new_s = re.findall('^[a-zA-Z\s]+|(?&lt;=a\s)[a-zA-Z\s]+(?=from)|(?&lt;=an\s)[a-zA-Z\s]+(?=from)|(?&lt;=from\s)[a-zA-Z\s]+(?=,)|(?&lt;=,\s)[a-zA-Z\s]+$', s)
headers = ['name', 'title', 'city', 'state']
data = {a:b for a, b in zip(headers, new_s)}
</code></pre>
<p>Output:</p>
<pre><code>{'city': 'Los Angeles', 'state': 'California', 'name': 'Laura Compton', 'title': 'Stock Broker '}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use named groups within patterns to capture substrings, which makes referring to them easier and the code doing so slightly more readable:</p>
<pre><code>import re

data = ['Laura Compton, a Stock Broker from Los Angeles, California',
        'Miles Miller, a Soccer Player from Seattle, Washington']

pattern = (r'^(?P&lt;name&gt;[^,]+)\, an? (?P&lt;position&gt;.+) from '
           r'(?P&lt;city&gt;[^,]+)\, +(?P&lt;state&gt;.+)')

FIELDS = 'name', 'position', 'city', 'state'

for sentence in data:
    matches = re.search(pattern, sentence)
    name, position, city, state = matches.group(*FIELDS)
    print(', '.join([name, position, city, state]))
</code></pre>
<p>Output produced from sample <code>data</code>:</p>
<pre class="lang-none prettyprint-override"><code>Laura Compton, Stock Broker, Los Angeles, California
Miles Miller, Soccer Player, Seattle, Washington
</code></pre>
<p>A.M. Kuchling wrote a good tutorial titled <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer"><em>Regular Expression HOWTO</em></a> you ought to check-out.</p>
</div>
<span class="comment-copy">Might be smart to compile here if <code>pattern</code> is being used repetitively.</span>
<span class="comment-copy">@BradSolomon: Not so much because the <code>re</code> module automatically caches complied versions of the most recently used regexesâ€”so how often one is used is often irrelevant.</span>
<span class="comment-copy">I guess you are right @martineau.  So really the only reason in 3.x to use compile is the second reason given <a href="https://stackoverflow.com/a/47269110/7954504">here</a>?</span>
<span class="comment-copy">@Brad: I suppose so, Personally I seldom ever bother because it literally usually isn't worth the trouble. Compiling regexes is usually a very insignificant part of the overall processing being done, so even if it didn't automatically cache them and it happened many times I wouldn't be too worried about it.</span>
