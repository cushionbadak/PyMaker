<div class="post-text" itemprop="text">
<p>In Python3 it's possible to add the type to the arguments of a function:</p>
<pre><code>def foo(bar: str = "default") -&gt; str:
    """
    @param bar: a textual value
    """
    return "test"
</code></pre>
<p>Now I got two questions. First, how can you do that for a <strong>callback function</strong>? Meaning, how to define the signature of that callback in the function header?</p>
<pre><code>def foo(callback) -&gt; str:
    """
    @param callback: function(value: str) -&gt; str
    """
    # calculate some intermediate stuff
    my_var = ...    
    return callback(my_var)
</code></pre>
<p>Second, how to do that <strong>for tuples</strong>. This would include the defining that the value is of type tuple and should have two values (no triple etc.).</p>
<pre><code>def foo(value) -&gt; str:
    """
    @param value: tuple of strings
    """

    v1, v2 = value
    return v1 + v2
</code></pre>
<p>Thanks for your comments and answers.</p>
</div>
<div class="post-text" itemprop="text">
<p>To specify the signature of your callback function, you can use <a href="https://docs.python.org/3/library/typing.html#typing.Callable" rel="nofollow noreferrer">Callable</a>, like this:</p>
<pre><code>from typing import Callable


def foo(callback: Callable[[str], str]) -&gt; str:
    # calculate some intermediate stuff
    my_var = '...'
    return callback(my_var)
</code></pre>
<p>For a <a href="https://docs.python.org/3/library/typing.html#typing.Tuple" rel="nofollow noreferrer">tuple</a> of two strings, you can use:</p>
<pre><code>from typing import Tuple


def foo(value: Tuple[str, str]) -&gt; str:
    v1, v2 = value
    return v1 + v2
</code></pre>
</div>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">docs.python.org/3/library/typing.html</a></span>
<span class="comment-copy">A callback is a callable</span>
<span class="comment-copy">but a callback must satisfy a signature in which is needs to be invoked. See example above.</span>
<span class="comment-copy">In your example callback annotation would be <code>typing.Callable[[str], str]</code></span>
<span class="comment-copy">One more problem: if you define a static method inside a class whereas that method has arguments of the same type/class, then that type is unknown ...</span>
