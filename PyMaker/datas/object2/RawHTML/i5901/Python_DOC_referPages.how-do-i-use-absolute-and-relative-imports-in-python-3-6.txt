<div class="post-text" itemprop="text">
<p>I have a python project/library called "slingshot" with the following directory structure:</p>
<pre><code>slingshot/
    __init__.py
    __main__.py
    build.py
    deploy.py
    util/
        __init__.py
        prepare_env.py
        cdn_api.py
</code></pre>
<p>From <code>__main__.py</code> I would like to import functions from <code>util/prepare_env.py</code>.</p>
<p>I would like to ensure that <code>util</code> refers to the <code>util</code> I have in my project, and not some other <code>util</code> library that may be installed somewhere.</p>
<p>I tried <code>from .util import prepare_env</code> but I get an error.</p>
<p><code>from util import prepare_env</code> seems to work, but doesn't address the ambiguity of "util".</p>
<p>What am I doing wrong?</p>
<hr/>
<p><code>__main__.py</code> is as follows:</p>
<pre><code>import os
from .util import prepare_env

if __name__ == '__main__':
    if 'SLINGSHOT_INITIALIZED' not in os.environ:
        prepare_env.pip_install_requirements()
        prepare_env.stub_travis()
        prepare_env.align_branches()
        os.environ['SLINGSHOT_INITIALIZED'] = 'true'
</code></pre>
<p>When I type <code>python3 ./slingshot</code> I get the following error:</p>
<pre><code>  File "./slingshot/__main__.py", line 2, in &lt;module&gt;
    from .util import prepare_env
ImportError: attempted relative import with no known parent package
</code></pre>
<p>When I type <code>python3 -m ./slingshot</code> I get the following error:</p>
<pre><code>/usr/local/opt/python3/bin/python3.6: Relative module names not supported
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>__main__.py</code> modules in a package make the module run as a script when you use the <code>-m</code> command line switch. That switch takes a <em>module name</em>, not a path, so drop the <code>./</code> prefix:</p>
<pre><code>python3 -m slingshot
</code></pre>
<p>The current working directory is added to the start of the module search path so <code>slingshot</code> is found first, no need to give a relative path specification here.</p>
<p>From the <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-m" rel="nofollow noreferrer"><code>-m</code> switch documentation</a>:</p>
<blockquote>
<p>Search <code>sys.path</code> for the named module and execute its contents as the <code>__main__</code> module.</p>
<p>Since the argument is a <em>module</em> name, you must not give a file extension (<code>.py</code>). The module name should be a valid absolute Python module name[.]</p>
<p>[...]</p>
<p>As with the <code>-c</code> option, the current directory will be added to the start of <code>sys.path</code>.</p>
</blockquote>
</div>
<span class="comment-copy">Please share the error you get, and how you start your <code>__main__.py</code> script.</span>
<span class="comment-copy">You need to run <code>python3 -m slingshot</code> (no <code>./</code> prefix).</span>
