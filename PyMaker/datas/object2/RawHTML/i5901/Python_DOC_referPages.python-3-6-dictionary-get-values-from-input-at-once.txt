<div class="post-text" itemprop="text">
<p>I'm learning python 3.6 since a few weeks and stumbled in a <a href="https://www.python-course.eu/python3_dictionaries.php" rel="nofollow noreferrer">tutorial</a>
over the morse dictionary example.</p>
<p>There is a dictionary like:</p>
<pre><code>morse = {
"A" : ".-", 
"B" : "-...", 
"C" : "-.-.", 
"D" : "-..",
...
...}
</code></pre>
<p>With my following code it's possible to enter one letter and get at stdout the matching morse code:</p>
<pre><code>while 1:
    entry = input("letter: ")
    if entry in morse:
        result = morse[entry]
        print(result)
</code></pre>
<p>same behaviour with:</p>
<pre><code>while 1:
    entry = input("letter: ")
    for i in entry:
    print(morse[entry])
</code></pre>
<p>What I want is to input complete words or sentences and get the morse code at stdout for each letter which was entered in one line</p>
<pre><code>letter: ABC
.-,-...,-.-.
</code></pre>
<p>I thought the following might be work (but it does not..). </p>
<pre><code> #result is new dic for the resulting key:values
  result = {}
  while 1:
      entry = input("letter: ")
      if entry in morse:
          result = morse[entry]
          print(result)
      else:
          for i in entry:
              i = entry.split()
              print(morse[i])
</code></pre>
<p>which results in error, don't care if I input <code>AB</code> or <code>A B</code> (<code>.split()</code> the default separator is \w, I think)</p>
<pre><code>TypeError: unhashable type: 'list'
</code></pre>
<p>I also tried if I can get on with dict.get() or dict.update().
I think there must be a simple way to do this, or? ;) 
Is the goal to iterate the input?</p>
<p>I appreciate any help</p>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't need the split or the if statement that you have. Check to see if this works for you:</p>
<pre><code>while 1:
    entry = input("letters: ")
    for i in entry:
        if i in morse:
            print(morse[i])
</code></pre>
<p>If you want all of the letters for a loop on the same line you can append them to a list or add them to an empty string and then print that at the end of the loop like this:</p>
<pre><code>while 1:
    result = ""
    entry = input("letters: ")
    for i in entry:
        if i in morse:
            result += morse[i]
    print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; morse = {
... "A" : ".-", 
... "B" : "-...", 
... "C" : "-.-.", 
... "D" : "-.."}
&gt;&gt;&gt; print(','.join(morse[x] for x in input() if x in morse))
AXBC
.-,-...,-.-.
</code></pre>
<p>(use <code>raw_input</code> in Python 2)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer">dict.get()</a> which basically is: dict.get(value-by-key,value-if-not-found). The value if-not-found can be an empty string <code>""</code></p>
<pre><code>morse = {
"A" : ".-", 
"B" : "-...", 
"C" : "-.-.", 
"D" : "-.."}

myinp = "ABCA2"

print(','.join(morse.get(i,'') for i in myinp))
</code></pre>
<p>Returns:</p>
<pre><code>'.-,-...,-.-.,.-,'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps:</p>
<pre><code>morse = {
  "A" : ".-",
  "B" : "-...",
  "C" : "-.-.",
  "D" : "-.."
}

word = input("word:")

print(','.join(morse[letter] for letter in word if letter in morse))
</code></pre>
<p>By way of explanation, the code inside the <code>print</code> statement does the following:</p>
<ol>
<li>Iterates over the input string </li>
<li>For any key
that exists in <code>morse</code>, returns the matching value </li>
<li>Builds up all returned
values into a list </li>
<li>Joins the list elements (morse characters) with
commas</li>
</ol>
</div>
<span class="comment-copy">You shouldn't need the split. If entry is a string, your for loop should loop through each character in the string one at a time setting i to that character.</span>
<span class="comment-copy">OMG so many usefull answers...:) thx, this is good enough.</span>
<span class="comment-copy">Good enough but a lot of unnecessary code. Have a look at dict.get() function. :)</span>
<span class="comment-copy">Hear hear.  This is close to the OP's code, but there are better ways to do this in Python for sure!</span>
<span class="comment-copy">I agree that there are better ways of doing this, but since peep_durple stated that they are going through a tutorial, I wanted to make as few changes to their code as possible. No point in overloading them with stuff they haven't learned yet.</span>
<span class="comment-copy">Good point!  Might be less than helpful at this stage.</span>
<span class="comment-copy">I think it's worth mentioning that OP wanted the list elements comma-separated.</span>
<span class="comment-copy">@MattMorgan Good point, updated.</span>
<span class="comment-copy">Nice.  Now you and I can hang out here in the also-rans... :)</span>
<span class="comment-copy">dict.get(key[,default]) like @"Anton vBR" described is a very nice solution.</span>
<span class="comment-copy">For the record, the <code>.join()</code> accepts a generator so you can remove the brackets <code>[]</code>inside join.</span>
<span class="comment-copy">Right!  I forgot about that.  Awesome.</span>
