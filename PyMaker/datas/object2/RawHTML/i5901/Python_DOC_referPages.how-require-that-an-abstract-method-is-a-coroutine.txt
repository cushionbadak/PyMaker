<div class="post-text" itemprop="text">
<p>How can I require that an abstract base class implement a specific method as a coroutine. For example, consider this ABC:</p>
<pre><code>import abc

class Foo(abc.ABC):
    @abc.abstractmethod
    async def func():
        pass
</code></pre>
<p>Now when I subclass and instantiate that:</p>
<pre><code>class Bar(Foo):
    def func():
        pass

b = Bar()
</code></pre>
<p>This succeeds, although <code>func</code> is not <code>async</code>, as in the ABC. What can I do so that this only succeeds if <code>func</code> is <code>async</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You may use <code>__new__</code> and check if and how a child class has override parent's coros. </p>
<pre><code>import asyncio
import abc
import inspect


class A:    

    def __new__(cls, *arg, **kwargs):
        # get all coros of A
        parent_coros = inspect.getmembers(A, predicate=inspect.iscoroutinefunction)

        # check if parent's coros are still coros in a child
        for coro in parent_coros:
            child_method = getattr(cls, coro[0])
            if not inspect.iscoroutinefunction(child_method):
                raise RuntimeError('The method %s must be a coroutine' % (child_method,))

        return super(A, cls).__new__(cls, *arg, **kwargs)

    @abc.abstractmethod
    async def my_func(self):
        pass


class B(A):

    async def my_func(self):
        await asyncio.sleep(1)
        print('bb')


class C(A):

    def my_func(self):
        print('cc')

async def main():
    b = B()
    await b.my_func()

    c = C()  # this will trigger the RuntimeError
    await c.my_func()


loop = asyncio.get_event_loop()
loop.run_until_complete(main())
</code></pre>
<h2>Caveats</h2>
<ul>
<li>a child class may override <code>__new__</code> as well to suppress this constraint</li>
<li><p>not only <code>async</code> may be awaited. For example</p>
<pre><code>async def _change_in_db(self, key, value):
    # some db logic
    pass

def change(self, key, value):
    if self.is_validate(value):
        raise Exception('Value is not valid')
    return self._change_in_db(key, value)  
</code></pre>
<p>it's ok to call <code>change</code> like</p>
<pre><code>await o.change(key, value)
</code></pre>
<p>Not to mention <code>__await__</code> in objects, other raw Futures, Tasks...</p></li>
</ul>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/36076619/test-if-function-or-method-is-normal-or-asynchronous">Test if function or method is normal or asynchronous</a></span>
<span class="comment-copy">That question is about how to test, which is only part of the solution. I want to do this using an abstract base class.</span>
<span class="comment-copy">You have to define <code>async def func()</code> again in class <code>Bar</code>. <code>@abc.abstractmethod</code> does not take in considerate if <code>func()</code> is async or not.</span>
<span class="comment-copy">Yes, I understand that. I'm asking if there is a way to make this work, short of writing a custom meta class.</span>
<span class="comment-copy">Testing function <code>func()</code> inside class <code>__init__()</code> is a way but it is not what you want!</span>
<span class="comment-copy">Thanks, that's very useful, both the solution and the caveats!</span>
<span class="comment-copy">I think it's important to add that passing <code>*args</code> and <code>**kwargs</code> to <code>__new__</code> instead of <code>__init__</code> isn't recommended. as Python 3.3+ will most likely throw an error if you do so.</span>
<span class="comment-copy">AFAIR <a href="https://docs.python.org/3/reference/datamodel.html#object" rel="nofollow noreferrer">docs.python.org/3/reference/datamodel.html#object</a>.<code>__new__</code> can accept arguments other than the first class (3.3+ doesn't throw any error), <code>__new__</code> is a function like any other so why wouldn't is work. The <code>__init__</code> is initlializer of an object, while here is the approach that uses class creation - such a different things.</span>
