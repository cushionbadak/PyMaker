<div class="post-text" itemprop="text">
<p>I want to save all the traceback of all the exceptions from every failed test I run to an external file.
Instead of using try and except in every test i would like to use the tearDown of unittest so it will be more generic.</p>
<p>something like:</p>
<pre><code>import traceback
import unittest

class SomeTestCase(unittest.TestCase):
    def setUp(self):
        pass

    def test_some_test(self):
        self.assertTrue(False)

    def tearDown(self):
        with open(logger.txt, 'a') as doc:
            doc.write(traceback.format_exc())
</code></pre>
<p>the problem is that the exception that you get in the test_some_test cant be called with traceback in the teardown (the tracebacke return None)</p>
<p>any suggestion? </p>
</div>
<div class="post-text" itemprop="text">
<p>So after I went over a big piece of the unittest code I found a solution!</p>
<p>The <code>TestCase</code> class has an <code>_outcome</code> attribute.<br/>
The <code>_outcome</code> has a list type attribute called <code>errors</code>.<br/>
<code>errors[0][1]</code> is a tuple that is exactly like the <code>sys.exc_info()</code> output that contains the traceback.<br/>
So now that I have this tuple that I can use in <code>traceback.format_exception()</code> just like <code>traceback.format_exc()</code> uses it and <strong>problem solved</strong>.</p>
<pre><code>def tearDown(self):
    try:
        etype, value, tb = self._outcome.errors[0][1]
        trace = ''.join(traceback.format_exception(etype=etype, value=value, tb=tb, limit=None))
        date = '{date}\n'.format(date=str(datetime.datetime.now()))
        name = '\n' + self._testMethodName + '-\n'
        with open(self.logger, 'a') as doc:
            doc.write(name + date + trace)
    except:
        pass
</code></pre>
</div>
<span class="comment-copy">All exceptions are <i>already</i> recorded, on the <code>TestResult</code>; see <a href="https://docs.python.org/3/library/unittest.html#unittest.TestResult.addFailure" rel="nofollow noreferrer"><code>TestResult.addFailure()</code></a>.</span>
<span class="comment-copy">Yes, <code>_outcome</code> is the current <code>TestResult</code> instance.</span>
<span class="comment-copy">Personally, I'd handle this at the runner level however.</span>
