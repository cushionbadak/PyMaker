<div class="post-text" itemprop="text">
<p>Following can be used to add a slice to append to front of list. </p>
<pre><code>&gt;&gt;&gt; a = [5,6]
&gt;&gt;&gt; a[0:0] = [1,2,3]
&gt;&gt;&gt; a
[1,2,3,5,6]
</code></pre>
<p>what slice to use to append to the end of list. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you really want to use slice, you can use the length of a:</p>
<pre><code>a = [5, 6]
a[len(a):] = [1, 2, 3]
a
</code></pre>
<h3>output:</h3>
<pre><code>[5, 6, 1, 2, 3]
</code></pre>
<p>But the simplest is to directly extend <code>a</code>:</p>
<pre><code>a = [5, 6]
a += [1, 2, 3]   # or a.extend([1, 2, 3])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; a[len(a):] = [4, 5, 6]
&gt;&gt;&gt; a
[1, 2, 3, 4, 5, 6]
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; a += [4, 5, 6]
&gt;&gt;&gt; a
[1, 2, 3, 4, 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have got short answer from Jeevaa and Reblochon Masque but if you want to use for loop then try this:</p>
<pre><code>a = [5,6]
b = [1,2,3]
for val in b[::-1]:#Reverse b and insert it to a
   a.insert(0,val)
print(a)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[1,2,3,5,6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think you should consider <code>extend()</code>:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; a.extend([4, 5, 6])
&gt;&gt;&gt; a
[1, 2, 3, 4, 5, 6]
</code></pre>
<blockquote>
<p>Both <code>+</code> and <code>+=</code> operators are defined for list, which are semantically
  similar to extend.</p>
<p><code>list + list2</code> creates a third list in memory, so you can return the
  result of it, but it requires that the second iterable be a list.</p>
<p><code>list += list2</code> modifies the list in-place (it is the in-place operator,
  and lists are mutable objects, as we've seen) so it does not create a
  new list. It also works like extend, in that the second iterable can
  be any kind of iterable.</p>
</blockquote>
<p><strong>Time Complexity</strong></p>
<ul>
<li>Append has constant time complexity, <code>O(1)</code>.</li>
<li>Extend has time complexity, <code>O(k)</code>.</li>
</ul>
<blockquote>
<p>Iterating through the multiple calls to append adds to the complexity,
  making it equivalent to that of extend, and since extend's iteration
  is implemented in C, it will always be faster if you intend to append
  successive items from an iterable onto a list.</p>
</blockquote>
<p>â†³ <a href="https://stackoverflow.com/q/252703/499581">More Information</a></p>
</div>
<span class="comment-copy">Examples of replacing <code>list</code> methods with slicing are <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer">given in the tutorial for many methods</a>.</span>
<span class="comment-copy">But isn't the slice method faster compared to +=</span>
<span class="comment-copy">@PiyushDivyanakar: The <code>+=</code> is basically guaranteed to be faster (slicing operations involve temporary <code>list</code> objects, and the surprisingly expensive <code>len</code> call). <code>+=</code> is more readable, and the fastest option available.</span>
<span class="comment-copy">@ShadowRanger: Although if it's a non-local variable <code>extend()</code> is probably better. <a href="https://stackoverflow.com/a/24261311/499581">stackoverflow.com/a/24261311/499581</a></span>
<span class="comment-copy">@l'L'l: True, though on Py3, you can explicitly declare the variable <code>nonlocal</code> and <code>+=</code> will work. Cases where it still won't work include when the <code>list</code> in question is part of a <code>tuple</code>; <code>mytuple = ([], []); mytuple[0] += [1,2,3]</code> is an error, while calling <code>extend</code> is fine (because it doesn't attempt to reassign <code>mytuple[0]</code>).</span>
