<div class="post-text" itemprop="text">
<p>So in my algorithm Im using a variable to store some graph nodes. But I want to make it as an user input.</p>
<pre><code>parents = {'N1': ['N2', 'N3', 'N4'], 'N3': ['N6', 'N7'], 'N4': ['N3'], 'N5': ['N4', 'N8'], 'N6': ['N13'], 'N8': ['N9'], 'N9': ['N11'], 'N10': ['N7', 'N9'], 'N11': ['N14'], 'N12': ['N5']}
</code></pre>
<p>The code above should look like: </p>
<pre><code>parents = list(input("Enter vertices:"))
</code></pre>
<p>But this only makes a list. I need a dict of lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can convert a string that represents a Python literal into a proper Python object using the <code>ast</code> module's <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>literal_eval</code></a>. From the docs:</p>
<blockquote>
<p>Safely evaluate an expression node or a string containing a Python
  literal or container display. The string or node provided may only
  consist of the following Python literal structures: strings, bytes,
  numbers, tuples, lists, dicts, sets, booleans, and None.</p>
<p>This can be used for safely evaluating strings containing Python
  values from untrusted sources without the need to parse the values
  oneself. It is not capable of evaluating arbitrarily complex
  expressions, for example involving operators or indexing.</p>
</blockquote>
<pre><code>from pprint import pprint
from ast import literal_eval

s = "{'N1': ['N2', 'N3', 'N4'], 'N3': ['N6', 'N7'], 'N4': ['N3'], 'N5': ['N4', 'N8'], 'N6': ['N13'], 'N8': ['N9'], 'N9': ['N11'], 'N10': ['N7', 'N9'], 'N11': ['N14'], 'N12': ['N5']}"

parents = literal_eval(s)

pprint(parents)
</code></pre>
<p><strong>output</strong></p>
<pre><code>{'N1': ['N2', 'N3', 'N4'],
 'N10': ['N7', 'N9'],
 'N11': ['N14'],
 'N12': ['N5'],
 'N3': ['N6', 'N7'],
 'N4': ['N3'],
 'N5': ['N4', 'N8'],
 'N6': ['N13'],
 'N8': ['N9'],
 'N9': ['N11']}
</code></pre>
<p>There's also a built-in function called <a href="https://docs.python.org/3/library/functions.html#eval" rel="nofollow noreferrer"><code>eval</code></a> which <em>could</em> do this, but you should <strong>never</strong> use <code>eval</code> on untrusted user input because it's not secure.</p>
<hr/>
<p>Here's how to use <code>literal_eval</code> on user input:</p>
<pre><code>from pprint import pprint
from ast import literal_eval

s = input('Enter a node dictionary: ')
parents = literal_eval(s)
pprint(parents)
</code></pre>
<p><strong>demo</strong></p>
<pre><code>Enter a node dictionary: {'N1': ['N2', 'N3', 'N4'], 'N3': ['N6', 'N7'], 'N4': ['N3'], 'N5': ['N4', 'N8'], 'N6': ['N13'], 'N8': ['N9'], 'N9': ['N11'], 'N10': ['N7', 'N9'], 'N11': ['N14'], 'N12': ['N5']}
{'N1': ['N2', 'N3', 'N4'],
 'N10': ['N7', 'N9'],
 'N11': ['N14'],
 'N12': ['N5'],
 'N3': ['N6', 'N7'],
 'N4': ['N3'],
 'N5': ['N4', 'N8'],
 'N6': ['N13'],
 'N8': ['N9'],
 'N9': ['N11']}
</code></pre>
</div>
<span class="comment-copy">Is the user input a string like <code>{'N1': ['N2', 'N3', 'N4'], 'N3': ['N6', 'N7'], 'N4': ['N3'], 'N5': ['N4', 'N8'], 'N6': ['N13'], 'N8': ['N9'], 'N9': ['N11'], 'N10': ['N7', 'N9'], 'N11': ['N14'], 'N12': ['N5']}</code>?</span>
<span class="comment-copy">Yes. Should be able to input that.</span>
<span class="comment-copy">I don't understand what is the question here!</span>
<span class="comment-copy">Sir, you got my question wrong. My parents variable stores that dict, right ? I do not want it to store a specific dict. I want that it would store a user input that looks like above dict.</span>
<span class="comment-copy">@Dan: The understanding is that <code>s</code> actually comes from an <code>input()</code> call. <code>literal_eval</code> will process it anyway.</span>
<span class="comment-copy">@Dan My code converts a string into a Python object. You can read the string from <code>input()</code> if you want. I just put the string into my code to illustrate the process.</span>
<span class="comment-copy">@Dan Please see my updated answer. That should make things clearer.</span>
<span class="comment-copy">@PM2Ring thank you, you are right.</span>
