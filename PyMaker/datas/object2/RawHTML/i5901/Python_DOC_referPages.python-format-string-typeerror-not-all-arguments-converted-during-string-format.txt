<div class="post-text" itemprop="text">
<p>There are a lot entries, according to:"TypeError: not all arguments converted during string formatting" but I don't found the reason, why this:</p>
<pre><code>print("File: %30s "%("name"))
</code></pre>
<p>is working, but not this:</p>
<pre><code>leng=30
print("File: %"+ str(leng) +"s "%("name"))    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because of order of operations, your code evaluates as:</p>
<pre><code>"File: %" + str(leng) + ("s "%("name"))
</code></pre>
<p>To fix this, just parenthesize the string like:</p>
<pre><code>("File" + ...)%("name")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The latter one applies <code>%</code> only to <code>"s "</code>. Use grouping parentheses:</p>
<pre><code>print(("File: %" + str(leng) + "s ") % "name")    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not really related to OP' request, but using <code>python3.6</code> <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer"><code>f-string</code>s</a>, you can avoid using two levels of string in-place replacement; here is an example:</p>
<pre><code>&gt;&gt;&gt; filename = "some name"    
&gt;&gt;&gt; print(f"File: {filename:-^{len(filename)+6}} ")
---some name---
</code></pre>
<p>For older versions of <code>python</code>, the other answers apply.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead you could do</p>
<pre><code>print("File: {:.30}".format(name))
</code></pre>
<p>where name is a predefined filename</p>
</div>
<span class="comment-copy"><code>%</code> has higher precedence than <code>+</code>.</span>
<span class="comment-copy">This gives <code>"File: 30s name"</code>, where I think OP is looking for <code>"File: name(first 30 chars)"</code></span>
<span class="comment-copy"><code>first 30 chars</code>? not sure where you're getting that from I don't see it. I do see they want the formatted item to be before the <code>str(leng)</code> I edited my code to reflect that</span>
<span class="comment-copy">%30s signifies a string with length modifier 30, not <code>thestring30s</code>.</span>
<span class="comment-copy">ah I see, I didn't realize that's what they were trying to do based on the second example where they define leng as a separate variable. Thanks for the clarification!</span>
