<div class="post-text" itemprop="text">
<p>I have an array of type 'double' (from MATLAB) sent over TCP.</p>
<p>The receiving end (PYTHON), when printed as string, is shown as:</p>
<pre><code>&gt; b'?\xf0\x00\x00\x00\x00\x00\x00@[\xc0\x00\x00\x00\x00\x00@j`\x00\x00\x00\x00\x00@sp\x00\x00\x00\x00\x00@y\xb0\x00\x00\x00\x00\x00@\x7f\xf0\x00\x00\x00\x00\x00@\x83\x18\x00\x00\x00\x00\x00@\x868\x00\x00\x00\x00\x00@\x87\xe0\x00\x00\x00\x00\x00@[\x80\x00\x00\x00\x00\x00@j@\x00\x00\x00\x00\x00@s`\x00\x00\x00\x00\x00@y\xa0\x00\x00\x00\x00\x00@\x7f\xe0\x00\x00\x00\x00\x00@\x83\x10\x00\x00\x00\x00\x00@\x860\x00\x00\x00\x00\x00@\x87\xd8\x00\x00\x00\x00\x00@\x88\x90\x00\x00\x00\x00\x00'
</code></pre>
<p>How do I decode this to look the same as its original to be readable?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a> module in the standard library to unpack binary data.</p>
<p>The <a href="https://docs.python.org/3/library/struct.html#struct.unpack" rel="nofollow noreferrer">struct.unpack</a> function accepts two parameters, a format string defining the layout of the binary data and the data itself.</p>
<p>Since the data is coming over the network let's assume network order (format <code>!</code>); the data is an array of <em>doubles</em>, so we'll use the double type (format <code>d</code>).  The struct module defines a size of 8 for a double, and the bytestring has a length of 144, so that's 18 doubles, giving the format string <code>!18d</code>.</p>
<p>Unpack the data:</p>
<pre><code>&gt;&gt;&gt; unpacked = struct.unpack('!18d', data)
&gt;&gt;&gt; unpacked                                                                                                                                                                                                    
(1.0,                                                                                                                                                                                                      
 111.0,                                                                                                                                                                                                    
 211.0,                                                                                                                                                                                                    
 311.0,                                                                                                                                                                                                    
 411.0,                                                                                                                                                                                                    
 511.0,                                                                                                                                                                                                    
 611.0,                                                                                                                                                                                                    
 711.0,                                                                                                                                                                                                    
 764.0,                                                                                                                                                                                                    
 110.0,                                                                                                                                                                                                    
 210.0,                                                                                                                                                                                                    
 310.0,                                                                                                                                                                                                    
 410.0,
 510.0,
 610.0,
 710.0,
 763.0,
 786.0)
&gt;&gt;&gt; 
</code></pre>
<p>If this output isn't what you expect then you may have to experiment with some of the other formats defined in the struct module, or find out exactly how Matlab serialises data for transfer over the network.</p>
</div>
