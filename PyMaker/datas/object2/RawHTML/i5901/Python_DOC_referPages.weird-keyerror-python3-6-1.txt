<div class="post-text" itemprop="text">
<p>I am trying to make something like FileSystem in python. My goal is to make files which can contain some data and Directories which can contain some files. Then I have some simple commands </p>
<ul>
<li><p>cd </p></li>
<li><p>ls</p></li>
<li><p>mk_dir </p></li>
<li><p>mk_file </p></li>
</ul>
<p>So, now I have a problem with this: 
There's DirectoryBase class which is different from Directory, because it has no ParentDir (Directory in that is File/Directory saved). Then there's Directory class that extends DirectoryBase and overwrites path() method (method returning path to file/dir) and data dict has another default key: '..', but when I am trying to find it in data dict it raises KeyError. Another weird thing, about it is that I am testing if file/dir exists, and if not it will return, so I don't know how this is possible, that it got KeyError.</p>
<p>This is my code: </p>
<pre><code>class AttributeDictionary(dict):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.__getattr__ = self.__getitem__
        self.__setattr__ = self.__setitem__
        self.__delattr__ = self.__delitem__


class FileManager(object):
    def __init__(self):
        self.disk_dir = DirectoryBase('__disk__')
        self.current_dir = self.disk_dir

    def _find(self, path):
        """ Gets file/dir object using path """
        _cd = self.current_dir
        for part in path:
            _cd = _cd[part]
        return _cd

    def cmd_cd(self, path):
        """ Classic unix `cd` command """
        f = self._find(path)
        if f is DirectoryBase:
            self.current_dir = f
        else:
            return FileSystemError('DirectoryNotFound')

    def cmd_ls(self):
        """ Classic unix `ls` command """
        return ConsoleOutput(''.join([f'{i}\n' for i in self.current_dir.data]))

    def cmd_mkfile(self, name):
        """ file making command """
        self.current_dir.__setitem__(name, File(name, self.current_dir))

    def cmd_mkdir(self, name):
        """ file making command """
        self.current_dir.__setitem__(name, Directory(name, self.current_dir))


class File(object):
    def __init__(self, name, pd):
        self.data = [0x00]
        self.name = name
        self.pd = pd

    def path(self):
        return [self.name] + self.pd.path()

    def __sizeof__(self):
        return len(self.data)


class DirectoryBase(AttributeDictionary):
    def __init__(self, name, **kwargs):
        super().__init__(**kwargs)
        self.name = name
        self.data = {'.': self}

    def path(self):
        return self.name

    def __getitem__(self, item):
        if item in self.data.keys():
            return FileSystemError('FileNotFound')
        return self.data[item] # KeyError: '..' found here

    def __setitem__(self, key, value):
        if key in self.data.keys():
            return FileSystemError('FileAlreadyExists')
        self.data[key] = value

    def __delitem__(self, key):
        if key in self.data.keys():
            return FileSystemError('FileNotFound')
        self.data.__delitem__(key)


class Directory(DirectoryBase):
    def __init__(self, name, pd, **kwargs):
        super().__init__(name, **kwargs)
        self.pd = pd
        self.data = {'.': self, '..': self.pd}

    def path(self):
        return [self.name] + self.pd.path()


if __name__ == '__main__':
    fs = FileManager()
    fs.cmd_mkdir('test')
    print(fs.cmd_ls())
    fs.cmd_cd(['test'])
    fs.cmd_mkfile('idk.txt')
    print(fs.cmd_ls())
    fs.cmd_cd(['..'])
    print(fs.cmd_ls())
</code></pre>
<p>Error looks like this: </p>
<pre><code>.
test
Traceback (most recent call last):

.
  File "/Users/jan/PycharmProjects/Xaon/src/fs.py", line 106, in &lt;module&gt;
test
    fs.cmd_cd(['..'])
idk.txt

  File "/Users/jan/PycharmProjects/Xaon/src/fs.py", line 32, in cmd_cd
    f = self._find(path)
  File "/Users/jan/PycharmProjects/Xaon/src/fs.py", line 27, in _find
    _cd = _cd[part]
  File "/Users/jan/PycharmProjects/Xaon/src/fs.py", line 76, in __getitem__
    return self.data[item]
KeyError: '..'
</code></pre>
<p>or when I delete prints: </p>
<pre><code>Traceback (most recent call last):
  File "/Users/jan/PycharmProjects/Xaon/src/fs.py", line 106, in &lt;module&gt;
    fs.cmd_cd(['..'])
  File "/Users/jan/PycharmProjects/Xaon/src/fs.py", line 32, in cmd_cd
    f = self._find(path)
  File "/Users/jan/PycharmProjects/Xaon/src/fs.py", line 27, in _find
    _cd = _cd[part]
  File "/Users/jan/PycharmProjects/Xaon/src/fs.py", line 76, in __getitem__
    return self.data[item]
KeyError: '..'
</code></pre>
<p>Sorry if it is too confusing, I am beginner and my English is bad too.</p>
</div>
<div class="post-text" itemprop="text">
<p>the code logic is flawed:</p>
<pre><code>def __getitem__(self, item):
    if item in self.data.keys():
        return FileSystemError('FileNotFound')
    return self.data[item] # KeyError: '..' found here
</code></pre>
<p>you are throwing an error when the key <em>exists</em>. Just <em>negate</em> the condition (and drop the <code>.keys()</code> which is useless &amp; unpythonic and even a performance killer in Python 2):</p>
<pre><code>def __getitem__(self, item):
    if item not in self.data:
        return FileSystemError('FileNotFound')
    return self.data[item]
</code></pre>
<p>there's the same error in <code>__delitem__</code> BTW.</p>
<p>When fixed (and stubbed most of unexisting/unshown classes with <code>str</code>) I get the following output:</p>
<pre><code>.
test

.
idk.txt
test

.
idk.txt
test
</code></pre>
</div>
<span class="comment-copy">You should switch to Python 3.x while you are still learning.</span>
<span class="comment-copy">I am using python 3.6.1</span>
<span class="comment-copy">Sorry, made an assumption becuase you define a class inheriting from <code>object</code> - <code>class File(object:</code></span>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">Catch the error</a> and inspect your data in the except suite.  Maybe print <code>self.data</code> and <code>item</code>.</span>
<span class="comment-copy">Thanks, but it is not fixing my problem... But now I see that problem is in cd command, because it can't find test dir</span>
<span class="comment-copy">Though that isn't throwing the KeyError, isn't the line pointed to in the Traceback.</span>
<span class="comment-copy">you didn't read fully then: drop <code>.keys()</code>, but mostly add a <code>not</code> to your condition. The condition is ok for <code>setitem</code> since you want to avoid overwrite of existing, but get &amp; del need negation.</span>
<span class="comment-copy">I tested your code and I don't get any exceptions now</span>
