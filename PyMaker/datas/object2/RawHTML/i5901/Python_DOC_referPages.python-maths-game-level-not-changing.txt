<div class="post-text" itemprop="text">
<p>When I type <code>level4</code> or <code>level3</code> or <code>level2</code> my game does not go to the requested level.</p>
<p>It prints the entered level (e.g. <code>level1</code>) and stays on level one.</p>
<pre><code>print("Welcome to the maths skills testing machine!")
userinput = input("\nAre you ready to test your maths skills?")

print("\nWhich level would you like to play?")
userinput = input('''Level 1, Level 2, Level 3, Level 4''')

if userinput=="level1":
    level1()
elif userinput=="level2":
    level2()
elif userinput=="level3":
    level3()
elif userinput=="level4":
    level4()

def level1():

    import operator
    import random
    import time
    start = time.time()

    ops = {'+': operator.add,
           '-': operator.sub}

    num_a = random.randint(1, 10)
    num_b = random.randint(1, 10)
    op = random.choice(tuple(ops.keys()))

    print('{}{}{}=?'.format(num_a, op, num_b))
    expected_answer = ops[op](num_a, num_b)
    user_answer = int(input())
    if user_answer == expected_answer:
        print('Correct')
        print('It took you {0:0.1f} seconds to answer the 
question'.format(time.time() - start))
    else:
        print('Wrong')
        print('It took you {0:0.1f} seconds to answer the 
question'.format(time.time() - start))
    while user_answer == expected_answer:
        level1()
    else:
        exit()

level1()


def level2():

    import operator
    import random
    import time
    start = time.time()

    ops = {'+': operator.add,
           '-': operator.sub}

    num_a = random.randint(10, 50)
    num_b = random.randint(10, 50)
    op = random.choice(tuple(ops.keys()))

    print('{}{}{}=?'.format(num_a, op, num_b))
    expected_answer = ops[op](num_a, num_b)
    user_answer = int(input())
    if user_answer == expected_answer:
        print('Correct')
        print('It took you {0:0.1f} seconds to answer the 
question'.format(time.time() - start))
    else:
        print('Wrong')
        print('It took you {0:0.1f} seconds to answer the 
question'.format(time.time() - start))
    while user_answer == expected_answer:
        level2()
    else:
        exit()

level2()


def level3():

    import operator
    import random
    import time
    start = time.time()

    ops = {'+': operator.add,
           '-': operator.sub}

    num_a = random.randint(50, 100)
    num_b = random.randint(50, 100)
    op = random.choice(tuple(ops.keys()))

    print('{}{}{}=?'.format(num_a, op, num_b))
    expected_answer = ops[op](num_a, num_b)
    user_answer = int(input())
    if user_answer == expected_answer:
        print('Correct')
        print('It took you {0:0.1f} seconds to answer the 
question'.format(time.time() - start))
    else:
        print('Wrong')
        print('It took you {0:0.1f} seconds to answer the 
question'.format(time.time() - start))
    while user_answer == expected_answer:
        level3()
    else:
        exit()

level3()


def level4():

    import operator
    import random
    import time
    start = time.time()

    ops = {'+': operator.add,
           '-': operator.sub}

    num_a = random.randint(100, 1000)
    num_b = random.randint(100, 1000)
    op = random.choice(tuple(ops.keys()))

    print('{}{}{}=?'.format(num_a, op, num_b))
    expected_answer = ops[op](num_a, num_b)
    user_answer = int(input())
    if user_answer == expected_answer:
        print('Correct')
        print('It took you {0:0.1f} seconds to answer the 
question'.format(time.time() - start))
    else:
        print('Wrong')
        print('It took you {0:0.1f} seconds to answer the 
question'.format(time.time() - start))
    while user_answer == expected_answer:
        level4()
    else:
        exit()

level4()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should define the function before using it. You are calling functions before they are defined.</p>
<p>Also the calls to them (e.g. <code>level1()</code>) after them is not needed.
You may also move the imports at the begging of the file, and remove them from each function.
You may also use an IDE, for example <a href="https://www.jetbrains.com/pycharm/" rel="nofollow noreferrer">PyCharm</a>.</p>
<pre><code>def level1():
    import operator
    import random
    import time
    start = time.time()

    ops = {'+': operator.add,
           '-': operator.sub}

    num_a = random.randint(1, 10)
    num_b = random.randint(1, 10)
    op = random.choice(tuple(ops.keys()))

    print('{}{}{}=?'.format(num_a, op, num_b))
    expected_answer = ops[op](num_a, num_b)
    user_answer = int(input())
    if user_answer == expected_answer:
        print('Correct')
        print('It took you {0:0.1f} seconds to answer the question'.format(time.time() - start))
    else:
        print('Wrong')
        print('It took you {0:0.1f} seconds to answer the question'.format(time.time() - start))
    while user_answer == expected_answer:
        level1()
    else:
        exit()


def level2():
    import operator
    import random
    import time
    start = time.time()

    ops = {'+': operator.add,
           '-': operator.sub}

    num_a = random.randint(10, 50)
    num_b = random.randint(10, 50)
    op = random.choice(tuple(ops.keys()))

    print('{}{}{}=?'.format(num_a, op, num_b))
    expected_answer = ops[op](num_a, num_b)
    user_answer = int(input())
    if user_answer == expected_answer:
        print('Correct')
        print('It took you {0:0.1f} seconds to answer the question'.format(time.time() - start))
    else:
        print('Wrong')
        print('It took you {0:0.1f} seconds to answer the question'.format(time.time() - start))
    while user_answer == expected_answer:
        level2()
    else:
        exit()


def level3():
    import operator
    import random
    import time
    start = time.time()

    ops = {'+': operator.add,
           '-': operator.sub}

    num_a = random.randint(50, 100)
    num_b = random.randint(50, 100)
    op = random.choice(tuple(ops.keys()))

    print('{}{}{}=?'.format(num_a, op, num_b))
    expected_answer = ops[op](num_a, num_b)
    user_answer = int(input())
    if user_answer == expected_answer:
        print('Correct')
        print('It took you {0:0.1f} seconds to answer the question'.format(time.time() - start))
    else:
        print('Wrong')
        print('It took you {0:0.1f} seconds to answer the question'.format(time.time() - start))
    while user_answer == expected_answer:
        level3()
    else:
        exit()


def level4():
    import operator
    import random
    import time
    start = time.time()

    ops = {'+': operator.add,
           '-': operator.sub}

    num_a = random.randint(100, 1000)
    num_b = random.randint(100, 1000)
    op = random.choice(tuple(ops.keys()))

    print('{}{}{}=?'.format(num_a, op, num_b))
    expected_answer = ops[op](num_a, num_b)
    user_answer = int(input())
    if user_answer == expected_answer:
        print('Correct')
        print('It took you {0:0.1f} seconds to answer the question'.format(time.time() - start))
    else:
        print('Wrong')
        print('It took you {0:0.1f} seconds to answer the question'.format(time.time() - start))
    while user_answer == expected_answer:
        level4()
    else:
        exit()


print("Welcome to the maths skills testing machine!")
_ = input("\nAre you ready to test your maths skills?")

print("\nWhich level would you like to play?")
userinput = input('''Level 1, Level 2, Level 3, Level 4''')

if userinput=="level1":
    level1()
elif userinput=="level2":
    level2()
elif userinput=="level3":
    level3()
elif userinput=="level4":
    level4()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your if statement, you're using an <code>input()</code> method. It doesn't have to be there. Just write:</p>
<pre><code>if userinput=="level1":
    level1()
elif userinput=="level2":
    level2()
</code></pre>
<p>etc. It's also better to use <code>elif</code> in stead of <code>if</code>.</p>
</div>
<span class="comment-copy">do you know how i can add a feature onto this program that tells the user how many questions they answered correctly when they get one answer wrong and the program finishes?</span>
<span class="comment-copy">@Joseph Add a global variable, and count the number using it. You should add <code>global [variable name]</code> to functions using it. Refer to <a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python" rel="nofollow noreferrer">documentation</a> for more info.</span>
<span class="comment-copy">Also, remove the calls to your <code>level</code> functions after their definition.</span>
<span class="comment-copy">@AliMomenSani Yeah, I forgot to say that, thanks!</span>
<span class="comment-copy">what do you mean by that? i just changed the code in my program but now it says the levels aren't defined when i type in the level i wish to play</span>
<span class="comment-copy">@AliMomenSani I changed the code and now it says the level's aren't defined</span>
<span class="comment-copy">@Joseph Update your question with the new code.</span>
