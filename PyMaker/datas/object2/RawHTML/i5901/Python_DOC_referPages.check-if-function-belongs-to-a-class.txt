<div class="post-text" itemprop="text">
<p>I'm trying to write a documentation testing tool which checks whether the docstrings match the actual function signature (among other things). However, I've run into a bit of a roadblock. I can't find a way to figure out whether a given function belongs to a class or not.</p>
<pre><code>import inspect

def func1():
    pass


class Foo:
    def method(self):
        pass

print(inspect.ismethod(func1))  # prints False
print(inspect.ismethod(Foo().method)) # prints True
print(inspect.ismethod(Foo.method)) # prints False - I want something that prints True here
</code></pre>
<p>The problem is that methods usually have <code>self</code> as their first parameter, and this is never documented (for obvious reasons). This would cause my tests to fail, since they'd encounter a parameter that's not documented.</p>
<p>I would prefer to not explicitly check if the first parameter is called <code>self</code> and skip it, because a) nothing prevents a function from having a parameter called <code>self</code> and b) the name <code>self</code> itself is a matter of convention (so you could have a method with a first param that's called <code>this_is_definitely_not_self</code>) and my tool would fail in either case. I also can't just initialize an object and check if the function is a method, because this would fail with any class that takes required parameters in its <code>__init__</code>.</p>
<p>So the question is, is there any way I can detect if a function is a method <em>before</em> it is actually bound to an object? Or do I need to resign myself to just checking if the first parameter is called <code>self</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>One option is <a href="https://docs.python.org/3/library/stdtypes.html#definition.__qualname__" rel="nofollow noreferrer"><code>__qualname__</code></a>. For methods this includes the class name which you can use. This is one of the reasons why it was added:</p>
<blockquote>
<p><a href="https://docs.python.org/3/library/stdtypes.html#definition.__qualname__" rel="nofollow noreferrer"><code>definition.__qualname__</code></a></p>
<p>The qualified name of the class, function, method, descriptor, or generator instance.</p>
</blockquote>
<p>See <a href="https://www.python.org/dev/peps/pep-3155/#proposal" rel="nofollow noreferrer">PEP 3155's proposal</a> for more on this attribute.</p>
<p>Of course, since <code>__qualname__</code> is set during class definition, one can get false-positives when functions are dynamically added to a class. So, this answer basically covers the question of if a function has been <em>defined</em> in a class.</p>
<p>So, there's no clear-cut way to detect this since, a function defined inside a class and accessed via the class and a function outside a class have no difference. (except for <code>__qualname__</code> in most cases). </p>
<p>A sensible course of action would be to use the <code>__qualname__</code> as a "quick" check to see if a function has been defined inside a class and, if that is <code>False</code>, fall back to checking for <code>self</code> with the <a href="https://docs.python.org/3/library/inspect.html#inspect.signature" rel="nofollow noreferrer"><code>inspect.signature</code> function</a> and <code>'self' in signature(func).parameters</code>.</p>
<p>You won't be able to cover all cases, this is Python and I can do pretty much anything I'd like. Purportedly we are all consenting adults, though. :) </p>
</div>
<span class="comment-copy">When you're iterating over the members of a class, you know that the attributes that are functions are methods of that class.</span>
<span class="comment-copy">You could look for a <code>.</code> in the function name.  <code>inspect.ismethod(Foo.method) or '.' in Foo.method.__name__</code></span>
<span class="comment-copy">@patrick <code>Foo.method.__name__</code> will just be <code>method</code>. <code>__qualname__</code> might work for that though.</span>
<span class="comment-copy">@kindall while this is true <i>if</i> you're iterating through the members of a class, I'd like each test to work on arbitrary callables and then have a separate test runner-type entity that does the job of discovery and iteration.</span>
<span class="comment-copy">You can, at best, detect that a function was originally defined in a class body, semantically speaking. <b>That's it</b>. What is the actual use case you are trying to solve here?</span>
<span class="comment-copy">Ouch! That's a nasty gotcha, I can see it leading to some really hard-to-find bugs. Not sure it's better than just checking for <code>self</code> in that case :\ Have an upvote in any case!</span>
<span class="comment-copy">@ChinmayKanchi yup, and I can see how the approach of checking for <code>self</code> can also lead to nasty places. I don't believe there's a single approach that covers all edge cases; it seems you'll need to combine approaches.</span>
<span class="comment-copy">I might just stick to checking for <code>self</code> actually. Since this is a documentation testing tool, I think I can reasonably make the assumption that anyone who cares enough to run it, will care enough to not make totally stupid decisions like renaming <code>self</code> :p</span>
<span class="comment-copy">Plus, I don't think I've ever seen in-the-wild code that used <code>self</code> in an unbound function or called the first parameter of a bound method anything other than <code>self</code>. I have certainly seen code that adds methods to objects/classes at runtime though (and have even written some when auto-generating tests)!</span>
