<div class="post-text" itemprop="text">
<p>I wrote this Python code </p>
<pre><code>class Animal:
    __name= ""
    __height= 0
    __weight= 0
    __sound= 0

    def __init__(self, name, height, weight, sound):
        self.__name =  name
        self.__height = height
        self.__weight = weight
        self.__sound = sound
    def set_name(self, name):
       self.__name = name
    def get_name(self):
       return self.__name
    def set_height(self, height):
       self.__height = height
    def get_height(self):
       return self.__height
    def set_weight(self, weight):
       self.__wright = weight
    def get_weight(self):
        return self.__weight
    def set_sound(self, sound):
        self.__sound = sound
    def get_sound(self):
       return self.__sound
    def get_type(self):
       print("Animal")
    def toString(self):
       return"{} is {} cm tall and {} kilograms and says {}".format(self.__name,
                                                               self.__height,
                                                               self.__weight,
                                                               self.__sound)


cat = Animal('Whiskers', 33, 10, 'Meow')   
Dog = Animal('spot', 50, 20, 'Woof')
katzy = Animal('Mr.Katzy', 180, 50, 'i love fat Cats')

#print(cat.toString())
#print(Dog.toString())
#print(katzy.toString())


class Dog(Animal):
    __owner = ''

    def __init__(self, name, height, weight, sound, owner):
        super(Dog, self).__init__(name, height, weight, sound)
        self.__owner = owner

    def set_owner(self, owner):
       self.__owner = owner

    def get_owner(self):
       return self.__owner

    def get_type(self):
       print("Dog")

    def toString(self):
       return"{} is {} cm tall and {} kilograms and says {} and his owner is {}".format(self.__name,
                                                                                   self.__height,
                                                                                   self.__weight,
                                                                                   self.__sound,
                                                                                   self.__owner)

Doggo = Dog('spot', 50, 20, 'Woof', 'Preetam')

print(Doggo.toString())
</code></pre>
<p>And this error came </p>
<pre><code>line 67, in toString
    return"{} is {} cm tall and {} kilograms and says {} and his owner is {}".format(self.__attrname,
AttributeError: 'Dog' object has no attribute '_Dog__attrname'

Process finished with exit code 1
</code></pre>
<p>I can't understand where I made the miatake. Can anyone of you help me with it ?</p>
<p>So they say i have to add more details in it but I don't know what more to add.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you're using double underscore for your private attribute names, which have a special meaning on Python:</p>
<p>From the <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">Python Docs</a>:</p>
<blockquote>
<p>Any identifier of the form <code>__spam</code> (at least two leading underscores, at most one trailing underscore) is textually replaced with <code>_classname__spam</code>, where <code>classname</code> is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, as long as it occurs within the definition of a class.</p>
</blockquote>
<p>Replacing all your "dunder" attributes, with single ones fixes the issue:</p>
<pre><code>class Animal:
_name= ""
_height= 0
_weight= 0
_sound= 0

def __init__(self, name, height, weight, sound):
    self._name =  name
    self._height = height
    self._weight = weight
    self._sound = sound
def set_name(self, name):
   self._name = name
def get_name(self):
   return self._name
def set_height(self, height):
   self._height = height
def get_height(self):
   return self._height
def set_weight(self, weight):
   self._wright = weight
def get_weight(self):
    return self._weight
def set_sound(self, sound):
    self._sound = sound
def get_sound(self):
   return self._sound
def get_type(self):
   print("Animal")
def toString(self):
   return"{} is {} cm tall and {} kilograms and says {}".format(self._name,
                                                           self._height,
                                                           self._weight,
                                                           self._sound)

class Dog(Animal):
_owner = ''

def __init__(self, name, height, weight, sound, owner):
    super(Dog, self).__init__(name, height, weight, sound)
    self._owner = owner

def set_owner(self, owner):
   self._owner = owner

def get_owner(self):
   return self._owner

def get_type(self):
   print("Dog")

def toString(self):
   return"{} is {} cm tall and {} kilograms and says {} and his owner is {}".format(self._name,
                                                                               self._height,
                                                                               self._weight,
                                                                               self._sound,
                                                                               self._owner)

Doggo = Dog('spot', 50, 20, 'Woof', 'Preetam')

print(Doggo.toString())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>class Dog(Animal):
        __owner = ''

        def __init__(self, name, height, weight, sound, owner):
            super(Dog, self).__init__(name, height, weight, sound)
            self.__name = name
            self.__height = height
            self.__weight = weight
            self.__sound = sound
            self.__owner = owner

        def set_owner(self, owner):
           self.__owner = owner
</code></pre>
<p>Instead of this:</p>
<pre><code>class Dog(Animal):
    __owner = ''

    def __init__(self, name, height, weight, sound, owner):
        super(Dog, self).__init__(name, height, weight, sound)
        self.__owner = owner

    def set_owner(self, owner):
       self.__owner = owner
</code></pre>
</div>
<span class="comment-copy">The code you've posted doesn't show this error. It would only show it if you'd written <code>self.__attrname</code>, but you haven't.</span>
<span class="comment-copy">In any way, you should not use double underscore for private attributes, please use only one</span>
<span class="comment-copy">Not related to what you asked, but why do you define both class attributes <code>__name</code>, <code>__height</code> etc (above <code>__init__</code>) and instance attributes <code>__name</code>, <code>__height</code> (inside <code>__init__</code>)? What you have above <code>__init__</code> probably does not do what you expect and you don't need it. As for your question, see the answer by @MatiasCicero</span>
