<div class="post-text" itemprop="text">
<p>I would like to abbreviate the first word in a 2 word string of values in dictionary.</p>
<p>input dictionary:</p>
<pre><code>names = {
    'fire' : 'John Smith', 'water' : 'Steve Doe', 'earth' : 'Bob Smith'
}
</code></pre>
<p>I would like this to be the output.</p>
<p>output dictionary:</p>
<pre><code>names_ab = {
    'fire' : 'J. Smith', 'water' : 'S. Doe', 'earth' : 'B. Smith'
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One possible approach is to extract that first capital letter in a <em>capturing group</em> and use <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub()</code></a> referencing the captured group in a replacement string:</p>
<pre><code>In [1]: import re

In [2]: names = { 'fire' : 'John Smith', 'water' : 'Steve Doe', 'earth' : 'Bob Smith' }

In [3]: pattern = re.compile(r"^([A-Z])[a-z]+")

In [4]: print({key: pattern.sub(r"\1.", value)
   ...:        for key, value in names.items()})
{'fire': 'J. Smith', 'water': 'S. Doe', 'earth': 'B. Smith'}
</code></pre>
<p>Note that this would also handle cases when there are more than two words/names defined in a string - like in case of "Amy Farrah Fowler".</p>
<p>Though, I can imagine a case to break this approach as well. Strictly speaking, this is a Natural Language Processing problem, but depends on what can the possible names be in your specific case as well.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this:</p>
<pre><code>names = {'fire': 'John Smith', 'water': 'Steve Doe', 'earth': 'Bob Smith'}

names_ab = {}
for element, name in names.items():
    first_name, last_name = name.split()
    names_ab[element] = '{}. {}'.format(first_name[0], last_name)

print(names_ab)
</code></pre>
<p>Which outputs:</p>
<pre><code>{'fire': 'J. Smith', 'water': 'S. Doe', 'earth': 'B. Smith'}
</code></pre>
<p>If you need it to work for more names, you could use something like this:</p>
<pre><code>for element, name in names.items():
    *first_names, last_name = name.split()
    names_ab[element] = '{}. {}'.format('. '.join(n[0] for n in first_names), last_name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>By tweaking the values in dict using <code>join</code> and <code>split</code></p>
<pre><code>names = { 'fire' : 'John Smith', 'water' : 'Steve Doe', 'earth' : 'Bob Smith will' }
{k:'. '.join([v[0],' '.join(v.split()[1:])]) for k,v in names.items()}
#Output:
#{'earth': 'B. Smith will', 'fire': 'J. Smith', 'water': 'S. Doe'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should work for any number of words you have in your dict as value.</p>
<pre><code>names = {'earth': 'Bob Smith Jobs', 'fire': 'John Smith', 'water': 'Steve Doe'}

d = {}

for k in names:
    first, *rest = names[k].split()
    d[k] = '{0}. '.format(first[0]) + ' '.join(rest)

print(d)
</code></pre>
<p>But this works only in Python 3</p>
</div>
<span class="comment-copy">Have you made any attempts?</span>
<span class="comment-copy">Have you tried it? It doesn't works for more than two names.</span>
<span class="comment-copy">@FranciscoCouzo ah, we defined the "working" differently :) I've assumed the first word only to be abbreviated as "working". But, yeah, how to behave in this situation probably depends on the OP and possible inputs for this problem. Thanks.</span>
<span class="comment-copy">@alecxe - right, edited</span>
