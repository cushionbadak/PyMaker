<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/35205162/iterating-over-two-lists-one-after-another">Iterating over two lists one after another</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>In <strong>Python 3.6.3</strong> Is there a way to loop though one list after another?</p>
<p>For example:</p>
<pre><code>deck = [(value, suit) for value in range(2, 11) +
            ["J", "Q", "K", "A"] for suit in ["H", "C", "D", "S"]]
</code></pre>
<p>(In this case, I want to loop through the face cards right after the non-face cards.)</p>
<p>For clarification:
The above line throws a:</p>
<pre class="lang-none prettyprint-override"><code>TypeError: unsupported operand type(s) for +: 'range' and 'list'
</code></pre>
<p>This is my problem.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#func-range" rel="noreferrer"><code>range</code></a> doesn't return a <code>list</code> in Python3, so <code>range(2, 10) + ["J", "Q", "K", "A"]</code> doesn't work, but <code>list(range(2, 10)) + ["J", "Q", "K", "A"]</code> does. You can also use <a href="https://docs.python.org/2/library/itertools.html#itertools.chain" rel="noreferrer"><code>itertools.chain</code></a> to concatenate iterables:</p>
<pre><code>from itertools import chain 

chain(range(2, 10), ["J", "Q", "K", "A"])
# or even shorter:
chain(range(2, 10), "JQKA")  # as strings themselves are iterables

# so this comprehension will work
deck = [
   (value, suit) 
   for value in chain(range(2, 10), "JQKA") 
   for suit in "HCDS"
]
</code></pre>
<p>The nested comprehension does, of course, constitute a cartesian product which you can also use a util for:</p>
<pre><code>from itertools import product
deck = list(product(chain(range(2, 10), "JQKA"), "HCDS"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your current code is here:</p>
<pre><code>range(2, 10) + ["J", "Q", "K", "A"]
</code></pre>
<p>First off, it should be <code>range(2, 11)</code>, otherwise, cards with the number 10 are omitted. Second, in order to join the range and the list, you'll have to do like so:</p>
<pre><code>list(range(2, 11)) + ["J", "Q", "K", "A"]
</code></pre>
<p>So the final result will be:</p>
<pre><code>deck = [(value, suit) for value in list(range(2, 11)) + ["J", "Q", "K", "A"] for suit in ["H", "C", "D", "S"]]
</code></pre>
<p>I think this will give you the desired output (first all non-face cards, then all face cards).</p>
</div>
<div class="post-text" itemprop="text">
<p>See @schwobaseggl's solution for what you want, but I usually prefer to represent cards as a 2 character string, however:</p>
<pre><code>deck = [r+s for r in '23456789TJQKA' for s in 'hcds']
</code></pre>
<p>This is more readable in my opinion, and will still behave a lot like a tuple of rank, suit.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python3, you can use unpacking:</p>
<pre><code>deck = [(value, suit) for value in [*range(2, 10), "J", "Q", "K", "A"] for suit in ["H", "C", "D", "S"]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Focusing only in the error you do get:</p>
<blockquote>
<p>TypeError: unsupported operand type(s) for +: 'range' and 'list</p>
</blockquote>
<p>I will give you an explanation.</p>
<p>Your current code does work in <strong>Python 2</strong>:</p>
<pre><code>deck = [(value, suit) for value in range(2, 11) + ["J", "Q", "K", "A"] for suit in ["H", "C", "D", "S"]]
print deck
</code></pre>
<p>will print:</p>
<pre><code>[(2, 'H'), (2, 'C'), (2, 'D'), (2, 'S'), (3, 'H'), (3, 'C'), (3, 'D'), (3, 'S'), (4, 'H'), (4, 'C'), (4, 'D'), (4, 'S'), (5, 'H'), (5, 'C'), (5, 'D'), (5, 'S'), (6, 'H'), (6, 'C'), (6, 'D'), (6, 'S'), (7, 'H'), (7, 'C'), (7, 'D'), (7, 'S'), (8, 'H'), (8, 'C'), (8, 'D'), (8, 'S'), (9, 'H'), (9, 'C'), (9, 'D'), (9, 'S'), (10, 'H'), (10, 'C'), (10, 'D'), (10, 'S'), ('J', 'H'), ('J', 'C'), ('J', 'D'), ('J', 'S'), ('Q', 'H'), ('Q', 'C'), ('Q', 'D'), ('Q', 'S'), ('K', 'H'), ('K', 'C'), ('K', 'D'), ('K', 'S'), ('A', 'H'), ('A', 'C'), ('A', 'D'), ('A', 'S')]
</code></pre>
<p>In <strong>Python 3</strong> you have to use <code>list(range(2, 11))</code>:</p>
<pre><code>deck = [(value, suit) for value in list(range(2, 11)) + ["J", "Q", "K", "A"] for suit in ["H", "C", "D", "S"]]
print(deck)
</code></pre>
<p>will print:</p>
<pre><code>[(2, 'H'), (2, 'C'), (2, 'D'), (2, 'S'), (3, 'H'), (3, 'C'), (3, 'D'), (3, 'S'), (4, 'H'), (4, 'C'), (4, 'D'), (4, 'S'), (5, 'H'), (5, 'C'), (5, 'D'), (5, 'S'), (6, 'H'), (6, 'C'), (6, 'D'), (6, 'S'), (7, 'H'), (7, 'C'), (7, 'D'), (7, 'S'), (8, 'H'), (8, 'C'), (8, 'D'), (8, 'S'), (9, 'H'), (9, 'C'), (9, 'D'), (9, 'S'), (10, 'H'), (10, 'C'), (10, 'D'), (10, 'S'), ('J', 'H'), ('J', 'C'), ('J', 'D'), ('J', 'S'), ('Q', 'H'), ('Q', 'C'), ('Q', 'D'), ('Q', 'S'), ('K', 'H'), ('K', 'C'), ('K', 'D'), ('K', 'S'), ('A', 'H'), ('A', 'C'), ('A', 'D'), ('A', 'S')]
</code></pre>
<p>You have to use <code>list()</code> because <strong><a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range()</code></a> in Python 3 does create an immutable sequence type</strong>, not a list.</p>
</div>
<span class="comment-copy">Your example is unclear. What's the expected result/output?</span>
<span class="comment-copy">@timgeb In the example, I'm trying to make a standard deck of 52 cards. The problem is that I want to iteration through {"J", "Q", "K", "A"} right after the numbered cards without needing a second loop.</span>
<span class="comment-copy">@schwobaseggl This line throws a type error: "TypeError: unsupported operand type(s) for +: 'range' and 'list'"</span>
<span class="comment-copy">@Josh <code>range()</code> does not create a list in Python 3. It used to create a list in Python 2. <a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range()</code></a> in Python 3 does create <b>an immutable sequence type</b>, not a list.</span>
<span class="comment-copy">This will work, but @schwobaseggl has a better solution using itertools, since it does not require unnecessary construction of a list, and then list concatenation.</span>
<span class="comment-copy">No need for the <code>*</code></span>
<span class="comment-copy">No need for the <code>list</code> call there: <code>[*range(2, 10), "J", "Q", "K", "A"]</code> is enough. (Or even <code>[*range(2, 11), *"JQKA"]</code>.)</span>
<span class="comment-copy">@MarkDickinson good to know. Please see my recent edit.</span>
