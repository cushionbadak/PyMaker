<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/9786102/how-do-i-parallelize-a-simple-python-loop">How do I parallelize a simple Python loop?</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to parallel calling the same method over multiple instances, where instances are referring to the same object.</p>
<p>Sorry for this confusion statements. </p>
<p>Specifically, I want to change the following for-loop to parallel execution: </p>
<pre><code>for i in range(len(instances)):#instances is a list of instances
   instances[i].do_some_computation_over_a_dataset()
</code></pre>
<p>Is it possible?</p>
<p><strong>Note for future readers:</strong></p>
<p>The above code is not the way to iterate over a collection of instances in Python. This is how to iterate in a sequential (ie non-parallel) way:</p>
<pre><code>for i in instances:
    i.do_some_computation_over_a_dataset()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ok, let's do it. First the code(<a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing docs</a>):</p>
<pre><code>In [1]: from multiprocessing import Process

In [2]: def f():
   ...:     print(1)
   ...:     for i in range(100):
   ...:         # do something
   ...:         pass
   ...:

In [3]: p1 = Process(target=f)

In [4]: p1.start()

1
In [5]: p2 = Process(target=f)

In [6]: p2.start()

1
In [7]: import time

In [8]: def f():
   ...:     for i in range(100):
   ...:         print(i)
   ...:         # do something
   ...:         time.sleep(1)
   ...:         pass
   ...:
In [9]: p1 = Process(target=f)
In [9]: p1 = Process(target=f)

In [10]: p1.start()

0
In [11]: p2 1
= Process(target=f)2
3
4
5
In [11]: p2 = Process(target=f)

In [12]: 6
p2.7
start8
In [12]: p2.start()

0
In [13]: 9
</code></pre>
<p>This is an example of how a function can be called in parallel. From <code>In [10]: p1.start()</code> you can see the output gets jumbled because program p1 is running in parallel while we run program p2.</p>
<p>When running the program in a Python script you want to make sure script only ends when all the programs have executed successfully. You can do this by</p>
<pre><code>def multi_process(instance_params, *funcs):
   process = []
   for f in funcs:
       prog = Process(target=f, args=instance_params)
       prog.start()
       process.append(prog)
   for p in process:
       p.join()

multi_process(params, f, f)
</code></pre>
<p>Python doesn't have C++ or Java like multithreading support because of GIL. <a href="https://wiki.python.org/moin/GlobalInterpreterLock" rel="nofollow noreferrer">Read about it here</a>. Though if your program is such that it does more I/O operations then CPU intensive tasks then you can use multithreading. For performing CPU intensive tasks multiprocessing is recommended.</p>
<p>In comment @ytutow asked what is difference between <em>pool of workers</em> and <em>process</em>. From <a href="https://pymotw.com/3/multiprocessing/communication.html#process-pools" rel="nofollow noreferrer">Pymotw</a>:</p>
<blockquote>
<p>The Pool class can be used to manage a fixed number of workers for
  simple cases where the work to be done can be broken up and
  distributed between workers independently.</p>
<p>The return values from the jobs are collected and returned as a list.</p>
<p>The pool arguments include the number of processes and a function to
  run when starting the task process (invoked once per child).</p>
</blockquote>
<p>You can use Pool as:</p>
<pre><code>def your_instance_method(instance):
   instances.do_some_computation_over_a_dataset()

with Pool(3) as p:
    instances = [insatnce_1, instance_2, instance_3]
    print(p.map(your_instance_method, instances))
</code></pre>
<p>About the correct number of workers, it's gereral recommendation to have 2*cpu_cores number of workers.</p>
</div>
<div class="post-text" itemprop="text">
<p>This code seems to show the difference between a <code>for</code> loop and <code>Pool</code>, calling a method on different instances:</p>
<pre><code>from multiprocessing import Pool

instances = ['a','ab','abc','abcd']


def calc_stuff(i):
    return len(i)


if __name__ == '__main__':

    print('One at a time')
    for i in instances:
        print(len(i))

    print('Use Pool')
    with Pool(4) as pool:
        print(pool.map(calc_stuff, instances))
</code></pre>
<p>Note the use of <code>if __name__ == '__main':</code></p>
<p>This separates each process out.</p>
<p>Output:</p>
<pre><code>One at a time
1
2
3
4
Use Pool
[1, 2, 3, 4]
</code></pre>
</div>
<span class="comment-copy">@quamrana , I want to ensure all instances have finished the method.</span>
<span class="comment-copy">What makes you think that <code>Pool</code> doesn't wait?</span>
<span class="comment-copy">@quamrana , I do not know <code>Pool</code> very much, just guess.</span>
<span class="comment-copy">The first code example in here: <a href="https://docs.python.org/3/library/multiprocessing.html" rel="nofollow noreferrer">docs.python.org/3/library/multiprocessing.html</a> obviously waits for all processes to finish so that it can print all the results.</span>
<span class="comment-copy">Ok, @quamrana thanks. Possible there is a difference between this question and you linked question? Here we want to call the same method in multiple instances while there they call the same method over different parameters.</span>
<span class="comment-copy">Thanks! What the difference between <code>multi_process</code> and <code>multiprocessing </code> library in python?</span>
<span class="comment-copy">The multiple instances will run the same method over some dataset, for example, compute the mean. I believe it is CPU intensive task.</span>
<span class="comment-copy">@ytutow thats its CPU intensive task. Use <code>multiprocessing</code> its Python's standard library. I am not sure if there is any mulit_process module in Python. Is it a 3rd party module?</span>
<span class="comment-copy">Sorry I am not very familiar with <code>multiprocessing </code></span>
<span class="comment-copy">@ytutow The answer gives an example of how you can use it. Read the docs I have attached for more info. Does this answer your question? If yes, you can mark this as accepted?</span>
