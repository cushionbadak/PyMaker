<div class="post-text" itemprop="text">
<p>I want to create a dictionary from a text file in python. My text file is:</p>
<pre><code>John Doe 
Apples
Bananas
Oranges

Jane Dear
Apples
Bananas
Peaches
</code></pre>
<p>The format of the text file is:</p>
<pre><code>Name
Fruit 
Fruit
.....
Fruit
empty line
Name
Fruit
.....
</code></pre>
<p>I want to return a dictionary with the fruits as the key and the names as the values such as:</p>
<pre><code>{"Apples":["John Doe", "Jane Dear"], "Bananas":["John Doe", "Jane Dear"], "Peaches":["Jane Dear"], "Oranges":["John Doe"]}
</code></pre>
<p>I'm just not entirely sure on how to format the text file. Thanks in advance!</p>
<p>EDIT: What I have done so far</p>
<pre><code>def common(text):
x = open(text, "r")
a = {}
b = []
line = x.readline()
while line != "":
    b.append(line)
    line = courses.readline()
return b

def create_dict(lst):
a = []
b = {}
names = []
fruits = []
while lst != []:
   if " " in lst[1]: 
      names += lst[1]
   else:
      fruits += lst[1]
</code></pre>
<p>This is where I'm sort of lost...</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do the following, using some handy utils like <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> and <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a>:</p>
<pre><code>from collections import defaultdict
from itertools import groupby

with open('work/test.txt') as f:
    d = [
        [s.strip() for s in g] 
        for k, g in groupby(f, key=lambda l: bool(l.strip())) if k
    ]
    # [['John Doe', 'Apples', 'Bananas', 'Oranges'], ['Jane Dear', 'Apples', 'Bananas', 'Peaches']]
dd = defaultdict(list)
for l in d:
    for fruit in l[1:]:
        dd[fruit].append(l[0])
dd
# {'Apples': ['John Doe', 'Jane Dear'], 'Bananas': ['John Doe', 'Jane Dear'], 'Peaches': ['Jane Dear'], 'Oranges': ['John Doe']}
</code></pre>
<p>The conditional comprehension groups the lines in the file into groups based on the property of being empty or not and then only takes the groups of non-empty lines (<code>if k</code>). The subsequent use of a <code>defaultdict</code> avoids some bumpy code to check if keys are already present.</p>
</div>
<div class="post-text" itemprop="text">
<p>A little more clarity is needed on the format of the text file. For the sake of this answer I am assuming the format of the text file is something like this.</p>
<pre><code>NAME_1
FRUIT_1
FRUIT_2
FRUIT_3

NAME_2
FRUIT_1
FRUIT_2
FRUIT_3
.
.

NAME_3
.
.
.
</code></pre>
<p>Now if this is the case, i.e there's always a double line break('\n\n') after name of fruits and the sequence always starts with the name of person, then here is a way of getting this dictionary populated.</p>
<pre><code>with open('/path/to/file', 'r') as handle:
    text = handle.read()
text = text.split('\n\n')
result = dict()
for item in text:
    item = item.split('\n')
    for fruit in item[1:]:
        if fruit in result.keys():
            result[fruit].append(item[0])
        else:
            result[fruit] = [item[0]]
</code></pre>
<p>Hope this helps</p>
</div>
<span class="comment-copy">Please show your attempts so far.</span>
<span class="comment-copy"><code>text = handle.read()</code> shows error, please check for version as well</span>
<span class="comment-copy">The problem was with the file being opened in write mode, it's fixed now.</span>
<span class="comment-copy">still no result</span>
<span class="comment-copy">Can u share the text file you are using?</span>
<span class="comment-copy">I have used your file example. here is the result. <code>{'FRUIT_1': ['NAME_1', 'NAME_2'], 'FRUIT_2': ['NAME_1', 'NAME_2'], 'FRUIT_3': ['NAME_1', 'NAME_2'], '': ['NAME_2']}</code></span>
