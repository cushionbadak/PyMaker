<div class="post-text" itemprop="text">
<p>Not sure what this would be called but I have something like:</p>
<pre><code>dict = {
    1: "{} test string 01",
    2: "{} test string 02",
    3: "{} test string 03
}
</code></pre>
<p>If i wanted to loop through each and concatenate them so that <code>3:</code> contains <code>{} test string 03 {} test string 02 test string01</code> and <code>2:</code> contains <code>{} test string 02 {} test string 01</code>, how would I go about doing that?</p>
<p>If the dict only had a few entries it'd be easy, but if the dict contained 20+ items, what's the most efficient way of kind of doing a...backwards recursion (not sure if that's the right term)?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.accumulate</code> for Python3:</p>
<pre><code>import itertools
import operator
import re
dict = {
1: "{} test string 01",
2: "{} test string 02",
3: "{} test string 03"
}
new_dict = {a:' '.join(re.split('(?&lt;=\d\{\})\s(?=test)', b)[::-1]) for a, b in zip(sorted(dict.keys()), sorted(itertools.accumulate(sorted(dict.values(), key=lambda x:int(x[-1])), func=operator.add)))}
</code></pre>
<p>Output:</p>
<pre><code>{1: '{} test string 01', 2: 'test string 02 {} test string 01{}', 3: 'test string 03 test string 02{} {} test string 01{}'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this one:</p>
<pre><code>d = {
    1: "{} test string 01",
    2: "{} test string 02",
    3: "{} test string 03"
}

values = list(d.values())
keys = list(d.keys())

d = dict((i , ' '.join(val for val in reversed(values[:i]))) for i in keys)
print(d)
</code></pre>
<p>Output:</p>
<pre><code>{1: '{} test string 01', 2: '{} test string 02 {} test string 01', 3: '{} test string 03 {} test string 02 {} test string 01'}
</code></pre>
</div>
<span class="comment-copy">Unfortunately this isn't a discussion forum or tutorial service. Please take the time to read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and the other links on that page.  You should invest some time working your way through <a href="https://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">the Tutorial</a>, practicing the examples. It will give you an introduction to the tools Python has to offer and you may even start to get ideas for solving your problem.</span>
<span class="comment-copy">The contents of dictionaries is unordered, so the output would be somewhat random unless it's sorted (by key value in this case).</span>
