<div class="post-text" itemprop="text">
<p>Could someone explain how Python understands this <code>key</code> variable? If <code>key</code> is not defined anywhere else, why does this work?</p>
<pre><code>tweet = {}
tweet['text'] = "#Python rocks!"
tweet['id'] = 1293827492

tweet['user'] = {}
tweet['user']['screen_name'] = "Linus__Torvalds"
tweet['user']['id'] = 829817283

tweet['media'] = {}
tweet['media']['hashtags'] = ["#Python"]

for key in tweet:
    print "%s =&gt; %s" % (key, tweet[key])
</code></pre>
<p>I've seen the <code>key</code> variable changed to other things as well (e.g. <code>dict_key</code>) to make it more readable, however I still don't grasp how Python understands what I'm asking it parse when it gets to the print line. How does it know what <code>key</code> and <code>tweet[key]</code> actually are?</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>for</code> loop is a kind of assignment: <code>for x in y: ...</code> works by getting an iterator for <code>y</code>, then repeating the body of the loop for each element returned by the iterator, after assigning it to <code>x</code>.</p>
<p>An iterator for a <code>dict</code> simply returns the keys, so given your <code>dict</code> defined by</p>
<pre><code>tweet = {}
tweet['text'] = "#Python rocks!"
tweet['id'] = 1293827492

tweet['user'] = {}
tweet['user']['screen_name'] = "Linus__Torvalds"
tweet['user']['id'] = 829817283

tweet['media'] = {}
tweet['media']['hashtags'] = ["#Python"]
</code></pre>
<p>the <code>for</code> loop is equivalent to</p>
<pre><code>key = 'text'
print "%s =&gt; %s" % (key, tweet[key])
key = 'id'
print "%s =&gt; %s" % (key, tweet[key])
key = 'user'
print "%s =&gt; %s" % (key, tweet[key])
key = 'media'
print "%s =&gt; %s" % (key, tweet[key])
</code></pre>
<p>You can also think of the <code>for</code> loop as an optimized version of the following <code>while</code> loop, in which you need to work with the iterator explicitly:</p>
<pre><code>i = iter(tweet)
while True:
    try:
        key = next(i)
    except StopIteration:
        break
    print "%s =&gt; %s" % (key, tweet[key])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Read the tutorial <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">section on dicts</a>.  (Reading everything before that would be good too.) Then read the first example in the following section, which is similar to your code.  (And I would recommend changing your code to follow the example, except use <code>value</code> instead of <code>v</code>.</p>
<p>You can use any name you want for the target name, which repeatedly gets bound to objects yielded by the iterable.  You used <code>key</code>, with is a standard name for a dict key.  I don't think that <code>dict_key</code> is any better.</p>
<p>In your code, the name <code>key</code> is bound to a different key, such as <code>id</code>, <code>media</code>, or <code>text</code>, in no particular order, each iteration.  The name binding is like doing an assigment statement, <code>key = 'id'</code>, or whatever.  I hope this helps.</p>
</div>
<span class="comment-copy">Because <i>you've told it?</i> <code>for key in tweet:</code> is iterating over the keys of the dictionary in the same way that <code>for thing in [1, 2, 3]:</code> is iterating over the elements in the list; with any <code>for</code> loop, Python assigns each item in the iterable, in turn, to the loop variable, then runs the nested block. Also note that your example seems to be missing a closing quote, hence the weird formatting.</span>
<span class="comment-copy">There are at least 3 closing quotes missing. If you could fix those, it would be a start.</span>
<span class="comment-copy">Just to make sure I'm understanding this correctly, I could put whatever in my <i>for</i> loop and it will just store everything in there and iterate it as I tell it to?  For example I could write (code in imgur link)  <a href="https://imgur.com/a/tGEPd" rel="nofollow noreferrer">imgur.com/a/tGEPd</a>  And it would return something like Desert =&gt; Rattlesnake?  (I get a TypeError with that code but I can work on it)</span>
<span class="comment-copy">You could do <code>for key, value in your_dictionary.items():</code>. Then you get the key <b>and</b> the value.</span>
<span class="comment-copy">Great feedback, thank you!</span>
