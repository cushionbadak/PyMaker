<div class="post-text" itemprop="text">
<p>I've asked this question in the past here: <a href="https://stackoverflow.com/questions/47519761/replacing-part-of-string-keeps-adding-extra-backslash?noredirect=1#comment81996017_47519761">"Replacing part of string keeps adding extra backslash"</a> but the issue is still proving troublesome to resolve.</p>
<p>ISSUE: Using <code>re.sub()</code> I am unable to insert an odd amount of backslashes into part of my string. Assuming I have the following string:</p>
<pre><code>sample_string = 'foo_${bar}_${wasd}_asdf$'
</code></pre>
<p>I want my output string to be the following:</p>
<pre><code>new_string = 'foo_\\\\\${bar}_\\\\\${wasd}_asdf$'
</code></pre>
<p>Here is just a small sample of everything that I have tried:</p>
<pre><code>new_string = re.sub(r'\$\{bar\}_\$\{wasd\}', "\\\\\\\\\\${bar}_\\\\\\\\\\${wasd}", sample_string)
#new_string ends up being: 'foo_\\\\\\${bar}_\\\\\\${wasd}_asdf$'

new_string = re.sub(r'[$][{]', "\\\\\\\\\\${", sample_string)
#new_string ends up being: 'foo_\\\\\\${bar}_\\\\\\${wasd}_asdf$'

new_string = re.sub(r'[$][{]', r"\\\\\${", sample_string)
#new_string ends up being: 'foo_\\\\\\${bar}_\\\\\\${wasd}_asdf$'
</code></pre>
<p>As you can see, I've treated the replacement string as both a regular string where backslash is used as an escape character, and as a raw string where the backslash is not treated as an escape. Strangely, both methods of approach insert 6 backslashes into <code>new_string</code> rather than 5.</p>
<p>Also, here are some outputs below of when I tried to insert a different number of backslashes into <code>sample_string</code>:</p>
<pre><code>#Insert 3 backslashes - works as NOT expected
new_string = re.sub(r'[$][{]', r"\\\${", sample_string)
#new_string ends up being: 'foo_\\\\${bar}_\\\\${wasd}_asdf$'

#Insert 4 backslashes - works AS expected
new_string = re.sub(r'[$][{]', r"\\\\${", sample_string)
#new_string ends up being: 'foo_\\\\${bar}_\\\\${wasd}_asdf$'

#Insert 5 backslashes - works as NOT expected
new_string = re.sub(r'[$][{]', r"\\\\${", sample_string)
#new_string ends up being: 'foo_\\\\\\${bar}_\\\\\\${wasd}_asdf$'

#Insert 6 backslashes - works AS expected
new_string = re.sub(r'[$][{]', r"\\\\\\${", sample_string)
#new_string ends up being: 'foo_\\\\\\${bar}_\\\\\\${wasd}_asdf$'
</code></pre>
<p>If I could get some help as to why I can't substitute in 5 or 3 backslashes correctly, but I can substitute in 4 or 6 backslashes correctly, I would GREATLY appreciate it!!</p>
</div>
<div class="post-text" itemprop="text">
<p>That <em>is</em> strange. I am guessing it has to do with Python choosing whether to display escape characters. For instance, if I do:</p>
<pre><code>new_string = re.sub(r'\${', r'\\\\\\\\\\${', sample_string)  # five sets of "\\"
new_string
# 'foo_\\\\\\\\\\${bar}_\\\\\\\\\\${wasd}_asdf$'  --- still five sets of "\\"
print(new_string)
# foo_\\\\\${bar}_\\\\\${wasd}_asdf$  --- just five "\"
</code></pre>
<p>é voilà, five back-slashes. I think if you just display the string, Python displays it with escaped back-slashes. If you print it, Python processes the back-slash escapes.</p>
<p>Interestingly, Python seems to assume that you mean to specify escaped back-slashes in your replacement string. Example:</p>
<pre><code>new_string = re.sub(r'\${', r'\${', sample_string)  # shouldn't do anything, right?
new_string
# 'foo_\\${bar}_\\${wasd}_asdf$'  --- escapes were added!
print(new_string)
# foo_\${bar}_\${wasd}_asdf$  --- now we have explicit back-slashes!
</code></pre>
<p>So on the match side, characters like <code>"$"</code> still need to be escaped. Makes sense; these are special characters to regex, so if we want to match the actual dollar-sign character we have to escape it. But on the <em>replacement string</em> side, these characters no longer have syntactic meaning, and so need not be escaped. Thus any extra escape sequences <em>themselves</em> get escaped! Thus the second example that looks like it shouldn't do anything in fact adds a back slash in front of the dollar-sign, which Python will escape if you display the string directly, making it look like two are added. If you want what's actually in the string, it looks like you have to print it.</p>
<p>The last two paragraphs of the <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">string literals docs</a> seem to support this (thanks @glibdud for pointing this out). Some select quotes:</p>
<blockquote>
<p>Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., the backslash is left in the result. [...]</p>
<p>Even in a raw literal, quotes can be escaped with a backslash, but the backslash remains in the result; for example, <code>r"\""</code> is a valid string literal consisting of two characters: a backslash and a double quote[...]</p>
</blockquote>
</div>
<span class="comment-copy">Hint: try <code>print</code>ing one of these <code>new_string</code>s that has an "even" number of backslashes.</span>
<span class="comment-copy">Works fine for me when I use <code>r"\\\\\\\\\\${"</code> as the substitution</span>
<span class="comment-copy">If the provided answer helped, please mark it as "accepted" when you are able.</span>
<span class="comment-copy">See the section on <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">string literals</a>.</span>
<span class="comment-copy">@Engineero thank you! I think you really hit the nail in the head with the last part of your response. It is a bit strange for me that rather than being able to go on with using <code>new_string</code> where the raw version of 'new_string' contains 5 backslashes (as intended), I am forced to have the raw version of 'new_string' contains 10 backslashes, and can't even have it contain the proper amount of backslashes without printing it first...</span>
