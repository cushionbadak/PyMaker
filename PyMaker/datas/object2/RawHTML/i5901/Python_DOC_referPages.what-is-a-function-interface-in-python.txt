<div class="post-text" itemprop="text">
<p>In Allen Downey's "Think Python, version 2.0.17" for Python 2.x, Downey has this to say about a function's interface:</p>
<blockquote>
<p>The <strong>interface</strong> of a function is a summary of how it is used: what are the parameters? What
  does the function do? And what is the return value? An interface is “clean” if it is “as
  simple as possible, but not simpler. (Einstein)”</p>
</blockquote>
<p>I don't get this at all. Is an interface a written summary, like a docstring, that is appended to the function somewhere? Or is it something else entirely?</p>
<p>I'm a complete programming beginner, so I don't have a lot of context to draw on. I can't find any explanations that I can understand at my current (very low) level!</p>
<p><strong>Quick example (though not strictly necessary for answering the question):</strong> Downey talks about drawing circles (in the context of Turtleworld). His function is </p>
<pre><code>def circle(t, r):
    circumference = 2 * math.pi * r
    n = 50
    length = circumference / n
    polygon(t, n, length)
</code></pre>
<p>in which <code>t</code> is a turtle from Turtleworld (he calls it Bob), and <code>r</code> is the radius of the circle to be drawn. Polygon is a function that takes the turtle, the number of sides <code>n</code> of the polygon and length (of its sides) as arguments, and draws a polygon with those specs. With sufficiently high <code>n</code>, this looks like a circle.</p>
<p>He then comments:</p>
<blockquote>
<p>One limitation of this solution is that <code>n</code> is a constant, which means that for very big circles,
  the line segments are too long, and for small circles, we waste time drawing very small
  segments. One solution would be to generalize the function by taking <code>n</code> as a parameter.
  This would give the user (whoever calls <code>circle</code>) more control, but the interface would be
  less clean.</p>
</blockquote>
<p>Again, what interface? What is an interface? Alright, let's roll with it for a second.</p>
<blockquote>
<p>In this example, r belongs in the interface because it speciﬁes the circle to be drawn. <code>n</code> is
  less appropriate because it pertains to the details of how the circle should be rendered. Rather than clutter up the interface, it is better to choose an appropriate value of <code>n</code> depending on <code>circumference</code>:</p>
</blockquote>
<pre><code>def circle(t, r):
    circumference = 2 * math.pi * r
    n = int(circumference / 3) + 1
    length = circumference / n
    polygon(t, n, length)
</code></pre>
<p><em>What?</em> You don't want to clutter up the interface (whatever that is), so you...clutter up the interface? Or the function? Or the body of the function? I mean, I don't know what an interface is, but whatever it is - this solution only looks like it cluttered up the whole function even more, instead of just adding a parameter.</p>
<p>And, seeing as I haven't encountered a written summary of how the function is used anywhere so far, I'm starting to think my interpretation of Downey's function interface definition is all wrong.</p>
<p>Again, this is only an example, and I'd like to stress that I would like to understand what a function interface is <em>in general</em>, not just pertaining to this concrete situation. But this example is a good start, I think.</p>
</div>
<div class="post-text" itemprop="text">
<p>The interface is what <em>everybody else</em> sees. When someone has to use this function, they have to know the name, the arguments it accepts, and what kind of result it will produce. </p>
<p>To give a different example: You probably know by now what the <code>print()</code> function will do. You don't have to know <em>how</em> that function works, all you know is what it'll do when you call it, and you know what kinds of things you can pass to it. All the things you need to know to use the <code>print()</code> function is the interface.</p>
<p>You used the concept in your question too. You explained to us what the <code>polygon()</code> function does:</p>
<blockquote>
<p>Polygon is a function that takes the turtle, the number of sides <code>n</code> of the polygon and length (of its sides) as arguments, and draws a polygon with those specs.</p>
</blockquote>
<p>When you did that, you described the interface of that function.</p>
<p>Now, why does adding <code>n</code> as an argument to <code>circle()</code> clutter up the interface? Because you as a user will now have to understand what value you need to give <code>n</code>. And to understand that you need to know more about how the actual implementation draws circles. Ideally, you as a caller <em>should not need to know about this implementation detail</em>. You just wanted a circle, why can't the function just do that, why does in need to know how many segments are involved. </p>
<p>What does and does not make a clean interface is subjective, something you build a sense for as you write software. I wouldn't worry too much about this just now.</p>
</div>
<div class="post-text" itemprop="text">
<p>The author would appear to be talking about the <em>function</em> signature.</p>
<pre><code>def add(x, y):
   pas ##some implementation here
</code></pre>
<p>tells you the function takes two things. 
You can't see what happens inside from this.
If you look at the <em>implementation</em> you can see what happens inside.</p>
<p>Why does this matter?
That's a different question - but if a function takes lots of parameters it can get confusing to use.</p>
</div>
<span class="comment-copy">The "interface" is the "public facing bit - what a caller uses. i.e. the bit betwenn the paraens: <code>(</code> and <code>)</code></span>
<span class="comment-copy">The interface is just what the user of the function sees: the signature. Someone calling <code>circle</code> doesn't need to know the internal structure; they just need to know that it takes two arguments <code>t</code> and <code>r</code>, and that there should be a global(?) variable named <code>n</code> defined in the calling scope.</span>
<span class="comment-copy">@chepner "The interface is just what the user of the function sees" - alright, but you follow this up by saying that they need to know that there should be a global variable named n defined in the calling scope. How would a user "see" this? And if they could somehow see it, how is not using n as a parameter "cleaner" than not using it as a parameter, if in the end they have to know that it's there. Your definition seems quite different from that of doctorlove?</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2866987/what-is-the-definition-of-interface-in-object-oriented-programming">What is the definition of "interface" in object oriented programming</a></span>
<span class="comment-copy">"You don't have to know how that function works, all you know is what it'll do when you call it, and you know what kinds of things you can pass to it. All the things you need to know to use the print() function is the interface." But how would somebody know this about a user-defined function like circle, or polygon? Do I have to explain that somewhere? Is that somehow built-in?</span>
<span class="comment-copy">@IusKlesar: generally, 'the documentation'. The code itself can be the documentation, so you could expect the user to read the code, so put in a good docstring on the function that explains what it does. Python is highly introspectable, meaning that other tools can do the reading for you, so your IDE can show you the interface (including the docstring).</span>
<span class="comment-copy">"Ideally, you as a caller should not need to know about this implementation detail." right, but @chepner said (in a comment to my main question) that users need to know that there's an <code>n</code> in the calling scope (whatever a calling scope is)? So...they <i>do</i> need to know about the implementation?</span>
<span class="comment-copy">@IusKlesar: but documentation can also be separate. How do you know what the <code>print()</code> function does? Hopefully you know to look that up in the <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">Python documentation</a>.</span>
<span class="comment-copy">@IusKlesar: see the rest of my answer, where I specifically address why adding <code>n</code> to the interface is not a clean solution. If you add <code>n</code> as an argument to the <code>circle()</code> function, you are asking the caller to understand what <code>n</code> <i>does</i>. What does <code>n=10</code> mean vs <code>n=100</code>? That's messy interface design, the function should ideally just calculate a suitable value for <code>n</code>.</span>
