<div class="post-text" itemprop="text">
<p>I am trying to define a function that returns a list of all combinations of legal coins that amount to a given sum. Let's say the given sum were <em>10</em> and the legal coins were <em>5, 2, 3</em>. In that case the function should return:</p>
<pre><code>[[2, 2, 2, 2, 2], [3, 3, 2, 2], [5, 3, 2], [5, 5]]
</code></pre>
<p>I've managed to create a recursive function that gives me the correct result, but by printing the correct answers on separate lines and mixing in a bunch of <code>None</code>'s.</p>
<p>How can I return the correct answer to a list of legal solutions without terminating the function prematurely. I know that my function is ineffective. I can think of some improvements myself, and will implement them later.</p>
<p>Here's my code:</p>
<pre><code>def count_change(tot_amount, coins, used_coins=[]):

    # Sort coins and get rid of coins that are too big
    if len(used_coins) == 0:
        coins = [x for x in sorted(coins) if x &lt;= tot_amount]

    for coin in coins:
        # If the first condition holds I want to add the printed
        # statement to a list of solution instead of printing
        if tot_amount - sum(used_coins) == coin:
            print(used_coins + [coin])
        elif tot_amount - sum(used_coins) &gt; coin:
            print(count_change(tot_amount,
                               [x for x in coins if x &lt;= coin],
                               used_coins + [coin]))

print(count_change(10, [5, 2, 3]))
</code></pre>
<p>This is the output:</p>
<pre><code>[2, 2, 2, 2, 2]
None
None
None
None
None
None
None
[3, 3, 2, 2]
None
None
None
None
None
None
[5, 3, 2]
None
[5, 5]
None
None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You just need to turn your function into a <a href="https://docs.python.org/3/tutorial/classes.html#generators" rel="nofollow noreferrer">generator</a>, by replacing those <code>print</code> calls with <code>yield</code>.</p>
<p>I've also changed the default of <code>used_coins</code> to <code>None</code>, since you don't really want a default mutable argument here. See <a href="https://stackoverflow.com/questions/1132941/least-astonishment-and-the-mutable-default-argument">“Least Astonishment” and the Mutable Default Argument</a> for details.</p>
<pre><code>def count_change(tot_amount, coins, used_coins=None):
    # Sort coins and get rid of coins that are too big
    if used_coins is None:
        used_coins = []
        coins = [x for x in sorted(coins) if x &lt;= tot_amount]

    for coin in coins:
        # If the first condition holds we have a valid combination 
        if tot_amount - sum(used_coins) == coin:
            yield used_coins + [coin]
        # Otherwise, if this coin is small enough, recurse to find combinations
        # that use this coin in addition to the existing used_coins
        elif tot_amount - sum(used_coins) &gt; coin:
            yield from count_change(tot_amount,
                               [x for x in coins if x &lt;= coin],
                               used_coins + [coin])

for t in count_change(10, [5, 2, 3]):
    print(t)
</code></pre>
<p><strong>output</strong></p>
<pre><code>[2, 2, 2, 2, 2]
[3, 3, 2, 2]
[5, 3, 2]
[5, 5]
</code></pre>
<hr/>
<p>If you do actually need a list of the solutions, then simply run the generator into a list, like this:</p>
<pre><code>seq = list(count_change(10, [5, 2, 3]))
print(seq)
</code></pre>
<p><strong>output</strong></p>
<pre><code>[[2, 2, 2, 2, 2], [3, 3, 2, 2], [5, 3, 2], [5, 5]]
</code></pre>
</div>
