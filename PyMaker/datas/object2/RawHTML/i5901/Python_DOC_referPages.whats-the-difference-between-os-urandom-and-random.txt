<div class="post-text" itemprop="text">
<p>On the random module python <a href="https://docs.python.org/2/library/random.html" rel="nofollow noreferrer">page (Link Here)</a> there is this warning:</p>
<blockquote>
<p><strong>Warning:</strong> The pseudo-random generators of this module should not be used for security purposes. Use os.urandom() or SystemRandom if you
  require a cryptographically secure pseudo-random number generator.</p>
</blockquote>
<ul>
<li><p>So whats the difference between os.urandom() and random? </p></li>
<li><p>Is one closer to a true random than the other? </p></li>
<li><p>Would the secure random be overkill in non-cryptographic instances?</p></li>
<li><p>Are there any other random modules in python?</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You can read up on the distinction of cryptographically secure RNG <a href="https://crypto.stackexchange.com/a/39188/24848">in this fantastic answer over at Crypto.SE</a>.</p>
<p>The main distinction between <code>random</code> and the system RNG like <code>urandom</code> is one of use cases. <code>random</code> implements deterministic PRNGs. There are scenarios where you want exactly those. For instance when you have an algorithm with a random element which you want to test, and you need those tests to be repeatable. In that case you want a deterministic PRNG which you can <strong>seed</strong>.</p>
<p><code>urandom</code> on the other hand cannot be seeded and draws its source of entropy from many unpredictable sources, making it <em>more random</em>.</p>
<p><strong><em>True</em></strong> random is something else yet and you'd need a physical source of randomness like something that measures atomic decay; that is truly random in the physical sense, but usually overkill for most applications.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>So whats the difference between os.urandom() and random?</p>
</blockquote>
<p>Random itself is predicable. That means that given the same seed the sequence of numbers generated by random is the same. Take a look at <a href="https://stackoverflow.com/questions/31356466/is-pythons-random-number-generation-easily-reproducible">this question</a> for a better explanation. <a href="https://stackoverflow.com/questions/2145510/random-is-barely-random-at-all">This question</a> also illustrates than random isn't really random.</p>
<p>This is generally the case for most programming languages - the generation of random numbers is not truly random. You can use these numbers when
cryptographic security is not a concern or if you want the same pattern of numbers to be generated. </p>
<blockquote>
<p>Is one closer to a true random than the other?</p>
</blockquote>
<p>Not sure how to answer this question because truly random numbers cannot be generated. Take a look at <a href="https://engineering.mit.edu/engage/ask-an-engineer/can-a-computer-generate-a-truly-random-number/" rel="nofollow noreferrer">this article</a> or <a href="https://softwareengineering.stackexchange.com/questions/124233/why-is-it-impossible-to-produce-truly-random-numbers">this question</a> for more information.</p>
<p>Since random generates a repeatable pattern I would say that <code>os.urandom()</code> is certainly more "random"</p>
<blockquote>
<p>Would the secure random be overkill in non-cryptographic instances?</p>
</blockquote>
<p>I wrote the following functions and there doesn't appear to be a huge time difference. However, if you don't need cryptographically secure numbers
it doesn't really make sense to use <code>os.urandom()</code>. Again it comes down to the use case, do you want a repeatable pattern, how "random" do you want your numbers, etc? </p>
<pre><code>import time
import os
import random


def generate_random_numbers(x): 
  start = time.time()
  random_numbers = []
  for _ in range(x):
    random_numbers.append(random.randrange(1,10,1))
  end = time.time()
  print(end - start)


def generate_secure_randoms(x):
  start = time.time()
  random_numbers = []
  for _ in range(x):
    random_numbers.append(os.urandom(1))
  end = time.time()
  print(end - start)


generate_random_numbers(10000)
generate_secure_randoms(10000)
</code></pre>
<p>Results:</p>
<pre><code>0.016040563583374023
0.013456106185913086
</code></pre>
<blockquote>
<p>Are there any other random modules in python?</p>
</blockquote>
<p>Python 3.6 introduces the new <a href="https://docs.python.org/3.6/library/secrets.html" rel="nofollow noreferrer">secrets module</a> </p>
</div>
<span class="comment-copy">There is a module in python 3: <a href="https://docs.python.org/3/library/secrets.html" rel="nofollow noreferrer" title="secrets">secrets</a> which <b>is</b> designed for cryptography.</span>
<span class="comment-copy">There is also an answer to this on crypto.stackexchange: <a href="https://crypto.stackexchange.com/questions/39186/what-does-it-mean-for-a-random-number-generator-to-be-cryptographically-secure" title="what does it mean for a random number generator to be cryptographically secure">crypto.stackexchange.com/questions/39186/â€¦</a></span>
<span class="comment-copy">@quamrana my question is not about cryptography. I want to know the difference between two random modules in python-2.7 one just so happens to be used for cryptography</span>
<span class="comment-copy">@quamrana I can see how you are confused, my question had a pretty confusing title which did not represent my question</span>
