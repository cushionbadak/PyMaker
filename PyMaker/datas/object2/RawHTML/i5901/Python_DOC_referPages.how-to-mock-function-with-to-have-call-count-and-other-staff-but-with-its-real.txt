<div class="post-text" itemprop="text">
<p>Is it possible just to wrap some function with <code>mock</code> library to have all usefull mock functionality (like func.call_count etc) and without patching the function execution?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock" rel="nofollow noreferrer"><code>wraps</code></a> parameter. Unless you've explicitly set the <code>return_value</code> attribute for your mock, the mock will return whatever the wrapped thing returns. If you use an attribute on your mock, access will pass through to the wrapped object, and the returned value will <em>also</em> be wrapped in a mock object.</p>
<p>You can also use the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect" rel="nofollow noreferrer"><code>side_effect</code></a> parameter. If it's a function, the mock will call the given function with the same arguments as the mock function, and the mock function will return whatever the given function returns. (There's more to it than that; see documentation for details.)</p>
<pre><code>def wrapped_function():
    pass

wrapper = Mock(side_effect=wrapped_function)
</code></pre>
</div>
<span class="comment-copy">What do you mean by mock module? Just a module that does not do anything? Or is mock a library?</span>
<span class="comment-copy">@mrCarnivore I mean unittest.mock library (edited)</span>
<span class="comment-copy">Yes; that's what the <code>wraps</code> argument to <code>Mock</code> is for.</span>
