<div class="post-text" itemprop="text">
<p>Consider the following code:</p>
<pre><code>list_example = [1,2,3,4,5,6,7,8,9]
List_of_ball_permutations = []

    for i in list_example :
       for j in list_example:
           if j&gt;i:
               List_of_ball_permutations.append([i,j])
</code></pre>
<p>This will result in a list being formed as follows:</p>
<pre><code>[[1, 2],
 [1, 3],
 [1, 4],
 [1, 5],
 [1, 6],
 [1, 7],
 [1, 8],
 [1, 9],
 [2, 3],
 [2, 4],
 [2, 5],
 [2, 6],
 [2, 7],
 [2, 8],
 [2, 9],
 [3, 4],
 [3, 5],
 [3, 6],
 [3, 7],
 [3, 8],
 [3, 9],
 [4, 5],
 [4, 6],
 [4, 7],
 [4, 8],
 [4, 9],
 [5, 6],
 [5, 7],
 [5, 8],
 [5, 9],
 [6, 7],
 [6, 8],
 [6, 9],
 [7, 8],
 [7, 9],
 [8, 9]]             
</code></pre>
<p>Whereby each number is paired with another number in the list and no repeats i.e. if [1,2] exists then [2,1] will not be created also pairs with two of the same numbers e.g. [1,1]  will not be created either. </p>
<p>However now consider a list of objects whereby I would like to pair each object with one other object (not itself and no repeats) in a similar fashion as the numbers were. For some reason my code does not allow me to do that as it presents a message  '&gt;' not supported between instances of 'Ball' and 'Ball'. (The class I created was called Ball which generated the objects).</p>
<p>Any help to resolve this issue would be very much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Of course, <code>itertools</code> is the proper "pythonic" solution: </p>
<pre><code>import itertools
list(itertools.combinations(["a", "b", "c"], 2))
</code></pre>
<p>However, you have the correct idea, you can generate all the indices of the objects to be paired, and retrieve them:</p>
<pre><code>def get_pairs(n):
    for i in range(n) :
        for j in range(i+1, n):
            yield (i, j)

def get_objects_pairs(objects):
    for first, second in get_pairs(len(objects)):
        yield objects[first], objects[second]

objects = ['a', 'ball', 'toothbrush']
for pair in (get_objects_pairs(objects)):
    print(pair)
</code></pre>
<h3>output:</h3>
<pre><code>('a', 'ball')
('a', 'toothbrush')
('ball', 'toothbrush')
</code></pre>
</div>
<span class="comment-copy">Read about <code>itertools.combinations</code></span>
<span class="comment-copy">@MichaelButscher not permutations, <a href="https://docs.python.org/3/library/itertools.html#itertools.combinations" rel="nofollow noreferrer">combinations</a> ;) e.g. <code>list(combinations(["a", "b", "c"], 2))</code></span>
<span class="comment-copy">@alfasin Right, thanks.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/464864/how-to-get-all-possible-combinations-of-a-list-s-elements">How to get all possible combinations of a listâ€™s elements?</a></span>
<span class="comment-copy"><code>List_of_ball_permutations = [list(x) for x in itertools.combinations(list_example, 2)]</code> or <code>List_of_ball_permutations = list(map(list, itertools.combinations(list_example, 2)))</code></span>
<span class="comment-copy">how would you do what you just did but ensure that [a,a] and [ball,ball] are not included</span>
<span class="comment-copy">Yes, I realized that you did not want the same objects paired, and modified the answer</span>
