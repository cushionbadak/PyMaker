<div class="post-text" itemprop="text">
<p>I am currently working on a python's String and List.</p>
<p>When I assign string in variable <code>str="string"</code> and try to access it first character by <code>str[0]</code> it works perfectly and give <code>"s"</code>.</p>
<p>But, when I try to find character <code>str[0][0][0][0][0][0]</code> it again gives  <code>"s"</code>. But when I give <code>str[0][1]</code> it gives an error: </p>
<pre><code>IndexError: string index out of range 
</code></pre>
<p>Its Correct. My Question is Why Simple String Character has So many array Dimensions? and it did not given any error and print 0 character of string when <code>str[0][0][0][0][0][0]</code>. What is Data Structure of String?</p>
<p>My Code is </p>
<pre><code>str="string"
print((str[0][0][0][0][0][0][0][0])) # Working, but my Question is Why Working
print((str[1][0][0][0][0]))          # Working
print((str[2][0][0][0][0]))          # Working
print((str[3][0][0][0][0]))          # Working
list=["0","p",0]
print(list[0][0][0])                 # Working
</code></pre>
<p>My Output is:</p>
<pre><code>s
t
r
i
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why shouldn't it work?</p>
<p>Indexing a string returns a one element string which is again indexable and returns the same value:</p>
<pre><code>&gt;&gt;&gt; 's'[0]
's'
</code></pre>
<p>since it consists of one element, you can continue indexing the zero-element <code>[0]</code> as much as you want.</p>
<p>This is explained in the <a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">standard type hierarchy</a> section of the Python Reference manual:</p>
<blockquote>
<p><strong>Strings</strong></p>
<p>A string is a sequence of values that represent Unicode code points. All the code points in the range U+0000 - U+10FFFF can be represented in a string. <em>Python doesnâ€™t have a char type; instead, every code point in the string is represented as a string object with length 1.</em></p>
</blockquote>
<p><sup><sup>(Emphasis mine)</sup></sup></p>
<hr/>
<p>Side-note: Don't use names such as <code>str</code>, you mask the built-in <a href="https://docs.python.org/3/library/functions.html#func-str" rel="nofollow noreferrer"><code>str</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python a string is a sequence of characters, but characters are 1-char strings.</p>
<p>So if you access <code>'foobar'[0]</code>, you obtain <code>'f'</code>. Since <code>f</code> is however a string, we can access the first character of that string. Since <code>'f'[0]</code> is <code>'f'</code>. As a result if you access a strings <code>s</code> with <code>s[i][0][0][0]</code>, you thus keep accessing the first character of the string <code>s</code>.</p>
<p>If you write <code>s[i][1]</code> however, this will error, since <code>s[i]</code> is a one-character string, and thus you can not obtain the second character, since there is no such character.</p>
<p>The string itself is not multidimensional, you simply obtain a new string and call the index of that new string. You can add as many <code>[0]</code>s as you like.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is not in Python, it is due to the fact that you assume there is a <code>char</code> type in Python (based on the title of this question).</p>
<p>A string in Python is an array of essentially single element strings. <code>s[0]</code> simply returns the <strong>string</strong> <code>'s'</code>, not a character. <code>s[0]...[0]</code> can be thought of as an infinite recursion that keeps getting the same single element string, <em>infinitely</em> many times.</p>
<p>You can go as deep as you want: (in this case, in order to do it more than 997 times you will need to modify Python`s default allowed recursion depth)</p>
<pre><code>def string_dive(s, count=0):
    if count &lt; 997:
        count += 1
        return string_dive(s[0], count)
    else:
        return s

print(string_dive('string'))
# 's'
</code></pre>
</div>
<span class="comment-copy">You mean string is made from string, not from char.</span>
<span class="comment-copy">@Artier basically, yes. Python does not have a char type.</span>
