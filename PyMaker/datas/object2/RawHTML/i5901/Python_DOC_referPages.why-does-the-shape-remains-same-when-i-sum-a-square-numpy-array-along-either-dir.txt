<div class="post-text" itemprop="text">
<p>I was expecting the shape to be (1,3) when I sum along axis=0 i.e. rows. But the shape remains same in both cases. Why is that?</p>
<pre><code>&gt;&gt;&gt; arr = np.arange(9).reshape(3,3)
&gt;&gt;&gt; arr
array([[0, 1, 2],
   [3, 4, 5],
   [6, 7, 8]])
&gt;&gt;&gt; arr.sum(1)
array([ 3, 12, 21])
&gt;&gt;&gt; arr.sum(1).shape
(3,)
&gt;&gt;&gt; arr.sum(0)
array([ 9, 12, 15])
&gt;&gt;&gt; arr.sum(0).shape
(3,)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>numpy.sum</code> returns:</p>
<blockquote>
<p>An array with the same shape as <code>a</code>, with the <strong>specified axis removed</strong>.</p>
</blockquote>
<p>With one axis removed in both cases, you are left with a singleton tuple.</p>
<p><em>2 axes - 1 specified axis =  1 axis</em></p>
<p>However, passing <code>keepdims</code> as <code>True</code> in both gives different shapes, retaining all the axes in the original array with a corresponding change of length along the specified axis:</p>
<pre><code>&gt;&gt;&gt; arr.sum(axis=0, keepdims=True)
array([[ 9, 12, 15]])
&gt;&gt;&gt; arr.sum(axis=1, keepdims=True)
array([[ 3],
       [12],
       [21]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because summing along the axis of a ND array yields a (N-1)D array. This makes sense if you consider that </p>
<pre><code>np.sum([1,2,3]) == 6  # a 0D 'array'
</code></pre>
<p>If you want to turn your <code>arr.sum(1)</code> into a <code>(1, 3)</code> or <code>(3, 1)</code> 2D array, then use</p>
<pre><code>s = arr.sum(0)[np.newaxis, :]  # (1, 3)
</code></pre>
<p>or</p>
<pre><code>s = arr.sum(1)[:, np.newaxis]  # (3, 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.sum.html" rel="nofollow noreferrer">the documentation</a> this is what you'll get:</p>
<blockquote>
<p>Returns:  </p>
<p>sum_along_axis : ndarray</p>
<p>An array with the same shape as a, with the specified axis removed. If a is a 0-d array, or if axis is None, a scalar is returned. If an output array is specified, a reference to out is returned.</p>
</blockquote>
<p>The shape of <code>arr</code> is indeed <code>(3,3)</code> and is two-dimensional. If you remove one axis you'll be left with a shape of <code>(3,)</code> - which is one-dimensional. </p>
<p>An array with shape <code>(1,3)</code> still has two axes.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>numpy.arrays</code> have a logic which is not the same than  Matlab or even mathematics. From <a href="https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html" rel="nofollow noreferrer">here</a> :</p>
<blockquote>
<p>Handling of vectors (one-dimensional arrays) For array, the vector
  shapes 1xN, Nx1, and N are all different things. Operations like
  A[:,1] return a one-dimensional array of shape N, not a
  two-dimensional array of shape Nx1. Transpose on a one-dimensional
  array does nothing.</p>
</blockquote>
<p>Numpy story began not with linear algebra,  so a one dimension object is always <em>horizontal</em>, cannot be transposed, an so on. It is confusing first time with a different background, but with a lot advantages in other fields. in numpy
 2-dim arrays are lines (dim0) of columns(dim1), like for matrix, but selecting a line or a column return always ... a line !  </p>
<p>As an example :</p>
<pre><code>In [1]: m=np.arange(6).reshape(3,2)

In [2]: m
Out[2]: 
  array([[0, 1],
         [2, 3],
         [4, 5]])

In [3]: m[0,:]  
Out[3]: array([0, 1])

In [4]: m[:,0]
Out[4]: array([0, 2, 4])
</code></pre>
<p>This convention accepted, nothing is very difficult.</p>
</div>
<span class="comment-copy">Shape changes, just the representation of a tuple with one element is like that. More info - <a href="https://wiki.python.org/moin/TupleSyntax" rel="nofollow noreferrer">wiki.python.org/moin/TupleSyntax</a>, <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">Thanks @Moses. Just what I was looking for.</span>
<span class="comment-copy">Passing <code>keepdims=True</code> might be more explicit.</span>
<span class="comment-copy">Yes, I completely forgot about that param. +1</span>
<span class="comment-copy">Linear algebra does distinguish between column and row vectors, but is that universal in mathematics?  Aren't there mathematical formulations that, like <code>numpy</code>, allow arrays to be <code>n</code> dimensions, for n&gt;=0.  Note that the original MATLAB just had 2d matrices, because it was a front end to FORTRAN linear algrebra code.  Higher dimensions, cells, structs are all additions.</span>
<span class="comment-copy">I am not mathematician, but was troubled first times by this feature. It's the reason of this post, Hope it will help some ones.</span>
