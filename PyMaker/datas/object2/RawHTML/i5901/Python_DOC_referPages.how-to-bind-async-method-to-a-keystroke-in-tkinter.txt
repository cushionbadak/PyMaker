<div class="post-text" itemprop="text">
<p>Consider the following example:</p>
<pre><code>import asyncio
import tkinter as tk

class App(tk.Tk):

    def __init__(self):
        super().__init__()
        self.create_widgets()
        self._configure_bindings() # I believe it is not possible 
                                   # to do this if the method needs 
                                   # to be async as well

    def create_widgets(self):
        pass

    def _configure_bindings(self):
        self.bind('&lt;F5&gt;', self.spam) # what's the proper way?
                                     # does this method need to be async as well?

    async def spam(self, event):
        await self.do_something()

    async def do_something():
        pass

async def run_tk(root):
    try:
        while True:
            root.update()
            await asyncio.sleep(.01)
    except tk.TclError as e:
        if "application has been destroyed" not in e.args[0]:
            raise

if __name__ == '__main__':
    app = App()
    asyncio.get_event_loop().run_until_complete(run_tk(app))
</code></pre>
<p>What is the proper way to bind async method to a keystroke in tkinter?
I've tried something like:</p>
<pre><code> self.bind('&lt;F5&gt;', self.spam)
 self.bind('&lt;F5&gt;', await self.spam)
 self.bind('&lt;F5&gt;', await self.spam())
 self.bind('&lt;F5&gt;', lambda event: await self.spam(event))
</code></pre>
<p>...and a bunch of other combinations, but to no avail.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>tkinter</code> itself is asynchronous thanks to event loop, the <a href="http://effbot.org/tkinterbook/widget.htm#Tkinter.Widget.after-method" rel="nofollow noreferrer"><code>after</code></a> method and the <a href="http://effbot.org/tkinterbook/tkinter-events-and-bindings.htm" rel="nofollow noreferrer">bindings</a>.</p>
<p>However, if you trying to stick with <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer"><code>asyncio</code></a> it's also possible, but first let's consider what you tried.</p>
<p>Your first try is obviously a fail, because you trying to call <code>spam</code> as a generic function, when it's a <a href="https://docs.python.org/3/library/asyncio-task.html#coroutines" rel="nofollow noreferrer"><code>coroutine</code></a>. Your other tries are more correct than a first, but <code>await coroutine</code> or <code>yield from coroutine</code> can be used to start a coroutine from another coroutine only, so it fails again.</p>
<p>So the proper way of start that beast is <em>a scheduling of its execution</em> with a self-explanatory method <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future" rel="nofollow noreferrer"><code>ensure_future</code></a> (or old <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.async" rel="nofollow noreferrer"><code>async</code></a>, which is just a deprecated alias).</p>
<p>Try this example:</p>
<pre><code>import asyncio
import tkinter as tk


class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self._configure_bindings()

    def _configure_bindings(self):
        self.bind('&lt;F5&gt;', lambda event: asyncio.ensure_future(self.spam(event)))

    async def spam(self, event):
        await self.do_something()
        await asyncio.sleep(2)
        print('%s executed!' % self.spam.__name__)

    async def do_something(self):
        print('%s executed!' % self.do_something.__name__)

async def run_tk(root):
    try:
        while True:
            root.update()
            await asyncio.sleep(.01)
    except tk.TclError as e:
        if "application has been destroyed" not in e.args[0]:
            raise

if __name__ == '__main__':
    app = App()
    asyncio.get_event_loop().run_until_complete(run_tk(app))
</code></pre>
<p>Also, I think that it's worth to mention <a href="https://stackoverflow.com/questions/29158811/whats-the-difference-between-update-and-update-idletasks">this</a> question, since you use an <code>update</code> method.</p>
</div>
<span class="comment-copy">hey, thanks a bunch.</span>
<span class="comment-copy">Cyn you explain why you use <code>update()</code> instead of <code>update_idletasks()</code>? see <a href="https://infohost.nmt.edu/tcc/help/pubs/tkinter/web/universal.html" rel="nofollow noreferrer">Tkinter-Docs</a></span>
<span class="comment-copy">@buhtz, this line originates directly from the question. Also I mentioned a topic to that “problem” in my answer. Practically, in the context of that question, there’s no difference.</span>
