<div class="post-text" itemprop="text">
<p>I have a url I want to POST some JSON data to, but I'm having trouble decoding the data. I'm using Postman to test sending data to the webhook, and I've set up a system to capture what the webhook receives. When I run the following code (python):</p>
<pre><code>from urllib.parse import parse_qs
data = parse_qs(request.body.decode())
</code></pre>
<p>I get the following output, stored in the <code>data</code> variable:</p>
<pre><code>{' name': [‘”keyOne”\r\n\r\nValueone\r\n——————————————494388199321720430876911\r\nContent-Disposition: form-data', 
‘”keyTwo”\r\n\r\nValuetwo\r\n——————————————494388199321720430876911\r\nContent-Disposition: form-data', 
‘”keyThree”\r\n\r\nValuethree\r\n——————————————494388199321720430876911--\r\n']}
</code></pre>
<p>How else should I be trying to decode the JSON data? An earlier error I was getting was <code>JSON object must be string not bytes</code> when I tried using <code>json.loads</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Since the data you're trying to parse seems to be multipart/form-data, i think the best approach is <a href="https://docs.python.org/3/library/cgi.html#cgi.parse_multipart" rel="nofollow noreferrer"><code>cgi.parse_multipart</code></a>.  For this you'll need the request body and the boundary, which you can get from Content-Type headers with <code>cgi.parse_header</code>.  </p>
<p>An example:  </p>
<pre><code>import cgi
from io import BytesIO
import requests

data = {'param1':'val1', 'param2':'val2'}
files = {'param3':('fname', 'fdata')}
r = requests.post('http://httpbin.org', data=data, files=files)

boundary = cgi.parse_header(r.request.headers['Content-Type'])[1]
boundary['boundary'] = boundary['boundary'].encode()
data = cgi.parse_multipart(BytesIO(r.request.body), boundary)
print(data)
</code></pre>
<blockquote>
<p>{'param1': [b'val1'], 'param2': [b'val2'], 'param3': [b'fdata']}  </p>
</blockquote>
<p>The result is a dictionary with the field names and a list of values (as bytes) for each field.<br/>
You could then decode the first item of values in <code>data</code> to get a dict of strings.</p>
<pre><code>data = {k:v[0].decode() for k,v in data.items()}
print(data)
</code></pre>
<blockquote>
<p>{'param1': 'val1', 'param2': 'val2', 'param3': 'fdata'}</p>
</blockquote>
</div>
