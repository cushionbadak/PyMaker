<div class="post-text" itemprop="text">
<p>
How do I get the cumulative sum of this list using list comprehension:</p>
<pre><code>list_comp=[1,4,9,16] 
</code></pre>
<p>
Here's what I tried but it prints the double of each item in the list</p>
<pre><code>print([x+x for x in list_comp])
</code></pre>
<p>
I expect the results to be:
list_comp=[1,5,14,30] 

But I'm getting this:</p>
<pre><code>&gt;&gt; [2, 8, 18, 32]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>List comprehensions are for mapping or filtering of lists. They cannot have an internal state, which is what you would need to do this efficiently.</p>
<p>However in Python 3 there is <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a> for that:</p>
<pre><code>import itertools

print(list(itertools.accumulate([1, 4, 9, 16])))  # [1,5,14,30]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do it like this, by combining slicing and a list comprehension, but it is ungainly to do a cumulative sum efficiently.</p>
<pre><code>comp=[1,4,9,16] 
[sum(comp[:idx+1]) for idx in range(len(comp))]
</code></pre>
<p><strong>I would not recommend using this, it recalculates the sum n times</strong>!</p>
<hr/>
<p>A proper way to cumsum can be done like this:</p>
<pre><code>def cumsum(seq):
    cumulative = [seq[0]]
    for elt in seq[1:]:
        cumulative.append(cumulative[-1] + elt)
    return cumulative
</code></pre>
<hr/>
<p><code>itertools.accumulate</code> is another way that @NielsWerner demonstrated.</p>
<hr/>
<p>Further efficiency can be found with the <code>numpy</code> library, and the <code>cumsum</code> function of this library.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import numpy as np
a = [1,4,9,16] 

b = np.cumsum(a)
print(list(b))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would like to add one more way of achieving this if you are using Python 2:</p>
<pre><code>def cumulative_sum(seq):
    prev = 0
    result = []
    for item in seq:
        result.append(prev+item)
        prev += item
    return result
</code></pre>
<p>for Python 3 i recommend using built in method <code>itertools.accumulate</code></p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/15889131/how-to-find-the-cumulative-sum-of-numbers-in-a-list">How to find the cumulative sum of numbers in a list?</a></span>
<span class="comment-copy">Please take a look at: <a href="http://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a></span>
<span class="comment-copy">I think <code>accumulate</code> is introduced in Python 3?</span>
<span class="comment-copy">Yes, I will add that. But the question targets Python 3 anyways.</span>
<span class="comment-copy">Cool.., thanks!</span>
