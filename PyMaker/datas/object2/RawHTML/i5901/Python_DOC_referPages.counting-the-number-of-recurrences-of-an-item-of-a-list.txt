<div class="post-text" itemprop="text">
<pre><code>l = "Hello world is me"
words_ = l.split()
print(l.split())

for item in words_ :
    if len(item) &lt; 5 :
        print('Words with length less than 6:', item )
    elif len(item) == 5 :
        print('Words with length 5:', item )
</code></pre>
<p>This is my code, however I want it to print the number of words at the specified length, but instead it prints the words itself. Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can count the number of elements that satisfy a condition by using:</p>
<pre><code>sum(<i>condition</i> for <i>item</i> in <i>iterable</i>)</code></pre>
<p>Note that <code><i>condition</i></code> here must be a boolean (since <code>True</code> is <code>1</code>, and <code>False</code> is <code>0</code>, it thus sums up the <code>True</code>s and thus counts the number of times the condition is met).</p>
<p>So if you want to count the number of elements that have a length <em>less than five</em>, you can write:</p>
<pre><code>number_of_words = sum(<b>len(word) &lt; 5</b> for <b>word</b> in <b>words_</b>)</code></pre>
<p>Or for the number of words with length five:</p>
<pre><code>number_of_words = sum(<b>len(word) == 5</b> for <b>word</b> in <b>words_</b>)</code></pre>
<p>etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>you could count the words in your loop, but it's more pythonic to feed <code>sum</code> with a generator comprehension filtered on the word size:</p>
<pre><code>&gt;&gt;&gt; l = "Hello world is me"
&gt;&gt;&gt; sum(1 for w in l.split() if len(w)==5)
2
</code></pre>
<p>another variant is to convert the result of the test to boolean (here the result of the test is <em>already</em> a boolean so no need to <code>bool()</code> it), and sum that:</p>
<pre><code>sum(len(w)==5 for w in l.split())
</code></pre>
<p>It's ideal for testing one condition, but if you want to count words matching several conditions (<code>len &lt; 5</code>, <code>len == 5</code>) in one go, the classical loop remains the best choice since it iterates on the list only once and you're naturally using short-circuit evaluation with <code>if/elsif</code>, too bad for listcomps but that's life:</p>
<pre><code>less_than_5=exactly_5=0
for item in l.split() :
    if len(item) &lt; 5 :
        less_than_5 += 1
    elif len(item) == 5 :
        exactly_5 += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the existing answers, you can use <code>filter</code> and <code>lambda</code> functions to get a count as well:</p>
<pre><code># Python 2.x
l = "Hello world is me"
words_ = l.split()
print "There are", len(filter(lambda x: len(x) &lt; 5, words_)), "words less than 5 long"
print "There are", len(filter(lambda x: len(x) == 5, words_)), "words exactly 5 long"

# Python 3.x
l = "Hello world is me"
words_ = l.split()
print ("There are", len(list(filter(lambda x: len(x) &lt; 5, words_))), "words less than 5 long")
print ("There are", len(list(filter(lambda x: len(x) == 5, words_))), "words exactly 5 long")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd build a <code>Counter</code> first, then it will be easy to extract the information you want.</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; s = "Hello world is me"
&gt;&gt;&gt; c = Counter(len(x) for x in s.split())
&gt;&gt;&gt; c
Counter({2: 2, 5: 2})
</code></pre>
<p>Alternatively, you can build the <code>Counter</code> with </p>
<pre><code>c = Counter(map(len, s.split()))
</code></pre>
<p>The <code>Counter</code> tells you that your sentence has two words of length two and two words of length 5.</p>
<p>Getting the number of words with lenght smaller than five:</p>
<pre><code>&gt;&gt;&gt; sum(num_words for length, num_words in c.items() if length &lt; 5)
2
</code></pre>
<p>Since a <code>Counter</code> returns <code>0</code> by default when a missing key is looked up you can get the same result by issueing</p>
<pre><code>&gt;&gt;&gt; sum(c[length] for length in range(1, 5))
2
</code></pre>
<p>which is probably a little easier to read than the first option.</p>
<p>Getting the number of words with length 5 is very easy:</p>
<pre><code>&gt;&gt;&gt; c[5]
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to find length of each word then you can count them based on word's length.</p>
<p>Using <code>range()</code>, <code>max()</code>, and <code>sum()</code> <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">builtin functions</a> will simplify code a lot:</p>
<pre><code>l = "Hello world is me"
words = l.split()
print(l.split())

# create a dict to count words with the same length
lengths = dict.fromkeys(
    range(1, max(len(word) for word in words) + 1),  # range's stop is exclusive
    0,  # default value
)

# count words' length
for word in words:
    lengths[len(word)] += 1

# count all words with length &lt; 6
print(
    'Words with length less than 6:',
    sum(value for key, value in lengths.items() if key &lt; 6)
)

# count all words with length == 5
print(
    'Words with length 5:',
    lengths.get(5, 0)  # faster than sum()
)
</code></pre>
<p>will print:</p>
<pre><code>['Hello', 'world', 'is', 'me']
Words with length less than 6: 4
Words with length 5: 2
</code></pre>
</div>
<span class="comment-copy"><code>sum(1 for w in l.split() if len(w)==5)</code> should do it.</span>
<span class="comment-copy">@MosesKoledoye: here indeed there is no reason, a potential problem can be that a person generalizes this to <i>truthiness</i> of booleans, in which case it can go wrong.</span>
<span class="comment-copy">@MosesKoledoye thanks. Yes, it's already a bool... wow it's late...</span>
<span class="comment-copy">@WillemVanOnsem I don't see how it can go wrong. Or may be I don't understand what you mean :)</span>
<span class="comment-copy">try to <code>sum(x for x in l.split())</code> for instance. Even if <code>x</code> is truthy of falsy, it fails. I think that's what Willem meant.</span>
<span class="comment-copy">@MosesKoledoye: if we do not use <code>bool(..)</code> a person can think that <code>sum(..)</code> works as a counter. So that <code>sum(len(x) for x in a)</code> counts the number of elements in <code>a</code> where <code>len(x)</code> has truthiness <code>True</code>. This of course is not the case. I'm not saying that this answer suggests that, but it can be a bit confusing. But did +1, so no problem :).</span>
<span class="comment-copy">Note that this will only work for Python-2.x, since in Python-3.x <code>filter</code> returns an iterable, not a list.</span>
<span class="comment-copy">@WillemVanOnsem and the print statements without parentheses will stop you even <i>before</i> that :)</span>
<span class="comment-copy">Edited to include a Python 3 version</span>
