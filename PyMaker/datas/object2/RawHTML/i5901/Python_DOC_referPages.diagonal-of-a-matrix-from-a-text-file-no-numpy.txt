<div class="post-text" itemprop="text">
<p>I am trying to get the diagonal of a matrix from a text file without using any kind of module. So the text file can have something like:</p>
<pre><code>[[1,2,3],[4,5,6],[7,8,9]]
</code></pre>
<p>Here is my code so far:</p>
<pre><code>def diagonal(filename): 
    with open(filename, 'r') as myfile:
        data=myfile.read().split()
        a=data[0].split()
    a=eval(a[0])
    c=len(a[0])
    d=len(a)
    if c==d:
        diagonal=[]
        c=len(a[0])
        for i in range(d):
            row=[0]*c
            for j in range(c):
                row=a[i][j]
                diagonal.append(row)
        return diagonal
    else:
        return ('Error')
</code></pre>
<p>This returns:</p>
<pre><code>[1, 2, 3, 4]
</code></pre>
<p>When I want it to output:</p>
<pre><code>[[1,0,0],[0,5,0],[0,0,9]]
</code></pre>
<p>Any ideas on how to make my code work? Thank you very much!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it like this (example for your given input-list):</p>
<pre><code>l = [[1,2,3],[4,5,6],[7,8,9]] #Your input-list
new_list = [] #New output-list

for arr, num in zip(l, range(len(l))):
    new_arr = [0 for x in range(len(l))]
    new_arr[num] = arr[num]
    new_list.append(new_arr)
</code></pre>
<p>This is generic, so you can have a matrix of any length.</p>
<p>Edit: Version with enumerate:</p>
<pre><code>for num, arr in enumerate(l):
    new_arr = [0 for x in range(len(l))]
    new_arr[num] = arr[num]
    new_list.append(new_arr)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Isn't this simply a nested list comprehension:</p>
<pre><code>arr = [[1,2,3],[4,5,6],[7,8,9]]

diag = [[arr[i][i] if i == j else 0 for j in range(len(el))]
       for i, el in enumerate(arr)]
# -&gt; [[1, 0, 0], [0, 5, 0], [0, 0, 9]]
</code></pre>
</div>
<span class="comment-copy">Please <a href="https://stackoverflow.com/editing-help#comment-formatting">fix the indentation.</a></span>
<span class="comment-copy">Sorry, I didn't realize that the indentation got messed up. Thank you for pointing that out.</span>
<span class="comment-copy">Sometimes it helps to write down what you want to do in words. You want to construct a list of lists using <code>a[0][0]</code>, <code>a[1][1]</code>, and <code>a[2][2]</code> from the original.  <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate()</a> might help.</span>
<span class="comment-copy">Print out variables at strategic locations, like the top/bottom of loops and before/after conditional statements - you will get a <i>running commentary</i> of what is happening in your process.</span>
<span class="comment-copy">In our file you have a textual representation of a 2D matrix that uses ONLY <code>[</code> <code>]</code> <code>,</code> and digits, no spaces no tabs nothing else?</span>
<span class="comment-copy">Why not use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate()</a>?</span>
<span class="comment-copy">Thank you so much @Markus! This was really helpful. What does the zip function do exactly?</span>
<span class="comment-copy">@wwii: Edited the enumarte block, forgot about it.</span>
<span class="comment-copy">Thank you, @Mark_M!! Much appreciated!</span>
