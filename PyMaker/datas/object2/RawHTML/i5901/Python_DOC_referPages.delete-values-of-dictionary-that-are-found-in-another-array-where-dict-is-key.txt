<div class="post-text" itemprop="text">
<p>I want to delete every values in dictionary <code>prot_dict</code> that are found in another np.array <code>not_prot</code></p>
<pre><code>prot_dict = OrderedDict([('ALBU_HUMAN', array([ 2421, 3672, 4524])),
            ('CATA_HUMAN', array([ 2620, 4276, 4524, 6523, 6573])), 
            ('CYC_HUMAN', array([ 1670, 5374]))])
not_prot = [2421  2620  3672  4524]
</code></pre>
<p>The expected result</p>
<pre><code>prot_dict = OrderedDict([('ALBU_HUMAN', array([ ])),
           ('CATA_HUMAN', array([ 4276, 6523, 6573])), 
           ('CYC_HUMAN', array([ 1670, 5374]))])
</code></pre>
<p>What I tried gives me back the same dictionary.</p>
<pre><code>for eachprotset in prot_dict.values():
   for each in eachprotset:
      if each in not_prot:
        eachprotset[eachprotset != each]
</code></pre>
<p>How to remove values of dictionary matched to items in another array (I doubt <code>list</code> may be easier)? If it is fast, it would be very good.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>from collections import OrderedDict
from numpy import array

prot_dict = OrderedDict([('ALBU_HUMAN', array([ 2421, 3672, 4524])),
            ('CATA_HUMAN', array([ 2620, 4276, 4524, 6523, 6573])), 
            ('CYC_HUMAN', array([ 1670, 5374]))])
not_prot = [2421, 2620, 3672, 4524]

prot_dict = OrderedDict({k: [x for x in v if x not in not_prot] for k, v in prot_dict.items()})
print(prot_dict)  
#-&gt; OrderedDict([('ALBU_HUMAN', []), ('CATA_HUMAN', [4276, 6523, 6573]), ('CYC_HUMAN', [1670, 5374])])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use dict comprehensions and list compressions together, something like this</p>
<pre><code>import collections
prot_dict = collections.OrderedDict([('ALBU_HUMAN', [ 2421, 3672, 4524]),
            ('CATA_HUMAN', [ 2620, 4276, 4524, 6523, 6573]), 
            ('CYC_HUMAN', [ 1670, 5374])])
not_prot = [2421 , 2620 ,3672 , 4524]

d = {k:[i for i in v if i not in not_prot] for (k,v) in prot_dict.items() }

print d
</code></pre>
<p>OUTPUT</p>
<pre><code>{'CYC_HUMAN': [1670, 5374], 'CATA_HUMAN': [4276, 6523, 6573], 'ALBU_HUMAN': []}
</code></pre>
<p>first we are iterating items in dict and then for each value we are using list comprehensions to filter out value present in not_prod list.</p>
</div>
<div class="post-text" itemprop="text">
<p>One simple way to achieve this is the following:</p>
<pre><code>not_prot = set([2421,  2620,  3672,  4524]) 
prot_dict = OrderedDict([
    ('ALBU_HUMAN', array([x for x in [2421, 3672, 4524] if x not in not_prot])),
    ('CATA_HUMAN', array([x for x in [2620, 4276, 4524, 6523, 6573] if x not in not_prot])), 
    ('CYC_HUMAN', array([x for x in [1670, 5374] if x not in not_prot]))])
</code></pre>
<p>This approach is called list comprehension and described e.g. here: <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import OrderedDict
from numpy import array

prot_dict = OrderedDict([('ALBU_HUMAN', array([2421, 3672, 4524])),
                         ('CATA_HUMAN', array([2620, 4276, 4524, 6523, 6573])),
                         ('CYC_HUMAN', array([1670, 5374]))])

not_prot = [2421, 2620, 3672, 4524]
not_prot = set(not_prot)

prot_dict = OrderedDict({k: list(set(v).difference(not_prot)) for k, v in prot_dict.items()})
print(prot_dict)
</code></pre>
<p>I just made some modifications to @Ev. Kounis' answer.
Use hash set will be fast to determine whether it contains the values in not_prot.</p>
</div>
<span class="comment-copy">it also works with not_prot just a list and not a set, but if not_prot is big it will be faster like that.</span>
<span class="comment-copy">this is a lot of typing though.. What if the original <code>dict</code> had thousands of entries?</span>
