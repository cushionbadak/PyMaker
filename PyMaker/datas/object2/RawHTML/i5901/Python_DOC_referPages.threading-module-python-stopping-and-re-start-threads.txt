<div class="post-text" itemprop="text">
<p>I was looking how to stop a thread on python using the thread module, and I found that this method is not provided by the module. I have seen some tricks to implement a way to stop the threads but nothing of this worked for me.   </p>
<p>My program have a main window that shows every function on it, and one of this functions opens another window that do a "function2" with a button.
I want to be able to do things, or not let the windows freeze while "function2" is running, so I have used <code>threading.Thread</code> to define the "function2" and called it using <code>Thread.run()</code> method.<br/>
This, works great, but when "function2" is done, I cannot re-run the function because of the threads can only be started once.</p>
<p>I need a solution to this, if someone can help me, I would be glad.<br/>
Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>Expanding on comments. What you have is</p>
<pre><code>fun2 = threading.Thread(name='funcion2',target=funcion2)
ttk.Button(loginpanel,text='Initfun2',command=fun2.start)
</code></pre>
<p>which basically creates one thread and tries to re-run it on click. There is no such thing as re-runing threads so instead you have to create a new thread on click:</p>
<pre><code>def fun2():
    threading.Thread(name='funcion2',target=funcion2).start()
ttk.Button(loginpanel,text='Initfun2',command=fun2)
</code></pre>
<p>While this is better it has another drawback: what if someone starts clicking the button like mad? You want to restrain the number of threads to use. For that using <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer">a thread pool</a> is a good option:</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor

THREADPOOL = ThreadPoolExecutor(10)
def fun2():
    THREADPOOL.submit(funcion2)
ttk.Button(loginpanel,text='Initfun2',command=fun2)
</code></pre>
<p>This code is for Python3.x. For Python2 I think you need some external library.</p>
</div>
<span class="comment-copy">What do you mean by "re-run"? Just start new thread? If you wish to stop a thread then you have to check periodically some shared state in that thread.</span>
<span class="comment-copy">@freakish Doing the same action again, like if function2 print numbers from 1 to 10, once the function has printed all numbers, I want to let the function2 run again to print from 1 to 10.</span>
<span class="comment-copy">Ok, and what is the problem? Why can't you start another thread with function2? Perhaps you should show us some code and tell us what you expect to happen and what is actually happening.</span>
<span class="comment-copy">Yes, the problem is not to start another thread, is that I have a button like this <code>ttk.Button(loginpanel,text='Initfun2',command=fun2.start)</code> and the method called is this <code>fun2 = threading.Thread(name='funcion2',target=funcion2)</code> so when I press the button, it try to start the same thread.</span>
<span class="comment-copy">Obviously your method is incorrect. What you should have is <code>ttk.Button(..., command=start_fun2)</code> and then <code>start_fun2 = lambda : threading.Thread(name='funcion2',target=funcion2).start()</code> (or via <code>def</code>).</span>
<span class="comment-copy">Ok, now I understand everything, thanks for your help, now, if you let me ask you another question. If I use a threadpool and fix the limit in 5 instead of  10 (only because it's less) and I clicked 5 times the button, and function2 run correctly and finish it's five counts, I won't be able to click the button again?</span>
<span class="comment-copy">@DavidGonzálezBlazman You will be able to click the button. What will happen is that the call to <code>funcion2</code> will be scheduled and it will be fired as soon as the threadpool has free resources (which will happen once previous calls to <code>funcion2</code> end). Also note that you need locks if you share state between these function (e.g. when you update globals).</span>
<span class="comment-copy">I was reading the documentation you linked, it's possible using the shutdown() method?</span>
<span class="comment-copy">Thanks so much, I tried the code now with some modifications to adapt, and it works exactly as expected!</span>
<span class="comment-copy">@DavidGonzálezBlazman ThreadPool has a queue and creates "worker threads", these are running <b>all the time</b> in the background. Those threads are waiting for a message submitted via <code>.submit</code> and they are processing it. The <code>shutdown()</code> method is intended for the entire ThreadPool. Once you call it, it will stop accepting new messages, it will wait for all workers to finish what they are doing and then kill all threads and clean up after itself. If the button is clickable during whole app's lifetime then you should not call <code>shutdown()</code> at all.</span>
