<div class="post-text" itemprop="text">
<p>In pycharm, I would like to break on a breakpoint that does nothing, during debugging. How can I do this?</p>
<p>For example, I would like to break on the <code>pass</code> statement:</p>
<pre><code>for i in range(999999):
    if i == 6232:
        pass
</code></pre>
<p>If I set a breakpoint on <code>pass</code>, the debugger doesn't break there. The closest I've been able to do so far is to make up some unused variable name, and assign it a pointless value, so I can set a breakpoint on that line:</p>
<pre><code>for i in range(999999):
    if i == 6232:
        foobar_unused_variable = "At least I can set a breakpoint on this line."
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When the just-in-time compiler compiles your example, it compiles to <code>pass</code> as nothing. In other words, <code>pass</code> is simply a keyword that should be used to tell the compiler that there is no syntax error in what would otherwise be an empty block. For example, try running the code without <code>pass</code>. Won't work. You can also try putting an unused expression (e.g. <code>0</code>) or effect-less statement (e.g. <code>print(end='')</code>) in place of <code>pass</code>. But I would recommend removing these when possible. You could also set a <a href="https://docs.python.org/3/library/pdb.html#pdbcommand-break" rel="nofollow noreferrer">conditional breakpoint</a> instead of breaking within the <code>if</code> statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>As others have said, there is no clean way to do this. I recommend instead of pass, enter a useless statement such as</p>
<pre><code>dbg = True
</code></pre>
<p>then set the break point on that line.</p>
<p>Advantages: </p>
<ol>
<li>It allows you to set a breakpoint there. (What you wanted to do.)</li>
<li>Once you are accustomed to the idiom, you know what it really means.</li>
<li>Every now and then you can go through your code and remove the old ones that you no longer use.</li>
</ol>
<p>Disadvantages:</p>
<ol>
<li>It clutters up your code if you don't periodically remove them.</li>
<li>Collaborators may become confused as to what you are doing.</li>
<li>If you leave them in production code there might be a slight performance hit (depending on whether Python optimizes them out).</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<h2>Use Ellipsis!</h2>
<p>For quick breakpoints or something that make minimum visual impact to you code, you may insert and break on an <code>...</code> (Ellipsis):</p>
<p>For example:</p>
<pre><code>while some_condition():
    do_something()
    ...  #  &lt;&lt;&lt; set break point here!
</code></pre>
<p>this may the most clean way towards me.</p>
<h2>Some background</h2>
<p>Ellipsis is a special built-in python object mainly for Slice notating. Here I (ab)use it to do something else. See: <a href="https://stackoverflow.com/questions/772124/what-does-the-python-ellipsis-object-do">What does the Python Ellipsis object do?</a></p>
<p>It is OK to insert a bare integer, variable name or something into code to set break point on certain place, but it may look odd and clutter your code, but <code>...</code> is visually harmless. Compare with this:</p>
<pre><code>break_point = 0
while some_condition():
    do_something()
    break_point # &lt;&lt;&lt; set break point here!
</code></pre>
<p>or this:</p>
<pre><code>while some_condition():
    do_something()
    if False: # &lt;&lt;&lt; set break point here!
        pass
</code></pre>
<p>some other tricks tested:</p>
<pre><code>del []  # works(with warning: "cannot assign to []")
[]  # works(with warning: Statement seems to have no effect)
setbreakpoint = 1  # works(with warning: "local variable value is not used")
Ellipsis  # works(with warning: Statement seems to have no effect)
</code></pre>
<p>another interesting thing that happens to me is, when i set breakpoints on <code>pass</code> it may or may not break, depending to its location in code, but the exact rule for break or not is somehow unclear.</p>
</div>
<span class="comment-copy">I've run into this as well - generally I just put some kind of noop statement (such as <code>i</code>, which is valid python but doesn't do anything). This has the added benefit of being picked up by pylint so I don't accidentally commit it.</span>
<span class="comment-copy"><code>pass</code> means do nothing, and doing nothing is decided while compiling, so there is no executable code at <code>pass</code>, and finally debugger cannot debug <code>nothing</code>.</span>
<span class="comment-copy">@Sraw This seems wrong because that is exactly what a 'nop' is for so the debugger can debug "nothing" am i wrong?</span>
<span class="comment-copy">@LazNikolajAndersen AFAIK, you are wrong. First, a debugger can only debug what is really executing, it cannot break at a non-exist place. Second, image if you are the author of that compiler, you will definitely try your best to optimize and reduce the redundant code as possible as you can. In this case, will you add an exactly useless code to target code? Surely you won't as no matter how much time it needs to execute, it is a waste.</span>
<span class="comment-copy">Nice try, but ... When I simply stick a <code>...</code> or a <code>3</code> into code and set a breakpoint on it ... It doesn't break. I guess some compile optimizer is optimizing it away... Even if I put in <code>if False:</code> and try to break on that, it doesn't break. More evidence to suggest compiler optimizes it away. ¯\_(ツ)_/¯</span>
<span class="comment-copy">Hi @Edward, i have tried this in PyCharm Community 2017.3 with cpython plugin (without ipython), and it will break on bare variables, <code>...</code> and <code>if False:</code>, but will not break on <code>pass</code> or <code>3</code>, what IDE you are using?</span>
<span class="comment-copy">Interesting... I'm using PyCharm Pro 2018.2.4. You said <code>cpython</code> but did you mean <code>cython</code>? The <a href="https://www.jetbrains.com/pycharm/features/editions_comparison_matrix.html" rel="nofollow noreferrer">comparison matrix</a> says you need pro to support <code>cython</code>.</span>
<span class="comment-copy">Ah yes its Cython. (On a fresh PyCharm install, it will frequently prompt user to install Cython extension to speed up debugging, and i followed the install link just to make it quiet, as stated in <a href="https://www.jetbrains.com/help/pycharm/cython-speedups.html" rel="nofollow noreferrer">jetbrains.com/help/pycharm/cython-speedups.html</a> : “Thankfully, Python supports compiled C-extensions through Cython. PyCharm ships with C versions of debugger code, which you can compile to make debugging in PyCharm faster.”) @Edward</span>
