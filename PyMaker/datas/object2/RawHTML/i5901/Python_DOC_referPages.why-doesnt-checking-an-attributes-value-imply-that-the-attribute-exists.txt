<div class="post-text" itemprop="text">
<p>While using <code>BeautifulSoup</code> I very often have to condition some action on the value of a tag's class. For example, imagine that I want to do some action on <code>&lt;p&gt;</code> only when the attribute is <code>class="box"</code>, and a different action otherwise.
What I do is:</p>
<pre><code>soup = BeautifulSoup('''
&lt;html&gt;&lt;body&gt;
&lt;h1&gt;Titolo&lt;/h1&gt;
&lt;p&gt;Testo che sta sotto il titolo&lt;/p&gt;
&lt;p class="sidenote"&gt;Questo da stampare&lt;/p&gt;
&lt;p&gt;Questo Ã¨ il testo della nota marginale&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
''',"lxml")

for sel in soup.body:
    if not isinstance(sel,NavigableString) and \
       "class" in sel.attrs and "sidenote" in sel["class"]:
        print(sel)
    else
        print("not found")
</code></pre>
<p>This is a bit clumsy. I wonder if there's a way to make the condition a little more compact than this. The ideal would be that a check on the final condition (that <code>class</code> contains <code>sidenote</code>) implied that the element does have a <code>class</code> attribute and, consequently, it is a tag, not a NavigableString.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using a ternary operator would definitely remove some bulk, though not everything at once. The number of if-else's would still be same though. So, not sure if that would work for you.</p>
<p><a href="http://book.pythontips.com/en/latest/ternary_operators.html" rel="nofollow noreferrer">http://book.pythontips.com/en/latest/ternary_operators.html</a></p>
<p>So the current code would become:</p>
<pre><code>if "class" in div.attrs:
   div.do_something if "box" in div["class"] else div.do_something_else
else:
   div.do_something_else
</code></pre>
<p>or if you want to compress it further (though I feel that would affect readability):</p>
<pre><code>(div.do_something if "box" in div["class"] else div.do_something_else) if "class" in div.attrs else div.do_something_else
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Like for Python dictionaries, you can use the <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>get</code></a> method instead of accessing the element using <code>[...]</code>. This way, it does not raise a <code>KeyError</code> if the element is not present but just returns <code>None</code>. Also, you can provide a default value, so you can simplify the code to:</p>
<pre><code>for sel in soup.body:
    if not isinstance(sel,NavigableString) and \
           "sidenote" in sel.get("class", []):
        print(sel)
    else
        print("not found")
</code></pre>
</div>
<span class="comment-copy">What makes you think the <code>and</code> version doesn't work? Post a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. It should have worked; you likely introduced some other error you didn't notice.</span>
<span class="comment-copy">You were right, the problem was that the element was a NavigableString, and I need to check this first. However, my doubt remains at least in part: why isn't it possible to check "implicitly" the existence of the attribute?</span>
<span class="comment-copy">You can use <code>soup.body.find_all()</code> which returns only tags (no <code>NavigableString</code> objects). Then use <code>sel.get("class", [])</code> as described in the answer below.</span>
