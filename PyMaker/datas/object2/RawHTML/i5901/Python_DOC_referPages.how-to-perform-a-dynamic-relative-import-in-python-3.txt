<div class="post-text" itemprop="text">
<p>I have a following file structure:</p>
<pre><code>mymodule/
    __init__.py
    mylib.py
test.py
</code></pre>
<p>File <code>mymodule/__init__.py</code>:</p>
<pre><code># mymodule/__init__.py
def call_me():
    module = __import__('.mylib')
    module.my_func()
</code></pre>
<p>File <code>mymodule/mylib.py</code>:</p>
<pre><code># mymodule/mylib.py
def my_func():
    print("hi!")
</code></pre>
<p>File <code>test.py</code>:</p>
<pre><code># test.py
from mymodule import call_me
call_me()
</code></pre>
<p>If I run <code>python3 test.py</code> it fails with the error:</p>
<pre><code>    module = __import__('.mylib')
ImportError: No module named '.mylib'
</code></pre>
<p>I want to perform a relative import inside of <code>call_me</code> that equals to the static import <code>from . import mylib</code>. How can I do it?</p>
</div>
<div class="post-text" itemprop="text">
<p>How about this,</p>
<pre><code>def call_me():
    mylib = __import__('mylib', globals(), locals(), [], 1)
    mylib.my_func()
</code></pre>
<p>Please refer the doc: <a href="https://docs.python.org/3/library/functions.html#__import__" rel="nofollow noreferrer"><strong>import</strong></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>importlib.import_module</code> and specify your package from <code>__name__</code> in <code>__init__.py</code>:</p>
<blockquote>
<p><code>importlib.import_module(name, package=None)</code>
  Import a module.</p>
<p>The 'package' argument is required when performing a relative import. It
  specifies the package to use as the anchor point from which to resolve the
  relative import to an absolute import.</p>
</blockquote>
<p>Example:</p>
<pre><code>import importlib

def call_me():
    module = importlib.import_module('.mylib', package=__name__)
    module.my_func()
</code></pre>
</div>
<span class="comment-copy">Would yhis be a solution? <code>def call_me():     from mymodule import mylib     mylib.my_func()</code></span>
<span class="comment-copy">Not really, I would like to NOT use the original name of the package inside. In other words, I need a relative import.</span>
<span class="comment-copy">It didn't help: <code>importlib.import_module('mylib', package=None)</code> leads <code>ImportError: No module named 'mylib'</code></span>
<span class="comment-copy">@Fomalhaut because there is no such module... you need the name of the outer module, in this case that would be <code>mymodule</code> - so it know to import <code>mymodule.mylib</code> instead of <code>mylib.mylib</code></span>
<span class="comment-copy">Then that's not a solution, because if I have to use the name <code>mymodule</code> inside, that's not a relative import.</span>
<span class="comment-copy">@Fomalhaut well, then why do you need the relative import? presumably to encapsulate your module so one can do <code>from yourmodule import something</code> for this you need to know how you would like to refer to your module, otherwise it can't be done - at least not without horrible hacks</span>
<span class="comment-copy">Made my answer clearer.</span>
