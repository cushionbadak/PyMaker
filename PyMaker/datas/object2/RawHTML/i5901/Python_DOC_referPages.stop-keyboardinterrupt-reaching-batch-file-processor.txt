<div class="post-text" itemprop="text">
<p>I'm writing some code in Python 3 on Windows that looks like this:</p>
<pre><code>try:
    do something that takes a long time
    (training a neural network in TensorFlow, as it happens)
except KeyboardInterrupt:
    print('^C')
print a summary of results
still useful even if the training was cut short early
</code></pre>
<p>This works perfectly if run directly from the console with <code>python foo.py</code>.</p>
<p>However, if the call to Python was within a batch file, it ends up doing all the above but then still spamming the console with the 'terminate batch job' prompt.</p>
<p>Is there a way to stop that happening? By fully eating the ^C within Python, jumping all the way out of the batch file or otherwise?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>break</code> (<a href="https://www.computerhope.com/breakhlp.htm" rel="nofollow noreferrer">More info here</a>) command in the batch file, which will disable CTRL+C halting the file</p>
<p><strong>EDIT:</strong> According to <a href="https://www.computerhope.com/breakhlp.htm" rel="nofollow noreferrer">this site</a> of the break command </p>
<blockquote>
<p>Newer versions of Windows (Windows ME, Windows 2000, Windows XP, and higher) only include this command for backward compatibility and turning the break off has no effect.</p>
</blockquote>
<p>I personally tested this, and can confirm, I will edit when I find a workaround</p>
<p><strong>EDIT #2:</strong> If you could have a second batch script that runs <code>start "" /b /wait cmd /c "yourfile.bat"</code> although, this is known to cause glitches with other nested batch files</p>
<p>The flag to disable Ctrl+C is inherited by child processes, so Python will no longer raise a KeyboardInterrupt. Plus we still have bugs here in Python if reading from the console gets interrupted by Ctrl+C without getting a SIGINT from the CRT. The Python script should manually enable Ctrl+C via ctypes. Use import ctypes; kernel32 = ctypes.WinDLL('kernel32', use_last_error=True); success = kernel32.SetConsoleCtrlHandler(None, False)</p>
<p><strong>EDIT #3</strong> As pointed by Eryksyn (in the comments), you can use <a href="https://docs.python.org/3/library/ctypes.html#module-ctypes" rel="nofollow noreferrer">cytpes</a> to <em>ENABLE</em> it;</p>
<pre><code>import ctypes; 
kernel32 = ctypes.WinDLL('kernel32', use_last_error=True); success = kernel32.SetConsoleCtrlHandler(None, False)
</code></pre>
<p><strong>EDIT #4:</strong> I think I found it, try this (Although it may not work) Can you use the <a href="https://docs.python.org/2/library/threading.html" rel="nofollow noreferrer">threading</a> import? </p>
<pre><code>import time
from threading import Thread

def noInterrupt():
    for i in xrange(4):
        print i
        time.sleep(1)

a = Thread(target=noInterrupt)
a.start()
a.join()
print "done"
</code></pre>
</div>
<span class="comment-copy">You can't control that from Python. Every process that's attached to a console host (conhost.exe) receives console control events on a new thread that gets created by the session server (csrss.exe). CMD's handler sets a flag. When it resumes its dispatch loop after Python exits, it sees the Ctrl+C flag is set and prints the "terminate batch job" message.</span>
<span class="comment-copy">CMD's <code>start</code> command uses the <code>CREATE_NEW_PROCESS_GROUP</code> process creation flag, which causes <code>CTRL_C_EVENT</code> to be ignored by default, but you'll still see the terminate request for  <code>CTRL_BREAK_EVENT</code>.</span>
<span class="comment-copy">The flag to disable Ctrl+C is inherited by child processes, so Python will no longer raise a <code>KeyboardInterrupt</code>. Plus we still have bugs here in Python if reading from the console gets interrupted by Ctrl+C <i>without</i> getting a <code>SIGINT</code> from the CRT. The Python script should manually enable Ctrl+C via ctypes. Use <code>import ctypes;</code> <code>kernel32 = ctypes.WinDLL('kernel32', use_last_error=True);</code> <code>success = kernel32.SetConsoleCtrlHandler(None, False)</code>.</span>
<span class="comment-copy">ctypes is being used to <i>enable</i> Ctrl+C in Python, not <i>disable</i> it. This has no effect on any other existing process that's attached to the console. Ctrl+C will still be disabled in the parent CMD shell that executes the batch script. Processes spawned by Python, however, will inherit Ctrl+C in an enabled state.</span>
<span class="comment-copy">Oh! My bad! I'll fix that! Really sorry</span>
<span class="comment-copy">I don't see the relevance of the threading suggestion. Only the main thread gets a <code>KeyboardInterrupt</code> for a C runtime <code>SIGINT</code> signal, which is in turn for the console's <code>CTRL_C_EVENT</code>. We're going out of our way to enable this console control event in Python, so the OP can actually get and handle a <code>KeyboardInterrupt</code>, while having it remain disabled for the batch script. This convoluted setup is an alternative to running the Python script in its own console via <code>start</code>. The latter has the advantage of being self-contained within the batch script, but at the cost of using another console.</span>
