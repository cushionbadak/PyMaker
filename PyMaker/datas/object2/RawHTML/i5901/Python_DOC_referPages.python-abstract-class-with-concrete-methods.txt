<div class="post-text" itemprop="text">
<p>I'm wondering if in python (3) an abstract class can have concrete methods.<br/>
Although this seems to work I'm not sure this is the proper way to do this in python:</p>
<pre><code>from abc import ABCMeta, abstractclassmethod, abstractmethod 

class MyBaseClass:
    __metaclass__ = ABCMeta

    @property
    @abstractmethod
    def foo_prop(self):
        """Define me"""
        pass

    @abstractclassmethod
    def get_something(cls, param1, param2, param3):
        """This is a class method, override it with @classmethod """
        pass

    @classmethod
    def get(cls, param1, param2):
        """Concrete method calling an abstract class method and an abstract property""" 
        if param1 &lt; cls.foo_prop:
            raise Exception()
        param3 = param1 + 42
        item = cls.get_something(param1, param2, param3)
        return item


class MyConcreteClassA(MyBaseClass):
    """Implementation """

    foo_prop = 99

    @classmethod
    def get_something(cls, param1, param2, param3):
        return cls.foo_prop + param1 + param2 + param3


class MyConcreteClassB(MyBaseClass):
    """Implementation """

    foo_prop = 255

    @classmethod
    def get_something(cls, param1, param2, param3):
        return cls.foo_prop - param1 - param2 - param3
</code></pre>
<p>In the example the abstract class <code>MyBaseClass</code> has: </p>
<ul>
<li>an abstract property <code>foo_prop</code> that will be defined in the subclasses

<ul>
<li>the only way I could find to declare this was to create an abstract "property method"</li>
</ul></li>
<li>an abstract class method <code>get_something</code> that will be implemented in the subclasses </li>
<li>a concrete method <code>get</code> that in turns uses the (not yet defined) abstract method and property mentioned above.</li>
</ul>
<p><strong>Questions</strong>:  </p>
<ol>
<li><p>Is there a better way to define an abstract property? Would it make more sense to define a concrete property in <code>MyBaseClass</code> set to None and just redefine it in the subclasses?</p></li>
<li><p>Can I mix abstract and concrete methods in an abstract class as shown in the example?   </p></li>
<li><p>If yes, does it always makes sense to declare the class abstract or can a concrete class have abstract methods (in this case it should never be instantiated directly anyway).</p></li>
</ol>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p>According to <a href="https://docs.python.org/3/library/abc.html#abc.abstractproperty" rel="nofollow noreferrer">the docs</a> (text in brackets and code formatting mine):</p>
<blockquote>
<p>[<code>@abstractproperty</code> is] Deprecated since version 3.3: It is now possible to use <code>property</code>, <code>property.getter()</code>, <code>property.setter()</code> and <code>property.deleter()</code> with <code>abstractmethod()</code>, making this decorator redundant.</p>
</blockquote>
<p>so I think you're doing it right.</p></li>
<li><p>You can do this, or at least in my experience it has not been an issue. Maybe somebody else can offer other advice, but that advice will probably take the form of "inheritance is bad". Although I don't see anything explicitly about it in the docs, <a href="https://docs.python.org/3/library/abc.html#abc.ABCMeta.__subclasshook__" rel="nofollow noreferrer">this section shows an example</a> wherein an abstract method, concrete method, and class method are all defined within an ABC.</p></li>
<li><p>I believe you still have to declare the class abstract in order to use <code>@abstractmethod</code> and similar decorators. By setting the metaclass as ABC, the class cannot be instantiated until all abstract methods are defined, which sounds like the behavior that you want, so I think you need to declare it abstract unless you just want to rely on documentation to enforce the "you shall not instantiate" rule on this class. As an aside, <a href="https://docs.python.org/3/library/abc.html#abc.ABC" rel="nofollow noreferrer">you can declare your abstract class with</a>:</p>
<pre><code>from abc import ABC
class MyBaseClass(ABC):
    # ...
</code></pre>
<p>inheriting from <code>abc</code> instead of manually setting the metaclass. I think this construction is preferred.</p></li>
</ol>
</div>
