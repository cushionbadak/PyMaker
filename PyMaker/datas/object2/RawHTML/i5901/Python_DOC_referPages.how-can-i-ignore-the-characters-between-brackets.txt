<div class="post-text" itemprop="text">
<p>Example:
The hardcoded input in the system:</p>
<pre><code>Welcome to work {sarah} have a great {monday}! 
</code></pre>
<p>The one i get from an api call might differ by the day of the week or the name example:</p>
<pre><code>Welcome to work Roy have a great Tuesday!
</code></pre>
<p>I want to compare these 2 lines and give an error if anything but the terms in brackets doesn't match.</p>
<p>The way I started is by using <code>assert</code> which is the exact function I need then tested with ignoring a sentence if it starts with <code>{</code> by using <code>.startswith()</code> but I haven't been successful working my way in specifics between the brackets that I don't want them checked.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">Regular expressions</a> are good for matching text.</p>
<p>Convert your template into a regular expression, using a regular expression to match the <code>{}</code> tags:</p>
<pre><code>&gt;&gt;&gt; import re

&gt;&gt;&gt; template = 'Welcome to work {sarah} have a great {monday}!'

&gt;&gt;&gt; pattern = re.sub('{[^}]*}', '(.*)', template)
&gt;&gt;&gt; pattern
'Welcome to work (.*) have a great (.*)!'
</code></pre>
<p>To make sure the matching halts at the end of the pattern, put a <code>$</code>:</p>
<pre><code>&gt;&gt;&gt; pattern += '$'
</code></pre>
<p>Then match your string against the pattern:</p>
<pre><code>&gt;&gt;&gt; match = re.match(pattern, 'Welcome to work Roy have a great Tuesday!')
&gt;&gt;&gt; match.groups()
('Roy', 'Tuesday')
</code></pre>
<p>If you try matching a non-matching string you get nothing:</p>
<pre><code>&gt;&gt;&gt; match = re.match(pattern, 'I wandered lonely as a cloud')
&gt;&gt;&gt; match is None
True
</code></pre>
<p>If the start of the string matches but the end doesn't, the <code>$</code> makes sure it doesn't match. The <code>$</code> says "end here":</p>
<pre><code>&gt;&gt;&gt; match = re.match(pattern, 'Welcome to work Roy have a great one! &lt;ignored&gt;')
&gt;&gt;&gt; match is None
True
</code></pre>
<p>edit: also you might want to <a href="https://docs.python.org/2/library/re.html#re.escape" rel="nofollow noreferrer"><strong><code>escape</code></strong></a> your input in case anyone's playing silly beggars.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can make copies that do not include anything that has brackets around it and compare those. It is relatively easy with regular expressions. As a function, it could look like this:</p>
<pre><code>import re

# compare two strings, ignoring everything that has curly brackets around it
def compare_without_brackets(s_1, s_2, p=re.compile(r"{.*?}")):
  return p.sub('', s_1) == p.sub('', s_2) 

# example
first = 'Welcome to work {sarah} have a great {monday}!'
second = 'Welcome to work {michael} have a great {tuesday}!'

print(compare_without_brackets(first, second))
&gt;&gt; True
</code></pre>
<p>edit: reworked my answer after seeing I got something wrong. It works now in a way that everything with curly brackets around it is replaced with a universal match. Now you can compare the hardcoded version with any returned from the API and still get either <code>True</code> or <code>False</code>, depending on whether they match or not.</p>
<pre><code>import re

# compare a hardcoded string with curly braces with one returned from the API
def compare_without_brackets(hardcoded, from_API, p=re.compile(r"{.*?}")):
  pattern = re.compile(p.sub(r'(.*)', hardcoded))
  return pattern.match(from_API) is not None

# example
first = 'Welcome to work {sarah} have a great {monday}!'
second = 'Welcome to work michael have a great tuesday!'

print(compare_without_brackets(first, second))
&gt;&gt;&gt;&gt; True
</code></pre>
</div>
<span class="comment-copy">Probably too naive but how about <code>all(x==y for x, y in zip(a.split(), b.split()) if not x.startswith('{'))</code> assuming <code>a</code> is the string with the brackets and <code>b</code> the other one??</span>
<span class="comment-copy">The problem with doing anything too general here, is that if you have a mostly correct message with junk words just around where the brackets are - you will not catch this. My suggestion if the brackets always translate to a single word, is to split each sequence into the words that make it and then compare each word - skipping words that are brackets in the original. If not, it's a harder problem and you may have to accept some potential for error. @Ev.Kounis shows a good way to do it if is a 1:1 match for brackets:word subtitutions.</span>
<span class="comment-copy">I suggest taking a stab with <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expressions</a>. Check out the <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">regular expression howto</a>.</span>
<span class="comment-copy">Slightly more robust version <code>len(a.split())==len(b.split()) and all(x==y for x, y in zip(a.split(), b.split()) if not x.startswith('{'))</code>. Regex is the way to go here imho</span>
<span class="comment-copy">This sounds vaguely like an <a href="https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem">XY Problem</a>. Can you obtain the actual patterns, or deduce them from a sufficiently large amount of sample sentences?</span>
<span class="comment-copy">Thanks for answering but I don't think I can use this method because I'm basically dealing with NLP (natural language processing) where this is an example of a sentence input but there are thousands of possible inputs the user might give and hardcoding each and every template possibility is not an option.</span>
<span class="comment-copy">@Sarah I see, so we can't rely upon <code>sarah</code> and <code>monday</code> being fields. I have fixed to use <code>re.sub</code></span>
<span class="comment-copy">Works beautifully for the cases I've tested so far thanks.</span>
<span class="comment-copy"><code>Welcome to work Roy have a great one! &lt;ignored&gt;</code> does not match the <code>Welcome to work {sarah} have a great one!</code> template, but your answer will say that it does.</span>
<span class="comment-copy">Thanks @vaultah, have fixed with an ending <code>$</code></span>
<span class="comment-copy">Won't work because the hard-coded version has brackets but the API response doesn't.</span>
<span class="comment-copy">Then I guess Peter's answer should do.</span>
<span class="comment-copy">I gave it another try. Left my initial answer to avoid confusion. .. and it seems I came up with the same solution as Peter.</span>
<span class="comment-copy">Thanks, i'll upvote:).</span>
