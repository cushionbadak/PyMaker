<div class="post-text" itemprop="text">
<p>Is there a way to use a variable to decide the number of decimal points in literal string interpolation?</p>
<p>for example if I have something like</p>
<pre><code>f'{some_float:.3f}'
</code></pre>
<p>is there a way to replace the <code>3</code> with a variable?</p>
<p>The end goal is to add data labels to a bar chart:</p>
<pre><code>def autolabel_bar(rects, ax, decimals=3):
    """
    Attach a text label above each bar displaying its height
    """
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2.,
                height + 0.035,
                f'{round(height,decimals):.3f}',
                ha='center',
                va='center')
</code></pre>
<p>But I can't think of an easy way to replace the <code>3</code> in the string interpolation with the variable <code>decimal</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Format specifiers can be nested. In Python 3.5, this would look e.g. like this:</p>
<pre><code>"{:.{}f}".format(some_float, decimals)
</code></pre>
<p>But it turns out the same also works with Python 3.6 <code>f"..."</code> format strings.</p>
<pre><code>&gt;&gt;&gt; some_float = math.pi
&gt;&gt;&gt; decimals = 3
&gt;&gt;&gt; f"{some_float:.{decimals}f}"
'3.142'
</code></pre>
<p>Also works in combination with <code>round</code>:</p>
<pre><code>&gt;&gt;&gt; decimals = 5
&gt;&gt;&gt; f"{round(math.pi, decimals):.{decimals}f}"
'3.14159'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, you can escape string templating literals with double curly braces:</p>
<pre><code>decimals = 5
template = f'{{some_float:{decimals}.f}}'
// '{some_float:5.f}'
template.format(some_float=some_float)
</code></pre>
<p>I don't think you can use <a href="https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498" rel="nofollow noreferrer">formatted string literals</a> for the second substitution, but I think it's a nice solution anyway.</p>
<p>I think you made a mistake in the first code example in your question, the dot is in a wrong place in your formatter. (<code>3.f</code> instead of <code>.3f</code>)</p>
</div>
<span class="comment-copy">The only way I can see this working is with the use of RegEx.</span>
<span class="comment-copy">Without string interpolation <code>f"..."</code> you could use <code>"{:.{}f}".format(some_float, decimals)</code>, but I guess you know that. Not sure if the same works here, too: <code>f"{height:.{decimals}f}"</code> (I don't have 3.6 right now)</span>
<span class="comment-copy">@tobias_k I did not know that and it turns out <code>f"{some_float:.{decimal}f}"</code> works just fine. Perhaps add it as an aswer?</span>
<span class="comment-copy">lol...and a mod deleted by last comment about how an answer can get marked and accepted within 48secs!! :D</span>
<span class="comment-copy">@NoobEditor Don't know if there should be any guards in place to prevent this, but I proposed the solution in comments, as I did not have Python 3.6 running, so OP already checked it before I even posted the answer.</span>
<span class="comment-copy">nothing in bad spirit buddy, my comment was light hearted.Was just surprised to see someone deleting it! :)</span>
<span class="comment-copy">@tobias_k you're right, that works too, and your proposed solution is better in my opinion. I'd still leave my answer since it can serve a different use case when someone really wants to assemble the formatter.</span>
<span class="comment-copy">Yes it was a mistake, I've corrected it. Turn out <code>f"{height:.{decimals}f}"</code> works just fine as well (I'm running '3.6.1 |Anaconda custom (64-bit)| (default, May 11 2017, 13:25:24) [MSC v.1900 64 bit (AMD64)]')</span>
