<div class="post-text" itemprop="text">
<p>The problem is that the process never goes through "loaded" JSON data from a file, and I do not understand why. It always goes through creating the new file each time.</p>
<pre><code>import argparse
import os
import tempfile
import json

storage = argparse.ArgumentParser()
storage.add_argument("--key", help="input key's name")
storage.add_argument("--val", help="value of key", default=None)
args = storage.parse_args()
storage_path = os.path.join(tempfile.gettempdir(), 'storage.data')

with open(storage_path,'r') as f:
    if f.seek(2) is not 2:
        data_base = json.load(f)
        print('loaded that: ',data_base)
    else:
        f.close()
        print('each time I am creating the new one')
        with open(storage_path,'w') as f:
            data_base = {}
        f.close()

if data_base.get(args.key, 'Not found') == 'Not found': 
    if args.val is not None:
        data_base.setdefault(args.key, args.val)
        with open(storage_path, 'w') as f:
            json.dump(data_base, f)
            print('dumped this: ',data_base)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are quite a few issues with your code, ie </p>
<p>program crashing if the file does not exist:</p>
<pre><code>with open(storage_path,'r') as f:
</code></pre>
<p>opening <code>storage_path</code> for writing but actually not writing anything:</p>
<pre><code>    print('each time I am creating the new one')
    with open(storage_path,'w') as f:
        data_base = {}
    f.close()
</code></pre>
<p>And actually if you happened to have <code>f.seek(2) == 2</code>, the <code>json.load(f)</code> would also crash since at this point you moved the file pointer at the 3rd char so subsequent read in <code>json.load()</code> wouldn't get the whole content.</p>
<p>Here's a fixed version that should work AFAICT:</p>
<pre><code>import argparse
import os
import tempfile
import json

storage = argparse.ArgumentParser()
storage.add_argument("--key", help="input key's name")
storage.add_argument("--val", help="value of key", default=None)
args = storage.parse_args()
storage_path = os.path.join(tempfile.gettempdir(), 'storage.data')

data_base = None
if os.path.exists(storage_path):
    with open(storage_path,'r') as f:
        try:
            data_base = json.load(f)
            print('loaded that: ',data_base)
        except Exception as e:
            print("got %s on json.load()" % e)

if data_base is None:
    print('each time I am creating the new one')
    data_base = {}
    with open(storage_path,'w') as f:
        json.dump(data_base, f)

# don't prevent the user to set `"Not found" as value, if might
# be a legitimate value.
# NB : you don't check if `args.key` is actually set... maybe you should ?

sentinel = object()    
if data_base.get(args.key, sentinel) is sentinel:         
    if args.val is not None:
        data_base[args.key] = args.val
        with open(storage_path, 'w') as f:
            json.dump(data_base, f)
            print('dumped this: ',data_base)
</code></pre>
</div>
<span class="comment-copy">If you're using Python 2.7.x, <code>file.seek()</code> returns <code>None</code>.   Also don't use identity testing (<code>is</code>) for equality test - it is not garanteed in anyway that <code>2 is 2</code> (it will actually  'work' in CPython but that's an accident due to an implementation detail)</span>
<span class="comment-copy">@brunodesthuilliers I am using python 3.6.x</span>
<span class="comment-copy">&gt;&gt;you don't check if <code>args.key</code> is actually set... maybe you should ? Actually argparse does it for me, does not it?</span>
<span class="comment-copy">@pure_true Nope, it doesn't.  Options are, well, optional, you know ? Unless you explicitely make them not optional that is : <a href="https://docs.python.org/3/library/argparse.html#required" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html#required</a></span>
