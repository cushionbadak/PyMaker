<div class="post-text" itemprop="text">
<p><code>datetime.now()</code> and <code>datetime.today()</code> return time in UTC on my computer even though <a href="https://docs.python.org/3/library/datetime.html#datetime-objects" rel="noreferrer">the documentation</a> says they should return local time.</p>
<p>Here's the script I ran:</p>
<pre><code>#!/usr/bin/python

import time
import datetime

if __name__ == "__main__":
   print(datetime.datetime.now())
   print(datetime.datetime.today())
   print(datetime.datetime.fromtimestamp(time.time()))
</code></pre>
<p>and here's the output:</p>
<pre class="lang-none prettyprint-override"><code>2017-11-29 22:47:35.339914
2017-11-29 22:47:35.340399
2017-11-29 22:47:35.340399
</code></pre>
<p>The output of running <code>date</code> right after it is:</p>
<pre class="lang-none prettyprint-override"><code>Wed, Nov 29, 2017  3:47:43 PM
</code></pre>
<p>Why is my installation returning time in UTC?<br/>
What can I do get those functions to return local time?</p>
<p><strong>PS</strong> We are in MST, which is UTC-7.</p>
<p><strong>PS 2</strong> I realize there are methods to convert a UTC time to local time, such as those explained in <a href="https://stackoverflow.com/questions/4563272/convert-a-python-utc-datetime-to-a-local-datetime-using-only-python-standard-lib">Convert a python UTC datetime to a local datetime using only python standard library?</a>. However, I am trying to understand the cause of the fundamental problem and not looking for a method to patch the problem in my own code.</p>
<hr/>
<p>In response to comment by @jwodder:</p>
<p>The output of executing</p>
<pre><code>print(time.altzone)
print(time.timezone)
print(time.tzname)
</code></pre>
<p>is:</p>
<pre class="lang-none prettyprint-override"><code>-3600
0
('Ame', 'ric')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you note in <a href="https://stackoverflow.com/a/47578455/9200529">your answer</a>, the <code>TZ</code> environment variable is the key here. On unix-type systems, this supports more "friendly" values like "US/Pacific" or, indeed, "America/Denver", but on Windows, it doesn't. Although it's not available on Windows, the <a href="https://docs.python.org/2/library/time.html#time.tzset" rel="noreferrer">documentation for the <code>time.tzset</code> function</a> describes the format you'll need to set TZ in to get what you want. It's... not pretty. But it works:</p>
<pre><code>C:\Users\zorb&gt;set TZ=MST+07MDT,M3.2.0,M11.1.0
C:\Users\zorb&gt;python.exe
&gt;&gt;&gt; import time
&gt;&gt;&gt; time.tzname
('MST', 'MDT')
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(2018, 2, 9, 16, 27, 7, 164062)
</code></pre>
<p>(This was at 15:27 in Pacific time.) The structure of this format is:</p>
<ul>
<li>Standard time abbrevation (MST)</li>
<li>UTC offset of standard time, in hours (+07)</li>
<li>Daylight time abbreviation</li>
<li>When daylight time starts (see below)</li>
<li>When daylight time ends (see below)</li>
</ul>
<p>The format for the start and end of daylight time is:</p>
<ul>
<li><code>M</code> (for "month-based")</li>
<li>Month number - 3/March or 11/November, in this case.</li>
<li>Week of the month - 1 through 5, meaning the 1st through 5th occurrence of the day named below.</li>
<li>Day of the week - 0 for Sunday through 6 for Saturday</li>
</ul>
<p>There are also options to specify the time at which daylight time starts and ends (but it defaults to 02:00:00, so unnecessary in this case) and the offset for daylight time (but it defaults to 1 hour, so also not necessary).</p>
<p>(edit) Turns out this is actually a glibc feature, not directly a python one. More detailed info in the <a href="https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html" rel="noreferrer">glibc docs</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Initially, it appeared to be a problem caused by the use of cygwin.</p>
<p>The question at <a href="https://stackoverflow.com/questions/40350812/cygwin-shows-utc-time-instead-of-local-time">Cygwin shows UTC time instead of local time</a> helped further isolate the problem to the value of the environment variable <code>TZ</code> in cygwin.</p>
<p>The updated script:</p>
<pre><code>import time
import datetime

if __name__ == "__main__":
   print(datetime.datetime.now())
   print(datetime.datetime.today())
   print(datetime.datetime.fromtimestamp(time.time()))
   print(time.altzone)
   print(time.timezone)
   print(time.tzname)
</code></pre>
<p>Output when run under a Windows CMD shell with, where <code>TZ</code> is not set:</p>
<pre class="lang-none prettyprint-override"><code>"D:\Program Files\Python35\python.exe" test.py
</code></pre>
<pre class="lang-none prettyprint-override"><code>2017-11-30 09:39:47.236798
2017-11-30 09:39:47.236799
2017-11-30 09:39:47.236799
21600
25200
('Mountain Standard Time', 'Mountain Daylight Time')
</code></pre>
<p>Output when run under a cygwin bash shell with, where <code>TZ</code> is set to <code>"America/Denver"</code>:</p>
<pre class="lang-none prettyprint-override"><code> /cygdrive/D/Program\ Files/Python35/python.exe test.py
</code></pre>
<pre class="lang-none prettyprint-override"><code>2017-11-30 16:39:45.419884
2017-11-30 16:39:45.419884
2017-11-30 16:39:45.419884
-3600
0
('Ame', 'ric')
</code></pre>
<p>It's set to <code>"America/Denver"</code>. When I executed</p>
<pre class="lang-none prettyprint-override"><code>env TZ="" /cygdrive/D/Program\ Files/Python35/python.exe test.py
</code></pre>
<p>I got a more sensible output:</p>
<pre class="lang-none prettyprint-override"><code>2017-11-30 09:56:08.643368
2017-11-30 09:56:08.643368
2017-11-30 09:56:08.643368
21600
25200
('Mountain Standard Time', 'Mountain Daylight Time')
</code></pre>
<p>When I set the environment variable <code>TZ</code> to <code>"America/Denver"</code> in the windows CMD shell, I get the same output as when run in the cygwin shell.</p>
<p>It's not clear to me how Python uses the environment variable <code>TZ</code> and what the correct values are for it.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think there is some odd behavior going on with things using the glibc time and timezone libraries on Windows. I started noticing this behavior in both python and emacs recently.</p>
<p>The best thing to do is probably to set TZ to the "ugly" version described in the best answer as that seems to fix issues in python and emacs and works correctly in cygwin as well.</p>
<p>Another workaround I tried is to make sure the TZ environment variable is <em>NOT</em> set. The following illustrates the problem around 10:18 New York time in python. I get similar results using either cygwin or CMD on Windows. Emacs illustrates the same problem using the <code>current-time-string</code> function suggesting it is a glibc issue or at least some library which both python and emacs are using. Interestingly the <code>date</code> command in cygwin gives the correct result with TZ set to "America/New York" but incorrect if TZ is unset.</p>
<p>Summary: some things (e.g., python, emacs) on Windows seem to not accept "America/New_York" for TZ while some things (e.g., cygwin) do accept it. Using something like <code>EST+05EDT,M4.1.0,M10.5.0</code> for eastern time (or appropriate ugly equivalent) works.</p>
<pre><code>$ echo $TZ
America/New_York

$ python -i
Python 3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 10:22:32) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(2018, 5, 14, 15, 38, 6, 174073)
&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(2018, 5, 14, 15, 38, 57, 141708)
&gt;&gt;&gt; quit()

$ export TZ=

$ python -i
Python 3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 10:22:32) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(2018, 5, 14, 10, 38, 41, 102117)
</code></pre>
</div>
<span class="comment-copy">See: <a href="https://stackoverflow.com/questions/4563272/convert-a-python-utc-datetime-to-a-local-datetime-using-only-python-standard-lib" title="convert a python utc datetime to a local datetime using only python standard lib">stackoverflow.com/questions/4563272/â€¦</a></span>
<span class="comment-copy">@rassar, thanks for the link. It's got useful info but doesn't answer the question I have.</span>
<span class="comment-copy">Your system's timezone is likely set to UTC.  What values do <a href="https://docs.python.org/3/library/time.html#timezone-constants" rel="nofollow noreferrer"><code>time.tzname</code> and friends</a> have?</span>
<span class="comment-copy"><code>date</code> shows me the timezone; if you do <code>date -R</code> what does that say?</span>
<span class="comment-copy">You timezone is definitely hosed.  I am guessing the <code>'Ame', 'ric'</code> is the start of <code>America</code>. No clue how that happened. On my machine for <code>time.tzname</code> I get <code>('Pacific Standard Time', 'Pacific Daylight Time')</code>.  You did not specify your OS, etc, but track down how the timezone is set on your system...</span>
<span class="comment-copy">This sounds promising. I'll definite investigate further using your suggestion.</span>
<span class="comment-copy">Verified that your suggestion works. Thanks.</span>
<span class="comment-copy">Glad to hear it!</span>
<span class="comment-copy">Yet another reason I'll never use Cygwin.</span>
<span class="comment-copy">@NickT, cygwin turned out to be a red herring though. The real problem is that if the environment variable <code>TZ</code> is set, even just in CMD console, the problem is still there. That's a fundamental Python problem.</span>
<span class="comment-copy">So you're using a non-Cygwin version of Python from a Cygwin shell? Then yes, the TZ conventions will most likely be incompatible. It would probably be best to use the Cygwin version of Python if you want it to understand Unix-style TZ convention.</span>
<span class="comment-copy">@Ove, ideally, yes. However, sometimes that's not an option.</span>
<span class="comment-copy">Have you tried setting <code>TZ</code> using the form suggested in the accepted answer?</span>
<span class="comment-copy">Yes. Updated answer to reflect that. Thanks.</span>
