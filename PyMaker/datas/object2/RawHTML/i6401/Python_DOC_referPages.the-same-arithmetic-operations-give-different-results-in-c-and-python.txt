<div class="post-text" itemprop="text">
<p>I had to find the result of a function <code>f(x) = x / (1-x)^2</code> , where <code>0 &lt; x &lt; 1</code>.
The value had to be formatted up to <code>6</code> decimal places only. </p>
<p>Here is my C++ code:  </p>
<pre><code>float x; scanf("%f",&amp;x);
printf("%.6f",x/((1-x)*(1-x)));
</code></pre>
<p>And I did for the same in Python:</p>
<pre><code> x = float(input()) 
 print ("%.6f" % (x/((1-x)**2)))
</code></pre>
<p>For some values of x, both the programs give different answers.</p>
<p>For example, for <code>x = 0.84567</code>,  </p>
<p>C++ gives <code>35.505867</code> and Python gives <code>35.505874</code></p>
<p>Why does this happen?<br/>
According to solution, the Python answers are right, while C++ answers are wrong.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;

int main()
{
    const char data[] = "0.84567";
    float x; 
    sscanf(data, "%f",&amp;x);

    double x2;
    sscanf(data, "%lf",&amp;x2);

    std::cout &lt;&lt; std::setprecision(8) &lt;&lt; (x/((1-x)*(1-x))) &lt;&lt; std::endl;
    std::cout &lt;&lt; std::setprecision(8) &lt;&lt; (x2/((1-x2)*(1-x2))) &lt;&lt; std::endl;
}
</code></pre>
<p>sample output:</p>
<pre><code>35.505867
35.505874
</code></pre>
<p>Conclusion:</p>
<p>Python is using doubles, you're using floats.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has implemented IEEE 754 double-precision, so its output is closer to real answer.</p>
<p>From documentation: <a href="https://docs.python.org/3/tutorial/floatingpoint.html#representation-error" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/floatingpoint.html#representation-error</a></p>
<blockquote>
<p>Almost all machines today (November 2000) use IEEE-754 floating point
  arithmetic, and almost all platforms map Python floats to IEEE-754
  “double precision”.</p>
</blockquote>
<p>In C++ float is single-precision. Using <code>double</code> instead of <code>float</code> should give you similar output.</p>
</div>
<div class="post-text" itemprop="text">
<p>As others have pointed out, floating point numbers in python are implemented using <code>double</code> type in C. See <a href="https://docs.python.org/2/library/stdtypes.html#numeric-types-int-float-long-complex" rel="nofollow noreferrer">section 5.4</a> of the Python Documentation.</p>
<p>Running this example on <a href="http://coliru.stacked-crooked.com/a/54f52c9a8b7641fa" rel="nofollow noreferrer">Coliru</a>:</p>
<pre><code>#include &lt;cmath&gt;
#include &lt;cstdio&gt;

int main()
{
    float pf = 0.84567f;
    printf("%.6f\n",pf/((1-pf)*(1-pf)));

    double pd = 0.84567;
    printf("%.6f\n",pd/((1-pd)*(1-pd)));

    return 0;
}
</code></pre>
<p>demonstrates the difference:</p>
<pre><code>35.505867
35.505874
</code></pre>
</div>
<span class="comment-copy">there is no right and wrong with floating points, just more or less accurate</span>
<span class="comment-copy">btw if you do care about accuracy then you should use <code>doule</code> not <code>float</code></span>
<span class="comment-copy">Hum. Interesting. What if you write the python exponentation longhand? Also, a compilable example from <code>int main()</code> and similar for the python snippet might keep the downvoters away. And tin the read from input: hardcode the <code>p</code>.</span>
<span class="comment-copy">Welcome to floating point arithmetic. Check this question: <a href="https://stackoverflow.com/questions/3846631/c-vs-python-precision" title="c vs python precision">stackoverflow.com/questions/3846631/c-vs-python-precision</a></span>
<span class="comment-copy">I guess, python uses cmath under the hood and the difference is in the parsing. C++ give the same result with std::pow(1.f-p, 2.f)</span>
<span class="comment-copy">Yes, this is obvious if you put it the way you have. The differences are too big for it to be anything else. Have an upvote.</span>
<span class="comment-copy">You are both completely incorrect here. They are both using float but with different precisions. Look at the code, both are using float.</span>
<span class="comment-copy">@EamonnKenny: I don't agree. See <a href="https://stackoverflow.com/questions/34518653/raising-to-powers-in-c-vs-python/34518772" title="raising to powers in c vs python">stackoverflow.com/questions/34518653/…</a> The <code>**</code> forces evaluation in <code>double</code> or "higher".</span>
<span class="comment-copy">@EamonnKenny Per <a href="https://stackoverflow.com/a/6663292/4342498">this</a> <code>float</code> in python is <code>double</code> in C++.</span>
<span class="comment-copy">You are right about the **, but your logic is still wrong. If you use (1-p)*(1-p) you get the same answer. An stackoverflow is not the authority on this, Stroustrup is. There is a difference of precision. And the conclusion above is completely wrong.</span>
