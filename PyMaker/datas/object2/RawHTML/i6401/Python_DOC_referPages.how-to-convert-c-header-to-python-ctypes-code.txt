<div class="post-text" itemprop="text">
<p>The c-header below </p>
<pre><code>typedef struct _node_t {
int value;
struct _node_t* next;
} node_t;
</code></pre>
<p>Can be translated like below.</p>
<pre><code>class node_t(Structure):
    pass

node_t._fields_ = [
        ('value', ctypes.c_int),
        ('next', POINTER(node_t))
]
</code></pre>
<p>However, I can't translate the c-header codes with void and call-back functions.
How should I translate below c-header to Python c-types code?</p>
<pre><code>class PacketHandlerDelegate_D(Structure):
pass

PacketHandlerDelegate_D._fields_ = [
    // Delegate object
    void *delegate;

    // Callback functions
    void (*addSampleToA)(void *delegate, int sample1, int sample2);
    void (*addSampleToB)(void *delegate, unsigned short int signalfast, unsigned short int signalSlow);
    void (*addSampleToC)(void *delegate, char x, char y, char z);
    void (*addSampleToD)(void *delegate, unsigned short int sample);
    void (*addSampleToE)(void *delegate, short int sample);
</code></pre>
<p>]</p>
</div>
<div class="post-text" itemprop="text">
<p>Reading the documentation, function pointer types can be generated by <a href="https://docs.python.org/3/library/ctypes.html#callback-functions" rel="nofollow noreferrer"><code>CFUNCTYPE</code></a>. The return type <code>void</code> is signalled by <code>None</code>. <code>c_void_p</code> can be used for a void pointer.</p>
<p>Thus for example:</p>
<pre><code>ADD_SAMPLE_TO_B_TYPE = CFUNCTYPE(None, c_void_p, c_ushort, c_ushort)

...

PacketHandlerDelegate_D._fields_ = [
    ...
    (addSampleToB, ADD_SAMPLE_TO_B_TYPE),
    ...
]
</code></pre>
<p>P.S. since you don't have a recursive declaration in <code>PacketHandlerDelegate_D</code>, you can define these within the class body:</p>
<pre><code>class PacketHandlerDelegate_D(Structure):
    ...
    addSampleToB = ADD_SAMPLE_TO_B_TYPE
    ...
</code></pre>
</div>
