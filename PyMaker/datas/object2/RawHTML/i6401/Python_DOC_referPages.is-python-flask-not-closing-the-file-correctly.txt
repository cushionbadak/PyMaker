<div class="post-text" itemprop="text">
<p>I’m new to python. I have a separate flask web application that reads the ‘log.txt’ file in real time (via AJAX)
The expected result is that it shows “message 1” and 5 seconds later shows “message 2”. Then I have the below scripts to write into the files:</p>
<p>When I make a standalone Python script the below works (I see the first message and 5 seconds later the second message):</p>
<pre><code>   f = sys.stdout = sys.stderr = open('static/staging/stdout/discovery.log', 'w')
    print "Message 1"
    f.close()
    time.sleep(5)

    f = sys.stdout = sys.stderr = open('static/log.txt', 'a')
    print "Message 2"
    f.close()
    time.sleep(5)
</code></pre>
<p>When I put it as part of a web app, and the function Is call as below, they both appear <strong>together</strong> after 10 seconds and not one after the other.</p>
<pre><code>@app.route('/mywriter/')
def myApp():
    f = sys.stdout = sys.stderr = open('static/log.txt', 'w')
    print "Message 1"
    f.close()
    time.sleep(5)

    f = sys.stdout = sys.stderr = open('static/log.txt', 'a')
    print "Message 2”
    f.close()
    time.sleep(5)
</code></pre>
<p>I must point out at this stage that I was using <code>flush()</code> and <code>fsync()</code> but from what I understand doing <code>f.close()</code> will do both of these anyway. Besides it works when I put it as a standalone script, but not when I put it into a method as part of a webapp.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the debugger in your IDE. Set a breakpoint at the first time.sleep(), and stepping through line by line you should be able to diagnose the issue much more exactly.</p>
</div>
<span class="comment-copy">Why would you overwrite <code>stdout/stderr</code>? This is sooooo wrong on sooooo many levels. Just do proper <code>f.write</code> instead of prints. Anyway this seems to be related to the internal buffering (which can be manipulated from the outside of the code). Try inserting <code>f.flush()</code> lines after each write.</span>
<span class="comment-copy">I'm directing both stdout &amp; stderr, which works as expected. I have already mentioned that I have used 'f.flush()' already, but i'm not using f.close() as it calls the f.flush method within</span>
<span class="comment-copy">listen, you are messing with one of the most important globals. Just don't. Side effects are hard to imagine. Anyway i cant reproduce your issue. How are you monitoring the file?</span>
<span class="comment-copy">How would you suggest I redirect BOTH sdtout &amp; stderr to one file then?.... I'm calling the function on a button which calls a JS function, which in turn calls that python method. To monitor the log.txt file I input i make an AJAX call every second, that will get the data from the text file and display it into a div.</span>
<span class="comment-copy"><code>print</code> is not for debuging. Actually its only purpose is educational. It should be avoided otherwise. For proper debuging do what most people do: use <a href="https://docs.python.org/3/library/logging.html" rel="nofollow noreferrer">logging module</a>. You may find out that your weird issue is actually related to overwriting stdout/stderr. As I said, possible side effects are incomprehensible.</span>
