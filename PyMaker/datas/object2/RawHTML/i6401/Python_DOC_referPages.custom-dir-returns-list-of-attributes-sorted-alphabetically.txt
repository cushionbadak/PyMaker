<div class="post-text" itemprop="text">
<p>I have a custom <code>__dir__</code> implementation in my base class which is supposed to return a list of all user-defined <code>__slots__</code> attributes. This is working, in general, but it appears to be doing a <code>sort</code> on the result before it returns, even though I did not program to do that (I need the attributes in order the exact same order they're assigned).</p>
<p>An example:</p>
<pre><code>class A:
    __slots__ = ['b', 'a']

    def __dir__(self):
        slot_attrs = []
        for parent_class in reversed(type(self).__mro__[:-1]):
            for attr in parent_class.__slots__:
                slot_attrs.append(attr)
        for attr in self.__slots__:
            slot_attrs.append(attr)
        return slot_attrs


class B(A):
    __slots__ = ['c', 'd']
    pass


class C(B):
    __slots__ = []
    pass


class D:
    __slots__ = ['b', 'a']

    def slots(self):
        slot_attrs = []
        for parent_class in reversed(type(self).__mro__[:-1]):
            for attr in parent_class.__slots__:
                slot_attrs.append(attr)
        for attr in self.__slots__:
            slot_attrs.append(attr)
        return slot_attrs


class E(D):
    __slots__ = ['c', 'd']
    pass


class F(E):
    pass
</code></pre>
<p>The output for <code>slots()</code> and <code>__dir__()</code> should be, imo, identical.</p>
<p>but instead, this happens:</p>
<pre><code>&gt;&gt;&gt;c = C()
&gt;&gt;&gt;f = F()

&gt;&gt;&gt;print(dir(c))
['a', 'b', 'c', 'd']
&gt;&gt;&gt;print(f.slots())
['b', 'a', 'c', 'd', 'c', 'd', 'c', 'd']
</code></pre>
<p>I can <em>kind of</em> understand that it sorts the output alphabetically, when using <code>dir()</code> - this is <a href="https://docs.python.org/3/library/functions.html#dir" rel="nofollow noreferrer">documented in the docs</a>. However, it looks like a bug - or at least unexpected behaviour to me- that it sorts the output even though I have defined a custom <code>__dir__</code> method.</p>
<p>The second output simply throws me off my game completely. It suggests that <code>dir</code> also uses some sort of filter, perhaps a <code>set</code> to avoid duplicate outputs, since the code is identical but calling <code>slots()</code> returns duplicate values.</p>
<p>I neither A) understand why it does that in the first place, nor B) what on earth <code>dir</code> is doing afterall. </p>
<p>Any pointers here?</p>
<p><strong>edit</strong>:<br/>
The second case is solved- <code>__mro__</code> contains the caller's class, as well as all classes it inherits from - therefore that class is included twice. 
i.e.:</p>
<pre><code>&gt;&gt;&gt;F.__mro__
(&lt;class '__main__.F'&gt;, &lt;class '__main__.E'&gt;, &lt;class '__main__.D'&gt;, &lt;class 'object'&gt;)
</code></pre>
<p><strong>edit 2:</strong><br/>
The plot thickens. The issue referenced in the comments shed a tiny bit more light on the source of this behaviour:</p>
<pre><code>&gt;&gt;Couldn't __dir__ also be allowed to return a tuple?
no, because tuples are not sortable, and i don't want to 
over complicate the c-side code of PyObject_Dir. 
having __dir__ returning only a list is equivalent to 
__repr__ returning only strings.
</code></pre>
<p>This appears to be something originating from the C source code, from before <code>__dir__</code> was implemented. </p>
<p><strong>edit 3:</strong><br/>
I have opened an <a href="https://bugs.python.org/msg304606" rel="nofollow noreferrer">issue on python's bug tracker</a>. Let's see what the consensus is. However, I expect this will be put on the backburner (if at all), since <code>dir()</code> is, afaik, primarily designed for inspection in IDLE and such.</p>
</div>
<div class="post-text" itemprop="text">
<p>As per the <a href="https://bugs.python.org/issue31816" rel="nofollow noreferrer">issue opened on the Python bug tracker</a>:</p>
<pre><code>https://docs.python.org/3/library/functions.html#dir also states that "The resulting list is sorted alphabetically." The section has an example where __dir__ returns an unsorted list but dir() returns a sorted list:

            class Shape:

...     def __dir__(self):
...         return ['area', 'perimeter', 'location']

            s = Shape()
            dir(s)

['area', 'location', 'perimeter']

Since the primary purpose of dir() is convenient use for humans, sorting makes perfectly sense. If you need tight control over order of values, you should make your object iterable instead or provide another method.

Several dunder methods perform some sort of post-processing or post-check:

            class Example:

...     def __bool__(self): return 2
...

            bool(Example())

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __bool__ should return bool, returned int

            class MyInt(int):

...     pass
...

            type(MyInt(1))

&lt;class '__main__.MyInt'&gt;

            class Example:

...     def __int__(self):
...         return MyInt(1)
...

            int(Example())

1

            type(int(Example()))

&lt;class 'int'&gt;
</code></pre>
</div>
<span class="comment-copy">all non-unique elements are removed, because you cannot have access to methods of the same name in python. <code>dir</code> just calls your custom method but post-processes it to be compilant to the documentation.</span>
<span class="comment-copy">Actually, id doesn't remove them - I just tested it out, it keeps them as well. I was just adding <code>__slots__</code> from <code>F</code> twice.</span>
<span class="comment-copy">It still seems like unexpected behaviour. If <code>dir()</code> calls <code>__dir__()</code>, then I'd expect it to do just as I say, and not do some behind-the-scenes voodoo on top of it.</span>
<span class="comment-copy">Relevant issue: <a href="https://bugs.python.org/issue1591665" rel="nofollow noreferrer">bugs.python.org/issue1591665</a>. I don't see any explicit discussion of the rationale for the sorting, though, either in that issue or in the <a href="https://mail.python.org/pipermail/python-dev/2006-November/069865.html" rel="nofollow noreferrer">python-ideas discussion</a> linked to the issue.</span>
<span class="comment-copy">this Q&amp;A is somehow related with an answer from Martjin, should help: <a href="https://stackoverflow.com/questions/14361256/whats-the-biggest-difference-between-dir-and-dict-in-python" title="whats the biggest difference between dir and dict in python">stackoverflow.com/questions/14361256/â€¦</a></span>
