<div class="post-text" itemprop="text">
<p>I have a concurrently-run program where I want to create a log for each child process. I'll first describe my setup and then the issue I'm facing. Here are my primary modules: </p>
<p>mp_handler.py: </p>
<pre><code>import logging
import multiprocessing as mp

def mp_handler(target, args_list):

    # configure logs
    for args in args_list: 
        logger_id = args[0] # first arg suffices to id a process, in my case
        logger = logging.getLogger(logger_id)
        handler = logging.FileHandler(logger_id + '.log')
        logger.setLevel(logging.INFO)
        logger.addHandler(handler)

    mp.set_start_method('spawn') # bug fix, see below        

    # build each process
    for args in args_list:
        p = mp.Process(target = target, args = args)
        p.start()
</code></pre>
<p>mp_worker.py:</p>
<pre><code>import logging
from deco_module import deco
from my_module import function_with_open_cv

@deco
def mp_worker(args):
    logger_id = arg[0]
    logger = logging.getLogger(logger_id)

    log.info("Information about process %s" % log_id)         

    # do a lot of stuff with openCV3 
    function_with_open_cv(args)       # also logs to this child's log file
</code></pre>
<p>deco_module.py: this module does some exception handling and I have no idea why it might interfere but I figure I'd include it just in case. </p>
<pre><code>from functools import wraps
import logging

def deco(function):

    @wraps(function)
    def wrapper(*args):
        logger_id = *args[0]
        logger = logging.getLogger(logger_id)
        try:
            function(*args)
        except: 
            logger.info('a message in case the child fails.')

    return wrapper
</code></pre>
<p>Now, on to my issue. I was getting the error described in this post: <a href="https://github.com/opencv/opencv/issues/5150" rel="nofollow noreferrer">https://github.com/opencv/opencv/issues/5150</a>. Hence, I wrote the <code>mp.set_start_method('spawn')</code> line in <code>mp_handler()</code>. </p>
<p>After debugging, however, I found that that line was causing the <code>logger = logging.getLogger(logger_id)</code> line <code>mp_worker()</code> to create a NEW logger as opposed to getting the one created in the parent, i.e. <code>mp_handler()</code>. I was able to see this by printing <code>hex(id(logger))</code> in both the parent and the child modules and see that the locations in memory are different. Indeed, as I said, writing <code>mp.set_start_method('fork')</code> avoids this issue (this makes very rough sense to me as my understanding is that spawn will create a new space for the logger). </p>
<p>main problem: So, the problem is, how do I work around the fact that I need the start method to be set to 'spawn' for the sake of OpenCV but need to toggle it off in order for log communication between modules (i.e. in order for mp_worker to recognize its correct logger_id in order to log to the correct file)? As part of good practice, I want to keep all logging configs out of the children and submodules alike. </p>
<p>secondary problem: supposing I ignore the fact that I need OpenCV and set the method to 'fork.' In this case I noticed that none of the logging.info() statements in the <code>function_with_open_cv()</code> function never get to the log! So, supposing your recommendation does involve setting it to fork, what is the work around here? EDIT: FIXED! This is also being caused by OpenCV. So the problem still stands... how do I use a spawn process and not lose my logger ID?</p>
<p>Thank you so much!</p>
</div>
<div class="post-text" itemprop="text">
<p>You shouldn't configure logging before a process is spawned, but after. See <a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes" rel="nofollow noreferrer">the documentation</a> for an example of how to do it correctly. This applies to Python 3, but if you need to run it under Python 2, you can use the <a href="https://pypi.python.org/pypi/logutils" rel="nofollow noreferrer">logutils package</a>, which provides <code>QueueListener</code> and <code>QueueHandler</code> classes.</p>
<p>The logging cookbook contains more example code relating to using logging with <code>multiprocessing</code>.</p>
</div>
<span class="comment-copy">This would be a much better answer if you went into some detail into what goes wrong here.</span>
<span class="comment-copy">@SamHartman that's no reason to downvote. It's not really possible to explain threading, forking and their interactions in a reasonably concise way.</span>
<span class="comment-copy">I downvoted because I thought you didn't answer the question: in particular I thought that part of the question asked what was going on.  Reading though, I realize that the OP only asked how to fix.  In a sufficiently complex application, I don't think this is a good answer, but I do regret the downvote.  Absent an edit, it will not let me change.</span>
