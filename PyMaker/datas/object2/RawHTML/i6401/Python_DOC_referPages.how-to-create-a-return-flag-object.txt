<div class="post-text" itemprop="text">
<p>Currently <a href="https://docs.scipy.org/doc/scipy/reference/optimize.html" rel="nofollow noreferrer">a set of functions</a> returns <code>success=True</code> or <code>False</code>.  </p>
<p>We've discovered this isn't good enough, though, since <code>False</code> can convey both "valid result" or "invalid result", and we want behavior to differ in each case.  </p>
<p><a href="https://github.com/scipy/scipy/pull/7819#issuecomment-331761473" rel="nofollow noreferrer">So I think they should be changed</a> to instead return <code>{True, False, InvalidResult}</code>, where <code>bool(InvalidResult)</code> is false for backward compatibility, but can be tested for using <code>if is InvalidResult</code>.</p>
<p>I'm not sure what the terminology is, but I'm imagining something like the <a href="https://docs.python.org/3/library/constants.html#NotImplemented" rel="nofollow noreferrer">built-in <code>NotImplemented</code></a> that's returned by comparison functions. This is called a "special value" in the docs and is of type <code>NotImplementedType</code>.</p>
<p>How to create such an object and what methods/attributes should it have?  I should create my own type like <code>NotImplementedType</code> also, or is there an existing type that conveys this "flag" concept?  It's a similar kind of object to <code>True</code>, <code>False</code>, <code>None</code>, <code>NotImplemented</code>, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could just use <code>None</code> or <code>0</code> as the <code>InvalidResult</code> value, e.g. in <code>my_mod</code>, define <code>InvalidResult = None</code>, then elsewhere you can test <code>if result is my_mod.InvalidResult</code>. See here for some more info on the "truthfulness" of None: <a href="https://stackoverflow.com/questions/3914667/false-or-none-vs-none-or-false">False or None vs. None or False</a></p>
<p>Or you could define an object with suitable methods for Boolean conversion; hopefully others will chime in with those details. </p>
<p>Note that whichever way you go, you'll have to be careful if you have multipart Boolean expressions: <code>InvalidResult and False</code> will give <code>InvalidResult</code>
but <code>False and InvalidResult</code> will give <code>False</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Apparently this is called a "<a href="http://www.ianbicking.org/blog/2008/12/the-magic-sentinel.html" rel="nofollow noreferrer">sentinel</a>" and is a simple as this:</p>
<pre><code>class InvalidResultType(object):
    """
    Indicates that minimization has failed and result is invalid (such as a
    boundary or constraint violation)
    """
    def __repr__(self):
        return 'InvalidResult'
    def __bool__(self):
        return False
    def __reduce__(self):
        return 'InvalidResult'

InvalidResult = InvalidResultType()


success = InvalidResult

assert success == InvalidResult
assert success is InvalidResult
assert not bool(InvalidResult)
assert InvalidResult != True
assert InvalidResult != False  # Not sure about this yet
assert InvalidResult != None
</code></pre>
<p><em>Now</em> of course I find the similar questions:</p>
<p><a href="https://stackoverflow.com/a/17277929/125507">Defining my own None-like Python constant</a></p>
<p>and the <code>__reduce__</code> might be overkill; I'm not sure if pickling or copying will ever matter</p>
<p><a href="https://stackoverflow.com/questions/41048643/how-to-create-a-second-none-in-python-making-a-singleton-object-where-the-id-is#comment69308959_41048786">How to create a second None in Python? Making a singleton object where the id is always the same</a></p>
</div>
<span class="comment-copy">Sounds like a "tribool"... Is <code>None</code> also a valid value or could that be used to mean no result?</span>
<span class="comment-copy">cant you just use None? bool(None) == False</span>
<span class="comment-copy">@georgexsh Yes, but it was thought that InvalidResult is clearer</span>
<span class="comment-copy">@endolith okay... so <code>InvalidResult = None</code> - and you're done? :p</span>
<span class="comment-copy">@endolith You could have the invalid result raise an exception. Or a (success, valid) tuple.</span>
