<div class="post-text" itemprop="text">
<p>How do I change the sequence of string?
For e.g. </p>
<pre><code>mys='4002-10-21'
</code></pre>
<p>Expected result:</p>
<pre><code>'4002-21-10'
</code></pre>
<p>What I have tried:</p>
<p>I can enumerate the splitted string and then re-arrange the sequence like 1-3-2</p>
<pre><code>newlist=list()
for i, v in enumerate(mys.split('-')):
    newlist.append(v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With <a href="https://docs.python.org/2/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> you can get multiple items with a single call:</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; '-'.join(itemgetter(0,2,1)(mys.split('-')))
'4002-21-10'
</code></pre>
<p>With <a href="https://docs.python.org/3.4/library/string.html#format-string-syntax" rel="nofollow noreferrer">string format </a> you can pick values from arguments:</p>
<pre><code>&gt;&gt;&gt; "{0}-{2}-{1}".format(*mys.split('-'))
'4002-21-10'
</code></pre>
<p>With <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer"><code>re.sub</code></a> you can capture groups and reorder them (assuming digits):</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'(\d+)-(\d+)-(\d+)', r'\1-\3-\2', mys)
'4002-21-10'
</code></pre>
<p>If you need this in <a href="https://pandas.pydata.org/pandas-docs/stable/index.html" rel="nofollow noreferrer">pandas</a> (as hinted in comments), you can use the regex-based approach in both <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.replace.html#pandas-dataframe-replace" rel="nofollow noreferrer"><code>DataFrame.replace</code></a> and <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.replace.html#pandas-series-str-replace" rel="nofollow noreferrer"><code>Series.str.replace</code></a>, for example (add <code>inplace=True</code> for in-place subs):</p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.DataFrame({'dates': ['4002-10-21']})
&gt;&gt;&gt; df.dates.replace(r'(\d+)-(\d+)-(\d+)', r'\1-\3-\2', regex=True)
0    4002-21-10
Name: dates, dtype: object
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're really trying to just reformat datetime string, I suggest you parse the string to a datetime object and format it as you wish:</p>
<pre><code>import datetime                                                                                   

def rearrange(*args):                                                                             
    return [datetime.datetime.strptime(arg, '%Y-%m-%d').strftime('%Y-%d-%m') for arg in args]
</code></pre>
<hr/>
<pre><code>&gt;&gt;&gt; rearrange('4002-10-21', '4002-10-28')
['4002-21-10', '4002-28-10']  
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Given the context of the question, your approach is fine:</p>
<pre><code>mys = '4002-10-21'
parts = mys.split('-')
mys = parts[0] + '-' + parts[2] + '-' + parts[1]
print(mys)  # "4002-21-10"
</code></pre>
<p>It's brittle certainly, but if it's for a personal or one-off script, who cares?  If you need more flexibility, then you'll need to describe more explicitly the nature of your constraints.</p>
</div>
<div class="post-text" itemprop="text">
<p>One good way is to use regular expressions this way the numbers which I presume can have different lengths eg: <code>'4002-21-1'</code> will also work fine.</p>
<pre><code>    import re

    mys = '4002-21-10'

    parts = re.findall('[\d]+', mys) # finds all numbers that are next to each other
    print(parts) # just so you see what is created

    formatted_mys = parts[0] + "-" + parts[2] + "-" + parts[1] # put the parts together in the way you wanted
</code></pre>
<p>You can remove the <code>print</code> line if you wish of course. There are many others ways to do what you want but if you need it to be flexible this is what I would recommend.</p>
</div>
<div class="post-text" itemprop="text">
<p>Given:</p>
<pre><code>mys='4002-10-21'
</code></pre>
<p>You can simply write up a function for it such as this:</p>
<pre><code>def change_order(string, split_char, *args):
    string = string.split(split_char)

    new_list = []

    for i in args:
        try:
            new_list.append(string[i])  # change to i-1 for abstracted parameters
        except IndexError:
            return False

    return split_char.join(new_list)
</code></pre>
<p>Which given <code>'4002-10-21'</code> with an <code>1, 3, 2</code> (actual code takes 1 away because it's zero-indexed) reordering gives:</p>
<pre><code>&gt;&gt;&gt; test.change_order('4002-10-21', '-', 0, 2, 1)
'4002-21-10'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can split on <code>-</code>, then re-join with <code>-</code> as the separator, but simply re-order as you need to:</p>
<pre><code>&gt;&gt;&gt; s = '4002-10-21'
&gt;&gt;&gt; d = s.split('-')
&gt;&gt;&gt; new_s = "-".join((d[0], d[2], d[1]))
'4002-21-10'
</code></pre>
<p>Or, without <code>join</code>, after you split, you can simply do: </p>
<pre><code>new_s = "{}-{}-{}".format(d[0], d[2], d[1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>mys='4002-10-21'
m = mys.split("-")
new_mys = m[0]+"-"+'-'.join(m[1:][::-1])
</code></pre>
<p>Output:</p>
<pre><code>'4002-21-10'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>L='4002-10-21'
L=L.split("-")
L[i:3] = L[2:0:-1]
"-".join(L)
</code></pre>
<p>You could use slices.</p>
</div>
<span class="comment-copy">So what's the problem with your approach?</span>
<span class="comment-copy">are you trying to change dates from <code>yyyy-mm-dd</code> to <code>yyyy-dd-mm</code>?</span>
<span class="comment-copy">@VanPeer Yes. I am trying to change date but it is part of pandas string object. So looking for string function.</span>
<span class="comment-copy">This question would've received a more appropriate answer had you given it the pandas tag. None of these answers are exactly fit for adaptation into  pandas code.</span>
<span class="comment-copy">@shantanuo, I just discovered you wanted this to work in <code>pandas</code>. Please see my updated answer below, hope it helps you.</span>
