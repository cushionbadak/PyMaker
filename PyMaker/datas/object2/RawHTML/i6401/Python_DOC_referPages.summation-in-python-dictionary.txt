<div class="post-text" itemprop="text">
<p>How to create a dictionary in python by using for loop</p>
<pre><code>CPO     1
CL      1
SL      1
EL      1
CPO     1
SL      1
CPO     1
</code></pre>
<p><strong>So the expected result should be as follow
{'CPO':3,'CL':1,'SL':2,'EL':1}</strong></p>
<p>I tried this:</p>
<pre><code>avail = defaultdict(list)
    cpo = cl = sl= el = 0
    for i in hr_line_id:
        if i.leave_code == 'CPO':
            cpo = cpo + i.no_of_days
            avail['cpo'].append(cpo)
        elif i.leave_code == 'CL':
            cl = cl + i.no_of_days
            avail['cl'].append(cl)
        elif i.leave_code == 'SL':
            sl = sl + i.no_of_days
            avail['sl'].append(sl)
    print avail
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd second the use of <code>collections.Counter</code> in the comments, but to adjust your current code, something like this should work:</p>
<pre><code>avail = defaultdict(lambda: 0)
for i in hr_line_id:
    if i.leave_code == 'CPO':
        avail['cpo'] += i.no_of_days
    elif i.leave_code == 'CL':
        avail['cl'] += i.no_of_days
    elif i.leave_code == 'SL':
        avail['sl'] += i.no_of_days
print avail
</code></pre>
<p>Per the comments, the <code>if</code> chain here is adding a lot of noise. Assuming the target key isn't a function of the input (like <code>.lower()</code>) and/or you only want to allow a certain set of keys, something like this would probably be preferred:</p>
<pre><code>avail = defaultdict(lambda: 0)
keyMapping = {
  'CPO': 'cpo',
  'CL' : 'cl',
  'SL' : 'sl'
}
for i in hr_line_id:
  if i.leave_code in keyMapping:
    avail[keyMapping[i.leave_code]] += i.no_of_days
  else:
    pass # handle unexpected key
print avail
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned by @JeanFrancoisFabre, this is the perfect example for <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>from collections import Counter

text = """CPO     1
CL      1
SL      1
EL      1
CPO     1
SL      1
CPO     1"""

count = Counter()

for line in text.split("\n"):
    k,v = line.split()
    count[k] += int(v)

print(count)
Counter({'CPO': 3, 'SL': 2, 'CL': 1, 'EL': 1})
</code></pre>
<p>If you want lowercase keys, you could use <code>count[k.lower()] += int(v)</code>:</p>
<pre><code>Counter({'cpo': 3, 'sl': 2, 'cl': 1, 'el': 1})
</code></pre>
<p>If the quantity is always <code>1</code>, you could simply write a one-liner:</p>
<pre><code>Counter(line.split()[0] for line in text.split("\n"))
# Counter({'CPO': 3, 'SL': 2, 'CL': 1, 'EL': 1})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here is another way to do it using loop:</p>
<pre><code>text = """CPO     1
CL      1
SL      1
EL      1
CPO     1
SL      1
CPO     1"""

text_split = text.split() # split the text [CPO, 1, CL, 1 and so on]
dict_k = text_split[0::2] # values at odd index
dict_v = text_split[1::2] # values at even index

dict_t = {}

for k, v in zip(dict_k, dict_v):
    dict_t[k] = dict_t.get(k, 0) + int(v)

print(dict_t)

# output:{'SL': 2, 'CPO': 3, 'EL': 1, 'CL': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this slightly shorter version with Counter?</p>
<pre><code>from collections import Counter

counts = Counter((i.leave_code.lower(), i.no_of_days) for i in hr_line_id)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Except counter you can simply loop.</p>
<pre><code>avail = {}
for i in hr_line_id:
    if i.leave_code in avail:
        avail[i.leave_code] += i.no_of_days
    else
        avail[i.leave_code] = i.no_of_days
</code></pre>
</div>
<span class="comment-copy">perfect job for <code>collections.Counter</code></span>
<span class="comment-copy">Thanks, Best Fit</span>
<span class="comment-copy">You could write <code>defaultdict(int)</code>, and replace all those <code>if</code>s with <code>avail[i.leave_code.lower()] += i.no_of_days</code></span>
<span class="comment-copy">@EricDuminil Agreed on the key mappings; I just didn't want to assume the relationship was more than coincidence for this subset of keys. At a minimum I would encapsulate the mapping somewhere (dictionary or function). Regarding the <code>int</code> versus <code>lambda</code>, personally I find the <code>lambda</code> clearer (more explicit) and easier to maintain (if I want to change the default to something that doesn't happen to have a convenient constructor).</span>
<span class="comment-copy">in that case create a dict to migrate old =&gt; new keys, avoid those ifs</span>
<span class="comment-copy">@ryachza: Fair enough. Thanks for the answer.</span>
<span class="comment-copy">make it <code>count = Counter(line.split() for line in text.split("\n"))</code> in one line</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre: Something's missing... Did you mean <code>line.split()[0]</code>?</span>
<span class="comment-copy">yes, I didn't test that.</span>
