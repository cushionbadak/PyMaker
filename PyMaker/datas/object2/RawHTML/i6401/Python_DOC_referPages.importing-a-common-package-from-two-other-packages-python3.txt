<div class="post-text" itemprop="text">
<p>I am new to Python packages, and I am struggling to get something working.
I have 3 packages : <code>engine</code>, <code>ui</code> and <code>db</code>. I'd like <code>db</code> to be used from the other two packages. What is the correct way to do so?</p>
<p>I'd like not to install the <code>db</code> package, since I am currently developing the 3 packages at the same time.</p>
<p>Thanks!</p>
<hr/>
<p>For the moment, I am trying to do so with imports of sibling packages, but it sucks so much that I'm not sure this is the correct way to do so.
This question is closely related to tons of questions such as <a href="https://stackoverflow.com/questions/16981921/relative-imports-in-python-3">Relative imports in Python 3</a> or <a href="https://stackoverflow.com/questions/35166821/valueerror-attempted-relative-import-beyond-top-level-package">ValueError: attempted relative import beyond top-level package</a>, but none of them has a valid, working answer for me :-(</p>
<p>Here's what I have so far:</p>
<pre><code>src/
  __init__.py     # empty file (is it useful?)
  db/
    __init__.py   # empty file
    constants.py
  ui/
    __init__.py   # empty file
    index.py
  engine/
    ...some stuff...
</code></pre>
<p>Here is index.py:</p>
<pre><code>from .. import db
print(db.constants.stuff)
</code></pre>
<p>However, running <code>cd ui &amp;&amp; python3 index.py</code> or <code>python3 -m index.py</code> fail with <code>SystemError: Parent module '' not loaded, cannot perform relative import</code></p>
<p>When I tweak this project, I sometimes get yet other errors, such as <code>ValueError: Attempted relative import in non-package</code></p>
<p>From what I read on <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/modules.html</a>, this should work, shouldn't it?</p>
<p>What am I doing wrong? What should I do to (do such a simple thing as) use a common package from two other packages?</p>
</div>
<div class="post-text" itemprop="text">
<p>__init__.py is useful, even though it's empty. It tells python that a folder is a python package.</p>
<p>I think what you need is to modify the system path. For example, say you want to import constants.py into index.py, index.py would look like this:</p>
<pre><code>import sys
sys.path.append("..")
from db import constants
</code></pre>
</div>
<span class="comment-copy">Can you share the entire project structure using something like <code>tree</code>? Because the current info only shows one actual file per package. Perhaps you are confusing packages and modules?</span>
<span class="comment-copy">This is the actual, current structure (<code>engine</code> is currently empty but will eventually need stuff from <code>db</code>). So yes, I have currently one module per package. But packages will soon grow</span>
<span class="comment-copy">This works, thank a lot! However, how dirty is this workaround? I thought I read that this is terribly dirty so I did not want to try this (but heck, this works, this is all I want after fiddling with these imports for hours)</span>
<span class="comment-copy">Also, I know empty <code>__init__.py</code> are fine, but I was wondering how useful was the top-level one. It works without it, but maybe defining a top-level package is a good practise?</span>
<span class="comment-copy">All it does is append the folder above the current one the script is in to your path, so that you can import sibling modules. I'm not sure whether it counts as dirty or not, that's kind of up to interpretation. That said, it might be a good idea to change your project structure to avoid sibling imports. Could you have a source directory which contains all your classes and functions, and then have index.py one level up which imports everything and runs some main function?</span>
<span class="comment-copy">As far as the top level __init__.py goes, if you ever need to import this structure into something else as a package, you'll need it. Is the top level meant to be a python package, or a project containing other packages?</span>
<span class="comment-copy">It is only meant to be a project. I'm pretty sure I'll never use it as a package. So I guess I could safely drop this file then. Thanks!</span>
