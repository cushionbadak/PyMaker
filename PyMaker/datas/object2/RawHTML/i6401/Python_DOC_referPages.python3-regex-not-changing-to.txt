<div class="post-text" itemprop="text">
<p>i have a json file filled with user comments (from web scraping) which I've pulled into python with pandas</p>
<pre><code>import pandas as pd

data = pd.DataFrame(pd.read_json(filename, orient=columnName,encoding="utf-8"),columns=columnName)
data['full_text'] = data['full_text'].replace('^@ABC(\\u2019s)*[ ,\n]*', '', regex=True)
data['full_text'] = data['full_text'].replace('(\\u2019)', "'", regex=True)
data.to_json('new_abc_short.json',orient='records')
</code></pre>
<p>The messages don't completely match the respective messages online. (emojis shown as \u0234 or something, apostrophes as \u2019, forward slash in links, and quote marks have back slash.</p>
<p>i want to clean them up so i learnt some regex, so i can pull into python, clean them up and then resave them back to json in a different name (for now) (<a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">https://docs.python.org/3/howto/regex.html</a>)</p>
<p>second line helps to remove the twitter handle (if it exists in only in the beginning), then removes 's if it was used (e.g. @ABC's ). If there was no twitter handle at the beginning (maybe used in the middle of the message) then that is kept. then it removes any spaces and commas that were left behind (again only at the beginning of the string)
e.g. "@ABC, hi there" becomes "hi there". "hi there @ABC" stays the same. "@ABC's twitter is big" would become "twitter is big"</p>
<p>third line helps replace every apostrophe that could not be shown (e.g. don\u2019t changes back to don't)</p>
<p>i have thousands of records (not all of them have issues with apostrophes, quotes, links etc), and based on the very small examples i've looked at, they seem to work</p>
<p>but my third one doesn't work:</p>
<pre><code>data['full_text'] = data['full_text'].replace('\\"', '"', regex=True) 
</code></pre>
<p>Example message in the json: "full_text":"@ABC How can you \"accidentally close\" my account"</p>
<p>i want to remove the \ next to the double quotes so it looks like the real message (i assume it is a escape character which the user obviously didn't type)</p>
<p>but no matter what i do, i can't remove it</p>
<p>from my regex learning, " is't a metacharacter. so backslash shouldn't even be there. But anyway, I've tried:</p>
<pre><code>\\" (which i think should be the obvious one, i have \", no special quirk in " but there is in \ so i need another back slash to escape that)
\\\\" (some forums posts online mention needing 4 slashes
\\\" ( i think someone mention in the forum posts that they got it workin with 3) 
\\\(\")  (i know that brackets provide groupings so i tried different combinations)
(\\\\")
</code></pre>
<p>all of the above expression i encased in single quotes, and they didn't work. I thought maybe the double quote was the problem since i only had one, so i replaced the single quotes with single quotes x3</p>
<pre><code>'''\\"'''
</code></pre>
<p>but none of the above worked for triple single quotes either</p>
<p>I keep rechecking the newly saved json and i keep seeing:</p>
<p>"full_text":"How can you \"accidentally close\" my account"
(i.e. removing @ABC with space worked, but not the back slash bit)</p>
<p>originally, i tried looking into converting these unicode issues i.e. using encoding="utf-8") although my experience in this is limited and it kept failing, so regex is my best option</p>
</div>
<div class="post-text" itemprop="text">
<p>Ow, I missed the pandas hint, so pandas replace <em>does</em> use regexes. But, to be clear, <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer">str.replace</a> doesn't work with regexes. <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">re.sub</a> does.</p>
<p>Now</p>
<ul>
<li>to match a single backslash, your regex is: <code>"\\"</code></li>
<li>string to describe that regex: <code>"\\\\"</code></li>
<li>when using a raw string, a double backslash is enough: <code>r'\\'</code></li>
</ul>
<p>If your string <em>really</em> contains a <code>\</code> preceding a <code>"</code>, a regex that would do is:</p>
<pre><code>\\(?=\")
</code></pre>
<p>which does a lookahead for your <code>"</code> (Look at <a href="https://regex101.com/r/yHFSev/2" rel="nofollow noreferrer">regex101</a>). </p>
<p>You would have to use something like:</p>
<pre><code>re.sub(r'\\(?=\")',"",s,0)
</code></pre>
<p>or a pandas equivalent using that regex.</p>
</div>
<span class="comment-copy">Doing this is almost certainly the wrong approach. Better would be finding what does the extra level of escaping, and using the same tool to un-escape the strings.</span>
<span class="comment-copy">@DanielH if by tool you mean what provided the data that was then saved into json, then that would be through scraping twitter? So I guess i can't really do anything from Twitter side?</span>
<span class="comment-copy">Wait... what do you get when you say <code>print(data['full_text'])</code>?</span>
<span class="comment-copy">The original json I use (before i load it into python), if i were to open it in notepad++, and find that tweet, I would see the backspace before the quote mark (i checked a few different tweets, and they all suffer from the same issue). I'm not quite sure I understand the \(?=\"), I replaced my expression with it (enclosed in single quotes) although the compilor is complaining about unbalanced parenthesis at position 5? (a bit stupid, but if i matters, I added in the preceding 'r' too. If fixed the error, but when i checked the new json, the backslash was still there :(</span>
<span class="comment-copy">if i understand that expression right \(?=\"), from my link, your'e matching (based on the (?=...) for the first and only instance of \". although,  I'm not sure how the two \\ does anything other than remove the quirk for the second \, causing the expression to search ofr \\". I also noticed that the number of back slashes on the outside seems to control that parenthesis error</span>
<span class="comment-copy">i even tried this with re.sub as an anonymous function but it didnt work :(  data['full_text'] = data['full_text'].apply(lambda x: re.sub(r'\(?=\")','"',x))</span>
<span class="comment-copy">i ran this and it looks like the issue isnt the regex !!!! print(data['full_text'].loc[data['id_str'] == 791046066464358200])</span>
<span class="comment-copy">the problem seems to come from my last line data.to_json('new_abc_short.json',orient='records')..... i remove the back slash and to_json is reintroducing it. Although still not sure how this could be fixed unless I'm looking for a specific flag</span>
