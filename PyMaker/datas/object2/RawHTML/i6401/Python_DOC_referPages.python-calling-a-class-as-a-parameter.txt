<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2612610/how-to-access-object-attribute-given-string-corresponding-to-name-of-that-attrib">How to access object attribute given string corresponding to name of that attribute</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I'm quite new in Python, but googling around did not match any answer for it .</p>
<p>I created a module, containing 10 GUI buttons classes. To use a button I write in code <code>ButtonLib.TypeA(**kwargs)</code>, <code>ButtonLib.TypeB(**kwargs)</code> and so on.
<code>kwargs</code> is same for all buttons.</p>
<p>Buttons ( amount and type ) are selected by user (stored in <code>button_type_vector</code>) and not known in advance.</p>
<p>I wish to know if there is a way writing code more efficiently rather than:</p>
<pre><code>for x in button_type_vector:
    if x == 'TypeA':
        ButtonLib.TypeA(**kwargs)
    elif x== 'TypeB' :
        ButtonLib.TypeB(**kwargs)
</code></pre>
<p>and so on.</p>
<p>by efficiently I mean something like:</p>
<pre><code>for x in button_type_vector:
    ButtonLib.x(**kwargs)
</code></pre>
<p>thnks</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer"><code>getattr</code></a> built-in function to access attributes of an object using strings:</p>
<blockquote>
<p>Return the value of the named attribute of object. name must be a string. If the string is the name of one of the object’s attributes, the result is the value of that attribute. For example, <code>getattr(x, 'foobar')</code> is equivalent to <code>x.foobar</code>. If the named attribute does not exist, default is returned if provided, otherwise <a href="https://docs.python.org/3/library/exceptions.html#AttributeError" rel="nofollow noreferrer">AttributeError</a> is raised.</p>
</blockquote>
<pre><code>for x in button_type_vector:
    getattr(ButtonLib, x)(**kwargs)
</code></pre>
<p>As mentioned by @MadPyhisist, modules are not some kind of magical object, and thus can be used with like any normal object could be <code>getattr</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could define a dictionary (preferably inside your module):</p>
<pre><code>buttons = {
    "TypeA": TypeA,
    "TypeB": TypeB,
    …
}
</code></pre>
<p>and then call the entry:</p>
<pre><code>ButtonLib.buttons[x](**kwargs)
</code></pre>
<p>If your button classes have a function returning their name, you could also define the dictionary like this:</p>
<pre><code>buttons = {
    button_type.name: button_type
    for button_type in [TypeA, TypeB, …]
}
</code></pre>
<p>More advanced: Python stores the name of a class in <code>.__name__</code>.
Even more advanced: You could get the elements of the module with <code>getattr(ButtonLib, name)</code>. But this might impair readability.</p>
</div>
<span class="comment-copy">I don't quite understand your code. Iterating over <code>range</code> produces <i>integers</i>, but you're comparing <code>x</code> to <i>strings</i>. Shouldn't you be iterating directly over <code>button_type_vector</code>?</span>
<span class="comment-copy">@ChristianDean -sorry. fixing it</span>
<span class="comment-copy">It is not Python, but rather OOP field. You should define BaseButton class with abstract .TypeX method, and use this class as parent for every Button Type, assigning specific function to .TypeX in the constructor. Then you just call YourButton.TypeX(**kwargs)</span>
<span class="comment-copy">@ChristianDean. Why did you delete your answer?</span>
<span class="comment-copy">@MadPhysicist Eh well, after I had finished posting my answer, I realized that this was probably a pretty common duplicate question. So I figured I should vote to close instead of answering it.</span>
<span class="comment-copy">thank you - what was missing was the <code>(**kwargs)</code></span>
<span class="comment-copy">Thanks for you answers!! Can you please explain more about advanced way?</span>
<span class="comment-copy">My final code included both your answer and deans.  Thank you !!!!</span>
