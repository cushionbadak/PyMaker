<div class="post-text" itemprop="text">
<p>Following Jean's answer to my question on: <a href="https://stackoverflow.com/questions/46695440/python-converting-strings-in-a-list-to-numbers">Python converting strings in a list to numbers</a> , I get a <code>StopIteration</code> exception when running the below minimal code.</p>
<p><code>primes</code> and <code>z2</code> are empty.</p>
<p>From googling I think I may need a while loop around the line in traceback but I'm not sure how to remedy?</p>
<p>Traceback:</p>
<pre><code>File "factorise_v32.py", line 118, in factorise
    primes=[next(z2) for _ in xrange(b)]  
StopIteration  
</code></pre>
<p>Sample data in CSV file:</p>
<pre><code>("2","3","5","7","11")
</code></pre>
<p>Minimal Code:</p>
<pre><code>import csv

def factorise(N)
    ....
    z1=(int(x) for row in csv.reader(csvfile) for x in row)
    ....
    b=4 #b can be any positive integer
    z2=(int(x) for row in csv.reader(csvfile) for x in row)
    primes=[next(z2) for _ in xrange(b)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A list comprehension is not a generator or iterator itself. It will not stop when the expression side raises a <code>StopIteration</code> exception. The <em>iterable</em> that <code>for ... in &lt;iterable&gt;</code> loops over can use <code>StopIteration</code> to communicate to the <code>for</code> loop that iteration is done, but that doesn't extend to the rest of the construct.</p>
<p>If you need to get <em>at most</em> <code>b</code> number of elements from an iterator, use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice()</code></a>:</p>
<pre><code>primes = list(islice(z2, b))
</code></pre>
<p>It'll take up to <code>b</code> elements when iterated over, or less if there are not enough elements in <code>z2</code>.</p>
<p>An earlier revision of the post you linked to tried to <em>pad out</em> the result with <code>0</code> values in case there were fewer than <code>b</code> elements by giving <code>next()</code> a default value. I'd have used <a href="https://docs.python.org/3/library/itertools.html#itertools.repeat" rel="nofollow noreferrer"><code>itertools.repeat()</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain()</code></a> to achieve this:</p>
<pre><code>primes = list(islice(chain(z2, repeat(0)), b))
</code></pre>
<p>The <code>chain(z2, repeat(0))</code> part will endlessly add <code>0</code> values after <code>z2</code> is exhausted. <code>islice()</code> takes <code>b</code> elements from that sequence.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain, repeat, islice
&gt;&gt;&gt; z2 = iter([1, 2, 3])
&gt;&gt;&gt; list(islice(z2, 5))  # up to 5
[1, 2, 3]
&gt;&gt;&gt; z2 = iter([1, 2, 3])  # pad with zeros
&gt;&gt;&gt; list(islice(chain(z2, repeat(0)), 5))
[1, 2, 3, 0, 0]
</code></pre>
<p>Note that you <em>can't read from a CSV file twice in a row</em>, not without rewinding the file object first. Your code is using <code>csv.reader(csvfile)</code> in two locations, but the <code>csvfile</code> file object does not go back to the start. Add <code>csvfile.seek(0)</code> before trying to read from it again.</p>
</div>
<span class="comment-copy"><code>next()</code> raises the exception because <code>z2</code> is exhausted. There are no <code>b</code> elements in <code>z2</code>.</span>
<span class="comment-copy">@MartijnPieters Would the <code>StopIteration</code> not be handled in order to terminate the comprehension?</span>
<span class="comment-copy">Why not iterate <i>directly</i> over <code>z2</code>? Make it a list comprehension, or use <code>slice()</code> if you want to get a limited number of elements.</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre: at which point <code>islice()</code> is better tool.</span>
<span class="comment-copy">@martjiin can you give an answer for this using <code>slice()</code> or list comprehension?</span>
<span class="comment-copy">@Jean ssssh! His programming may break if he finds out he actually is! :p</span>
<span class="comment-copy">@unseen_rider: then <code>z2</code> was <i>already empty</i>.</span>
<span class="comment-copy">@unseen_rider: you can iterate over an iterator <b>just once</b>. You probably already iterated over it. If you fed it a file, then the file position needs to be at the start, if you read from it already the file position will be at the end and no more data will be read.</span>
<span class="comment-copy">@unseen_rider: You are using <code>csv.reader(csvfile)</code> twice; <code>csvfile</code> will be at the end of the file if you have read from it enough through <code>z1</code>. So when you use it a second time so it'll produce <i>no data</i>, or very little data if you did not read all of it (the <code>csv.reader()</code> will <i>buffer</i> data from the underlying file so it'll read more than you may actually use).</span>
<span class="comment-copy">@unseen_rider: ah, your edit did show you used <code>list(z1)</code>, so <i>all</i> data was read from <code>csvfile</code>. So no, you can't then use <code>csvfile</code> again without going back to the start. Why not reuse the data from <code>z1</code> however? You have a list there with all the values from the CSV file, why read it all again?</span>
