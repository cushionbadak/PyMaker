<div class="post-text" itemprop="text">
<p>I have two list of dictionaries as shown in example below</p>
<pre><code>list1=[
        {
            "pdpData":{
                "a":1,
                "b":2
            }
        }
    ]

list2=[
    {
        "pdpData":{
            "a":1,
            "c":3
        }
    },
    {
        "pdpData":{
            "a":2,
            "b":3
        }
    }
]
</code></pre>
<p>I want the result as shown in the format below</p>
<pre><code>list3=[
{
    "pdpData":{
        "a":1,
        "b":2,
        "c":3
    }
},
{
    "pdpData":{
        "a":2,
        "b":3
    }
}
]
</code></pre>
<p>The size of list1 and list2 could be in 10000's. List3 would be the union of list1 and list2. What could be the best pythonic solutions to solve this problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>You didn't write any code, so I won't write a complete solution. You'll need <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>zip_longest</code></a> and <a href="https://stackoverflow.com/a/26853961/6419007">dict merging</a>.</p>
<pre><code>from itertools import zip_longest

list1=[
        {
            "pdpData":{
                "a":1,
                "b":2
            }
        }
    ]

list2=[
    {
        "pdpData":{
            "a":1,
            "c":3
        }
    },
    {
        "pdpData":{
            "a":2,
            "b":3
        }
    }
]


for d1, d2 in zip_longest(list1, list2):
    dd1 = d1.get("pdpData", {}) if d1 else {}
    dd2 = d2.get("pdpData", {}) if d2 else {}
    print({**dd1, **dd2})
</code></pre>
<p>It outputs :</p>
<pre><code>{'a': 1, 'b': 2, 'c': 3}
{'a': 2, 'b': 3}
</code></pre>
<p>Now that you have merged inner-dicts, all you need to do is pack them into another <code>dict</code> with <code>"pdpData"</code> as key, and pack those dicts into a list.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import defaultdict

d = defaultdict(dict)
for l in (l1, l2):
    for elem in l:
        d[elem['pdpData']['a']].update(elem['pdpData'])
l3 = d.values()

print(l3)
</code></pre>
<p>Output</p>
<pre><code>dict_values([{'a': 1, 'b': 2, 'c': 3}, {'a': 2, 'b': 3}])
</code></pre>
</div>
<span class="comment-copy">try this <a href="https://stackoverflow.com/questions/19561707/python-merge-two-lists-of-dictionaries" title="python merge two lists of dictionaries">stackoverflow.com/questions/19561707/…</a></span>
<span class="comment-copy">How do you "union" the lists when they have "10000s" of elements? Do you want to union each pairs of dicts, i.e. the product, resulting in 10,000²=100,000,000 dicts in list 3? Or do you always merge all the dicts in list1 into all the dicts in list2, resulting in only 10,000 dicts in list 3? You should provide more explanation and/or examples.</span>
<span class="comment-copy">You may want to re-read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> and <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>.</span>
<span class="comment-copy">You lose the order, though.</span>
<span class="comment-copy">OP wants a list, which is ordered. You use a defaultdict, which is unordered. You cannot guarantee that <code>l3</code> will have the correct order. Also, you use the value <code>'a'</code> as index, which doesn't seem to be desired behaviour.</span>
