<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/588004/is-floating-point-math-broken">Is floating point math broken?</a>
<span class="question-originals-answer-count">
                    28 answers
                </span>
</li>
</ul>
</div>
<p>I have the code already figured out and have found a way to get around the problem that for <code>k &gt; 6</code> the largest denominator is very large. But when my code adds up for example</p>
<pre><code>1/float(2) + 1/float(3) + 1/float(7) + 1/float(42)
</code></pre>
<p><code>python</code> says that it is not equal to <code>1</code>, but it should be. Why does <code>python</code> recognize other sums as being equal to <code>1</code> but not this one?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is because you are asking for floating point arithmetic, and when the roundoff errors add up, you'll get wrong answers.</p>
<p>Use the <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow noreferrer">https://docs.python.org/3/library/fractions.html</a> module to get real fractions and roundoff issues should disappear for you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to be <strong>extremely careful</strong> when <strong>hard-comparing</strong> any <strong>decimal values</strong>. Computer <strong>don't provide unlimited precision</strong>, thus it could be that your argument adds up to something like <code>0.99999998</code> instead of <code>1</code>. Then the comparison might <strong>fail</strong>.</p>
<p>Thus you should always compare corresponding to an allowed difference of <code>delta</code>, like <code>1 - 0.99999998 &lt; delta</code> where <code>delta = 0.0001</code> or something like that.</p>
</div>
<span class="comment-copy">Additional info when using fp-math: equality-checks usually follow the approach of <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.isclose.html" rel="nofollow noreferrer">numpy</a>.</span>
<span class="comment-copy">Egyptian fractions are fun. The simple way to work with them in Python is to use the fractions module.</span>
<span class="comment-copy">FWIW, here are some lists I've found, which you may find useful in testing your code. These are lists of the given length of minimum highest denominator (with no repeated fractions): 6 [2, 3, 15, 18, 35, 63], 7 [2, 3, 15, 28, 35, 44, 77], 8 [2, 4, 6, 20, 58, 130, 174, 377]. I'm pretty sure 6 &amp; 7 are correct, but I wouldn't be surprised if there's a better solution to 8.</span>
