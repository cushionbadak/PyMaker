<div class="post-text" itemprop="text">
<p>I have seen a variety of answers on here, but none that quite answered my question. I am trying to convert the following list</p>
<pre><code>list = ['A', '2', '8', 'B', '3']
</code></pre>
<p>to the following:</p>
<pre><code>list = ['A', 2, 8, 'B', 3]
</code></pre>
<p>I want to keep the strings as strings but convert the strings to ints where possible.</p>
<p>I know I could do something like:</p>
<pre><code>list = [int(i) for i in list]
</code></pre>
<p>if it were just numbers, but I am unsure how to do it when it is mixed.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's always <code>try</code>/<code>except</code>:</p>
<pre><code>oldlist = ['A', '2', '8', 'B', '3']
newlist = []
for x in oldlist:
    try:
        newlist.append(int(x))
    except ValueError:
        newlist.append(x)

newlist
# ['A', 2, 8, 'B', 3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>str.isdigit()</code>:</p>
<pre><code>&gt;&gt;&gt; l = ['A', '2', '8', 'B', '3']
&gt;&gt;&gt; [int(x) if x.isdigit() else x for x in l]
['A', 2, 8, 'B', 3]
</code></pre>
<p>Taking negative numbers into account:</p>
<pre><code>&gt;&gt;&gt; l = ['A', '2', '8', 'B', '-3']
&gt;&gt;&gt; [int(x) if x.isdigit() or x.startswith('-') and x[1:].isdigit() else x for x in l]
&gt;&gt;&gt; ['A', 2, 8, 'B', -3]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would just extract the conversion into a function.</p>
<pre><code>def int_if_possible(value):
    try:
        return int(value)
    except (ValueError, TypeError):
        return value

int_list = [int_if_possible(i) for i in int_list]
</code></pre>
<p>Also I renamed your list to int_list, so that we can still use the list constructor if required.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use try , except block</p>
<pre><code>lst1 = ['A', '2', '8', 'B', '3']
lst2 = []
for i in lst1:
    try:
        lst2.append(int(i))
    except ValueError:
        lst2.append(i)

print lst2
</code></pre>
</div>
<span class="comment-copy">Best not to shadow reserved names like <code>list</code>.</span>
<span class="comment-copy">This does not work for negative numbers.</span>
<span class="comment-copy">@wds's exception is why you generally prefer <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> patterns over <a href="https://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow noreferrer">LBYL</a>; try to do what you want to do and handle the exception if it fails. Don't try to write a parser to pre-check your conditions (you'll miss an edge case every time), just do it, and handle failure appropriately. <code>int()</code> knows how to parse, don't reinvent the wheel. FYI, <code>int</code> also allows arbitrary leading and trailing whitespace; <code>int('   -2   ')</code> is totally legal, but would fail an <code>isdigit</code> test.</span>
<span class="comment-copy">To generalize, you may want to do <code>except (ValueError, TypeError):</code>, so you don't barf on types that can never be <code>int</code> (e.g. <code>list</code>, <code>tuple</code>, etc.). If the <code>list</code> is all <code>str</code>, <code>ValueError</code> is fine, but if it's mixed type, and you want to only convert <code>int</code>-like <code>str</code> while leaving other stuff untouched, handling <code>TypeError</code> gets you that.</span>
<span class="comment-copy">Sounds fair. The question only mentions ints or strings, so it'll be up to the implementer as to which is appropriate. I've updated my answer though because it makes the function more flexible in this case.</span>
