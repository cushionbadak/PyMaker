<div class="post-text" itemprop="text">
<p>In this simple example, I would like the label to be displayed as "1   3":</p>
<pre><code>import tkinter

window = tkinter.Tk()

A = [1," ", 3]

label = tkinter.Label(window, text = A[0:])
label.pack()

window.mainloop()
</code></pre>
<p>However, python displays "1 { } 3" instead.</p>
<p>Where is the problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>As jonathan and Ron Norris already said, you need to pass a string to the <code>text</code> argument of the <code>Label</code> constructor.</p>
<p>I would suggest to transform your heterogeneous list to a string thusly:</p>
<pre><code>A = [1," ", 3]
labeltext = ''.join(map(str, A))
label = tkinter.Label(window, text = labeltext)
</code></pre>
<ul>
<li>Documentation link for <code>map</code>: <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">map documentation for python 3</a></li>
<li>Documentation for <code>str</code>: <a href="https://docs.python.org/3/library/functions.html#func-str" rel="nofollow noreferrer">str documentation for python 3</a></li>
<li>Documentation for the <code>join</code> method of <code>string</code>: <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">string join method, python 3</a></li>
</ul>
<p><strong>Edit:</strong> Since you now ask for a way to do this in many code locations, with minimal code changes, I would suggest this wrapper around <code>tkinter.Label</code>:</p>
<pre><code>def createlabel(*args, **kwargs):
    if 'text' in kwargs and isinstance(kwargs['text'], list):
        kwargs['text'] = ''.join(map(str, kwargs['text']))
    return tkinter.Label(*args, **kwargs)
</code></pre>
<p>This function will pass all of its arguments unchanged to <code>tkinter.Label</code>, but taking care to transform a <code>text</code> keyword argument to a string, if it is a list. </p>
<p>When you have defined this, use a "Find &amp; Replace" function in your editor to replace calls to <code>tkinter.Label</code> with <code>createlabel</code>.</p>
<p>Your original could would be transformed like this, for example:</p>
<pre><code>import tkinter

def createlabel(*args, **kwargs):
    if 'text' in kwargs and isinstance(kwargs['text'], list):
        kwargs['text'] = ''.join(map(str, kwargs['text']))
    return tkinter.Label(*args, **kwargs)

window = tkinter.Tk()

A = [1," ", 3]

label = createlabel(window, text = A[0:])
label.pack()

window.mainloop()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>A[0:]</code> is a heterogeneous list, tkinter.Label's documentation suggests that its <code>text</code> parameter should receive a string (Which the word "text" also quite strongly suggests)
<a href="https://docs.python.org/3/library/tkinter.ttk.html#label-options" rel="nofollow noreferrer">https://docs.python.org/3/library/tkinter.ttk.html#label-options</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If you <em>want</em> "1 3", try:</p>
<pre><code>A = [1," ", 3]
s = ''
for c in A:
    s += str(c)

label = tkinter.Label(window, text = s)
</code></pre>
</div>
<span class="comment-copy">Why didn't you get "[1, ' ', 3]"?</span>
<span class="comment-copy">@LaurentLAPORTE: because underlying tkinter is a tcl interpreter, and tcl treats lists differently than python. The curly braces are a sign that what you're seeing is the tcl representation of a list converted to a string, where the conversion was done by tcl rather than python.</span>
<span class="comment-copy">As I have commented above, in the original program, I actually have 71 different lists and labels... is there an alternative in which I would not need to this 71 times?</span>
<span class="comment-copy">@JindraKocman I edited by answer to provide a way to do this easily in a lot of code locations (by using a function and Find&amp;Replace)</span>
<span class="comment-copy">That works, however, in my original program I have 71 list which are displayed in 71 labels and writing this 71 times would be a pain in the ... is there an alternative?</span>
<span class="comment-copy">You make repetitive operations into functions. So when you create the labels, all of them go through the same logic.</span>
