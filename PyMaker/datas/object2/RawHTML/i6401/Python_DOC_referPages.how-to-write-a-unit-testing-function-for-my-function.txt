<div class="post-text" itemprop="text">
<p>This is a function i created:</p>
<pre><code>def hab(h, a, b= None):
    if b != None:
        result = ("{} , {} , {}".format(h, b, a))
    else:
        result = ("{} , {}".format(h, a))
    return result
</code></pre>
<p>I'm trying to write a unit testing for my function, the unit test should assert the function correctness when two or three parameters are provided.</p>
<p>This is my frame:</p>
<pre><code>class hab_Test_Class(unittest.TestCase):
   def test_pass2(self):

   def test_pass3(self):

# i'll use code below to run the unit test
t = hab_Test_Class()
suite = unittest.TestLoader().loadTestsFromModule(t)
unittest.TextTestRunner().run(suite)
</code></pre>
<p>I really have little sense of what the unit testing is doing, but not quite get it. </p>
</div>
<div class="post-text" itemprop="text">
<p>Suppose you have all your codes in <code>main.py</code> </p>
<pre><code>def format_person_info(h, a, b= None):
    if b != None:
        a = ("{} , {} , {}".format(h, b, a))
    else:
        a = ("{} , {}".format(h, a))
    return a
</code></pre>
<p>You can run unit test for this method like below in <code>tests.py</code>:</p>
<pre><code>import main
import unittest
class hab_Test_Class(unittest.TestCase):
   def test_pass2(self):
       return_value = main.format_person_info("shovon","ar")
       self.assertIsInstance(return_value, str, "The return type is not string")
       self.assertEqual(return_value, "shovon , ar", "The return value does not match for 2 parameters")

   def test_pass3(self):
       return_value = main.format_person_info("shovon","ar",18)
       self.assertIsInstance(return_value, str, "The return type is not string")
       self.assertEqual(return_value, "shovon , 18 , ar",  "The return value does not match for 3 parameters")

# i will use code below to run the unit test
t = hab_Test_Class()
suite = unittest.TestLoader().loadTestsFromModule(t)
unittest.TextTestRunner().run(suite)
</code></pre>
<p>When you run the tests the output will be like below:</p>
<pre><code>..
----------------------------------------------------------------------
Ran 2 tests in 0.016s

OK
</code></pre>
<p>Now lets see what we have done. We checked that the return type is string as we expected using <code>assertIsInstance</code> and we checked the output for two and three parameters using <code>assertEqual</code>. You may play with this using a set of valid and invalid tests with <code>assertEqual</code>. The official documentation has a brief description about unittest in this official doc <a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">Unit testing framework</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Typically, you'd do sth along the lines of:</p>
<pre><code>class NameAgeJob_Test_Class(unittest.TestCase):
    def test_pass_string_input_no_b(self):
        result = format_person_info('foo', 'bar')
        self.assertEqual(result, 'foo , bar')
</code></pre>
<p>There is plenty of <a href="https://docs.python.org/2/library/unittest.html#basic-example" rel="nofollow noreferrer">documentation and examples</a> out there.</p>
</div>
<span class="comment-copy">Please fix your indentation. Follow this: <a href="https://stackoverflow.com/help/mcve">stackoverflow.com/help/mcve</a></span>
<span class="comment-copy">Your question is unclear. You know you need to test the function is correct with different parameters, so what is stopping you writing tests where you call it with those parameters and check the responses?</span>
