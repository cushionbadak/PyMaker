<div class="post-text" itemprop="text">
<p>I am trying to use lambda function to add up all the numbers. I am getting following error, </p>
<blockquote>
<p>Syntax error - "Generator expression must be parenthesized if not sole
  argument"</p>
</blockquote>
<pre><code>def solve(s):
    return reduce(lambda x, y: x + int(y) for y in s if y.isdigit(),s)

print solve('1o2i212')
</code></pre>
<p>It works if I use the following.</p>
<pre><code>def solve(s):
    return reduce(lambda x, y: x + y, [int(i) for i in s if i.isdigit()])

print solve('1o2i212')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Python 3 users should do a <code>from functools import reduce</code>. <code>reduce</code> has been moved out of builtin functions from Python 3.</p>
<pre><code>return reduce(lambda x, y: x + int(y),(y for y in s if y.isdigit()),0)
</code></pre>
<p><strong>output</strong></p>
<pre><code>8
</code></pre>
<p><strong>Explanation</strong></p>
<pre><code>lambda x, y: x + int(y),        #x is the aggregating sum
(y for y in s if y.isdigit()),  #reduced over all the digits in s
0                               #x=0 the starting sum value.
</code></pre>
<p>To understand reduce, check <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow noreferrer">here</a> it needs a starting seed of 0 to avoid conversion errors</p>
<p>If you do not give a starting value:-</p>
<pre><code>&gt;&gt;&gt; def solve(s):
...     return reduce(lambda x, y: x + int(y),(y for y in s if y.isdigit()))
... 
&gt;&gt;&gt; print(solve('1o2i212'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in solve
  File "&lt;stdin&gt;", line 2, in &lt;lambda&gt;
TypeError: must be str, not int
</code></pre>
<p>If you do not want to give a starting value for the aggregation do the below:-</p>
<pre><code>return reduce(lambda x, y: x + y,(int(y) for y in s if y.isdigit()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple solution using <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">List Comprehensions</a>. </p>
<pre><code>def solve(s):
    return sum([int(c) for c in s if c.isdigit()])
print(solve('1o2i212'))
</code></pre>
<p>Solution using <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">functools.reduce</a> (Python 3):</p>
<pre><code>import functools
def solve(s):
    return functools.reduce(lambda x, y: x + int(y),[y for y in s if y.isdigit()],0)
print(solve('1o2i212'))
</code></pre>
<p>N.B.: 0 is the initializer which is an optional parameter of <code>functools.reduce</code>.</p>
<blockquote>
<p>If the optional initializer is present, it is placed before the items
  of the sequence in the calculation, and serves as a default when the
  sequence is empty.</p>
</blockquote>
<p>Output:</p>
<pre><code>8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Note: Python 3 developers need to use:</p>
<pre><code>from functools import reduce
</code></pre>
<p>The signature is <code>reduce(function, iterable[, initializer])</code></p>
<p>So, you can decompose as follow:</p>
<pre><code>def solve(s):
    function = lambda x, y: x + int(y)
    iterable = (c for c in s if c.isdigit())
    initializer = 0
    return reduce(function, iterable, initializer)

print(solve('1o2i212'))
</code></pre>
<p>You get 8.</p>
<p>Here, <em>iterable</em> is a generator object. 
And notice that <em>initializer</em> is required because the default value is <code>None</code>. </p>
<p>Of cours you can put all things together with parenthesis. </p>
<pre><code>def solve(s):
    return reduce(lambda x, y: x + int(y), (c for c in s if c.isdigit()), 0)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have to understand some things before working with lambda :</p>
<p>How lambda syntax works ;</p>
<pre><code>lambda x,y:x+y   #this is lambda function 
</code></pre>
<p>Now we will pass the argument to this lambda , there are two ways to passing argument first one :</p>
<pre><code>arg=lambda x,y:x+y
print(arg(1,2))
</code></pre>
<p>Second method :</p>
<pre><code>print((lambda x,y:x+y)(1,2))
</code></pre>
<p>Now if we use reduce with lambda then the syntax is :</p>
<pre><code>print(reduce(lambda x,y:x+y,[1,2,3,4,5]))
</code></pre>
<p>So if you are passing a generator expression what should be your lambda syntax:</p>
<pre><code>print(reduce(lambda x,y:x+y,(generator expression)))
</code></pre>
<p>and what is your generator expression is:</p>
<pre><code>(y for y in s if y.isdigit())
</code></pre>
<p>let's put in lambda syntax:</p>
<pre><code>print(reduce(lambda x,y:x+y,(y for y in s if y.isdigit())))
</code></pre>
<p>ok now we don't need print because we are using function and returning the result so:</p>
<pre><code>def solve(s):
    return reduce(lambda x,y:x+y,(y for y in s if y.isdigit()))

print(solve('1o2i212'))
</code></pre>
<p>when you will run this program you will get :</p>
<pre><code>12212
</code></pre>
<p>Because we are adding strings and when you do str(<code>1</code>) + str(<code>2</code>) it is <code>12</code> in python not <code>3</code> so what we have to correct is convert the str to int there :</p>
<pre><code>def solve(s):
    return reduce(lambda x, y: x+y, (int(y) for y in s if y.isdigit()))

print solve('1o2i212')
</code></pre>
<p>Now the output is :</p>
<pre><code>8
</code></pre>
<p>So which mistake you were doing :</p>
<p>Your generator expression is wrong because you are mixing with generator expression output with lambda parameters :</p>
<pre><code>(int(y) for y in s if y.isdigit())  #this is correct
</code></pre>
<p>so change this :</p>
<pre><code>reduce(lambda x, y: x + int(y) for y in s if y.isdigit(),s)
</code></pre>
<p>to this :</p>
<pre><code>reduce(lambda x, y: x+y, (int(y) for y in s if y.isdigit()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think something like this should actually be enough for the problem.</p>
<pre><code>solve = lambda x: sum([int(i) for i in x if i.isdigit()])
solve('1o2i212') #8
</code></pre>
</div>
<span class="comment-copy">If you want to get <i>seriously</i> functional, you could do <code>sum(map(int, filter(str.isdigit, s)))</code>. ;) I realise that you're practicing use of <code>lambda</code>, but <code>sum(my_iterable)</code> is easier to read (and more compact) than <code>reduce(lambda x, y: x + y, my_iterable)</code>.</span>
<span class="comment-copy">Thanks a lot. That is all I need.</span>
<span class="comment-copy">The syntax of reduce takes and optional third parameter as initializer, which when provided is "placed before the items of the iterable in the calculation, and serves as a default when the iterable is empty" [from the doc]  &gt;&gt; reduce(function, iterable[, initializer])  In above, you can remove the initializer if it is like:  &gt;&gt; reduce(lambda x, y: x + y,(int(y) for y in a if y.isdigit()))</span>
<span class="comment-copy">@NidhinBoseJ. or my edit?</span>
<span class="comment-copy">Thanks, I wanted to use lambda to understand how it works.</span>
<span class="comment-copy">Perfect. Thanks a ton for your explanation.</span>
<span class="comment-copy">One minor correction - def solve(s):     return reduce(lambda x,y:x+y,(y for y in s if y.isdigit())) for the output to be  12212. Thought of adding it.</span>
<span class="comment-copy">@paddu yea corrected :)</span>
<span class="comment-copy">Agreed. Then I don't need lambda for the same, I could rather use what @arsho suggested.</span>
<span class="comment-copy">Right. It honestly doesn't matter too much what you use in the end, this is just the simplest implementation I could think of. Good luck!</span>
<span class="comment-copy">I am with you, My intention was to practice the use of lambda reducer function. Thanks anyways.</span>
<span class="comment-copy">I deleted my answer as it matches with this.</span>
