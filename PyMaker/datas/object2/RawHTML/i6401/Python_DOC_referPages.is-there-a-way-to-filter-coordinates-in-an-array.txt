<div class="post-text" itemprop="text">
<p>This is my array:</p>
<pre><code>array = {(0,0):[1], (0,1):[0], (0,2):[1], (0,3):[0], (0,4):[1], (0,5):[0],
(1,0):[1], (1,1):[0], (1,2):[1], (1,3):[0], (1,4):[1], (1,5):[0]}
</code></pre>
<p>Does anyone know of a method to filter where x coordinate is 0 into a separate array like this.</p>
<pre><code>filtered_array1 = {(0,0):[1], (0,1):[0], (0,2):[1], (0,3):[0], (0,4):[1], (0,5):[0]}
</code></pre>
<p>Similarly, is there a way to filter through the box linked to the coordinates such as when it is equal to 1; like this</p>
<pre><code>filtered_array2 = {(0,0):[1], (0,2):[1], (0,4):[1], (1,0):[1], (1,2):[1], (1,4):[1]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use two dict comprehension for both of these. (Side note: “the box linked to the coordinates” that is called a list)</p>
<pre><code>array = {(0,0):[1], (0,1):[0], (0,2):[1], (0,3):[0], (0,4):[1], (0,5):[0],
(1,0):[1], (1,1):[0], (1,2):[1], (1,3):[0], (1,4):[1], (1,5):[0]}

filtered_array1 = {k: v for k, v in array.items() if k[0] == 0}
filtered_array2 = {k: v for k, v in array.items() if v[0] == 1}

print(filtered_array1)
print(filtered_array2)
</code></pre>
<p>In addition, as commented by PM 2Ring, building only one filtered array could be done with a dict comprehension, but building multiple arrays would require iterating the original array multiple times, making it inefficient. You can use a traditional for loop instead.</p>
<pre><code>array = {(0,0):[1], (0,1):[0], (0,2):[1], (0,3):[0], (0,4):[1], (0,5):[0],
(1,0):[1], (1,1):[0], (1,2):[1], (1,3):[0], (1,4):[1], (1,5):[0]}

filtered_array1 = {}
filtered_array2 = {}

for k, v in array.items():
    if k[0] == 0:
        filtered_array1[k] = v
    elif k[0] == 1:
        filtered_array2[k] = v
</code></pre>
<p>As proven by <code>timeit</code>,  the former returned a timeit value of <code>0.003447920083999634</code>
While the latter only <code>0.002893589437007904</code>. Although it’s not much difference right now, but when you have 3, 4, or 10 filtered_arrays, and the array gets way bigger. The difference will be dramatic.</p>
<p>Try it here: <a href="https://ideone.com/rSvC0i" rel="nofollow noreferrer">https://ideone.com/rSvC0i</a></p>
</div>
<div class="post-text" itemprop="text">
<pre><code>array = {(0,0):[1], (0,1):[0], (0,2):[1], (0,3):[0], (0,4):[1], (0,5):[0],
(1,0):[1], (1,1):[0], (1,2):[1], (1,3):[0], (1,4):[1], (1,5):[0]}

dict1 = {(k1, k2): v for (k1, k2), v in array.items() if k1 == 0}
print(dict1)
# {(0, 1): [0], (0, 0): [1], (0, 5): [0], (0, 4): [1], (0, 3): [0], (0, 2): [1]}


dict2 = {(k1, k2): v for (k1, k2), v in array.items() if v[0] == 1}
print(dict2)
# {(1, 2): [1], (0, 0): [1], (0, 4): [1], (1, 0): [1], (0, 2): [1], (1, 4): [1]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://www.python.org/dev/peps/pep-0274/" rel="nofollow noreferrer">dictionary comprehensions</a>.</p>
<p>Also that's a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary</a>, not a <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="nofollow noreferrer">list</a> or (numpy) array.</p>
<pre><code>d = {(0, 0): [1], (0, 1): [0], (0, 2): [1], (0, 3): [0], (0, 4): [1], (0, 5): [0],
 (1, 0): [1], (1, 1): [0], (1, 2): [1], (1, 3): [0], (1, 4): [1], (1, 5): [0]}

result_1 = {k: v for k, v in d.items() if k[0] == 0}
desired_result_1 = {(0, 0): [1], (0, 1): [0], (0, 2): [1], (0, 3): [0], (0, 4): [1],
                (0, 5): [0]}
print(result_1 == desired_result_1)  # prints True

result_2 = {k: v for k, v in d.items() if v[0] == 1}
desired_result_2 = {(0, 0): [1], (0, 2): [1], (0, 4): [1], (1, 0): [1], (1, 2): [1],
                (1, 4): [1]}
print(result_2 == desired_result_2)  # prints True
</code></pre>
</div>
<span class="comment-copy">If your "boxes" (i.e., lists) always contain one element, why not replace them with the element itself?  I.e., <code>{(0,0):1, (0,1):0, ...}</code></span>
<span class="comment-copy">They do contain multiple elements. The example i wrote above was simplified for asking the question</span>
