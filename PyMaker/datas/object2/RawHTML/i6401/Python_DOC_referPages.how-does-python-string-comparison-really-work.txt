<div class="post-text" itemprop="text">
<p>So, in Python, strings have an inherent ordering;</p>
<pre><code>&gt;&gt;&gt;'A' &lt; 'B' &lt; 'C'
True
&gt;&gt;&gt;"angler" &lt; "beta fish" &lt; "coleocanth"
True
</code></pre>
<p>Most sources say strings in Python are ordered by ASCII code - except that's clearly nonsense, since Python 3 strings are Unicode. </p>
<p>Obviously there's a defined ordering for A, B, C... and presumably other languages have similar alphabetical orderings. </p>
<p>But how do you order, say, '♳', '▧' and 'ⵞ'? More to the point, how do you order Ａ, 𝐀, 𝐴, 𝑨, 𝒜, 𝓐, 𝔄, 𝔸, 𝖠, 𝗔, 𝘈, 𝙰, 🄐, 🅐, 🅰, 🇦, A, and Ⱥ?</p>
<p>I'd <em>assume</em> it falls back to comparing Unicode code points; that'd be simplest and seems like a reasonable default, but it'd also suggest that, for example, `¾' &lt; '⅐' &lt; '↉', and '⓿' &gt; '⓵' &gt; '⒌' &gt; '⑽' &gt; '⑮', and "Ａ" &gt; "C" (that's a fullwidth A) which seems a little... un-Pythonic, even if it is a really weird edge case.</p>
<p>Is there a more intricate set of rules that are used, and if so, where are they documented? Is it implementation-defined or is there a standard?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/reference/expressions.html#value-comparisons" rel="nofollow noreferrer">docs</a> (and frustratingly, not mentioned in the docs for the string type):</p>
<blockquote>
<p>Strings (instances of <code>str</code>) compare lexicographically using the numerical Unicode code points (the result of the built-in function <code>ord()</code>) of their characters.</p>
</blockquote>
<p>This is normative, and accurate to the implementation. You can view the Python 3.6.3 implementation of string comparison <a href="https://github.com/python/cpython/blob/v3.6.3/Objects/unicodeobject.c#L11215" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">"it'd also suggest that, for example, '¼' &lt; '⅐' &lt; '↉'" - that's not any more problematic than <code>"10" &lt; "2"</code>.</span>
<span class="comment-copy">Some languages have a more complex ordering than can be accommodated by a simple <code>&lt;</code>, even English if you choose to ignore case.</span>
<span class="comment-copy">It's Pythonic to compare lexicographically because Unicode collation is a huge can of worms that should be opened explicitly.</span>
<span class="comment-copy">Note: For locale aware string comparisons (that actually take into account the logical meaning of characters, at least to a certain extent), you can use <a href="https://docs.python.org/3/library/locale.html#locale.strxfrm" rel="nofollow noreferrer"><code>locale.strxfrm</code></a> as your sorting <code>key</code> function.</span>
