<div class="post-text" itemprop="text">
<p>Is there an easier way to display the name and the value of all variables defined in a single cell in a pretty way?</p>
<p>The way I'm doing now is like this, but I waste a lot of time when there are 30 variables or more:</p>
<p><a href="https://i.stack.imgur.com/yJd6J.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/yJd6J.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can try something like this, using the <a href="https://docs.python.org/2/library/inspect.html" rel="nofollow noreferrer">inspect</a> library.</p>
<pre><code>import inspect

k = 0.0417
g = 0.829
lx = 6.6
m = k*g*lx**2

def get_name(lst=[]):
    local_vars = inspect.currentframe().f_back.f_locals.items()
    for i in local_vars:
        lst.append(i)
    return dict(lst)

import pandas as pd

df = pd.DataFrame(get_name(), index=[0])
result = df.T.loc[df.dtypes != object]
print(result)
          0
g     0.829
k     0.0417
lx    6.6
m     1.50584
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="http://ipython.readthedocs.io/en/stable/interactive/magics.html#magic-whos" rel="nofollow noreferrer"><code>whos</code></a> command to see <em>all</em> variables stored in the current kernel.</p>
<pre><code>k, g, lx = .4, .8, 6.6
m = k*g*lx**2
whos
</code></pre>
<p>outputs:</p>
<pre><code>Variable   Type     Data/Info
-----------------------------
g          float    0.8
k          float    0.4
lx         float    6.6
m          float    13.939200000000001
</code></pre>
<p>But as said, it displays <strong>all</strong> variables, so it will display other variables from earlier cells you've run.</p>
<p>A similar result can be achieved using <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">locals()</a> or <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer">globals()</a> command from python built-in functions, which return a dictionary of variables. But the way jupyter represents is prettier. </p>
<hr/>
<p>Alternatively you can use <a href="http://ipython.readthedocs.io/en/stable/api/generated/IPython.core.interactiveshell.html#module-IPython.core.interactiveshell" rel="nofollow noreferrer">InteractiveShell</a>. This will change the behavior of cells and act like a python shell would, so it will output <a href="http://ipython.readthedocs.io/en/stable/config/options/terminal.html#configtrait-InteractiveShell.ast_node_interactivity" rel="nofollow noreferrer">every called value</a> (to output cell) once run.</p>
<pre><code>from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

k
g
... do stuff ...
lx
m
... do more stuff ...
</code></pre>
<p>outputs:</p>
<pre><code>Out[2]: 0.4
Out[2]: 0.8
Out[2]: 6.6
Out[2]: 13.939200000000001
</code></pre>
<p>And finally you can return the interactivity to default by setting it to <code>last_expr</code>.</p>
<pre><code>InteractiveShell.ast_node_interactivity = "last_expr"
</code></pre>
<hr/>
<p>But the way you do it is probably the easiest and prettiest way, you can just remove the assignment on dataframe to make it a one liner or you can make it more compact to call by: </p>
<pre><code>k, g, lx, m

Out[3]: (0.4, 0.8, 6.6, 13.939200000000001)
</code></pre>
</div>
<span class="comment-copy">You should post your code instead of image files.</span>
<span class="comment-copy">Thanks but i'm getting an error. I copied and pasted the exact code and it gives: Shape of passed values is (30, 2), indices imply (30, 1)</span>
<span class="comment-copy">Thanks for the detailed answer!</span>
