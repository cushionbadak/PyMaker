<div class="post-text" itemprop="text">
<p>From <a href="https://stackoverflow.com/questions/46203876/what-are-the-differences-between-the-purposes-of-generator-functions-and-asynchr/46203922#comment79377288_46203922">a comment</a> by Jim Fasarakis Hilliard:</p>
<blockquote>
<p>Generators: <code>def</code> functions that contain one or more <code>yield</code> expressions.</p>
<p>Generators are used as data producers (they <code>yield</code> values). </p>
</blockquote>
<p>I can understand that.</p>
<blockquote>
<p>Generator-based coroutine: A generator (<code>def</code> + <code>yield</code>) that is wrapped by <a href="https://docs.python.org/3/library/types.html#types.coroutine" rel="nofollow noreferrer"><code>types.coroutine</code></a>. You need to wrap it in
  <code>types.coroutine</code> if you need it to be considered a coroutine object.</p>
<p><strong>Generator-based coroutines are used as consumers (you <code>.send</code> values to
  them or to a sub-generator they <code>yield from</code>).</strong> </p>
</blockquote>
<p>What does "consumers (you <code>.send</code> values to them or to a sub-generator they <code>yield from</code>)" mean? </p>
<blockquote>
<p>Asynchronous Generator: <code>async def</code> functions that contain a one or more <code>yield</code> expressions. These can also contain <code>await</code> expressions.</p>
<p><strong>Asynchronous generators are asynchronous data producers.</strong></p>
</blockquote>
<p>What does  "asynchronous data producers" mean?</p>
<blockquote>
<p>Coroutine: <code>async def</code> without zero or more <code>await</code>s and no <code>yield</code>s. </p>
<p><strong>coroutines are asynchronous data consumers</strong>.</p>
</blockquote>
<p>What does "asynchronous data consumers" mean?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python, generators are NOW used in a number of various ways. <strong>The original purpose of generators was to suspend execution and then <code>yield</code> a value back to the caller</strong>. The caller can then call next later to resume the generator. Hence generators were data producers.</p>
<p>Now the above version of generators only allowed returning data through the <code>yield</code> statement. Now for a function to be a coroutine, it should also accept values from the caller. Hence <a href="https://www.python.org/dev/peps/pep-0342/" rel="nofollow noreferrer"><strong>PEP 342</strong></a> was introduced in python 2.5 to <strong>enhance generators so that they can act as full fledged coroutines</strong>. This allowed callers to send values to the generators.</p>
<p>Now the new issue was that when generators were refactored and you wanted to delegate parts of its operation to subgenerators, you need to explicitly invoke the subgenerator as an iterator, propagate the data send by caller and handle exception. To simplify the operation of subgenerators, a new operation <strong><code>yield from</code> was defined in <a href="https://www.python.org/dev/peps/pep-0380/" rel="nofollow noreferrer">PEP 380</a> as part of python 3.3</strong>. The <code>yield from</code> is syntactically is much more than the plain yield syntax. In a perfect world, a new keyword probably would have used.</p>
<p>Now the issue was that generators were used in two different contexts. As an iterator and as a coroutine. It would have been better if a generator can be explicitly defined as a coroutine. Hence <a href="https://www.python.org/dev/peps/pep-0492/#id47" rel="nofollow noreferrer"><strong>PEP 492 introduced <code>async</code> and <code>await</code></strong></a> keywords in Python 3.5. Hence any generator which was used as a coroutine was indicated by the <code>async</code> keyword. The coroutine in Python 3.5 can use <code>await</code> keyword instead of the <code>yield from</code>. Note that from python 3.5 onwards coroutines are a different type!!</p>
<p>Now assume you have a generator function with <code>def</code> and <code>yield</code>. You can convert an existing generator type to a coroutine type using the <strong><code>types.coroutine</code></strong> decorator. These are consumers who can accept values through <code>send()</code> and delegate the same to subgenerators using <code>yield from</code>.</p>
<p>In python 3.5, you can use <code>async</code> to indicate that the function is a coroutine type. Such a function can contain plain <code>yield</code> and <code>await</code>. They cannot contain <code>yield from</code> (since <code>await</code> replaces the feature). When a coroutine contains plain <code>yield</code>, they are the lowest in a chain of generator calls and hence called an asynchronous data producer. </p>
<p>Any coroutine without plain <code>yield</code> will be a data consumer since it must call another coroutine through <code>await</code> to get asynchronous data.</p>
</div>
<span class="comment-copy">Very good answer, thank you very much!</span>
