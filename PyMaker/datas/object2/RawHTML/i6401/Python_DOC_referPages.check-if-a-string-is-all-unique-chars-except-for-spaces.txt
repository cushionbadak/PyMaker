<div class="post-text" itemprop="text">
<p>I'm practicing questions from Cracking the coding interview to become better and just in case, be prepared. The first problem states: Find if a string has all unique characters or not? I wrote this and it works perfectly:</p>
<pre><code>def isunique(string):
    x = []
    for i in string:
        if i in x:
            return False
        else:
            x.append(i)
    return True
</code></pre>
<p>Now, my question is, what if I have all unique characters like in:
<strong>'I am J'</strong>
which would be pretty rare, but lets say it occurs by mere chance, how can I create an exception for the spaces? I a way it doesn't count the space as a character, so the func returns True and not False?</p>
</div>
<div class="post-text" itemprop="text">
<p>Now no matter how space or how many special characters in your string , it will just count the words :</p>
<pre><code>import re
def isunique(string):
    pattern=r'\w'
    search=re.findall(pattern,string)
    string=search
    x = []
    for i in string:
        if i in x:
            return False
        else:
            x.append(i)
    return True



print(isunique('I am J'))
</code></pre>
<p>output:</p>
<pre><code>True
</code></pre>
<p>without space words test case :</p>
<pre><code>print(isunique('war'))
True
</code></pre>
<p>with  space words test case:</p>
<pre><code>print(isunique('w a r'))
True
</code></pre>
<p>repeating letters :</p>
<pre><code>print(isunique('warrior'))
False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Option 1</strong><br/>
The elegant approach, with <code>collections.Counter</code></p>
<pre><code>from collections import Counter

def isunique(string):
    return Counter(string.replace(' ', '')).most_common(1)[0][-1] == 1
</code></pre>
<hr/>
<p><strong>Option 2</strong>
Slightly more efficient, but less pretty.</p>
<pre><code>def isunique(string):
    c = Counter()
    for s in string.replace(' ', ''):
        c[s] += 1
        if c[s] &gt; 1:
            return False
    return True
</code></pre>
<pre><code>In [141]: isunique( 'I am JJ')
Out[141]: False

In [142]: isunique( 'I am J')
Out[142]: True</code></pre>
<p>This solution will not iterate over the entire list if it was possible to detect a duplicate sooner.</p>
<hr/>
<p>If your strings contain more than just whitespaces (tabs and newlines for instance), I'd recommend regex based substitution:</p>
<pre><code>import re
string = re.sub(r'\s+', '', string, flags=re.M)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create a list of characters you want to consider as non-characters and replace them in string. Then perform your function code.</p>
<p>As an alternative, to check the uniqueness of characters, the better approach will be to compare the length of final string with the <a href="https://docs.python.org/3/library/functions.html#func-set" rel="nofollow noreferrer"><code>set</code></a> value of that string as:</p>
<pre><code>def isunique(my_string):
    nonchars = [' ', '.', ',']
    for nonchar in nonchars:
        my_string = my_string.replace(nonchar, '')
    return len(set(my_string)) == len(my_string)
</code></pre>
<p>Sample Run:</p>
<pre><code>&gt;&gt;&gt; isunique( 'I am J' )
True
</code></pre>
<hr/>
<p>As per the Python's <a href="https://docs.python.org/3/library/functions.html#func-set" rel="nofollow noreferrer"><code>set() document</code></a>:</p>
<blockquote>
<p>Return a new set object, optionally with elements taken from iterable.
  set is a built-in class. See set and Set Types â€” set, frozenset for
  documentation about this class.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>And... a pool of answers is never complete unless there is also a regex solution:</p>
<pre><code>def is_unique(string):
    import re
    patt = re.compile(r"^.*?(.).*?(\1).*$")
    return not re.search(patt, string)
</code></pre>
<p>(I'll leave the whitespace handling as an exercise to the OP)</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple solution</p>
<pre><code>def isunique(string):
    return all(string.count(i)==1 for i in string if i!=' ')
</code></pre>
</div>
<span class="comment-copy">use <code>isspace()</code></span>
<span class="comment-copy">I would suggest just running <code>string.replace(" ", "")</code> before passing it into your already working <code>isunique</code> function...</span>
<span class="comment-copy">@mentalita how exactly would you incorporate isspace()? beacuse if I do it in the for loop, it makes the string a bool and not iterable</span>
<span class="comment-copy">@MauricioCastaneda: what? how does <code>isspace()</code> make the string a bool? lol</span>
<span class="comment-copy">@mentalita I tried doing it this way, for i in string.isspace():, and then python gave me an error saying: 'bool' object is not iterable, that's why I asked how would you implement if with isspace()?</span>
<span class="comment-copy">Simple != best. This function has quadratic complexity, and is really slow.</span>
