<div class="post-text" itemprop="text">
<p>I'm working on a simple negative index listing while loop for class and I don't understand why it's not working correctly.</p>
<p>Instead of printing:</p>
<p>4</p>
<p>3</p>
<p>2</p>
<p>1</p>
<p>I'm getting:</p>
<p>1</p>
<p>4</p>
<p>3</p>
<p>2</p>
<p>Any help pointing out what I'm doing wrong would be greatly appreciated.
Thank you in advance!</p>
<p>Professor's exercise:</p>
<pre><code>def loop_using_negative_indexes(my_list):
    """
    03. Access all the items in a list with negative indexes
    Finish this function below which takes a list as parameter and prints the items in a reversed order.
    You should do this with negative indexes,
    e.g. my_list[-1] is the last item and my_list[-2] is the 2nd last.
    You can choose to use either for loop or while loop to do this.
    There is no explicit return value of this function.
    """
</code></pre>
<p>My coding:</p>
<pre><code>    i = 0
    while i &lt; len(my_list):
        print(my_list[-i])
        i += 1
</code></pre>
<p>Professor's test:</p>
<pre><code>#test for Q3
new_list = [1,2,3,4]
loop_using_negative_indexes(new_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You just have a couple of off-by-one errors. </p>
<p>And as I said in the comment, <code>-0 == 0</code>, so <code>a[-0]</code> is the same as <code>a[0]</code>, i.e., it accesses the first item in <code>a</code>.</p>
<p>Here's a repaired version of your code.</p>
<pre><code>my_list = [1, 2, 3, 4]

i = 1
while i &lt;= len(my_list):
    print(my_list[-i])
    i += 1
</code></pre>
<p><strong>output</strong></p>
<pre><code>4
3
2
1
</code></pre>
<hr/>
<p>As Davis Herring mentions, it's more Pythonic to iterate directly over the items in a sequence rather than doing it indirectly via indexing. OTOH, it's important to do exercises like this that practice using indices to develop your understanding of how indices work.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using a <code>for</code> loop with <a href="https://docs.python.org/3.6/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate()</code></a>:</p>
<pre><code>my_list = [1, 2, 3, 4]
for i, _ in enumerate(my_list, 1):
    print(my_list[-i])
</code></pre>
<p><code>enumerate()</code> is used to generate the index starting from 1. We don't need the values from the list that <code>enumerate()</code> returns, so they are bound to <code>_</code> to indicate that we don't care. Using <code>enumerate()</code> is a little cleaner than using <code>for i in range(1, len(my_list)+1):</code>, although it will execute a little slower.</p>
<p>With a <code>while</code> loop you can start your counter from 1 instead of 0:</p>
<pre><code>i = 1
while i &lt;= len(my_list):
    print(my_list[-i])
    i += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>-0 is still 0.  As such, <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow noreferrer">backward indexing</a> is 1-based (or -1-based, perhaps).  You can write directly</p>
<pre><code>for i in range(-1,-len(my_list)-1,-1):
</code></pre>
<p>or indirectly (with fewer -1s)</p>
<pre><code>for i in range(len(my_list)):
  print(my_list[-i-1])
</code></pre>
<p>or, much more Pythonically when it's not homework,</p>
<pre><code>for x in reversed(my_list):
</code></pre>
</div>
<span class="comment-copy">Hint: <code>-0 == 0</code></span>
<span class="comment-copy">"There are two hard things in computer science: cache invalidation, naming things, and off-by-one errors." â€”  Phil Karlton &amp; Leon Bambrick</span>
<span class="comment-copy">Completely makes sense, but indexing making i = 1 will only index 3 numbers in the list giving me "4,3,2"</span>
<span class="comment-copy">Not sure if it's correct, but it worked putting "print(my_list[0])" as the last statement in the while loop.</span>
<span class="comment-copy">@MCraft: Note that the while loop condition should be <code>&lt;=</code> not <code>&lt;</code> which would explain why you get <code>4, 3, 2</code>.</span>
<span class="comment-copy">Ah! Thank you! There go those critical reading skills and obvious answers.</span>
<span class="comment-copy">Apparently, using a for loop and ranging it would have been a much better option. TY</span>
<span class="comment-copy">@MCraft: The 1-basing actually makes that <code>range</code> call horrible; I wrote it out to show the difference.  I'll edit it to show an alternative that might be nicer.</span>
