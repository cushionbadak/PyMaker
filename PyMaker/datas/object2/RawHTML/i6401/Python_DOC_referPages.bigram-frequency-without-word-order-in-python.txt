<div class="post-text" itemprop="text">
<p>I have written a program to find the frequency of words in Python. I am stuck at a place where I need to find the frequency of bigrams without considering the word order. That means " in the" should be counted same as "the in".
Code to find bigram frequency:</p>
<pre><code>txt = open('txt file', 'r') 
finder1 = BigramCollocationFinder.from_words(txt.read().split(),window_size = 3)
finder1.apply_freq_filter(3)
bigram_measures = nltk.collocations.BigramAssocMeasures()

for k,v in sorted(list(combinations((set(finder1.ngram_fd.items())),2)),key=lambda t:t[-1], reverse=True)[:10]:
    print(k,v)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This seems like somewhere you could use <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="nofollow noreferrer">sets</a> for the keys in a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a>. You can see from the linked docs that sets are unordered containers and Counters are dictionaries that are specialized for counting occurrences of objects in an iterable. Could look something like this:</p>
<pre><code>from string import punctuation as punct

with open('txt file.txt') as txt:
    doc = txt.read().translate({c: '' for c in punct}).split()

c = Counter()

c.update(fronzenset((doc[i], doc[i+1])) for i in range(len(doc) - 1))
</code></pre>
<p>The <code>with</code> statement handles the file, then automatically closes the connection. From there it reads it into list of words separated by whitespace characters (spaces, newlines, etc...). Then it initializes the Counter and counts unordered pairs of words in the string.</p>
</div>
<span class="comment-copy">Thanks for the heads up. I'll change it to use <code>frozenzet</code>. I agree that OP appears to be using <code>nltk</code>, but I can't seem to find unordered bigram functionality there, so I'm offering an alternative.</span>
