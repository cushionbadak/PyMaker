<div class="post-text" itemprop="text">
<p>Say I want to delete <code>'Core.dll'</code> after <code>'git pull'</code>, so I write a hook.</p>
<pre><code>import os

dir = os.path.dirname(__file__)
try:
    os.remove(os.path.abspath(dir+os.sep+".."+os.sep+".."+os.sep+"Assets"+os.sep+"Plugins"+os.sep+"Core.dll"))

except OSError:
    pass
</code></pre>
<p>Say the hook path is <code>'E:\client\.git\hooks'</code>, the file I want to delete is in <code>'E:\client\Assets\Plugins\Core.dll'.</code></p>
<p>I think my way is very silly, is there any elegant way to get the relative path?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a>:</p>
<pre><code>from pathlib import Path

(Path(__file__).absolute().parent.parent.parent/'Assets'/'Plugins'/'Core.dll').unlink()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Anti solution is the best in python 3. For Python 2, you could use <code>os.pardir</code> and <code>os.path.join</code>:</p>
<pre><code>os.path.abspath(os.path.join(d,os.pardir,os.pardir,"Assets","Plugins","Core.dll"))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/2/library/os.path.html#os.path.relpath" rel="nofollow noreferrer">os.path.relpath</a> would be what you asked for. You should also be using <a href="https://docs.python.org/2/library/os.path.html#os.path.join" rel="nofollow noreferrer">os.path.join</a> instead of that long list of + and sep. In Python 3's pathlib, there's <a href="https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to" rel="nofollow noreferrer">relative_to</a>. It appears your code is trying to apply a relative path, not get it in relative form. In that case, joinpath and <a href="https://docs.python.org/3/library/os.path.html#os.path.normpath" rel="nofollow noreferrer">normpath</a> or realpath might help. </p>
</div>
<div class="post-text" itemprop="text">
<p>More readable solution:</p>
<pre><code>import os 
from contextlib import suppress

with suppress(OSError):
  dir = os.path.dirname(__file__)

  while '.git' in dir:
    dir = os.path.dirname(dir)

  os.remove(
    os.path.join(
      dir,
      'Assets',
      'Plugins',
      'Core.dll'
    )
  )
</code></pre>
</div>
<span class="comment-copy">using <code>os.path.join</code> and os.pardir would be better</span>
<span class="comment-copy"><code>/</code> will work as a directory separator on all platforms where you'd use both git and python... But also, on Python 3, see <code>pathlib</code>. If on Python 2 -&gt; switch to Python 3.</span>
<span class="comment-copy">also don't overload <code>dir</code>.</span>
<span class="comment-copy">(sorry, <code>__file__</code> not <code>.</code>)</span>
<span class="comment-copy">I believe the call to <code>absolute()</code> is needed <i>iff</i> <code>__file__</code> is a relative path... because of a stupid feature in <code>Pathlib</code> that it doesn't traverse past the parent.</span>
