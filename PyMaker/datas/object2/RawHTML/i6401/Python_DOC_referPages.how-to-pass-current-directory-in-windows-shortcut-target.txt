<div class="post-text" itemprop="text">
<p>So I have a Python program written, and what I am trying to do is to create windows shortcut to the program, and making sure that when running the shortcut, not only the software is ran but also the current directory that the shortcut is at would be passed as <code>sys.argv</code>, so that I could do something to it in the program. I know that for windows shortcut, you can do something like this:</p>
<pre><code>"C:\Documents and Settings\Administrator\Desktop\hello.py" --somevalue
</code></pre>
<p>to pass in arguments to the target. I am wondering how could I make it work for my specific case? So for example, if we put the shortcut at Desktop, and run the shortcut, the Python software would start with <code>sys.argv[1]="C:\Users\username\Desktop"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can specify the current directory for the executed application in a .LNK, that is the normal way to do things if you depend on a specific directory.</p>
<p>If you for some reason actually need to get information about the .LNK you must call the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms683230(v=vs.85).aspx" rel="nofollow noreferrer">GetStartupInfo</a> Windows function (with <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes</a> I assume) and if the <code>STARTF_TITLEISLINKNAME</code> bit is set in <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms686331(v=vs.85).aspx" rel="nofollow noreferrer"><code>STARTUPINFO.dwFlags</code></a> then <code>STARTUPINFO.lpTitle</code> contains the path to the .LNK the user used to start the application.</p>
</div>
<span class="comment-copy">I don't think there's any way to pass it as an argument. You're don't want the current directory (which can be obtained with <a href="https://docs.python.org/3/library/os.html#os.getcwd" rel="nofollow noreferrer"><code>os.getcwd()</code></a> in the script itself). What you need is a way for it to detect not only that it was run from a shortcut instead of directly, but also the location of shortcut that was used. I doubt that's possible, either.</span>
<span class="comment-copy">Why, exactly, do you need this information anyway?</span>
<span class="comment-copy">You can set the current working directory in the shortcut. There's no need to pass it as a command line parameter.</span>
<span class="comment-copy">@martineau well the case here is that my python software is placed on a shared file system and there is a copy of the shortcut in each project folder and that's how other people use my software: by clicking the shortcut in their project folder. If could know which project folder does this come from, I could do a bunch of optimizations.</span>
<span class="comment-copy">You can create shortcuts that pass hardcoded-in-the-shortcut arguments to be passed as command line arguments to the program being invokedâ€”just append them to the <code>Target:</code> path preceded by a space (and possibly enclosed in parentheses). i.e. <code>"C:\some folder\test.py" --somevalue</code>. This mean you could add the project folder argument to each shortcut as it's created (in that same project folder).</span>
<span class="comment-copy">It's not hard with ctypes, but it's even easier with PyWin32 installed: <code>import win32process;</code> <code>STARTF_TITLEISLINKNAME = 0x800;</code> <code>si = win32process.GetStartupInfo();</code> <code>linkname = si.lpTitle if si.dwFlags &amp; STARTF_TITLEISLINKNAME else None</code>.</span>
<span class="comment-copy">@eryksun Hey thanks for the advice, but I tried this and it returns linkname = None always when I tried to access the software directly or through shortcut</span>
<span class="comment-copy">@HansongLi, probably the .py extension is associated with the py[w].exe launcher. It executes python[w].exe as a child process, created with <code>lpTitle</code> as <code>NULL</code>, which uses the python[w].exe executable path as the title. This won't have the <code>STARTF_TITLEISLINKNAME</code> flag, which is why the above expression sets <code>linkname</code> to <code>None</code>. I suppose the launcher could call <code>GetStartupInfo</code> to proxy some details from its own startup information. As a workaround you'll need to create the shortcut using the fully-qualified path to python[w].exe (i.e. <code>sys.executable</code>) with the script as an argument.</span>
