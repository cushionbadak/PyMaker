<div class="post-text" itemprop="text">
<p>Suppose I have the following python list:</p>
<pre><code>my_list = [1, 2,'X', 'Y', 0]
</code></pre>
<p>Suppose I want to copy values of this list into a new list as follows:</p>
<ol>
<li>If it is a digit between 0-9, copy that value into the new list</li>
<li>ElIf it is 'X', copy <code>None</code> into the new list</li>
<li>Else raise an Exception</li>
</ol>
<p>Can I do it with a lambda function as shown below? If so, how?</p>
<pre><code>new_list = map(lambda(x): something-here-but-what??, my_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not just write a function that does what you want and put it in the lambda? I don't see a reason to try to make a convoluted one-liner for something that should be more than one line.</p>
<pre><code>my_list = [1, 2,'X', 'Y', 0]

def replace(x):
    if x == 'X':
        return None
    elif type(x) == int and x &lt;= 9 and x &gt;= 0:
        return x
    else:
        raise ValueError('Bad value')

new_list = map(lambda(x): replace(x), my_list[:-2]) # Returns [1, 2, None]
new_list = map(lambda(x): replace(x), my_list) # Raises exception
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To back up Brenden's (quite correct) answer...</p>
<p>You can actually do some weird things with Python ternary expressions... but the result is just unbearable. Consider a partial solution:</p>
<pre><code>&gt;&gt;&gt; new_list = map(lambda x: x if isinstance(x, int) and (0 &lt;= x and x &lt;= 9) else ValueError('Bad things happened'), [1, 2, 3, "blah"])
&gt;&gt;&gt; list(new_list)
[1, 2, 3, ValueError('Bad things happened',)]
</code></pre>
<p>Not only is that horrid and would probably confuse most Pythonistas (not just the use of an unusual construction, but <em>why</em> would you use this construction?), I don't know quite what to do yet about actually <em>raising</em> the exception right there without redefining the way <code>list()</code> works. (<code>raise</code> only works when it is standing alone.)</p>
<p>So now we have a confusing lambda that conditionally permits a member into the new map construction or includes a <code>ValueError</code> object instead. Yuk.</p>
<p>Much better to abstract this whole idea away behind a function that does, in a very simple way, exactly what you want -- and let the "beautiful code part" be the bit people will normally need to read in the future that goes something like:</p>
<pre><code>new_list = valid_list_to_map(your_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To raise an exception you have to use 'try' and 'except' statement and Statements are not allowed in the lambda expression. In the Lambda expression, you can only have expressions so you can't raise the exception in the lambda function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a conditional expression.</p>
<pre><code>a = list(map(lambda n: n if n in (0,1,2,3,4,5,6,7,8,9) else (None if n == 'X' else 1/0), my_list))
</code></pre>
<p>Other exceptions that can be raised:<br/>
In the conditional expression replace <code>1/0</code> with</p>
<pre><code>{}[n]                                       #KeyError
x                                           #NameError 
(_ for _ in ()).throw(Exception('Foo')))    #any kind of exception you want
int('x')                                    #ValueError
</code></pre>
</div>
<span class="comment-copy">Did you try it?  Did it work?</span>
<span class="comment-copy">No. Obviously the phrase <code>something-here-but-what??</code> will never work.</span>
<span class="comment-copy">maybe with a convoluted <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">conditional expression</a> and some of the ideas   in <a href="https://stackoverflow.com/questions/8294618/define-a-lambda-expression-that-raises-an-exception">this SO Q&amp;A</a></span>
<span class="comment-copy">I think this is a valid question, but it is rather unpythonic which is probably why people are downvoting it.</span>
<span class="comment-copy">I like short beautiful code. I was trying to resist writing a separate function. But I guess I will have to.</span>
<span class="comment-copy">I, too, like short, beautiful code. But in this case, it would be short, ugly code ;-) I think having three conditionals calls for its own function. I find lambda more useful for things like creating a custom function on the fly that you might use later (<code>x = lambda ...</code>), not just because you don't want to name your function. Also, looking at link given by @wwii, it's <i>really</i> ugly to actually make a lambda throw an expression the way you originally intended.</span>
<span class="comment-copy">No, you can <code>raise</code> anywhere -- it just doesn't stand much chance of getting caught by anything if you don't write your own <code>try .. except</code>. Sometimes crashing the program is the right thing to do, hence the construction. (Actually, being primarily an Erlang programmer I tend to believe that crashing the program is almost always the right thing to do, but that's a whole different world...)</span>
<span class="comment-copy">To quote @zxq9 - <code>yuk</code>!</span>
