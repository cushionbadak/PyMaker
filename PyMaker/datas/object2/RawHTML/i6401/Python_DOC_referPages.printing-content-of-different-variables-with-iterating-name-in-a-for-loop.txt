<div class="post-text" itemprop="text">
<p>Can someone explain to me, how to print the content of the following variables in a loop?</p>
<pre><code>Week23 = [12-9, "free", 15.30-12.30, "free", 12-9]
Week24 = []
Week25 = []
Week26 = []
Week27 = []
Week28 = []
Week29 = []
...
</code></pre>
<p>I have tried playing around with the following, but it is not printing the content. The exec statement merely prints out "Week23" etc. The eval statement doesn't work due to a parsing error.</p>
<pre><code>import numpy as np
length = np.linspace(23,42,42-23+1)

for i in length:
    print("Week" + str(i))
    # print(eval("Week" + str(i)))
    # exec('print("Week" + str(i))')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer">locals()</a> function:</p>
<pre><code>Week23 = [12-9, "free", 15.30-12.30, "free", 12-9]
Week24 = []


for week in [23,24]:
    print (locals()['Week%s' % week])
</code></pre>
<p>More pythonic would be a dictionary. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use global() to get a dictionary of global variables and subset it using your logic with the addition of converting <code>i</code> to integer before converting it to string:</p>
<pre><code>for i in length:
    print(globals()["Week" + str(int(i))])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem is in the array <code>length</code>. <code>numpy.linspace()</code> actually generates an array of <code>float</code> as below.</p>
<pre><code>[23.0, 24.0, ..., 42.0]
</code></pre>
<p>Try these codes, you should get what you want.</p>
<pre><code>for i in range(23, 43):
    print("Week" + str(i))
    print(eval("Week" + str(i)))
</code></pre>
<p>At last, using a variable as part of the name is really not a good idea. Try <code>dict</code> if you can.</p>
</div>
<div class="post-text" itemprop="text">
<p>When I try to run your code as it is, I get the following:</p>
<pre><code>Week23.0
Week24.0
Week25.0
Week26.0
Week27.0
Week28.0
Week29.0
Week30.0
Week31.0
Week32.0
Week33.0
Week34.0
Week35.0
Week36.0
Week37.0
Week38.0
Week39.0
Week40.0
Week41.0
Week42.0
</code></pre>
<p>So I only see problem with floats, since you used linspace, try range, and try not to escape variable name inside exec'ed string:</p>
<pre><code>for i in range(23, 42+1):
    print("Week" + str(i))
    print(eval("Week" + str(i)))
    exec('print(Week' + str(i) + ')')
</code></pre>
<p>if you insist on linspace, try and convert it to integer before using. Also, some reusability</p>
<pre><code>import numpy as np
length = np.linspace(23, 42, 42-23+1)

for i in length:
    var_name = "Week%i" % i
    print(var_name)
    print(eval(var_name))
    exec('print(%s)' % var_name)
</code></pre>
</div>
<span class="comment-copy">Why do you have separately named lists like that ? You should make them members of a list or a dict. <a href="https://nedbatchelder.com/blog/201112/keep_data_out_of_your_variable_names.html" rel="nofollow noreferrer">Keep data out of your variable names</a></span>
<span class="comment-copy">Have you considered have your variables into an Array? Something like  ar = [Week23, Week24, Week25,...] an then print individually:  for vr in ar:    print(vr)</span>
<span class="comment-copy">I answered how this could be achieved but you should consider a better storage such as a <code>list</code> or a <code>dict</code> if you dont need them starting with <code>0</code> and being incremental.</span>
<span class="comment-copy">BTW, <code>eval</code> and <code>exec</code> should generally be avoided because they can be a security risk. Here's some more pertinent info from Ned Batchelder: <a href="http://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html" rel="nofollow noreferrer">Eval really is dangerous</a>.</span>
<span class="comment-copy">The answer that you've accepted that uses <code>locals()</code> will only work in the global namespace (where <code>locals()</code> returns the <code>globals()</code> dict), it will fail inside a function. You <i>could</i> do it using the <code>globals()</code> dict, but you <b>really</b> shouldn't manhandle <code>locals()</code> or <code>globals()</code> like this! Use your own dictionary.</span>
<span class="comment-copy">I ended up turning it into a list, since I have to work with the data later.  <code>for i in length:         Weeks.append(locals()['Week%s' % int(i)]) </code></span>
