<div class="post-text" itemprop="text">
<p>How can I return a specific value if the list is out of range? This is the code I have so far:</p>
<pre><code>def word(num):
  return ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'][num-1]
</code></pre>
<p><code>word(1)</code> will return <code>'Sunday'</code>, but how can I return a default value if num is not an integer between <code>1-7</code>?</p>
<p>Thus, <code>word(10)</code> would return something like <code>"Error"</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Normal <code>if/else</code> should suffice.</p>
<pre><code>def word(num):
    l = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']
    return l[num-1] if 0&lt;num&lt;=len(l) else "Error"
</code></pre>
<p>#driver code</p>
<pre><code>&gt;&gt;&gt; word(7)
=&gt; 'Saturday'

&gt;&gt;&gt; word(8)
=&gt; 'Error'

&gt;&gt;&gt; word(-10)
=&gt; 'Error'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the highly pythonic EAFP approach with a <code>try-except</code>.</p>
<pre><code>daysofweek = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']
def getday(num):
    try:
        return daysofweek[num - 1]
    except IndexError:
        return "Error"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could convert your list to a dict with <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer"><code>enumerate(sequence, start=1)</code></a>:</p>
<pre><code>dict(enumerate(['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'], 1))
# {1: 'Sunday', 2: 'Monday', 3: 'Tuesday', 4: 'Wednesday', 5: 'Thursday', 6: 'Friday', 7: 'Saturday'}
</code></pre>
<p>Then, your query is a easy as <a href="https://docs.python.org/2/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get()</code></a>:</p>
<pre><code>wdays = {1: 'Sunday', 2: 'Monday', 3: 'Tuesday', 4: 'Wednesday', 5: 'Thursday', 6: 'Friday', 7: 'Saturday'}

def word(num):
    return wdays.get(num, 'Error')
</code></pre>
<p>Here's an example:</p>
<pre><code>&gt;&gt;&gt; word(3)
'Tuesday'
&gt;&gt;&gt; word(10)
'Error'
&gt;&gt;&gt; word('garbage')
'Error'
</code></pre>
<p>Depending on what you want to do with the string, it might not be a good idea to return <code>'Error'</code> instead of simply throwing an Error. Otherwise, you'll have to check if the string looks like a week-day or is equal to <code>'Error'</code> every time you use this function. </p>
</div>
<div class="post-text" itemprop="text">
<p>Simply translating what you want to Python:</p>
<pre><code>def word(num):                                                                  
   return ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'][num-1] if 1 &lt;= num &lt;= 7 else 'Error'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It should take care of any integer which isn't within your desired range. </p>
<pre><code>daysofweek = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']
def getday(num, len_range):
    if 0 &lt; num &lt;= len_range:
        return daysofweek[num - 1]
    else:
        return "Error"

num_index = int(input("Enter a value for num : "))
print(getday(num_index, len(daysofweek)))
</code></pre>
<p>You can write the <code>getday()</code> in a compact form like this as well:</p>
<pre><code>def getday(num, len_range):
    return daysofweek[num - 1] if 0 &lt; num &lt;= len_range else "Error"
</code></pre>
</div>
<span class="comment-copy">Where is <code>num</code> coming from? If it's a bad input, it might be a good idea to throw an exception.</span>
<span class="comment-copy">Every call is complicated to read and maybe he need this call a few times so a own method with own behavoiur is much better. But it´s working -- you´re right.</span>
<span class="comment-copy"><code>return l[num-1] if len(l) &gt;= num &gt; 0 else "Error"</code></span>
<span class="comment-copy">It won't not work for <code>negative</code> values or <code>0</code>. Will go back to last.</span>
<span class="comment-copy">@KaushikNP the understanding is OP enters a value between 1 and 8. I’m just showing them how to use the eafp approach, I’m not nitpicking on their function or what it does.</span>
<span class="comment-copy">Another benefit of this approach is that it will also return 'Error' if <code>word</code> is passed <i>any</i> bad arg, not just out-of-range integers.</span>
<span class="comment-copy">@PM2Ring: True. But it depends what the goal is. It's often preferrable to throw an exception as soon as bad input is used instead of trying to keep on working with broken data. If I liked this behaviour, I'd write Javascript instead of Python ;)</span>
<span class="comment-copy">Indeed. It would be better design to raise <code>ValueError</code> on bad args rather than returning 'Error'. OTOH, string tests are cheaper than exception handling.</span>
