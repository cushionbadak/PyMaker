<div class="post-text" itemprop="text">
<p>Problem:</p>
<p>Write a Python program that takes user input of a word and determines if it is a Palindrome or not using the Stack data structure.</p>
<p>A palindrome is a word that can be read the same backward as forward. Some examples of palindromic words are noon, civic, radar, level, rotor, kayak, reviver, racecar, redder, madam, and refer.</p>
<p>The following code is what I've done so far and need help to make it compile correctly:</p>
<pre><code>import Stack

def palidromeChecker(words):
palidromestack = Stack.Stack()

words = user_input("Type a word: ")
for x in words:
 palidromestack.push(x)
palindrome = True
for x in words:
 if x != palidromestack.top():
    palindrome = False
break
palidromestack.pop()
if palindrome:
print (words, "is a palindrome")
else:
print (words, "is not a palindrome")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>No one seems clear on what a <code>Stack</code> is, so let me show you how you might do this with a <a href="https://docs.python.org/3/library/collections.html?highlight=deque#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a></p>
<pre><code>import collections

def palindrome_checker(word):
    # casefold the word, since "Racecar" is a palindrome just like "racecar"
    q = collections.deque(word.casefold())
    while True:
        try:
            l, r = q.popleft(), q.popright()
        except IndexError:
            # we've reached the end without error!
            return True
        else:
            if l != r:
                return False
</code></pre>
<p>That said the canonical palindrome checker in python is just:</p>
<pre><code>def palindrome_checker(word):
    word = word.casefold()  # as before
    return word == word[::-1]
</code></pre>
<p>Slicing a string with <code>[::-1]</code> says "Give me back this string, unbounded on each end, in reverse order." This is equivalent to <code>str(reversed(word))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Sorry about the stack confusion</p>
<p>I changed the code to the following and it seems to be working:</p>
<pre><code>class Stack:
def __init__(self):
    self.items=[]

def isEmpty(self):
    return self.items==[]

def push(self,data):
    self.items.append(data)

def size(self):
    return len(Self.items)

def show(self):
    print (self.items)

def peek(self):
    return self.items[len(self.items)-1]

def pop(self):
    assert not self.isEmpty()
    return self.items.pop()

word=input("Enter a word: ")
s=Stack();

for i in word:
 s.push(i)

list1 = ""
while not s.isEmpty():
 list1 += s.pop()

if(list1 == word):
print(word,"is a palindrome");
else:
print(word,"is not a palindrome");
</code></pre>
</div>
<span class="comment-copy"><code>import Stack</code>!! Where did you get that module from? can you also mention the error you are receiving ?</span>
<span class="comment-copy">@Unni I am using python 3.6 and was told you to use import Stack when creating a stack.  Hence the palidromestack = Stack.Stack() declaration.</span>
<span class="comment-copy"><code>Stack</code> is not a stdlib module. Where did you get it?</span>
<span class="comment-copy">As far as I know, you can use <code>list</code> as a stack. I don't see a <code>Stack</code> module in Python 3 docs <a href="https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-stacks" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a></span>
<span class="comment-copy">The closest thing I can find is <a href="https://stackoverflow.com/questions/19413735/trying-to-stop-an-error-with-stacks-in-python">this</a>. Is the same <code>Stack</code> module what we're looking at here?</span>
<span class="comment-copy">as it happens, this is the rare case where it's about as short in Haskell as it is in Python. <code>isPalindrome s' = let s = map toLower s' in s == reverse s</code> (with <code>toLower</code> imported from Data.Char)</span>
