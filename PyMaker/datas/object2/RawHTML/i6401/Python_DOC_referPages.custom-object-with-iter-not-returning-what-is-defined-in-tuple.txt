<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/37639363/how-to-convert-an-custom-class-object-to-a-tuple-in-python">How to convert an custom class object to a tuple in Python? [closed]</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
</ul>
</div>
<p><strong>In a custom object with <code>__iter__()</code> defined, when calling <code>tuple(obj)</code>, it returns the data of <code>__iter__()</code> in tuple form, but I want it to return from <code>__tuple__()</code>.</strong></p>
<p>This is a really big class, and I don't want to paste it here. I instead wrote a smaller example of my problem.</p>
<pre><code>class Example:
    def __init__(self, a, b):
        self.data = [a, b]

    def __iter__(self):
        return iter(reversed(self.data))

    def __tuple__(self):
        return map(str, self.data)


ex = Example(2, 3)

print([x for x in ex])  # Should return the data from __iter__().
&gt;&gt;&gt; [3, 2]  # Reversed, good...

print(tuple(ex))  # Now calling: __tuple__().
&gt;&gt;&gt; (3, 2)  # Should have returned ["2", "3"].
</code></pre>
<p>If you need to see all of my code, ask, and I'll put it in a Pastebin. I just wanted to save you the effort of sorting through all of those extra methods.</p>
<p>Does <code>__iter__()</code> override the <code>__tuple__()</code> type? For some reason I can't get it to change to return what it should from <code>__tuple__()</code>.</p>
<p>Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__tuple__</code> isn't a thing. <code>tuple</code> doesn't look for a <code>__tuple__</code> method to perform conversion-to-tuple. I don't know where you got that idea.</p>
</div>
<span class="comment-copy">Where exactly did you get the idea to implement a <code>__tuple__</code> method? It's not in the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">data model</a>. This is the behaviour you should have expected.</span>
<span class="comment-copy">There's no way <code>print(tuple(ex))</code> printed <code>[3, 2]</code>. That's not a tuple.</span>
<span class="comment-copy">Please vote to close this because it would destroy my rep if it stays. I had assumed that <code>__tuple__()</code> existed, and to be honest never thought it wouldn't. After all, <code>__str__()</code> exists.</span>
<span class="comment-copy">It <i>is</i> closed.</span>
<span class="comment-copy">Because <code>__str__()</code> exists.</span>
<span class="comment-copy">@spikespaz, an understandable chain of reasoning. "<code>__str__</code> and <code>__int__</code> exist, so maybe there are dunder methods for every built-in type", one might think. But this turns out not to be the case.</span>
<span class="comment-copy">@Kevin New vocab term: dunder methods. Never knew. Friend kept referring to them as "magic" declarations.</span>
<span class="comment-copy">@spikespaz: Note that the dunders are just a naming convention; any "magic" of magic methods doesn't have anything to do with the underscores. For example, <code>next</code> was the magic method for retrieving an item from an iterator on Python 2.</span>
