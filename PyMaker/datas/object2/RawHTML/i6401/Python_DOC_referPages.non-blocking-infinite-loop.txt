<div class="post-text" itemprop="text">
<p>I have a Raspberry pi with a Sense hat. I've made a <a href="https://en.wikipedia.org/wiki/Binary_clock" rel="nofollow noreferrer">binary clock</a> that I want to display and keep updated on the Sense hat's display. However, I want the ability to toggle the clock on and off with joystick middle. Everything's working fine, apart from my clock's update-loop blocking any new input once it's started.</p>
<pre><code>from sense_hat import SenseHat
from signal import pause

def show_clock():
    # clock-logic

def pushed_middle(event):
    while 1:
        show_clock()

sense = SenseHat()

sense.stick.direction_middle = pushed_middle
pause
</code></pre>
<p>I've been thinking about how to solve this. How to allow the script/clock to keep running and still accept new actions from the joystick. But once the while-loop starts, I'm stuck. I'm not sure what to google for. I've started looking into async/await, but that seem to be a Python 3.5+ feature, and my pi only has 2.7.9/3.4.2(I just <code>sudo apt-get update/upgrade</code>-ed). I've also tried moving the loop around in the program, but it's blocking everything no matter where I place it.</p>
<ul>
<li>Is it a non-blocking (infinite) loop I'm looking for?</li>
<li>Is this what a game-/event-loop is?</li>
<li>Can I solve this with out using multiple threads(just curious, not a limitation if it's a must)?</li>
<li>Is this a general problem in "designing" infinite loops?</li>
<li>Can I approach this as a (reverse?) race condition? I was thinking about maybe using a semaphore as some kind of tool to not block, but I'm not sure.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>What you need is multithreading. Here you can find a good explanation with example.</p>
<p><a href="https://stackoverflow.com/questions/2846653/how-to-use-threading-in-python">How to use threading in Python?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I solved it by using a global variable:</p>
<pre><code>from sense_hat import SenseHat
from signal import pause

def show_clock():
    global clock_is_on

    while clock_is_on:  # clock-loop
        # clock-logic
        # ...

        events = sense.stick.get_events()

        for event in events:
            if event.direction == "middle" and event.action == "pressed":
              clock_is_on = False

        time.sleep(1) # only need to update clock once every second

def pushed_middle(event):
    if not clock_is_on:
        clock_is_on = True
        show_clock()

sense = SenseHat()

clock_is_on = False

sense.stick.direction_middle = pushed_middle
pause()
</code></pre>
</div>
<span class="comment-copy">See Python's <a href="https://docs.python.org/3/library/signal.html" rel="nofollow noreferrer"><b><code>signal</code></b></a> library</span>
<span class="comment-copy">@PeterWood I was looking at <code>signal</code> but thought it was overkill, and mostly OS-stuff. However, I'm not sure how to determine what type of signal the joystick is sending, if any. How would I go about to determine this?</span>
