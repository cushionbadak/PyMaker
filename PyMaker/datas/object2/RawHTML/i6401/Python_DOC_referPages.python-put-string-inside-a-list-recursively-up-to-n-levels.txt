<div class="post-text" itemprop="text">
<p>I am working on to write a Python function <code>nest(a, b)</code> that takes a value <code>a</code> and a number <code>b</code>. Then the value <code>a</code> is put inside a <code>list</code>, which is put in another list, and so on, up to n levels. </p>
<p>For example:</p>
<pre><code>nest("foo", 3)
</code></pre>
<p>should return:</p>
<pre><code>[[[["foo"]]]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this,</p>
<pre><code>def nest(obj, depth):
    ret = obj
    for _ in range(depth):
        ret = [ret]
    return ret
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You may write a <a href="https://en.wikipedia.org/wiki/Recursive_function" rel="nofollow noreferrer"><em>recursive function</em></a> to achieve this as:</p>
<pre><code>def my_func(s, n):
    return [s] if n == 0 else [my_func(s, n-1)]
</code></pre>
<p><strong>Sample Run:</strong></p>
<pre><code>&gt;&gt;&gt; my_func('foo', 3)
[[[['foo']]]]
</code></pre>
<p><strong>Note:</strong> There is a maximum recursive limit allowed for the Python interpreter stack. This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.</p>
<p>You can check this value using <a href="https://docs.python.org/3/library/sys.html#sys.getrecursionlimit" rel="nofollow noreferrer"><code>sys.getrecursionlimit()</code></a> function which as per the doc:</p>
<blockquote>
<p>Return the current value of the recursion limit, the maximum depth of
  the Python interpreter stack. This limit prevents infinite recursion
  from causing an overflow of the C stack and crashing Python. It can be
  set by <a href="https://docs.python.org/3/library/sys.html#sys.setrecursionlimit" rel="nofollow noreferrer">setrecursionlimit()</a>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>This is a recursive solution, it pretty much comes naturally from the problem definition:</p>
<pre><code>def nest(val, n):
  if n &lt;= 0:
    return val
  else:
    return [ nest(val, n - 1) ]
</code></pre>
</div>
<span class="comment-copy">Ok. What have you tried?</span>
<span class="comment-copy">This board is about helping you solve a specific question. Therefore you have to do some work on your own. A question like: I want xy can you program that for me usually takes a professional and therefore costs money ;)</span>
<span class="comment-copy">I would imagine <code>nest("foo", 0)</code> should be <code>"foo"</code>, not <code>["foo"]</code>, which means <code>nest("foo", 3)</code> should be <code>[[["foo"]]]</code> instead.</span>
<span class="comment-copy">That won't give the correct result, did you mean <code>ret = [ret]</code>?</span>
<span class="comment-copy">Yes, I actually meant that. Sorry for that silly mistake</span>
<span class="comment-copy">At least based on the example in the original question, you have an off-by-one error here; <code>nest(obj, 3)</code> will return <code>[[[obj]]]</code>, not <code>[[[[obj]]]]</code>. To match the OP, initialize <code>ret = [obj]</code> instead. However, I think this is a more reasonable interpretation, where <code>nest(obj, 0)</code> is a no-op instead of wrapping <code>obj</code> in a single list.</span>
<span class="comment-copy">I have thought that <code>nest("foo", 0)</code> must be <code>"foo"</code>, not <code>["foo"]</code>.</span>
<span class="comment-copy">Even without the limit, recursion is a poor way to implement this in Python, requiring an unnecessary amount of memory and a lot of overhead for the additional function calls.</span>
