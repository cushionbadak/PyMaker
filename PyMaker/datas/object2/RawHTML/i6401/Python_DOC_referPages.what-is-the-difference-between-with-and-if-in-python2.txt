<div class="post-text" itemprop="text">
<p>I was looking at an INI configuration file implementation <a href="https://martin-thoma.com/configuration-files-in-python/#ini" rel="nofollow noreferrer">here</a> that used this code:</p>
<pre><code># Load the configuration file
with open("config.ini") as f:
    sample_config = f.read()
    config = ConfigParser.RawConfigParser(allow_no_value=True)
    config.readfp(io.BytesIO(sample_config))
</code></pre>
<p>I want to output something if the configuration file can not be found, but <a href="https://docs.python.org/2/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer">the Python documentation</a> doesn't say anything about an <code>else</code> condition, so I was thinking of using an <code>if...else</code> block here instead:</p>
<pre><code># Load the configuration file
if f = open("config.ini"):
    sample_config = f.read()
    config = ConfigParser.RawConfigParser(allow_no_value=True)
    config.readfp(io.BytesIO(sample_config))
else
    print "Could not open config file"
</code></pre>
<p>What kind of differences would I see with an <code>if...else</code> block in place of a <code>with</code> block?</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, one difference is that the <code>if</code> block would not parse. Assignment statements aren’t expressions in Python. Another is that it wouldn’t close the file by itself – <a href="https://www.python.org/dev/peps/pep-0343/#examples" rel="nofollow noreferrer">that’s what the <code>with</code> accomplishes</a>.</p>
<p>What you’re really looking for is <code>try</code>, since <code>open</code> throws an exception when a file can’t be found:</p>
<pre><code>try:
    # Load the configuration file
    with open("config.ini") as f:
        config = ConfigParser.RawConfigParser(allow_no_value=True)
        config.readfp(f)
except FileNotFoundError:
    # handle exception
</code></pre>
<p>(If you’re using an older version of Python, you’ll need to catch <code>OSError</code> and <a href="https://docs.python.org/3/library/exceptions.html#FileNotFoundError" rel="nofollow noreferrer">check its <code>errno</code></a> instead.)</p>
</div>
<div class="post-text" itemprop="text">
<p>One tests a condition to see if it is true, then executes the code block after the condition is met example:</p>
<pre><code>a = 1
if a != 1:
    do something here.
elif a ==1: # elif takes the place of else, literally means else if a ==/!= some value execute this.
    do something else.
</code></pre>
<p>a With statement is a boolean operation, it can be used with file I/O, or that's the most that I have seen it used with.</p>
<p>example could be:</p>
<pre><code>with open(somefile):
    do some stuff.
</code></pre>
<p>the else clause from what i have seen only seems to work with try/the very end of if statements when the condition has never been met, and its use is basically, if the try statement fails for some reason or another, this is what you now execute.</p>
<pre><code>with open(somefile):
    try:
        do stuff.
else:
exit loop/ do something else.
</code></pre>
<p><strong>--------------------------------------------------------------------------------</strong></p>
<p>Truth be told, I enjoy the ease of while statements. You can nest more conditional statements inside the while loop, for loops, if loops(I have come to LOVE nested loops) they ease the process of writing code so much. </p>
<p>Here is a code snippet from a piece that I wrote not too long ago:</p>
<pre><code>while continue_loop == 'Y': # gives user an option to end the loop or not 
                            # and gives you more flexibility on how the loop runs.
    ac = 0
    acc = 0
    accu = 0
    accum = 0
    try: # the try block, gets more info from user, and stores it inside variables.
        bday = int(input("Please enter the day you were born! \n-&gt;"))
        bmonth = int(input("Please enter the month you were born\n -&gt;"))
        byear = int(input("Please enter the year you were born!\n-&gt;"))
        birth = bday + bmonth + byear
        sum1 = str(birth)
        for x in sum1: # iteration over the variable.
            accum1 += int(x)
            accum2 = str(accum1)
</code></pre>
</div>
