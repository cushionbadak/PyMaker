<div class="post-text" itemprop="text">
<p>Let's have a programme that takes a number as an input. Nonetheless, the base can be specified. When not specified, the number is in decimal base.</p>
<pre class="lang-sh prettyprint-override"><code># 10 in decimal
./get_num.py 10

# 10 in octal
./get_num.py -o 12

# 10 in binary
./get_num.py -b 1010
</code></pre>
<p>I would like to use Python Argparse module, but cannot find a way to achieve this result. I know there is an option to use <a href="https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_mutually_exclusive_group" rel="nofollow noreferrer">mutually exclusive group</a> but this does not suit well, since then one need to specify base always.</p>
<p>Model code:
</p>
<pre><code>#!/usr/bin/env python3

from argparse import ArgumentParser


parser = ArgumentParser()
parser.add_argument('base')
parser.add_argument('-o')
parser.add_argument('-b')

args = parser.parse_args()


if args.o: print('octal', args.o)
if args.b: print('binary', args.b)
else: print('decimal', args.base)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think this does what you're after. You don't need to specify the base in the mutually exclusive group, by default required = false.</p>
<pre><code>import argparse

parser = argparse.ArgumentParser(prog='PROG')
group = parser.add_mutually_exclusive_group()
group.add_argument('-b', action='store_true')
group.add_argument('-o', action='store_true')
parser.add_argument('num', help='number')

args=parser.parse_args()

base=10  # default base
if args.b:
    base=2
elif args.o:
    base=8
# add other bases as required

print(int(args.num, base=base))
</code></pre>
<p>Output;</p>
<pre><code>run get_num.py -b 1010
10

run get_num.py -o 12
10

run get_num.py 10
10

run get_num.py -b -o 12
usage: PROG [-h] [-b | -o] num
PROG: error: argument -o: not allowed with argument -b
An exception has occurred, use %tb to see the full traceback.

SystemExit: 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using the <code>dest</code>, <code>action='store_const'</code> and <code>const</code> options to <code>add_argument</code> in <code>argparse</code>, you can do this:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group()
parser.add_argument('value', help='Value')
group.set_defaults(base=10)
group.add_argument('-b', dest='base', action='store_const', const=2,
                   help="Use base 2")
group.add_argument('-o', dest='base', action='store_const', const=8,
                   help="Use base 8")

args = parser.parse_args()

print("Value {value}, base {base}".format(value=args.value, base=args.base))
</code></pre>
<p>with the following results:</p>
<pre><code>$ python base.py 100
Value 100, base 10
$ python base.py 100 -b
Value 100, base 2
$ python base.py 100 -b2
usage: base.py [-h] [-b | -o] value
base.py: error: argument -b: ignored explicit argument '2'
$ python base.py 100 -o
Value 100, base 8
$ python base.py 100 -o -b
usage: base.py [-h] [-b | -o] value
base.py: error: argument -b: not allowed with argument -o
</code></pre>
<hr/>
<p>You may also consider using a <code>--base</code> option instead, with an integer value (default 10). To me, that makes your program clearer and simpler:</p>
<pre><code>parser = argparse.ArgumentParser()
parser.add_argument('value', help='Value')
parser.add_argument('-B', '--base', type=int, default=10,
                   help="Base to use")
</code></pre>
</div>
<span class="comment-copy">what if you put the base in a conditional. <code>if base:</code> and create a default template</span>
<span class="comment-copy">You mean that <code>base</code> will be positional and <code>octal</code> and <code>binary</code> optional?</span>
<span class="comment-copy">No base can be optional. But you can write a condition to check if base is passed. If not passed initiate the base. Post your code and I will see if I can add what you need</span>
<span class="comment-copy">It's a model problem so there is not much code. But I can write it</span>
