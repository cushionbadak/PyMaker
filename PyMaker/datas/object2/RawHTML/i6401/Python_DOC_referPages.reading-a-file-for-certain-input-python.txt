<div class="post-text" itemprop="text">
<p>So I am doing a code to login and create a username and password and when logging in, i am reading an external file that contain all the user name and passwords in dictionary form e.g. {"aaaaaaaa": "aaaaaaA999"}</p>
<p>This is the code to read it</p>
<pre><code>f3 = open("helloworld.txt","r")
user = input("Enter login name: ")

if user in f3.read():
   passw = input("Enter password: ")
   print("")

   if user in f3.read() and passw in f3.read():
        print ("Login successful!\n")


   else:
        print("")
        print("User doesn't exist!\n")
f3.close()
</code></pre>
<p>However when I try and read it it keeps saying that the user doesn't exist, any suggestions</p>
</div>
<div class="post-text" itemprop="text">
<p>The function <code>f3.read()</code> is reading the entire file at once, and moving the file pointer to the end. Any subsequent file read without closing and reopening the file is going to return <code>None</code>.</p>
<p>You need to actually parse the file into a data structure that allows you to search for containment, instead of checking to see if the name or password exists in the entire file. What happens if two users have the same password? If you're just searching for a single string through the whole file, you're not ensuring that a password is correct for the given username.</p>
<p>For example, assume your file looks something like this:</p>
<pre><code>username1,password1
username2,password2
username3,password3
</code></pre>
<p>Your parsing code should open and read the file, and check for containment without searching the whole file every time:</p>
<pre><code>users = {}

with open("helloworld.txt") as f3:
    for line in f3:
        name, password = line.split(",")
        users[name] = password.strip()

user = input("Enter login name: ")

if user in users:
    passw = input("Enter password: ")
    print()

    if passw == users[user]:
        print("Login successful!")

    else:
        print("Bad password")

else:
    print("Bad username")
</code></pre>
<p>Note that I changed your file open to use a <a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/" rel="nofollow noreferrer">context manager</a> (the keyword <code>with</code>). You should do this for more reliable resource management. You could also make further improvements by make the dictionary generation a <a href="https://stackoverflow.com/a/14507637/2615940">dictionary comprehension</a>, and possibly by using exceptions to handle the dictionary checking instead of <code>if X in Y</code>:</p>
<pre><code>with open("helloworld.txt") as f3:
    pairs = (line.split(",") for line in f3)
    users = {name:password.strip() for name, password in pairs}

user = input("Enter login name: ")
passw = input("Enter password: ")

try:
    if passw == users[user]:
        print("Login successful!")
    else:
        print("Bad password")
except KeyError:
    print("Bad username")
</code></pre>
<p>You could even condense the user/password dictionary creation into a single comprehension, but I think that hampers readability significantly without any benefit.</p>
</div>
<div class="post-text" itemprop="text">
<p>The reason you're having the problem is this:</p>
<pre><code>if user in f3.read() and passw in f3.read():
</code></pre>
<p>when you use <code>f3.read()</code> for the first time it will move the pointer to the end and you won't be able to read it again without reopening.</p>
<p>So, you can read and parse it the first time you read the file, something like this:</p>
<pre><code>import ast
# since you're storing the credentials in a dict format
# ast.literal_eval can be used to parse the str to dict
creds = ast.literal_eval(f3.read())
if user in creds and creds[user] == passw:
    #login success 
</code></pre>
<p>Another way of re-reading file contents without reopening it would be to call <code>f3.seek(0)</code> before calling <code>f3.read()</code>. That'll move the pointer to start again but the above is better for your case.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is better to use the "with" statement while you read and write data into a file like so:</p>
<pre><code>with open("helloworld.txt","r") as f3:
    # Read user data
    user_data = f3.read()

    # Verify username and password are right
</code></pre>
<p>The with statement gives better exception handling and automatically closes the file and does any clean up necessary</p>
</div>
<span class="comment-copy"><code>read()</code> only works the first time you do it like that.</span>
<span class="comment-copy">If you are saving all the usernames and passwords in dictionary form you might consider saving it as a json file and loading it into a dictionary so that you can just load the file and check if the username exists and if so, if the password is correct. <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">docs.python.org/3/library/json.html</a></span>
