<div class="post-text" itemprop="text">
<p>In python, the method is:</p>
<pre><code>socket.recv(bufsize[, flags])
</code></pre>
<p>In C, the method is:</p>
<pre><code>int recv( _In_ SOCKET s, _Out_ char *buf, _In_ int len, _In_ int flags)
</code></pre>
<p><strong>What is the buffer here in these two method?</strong></p>
<p>I thought that it was the <code>receive window size</code> or <code>receive buffer</code> if I create a <code>TCP</code> socket. But when I captured the test tcp messages I found I was wrong.</p>
<p>I guess the buffer is the socket buffer. When the tcp messages are coming and first come into <code>tcp's buffer</code>(in the transport layer). And then the tcp's receive window begins to slide for receiving data and deliver them to the <code>socket buffer</code>(the real buffer in two methods above) if the messages are correct. Finally the data is delivered to app.</p>
<p>Am I right?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are 2 types of buffer here:</p>
<ol>
<li>The buffer mentioned in <code>recv()</code> is in the user space which is in the running process's memory.</li>
<li>The kernel also maintains a buffer in kernel space. When you call <code>recv()</code>, the data will be copied from kernel space to user space.</li>
</ol>
</div>
<span class="comment-copy">The C <i>function</i> corresponds to the Python <a href="https://docs.python.org/3/library/socket.html#socket.socket.recv_into" rel="nofollow noreferrer"><code>recv_into</code></a></span>
<span class="comment-copy">@AnttiHaapala Great but what is the difference between recv() and recv_into()? One uses the system buffer and another uses the buffer created by myself?</span>
