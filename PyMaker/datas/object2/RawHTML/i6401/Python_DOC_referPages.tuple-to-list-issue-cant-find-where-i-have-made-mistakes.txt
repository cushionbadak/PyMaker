<div class="post-text" itemprop="text">
<p>For file:</p>
<pre><code>Year  Grade
2000  100
2002  95
2001  88
2012  99
2000  66
</code></pre>
<p>and so forth, I have created a function that would calculate the average of grade of each following year. However, what I found was that instead of getting a list at the very end, I am continuously getting a tuple. </p>
<p>I have to get a list instead of tuple to pass the assertion test. </p>
<pre><code> years, average_grades = [],[]
    d = {}

with open(file,'r') as f:
    next(f)
    for line in f:
        year, grade = (s.strip() for s in line.split(','))
        if year in d:
            d[year][0] += int(grade)
            d[year][1] += 1
        else:
            d[year] = [int(grade),1]

    for year, grades in d.items():
        years.append(int(year))
        average_grades.append(float(grades[0]) / grades[1])
    years, average_grades = zip(*sorted(zip(years, average_grades), key= lambda p: p[0]))

    return years, average_grades
</code></pre>
<p>This function actually gives me</p>
<p>Year,  Grade
2000,  83
2001,  88
2002,  95
2012,  99</p>
<p>Something similar to this. It gives me the average of each year. However, it should be in orderly fashion (according to years), so I have done the last step. </p>
<p>Should pass this:</p>
<p>years_answer = [i+2000 for i in range(0,5)]
    assert_equal(years, years_answer)</p>
<p>The error I am getting:</p>
<pre><code>AssertionError: (2000, 2001, 2002, 2003, 2004, 2005, 2006[62 chars]2017) != [2000, 2001, 2002, 2003, 2004, 2005, 2006[62 chars]2017]
</code></pre>
<p>Any suggestions in fixing such problems? </p>
</div>
<div class="post-text" itemprop="text">
<p>Choose one of the following:-<br/>
 1. <code>return list(years),list(average_grades)</code> in place of <code>return years, average_grades</code><br/>
 2. Use <code>assert_equal(list(years), years_answer)</code><br/>
 3. Use <code>assert_equal(years, tuple(years_answer))</code><br/>
 4. Use <code>years_answer = (i+2000 for i in range(0,5))</code><br/> </p>
<p>Separately I don't understand your statement <code>This function actually gives me: Year, Grade 2000, 83 2001, 88 2002, 95 2012, 99</code>. As per the code and the error in OP function actually gives you <code>year=(2000,2001,2002...)</code> and <code>average_grades=(83,88,95...)</code></p>
<p><strong>Let's understand</strong></p>
<pre><code>years, average_grades = zip(*sorted(zip(years, average_grades), key= lambda p: p[0]))
</code></pre>
<p>First let us see what zip <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">does</a>. Let us split the above statement into smaller steps...</p>
<pre><code>years=[2001,2000,2002...]
average_grades=[88,83,95...]
it=zip(years, average_grades)
</code></pre>
<p>at the end of <code>it</code> is iterator on tuples.</p>
<pre><code>   list(it)=[(2001,88), (2000,83),(2002,95)...]  #State of variable
</code></pre>
<p>after sorting..</p>
<pre><code>st=sorted(it, key= lambda p: p[0])              #sorted returns a list
st=[(2000,83), (2001,88), (2002,95)...]         #State of variable
</code></pre>
<p>now re-zip the tuples..</p>
<pre><code>ft=zip(*st)                                     #Note that zip takes only multiple arguments thus we need to splay the list using *
list(ft)=[(2000,2001,2002...),(83,88,95...)]    #State of variable
</code></pre>
<p>Now finally when you do...</p>
<pre><code>years,average_grades=ft
years=(2000,2001,2002...)         #State of variable
average_grades=(83,88,95...)      #State of variable
</code></pre>
<p>At this point <code>years</code> and <code>average_grades</code> are tuples not lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to change the final line that <code>returns</code> <code>tuples</code>:</p>
<pre><code>return years, average_grades
</code></pre>
<p>to one where they are explicitly converted to <code>lists</code>:</p>
<pre><code>return list(years), list(average_grades)
</code></pre>
<p>This will work as <code>zip()</code> <code>returns</code> an <code>iterator</code> of <strong><code>tuples</code></strong> when what you want is <code>lists</code>. We know this from <a href="https://docs.python.org/3.4/library/functions.html#zip" rel="nofollow noreferrer"><code>the documentation</code></a>:</p>
<blockquote>
<p>zip(*iterables)</p>
<p>Make an iterator that aggregates elements from each of the iterables.</p>
</blockquote>
</div>
<span class="comment-copy">It's returning a <code>tuple</code> because you explicitly <i>return a tuple</i>, that's what <code>return years, average_grades</code> means... More importantly, what is the <i>output you need</i>? Is it ust <code>return [years, average_grades]</code>?</span>
<span class="comment-copy">Are there any good way to return lists instead of tuples, while ensuring calculations to be true?</span>
<span class="comment-copy">Huh? Again, I have no idea what output you want, but just going by your code, if you wanted to return a list you just need to <code>return [years, average_grades]</code>, note, that is a <i>list literal</i>. If you have just commas, that is a tuple...</span>
<span class="comment-copy">Try.. <code>return list(years),list(average_grades)</code>. Note that <i>zip</i> always returns tuples. This makes sure <code>years</code> is <code>[2000,2001...]</code> instead of <code>(2000,2001,...)</code></span>
<span class="comment-copy">[years, average_grades] does give me list, but what again causes a problem is it doesn't go through calculations of average grades for every other element other than the first one, which is 2000.</span>
<span class="comment-copy">Thank you for going through step by step. I am not familiar with python and didn't really know that zip results in tuples.</span>
