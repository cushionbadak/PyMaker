<div class="post-text" itemprop="text">
<p>I'm trying to understand how ORMs are able to resolve table columns via a class attribute without explicitly providing table and column names.</p>
<pre><code>from orm import Column

class Car(Model):
    id = Column()
</code></pre>
<p>Queries then are able to do this:</p>
<pre><code>Car.select().where(Car.id == 7)
</code></pre>
<p>I understand that Column defines a method for the <code>__eq__</code> operator, but how would a column instance know it is referring to class <code>Car</code> and attribute <code>id</code> (assuming those are used for table and column names by default)?</p>
<p>I'm learning a lot about python by digging into how ORM libs work!</p>
</div>
<div class="post-text" itemprop="text">
<p>In SqlAlchemy and DJango ORM, the base class (<code>Model</code> here) is tie to a metaclass or a factory method (like <code>__new__</code>) which performs introspection. </p>
<p>Here is how you can reproduce with a function (simpler solution):</p>
<pre><code>class Model():
    pass


class Column():
    def __init__(self, name=None):
        self.name = name


def setup_class(cls):
    for name, value in cls.__dict__.items():
        if isinstance(value, Column):
            attr = getattr(cls, name)
            attr.name = attr.name or name
</code></pre>
<p>This <code>setup_class</code> function introspect the <em>cls</em> class and setup the <em>name</em> attribute if it is empty or <code>None</code>, for instance:</p>
<pre><code>class Car(Model):
    id = Column()


from pprint import pprint
pprint(Car.id.name)
# -&gt; None

setup_class(Car)
pprint(Car.id.name)
# -&gt; 'id'
</code></pre>
<p><strong>Edit</strong></p>
<p>implementation example using metaclass:</p>
<pre><code>class Column():
    def __init__(self, name=None):
        self.name = name


class MyMeta(type):
    def __new__(cls, name, bases, attrs):
        for name, col in attrs.items():
            if isinstance(col, Column):
                col.name = col.name or name
        return super(MyMeta, cls).__new__(cls, name, bases, attrs)


class Model(metaclass=MyMeta):
    pass


class Car(Model):
    id = Column()


import pprint
pprint.pprint(Car.id.name)
# -&gt; 'id'
</code></pre>
<p>Of course, that's not enough. You have to understand that <code>Column</code> is a <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor</a>. This descriptor is used to build the SQL queries. </p>
</div>
<span class="comment-copy">I knew I was missing some magic. Had never encountered metaclasses before. Thanks Laurent!</span>
