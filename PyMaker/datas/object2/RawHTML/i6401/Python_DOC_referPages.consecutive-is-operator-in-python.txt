<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/25103085/chaining-is-operators">Chaining “is” operators</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>Can somebody explain this for me?</p>
<pre><code>&gt;&gt;&gt; None is None is None
True
&gt;&gt;&gt; (None is None) is None
False
</code></pre>
<p>Doesn't the 'is' operator take 2 operands, compare objects from the left, and return Boolean?</p>
</div>
<div class="post-text" itemprop="text">
<p>Because it is being interpreted as a <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">chained comparison</a>:</p>
<pre><code>comparison    ::=  or_expr ( comp_operator or_expr )*
comp_operator ::=  "&lt;" | "&gt;" | "==" | "&gt;=" | "&lt;=" | "!="
                   | "is" ["not"] | ["not"] "in"
</code></pre>
<blockquote>
<p>Comparisons can be chained arbitrarily, e.g., <code>x &lt; y &lt;= z</code> is equivalent
  to <code>x &lt; y and y &lt;= z</code>, except that y is evaluated only once (but in both
  cases z is not evaluated at all when <code>x &lt; y</code> is found to be false).</p>
<p>Formally, if <code>a, b, c, …, y, z</code> are expressions and <code>op1, op2, …, opN</code> are
  comparison operators, then <code>a op1 b op2 c ... y opN z</code> is equivalent to
  <code>a op1 b and b op2 c and ... y opN z</code>, except that each expression is
  evaluated at most once.</p>
</blockquote>
<p>Thus, since <code>is</code> is a comparison operator, your first expression is equivalent to:</p>
<pre><code>None is None and None is None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Compare with <code>2 &lt; 3 &lt; 4</code>.</p>
<p>Is the 2nd None the same as the 1st None? Yes. Is the 3rd same as the 2nd? Yes.</p>
<p>OTOH, <code>(True) is None</code> is clearly False. The parentheses broke the chaining.</p>
<p>Evaluating <code>lo &lt; n &lt; hi</code> is a common python idiom, and that doesn't make you worried about an intermediate result of <code>True &lt; 4</code>. Evaluating <code>x is y is z</code> is less common, but for your singleton <code>None</code> the three objects are identical.</p>
</div>
<span class="comment-copy">Not exactly a duplicate, the other question implies that one knows the chained expression feature and asks if it is applicable to <code>is</code>.</span>
<span class="comment-copy">@FerdinandBeyer mm, I leave it up to you if you want to re-open it. Frequently, people will dupe-target the famous <a href="https://stackoverflow.com/questions/1132941/least-astonishment-and-the-mutable-default-argument">Least Astonishment” and the Mutable Default Argument</a> when another questions is really asking about <i>unexplained</i> behavior they are seeing as a result of it. I bet there are other potential duplicates, though.</span>
<span class="comment-copy">Thanks for letting me know. I admit this is a duplicate, but I really couldn't find those article or references, so I had to ask.</span>
<span class="comment-copy">@juanpa.arrivillaga fine with me</span>
<span class="comment-copy">@vbstb: no worries, without knowing the term "chained expression", finding references to this feature is pretty hard.</span>
<span class="comment-copy">How did this get downvoted?</span>
<span class="comment-copy">@MadPhysicist probably because it was a duplicate. I probably should have known.</span>
<span class="comment-copy">Does this mean that <code>None is not 5 &lt; 10</code> will be <code>True</code> as well, since mixing comparison operators if fine?</span>
<span class="comment-copy">@MadPhysicist yep</span>
<span class="comment-copy">Thanks. TIL....</span>
<span class="comment-copy">This does not explain anything. Why is this the case? Just because some other, unrelated, operator has a similar behavior?</span>
