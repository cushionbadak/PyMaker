<div class="post-text" itemprop="text">
<p>I am trying to write a program that takes a file that has a list of numbers and use each of these numbers to subset a part of a string. When I try to call my function (below) I get the error:</p>
<pre><code>TypeError: unsupported operand type(s) for -: 'str' and 'int'
</code></pre>
<p>I tried changing the <code>i</code> in the for loop to <code>int(i)</code> in case, for some reason, <code>i</code> wasn't an integer but that resulted in the following error:</p>
<pre><code>ValueError: invalid literal for int() with base 10: ''
</code></pre>
<p>Code:</p>
<pre><code>#Function Collects Sequences and Writes to a Files
def gen_insertion_seq(index, seq, gene):
    output = open("%s_insertion_seq.txt" % gene, 'w')
    indices = index.read()
    sequence = seq.read()
    for i in indices:
        site = sequence[i-9:i+15]
        output.write(site + '\n')

#Open Index Files
shaker_index = open("212_index.txt")
kir2_index = open("214_index.txt")
asic1a_index = open("216_index.txt")
nachra7_index = open("252_index.txt")

#Open Sequence Files
shaker_seq = open("212_seq.txt")
kir2_seq = open("214_seq.txt")
asic1a_seq = open("216_seq.txt")
nachra7_seq = open("252_seq.txt")
#Call function on Index and Sequence Files - Should output list of generated Sequences for insertion sites.
#Must hand check first couple
gen_insertion_seq(shaker_index, shaker_seq, 'shaker')
</code></pre>
<p>Sample input files:</p>
<p><strong>212_index.txt</strong></p>
<pre><code>1312
210
633
696
1475
637
1198
645
1504
361
651
...
</code></pre>
<p><strong>212_seq.txt</strong></p>
<pre><code>ATGGCCGCCGTGGCACTGCGAGAACAACAGCTCCAACGAAATAGTCTGGATGGATACGGTTCACTGCCTAAACTGTCTAGCCAAGACGAAGAAGGTGGCGCCGGCCATGGCTTCGGTGGGGGC
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The errors in your code are caused by the fact that <a href="https://docs.python.org/3/library/io.html#io.TextIOBase.read" rel="nofollow noreferrer"><code>read</code></a> does not do quite what you seem to expect. <a href="https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects" rel="nofollow noreferrer">Called without parameters</a>, it reads the entire file into a string. You then iterate over the characters in the string instead of the numbers in the file. The <a href="https://docs.python.org/3/library/exceptions.html#TypeError" rel="nofollow noreferrer"><code>TypeError</code></a> happens when you do <code>'1' - 9</code> in the index to the sequence.</p>
<p>Your intuition to convert the iterated values to <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer"><code>int</code></a> is basically correct. However, since you are still iterating over characters, you get <code>int('1')</code>, <code>int('3')</code>, <code>int('1')</code>, <code>int('2')</code>, followed by a <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="nofollow noreferrer"><code>ValueError</code></a> from <code>int('\n')</code>. <code>read</code> reads in the entire file as-is, newlines and all.</p>
<p>Fortunately, the <a href="https://docs.python.org/3/glossary.html#term-file-object" rel="nofollow noreferrer">file object</a> is <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer">iterable</a> over the lines in the file. This means that you can do something like <code>for line in file: ...</code>, and <code>line</code> will take on the string value of each index you want to parse. It has the added bonus that line endings are stripped from the line, meaning that you could pass it directly into <code>int</code> with no further modification, for example.</p>
<p>There are a number of additional improvements you can make to your code, including the corrections that would make it work properly.</p>
<ol>
<li><p>As per @Acccumulation's advice, open files in a <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="nofollow noreferrer"><code>with</code></a> block to ensure that they get cleaned up properly if the program crashes, e.g. from an I/O error. It will also close the file automatically when the block ends, which is something you are currently not doing at all (but should be)</p></li>
<li><p>Conceptually, there is no need for you to pass around file objects at all. You only use each one in one place for one purpose. I would even extend this to recommend that you write a small function to parse each file type into a usable format and pass that around instead.</p></li>
<li><p>Files are iterable by line in Python. This is especially handy for your index files, which are a very line-oriented format. You do not need to do a full <code>read</code> at all, and can save a couple of steps from @MaximTitarenko's comment.</p></li>
<li><p>You can use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> directly on a file to combine any sequences that have line breaks in them.</p></li>
</ol>
<p>Combining all that advice, you could do the following:</p>
<pre><code>def read_indices(fname):
    with open(fname, 'r') as file:
        return [int(index) for index in file]

def read_sequence(fname):
    with open(fname, 'r') as file:
        return ''.join(file)
</code></pre>
<p>Since files are iterables of strings, you can use them in <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a> and string join operations like that. The rest of your code will now look much cleaner:</p>
<pre>
def gen_insertion_seq(index, seq, gene):
    indices = read_indices(index)
    sequence = read_sequence(seq)
    with open("%s_insertion_seq.txt" % gene, 'w') as output:
        for i in indices:
            site = sequence[i-9:i+15]
            output.write(site + '\n')

gen_insertion_seq('212_index.txt', '212_seq.txt', 'shaker')
gen_insertion_seq('214_index.txt', '214_seq.txt', 'kir2')
gen_insertion_seq('216_index.txt', '216_seq.txt', 'asic1a')
gen_insertion_seq('252_index.txt', '252_seq.txt', 'nachra7')
</pre>
<p>Your main function is now easier to understand because it focuses only on the sequences and not on things like I/O and parsing. You also don't have a bunch of open file handles floating around, waiting for an error. In fact, the file operations are all self contained, away from the real task.</p>
<p>If you had sequences (<a href="https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range" rel="nofollow noreferrer">in the Python sense</a>) of file IDs and gene names, you could further simplify the call to your function with a loop:</p>
<pre><code>for id, gene in zip((212, 214, 216, 252), ('shaker', 'kir2', 'asic1a', 'nachra7')):
    gen_insertion_seq('%d_index.txt' % id, '%d_seq.txt' % id, gene)
</code></pre>
<p>PS. The <a href="https://docs.python.org/3/tutorial/inputoutput.html#input-and-output" rel="nofollow noreferrer">I/O</a> section in the Python tutorial is really nice. The section on <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">files</a> may be of especial interest to you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try inputting <code>'shaker'</code> with double quotes, <code>"shaker"</code>. Or, use str(gene) in your function.</p>
<p>OK, I just realized it's python so quotes thing shouldn't matter, I think</p>
<p>Or <code>open("{}_insertion_seq.txt".format(gene), 'w')</code></p>
<p>If it's at the write, change <code>output.write(site + '\n')</code>
to <code>output.write(str(site) + '\n')</code></p>
</div>
<span class="comment-copy">Do you understand what <code>read</code> does/returns?</span>
<span class="comment-copy">I guess not prior to adding that I wasn't able to get any of the contents of my text files to print if I called them within my function. Does it not return the contents of the variable?</span>
<span class="comment-copy">Can you show that too ?</span>
<span class="comment-copy">How actually do you store numbers in index-files?</span>
<span class="comment-copy">It's generally a good idea to have files open as little as possible, and to use the <code>with</code> syntax. You can pass the names of the files to the function, open them in the function, read them, and then immediately close them.</span>
<span class="comment-copy">thanks for your detailed response! I will go through the python tutorials and improve my code. Again, really appreciate it.</span>
<span class="comment-copy">@Willow. If this answer helps you, I would recommend selecting it. It will mark your question as answered and give you a couple of rep points (and me too :).</span>
<span class="comment-copy">Great! Sorry, I am to all this (obviously ;) )</span>
<span class="comment-copy">You're looking at the wrong place. unsupported operand type is happening for the variable <code>i</code> which depends on the content of his file.</span>
<span class="comment-copy">@anupsabraham riiight ok. Edited</span>
<span class="comment-copy">@anupsabraham that's what happens when you answer too quickly from the loo</span>
