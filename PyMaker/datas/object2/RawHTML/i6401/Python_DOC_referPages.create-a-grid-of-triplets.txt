<div class="post-text" itemprop="text">
<p>I am trying to create a grid that lists all triplets that sum to 1, discretized at 0.01. Here is what I have tried, without much luck. </p>
<h1>First try</h1>
<pre><code>import numpy as np

w1 = np.arange(0.0, 1.0, 0.01)
w2 = np.arange(0.0, 1.0, 0.01)
w3 = np.arange(0.0, 1.0, 0.01)

x, y,z = np.meshgrid(w1, w2, w3)

a = np.meshgrid[0:1:100j, 0:1:100j, 0:1:100j]
</code></pre>
<h1>Another try:</h1>
<pre><code>grid = []
for i in range(100):
    grid.append([])  # Question: now that I have a list of lists, how to fill this with values?

for entry in grid:
    entry = ???
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about taking all possible values of <code>x</code> and <code>y</code> and then computing what the appropriate value of <code>z</code> would be:</p>
<pre><code>import itertools
import numpy as np

grid = np.array([(x, y, 1.0 - x - y) for (x, y) in
                 itertools.product(np.arange(0, 1.01, 0.01), repeat=2)
                 if x + y &lt;= 1.])
</code></pre>
<p>This uses <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to get the cartesian product of <code>x</code> and <code>y</code>, although <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.meshgrid.html" rel="nofollow noreferrer"><code>np.meshgrid</code></a> would work just as well.</p>
<p>We can show that the resulting triples sum to 1 (modulo some rounding errors):</p>
<pre><code>&gt;&gt;&gt; set(grid.sum(axis=1))
{0.99999999999999989, 1.0}
</code></pre>
<p>Here's a pure <code>numpy</code> version of the same approach; I'm using <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.mgrid.html" rel="nofollow noreferrer"><code>np.mgrid</code></a> instead of <code>meshgrid</code> because it gives me back a single array instead of a tuple of two arrays:</p>
<pre><code>xy = np.mgrid[0:1.01:0.01, 0:1.01:0.01]
z = 1. - xy.sum(axis=0)
grid2 = np.concatenate([xy[:, z &gt;= 0.],
                        np.atleast_2d(z[z &gt;= 0.])])
</code></pre>
<p>Here's the same sanity check (<code>grid2</code> is transposed with respect to <code>grid</code>; that is, their shapes are <code>(3, 5151)</code> and <code>(5151, 3)</code>, respectively):</p>
<pre><code>&gt;&gt;&gt; set(grid2.sum(axis=0))
{1.0}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to iterate 100**3 times. Here's a plain Python solution without any <code>if</code>:</p>
<pre><code>[(x, y, 100 - x - y) for x in range(101) for y in range(101 - x)]
</code></pre>
<p>It outputs:</p>
<pre><code>[(0, 0, 100), (0, 1, 99), (0, 2, 98), (0, 3, 97), (0, 4, 96), (0, 5, 95), (0, 6, 94), (0, 7, 93), (0, 8, 92), (0, 9, 91), ..., (95, 1, 4), (95, 2, 3), (95, 3, 2), (95, 4, 1), (95, 5, 0), (96, 0, 4), (96, 1, 3), (96, 2, 2), (96, 3, 1), (96, 4, 0), (97, 0, 3), (97, 1, 2), (97, 2, 1), (97, 3, 0), (98, 0, 2), (98, 1, 1), (98, 2, 0), (99, 0, 1), (99, 1, 0), (100, 0, 0)]
</code></pre>
<p>You only need to divide by <code>100.0</code> and put the triplets into an <code>np.array</code>.</p>
</div>
<span class="comment-copy">How would you have a grid of triplets? I mean, which would be your two axis? Would "triplets = {(0.0, 0.0, 1.0), (0.0, 0.01, 0.99), ...}` be acceptable?</span>
<span class="comment-copy">Yes, that is exactly it.</span>
<span class="comment-copy">I works perfectly! Can you show how it would be using meshgrid? I strugled so much on that...</span>
<span class="comment-copy">@EricDuminil good point!  We could just use <code>repeat=2</code> on <code>itertools.product</code>.</span>
