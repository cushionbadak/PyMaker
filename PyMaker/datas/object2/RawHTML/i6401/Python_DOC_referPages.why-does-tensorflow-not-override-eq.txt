<div class="post-text" itemprop="text">
<p>Tensorflow overrides multiple operators for the <code>Tensor</code> class, <a href="https://stackoverflow.com/questions/35094899/tensorflow-operator-overloading">including <code>__lt__</code>, <code>__ge__</code></a>, etc.</p>
<p>However, the implementation for <code>__eq__</code> <a href="https://github.com/tensorflow/tensorflow/blob/27767d8e9c1325979cf32ff5b81c10df9006fd57/tensorflow/python/ops/math_ops.py#L1164-L1167" rel="nofollow noreferrer">seems to be conspicuously absent</a>:</p>
<pre class="lang-py prettyprint-override"><code>ops.Tensor._override_operator("__lt__", gen_math_ops.less)
ops.Tensor._override_operator("__le__", gen_math_ops.less_equal)
ops.Tensor._override_operator("__gt__", gen_math_ops.greater)
ops.Tensor._override_operator("__ge__", gen_math_ops.greater_equal)
</code></pre>
<p>Why does <code>==</code> for tensorflow's tensors not behave the same way as for numpy arrays?</p>
<p>Code example:</p>
<pre><code>a = tf.constant([1,2])
b = tf.constant([3,4])
a == b
&gt;&gt;&gt; False
a &lt; b
&gt;&gt;&gt; &lt;tf.Tensor 'Less:0' shape=(2,) dtype=bool&gt;
</code></pre>
<p>With numpy, on the other hand:</p>
<pre><code>a = np.asarray([1,2])
b = np.asarray([3, 4])
a == b
&gt;&gt;&gt; array([False, False], dtype=bool)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Tensors <em>do</em> implement <code>__eq__</code>, but <a href="https://github.com/tensorflow/tensorflow/blob/v1.3.1/tensorflow/python/framework/ops.py#L448-L450" rel="nofollow noreferrer">the implementation only tests for identity</a>. I found <a href="https://github.com/tensorflow/tensorflow/issues/9359" rel="nofollow noreferrer">this GitHub issue</a>, which explains why tensors test for identity, and do not broadcast:</p>
<blockquote>
<p>This may be a complication of fact that tensors can be used as keys in dictionaries, which I believe use <code>==</code> to find the matching object with the same hash</p>
</blockquote>
<p>The commenter is correct; if <code>__eq__</code> was overloaded to broadcast then you could not use tensors as keys in a dictionary. Objects that define a <code>__hash__</code> method (required if you want to use such objects as keys in a dictionary), <strong>must</strong> produce the same hash value for two objects that are equal; see the <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noreferrer"><code>__hash__</code> method</a>:</p>
<blockquote>
<p>The only required property is that objects which compare equal have the same hash value</p>
</blockquote>
<p>but broadcasting would produce a 'true' tensor object for objects with different hash values.</p>
<p>(the speculation that <code>__eq__</code> would break boolean testing is wrong; boolean testing uses <a href="https://docs.python.org/3/reference/datamodel.html#object.__bool__" rel="nofollow noreferrer"><code>__bool__</code></a>, which tensors do implement).</p>
<p>If you need to make element-wise equality tests on tensors, you can use the <a href="https://www.tensorflow.org/api_docs/python/tf/equal" rel="nofollow noreferrer"><code>tf.equal()</code></a> and <a href="https://www.tensorflow.org/api_docs/python/tf/not_equal" rel="nofollow noreferrer"><code>tf.not_equal()</code></a> functions.</p>
</div>
<span class="comment-copy">Are you basing the assertion that <code>__eq__</code> is not defined solely on those lines? Because I see <a href="https://github.com/tensorflow/tensorflow/blob/27767d8e9c1325979cf32ff5b81c10df9006fd57/tensorflow/python/ops/math_ops.py#L875-L935" rel="nofollow noreferrer">other code that handles operator overrides in a generic manner</a> for example.</span>
<span class="comment-copy"><code>import tensorflow as tf</code>, then <code>__eq__ in vars(tf.Tensor)</code> produces <code>True</code>, so it does define the hook. It is defined <a href="https://github.com/tensorflow/tensorflow/blob/27767d8e9c1325979cf32ff5b81c10df9006fd57/tensorflow/python/framework/ops.py#L489-L491" rel="nofollow noreferrer">directly on the class</a>.</span>
<span class="comment-copy">@MartijnPieters No, my observations were based on my code not doing what I expected it to do. The links were produced after some digging. Also, I know that equality of tensors is defined. However, it is non-compliant with <code>numpy</code> arrays. I hope the added code clarifies the question.</span>
<span class="comment-copy"><b>Why</b> should tensors broadcast when testing for equality? The project clearly made an explicit decision to test for identity instead.</span>
<span class="comment-copy">Yes, there is something special; I found a github issue that explains why.</span>
<span class="comment-copy">@musically_ut: well, <code>__eq__</code> is defined, explicitly, as an identity test.</span>
<span class="comment-copy">Wow! The design decision of using tensors as keys in the <code>feed_dict</code> leads to <code>__eq__</code> <i>not</i> being defined in the same way as for <code>numpy</code> for <code>tf.Tensors</code>!</span>
<span class="comment-copy">@user2357112: thanks for the additional info!</span>
