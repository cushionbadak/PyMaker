<div class="post-text" itemprop="text">
<p>These are equal in string value, but are they truly equal? What is going on where?</p>
<pre><code>import os

path_name1 = os.path.abspath(os.path.dirname(__file__))
path_name2 = os.path.dirname(os.path.abspath(__file__))

print(path_name1)
print(path_name2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/reference/import.html#__file__" rel="nofollow noreferrer">here</a>, the value of <code>__file__</code> is a string, which is set when module was imported by a loader. From <a href="https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module" rel="nofollow noreferrer">here</a> you can see that the value of <code>__file__</code> is </p>
<blockquote>
<p>The path to where the module data is stored (not set for built-in modules).</p>
</blockquote>
<p>Usually, the path is already the absolute path of the module. So, the line 4 of your code can be simplified to <code>path_name2 = os.path.dirname(__file__)</code>. Obviously, the line 3 of your code can be presented as <code>path_name1 = os.path.abspath(path_name2)</code> (let us ignore the order of execution for now).</p>
<p>The next thing is to see what does <code>dirname</code> do. In fact, you can view <code>dirname</code> as a wrapper of <code>os.path.split</code>, which splits a path into two parts: <code>(head, tail)</code>. <code>tail</code> is the last part of the given path and <code>head</code> is the rest of the given path. So, the <code>path_name2</code> is just the path of the directory containing the loaded file. Moreover, <code>path_name2</code> is a absolute path. Hence <code>os.path.abspath(path_name2)</code> is just the same with <code>path_name2</code>. So, <code>path_name1</code> is the same with <code>path_name2</code>.</p>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/3718657/674039">stackoverflow.com/q/3718657/674039</a></span>
<span class="comment-copy">Okay this makes sense, however how can line 4 be simplified to path_name2 = os.path.dirname(<b>file</b>).  That just seems to return a blank  output of &lt;class 'str'&gt; with a len of 0.  Though thanks to your answer I understand why os.path.dirname(os.path.abspath)) is what it is.</span>
<span class="comment-copy">If you put the code into a file, say "test.py", and execute it with command "python3 test.py", you will find that the output of "os.path.dirname(<b>file</b>)" is blank. However, if you open an python interpreter, and use "import test", you will find the output is not blank.</span>
