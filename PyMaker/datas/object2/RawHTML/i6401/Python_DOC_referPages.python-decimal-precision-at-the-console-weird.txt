<div class="post-text" itemprop="text">
<p>Having imported math and decimal in 3. I'm OK with the first output </p>
<pre><code>In[39]:  Decimal(sqrt(2))
Out[39]: Decimal('1.4142135623730951454746218587388284504413604736328125')
</code></pre>
<p>but then slightly flummoxed by </p>
<pre><code>In[40]:  Decimal(str(sqrt(2)))
Out[40]: Decimal('1.4142135623730951')
</code></pre>
<p>the really confused by... </p>
<pre><code>In[41}:  getcontext().prec=2

In[42]:  Decimal(str(sqrt(2)))
Out[42]: Decimal('1.4142135623730951')
</code></pre>
<p>Why isn't the output precision set to <code>2</code> for future <code>Decimal Out[]</code> lines after the <code>prec=2</code>?  I thought <code>Decimal()</code> casts the input whether float string or int as a decimal with the precision set?</p>
</div>
<div class="post-text" itemprop="text">
<p>As the docs say about the <code>Decimal()</code> constructor:</p>
<blockquote>
<p>The context precision does not affect how many digits are stored. That is determined exclusively by the number of digits in value. For example, Decimal('3.00000') records all five zeros even if the context precision is only three.</p>
</blockquote>
<p>One way to shed the excess precision is to apply the unary <code>+</code> operator to the result:</p>
<pre><code>&gt;&gt;&gt; decimal.Decimal(str(math.sqrt(2)))
Decimal('1.4142135623730951')
&gt;&gt;&gt; + decimal.Decimal(str(math.sqrt(2))) # note the leading "+"
Decimal('1.4')
</code></pre>
<p>Another is to use a context object's <code>.create_decimal()</code> method:</p>
<pre><code>&gt;&gt;&gt; decimal.getcontext().create_decimal(str(math.sqrt(2)))
Decimal('1.4')
</code></pre>
<p>As <code>create_decimal</code>'s docs say:</p>
<blockquote>
<p>Unlike the Decimal constructor, the context precision, rounding method, flags, and traps are applied to the conversion.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>The significance of a new <code>Decimal</code> is determined solely by the number of digits input. Context precision and rounding only come into play during arithmetic operations.</p>
</blockquote>
<p>Since you're not doing any arithmetic on <code>Decimal(str(sqrt(2)))</code>, it's not using the precision you set. You can fix this by adding a trivial arithmetic operation.</p>
<pre><code>In: Decimal(str(sqrt))) + 0
Out: Decimal('1.4')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Regarding part 2</strong> <code>str(v)</code> output of a float <code>v</code> shows the shortest representation for which <code>v == float(str(v))</code> is true.</p>
<p><a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">Python docs</a> say:</p>
<p>Many users are not aware of the approximation because of the way values are displayed. Python only prints a decimal approximation to the true decimal value of the binary approximation stored by the machine. On most machines, if Python were to print the true decimal value of the binary approximation stored for 0.1, it would have to display</p>
<pre><code>&gt;&gt;&gt; 0.1
0.1000000000000000055511151231257827021181583404541015625
</code></pre>
<p>That is more digits than most people find useful, so Python keeps the number of digits manageable by displaying a rounded value instead</p>
<pre><code>&gt;&gt;&gt; 1 / 10
0.1
</code></pre>
<p>Just remember, even though the printed result looks like the exact value of 1/10, the actual stored value is the nearest representable binary fraction.</p>
<p><strong>Regarding part 3</strong>, <a href="https://docs.python.org/2/library/decimal.html#decimal-objects" rel="nofollow noreferrer">Python docs</a> say:</p>
<p>The context precision does not affect how many digits are stored. That is determined exclusively by the number of digits in value. For example, Decimal('3.00000') records all five zeros even if the context precision is only three</p>
</div>
<span class="comment-copy">What do you see if you just write <code>str(sqrt(2))</code>?</span>
<span class="comment-copy">OK, thanks.  I had taken it as a casting of any decimal to the most recent precision specified.</span>
<span class="comment-copy">"The context precision does not affect how many digits are stored. That is determined exclusively by the number of digits in value. For example, Decimal('3.00000') records all five zeros even if the context precision is only three"    Thanks - I'd taken this to mean the variable maintains ("stores" &amp; "records") the full decimal expansion but will only use/print to the current precision.  e.g s=Decimal('0.1234567') getcontext().prec=2 print(s) ---&gt;&gt;  0.1   #even though s is maintained at full precision print(s*10) ---&gt;&gt; 1.0 getcontext().prec=5   print(s) ------&gt;&gt; 0.1234</span>
