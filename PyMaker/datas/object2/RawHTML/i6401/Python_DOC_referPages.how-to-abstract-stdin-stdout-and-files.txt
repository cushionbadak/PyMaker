<div class="post-text" itemprop="text">
<p>I'm trying to write a Python script which lets the user to switch between stdin/stdout and files for input/output. But I'm not sure if my implementation is correct:</p>
<pre class="lang-py prettyprint-override"><code>#!/usr/bin/python3

import fileinput
import sys

from contextlib import contextmanager
from contextlib import redirect_stdout


def foo(file):
    return ''.join([line for line in file])


@contextmanager
def run(input_file, output_file):
    stdin = '-' if input_file is None else input_file
    stdout = sys.stdout if output_file is None else open(output_file, 'w')
    with fileinput.input(stdin) as stdin, stdout:
        with redirect_stdout(stdout):
            print(foo(stdin))
</code></pre>
<ol>
<li>Is the code managing resources correctly?</li>
<li>How can I properly handle character encoding? I'd like to have everything in utf-8.</li>
<li>Is there any room for improvement in the above code?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I think you would need to do this way. You don't need to make <code>run()</code> itself a <code>@contextmanager</code>â€”all it needs to do is use one (or more, and both <code>fileinput.input</code> and <code>redirect_stdout</code> are ones already). I'm not sure why you're using <code>fileinput.input</code> since there appears to only be one input file involved.</p>
<pre><code>from contextlib import redirect_stdout
import fileinput
import sys

def foo(file):
    return ''.join([line for line in file])

def run(input_file, output_file):
    stdin = '-' if input_file is None else input_file
    stdout = sys.stdout if output_file is None else open(output_file, 'w')
    with fileinput.input(stdin) as stdin, redirect_stdout(stdout):
        print(foo(stdin))

run('input.txt', 'output.txt')
run('input.txt', None)
</code></pre>
</div>
<span class="comment-copy">Thanks for the info. I'm using <code>fileinput</code> because there might be more than one input file. The main objective is to make the script pipe-able. I'm not sure I understand your comment about <code>@contextmanager</code>. Are you saying that with the current implementation I don't need <code>@contextmanager</code>? And also would you please comment on character encoding?</span>
<span class="comment-copy">I meant that since <code>fileinput.input()</code> and <code>redirect_stdout()</code> are already both context managers, there's no need for you to also make <code>run()</code> one, too. As for encoding, if <code>stdout</code> is not being re-directed, you might have a problem depending on what the default encoding for <code>sys.stdout</code> is for your OS. For files, you might have to use <a href="https://docs.python.org/3/library/codecs.html#codecs.open" rel="nofollow noreferrer"><code>codecs.open()</code></a> to avoid encoding issues when reading and writing data from/to them depending on what they contain. Instead of asking hypothetical questions here, why don't you try running it and see.</span>
