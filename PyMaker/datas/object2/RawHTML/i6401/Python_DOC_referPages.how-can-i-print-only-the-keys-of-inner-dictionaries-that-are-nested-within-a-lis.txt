<div class="post-text" itemprop="text">
<p>Ideally, the result of the print would be:  </p>
<pre><code>- ainner  
- binner1  
- cinner2  
- dinner3
</code></pre>
<p>However I've only managed to print out the keys using <code>.keys()</code>.</p>
<pre><code>json_dict = {"key": "value", "key1": [{"binner": "inner_value"}, {"ainner1": "inner_value1"}, {"cinner": "inner_value"}, {"dinner1": "inner_value1"}]}

def pprint(a_dict):
    for k in a_dict["key1"]:
        print("-", k.keys())

pprint(json_dict)  
</code></pre>
<p>This results in:  </p>
<pre><code>- dict_keys(['binner'])
- dict_keys(['ainner1'])    
- dict_keys(['dinner1'])
- dict_keys(['cinner'])
</code></pre>
<p>I am looking for similar functionality as this:
<code>{print("- {}".format(k)) for k in sorted(a_dict)}</code> which works for a non-nested dictionary</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>json_dict = {"key": "value", "key1": [{"binner": "inner_value"}, {"ainner1": "inner_value1"}, {"cinner": "inner_value"}, {"dinner1": "inner_value1"}]}
new_data = sorted([list(i.keys())[0] for i in json_dict["key1"]])
</code></pre>
<p>Output:</p>
<pre><code>['ainner1', 'binner', 'cinner', 'dinner1']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you want to return is the name of the keys.</p>
<pre><code>json_dict = {"key": "value", "key1": [{"binner": "inner_value"},{"ainner1": "inner_value1"}]}

for i in json_dict['key1']:
    for x in i.keys():
        print (x)
</code></pre>
<p>It results in this</p>
<pre><code>binner
ainner1
</code></pre>
<p>You will need to iterate over .keys() to access keys name. </p>
</div>
<div class="post-text" itemprop="text">
<p>Once you <em>have</em> the object you want (<code>key1</code>'s value)</p>
<pre><code>a = [{"binner": "inner_value"}, {"ainner1": "inner_value1"},
     {"cinner": "inner_value"}, {"dinner1": "inner_value1"}]

import itertools
</code></pre>
<p>Get the keys from each dictionary</p>
<pre><code>b = map(dict.keys, a)
</code></pre>
<p>Flatten the list of <a href="https://docs.python.org/3/library/stdtypes.html#dict.keys" rel="nofollow noreferrer">key view objects</a></p>
<pre><code>c = itertools.chain.from_iterable(b)
</code></pre>
<p>sort</p>
<pre><code>d = sorted(c)
</code></pre>
<p>print</p>
<pre><code>fmt_s = '- {}'
for thing in d:
    print(fmt_s.format(thing))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code you posted does most of the job, changing <code>pprint</code> from:</p>
<pre><code>def pprint(a_dict):
    for k in a_dict["key1"]:
       print("-", k.keys())
</code></pre>
<p>to</p>
<pre><code>def pprint(a_dict):
    for k in a_dict["key1"]:
        print("-", list(k.keys())[0])
</code></pre>
<p>yields: </p>
<pre><code>- binner
- ainner1
- cinner
- dinner1
</code></pre>
</div>
<span class="comment-copy">You have four expected outputs listed; however, this dictionary could only provide two, namely "binner" and "ainner1". Could you clarify?</span>
<span class="comment-copy">@Ajax1234 Sure--I figured it was self-explanatory enough. I'll add another 2 inner-dicts to make it clear.</span>
<span class="comment-copy">Add a <code>sorted</code> (I am not the downvoter.)</span>
<span class="comment-copy">Presumably this is supposed to be <i>generalized</i>, not hardcoded  to work only for the OP's specific example.</span>
<span class="comment-copy"><code>keys()</code> is not able to be indexed</span>
<span class="comment-copy">@simonsays Please see my recent edit.</span>
