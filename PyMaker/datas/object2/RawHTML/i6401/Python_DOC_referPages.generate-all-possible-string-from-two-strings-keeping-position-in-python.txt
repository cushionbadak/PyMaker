<div class="post-text" itemprop="text">
<p>Given two words:</p>
<pre><code>AT
TC
</code></pre>
<p>I want to generate all possible <em>combinations</em> (not sure if combination applies here) that can be produced by replacing one by one character of those two strings, as a result:</p>
<pre><code>AT
TT
AC
TC
</code></pre>
<p><strong>Edit:</strong></p>
<p>I've tried:</p>
<pre><code>from itertools import product
ref = "ACGT"
snp = "TGCA"
prod = product(ref,snp)
for p in prod:
    print p
</code></pre>
<p>but the result is:</p>
<pre><code>('A', 'T')
('A', 'G')
('A', 'C')
('A', 'A')
('C', 'T')
('C', 'G')
('C', 'C')
('C', 'A')
('G', 'T')
('G', 'G')
('G', 'C')
('G', 'A')
('T', 'T')
('T', 'G')
('T', 'C')
('T', 'A')
</code></pre>
<p>Not what I'm looking for. I'm expecting something like (each result should be same lenght as input):</p>
<pre><code>ACGT
TCGT
AGGT
ACGA
....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for the <code>itertools.product</code> which you may use like:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; my_list = [ 'AT' , 'TC']

&gt;&gt;&gt; list(product(*my_list))
[('A', 'T'), ('A', 'C'), ('T', 'T'), ('T', 'C')]
</code></pre>
<p>To get these values as string, you may use a <em>list comprehension</em> as:</p>
<pre><code>&gt;&gt;&gt; [''.join(s) for s in product(*my_list)]
['AT', 'AC', 'TT', 'TC']
</code></pre>
<p><strong>Edit</strong> (Based on the edit in the question)</p>
<p>For the new example you shared , you should be using <code>zip</code> with the above <em>list comprehension</em> expression and <code>itertools.product</code> as:</p>
<pre><code>&gt;&gt;&gt; ref = "ACGT"
&gt;&gt;&gt; snp = "TGCA"

&gt;&gt;&gt; [''.join(s) for s in product(*zip(ref,snp))]
['ACGT', 'ACGA', 'ACCT', 'ACCA', 'AGGT', 'AGGA', 'AGCT', 'AGCA', 'TCGT', 'TCGA', 'TCCT', 'TCCA', 'TGGT', 'TGGA', 'TGCT', 'TGCA']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The following should solve your use case</p>
<pre><code>list(''.join(s) for s in list(itertools.product(*zip(a, b))))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider the case where there are two strings each of length four.  Imagine a bit mask of that same length (four).  Every possible bit mask should correspond to a valid selection from one of the strings.</p>
<p>So given:</p>
<pre><code>ABCD
zyxw
</code></pre>
<p>then here are the results:</p>
<pre><code>0000 -&gt; ABCD
0001 -&gt; ABCw
0010 -&gt; ABxD
0011 -&gt; ABxw
0100 -&gt; AyCD
0101 -&gt; AyCw
0110 -&gt; AyxD
0111 -&gt; Ayxw

   .... and so on
</code></pre>
<p>To generalize consider that n-strings generates all the numbers in base n up to the order of these string lengths.  (Not sure how you want to handle non-uniform string lengths; but the principle is the same, even if you add some sort of "NULL" padding which gets filtered out of the results; akin to how we conventionally filter leading zeroes from our normal decimal number representations).</p>
<p>I don't have time to write code for this right now.  But the approach would be to map each of these strings to a symbol (digit or character) and  iterate over the integer range as appropriate to your number strings and their lengths.  For example two strings of eight characters each is 2<strong>8 (256) while three strings of seven characters each would be 3</strong>7 (2187) and so on.</p>
<p>Convert each integer to its representation in your base and lookup the mapping to extract the character for that location from the value (string) stored at that key.  That's the same as you would use to convert integers into any base, take modulo n and shift until zero.</p>
</div>
<div class="post-text" itemprop="text">
<p>This should produce your desired output, where the characters from both strings are fixed in their positions:</p>
<pre><code>from itertools import product

ref = "ACGT"
snp = "TGCA"
for p in product(*zip(ref, snp)):
    ''.join(p)

'ACGT'
'ACGA'
'ACCT'
'ACCA'
'AGGT'
'AGGA'
'AGCT'
'AGCA'
'TCGT'
'TCGA'
'TCCT'
'TCCA'
'TGGT'
'TGGA'
'TGCT'
'TGCA'
</code></pre>
<p>You <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> the two sequences and iterate the cartesian product of the zipped pairs.</p>
</div>
<span class="comment-copy">Sounds like a job for <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product()</code></a>.</span>
<span class="comment-copy">product from itertools, but that's not what I was looking for. Actually what I want is the name of the thing I need to do, so I can check a mathematical background.</span>
<span class="comment-copy">Cartesian product</span>
<span class="comment-copy">Yeah, you need to transpose first. I think people may have misunderstood that because your original input example is equal to its transpose.</span>
<span class="comment-copy">lol ... wait you give examples with 2 letter words that gives you exactly what itertools.product gives you ... then when somone posts the product answer you post some other example and say thats not what you wanted without explaing at all what the expected output should be...</span>
<span class="comment-copy">lol you beat me :P</span>
<span class="comment-copy">actually, I've tried with a string lenght 4 and that's not what I expect, just edited the question</span>
<span class="comment-copy">can you explain a little bit how this work? how can I calculate the final quantity of the result?</span>
<span class="comment-copy">My answer is based on an erroneous interpretation of the question as it appeared be the OP made clarifying changes.</span>
<span class="comment-copy">its a good suggestion :) +1 ... im not sure this is equivelent ... but assuming the position of each character pair is locked then it should be ... its been a while since i took my bio informatics course</span>
