<div class="post-text" itemprop="text">
<pre><code>def merge(string1, string2):        
    print( "".join(i for j in zip(string1, string2) for i in j))
</code></pre>
<p>When I run <code>merge("big","small")</code> the output is <code>bsimga</code>, I want the code to output <code>bsimgall</code>.</p>
<p>How can I add the characters from both strings in an alternating fashion even if the strings are not the same length?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>zip()</code> will only produce pairs until the <em>shortest</em> iterable is exhausted. Use <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertool.zip_longest()</code></a> to iterate onwards and use a fill value to pad out the shorter string. Use an empty string to pad:</p>
<pre><code>from itertools import zip_longest

def merge(string1, string2):        
    print("".join(i for j in zip_longest(string1, string2, fillvalue='') for i in j))
</code></pre>
<p>You can leave the joining to <code>print()</code>:</p>
<pre><code>def merge(string1, string2):        
    print(*(i for j in zip_longest(string1, string2, fillvalue='') for i in j), sep='')
</code></pre>
<p>and you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable()</code></a> to flatten the result:</p>
<pre><code>from itertools import chain, zip_longest

def merge(string1, string2):        
    print(*chain.from_iterable(zip_longest(string1, string2, fillvalue='')), sep='')
</code></pre>
</div>
<span class="comment-copy">Thanks for the help.</span>
<span class="comment-copy">Glad to have been of help! Feel free to <a href="http://meta.stackexchange.com/questions/5234/how-does-accepting-an-answer-work">accept my answer</a> if you feel it was useful to you. :-)</span>
