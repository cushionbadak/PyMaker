<div class="post-text" itemprop="text">
<p>Using Python websocket-client along with multiprocessing.Pool I'm able to spawn 3 instances of the websocket-client with each connected to a different URL and writing the data to 3 separate dictionaries.</p>
<p>My goal is to have a 4th process running that would be able to READ the data from all 3 dictionaries as they are updated.</p>
<p>What is the best way to share data between these processes?</p>
<p>I've looked at the <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing-examples" rel="nofollow noreferrer">multiprocessing examples</a> but because a <a href="https://github.com/websocket-client/websocket-client#long-lived-connection" rel="nofollow noreferrer">websocket.WebSocketApp</a> takes a parameter that includes a function name to call (on_message) and it doesn't accept additional custom parameters, I'm not clear that the on_message functions would be able to be passed an instance of a <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Value" rel="nofollow noreferrer">Value</a> or Pipe, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>Multiprocessesing doesn't share data, so you would have to use a database of some sort.  </p>
<p>I use gevent and the gevent-websocket library.  </p>
<p><a href="https://pypi.python.org/pypi/gevent-websocket/" rel="nofollow noreferrer">https://pypi.python.org/pypi/gevent-websocket/</a></p>
<p>You have two options, you can just run as many as you want asynchronously, OR you can use the GIPC module which actually multiprocesses gevent for you with the added benefit of being able to talk to each other through read write pipes.  </p>
<p><a href="https://gehrcke.de/gipc/" rel="nofollow noreferrer">https://gehrcke.de/gipc/</a></p>
</div>
