<div class="post-text" itemprop="text">
<p>I have tuples in the form of:</p>
<pre><code>a[i][j][k]
</code></pre>
<p>k ∈ [0,1]
a is made up of objects T, that are included in a list teams.</p>
<p>What I want, is to swap the position of all pairs a[i][j][0] and a[i][j][1]. so:</p>
<pre><code>a[i][j][0], a[i][j][1] = a[i][j][1], a[i][j][0]
</code></pre>
<p>As a is a tuple, I understand it is immutable, which is the reason that this does not work:</p>
<pre><code>for i in range(0, len(teams)-1):
    for j in range(0, len(teams)/2):
        a[i][j][0],a[i][j][1] = a[i][j][1],a[i][j][0]
</code></pre>
<p>I have tried converting a to a list (L = list(a)), but without success.</p>
<p>Can somebody help me with suggestions? Sorry in case my nomenclatur is not perfect yet, this is my first question on SO :)</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>let's say <code>a</code> is a <code>tuple</code> of <code>tuple</code>s of <code>tuple</code>s.</p>
<p>I would</p>
<ul>
<li>convert it to a list of lists of lists</li>
<li>do whatever I want</li>
<li>convert it back to the original format if needed</li>
</ul>
<p>example:</p>
<pre><code>a = (((1,2),(3,4)),((10,20),(30,40)))

a_as_list = [[list(x) for x in b] for b in a]

print(a_as_list)

# now manipulate elements:

a_as_list[0][0] = [a_as_list[0][0][1],a_as_list[0][0][0]]

a_as_tuple = tuple(tuple(tuple(x) for x in b) for b in a_as_list)


print(a_as_tuple)
</code></pre>
<p>result:</p>
<pre><code>[[[1, 2], [3, 4]], [[10, 20], [30, 40]]]
(((2, 1), (3, 4)), ((10, 20), (30, 40)))
</code></pre>
<p>as you see, the tuples were converted to list, worked on, then converted back to tuples</p>
<p>EDIT: if <code>a</code> is a list of list of tuples you cannot do:</p>
<pre><code>a[i][j][0], a[i][j][1] = a[i][j][1], a[i][j][0]
</code></pre>
<p>but you can recreate the inner tuple:</p>
<pre><code>a[i][j] = a[i][j][1],a[i][j][0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can simply do this using Python's <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer">reversed</a></p>
<pre><code>a[j][k] = tuple(reversed(a[j][k]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h1>Problem</h1>
<p>Tuples are immutables indeed. <code>a</code> might be a list, or even a list of lists. So this code:</p>
<pre><code>L = list(a)
</code></pre>
<p>won't change anything. The problem appears to be that <code>a</code> is a list of lists of tuples. <code>a[i][j]</code> is a tuple, and it's not possible to assign new values to it:</p>
<pre><code>&gt;&gt;&gt; t = ('a', 'b')
&gt;&gt;&gt; t[0] = 'b'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'tuple' object does not support item assignment
</code></pre>
<h1>Possible solution</h1>
<p>If you're working with 3-D matrices, <a href="http://www.numpy.org/" rel="nofollow noreferrer"><code>numpy</code></a> could probably help you. It supports <a href="https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#advanced-indexing" rel="nofollow noreferrer">advanced indexing and slicing</a>:</p>
<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; table = np.arange(18).reshape(3,3,2)
&gt;&gt;&gt; table
array([[[ 0,  1],
        [ 2,  3],
        [ 4,  5]],

       [[ 6,  7],
        [ 8,  9],
        [10, 11]],

       [[12, 13],
        [14, 15],
        [16, 17]]])
&gt;&gt;&gt; table[:, :, [0, 1]] = table[:, :, [1, 0]]
&gt;&gt;&gt; table
array([[[ 1,  0],
        [ 3,  2],
        [ 5,  4]],

       [[ 7,  6],
        [ 9,  8],
        [11, 10]],

       [[13, 12],
        [15, 14],
        [17, 16]]])
</code></pre>
<p>Elements inside the matrix don't have to be numbers, they could be any objects:</p>
<pre><code>&gt;&gt;&gt; class T(str):
...   pass
... 
&gt;&gt;&gt; T('test')
'test'
&gt;&gt;&gt; m = np.array([[(T(1), T(2))],[(T(3), T(4))]])
&gt;&gt;&gt; m[:, :, [0, 1]] = m[:, :, [1, 0]]
&gt;&gt;&gt; m
array([[['2', '1']],

       [['4', '3']]], 
      dtype='&lt;U1')
</code></pre>
</div>
<span class="comment-copy">We would need to see a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. is <code>a</code> tuple of tuple of tuples?</span>
<span class="comment-copy">Where does <code>teams</code> come from?</span>
<span class="comment-copy">Is the outer most layer a tuple or a list?</span>
<span class="comment-copy">Thanks for the quick replies.The answer from @Jean-FrançoisFabre below has helped me solve the issue. My matrix is a list of a list of a tuple. I was able to transfer it to a list of a list of a list.</span>
<span class="comment-copy">Thanks. This was a quick fix with the existing quote I has.</span>
<span class="comment-copy">@MaximilianA.Graves see my edit, that should be enough</span>
<span class="comment-copy">Perfect. I guess I have to read and learn a lot more about the difference between lists and tuples. But this was already very helpful!</span>
<span class="comment-copy">I'll try this also. This really seems a lot more economical.</span>
<span class="comment-copy">Thanks so much. I will play around with numpy also!</span>
