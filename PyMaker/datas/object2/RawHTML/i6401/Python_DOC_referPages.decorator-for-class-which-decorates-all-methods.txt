<div class="post-text" itemprop="text">
<p>I want to write class decorator which for all non-magic methods, to decorate these methods. The idea is that to all methods of class print its name after call; I do not want decor all methods but only class. Decorator <code>log_method</code> works. I have problem with <code>log_class</code> decorator. There are no errors and no output.</p>
<pre><code>import traceback
import inspect

def log_method(func):
    def inner(*args, **kwargs):
        print("{}{}".format(int(len(traceback.extract_stack()) / 2) * " ", func.__name__))

        return func(*args, **kwargs)

    return inner

def log_class(cls):
    for m in dir(cls):
        if not m.startswith("__") and inspect.isfunction(getattr(cls, m)):
            m = log_method(m)
            print(m)
    return cls

@log_class
class Cls:
    def __init__(self):
        pass

    def A(self):
        self.B()

    def B(self):
        self.C()

    def C(self):
        pass


Cls().A()
"""
Excepted output:
A
 B
  C
"""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should rebind the method to the class object using <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer"><code>setattr</code></a> passing the method name <code>m</code>; assigning to the local name <code>m</code> like you've done, does nothing. </p>
<p>More so, you're currently passing <code>m</code>, a string, to <code>log_method</code>. Instead, you should pass the function object itself after retrieving via <code>getattr</code>:</p>
<pre><code>def log_method(func):
    def inner(*args, **kwargs):
        print("{}{}".format(int(len(traceback.extract_stack()) / 2) * " ", func.__name__))
        return func(*args, **kwargs)
    return inner

def log_class(cls):
    for m in dir(cls):
        if not m.startswith("__") and inspect.isfunction(getattr(cls, m)):
            setattr(cls, m, log_method(getattr(cls, m))) # here
    return cls
</code></pre>
<hr/>
<pre><code>Cls.A()
#  A
#   B
#    C
</code></pre>
<p>PS: <code>log_method</code> is never used for decorating, so it's not a decorator.</p>
</div>
<span class="comment-copy"><code>m = log_method(m)</code> just assigns to the variable <code>m</code> the return value of <code>log_method</code>, it doesn't affect the class at all.</span>
<span class="comment-copy">Nice. Now do it using a metaclass. ;)</span>
<span class="comment-copy">@PM2Ring Throw in a metaclass, and the answer becomes a vortex, more likely so, if OP has no previous experience with those :)</span>
