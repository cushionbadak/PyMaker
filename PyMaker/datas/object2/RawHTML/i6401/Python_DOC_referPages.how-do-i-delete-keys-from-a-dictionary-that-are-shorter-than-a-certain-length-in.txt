<div class="post-text" itemprop="text">
<p>I have a dictionary that has keys of different word lengths, for example:</p>
<pre><code>d={'longggg':'a', 'short':'b', 'medium':'c', 'shor':'d'}
</code></pre>
<p>and I want to end up with a dictionary that only has keys that are greater than a certain length. For example, I want to only keep entries that are 6 letters long or more. So I want</p>
<pre><code>new_d={'longggg':'a', 'medium':'c'}.
</code></pre>
<p>I tried</p>
<pre><code>new_d=dict(k,v) for k,v in d.items() if len[k]&gt;=6
</code></pre>
<p>and</p>
<pre><code>new_d={}
for k, v in d.items():
    if len[k]&gt;=6:
        new_d.update({k:v})
</code></pre>
<p>along with many other variations of that code, but the problem ends up being in taking the length of a key.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>Dictionary comprehensions</code>. No need to do <code>for k in d.keys()</code>. Just use <code>for k in d</code> as <code>d.keys()</code> will return a list which is not needed at all. (A lesson I learnt from Stackoverflow itself!!)</p>
<p>Also as @roganjosh pointed out use <code>len()</code> instead of <code>len[]</code> (<code>len()</code> is a function). Square brackets are used for indexing in say, lists and strings.</p>
<pre><code>d={'longggg':'a', 'short':'b', 'medium':'c', 'shor':'d'}

a = {k:d[k] for k in d if len(k)&gt;=6}
print a
</code></pre>
<p>Output:</p>
<pre><code>{'medium': 'c', 'longggg': 'a'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>d={'longggg':'a', 'short':'b', 'medium':'c', 'shor':'d'}
final_d = {a:b for a, b in d.items() if len(a) &gt;= 6}
</code></pre>
<p>Output:</p>
<pre><code>{'medium': 'c', 'longggg': 'a'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>len</code> is a built-in function in Python, and therefore uses parentheses (not the square brackets operator).</p>
<p>The big issue (among other things) with your first solution is that you are creating a separate dictionary for each <code>k, v</code>.</p>
<p>Your second solution should work if you fix the <code>len</code> function call, but I would rewrite <code>new_d.update({k:v})</code> as <code>new_d[k] = v</code>, since that's the standard way to use a Python dictionary.</p>
<p>I can tell you're new, and the best resource for beginner's questions like these will be the <a href="https://docs.python.org/3/library/functions.html#len" rel="nofollow noreferrer">Python documentation</a> rather than Stack Overflow.  You should also try copy and pasting your error output into Google.  You'll probably be able to solve your problems quicker and you'll get more meaningful answers.</p>
</div>
<span class="comment-copy"><code>new_d={k:v for k,v in d.items() if len(k)&gt;=6}</code>. The square brackets you used in <code>len[k]</code> are for indexing, you instead wanted to call the function, so use parentheses.</span>
<span class="comment-copy">Which version of Python? d.items() only works in version 3+</span>
<span class="comment-copy">@DanielGale not true. The comment I made was tested in Python 2 before I posted it.</span>
<span class="comment-copy">@DanielGale <a href="https://stackoverflow.com/questions/10458437/what-is-the-difference-between-dict-items-and-dict-iteritems" title="what is the difference between dict items and dict iteritems">stackoverflow.com/questions/10458437/â€¦</a> <code>iteritems</code> was added to create a generator, a bit like <code>xrange</code> for <code>range</code>, which became the default <code>range</code> in Python 3.</span>
<span class="comment-copy">@DanielGale exactly :)</span>
