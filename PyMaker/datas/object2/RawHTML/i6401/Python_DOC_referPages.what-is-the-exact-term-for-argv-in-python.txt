<div class="post-text" itemprop="text">
<p>I am currently trying to grasp the exact name of <strong>argv</strong> function (if it can be called a function) that can be imported from <strong>sys</strong> or <em>system-specific parameters</em>. I found 3 definitions:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/27363115/why-does-argv-have-a-v">argument vector</a></li>
<li><a href="https://stackoverflow.com/questions/25580814/i-dont-know-what-is-argv-and-whats-diffrent-with-raw-input">argument value</a></li>
<li><a href="https://stackoverflow.com/questions/12118752/python-terminology-things-to-left-of-argv-in-learn-python-the-hard-way-exer">argument variable</a></li>
</ul>
<p>So which one is it? Perhaps it doesn't matter how one calls it? Does it even have an accepted name?</p>
<p>Thanks everyone!</p>
</div>
<div class="post-text" itemprop="text">
<p>It doesn't really matter. It's a <em>list</em> (not a function), and the name <code>argv</code> is just borrowed from the conventional name used in C. Most of the time, you are better off using a library like <code>argparse</code> to process the command line arguments, in which case you won't even be using <code>sys.argv</code> directly.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>argv</code></a> is a variable (a list of arguments), and is therefore not a function.</p>
<p>The naming seems to come from conventions used in C, which uses <code>argc</code> (argument count) and <code>argv</code> (argument vector). See also <a href="https://stackoverflow.com/a/3024202/693140">https://stackoverflow.com/a/3024202/693140</a></p>
</div>
<div class="post-text" itemprop="text">
<p>None of these 3 are satisfying, because 1) this is a list and 2) "argument" is vague and misleading (these are actually "command line arguments")</p>
<p>A better term is "list of command line arguments".</p>
<p>From the documentation:</p>
<blockquote>
<p>sys.argv</p>
<p>The list of command line arguments passed to a Python script.
  argv[0] is the script name (it is operating system dependent whether
  this is a full pathname or not). If the command was executed using the
  -c command line option to the interpreter, argv[0] is set to the string '-c'. If no script name was passed to the Python interpreter,
  argv[0] is the empty string.</p>
<p>To loop over the standard input, or the list of files given on the
  command line, see the fileinput module.</p>
</blockquote>
<p>PS: this is a bit pedantic, and people will generally understand what you're talking about when they see <code>sys.argv</code>, regardless of what term you chose to call it.</p>
</div>
<span class="comment-copy">arg ... vatever? sorry. this isn't Python specific, but "imported" from C conventions</span>
<span class="comment-copy">According to <a href="https://en.wikipedia.org/wiki/The_C_Programming_Language" rel="nofollow noreferrer"><i>The C programming Language</i></a> by Kernighan &amp; Ritchie, <code>argv</code> stands for "argument vector".</span>
<span class="comment-copy">@PM2Ring the world would be a better place if K&amp;R actually invented the vector for C :)</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre haha - this is the best: argv(atever) !!! THANK YOU!</span>
<span class="comment-copy">@tentkl plausible with german accent :)</span>
<span class="comment-copy">Maybe you can explain to me why variable &amp; its arguments are inverted in <b>argv</b>?  Normally in python, a variable is created by naming it and assigning arguments:  variable = "its argument" or variable = 1 or variable = True;  When using <b>argv</b>:  argument_1, argument_2 = <b>argv</b></span>
