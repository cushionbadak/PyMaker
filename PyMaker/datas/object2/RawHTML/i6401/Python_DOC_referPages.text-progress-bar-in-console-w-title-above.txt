<div class="post-text" itemprop="text">
<p>I am using <a href="https://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console">this</a> answer to print a progress bar
but want it to print what exactly it is doing while it is progressing.
I added a parameter called "current_task" to print_progress() and now would like it to perform as follows. How do I do this?</p>
<p><strong><em>FYI: I'm on on a Unix system: macOS Sierra</em></strong></p>
<pre><code>print_progress(7,10,...remaining params..., "downloading contacts")
</code></pre>
<p>should  print this</p>
<blockquote>
<p>Currently downloading contacts<br/>
  Progress |████████████████████████████████---------------------| 70%
  Complete</p>
</blockquote>
<p>the subsequent call of</p>
<pre><code>print_progress(8,10,...remaining params..., "downloading companies")
</code></pre>
<p>should cause the progress bar to change in place to now look like this</p>
<blockquote>
<p>Currently downloading companies<br/>
  Progress |████████████████████████████████████-------------| 80%
  Complete</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Here's a modified version of <a href="https://stackoverflow.com/a/34325723/4014959">Greenstick's code</a> that supports a header line. It uses an <a href="https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_sequences" rel="nofollow noreferrer">ANSI control sequence</a> <code>'\x1b[3A'</code> to move the terminal cursor up 3 lines after it's printed the header &amp; progress bar.</p>
<p>This updated version works correctly on Python 2 (tested on 2.6.6) &amp; Python 3 (tested on 3.6.0). It also erases the previous contents of the header line so you don't get stray characters if the current header is shorter than the previous one.</p>
<pre><code>from __future__ import print_function
from time import sleep

# Print iterations progress
#Originally written by Greensticks, modified by PM 2Ring
def printProgressBar (iteration, total, prefix='', suffix='', decimals=1, 
    length=100, fill=u'\u2588', header=''):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
        header      - Optional  : header string (Str)
    """
    # Clear the current line and print the header
    print('\x1b[2K', header, '\n')
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    # Generate and print the bar
    bar = fill * filledLength + u'-' * (length - filledLength)
    print('%s |%s| %s%% %s\x1b[3A' % (prefix, bar, percent, suffix))
    # Print New Lines on Complete
    if iteration == total: 
        print('\n' * 2)

# Test

maxi = 10
delay = 0.5

# Initial call to print 0% progress
header = 'Currently downloading contacts now'
printProgressBar(0, maxi, prefix='Progress:', suffix='Complete', length=50, header=header)
for i in range(1, 8):
    # Do stuff...
    sleep(delay)
    # Update Progress Bar
    printProgressBar(i, maxi, prefix='Progress:', suffix='Complete', length=50, header=header)

header = 'Currently downloading companies'
for i in range(8, maxi + 1):
    # Do stuff...
    sleep(delay)
    # Update Progress Bar
    printProgressBar(i, maxi, prefix='Progress:', suffix='Complete', length=50, header=header)

print('Finished')
</code></pre>
<p>Note that if you don't supply a header line you'll get a blank header line. Please make sure that the header line will actually fit on one line of your terminal, and definitely don't put any <code>'\n'</code> chars in it!</p>
<hr/>
<p>You could make this progress bar more versatile by using <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">threading</a>, as illustrated in this <a href="https://stackoverflow.com/a/45164619/4014959">Scrolling Timer</a> I wrote a few months ago.</p>
<hr/>
<p>Here's a version of <code>printProgressBar</code> that disables the cursor so we don't need that extra pace at the start of the cursor.  </p>
<pre><code>def printProgressBar (iteration, total, prefix='', suffix='', decimals=1, 
    length=100, fill=u'\u2588', header=''):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
        header      - Optional  : header string (Str)
    """
    if iteration == 0:
        # Turn off the cursor
        print("\x1b[?25l", end='')
    # Clear the current line &amp; print the header
    print('\x1b[2K', header, sep= '', end='\n\n')
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    # Generate and print the bar
    bar = fill * filledLength + u'-' * (length - filledLength)
    print('%s |%s| %s%% %s\x1b[3A' % (prefix, bar, percent, suffix))
    # Print New Lines on Complete
    if iteration == total: 
        # Turn on the cursor, and skip a few lines
        print("\x1b[?25h", end='\n\n')
</code></pre>
<p>One problem with doing this is that if we terminate the program early (eg by hitting <kbd>Ctrl</kbd><kbd>C</kbd>) while the cursor is disabled, it will still be disabled after the program edits. On Linux, you can just send the ANSI sequence to turn the cursor back on with a simple Bash command: </p>
<pre><code>echo -e "\e[?25h"
</code></pre>
<p>although it's easier to reset the terminal:</p>
<pre><code>echo -e "\ec"
</code></pre>
<p>Of course, we could also trap <code>signal.SIGINT</code> and add a handler function to turn the cursor on before the program exits, but that adds extra complexity to the code.</p>
</div>
<span class="comment-copy">Hi @Greenstick,It would be great to get your input on this as you were the one that wrote the print_progress code I'm using. Much appreciated!</span>
<span class="comment-copy">Greenstick won't get a notification for your comment because he hasn't posted on this page. I guess you could put a comment on the answer he wrote, politely directing him here, but please bear in mind that he's under no obligation to help you with this.</span>
<span class="comment-copy">@PM2Ring Running this on a Unix system! (macOS Sierra to be specific). I just updated the question to reflect this. and thanks for letting me know about the way notifications work. And yes I understand he's under no obligation. Didn't think it hurt to ask though.</span>
<span class="comment-copy">@PM2Ring I think I had the positional arg part down but couldn't get it to print properly. I appreciate your help! Thanks!</span>
<span class="comment-copy">I had to change the header print line to print(header) and use <code>'\x1b[2A'</code> (changed 3 to 2). Works for me now!</span>
<span class="comment-copy">Oooh. Interesting Scrolling Timer! Will look into that though is definitely advanced for me.</span>
<span class="comment-copy">Oh, ok. From your question I assumed that you want a blank line in between the header line and the progress bar. If my answer has helped you, please consider <a href="http://meta.stackexchange.com/a/5235">accepting</a> it.</span>
<span class="comment-copy">@herteladrian  Ok. Sorry about the stray chars in the header line if the previous header was longer than the current one. I'll see what I can do about that shortly. But you shouldn't get a grey cursor over the top of the first char in the header: I intentionally left a space before the header text to make room for the cursor: <code>print('', header, '\n')</code></span>
<span class="comment-copy">Ah I see, that makes sense. I was asking because it seemed outside the scope of a progress bar function. I originally included the suffix / prefix parameters to account for that functionality in most cases, but it seems this was an edge case. Good to see a nice solution was arrived at : )</span>
