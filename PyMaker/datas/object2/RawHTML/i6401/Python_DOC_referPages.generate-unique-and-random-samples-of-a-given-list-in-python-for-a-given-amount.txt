<div class="post-text" itemprop="text">
<p>Lets say <code>L=[1,2,3,4,5]</code></p>
<p>How can I create 4 (or maximum of <code>len(L)</code>!) unique random orders of L?</p>
<p>Expected result should look like this:</p>
<pre><code>[[2,1,3,4,5],[5,3,2,1,4],[4,3,2,1,5],[5,1,3,2,4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Fairly standard approach: pick random samples and throw away duplicates for a small sample, or partial shuffle if you're generating a sample that covers most of the sample space.</p>
<pre><code>import itertools
import math
import random

def n_random_permutations(n, l):
    if n * 3 &lt; math.factorial(len(l)):
        # rejection sampling
        # generate samples and throw them away if we already picked them.
        samples = set()

        while len(samples) &lt; n:
            sample = list(l)
            random.shuffle(sample)
            samples.add(tuple(sample))

        samples = list(samples)
        random.shuffle(samples)
        return samples
    else:
        # generate every possible permutation and pick n of them.
        permutations = list(itertools.permutations(l))
        return random.sample(permutations, n)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As pointed out in <a href="https://stackoverflow.com/questions/104420/how-to-generate-all-permutations-of-a-list-in-python">this</a> post, you can use <code>itertools</code> to generate all possible permutations of the list:</p>
<pre><code>all_perms = list(itertools.permutations(L))
</code></pre>
<p>then if you only want 4 random choices (without replacement) of all possible permutations, you can do something like:</p>
<pre><code>random.sample(all_perms, k=4)
</code></pre>
</div>
<span class="comment-copy">Show what you have tried so far.</span>
<span class="comment-copy">Look at <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer"><code>random.choices</code></a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.permutations" rel="nofollow noreferrer"><code>itertools.permutations</code></a></span>
<span class="comment-copy">would this <code>[[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 2, 4, 3, 5], [1, 2, 4, 5, 3]]</code> be valid result for you?</span>
<span class="comment-copy">I did not look at itertools. I tried random.choices but the problem was omitting the repeated random samples. There is no guarantee that two randomly generated samples are not the same.</span>
<span class="comment-copy">Good alternative for larger arrays! One thing to consider though is that <code>math.factorial(len(l))</code> might go out of range due to multiplication by <code>0.3</code> which casts it to <code>float</code>. Doing <code>if n/0.3 &lt; math.factorial(len(l))</code> would solve overflow error for larger lists...</span>
<span class="comment-copy">That's going to generate a lot more permutations than necessary, though. That might not be a big deal with a length-4 list, but it's completely infeasible for something like length-20.</span>
<span class="comment-copy">Yes, I was about to comment on your answer... its good to have a more efficient alternative for larger lists. I wonder if this can be solved with numpy.</span>
