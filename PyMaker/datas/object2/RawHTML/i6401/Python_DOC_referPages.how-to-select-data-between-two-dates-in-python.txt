<div class="post-text" itemprop="text">
<p>I would like to select data between two dates. The date's format is in the code I copied. I have seen a lot of codes for this, but couldn't find anything with this format. </p>
<pre><code>Dataset = Data_have[
    (Data_have['OrderDate'] &gt;= "1SEP2007:00:00:00") &amp; 
    (Data_have['OrderDate'] &lt;= "31MAR2008:00:00:00")
]
</code></pre>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you are using pandas, and that <code>data_have</code> is a DataFrame, the problem here is that pandas does not automatically recognized strings like <code>'1SEP2007:00:00:00'</code> as date-strings:</p>
<p>But it can if you <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">give it a little help</a>:</p>
<pre><code>import pandas as pd

data_have = pd.DataFrame(
    {'OrderDate': pd.date_range('2007-1-1', '2009-1-1', freq='M')})

start, end = pd.to_datetime(["1SEP2007:00:00:00", "31MAR2008:00:00:00"], 
                            format='%d%b%Y:%H:%M:%S')
dataset = data_have[
    (data_have['OrderDate'] &gt;= start) &amp; 
    (data_have['OrderDate'] &lt;= end)
]
print(dataset)
</code></pre>
<p>prints</p>
<pre><code>    OrderDate
8  2007-09-30
9  2007-10-31
10 2007-11-30
11 2007-12-31
12 2008-01-31
13 2008-02-29
14 2008-03-31
</code></pre>
<hr/>
<p>Above, I'm also assuming that <code>OrderDate</code> contains values of dtype <code>datetime64[ns]</code> (parsed dates, as opposed to date strings). If <code>OrderDate</code> contains date-strings, then you'll need to parse them too:</p>
<pre><code>data_have['OrderDate'] = pd.to_datetime(data_have['OrderDate'], 
                                        format='%d%b%Y:%H:%M:%S')
</code></pre>
<hr/>
<p>Pandas uses <code>dateutil</code> to parse date-strings. You can test if a date-string is 
automatically parsable by pandas by passing it to <code>pd.Timestamp</code>:</p>
<pre><code>In [45]: pd.Timestamp("1SEP2007:00:00:00")
ValueError: could not convert string to Timestamp
</code></pre>
<p>whereas, for example, <code>"1 SEP2007 00:00:00"</code> is automatically parsable:</p>
<pre><code>In [49]: pd.Timestamp("1 SEP2007 00:00:00")
Out[49]: Timestamp('2007-09-01 00:00:00')
</code></pre>
</div>
<span class="comment-copy">Pintang, how did you do that?</span>
<span class="comment-copy">Might be useful to also include: <code>data_have['OrderDate'] = data_have.apply(lambda x:pd.to_datetime(x['OrderDate'], format='%d%b%Y:%H:%M:%S'), axis=1)</code></span>
<span class="comment-copy">@cwallenpoole: Thanks for the suggestion. I've added something similar, but using <code>pd.to_datetime</code> instead of <code>apply</code>.</span>
<span class="comment-copy">Good deal. I'm new to Pandas so I didn't know about that shortcut.</span>
<span class="comment-copy">Thank you very much for such a comprehensive information and the link on Datetime dtypes. I was really struggling to format the column "orderdate".  I used the code below as you suggested then all problem solved:    data_have['OrderDate'] = pd.to_datetime(data_have['OrderDate'],  format='%d%b%Y:%H:%M:%S')                                    I had 18484 rows that I needed for predictive modelling. Your quick reply  really helped. Thanks again.</span>
<span class="comment-copy">Sorry to bother you again, how did you select the codes in the highlighted lines?</span>
