<div class="post-text" itemprop="text">
<p>How can i group similar keys of a dictionary in a list </p>
<p>if i have</p>
<pre><code>data = [{'quantity': 2, 'type': 'Vip'}, {'quantity': 23, 'type': 'Vip'}, {'quantity': 2, 'type': 'Regular'}, {'quantity': 2, 'type': 'Regular'}, {'quantity': 2, 'type': 'Regular'}, {'quantity': 2, 'type': 'Regular'}]
</code></pre>
<p>and i want it to output like this</p>
<pre><code>res = {'Regular': [{'quantity': 2, 'type': 'Regular'},{'quantity': 2, 'type': 'Regular'},{'quantity': 2, 'type': 'Regular'}], 'Vip': [{'quantity': 23, 'type': 'Vip'},{'quantity': 23, 'type': 'Vip'}]}
</code></pre>
<p>Here is the code i have tried but it gives me double of the key probably because of the loop</p>
<pre><code> res = defaultdict(list)
 for i in data:
    if len(res) &gt;= 1:
       for q in res:
          if q == i['type']:
            res[q].append(i)
            break
          else:
            res[i['type']].append(i)
            break
  res[i['type']].append(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think yo dou not fully understand the idea of a <code>defaultdict</code>. A <code>defaultdict</code> will produce a new object if none exists <em>at lookup</em>.</p>
<p>So you can simply use:</p>
<pre><code>from collections import defaultdict

res = defaultdict(list)

for i in data:
    res[i['type']].append(i)
</code></pre>
<p>which yields:</p>
<pre><code>&gt;&gt;&gt; pprint(res)
defaultdict(&lt;class 'list'&gt;,
            {'Regular': [{'quantity': 2, 'type': 'Regular'},
                         {'quantity': 2, 'type': 'Regular'},
                         {'quantity': 2, 'type': 'Regular'},
                         {'quantity': 2, 'type': 'Regular'}],
             'Vip': [{'quantity': 2, 'type': 'Vip'},
                     {'quantity': 23, 'type': 'Vip'}]})
</code></pre>
<p>(<code>pprint</code> is <em>pretty</em> print, but does not change the content).</p>
<p>Note that here we copy there <em>reference</em> to the dictionary to the new list, so we do not create a new dictionary. Furthermore the result is a <code>defaultdict</code>. We can cast it to a <em>vanilla</em> dictionary with <code>dict(res)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your data model is very redundant. You could use a <code>dict</code> with <code>type</code> as keys and list of quantities as values.</p>
<pre><code>data = [{'quantity': 2, 'type': 'Vip'}, {'quantity': 23, 'type': 'Vip'}, {'quantity': 2, 'type': 'Regular'}, {'quantity': 2, 'type': 'Regular'}, {'quantity': 2, 'type': 'Regular'}, {'quantity': 2, 'type': 'Regular'}]

res = {}

for d in data:
    res.setdefault(d['type'], []).append(d['quantity'])

print(res)
# {'Vip': [2, 23], 'Regular': [2, 2, 2, 2]}
</code></pre>
<p>The output is much shorter but you didn't lose any information.</p>
<p>If you're only interested in the total quantities, you could use a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>:</p>
<pre><code>from collections import Counter
count = Counter()
for d in data:
    count[d['type']] += d['quantity']

print(count)
# Counter({'Vip': 25, 'Regular': 8})
~                                         
</code></pre>
</div>
<span class="comment-copy">Wow thank you this worked</span>
