<div class="post-text" itemprop="text">
<p>I have found all the values and everything and I tried sort, but it sorts separately rather than together. I want to sort by years, and grades should just follow the values of years. However, when I do sort(years), it would only sort years, leaving grades as it is. </p>
<p>when opening file,
it would give me something like:</p>
<pre><code>Year,Grade
2000,84
2001,34
2002,82
2012,74
2008,90
</code></pre>
<p>and so forth. So I have calculated average and everything. </p>
<pre><code>years, average_grades = [],[]
avg = []
d = {}

with open(file,'r') as f:
    next(f)
    for line in f:
        year, grade = (s.strip() for s in line.split(','))
        if year in d:
            d[year][0] += int(grade)
            d[year][1] += 1
        else:
            d[year] = [int(grade),1]

    for year, grades in d.items():
        years.append(str(year))
        average_grades.append(float(grades[0]) / grades[1])

    return years, average_grades
</code></pre>
<p>Without sort, it would give me similar to this:</p>
<pre><code>2001 74.625
2006 72.241
2012 70.875
2017 69.1981
2005 72.5
2008 71.244
2014 73.318
2004 72.1
2007 72.88
2000 73.1

With years.sort(), it would give me similar to this:
2000 74.625
2001 72.241
2002 70.875
2003 69.1981
2004 72.5
2005 71.244
2006 73.318
2007 72.1
</code></pre>
<p>So the sort will only work for years, but won't do that for grades. 
This problem has been bugging me for so long time now. I am not planning to use pandas. </p>
</div>
<div class="post-text" itemprop="text">
<p>You want to add this line before the return statement:</p>
<pre><code>years, average_grades = zip(*sorted(zip(years, average_grades), key=lambda p: p[0]))
</code></pre>
<p>What does this do?</p>
<p>The inner <code>zip(years, average_grades)</code> tells python to put together each element of the iterables <code>years</code> and <code>average_grades</code> as an array of tuples.</p>
<p><code>sorted(..., key=lambda p: p[0])</code> is the <code>sorted</code> utility, except now that it's operating on the pair, it needs to know how to sort the pair.  So we pass it a lambda function that says "look at the first part."</p>
<p>The outer <code>zip(*...)</code> takes the results returned from the sorted, which is a list of tuples, and converts it back to two lists.  The * tells it to treat the list as a bunch of arguments, so you're passing in pairs to zip.  <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip</a> takes any number of tuple arguments, and splits them into its component parts.  In this case, it's taking the ten pairs and splitting it into 2 tuples of length 10 each.</p>
<p>As long as your iterables are of the same length, this is a "basic" mechanism to sort them together.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> to join them as a <code>tuple</code> and then <code>sort</code>.</p>
<p><strong>Example</strong> :</p>
<pre><code>&gt;&gt;&gt; y = [3, 2, 4, 1, 2]
&gt;&gt;&gt; g = [0.1, 0.4, 0.2, 0.7, 0.1]

&gt;&gt;&gt; mix = list(zip(y,g))
&gt;&gt;&gt; mix
=&gt; [(3, 0.1), (2, 0.4), (4, 0.2), (1, 0.7), (2, 0.1)]

&gt;&gt;&gt; sorted(mix)
=&gt; [(1, 0.7), (2, 0.1), (2, 0.4), (3, 0.1), (4, 0.2)]
</code></pre>
<p>#print in your order :</p>
<pre><code>&gt;&gt;&gt; for ele in sorted(mix): 
        print(ele[0],ele[1]) 

1 0.7
2 0.1
2 0.4
3 0.1
4 0.2
</code></pre>
<p><strong>Note</strong> that for the year <code>2</code>, there are two values of <code>0.1</code> and <code>0.4</code> and that it handles it giving more preference to the <code>year</code> and next <code>grades</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I hope this example will be helpful, so:</p>
<pre><code>years = [2001,2000,2002]
average_grades = [5,10,15]
result = zip(years,average_grades)
for item in sorted(result, key=lambda x: x[0]):
    print('{} {}'.format(*item))
#2000 10
#2001 5
#2002 15
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The alternative solutions are taking the results and zipping them together. As you seem to have control of the reading of the file, I suggest to instead <em>never split the years and grades apart</em>.</p>
<p>In my opinion this is easier than later combining the two lists with zip.</p>
<pre><code>years, average_grades = [],[]
avg = []
d = {}

with open(file,'r') as f:
    next(f)
    for line in f:
        year, grade = (s.strip() for s in line.split(','))
        if year in d:
            d[year][0] += int(grade)
            d[year][1] += 1
        else:
            d[year] = [int(grade),1]

# Iterator-Expression to convert 'd' dictionary into list of tuples.
# Puts (year, average grade) into a new list.
year_grade = [(year, float(grade_tuple[0]) / grade_tuple[1]) \
               for year, grade_tuple in d.items()]

# Sorting is optional, if you return the list of tuples.
# Use 'key=lambda ...' to sort over the year (the first element of the tuple).
# Technically, specyfing the 'key' is not necessary as the default would be
# to sort over the first element first.
year_grade.sort(key=lambda x: x[0])

return year_grade
# Alternatively, return the list of tuples as a list of two tuples: years, grades
return zip(*year_grade)
</code></pre>
<h1>Other improvements</h1>
<p>You can use a <code>defaultdict</code> to avoid the <code>if year in d</code> block:</p>
<pre><code>from collections import defaultdict

d = defaultdict(lambda: [0, 0])

with open(fname,'r') as f:
    next(f)
    for line in f:
        year, grade = (s.strip() for s in line.split(','))
        d[year][0] += int(grade)
        d[year][1] += 1

    def avg(t):
        return float(t[0]) / t[1]
    year_grade = [(y, avg(g)) for y, g in d.items()]
    year_grade.sort()

    return zip(*year_grade)  # Python3: tuple(zip(*year_grade))
</code></pre>
</div>
<span class="comment-copy">Can you post a example of data</span>
<span class="comment-copy">I have provided example data.</span>
<span class="comment-copy">The problem is that you are returning two <i>independent</i> data structures. The returned <code>years</code> and <code>average_grades</code> are not related when you return them.</span>
<span class="comment-copy">Not a great answer: If OP has control over posted code, it is much cleaner to keep <code>(year, grade)</code> tuples together. Then sort, then un-zip. No downvote though.</span>
<span class="comment-copy">The only difference between maintaining the variables separately and zipping them is the use of zip.  There are plenty of real-world examples where you'll have two separate sets of data.  @Unapiedra, please remember the goal of Stack Overflow is to create a repository of knowledge for future users.  It is valid to assert that in this instance, not separating the two lists would be the better solution; it is not valid to claim that an answer that provides enough information to help future questioners is "not a great answer" because of an implementation you provide for this specific instance.</span>
