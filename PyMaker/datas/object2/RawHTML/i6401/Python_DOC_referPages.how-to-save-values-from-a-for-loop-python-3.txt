<div class="post-text" itemprop="text">
<p>Yesterday I posted a question where I was searching for a way to do an infinite <strong><code>for</code></strong> loop, without using <strong><code>while</code></strong> at all (<em>because my teacher wants so</em>, and also, we can't use any commands <em>we haven't seen in class</em>). It was difficult as apparently there wasn't a very viable option that didn't use <code>while</code>, or other functions like <code>itertools</code> or .append, etc.</p>
<p>You can see that question <a href="https://stackoverflow.com/q/46762884/8674022">here</a><br/>
Also, thanks a lot for the feedback you guys brought me! :)</p>
<hr/>
<p><strong>But</strong> I managed to talk with my teacher and we got permission <strong>to use</strong> <code>itertools</code> or just a range big enough (instead of actually infinite).</p>
<hr/>
<p>I solved a few exercises already, but now I have the following <strong>instructions:</strong></p>
<blockquote>
<p>(Think about <strong><em>grades</em></strong>)<br/>
  • Ask the user a number (<em>through inputs</em>), and <strong><em>keep asking</em></strong> until the user tells to stop.<br/>
  • Then, calculate the <strong>average</strong> from all the numbers entered. </p>
</blockquote>
<p>(It's actually a little more complex, but I shortened it and I believe I can deal with the rest)</p>
<p>As I said, I <strong>must</strong> use a <code>for</code> loop, and I <strong>can't</strong> use <code>whiles</code> at all.</p>
<p>If I could use <em>while</em>, I'd do something like this:</p>
<pre><code>def grades():
    totalg = 0
    countg = 0
    keepAdding = "y"
    while(keepAdding == "y"):
        qualif = int(input("Insert grades obtained, in scale from 0 to 100 "))
        totalg = totalg + qualif
        countg = countg + 1
        keepAdding = str(input("Do you wish to keep adding data? (y/n) "))
    print("The average of your grades is", totalg/countg)
</code></pre>
<p>How can I do something like that, but with <strong><code>for</code></strong> loops? I have no idea on how to store the data for later calculation.</p>
<hr/>
<p>Also, I'm interested into knowing a more "proper" way to be able to end the loop, but I can't use a <strong><code>break</code></strong> neither.</p>
<p>Thanks in advance! Any advice is appreciated and welcome! :)</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to do this is, without outside modules, is to use <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer">two-arg <code>iter</code></a>; when passed two arguments, the first is a no-argument function to call over and over, and the second is a sentinel value than indicates you should stop.</p>
<p>So for example, you could make an infinite loop with something as simple as:</p>
<pre><code> for _ in iter(bool, True):
</code></pre>
<p>Since the <code>bool</code> constructor returns <code>False</code>, a sentinel value of <code>True</code> will never occur, so that's an infinite loop.</p>
<p>Similarly, to make a loop that prompts until the user responds with a given sentinel string, like <code>'q'</code> for quit (or just the empty string), you could do:</p>
<pre><code>for inp in iter(lambda: input("Insert grades obtained, in scale from 0 to 100 (type 'q' to quit)"), 'q'):
    val = int(inp)
    ... rest of loop ...
</code></pre>
<p>Obviously, this is a little obscure (two-arg <code>iter</code> is rarely seen), so usually you'd use <code>while True:</code> with the loop containing a test-and-<code>break</code> or test-and-<code>return</code> (the latter doesn't violate the letter of the teacher's requirements). Similarly, exception handling can be used to exit the loop, though it's ugly:</p>
<pre><code> try:
     for ...:
         if test_for_end:
             raise StopIteration
 except StopIteration:
     pass
 # You're outside the loop
</code></pre>
<p>Note: Literally everything I've mentioned is terrible style, aside from an actual <code>while True:</code> loop with a test-and-<code>break</code>/<code>return</code> case. But you've got one hand tied behind your back, so I'm suggesting some terrible mutant hands to substitute.</p>
</div>
<div class="post-text" itemprop="text">
<p>Even though 'no-<strong>break</strong>' rule and a request for a "proper" way to end a loop are somewhat contradictory, I'd say that is possible, even without <strong>return</strong> :</p>
<pre><code>grades = [0]
for j in grades:
    t = int(raw_input('grade:'))
    ans = raw_input('more? [y/n]:').lower()
    if(ans == 'y'):
        grades.append(t)
    else:
        grades[0] = t

print(sum(grades)*1.0/len(grades))  
</code></pre>
<p>here we just iterate over ever-growing list of values, and when we need to stop - we simply stop adding values to it, and the loop ends.</p>
<p><strong>HOWEVER</strong> 
This is NOT a proper way of handling that issue, read ShadowRanger for more details - this is bad coding style and should not be used.</p>
</div>
<div class="post-text" itemprop="text">
<p>Maybe saving all the data obtained in an array?
I think arrays on python work as Linked Lists, so you won't have any overflow problems, at least that would be a starting point</p>
</div>
<span class="comment-copy">In yesterday's answer I used <code>return</code> to get over the no-<code>break</code> restriction. Or aren't you allowed to use <code>return</code> either?</span>
<span class="comment-copy">Maybe you should list the stuff you are allowed to use. It's hard to answer this type of question when we don't know what the rules are.</span>
<span class="comment-copy">Yes. (sorry for the late btw) I can use return and it's more or less what I've done, but in this case, for this code for example, how would I put the return command in order to end it while keeping the variables value? Sorry for my ignorance, I guess it's something I could deduce from your code, but I'm afraid I haven't been able to understand it fully. And yes, let me do a list of the stuff we've seen to make it easier. But I think we're getting closer though, thank you :)</span>
<span class="comment-copy">I suspect that the OP can't use <code>iter</code>...</span>
<span class="comment-copy">@PM2Ring: Possible. One-arg <code>iter</code> isn't totally unheard of though, so they might have seen it, even if they weren't introduced to the two-arg form. If they went over the built-in functions, it's there; similarly, if they covered how a for loop works, <code>iter</code> is an implicit part of all <code>for</code> loops, so who knows?</span>
<span class="comment-copy">I believe I'd be able to use iter know, well, actually, at first I believed it was included in iter.tools and my teacher allowed that. We haven't seen it in class, that's sure, but know I think I could use it. However, I seen some other things we wouldn't been able to use, like <code>lambda</code>.  I think I'm making you guys struggle a little too much, really, thanks a lot for this. But I think it'd be easier if as @PM2Ring says, I did a list with stuff we have seen. Give me a second, it'd be useful for me too</span>
<span class="comment-copy">One: No, Python isn't using linked lists for the <code>list</code> type (<code>array</code> is a module for C specific types, and probably not what you mean). Two: This isn't really an answer; it sort of responds to the title of the question, but the body of the question isn't about storing the original values at all; even if it was, this is too vague/broad to serve as an answer.</span>
