<div class="post-text" itemprop="text">
<p>I have a dataframe with 10 columns and around 20,000,000 rows.
I need to compare the values of the 10 columns row by row and create five columns with the new values. To do this, I defined a function consisting of an if function and applied it to test each.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.DataFrame({'a':[1,2,3,4,5], 'b':[11,12,13,14,16], 'c':[21,22,23,24,25], 'd':[31,32,33,34,35])


&gt;&gt;&gt; def cal1(row):
&gt;&gt;&gt;     v1=0
&gt;&gt;&gt;     v2=0
&gt;&gt;&gt;     if 0&lt; row['a'] &lt;2:
&gt;&gt;&gt;         v1=1
&gt;&gt;&gt;     if 11&lt; row['b'] &lt;14:
&gt;&gt;&gt;         v2=1
&gt;&gt;&gt;     return v1+v2


&gt;&gt;&gt; def cal2(row):
&gt;&gt;&gt;     v1=0
&gt;&gt;&gt;     v2=0
&gt;&gt;&gt;     if 2&lt;= row['a'] &lt;4:
&gt;&gt;&gt;         v1=-1
&gt;&gt;&gt;     if 14&lt;= row['b']&lt;=16:
&gt;&gt;&gt;         v2=-1
&gt;&gt;&gt;     return v1+v2    

&gt;&gt;&gt; df['n1'] = df.apply(ca11, axis=1)
&gt;&gt;&gt; df['n2'] = df.apply(cal2, axis=1)
</code></pre>
<p>I was able to get the answer this way, but I needed five defined functions, each with a long list of conditions. And the calculation was too slow.
(Actual data should be tested on all 10 columns, with at least 10 conditions.)</p>
<p>Is there a better way to test the data in each column row by row than this one?</p>
</div>
<div class="post-text" itemprop="text">
<p>IIUC, you have consistent values you want to assign to each row.  For example, <code>n1</code> is either <code>0</code>, <code>1</code>, or <code>2</code>.  If that's the case, you can just start <code>n1</code> at <code>0</code> and add with indexing:</p>
<pre><code>df['n1'] = 0

mask1 = df.a.between(0, 2, inclusive=False) 
mask2 = df.b.between(11, 14, inclusive=False)

df.loc[mask1 | mask2, 'n1'] = 1
df.loc[mask1 &amp; mask2, 'n1'] = 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>apply()</code> accepts several <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.apply.html" rel="nofollow noreferrer">parameters</a>: <code>func</code> and also <code>args</code>, which are</p>
<blockquote>
<p>Positional arguments to pass to function in addition to the array/series</p>
</blockquote>
<p>You could could pass in e.g. <code>(0, 2, 11, 14)</code> to allow a more generic function to score column A, <code>(2, 4, 14, 16)</code> for column B, and so on. Alternatively, pass in the column name and let the function make decisions based on that.</p>
<p>There's a fair amount of CPU overhead and memory footprint to process 20 M rows. You might find it more performant to read each row to be scored using a <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">csvreader</a> and emit the result with a csvwriter, and have pandas import the augmented CSV file.</p>
</div>
