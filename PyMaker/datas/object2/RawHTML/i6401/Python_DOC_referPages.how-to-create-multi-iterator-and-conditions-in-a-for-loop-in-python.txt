<div class="post-text" itemprop="text">
<p>How can I make a for loop with multiple conditions in python similar to other languages? </p>
<pre><code>for ( i = 0, j=10; i&lt;10 &amp;&amp; j&gt;0; i++, j-- )
</code></pre>
<p>or a bit more complex</p>
<pre><code>for ( i = 0, j=10; i&lt;10 &amp;&amp; j&gt;0 &amp;&amp; flag; i+=3, j+=2 )

for ( i = 0, j=10; i&lt;10 &amp;&amp; j&gt;0 &amp;&amp; i&lt;j; i+=3, j+=2 ) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess something like</p>
<pre><code>for (i,j) in zip(range(0,10,1),range(10,0,-1))
</code></pre>
<p>will work, but I do not really like it (it is ugly, isn't it ?). I am looking forward for an answer too.</p>
</div>
<div class="post-text" itemprop="text">
<p>In principle the following might be what you want:</p>
<pre><code>for i, j in zip(i_list, j_list):
    ....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want something super elegant, you can call <code>zip</code> on a <code>reversed</code> version of a <code>range</code> object.</p>
<pre><code>r = range(10)
for i, i in zip(r, reversed(r)):
    print(i, j + 1)

0 10
1 9
2 8
3 7
4 6
5 5
6 4
7 3
8 2
9 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>as far as I know python has different type of writing a for loop
you can refer to this link <a href="https://wiki.python.org/moin/ForLoop" rel="nofollow noreferrer">https://wiki.python.org/moin/ForLoop</a>
and choice that fits your problem needs</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#zip</a> should help you here</span>
<span class="comment-copy">need something elegant. I am about not to like python!</span>
<span class="comment-copy">the solution depends on how you want to use <code>i</code> and <code>j</code>, are they supposed to index 2 different lists ? Or you need the values to calculate something else ?</span>
<span class="comment-copy">in my case it is one array but in general that is just a iterator and shouldnot have to do with number of lists. not sure yet how python is handling more complex itertors.</span>
<span class="comment-copy">yet better than other answers. what if I want to apply more logic? this includes range and steps only.</span>
<span class="comment-copy"><a href="http://pythoncentral.io/pythons-range-function-explained/" rel="nofollow noreferrer">pythoncentral.io/pythons-range-function-explained</a> might help you</span>
<span class="comment-copy"><code>for i, j in zip(range(10), range(10, 0, -1)):</code></span>
<span class="comment-copy">would u explain a bit.</span>
<span class="comment-copy">In Python you can have any number iterators. In order to synchronise them one can use zip to create a tuple of every single combination. Alternatively you can write your own, elegant class which provides the iterator you are looking for.</span>
<span class="comment-copy">how does reveres() work? does it bring O(n) computation?</span>
<span class="comment-copy">@DragonKnight An iterator has information about the stop, step, and end. <code>reversed</code> takes that information and smartly generates a reversed version of what the original iterator would've generated.</span>
