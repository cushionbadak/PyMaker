<div class="post-text" itemprop="text">
<p>The only thing can be used is mock. </p>
<pre><code>#tested.py
from somemodule import somelogger

class MyClass(object):
    def __init__(self):
        self.logger = somelogger()

    def do_smth(self):
        self.logger.log(message)
</code></pre>
<p><strong>Important</strong> <strong>detail</strong>: module <code>somemodule</code> doesn't exist, so usual solutions like @patch don't suite.</p>
<p>I need to mock <code>somemodule</code> <code>somelogger's</code> method <code>log</code> to it performs simple print:</p>
<pre><code>#tests.py
from tested import MyClass


def test_logging():
    obj = MyClass()
    obj.do_smth('some_message')
</code></pre>
<p>In console:</p>
<pre><code>some_message
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think the way to do this would be to use the <code>unittest.mock.patch</code> method as described here: <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch</a></p>
<p>In your tests.py file, create a mocked log method to do the print.</p>
<pre><code># tests.py
from tested import MyClass
from unittest.mock import patch

def mocked_log(log_msg):
    print(log_msg)

@patch('tested.somelogger.log')
def test_logging(mock_logger)
    mock_logger.return_value = mocked_log

    obj = MyClass()
    obj.do_smth('some message')
</code></pre>
</div>
<span class="comment-copy">have you tried this example? What version of python?</span>
<span class="comment-copy">This is for python 3.6. I have done similar mocking in more complex systems and everything worked fine. If you use 2.7.x then mock needs to be installed first and you'd need to import mock instead of unittest.mock.</span>
<span class="comment-copy">Sorry i missed one crucial detail: module somemodule <b>isn't</b> <b>suppose</b> <b>to</b> <b>exist</b>. So when we try to import it, we always get  ImportError: No module named <b>somemodule</b></span>
