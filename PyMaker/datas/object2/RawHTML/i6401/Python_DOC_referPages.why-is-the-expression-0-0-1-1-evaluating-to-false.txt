<div class="post-text" itemprop="text">
<p>Similarly (-1==-1 &amp; 1==1) is also False.</p>
<p>Apologies if this is something obvious but I can't find an explanation for it.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>&amp;</code> is the <strong>bitwise AND</strong> operator. As mentioned in the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="nofollow noreferrer">documentation</a>, Bitwise operators have higher precedence than logical operators, so </p>
<pre><code>0 == 0 &amp; 1 == 1
</code></pre>
<p>Becomes</p>
<pre><code>0 == (0 &amp; 1) == 1
</code></pre>
<p>And you can imagine it goes downhill from there:</p>
<pre><code>   0 == (0 &amp; 1) == 1
=&gt; 0 == 0 == 1
=&gt; 0 == 0 and 0 == 1
=&gt; True and False 
=&gt; False
</code></pre>
<p>Assuming what you wanted was a <strong>logical AND</strong>, the python way to do that would be using <code>and</code>:</p>
<pre><code>0 == 0 and 1 == 1
</code></pre>
<p>Which gives you <code>True</code> as you'd expect.</p>
</div>
<div class="post-text" itemprop="text">
<p>Lets break this up.</p>
<p>The highest priority sign here is the brackets. Except we're wrapping the entire expression, so they don't do anything.</p>
<p>Next we have the bitwise operator <code>&amp;</code>.</p>
<p><code>0 &amp; 1</code> which equals <code>0</code>.</p>
<p>This leaves us with <code>0 == 0 == 1</code></p>
<p>As <code>0</code> does not equal <code>1</code>, we get <code>False</code>.</p>
<p>For reference, here is the python documentation about <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">operator precedence</a>.</p>
</div>
<span class="comment-copy">use <code>and</code> for logical and operation. <code>&amp;</code> is used for bit operation.</span>
<span class="comment-copy">Thank you! This is the explanation I was looking for.</span>
<span class="comment-copy">@PollPenn You're welcome!</span>
<span class="comment-copy"><code>0 &amp; 1</code> produces <code>0</code>, not <code>1</code>... <code>0 &amp; ANYINTEGER</code> produces <code>0</code>. The end result is similar, but the intermediate step is wrong.</span>
<span class="comment-copy">Oops, must have been thinking of <code>|</code>. Thanks :P</span>
