<div class="post-text" itemprop="text">
<p>I'm studying Python multiprocessing Pipe. My goal is two make two independent processes, one of which sends the other a message for five time. I have no problem running it, but it just shows their PIDs and that's it. What did I wrong with this code? My environment is Windows 10(64bit) and Python 3.6.1(32bit).</p>
<pre><code>import os
import multiprocessing as mp
import time

global sending_end, receiving_end 
sending_end, receiving_end = mp.Pipe()

def sender(sending_end=sending_end):
    print('SND PID: ', os.getpid() )
    for _ in range(5):
        sending_end.send('test')
        time.sleep(1)


class receiver(mp.Process):
    def __init__(self):
        mp.Process.__init__(self)

    def run(self, receiving_end=receiving_end):
        print('REC PID: ', os.getpid() )
        print( receiving_end.recv() )
        time.sleep(1)


if __name__ == '__main__':

    print('MAIN PID: ', os.getpid() )

    s = mp.Process( target = sender, args=(sending_end,) )
    s.start()

    r = receiver()
    r.start()     

    mp.freeze_support()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems you forget to call <code>run()</code> method of <code>receiver</code> class (CHILD) which inherits the <code>multiprocessing.Process</code> class (PARENT).</p>
<p>Since <code>run()</code> is not called explicitly, <code>run()</code> method of parent is called and it doesn't have your receiving value printing code. Therefore, it is giving feeling that code is not running.</p>
<p>Also some more things :</p>
<ul>
<li>Both the pipes need to be closed at the end like you close the file.</li>
<li>Child class <code>run()</code> method need to called till the sending process is alive.</li>
</ul>
<p>Please check the below code with above points incorporated.</p>
<p><strong>Code:</strong></p>
<pre><code>import os
import multiprocessing as mp
import time

global sending_end, receiving_end
sending_end, receiving_end = mp.Pipe()


def sender(sending_end=sending_end):
    print('SND PID: ', os.getpid() )
    for i in range(5):
        sending_end.send('test_' + str(i) )
        time.sleep(1)
    print "Done from sender"
    #Closing sending pipe
    sending_end.close()


class receiver(mp.Process):
    def __init__(self):
        mp.Process.__init__(self)

    def run(self, receiving_end=receiving_end):
        print('REC PID: ', os.getpid() )
        print( "Dinesh - ",receiving_end.recv() )
        time.sleep(1)


if __name__ == '__main__':
    import sys
    print('MAIN PID: ', os.getpid() )

    s = mp.Process( target = sender, args=(sending_end,) )
    s.start()

    r = receiver()
    r.start()

    while True:
        #Checking sending process is alive or not
        if not s.is_alive():
            print "Sending process is done. Exiting"
            #Closing receiving end pipe
            receiving_end.close()
            #Closing receving process
            r.terminate()
            sys.exit()
        time.sleep(0.1)
        #Explicitly calling run method
        r.run()

    mp.freeze_support()
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>('MAIN PID: ', 16400)
('REC PID: ', 16400)
('REC PID: ', 12544)
('SND PID: ', 17744)
('Dinesh - ', 'test_0')
('REC PID: ', 16400)
('Dinesh - ', 'test_1')
('REC PID: ', 16400)
('Dinesh - ', 'test_2')
('REC PID: ', 16400)
('Dinesh - ', 'test_3')
('REC PID: ', 16400)
('Dinesh - ', 'test_4')
Done from sender
Sending process is done. Exiting
</code></pre>
</div>
<span class="comment-copy">Why use pipes? There is a <a href="https://docs.python.org/3.3/library/multiprocessing.html?highlight=multiprocessing#exchanging-objects-between-processes" rel="nofollow noreferrer">Queue</a>, which does all the stuff for you.</span>
<span class="comment-copy">@uphill I think using pipes will be more compatible in case there could be any chances to bidirectionally exchange messages among processes.</span>
<span class="comment-copy">if you are not using python as other process, you might consider <a href="https://docs.python.org/3/library/subprocess.html?highlight=subprocess#module-subprocess" rel="nofollow noreferrer">subprocess</a>, since mutliprocessing is a drop in replacement to use multiple cpu's avoiding the GIL, by spawning more python processes.</span>
<span class="comment-copy">works under MacOS.</span>
