<div class="post-text" itemprop="text">
<p>I have the below dictionary format, I want to sum the dictionary values based on date.</p>
<pre><code>dict1 = [
            {'date':"10-05-2017", 'cost':20},
            {'date':"10-05-2017", 'cost':10},
            {'date':"11-05-2017", 'cost':15},
            {'date':"11-05-2017", 'cost':10},
            {'date':"12-05-2017", 'cost':5}
        ]
</code></pre>
<p>Result:</p>
<pre><code>[
    {'date':"10-05-2017", 'cost':30},
    {'date':"11-05-2017", 'cost':25},
    {'date':"12-05-2017", 'cost':5}
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can easily do this with <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>:</p>
<pre><code>&gt;&gt;&gt; [{"date": key, "cost": sum(d["cost"] for d in group)} 
...  for key, group in itertools.groupby(dict1, key=lambda d: d["date"])]
[{'cost': 30, 'date': '10-05-2017'},
 {'cost': 25, 'date': '11-05-2017'},
 {'cost': 5, 'date': '12-05-2017'}]
</code></pre>
<p>Note that this only works if dictionaries with the same date are adjacent to each other, i.e. if unsure, best sort the list by the same <code>key</code> first.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>result = {}
for i in dict1:
    result[i['date']] = result.setdefault(i["date"], 0) + i["cost"]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to group your records by date.</p>
<p>This function needs a <em>key</em>: another function used to extract the date. You can use <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> for that.</p>
<p>Here is a short solution using this features and a comprehension list:</p>
<pre><code>import itertools
import operator


dict1 = [{'cost': 20, 'date': '10-05-2017'},
         {'cost': 10, 'date': '10-05-2017'},
         {'cost': 15, 'date': '11-05-2017'},
         {'cost': 10, 'date': '11-05-2017'},
         {'cost': 5,  'date': '12-05-2017'}]

get_date = operator.itemgetter('date')
get_cost = operator.itemgetter('cost')

result = [{'date': date, 'cost': sum(map(get_cost, group))}
          for date, group in itertools.groupby(dict1, key=get_date)]
</code></pre>
<p><strong>note:</strong> the <em>dict1</em> (which is a list of dictionaries) should be sorted by date:</p>
<pre><code>dict1.sort(key=get_date)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, <code>dict1</code> is not a dictionary, it is a list of dictionaries. Try the following script only using the standar library.</p>
<pre><code>from collections import Counter

dict1 = [
    {'date':"10-05-2017", 'cost':20},
    {'date':"10-05-2017", 'cost':10},
    {'date':"11-05-2017", 'cost':15},
    {'date':"11-05-2017", 'cost':10},
    {'date':"12-05-2017", 'cost':5}
]

counter = Counter()

for each in dict1:
    counter.update({each['date']: each['cost']})

[{'date': key, 'cost': value} for key, value in counter.items()]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>import itertools
dict1 = [
        {'date':"10-05-2017", 'cost':20},
        {'date':"10-05-2017", 'cost':10},
        {'date':"11-05-2017", 'cost':15},
        {'date':"11-05-2017", 'cost':10},
        {'date':"12-05-2017", 'cost':5}
    ]
new_data = [(a, list(b)) for a, b in itertools.groupby([i.items() for i in dict1], key=lambda x:list(x)[0][1])]
final_dict = [{"date":a, "cost":sum(list(i)[-1][-1] for i in b if "cost" in list(i)[-1])} for a, b in new_data]
</code></pre>
<p>Output:</p>
<pre><code>[{'date': '10-05-2017', 'cost': 30}, {'date': '11-05-2017', 'cost': 25}, {'date': '12-05-2017', 'cost': 5}]
</code></pre>
</div>
<span class="comment-copy">Fantastic. Can you please show your code for this and indicate what difficulties you are facing in your own implementation?</span>
<span class="comment-copy">The fact that the string value represents a date isn't really relevant here.</span>
<span class="comment-copy">pandas might be useful here, if you're comfortable with it</span>
<span class="comment-copy">I will get the list of bill amounts here. I want to sum the bill amount based on date.</span>
<span class="comment-copy">What's with the dict-to-list-conversion? This is not only highly un-intuitive but also relies on the iteration order of the keys in the dict, which depends on the type of dict, and maybe even on the Python implementation!</span>
