<div class="post-text" itemprop="text">
<p>I have a Python file (sql_script.py) with some methods to add/modify data into a SQL database, say</p>
<ul>
<li>import_data_into_specifications_table</li>
<li>import_data_into_linkage_table</li>
<li>truncate_linkage_table</li>
<li>....(do_other_stuff_on_db)</li>
<li>connect_db</li>
</ul>
<p>Sometimes I have to call only one of the methods, some others several of them</p>
<p>Until now what I did was modify the main method according to what I needed to do:</p>
<pre><code>if __name__ == '__main__':
    conn = connect_db()
    import_data_into_specifications_table(conn= conn)
    import_data_into_linkage_table(conn=conn)
    conn.close()
</code></pre>
<p>But I find it a bad practice, as I always have to remember removing the main before committing the code</p>
<p>A possible option could be to write an external python file, say launch_sql_script.py), in which I write all possible combinations of methods I have to run, say:</p>
<pre><code>def import_spec_and_linkage():
    conn = connect_db()
    import_data_into_specifications_table(conn= conn)
    import_data_into_linkage_table(conn=conn)
    conn.close()

...
if __name__ == '__main__': 
    import_spec_and_linkage()
</code></pre>
<p>It can be useful to version this file, but still I will need to modify the main code according to what I need to do.</p>
<p>Do you think this is a good practise? Do you have any other suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way is to use program arguments mechanism: describe intended action during script execution.</p>
<p>Get a peek at <a href="https://docs.python.org/3/library/sys.html?highlight=argv#sys.argv" rel="nofollow noreferrer">sys.argv</a></p>
<p>Here is the scratch:</p>
<pre><code>def meow():
    print("Meow!")
def bark():
    print("Bark!")
def moo(): 
    print("Moo!")

actions = {
    "meow": meow,
    "bark": bark,
    "moo": moo,
}

from sys import argv
actions[argv[1]]()
</code></pre>
<p>If you're going to parse sophisticated program arguments, check out <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">argparse</a> library.</p>
</div>
<div class="post-text" itemprop="text">
<p>Option 1: Separate them into individual scripts and run each from command line</p>
<pre><code># import_data_into_specifications_table.py
if name == '__main__':
    conn = connect_db() # import from a shared fiel
    import_data_into_specifications_table(conn= conn)


# in bash
$ import_data_into_specifications_table
</code></pre>
<p>Option 2: Write one file that parses command line arguments</p>
<pre><code># my_sql_script.py
if name == '__main__':
    conn = connect_db()

    if args.spec_table: # use argumentparser to get these
        import_data_into_specifications_table(conn=conn)
    if args.linkage_table:
        import_data_into_linkage_table(conn=conn)
    ...

# in bash
$ my_sql_script.py --spec_table --linkage_table
</code></pre>
<p>I would favour option 2 if the order of the operations doesn't matter or is always constant. If there are many permutations, I would go with option 1. </p>
</div>
