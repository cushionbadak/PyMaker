<div class="post-text" itemprop="text">
<p>Trying to count unique value from the following list without using collection:</p>
<pre><code>('TOILET','TOILETS','AIR CONDITIONING','AIR-CONDITIONINGS','AIR-CONDITIONING')
</code></pre>
<p>The output which I require is :</p>
<pre><code>('TOILET':2,'AIR CONDITIONiNGS':3)
</code></pre>
<p>My code currently is</p>
<pre><code>for i in Data:
    if i in number:
        number[i] += 1
    else:
        number[i] = 1
print number
</code></pre>
<p>Is it possible to get the output?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/difflib.html#difflib.get_close_matches" rel="nofollow noreferrer">difflib.get_close_matches</a> to help determine uniqueness</p>
<pre><code>import difflib
a = ('TOILET','TOILETS','AIR CONDITIONING','AIR-CONDITIONINGS','AIR-CONDITIONING')
d = {}
for word in a:
    similar = difflib.get_close_matches(word, d.keys(), cutoff = 0.6, n = 1)
    #print(similar)
    if similar:
        d[similar[0]] += 1
    else:
        d[word] = 1
</code></pre>
<hr/>
<p>The actual keys in the dictionary will depend on the order of the words in the list.</p>
<p><code>difflib.get_close_matches</code> uses <code>difflib.SequenceMatcher</code> to calculate the <em>closeness</em> (ratio) of the word against all possibilities even if the first possibility is <em>close</em> - then sorts by the ratio. This has the advantage of finding the <em>closest</em> key that has a ratio greater than the cutoff. But as the dictionary grows the <em>searches</em> will take longer.</p>
<p>If needed, you might be able to optimize a little by sorting the list first so that similar words <em>appear</em> in sequence and doing something like this (lazy evaluation) - choosing an appropriately large cutoff.</p>
<pre><code>import difflib, collections
z = collections.OrderedDict()
a = sorted(a)
cutoff = 0.6
for word in a:
    for key in z.keys():
        if difflib.SequenceMatcher(None, word, key).ratio() &gt; cutoff:
            z[key] += 1
            break
    else:
        z[word] = 1
</code></pre>
<hr/>
<p>Results:</p>
<pre><code>&gt;&gt;&gt; d
{'TOILET': 2, 'AIR CONDITIONING': 3}
&gt;&gt;&gt; z
OrderedDict([('AIR CONDITIONING', 3), ('TOILET', 2)])
&gt;&gt;&gt; 
</code></pre>
<hr/>
<p>I imagine there are python packages that do this sort of thing and may be optimized.</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't believe the python list has an easy built-in way to do what you are asking.  It does, however, have a count method that can tell you how many of a specific element there are in a list. Example:</p>
<pre><code>some_list = ['a', 'a', 'b', 'c']
some_list.count('a')  #=&gt; 2
</code></pre>
<p>Usually the way you get what you want is to construct an incrementable hash by taking advantage of the Hash::get(key, default) method:</p>
<pre><code>some_list = ['a', 'a', 'b', 'c']
counts = {}
for el in some_list
    counts[el] = counts.get(el, 0) + 1
counts #=&gt; {'a' : 2, 'b' : 1, 'c' : 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>import re
data = ('TOILETS','TOILETS','AIR CONDITIONING','AIR-CONDITIONINGS','AIR-CONDITIONING')
new_data = [re.sub("\W+", ' ', i) for i in data]
print new_data
final_data = {}
for i in new_data:
   s = [b for b in final_data if i.startswith(b)]
   if s:
      new_data = s[0]
      final_data[new_data] += 1
   else:
      final_data[i] = 1

print final_data
</code></pre>
<p>Output:</p>
<pre><code>{'TOILETS': 2, 'AIR CONDITIONING': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>original = ('TOILETS', 'TOILETS', 'AIR CONDITIONING', 
            'AIR-CONDITIONINGS', 'AIR-CONDITIONING')
a_set = set(original)
result_dict = {element: original.count(element) for element in a_set}
</code></pre>
<p>First, making a set from original list (or tuple) gives you all values from it, but <em>without repeating</em>.</p>
<p>Then you create a dictionary with <em>keys from that set</em> and values as occurrences of them in the <em>original list (or tuple)</em>, employing the <code>count()</code> method.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = ['TOILETS', 'TOILETS', 'AIR CONDITIONING', 'AIR-CONDITIONINGS', 'AIR-CONDITIONING']
b = {}

for i in a:
    b.setdefault(i,0)
    b[i] += 1
</code></pre>
<p>You can use this code, but same as Jon Clements`s talk, TOILET and TOILETS aren't the same string, you must ensure them. </p>
</div>
<span class="comment-copy">Assuming that <code>number</code> is a dictionary prior to the loop that should be fine... The output you expect isn't valid syntax... what isn't working/what are you getting instead? (Also - your <code>tuple</code> example isn't valid syntax either - and somehow your <code>i</code> has become lowercase in the expected results...)</span>
<span class="comment-copy">By using my current code its result will be      ('TOILET' :1,''TOILETS':1,'AIR CONDITIONING':1,'AIR-      CONDITIONINGS':1,'AIR-CONDITIONING':1)</span>
<span class="comment-copy">Which is to be expected - TOILET and TOILETS aren't the same string and nor are AIR CONDITIONING AIR-CONDITIONINGS and AIR-CONDITITIONING... Your issue isn't with counting the frequency of the data - you need to standardise your data somehow first...</span>
<span class="comment-copy">@Gaming   Each of the strings in the list is unique.</span>
<span class="comment-copy">@Gaming. Then it's not unique elements that you are trying to count. You have to explain in excruciating detail what it means for two items to be the same in that case.</span>
<span class="comment-copy">You're building a list to check it's not empty, then building the list again to take the first element... huh?</span>
<span class="comment-copy">@JonClements Please see my recent edit.</span>
<span class="comment-copy">Okay... now try with <code>data = ('T', 'TOILETS','TOILETS','AIR CONDITIONING','AIR-CONDITIONINGS','AIR-CONDITIONING')</code>...</span>
<span class="comment-copy">@JonClements Please see my recent edit.</span>
<span class="comment-copy">Perhaps... although the OP needs to work out what <code>if i.startswith(b)</code> should be for their purposes given their data...</span>
