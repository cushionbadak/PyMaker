<div class="post-text" itemprop="text">
<p>I'm aware my issue may be to lack of Django knowledge, but I'm trying to pass user input from one form in a view, to another view which will then render that view's HTML page with the given input.</p>
<p>I'm redirected fine, but the data is not being displayed. I believe it has something to do with the contexts not being passed properly, but I do not understand what is wrong or how to fix it.</p>
<p><code>views.py</code></p>
<pre><code>def home_view(request, *args, **kwargs):
    print(args, kwargs)
    print(request.user)
    if request.method == 'POST':
        form2 = PostForm(request.POST)
        if form2.is_valid():
            post = form2.save(commit=False)
            post.poster = request.user
            post.content = form2.cleaned_data.get('content')
            post.title = form2.cleaned_data.get('title')
            post.syntax = form2.cleaned_data.get('syntax')
            post.public = form2.cleaned_data.get('public')
            rand = str(uuid.uuid4())[:6]
            while Paste.objects.filter(generated_url=rand):
                rand = str(uuid.uuid4())[:6]
            post.generated_url = rand
            form2.save()
            context = {
                "poster_name": post.poster,
                "paste_contents": post.content,
                "paste_title": post.title,
                "paste_syntax": post.syntax,
                "paste_visible": post.public
            }
            return HttpResponseRedirect(reverse('details', args=(post.generated_url,)), context)
    else:
        form2 = PostForm()

    return render(request, "home.html", {'form2': form2})
def detail_view(request, *args, **kwargs):

    if request.user.is_authenticated:
        if request.method=='POST':
            form3 = PostForm(request.POST)
            url = form3.generated_url
            your_posts = Paste.objects.get(url)
            context = {
                'form3': form3
            }
            return render(request, "paste_detail.html", context)

    return render(request, "paste_detail.html", {'form3': form3})
</code></pre>
<p><code>home.html</code></p>
<pre><code>{% extends "base.html" %}

{% block content %}
&lt;h1&gt;Your user is {{ request.user }}&lt;/h1&gt;
&lt;div class="submit_form"&gt;
&lt;form action="" method="POST"&gt;
  {% csrf_token %}
  {{ form2.as_p }}&lt;br&gt;
  &lt;input type="submit" name="submit" value="Paste" id="submit"&gt;
&lt;/div&gt;

{% endblock content %}
</code></pre>
<p>And <code>paste_detail.html</code></p>
<pre><code>{% extends "base.html" %}
{% block content %}
&lt;!--&lt;h1&gt;Name of post: {{ post.title }}&lt;/h1&gt;--&gt;

&lt;p&gt;Content of post:&lt;/p&gt;
I AM REDIRECTED
&lt;h1&gt;Name of post: {{ form2.title }}&lt;/h1&gt;

&lt;p&gt;Content of post:&lt;/p&gt;

&lt;p&gt;{{form3.content|linebreaks}}&lt;/p&gt;
{{ form3.poster }}
{{ form3.contents }}
{{ form3.title }}
{{ form3.syntax }}
{{ form3.visible }}
{% endblock %}
</code></pre>
<p>edit:</p>
<p><code>views.py</code></p>
<pre><code>def home_view(request, *args, **kwargs):

    if request.method == 'POST':
        form2 = PostForm(request.POST)
        if form2.is_valid():
            post = form2.save(commit=False)
            post.poster = request.user
            post.save()
            rand = str(uuid.uuid4())[:6]
            while Paste.objects.filter(generated_url=rand):
                rand = str(uuid.uuid4())[:6]
            post.generated_url = rand
        #    return HttpResponseRedirect(reverse('details', args=(post.generated_url,)), context)
            return redirect('detail', rand)
    else:
        form2 = PostForm()

    return render(request, "home.html", {'form2': form2})
def detail_view(request, custom_uuid):

    post = get_object_or_404(Paste, pk=pk)
    return render(request, "paste_detail.html", {'post': post})
    #return render(request, "paste_detail.html", {'form3': form3})
</code></pre>
<p><code>paste_detail.html</code></p>
<pre><code>{% extends "base.html" %}
{% block content %}


&lt;p&gt;Content of post:&lt;/p&gt;
I AM REDIRECTED

&lt;h1&gt;Name of post: {{ post.title }}&lt;/h1&gt;



&lt;p&gt;Creator of post:&lt;/p&gt; {{ post.poster }}
&lt;p&gt;Content of post:&lt;/p&gt; {{ post.content }}
&lt;p&gt;Title of post:&lt;/p&gt; {{ post.title }}
{{ post.syntax }}
{{ post.visible }}
{% endblock %}
</code></pre>
<p>And <code>urls.py</code></p>
<pre><code>...
urlpatterns = [
    path('home/', home_view, name='home'),
    path('contact/', contact_view, name='contact'),
    path('admin/', admin.site.urls, name='admin'),
    path('about/', about_view, name='about'),
    url(r'^signup/$', views.signup, name='signup'),
    path('paste_list/', paste_list_view, name='paste_list'),
    url(r'^$', home_view),
    #url(r'^(?P&lt;rand_url&gt;\S{6})/$', detail_view, name='details'),
    path('detail/&lt;str:custom_uuid&gt;/', detail_view, name='detail'),
    path('accounts/', include('django.contrib.auth.urls')),
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are several problems in your code. Lets fix them one by one(Please check the code comments for explanation):</p>
<p>In <code>home_view</code> you are doing some redundant codes, you can simplify like this:</p>
<pre><code>from django.shortcuts import redirect

...
if request.method == 'POST':
    form2 = PostForm(request.POST)
    if form2.is_valid():
        post = form2.save(commit=False)  # it is not saved in db
        post.poster = request.user
        rand = str(uuid.uuid4())[:6]
        while Paste.objects.filter(generated_url=rand).exists():
            rand = str(uuid.uuid4())[:6]
        post.generated_url = rand
        post.save()  # it will save all information to DB, so you don't need to call form2.cleaned_data.get(..)

       return redirect('details', custom_uuid=rand)  # I am redirecting to `detail_view`. here `rand` is the random uuid of the post which is saved in db
else:
    form2 = PostForm()

return render(request, "home.html", {'form2': form2})  # rendering form for GET request
</code></pre>
<p>Now lets update detail view to catch the <a href="https://docs.djangoproject.com/en/2.1/topics/http/shortcuts/#redirect" rel="nofollow noreferrer">redirection</a>:</p>
<pre><code>from django.shortcuts import get_object_or_404

def detail_view(request, custom_uuid):
    post = get_object_or_404(Post, generated_url=custom_uuid)  # getting the post object from database using model. 
    return render(request, "post_detail.html", {'post': post})  # sending data in context to template

# url
path('detail/&lt;str:custom_uuid&gt;/', detail_view, name='detail')  # here &lt;str:custom_uuid&gt; will catch the uuid sent in the url

# HTML
{% extends "base.html" %}
{% block content %}

&lt;p&gt;Content of post:&lt;/p&gt;
I AM REDIRECTED
&lt;h1&gt;Name of post: {{ post.title }}&lt;/h1&gt;  // &lt;-- getting this context from view

&lt;p&gt;Content of post:&lt;/p&gt;

&lt;p&gt;{{post.content|linebreaks}}&lt;/p&gt;
{{ post.poster }}
{{ post.contents }}
{{ post.title }}
{{ post.syntax }}
{{ post.visible }}
{% endblock %}
</code></pre>
<p>Here <a href="https://docs.djangoproject.com/en/2.1/topics/http/shortcuts/#get-object-or-404" rel="nofollow noreferrer">get_object_or_404</a> gets the entry for model <code>Post</code>, if its not found then throws 404 error.</p>
</div>
<div class="post-text" itemprop="text">
<p>Contexts are per-request. Once your view has returned, the context no longer exists. When you do a redirect, you are finishing that request/response cycle and starting another one with your <code>detail</code> view. None of the context will carry over.</p>
<p>Instead, you need a way to store pertinent information between requests. One fairly simple way to do this is storing data in the <em>session</em>.</p>
<p>For example, you might store <code>title</code> in a session like this in <code>home_view</code>:</p>
<pre><code>request.session['title'] = post.title
</code></pre>
<p>And then in your <code>detail_view</code> view, you could add it to your context:</p>
<pre><code>context = {
    'title': request.session.get('title')
}
</code></pre>
<p>Check out the Django documentation on sessions for more info: <a href="https://docs.djangoproject.com/en/2.1/topics/http/sessions/" rel="nofollow noreferrer">https://docs.djangoproject.com/en/2.1/topics/http/sessions/</a></p>
</div>
<span class="comment-copy">Is the template named <code>page_detail.html</code> or <code>paste_detail.html</code>?</span>
<span class="comment-copy">@JohnGordon<code>paste_detail.html</code> Sorry for the typo I'll fix it</span>
<span class="comment-copy">That does make sense. If however, I wanted to not use a URL structure such as <code>webapp.com/detail/pkid</code> and rather wanted to use <code>webapp.com/generated_url</code> how would I alter the code to reflect this? In my <code>views.py</code> you can see I am creating a random string by doing   `            rand = str(uuid.uuid4())[:6]             while Paste.objects.filter(generated_url=rand):                 rand = str(uuid.uuid4())[:6]             post.generated_url = rand`</span>
<span class="comment-copy">You can pass the UUID generated in <code>generated_url</code>. You can use <code>path('detail/&lt;str:custom_uuid&gt;/'...)</code> and catch that uuid in the view using <code>def detail(request, custom_uuid):..</code></span>
<span class="comment-copy">I may not be following you correctly. I am changing the return to <code>return redirect('detail', rand)</code> in the home view, changing the detail_view def to <code>def detail_view(request, custom_uuid)</code> and the url.py to have <code>path('detail/&lt;str:custom_uuid&gt;/', detail_view, name='detail'),</code> ?  I will edit my OP for easier readability, please have a look. Thank you.</span>
<span class="comment-copy">@NickM I have updated my answer. please have a look.</span>
<span class="comment-copy">for some reason I am getting a <code>No Paste matches the given query.</code> error when trying to submit from the home page.</span>
<span class="comment-copy">Using sessions makes sense. I am lost syntactically on how to proceed. Do you mind providing an example of one of the fields so I can better understand?</span>
<span class="comment-copy">No problem. See my updated answer. You may still need to check out the docs to make sure you have a session store set up correctly (though I <i>think</i> this is done by default if you still have the default Django settings.</span>
<span class="comment-copy">I'll look into this. Thanks so much!</span>
