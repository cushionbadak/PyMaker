<div class="post-text" itemprop="text">
<pre><code>fname3 = input("Enter the Blue print name: ")
import re
with open (fname3) as file:
    fileText=file.read()
q1,q2,q3 = [ int(n) for n in re.findall(": (\d+)",fileText) ]
p1,p2,p3 = re.findall("(.*):",fileText)
qb=q1+q2
qc=q1+q2+q3

print("This BLUEPRINT CONTAINS--------------|")
print(p1+" Questions: "+q1)
</code></pre>
<p>This code above is giving an error of line: <code>print(p1+" Questions: "+q1)</code>
but <code>print(p1+" Questions: "+p1)</code> is giving correct output abd also <code>print("q1")</code>
but combining them is outputting an error</p>
<p>but gives error <code>print("questions: "+q1)</code>
This code opens a txt file which contains the following:</p>
<pre class="lang-none prettyprint-override"><code>Part A: 12 10*2 = 20
Part B: 6 4*5 = 20
Part C: 5 3*10 = 30
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another way to do this is with something called f-strings (available in Python 3.6+, but the latest version is 3.7):</p>
<p><code>print (f"{p1} Questions: {q1}")</code></p>
<p>Notice how there is an <code>f</code> before the quotes (applies to all types of quotes), and any variable you want has to be in <code>{}</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You need to convert to a string with <code>str</code>:</p>
<pre><code>print(p1 + " Questions: " + str(q1))
</code></pre>
<p>Alternatively, simply use multiple arguments when calling <code>print</code>:</p>
<pre><code>print(p1, "Questions:", q1)
</code></pre>
<p>Note that the spaces are added automatically with this method.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is in the types of your variables.</p>
<p><code>Questions:</code>, <code>p1</code>, <code>p2</code> and <code>p3</code> are all of type <code>str</code>.</p>
<p>Conversely, <code>q1</code>, <code>q2</code> and <code>q3</code> are of type <code>int</code>.</p>
<p>The <code>print</code> calls work separately because <code>print</code> can convert its arguments to <code>str</code>. However, you are first trying to add two strings (<code>p1</code> and <code>Questions:</code>) to an <code>int</code> (<code>q2</code>), which is what fails.</p>
<p>Rather than naive addition/concatenation, you should prefer <code>str.format</code> calls:</p>
<p><code>print('{p} Questions: {q}'.format(p=p1, q=q1))</code></p>
<p>These make it easier to understand what the string will look like and automatically perform conversion of your arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python is strongly typed language. In most cases, it does not do any implicit type conversion. Consider, should "5"+7 be 12 or "57"? How about 7+"5"?</p>
<p>On ambiguous cases like this, Python will simply raise error rather than trying to guess what you meant.</p>
<p>You need to do the type conversion explicitly:</p>
<pre><code>print(p1+" Questions: "+str(q1))
</code></pre>
<p>or with Python 3 f-string:</p>
<pre><code>print(f"{p1} Questions: {q1}")
</code></pre>
<p>or print function accepts multiple arguments, that will, by default, be separated by space:</p>
<pre><code>print(p1, "Questions:", q1)
</code></pre>
</div>
<span class="comment-copy"><i>"This code above is giving an error of line . . ."</i> - Please post the full, specific traceback you are getting directly into your question.</span>
<span class="comment-copy">@ChristianDeanI didn't get you,  the last line i.e print(p1+" Questions: "+q1) is giving out error</span>
<span class="comment-copy">If you're getting an error, Python is giving you a <i>traceback</i> - a list of errors. Please post those in your question.</span>
<span class="comment-copy">Yes, and you should give a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> showing what error. Also google your error messages.</span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/2847386/python-string-and-integer-concatenation">Python String and Integer concatenation</a></span>
<span class="comment-copy">So the "f" automatically does the type conversion?</span>
<span class="comment-copy">Yes, and also makes the code a lot cleaner</span>
<span class="comment-copy">Yes.... thank you, can you explain what exactly the "f" does</span>
<span class="comment-copy">Well, if you understand the <code>str.format</code> method, this is basically a shorthand. For example, <code>print (num.format (","))</code> will print <code>num</code> with commas where appropriate (which might differ outside of America). However, <code>print (f"{num:,}")</code> makes it obvious that <code>num</code> is what's being printed and anything after the <code>:</code> gets passed to <code>str.format</code>. Also, it helps to avoid pesky spaces that get forgotten when using <code>+</code> as you can see it plainly. <a href="https://realpython.com/python-f-strings/" rel="nofollow noreferrer">Click for more details</a></span>
<span class="comment-copy">yes ... it worked</span>
<span class="comment-copy">@Appries if my answer helped you, accept it please</span>
<span class="comment-copy">the other answer which had been answered first works and since he gave the ans 1st I marked him, I gave an upvote.</span>
