<div class="post-text" itemprop="text">
<p>I am trying to figure out how to release the space occupied by a python object while working on jupyter notebooks.</p>
<p>In the specific scenario, i am working on multiple large dataframes and once I have finished doing some computations, i would like to load up a new dataframe. </p>
<p>However this always causes a memory error and my system starts freezing up. </p>
<p>So i figured I will try deleting the python object. </p>
<p>Things i have tried so far :<br/>
1. Using del and invoking garbage collector</p>
<pre><code>del pyobject
import gc
gc.collect()
</code></pre>
<ol start="2">
<li><p>Using ipython magic commands</p>
<p>%reset_selective -f <em>pyobject</em></p></li>
</ol>
<p>Both these approaches fail to actually release the memory. Looking at the htop command shows me that still 20GB of my RAM is being used up by the jupyter notebook. They memory is only deallocated when i restart the kernel (but then i end up losing all the other variables i require for my next stage of data analysis)</p>
</div>
<div class="post-text" itemprop="text">
<p>Make sure that no other references exist to your data. Are there no other views based on that array? You can get the objects that hold a reference to something using <a href="https://docs.python.org/2/library/gc.html#gc.get_referrers" rel="nofollow noreferrer">get_referrers</a> </p>
<p>If there are any views you should promote those to copies. 
In particular ipython tends to keep references to previous evaluations in variables named <code>_, _1, _23 etc</code>. %reset_selective should clear these though.</p>
</div>
<span class="comment-copy">A bit off topic, but my opinion is that ipython is great for demos and experimentation. Once serious data processing is needed, export the data processing to regular functions in a python module.</span>
