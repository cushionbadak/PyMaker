<div class="post-text" itemprop="text">
<p><em>First of all this program is probably stupid inefficient and long but it's my first real program and if you suggest changes in the program keep this in mind. and the text is in Norwegian. If there's anything that is unclear please just ask and I will translate more.</em></p>
<p><em>The code is written in jupyter using python 3, and presented using plotly</em></p>
<p><em>I read <a href="https://stackoverflow.com/questions/38800946/python-oop-monty-hall-not-giving-the-expected-results">this</a> thread as it describes my question but I didn't understand it properly, the answer might be there.</em></p>
<p><strong>Question 1:</strong>
Why is it not returning the correct ratio, should be 33% and 66%. Currently, it's about 55% and 44%.</p>
<p><strong>Question 2:</strong>
If you were to make this more streamlined but still very basic what would you do?</p>
<p><strong>Question 3:</strong>
Is secrets.randbelow(3) "random enough" to be used in this manner? </p>
<p><strong>Question 4:</strong>
Any suggestions on how to present the data better?</p>
<p>Sorry for the messy code and spelling mistakes in advance. if the code is unreadable I am happy to translate more of it.</p>
<pre><code>import random     #importerer brukte pakker
import secrets
import plotly.plotly 
import plotly.graph_objs as go
from plotly.offline import download_plotlyjs, init_notebook_mode, plot,      iplot
import numpy
init_notebook_mode(connected=True)


dør1 = 0;         # initialising the variables
dør2 = 0;
dør3 = 0;
bytte_tap = 0  #Keeps track of how many loses after changing
bytte_vinn = 0 #Keeps track of how many wins after changing
bli_tap = 0    #Keeps track of how many loses after not changing
bli_vinn = 0   #Keeps track of how many wins after not changing
i = 0

print_on = 0          # Sett 1 for å få debug koder
antall_runder = 1000000  #sets amount of runs


def scenario_1(): # defines the three positions the car can be in
    global dør1   # 1 = Car 0 = Goat
    global dør2
    global dør3
    dør1 = 1
    dør2 = 0
    dør3 = 0


def scenario_2(): 
    global dør1   
    global dør2
    global dør3
    dør1 = 0
    dør2 = 1
    dør3 = 0


def scenario_3(): 
    global dør1   
    global dør2
    global dør3
    dør1 = 0
    dør2 = 0
    dør3 = 1


while i &lt; antall_runder:  # main loop

    i += 1 # counter

    scenario_valg = secrets.randbelow(3) +1  # Chooses one of the possible positions 



    if scenario_valg == 1:     # Runs the chosen scenario.
        scenario_1()
    elif scenario_valg == 2:   # Runs the chosen scenario.
        scenario_2()
    elif scenario_valg == 3:   # Runs the chosen scenario.
        scenario_3()
    else:
        print("error")

    første_valg = secrets.randbelow(3) +1 # Randomly chooses the first door.

    andre_valg = secrets.randbelow(2)   # Randomly chooses whether the player chooses a new door


    if scenario_valg == 1 and første_valg == 1 and andre_valg == 1: # Figures out if the player has a correct combination of choices for scenario 1.
        if print_on == 1: print("1, 1, ja, tap")                    
        bytte_tap += 1
    elif scenario_valg == 1 and første_valg == 1 and andre_valg == 0:
        if print_on == 1: print("1, 1, nei, vinn")
        bli_vinn += 1
    elif scenario_valg == 1 and første_valg == 2 and andre_valg == 1:
        if print_on == 1: print("1, 2, ja, tap")
        bytte_tap += 1
    elif scenario_valg == 1 and første_valg == 2 and andre_valg == 0:
        if print_on == 1: print("1, 2, nei, vinn")
        bli_vinn += 1
    elif scenario_valg == 1 and første_valg == 3 and andre_valg == 1:
        if print_on == 1: print("1, 3, ja, vinn")
        bytte_vinn += 1
    elif scenario_valg == 1 and første_valg == 3 and andre_valg == 0:
        if print_on == 1: print("1, 3, nei, tap")
        bli_tap += 1



    if scenario_valg == 2 and første_valg == 1 and andre_valg == 1: # Figures out if the player has a correct combination of choices for scenario 2.
        if print_on == 1: print("2, 1, ja, vinn")                  
        bytte_vinn += 1
    elif scenario_valg == 2 and første_valg == 1 and andre_valg == 0:
        if print_on == 1: print("2, 1, nei, tap")
        bli_tap += 1
    elif scenario_valg == 2 and første_valg == 2 and andre_valg == 1:
        if print_on == 1: print("2, 2, ja, tap")
        bytte_tap += 1
    elif scenario_valg == 2 and første_valg == 2 and andre_valg == 0:
        if print_on == 1: print("2, 2, nei, vinn")
        bli_vinn += 1
    elif scenario_valg == 2 and første_valg == 3 and andre_valg == 1:
        if print_on == 1: print("2, 3, ja, vinn")
        bytte_vinn += 1
    elif scenario_valg == 2 and første_valg == 3 and andre_valg == 0:
        if print_on == 1: print("1, 3, nei, tap")
        bli_tap += 1


    if scenario_valg == 3 and første_valg == 1 and andre_valg == 1:  # Figures out if the player has a correct combination of choices for scenario 3.
        if print_on == 1: print("3, 1, ja, vinn")                    
        bytte_vinn += 1
    elif scenario_valg == 3 and første_valg == 1 and andre_valg == 0:
        if print_on == 1: print("3, 1, nei, tap")
        bli_tap += 1
    elif scenario_valg == 3 and første_valg == 2 and andre_valg == 1:
        if print_on == 1: print("3, 2, ja, vinn")
        bytte_vinn += 1
    elif scenario_valg == 3 and første_valg == 2 and andre_valg == 0:
        if print_on == 1: print("3, 2, nei, tap")
        bli_tap += 1
    elif scenario_valg == 3 and første_valg == 3 and andre_valg == 1:
        if print_on == 1: print("3, 3, ja, tap")
        bytte_tap += 1
    elif scenario_valg == 3 and første_valg == 3 and andre_valg == 0:
        if print_on == 1: print("3, 3, nei, vinn")
        bli_vinn += 1

init_notebook_mode()              # Plotly stuff i don't understand

keys=['Vinn - tap med bytting', 'Vinn - tap uten bytting']  # More Plotly stuff i don't understand
values=[bytte_vinn - bytte_tap, bli_vinn - bli_tap]

iplot({
    "data": [go.Bar(x=keys, y=values)],
    "layout": go.Layout(title="Monty Hall problemet")  # More Plotly stuff i don't understand
})

prosent_uten_bytting = bli_vinn / antall_runder * 100 *2  # Calculates the % of wins if you don't change your choice.
prosent_med_bytting = bytte_vinn / antall_runder * 100 *2 # Calculates the % of wins if you change your choice.



if print_on == 1: print(bytte_vinn, bytte_tap, bli_vinn, bli_tap)  # Debug message
print("Med bytting vant du", prosent_med_bytting, "% av tiden")   # Prints the %
print("Uten bytting vant du", prosent_uten_bytting, "% av tiden")# Prints the %
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A more elegant way to write it would be somehow like this:</p>
<pre><code>import numpy as np
cnt = 0
tries = 1000000
for _ in range(tries):
    doors = np.zeros(3)
    doors[np.random.randint(3)] = 1
    choice = np.random.randint(3)
    if doors[choice] == 1:  # If we chose this door on the first try we will change the door afterwards and not win
        cnt+=1

print("Lost:",cnt/tries)
print("Won:",(tries-cnt)/tries)
</code></pre>
<p>You basically just need a counter variable where you either count the rounds were you've won or the ones where you've lost. Then you have a loop where you have two random numbers. I did use an array to represent the doors, but you could also just use the random number the know behind which door the win is. You then need just one check. If the door that you picked is the door behind which the prize is, you will loose, as the moderator than opens a door and you switch to the other door (with nothing behind it). If you did not choose the door with the prize, you win as you now switch to the door with the prize. So a lot of the if statements can disappear if you don't need the prints. </p>
<p>Question 3: secrets.randbelow is definitely random enough. It's for such a thing maybe even a bit an overkill, as you do not need to have cryptographicaly strong random numbers. So you could also use numpy's random or the "random" library from python.</p>
</div>
<div class="post-text" itemprop="text">
<p>For your primary question, are the 33% and 66% supposed to represent the case where the player randomly chooses between keeping the current door or switching? I thought those were for no switch and switch respectively.  Either way this part of your code could be done a lot more nicely: </p>
<pre><code>if scenario_valg == 1 and første_valg == 1 and andre_valg == 1: # Figures out if the player has a correct combination of choices for scenario 1.
    if print_on == 1: print("1, 1, ja, tap")                    
    bytte_tap += 1
elif scenario_valg == 1 and første_valg == 1 and andre_valg == 0:
    if print_on == 1: print("1, 1, nei, vinn")
    bli_vinn += 1
elif scenario_valg == 1 and første_valg == 2 and andre_valg == 1:
    if print_on == 1: print("1, 2, ja, tap")
    bytte_tap += 1
elif scenario_valg == 1 and første_valg == 2 and andre_valg == 0:
    if print_on == 1: print("1, 2, nei, vinn")
    bli_vinn += 1
elif scenario_valg == 1 and første_valg == 3 and andre_valg == 1:
    if print_on == 1: print("1, 3, ja, vinn")
    bytte_vinn += 1
elif scenario_valg == 1 and første_valg == 3 and andre_valg == 0:
    if print_on == 1: print("1, 3, nei, tap")
    bli_tap += 1



if scenario_valg == 2 and første_valg == 1 and andre_valg == 1: # Figures out if the player has a correct combination of choices for scenario 2.
    if print_on == 1: print("2, 1, ja, vinn")                  
    bytte_vinn += 1
elif scenario_valg == 2 and første_valg == 1 and andre_valg == 0:
    if print_on == 1: print("2, 1, nei, tap")
    bli_tap += 1
elif scenario_valg == 2 and første_valg == 2 and andre_valg == 1:
    if print_on == 1: print("2, 2, ja, tap")
    bytte_tap += 1
elif scenario_valg == 2 and første_valg == 2 and andre_valg == 0:
    if print_on == 1: print("2, 2, nei, vinn")
    bli_vinn += 1
elif scenario_valg == 2 and første_valg == 3 and andre_valg == 1:
    if print_on == 1: print("2, 3, ja, vinn")
    bytte_vinn += 1
elif scenario_valg == 2 and første_valg == 3 and andre_valg == 0:
    if print_on == 1: print("1, 3, nei, tap")
    bli_tap += 1


if scenario_valg == 3 and første_valg == 1 and andre_valg == 1:  # Figures out if the player has a correct combination of choices for scenario 3.
    if print_on == 1: print("3, 1, ja, vinn")                    
    bytte_vinn += 1
elif scenario_valg == 3 and første_valg == 1 and andre_valg == 0:
    if print_on == 1: print("3, 1, nei, tap")
    bli_tap += 1
elif scenario_valg == 3 and første_valg == 2 and andre_valg == 1:
    if print_on == 1: print("3, 2, ja, vinn")
    bytte_vinn += 1
elif scenario_valg == 3 and første_valg == 2 and andre_valg == 0:
    if print_on == 1: print("3, 2, nei, tap")
    bli_tap += 1
elif scenario_valg == 3 and første_valg == 3 and andre_valg == 1:
    if print_on == 1: print("3, 3, ja, tap")
    bytte_tap += 1
elif scenario_valg == 3 and første_valg == 3 and andre_valg == 0:
    if print_on == 1: print("3, 3, nei, vinn")
    bli_vinn += 1
</code></pre>
<p>Instead of splitting into each possible scenerio for each choice, you can make fewer checks (and so write less code).  I would </p>
<ul>
<li><ol>
<li>Check for first pick correct</li>
</ol></li>
<li><ol start="2">
<li>Check for repick </li>
</ol></li>
</ul>
<p>Once your scenerios are split into these 4 options you can check for wins and print the variables <code>scenario_valg</code> and <code>første_valg</code> directly instead of hard-coding prints for "1" and "2".</p>
</div>
<span class="comment-copy">Wow that is one heck of a "before" and "after" transformation, that is hella clean. I will for sure give this a go in the morning. Thank you so much for answering and interpreting my broken ass spaghetti code Syrius.</span>
<span class="comment-copy">Btw I guess i figured out why you're probabilities are not correct. You do "andre_valg = secrets.randbelow(2)   # Randomly chooses whether the player chooses a new door" to decide if you want to change the door after the moderator has show you one of the doors, right? To get the proper probabilities you would always have to change the door. So currently you're not playing the Monty hall problem in the best way and thus get wrong probabilities.</span>
<span class="comment-copy">i was thinking that i play both games, where i track whether i win when i choose or rather the computer chooses to switch or not to. and then tally up the scores to see if switching actually helps.</span>
<span class="comment-copy">Thank you so much Hoog, that would certainly clean it up. I'll give it a go tomorrow. I'm not sure i understand your question, but it makes sense that it represents no switch and switch respectively, just like you said. I am basically replacing the user with the random functions and running the whole thing a couple of times and seeing what "results" are most common. Again thank you Hoog</span>
