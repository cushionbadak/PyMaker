<div class="post-text" itemprop="text">
<p>Consider:</p>
<pre><code>items = []
items.append("apple")
items.append("orange")
items.append("banana")

# FAKE METHOD::
items.amount()  # Should return 3
</code></pre>
<p>How do I get the number of elements in the list?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>len()</code> function can be used with several different types in Python - both built-in types and library types. For example:</p>
<pre><code>&gt;&gt;&gt; len([1,2,3])
3
</code></pre>
<p>Official 2.x documentation is here: <a href="https://docs.python.org/2/library/functions.html#len" rel="noreferrer" title="len()"><code>len()</code></a><br/>
Official 3.x documentation is here: <a href="https://docs.python.org/3/library/functions.html#len" rel="noreferrer" title="len()"><code>len()</code></a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h1>How to get the size of a list?</h1>
</blockquote>
<p>To find the size of a list, use the builtin function, <code>len</code>:</p>
<pre><code>items = []
items.append("apple")
items.append("orange")
items.append("banana")
</code></pre>
<p>And now:</p>
<pre><code>len(items)
</code></pre>
<p>returns 3.</p>
<h2>Explanation</h2>
<p>Everything in Python is an object, including lists. All objects have a header of some sort in the C implementation. </p>
<p>Lists and other similar builtin objects with a "size" in Python, in particular, have an attribute called <code>ob_size</code>, where the number of elements in the object is cached. So checking the number of objects in a list is very fast.</p>
<p>But if you're checking if list size is zero or not, don't use <code>len</code> - instead, <a href="https://stackoverflow.com/a/45778282/541136">put the list in a boolean context - it treated as False if empty, True otherwise</a>.</p>
<h2>From the <a href="https://docs.python.org/library/functions.html#len" rel="noreferrer">docs</a></h2>
<p><strong><code>len(s)</code></strong></p>
<blockquote>
<p>Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or
  a collection (such as a dictionary, set, or frozen set).</p>
</blockquote>
<p><code>len</code> is implemented with <code>__len__</code>, from the data model <a href="https://docs.python.org/reference/datamodel.html#object.__len__" rel="noreferrer">docs</a>:</p>
<p><strong><code>object.__len__(self)</code></strong></p>
<blockquote>
<p>Called to implement the built-in function <code>len()</code>. Should return the length of the object, an integer &gt;= 0. Also, an object that doesnâ€™t
  define a <code>__nonzero__()</code> [in Python 2 or <code>__bool__()</code> in Python 3] method and whose <code>__len__()</code> method returns zero
  is considered to be false in a Boolean context.</p>
</blockquote>
<p>And we can also see that <code>__len__</code> is a method of lists:</p>
<pre><code>items.__len__()
</code></pre>
<p>returns 3.</p>
<h2>Builtin types you can get the <code>len</code> (length) of</h2>
<p>And in fact we see we can get this information for all of the described types:</p>
<pre><code>&gt;&gt;&gt; all(hasattr(cls, '__len__') for cls in (str, bytes, tuple, list, 
                                            xrange, dict, set, frozenset))
True
</code></pre>
<h2>Do not use <code>len</code> to test for an empty or nonempty list</h2>
<p>To test for a specific length, of course, simply test for equality:</p>
<pre><code>if len(items) == required_length:
    ...
</code></pre>
<p>But there's a special case for testing for a zero length list or the inverse. In that case, do not test for equality.</p>
<p>Also, do not do:</p>
<pre><code>if len(items): 
    ...
</code></pre>
<p>Instead, simply do:</p>
<pre><code>if items:     # Then we have some items, not empty!
    ...
</code></pre>
<p>or</p>
<pre><code>if not items: # Then we have an empty list!
    ...
</code></pre>
<p>I <a href="https://stackoverflow.com/questions/53513/best-way-to-check-if-a-list-is-empty/45778282#45778282">explain why here</a> but in short, <code>if items</code> or <code>if not items</code> is both more readable and more performant.</p>
</div>
<div class="post-text" itemprop="text">
<p>While this may not be useful due to the fact that it'd make a lot more sense as being "out of the box" functionality, a fairly simple hack would be to build a class with a <code>length</code> property:</p>
<pre><code>class slist(list):
    @property
    def length(self):
        return len(self)
</code></pre>
<p>You can use it like so:</p>
<pre><code>&gt;&gt;&gt; l = slist(range(10))
&gt;&gt;&gt; l.length
10
&gt;&gt;&gt; print l
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>Essentially, it's exactly identical to a list object, with the added benefit of having an OOP-friendly <code>length</code> property.</p>
<p>As always, your mileage may vary.</p>
</div>
<div class="post-text" itemprop="text">
<p>Besides <a href="https://docs.python.org/library/functions.html#len" rel="nofollow noreferrer"><code>len</code></a> you can also use <a href="https://docs.python.org/library/operator.html#operator.length_hint" rel="nofollow noreferrer"><code>operator.length_hint</code></a> (requires Python 3.4+). For a normal <code>list</code> both are equivalent, but <code>length_hint</code> makes it possible to get the length of a list-iterator, which could be useful in certain circumstances:</p>
<pre><code>&gt;&gt;&gt; from operator import length_hint
&gt;&gt;&gt; l = ["apple", "orange", "banana"]
&gt;&gt;&gt; len(l)
3
&gt;&gt;&gt; length_hint(l)
3

&gt;&gt;&gt; list_iterator = iter(l)
&gt;&gt;&gt; len(list_iterator)
TypeError: object of type 'list_iterator' has no len()
&gt;&gt;&gt; length_hint(list_iterator)
3
</code></pre>
<p>But <code>length_hint</code> is by definition only a "hint", so most of the time <code>len</code> is better.</p>
<p>I've seen several answers suggesting accessing <code>__len__</code>. This is all right when dealing with built-in classes like <code>list</code>, but it could lead to problems with custom classes, because <code>len</code> (and <code>length_hint</code>) implement some safety checks. For example, both do not allow negative lengths or lengths that exceed a certain value (the <code>sys.maxsize</code> value). So it's always safer to use the <code>len</code> function instead of the <code>__len__</code> method!</p>
</div>
<div class="post-text" itemprop="text">
<p>Answering your question as the examples also given previously:</p>
<pre><code>items = []
items.append("apple")
items.append("orange")
items.append("banana")

print items.__len__()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>And for completeness, it is possible without using the <code>len()</code> function (I would not condone this as a good option):</p>
<pre><code>def count(list):
  item_count = 0
  for item in list[:]:
    item_count = item_count + 1
  return item_count

count([1,2,3,4,5])
</code></pre>
<p>(The colon in <code>list[:]</code> is implicit and is therefore also optional.)</p>
</div>
<span class="comment-copy">You are obviously asking for the number of elements in the list. If a searcher comes here looking for the size of the object in memory, this is the actual question &amp; answers they are looking for: <a href="http://stackoverflow.com/q/449560/541136">How do I determine the size of an object in Python?</a></span>
<span class="comment-copy">just so you know, you can just do <code>length = property(len)</code> and skip the one line wrapper function and keep the documentation / introspection of <code>len</code> with your property.</span>
<span class="comment-copy">In Python, names that start with underscores are semantically non-public methods and should not be used by users.</span>
<span class="comment-copy">1. <code>__foo__</code>: this is just a convention, a way for the Python system to use names that won't conflict with user names.  2. <code>_foo</code>: this is just a convention, a way for the programmer to indicate that the variable is private (whatever that means in Python).  3. <code>__foo</code>: this has real meaning: the interpreter replaces this name with <code>_classname__foo</code> as a way to ensure that the name will not overlap with a similar name in another class.  * No other form of underscores have meaning in the Python world.  * There's no difference between class, variable, global, etc in these conventions.</span>
<span class="comment-copy">This Q&amp;A explains why you shouldn't use the special methods directly as a user: <a href="http://stackoverflow.com/q/40272161/541136">stackoverflow.com/q/40272161/541136</a></span>
<span class="comment-copy">@AaronHall but for len function it's almost the same. It might be faster for very large variables. However, I get your point and we should use len(obj) and not obj.__len__().</span>
<span class="comment-copy">Where did the OP say that he doesn't want to use the len() function?</span>
<span class="comment-copy">@GeorgeJ.Adams Where is your creative thinking cap? My answer answers the OP, albeit differently. We value a multiplicity of answers here at StackExchange, right?</span>
<span class="comment-copy">Agreed. But the thing is in this case there is no reason to use your code v. the one liner. It it computationally faster? Is it easier to program this way? Multiple answers are welcome if they show a new dimension.</span>
<span class="comment-copy">@GeorgeJ.Adams I agree. But that is also not a reason to downvote this answer. I stand by my diversity argument.</span>
<span class="comment-copy">@Jonathan Komar i disagree, if the OP was looking for creative non-efficient ways of doing it, he would have specified. Some questions can be answered 1 million different ways, but no one wants to read thru 1 million different answers</span>
