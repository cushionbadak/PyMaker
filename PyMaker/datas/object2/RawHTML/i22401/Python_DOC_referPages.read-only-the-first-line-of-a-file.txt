<div class="post-text" itemprop="text">
<p>How would you get only the first line of a file as a string with Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>.readline()</code> method (<a href="https://docs.python.org/2/library/stdtypes.html#file.readline" rel="noreferrer">Python 2 docs</a>, <a href="https://docs.python.org/3/library/io.html#io.IOBase.readline" rel="noreferrer">Python 3 docs</a>):</p>
<pre><code>with open('myfile.txt') as f:
    first_line = f.readline()
</code></pre>
<p>Some notes:</p>
<ol>
<li>As noted in the docs, unless it is the only line in the file, the string returned from <code>f.readline()</code> will contain a trailing newline. You may wish to use <code>f.readline().strip()</code> instead to remove the newline.</li>
<li>The <code>with</code> statement automatically closes the file again when the block ends.</li>
<li>The <code>with</code> statement only works in Python 2.5 and up, and in Python 2.5 you need to use <code>from __future__ import with_statement</code></li>
<li>In Python 3 you should specify the file encoding for the file you open. <a href="http://docs.python.org/3.1/library/functions.html?highlight=open#open" rel="noreferrer">Read more...</a></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<pre><code>infile = open('filename.txt', 'r')
firstLine = infile.readline()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>fline=open("myfile").readline().rstrip()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do it:</p>
<pre><code>f = open('myfile.txt')
first = f.readline()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>first_line = next(open(filename))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To go back to the beginning of an open file and then return the first line, do this:</p>
<pre><code>my_file.seek(0)
first_line = my_file.readline()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Lots of other answers here, but to answer <em>precisely</em> the question you asked (before @MarkAmery went and edited the original question and changed the meaning):</p>
<pre><code>&gt;&gt;&gt; f = open('myfile.txt')
&gt;&gt;&gt; data = f.read()
&gt;&gt;&gt; # I'm assuming you had the above before asking the question
&gt;&gt;&gt; first_line = data.split('\n', 1)[0]
</code></pre>
<p>In other words, if you've already read in the file (as you said), and have a big block of data in memory, then to get the first line from it efficiently, do a split() on the newline character, once only, and take the first element from the resulting list.</p>
<p>Note that this does not include the <code>\n</code> character at the end of the line, but I'm assuming you don't want it anyway (and a single-line file may not even have one).  Also note that although it's pretty short and quick, it does make a copy of the data, so for a really large blob of memory you may not consider it "efficient".  As always, it depends...</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Solution1:</strong></p>
<pre><code>with open('input_file.txt') as input_file:
    lines=input_file.readlines()
    for line_no, line in enumerate(lines):
        if line_no == 0:
            print(line)
            break
</code></pre>
<ul>
<li><code>lines</code> contains all the lines from the <code>input_file.txt</code> </li>
<li><code>line_no</code>will give the line number from the files  </li>
<li>if the <code>line_no</code> is 0, the first line will be printed as the index
starts from 0  </li>
<li>Similarly, if you want second line, you can write <code>if line_no==1</code></li>
</ul>
<p><strong>Solution 2:</strong></p>
<pre><code>with open('input_file.txt') as input_file:
    lines=input_file.readlines()
    first_line=lines[0]
    print(first_line)
</code></pre>
<ul>
<li><code>lines[0]</code> is the first line.  </li>
<li>Similarly, <code>lines[1]</code> is the second line</li>
</ul>
<p><strong>Solution 3:</strong></p>
<p>Print first <code>N</code> lines. Replace <code>N</code> with any number. If you want first line, then N=1</p>
<pre><code>from itertools import islice

with open('my_file.txt','r') as my_file:
    head = list(islice(my_file, N))
    print(head)
</code></pre>
<p>This is the equivalent code of unix command <code>head</code> </p>
<p><strong>Solution 4:</strong></p>
<pre><code>with open('input.txt', 'r') as fin:
    head, tail = fin.read().split('\n', 1)
    print(head)
    #print(tail)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>f1 = open("input1.txt", "r")
print(f1.readline())
</code></pre>
</div>
<span class="comment-copy">If you've already read the file ("After reading in a file"), you've already read the first line!  (Assuming there is at least one line.)</span>
<span class="comment-copy">Note that the question <i>as now worded</i> has a different meaning than it originally did. Some answers now look silly as they took into account the "after reading in a file" part (which has been removed).</span>
<span class="comment-copy">In Python 3 if the file is ascii or utf8 you don't have to specify the file encoding. And if it is not you should specify the encoding to codecs.open in Python 2 anyway.</span>
<span class="comment-copy">@Evpok <i>"In Python 3 if the file is ascii or utf8 you don't have to specify the file encoding"</i> - if only that were strictly true! The reality is slightly more messy; as noted in the docs, the default encoding used is platform-dependent (and may differ even on the same computer depending upon how you launch Python - for instance, I have seen code that worked at my normal shell by assuming UTF-8 later explode when run through Apache with <code>mod_wsgi</code>).</span>
<span class="comment-copy">You are not closing the file. The <a href="http://stackoverflow.com/a/1904455/855050">solution with <code>with</code></a> is better.</span>
<span class="comment-copy">I came here looking for this. Especially since <code>rstrip()</code> removes the newline character.</span>
<span class="comment-copy">-1; this doesn't close the file, and returns an incorrect result if the first line contains any trailing whitespace besides the newline character itself.</span>
<span class="comment-copy">@MarkAmery: Actually, because the file handle is not assigned to a variable, it is garbage collected right away, which closes the file. (Though, of course, the accepted solution using a context manager is still much better.)</span>
<span class="comment-copy">@acdr What you say is true for CPython but not for other Python implementations - see e.g. the <a href="http://doc.pypy.org/en/latest/cpython_differences.html#differences-related-to-garbage-collection-strategies" rel="nofollow noreferrer">PyPy garbage collection docs</a> which mention as a particular point of interest that <i>"files ... are not promptly closed when they go out of scope"</i>. For this reason, it's typically argued (e.g. at <a href="https://stackoverflow.com/a/7396043/1709587">stackoverflow.com/a/7396043/1709587</a>) that relying upon the behaviour you describe is bad practice.</span>
<span class="comment-copy">Does this close the file as well?</span>
<span class="comment-copy">Eventually, when Python leaves the block.</span>
<span class="comment-copy">Just for understanding better, it would be "my_file.seek(0)                     line = my_file.readline()"</span>
<span class="comment-copy">If this is a big file, f.read() will try to load the entire file into memory which would not be a good idea. An alternative would be to read one character at a time until a newline or EOF is encountered</span>
<span class="comment-copy">Actually, all the other answers are better alternatives than that.  Normally reading a file with readline() and friends would load entire blocks at a time, maybe 32K give or take, and search through that to find the next newline.  Much faster and more efficient.  My answer would be useful only if he's <i>already</i> loading the entire thing, in which case we can assume he's okay with having it all in memory.</span>
<span class="comment-copy">I'm not convinced that I changed the meaning. It's pretty meaningless to ask how to "read" the first line from a file after "reading" the whole file. As such, it's pretty obvious to me that the asker's intent was <i>not</i> to assume that <code>.read()</code> must be called first.</span>
<span class="comment-copy">@MarkAmery, the question was poorly worded ("pretty meaningless") so you guessed at the intent ("obvious to me") and reworded it to match. My interpretation differs. Clearly until and unless harpalss clarifies, all we have are the original wording plus his acceptance of an answer (i.e. "seek(0)") which to me clearly shows that he <i>had</i> already read in the file, at least past the first line.</span>
<span class="comment-copy">you should remove this answer.  it is not the right way and can trick people.</span>
<span class="comment-copy">There are multiple answers over five years old containing <i>exactly this approach</i>. You are doing nothing but creating noise by adding another one.</span>
