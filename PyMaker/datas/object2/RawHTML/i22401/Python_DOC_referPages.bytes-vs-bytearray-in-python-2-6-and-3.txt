<div class="post-text" itemprop="text">
<p>I'm experimenting with <code>bytes</code> vs <code>bytearray</code> in Python 2.6. I don't understand the reason for some differences.</p>
<p>A <code>bytes</code> iterator returns strings:</p>
<pre><code>for i in bytes(b"hi"):
    print(type(i))
</code></pre>
<p>Gives:</p>
<pre><code>&lt;type 'str'&gt;
&lt;type 'str'&gt;
</code></pre>
<p>But a <code>bytearray</code> iterator returns <code>int</code>s:</p>
<pre><code>for i in bytearray(b"hi"):
    print(type(i))
</code></pre>
<p>Gives:</p>
<pre><code>&lt;type 'int'&gt;
&lt;type 'int'&gt;
</code></pre>
<p>Why the difference?</p>
<p>I'd like to write code that will translate well into Python 3. So, is the situation the same in Python 3?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>In Python 2.6 bytes is merely an alias for str</strong>.<br/>
This "pseudo type" was introduced to [partially] prepare programs [and programmers!] to be converted/compatible with Python 3.0 where there is a strict distinction of semantics and use for str (which are systematically unicode) and bytes (which are arrays of octets, for storing data, but not text)</p>
<p>Similarly the b prefix for string literals is ineffective in 2.6, but it is a useful marker in the program, which flags explicitly the intent of the programmer to have the string as a data string rather than a text string. This info can then be used by the 2to3 converter or similar utilities when the program is ported to Py3k.</p>
<p>You may want to check this <a href="https://stackoverflow.com/questions/1736228/python-data-vs-text/1736279#1736279">SO Question</a> for additional info.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>For (at least) Python 3.7</strong></p>
<p><a href="https://docs.python.org/3/library/stdtypes.html" rel="noreferrer">According to the docs:</a></p>
<blockquote>
<p><code>bytes</code> objects are immutable sequences of single bytes</p>
<p><code>bytearray</code> objects are a mutable counterpart to bytes objects.</p>
</blockquote>
<p>And that's pretty much it as far as <code>bytes</code> vs <code>bytearray</code>. In fact, they're <a href="https://docs.python.org/3/library/stdtypes.html#bytes-and-bytearray-operations" rel="noreferrer">fairly interchangeable</a> and designed to flexible enough to be mixed in operations without throwing errors. In fact, there is a whole section in the <a href="https://docs.python.org/3/library/stdtypes.html#bytes-and-bytearray-operations" rel="noreferrer">official documentation</a> dedicated to showing the similarities between the <code>bytes</code> and <code>bytearray</code> apis.</p>
<p>Some clues as to why from the docs:</p>
<blockquote>
<p>Since many major binary protocols are based on the ASCII text encoding, bytes objects offer several methods that are only valid when working with ASCII compatible data and are closely related to string objects in a variety of other ways.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I am not sure since which version, but <code>bytes</code> is actually a <code>str</code>, which you can see if you do <code>type(bytes(b"hi"))</code> -&gt; <code>&lt;type 'str'&gt;</code>.</p>
<p><code>bytearray</code> is a mutable array of bytes, one constructor of which takes a string.</p>
</div>
<div class="post-text" itemprop="text">
<p>I tried it on Python 3.0.</p>
<p>In Python 3.0, a <code>bytes</code> iterator returns <code>int</code>s, not strings as Python 2.6 did:</p>
<pre><code>for i in bytes(b"hi"):
    print(type(i))
</code></pre>
<p>Gives:</p>
<pre><code>&lt;class 'int'&gt;
&lt;class 'int'&gt;
</code></pre>
<p>A <code>bytearray</code> iterator also returns <code>class 'int'</code>s.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>TL;DR</strong></p>
<blockquote>
<p>python2.6+ <code>bytes</code> = python2.6+ <code>str</code> = python3.x <code>bytes</code> != python3.x <code>str</code></p>
<p>python2.6+ <code>bytearray</code> = python3.x <code>bytearray</code></p>
<p>python2.x <code>unicode</code> = python3.x <code>str</code></p>
</blockquote>
<p><strong>Long Answer</strong></p>
<p><code>bytes</code> and <code>str</code> have changed meaning in python since python 3.x. </p>
<p><strong><em>First to answer your question shortly</em></strong>, in python 2.6 <code>bytes(b"hi")</code> is an immutable array of bytes (8-bits or octets). So the type of each <code>byte</code> is simply <code>byte</code>, which is the same as <code>str</code> in python 2.6+ (However, this is not the case in python 3.x)</p>
<p><code>bytearray(b"hi")</code> is again a mutable array of bytes. But when you ask its type, it's an <code>int</code>, because python represents each element of <code>bytearray</code> as an integer in range 0-255 (all possible values for an 8-bit integer). However, an element of <code>bytes</code> array is represented as an ASCII value of that byte.</p>
<p>For example, consider in <strong>Python 2.6+</strong></p>
<pre><code>&gt;&gt;&gt; barr=bytearray(b'hi')
&gt;&gt;&gt; bs=bytes(b'hi')
&gt;&gt;&gt; barr[0] # python shows you an int value for the 8 bits 0110 1000
104 
&gt;&gt;&gt; bs[0] # python shows you an ASCII value for the 8 bits 0110 1000
'h'
&gt;&gt;&gt; chr(barr[0]) # chr converts 104 to its corresponding ASCII value
'h'
&gt;&gt;&gt; bs[0]==chr(barr[0]) # python compares ASCII value of 1st byte of bs and ASCII value of integer represented by first byte of barr
True
</code></pre>
<p>Now python 3.x is an entirely different story. As you might have suspected, it is weird why an <code>str</code> literal would mean a <code>byte</code> in python2.6+. Well <a href="https://stackoverflow.com/a/1740762/1332886">this answer explains that</a></p>
<p>In Python 3.x, an <code>str</code> is a Unicode text (which was previously just an array of bytes, note that Unicode and bytes are two completely different things). <code>bytearray</code> is a <strong><a href="https://docs.python.org/3/library/stdtypes.html#bytearray-objects" rel="nofollow noreferrer">mutable</a></strong> array of bytes while <code>bytes</code> is an <strong>immutable</strong> array of bytes. They both have almost the same functions. Now if I run the above same code again in python 3.x, here is the result. In <strong>Python 3.x</strong></p>
<pre><code>&gt;&gt;&gt; barr=bytearray(b'hi')
&gt;&gt;&gt; bs=bytes(b'hi')
&gt;&gt;&gt; barr[0]
104
&gt;&gt;&gt; bs[0]
104
&gt;&gt;&gt; bs[0]==barr[0] # bytes and bytearray are same thing in python 3.x
True
</code></pre>
<p><code>bytes</code> and <code>bytearray</code> are the same things in python 3.x, except for there mutability. </p>
<p>What happened to <code>str</code> you might ask? <code>str</code> in python 3 got converted to what <code>unicode</code> was in python 2, and <code>unicode</code> type was subsequently removed from python 3 as it was redundant.</p>
<blockquote>
<p>I'd like to write code that will translate well into Python 3. So, is the situation the same in Python 3?</p>
</blockquote>
<p>It depends on what you are trying to do. Are you dealing with bytes or are you dealing with ASCII representation of bytes?</p>
<p><em>If you are dealing with bytes</em>, then my advice is to use <code>bytearray</code> in Python 2, which is the same in python 3. But you loose immutability, if that matter to you.</p>
<p><em>If you are dealing with ASCII or text</em>, then represent your string as <code>u'hi'</code> in Python 2, which has the same meaning in python 3. <code>'u'</code> has special meaning in Python 2, which instructs python 2 to treat a string literal as <code>unicode</code> type. 'u' in python 3 as no meaning, because all string literal in Python 3 are Unicode by default (which is confusingly called <code>str</code> type in python 3, and <code>unicode</code> type in python 2). </p>
</div>
<span class="comment-copy">For more info see: <a href="http://docs.python.org/whatsnew/2.6.html#pep-3112-byte-literals" rel="nofollow noreferrer">docs.python.org/whatsnew/2.6.html#pep-3112-byte-literals</a> and <a href="http://docs.python.org/3.1/library/stdtypes.html#sequence-types-str-bytes-bytearray-list-tuple-range" rel="nofollow noreferrer">docs.python.org/3.1/library/â€¦</a></span>
<span class="comment-copy">However, the <code>bytes</code> object is still immutable, like <code>str</code>, while <code>bytearray</code> is mutable and has a <code>list</code>-like interface.</span>
