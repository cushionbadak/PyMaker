<div class="post-text" itemprop="text">
<p>I have a directory that contains my Python unit tests. Each unit test module is of the form <strong>test_*.py</strong>. I am attempting to make a file called <strong>all_test.py</strong> that will, you guessed it, run all files in the aforementioned test form and return the result. I have tried two methods so far; both have failed. I will show the two methods, and I hope someone out there knows how to actually do this correctly.</p>
<p>For my first valiant attempt, I thought "If I just import all my testing modules in the file, and then call this <code>unittest.main()</code> doodad, it will work, right?" Well, turns out I was wrong.</p>
<pre><code>import glob
import unittest

testSuite = unittest.TestSuite()
test_file_strings = glob.glob('test_*.py')
module_strings = [str[0:len(str)-3] for str in test_file_strings]

if __name__ == "__main__":
     unittest.main()
</code></pre>
<p>This did not work, the result I got was:</p>
<pre><code>$ python all_test.py 

----------------------------------------------------------------------
Ran 0 tests in 0.000s

OK
</code></pre>
<p>For my second try, I though, ok, maybe I will try to do this whole testing thing in a more "manual" fashion. So I attempted to do that below:</p>
<pre><code>import glob
import unittest

testSuite = unittest.TestSuite()
test_file_strings = glob.glob('test_*.py')
module_strings = [str[0:len(str)-3] for str in test_file_strings]
[__import__(str) for str in module_strings]
suites = [unittest.TestLoader().loadTestsFromName(str) for str in module_strings]
[testSuite.addTest(suite) for suite in suites]
print testSuite 

result = unittest.TestResult()
testSuite.run(result)
print result

#Ok, at this point I have a result
#How do I display it as the normal unit test command line output?
if __name__ == "__main__":
    unittest.main()
</code></pre>
<p>This also did not work, but it seems so close!</p>
<pre><code>$ python all_test.py 
&lt;unittest.TestSuite tests=[&lt;unittest.TestSuite tests=[&lt;unittest.TestSuite tests=[&lt;test_main.TestMain testMethod=test_respondes_to_get&gt;]&gt;]&gt;]&gt;
&lt;unittest.TestResult run=1 errors=0 failures=0&gt;

----------------------------------------------------------------------
Ran 0 tests in 0.000s

OK
</code></pre>
<p>I seem to have a suite of some sort, and I can execute the result. I am a little concerned about the fact that it says I have only <code>run=1</code>, seems like that should be <code>run=2</code>, but it is progress. But how do I pass and display the result to main? Or how do I basically get it working so I can just run this file, and in doing so, run all the unit tests in this directory?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a test runner that would do this for you.  <a href="https://nose.readthedocs.org/en/latest/" rel="noreferrer">nose</a> is very good for example.  When run, it will find tests in the current tree and run them.</p>
<p>Updated:</p>
<p>Here's some code from my pre-nose days.  You probably don't want the explicit list of module names, but maybe the rest will be useful to you.</p>
<pre><code>testmodules = [
    'cogapp.test_makefiles',
    'cogapp.test_whiteutils',
    'cogapp.test_cogapp',
    ]

suite = unittest.TestSuite()

for t in testmodules:
    try:
        # If the module defines a suite() function, call it to get the suite.
        mod = __import__(t, globals(), locals(), ['suite'])
        suitefn = getattr(mod, 'suite')
        suite.addTest(suitefn())
    except (ImportError, AttributeError):
        # else, just load all the test cases from the module.
        suite.addTest(unittest.defaultTestLoader.loadTestsFromName(t))

unittest.TextTestRunner().run(suite)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>With Python 2.7 and higher you don't have to write new code or use third-party tools to do this; recursive test execution via the command line is built-in.</p>
<pre><code>python -m unittest discover &lt;test_directory&gt;
# or
python -m unittest discover -s &lt;directory&gt; -p '*_test.py'
</code></pre>
<p>You can read more in the <a href="http://docs.python.org/2/library/unittest.html#command-line-interface" rel="noreferrer">python 2.7</a>
or <a href="http://docs.python.org/3/library/unittest.html#command-line-interface" rel="noreferrer">python 3.x</a> unittest documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is now possible directly from unittest: <a href="https://docs.python.org/2/library/unittest.html#unittest.TestLoader.discover" rel="noreferrer">unittest.TestLoader.discover</a>.</p>
<pre><code>import unittest
loader = unittest.TestLoader()
start_dir = 'path/to/your/test/files'
suite = loader.discover(start_dir)

runner = unittest.TextTestRunner()
runner.run(suite)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well by studying the code above a bit (specifically using <code>TextTestRunner</code> and <code>defaultTestLoader</code>), I was able to get pretty close. Eventually I fixed my code by also just passing all test suites to a single suites constructor, rather than adding them "manually", which fixed my other problems. So here is my solution.</p>
<pre><code>import glob
import unittest

test_files = glob.glob('test_*.py')
module_strings = [test_file[0:len(test_file)-3] for test_file in test_files]
suites = [unittest.defaultTestLoader.loadTestsFromName(test_file) for test_file in module_strings]
test_suite = unittest.TestSuite(suites)
test_runner = unittest.TextTestRunner().run(test_suite)
</code></pre>
<p>Yeah, it is probably easier to just use nose than to do this, but that is besides the point. </p>
</div>
<div class="post-text" itemprop="text">
<p>In python 3, if you're using <code>unittest.TestCase</code>:</p>
<ul>
<li>You must have an empty (or otherwise) <code>__init__.py</code> file in your <code>test</code> directory (<em>must</em> be named <code>test/</code>)</li>
<li>Your test files inside <code>test/</code> match the pattern <code>test_*.py</code>. They can be inside a subdirectory under <code>test/</code>, and those subdirs can be named as anything.</li>
</ul>
<p>Then, you can run all the tests with:</p>
<pre><code>python -m unittest
</code></pre>
<p>Done! A solution less than 100 lines. Hopefully another python beginner saves time by finding this. </p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to run all the tests from various test case classes and you're happy to specify them explicitly then you can do it like this: </p>
<pre><code>from unittest import TestLoader, TextTestRunner, TestSuite
from uclid.test.test_symbols import TestSymbols
from uclid.test.test_patterns import TestPatterns

if __name__ == "__main__":

    loader = TestLoader()
    tests = [
        loader.loadTestsFromTestCase(test)
        for test in (TestSymbols, TestPatterns)
    ]
    suite = TestSuite(tests)

    runner = TextTestRunner(verbosity=2)
    runner.run(suite)
</code></pre>
<p>where <code>uclid</code> is my project and <code>TestSymbols</code> and <code>TestPatterns</code> are subclasses of <code>TestCase</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have used the <code>discover</code> method and an overloading of <code>load_tests</code> to achieve this result in a (minimal, I think) number lines of code:</p>
<pre><code>def load_tests(loader, tests, pattern):
''' Discover and load all unit tests in all files named ``*_test.py`` in ``./src/``
'''
    suite = TestSuite()
    for all_test_suite in unittest.defaultTestLoader.discover('src', pattern='*_tests.py'):
        for test_suite in all_test_suite:
            suite.addTests(test_suite)
    return suite

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>Execution on fives something like</p>
<pre><code>Ran 27 tests in 0.187s
OK
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I tried various approaches but all seem flawed or I have to makeup some code, that's annoying.   But there's a convinient way under linux, that is simply to find every test through certain pattern and then invoke them one by one.</p>
<pre><code>find . -name 'Test*py' -exec python '{}' \;
</code></pre>
<p>and most importantly, it definitely works.</p>
</div>
<div class="post-text" itemprop="text">
<p>In case of a <em>packaged</em> library or application, you don't want to do it. <code>setuptools</code> <a href="https://pythonhosted.org/setuptools/setuptools.html#test-build-package-and-run-a-unittest-suite" rel="nofollow">will do it for you</a>. </p>
<blockquote>
<p>To use this command, your projectâ€™s tests must be wrapped in a <code>unittest</code> test suite by either a function, a TestCase class or method, or a module or package containing <code>TestCase</code> classes. If the named suite is a module, and the module has an <code>additional_tests()</code> function, it is called and the result (which must be a <code>unittest.TestSuite</code>) is added to the tests to be run. If the named suite is a package, <em>any submodules and subpackages are recursively added to the overall test suite</em>.</p>
</blockquote>
<p>Just tell it where your root test package is, like:</p>
<pre><code>setup(
    # ...
    test_suite = 'somepkg.test'
)
</code></pre>
<p>And run <code>python setup.py test</code>.</p>
<p>File-based discovery may be problematic in Python 3, unless you avoid relative imports in your test suite, because <a href="https://docs.python.org/3/library/unittest.html#unittest.TestLoader.discover" rel="nofollow"><code>discover</code></a> uses file import. Even though it supports optional <code>top_level_dir</code>, but I had some infinite recursion errors. So a simple solution for a non-packaged code is to put the following in <code>__init__.py</code> of your test package (see <a href="https://docs.python.org/3/library/unittest.html#load-tests-protocol" rel="nofollow">load_tests Protocol</a>).</p>
<pre><code>import unittest

from . import foo, bar


def load_tests(loader, tests, pattern):
    suite = unittest.TestSuite()
    suite.addTests(loader.loadTestsFromModule(foo))
    suite.addTests(loader.loadTestsFromModule(bar))

    return suite
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I use PyDev/LiClipse and haven't really figured out how to run all tests at once from the GUI. (edit: you right click the root test folder and choose <code>Run as -&gt; Python unit-test</code></p>
<p>This is my current workaround:</p>
<pre><code>import unittest

def load_tests(loader, tests, pattern):
    return loader.discover('.')

if __name__ == '__main__':
    unittest.main()
</code></pre>
<p>I put this code in a module called <code>all</code> in my test directory. If I run this module as a unittest from LiClipse then all tests are run. If I ask to only repeat specific or failed tests then only those tests are run. It doesn't interfere with my commandline test runner either (nosetests) -- it's ignored.</p>
<p>You may need to change the arguments to <code>discover</code> based on your project setup.</p>
</div>
<div class="post-text" itemprop="text">
<p>Based on the answer of <a href="https://stackoverflow.com/a/1735277/104143">Stephen Cagle</a> I added support for nested test modules.</p>
<pre><code>import fnmatch
import os
import unittest

def all_test_modules(root_dir, pattern):
    test_file_names = all_files_in(root_dir, pattern)
    return [path_to_module(str) for str in test_file_names]

def all_files_in(root_dir, pattern):
    matches = []

    for root, dirnames, filenames in os.walk(root_dir):
        for filename in fnmatch.filter(filenames, pattern):
            matches.append(os.path.join(root, filename))

    return matches

def path_to_module(py_file):
    return strip_leading_dots( \
        replace_slash_by_dot(  \
            strip_extension(py_file)))

def strip_extension(py_file):
    return py_file[0:len(py_file) - len('.py')]

def replace_slash_by_dot(str):
    return str.replace('\\', '.').replace('/', '.')

def strip_leading_dots(str):
    while str.startswith('.'):
       str = str[1:len(str)]
    return str

module_names = all_test_modules('.', '*Tests.py')
suites = [unittest.defaultTestLoader.loadTestsFromName(mname) for mname 
    in module_names]

testSuite = unittest.TestSuite(suites)
runner = unittest.TextTestRunner(verbosity=1)
runner.run(testSuite)
</code></pre>
<p>The code searches all subdirectories of <code>.</code> for <code>*Tests.py</code> files which are then loaded. It expects each <code>*Tests.py</code> to contain a single class <code>*Tests(unittest.TestCase)</code> which is loaded in turn and executed one after another.</p>
<p>This works with arbitrary deep nesting of directories/modules, but each directory in between needs to contain an empty <code>__init__.py</code> file at least. This allows the test to load the nested modules by replacing slashes (or backslashes) by dots (see <code>replace_slash_by_dot</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>This BASH script will execute the python unittest test directory from ANYWHERE in the file system, no matter what working directory you are in: its working directory always be where that <code>test</code> directory is located.</p>
<p><strong>ALL TESTS, independent $PWD</strong></p>
<p>unittest Python module is sensitive to your current directory, unless you tell it where (using <code>discover -s</code> option).</p>
<p>This is useful when staying in the <code>./src</code> or <code>./example</code> working directory and you need a quick overall unit test:</p>
<pre class="lang-sh prettyprint-override"><code>#!/bin/bash
this_program="$0"
dirname="`dirname $this_program`"
readlink="`readlink -e $dirname`"

python -m unittest discover -s "$readlink"/test -v
</code></pre>
<p><strong>SELECTED TESTS, independent $PWD</strong></p>
<p>I name this utility file: <code>runone.py</code> and use it like this:</p>
<pre class="lang-sh prettyprint-override"><code>runone.py &lt;test-python-filename-minus-dot-py-fileextension&gt;
</code></pre>
<pre class="lang-sh prettyprint-override"><code>#!/bin/bash
this_program="$0"
dirname="`dirname $this_program`"
readlink="`readlink -e $dirname`"

(cd "$dirname"/test; python -m unittest $1)
</code></pre>
<p>No need for a <code>test/__init__.py</code> file to burden your package/memory-overhead during production.</p>
</div>
<div class="post-text" itemprop="text">
<p>Because Test discovery seems to be a complete subject, there is some dedicated framework to test discovery : </p>
<ul>
<li><a href="https://nose.readthedocs.org/en/latest/" rel="nofollow">nose</a></li>
<li><a href="http://pytest.org/latest/goodpractises.html#python-test-discovery" rel="nofollow">Py.Test</a></li>
</ul>
<p>More reading here : <a href="https://wiki.python.org/moin/PythonTestingToolsTaxonomy" rel="nofollow">https://wiki.python.org/moin/PythonTestingToolsTaxonomy</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my approach by creating <a href="https://github.com/mycognitive/ads_tests/blob/master/selenium/run_tests.py" rel="nofollow">a wrapper</a> to run tests from the command line:</p>
<pre><code>#!/usr/bin/env python3
import os, sys, unittest, argparse, inspect, logging

if __name__ == '__main__':
    # Parse arguments.
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-?", "--help",     action="help",                        help="show this help message and exit" )
    parser.add_argument("-v", "--verbose",  action="store_true", dest="verbose",  help="increase output verbosity" )
    parser.add_argument("-d", "--debug",    action="store_true", dest="debug",    help="show debug messages" )
    parser.add_argument("-h", "--host",     action="store",      dest="host",     help="Destination host" )
    parser.add_argument("-b", "--browser",  action="store",      dest="browser",  help="Browser driver.", choices=["Firefox", "Chrome", "IE", "Opera", "PhantomJS"] )
    parser.add_argument("-r", "--reports-dir", action="store",   dest="dir",      help="Directory to save screenshots.", default="reports")
    parser.add_argument('files', nargs='*')
    args = parser.parse_args()

    # Load files from the arguments.
    for filename in args.files:
        exec(open(filename).read())

    # See: http://codereview.stackexchange.com/q/88655/15346
    def make_suite(tc_class):
        testloader = unittest.TestLoader()
        testnames = testloader.getTestCaseNames(tc_class)
        suite = unittest.TestSuite()
        for name in testnames:
            suite.addTest(tc_class(name, cargs=args))
        return suite

    # Add all tests.
    alltests = unittest.TestSuite()
    for name, obj in inspect.getmembers(sys.modules[__name__]):
        if inspect.isclass(obj) and name.startswith("FooTest"):
            alltests.addTest(make_suite(obj))

    # Set-up logger
    verbose = bool(os.environ.get('VERBOSE', args.verbose))
    debug   = bool(os.environ.get('DEBUG', args.debug))
    if verbose or debug:
        logging.basicConfig( stream=sys.stdout )
        root = logging.getLogger()
        root.setLevel(logging.INFO if verbose else logging.DEBUG)
        ch = logging.StreamHandler(sys.stdout)
        ch.setLevel(logging.INFO if verbose else logging.DEBUG)
        ch.setFormatter(logging.Formatter('%(asctime)s %(levelname)s: %(name)s: %(message)s'))
        root.addHandler(ch)
    else:
        logging.basicConfig(stream=sys.stderr)

    # Run tests.
    result = unittest.TextTestRunner(verbosity=2).run(alltests)
    sys.exit(not result.wasSuccessful())
</code></pre>
<p>For sake of simplicity, please excuse my non-<a href="https://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP8</a> coding standards.</p>
<p>Then you can create BaseTest class for common components for all your tests, so each of your test would simply look like:</p>
<pre><code>from BaseTest import BaseTest
class FooTestPagesBasic(BaseTest):
    def test_foo(self):
        driver = self.driver
        driver.get(self.base_url + "/")
</code></pre>
<p>To run, you simply specifying tests as part of the command line arguments, e.g.:</p>
<pre><code>./run_tests.py -h http://example.com/ tests/**/*.py
</code></pre>
</div>
<span class="comment-copy">Skip down to Travis' answer if you're using Python 2.7+</span>
<span class="comment-copy">did you ever try running the tests from an test instance object?</span>
<span class="comment-copy">See <a href="https://stackoverflow.com/a/44814211/4754881">this answer</a> for a solution with an example file structure.</span>
<span class="comment-copy">Is the advantage of this approach over just explicitly importing all of your test modules in to one test_all.py module and calling unittest.main() that you can optionally declare a test suite in some modules and not in others?</span>
<span class="comment-copy">I tried out nose and it works perfectly. It was easy to install and run in my project. I was even able to automate it with a few lines of script, running inside a virtualenv. +1 for nose!</span>
<span class="comment-copy">Not always doable: sometimes importing structure of the project can lead to nose getting confused if it tries to run the imports on modules.</span>
<span class="comment-copy">Note that <a href="http://nose.readthedocs.io/en/latest/" rel="nofollow noreferrer">nose</a> has been "in maintenance mode for the past several years" and it is currently advised to use <a href="https://github.com/nose-devs/nose2" rel="nofollow noreferrer">nose2</a>, <a href="http://docs.pytest.org/en/latest/" rel="nofollow noreferrer">pytest</a>, or just plain <a href="https://docs.python.org/2/library/unittest.html" rel="nofollow noreferrer">unittest</a> / <a href="https://pypi.python.org/pypi/unittest2" rel="nofollow noreferrer">unittest2</a> for new projects.</span>
<span class="comment-copy">did you ever try running the tests from an test instance object?</span>
<span class="comment-copy">problems include: ImportError: Start directory is not importable:</span>
<span class="comment-copy">At least with Python 2.7.8 on Linux neither command line invocation gives me recursion. My project has several subprojects whose unit tests live in respective "unit_tests/&lt;subproject&gt;/python/" directories. If I specify such a path the unit tests for that subproject are run, but with just "unit_tests" as test directory argument no tests are found (instead of all tests for all subprojects, as I hoped). Any hint?</span>
<span class="comment-copy">About recursion: The first command without a &lt;test_directory&gt; defaults to "." and recurses to <i>submodules</i>. That is, all tests directories you want discovered needs to have a <b>init</b>.py. If they do, they will get found by the discover command. Just tried it, it worked.</span>
<span class="comment-copy">This worked for me. I have a tests folder with four files, run this from my Linux terminal, great stuff.</span>
<span class="comment-copy">Thanks! Why isn't this the accepted answer? In my view, the better answer is always the one that doesn't require any external dependencies...</span>
<span class="comment-copy">Works like a charm!</span>
<span class="comment-copy">I have tried this method also, have couple tests, but works perfectly. Excellent!!! But I'm curious I have only 4 tests. Together they run 0.032s, but when I use this method to run them all, i get result <code>.... ---------------------------------------------------------------------- Ran 4 tests in 0.000s  OK</code> Why? The difference, where it comes from?</span>
<span class="comment-copy">I am having trouble running a file that looks like this from the command line. How should it be invoked?</span>
<span class="comment-copy"><code>python file.py</code></span>
<span class="comment-copy">good, it works fine for the current directory, how to invoke the sub-directly ?</span>
<span class="comment-copy">Larry, see the new answer (<a href="http://stackoverflow.com/a/24562019/104143">stackoverflow.com/a/24562019/104143</a>) for recursive test discovery</span>
<span class="comment-copy">did you ever try running the tests from an test instance object?</span>
<span class="comment-copy">Note that by default it only searches for tests in filenames beginning with "test"</span>
<span class="comment-copy">That's correct, the original question referred to the fact that "Each unit test module is of the form test_*.py.", so this answer in direct reply. I've now updated the answer to be more explicit</span>
<span class="comment-copy">From the <a href="https://docs.python.org/2/library/unittest.html#unittest.TestLoader" rel="nofollow noreferrer">unittest.TestLoader docs</a>: "Normally, there is no need to create an instance of this class; the unittest module provides an instance that can be shared as unittest.defaultTestLoader." Also since <code>TestSuite</code> accepts an <i>iterable</i> as an argument, you can construct said iterable in a loop to avoid repeating <code>loader.loadTestsFromTestCase</code>.</span>
<span class="comment-copy">@Two-Bit Alchemist your second point in particular is nice.  I'd change the code to include but I can't test it.  (First mod would make it look like too much like Java for my liking.. though I realize I'm being irrational (screw them an their camel case variable names)).</span>
<span class="comment-copy">This is my fav, very clean.  Was able to package this and make it an argument in my regular command line.</span>
<span class="comment-copy">this is available for python2.7 only, I guess</span>
<span class="comment-copy">@larrycai Maybe, I am usually on Python 3, sometimes Python 2.7. The question was not tied to a specific version.</span>
<span class="comment-copy">I'm on Python 3.4 and discover returns a suite, making the loop redundant.</span>
<span class="comment-copy">For future Larry's: "Many new features were added to unittest in Python 2.7, including test discovery. <a href="https://pypi.python.org/pypi/unittest2" rel="nofollow noreferrer">unittest2</a> allows you to use these features with earlier versions of Python."</span>
<span class="comment-copy">The names of all test files and test methods should start with "test_". Otherwise the command "Run as -&gt; Python unit test" wont find them.</span>
<span class="comment-copy">most of this answer has nothing to do with test discovery (i.e logging, etc).  Stack Overflow is for answering questions, not showing off unrelated code.</span>
