<div class="post-text" itemprop="text">
<p>If I do </p>
<pre><code>url = "http://example.com?p=" + urllib.quote(query)
</code></pre>
<ol>
<li>It doesn't encode <code>/</code> to <code>%2F</code> (breaks OAuth normalization)</li>
<li>It doesn't handle Unicode (it throws an exception)</li>
</ol>
<p>Is there a better library?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="http://docs.python.org/library/urllib.html#urllib.quote" rel="noreferrer">docs</a>:</p>
<pre><code>urllib.quote(string[, safe])
</code></pre>
<blockquote>
<p>Replace special characters in string
  using the %xx escape. Letters, digits,
  and the characters '_.-' are never
  quoted. By default, this function is
  intended for quoting the path section
  of the URL.The optional safe parameter
  specifies additional characters that
  should not be quoted — <strong>its default
  value is '/'</strong></p>
</blockquote>
<p>That means passing '' for safe will solve your first issue:</p>
<pre><code>&gt;&gt;&gt; urllib.quote('/test')
'/test'
&gt;&gt;&gt; urllib.quote('/test', safe='')
'%2Ftest'
</code></pre>
<p>About the second issue, there is a bug report about it <a href="http://bugs.python.org/issue1712522" rel="noreferrer">here</a>. Apparently it was fixed in python 3. You can workaround it by encoding as utf8 like this:</p>
<pre><code>&gt;&gt;&gt; query = urllib.quote(u"Müller".encode('utf8'))
&gt;&gt;&gt; print urllib.unquote(query).decode('utf8')
Müller
</code></pre>
<p>By the way have a look at <a href="http://docs.python.org/library/urllib.html#urllib.urlencode" rel="noreferrer">urlencode</a></p>
<p>Note that <code>urllib.quote</code> moved to <code>urllib.parse.quote</code> in Python3</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3, <a href="http://docs.python.org/2/library/urllib.html#urllib.quote" rel="noreferrer"><code>urllib.quote</code></a> has been moved to <a href="http://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote" rel="noreferrer"><code>urllib.parse.quote</code></a> and it does handle unicode by default.</p>
<pre><code>&gt;&gt;&gt; from urllib.parse import quote
&gt;&gt;&gt; quote('/test')
'/test'
&gt;&gt;&gt; quote('/test', safe='')
'%2Ftest'
&gt;&gt;&gt; quote('/El Niño/')
'/El%20Ni%C3%B1o/'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My answer is similar to Paolo's answer.</p>
<p>I think module <code>requests</code> is much better. It's based on <code>urllib3</code>.
You can try this:</p>
<pre><code>&gt;&gt;&gt; from requests.utils import quote
&gt;&gt;&gt; quote('/test')
'/test'
&gt;&gt;&gt; quote('/test', safe='')
'%2Ftest'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're using django, you can use urlquote:</p>
<pre><code>&gt;&gt;&gt; from django.utils.http import urlquote
&gt;&gt;&gt; urlquote(u"Müller")
u'M%C3%BCller'
</code></pre>
<p>Note that changes to Python since this answer was published mean that this is now a legacy wrapper. From the Django 2.1 source code for django.utils.http:</p>
<pre><code>A legacy compatibility wrapper to Python's urllib.parse.quote() function.
(was used for unicode handling on Python 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is better to use <code>urlencode</code> here. Not much difference for single parameter but IMHO makes the code clearer. (It looks confusing to see a function <code>quote_plus</code>! especially those coming from other languates)</p>
<pre><code>In [21]: query='lskdfj/sdfkjdf/ksdfj skfj'

In [22]: val=34

In [23]: from urllib.parse import urlencode

In [24]: encoded = urlencode(dict(p=query,val=val))

In [25]: print(f"http://example.com?{encoded}")
http://example.com?p=lskdfj%2Fsdfkjdf%2Fksdfj+skfj&amp;val=34
</code></pre>
<h2>Docs</h2>
<p>urlencode: <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode" rel="nofollow noreferrer">https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode</a></p>
<p>quote_plus: <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus" rel="nofollow noreferrer">https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus</a></p>
</div>
<span class="comment-copy">These are not URL parameters, FYI.  You should clarify.</span>
<span class="comment-copy">Thanks you, both worked great. urlencode just calls quoteplus many times in a loop, which isn't the correct normalization for my task (oauth).</span>
<span class="comment-copy">the spec: <a href="https://www.ietf.org/rfc/rfc2396.txt" rel="nofollow noreferrer">rfc 2396</a> defines these as reserved <code>reserved    = ";" | "/" | "?" | ":" | "@" | "&amp;" | "=" | "+" |                     "$" | ","</code> Which is what urllib.quote is dealing with.</span>
<span class="comment-copy"><code>urllib.quote</code> moved to <code>urlib.parse.quote</code>, since Python3.</span>
<span class="comment-copy"><code>urllib.parse.quote</code> <a href="https://docs.python.org/3/library/urllib.parse.html#url-quoting" rel="nofollow noreferrer">docs</a></span>
<span class="comment-copy">Also, in the case of encoding a search query, you maybe better off using quote_plus:  <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus" rel="nofollow noreferrer">docs.python.org/3/library/…</a>  1. It encodes slashes by default 2. It also encodes spaces</span>
<span class="comment-copy">The name <code>quote</code> is rather vague as a global. It might be nicer to use something like urlencode: <code>from urllib.parse import quote as urlencode</code>.</span>
<span class="comment-copy"><code>requests.utils.quote</code> is link to python <code>quote</code>. See <a href="https://github.com/kennethreitz/requests/blob/master/requests/compat.py#L36" rel="nofollow noreferrer">request sources</a>.</span>
<span class="comment-copy"><code>requests.utils.quote</code> is a thin compatibility wrapper to <code>urllib.quote</code> for python 2 and <code>urllib.parse.quote</code> for python 3</span>
