<div class="post-text" itemprop="text">
<p>I know how to do this the other way around... it would be:</p>
<pre><code>&gt;&gt;&gt; dt.rfc822()
'Sun, 09 Mar 1997 13:45:00 -0500'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>
In [1]: import rfc822     # This only works for python 2 series

In [2]: rfc822.parsedate_tz('Sun, 09 Mar 1997 13:45:00 -0500')
Out[2]: (1997, 3, 9, 13, 45, 0, 0, 1, 0, -18000)
</code></pre>
<p>in python3 parsedate_tz has moved to email.utils</p>
<pre><code>
&gt;&gt;&gt; import email.utils   # this works on Python2.5 and up
&gt;&gt;&gt; email.utils.parsedate_tz('Sun, 09 Mar 1997 13:45:00 -0500')
(1997, 3, 9, 13, 45, 0, 0, 1, -1, -18000)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As of python 3.3 there is <a href="https://docs.python.org/3/library/email.util.html#email.utils.parsedate_to_datetime" rel="nofollow noreferrer" title="email.utils.parsedate_to_datetime(date)">email.utils.parsedate_to_datetime(date)</a></p>
<pre><code>&gt;&gt;&gt; from email.utils import parsedate_to_datetime
&gt;&gt;&gt; datestr = 'Sun, 09 Mar 1997 13:45:00 -0500'
&gt;&gt;&gt; parsedate_to_datetime(datestr)
datetime.datetime(1997, 3, 9, 13, 45, tzinfo=datetime.timezone(datetime.timedelta(-1, 68400)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you strip off the time zone, you can do it like this:</p>
<pre><code>datetime.datetime.strptime('Sun, 09 Mar 1997 13:45:00', '%a, %d %b %Y %H:%M:%S')
</code></pre>
</div>
<span class="comment-copy">The above technique does not return <code>datetime</code>, rather a <code>tuple</code>. The complete code is <code>datetime.datetime.fromtimestamp( email.utils.mktime_tz(email.utils.parsedate_tz( rfcdate )), pytz.utc )</code>. Ref: <a href="http://parand.com/say/index.php/2008/02/11/parsing-and-normalizing-dates-with-timezones-in-python/" rel="nofollow noreferrer">parand.com/say/index.php/2008/02/11/â€¦</a></span>
<span class="comment-copy">Continuation on @AppleGrew comment: Or by using rfc822 module <code>datetime.datetime.fromtimestamp(rfc822.mktime_tz(rfc822.parsedate_tz(rfc822String)))</code></span>
<span class="comment-copy">In python 3, try email.utils.parsedate_to_datetime.</span>
<span class="comment-copy">@ThomasAhle, the <code>rfc822</code> module predated RFC2822. Turns out it's not a great idea to name the module after the RFC :) This was fixed in Python3. The current one is actually RFC5322</span>
<span class="comment-copy">You can simplify slightly; there's an <code>utcfromtimestamp</code> method for dates in UTC: <code>datetime.datetime.utcfromtimestamp(email.utils.mktime_tz(email.utils.parsedate_tz(rfcdate)))</code></span>
<span class="comment-copy">This won't work for most locale settings.</span>
<span class="comment-copy">This doesn't appear to have timezones</span>
<span class="comment-copy">He specifically asked how to do it for rfc822 date/time. Since rfc822 includes the timezone, you're answer doesn't solve it. Even worse, it actually returns a different time, depending on the timezone the code was run in, and the timezone the string was generated in (which in web-applications may vary greatly).</span>
