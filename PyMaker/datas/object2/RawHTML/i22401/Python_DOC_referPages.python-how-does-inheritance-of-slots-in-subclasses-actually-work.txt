<div class="post-text" itemprop="text">
<p>In the <a href="http://docs.python.org/reference/datamodel.html#slots" rel="noreferrer">Python data model reference section on slots</a> there is a list of notes on using <code>__slots__</code>.  I am thoroughly confused by the 1st and 6th items, because they seem to be contradicting each other. </p>
<p><strong>First item:</strong></p>
<ul>
<li>When inheriting from a class without
<code>__slots__</code>, the <code>__dict__</code> attribute
of that class will always be
accessible, so a <code>__slots__</code>
definition in the subclass is
meaningless.</li>
</ul>
<p><strong>Sixth item:</strong></p>
<ul>
<li>The action of a <code>__slots__</code>
declaration is limited to the class
where it is defined. As a result,
subclasses will have a <code>__dict__</code>
unless they also define <code>__slots__</code>
(which must only contain names of any
additional slots).</li>
</ul>
<p>It seems to me these items could be better worded or shown through code, but I have been trying to wrap my head around this and am still coming up confused. I do understand how <code>__slots__</code> are <a href="https://stackoverflow.com/questions/472000/python-slots/472024#472024">supposed to be used</a>, and I am trying to get a better grasp on how they work.</p>
<p><strong>The Question:</strong></p>
<p>Can someone please explain to me in plain language what the conditions are for inheritance of slots when subclassing? </p>
<p>(Simple code examples would be helpful but not necessary.)</p>
</div>
<div class="post-text" itemprop="text">
<p>As others have mentioned, the sole reason for defining <code>__slots__</code> is to save some memory, when you have simple objects with a predefined set of attributes and don't want each to carry around a dictionary.  This is meaningful only for classes of which you plan to have many instances, of course.</p>
<p>The savings may not be immediately obvious -- consider...:</p>
<pre><code>&gt;&gt;&gt; class NoSlots(object): pass
... 
&gt;&gt;&gt; n = NoSlots()
&gt;&gt;&gt; class WithSlots(object): __slots__ = 'a', 'b', 'c'
... 
&gt;&gt;&gt; w = WithSlots()
&gt;&gt;&gt; n.a = n.b = n.c = 23
&gt;&gt;&gt; w.a = w.b = w.c = 23
&gt;&gt;&gt; sys.getsizeof(n)
32
&gt;&gt;&gt; sys.getsizeof(w)
36
</code></pre>
<p>From this, it would seem the with-slots size is <em>larger</em> than the no-slots size!  But that's a mistake, because <code>sys.getsizeof</code> doesn't consider "object contents" such as the dictionary:</p>
<pre><code>&gt;&gt;&gt; sys.getsizeof(n.__dict__)
140
</code></pre>
<p>Since the dict alone takes 140 bytes, clearly the "32 bytes" object <code>n</code> is alleged to take are not considering all that's involved in each instance.  You can do a better job with third-party extensions such as <a href="http://code.google.com/p/pympler/" rel="noreferrer">pympler</a>:</p>
<pre><code>&gt;&gt;&gt; import pympler.asizeof
&gt;&gt;&gt; pympler.asizeof.asizeof(w)
96
&gt;&gt;&gt; pympler.asizeof.asizeof(n)
288
</code></pre>
<p>This shows much more clearly the memory footprint that's saved by <code>__slots__</code>: for a simple object such as this case, it's a bit less than 200 bytes, almost 2/3 of the object's overall footprint.  Now, since these days a megabyte more or less doesn't really matter all that much to most applications, this also tells you that <code>__slots__</code> is not worth the bother if you're going to have just a few thousand instances around at a time -- however, for millions of instances, it sure does make a very important difference. You can also get a microscopic speedup (partly due to better cache use for small objects with <code>__slots__</code>):</p>
<pre><code>$ python -mtimeit -s'class S(object): __slots__="x","y"' -s's=S(); s.x=s.y=23' 's.x'
10000000 loops, best of 3: 0.37 usec per loop
$ python -mtimeit -s'class S(object): pass' -s's=S(); s.x=s.y=23' 's.x'
1000000 loops, best of 3: 0.604 usec per loop
$ python -mtimeit -s'class S(object): __slots__="x","y"' -s's=S(); s.x=s.y=23' 's.x=45'
1000000 loops, best of 3: 0.28 usec per loop
$ python -mtimeit -s'class S(object): pass' -s's=S(); s.x=s.y=23' 's.x=45'
1000000 loops, best of 3: 0.332 usec per loop
</code></pre>
<p>but this is somewhat dependent on Python version (these are the numbers I measure repeatably with 2.5; with 2.6, I see a larger relative advantage to <code>__slots__</code> for <strong>setting</strong> an attribute, but none at all, indeed a tiny <strong>dis</strong>advantage, for <strong>getting</strong> it).</p>
<p>Now, regarding inheritance: for an instance to be dict-less, <strong>all</strong> classes up its inheritance chain must also have dict-less instances.  Classes with dict-less instances are those which define <code>__slots__</code>, plus most built-in types (built-in types whose instances have dicts are those on whose instances you can set arbitrary attributes, such as functions). Overlaps in slot names are not forbidden, but they're useless and waste some memory, since slots are inherited:</p>
<pre><code>&gt;&gt;&gt; class A(object): __slots__='a'
... 
&gt;&gt;&gt; class AB(A): __slots__='b'
... 
&gt;&gt;&gt; ab=AB()
&gt;&gt;&gt; ab.a = ab.b = 23
&gt;&gt;&gt; 
</code></pre>
<p>as you see, you can set attribute <code>a</code> on an <code>AB</code> instance -- <code>AB</code> itself only defines slot <code>b</code>, but it inherits slot <code>a</code> from <code>A</code>.  Repeating the inherited slot isn't forbidden:</p>
<pre><code>&gt;&gt;&gt; class ABRed(A): __slots__='a','b'
... 
&gt;&gt;&gt; abr=ABRed()
&gt;&gt;&gt; abr.a = abr.b = 23
</code></pre>
<p>but does waste a little memory:</p>
<pre><code>&gt;&gt;&gt; pympler.asizeof.asizeof(ab)
88
&gt;&gt;&gt; pympler.asizeof.asizeof(abr)
96
</code></pre>
<p>so there's really no reason to do it.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>class WithSlots(object):
    __slots__ = "a_slot"

class NoSlots(object):       # This class has __dict__
    pass
</code></pre>
<h2>First Item</h2>
<pre><code>class A(NoSlots):            # even though A has __slots__, it inherits __dict__
    __slots__ = "a_slot"     # from NoSlots, therefore __slots__ has no effect
</code></pre>
<h2>Sixth Item</h2>
<pre><code>class B(WithSlots):          # This class has no __dict__
    __slots__ = "some_slot"

class C(WithSlots):          # This class has __dict__, because it doesn't
    pass                     # specify __slots__ even though the superclass does.
</code></pre>
<p>You probably won't need to use <code>__slots__</code> in the near future. It's only intended to save memory at the cost of some flexibility. Unless you have tens of thousands of objects it won't matter.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h1>Python: How does inheritance of <code>__slots__</code> in subclasses actually work?</h1>
<p>I am thoroughly confused by the 1st and 6th items, because they seem to be contradicting each other. </p>
</blockquote>
<p>Those items don't actually contradict each other. The first regards subclasses of classes that don't implement <code>__slots__</code>, the second regards subclasses of classes that <em>do</em> implement <code>__slots__</code>.</p>
<h2>Subclasses of classes that don't implement <code>__slots__</code></h2>
<p>I am increasingly aware that as great as the Python docs are (rightly) reputed to be, they are not perfect, especially regarding the less used features of the language. I would alter the <a href="https://docs.python.org/2/reference/datamodel.html" rel="nofollow noreferrer">docs</a> as follows:</p>
<blockquote>
<p>When inheriting from a class without <code>__slots__</code>, the <code>__dict__</code> attribute
  of that class will always be accessible<strike>, so a <code>__slots__</code> definition in
  the subclass is meaningless </strike>.</p>
</blockquote>
<p><code>__slots__</code> is still meaningful for such a class. It documents the expected names of attributes of the class. It also <em>creates</em> slots for those attributes - they will get the faster lookups and use less space. It just allows for other attributes, which will be assigned to the <code>__dict__</code>.</p>
<p>This <a href="https://github.com/python/cpython/pull/1819/files" rel="nofollow noreferrer">change has been accepted</a> and is now in the <a href="https://docs.python.org/3/reference/datamodel.html#notes-on-using-slots" rel="nofollow noreferrer">latest documentation</a>.</p>
<p>Here's an example:</p>
<pre><code>class Foo: 
    """instances have __dict__"""

class Bar(Foo):
    __slots__ = 'foo', 'bar'
</code></pre>
<p><code>Bar</code> not only has the slots it declares, it also has Foo's slots - which include <code>__dict__</code>:</p>
<pre><code>&gt;&gt;&gt; b = Bar()
&gt;&gt;&gt; b.foo = 'foo'
&gt;&gt;&gt; b.quux = 'quux'
&gt;&gt;&gt; vars(b)
{'quux': 'quux'}
&gt;&gt;&gt; b.foo
'foo'
</code></pre>
<h2>Subclasses of classes that <em>do</em> implement <code>__slots__</code></h2>
<blockquote>
<p>The action of a <code>__slots__</code> declaration is limited to the class where it
  is defined. As a result, subclasses will have a <code>__dict__</code> unless they
  also define <code>__slots__</code> (which must only contain names of any additional
  slots).</p>
</blockquote>
<p>Well that's not quite right either. The action of a <code>__slots__</code> declaration is <em>not</em> entirely limited to the class where it is defined. They can have implications for multiple inheritance, for example.</p>
<p>I would change that to:</p>
<blockquote>
<p><strong>For classes in an inheritance tree that defines <code>__slots__</code>,</strong> subclasses will have a <code>__dict__</code> unless they
  also define <code>__slots__</code> (which must only contain names of any additional
  slots).</p>
</blockquote>
<p>I have actually updated it to read:</p>
<blockquote>
<p>The action of a <code>__slots__</code> declaration is not limited to the class
  where it is defined. <code>__slots__</code> declared in parents are available in
  child classes. However, child subclasses will get a <code>__dict__</code> and
  <code>__weakref__</code> unless they also define <code>__slots__</code> (which should only contain names of any additional slots).</p>
</blockquote>
<p>Here's an example:</p>
<pre><code>class Foo:
    __slots__ = 'foo'

class Bar(Foo):
    """instances get __dict__ and __weakref__"""
</code></pre>
<p>And we see that a subclass of a slotted class gets to use the slots:</p>
<pre><code>&gt;&gt;&gt; b = Bar()
&gt;&gt;&gt; b.foo = 'foo'
&gt;&gt;&gt; b.bar = 'bar'
&gt;&gt;&gt; vars(b)
{'bar': 'bar'}
&gt;&gt;&gt; b.foo
'foo'
</code></pre>
<p>(For more on <code>__slots__</code>, <a href="https://stackoverflow.com/questions/472000/usage-of-slots/28059785#28059785">see my answer here</a>.)</p>
</div>
<div class="post-text" itemprop="text">
<p>From the answer you linked:</p>
<blockquote>
<p>The proper use of <code>__slots__</code> is to save space in objects. Instead of having a dynamic dict...</p>
</blockquote>
<p>"When inheriting from a class without <code>__slots__</code>, the <code>__dict__</code> attribute of that class will always be accessible", so adding your own <code>__slots__</code> cannot prevent objects from having a <code>__dict__</code>, and cannot save space.</p>
<p>The bit about <code>__slots__</code> not being inherited is a little obtuse.  Remember that it's a magic attribute and doesn't behave like other attributes, then re-read that as saying this magic slots behavior isn't inherited.  (That's really all there is to it.)</p>
</div>
<div class="post-text" itemprop="text">
<p>My understanding is as follows:</p>
<ul>
<li><p>class <code>X</code> has no <code>__dict__</code> <code>&lt;-------&gt;</code> class <code>X</code> and its superclasses all have <code>__slots__</code> specified</p></li>
<li><p>in this case, the actual slots of the class are comprised from the union of <code>__slots__</code> declarations  for <code>X</code> and its superclasses; the behavior is undefined (and will become an error) if this union is not disjoint</p></li>
</ul>
</div>
<span class="comment-copy">According to the docs <a href="https://docs.python.org/2/reference/datamodel.html#slots" rel="nofollow noreferrer">docs.python.org/2/reference/datamodel.html#slots</a> "If a class defines a slot also defined in a base class, the instance variable defined by the base class slot is inaccessible (except by retrieving its descriptor directly from the base class). This renders the meaning of the program undefined. In the future, a check may be added to prevent this." - this undefined behavior worries me a bit - I have asked about it ( <a href="https://stackoverflow.com/q/41159714/281545">stackoverflow.com/q/41159714/281545</a> ) but got no answer</span>
<span class="comment-copy">Awesome explanation and kudos for coining the term <a href="https://youtu.be/wdoBLtLwpQQ?t=31" rel="nofollow noreferrer">dict-less</a></span>
<span class="comment-copy">Agreed that it is a little obtuse and could definitely benefit from the conciseness of your response.  Thanks.</span>
<span class="comment-copy"><code>union is not disjoint</code> is not a phrase from a plain English. :) As @Alex Martelli've shown it is not an error if <b>slots</b> sets are not disjoint. Otherwise -- nice summary.</span>
<span class="comment-copy">@J.F.Sebastian The "meaning of the program is undefined" if they are not disjoint. The docs explicitly state this.</span>
