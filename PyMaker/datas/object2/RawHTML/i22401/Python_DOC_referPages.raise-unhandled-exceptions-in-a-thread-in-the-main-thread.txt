<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2829329/catch-a-threads-exception-in-the-caller-thread-in-python">Catch a thread's exception in the caller thread in Python</a>
<span class="question-originals-answer-count">
                    14 answers
                </span>
</li>
</ul>
</div>
<p>There are some similar questions, but none supply the answer I require.</p>
<p>If I create threads via <code>threading.Thread</code>, which then throw exceptions which are unhandled, those threads are terminated. I wish to retain the default print out of the exception details with the stack trace, but bring down the whole process as well. </p>
<p>I've considered that it might be possible to catch all exceptions in the threads, and reraise them on the main thread object, or perhaps it's possible to manually perform the default exception handling, and then raise a <code>SystemExit</code> on the main thread.</p>
<p>What's the best way to go about this?</p>
</div>
<div class="post-text" itemprop="text">
<p>I wrote about <a href="http://nedbatchelder.com/blog/200711/rethrowing_exceptions_in_python.html" rel="nofollow noreferrer">Re-throwing exceptions in Python</a>, including something very much like this as an example.</p>
<p>On your worker thread you do this (Python 2.x, see below for Python 3.x version):</p>
<pre><code>try:
    self.result = self.do_something_dangerous()
except Exception, e:
    import sys
    self.exc_info = sys.exc_info()
</code></pre>
<p>and on your main thread you do this:</p>
<pre><code>if self.exc_info:
    raise self.exc_info[1], None, self.exc_info[2]
return self.result
</code></pre>
<p>The exception will appear in the main thread just as if it had been raised in the worker thread.</p>
<p><strong>Python 3.x:</strong></p>
<pre><code>try:
    self.result = self.do_something_dangerous()
except Exception as e:
    import sys
    self.exc_info = sys.exc_info()
</code></pre>
<p>and on your main thread:</p>
<pre><code>if self.exc_info:
    raise self.exc_info[1].with_traceback(self.exc_info[2])
return self.result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The only exception a secondary thread can reliably raise in the main thread is <code>KeyboardInterrupt</code>: the way the secondary thread does it is by calling the function <a href="https://docs.python.org/3/library/_thread.html#_thread.interrupt_main" rel="nofollow noreferrer"><code>thread.interrupt_main()</code></a>.  There is no way to associate extra info (about the reason for the exception) with the exception object that gets raised -- the latter's always just a plain <code>KeyboardInterrupt</code>.  So, you need to stash that information away somewhere else, e.g. on a dedicated instance of <a href="http://docs.python.org/library/queue.html?highlight=queue#Queue.Queue" rel="nofollow noreferrer">Queue.Queue</a> -- that info might include the results the secondary thread can get via <code>sys.exc_info()</code>, and anything else you find useful of course.  </p>
<p>The main thread will need to recover that extra info (and take into account that the queue will be empty if the keyboard interrupt is actually due to the user hitting control-C or the like, so, use <code>get_nowait</code> and be ready to deal with a <code>Queue.Empty</code> exception, for example), format it however you desire, and terminate (if all secondary threads are <a href="http://docs.python.org/library/threading.html?highlight=thread%20main#threading.Thread.daemon" rel="nofollow noreferrer">daemon</a>s, the whole process terminates when the main thread terminates).</p>
</div>
<div class="post-text" itemprop="text">
<p>Very unfortunately the accepted answer does not answer the question. You would rather pipe the exception details into a Queue. Please have a look at: <a href="https://stackoverflow.com/questions/2829329/catch-a-threads-exception-in-the-caller-thread-in-python" title="Catch a thread's exception in the caller thread in Python">Catch a thread's exception in the caller thread in Python</a></p>
</div>
<span class="comment-copy">don't you mean to throw <code>thrdobj.exc_info</code> in the main thread, and why drop the exception type when you rethrow?</span>
<span class="comment-copy">i see now, had to read up on 3arg raise statement. but the question about <code>self</code> still stands, thanks for a good answer, i'll try it out</span>
<span class="comment-copy">I'm not sure what your question about self is.  This code came from an object that is used to defer work onto a worker thread, so the same object runs code in the worker and main threads.</span>
<span class="comment-copy">I suspect the issue is not so much the mechanics of knowing how to re-raise the exception as when to, i.e. how does the main thread know that there's an exception waiting to be re-raised?</span>
<span class="comment-copy">This answer <a href="https://stackoverflow.com/a/12223550">stackoverflow.com/a/12223550</a> shows a nice way to encapsulate this into your Thread implementation, automatically re-raising the exception in the main thread when it calls <code>join()</code> on the worker thread.</span>
<span class="comment-copy">updated threading documentation link: <a href="https://docs.python.org/3.6/library/_thread.html?highlight=interrupt_main#_thread.interrupt_main" rel="nofollow noreferrer">docs.python.org/3.6/library/â€¦</a></span>
