<div class="post-text" itemprop="text">
<p>I am using the following class to easily store data of my songs.</p>
<pre><code>class Song:
    """The class to store the details of each song"""
    attsToStore=('Name', 'Artist', 'Album', 'Genre', 'Location')
    def __init__(self):
        for att in self.attsToStore:
            exec 'self.%s=None'%(att.lower()) in locals()
    def setDetail(self, key, val):
        if key in self.attsToStore:
            exec 'self.%s=val'%(key.lower()) in locals()
</code></pre>
<p>I feel that this is just much more extensible than writing out an <code>if/else</code> block. However, <code>eval</code> seems to be considered a bad practice and unsafe to use. If so, can anyone explain to me why and show me a better way of defining the above class?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, using eval is a bad practice. Just to name a few reasons:</p>
<ol>
<li>There is almost always a better way to do it</li>
<li>Very dangerous and insecure</li>
<li>Makes debugging difficult</li>
<li>Slow</li>
</ol>
<p>In your case you can use <a href="http://docs.python.org/library/functions.html#setattr" rel="noreferrer">setattr</a> instead:</p>
<pre><code>class Song:
    """The class to store the details of each song"""
    attsToStore=('Name', 'Artist', 'Album', 'Genre', 'Location')
    def __init__(self):
        for att in self.attsToStore:
            setattr(self, att.lower(), None)
    def setDetail(self, key, val):
        if key in self.attsToStore:
            setattr(self, key.lower(), val)
</code></pre>
<p><strong>EDIT:</strong></p>
<p>There are some cases where you have to use eval or exec. But they are rare. Using eval in your case is a bad practice for sure. I'm emphasizing on bad practice because eval and exec are frequently used in the wrong place.</p>
<p><strong>EDIT 2:</strong></p>
<p>It looks like some disagree that eval is 'very dangerous and insecure' in the OP case. That might be true for this specific case but not in general. The question was general and the reasons I listed are true for the general case as well.</p>
<p><strong>EDIT 3:</strong>
Reordered point 1 and 4</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>eval</code> is weak, not a clearly <em>bad</em> practice.</p>
<ol>
<li><p>It violates the "Fundamental Principle of Software".  Your source is not the sum total of what's executable.  In addition to your source, there are the arguments to <code>eval</code>, which must be clearly understood.  For this reason, it's the tool of last resort.</p></li>
<li><p>It's usually a sign of thoughtless design.  There's rarely a good reason for dynamic source code, built on-the-fly.  Almost anything can be done with delegation and other OO design techniques.</p></li>
<li><p>It leads to relatively slow on-the-fly compilation of small pieces of code.  An overhead which can be avoided by using better design patterns.</p></li>
</ol>
<p>As a footnote, in the hands of deranged sociopaths, it may not work out well.  However, when confronted with deranged sociopathic users or administrators, it's best to not give them interpreted Python in the first place.  In the hands of the truly evil, Python can a liability; <code>eval</code> doesn't increase the risk at all.  </p>
</div>
<div class="post-text" itemprop="text">
<p>In this case, yes. Instead of</p>
<pre><code>exec 'self.Foo=val'
</code></pre>
<p>you should use the <a href="http://docs.python.org/library/functions.html" rel="noreferrer">builtin</a> function <code>setattr</code>:</p>
<pre><code>setattr(self, 'Foo', val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it is:</p>
<p>Hack using Python:</p>
<pre><code>&gt;&gt;&gt; eval(input())
"__import__('os').listdir('.')"
...........
...........   #dir listing
...........
</code></pre>
<p>The below code will list all tasks running on a Windows machine.</p>
<pre><code>&gt;&gt;&gt; eval(input())
"__import__('subprocess').Popen(['tasklist'],stdout=__import__('subprocess').PIPE).communicate()[0]"
</code></pre>
<p>In Linux:</p>
<pre><code>&gt;&gt;&gt; eval(input())
"__import__('subprocess').Popen(['ps', 'aux'],stdout=__import__('subprocess').PIPE).communicate()[0]"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's worth noting that for the specific problem in question, there are several alternatives to using <code>eval</code>:</p>
<p>The simplest, as noted, is using <code>setattr</code>:</p>
<pre><code>def __init__(self):
    for name in attsToStore:
        setattr(self, name, None)
</code></pre>
<p>A less obvious approach is updating the object's <code>__dict__</code> object directly.  If all you want to do is initialize the attributes to <code>None</code>, then this is less straightforward than the above.  But consider this:</p>
<pre><code>def __init__(self, **kwargs):
    for name in self.attsToStore:
       self.__dict__[name] = kwargs.get(name, None)
</code></pre>
<p>This allows you to pass keyword arguments to the constructor, e.g.:</p>
<pre><code>s = Song(name='History', artist='The Verve')
</code></pre>
<p>It also allows you to make your use of <code>locals()</code> more explicit, e.g.:</p>
<pre><code>s = Song(**locals())
</code></pre>
<p>...and, if you really want to assign <code>None</code> to the attributes whose names are found in <code>locals()</code>:</p>
<pre><code>s = Song(**dict([(k, None) for k in locals().keys()]))
</code></pre>
<p>Another approach to providing an object with default values for a list of attributes is to define the class's <code>__getattr__</code> method:</p>
<pre><code>def __getattr__(self, name):
    if name in self.attsToStore:
        return None
    raise NameError, name
</code></pre>
<p>This method gets called when the named attribute isn't found in the normal way.  This approach somewhat less straightforward than simply setting the attributes in the constructor or updating the <code>__dict__</code>, but it has the merit of not actually creating the attribute unless it exists, which can pretty substantially reduce the class's memory usage.</p>
<p>The point of all this:  There are lots of reasons, in general, to avoid <code>eval</code> - the security problem of executing code that you don't control, the practical problem of code you can't debug, etc.  But an even more important reason is that generally, you don't need to use it.  Python exposes so much of its internal mechanisms to the programmer that you rarely really need to write code that writes code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Other users pointed out how your code can be changed as to not depend on <code>eval</code>; I'll offer a legitimate use-case for using <code>eval</code>, one that is found even in CPython: <em>testing</em>.</p>
<p>Here's one example I found in <a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Lib/test/test_unary.py#L43" rel="noreferrer"><code>test_unary.py</code></a> where a test on whether <code>(+|-|~)b'a'</code> raises a <code>TypeError</code>:</p>
<pre><code>def test_bad_types(self):
    for op in '+', '-', '~':
        self.assertRaises(TypeError, eval, op + "b'a'")
        self.assertRaises(TypeError, eval, op + "'a'")
</code></pre>
<p>The usage is clearly not bad practice here; <em>you define the input</em> and merely observe behavior. <code>eval</code> is handy for testing.</p>
<p><a href="https://github.com/python/cpython/search?l=Python&amp;p=1&amp;q=eval&amp;utf8=%E2%9C%93" rel="noreferrer">Take a look at this search</a> for <code>eval</code>, performed on the CPython git repository; testing with eval is heavily used.</p>
</div>
<div class="post-text" itemprop="text">
<p>When <code>eval()</code> is used to process user-provided input, you enable the user to <a href="https://docs.python.org/3/library/code.html" rel="nofollow noreferrer">Drop-to-REPL</a> providing something like this:</p>
<pre><code>"__import__('code').InteractiveConsole(locals=globals()).interact()"
</code></pre>
<p>You may get away with it, but normally you don't want vectors for <a href="https://en.wikipedia.org/wiki/Arbitrary_code_execution" rel="nofollow noreferrer">arbitrary code execution</a> in your applications.</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to @Nadia Alramli answer, since I am new to Python and was eager to check how using <code>eval</code> will affect the <em>timings</em>, I tried a small program and below were the observations: </p>
<pre><code>#Difference while using print() with eval() and w/o eval() to print an int = 0.528969s per 100000 evals()

from datetime import datetime
def strOfNos():
    s = []
    for x in range(100000):
        s.append(str(x))
    return s

strOfNos()
print(datetime.now())
for x in strOfNos():
    print(x) #print(eval(x))
print(datetime.now())

#when using eval(int)
#2018-10-29 12:36:08.206022
#2018-10-29 12:36:10.407911
#diff = 2.201889 s

#when using int only
#2018-10-29 12:37:50.022753
#2018-10-29 12:37:51.090045
#diff = 1.67292
</code></pre>
</div>
<span class="comment-copy">how did you learn about <code>exec/eval</code> and still didn't know <code>setattr</code>?</span>
<span class="comment-copy">I believe it was from an article comparing python and lisp than I learned about eval.</span>
<span class="comment-copy">-1: "Very dangerous and insecure" is false.  The other three are outstandingly clear.  Please reorder them so that 2 and 4 are the first two.  It's only insecure if you are surrounded by evil sociopaths who are looking for ways to subvert your application.</span>
<span class="comment-copy">@S.Lott, Insecurity is a very important reason to avoid eval/exec in general. Many applications like websites should take extra care. Take the OP example in a website that expects users to enter the song name. It is bound to be exploited sooner or later. Even an innocent input like: Let's have fun. will cause a syntax error and expose the vulnerability.</span>
<span class="comment-copy">@Nadia Alramli: User input and <code>eval</code> have nothing to do with each other.  An application that's fundamentally mis-designed is fundamentally mis-designed.  <code>eval</code> is no more the root cause of bad design than division by zero or attempting to import a module which is known not to exist.  <code>eval</code> isn't insecure.  Applications are insecure.</span>
<span class="comment-copy">@jeffjose: Actually, <b>it is</b> fundamentally bad/evil because it's treating unparamaterized data as code (this is why XSS, SQL injection, and stack smashes exist). @S.Lott: "It's only insecure if you are surrounded by evil sociopaths who are looking for ways to subvert your application." Cool, so say you make a program <code>calc</code>, and to add numbers it executes <code>print(eval("{} + {}".format(n1, n2)))</code> and exits. Now you distribute this program with some OS. Then someone makes a bash script that takes some numbers from a stock site and adds them using <code>calc</code>. boom?</span>
<span class="comment-copy">I'm not sure why Nadia's assertion is so contentious. It seems simple to me: eval is a vector for code injection, and is dangerous in a way that most other Python functions are not. That doesn't mean you shouldn't use it at all, but I think you should use it judiciously.</span>
<span class="comment-copy">@Owen S. The point is this.  Folks will tell you that <code>eval</code> is some kind of "security vulnerability".  As if Python -- itself -- was not just a bunch of interpreted source that anyone could modify.  When confronted with the "eval is a security hole", you can only assume that it's a security hole in the hands of sociopaths.  Ordinary programmers merely modify the existing Python source and cause their problems directly.  Not indirectly through <code>eval</code> magic.</span>
<span class="comment-copy">Well, I can tell you exactly why I would say eval is a security vulnerability, and it has to do with the trustworthiness of the string it's given as input. If that string comes, in whole or in part, from the outside world, there's a possibility of a scripting attack on your program if you're not careful. But that's thge derangement of an outside attacker, not of the user or administrator.</span>
<span class="comment-copy">@OwenS.: "If that string comes, in whole or in part, from the outside world"  Often false.  This isn't a "careful" thing.  It's black and white.  If the text comes from a user, it can <b>never</b> be trusted. Care isn't really part of it, it's absolutely untrustable. Otherwise, the text comes from a developer, installer or admin, and can be trusted.</span>
<span class="comment-copy">@OwenS.: There's no possible escaping for a string of untrusted Python code that would make it trustable.  I agree with most of what you're saying except for the "careful" part.  It's a very crisp distinction. Code from the outside world is untrustable.  AFAIK, no amount of escaping or filtering can clean it up.  If you have some kind of escaping function that would make code acceptable, please share.  I didn't think such a thing was possible.  For example <code>while True: pass</code> would be hard to clean up with some kind of escaping.</span>
<span class="comment-copy">@OwenS.: "intended as a string, not arbitrary code".  That's unrelated.  That's just a string value, which you would never pass through <code>eval()</code>, since it's a string.  Code from the "outside world" cannot be sanitized.  Strings from the outside world are just strings.  I'm unclear on what you're talking about.  Perhaps you should provide a more complete blog post and link to it here.</span>
<span class="comment-copy">Another way that's arguably more (or less) Pythonic: Instead of using the object's <code>__dict__</code> directly, give the object an actual dictionary  object, either through inheritance or as an attribute.</span>
<span class="comment-copy">"A less obvious approach is updating the object's <b>dict</b> object directly" =&gt; Note that this will bypass any descriptor (property or other) or <code>__setattr__</code> override, which might lead to unexpected results. <code>setattr()</code> doesn't have this problem.</span>
