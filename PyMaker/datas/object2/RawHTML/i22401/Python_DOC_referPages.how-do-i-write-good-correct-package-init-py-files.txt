<div class="post-text" itemprop="text">
<p>My package has the following structure:</p>
<pre><code>mobilescouter/
    __init__.py #1
    mapper/
        __init__.py  #2
        lxml/
            __init__.py #3
            vehiclemapper.py
            vehiclefeaturemapper.py
            vehiclefeaturesetmapper.py
        ...
        basemapper.py
   vehicle/
        __init__.py #4
        vehicle.py
        vehiclefeature.py
        vehiclefeaturemapper.py
   ...
</code></pre>
<p>I'm not sure how the <code>__init__.py</code> files should be correctly written.<br/> The <code>__init__.py #1</code> looks like:</p>
<pre><code>__all__ = ['mapper', 'vehicle']
import mapper
import vehicle
</code></pre>
<p>But how should for example <code>__init__.py #2</code> look like? Mine is:</p>
<pre><code>__all__ = ['basemapper', 'lxml']
from basemaper import *
import lxml
</code></pre>
<p>When should be <code>__all__</code> used? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>__all__</code> is very good - it helps guide import statements without automatically importing modules
<a href="http://docs.python.org/tutorial/modules.html#importing-from-a-package" rel="noreferrer">http://docs.python.org/tutorial/modules.html#importing-from-a-package</a></p>
<p>using <code>__all__</code> and <code>import *</code> is redundant, only <code>__all__</code> is needed</p>
<p>I think one of the most powerful reasons to use <code>import *</code> in an <code>__init__.py</code> to import packages is to be able to refactor a script that has grown into multiple scripts without breaking an existing application. But if you're designing a package from the start. I think it's best to leave <code>__init__.py</code> files empty.</p>
<p>for example:</p>
<pre><code>foo.py - contains classes related to foo such as fooFactory, tallFoo, shortFoo
</code></pre>
<p>then the app grows and now it's a whole folder</p>
<pre><code>foo/
    __init__.py
    foofactories.py
    tallFoos.py
    shortfoos.py
    mediumfoos.py
    santaslittlehelperfoo.py
    superawsomefoo.py
    anotherfoo.py
</code></pre>
<p>then the init script can say</p>
<pre><code>__all__ = ['foofactories', 'tallFoos', 'shortfoos', 'medumfoos',
           'santaslittlehelperfoo', 'superawsomefoo', 'anotherfoo']
# deprecated to keep older scripts who import this from breaking
from foo.foofactories import fooFactory
from foo.tallfoos import tallFoo
from foo.shortfoos import shortFoo
</code></pre>
<p>so that a script written to do the following does not break during the change:</p>
<pre><code>from foo import fooFactory, tallFoo, shortFoo
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My own <code>__init__.py</code> files are empty more often than not.  In particular, I never have a <code>from blah import *</code> as part of <code>__init__.py</code> -- if "importing the package" means getting all sort of classes, functions etc defined directly as part of the package, then I would lexically copy the contents of <code>blah.py</code> into the package's <code>__init__.py</code> instead and remove <code>blah.py</code> (the multiplication of source files does no good here).</p>
<p>If you do insist on supporting the <code>import *</code> idioms (eek), then using <code>__all__</code> (with as miniscule a list of names as you can bring yourself to have in it) may help for damage control. In general, namespaces and explicit imports are <strong>good</strong> things, and I strong suggest reconsidering any approach based on systematically bypassing either or both concepts!-)</p>
</div>
<div class="post-text" itemprop="text">
<p>Your <code>__init__.py</code> should have a <strong>docstring</strong>.</p>
<p>Although all the functionality is implemented in modules and subpackages, your package docstring is the place to document where to start.  For example, consider the <a href="https://docs.python.org/3/library/email.html#module-email" rel="nofollow noreferrer">python <code>email</code> package</a>.  The package documentation is an introduction describing the purpose, background, and how the various components within the package work together.  If you automatically generate documentation from docstrings using sphinx or another package, the package docstring is exactly the right place to describe such an introduction.</p>
<p>For any other content, see the excellent answers by <a href="https://stackoverflow.com/a/1947834/974555">firecrow</a> and <a href="https://stackoverflow.com/a/1944610/974555">Alex Martelli</a>.</p>
</div>
<span class="comment-copy">Be aware though that using import * in code is generally very bad practice and should be avoided if possible. There are very few good use cases for this, but they are really rare.</span>
<span class="comment-copy">I was very confused about '<b>all</b>' and line by line import. Your example is very illuminating.</span>
<span class="comment-copy">I'm confused by "<code>__all__</code> and <code>import *</code> is redundant", <code>__all__</code> is used by the consumer of the module, and <code>from foo import *</code> is used by the module itself to use others....</span>
<span class="comment-copy">Personally, I prefer to keep things separate, and then import *. THe reason is that, despite folding and stuff, I still hate to browse files containing too many classes, even if related.</span>
<span class="comment-copy">@stefano think about a big framework. if it uses <code>import *</code> you must unconditionally accept all the framework in its all, even features the you will never use. keeping <code>__init__.py</code> empty give you more chances than just all-or-nothing semantic. think about twisted.</span>
<span class="comment-copy">if keep it empty, even after import mobilescouter, one still can't use mobilescouter.mapper or mobilescouter.vehicle or mobilescouter.whatever. isn't import mobilescouter.A, mobilescouter.B..... too verbose?</span>
<span class="comment-copy">@sunqiang this is personal but i don't think so. <code>from mobilescouter import A, B</code> is just a line of code and you don't have a project with 666 classes and every one with his own file, right? if you have two or more <code>import *</code> in your code you are filling the namespace with potential garbage and quickly you'll forget where <code>A</code> come from. And if an upper package do the same? you are grabbing all the sub-packages and sub-sub-packages. like the zen of python says, explicit is better than implicit.</span>
<span class="comment-copy">@mg, if there is a line "import A, B" in the <b>init</b>.py file, then I can call the A(or B) with the syntax:mobilescouter.A; if we use "from mobilescouter import A, B", then it's just A.something. sometime just this line, I don't remember A is a sub pacakge of mobilescouter, and I think this contributes to  namespace pollution (though it's a lot better than ""from mobilescouter import *". I still prefer "import pkgname" give user the uniform public interface. so <b>init</b>.py do the import sub_pkgname things.</span>
