<div class="post-text" itemprop="text">
<p>I come from a PHP background and would like to know if there's a way to do this in Python. </p>
<p>In PHP you can kill 2 birds with one stone like this:</p>
<p>Instead of:</p>
<pre><code>if(getData()){
    $data = getData();
    echo $data;
}
</code></pre>
<p>I can do this:</p>
<pre><code>if($data = getData()){
    echo $data;
}
</code></pre>
<p>You check to see if <code>getData()</code> exists AND if it does, you assign it to a variable in one statement.</p>
<p>I wanted to know if there's a way to do this in Python? So instead of doing this:</p>
<pre><code>if request.GET.get('q'):
    q = request.GET.get('q')
    print q
</code></pre>
<p>avoid writing <code>request.GET.get('q')</code> twice.</p>
</div>
<div class="post-text" itemprop="text">
<p>Probably not exactly what you were thinking, but...</p>
<pre><code>q = request.GET.get('q')
if q:
    print q
</code></pre>
<p>this?</p>
</div>
<div class="post-text" itemprop="text">
<p>See my 8-year-old recipe <a href="http://code.activestate.com/recipes/66061/" rel="noreferrer">here</a> for just this task.</p>
<pre><code># In Python, you can't code "if x=foo():" -- assignment is a statement, thus
# you can't fit it into an expression, as needed for conditions of if and
# while statements, &amp;c.  No problem, if you just structure your code around
# this.  But sometimes you're transliterating C, or Perl, or ..., and you'd
# like your transliteration to be structurally close to the original.
#
# No problem, again!  One tiny, simple utility class makes it easy...:

class DataHolder:
    def __init__(self, value=None): self.value = value
    def set(self, value): self.value = value; return value
    def get(self): return self.value
# optional but handy, if you use this a lot, either or both of:
setattr(__builtins__,'DataHolder',DataHolder)
setattr(__builtins__,'data',DataHolder())

# and now, assign-and-set to your heart's content: rather than Pythonic
while 1:
    line = file.readline()
    if not line: break
    process(line)
# or better in modern Python, but quite far from C-like idioms:
for line in file.xreadlines():
    process(line)
# you CAN have your C-like code-structure intact in transliteration:
while data.set(file.readline()):
    process(data.get())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A variation on <a href="https://stackoverflow.com/questions/1663995/python-variable-assignment-and-if-statement/1664013#1664013">Alex's answer</a>:</p>
<pre><code>class DataHolder:
    def __init__(self, value=None, attr_name='value'):
        self._attr_name = attr_name
        self.set(value)
    def __call__(self, value):
        return self.set(value)
    def set(self, value):
        setattr(self, self._attr_name, value)
        return value
    def get(self):
        return getattr(self, self._attr_name)
save_data = DataHolder()
</code></pre>
<p>Usage:</p>
<pre><code>if save_data(get_input()):
    print save_data.value
</code></pre>
<p>or if you prefer an alternative interface:</p>
<pre><code>if save_data.set(get_input()):
    print save_data.get()
</code></pre>
<p>I would find this helpful to test a series of regular expressions in an if-elif-elif-elif etc construct, as in <a href="https://stackoverflow.com/questions/122277/how-do-you-translate-this-regular-expression-idiom-from-perl-into-python">this SO question</a>:</p>
<pre><code>import re

input = u'test bar 123'
save_match = DataHolder(attr_name='match')
if save_match(re.search('foo (\d+)', input)):
    print "Foo"
    print save_match.match.group(1)
elif save_match(re.search('bar (\d+)', input)):
    print "Bar"
    print save_match.match.group(1)
elif save_match(re.search('baz (\d+)', input)):
    print "Baz"
    print save_match.match.group(1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>q = request.GET.get('q')
if q:
    print q
else:
    # q is None
    ...
</code></pre>
<p>There's no way of doing assignment and conditionals in one go...</p>
</div>
<div class="post-text" itemprop="text">
<p>If get() throws an exception when it's not there, you could do </p>
<pre><code>try:
   q = request.GET.get('q')
   print q
except :
   pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, this would be one way</p>
<pre><code>q = request.GET.get('q')
if q:
    print q
</code></pre>
<p>A briefer (but not superior, due to the call to print of nothing) way would be</p>
<pre><code>print request.GET.get('q') or '',
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>config_hash = {}
tmp_dir = ([config_hash[x]  for x in ["tmp_dir"] if config_hash.has_key(x)] or ["tmp"])[0]
print tmp_dir
config_hash["tmp_dir"] = "cat"
tmp_dir = ([config_hash[x]  for x in ["tmp_dir"] if config_hash.has_key(x)] or ["tmp"])[0]
print tmp_dir
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>a possible way to do it, without necessity to set the variable before, could be like:</p>
<pre><code>if (lambda x: globals().update({'q':x}) or True if x else False)(request.GET.get('q')):
    print q
</code></pre>
<p>.. it's just for fun - this method should not be used, because it is ugly hack, difficult to understand at first sight, and it creates/overwrites a global variable (only if the condition is met, though)</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply try:</p>
<pre><code>print(request.GET.get('q', ''))
</code></pre>
<p>which basically prints nothing if the first argument is not present (see <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" rel="nofollow noreferrer"><code>dict.get</code></a>).</p>
<hr/>
<p>Alternative solution would be to use a conditional expression in Python:</p>
<pre><code>&lt;expression1&gt; if &lt;condition&gt; else &lt;expression2&gt;
</code></pre>
<p>but you'll end up repeating variable twice, for example:</p>
<pre><code>print(request.GET.get('q') if request.GET.get('q') else '')
</code></pre>
<hr/>
<p>For variable assignments in loops, check in <a href="https://stackoverflow.com/q/542212/55075">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://www.python.org/dev/peps/pep-0572/" rel="nofollow noreferrer">PEP 572</a> introduces <strong>Assignment Expressions</strong>. From Python 3.8 and onwards you can write:</p>
<pre><code>if q := request.GET.get('q'):
    print q
</code></pre>
<p>Here are some more examples from the <a href="https://www.python.org/dev/peps/pep-0572/#syntax-and-semantics" rel="nofollow noreferrer">Syntax and semantics</a> part of the PEP:</p>
<pre><code># Handle a matched regex
if (match := pattern.search(data)) is not None:
    # Do something with match

# A loop that can't be trivially rewritten using 2-arg iter()
while chunk := file.read(8192):
   process(chunk)

# Reuse a value that's expensive to compute
[y := f(x), y**2, y**3]

# Share a subexpression between a comprehension filter clause and its output
filtered_data = [y for x in data if (y := f(x)) is not None]
</code></pre>
</div>
<span class="comment-copy">Do you have a Python tutorial bookmarked?  Which one?</span>
<span class="comment-copy">Just the official one: <a href="http://docs.python.org/tutorial/" rel="nofollow noreferrer">docs.python.org/tutorial</a></span>
<span class="comment-copy">Thankfully, Python doesn't have this C misfeature, and in general, in most languages which inherited it from C/C++, its use is frowned upon for readability and clarity reasons.</span>
<span class="comment-copy">Duplicate: <a href="http://stackoverflow.com/questions/542212/is-there-any-way-to-do-variable-assignments-directly-inside-a-whilehere-loop" title="is there any way to do variable assignments directly inside a whilehere loop">stackoverflow.com/questions/542212/…</a></span>
<span class="comment-copy">@S.Lott It's not a duplicate as this other question asks about <code>while</code> which made all answers focused on iteration thus bypassing the issue of assignment inside flow control statement entirely.</span>
<span class="comment-copy">yeah, that's right. the pattern is to use a variable if and only if it exists (meaning it gives a valid value, i.e. anything but <i>False</i>).</span>
<span class="comment-copy">Thanks, looks like this is the best way to do it. As @Adam says, it's not possible to do this in Python. Thanks.</span>
<span class="comment-copy">The limitation of this solution is if you want to use it in a series of if-elif-elif-elif etc. For example, see this other SO question: <a href="http://stackoverflow.com/questions/122277/how-do-you-translate-this-regular-expression-idiom-from-perl-into-python" title="how do you translate this regular expression idiom from perl into python">stackoverflow.com/questions/122277/…</a></span>
<span class="comment-copy">@Amber, One hic-up with this is that when <code>q==0</code> or <code>q==0.</code>, the <code>if</code> condition fails. <code>If</code> converts its condition expression to a <code>bool</code> and <code>0</code> and <code>0.</code> both cast to <code>False</code>.</span>
<span class="comment-copy">@hobs Sure. And you can always use a more explicit conditional if you expect that might be the case sometimes (e.g. <code>if q is not None:</code>).</span>
<span class="comment-copy">You have a pretty smart 8-year-old! ;)</span>
<span class="comment-copy">@unutbu, heh - that would be my (older) cat as my kids are a bit older... my younger daughter's just started her PhD in telecom engineering (advanced radio systems, mostly)...;-)</span>
<span class="comment-copy">I like your addition of <code>__call__()</code> to DataHolder, but I don't understand why it's useful to specify <code>attr_name</code>.  If DataHolder were a singleton or if an instance of it could hold multiple values, each in different attributes, I'd understand, but it doesn't seem to have a strong purpose here.</span>
<span class="comment-copy">@LS: Yes, I could have just fixed it to be <code>value</code> or <code>x</code>. But <a href="http://c2.com/cgi/wiki?GoodVariableNames" rel="nofollow noreferrer">good variable names</a> improve readability. That's the essence of it.</span>
<span class="comment-copy">Explicit is better than implicit. Readability counts. Special cases aren't special enough to break the rules. You are saving so much vertical space in your code by not writing all those lines with nothing but a right brace, so why not go for clarity in Python? Personally, I cut my teeth on C and have been writing Python code for 12 years now, and I never realised this feature was missing. You just don't need to do this.</span>
<span class="comment-copy">@Michael: I agree in almost all cases. I am just missing it in the specific use case of testing multiple regular expressions, as described in this other SO question: <a href="http://stackoverflow.com/questions/122277/how-do-you-translate-this-regular-expression-idiom-from-perl-into-python" title="how do you translate this regular expression idiom from perl into python">stackoverflow.com/questions/122277/…</a></span>
