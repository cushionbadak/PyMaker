<div class="post-text" itemprop="text">
<p>I was studying the <a href="https://docs.python.org/3/faq/design.html#why-are-there-separate-tuple-and-list-data-types" rel="noreferrer">difference between lists and tuples</a> (in Python). An obvious one is that tuples are immutable (the values cannot be changed after initial assignment), while lists are mutable.</p>
<p>A sentence in the article got me: </p>
<blockquote>
<p>Only immutable elements can be used as
  dictionary keys, and hence only tuples
  and not lists can be used as keys.</p>
</blockquote>
<p>I have a hard time thinking of a situation where I would like to use a tuple as a dictionary key. Can you provide an example problem where this would be the natural, efficient, elegant, or obvious solution?</p>
<p><strong>Edit:</strong></p>
<p>Thanks for your examples. So far I take that a very important application is the caching of function values.</p>
</div>
<div class="post-text" itemprop="text">
<p>Classic Example: You want to store point value as tuple of  (x, y) </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>salaries = {}
salaries[('John', 'Smith')] = 10000.0
salaries[('John', 'Parker')] = 99999.0
</code></pre>
<p><strong>EDIT 1</strong>
Of course you can do <code>salaries['John Smith'] = whatever</code>, but then you'll have to do extra work to separate the key into first and last names. What about <code>pointColor[(x, y, z)] = "red"</code>, here the benefit of tuple key is more prominent. </p>
<p>I must stress out that this is not the best practice. In many cases you better create special classes to handle situations like that, but Arrieta asked for examples, which I gave her (him).</p>
<p><strong>EDIT 0</strong></p>
<p>By the way, each tuple element has to be hashable too:</p>
<pre><code>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; t = (range(3), range(10, 13))
&gt;&gt;&gt; d[t] = 11
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: list objects are unhashable
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I use tuple lots of time as <code>dict</code> key e.g.</p>
<ul>
<li><p>I do use them when I have to create a unique key from multiple values e.g.</p>
<p>based on <code>first_name</code>, <code>last_name</code> key could be key = <code>'%s_%s'%(first_name, last_name)</code> but better way is <code>key = (first_name, last_name)</code> because </p>
<ol>
<li>It is more readable, shorter and less computation</li>
<li>It is easier to retrieve the individual values</li>
<li>Most importantly <code>key = '%s_%s'%(first_name, last_name)</code> is wrong and may not give unique keys for all values of <code>first_name</code> and <code>last_name</code> e.g. when values contain <code>_</code></li>
</ol></li>
<li><p>Caching the results of a function </p>
<pre><code>def func(a1, b1):
    if (a1,b1) in cache: return cache[(a1,b1)]
    ...
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I used tuples as dictionary keys in application that compares network devices by geographical location.  Since the devices are named similarly for each location, it provides a natural way to know if a device matching that pairing has been seen yet while processing multiples.</p>
<p>i.e.</p>
<pre><code>seen = {}
seen[('abc', 'lax')] = 1
seen[('xyz', 'nyc')] = 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You use tuples as keys when you want to show multiple elements which form a key together.</p>
<p>Eg: <code>{(&lt;x-coordinate&gt;,&lt;y-coordinate&gt;): &lt;indicating letter&gt;}</code></p>
<p>Here if we use <code>x-coordinate</code> or <code>y-coordinate</code> separately, we wouldn't be representing that point.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suppose in the case of sorting, there could be merit in using a tuple.  For example, suppose the dictionary key represents a sort field (obviously there would be a default sort field to prevent the key from being <code>None</code>).  If you needed multiple sort fields, such as the case of sorting by last name, then first name, wouldn't using a tuple as the dictionary key be a good idea?</p>
<p>Sure, such an idea might have limited use, but that doesn't mean it is completely useless.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use it for approx constant time search of a point in search space. For example you can use it for constraint satisfaction problem, where each tuple might contain some constraints. Constraint might be of the form (v1.v2) where color(v1)!=color(v2) for coloring prob, etc. 
     Using tuples as dictionary keys, you will able to tell in constant time whether a permutation satisfies a constraint or not. </p>
</div>
<div class="post-text" itemprop="text">
<p>In the context of Machine Learning and Deep Learning, if you're doing hyperparameter search for the best <em>hyperparameters</em>, then using tuples as keys is definitely super useful.</p>
<p>Let's say you're searching for the best hyperparameter combination for <code>learning_rate</code>, <code>regularization_factor</code>, and <code>model_complexity</code>.</p>
<p>Then you can have a dictionary in Python where you make the different combination that these hparams can take as <em>keys</em> and their corresponding weight matrices from the training algorithm as <em>values</em></p>
<pre><code>hparams_hist = {}
hparams_hist[(0.001, 0.7, 5)] = weight_matrix1
hparams_hist[(0.0001, 0.8, 2)] = weight_matrix2
</code></pre>
<p>These weight matrices are further needed to make realtime prediction.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a[("John", "Doe")] = "123 Fake Street"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use it for funnel analysis if you are building a basic analytics tool.</p>
<p><strong>For example</strong>, counting how many people clicked the image3 after hovering on text2.</p>
<pre><code>    funnels = defaultdict(int)
    funnels[('hovered_text2', 'clicked_image3')] += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def getHash(word):
    result={}
    for i in range(len(word)):
        if word[i] in result:
            result[word[i]]+=1
        else :
            result[word[i]]=1

    return tuple (sorted((result.items())))


def groupAnagrams(words):
    resultHash={}
    for i in range(len(words)):
        s=getHash(words[i].lower())
        #print s
        if s in resultHash :
            l=list(resultHash[s]) 
            l.append(words[i])
            resultHash[s] = l # list(resultHash[s]).append(words[i])  
        else :
            resultHash[s]=[words[i]] # Creating list 

    return resultHash.values()
</code></pre>
</div>
<span class="comment-copy">You can use tuples but only the ones with immutable elements.  If a tuple contains a list (as one of its elements), such a tuple cannot be used as a key.  The basic rule is that the data (the tupple) must be hashable.</span>
<span class="comment-copy">Wow. This is very true. I cannot think of any other way of efficiently storing the function values! If your function is very expensive to evaluate, you only do it once, and store the points for later retrieval. +1! Thanks!</span>
<span class="comment-copy">Must I mention I will do that tomorrow, first thing in the morning...</span>
<span class="comment-copy">Agreed. Also, anywhere you are handling something in memory where you would use a compound key to handle the same thing in a relational database.</span>
<span class="comment-copy">I dont use python much, but wouldnt salaries[('John Smith')] = 99998 be a valid dictionary key?</span>
<span class="comment-copy">I agree you can do that, but I would model this data with a class Employee with __init__(self,Firs,Last,Salary), and create an instance for each element in the list. In this case, using the 'tuple as key' trick would appear a bit unnatural to me. What do you think?</span>
<span class="comment-copy">of course it would. But then you will have to do extra work if you want to split the key to, say, first and last names.</span>
<span class="comment-copy">Thanks for your edits, I think the color example is very good, as the general <code>dict[tuple] = f(tuple)</code> mentioned in the answers. I'm a "him" by the way :)</span>
<span class="comment-copy">Note that you don't need parentheses, tuples are defined by the comma. <code>salaries['John', 'Smith'] = 10000.0</code> would work too :)</span>
