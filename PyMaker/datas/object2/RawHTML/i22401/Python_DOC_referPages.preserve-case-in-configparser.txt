<div class="post-text" itemprop="text">
<p>I have tried to use Python's <a href="http://docs.python.org/library/configparser.html" rel="noreferrer">ConfigParser</a> module to save settings. For my app it's important that I preserve the case of each name in my sections. The docs mention that passing str() to <a href="http://docs.python.org/library/configparser.html#ConfigParser.RawConfigParser.optionxform" rel="noreferrer">ConfigParser.optionxform()</a> would accomplish this, but it doesn't work for me. The names are all lowercase. Am I missing something?</p>
<pre><code>&lt;~/.myrc contents&gt;
[rules]
Monkey = foo
Ferret = baz
</code></pre>
<p>Python pseudocode of what I get:</p>
<pre><code>import ConfigParser,os

def get_config():
   config = ConfigParser.ConfigParser()
   config.optionxform(str())
    try:
        config.read(os.path.expanduser('~/.myrc'))
        return config
    except Exception, e:
        log.error(e)

c = get_config()  
print c.options('rules')
[('monkey', 'foo'), ('ferret', 'baz')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The documentation is confusing. What they mean is this:</p>
<pre><code>import ConfigParser, os
def get_config():
    config = ConfigParser.ConfigParser()
    config.optionxform=str
    try:
        config.read(os.path.expanduser('~/.myrc'))
        return config
    except Exception, e:
        log.error(e)

c = get_config()  
print c.options('rules')
</code></pre>
<p>I.e. override optionxform, instead of calling it; overriding can be done in a subclass or in the instance. When overriding, set it to a function (rather than the result of calling a function).</p>
<p>I have now reported <a href="http://bugs.python.org/issue7188" rel="noreferrer">this as a bug</a>, and it has since been fixed.</p>
</div>
<div class="post-text" itemprop="text">
<p>For me worked to set optionxform immediately after creating the object </p>
<pre><code>config = ConfigParser.RawConfigParser()
config.optionxform = str 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add to your code:</p>
<pre><code>config.optionxform = lambda option: option  # preserve case for letters
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know this question is answered, but I thought some people might find this solution useful. This is a class that can easily replace the existing ConfigParser class.</p>
<p>Edited to incorporate @OozeMeister's suggestion:</p>
<pre><code>class CaseConfigParser(ConfigParser):
    def optionxform(self, optionstr):
        return optionstr
</code></pre>
<p>Usage is the same as normal ConfigParser.</p>
<pre><code>parser = CaseConfigParser()
parser.read(something)
</code></pre>
<p>This is so you avoid having to set optionxform every time you make a new <code>ConfigParser</code>, which is kind of tedious.</p>
</div>
<div class="post-text" itemprop="text">
<p>Caveat:</p>
<p>If you use defaults with ConfigParser, i.e.:</p>
<pre><code>config = ConfigParser.SafeConfigParser({'FOO_BAZ': 'bar'})
</code></pre>
<p>and then try to make the parser case-sensitive by using this:</p>
<pre><code>config.optionxform = str
</code></pre>
<p>all your options from config file(s) will keep their case, but <code>FOO_BAZ</code> will be converted to lowercase.</p>
<p>To have defaults also keep their case, use subclassing like in @icedtrees answer:</p>
<pre><code>class CaseConfigParser(ConfigParser.SafeConfigParser):
    def optionxform(self, optionstr):
        return optionstr

config = CaseConfigParser({'FOO_BAZ': 'bar'})
</code></pre>
<p>Now <code>FOO_BAZ</code> will keep it's case and you won't have <strong>InterpolationMissingOptionError</strong>.</p>
</div>
<span class="comment-copy">Thank you. It works, and I agree that the docs are confusing.</span>
<span class="comment-copy">+1 for reporting the bug</span>
<span class="comment-copy">Works great! (note that in python 3 it is "configparser" class name (no uppercase)</span>
<span class="comment-copy">@NoamManos: You are referring to the module name (the class name is still <a href="https://docs.python.org/3/library/configparser.html#configparser.ConfigParser" rel="nofollow noreferrer">ConfigParser</a>).</span>
<span class="comment-copy">Note that it works too with <code>ConfigParser.ConfigParser()</code></span>
<span class="comment-copy">It works great because the top answer reported the bug in 2009...</span>
<span class="comment-copy">This appears to work for me at least in python 2.7 and is much cleaner than the accepted answer. Thanks foo!</span>
<span class="comment-copy">Since <code>optionxform</code> is just a method on the <code>RawConfigParser</code>, if you're going to go as far as creating your own subclass, you should instead just override the method on the subclass rather than redefining it per instantiation: <code>class CaseConfigParser(ConfigParser): def optionxform(self, optionstr): return optionstr</code></span>
<span class="comment-copy">@OozeMeister great idea!</span>
