<div class="post-text" itemprop="text">
<p>How can I turn a string such as "+" into the operator plus? Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a lookup table:</p>
<pre><code>import operator
ops = { "+": operator.add, "-": operator.sub } # etc.

print ops["+"](1,1) # prints 2 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import operator

def get_operator_fn(op):
    return {
        '+' : operator.add,
        '-' : operator.sub,
        '*' : operator.mul,
        '/' : operator.div,
        '%' : operator.mod,
        '^' : operator.xor,
        }[op]

def eval_binary_expr(op1, oper, op2):
    op1,op2 = int(op1), int(op2)
    return get_operator_fn(oper)(op1, op2)

print eval_binary_expr(*("1 + 3".split()))
print eval_binary_expr(*("1 * 3".split()))
print eval_binary_expr(*("1 % 3".split()))
print eval_binary_expr(*("1 ^ 3".split()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try using eval(), but it's dangerous if the strings are not coming from you.
Else you might consider creating a dictionary:</p>
<pre><code>ops = {"+": (lambda x,y: x+y), "-": (lambda x,y: x-y)}</code></pre>
<p>etc... and then calling <pre><code>ops['+'] (1,2)</code></pre> or, for user input:<br/></p>
<pre><code>if ops.haskey(userop):
    val = ops[userop](userx,usery)
else:
    pass #something about wrong operator</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a magic method corresponding to every operator</p>
<pre><code>OPERATORS = {'+': 'add', '-': 'sub', '*': 'mul', '/': 'div'}

def apply_operator(a, op, b):

    method = '__%s__' % OPERATORS[op]
    return getattr(b, method)(a)

apply_operator(1, '+', 2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In my opinion, the answer proposed by Amnon is the right one.</p>
<p>However, you may also be interested by this article about a mathematical parser: <a href="http://effbot.org/zone/simple-top-down-parsing.htm" rel="nofollow noreferrer">http://effbot.org/zone/simple-top-down-parsing.htm</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I understand that you want to do something like:
5"+"7 
where all 3 things would be passed by variables,
so
example:</p>
<pre><code>import operator

#define operators you wanna use
allowed_operators={
    "+": operator.add,
    "-": operator.sub,
    "*": operator.mul,
    "/": operator.truediv}

#sample variables
a=5
b=7
string_operator="+"

#sample calculation =&gt; a+b
result=allowed_operators[string_operator](a,b)
print(result)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>eval</code> like so:</p>
<pre><code>eval("+")
</code></pre>
</div>
<span class="comment-copy">instead you can convert other things to string and evaluate <a href="http://stackoverflow.com/questions/729248/python-eval-and-globals" title="python eval and globals">stackoverflow.com/questions/729248/python-eval-and-globals</a></span>
<span class="comment-copy">In python3, this gives: '+' : operator.add, AttributeError: 'str' object has no attribute 'add'</span>
<span class="comment-copy">The problem is that the poorly-named <code>operator</code> parameter clashes with the imported operator module. I'm guessing you inlined <code>get_operator_fn</code> with <code>eval_binary_expr</code>. Change the <code>operator</code> parameter to something else, like <code>oper</code>, and all references to it.  See my edit.</span>
<span class="comment-copy">For Python3, you'll also have to change <code>operator.div</code> to <code>operator.truediv</code>, and fix all the print statements.</span>
<span class="comment-copy">this works well, thanks for sharing. for validation we can extend apply_operator.  if op == '/' and b == 0: 	return np.inf if op == '/' and a == 0: 	return 0</span>
<span class="comment-copy">This doesn't let <a href="https://docs.python.org/3/library/constants.html#NotImplemented" rel="nofollow noreferrer">NotImplemented</a> work properly.</span>
<span class="comment-copy">This belongs into the comment section as it isn't a direct answer.</span>
<span class="comment-copy">this causes syntax error</span>
<span class="comment-copy">it's also very dangerous to use eval</span>
<span class="comment-copy">Useless "answer" which just produces syntax error, this is not even notable for showing the "wrong way to do it".</span>
