<div class="post-text" itemprop="text">
<p>I am in progress to learn Python. Hopefully someone points me to correct way.<br/>
This is what I'd like to do below:</p>
<pre><code>def decorate(function):
    def wrap_function(*args, **kwargs):
        str = 'Hello!'  # This is what I want
        return function(*args, **kwargs)
    return wrap_function

@decorate
def print_message():
    # I'd like to pass 'str' as mentioned above
    # to any functions' argument like below:
    print(str)  # 'str' is same as above
</code></pre>
<p>Any idea? Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't pass it as its own name, but you can add it to the keywords.</p>
<pre><code>def decorate(function):
    def wrap_function(*args, **kwargs):
        kwargs['str'] = 'Hello!'
        return function(*args, **kwargs)
    return wrap_function

@decorate
def print_message(*args, **kwargs):
    print(kwargs['str'])
</code></pre>
<p>Alternatively you can name its own argument:</p>
<pre><code>def decorate(function):
    def wrap_function(*args, **kwargs):
        str = 'Hello!'
        return function(str, *args, **kwargs)
    return wrap_function

@decorate
def print_message(str, *args, **kwargs):
    print(str)
</code></pre>
<p>Class method:</p>
<pre><code>def decorate(function):
    def wrap_function(*args, **kwargs):
        str = 'Hello!'
        args.insert(1, str)
        return function(*args, **kwargs)
    return wrap_function

class Printer:
    @decorate
    def print_message(self, str, *args, **kwargs):
        print(str)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want the argument to be "optionally-injected", only in case the function actually takes it, use something like this:</p>
<pre><code>import inspect

def decorate(func):
    def wrap_and_call(*args, **kwargs):
        if 'str' in inspect.getargspec(func).args:
            kwargs['str'] = 'Hello!'
        return func(*args, **kwargs)
    return wrap_and_call

@decorate
def func1(str):
    print "Works! - " + str

@decorate
def func2():
    print "Should work, also."
</code></pre>
</div>
<span class="comment-copy">Note that the first solution is also achieved by using <code>functools.partial()</code> (but from version 2.6 only). The same module also offers the <code>wraps()</code> function which can be used with decorators to maintain the name and the doc of the original function.</span>
<span class="comment-copy">@RedGlyph: why using <code>functools.partial()</code> from version 2.6 only? the documentation say nothing about it except that functools module is new in pyhton 2.5.</span>
<span class="comment-copy">Thanks to Tor Valamo. Alternative solution is clear for me. But how about if the decorated function is an instance method? The instance method's argument should be something like: <code>def print_message(str, self, *args, **kwargs):</code> Is this correct? Thanks again.</span>
<span class="comment-copy">yes, that's because the args list contains 'self' as the first item. you can fix it with args.insert(1, str) and then return function(*args, **kwargs)</span>
<span class="comment-copy">@Japboy: i don't know if you noticed but <code>print_message</code> don't need extra <code>*args</code> and <code>**kwargs</code> arguments so don't declare so you function if you don't need it. imho a decorator is more powerful the more the decorated function is unaware of it</span>
<span class="comment-copy">Note that getargspec is deprecated. For Python3, use <a href="https://docs.python.org/3/library/inspect.html#inspect.getfullargspec" rel="nofollow noreferrer">getfullargspec</a>.</span>
