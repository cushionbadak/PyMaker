<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Possible Duplicates:</strong><br/>
<a href="https://stackoverflow.com/questions/932328/python-defining-my-own-operators">Python: defining my own operators?</a><br/>
<a href="https://stackoverflow.com/questions/1552260/rules-of-thumb-for-when-to-use-operator-overloading-in-python">Rules of thumb for when to use operator overloading in python</a> </p>
</blockquote>
<p>Is it possible to overload operators in Python? If so, can one define new operators, such as <code>++</code> and <code>&lt;&lt;</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>As other answers have mentioned, you can indeed overload operators (by definining special methods in the class you're writing, i.e., methods whose names start and end with two underscores).  All the details are <a href="http://docs.python.org/reference/datamodel.html" rel="nofollow noreferrer">here</a>.</p>
<p>To complete the answers to you questions: you cannot define new operators; but <code>&lt;&lt;</code> is not a new operator, it's an existing one, and it's overloaded by defining in the class the method <a href="https://docs.python.org/3/library/operator.html#operator.__lshift__" rel="nofollow noreferrer"><code>__lshift__</code></a>.</p>
<p>As a historical note, this is also pretty much the situation in C++ -- but the exact set of operators you can overload differs between the two languages. For example, in C++, you cannot overload attribute access, <code>.</code>; in Python, you can, with <code>__getattr__</code> (or <code>__getattribute__</code>, with different semantics) and <code>__setattr__</code>. Vice versa, in Python <code>=</code> (plain assignment) is not an operator, so you cannot overload that, while in C++ it is an operator and you can overload it.</p>
<p><code>&lt;&lt;</code> is an operator, and can be overloaded, in both languages -- that's how <code>&lt;&lt;</code> and <code>&gt;&gt;</code>, while not losing their initial connotation of left and right shifts, also became I/O formatting operators in C++ (not in Python!-).</p>
</div>
<div class="post-text" itemprop="text">
<p>See: <a href="http://docs.python.org/reference/datamodel.html#special-method-names" rel="noreferrer">http://docs.python.org/reference/datamodel.html#special-method-names</a>.</p>
<blockquote>
<p>A class can implement certain operations that are invoked by special syntax (such as arithmetic operations or subscripting and slicing) by defining methods with special names. This is Pythonâ€™s approach to operator overloading, allowing classes to define their own behavior with respect to language operators. </p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Yes, and no. I don't think you can define your own operators, but you can overload the existing ones - you can do that by overriding the operator's special method. For example, 
to override &gt;, you can override <code>__gt__()</code>, for != override <code>__ne__()</code> and so on. </p>
</div>
<span class="comment-copy">Duplicate question: <a href="http://stackoverflow.com/questions/932328">stackoverflow.com/questions/932328</a>.  See also <a href="http://stackoverflow.com/questions/1552260">stackoverflow.com/questions/1552260</a> .</span>
<span class="comment-copy">It may be a duplicate question, but I found the accepted answer more useful than in other questions, because it links to the description of all the __ xxx __ methods.</span>
<span class="comment-copy">@ToolmakerSteve - Sorry, I flagged and removed that as not an answer. It was nothing more than a link, which means it was subject to linkrot.</span>
<span class="comment-copy">Since this is the first hit on google, I think it should be unlocked. Locking it forces people to have an extra click to get information and the answers below don't even give examples.</span>
<span class="comment-copy">+1 for the link to the list of __ xxx __ methods. I couldn't find that link in answers to other questions that this question is considered a duplicate of.</span>
