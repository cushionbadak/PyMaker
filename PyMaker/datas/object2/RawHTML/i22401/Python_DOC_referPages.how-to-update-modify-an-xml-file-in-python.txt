<div class="post-text" itemprop="text">
<p>I have an XML document that I would like to update after it already contains data.</p>
<p>I thought about opening the XML file in <code>"a"</code> (append) mode. The problem is that the new data will be written after the root closing tag.</p>
<p>How can I delete the last line of a file, then start writing data from that point, and then close the root tag?</p>
<p>Of course I could read the whole file and do some string manipulations, but I don't think that's the best idea..</p>
<p>Thanks for your time.</p>
</div>
<div class="post-text" itemprop="text">
<p>The quick and easy way, which you definitely <strong>should not do</strong> (see below), is to read the whole file into a list of strings using <code>readlines()</code>. I write this in case the quick and easy solution is what you're looking for.</p>
<p>Just open the file using <code>open()</code>, then call the <code>readlines()</code> method. What you'll get is a list of all the strings in the file. Now, you can easily add strings before the last element (just add to the list one element before the last). Finally, you can write these back to the file using <code>writelines()</code>.</p>
<p>An example might help:</p>
<pre><code>my_file = open(filename, "r")
lines_of_file = my_file.readlines()
lines_of_file.insert(-1, "This line is added one before the last line")
my_file.writelines(lines_of_file)
</code></pre>
<p>The reason you shouldn't be doing this is because, unless you are doing something very quick n' dirty, you should be using an XML parser. This is a library that allows you to work with XML intelligently, using concepts like DOM, trees, and nodes. This is not only the proper way to work with XML, it is also the standard way, making your code both more portable, and easier for other programmers to understand. </p>
<p>Tim's answer mentioned checking out <a href="https://docs.python.org/3/library/xml.dom.minidom.html" rel="nofollow noreferrer"><code>xml.dom.minidom</code></a> for this purpose, which I think would be a great idea.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>ElementTree</code>:</p>
<pre><code>import xml.etree.ElementTree

# Open original file
et = xml.etree.ElementTree.parse('file.xml')

# Append new tag: &lt;a x='1' y='abc'&gt;body text&lt;/a&gt;
new_tag = xml.etree.ElementTree.SubElement(et.getroot(), 'a')
new_tag.text = 'body text'
new_tag.attrib['x'] = '1' # must be str; cannot be an int
new_tag.attrib['y'] = 'abc'

# Write back to file
#et.write('file.xml')
et.write('file_new.xml')
</code></pre>
<p>note: output written to <code>file_new.xml</code> for you to experiment, writing back to <code>file.xml</code> will replace the old content.</p>
<p>IMPORTANT: the ElementTree library stores attributes in a dict, as such, the order in which these attributes are listed in the xml text will NOT be preserved. Instead, they will be output in alphabetical order.
(also, comments are removed. I'm finding this rather annoying)</p>
<p>ie: the xml input text <code>&lt;b y='xxx' x='2'&gt;some body&lt;/b&gt;</code> will be output as <code>&lt;b x='2' y='xxx'&gt;some body&lt;/b&gt;</code>(after alphabetising the order parameters are defined)</p>
<p>This means when committing the original, and changed files to a revision control system (such as SVN, CSV, ClearCase, etc), a diff between the 2 files may not look pretty.</p>
</div>
<div class="post-text" itemprop="text">
<p>Useful Python XML parsers:</p>
<ol>
<li><a href="http://docs.python.org/library/xml.dom.minidom.html" rel="noreferrer">Minidom</a> - functional but limited</li>
<li><a href="http://effbot.org/zone/element-index.htm" rel="noreferrer">ElementTree</a> - decent performance, more functionality</li>
<li><a href="http://lxml.de/" rel="noreferrer">lxml</a> - high-performance <em>in most cases</em>, high functionality including real xpath support</li>
</ol>
<p>Any of those is better than trying to update the XML file as strings of text.</p>
<p>What that means to you:</p>
<p>Open your file with an XML parser of your choice, find the node you're interested in, replace the value, serialize the file back out.</p>
</div>
<div class="post-text" itemprop="text">
<p>While I agree with Tim and Oben Sonne that you should use an XML library, there are ways to still manipulate it as a simple string object.  </p>
<p>I likely would not try to use a single file pointer for what you are describing, and instead read the file into memory, edit it, then write it out.:</p>
<pre><code>inFile = open('file.xml', 'r')
data = inFile.readlines()
inFile.close()
# some manipulation on `data`
outFile = open('file.xml', 'w')
outFile.writelines(data)
outFile.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you really want to do is use an XML parser and append the new elements with the API provided.</p>
<p>Then simply overwrite the file.</p>
<p>The easiest to use would probably be a DOM parser like the one below:</p>
<p><a href="http://docs.python.org/library/xml.dom.minidom.html" rel="nofollow noreferrer">http://docs.python.org/library/xml.dom.minidom.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>To make this process more robust, you could consider using the SAX parser (that way  you don't have to hold the whole file in memory), read &amp; write till the end of tree and then start appending.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should read the XML file using specific XML modules. That way you can edit the XML document in memory and rewrite your changed XML document into the file.</p>
<p>Here is a quick start: <a href="http://docs.python.org/library/xml.dom.minidom.html" rel="nofollow noreferrer">http://docs.python.org/library/xml.dom.minidom.html</a></p>
<p>There are a lot of other XML utilities, which one is best depends on the nature of your XML file and in which way you want to edit it.</p>
</div>
<div class="post-text" itemprop="text">
<p>As Edan Maor explained, the quick and dirty way to do it (for [utc-16] encoded .xml files), which you should <strong>not</strong> do for the resons Edam Maor explained, can done with the following python 2.7 code in case time constraints do not allow you to learn (propper) XML parses.</p>
<p>Assuming you want to: </p>
<ol>
<li>Delete the last line in the original xml file. </li>
<li>Add a line</li>
<li>substitute a line</li>
<li>Close the root tag.</li>
</ol>
<p>It worked in python 2.7 modifying an .xml file named "b.xml" located in folder "a", where "a" was located in the "working folder" of python. It outputs the new modified file as "c.xml" in folder "a", without yielding encoding errors (for me) in further use outside of python 2.7.</p>
<pre><code>pattern = '&lt;Author&gt;'
subst = '    &lt;Author&gt;' + domain + '\\' + user_name + '&lt;/Author&gt;'
line_index =0 #set line count to 0 before starting
file = io.open('a/b.xml', 'r', encoding='utf-16')
lines = file.readlines()
outFile = open('a/c.xml', 'w')
for line in lines[0:len(lines)]:
    line_index =line_index +1
    if line_index == len(lines):
        #1. &amp; 2. delete last line and adding another line in its place not writing it
        outFile.writelines("Write extra line here" + '\n')
        # 4. Close root tag:
        outFile.writelines("&lt;/phonebook&gt;") # as in:
        #http://tizag.com/xmlTutorial/xmldocument.php
    else:
        #3. Substitue a line if it finds the following substring in a line:
        pattern = '&lt;Author&gt;'
        subst = '    &lt;Author&gt;' + domain + '\\' + user_name + '&lt;/Author&gt;'
        if pattern in line:
            line = subst
            print line
        outFile.writelines(line)#just writing/copying all the lines from the original xml except for the last.
</code></pre>
</div>
<span class="comment-copy">"Of course I could read the only file and the string manipulations" - I'm not sure I understood that last part, could you please rephrase it?</span>
<span class="comment-copy">editing XML without using one of the parsers is a huge code smell. I have had to work around others releasing software that does this and it is an awful kludge. If it is XML then XML has certain properties that should be adhered to - like being able to play around with whitespace - moving tags but keeping the same semantic meaning of the XML, or adding XML comments. The resultant program becomes brittle, likely to fail first. DON'T DO THIS!</span>
<span class="comment-copy">I use python2 and when I open an xml and just write to another all tags change to a new tag <code>ns0:previoustag</code> why?</span>
<span class="comment-copy"><code>ns0</code> looks like a namespace, have a read of <a href="https://docs.python.org/2/library/xml.etree.elementtree.html#parsing-xml-with-namespaces" rel="nofollow noreferrer">docs.python.org/2/library/â€¦</a></span>
