<div class="post-text" itemprop="text">
<p>I'm pretty new to Python and am completely confused by <code>.join()</code> which I have read is the preferred method for concatenating strings.</p>
<p>I tried:</p>
<pre><code>strid = repr(595)
print array.array('c', random.sample(string.ascii_letters, 20 - len(strid)))
    .tostring().join(strid)
</code></pre>
<p>and got something like:</p>
<pre><code>5wlfgALGbXOahekxSs9wlfgALGbXOahekxSs5
</code></pre>
<p>Why does it work like this?  Shouldn't the <code>595</code> just be automatically appended?</p>
</div>
<div class="post-text" itemprop="text">
<p>Look carefully at your output:</p>
<pre><code>5wlfgALGbXOahekxSs9wlfgALGbXOahekxSs5
^                 ^                 ^
</code></pre>
<p>I've highlighted the "5", "9", "5" of your original string. The Python <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="noreferrer"><code>join()</code></a> method is a string method, and takes a <em>list</em> of things to join with the string. A simpler example might help explain:</p>
<pre><code>&gt;&gt;&gt; ",".join(["a", "b", "c"])
'a,b,c'
</code></pre>
<p>The "," is inserted between each element of the given list. In your case, your "list" is the string representation "595", which is treated as the list ["5", "9", "5"].</p>
<p>It appears that you're looking for <code>+</code> instead:</p>
<pre><code>print array.array('c', random.sample(string.ascii_letters, 20 - len(strid)))
.tostring() + strid
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>join</code> takes an iterable thing as an argument.  Usually it's a list.  The problem in your case is that a string is itself iterable, giving out each character in turn. Your code breaks down to this:</p>
<pre><code>"wlfgALGbXOahekxSs".join("595")
</code></pre>
<p>which acts the same as this:</p>
<pre><code>"wlfgALGbXOahekxSs".join(["5", "9", "5"])
</code></pre>
<p>and so produces your string:</p>
<pre><code>"5wlfgALGbXOahekxSs9wlfgALGbXOahekxSs5"
</code></pre>
<p>Strings as iterables is one of the most confusing beginning issues with Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>To append a string, just concatenate it with the <code>+</code> sign.</p>
<p>E.g.</p>
<pre><code>&gt;&gt;&gt; a = "Hello, "
&gt;&gt;&gt; b = "world"
&gt;&gt;&gt; str = a + b
&gt;&gt;&gt; print str
Hello, world
</code></pre>
<p><code>join</code> connects strings together with a separator. The separator is what you
place right before the <code>join</code>. E.g.</p>
<pre><code>&gt;&gt;&gt; "-".join([a,b])
'Hello, -world'
</code></pre>
<p>Join takes a list of strings as a parameter.</p>
</div>
<div class="post-text" itemprop="text">
<p>join() is for concatenating all list elements. For concatenating just two strings "+" would make more sense:</p>
<pre><code>strid = repr(595)
print array.array('c', random.sample(string.ascii_letters, 20 - len(strid)))
    .tostring() + strid
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To expand a bit more on what others are saying, if you wanted to use join to simply concatenate your two strings, you would do this:</p>
<pre><code>strid = repr(595)
print ''.join([array.array('c', random.sample(string.ascii_letters, 20 - len(strid)))
    .tostring(), strid])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a good explanation of why it is costly to use <code>+</code> for concatenating a large number of strings <a href="https://stackoverflow.com/questions/10043636/any-reason-not-to-use-to-concatenate-two-strings">here</a></p>
<blockquote>
<p>Plus operator is perfectly fine solution to concatenate <strong>two</strong> Python
  strings. But if you keep adding more than two strings (n &gt; 25) , you
  might want to think something else.</p>
<p><code>''.join([a, b, c])</code> trick is a performance optimization.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>On providing this as input ,</p>
<pre><code>li = ['server=mpilgrim', 'uid=sa', 'database=master', 'pwd=secret']
s = ";".join(li)
print(s)
</code></pre>
<p>Python returns this as output :</p>
<pre><code>'server=mpilgrim;uid=sa;database=master;pwd=secret'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>list = ["my", "name", "is", "kourosh"]   
" ".join(list)
</code></pre>
<p>If this is an input, using the JOIN method, we can add the distance between the words and also convert the list to the string.</p>
<p>This is Python output </p>
<pre><code>'my name is kourosh'
</code></pre>
</div>
<span class="comment-copy">I think you tapped your Yubikey while the program was running</span>
<span class="comment-copy">Why is it not: 5wlfgALGbXOahekxSs9wlfgALGbXOahekxSs5wlfgALGbXOahekxSs ? With the string appended to the last element?</span>
<span class="comment-copy">One reason is this gives <code>join</code> the useful property of being the inverse of <code>split</code> (<a href="http://docs.python.org/library/stdtypes.html#str.split" rel="nofollow noreferrer">docs.python.org/library/stdtypes.html#str.split</a>)</span>
<span class="comment-copy">If you want another delimiter, put an empty string at the end of your list. <code>','.join(['a', 'b', 'c', ''])</code> gives "a,b,c,"</span>
<span class="comment-copy">OP was probably confusing <code>string.join</code> with <code>os.path.join</code> which indeed concatenates paths</span>
<span class="comment-copy">upvote for pointing out what might be the crux of the confusion: strings are iterable so they act like lists of chars.</span>
<span class="comment-copy">This kind of direct and concise answer should be advocated by our community. @Dan</span>
