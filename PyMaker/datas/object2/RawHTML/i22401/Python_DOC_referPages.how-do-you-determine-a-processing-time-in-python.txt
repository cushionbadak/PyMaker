<div class="post-text" itemprop="text">
<p>I'm new to Python, and confused by the date/time documentation.  I want to compute the time that it takes to perform a computation.</p>
<p>In java, I would write:</p>
<pre><code>long timeBefore = System.currentTimeMillis();
doStuff();
long timeAfter = System.currentTimeMillis();
elapsed time = timeAfter - timeBefore;
</code></pre>
<p>I'm sure it's even easier in Python. Can anyone help?</p>
</div>
<div class="post-text" itemprop="text">
<p>Equivalent in python would be:</p>
<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; tic = time.clock()
&gt;&gt;&gt; toc = time.clock()
&gt;&gt;&gt; toc - tic
</code></pre>
<p>It's not clear what are you trying to do that for? Are you trying to find the best performing method? Then you should prob have a look at <a href="http://docs.python.org/library/timeit.html" rel="noreferrer"><code>timeit</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Building on and updating a number of earlier responses (thanks: SilentGhost, nosklo, Ramkumar) a simple portable timer would use <code>timeit</code>'s <code>default_timer()</code>: </p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; tic=timeit.default_timer()
&gt;&gt;&gt; # Do Stuff
&gt;&gt;&gt; toc=timeit.default_timer()
&gt;&gt;&gt; toc - tic #elapsed time in seconds
</code></pre>
<p>This will return the elapsed wall clock (real) time, not CPU time. And as described in the <a href="http://docs.python.org/2/library/timeit.html" rel="noreferrer"><code>timeit</code> documentation</a> chooses the most precise available real-world timer depending on the platform. </p>
<p>ALso, beginning with Python 3.3 this same functionality is available with the <a href="http://docs.python.org/3.3/library/time.html#time.perf_counter" rel="noreferrer"><code>time.perf_counter</code></a> performance counter. Under 3.3+ timeit.default_timer() refers to this new counter.</p>
<p>For more precise/complex performance calculations, <code>timeit</code> includes more sophisticated calls for automatically timing small code snippets including averaging run time over a defined set of repetitions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use timeit. <a href="http://docs.python.org/library/timeit.html" rel="noreferrer">http://docs.python.org/library/timeit.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>You can implement two <code>tic()</code> and <code>tac()</code> functions, where <code>tic()</code> captures the time which it is called, and <code>tac()</code> prints the time difference since <code>tic()</code> was called. Here is a short implementation:</p>
<pre class="lang-py prettyprint-override"><code>import time

_start_time = time.time()

def tic():
    global _start_time 
    _start_time = time.time()

def tac():
    t_sec = round(time.time() - _start_time)
    (t_min, t_sec) = divmod(t_sec,60)
    (t_hour,t_min) = divmod(t_min,60) 
    print('Time passed: {}hour:{}min:{}sec'.format(t_hour,t_min,t_sec))
</code></pre>
<p>Now in your code you can use it as:
</p>
<pre><code>tic()
do_some_stuff()
tac()
</code></pre>
<p>and it will, for example, output:</p>
<pre><code>Time passed: 0hour:7min:26sec
</code></pre>
<h2>See also:</h2>
<ul>
<li>Python's datetime library: <a href="https://docs.python.org/2/library/datetime.html" rel="noreferrer">https://docs.python.org/2/library/datetime.html</a></li>
<li>Python's time library: <a href="https://docs.python.org/2/library/time.html" rel="noreferrer">https://docs.python.org/2/library/time.html</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.3 and later <a href="https://docs.python.org/3/library/time.html#time.process_time" rel="nofollow noreferrer"><code>time.process_time()</code></a> is very nice:</p>
<pre><code>import time

t = time.process_time()
#do some stuff
elapsed_time = time.process_time() - t
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>python -m timeit -h
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For some further information on how to determine the processing time, and a comparison of a few methods (some mentioned already in the answers of this post) - specifically, the difference between: </p>
<pre><code>start = time.time()
</code></pre>
<p>versus the now obsolete (<a href="https://docs.python.org/3/library/time.html#time.clock" rel="nofollow noreferrer">as of 3.3, time.clock() is deprecated</a>)</p>
<pre><code>start = time.clock()
</code></pre>
<p>see this other article on Stackoverflow here: </p>
<p><a href="https://stackoverflow.com/questions/85451/python-time-clock-vs-time-time-accuracy">Python - time.clock() vs. time.time() - accuracy?</a></p>
<p>If nothing else, this will work good: </p>
<pre><code>start = time.time()

... do something

elapsed = (time.time() - start)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If all you want is the time between two points in code (and it seems that's what you want) I have written <code>tic()</code> <code>toc()</code> functions ala Matlab's implementation. The basic use case is:</p>
<pre><code>tic()

''' some code that runs for an interesting amount of time '''

toc()

# OUTPUT:
# Elapsed time is: 32.42123 seconds
</code></pre>
<p>Super, incredibly easy to use, a sort of fire-and-forget kind of code. It's available on Github's Gist <a href="https://gist.github.com/tyleha/5174230" rel="nofollow noreferrer">https://gist.github.com/tyleha/5174230</a></p>
</div>
<span class="comment-copy">Specifically, what <i>Python</i> code are you looking at?</span>
<span class="comment-copy">I wasn't looking at Python code, I was preparing to write it.  By the way, I'm intrigued by your Building Skills in Python book, I'll be checking it out.</span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/7370801/4279">Measure time elapsed in Python?</a></span>
<span class="comment-copy">indeed, prob <code>clock</code> is better for this sort of measurements.</span>
<span class="comment-copy">Thanks for providing the equivalent.  I'll have to look into <code>timeit</code> in the future, but for my current small exercise this will be sufficient.</span>
<span class="comment-copy">Note that <code>time.clock</code> doesn't do the same on all platforms. More notably, on unix it returns processor time, not clock time.</span>
<span class="comment-copy"><code>time.clock()</code> is deprecated since Python 3.3 and prints a warning since Python 3.7. The recommended functions are now <code>time.process_time()</code> and <code>time.perf_counter()</code>. See <a href="https://docs.python.org/3/library/time.html#time.clock" rel="nofollow noreferrer">docs.python.org/3/library/time.html#time.clock</a></span>
<span class="comment-copy">Isn't it tic/toc? :-)</span>
<span class="comment-copy">Note this ignores any <code>time.sleep()</code> time delays in the code, I just tried testing it with <code>time.sleep()</code> for a minute and got quite confused! E.g. if you want to repeat the process at precise time intervals like webscraping, can measure elapsed_time then add on appropriate <code>time.sleep()</code> delay</span>
<span class="comment-copy">Spoke too soon, Actually I just used selenium package to open website login, send message, can see it's taking 20 seconds or more just for selenium to fill out the message in text box, but get 0.125 as the elapsed time from <code>process_time()</code> before getting the URL to time at end typing message, not sure what's going on, docs mentions time.sleep() delays ignored by process_time, but filling the box is normal processing time surely, sending several send_keys() calls from selenium to do this.</span>
<span class="comment-copy"><code>time.time()</code> is not monotonic and must not be used to measure time intervals</span>
<span class="comment-copy">Interesting, you are correct. Glad to learn something new! Additionally, thanks for taking the time to dig up this 3 yr old answer, read through my Gist, downvote me, and yet not provide a suggestion of an alternative or an explanation why it's non-monotonic! For those of you who are looking to actually improve your code and learn, some research of my own suggests you should use <a href="https://www.python.org/dev/peps/pep-0418/#time-monotonic" rel="nofollow noreferrer"><code>time.monotonic</code></a>, available in Python 3.3+ (which I now use). <code>time.time</code> is not monotonic because it relies on system time, which can be modified mid-run</span>
