<div class="post-text" itemprop="text">
<pre><code>try:
    something here
except:
    print 'the whatever error occurred.'
</code></pre>
<p>How can I print the error/exception in my <code>except:</code> block?</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2.6 and later and Python 3.x:</p>
<pre><code>except Exception as e: print(e)
</code></pre>
<p>For Python 2.5 and earlier, use:</p>
<pre><code>except Exception,e: print str(e)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/library/traceback.html" rel="noreferrer"><code>traceback</code></a> module provides methods for <a href="https://docs.python.org/3/library/traceback.html#traceback-examples" rel="noreferrer">formatting and printing exceptions</a> and their tracebacks, e.g. this would print exception like the default handler does:</p>
<pre><code>import traceback

try:
    1/0
except Exception:
    traceback.print_exc()
</code></pre>
<p>Output:</p>
<pre><code>Traceback (most recent call last):
  File "C:\scripts\divide_by_zero.py", line 4, in &lt;module&gt;
    1/0
ZeroDivisionError: division by zero
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In <strong>Python 2.6 or greater</strong> it's a bit cleaner:</p>
<pre><code>except Exception as e: print(e)
</code></pre>
<p>In older versions it's still quite readable:</p>
<pre><code>except Exception, e: print e
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In case you want to pass error strings, here is an example from <a href="http://docs.python.org/tutorial/errors.html" rel="noreferrer">Errors and Exceptions</a> (Python 2.6)</p>
<pre><code>&gt;&gt;&gt; try:
...    raise Exception('spam', 'eggs')
... except Exception as inst:
...    print type(inst)     # the exception instance
...    print inst.args      # arguments stored in .args
...    print inst           # __str__ allows args to printed directly
...    x, y = inst          # __getitem__ allows args to be unpacked directly
...    print 'x =', x
...    print 'y =', y
...
&lt;type 'exceptions.Exception'&gt;
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>(I was going to leave this as a comment on @jldupont's answer, but I don't have enough reputation.)</p>
<p>I've seen answers like @jldupont's answer in other places as well. FWIW, I think it's important to note that this:</p>
<pre class="lang-py prettyprint-override"><code>except Exception as e:
    print(e)
</code></pre>
<p>will print the error output to <code>sys.stdout</code> by default. A more appropriate approach to error handling in general would be:</p>
<pre><code>except Exception as e:
    print(e, file=sys.stderr)
</code></pre>
<p>(Note that you have to <code>import sys</code> for this to work.) This way, the error is printed to <code>STDERR</code> instead of <code>STDOUT</code>, which allows for the proper output parsing/redirection/etc. I understand that the question was strictly about 'printing an error', but it seems important to point out the best practice here rather than leave out this detail that could lead to non-standard code for anyone who doesn't eventually learn better.</p>
<p>I haven't used the <code>traceback</code> module as in Cat Plus Plus's answer, and maybe that's the best way, but I thought I'd throw this out there.</p>
</div>
<div class="post-text" itemprop="text">
<p>One liner error raising can be done with assert statements if that's what you want to do. This will help you write statically fixable code and check errors early.</p>
<pre><code>assert type(A) is type(""), "requires a string"
</code></pre>
</div>
<span class="comment-copy">I suggest changing the title: you are not printing the <b>error</b>, you are printing the <b>exception</b>. They are different.</span>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/q/3702675/3357935">How to print the full traceback without halting the program?</a></span>
<span class="comment-copy">the <code>str()</code> part is redundant -- <code>print e</code> is exactly the same thing as <code>print str(e)</code> [[i.e., <code>print</code> does its own stringification]].</span>
<span class="comment-copy">@alex: doesn't it depends on the subclass (if any) of the exception thrown? The <b>repr</b> method might not have been implemented whilst the <b>str</b> might have. In any case, there isn't a good substitute for an incomplete implementation I guess ;-)</span>
<span class="comment-copy">fwiw in python3 need to use <code>except Exception as e</code> like the other answers</span>
<span class="comment-copy"><code>str( KeyError('bad'))</code> =&gt; <code>'bad'</code> -- doesn't tell exception type</span>
<span class="comment-copy">I just want to mention that <code>type(e)</code> is not <code>&lt;type 'str'&gt;</code> so if you want to check for a string in <code>e</code>, you cannot just do <code>"str" in e</code> you have to do <code>"str" in str(e)</code>, at least for python 2.7</span>
<span class="comment-copy">is there some kind of get_error_message call that I can print with seeing as I'm using my own printing routine to add some other things.</span>
<span class="comment-copy">@MikeSchem  <code>error_message = traceback.format_exc()</code></span>
<span class="comment-copy">Thank you, this is the one I wanted. Whole trace, not just the error type and message</span>
<span class="comment-copy">In python3, must use the 1st way, with "as".</span>
<span class="comment-copy">Very complete, although 'as' doesn't work before python 2.6</span>
<span class="comment-copy">this one deserves more upvotes</span>
<span class="comment-copy">I would suggest further adding flush=True. I've noticed with systemd (and not using a proper logging framework), that buffering when capturing to the journal is not what I would have expected.</span>
