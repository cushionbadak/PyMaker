<div class="post-text" itemprop="text">
<p>Can anyone please explain, what is <code>setup.py</code> and how can it be configured or used?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>setup.py</code> is a python file, which usually tells you that the module/package you are about to install has been packaged and distributed with Distutils, which is the standard for distributing Python Modules.<br/></p>
<p>This allows you to easily install Python packages. Often it's enough to write:</p>
<pre><code>$ python setup.py install
</code></pre>
<p>and the module will install itself.</p>
<p><a href="https://docs.python.org/3/installing/index.html#installing-index" rel="noreferrer">https://docs.python.org/3/installing/index.html#installing-index</a></p>
</div>
<div class="post-text" itemprop="text">
<p>It helps to install a python package <code>foo</code> on your machine (can also be in <code>virtualenv</code>) so that you can import the package <code>foo</code> from other projects and also from [I]Python prompts.  </p>
<p><strong><em>It does the similar job of <code>pip</code>, <code>easy_install</code> etc.,</em></strong></p>
<hr/>
<p><strong>Using <code>setup.py</code></strong> </p>
<p>Let's start with some definitions:</p>
<p><em>Package</em> - A folder/directory that contains <code>__init__.py</code> file.<br/>
<em>Module</em>  - A valid python file with <code>.py</code> extension.<br/>
<em>Distribution</em> - How one <em>package</em> relates to other <em>packages</em> and <em>modules</em>.  </p>
<p>Let's say you want to install a package named <code>foo</code>. Then you do,  </p>
<pre><code>$ git clone https://github.com/user/foo  
$ cd foo
$ python setup.py install
</code></pre>
<p>Instead, if you don't want to actually install it but still would like to use it. Then do,  </p>
<pre><code>$ python setup.py develop  
</code></pre>
<p>This command will create symlinks to the source directory within site-packages instead of copying things. Because of this, it is quite fast (particularly for large packages).  </p>
<hr/>
<p><strong>Creating <code>setup.py</code></strong> </p>
<p>If you have your package tree like,  </p>
<pre><code>foo
├── foo
│   ├── data_struct.py
│   ├── __init__.py
│   └── internals.py
├── README
├── requirements.txt
└── setup.py
</code></pre>
<p>Then, you do the following in your <strong><code>setup.py</code></strong> script so that it can be installed on some machine:  </p>
<pre><code>from setuptools import setup

setup(
   name='foo',
   version='1.0',
   description='A useful module',
   author='Man Foo',
   author_email='foomail@foo.com',
   packages=['foo'],  #same as name
   install_requires=['bar', 'greek'], #external packages as dependencies
)
</code></pre>
<p>Instead, if your package tree is more complex like the one below:  </p>
<pre><code>foo
├── foo
│   ├── data_struct.py
│   ├── __init__.py
│   └── internals.py
├── README
├── requirements.txt
├── scripts
│   ├── cool
│   └── skype
└── setup.py
</code></pre>
<p>Then, your <strong><code>setup.py</code></strong> in this case would be like:</p>
<pre><code>from setuptools import setup

setup(
   name='foo',
   version='1.0',
   description='A useful module',
   author='Man Foo',
   author_email='foomail@foo.com',
   packages=['foo'],  #same as name
   install_requires=['bar', 'greek'], #external packages as dependencies
   scripts=[
            'scripts/cool',
            'scripts/skype',
           ]
)
</code></pre>
<hr/>
<p><strong>Add more stuff to (<code>setup.py</code>)</strong> &amp; make it decent:</p>
<pre><code>from setuptools import setup

with open("README", 'r') as f:
    long_description = f.read()

setup(
   name='foo',
   version='1.0',
   description='A useful module',
   license="MIT",
   long_description=long_description,
   author='Man Foo',
   author_email='foomail@foo.com',
   url="http://www.foopackage.com/",
   packages=['foo'],  #same as name
   install_requires=['bar', 'greek'], #external packages as dependencies
   scripts=[
            'scripts/cool',
            'scripts/skype',
           ]
)
</code></pre>
<p>The <code>long_description</code> is used in <a href="http://pypi.org" rel="noreferrer">pypi.org</a> as the README description of your package.  </p>
<hr/>
<p>And finally, you're now ready to upload your package to <a href="http://pypi.org" rel="noreferrer">PyPi.org</a> so that others can install your package using <code>pip install yourpackage</code>.  </p>
<p>First step is to claim your package name &amp; space in pypi using:</p>
<pre><code>$ python setup.py register
</code></pre>
<p>Once your package name is registered, nobody can claim or use it. After successful registration, you have to upload your package there (to the cloud) by,</p>
<pre><code>$ python setup.py upload
</code></pre>
<p>Optionally, you can also sign your package with <code>GPG</code> by,</p>
<pre><code>$ python setup.py --sign upload
</code></pre>
<hr/>
<p><strong>Bonus</strong>: See a sample <strong><code>setup.py</code></strong> from a real project here: <a href="https://github.com/pytorch/vision/blob/master/setup.py" rel="noreferrer"><strong><code>torchvision-setup.py</code></strong></a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>setup.py</code> is Python's answer to a multi-platform installer and <code>make</code> file. </p>
<p>If you’re familiar with command line installations, then <code>make &amp;&amp; make install</code> translates to <code>python setup.py build &amp;&amp; python setup.py install</code>. </p>
<p>Some packages are pure Python, and are only byte compiled. Others may contain native code, which will require a native compiler (like <code>gcc</code> or <code>cl</code>) and a Python interfacing module (like <code>swig</code> or <code>pyrex</code>).</p>
</div>
<div class="post-text" itemprop="text">
<p>If you downloaded package that has "setup.py" in root folder, you can install it by running</p>
<pre><code>python setup.py install
</code></pre>
<p>If you are developing a project and are wondering what this file is useful for, check <a href="http://docs.python.org/distutils/setupscript.html" rel="noreferrer">Python documentation on writing the Setup Script</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>setup.py</code> is a Python script that is usually shipped with libraries or programs, written in that language. It's purpose is the correct installation of the software.</p>
<p>Many packages use the <code>distutils</code> framework in conjuction with <code>setup.py</code>.</p>
<p><a href="http://docs.python.org/distutils/" rel="noreferrer">http://docs.python.org/distutils/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>setup.py can be used in two scenarios , First, you want to install a Python package. Second, you want to create your own Python package. Usually standard Python package has couple of important files like setup.py, setup.cfg and Manifest.in. When you are creating the Python package, these three files will determine the (content in PKG-INFO under egg-info folder) name, version, description, other required installations (usually in .txt file) and few other parameters. setup.cfg is read by setup.py while package is created (could be tar.gz ). Manifest.in is where you can define what should be included in your package. Anyways you can do bunch of stuff using setup.py like </p>
<pre><code>python setup.py build
python setup.py install
python setup.py sdist &lt;distname&gt; upload [-r urltorepo]  (to upload package to pypi or local repo)
</code></pre>
<p>There are bunch of other commands which could be used with setup.py . for help </p>
<pre><code>python setup.py --help-commands
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you download a package with <code>setup.py</code> open your Terminal (Mac,Linux) or Command Prompt (Windows). Using <code>cd</code>  and helping you with Tab button set the path right to the folder where you have downloaded the file and where there is <code>setup.py</code> :</p>
<pre><code>iMac:~ user $ cd path/pakagefolderwithsetupfile/
</code></pre>
<p>Press enter, you should see something like this:</p>
<pre><code>iMac:pakagefolderwithsetupfile user$
</code></pre>
<p>Then type after this <code>python setup.py install</code> :</p>
<pre><code>iMac:pakagefolderwithsetupfile user$ python setup.py install
</code></pre>
<p>Press <code>enter</code>. Done!</p>
</div>
<div class="post-text" itemprop="text">
<p>To install a Python package you've downloaded, you extract the archive and run the setup.py script inside:</p>
<pre><code>python setup.py install
</code></pre>
<p>To me, this has always felt odd. It would be more natural to point a package manager at the download, as one would do in Ruby and Nodejs, eg. <code>gem install rails-4.1.1.gem</code></p>
<p>A package manager is more comfortable too, because it's familiar and reliable. On the other hand, each <code>setup.py</code> is novel, because it's specific to the package. It demands faith in convention "I trust this setup.py takes the same commands as others I have used in the past". That's a regrettable tax on mental willpower. </p>
<p>I'm not saying the setup.py workflow is less secure than a package manager (I understand Pip just runs the setup.py inside), but certainly I feel it's awkard and jarring. There's a harmony to commands all being to the same package manager application. You might even grow fond it.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>setup.py</code> is a Python file like any other.  It can take any name, except by convention it is named <code>setup.py</code> so that there is not a different procedure with each script.</p>
<p>Most frequently <code>setup.py</code> is used to install a Python module but server other purposes:</p>
<p><strong>Modules:</strong></p>
<p>Perhaps this is most famous usage of <code>setup.py</code> is in modules.  Although they can be installed using <code>pip</code>,  old Python versions did not include <code>pip</code> by default and they needed to be installed separately.  </p>
<p>If you wanted to install a module but did not want to install <code>pip</code>, just about the only alternative was to install the module from <code>setup.py</code> file.  This could be achieved via <code>python setup.py install</code>.  This would install the Python module to the root dictionary (without <code>pip</code>, <code>easy_install</code> ect).</p>
<p>This method is often used when <code>pip</code> will fail.  For example if the correct Python version of the desired package is not available via <code>pip</code>perhaps because it is no longer maintained, , downloading the source and running <code>python setup.py install</code> would perform the same thing, except in the case of compiled binaries are required,  (but will disregard the Python version -unless an error is returned).</p>
<p>Another use of <code>setup.py</code> is to install a package from source.  If a module is still under development the wheel files will not be available and the only way to install is to install from the source directly. </p>
<p><strong>Building Python extensions:</strong></p>
<p>When a module has been built it can be converted into module ready for distribution using a <a href="https://docs.python.org/3.6/distutils/introduction.html" rel="nofollow noreferrer">distutils setup script</a>. Once built these can be installed using the command above.</p>
<p>A setup script is easy to build and once the file has been properly configured and can be compiled by running <code>python setup.py build</code> (see link for all commands).</p>
<p>Once again it is named <code>setup.py</code> for ease of use and by convention, but can take any name.</p>
<p><strong>Cython:</strong></p>
<p>Another famous use of <code>setup.py</code> files include compiled extensions.  These require a setup script with user defined values.  They allow fast (but once compiled are platform dependant) execution.  Here is a simple example from the <a href="http://docs.cython.org/en/latest/src/quickstart/build.html#building-a-cython-module-using-distutils]" rel="nofollow noreferrer">documentation</a>:</p>
<pre><code>from distutils.core import setup
from Cython.Build import cythonize

setup(
    name = 'Hello world app',
    ext_modules = cythonize("hello.pyx"),
)
</code></pre>
<p>This can be compiled via <code>python setup.py build</code></p>
<p><strong>Cx_Freeze:</strong></p>
<p>Another module requiring a setup script is <code>cx_Freeze</code>.  This converts Python script to executables.  This allows many commands such as descriptions, names, icons, packages to include, exclude ect and once run will produce a distributable application.  An example from the <a href="http://cx-freeze.readthedocs.io/en/latest/distutils.html" rel="nofollow noreferrer">documentation</a>:</p>
<pre><code>import sys
from cx_Freeze import setup, Executable
build_exe_options = {"packages": ["os"], "excludes": ["tkinter"]} 

base = None
if sys.platform == "win32":
    base = "Win32GUI"

setup(  name = "guifoo",
        version = "0.1",
        description = "My GUI application!",
        options = {"build_exe": build_exe_options},
        executables = [Executable("guifoo.py", base=base)])
</code></pre>
<p>This can be compiled via <code>python setup.py build</code>.</p>
<p><strong>So what is a <code>setup.py</code> file?</strong></p>
<p>Quite simply it is a script that builds or configures something in the Python environment.</p>
<p>A package when distributed should contain only one setup script but it is not uncommon to combine several together into a single setup script.  Notice this often involves <code>distutils</code> but not always (as I showed in my last example).  The thing to remember it just configures Python package/script in some way. </p>
<p>It takes the name so the same command can always be used when building or installing.</p>
</div>
<div class="post-text" itemprop="text">
<p>To make it simple, setup.py is run as <code>"__main__"</code> when you call the <a href="https://stackoverflow.com/questions/15031694/installing-python-packages-from-local-file-system-folder-with-pip%3E">install functions</a> the other answers mentioned. Inside setup.py, you should put everything needed to install your package.</p>
<h1>Common setup.py functions</h1>
<p>The following two sections discuss two things many setup.py modules have. </p>
<h3>setuptools.setup</h3>
<p>This function allows you to specify <a href="https://setuptools.readthedocs.io/en/latest/setuptools.html" rel="nofollow noreferrer">project attributes</a> like the name of the project, the version.... Most importantly, this function allows you to install other functions if they're packaged properly. See <a href="https://github.com/pypa/sampleproject/blob/master/setup.py" rel="nofollow noreferrer">this webpage</a> for an example of setuptools.setup
<br/><br/>
These attributes of setuptools.setup enable installing these types of packages:</p>
<ul>
<li><p>Packages that are imported to your project and listed in <a href="https://pypi.python.org/pypi" rel="nofollow noreferrer">PyPI</a> using <a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#using-find-packages" rel="nofollow noreferrer">setuptools.findpackages</a>:</p>
<p>packages=find_packages(exclude=["docs","tests", ".gitignore", "README.rst","DESCRIPTION.rst"])</p></li>
<li><p>Packages not in <a href="https://pypi.python.org/pypi" rel="nofollow noreferrer">PyPI</a>, but can be downloaded from a URL using <a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#dependencies-that-aren-t-in-pypi" rel="nofollow noreferrer">dependency_links</a> </p>
<p>dependency_links=["<a href="http://peak.telecommunity.com/snapshots/" rel="nofollow noreferrer">http://peak.telecommunity.com/snapshots/</a>",]</p></li>
</ul>
<h3>Custom functions</h3>
<p>In an ideal world, <code>setuptools.setup</code> would handle everything for you. Unfortunately this isn't always the case. Sometimes you have to do specific things, like installing dependencies with the <a href="https://docs.python.org/2/library/subprocess.html" rel="nofollow noreferrer">subprocess</a> command, to get the system you're installing on in the right state for your package. Try to avoid this, these functions get confusing and often differ between <a href="https://docs.python.org/2/library/sys.html#platform" rel="nofollow noreferrer">OS</a> and even <a href="https://docs.python.org/2/library/platform.html" rel="nofollow noreferrer">distribution</a>.</p>
</div>
<span class="comment-copy">Adam: what do you think could improve the experience for newcomers?</span>
<span class="comment-copy">Eric: Better examples putting everything together would be benefitial</span>
<span class="comment-copy">To me, it's always felt odd how to install the package you extract it and run the script inside, rather than pointing a package manager at what you've downloaded. That would be more natural. <a href="http://stackoverflow.com/questions/1471994/what-is-setup-py/23998536#23998536" title="what is setup py">stackoverflow.com/questions/1471994/what-is-setup-py/…</a></span>
<span class="comment-copy">I would appreciate if you share your knowledge on how to create or handle this modules?  For example, how to create a basic module, or how to test a script on ./mymodule/bin which imports from ./mymodule/libs/</span>
<span class="comment-copy">@PauloOliveira See <a href="https://docs.python.org/2/distutils/index.html" rel="nofollow noreferrer">Distributing Python Modules</a> which describes Distutils, specifically look into <a href="https://docs.python.org/2/distutils/setupscript.html" rel="nofollow noreferrer">2. Writing the Setup Script</a>.</span>
<span class="comment-copy">NEVER USE python setup.py install! It breaks your versioning! <a href="http://stackoverflow.com/questions/4324558/whats-the-proper-way-to-install-pip-virtualenv-and-distribute-for-python" title="whats the proper way to install pip virtualenv and distribute for python">stackoverflow.com/questions/4324558/…</a></span>
<span class="comment-copy">@MikeS I don't know for certain what the workaround is, but I can tell you that running setup.py has led me to nightmare issues that required many hours of cleanup. I'm guessing that building/bundling with pip or conda would be the solution.</span>
<span class="comment-copy">You could change the link to <a href="https://docs.python.org/3/installing/index.html" rel="nofollow noreferrer">docs.python.org/3/installing/index.html</a>, which is the non-legacy documentation link, and also it would be good to add a link to <a href="https://packaging.python.org/tutorials/distributing-packages/#setup-py" rel="nofollow noreferrer">packaging.python.org/tutorials/distributing-packages/#setup-py</a> where it expains the purpose of the <code>setup.py</code> file.</span>
<span class="comment-copy">Like the comprehensive walkthrough! +1</span>
<span class="comment-copy">Kenneth Reitz (author of the venerable <code>requests</code>) has this project to explicitly give a good example of setup.py -- <a href="https://github.com/kennethreitz/setup.py" rel="nofollow noreferrer">github.com/kennethreitz/setup.py</a></span>
<span class="comment-copy">So according to the analogy above, if building the module failed for some reason I would tinker with the setup.py script...correct?</span>
<span class="comment-copy">Yes, there might also be some config files you can look at.</span>
<span class="comment-copy">Correct me if I am wrong, but I believe there is a small difference between the two. <code>python setup.py install</code> <a href="https://docs.python.org/2/install/index.html#splitting-the-job-up" rel="nofollow noreferrer">actually runs <code>python setup.py build</code> first</a> (so you don't need to run them separately unless in specific cases). I believe <code>make</code> always needs to be run manually prior to running <code>make install</code>.</span>
<span class="comment-copy">@cheflo Actually <code>make</code> does not require any specific parameters (or ordering): It's completely up to the creator of the <code>Makefile</code> which "targets" are available (and in which order they need to be invoked). Since bare <code>Makefile</code>s are (usually) not very portable, they tend to be generated using commands such as <code>./configure</code> (autotools) or <code>cmake .</code> (cmake) and it's therefor up to these programs to define whether you need to explicitly run <code>make</code> before <code>make install</code> or not.</span>
<span class="comment-copy">I need some one to tell me whether we should still use the setup.py any more according to the docs at <a href="https://docs.python.org/3/installing/index.html" rel="nofollow noreferrer">docs.python.org/3/installing/index.html</a>  "While direct use of distutils is being phased out, ..."</span>
<span class="comment-copy">Then you could use easy_install or similar. Btw, Python has eggs, sort of similar to ruby gems.</span>
