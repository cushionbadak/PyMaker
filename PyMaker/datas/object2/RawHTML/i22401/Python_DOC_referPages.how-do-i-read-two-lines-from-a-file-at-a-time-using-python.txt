<div class="post-text" itemprop="text">
<p>I am coding a python script that parses a text file. The format of this text file is such that each element in the file uses two lines and for convenience I would like to read both lines before parsing. Can this be done in Python?</p>
<p>I would like to some something like:</p>
<pre><code>f = open(filename, "r")
for line in f:
    line1 = line
    line2 = f.readline()

f.close
</code></pre>
<p>But this breaks saying that:</p>
<blockquote>
<p>ValueError: Mixing iteration and read methods would lose data</p>
</blockquote>
<h3>Related:</h3>
<ul>
<li><a href="https://stackoverflow.com/questions/434287/what-is-the-most-pythonic-way-to-iterate-over-a-list-in-chunks">What is the most “pythonic” way to iterate over a list in chunks?</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Similar question <a href="https://stackoverflow.com/questions/826493/python-mixing-files-and-loops">here</a>. You can't mix iteration and readline so you need to use one or the other.</p>
<pre><code>while True:
    line1 = f.readline()
    line2 = f.readline()
    if not line2: break  # EOF
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import itertools
with open('a') as f:
    for line1,line2 in itertools.zip_longest(*[f]*2):
        print(line1,line2)
</code></pre>
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer"><code>itertools.zip_longest()</code></a> returns an iterator, so it'll work well even if the file is billions of lines long.</p>
<p>If there are an odd number of lines, then <code>line2</code> is set to <code>None</code> on the last iteration.</p>
<p>On Python2 you need to use <a href="https://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="nofollow noreferrer"><code>izip_longest</code></a> instead.</p>
<hr/>
<p>In the comments, it has been asked if this solution reads the whole file first, and then iterates over the file a second time.
I believe that it does not. The <code>with open('a') as f</code> line opens a file handle, but does not read the file. <code>f</code> is an iterator, so its contents are not read until requested. <code>zip_longest</code> takes iterators as arguments, and returns an iterator. </p>
<p><code>zip_longest</code> is indeed fed the same iterator, f, twice. But what ends up happening is that <code>next(f)</code> is called on the first argument and then on the second argument. Since <code>next()</code> is being called on the same underlying iterator, successive lines are yielded. This is very different than reading in the whole file. Indeed the purpose of using iterators is precisely to avoid reading in the whole file.</p>
<p>I therefore believe the solution works as desired -- the file is only read once by the for-loop.</p>
<p>To corroborate this, I ran the zip_longest solution versus a solution using <code>f.readlines()</code>. I put a <code>input()</code> at the end to pause the scripts, and ran <code>ps axuw</code> on each:</p>
<pre><code>% ps axuw | grep zip_longest_method.py
</code></pre>
<p><code>unutbu   11119  2.2  0.2</code> <strong>4520  2712</strong> <code>pts/0    S+   21:14   0:00 python /home/unutbu/pybin/zip_longest_method.py bigfile</code></p>
<pre><code>% ps axuw | grep readlines_method.py
</code></pre>
<p><code>unutbu   11317  6.5  8.8</code> <strong>93908 91680</strong> <code>pts/0    S+   21:16   0:00 python /home/unutbu/pybin/readlines_method.py bigfile</code></p>
<p>The <code>readlines</code> clearly reads in the whole file at once. Since the <code>zip_longest_method</code> uses much less memory, I think it is safe to conclude it is not reading in the whole file at once.</p>
</div>
<div class="post-text" itemprop="text">
<p>use <a href="https://docs.python.org/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code></a>, eg</p>
<pre><code>with open("file") as f:
    for line in f:
        print(line)
        nextline = next(f)
        print("next line", nextline)
        ....
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would proceed in a similar way as <a href="https://stackoverflow.com/questions/1657299/how-do-i-read-two-lines-from-a-file-at-a-time-using-python/1657337#1657337">ghostdog74</a>, only with the try outside and a few modifications:</p>
<pre><code>try:
    with open(filename) as f:
        for line1 in f:
            line2 = f.next()
            # process line1 and line2 here
except StopIteration:
    print "(End)" # do whatever you need to do with line1 alone
</code></pre>
<p>This keeps the code simple and yet robust. Using the <code>with</code> closes the file if something else happens, or just closes the resources once you have exhausted it and exit the loop.</p>
<p>Note that <code>with</code> needs 2.6, or 2.5 with the <code>with_statement</code> feature enabled.</p>
</div>
<div class="post-text" itemprop="text">
<p>how about this one, anybody seeing a problem with it</p>
<pre><code>with open('file_name') as f:
    for line1, line2 in zip(f, f):
        print(line1, line2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Works for even and odd-length files. It just ignores the unmatched last line.</p>
<pre><code>f=file("file")

lines = f.readlines()
for even, odd in zip(lines[0::2], lines[1::2]):
    print "even : ", even
    print "odd : ", odd
    print "end cycle"
f.close()
</code></pre>
<p>If you have large files, this is not the correct approach. You are loading all the file in memory with readlines(). I once wrote a class that read the file saving the fseek position of each start of line. This allows you to get specific lines without having all the file in memory, and you can also go forward and backward.</p>
<p>I paste it here. License is Public domain, meaning, do what you want with it. Please note that this class has been written 6 years ago and I haven't touched or checked it since. I think it's not even file compliant. <em>Caveat emptor</em>. Also, note that this is overkill for your problem. I'm not claiming you should definitely go this way, but I had this code and I enjoy sharing it if you need more complex access.</p>
<pre><code>import string
import re

class FileReader:
    """ 
    Similar to file class, but allows to access smoothly the lines 
    as when using readlines(), with no memory payload, going back and forth,
    finding regexps and so on.
    """
    def __init__(self,filename): # fold&gt;&gt;
        self.__file=file(filename,"r")
        self.__currentPos=-1
        # get file length
        self.__file.seek(0,0)
        counter=0
        line=self.__file.readline()
        while line != '':
            counter = counter + 1
            line=self.__file.readline()
        self.__length = counter
        # collect an index of filedescriptor positions against
        # the line number, to enhance search
        self.__file.seek(0,0)
        self.__lineToFseek = []

        while True:
            cur=self.__file.tell()
            line=self.__file.readline()
            # if it's not null the cur is valid for
            # identifying a line, so store
            self.__lineToFseek.append(cur)
            if line == '':
                break
    # &lt;&lt;fold
    def __len__(self): # fold&gt;&gt;
        """
        member function for the operator len()
        returns the file length
        FIXME: better get it once when opening file
        """
        return self.__length
        # &lt;&lt;fold
    def __getitem__(self,key): # fold&gt;&gt;
        """ 
        gives the "key" line. The syntax is

        import FileReader
        f=FileReader.FileReader("a_file")
        line=f[2]

        to get the second line from the file. The internal
        pointer is set to the key line
        """

        mylen = self.__len__()
        if key &lt; 0:
            self.__currentPos = -1
            return ''
        elif key &gt; mylen:
            self.__currentPos = mylen
            return ''

        self.__file.seek(self.__lineToFseek[key],0)
        counter=0
        line = self.__file.readline()
        self.__currentPos = key
        return line
        # &lt;&lt;fold
    def next(self): # fold&gt;&gt;
        if self.isAtEOF():
            raise StopIteration
        return self.readline()
    # &lt;&lt;fold
    def __iter__(self): # fold&gt;&gt;
        return self
    # &lt;&lt;fold
    def readline(self): # fold&gt;&gt;
        """
        read a line forward from the current cursor position.
        returns the line or an empty string when at EOF
        """
        return self.__getitem__(self.__currentPos+1)
        # &lt;&lt;fold
    def readbackline(self): # fold&gt;&gt;
        """
        read a line backward from the current cursor position.
        returns the line or an empty string when at Beginning of
        file.
        """
        return self.__getitem__(self.__currentPos-1)
        # &lt;&lt;fold
    def currentLine(self): # fold&gt;&gt;
        """
        gives the line at the current cursor position
        """
        return self.__getitem__(self.__currentPos)
        # &lt;&lt;fold
    def currentPos(self): # fold&gt;&gt;
        """ 
        return the current position (line) in the file
        or -1 if the cursor is at the beginning of the file
        or len(self) if it's at the end of file
        """
        return self.__currentPos
        # &lt;&lt;fold
    def toBOF(self): # fold&gt;&gt;
        """
        go to beginning of file
        """
        self.__getitem__(-1)
        # &lt;&lt;fold
    def toEOF(self): # fold&gt;&gt;
        """
        go to end of file
        """
        self.__getitem__(self.__len__())
        # &lt;&lt;fold
    def toPos(self,key): # fold&gt;&gt;
        """
        go to the specified line
        """
        self.__getitem__(key)
        # &lt;&lt;fold
    def isAtEOF(self): # fold&gt;&gt;
        return self.__currentPos == self.__len__()
        # &lt;&lt;fold
    def isAtBOF(self): # fold&gt;&gt;
        return self.__currentPos == -1
        # &lt;&lt;fold
    def isAtPos(self,key): # fold&gt;&gt;
        return self.__currentPos == key
        # &lt;&lt;fold

    def findString(self, thestring, count=1, backward=0): # fold&gt;&gt;
        """
        find the count occurrence of the string str in the file
        and return the line catched. The internal cursor is placed
        at the same line.
        backward is the searching flow.
        For example, to search for the first occurrence of "hello
        starting from the beginning of the file do:

        import FileReader
        f=FileReader.FileReader("a_file")
        f.toBOF()
        f.findString("hello",1,0)

        To search the second occurrence string from the end of the
        file in backward movement do:

        f.toEOF()
        f.findString("hello",2,1)

        to search the first occurrence from a given (or current) position
        say line 150, going forward in the file 

        f.toPos(150)
        f.findString("hello",1,0)

        return the string where the occurrence is found, or an empty string
        if nothing is found. The internal counter is placed at the corresponding
        line number, if the string was found. In other case, it's set at BOF
        if the search was backward, and at EOF if the search was forward.

        NB: the current line is never evaluated. This is a feature, since
        we can so traverse occurrences with a

        line=f.findString("hello")
        while line == '':
            line.findString("hello")

        instead of playing with a readline every time to skip the current
        line.
        """
        internalcounter=1
        if count &lt; 1:
            count = 1
        while 1:
            if backward == 0:
                line=self.readline()
            else:
                line=self.readbackline()

            if line == '':
                return ''
            if string.find(line,thestring) != -1 :
                if count == internalcounter:
                    return line
                else:
                    internalcounter = internalcounter + 1
                    # &lt;&lt;fold
    def findRegexp(self, theregexp, count=1, backward=0): # fold&gt;&gt;
        """
        find the count occurrence of the regexp in the file
        and return the line catched. The internal cursor is placed
        at the same line.
        backward is the searching flow.
        You need to pass a regexp string as theregexp.
        returns a tuple. The fist element is the matched line. The subsequent elements
        contains the matched groups, if any.
        If no match returns None
        """
        rx=re.compile(theregexp)
        internalcounter=1
        if count &lt; 1:
            count = 1
        while 1:
            if backward == 0:
                line=self.readline()
            else:
                line=self.readbackline()

            if line == '':
                return None
            m=rx.search(line)
            if m != None :
                if count == internalcounter:
                    return (line,)+m.groups()
                else:
                    internalcounter = internalcounter + 1
    # &lt;&lt;fold
    def skipLines(self,key): # fold&gt;&gt;
        """
        skip a given number of lines. Key can be negative to skip
        backward. Return the last line read.
        Please note that skipLines(1) is equivalent to readline()
        skipLines(-1) is equivalent to readbackline() and skipLines(0)
        is equivalent to currentLine()
        """
        return self.__getitem__(self.__currentPos+key)
    # &lt;&lt;fold
    def occurrences(self,thestring,backward=0): # fold&gt;&gt;
        """
        count how many occurrences of str are found from the current
        position (current line excluded... see skipLines()) to the
        begin (or end) of file.
        returns a list of positions where each occurrence is found,
        in the same order found reading the file.
        Leaves unaltered the cursor position.
        """
        curpos=self.currentPos()
        list = []
        line = self.findString(thestring,1,backward)
        while line != '':
            list.append(self.currentPos())
            line = self.findString(thestring,1,backward)
        self.toPos(curpos)
        return list
        # &lt;&lt;fold
    def close(self): # fold&gt;&gt;
        self.__file.close()
    # &lt;&lt;fold
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre>
file_name = 'your_file_name'
file_open = open(file_name, 'r')

def handler(line_one, line_two):
    print(line_one, line_two)

while file_open:
    try:
        one = file_open.next()
        two = file_open.next() 
        handler(one, two)
    except(StopIteration):
        file_open.close()
        break
</pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def readnumlines(file, num=2):
    f = iter(file)
    while True:
        lines = [None] * num
        for i in range(num):
            try:
                lines[i] = f.next()
            except StopIteration: # EOF or not enough lines available
                return
        yield lines

# use like this
f = open("thefile.txt", "r")
for line1, line2 in readnumlines(f):
    # do something with line1 and line2

# or
for line1, line2, line3, ..., lineN in readnumlines(f, N):
    # do something with N lines
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My idea is to create a generator that reads two lines from the file at a time, and returns this as a 2-tuple, This means you can then iterate over the results.</p>
<pre><code>from cStringIO import StringIO

def read_2_lines(src):   
    while True:
        line1 = src.readline()
        if not line1: break
        line2 = src.readline()
        if not line2: break
        yield (line1, line2)


data = StringIO("line1\nline2\nline3\nline4\n")
for read in read_2_lines(data):
    print read
</code></pre>
<p>If you have an odd number of lines, it won't work perfectly, but this should give you a good outline.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have worked on a similar problem last month. I tried a while loop with f.readline() as well as f.readlines().
My data file is not huge, so I finally chose f.readlines(), which gives me more control of the index, otherwise
I have to use f.seek() to move back and forth the file pointer.</p>
<p>My case is more complicated than OP. Because my data file is more flexible on how many lines to be parsed each time, so
I have to check a few conditions before I can parse the data.</p>
<p>Another problem I found out about f.seek() is that it doesn't handle utf-8 very well when I use codecs.open('', 'r', 'utf-8'), (not exactly sure about the culprit, eventually I gave up this approach.)</p>
</div>
<div class="post-text" itemprop="text">
<p>Simple little reader. It will pull lines in pairs of two and return them as a tuple as you iterate over the object. You can close it manually or it will close itself when it falls out of scope.</p>
<pre><code>class doublereader:
    def __init__(self,filename):
        self.f = open(filename, 'r')
    def __iter__(self):
        return self
    def next(self):
        return self.f.next(), self.f.next()
    def close(self):
        if not self.f.closed:
            self.f.close()
    def __del__(self):
        self.close()

#example usage one
r = doublereader(r"C:\file.txt")
for a, h in r:
    print "x:%s\ny:%s" % (a,h)
r.close()

#example usage two
for x,y in doublereader(r"C:\file.txt"):
    print "x:%s\ny:%s" % (x,y)
#closes itself as soon as the loop goes out of scope
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>f = open(filename, "r")
for line in f:
    line1 = line
    f.next()

f.close
</code></pre>
<p>Right now, you can read file every two line. If you like you can also check the f status before <code>f.next()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>If the file is of reasonable size, another approach that uses <strong>list-comprehension</strong> to read the entire file into a <strong>list of 2-tuples</strong>, is this:</p>
<pre><code>filaname = '/path/to/file/name'

with open(filename, 'r') as f:
    list_of_2tuples = [ (line,f.readline()) for line in f ]

for (line1,line2) in list_of_2tuples: # Work with them in pairs.
    print('%s :: %s', (line1,line2))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This Python code will print the first two lines:</p>
<pre><code>import linecache  
filename = "ooxx.txt"  
print(linecache.getline(filename,2))
</code></pre>
</div>
<span class="comment-copy">Change f.readline() to f.next() and you're all set.</span>
<span class="comment-copy">See <a href="http://stackoverflow.com/questions/1528711/reading-lines-2-at-a-time" title="reading lines 2 at a time">stackoverflow.com/questions/1528711/reading-lines-2-at-a-time</a> for some more answers.</span>
<span class="comment-copy">@Paul Is this f.next() still valid? I am getting this error AttributeError: '_io.TextIOWrapper' object has no attribute 'next'</span>
<span class="comment-copy">@SKR on Python 3 you have to do <code>next(f)</code> instead.</span>
<span class="comment-copy">I like the <code>(*[f]*2)</code> because it shows that you can get any size chunks you want by just changing the number (so I won't edit the answer to change it), but in this case <code>(f, f)</code> is probably easier to type.</span>
<span class="comment-copy">if you use <code>lines</code> instead of <code>line1, line2</code> then you just need to change one number (<code>2</code>) to read <code>n</code> lines at a time.</span>
<span class="comment-copy">as RedGlyph points out in his version of this answer, an odd number of lines will result in a <code>StopIteration</code> being raised.</span>
<span class="comment-copy">This will discard the last line if your file has an odd number of lines. The nice thing is that you can extend this to read 3 lines at a time with <code>for l1, l2, l3 in zip(f, f, f):</code> and so on; again, the last 1 or 2 lines will be discarded if the number of lines isn't divisible by 3.</span>
<span class="comment-copy">You may want to use itertools.izip() instead, especially for big files!</span>
<span class="comment-copy">Even with izip, slicing the list like that will pull everything into memory.</span>
<span class="comment-copy">Actually the <code>readlines()</code> call will pull everything into memory too.</span>
<span class="comment-copy">I don't like your class. You're iterating two times over the whole file while initializing the file. For large files with short lines the saved memory isn't much.</span>
<span class="comment-copy">@Steve: yes, sadly enough. But zip would add an extra layer into memory by creating the whole list of tuples (unless it's Python 3), where izip would generate the tuples one at a time. I think that is what you meant, but I'd rather clarify my previous comment anyway :-)</span>
<span class="comment-copy"><code>while file_open:</code> is misleading due to it is equivalent to <code>while True:</code> in this case.</span>
<span class="comment-copy">Which is intentionally, although I agree that it is arguable cleaner to do 'while True' indicating that you need a break to get out of the loop. I chose not to do it because I believe (again arguable) that it reads nicer this way, leaving no doubt on how long the file needs to remain open and what do do with it in the mean time. Most of the time I would do 'while True' for myself too though.</span>
