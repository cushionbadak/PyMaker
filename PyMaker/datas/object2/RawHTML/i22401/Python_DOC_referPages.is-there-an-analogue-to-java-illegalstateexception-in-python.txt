<div class="post-text" itemprop="text">
<p>IllegalStateException is often used in Java when a method is invoked on an object in inappropriate state. What would you use instead in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, that would be <code>ValueError</code>, or a subclass of it.</p>
<p>For example, trying to <code>.read()</code> a closed file raises "ValueError: I/O operation on closed file".</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/library/exceptions.html?highlight=valueerror#exceptions.ValueError" rel="noreferrer">ValueError</a> sounds appropriate to me: </p>
<blockquote>
<p>Raised when a built-in operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as <a href="http://docs.python.org/library/exceptions.html?highlight=valueerror#exceptions.IndexError" rel="noreferrer">IndexError</a>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>ValueError</code> seems more like the equivalent to Java's <code>IllegalArgumentException</code>. </p>
<p><a href="https://docs.python.org/3/library/exceptions.html#RuntimeError" rel="nofollow noreferrer">RuntimeError</a> sounds like a better fit to me:</p>
<blockquote>
<p>Raised when an error is detected that doesnâ€™t fall in any of the other categories. The associated value is a string indicating what precisely went wrong.</p>
</blockquote>
<p>Most of the time you don't want to do any special error handling on such an error anyway, so the generic <code>RuntimeError</code> should suffice out of the box.</p>
<p>In case you do want to handle it differently to other errors just derive your own exception from it:</p>
<pre class="lang-py prettyprint-override"><code>class IllegalStateError(RuntimeError):
    pass
</code></pre>
</div>
<span class="comment-copy">Unfortunately that refers to a method's arguments, not to the object's state...</span>
<span class="comment-copy">"inappropriate value" is vague enough that I think it applies for passing arguments to a function which would be ok in some conditions, but invalid due to the object's current state.</span>
<span class="comment-copy">What if the function has no arguments?</span>
<span class="comment-copy">In Python, <code>self</code> <i>is</i> an argument!</span>
