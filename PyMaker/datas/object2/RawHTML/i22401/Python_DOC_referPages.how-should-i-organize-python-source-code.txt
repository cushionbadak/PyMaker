<div class="post-text" itemprop="text">
<p>I'm getting started with Python (it's high time I give it a shot), and I'm looking for some best practices.</p>
<p>My first project is a queue which runs command-line experiments in multiple threads. I'm starting to get a very long <code>main.py</code> file, and I'd like to break it up. In general, I'm looking for: <strong>How do python programmers organize multiple source files?</strong> Is there a particular structure that works for you?</p>
<p>My specific questions include:</p>
<ol>
<li>Should each class be in a separate file?</li>
<li>How should I organize unit tests relative to source code?</li>
<li>Where should I put doc comments, specifically those for command-line operation?</li>
<li>If I use multiple directories, how do I import classes between them?</li>
</ol>
<p>I can probably draw some of my own conclusions here by trial and error, but I'd rather start from something <em>good</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://infinitemonkeycorps.net/docs/pph/">article Eric pointed</a> to is awesome because it covers details of organising large Python code bases.</p>
<p>If you've landed here from Google and are trying to find out how to split one large source file into multiple, more manageable, files I'll summarise the process briefly.</p>
<p>Assume you currently have everything in a file called <code>main.py</code>:</p>
<ul>
<li>Create another source file in the same folder (let's call ours <code>utils.py</code> for this example)</li>
<li>Move whatever classes, functions, statements, etc you need from <code>main.py</code> into <code>utils.py</code></li>
<li>In <code>main.py</code> add a single line at the top: <code>import utils</code></li>
</ul>
<p>Conceptually what this does is to create a new module called <code>utils</code> in another source file.  You can then import it wherever it's needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>The way you should organise your code and tests is exactly the same you would for any OO language. </p>
<p>Answers from the way I do it. It may not be right but works for me</p>
<ol>
<li>Depends on how your functionality is split. For my main python app I have 1 file with classes for the entry points and then packages of different bits of functionality</li>
<li>I use PyDev for eclipse and organise it like I would for Java. </li>
</ol>
<blockquote>
<pre><code>&gt;  Workspace
&gt;     |
&gt;     |-Src
&gt;     |   |-Package1
&gt;     |   |-Package2
&gt;     |   |-main.py
&gt;     |-Test
&gt;         |-TestPackage1
&gt;         |-TestPackage2
</code></pre>
</blockquote>
<ol start="3">
<li>Use DocString everywhere to keep track of everything</li>
<li>After making sure that the relevant <code>__init__.py</code> files are in the folders. its just a simple case of <code>from module import class</code></li>
</ol>
</div>
<span class="comment-copy">This will explain a couple of things about organizing your code <a href="http://docs.python.org/tutorial/modules.html" rel="nofollow noreferrer">docs.python.org/tutorial/modules.html</a></span>
<span class="comment-copy">Here is some more useful info from python docs. &lt;br&gt; <a href="http://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html#packages</a></span>
<span class="comment-copy">This question is in search of a broadly-accepted convention specifically in the Python community. The answer is not a matter of opinion, though like most answers it could change with time. I suggest this be re-opened or at the very least the original answer undeleted.</span>
<span class="comment-copy">Do you happen to remember the article Eric pointed to? I can't seem to find an Eric on this question/answer</span>
<span class="comment-copy">@DanR, yes, <a href="http://infinitemonkeycorps.net/docs/pph/" rel="nofollow noreferrer">this is the article</a>. For some reason a moderator deleted his answer, despite it having 56 upvotes.</span>
<span class="comment-copy">@DrewNoakes: I think it was deleted for being a link-only answer; if only he had summarized the article's main points.</span>
<span class="comment-copy">One caveat, though:  java takes kind of a dictatorial relationship with packages, files and classes.  Sometimes I end up with way more source files than I would really want.  The conventions of some organizations  --  e.g. - avoid (nested) inner classes or "helper" classes lower in the file -- make this worse, beyond the compiler's requirements.   Keep it orderly, and a hierarchy is useful, but try to avoid make-work.</span>
