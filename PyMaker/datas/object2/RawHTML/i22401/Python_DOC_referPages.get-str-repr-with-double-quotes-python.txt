<div class="post-text" itemprop="text">
<p>I'm using a small Python script to generate some binary data that will be used in a C header.</p>
<p>This data should be declared as a <code>char[]</code>, and it will be nice if it could be encoded as a string (with the pertinent escape sequences when they are not in the range of ASCII printable chars) to keep the header more compact than with a decimal or hexadecimal array encoding.</p>
<p>The problem is that when I print the <code>repr</code> of a Python string, it is delimited by single quotes, and C doesn't like that. The naive solution is to do:</p>
<pre><code>'"%s"'%repr(data)[1:-1]
</code></pre>
<p>but that doesn't work when one of the bytes in the data happens to be a double quote, so I'd need them to be escaped too.</p>
<p>I think a simple <code>replace('"', '\\"')</code> could do the job, but maybe there's a better, more pythonic solution out there.</p>
<p><strong>Extra point</strong>:</p>
<p>It would be convenient too to split the data in lines of approximately 80 characters, but again the simple approach of <a href="https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python">splitting the source string in chunks</a> of size 80 won't work, as each non printable character takes 2 or 3 characters in the escape sequence. Splitting the list in chunks of 80 <em>after</em> getting the repr won't help either, as it could divide escape sequence.</p>
<p>Any suggestions?</p>
</div>
<div class="post-text" itemprop="text">
<p>repr() isn't what you want.  There's a fundamental problem: repr() can use any representation of the string that can be evaluated as Python to produce the string.  That means, in theory, that it might decide to use any number of other constructs which wouldn't be valid in C, such as """long strings""".</p>
<p>This code is probably the right direction.  I've used a default of wrapping at 140, which is a sensible value for 2009, but if you really want to wrap your code to 80 columns, just change it.</p>
<p>If unicode=True, it outputs a L"wide" string, which can store Unicode escapes meaningfully.  Alternatively, you might want to convert Unicode characters to UTF-8 and output them escaped, depending on the program you're using them in.</p>
<pre><code>def string_to_c(s, max_length = 140, unicode=False):
    ret = []

    # Try to split on whitespace, not in the middle of a word.
    split_at_space_pos = max_length - 10
    if split_at_space_pos &lt; 10:
        split_at_space_pos = None

    position = 0
    if unicode:
        position += 1
        ret.append('L')

    ret.append('"')
    position += 1
    for c in s:
        newline = False
        if c == "\n":
            to_add = "\\\n"
            newline = True
        elif ord(c) &lt; 32 or 0x80 &lt;= ord(c) &lt;= 0xff:
            to_add = "\\x%02x" % ord(c)
        elif ord(c) &gt; 0xff:
            if not unicode:
                raise ValueError, "string contains unicode character but unicode=False"
            to_add = "\\u%04x" % ord(c)
        elif "\\\"".find(c) != -1:
            to_add = "\\%c" % c
        else:
            to_add = c

        ret.append(to_add)
        position += len(to_add)
        if newline:
            position = 0

        if split_at_space_pos is not None and position &gt;= split_at_space_pos and " \t".find(c) != -1:
            ret.append("\\\n")
            position = 0
        elif position &gt;= max_length:
            ret.append("\\\n")
            position = 0

    ret.append('"')

    return "".join(ret)

print string_to_c("testing testing testing testing testing testing testing testing testing testing testing testing testing testing testing testing testing", max_length = 20)
print string_to_c("Escapes: \"quote\" \\backslash\\ \x00 \x1f testing \x80 \xff")
print string_to_c(u"Unicode: \u1234", unicode=True)
print string_to_c("""New
lines""")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're asking a python <code>str</code> for its <code>repr</code>, I don't think the type of quote is really configurable.  From the <code>PyString_Repr</code> function in the python 2.6.4 source tree:</p>
<pre><code>    /* figure out which quote to use; single is preferred */
    quote = '\'';
    if (smartquotes &amp;&amp;
        memchr(op-&gt;ob_sval, '\'', Py_SIZE(op)) &amp;&amp;
        !memchr(op-&gt;ob_sval, '"', Py_SIZE(op)))
        quote = '"';
</code></pre>
<p>So, I guess use double quotes if there is a single quote in the string, but don't even then if there is a double quote in the string.</p>
<p>I would try something like writing my own class to contain the string data instead of using the built in string to do it.  One option would be deriving a class from <code>str</code> and writing your own <code>repr</code>:</p>
<pre><code>class MyString(str):
    __slots__ = []
    def __repr__(self):
        return '"%s"' % self.replace('"', r'\"')

print repr(MyString(r'foo"bar'))
</code></pre>
<p>Or, don't use <code>repr</code> at all:</p>
<pre><code>def ready_string(string):
    return '"%s"' % string.replace('"', r'\"')

print ready_string(r'foo"bar')
</code></pre>
<p>This simplistic quoting might not do the "right" thing if there's already an escaped quote in the string.</p>
</div>
<div class="post-text" itemprop="text">
<p>Better not hack the <code>repr()</code> but use the right encoding from the beginning. You can get the repr's encoding directly with the encoding <code>string_escape</code></p>
<pre><code>&gt;&gt;&gt; "naïveté".encode("string_escape")
'na\\xc3\\xafvet\\xc3\\xa9'
&gt;&gt;&gt; print _
na\xc3\xafvet\xc3\xa9
</code></pre>
<p>For escaping the "-quotes I think using a simple replace after escape-encoding the string is a completely unambiguous process:</p>
<pre><code>&gt;&gt;&gt; '"%s"' % 'data:\x00\x01 "like this"'.encode("string_escape").replace('"', r'\"')
'"data:\\x00\\x01 \\"like this\\""'
&gt;&gt;&gt; print _
"data:\x00\x01 \"like this\""
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could try <code>json.dumps</code>:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; print(json.dumps("hello world"))
"hello world"

&gt;&gt;&gt; print(json.dumps('hëllo "world"!'))
"h\u00ebllo \"world\"!"
</code></pre>
<p>I don't know for sure whether json strings are compatible with C but at least they have a pretty large common subset and are guaranteed to be compatible with javascript;).</p>
</div>
<span class="comment-copy">isn't the 'elif "\\\"".find(c) != -1' the same as 'elif c in "\\\""'? In any case I agree, repr() is not the solution here and you have to do something like this.</span>
<span class="comment-copy">80 column text recommendation was not based on monitor width. It comes from typography. Look at some news papers: look at a tabloid look at a broad-sheet. How wide are the columns?</span>
<span class="comment-copy">+1 Extending str is a brilliant idea! Thank you!</span>
<span class="comment-copy">that doesn't solve my problem, it still shows double quotes unescaped <code>'quotehere"'.encode("string_escape")</code> gives <code>'quotehere"'</code></span>
<span class="comment-copy">In Python 3 it is <a href="https://docs.python.org/3/library/codecs.html?highlight=unicode_escape#text-encodings" rel="nofollow noreferrer"><code>unicode_escape</code></a>. See also <a href="https://stackoverflow.com/a/6868026">this answer for another question</a>.</span>
