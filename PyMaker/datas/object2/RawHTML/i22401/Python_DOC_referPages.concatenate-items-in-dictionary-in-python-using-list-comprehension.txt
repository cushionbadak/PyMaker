<div class="post-text" itemprop="text">
<p>EDIT: Clarified the question a  bit</p>
<p>How can I get a string from a dictionary with the format</p>
<pre><code>key1 = value1
key2 = value2
</code></pre>
<p>in a relatively fast way ? (relative to plain concatenation)</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no reason to use list comprehension here.</p>
<p>Python 3.x:</p>
<pre><code>for k,v in mydict.items():
  print(k, '=', v)
</code></pre>
<p>Python 2.x:</p>
<pre><code>for k,v in mydict.iteritems():
  print k, '=', v
</code></pre>
<p><strong>EDIT because of comment by OP in another answer:</strong></p>
<p>If you're passing it to a function and not printing it here, then you should just pass the generator to the function, or the dict itself and let the function handle whatever it needs to do with it. </p>
<p>This is much better than converting it to a string inside a scope where it's not even needed. The function should do that, since that's where it's used.</p>
<p>I made a wrapper function, since editing the main function is out of the question.</p>
<pre><code>def log_wrap(mydict):
    mystr = '\n'.join(['%s = %s' % (k,v) for k,v in mydict.iteritems()])
    write_to_log(mydict)

log_wrap(mydict)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>print '\n'.join('%s = %s' % (key, value) for key, value in d.iteritems())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><em>Explicit is better than implicit</em></p>
<p>List comprehension is a <a href="http://www.python.org/dev/peps/pep-0202/" rel="nofollow noreferrer">way to create list</a>, not to avoid loops.<br/>
From PEP 202:</p>
<blockquote>
<p>List comprehensions provide a more
  concise way to create lists in
  situations where map() and filter()
  and/or nested loops would currently be
  used.</p>
</blockquote>
<p>So you should ask yourself:<br/>
When is it useful to create this code in Python? It may be more compact but code is read many more times than it is written so what is the advantage in it?</p>
<p>Tor Valamo's solution, although not what was asked for in the original request, is in my opinion far more readable, <strong>and therefore should be preferred</strong>.</p>
<p><strong>EDIT after question update</strong><br/>
<a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a> is a good way to implement a fast concatenation from a list - and replies from Nadia and Ritchie are good examples of how to use it.<br/>
Again, I would <strong>not</strong> perform everything in a single line, but I would split it in various steps to emphasize readability.</p>
</div>
<div class="post-text" itemprop="text">
<p>Like this:</p>
<pre><code>DATA = {'key1': 'value1', 'key2': 'value2'}
print "\n".join(sorted(["%s = %s" % (k,v) for (k,v) in DATA.iteritems()]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I prefer the pythonic way:</p>
<pre><code>mydict = {'a':1, 'b':2, 'c':3}
for (key, value) in mydict.items():
    print key, '=', value
</code></pre>
</div>
<span class="comment-copy">I don't see any namespaces here. Did you mean "scope"?</span>
<span class="comment-copy">The function I am passing it to is from a logging module that I cannot change.</span>
<span class="comment-copy">@Pavel - yes i did. :P   @Jaelebi - So you're passing the same string to the same logging function several times? why?</span>
<span class="comment-copy">@Jaelebi - Either way you should probably wrap it like my edit says, so as to leave the rest of the code 'clean'.</span>
<span class="comment-copy">im passing it several times since I have a loop that iterates over messages(in binary files) and which it then converts to a dictionary and does quite a lot of other stuff. Each of the messages have to be logged in a human readable format then</span>
<span class="comment-copy">Thanks, it helped me. join is a wonderful construct and these kind of things make Python unimaginable!!</span>
<span class="comment-copy">I undeleted my answer after a little edit. I looped it as a tupled list at first, so it was wrong.</span>
<span class="comment-copy">I wanted this method since I want to pass the complete string to a function. In case of directly looping, I would have to concatenate it or use a stringIO function. And I need to do this a LOT of times</span>
<span class="comment-copy">Your question says "How can I print out a dictionary with the format ..." And that's what we've answered. If you need it for something else then you should explain that scenario, as there are probably other optimisations for that too.</span>
<span class="comment-copy">mydict.iteritems() would be better for huge dicts</span>
