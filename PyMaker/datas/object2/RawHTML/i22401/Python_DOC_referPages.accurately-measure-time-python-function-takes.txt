<div class="post-text" itemprop="text">
<p>I need to measure the time certain parts of my program take (not for debugging but as a feature in the output). Accuracy is important because the total time will be a fraction of a second.</p>
<p>I was going to use the <a href="http://docs.python.org/library/time.html" rel="noreferrer">time module</a> when I came across <a href="http://docs.python.org/library/timeit.html" rel="noreferrer">timeit</a>, which claims to <em>avoid a number of common traps for measuring execution times</em>. Unfortunately it has an awful interface, taking a string as input which it then eval's. </p>
<p>So, do I need to use this module to measure time accurately, or will time suffice? And what are the pitfalls it refers to?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the Python <a href="http://docs.python.org/library/timeit.html" rel="noreferrer">documentation</a> it has to do with the accuracy of the time function in different operating systems:</p>
<blockquote>
<p>The default timer function is platform
  dependent. On Windows, time.clock()
  has microsecond granularity but
  time.time()â€˜s granularity is 1/60th of
  a second; on Unix, time.clock() has
  1/100th of a second granularity and
  time.time() is much more precise. On
  either platform, the default timer
  functions measure wall clock time, not
  the CPU time. This means that other
  processes running on the same computer
  may interfere with the timing ... On Unix, you can
  use time.clock() to measure CPU time.</p>
</blockquote>
<p>To pull directly from <code>timeit.py</code>'s code:</p>
<pre><code>if sys.platform == "win32":
    # On Windows, the best timer is time.clock()
    default_timer = time.clock
else:
    # On most other platforms the best timer is time.time()
    default_timer = time.time
</code></pre>
<p>In addition, it deals directly with setting up the runtime code for you.  If you use time you have to do it yourself.  This, of course <strong>saves you time</strong></p>
<p>Timeit's setup:</p>
<pre><code>def inner(_it, _timer):
    #Your setup code
    %(setup)s
    _t0 = _timer()
    for _i in _it:
        #The code you want to time
        %(stmt)s
    _t1 = _timer()
    return _t1 - _t0
</code></pre>
<h2>Edit, Python 3 only:</h2>
<p>Since Python 3.3 you can use <a href="http://docs.python.org/3/library/time.html#time.perf_counter" rel="noreferrer"><code>time.perf_counter()</code></a> (system-wide timing) or <a href="http://docs.python.org/3/library/time.html#time.process_time" rel="noreferrer"><code>time.process_time()</code></a> (process-wide timing), just the way you used to use <code>time.clock()</code>:</p>
<pre><code>from time import process_time

t = process_time()
#do some stuff
elapsed_time = process_time() - t
</code></pre>
<p>The new function <code>process_time</code> will not include time elapsed during sleep.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could build a timing context (see <a href="http://www.python.org/dev/peps/pep-0343/" rel="noreferrer">PEP 343</a>) to measure blocks of code pretty easily.</p>
<pre><code>from __future__ import with_statement
import time

class Timer(object):
    def __enter__(self):
        self.__start = time.time()

    def __exit__(self, type, value, traceback):
        # Error handling here
        self.__finish = time.time()

    def duration_in_seconds(self):
        return self.__finish - self.__start

timer = Timer()

with timer:
    # Whatever you want to measure goes here
    time.sleep(2)

print timer.duration_in_seconds()    
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The timeit module looks like it's designed for doing performance testing of algorithms, rather than as simple monitoring of an application.  Your best option is probably to use the time module, call <code>time.time()</code> at the beginning and end of the segment you're interested in, and subtract the two numbers.  Be aware that the number you get may have many more decimal places than the actual resolution of the system timer.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have you reviewed the functionality provided profile or cProfile?</p>
<p><a href="http://docs.python.org/library/profile.html" rel="nofollow noreferrer">http://docs.python.org/library/profile.html</a></p>
<p>This provides much more detailed information than just printing the time before and after a function call.  Maybe worth a look...</p>
</div>
<div class="post-text" itemprop="text">
<p>I was annoyed too by the awful interface of timeit so i made a library for this, check it out its trivial to use </p>
<pre><code>
from pythonbenchmark import compare, measure
import time

a,b,c,d,e = 10,10,10,10,10
something = [a,b,c,d,e]

def myFunction(something):
    time.sleep(0.4)

def myOptimizedFunction(something):
    time.sleep(0.2)

# comparing test
compare(myFunction, myOptimizedFunction, 10, input)
# without input
compare(myFunction, myOptimizedFunction, 100)
</code></pre>
<p><a href="https://github.com/Karlheinzniebuhr/pythonbenchmark" rel="nofollow noreferrer">https://github.com/Karlheinzniebuhr/pythonbenchmark</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>The documentation also mentions that time.clock() and time.time() have different resolution depending on platform.  On Unix, time.clock() measures CPU time as opposed to wall clock time.</p>
<p>timeit also disables garbage collection when running the tests, which is probably not what you want for production code.</p>
<p>I find that time.time() suffices for most purposes.</p>
</div>
<div class="post-text" itemprop="text">
<p>From Python 2.6 on timeit is not limited to input string anymore. Citing <a href="http://docs.python.org/2/library/timeit.html#timeit.Timer" rel="nofollow">the documentation</a>:</p>
<blockquote>
<p>Changed in version 2.6: The stmt and setup parameters can now also take objects that are callable without arguments. This will embed calls to them in a timer function that will then be executed by timeit(). Note that the timing overhead is a little larger in this case because of the extra function calls.</p>
</blockquote>
</div>
<span class="comment-copy">Accuracy?  Sub-second?  Since most OS's have very flexible scheduling, these two doesn't work together.  Sub-second events cannot be guaranteed to be scheduled consistently.  You'll have huge variability in the way your process is scheduled.  What are you really trying to do?</span>
<span class="comment-copy">Wouldn't the python module "profile" provide the result you need ?</span>
<span class="comment-copy"><code>timeit.default_timer</code> is <code>time.perf_counter</code> on Python 3.3+ i.e., you could use <code>default_timer</code> on all versions.</span>
<span class="comment-copy">for the record if you're using this in a script I had to do <code>import time</code> instead of <code>import time.process_time</code>, or <code>from time import process_time</code> on 3.4, or maybe I'm doing something wrong ;)</span>
<span class="comment-copy">@matrixanomaly You're not wrong at all. <a href="http://stackoverflow.com/a/12447748/1145901">This answer</a> explains (a bit) why that is: you need to clarify whether <code>time</code> is referring to the module, or the function inside it.</span>
<span class="comment-copy">@hellobenallan nice, thanks for confirming and making the edits. I didn't go ahead and do that because I wasn't entirely sure :)</span>
<span class="comment-copy">The quote from the docs seems to contradict the comments in <code>timeit.py</code>'s code. The former seems to say that <code>time.clock()</code> should be used (on Unix) to avoid timing other things going on with the scheduler, etc. and to get an accurate CPU time; but the latter seems to say to use <code>time.time()</code> for that purpose. Which should I use on Unix (OS X) to get CPU time?</span>
<span class="comment-copy">this looks simple enough for cross-grained measures. But for fine-grained atomic operations like those described in the questions (where milliseconds matter),, I am not sure.</span>
<span class="comment-copy">yeah that was what I thought of originally, before I saw the timeit module</span>
<span class="comment-copy">Ans there's the new hotshot profiler module.</span>
<span class="comment-copy">@CruiZen - of course, this question/answer was from 1.5 yrs ago! :)</span>
<span class="comment-copy">Great library: it works perfectly! Thank you</span>
