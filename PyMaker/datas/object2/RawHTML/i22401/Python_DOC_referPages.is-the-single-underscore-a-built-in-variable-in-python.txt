<div class="post-text" itemprop="text">
<p>I don't understand what this single underscore means. Is it a magic variable? I can't see it in locals() and globals().</p>
<pre><code>&gt;&gt;&gt; 'abc'
'abc'
&gt;&gt;&gt; len(_)
3
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In the standard Python REPL, <code>_</code> represents the last returned value -- at the point where you called <code>len(_)</code>, <code>_</code> was the value <code>'abc'</code>.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; 10
10
&gt;&gt;&gt; _
10
&gt;&gt;&gt; _ + 5
15
&gt;&gt;&gt; _ + 5
20
</code></pre>
<p>This is handled by <a href="https://docs.python.org/3/library/sys.html#sys.displayhook" rel="noreferrer"><code>sys.displayhook</code></a>, and the <code>_</code> variable goes in the <a href="https://docs.python.org/3/library/builtins.html" rel="noreferrer"><code>builtins</code></a> namespace with things like <code>int</code> and <code>sum</code>, which is why you couldn't find it in <code>globals()</code>.</p>
<p>Note that there is no such functionality within Python <em>scripts</em>.  In a script, <code>_</code> has no special meaning and will not be automatically set to the value produced by the previous statement.</p>
<p>Also, beware of reassigning <code>_</code> in the REPL if you want to use it like above!</p>
<pre><code>&gt;&gt;&gt; _ = "underscore"
&gt;&gt;&gt; 10
10
&gt;&gt;&gt; _ + 5

Traceback (most recent call last):
  File "&lt;pyshell#6&gt;", line 1, in &lt;module&gt;
    _ + 5
TypeError: cannot concatenate 'str' and 'int' objects
</code></pre>
<p>This creates a global variable that hides the <code>_</code> variable in the built-ins. To undo the assignment (and remove the <code>_</code> from globals), you'll have to:</p>
<pre><code>&gt;&gt;&gt; del _
</code></pre>
<p>then the functionality will be back to normal (the <code>builtins._</code> will be visible again).</p>
</div>
<div class="post-text" itemprop="text">
<p>Why you can't see it? It is in <code>__builtins__</code></p>
<pre><code>&gt;&gt;&gt; __builtins__._ is _
True
</code></pre>
<p>So it's neither global nor local. <sup>1</sup></p>
<p>And where does this assignment happen? <code>sys.displayhook</code>:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; help(sys.displayhook)
Help on built-in function displayhook in module sys:

displayhook(...)
    displayhook(object) -&gt; None

    Print an object to sys.stdout and also save it in __builtin__.
</code></pre>
<p><sup>1</sup> 2012 Edit : I'd call it <em>"superglobal"</em> since <code>__builtin__</code>'s members are available everywhere, in any module.</p>
</div>
<div class="post-text" itemprop="text">
<p>Usually, we are using _ in Python to bind a ugettext function.</p>
</div>
<span class="comment-copy">Related post - <a href="https://stackoverflow.com/q/8920341/465053">Finding a list of all double-underscore variables?</a></span>
<span class="comment-copy">FYI: REPL is short for Read-Eval-Print Loop.  As always, wikipedia has more info if you want it. <a href="http://en.wikipedia.org/wiki/Read-eval-print_loop" rel="nofollow noreferrer">en.wikipedia.org/wiki/Read-eval-print_loop</a></span>
<span class="comment-copy">What is a "run-of-the-mill identifier"? Quick search resulted in "merely average; commonplace; mediocre" - what does this mean regarding "_" in python scripts?</span>
<span class="comment-copy">@ectomorph updated to clarify.</span>
<span class="comment-copy">FYI - <b>A word of caution</b> : The <code>_</code> variable should be treated as read-only by the user. Don’t explicitly assign a value to it — you would create an independent local variable with the same name masking the built-in variable with its magic behavior.</span>
<span class="comment-copy">Why is something that is only usable in the REPL but not in scripts placed in <b>builtin</b>?</span>
<span class="comment-copy">this is also true, but only for Python Applications. <code>gettext.install</code> will bind to <code>__builtins__._</code>, so that it is available without importing in all of the application; thus the same kind of "magic" name.</span>
