<div class="post-text" itemprop="text">
<p>In PHP, I can do this:</p>
<pre><code>echo '&lt;pre&gt;'
print_r($array);
echo '&lt;/pre&gt;'
</code></pre>
<p>In Python, I currently just do this:</p>
<pre><code>print the_list
</code></pre>
<p>However, this will cause a big jumbo of data. Is there any way to print it nicely into a readable tree? (with indents)?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from pprint import pprint
pprint(the_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A quick hack while debugging that works without having to import <code>pprint</code> would be to join the list on <code>'\n'</code>.</p>
<pre><code>&gt;&gt;&gt; lst = ['foo', 'bar', 'spam', 'egg']
&gt;&gt;&gt; print '\n'.join(lst)
foo
bar
spam
egg
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You mean something like...:</p>
<pre><code>&gt;&gt;&gt; print L
['this', 'is', 'a', ['and', 'a', 'sublist', 'too'], 'list', 'including', 'many', 'words', 'in', 'it']
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(L)
['this',
 'is',
 'a',
 ['and', 'a', 'sublist', 'too'],
 'list',
 'including',
 'many',
 'words',
 'in',
 'it']
&gt;&gt;&gt; 
</code></pre>
<p>...?  From your cursory description, standard library module <a href="http://docs.python.org/library/pprint.html" rel="noreferrer">pprint</a> is the first thing that comes to mind; however, if you can describe example inputs and outputs (so that one doesn't have to learn PHP in order to help you;-), it may be possible for us to offer more specific help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Simply by "unpacking" the list in the print function argument and using a newline (\n) as separator.</p>
<p><strong>print(*lst, sep='\n')</strong></p>
<pre><code>lst = ['foo', 'bar', 'spam', 'egg']
print(*lst, sep='\n')

foo
bar
spam
egg
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/pprint.html" rel="nofollow">https://docs.python.org/3/library/pprint.html</a></p>
<p>If you need the text (for using with curses for example):</p>
<pre><code>import pprint

myObject = []

myText = pprint.pformat(myObject)
</code></pre>
<p>Then <code>myText</code> variable will something alike php <code>var_dump</code> or <code>print_r</code>. Check the documentation for more options, arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>As the other answers suggest <strong>pprint</strong> module does the trick. <br/>
Nonetheless, in case of debugging where you might need to put the entire list into some log file, one might have to use pformat method along with module <strong>logging</strong> along with pprint.</p>
<pre><code>import logging
from pprint import pformat

logger = logging.getLogger('newlogger')
handler = logging.FileHandler('newlogger.log')

formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
handler.setFormatter(formatter)

logger.addHandler(handler) 
logger.setLevel(logging.WARNING)

data = [ (i, { '1':'one',
           '2':'two',
           '3':'three',
           '4':'four',
           '5':'five',
           '6':'six',
           '7':'seven',
           '8':'eight',
           })
         for i in xrange(3)
      ]

logger.error(pformat(data))
</code></pre>
<p>And if you need to directly log it to a File, one would have to specify an output stream, using the stream keyword. <a href="https://docs.python.org/2/library/pprint.html#module-pprint" rel="nofollow noreferrer">Ref</a></p>
<pre><code>from pprint import pprint

with open('output.txt', 'wt') as out:
   pprint(myTree, stream=out)
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/17280534/prettyprint-to-a-file">Stefano Sanfilippo's answer</a></p>
</div>
<div class="post-text" itemprop="text">
<pre class="lang-python prettyprint-override"><code>import json
some_list = ['one', 'two', 'three', 'four']
print(json.dumps(some_list, indent=4))
</code></pre>
<p>Output:</p>
<pre><code>[
    "one",
    "two",
    "three",
    "four"
]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As other answers have mentioned, <code>pprint</code> is a great module that will do what you want. However if you don't want to import it and just want to print debugging output during development, you can approximate its output.</p>
<p>Some of the other answers work fine for strings, but if you try them with a class object it will give you the error <code>TypeError: sequence item 0: expected string, instance found</code>. </p>
<p>For more complex objects, make sure the class has a <code>__repr__</code> method that prints the property information you want:</p>
<pre><code>class Foo(object):
    def __init__(self, bar):
        self.bar = bar

    def __repr__(self):
        return "Foo - (%r)" % self.bar
</code></pre>
<p>And then when you want to print the output, simply map your list to the <code>str</code> function like this:</p>
<pre><code>l = [Foo(10), Foo(20), Foo("A string"), Foo(2.4)]
print "[%s]" % ",\n ".join(map(str,l))
</code></pre>
<p>outputs:</p>
<pre><code> [Foo - (10),
  Foo - (20),
  Foo - ('A string'),
  Foo - (2.4)]
</code></pre>
<p>You can also do things like override the <code>__repr__</code> method of <code>list</code> to get a form of nested pretty printing:</p>
<pre><code>class my_list(list):
    def __repr__(self):
        return "[%s]" % ",\n ".join(map(str, self))

a = my_list(["first", 2, my_list(["another", "list", "here"]), "last"])
print a
</code></pre>
<p>gives</p>
<pre><code>[first,
 2,
 [another,
 list,
 here],
 last]
</code></pre>
<p>Unfortunately no second-level indentation but for a quick debug it can be useful.</p>
</div>
<div class="post-text" itemprop="text">
<p>For <strong>Python 3</strong>, I do the same kind of thing as <a href="https://stackoverflow.com/a/28928248/9526925">shxfee's answer</a>:</p>
<pre><code>def print_list(my_list):
    print('\n'.join(my_list))

a = ['foo', 'bar', 'baz']
print_list(a)
</code></pre>
<p>which outputs</p>
<pre><code>foo
bar
baz
</code></pre>
<p>As an aside, I use a similar helper function to quickly see columns in a pandas DataFrame</p>
<pre><code>def print_cols(df):
    print('\n'.join(df.columns))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can also loop trough your list:</p>
<pre><code>def fun():
  for i in x:
    print(i)

x = ["1",1,"a",8]
fun()
</code></pre>
</div>
<span class="comment-copy">How ot pretty print to a file?</span>
<span class="comment-copy">Why not just use <code>import pprint</code>?</span>
<span class="comment-copy">@clankill3r, then you need to use <code>pprint.pprint(the_list)</code> usually it's just a matter of personal preference. I chose to have the extra clutter in the import line in this case.</span>
<span class="comment-copy">@Mawg, you can specify an output stream using <code>stream=</code>, the default is stdout. <a href="https://docs.python.org/3/library/pprint.html" rel="nofollow noreferrer">docs.python.org/3/library/pprint.html</a></span>
<span class="comment-copy">It's enabled by default in Ipython REPL</span>
<span class="comment-copy">TypeError when the list contains <code>None</code>.</span>
<span class="comment-copy">Easy solution and can be formated like `"list: * {}".format('\n * '.join(lst))</span>
<span class="comment-copy">Nice but unfortunately only available in Python 3.</span>
<span class="comment-copy">Hello! Please format the code, as it is, it's not easy to follow. Also, global is not meant to be used it that way in python. See <a href="https://stackoverflow.com/questions/423379/using-global-variables-in-a-function" title="using global variables in a function">stackoverflow.com/questions/423379/â€¦</a></span>
