<div class="post-text" itemprop="text">
<p>Haven't Python iterators got a <code>hasNext</code> method?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, there is no such method. The end of iteration is indicated by an exception. See the <a href="http://docs.python.org/library/stdtypes.html#iterator-types" rel="noreferrer">documentation</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's an alternative to the <code>StopIteration</code> by using <code>next(iterator, default_value)</code>.</p>
<p>For exapmle:</p>
<pre><code>&gt;&gt;&gt; a = iter('hi')
&gt;&gt;&gt; print next(a, None)
h
&gt;&gt;&gt; print next(a, None)
i
&gt;&gt;&gt; print next(a, None)
None
</code></pre>
<p>So you can detect for <code>None</code> or other pre-specified value for end of the iterator if you don't want the exception way.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you really <strong>need</strong> a <code>has-next</code> functionality (because you're just faithfully transcribing an algorithm from a reference implementation in Java, say, or because you're writing a prototype that <em>will</em> need to be easily transcribed to Java when it's finished), it's easy to obtain it with a little wrapper class.  For example:</p>
<pre><code>class hn_wrapper(object):
  def __init__(self, it):
    self.it = iter(it)
    self._hasnext = None
  def __iter__(self): return self
  def next(self):
    if self._hasnext:
      result = self._thenext
    else:
      result = next(self.it)
    self._hasnext = None
    return result
  def hasnext(self):
    if self._hasnext is None:
      try: self._thenext = next(self.it)
      except StopIteration: self._hasnext = False
      else: self._hasnext = True
    return self._hasnext
</code></pre>
<p>now something like</p>
<pre><code>x = hn_wrapper('ciao')
while x.hasnext(): print next(x)
</code></pre>
<p>emits</p>
<pre><code>c
i
a
o
</code></pre>
<p>as required.</p>
<p>Note that the use of <code>next(sel.it)</code> as a built-in requires Python 2.6 or better; if you're using an older version of Python, use <code>self.it.next()</code> instead (and similarly for <code>next(x)</code> in the example usage). [[You might reasonably think this note is redundant, since Python 2.6 has been around for over a year now -- but more often than not when I use Python 2.6 features in a response, some commenter or other feels duty-bound to point out that they <em>are</em> 2.6 features, thus I'm trying to forestall such comments for once;-)]]</p>
</div>
<div class="post-text" itemprop="text">
<p>In addition to all the mentions of StopIteration, the Python "for" loop simply does what you want:</p>
<pre><code>&gt;&gt;&gt; it = iter("hello")
&gt;&gt;&gt; for i in it:
...     print i
...
h
e
l
l
o
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try the __length_hint__() method from any iterator object:</p>
<pre><code>iter(...).__length_hint__() &gt; 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>hasNext</code> somewhat translates to the <code>StopIteration</code> exception, e.g.:</p>
<pre><code>&gt;&gt;&gt; it = iter("hello")
&gt;&gt;&gt; it.next()
'h'
&gt;&gt;&gt; it.next()
'e'
&gt;&gt;&gt; it.next()
'l'
&gt;&gt;&gt; it.next()
'l'
&gt;&gt;&gt; it.next()
'o'
&gt;&gt;&gt; it.next()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</code></pre>
<ul>
<li><code>StopIteration</code> docs: <a href="http://docs.python.org/library/exceptions.html#exceptions.StopIteration" rel="nofollow noreferrer">http://docs.python.org/library/exceptions.html#exceptions.StopIteration</a></li>
<li>Some article about iterators and generator in python: <a href="http://www.ibm.com/developerworks/library/l-pycon.html" rel="nofollow noreferrer">http://www.ibm.com/developerworks/library/l-pycon.html</a></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>No. The most similar concept is most likely a <a href="http://docs.python.org/library/exceptions.html#exceptions.StopIteration" rel="nofollow noreferrer">StopIteration exception.</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>You can <code>tee</code> the iterator using, <code>itertools.tee</code>, and check for <code>StopIteration</code> on the teed iterator.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe python just has next() and according to the doc, it throws an exception is there are no more elements.</p>
<p><a href="http://docs.python.org/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">http://docs.python.org/library/stdtypes.html#iterator-types</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The use case that lead me to search for this is the following</p>
<pre><code>def setfrom(self,f):
    """Set from iterable f"""
    fi = iter(f)
    for i in range(self.n):
        try:
            x = next(fi)
        except StopIteration:
            fi = iter(f)
            x = next(fi)
        self.a[i] = x 
</code></pre>
<p>where hasnext() is available, one could do</p>
<pre><code>def setfrom(self,f):
    """Set from iterable f"""
    fi = iter(f)
    for i in range(self.n):
        if not hasnext(fi):
            fi = iter(f) # restart
        self.a[i] = next(fi)
</code></pre>
<p>which to me is cleaner.  Obviously you can work around issues by defining utility classes, but what then happens is you have a proliferation of twenty-odd different almost-equivalent workarounds each with their quirks, and if you wish to reuse code that uses different workarounds, you have to either have multiple near-equivalent in your single application, or go around picking through and rewriting code to use the same approach.  The 'do it once and do it well' maxim fails badly.</p>
<p>Furthermore, the iterator itself needs to have an internal 'hasnext' check to run to see if it needs to raise an exception.  This internal check is then hidden so that it needs to be tested by trying to get an item, catching the exception and running the handler if thrown.  This is unnecessary hiding IMO.</p>
</div>
<div class="post-text" itemprop="text">
<p>good approach for such question/problems is check what we have in dir(object/method/iterator/type/class/ ...)</p>
<p>you will see that <code>dir(iterator)</code> return <code>__length_hint__</code></p>
<p>and <code>iterator.__length_hint__()</code> is positive until end of the iteration.</p>
<p>that's it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Suggested way is <strong>StopIteration</strong>.
Please see Fibonacci example from <a href="https://www.tutorialspoint.com/python3/python_loops.htm" rel="nofollow noreferrer">tutorialspoint</a></p>
<pre><code>#!usr/bin/python3

import sys
def fibonacci(n): #generator function
   a, b, counter = 0, 1, 0
   while True:
      if (counter &gt; n): 
         return
      yield a
      a, b = b, a + b
      counter += 1
f = fibonacci(5) #f is iterator object

while True:
   try:
      print (next(f), end=" ")
   except StopIteration:
      sys.exit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The way I solved my problem is to keep the count of the number of objects iterated over, so far. I wanted to iterate over a set using calls to an instance method. Since I knew the length of the set, and the number of items counted so far, I effectively had an <code>hasNext</code> method.</p>
<p>A simple version of my code:</p>
<pre><code>class Iterator:
    # s is a string, say
    def __init__(self, s):
        self.s = set(list(s))
        self.done = False
        self.iter = iter(s)
        self.charCount = 0

    def next(self):
        if self.done:
            return None
        self.char = next(self.iter)
        self.charCount += 1
        self.done = (self.charCount &lt; len(self.s))
        return self.char

    def hasMore(self):
        return not self.done
</code></pre>
<p>Of course, the example is a toy one, but you get the idea. This won't work in cases where there is no way to get the length of the iterable, like a generator etc.</p>
</div>
<span class="comment-copy">Related: <a href="http://stackoverflow.com/questions/661603/how-do-i-know-if-a-generator-is-empty-from-the-start">How do I know if a generator is empty from the start?</a></span>
<span class="comment-copy">"It's easier to ask for forgiveness than permission."</span>
<span class="comment-copy">"It's easier to ask for forgiveness than permission.": Checking whether an iterator has a next element is not asking for permission. There are situations in which you want to test for the existence of a next element without consuming it. I would accept the try catch solution if there was an <code>unnext()</code> method to put the first element back after I have checked that it exists by calling <code>next()</code>.</span>
<span class="comment-copy">@Giorgio, there is no way to know whether another element exists without executing the code that generates it (you don't know whether the generator will execute <code>yield</code> or not). It is, of course, not difficult to write an adaptor that stores the result of <code>next()</code> and provides <code>has_next()</code> and <code>move_next()</code>.</span>
<span class="comment-copy">The same idea could be used to implement the <code>hasNext()</code> method (to produce, cache and return true on success, or return false on failure). Then both <code>hasNext()</code> and <code>next()</code> would depend on a common underlying <code>getNext()</code> method and cached item. I really do not see why <code>next()</code> shouldn't be in the standard library if it is so easy to implement an adaptor that provides it.</span>
<span class="comment-copy">@LarsH: You mean e.g. an iterator that reads from a file that can be changed while reading from it? I agree that this can be a problem (which affects any library providing <code>next()</code> and <code>hasNext()</code> method, not just a hypothetical Python library). So yes, <code>next()</code> and <code>hasNext()</code> becomes tricky if the content of the stream being scanned depends on <b>when</b> elements are read.</span>
<span class="comment-copy">if you use None as the "sentinel", you best be sure your iterator doesn't have any Nones. you could also do <code>sentinel = object()</code> and <code>next(iterator, sentinel)</code> and test with <code>is</code>.</span>
<span class="comment-copy">following @samboosalis I would rather use built-in <code>unittest.mock.sentinel</code> object which allows you to write an explicit <code>next(a, sentinel.END_OF_ITERATION)</code> and then <code>if next(...) == sentinel.END_OF_ITERATION</code></span>
<span class="comment-copy">"faithfully transcribing an algorithm from a reference implementation in Java" is the worst reason to need a <code>has_next</code> method.  Python's design makes it impossible to, say, use <code>filter</code> to check if an array contains an element matching a given predicate.  The arrogance and shortsightedness of the Python community is staggering.</span>
<span class="comment-copy">nice answer, I'm copying this for ilustration of some design pattern taken from Java code</span>
<span class="comment-copy">I'm with Python3 and this code gives me <code>TypeError: iter() returned non-iterator</code></span>
<span class="comment-copy">@JonathanCast not sure I follow. In Python, you would typically use <code>map</code> and <code>any</code> instead of <code>filter</code>, but you could use <code>SENTINEL = object(); next(filter(predicate, arr), SENTINEL) is not SENTINEL</code> or forget a <code>SENTINEL</code> and just use <code>try: except</code> and catch the <code>StopIteration</code>.</span>
<span class="comment-copy">I always wondered why on earth python has all those __ xxx __ methods ? They seem so ugly.</span>
<span class="comment-copy">Legitimate question! Usually it's the syntax for methods that are exposed by a builtin function (e.g. len, is actually calling <b>len</b>). Such a builtin function does not exists for length_hint, but it is actually a pending proposal (PEP424).</span>
<span class="comment-copy">@mP. these functions are there, because they are sometimes needed. They are intentionally ugly, because they are deemed as method of last resort: If you use them, you know that you do something non-pythonic and potentially dangerous (which also might stop working at any point).</span>
<span class="comment-copy">Like <code>__init__</code> and  <code>__main__</code> ? Imho, its a bit of a mess no matter you try to justify it.</span>
<span class="comment-copy">What Python uses exceptions for control flow ? Sounds pretty nafted.</span>
<span class="comment-copy">Right: exceptions should be used to handle errors, not to define the normal flow of control.</span>
<span class="comment-copy">For this use case, you can use <a href="https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.cycle" rel="nofollow noreferrer">itertools.cycle</a></span>
<span class="comment-copy"><code>__length_hint__</code> is not guaranteed to be accurate: <a href="https://www.python.org/dev/peps/pep-0424/" rel="nofollow noreferrer">python.org/dev/peps/pep-0424</a>.</span>
