<div class="post-text" itemprop="text">
<p>I was reading that Python does all it's "code blocks" by indentation, rather than with curly braces. Is that right? So functions, if's and stuff like that all appear without surrounding their block with curly braces?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>if foo: #{
    print "it's true"
#}
else: #{
    print "it's false!"
#}
</code></pre>
<p>(Obviously, this is a joke.)</p>
</div>
<div class="post-text" itemprop="text">
<p>You can try to add support for braces using a <a href="http://python.org/doc/2.5.2/ref/future.html" rel="noreferrer">future import</a> statement, but it's not yet supported, so you'll get a syntax error:</p>
<pre><code>&gt;&gt;&gt; from __future__ import braces
  File "&lt;stdin&gt;", line 1
SyntaxError: not a chance
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Correct for code blocks. However, you do define dictionaries in Python using curly braces:</p>
<pre><code>a_dict = {
    'key': 'value',
}
</code></pre>
<p>Ahhhhhh.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. Curly braces are not used. Instead, you use the <code>:</code> symbol to introduce new blocks, like so:</p>
<pre><code>if True:
    do_something()
    something_else()
else:
    something()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use Whyton:</p>
<p><a href="http://writeonly.wordpress.com/2010/04/01/whython-python-for-people-who-hate-whitespace/" rel="noreferrer">http://writeonly.wordpress.com/2010/04/01/whython-python-for-people-who-hate-whitespace/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Yup :)</p>
<p>And there's (usually) a difference between 4 spaces and a tab, so make sure you standardize the usage ..</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes.</p>
<pre><code>if True:
    #dosomething
else:
    #dosomething else

#continue on with whatever you were doing
</code></pre>
<p>Basically, wherever you would've had an opening curly brace, use a colon instead. Unindent to close the region. It doesn't take long for it to feel completely natural.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://python-with-braces.appspot.com/" rel="noreferrer">Python with Braces</a> is a variant of python that lets you do exactly that.
It's a project that I've been working on lately together with my friend.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python does not use curly braces for code blocks:</p>
<pre><code>&gt;&gt;&gt; while True {
  File "&lt;stdin&gt;", line 1
    while True {
               ^
SyntaxError: invalid syntax

&gt;&gt;&gt; from __future__ import braces
  File "&lt;stdin&gt;", line 1
SyntaxError: not a chance
</code></pre>
<p>(Notice the "not a chance" message – this is an Easter egg reflecting this design decision.)</p>
<p>As a language designed to be easy to use and read, Python uses colons and indentation to designate code blocks. Defining code blocks by indentation is unusual and can come as a surprise to programmers who are used to languages like C++ and C# because these (and many other languages) don't care about extra whitespace or indentation. This rule is intended to increase readability of Python code, at the cost of some of the programmer's freedom to use varying amounts of whitespace.</p>
<p>An increase in the indentation level indicates the start of a code block, while a decrease indicates the end of the code block. By convention, each indentation is four spaces wide.</p>
<p>Here's a simple example which sums all the integers from 0 to 9. Note that ranges in Python include the first value, up to but not including the last value:</p>
<pre><code>j = 0
for i in range(0, 10):
    j += i
print(j)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As others have mentioned, you are correct, no curly braces in Python. Also, you do not have no  <em>end</em> or <em>endif</em> or <em>endfor</em> or anything like that (as in pascal or ruby). All code blocks are indentation based.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, code blocks in Python are defined by their indentation.  The creators of Python were very interested in self-documenting code.  They included indentation in the syntax as a way of innately enforcing good formatting practice.</p>
<p>I programmed in Python for a few years and became quite fond of its code structure because it really is easier.  Have you ever left out a closing curly brace in a large program and spent hours trying to find it?  Not a problem in Python.  When I left that job and had to start using PHP, I really missed the Python syntax.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, four spaces(<code></code>) are used for indentation in place of curly braces (<code>{</code>). Though, curly braces are used at few places in Python which serve different purpose:</p>
<ol>
<li><p>Initialize a <em>non-empty</em> set (unordered collection of unique elements):</p>
<pre><code>fuitBasket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
</code></pre>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">Citation</a></p></li>
<li><p>Initialize an empty dictionary (key-value pairs):</p>
<pre><code>telephoneNumbers = {}
</code></pre></li>
<li><p>Initialize a non-empty dictionary (key-value pairs):</p>
<pre><code>telephoneNumbers = {'jack': 4098, 'sape': 4139}
</code></pre>
<p><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">Citation</a></p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>In relation to format string, curly braces take on a different meaning. See <a href="https://docs.python.org/3/library/string.html?highlight=curly" rel="nofollow noreferrer">https://docs.python.org/3/library/string.html?highlight=curly</a> :</p>
<blockquote>
<p>Format strings contain “replacement fields” surrounded by curly braces
  {}. Anything that is not contained in braces is considered literal
  text, which is copied unchanged to the output. If you need to include
  a brace character in the literal text, it can be escaped by doubling:
  {{ and }}.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>I will give some thoughts about this question. </p>
<p>Admittedly at first I also thought it is strange to write code without curly braces. But after using Python for many years, I think it is a good design.</p>
<p>First, do we really need curly braces? I mean, as a human. If you are allowed to use curly braces in Python, won't you use indentation anymore? Of course, you will still use indentation! Because you want to write readable code, and indentation is one of the key points.</p>
<p>Second, when do we really need curly braces? As far as I think, we only strictly need curly braces when we need to minify our source code files. Like minified js files. But will you use Python in a situation that even the size of source code is sensitive? Also as far as I think, you won't.</p>
<p>So finally, I think curly braces are somehow like <code>;</code>. It is just a historical issue, with or without it, we will always use indentation in Python.</p>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/questions/1003841/how-do-i-move-the-turtle-in-logo" title="how do i move the turtle in logo">stackoverflow.com/questions/1003841/…</a></span>
<span class="comment-copy">In fact, Python supports curly braces, BEGIN/END, and almost any other language's block schemes: see <a href="http://www.python.org/doc/humor/#python-block-delimited-notation-parsing-explained" rel="nofollow noreferrer">python.org/doc/humor/…</a>!</span>
<span class="comment-copy">"No question is newbie enough" (quote from SO FAQ). SO is about questions that can be answered. I believe both are true here. Perhaps for Pythoneers this is a trivial question, but so what? Others ask "how to get seconds out of a timestamp" or "what's a hex number" and nobody complains.</span>
<span class="comment-copy">I agree this isn't a bad question.  yes, the answer is available in the docs, etc, but so are the answers to many SO questions.  People new to Python often wonder about the lack of braces, why not answer this question as a way to get the best answer out there?</span>
<span class="comment-copy">@Ned Batchelder: "Why" questions are rarely very helpful.  In this case, however, it's simply a confirmation of a fact.  Confirmation of fact questions are really a poor use of Stack Overflow.</span>
<span class="comment-copy">You so funny!  I think I'm going to do that now every time I use python</span>
<span class="comment-copy">So it's possible. cool!</span>
<span class="comment-copy">@openfrog: no, it's not, these are just single-line code comments... (and he did say it was a joke)</span>
<span class="comment-copy">Is this frowned upon? I come from a C++ background, and lack of braces really make python difficult for me</span>
<span class="comment-copy">Matt G, it's true, Python has a different syntax from C++.  You'll get used to it soon enough, it's nothing to worry about.</span>
<span class="comment-copy">and for anyone wondering, this important statement is an easter egg. The exception is the python devs saying "nope, never adding it"</span>
<span class="comment-copy">So how do you end a block?</span>
<span class="comment-copy">You might want to rewrite the function names to be PEP 8 compliant. Newbie questions should be answered with the best looking examples.</span>
<span class="comment-copy">@Jonny: Blocks are ended implicitly, by an outdent/dedent/unindent - i.e., when you reduce the indentation level by one. There is no explicit character that is used to mark the end of the block. This does mean that unlike in C, for example, you cannot have multiple blocks at the same level, as it would create ambiguity.</span>
<span class="comment-copy">Do note that you can't nest statements to arbitrary depth in Whython. An if block, for example, can't contain another if block.</span>
<span class="comment-copy">@AsadSaeeduddin Which is a good thing. From the <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">Zen of Python</a>: "Flat is better than nested."</span>
<span class="comment-copy">Highly recommended to uses 4 spaces over tab too, so please change old habits if you currently use tabs :)</span>
<span class="comment-copy">No way I'm gonna change tab for spaces. All other code I've written for 10 years use tab indentation without any problems.</span>
<span class="comment-copy">@Jordan Messina I disagree, and strongly so. For indentation purposes, tabs are hugely superior to spaces. I know that Python officially recommends using spaces, but I wish it didn't.</span>
<span class="comment-copy">@JordanMessina using 4 spaces increases the file size 4 times more than tabs... Also using tabs works everywhere, you don't need to use a configured editor that will replace a tab keypress with 4 spaces. These are good reasons to use tabs instead of spaces for indentation.</span>
<span class="comment-copy">"Have you ever left out a closing curly brace in a large program and spent hours trying to find it?" No, never. But I have had tools or editors screw up the whitespace on a couple of occasions and had no way to disambiguate the result.</span>
<span class="comment-copy">@alexh Times really have changed!  Back in the B.C. days (before cell-phones) we didn't always have text editors capable of auto-matching or auto-inserting braces, parens, etc.  I believe your experience shows that development of the whitespace detection feature has generally lagged behind bracket matching.  There are text editors specifically designed for Python which don't screw up the whitespace.  Tip: make sure you have your editor set to identify spaces and tabs.</span>
