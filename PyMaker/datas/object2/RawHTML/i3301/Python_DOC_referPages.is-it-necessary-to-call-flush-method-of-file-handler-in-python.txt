<div class="post-text" itemprop="text">
<p>I saw a code where they were using file.flush(). so, i searched around and found <a href="https://stackoverflow.com/questions/7127075/what-exactly-the-pythons-file-flush-is-doing">This SO post</a>. I kind of understood why there's a flush method. In the answer which was marked as answer the following was written </p>
<blockquote>
<p>Typically you don't need to bother with either method, but if you're in a scenario where paranoia about what actually ends up on disk is a good thing, you should make both calls as instructed.</p>
</blockquote>
<p>So, i was wondering, when we open  a file using context manager and write some text, and then when the code exits from this context manager, there might be a chance that the text might not have been written to the file? if yes, why not python does this internally when file.close() is called?  is it being done already? </p>
</div>
<div class="post-text" itemprop="text">
<p>The file objects in the <code>io</code> module (the ones you get from <code>open</code>) and everywhere else you'd expect in the stdlib always <code>flush</code> when they <code>close</code>, or rely on platform APIs that are guaranteed to do so.</p>
<p>Even third-party libraries are required to "close and flush the stream" on their <a href="https://docs.python.org/3/library/io.html#io.IOBase.close" rel="nofollow noreferrer"><code>close</code></a> methods if they want their objects to be file objects.<sup>1</sup></p>
<hr/>
<p>The main reason to call <code>flush</code> is when you're <em>not</em> closing the file yet, but some other program might want to see the contents.</p>
<hr/>
<p>For example, a lot of people write code like this:</p>
<pre><code>with open('dump.txt', 'w') as f:
    while True:
        buf = read_off_some_thingy()
        f.write(buf.decode())
        time.sleep(5)
</code></pre>
<p>… and then they wonder why when they <code>cat dump.txt</code> or open it in Notepad or whatever, it's empty, or missing the last 3 lines, or cuts off in the middle of a line. That's the problem <code>flush</code> solves:</p>
<pre><code>with open('dump.txt', 'w') as f:
    while True:
        buf = read_off_some_thingy()
        f.write(buf.decode())
        f.flush()
        time.sleep(5)
</code></pre>
<hr/>
<p>Or, alternatively, they're running the same code, but the problem is that someone might pull the plug on the computer (or, more likely nowadays, kill your container), and then after restart they'll have a corrupt file that cuts off in mid-line and now the perl script that scans the output won't run and nobody wants to debug perl code. Different problem, same solution.</p>
<hr/>
<p>But if you know for a fact that the file is going to be closed by some point (say, because there's a <code>with</code> statement that ends before there), and you don't need the file to be done before that point, you don't need to call <code>flush</code>.</p>
<hr/>
<p>You didn't mention <code>fsync</code>, which is a whole other issue—and a whole lot more complicated than most people thing—so I won't get into it. But the question you linked already covers the basics.</p>
<hr/>
<p><sub>1. There's always the chance that you're using some third-party library with a file-like object that duck-types close enough to a file object for your needs, but isn't one. And such a type might have a <code>close</code> that doesn't <code>flush</code>. But I honestly don't think I've ever seen an object that had a <code>flush</code> method, that didn't call it on close.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>Python <em>does</em> flush the file when it's <code>.close()</code>d, which happens when the context manager is exited.</p>
<p>The linked post refers more to a scenario where you have, say, a log file that's open for a long time, and you want to ensure that everything gets written to disk after each write. That's where you'd want to <code>.write(); .flush();</code>.</p>
</div>
<span class="comment-copy">from that other SO post, i understood that fsync will dump OS buffer to disk. is it more complicated than that?</span>
<span class="comment-copy">One more situation i can think of is that, when people just use file.open(file_name) and add all the data but, forget to close the file!</span>
<span class="comment-copy">@InAFlash Yes, because what does "to disk" mean? Does it actually wait for the physical encoding onto magnetic or optical or whatever data? Even if the OS <i>thinks</i> it does, many disk interfaces lie (because it improves their benchmarks). macOS provides a special <code>F_FULLSYNC</code> to (usually) work around that, but it doesn't happen by default; some linux filesystems always do it, some don't; etc. And the workaround doesn't always work. And what if "disk" is actually a network share? And so on.</span>
<span class="comment-copy">@InAFlash Yes, that definitely happens—that's pretty much why <code>with</code> was added to the language. But when you do that, you usually aren't calling <code>flush</code>…</span>
<span class="comment-copy">@InAFlash See <a href="https://lists.apple.com/archives/darwin-dev/2005/Feb/msg00072.html" rel="nofollow noreferrer">here</a>, and… I can't find it, but there's a thread about whether a linux filesystem can return from fsync when it's committed a journal entry that could <i>almost</i> certainly be used to recover and replay the write if someone pulled the plug, or only when it's committed to the main storage.</span>
<span class="comment-copy">There are no stupid questions :)</span>
