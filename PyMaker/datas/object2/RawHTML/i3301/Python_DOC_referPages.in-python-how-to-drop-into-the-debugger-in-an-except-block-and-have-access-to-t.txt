<div class="post-text" itemprop="text">
<p>I'm trying to do something similar to the following:</p>
<pre><code>try:
    1/0
except ZeroDivisionError as e:
    import ipdb; ipdb.set_trace()
</code></pre>
<p>When I drop into the debugger, I'd like for the exception instance <code>e</code> to be in my local scope. However, if I run this script, I find that this is not the case:</p>
<pre><code>Kurts-MacBook-Pro-2:Scratch kurtpeek$ python debug_exception.py
--Return--
None
&gt; /Users/kurtpeek/Documents/Scratch/debug_exception.py(4)&lt;module&gt;()
      2         1/0
      3 except ZeroDivisionError as e:
----&gt; 4         import ipdb; ipdb.set_trace()

ipdb&gt; dir()
['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__return__', '__spec__', 'ipdb']
ipdb&gt; e
*** NameError: name 'e' is not defined
</code></pre>
<p>Why is <code>e</code> not defined? I'm currently using <code>print</code> statements to find out the attributes of <code>e</code>, but I feel this should be possible to do interactively.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>ipdb.set_trace()</code> doesn't <em>quite</em> trigger IPDB immediately. It triggers on the next <a href="https://docs.python.org/3/library/sys.html#sys.settrace" rel="nofollow noreferrer">trace event</a>, which in your case, is when the function is about to return.</p>
<p>Python 3 deletes the <code>e</code> variable at the end of the <code>except</code> block, <a href="https://www.python.org/dev/peps/pep-3110/#semantic-changes" rel="nofollow noreferrer">to break traceback reference cycles</a>. Unfortunately for you, that happens before IPDB can trigger.</p>
<p>One hacky workaround you could use would be to add another line after <code>set_trace</code>, so IPDB triggers on the <code>'line'</code> event:</p>
<pre><code>try:
    1/0
except ZeroDivisionError as e:
    import ipdb
    ipdb.set_trace()
    workaround = True
</code></pre>
<p>Another option would be to use post-mortem debugging, which doesn't need to wait for a trace event:</p>
<pre><code>try:
    1/0
except ZeroDivisionError as e:
    import ipdb
    ipdb.post_mortem()
</code></pre>
<p>Post-mortem debugging has a number of important differences from regular debugging, though. It'll put you in the (usually dead) stack frame where the exception occurred, rather than the stack frame where the <code>post_mortem</code> call occurred. Those happen to be the same frame in your example, but they usually won't be. Having access to the stack frame where the exception was raised is pretty nice, and you can still navigate to the frame where the exception was caught (but no further, due to Python's unusual traceback system), but it's still a major difference.</p>
<p>Also, you can't step in post-mortem mode. Trying to run <code>next</code> or <code>step</code> will exit debugging.</p>
</div>
<div class="post-text" itemprop="text">
<p>Actually you can use <a href="https://docs.python.org/3/library/pdb.html#pdb.post_mortem" rel="noreferrer"><code>post_mortem</code></a> to access  the traceback context</p>
<pre><code>import ipdb; ipdb.post_mortem()

ipdb&gt; e
ZeroDivisionError('division by zero',)
</code></pre>
</div>
<span class="comment-copy">They heard you like debugging so they put a bug in your debugger so you can debug while you debug.</span>
<span class="comment-copy">Thanks for this.</span>
<span class="comment-copy">Post-mortem debugging is going to enter the (usually dead) stack frame where the exception was raised, rather than the stack frame where the <code>post_mortem</code> call occurs, though. In this case, those happen to be the same frame, but they usually won't be the same.</span>
<span class="comment-copy">@user2357112 Thanks for the explanation. i've not faced such cases yet, do you know a way to reproduce one ? Maybe using the <code>traceback</code> parameter can help too ?</span>
<span class="comment-copy">Instead of doing <code>1/0</code> directly, call a function that does <code>1/0</code>. When you enter post-mortem debugging, you'll find yourself in a different stack frame.</span>
