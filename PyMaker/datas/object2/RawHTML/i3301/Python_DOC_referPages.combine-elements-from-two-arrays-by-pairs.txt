<div class="post-text" itemprop="text">
<p>So I want to concatenate two arrays but by pairs. The input is as follows:</p>
<pre><code>a = array([1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
b = array([0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
</code></pre>
<p>And the output should be as follows: </p>
<pre><code>out_put = 
[[1, 0],
[1, 0],
[0, 1],
[1, 0],
[0, 1],
[0, 1],
[0, 1],
[0, 1],
[0, 1],
[0, 1],
[0, 1],
[0, 1],
[0, 1],
[0, 1],
[1, 0]]
</code></pre>
<p>I managed to get such result by iterating over the two arrays </p>
<pre><code>out_put = [[a[i],b[i]] for i in range(len(a)]
</code></pre>
<p>but I wonder if there any faster way .</p>
<p>Thank you   </p>
</div>
<div class="post-text" itemprop="text">
<p>For a vectorised solution, you can stack and transpose:</p>
<pre><code>a = np.array([1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
b = np.array([0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0])

c = np.vstack((a, b)).T
# or, c = np.dstack((a, b))[0]

array([[1, 0],
       [1, 0],
       [0, 1],
       [1, 0],
       [0, 1],
       [0, 1],
       [0, 1],
       [0, 1],
       [0, 1],
       [0, 1],
       [0, 1],
       [0, 1],
       [0, 1],
       [0, 1],
       [1, 0]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.column_stack.html" rel="nofollow noreferrer"><strong><code>np.column_stack</code></strong></a></p>
<blockquote>
<p>Stack 1-D arrays as columns into a 2-D array.</p>
</blockquote>
<pre><code>np.column_stack((a, b))

array([[1, 0],  
       [1, 0],  
       [0, 1],  
       [1, 0],  
       [0, 1],  
       [0, 1],  
       [0, 1],  
       [0, 1],  
       [0, 1],  
       [0, 1],  
       [0, 1],  
       [0, 1],  
       [0, 1],  
       [0, 1],  
       [1, 0]]) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> function to combine any two iterables like this.  It will continue until it reaches the end of the shorter iterable</p>
<pre><code>list(zip(a, b))
# [(1, 0), (1, 0), (0, 1), (1, 0), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (1, 0)]
</code></pre>
</div>
<span class="comment-copy">Or just <code>np.dstack((a, b))</code>, though it's only a wrapper around concatenate</span>
<span class="comment-copy">@BradSolomon, Thanks, think you'll also need to index <code>[0]</code> with that solution.</span>
<span class="comment-copy">@BradSolomon <code>column_stack</code> is <code>dstack</code> without adding the additional dimension for 2 1D arrays</span>
<span class="comment-copy">Note: <code>zip</code> + NumPy arrays are actually inefficient: see <a href="https://stackoverflow.com/a/50399219/9209546">this answer</a>.</span>
