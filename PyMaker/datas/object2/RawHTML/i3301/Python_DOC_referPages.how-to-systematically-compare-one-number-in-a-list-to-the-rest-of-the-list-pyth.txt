<div class="post-text" itemprop="text">
<p>For a given item in a list, I want to compare that item to each subsequent item (let's call it <code>item[i]</code>). If <code>item &gt; item[i]</code>, I want to add <code>1</code> to <code>P</code>. If <code>item &lt; item[i]</code>, I want to add <code>1</code> to <code>Q</code>. I don't want to compare item to anything that came before it in the list, however.</p>
<p>I've explored a few possibilities to achieve this, but I haven't quite cracked it. One option was to try enumerating the list and referring to each item's "count" in the list. The one that seems like it makes the most sense to me is to just refer to the index of each item in the list. However, as I don't want to just compare each item solely to the next item in the list, but rather all subsequent items, I need to compare item to a range of indices, starting at the index of the item + 1.</p>
<p>Below I've written a simple for loop, but it of course doesn't work because the <code>[f::]</code> yields a </p>
<blockquote>
<p>The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()  </p>
</blockquote>
<p>error.</p>
<p>Thoughts on this are welcome!</p>
<pre><code>b_rank = [2.0, 3.0, 1.0, 6.0, 4.0, 5.0]

for y in b_rank:
    f = b_rank.index(y)
    while f &lt; len(b_rank):
        if b_rank[f] &gt; b_rank[f::]:
            P += 1
        elif b_rank[f] &lt; b_rank[f::]:
            Q += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are two approaches.</p>
<pre><code>b_rank = [2.0, 3.0, 1.0, 6.0, 4.0, 5.0]

p = 0
q = 0

for index, item in enumerate(b_rank):
    # Note: creating a copy of the list by slicing like this is inefficient
    # if the list is huge
    for following_item in b_rank[index + 1:]:
        if item &gt; following_item:
            p += 1
        if item &lt; following_item:
            q += 1
print(p, q)
</code></pre>
<p>If you need efficiency, it's a little more work (thanks @MoxieBall !):</p>
<pre><code>import itertools

b_rank = [2.0, 3.0, 1.0, 6.0, 4.0, 5.0]

p = 0
q = 0

for index, item in enumerate(b_rank):
    # https://docs.python.org/3/library/itertools.html#itertools.islice
    for following_item in itertools.islice(b_rank, index + 1, None):
        if item &gt; following_item:
            p += 1
        if item &lt; following_item:
            q += 1

print(p, q)
</code></pre>
<p>Also, please add code to cover the case where <code>item == following_item</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Though that is a numpy error message, so I expect that something else is going on, here is how you would do this in pure python:</p>
<pre><code>for i, e in enumerate(b_rank):
    for f in b_rank[i+1:]:
        if e &gt; f:
            P += 1
        elif e &lt; f:
            Q += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>for idx_y, y in enumerate(b_rank):
    f = idx_y + 1
    while f &lt; len(b_rank):
        if b_rank[f] &gt; b_rank[idx_y]:
            P += 1
        elif b_rank[f] &lt; b_rank[idx_y]:
            Q += 1
        f += 1
</code></pre>
</div>
<span class="comment-copy">The error message you quote is a Numpy error, while neither your code nor your question mentions Numpy anywhere.  You don't seem to be telling the whole truth here. :)</span>
<span class="comment-copy">Are all entries in <code>b_rank</code> guaranteed to be unique?  Are they guaranteed to be a permutation of the first <i>n</i> integers?  If so, there are more efficient ways of computing this.</span>
<span class="comment-copy"><code>itertools.islice</code> might make the efficient solution a bit prettier</span>
<span class="comment-copy">This is really helpful, thank you! It seems as though the index method was the right track, but I needed an additional variable at the top (similar to what @A_K suggested). And yes, once I had the &gt; or &lt; cases covered, I intend to add cases when the items are equal.</span>
<span class="comment-copy">As a small addendum to my previous comment:   In my case, I am dealing with a list of ranks - hence, there should be no duplicates. But it certainly would be useful in other circumstances to account for item == following_item.</span>
<span class="comment-copy">@Ssylvia @MoxieBall just updated to use <code>itertools.islice</code>- That's why I love SO; I just leanred aobut it!</span>
<span class="comment-copy">You're right, that error was coming from a larger block of code. Apologies for the confusion as I only extracted what seemed necessary for the question!</span>
<span class="comment-copy">Ooh won't this break if there are duplicate items in the list? Pretty sure index finds the first item only.</span>
<span class="comment-copy">@Ben you are correct.  I'll edit my answer to fix that issue.</span>
<span class="comment-copy">Really helpful, thanks. I gave this a shot and it works on small lists. I'll keep testing on longer lists, but it seems like a the right track. Adding that f += 1 line is so logical I don't know how I missed it.</span>
