<div class="post-text" itemprop="text">
<p>It is my understanding that the <code>range()</code> function, which is actually <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="noreferrer">an object type in Python 3</a>, generates its contents on the fly, similar to a generator. </p>
<p>This being the case, I would have expected the following line to take an inordinate amount of time, because in order to determine whether 1 quadrillion is in the range, a quadrillion values would have to be generated: </p>
<pre><code>1000000000000000 in range(1000000000000001)
</code></pre>
<p>Furthermore: it seems that no matter how many zeroes I add on, the calculation more or less takes the same amount of time (basically instantaneous). </p>
<p>I have also tried things like this, but the calculation is still almost instant: </p>
<pre><code>1000000000000000000000 in range(0,1000000000000000000001,10) # count by tens
</code></pre>
<p>If I try to implement my own range function, the result is not so nice!! </p>
<pre><code>def my_crappy_range(N):
    i = 0
    while i &lt; N:
        yield i
        i += 1
    return
</code></pre>
<p>What is the <code>range()</code> object doing under the hood that makes it so fast? </p>
<hr/>
<p><a href="https://stackoverflow.com/a/30081318/2437514">Martijn Pieters' answer</a> was chosen for its completeness, but also see <a href="https://stackoverflow.com/a/30081894/2437514">abarnert's first answer</a> for a good discussion of what it means for <code>range</code> to be a full-fledged <em>sequence</em> in Python 3, and some information/warning regarding potential inconsistency for <code>__contains__</code> function optimization across Python implementations. <a href="https://stackoverflow.com/a/30088140/2437514">abarnert's other answer</a> goes into some more detail and provides links for those interested in the history behind the optimization in Python 3 (and lack of optimization of <code>xrange</code> in Python 2). Answers <a href="https://stackoverflow.com/a/30081467/2437514">by poke</a> and <a href="https://stackoverflow.com/a/30081470/2437514">by wim</a> provide the relevant C source code and explanations for those who are interested. </p>
</div>
<div class="post-text" itemprop="text">
<p>The Python 3 <code>range()</code> object doesn't produce numbers immediately; it is a smart sequence object that produces numbers <em>on demand</em>. All it contains is your start, stop and step values, then as you iterate over the object the next integer is calculated each iteration.</p>
<p>The object also implements the <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__"><code>object.__contains__</code> hook</a>, and <em>calculates</em> if your number is part of its range. Calculating is a O(1) constant time operation. There is never a need to scan through all possible integers in the range.</p>
<p>From the <a href="https://docs.python.org/3/library/stdtypes.html#range"><code>range()</code> object documentation</a>:</p>
<blockquote>
<p>The advantage of the <code>range</code> type over a regular <code>list</code> or <code>tuple</code> is that a range object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the <code>start</code>, <code>stop</code> and <code>step</code> values, calculating individual items and subranges as needed).</p>
</blockquote>
<p>So at a minimum, your <code>range()</code> object would do:</p>
<pre><code>class my_range(object):
    def __init__(self, start, stop=None, step=1):
        if stop is None:
            start, stop = 0, start
        self.start, self.stop, self.step = start, stop, step
        if step &lt; 0:
            lo, hi = stop, start
        else:
            lo, hi = start, stop
        self.length = ((hi - lo - 1) // abs(step)) + 1

    def __iter__(self):
        current = self.start
        if self.step &lt; 0:
            while current &gt; self.stop:
                yield current
                current += self.step
        else:
            while current &lt; self.stop:
                yield current
                current += self.step

    def __len__(self):
        return self.length

    def __getitem__(self, i):
        if i &lt; 0:
            i += self.length
        if 0 &lt;= i &lt; self.length:
            return self.start + i * self.step
        raise IndexError('Index out of range: {}'.format(i))

    def __contains__(self, num):
        if self.step &lt; 0:
            if not (self.stop &lt; num &lt;= self.start):
                return False
        else:
            if not (self.start &lt;= num &lt; self.stop):
                return False
        return (num - self.start) % self.step == 0
</code></pre>
<p>This is still missing several things that a real <code>range()</code> supports (such as the <code>.index()</code> or <code>.count()</code> methods, hashing, equality testing, or slicing), but should give you an idea.</p>
<p>I also simplified the <code>__contains__</code> implementation to only focus on integer tests; if you give a real <code>range()</code> object a non-integer value (including subclasses of <code>int</code>), a slow scan is initiated to see if there is a match, just as if you use a containment test against a list of all the contained values. This was done to continue to support other numeric types that just happen to support equality testing with integers but are not expected to support integer arithmetic as well. See the original <a href="http://bugs.python.org/issue1766304">Python issue</a> that implemented the containment test.</p>
</div>
<div class="post-text" itemprop="text">
<p>The fundamental misunderstanding here is in thinking that <code>range</code> is a generator. It's not. In fact, it's not any kind of iterator.</p>
<p>You can tell this pretty easily:</p>
<pre><code>&gt;&gt;&gt; a = range(5)
&gt;&gt;&gt; print(list(a))
[0, 1, 2, 3, 4]
&gt;&gt;&gt; print(list(a))
[0, 1, 2, 3, 4]
</code></pre>
<p>If it were a generator, iterating it once would exhaust it:</p>
<pre><code>&gt;&gt;&gt; b = my_crappy_range(5)
&gt;&gt;&gt; print(list(b))
[0, 1, 2, 3, 4]
&gt;&gt;&gt; print(list(b))
[]
</code></pre>
<p>What <code>range</code> actually is, is a sequence, just like a list. You can even test this:</p>
<pre><code>&gt;&gt;&gt; import collections.abc
&gt;&gt;&gt; isinstance(a, collections.abc.Sequence)
True
</code></pre>
<p>This means it has to follow all the rules of being a sequence:</p>
<pre><code>&gt;&gt;&gt; a[3]         # indexable
3
&gt;&gt;&gt; len(a)       # sized
5
&gt;&gt;&gt; 3 in a       # membership
True
&gt;&gt;&gt; reversed(a)  # reversible
&lt;range_iterator at 0x101cd2360&gt;
&gt;&gt;&gt; a.index(3)   # implements 'index'
3
&gt;&gt;&gt; a.count(3)   # implements 'count'
1
</code></pre>
<hr/>
<p>The difference between a <code>range</code> and a <code>list</code> is that a <code>range</code> is a <em>lazy</em> or <em>dynamic</em> sequence; it doesn't remember all of its values, it just remembers its <code>start</code>, <code>stop</code>, and <code>step</code>, and creates the values on demand on <code>__getitem__</code>.</p>
<p>(As a side note, if you <code>print(iter(a))</code>, you'll notice that <code>range</code> uses the same <code>listiterator</code> type as <code>list</code>. How does that work? A <code>listiterator</code> doesn't use anything special about <code>list</code> except for the fact that it provides a C implementation of <code>__getitem__</code>, so it works fine for <code>range</code> too.)</p>
<hr/>
<p>Now, there's nothing that says that <code>Sequence.__contains__</code> has to be constant timeâ€”in fact, for obvious examples of sequences like <code>list</code>, it isn't. But there's nothing that says it <em>can't</em> be. And it's easier to implement <code>range.__contains__</code> to just check it mathematically (<code>(val - start) % step</code>, but with some extra complexity to deal with negative steps) than to actually generate and test all the values, so why <em>shouldn't</em> it do it the better way?</p>
<p>But there doesn't seem to be anything in the language that <em>guarantees</em> this will happen. As Ashwini Chaudhari points out, if you give it a non-integral value, instead of converting to integer and doing the mathematical test, it will fall back to iterating all the values and comparing them one by one. And just because CPython 3.2+ and PyPy 3.x versions happen to contain this optimization, and it's an obvious good idea and easy to do, there's no reason that IronPython or NewKickAssPython 3.x couldn't leave it out. (And in fact CPython 3.0-3.1 <em>didn't</em> include it.)</p>
<hr/>
<p>If <code>range</code> actually were a generator, like <code>my_crappy_range</code>, then it wouldn't make sense to test <code>__contains__</code> this way, or at least the way it makes sense wouldn't be obvious. If you'd already iterated the first 3 values, is <code>1</code> still <code>in</code> the generator? Should testing for <code>1</code> cause it to iterate and consume all the values up to <code>1</code> (or up to the first value <code>&gt;= 1</code>)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://github.com/python/cpython/blob/cff677abe1823900e954592035a170eb67840971/Objects/rangeobject.c#L364-L413">source</a>, Luke!</p>
<p>In CPython, <code>range(...).__contains__</code> (a method wrapper) will eventually delegate to a simple calculation which checks if the value can possibly be in the range.  The reason for the speed here is we're using <strong>mathematical reasoning about the bounds, rather than a direct iteration of the range object</strong>.  To explain the logic used: </p>
<ol>
<li>Check that the number is between <code>start</code> and <code>stop</code>, and</li>
<li>Check that the stride value doesn't "step over" our number.  </li>
</ol>
<p>For example, <code>994</code> is in <code>range(4, 1000, 2)</code> because:</p>
<ol>
<li><code>4 &lt;= 994 &lt; 1000</code>, and</li>
<li><code>(994 - 4) % 2 == 0</code>.</li>
</ol>
<p>The full C code is included below, which is a bit more verbose because of memory management and reference counting details, but the basic idea is there:</p>
<pre class="lang-c prettyprint-override"><code>static int
range_contains_long(rangeobject *r, PyObject *ob)
{
    int cmp1, cmp2, cmp3;
    PyObject *tmp1 = NULL;
    PyObject *tmp2 = NULL;
    PyObject *zero = NULL;
    int result = -1;

    zero = PyLong_FromLong(0);
    if (zero == NULL) /* MemoryError in int(0) */
        goto end;

    /* Check if the value can possibly be in the range. */

    cmp1 = PyObject_RichCompareBool(r-&gt;step, zero, Py_GT);
    if (cmp1 == -1)
        goto end;
    if (cmp1 == 1) { /* positive steps: start &lt;= ob &lt; stop */
        cmp2 = PyObject_RichCompareBool(r-&gt;start, ob, Py_LE);
        cmp3 = PyObject_RichCompareBool(ob, r-&gt;stop, Py_LT);
    }
    else { /* negative steps: stop &lt; ob &lt;= start */
        cmp2 = PyObject_RichCompareBool(ob, r-&gt;start, Py_LE);
        cmp3 = PyObject_RichCompareBool(r-&gt;stop, ob, Py_LT);
    }

    if (cmp2 == -1 || cmp3 == -1) /* TypeError */
        goto end;
    if (cmp2 == 0 || cmp3 == 0) { /* ob outside of range */
        result = 0;
        goto end;
    }

    /* Check that the stride does not invalidate ob's membership. */
    tmp1 = PyNumber_Subtract(ob, r-&gt;start);
    if (tmp1 == NULL)
        goto end;
    tmp2 = PyNumber_Remainder(tmp1, r-&gt;step);
    if (tmp2 == NULL)
        goto end;
    /* result = ((int(ob) - start) % step) == 0 */
    result = PyObject_RichCompareBool(tmp2, zero, Py_EQ);
  end:
    Py_XDECREF(tmp1);
    Py_XDECREF(tmp2);
    Py_XDECREF(zero);
    return result;
}

static int
range_contains(rangeobject *r, PyObject *ob)
{
    if (PyLong_CheckExact(ob) || PyBool_Check(ob))
        return range_contains_long(r, ob);

    return (int)_PySequence_IterSearch((PyObject*)r, ob,
                                       PY_ITERSEARCH_CONTAINS);
}
</code></pre>
<p>The "meat" of the idea is mentioned in <a href="https://github.com/python/cpython/blob/9a5bacfecdf6798e960d1447af11d4cfa8d4dc32/Objects/rangeobject.c#L402">the line</a>:</p>
<pre><code>/* result = ((int(ob) - start) % step) == 0 */ 
</code></pre>
<p>As a final note - look at the <code>range_contains</code> function at the bottom of the code snippet.  If the exact type check fails then we don't use the clever algorithm described, instead falling back to a dumb iteration search of the range using <code>_PySequence_IterSearch</code>!  You can check this behaviour in the interpreter (I'm using v3.5.0 here):</p>
<pre><code>&gt;&gt;&gt; x, r = 1000000000000000, range(1000000000000001)
&gt;&gt;&gt; class MyInt(int):
...     pass
... 
&gt;&gt;&gt; x_ = MyInt(x)
&gt;&gt;&gt; x in r  # calculates immediately :) 
True
&gt;&gt;&gt; x_ in r  # iterates for ages.. :( 
^\Quit (core dumped)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To add to Martijnâ€™s answer, this is the relevant part of <a href="https://hg.python.org/cpython/file/7f8cd879687b/Objects/rangeobject.c#l415">the source</a> (in C, as the range object is written in native code):</p>
<pre class="lang-c prettyprint-override"><code>static int
range_contains(rangeobject *r, PyObject *ob)
{
    if (PyLong_CheckExact(ob) || PyBool_Check(ob))
        return range_contains_long(r, ob);

    return (int)_PySequence_IterSearch((PyObject*)r, ob,
                                       PY_ITERSEARCH_CONTAINS);
}
</code></pre>
<p>So for <code>PyLong</code> objects (which is <code>int</code> in Python 3), it will use the <code>range_contains_long</code> function to determine the result. And that function essentially checks if <code>ob</code> is in the specified range (although it looks a bit more complex in C).</p>
<p>If itâ€™s not an <code>int</code> object, it falls back to iterating until it finds the value (or not).</p>
<p>The whole logic could be translated to pseudo-Python like this:</p>
<pre><code>def range_contains (rangeObj, obj):
    if isinstance(obj, int):
        return range_contains_long(rangeObj, obj)

    # default logic by iterating
    return any(obj == x for x in rangeObj)

def range_contains_long (r, num):
    if r.step &gt; 0:
        # positive step: r.start &lt;= num &lt; r.stop
        cmp2 = r.start &lt;= num
        cmp3 = num &lt; r.stop
    else:
        # negative step: r.start &gt;= num &gt; r.stop
        cmp2 = num &lt;= r.start
        cmp3 = r.stop &lt; num

    # outside of the range boundaries
    if not cmp2 or not cmp3:
        return False

    # num must be on a valid step inside the boundaries
    return (num - r.start) % r.step == 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're wondering <em>why</em> this optimization was added to <code>range.__contains__</code>, and why it <em>wasn't</em> added to <code>xrange.__contains__</code> in 2.7:</p>
<p>First, as Ashwini Chaudhary discovered, <a href="http://bugs.python.org/issue1766304" rel="noreferrer">issue 1766304</a> was opened explicitly to optimize <code>[x]range.__contains__</code>. A patch for this was <a href="https://hg.python.org/cpython/rev/d599a3f2e72d/" rel="noreferrer">accepted and checked in for 3.2</a>, but not backported to 2.7 because "xrange has behaved like this for such a long time that I don't see what it buys us to commit the patch this late." (2.7 was nearly out at that point.)</p>
<p>Meanwhile:</p>
<p>Originally, <code>xrange</code> was a not-quite-sequence object. As <a href="https://docs.python.org/3.1/library/stdtypes.html#range-type" rel="noreferrer">the 3.1 docs</a> say:</p>
<blockquote>
<p>Range objects have very little behavior: they only support indexing, iteration, and the <code>len</code> function.</p>
</blockquote>
<p>This wasn't quite true; an <code>xrange</code> object actually supported a few other things that come automatically with indexing and <code>len</code>,<sup>*</sup> including <code>__contains__</code> (via linear search). But nobody thought it was worth making them full sequences at the time.</p>
<p>Then, as part of implementing the <a href="https://www.python.org/dev/peps/pep-3119/" rel="noreferrer">Abstract Base Classes</a> PEP, it was important to figure out which builtin types should be marked as implementing which ABCs, and <code>xrange</code>/<code>range</code> claimed to implement <code>collections.Sequence</code>, even though it still only handled the same "very little behavior". Nobody noticed that problem until <a href="http://bugs.python.org/issue9213" rel="noreferrer">issue 9213</a>. The patch for that issue not only added <code>index</code> and <code>count</code> to 3.2's <code>range</code>, it also re-worked the optimized <code>__contains__</code> (which shares the same math with <code>index</code>, and is directly used by <code>count</code>).<sup>**</sup> <a href="https://github.com/python/cpython/commit/8ee11f7e599b2c5b4de39047bf11bde2246e968f" rel="noreferrer">This change</a> went in for 3.2 as well, and was not backported to 2.x, because "it's a bugfix that adds new methods". (At this point, 2.7 was already past rc status.)</p>
<p>So, there were two chances to get this optimization backported to 2.7, but they were both rejected.</p>
<hr/>
<p><sub>* In fact, you even get iteration for free with <code>len</code> and indexing, but <a href="https://docs.python.org/2/whatsnew/2.3.html#optimizations" rel="noreferrer">in 2.3</a> <code>xrange</code> objects got a custom iterator. Which they then lost in 3.x, which uses the same <code>listiterator</code> type as <code>list</code>.</sub></p>
<p><sub>** The first version actually reimplemented it, and got the details wrongâ€”e.g., it would give you <code>MyIntSubclass(2) in range(5) == False</code>. But Daniel Stutzbach's updated version of the patch restored most of the previous code, including the fallback to the generic, slow <code>_PySequence_IterSearch</code> that pre-3.2 <code>range.__contains__</code> was implicitly using when the optimization doesn't apply.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p>The other answers explained it well already, but I'd like to offer another experiment illustrating the nature of range objects:</p>
<pre><code>&gt;&gt;&gt; r = range(5)
&gt;&gt;&gt; for i in r:
        print(i, 2 in r, list(r))

0 True [0, 1, 2, 3, 4]
1 True [0, 1, 2, 3, 4]
2 True [0, 1, 2, 3, 4]
3 True [0, 1, 2, 3, 4]
4 True [0, 1, 2, 3, 4]
</code></pre>
<p>As you can see,  a range object is an object that remembers its range and can be used many times (even while iterating over it), not just a one-time generator.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's all about a lazy approach to the evaluation and some extra optimization of <code>range</code>.
Values in ranges don't need to be computed until real use, or even further due to extra optimization.</p>
<p>By the way, your integer is not such big, consider <code>sys.maxsize</code></p>
<p><code>sys.maxsize in range(sys.maxsize)</code> <em>is pretty fast</em></p>
<p>due to optimization - it's easy to compare given integer just with min and max of range.</p>
<p>but:</p>
<p><code>float(sys.maxsize) in range(sys.maxsize)</code> <em>is pretty slow</em>.</p>
<p>(in this case, there is no optimization in <code>range</code>, so if python receives unexpected float, python will compare all numbers)</p>
<p>You should be aware of an implementation detail but should not be relied upon, because this may change in the future.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://github.com/sanan-fataliyev/rangesharp" rel="nofollow noreferrer">Here is</a> similar implementation in <code>C#</code>. You can see how <code>Contains</code> done in O(1) time.</p>
<pre><code>public struct Range
{

    private readonly int _start;
    private readonly int _stop;
    private readonly int _step;


    //other methods/properties omitted


    public bool Contains(int number)
    {
        // precheck: if the number isn't in a valid point, return false
        // for example, if start is 5 and step is 10, then it's impossible for 163 to be in range (due to modulo)

        if ((_start % _step + _step) % _step != (number % _step + _step) % _step)
            return false;

        // v is vector: 1 means positive step, -1 means negative step
        // this value makes final checking formula straightforward.

        int v = Math.Abs(_step) / _step;

        // since we have vector, no need to write if/else to handle both cases: negative and positive step
        return number * v &gt;= _start * v &amp;&amp; number * v &lt; _stop * v;
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h2>TL;DR</h2>
<p>The object returned by <code>range()</code> is actually a <code>range</code> object. This object implements the iterator interface so you can iterate through its values sequentially, just like a generator, but it also implements the <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="nofollow noreferrer"><code>__contains__</code></a> interface which is actually what gets called when an object appears on the right hand side of the <code>in</code> operator. The <code>__contains__()</code> method returns a bool of whether or not the item is in the object. Since <code>range</code> objects know their bounds and stride, this is very easy to implement in O(1). </p>
</div>
<span class="comment-copy">Don't try this with <code>xrange()</code> in Python 2 though.</span>
<span class="comment-copy">Note that this is the case only if the item we are checking is a <code>bool</code> or <code>long</code> type, with other object types it will go crazy. Try with: <code>100000000000000.0 in range(1000000000000001)</code></span>
<span class="comment-copy">Who told you that <code>range</code> is a generator?</span>
<span class="comment-copy">@abarnert I think the edit I made left the confusion intact.</span>
<span class="comment-copy">@Superbest <code>xrange()</code> objects have no <code>__contains__</code> method, so the item check has to loop through all the items. Plus there are few other changes in <code>range()</code>, like it supports slicing(which again returns a <code>range</code> object) and now also has <code>count</code> and <code>index</code> methods to make it compatible with <a href="https://docs.python.org/2/library/collections.html#collections-abstract-base-classes" rel="nofollow noreferrer"><code>collections.Sequence</code></a> ABC.</span>
<span class="comment-copy">Ok, so, a calculation of <code>range(1000000000)[index_number]</code> for example, might be something like: <code>return start + step * index_number</code>?</span>
<span class="comment-copy">@RickTeachey: yup. There is no need to produce any intermediary number if you can just calculate it.</span>
<span class="comment-copy">@Veedrac: I didn't want to make the sentence more laborious and go into the details of iterators vs iterables. I'll see if I can retool it a little.</span>
<span class="comment-copy">Fun fact: because you have a working implementation of <code>__getitem__</code> and <code>__len__</code>, the <code>__iter__</code> implementation is actually unnecessary.</span>
<span class="comment-copy">@stefan.schwetschke: right, when the patch was originally written, ranges only supported start and stop values up to <code>sys.maxsize</code>, so there was an upper bound. Compared to <code>len(range_object)</code>, the number comparisons / modulus is <i>near enough constant</i> to not matter for the analysis here.</span>
<span class="comment-copy">This is a pretty important thing to get straight. I suppose the differences between Python 2 and 3 may have lead to my confusion on this point. In any case, I should have realized <a href="https://docs.python.org/3/library/stdtypes.html#typesseq" rel="nofollow noreferrer">since <code>range</code> is listed (along with <code>list</code> and <code>tuple</code>) as a sequence type</a>.</span>
<span class="comment-copy">@RickTeachey: Actually, in 2.6+ (I think; maybe 2.5+), <code>xrange</code> is a sequence too. See <a href="https://docs.python.org/2/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="nofollow noreferrer">2.7 docs</a>. In fact, it was always an almost-sequence.</span>
<span class="comment-copy">@RickTeachey: Actually, I was wrong; in 2.6-2.7 (and 3.0-3.1), it <i>claims</i> to be a sequence, but it's still just an almost-sequence. See my other answer.</span>
<span class="comment-copy">It's not an iterator, it's a sequence (Iterable in terms of Java, IEnumerable of C#) - something with an <code>.__iter__()</code> method that will return an iterator. It in its turn can be used only once.</span>
<span class="comment-copy">@ThomasAhle: Because <code>range</code> isn't checking types when it's not an integer, since it's always possible a type has a <code>__eq__</code> that is compatible with <code>int</code>. Sure, <code>str</code> obviously won't work, but they didn't want to slow things down by explicitly checking all the types that <i>can't</i> be in there (and after all, a <code>str</code> subclass could override <code>__eq__</code> and be contained in the <code>range</code>).</span>
<span class="comment-copy">Great answer. This is also my new favorite example of a humane use of <code>goto</code>.</span>
<span class="comment-copy">@brian_o Would be better implemented with a <code>try: finally:</code> and a <code>return</code> instead of <code>goto</code>...</span>
<span class="comment-copy">@wizzwizz4 Since when does C support try/finally? (Except some vendor-specific extensions...)</span>
<span class="comment-copy">@ChrisWesseling: I think this is different-enough information (and enough of it) that editing Martijn's answer wouldn't have been appropriate here. It's a judgment call, but people usually err on the side of not making drastic changes to other people's answers.</span>
<span class="comment-copy">From the comments here: <a href="http://bugs.python.org/issue1766304" rel="nofollow noreferrer">improve <code>xrange.__contains__</code></a>, it looks like they didn't backport it to Python 2 just to leave an element of surprise for users and it was too late o_O. The <code>count</code> and <code>index</code> <a href="https://hg.python.org/cpython/file/e2dec9c0d13c/Objects/rangeobject.c" rel="nofollow noreferrer">patch</a> was added later on. File at that time: <a href="https://hg.python.org/cpython/file/d599a3f2e72d/Objects/rangeobject.c" rel="nofollow noreferrer">hg.python.org/cpython/file/d599a3f2e72d/Objects/rangeobject.c</a></span>
<span class="comment-copy">I have a sinister suspicion that some core python devs are partial to "tough love" for python 2.x because they want to encourage people to switch to the far-superior python3  :)</span>
<span class="comment-copy">Also I bet it's a huge burden to have to add new features to old versions. Imagine if you went to Oracle and said, "Look, I'm on Java 1.4 and I deserve lambda expressions! Backport them for nothing."</span>
<span class="comment-copy">@RickTeachey yeah it's just an example. If I said 1.7 it would still apply. It's a quantitative difference not qualitative. Basically the (unpaid) devs can't forever make cool new stuff in 3.x and backport it to 2.x for those who don't want to upgrade. It's a huge and ridiculous burden. Do you think there's still something wrong with my reasoning?</span>
<span class="comment-copy">@RickTeachey: 2.7 was between 3.1 and 3.2, not around 3.3. And that means 2.7 was in rc when the last changes to 3.2 went in, which makes the bug comments easier to understand. Anyway, I think they made a few mistakes in retrospect (especially assuming people would migrate via <code>2to3</code> instead of via dual-version code with the help of libraries like <code>six</code>, which is why we got things like <code>dict.viewkeys</code> that nobody's ever going to use), and there were a few changes that just came too late in 3.2, but for the most part 2.7 was a pretty impressive "last 2.x ever" release.</span>
<span class="comment-copy">I wouldn't play up the similarity to slice objects too much; it seems to confuse more people than it helps. (Once someone realizes that, they start wondering why there are two different types in the first place, and it takes a bit to explain it to them. And then some of them go and design other languages like Swift without ever figuring it out, and we get all kinds of annoying problems that they hack back and forth for 5 betas before they finally come up with a reasonable designâ€¦)</span>
<span class="comment-copy">@abarnert Do you think I should delete that part? I never explicitly create slice objects anyway. I just added it because they're similar and at least to me, it feels more intuitive that slice objects are "static", as the data isn't coming from them but from the sequence they're used on.</span>
<span class="comment-copy">I think your intuition definitely helps make it clearerâ€¦ but I don't know if you can work that into the answer. Maybe by explicitly calling the <code>indices</code> method? But at that point maybe it's getting too far off the main point?</span>
<span class="comment-copy">@abarnert Nah, since I never explicitly used slice objects, I didn't even know the indices method and I don't feel like thinking about it now. I'll just remove that part from the answer.</span>
