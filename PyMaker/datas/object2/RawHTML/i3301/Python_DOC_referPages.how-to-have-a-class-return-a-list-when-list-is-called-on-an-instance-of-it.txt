<div class="post-text" itemprop="text">
<p>I am trying to have a list returned when I call <code>list()</code> on a class. What's the best way to do this. </p>
<pre><code>class Test():
    def __init__(self):
        self.data = [1,2,3]
    def aslist(self):
        return self.data
a = Test()
list(a)
[1,2,3]
</code></pre>
<p>I want when <code>list(a)</code> is called for it to run the <code>aslist</code> function and ideally I'd like to implement <code>asdict</code> that works when <code>dict()</code> is called </p>
<p>I'd like to be able to do this with <code>dict</code>, <code>int</code> and all other type casts</p>
</div>
<div class="post-text" itemprop="text">
<p>Unlike many other languages you might be used to (e.g., C++), Python doesn't have any notion of "type casts" or "conversion operators" or anything like that.</p>
<p>Instead, Python types' constructors are generally written to some more generic (duck-typed) protocol.</p>
<hr/>
<p>The first thing to do is to go to the documentation for whichever constructor you care about and see what it wants. Start in <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">Builtin Functions</a>, even if most of them will link you to an entry in <a href="https://docs.python.org/3/library/stdtypes.html" rel="nofollow noreferrer">Builtin Types</a>.</p>
<p>Many of them will link to an entry for the relevant special method in the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Data Model</a> chapter.</p>
<hr/>
<p>For example, <a href="https://docs.python.org/3/library/functions.html#func-int" rel="nofollow noreferrer"><code>int</code></a> says:</p>
<blockquote>
<p>… If <em>x</em> defines <code>__int__()</code>, <code>int(x)</code> returns <code>x.__int__()</code>. If <em>x</em> defines <code>__trunc__()</code>, it returns <code>x.__trunc__()</code> …</p>
</blockquote>
<p>You can then follow the link to <a href="https://docs.python.org/3/reference/datamodel.html#object.__int__" rel="nofollow noreferrer"><code>__int__</code></a>, although in this case there's not much extra information:</p>
<blockquote>
<p>Called to implement the built-in functions complex(), int() and float(). Should return a value of the appropriate type.</p>
</blockquote>
<p>So, you want to define an <code>__int__</code> method, and it should return an <code>int</code>:</p>
<pre><code>class MySpecialZero:
    def __int__(self):
        return 0 
</code></pre>
<hr/>
<p>The sequence and set types (like <code>list</code>, <code>tuple</code>, <code>set</code>, <code>frozenset</code>) are a bit more complicated. They all want an <a href="https://docs.python.org/3/glossary.html#term-iterable" rel="nofollow noreferrer"><em>iterable</em></a>:</p>
<blockquote>
<p>An object capable of returning its members one at a time. Examples of iterables include all sequence types (such as <code>list</code>, <code>str</code>, and <code>tuple</code>) and some non-sequence types like <code>dict</code>, file objects, and objects of any classes you define with an <code>__iter__()</code> method or with a <code>__getitem__()</code> method that implements Sequence semantics.</p>
</blockquote>
<p>This is explained a bit better under the <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter</code></a> function, which may not be the most obvious place to look:</p>
<blockquote>
<p>… <em>object</em> must be a collection object which supports the iteration protocol (the <code>__iter__()</code> method), or it must support the sequence protocol (the <code>__getitem__()</code> method with integer arguments starting at 0) …</p>
</blockquote>
<p>And under <a href="https://docs.python.org/3/reference/datamodel.html#object.__iter__" rel="nofollow noreferrer"><code>__iter__</code></a> in the Data Model:</p>
<blockquote>
<p>This method is called when an iterator is required for a container. This method should return a new iterator object that can iterate over all the objects in the container. For mappings, it should iterate over the keys of the container.</p>
<p>Iterator objects also need to implement this method; they are required to return themselves. For more information on iterator objects, see Iterator Types.</p>
</blockquote>
<p>So, for your example, you want to be an object that iterates over the elements of <code>self.data</code>, which means you want an <code>__iter__</code> method that returns an iterator over those elements. The easiest way to do that is to just call <code>iter</code> on <code>self.data</code>—or, if you want that <code>aslist</code> method for other reasons, maybe call <code>iter</code> on what that method returns:</p>
<pre><code>class Test():
    def __init__(self):
        self.data = [1,2,3]
    def aslist(self):
        return self.data
    def __iter__(self):
        return iter(self.aslist())
</code></pre>
<p>Notice that, as <a href="https://stackoverflow.com/a/51219576/908494">Edward Minnix explained</a>, Iterator and Iterable are separate things. An Iterable is something that can produce an Iterator when you call its <code>__iter__</code> method. All Iterators are Iterables (they produce themselves), but many Iterables are not Iterators (Sequences like <code>list</code>, for example).</p>
<hr/>
<p><code>dict</code> (and <code>OrderedDict</code>, etc.) is also a bit complicated. Check the docs, and you'll see that it wants either a mapping (that is, something like a <code>dict</code>) <em>or</em> an iterable of key-value pairs (those pairs themselves being iterables). In this case, unless you're implementing a full mapping, you probably want the fallback:</p>
<pre><code>class Dictable:
    def __init__(self):
        self.names, self.values = ['a', 'b', 'c'], [1, 2, 3]
    def __iter__(self):
        return zip(self.names, self.values)
</code></pre>
<hr/>
<p>Almost everything else is easy, like <code>int</code>—but notice that <code>str</code>, <code>bytes</code>, and <code>bytearray</code> are sequences.</p>
<hr/>
<p>Meanwhile, if you want your object to be convertible to an <code>int</code> or to a <code>list</code> or to a <code>set</code>, you might want it to also act a lot like one in other ways. If that's the case, look at <a href="https://docs.python.org/3/library/collections.abc.html" rel="nofollow noreferrer"><code>collections.abc</code></a> and <a href="https://docs.python.org/3/library/numbers.html" rel="nofollow noreferrer"><code>numbers</code></a>, which not provide helpers that are not only abstract base classes (used if you need to check whether some type meets some protocol), but also mixins (used to help you implement the protocol).</p>
<p>For example, a full <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="nofollow noreferrer"><code>Sequence</code></a> is expected to provide most of the same methods as a <code>tuple</code>—about 7 of them—but if you use the mixin, you only need to define 2 yourself:</p>
<pre><code>class MySeq(collections.abc.Sequence):
    def __init__(self, iterable):
        self.data = tuple(iterable)
    def __getitem__(self, idx):
        return self.data[idx]
    def __len__(self):
        return len(self.data)
</code></pre>
<p>Now you can use a <code>MySeq</code> almost anywhere you could use a <code>tuple</code>—including constructing a <code>list</code> from it, of course.</p>
<p>For some types, like <code>MutableSequence</code>, the shortcuts help even more—you get 17 methods for the price of 5.</p>
<hr/>
<p>If you want the same object to be list-able and dict-able… well, then you run into a limitation of the design. <code>list</code> wants an iterable. <code>dict</code> wants an iterable of pairs, or a mapping—which is a kind of iterable. So, rather than infinite choices, you only really have two:</p>
<ul>
<li>Iterate keys and implement <code>__getitem__</code> with those keys for <code>dict</code>, so <code>list</code> gives a list of those keys.</li>
<li>Iterate key-value pairs for <code>dict</code>, so <code>list</code> gives a list of those key-value pairs.</li>
</ul>
<p>Obviously if you want to actually act like a <code>Mapping</code>, you only have <em>one</em> choice, the first one.</p>
<p>The fact that the sequence and mapping protocols overlap has been part of Python from the beginning, inherent in the fact that you can use the <code>[]</code> operator on both of them, and has been retained with every major change since, even though it's made other features (like the whole ABC model) more complicated. I don't know if anyone's ever given a reason, but presumably it's similar to the reason for the extended-slicing design. In other words, making dicts and other mappings a lot easier and more readable to use is worth the cost of making them a little more complicated and less flexible to implement.</p>
</div>
<div class="post-text" itemprop="text">
<p>This can be done with overloading special methods. You will need to define the <code>__iter__</code> method for your class, making it iterable. This means anything expecting an iterable (like most collections constructors like <code>list</code>, <code>set</code>, etc.) will then work with your object.</p>
<pre><code>class Test:
    ...

    def __iter__(self):
        return iter(self.data)
</code></pre>
<p><strong>Note</strong>: You will need to wrap the returned object with <code>iter()</code> so that it is an iterator (there is a difference between <em>iterable</em> and <em>iterator</em>). A list is <em>iterable</em> (can be iterated over), but not an <em>iterator</em> (supports <code>__next__</code>, raises <code>StopIteration</code> when done etc.)</p>
</div>
<span class="comment-copy"><code>list({1:2,3:4})</code> returns <code>[1,3]</code>.  Is that not what you want?</span>
<span class="comment-copy">thats just an example, I want when you do list(a) for it to run the aslist function</span>
<span class="comment-copy">You need to implement the iterator protocol. With a <code>dict</code>, it accepts any <i>mapping</i> or an iterable of key-value pairs.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">The docs on each builtin type</a> give a brief idea of what they each want. <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names" rel="nofollow noreferrer">The data model chapter</a> explains the special methods for all of the protocols in detail. The only really tricky bit is the cases (<code>list</code>, etc.) where you can satisfy the iterator protocol <i>or</i> the (not-as-clearly-documented) old-style sequence protocol. (Some of the others have fallbacks, like <code>__bool__</code> to <code>__len__</code>, but they're more obvious.)</span>
<span class="comment-copy">you could use <code>__call__</code> method but it will return a list when you type <code>a()</code> and not <code>a</code></span>
<span class="comment-copy">how would you have a class utilise both list() and dict() when they both use the __itter__() data model? is that possible?</span>
<span class="comment-copy">@MarcFrame Well, if you want <code>list</code> to give you a list of key-value pairs, <code>Dictable</code> will actually do that. The alternative is to implement the mapping protocol, in which case <code>list</code> will give you a list of keys, the same way it does for a dict. See <a href="https://repl.it/repls/AusterePrettyDatamining" rel="nofollow noreferrer">this example</a>. Which one you want depends on whether your object is supposed to be a mapping or not. If you want something completely different than either of the two… well, then you're fighting Python, and it's probably not a good idea.</span>
