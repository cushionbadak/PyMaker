<div class="post-text" itemprop="text">
<p>I'm trying to learn how to work with Unicode in python.</p>
<p>Let's say I have a file <code>test</code> containing Unicode characters:
<code>áéíóúabcdefgçë</code>
I want to make a python script that prints out all the unique characters in the file. This is what I have:</p>
<pre><code>#!/usr/bin/python

import sys

def main():
    if len(sys.argv) &lt; 2:
        print("Argument required.")
        exit()
    else:
        filename = sys.argv[1]
        with open(filename, "r") as fp:
            string = fp.read().replace('\n', '')
        chars = set()
        for char in string:
            chars.add(char)
        for char in chars:
            sys.stdout.write(char)
        print("")

if __name__ == "__main__":
    main()
</code></pre>
<p>This doesn't print the Unicode characters properly:</p>
<pre><code>$ ./unicode.py test
▒a▒bedgf▒▒▒▒c▒▒
</code></pre>
<p>What is the correct way to do this, so that the characters print properly?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your data is encoded, most likely as utf-8.  Utf-8 uses more than one byte to encode non-ascii characters, such as <code>áéíóú</code>.  Iterating over a string encoded as utf-8 yields the individual <em>bytes</em> that make up the string, rather than the <em>characters</em> that you are expecting.</p>
<pre><code>&gt;&gt;&gt; s = 'áéíóúabcdefgçë'
# There are 14 characters in s, but it contains 21 bytes
&gt;&gt;&gt; len(s)
21
&gt;&gt;&gt; s
'\xc3\xa1\xc3\xa9\xc3\xad\xc3\xb3\xc3\xbaabcdefg\xc3\xa7\xc3\xab'

# The first "character" (actually, byte) is unprintable.
&gt;&gt;&gt; print s[0]
�
# So is the second.
&gt;&gt;&gt; print s[1]
�
# But together they make up a character.
&gt;&gt;&gt; print s[0:2]
á
</code></pre>
<p>So printing individual bytes doesn't work as expected.</p>
<pre><code>&gt;&gt;&gt; for c in s:print c,
... 
� � � � � � � � � � a b c d e f g � � � �
</code></pre>
<p>But decoding the string to unicode, then printing does.</p>
<pre><code>&gt;&gt;&gt; for c in s.decode('utf-8'):print c,
... 
á é í ó ú a b c d e f g ç ë
</code></pre>
<p>To make your code work as you expect, you need to decode the string you read from the file.  Change </p>
<pre><code>string = fp.read().replace('\n', '')
</code></pre>
<p>to</p>
<pre><code>string = fp.read().replace('\n', '').decode('utf-8')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This depends on the version of Python you are using:</p>
<p><strong>1.</strong> For the python 2, there was no native support for Unicode characters, so it was necessary to leave explicit, with a header such as:</p>
<pre><code># -*-coding:utf-8-*-
</code></pre>
<p><strong>2.</strong> For python 3 The support is native, as it says <a href="https://docs.python.org/3/howto/unicode.html#python-s-unicode-support" rel="nofollow noreferrer">here</a>. </p>
<p>So the <code>UTF-8</code> encoding already has native support.</p>
</div>
<span class="comment-copy">What version of Python are you using, and what platform are you on? And what encoding is that file <code>test</code> stored in?</span>
<span class="comment-copy">If you don't know how to answer the last part, if you're on Python 3, try this: <code>with open(filename,'rb') as f: print(f.read())</code> and then show us the <code>b'…whatever…'</code> that gets printed out.</span>
<span class="comment-copy">once you have the encoding, if it is non-standard you should open the file as binary (<code>open(filename, 'rb')</code>) and then use <code>.decode([encoding name])</code> on the read string</span>
<span class="comment-copy">Python 2.7.5, running Scientific Linux 7 (similar to red hat and centos). The encoding is: text/plain; charset=utf-8.</span>
<span class="comment-copy">@csunday95 what is the advantage of your proposed method over <code>open(filename, encoding=[encoding_name])</code>?</span>
<span class="comment-copy">The question is about reading Unicode from a file. Your answer is about including Unicode characters in your source code. Two totally different things.</span>
<span class="comment-copy">I'm sorry, i mistook the question and answered it in a misguided way.</span>
