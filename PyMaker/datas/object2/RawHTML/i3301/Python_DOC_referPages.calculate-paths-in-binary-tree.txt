<div class="post-text" itemprop="text">
<p>Hi in this code I tried to calculate the paths in the binary tree(data Structure). But in some case it will give me an error said that
"AttributeError: 'int' object has no attribute 'left'"
How can I fix this problem?
For example in this case </p>
<pre><code>tree = BTNode(None, BTNode(None,1, 5), BTNode(8))
</code></pre>
<p>I will have the attribute error.</p>
<pre><code>class BTNode:
  """A node in a binary tree."""

  def __init__(self: 'BTNode', item: object, 
           left: 'BTNode' =None, right: 'BTNode' =None) -&gt; None:
    """Initialize this node.
    """
    self.item, self.left, self.right = item, left, right

  def __repr__(self):
     return 'BTNode({}, {}, {})'.format(self.item, str(self.left), 
             str(self.right))


 def tree_paths(t: BTNode) -&gt; int:
  '''Return number of paths to get from root of t,
  to all houses, and back to t.

  &gt;&gt;&gt; tree_paths(BTNode(None, BTNode(4), BTNode(5)))
  4
  '''
  ll = 0
  rl = 0
  if t is None:
     return -2
  if t.left is not None and t.left != int:
     ll = tree_paths(t.left) + 2
  if t.right is not None and t.right != int:
     rl = tree_paths(t.right) + 2

  return ll + rl
</code></pre>
<p>The error I see is:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;pyshell#11&gt;", line 1, in &lt;module&gt;
    tree_paths(t)
  File "C:\Users\ma\Desktop\CSC148\lab7\trick.py", line 60, in tree_paths
    ll = tree_paths(t.left) + 2
  File "C:\Users\ma\Desktop\CSC148\lab7\trick.py", line 60, in tree_paths
    ll = tree_paths(t.left) + 2
  File "C:\Users\ma\Desktop\CSC148\lab7\trick.py", line 59, in tree_paths
    if t.left is not None and t.left != int:
AttributeError: 'int' object has no attribute 'left'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The exception tells you exactly what went wrong. One of your node's <code>left</code>s is an integer instead of <code>BTNode</code> (which according to your type annotations is what <code>left</code> and <code>right</code> should be).</p>
<p>The problem here is the <code>BTNode(None, 1, 5)</code>. This is creating a <code>BTNode</code> with <code>item = None</code>, <code>left = 1</code> and <code>right = 5</code>. <code>left</code> and <code>right</code> need to be <code>BTNodes</code>. So instead of:</p>
<pre><code>tree = BTNode(None, BTNode(None, 1, 5), BTNode(8))
</code></pre>
<p>Try:</p>
<pre><code>tree = BTNode(None, BTNode(None, BTNode(1), BTNode(5)), BTNode(8))
</code></pre>
<p>Some ideas on how to prevent this in the future:</p>
<p>Note that type annotations are optional in Python and not enforced by the interpreter. If you want to check if your program is typed soundly, you need to run <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a> on your codebase. It will complain for a few reasons:</p>
<ol>
<li><code>BTNode(None, 1, 5)</code> - because the <code>1</code> and <code>5</code> aren't <code>BTNode</code>s</li>
<li>The types of <code>left</code> and <code>right</code> need to be <code>Optional[BTNode]</code> since they can be <code>None</code> (<code>from typing import Optional</code>)</li>
</ol>
<p>It also may be easier to see this if you constructed the tree using named args:</p>
<pre><code>tree = BTNode(item=None, left=BTNode(item=None, left=1, right=5), right=BTNode(8))
</code></pre>
<p>Also look into <a href="https://docs.python.org/3/library/typing.html#typing.Generic" rel="nofollow noreferrer">typing.Generic</a> so that you can leverage the type system more when getting <code>item</code> out of your <code>BTNode</code> (and not having to do unsafe casts).</p>
</div>
<span class="comment-copy">You haven't shown your <code>BTNode</code> class, but I suspect you're calling the constructor incorrectly with the doubled parentheses in <code>BTNode((None,1, 5))</code>. Can you show the full traceback of your exception? it should point out exactly where the exception is coming from. Make sure you're showing us that part of the code!</span>
<span class="comment-copy">@Blckknght Hi I edited my post. Please check.</span>
<span class="comment-copy">Wow, that is so true I forgot that the left and right need to be BTnodes as well. I am so bad. Thank you for helping me out.</span>
<span class="comment-copy">It's possible that that call is supposed to be valid, as the check <code>t.left != int</code> in the <code>tree_paths</code> function may be trying to check for integer values on the <code>left</code> or <code>right</code> attributes. It doesn't work, of course, since you can't compare an object with its type that way. If that's what was intended, it should probably be <code>isinstance(t.left, int)</code>.</span>
<span class="comment-copy">Ah, I glossed over that bit. Yeah <code>t.left != int</code> won't do what you expect. You are right in that you want <code>isinstance</code>.</span>
<span class="comment-copy">@Blckknght Hi if the call is valid. Why I cannot compare the t.left != int in this way. instead I need to use isinstance(t.left, int)? Can you explain for me please. I want to learn more.</span>
<span class="comment-copy">If by "the call" you mean <code>BTNode(item=None, left=1, right=5)</code> (which is not valid according to your type annotations): this has nothing to do with any of your code in particular. In python to check the type of something we use <code>isinstance</code>. You use <code>!=</code> and <code>==</code> to compare values. So, <code>x == 1</code> or <code>1 != 2</code> but <code>isinstance(x, int)</code> and <code>not isinstance('abc', int)</code>. The reason why you can write <code>t.left != int</code> is because <code>int</code> is actually an object (it's a <code>type</code> class, which is also a class, actually). This goes down a rabbit hole of python implementation and metaclasses.</span>
