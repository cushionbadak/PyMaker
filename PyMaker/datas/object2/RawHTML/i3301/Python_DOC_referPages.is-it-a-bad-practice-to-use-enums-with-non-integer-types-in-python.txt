<div class="post-text" itemprop="text">
<p><strong>Suppose I have a class which extends <code>Enum</code>, named foo; However, instead of using integers for each item, I use strings</strong></p>
<pre><code>from enum import Enum
class foo (Enum):
    foo = "Hello"
    bar = ", "
    foobar = "world"
    barfoo = "!"
</code></pre>
<p><strong>When compiling, the system will throw no errors, and happily treat this class as a normal enum.</strong> As per why anyone would want to do this, it's very useful if you want to link each name to a data structure, like a dict. Take this as an example:</p>
<pre><code>from enum import Enum
class foo (Enum):
    foo = {"text" : "Hello", "meaning" : "hello"}
    bar = {"text" : ", ", "meaning" : "comma"}
    foobar = {"text" : "world", "meaning" : "world"}
    barfoo = {"text" : "!", "meaning" : "exclamation"}
</code></pre>
<p><strong>Well, maze, why not just use a normal class then?</strong>
Well, its very useful to be able to store this information as an enum, for quick comparison of type. For example, <code>x = {"name" : "foo", "type" : foo.foo}</code> can be easily checked for type with <code>if x[type] is foo.foo</code>.</p>
<p><strong>Is this a "bad practice"? By that, I mean:</strong></p>
<ol>
<li>Is this an intended use of <code>Enum</code>?</li>
<li>If I took out the <code>(Enum)</code> from <code>class foo (Enum):</code>, would there be any efficiency difference when comparing?</li>
<li>Is there a better way to do what I am wanting to do?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><strong>Is it a bad practice to use enums with non-integer types in python?</strong></li>
</ul>
<p>No, it is not bad practice.</p>
<ul>
<li><strong>Is this an intended use of Enum</strong></li>
</ul>
<p>Yes, <code>Enum</code> was designed to work with non-integer types.</p>
<ul>
<li><strong>If I took out the (Enum) from class foo (Enum):, would there be any efficiency difference when comparing?</strong></li>
</ul>
<p>The non-<code>Enum</code> version would probably be faster, but that likely doesn't matter.  (Test for bottle-necks before guessing what needs to be optimized.)</p>
<ul>
<li><strong>Is there a better way to do what I am wanting to do?</strong></li>
</ul>
<p>Using mutable types is allowed -- meaning I have taken no steps to prohibit it<sup>1</sup> -- but it's generally not a good idea.  <code>Enum</code> members should be constant.  Your example looks like you want to have two extra attributes on each member: <code>text</code> and <code>meaning</code> -- this is possible on both the stdlib version of <code>Enum</code>, and the <a href="https://pypi.org/project/aenum/" rel="nofollow noreferrer"><code>Advanced Enumeration</code></a> version of <code>Enum</code>:</p>
<pre><code>from aenum import AutoNumberEnum

class Foo(AutoNumberEnum):
    _init_ = 'text meaning'
    foo = "Hello", "hello"
    bar = ", ", "comma"
    foobar = "world", "world"
    barfoo = "!", "exclamation"
</code></pre>
<p>and in use:</p>
<pre><code>&gt;&gt;&gt; Foo.bar
&lt;Foo.bar: 2&gt;

&gt;&gt;&gt; Foo.bar.text
', '

&gt;&gt;&gt; Foo.bar.meaning
'comma'
</code></pre>
<p>See <a href="https://stackoverflow.com/a/19300424/208880">this answer</a> for the stdlib way to accomplish this.</p>
<hr/>
<p><sup>1</sup> Disclosure:  I am the author of the <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer">Python stdlib <code>Enum</code></a>, the <a href="https://pypi.python.org/pypi/enum34" rel="nofollow noreferrer"><code>enum34</code> backport</a>, and the <a href="https://pypi.python.org/pypi/aenum" rel="nofollow noreferrer">Advanced Enumeration (<code>aenum</code>)</a>  library.</p>
</div>
<span class="comment-copy">I would be wary of mutating the values.</span>
<span class="comment-copy">This guy <code>enums</code></span>
<span class="comment-copy">Woah, the <code>AutoNumberEnum</code> is pretty much exactly what I want. Thanks!</span>
