<div class="post-text" itemprop="text">
<p>I am unable to replace \x in a python string with ''</p>
<pre><code>x ='\x01'
re.sub('\x','',x)
</code></pre>
<p>gives ValueError: invalid \x escape.</p>
<pre><code>isinstance(x,unicode) 
</code></pre>
<p>gives False.</p>
<pre><code>def remove_non_ascii_2(text):
    return re.sub(r'[^\x00-\x7F]', '', text)

x = '\x01'
remove_non_ascii_2(x)
</code></pre>
<p>returns '\x01' with no effect</p>
<p>How can I replace '\x' with the empty string?</p>
</div>
<div class="post-text" itemprop="text">
<p>From the comments it sounds like the biggest problem you have is an inconsistent data source. In the given list of values you have regular floating point values: <code>nan</code>, <code>1.0</code>, <code>0.0</code> strings that represent floats: <code>"1.0"</code>, <code>"0.0"</code> and strings that contain integers as binary values: <code>"\x01"</code></p>
<p>It's relatively trivial to sort out the floats from the strings with something like:</p>
<pre><code>if type(item) == float:
    #do stuff
</code></pre>
<p>Furthermore if you want to sort out the <code>nan</code> values (a special type of float) you can do this:</p>
<pre><code>if type(item) == float 
    if item == float('nan'):
        #do other stuff
    else:
        #do stuff
</code></pre>
<p>Sorting out the strings is a little trickier as there are many ways to represent a value using a string.The regular string to float conversion using <code>float("1.0")</code> works if your string already looks like a float <a href="https://docs.python.org/3/library/functions.html#float" rel="nofollow noreferrer">(rules for looking like a float)</a>. If however the value is represented by the binary value of the string characters (it sounds like this may be the case) you will have to find a way to differentiate between the two types of string. This may be as simple as first trying to call <code>float(item)</code> and catching errors when the format doesn't match the "like a float" criteria. Then assuming you only have a single character you could use <code>ord(item)</code> to return the binary representation of said character. This might look something like this:</p>
<pre><code>try:
    converted = float(item)
catch ValueError:
    if len(item) == 1:
        converted = ord(item)
    else:
        #determine how to handle multi character values
</code></pre>
</div>
<span class="comment-copy"><code>x = '\x01'</code> -- this is the character <code>\x01</code> at ascii point <code>1</code> (it's an ascii character still, not just unicode). <code>\x</code> does not exist in the string. The error you're getting is because you need to do <code>re.sub(r'\x', '' x)</code> but that still won't work.</span>
<span class="comment-copy">Yes. I get error: bogus escape: '\\x'</span>
<span class="comment-copy">Still, your <code>remove_non_ascii</code> doesn't remove non ascii. Those code points are all literal ascii code points.</span>
<span class="comment-copy">You might need to take a step back and explain exactly what problem you're trying to solve. You probably just need to display your data differently, not attempt to modify it.</span>
<span class="comment-copy">Well that's an issue with your data. Since you have a mix of floats, strings representing floats, and strings containing bytes representing integers, it's not a particularly simple problem.</span>
<span class="comment-copy">Yes I did something similar : <code>final['is_paid_lead'].map(lambda x:x if x!=x else(ord(x) if x=='\x01' else float(x)))</code></span>
