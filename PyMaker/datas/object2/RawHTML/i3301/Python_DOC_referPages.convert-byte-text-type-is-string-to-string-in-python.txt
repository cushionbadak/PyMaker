<div class="post-text" itemprop="text">
<p>I have a string like this: <code>s = "b'1f\xe6\xb5\x8b\xe7\xbb\x98'"</code></p>
<p>How to convert it back to the original string?</p>
<p>I try to use <code>eval(s)</code>, however get <code>SyntaxError: bytes can only contain ASCII literal characters.</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Don't use <code>eval</code>, it's dangerous. Use <a href="https://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow noreferrer"><code>ast.literal_eval</code></a> instead and then decode to a string like @Amadan says:</p>
<pre><code>import ast
s = r"b'1f\xe6\xb5\x8b\xe7\xbb\x98'"
res = ast.literal_eval(s).decode()
print(res)  # --&gt; '1f测绘'
</code></pre>
<hr/>
<p>As is said in the comments, my <code>s</code> actually has a  <code>repr</code> that looks like <code>"b'1f\\xe6\\xb5\\x8b\\xe7\\xbb\\x98'"</code>. Can you please confirm what your <code>print(repr(your_string))</code> and <code>print(your_string)</code> look like?</p>
</div>
<span class="comment-copy">Have you tried decoding <code>s</code> using <code>s.decode('utf-8')</code>?</span>
<span class="comment-copy">If a string prints as <code>"b'1f\xe6\xb5\x8b\xe7\xbb\x98'"</code>, you have to double the backslashes if you're trying to test it in console: <code>eval("b'1f\\xe6\\xb5\\x8b\\xe7\\xbb\\x98'").decode('utf-8')</code> gives a possibly useful result. The problem is that your original is just a fragment, so you get something like <code>'1f测绘'</code>, where <code>1f</code> is an orphan of cut-and-paste or something. How did you end up with that string? It would be better to take it closer to the source where it was less mangled.</span>
<span class="comment-copy">@Gsk I'll rather upvote FHTMitchell :)</span>
<span class="comment-copy">It's just a test text file encoded with Huffman Coding. I convert all text to byte to get them coded. And I want to decode it. <code>"b'1f\xe6\xb5\x8b\xe7\xbb\x98'"</code> is the decoded result which is the byte formatted text of original text '1f测绘'.</span>
<span class="comment-copy">No, <code>b'1f\xe6\xb5\x8b\xe7\xbb\x98'</code> is. In your question, it is additionally wrapped in a string, which complicates everything unnecessarily. If you just have the bytes, you wouldn't need to evaluate the string first.</span>
<span class="comment-copy">Thank you very much! I confirm that <code>s = "b'1f\xe6\xb5\x8b\xe7\xbb\x98'"</code> is what I got.</span>
