<div class="post-text" itemprop="text">
<p>For example if I have this dictionary: {1:2,2:3}, I would like to obtain this list:
[1,1,2,2,2]</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>list_of_values = list()
for key, val in d.items():
    list_of_values.extend([key] * val)
print(list_of_values)
</code></pre>
<p>This prints:</p>
<pre><code>[1, 1, 2, 2, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could e.g. use a nested list comprehension with a <code>range</code> over the corresponding value:</p>
<pre><code>&gt;&gt;&gt; d = {1: 2, 2: 3}
&gt;&gt;&gt; [k for k in d for _ in range(d[k])]
[1, 1, 2, 2, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could create a <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code> object</a> and then use the <code>.elements()</code> method to get an iterable which you can convert to a list:</p>
<pre><code>from collections import Counter
list(Counter({1:2,2:3}).elements())
#[1, 1, 2, 2, 2]
</code></pre>
<p>This allows you to also use other methods which may be of interest to you. For instance <code>.most_common</code> is often handy.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import chain
print(list(chain.from_iterable([[k] * v for k, v in {1:2,2:3}.items()])))
</code></pre>
<p>This outputs:</p>
<pre><code>[1, 1, 2, 2, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>chain</code>, <code>repeat</code> and <code>starmap</code> from <code>itertools</code>:</p>
<pre><code>from itertools import chain, repeat, starmap

d = {1:2,2:3}
res = chain.from_iterable(starmap(repeat, d.items()))

print(list(res))

[1, 1, 2, 2, 2]
</code></pre>
</div>
<span class="comment-copy">Ok. What have you tried?</span>
<span class="comment-copy">You don't mean 'value', you mean 'count' or 'multiplicity'. Hence your dictionary is not really a dictionary, rather a Counter.</span>
<span class="comment-copy">Just a quick question. Why did you write in the third line of code ([key]*val) and why doesnÂ´t it work if I write (list(key)*val)?</span>
<span class="comment-copy">In order to create a list using a type constructor, you can either do <code>list()</code> or <code>list([iterable])</code>. 'key' in your case, is an integer, and that produces an error. You can look at <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">docs.python.org/3/library/stdtypes.html#list</a> for a detailed explanation as well.</span>
<span class="comment-copy">Nice, did not even know this function.</span>
<span class="comment-copy">Is all the inner list creation required?</span>
<span class="comment-copy">If you use this method then yes it's required. But there are plenty of other methods that do not need the inner list creation as demonstrated in the other answers.</span>
