<div class="post-text" itemprop="text">
<p>I am doing some analysis on world cup data, I found scrapped json file of records, </p>
<p>it is a json object that you can check <a href="https://raw.githubusercontent.com/openfootball/world-cup.json/master/2018/worldcup.json" rel="nofollow noreferrer">here</a> </p>
<p>I want to get the name and time of the goal for every match.</p>
<p>The problem I am facing is that the json has square brackets, because of that I have to through doing many for loops.</p>
<p>Can I avoid having to do this?</p>
<pre><code>import requests
import json

r = requests.get('https://raw.githubusercontent.com/openfootball/world-cup.json/master/2018/worldcup.json')
results = json.loads(r.text)

for round in results['rounds']:
    for match in round['matches']:
        if match['score1'] != 0 :
            for goal in match['goals1']:
                print(goal['name'])
                print(goal['minute'])
        if match['score2'] != 0:
            for goal in match['goals2']:
                print(goal['name'])
                print(goal['minute'])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I have to through doing many for loops.
  Can I avoid having to do this?</p>
</blockquote>
<p>You can't avoid loops completely, but you can hide some of them in generator expressions:</p>
<pre class="lang-python prettyprint-override"><code>import itertools


def matches():
    m = [round['matches'] for round in results['rounds']]
    yield from itertools.chain(*m)
</code></pre>
<p>Then you need only one single loop for all the matches:</p>
<pre class="lang-python prettyprint-override"><code>for match in matches():
    your existing code here...
</code></pre>
<p>Of course, you can play the iterator game one more level and also have the goals <code>yield</code>ed by a generator. This is just an example how it could work.</p>
<p>Please note the your data contains entries which have <code>score1 &gt; 0</code> but no key <code>goals1</code>. You could consider using a <code>try</code> block. Then you don't even to check the score: just try the goals and you are done. So, that boils down to:</p>
<pre class="lang-python prettyprint-override"><code>for match in matches():
    try:
        for goal in match['goals1']:
            print(goal['name'])
            print(goal['minute'])
    except KeyError:
        pass

    try:
        for goal in match['goals2']:
            print(goal['name'])
            print(goal['minute'])
    except KeyError:
        pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code should work ok. Some of the matches though do not contain <code>goal</code> fields which can be fixed by using <code>.get()</code> with a default. Yes the loops are needed, it can though be simplified slightly as follows:</p>
<pre><code>from operator import itemgetter
import requests
import json

r = requests.get('https://raw.githubusercontent.com/openfootball/world-cup.json/master/2018/worldcup.json')
results = json.loads(r.text)
get_fields = itemgetter('name', 'minute')

for round in results['rounds']:
    for match in round['matches']:
        for goal in match.get('goals1', []) + match.get('goals2', []):
            print(', '.join(map(str, get_fields(goal))))
</code></pre>
<p>This would give you output starting:</p>
<pre class="lang-none prettyprint-override"><code>Gazinsky, 12
Cheryshev, 43
Dzyuba, 71
Cheryshev, 90
Golovin, 90
</code></pre>
<p><a href="https://docs.python.org/3/library/operator.html?highlight=itemgetter#operator.itemgetter" rel="nofollow noreferrer"><code>itemgetter()</code></a> is a useful way to extract required fields from a list or dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>May be the answer is not the one looking for,  found schema very intersting in parsing json and validating</p>
<p>Try this <a href="https://github.com/keleshev/schema" rel="nofollow noreferrer">https://github.com/keleshev/schema</a>
Create schema for one match.. using schema you could extract relevant data.</p>
<pre><code>import requests
import json
from schema import Schema, Use, Or, Optional

r = requests.get('https://raw.githubusercontent.com/openfootball/world-cup.json/master/2018/worldcup.json')
results = json.loads(r.text)

schmeMatch = Schema({
        Optional(Or('goals1','goals2')) : [
            Use(lambda obj: [obj['name'], obj['minute']] )
        ]
    },ignore_extra_keys=True)

for round in results['rounds']:
    for match in round['matches']:
        goals = schmeMatch.validate(match)
        print(goals)
</code></pre>
<p>Result:</p>
<pre><code>{'goals1': [['Gazinsky', 12], ['Cheryshev', 43], ['Dzyuba', 71], ['Cheryshev', 90], ['Golovin', 90]], 'goals2': []}
{'goals1': [], 'goals2': [['Gim√©nez', 89]]}
{'goals1': [['Ronaldo', 4], ['Ronaldo', 44], ['Ronaldo', 88]], 'goals2': [['Costa', 24], ['Costa', 55], ['Nacho', 58]]}
{'goals1': [], 'goals2': [['Bouhaddouz', 90]]}
{'goals1': [['Griezmann', 58], ['Behich', 81]], 'goals2': [['Jedinak', 62]]}
</code></pre>
</div>
<span class="comment-copy">Square brackets make arrays, which must be looped over if you want all elements</span>
<span class="comment-copy">What you have looks fine to me.</span>
