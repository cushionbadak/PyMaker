<div class="post-text" itemprop="text">
<p>I read <a href="https://twitter.com/raymondh/status/1014210487112818689" rel="nofollow noreferrer">in Twitter</a>:</p>
<blockquote>
<p>#Python news: Guido accepted PEP 572.  Python now has assignment expressions.</p>
<pre><code> if (match := (pattern.search) pattern.search(data)) is not None:
    print((match.group) mo.group(1))

 filtered_data = [y for x in data if (y := f(x)) is not None]
</code></pre>
<p><sub>(correction mine in the 2nd line of code)</sub></p>
</blockquote>
<p>As indicated, <a href="https://www.python.org/dev/peps/pep-0572/" rel="nofollow noreferrer">PEP 572 -- Assignment Expressions</a> describes this to be present in <a href="https://docs.python.org/3.8/whatsnew/3.8.html" rel="nofollow noreferrer">Python 3.8</a>:</p>
<blockquote>
<p>This is a proposal for creating a way to assign to variables within an expression using the notation <code>NAME := expr</code>.</p>
</blockquote>
<p>I've gone through the description and examples and I see this is a convenient way to avoid repetitions of either calls or assignments, so instead of:</p>
<pre><code>match1 = pattern1.match(data)
match2 = pattern2.match(data)
if match1:
    return match1.group(1)
elif match2:
    return match2.group(2)
</code></pre>
<p>or the more efficient:</p>
<pre><code>match1 = pattern1.match(data)
if match1:
    return match1.group(1)
else:
    match2 = pattern2.match(data)
    if match2:
        return match2.group(2)
</code></pre>
<p>One now can say:</p>
<pre><code>if match1 := pattern1.match(data):
    return match1.group(1)
elif match2 := pattern2.match(data):
    return match2.group(2)
</code></pre>
<p>Similarly, one can now say:</p>
<pre><code>if any(len(longline := line) &gt;= 100 for line in lines):
    print("Extremely long line:", longline)
</code></pre>
<p>However, I do not understand how this example given in the PEP is not valid:</p>
<blockquote>
<pre><code>y0 = y1 := f(x)  # INVALID
</code></pre>
</blockquote>
<p>Will it be correct to say <code>y0 = (y1 := f(x))</code>? How could it be used?</p>
<p><sub>Foot note for those who wonder where will this be available: I already installed <a href="https://docs.python.org/3/whatsnew/3.7.html" rel="nofollow noreferrer">Python 3.7</a> and it does not work there, since the PEP currently shows as "Status: Draft". However, the PEP talks about <em>Proof of concept / reference implementation (<a href="https://github.com/Rosuav/cpython/tree/assignment-expressions)_" rel="nofollow noreferrer">https://github.com/Rosuav/cpython/tree/assignment-expressions)</a></em></sub></p></div>
<div class="post-text" itemprop="text">
<p>As <a href="https://www.python.org/dev/peps/pep-0572/#exceptional-cases" rel="nofollow noreferrer">explicitly stated</a> in the PEP,</p>
<blockquote>
<p>Unparenthesized assignment expressions are prohibited at the top level in the right hand side of an assignment statement; for example, the following is not allowed:</p>
<pre><code>y0 = y1 := f(x)  # INVALID
</code></pre>
<p>Again, this rule is included to avoid two visually similar ways of saying the same thing.</p>
</blockquote>
<p>And <a href="https://www.python.org/dev/peps/pep-0572/#relative-precedence-of" rel="nofollow noreferrer">later</a>,</p>
<blockquote>
<p>As follows from section "Exceptional cases" above, it is never allowed at the same level as <code>=</code>. In case a different grouping is desired, parentheses should be used.</p>
<p>...</p>
<pre><code># INVALID
x = y := 0

# Valid alternative
x = (y := 0)
</code></pre>
</blockquote>
</div>
<span class="comment-copy">This is <a href="https://www.python.org/dev/peps/pep-0572/#exceptional-cases" rel="nofollow noreferrer">in the PEP</a>.</span>
<span class="comment-copy">@user2357112 yes thanks, this is where I took it from. This is why I ask how can it be done</span>
