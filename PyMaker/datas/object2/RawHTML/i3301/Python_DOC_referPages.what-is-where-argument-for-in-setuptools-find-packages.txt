<div class="post-text" itemprop="text">
<p>working on a python project, I tried to separate source code and unit tests; here is the project structure:</p>
<pre><code>MyProject/
    MANIFEST.in
    README.md
    setup.py
    source/
        __init.py__
        my_project/
            __init.py__
            some_module.py
    test/
        __init.py__
        my_project/
            __init.py__
            test_some_module.py
</code></pre>
<p>And here is the <code>setup.py</code> file:</p>
<pre><code>from setuptools import setup, find_packages

setup(
    name='my_project',
    packages=find_packages(where='./source'),
    description='My project to be packaged',
    version='1.0.0',
    author='me'
    install_requires=[
        'fastnumbers~=2.0.1',
        'numpy~=1.14.1',
        'pandas~=0.22.0'
    ],
    extras_require={
        'dev': ['check-manifest'],
        'test': [
            'mock',
            'PyHamcrest',
            'pytest',
            'pytest-cov'
        ],
    }
)
</code></pre>
<p>Then, when I run command <code>python3 setup.py sdist</code>, it fails with the following output:</p>
<pre><code>running sdist
running egg_info
writing my_project.egg-info/PKG-INFO
writing requirements to my_project.egg-info/requires.txt
writing dependency_links to my_project.egg-info/dependency_links.txt
writing top-level names to my_project.egg-info/top_level.txt
error: package directory 'my_project' does not exist
</code></pre>
<p>The resulting <code>top_level.txt</code> file looks fine:</p>
<pre><code> my_project
</code></pre>
<p>but it looks like the <code>setuptools</code> is not starting from <code>source</code> folder to find modules to be packaged.</p>
<ol>
<li>Do I have to move <code>setup.py</code> and <code>MANIFEST.in</code> files into <code>source</code> folder?</li>
<li>But then, what is this <code>where</code> argument for in <code>setuptools.find_packages</code> function?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You are one step away from a working solution. Add</p>
<pre><code>package_dir={
    '': 'source',
},
</code></pre>
<p>to the <code>setup()</code> arguments:</p>
<pre><code>setup(
    ...,
    packages=find_packages(where='source'),
    package_dir={
        '': 'source',
    },
    ...
)
</code></pre>
<p>More info on packages remapping can be found in <a href="https://docs.python.org/3/distutils/setupscript.html#listing-whole-packages" rel="nofollow noreferrer">Listing whole packages</a> section.</p>
<p>However, it looks like you made the <code>source</code> dir to a python package by placing an <code>__init__.py</code> in it. Was that intentional? Do you have import statements like</p>
<pre><code>import source.my_project
from source.my_project.my_module import stuff
</code></pre>
<p>or similar, using <code>source</code> as package name? Then beware that the imports will fail once you install your built package because <code>source</code> is omitted when including sources on build. I see two ways:</p>
<ol>
<li>either remove <code>source/__init__.py</code>, use <code>package_dir</code> like described above to make <code>my_project</code> to the top level package, omit <code>source</code> in imports (should you get any errors, just remove <code>myproject-1.0.0.egg_info</code> dir and recreate it with <code>python setup.py egg_info</code>), or</li>
<li>use <code>source</code> as top level package: don't use <code>package_dir</code>, look for packages in the project root dir (<code>packages=find_packages()</code> without explicitly stating <code>where</code>).</li>
</ol>
</div>
<span class="comment-copy">well it looks like the <code>where</code> function is defining the package directory, i.e. where <code>setuptools.find_packages</code> should be looking</span>
<span class="comment-copy">I think this actually could be solved by adding a <code>/</code> after source to indicate that it is a directory?</span>
<span class="comment-copy">@RBalasubramanian: adding a trailing <code>/</code> to <code>'./source/'</code> has no effect</span>
<span class="comment-copy">Thank you @hoefling! This <code>package_dir</code> option solved my issue. And good catch also about the unnecessary <code>__init__.py</code> file!</span>
<span class="comment-copy">Glad I could help!</span>
<span class="comment-copy">Funny how a solution to someone else's problems goes a long way to helping others! Thank @hoefling for this tip, it has helped me today.</span>
<span class="comment-copy">@HelenNeely glad to hear that! Should you need more information for the sources remapping on packaging, check out the <a href="https://docs.python.org/3/distutils/setupscript.html#listing-whole-packages" rel="nofollow noreferrer">Listing whole packages</a> section in the stdlib docs.</span>
