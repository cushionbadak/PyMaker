<div class="post-text" itemprop="text">
<p>I'm working with a large csv file that contains songs and their ownershp properties. Each song record is written top-down, with associated writer and publisher names below each title. So a given song may comprise of say, 4-6 rows, depending on how many writers/publishers control it (example with header row below):</p>
<pre><code>Title,RoleType,Name,Shares,Note
BOOGIE BREAK 2,ASCAP,Total Current ASCAP Share,100,
BOOGIE BREAK 2,W,MERCADO JOSEPH M,,
BOOGIE BREAK 2,P,CRAFTIN MUSIC,,
BOOGIE BREAK 2,P,NEXT DIMENSION MUSIC,,
</code></pre>
<p>I'm currently trying to loop through the entire file to extract all of the song titles that contain leading spaces (e.g.,'   song title'). Here's the code that I'm currently using:</p>
<pre><code>import csv
import re

with open('output/sws.txt', 'w') as sws:
    with open('data/ascap_catalog1.csv', 'r') as ac:
        ascap = csv.reader(ac, delimiter=',')
        ascap = list(ascap)
        for row in ascap:
            for strings in row:
                if re.search('\A\s+', strings):
                    row = str(row)
                    sws.write(row) 
                    sws.write('\n')
                else:
                    continue
</code></pre>
<p>Due to the size of this file csv file that I'm working with (~2GB), it takes quite a bit of time to iterate through and produce a result file. However, based on the results that I've gotten, it appears the song titles with leading spaces are all clustered at the beginning of the file. Once those songs have all been listed, then normal songs w/o leading spaces appear.</p>
<p>Is there a way to make this code a bit more efficient, time-wise? I tried using a few <code>break</code>s after every for and if statement, but depending on the amount that I used, it either didn't effect the statement at all, or broke too quickly, not capturing any rows.</p>
<p>I also tried wrapping it in a function and implementing <code>return</code>, however, for some reason the code only seemed to iterate through the first row (not counting the header row, which I would skip).</p>
<p>Thanks so much for your time,</p>
</div>
<div class="post-text" itemprop="text">
<p><code>list(ascap)</code> isn't doing you nay favors.  <code>reader</code> objects are iterators over their contents, but they don't load it all into memory until ti's needed. Just iterate over the <code>reader</code> object directly.  </p>
<p>For each row, just check <code>row[0][0].isspace()</code>.  That checks the first character of the first entry, which is all you need to determine whether something begins with whitespace.</p>
<pre><code>with open('output/sws.txt', 'w', newline="") as sws:
    with open('data/ascap_catalog1.csv', 'r', newline="") as ac:
        ascap = csv.reader(ac, delimiter=',')
        for row in ascap:
            if row and row[0] and row[0][0].isspace():
                print(row, file=sws)
</code></pre>
<p>You could also play with your output, like saving all the rows you want to keep in a list before writing them at the end.  It sounds like your input might be sorted, if all the leading whitespace names come first.  If that's the case, you can just add <code>else: break</code> to skip the rest of the file.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dictionary to find each song and group all of its associated values:</p>
<pre><code>from collections import defaultdict
import csv, re
d = defaultdict(list)
count = 0 #count needed to remove the header, without loading the full data into memory
with open('filename.csv') as f:
  for a, *b in csv.reader(f):
    if count:
      if re.findall('^\s', a):
        d[a].append(b)
    count += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>this one worked well for me and seems to be simple enough.</p>
<pre><code>import csv
import re

with open('C:\\results.csv', 'w') as sws:
    with open('C:\\ascap.csv', 'r') as ac:
        ascap = csv.reader(ac, delimiter=',')
        for row in ascap:
            if re.match('\s+', row[0]):
                sws.write(str(row)+ '\n')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are some things you can improve:</p>
<ul>
<li><p>Use the <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer"><code>reader</code></a> object as an iterator directly without creating an intermediate list. This will save you both computation time and memory.</p></li>
<li><p>Check only the first value in a row (which is a title), not all.</p></li>
<li><p>Remove an unnecessary <code>else</code> clause.</p></li>
</ul>
<p>Combining all of this and applying some best practices you can do:</p>
<p> </p>
<pre><code>import csv
import re

with open('data/ascap_catalog1.csv') as ac, open('output/sws.txt', 'w') as sws: 
    reader = csv.reader(ac)
    for row in reader:
        if re.search(r'\A\s+', row[0]):
            print(row, file=sws)
</code></pre>
<blockquote>
<p>It appears the song titles with leading spaces are all clustered at
  the beginning of the file.</p>
</blockquote>
<p>In this case you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile" rel="nofollow noreferrer"><code>itertools.takewhile</code></a> to only iterate the file as long the titles have leading spaces:</p>
<pre><code>import csv
import re
from itertools import takewhile

with open('data/ascap_catalog1.csv') as ac, open('output/sws.txt', 'w') as sws:
    reader = csv.reader(ac)
    next(reader)  # skip the header
    for row in takewhile(lambda x: re.search(r'\A\s+', x[0]), reader):
        print(row, file=sws)
</code></pre>
</div>
<span class="comment-copy">This doesn't particularly answer your question but, in general, using a library like <code>pandas</code> for .csv processing will lead to speed-ups.</span>
<span class="comment-copy">Maybe you can try first make a list of processed songs and at the end write it at once. Not making lots of small read-write operations.</span>
<span class="comment-copy">you mean <code>d[a].extend(b)</code> right?</span>
<span class="comment-copy">@Jean-Fran√ßoisFabre That is a possibility, although I used <code>append</code> to retain the values associated with each song publisher, which may or may not (based on the OPs example) contain varying data values, such as RoleType, Name,Shares, etc.</span>
