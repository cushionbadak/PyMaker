<div class="post-text" itemprop="text">
<p>I just noticed that if you want to create a tuple with single element, being a tuple itself, you cannot do it with constructor <code>tuple</code> only with <code>(,)</code> syntax. Why is that? </p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; tuple(list('abc'))
('a', 'b', 'c')
&gt;&gt;&gt; tuple(tuple(list('abc')))
('a', 'b', 'c')
&gt;&gt;&gt; (tuple(list('abc')),)
(('a', 'b', 'c'),)
</code></pre>
<p>But then it holds for a list</p>
<pre><code>&gt;&gt;&gt; tuple([1],)
(1,)
&gt;&gt;&gt; tuple([1])
(1,)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't really see the issue, this adheres to the documentation:</p>
<blockquote>
<pre><code>class tuple(object)
 |  tuple() -&gt; empty tuple
 |  tuple(iterable) -&gt; tuple initialized from iterable's items
 |  
 |  If the argument is a tuple, the return value is the same object.
</code></pre>
</blockquote>
<hr/>
<p>So, <code>list('abc')</code> always evaluates to <code>['a', 'b', 'c']</code> which is an iterable.</p>
<p>So in the first example (<code>tuple(['a', 'b', 'c'])</code>), the result is a tuple initialised from the iterable's items. I.e. ('a', 'b', 'c').</p>
<p>The second example takes the result of the first example (a tuple) and passes it into the <code>tuple()</code> function once more. As the documentation states (last line), the return value when passed a tuple is the same object which matches with our result.</p>
<p>And for the third, once more, <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">the docs</a> tell us what we need to know:</p>
<blockquote>
<p>A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses).</p>
</blockquote>
<hr/>
<p>Finally, your last two examples (<code>tuple([1])</code> and <code>tuple([1],)</code>) both produce a one-element tuple, because you are passing an iterable of length one. The docs once again state (at top): a tuple is initialized from iterable's items.</p>
<p>So, to conclude, the case where you need a comma is when you want to create a tuple with one element. However, if passing an iterable of length one, this is not necessary as Python understands that you are not evaluating an expression.</p>
<hr/>
<p>For completeness, the reason this awkward syntax is unavoidable is because  statements like: <code>(1 + 2) * 3</code> would evaluate to <code>(3, 3, 3)</code> rather than the expected <code>9</code>. So instead, you must go out of your way through adding a comma: <code>(1 + 2,) * 3</code> to get the result of <code>(3, 3, 3)</code> which makes perfect sense.</p>
</div>
<div class="post-text" itemprop="text">
<p>Without a trailing comma, Python will treat the value which you are passing as a expression.</p>
<pre><code>&gt;&gt;&gt; tuple(tuple(list('abc')))
</code></pre>
<p>will give you</p>
<pre><code>tuple(('a','b','c'))
</code></pre>
<p>Which is then evaluated into a tuple</p>
<pre><code>('a','b','c')
</code></pre>
<p><a href="https://www.pythonlearn.com/html-008/cfbook011.html" rel="nofollow noreferrer">Here</a> is some more info if you need</p>
<p>As for the list, tuple() takes iterables to create a tuple</p>
</div>
<div class="post-text" itemprop="text">
<p>its just the way it is.</p>
<p>Calling a constructor on an existing object does nothing (see <code>list(list('1'))</code> for example. Calling <code>tuple(list('1'))</code> would have to create a <code>tuple</code>, hence the <code>,</code>. This is not required from your 2nd call (<code>tuple(tuple(list('abc')))</code>) where the inner <code>tuple</code> already exists, and therefore, "casting" it to a tuple does nothing</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>... you cannot do it with constructor tuple only with (,) syntax</p>
</blockquote>
<p>Yes you can. Simply you must add a comma when building a tuple containing one single element, because if you do not, you only get a parenthesed non tuple element:</p>
<pre><code>t = ((1,),)
</code></pre>
<p>is a tuple containing one single tuple containing integer 1.</p>
<p>But <code>tuple</code> only converts an iterable to a tuple. As such, it changes a string in a tuple of chars and changes a list in tuple. And if you pass a tuple, you just get a copy of the original tuple.</p>
</div>
<span class="comment-copy">Because <code>tuple</code> function accepts an iterable. If it was able to accept items with different types there should have been multiple type checking in the function which would make it so inefficient. And the common sense tells us that this is not a good/efficient/wise decision/trade at all.</span>
<span class="comment-copy">Oh excellent, especially the last bit made it very clear! Thanks a lot</span>
