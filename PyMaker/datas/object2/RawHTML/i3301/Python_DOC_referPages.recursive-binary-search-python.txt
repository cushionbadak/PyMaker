<div class="post-text" itemprop="text">
<p>I've been trying to write binary search recursively. When I do this using the list[:] syntax I don't get the intended results with several errors coming up or not getting the correct values. </p>
<pre><code>def binary_search(arr, val):

  left = 0 
  right = len(arr)-1
  mid = (left + right)//2

  #Go through the array
   if (val == arr[mid]):
     return mid
   #Check right side of arr
   if (val &gt; arr[mid]):
     return binary_search(arr[mid+1:], val)
   #Check left side of arr
   return binary_search(arr[:mid], val)
</code></pre>
<p>EDIT: Example inputs and outputs</p>
<pre><code>arr1 =[]
for i in range(10):
    arr1.append(i)

for i in range(10):
    print(binary_search(arr1,i))
</code></pre>
<p>I expect to get something like <code>'0,1,2,3,4,5,6,7,8,9'</code> but get <code>'0,1,0,0,4,None ,None,2,0,0'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You have two problems. First one is a typo, where you say</p>
<pre><code>if (val &gt; mid):
</code></pre>
<p>you should say</p>
<pre><code>if (val &gt; arr[mid]):
</code></pre>
<p>Since you're comparing the value and not the index.</p>
<p>Second one is more subtle... when you check the right side of the array, in:</p>
<pre><code>return binary_search(arr[mid+1:], val)
</code></pre>
<p>The subarray you're passing to the recursive call (<code>arr[mid+1:]</code>) already starts in the middle of the array, that means the result of that recursive call will return the index of the element <strong>in the subarray</strong>.  So you need to add the index delta you used to split the array, to have a index based on the full array again:</p>
<pre><code>return binary_search(arr[mid+1:], val) + (mid + 1)
</code></pre>
<p>Here's the full code for completeness:</p>
<pre><code>def binary_search(arr, val):
  left = 0 
  right = len(arr)-1
  mid = (left + right)//2

  #Go through the array
  if (val == arr[mid]):
     return mid
   #Check right side of arr
  if (val &gt; arr[mid]):
     return binary_search(arr[mid+1:], val) + (mid + 1)
   #Check left side of arr
  return binary_search(arr[:mid], val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You're comparing <code>val</code> to <code>mid</code>, instead of to <code>arr[mid]</code>. Also, it would read nicer if you made the <strong>ifs</strong> mutually exclusive. Also, as per nosklo's answer below, you need to add the index offset for the greater than case:</p>
<pre><code>#Go through the array
if (val == arr[mid]):
    return mid
#Check right side of arr
elif (val &gt; mid):
    return binary_search(arr[mid+1:], val) + (mid + 1)
#Check left side of arr
else:
    return binary_search(arr[:mid], val)
</code></pre>
</div>
<span class="comment-copy">Can you give example inputs and show what your function outputs compared to what you expected?</span>
<span class="comment-copy">I don't think it makes sense to have a <code>while</code> loop that contains an unconditional return. You'll never loop more than once, that way. (posting this as a comment and not an answer because I don't have any specific recommendations about what you should be doing instead)</span>
<span class="comment-copy">@glibdud I made the necessary edits</span>
<span class="comment-copy">@Kevin your'e right. THe while loop is unnecessary so I took that out, but I still get the same errors</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer"><b><code>bisect</code></b></a></span>
<span class="comment-copy">That's not enough to fix it, see my answer</span>
<span class="comment-copy">@nosklo - thanks, I still  prefer my version with the <code>elif</code> / <code>else</code>.</span>
<span class="comment-copy">Sure! I also prefer if/elif - I like to copy the exact OP's code to help them understand where their process of thought went wrong.</span>
