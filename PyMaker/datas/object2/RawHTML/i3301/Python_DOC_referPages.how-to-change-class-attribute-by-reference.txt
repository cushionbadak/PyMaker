<div class="post-text" itemprop="text">
<pre><code>class Stock:
  def __init__(self,
               stock = 'GOOG',
               period = '1Y',
               interval = 86400,
               market = 'NASDAQ'):

    self.stock = stock
    self.period = period
    self.inteval = interval
    self.market = market

    data = get_price_data({'q': stock, 'p': period, 'i': interval, 'x': market})
    self.data = data

MU = Stock('MU')
</code></pre>
<p>I'd like to be able to update attributes, for example <code>MU.period = '14d'</code> and have the data be recalculated automatically.</p>
<p>I tried doing something like</p>
<pre><code>   @period.setter
    def period(self, val):
        self._period = val
        self.data = data(self.stock, self.period, self.interval, self.market)
</code></pre>
<p>but it threw an error <code>'str' object has no attribute 'setter'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>That <code>@period.setter</code> can only be done if you've already declared <code>period</code> as a <a href="https://docs.python.org/3/library/functions.html#property" rel="nofollow noreferrer"><code>property</code></a>.</p>
<p>You're also going to need a getterâ€”which you usually just declare with the initial <code>@property</code>.</p>
<p>Finally, you probably want to go behind the <code>period</code> property and store stuff directly in the raw <code>_period</code> attribute in your <code>__init__</code>, because otherwise you're going to end up setting <code>self.data</code> twice.</p>
<p>So:</p>
<pre><code>class Stock:
  def __init__(self,
               stock = 'GOOG',
               period = '1Y',
               interval = 86400,
               market = 'NASDAQ'):

    self.stock = stock
    self._period = period
    self.inteval = interval
    self.market = market

    data = get_price_data({'q': stock, 'p': period, 'i': interval, 'x': market})
    self.data = data

  @property
  def period(self):
      return self._period

  @period.setter
  def period(self, val):
      self._period = val
      self.data = data(self.stock, self.period, self.interval, self.market)
</code></pre>
<p>You might also want to make <code>data</code> a read-only <code>@property</code> while you're at it, to make sure nobody accidentally breaks it, but that may not be worth it ("consenting adults" and all that).</p>
</div>
<span class="comment-copy">works perfect, thank you thank you! (yeah, I just started getting into classes, lots to learn)</span>
<span class="comment-copy">@Raksha Another idea you might want to try, if you're doing this for learning experience: make <code>data</code> a property instead of <code>period</code>. (It doesn't need a setter, only a getter.) And then look at <code>functools.lru_cache</code> to make it not waste time recalculating the <code>get_price_data</code> function if nothing has changed since the last time.</span>
