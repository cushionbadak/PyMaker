<div class="post-text" itemprop="text">
<p>I have a generator and I want to modify the last element of the generator.
I want to replace the last element with another element. I know how to retrieve the last element, but not how to modify it.</p>
<p>What would be the best way to approach this?</p>
<p>For more context, this is what I want to do:</p>
<pre><code>for child in alexnet.children():
    for children_of_child in child.children():
         print(children_of_child);
</code></pre>
<p>My generator object is: <code>children_of_child</code> and for the second child all its children are:</p>
<pre><code>Dropout(p=0.5)
Linear(in_features=9216, out_features=4096, bias=True)
ReLU(inplace)
Dropout(p=0.5)
Linear(in_features=4096, out_features=4096, bias=True)
ReLU(inplace)
Linear(in_features=4096, out_features=1000, bias=True)
</code></pre>
<p>I want to replace the last layer <code>Linear(in_features=4096, out_features=1000, bias=True)</code> with my own regression net. `</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're working with a reasonably small list (even ResNet-150 is "reasonably small" in RAM terms), I'd make this easy to understand and maintain.  There is no "obvious" way to detect that you're one step short of exhausting a generator.</p>
<ol>
<li>Deplete the current generator, making a list of its output.</li>
<li>Replace the last element as desired.</li>
<li>Wrap a new generator around this altered list.</li>
</ol>
<p>The "nice" (?) way to do this is to write a wrapper generator with a one-element look-ahead in the original: at each call <code>N</code>, you already <em>have</em> element <code>N</code> in your wrapper.  You grab element <code>N+1</code> from the "real" generator (your posted code).  If that element exists, then you return element <code>N</code> normally.  If that generator is exhausted, then you replace this last element with the one you want, and return the alteration.</p>
<p><strong>EXAMPLE</strong>:</p>
<p>TO keep this simple, I've used <code>range</code> in place of your original generator.</p>
<pre><code>def new_tail():
    my_list = list(range(6))
    my_list[-1] = "new last element"
    for elem in my_list:
        yield elem

for item in new_tail():
    print(item)
</code></pre>
<p>Output:</p>
<pre><code>0
1
2
3
4
new last element
</code></pre>
<p>Does that help?</p>
</div>
<div class="post-text" itemprop="text">
<p>The way to do this is to iterate one step ahead, keeping track of the previous value as you go. For each value, yield the previous one. When you get to the end, instead of yielding the last previous value, yield the replacement value:</p>
<pre><code>def new_tail(it, tail):
    sentinel = prev = object()
    for value in it:
        if prev is not sentinel:
            yield prev
        prev = value
    yield tail
</code></pre>
<p>Or you can treat the first element specially instead of using a sentinel:</p>
<pre><code>def new_tail(it, tail):
    it = iter(it)
    prev = next(it)
    for value in it:
        yield prev
        prev = value
    yield tail
</code></pre>
<p>You may want to think about what should happen with a completely empty iterator. I'm not sure whether you want to yield nothing, yield the replacement value, or raise an exception. The first version yields the replacement value; the secondâ€¦ well, it should raise an exception, but as of 3.7, it issues a <code>DeprecationWarning</code> and yields nothing, which is probably not the behavior you want.</p>
<p>Anyway, you can either use <code>next</code> with a <code>sentinel</code> default value, or <code>except StopIteration:</code> the <code>next</code>. Then it's easy to do any of the three you wanted.</p>
<hr/>
<p>But you can make this simpler if you think of it a little more abstractly: If you had all of the adjacent pairs of elements, the first element of each such pair gives you all but the last element. So, using <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">the <code>pairwise</code> recipe from the <code>itertools</code> docs</a>:</p>
<pre><code>def new_tail(it, tail):
    for x, _ in pairwise(it):
        yield x
    yield tail
</code></pre>
<p>Or, if you prefer, you can even make it a single expression using <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> and <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a>, although this is probably a bit silly:</p>
<pre><code>def new_tail(it, tail):
    return chain(map(itemgetter(0), pairwise(it)), (tail,))
</code></pre>
</div>
<span class="comment-copy">I have completed steps the steps and for step 3 I have created a generator as follows: myGen = (n for n in myList). However, now that I try to assign this generator back to 'child', it gives me an error since I cannot 'call' this generator. How can I assign it back?</span>
<span class="comment-copy">Let me see about reproducing this.  Python 3.4.5 is okay?</span>
<span class="comment-copy">yes, I use 3.5 or 3.6 but I think it 3.4.5 should be fine too. thanks!</span>
