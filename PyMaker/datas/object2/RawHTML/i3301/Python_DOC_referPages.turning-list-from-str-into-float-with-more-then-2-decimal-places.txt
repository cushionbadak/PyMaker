<div class="post-text" itemprop="text">
<p>I'm trying to turn a list with strings into a list with floats.
The strings are all numbers with more then 2 decimal places (most of them have 6 decimal places).</p>
<p>The problem is that Python is only keeping two of the decimal places of the string (it's actually rounding). But I need all of the decimal places.</p>
<p>My code is as following:</p>
<pre><code>timestamps_list_3 = []
for i in range(len(timestamps_list_2)):
    timestamps_list_3.append(float(timestamps_list_2[i]))
</code></pre>
<p>The content of timestamps_list_2 looks like this:</p>
<pre><code>['1525356511.394770', '1525356511.438828', '1525356511.477972', '1525356511.506286', '1525356511.533924']
</code></pre>
<p>timestamps_list_3:</p>
<pre><code>[1525356511.40, 1525356511.44, 1525356511.48, 1525356511.51, 1525356511.53]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use decimal class from python like -</p>
<pre><code>import decimal
timestamps_list_3 = [decimal.Decimal(i) for i in timestamps_list_2]
</code></pre>
<p>but this will give you numbers with decimal class but it will retain the 0 if it's the last digit in a number.</p>
<p>Else use float and it will remove the 0 if it's the last digit in a number like - </p>
<pre><code>timestamps_list_3 = [float(i) for i in timestamps_list_2]
</code></pre>
<p>Let me know if it helps. </p>
<p>P.S. - You can do basic mathematical operations on decimal class.    </p>
</div>
<div class="post-text" itemprop="text">
<p>64-bit floats can handle precision for up to around 16 decimal places.* So, as demonstrated in your question, you should not face any issues if your strings include at most 6 digits after the period.</p>
<p>For greater accuracy (default 28 decimal places, but user-definable), you should use the <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer"><code>decimal</code></a> module, but first make sure this is necessary. Computations will become expensive relative to <code>float</code>.</p>
<pre><code>from decimal import Decimal

L = ['1525356511.394770', '1525356511.438828',
     '1525356511.477972', '1525356511.506286',
     '1525356511.533924']

res = list(map(Decimal, L))

print(res)

[Decimal('1525356511.394770'), Decimal('1525356511.438828'),
 Decimal('1525356511.477972'), Decimal('1525356511.506286'),
 Decimal('1525356511.533924')]
</code></pre>
<p>* See <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format#IEEE_754_double-precision_binary_floating-point_format:_binary64" rel="nofollow noreferrer">IEEE 754 double-precision binary floating-point format: binary64</a>:</p>
<blockquote>
<p>The 53-bit significand precision gives from 15 to 17 significant
  decimal digits precision (2<sup>−53</sup> ≈ 1.11 × 10<sup>−16</sup>).</p>
</blockquote>
</div>
<span class="comment-copy"><code>1525356511.394770 == 1525356511.39477</code>. Everything is fine.</span>
<span class="comment-copy">If you need the trailing zero, don't use floats. Keep strings.</span>
<span class="comment-copy">Ouch! I'm so sorry for pasting the wrong content of timestamps_list_3. It actually  only has two decimal places! I changed it above.</span>
<span class="comment-copy">Please show the code that you used to generate the final output. Presumably you're <code>print</code>ing the individual floats?</span>
<span class="comment-copy">Can't reproduce here, either on Python 2 or Python 3. There's almost certainly something you're not showing us or not telling us here.</span>
<span class="comment-copy">Thanks for your answer! It helped a lot!</span>
<span class="comment-copy">Thanks for your answer! It works fine now! I don't know why Python is only returning two decimal places with normal float...</span>
