<div class="post-text" itemprop="text">
<p>Have some lightweight text search engine. It iterates through the .txt files in one folder, searches for selected term and displays the name of the file. All is based on the functionality of <code>os</code> library:</p>
<pre><code>import os

dirname = '/Users/user/Desktop/test/reports'
save_path = '/Users/user/Desktop/test/folder'

search_terms = ['card']
search_terms = [x.lower() for x in search_terms]
Word = ''.join(search_terms)

for f in os.listdir(dirname):
    with open(os.path.join(dirname,f), "r", encoding="latin-1") as infile:
        text =  infile.read()

    if all(term in text for term in search_terms):
        print (f)
        os.path.join(save_path,f)  

3001017.txt
3003402.txt
3002866.txt
3003763.txt
3004961.txt
3003834.txt
3001986.txt
</code></pre>
<p>The search is working good itself but I want as a final operation save the .txt files that were received in the result in another folder <code>save_path</code> For that I trying to use <code>os.path.join(save_path,f)</code> but it seems that it is not working. What will be the right approach to do that?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>os.path.join</code> only <em>merges</em> strings to look like a path, and has nothing to do with saving data to a file. </p>
<p>Refer to this example which <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">uses the <code>pathlib</code> module</a></p>
<pre><code>In [1]: from pathlib import Path

In [3]: p = Path.cwd()

In [4]: p
Out[4]: PosixPath('/home/bluesmonk')

In [7]: p.stem
Out[7]: 'bluesmonk'

In [9]: p.is_dir()
Out[9]: True

In [10]: p2 = p.joinpath('foo') # path does not exist

In [11]: p2.is_dir()
Out[11]: False
</code></pre>
<p>Note that creating <code>p2</code> does not create anything in the file system.</p>
<p>Regarding how to save files, you need to specify the <em>mode</em> as a second parameter, being <code>'w'</code> the mode for <em>writing</em>. <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer">Check the documentation for more info.</a></p>
<pre><code>In [12]: with open(p.joinpath('foo.txt'), 'w') as saved_file:
    ...:     txt = 'hello world!'
             print(saved_file)
    ...:     saved_file.write(txt)
    ...:     
&lt;_io.TextIOWrapper name='/home/bluesmonk/foo.txt' mode='w' encoding='UTF-8'&gt;


In [13]: ls
 Code/       Documents/         Library/    Public/      Vagrant/
 Desktop/    Downloads/         Music/      snap/        Videos/
 foo.txt     examples.desktop   Pictures/   Templates/  'VirtualBox VMs'/

In [14]: cat foo.txt
hello world!
</code></pre>
<p>Your code thus would look like</p>
<pre><code>for f in os.listdir(dirname):
    with open(os.path.join(dirname,f), "r", encoding="latin-1") as infile:
        text =  infile.read()

    if all(term in text for term in search_terms):
        print (f)
        with open(os.path.join(save_path,f), 'w') as sf:
            sf.write(text) 
</code></pre>
<p>Note also that <code>pathlib</code> exposes <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.read_text" rel="nofollow noreferrer"><code>read_text</code></a> and <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.write_text" rel="nofollow noreferrer"><code>write_text</code></a> methods, among others.</p>
</div>
<span class="comment-copy">You need to write the file too. <code>os.path.join</code> just creates a path for you.</span>
<span class="comment-copy">and how it can be done? Because I thought 'write' is only for writing inside the files</span>
<span class="comment-copy">You are not saving the file !!! You are only changing directory !!!</span>
<span class="comment-copy">add full code and data</span>
<span class="comment-copy">If you want to simply copy the entire file, take a look at <a href="https://docs.python.org/3/library/shutil.html#shutil.copy" rel="nofollow noreferrer">docs.python.org/3/library/shutil.html#shutil.copy</a></span>
