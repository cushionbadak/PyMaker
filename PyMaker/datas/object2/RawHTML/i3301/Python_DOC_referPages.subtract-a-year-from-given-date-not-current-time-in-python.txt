<div class="post-text" itemprop="text">
<p>I have a file in which date field in <code>YYYYMMDD</code> format. I need to pick that date and product to join with another file by subtracting 12 months to get other information.</p>
<p><strong>File1</strong></p>
<pre><code>20180131,Apple
20180228,Orange
20180331,Grapes
</code></pre>
<p><strong>File2</strong></p>
<pre><code>20170131,Apple,45
20170131,Orange,20
20170228,Orange,35
20170331,Apple,25
</code></pre>
<p><strong>Output</strong></p>
<pre><code>20180131,Apple,45
20180228,Orange,35
20180331,Grapes,null
</code></pre>
<p>How to subtract 12 months or 1 year from given date(yyyymmdd) and get the answer in the same format.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>strptime</code> from the standard library to parse the date, but unfortunately there is no calendar support in the standard library so you have to use the <a href="https://dateutil.readthedocs.io/en/stable/" rel="nofollow noreferrer">dateutil</a> library to subtract the year.</p>
<pre><code>import datetime
from dateutil.relativedelta import relativedelta
d = datetime.datetime.strptime('20180131', '%Y%m%d').date()
print((d - relativedelta(years=1)).strftime('%Y%m%d')) 
</code></pre>
<p>This will print 20170131.</p>
<p>Note that if the input is e.g. 20160229, this will print out 20150228. I'm not sure exactly what the semantics of <code>relativedelta</code> are so be sure to read the docs if this is important to you.</p>
<h2>Why not timedelta?</h2>
<p>The <code>datetime.timedelta</code> is not appropriate and does not work correctly. A <code>timedelta</code> represents a duration in time, or it represents a number of days, but counter-intuitively, a year is not a duration but instead a calendrical concept. A year is either 365 or 366 days, depending on which year.</p>
<p>It becomes pretty obvious that <code>timedelta</code> will not work once you find the correct test cases:</p>
<pre>
In [1]: from datetime import date, timedelta

In [2]: date(2018, 1, 1) - timedelta(365)
Out[2]: datetime.date(2017, 1, 1)

In [3]: date(2017, 1, 1) - timedelta(365)
Out[3]: datetime.date(2016, 1, 2)
</pre>
</div>
<span class="comment-copy">What part do you not know how to do? How to use the <code>datetime</code> library or a third-party library to parse date strings? How to subtract timedeltas from datetime objects? How to represent "1 year" as a timedelta? How to format a datetime object in some particular string format?</span>
<span class="comment-copy">Thank you Abarnert for taking time to reply. I am completely new to Python, my requirement is to convert given date from string format to specific date format and then get a year old date in same format.</span>
<span class="comment-copy">I didn't ask you what your requirement is; I asked you what part of it you don't know how to do.</span>
<span class="comment-copy">@abarnert: You can't represent "1 year" as a <code>timedelta</code>.</span>
<span class="comment-copy">What do you man "there is no calendar support in the standard library"? What's wrong with <code>timedelta(years=1)</code> or <code>timedelta(months=12)</code> here?</span>
<span class="comment-copy">@abarnert: Well, the biggest thing wrong <code>timedelta(years=1)</code> or <code>timedelta(months=12)</code> is that it won't run. The other major problem is that a "year" is not actually a unit of time, and if you try to express a year as an amount of time you're just going to fail.</span>
<span class="comment-copy">What do you mean “it won’t run?” Of course it will. <a href="https://docs.python.org/3/library/datetime.html#timedelta-objects" rel="nofollow noreferrer">It’s documented</a>, and plenty of real-life code uses it. Also, a timedelta is stored as days and seconds, not just seconds, so it’s not just a time interval. For example, it won’t cause any problems with, e.g., DST. It may have a problem with leap years, but your explanation in your answer is wrong, and your comment even more so.</span>
<span class="comment-copy">@abarnert: Is there something I'm missing here? When I read the documentation, I don't see <code>years</code> or <code>months</code> listed as arguments, and when I run the code I get TypeError: 'years' is an invalid keyword argument for this function.</span>
<span class="comment-copy">@abarnert: The <code>timedelta</code> class considers 1 day = 86400 seconds, in other words, it's using <code>day</code> as a unit of time rather than a calendrical unit. You can see for yourself: <code>timedelta(0, 86400) == timedelta(1)</code>.</span>
