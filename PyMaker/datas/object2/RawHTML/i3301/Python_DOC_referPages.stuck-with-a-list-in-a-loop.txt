<div class="post-text" itemprop="text">
<p>So for a while now i've been trying to complete this exercise. The idea is to store inputs of numbers in a list, until the word 'done' is entered. Then print the minimal and maximal values of integers. And it seems i can't get it to work however many solutions i've tried, and it raised some stupid questions i would love to get answers for. So here's my best try i guess:</p>
<pre><code> while True:
  mylist=[]
  mylist=[mylist.append(input('Please enter a number'))]
  if 'done' in mylist:
    print(min(mylist[:len(mylist)-4]))
    print(max(mylist[:len(mylist)-4]))
    break
</code></pre>
<p>And unsurprisingly it doesn't work, and i've no idea why, and i've exhausted  all of my ideas to get it to work. But i have i stupid question. If i declare a list in a loop like i did it here, will the declaration make it empty again while it loops a second time? If it does, then how do i declare list and use it in a loop when Python doesn't want me to use global variables? Also i might have used 'break' here incorrectly, but it doesn't really matter, since the code doesn't go  that far, it's just reading inputs.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>store inputs of numbers in a list, until the word 'done' is entered. </p>
</blockquote>
<p>1) Create an empty list <strong>before</strong> the loop. Otherwise, you are clearing the list every iteration.<br/>
2) Stop the loop when you see "done" (use <code>break</code>). Don't append to the list unless you have some other input. It would also help to add <code>try-except</code> around the <code>int(x)</code></p>
<pre><code>numbers = []
while True:
    x = input("Enter a number: ")
    if x == "done":
        break
    numbers.append(int(x))
</code></pre>
<blockquote>
<p>Then print the minimal and maximal values of integers</p>
</blockquote>
<p><strong>Outside</strong> the loop (or before the <code>break</code>), you can print the values. You don't need any list slicing to check mins and maxes</p>
<pre><code>print("Min", min(numbers))
print("Max", max(numbers))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>If i declare a list in a loop like i did it here, will the declaration make it empty again while it loops a second time? </p>
</blockquote>
<p>Yes. The line <code>mylist=[]</code> creates a new empty list, and makes <code>mylist</code> into a name for that new empty list (forgetting whatever it used to be a name for), every time it gets executed.</p>
<blockquote>
<p>If it does, then how do i declare list and use it in a loop…</p>
</blockquote>
<p>Just do it outside the loop:</p>
<pre><code>mylist=[]
while True:
</code></pre>
<blockquote>
<p>… when Python doesn't want me to use global variables?</p>
</blockquote>
<p>The distinction is between local variables, defined inside a function body, and global variables, defined outside of any function body. Since you haven't written any function definitions at all, all of your variables are global variables anyway.</p>
<p>And, if you moved all of this inside a function, all of your variables would be local variables, whether they're inside the loop or not.</p>
<hr/>
<p>Anyway, this still isn't going to fix your code, because of a number of other problems:</p>
<ul>
<li><code>mylist.append(…)</code> modifies the list in-place, and returns <code>None</code>.</li>
<li><code>mylist=[mylist.append(…)]</code> throws away the existing list and replaces it with the useless list <code>[None]</code>.</li>
<li><code>mylist</code> is (supposed to be) a list of strings, not a string, so <code>mylist[:len(mylist)-4]</code> isn't throwing away the final 4-character string, it's throwing away the last 4 strings, whatever they are.</li>
<li><code>min</code> on a list of strings will compare them as strings, in dictionary order, not as numbers. You have to convert them to numbers if you want to compare them as numbers. But you can do this on the fly, using <code>key=float</code>. (See the <a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">Sorting HOWTO</a> for more.)</li>
</ul>
<p>While we're at it, you can simplify a few things:</p>
<ul>
<li><code>x[:len(x)-4]</code> does the same thing as <code>x[:-4]</code>.</li>
<li>But, instead of adding the new string to the list and then checking whether <code>'done'</code> is anywhere in the list, and then looping over the whole list except for the <code>done</code>, why not just check the new string?</li>
</ul>
<p>So, here's some code that does what you want:</p>
<pre><code>mylist = []
while True:
    number = input('Please enter a number')
    if number == 'done':
        print(min(mylist, key=float))
        print(max(mylist, key=float))
        break
    else:
        mylist.append(number)
</code></pre>
</div>
<span class="comment-copy">For your direct question: yes, <code>mylist=[]</code> will create a brand-new empty list, and make <code>mylist</code> a name for that empty list, every time you execute that line.</span>
<span class="comment-copy">But meanwhile, there are a ton of other problems here. First, <code>mylist.append</code> appends to <code>mylist</code> in-place and returns <code>None</code>. So, <code>mylist=[mylist.append(…)]</code> first appends to the old list, then throws that old list away and set <code>mylist</code> to the (probably useless) single-element list <code>[None]</code>.</span>
<span class="comment-copy">Thanks for the help! I feel really stupid now.</span>
<span class="comment-copy">Thanks for your information you helped me a lot!</span>
<span class="comment-copy"><code>print()</code> has a <code>key</code> param? Your link only has <code>sorted()</code></span>
<span class="comment-copy">@cricket_007 Sorry; typo; fixed. <code>min</code> and <code>max</code> have key params. Look them up in <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">the docs</a>, or, in an interactive session, <code>help(min)</code>, and it'll tell you that "The <i>key</i> argument specifies a one-argument ordering function like that used for <code>list.sort()</code>." Which isn't very helpful on its own—but once you read the Sorting HOWTO, it explains everything, which is why I linked to it.</span>
