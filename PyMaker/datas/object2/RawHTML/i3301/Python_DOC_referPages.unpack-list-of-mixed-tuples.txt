<div class="post-text" itemprop="text">
<p>I have a list of mixed tuples:</p>
<pre><code>my_list = [("Adam",1985),("Karen",1990),("anna",1986)] 
</code></pre>
<p>How to unpack it separately into two lists or tuples, one with strings and one with integers?</p>
</div>
<div class="post-text" itemprop="text">
<h2>If list schema is maintained as <code>(str, int)</code></h2>
<p>Using python's <a href="https://docs.python.org/3.3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> you can easily unpack list of tuples, without any particular regard to types:</p>
<pre><code>my_list = [("Adam",1985),("Karen",1990),("anna",1986)] 
names, years = zip(*my_list)
</code></pre>
<p>The unpacked lists are:</p>
<pre><code>('Adam', 'Karen', 'anna'), (1985, 1990, 1986)
</code></pre>
<h3>Notes on the <code>*</code> operator</h3>
<p>The <code>*</code> operator is called <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">Unpacking Argument Lists</a>, it passes the single elements of the list as argument. Suppose you have a list with 3 elements <code>my_list = [1, 2, 3]</code> ad a function with 3 parameters <code>def func(a, b, c)</code>: you can use <code>func(*my_list)</code> to call <code>func(my_list[0], my_list[1], ..., my_list[n])</code>.</p>
<h2>If list schema is shuffled</h2>
<h3>Solution using sorting, tuple by tuple</h3>
<p>Using <a href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key" rel="nofollow noreferrer"><code>functools.cmp_to_key</code></a> we can first sort the tuples and then execute the zip:</p>
<pre><code>import functools
key=functools.cmp_to_key(lambda x1, x2: 1 if isinstance(x2, str) else -1)
names, years = zip(*[sorted(t, key=key) for t in l])
</code></pre>
<p>This way the list is first sorted as:</p>
<pre><code>[['Adam', 1985], ['Karen', 1990], ['anna', 1986]]
</code></pre>
<p>And afterwards running the zip we obtain the same result:</p>
<pre><code>('Adam', 'Karen', 'anna'), (1985, 1990, 1986)
</code></pre>
<h3>Solution using groupby</h3>
<pre><code>from itertools import chain, groupby
names, years = [
    list(v) for _, v in groupby(
        sorted(chain.from_iterable(my_list), key=lambda x: str(x)),
        lambda x: isinstance(x, str))
]
</code></pre>
<h3>Solutions speed comparison on example list</h3>
<p>Running timeit on the example list we get:</p>
<p><strong>Tuple sorting:</strong></p>
<pre><code>%timeit zip(*[sorted(t, key=key) for t in my_list])
&gt;&gt;&gt; 5.2 µs ± 157 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
<p><strong>Groupby</strong></p>
<pre><code>%timeit [list(v) for _, v in groupby(sorted(chain.from_iterable(my_list), key=lambda x: str(x)), lambda x: isinstance(x, str))]
&gt;&gt;&gt; 6.83 µs ± 358 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
<h3>Solutions speed comparison on large list</h3>
<p>Running timeit on the a large list such as:</p>
<pre><code>import random
n = 100000
my_list = []
for i in range(n):
    if random.choice([True, False]):
        my_list.append((i, "Karen"))
    else:
        my_list.append(("Karen", i))
</code></pre>
<p><strong>Tuple sorting:</strong></p>
<pre><code>%timeit zip(*[sorted(t, key=key) for t in my_list])
&gt;&gt;&gt; 166 ms ± 8.99 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre>
<p><strong>Groupby</strong></p>
<pre><code>%timeit [list(v) for _, v in groupby(sorted(chain.from_iterable(my_list), key=lambda x: str(x)), lambda x: isinstance(x, str))]
&gt;&gt;&gt; 149 ms ± 2.62 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre>
<h3>Conclusions</h3>
<p>Even though on small list the first method seems to be the faster one, on larger list the groupby method appears faster.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>zip</code></p>
<pre><code>&gt;&gt;&gt; years, names = zip(*(sorted(t, key=lambda x: str(type(x))) for t in my_list))
&gt;&gt;&gt; years
(1985, 1990, 1986)
&gt;&gt;&gt; names
('Adam', 'Karen', 'anna')
&gt;&gt;&gt; 
</code></pre>
<p>Or using <code>dict</code></p>
<pre><code>&gt;&gt;&gt; d = dict(sorted(t, key=lambda x: str(type(x))) for t in my_list)
&gt;&gt;&gt; years = tuple(d.keys())
&gt;&gt;&gt; names = tuple(d.values())
&gt;&gt;&gt; 
&gt;&gt;&gt; years
(1985, 1990, 1986)
&gt;&gt;&gt; names
('Adam', 'Karen', 'anna')
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>you can convert it into dictionary and work as normal </p>
<pre><code>dict([("Adam",1985),("Karen",1990),("anna",1986)])
</code></pre>
<blockquote>
<p>{'Adam': 1985, 'Karen': 1990, 'anna': 1986}</p>
</blockquote>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/13635032/what-is-the-inverse-function-of-zip-in-python">What is the inverse function of zip in python?</a></span>
<span class="comment-copy">I believe its half a duplicate: I believe the question should be expanded to include the possibility of tuples both <code>(str, int)</code> and <code>(int, str)</code>.</span>
<span class="comment-copy">what if <code>my_list = [(1, 'a'), ('b', 2)] </code> ?</span>
<span class="comment-copy">if i want to iterate over strings or integers,how to access each item. is there any  indexing here</span>
<span class="comment-copy">Sure, suppose you want <code>"Adam"</code>: you go <code>names[0]</code>.</span>
<span class="comment-copy">@ChihebNexus That will require looping, one sec.</span>
<span class="comment-copy">@LucaCappelletti One way to do it: <code>from itertools import chain, groupby; a = [list(v) for _, v in groupby(sorted(chain.from_iterable(my_list), key=lambda x: str(x)), lambda x: isinstance(x, str))]; print(a)</code></span>
<span class="comment-copy">Can u  explain it, how it works , ?</span>
<span class="comment-copy">@Karamzov <code>sorted(t, key=lambda x: str(type(x))) for t in my_list)</code> would return a list of tuples in ordered form, that is in a form where years will always come first and the names would come next. You can skip this step if your list is already in order</span>
<span class="comment-copy">why :  <code>key=lambda x</code> not  <code>lamda x</code>  .. ?</span>
<span class="comment-copy">There is nothing called <code>lamda</code> in python. <code>lambda</code> is the correct terminology</span>
<span class="comment-copy">lol ..yes, i was referring to your function  !!</span>
<span class="comment-copy">converting dictionary is easy method , how to convert and iterate here</span>
