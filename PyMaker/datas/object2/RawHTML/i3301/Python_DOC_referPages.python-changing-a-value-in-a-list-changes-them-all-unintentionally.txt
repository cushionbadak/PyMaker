<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/240178/list-of-lists-changes-reflected-across-sublists-unexpectedly">List of lists changes reflected across sublists unexpectedly</a>
<span class="question-originals-answer-count">
                    12 answers
                </span>
</li>
</ul>
</div>
<p>I have a class:</p>
<pre><code>class Tree(object):

    def __init__(self):
        self.health = 100
</code></pre>
<p>And I use it here:</p>
<pre><code>tree_list += [Tree()] * random.randint(4, 12)
</code></pre>
<p>This makes the list contain multiple Tree() classes. The problem is that when I change 'health' in one of the items in tree_list:</p>
<pre><code>tree_list[0].health -= 25
</code></pre>
<p>It changes the 'health' value in EVERY item in tree_list. Can someone please help me figure out why it changes the value for every item instead of the item I intend to change? Any help would be appreciated. :D</p>
</div>
<div class="post-text" itemprop="text">
<p>I solved it by changing this:</p>
<pre><code>tree_list += [Tree()] * random.randint(4, 12)
</code></pre>
<p>To this:</p>
<pre><code>for a in range(random.randint(4, 12)):
    tree_list.append(Tree())
</code></pre>
<p>Probably not the best way to do it, but it works now.</p>
</div>
<span class="comment-copy">"<i>This makes the list contain multiple Tree() classes.</i>" No, it makes a list of multiple <i>objects</i>, not classes. Except it only creates a single object, then puts it in the list multiple times. All list elements refer to the same object.</span>
<span class="comment-copy">Thanks for explaining it, I didn't even realise it did that.</span>
<span class="comment-copy">This is also covered <a href="https://docs.python.org/3/faq/programming.html#why-did-changing-list-y-also-change-list-x" rel="nofollow noreferrer">in the official Python FAQ</a>. Meanwhile, the best answer on SO is to a question that isn't <i>exactly</i> the same as yours, so please let us know if it actually answers your question, or if we should add another link that isn't so list-specific.</span>
<span class="comment-copy">It's a fine way to do it.</span>
<span class="comment-copy">There's nothing wrong with your solution. The most idiomatic way to do this is probably with a list comprehension: <code>tree_list = [Tree() for _ in random.randint(4, 12)]</code>. But your code has the same effect (in fact, it's just a more explicit way to write exactly the same operations), so if it's easier for you to understand/maintain, do it that way.</span>
