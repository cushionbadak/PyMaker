<div class="post-text" itemprop="text">
<p>So lets say I have this</p>
<pre><code>Sentence = "A surprise to be sure but a welcome one"
keyword_list = ['surprise', 'welcome', 'one']

def or_maker(sentence): 
    for i in range(len(keyword_list)):
        if keywordlist[i] in Sentence:
            return keywordlist[i] or keywordlist[i + 1] or keyword_list[i + 2] or ... etc.
</code></pre>
<p>So hopefully when I call the function or_maker(Sentence)
it returns to me</p>
<pre><code>'surprise' or 'welcome' or 'one'
</code></pre>
<p>Is this possible in Python? </p>
</div>
<div class="post-text" itemprop="text">
<p>The pythonic way of saying</p>
<pre><code>return keywordlist[i] or keywordlist[i + 1] or keyword_list[i + 2] or ... etc.
</code></pre>
<p>is</p>
<pre><code>return next(filter(bool, keyword_list[i:]), None)
</code></pre>
<p>Or even slightly better as @UltraInstinct has suggested</p>
<pre><code>return next(filter(bool, keyword_list[i:-1]), keyword_list[-1])
</code></pre>
<p>Both would return the first non-empty value</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this with an explicit loop:</p>
<pre><code>result = False
for value in keywordlist[i:]:
    result = result or value
return result
</code></pre>
<p>If you want to preserve the short-circuit semantics of <code>or</code>:</p>
<pre><code>result = False
for value in keywordlist[i:]:
    result = result or value
    if result: return result
return result
</code></pre>
<p>You can also turn this into a call to <code>reduce</code>, or a recursive function instead of a loop (either of which could be written as an ugly one-liner, if that’s important to you), but both of those are probably less Pythonic.</p>
<p>But the best way to do it is probably to use <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a>:</p>
<pre><code>return any(keywordlist[i:])
</code></pre>
<p>However, note that <code>any</code> returns True if any of the values are truthy (for strings, this means non-empty), False otherwise, while a chain of <code>or</code>s will return the first truthy value if any are truthy, or the last falsely value if none are. So, if you want the actual string values, this doesn’t do the same thing.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>keyword_list = ['surprise', 'welcome', 'one']
sentence = "A surprise to be sure but a welcome one"

def or_maker(sentence): 
    for i in range(len(keyword_list)):
        if keyword_list[i] in sentence:
            returnlist = " || ".join(keyword_list)
            print(returnlist)

or_maker(sentence)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>what you are looking for is the join() function</p>
<pre><code>returnlist = " or ".join(keywordlist)
return returnlist
</code></pre>
<p>which returns a single string "surprise or welcome or one"</p>
<p>Or if you want it with the quotation marks:</p>
<pre><code>returnlist = "'" + "' or '".join(keywordlist) + "'"
return(returnlist)
</code></pre>
</div>
<span class="comment-copy">Why dont you want to return the string array and then apply the operations to the result?</span>
<span class="comment-copy">What do you expect to happen when the sentence is "A blah-blah to be sure but a welcome one"?</span>
<span class="comment-copy">The result of <code>'surprise' or 'welcome' or 'one'</code> is <code>'surprise'</code>. Is that the result you're looking for?</span>
<span class="comment-copy">Not that I don't want to do that, I am just wondering if the above problem is possible</span>
<span class="comment-copy">No that isn't what I am looking for, I am just wondering if I can return strings with operators like or in between them</span>
<span class="comment-copy">Upvoted! Although technically, exact equivalent would be: <code>next(filter(bool, keyword_list[:-1]), keyword_list[-1])</code> so that the result take an appropriate false-y (<code>0</code> vs <code>""</code> vs <code>[]</code> etc)  value when all are false-y, but then it would fail when <code>keyword_list</code> is empty.</span>
<span class="comment-copy">@UltraInstinct. Makes sense. Updated my answer</span>
<span class="comment-copy">But I want the operator or, not or as a string. Is that possible?</span>
<span class="comment-copy">At a guess you want to pass this to a testing function elsewhere, if so then  you could wrap it in an eval(), perhaps better clarifying where you want to use this result can help clarify things</span>
