<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/12218112/sum-the-second-value-of-each-tuple-in-a-list">Sum the second value of each tuple in a list</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to find total of all the integers in a tuple</p>
<pre><code>from  functools  import reduce
marks =  [("Jon" ,29 ), ("santi",35), ("anna",35)]

Total_marks = lambda x,y: x[1]

print(marks)
print (reduce(Total_marks,marks))
</code></pre>
<p>The above code can take the first value of integer, but i want to find the sum of all  the integers, how to do it using reduce in python</p>
</div>
<div class="post-text" itemprop="text">
<p>Change the definition of the adding function (there is no need to use lambda notation here):</p>
<pre><code>def total_marks(x, y): 
    return x + y[1]
</code></pre>
<p>And tell <code>reduce</code> that the initial value is a number, not a tuple, by providing the third optional parameter:</p>
<pre><code>reduce(total_marks, marks, 0)
#99
</code></pre>
<p>The same solution with lambda:</p>
<pre><code>reduce(lambda x,y: x+y[1], marks, 0)
</code></pre>
<p>And one more solution that does not use <code>reduce</code>:</p>
<pre><code>_, y = zip(*marks)
sum(y)
#99
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If using reduce is not necessary, a much more elegant solution is</p>
<pre><code>marks =  [("Jon" ,29 ), ("santi",35), ("anna",35)]
total_marks = sum(score for _, score in marks)
print(total_marks)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You would use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter(1)</code></a> to get the numbers out of the tuple, and <code>reduce</code> with <a href="https://docs.python.org/3/library/operator.html#operator.add" rel="nofollow noreferrer"><code>operator.add</code></a> to sum them</p>
<pre><code>from  functools  import reduce
from operator import itemgetter, add
marks =  [("Jon" ,29 ), ("santi",35), ("anna",35)]

print(reduce(add, map(itemgetter(1), marks)))
# 99
</code></pre>
<p>A simpler solution without <code>reduce</code> is <code>sum(mark for name, mark in marks)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can check if the first parameter (<code>x</code>) is a tuple:</p>
<pre><code>from functools import reduce
marks = [("Jon" ,29 ), ("santi",35), ("anna",35)]
new_marks = reduce(lambda x, y:(x if isinstance(x, int) else x[-1])+y[-1], marks)
assert new_marks == sum(b for _, b in marks)
print(new_marks)
</code></pre>
<p>Output:</p>
<pre><code>99
</code></pre>
</div>
<span class="comment-copy">Do you <b>have</b> to use <code>reduce</code>? <code>sum(score for name, score in marks)</code> is much more readable in my opinion.</span>
<span class="comment-copy">@LakshayGarg , sure, post it please</span>
<span class="comment-copy">As suggested in other post, you can try <code>print(reduce(lambda x,y:x+y[1], marks,0))</code> <a href="https://stackoverflow.com/a/12218359/5916727">stackoverflow.com/a/12218359/5916727</a></span>
<span class="comment-copy">Wonderful... ...</span>
<span class="comment-copy">this is easy and can  u post the full code</span>
<span class="comment-copy">@Karamzov I have updated the code</span>
<span class="comment-copy">How does the sum and for works here, how they knew to read the values ?</span>
<span class="comment-copy"><code>sum</code> is a builtin function is python which can be used to sum iterables (lists, tuples, generators etc). The interesting part here is <code>score for _, score in marks</code>. This is what is called a list comprehension. A comment would be too short to explain what it does, please see this <a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/" rel="nofollow noreferrer">blog</a>. Googling "list comprehensions in python" will help too.</span>
<span class="comment-copy">ok ... helpful ....</span>
<span class="comment-copy">Or even <code>sum(map(itemgetter(1), marks))</code> for the simpler solution.</span>
<span class="comment-copy">thanks patrick....</span>
<span class="comment-copy">Why the downvotes?</span>
<span class="comment-copy">I feel this is an overly complicated use of <code>reduce</code> when you could instead provide the initial value: <code>reduce(lambda x, y: x + y[1], marks, 0)</code>. What happens otherwise is that <code>reduce</code> takes the first value as accumulator, which adds the unecessary complexity.</span>
<span class="comment-copy">good one.. thank you</span>
<span class="comment-copy">@Karamzov Glad to help!</span>
