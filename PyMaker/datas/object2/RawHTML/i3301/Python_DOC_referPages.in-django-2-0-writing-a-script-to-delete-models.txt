<div class="post-text" itemprop="text">
<p>I have tried every answer on the (<a href="https://stackoverflow.com/questions/8047204/django-script-to-access-model-objects-without-using-manage-py-shell">Django script to access model objects without using manage.py shell</a>) stack question, and I always get error "no module name 'project_name'".
My project name is called snapbackend.</p>
<p>I have an <code>__init__.py</code> setup. I know I can write django command, but that is somewhat overkill to run one function.</p>
<p>I am using django 2.0, and I wanted to write a script to delete old models.</p>
<pre><code>import os
os.environ["DJANGO_SETTINGS_MODULE"] = "snapbackend.settings.production"
import django

django.setup()
import snapbackend
from snapbackend.models import deleteCapsuleModels

deleteCapsuleModels()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is because your module isn't installed, and it is not being run from the directory which it is inside of.</p>
<p>If you are using setuptools (a <code>setup.py</code> file), then the proper way to solve this is to symlink your project into your site packages with <code>python setup.py develop</code>. This will make your module available throughout your project.</p>
<p>If you aren't using setuptools then this is a bit trickier. If you are able to choose your current working directory when running the script, you can solve this problem by executing <code>cd YOUR_PROJECT_DIRECTORY</code> before running your script.</p>
<p>In cases where you can't mess with the current working directory, you should se the <code>PYTHONPATH</code> environment variable to the root of your project. This environment variable is used to add additional paths for Python to find modules within.</p>
<p>It's important that you don't use <code>PATH</code> or <code>sys.path</code> for security reasons. Specifically, you don't want to accidentally introdduce any executables into your system which you are unaware of.</p>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is an issue with you <a href="https://docs.python.org/3/using/cmdline.html?highlight=pythonpath#envvar-PYTHONPATH" rel="nofollow noreferrer"><code>PYTHON_PATH</code></a> which seems simple but is often more tricky to figure out. </p>
<p>Python cannot find your django root so you need to tell python where it can find that module (not sure why it doesn't just work) but you can do this when running the script:</p>
<pre><code>PYTHONPATH=../../. python your_script.py
</code></pre>
<p>Or the fly with:</p>
<pre><code>import sys
sys.path.append('../../.')
</code></pre>
<p>In your case:</p>
<pre><code>import os
import sys
sys.path.append('../path/to/snapbackend/.')
os.environ["DJANGO_SETTINGS_MODULE"] = "snapbackend.settings.production"
import django
</code></pre>
<p>The directory would depend on the relative path to your django root</p>
</div>
<span class="comment-copy">Can somone inform me why I was voted down, so I will understand what not to do?</span>
<span class="comment-copy">Using ` sys.path ` here is dangerous because it could unintentionally add additional executables into the system path.</span>
