<div class="post-text" itemprop="text">
<blockquote>
<p>I'm new to python, and I can't figure out any strategy or existing
  module that would solve this problem.  I would like to make a simple
  program that would return if a given day in the future would be a day
  off or not based on the following schedule (actual schedule for this
  week of July 2018):</p>
<pre><code>Week 1: 1:Sun:off 2:Mon   3:Tues   4:Wed:off   5:Thur   6:Fri   7:Sat

Week 2: 8:Sun:  9:Mon:off 10:Tues  11:Wed     12:Thur  13:Fri  14:Sat:off

Week 3:15:Sun:off  16:Mon   17:Tues  18:Wed:off  19:Thur  20:Fri  21:Sat 

Week 4:22:Sun 23:Mon:off   24:Tues  25:Wed     26:Thur  27:Fri  28:Sat:off
</code></pre>
</blockquote>
<pre><code>import datetime

sched1 = {'Mon':'working','Tues':'working','Wed':'off','Thur':'working','Fri':'working','Sat':'working','Sun':'off'}
sched2 = {'Mon':'off','Tues':'working','Wed':'working','Thur':'working','Fri':'working','Sat':'off','Sun':'working'}

pickdate1 = int(input("Enter a date in the year (YYYY)): "))
pickdate2 = int(input("Enter a date in the year (MM): "))
pickdate3 = int(input("Enter a date in the year (DD): "))


date = datetime.date(pickdate1,pickdate2,pickdate3)
weekno = datetime.date(pickdate1,pickdate2,pickdate3).isocalendar()[1]
weekday = datetime.date.isoweekday(date)

if weekno % 2 == 0:
    print (sched2[weekday])

elif weekno % 2 != 0:
    print (sched1[weekday])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This produces a list of weekly schedules. Each weekly schedule is a list starting from Monday and going through Sunday. The choice of monday through sunday is just to align with Python's order of day of week in the <a href="https://docs.python.org/3/library/datetime.html#datetime.date.weekday" rel="nofollow noreferrer">datetime</a> and <a href="https://docs.python.org/3/library/calendar.html" rel="nofollow noreferrer">calendar</a> modules.</p>
<pre><code>weeks = []
num_weeks = 4 # how many weeks to schedule
days_off = [
    (2, 6),   # sunday and wednesday
    (0, 5),   # monday and saturday
]

for week in range(num_weeks):
    days_off_this_week = days_off[week % len(days_off)]
    weeks.append([bool(i not in days_off_this_week) for i in range(7)])
</code></pre>
<p>The key here is using the <code>%</code> operator (<code>week % len(days_off)</code>), rather than <code>//</code> to determine which week's schedule we should use. Because we use <code>len(days_off)</code> we can make our 2 week rotation a 3 or 4 week rotation by simply adding an entry to <code>days_off</code>, and the calendar will still work.</p>
<p>Storing the day of week as an integer and the on/off as a boolean affords us a lot of flexibility in how we later organize this information for display. We can print schedules easily using the calendar module:</p>
<pre><code>import calendar
from collections import OrderedDict
cal = calendar.Calendar(calendar.SUNDAY)

for week in weeks:
    print(OrderedDict([(calendar.day_abbr[i], ("On" if week[i] else "Off")) for i in cal.iterweekdays()]))
</code></pre>
<p>To change the first weekday per week in our display, we just pass a different day of the week to <code>calendar.Calendar</code>, (e.g. <code>calendar.Calendar(calendar.MONDAY)</code>).</p>
<p>This doesn't factor in the actual date, but I'm happy to add that if it's useful.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import datetime

sched1 = {'Mon':'working','Tues':'working','Wed':'off','Thur':'working','Fri':'working','Sat':'working','Sun':'off'}
sched2 = {'Mon':'off','Tues':'working','Wed':'working','Thur':'working','Fri':'working','Sat':'off','Sun':'working'}

pickdate1 = int(input("Enter a date in the year (YYYY)): "))
pickdate2 = int(input("Enter a date in the year (MM): "))
pickdate3 = int(input("Enter a date in the year (DD): "))


date = datetime.date(pickdate1,pickdate2,pickdate3)
weekno = datetime.date(pickdate1,pickdate2,pickdate3).isocalendar()[1]
weekday = datetime.date.isoweekday(date)


if weekno % 2 == 0:
    if weekday == 1:
        print ("You are: %s" % (sched2['Mon']))
    elif weekday == 2:
        print ("You are: %s" % (sched2['Tues']))
    elif weekday == 3:
        print ("You are: %s" % (sched2['Wed']))
    elif weekday == 4:
        print ("You are: %s" %  (sched2['Thur']))
    elif weekday == 5:
        print ("You are: %s" %  (sched2['Fri']))
    elif weekday == 6:
        print ("You are: %s" %  (sched2['Sat']))
    elif weekday == 7:
        print ("You are: %s" %  (sched2['Sun']))
elif weekno % 2 != 0:
    if weekday == 1:
        print ("You are: %s" %  (sched1['Mon']))
    elif weekday == 2:
        print ("You are: %s" %  (sched1['Tues']))
    elif weekday == 3:
        print ("You are: %s" %  (sched1['Wed']))
    elif weekday == 4:
        print ("You are: %s" %  (sched1['Thur']))
    elif weekday == 5:
        print ("You are: %s" %  (sched1['Fri']))
    elif weekday == 6:
        print ("You are: %s" %  (sched1['Sat']))
    elif weekday == 7:
        print ("You are: %s" %  (sched1['Sun']))
</code></pre>
</div>
<span class="comment-copy">These data are in a list? If yes, what exactly are the elements?</span>
<span class="comment-copy">It's not clear to me from the sample what the pattern is. Could you describe it? Also please post any code you've written to try to solve this problem.</span>
<span class="comment-copy">looks like it alternates between sun/wed and mon/sat off</span>
<span class="comment-copy">what happens if it goes to 29/30/31 (i.e., a new month?</span>
<span class="comment-copy">Scott mentioned the pattern.  I have no code yet because I can't fathom how to begin.  The pattern would continue  with every other wednesday off, every other monday off, and every other Sat/Sun off with the pattern mentioned in the example.</span>
