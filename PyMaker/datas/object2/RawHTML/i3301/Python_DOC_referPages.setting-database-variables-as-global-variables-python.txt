<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/13034496/using-global-variables-between-files">Using global variables between files?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to figure out global variables in python, and while there are many forum posts and examples, none of them really match what I need. Here is the problem: I am using a MySQL database to receive 11 different variables. These variables are used for control purposes, such as the opening and closing of valves at specific times and days. I need these variables to be global and they must be able to be used in many other files. At the moment, these variables only exist within the file that reads the database and assigns the variables a value.</p>
<p>Here's my question: </p>
<p>When I import the variables from the database, can I simply assign them to be global in that script? Like this:</p>
<pre><code>cursor.execute ("select variable1,variable2,....variableN from transaction where TransactionNumber=(select MAX(TransactionNumber) from transaction)")

readfromdb= cursor.fetchone() 

variable1,variable2,.....variableN=list(readfromdb)

global variable1,variable2...variableN. 
</code></pre>
<p>And then import this file in each other file I'm using?</p>
<p>I have tried doing this method, but receive the following error:</p>
<pre><code>SyntaxError: name 'TransactionNumber' is assigned to before global declaration
</code></pre>
<p>I am open to other suggestions to make this process more efficient/streamlined. But my only requirement is that the script that is currently reading the database MUST not change. It is a fundamental requirement that it continues reading and assigning the database variables. I won't bore you with details, but that script is vital to checking the data we receive from the database and making sure that it is correctly formatted for use since we will be receiving data from another computer. </p>
</div>
<div class="post-text" itemprop="text">
<p>The message has your answer in it.  Just move the <code>global</code> statement above the first use of any of the variables.</p>
<p>You'll have to repeat those <code>global</code> declarations at the top of any function that needs to assign new values to any of those names.  </p>
<p>Juanpa Arrivillaga makes and excellent point.  To share across module boundaries, you'll need to use module names to specify exactly which module they are defined in.  The <code>global</code> statement really only helps share names among functions and initialization code in a single module.</p>
<p>If "<code>source1.py</code>" creates a module-level ("global") variable or function <code>name1</code>, and you want to use it in "<code>source2.py</code>", you'll have to <code>import source1</code> in the <code>source2.py</code> file and then refer to the variable/function as `source1.name1'.</p>
<p>At this point, I <em>really</em> recommend looking at a dictionary or some type of custom class or <code>namedtuple</code> object.  You can solve this with globals, but it's going to end up looking like a dog walking on two legs.  It's impressive not because the dog does it well, but because the dog does it at all.</p>
<p>I'd use either an object, dictionary or <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow noreferrer">named tuple</a> to hold those fields, so that the whole mess could be passed as an argument to functions.  Global variables get messy, particularly in code that gets updated frequently.  This gets rid of all of those <code>global</code> statements.  The class type for an object or the field list for a named tuple becomes a single point of definition that the whole module can see.</p>
</div>
<span class="comment-copy">Maybe if you do it <code>global variable1,variable2,.....variableN=list(readfromdb)</code></span>
<span class="comment-copy">Why don't you save the values of the variables to a file, which can then be read by other programs. Then all you need to do is update the values in the file when you need to.</span>
<span class="comment-copy">Your <code>global</code> directive is completely pointless if it is at the global scope. You could fix the SyntaxError by putting that statement at the top, but again, <b>it is totally pointless</b>. Python does not support true global variables, only <i>module global</i>.</span>
<span class="comment-copy">So, as the <a href="https://docs.python.org/3.7/faq/programming.html#how-do-i-share-global-variables-across-modules" rel="nofollow noreferrer">Python FAQ notes</a> the conventional way to do this is to move all your desired global variables to their own modules, e.g. <code>config.py</code> and then in all the other files where you need them, simply <code>import config</code> and use <code>config.some_global_variable_i_need</code> wherever you need them.</span>
<span class="comment-copy">This would solve the syntax error but not the problem of sharing globals across files. Python doesn't have true global variables (a feature, not a bug), so usually, you just put them in their own <code>cfg</code> module and <code>import cfg</code> wherever you need them</span>
<span class="comment-copy">@juanpa.arrivillaga Quite right...missed the "...and copy to every other file" part.  Updating...</span>
<span class="comment-copy">But more importantly, <code>global</code> is totally pointless <i>in the global scope</i>.</span>
<span class="comment-copy">@juanpa.arrivillaga Not totally.  In a module that uses globals to pass information between functions and/or initialization code, that can be considered "documentation" that those names will be used. Even so, OP wouldn't have got that message if the code was at "file level". So, functions are involved.</span>
<span class="comment-copy">@juanpa.arrivillaga And yes, that last bit (no error message at module level) does support your point.  At the module level, a global statement is <i>at best</i> a comment; and at worst a comment that probably wont be removed by any compiler.</span>
