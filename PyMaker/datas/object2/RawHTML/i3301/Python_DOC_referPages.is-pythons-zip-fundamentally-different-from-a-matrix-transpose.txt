<div class="post-text" itemprop="text">
<p>As I understand it, pythons zip takes a series of iterables and then returns an iterator to tuples containing one element from each iterator, such that the first tuple would contain the first element from each iterator. For example:</p>
<pre><code>A = [1, 2, 3]
B = [4, 5, 6]
for a, b in zip(A, B):
    print(f"{a}, {b}")
</code></pre>
<p>Prints out:</p>
<pre><code>1, 4
2, 5
3, 6
</code></pre>
<p>Transposing A and B separately then joining A and B results in that exact matrix. Is there any cases where the two operations vary in results or are they basically the same thing?</p>
<p>Edit:
*iterables</p>
</div>
<div class="post-text" itemprop="text">
<p>In the cases where there is an operation you can describe the operation as a matrix transpose, <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip(*matrix)</code></a> (or, in your example, with the rows stored as lists in separate variables rather than in a list of lists, <code>zip(a, b)</code>) is that matrix transpose. (And that's true even if <code>matrix</code> or <code>a</code> and <code>b</code> are iterators or some kind of virtual or lazy sequence—it basically transposes them as lazily as possible.)</p>
<p>However, it is slightly more general.</p>
<p>For example, if you have unequal lists, you can still <code>zip</code> them (the <code>zip</code> will be truncated to the length of the shortest list), and that isn't really a "matrix transpose" in any meaningful sense. </p>
<p>You can even use it with infinite-length iterators: <code>zip(itertools.count(), a)</code> will give you the same thing as <code>enumerate(a)</code>, without you having to write <code>zip(itertools.islice(itertools.count(), len(a)), a)</code>.</p>
<p>Also, notice the <code>zip(*[iter(s)]*n)</code> chunking idiom in the docs. Trying to think of that in terms of transposing a matrix of iterators is just going to confuse rather than enlighten, unless you already intuitively understand the idiom on its own terms.</p>
</div>
<span class="comment-copy">No, in fact it is frequently used to calculate the transpose.</span>
<span class="comment-copy">IIRC, somewhere in either the tutorial or the FAQ, it explicitly refers to <code>zip(*mat)</code> as transposing a list-of-lists matrix.</span>
<span class="comment-copy">It is only fundamentally different insofar as python lists (of lists) are not fundamentally the same as matricies. This can be seen in the handling of different length lists. The <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">docs</a> show a code snippet that fully emulates the exact behavior of zip, showing how it does and does not operate.</span>
<span class="comment-copy">By the way, <code>zip</code> takes a series of <i>iterables</i>. They don't have to be iterators—and, in fact, in your example, they aren't (but you still get an iterator back). This distinction can be confusing when you're first getting used to the way everything in Python is built around iteration, but it's important to get a handle on.</span>
