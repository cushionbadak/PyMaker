<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>def solve(a, b):
    return map(
        lambda t: sum([x &gt; y for x, y in zip(*t)]), 
        ((a, b), (b, a))
        )
</code></pre>
<p>where <code>a</code> and <code>b</code> are lists.</p>
<p>I need help with understanding above code. Also, how can we write above code in a simpler way?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your function takes 2 iterables and counts the number of times, by index, the number from one iterable is greater than the other. It then does the same operation with lists in the opposite order.</p>
<p>It's far easier to show an example:</p>
<pre><code>def solve(a, b):
    return map(lambda t: sum([x &gt; y for x, y in zip(*t)]), ((a, b), (b, a)))

L1 = [1, 2, 3, 1]
L2 = [4, 5, 1, 5]

res = list(solve(L1, L2))  # [1, 3]
</code></pre>
<h3>sum with bool</h3>
<p><code>res[0] = 1</code> because 1 &lt; 4, 2 &lt; 5, <strong>3 &gt; 1</strong>, 1 &lt; 5.</p>
<p><code>res[1] = 3</code> because <strong>4 &gt; 1</strong>, <strong>5 &gt; 2</strong>, 1 &lt; 3, <strong>5 &gt; 1</strong>.</p>
<p>Note that <code>sum</code> with an iterable of Boolean values consider <code>True</code> as <code>1</code> and <code>False</code> as <code>0</code>. This is natural because <code>bool</code> is implemented as a subclass of <code>int</code>. The bold values above are considered <code>True</code> and therefore a count of such instances will be the result of a <code>sum</code> over those values.</p>
<h3>list comprehension</h3>
<p>A list comprehension is easier to comprehend:</p>
<pre><code>res = [sum(i &gt; j for i, j in zip(*L)) for L in ((L1, L2), (L2, L1))]
</code></pre>
<h3>generator expression</h3>
<p>In fact, since <code>map</code> returns a lazy iterator, <code>solve</code> more closely resembles a generator expression, which should perform better than the <code>map</code> variant:</p>
<pre><code>res = (sum(i &gt; j for i, j in zip(*L)) for L in ((L1, L2), (L2, L1)))
</code></pre>
<p>You can then iterate the generator expression:</p>
<pre><code>for item in res:
    print(item)
</code></pre>
<p>Or exhaust the generator via a function such as <code>list</code>:</p>
<pre><code>res_list = list(res)
</code></pre>
</div>
<span class="comment-copy">The code seems obscure by design. Is this homework?</span>
<span class="comment-copy">@John as far as obscure goes this isn't too bad, running it a few times with different inputs OP may be able to figure out what it does</span>
<span class="comment-copy">documentation for <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions" rel="nofollow noreferrer">lambdas</a>; <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">argument unpacking</a></span>
<span class="comment-copy">"Need help" is not a problem specification?  How far did you get with your experimentation?  Specifically where don't you follow the execution?  Where are the supporting debugging traces?</span>
<span class="comment-copy">If this is Python 3 it returns a map object. To see what it does, it might help to put the output in <code>tuple()</code> or <code>list()</code></span>
<span class="comment-copy">appreciate the solution,however i am still not able to understand how sum evaluates res[0] = 1 because 1 &lt; 4, 2 &lt; 5, 3 &gt; 1, 1 &lt; 5.  res[1] = 3 because 4 &gt; 1, 5 &gt; 2, 1 &lt; 3, 5 &gt; 1.</span>
<span class="comment-copy">@PrashantGupta, see update.</span>
