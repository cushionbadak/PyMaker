<div class="post-text" itemprop="text">
<pre><code>import pickle

class NoClass():
    def __init__(self, name, level, cls, time_played):
        self.name = name
        self.level = level
        self.cls = cls
        self.time_played = time_played

def Write_char_file(registered_username):
    avatar = NoClass('',1,'',0) #--------i am trying to pickle and write this
    a = str('Characters\%s.txt' % registered_username) #---- the saving file
    f = open(a, 'wb')
    f.write(pickle.dumps(avatar))
    f.close()

def Asign_to_slot(char_lst):
    pass

Asign_to_slot(Write_char_file('my_name'))
</code></pre>
<blockquote>
<p>When trying to run this in bge it raises that error
      BUT when i run it with python IDLE there isn't a problem
      and i manage to write the pickled class in the file
      though i know classes usually can't be pickled
      then i even manage to open the file, unpickle it and print
      the class' attributes</p>
</blockquote>
<pre><code>"_pickle.PicklingError: Can't pickle &lt;class '__main__.NoClass'&gt;: attribute lookup NoClass on __main__ failed"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As this works when run in blender and only fails in the game engine, I would assume that this relates to an optimisation made in the game engines python binding.</p>
<p>Following the <a href="https://docs.python.org/3/library/pickle.html#handling-stateful-objects" rel="nofollow noreferrer">handling stateful objects</a> example and adding a custom <code>__getstate__</code> also fails, indicating that the game engine probably implements custom <a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow noreferrer"><code>__slots__</code></a> to only provide a minimal feature set.</p>
<p>The solution would appear to be pickling the objects <code>__dict__</code> directly, you would then also unpickle to the new instances <code>__dict__</code>.</p>
<pre><code>f.write(pickle.dumps(avatar.__dict__))
</code></pre>
</div>
<span class="comment-copy">Dunno much about <code>bge</code>, but I can verify that this code works with Cpython (Python2 and Python3) out of the box. Also not sure why you got a downvote. Seems like a good question!</span>
<span class="comment-copy">Thank you so much! It is working well as long as I treat it like a dictionary when unpickled. One last question -  is it possible to reverse this process (dict to class)? If not how do I access the class methods after unpickling? Thank you once again!</span>
<span class="comment-copy">Going by the handle stateful example, <code>newavatar = NoClass() newavatar.__dict__.update(unpickled_dict)</code></span>
