<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer">Python's docs</a>, <code>reversed()</code> uses <code>__getitem__</code> and <code>__len__</code> if <code>__reversed__</code> is not implemented.</p>
<p>I've encountered a weird behavior and failed to explain it:</p>
<pre><code>&gt;&gt;&gt; class A(dict):
...     pass
...
&gt;&gt;&gt; reversed(A())
Traceback (most recent call last):
    ...
TypeError: 'A' object is not reversible

&gt;&gt;&gt; class B(dict):
...     def __getitem__(self, key):
...         return super().__getitem__(key)
...     def __len__(self):
...         return super().__len__()
...
&gt;&gt;&gt; reversed(B())
Traceback (most recent call last):
    ...
TypeError: 'B' object is not reversible

&gt;&gt;&gt; class C:
...     def __getitem__(self, key):
...         return "item"
...     def __len__(self):
...         return 1
...
&gt;&gt;&gt; reversed(C())
&lt;reversed object at 0x00000000022BB9B0&gt;
</code></pre>
<p>Although calling <code>reversed()</code> on mapping types makes no sense, how does it know it's a mapping? Does it internally check <code>isinstance(inst, dict)</code>? Does it check for any general mapping like <code>collections.abc.Mapping</code>? Is there any way to override this behavior without implementing <code>__reversed__</code>?</p>
<p>I thought it might be due to <code>dict</code> implementing a <code>__reversed__</code> that throws a <code>TypeError</code>, or one that equals <code>None</code> much like how you disable <code>__hash__</code>, but <code>dict.__reversed__</code> turned out empty with <code>AttributeError</code> thrown.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, there's a check for <code>dict</code> type in <a href="https://github.com/python/cpython/blob/master/Objects/abstract.c#L1508" rel="noreferrer"><code>PySequence_Check</code></a> <a href="https://github.com/python/cpython/blob/55edd0c185ad2d895b5d73e47d67049bc156b654/Objects/enumobject.c#L294" rel="noreferrer">used by <code>reversed</code></a>.</p>
<pre><code>// cpython/Objects/enumobject.c
if (!PySequence_Check(seq)) {
    PyErr_Format(PyExc_TypeError,
                 "'%.200s' object is not reversible",
                 Py_TYPE(seq)-&gt;tp_name);
    return NULL;
}


// cpython/Objects/abstract.c

int
PySequence_Check(PyObject *s)
{
    if (PyDict_Check(s))
        return 0;
    return s != NULL &amp;&amp; s-&gt;ob_type-&gt;tp_as_sequence &amp;&amp;
        s-&gt;ob_type-&gt;tp_as_sequence-&gt;sq_item != NULL;
}
</code></pre>
</div>
<span class="comment-copy">I've actually searched for the C implementation, but never thought of looking inside <code>enumobject.c</code>. Thank you for that. Any tips for finding builtin functions scattered in the source code?</span>
<span class="comment-copy">@Bharel Builtins are mostly present in <a href="https://github.com/python/cpython/blob/master/Python/bltinmodule.c" rel="nofollow noreferrer">Python/bltinmodule.c</a>, there you can do a basic search and go ahead from there. For this case you can see that <code>reversed</code> points to <code>PyReversed_Type</code> and that is present in <code>enumobject.c</code>.</span>
<span class="comment-copy">Thank you for that! Last but not least, I'm not sure if you would know, but why would they check specifically for <code>dict</code> and not just make <code>dict</code> set <code>__reversed__</code> to <code>None</code>? It seems like a hacky solution that offers no optimization (as lookup for the dunder is done beforehand) .</span>
<span class="comment-copy">@Bharel I think it's a basic way to differentiate between a mapping and sequence, with <code>dict</code> check they are sure we have a subclass of <code>dict</code> and that case can be handled. In general the chances of defining a custom mapping type are lesser than inheriting from dict and modifying some methods there. Hence, for a dict it will be much common to see <code>KeyError</code>s because of people trying to reverse iterate it.</span>
<span class="comment-copy">@Bharel C-API docs for <a href="https://docs.python.org/3/c-api/sequence.html#sequence-protocol" rel="nofollow noreferrer"><code>PySequence_Check</code></a> say: Note that it returns 1 for Python classes with a <code>__getitem__()</code> method unless they are <code>dict</code> subclasses since in general case it is impossible to determine what the type of keys it supports. This function always succeeds.</span>
