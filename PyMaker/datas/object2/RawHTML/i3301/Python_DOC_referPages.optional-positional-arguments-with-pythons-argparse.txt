<div class="post-text" itemprop="text">
<p>Trying to parse optional positional arguments I ran into following issue:</p>
<p>Example:</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('infile')
parser.add_argument('outfile', nargs='?')
parser.add_argument('-v', action='store_true')

print(parser.parse_args())
</code></pre>
<p>Output:</p>
<pre><code>$ ./x.py -v in out
Namespace(infile='in', outfile='out', v=True)

$ ./x.py in out -v
Namespace(infile='in', outfile='out', v=True)

$ ./x.py in -v out
usage: x.py [-h] [-v] infile [outfile]
x.py: error: unrecognized arguments: out
</code></pre>
<p>Why is the third program invocation not accepted? Is this a restriction of argparse?</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a limitation of argparse—but one that's partially lifted in 3.7.</p>
<p>Unix tools generally don't claim to support intermixing of options and arguments, even though they often do. The problem is that combining it with some other features, like subcommands, leads to ambiguity. So, typically, libraries that support any of those features punt on the problem and don't allow intermixing. Or they do something kind of hacky—allowing options at the end, at the start, and in certain hard-to-predict cases but not others in the middle.</p>
<p>That's what <code>argparse</code> originally did. But 3.7 adds <a href="https://docs.python.org/3/library/argparse.html#intermixed-parsing" rel="nofollow noreferrer">Intermixed parsing</a>.</p>
<p>You have to manually call <code>parse_intermixed_args</code> instead of <code>parse_args</code>.</p>
<p>And if you try to use this with any of the features it doesn't go well with, you'll get an exception (even if there's no ambiguity for the particular set of args you pass—which should make it easier to debug).</p>
<p>But otherwise, it'll work as expected: options (together with their values, of course) can be freely mixed with positional arguments anywhere in the command line.</p>
<hr/>
<p>Unfortunately, I don't know of a drop-in backport on PyPI to get 3.7 <code>argparse</code> in earlier versions; the semi-official <a href="https://pypi.org/project/argparse/" rel="nofollow noreferrer"><code>argparse</code></a> backport is mainly for pre-2.7/3.2 versions that don't have it at all, and only backports the 3.4 version.</p>
</div>
<span class="comment-copy">I see, it's called intermixed parsing. Good to know, thanks. I just install Python 3.7 and it's working smoothly there.</span>
<span class="comment-copy">The <code>argparse.py</code> file from a 3.7 repository can be used with earlier Py3 distributions.  Just copy it to your own directory, possibly renaming, and import.</span>
<span class="comment-copy">@hpaulj How far back does that work? (Even if it requires, say, 3.4, that's probably not an impediment to too many people, but it would be great if it was known to work all the way back to 3.1 or 3.0.)</span>
<span class="comment-copy">I don't know.  I know there's a <code>yield from</code> line in the Py3 version that prevents use under Py2.  I don't recall if there are any other glitches.  I only have 3.6 installed so can't test it further.</span>
