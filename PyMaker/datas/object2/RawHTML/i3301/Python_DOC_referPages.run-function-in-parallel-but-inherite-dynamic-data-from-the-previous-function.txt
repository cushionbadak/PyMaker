<div class="post-text" itemprop="text">
<p>I'm trying to run multiple functions simultaneously:</p>
<p>-or so called functions because they belong to a class:</p>
<pre><code>from sh import tail
data = {}
class my_Class():
    def __init__(self):
        """Nothing to declare for initializing"""
    def get_data(self, filepath):
        """I'm trying to import the data from several files"""
        for line in tail("-f", "-n 1", filepath, _iter=True):
            data[filepath] = line
            print(data)
my_Class().get_data("path/to/file") #call 1
my_Class().get_data("path/to/another/file") #call 2
# ... 14 similar calls
</code></pre>
<p>I want each call to append it's data to the dictionary. And so, when I call:</p>
<pre><code>my_Class().get_data("path/to/file") #call 1
my_Class().get_data("path/to/another/file") #call 2
# ... 14 similar calls
</code></pre>
<p>The result should print:</p>
<pre><code>#1 {'filepath1' : line}
#2 {'filepath1' : line, 'filepath2' : line}
#3 {'filepath1' : line, 'filepath2' : line, 'filepath3' : line}
# ... 13 more
</code></pre>
<p>At the same time I want the content of dictionary data{...} to keep changing dynamically; because of the data in the files is flexible. For example:</p>
<pre><code>#1 {'filepath1' : line}
#2 {'filepath1' : last_line_in_the_file}, 'filepath2' : line}
#3 {'filepath1' : last_line_in_the_file, 'filepath2' : last_line_in_the_file, 'filepath3' : line}
# ... 13 more
</code></pre>
<p>I've already checked these posts: but it doesn't do what I ask; <a href="https://stackoverflow.com/questions/7207309/python-how-can-i-run-python-functions-in-parallel">Python: How can I run python functions in parallel?</a>, <a href="https://stackoverflow.com/questions/20548628/how-to-do-parallel-programming-in-python">How to do parallel programming in Python</a>
Thank you! Please tell me if something sounds obscure</p>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you're asking for two things here:</p>
<ol>
<li>How to run tasks in parallel, and</li>
<li>How to share (mutable) values between those tasks.</li>
</ol>
<hr/>
<p>For the first one, the answer is, as you suspected, threads. For some programs, that isn't the answer, because they're spending most of their time doing heavy CPU computation in Python, or because you need thousands of tasks rather than a handful. But here, just run each one as a thread.</p>
<p>Instead of this:</p>
<pre><code>my_Class().get_data("path/to/file") #call 1
my_Class().get_data("path/to/another/file") #call 2
</code></pre>
<p>… you create your threads:</p>
<pre><code>t1 = threading.Thread(target=my_Class().get_data, args=
</code></pre>
<p>("path/to/file",))
    t2 = threading.Thread(target=my_Class().get_data, args=
("path/to/another/file",))</p>
<p>… then start them:</p>
<pre><code>t1.start()
t2.start()
</code></pre>
<p>… then wait for them all to finish (which, in this case, will obviously take forever, so you could simplify things here…):</p>
<pre><code>t1.join()
t2.join()
</code></pre>
<hr/>
<p>Now, how do you share mutable data between threads?</p>
<p>To start with, you can just access and mutate the same values from the different threads. But in general, you'll want to put a lock around each value, unless you know that you don't need one.</p>
<p>If you only care about CPython on Windows, macOS, Linux, and BSD, inserting a string value with a string key into a dict object is one of those things that doesn't need a lock. And <code>print</code>ing to <code>stdout</code> is another one. And those are the only things you're sharing. So, you actually don't need any locks here; things will just work.</p>
<p>But, since you probably didn't know that dicts were safe in this way, let's see how you'd use a lock.</p>
<pre><code>data = {}
data_lock = threading.Lock()

# etc.

def get_data(self, filepath):
    """I'm trying to import the data from several files"""
    for line in tail("-f", "-n 1", filepath, _iter=True):
        with data_lock:
            data[filepath] = line
            print(data)
</code></pre>
<p>That's all there is to it.</p>
<p>Things can get a bit more complicated. For example, you don't really need to hold the lock for as long as you're doing here. If you had 30 threads, there'd be a good chance that one of them is trying to grab the lock to add a new value, while another thread had already made a string out of <code>data</code>, and was taking its time printing that string (printing to <code>stdout</code> is pretty slow), but hadn't released the lock yet. If so, you could get a bit more parallelism by breaking things down:</p>
<pre><code>def get_data(self, filepath):
    """I'm trying to import the data from several files"""
    for line in tail("-f", "-n 1", filepath, _iter=True):
        with data_lock:
            data[filepath] = line
        with data_lock:
            datastr = str(data)
        print(datastr)
</code></pre>
<p>But that's really as complicated as it gets. The hard part about threading is when you have to compose separate locks because you have separate data that's getting passed around between threads and so on. For simple cases like this, it's actually pretty simple.</p>
</div>
<span class="comment-copy">If the functions are running in parallel, at the same time, what does "inherit from the previous function" mean? What's the previous function? And how can you inherit its data when it hasn't finished producing that data yet?</span>
<span class="comment-copy">@abarnert Inherit from the pervious function; means that in the previous call starting from #2. i.e: call #2 will inherit data from #1 call. And so #2 will print `{<b>'filepath1' : line</b>, 'filepath2' : line}. The character marked in bold are inherited in the #2 call from #1 call. And so on, for 14 calls. As for how can I inherite if the function have not finished <b>processing</b>. The function only reads the data from a file, and tail make sure it gets the most recent data.</span>
<span class="comment-copy">Exactly what I was trying to do, thank you very much &lt;3 !! I needed the 'Threading', but didn't know how to use it in code. As for the lock thing; Good to know</span>
<span class="comment-copy">@Atizva The docs for the <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer"><code>threading</code></a> module are a great reference, but as a tutorial… they kind of assume you already know Java threading and pthreads in C and just want to know how to do the same thing in Python, which probably isn't that helpful to you. I'm sure there are good third-party tutorials out there that can help, but I don't know any in particular.</span>
