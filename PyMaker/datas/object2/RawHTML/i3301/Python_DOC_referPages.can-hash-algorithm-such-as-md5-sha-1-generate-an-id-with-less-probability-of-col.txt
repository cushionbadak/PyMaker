<div class="post-text" itemprop="text">
<p>I have an application which uses a hash algorithm (currently MD5) to generate a unique ID in a database table. The hash is calculated based on some fields of a row, but nothing checks that calculation, for when those fields are changed later on, the ID of that row doesn't change.</p>
<p>Now I want to change the code to add some new features, while generating a purely random number for the ID could simplify my work a lot (it's a long story to tell why it is much easier for me to generate that ID before I'm able to get all the necessary fields' content for the hash algorithm)</p>
<p>I know that usually the programming language's own random generator generates pseudo random number, but I'm using Python's random.SystemRandom(), which uses operating system's cryptography level 'true' random generator, so I believe it should be the same collision probability comparing with generating the ID with hash algorithm.</p>
<p>Is my understanding correct? If not, why?</p>
</div>
<div class="post-text" itemprop="text">
<p>Generating X number of bytes of random data gives exactly the same collision probability as using the hash function on some ID's... </p>
<p>ASSUMING...</p>
<ol>
<li>The columns you're using the hash function on are themselves unique.</li>
<li>You haven't made mistakes doing #1</li>
</ol>
<p>I would recommend using the system's cryptographic random number provider.  Because you've probably made mistakes.  Here's an easy one:</p>
<p>Your system:  Concatenate column 1 and column 2, and hash the result.  You can <em>guarantee</em> you'll never ever do this on those values of column 1 and column 2 ever again.  NEVER.</p>
<p>What about when:</p>
<ol>
<li>Column 1 = "abc"</li>
<li>Column 2 = "def"</li>
</ol>
<p>vs</p>
<ol>
<li>Column 1 = "ab"</li>
<li>Column 2 = "cdef"</li>
</ol>
<p>Those would create the same hash function.</p>
<p>So who would you trust more to give you random data?  Yourself?  Or a team of operating system developers including cryptography experts and decades of research and experience? :)</p>
<p>Go with the system's cryptographic random function.</p>
</div>
<span class="comment-copy">Is randomness a requirement of your project or just uniqueness?</span>
<span class="comment-copy">@Klaus D. , No, randomness is not a requirement of my project. I need uniqueness only. And there is no global sequence generator so I have to go with either hash algorithm or random number. The current implementation uses MD5 hash algorithm calculated from content of some fields, but I want to change it to simply use random number, for it is difficult for me to get those fields at the time I generate the ID in my new implementation.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/uuid.html" rel="nofollow noreferrer">UUIDs</a>, more exactly <a href="https://docs.python.org/3/library/uuid.html#uuid.uuid1" rel="nofollow noreferrer">UUID1</a>, are made for this purpose. Just make sure the node value is unique per node and when using multiple processes per node also per process.</span>
<span class="comment-copy">Thank you, that makes me more confident with my new implementation. Thank you.</span>
