<div class="post-text" itemprop="text">
<p>I completely understand that I should have written the script right the first time, but the fact is I have a script that generates a data file based upon two values passed to it from the command line- like this:</p>
<pre><code> [sinux1~]: ./sim_gen.py 100 .3
</code></pre>
<p>I need to call this script from within another script, iterating over a range of values. I searched around and after navigating through all of the "you shouldn't," I tried :</p>
<pre><code> exec(open("./sim_gen.py 100 .3").read())
</code></pre>
<p>And this doesn't seem to work.
Help?</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's break this down into pieces:</p>
<pre><code>exec(open("./sim_gen.py 100 .3").read())
</code></pre>
<p>This is equivalent to:</p>
<pre><code>f = open("./sim_gen.py 100 .3")
contents = f.read()
exec(contents)
</code></pre>
<p>That <code>open</code> is the same <code>open</code> you use for, say, reading a text file or a CSV. You're asking for a file named <code>"sim_gen.py 100 .3"</code> in the current directory. Do you have one? Of course not. So the <code>open</code> fails.</p>
<hr/>
<p>The best solution is, as you already know, to rewrite <code>sim_gen.py</code> so that you can <code>import</code> it and call a function and pass the arguments to it.</p>
<hr/>
<p>Failing that, the cleanest answer is probably to just <a href="https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module" rel="nofollow noreferrer">run the Python script as a subprocess</a>:</p>
<pre><code>import subprocess
import sys
subprocess.run([sys.executable, "./sim_gen.py", "100", ".3"])
</code></pre>
<p>Notice that this is effectively the same thing you're doing when you run the script from your shell, so if it was OK there, it's almost surely OK here.</p>
<hr/>
<p>If you really need to <code>exec</code> for some reason, you will need to do something really hacky, and temporarily change <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>argv</code></a> for that script's code:</p>
<pre><code>import sys
_argv = sys.argv
try:
    sys.argv = ["./sim_gen.py", "100", ".3"]
    with open("./sim_gen.py 100 .3"):
        exec(f.read())
finally:
    sys.argv = _argv
</code></pre>
<p>Although really, unless the point of running this is to silently modify your own module's globals or the like, you (a) almost certainly don't really need <code>exec</code>, and (b) want to pass an explicit <code>globals</code> argument even if you do really need it.</p>
</div>
<span class="comment-copy"><code>print(subprocess.Popen(["python","./sim_gen.py",100,0.3]).communicate())</code></span>
<span class="comment-copy">@JoranBeasley You probably want <code>sys.executable</code> rather than <code>python</code> (and if not, you probably want to trust the shbang instead). Also, the arguments have to be strings. Also, why construct a <code>Popen</code> to <code>communicate</code> with instead of just using <code>run</code> (or, for older Python, <code>check_output</code> or similar)?</span>
<span class="comment-copy">all valid points ... just because ive been doing this since before <code>check_output</code> ... so its sort of force of habit :P but you are right</span>
<span class="comment-copy">Not only does this work perfectly, but you explained it extremely well. Thank you. This code only really needed to run once. I plan to go back amd refactor, write it correctly anyways. Thank you.</span>
