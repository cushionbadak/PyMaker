<div class="post-text" itemprop="text">
<p>I want an array to loop when the code throws the IndexError. 
Here is the Example:</p>
<pre><code>a = [1, 2, 3, 4, 5]

a[x] -&gt; output
0 -&gt; 1
1 -&gt; 2
...
4 -&gt; 5
after except IndexError
5 -&gt; 1
6 -&gt; 2
...
9 -&gt; 5
10 -&gt; IndexError (Should be 1)
</code></pre>
<p>My code works but when pos &gt; 9 it still throws the IndexError.</p>
<pre><code>pos = 5
try:
    a = [1, 2, 3, 4, 5]
    print(a[pos])
except IndexError:
    print(a[pos - len(a)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want a circular iterator, use <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a>. If you just want circular behaviour when indexing, you can use modulo-based indexing.</p>
<pre><code>In [20]: a = [1, 2, 3, 4, 5]

In [21]: pos = 9

In [22]: a[pos % len(a)]
Out[22]: 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That is because when <code>pos &gt; 4 and pos &lt; 10</code> your code throws an IndexError exception, and it then runs <code>a[pos - len(a)]</code> which will give the desired result.</p>
<p>However, when <code>pos &gt;= 10</code>, the control will go to the Except block, but then the statement <code>a[pos - len(a)]</code> will also give an IndexError exception, becuase <code>pos - len(a)</code> would be greater than 4, since len(a) is a constant.</p>
<p>I would recommend you to implement a circular iterator about which coldspeed said in his answer, or do something like this if you want to follow your approach:</p>
<pre><code>except IndexError:
    print(a[pos % len(a)])
</code></pre>
<p>P.S. You also don't need to put this whole thing in a try-except block. ^.^</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to print <code>a[pos % len(a)]</code>, not <code>a[pos - len(a)]</code>, as anything greater than 10, minus 5, is greater than 5.</p>
</div>
<span class="comment-copy">Nit: Using modulo based indexing does not make your list a circular iterator, it only lets you index your list in a circular fashion. Also, you don't have to put your indexing code inside a try/except.</span>
<span class="comment-copy">Oops. I was talking about the <code>itertools.cycle</code>. Gotta brush up me English 'mate. I just wrote how OP could implement this in his "algorithm", the try-except approach.</span>
