<div class="post-text" itemprop="text">
<p>I read a code in a book 'Think Python'. This code gets stuck at the <code>inverse[val].[key]</code> with an error:</p>
<blockquote>
<p>'str' object has no attribute 'append''</p>
</blockquote>
<p>Which makes sense as <code>inverse[val]</code> contains a string object.
Here d is the input dictionary.</p>
<pre><code>def invert_dict(d):
    inverse = dict()
    for key in d:
        val = d[key]
        if val not in inverse:
            inverse[val] = [key]
        else:
            inverse[val].append(key)
    return inverse
</code></pre>
<p>The input dictionary is <code>{'a': 1, 'p': 1, 'r': 2, 't': 1, 'o': 1}</code></p>
<p>The expected output is <code>{1: ['a', 'p', 't', 'o'], 2: ['r']}</code></p>
<p>How do I implement this, by modifying the given block of code?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> to create a dictionary of lists. Then append to dictionary values while iterating your input dictionary.</p>
<pre><code>from collections import defaultdict

d_in = {'a': 1, 'p': 1, 'r': 2, 't': 1, 'o': 1}

d_out = defaultdict(list)

for k, v in d_in.items():
    d_out[v].append(k)

print(d_out)

defaultdict(&lt;class 'list'&gt;, {1: ['a', 'p', 't', 'o'], 2: ['r']})
</code></pre>
<hr/>
<p>Your code can be improved by iterating keys and values simultaneously via <code>dict.items</code>, instead of iterating keys and manually extracting the value. In addition, your indentation is incorrect. After resolving these issues:</p>
<pre><code>def invert_dict(d):
    inverse = dict()
    for key, val in d.items():
        if val not in inverse:
            inverse[val] = [key]
        else:
            inverse[val].append(key)
    return inverse
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this:</p>
<pre><code>def invert_dict(data):
    inverse = {}
    for key, value in data.items():
        if value not in inverse:
            inverse[value] = [key]
        else:
            inverse[value].append(key)
    return inverse
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A one-liner using <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">reduce</a>:</p>
<pre><code>inverted_dict = reduce((lambda inverted_dict, key: inverted_dict.setdefault(dd[key], []).append(key) or inverted_dict), d, {})
</code></pre>
<p>Output:</p>
<pre><code>{1: ['t', 'o', 'p', 'a'], 2: ['r']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also follow a different approach in which you take all values from your dictionary and match each value with the keys that have this value in the initial dictionary:</p>
<pre><code>def invert_dict(d):
    values = set(d.values())
    inverse = dict((v,[k for k in d.keys() if d[k]==v]) for v in values)
    return inverse


inv = invert_dict({'a': 1, 'p': 1, 'r': 2, 't': 1, 'o': 1})
print(inv)
</code></pre>
<p>Output:</p>
<pre><code>{1: ['a', 'p', 't', 'o'], 2: ['r']}
</code></pre>
</div>
<span class="comment-copy">Share what problem are you getting with the above code.</span>
<span class="comment-copy">fix your indentation level, that will solve your problem</span>
<span class="comment-copy">Did an answer below help? If so feel free to accept one (green tick on left), or you can ask for clarification.</span>
