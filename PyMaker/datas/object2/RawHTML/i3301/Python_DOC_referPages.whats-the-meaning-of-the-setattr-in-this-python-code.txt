<div class="post-text" itemprop="text">
<pre><code>class Local(object):
__slots__ = ('__storage__', '__ident_func__')

def __init__(self):
    object.__setattr__(self, '__storage__', {})
    object.__setattr__(self, '__ident_func__', get_ident)

def __call__(self, proxy):
    """Create a proxy for a name."""
    return LocalProxy(self, proxy)

def __getattr__(self, name):
    try:
        return self.__storage__[self.__ident_func__()][name]
    except KeyError:
        raise AttributeError(name)

def __setattr__(self, name, value):
    ident = self.__ident_func__()
    storage = self.__storage__
    try:
        storage[ident][name] = value
    except KeyError:
        storage[ident] = {name: value}

def __delattr__(self, name):
    try:
        del self.__storage__[self.__ident_func__()][name]
    except KeyError:
        raise AttributeError(name)
</code></pre>
<p>I want to know the difference between <code>__setattr__</code> magic function and <code>self.__xxx__ = {}</code>.
Now I put more code here.In the constructor,it's object.<strong>setattr</strong>.So does the overwritten have some influence to it ?</p>
</div>
<div class="post-text" itemprop="text">
<p>Like almost all <code>__...__</code> classes, <code>__setattr__</code> is basically designed to be overridden in inheriting classes to change how a Python class works. If changing the semantics of <code>x.foo</code> wasn't needed, <code>__setattr__</code> might not exist. <code>x.foo</code> is defined as <code>__setattr__</code> on self; so it could do anything (e.g. set up DB fields like in Django).</p>
<p>But notice that the code in the question calls <code>object.__setattr__</code>, not the one on <code>self</code>. Thus, even if the current class overrides <code>__setattr__</code> to do something completely different, you can still use <code>object</code>'s definition of the original attribute-setting behaviour to... set an attribute.</p>
</div>
<span class="comment-copy">Is that the entire class? Itâ€™s calling <code>object.__setattr__</code>, so <code>Local</code> could have its own overridden <code>__setattr__</code>.</span>
<span class="comment-copy">Does your class have an override of <code>__setattr__</code> elsewhere? Otherwise, I'm pretty sure either version is equivalent (the version that avoids <code>object.__setattr__</code> being better, but still poor form, since <a href="https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers" rel="nofollow noreferrer">names beginning and ending with <code>__</code> are reserved for the language</a>).</span>
<span class="comment-copy">@Mr.J: Though those uses are needed for avoiding infinite recursion when implementing <code>__setattr__</code> itself. Not typically needed for <code>__init__</code>.</span>
<span class="comment-copy">@ShadowRanger fat finger :)</span>
<span class="comment-copy">.In the constructor,it's object.setattr.So does the overwritten have some influence to it ?</span>
