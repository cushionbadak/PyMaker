<div class="post-text" itemprop="text">
<p>If I created a list:</p>
<pre><code>_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
</code></pre>
<p>and tried to get every value <code>&lt;=</code> 6 by using a generator:</p>
<pre><code>test = next(i for i in a for a in _list if i &lt;= 6)
</code></pre>
<p>(btw this doesn't work ↑↑↑↑↑)</p>
<p>How do I iterate through lists within a list using a generator? If this is not possible, what method can I use in place of this?</p>
<p>I have looked here:
<a href="https://stackoverflow.com/questions/19033401/python-generator-of-generators">python generator of generators?</a>, but could not find an answer...</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>chain</code> from builtin module <code>itertools</code>:</p>
<pre><code>from itertools import chain

_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

print(list(i for i in chain.from_iterable(_list) if i &lt;= 6))
</code></pre>
<p>Output:</p>
<blockquote>
<p>[1, 2, 3, 4, 5, 6]</p>
</blockquote>
<p>What <code>itertools.chain</code> does? According <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="noreferrer">manual pages</a>:</p>
<blockquote>
<p>Make an iterator that returns elements from the first iterable until
  it is exhausted, then proceeds to the next iterable, until all of the
  iterables are exhausted. Used for treating consecutive sequences as a
  single sequence.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>in that case, you don't need to create a generator of generator. Just create a double for loop in one generator (to flatten the list, then test for the element values):</p>
<pre><code>_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

gen = (x for sublist in _list for x in sublist if x &lt;= 6)
</code></pre>
<p>this double <code>for</code> comprehension syntax needs some using to, comprehensions are generally written "the other way round", but not in the case of loops, hence your confusion. A more general form would be:</p>
<pre><code>(expression(item) for sublist in input_list for item in sublist if condition(item))
</code></pre>
<p>then to get the first matching element:</p>
<pre><code>print(next(gen,None))  # None is printed if there's no matching element
</code></pre>
<p>(to get all the elements, of course you have to iterate on <code>gen</code>, <code>next</code> provides the "next" values, like if you're iterating "manually" on your generator)  </p>
</div>
<div class="post-text" itemprop="text">
<p>to nest two fors in the same generator you must reverse the order</p>
<pre><code>test = next(i for a in _list for i in a if i &lt;= 6)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can combine <code>itertools.takewhile</code> and <code>itertools.chain</code> to create an iterator matching your requirements</p>
<pre><code>&gt;&gt;&gt; from itertools import chain, takewhile
&gt;&gt;&gt; itr = takewhile(lambda i: i&lt;=6, chain(*_list))
&gt;&gt;&gt; print (list(itr))
[1, 2, 3, 4, 5, 6]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; t = (i for a in _list for i in a if i &lt;= 6)
&gt;&gt;&gt; next(t)
1
&gt;&gt;&gt; next(t)
2
&gt;&gt;&gt; next(t)
3
&gt;&gt;&gt; next(t)
4
&gt;&gt;&gt; next(t)
5
&gt;&gt;&gt; 
</code></pre>
<p>Use <code>list</code> to convert the iterator to a list</p>
<pre><code>&gt;&gt;&gt; t = (i for a in _list for i in a if i &lt;= 6)
&gt;&gt;&gt; list(t)
[1, 2, 3, 4, 5, 6]
</code></pre>
</div>
<span class="comment-copy">Why don't you use a list comprehension?</span>
<span class="comment-copy">If I wanted to find the index of each output, how would I do that?</span>
<span class="comment-copy">@flameboi You can index resulting list: <code>list(i for i in chain.from_iterable(_list) if i &lt;= 6)[0]</code> for example.</span>
<span class="comment-copy">@ Andrej What does that mean? I don't understand.</span>
<span class="comment-copy">To clarify, in my first comment, I was asking if there was a way to output <code>[0][0]</code> for <code>1</code> for example.</span>
<span class="comment-copy">@flameboi Do you mean <code>print(_list[0][0])</code>?</span>
<span class="comment-copy">When I print <code>test</code>, it outputs <code>1</code>. Shouldn't it output <code>1, 2, 3, 4, 5, 6</code>?</span>
<span class="comment-copy">@flameboi <code>next()</code> gets only the next element. If you want all elements use <code>list()</code> to fully consume the generator: <code>test = list(i for a in _list for i in a if i &lt;= 6)</code> (at that point you can use a list comprehension instead, that always returns a list)</span>
