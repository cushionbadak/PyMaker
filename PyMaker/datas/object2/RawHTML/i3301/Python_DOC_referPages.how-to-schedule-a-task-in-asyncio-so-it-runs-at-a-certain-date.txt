<div class="post-text" itemprop="text">
<p>My program is supposed to run 24/7 and i want to be able to run some tasks at a certain hour/date.</p>
<p>I have already tried to work with <a href="https://github.com/gawel/aiocron" rel="nofollow noreferrer">aiocron</a> but it only supports scheduling functions (not coroutines) and i have read that is not a really good library.
My program is built so most if not all the tasks that i would want to schedule are built in coroutines.</p>
<p>Is there any other library that allows for such kind of task scheduling?</p>
<p>Or if not, any way of warping coroutines so they run of a normal function?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>I have already tried to work with aiocron but it only supports scheduling functions (not coroutines)</p>
</blockquote>
<p>According to the examples at the <a href="https://github.com/gawel/aiocron" rel="nofollow noreferrer">link</a> you provided, that does not appear to be the case. The functions decorated with <code>@asyncio.coroutine</code> are equivalent to coroutines defined with <code>async def</code>, and you can use them interchangeably.</p>
<p>However, if you want to avoid aiocron, it is reasonably straightforward to use <code>asyncio.sleep</code> to postpone running a coroutine until an arbitrary point in time. For example:</p>
<pre><code>import asyncio, datetime

async def wait_for(dt):
    # sleep until the specified datetime
    while True:
        now = datetime.datetime.now()
        remaining = (dt - now).total_seconds()
        if remaining &lt; 86400:
            break
        # asyncio.sleep doesn't like long sleeps, so don't sleep more
        # than a day at a time
        await asyncio.sleep(86400)
    await asyncio.sleep(remaining)

async def run_at(dt, coro):
    await wait_for(dt)
    return await coro
</code></pre>
<p>Example usage:</p>
<pre><code>async def hello():
    print('hello')

loop = asyncio.get_event_loop()
# print hello ten years after this answer was written
loop.create_task(run_at(datetime.datetime(2028, 7, 11, 23, 36),
                        hello()))
loop.run_forever()
</code></pre>
</div>
<span class="comment-copy">Why not use <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.call_at" rel="nofollow noreferrer">loop.call_at</a>?</span>
<span class="comment-copy">@Vincent <code>loop.call_at</code> accepts a time reference relative to the time returned by <code>loop.time()</code>, so you still have to calculate and cannot just give it an e.g. Unix timestamp. The second problem is that <code>call_at</code> accepts a function, not a coroutine, so you'd still need a trampoline that calls <code>create_task</code>. Using <code>call_at</code> (and <code>call_later</code> and <code>call_soon</code>) you cannot easily obtain the return value of the coroutine, as done in the edited answer.</span>
<span class="comment-copy">The final issue is that I believe <code>call_at</code> would have the same problem with long sleeps that <code>asyncio.sleep</code> has, because the error comes from the underlying <code>poll</code>. With <code>call_at</code> it would be even harder to work around because you cannot give it absolute time too far in the future, so the code would have to revert to <code>call_later</code> with similar logic to what's done in the answer.</span>
<span class="comment-copy">@Vincent I discovered the timeout error while testing the code by scheduling an event a month from now. Looking at <a href="https://github.com/python/cpython/blob/9e9b2c32a34594e901b5b9a03c561a2a2bf63ece/Modules/selectmodule.c#L1544" rel="nofollow noreferrer">the source</a>, the limitation seems to be that the nearest timeout in milliseconds must not exceed 2**31-1, which means that you cannot sleep for more than 24.8 days without a workaround like the loop in the answer. For most practical uses of asyncio this is not an issue, but for a scheduler that runs tasks at particular <i>dates</i> it must be worked around.</span>
<span class="comment-copy">Interesting, I found this <a href="https://bugs.python.org/issue20493" rel="nofollow noreferrer">related issue (bpo-20423)</a> on the python bug tracker. Another way to work around this issue is to <a href="https://gist.github.com/vxgmichel/46e7aa46d0da32ce0c647e27df39f7b9" rel="nofollow noreferrer">schedule a background task that wakes up every day</a>.</span>
