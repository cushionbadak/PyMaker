<div class="post-text" itemprop="text">
<p>I'm a new learner of python/programming. Here is a question on top of head about the use of function in python. </p>
<p>If I had a list called myList. </p>
<ul>
<li>(a) If I were to sort it, I would use <code>myList.sort()</code></li>
<li>(b) If I were to sort it temporarily, I would use <code>sorted(myList)</code></li>
</ul>
<p>Note the difference between the use of two functions, one is to apply the function to <code>myList</code>, the other one is use <code>myList</code> as a parameter to the function. </p>
<p>My question is, each time when I use a function. </p>
<ul>
<li>How do I know if the function should be used as an "action" to be applied to an object (in (a)), or </li>
<li>should an object passed to the function as a parameter,(in (b)). </li>
</ul>
<p>I have been confused with this for quite long time. appreciate any explanations.</p>
<p>Thanks.  </p>
</div>
<div class="post-text" itemprop="text">
<p>Only <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer"><code>sorted</code></a> is a function - <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow noreferrer"><code>list.sort</code></a> is a method of the <code>list</code> type.</p>
<p>Functions such as <code>sorted</code> are applicable to more than a specific type. For example, you can get a sorted <code>list</code>, <code>set</code>, or even a temporary generator. Only the <em>output</em> is concrete (you always get a new <code>list</code>) but not the input.</p>
<p>Methods such as <code>sort</code> are applicable only to the type that holds them. For example, there is a <code>list.sort</code> method but not a <code>dict.sort</code> method. Even for types whose methods have the same name, switching them is not sensible - for example, <code>set.copy</code> cannot be used to copy a <code>dict</code>.</p>
<p>An easy way to distinguish the two is that functions live in regular namespaces, such as modules. On the other hand, methods only live inside classes and their instances.</p>
<pre><code>sorted     # function
list.sort  # method

import math
math.sqrt                # function
math.pi.as_integer_ratio # method
</code></pre>
<p>Conventionally, Python usually uses functions for immutable actions and methods for mutating actions. For example, <code>sorted</code> provides a <em>new</em> sorted list leaving the old one untouched; <code>my_list.sort()</code> sorts the existing list, providing no new one.</p>
<pre><code>my_list = [4, 2, 3, 1]
print(sorted(my_list))  # prints [1, 2, 3, 4]
print(my_list)          # prints [4, 2, 3, 1] - unchanged by sorted
print(my_list.sort())   # prints None - no new list produced
print(my_list)          # prints [1, 2, 3, 4] - changed by sort
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are two big differences between list.sort and sorted(list)</p>
<ol>
<li><p>The list.sort() sorts the list in-place, which means it modifies the
list. The sorted function does not modify original list but returns
a sorted list</p></li>
<li><p>The list.sort() only applies to list (it is a method), but sorted built-in function can take any iterable object.</p></li>
</ol>
<p>Please go through this <a href="https://docs.python.org/3/howto/sorting.html" rel="nofollow noreferrer">useful documentation</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>sort()</code> is an in-place function whereas <code>sorted()</code> will return a sorted list, but will not alter your variable in place.  The following demonstrates the difference:</p>
<pre><code>l = [1, 2, 1, 3, 2, 4]
l.sort()
print(l) --returns [1, 1, 2, 2, 3, 4]

l = [1, 2, 1, 3, 2, 4]
new_l = sorted(l) 
print(new_l) -- returns [1, 1, 2, 2, 3, 4]
print(l) -- [1, 2, 1, 3, 2, 4]
</code></pre>
<p>If you want to maintain the original order of your list use <code>sorted</code>, otherwise you can use <code>sort()</code>.</p>
</div>
<span class="comment-copy">Read the documentation for the function.</span>
<span class="comment-copy"><code>myList.sort()</code> is a method, but <code>sorted(myList)</code> is a function</span>
<span class="comment-copy"><code>list.sort</code> and <code>sorted</code> are two entirely different things. One is a method, the other a builtin function. It's not like any function can be used either as <code>foo(x)</code> or <code>x.foo()</code>.</span>
