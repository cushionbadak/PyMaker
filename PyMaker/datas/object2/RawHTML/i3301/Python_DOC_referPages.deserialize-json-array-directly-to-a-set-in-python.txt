<div class="post-text" itemprop="text">
<p>Is there a way to deserialize a json array <strong>directly</strong> to a set?</p>
<p>data.json (yes this is just a json array.)</p>
<pre><code>["a","b","c"]
</code></pre>
<p>Notice that the json array contains unique elements.</p>
<p>Currently my workflow is the following.</p>
<pre><code>open_file = open(path, 'r') 
json_load = json.load(open_file) # this returns a list
return set(json_load) # which I am then converting to a set. 
</code></pre>
<p>Is there a way to do something like this?</p>
<pre><code>open_file = open(path, 'r') 
return json.load(open_file, **arguments) # this returns a set.
</code></pre>
<p>Also is there any other way to go about doing it without the json module perhaps? Surely I am not the first one to need a set decoder.</p>
</div>
<div class="post-text" itemprop="text">
<p>No. You would have to subclass one of the json module classes <code>JSONDecoder</code> and override the method that creates the object, to do it yourself. </p>
<p>And it is also not worth the trouble. json arrays really map to lists in python - they have order, and can allow duplicates - a set can't correctly represent a json array. Therefore it is not the job of a json decoder to provide a set.</p>
<p>Converting is the best you can do. You could create a function and call it when you need:</p>
<pre><code>def json_load_set(f):
    return set(json.load(f))
</code></pre>
</div>
<span class="comment-copy"><i>"This operation takes some additional time and memory space."</i> Yes, but the time and space are both O(N) with respect to the size of the data, so is it really worth worrying about? Have you performed benchmarking to empirically determine that this is a performance bottleneck?</span>
<span class="comment-copy">I do not think there is, because a <code>json</code> usually it is not just an array</span>
<span class="comment-copy">I updated the question with an example of the format of the json file</span>
<span class="comment-copy">You could write your own <a href="https://docs.python.org/3/library/json.html#json.JSONDecoder" rel="nofollow noreferrer"><code>JSONDecoder</code></a> subclass and then pass that as the <code>cls</code> argument to <code>load</code>.  I don't think there's a simple way to do it out of the box though.</span>
<span class="comment-copy">Just what Patrick Haugh said - it's really not worth the effort, will probably not gain you much wrt/ perfs,  and will only make your code more complicated and less explicit.</span>
<span class="comment-copy">Also is there any other way to go about doing it without the json module perhaps? Surely I am not the first one to need a set decoder.</span>
<span class="comment-copy">@Chris you're missing the point. You can do it yourself, but it is not worth it! The json module deals with json arrays just fine, and correctly returns a list - all you have to do is convert to a set. Writing a parser yourself is prone to errors and more code, for no real benefit</span>
