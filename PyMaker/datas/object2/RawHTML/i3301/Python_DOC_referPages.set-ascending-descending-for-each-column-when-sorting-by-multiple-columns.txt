<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/11476371/sort-by-multiple-keys-using-different-orderings">Sort by multiple keys using different orderings [duplicate]</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I have a list <code>d</code> that I wish to sort. I sort by the first column first. If its a tie there I then go on to use the second column to sort. Say I want to sort by the first column in ascending order but sort by the second column in descending order. Ascending being the default, using the <code>reverse</code> key I thought the below should work.</p>
<pre><code>sorted(d,key=lambda x: (x[0],x[1]),reverse=(False,True))
</code></pre>
<p>But it does not. It give the following error.</p>
<pre><code>    reverse=(False,True))

TypeError: an integer is required (got type tuple)
</code></pre>
<p>So if I'm not doing it right how to fix it? Or the way to do this is completely different? Advice on that would be helpful.</p>
<p>My question indeed has some duplication but there are already interesting responses, so I would like to keep it. </p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/functions.html#sorted" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p><em>reverse</em> is a boolean value. If set to <code>True</code>, then the list elements are sorted as if each comparison were reversed.</p>
</blockquote>
<p>So what you want instead is something like:</p>
<pre><code>d.sort(key=lambda x: (x[0], -x[1]))
</code></pre>
<p>If <code>x[1]</code> is not a number, try:</p>
<pre><code>d.sort(key=lambda x: x[1], reverse=True)
d.sort(key=lambda x: x[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>(<em>Might be overkill, but..</em>) Using <code>pandas</code> and args <code>ascending=[True, False]</code>:</p>
<pre><code>d = [[1,2], [2,2], [2,3], [2,4], [3,1]]
df=  pd.DataFrame(d)

sorted_values = df.sort_values(by=[0,1], ascending=[True,False])
sorted_list = sorted_values.agg(list,1).tolist()

[[1, 2], [2, 4], [2, 3], [2, 2], [3, 1]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My take on solution:</p>
<pre><code>from itertools import groupby, chain

l = ((1, 'b'),
     (1, 'd'),
     (2, 'a'),
     (1, 'a'))

def sort_multi(lst, index_normal, index_reversed):
    return list(chain.from_iterable([sorted(list(j), key=lambda v:v[index_reversed], reverse=True) for i, j in groupby(sorted(lst), key=lambda v:v[index_normal])]))


print(sort_multi(l, 0, 1))
</code></pre>
<p>Outputs:</p>
<pre><code>[(1, 'd'), (1, 'b'), (1, 'a'), (2, 'a')]
</code></pre>
</div>
<span class="comment-copy">Are the values numeric? If so, you can use negation to reverse the sort order for the second element: <code>sorted(d,key=lambda x: (x[0],-x[1]))</code>. It would be helpful if you shared a sample of your list <code>d</code>.</span>
<span class="comment-copy">@pault good point. Some coloumns can indeed be strings.</span>
<span class="comment-copy">And what if <code>x[1]</code> is a string?</span>
<span class="comment-copy">@pault should work now...</span>
<span class="comment-copy">This is worth adding to the canonical question, which I believe is <a href="https://stackoverflow.com/questions/11206884/how-to-write-python-sort-key-functions-for-descending-values">this one</a>.</span>
<span class="comment-copy">I have followed your suggestion @pault thank you :)</span>
<span class="comment-copy">@pault Corrected</span>
<span class="comment-copy">Looks like this will work for 2 indexes- it would be really useful if you could extend it to work for any number of indices.</span>
