<div class="post-text" itemprop="text">
<p>I have a script that runs pretty much 24/7. I would like it to be properly interrupted several times a day.</p>
<pre><code>from time import sleep

def function_one():
    while True:
        print("I'm working 24/7 and doing some important stuff here!")
        print("Very important!")
        sleep(5)

def function_two():
    print("I just need to do my job once, however, function_one should be stopped while i'm working!")    
</code></pre>
<p>I want <code>function_one</code> to be interrupted (in between loops) every 3 hours then <code>function_two</code> to be called once and right after that <code>function_one</code> should continue working. </p>
<p>What is the proper way of doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Why not put the call to function 2 within function 1 itself. That way it'll wait until function 2 has run to resume function 1. Something like this:</p>
<pre><code>from __future__ import generators
from time import sleep
import time

def function_one():
    while True:
        print("I'm working 24/7 and doing some important stuff here!")
        print("Very important!")
        #First bit checks whether the hour is divisible by 3 (every 3 hours)
                                                #This bit checks that the minute and seconds combined are the first 5 seconds of the hour
        if int(time.strftime("%H"))%3 == 0 and int(time.strftime("%M%S")) &lt; 6:
            #Calls function 2 and won't resume until function 2 is finished
            function_two()
            print("That was the 2 second wait from function 2")
        sleep(5)

def function_two():
    print("I just need to do my job once, however, function_one should be stopped while i'm working!")
    sleep(2)

function_one()
</code></pre>
<p>Hopefully this works for what you want.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from time import sleep, time

def function_one():
    print("I'm working 24/7 and doing some important stuff here!")
    print("Very important!")

def function_two():
    print("I just need to do my job once, however, function_one should be stopped while i'm working!")    

def function_three():
    last_call = time()
    while True:
        if time.time() - last_call &gt; 3 hours:
            last_call = time()
            function_two()  # function_one is not running during the execution of function_two
        function_one()
        sleep(5)
</code></pre>
<p>Something like this</p>
</div>
<span class="comment-copy">It really depeneds on how complicated is your <code>function_one</code> and <code>function_two</code> . Do you need to use two separate processes or threads for those functions? If so consider using thread/processes locking mechanism.</span>
<span class="comment-copy">when exactly is <code>function_two</code> called?</span>
<span class="comment-copy">function_two is should be called every 3 hours. I.e function_one runs for 3 hours, it stops/loop breaks, function two is called, after function two finishes the job, function_one is called and it  runs again for another 3 hours.</span>
<span class="comment-copy">Have you looked at the <a href="https://docs.python.org/3/library/sched.html" rel="nofollow noreferrer">sched module</a>? It provides actual scheduling</span>
<span class="comment-copy">This code does not produce the results needed. It will constantly print "I'm working 24/7 and doing some important stuff here!" and "Very important!" and ignores <code>sleep(5)</code></span>
<span class="comment-copy">So what is the code you work with? Keep in mind that you should replace <code>3 hours</code> with 3 hours in milliseconds (I guess). I don't see how sleep(5) would be ignored if you call function_three.</span>
<span class="comment-copy">I did replace 3 hours and also replaced time.time() with time() in function_three. I'm not sure why but it did ignore sleep(5)</span>
