<div class="post-text" itemprop="text">
<p>I am trying to parse a string in this format <strong>"2018 - 07 - 07 04 - AM"</strong>
to pandas datetime using strftime format. However, It seems to me the format doesn't recognize the difference between <code>AM</code> and <code>PM</code>. </p>
<p>Here is what I tried:</p>
<p><code>pd.to_datetime("2018 - 07 - 07 04 - PM", format='%Y - %m - %d %H - %p').timestamp()
Out[4]: 1530936000.0
pd.to_datetime("2018 - 07 - 07 04 - AM", format='%Y - %m - %d %H - %p').timestamp()
Out[5]: 1530936000.0</code></p>
<p>Notice how the <code>AM</code> and <code>PM</code> are different in the above two strings, yet the same timeStamp is returned. </p>
<p>Pandas version: 0.23.3 </p>
<p>Python version: 3.5.4</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're parsing a 12-hour time format, you will need <code>%I</code> instead of <code>%H</code>, otherwise the <code>%p</code> specifier has no effect.</p>
<pre><code>pd.to_datetime("2018 - 07 - 07 04 - PM", format='%Y - %m - %d %I - %p')
Timestamp('2018-07-07 16:00:00')
</code></pre>
<p>This behaviour is documented in the <a href="https://docs.python.org/3/library/time.html#time.strftime" rel="noreferrer">docs</a>:</p>
<blockquote>
<p>When used with the <code>strptime()</code> function, the <code>%p</code> directive only affects
  the output hour field if the <code>%I</code> directive is used to parse the hour.</p>
</blockquote>
</div>
<span class="comment-copy">Appreciate your answer, <code>%I</code> work like a charm!</span>
