<div class="post-text" itemprop="text">
<p>I am a beginner in Python and using Lutz's book to understand OOPS in Python. This question might be basic, but I'd appreciate any help. I researched SO and found answers on "how", but not "why."</p>
<p>As I understand from the book, if <code>Sub</code> inherits <code>Super</code> then one need not call superclass' (<code>Super</code>'s) <code>__init__()</code> method.</p>
<p><strong>Example:</strong></p>
<pre><code>class Super:
    def __init__(self,name):
        self.name=name
        print("Name is:",name)

class Sub(Super):
    pass

a = Sub("Harry")
a.name
</code></pre>
<p>Above code does assign attribute <code>name</code> to the object <code>a</code>. It also prints the <code>name</code> as expected. </p>
<p>However, if I modify the code as:</p>
<pre><code>class Super:
    def __init__(self,name):
        print("Inside Super __init__")
        self.name=name
        print("Name is:",name)

class Sub(Super):
      def __init__(self,name):
          Super(name) #Call __init__ directly

a = Sub("Harry")
a.name
</code></pre>
<p>The above code doesn't work fine. By fine, I mean that although <code>Super.__init__()</code> does get called (as seen from the print statements), there is no attribute attached to <code>a</code>. When I run <code>a.name</code>, I get an error, <code>AttributeError: 'Sub' object has no attribute 'name'</code></p>
<p>I researched this topic on SO, and found the fix on <a href="https://stackoverflow.com/questions/904036/chain-calling-parent-constructors-in-python?noredirect=1&amp;lq=1">Chain-calling parent constructors in python</a> and <a href="https://stackoverflow.com/questions/3782827/why-arent-superclass-init-methods-automatically-invoked">Why aren't superclass __init__ methods automatically invoked?</a></p>
<p>These two threads talk about how to fix it, but they don't provide a reason for why. </p>
<p>Question: <strong>Why</strong> do I need to call <code>Super</code>'s <code>__init__</code> using <code>Super.__init__(self, name)</code> OR <code>super(Sub, self).__init__(name)</code> instead of a direct call <code>Super(name)</code>? </p>
<p>In <code>Super.__init__(self, name)</code> and  <code>Super(name)</code>, we see that Super's <code>__init__()</code> gets called, (as seen from print statements), but only in <code>Super.__init__(self, name)</code> we see that the attribute gets attached to <code>Sub</code> class.</p>
<p>Wouldn't <code>Super(name)</code> automatically pass <code>self</code> (child) object to <code>Super</code>? Now, you might ask that how do I know that <code>self</code> is automatically passed? If I modify <code>Super(name)</code> to <code>Super(self,name)</code>, I get an error message that <code>TypeError: __init__() takes 2 positional arguments but 3 were given</code>. As I understand from the book, <code>self</code> is automatically passed. So, effectively, we end up passing <code>self</code> twice. </p>
<p>I don't know why <code>Super(name)</code> doesn't attach <code>name</code> attribute to <code>Sub</code> even though <code>Super.__init__()</code> is run. I'd appreciate any help. </p>
<hr/>
<p>For reference, here's the working version of the code based on my research from SO:</p>
<pre><code>class Super:
    def __init__(self,name):
        print("Inside __init__")
        self.name=name
        print("Name is:",name)

class Sub(Super):
    def __init__(self,name):
        #Super.__init__(self, name) #One way to fix this
        super(Sub, self).__init__(name) #Another way to fix  this

a = Sub("Harry")
a.name
</code></pre>
<p>PS: I am using <code>Python-3.6.5</code> under Anaconda Distribution.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>As I understand from the book, if Sub inherits Super then one need not call superclass' (<code>Super</code>'s) <code>__init__()</code> method.</p>
</blockquote>
<p>This is misleading. It's true that you aren't <em>required</em> to call the superclass's <code>__init__</code> method—but if you don't, whatever it does in <code>__init__</code> never happens. And for normal classes, all of that needs to be done. It is <em>occasionally</em> useful, usually when a class wasn't designed to be inherited from, like this:</p>
<pre><code>class Rot13Reader:
    def __init__(self, filename):
        self.file = open(filename):
    def close(self):
        self.file.close()
    def dostuff(self):
        line = next(file)
        return codecs.encode(line, 'rot13')
</code></pre>
<p>Imagine that you want all the behavior of this class, but with a string rather than a file. The only way to do that is to skip the <code>open</code>:</p>
<pre><code>class LocalRot13Reader(Rot13Reader):
    def __init__(self, s):
        # don't call super().__init__, because we don't have a filename to open
        # instead, set up self.file with something else
        self.file = io.StringIO(s)
</code></pre>
<p>Here, we wanted to avoid the <code>self.file</code> assignment in the superclass. In your case—as with almost all classes you're ever going to write—you <em>don't</em> want to avoid the <code>self.name</code> assignment in the superclass. That's why, even though Python <em>allows</em> you to not call the superclass's <code>__init__</code>, you almost always call it.</p>
<p>Notice that there's nothing special about <code>__init__</code> here. For example, we can override <code>dostuff</code> to call the base class's version and then do extra stuff:</p>
<pre><code>def dostuff(self):
    result = super().dostuff()
    return result.upper()
</code></pre>
<p>… or we can override <code>close</code> and intentionally not call the base class:</p>
<pre><code>def close(self):
    # do nothing, including no super, because we borrowed our file
</code></pre>
<p>The only difference is that good reasons to avoid calling the base class tend to be much more common in normal methods than in <code>__init__</code>.</p>
<hr/>
<blockquote>
<p>Question: Why do I need to call <code>Super's __init__</code> using <code>Super.__init__(self, name)</code> OR <code>super(Sub, self).__init__(name)</code> instead of a direct call <code>Super(name)</code>?</p>
</blockquote>
<p>Because these do very different things.</p>
<p><code>Super(name)</code> constructs a new <code>Super</code> instance, calls <code>__init__(name)</code> on it, and returns it to you. And you then ignore that value.</p>
<p>In particular, <code>Super.__init__</code> does get called one time either way—but the <code>self</code> it gets called with is that new <code>Super</code> instance, that you're just going to throw away, in the <code>Super(name)</code> case, while it's your own <code>self</code> in the <code>super(Sub, self).__init__(name)</code> case.</p>
<p>So, in the first case, it sets the <code>name</code> attribute on some other object that gets thrown away, and nobody ever sets it on your object, which is why <code>self.name</code> later raises an <code>AttributeError</code>.</p>
<p>It might help you understand this if you add something to both class's <code>__init__</code> methods to show which instance is involved:</p>
<pre><code>class Super:
    def __init__(self,name):
        print(f"Inside Super __init__ for {self}")
        self.name=name
        print("Name is:",name)

class Sub(Super):
    def __init__(self,name):
        print(f"Inside Sub __init__ for {self}")
        # line you want to experiment with goes here.
</code></pre>
<p>If that last line is <code>super().__init__(name)</code>, <code>super(Sub, self).__init__name)</code>, or <code>Super.__init__(self, name)</code>, you will see something like this:</p>
<pre><code>Inside Sub __init__ for &lt;__main__.Sub object at 0x10f7a9e80&gt;
Inside Super __init__ for &lt;__main__.Sub object at 0x10f7a9e80&gt;
</code></pre>
<p>Notice that it's the same object, the <code>Sub</code> at address 0x10f7a9e80, in both cases.</p>
<p>… but if that last line is <code>Super(name)</code>:</p>
<pre><code>Inside Sub __init__ for &lt;__main__.Sub object at 0x10f7a9ea0&gt;
Inside Super __init__ for &lt;__main__.Super object at 0x10f7a9ec0&gt;
</code></pre>
<p>Now we have two different objects, at different addresses 0x10f7a9ea0 and 0x10f7a9ec0, and with different types.</p>
<hr/>
<p>If you're curious about what the magic all looks like under the covers, <code>Super(name)</code> does something like this (oversimplifying a bit and skipping over some steps<sup>1</sup>):</p>
<pre><code>_newobj = Super.__new__(Super)
if isinstance(_newobj, Super):
    Super.__init__(_newobj, name)
</code></pre>
<p>… while <code>super(Sub, self).__init__(name)</code> does something like this:</p>
<pre><code>_basecls = magically_find_next_class_in_mro(Sub)
_basecls.__init__(self, name)
</code></pre>
<hr/>
<p>As a side note, if a book is telling you to use <code>super(Sub, self).__init__(name)</code> or <code>Super.__init__(self, name)</code>, it's probably an obsolete book written for Python 2.</p>
<p>In Python 3, you just do this:</p>
<ul>
<li><code>super().__init__(name)</code>: Calls the correct next superclass by method resolution order. You almost always want this.</li>
<li><code>super(Sub, self).__init__(name)</code>: Calls the correct next superclass—unless you make a mistake and get <code>Sub</code> wrong there. You only need this if you're writing dual-version code that has to run in 2.7 as well as 3.x.</li>
<li><code>Super.__init__(self, name)</code>: Calls <code>Super</code>, whether it's the correct next superclass or not. You only need this if the method resolution order is wrong and you have to work around it.<sup>2</sup></li>
</ul>
<hr/>
<p>If you want to understand more, it's all in the docs, but it can be a bit daunting:</p>
<ul>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer"><code>__new__</code></a></li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow noreferrer"><code>__init__</code></a></li>
<li><a href="https://docs.python.org/3/library/functions.html#super" rel="nofollow noreferrer"><code>super</code></a> (also see <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="nofollow noreferrer">Raymond Hettinger's blog post</a>)</li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#invoking-descriptors" rel="nofollow noreferrer">method invocation</a> (also see the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">HOWTO</a>)</li>
</ul>
<p>The <a href="https://www.python.org/download/releases/2.2.3/descrintro/" rel="nofollow noreferrer">original introduction to <code>super</code>, <code>__new__</code>, and all the related features</a> was very helpful to me in understanding all of this. I'm not sure if it'll be as helpful to someone who's not coming at this already understanding old-style Python classes, but it's pretty well written, and Guido (obviously) knows what he's talking about, so it might be worth reading.</p>
<hr/>
<p><sub>1. The biggest cheat in this explanation is that <code>super</code> actually returns a proxy object that acts like <code>_baseclass</code> bound to <code>self</code> in the same way methods are bound, which can be used to bind methods, like <code>__init__</code>. This is useful/interesting knowledge if you know how methods work, but probably just extra confusion if you don't.</sub></p>
<p><sub>2. … or if you're working with old-style classes, which don't support <code>super</code> (or proper method-resolution order). This never comes up in Python 3, which doesn't have old-style classes. But, unfortunately, you will see it in lots of tkinter examples, because the best tutorial is still Effbot's, which was written for Python 2.3, when Tkinter was all old-style classes, and has never been updated.</sub></p>
</div>
<div class="post-text" itemprop="text">
<p><code>Super(name)</code> is not a "direct call" to the superclass <code>__init__</code>. After all, you called <code>Super</code>, not <code>Super.__init__</code>.</p>
<p><code>Super.__init__</code> takes an uninitialized <code>Super</code> instance and initializes it. <code>Super</code> <em>creates</em> and initializes a new, completely separate instance from the one you wanted to initialize (and then you immediately throw the new instance away). The instance you wanted to initialize is untouched.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Super(name)</code> instantiates a new instance of super. Think of this example:</p>
<pre><code>def __init__(self, name):
    x1 = Super(name)
    x2 = Super("some other name")
    assert x1 is not self
    assert x2 is not self
</code></pre>
<p>In order to explicitly call The <code>Super</code>'s constructor on the current instance, you'd have to use the following syntax:</p>
<pre><code>def __init__(self, name):
    Super.__init__(self, name)
</code></pre>
<hr/>
<p>Now, maybe you don't want read further if you are a beginner.</p>
<p>If you do, you will see that there is a good reason to use <code>super(Sub, self).__init__(name)</code> (or <code>super().__init__(name)</code> in Python 3) instead of  <code>Super.__init__(self, name)</code>.</p>
<hr/>
<p><code>Super.__init__(self, name)</code> works fine, as long as you are certain that <code>Super</code> is in fact your superclass. But in fact, you don't know ever that for sure.</p>
<p>You could have the following code:</p>
<pre><code>class Super:
    def __init__(self):
        print('Super __init__')

class Sub(Super):
    def __init__(self):
        print('Sub __init__')
        Super.__init__(self)

class Sub2(Super):
    def __init__(self):
        print('Sub2 __init__')
        Super.__init__(self)

class SubSub(Sub, Sub2):
    pass
</code></pre>
<p>You would now expect that <code>SubSub()</code> ends up calling all of the above constructors, but it does not:</p>
<pre><code>&gt;&gt;&gt; x = SubSub()
Sub __init__
Super __init__
&gt;&gt;&gt;
</code></pre>
<p>To correct it, you'd have to do:</p>
<pre><code>class Super:
    def __init__(self):
        print('Super __init__')

class Sub(Super):
    def __init__(self):
        print('Sub __init__')
        super().__init__()

class Sub2(Super):
    def __init__(self):
        print('Sub2 __init__')
        super().__init__()

class SubSub(Sub, Sub2):
    pass
</code></pre>
<p>Now it works:</p>
<pre><code>&gt;&gt;&gt; x = SubSub()
Sub __init__
Sub2 __init__
Super __init__
&gt;&gt;&gt;
</code></pre>
<p>The reason is that the super class of <code>Sub</code> is declared to be <code>Super</code>, in case of multiple inheritance in class <code>SubSub</code>, Python's MRO establishes the inheritance as: <code>SubSub</code> inherits from <code>Sub</code>, which inherits from <code>Sub2</code>, which inherits from <code>Super</code>, which inherits from <code>object</code>.</p>
<p>You can test that:</p>
<pre><code>&gt;&gt;&gt; SubSub.__mro__
(&lt;class '__main__.SubSub'&gt;, &lt;class '__main__.Sub'&gt;, &lt;class '__main__.Sub2'&gt;, &lt;class '__main__.Super'&gt;, &lt;class 'object'&gt;)
</code></pre>
<p>Now, the <code>super()</code> call in constructors of each of the classes finds the next class in the MRO so that the constructor of that class can be called.</p>
<p>See <a href="https://www.python.org/download/releases/2.3/mro/" rel="nofollow noreferrer">https://www.python.org/download/releases/2.3/mro/</a></p>
</div>
<span class="comment-copy"><code>Super(name)</code> creates a <code>new</code> instance of <code>Super</code> which is immediately discarded. You need to call <code>__init__()</code> on the specific instance (<code>self</code>), <code>super()</code> is preferred and you no longer need to pass arguments to <code>super()</code>, e.g. <code>super().__init__(name)</code> is sufficient.</span>
<span class="comment-copy">In your class <code>Sub</code>, you are initializing a new instance of the parent class, which is not what you want to do. <code>Subclass</code> wants to initialize all attributes/methods (inherits) from parent's class (see abarnert's answer for how-to). Because you don't initialize parent's class attribute, you do not give your Sub's instance (you called it <code>a</code>) the attribute <code>name</code>. And you're trying to access an attribute that doesn't exist, this is why the error is raised.</span>
<span class="comment-copy">Thanks for excellent response. In the first example, <code>LocalRot13Reader</code> didn't inherit from <code>Rot13Reader</code>. So, I believe this example is different from what I have posted.</span>
<span class="comment-copy">@watchtower Oops; that's a typo. Thanks for catching it, and I'll fix it. If you add the inheritance, it all works—initializing a <code>LocalRot13Reader</code> skips the <code>open</code> call, but <code>close</code> and <code>dostuff</code> are inherited as expected.</span>
<span class="comment-copy">Thanks for your help. Wouldn't <code>Super(name)</code> also attach <code>self</code> (i.e. object <code>a</code>)? What happens to implicit <code>self</code> passed to <code>Super</code>?</span>
<span class="comment-copy">A new <code>self</code> which it passes to <code>Super.__init__()</code> which is returned but you are not assigning the return from <code>Super(name)</code> to a value so it is immediately discarded.</span>
<span class="comment-copy">@watchtower: There isn't just one <code>self</code> across the whole program. <code>Super(name)</code> creates a new <code>Super</code> instance to use as <code>self</code>.</span>
<span class="comment-copy">@abarnert My example actually has multiple inheritance, so I don't see how what you are saying contradicts to it. Am I missing something? Or did I just not write the answer clearly enough to make the point clear?</span>
<span class="comment-copy">Your original answer didn't have the MI. You quickly edited it to add that, and I upvoted your answer. Maybe I should have deleted my comment too? I'll do that now.</span>
