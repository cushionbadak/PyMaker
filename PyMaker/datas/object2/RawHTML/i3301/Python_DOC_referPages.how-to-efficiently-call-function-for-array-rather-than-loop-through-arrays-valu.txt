<div class="post-text" itemprop="text">
<p>I have a defined function to interpolate a dependent variable y(x) from an independent variable x. (Known values are shown in the function below.) Instead of executing it for a single value x0, I wish to execute it for an entire array [512x512] (or even [512x512x133]) of values. Is there a more elegant method than looping through each row via nested <code>for loop2 in range(0, len(target(loop1,loop2)))</code> loops? </p>
<p>I am about to rewrite this function adding nested <code>for</code> loops, but first I will read more of the Python Tutorial; currently on <a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions" rel="nofollow noreferrer">section 4.6, "Defining Functions"</a>.</p>
<pre><code>def interpSPR(target):
"""Interpolate SPR given CT value according to Kanematsu et al. 2003

We use the lookup table provided by Dr. Matsumura to interpolate SPR values
from each pixel's CT Number."""
## Input CT Number to Stopping Power Ratio (SPR) Lookup Table from XiO-N
CTvalues = [-992.516,-399.723,-152.726,  94.27054,291.868,1971.447,11081,24414]  
SPR =      [       0,   0.602,   0.913822,1.078872, 1.151456,1.900912, 6,   12]
# Check first to see if the value is one of those already in the table.
if target in CTvalues:
    for num in range(0,len(CTvalues)):
        if target == CTvalues[num]:
            return SPR[num]
# If it isn't, interpolate the value.        
else:
    for num in range(0,len(CTValues)):
        if target &lt; CTvalues[0]:
            y1,y2,x0,x1,x2 = SPR[0],SPR[1],target,CTvalues[0],CTvalues[1]
            answer = y1 - ((x1-x0)/(x2 - x1))*(y2 - y1)
            return answer
        elif target &gt; CTvalues[num] and target &lt; CTValues[num+1]:
            y1,y2,x0,x1,x2 = SPR[num],SPR[num+1],target,CTvalues[num],CTvalues[num+1]
            answer = y1 - ((x1-x0)/(x2 - x1))*(y2 - y1)
            return answer
        elif target &gt; CTvalues[-1]:
            y1,y2,x0,x1,x2 = SPR[-2],SPR[-1],target,CTvalues[-2],CTvalues[-1]
            answer = y1 - ((x1-x0)/(x2 - x1))*(y2 - y1)
            return answer
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>numpy has a builtin function for this <code>np.interp()</code>:</p>
<pre><code>import numpy as np   

def interpSPR(target):
    CTvalues = [-992.516, -399.723,   -152.726, 94.27054,  291.868, 1971.447, 11081, 24414]
    SPR =      [       0,    0.602,   0.913822, 1.078872, 1.151456, 1.900912,     6,   12]
    return np.interp(target, CTvalues, SPR)
</code></pre>
<p>It's easier to see in a plot if we change the data a little:</p>
<pre><code>CTvalues = [0, 5, 15, 20, 40]
SPR =      [2, 7,  20, 21, 50]

def interpSPR(target):
    CTvalues = [0, 5, 15, 20, 40]
    SPR =      [2, 7, 20, 21, 50]
    return np.interp(target, CTvalues, SPR)

fig, ax = plt.subplots()
ax.scatter(CTvalues, SPR)
target = np.linspace(-10, 50, 100)
ax.plot(target, interpSPR(target))
</code></pre>
<p><a href="https://i.stack.imgur.com/2sDoy.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/2sDoy.png"/></a></p>
</div>
<span class="comment-copy">I assume you are asking search algorithm. You can try binary search if it is an sorted array, and the example you provide, it is an sorted array.</span>
<span class="comment-copy">Sorry, but I don't understand your comment. I am not searching for a value within an array. I will edit my post to elaborate: Given a table listing a few known values for x and y(x), instead of interpolating a single value y0 = y(x0) given x = x0, I wish to interpolate an entire array of values given [[x00,x01...x0n],[x10,x11,...,x1n],...,[xn0,xn1,...,xnn]].</span>
<span class="comment-copy">Side note, the <code>if</code>and second <code>elif</code> are invariant in relation to <code>num</code>, so it doesn't need to belong inside the loop. My recommendation is vectorizing, if you can, the equation on the matrix to avoid using loops.</span>
<span class="comment-copy">@Miket25 please elaborate, as I have no experience with Python, learning as I go now. I think I am precisely asking <i>how</i> to vectorize, rather than write for loops. Citations to documentation and other learning resources are appreciated. (As far as that goes, I find it difficult to wade through all the different packages appearing to do the same things; having dozens of tools not sure which one ought to be used is disconcerting.)</span>
<span class="comment-copy">Vectorization, I would say, is independent of any particular language such as Python. It's writing the code in such a way that it utilizes special SIMD instructions that applies the same operation simultaneously on multiple variable at once i.e. mapping <code>f</code> on <code>[x0, x1, x2, ... xn]</code> =&gt; <code>[f(x0), f(x1), f(x2), ... f(xn)]</code> without the need for for loops. Python has the <a href="http://www.numpy.org" rel="nofollow noreferrer">numpy</a> library for vectorizing code.</span>
