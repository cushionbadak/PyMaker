<div class="post-text" itemprop="text">
<p>I have the following date range:</p>
<pre><code>begin: 2018-02-15
end: 2018-04-23
</code></pre>
<p>I want to achieve the following:</p>
<pre><code>["2018-02-15 - 2018-02-28", "2018-03-01 - 2018-03-31", "2018-04-01 - 2018-04-23"]
</code></pre>
<p>Essentially, I want to divide a given date range into months. I can't think of a way to accomplish this in Python.</p>
<p>I have considered the solution <a href="https://stackoverflow.com/questions/29721228/given-a-date-range-how-can-we-break-it-up-into-n-contiguous-sub-intervals">here</a>, however, this splits the date range based on a specified interval. I want to be able to split a date range dynamically. </p>
<p>Hence, given a date range from 15 February 2018 to 23 April 2018, I want to be able to get the individual months in the range, like so:</p>
<ul>
<li>15 February 2018 to 28 February 2018</li>
<li>01 March 2018 to 31 March 2018</li>
<li>01 April 2018 to 23 April 2018</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>In a loop; starting at the first day continually add one day till you get to the end date; whenever the month changes save the dates.</p>
<pre><code>import datetime
begin = '2018-02-15'
end = '2018-04-23'

dt_start = datetime.datetime.strptime(begin, '%Y-%m-%d')
dt_end = datetime.datetime.strptime(end, '%Y-%m-%d')
one_day = datetime.timedelta(1)
start_dates = [dt_start]
end_dates = []
today = dt_start
while today &lt;= dt_end:
    #print(today)
    tomorrow = today + one_day
    if tomorrow.month != today.month:
        start_dates.append(tomorrow)
        end_dates.append(today)
    today = tomorrow

end_dates.append(dt_end)


out_fmt = '%d %B %Y'
for start, end in zip(start_dates,end_dates):
    print('{} to {}'.format(start.strftime(out_fmt), end.strftime(out_fmt)))
</code></pre>
<p>Result:</p>
<pre><code>&gt;&gt;&gt;
15 February 2018 to 28 February 2018
01 March 2018 to 31 March 2018
01 April 2018 to 23 April 2018
&gt;&gt;&gt;
</code></pre>
<hr/>
<p>You could probably figure out a way to get a range of months between the start and end dates; create a datetime object for the first day of each of those months store them and the days just prior to them.  Dates spanning a change of year might be problematic though.</p>
</div>
<div class="post-text" itemprop="text">
<p>To work with convenient date <em>objects</em>, always use the standard module <a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer"><code>datetime</code></a>. This wraps your string formatted dates, and allows easier calculations as well as tailored output formatting.</p>
<p>Unfortunately, it seems to miss one important piece of information: the <em>last</em> day of each month, given a year (which is necessary for Februari). There is an additional module <code>calendar</code> which returns <a href="https://stackoverflow.com/q/42950">the last day for a month</a>, but since this is all you need of it and there is a simple <code>datetime</code> based function that does the same thing, I chose the latter.</p>
<p>With that, you can set any <code>begin</code> date and append it to your list, together with its last day of that month, then set <code>begin</code> to the <em>next</em> month's 1st and continue until you pass <code>end</code>.</p>
<p>A caveat/finetuning: I realized it would not work if both <code>begin</code> and <code>end</code> fall inside the <em>same</em> month. That needs an interim check, so I changed my initial <code>while begin &lt; end</code> to <code>while True</code> and moved the check for crossing the end date into a separate line.</p>
<p>Also, to cross a <em>year</em> needs a separate test again, because else the statement <code>month+1</code> will fail on December.</p>
<pre><code>import datetime

# borrowed from https://stackoverflow.com/a/13565185
# as noted there, the calendar module has a function of its own
def last_day_of_month(any_day):
    next_month = any_day.replace(day=28) + datetime.timedelta(days=4)  # this will never fail
    return next_month - datetime.timedelta(days=next_month.day)

begin = "2018-02-15"
end = "2018-04-23"

def monthlist(begin,end):
    begin = datetime.datetime.strptime(begin, "%Y-%m-%d")
    end = datetime.datetime.strptime(end, "%Y-%m-%d")

    result = []
    while True:
        if begin.month == 12:
            next_month = begin.replace(year=begin.year+1,month=1, day=1)
        else:
            next_month = begin.replace(month=begin.month+1, day=1)
        if next_month &gt; end:
            break
        result.append ([begin.strftime("%Y-%m-%d"),last_day_of_month(begin).strftime("%Y-%m-%d")])
        begin = next_month
    result.append ([begin.strftime("%Y-%m-%d"),end.strftime("%Y-%m-%d")])
    return result


date_list = monthlist(begin,end)
print (date_list)
</code></pre>
<p>results in</p>
<pre><code>[ ['2018-02-15', '2018-02-28'],
  ['2018-03-01', '2018-03-31'],
  ['2018-04-01', '2018-04-23'] ]
</code></pre>
<p>(slightly formatted for readability only)</p>
</div>
<div class="post-text" itemprop="text">
<p>Using python calendar and accounting for change of the year</p>
<pre><code>import calendar
from datetime import datetime
begin = '2018-02-15'
end= '2018-04-23'

begin_year, begin_month, begin_date = [int(i) for i in begin.split("-")]
end_year, end_month, end_date = [int(i) for i in end.split("-")]

years = end_year - begin_year
# if date range contains more than single year, we calculate total months
if years:
    months = (12 - begin_month) + end_month + (12 * (years - 1))
else:
    months = end_month - begin_month
dates = []
month = begin_month
year = begin_year

def create_datetime_object(y, m, d):
    return datetime.strptime('{}-{}-{}'.format(y, m, d), '%Y-%m-%d')
# append the first date
dates.append(create_datetime_object(begin_year, begin_month, begin_date))

for i in range(months+1):
    days_in_month = calendar.monthrange(year, month)[-1]
    if month == begin_month and year == begin_year:
        dates.append(create_datetime_object(begin_year, begin_month, days_in_month))
    elif month == end_month and year == end_year:
        dates.append(create_datetime_object(end_year, end_month, 1))
    else:
        dates.append(create_datetime_object(year, month, 1))
        dates.append(create_datetime_object(year, month, days_in_month))
    if month == 12:
        month = 0
        year += 1
    month += 1
# append the last date
dates.append(create_datetime_object(end_year, end_month, end_date))
</code></pre>
<p>And to get a list in the question, we could do something like -</p>
<p><code>dates = [datetime.strftime(dt, '%Y-%m-%d') for dt in dates]</code></p>
</div>
<span class="comment-copy">there is similar question like this <a href="https://stackoverflow.com/questions/993358/creating-a-range-of-dates-in-python" title="creating a range of dates in python">stackoverflow.com/questions/993358/…</a></span>
<span class="comment-copy">Possible duplicate of: <a href="https://stackoverflow.com/questions/29721228/given-a-date-range-how-can-we-break-it-up-into-n-contiguous-sub-intervals" title="given a date range how can we break it up into n contiguous sub intervals">stackoverflow.com/questions/29721228/…</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/29721228/given-a-date-range-how-can-we-break-it-up-into-n-contiguous-sub-intervals">Given a date range how can we break it up into N contiguous sub-intervals?</a></span>
<span class="comment-copy">What have you tried already? What did it produce and how does that fall short of what you are looking for?</span>
<span class="comment-copy">@Harley Thanks for the suggestion. I have looked at the top answer, but I'm unsure of how to adapt it to my needs. The answer splits the date range into a specified interval. I do not know how many days there could be in a specific month, hence, using the answer and splitting by an interval of 30 may not always be correct</span>
<span class="comment-copy">Upvote for mentioning crossing the year as a problem! I added a quick fix to my function, just for that.</span>
<span class="comment-copy">Exactly what I was looking for, thanks</span>
<span class="comment-copy">I believe this is incorrect for the case when the start and end coincide with the first and last days of the month?</span>
<span class="comment-copy">@mcansado, I haven't tested it yet but what error do you <i>see</i>? an extra start date at the end? I did not think of that <i>situation</i> when I wrote it. Do you think it could be fixed with some extra logic?  Is usr2564301 's answer better?</span>
<span class="comment-copy">The error seems to be that, when the dates match exactly the start and end of a month, another pair is added where the start date is the first day of the following month and the last day is the last day of the previous month. There are ways of solving it for sure, I haven't written the code for it but just thought I'd mention it here for whoever ends up here :)</span>
<span class="comment-copy">Nice! I've upvoted</span>
<span class="comment-copy">I like this, not sure why OP picked mine.!</span>
