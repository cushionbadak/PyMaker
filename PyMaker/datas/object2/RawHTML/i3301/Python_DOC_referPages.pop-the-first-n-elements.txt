<div class="post-text" itemprop="text">
<p>I've looking for about an hour now how to pop more than one element, at this point i'm thinking a one-liner doesn't exist but i wanna be sure.</p>
<p>What I want:</p>
<pre><code>list = [1, 2, 3, 4]
eles = list.pop(2)
# list becomes [3, 4]
# eles = [1, 2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>l = [1, 2, 3, 4]
eles, l = l[:2], l[2:]
print(eles)
print(l)
</code></pre>
<p>Output:</p>
<pre><code>[1, 2]
[3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do this instead:</p>
<pre><code>eles = list[:2]
list = list[2:]
</code></pre>
<p>By the way you should not name a variable <code>list</code>, since it shadows the built-in function <code>list</code>.</p>
</div>
<span class="comment-copy">Be careful how much you pop from the front of list. This requires moving the entire data structure in memory (and slicing can require extra allocations). It's better to use a <a href="https://docs.python.org/3/library/deque" rel="nofollow noreferrer">deque</a> instance instead if you need to modify the front of the list a lot.</span>
<span class="comment-copy">@EdwardMinnix The deque doesn't handle poping multiple elements so the current answer would end up doing the same thing no? And for infos, I'm gonna be popping 4 each time.</span>
<span class="comment-copy">Get things working before worrying about efficiency.</span>
<span class="comment-copy">You came to the conversation 2 days late.</span>
<span class="comment-copy">I love it. I believe this doesn't affect the "performance" when the list is big?</span>
<span class="comment-copy">According <a href="https://wiki.python.org/moin/TimeComplexity#list" rel="nofollow noreferrer">wiki.python.org/moin/TimeComplexity#list</a> the complexity of getting slice of list is O(k), so it shouldn't be.</span>
<span class="comment-copy">Slicing a list can be costly in terms of the memory usage (O(k) isn't that bad in terms of speed a hit unless it's in a loop). But slicing a list creates a new list, which can be a significant memory hit if done too often.</span>
<span class="comment-copy">Too often is? I'm gonna be doing this a lot of time to train a neural network xd.</span>
<span class="comment-copy">The naming was just an example, in your example, does the elements get removed from the list?</span>
<span class="comment-copy">Good point. I just updated my answer to update <code>list</code> as well.</span>
