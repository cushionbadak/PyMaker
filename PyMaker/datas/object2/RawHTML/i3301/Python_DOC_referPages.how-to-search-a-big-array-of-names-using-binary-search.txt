<div class="post-text" itemprop="text">
<p>I am new in python I am implementing a binary search on the big array of values where the length of Array is 258000, I have tested my code on linear search it also crashes when it exceeded maximum recursion depth, thats why I use binary. but binary not working on that big array also, as I test my code on small array it works fine, here is a code:</p>
<pre><code>A = ['John', 'William', 'James', 'Charles', 'George', 'Frank']
names = sorted(A)
print(names)
n = len(names) - 1

low = 0
high = n
key = "James"

def binarysearch(a, l, h, k):

    if h &lt; l:
        return l - 1
    mid = l + (h - l // 2)
    if k == names[mid]:
        return mid
    elif key &lt; names[mid]:
        return binarysearch(a, l, mid-1, k)
    else:
        return binarysearch(a, mid+1, h, k)

index = binarysearch(names, low, high, key)

print("The given Name ", key, "is a Place ", index)
</code></pre>
<p>I know how to increase the <code>sys.setrecursionlimit()</code> I have tried but it still kills because it exceeded the RAMs limit, <code>I have use bisect code of python and it works fine</code>, But as I am new in python I want to absorb the in-depth concept of algorithm, rather than a builtin functions, if someone can help me to correct this code I will appreciate this, thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't need recursion at all. You can do binary search in iterative way. However, even with recursion you shouldn't hit maximum recursion depth with such array. The reason you are hitting this is that you are not doing binary search correctly.</p>
<pre><code>mid = l + (h - l // 2)
</code></pre>
<p>This is obviously wrong as <code>l // 2</code> will be evaluated first. What you want is:</p>
<pre><code>mid = l + (h - l) // 2
</code></pre>
<p>Also, I don't get the rationally behind returning <code>l - 1</code> when <code>h &lt; l</code>. Normally you should return <code>-1</code> to signal that key is not found. <code>l - 1</code> at some recursive step may provide a valid index for initial call.</p>
<p>And finally, if the list is not sorted than there is no point to sort it first and then doing binary search, unless you do lots of searches on same array, since sorting will take more time than a simple linear search.</p>
</div>
<div class="post-text" itemprop="text">
<p>If the array of strings is not going to change for a long time or if it is not going to be changed very frequently and search is going to be used very frequently then you can use the Trie data structure, which will enhance your time complexity on the cost of space complexity. 
Where worst time complexity would be <code>O(length of the longest string in that array)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>That's not an enormous list, just use <code>list.index</code>. </p>
<pre><code>x = [random.random() for _ in range(258000)] + [0.99]
%timeit x.index(0.99)
# 7.97 ms ± 703 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
</code></pre>
<hr/>
<p>Example</p>
<pre><code>a = ['John', 'William', 'James', 'Charles', 'George', 'Frank']
a.index('James')  # --&gt; 2
</code></pre>
</div>
<span class="comment-copy">It seems like you are using some of the global names in your function instead of the according parameters, e.g. <code>names</code> and <code>key</code>.</span>
<span class="comment-copy">@KhanHassan It still converges to the correct index, but very slowly, just one position at a time. Thus it works for small arrays, but hits max recursion depth for larger ones.</span>
<span class="comment-copy">taskindoor thanks</span>
<span class="comment-copy">thanks but, I can not understand can you please elaborate it</span>
<span class="comment-copy">my list is A, so i use A.index but where?</span>
<span class="comment-copy">Your searching for an object in a list by implementing a custom search. It's quicker (and simpler) to just use the inbuilt <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer"><code>list.index</code></a> instead. You also don't have to sort the list.</span>
<span class="comment-copy">your answer is not useful for me, why you dont edit in my code ??</span>
<span class="comment-copy">I mention above I can use bisect method, I told above that i dont want to use built-in functions</span>
