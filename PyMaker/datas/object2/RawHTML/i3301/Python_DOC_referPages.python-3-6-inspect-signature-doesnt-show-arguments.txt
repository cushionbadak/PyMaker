<div class="post-text" itemprop="text">
<p>I have a function:</p>
<pre><code>def report(start=1, quantity=100, days_left=7, min_app_version=None):
</code></pre>
<p>I want to get argument names and default values, something like</p>
<pre><code>{'start':1, 'quantity':100, 'days_left':7, 'min_app_version':None}
</code></pre>
<p>(or at least two lists) from outside this function</p>
<p>when I do </p>
<pre><code>import inspect
print(inspect.signature(report))
</code></pre>
<p>I get</p>
<p>(*args, **kwargs)</p>
<p>Why doesn't 'inspect.signature' see function arguments?</p>
<p>SOLVED: THE PROBLEM WAS BECAUSE OF A DECORATOR</p>
</div>
<div class="post-text" itemprop="text">
<p>Even better than removing the decorator, you can tell the decorator to make the function wrapper look like the wrapped function to inspection tools using <a href="https://docs.python.org/3/library/functools.html#functools.wraps" rel="nofollow noreferrer"><code>functools.wraps</code></a></p>
<p>Instead of</p>
<pre><code>def decorator(f):
    def wrapper(*args, **kwargs):
        print("Wrapped")
        return f(*args, **kwargs)
    return wrapper

@decorator
def report(start=1, quantity=100, days_left=7, min_app_version=None):
    pass

print(inspect.signature(report))
# (*args, **kwargs)
</code></pre>
<p>You can do </p>
<pre><code>from functools import wraps

def decorator(f):
    @wraps(f)
    def wrapper(*args, **kwargs):
        print("Wrapped")
        return f(*args, **kwargs)
    return wrapper

@decorator
def report(start=1, quantity=100, days_left=7, min_app_version=None):
    pass

print(inspect.signature(report))
# (start=1, quantity=100, days_left=7, min_app_version=None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If anyone ever get stuck with this error, just delete the function decorator.</p>
<pre><code>@time_count
def report(start=1, quantity=100, days_left=7, min_app_version=None):
</code></pre>
<p>You can also help yourself with:
<a href="https://stackoverflow.com/questions/1166118/how-to-strip-decorators-from-a-function-in-python">How to strip decorators from a function in Python</a></p>
</div>
<span class="comment-copy">Seems to <a href="https://ideone.com/NuYSRH" rel="nofollow noreferrer">work fine</a> for me.</span>
<span class="comment-copy">I have Python 3.6 installed and works ok: the signature printed is <code>(start=1, quantity=100, days_left=7, min_app_version=None)</code></span>
<span class="comment-copy">Does <code>report</code> have any annotations or modified dynamically in any way? What does <code>inspect.getfullargspec(report)</code> show?</span>
<span class="comment-copy">@FHTMitchell it shows: FullArgSpec(args=[], varargs='args', varkw='kwargs', defaults=None, kwonlyargs=[], kwonlydefaults=None, annotations={})</span>
<span class="comment-copy">Great, glad you found a solution. You should post an answer to your own question (and show the code with the decorator).</span>
