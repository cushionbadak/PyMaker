<div class="post-text" itemprop="text">
<p>I want my package to be usable both with and without <a href="https://pypi.org/project/python-rapidjson/" rel="nofollow noreferrer"><code>rapidjson</code></a>, so I have the following code:</p>
<pre><code>try:
    import rapidjson as json  # https://github.com/python-rapidjson/python-rapidjson
    def pp_json(x, fd):
        "Pretty-print object to stream as JSON."
        return json.dump(x, fd, sort_keys=True, indent=1)
except ImportError:
    import json            # https://docs.python.org/3/library/json.html
    def pp_json(x, fd):
        "Pretty-print object to stream as JSON."
        return json.dump(x,fd,sort_keys=True,indent=1,separators=(',',':'))
</code></pre>
<p>my question is: how can I test this file both <em>with <strong>and</strong> without</em> <code>rapidjson</code>?</p>
<p>I would rather not do it manually like</p>
<pre><code>$ coverage3 run --source=pyapp -m unittest discover --pattern *_test.py
$ pip3 uninstall python-rapidjson
$ coverage3 run --source=pyapp -m unittest discover --pattern *_test.py
$ pip3 install python-rapidjson
</code></pre>
<p>PS. I am not actually sure that this is worth the effort, so I would accept an answer that tells me peremptorily to add <code>python-rapidjson</code> to <code>requirements.txt</code> and forget the whole thing. ;-)</p>
</div>
<div class="post-text" itemprop="text">
<p>With the <a href="http://www.voidspace.org.uk/python/mock/" rel="nofollow noreferrer">mock library</a> you can simulate that rapidjson is not installed in a specific test by patching the <code>sys.modules</code> dict.</p>
<pre><code>def test_with_import_error(self):
    with mock.patch.dict('sys.modules', {'rapidjson': None}):
       #test code with ImportError here
</code></pre>
</div>
<span class="comment-copy">Would having two virtual environments, identical but for the presence of <code>rapidjson</code>, be an acceptable answer? Or, if you prefer a tool that builds a virtualenv out of a <code>requirements.txt</code>, two separate <code>requirements.txt</code> files?</span>
<span class="comment-copy">If you want to simulate the case when <code>rapidjson</code> is not installed, you can mock <code>builtins.__import__</code> so it raises an <code>ImportError</code> on import attempt.</span>
<span class="comment-copy">@abarnert: not really: running <code>coverage</code> twice for the sake of a small snippet is no good.</span>
<span class="comment-copy">@hoefling Does that still work in 3.4+, or do you have to mock out something in <code>importlib</code>?</span>
<span class="comment-copy">Well, if you can’t run <code>coverage</code> twice, you’re probably going to need a lot more trickery—you have to not only trick the importer into not importing <code>rapidjson</code>, you have to also trick it into importing your module from scratch twice—e.g., write some code that imports your module, then mocks out rapidjson and removes your module from sys.modules, then imports your module again. Not a huge amount of code, but pretty hacky. Or, alternatively, you could use <code>importlib</code> to manually find and run your module twice, which is not very hacky, but a lot of code.</span>
<span class="comment-copy">Will this actually raise an <code>ImportError</code> rather than just setting <code>rapidjson</code> to <code>None</code>? If so, it’s a nifty solution, probably simpler than mocking the importer.</span>
<span class="comment-copy">@abarnert after you do this <code>import rapidjson</code> will throw and <code>ImportError</code>.</span>
