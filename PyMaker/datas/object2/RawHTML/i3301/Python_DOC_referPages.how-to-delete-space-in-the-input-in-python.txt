<div class="post-text" itemprop="text">
<p>I am writing a program where the user is asked to type in his name. </p>
<p>If the name starts with <code>a</code>, <code>b</code> or <code>c</code>, the program should print <code>("Your name starts with a, b or c")</code>. </p>
<p>Unfortunately if the user starts by typing in a space and then typing his name the program thinks the name starts with a space and it automatically prints <code>"Your name doesn't start with a, b or c"</code> even if the name starts with these letters. </p>
<p>I want to delete the space in the input now so this problem doesn't occure any longer.</p>
<p>So far I've tried <code>if name.startswith((" ")): name.replace(" ", "")</code> 
Thanks for any help!</p>
<pre><code>name = input("Hi, who are you?")
if name.startswith((" ")):
    name.replace(" ", "")

if name.startswith(('a', 'b', 'c')):
    print("Your name starts with a, b or c")
    print(name)
else:
    print("Your name doesn't start with a, b or c")
    print(name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>String are imutable. No operation on a string will ever change this string</p>
<p><code>name.replace(" ", "")</code> do not modify <code>name</code>but return a new string and let <code>name</code> unchange</p>
<p>So you can write </p>
<pre><code>new_name = name.replace(" ", "")
</code></pre>
<p>but you can also write</p>
<pre><code>name = name.replace(" ", "")
</code></pre>
<p>In this case, the original string is not modified. But it's name is reused to receive the result of <code>name.replace(" ", "")</code></p>
<p>Wich writing is the best depend on who you ask. I prefer the second one.</p>
</div>
<div class="post-text" itemprop="text">
<p>As people have stated in the comments, strings are immutable. This means that you can't actually change the value of an existing string - but you <strong>can</strong> create a new string that includes the changes you want to make.</p>
<p>In your case, you are using the <a href="https://docs.python.org/2/library/string.html#string.replace" rel="nofollow noreferrer"><code>.replace()</code> function</a> - this function returns a new string after the replacement has happened. A simple example:</p>
<pre><code>str = 'I am a string'
new_string = str.replace('string', 'boat')
</code></pre>
<p>Note that the variable <code>new_string</code> now contains the desired changes - "I am a boat" but the original <code>str</code> variable remains unchanged. </p>
<p>To answer your question directly, you'll need to use the variable you created after trimming the whitespace. You can even re-use the same variable:</p>
<pre><code>if name.startswith((" ")):
    name = name.replace(" ", "") # override "name" with the new value

if name.startswith(('a', 'b', 'c')):
    ...
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Strings are immutable and <code>replace</code> does not modify the string calling it, but returns a new string which you cold use directly on your code:</p>
<pre><code>name = input("Hi, who are you?")

if name.replace(" ", "").startswith(('a', 'b', 'c')):
    print("Your name starts with a, b or c")
    print(name)
else:
    print("Your name doesn't start with a, b or c")
</code></pre>
<p>You could also create a new variable or just reassign <code>name</code>:</p>
<pre><code>name = name.replace(" ", "")
</code></pre>
<p>in case you are going to use it further in your code.</p>
</div>
<span class="comment-copy">Have you tried removing the space using <code>strip</code>?</span>
<span class="comment-copy">Strings are immutable. <a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="nofollow noreferrer"><code>str.replace</code></a> returns a new string, which you're not using.</span>
<span class="comment-copy">You might want to use <a href="https://docs.python.org/3/library/stdtypes.html#str.lstrip" rel="nofollow noreferrer"><code>str.lstrip</code></a> or similar.</span>
<span class="comment-copy">Is the test for <code>a</code>, <code>b</code>, or <code>c</code> always going to be single characters? You could say <code>if name[0] in 'abc':</code></span>
<span class="comment-copy">A surprising number of other options. <code>if re.match(r'^\s*[abc]', name)</code> works as well, without the need to test for and optionally remove leading spaces.</span>
