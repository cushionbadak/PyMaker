<div class="post-text" itemprop="text">
<h2>Segmentation Fault in subprocess.stdout while displaying on QPlainTextEdit</h2>
<p>Hi,
I am starting a thread to the function shown and streaming its result to a QTextEdit object in the thread. The function sometimes crashes with a segmentation fault for unknown reasons. </p>
<pre><code>self.plainTextEdit = QPlainTextEdit()
self.thread = Thread(target = runcmd, args = ("make dc",))
self.thread.start()
self.thread.join()
def runcmd(self,cmd):
    process = subprocess.Popen(shlex.split(cmd),stdout=subprocess.PIPE, bufsize=-1)
    while True:
        line = process.stdout.readline()
        if not line:
            break
        self.plainTextEdit.moveCursor(QTextCursor.End)
        self.plainTextEdit.insertPlainText(line.strip())
    process.terminate()
</code></pre>
<p>The </p>
<blockquote>
<p>make dc</p>
</blockquote>
<p>command is a call to the design compiler synthesis tool. If I try to print the</p>
<blockquote>
<p>line</p>
</blockquote>
<p>variable instead of writing to the plainTextEdit Object the thread runs fine, displaying the result in the terminal window. Any help/advice is welcome......
Thank You</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't use QT things from a python thread. Your options:</p>
<ul>
<li>Send the data back from the thread to your main program, using a <code>queue.Queue</code> or some other similar synchronization object. Then the main program adds the data to the text widget. <a href="https://docs.python.org/3/library/queue.html#module-queue" rel="nofollow noreferrer">Documentation here.</a></li>
<li>Use a QThread, which is the QT equivalent of threads. <a href="https://pyside.github.io/docs/pyside/PySide/QtCore/QThread.html" rel="nofollow noreferrer">Documentation here</a>.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>You cannot update the Qt GUI from another thread. Fortunately for us, Qt gave us signals, and PyQt gave us <code>pyqtSignal</code>, just for this situation. There are a few ways to do it, but I prefer the following style.</p>
<pre><code>class YourClass(QtCore.QObject):
    appendSignal = pyqtSignal(str)
    def __init__(self):
        super(YourClass, self).__init__()
        self.plainTextEdit = QPlainTextEdit()
        self.appendSignal.connect(self.reallyAppendToTextEdit)
        self.appendToTextEdit = self.appendSignal.emit
        self.thread = Thread(target = runcmd, args = ("make dc",))
        self.thread.start()
        self.thread.join()
    def reallyAppendToTextEdit(self, txt):
        self.plainTextEdit.moveCursor(QTextCursor.End)
        self.plainTextEdit.insertPlainText(txt)
    def runcmd(self,cmd):
        process = subprocess.Popen(shlex.split(cmd),stdout=subprocess.PIPE, bufsize=-1)
        while True:
            line = process.stdout.readline()
            if not line:
                break
            self.appendToTextEdit(line.strip())
        process.terminate()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of using <code>subprocess.Popen()</code> you should use <code>QProcess</code> which is GUI friendly so it is not necessary to use a new thread.</p>
<pre><code>from PyQt5.QtCore import *
from PyQt5.QtWidgets import *

import shlex


class LogWidget(QWidget):
    def __init__(self, parent=None):
        super(LogWidget, self).__init__(parent)
        lay = QVBoxLayout(self)
        self.plainTextEdit = QPlainTextEdit()
        lay.addWidget(self.plainTextEdit)
        self.runcmd("make dc")

    def runcmd(self, cmd):
        process = QProcess(self)
        process.readyReadStandardOutput.connect(self.onReadyReadStandardOutput)
        process.readyReadStandardError.connect(self.onReadyReadStandardError)
        program, *arguments = shlex.split(cmd)
        process.start(program, arguments)

    def onReadyReadStandardOutput(self):
        process = self.sender()
        self.plainTextEdit.appendPlainText(str(process.readAllStandardOutput()))

    def onReadyReadStandardError(self):
        process = self.sender()
        self.plainTextEdit.appendPlainText(str(process.readAllStandardError()))


if __name__ == '__main__':
    import sys

    app = QApplication(sys.argv)
    w = LogWidget()
    w.show()
    sys.exit(app.exec_())
</code></pre>
</div>
<span class="comment-copy">I tried with QThread ... But ended up with the same result... :(</span>
<span class="comment-copy">It is not a <b>direct replacement</b> @DhanushSrinivasa - you have to move the objects between the QThreads - read the linked documentation.</span>
<span class="comment-copy">Thanks. I have a qt free thread and it works fine for now...</span>
