<div class="post-text" itemprop="text">
<p>I'm using the ast module to parse docstrings in a Python module to turn our docs into read the docs format. I'm using the following to get the function names and docstrings into a list of dicts which the rest of my code works well with. I'm looking for something to get the parameters of the function as well:</p>
<pre><code>good_file = (file for file in os.listdir() if file[-3:] == '.py' and file != '__init__.py')

functions = []

for file in good_file:
     with open(file, 'r') as f:
         module = ast.parse(f.read())

     for node in module.body:
         if isinstance(node, ast.FunctionDef):
         entry = {"docs": ast.get_docstring(node), "fn_name": node.name, "params": ???}

         functions.append(entry)
</code></pre>
<p>I'm looking for what I can use to fill in the function's parameters into the dict. Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/ast.html#abstract-grammar" rel="nofollow noreferrer"><em>Abstract Grammar</em> section of the <code>ast</code> documentation</a> tells you where to find the parameter definitions in a <code>FunctionDef</code> node:</p>
<blockquote>
<pre><code>stmt = FunctionDef(identifier name, arguments args,
                   stmt* body, expr* decorator_list, expr? returns)
</code></pre>
</blockquote>
<p>In the parameters is a sequence of <code>type name</code> entries; the names become attributes on the node. The types are further covered in the documentation (with several 'builtin' types listed at the top, which are reflected as Python strings and integers). Types with <code>*</code> after them are sequences (lists), a question mark means they can be set to <code>None</code>.</p>
<p>So each <code>FunctionDef</code> node has <code>name</code>, <code>args</code>, <code>body</code>, <code>decorator_list</code> and <code>returns</code> attributes. The <code>args</code> attribute is a new node, of type <code>arguments</code>, also documented:</p>
<blockquote>
<pre><code>arguments = (arg* args, arg? vararg, arg* kwonlyargs, expr* kw_defaults,
             arg? kwarg, expr* defaults)
</code></pre>
</blockquote>
<p>so <code>FunctionDef.args.args</code> is a list of arguments, each an <code>arg</code> object, etc.</p>
<p><code>arg</code> is documented as</p>
<blockquote>
<pre><code>arg = (identifier arg, expr? annotation)
       attributes (int lineno, int col_offset)
</code></pre>
</blockquote>
<p>where <code>identifier</code> is a built-in type, so just a string here.</p>
<p>You probably want to look at the <a href="https://docs.python.org/3/library/ast.html#ast.dump" rel="nofollow noreferrer"><code>ast.dump()</code> function</a>, which will give you a quick overview of an AST node:</p>
<pre><code>&gt;&gt;&gt; source = """def foo(bar, baz=None, *args, **kwargs): pass"""
&gt;&gt;&gt; module = ast.parse(source)
&gt;&gt;&gt; ast.dump(module)
"Module(body=[FunctionDef(name='foo', args=arguments(args=[arg(arg='bar', annotation=None), arg(arg='baz', annotation=None)], vararg=arg(arg='args', annotation=None), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[NameConstant(value=None)]), body=[Pass()], decorator_list=[], returns=None)])"
</code></pre>
<p>From there you can then explore and further 'dump' information to get to the actual data you need:</p>
<pre><code>&gt;&gt;&gt; function = module.body[0]
&gt;&gt;&gt; ast.dump(function.args)
"arguments(args=[arg(arg='bar', annotation=None), arg(arg='baz', annotation=None)], vararg=arg(arg='args', annotation=None), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=None), defaults=[NameConstant(value=None)])"
&gt;&gt;&gt; function.args.args
[&lt;_ast.arg object at 0x109852fd0&gt;, &lt;_ast.arg object at 0x109852ef0&gt;]
&gt;&gt;&gt; [a.arg for a in function.args.args]
['bar', 'baz']
</code></pre>
<p>The defaults are attached to the last names in the <code>args</code> or <code>kw_args</code> sequences (<code>defaults</code> for <code>args</code>, <code>kw_defaults</code> for <code>kwonlyargs</code>); a list of N defaults attached to the last N names in <code>args</code> or <code>kwosnlyargs</code>. Any catch-all names (<code>*args</code> and <code>**kwargs</code> in my example) are listed separately.</p>
</div>
<span class="comment-copy">Did you try looking at <code>node.args</code>?</span>
<span class="comment-copy">Do this interactively.  Try <code>dir(node)</code> and see what attributes are available and just poke around.</span>
<span class="comment-copy">Thanks! Do you know how to get the default values of the parameters as well?</span>
<span class="comment-copy">@tiggerae: that's already part of my answer, in the last paragraph. <code>arguments.defaults</code> is a list of AST nodes that form the default value expressions.</span>
<span class="comment-copy">@tiggerae: pair those up with argument names from the <code>args</code> list, but only the last <code>len(defaults)</code> names. So if you have 5 arguments, and 3 defaults, only the last 3 names have defaults.</span>
