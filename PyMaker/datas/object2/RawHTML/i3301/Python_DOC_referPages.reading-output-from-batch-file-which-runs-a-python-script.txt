<div class="post-text" itemprop="text">
<p>I have a batch file which runs a Python script. This script simulates data that is printed 3 lines at a time every 5 seconds. Below is the simple code I have.</p>
<pre><code>while True:
    print("Some Data")
    print("More Data")
    print("Some More Data")

    time.sleep(5)
</code></pre>
<p>So, when running the batch file, these 3 lines are printed every 5 seconds in cmd. Is there a way for me to log these every 5 seconds to a single .txt file?</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Is there a way for me to log these every 5 seconds to a single .txt file?</p>
</blockquote>
<p>Yes. Two and a half ways, in fact.</p>
<hr/>
<p>First, you can modify the Python script to write to a text file instead of stdout:</p>
<pre><code>with open('logfile.txt', 'w') as f:
    while True:
        print("Some Data", file=f)
        print("More Data", file=f)
        print("Some More Data", file=f)

        time.sleep(5)
</code></pre>
<hr/>
<p>Or, if you want to be able to pass it a filename instead of hardcoding <code>logfile.txt</code>:</p>
<pre><code>import sys

filnename = sys.argv[1]
with open(filename, 'w') as f:
    while True:
        print("Some Data", file=f)
        print("More Data", file=f)
        print("Some More Data", file=f)

        time.sleep(5)
</code></pre>
<p>Now your batch file would do this:</p>
<pre><code>py myscript.py logfile.txt
</code></pre>
<hr/>
<p>Of course in both of these cases, you don't have to use the <code>file=</code> argument to <code>print</code>; you could instead use <code>f.write("Some Data\n")</code> directly if you need more control over the file, or use <a href="https://docs.python.org/3/howto/logging.html#logging-basic-tutorial" rel="nofollow noreferrer">the <code>logging</code> module</a> to magically do fancier logging (e.g., with automatic timestamps).</p>
<hr/>
<p>Alternatively, you can leave the Python script alone, and instead modify the batch file to use <a href="https://support.microsoft.com/en-us/help/110930/redirecting-error-messages-from-command-prompt-stderr-stdout" rel="nofollow noreferrer">shell redirection</a>:</p>
<pre><code>py myscript.py &gt;logfile.txt
</code></pre>
</div>
<span class="comment-copy">It would help if you showed us the batch file (or a stripped-down version).</span>
<span class="comment-copy">Also, you say here that you have a batch file that runs a Python script. But in a comment on my answer, you say that you have a Python script that runs a batch file. Which one is it? Please read <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> in the help; it’s hard to know what needs to go into a question when you first start at SO, but the help does a pretty good job guiding you.</span>
<span class="comment-copy">Ok . I guess I should elaborate a bit further. My Python script just simulates what I would see the output as. So, going into the Python script and writing to a file wouldn't solve my problem. What I need to do is read from the batch file which produces these 3 lines every 5 seconds and log them to a .txt file</span>
<span class="comment-copy">@ArthurBuczynski Please edit your question to be closer to what you’re actually asking, and to have enough information to be answerable. But if I can take a wild guess: you’re probably running the batch script with <code>os.system</code>? If you read the docs for that function, it will explain that you want to use the <code>subprocess</code> module instead, and link you to the right place to find explanations and examples. I could find you a duplicate question here that covers the same ground, but in this case, the actual docs are a whole lot better.</span>
