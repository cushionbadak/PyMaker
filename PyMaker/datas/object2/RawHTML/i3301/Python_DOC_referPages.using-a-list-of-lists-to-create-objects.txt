<div class="post-text" itemprop="text">
<p>I want to keep a list of temperature probes that will be taking temperature readings periodically. I want to store the arguments needed to create each instance of the temperature probe object in a list of lists. I then want to create each instance from this list of lists and name each object using index 0 of each nested list.</p>
<p>For example, I want the instances Probe1, Probe2, and Probe3 created with their corresponding arguments. I then want to take a temperature reading from each probe in the list. </p>
<p>I want to be able to add unlimited probes without having to change the code down the line.</p>
<p>The issue I'm running into is when I try and do anything with Probe1, Probe2, or Probe3 python tells me they don't exist. I'm new to programming and I'm sure I'm missing something obvious.</p>
<pre><code>class max31865(object):
    def __init__(self, name, R_REF, csPin):
        self.name = name
        self.R_REF = R_REF
        self.csPin = csPin

    def readTemp(self):
        #code here to check temp


probe_list=[["Probe1", 430, 8],["Probe2", 430, 9],["Probe3", 430, 10]]

for probe in probe_list:
    x = str(probe[0])
    x = max31865(*probe)

for probe in probe_list:
    readTemp(probe[0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'm not sure what you want exactly but here are two likely usecases based on your question:</p>
<h2>You want a simple list of probe objects, generated from a list of initialization arguments:</h2>
<p>The most straightforward way to do this is with the iterable unpacking operator (<code>*</code>) in combination with <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>probe_list = [["Probe1", 430, 8],["Probe2", 430, 9],["Probe3", 430, 10]]
probe_obj_list = [max31865(*probe) for probe in probe_list]
</code></pre>
<p>Now you can call <code>readTemp()</code> on each object in the list, like so:</p>
<pre><code>probe_obj_list[1].readTemp() # Read the temperature of the second object
</code></pre>
<p>Or do it in a loop:</p>
<pre><code>for probe in probe_obj_list:
    probe.readTemp()
</code></pre>
<h2>You want to be able to find probe objects by name:</h2>
<p>Consider using a <a href="https://docs.python.org/3/library/stdtypes.html?highlight=map#mapping-types-dict" rel="nofollow noreferrer">dictionary</a> (also known as a map).</p>
<pre><code>probe_list = [["Probe1", 430, 8],["Probe2", 430, 9],["Probe3", 430, 10]]
probe_obj_map = {probe[0] : max31865(*probe) for probe in probe_list} # Dict comprehension
</code></pre>
<p>Now you can access the probe objects by name like so:</p>
<pre><code>probe_obj_map["Probe1"].readTemp() # Accessing the object mapped to by the string "Probe1"
</code></pre>
<p>And if you needed to loop through <code>probe_list</code> and find objects by name, you can (although i'm not sure why you would need to do that):</p>
<pre><code>for probe_args in probe_list:
    probe_obj_map[probe_args[0]].readTemp() # Access the object mapped to by the first argument of the nested list (i.e. the name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Code corrections:</p>
<pre><code>class Max31865(object):
    def __init__(self, name, R_REF, csPin): # missing `:` here
        self.name = name
        self.R_REF = R_REF
        self.csPin = csPin

    def read_temp(self):
        # code here to check temp
        # print the object's attributes or do anything you want
        print('Printing in the method: ', self.name, self.R_REF, self.csPin)


probe_list=[["Probe1", 430, 8],["Probe2", 430, 9],["Probe3", 430, 10]]

for probe in probe_list:
    # x = str(probe[0]) # probe[0] already is str
    x = Max31865(*probe) # Here x is instantiated as `Max31865` object
    print('Printing in the loop: ', x.name, x.R_REF, x.csPin)
    x.read_temp() # Then call the `read_temp()` method.

# for probe in probe_list:
#     readTemp(probe[0])
# This loop is confusing, just as @RafaelC noted in comment,
# 1. `readTemp` is a *method* of `Max31865` object, not a function you can call directly.
# 2. `readTemp` has no argument in it's definition, and you are giving one.
</code></pre>
</div>
<span class="comment-copy">There are many problems here. First of all, after each iteration, you are <i>overwriting</i> your <code>x</code> variable, so you basically lose all previously instantiated objects of <code>max31865</code>. Second, you are trying to call <code>readTemp</code>, which is a method defined in your <code>max31865</code> class, from an outer scope, which is not possible. I am not sure what you are trying to accomplish here</span>
<span class="comment-copy">If you have an error message please include it in the question. It's a great way to give specific information about your error, that you may not have realised was helpful or relevant.</span>
<span class="comment-copy">Hi Tomforge, thanks for the answer. This is what I was looking for. Much appreciated!</span>
<span class="comment-copy">@JasonArsenault Do mark it as the accepted answer if that's the case. You're welcome!</span>
