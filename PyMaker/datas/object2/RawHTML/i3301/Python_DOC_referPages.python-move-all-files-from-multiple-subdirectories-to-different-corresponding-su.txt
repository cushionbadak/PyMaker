<div class="post-text" itemprop="text">
<p>Im working on a python script taking all the files in sub folders inside a folder and move to another folder that has identically structured sub folders. (see picture)</p>
<p><a href="https://puu.sh/ATMwe/ee95ece29e.png" rel="nofollow noreferrer">picture</a></p>
<p>My script currently just grabs all the files from directories and move to another folder location. Is there an elegant way to do this? I'm dealing with 31 sub directories inside a folder so hard coding for all 31 would be tedious </p>
<p>thanks a lot</p>
<pre><code>import shutil
import os
src = r'C:\folderA'
dst = r'C:\folderB'

for root, subdirs, files in os.walk(src):
    for file in files:
        path = os.path.join(root, file)
        shutil.move(path, dst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/os.path.html#os.path.relpath" rel="nofollow noreferrer"><code>os.path.relpath</code></a> to obtain the relative path to <code>src</code> and then join the relative path with <code>dst</code> to obtain the new path name:</p>
<pre><code>import shutil
import os
src = r'C:\folderA'
dst = r'C:\folderB'

for root, subdirs, files in os.walk(src):
    for file in files:
        path = os.path.join(root, file)
        shutil.move(path, os.path.join(dst, os.path.relpath(path, src)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To address the multiple directories, you can build a dict of <code>{'src':'dest'}</code> pairs:</p>
<pre><code>import shutil
import os
src_dst_map = {
   r'C:\folderA' : r'C:\folderB',
   r'C:\folderC' : r'C:\folderD'
} #ect

for src, dst in src_dst_map.items():
   for root, subdirs, files in os.walk(src):
      for file in files:
         path = os.path.join(root, file)
         shutil.move(path, dst)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, if you're in the mood for something hacky, IIRC, you can call <a href="https://docs.python.org/3/library/shutil.html#shutil.copytree" rel="nofollow noreferrer"><code>copytree</code></a> and pass <code>move</code> rather than <code>copy2</code> as the copier, and it ends up moving all of the files to the right place, but on either Unix or Windows (I forget which) it leaves empty directories behind instead of nothing. But that's trivial to clean up:</p>
<pre><code>shutil.copytree(src, dst, function=shutil.move)
shutil.rmtree(src)
</code></pre>
<hr/>
<p>If you don't want something hacky:</p>
<p>From your diagram, it seems like you just have 31 subdirectories all directly under the source directory, not nested underneath each other. So, trying to walk the whole hierarchy recursively with <code>walk</code>, and then trying to reassemble the paths properly, etc. is just making things more complicated, and probably even less efficient.</p>
<p>All you have to do is get those 31 directories, and <code>move</code> them. For example, using <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer"><code>scandir</code></a>:</p>
<pre><code>for entry in os.scandir(src):
    if entry.is_dir():
        shutil.move(entry.path, dst)
</code></pre>
<p>Or, if you have files as well as directories at the top level, it's even simpler:</p>
<pre><code>for entry in os.scandir(src):
    shutil.move(entry.path, dst)
</code></pre>
<p>If you're on an old version of Python that doesn't have <code>scandir</code>, you'll have to use <code>listdir</code>, but that's only a tiny bit more difficult:</p>
<pre><code>for name in os.listdir(src):
    shutil.move(os.path.join(src, name), dst)
</code></pre>
</div>
