<div class="post-text" itemprop="text">
<p>I have a class that takes in positional arguments (<code>startDate</code>, <code>endDate</code>, <code>unmappedDir</code>, and <code>fundCodes</code>), I have the following methods:</p>
<p>The method below is supposed to take in a an array of <code>fundCodes</code> and look in a directory and see if it finds files matching a certain format</p>
<pre><code>def file_match(self, fundCodes):
    # Get a list of the files in the unmapped directory
    files = os.listdir(self.unmappedDir)

    # loop through all the files and search for matching fund code
    for check_fund in fundCodes:

        # set a file pattern
        file_match = 'unmapped_positions_{fund}_{start}_{end}.csv'.format(fund=check_fund, start=self.startDate, end=self.endDate)
        # look in the unmappeddir and see if there's a file with that name
        if file_match in files:
            # if there's a match, load unmapped positions as etl
            return self.read_file(file_match)
        else:
            Logger.error('No file found with those dates/funds')
</code></pre>
<p>The other method is simply supposed to create an etl table from that file. </p>
<pre><code>def read_file(self, filename):
    loadDir = Path(self.unmappedDir)
    for file in loadDir.iterdir():
        print('*' *40)
        Logger.info("Found a file : {}".format(filename))
        print(filename)
        unmapped_positions_table = etl.fromcsv(filename)
        print(unmapped_positions_table)
        print('*' * 40)
        return unmapped_positions_table
</code></pre>
<p>When running it, I'm able to retrieve the filename:</p>
<p><code>Found a file : unmapped_positions_PUPSFF_2018-07-01_2018-07-11.csv
unmapped_positions_PUPSFF_2018-07-01_2018-07-11.csv</code></p>
<p>But when trying to create the table, I get this error:</p>
<p><code>FileNotFoundError: [Errno 2] No such file or directory: 'unmapped_positions_PUPSFF_2018-07-01_2018-07-11.csv'</code></p>
<p>Is it expecting a full path to the filename or something?</p>
</div>
<div class="post-text" itemprop="text">
<p>The proximate problem is that you need a full pathname.</p>
<p>The <code>filename</code> that you're trying to call <code>fromcsv</code> on is passed into the function, and ultimately came from <code>listdir(self.unmappedDir)</code>. This means it's a path relative to <code>self.unmappedDir</code>. </p>
<p>Unless that happens to also be your current working directory, it's not going to be a valid path relative to the current working directory.</p>
<p>To fix that, you'd want to use <code>os.path.join(self.unmappedDir, filename)</code> instead of just <code>filename</code>. Like this:</p>
<pre><code>return self.read_file(os.path.join(self.unmappedDir), file_match)
</code></pre>
<p>Or, alternatively, you'd want to use <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> objects instead of strings, as you do with the <code>for file in loadDir.iterdir():</code> loop. If <code>file_match</code> is a <code>Path</code> instead of a dumb string, then you can just pass it to <code>read_file</code> and it'll work.</p>
<hr/>
<p>But, if that's what you actually want, you've got a lot of useless code. In fact, the entire <code>read_file</code> function should just be one line:</p>
<pre><code>def read_file(self, path):
    return etl.fromcsv(path)
</code></pre>
<p>What you're doing instead is looping over every file in the directory, then ignoring that file and reading <code>filename</code>, and then returning early after the first one. So, if there's 1 file there, or 20 of them, this is equivalent to the one-liner; if there are no files, it returns <code>None</code>. Either way, it doesn't do anything useful except to add complexity, wasted performance, and multiple potential bugs.</p>
<p>If, on the other hand, the loop <em>is</em> supposed to do something meaningful, then you should be using <code>file</code> rather than <code>filename</code> inside the loop, and you almost certainly shouldn't be doing an unconditional <code>return</code> inside the loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>with this:</p>
<pre><code>files = os.listdir(self.unmappedDir)
</code></pre>
<p>you're getting the file <em>names</em> of <code>self.unmappedDir</code></p>
<p>So when you get a match on the name (when generating your name), you have to read the file <em>by passing the full path</em> (else the routine probably checks for the file in the <em>current directory</em>):</p>
<pre><code>return self.read_file(os.path.join(self.unmappedDir,file_match))
</code></pre>
<p>Aside: use a <code>set</code> here:</p>
<pre><code>files = set(os.listdir(self.unmappedDir))
</code></pre>
<p>so the filename lookup will be much faster than with a <code>list</code></p>
<p>And your <code>read_file</code> method (which I didn't see earlier) should just open the file, instead of scanning the directory again (and returning at first iteration anyway, so it doesn't make sense):</p>
<pre><code>def read_file(self, filepath):
    print('*' *40)
    Logger.info("Found a file : {}".format(filepath))
    print(filepath)
    unmapped_positions_table = etl.fromcsv(filepath)
    print(unmapped_positions_table)
    print('*' * 40)
    return unmapped_positions_table
</code></pre>
<p>Alternately, don't change your main code (except for the <code>set</code> part), and prepend the directory name in <code>read_file</code> since it's an instance method so you have it handy.</p>
</div>
<span class="comment-copy">Your code doesn't check that the file exists, it iterates through the directory (to the variable <code>file</code>) but you are passing in <code>filename</code> when you try and read the csv, when there is no guarantee that <code>filename</code> exists.</span>
<span class="comment-copy">you need to join the source directory, you're opening the <i>filename</i> only. Like this <code>read_file(os.path.join(self.unmappedDir,file_match))</code></span>
<span class="comment-copy">I guess <code>pathlib</code> objects make more sense. I'm looking at the documentation, but having a little trouble wrapping my head around how to write that. Thanks anyway. I'll try re-writing it with path objects eventually.</span>
<span class="comment-copy">@user7496931 The only reason I brought it up is that you're already using <code>pathlib</code> objects in your <code>read_file</code> method, and you're getting that part right (even if you're not actually doing anything with the resulting paths).</span>
<span class="comment-copy">Noted. Thanks. I understood the issue. I'm currently an intern, and there's so much code that I feel could be written in much better ways. I've noticed that I'm copy pasting a lot of code from the codebase and I really need to understand how a lot of these libraries work before implementing them.</span>
<span class="comment-copy">@user7496931 Reading the docs (and searching for a tutorial if you don't understand them) whenever you first encounter a new module will help you pick up that kind of information very quickly, if you've got the time to do it. By the way, in any large project, 80% of the code sucks. You can often refactor little bits, but the really hard part in software is learning which of the big bits should be refactored and which shouldn't, given that they almost all suck and you can't just keep rewriting everything or version N+1 has no new functionality (or, more likely, never comes out, like Mozilla 5).</span>
<span class="comment-copy">Awesome, bless your soul.</span>
<span class="comment-copy">Gotcha, makes sense now. I was trying to open a filename without its source. Hmm.. thinking about this now, it might be a bit redundant to iterate again in my <code>read_file</code> method right? That should simply read/create a table from a filename.</span>
<span class="comment-copy">yes, I didn't notice that you posted the code for read_file, and that it included <i>another</i> directory scan</span>
<span class="comment-copy">Noted, just fixed it and it's working. Thank you!</span>
