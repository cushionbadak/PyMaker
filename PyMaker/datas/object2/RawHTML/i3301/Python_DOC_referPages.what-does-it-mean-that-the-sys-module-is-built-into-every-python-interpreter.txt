<div class="post-text" itemprop="text">
<p>I am going through the official Python tutorial, and it says</p>
<blockquote>
<p>One particular module deserves some attention: sys, which is built into every  Python interpreter.</p>
</blockquote>
<p>However, if I start the python interpreter and type, for example, <code>sys.path</code>, I get a <code>NameError: name sys is not defined</code>. </p>
<p>Thus, I need to import <code>sys</code> if I want to have access to it. </p>
<p>So what does it mean that it is 'built into every python interpreter' ? </p>
</div>
<div class="post-text" itemprop="text">
<p>It simply means that</p>
<pre><code>import sys
</code></pre>
<p>will succeed, regardless of which version of Python you're using.  It comes with every Python installation.  In contrast, e.g.,</p>
<pre><code>import mpmath
</code></pre>
<p>will fail unless you've installed the <code>mpmath</code> package yourself, or it came bundled with the specific Python installation you're using.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>So what does it mean that it is 'built into every python interpreter'
  ?</p>
</blockquote>
<p>The <code>sys</code> module is <a href="https://github.com/python/cpython/blob/3.7/Python/sysmodule.c" rel="nofollow noreferrer">written in C</a> and compiled into the Python interpreter itself. Depending on the version of the interpreter, there may be more modules of this kind â€” <a href="https://docs.python.org/3/library/sys.html#sys.builtin_module_names" rel="nofollow noreferrer"><code>sys.builtin_module_names</code></a> lists them all.<br/>
As you have noticed, a built-in module still needs to be <code>import</code>ed like any other extension.</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.builtin_module_names
('_ast', '_codecs', '_collections', '_functools', '_imp', '_io', '_locale', '_operator', '_signal', '_sre', '_stat', '_string', '_symtable', '_thread', '_tracemalloc', '_warnings', '_weakref', 'atexit', 'builtins', 'errno', 'faulthandler', 'gc', 'itertools', 'marshal', 'posix', 'pwd', 'sys', 'time', 'xxsubtype', 'zipimport')
</code></pre>
</div>
<span class="comment-copy">It means that you do not have to install it.</span>
<span class="comment-copy">Thanks! Does this mean that all modules of the standard library are 'built-in'? Or are there some modules of the standard library that also depend on the specific installation? I'm asking because I looked at <code>mpmath</code> and it's not part of the standard library, so I'm wondering if that's the reason why it's different.</span>
<span class="comment-copy">Pretty much, except you need to apply common sense too.  For example, the "The Python Standard Library" document describes the <code>nis</code> module too, which is an interface to "Sun Microsystem's NIS (Yellow Pages)",  That doesn't exist on Windows, because it makes no sense on that OS.  Much the same is true of all the modules described under the "Unix Specific Services" section of the stdlib manual.  The vast majority of the modules described in that doc are available in all Python installations, though.</span>
<span class="comment-copy">BTW, if you're new to Python, be aware that there are literally thousands of modules available (like <code>mpmath</code>) that aren't even mentioned in Python's documentation.  You generally need to install those yourself if you want them, and they aren't maintained in the core Python project.  All the "standard library" modules are part of the core Python project.</span>
