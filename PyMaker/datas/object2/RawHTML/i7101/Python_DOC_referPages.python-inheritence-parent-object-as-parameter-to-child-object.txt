<div class="post-text" itemprop="text">
<p>I am having some issues with an inheritence model. i want to create a new child object from  a given parent object and i would like to access those properties.
Here is a simplified model of my structure.</p>
<pre><code>class foo:
def __init__(self,id,name):
    self.id = id
    self.name = name

class bar(foo):
    pass

new = foo(id='1',name='Rishabh')

x = bar(new)

print(x.name)
</code></pre>
<p>I want all the attributes from the new object to be inherited in the x object.
Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>At first, as <a href="https://www.python.org/dev/peps/pep-0008/#class-names" rel="nofollow noreferrer">PEP8 Style Guide</a> says, <strong>"Class names should normally use the CapWords convention."</strong> So you should rename your classes to be <code>Foo</code> and <code>Bar</code>.</p>
<p>Your task can be done by using <a href="https://docs.python.org/3/library/stdtypes.html#object.__dict__" rel="nofollow noreferrer"><code>object.__dict__</code></a> and by overriding the <code>__init__</code> method in your child class (<code>Bar</code>)</p>
<pre><code>class Foo:
    def __init__(self, id, name):
        self.id = id
        self.name = name


class Bar(Foo):
    def __init__(self, *args, **kwargs):
        # Here we override the constructor method
        # and pass all the arguments to the parent __init__()

        super().__init__(*args, **kwargs)


new = Foo(id='1',name='Rishabh')

x = Bar(**new.__dict__)
# new.__dict__() returns a dictionary
# with the Foo's object instance properties:
# {'id': '1', 'name': 'Rishabh'}

# Then you pass this dictionary as
# **new.__dict__
# in order to resolve this dictionary into keyword arguments
# for the Bar __init__ method

print(x.name)  # Rishabh
</code></pre>
<p>But this is not a conventional way of doing things. If you want to have an instance, that is a copy of another, you should probably use the <code>copy</code> module and do not do this overkill.</p>
</div>
<span class="comment-copy">Have you tried importing copy and then  x=copy.copy(new)</span>
<span class="comment-copy">HI Banny Thanks for the reply. I just tried copy after your suggestion. but i was still wondering if there was any feature that allowed inheriting the object as a parameter.</span>
<span class="comment-copy">What you are describing as "inheriting" isn't inheritance in the object-oriented sense, it is in fact much more like copying.</span>
<span class="comment-copy">Alrighty then.. I guess I have some reading to do there.. Thanks for your help</span>
<span class="comment-copy">See @wenckisa's answer, it's pretty hard to use - much easier to use copy.</span>
<span class="comment-copy">I guess i will go for copy then</span>
