<div class="post-text" itemprop="text">
<p>When I write this code:</p>
<pre><code>f=['a','b','c',['d','e','f']]
def j(f):
    p=f[:]
    for i in range(len(f)):
        if type(p[i]) == list:
            p[i].reverse()
    p.reverse()
    return p
print(j(f), f)
</code></pre>
<p>I expect that the result would be:</p>
<blockquote>
<p>[['f', 'e', 'd'], 'c', 'b', 'a'] ['a', 'b', 'c', ['d', 'e', 'f']]</p>
</blockquote>
<p>But the result I see is:</p>
<blockquote>
<p>[['f', 'e', 'd'], 'c', 'b', 'a'] ['a', 'b', 'c', ['f', 'e', 'd']]</p>
</blockquote>
<p>Why? And how can I write a code that do what I expect?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>reverse</code> modifies the list in place, you actually want to create a new list, so you don't reverse the one you've got, something like this:</p>
<pre><code>def j(f):
    p=f[:]
    for i in range(len(f)):
        if type(p[i]) == list:
            p[i] = p[i][::-1]
    p.reverse()
    return p
</code></pre>
</div>
<span class="comment-copy">You were careful to copy the outer list, but this does not perform a <i>deep copy</i> - the interior list is still referring to the same list as <code>f</code> inside your function. Take a look at <a href="https://docs.python.org/3/library/copy.html#copy.deepcopy" rel="nofollow noreferrer"><code>copy.deepcopy</code></a>.</span>
<span class="comment-copy">You are seeing a side-effect of the fact that <a href="https://stackoverflow.com/questions/13530998/python-variables-are-pointers">variables store references to lists, not the lists themselves</a>, so when you do <code>p[i].reverse()</code>, you are also reversing the list stored in <code>f</code> as well.</span>
<span class="comment-copy">Better to make the initial copy correctly: <code>p = copy.deepcopy(f)</code></span>
