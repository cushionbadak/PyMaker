<div class="post-text" itemprop="text">
<p>I'm working with code that was written for an earlier version of Python.</p>
<pre><code>TensorShape = namedtuple('TensorShape', ['batch_size', 'channels', 'height', 'width'])
</code></pre>
<p>Later on, I have this (abridged) code:</p>
<pre><code>s = [hdr, '-' * 94]
...
s.append('{:&lt;20} {:&lt;30} {:&gt;20} {:&gt;20}'.format(node.kind, node.name, data_shape,
                                                          tuple(out_shape)))
</code></pre>
<p>which blows up on <code>tuple(out_shape)</code> with the exception</p>
<pre><code>TypeError: unsupported format string passed to tuple.__format__
</code></pre>
<p>because <code>out_shape</code> is a <code>TensorShape</code> and it doesn't have a <code>__format__</code> method defined.</p>
<p>So I'm changing the definition of <code>TensorShape</code> to</p>
<pre><code>def format_tensorshape(format_spec):
    return format("{0} {1} {2} {3}")

TensorShape = namedtuple('TensorShape', ['batch_size', 'channels', 'height', 'width'])
TensorShape.__format__ = format_tensorshape
</code></pre>
<p>But this code still blows up downstream with the same exception.</p>
<p>What am I doing wrong?</p>
</div>
<div class="post-text" itemprop="text">
<p>You were on the right track -- just hook up the <a href="https://docs.python.org/3/reference/datamodel.html#object.__format__" rel="nofollow noreferrer">two arguments</a> passed to <code>format_tensorshape</code> to your call to <a href="https://docs.python.org/3/library/functions.html#format" rel="nofollow noreferrer"><code>format</code></a>:</p>
<pre><code>import collections
def format_tensorshape(self, format_spec):
    return format("{0} {1} {2} {3}".format(*self), format_spec)

TensorShape = collections.namedtuple('TensorShape', ['batch_size', 'channels', 'height', 'width'])
TensorShape.__format__ = format_tensorshape

out_shape = TensorShape(1,2,3,4)
print('{:&gt;20}'.format(out_shape))
</code></pre>
<p>yields</p>
<pre><code>             1 2 3 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could simply use the formatting based on the string representation. That's possible with the <code>!s</code> conversion flag and because strings know how to interpret your formatting spec there is no need to create a custom <code>__format__</code> method for your <code>namedtuple</code>:</p>
<pre><code>s.append('{:&lt;20} {:&lt;30} {:&gt;20} {!s:&gt;20}'.format(node.kind, node.name, data_shape,
                                                tuple(out_shape)))
#                               ^^---- here I added the !s
</code></pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; TensorShape = namedtuple('TensorShape', ['batch_size', 'channels', 'height', 'width'])
&gt;&gt;&gt; '{!s:&gt;20}'.format(tuple(TensorShape(1,1,1,1)))
'        (1, 1, 1, 1)'
</code></pre>
</div>
<span class="comment-copy">What behavior do you expect from <code>{:&gt;20}</code> when applied to a tuple?  Calling <code>tuple(out_shape)</code> is a no-op (<code>out_shape</code> is already a tuple), but you can simply call <code>str(out_shape)</code> if you want to display it as <code>(batch_size, channels, height, width)</code>.  And since that's a string, formatting directivesshould work as expected.</span>
<span class="comment-copy">@larsks if you use str(out_shape) then you get the names of the class and methods as well as the values, not (batch_size, channels, height, width).</span>
<span class="comment-copy">Right, <code>str(tuple(...))</code>, I guess.</span>
