<div class="post-text" itemprop="text">
<p>Not sure if this is even possible, but my goal is to create a base abstract class that uses an enumerator as a subclass.</p>
<p>Here is the code so far and what is/isn't working. I'd like to somehow be able to reference the "class Colors(Enum)" in my "IdealUse" class. Any thoughts on what needs to be changed?</p>
<p>BaseClass.py</p>
<pre><code>from abc import ABCMeta, abstractmethod
from enum import Enum


class Base(metaclass=ABCMeta):

    default_color = 'yellow'

    @abstractmethod
    def get_a(self):
        pass

class Colors(Enum):
    blue = 1
    green = 2
    red = 3

Base.register(Colors)
</code></pre>
<p>IdealUse.py</p>
<pre><code>from abstractbase import Base

class IdealUse(Base):

    def __init__(self):
        self.value_of_a = self.get_a()  # this works
        self.ideal_color = self.default_color  # this works
        self.color_of_sky = self.Colors(1)  # does not work

    def get_a(self):
        return 'working'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Again, thank you to those who replied. Just getting me to rethink the terms and what I was asking led me to a working solution.</p>
<p>BaseClass.py</p>
<pre><code>from abc import ABCMeta, abstractmethod
from enum import Enum

class Colors(Enum):
    BLUE = 1
    GREEN = 2
    RED = 3


class Base(metaclass=ABCMeta):

    default_color = 'yellow'
    color_list = Colors

    @abstractmethod
    def get_a(self):
        pass
</code></pre>
<p>IdealUse.py</p>
<pre><code>from abstractbase import Base

class IdealUse(Base):

    def __init__(self):
        self.value_of_a = self.get_a()  # this works
        self.ideal_color = self.default_color  # this works
        self.color_of_sky = self.color_list(1)  # now it returns blue!

    def get_a(self):
        return 'working'
</code></pre>
</div>
<span class="comment-copy"><code>self.Colors</code> - what does that evaluate to? Hint 1: there is no 'Colors' method/attribute. Hint 2: <a href="https://docs.python.org/3/library/abc.html" rel="nofollow noreferrer">the documentation</a> makes no allusion to this being expected behavior.</span>
<span class="comment-copy">It sounds like you might not be clear on what "subclass" means. "X is a subclass of Y" means "X is a kind of Y", not "the Y class has an X attribute".</span>
<span class="comment-copy">Thanks to the users that replied, I spent a couple hours doing research and reviewing the documentation. Which means I probably should've taken a break before posting. Really, it took comments from others to get a better perspective of how to describe what I'm doing. I think maybe the right question and proper terms would be -- how to make an enumerator a member of an abstract class? And really, it could be... how to make anything a member of a class? In other words, I was overthinking it all. I posted the working code as an answer. Maybe it'll help other beginners who get analysis paralysis.</span>
