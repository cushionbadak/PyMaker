<div class="post-text" itemprop="text">
<p>How can I load a Python module given its full path? Note that the file can be anywhere in the filesystem, as it is a configuration option.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3.5+ use:</p>
<pre><code>import importlib.util
spec = importlib.util.spec_from_file_location("module.name", "/path/to/file.py")
foo = importlib.util.module_from_spec(spec)
spec.loader.exec_module(foo)
foo.MyClass()
</code></pre>
<p>For Python 3.3 and 3.4 use:</p>
<pre><code>from importlib.machinery import SourceFileLoader

foo = SourceFileLoader("module.name", "/path/to/file.py").load_module()
foo.MyClass()
</code></pre>
<p>(Although this has been deprecated in Python 3.4.)</p>
<p>Python 2 use:</p>
<pre><code>import imp

foo = imp.load_source('module.name', '/path/to/file.py')
foo.MyClass()
</code></pre>
<p>There are equivalent convenience functions for compiled Python files and DLLs.</p>
<p>See also. <a href="http://bugs.python.org/issue21436" rel="noreferrer">http://bugs.python.org/issue21436</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.  For example:</p>
<pre><code>import sys
# the mock-0.3.1 dir contains testcase.py, testutils.py &amp; mock.py
sys.path.append('/foo/bar/mock-0.3.1')

from testcase import TestCase
from testutils import RunTests
from mock import Mock, sentinel, patch
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also do something like this and add the directory that the configuration file is sitting in to the Python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case "config".</p>
<p>Messy, but it works.</p>
<pre><code>configfile = '~/config.py'

import os
import sys

sys.path.append(os.path.dirname(os.path.expanduser(configfile)))

import config
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you don't want to specifically import the configuration file (which has a whole lot of side effects and additional complications involved), you just want to run it, and be able to access the resulting namespace. The standard library provides an API specifically for that in the form of <a href="https://docs.python.org/3/library/runpy.html#runpy.run_path" rel="noreferrer">runpy.run_path</a>:</p>
<pre><code>from runpy import run_path
settings = run_path("/path/to/file.py")
</code></pre>
<p>That interface is available in Python 2.7 and Python 3.2+</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the </p>
<pre><code>load_source(module_name, path_to_file) 
</code></pre>
<p>method from <a href="https://docs.python.org/library/imp.html" rel="noreferrer">imp module</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have come up with a slightly modified version of <a href="https://stackoverflow.com/a/67692/2988730">@SebastianRittau's wonderful answer</a> (for Python &gt; 3.4 I think), which will allow you to load a file with any extension as a module using <a href="https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_loader" rel="noreferrer"><code>spec_from_loader</code></a> instead of <a href="https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_file_location" rel="noreferrer"><code>spec_from_file_location</code></a>:</p>
<pre><code>from importlib.util import spec_from_loader, module_from_spec
from importlib.machinery import SourceFileLoader 

spec = spec_from_loader("module.name", SourceFileLoader("module.name", "/path/to/file.py"))
mod = module_from_spec(spec)
spec.loader.exec_module(mod)
</code></pre>
<p>The advantage of encoding the path in an explicit <a href="https://docs.python.org/3/library/importlib.html#importlib.machinery.SourceFileLoader" rel="noreferrer"><code>SourceFileLoader</code></a> is that the <a href="https://docs.python.org/3/library/importlib.html#module-importlib.machinery" rel="noreferrer">machinery</a> will not try to figure out the type of the file from the extension. This means that you can load something like a <code>.txt</code> file using this method, but you could not do it with <code>spec_from_file_location</code> without specifying the loader because <code>.txt</code> is not in <a href="https://docs.python.org/3/library/importlib.html#importlib.machinery.SOURCE_SUFFIXES" rel="noreferrer"><code>importlib.machinery.SOURCE_SUFFIXES</code></a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is some code that works in all Python versions, from 2.7-3.5 and probably even others.</p>
<pre><code>config_file = "/tmp/config.py"
with open(config_file) as f:
    code = compile(f.read(), config_file, 'exec')
    exec(code, globals(), locals())
</code></pre>
<p>I tested it. It may be ugly but so far is the only one that works in all versions.</p>
</div>
<div class="post-text" itemprop="text">
<p>Do you mean load or import?</p>
<p>You can manipulate the sys.path list specify the path to your module, then import your module. For example, given a module at:</p>
<pre><code>/foo/bar.py
</code></pre>
<p>You could do:</p>
<pre><code>import sys
sys.path[0:0] = ['/foo'] # puts the /foo directory at the start of your path
import bar
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def import_file(full_path_to_module):
    try:
        import os
        module_dir, module_file = os.path.split(full_path_to_module)
        module_name, module_ext = os.path.splitext(module_file)
        save_cwd = os.getcwd()
        os.chdir(module_dir)
        module_obj = __import__(module_name)
        module_obj.__file__ = full_path_to_module
        globals()[module_name] = module_obj
        os.chdir(save_cwd)
    except:
        raise ImportError

import_file('/home/somebody/somemodule.py')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your top-level module is not a file but is packaged as a directory with __init__.py, then the accepted solution almost works, but not quite. In Python 3.5+ the following code is needed (note the added line that begins with 'sys.modules'):</p>
<pre><code>MODULE_PATH = "/path/to/your/module/__init__.py"
MODULE_NAME = "mymodule"
import importlib
import sys
spec = importlib.util.spec_from_file_location(MODULE_NAME, MODULE_PATH)
module = importlib.util.module_from_spec(spec)
sys.modules[spec.name] = module 
spec.loader.exec_module(module)
</code></pre>
<p>Without this line, when exec_module is executed, it tries to bind relative imports in your top level __init__.py to the top level module name -- in this case "mymodule". But "mymodule" isn't loaded yet so you'll get the error "SystemError: Parent module 'mymodule' not loaded, cannot perform relative import". So you need to bind the name before you load it. The reason for this is the fundamental invariant of the relative import system: "The invariant holding is that if you have sys.modules['spam'] and sys.modules['spam.foo'] (as you would after the above import), the latter must appear as the foo attribute of the former" <a href="https://docs.python.org/3/reference/import.html#submodules" rel="nofollow noreferrer">as discussed here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I believe you can use <a href="https://docs.python.org/2/library/imp.html#imp.find_module" rel="noreferrer"><code>imp.find_module()</code></a> and <a href="https://docs.python.org/2/library/imp.html#imp.load_module" rel="noreferrer"><code>imp.load_module()</code></a> to load the specified module.  You'll need to split the module name off of the path, i.e. if you wanted to load <code>/home/mypath/mymodule.py</code> you'd need to do:</p>
<pre><code>imp.find_module('mymodule', '/home/mypath/')
</code></pre>
<p>...but that should get the job done.</p>
</div>
<div class="post-text" itemprop="text">
<p>To import your module, you need to add its directory to the environment variable, either temporarily or permanently.</p>
<h1>Temporarily</h1>
<pre><code>import sys
sys.path.append("/path/to/my/modules/")
import my_module
</code></pre>
<h1>Permanently</h1>
<p>Adding the following line to your <code>.bashrc</code> file (in linux) and excecute <code>source ~/.bashrc</code> in the terminal:</p>
<pre><code>export PYTHONPATH="${PYTHONPATH}:/path/to/my/modules/"
</code></pre>
<p>Credit/Source: <a href="https://stackoverflow.com/users/2312075/saarrrr">saarrrr</a>, <a href="https://stackoverflow.com/a/3402176/7428659">another stackexchange question</a></p>
</div>
<div class="post-text" itemprop="text">
<p>This should work</p>
<pre><code>path = os.path.join('./path/to/folder/with/py/files', '*.py')
for infile in glob.glob(path):
    basename = os.path.basename(infile)
    basename_without_extension = basename[:-3]

    # http://docs.python.org/library/imp.html?highlight=imp#module-imp
    imp.load_source(basename_without_extension, infile)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>pkgutil</code> module (specifically the <a href="https://docs.python.org/3/library/pkgutil.html#pkgutil.walk_packages" rel="nofollow"><code>walk_packages</code></a> method) to get a list of the packages in the current directory. From there it's trivial to use the <code>importlib</code> machinery to import the modules you want:</p>
<pre><code>import pkgutil
import importlib

packages = pkgutil.walk_packages(path='.')
for importer, name, is_package in packages:
    mod = importlib.import_module(name)
    # do whatever you want with module now, it's been imported!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This area of Python 3.4 seems to be extremely tortuous to understand! However with a bit of hacking using the code from Chris Calloway as a start I managed to get something working. Here's the basic function.</p>
<pre><code>def import_module_from_file(full_path_to_module):
    """
    Import a module given the full path/filename of the .py file

    Python 3.4

    """

    module = None

    try:

        # Get module name and path from full path
        module_dir, module_file = os.path.split(full_path_to_module)
        module_name, module_ext = os.path.splitext(module_file)

        # Get module "spec" from filename
        spec = importlib.util.spec_from_file_location(module_name,full_path_to_module)

        module = spec.loader.load_module()

    except Exception as ec:
        # Simple error printing
        # Insert "sophisticated" stuff here
        print(ec)

    finally:
        return module
</code></pre>
<p>This appears to use non-deprecated modules from Python 3.4. I don't pretend to understand why, but it seems to work from within a program. I found Chris' solution worked on the command line but not from inside a program.</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm not saying that it is better, but for the sake of completeness, I wanted to suggest the <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow"><code>exec</code></a> function, available in both python 2 and 3.
<code>exec</code> allows you to execute arbitrary code in either the global scope, or in an internal scope, provided as a dictionary.</p>
<p>For example, if you have a module stored in <code>"/path/to/module</code>" with the function <code>foo()</code>, you could run it by doing the following:</p>
<pre><code>module = dict()
with open("/path/to/module") as f:
    exec(f.read(), module)
module['foo']()
</code></pre>
<p>This makes it a bit more explicit that you're loading code dynamically, and grants you some additional power, such as the ability to provide custom builtins. </p>
<p>And if having access through attributes, instead of keys is important to you, you can design a custom dict class for the globals, that provides such access, e.g.:</p>
<pre><code>class MyModuleClass(dict):
    def __getattr__(self, name):
        return self.__getitem__(name)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To import a module from a given filename, you can temporarily extend the path, and restore the system path in the finally block <a href="http://effbot.org/zone/import-string.htm" rel="nofollow">reference:</a></p>
<pre><code>filename = "directory/module.py"

directory, module_name = os.path.split(filename)
module_name = os.path.splitext(module_name)[0]

path = list(sys.path)
sys.path.insert(0, directory)
try:
    module = __import__(module_name)
finally:
    sys.path[:] = path # restore
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I made a package that uses <code>imp</code> for you. I call it <code>import_file</code> and this is how it's used:</p>
<pre><code>&gt;&gt;&gt;from import_file import import_file
&gt;&gt;&gt;mylib = import_file('c:\\mylib.py')
&gt;&gt;&gt;another = import_file('relative_subdir/another.py')
</code></pre>
<p>You can get it at:</p>
<p><a href="http://pypi.python.org/pypi/import_file" rel="nofollow">http://pypi.python.org/pypi/import_file</a></p>
<p>or at</p>
<p><a href="http://code.google.com/p/import-file/" rel="nofollow">http://code.google.com/p/import-file/</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Import package modules at runtime (Python recipe)</strong> </p>
<p><a href="http://code.activestate.com/recipes/223972/" rel="nofollow noreferrer">http://code.activestate.com/recipes/223972/</a></p>
<pre><code>###################
##                #
## classloader.py #
##                #
###################

import sys, types

def _get_mod(modulePath):
    try:
        aMod = sys.modules[modulePath]
        if not isinstance(aMod, types.ModuleType):
            raise KeyError
    except KeyError:
        # The last [''] is very important!
        aMod = __import__(modulePath, globals(), locals(), [''])
        sys.modules[modulePath] = aMod
    return aMod

def _get_func(fullFuncName):
    """Retrieve a function object from a full dotted-package name."""

    # Parse out the path, module, and function
    lastDot = fullFuncName.rfind(u".")
    funcName = fullFuncName[lastDot + 1:]
    modPath = fullFuncName[:lastDot]

    aMod = _get_mod(modPath)
    aFunc = getattr(aMod, funcName)

    # Assert that the function is a *callable* attribute.
    assert callable(aFunc), u"%s is not callable." % fullFuncName

    # Return a reference to the function itself,
    # not the results of the function.
    return aFunc

def _get_class(fullClassName, parentClass=None):
    """Load a module and retrieve a class (NOT an instance).

    If the parentClass is supplied, className must be of parentClass
    or a subclass of parentClass (or None is returned).
    """
    aClass = _get_func(fullClassName)

    # Assert that the class is a subclass of parentClass.
    if parentClass is not None:
        if not issubclass(aClass, parentClass):
            raise TypeError(u"%s is not a subclass of %s" %
                            (fullClassName, parentClass))

    # Return a reference to the class itself, not an instantiated object.
    return aClass


######################
##       Usage      ##
######################

class StorageManager: pass
class StorageManagerMySQL(StorageManager): pass

def storage_object(aFullClassName, allOptions={}):
    aStoreClass = _get_class(aFullClassName, StorageManager)
    return aStoreClass(allOptions)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Linux, adding a symbolic link in the directory your python script is located works.</p>
<p>ie: </p>
<pre><code>ln -s /absolute/path/to/module/module.py /absolute/path/to/script/module.py
</code></pre>
<p>python will create <code>/absolute/path/to/script/module.pyc</code> and will update it if you change the contents of <code>/absolute/path/to/module/module.py</code></p>
<p>then include the following in mypythonscript.py</p>
<pre><code>from module import *
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>quite simple way: suppose you want import file with relative path ../../MyLibs/pyfunc.py</p>
<pre><code>
libPath = '../../MyLibs'
import sys
if not libPath in sys.path: sys.path.append(libPath)
import pyfunc as pf
</code></pre>
<p>But if you make it without a guard you can finally get a very long path</p>
</div>
<div class="post-text" itemprop="text">
<p>A simple solution using <code>importlib</code> instead of the <code>imp</code> package (tested for Python 2.7, although it should work for Python 3 too):</p>
<pre class="lang-python prettyprint-override"><code>import importlib

dirname, basename = os.path.split(pyfilepath) # pyfilepath: '/my/path/mymodule.py'
sys.path.append(dirname) # only directories should be added to PYTHONPATH
module_name = os.path.splitext(basename)[0] # '/my/path/mymodule.py' --&gt; 'mymodule'
module = importlib.import_module(module_name) # name space of defined module (otherwise we would literally look for "module_name")
</code></pre>
<p>Now you can directly use the namespace of the imported module, like this:</p>
<pre><code>a = module.myvar
b = module.myfunc(a)
</code></pre>
<p>The advantage of this solution is that <strong>we don't even need to know the actual name of the module we would like to import</strong>, in order to use it in our code. This is useful, e.g. in case the path of the module is a configurable argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>Create python module test.py</p>
<pre><code>import sys
sys.path.append("&lt;project-path&gt;/lib/")
from tes1 import Client1
from tes2 import Client2
import tes3
</code></pre>
<p>Create python module test_check.py</p>
<pre><code>from test import Client1
from test import Client2
from test import test3
</code></pre>
<p>We can import the imported module from module.</p>
</div>
<div class="post-text" itemprop="text">
<p>Adding this to the list of answers as I couldn't find anything that worked. This will allow imports of compiled (pyd) python modules in 3.4:</p>
<pre><code>import sys
import importlib.machinery

def load_module(name, filename):
    # If the Loader finds the module name in this list it will use
    # module_name.__file__ instead so we need to delete it here
    if name in sys.modules:
        del sys.modules[name]
    loader = importlib.machinery.ExtensionFileLoader(name, filename)
    module = loader.load_module()
    locals()[name] = module
    globals()[name] = module

load_module('something', r'C:\Path\To\something.pyd')
something.do_something()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This answer is a supplement to Sebastian Rittau's answer responding to the comment: "but what if you don't have the module name?"  This is a quick and dirty way of getting the likely python module name given a filename -- it just goes up the tree until it finds a directory without an <code>__init__.py</code> file and then turns it back into a filename.  For Python 3.4+ (uses pathlib), which makes sense since Py2 people can use "imp" or other ways of doing relative imports:</p>
<pre><code>import pathlib

def likely_python_module(filename):
    '''
    Given a filename or Path, return the "likely" python module name.  That is, iterate
    the parent directories until it doesn't contain an __init__.py file.

    :rtype: str
    '''
    p = pathlib.Path(filename).resolve()
    paths = []
    if p.name != '__init__.py':
        paths.append(p.stem)
    while True:
        p = p.parent
        if not p:
            break
        if not p.is_dir():
            break

        inits = [f for f in p.iterdir() if f.name == '__init__.py']
        if not inits:
            break

        paths.append(p.stem)

    return '.'.join(reversed(paths))
</code></pre>
<p>There are certainly possibilities for improvement, and the optional <code>__init__.py</code> files might necessitate other changes, but if you have <code>__init__.py</code> in general, this does the trick.</p>
</div>
<div class="post-text" itemprop="text">
<p>The best way, I think, is from the official documentation (<a href="https://docs.python.org/3.2/library/imp.html#examples" rel="nofollow">29.1. imp — Access the import internals</a>):</p>
<pre><code>import imp
import sys

def __import__(name, globals=None, locals=None, fromlist=None):
    # Fast path: see if the module has already been imported.
    try:
        return sys.modules[name]
    except KeyError:
        pass

    # If any of the following calls raises an exception,
    # there's a problem we can't handle -- let the caller handle it.

    fp, pathname, description = imp.find_module(name)

    try:
        return imp.load_module(name, fp, pathname, description)
    finally:
        # Since we may exit via an exception, close fp explicitly.
        if fp:
            fp.close()
</code></pre>
</div>
<span class="comment-copy">If I knew the namespace - 'module.name' - I would already use <code>__import__</code>.</span>
<span class="comment-copy">@SridharRatnakumar the value of the first argument of <code>imp.load_source</code> only sets the <code>.__name__</code> of the returned module. it doesn't effect loading.</span>
<span class="comment-copy">@DanD. — the first argument of <code>imp.load_source()</code> determines the key of the new entry created in the <code>sys.modules</code> dictionary, so the first argument does indeed affect loading.</span>
<span class="comment-copy">The <code>imp</code> module is deprecated since version 3.4: The <code>imp</code> package is pending deprecation in favor of <code>importlib</code>.</span>
<span class="comment-copy">One might think that python imports are getting more and more complicated with each new version.</span>
<span class="comment-copy">How do we use <code>sys.path.append</code> to point to a single python file instead of a directory?</span>
<span class="comment-copy">:-)  Perhaps your question would be better suited as a StackOverflow question, not a comment on an answer.</span>
<span class="comment-copy">To all people who were trying to include a file to their path... by definition "the shell path is a colon delimited list of directories". I'm relatively new to python, but the python path also follows the unix design principle from what I have seen. Please correct me if I am wrong.</span>
<span class="comment-copy">The python path can contain zip archives, "eggs" (a complex kind of zip archives), etc. Modules can be imported out of them. So the path elements are indeed <i>containers</i> of files, but they are not necessarily directories.</span>
<span class="comment-copy">Beware of the fact that Python caches import statements. In the rare case that you have two different folders sharing a single class name (classX), the approach of adding a path to sys.path, importing classX, removing the path and repeating for the reamaining paths won't work. Python will always load the class from the first path from its cache. In my case I aimed at creating a plugin system where all plugins implement a specific classX. I ended up using <a href="http://stackoverflow.com/a/67692">SourceFileLoader</a>, note that its <a href="http://bugs.python.org/issue21436" rel="nofollow noreferrer">deprecation is controversial</a>.</span>
<span class="comment-copy">I like this method but when I get the result of run_path its a dictionary which I cannot seem to access?</span>
<span class="comment-copy">What do you mean by "cannot access"? You can't import from it (that's why this is only a good option when import-style access isn't actually required), but the contents should be available via the regular dict API (<code>result[name]</code>, <code>result.get('name', default_value)</code>, etc)</span>
<span class="comment-copy">... and <code>imp.load_dynamic(module_name, path_to_file)</code> for DLLs</span>
<span class="comment-copy">heads up that imp is deprecated now.</span>
<span class="comment-copy">This answer worked for me where <code>load_source</code> did not because it imports the script and provides the script access to the modules and globals at the time of importing.</span>
<span class="comment-copy">@Wheat Why sys.path[0:0] instead of sys.path[0]?</span>
<span class="comment-copy">B/c sys.path[0] = xy overwrites the first path item while path[0:0] =xy is equivalent to path.insert(0, xy)</span>
<span class="comment-copy">hm the path.insert worked for me but the [0:0] trick did not.</span>
<span class="comment-copy"><code>sys.path[0:0] = ['/foo']</code></span>
<span class="comment-copy">Why write 14 lines of buggy code when this is already addressed by the standard library? You haven't done error checking on format or content of full_path_to_module or the os.whatever operations; and using a catch-all <code>except:</code> clause is rarely a good idea.</span>
<span class="comment-copy">You should use more "try-finally"s in here. E.g. <code>save_cwd = os.getcwd()</code> <code>try: …</code> <code>finally: os.chdir(save_cwd)</code></span>
<span class="comment-copy">@ChrisJohnson <code>this is already addressed by the standard library</code> yeah, but python has nasty habit of not being backward-compatible... as the checked answer says there're 2 different ways before and after 3.3. In that case I'd rather like to write my own universal function than check version on the fly. And yes, maybe this code isn't too well error-protected, but it shows an idea (which is os.chdir(), I haven't though about it), basing on which I can write a better code. Hence +1.</span>
<span class="comment-copy">This is exactly what I was missing!  Thanks!  (This also correctly answers <a href="https://stackoverflow.com/questions/37808866">Proper way to dynamically import a module with relative imports?</a>)</span>
<span class="comment-copy">Any idea how to do this with python 2?</span>
<span class="comment-copy">This "temp" solution is a great answer if you want to prod a project around in a jupyter notebook elsewhere.</span>
<span class="comment-copy">A more general way to cut the extension out is: <code>name, ext = os.path.splitext(os.path.basename(infile))</code>. Your method works because the previous restriction to .py extension. Also, you should probably import the module to some variable/dictionary entry.</span>
<span class="comment-copy">execfile(), also</span>
<span class="comment-copy">os.chdir ? (minimal characters to approve comment).</span>
<span class="comment-copy">I've spent all day troubleshooting an import bug in a pyinstaller generated exe. In the end this is the only thing that worked for me. Thank you so much for making this!</span>
<span class="comment-copy">This is the hack I used, and it has caused me some problems.  One of the more painful ones was that IDEA has an issue where it doesn't pickup altered code from within the link, but yet attempts to save what it thinks is there.  A race condition where the last to save is what sticks... I lost a decent amount of work because of this.</span>
<span class="comment-copy">@Gripp not sure if I am understanding your issue, but I frequently (almost exclusively) edit my scripts on a remote server from my desktop via SFTP with a client like CyberDuck, and in that case as well it is a bad idea to try and edit the symlinked file, instead its much safer to edit the original file. You can catch some of these issues by using <code>git</code> and checking your <code>git status</code> to verify that your changes to the script are actually making it back to the source document and not getting lost in the ether.</span>
<span class="comment-copy">This way you are modifying the <code>sys.path</code>, which does not fit every use case.</span>
<span class="comment-copy">@bgusach This may be true, but it is also desirable in some cases (adding a path to sys.path simplifies things when importing more than one module from a single package). At any rate, if this not desirable, one can immediately afterwards do <code>sys.path.pop()</code></span>
<span class="comment-copy">This solution does not allow you to provide the path, which is what the question asks for.</span>
