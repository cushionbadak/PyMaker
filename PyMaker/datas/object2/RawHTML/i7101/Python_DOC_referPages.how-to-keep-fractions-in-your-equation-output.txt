<div class="post-text" itemprop="text">
<p>I've been using Python to calculate math equations. For example:</p>
<pre><code>from sympy import Symbol, Derivative, Integral
x = Symbol('x')
d = Symbol('d')
Integral(8*x**(6/5)-7*x**(3/2),x).doit()
</code></pre>
<p>Which results in the output:</p>
<pre><code>3.63636363636364*x**2.2 - 2.8*x**2.5
</code></pre>
<p>Is there a way to show this answer as fractions as opposed to decimals? I would like to see the output as:</p>
<pre><code>(40/11)*x**(11/5)-(14/5)*x**(5/2)+C
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>SymPy has Rational class for rational numbers. </p>
<pre><code>from sympy import *
# other stuff 
integrate(8*x**Rational(6, 5) - 7*x**Rational(3, 2),x)
</code></pre>
<p>No need for <code>Integral().doit()</code> unless you actually want to print out the un-evaluated form. </p>
<p>Other versions: </p>
<pre><code>integrate(8*x**Rational('6/5') - 7*x**Rational('3/2'),x)
</code></pre>
<p>(rational number can be parsed from a string); </p>
<pre><code>integrate(8*x**(S.One*6/5) - 7*x**(S.One*3/2),x)
</code></pre>
<p>(beginning the computation with the SymPy object for "1" turns it into SymPy object manipulation, avoiding plain Python division, which would give a float)</p>
</div>
<div class="post-text" itemprop="text">
<p>you can work with the <a href="https://docs.python.org/3/library/fractions.html#module-fractions" rel="nofollow noreferrer"><code>fractions</code> module</a> in order to have integral fractions:</p>
<pre><code>from sympy import Symbol, Derivative, Integral
from fractions import Fraction
x = Symbol('x')
d = Symbol('d')
ii = Integral(8*x**Fraction(6,5)-7*x**Fraction(3,2),x).doit()
# 40*x**(11/5)/11 - 14*x**(5/2)/5
</code></pre>
<p>there is also the <a href="http://docs.sympy.org/0.7.1/modules/core.html#rational" rel="nofollow noreferrer"><code>Rational</code></a> class in sympy itself:</p>
<pre><code>from sympy import Symbol, Derivative, Integral, Rational
x = Symbol('x')
d = Symbol('d')
ii = Integral(8*x**Rational(6,5)-7*x**Rational(3,2),x).doit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use sympy's <code>rational</code> instead of <code>6/5</code>. Python will immediately interpret <code>6/5</code> and return some floating point number (<code>1.2</code> in this case).</p>
<pre><code>from sympy import Symbol, Derivative, Integral, Rational
x = Symbol('x')
d = Symbol('d')
Integral(8*x**(Rational(6,5))-7*x**(Rational(3,2)),x).doit()
</code></pre>
</div>
<span class="comment-copy">you shoud add the line <code>from sympy import S</code>. apart from that: nice, did not know!</span>
<span class="comment-copy">Actually add <code>from sympy import *</code> because the <code>integrate</code> function is needed as well.</span>
<span class="comment-copy">Any idea on how we would use Rational on non-division problems such as <code>integrate((x+1)*math.e**((7*x**2)+(14*x)))</code>?</span>
<span class="comment-copy">@d84_n1nj4 It's <code>integrate((x+1)*exp(7*x**2 + 14*x), x)</code>  - use the exponential function, not <code>e**</code> But if you really want to, there is <code>E</code> in SymPy: <code>integrate((x+1)*E**(7*x**2 + 14*x), x)</code> works too. The general thing is, plain Python constants are floating point numbers, which is not what you want. You want the corresponding SymPy objects, obtainable from SymPy directly.</span>
