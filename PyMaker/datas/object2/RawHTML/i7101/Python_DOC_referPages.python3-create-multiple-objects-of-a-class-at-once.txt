<div class="post-text" itemprop="text">
<p>i want to create multiple objects with diferent names at once.</p>
<p>For example </p>
<pre><code>class Car:
    def __init__(self, color):
        self.color = color
</code></pre>
<p></p>
<p>And i need to create n objects when the program first run</p>
<pre><code>car_1 = Car("blue")
car_2 = Car("Red")
#...
car_n = Car("color_n")
</code></pre>
<p></p>
<p>Is there a way to do this in python3? All the things i've tried just create one object and change its name or overwhite the objects information o simply fails at running. I can't use exec() or eval()</p>
<p>Thanks</p>
<p>Extra:
I need the thing before because i need to store n Client's information whenever i run the program to work with it (that info is stored in a .csv file). 
Do i need to do the thing i mentioned before or is there another way to deal with this kind of data management?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a list of Cars objects, by list comprehension</p>
<pre><code>class Car:
    def __init__(self, color):
        self.color = color
    def __repr__(self):
        return '{}({!r})'.format(self.__class__.__name__, self.color)

colors=['red', 'blue', 'green',]
cars_objects = [Car(color) for color in colors]
print(cars_objects)
</code></pre>
<p>return</p>
<pre><code>[Car('red'), Car('blue'), Car('green')]
</code></pre>
<p><code>__repr__</code> function in Car Class creates a "more readable" (and parseable) representation of Car object instead of "<code>&lt;__main__.Car object at 0x7f5b38a2c400&gt;</code>"</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/1373164/how-do-i-create-a-variable-number-of-variables">How do I create a variable number of variables?</a></span>
<span class="comment-copy">Don't do this. Use a data structure such as a <code>list</code> or <code>dict</code> to hold your objects. Trying to dynamically create variables is asking for trouble and headaches.</span>
<span class="comment-copy">Use a for-loop and a list.</span>
<span class="comment-copy">Consider making the <code>repr</code> version parseable; for instance, <code>'{}({!r})'.format(self.__class__.__name__, self.color)</code>. This would show e.g. <code>Car('red')</code>. Makes it easier when replicating values for debugging and such.   From <code>__repr__</code> documentation: <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer">If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment).</a></span>
<span class="comment-copy">@YannVernier You're absolutely right for this case. I edited my answer. Now the value returned by <b>repr</b> could be used to recreate Car objects.</span>
