<div class="post-text" itemprop="text">
<p>I am using Python 3.5.3 and I have a strange rounding behavior </p>
<pre><code>round(1.5)
Out[16]: 2

round(2.5)
Out[17]: 2

round(3.5)
Out[18]: 4
</code></pre>
<p>Why wasn't round(2.5) rounding to 3?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer">The Python Documentation</a> says:</p>
<blockquote>
<p>If two multiples are equally close, rounding is done toward the even choice (so, for example, both <code>round(0.5)</code> and <code>round(-0.5)</code> are 0, and <code>round(1.5)</code> is <code>2</code>).</p>
</blockquote>
<p>If you want to be able to round toward positive infinity if it is in the middle, try this:</p>
<pre class="lang-py prettyprint-override"><code>import math
def round(number):
    if (math.ceil(number) - number &gt;= number - math.floor(number)):
        return math.ceil(number)
    else:
        return math.floor(number)
</code></pre>
<p>Testable at: <a href="https://repl.it/KHJY" rel="nofollow noreferrer">https://repl.it/KHJY</a></p>
</div>
<span class="comment-copy">You can always check if <a href="https://docs.python.org/3.5/library/functions.html?#round" rel="nofollow noreferrer">the manual</a> has anything to say. (This is the way of rounding many of us were taught at school, and the method of IEEE 754.)</span>
<span class="comment-copy">Or, more like it, <a href="https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues" rel="nofollow noreferrer">floating point arithmetic issues and limitations</a></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior">Python 3.x rounding behavior</a></span>
<span class="comment-copy">Those numbers are floats in python, subject to floating point arithmetic limitations. Most notably, numbers such as 2.5 and 3.5 don't exist in float, so what you will get is a close value. That may be higher or lower.</span>
<span class="comment-copy">@spectras If you look at the link I put there, you can see in the Python documentation that is exactly what they say. This example is not due to floating point limitations. There are other examples that are, though, like <code>2.735</code> might round to <code>2.73</code> instead of <code>2.74</code></span>
<span class="comment-copy">Documentation talks about all numbers, but floats have their specific quirks on top of that. The documentation you linked specifically states that <i>“The behavior of round() for floats can be surprising: for example, round(2.675, 2) gives 2.67 instead of the expected 2.68. This is not a bug: it’s a result of the fact that most decimal fractions can’t be represented exactly as a float."</i></span>
<span class="comment-copy"><i>If two multiples are equally close, rounding is done toward the even choice (so, for example, both round(0.5) and round(-0.5) are 0, and round(1.5) is 2).</i></span>
<span class="comment-copy">And the example of <code>0.5</code> is deceiving: 0.5 has a perfect representation in float, so it does not hit floating point caveats.</span>
