<div class="post-text" itemprop="text">
<p>I define a Point class with a method for rotating around another point:</p>
<pre><code>def Rotate(self, origin, degrees):
    d = math.radians(degrees)
    O = origin
    sin = math.sin(d)
    cos = math.cos(d)
    print ("original "+self.ToString())
    self.x += -O.x
    self.y += -O.y
    print ("-origin "+self.ToString())
    WX = self.x * cos -self.y * sin
    WY = self.x * sin +self.y * cos
    self = Point(WX,WY)
    print ("-origin, after transform "+self.ToString())
    self.x += O.x
    self.y += O.y
    print ("End of method "+self.ToString())
</code></pre>
<p>I then test the method like so:</p>
<pre><code>test = [Point(100,100),Point(110,110)]
test[0].Rotate(test[1],10)
print ("outside of method" + test[0].ToString())
</code></pre>
<p>The output of the print command show that the desired value is assigned at the end of the method, but afterwards is changed.</p>
<p>Why does this happen?</p>
<p>print output:</p>
<pre><code>original 100 100
-origin -10 -10
-origin, after transform -8.111595753452777 -11.584559306791382
End of method 101.88840424654722 98.41544069320862
outside of method-10 -10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In your function you write:</p>
<pre><code>self = Point(WX,WY)
</code></pre>
<p>This however has <strong>no effect</strong> outside of the method: now you have <strong>modified the <em>local</em> variable <code>self</code></strong>. You cannot reassign <code>self</code> in such a way. After you have changed the <em>local</em> variable <code>self</code>, your <code>self.x</code> will of course point to the new <code>x</code> attribute of the new <code>Point(..)</code>, but you will not have <em>altered</em> the object on which you call that method.</p>
<p>What you can do however is <strong>assign to the fields</strong>:</p>
<pre><code>self.x, self.y = WX, WY
</code></pre>
<p>That being said, you can make things more compact:</p>
<pre><code>def rotate(self, origin, degrees):
    d = math.radians(degrees)
    sin = math.sin(d)
    cos = math.cos(d)
    dx = self.x - origin.x
    dy = self.y - origin.y
    wx = dx * cos - dy * sin + origin.x
    wy = dx * sin + dy * cos + origin.y
    self.x = wx
    self.y = wy
</code></pre>
</div>
<span class="comment-copy">You assign <code>self = Point(WX,WY)</code>. whereas self is a <i>local</i> variable.</span>
<span class="comment-copy">I'd recommend you review <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">the data model</a> - <code>ToString</code> makes it seem like you're writing Java (which <a href="http://dirtsimple.org/2004/12/python-is-not-java.html" rel="nofollow noreferrer">Python is not</a>). Could you give a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> with a working class?</span>
