<div class="post-text" itemprop="text">
<p>I have been trying to work out how to make a <code>.pyd</code> (Python Extension Module) file from a C script (without swig or anything else except MinGW) and have successfully built it into a <code>.pyd</code>.</p>
<p>The problem however occurs when I try and import the module.</p>
<p>If I run it the module runs successfully (as far as I can see) and then an error appears saying <code>Python Has Stopped Working</code> and it closes without executing the rest of the program.</p>
<p>Here is my C script (test.c):</p>
<pre><code>#include &lt;python.h&gt;

int main()
{
    PyInit_test();
    return 0;
}

int PyInit_test()
{
    printf("hello world");
}
</code></pre>
<p>And Python Script (file.py):</p>
<pre><code>import test
print('Run From Python Extension')
</code></pre>
<p>I compiled the script with:</p>
<pre><code>gcc -c file.py
gcc -shared -o test.pyd test.c
</code></pre>
<p>I can't find any errors when compiling in command prompt and am using python 3.6 (running on Windows 10).</p>
<p>I can't find much on the subject and would prefer to keep away from Cython (I already know C) and Swig. </p>
<p>Any help to tell me what is wrong would be fantastic.</p>
</div>
<div class="post-text" itemprop="text">
<p>Creating a Python extension is completely different than writing regular C code. What you have done is simply creating a valid C program but that doesn't make sense for Python.</p>
<p>That's how your program should look like (it's just a skeleton, not the proper, working code):</p>
<pre><code>#include &lt;Python.h&gt;
#include &lt;stdlib.h&gt;

static PyObject* test(PyObject* self, PyObject* args)
{
    printf("hello world");
    return NULL;
}

static PyMethodDef test_methods[] = {
    {"test", test, METH_VARARGS, "My test method."},
    {NULL, NULL, 0, NULL} /* Sentinel */
};

PyMODINIT_FUNC init_test_methods() {
    Py_InitModule("test", test_methods);
}

int main(int argc, char** argv)
{
    /* Pass argv[0] to the Python interpreter */
    Py_SetProgramName(argv[0]);

    /* Initialize the Python interpreter. Required. */
    Py_Initialize();

    /* Add a static module */
    init_test_methods();
}
</code></pre>
<p>I recommend you read more about this at the following link: <a href="http://dan.iel.fm/posts/python-c-extensions/" rel="nofollow noreferrer">http://dan.iel.fm/posts/python-c-extensions/</a> as well as in the <a href="https://docs.python.org/3/extending/building.html" rel="nofollow noreferrer">official docs</a>.</p>
</div>
<span class="comment-copy">Is the <code>.pyd</code> file in the same folder as the Python script that tries to <code>import</code> it? Python searches for modules in a defined way in certain locations, and it may be simply that your library isn't in any of the places that it looks. See <a href="https://docs.python.org/3/extending/building.html?highlight=pythonpath" rel="nofollow noreferrer"><b><i>Building C and C++ Extensions</i></b></a> in the documentation.</span>
<span class="comment-copy">Your module initialization function doesn't make the slightest attempt to initialize a module. It doesn't even have the right return type. Did you read the docs at all?</span>
<span class="comment-copy">@martineau I placed the <code>.pyd</code> in the same folder as the python script I tried to import it from.  That got me thinking and I put it in Lib.  From here I was able to import it without getting the error however '<b>hello world</b>' did not print just '<b>finished</b>'</span>
<span class="comment-copy">That makes a lot of sense.  Thanks for the help.  As you say it is different, how about the compilation is that all right or do I have to do something different to compile it  (the setup script)?</span>
<span class="comment-copy">There is no secret about the compilation. If you wish, take a look at this project of mine, in which I implemented the Caesar Cipher in C and provided the Python extension to it: <a href="https://github.com/matheusportela/caesar-cipher" rel="nofollow noreferrer">github.com/matheusportela/caesar-cipher</a></span>
<span class="comment-copy">That's sorted the compilation problem and gives me a fantastic example to study.  As for the compilation it's <code>setup.py build</code> not what I said previously.  Thanks again Â¦ ]</span>
<span class="comment-copy">Just a final note:  <code>setup.py build</code> keeps generating an error saying <code>unable to find vcvarsall.bat</code> I used <code>-c mingw32</code> flag on the end. This gave  another  error <a href="https://stackoverflow.com/questions/34135280/valueerror-unknown-ms-compiler-version-1900/43971456#43971456">Unknown MS Compiler version 1900  which was solved here</a> and it finally compiled.</span>
<span class="comment-copy">Great, @Simon! Since I don't usually program in Windows, I wasn't aware of that problem. Good to know you figured it out.</span>
