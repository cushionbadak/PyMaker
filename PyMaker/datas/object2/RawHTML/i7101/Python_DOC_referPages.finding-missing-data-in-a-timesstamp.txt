<div class="post-text" itemprop="text">
<p>I am trying to look though a CSV file, but i want to make sure all the data are there. The CSV time is in 15 Min format is yyyy-mm-dd-hh:mm . I have collectet the data and made timestamp. 
lst = list()</p>
<pre><code>with open("CHFJPY15.csv", "r") as f:
    f_r = f.read()

    sline = f_r.split()

    for line in sline:
        parts = line.split(',')
        date = parts[0]
        time = parts[1]
        closeingtime = parts[5]

        timestamp = date + time + closeingtime

        lst.append(timestamp)
print(lst, "liste")
</code></pre>
<p>As seen below, the CSV is just a long list of data. Again i really want to check that all data is there for every 15 min. But i dont know exactlyhow to code it.</p>
<blockquote>
<p>'2015.12.09.19:45 123.251',  '2015.12.09.20:00 123.188', 
  '2015.12.09.20: 15123.192',  '2015.12.09.20:30 123.242', 
  '2015.12.09.20: 45123.166',
  .. etc..</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You might not have noticed that items in that data list are inconsistent in format. For instance, there's white space between the date and the other data in <code>2015.12.09.19:45 123.251</code> but the gap is placed differently in <code>2015.12.09.20: 45123.166</code>. I'm going to assume that you will deal with that.</p>
<p>I begin by creating a consistently formatted list of data items similar to yours. Although most of the dates are separated by fifteen minute intervals I deliberately put in some gaps.</p>
<pre><code>&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; interval = timedelta(minutes=15)
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; current_time = datetime(2015,12,9,19,30)
&gt;&gt;&gt; data = []
&gt;&gt;&gt; omits = [3,5,9,11,17]
&gt;&gt;&gt; for i in range(20):
...     current_time += interval
...     if i in omits:
...         continue
...     data.append(current_time.strftime('%y.%m.%d.%H:%M')+' 123.456')
...     
&gt;&gt;&gt; data
['15.12.09.19:45 123.456', '15.12.09.20:00 123.456', '15.12.09.20:15 123.456', '15.12.09.20:45 123.456', '15.12.09.21:15 123.456', '15.12.09.21:30 123.456', '15.12.09.21:45 123.456', '15.12.09.22:15 123.456', '15.12.09.22:45 123.456', '15.12.09.23:00 123.456', '15.12.09.23:15 123.456', '15.12.09.23:30 123.456', '15.12.09.23:45 123.456', '15.12.10.00:15 123.456', '15.12.10.00:30 123.456']
</code></pre>
<p>Now I read through the dates subtracting each from it predecessor. I set the first 'predecessor', which I call <code>previous</code> to <code>now</code> because that's bound to differ from the other dates.</p>
<p>I split each datum from the list into two, ignoring the second piece. Using <code>strptime</code> I turn strings into dates. Dates can be subtracted and the differences compared.</p>
<pre><code>&gt;&gt;&gt; previous = datetime.now().strftime('%y.%m.%d.%H:%M')
&gt;&gt;&gt; first = True
&gt;&gt;&gt; for d in data:
...     date_part, other = d.split(' ')
...     if datetime.strptime(date_part, '%y.%m.%d.%H:%M') - datetime.strptime(previous, '%y.%m.%d.%H:%M') != interval:
...         if not first:
...             'unacceptable gap prior to ', date_part
...         else:
...             first = False
...     previous = date_part
...     
('unacceptable gap prior to ', '15.12.09.20:45')
('unacceptable gap prior to ', '15.12.09.21:15')
('unacceptable gap prior to ', '15.12.09.22:15')
('unacceptable gap prior to ', '15.12.09.22:45')
('unacceptable gap prior to ', '15.12.10.00:15')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There is a Python package called datetime that you could use.  If you kept track of the previous entries time as a datetime object called prev, and created a timedelta for 15 minutes called delt, you could easily check if the next time in the file (as a datetime named new_dt) has prev+delt==new_dt.  If they all do, you are not missing any time.</p>
<p>More info on the datetime package here:
<a href="https://docs.python.org/3/library/datetime.html" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think it is not good practice to <a href="https://stackoverflow.com/questions/45661376/checking-for-missing-values-in-csv">duplicate</a> your own question, less than 24H after the first post. Moreover including a full answer to your first post in the new one.
It feels messy for new readers and a bit disrespectful to the people that answered your first question.</p>
<p>That being said, your processing would probably be faster using <a href="http://pandas.pydata.org/" rel="nofollow noreferrer"><code>pandas</code></a>.</p>
<pre class="lang-python prettyprint-override"><code>import pandas as pd

# Read your data as a pandas Dataframe
data = pd.read_csv("your_file.csv",                  # Path to your file
                   parse_dates=True,                 # Automatically parse dates from string
                   infer_datetime_format=True)       # Can speed things up

# Compute the time deltas
data['deltas'] = pd.NaT                              # Create new column with no values

for i, r in df.iterrows():                           # iterate over lines
    if not i:
        continue                                     # skip first line
    delta = df.ix[i, 'date'] - df.ix[i - 1, 'date']  # compute time delta
    df.ix[i, 'deltas'] = delta                       # Attribute delta value to table

# And display any abnormal value
pd.where(df.deltas != pd.Timedelta('15 min')).dropna()
</code></pre>
<p>Note that I am not sure of the format of your CSV file, which could require additional operation to be loaded as a <code>pd.Dataframe</code>.</p>
</div>
<span class="comment-copy">Can you explain the format of the timestamp?</span>
