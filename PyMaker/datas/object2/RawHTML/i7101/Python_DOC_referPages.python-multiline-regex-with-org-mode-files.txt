<div class="post-text" itemprop="text">
<p>Using regex, I would like to extract certain parts from an Emacs org mode file, which are simple text files. Entries in these org files start with <code>*</code> and sometimes these entries do have properties. A brief example can be found below: </p>
<pre><code>import re

orgfiletest = """
* headline 0
* headline 1
  :PROPERTIES:
  :KEY: lala
  :END:
* headline 2
* headline 3
  :PROPERTIES:
  :KEY: lblb
  :END:
"""
</code></pre>
<p>I would like to extract all entries that do have properties; the extracted entries should include these properties. So, I would like to receive the following pieces of text:</p>
<pre><code>* headline 1
  :PROPERTIES:
  :KEY: lala
  :END:
</code></pre>
<p>and</p>
<pre><code>* headline 3
  :PROPERTIES:
  :KEY: lblb
  :END:
</code></pre>
<p>I started with something like this</p>
<pre><code>re.findall(r"\*.*\s:END:", orgfiletest, re.DOTALL)
</code></pre>
<p>But this also includes <code>headline 0</code> and <code>headline 2</code>, which do not have any properties. My next attempt was to utilize look arounds but to no avail. Any help is much appreciated! </p>
<p><strong>Update / Solution that works for me:</strong></p>
<p>Thanks to everyone who helped me finding a solution! For future reference I included an updated MWE and the regex that works for me:</p>
<pre><code>import re
orgfiletest = """
* headline 0
  more text 
* headline 1
  :PROPERTIES:
  :KEY: lala
  :END:
* headline foo 2
** bar 3
  :PROPERTIES:
  :KEY: lblb
  :FOOBAR: lblb
  :END:
* new headline
  more text
"""

re.findall(r"^\*+ .+[\r\n](?:(?!\*)\s*:.+[\r\n]?)+", orgfiletest, re.MULTILINE)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are a couple of possibilities including non-regex solutions.<br/>
As you have specifically asked for one though:</p>
<pre><code>^\*\ headline\ \d+[\r\n] # look for "* headline digit(s) and newline
(?:(?!\*).+[\r\n]?)+     # followed by NOT a newline at the beginning
                         # ... anything else including newlines afterwards
                         # ... at least once
</code></pre>
<p>See <a href="https://regex101.com/r/TfyRs0/1/" rel="nofollow noreferrer"><strong>a demo on regex101.com</strong></a> (and mind the modifiers <code>x</code> and <code>m</code>!)
<hr/>
In <code>Python</code> this would be:</p>
<pre><code>import re

rx = re.compile(r'''
            ^\*\ headline\ \d+[\r\n] 
            (?:(?!\*).+[\r\n]?)+
            ''', re.VERBOSE | re.MULTILINE)

print(rx.findall(orgfiletest))
</code></pre>
<p><hr/>
A <strong>non-regex</strong> way could be (using <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><strong><code>itertools</code></strong></a>):</p>
<pre><code>from itertools import groupby

result = {}; key = None
for k, v in groupby(
        orgfiletest.split("\n"), 
        lambda line: line.startswith('* headline')):
    if k:
        item = list(v)
        key = item[len(item)-1]
    elif key is not None:
        result[key] = list(v)

print(result)
# {'* headline 1': ['  :PROPERTIES:', '  :KEY: lala', '  :END:'], '* headline 3': ['  :PROPERTIES:', '  :KEY: lblb', '  :END:', '']}
</code></pre>
<p>This has the downside that lines starting with e.g. <code>* headline abc</code> or <code>* headliner***</code> would be used as well. To be honest, I'd go for the <code>regex</code> solution here.</p>
</div>
<div class="post-text" itemprop="text">
<p>I guess you could do it like this. Only matches rec's containing <em>PROPERTIES</em> </p>
<p><code>(?ms)^\*(?:(?!^\*).)*?PROPERTIES(?:(?!^\*).)*</code> </p>
<p><a href="https://regex101.com/r/oZcos0/1" rel="nofollow noreferrer">https://regex101.com/r/oZcos0/1</a></p>
<p>Explained  </p>
<pre><code> (?ms)                 # Inline modifiers:  Multi-line, Dot-all
 ^ \*                  # Start record: BOL plus *
 (?:                   # Minimal matching
      (?! ^ \* )            # Not a new record
      . 
 )*?
 PROPERTIES            # Up to prop
 (?:                   # Max matching up to begin new record
      (?! ^ \* )            # Not a new record
      . 
 )*
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An attempt at making a readable regex:</p>
<pre><code>^\*\sheadline(?:(?!^\*\sheadline).)*:END:$
</code></pre>
<p><code>^\*\sheadline</code> -&gt; the item is known to start like this.</p>
<p><code>(?:(?!^\*\sheadline).)*</code> -&gt; match anything as long as it doesn't include how we know a new item starts.</p>
<p><code>:END:$</code> -&gt; it includes a known end statement at the end of a line.</p>
<p><a href="https://regex101.com/r/xGwWFt/1" rel="nofollow noreferrer">Working demo.</a></p>
</div>
<span class="comment-copy">Works like a charm, thanks so much! Just out of curiosity, what are other  possibilities including non-regex solutions?</span>
<span class="comment-copy">@BerndWeiss: Sorry, was away. Updated the answer and added a non-regex solution.</span>
<span class="comment-copy">Again, thanks so much for your help! I should have emphasized, though, that in headlines other words than "headline" can be found. I've updated my question with a solution that works for me.</span>
