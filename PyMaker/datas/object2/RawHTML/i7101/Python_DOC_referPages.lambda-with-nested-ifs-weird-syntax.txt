<div class="post-text" itemprop="text">
<p>I like using lambdas more then I should so more than once I wanted to solve nested if statement with it and failed using standard syntax.</p>
<p>But then I tried something like this:</p>
<pre><code>lambda x: 1 if x &gt; 100 else 2 if x &gt; 50 else 3
</code></pre>
<p>Surprisingly it works, although proper function is supposed to have <code>elif</code>:</p>
<pre><code>def foo(x):
    if x &gt; 100:
        return 1
    elif x &gt; 50:
        return 2
    else:
        return 3
</code></pre>
<p>Any ideas why?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd recommend </p>
<pre><code>lambda x: 1 if x &gt; 100 else (2 if x &gt; 50 else 3)
</code></pre>
<p>for readability because explicit is better than implicit.</p>
<p>Indeed, due to evaluation from left to right, the ternary operator is right associative as the following code demonstrates</p>
<pre><code>def f(a, b):
    return 1 if a else 2 if b else 3

def left(a, b):
    return (1 if a else 2) if b else 3

def right(a, b):
    return 1 if a else (2 if b else 3)

tpl = "{:^8}{:^8}{:^6}{:^6}{:^6}"
print(tpl.format('a', 'b', 'f', 'left', 'right'))
for (a, b) in [(False, False),(False, True),(True, False),(True, True)]:
    print(tpl.format(repr(a), repr(b), f(a,b), left(a,b), right(a,b)))

""" my output -&gt;

a       b      f    left right 
False   False    3     3     3   
False    True    2     2     2   
True   False    1     3     1   
True    True    1     1     1  

"""
</code></pre>
<p>The ternary expression always gives the same result as the expression where everything after the first else is parenthesized.</p>
<p>When the conditions are <code>(x&gt;100)</code> and <code>(x&gt;50)</code>, the case <code>True, False</code> can never happen, so the three expressions give the same result. Nevertheless, <em>explicit is better than implicit</em>!</p>
</div>
<div class="post-text" itemprop="text">
<p>You don't have to use elif. You can use <code>if</code> inside another <code>else</code> which is the same as what lambda function is doing:</p>
<pre><code>def foo(x):
    if x &gt; 100:
        return 1
    else:
        if x &gt; 50:
           return 2
        else:
           return 3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are actually using something like elif by writing</p>
<pre><code>else 2 if x &gt; 50
</code></pre>
<p>in </p>
<pre><code>lambda x: 1 if x &gt; 100 else 2 if x &gt; 50 else 3
</code></pre>
<p>Its just a different way of writing something like elif in lambda</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>lambda x: 1 if x &gt; 100 else 2 if x &gt; 50 else 3
</code></pre>
<p>Means :</p>
<pre><code># 1 if x &gt; 100 
if x &gt; 100:
    return 1 
# else 2 if x &gt; 50 else 3
else:
    # 2 if x &gt; 50 else 3
    if x &gt; 50:
        return 2
    else:
        return 3
</code></pre>
<p>Which does the same thing that your second snippet with <code>elif</code>.</p>
<p>You cannot use <code>elif</code> in a lambda expression. As far as I know, it should raise a <code>SyntaxError</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You have <em>concatenated</em> two <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">conditional expressions</a>.</p>
<p>One</p>
<pre><code>2 if x &gt; 50 else 3
</code></pre>
<p>provides the value for the <em>else clause</em> of the other.</p>
<pre><code>1 if x &gt; 100 else ...
</code></pre>
<hr/>
<p>You have the conditional expression</p>
<pre><code>x if C else y
</code></pre>
<p>where</p>
<pre><code>x = 1
C = 100
</code></pre>
<p>and</p>
<pre><code>y = 2 if x &gt; 50 else 3
</code></pre>
<p>From the <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="nofollow noreferrer">docs</a>, <code>y</code> can be an expression so <code>y</code> can be a conditional expression. </p>
</div>
<span class="comment-copy">I'd recommend <code>lambda x: 1 if x &gt; 100 else (2 if x &gt; 50 else 3)</code> for readability because explicit is better than implicit.</span>
<span class="comment-copy">Why do you think a proper function should use <code>elif</code>?</span>
<span class="comment-copy">@Gribouillis I wish you wrote that as an answer as it pretty much explains what and why :)</span>
<span class="comment-copy">Perfect, thanks :)</span>
<span class="comment-copy">I also like <code>lambda x: 3 - bisect.bisect_left([50, 100], x)</code> :-)</span>
<span class="comment-copy">@Gribouillis Sure, if you are searching in an interval I think bisect is the way to go.</span>
<span class="comment-copy">@ayhan I know how it functions and what is the flow but the syntax seemed strange</span>
