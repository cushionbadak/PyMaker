<div class="post-text" itemprop="text">
<p>Let's say I have this kind of file.</p>
<p><a href="https://i.stack.imgur.com/puW0A.png" rel="nofollow noreferrer"><img alt="data" src="https://i.stack.imgur.com/puW0A.png"/></a></p>
<p>How do I access the numbers in the 'helpful' column? I need the numbers separately. Preferably if I can actually store them in <code>helpful_1</code> and <code>helpful_2</code> columns. </p>
<p>I can do something like this.</p>
<p><a href="https://i.stack.imgur.com/nAiD2.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/nAiD2.png"/></a></p>
<p>But to be honest I don't really like this way. I don't think it's the best practice either. It's a pretty large file, by the way (~2GB), so this may not be the best way to do it. Maybe there's better way to access this as dataframe? Any ideas?</p>
<p>Also I wonder what square brackets in CSV are considered as. Are they some kind of lists? Or it doesn't mean anything?</p>
<p>Thanks.</p>
<p>UPDATE: I have answered my question below. But I am still open for some new suggestion as I am not exactly sure of my own solution. If there is a more elegant and efficient solution, I'd really like to know. Also, thanks for everyone who has commented/answered, every help is much appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<h1>EDIT To handle strings:</h1>
<pre><code>df_out = df.assign(**df.helpful.apply(lambda x: pd.Series(eval(x))).rename(columns={0:'helpful_1',1:'helpful_2'}))
</code></pre>
<p>You could do soemthing like this:</p>
<pre><code>df.assign(**df.helpful.apply(pd.Series).rename(columns={0:'helpful_1',1:'helpful_2'}))
</code></pre>
<p>Output:</p>
<pre><code>   helpful  number  helpful_1  helpful_2
0   [0, 1]       1          0          1
1   [0, 3]       2          0          3
2   [5, 6]       3          5          6
3  [8, 10]       4          8         10
4   [2, 5]       5          2          5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think your solution is really nice, maybe a bit improve is possible - add parameter <code>expand=True</code> to <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.split.html" rel="nofollow noreferrer"><code>str.split</code></a> for output as <code>DataFrame</code>, cast to <code>int</code> both columns together:</p>
<pre><code>df[['helpful_1', 'helpful_2']] = df['helpful'].str.strip('[]')
                                              .str.split(',', expand=True)
                                              .astype(int)
print (df)
  helpful  number  helpful_1  helpful_2
0   [0,1]       1          0          1
1   [0,3]       2          0          3
2   [5,6]       3          5          6
3  [8,10]       4          8         10
4   [2,5]       5          2          5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>After some reading, I finally did the following.</p>
<pre><code>df['helpful_1'], df['helpful_2'] = df['helpful'].str.strip('[]').str.split(',', 1)
</code></pre>
<p>Basically, I stripped down the square brackets first, and then I split it by a comma, then they are stored into two separate columns.</p>
<p>And then because I need them as int not as string, I converted them this way.</p>
<pre><code>df['helpful_1'] = df['helpful_1'].astype(int)
df['helpful_2'] = df['helpful_2'].astype(int)
</code></pre>
<p>But I am not exactly satisfied, maybe there are better solutions, but this is all that works for now. I do think that maybe my code still has room for some improvement. If you can think of a more elegant and efficient way, please do tell me. I'm open for all new suggestions.</p>
</div>
<span class="comment-copy">using a plain <a href="https://docs.python.org/3/library/csv.html#module-csv" rel="nofollow noreferrer"><code>csv.reader</code></a> (as opposed to <code>pandas</code>) you could access the rows in your csv one by one.<code>[0,1]</code> will be treated as the string <code>'[0,1]'</code> with this reader.</span>
<span class="comment-copy">@hiroprotagonist but will that still load as dataframe?</span>
<span class="comment-copy">no, <code>dataframe</code>s are specific to <code>pandas</code>. this would just help rearrange your csv. (you could read the old one and transform it to a new one. but it seems that will not solve your problem... sorry.)</span>
<span class="comment-copy">I think that should work, but it doesn't work for me. It displays the whole [0,1] in both the new columns instead. I have no idea why, I am still working on it.</span>
<span class="comment-copy">Also I think it's worth noting that the square brackets here are apparently considered string, as I opened it on vi it's written as "[0, 1]".</span>
<span class="comment-copy">@AnnaRG Yes, your columns are probably dtype object meaning they are strings.  I edited the solution.</span>
<span class="comment-copy">Thanks. But what does the parameter <code>expand=True</code> add to the code?</span>
<span class="comment-copy">it create dataframe from output and then is possible assign it to new columns like <code>df[['helpful_1', 'helpful_2']]</code></span>
<span class="comment-copy">if test <code>df1 = df['helpful'].str.strip('[]')                                               .str.split(',', expand=True)                                               .astype(int)</code> it return <code>DataFrame</code> with 2 columns.</span>
<span class="comment-copy">Oh I got. That's why when I put the <code>.astype(int)</code> directly behind the <code>split()</code> without the <code>expand=True</code> yesterday it didn't work. Now I know why. Thank you!</span>
<span class="comment-copy">Glad can help! Nice day!</span>
