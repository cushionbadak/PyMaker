<div class="post-text" itemprop="text">
<p>Given a string with numbers:</p>
<pre><code>I counted, ' 1 2 3 4 5 5 5 8 9 10 '
</code></pre>
<p>The goal is to convert the numbers to the <code>_NUM-*_</code> symbol where the <code>*</code> denotes the order by which the number occurs. E.g. given the above intpu the desired output is: </p>
<pre><code>"I counted, ' _NUM-1_ _NUM-2_ _NUM-3_ _NUM-4_ _NUM-5_ _NUM-6_ _NUM-7_ _NUM-8_ _NUM-9_ _NUM-10_'"
</code></pre>
<p>Even if are repeated numbers, e.g. given the input</p>
<pre><code>I said, ' 1 2 3 4 5 5 5 8 9 10 '
</code></pre>
<p>the desired output keeps the order of the number ignoring the value of the number itself e.g.:</p>
<pre><code>"I said, ' _NUM-1_ _NUM-2_ _NUM-3_ _NUM-4_ _NUM-5_ _NUM-6_ _NUM-7_ _NUM-8_ _NUM-9_ _NUM-10_'" 
</code></pre>
<p>I've tried:</p>
<pre><code>import re

s = "I counted, ' 1 2 3 4 5 6 7 8 9 10 '"
num_regexp = '(?&lt;!\S)(?=.)(0|([1-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[1-9])?(?!\S)'


re.sub(num_regexp, '_NUM_', s)
</code></pre>
<p>But it simply replaced the outputs with the same <code>_NUM_</code> symbol without keeping the order, i.e. </p>
<p>[out]:</p>
<pre><code>"I counted, ' _NUM_ _NUM_ _NUM_ _NUM_ _NUM_ _NUM_ _NUM_ _NUM_ _NUM_ _NUM_ _NUM_ '"
</code></pre>
<p>I could do a post <code>re.sub</code> operation and replace each <code>_NUM_</code>, i.e. </p>
<pre><code>import re

s = "I counted, ' 1 2 3 4 5 6 7 8 9 10 '"
num_regexp = '(?&lt;!\S)(?=.)(0|([1-9](\d*|\d{0,2}(,\d{3})*)))?(\.\d*[1-9])?(?!\S)'

num_counter = 1
tokens = []
for token in re.sub(num_regexp, '_NUM_', s).split():
    if token == '_NUM_':
        token = '_NUM-{}_'.format(num_counter)
        num_counter += 1

    tokens.append(token)

result = ' '.join(tokens)
</code></pre>
<p>[out]:</p>
<pre><code>"I counted, ' _NUM-1_ _NUM-2_ _NUM-3_ _NUM-4_ _NUM-5_ _NUM-6_ _NUM-7_ _NUM-8_ _NUM-9_ _NUM-10_ '"
</code></pre>
<p><strong>Is a better way to achieve the desired output without first a generic <code>re.sub</code> and then a post-hoc string editing?</strong> </p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="nofollow noreferrer"><code>itertools.count</code></a> as a default argument to the function passed to <code>re.sub</code>.</p>
<pre><code>&gt;&gt;&gt; from itertools import count

&gt;&gt;&gt; re.sub('(\d+)', lambda m, c=count(1): '_NUM_-{}'.format(next(c)), s)
' _NUM_-1 _NUM_-2 _NUM_-3 _NUM_-4 _NUM_-5 _NUM_-6 _NUM_-7 _NUM_-8 _NUM_-9 _NUM_-10 '
</code></pre>
<p>Note that I am using a simplified regex for matching number just to demonstrate how to get the count, you could replace it with regex that matches floats as well.</p>
</div>
<span class="comment-copy">Cool! I didn't know about <code>itertools.count</code> and using lambda inside the replacement is uber-cool!</span>
