<div class="post-text" itemprop="text">
<p>I have a set object like this</p>
<pre><code>{'Book',
 'car',
 'bird',
 'cup',
 'book',
 ...
 'river'}
</code></pre>
<p>Since in Python, set object does not support indexing. If I want to extract certain elements, say 'Book' and its lowercase form 'book', from the set and count their frequencies relative to total number of elements (i.e., tokens) in the set. What is the handy way to do this?</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can count how many times the word is in the list whatever the casing by couting the occurrences of its lowercased (or casefolded) version (otherwise the question doesn't make sense since <code>set</code> guarantees uniqueness) using <code>collections.Counter</code>:</p>
<pre><code>import collections

s = {'Book',
 'car',
 'bird',
 'cup',
 'book',
 'CuP',
 'river'}

c = collections.Counter(map(str.casefold,s))

print(c)
</code></pre>
<p>result:</p>
<pre><code>Counter({'book': 2, 'cup': 2, 'river': 1, 'car': 1, 'bird': 1})
</code></pre>
<p>and for frequencies:</p>
<pre><code>freq = {k:v/len(s) for k,v in c.items()}  # python 2: needs `float(v)/...`
</code></pre>
<p>which gives:</p>
<pre><code>{'cup': 0.2857142857142857, 'river': 0.14285714285714285, 'car': 0.14285714285714285, 'bird': 0.14285714285714285, 'book': 0.2857142857142857}
</code></pre>
<p>as explained by a nice comment, <a href="https://docs.python.org/3/library/stdtypes.html#str.casefold" rel="nofollow noreferrer"><code>str.casefold</code></a> handles more cases (no pun intended!) than <code>str.lower</code>, even if <code>str.lower</code> works for most words (use <code>str.lower</code> for Python 2.x, as <code>casefold</code> isn't available)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>If I want to extract certain elements, say 'Book' and its lowercase form 'book', from the set and count their frequencies relative to total number of elements (i.e., tokens) in the set.</p>
</blockquote>
<p>If you want to find the frequency of a certain element in your set, you can use <code>collections.Counter</code> to accomplish this:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; s = \
  {'Book',
 'car',
 'bird',
 'cup',
 'book',
 'river'}
&gt;&gt;&gt; c = Counter(s)
&gt;&gt;&gt; c['Book']
1
&gt;&gt;&gt; c['book']
1
&gt;&gt;&gt; 
</code></pre>
<p>Realize however, that <code>set</code>s do not support duplicate elements, so the frequency will always be <code>1</code>. Consider using a <code>list</code> or <code>tuple</code> to initialize your <code>Counter</code> object.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>mySet =  {'Book','car','bird','cup','book','river'}

counter = lambda s, element: len([e for e in s if element.lower() == e.lower()])

print(counter(mySet, "Book"))
</code></pre>
<p>Result:</p>
<pre><code>2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is handy (and it works also for lists) :</p>
<pre><code>from itertools import product
from collections import Counter
mySet = {'Book',
 'car',
 'bird',
 'cup',
 'book',
 'river'}

def Cc(s): # generates all possible cases for a string
  s = s.lower()
  for p in product(*[(0,1)]*len(s)):
    yield ''.join(c.upper() if t else c for t,c in zip(p,s))

elements = list(Cc("book")) # ['book','Book','bOok',....,'BOOK']
counts = Counter(mySet)
avg = sum(counts[e] for e in elements)/len(mySet)
print(avg) # =&gt; 0.3333333333333333
</code></pre>
</div>
<span class="comment-copy"><code>your_set.remove('Book')</code></span>
<span class="comment-copy">Wait, hold on. You do realise that the frequency will always be 1, since set elements are unique, right?</span>
<span class="comment-copy">I don't think pop() will work in this context.</span>
<span class="comment-copy">do you need different versions of the same word with a different casing?</span>
<span class="comment-copy">Do you only need to deal with (at most) those 2 possibilities, all lower case and capitalized, like 'book' and 'Book'? Or are there other possibilities, like 'BOOK', and even 'bOoK'?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/stdtypes.html#str.casefold" rel="nofollow noreferrer"><code>str.casefold</code></a> is probably better for this.</span>
<span class="comment-copy">@PM2Ring that's very interesting.</span>
<span class="comment-copy">Thanks, this really helps.</span>
<span class="comment-copy">Ah, I see. This is probably more what the OP wanted.</span>
<span class="comment-copy">at least I learned a new trick from PM2Ring :)</span>
<span class="comment-copy">Thanks for clarifying this to me.</span>
<span class="comment-copy">@ChrisT. Note that this code counts the upper and lower case versions of a word separately. From your question I believe that  Jean-Fran√ßois Fabre's answer is what you actually want, because it combines the count for all upper / lower case variations of a word.</span>
<span class="comment-copy">Got it, thanks.</span>
<span class="comment-copy">Yes, @PM2Ring Is right.</span>
<span class="comment-copy">That's ok if you just want to test a single word, but since you have to scan &amp; convert the entire set, you might as well save the results so that multiple counts can be performed without having to rescan the set.</span>
<span class="comment-copy">The main point of using sets is that they provide very fast membership testing. Whereas the <code>list.count</code> method has to perform a linear scan of the list to do its work. And since you're constructing a list from a set, the count for each item can only ever be zero or one. So this technique is <i>very</i> inefficient.</span>
<span class="comment-copy">Thanks so much for explaining this.</span>
