<div class="post-text" itemprop="text">
<p>I was using <a href="https://stackoverflow.com/a/12097555/316232">this answer</a> in order to run parallel commands with multiprocessing in Python on a Linux box.   </p>
<p>My code did something like:</p>
<pre><code>import multiprocessing
import logging

def cycle(offset):
    # Do stuff

def run():
    for nprocess in process_per_cycle:
        logger.info("Start cycle with %d processes", nprocess)
        offsets = list(range(nprocess))
        pool = multiprocessing.Pool(nprocess)
        pool.map(cycle, offsets)
</code></pre>
<p>But I was getting this error: <code>OSError: [Errno 24] Too many open files</code><br/>
So, the code was opening too many file descriptor, i.e.: it was starting too many processes and not terminating them.</p>
<p>I fixed it replacing the last two lines with these lines:</p>
<pre><code>    with multiprocessing.Pool(nprocess) as pool:
        pool.map(cycle, offsets)
</code></pre>
<p>But I do not know exactly why those lines fixed it.</p>
<p>What is happening underneath of that <code>with</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're creating new processes inside a loop, and then forgetting to close them once you're done with them. As a result, there comes a point where you have too many open processes. This is a bad idea.</p>
<p>You could fix this by using a context manager which automatically calls <code>pool.terminate</code>, or manually call <code>pool.terminate</code> yourself. Alternatively, why don't you create a pool outside the loop just <em>once</em>, and then send tasks to the processes inside?</p>
<pre><code>pool = multiprocessing.Pool(nprocess) # initialise your pool
for nprocess in process_per_cycle:
    ...       
    pool.map(cycle, offsets) # delegate work inside your loop

pool.close() # shut down the pool
</code></pre>
<p>For more information, you could peruse the <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool" rel="noreferrer"><code>multiprocessing.Pool</code></a> documentation.</p>
</div>
<div class="post-text" itemprop="text">
<p>It is context manger. Using with ensures that you are opening and closing files properly. To understand this in detail, I'd recommend this article <a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/" rel="nofollow noreferrer">https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/</a></p>
</div>
<span class="comment-copy">Here is the <a href="https://github.com/python/cpython/blob/master/Lib/multiprocessing/pool.py#L607-L611" rel="nofollow noreferrer">source code</a> each process is calling <code>self.terminate()</code></span>
<span class="comment-copy">The <code>with</code> version is implicitly calling <code>pool.close()</code> after <code>pool.map()</code> returns. According to the docs, that "Prevents any more tasks from being submitted to the pool. Once all the tasks have been completed the worker processes will exit". This likely causes the open files each task has open to be closed.</span>
<span class="comment-copy">Am I wrong, or @COLDSPEED did answer the question and now it is erased? I was not able to read it deeply, but I would like to... But now it is gone... Anyone knows why the question is down-voted?</span>
<span class="comment-copy">Hi @cᴏʟᴅsᴘᴇᴇᴅ ... Any hints on this?</span>
<span class="comment-copy">@nephewtom I'd deleted it because I didn't think it was helpful to anyone. I've undeleted it now.</span>
<span class="comment-copy">Calling manually to <code>pool.terminate</code> probably will be the thing to do here. I could not create the pool outside, because I wanted to change it on each iteration. So in each one, the number of spawned processes was increasing. For example, if process_per_cycle was [2, 4, 8], each iteration would spawn 2, 4 and 8 processes.</span>
<span class="comment-copy">@nephewtom Yes, that would be the other option, if you can't use the context manager.</span>
<span class="comment-copy">Though the question of why <code>with</code> solves it, remains unanswered...</span>
<span class="comment-copy">@nephewtom I explained why... because <code>with</code> closes the process pool  automatically once you're done with it.</span>
<span class="comment-copy">It's obvious it is a context manager. But why does its use here cause this to work?</span>
<span class="comment-copy">You can have a look at <a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/" rel="nofollow noreferrer">this</a> explanation.</span>
