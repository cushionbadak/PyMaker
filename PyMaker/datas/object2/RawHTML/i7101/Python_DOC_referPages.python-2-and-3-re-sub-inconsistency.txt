<div class="post-text" itemprop="text">
<p>I am writing a function to split numbers and some other things from text in python. The code looks something like this:</p>
<pre><code>EN_EXTRACT_REGEX = '([a-zA-Z]+)'
NUM_EXTRACT_REGEX = '([0-9]+)'
AGGR_REGEX = EN_EXTRACT_REGEX + '|' + NUM_EXTRACT_REGEX

entry = re.sub(AGGR_REGEX, r' \1\2', entry)
</code></pre>
<p>Now, this code works perfectly fine in python3, but it does not work under python2 and get an "<em>unmatched group</em>" error. </p>
<p>The problem is, I need to support both versions, and I could not get it to work properly in python2 although I tried various other ways.</p>
<p>I am curious what could be the root of this problem, and is there any workaround for it?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that the problem might be that the regex pattern matches one <strong><em>or</em></strong> the other of the subpatterns <code>EN_EXTRACT_REGEX</code> and <code>NUM_EXTRACT_REGEX</code>, but not both.</p>
<p>When <code>re.sub()</code> matches the alpha characters in the first pattern it attempts to substitute the second group reference with <code>\2</code> which fails because only the first group matched - there is no second group.</p>
<p>Similarly when the digit pattern is matched there is no <code>\1</code> group to substitute and so this also fails.</p>
<p>You can see that this is the case with this test in Python 2:</p>
<pre><code>&gt;&gt;&gt; re.sub(AGGR_REGEX, r' \1', 'abcd')    # reference first pattern
 abcd
&gt;&gt;&gt; re.sub(AGGR_REGEX, r' \2', 'abcd')    # reference second pattern
Traceback (most recent call last):
....
sre_constants.error: unmatched group
</code></pre>
<p>The difference must lie within the different versions of the regex engine for Python 2 and Python 3. Unfortunately I can not provide a definitive reason for the difference, however, there is a documented change in version 3.5 for <a href="https://docs.python.org/3/library/re.html#re.sub" rel="noreferrer"><code>re.sub()</code></a> regarding unmatched groups:</p>
<blockquote>
<p>Changed in version 3.5: Unmatched groups are replaced with an empty string.</p>
</blockquote>
<p>which explains why it works in Python &gt;= 3.5 but not in earlier versions: unmatched groups are basically ignored.</p>
<hr/>
<p>As a workaround you can change your pattern to handle both matches as a single group:</p>
<pre><code>import re

EN_EXTRACT_REGEX = '[a-zA-Z]+'
NUM_EXTRACT_REGEX = '[0-9]+'
AGGR_REGEX = '(' + EN_EXTRACT_REGEX + '|' + NUM_EXTRACT_REGEX + ')'
# ([a-zA-Z]+|[0-9]+)

for s in '', '1234', 'abcd', 'a1b2c3', 'aa__bb__1122cdef', '_**_':
    print(re.sub(AGGR_REGEX, r' \1', s))
</code></pre>
<p>Output</p>
<pre>

 1234
 abcd
 a 1 b 2 c 3
 aa__ bb__ 1122 cdef
_**_
</pre>
</div>
<span class="comment-copy">Thanks,this works well on both versions. :)</span>
