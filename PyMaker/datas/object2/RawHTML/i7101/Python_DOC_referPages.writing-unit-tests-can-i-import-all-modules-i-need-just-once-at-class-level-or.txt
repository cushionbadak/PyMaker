<div class="post-text" itemprop="text">
<p>I'm trying to write unit tests for some code using <code>unittest</code>:</p>
<p><a href="https://docs.python.org/3/library/unittest.html" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.html</a></p>
<p>Suppose that each of the tests I'm writing needs to import the <code>math</code>, <code>os</code> and <code>datetime</code> module.  Right now I'm importing them in each of the tests I'm writing:</p>
<pre><code>#...code for which I'm writing the unit tests...
import unittest

class TestMyCode(unittest.TestCase):

    def test_method_1(self):
        # unit test for method 1
        import math
        import os
        import datetime
        .
        .

    def test_method_2(self):
        # unit test for method 2
        import math
        import os
        import datetime
        .
        .

if __name__ == "__main__":
    unittest.main()
</code></pre>
<p>To avoid code duplication, isn't it possible to just import them once at class level? This:</p>
<pre><code>#...code for which I'm writing the unit tests...
import unittest

class TestMyCode(unittest.TestCase):

    import math
    import os
    import datetime

    def test_method_1(self):
        # unit test for method 1
        .
        .

    def test_method_2(self):
        # unit test for method 2
        .
        .

if __name__ == "__main__":
    unittest.main()
</code></pre>
<p>results in the error</p>
<pre><code>NameError: name 'math' is not defined
</code></pre>
<p>So it's clearly not the right approach.</p>
<p><strong>EDIT</strong> just for clarity, both the code for which I'm writing the unit tests (which is composed of just two methods, actually) and the (two) unit tests are in the same module, let's call it <code>MyCode.py</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Given that the duplicated code you want to get rid of consists of imports, I completely agree with BrenBarn's response, because you don't need to import a module multiple times.
For the general case where you want to run the same code before or after every test in a class you should use the setUp() and tearDown() methods of class unittest.TestCase.</p>
</div>
<span class="comment-copy">Why don't you import them at the <i>module</i> level?</span>
<span class="comment-copy">@BrenBarn good idea! The fact is that I'm putting the unit tests in the same module which contains the code to be tested.(I have no idea if this is correct practice: I just started this work today and I'm not a professional programmer). <code>math</code> is not used by the main code, but only by the unit tests. So it seemed to me a bit "dirty" to modify the code for which I'm writing tests, by adding imports only used by the tests. In practice, to write the tests, I'm modifying the code I'm supposed to test. What do you think?</span>
<span class="comment-copy">If you're including your test code in the code it's testing, you're already modifying the main code by adding the test code to it, so I don't think it makes sense to worry too much about that.  If you want to keep things visually separate, you could put the unittest imports at the module level, but towards the end of the file (right before your unittest code, along with <code>import unittest</code>).  If your test code becomes large enough that it gets unwieldy to have all that in the same file then you should move it to a separate file.</span>
<span class="comment-copy">@BrenBarn you're right, I'm modifying it already :) and by putting the imports just before the unittest, everything is also nicely visually separated. For now the code is short (it's just two methods, after all), but surely I'll separate in different files if it grows. Thanks!!!</span>
<span class="comment-copy">Hey great! I didn't know about these methods. Thanks! Just a clarification: you say it's not necessary to import a module multiple times. Could it be even harmful? I had the impression that importing the <code>pandas</code> module twice, one at <i>module</i> level and then inside the  <code>test_method_2(self)</code> generated a lot of warnings. Maybe it's because that's creating duplicate namespaces? Sorry for not showing you a test case, but I'm on holiday today and I have difficulties accessing my work code.</span>
<span class="comment-copy">PS If you wonder why on Earth one would import the same module twice, well, it was just a bug :P I added the import at <i>module</i> level, and then removed it from all tests, except for one where I forgot to remove it.</span>
<span class="comment-copy">I don't know why in that example you see lots of warnings the second time; it works as expected for me. If you want to understand more of what happens when you import you can run python with option -v. It will dump out lots of info. For example, when you import pandas the first time it shows a lot of information about other modules being imported. The second time you import, nothing happens. Even if you import another module which in turn imports pandas, the interpreter keeps track of modules imported and does not re-import. More info: <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">docs.python.org/3/reference/import.html</a></span>
