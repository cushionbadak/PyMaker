<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/3/reference/expressions.html#generator.send" rel="nofollow noreferrer">docs</a>, the send() function: </p>
<blockquote>
<p>"Resumes the execution and “sends” a value into the generator function. The value argument becomes the result of the current yield expression. The send() method returns the next value yielded by the generator, or raises StopIteration if the generator exits without yielding another value. When send() is called to start the generator, it must be called with None as the argument, because there is no yield expression that could receive the value."</p>
</blockquote>
<p>But i can't understand, why "The value argument becomes the result of the current yield expression" is not happened in the following example:</p>
<pre><code>def gen():
    yield 1
    x = (yield 42)
    print(x)
    yield 2

&gt;&gt;&gt;c=gen() #create generator
&gt;&gt;&gt;next(c) #prints '1' and stop execution, which is caused by yield 1
&gt;&gt;&gt;c.send(100) #prints '42', because 'The send() method returns the next value yielded by the generator'
&gt;&gt;&gt;next(c) #prints 'None' and '2'
</code></pre>
<p><strong>So why x variable stays 'None' dispite i send 100 to it by c.send(100)?</strong> It seems, that yield expression in right hand side works in two steps: first it return the value to generator's caller and the second it returns argument of send function inside generator. And if add extra next(c) before send(42) i'll get expected behavior and programm prints '100'. It's not clear for me from documentation, why these two steps should not happen simultaneously when i call send().</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I've figured it out.</p>
<pre><code>c = gen()
</code></pre>
<p>You create a genertor in the <code>c</code> variable, there none of the generator's code is executed.</p>
<pre><code>next(c)
</code></pre>
<p>Then you use the <code>next()</code> function, the <code>next</code> function go to the next <code>yield</code> statement who is <code>yield 1</code> here.
So this <code>yield</code> returns <code>1</code> and stops the generator's execution to try to catch a value.</p>
<p>The next line is
<code>c.send(100)</code>, so the <code>yield 1</code> was waiting for a value and you provided it, but this value isn't saved.<br/>
The <code>send</code> method also execute the rest of the generator until the next <code>yield</code> statement who is:</p>
<pre><code>x = (yield 42)
</code></pre>
<p>So the yield here return 42 and stops the generator program to try to catch a value. But after that you call</p>
<pre><code>next(c)
</code></pre>
<p>And you didn't provided a value so <code>x</code> is None now. Then the rest of the code is executed (until the next <code>yield</code> statement, don't forget)</p>
<pre><code>print(x)
yield 2
</code></pre>
<p>So it prints <code>x</code> who is None and then the <code>yield</code> returns 2 and try to catch a value.</p>
<p>Try to write this</p>
<pre><code>c = gen()
next(c)
next(c)
c.send(100)
</code></pre>
<p>And it will work (understand why !)</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>So why x variable stays 'None' dispite i send 100 to it by
  c.send(100)?</p>
</blockquote>
<p>Because the current <code>yield</code> is not the one you think it is, it's the one before. </p>
<p>When you send 100, the generator is still stopped at <code>yield 1</code>, not yet at <code>yield 42</code>, hence 100 will be the result of <code>yield 1</code>, not of <code>yield 42</code>.</p>
<p>To see this clearer, if you modify the generator in order to retrieve the content of <code>yield 1</code> in a <code>z</code> variable, you'll see that <code>z</code> does contain 100:</p>
<pre><code>&gt;&gt;&gt; def gen():
...     z = yield 1
...     x = (yield 42)
...     print(x, z)
...     yield 2
... 
&gt;&gt;&gt; c=gen()
&gt;&gt;&gt; next(c)
1
&gt;&gt;&gt; c.send(100)
42
&gt;&gt;&gt; next(c)
None 100
2
&gt;&gt;&gt;
</code></pre>
<p>And that's the reason why an extra <code>next()</code> will print <code>100</code>. Back to your code:</p>
<pre><code>def gen():
    yield 1  # first next(), stops here (before "getting out" of yield)
    x = (yield 42) # second next(), stops here (before "getting out" of yield),
                   # so, when you send(100), then 100 is given to x and execution goes on, so:
    print(x)  # 100 is printed
    yield 2  # ... and 2.
</code></pre>
</div>
