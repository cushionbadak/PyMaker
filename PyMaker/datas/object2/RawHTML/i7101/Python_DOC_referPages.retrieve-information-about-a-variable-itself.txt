<div class="post-text" itemprop="text">
<p>In Python, everything is an object. What is the nature of variables? Explore it in an example:</p>
<pre><code>&gt;&gt;&gt; foo = 1
&gt;&gt;&gt; dir(foo)
['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', ...]
&gt;&gt;&gt; dir(1)
['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', ...]
</code></pre>
<p>Here, both calls to <code>dir()</code> list the value’s (the int object for <code>1</code>) properties and methods.</p>
<pre><code>&gt;&gt;&gt; id(foo)
4376812816
&gt;&gt;&gt; id(1)
4376812816
</code></pre>
<p>And the calls to <code>id()</code> show that the object is the same in both cases.</p>
<p>There does not appear to be a way to get information about the variable itself, instead of the object it references. Is there anything in Python to get information about the variable <code>foo</code> instead of the object it references?</p>
</div>
<div class="post-text" itemprop="text">
<p>Python’s variables are essentially just <em>names</em> for objects. These names are just labels for objects, so the only “property” of a name would be which object it refers to, which is exactly what you get by <em>using</em> a name. </p>
<p>That being said, names to belong to something: A scope. Names are valid within the scope they are defined in, so if you can access that scope, it is possible to see the name. You can use <a href="https://docs.python.org/3/library/functions.html#locals" rel="nofollow noreferrer"><code>locals()</code></a> to access the current local scope:</p>
<pre><code>&gt;&gt;&gt; foo = 1
&gt;&gt;&gt; locals()
{'foo': 1, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__name__': '__main__', '__doc__': None, '__builtins__': &lt;module 'builtins' (built-in)&gt;, '__package__': None, '__spec__': None}
</code></pre>
<p>As you can see, there is the name <code>foo</code> in that scope, with the value it is referring to. But that’s really all there is. Apart from the name, the object they reference, and the scope they exist in, Python variables do not have any more properties. And they are not “objects” in the sense of Python objects, so they are an exception from the simplified statement “everything is an object”.</p>
<p>For more information on names, see <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">“Facts and myths about Python names and values” by Ned Batchelder</a>.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>id shows value's id and tell nothing about variable itself? Use which function can get its properties?</p>
</blockquote>
<p>Object ids are <em>opaque</em>: there is no (documented, reliable) way to go from an id to the object's properties. The primary use case for <code>id()</code> is to check whether two names refer to the same object.</p>
<p>The fact that <code>id(foo)</code> happens to be the same as <code>id(1)</code> is an <a href="https://stackoverflow.com/questions/306313/is-operator-behaves-unexpectedly-with-integers">implementation detail</a>. It does not hold in general:</p>
<pre><code>&gt;&gt;&gt; foo = 1234
&gt;&gt;&gt; id(foo)
140491179040280
&gt;&gt;&gt; id(1234)
140491179040808
</code></pre>
<p>(Note how the two numbers are different.)</p>
</div>
<div class="post-text" itemprop="text">
<p>I will answer you with 2 posts: Yes, in python everything is an <a href="https://stackoverflow.com/questions/865911/is-everything-an-object-in-python-like-ruby">object</a></p>
<p>and <a href="https://stackoverflow.com/questions/15667189/what-does-id-function-used-for">id</a> are like memory adresses in C. If you want only get your properties declared in the object, for me, the best choice is using sets: </p>
<pre><code>class A():
    a = 2 

set(dir(A())) - set(dir(object))
#set(['a', '__module__'])
</code></pre>
</div>
<span class="comment-copy">A variable doesn't have properties. The value it points to has properties. Variables are merely named placeholders in an algorithm, not physical entities.</span>
<span class="comment-copy">I'm not quite sure what you're after here. Do you want to find a Python object from its ID? Are you trying to find a list of names which refer to a particular ID?</span>
<span class="comment-copy">"what is the nature of variables or the names or the references?" - what kind of answer are you expecting to this question?</span>
<span class="comment-copy">What "properties" are you talking about here? Give some examples what you expect to get.</span>
<span class="comment-copy">I'd suggest you read <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">nedbatchelder.com/text/names.html</a>; an identifier isn't a thing in itself, merely a "tag" on a value.</span>
