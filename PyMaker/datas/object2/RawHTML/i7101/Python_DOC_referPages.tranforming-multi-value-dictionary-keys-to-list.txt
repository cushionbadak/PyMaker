<div class="post-text" itemprop="text">
<p>My input is a dictionary with values such as:<br/>
{0: '205,3', 1: '0,110,18,49,8', 10: '11,73'}
Unfortunately the values of the dictionary as you can see are strings ''.
My expected outcome is some like this<br/>
[(0,205),(0,3),(1,0),(1,110),(1,18).....]<br/>
My code is the following.                         </p>
<pre><code>def generate_edges(newDict):                                   
    edges = []
    for node in newDict:
        for neighbour in newDict[node]:
            if neighbour == ',':
                continue
            else:
                edges.append((node, int(neighbour)))
    print(edges)
    return edges
</code></pre>
<p>The problem is that as you can see, the number denoted as values a cut digit by digit with an outcome of:<br/>
[(0,2),(0,0),(0,5),(0,3),(1,0),(1,1),(1,1),(1,0).....]
How can i circumvent this problem and get the values as whole numbers instead of one digit numbers?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>collections.defaultdict</code> and create a <code>defaultdict(list)</code>.</p>
<p>As told in <a href="https://docs.python.org/2/library/collections.html#defaultdict-examples" rel="nofollow noreferrer">the docs</a>:</p>
<blockquote>
<p>When each key is encountered for the first time, it is not already in the mapping; so an entry is automatically created using the <code>default_factory</code> function which returns an empty list. The <code>list.append()</code> operation then attaches the value to the new list.</p>
</blockquote>
<p>So you can easily construct the dictionary that you want:</p>
<pre><code>from collections import defaultdict


l = [(2009, 'abc'), (2010, 'dfg'), (2009, 'hfg'), (2011, 'kdi')]

result = defaultdict(list)

for pair in l:
    result[pair[0]].append(pair[1])

print(result)  # {2009: ['abc', 'hfg'], 2010: ['dfg'], 2011: ['kdi']}
</code></pre>
<p>You simply iterate over each <em>tuple</em> in your list and append it's values to the dictionary.</p>
<p>If you want to get rid of the <code>[]</code> within each value, you can use <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join()</code></a>:</p>
<pre><code>...

def join_lists(d: dict, sep: str=', ') -&gt; dict:
    return {key: sep.join(values) for key, values in d.items()}

print(join_lists(result_dict))  # {2009: 'abc, hfg', 2010: 'dfg', 2011: 'kdi'}
</code></pre>
<p>I implemented a function called <code>join_lists()</code>, which accepts a dictionary as a first parameter and an optional separator as a second (which defaults to <code>", "</code>). The functions returns a <em>new</em> dict, which has the same keys, but it's values are comma-separated.</p>
</div>
<div class="post-text" itemprop="text">
<p>It looks that you just want the very first value for the key, key being the year</p>
<p>so this should do it</p>
<pre><code>result = dict()
for year, value in your_list:
    if year not in result:
    result[year] = value
</code></pre>
<p>this will of course drop the later occurrence of the second item in the tuple. I do not see you specifying what you want to do with it </p>
</div>
<span class="comment-copy">Please share your code with us.</span>
<span class="comment-copy">What happened to <code>hfg</code>?</span>
<span class="comment-copy">exactly, this is the output i get, but when i want to print that i still have the [' '] in each value! How can i get rid f that?</span>
<span class="comment-copy">@GeorgeKladis What is the format that you want?</span>
<span class="comment-copy">@GeorgeKladis I edited my answer with a possible solution of your format problem.</span>
<span class="comment-copy">Thanks man you rock! Exactly the format i needed! As a question for your code what does operator -&gt; do and also how is it possible this new function (join_lists) takes as argument the result_dict without calling the function in which it is used?</span>
<span class="comment-copy">@GeorgeKladis <code>-&gt;</code> is simly a <b>function annotation</b>. It describes each function parameter's <i>type</i> (I used it because the function params become self-explanatory. It says: the <code>join_lists</code> function accepts two parameters: <code>d</code>, which is a <code>dict</code>, and an optional one <code>sep</code>, which is a <code>str</code>. The function returns a value of type <code>dict</code>). Oh, this with <code>result_dict</code> in the function is my silly mistake. I didn't see it because it was all in one file and that's why it worked. I will edit my answer immediately. :)</span>
