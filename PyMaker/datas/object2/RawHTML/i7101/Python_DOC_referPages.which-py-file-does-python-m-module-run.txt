<div class="post-text" itemprop="text">
<p>What is the <code>__main__.py</code> file for, what sort of code should I put into it, and when should I have one?</p>
</div>
<div class="post-text" itemprop="text">
<p>Often, a Python program is run by naming a .py file on the command line:</p>
<pre><code>$ python my_program.py
</code></pre>
<p>You can also create a directory or zipfile full of code, and include a <code>__main__.py</code>.  Then you can simply name the directory or zipfile on the command line, and it executes the <code>__main__.py</code> automatically:</p>
<pre><code>$ python my_program_dir
$ python my_program.zip
# Or, if the program is accessible as a module
$ python -m my_program
</code></pre>
<p>You'll have to decide for yourself whether your application could benefit from being executed like this.</p>
<hr/>
<p>Note that a <code>__main__</code> <em>module</em> usually doesn't come from a <code>__main__.py</code> file. It can, but it usually doesn't. When you run a script like <code>python my_program.py</code>, the script will run as the <code>__main__</code> module instead of the <code>my_program</code> module. This also happens for modules run as <code>python -m my_module</code>, or in several other ways.</p>
<p>If you saw the name <code>__main__</code> in an error message, that doesn't necessarily mean you should be looking for a <code>__main__.py</code> file.</p>
</div>
<div class="post-text" itemprop="text">
<h1>What is the <code>__main__.py</code> file for?</h1>
<p>When creating a Python module, it is common to make the module execute some functionality (usually contained in a <code>main</code> function) when run as the entry point of the program. This is typically done with the following common idiom placed at the bottom of most Python files:</p>
<pre><code>if __name__ == '__main__':
    # execute only if run as the entry point into the program
    main()
</code></pre>
<p>You can get the same semantics for a Python package with <code>__main__.py</code>. This is a linux shell prompt, <code>$</code>, if you don't have Bash (or another Posix shell) on Windows just create these files at <code>demo/__&lt;init/main&gt;__.py</code> with contents in between the <code>EOF</code>s:</p>
<pre><code>$ mkdir demo
$ cat &gt; demo/__init__.py &lt;&lt; EOF
print('demo/__init__.py executed')
def main():
    print('main executed')
EOF
$ cat &gt; demo/__main__.py &lt;&lt; EOF
print('demo/__main__.py executed')
from __init__ import main
main()
EOF
</code></pre>
<p>(In a Posix/Bash shell, you can do the above without the <code>&lt;&lt; EOF</code>s and ending <code>EOF</code>s by entering <kbd>Ctrl</kbd>+<kbd>D</kbd>, the end-of-file character, at the end of each cat command)</p>
<p>And now:</p>
<pre><code>$ python demo
demo/__main__.py executed
demo/__init__.py executed
main executed
</code></pre>
<p>You can derive this from the documention. The <a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">documentation</a> says:</p>
<blockquote>
<h1><code>__main__</code> — Top-level script environment</h1>
<p><code>'__main__'</code> is the name of the scope in which top-level code executes.
  A module’s <code>__name__</code> is set equal to <code>'__main__'</code> when read from standard
  input, a script, or from an interactive prompt.</p>
<p>A module can discover whether or not it is running in the main scope
  by checking its own <code>__name__</code>, which allows a common idiom for
  conditionally executing code in a module when it is run as a script or
  with <code>python -m</code> but not when it is imported:</p>
<pre><code>if __name__ == '__main__':
      # execute only if run as a script
      main()
</code></pre>
<p>For a package, the same effect can be achieved by including a
  <code>__main__.py</code> module, the contents of which will be executed when the module is run with <code>-m</code>.</p>
</blockquote>
<h1>Zipped</h1>
<p>You can also package this into a single file and run it from the command line like this - but note that zipped packages can't execute sub-packages or submodules as the entry point:</p>
<pre><code>$ python -m zipfile -c demo.zip demo/*
$ python demo.zip
demo/__main__.py executed
demo/__init__.py executed
main() executed
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>__main__.py</code> is used for python programs in zip files. The <code>__main__.py</code> file will be executed when the zip file in run. For example, if the zip file was as such:</p>
<pre><code>test.zip
     __main__.py
</code></pre>
<p>and the contents of <code>__main__.py</code> was </p>
<pre><code>import sys
print "hello %s" % sys.argv[1]
</code></pre>
<p>Then if we were to run <code>python test.zip world</code> we would get <code>hello world</code> out.</p>
<p>So the <code>__main__.py</code> file run when python is called on a zip file.</p>
</div>
<div class="post-text" itemprop="text">
<p>You create <code>__main__.py</code> in <code>yourpackage</code> to make it executable as:</p>
<pre><code>$ python -m yourpackage
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your script is a directory or ZIP file rather than a single python file, <code>__main__.py</code> will be executed when the "script" is passed as an argument to the python interpreter.</p>
</div>
<span class="comment-copy">I found <code>python -m program_dir</code> and <code>python program_dir</code> a little different: the latter never runs <code>__init__.py</code> in the directory (if there is one).</span>
<span class="comment-copy">@brk: That doesn't seem to be the case now. I just tried <code>python3 program_dir</code> and it ran <code>__init__.py</code>.</span>
<span class="comment-copy">@mk12 I use Python 2.7. So...</span>
<span class="comment-copy"><code>-m</code> works if only the program is accessible as a module, else you could use <code>python &lt;yourpackage&gt;</code> NOTE: without <code>-m</code> option</span>
<span class="comment-copy">@BenyaminJafari it is not possible to write command line Python program that is not accessible as <a href="https://stackoverflow.com/questions/2996110/what-is-the-difference-between-a-module-and-a-script-in-python">a module</a>. Maybe you've meant <code>package</code>?</span>
<span class="comment-copy">when we create a Python package which contains the <b>main</b>.py, to run it <code>python -m &lt;yourproject&gt;</code> doesn't work, <code>-m</code> is a redundant option, but <code>python &lt;yourpackage&gt;</code> works well.</span>
