<div class="post-text" itemprop="text">
<p>Let's take an example!
When I write the following piece of code, I get a successful match (Please note, the string for the search function has 8 characters including a white-space and the search works for a value of re.MULTILINE greater than the size of the string to be searched which is 8 in this case):</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; pattern=re.compile('^&lt;html&gt;',re.MULTILINE)
&gt;&gt;&gt; print(pattern.search(' \n&lt;html&gt;'))
&lt;_sre.SRE_Match object; span=(2, 8), match='&lt;html&gt;'&gt;
&gt;&gt;&gt; print(re.MULTILINE)
8
</code></pre>
<p>But, when I set the value of re.MULTILINE to any value less than the size of the string the search fails, as shown below:</p>
<pre><code>&gt;&gt;&gt; re.MULTILINE=7
&gt;&gt;&gt; pattern=re.compile('^&lt;html&gt;',re.MULTILINE)
&gt;&gt;&gt; print(pattern.search(' \n&lt;html&gt;'))
None
</code></pre>
<p>How does re.MULTILINE work here?</p>
</div>
<div class="post-text" itemprop="text">
<p>You never change the value of <code>re.MULTILINE</code>. That's internal implementation for the module <code>re</code>. It needs to be used as a flag (enabled / disabled), not otherwise.</p>
<p>Basically it means:</p>
<blockquote>
<p><strong>re.MULTILINE</strong>:
  When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline). By default, '^' matches only at the beginning of the string, and '$' only at the end of the string and immediately before the newline (if any) at the end of the string.</p>
</blockquote>
<p>So it makes your regex pattern (^, $) to work on new lines as well. Otherwise, when using ^ the pattern is matched only for the first line.</p>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; text = 'this is sample\ntext\n'
&gt;&gt;&gt; print text
this is sample
text

&gt;&gt;&gt; pattern = 'sample$'
&gt;&gt;&gt; mo = re.search(pattern, text)
&gt;&gt;&gt; mo.group()

Traceback (most recent call last):
  File "&lt;pyshell#348&gt;", line 1, in &lt;module&gt;
    mo.group()
AttributeError: 'NoneType' object has no attribute 'group'

&gt;&gt;&gt; mo = re.search(pattern, text, re.MULTILINE)
&gt;&gt;&gt; mo.group()
'sample'
</code></pre>
</div>
<span class="comment-copy">Are you trying to use regex to parse HTML? if yes, then don't.</span>
<span class="comment-copy">Not really, it is just an example and behaves the same say with other non-html string inputs. Am trying to figure out how re.MULTILINE works</span>
<span class="comment-copy">Why are you changing the value of <code>re.MULTILINE</code>? If you want to use multiple flags, which is what that is effectively doing, you should combine them, as <a href="https://docs.python.org/3/library/re.html#re.compile" rel="nofollow noreferrer">the docs describe</a>, using the bitwise OR operator <code>|</code> (in this case, for <code>7</code>, that would be <code>re.ASCII | re.IGNORECASE | re.LOCALE</code>).</span>
<span class="comment-copy">To put it another way, what behaviour were you trying to change, and why did you think that changing the value of multiline was both a sensible thing to do and a way to achieve that change?</span>
<span class="comment-copy">@jonrsharpe: I do not intend to use multiple flags.I want to use re.MULTILINE to search multiple lines of strings. Now, how the value of re.MULTILINE affects the output that, bothers me and hence the question.  Sad, no answers yet, but oodles of downvotes as I write! :)</span>
<span class="comment-copy">Thank you @Vinny! I had gone through the documentation but, the peculiarity amazed me. I would be happy, if you could explain the difference in outputs of the following example snippets. By default, just curiously, I stumbled upon the value of re.MULTILINE set as 8 when printed.  example 1: &gt;&gt;&gt; re.MULTILINE=7 &gt;&gt;&gt; pattern=re.compile('^&lt;html&gt;',re.MULTILINE) &gt;&gt;&gt; print(pattern.search(' \n&lt;html&gt;')) None  example 2: &gt;&gt;&gt; re.MULTILINE=8 &gt;&gt;&gt; pattern=re.compile('^&lt;html&gt;',re.MULTILINE) &gt;&gt;&gt; print(pattern.search(' \n&lt;html&gt;')) &lt;_sre.SRE_Match object; span=(2, 8), match='&lt;html&gt;'&gt;</span>
<span class="comment-copy">@Marc88 if its value is not at least 8, it doesn't include the flag to actually set multiline behaviour. You can call it <code>MULTILINE</code> all you like, but the code it's passed to doesn't know or care what its <i>name</i> is, just what the <i>value</i> is. Why <i>would</i> the first example work? Please read up on flags and bitmasks.</span>
<span class="comment-copy">@jonrsharpe Now, that a start. Thank you for the direction! :)</span>
<span class="comment-copy">i didn't do a downvote here!</span>
<span class="comment-copy">You're welcome @Marc88. I would appreciate if you upvote if you find my answer helpful. Why did someone down vote my answer? I would appreciate it if you share, so I can learn and not repeat such mistake. Thanks.</span>
