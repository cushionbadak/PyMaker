<div class="post-text" itemprop="text">
<p>I learn that in cPython interpreter there is a GIL which causes the OS running one thread at a moment even if we have a multi-core processor. Meanwhile, changing from one thread to another brings a little time cost. So I wonder in multitask mode can we use more threads to improve efficiency?</p>
</div>
<div class="post-text" itemprop="text">
<p>For use more than one core in your Python program, you must use concurrency. For example:</p>
<pre><code>import threading

def methodA():
   #Do Something 
def methodB():
  #Do Something
aThread = threading.Thread(target=methodA)
aThread.start()
bThread= threading.Thread(target=methodA)
bThread.start()
</code></pre>
<p>The aThread will execute the methodA when you put de <code>.start()</code>, the same as de bThread but with the methodB, at the same time in different cores.</p>
<p>If you need to wait for the two thread until they finish  their work use <code>.join()</code> like this:</p>
<pre><code>aThread.join()
bThread.join()
#Then continue.
</code></pre>
<p>The concurrency itÂ´s a very big world with a lot of options and methods to use in different cases.</p>
<p>I really recommend to visit the official <a href="https://docs.python.org/3/library/concurrency.html" rel="nofollow noreferrer">site</a>.  </p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/20939299/does-python-support-multithreading-can-it-speed-up-execution-time?rq=1">this thread</a></span>
