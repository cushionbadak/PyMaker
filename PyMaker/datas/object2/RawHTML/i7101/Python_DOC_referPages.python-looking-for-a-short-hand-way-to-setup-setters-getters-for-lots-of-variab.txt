<div class="post-text" itemprop="text">
<p>I have one class (Bar) embedded inside another class (Foo).</p>
<pre><code>class Foo():
    class Bar():
        def __init__(self):
            self.a = 1
            self.b = 2
            ...
            self.z = 26


    def __init__(self):        
        self.bar = Bar()
</code></pre>
<p>To access the attributes of class Bar, the user would need to the following:</p>
<pre><code>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.bar.a
1
</code></pre>
<p>How can I setup a short dot notation so that users can use BOTH:</p>
<pre><code>&gt;&gt;&gt; f.bar.a
1
</code></pre>
<p>and </p>
<pre><code>&gt;&gt;&gt; f.a
1
</code></pre>
<p>In my example, I'm trying to demonstrate that Bar class has a lot of variables.  So I don't want to write a getter/setter for each one manually.  So I was thinking to use the property() in a for loop like this:</p>
<pre><code>def __init__(self):
    self.bar = Bar()

    # Allow shorter dot notation
    for parm in self.bar.__dict__:
         setattr(self, i, getattr(bar, i))
         self.i = property(...)
</code></pre>
<p>But I'm unsure how to use property in this context without manually writing several setter functions.  </p>
<p>Any suggestions on how to allow access to both shorter and longer notations?</p>
</div>
<div class="post-text" itemprop="text">
<p>That's what the <a href="https://docs.python.org/3/reference/datamodel.html#object.__getattr__" rel="noreferrer"><code>__getattr__</code>hook</a> is ideally suited for:</p>
<pre><code>class Foo:
    # ...

    def __getattr__(self, name):
        return getattr(self.bar, name)
</code></pre>
<p><code>__getattr__</code> is only called for attributes that are missing; so only attributes that are not already present on instances of <code>Foo()</code> are passed to <code>Foo().__getattr__()</code>. The <a href="https://docs.python.org/3/library/functions.html#getattr" rel="noreferrer"><code>getattr()</code> function</a> then lets you use the same attribute name on <code>self.bar</code>; if the attribute doesn't exist there either, an <code>AttributeError</code> is thrown, as would be expected.</p>
</div>
<span class="comment-copy">Your example has classes that don't explicitly inherit from <code>object</code> or any other new-style class, on Python 2. That'll produce <i>old-style classes</i>, an old, worse system with a lot of weird incompatibilities, only kept around because some old code depends on that behavior. Unless you really need to keep the old behavior, classes that don't inherit from anything else should explicitly inherit from <code>object</code> on Python 2.</span>
<span class="comment-copy">Just be very careful about accessing missing attributes before you set <code>self.bar</code>. Even something like <a href="http://ideone.com/VQJWMu" rel="nofollow noreferrer"><code>if not hasattr(self, 'bar')</code></a> before you set <code>self.bar</code> will cause infinite <code>__getattr__</code> recursion.</span>
