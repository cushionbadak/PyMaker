<div class="post-text" itemprop="text">
<p>I figure this is pretty basic, but can't seem to figure out even how to ask google the right question.  I am using <a href="https://pypi.python.org/pypi/websocket-client" rel="nofollow noreferrer">this python websocket client</a> to make some websocket connections.  Let's just assume I'm using the code example similar to that page:</p>
<pre><code>import websocket
import thread
import time

def on_message(ws, message):
    print(message)

def on_error(ws, error):
    print(error)

def on_close(ws):
    print("### closed ###")

def on_open(ws):
    def run(*args):
        ws.send("Hello")
        time.sleep(1)
        ws.close()
        print("thread terminating...")
    thread.start_new_thread(run, ())


if __name__ == "__main__":
    websocket.enableTrace(True)
    ws = websocket.WebSocketApp("ws://echo.websocket.org/",
                              on_message = on_message,
                              on_error = on_error,
                              on_close = on_close)
    ws.on_open = on_open
    ws.run_forever()
</code></pre>
<p>So what I am trying to do is add more arguments to the <code>on_open</code> function, something like this:</p>
<pre><code>def on_open(ws, more_arg):
    def run(*args):
        ws.send("Hello %s" % more_arg)
        time.sleep(1)
        ws.close()
        print("thread terminating...")
    thread.start_new_thread(run, ())
</code></pre>
<p>But i can't figure out how to pass these arguments in, so I tried in the main thread:</p>
<pre><code>ws.on_open = on_open("this new arg")
</code></pre>
<p>But i get the error:</p>
<blockquote>
<p>TypeError: on_open() takes exactly 2 arguments (1 given)</p>
</blockquote>
<p>How am I going to pass these new arguments to my <code>on_open</code> function?</p>
</div>
<div class="post-text" itemprop="text">
<p>Keep in mind that you need to assign a callback. You are instead calling a function and passing the return value to <code>ws</code>, which is incorrect.</p>
<p>You can use <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a> to curry a function to a higher order one:</p>
<pre><code>from functools import partial

func = partial(on_open, "this new arg")
ws.on_open = func
</code></pre>
<p>When <code>func</code> is invoked, it will invoke <code>on_open</code> with the first argument as <code>"this new arg"</code>, followed by any other arguments passed to <code>func</code>. Look at the implementation of <code>partial</code> in the doclink for more details.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a <code>lambda</code> to wrap the call:</p>
<pre><code>ws.on_open = lambda *x: on_open("this new arg", *x)
</code></pre>
</div>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ yes both helped but I ended up liking your <code>partial</code> usage better, I will accept that one.</span>
<span class="comment-copy">thanks yes the term "callback" is i think what I was blanking on.  Thanks for this, although I have to say the lambda technique suggested by Danial Sanchez seems pretty pythonic.</span>
<span class="comment-copy">@jeffery_the_wind Yeah... they're all the same. Personally, I don't like lambdas :)</span>
