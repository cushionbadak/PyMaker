<div class="post-text" itemprop="text">
<p>Using Python 2.7, I have an arbitrarily long list of tuples (t) where:</p>
<pre><code>  t[0] --&gt; first_name_id
  t[1] --&gt; first_name
  t[2] --&gt; last_name_id
  t[3] --&gt; last_name
</code></pre>
<p>first_name_id and first_name should be unique within the collection but last_name_id and last_name are unique only within the first_name_id/first_name.</p>
<p>As you can see below, there is a Jane whose last name is "Smith" but the id is 3 whereas for "Tom" the ID for "Smith" is "0"</p>
<pre><code>t =  [('1', 'Tom', '0', 'Smith'),
    ('1', 'Tom', '1', 'Johnson'),
    ('1', 'Tom', '2', 'Williams'),
    ('32', 'Jane', '0', 'Brown'),
    ('32', 'Jane', '1', 'David'),
    ('32', 'Jane', '3', 'Smith'),
    .
    .
    .
    ]
</code></pre>
<p>I'm attepting to consolidate this into a dictionary so that I can quickly find a tuple of ID's by passing through the first_name and last_name:</p>
<p>So my data structure would be:</p>
<pre><code>data_structure = {
    "Tom": {"first_name_id": "1", "surnames": {"Smith": "0", "Johnson": "1", "Williams": "3"}},
    "Jane": {"first_name_id": "32", "surnames": {"Brown": "0", "David": "1", "Smith": "3"}}
    }

output = data_structure["Tom"]["first_name_id"],data_structure["Tom"]["surnames"]["Williams"]

print output 

&gt;&gt;&gt; ('1', '3')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Are you thinking something like this?  </p>
<pre><code>output = {}
for first_name_id, first_name, last_name_id, last_name in t:
    if not first_name in output:
        output[first_name] = {'first_name_id':first_name_id,'surnames':{}}
    output[first_name]['surnames'][last_name] = 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since your data is already sorted on firstnames and firstname ids, you can apply <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> directly on your data to group on firstnames and firstname ids and then construct the inners dicts from the rest of the group data:</p>
<pre><code>from collections import defaultdict 
from itertools import groupby

d = defaultdict(dict)

for (f_id, f), g in groupby(t, lambda x: (x[0], x[1])):
   d[f]['first_name_id'] = f_id
   d[f]['surnames'] = dict((k, v) for _, _, v, k in g)
</code></pre>
<hr/>
<pre><code>defaultdict(&lt;class 'dict'&gt;,
            {'Jane': {'first_name_id': '32',
                      'surnames': {'Brown': '0', 
                                    'David': '1', 
                                    'Smith': '3'}},
             'Tom': {'first_name_id': '1',
                     'surnames': {'Johnson': '1',
                                  'Smith': '0',
                                  'Williams': '2'}}})
</code></pre>
</div>
<span class="comment-copy">But what exactly are you having trouble with?</span>
