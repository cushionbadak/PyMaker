<div class="post-text" itemprop="text">
<p>I am trying to solve this challenge about error-handling. Maybe I'm way off! </p>
<p>The challenge description:</p>
<blockquote>
<p>Write a function called "load_file" that accepts one parameter: a filename. The function should open the file and return the contents.</p>
<p>If the contents of the file can be interpreted as an integer, return the contents as an integer. Otherwise, if the contents of the file can be interpreted as a float, return the contents as a float. Otherwise, return the contents of the file as a string.</p>
<p>You may assume that the file has only one line.</p>
</blockquote>
<p>I get ValueError: could not convert string to float: "b&gt;a!\{\'"</p>
<p>Am I all wrong about the error-handling?</p>
<pre><code>def load_file(file):

    file = open(file, "r")
    all_lines = file.read()

    try:        
        return int(all_lines)

    except ValueError:
        return float(all_lines)

    else:
        return all_lines


    file.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to do something like</p>
<pre><code>with open(file, "r") as file_handle:
    all_lines = file.read()
    try:
        return int(all_lines)
    except ValueError:
        pass
    try:
        return float(all_lines)
    except ValueError:
        pass

    return all_lines
</code></pre>
<p>The point is you don't really care about the errors at all, because they just mean you need to proceed to the next option.</p>
<p>I would also point out that the <code>with</code> construct takes care of closing the file for you. If you want to do <code>file = open(file, "r")</code> then you will need to store your return value to a variable, and then do <code>file.close()</code> before you <code>return</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You handle the <code>ValueError</code> thrown by using the <code>int()</code> function, but there's the possibility of <code>float()</code> also throwing such an error. The purpose of the <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">try/catch structure</a> is for running code inside the <code>try</code> block that may throw any exception, such as a <code>ValueError</code>, and to execute "error handler" code inside the <code>except</code> block. </p>
</div>
<div class="post-text" itemprop="text">
<p>when you try to parse as a float there is also an exception. you can try something like this</p>
<pre><code>def load_file(file):

    file = open(file, "r")
    all_lines = file.read()

    try:        
        return int(all_lines)

    except ValueError:
        try:
            return float(all_lines)
        except ValueError:
             return all_lines

    file.close()
</code></pre>
<p>You can nest trys inside of exceptions to get it to do what you want</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem with your approach is that the <code>float(all_lines)</code> can fail but that exception isn't handled.</p>
<p>So it should be:</p>
<pre><code>try:        
    return int(all_lines)
except ValueError:  # handle the exception if it's not an integer
    try:
        return float(all_lines)
    except ValueError:  # handle the exception if it's not a float
        return all_lines
</code></pre>
<p>But you could also just <a href="https://docs.python.org/library/contextlib.html#contextlib.suppress" rel="nofollow noreferrer"><code>suppress</code></a> errors (requires python 3.3 or newer though). This could reduce the length of the code and the number of nested <code>try</code> and <code>except</code>s:</p>
<pre><code>from contextlib import suppress

def load_file(file):
    with open(file, "r") as file:  # using open with "with" closes the file automatically.
        all_lines = file.read()

    with suppress(ValueError):
        return int(all_lines)
    with suppress(ValueError):
        return float(all_lines)
    return all_lines
</code></pre>
</div>
<span class="comment-copy">You do understand that only the code in the <code>try</code> block is protected, right?</span>
<span class="comment-copy">The question is a bit misleading as a <code>float</code> can also be interpreted as integer. <code>int(3.3)</code> gives you <code>3</code>. This means trying to cast to <code>int</code> first will lead to a <code>float</code> interpreted as <code>int</code> without throwing a <code>ValueError</code></span>
<span class="comment-copy">As I mentioned in my comment to the question, all floats can be represented as int. Therefore if it is really a float in the file, you're code where you cast it to float will never be reached.</span>
<span class="comment-copy">I ran this through the python interactive shell just now:  <code>&gt;&gt;&gt; int("1234.4341") Traceback (most recent call last):   File "&lt;stdin&gt;", line 1, in &lt;module&gt; ValueError: invalid literal for int() with base 10: '1234.4341' </code></span>
<span class="comment-copy">@Igle That's not right. <code>int('3.0')</code> throws an exception.</span>
<span class="comment-copy">Thats wrong as <code>else</code> can be used as part of a <code>try, catch</code>. See <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">docs.python.org/3/tutorial/errors.html#handling-exceptions</a></span>
<span class="comment-copy">else doesn't do any good in this case though</span>
<span class="comment-copy">Thats true, he does not need it.</span>
<span class="comment-copy">I completely forgot about that syntax since I don't think I've ever really used it, edited my post</span>
