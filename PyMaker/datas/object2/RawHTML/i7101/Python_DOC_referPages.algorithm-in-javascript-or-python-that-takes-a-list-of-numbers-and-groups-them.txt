<div class="post-text" itemprop="text">
<p>I am looking for an algorithm that takes 2 inputs (#1: a number, #2: an array of numbers [that may be duplicated]):</p>
<p>Output should be the desired groups (with the individual numbers from the original list in them). The groups should be as close in length/size. Note that if a number is in one group, all other items in the list with the same number would be put in that same group. (e.g. so you would not have the number 3 say in multiple output groups).</p>
<p><strong>NOTE that elements in returned groups MUST not overlap in their range of numbers</strong></p>
<p>So you cannot have two output groups like this [[1,1,1,2,2,4,4,4], [3,3,5,5,6,7,8,16]] because the range of numbers in each subgroup is [1-4] and [3-16], which have an overlap. You can only have groups like [1-3][4-16] (note there is no overlap in this case).</p>
<p><strong>Sample #1 Input/Output</strong></p>
<pre><code>1) 3 Desired Groups  
2) List: [1,1,2,2,3,3]
</code></pre>
<p>Output: </p>
<pre><code>[[1,1],[2,2],[3,3]]
</code></pre>
<p><strong>Sample #2 Input/Output</strong></p>
<p>Input 2 desired groups/subarrays to be output, and the following list of numbers:</p>
<pre><code>[1,1,1,2,2,3,3,4,4,4,5,5,6,7,8,16]
</code></pre>
<p>Output are two subarrays that contain the following:</p>
<pre><code>[1,1,1,2,2,3,3,4,4,4]
[5,5,6,7,8,16]
</code></pre>
<p>Note #1: Output two subarrays/groups of [[1,1,1,2,2,3,3] [4,4,4,5,5,6,7,8,16]] would also be valid given that there is no way to output equal groups.</p>
<p>Note #2: While subgroups of: [[1,1,1,2,2,4,4,4], [3,3,5,5,6,7,8,16]] would be equal in length, it violates the rule of "no overlapping ranges between returned subgroups", meaning the range of numbers in each subgroup cannot overlap with each other. (e.g. In this note, the ranges of the subgroups returned are [1-4] and [3-16], if you took a ruler and drew a line from the numbers 1-4 and draw another line from 3-16, you would see that 3-4 would have overlapping lines, which is not what we want in this case). </p>
<p>In the sample output of this example, the ranges of the two groups are [1-4] and [5-16], which if you took a ruler/tape measure and drew lines where the numbers are, the lines would not overlap with each other, which is what we want.</p>
<p><strong>Sample #3 Input/Output</strong></p>
<p>Input 3 desired groups/subarrays to be output, and the following list of numbers:</p>
<pre><code>[1,1,1,2,2,3,3,4,4,4,5,5,6,7,8,16]
</code></pre>
<p>Output:</p>
<pre><code> [1,1,1,2,2]
 [3,3,4,4,4]
 [5,5,6,7,8,16]
</code></pre>
<p>Note in this case, since there is no way to achieve the same # of items, algorithm outputs the best it can do where one group is only 1 bigger than the others.</p>
<p><strong>Sample #4 Input/Output</strong>
Input: "4 desired groups", and the following list:
[1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 8, 16] </p>
<p>Possible Output:</p>
<pre><code>[1,1,1,2,2]
[3,3,4,4,4]
[5,5,6]
[7,8,16]
</code></pre>
<p>Note: Preferrably, the output should contain more than 1 unique number when possible. While an output of [[1, 1, 1], [2, 2, 3, 3], [4, 4, 4, 5, 5], [6, 7, 8, 16]] does provide approximately similar groupings, it is preferred that there is more than 1 unique number in a single subgroup. In this "Note", 1 is the only number in group 1, while in the sample output of this example, group 1 contains unique numbers 1 and 2, which is preferred.</p>
<p>What is a good way to perform this?</p>
</div>
<div class="post-text" itemprop="text">
<h1>Grouping common numbers then using a recursive function</h1>
<p>My last solution didn't give the right results, so this is a different <code>algorithm</code>. It follows:</p>
<ol>
<li>group the list into sub-lists of common numbers</li>
<li>check if this list has the required number of groups (sub-lists)</li>
<li>if it does then add it to a list of possible solutions and end</li>
<li>else, create a list of all the different pairs of common numbers in the current list merged together</li>
<li>for each list in (4), go back to (2)</li>
</ol>
<p>If you followed the algorithm, you can see that it will work by <code>branching</code> off down the differently merged lists until it reaches one of the required length where that branch will end. This is a perfect opportunity to write a <a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)" rel="nofollow noreferrer"><code>recursive function</code></a>.</p>
<p>But before that, we needed a small method for grouping common numbers from the original list. To do this, a small <code>for-loop</code> goes through each number and check if it belongs as part of the previous common numbers. If it does, add it to them, or else it creates its own common numbers.</p>
<p>This may look something like:</p>
<pre><code>l = [1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6]
l.sort()

groups = []
for i in l:
    if groups and i in groups[-1]:
        groups[-1].append(i)
    else:
        groups.append([i])
</code></pre>
<p>now <code>groups</code> is:</p>
<pre><code>[[1], [2, 2], [3, 3, 3], [4, 4], [5, 5], [6]]
</code></pre>
<p>so we are ready for the <code>recursive funtion</code>:</p>
<pre><code>def merge(grps, numGrps):
    global solutions
    if len(grps) &lt;= numGrps:
        solutions.append(grps)
        return
    merges = [grps[:i] + [grps[i] + grps[i+1]] + grps[i+2:] for i in range(len(grps)-1)]
    for m in merges:
        merge(m, numGrps)
</code></pre>
<p>the function is self-explanatory, but the <code>list-comprehension</code> is the important part which controls the branching:</p>
<pre><code>[grps[:i] + [grps[i] + grps[i+1]] + grps[i+2:] for i in range(len(grps)-1)]
</code></pre>
<p>It is essentially saying: for each number up to the <code>length</code> of the current list, take the common number groups before it <code>grps[:i]</code>, add them onto its common numbers <code>grps[i]</code> merged with the next common numbers <code>grps[i+1]</code> and then add that onto the rest of the common numbers <code>grps[i+2:]</code>. </p>
<p>From there, we just set the <code>function</code> going with each of the different merged common number <code>combinations</code> along with its target number of groups.</p>
<h1>The final code</h1>
<p>The final code put together would be:</p>
<pre><code>l = [1,2,2,3,3,3,4,4,5,5,6]
l.sort()

groups = []
for i in l:
    if groups and i in groups[-1]:
        groups[-1].append(i)
    else:
        groups.append([i])

print("original list:")
print(l, "\n")
print("common numbers grouping:")
print(groups)
print()

def merge(grps, numGrps):
    global solutions
    if len(grps) &lt;= numGrps:
        solutions.append(grps)
        return
    merges = [grps[:i] + [grps[i] + grps[i+1]] + grps[i+2:] for i in range(len(grps)-1)]
    for m in merges:
        merge(m, numGrps)

solutions = []

merge(groups, 3)

print("possible solutions:\n")
for s in solutions:
    print(s)
</code></pre>
<p>which outputs:</p>
<pre><code>original list:
[1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6]

common numbers grouping:
[[1], [2, 2], [3, 3, 3], [4, 4], [5, 5], [6]]

possible solutions:

[[1, 2, 2, 3, 3, 3, 4, 4], [5, 5], [6]]
[[1, 2, 2, 3, 3, 3], [4, 4, 5, 5], [6]]
[[1, 2, 2, 3, 3, 3], [4, 4], [5, 5, 6]]
[[1, 2, 2, 3, 3, 3, 4, 4], [5, 5], [6]]
[[1, 2, 2], [3, 3, 3, 4, 4, 5, 5], [6]]
[[1, 2, 2], [3, 3, 3, 4, 4], [5, 5, 6]]
[[1, 2, 2, 3, 3, 3], [4, 4, 5, 5], [6]]
[[1, 2, 2], [3, 3, 3, 4, 4, 5, 5], [6]]
[[1, 2, 2], [3, 3, 3], [4, 4, 5, 5, 6]]
[[1, 2, 2, 3, 3, 3], [4, 4], [5, 5, 6]]
[[1, 2, 2], [3, 3, 3, 4, 4], [5, 5, 6]]
[[1, 2, 2], [3, 3, 3], [4, 4, 5, 5, 6]]
[[1, 2, 2, 3, 3, 3, 4, 4], [5, 5], [6]]
[[1, 2, 2, 3, 3, 3], [4, 4, 5, 5], [6]]
[[1, 2, 2, 3, 3, 3], [4, 4], [5, 5, 6]]
[[1, 2, 2, 3, 3, 3, 4, 4], [5, 5], [6]]
[[1], [2, 2, 3, 3, 3, 4, 4, 5, 5], [6]]
[[1], [2, 2, 3, 3, 3, 4, 4], [5, 5, 6]]
[[1, 2, 2, 3, 3, 3], [4, 4, 5, 5], [6]]
[[1], [2, 2, 3, 3, 3, 4, 4, 5, 5], [6]]
[[1], [2, 2, 3, 3, 3], [4, 4, 5, 5, 6]]
[[1, 2, 2, 3, 3, 3], [4, 4], [5, 5, 6]]
[[1], [2, 2, 3, 3, 3, 4, 4], [5, 5, 6]]
[[1], [2, 2, 3, 3, 3], [4, 4, 5, 5, 6]]
[[1, 2, 2, 3, 3, 3, 4, 4], [5, 5], [6]]
[[1, 2, 2], [3, 3, 3, 4, 4, 5, 5], [6]]
[[1, 2, 2], [3, 3, 3, 4, 4], [5, 5, 6]]
[[1, 2, 2, 3, 3, 3, 4, 4], [5, 5], [6]]
[[1], [2, 2, 3, 3, 3, 4, 4, 5, 5], [6]]
[[1], [2, 2, 3, 3, 3, 4, 4], [5, 5, 6]]
[[1, 2, 2], [3, 3, 3, 4, 4, 5, 5], [6]]
[[1], [2, 2, 3, 3, 3, 4, 4, 5, 5], [6]]
[[1], [2, 2], [3, 3, 3, 4, 4, 5, 5, 6]]
[[1, 2, 2], [3, 3, 3, 4, 4], [5, 5, 6]]
[[1], [2, 2, 3, 3, 3, 4, 4], [5, 5, 6]]
[[1], [2, 2], [3, 3, 3, 4, 4, 5, 5, 6]]
[[1, 2, 2, 3, 3, 3], [4, 4, 5, 5], [6]]
[[1, 2, 2], [3, 3, 3, 4, 4, 5, 5], [6]]
[[1, 2, 2], [3, 3, 3], [4, 4, 5, 5, 6]]
[[1, 2, 2, 3, 3, 3], [4, 4, 5, 5], [6]]
[[1], [2, 2, 3, 3, 3, 4, 4, 5, 5], [6]]
[[1], [2, 2, 3, 3, 3], [4, 4, 5, 5, 6]]
[[1, 2, 2], [3, 3, 3, 4, 4, 5, 5], [6]]
[[1], [2, 2, 3, 3, 3, 4, 4, 5, 5], [6]]
[[1], [2, 2], [3, 3, 3, 4, 4, 5, 5, 6]]
[[1, 2, 2], [3, 3, 3], [4, 4, 5, 5, 6]]
[[1], [2, 2, 3, 3, 3], [4, 4, 5, 5, 6]]
[[1], [2, 2], [3, 3, 3, 4, 4, 5, 5, 6]]
[[1, 2, 2, 3, 3, 3], [4, 4], [5, 5, 6]]
[[1, 2, 2], [3, 3, 3, 4, 4], [5, 5, 6]]
[[1, 2, 2], [3, 3, 3], [4, 4, 5, 5, 6]]
[[1, 2, 2, 3, 3, 3], [4, 4], [5, 5, 6]]
[[1], [2, 2, 3, 3, 3, 4, 4], [5, 5, 6]]
[[1], [2, 2, 3, 3, 3], [4, 4, 5, 5, 6]]
[[1, 2, 2], [3, 3, 3, 4, 4], [5, 5, 6]]
[[1], [2, 2, 3, 3, 3, 4, 4], [5, 5, 6]]
[[1], [2, 2], [3, 3, 3, 4, 4, 5, 5, 6]]
[[1, 2, 2], [3, 3, 3], [4, 4, 5, 5, 6]]
[[1], [2, 2, 3, 3, 3], [4, 4, 5, 5, 6]]
[[1], [2, 2], [3, 3, 3, 4, 4, 5, 5, 6]]
</code></pre>
<h1>Sorting</h1>
<p>Now that you have <strong>ALL</strong> the possible solutions, you can sort them <strong>any</strong> way you want. So for example, if you wanted to select the one with the most even spread in length in the group, you would calculate each groups length and the difference between <code>smallest</code> and <code>biggest</code> lengths would be the score on which you rank them.</p>
<p>Even though there are other ways of sorting them, as we have seen in the comment section, the one described above seems to be what most people want so here it is:</p>
<pre><code>smallestDiff = 9999

for s in solutions:
    lenDiff = max([len(a) - len(b) for a in s for b in s])
    if lenDiff &lt; smallestDiff:
        smallestDiff = lenDiff
        sol = s
</code></pre>
<p>and for my example with list:</p>
<pre><code>[1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6]
</code></pre>
<p>we have the result:</p>
<pre><code>[[1, 2, 2], [3, 3, 3, 4, 4], [5, 5, 6]]
</code></pre>
<p>which I would consider to be the best solution in this case. And finally, to check with the examples given in the question:</p>
<h2>Sample 1</h2>
<pre><code>groups = 3
l = [1, 1, 2, 2, 3, 3]
</code></pre>
<p>gives output of:</p>
<pre><code>[[1, 1], [2, 2], [3, 3]]
</code></pre>
<h2>Sample 2</h2>
<pre><code>groups = 2
l = [1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 8, 16]
</code></pre>
<p>gives output of:</p>
<pre><code>[[1, 1, 1, 2, 2, 3, 3], [4, 4, 4, 5, 5, 6, 7, 8, 16]]
</code></pre>
<p>So it is clear this algorithm works and I hope this helps.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>.map()</code> and <code>.filter()</code> to create an array of arrays containing the same elements, collect values of arrays where there is single element to a single array, if they exist, <code>.splice()</code> expected number of arrays (groups) from collected array, reinsert original single values into to groups, return result</p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>let arr = [1,1,1,2,2,3,3,4,4,4,5,5,6,7,8,16]

const group = (arr, groups) =&gt; {
  // if input array `.length` is `0` 
  // or `groups` is less than 2, throw `TypeError`
  if (!arr.length) {
    throw new TypeError("input array does not have valid `.length`")
  }
  // declare resulting array `res`, 
  // `singles` array to group values of arrays having `.length` of `1`
  // to single array
  // `s` array of groups of same element from input array
  // `len` whole number to `.splice()` `s` into `groups` by
  // `t` array of single elements from `s`, if they exist
  let [res, singles] = [[], []];
  const [s
        , len = Math.floor(s.length / groups -1)
        , t = s.filter(el =&gt; el.length === 1)] = [
        [...new Set(arr)].map(el =&gt; arr.filter(n =&gt; n === el))
  ];

  if (t.length) {
    for (const g of t) {
      // collect our single element arrays to `singles` array
      singles = [...singles, ...g];
      // remove singles element arrays from `s`
      s.splice(s.indexOf(g), 1);
    }
    // `.push()` `singles` to `s`
    s.push(singles);
  }
  
  do {
    // `.splice()` our groups
    const curr = s.splice(0, len);
    // `.push()` current group to `res`
    if (res.length &lt; groups) {
      res.push([])
    };
    // push elements of arrays to current array in `res` 
    for (const g of curr) {
      res[res.length - 1] = [...res[res.length - 1], ...g]
    }
  } while (s.length);
  // return result `res` array
  return res;
}

let g2 = group(arr, 2);

let g3 = group(arr, 3);

let g4 = group(arr, 4);

console.log(g2, g3, g4);</code></pre>
</div>
</div>
</p>
</div>
<div class="post-text" itemprop="text">
<p>We can use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a> to group the duplicated items together, and then use a simple <a href="https://en.wikipedia.org/wiki/Greedy_algorithm" rel="nofollow noreferrer">"greedy"  algorithm</a> to assign each group to a sublist. If we have any leftover items at the end of the main loop, we put them in a new sublist unless we've already reached the desired number of sublists, in which case we simply add the leftovers to the last existing sublist.</p>
<p>The result isn't perfect: depending on the data, it may not even create enough sublists, but with well-behaved data the results are reasonable, IMHO. ;)</p>
<pre><code>from itertools import groupby

def equal_groups(seq, num):
    grouplen = len(seq) // num
    result, current = [], []
    for _, g in groupby(seq):
        g = list(g)
        # If this group is too big to go in current, flush current
        if current and len(current) + len(g) &gt; grouplen:
            result.append(current)
            current = []
        current.extend(g)

    # Deal with any leftovers
    if current:
        if len(result) &lt; num:
            result.append(current)
        else:
            result[-1].extend(current)
    return result

# Test

data = [1,1,1,2,2,3,3,4,4,4,5,5,6,7,8,16]
for i in range(1, 8):
    print(i, equal_groups(data, i))
</code></pre>
<p><strong>output</strong></p>
<pre><code>1 [[1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 8, 16]]
2 [[1, 1, 1, 2, 2, 3, 3], [4, 4, 4, 5, 5, 6, 7, 8, 16]]
3 [[1, 1, 1, 2, 2], [3, 3, 4, 4, 4], [5, 5, 6, 7, 8, 16]]
4 [[1, 1, 1], [2, 2, 3, 3], [4, 4, 4], [5, 5, 6, 7, 8, 16]]
5 [[1, 1, 1], [2, 2], [3, 3], [4, 4, 4], [5, 5, 6, 7, 8, 16]]
6 [[1, 1, 1], [2, 2], [3, 3], [4, 4, 4], [5, 5], [6, 7, 8, 16]]
7 [[1, 1, 1], [2, 2], [3, 3], [4, 4, 4], [5, 5], [6, 7], [8, 16]]
</code></pre>
</div>
<span class="comment-copy">what is with groups which does not fit? what counts as group?</span>
<span class="comment-copy">Clarified in OP. If it does not fit (like the 2nd example I listed, the algorithm is free to make the assumption of putting numbers (in this case, the three 4's in either of the groups)). The groups are different in length, which is okay, as there isn't any other way to get them equal.</span>
<span class="comment-copy">How would you compare 2 algorithms, is their a cost associated with the way we group ?</span>
<span class="comment-copy">what means <i>"Input 3, output 2"</i>?</span>
<span class="comment-copy">Why can't the 2nd one's output be <code>[[1,1,1,2,2,4,4,4], [3,3,5,5,6,7,8,16]]</code>? That way, the lengths are both 8.</span>
<span class="comment-copy">This doesn't do what the OP asked, yeah it gets close, but as you are adding left overs at the end, the results are not evenly spread....</span>
