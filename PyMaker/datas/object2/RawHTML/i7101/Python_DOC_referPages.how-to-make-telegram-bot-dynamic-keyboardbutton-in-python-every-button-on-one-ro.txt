<div class="post-text" itemprop="text">
<p>Hi i new in stackoverflow also on python... I want to make a keyboardbutton(replykeyboardmarkup) that read data from the database and every button on every row of the keyboard to show .   </p>
<p>i want to create custom keyboard in telegram.bot For example: We have array of string that get from database..  how we can push data from array to InlineKeyboardMarkup?
dynamic, responsive button.  </p>
<p>What i can do? 
thankss</p>
</div>
<div class="post-text" itemprop="text">
<p>In the <a href="https://core.telegram.org/bots/api" rel="nofollow noreferrer">Telegram Bot API</a> they didn't mention about how to deal with dynamic <a href="https://core.telegram.org/bots/api#inlinekeyboardbutton" rel="nofollow noreferrer">InlineKeyboardButton</a>. But there is a way to do this kind of things using <a href="https://core.telegram.org/bots/api#callbackquery" rel="nofollow noreferrer">CallbackQuery</a>. In the following example assume <em>stringList</em> variable will be hold the database query results, to do this I am using <em>stringList</em> as a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">Pyton Dictionary</a> with <a href="https://docs.python.org/3/whatsnew/3.7.html" rel="nofollow noreferrer">Python 3.7</a> and <a href="https://github.com/eternnoir/pyTelegramBotAPI" rel="nofollow noreferrer">pyTelegramBotAPI</a> which is implement for the <a href="https://core.telegram.org/bots/api" rel="nofollow noreferrer">Telegram Bot API</a>.</p>
<pre><code>stringList = {"Name": "John", "Language": "Python", "API": "pyTelegramBotAPI"}
</code></pre>
<p>Let's create buttons according to <em>stringList</em> by importing types from telebot. In here <em>callback_data</em> fulfill with a List which helps us to pass the data from button to query handlers. There is a limitation, if your <em>callback_data</em> is more than 64 bytes <a href="https://core.telegram.org/bots/api" rel="nofollow noreferrer">Telegram Bot API</a> will generate <em>BUTTON_DATA_INVALID</em> respond. Please refer more about <a href="https://github.com/mkotb/Telegram-Errors/wiki/Markup-Errors" rel="nofollow noreferrer">Markup Errors</a> to avoid those kind of exceptions.</p>
<pre><code>markup = types.InlineKeyboardMarkup()

for key, value in stringList.items():
    markup.add(types.InlineKeyboardButton(text=value,
                                          callback_data="['value', '" + value + "', '" + key + "']"),
               types.InlineKeyboardButton(text=crossIcon,
                                          callback_data="['key', '" + key + "']"))
</code></pre>
<p>Below image is the result of above code.</p>
<p><a href="https://i.stack.imgur.com/MBdCZ.png" rel="nofollow noreferrer"><img alt="Result of the InlineKeyboardButton" src="https://i.stack.imgur.com/MBdCZ.png"/></a></p>
<p>I am using this cross icon to show you how to delete dynamic button and how to edit the <a href="https://core.telegram.org/bots/api#inlinekeyboardbutton" rel="nofollow noreferrer">InlineKeyboardButton</a> with removing that dynamic button. As you can see (above code) there are two <a href="https://core.telegram.org/bots/api#callbackquery" rel="nofollow noreferrer">CallbackQuery</a> which handle the first button and the cross button.</p>
<p>You can capture first button's <em>callback_data</em> in following code lines.</p>
<pre><code>if (call.data.startswith("['value'")):
    print(f"call.data : {call.data} , type : {type(call.data)}")
    print(f"ast.literal_eval(call.data) : {ast.literal_eval(call.data)} , type : {type(ast.literal_eval(call.data))}")
    valueFromCallBack = ast.literal_eval(call.data)[1]
    keyFromCallBack = ast.literal_eval(call.data)[2]
    bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                              text="You Clicked " + valueFromCallBack + " and key is " + keyFromCallBack)
</code></pre>
<p>There are two print statements to see exactly which type of data that we are going to handle. First print statement shows us the string type List when we click the first button of <em>John</em>.</p>
<pre><code>call.data : ['value', 'John', 'Name'] , type : &lt;class 'str'&gt;
</code></pre>
<p>We are almost closer to the solution, but with the string type List. I found a solution to convert string type List into the normal List by referring answers of this <a href="https://stackoverflow.com/questions/1894269/convert-string-representation-of-list-to-list">question</a>. Python <a href="https://docs.python.org/3/library/ast.html#module-ast" rel="nofollow noreferrer">ast</a>(Abstract Syntax Trees) is the module which representation of the abstract syntactic structure of source code. Using <a href="http://representation%20of%20the%20abstract%20syntactic%20structure%20of%20source%20code" rel="nofollow noreferrer">ast.literal_eval()</a> we can get the following output from the second print statement.</p>
<pre><code>ast.literal_eval(call.data) : ['value', 'John', 'Name'] , type : &lt;class 'list'&gt;
</code></pre>
<p>Meantime display this alert as well becasue of <a href="https://core.telegram.org/bots/api#answercallbackquery" rel="nofollow noreferrer">answerCallbackQuery</a> which we are using in the above code.</p>
<p><a href="https://i.stack.imgur.com/bcwsw.png" rel="nofollow noreferrer"><img alt="Result of the answerCallbackQuery" src="https://i.stack.imgur.com/bcwsw.png"/></a></p>
<p>We can get output like this because we fill the button with List of values. Likewise you can pass the List inside <em>callback_data</em> and handle that List in <em>callback_query_handler</em>. Let's take a look at what will happens when click the cross icon.</p>
<pre><code>if (call.data.startswith("['key'")):
    keyFromCallBack = ast.literal_eval(call.data)[1]
    del stringList[keyFromCallBack]
    bot.edit_message_text(chat_id=call.message.chat.id,
                          text="Here are the values of stringList", message_id=call.message.message_id,
                          reply_markup=makeKeyboard(), parse_mode='HTML')
</code></pre>
<p>It will go to <a href="https://core.telegram.org/bots/api#answercallbackquery" rel="nofollow noreferrer">answerCallbackQuery</a> which start with " '[key' " and delete the <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">Pyton Dictionary</a> by using the given key (<code>del stringList[keyFromCallBack]</code>). Let's click first cross icon see what will happen.</p>
<p><a href="https://i.stack.imgur.com/ztoOG.png" rel="nofollow noreferrer"><img alt="Regenerate dynamic buttons according to the List" src="https://i.stack.imgur.com/ztoOG.png"/></a></p>
<p>First button will be disappeared because <a href="https://core.telegram.org/bots/api#editmessagetext" rel="nofollow noreferrer">editMessageText</a> regenerate with available Dictionary details. Instead of deleting <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">Pyton Dictionary</a> you can call some database query.</p>
<p>Here is the full code of the above examples.</p>
<pre><code>import telebot
import ast
import time
from telebot import types

bot = telebot.TeleBot("YOUR_BOT_API_KEY_HERE")

stringList = {"Name": "John", "Language": "Python", "API": "pyTelegramBotAPI"}
crossIcon = u"\u274C"

def makeKeyboard():
    markup = types.InlineKeyboardMarkup()

    for key, value in stringList.items():
        markup.add(types.InlineKeyboardButton(text=value,
                                              callback_data="['value', '" + value + "', '" + key + "']"),
        types.InlineKeyboardButton(text=crossIcon,
                                   callback_data="['key', '" + key + "']"))

    return markup

@bot.message_handler(commands=['test'])
def handle_command_adminwindow(message):
    bot.send_message(chat_id=message.chat.id,
                     text="Here are the values of stringList",
                     reply_markup=makeKeyboard(),
                     parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):

    if (call.data.startswith("['value'")):
        print(f"call.data : {call.data} , type : {type(call.data)}")
        print(f"ast.literal_eval(call.data) : {ast.literal_eval(call.data)} , type : {type(ast.literal_eval(call.data))}")
        valueFromCallBack = ast.literal_eval(call.data)[1]
        keyFromCallBack = ast.literal_eval(call.data)[2]
        bot.answer_callback_query(callback_query_id=call.id,
                              show_alert=True,
                              text="You Clicked " + valueFromCallBack + " and key is " + keyFromCallBack)

    if (call.data.startswith("['key'")):
        keyFromCallBack = ast.literal_eval(call.data)[1]
        del stringList[keyFromCallBack]
        bot.edit_message_text(chat_id=call.message.chat.id,
                              text="Here are the values of stringList",
                              message_id=call.message.message_id,
                              reply_markup=makeKeyboard(),
                              parse_mode='HTML')
while True:
    try:
        bot.polling(none_stop=True, interval=0, timeout=0)
    except:
        time.sleep(10)
</code></pre>
<p>To test this code type /test command in your bot window.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using python-telegram-bot as library you can take a look at the his documentation <a href="https://github.com/python-telegram-bot/python-telegram-bot/wiki/Code-snippets#build-a-menu-with-buttons" rel="nofollow noreferrer">here</a> </p>
<p>Also if you are not using that library, you could adapt that function on your code</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are using <a href="https://github.com/python-telegram-bot/python-telegram-bot" rel="nofollow noreferrer">python-telegram-bot</a>, according to this <a href="https://github.com/python-telegram-bot/python-telegram-bot/wiki/Code-snippets" rel="nofollow noreferrer">snippets</a>,
it should be something like this</p>
<pre><code>&gt;&gt;&gt; custom_keyboard = [['top-left', 'top-right'], 
...                    ['bottom-left', 'bottom-right']]
&gt;&gt;&gt; reply_markup = telegram.ReplyKeyboardMarkup(custom_keyboard)
&gt;&gt;&gt; bot.send_message(chat_id=chat_id, 
...                  text="Custom Keyboard Test", 
...                  reply_markup=reply_markup)
</code></pre>
<p>Note that I did not check the code. Let me Know if is what you want.</p>
</div>
<span class="comment-copy">Hi, Welcome to stack overflow. Please refer the <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a> link for  more details on how to ask a question and update your question accordingly.</span>
<span class="comment-copy">yes iam using python-telegram-bot.  i was learn too, but still cant find this method.</span>
<span class="comment-copy">That's not included in the library. You should copy and paste and use that function.</span>
