<div class="post-text" itemprop="text">
<p>I'm trying to construct a Queue linked list using only a head pointer (no tail).
but i cant seem to enqueue at the end of the list. </p>
<p>example: at the moment the code will: <code>c -&gt; b -&gt; a</code>, however i would like reverse it <code>a -&gt; b -&gt; c</code>.</p>
<pre><code>class Node:
    '''A node for a linked list.'''

    def __init__(self, initdata):
        self.data = initdata
        self.next = None

class Queue(object):

    def __init__(self):
        self.head = None

    def enqueue(self, item):
        """Add an item onto the tail of the queue."""
        if self.head == None:
            temp = Node(item)
            temp.next = self.head
            self.head = temp
        else:
            current = self.head
            while current != None:
                current = current.next
            if current == None:
                temp = Node(item)
                temp.next = current
                current = temp

    def dequeue(self):
        if self.head == None:
            raise IndexError("Can't dequeue from empty queue.")
        else:
            current_first = self.head
            current = self.head.next
            return current_first.data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This should do it:</p>
<pre><code>class Node:
    '''A node for a linked list.'''
    def __init__(self, initdata):
        self.data = initdata
        self.next = None

class Queue(object):
    def __init__(self):
        self.head = None

    def enqueue(self, item):
        """Add an item onto the tail of the queue."""
        if self.head is None:
            self.head = Node(item)
        else:
            current = self.head
            while current.next is not None:
                current = current.next
            current.next = Node(item)

    def dequeue(self):
        if self.head is None:
            raise IndexError("Can't dequeue from empty queue.")
        else:
            first = self.head
            self.head = self.head.next
            return first.data
</code></pre>
<p>Besides some logic fixes (we need to create a new node and store it in <code>current.next</code>, <code>current</code> is just a variable pointing to a node), note we use <code>is</code> operator for testing for <code>None</code> and <code>Node</code> constructor to set data (so we can create and assign new nodes without <code>temp</code> var).</p>
<p>For example:</p>
<pre><code>q = Queue()
q.enqueue('a')
q.enqueue('b')
q.enqueue('c')

print(q.dequeue())
print(q.dequeue())
print(q.dequeue())
</code></pre>
<p>Outputs:</p>
<pre><code>a
b
c
</code></pre>
<p>Btw, note that such structure requires <code>O(N)</code> insertion time and <code>O(1)</code> deletion (pop) time. Double-ended queue (like the standard <a href="https://docs.python.org/3/library/collections.html#collections.deque" rel="nofollow noreferrer"><code>collections.deque</code></a>) will do both insertion and deletion in constant time.</p>
</div>
