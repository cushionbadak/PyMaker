<div class="post-text" itemprop="text">
<p>I am using a modified form of the <code>grouper</code> recipe provided by the python <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">docs</a>:</p>
<pre><code>from itertools import chain, islice
def grouper(iterable, n):
    iterable = iter(iterable)
    while True:
        peek = next(iterable)
        yield chain((peek,), islice(iterable, n - 1))
</code></pre>
<p>This seems to work fine. I can do something like:</p>
<pre><code>&gt;&gt;&gt; x = bytearray(range(16))
&gt;&gt;&gt; [int.from_bytes(n, 'big') for n in grouper(x, 4)]
[66051, 67438087, 134810123, 202182159]
</code></pre>
<p>However, when I run the exact same code in IPython, I get a <code>DeprecationWarning</code>:</p>
<pre><code>In [1]: from itertools import chain, islice
   ...: def grouper(iterable, n):
   ...:      iterable = iter(iterable)
   ...:      while True:
   ...:          peek = next(iterable)
   ...:          yield chain((peek,), islice(iterable, n - 1))

In [2]: x = bytearray(range(16))

In [3]: [int.from_bytes(n, 'big') for n in grouper(x, 4)]
__main__:1: DeprecationWarning: generator 'grouper' raised StopIteration
Out[3]: [66051, 67438087, 134810123, 202182159]
</code></pre>
<p>Where is the warning coming from and why do I not see it in the regular Python console? What can I do to make the warning go away?</p>
<p>I am using Python 3.6.2 and IPython 6.1.0</p>
</div>
<div class="post-text" itemprop="text">
<p>This is a change to Python that is being gradually phased in between Python 3.5 and Python 3.7. The details are explained in <a href="https://www.python.org/dev/peps/pep-0479/" rel="nofollow noreferrer">PEP 479</a>, but I'll try to give a quick overview.</p>
<p>The issue is <code>StopIteration</code> exceptions that are leaking out of generator functions. It might seem like that's OK, since raising a <code>StopIteration</code> is the signal an iterator is finished. But it can cause problems with refactoring generators. Here's an example showing the trouble:</p>
<p>Say you had this generator function (which works fine in Python versions prior to 3.5, where it started emitting warnings):</p>
<pre><code>def gen():
    yield 1
    yield 2
    if True:
        raise StopIteration
    yield 3
    yield 4
</code></pre>
<p>Since the condition of the <code>if</code> is truthy, the generator will stop after yielding two values (not yielding <code>3</code> or <code>4</code>). However, what if you try to refactor the middle part of the function? If you move the part from <code>yield 2</code> to <code>yield 3</code> into a helper generator, you'll see an issue:</p>
<pre><code>def gen():
    yield 1
    yield from refactored_helper()
    yield 4

def refactored_helper():
    yield 2
    if True:
        raise StopIteration
    yield 3
</code></pre>
<p>In this version, <code>3</code> will be skipped, but <code>4</code> will still be yielded. That's because the <code>yield from</code> ate the <code>StopIteration</code> that was raised in the helper generator function. It assumed that only the helper generator should be stopped, and so the outer generator kept running.</p>
<p>To fix this, the Python devs decided to change how generators work. Starting in Python 3.7, a <code>StopIteration</code> exception that leaks out of a generator function will be changed by the interpreter to a <code>RuntimeError</code> exception. If you want to exit a generator normally, you need to use <code>return</code>. Furthermore, you can now <code>return</code> a value from a generator function. The value will be contained in the <code>StopIteration</code> exception that gets raised by the generator machinery, and a <code>yield from</code> expression will evaluate to the returned value.</p>
<p>So the generators above could properly be refactored to:</p>
<pre><code>def gen():
    yield 1
    if yield from refactored_helper():
        return
    yield 4

def refactored_helper():
    yield 2
    if True:
        return True
    yield 3
    # like a normal function, a generator returns None if it reaches the end of the code
</code></pre>
<p>If you want to write future-compatible code now, you should put <code>from __future__ import generator_stop</code> at the top of your module. Then you need to track down places where you're leaking <code>StopIteration</code> exceptions and wrap them with <code>try</code> and <code>except</code> logic. For the code in your question:</p>
<pre><code>from __future__ import generator_stop

from itertools import chain, islice

def grouper(iterable, n):
    iterable = iter(iterable)
    while True:
        try:
            peek = next(iterable)
        except StopIteration:
            return
        yield chain((peek,), islice(iterable, n - 1))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The deprecation warning is thrown because of an upcoming non-backwards compatible change in the Python language which will be active from version 3.7 on and is documented in <a href="https://www.python.org/dev/peps/pep-0479/" rel="nofollow noreferrer" title="PEP-479">PEP-479</a>.</p>
<p>The most important parts:</p>
<blockquote>
<p>Abstract</p>
<p>This PEP proposes a change to generators: when <code>StopIteration</code> is raised
  inside a generator, it is replaced it with <code>RuntimeError</code> . (More
  precisely, this happens when the exception is about to bubble out of
  the generator's stack frame.) Because the change is backwards
  incompatible, the feature is initially introduced using a <code>__future__</code>
  statement.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Transition plan</p>
<p>Python 3.5: Enable new semantics under <code>__future__</code>
  import; silent deprecation warning if <code>StopIteration</code> bubbles out of a
  generator not under <code>__future__</code> import.
  Python 3.6: Non-silent deprecation warning.
  Python 3.7: Enable new semantics everywhere.</p>
</blockquote>
<p>The documentation you have linked should be updated.</p>
</div>
<div class="post-text" itemprop="text">
<p>Deprecation warning is thrown when a module will be deprecated in future.For now,you re fine to use it. Just include the following to your code to not see these warnings:</p>
<pre><code>import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
warnings.simplefilter(action='ignore', category=DeprecationWarning)
</code></pre>
</div>
<span class="comment-copy">This is the answer I was looking for. Thanks.</span>
<span class="comment-copy">What is the purpose of the import in this case? It does not appear to add any feature that does not already exist in 3.6.</span>
<span class="comment-copy">I am asking because I tried your version and it seems to work just fine without the import. In case you were wondering, BTW, <a href="https://stackoverflow.com/a/23926929/2988730">stackoverflow.com/a/23926929/2988730</a></span>
<span class="comment-copy">You're right that the <code>__future__</code> import isn't necessary in the last version of the code. However, it would break the earlier versions (they'd raise <code>RuntimeError</code>s). The idea is to add the future import, see what breaks in your existing code, then fix it to be forwards compatible.</span>
<span class="comment-copy">How would I write the generator correctly?</span>
<span class="comment-copy">The question is why it happens, not what it is.</span>
<span class="comment-copy">"What can I do to make the warning go away?"</span>
<span class="comment-copy">This is bad advice if you do not know exactly what is causing the warning.</span>
