<div class="post-text" itemprop="text">
<p>I have a string and this string could contain some occurrences like:</p>
<p><code>http://site/image.jpg</code></p>
<p>What is the right way to replace, when it's present, this kind of occurrence by </p>
<p><code>&lt;img src="http://site/image.jpg"&gt;</code></p>
<p>What is really important, is to replace only occurrences beginning by <code>http</code> and which ending by <code>.jpg</code>, <code>.png</code> and <code>gif</code> by the <code>&lt;img&gt;</code> HTML tag.</p>
<p>So if among all the text there is a URL link of any images, it's formatted by a HTML tag to display the image.</p>
</div>
<div class="post-text" itemprop="text">
<p>Pretty straightforward with regex:</p>
<pre><code>import re

string = 'some other text, a URL http://site/image.jpg and other text'

print(re.sub(r'(https?.+?(?:jpg|png|gif))', r'&lt;img src="\1"&gt;', string))

# some other text, a URL &lt;img src="http://site/image.jpg"&gt; and other text
</code></pre>
<p><code>(https?.+(?:jpg|png|gif))</code> matches everything that starts with <code>http</code> or <code>https</code> and ending with <code>jpg</code>, <code>png</code> or <code>gif</code>. </p>
<p><code>'&lt;img src="\1"&gt;'</code> here the <code>\1</code> refers to the first (and only) capture group in the previous regex (which contains the image url).</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>This is a simple answer to your question:</strong></p>
<pre><code>def check_if_image(url, image_extensions):
   if url.startswith("https://") or url.startswith("http://"):
       for extension in image_extensions:
           if(extension in url[-4:]):
               return True
   return False

def main():
   url_seed = ["http://somesite.com/img1.jpg", "https://somesite2.com/img2.gif", 
            "http://somesite3.net/img3.png", "http://noimagesite.com/noimage"]
   image_extensions = [".jpg", ".png", ".gif"]

   final_result=[]
   for site in url_seed:
       if check_if_image(site, image_extensions):
           final_result.append('&lt;img src="%s"&gt;' %site)
   print(final_result)
</code></pre>
<p>This includes "http" and "https" site verification, as well as code working for 3 character image extensions, such as you asked: jpg, gif and png.</p>
<p>Hope it helped.
Feel free to ask if you have any question.</p>
<p><strong>Edit: Didn't notice you had not the urls already in a data structure, so this is invalid to your situation</strong></p>
</div>
<span class="comment-copy">You should look into <a href="https://docs.python.org/2/library/re.html" rel="nofollow noreferrer">regular expressions</a> which can be used to work with strings</span>
<span class="comment-copy">Unfortunately your regexp matches literally everything that starts with http and ending with .jpg/png/gif, so if there is more than one link separated by some text - this text also will be captured. Please check example: <a href="https://regex101.com/r/eYVuXF/1" rel="nofollow noreferrer">regex101.com/r/eYVuXF/1</a></span>
<span class="comment-copy">@erhesto Ok, fixed. Was only a matter of changing <code>.+</code> to the lazy <code>.+?</code> <a href="https://regex101.com/r/eYVuXF/2" rel="nofollow noreferrer">regex101.com/r/eYVuXF/2</a></span>
<span class="comment-copy">Still not totally comfortable situation, as things like in example: <a href="https://regex101.com/r/eYVuXF/3" rel="nofollow noreferrer">regex101.com/r/eYVuXF/3</a> are captured, but maybe it will be enough for OP, so I'm removing downvote.</span>
<span class="comment-copy">@erhesto Well, OP did not ask for a url verifier.</span>
<span class="comment-copy">Thanks everyone for your help, I think to get a solution by AJAX/JQUERY</span>
<span class="comment-copy">You can use <code>startswith(http) or startswith(https)</code> in check_if_image. It's faster than a regex and it's a good way to.</span>
<span class="comment-copy">Thank you for the feedback. Since I'm switching languages a lot I don't always know the built-ins of them. Will take note :)</span>
<span class="comment-copy">Python is great language. But regex is little bit slower than <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">built-in function</a>. But sometime you can take an other way than regex :D</span>
<span class="comment-copy">Already updated my answer according to your tip, even if it's not the solution for this answer, but might help someone else with a similar question when googling. Thank you</span>
<span class="comment-copy">My URLS are in a string like "Hi, my name is Clement and my avatar is <a href="http://image.jpg" rel="nofollow noreferrer">image.jpg</a> and there is another picture : <a href="http://image2.png" rel="nofollow noreferrer">image2.png</a>.</span>
