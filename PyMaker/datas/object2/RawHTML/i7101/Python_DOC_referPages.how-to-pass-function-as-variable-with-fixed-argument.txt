<div class="post-text" itemprop="text">
<p>I'm newbie in Python, but the second time I encouter this problem.
Problem:
In some libraries there are functions with arguments. Sometimes there is argument as function, like this:</p>
<pre><code>def somefun(fun):
    x = [1,2,3]
    z = fun(x)
    return z
</code></pre>
<p>And I want to pass there some other function like this:</p>
<pre><code>def func(x,y):
    return x*y
</code></pre>
<p>which have more than one argument. I want to make one argument static, so <code>somefun</code> except <code>func</code> as argument.</p>
<p>Finally I want to make some kind of cycle where I can change static arg.
Something like this:</p>
<pre><code>for i in xrange(1,9):
    somefun(func(i,*))
</code></pre>
<p>Please do not offer me to change any functions. They are from library and it's not very comfortable to change them.
Thanks a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use lambda statement:</p>
<pre><code>somefun(lambda x: func(i, x))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sure sounds like you are looking for <a href="https://docs.python.org/3/library/functools.html#functools.partial" rel="nofollow noreferrer"><code>functools.partial</code></a>. From the docs:</p>
<blockquote>
<p><code>functools.partial(func, *args, **keywords)</code></p>
<blockquote>
<p>Return a new <code>partial</code> object which when called will behave like <code>func</code> called with the positional arguments <code>args</code> and keyword arguments <code>keywords</code>.</p>
</blockquote>
</blockquote>
<p>In your example, you could pass <code>partial(func, 10)</code> as the argument to <code>somefun</code>. Or you could create the <code>partial</code> objects and use them in a loop:</p>
<pre><code>for i in xrange(1,9):
    somefun(partial(func, i))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My solution with decorator</p>
<pre><code>from functools import wraps
import numpy as np

def p_decorate(f):
    @wraps(f)
    def wrapped(*args):
        z = f(*args)
        return z
    return wrapped

@p_decorate
def myfunc(a,b):
    """My new function"""
    z = np.dot(a,b)
    return z    

x = [1,2,3]
y = [4,2,0]
r = myfunc(x,y)
print (r)   

print (myfunc.__name__)
print (myfunc.__doc__)
</code></pre>
<p>You can change myfunc as you wish.You can also insert more function layers.Without the use of this decorator factory,you would lose the name of myfunc and the docstring.</p>
</div>
<span class="comment-copy"><code>def func2(y): return func(10, y)</code>?</span>
<span class="comment-copy">You can use decorator to pas function.</span>
<span class="comment-copy">Can you please be more specific which library you are using?</span>
