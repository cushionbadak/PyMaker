<div class="post-text" itemprop="text">
<p>I am working through Python: Crash Course and have got to a problem that I am somewhat solving, but there is probably a better way.</p>
<p>I am trying to modify this list:</p>
<pre><code>magicians = ['Houdini', 'Copperfield', 'Blaine'] 
</code></pre>
<p>by adding 'The Great ' before each item in the list to get:</p>
<pre><code>magicians = ['The Great Houdini','The Great Copperfield', 'The great Blaine']
</code></pre>
<p>The books says I am supposed to use a for loop and function to do this, and am supposed to directly modify the list.  I found an ugly solution, but was hoping there was a better way to solve it. Here is what I came up with.</p>
<pre><code>def make_great(magic):
    """ add 'the great' to a list of magicians"""
    new_magic= []
    for names in magic:
          names = 'the great ' + names 
          new_magic.append(names)

    global magicians
    magicians = new_magic

make_great(magicians)
print(magicians)
</code></pre>
<p>Thanks for your help!</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's how to do this modification to the original list using a function and a traditional <code>for</code> loop. </p>
<p>To modify the original list object we can use a slice assignment: <code>magic[:] = new_magic</code>. You should <em>not</em> be trying to modify the global <code>magicians</code> list, you need to work with the <code>magic</code> list object that's passed to the <code>make_great</code> function.</p>
<pre><code>def make_great(magic):
    """ add 'The great ' to a list of magicians"""
    new_magic = []
    for name in magic:
        new_magic.append('The great ' + name)
    magic[:] = new_magic

magicians = ['Houdini', 'Copperfield', 'Blaine'] 
make_great(magicians)
print(magicians)
</code></pre>
<p><strong>output</strong></p>
<pre><code>['The great Houdini', 'The great Copperfield', 'The great Blaine']
</code></pre>
<p>We can make the function more compact (and slightly more efficient) by using a list comprehension.</p>
<pre><code>def make_great(magic):
    """ add 'The great ' to a list of magicians"""
    magic[:] = ['The great ' + name for name in magic]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about this?</p>
<pre><code>magicians = ['Houdini', 'Copperfield', 'Blaine'] 
print(['The Great ' + x for x in magicians])
</code></pre>
<p>Output:</p>
<pre><code>['The Great Houdini', 'The Great Copperfield', 'The Great Blaine']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You have three requirements: 1) Directly modify the original list, 2) Use a function, and 3) Use a <code>for</code> loop. It's a technicality, but unlike the previous answers the following approach does not create a new list first, choosing instead to update each item in the original list itself. So, here's how you can satisfy all of the requirements:</p>
<pre><code>def prefixNames(alist):
    for i,name in enumerate(alist):
        alist[i] = " ".join(("The Great", name))
# example:
magicians = ['Houdini', 'Copperfield', 'Blaine']
prefixNames(magicians)
print(magicians)
['The Great Houdini', 'The Great Copperfield', 'The Great Blaine']
</code></pre>
</div>
<span class="comment-copy">Strings are, by definition, immutable. You would have to <code>.split()</code> <code>.append()</code> and <code>.join()</code></span>
<span class="comment-copy">Why use <code>global</code> at all, why not just: <code>magic[:]  = new_magic</code>. Besides, I don't think your approach counts as <i>directly modifying the list</i> since you're creating a new list and rebinding the old name to the new list.</span>
<span class="comment-copy">@MosesKoledoye Or just return <code>new_magic</code> and reassign <code>magic</code> outside of the function: <code>magicians = make_great(magicians)</code>.</span>
<span class="comment-copy">Yeah, I guess it really isn't directly modifying the list. I will tinker with those ideas @MosesKoledoye and Christian.  I am obviously still very fresh to python and programming, so still not sure what I can and cannot do.  Thanks for the input.</span>
<span class="comment-copy">you are correct, i up voted you post as it is the correct answer and deleted mine, as i didn't pay enough attention.</span>
<span class="comment-copy">Please post all code as text.</span>
<span class="comment-copy">@ChristianDean sorry, changed it</span>
<span class="comment-copy">This is just a <code>print</code> statement, the OP specified using a <code>for</code> loop and a function. please adhere</span>
<span class="comment-copy">@mangoHero1 While technically correct, this answer does show how to write the meat of what the OP needed. It'd be pretty trivial to wrap the list comp in a function.</span>
<span class="comment-copy">@ChristianDean I know, lol. problem is he might not know what list comprehensions are</span>
<span class="comment-copy">Thank you, that is what I am looking for.</span>
<span class="comment-copy">You're technically correct (the best kind of correct), and this approach does use less RAM. It'd be interesting to see if there's any noticeable speed difference between our approaches... Of course, if we wanted speed, we wouldn't be modifying the original list object, and we wouldn't be calling a function. And if we <i>really</i> wanted speed we wouldn't be using Python. :)</span>
<span class="comment-copy">@Alex Great! The <a href="https://docs.python.org/3/library/functions.html?highlight=enumerate#enumerate" rel="nofollow noreferrer">enumerate</a> function comes in handy in a lot of places for me.</span>
<span class="comment-copy">@PM2Ring Well, thanks! Honestly, I'd be surprised if there were any significant speed diff, but I like surprises.</span>
<span class="comment-copy">@PM2Ring So, turns out that <code>join</code> slows down my approach, so it's about 1/2 the speed of your list-comprehension version. If you replace <code>join</code> in my fcn with <code>"The Great " + name</code> then they are pretty much the same.</span>
