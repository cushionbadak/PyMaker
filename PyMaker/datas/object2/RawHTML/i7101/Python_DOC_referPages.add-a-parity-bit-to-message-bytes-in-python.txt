<div class="post-text" itemprop="text">
<p>I want to use the pigpio library to send and receive 8-bit binary data over a serial link using bit-banging. The other side expects and sends bytes with an added valid parity bit. Unfortunately there is no parity handling in the pigpio library. However, the pigpio library accepts data in chunks of arbitrary length, so I can add a parity bit in <em>my</em> code to each data byte before I present the 9-bit chunks to the send routine (or receive 9-bit chunks and verify the parity).  The messages to be sent are in a buffer as 8-bit binary bytes.
I was looking at the BitArray functions but am stymied how I can extend each message byte with a parity bit and fill a bitarray with the 9-bit data in Python.  Does anybody have a suggestion?</p>
</div>
<div class="post-text" itemprop="text">
<p>As per the docs for <code>wave_add_serial()</code>, you need to set <code>bb_bits=9</code>.</p>
<p><a href="http://abyz.co.uk/rpi/pigpio/python.html#wave_add_serial" rel="nofollow noreferrer">http://abyz.co.uk/rpi/pigpio/python.html#wave_add_serial</a></p>
<p>Then:</p>
<blockquote>
<p>For bb_bits 9-16 there will be two bytes per character.</p>
</blockquote>
<p>So you will need to provide data formatted with 9 bits of data plus 7 bits of don't-care in two-byte pairs.  This should make your life easy, as your real data will simply be spread into twice as many bytes as originally, with the parity being stored in the first bit of every other byte.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer"><code>struct</code></a> module. You can use it to pack and unpack binary data.</p>
</div>
<span class="comment-copy">Please put some effort into formatting your question so it is more easily readable (e.g. separate into paragraphs) and also show what you have tried so far, so we can help with that.</span>
<span class="comment-copy">My error: The wave_add_serial() function in the pigpio library does NOT expect data "in chunks of arbitrary length" but in integer multiples of 8 bits, i.e. as 8, 16, or 32 bits.</span>
<span class="comment-copy">Right! My oversight: I read about the bb_bits=9 parameter in wave_add_serial() but overlooked that the function does NOT expect the respective exact number of bits, e.g. 9, per character but instead an integer number of bytes, in this case two bytes.  Yes, indeed, this makes my life easier.  Note to self: RTFM.</span>
