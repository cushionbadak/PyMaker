<div class="post-text" itemprop="text">
<p>I'm trying to create a function that will take the <code>sha1</code> hash and update it 500 times with itself, so for example:</p>
<pre><code>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; d = hashlib.sha1()
&gt;&gt;&gt; d.update("test")
&gt;&gt;&gt; d.hexdigest()
'a94a8fe5ccb19ba61c4c0873d391e987982fbbd3'
&gt;&gt;&gt; e = hashlib.sha1()
&gt;&gt;&gt; e.update("a94a8fe5ccb19ba61c4c0873d391e987982fbbd3")
&gt;&gt;&gt; e.hexdigest()
'c4033bff94b567a190e33faa551f411caef444f2'
&gt;&gt;&gt; 
</code></pre>
<p>What I want to do is take the hash of the original string <code>test</code> and rehash it into another hash, from the given hash.</p>
<p>I'm having some trouble doing this:</p>
<pre><code>def sha1_rounds(string, salt=None, front=False, back=False, rounds=500, **placeholder):
    obj = hashlib.sha1()
    if salt is not None and front and not back:
        obj.update(salt + string)
    elif salt is not None and back and not front:
        obj.update(string + salt)
    else:
        obj.update(string)
    for _ in range(rounds):
        obj1 = obj.hexdigest()
        obj = obj.update(obj1)
    return obj.hexdigest()
</code></pre>
<p>When this code is run, it's giving me the following error:</p>
<pre><code>Traceback (most recent call last):
  File "&lt;pyshell#93&gt;", line 1, in &lt;module&gt;
    sha1_rounds("test")
  File "&lt;pyshell#92&gt;", line 10, in sha1_rounds
    obj1 = obj.hexdigest()
AttributeError: 'NoneType' object has no attribute 'hexdigest'
</code></pre>
<p>If I'm understanding this correctly, what this error is telling me is that when I'm trying to re-update the hash object it's resulting in <code>None</code>. However, I've tried a few different things, and I'm not entirely sure how I can successfully do this. How can I create a new hash object inside of a for loop from a given hash?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think I figured this out, by creating a new hash object and hexdigesting the string before the rounds, I might be able to speed up performance by moving the hash object creation outside of the for loop. If anyone has any other ideas, I would be excited to see them:</p>
<pre><code>def sha1_rounds(string, salt=None, front=False, back=False, rounds=500, **placeholder):
    obj = hashlib.sha1()
    if salt is not None and front and not back:
        obj.update(salt + string)
    elif salt is not None and back and not front:
        obj.update(string + salt)
    else:
        obj.update(string)
        hashed = obj.hexdigest()
    for _ in range(rounds):
        obj1 = hashlib.sha1()
        obj1.update(hashed)
        hashed = obj1.hexdigest()
    return hashed
</code></pre>
</div>
<span class="comment-copy">I suggest you upgrade to Python 3, so you can use <a href="https://docs.python.org/3/library/hashlib.html#hashlib.pbkdf2_hmac" rel="nofollow noreferrer">hashlib.pbkdf2_hmac</a></span>
<span class="comment-copy">@PM2Ring it's for a hash cracking framework, so I'm trying to break hash, not store it</span>
