<div class="post-text" itemprop="text">
<p>I'm trying to sort an array of strings by comparing the concatenation of the strings, so that when you concatenate all the strings in the array, you get the largest value. However, I keep getting the error in the sorting function: ValueError: need more than 1 value to unpack</p>
<pre><code>nums = ['3', '30', '34', '5', '9'] 
nums.sort(key = lambda (x,y): cmp(x+y,y+x))
# should get me ['9', '5', '34', '3', '30']
# instead, gets me the exception ValueError: need more than 1 value to unpack
</code></pre>
<p>Why is this happening? Can I not compare values like this in the sorting function? Problem is inspired by <a href="https://leetcode.com/problems/largest-number/" rel="nofollow noreferrer">https://leetcode.com/problems/largest-number/</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>key</code> function takes only a single argument. The value passed to your key function is simply the element in your collection that is currently being considered for positioning in the sorted version of your list. It is not doing any actual comparisons. The sort function does that internally.</p>
<p>There is another function called <code>cmp</code> which does perform a comparison. It takes two arguments, see <a href="https://docs.python.org/3/howto/sorting.html#the-old-way-using-the-cmp-parameter" rel="nofollow noreferrer">docs</a> for more specific details.</p>
</div>
<span class="comment-copy">The key function just takes the value itself. Unlike the <code>cmp</code> function which takes 2 values for a comparison. <code>key</code> is preferred these days as its much simpler, although in your case wont suffice. See the docs here for <a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow noreferrer">sorted</a> which the docs state is same for <code>list.sort</code>.</span>
<span class="comment-copy">So in order to use key as opposed to cmp in this situation, you're saying that the correct way to do it would be <code>sorted(nums, key = lambda x, y:y+x )</code>? Is that what 'taking the value itself' means?</span>
<span class="comment-copy">no it means that the function called by <code>sort</code> takes only a single argument, which is the element in the list currently being considered for sorting. Your lambda must have form <code>lambda x: &lt;return some property of x&gt;</code>. It's just a way of getting the value in the element you want to sort by. When you are using some primative like an int, you don't need a key function. As you can only really be sorting on the value itself, the key function would look like <code>lambda x: x</code>, which is what the default behaviour is without a key.</span>
<span class="comment-copy">The key function exists for times when you might have a class or a list etc and you want to sort on some specific property of that class/list and so you can do this by using the key function. Look at <a href="https://ideone.com/bpAa18" rel="nofollow noreferrer">this  example</a>. Although I can say, you dont need the key function to reach a solution.</span>
<span class="comment-copy">Got it. Thanks for clarifying!</span>
<span class="comment-copy">This almost works. You can't just sort the numbers in reverse order because the 3 has to come before the 30 to get the largest string. The correct comparison function is          <code>num.sort(cmp=lambda x, y: cmp(y+x, x+y))</code></span>
<span class="comment-copy">You are right. I'll remove that bit as its irrelevant to the actual answer.</span>
<span class="comment-copy">Thanks for your help!</span>
