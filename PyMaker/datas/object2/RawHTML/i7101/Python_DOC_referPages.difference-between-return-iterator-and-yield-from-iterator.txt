<div class="post-text" itemprop="text">
<p>I'm trying to implement my own version of <code>itertools.compress</code>, the problem is that i stumbled upon the return type. I mean both of these functions return an iterator, but i think the second one is not considered a generator function because there is no yield statement inside. So my question is, are these two implementations equivalent ?</p>
<pre><code>def compress (seq, selectors):
    from operator import itemgetter
    fst = itemgetter (0)
    snd = itemgetter (1)
    yield from map (fst, filter (snd, zip (seq, selectors)))

def compress (seq, selectors):
    from operator import itemgetter
    fst = itemgetter (0)
    snd = itemgetter (1)
    return map (fst, filter (snd, zip (seq, selectors)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not quite.</p>
<p><code>yield from seq</code> is equivalent to <code>for i in seq: yield i</code> </p>
<p>This means your first implementation is a generator that yields each item from the result of map(), while your second implementation returns the map object.</p>
</div>
<div class="post-text" itemprop="text">
<p>While they may look like very similar, even outputted with results, they are not equivalent. </p>
<p>Look at these basic code examples, mapping <code>str</code> to <code>range(100)</code></p>
<pre><code>def do_yield_from():
    yield from map(str, range(100))


def do_return():
    return map(str, range(100))

print(do_yield_from())
print(do_return())

&gt;&gt;&gt; &lt;class 'generator'&gt;
&gt;&gt;&gt; &lt;class 'map'&gt;
</code></pre>
<p>The first function is a <code>generator</code>, yielding the results from <code>do_yield_from</code> and a shortened version of </p>
<pre><code>for r in range(100): yield str(r)
</code></pre>
<p>The second function returns an instance of <code>map</code>, which is an <code>iterator</code> and not a <code>generator</code>.</p>
<p>Due to the first function being a <code>generator</code>, <code>yield from</code> has better performance than <code>do_return</code> </p>
<pre><code>import timeit
print(timeit.timeit(do_yield_from))
&gt;&gt;&gt; 0.53931242968009

print(timeit.timeit(do_return))
&gt;&gt;&gt; 1.467075402143485
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>So my question is, are these two implementations equivalent ?</p>
</blockquote>
<p>Not at all.</p>
<p><code>yield from</code> and <code>return</code> are two different, distinct syntactic constructs.</p>
<p><code>yield from</code> is syntax that was introduced in <a href="https://www.python.org/dev/peps/pep-0380/" rel="nofollow noreferrer">PEP380</a>. It's called <em>generator delegation</em>. <a href="https://docs.python.org/3/whatsnew/3.3.html#pep-380" rel="nofollow noreferrer">From the documentation</a>:</p>
<blockquote>
<p>PEP 380 adds the <code>yield from</code> expression, allowing a generator to delegate part of its operations to another generator. This allows a section of code containing yield to be factored out and placed in another generator. Additionally, the subgenerator is allowed to return with a value, and the value is made available to the delegating generator.</p>
</blockquote>
<p><code>return</code> however has completely different behavior. <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-return_stmt" rel="nofollow noreferrer">From the documentation</a>:</p>
<blockquote>
<p>return may only occur syntactically nested in a function definition, not within a nested class definition.</p>
<p>If an expression list is present, it is evaluated, else None is substituted.</p>
<p>return leaves the current function call with the expression list (or <code>None</code>) as return value.</p>
</blockquote>
<p>Basically <code>yield from &lt;iter&gt;</code> is equivlent to <code>for element in &lt;iter&gt;: yield element</code>, while <code>return</code> will simply return a single value.
In your case, I believe <code>yield from</code> is what you're looking for. You want to <code>yield</code> the values from the <code>map</code> iterator, not <code>return</code> the iterator itself.</p>
</div>
<span class="comment-copy">Question is about returning an iterator, so the statement "<code>return</code> will simply return a single value" is only a technicality. From the outside view both will be equivalent.</span>
<span class="comment-copy">I suppose strictly in terms of functionality @cube. But there is still a distinction. The <code>yield from</code> version of <code>compress</code> returns a generator object, whereas the <code>return</code> version of <code>compress</code> returns an iterator object. And as @Wondercricket noted below, using <code>yield from</code>  is the more efficient option. So at least in this case I still think it's important to make clear there is a distinction in the two options presented.</span>
