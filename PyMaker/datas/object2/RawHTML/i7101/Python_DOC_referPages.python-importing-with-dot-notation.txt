<div class="post-text" itemprop="text">
<p>Can someone explain this to me?
When you import <code>Tkinter.Messagebox</code> what actually does this mean (Dot Notation)?
I know that you can import <code>Tkinter</code> but when you import <code>Tkinter.Messagebox</code> what actually is this? Is it a class inside a class?</p>
<p>I am new in python and dot notation confuse me sometimes..!</p>
</div>
<div class="post-text" itemprop="text">
<p>When you're putting that dot in your imports, you're referring to something inside the package/file you're importing from.
what you import can be a class, package or a file, each time you put a dot you ask something that is inside the instance before it.</p>
<pre><code>parent/
    __init__.py
    file.py
    one/
        __init__.py
        anotherfile.py
    two/
        __init__.py
    three/
        __init__.py
</code></pre>
<p>for example you have this, when you pass <code>import parent.file</code> you're actually importing another python module that may contain classes and variables, so to refer to a specific variable or class inside that file you do <code>from parent.file import class</code> for example.</p>
<p>this may go further, import a packaging inside another package or a class inside a file inside a package etc (like <code>import parent.one.anotherfile</code>)
For more info read <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">Python documentation</a> about this.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>import a.b</code> imports <code>b</code> into the namespace <code>a</code>, you can access it by <code>a.b</code> .  Be aware that this only works if <code>b</code> is a module. (e.g. <code>import urllib.request</code> in Python 3)</p>
<p><code>from a import b</code> however imports <code>b</code> into the current namespace, accessible by <code>b</code>. This works for classes, functions etc.</p>
<p>Be careful when using from - import:</p>
<pre><code>from math import sqrt
from cmath import sqrt
</code></pre>
<p>Both statements import the function <code>sqrt</code> into the current namespace, however, the second import statement overrides the first one.</p>
</div>
<span class="comment-copy">That's a class inside a module. That means only Messagebox class would be available for you, while import Tkinter would import all the classes. I recommend trying this in python IDLE and play around with it.</span>
<span class="comment-copy">if you read the docs i hope you will find a good explanation rather than here on SO</span>
<span class="comment-copy">@Vinny: It's not a class inside a module. It's a module inside a package.</span>
<span class="comment-copy">Please check the casing, there is no <code>Tkinter.Messagebox</code> anywhere</span>
<span class="comment-copy">@MarkDickinson thanks.</span>
<span class="comment-copy"><code>import parent.file.class</code> doesn't make sense: this form of the import statement imports only modules and packages. (Try <code>import decimal.Decimal</code>, for example. It doesn't work.)</span>
<span class="comment-copy">@MarkDickinson I edited it, works now? I tried not including <code>from .. import ..</code> since he's a beginner.</span>
<span class="comment-copy">@GeekyMo I understand what you are telling me but when I import Tkinter I also get some functions to use.In your example if I import parent I will get nothing. I mean parent is just a folder right?It has nothing in it. So is Tkinter a package or  a module?</span>
<span class="comment-copy">@KwnstantinosNikoloutsos if you import a package (a parent) you actually import its <code>__init__</code> file which represents that folder is a python package, so if you import Tkinter, it'll import` __init__` file inside the Tkinter package folder, which may or may not include functions, when you import something inside it like <code>from Tkinter import func</code>, it'll go search through` __init__` first, then goes and looks for modules in that package.</span>
<span class="comment-copy">Tkinter, is a folder, which contains an <code>__init__.py</code> to tell python it's a package, and about its type, it depends, if you <code>import Tkinter</code>, you actually import <code>__init__</code> module inside it, if you do <code>from Tkinter import module</code> or <code>import Tkinter.module</code> (in some cases) you're treating Tkinter a package of python modules.</span>
