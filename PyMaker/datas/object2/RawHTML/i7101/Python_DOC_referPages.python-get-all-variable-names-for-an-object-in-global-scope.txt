<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4341942/how-can-i-get-a-list-of-references-of-an-object-in-python">How can I get a list of references of an object in Python?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I'll explain with an example:</p>
<pre><code>list_1 = [1, 2, 3]
list_2 = list_3 = list_1 # reference copy

print(magic_method(list_1))
# Should print ['list_1', 'list_2', 'list_3']

set_1 = {'a', 'b'}
print(magic_method(set_1))
# Should print ['set_1']
</code></pre>
<p>The requirement: return names of all variables pointing to the same reference. Is this at all possible with python? </p>
<p>I'm thinking something along the lines of iterating over <code>globals()</code> and <code>locals()</code> and equating <code>id</code>s. Is there anything better?</p>
</div>
<div class="post-text" itemprop="text">
<p>For global variables you can do:</p>
<pre><code>def magic_method(obj):
    return [name for name, val in globals().items() if val is obj]
</code></pre>
<p>If you want local names too, you can use the <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer"><code>inspect</code></a> module:</p>
<pre><code>def magic_method(obj):
    import inspect
    frame = inspect.currentframe()
    try:
        names = [name for name, val in frame.f_back.f_locals.items() if val is obj]
        names += [name for name, val in frame.f_back.f_globals.items()
                  if val is obj and name not in names]
        return names
    finally:
        del frame
</code></pre>
<p>And then:</p>
<pre><code>list_1 = [1, 2, 3]
list_2 = list_1

def my_fun():
    list_3 = list_1
    list_2 = list_1
    print(magic_method(list_1))

my_fun()
&gt;&gt;&gt; ['list_3', 'list_1', 'list_2']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This works:</p>
<pre><code>def magic_method(var):
     names = filter(lambda x: globals()[x] is var, globals().keys())
     return names
</code></pre>
<p><code>is</code> carries out a reference comparison. Add <code>list(...)</code> to the resultant expression if you are using Python3.</p>
</div>
<span class="comment-copy">Are closures of interest as well?</span>
<span class="comment-copy">@donkopotamus I don't think it needs to be <i>too</i> complicated. I'm considering just global scope for now.</span>
<span class="comment-copy">For global scope <code>globals()</code> is fine, no need to complicate it. And no need to compare ids when we have <code>is</code>.</span>
<span class="comment-copy">What about the references under other containers, classes etc? <code>list_4 = [list_1, 0]; class A: foo = list_1</code>.</span>
<span class="comment-copy">A recursive solution based on <code>gc.get_referrers</code>? But it is going to be very very tricky and most probably impossible. For example check this: <a href="http://ideone.com/rH1keq" rel="nofollow noreferrer">ideone.com/rH1keq</a>. <code>[[1, 2, 3], 0]</code> and <code>'list_4': [[1, 2, 3], 0]</code> are two separate entries, but are actually same references. There <code>'foo': [1, 2, 3]</code>, but who contains <code>foo</code>? Lastly for slots it simply says: <code>&lt;__main__.A object at 0x2ae6efcf3ca8&gt;</code>.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ I've updated the answer to include local variables too.</span>
<span class="comment-copy">Note that this only works with local variables from the function that calls <code>magic_method</code>. If there are any more functions on the callstack they're simply ignored. You could loop through the callstack until <code>frame.f_back</code> returns <code>None</code>.</span>
<span class="comment-copy">@Rawing Yes, you're right, I assumed only the locals from the direct caller would be of interest, but you could also inspect the whole stack like that.</span>
<span class="comment-copy">Should use <code>is</code> not <code>==</code></span>
<span class="comment-copy">ok, its not the same reference but the same value, change <code>==</code> for <code>is</code> to get the reference</span>
<span class="comment-copy">The question was about the <i>same object</i>. Two distinct $100 bills are not the same piece of paper money.</span>
