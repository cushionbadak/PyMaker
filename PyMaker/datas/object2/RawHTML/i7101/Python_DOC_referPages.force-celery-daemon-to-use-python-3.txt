<div class="post-text" itemprop="text">
<p>So I have struggled with this quite a while but I can't seem to find a solution.</p>
<p>I have installed celery with</p>
<pre><code>pip3 install --user celery
</code></pre>
<p>And everything was working fine until I try to run a celery worker and beat as a daemon following the official documentation <a href="http://docs.celeryproject.org/en/latest/userguide/daemonizing.html" rel="nofollow noreferrer">http://docs.celeryproject.org/en/latest/userguide/daemonizing.html</a></p>
<p>The specific problem I have is that the configuration file for the daemon needs the full route to celery, which I have located and specified in the file like this</p>
<pre><code>CELERY_BIN="/home/my_home/.local/bin/celery"
</code></pre>
<p>but when I run the daemon it says that I do not have a module named Celery</p>
<pre><code>me@my_computer:/etc/default$ sudo /etc/init.d/celeryd start
celery init v10.1.
Using config script: /etc/default/celeryd
Traceback (most recent call last):
  File "/home/my_home/.local/bin/celery", line 7, in &lt;module&gt;
    from celery.__main__ import main
ImportError: No module named 'celery'
</code></pre>
<p>Trying different things I think I have found the problem, apparently Celery daemon is trying to run celery using python 2 but since I installed it for python 3 it says that it can't find it. Any clues on how to fix this or if I should try something else?</p>
<p>Additional output:</p>
<p>Python 2:</p>
<pre><code>Python 2.7.6 (default, Oct 26 2016, 20:32:47) 
[GCC 4.8.4] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from celery.__main__ import main
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named celery.__main__
</code></pre>
<p>Python 3:</p>
<pre><code>Python 3.4.3 (default, Nov 17 2016, 01:11:57) 
[GCC 4.8.4] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from celery.__main__ import main
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">venv</a> to containerize the call so that no other python binary is available.</p>
<p>I run my django environments uniformly containerized with venv, because then you can upgrade one app's dependencies without upgrading all of them. You don't have to containerize the whole app, but then your system environment might get out of sync' with your venv, causing weird issues. It probably would be better to containerize both django and celery in the same venv and then invoke both like</p>
<pre><code>PATH/TO/VENV/bin/python ...
</code></pre>
</div>
<span class="comment-copy">You could use <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">venv</a> to containerize the call so that no other python binary is available.</span>
<span class="comment-copy">@RossRogers Sorry if this is a dumb question. I am not very familiar with venvs, I am using celery with a django server, to run this daemon should I containerize the whole thing or just celery?</span>
<span class="comment-copy">I run my django environments uniformly containerized with venv, because then you can upgrade one app's dependencies without upgrading all of them.  You don't <i>have</i> to containerize the whole app, but then your system environment might get out of synch' with your venv, causing weird issues. It probably would be better to containerize both django and celery in the same venv.</span>
<span class="comment-copy">@RossRogers ok, thanks for the clear explanation. I will try it and inform you of the results.</span>
<span class="comment-copy">@RossRogers your approach was correct. If you like add an answer and I willl select it as the right one.</span>
