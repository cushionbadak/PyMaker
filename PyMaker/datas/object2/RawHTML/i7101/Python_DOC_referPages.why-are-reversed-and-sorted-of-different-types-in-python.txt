<div class="post-text" itemprop="text">
<p><code>reversed</code>'s type is "type":</p>
<pre><code>&gt;&gt;&gt; type(reversed)
&lt;class 'type'&gt;
</code></pre>
<p><code>sorted</code>'s type is "builtin function or method":</p>
<pre><code>&gt;&gt;&gt; type(sorted)
&lt;class 'builtin_function_or_method'&gt;
</code></pre>
<p>However, they seem the same in nature. Excluding the obvious difference in functionality (reversing vs. sorting sequences), what's the reason for this difference in implementation?</p>
</div>
<div class="post-text" itemprop="text">
<p>The difference is that <code>reversed</code> is an iterator (it's also lazy-evaluating) and <code>sorted</code> is a function that works "eagerly".</p>
<p>All built-in iterators (at least in python-3.x) like <code>map</code>, <code>zip</code>, <code>filter</code>, <code>reversed</code>, ... are implemented as <strong>classes</strong>. While the eager-operating built-ins are <strong>functions</strong>, e.g. <code>min</code>, <code>max</code>, <code>any</code>, <code>all</code> and <code>sorted</code>.</p>
<pre><code>&gt;&gt;&gt; a = [1,2,3,4]
&gt;&gt;&gt; r = reversed(a)
&lt;list_reverseiterator at 0x2187afa0240&gt;
</code></pre>
<p>You actually need to "consume" the iterator to get the values (e.g. <code>list</code>):</p>
<pre><code>&gt;&gt;&gt; list(r)
[4, 3, 2, 1]
</code></pre>
<p>On the other hand this "consuming" part isn't needed for <strong>functions</strong> like <code>sorted</code>:</p>
<pre><code>&gt;&gt;&gt; s = sorted(a)
[1, 2, 3, 4]
</code></pre>
<hr/>
<p>In the comments it was asked <strong>why these are implemented as classes instead of functions</strong>. That's not really easy to answer but I'll try my best:</p>
<p>Using lazy-evaluating operations has one huge benefit: They are very memory efficient when chained. They don't need to create intermediate lists unless they are explicitly "requested". That was the reason why <code>map</code>, <code>zip</code> and <code>filter</code> were changed from eager-operating functions (python-2.x) to lazy-operating classes (python-3.x).</p>
<p>Generally there are two ways in Python to create iterators:</p>
<ul>
<li>classes that <code>return self</code> in their <code>__iter__</code> method</li>
<li>generator functions - functions that contain a <code>yield</code></li>
</ul>
<p>However (at least CPython) implements all their built-ins (and several standard library modules) in C. It's very easy to create iterator classes in C but I haven't found any sensible way to create generator functions based on the Python-C-API. So the reason why these iterators are implemented as classes (in CPython) might just be convenience or the lack of (fast or implementable) alternatives.</p>
<p>There is an additional reason to use classes instead of generators: You can implement special methods for classes but you can't implement them on generator functions. That might not sound impressive but it has definite advantages. For example most iterators can be <a href="https://docs.python.org/library/pickle.html" rel="noreferrer">pickled</a> (at least on Python-3.x) using the <a href="https://docs.python.org/library/pickle.html#object.__reduce__" rel="noreferrer"><code>__reduce__</code></a> and <a href="https://docs.python.org/library/pickle.html#object.__setstate__" rel="noreferrer"><code>__setstate__</code></a> methods. That means you can store them on the disk, and allows copying them. Since Python-3.4 some iterators also implement <a href="https://www.python.org/dev/peps/pep-0424/" rel="noreferrer"><code>__length_hint__</code></a> which makes consuming these iterators with <code>list</code> (and similar) much faster.</p>
<hr/>
<p>Note that <code>reversed</code> could easily be implemented as factory-function (like <code>iter</code>) but unlike <code>iter</code>, which can return <strong>two unique</strong> classes, <code>reversed</code> can only return <strong>one unique</strong> class.</p>
<p>To illustrate the possible (and unique) classes you have to consider a class that has no <a href="https://docs.python.org/reference/datamodel.html#object.__iter__" rel="noreferrer"><code>__iter__</code></a> and no <a href="https://docs.python.org/reference/datamodel.html#object.__reversed__" rel="noreferrer"><code>__reversed__</code></a> method but are iterable and reverse-iterable (by implementing <a href="https://docs.python.org/reference/datamodel.html#object.__getitem__" rel="noreferrer"><code>__getitem__</code></a> and <a href="https://docs.python.org/reference/datamodel.html#object.__len__" rel="noreferrer"><code>__len__</code></a>):</p>
<pre><code>class A(object):
    def __init__(self, vals):
        self.vals = vals

    def __len__(self):
        return len(self.vals)

    def __getitem__(self, idx):
        return self.vals[idx]
</code></pre>
<p>And while it makes sense to add an abstraction layer (a factory function) in case of <code>iter</code> - because the returned class is depending on the number of input arguments:</p>
<pre><code>&gt;&gt;&gt; iter(A([1,2,3]))
&lt;iterator at 0x2187afaed68&gt;
&gt;&gt;&gt; iter(min, 0)   # actually this is a useless example, just here to see what it returns
&lt;callable_iterator at 0x1333879bdd8&gt;
</code></pre>
<p>That reasoning doesn't apply to <code>reversed</code>:</p>
<pre><code>&gt;&gt;&gt; reversed(A([1,2,3]))
&lt;reversed at 0x2187afaec50&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What's the difference between <code>reversed</code> and <code>sorted</code>?</p>
</blockquote>
<p>Interestingly, <code>reversed</code> is not a function, while <code>sorted</code> is.</p>
<p>Open a REPL session and type <code>help(reversed)</code>:</p>
<pre><code>class reversed(object)
 |  reversed(sequence) -&gt; reverse iterator over values of the sequence
 |  
 |  Return a reverse iterator
</code></pre>
<p>It is indeed a class which is used to return a reverse iterator.</p>
<blockquote>
<p>Okay, so <code>reversed</code> isn't a function. But why not?</p>
</blockquote>
<p>This is a bit hard to answer. One explanation is that iterators have lazy evaluation. This requires some sort of container to store information about the current state of the iterator at any given time. This is best done through an object, and hence, a <code>class</code>.</p>
</div>
<span class="comment-copy">They are different because they do different things. The end result could be seen as similar, but the way to get to that end result is very different.</span>
<span class="comment-copy">Unfounded speculation: <code>reversed</code> is a type because it returns an iterable that implements a <a href="https://docs.python.org/3/reference/datamodel.html#object.__length_hint__" rel="nofollow noreferrer"><code>__length_hint__</code></a> method. Since this method must be defined in a class, it makes sense for <code>reversed</code> itself to be that class. (The problem with this theory is that <code>__length_hint__</code> only exists since python 3.4)</span>
<span class="comment-copy">Let me ask the reverse question: why do you expect them to be the same?</span>
<span class="comment-copy">anyway +1, the <code>itertools.</code> methods are also implemented as classes, following the same logic I guess, although I'm still not clear why</span>
<span class="comment-copy">I updated the answer a bit to include one reason why these are classes in CPython. However it's impossible to answer this in a meaningful way for <code>reversed</code> because that could also easily be a factory function (like <code>iter</code>). But like <code>iter</code> the returned value of <code>reversed</code> will always be an iterator-class or generator-function.</span>
<span class="comment-copy">Adding something here: remember that with lazy evaluation requires some sort of container object to store information about the current state. This can only be done through an object. And hence, a class.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Not necessarily, you could also use a generator in which case the <code>type</code> is <code>function</code> and the return value of the function is <code>generator</code>. Note that due to Pythons "everything is an object" everything (even functions) are classes.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ: "The function has to construct some instance of some class." - yeah, but so does <code>sorted</code>, and so does any function that returns a new object.</span>
<span class="comment-copy">If I understand the OP's question correctly, they're asking <i>why</i> <code>reversed</code> isn't a function. (Or why <code>sorted</code> isn't a type.)</span>
<span class="comment-copy">The docs seem a bit misleading perhaps, with <code>reversed</code> (and other classes) listed under "Built-in Functions"  <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">docs.python.org/3/library/functions.html</a></span>
