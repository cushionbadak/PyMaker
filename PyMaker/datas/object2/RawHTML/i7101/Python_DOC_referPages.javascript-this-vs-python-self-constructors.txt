<div class="post-text" itemprop="text">
<p>Javascript Constructor + create objects example</p>
<pre><code>//Constructor
function Course(title,instructor,level,published,views){
    this.title = title;
    this.instructor = instructor;
    this.level = level;
    this.published = published;
    this.views = views;
    this.updateViews = function() {
        return ++this.views;
    }
}

//Create Objects
var a = new Course("A title", "A instructor", 1, true, 0);
var b = new Course("B title", "B instructor", 1, true, 123456);

//Log out objects properties and methods
console.log(a.title);  // "A Title"
console.log(b.updateViews()); // "123457"
</code></pre>
<p>what is the python equivalent of this? <em>(Constructor function / or class + create object instances + log out properties &amp; methods?)</em></p>
<p>Is there a difference between <code>self</code> from python and <code>this</code> from Javascript?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is a python translation:</p>
<pre><code>class Course:

    def __init__(self,title,instructor,level,published,views)

        self.title = title
        self.instructor = instructor
        self.level = level
        self.published = published
        self.views = views

    def update_views(self):
        return self.views += 1
</code></pre>
<p>You must declare a class, then initialize that class as follows:</p>
<pre><code>course = Course("title","instructor","level","published",0)
</code></pre>
<p>Some notable differences is that self is not implicitly available but is actually a required parameter to all instance functions of the class. However, you should consult <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer"> the documentation </a> for python classes for more information.</p>
<h2>Edit</h2>
<p>As of <a href="https://docs.python.org/3/whatsnew/3.7.html" rel="nofollow noreferrer"><code>python3.7</code></a>, I feel obligated to show that newly introduced <a href="https://docs.python.org/3/library/dataclasses.html#module-dataclasses" rel="nofollow noreferrer"><code>dataclasses</code></a> are the most pythonic way of writing this kind of a class and may be of some help to you future python developers.  </p>
<pre><code>from dataclasses import dataclass

@dataclass
class Course:

     title: str 
     instructor: str 
     level: str 
     published: bool
     views: int 

     def update_views(self):
         return self.views += 1 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There was some errors on the python solution fixed it now</p>
<pre><code>#Constructors
class Course:

    def __init__(self,title,instructor,level,published,views):

        self.propTitle = title
        self.propInstructor = instructor
        self.propLevel = level
        self.propPublished = published
        self.propViews = views

    def update_views(self):
        self.propViews += 1
        return self.propViews

# Create objects
courseA = Course("A title", "A instructor", 1, True, 0)
courseB = Course("B title", "B instructor", 1, True, 123456)

# Print object property and use object method
print(courseA.propTitle)
print(courseB.update_views())
</code></pre>
<p>Result print out</p>
<blockquote>
<p>A title</p>
<p>123457</p>
</blockquote>
<p>Using <code>print(courseB.update_views)</code> outputs this though,<code>&lt;bound method Course.update_views of &lt;__main__.Course object at 0x7f9f79978908&gt;&gt;</code> , use <code>print(courseB.update_views())</code></p>
</div>
<span class="comment-copy">Pretty much, no difference. Though in python, <code>self</code> is by convention, and you can call it anything you want. Also, you have to include it as the first parameter to your constructor, whereas JS "just instinctively knows" what <code>this</code> is</span>
<span class="comment-copy">Have you consulted the <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">Python documentation on classes</a>?</span>
<span class="comment-copy">Your question title has the terms switched</span>
<span class="comment-copy">whoops didn';t realize that will swap</span>
<span class="comment-copy">So in python you have to define the properties / method seperately (with <code>def</code>) inside of a class?</span>
<span class="comment-copy">@Kagerjay huh? No, fundamentally Python and Javascript have different OOP models. Javascript uses prototype-based inheritance, whereas Python uses class-based inheritance. I believe classes were introducced in ECM6. Note, you <i>can</i> dynamically add function properties to an instance in Python in the constructor, but they won't be inherited.</span>
<span class="comment-copy">well I'm going have to do some more reading thanks for the info :)</span>
<span class="comment-copy">@modesitt could you clarify my answer I posted below, I cannot figure out how to access the method / print out result here</span>
<span class="comment-copy">@Kagerjay sure I will. Give me a minute.</span>
<span class="comment-copy">Just use (), like this <code>courseB.update_views()</code></span>
<span class="comment-copy">@Igor is right. You must call the method. It is not a computer property.</span>
<span class="comment-copy">okay thanks i fixed it now, I named everything <code>prop</code> prefix so its clear to me which values are arguments and which are not</span>
