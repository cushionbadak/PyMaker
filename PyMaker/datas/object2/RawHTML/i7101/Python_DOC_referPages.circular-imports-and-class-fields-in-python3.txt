<div class="post-text" itemprop="text">
<p>Okay, I do understand that this topic is old as hell, but I couldn't find an answer to the particular question that I am asking.</p>
<p>Let's say that we have a very simple structure: two files, <code>a.py</code> and <code>b.py</code>, their contents being:</p>
<p><code>a.py</code></p>
<pre><code>import b

class C:
    lal = 4

class A:
    kek = 12
    lol = b.B()
</code></pre>
<p><code>b.py</code></p>
<pre><code>import a

class B:
    aa = a.C()
</code></pre>
<p>Trying to run <code>python b.py</code>, we get:</p>
<pre><code>Traceback (most recent call last):
  File "b.py", line 1, in &lt;module&gt;
    import a
  File ".../a.py", line 1, in &lt;module&gt;
    import b
  File ".../b.py", line 3, in &lt;module&gt;
    class B:
  File ".../a.py", line 5, in A                                                                                  
    aa = a.C()
AttributeError: module 'a' has no attribute 'C'
</code></pre>
<p><strong>BUT</strong> if we move the <code>import b</code> line <strong>AFTER</strong> the <code>C</code> class, the script launches and produces no errors.</p>
<p>I have not found any mention of this whatsoever in any answers here on SO.  The question here is: <strong>Why</strong> does this happen and <strong><em>how</em></strong> to escape this?</p>
<p><em>This is a particularly important question for the Django framework. When I have many models, I try splitting them into many files. It is very easy to get a cyclic import there.</em></p>
</div>
<div class="post-text" itemprop="text">
<p>In python when you import a module then it first import all module that defines at the top of the module, If a module is not in sys.modules, then an import creates the new module entry in sys.modules and then executes the code in the module. </p>
<p>so when you try to import b.py module in a.py then it first import all module that listed in b.py is a.py (import a) if module not listed in sys.modules .  and still module b.py not completely executed so b.py module is not added into sys.modules</p>
<p>after that, it tries to import a.py and in a.py it tries first import all module that import in a.py is b.py </p>
<p>so it's a basic cycle  a.py try to import b.py and b.py try to import a.py   </p>
<p><a href="https://i.stack.imgur.com/kwPTe.jpg" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/kwPTe.jpg"/></a></p>
<p>For that problem, Solution is import one module or class  inside the class, Not at the top of the module </p>
<p>as per your example</p>
<p><strong>a.py</strong></p>
<pre><code>class C:
    lal = 4

class A:
    import b
    kek = 12
    lol = b.B()
</code></pre>
<p><strong>b.py</strong></p>
<pre><code>import a

class B:
    aa = a.C() 
</code></pre>
<p>or </p>
<p><strong>a.py</strong></p>
<pre><code>import b
class C:
    lal = 4

class A:

    kek = 12
    lol = b.B()
</code></pre>
<p><strong>b.py</strong></p>
<pre><code>class B:
    import a
    aa = a.C() 
</code></pre>
<p>for detailed <a href="https://groups.google.com/forum/#!topic/comp.lang.python/HYChxtsrhnw" rel="nofollow noreferrer">information discussion</a></p>
<p><a href="https://bugs.python.org/issue992389" rel="nofollow noreferrer">Python issue</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Actually @Kallz already provided the right answer, but you are being bit stubborn :) You are creating circual reference which would end in infinite loop. Python has a mechanizm to avoid such loop by going line by line. 1st you open b.py - it gets loaded into the sys.modules as '__main__' and starts to be loaded. While loading it comes to 'import a'. So it looks for module 'a'. It finds it and puts it into the sys.modules. sys.modules now has '__main__' and 'a'. It starts to load module 'a' where it encounters 'import b'. So it finds 'b.py' and puts it into sys.modules. Now you have '__main__', 'a', 'b' and it starts to load 'b' where it encounters 'import a' - this time module 'a' is already in sys.modules and loading of it has already started! So Python knows something fishy is going on and you get yourself an ImportError.</p>
</div>
<span class="comment-copy">I am not so educated in this field, but I believe the answer lies here: <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">docs.python.org/3/reference/import.html</a> . I also suggest to use "from module_x import class_y" instead of "import *". It can help a lot to avoid these kinds of hicups.</span>
<span class="comment-copy">The module will exist in sys.modules before the loader executes the module code. This is crucial because the module code may (directly or indirectly) import itself; adding it to sys.modules beforehand prevents unbounded recursion in the worst case and multiple loading in the best.</span>
<span class="comment-copy">As I indicated in my answer, I know this is a solution. But I don't get why. And it's probably a bad thing to do since all imports should be at the top of the file.</span>
<span class="comment-copy">@feakuru check my updated answer</span>
<span class="comment-copy">it's not actually true. If it was a cycle, then there would be a completely other error. Besides, your fix (which works, <i>as I indicated that I know</i>) would not actually fix that problem - it would still be cyclic.</span>
<span class="comment-copy">@feakuru cycle import error dont give any other error it give same error as you show in your question</span>
<span class="comment-copy">@feakuru  check python issue '<a href="https://bugs.python.org/issue992389" rel="nofollow noreferrer">bugs.python.org/issue992389</a>'</span>
<span class="comment-copy">as you might notice, I am not getting an <code>ImportError</code>. I am getting an <code>AttributeError</code>. which indicates that python thinks that the module is already loaded, just that it doesn't contain <code>C</code>. That's what the question is about.</span>
<span class="comment-copy">On p3.6 I got ImportError on the same problem set!</span>
<span class="comment-copy">The loading seems different between python versions. Which one are you using?</span>
<span class="comment-copy">3.5.3. I don't think it should be different</span>
<span class="comment-copy">Python changlog, Python 3.6.0 beta2: bpo-21578: Fixed misleading error message when ImportError called with invalid keyword args.</span>
