<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3691101/what-is-the-purpose-of-str-and-repr">What is the purpose of __str__ and __repr__?</a>
<span class="question-originals-answer-count">
                    6 answers
                </span>
</li>
</ul>
</div>
<p>I want to implement a class inherit from built-in class list and override a method, when I get an instance of this class, I can return a custom data, is it possible?</p>
<pre><code>class MyList(list):
    def the_method(self):
        # do some thing
        return [1, 2]

inst = MyList()
print inst # [1, 2]
</code></pre>
<p>Usually when I print an instance of class I will get 'xxx object at 0x0000000002D92358',
but if I print an instance of class which inherit from list, I will get a list output, how python do that?</p>
</div>
<div class="post-text" itemprop="text">
<p>You'll need to <strong>teach</strong> python how to convert your class into a string.</p>
<p>Python's base object has two methods which handle conversion into a string: <a href="https://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow noreferrer"><code>__repr__</code></a> and <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__</code></a>.  In order to get the result you want, you'll need to override them.</p>
<p>These two functions serve a similar but not identical purpose. You can find out what the exact difference between them is <a href="https://stackoverflow.com/a/2626364/7662085">here</a>. A nice explanation given by <a href="https://stackoverflow.com/users/14343/ned-batchelder">Ned Batchelder</a> is:</p>
<blockquote>
<p>My rule of thumb: <code>__repr__</code> is for developers, <code>__str__</code> is for customers.</p>
</blockquote>
<p>In your case however, you don't need to make them different. The unambiguous representation of your custom list class is also the most readable, therefore the two functions can return the same result. </p>
<p>Modify your class like so:</p>
<pre><code>class MyList(list):
    def __repr__(self):
        return str([1,2])
    def __str__(self):
        return self.__repr__()
</code></pre>
<p>Note that both functions have to return a <strong>string</strong>, hence the call to <code>str</code> in the return statement of <code>__repr__</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can modify the representation of an object if you override <strong>__repr__(self)</strong> method. But it has to return <strong>str</strong> type.</p>
<pre><code>&gt;&gt;&gt; class MyList(list):
    def do(self):
        return [1, 2]
    def __repr__(self):
        return '[1, 2]'


&gt;&gt;&gt; inst = MyList()
&gt;&gt;&gt; inst
[1, 2]
</code></pre>
<p>About the difference between <code>__repr__</code> and <code>__str__</code>, there is a great explanation here <a href="https://stackoverflow.com/a/2626364/840582">https://stackoverflow.com/a/2626364/840582</a></p>
</div>
<span class="comment-copy"><code>list</code>s have a <code>__repr__</code> and <code>__str__</code> method, that output is what you see.</span>
<span class="comment-copy">But I also want to get a custom list(realt-ime from database) when I try reach the variable mylist (mylist = MyList()), can I do it?</span>
<span class="comment-copy">@nopa You asked about getting the string representation. What you're asking about now is completely unrelated. You should accept an answer to this question and then ask a new one, with a clear description of your new issue. Then, somebody who has the required knowledge will help you.</span>
<span class="comment-copy">Maybe I have not make sure what design I really need, no matter how, thanks for reply</span>
<span class="comment-copy">But I also want to get a custom list(realt-ime from database) when I try reach the variable mylist (mylist = MyList()), can I do it?</span>
<span class="comment-copy">Sounds like you'll need to define a class with a list object, not extending it</span>
