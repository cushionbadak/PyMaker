<div class="post-text" itemprop="text">
<p>I have a master python script, that goes and automates configuring nodes in parallel in a distributed system setup in our lab. 
I run multiple instances of kickstart.py and it goes and configures all nodes in parallel. How do I create log handler such that each instance of kickstart.py configures each node separately in parallel and each instance logs into different log file. I want to use python logging module. Any help is appreciated. Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You could pass the name of the desired logfile to the python script from the command line. Try something like this.</p>
<pre><code>#!/usr/bin/env python
import sys
with open(argv[1], 'a') as logfile:
    #insert code here
    if something_bad_happened:
         logfile.write("Something bad happened!")
</code></pre>
<p>Note that python has some more advanced logging capabilities, but I'm not using them here for simplicity. You should probably use them.</p>
<p>Run this as <code>python kickstart.py log1</code> to log to a file in the same directory as the script or replace <code>log1</code> with a full path. I don't know how your 'master script' calls multiple instances of kickstart.py, but here's one way to call python code from python, passing command line arguments</p>
<pre><code>import subprocess
&gt;&gt;&gt; subprocess.call(["python kickstart.py", "log1"])
0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>logging</code> module is thread safe and very easy to use.
Read the relevant <a href="https://docs.python.org/2/howto/logging-cookbook.html#logging-from-multiple-threads" rel="nofollow noreferrer">documentation</a>.</p>
<p>Here is a simple example:</p>
<pre><code>import logging
import threading
import time


def worker(arg):
    logger = logging.getLogger('simple_example')
    while not arg['stop']:
        logger.info('Hello from thread')
        time.sleep(0.5)


def main():
    logger = logging.getLogger('simple_example')
    logger.setLevel(logging.DEBUG)
    fh = logging.FileHandler('spam.log')
    fh.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(threadName)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)
    logger.addHandler(fh)

    thread = threading.Thread(target=worker, args=(info,))
    thread.start()

    for x in range(3):
        logger.info('Hello from main')
        time.sleep(0.75)

    thread.join()

if __name__ == '__main__':
    main()
</code></pre>
<p>Which will give you:</p>
<pre><code>2017-08-11 11:00:53,568 - simple_example - INFO - Hello from main
2017-08-11 11:00:53,568 - simple_example - INFO - Hello from thread
2017-08-11 11:00:54,069 - simple_example - INFO - Hello from thread
2017-08-11 11:00:54,318 - simple_example - INFO - Hello from main
2017-08-11 11:00:55,068 - simple_example - INFO - Hello from main
</code></pre>
</div>
<span class="comment-copy">Is there any reason you can't just add a <a href="https://docs.python.org/3/library/logging.handlers.html#filehandler" rel="nofollow noreferrer">file handler</a> to your logger, with some information derived from the name of the node in the filename to keep them unique?</span>
<span class="comment-copy">Read <code>logging</code> documentation about it and you can crack it out - <a href="https://docs.python.org/2/howto/logging-cookbook.html#logging-from-multiple-threads" rel="nofollow noreferrer">docs.python.org/2/howto/â€¦</a></span>
<span class="comment-copy">Python has a <code>logging</code> library, no need to rewrite it.</span>
