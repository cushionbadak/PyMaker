<div class="post-text" itemprop="text">
<p>Command <code>dir(__builtins__)</code> just list all the 151 builtin libraries.</p>
<pre><code>len(dir(__builtins__)) # output 151
</code></pre>
<p>However, It lists 68 built-in functions in <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">2. Built-in Functions â€” Python 3.6.2 documentation</a></p>
<p>I tried to get the functions from <code>dir(__builtins__)</code> as the following steps:</p>
<pre><code>#I hardtyped the functions as comparition.
officical_builtin_functions = ['abs','all',....]
y = official_builtin_functions
len(y) #output:68
# get official builtin functions from python_builtin_library
dir(__builtins__).index('abs') #output:79
qualified_functions = python_builtin_library[79:]
qualified_functions.pop('exit')
qualified_functions.pop('credits')
qualified_functions.pop('copyright')
qualified_functions.pop('quit')
qualified_functions.pop('license')
quilified_functions.append('__import__')
# then get the 68 qualified_functions from dir(__builtins__)
</code></pre>
<p>How to list the 68 built-in functions directly?</p>
</div>
<div class="post-text" itemprop="text">
<p>One approach in Python 3.5 would be to list objects that have the <code>__module__</code> attribute and it set to <code>builtins</code> and lowercase name:</p>
<pre><code>&gt;&gt;&gt; sorted(k for k, v in vars(__builtins__).items()
           if k.islower() and getattr(v, '__module__', '') == 'builtins')
['__build_class__', '__import__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray',
 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'delattr', 'dict', 'dir', 
 'divmod', 'enumerate', 'eval', 'exec', 'filter', 'float', 'format', 'frozenset', 'getattr', 
 'globals', 'hasattr', 'hash', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',
 'iter', 'len', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct',
 'ord', 'pow', 'print', 'property', 'range', 'repr', 'reversed', 'round', 'set', 'setattr',
 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']
</code></pre>
<p>Notice that <code>__import__</code> is listed in the docs but <code>__build_class__</code> is not. 67 names on Python 3.5. The list in the docs has 68 names... This is also because <code>help</code> and <code>open</code> from the documentation do not match my filter, as <code>open</code> is from module <code>io</code> and <code>help</code> is from site builtins; actually the documentation is wrong, because <code>help</code> need not be available:</p>
<pre><code>% python3 -S
Python 3.5.3 (default, Jan 19 2017, 14:11:04) 
[GCC 6.3.0 20170118] on linux
&gt;&gt;&gt; help
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'help' is not defined
</code></pre>
<p>Likewise many exception types are always available, even though they're not listed there.</p>
</div>
<div class="post-text" itemprop="text">
<p>I tried being smart about it but partially failed, but still an interesting find, so here it is:</p>
<pre><code>import types
b = [i for i in dir(__builtins__) if isinstance(eval(i), types.BuiltinFunctionType)]
</code></pre>
<p>This returns a list of 42 items for me in python 3.5.3</p>
<p>Without using <code>types</code>, a nice seperator is to check if the items in <code>__builtins__</code> start with a lowercase letter, that usually indicates a function, so </p>
<pre><code>b = [i for i in dir(__builtins__) if i[0].islower()]
</code></pre>
<p>Returns 72 items for me, perhaps it's more complete than the documentation is? My guess would be yes. Check it out for yourself to test these ideas</p>
</div>
<div class="post-text" itemprop="text">
<p>Technically, there are only 42 (in 3.4) or so builtin functions and methods in Python. The rest of the list is builtin variables and typess:</p>
<pre><code>real_builtins = [e for e in dir(__builtins__) if isinstance(eval(e), type(vars))]
len(real_builtins)
# 42
real_builtins[:5] + real_builtins[-5:]
# ['__build_class__', '__import__', 'abs', 'all', 'any',
#  'round', 'setattr', 'sorted', 'sum', 'vars']
type(abs)
#&lt;class 'builtin_function_or_method'&gt;
</code></pre>
<p>Note that <code>zip</code> or <code>int</code>, for example, are not really functions. They are constructors of the namesake builtin data types:</p>
<pre><code>type(zip)
# &lt;class 'type'&gt;
type(int)
# &lt;class 'int'&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I tried to filter it (mostly) by functionality and came up with:</p>
<pre><code>from inspect import isclass

documented_builtins = [x
    for x in dir(__builtins__) if not x.startswith('__') and (
        lambda y: callable(y) and not(isclass(y) and issubclass(y,
            BaseException)))(eval(x))
]

print(documented_builtins)
</code></pre>
<p>It produces the same 72 items that @OferSadan's simple <code>i[0].islower()</code> filter produces! (+1)</p>
<p>Additions are: <code>copyright</code>, <code>credits</code>, <code>exit</code>, <code>license</code> and <code>quit</code></p>
<p>Deletions are: <code>__import__</code></p>
<p>If you eliminate the <code>not x.startswith('__')</code> test, you get back <code>__import__</code> but you also get <code>__build_class__</code> and <code>__loader__</code></p>
</div>
<span class="comment-copy">You really can't. Not all of the builtin "functions" are "functions", etc. Also, <code>dir(__builtins__)</code> is not ordered.</span>
<span class="comment-copy">@AnttiHaapala Actually <code>dir()</code> sorts the list alphabetically.</span>
<span class="comment-copy">yes,only 42 real builtin functions. @AnttiHaapala</span>
<span class="comment-copy">Tested, find a interesting comprehension: b = [ i for in in dir(<b>builtins</b>) if type(eval(i)) == type(eval)]</span>
<span class="comment-copy">@DFK interesting, that gives the exact same result as my first example</span>
