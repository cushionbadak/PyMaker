<div class="post-text" itemprop="text">
<p>I'm interested in functional programming with python and am working through Mary Rose Cook's blog post <em><a href="https://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming" rel="nofollow noreferrer">A practical introduction to functional programming</a></em>.</p>
<p>Apparently, it was written in python 2 as this:</p>
<pre><code>name_lengths = map(len, ["Mary", "Isla", "Sam"])

print name_lengths
# =&gt; [4, 4, 3]
</code></pre>
<p>in Python 3 yields this:</p>
<pre><code>&lt;map object at 0x100b87a20&gt;
</code></pre>
<p>I have two questions:  </p>
<ol>
<li>Why is this is so?</li>
<li>Other than <a href="https://stackoverflow.com/questions/42310335/map-in-python2-vs-python3">converting the map object to a list and then use numpy</a>, are there any other solutions?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>As documented, in the <a href="http://python3porting.com/differences.html#map" rel="nofollow noreferrer">migration guide</a>, </p>
<blockquote>
<p>In Python 2 map() returns a list while in Python 3 it returns an iterator.</p>
</blockquote>
<p><a href="https://docs.python.org/2/library/functions.html#map" rel="nofollow noreferrer">Python 2</a>:</p>
<blockquote>
<p>Apply function to every item of iterable and return a <strong>list</strong> of the results.</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">Python 3</a>:</p>
<blockquote>
<p>Return an iterator that applies function to every item of iterable, yielding the results. </p>
</blockquote>
<p>Python 2 always does the equivalent of <code>list(imap(...))</code>, Python 3 allows for lazy evaluation.</p>
</div>
<div class="post-text" itemprop="text">
<p>To supplement @dhke's excellent answer (this is too long for a comment) think of it this way. You want to perform multiple transformations on a list by combining <code>map</code>, <code>filter</code>, etc. So there are two ways to think of this:</p>
<ol>
<li>Apply the first transformation to the entire list, then the second, etc.</li>
<li>Apply all the transformations to the first element of the list, then the second, etc.</li>
</ol>
<p>The python3 way allows for either, whereas the second cannot be written as succinctly in python 2: you would have to explicitly iterate the list with a <code>for</code> loop and build up a new list of the results.</p>
</div>
