<div class="post-text" itemprop="text">
<p>Say I have a custom class:</p>
<pre><code>class MyClass():
    pass
</code></pre>
<p>and I want to test if this is an instance of MyClass. Can this be accomplished without the ugly mess of converting to a string?</p>
<pre><code>str(type(MyClass())) == "&lt;class '__main__.MyClass'&gt;"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Can this be accomplished without the ugly mess of converting to a string?</p>
</blockquote>
<p>Yes. Use the built-in function <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance</code></a>. From the docs:</p>
<blockquote>
<p>Return true if the object argument is an instance of the classinfo argument, or of a (direct, indirect or virtual) subclass thereof. If object is not an object of the given type, the function always returns false.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; class MyClass():
...     pass
... 
&gt;&gt;&gt; isinstance(MyClass(), MyClass)
True
</code></pre>
<p>You could also do this using <code>type</code> this way:</p>
<pre><code>&gt;&gt;&gt; type(MyClass) == type(MyClass)
True
</code></pre>
<p>But this is not recommend because <code>type</code> fails to take subclasses into account. <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer">From the documentation for <code>type</code></a>:</p>
<blockquote>
<p>The <code>isinstance()</code> built-in function is recommended for testing the type of an object, because it takes subclasses into account.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>__class__.__name__</code> on the instance, like this:</p>
<pre><code>&gt;&gt;&gt; class MyClass():
...    pass
...
&gt;&gt;&gt; i = MyClass()
&gt;&gt;&gt; i.__class__.__name__
'MyClass'
</code></pre>
<p>Or, <code>isinstance</code> if you have access to the parent class:</p>
<pre><code>&gt;&gt;&gt; isinstance(i, MyClass)
True
</code></pre>
<p>As any object of a class is also an instance of any parent classes, <code>isinstance</code> will return <code>True</code> for all parents as well:</p>
<pre><code>&gt;&gt;&gt; class MyOtherClass(MyClass):
...    pass
...
&gt;&gt;&gt; q = MyOtherClass()
&gt;&gt;&gt; isinstance(q, MyClass)
True
&gt;&gt;&gt; isinstance(q, MyOtherClass)
True
&gt;&gt;&gt; isinstance(q, object)
True
</code></pre>
<p>However:</p>
<pre><code>&gt;&gt;&gt; q.__class__.__name__
'MyOtherClass'
</code></pre>
</div>
<span class="comment-copy">You mean like <code>isinstance(MyClass(), MyClass) #True</code>? Note: <code>type(MyClass()) == MyClass</code> also works but isn't recommended.</span>
<span class="comment-copy">That's actually not true.</span>
<span class="comment-copy">I was looking for an answer which resembled the above because it could also be used as <code>type(MyClass()) in [class1, class2]</code>.</span>
<span class="comment-copy">You can still use as you can provide multiple types in the second argument, e.g. <code>isinstance(MyClass(), (MyClass, OtherClass)) == True</code></span>
<span class="comment-copy">Or... in this case... <code>not</code> recommended.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Ah, I see what you did there ;-) (That is of course assuming you were trying to make a joke. If that wasn't the case and you were trying to inform me of a serious error in my answer then just ignore this whole comment. I seem to have a very hard time telling when somebody is joking).</span>
<span class="comment-copy">Yes, there are no problems with your post, that's why I upvoted it. :p</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Okay, thanks. Sorry about that tangent. For some weird reason I have an inherent fear of embarrassing myself by answering playfully to a serious comment. I really don't know why :|</span>
<span class="comment-copy">OP wouldn't be able to create <code>i</code> without access to the class.</span>
