<div class="post-text" itemprop="text">
<p>I have a python program which takes several minutes to finish. I have some debugging code which is printed only when a variable is set. the variable is set through command line or environment variable in my current implementation. I want to enable/disable debugging on the fly when program is executing. </p>
<p>For example, consider following code: </p>
<pre><code>import time
import os
debugging=False
if "DEBUG" in os.environ:
   debugging = True
def debug():
   if debugging:
      print("debug statement");
def enable_debugging():
   global debugging
   debugging = True
def disable_debugging():
   global debugging
   debugging = False
print("1")
debug()
time.sleep(20)
print("2")
debug()
</code></pre>
<p>So while the program is executing with debugging off, how can I dynamically enable debugging while the program is executing? In other words, how can I execute function <code>enable_debugging</code> (maybe in a separate thread), when a particular string is inputted? </p>
</div>
<div class="post-text" itemprop="text">
<p>After some experiments using thread module, following code works for me. 
A listener thread keeps listening to the stdin.</p>
<pre><code>import time
import os
import thread
import sys
debugging=False
def check_input():
   print("Starting listener thread.")
   while True:
      _in = raw_input()
      print("received input: " + _in)
      if _in.lower() == "debug":
         enable_debugging()
thread.start_new_thread (check_input,())

if "DEBUG" in os.environ:
   debugging = True
def debug():
   if debugging:
      print("debug statement");
def enable_debugging():
   global debugging
   print("enabling debugging")
   debugging = True
def disable_debugging():
   global debugging
   debugging = False
print("1")
debug()
time.sleep(20)
print("2")
debug()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One approach can be to read the value from a file at regular interval. </p>
<p>And update that file when you want debugging on or off. </p>
</div>
<span class="comment-copy">Have a look at the <a href="https://docs.python.org/3/library/threading.html" rel="nofollow noreferrer">threading module.</a></span>
<span class="comment-copy">Did some experiments and found a solution. Thanks!</span>
