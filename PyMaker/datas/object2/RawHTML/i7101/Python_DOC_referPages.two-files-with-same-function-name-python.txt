<div class="post-text" itemprop="text">
<p>My question is about how computer chooses function to run when there are two same named functions from two modules. One of the modules is imported.</p>
<p>This is an example from Pythonschool.</p>
<p>I have a file called crops.py:</p>
<pre><code>from wheat_class import *
from potato_class import *

#test program to select a crop and manage the crop

def display_menu():
    print()
    print("Which crop would you like to create?")
    print()
    print("1. Potato")
    print("2. Wheat")
    print()
    print("Please select an option from the above menu")

def select_option():
    valid_option = False
    while not valid_option:
        try:
            choice = int(input("Option selected: "))
            if choice in (1,2):
                valid_option = True
            else:
                print("Please enter a valid option")
        except ValueError:
            print("Please enter a valid option")
    return choice

def create_crop():
    display_menu()
    choice = select_option()
    if choice == 1:
        new_crop = Potato()
    elif choice == 2:
        new_crop = Wheat()
    return new_crop

def main():
    new_crop = create_crop()
    manage_crop(new_crop)

if __name__ == "__main__":
    main()
</code></pre>
<p>wheat_class and potato_class are children of class called Crop.
Crop class is defined in crop_class.py:</p>
<pre><code>class Crop:
    """A generic food crop"""

    #constructor = runs automatically when instantiating
    def __init__(self,growth_rate,light_need,water_need):
        #set the attributes
        #if underscore in front of name, private attributes

        self._growth = 0
        self._days_growing = 0
        self._growth_rate = growth_rate
        self._light_need = light_need
        self._water_need = water_need
        self._status = "Seed"
        self._type = "Generic"

    def needs(self):
        some code

    def report(self):
        some code

    def _update_status(self):
        #code for updating status of crop

    def grow(self,light,water):
        #code increasing growth value

def auto_grow(crop,days):
    some code

def manual_grow(crop):
    some code

def display_menu():
    print("1. Grow manually over 1 day")
    print("2. Grow automatically over 30 days")
    print("3. Report status")
    print("0. Exit test program")
    print()
    print("Please select an option from the above menu")

def get_menu_choice():
    option_valid = False
    while not option_valid:
        try:
            choice = int(input("Option Selected: "))
            if 0 &lt;= choice &lt;= 3:
                option_valid = Tsame furue
            else:
                print("Value entered not valid - please enter a value between 0 and 3")
        except ValueError:
            print("Value entered not valid - please enter a value between 0 and 3")
    return choice

def manage_crop(crop):
    print("This is the crop management program")
    print()
    noexit = True
    while noexit:
        display_menu()
        option = get_menu_choice()
        if option == 1:
            manual_grow(crop)
        elif option == 2:
            auto_grow(crop,30)
        elif option == 3:
            print(crop.report())
            print()
        elif option == 0:
            noexit = False
            print()
</code></pre>
<p>My question is about the function display_menu().
As seen, the function is present in both crops.py and crop_class.py.
When the main function in crops.py is run, the display_menu() from crops.py is run for 
<code>new_crop = create_crop()</code>
while display_menu() from crop_class.py is run for
<code>manage_crop(new_crop)</code>.</p>
<p>I was confused because both functions are not attributed to particular class. The display_menu() in crop_class.py is indented in a way such that it is not part of Crop class.
Thus, I am confused on how the computer choose which code to run. A run-down on the rules for this would be really helpful.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you <code>import</code> a module in Python using <code>*</code>, you include access to all classes and methods in the module. </p>
<p>For <code>manage_crop</code> and <code>create_crop</code>, the <code>crops.py</code> file is able to access the methods from <code>crop_class.py</code> as it has been imported (indirectly through <code>wheat_class</code> and/or <code>potato_class</code>). </p>
<p>Hope that helps!</p>
<p>Have a look at the <a href="https://docs.python.org/3/reference/import.html" rel="nofollow noreferrer">import</a> and <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">modules</a> documentation for more information. </p>
</div>
<span class="comment-copy">Thank you. Unfortunately I'm still confused because if <code>crops.py</code> can access <code>display_menu()</code> in <code>crop_class.py</code>, then how come <code>create_crop()</code> uses <code>display_menu()</code> in <code>crop.py</code>? I'm reading the docs for now.</span>
<span class="comment-copy"><code>crops.py</code> can access functions in <code>crop_class.py</code> because it was indirectly imported as per the answer. <code>crop_class.py</code> does not access <code>crops.py</code>. The menu might be <i>crop</i> specific, thus why <code>display_menu</code> is in the <code>crop_class.py</code> file</span>
<span class="comment-copy">Yes, from fiddling around I think running <code>manage_crop</code> in <code>crop_class.py</code> causes function in that module to be used.</span>
