<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2612802/how-to-clone-or-copy-a-list">How to clone or copy a list?</a>
<span class="question-originals-answer-count">
                    20 answers
                </span>
</li>
</ul>
</div>
<p>So this is basically how the code works that I'm using.</p>
<pre><code>global Gvar
Gvar = ["Hello"]

def someFunction():
    Lvar = Gvar
    Lvar.append("World")
    print(Lvar)
    print(Gvar)

someFunction()
</code></pre>
<p>This outputs "Hello World" twice. How can I prevent the change of the global variable when I change the local?</p>
<p>Thanks in advance, I hope someone can help me out.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is the following line:</p>
<pre><code>Lvar = Gvar
</code></pre>
<p>Since <code>Gvar</code> is a list and therefore a complex datatype, Python won't copy the value but instead references to the variable. So whether you modify <code>Lvar</code> or <code>Gvar</code> won't make a difference at this point. Instead, you probably want to copy the values which you can achieve in different ways, e.g.:</p>
<pre><code>Lvar = Gvar[:]
</code></pre>
<p>Alternatively, you can use the <a href="https://docs.python.org/3/library/copy.html" rel="nofollow noreferrer">copy module</a>. Check out the <a href="https://docs.python.org/3/faq/programming.html#how-do-i-copy-an-object-in-python" rel="nofollow noreferrer">Python FAQs</a> for more information on this. </p>
<hr/>
<p>For completion, this is how your modified code would look:</p>
<pre><code>global Gvar
Gvar = ["Hello"]

def someFunction():
    Lvar = Gvar[:]
    Lvar.append("World")
    print(Lvar)
    print(Gvar)

someFunction()
</code></pre>
<p>As a side note, variable names in Python should be lower-case - upper-case is typically used for class definitions only.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>shallow copy</code> to do htis task :</p>
<pre><code>global Gvar
Gvar = ["Hello"]

def someFunction():
    Lvar = Gvar.copy()

    Lvar.append("World")
    print(Lvar)
    print(Gvar)

someFunction()
</code></pre>
<p>Output :</p>
<pre><code>['Hello', 'World']
['Hello']
</code></pre>
<p>You also use <code>deepcopy</code> to do this task :</p>
<pre><code>import copy
global Gvar
Gvar = ["Hello"]

def someFunction():
    Lvar = copy.deepcopy(Gvar)
    Lvar.append("World")
    print(Lvar)
    print(Gvar)

someFunction()
</code></pre>
<p>Output :</p>
<pre><code>['Hello', 'World']
['Hello']
</code></pre>
<p><strong>N.B :</strong> if you use <code>Python 2.7.6</code> then use <code>print Lvar</code> instead of <code>print(Lvar)</code> and <code>print Gvar</code> instead of <code>print(Gvar)</code>.</p>
</div>
<span class="comment-copy">Make a copy of the list when assigning it to the local variable.</span>
<span class="comment-copy">You may want to read up on how Python variables and assignment work: <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">nedbatchelder.com/text/names.html</a></span>
<span class="comment-copy">Wow quick reply. I think that will help me out. Thanks a lot :)</span>
