<div class="post-text" itemprop="text">
<p>Short and simple. I've got a huge list of date-times like this as strings:</p>
<pre><code>Jun 1 2005  1:33PM
Aug 28 1999 12:00AM
</code></pre>
<p>I'm going to be shoving these back into proper datetime fields in a database so I need to magic them into real datetime objects. </p>
<p>Any help (even if it's just a kick in the right direction) would be appreciated.</p>
<p>Edit: This is going through Django's ORM so I can't use SQL to do the conversion on insert.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>datetime.strptime</code> is the main routine for parsing strings into datetimes. It can handle all sorts of formats, with the format determined by a format string you give it:</p>
<pre><code>from datetime import datetime

datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')
</code></pre>
<p>The resulting <code>datetime</code> object is timezone-naive.</p>
<p>Links:</p>
<ul>
<li><p>Python documentation for <code>strptime</code>: <a href="https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime" rel="noreferrer" title="datetime.datetime.strptime">Python 2</a>, <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="noreferrer">Python 3</a></p></li>
<li><p>Python documentation for <code>strptime</code>/<code>strftime</code> format strings: <a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer" title="strftime-and-strptime-behavior">Python 2</a>, <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer">Python 3</a></p></li>
<li><p><a href="http://strftime.org/" rel="noreferrer">strftime.org</a> is also a really nice reference for strftime</p></li>
</ul>
<p>Notes:</p>
<ul>
<li><code>strptime</code> = "string parse time"</li>
<li><code>strftime</code> = "string format time"</li>
<li>Pronounce it out loud today &amp; you won't have to search for it again in 6 months.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Use the third party <a href="http://labix.org/python-dateutil" rel="noreferrer">dateutil</a> library:</p>
<pre><code>from dateutil import parser
dt = parser.parse("Aug 28 1999 12:00AM")
</code></pre>
<p>It can handle most date formats, including the one you need to parse. It's more convenient than strptime as it can guess the correct format most of the time.</p>
<p>It very useful for writing tests, where readability is more important than performance.</p>
<p>You can install it with:</p>
<pre><code>pip install python-dateutil
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Check out <a href="http://docs.python.org/3/library/time.html#time.strptime" rel="noreferrer">strptime</a> in the <a href="http://docs.python.org/3/library/time.html" rel="noreferrer">time</a> module.  It is the inverse of <a href="http://docs.python.org/3/library/time.html#time.strftime" rel="noreferrer">strftime</a>.</p>
<pre><code>$ python
&gt;&gt;&gt; import time
&gt;&gt;&gt; time.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')
time.struct_time(tm_year=2005, tm_mon=6, tm_mday=1,
                 tm_hour=13, tm_min=33, tm_sec=0,
                 tm_wday=2, tm_yday=152, tm_isdst=-1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have put together a project that can convert some really neat expressions. Check out <strong><a href="http://github.com/stevepeak/timestring" rel="noreferrer">timestring</a></strong>. </p>
<h2>Here are some examples below:</h2>
<code>pip install timestring</code>
<pre><code>&gt;&gt;&gt; import timestring
&gt;&gt;&gt; timestring.Date('monday, aug 15th 2015 at 8:40 pm')
&lt;timestring.Date 2015-08-15 20:40:00 4491909392&gt;
&gt;&gt;&gt; timestring.Date('monday, aug 15th 2015 at 8:40 pm').date
datetime.datetime(2015, 8, 15, 20, 40)
&gt;&gt;&gt; timestring.Range('next week')
&lt;timestring.Range From 03/10/14 00:00:00 to 03/03/14 00:00:00 4496004880&gt;
&gt;&gt;&gt; (timestring.Range('next week').start.date, timestring.Range('next week').end.date)
(datetime.datetime(2014, 3, 10, 0, 0), datetime.datetime(2014, 3, 14, 0, 0))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Remember this and you didn't need to get confused in datetime conversion again.</p>
<p>String to datetime object = <code>strptime</code></p>
<p>datetime object to other formats = <code>strftime</code></p>
<p><code>Jun 1 2005  1:33PM</code></p>
<p>is equals to</p>
<p><code>%b %d %Y %I:%M%p</code></p>
<blockquote>
<p>%b    Month as locale’s abbreviated name(Jun)</p>
<p>%d    Day of the month as a zero-padded decimal number(1)</p>
<p>%Y    Year with century as a decimal number(2015)</p>
<p>%I    Hour (12-hour clock) as a zero-padded decimal number(01)</p>
<p>%M    Minute as a zero-padded decimal number(33)</p>
<p>%p    Locale’s equivalent of either AM or PM(PM)</p>
</blockquote>
<p>so you need strptime i-e converting <code>string</code> to </p>
<pre><code>&gt;&gt;&gt; dates = []
&gt;&gt;&gt; dates.append('Jun 1 2005  1:33PM')
&gt;&gt;&gt; dates.append('Aug 28 1999 12:00AM')
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; for d in dates:
...     date = datetime.strptime(d, '%b %d %Y %I:%M%p')
...     print type(date)
...     print date
... 
</code></pre>
<p>Output</p>
<pre><code>&lt;type 'datetime.datetime'&gt;
2005-06-01 13:33:00
&lt;type 'datetime.datetime'&gt;
1999-08-28 00:00:00
</code></pre>
<p>What if you have different format of dates you can use panda or dateutil.parse</p>
<pre><code>&gt;&gt;&gt; import dateutil
&gt;&gt;&gt; dates = []
&gt;&gt;&gt; dates.append('12 1 2017')
&gt;&gt;&gt; dates.append('1 1 2017')
&gt;&gt;&gt; dates.append('1 12 2017')
&gt;&gt;&gt; dates.append('June 1 2017 1:30:00AM')
&gt;&gt;&gt; [parser.parse(x) for x in dates]
</code></pre>
<p>OutPut</p>
<pre><code>[datetime.datetime(2017, 12, 1, 0, 0), datetime.datetime(2017, 1, 1, 0, 0), datetime.datetime(2017, 1, 12, 0, 0), datetime.datetime(2017, 6, 1, 1, 30)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Many timestamps have an implied timezone. To ensure that your code will work in every timezone, you should use UTC internally and attach a timezone each time a foreign object enters the system.</p>
<p>Python 3.2+:</p>
<pre><code>&gt;&gt;&gt; datetime.datetime.strptime(
...     "March 5, 2014, 20:13:50", "%B %d, %Y, %H:%M:%S"
... ).replace(tzinfo=datetime.timezone(datetime.timedelta(hours=-3)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something that isn't mentioned here and is useful: adding a suffix to the day. I decoupled the suffix logic so you can use it for any number you like, not just dates.</p>
<pre><code>import time

def num_suffix(n):
    '''
    Returns the suffix for any given int
    '''
    suf = ('th','st', 'nd', 'rd')
    n = abs(n) # wise guy
    tens = int(str(n)[-2:])
    units = n % 10
    if tens &gt; 10 and tens &lt; 20:
        return suf[0] # teens with 'th'
    elif units &lt;= 3:
        return suf[units]
    else:
        return suf[0] # 'th'

def day_suffix(t):
    '''
    Returns the suffix of the given struct_time day
    '''
    return num_suffix(t.tm_mday)

# Examples
print num_suffix(123)
print num_suffix(3431)
print num_suffix(1234)
print ''
print day_suffix(time.strptime("1 Dec 00", "%d %b %y"))
print day_suffix(time.strptime("2 Nov 01", "%d %b %y"))
print day_suffix(time.strptime("3 Oct 02", "%d %b %y"))
print day_suffix(time.strptime("4 Sep 03", "%d %b %y"))
print day_suffix(time.strptime("13 Nov 90", "%d %b %y"))
print day_suffix(time.strptime("14 Oct 10", "%d %b %y"))​​​​​​​
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here are two solutions using Pandas to convert dates formatted as strings into datetime.date objects.</p>
<pre><code>import pandas as pd

dates = ['2015-12-25', '2015-12-26']

# 1) Use a list comprehension.
&gt;&gt;&gt; [d.date() for d in pd.to_datetime(dates)]
[datetime.date(2015, 12, 25), datetime.date(2015, 12, 26)]

# 2) Convert the dates to a DatetimeIndex and extract the python dates.
&gt;&gt;&gt; pd.DatetimeIndex(dates).date.tolist()
[datetime.date(2015, 12, 25), datetime.date(2015, 12, 26)]
</code></pre>
<p><strong>Timings</strong></p>
<pre><code>dates = pd.DatetimeIndex(start='2000-1-1', end='2010-1-1', freq='d').date.tolist()

&gt;&gt;&gt; %timeit [d.date() for d in pd.to_datetime(dates)]
# 100 loops, best of 3: 3.11 ms per loop

&gt;&gt;&gt; %timeit pd.DatetimeIndex(dates).date.tolist()
# 100 loops, best of 3: 6.85 ms per loop
</code></pre>
<p>And here is how to convert the OP's original date-time examples:</p>
<pre><code>datetimes = ['Jun 1 2005  1:33PM', 'Aug 28 1999 12:00AM']

&gt;&gt;&gt; pd.to_datetime(datetimes).to_pydatetime().tolist()
[datetime.datetime(2005, 6, 1, 13, 33), 
 datetime.datetime(1999, 8, 28, 0, 0)]
</code></pre>
<p>There are many options for converting from the strings to Pandas Timestamps using <code>to_datetime</code>, so check the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html" rel="noreferrer">docs</a> if you need anything special.</p>
<p>Likewise, Timestamps have many <a href="http://pandas.pydata.org/pandas-docs/stable/api.html#datetimelike-properties" rel="noreferrer">properties and methods</a> that can be accessed in addition to <code>.date</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I personally like the solution using the <code>parser</code> module, which is the second Answer to this question and is beautiful, as you don't have to construct any string literals to get it working. <strong>BUT</strong>, one downside is that it is <strong>90% slower</strong> than the accepted answer with <code>strptime</code>.</p>
<pre><code>from dateutil import parser
from datetime import datetime
import timeit

def dt():
    dt = parser.parse("Jun 1 2005  1:33PM")
def strptime():
    datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')

print(timeit.timeit(stmt=dt, number=10**5))
print(timeit.timeit(stmt=strptime, number=10**5))
&gt;10.70296801342902
&gt;1.3627995655316933
</code></pre>
<p>As long as you are not doing this <em>a million</em> times over and over again, I still  think the <code>parser</code> method is more convenient and will handle most of the time formats automatically.</p>
</div>
<div class="post-text" itemprop="text">
<p>Django Timezone aware datetime object example.</p>
<pre><code>import datetime
from django.utils.timezone import get_current_timezone
tz = get_current_timezone()

format = '%b %d %Y %I:%M%p'
date_object = datetime.datetime.strptime('Jun 1 2005  1:33PM', format)
date_obj = tz.localize(date_object)
</code></pre>
<p>This conversion is very important for Django and Python when you have <code>USE_TZ = True</code>:</p>
<pre><code>RuntimeWarning: DateTimeField MyModel.created received a naive datetime (2016-03-04 00:00:00) while time zone support is active.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>In [34]: import datetime

In [35]: _now = datetime.datetime.now()

In [36]: _now
Out[36]: datetime.datetime(2016, 1, 19, 9, 47, 0, 432000)

In [37]: print _now
2016-01-19 09:47:00.432000

In [38]: _parsed = datetime.datetime.strptime(str(_now),"%Y-%m-%d %H:%M:%S.%f")

In [39]: _parsed
Out[39]: datetime.datetime(2016, 1, 19, 9, 47, 0, 432000)

In [40]: assert _now == _parsed
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>for unix / mysql format 2018-10-15 20:59:29</strong></p>
<pre><code>from datetime import datetime

datetime_object = datetime.strptime('2018-10-15 20:59:29', '%Y-%m-%d %H:%M:%S')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create a small utility function like:</p>
<pre><code>def date(datestr="", format="%Y-%m-%d"):
    from datetime import datetime
    if not datestr:
        return datetime.today().date()
    return datetime.strptime(datestr, format).date()
</code></pre>
<p>This is versatile enough:</p>
<ul>
<li>If you don't pass any arguments it will return today's date.</li>
<li>There's a date format as default that you can override.</li>
<li>You can easily modify it to return a datetime.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/2/library/datetime.html" rel="nofollow noreferrer">datetime</a> Python module is good for getting date time and converting date time formats.</p>
<pre><code>import datetime

new_date_format1 = datetime.datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')
new_date_format2 = datetime.datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p').strftime('%Y/%m/%d %I:%M%p')
print new_date_format1
print new_date_format2
</code></pre>
<p>Output:</p>
<pre><code>2005-06-01 13:33:00
2005/06/01 01:33PM
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>arrow</strong> offers many useful functions for dates and times. This bit of code provides an answer to the question and shows that arrow is also capable of formatting dates easily and displaying information for other locales.</p>
<pre><code>&gt;&gt;&gt; import arrow
&gt;&gt;&gt; dateStrings = [ 'Jun 1  2005 1:33PM', 'Aug 28 1999 12:00AM' ]
&gt;&gt;&gt; for dateString in dateStrings:
...     dateString
...     arrow.get(dateString.replace('  ',' '), 'MMM D YYYY H:mmA').datetime
...     arrow.get(dateString.replace('  ',' '), 'MMM D YYYY H:mmA').format('ddd, Do MMM YYYY HH:mm')
...     arrow.get(dateString.replace('  ',' '), 'MMM D YYYY H:mmA').humanize(locale='de')
...
'Jun 1  2005 1:33PM'
datetime.datetime(2005, 6, 1, 13, 33, tzinfo=tzutc())
'Wed, 1st Jun 2005 13:33'
'vor 11 Jahren'
'Aug 28 1999 12:00AM'
datetime.datetime(1999, 8, 28, 0, 0, tzinfo=tzutc())
'Sat, 28th Aug 1999 00:00'
'vor 17 Jahren'
</code></pre>
<p>See <a href="http://arrow.readthedocs.io/en/latest/" rel="nofollow noreferrer">http://arrow.readthedocs.io/en/latest/</a> for more.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python &gt;= 3.7.0,</p>
<p>to convert <strong>YYYY-MM-DD string to datetime object</strong>, <code>datetime.fromisoformat</code> could be used.</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime

&gt;&gt;&gt; date_string = "2012-12-12 10:10:10"
&gt;&gt;&gt; print (datetime.fromisoformat(date_string))
&gt;&gt;&gt; 2012-12-12 10:10:10
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://github.com/ralphavalon/easy_date" rel="noreferrer">easy_date</a> to make it easy:</p>
<pre><code>import date_converter
converted_date = date_converter.string_to_datetime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you want only date format then you can manually convert it by passing your individual fields like:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; date = datetime.date(int('2017'),int('12'),int('21'))
&gt;&gt;&gt; date
datetime.date(2017, 12, 21)
&gt;&gt;&gt; type(date)
&lt;type 'datetime.date'&gt;
</code></pre>
<p>You can pass your split string values to convert it into date type like:</p>
<pre><code>selected_month_rec = '2017-09-01'
date_formate = datetime.date(int(selected_month_rec.split('-')[0]),int(selected_month_rec.split('-')[1]),int(selected_month_rec.split('-')[2]))
</code></pre>
<p>You will get the resulting value in date format.</p>
</div>
<div class="post-text" itemprop="text">
<p>It would do the helpful for converting string to datetime and also with time zone</p>
<pre><code>def convert_string_to_time(date_string, timezone):
    from datetime import datetime
    import pytz
    date_time_obj = datetime.strptime(date_string[:26], '%Y-%m-%d %H:%M:%S.%f')
    date_time_obj_timezone = pytz.timezone(timezone).localize(date_time_obj)

    return date_time_obj_timezone

date = '2018-08-14 13:09:24.543953+00:00'
TIME_ZONE = 'UTC'
date_time_obj_timezone = convert_string_to_time(date, TIME_ZONE)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>emp = pd.read_csv("C:\\py\\programs\\pandas_2\\pandas\\employees.csv")
emp.info()
</code></pre>
<p>it shows "Start Date Time" Column and "Last Login Time" both are "object = strings" in data-frame</p>
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 1000 entries, 0 to 999
Data columns (total 8 columns):
First Name           933 non-null object
Gender               855 non-null object
</code></pre>
<blockquote>
<pre><code>Start Date           1000 non-null object

Last Login Time      1000 non-null object
</code></pre>
</blockquote>
<pre><code>Salary               1000 non-null int64
Bonus %              1000 non-null float64
Senior Management    933 non-null object
Team                 957 non-null object
dtypes: float64(1), int64(1), object(6)
memory usage: 62.6+ KB
</code></pre>
<p>By using <code>parse_dates</code> option in <code>read_csv</code> mention you can convert your string datetime into pandas datetime format.</p>
<pre><code>emp = pd.read_csv("C:\\py\\programs\\pandas_2\\pandas\\employees.csv", parse_dates=["Start Date", "Last Login Time"])
emp.info()


&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 1000 entries, 0 to 999
Data columns (total 8 columns):
First Name           933 non-null object
Gender               855 non-null object
</code></pre>
<blockquote>
<pre><code>Start Date           1000 non-null datetime64[ns]
Last Login Time      1000 non-null datetime64[ns]
</code></pre>
</blockquote>
<pre><code>Salary               1000 non-null int64
Bonus %              1000 non-null float64
Senior Management    933 non-null object
Team                 957 non-null object
dtypes: datetime64[ns](2), float64(1), int64(1), object(4)
memory usage: 62.6+ KB
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://stackoverflow.com/questions/6615533/is-there-a-python-equivalent-to-cs-datetime-tryparse/47876446#47876446">my answer</a>.</p>
<p>In real-world data this is a real problem: multiple, mismatched, incomplete, inconsistent and multilanguage/region date formats, often mixed freely in one dataset. It's not ok for production code to fail, let alone go exception-happy like a fox.</p>
<p>We need to try...catch multiple datetime formats fmt1,fmt2,...,fmtn and suppress/handle the exceptions (from <code>strptime()</code>) for all those that mismatch (and in particular, avoid needing a yukky n-deep indented ladder of try..catch clauses). From <a href="https://stackoverflow.com/questions/6615533/is-there-a-python-equivalent-to-cs-datetime-tryparse/47876446#47876446">my solution</a></p>
<pre><code>def try_strptime(s, fmts=['%d-%b-%y','%m/%d/%Y']):
    for fmt in fmts:
        try:
            return datetime.strptime(s, fmt)
        except:
            continue

    return None # or reraise the ValueError if no format matched, if you prefer
</code></pre>
</div>
<span class="comment-copy">for converting whole column with date-value strings ref to the option given in <a href="http://stackoverflow.com/a/36800960/4161807">another post</a></span>
<span class="comment-copy">Unless you're sure one format handles every single date-time (no '', no NaNs, no incompletes, no format mismatches, no trailing characters, timezones, microsecond timestamps, or other text...), the exception-happiness of <code>strptime()</code> will drive you nuts, unless you wrap it. See my answer, based on <a href="https://stackoverflow.com/a/24547627/202229">Or Weis answer to this</a></span>
<span class="comment-copy">why does that return a date_object and not a datetime_object?</span>
<span class="comment-copy">@User You'll have to know ahead of time to exclude that part of the format string, but if you want a <code>date</code> instead of a <code>datetime</code>, going through <code>datetime</code> handles it nicely:  <code>datetime.strptime('Jun 1 2005', '%b %d %Y').date() == date(2005, 6, 1)</code></span>
<span class="comment-copy">If you know the string represents a datetime in UTC, you can get a timezone aware <code>datetime</code> object by adding this line in Python 3: <code>from datetime import timezone; datetime_object = datetime_object.replace(tzinfo=timezone.utc)</code></span>
<span class="comment-copy">I was looking for <code>"%Y-%m-%d %H:%M:%S"</code></span>
<span class="comment-copy">I was looking for <code>"%Y-%m-%d %H:%M:%S.%f"</code>.... Seems to be a bit more than 2018 up votes now too....</span>
<span class="comment-copy">Be aware that for large data amounts this might not be the most optimal way to approach the problem. Guessing the format every single time may be horribly slow.</span>
<span class="comment-copy">This is nice but it would be nice to have a solution that is built-in rather than having to go to a third party.</span>
<span class="comment-copy">When I try to parse "32nd jan", it returns me "2032-01-06".. which is incorrect. is there any way to check whether the string is a valid date or not</span>
<span class="comment-copy">@Reef: 5 times as slow according to my quick and dirty benchmark. Not <i>so</i> horribly slow as I would expect.</span>
<span class="comment-copy">Has its own issues - like, for example, silently dropping time zone information from times: try parser.parse('15:55EST') and compare with parser.parse('15.55CST') as an example</span>
<span class="comment-copy">From what I understand, this answer only outputs time objects, not datetime objects -- which is why the answer would be buried compared to Patrick's answer.</span>
<span class="comment-copy">the answer below (by Patrick Harrington) is more correct, because time.strptime only outputs time, not datetime</span>
<span class="comment-copy">As Alexander said, this return a struct_time, not a datetime. Of course you can convert it to a datetime, but Patrick's answer is more straight forward if you want a datetime object in the end.</span>
<span class="comment-copy">@BenBlank: '%b', '%p' may fail in non-English locale.</span>
<span class="comment-copy">@hobbes3 <code>parse</code> and <code>format</code>.</span>
<span class="comment-copy">Wow. Wow. Wow. Wow.  This is so easy.  I've got a datetime string and I just want to pull out the year.  As simple as:  <code>import timestring</code> <code>timestring.Date('27 Mar 2014 12:32:29 GMT').year</code> This lib made it SO EASY!  Thank you.</span>
<span class="comment-copy">Your very welcome. I would love your comments and ideas on improving this package. Let me know, use github issues. Thanks!</span>
<span class="comment-copy">@Steve Peak timestring works great! Needed to parse article dates with scrapy and this has been converting them perfectly.</span>
<span class="comment-copy">Hi steve, the module is great. Would be nice to have a weekday string attribute as well. Otherwise not sure if you start from Monday or Sunday</span>
<span class="comment-copy">@Anake you can create an issue to request this added at <a href="http://github.com/stevepeak/timestring" rel="nofollow noreferrer">github.com/stevepeak/timestring</a> thanks!</span>
<span class="comment-copy">%S for Seconds as decimal</span>
<span class="comment-copy">Won’t <code>%b</code> break if you parse an English date on a machine that doesn’t have an English locale?</span>
<span class="comment-copy">Why do you keep the ugly and sometimes wrong (<code>mktime()</code> during DST transitions) 1st method if you know the 2nd method (<code>datetime.strptime()</code>)? If you want to avoid an exception during a leap second (the 2nd method fails) then you could use <code>calendar.timegm</code> instead: <code>(datetime(1970,1,1)+timedelta(seconds=timegm(time.strptime(..)))).replace(tzinfo=timezone(timedelta(-3)))</code></span>
<span class="comment-copy">So your point is to use <code>tz.localize</code>?</span>
<span class="comment-copy"><code>format</code> is a reserved word in python and shouldn't be used as a variable name.</span>
<span class="comment-copy">I needed a datetime string with timezone 👌</span>
<span class="comment-copy">The question said nothing about "multiple, mismatched, incomplete, inconsistent and multilanguage/region date formats" etc. This may be a real problem, but not relevant here.</span>
<span class="comment-copy">@RoG: It never said they weren't, and it implied they were: <i>"huge list... database"</i>. In most every database/logfile I've worked on (even small-size), there were multiple date formats, timezone identifiers, MM-DD etc. In production it is unacceptable to write brittle code which hardcodes in formats and crashes with exception when it doesn't get the format it expected (even returning None or '' is more acceptable). Hence a need for multiple formats. Hence this does address the question asked, and I spent a bit of time figuring out the most Pythonic way to handle errors from multiple formats.</span>
<span class="comment-copy">"huge list... database" simply implies that there are a lot of them, not that they are all different formats. It is totally acceptable to write code which reads a single format, if you know that there is a single format in the input. In this case it should crash if it is passed something that is not in the right format.</span>
