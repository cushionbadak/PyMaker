<div class="post-text" itemprop="text">
<p>I am writing a small function that turns a integer into its reciprocal in its fraction form. This is how I've defined my function so far:</p>
<pre><code>    def reciprocal (number):
      return "1/",number
</code></pre>
<p>This sort of works but the problem is that it doesn't print the answer on the screen as I'd like to because say i did <code>print reciprocal(3)</code> it would show  <code>('1/', 3)</code> on the screen instead of <code>1/3</code>. I have tried all sorts of combinations of speech marks and brackets in the code but the answer has still got extra brackets and  back-ticks around it. I am using python 2.7.10, is there any way to get rid of these? Or is there any other simple way to express an integer as its reciprocal in fraction form that would get rid of them? Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes. Because what this line is actually doing is returning a tuple: </p>
<pre><code>return "1/",number
</code></pre>
<p>If you simply print: </p>
<pre><code>type(reciprocal(3))
</code></pre>
<p>You will see the result will be <code>tuple</code>.</p>
<p>In order to keep the functionality of: </p>
<pre><code>print(reciprocal(3))
</code></pre>
<p>You would want to do something like this instead:</p>
<pre><code>return "1/{}".format(number)
</code></pre>
<p>Now, the above will actually return you a string instead of a tuple. The above is using the string format method, which you can read about <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer">here</a>. Ultimately what you are doing is creating a string that will look like 1/x, where x will be number. The way to denote the x is by using the curly braces which is then used a placeholder that will set whatever you passed to <code>format</code>. Read more in the documentation to understand how it works.</p>
<p>To help expand it, what it actually looks like when separated is this: </p>
<pre><code>s = "1/"
</code></pre>
<p>Now, you want to be able to set your argument <code>number</code>. The string object supports several methods, one of which, is <code>format</code>. So you can actually simply call it: <code>s.format()</code>. However, that won't simply work the way you want it. So, per the documentation, in order to use this <code>format</code> method, you need to set in your string where exactly you want to set your argument that you want to place in your string. This is done by using the placeholder characters <code>{}</code> to indicate this. So: </p>
<pre><code>s = "1/"
</code></pre>
<p>Will now be</p>
<pre><code>s = "1/{}".format(number)
</code></pre>
<p>We set our <code>{}</code> as the placeholder of where we want <code>number</code> to be, and we assigned <em>what</em> will be in that placeholder by passing <code>number</code> to format.</p>
<p>You can further see how now you have a string if you in fact print the <code>type</code> of the result: </p>
<pre><code>print(type(reciprocal(3)))
</code></pre>
<p>You will see it is now a <code>str</code> type. </p>
<p>As a note in Python, you can create a tuple with comma separated values: </p>
<pre><code>&gt;&gt;&gt; d = 1, 2
&gt;&gt;&gt; type(d)
&lt;class 'tuple'&gt;
</code></pre>
<p>This is exactly why your function returns the tuple, because of the fact you are returning two values simply separated by a comma. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>def reciprocal (number):
    return "1/{}".format(number)

print reciprocal(4)
print reciprocal(100)
</code></pre>
<p>Output:</p>
<pre><code>1/4

1/100
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Right now you're returning a tuple made of the string "1/" and your number because of the comma. I think what you want to do is return just a string.</p>
<p>Something like <code>return "1/" + str(number)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>if you want to print a tube, maybe you can try the 
<code>return ('1/', number)</code><br/>
<code>def reciprocal(number):
    return ('1/', number)
</code>
<code>
 print(reciprocal(4))
 In [5]: print (reciprocal(4))
         ('1/', 4)
</code></p>
</div>
<span class="comment-copy">I've explained a bunch of things in my answer that should make it clear for you, I think.</span>
<span class="comment-copy">Thank you this was really clearly explained. But I don't understand why are the <code>{}</code> curly brackets inside the <code>" "</code>speech marks not outside because won't it print the curly brackets if it is in speech marks?</span>
<span class="comment-copy">@Ruby That is how the string formatting implementation works. When you call the <code>format</code> method on your string it looks for that placeholder (The place holder is the <code>{}</code>) in order replace the arguments you pass to the <code>format</code> method.</span>
<span class="comment-copy">Thanks, and also, i know it's been mentioned a lot, but what exactly is a tuple?</span>
<span class="comment-copy">@Ruby It is a sequence like a list but is immutable. Read the doc <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">here</a> that provides solid information about it. Also, <a href="https://stackoverflow.com/questions/42034/what-is-a-tuple-useful-for">this</a> answer explains how it can be used practically.</span>
<span class="comment-copy">Thank you,this does work but I don't understand how it functions could you explain the <code>"1/{}".format</code> bit please?</span>
<span class="comment-copy">@Ruby the string format allows you to insert any value type, either string or integer, into a base string. Essentially, it is the same as <code>"1/"+str(number)</code>, but the <code>.format</code> allows you to be more precise with spacing.</span>
<span class="comment-copy">Okay thanks what about the <code>{}</code> brackets, why do you need them?</span>
<span class="comment-copy">@Ruby the curly braces are a placeholder, which will insert whatever you pass to the <code>format</code> function specifically at that position.</span>
<span class="comment-copy">Thanks. So can strings be joined by <code>,</code> commas and <code>+</code> plus symbols?</span>
<span class="comment-copy">Using <code>,</code> commas makes a tuple when used between two values outside of brackets. It's similar to a list but it cannot be modified after being created. Any <code>a,b</code> or <code>(a,b)</code> will be a tuple whereas <code>[a,b]</code> is a list. All of these keep the <code>a</code> and <code>b</code> as separate entities; it does not merge them into one string. <code>+</code> is the string concatenator; you can join any two strings with the plus symbol. If <code>a</code> and <code>b</code> are integers, though, <code>+</code> will try to add them as numbers, so they need to be turned into strings first with <code>str()</code>. In this example, <code>a</code> is <code>"1/"</code> and <code>b</code> is <code>number</code>.</span>
