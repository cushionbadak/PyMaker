<div class="post-text" itemprop="text">
<p>The following code starts a few threads and prints the result after they are all done:</p>
<pre><code>import threading

results = [None] * 5
threads = [None] * 5

def worker(i):
    results[i] = i

for i in range(5):
    threads[i] = threading.Thread(target=worker, args=(i,))
    threads[i].start()

# here I would like to use the results of the threads which are finished
# while others still run

for i in range(5):
    threads[i].join()

# here I have the results but only when all threads are done
print(results)
</code></pre>
<p>As mentioned in the code, I would like to use the results of the threads which are finished while others are still running. <strong>What is the correct way to do that?</strong></p>
<p>Should I simply start a new thread which would have a <code>while True:</code> loop and continuously check for a new entry in <code>results</code> or is there a buil-in mechanism for such operations (as part of the <code>threading.Thread</code> call which would point to a callback when the thread is done)?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're using Python 3, <a href="https://docs.python.org/3/library/concurrent.futures.html" rel="nofollow noreferrer"><code>concurrent.futures</code></a> is a better fit than <code>threading</code>:</p>
<pre><code>import concurrent.futures

results = [None] * 5

def worker(i):
    results[i] = i

with concurrent.futures.ThreadPoolExecutor(5) as pool:
    futmap = {pool.submit(worker, i): i for i in range(len(results))}
    for fut in concurrent.futures.as_completed(futmap):
        print("doing more stuff with", futmap[fut])
</code></pre>
</div>
<span class="comment-copy"><code>from multiprocessing.pool import ThreadPool</code> and you can take it from there.</span>
<span class="comment-copy">Might you enumerate upon that?</span>
<span class="comment-copy">'<a href="https://stackoverflow.com/questions/6893968/how-to-get-the-return-value-from-a-thread-in-python" title="how to get the return value from a thread in python">stackoverflow.com/questions/6893968/…</a>' may be your answer is here</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ: thanks, I will try that way. I was hoping that there would be a direct callback mechanism (which I did not find in the docs)</span>
<span class="comment-copy">@Kallz: I know how to get the result of a thread (my code is adapted from the second answer to the link you point to). As mentioned before, I was looking for a callback mechanism, if such one exists.</span>
<span class="comment-copy"><i>The concurrent.futures module provides a high-level interface for asynchronously executing callables</i> - excellent, this is exactly what I was looking for, thank you!</span>
