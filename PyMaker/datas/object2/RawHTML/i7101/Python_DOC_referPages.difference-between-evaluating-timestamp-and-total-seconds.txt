<div class="post-text" itemprop="text">
<p>When I evaluate the number of seconds between two dates using two different methods (either using timestamp() or total_seconds()) in datetime in python, I get different results. Why is this? Or what am I doing wrong? Here is an example of what I mean.</p>
<pre><code>t1=dt.datetime(1970,6,12,0,0,0)
t2=dt.datetime(1970,1,1,0,0,0)

print(t1.timestamp()-t2.timestamp())
print((t1-t2).total_seconds())
</code></pre>
<p>The answers I get are:
13993200.0
13996800.0</p>
</div>
<div class="post-text" itemprop="text">
<p>The discrepancy is caused by Daylight Savings Time. If one of your dates falls in your timezone's DST range, and the other does not, you end up with an off-by-one hour error in your calculation.</p>
<p>From 1966 to 1973, <a href="https://www.timeanddate.com/time/us/daylight-saving-usa.html" rel="nofollow noreferrer">DST in the United States ran from the last Sunday in April to the last Sunday in October</a>, which explains <a href="https://stackoverflow.com/a/45602760/364696">@JoshuaRLi's findings</a>.</p>
<p>It looks like, when subtracting two dates, it's not paying attention to DST discrepancies; <code>t1 - t2</code> produces <code>datetime.timedelta(162)</code>, a difference of 162 days, even though technically, the difference in hours would be 162 * 24 - 1 hours (the - 1 accounting for the DST skip). <code>timestamp</code> is handling this (both timestamps are relative to UTC, so the DST timestamp correctly shows as one hour earlier, because there was an hour skipped to produce it).</p>
</div>
<div class="post-text" itemprop="text">
<h1>Daylight Savings Time</h1>
<p>The subtraction magic method of two <code>dt.datetime</code> objects creates a <code>dt.timedelta</code> that is not concerned with Daylight Savings Time.</p>
<p>The epoch timestamp conversion function takes Daylight Savings Time into account, which explains the 3600 second (1 hour) difference.</p>
<p>See my detective post below. This was fun!</p>
<hr/>
<p>Whipped up a quick script, since this seemed interesting to me.</p>
<p>This was run on both 3.5.4 and 3.6.2 with the same output.</p>
<pre><code>import datetime as dt

t1 = dt.datetime(1970,1,1,0,0,0)
t2 = dt.datetime(1970,1,1,0,0,0)

for _ in range(365):
    try:
        d1 = t1.timestamp() - t2.timestamp()
        d2 = (t1-t2).total_seconds()
        assert d1 == d2
    except AssertionError as e:
        print(t1, d2-d1)
    t1 += dt.timedelta(days=1)
</code></pre>
<p>I got this output. Looks like it starts on 4/27, and the difference is consistently an hour, meaning that the jump only happens once (actually never mind, keep reading)</p>
<pre><code>1970-04-27 00:00:00 3600.0
1970-04-28 00:00:00 3600.0
1970-04-29 00:00:00 3600.0
...
</code></pre>
<p>I wrote a second script:</p>
<pre><code>import datetime as dt

t = dt.datetime(1970,1,1,0,0,0)
sid = 60*60*24

while 1:
    prev = t
    t += dt.timedelta(days=1)
    diff1 = (t-prev).total_seconds()
    diff2 = t.timestamp() - prev.timestamp()
    try:
        assert diff1 == diff2 == sid
    except AssertionError:
        print(diff1, diff2, t, prev)
        exit(1)
</code></pre>
<p>Output:</p>
<pre><code>86400.0 82800.0 1970-04-27 00:00:00 1970-04-26 00:00:00
</code></pre>
<p>When you remove the <code>exit(1)</code>, the output becomes interesting:</p>
<pre><code>86400.0 82800.0 1970-04-27 00:00:00 1970-04-26 00:00:00
86400.0 90000.0 1970-10-26 00:00:00 1970-10-25 00:00:00
86400.0 82800.0 1971-04-26 00:00:00 1971-04-25 00:00:00
86400.0 90000.0 1971-11-01 00:00:00 1971-10-31 00:00:00
86400.0 82800.0 1972-05-01 00:00:00 1972-04-30 00:00:00
86400.0 90000.0 1972-10-30 00:00:00 1972-10-29 00:00:00
86400.0 82800.0 1973-04-30 00:00:00 1973-04-29 00:00:00
86400.0 90000.0 1973-10-29 00:00:00 1973-10-28 00:00:00
86400.0 82800.0 1974-01-07 00:00:00 1974-01-06 00:00:00
86400.0 90000.0 1974-10-28 00:00:00 1974-10-27 00:00:00
86400.0 82800.0 1975-02-24 00:00:00 1975-02-23 00:00:00
86400.0 90000.0 1975-10-27 00:00:00 1975-10-26 00:00:00
86400.0 82800.0 1976-04-26 00:00:00 1976-04-25 00:00:00
86400.0 90000.0 1976-11-01 00:00:00 1976-10-31 00:00:00
...
</code></pre>
<p>Looks like epoch timestamp conversion <code>t.timestamp() - prev.timestamp()</code> isn't reliable. What's more, it appears to oscillate from minus to plus one hour at what appears to be a somewhat irregular but spaced out date interval (<strong>EDIT: realized these were historical Daylight Savings Time dates</strong>). If you keep the script running, the oscillation holds forever until we reach the end times:</p>
<pre><code>86400.0 82800.0 9997-03-10 00:00:00 9997-03-09 00:00:00
86400.0 90000.0 9997-11-03 00:00:00 9997-11-02 00:00:00
86400.0 82800.0 9998-03-09 00:00:00 9998-03-08 00:00:00
86400.0 90000.0 9998-11-02 00:00:00 9998-11-01 00:00:00
86400.0 82800.0 9999-03-15 00:00:00 9999-03-14 00:00:00
86400.0 90000.0 9999-11-08 00:00:00 9999-11-07 00:00:00
Traceback (most recent call last):
  File "check.py", line 8, in &lt;module&gt;
    t += dt.timedelta(days=1)
OverflowError: date value out of range
</code></pre>
<p>This behavior prompted me to take a closer look at the output of my first script:</p>
<pre><code>...
1970-10-24 00:00:00 3600.0
1970-10-25 00:00:00 3600.0
1971-04-26 00:00:00 3600.0
1971-04-27 00:00:00 3600.0
...
</code></pre>
<p>Wow, so there are no <code>AssertionErrors</code> between <code>1970-10-25</code> and <code>1971-04-26</code> noninclusive. This matches the oscillation found with the second script. </p>
<p>This is getting really weird...</p>
<p>Wait a moment... <strong>DAYLIGHT SAVINGS TIME</strong></p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp" rel="nofollow noreferrer"><code>.timestamp</code></a> only works in Python 3 (New in version 3.3). There is no such method in Python 2.</p>
<blockquote>
<p>Changed in version 3.6: The timestamp() method uses the fold attribute to disambiguate the times during a repeated interval.</p>
<p>Note: There is no method to obtain the POSIX timestamp directly from a naive datetime instance representing UTC time. If your application uses this convention and your system timezone is not set to UTC, you can obtain the POSIX timestamp by supplying tzinfo=timezone.utc:
  <code>timestamp = dt.replace(tzinfo=timezone.utc).timestamp()</code>
  or by calculating the timestamp directly:
  <code>timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)</code></p>
</blockquote>
</div>
<span class="comment-copy">From what I can tell in the documentation these should do the same thing, but maybe I misunderstand leap seconds or something: <a href="https://docs.python.org/3.6/library/datetime.html?highlight=total_seconds#datetime.timedelta.total_seconds" rel="nofollow noreferrer">docs.python.org/3.6/library/…</a>  and <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">It prints the same value to me, im in python 3.6.1 importing datetime</span>
<span class="comment-copy">I reproduced with python 3.5.2. What is your python version?</span>
<span class="comment-copy">I'm using python 3.6.0. The discrepancy happens around t1=dt.datetime(1970,4,26,5,0,0) and also for t1=dt.datetime(2016,3,25,4,0,0)</span>
<span class="comment-copy">@Chogg: I don't think it's technically a bug. <code>timestamp</code> is a strict offset from epoch time, and correctly accounts for DST. <code>datetime</code> subtraction produces an accurate delta (the two <code>datetime</code>s differ by 162 days, and adding that delta to the second date would produce the first date as expected), it's just that the DST jump in the middle means only 162 days minus one hours worth of seconds have actually passed. But in the abstract, a delta of 162 days doesn't always have the loss of an hour (sometimes it will gain an hour, sometimes it won't change), so incorporating it would be misleading.</span>
<span class="comment-copy">If I understand correctly, timestamp is evaluating the input relative to my local time zone and so it is shifting with the summer time, whereas subtraction is not timezone aware, as mentioned by David Murray above. Thanks for your help here.</span>
<span class="comment-copy">There is also a similar anomaly around march/april 2016. Do you see it there?</span>
<span class="comment-copy">Yes. Here is part of the second script's output:       <code>86400.0 90000.0 2015-11-02 00:00:00 2015-11-01 00:00:00</code> <code>86400.0 82800.0 2016-03-14 00:00:00 2016-03-13 00:00:00</code> <code>86400.0 90000.0 2016-11-07 00:00:00 2016-11-06 00:00:00</code></span>
<span class="comment-copy">@Chogg I just realized the oscillation occurs exactly on historical Daylight Savings Time dates!! That's the answer to what's causing these anomalies.</span>
<span class="comment-copy">@JoshuaRLi: Heh. I was <a href="https://stackoverflow.com/a/45603006/364696">just posting that</a>.</span>
<span class="comment-copy">@Chogg: It's not dealt with directly in either. See my answer. timestamp is computing an offset of local time from epoch time (which is in UTC, so DST is handled by side-effect). datetime subtraction is ignoring DST (two dates at the same hour will differ only in days, not hours, even if DST is in effect for only one of them). And no, there is no other forum. You could file a bug on the tracker, but given this isn't really a bug, at most I'd expect a documentation clarification.</span>
