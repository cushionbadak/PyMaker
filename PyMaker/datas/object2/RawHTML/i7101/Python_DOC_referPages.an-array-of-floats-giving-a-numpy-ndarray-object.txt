<div class="post-text" itemprop="text">
<p>This is a followup question from <a href="https://stackoverflow.com/questions/45577172/numpy-multiplying-int-with-float-seems-to-not-work">the one I posted a few minutes ago</a>. The problem I was having with multiplying int with float is fixed, thanks to user2357112 in the comments. However, it's come across another roadblock.</p>
<p>Code:</p>
<pre><code>from __future__ import division
from fractions import Fraction
import numpy as np
from numpy import linalg as LA

def gcd(m,n):
    if m &lt; n:
        return gcd(n,m)
    return gcd(n,m%n)

def lcm(m,n):
    return (m*n)/(gcd(m,n))

def answer(m):
    tbd = []
    l = len(m)
    for i in range(l):
        s = sum(m[i])
        if s == 0:
            tbd.append(i)
            m[i][i] = 1
        else:
            for j in range(l):
                m[i][j] /= s
    tbd.sort(reverse=True)
    a = np.array(m)
    r = np.diag([1.0 for x in range(l)])
    for i in range(100):
        r *= a
    initial = [0 for x in range(l)]
    initial[0] = 1
    final = initial * r
    for i in tbd:
        del final[i]
    dens = []
    for i in range(len(final)):
        final[i] = final[i].limit_denominator()
        dens.append(final[i].denominator)
    lc = dens[0]
    for j in range(1,len(dens)):
        lc = lcm(lc,dens[j])
    for i in range(len(final)):
        final[i] = int(final[i] * lc)
    final.append(lc)
    return final

def main():
    print answer([[1,2],[2,1]])
    print answer([[0,1,0,0,0,1],[4,0,0,3,2,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]])

main()
</code></pre>
<p>Code in ideone: <a href="http://ideone.com/DO1otS" rel="nofollow noreferrer">http://ideone.com/DO1otS</a></p>
<p>Error:</p>
<pre><code>Traceback (most recent call last):
  File "prog.py", line 51, in &lt;module&gt;
  File "prog.py", line 48, in main
  File "prog.py", line 37, in answer
AttributeError: 'numpy.ndarray' object has no attribute 'limit_denominator'
</code></pre>
<p>I am confused about why <code>final[i]</code> was recognized as a <code>numpy.ndarray</code> object. I thought that, since <code>final</code> is a 1-dimensional array, <code>final[i]</code> will therefore return the value (a <code>float</code>) within that array at index <code>i</code>. I'm not sure why that is not the case. Thank you in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>This is the answer to your question <em>"I am confused about why final[i] was recognized as a numpy.ndarray object."</em> In the following snippet of code</p>
<pre><code>r = np.diag([1.0 for x in range(l)])
initial = [0 for x in range(l)]
final = initial * r
</code></pre>
<p>I skipped non-essential code. The code above shows that <code>r</code> is a <code>numpy.ndarray</code> and <code>initial</code> is a list. Then <code>final</code> is a product of a <code>numpy.ndarray</code> and a list. The result of this product is a <code>numpy.ndarray</code>.</p>
<p>What is also important is that <code>r</code> is an array of floats. Therefore <code>final</code> is also an array of floats and not fraction objects. Therefore you cannot call <code>limit_denominator()</code> on elements of <code>final</code>.</p>
<p>In addition, code such as:</p>
<pre><code>for i in tbd:
    del final[i]
</code></pre>
<p>looks quite suspicious.</p>
</div>
<span class="comment-copy"><code>print final</code> gives me <code>[[  1.94032522e-48   0.00000000e+00]  [  0.00000000e+00   0.00000000e+00]]</code>. So you have a 2D array at that point, it doesn't matter that you index that (you then try to call <code>limit_denominator()</code> on a 1D array). Rather than turn instantly to another SO question, it's worth trying to debug via <code>print</code>.</span>
<span class="comment-copy">As an aside, <code>fractions</code> already comes with a <code>gcd</code> implementations: <code>fractions.gcd</code></span>
<span class="comment-copy">There's a nice blog post about <a href="https://ericlippert.com/2014/03/05/how-to-debug-small-programs/" rel="nofollow noreferrer">"How to debug small programs"</a>. It's quite easy to read and contains lots of helpful advise (although some aren't available in Python). Also helpful is the Python debugger <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">pdb</a> in case you encounter an (unexpected) exception. It contains lots of useful functions that make debugging much easier.</span>
<span class="comment-copy">You import <code>Fraction</code> and then never use it. Just importing <code>Fraction</code> won't automatically give other numeric types a <code>limit_denominator</code> method.</span>
<span class="comment-copy">Let me see if I understood the issue correctly. So I would need to set <code>initial</code> as an array and then proceed with the multiplication (<code>final = initial * r</code>) as normal, then convert the <code>final</code> array into a list, then convert the numbers in the <code>final</code> list from <code>floats</code> into <code>Fractions</code>, so that I can get the denominators and continue with the problem?</span>
<span class="comment-copy">@2012ssohn No, all I did was to answer to your direct question asked in the original post and show that your <code>final</code> array is a <code>numpy</code> array of floats.  I did not try to understand the problem that you are trying to solve.</span>
<span class="comment-copy">@2012ssohn In <a href="https://stackoverflow.com/questions/45577172/numpy-multiplying-int-with-float-seems-to-not-work">your other post</a> you said: <i>"I am working on Google's "Doomsday Fuel" problem in Python 2.7 (it needs to be done in Python 2.7, hence the from <code>__future__</code> import division line) that uses NumPy, which admittedly I am not too familiar with."</i> I would suggest you try to solve your problem using lists and fractions (if use of fractions is so important) and then attempt to convert your code to use <code>numpy</code> instead of "ordinary" Python lists once you get your algorithm working.</span>
