<div class="post-text" itemprop="text">
<p>I was looking at <a href="https://tech.labs.oliverwyman.com/blog/2009/10/29/python-quirks/" rel="nofollow noreferrer">this list of python quirks</a> and was amused that this returns <code>False</code>:</p>
<pre><code>def t():
    try:
        return True
    finally:
        return False
</code></pre>
<p>After seeing this I saw the answers <a href="https://stackoverflow.com/questions/517060/return-eats-exception">here</a> and <a href="https://stackoverflow.com/questions/11164144/weird-try-except-else-finally-behavior-with-return-statements">here</a> which presented the reason why, and that's that the <code>finally</code> clause will always be executed, no exceptions.</p>
<p>My question is, where is the previous <code>return</code> value stored:</p>
<pre><code>def t():
    try:
        return True
    finally:
        ...
</code></pre>
<p>Why doesn't this return <code>None</code> but instead returns the original <code>True</code>?</p>
<p>And is it possible to access the <em>going to be returned</em> value programatically?</p>
<pre><code>def t():
    try:
        return True
    finally:
        ...
        # if returning != None: return False
</code></pre>
<p>I'd like to know if it's possible to do this without using a variable for example:</p>
<pre><code>def t():
    retval = None
    try:
        retval = "Set"
    finally:
        if retval != None:
            return retval
        else:
            return "Not Set"
</code></pre>
<p>and</p>
<pre><code>def t():
    retval = None
    try:
        ...
    finally:
        if retval != None:
            return retval
        else:
            return "Not Set"
</code></pre>
<p>return <code>'Set'</code> and <code>'Not Set'</code> respectively.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Why doesn't this return <code>None</code> but instead returns the original <code>True</code>?</p>
</blockquote>
<p>From the <a href="https://docs.python.org/2/tutorial/errors.html#defining-clean-up-actions" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>The <code>finally</code> clause is also executed “on the way out” when any other clause of the try statement is left via a <code>break</code>, <code>continue</code> or <code>return</code> statement.</p>
</blockquote>
<p>So this means that if a <code>return</code> statement is present in the <code>finally</code> clause that value will be returned (since the <code>finally</code> block is guaranteed to execute fully, any <code>return</code> statement inside it will be executed as well). Otherwise, if the <code>try/except</code> block was going to return a value, that value is returned.</p>
<p>This means that</p>
<pre><code>def t():
    try:
        print("Inside try")
        return "Return from try"
    finally:
        print("Inside finally")
        return "Return from finally"
</code></pre>
<p>Will execute exactly as:</p>
<pre><code>def t():
    try:
        print("Inside try")
        # start of old finally block, executed "on the way out"
        print("Inside finally")
        return "Return from finally"
        # end of old finally block, inserted right before return statement in try
        return "Return from try"
    finally:
        pass
</code></pre>
<blockquote>
<p>And is it possible to access the going to be returned value programatically?</p>
</blockquote>
<p>No, you can't access the value after the <code>return</code> statement in other parts of the code without saving it. </p>
</div>
<span class="comment-copy">Obviously it's stored <i>somewhere</i> so it can be used after the <code>finally:</code> clause (assuming that doesn't contain a <code>return</code> statement), but that's an implementation detail.</span>
<span class="comment-copy"><i>"No, you can't access the value after the return statement in other parts of the code without saving it."</i> Have you got an evidence to back this up, and I'm aware that the <code>finally</code> clause is also executed, but that quote doesn't explain why the <code>try/except</code> value is returned instead if the <code>finally</code> does not return, I'm aware that it does it, the question is why. In terms of answering <i>why</i> a walkthrough of python bytecode would be useful.</span>
<span class="comment-copy">Because as @martineau said, that is an implementation detail. For the other question, imagine that all the code inside the <code>finally</code> block is put <i>exactly before</i> any statement that returns a value / raises an exception (if present). If <code>finally</code> returns nothing or doesn't raise an exception, the program keeps going. I think this is explained well in the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-try-statement" rel="nofollow noreferrer">docs</a> (which are linked in one of the SO posts that you provided).</span>
<span class="comment-copy">re: what you said about putting the code in the finally block exactly before an exception/return, can you put that in your answer, that fully explains both my questions</span>
<span class="comment-copy">@NickA see if the example provided suits you.</span>
<span class="comment-copy">fits perfectly!</span>
