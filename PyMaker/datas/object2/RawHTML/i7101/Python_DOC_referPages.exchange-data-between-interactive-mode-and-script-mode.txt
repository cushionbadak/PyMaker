<div class="post-text" itemprop="text">
<p>Suppose to run a block of code in script_mode and produce such data:</p>
<pre><code>my_data = [1, 2, 3, 4] #please note this is output after running not data in script
</code></pre>
<p>Now I switch to work in console for  debugging the code.
I need to use the data produced just now, while cannot copy directly for avoiding the effect of gibberish. 
My solution is to pickle first in the script_mode and unpickle it in interactive_mode:</p>
<p>Codes with 5 commands:</p>
<p>Script Mode</p>
<pre><code>import pickle

with open('my_data','wb') as file:
        pickle.dump(my_data, file)
</code></pre>
<p>Interactive_mode:</p>
<pre><code>import os, pickle
# change to the working directory
os.chdir('~\..\')
with open('my_data', 'rb') as file:
         my_data = pickle.load(file)
# my_data is finally loaded in console
# then manipulate it on the console.
</code></pre>
<p>How to do it in less steps?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can run the file with the <code>-i</code> option, like <code>python -i your_file_name.py</code>.</p>
<p>This will run your file first, then open an interactive shell with all of the variables present and ready for use.</p>
</div>
<div class="post-text" itemprop="text">
<p>If, in your <code>/path/to/your/project</code> directory, you have the script <code>your_script.py</code> like this:</p>
<pre><code>my_data = [1, 2, 3, 4]
</code></pre>
<p>If you want to debug your script in a Python 2 interactive shell, you can do:</p>
<pre><code>$ python
&gt;&gt;&gt; execfile('/path/to/your/project/your_script.py')
</code></pre>
<p>Or, with the Python 2+3 way:</p>
<pre><code>&gt;&gt;&gt; exec(open('/path/to/your/project/your_script.py').read(), globals())
</code></pre>
<p>The built-in function <a href="https://docs.python.org/3/library/functions.html#exec" rel="nofollow noreferrer"><code>exec()</code></a> supports dynamic execution of Python code.
The built-in function <a href="https://docs.python.org/3/library/functions.html#globals" rel="nofollow noreferrer"><code>globals()</code></a> returns the current global dictionary.
That way you can access to your data:</p>
<pre><code>&gt;&gt;&gt; my_data
[1, 2, 3, 4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Personally, I would use IPython, just:</p>
<pre><code>pip install IPython
</code></pre>
<p>Then anywhere you want to drop into a console, simply</p>
<pre><code>import IPython
</code></pre>
<p>at the top of the file and use:</p>
<pre><code>IPython.embed()
</code></pre>
<p>where you'd like to drop in.</p>
<p>You can type "whos" once you're in for a list of variables alongside their type and values.  It's pretty useful, but yeah, this should work for you. IPython is a solid python shell.</p>
<p>You can also use ipdb if you're more used to the standard pdb.  It's really good too.</p>
</div>
<span class="comment-copy">By interactive, do you mean IDLE? The variable is available - I just checked.</span>
<span class="comment-copy">Is it a scoped variable? Show relevant code.</span>
<span class="comment-copy">I use macOS's terminal and atom editor.@aaronPlease read question.</span>
<span class="comment-copy">Show relevant code of how the variable is scoped. Try creating a new file with <code>a = 1</code> and you should see that it's accessible.</span>
<span class="comment-copy">Not sure if I understand your question, but if you use <a href="https://ipython.org/index.html" rel="nofollow noreferrer">ipython</a> instead of standard python IDLE, you can easily run a script an keep the objects (vars, functions, classes, etc.) defined in the script by running <code>%run -i script.py</code>. Then there's no need to pickle/unpickle stuff. BTW, I'm not talking about jupyter (formerly "ipython notebook"), but just ipython as an interactive shell.</span>
<span class="comment-copy"><code>$ python3 -i divide_to_chapters.py</code> and call <code>&gt;&gt;&gt; content_list</code> NameError: name 'content_list' is not defined</span>
<span class="comment-copy">@DFK can't do much when I don't know what is <code>divide_to_chapters.py</code></span>
<span class="comment-copy">The data isn't in script, it's produced by implementation.</span>
<span class="comment-copy">Could introduce a blog which specifying frequent usage of ipython in short content?</span>
<span class="comment-copy">This is a series that should cover some of the basics of using IPython if that's what you're after.  Otherwise, I'm not sure I understand your question. <a href="http://ipython.readthedocs.io/en/stable/interactive/tutorial.html" rel="nofollow noreferrer">ipython.readthedocs.io/en/stable/interactive/tutorial.html</a></span>
