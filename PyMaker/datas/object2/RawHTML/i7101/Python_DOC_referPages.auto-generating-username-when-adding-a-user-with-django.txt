<div class="post-text" itemprop="text">
<p>I am trying to save username as firstname while adding a user from django admin. Currently it saves <code>None</code> in the username field as I have excluded <code>username</code> in the custom model.</p>
<p>admin.py--</p>
<pre><code>from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.contrib.auth.models import User
from .models import UserProfile
from .forms import SignUpForm

class ProfileInline(admin.StackedInline):
    model = UserProfile
    can_delete = False
    verbose_name_plural = 'Profile'
    fk_name = 'user'


class CustomUserAdmin(UserAdmin):
    inlines = (ProfileInline, )
    list_display = ('email', 'first_name', 'last_name', 'is_staff')
    list_select_related = ( 'profile', )

    exclude = ('username',)

    fieldsets = (
        ('Personal information', {'fields': ('first_name', 'last_name', 'email', 'password')}),
        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
        ('Important dates', {'fields': ('last_login', 'date_joined')}),
    )

    add_fieldsets = (
        ('None', {
            'classes': ('wide',),
            'fields': ('first_name','last_name', 'email', 'password1', 'password2')}
        ),
    )


    def get_inline_instances(self, request, obj=None):
        if not obj:
            return list()
        return super(CustomUserAdmin, self).get_inline_instances(request, obj)


admin.site.unregister(User)
admin.site.register(User, CustomUserAdmin)
</code></pre>
<p>forms.py</p>
<pre><code>from django import forms
from django.contrib.auth.models import User
from django.utils.translation import ugettext as _
from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout, Div, Field
from ajax_select.fields import AutoCompleteSelectField, AutoCompleteField
from phonenumber_field.formfields  import PhoneNumberField
from . import models
from captcha.fields import ReCaptchaField


class SignUpForm(forms.Form):
    first_name = forms.CharField(max_length=30)
    last_name = forms.CharField(max_length=30)
    phone_number = PhoneNumberField(label=_("Phone (Please state your country code eg. +44)"))
    organisation = forms.CharField(max_length=50)
    email = forms.EmailField()
    password1 = forms.CharField(max_length=20)
    password2 = forms.CharField(max_length=20)
    captcha = ReCaptchaField(attrs={'theme' : 'clean'})



    def signup(self, request, user):
        user.first_name = self.cleaned_data['first_name']
        user.last_name = self.cleaned_data['last_name']
        """
        profile, created = models.UserProfile.objects.get_or_create(user=user)
        profile.phone_number = self.cleaned_data['phone_number']
        profile.organisation = self.cleaned_data['organisation']
        profile.save()
        user.save()
        """
        up = user.profile
        up.phone_number = self.cleaned_data['phone_number']
        up.organisation = self.cleaned_data['organisation']
        user.save()
        up.save()
</code></pre>
<p>models.py --</p>
<pre><code>from __future__ import unicode_literals
from django.db import models
from django.contrib.auth.models import User
from django.utils.translation import ugettext as _
from easy_thumbnails.fields import ThumbnailerImageField
from ciasroot.settings import THUMBNAILER_SIZES, UPLOAD_PATH
from ciasroot.constants import GENDERS, LANGUAGES
from ciasroot.util import HashedPk
from phonenumber_field.modelfields import PhoneNumberField
import math, decimal, datetime, os
import uuid

    def random_username(sender, instance, **kwargs):
        if not instance.username:
            instance.username = uuid.uuid4().hex[:30]
            models.signals.pre_save.connect(random_username, sender=User)

class UserProfile(models.Model, HashedPk):
    user = models.OneToOneField(User, unique=True, related_name ='profile')
    job_title = models.CharField(max_length=128, blank=True, null=False, default="")
    website = models.URLField(max_length=255, blank=True, null=True)
    organisation = models.CharField(max_length=50, blank=True, null=True, default="")
    phone_number = PhoneNumberField( blank=True, null=True)

    def __str__(self):
        return self.user.get_full_name()

    def save(self, *args, **kwargs):
        super(UserProfile, self).save(*args, **kwargs)
        LookupSuggest.add("job_title", self.job_title)
</code></pre>
<p>How can I insert username as firstname and make the custom field ie email 'required'. Now the password1 &amp; password2 fields are mandatory.</p>
<p>Any help/link is highly appreciated.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define username as a readonly field.</p>
<pre><code>def user_first_name(obj):
    return obj.first_name

user_firstname.short_description = 'Firstname'

class CustomUserAdmin(UserAdmin):
    readonly_fields = ('user_firstname')
    inlines = (ProfileInline, )
    list_display = ('email', 'user_first_name', 'last_name', 'is_staff')
    list_select_related = ( 'profile', )

    exclude = ('username',)
    ...
</code></pre>
<p>For your second question about validating email, define a form for <code>CustomUserAdmin</code>.</p>
<pre><code>class CustomUserAdmin(UserAdmin):
    ...
    form = CustomUserAdminForm 

class CustomUserAdminForm(forms.ModelForm):
    def clean_email(self):
       if not self.cleaned_data['email']:
           raise forms.ValidationError("Email is required")

       return self.cleaned_data['email']
</code></pre>
<p>Or:</p>
<pre><code>class CustomUserAdminForm(forms.ModelForm):
    email = forms.EmailField(required=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To automatically populate username with the user's first name, you should use a <a href="https://docs.djangoproject.com/en/1.11/topics/signals/" rel="nofollow noreferrer">signal</a> - add the following to the <code>models.py</code> where you've defined UserProfile:</p>
<pre><code>def set_username(sender, instance, **kwargs):
    if not instance.username:
        instance.username = instance.first_name
models.signals.pre_save.connect(set_username, sender=User)
</code></pre>
<p>The problem with this is that if you have two users with the same first name, the username won't be unique, so you'll get an integrity error from the database. You could check for uniqueness and append a number until you get a unique value:</p>
<pre><code>def set_username(sender, instance, **kwargs):
    if not instance.username:
        username = instance.first_name
        counter = 1
        while User.objects.filter(username=username):
            username = instance.first_name + str(counter)
            counter += 1
        instance.username = username
models.signals.pre_save.connect(set_username, sender=User)
</code></pre>
<p>Or, if you're not using the username at all, you could just set it to a random unique value using <a href="https://docs.python.org/3/library/uuid.html" rel="nofollow noreferrer">uuid</a>:</p>
<pre><code>import uuid

def random_username(sender, instance, **kwargs):
    if not instance.username:
        instance.username = uuid.uuid4().hex[:30]
models.signals.pre_save.connect(random_username, sender=User)
</code></pre>
<p>If you plan on using emails for login rather than username, you'll also need to enforce email uniqueness, add the email to the admin user creation form - this should do what you need: <a href="https://gist.github.com/gregplaysguitar/1184995" rel="nofollow noreferrer">https://gist.github.com/gregplaysguitar/1184995</a></p>
</div>
<span class="comment-copy">Is username going to be readonly?</span>
<span class="comment-copy">Yes non editable field. The admin can just view it.</span>
<span class="comment-copy">Are you using email for login? In that case you'll also need to make sure it's unique</span>
<span class="comment-copy">Yes I need to do that as well. I am trying to figure out the username and mandatory fields thing. I used allauth app in frontend but unfortunately it has no impact on backend</span>
<span class="comment-copy">Ok, have added a link to my answer for that too</span>
<span class="comment-copy">I tried with email validation but failed to validate. I used the second method.Regarding username I want this field value same as first_name.</span>
<span class="comment-copy">I'm not sure I understand your comment completely. However,  <code>obj.firstname</code> is returned in <code>user_firstname</code>. If you like to give it a different label, you can set that in the <code>short_description</code>.</span>
<span class="comment-copy">It would be something like user_first_name.username = 'Firstname' but I don't understand what is 'Firstname' here.</span>
<span class="comment-copy"><code>short_description</code> is the label text for the readonly input field. We already set the value of input field in <code>user_first_name</code> function to be <code>first_name</code>.</span>
<span class="comment-copy">I tried with it but still saving <code>None</code> under username field not the <code>first_name</code> value.</span>
<span class="comment-copy">I have updated the post with forms.py and models.py. The allauth app is saving username as firstname. I changed the username field not to be unique and made email as unique. There will be only email login.It works fine with frontend user registration process. I tried with random unique id but again it saves 'None'</span>
<span class="comment-copy">signals need to be connected in a models.py file. Move the random_username part to the top level of your models.py</span>
<span class="comment-copy">And make sure the models.signals.pre_save.connect part is at the top level too, it's not part of the function</span>
<span class="comment-copy">models.py has been updated in the post. It's still saving 'None'.</span>
<span class="comment-copy"><b>Move the random_username part to the top level of your models.py</b></span>
