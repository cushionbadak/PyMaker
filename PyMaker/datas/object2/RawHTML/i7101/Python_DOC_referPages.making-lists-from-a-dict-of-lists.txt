<div class="post-text" itemprop="text">
<p>I have this <code>dict</code>:</p>
<pre><code>{'Hours Outside Sprint': [5.25, 5.0, 0.0],
 'Sprint End': ['2017-02-14', '2017-02-14', '2017-02-14'],
 'Sprint Start': ['2017-01-31', '2017-01-31', '2017-01-31'],
 'Status': ['done', 'done', 'done'],
 'Story': ['SPGC-14075', 'SPGC-9456', 'SPGC-9445'],
 'Story Actual (Hrs)': [11.0, 12.75, 0.0],
 'Story Estimate (Hrs)': [16.0, 12.0, 0.0]}
</code></pre>
<p>I think this is a fairly simple task but the solution is not apparent at the moment. What I want to do is iterate through this <code>dict</code> and make the following:</p>
<pre><code>[[done, 2017-02-14, SPGC-14075, 16.0, 5.25, 2017-01-31, 11.0], ... ]
</code></pre>
<p>So all the 1st elements of each list go together, all the 2nd, and so on until I have a list of lists. How do I do this?</p>
<p>EDIT:</p>
<p>Here is what the pandas dataframe looks liek that produced the above dict:</p>
<pre class="lang-none prettyprint-override"><code>Story Status  Story Estimate (Hrs)  Story Actual (Hrs)  Hours Outside Sprint Sprint Start  Sprint End
0  SPGC-14075   done                  16.0               11.00                  5.25   2017-01-31  2017-02-14
1   SPGC-9456   done                  12.0               12.75                  5.00   2017-01-31  2017-02-14
2   SPGC-9445   done                   0.0                0.00                  0.00   2017-01-31  2017-02-14
</code></pre>
<p>Would <code>iterrows</code> work?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>df.iterrows</code> makes a pretty neat solution. Make sure to slice out the row index:<br/> (<code>i[0] = row_index; i[1] = row_values</code>)</p>
<pre><code>df = pd.DataFrame(df_dict)

#re-order columns (may not be necessary depending on your original df)
df = df[['Status','Sprint End','Story','Story Estimate (Hrs)','Hours Outside Sprint','Sprint Start','Story Actual (Hrs)']]
values = [i[1].tolist() for i in df.iterrows()]</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's how I would do this in Python:</p>
<pre><code>df_dict = {'Status': [u'done', u'done', u'done'], 'Sprint End': ['2017-02-14', '2017-02-14', '2017-02-14'], 'Story': [u'SPGC-14075', u'SPGC-9456', u'SPGC-9445'], 'Story Estimate (Hrs)': [16.0, 12.0, 0.0], 'Hours Outside Sprint': [5.25, 5.0, 0.0], 'Sprint Start': ['2017-01-31', '2017-01-31', '2017-01-31'], 'Story Actual (Hrs)': [11.0, 12.75, 0.0]}

result = []
lengthOfFirstArrInDict = len(df_dict[df_dict.keys()[0]])

for i in range(0, lengthOfFirstArrInDict):
    nestedList = []

    for key in df_dict.keys():
        nestedList.append(df_dict[key][i])

    result.append(nestedList)

print(result)
</code></pre>
<p>And here's the output:</p>
<pre><code>[['done', '2017-02-14', 'SPGC-14075', 16.0, 5.25, '2017-01-31', 11.0], ['done', '2017-02-14', 'SPGC-9456', 12.0, 5.0, '2017-01-31', 12.75], ['done', '2017-02-14', 'SPGC-9445', 0.0, 0.0, '2017-01-31', 0.0]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Whenever you need to combine successive elements from two or more sequences in Python, think <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><strong><code>zip()</code></strong></a>:</p>
<pre><code>from pprint import pprint

data = {'Hours Outside Sprint': [5.25, 5.0, 0.0],
        'Sprint End': ['2017-02-14', '2017-02-14', '2017-02-14'],
        'Sprint Start': ['2017-01-31', '2017-01-31', '2017-01-31'],
        'Status': ['done', 'done', 'done'],
        'Story': ['SPGC-14075', 'SPGC-9456', 'SPGC-9445'],
        'Story Actual (Hrs)': [11.0, 12.75, 0.0],
        'Story Estimate (Hrs)': [16.0, 12.0, 0.0]}

# desired order of items in the result
key_order = ('Status', 'Sprint End', 'Story', 'Story Estimate (Hrs)',
             'Hours Outside Sprint', 'Sprint Start', 'Story Actual (Hrs)')
pprint([x[0] for x in zip(data[k] for k in key_order)])
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>[['done', 'done', 'done'],
 ['2017-02-14', '2017-02-14', '2017-02-14'],
 ['SPGC-14075', 'SPGC-9456', 'SPGC-9445'],
 [16.0, 12.0, 0.0],
 [5.25, 5.0, 0.0],
 ['2017-01-31', '2017-01-31', '2017-01-31'],
 [11.0, 12.75, 0.0]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try this:</p>
<pre><code>df_dict = {'Status': [u'done', u'done', u'done'], 'Sprint End': ['2017-02-14', '2017-02-14', '2017-02-14'], 'Story': [u'SPGC-14075', u'SPGC-9456', u'SPGC-9445'], 'Story Estimate (Hrs)': [16.0, 12.0, 0.0], 'Hours Outside Sprint': [5.25, 5.0, 0.0], 'Sprint Start': ['2017-01-31', '2017-01-31', '2017-01-31'], 'Story Actual (Hrs)': [11.0, 12.75, 0.0]}

vals = df_dict.values()

final_data = list(map(list, zip(*vals)))

print(final_data)
</code></pre>
<p>Output:</p>
<pre><code>[[16.0, 5.25, 11.0, '2017-02-14', 'done', 'SPGC-14075', '2017-01-31'], [12.0, 5.0, 12.75, '2017-02-14', 'done', 'SPGC-9456', '2017-01-31'], [0.0, 0.0, 0.0, '2017-02-14', 'done', 'SPGC-9445', '2017-01-31']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>map(lambda x: list(x),zip(*map(lambda (k,v): v, df_dict.iteritems())))
</code></pre>
<p>or</p>
<pre><code>map(lambda x: list(x),zip(*df_dict.values()))
</code></pre>
<p>you could strip absolving method call one by one to see what you got each step</p>
<p>It's no more than transforming of your data.</p>
<p><code>*df_dict.values()</code> means you could pass a list as parameters for a function that needs arguments likes this:</p>
<pre><code>def fun(arg1, arg2, arg3 ...)
</code></pre>
</div>
<span class="comment-copy">show us the code</span>
<span class="comment-copy">It seems like you may already have a pandas df? why not just use <code>df.iterrows</code> or <code>df.itertuples</code>?</span>
<span class="comment-copy">The code to get the above is pretty convoluted but yeah used some pandas. I am posting the dataframe rn</span>
<span class="comment-copy">is the order important?</span>
<span class="comment-copy">Aaron that worked really well thanks. Order was indeed important.</span>
