<div class="post-text" itemprop="text">
<p>I have a date which I obtain from an API. It is in the form of <code>2015-01-01T15:04:23Z</code>.</p>
<p>How can I accept this date into a model using Flask-SQLAlchemy?</p>
<p>So far I have tried, </p>
<pre><code>date = db.Column(db.DateTime)
</code></pre>
<p>and </p>
<pre><code>date = db.Column(db.DateTime(timezone=True))
</code></pre>
<p>which gives me the error</p>
<pre><code>StatementError: (exceptions.TypeError) SQLite DateTime type only accepts Python datetime and date objects as input.
</code></pre>
<p>Also, when I retrieve it using a <code>get</code>, I need it to be in the exact same format.</p>
<p>The <code>dateutil</code> python module parses it well but when I retrieve it from the table, I need to get <code>2015-01-01T15:04:23Z</code>.</p>
<pre><code>&gt;&gt;&gt; from dateutil.parser import parse
&gt;&gt;&gt; parse('2015-01-01T15:04:23Z')
datetime.datetime(2015, 1, 1, 15, 4, 23, tzinfo=tzutc())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to convert the string into a Python datetime object, which you can do using <code>time.strptime</code>:</p>
<pre><code> record.date = time.strptime(mytime, "%Y-%m-%dT%H:%M:%SZ")
</code></pre>
<p>Then you can safely set it on your instance and commit it.</p>
<p>To get it back in the same format, use <code>time.strftime</code> on the other side:</p>
<pre><code>time.strftime("%Y-%m-%dT%H:%M:%SZ", record.date)
</code></pre>
<p>And of course remember to watch out that the order of the arguments is different between <code>strptime</code> and <code>strftime</code> :)</p>
<p>If you need to change/update the format, see <code>time.strftime</code> here : <a href="https://docs.python.org/2/library/time.html" rel="nofollow noreferrer">https://docs.python.org/2/library/time.html</a></p>
</div>
<span class="comment-copy">"SQLite DateTime type only accepts Python datetime", parse it to a Python datetime object then: <a href="https://stackoverflow.com/questions/127803/how-to-parse-an-iso-8601-formatted-date" title="how to parse an iso 8601 formatted date">stackoverflow.com/questions/127803/…</a>.</span>
<span class="comment-copy">@IljaEverilä And how do I get it back in the same format after retrieving it?</span>
<span class="comment-copy">The format in question is ISO 8601. Python has somewhat subpar support for it. There's <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat" rel="nofollow noreferrer"><code>datetime.isoformat()</code></a> for formatting a datetime object as an ISO 8601 string, but that'll not allow you to use the shorthand "Z" for UTC, for example (which is not that big a thing anyway). All in all datetime handling in Python is a bit painful, especially if time zones are involved.</span>
<span class="comment-copy"><code>time.strptime</code> produces <code>time.struct_time</code> instances, not <code>datetime.datetime</code>. The SQLAlchemy SQLite dialect will not be happy.</span>
