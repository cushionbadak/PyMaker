<div class="post-text" itemprop="text">
<p>A recent coding error of mine has made me think...</p>
<p>I have been using <code>assert false</code> instead of <code>assert False</code> in one of my functions.</p>
<p>This function is invoked only inside <code>try/except</code> clauses.</p>
<p>So I never noticed this "compilation error", until I actually printed the details of the exception.</p>
<p>Then it made me wonder if there were any runtime differences between the two.</p>
<p>Of course, the "<code>false</code>" here can be replaced with any other undefined symbol.</p>
<p>Obviously, the printouts themselves would be different.</p>
<p>Here's a simple test that I conducted:</p>
<pre><code>try:
    assert false
except Exception,e:
    print "false: class name = {:15}, message = {}".format(e.__class__.__name__,e.message)

try:
    assert False
except Exception,e:
    print "False: class name = {:15}, message = {}".format(e.__class__.__name__,e.message)
</code></pre>
<p>The printout of this test is:</p>
<pre><code>false: class name = NameError      , message = name 'false' is not defined
False: class name = AssertionError , message = 
</code></pre>
<p>So my question is, are there any other runtime differences here? In particularly, I am interested to know if using <code>assert(false)</code> over <code>assert(False)</code> could somehow hinder the performance of my program.</p>
</div>
<div class="post-text" itemprop="text">
<p>Both versions are wrong and should <em>never</em> be used.</p>
<ul>
<li><p><code>assert false, ...</code>: the <code>assert</code> statement is never reached, because the <code>false</code> expression raises a <code>NameError</code> exception. That smells of a <em>bug in your code</em>, and not of a deliberate act on your behalf.</p>
<p>Never use deliberate errors to raise an exception. You'd have to add a comment explaining why you did this to future maintainers of the code, but there never should be a reason to use this, because better alternatives exist.</p></li>
<li><p><code>assert False, ...</code>: this is a deliberate assertion failure, and looks like an attempt at debugging and not production code. Make your assertions <strong>before</strong> code that could fail if the assertion doesn't hold instead. If you need to have an exception exit your code at that point, <strong>raise an exception</strong>.</p></li>
</ul>
<p>Be explicit. Raise an exception. Even raising an <a href="https://docs.python.org/3/library/exceptions.html#AssertionError" rel="nofollow noreferrer"><code>AssertionError</code> exception</a> is better:</p>
<pre><code>raise AssertionError('This should never be reached; boundary checks failed')
</code></pre>
<p>From the two versions you should never ever use, in Python 3 <code>assert(False, ...)</code> is 'faster' because at least doesn't trigger a global name search. That's because in Python 3, <code>False</code> is a keyword and the compiler can thus optimise it by referencing a constant. However, there is little actual difference between the two. Since a deliberately failing assertion should <em>by design never be reached</em>, or reached <em>at most once</em>, worrying about how they perform is rather a moot point.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's not a compilation error, both are runtime errors, and obviously there are differences: </p>
<p>Evaluating <code>false</code> produced a NameError, meaning you referred to an undefined name. It's possible for another code path to cause the name to be defined, in which case the assertion might not fail. The trivial example would be a <code>false = True</code> statement above it (which obviously would be horrible in another way, with such a poor variable name). Either way it is a logic error that a code path that doesn't define the name can reach the expression. </p>
<p>Asserting <code>False</code> is a way to force an <code>AssertionError</code> to be thrown. It's a pretty bad technique because you've added explicit code to fail without any sort of explanation why; we can't interpret the error and have to locate it in the code to figure out why it happened. Assertions should have both logical expressions and descriptions to assist in the debugging they're for. </p>
<p>Either way, the way you've handled <em>any</em> exception loses <em>lots</em> of information. In particular, anything about where within the <code>try</code> the error occurred. A normal exception traceback (which can be accessed with <a href="https://docs.python.org/3/library/traceback.html#traceback.print_exception" rel="nofollow noreferrer">traceback.print_exception</a> and its ilk) contains this information in detail. </p>
<p>In effect, this style of handling both <code>assert</code> and <code>try</code>-<code>catch</code> is preventing you from receiving useful information on any error <em>except</em> compilation time errors like SyntaxError and ImportError. </p>
<p>The only sensible use of <code>assert False</code> I can think of it to test the <code>assert</code> statement itself. In all normal use we include the condition for failure. </p>
</div>
<span class="comment-copy">Why use <b>either at all</b>?</span>
<span class="comment-copy">Side note: always only catch <i>specific exceptions</i>. Don't play pokemon, you don't need to catch them all (or nearly all in this case). Your issue is more likely caused by you catching too many exceptions.</span>
<span class="comment-copy">@MartijnPieters: In my specific case, the function finds the position of the smallest value in a given array larger than or equal to a given input. It is doing so via binary search. At the end of the binary search, if <code>array[hi] &gt;= input</code>, then it returns <code>hi</code>. Otherwise, if <code>array[lo] &gt;= input</code>, then it returns <code>lo</code>. Otherwise, it <code>assert(False)</code>.</span>
<span class="comment-copy">Just raise an exception in that case.</span>
<span class="comment-copy">@goodvibration: your question is akin to: is it better to hit my toes with a mallet or a crowbar? To which the answer is: don't do either. Hitting your toes is strongly recommended against, both will damage your toes. If your goal was to have you cry out in pain, just pretend you cried out in pain. Perhaps get acting lessons.</span>
<span class="comment-copy"><code>assert</code> being a statement, I don't like the parenthesis which actually cause assertions to succeed (non-empty tuples are true). As <a href="https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement" rel="nofollow noreferrer">assertions</a> are a debugging feature, deliberately raising them when in nodebug mode might cause additional confusion.</span>
<span class="comment-copy">@YannVernier: which is why Python throws an exception in that case: <code>SyntaxWarning: assertion is always true, perhaps remove parentheses?</code></span>
<span class="comment-copy">@YannVernier: still, I removed the parentheses; you are correct in that it's not a good idea to treat <code>assert</code> as a function.</span>
<span class="comment-copy">That's why I put "compilation error" inside double quotes...</span>
