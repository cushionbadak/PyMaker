<div class="post-text" itemprop="text">
<p>I have this function in my code:</p>
<pre><code>def send_info(self, bfile, output_file_name, tag):
    self.command = r"sshpass -p {3} scp -P 5622 {0} {1}@{2}:/home/blender/Documents/blade_queue/".format(str(current_render.blend), self.uname, self.host, self.password)
    print self.command
    self.response = subprocess.check_output(self.command)
</code></pre>
<p>Which prints out:</p>
<pre><code>sshpass -p PASSWORD scp -P PORT /mnt/c/Users/Joseph\ Farah/Documents/python/cross_computer_rendering_gui/src/test.blend blender@IP /home/blender/Documents/blade_queue/
</code></pre>
<p>When I copy and paste this command into my shell, it works absolutely beautifully. However, trying to run this in Python results in:</p>
<blockquote>
<p>OSError: [Errno 2] No such file or directory</p>
</blockquote>
<p>On that line. </p>
<p>Any help would be appreciated! Thanks in advance.</p>
</div>
<div class="post-text" itemprop="text">
<p>Figured it out. I needed to add <code>shell=True</code> to the command. Does anyone know if this will cause any security vulnerabilities?</p>
<p>Edited command: </p>
<pre><code>self.response = subprocess.check_output(self.command, shell=True)
</code></pre>
</div>
<span class="comment-copy">From the <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer">docs</a>: 17.5.2. Security Considerations Unlike some other popen functions, this implementation will never implicitly call a system shell. This means that all characters, including shell metacharacters, can safely be passed to child processes. If the shell is invoked explicitly, via shell=True, it is the applicationâ€™s responsibility to ensure that all whitespace and metacharacters are quoted appropriately to avoid shell injection vulnerabilities.</span>
<span class="comment-copy">For an example of what could go wrong: imagine the user setting their password to <code>; rm -rf / ;</code>...</span>
<span class="comment-copy">You want to pass the arguments as a <code>list</code> that's explicitly split at the argument boundaries so you can avoid <code>shell=True</code>.  If the command is <code>["sshpass", '-p', self.password, 'scp', '-P', '5622',  str(current_render.blend), '{}@{}:/home/blender/Documents/blade_queue/'.format(self.uname, self.host)]</code> so all the arguments are explicitly passed independently, it would be both faster and more secure.</span>
<span class="comment-copy">Pssst: <a href="https://nedbatchelder.com/text/shell-maybe.html" rel="nofollow noreferrer">nedbatchelder.com/text/shell-maybe.html</a></span>
<span class="comment-copy">@NedBatchelder Hey Ned! I actually was working on this problem Tuesday night at Boston Python :) Thanks for the link!</span>
