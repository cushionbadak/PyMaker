<div class="post-text" itemprop="text">
<p>I have this very basic test code:</p>
<pre><code>from flask import Flask, send_from_directory

app = Flask(__name__, static_folder='react_app/build', static_path='')

@app.route('/api/test')
def test():
    return "Test"

# Serve Website
@app.route('/')
def react_app():
    return send_from_directory('react_app/build', 'index.html')

if __name__ == '__main__':
    app.run(use_reloader=True)
</code></pre>
<p>The <code>/api/test</code> route initialy works until I reload the page, than it either takes very long (60s+) or does not work at all. Sometimes when I reload the app again, I recive the request which was pending before. Reloading the react app sometimes resolvs the problem and sometimes "causes" the problem again, I haven't really found any rule to when it breaks / works... But in order to have it "work" again, I always have to wait about 1-2 mins or restart the computer. It seems like the error gets "cached" somehow.</p>
<p>As you can probably tell, I have quite a hard time to pin point the issue to a specific area or even clearly describe and produce the error at any time.
Here is what I have tried:</p>
<ul>
<li>Serving the react-app as shown in the code but using a test node.js<br/>
API =&gt; everything works as expected, no issues</li>
<li>Serving the react-app via node.js but using the shown python code for the api. It works if I remove the <code>#Server Website</code> part. Otherwise I get the described error</li>
<li>React App and API served via node.js =&gt; everything works fine</li>
<li>Trying to serve the API and the react app with Flask, but with two different python files and on two different ports =&gt; Same issue as if I would use one python file</li>
</ul>
<p>Any suggestions what else I could try to further pin down the error source?</p>
<p>EDIT: When clearning the cookies (e.g. with the "clear cache" app for chrome), the currently pending request magicly comes through... so could this actually be a issue with the react app?</p>
</div>
<div class="post-text" itemprop="text">
<p>By default, <a href="http://flask.pocoo.org/docs/0.12/api/#flask.Flask.run" rel="nofollow noreferrer"><code>Flask.run</code></a> runs a primitive <a href="https://docs.python.org/3/library/socketserver.html" rel="nofollow noreferrer">socket server</a> that does not support concurrent requests. This can often cause apparent lock-ups like this.</p>
<p>Use <code>run()</code> with a <a href="http://werkzeug.pocoo.org/docs/0.12/serving/#werkzeug.serving.run_simple" rel="nofollow noreferrer"><code>threaded=True</code></a> argument to make it use a <a href="https://docs.python.org/3/library/socketserver.html#socketserver.ThreadingMixIn" rel="nofollow noreferrer">thread per request</a>, which can make it more robust in the face of concurrent requests.</p>
<pre><code>app.run(use_reloader=True, threaded=True)
</code></pre>
</div>
<span class="comment-copy">Also please note that Flask socket server is meant for development only. Other socket server for production is strongly recommended. Look at Twisted or similar if you don't want to code your own.</span>
