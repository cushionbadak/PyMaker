<div class="post-text" itemprop="text">
<p>For a simple python script that doesn't start any threads or fork any processes, what's the difference between simply letting execution reach the end of the script and explicitly calling quit(), exit(), or sys.exit()?</p>
<p>i.e. what's the difference between</p>
<pre><code>def main():
    # do some stuff
    print("Done doing stuff")

if __name__ == '__main__':
    main()
</code></pre>
<p>and</p>
<pre><code>import sys

def main():
    # do some stuff
    print("Done doing stuff")
    # explicit exit
    sys.exit()

if __name__ == '__main__':
    main()
</code></pre>
<p>I'm asking this because I have been having some odd garbage collection issues on script termination (exceptions raised from <code>__del__</code> apparently due to the order in which things get cleaned up) without the explicit <code>exit()</code> call, and adding an explicit <code>exit()</code> appears to correct those issues.  Or at least none of those exceptions get printed after calling <code>exit()</code>, maybe they are simply being silenced.  </p>
</div>
<div class="post-text" itemprop="text">
<p>In the case you have posted, there is no difference. But the are cases in which you may want to terminate your program without waiting for it to finish.</p>
<p>A banal example:</p>
<pre><code>try:
    ...
except KeyboardInterrupt:
    x = input('Sure you want to exit? y/n')
    if x == 'y':
        quit()
    else:
        pass
</code></pre>
</div>
<span class="comment-copy">From what I garner, the <code>sys.exit()</code> allows the 'finally' clause, wherein the clean-up functionality is built, of some try blocks to activate by raising an exception, thereby giving a "cleaner" exit.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/sys.html#sys.exit" rel="nofollow noreferrer">docs.python.org/3/library/sys.html#sys.exit</a> "This is implemented by raising the SystemExit exception, so cleanup actions specified by finally clauses of try statements are honored". Another interesting note is the one on the buffering errors caught while cleaning up, which cause the exit code to become 120</span>
<span class="comment-copy">I believe this should answer your questions: <a href="https://stackoverflow.com/questions/19747371/python-exit-commands-why-so-many-and-when-should-each-be-used" title="python exit commands why so many and when should each be used">stackoverflow.com/questions/19747371/â€¦</a></span>
<span class="comment-copy">So if I really want to exit properly, I have to catch all exceptions, manually print a stack trace, and then call <code>sys.exit()</code>?</span>
<span class="comment-copy">There is some difference, somewhere because I am getting exceptions in <code>__del__</code> in some instantiated objects due to the order in which python is cleaning things up when I <i>don't</i> explicitly call <code>exit()</code> or <code>sys.exit()</code></span>
<span class="comment-copy">Can you post the actual code then? It's hard to see what can be the difference from your snippet.</span>
<span class="comment-copy">I don't have a good, portable minimal example right now as it involves python-ivi, pyvisa, NI-VISA, and open connections to actual test equipment.</span>
<span class="comment-copy">The exceptions that I am seeing are due to one object (pyvisa resource manager instance) being deleted before another object (pyvisa resource instance)...but the problem is that I have no idea why python is deleting the resource manager instance first when the resource instance has a reference to the resource manager.  Explicitly calling <code>exit()</code> seems to make this work properly, so to debug this further I need to know more about what the difference is between calling <code>exit()</code> and not calling <code>exit()</code> as this seems to have some effect on how python cleans up.</span>
