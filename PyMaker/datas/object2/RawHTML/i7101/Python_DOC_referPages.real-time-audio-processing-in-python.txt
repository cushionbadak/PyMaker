<div class="post-text" itemprop="text">
<p>I'm writing a program to check for glitches in an audio signal recorded by a computer. After audio has been detected, I would like to check for glitches in the first 5 seconds of data ( corresponding to 220500 samples at a sampling rate of 44.1kHz), move on to the next 5 seconds of data and check for glitches in that, then the next 5 seconds etc. I have a while loop which begins after audio has been detected, it starts reading audio samples from a stream into an array until it has 220500 samples in the array, after which it enters an if statement where it begins checking for glitches in the 220500 samples (and deletes all the elements in the array afterwards). My problem is that while this is happening , audio is still being recorded by the computer but it is not being read from the stream into the array and by the time I have exited the if statement and restarted the while loop I have missed a few seconds of audio data. </p>
<pre><code>while 1:
    # little endian, signed short
    snd_data = array('h', stream.read(1500))
    if byteorder == 'big':
        snd_data.byteswap()
    r.extend(snd_data)
    if len(r) == 220500 or silent:
        r = trim(r)
        data = pack('&lt;' + ('h'*len(r)), *r)
        data = np.fromstring(data,dtype=np.int16)

        glitch detection carried out here...
</code></pre>
<p>I am using PyAudio for recording audio</p>
<pre><code>p=pyaudio.PyAudio() # start the PyAudio class
stream=p.open(format=pyaudio.paInt16,channels=1,rate=RATE,input=True,input_device_index = 1, output_device_index = 6,frames_per_buffer=1500)
</code></pre>
<p>I would like to know is there any way for me to continue reading from the audio stream into the array whilst carrying out the glitch detection in the if statement? Or if not, is there any other way I could go about this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your Answer is <strong>Multi-threading</strong> <strong>not Multiprocessing</strong>, By use python <strong>threading package</strong> and its wonderful <strong>signal</strong> feature, you can achieve what you want. </p>
</div>
<span class="comment-copy">Have you tried using multiple processes ? You could spawn a process to read your audio stream and another to process it for "glitch detection". Have a look at this: <a href="https://docs.python.org/2/library/multiprocessing.html" rel="nofollow noreferrer">docs.python.org/2/library/multiprocessing.html</a></span>
<span class="comment-copy">Thanks, I will have a look at it.</span>
<span class="comment-copy">"audio is still being recorded by the computer but it is not being read from the stream into the array" Why not? Is the stream buffer too small?</span>
<span class="comment-copy">To avoid creating your own threads, you should consider using a "callback" function (instead of <code>stream.read()</code>). In this callback function (which will run on a separate thread once the stream is started) you can write incoming audio data into a queue (e.g. <a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer">queue.Queue</a>), from which you can then comfortably read in the main thread of your program. And to avoid the manual type conversions, you could use a library that directly supports NumPy, e.g. the <a href="http://python-sounddevice.readthedocs.io/" rel="nofollow noreferrer">sounddevice</a> module (full disclosure, I'm its author).</span>
<span class="comment-copy">Links to the documentation would be helpful. What is this wonderful but mysterious "signal" feature? Do you by any chance mean <a href="https://docs.python.org/3/library/threading.html#threading.Event" rel="nofollow noreferrer">threading.Event</a>? Another thing that might be helpful is <a href="https://docs.python.org/3/library/queue.html" rel="nofollow noreferrer">queue.Queue</a>.</span>
