<div class="post-text" itemprop="text">
<p>There seems to be (at least) two different methods of getting a parent directory path in Python, both of which I've seen in common usage. Are the following equivalent or am I missing something?</p>
<pre><code>os.path.dirname(my_dir)

os.path.join(my_dir, os.pardir)
</code></pre>
<p>The former is shorter, but possibly less clear (especially when going up more than 1 layer). I'm struggling to think of any other possible uses for os.pardir or os.path.pardir?</p>
<blockquote>
<p>Zen of Python: "There should be one-- and preferably only one --obvious way to do it"</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>They're not equivalent.</p>
<p>The difference lies in how paths ending with <code>os.sep</code> are handled:</p>
<pre><code>&gt;&gt;&gt; os.path.dirname('/foo/bar/')
'/foo/bar'
</code></pre>
<p>But:</p>
<pre><code>&gt;&gt;&gt; os.path.join('/foo/bar/', os.pardir)
'/foo/bar/..'
&gt;&gt;&gt; os.path.abspath('/foo/bar/..')
'/foo'
</code></pre>
<hr/>
<p>So which one should you use? Neither. Use the <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer">pathlib module</a> instead:</p>
<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; Path('/foo/bar/').parent
PosixPath('/foo')
&gt;&gt;&gt; str(Path('/foo/bar/').parent)
'/foo'
</code></pre>
<p>If you absolutely cannot use pathlib, stick with <code>os.path.dirname</code>. Scenarios where you want to have a pardir segment (<code>..</code>) in your file paths are extremely rare and they're more likely to cause problems than anything else.</p>
</div>
<div class="post-text" itemprop="text">
<p>Check the following lines. The parent directory is given by the first one (in this case, for html it is /var/www). <strong>os.pardir</strong> shows a '..' which is a constant used almost by most of the Windows and POSIX based OSes to refer a parent directory. When you do a join on it with 'my_dir', you get my_dir + '..' which is not what you might need.</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; a = "/var/www/html"
&gt;&gt;&gt; os.path.dirname(a)
'/var/www'
&gt;&gt;&gt; os.path.join(a, os.pardir)
'/var/www/html/..'
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Those two things aren't equivalent. If you read the <a href="https://docs.python.org/2/library/os.path.html" rel="nofollow noreferrer">documentation</a> you'll see that <code>dirname</code> is just returning the directory of the path your provide.</p>
<p>So <code>os.path.dirname("/foo/bar/file.txt")</code> will return <code>/foo/bar</code> and <code>os.path.dirname("/foo/bar/")</code> will also return <code>/foo/bar</code></p>
<p>As the name suggests, <code>os.path.join</code> joins path fragments together. </p>
<p>So if I wanted to get <code>/foo/bar/file.txt</code> I could use <code>os.path.join("/foo/bar/", "file.txt")</code>. In the example you've given, <code>os.path.join("/foo/bar/", os.pardir)</code> would give <code>/foo/bar/..</code>.</p>
<p>The other way that does often get used is:</p>
<pre><code>parent, _ = os.path.split("/foo/bar/file.txt")
</code></pre>
<p>Where <code>parent</code> is the parent directory, and the value assigned to <code>_</code> is <code>file.txt</code>. The reason for this is that <code>split</code> and <code>dirname</code> are doing two slightly different things. <code>split</code> is returning the name of the parent directory, and the file name, whereas <code>dirname</code> is returning only the first part, and essentially a shorthand method for the line above. </p>
<p>There really aren't a lot of use cases for <code>pardir</code>. If you want to see some, check out <a href="http://www.programcreek.com/python/example/448/os.pardir" rel="nofollow noreferrer">this</a>.</p>
</div>
<span class="comment-copy">the obvious way to go up 1 directory would be the first one, wouldn't it?</span>
<span class="comment-copy">It was the trailing slash that had confused me:  <code>os.path.dirname('/foo/bar/') != os.path.dirname('/foo/bar/')</code> where as <code>os.path.join('/foo/bar/', os.pardir) ==  os.path.join('/foo/bar', os.pardir)</code>  I'll try and use pathlib in future :)</span>
