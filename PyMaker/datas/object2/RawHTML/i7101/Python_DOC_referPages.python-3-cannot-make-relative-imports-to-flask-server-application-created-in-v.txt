<div class="post-text" itemprop="text">
<p>I set the <code>FLASK_APP</code> to <code>api.py</code> and then run <code>flask run</code>, but then 
I receive the error <code>SystemError: Parent module '' not loaded, cannot perform relative import</code> . There's no error on PyCharm whatsoever, which confirms that syntactically this is correct. </p>
<p><strong>api.pi</strong></p>
<pre><code>from . import models 
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello_world():
    return 'Hello, Welcome to the API!'
if __name__ == '__main__':
    app.run()
</code></pre>
<p><strong>The directory structure</strong></p>
<pre><code>           ├── ProjectDirectory
           │    ├── flask-api
           │    │   ├── venv
           │    │   ├── api.py
           │    │   └── models.py
           │    ├── modelpackage
           │    │   ├── __init__.py
           │    │   ├── classA.py
           │    │   ├── classB.py
           │    │   ├── helpers.py
           │    │   └── simplescript.py
</code></pre>
<p>As you can see above, both <code>api.py</code> and <code>models.py</code> are in the same directory, and using the <code>from . import models</code> line should import the script's code into <code>api.py</code> . For reference, this flask server was made using <code>virtualenv</code>, following the official Flask docs, hence there is a <code>venv</code> directory in the <code>flask-api</code> directory. </p>
<p>Also, <code>models.py</code> further imports stuff from the <code>modelpackage</code>, so that's why I included it above for completeness. </p>
<p>Does this have something to do with Flask/VirtualEnv/Directory structure? </p>
</div>
<div class="post-text" itemprop="text">
<p>When module is used as main its name is <code>__main__</code> . And so relative imports do not work. You should use absolute imports.
i.e
<code>from flask_api import models</code></p>
<p>Here is link for more info <a href="https://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow noreferrer">Documentation</a></p>
<blockquote>
<p>Note that relative imports are based on the name of the current module. Since the name of the main module is always "<strong>main</strong>", modules intended for use as the main module of a Python application must always use absolute imports.</p>
</blockquote>
<p><strong>Note:</strong> According to PEP8 use absolute imports rather than relative ones.</p>
</div>
<span class="comment-copy">actually I realised from your answer that I forgot to add an <code>__init__.py</code></span>
<span class="comment-copy">Yes. that would work but not when current module's name is <code>__main__</code></span>
