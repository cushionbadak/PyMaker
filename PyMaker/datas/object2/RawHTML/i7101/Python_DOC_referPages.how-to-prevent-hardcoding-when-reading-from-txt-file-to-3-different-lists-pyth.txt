<div class="post-text" itemprop="text">
<p>I am creating a code in which it reads information from a txt-file and stores the information on three separate lists. The code I have created does this, but in a pretty hardcoded manner. My question is if there is any better way to read from the file by for example using a for-loop or anything since the code at this point is repeating itself.</p>
<p>The code I have created is:</p>
<pre><code>def load():
with open("kurser.txt") as share_price_time:
    share_price_list_1 = []
    share_price_list_2 = []
    share_price_list_3 = []
    row_number = 0
    for row in share_price_time:
        if 36 &lt; row_number &lt; 67:
            info_1 = row.strip().split("\t")
            share_price_list_1.append(info_1[1])
        elif 104 &lt; row_number &lt; 135:
            info_2 = row.strip().split("\t")
            share_price_list_2.append(info_2[1])
        elif 172 &lt; row_number &lt; 203:
            info_3 = row.strip().split("\t")
            share_price_list_3.append(info_3[1])
        row_number = row_number + 1
</code></pre>
<p>Thank you in advance for your help!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a> to read out those contiguous portions and then process each line into a list which is appended to a parent list:</p>
<pre><code>from itertools import islice

indices = [(37, 67), (105, 135), (173, 203)]

def load():
   with open("kurser.txt") as share_price_time:
      lst = []
      for st, sp in indices:
         lst.append([r.strip().split("\t")[1] 
                               for r in islice(share_price_time, st, sp)])
         share_price_time.seek(0)
</code></pre>
<p>The list of indices are easily amendable and can easily be passed as part of the function arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can read entire filr first and store slices:</p>
<pre><code>with open('kurser.txt') as f:
    x = f.readlines()

a, b, c = x[37:67], x[105:135], x[173:203]
</code></pre>
<p>A slice is configured [Start Position (included):End Position (excluded)].</p>
<p><a href="https://docs.python.org/2/tutorial/introduction.html#lists" rel="nofollow noreferrer">See Docs Here</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If rowcount is the only way of splitting the file, maybe something like this:</p>
<pre><code>share_price_spec = [(37,67), (105,135), (173,203)]
share_price_lists = []

with open("c:\Python\data.txt") as share_price_time:
    test = share_price_time.readlines()
    for price in share_price_spec:
        row_start,row_end = price[0], price[1]
        share_price_lists.append( test[row_start: row_end])

print(share_price_lists)
</code></pre>
<p>First create a file spec containing the line blocks you are interested in. Then read the entire file into memory (assuming the file is not too large) and use the file spec to slice the file into the separate sections. Should be easy to maintain because you only have to change the file spec to read more blocks. There's a few extra unnecessarily lines in my sample code, but its worth it for readability IMO.</p>
<p>If you prefer, you can change share_price_spec into a list of directories or a list of named slices for future readability. </p>
</div>
<span class="comment-copy">Interesting! I will test it right away! :)</span>
<span class="comment-copy">Hmm it seems to give me an invalid syntax over the row: for r in islice(share_price_time, st, sp))]</span>
<span class="comment-copy">@Jurkka Ooops typo. Fixed.</span>
<span class="comment-copy">Nice, yes it seems to work now :) but sorry if its a stupid question but where is the information stored now? I tried to print the list "lst", but nothing prints! Maybe im doing it wrong? EDIT: it works now haha sorry</span>
<span class="comment-copy">@Jurkka It should not be empty. Did you already read from the file previously? Try running this code separately.</span>
<span class="comment-copy">Reading the entire file into memory is not a very good idea here since you don't how large the file is, and you only need a part of it. Besides, the start and stop indices for the slices are wrong.</span>
<span class="comment-copy">@MosesKoledoye You're right didn't see he used larger than and not equal and larger, edited.</span>
