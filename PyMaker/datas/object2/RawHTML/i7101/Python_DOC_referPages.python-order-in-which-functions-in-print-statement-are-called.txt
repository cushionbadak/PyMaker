<div class="post-text" itemprop="text">
<p>Let's say I have</p>
<pre><code>def foo(n):
    print("foo",n)

def bar(n):
    print("bar",n)

print("Hello",foo(1),bar(1))
</code></pre>
<p>I would expect the output to be:</p>
<pre><code>Hello
foo 1 None
bar 1 None
</code></pre>
<p>But instead I get something which surprised me:</p>
<pre><code>foo 1
bar 1
Hello None None
</code></pre>
<p>Why does Python call the functions first before printing the "Hello"? It seems like it would make more sense to print "Hello", then call <code>foo(1)</code>, have it print its output, and then print "None" as it's return type. Then call <code>bar(1)</code> and print that output, and print "None" as it's return type. Is there a reason Python (or maybe other languages) call the functions in this way instead of executing each argument in the order they appear?</p>
<p><strong>Edit</strong>: Now, my followup question is what's happening internally with Python somehow temporarily storing return values of each argument if it's evaluating the expressions left to right? For example, now I understand it will evaluate each expression left to right, but the final line says <code>Hello None None</code>, so is Python somehow remembering from the execution of each function that the second argument and third arguments have a return value of <code>None</code>? For example, when evaluating <code>foo()</code>, it will print <code>foo 1</code> and then hit no return statement, so is it storing in memory that <code>foo</code> didn't return a value?</p>
</div>
<div class="post-text" itemprop="text">
<p>Quoting from the <a href="https://docs.python.org/3/reference/expressions.html#evaluation-order" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p><strong>Python evaluates expressions from left to right.</strong> Notice that while evaluating an assignment, the right-hand side is evaluated before the left-hand side.</p>
</blockquote>
<p>Bold emphasis mine. So, all expressions are first evaluated and then passed to <code>print</code>.</p>
<p>Observe the byte code for the print call:</p>
<pre><code>  1           0 LOAD_NAME                0 (print)
              3 LOAD_CONST               0 ('Hello')
              6 LOAD_NAME                1 (foo)
              9 LOAD_CONST               1 (1)
             12 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             15 LOAD_NAME                2 (bar)
             18 LOAD_CONST               1 (1)
             21 CALL_FUNCTION            1 (1 positional, 0 keyword pair)
             24 CALL_FUNCTION            3 (3 positional, 0 keyword pair)
             27 RETURN_VALUE
</code></pre>
<p><code>foo</code> (<code>LINE 12</code>) and <code>bar</code> (<code>LINE 21</code>) are first called, followed by <code>print</code> (<code>LINE 24</code> - 3 positional args).</p>
<p>As to the question of where these intermediate computed values are stored, that would be the <a href="https://github.com/python/cpython/blob/master/Python/ceval.c#L3344" rel="nofollow noreferrer">call stack</a>. <code>print</code> accesses the return values simply by poping them off of the stack. <sub><a href="https://stackoverflow.com/questions/45537355/python-order-in-which-functions-in-print-statement-are-called/45537394?noredirect=1#comment78035120_45537394">- Christian Dean</a></sub></p>
</div>
<div class="post-text" itemprop="text">
<p>As is specified in the <a href="https://docs.python.org/3.3/reference/expressions.html#evaluation-order" rel="nofollow noreferrer"><em>documentation</em></a>:</p>
<blockquote>
<p>Python <strong>evaluates expressions from left to right</strong>. Notice that while evaluating an assignment, the right-hand side is evaluated before the left-hand side.</p>
</blockquote>
<p>This thus means that if you write:</p>
<pre><code>print("Hello",foo(1),bar(1))
</code></pre>
<p>It is equivalent to:</p>
<pre><code>arg1 = "Hello"
arg2 = foo(1)
arg3 = bar(1)
print(arg1,arg2,arg3)
</code></pre>
<p>So the <strong>arguments are evaluated before the function call</strong>.</p>
<p>This also happens when we for instance have a tree:</p>
<pre><code>def foo(*x):
    print(x)
    return x

print(foo(foo('a'),foo('b')),foo(foo('c'),foo('d')))
</code></pre>
<p>This prints as:</p>
<pre><code>&gt;&gt;&gt; print(foo(foo('a'),foo('b')),foo(foo('c'),foo('d')))
('a',)
('b',)
(('a',), ('b',))
('c',)
('d',)
(('c',), ('d',))
(('a',), ('b',)) (('c',), ('d',))
</code></pre>
<p>Since Python thus evaluates arguments left-to-right. It will first evaluate <code>foo(foo('a'),foo('b'))</code>, but in order to evaluate <code>foo(foo('a'),foo('b'))</code>, it first needs to evaluate <code>foo('a')</code>, followed by <code>foo('b')</code>. Then it can all <code>foo(foo('a'),foo('b'))</code> with the results of the previous calls.</p>
<p>Then it wants to evaluate the second argument <code>foo(foo('c'),foo('d'))</code>. But in order to do this, it thus first evaluates <code>foo('c')</code> and <code>foo('d')</code>. Next it can evaluate <code>foo(foo('c'),foo('d'))</code>, and then finally it can evaluate the final expression: <code>print(foo(foo('a'),foo('b')),foo(foo('c'),foo('d')))</code>.</p>
<p>So the evaluation is equivalent to:</p>
<pre><code>arg11 = foo('a')
arg12 = foo('b')
arg1 = foo(arg11,arg12)
arg21 = foo('c')
arg22 = foo('d')
arg2 = foo(arg11,arg12)
print(arg1,arg2)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The enclosing function is not called until all of its arguments have been evaluated. This is consistent with the basic rules of mathematics that state that operations within parentheses are performed before those outside. As such <code>print()</code> will <em>always</em> happen after both <code>foo()</code> and <code>bar()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The answer is simple:
In python the arguments of a function like <code>print</code> are always first evaluated left to right. </p>
<p>Take a look at this stackoverflow question: <a href="https://stackoverflow.com/q/16201362/4879665">In which order is an if statement evaluated in Python</a> </p>
<p>And <code>None</code> is just the return value of the function. It executes the function first and then print its return value</p>
</div>
<span class="comment-copy">The arguments are always first evaluated left to right...</span>
<span class="comment-copy">I've pruned the dupe target list a bit. Most of the targets were talking about order of argument evaluation relative to other arguments; only one of them discussed order of argument evaluation relative to the execution of the function the arguments are passed to, which is what this question is about.</span>
<span class="comment-copy">@user2357112 Thank you. I edited my question because there's still another part of it I'm not quite sure I understand how it works.</span>
<span class="comment-copy">@rb612 Well my question answers that. The byte code will help you understand. The intermediate values are computed, stored, and then finally passed to the function.</span>
<span class="comment-copy">Also, a function returning no values actually returns <code>None</code> by default.</span>
<span class="comment-copy">This is great! Thank you! Just curious, is there a part in the byte code that is showing that Python is storing the return value of both <code>foo</code> and <code>bar</code>?</span>
<span class="comment-copy">@rb612 Ah. Good question. The byte code does not show this most likely since it is an implementation detail. You can see it is passed <code>(3 positional, 0 keyword pair)</code> so you know it has to be stored somewhere.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ <i>"so you know it has to be stored somewhere."</i> - Yes. Specifically <a href="https://github.com/python/cpython/blob/master/Python/ceval.c#L3344" rel="nofollow noreferrer">it is stored in Python's call stack</a>. In the example given, <code>print</code> access the return values simply by poping them off of the stack.</span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ Have at it :-)</span>
<span class="comment-copy">@randomir Sure. I appreciate you looking out for the community.</span>
<span class="comment-copy">This makes sense, so is the return value of <code>None</code> just stored somewhere for <code>foo</code> and <code>bar</code> until the <code>print</code> statement is called? It seems like it would make sense for <code>None</code> to appear immediately following the execution of <code>foo</code> and <code>bar</code> respectively.</span>
<span class="comment-copy">Operations within parentheses aren't always performed before those outside, in math or in Python. While it's common to teach precedence as "order of operations" in early math classes, even in math, it's just an argument grouping convention.</span>
<span class="comment-copy">@rb612: Nothing can "appear", since <code>print()</code> hasn't even been invoked yet.</span>
<span class="comment-copy">Thank you, this is very helpful. I edited my question with a followup.</span>
