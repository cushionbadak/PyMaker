<div class="post-text" itemprop="text">
<p>I have a <strong>Python</strong> program which code contains the following fragment:</p>
<pre><code>def Main():
    pid = os.getpid()
    print 'Process id: {}'.format(pid)
</code></pre>
<p>then, in other part of the code it keeps listening on its <strong>STDIN</strong>.</p>
<p>This process outputs the following:</p>
<pre><code>Process id: 3824
</code></pre>
<p>From another Python process I want to write to the <strong>STDIN</strong> of the process above given its <strong>PID</strong>.</p>
<p><strong>My question is:</strong> what code I need to do that from the second process?</p>
<p>I'm using <strong>Windows</strong>.</p>
</div>
<div class="post-text" itemprop="text">
<p>A program can only redirect the standard input and output of processes it creates("child processes"). To talk to another process using standard output, that process must already be listening to you.</p>
<p>It's the OS that controls what the file descriptors of a process refer to. That is, the <code>stdin</code> of your process will be determined by the os and the context in which the programs are executed. To allow interprocess communication, you could look into the facilities provided by the OS for that, for example <a href="https://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/redirection.mspx?mfr=true" rel="nofollow noreferrer">using a shell script and the piping operator</a>.</p>
<p>What you'd want is a named pipe, which is basically a file-like object which you can write and read from, and which act as a bridge between processes. Unfortunately, python doesn't seem to have "native" support for that on Windows. You need the <a href="https://sourceforge.net/projects/pywin32/" rel="nofollow noreferrer">python for windows extension</a> for that.</p>
<p>Alternatively, you could use a <a href="https://docs.python.org/2/library/socket.html" rel="nofollow noreferrer">socket</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of writing to STDIN use Queue to communicate between processes 
    from multiprocessing import Process, Queue</p>
<pre><code>def f(q):
    q.put([42, None, 'hello'])

q = Queue()
p1 = Process(target=f, args=(q,))
p1 = Process(target=f, args=(q,))
# start and join
</code></pre>
<p>In another process do</p>
<pre><code>print(q.get())    # prints "[42, None, 'hello']"
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/ipc.html" rel="nofollow noreferrer">docs.python.org/3/library/ipc.html</a></span>
<span class="comment-copy">@cᴏʟᴅsᴘᴇᴇᴅ, could you be a bit more specific?, thanks</span>
<span class="comment-copy">Look at the subprocess module and the ways to control input and output of the subprocess. Then ask a more precise question.</span>
<span class="comment-copy">@CoryMadden, that example is for Linux and doesn't use the PID of the process. I need the code for Windows and using the PID of the process</span>
<span class="comment-copy">Sorry, I admittedly don't know much about Windows.</span>
<span class="comment-copy">Named pipes are supported by the <a href="https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.connection" rel="nofollow noreferrer">multiprocessing module</a> via <code>connection.Listener</code> and <code>connection.Client</code>. Other functions in multiprocessing implicitly use named pipes, but these let you explicitly set the name/address, e.g. <code>r'\\.\PIPE\spam'</code>.</span>
<span class="comment-copy">Answering the question as posed would involve calling <code>AttachConsole</code> and <code>WriteConsoleInput</code>, assuming the process is using a console for its standard input. But that's not a normal approach, especially if you have control of the source for both the server and the client.</span>
