<div class="post-text" itemprop="text">
<p>It is general in programming in Python that when I have a function or something which when I call, it blocks my code to proceed. So I think the best way to unblock is using threads but If I need to stop a thread what should I do?
I tried <a href="https://stackoverflow.com/questions/323972/is-there-any-way-to-kill-a-thread-in-python">this reference</a> and I wrote this simple program:</p>
<pre><code>import threading
from time import sleep
class my_thread(threading.Thread):
    """Thread class with a stop() method. The thread itself has to check
    regularly for the stopped() condition."""

    def __init__(self):
        super(my_thread, self).__init__()
        self._stop_event = threading.Event()

    def stop(self):
        print("stopping the thread")
        self._stop_event.set()

    def stopped(self):
        value=self._stop_event.is_set()
        print("value of stop event is",value)
        return value
    def run(self):
        print("running the thread")
        print("start function startt()")
        self.startt()

    def startt(self):
        print("it is going to wait forever")
        while True:
            #wait forever
            pass
        print("This line never execute")


def main():
    for i in range(0,3):
        print("it is the main function")
        sleep(1)


if __name__+'__main__':
    thr=my_thread()
    thr.start()

    sleep(5)
    thr.stop()
    thr.stopped()
    print("calling the main function")
    main()
    print("Exiting the whole program")
</code></pre>
<p>My problem is this program actually stop the thread but after printing the last line the program still runs. What I want is if I call the stop function <code>thr.start()</code> it starts the thread and run <code>#wait forever line</code> and if I call the stop function <code>thr.stop()</code> it stop the whole class and returns from <code>#wait forever line</code> to the main function.</p>
<p>EDIT--
As @a_guest answer I can fix it but my problem is general for example If I had this code instead of <code>while True</code>:</p>
<pre><code>pythoncom.PumpMessages()
</code></pre>
<p>(or any other code)</p>
<p>what should I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>Instead of</p>
<pre><code>while True:
    ...
</code></pre>
<p>you should use</p>
<pre><code>while not self.stopped():
    ...
</code></pre>
<p>Then it will break out of the <code>while</code> loop once you <code>stop()</code> the thread.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't "abort" a running thread so to stop it you'll have to have a mechanism in the thread itself that periodically checks if it should stop. </p>
<p>Regular threads keep running while the rest of your program (process) exits.
If you make your thread a 'daemon' thread however, it will get killed automatically when your program exits. To do that, set <code>self.daemon=True</code> in your thread's init method. More info <a href="https://docs.python.org/3/library/threading.html#threading.Thread.daemon" rel="nofollow noreferrer">https://docs.python.org/3/library/threading.html#threading.Thread.daemon</a></p>
</div>
<span class="comment-copy">what you want to do is check for you event instead of the <code>while True</code>, and no you can't use 3'rd party blocking calls if you want to have responsive stop, aim to use non-blocking APIs instead like <code>something.isthereanythingtodo() then something.do() else loop</code></span>
<span class="comment-copy">Thanks for the answer but what about a line with blocking like <code>pythoncom.PumpMessages()</code> how can I unblock this?</span>
<span class="comment-copy">I am not familiar with <code>pythoncom</code> but to give an example <a href="https://docs.python.org/3/library/queue.html#queue.Queue.get" rel="nofollow noreferrer"><code>Queue.get</code></a> has a <code>timeout</code> parameter which can be set in order to make it <i>not</i> blocking forever (at most <code>timeout</code> seconds). <code>pythoncom.PumpMessages()</code> has probably something similar, if not you'll have to find a way around manually, but that's worth another question.</span>
<span class="comment-copy">No, I don't want to set a timeout what I want is to exit from blocking line immediately if I call a related function whenever needed.</span>
<span class="comment-copy">@MasoudR. You can't do that gracefully. Either you kill the thread (on OS basis, Python offers functionality for that) or you wait for the method call to return. No timeout means you'll wait forever. This is due to the internals of the invoked method, nothing you can control in your invoking thread class.</span>
<span class="comment-copy">Ok so If I want to use timeout how can I implement? I mean I need to have control for that timeout so when I want to decrease it or something?</span>
<span class="comment-copy">Thanks but if I use daemon it terminates the whole program, suppose that In my main() function I have a while True that must run forever how about that?</span>
<span class="comment-copy">I am afraid I don't understand your question. Ofcourse you have to have <i>something</i> that is running or waiting on something? If there's nothing to run, the program stops, obviously.</span>
<span class="comment-copy">@IrmendeJong I guess the question was about how to terminate a specific thread (which is stuck in a blocking call) from the main thread while the latter is still running.</span>
<span class="comment-copy">You already got the answer to that: you can't.</span>
<span class="comment-copy">@IrmendeJong so how do I figure it out?</span>
