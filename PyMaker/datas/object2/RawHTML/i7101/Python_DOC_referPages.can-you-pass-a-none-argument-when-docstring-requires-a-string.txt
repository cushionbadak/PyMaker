<div class="post-text" itemprop="text">
<p>Ok, this question has probably been answered somewhere but my Google-fu hasn't found the right combination of keywords yet.</p>
<p>I have a function that accepts a string, but when I pass None, Pycharm's inspection is flagging a type error. Is this an error in the linter? Does None count as a string? I know I can call the function with an empty string, but I think I should be able to use None as well.</p>
<pre><code>def my_func(some_str):
""" does something
Arguments:
some_str (str): a string
"""
    # do something

...

my_func(None)  &lt;-- throws Expected type 'str', got 'None' instead
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As a dissenting opinion, Python is not strongly typed so for pycharm's linter to highlight that as an error seems a little odd to me.</p>
<p>Of course there are many functions which legitimately need a string, but I'm sure i saw somewhere that 'good practice' for that was a function that looked more like this:</p>
<pre><code>def myfunct(s):
    try:
        s = str(s)
    except TypeError:
        raise TypeError('message explaining function usage')
    # actual function
</code></pre>
<p>This works with anything that can be coerced into a string, which seems more sensible than requiring literally a string.</p>
<p>Am I nuts?</p>
</div>
<div class="post-text" itemprop="text">
<p><code>None</code> does not count as a string. <code>None</code> is the sole member of the class <code>NoneType</code>.  </p>
<p>To do what you want, arrange for your function to accept an optional string argument.</p>
<pre><code>def my_func(some_str: str = None):
</code></pre>
<p>Then don't pass it <code>None</code>, pass it nothing:</p>
<pre><code>a = my_func()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First to answer your question <code>None</code> is not a <code>str</code> It is the sole value of <code>type.Nonetype</code> it is a python Built in Contstant. Read about it <a href="https://docs.python.org/3/library/constants.html" rel="nofollow noreferrer">here</a>.
And there are many ways to get around/handle possible <code>None</code> input</p>
<p><strong>1. To get around it, not going to handle None:</strong></p>
<p>is expecting <code>str</code> so of course, it throws an error. just pass in <code>""</code> instead. but in this case calling <code>my_func(None)</code> would still give you an error.</p>
<pre><code>my_func("") 
</code></pre>
<p><strong>2. To Handle possible <code>None</code> input:</strong></p>
<p>if you want to handle <code>None</code> as one of possible input parameter then set your parameter  to <strong>optional parameter</strong> with <code>*</code> that way you can input <code>None</code> and not get an error</p>
<pre><code>def my_func(*some_str):
</code></pre>
<p><strong>OR</strong></p>
<p><strong>Default your input to <code>None</code></strong> if the value user pass in is not <code>None</code> then you know user pass in something else: This allows you do to <code>my_func(None)</code> and not get an error</p>
<pre><code>def my_func(some_str = None):
  if some_str:
    #do something
</code></pre>
<p>Note: this also allows you treat <code>None</code> and <code>''</code> equally (thanks to Stael for pointing out)</p>
</div>
<span class="comment-copy">just pass empty string (<code>""</code>) instead of None</span>
<span class="comment-copy">No because when performing an action on a string, it is only able to perform that operation on something which is of the type <code>str</code> however the value of <code>None</code> is a <code>NoneType</code>, which is its own individual type, meaning that <code>None</code> can not be used in place of a <code>str</code>, however you could use empty quotes, <code>""</code> which would pass in a string with no content</span>
<span class="comment-copy"><code>None</code> is not a string. <code>None</code> is <code>None</code>, a string is a <code>str</code>. PyCharm itself won't "throw" anything, neither will Python itself. Only some type check in the function itself might raise an actual error. So I'm unclear what you're askingâ€¦ if the function rejects <code>None</code> as a valid argument, then the question is answering itself, no?</span>
<span class="comment-copy">this seems like odd behaviour from pycharm to me. because python isn't strongly typed there is never any reason you can't pass a different type to the function, the function should handle appropriately.</span>
<span class="comment-copy">I think the reason PyCharm is complaining about it, is because of the docstring that the code contains. I haven't used docstrings in Pycharm, so I don't know for sure, but that's the only reason I can think of.</span>
<span class="comment-copy">I like this as it follows python's ask for forgiveness model. Also glad to see there are differences of opinion - it's not a straightforward question.</span>
<span class="comment-copy">In the actual code, there are more positional args after the str arg, so turning it into a kwarg is not an option, unfortunately. I don't want to make changes to the interface if I can avoid it.</span>
<span class="comment-copy">Mmm, that wasn't clear from your question. In that case I would simply forget about the type hint.</span>
<span class="comment-copy">Sorry, guess I simplified it too much :-)</span>
<span class="comment-copy">If you really have to have the type hint because it's an inflexible project standard or something, then do: <code>from typing import Union</code> followed by <code>def my_func(some_str: Union[str,None]):</code> That expresses what you want and will shut PyCharm's linter up.</span>
<span class="comment-copy">if you do <code>if some_str:</code> then it will treat <code>None</code> and <code>''</code> equally, which is closer to what the OP is talking about.</span>
<span class="comment-copy">yup yup let me edit it. Thank you for pointing out</span>
