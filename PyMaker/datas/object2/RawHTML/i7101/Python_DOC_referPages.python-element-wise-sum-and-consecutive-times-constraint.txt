<div class="post-text" itemprop="text">
<p>I have data like this. </p>
<pre><code>    a = [10, 11, 12, 13, 14]
    b = [15, 16, 17, 18, 19]
    c = [20, 21, 22, 23, 24]
</code></pre>
<ol>
<li>I want to check if the sum of ith elements of each of the list, i.e., element-wise sum add up to greater than 50, where i = [0, 1, 2, 3, 4]. </li>
<li>I also want to check if the sum is greater than 50 three consecutive times.</li>
</ol>
<p>Is there a way to do this as a constraint satisfaction problem in python?</p>
<p>I tried the following (using this CSP module: <a href="https://labix.org/python-constraint" rel="nofollow noreferrer">https://labix.org/python-constraint</a>) but this prints a combination of all possible values in each of the list but I want to do an element-wise sum.</p>
<pre><code>    from constraint import *

    problem = Problem()
    problem.addVariable("a", [10, 11, 12, 13, 14])
    problem.addVariable("b", [15, 16, 17, 18, 19])
    problem.addVariable('c', [20, 21, 22, 23, 24])

    problem.addConstraint(lambda a,b,c: a+b+c&gt;50, ("a","b","c"))

    for x in problem.getSolutions():
        print x
</code></pre>
<p>Result (72 answers total)</p>
<pre><code>    {'a': 14, 'c': 24, 'b': 19}
    {'a': 14, 'c': 23, 'b': 19}
    {'a': 14, 'c': 22, 'b': 19}
    .
    .
    .
    {'a': 10, 'c': 24, 'b': 18}
    {'a': 10, 'c': 24, 'b': 17}
</code></pre>
<p>Required answer:</p>
<pre><code>    {'a': 12, 'c': 22, 'b': 17}
    {'a': 13, 'c': 23, 'b': 18}
    {'a': 14, 'c': 24, 'b': 19}
</code></pre>
<p>Also, how do I add a constraint to check the number of consecutive times the sum  goes to greater than 50?</p>
<p>I understand that I can just do this using lambda functions but I want to use a CSP library if possible because there might be more constraints later on and also the number of lists and the number of elements in each list may go up to 1000s.</p>
<pre><code>    a = [10, 11, 12, 13, 14]
    b = [15, 16, 17, 18, 19]
    c = [20, 21, 22, 23, 24]

    z = zip(a, b, c)

    print map(lambda (x,y,z): x+y+z&gt;50, z)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I suggest you investigate <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>. Eg, here's some code that will find &amp; count runs of consecutive columns that sum to &gt;50.</p>
<pre><code>from itertools import groupby

a = [10, 11, 12, 13, 14]
b = [15, 16, 17, 18, 19]
c = [20, 21, 22, 23, 24]

data = [a, b, c]

def keyfunc(t):
    return sum(t) &gt; 50

for k, g in groupby(zip(*data), keyfunc):
    if k:
        g = list(g)
        print(g, len(g))
</code></pre>
<p><strong>output</strong></p>
<pre><code>[(12, 17, 22), (13, 18, 23), (14, 19, 24)] 3
</code></pre>
</div>
<span class="comment-copy">While I understand what you mean by "consecutive" here, that doesn't seem readily translatable into a constraint.</span>
<span class="comment-copy">Use an additional variable <code>i</code>: the <i>index</i> in the three arrays.</span>
<span class="comment-copy">About consecutive: the point of constraint programming is usually that the order in which solutions are generated is not considered. Good solvers aim to minimize the amount of time to generate the first solution, so solutions are usually generated in an unodered fashion. Compare it to a database: most databases do not offer any hard guarantees on the order of retrieval if no <code>ORDER BY</code> is specified.</span>
