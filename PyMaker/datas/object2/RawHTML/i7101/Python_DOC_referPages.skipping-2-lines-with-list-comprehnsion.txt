<div class="post-text" itemprop="text">
<p>I'm trying to utilise list comprehension for sorting data from a very large file. The file structure is like so:</p>
<pre><code>THING
info1
info2
info3
THING
info1
info2
info3
</code></pre>
<p>... and so on.</p>
<p>Basically trying to collect all info1 into a list and all info2 into another list. I have a previous script which does this, but it's slow. I'm also trying to make it object oriented so I can use the data more efficiently. </p>
<p>Old script:</p>
<pre><code>info1_data = []
info2_data = []
with open(myfile) as f:
    for line in f:
        if re.search('THING',line):
            line=next(f)
            info1_data.append(line)
            line=next(f)
            info2_data.append(line)
</code></pre>
<p>New script:</p>
<pre><code>def __init__(self, file):
    self.file = file

def sort_info1(self):
    with self.file as f:
        info1_data = [next(f) for line in f if re.search('THING',line)]
    return info1_data

def sort_info2(self):
    with self.file as f:
        info2_data = [next(f).next(f) for line in f if re.search('THING',line)]
    return info2_data
</code></pre>
<p>The new script works for getting info1_data as a list. However, to get info2_data I can't find anything for skipping 2 lines using this method. I guessed at <code>next(f).next(f)</code>. It runs but doesn't produce anything. </p>
<p>Is this possible? </p>
<p>Many thanks.</p>
<p>Following help from Moses I've this solution. The islice is very confusing though and I don't fully understand it, even after reading the python.docs. Does the iterable get the data (i.e., info1 or info2) or do the start, stop and step dictate what data is extracted?</p>
<p>islice(iterable, start, stop[, step])</p>
<pre><code>from itertools import islice
import re

class SomeClass(object):
    def __init__(self, file):
        self.file = file

    def search(self, word, i):
        self.file.seek(0) # seek to start of file
        for line in self.file:
            if re.search(word, line) and i == 0:
                line = next(self.file)
                yield line
            elif re.search(word, line) and i == 1:
                line = next(self.file)
                line = next(self.file)
                yield line

    def sort_info1(self):
        return list(islice(self.search('THING',0), 0, None, 2))

    def sort_info2(self):
        return list(islice(self.search('THING',1), 2, None, 2))


info1 = SomeClass(open("test.dat")).sort_info1()
info2 = SomeClass(open("test.dat")).sort_info2()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should the <code>seek</code> the file back to the start in order to repeat the search from the beginning of the file. Also, you could use a generator function to decouple the search operation from the production of the data. Then use <a href="https://docs.python.org/3/library/itertools.html#itertools.islice" rel="nofollow noreferrer"><code>itertools.islice</code></a> to step over lines:</p>
<pre><code>from itertools import islice

class SomeClass(object):
    def __init__(self, file):
        self.file = file

    def search(self, word):
        self.file.seek(0) # seek to start of file
        for line in self.file:
            if re.search(word, line):
                # yield next two lines
                yield next(self.file)
                yield next(self.file)

    def sort_info1(self):
        return list(islice(self.search('THING'), 0, None, 2))

    def sort_info2(self):
        return list(islice(self.search('THING'), 1, None, 2))
</code></pre>
<p>However instead of passing the file, I'll suggest you pass the path to the file instead so the file can be <strong>closed</strong> after each use, to avoid holding up resources when they are not (or not yet) needed.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do like this:</p>
<pre><code>def sort_info2(self):
    with self.file as f:
        info2_data = [(next(f),next(f))[1] for line in f if re.search('THING',line)]
    return info2_data
</code></pre>
<p>But it looks a little weird way!</p>
</div>
<span class="comment-copy">write you own <code>next</code> function that takes the number of lines to skip as a second argument with a default of 1.</span>
<span class="comment-copy">thanks! I'm new to islice... I've incorporated this into my script but it just returns the search word 'THING' as a list instead of info1 or info2 as lists. I've looked through the python docs but still don't quite follow it.</span>
<span class="comment-copy">@matman9 Are you yielding the right items from the generator function?</span>
<span class="comment-copy">should '...., 0, None, 2' in the generator return info1? thanks</span>
<span class="comment-copy">@matman9 It should. Start from <code>0</code>, till the end, stepping 2 lines at a time.</span>
<span class="comment-copy">so the search function finds the 'THING' and yields the line that its on, and the sort_info1() function returns a list from iterating from the yielded line stepping every 2 lines? sorry, I'm just trying to break it down so I can follow what it's doing.</span>
