<div class="post-text" itemprop="text">
<p>I want to use regex to match with all substrings that are completely capitalized, included the spaces.</p>
<p>Right now I am using regexp: <code>\w*[A-Z]\s]</code></p>
<p>HERE IS Test WHAT ARE WE SAYING </p>
<p>Which returns:</p>
<pre><code>HERE
IS
WHAT
ARE 
WE
SAYING
</code></pre>
<p>However, I would like it to match with all substrings that are allcaps, so that it returns:</p>
<pre><code>HERE IS 
WHAT ARE WE SAYING 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use word boundaries <code>\b</code> and <code>[^\s]</code> to prevent starting and ending spaces. Put together it might look a little like:</p>
<pre><code>import re
string = "HERE IS Test WHAT ARE WE SAYING is that OKAY"

matches = re.compile(r"\b[^\s][A-Z\s]+[^\s]\b")
matches.findall(string)

&gt;&gt;&gt; ['HERE IS', 'WHAT ARE WE SAYING', 'OKAY']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer">findall</a>:</p>
<pre><code>import re

text = 'HERE IS Test WHAT ARE WE SAYING'
print(re.findall('[\sA-Z]+(?![a-z])', text))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['HERE IS ', ' WHAT ARE WE SAYING']
</code></pre>
<p>The pattern <code>[\sA-Z]+(?![a-z])</code> matches any space or capitalized letter, that is not followed by a non-capitalized letter. The notation <code>(?![a-z])</code> is known as a negative lookahead (see <a href="https://docs.python.org/3/library/re.html#regular-expression-syntax" rel="nofollow noreferrer">Regular Expression Syntax</a>).</p>
</div>
<div class="post-text" itemprop="text">
<p>One option is to use <code>re.split</code> with the pattern <code>\s*(?:\w*[^A-Z\s]\w*\s*)+</code>:</p>
<pre><code>input = "HERE IS Test WHAT ARE WE SAYING"
parts = re.split('\s*(?:\w*[^A-Z\s]\w*\s*)+', input)
print(parts);

['HERE IS', 'WHAT ARE WE SAYING']
</code></pre>
<p>The idea here is to split on any sequential cluster of words which contains one or more letter which is <em>not</em> uppercase.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>[A-Z ]+</code> to match capital letters and spaces, and use negative lookahead <code>(?! )</code> and negative lookbehind <code>(?&lt;! )</code> to forbid the first and last character from being a space.</p>
<p>Finally, surrounding the pattern with <code>\b</code> to match word boundaries will make it only match full words.</p>
<pre><code>import re
text = "A ab ABC ABC abc Abc aBc abC C"
pattern = r'\b(?! )[A-Z ]+(?&lt;! )\b'

re.findall(pattern, text)
&gt;&gt;&gt; ['A', 'ABC ABC', 'C']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also use the following method:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'HERE IS Test WHAT ARE WE SAYING'
&gt;&gt;&gt; print(re.findall('((?!\s+)[A-Z\s]+(?![a-z]+))', s))
</code></pre>
<p><strong>OUTPUT:</strong></p>
<pre><code>['HERE IS ', 'WHAT ARE WE SAYING']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using findall() without matching leading and trailing spaces:</p>
<pre><code>re.findall(r"\b[A-Z]+(?:\s+[A-Z]+)*\b",s)                                                                            
Out: ['HERE IS', 'WHAT ARE WE SAYING']
</code></pre>
</div>
<span class="comment-copy">Oh jeez -- head in JS code. Thanks @DanielMesejo. Fixed</span>
<span class="comment-copy"><code>\b[^\s][A-Z\s]+[^\s]\b</code> will match words like <code>aBc</code> and miss short words, like <code>WE</code> if surrounded by non-capitalized words. The test string <code>A ab ABC ABC abc Abc aBc abC C</code> will output <code>['ABC ABC', 'aBc']</code></span>
<span class="comment-copy">@DanielMesejo It is now :-)  ... don't know why, but I thought I saw PHP.  I am on a cell phone at the moment.</span>
