<div class="post-text" itemprop="text">
<p>I understand the basics of <code>numpy</code> (Pandas) broadcasting but got stuck on this simple example: </p>
<pre><code>x = np.arange(5) 
y = np.random.uniform(size = (2,5)) 
z = x*y 
print(z.shape) #(2,5) 
</code></pre>
<p>My understanding of the z shape is that you had a <code>(1,5)</code> array multiplied with a <code>(2,5)</code> array, the trailing dimension for 5 is equal so you end up with a <code>2x5</code> array. Okay that sounds good. My problem is why is <code>x.shape = (5,)</code>? Isn't it one-dimensional so it's really <code>1x5</code>? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>NumPy</code> 1D array like <code>x</code> gives you shape such as <code>(5,)</code> without reshaping. If you want to treat it as 1 column matrix of shape <code>1x5</code> then do <code>np.arange(5).reshape(1,5)</code></p>
</div>
<div class="post-text" itemprop="text">
<p>The broadcasting rules are:</p>
<pre><code>Add leading singleton dimensions as needed to match number of dimensions
Scale any singleton dimensions to match dimension values
Raise error dimensions can't be matched
</code></pre>
<p>With your <code>x</code> and <code>y</code>:</p>
<pre><code>(5,) * (2,5)
(1,5) * (2,5)          # add the leading 1
(2,5) * (2,5)          # scale the 1
=&gt; (2,5)
</code></pre>
<p>If <code>y</code> was (5,2), it would raise an error, because <code>(1,5)</code> cannot be paired with <code>(5,2)</code>.  But <code>(5,1)</code> is ok, because <code>(1,5) * (5,1) =&gt; (5,5)</code>.</p>
</div>
<span class="comment-copy">In <code>numpy</code> a one-dimensional array really has just one dimension, and the shape is a single element tuple, e.g. <code>(5,)</code>.  When broadcasting <code>numpy</code> adds leading dimensions as needed, so this will be expanded as needed to (1,5), (1,1,5), etc.</span>
<span class="comment-copy">Don't forget that in python, a single element list is written as <code>[n]</code> and a single element tuple as <code>(n,)</code>. <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">docs.python.org/3/tutorial/â€¦</a>.  The shape of an array is a tuple.</span>
<span class="comment-copy">How come 1-D arrays are formatted as (# , )? I think this is what is throwing me off. I'm used to viewing it comparing AxBx format so would it look like this? :  (3,) =                 3   (1,3) =   1 x 3   (2,3,3) = 2 x 3 x 3</span>
<span class="comment-copy">Usually we talk about a 2d array shape as (rows, columns).  So <code>(1,5)</code> would be a single row, 5 columns, (5,1) is 5 rows, 1 column, or a single column array.  For broadcasting purposes a (5,) is treated the same as a (1,5).</span>
