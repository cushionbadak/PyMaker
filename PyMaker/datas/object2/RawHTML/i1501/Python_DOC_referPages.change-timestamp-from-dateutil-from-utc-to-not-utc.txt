<div class="post-text" itemprop="text">
<p><strong>What exists</strong></p>
<pre><code>import datetime
import dateutil.parser
import time

timestamp = dateutil.parser.parse(response["body"]["inserted_at"])
</code></pre>
<p><strong>Whats the problem</strong><br/>
This timestamp is <code>UTC</code>, but it should be <code>UTC+1</code>, or TimeZone Europe,Zurich</p>
<p><strong>Question</strong><br/>
What shall I add to the existing code to have timestamp<code>as Europe,Zurich, and no more</code>UTC`?</p>
<p>Thanks in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to use the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone" rel="nofollow noreferrer"><code>astimezone</code></a> method of <code>datetime.datetime</code>. If you have a datetime in any time zone (e
g. UTC) and want it in another zone, you use <code>dt_new_tz = dt_old_tz.astimezone(new_tz)</code></p>
<p>In this case, you want:</p>
<pre><code>from dateutil import tz
zurich_tz = tz.gettz("Europe/Zurich")
new_ts = timestamp.astimezone(zurich_tz)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <code>astimezone()</code> method shown by Paul will adjust the date and time to match the new timezone.  <strong>This is usually what you want.</strong>  For example, if the timestamp you have is UTC, and you want to convert it to UTC+1 (or any other timezone), then you need to add an hour (or do some other arithmetic), which <code>astimezone()</code> does for you.  It also takes care of daylight saving time or summer time, as well as numerous <a href="https://www.bbc.com/news/world-asia-16351377" rel="nofollow noreferrer">more substantial</a> timezone irregularities.</p>
<p>However, sometimes this is not what you want.  For example, if you have a UTC+1 timezone which is incorrectly labeled as UTC, then <code>astimezone()</code> will add an hour, producing a UTC+2 datetime which is incorrectly labeled UTC+1.  If that describes your problem, then you should use the <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.replace" rel="nofollow noreferrer"><code>replace()</code></a> method instead of <code>astimezone()</code>.  This will simply "relabel" the timezone without doing any conversion arithmetic.  For example, it will convert 14:00 UTC to 14:00 UTC+1.  This is most useful in cases where you have a timestamp with no timezone information, or a parser that isn't smart enough to understand the timezone information given.</p>
<p>(You need to know which of these two problems you have.  It is not possible to automatically determine whether your datetime object has the "right" timezone information, because Python cannot guess your intentions.)</p>
</div>
<span class="comment-copy">What is the value of <code>response["body"]["inserted_at"]</code>?  Presumably some string containing a timestamp... does it have a time zone in it?</span>
<span class="comment-copy">It is UTC in that timestamp</span>
<span class="comment-copy">Thank you Paul for this. It was the copy paste solution which worked perfect.</span>
<span class="comment-copy">Likely if the timestamp contained an accurate time zone, the parser did the right thing.</span>
<span class="comment-copy">@Paul: As I said, <code>astimezone()</code> is <i>usually</i> the right thing to use.</span>
<span class="comment-copy">Thank you Kevin for the knowledge to understand better.</span>
