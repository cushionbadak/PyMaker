<div class="post-text" itemprop="text">
<p>I want to create matrixes that contain range of integers like</p>
<pre><code>[[range(1, 3), 0, 0],
 [range(5, 7), range(0, 2), 0],
 [0, range(1, 3), 0]]
</code></pre>
<p>Answer that I expected is</p>
<pre><code>[[[1 0 0], [5 0 0], [0, 1, 0]]
 [[2 0 0], [5 0 0], [0, 1, 0]]
 [[1 0 0], [6 0 0], [0, 1, 0]]
 [[2 0 0], [6 0 0], [0, 1, 0]]
 [[1 0 0], [5 0 0], [0, 2, 0]]
 [[2 0 0], [5 0 0], [0, 2, 0]]
 [[1 0 0], [6 0 0], [0, 2, 0]]
 [[2 0 0], [6 0 0], [0, 2, 0]]]
</code></pre>
<p>rather than range object inside matrix.</p>
<p>I can achieve my goal with using loops</p>
<pre><code>def foo(p1_range, p2_range, p3_range)
    for p1 in range(p1_range):
        for p2 in range(p2_range):
            for p3 in range(p3_range):
                yield [[p1 0 0], [p2 0 0], [0, p3, 0]]
</code></pre>
<p>Is there any pythonic way to solve this?</p>
<p>Note: I normaly need 7 parameters in my main code... It looks awful with this way.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a> to reduce indentation levels and eliminate the nested loops:</p>
<pre><code>from itertools import product

def foo(p1_range, p2_range, p3_range):
    for p1, p2, p3 in product(p1_range, p2_range, p3_range):
        yield [[p1, 0, 0], [p2, 0, 0], [0, p3, 0]]
</code></pre>
</div>
