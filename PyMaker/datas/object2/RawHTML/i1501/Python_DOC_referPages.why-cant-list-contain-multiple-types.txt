<div class="post-text" itemprop="text">
<p>You can mix types inside tuples or lists. Why can't you specify that in typing hints?</p>
<pre><code>&gt;&gt;&gt; from typing import Tuple, List
&gt;&gt;&gt; t = ('a', 1)
&gt;&gt;&gt; l = ['a', 1]

&gt;&gt;&gt; t2: Tuple[str, int] = ('a', 1)
&gt;&gt;&gt; l2: List[str, int] = ['a', 1]

TypeError: Too many parameters for typing.List; actual 2, expected 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In type theory, a list is a homogenous structure containing values of one type. As such, <code>List</code> only takes a single type, and every element of that list has to have that type.</p>
<p>However, type theory also provides sum types, which you can think of as a wrapper around exactly one value selected from some fixed set of types. A sum type is supported by <code>typing.Union</code>. To specify that a list is a mix of <code>int</code> and <code>str</code> values, use</p>
<pre><code>List[Union[str, int]]
</code></pre>
<p>as the type hint.</p>
<p>By contrast, a tuple is an example of a <em>product type</em>, a type consisting of a fixed set of types, and whose values are a collection of values, one from each type in the product type. <code>Tuple[int,int,int]</code>, <code>Tuple[str,int]</code> and <code>Tuple[int,str]</code> are all distinct types, distinguished both by the <em>number</em> of types in the product and the order in which they appear.</p>
</div>
<div class="post-text" itemprop="text">
<p>You <em>could</em> use a <code>Union</code>, but generally, if you can avoid it, lists should be homogenous instead of heterogeneous:</p>
<pre><code>from typing import List, Union
lst: List[Union[str, int]] = [1, 'a']
</code></pre>
<p><code>myp</code>, at least, will accept this just fine. </p>
<p>This means though that your list accessors will return a Union type, often necessitating handling different possible types in any downstream functions. Accepting unions is generally less problematic. </p>
</div>
<span class="comment-copy">Because you generally don't mix types like that in lists and other sequences. If you want a list of things that could be strings <i>or</i> integers you can do that, just not positionally. <a href="https://docs.python.org/3/library/typing.html#typing.Tuple" rel="nofollow noreferrer"><code>Tuple</code></a> is a special case.</span>
<span class="comment-copy">You can: <code>List[Union[str, int]]</code>.</span>
<span class="comment-copy">And I just happened to have posted a my own <a href="https://stackoverflow.com/questions/53526814/mypy-error-typevar-with-value-restriction-and-union-of-unions-optional-cannot">question</a> that illustrates my troubles with Union...</span>
