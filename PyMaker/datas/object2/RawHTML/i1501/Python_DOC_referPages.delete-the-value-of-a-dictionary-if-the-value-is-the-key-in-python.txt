<div class="post-text" itemprop="text">
<p>I have a dictionary and I want to delete each value of the dictionary which is the key.
I want this output: <code>G = {'y': {'z'}, 'z': {'u', 'f', 'y'}, 'u': {'z'}}</code></p>
<pre><code>G = {'y': {'z', 'y'}, 'z': {'z', 'u', 'f', 'y'}, 'u': {'u', 'z'}}
</code></pre>
<p>I tried this but I know. It's wrong.</p>
<pre><code>for key,value in G.items():
    if key == value:
        del value
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You aren't modifying the dictionary, but a variable <code>value</code>. In addition, you don't want to look for <em>equality</em> of keys and values, you want to check if your key is <code>in</code> your set value. Then remove it from your set via <a href="https://docs.python.org/3.6/library/stdtypes.html?highlight=set#frozenset.remove" rel="nofollow noreferrer"><code>set.remove</code></a>. So you can use:</p>
<pre><code>for key, value in G.items():
    if key in value:
        G[key].remove(key)

print(G)

{'y': {'z'}, 'z': {'u', 'y', 'f'}, 'u': {'z'}}
</code></pre>
<p>Alternatively, you can use <a href="https://docs.python.org/3.6/library/stdtypes.html?highlight=set#frozenset.discard" rel="nofollow noreferrer"><code>set.discard</code></a>, which doesn't give <code>KeyError</code> if the value does not exist in your set. The <code>if</code> condition may therefore be omitted.</p>
<pre><code>for key, value in G.items():
    G[key].discard(key)
</code></pre>
<p>Finally, consider the below dictionary comprehension, which creates a <em>new</em> dictionary and assigns it to <code>G</code>. This is not intrinsically inefficient: time complexity will be the same as the above methods. This version uses <a href="https://docs.python.org/3.6/library/stdtypes.html?highlight=set#frozenset.difference" rel="nofollow noreferrer"><code>set.difference</code></a>, here via its syntactic sugar <code>-</code>:</p>
<pre><code>G = {k: v - {k} for k, v in G.items()}
</code></pre>
<p>As per @JonClements' comment, a one-line version which maintains references to <code>G</code> is possible via <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>dict.update</code></a>:</p>
<pre><code>G.update({k: v - {k} for k, v in G.items()})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Delete the key in the value, not the value itself.</p>
<pre><code>for key, value in G.items():
    if key in value:
        value.remove(key)
</code></pre>
</div>
<span class="comment-copy">Your code isn't modifying the actual dict, just a temporary variable <code>value</code>.</span>
<span class="comment-copy">Your last example could update G in place and use <code>set.difference</code> instead of rebuilding the set value, eg: <code>G.update((k, v.difference((k,))) for k, v in G.items())</code></span>
<span class="comment-copy">@JonClements, Yup true, I think <code>{k: v - {k} for k, v in G.items()}</code> would work too.</span>
<span class="comment-copy">Yup... was going to suggest that - nice one... Although, if the dict G refers to has multiple references and all of them should reflect the changes, then you'll want <code>.update</code>...</span>
