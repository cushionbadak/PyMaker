<div class="post-text" itemprop="text">
<p>I am trying to retrieve a random string from python list to build a word guess challenge. I deployed anaconda environment on Alibaba Cloud ECS Instance.</p>
<p>I often use the following method to retrieve a random string from the list.</p>
<p>Let's say </p>
<pre><code>WordStack=['A','B','C','D']
print(WordStack[random.randint(len(WordStack))])
</code></pre>
<p>Is there any optimized way or build-in funtion to do that? Due to a large number of words, it takes some time to give the result.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at <a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer"><code>random.choice</code></a> which does exactly what you need. For your case, it would look like this:</p>
<pre><code>WordStack = ['A','B','C','D']
random_str = random.choice(WordStack)
print(random_str)  # -&gt; whatever
</code></pre>
<hr/>
<p>Having said that, I wouldn't expect it to make such a big difference on the speed of the process. But If I find the time I will test it.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could try random.randrange() instead of random.randint().</p>
<p>random.randrange():</p>
<blockquote>
<p>Return a randomly selected element from range(start, stop, step). This is equivalent to choice(range(start, stop, step)), but <strong>doesnâ€™t actually build a range object.</strong></p>
</blockquote>
<p>From <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="nofollow noreferrer">https://docs.python.org/3/library/random.html#random.randrange</a></p>
<p>I am not aware of any built-in function that does this. </p>
<p>So the equivalent statement would be: </p>
<p><code>WordStack[random.randrange(len(WordStack))]</code></p>
</div>
<span class="comment-copy">Both those operations have O(1) complexity (list's get item and randint). I doubt using a long list would make much of a difference.</span>
<span class="comment-copy">Exactly. The slowness must come from other parts of your code.</span>
<span class="comment-copy">@ayhan and <code>len</code> is also O(1)</span>
<span class="comment-copy">@Ev.Kounis Yes, that too. It seems random.choice is implemented pretty much the same way: <a href="https://github.com/python/cpython/blob/master/Lib/random.py#L278" rel="nofollow noreferrer">github.com/python/cpython/blob/master/Lib/random.py#L278</a></span>
<span class="comment-copy">if loading is the slow part; think about using a different file format or tricks like: <a href="https://stackoverflow.com/a/28254628/1358308">stackoverflow.com/a/28254628/1358308</a></span>
