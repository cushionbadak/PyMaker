<div class="post-text" itemprop="text">
<p>Is there any better way to write following code? I have two dict with same set of data as key, I want to iterate dict_a and check if any key with only one value, then update the value to dict_b. I have following working code but it seem there should be a better way to do it</p>
<pre><code>dict_a = {
'first': {1,2},
'second': {2, 7, 10, 22},
'third': {3},
'fourth': {6,8},
'fifth': {1},
}
dict_b = {
'first': 11,
'second': 4,
'third': 1,
'fourth': 1000,
'fifth': 8
}
for k, v in dict_a.items():
    if len(v) == 1:
        dict_b[k] = v.pop()
#=&gt;  
#dict_b = {
#'first': 11,
#'second': 4,
#'third': 3,
#'fourth': 1000,
#'fifth': 1
#}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You are, possibly unnecessarily, modifying <code>dict_a</code> when you use <code>pop</code> on <code>set</code> values in <code>dict_a</code>. You can, instead, use <code>next</code> + <code>iter</code> to extract the only value of a <code>set</code>:</p>
<pre><code>dict_b[k] = next(iter(v))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make it a one-liner using <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>update</code></a> and a generator:</p>
<pre><code>dict_b.update((k, v.pop()) for k, v in dict_a.items() if len(v) == 1)
</code></pre>
<p>Algorithmically, this doesn't gain anything, but will utilize some optimzations that come with the used syntactic means.</p>
</div>
<span class="comment-copy">This will modify the values in <code>dict_a</code> as well. Is that what you want?</span>
<span class="comment-copy">yes, i do not really care about dict_a actually</span>
<span class="comment-copy">This doesn't appear to result in what the OP wants, but rather pulls the first element from each set. Am I missing something?</span>
<span class="comment-copy">I think so.. if the length of a set is 1, i.e. the unchanged <code>if</code> clause, then pulling the only (as it happens, "first") element from each set is exactly what <code>v.pop</code> achieves.</span>
<span class="comment-copy">Ah, I forgot to put this within the existing conditional. My mistake. Clever implementation.</span>
<span class="comment-copy">@JonahBishop Also, sets are inherently unordered. First and last have no meaning. Both methods retrieve <i>any</i> element.</span>
