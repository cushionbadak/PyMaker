<div class="post-text" itemprop="text">
<p>I want to make a game in micropython an implementation of python 3.4.  I want my monsters to be controlled by a random number generator. I was considering passing the current grid reference as a seed and todays date so the monster would always appear today. Play the game tomorrow and there will be new monsters.</p>
<p>The problem is i need to use <code>random.randint</code> and <code>random.randchoice</code> for dice and other truely random events.</p>
<p>If i were doing this in c I'd use <code>erand48</code> from <code>&lt;stdlib.h&gt;</code> and keep and maintain multiple seeds.</p>
<p>What are my solutions in python?</p>
<p>I probably need a chaotic function to control monsters. Years ago i were given one by a maths professor, but it was simple and due to floating point rounding it tended to 0.0</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the random module of python to create random objects for each independent component. Example:</p>
<pre><code>import random
import datetime

#to set the random number based off the date
today = str(datetime.date.today())

monster_locations = random.Random(today)
traps = random.Random((today + '1'))
</code></pre>
<p>These individual random objects each have their own independent seeds and can be called just like the regular random class:</p>
<pre><code>monster_x = monster_locations.randInt(0,10)
trap_type = traps.randInt(0,4)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer">The docs of <code>random</code> module</a> mention</p>
<blockquote>
<p>The functions supplied by this module are actually bound methods of a hidden instance of the <code>random.Random</code> class. You can instantiate your own instances of <code>Random</code> to get generators that donâ€™t share state.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>It would appear that there is <em>only</em> one random seed.
You use <code>getstate</code> and <code>setstate</code> to save and restore previous random positions.</p>
<pre><code>import random

random.seed(1)
for _ in range(5):
    print(random.randrange(10), end = ' ')
print('')

save = random.getstate()

random.seed(1)
for _ in range(10):
    print(random.randrange(10), end = ' ')
print('')


random.setstate(save)
for _ in range(5):
    print(random.randrange(10), end = ' ')
print('')
</code></pre>
<p>produces the following output</p>
<pre><code>2 9 1 4 1 
2 9 1 4 1 7 7 7 6 3 
7 7 7 6 3 
</code></pre>
</div>
<span class="comment-copy">When i try <code>traps.randInt(0,4)</code> i get <code>attribute error: NoneType object has no attribute randInt</code> . I've tried <code>randint</code> and <code>randrange</code></span>
<span class="comment-copy">You code still doesn't  work. <code>random.seed(x)</code> returns a NoneType</span>
<span class="comment-copy">Use <code>random.Random(seed)</code> to create an object you store as a variable. That variable is then where the calls to methods are made from. E.g. <code>a=random.Random(123); print(a.randint(0,10))</code></span>
