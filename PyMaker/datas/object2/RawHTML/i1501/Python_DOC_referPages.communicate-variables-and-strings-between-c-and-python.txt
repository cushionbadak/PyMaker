<div class="post-text" itemprop="text">
<p>I am Building A program with C as the ui and the main process and python at its backend.
I want to pass the variables/String from C program to Python 
A simple File on Hard Drive can be used but it would be better if the ram is utilised to get live change in variables.
what can i do.
I dont want to use any sockets or pipes.
I want to give direct access from the ram.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you'll be interested in IPC with <code>mmap</code> and locks.
See <a href="https://docs.python.org/3/library/mmap.html" rel="nofollow noreferrer">docs</a> and for example, <a href="https://stackoverflow.com/questions/4836863/shared-memory-or-mmap-linux-c-c-ipc">here</a>
and maybe <a href="https://blog.schmichael.com/2011/05/15/sharing-python-data-between-processes-using-mmap/" rel="nofollow noreferrer">here</a> for a code example (with two Python processes only).</p>
</div>
<div class="post-text" itemprop="text">
<p>Generally using APIs is the best way to communicate between services in different languages. But if you must have one codebase with shared ram, there is actually something for that with C/Python. It's called Cython: <a href="https://cython.org/" rel="nofollow noreferrer">https://cython.org/</a></p>
</div>
<span class="comment-copy">Sockets or pipes are going to be more standard across operating systems than any kind of shared memory solution. And due to the nature of Python's memory model, you'll need to copy values into and out of shared memory to so anything useful with them even if you had them. So I actually think a local socket will be just as fast and likely much, much easier to get working correctly.</span>
<span class="comment-copy">Sockets will need host ip etc. I want to do it on one computer only without any connections</span>
<span class="comment-copy">No, there's no need for a remote system. You can use the loopback adapter to make TCP connections between processes on a single computer. On a Unix or Unix-like system, you can also use a domain socket, which is basically just a special kind of file in the local filesystem.</span>
<span class="comment-copy">And a pipe is even simpler. Just launch a child process with <code>popen</code> and you can communicate back and forth using just stdin/stdout.</span>
