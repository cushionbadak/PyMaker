<div class="post-text" itemprop="text">
<p>Is it possible to create a dictionary comprehension in Python (for the keys)?</p>
<p>Without list comprehensions, you can use something like this:</p>
<pre><code>l = []
for n in range(1, 11):
    l.append(n)
</code></pre>
<p>We can shorten this to a list comprehension: <code>l = [n for n in range(1, 11)]</code>.</p>
<p>However, say I want to set a dictionary's keys to the same value.
I can do:</p>
<pre><code>d = {}
for n in range(1, 11):
     d[n] = True # same value for each
</code></pre>
<p>I've tried this:</p>
<pre><code>d = {}
d[i for i in range(1, 11)] = True
</code></pre>
<p>However, I get a <code>SyntaxError</code> on the <code>for</code>.</p>
<p>In addition (I don't need this part, but just wondering), can you set a dictionary's keys to a bunch of different values, like this:</p>
<pre><code>d = {}
for n in range(1, 11):
    d[n] = n
</code></pre>
<p>Is this possible with a dictionary comprehension?</p>
<pre><code>d = {}
d[i for i in range(1, 11)] = [x for x in range(1, 11)]
</code></pre>
<p>This also raises a <code>SyntaxError</code> on the <code>for</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are <a href="https://www.python.org/dev/peps/pep-0274/" rel="noreferrer">dictionary comprehensions in Python 2.7+</a>, but they don't work quite the way you're trying.  Like a list comprehension, they create a <em>new</em> dictionary; you can't use them to add keys to an existing dictionary.  Also, you have to specify the keys and values, although of course you can specify a dummy value if you like.</p>
<pre><code>&gt;&gt;&gt; d = {n: n**2 for n in range(5)}
&gt;&gt;&gt; print d
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
</code></pre>
<p>If you want to set them all to True:</p>
<pre><code>&gt;&gt;&gt; d = {n: True for n in range(5)}
&gt;&gt;&gt; print d
{0: True, 1: True, 2: True, 3: True, 4: True}
</code></pre>
<p>What you seem to be asking for is a way to set multiple keys at once on an existing dictionary.  There's no direct shortcut for that.  You can either loop like you already showed, or you could use a dictionary comprehension to create a new dict with the new values, and then do <code>oldDict.update(newDict)</code> to merge the new values into the old dict.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/stdtypes.html#dict.fromkeys" rel="nofollow noreferrer"><code>dict.fromkeys</code></a> class method ...</p>
<pre><code>&gt;&gt;&gt; dict.fromkeys(range(5), True)
{0: True, 1: True, 2: True, 3: True, 4: True}
</code></pre>
<p>This is the fastest way to create a dictionary where all the keys map to the same value.</p>
<p>But <a href="https://docs.python.org/3/faq/programming.html#why-are-default-values-shared-between-objects" rel="nofollow noreferrer">do <strong>not</strong> use this with mutable objects</a>:</p>
<pre><code>d = dict.fromkeys(range(5), [])
# {0: [], 1: [], 2: [], 3: [], 4: []}
d[1].append(2)
# {0: [2], 1: [2], 2: [2], 3: [2], 4: [2]} !!!
</code></pre>
<p>If you don't actually <em>need</em> to initialize all the keys, a <code>defaultdict</code> might be useful as well:</p>
<pre><code>from collections import defaultdict
d = defaultdict(True)
</code></pre>
<hr/>
<p>To answer the second part, a dict-comprehension is just what you need:</p>
<pre><code>{k: k for k in range(10)}
</code></pre>
<p>You probably shouldn't do this but you could also create a subclass of <code>dict</code> which works somewhat like a <code>defaultdict</code> if you override <code>__missing__</code>:</p>
<pre><code>&gt;&gt;&gt; class KeyDict(dict):
...    def __missing__(self, key):
...       #self[key] = key  # Maybe add this also?
...       return key
... 
&gt;&gt;&gt; d = KeyDict()
&gt;&gt;&gt; d[1]
1
&gt;&gt;&gt; d[2]
2
&gt;&gt;&gt; d[3]
3
&gt;&gt;&gt; print(d)
{}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; {i:i for i in range(1, 11)}
{1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I really like the @mgilson comment, since if you have a two iterables, one that corresponds to the keys and the other the values, you can also do the following.</p>
<pre><code>keys = ['a', 'b', 'c']
values = [1, 2, 3]
d = dict(zip(keys, values))
</code></pre>
<p>giving </p>
<blockquote>
<p>d = {'a': 1, 'b': 2, 'c': 3}</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Use dict() on a list of tuples, this solution will allow you to have arbitrary values in each list, so long as they are the same length</p>
<pre><code>i_s = range(1, 11)
x_s = range(1, 11)
# x_s = range(11, 1, -1) # Also works
d = dict([(i_s[index], x_s[index], ) for index in range(len(i_s))])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider this example of counting the occurrence of words in a list using dictionary comprehension</p>
<pre><code>my_list = ['hello', 'hi', 'hello', 'today', 'morning', 'again', 'hello']
my_dict = {k:my_list.count(k) for k in my_list}
print(my_dict)
</code></pre>
<p>And the result is</p>
<pre><code>{'again': 1, 'hi': 1, 'hello': 3, 'today': 1, 'morning': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The main purpose of a list comprehension is to create a new list based on another one without changing or destroying the original list.</p>
<p>Instead of writing </p>
<pre><code>    l = []
    for n in range(1, 11):
        l.append(n)
</code></pre>
<p>or</p>
<pre><code>    l = [n for n in range(1, 11)]
</code></pre>
<p>you should write only</p>
<pre><code>    l = range(1, 11)
</code></pre>
<p>In the two top code blocks you're creating a new list, iterating through it and just returning each element. It's just an expensive way of creating a list copy.</p>
<p>To get a new dictionary with all keys set to the same value based on another dict, do this:</p>
<pre><code>    old_dict = {'a': 1, 'c': 3, 'b': 2}
    new_dict = { key:'your value here' for key in old_dict.keys()}
</code></pre>
<p>You're receiving a SyntaxError because when you write</p>
<pre><code>    d = {}
    d[i for i in range(1, 11)] = True
</code></pre>
<p>you're basically saying: "Set my key 'i for i in range(1, 11)' to True" and "i for i in range(1, 11)" is not a valid key, it's just a syntax error. If dicts supported lists as keys, you would do something like</p>
<pre><code>    d[[i for i in range(1, 11)]] = True
</code></pre>
<p>and not</p>
<pre><code>    d[i for i in range(1, 11)] = True
</code></pre>
<p>but lists are not hashable, so you can't use them as dict keys.</p>
</div>
<div class="post-text" itemprop="text">
<p>you can't hash a list like that.
try this instead, it uses tuples</p>
<pre><code>d[tuple([i for i in range(1,11)])] = True
</code></pre>
</div>
<span class="comment-copy">For future readers' info: NumPy arrays do let you set multiple elements to a single value or list of values, the way you're trying to do. Though if you don't already have a reason to use NumPy, it's probably not worth it just for this feature.</span>
<span class="comment-copy">FWIW, <code>dict.update</code> can also accept an iterable of key-value pairs just like the <code>dict</code> constructor</span>
<span class="comment-copy">Note that if you to create a dictionary with all values the same, use <code>dict.fromkeys()</code>. So to set all values to <code>True</code>, use <code>dict.fromkeys(range(5), True)</code>. Watch out, the value is <i>not copied</i>, so you may want to avoid this when you have a mutable value; it'll be shared between all keys.</span>
<span class="comment-copy">Note: the keys can be the result of a method as well: <code>{ n*2 : n for n in range(3) } =&gt; {0: 0, 2: 1, 4: 2}</code>. Both can be done in the same expression: <code>{ n*2 : n*3 for n in range(3) } =&gt; { 0: 0, 2: 3, 4: 6 }</code>.</span>
<span class="comment-copy">Note that in the case of <code>d = defaultdict(lambda: True)</code>, the lambda is not required as True is (or shouldn't) be mutable.</span>
<span class="comment-copy">As a side note, this is the same thing as <code>d = dict(zip(i_s,x_s))</code></span>
<span class="comment-copy">This is interesting, though not the most efficient as you'll be counting keys like 'hello' multiple times</span>
<span class="comment-copy">This doesn't do at all what the OP wanted...</span>
