<div class="post-text" itemprop="text">
<p>This does not work – the update has no effect:</p>
<pre><code>command = "select content from blog where slug = 'meow'; update account_balance set balance=200 where id=1; select 1 from blog;"
content = db.engine.scalar(command)
</code></pre>
<p>Switching the statements performs the update and select successfully:</p>
<pre><code>command = "update account_balance set balance=200 where id=1; select content from blog where slug = 'meow';"
content = db.engine.scalar(command)
</code></pre>
<p>Why does the first not work? It works in Pgadmin. I enabled autocommit with Flask-Sqlalchemy. </p>
<p>I am doing a workshop on SQL injection, so please dont rewrite the solution!</p>
</div>
<div class="post-text" itemprop="text">
<p>The way SQLAlchemy's autocommit works is that it inspects the issued statements, trying to <a href="http://docs.sqlalchemy.org/en/latest/core/connections.html#understanding-autocommit" rel="nofollow noreferrer">detect whether or not data is modified</a>:</p>
<blockquote>
<p>..., SQLAlchemy implements its own “autocommit” feature which works completely consistently across all backends. This is achieved by detecting statements which represent data-changing operations, i.e. INSERT, UPDATE, DELETE, as well as data definition language (DDL) statements such as CREATE TABLE, ALTER TABLE, and then issuing a COMMIT automatically if no transaction is in progress. The detection is based on the presence of the <code>autocommit=True</code> execution option on the statement. If the statement is a text-only statement and the flag is not set, a regular expression is used to detect INSERT, UPDATE, DELETE, as well as a variety of other commands for a particular backend</p>
</blockquote>
<p>Since <a href="http://docs.sqlalchemy.org/en/latest/core/connections.html#multiple-result-sets" rel="nofollow noreferrer">multiple result sets are not supported</a> at SQLAlchemy level, in your first example the detection simply omits issuing a COMMIT because the <em>first</em> statement is a SELECT, where as in your second example it is an UPDATE. No attempt to detect data modifying statements from multiple statements takes place.</p>
<p>If you look at <a href="https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/dialects/postgresql/base.py#L2034" rel="nofollow noreferrer"><code>PGExecutionContext.should_autocommit_text()</code></a>, you'll see that it does a <a href="https://docs.python.org/3/library/re.html#re.regex.match" rel="nofollow noreferrer">regex match</a> against <a href="https://github.com/zzzeek/sqlalchemy/blob/master/lib/sqlalchemy/dialects/postgresql/base.py#L892" rel="nofollow noreferrer"><code>AUTOCOMMIT_REGEXP</code></a>. In other words it matches only at the beginning of the text.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should use <code>db.engine.execute(...).first()</code> if you want to execute everything and get only first row.</p>
</div>
<span class="comment-copy">Define "doesn't work"? Exactly.</span>
<span class="comment-copy">@CraigRinger the account_balance row doesn't update, of course</span>
<span class="comment-copy">@IljaEverilä, I get no error since the db executes them, but the update statement has no effect</span>
<span class="comment-copy">@IljaEverilä You are right. I forgot to include something to avoid the error. And I use 1.1.12</span>
<span class="comment-copy">I appended a <code>commit</code> and now it works. SQLAlchemy must have forgotten to issue it by itself. Is your speculation that SQLA checks the <i>last</i> statement for whether it should issue a commit?</span>
<span class="comment-copy">Sorry, I fixed the answer. It is the <i>first</i> statement that matters (like in your second example, where the first statement is the UPDATE). Also added some context as to why.</span>
<span class="comment-copy">Wow seriously? That's an insane way to implement that. Don't use that feature!</span>
<span class="comment-copy">@craig-ringer It works ok for single textual SQL statements, and if you really want both multi-statement SQL strings (which SQLA does not seem to officially support, but leaves for DBAPI level) and autocommit, there's <code>text(...).execution_options(autocommit=True)</code>, as documented in <a href="http://docs.sqlalchemy.org/en/latest/core/connections.html#understanding-autocommit" rel="nofollow noreferrer">"Understanding Autocommit"</a>, though I guess that's more commonly used for signalling that a function or SP mutates data and should commit. On the other hand personally I'm not a fan of autocommit in general.</span>
<span class="comment-copy">Wouldn't it fail hopelessly with <code>SELECT insert_something(...)</code>?</span>
