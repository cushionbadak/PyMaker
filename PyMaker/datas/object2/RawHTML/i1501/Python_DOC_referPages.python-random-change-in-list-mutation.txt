<div class="post-text" itemprop="text">
<p>I'm writing a genetic algorithm and want to randomly mutate a number within a list.</p>
<p>If I had a list, for example:</p>
<pre><code>[1,2,3,4,5]
</code></pre>
<p>How could I take the list and change just one of the numbers to a random numbers, for example:</p>
<pre><code>[1,2,7,4,5]
</code></pre>
<p>or </p>
<pre><code>[1,3,3,4,5]
</code></pre>
<p>Any help would be appreciated :)</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>random.randint</code>:</p>
<pre><code>l=[1,2,3,4,5]
import random
l[random.randint(0,len(l)-1)]=random.randint(min(l),max(l)-1)
</code></pre>
<p>And now:</p>
<pre><code>print(l)
</code></pre>
<p>Is (every time it's different, this is just a first-time-output):</p>
<pre><code>[1, 4, 3, 4, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="nofollow noreferrer"><code>random.randrange</code></a> and <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="nofollow noreferrer"><code>random.randint</code></a>:</p>
<pre><code>&gt;&gt;&gt; import random
&gt;&gt;&gt; index = random.randrange(len(mylist))
&gt;&gt;&gt; mylist[index] = random.randint(minVal, maxVal)
</code></pre>
<p> </p>
<p>Edit: if you want to <em>always</em> make a change (i.e. never leave the list unchanged), consider <em>incrementing</em> the item by a non-zero value:</p>
<pre><code>&gt;&gt;&gt; mylist[index] += random.choice([1, -1]) * random.randint(1, maxChange)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="nofollow noreferrer">random.randint</a>:</p>
<pre><code>import random
temp_list = [1,2,3,4,5]
temp_list[index_of_list] = random.randint(minValue, maxValue)
</code></pre>
<p>or you can try like:</p>
<pre><code>temp_list[random.randint(0, (len(temp_list))-1)] = random.randint(minValue, maxValue)
</code></pre>
</div>
<span class="comment-copy">What have you tried? Just pick an index at random and pick a value at random in your loop</span>
<span class="comment-copy">list[random.randint(0,len(list)] = random.randint(0,maxtobedefine) <a href="https://docs.scipy.org/doc/numpy-1.15.1/reference/generated/numpy.random.randint.html" rel="nofollow noreferrer">docs.scipy.org/doc/numpy-1.15.1/reference/generated/…</a></span>
<span class="comment-copy">@Alexis those are the docs for numpy. There's no need to use numpy here to generate the random numbers unless the OP actually has an array</span>
<span class="comment-copy">@Alexis: <code>IndexError</code></span>
<span class="comment-copy">also, it wouldn't be a good idea to name your variable <code>list</code></span>
<span class="comment-copy">This will give a <code>IndexError</code>, as <code>random.randint(a,b)</code> generates a number between <code>a</code> and <code>b</code> <i>inclusive</i>.</span>
<span class="comment-copy">@fferri Now? is it good?</span>
<span class="comment-copy">Definitely yes! :-)</span>
<span class="comment-copy">@fferri Now it's good, i am happy it's good too :-)</span>
<span class="comment-copy">Would you mind explaining what each bit is doing?      l[random.randint(0,len(l)-1)]=random.randint(min(l),max(l)-1)</span>
<span class="comment-copy">If the <code>minVal</code> and <code>maxVal</code> range is say for eg: 1, 10, then there is also a chance that this returns the same list <code>mylist</code>.</span>
<span class="comment-copy">@Austin For a GA I would actually probably eat that possibility for the sake of maintaining randomness in the pool (not everything <i>has</i> to change) but it's a fair point :) Anecdotal but I've generally found it faster to accept a null-swap in a tight loop than try avoid it</span>
<span class="comment-copy">@roganjosh, It would be more a possible chance if the range is small; I don't think you can just ignore that when I believe some alternates could solve it.</span>
<span class="comment-copy">@Austin: good point, I added a second example for always making a change</span>
<span class="comment-copy">@Austin devil's advocate; if the range is small, convergence will be fast any way. You're better to squish extra "generations" in. If you can get 3 iterations in by accepting duplicates instead of one where you force a change... &lt;shrug&gt;. Anyway, the edit now covers both :)</span>
<span class="comment-copy">What's <code>index</code>? :)</span>
