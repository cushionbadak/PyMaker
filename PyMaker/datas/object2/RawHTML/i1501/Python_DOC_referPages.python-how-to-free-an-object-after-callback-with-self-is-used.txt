<div class="post-text" itemprop="text">
<p>please review the following code…</p>
<pre><code>class Client(MqC):                                                                                                 

  def __init__(self, tmpl=None):                                                                                   
    self.ConfigSetBgError(self.BgError)                                                                          
    MqC.__init__(self)                                                                                             

  def BgError(self):                                                                                               
    ... do some stuff……
</code></pre>
<p>I can add the callback <code>BgError</code> as class or as object callback…</p>
<ol>
<li>class = <code>self.ConfigSetBgError(Client.BgError)</code></li>
<li>object = <code>self.ConfigSetBgError(self.BgError)</code></li>
</ol>
<p>both cases are working because the callback code can handle this</p>
<p>the problem is the <strong>refCount</strong> of the <strong>self</strong> object… the case (2) increment the <strong>refCount</strong> by <em>ONE</em>… so the following code shows the difference code…</p>
<pre><code>cl = Client()
print("refCount=" + str(sys.getrefcount(cl)))
cl = None
</code></pre>
<ol>
<li><code>.tp_dealloc</code> is called… because <code>refCount=2</code></li>
<li><code>.tp_dealloc</code> is <strong>NOT</strong> called because <code>refCount=3</code></li>
</ol>
<p>→ so… question… ho to solve this <em>refCount</em> cleanup issue ?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you are worried about the callback keeping the instance alive, then <em>don't pass in a bound method</em>. <code>self.BgError</code> creates a method object (through the <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">descriptor protocol</a>), which references the instance object because it needs to have access to that instance when you call it; that's how the <code>self</code> parameter is passed in in the first place.</p>
<p>If you don't need to reference the instance state and the callback API can handle unbound methods or class method or static methods, then pass one of those in instead.</p>
<p>For example, you can make <code>BgError</code> a class method or static method:</p>
<pre><code>@classmethod
def BgError(cls):
    # ...
</code></pre>
<p>Now both <code>Client.BgError</code> and <code>self.BgError</code> (<code>instance_of_Client.BgError</code>) produce a method object bound to the class instead of the instance, giving you consistent behaviour. No additional reference to the instance is made.</p>
<p>If you do need the instance state, pass in a wrapper function with a <a href="https://docs.python.org/3/library/weakref.html" rel="nofollow noreferrer">weak reference</a> to your instance. When invoked, check if the weak reference is still available before using the instance. Also see <a href="https://stackoverflow.com/questions/21826700/using-python-weakset-to-enable-a-callback-functionality/21941670#21941670">using python WeakSet to enable a callback functionality</a> for a more in-depth post about callbacks and weak references. There the callback registry takes care of producing and storing weak references, but the same principles apply.</p>
</div>
<span class="comment-copy">Please don't tag questions about python with C. Thanks.</span>
