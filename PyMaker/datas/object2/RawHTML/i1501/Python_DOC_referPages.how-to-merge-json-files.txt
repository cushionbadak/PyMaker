<div class="post-text" itemprop="text">
<p>How can I use ordered dictionary in python older versions?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>from collections import OrderedDict
from functools import partial
import json
import sys

if sys.version_info &lt; (3,6):  # Pre Python 3.6?
    ordered_json_load = partial(json.load, object_pairs_hook=OrderedDict)
else:
    ordered_json_load = json.load

with open('file1.json') as finput1, open('file2.json') as finput2:

    # Merge data from files.
    merged = ordered_json_load(finput1)
    merged['body'].update(ordered_json_load(finput2)['body'].items())

# Write the merged data to an output file.
with open('output.json', 'w') as foutput:
    json.dump(merged, foutput, indent=4)
</code></pre>
<p>Contents of output file produced:</p>
<pre class="lang-json prettyprint-override"><code>{
    "head-param": "foo",
    "head-param1": "bar",
    "head-sub-param": {
        "head-sub-param1": "foo",
        "head-sub-param2": "bar"
    },
    "body": {
        "name1": {
            "value": "foo",
            "option": "bar",
            "bar": "bar",
            "foo": "foo",
            "baz": "baz"
        },
        "name22": {
            "value1": "foo1",
            "option1": "bar1",
            "bar1": "bar1",
            "foo1": "foo1",
            "baz1": "baz1"
        }
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use <a href="https://pypi.org/project/jsonmerge/#description" rel="nofollow noreferrer"><code>jsonmerge</code></a> to merge your json files. It handles the merging of JSON files quite well. </p>
<p>You can install this library with <code>pip install jsonmerge</code>.</p>
<p><strong>Demo:</strong></p>
<pre><code>from json import loads
from json import dump

from jsonmerge import merge

# Store your json files here
# If all of them exist in directory, you can use os.listdir() instead
json_files = ['file1.json', 'file2.json']

with open('merged.json', 'w') as json_out:

    # Store updated results in this dict
    data = {}

    for file in json_files:
        with open(file, 'rb') as json_file:
            json_data = loads(json_file.read())

            # Update result dict with merged data
            data.update(merge(data, json_data))

    dump(data, json_out, indent=4)
</code></pre>
<p>Which gives the following <em>merged.json</em>:</p>
<pre><code>{
    "head-param": "foo",
    "head-param1": "bar",
    "head-sub-param": {
        "head-sub-param1": "foo",
        "head-sub-param2": "bar"
    },
    "body": {
        "name1": {
            "value": "foo",
            "option": "bar",
            "bar": "bar",
            "foo": "foo",
            "baz": "baz"
        },
        "name22": {
            "value1": "foo1",
            "option1": "bar1",
            "bar1": "bar1",
            "foo1": "foo1",
            "baz1": "baz1"
        }
    }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could write a little recursive function:</p>
<pre><code>def update_nested_dict(dict_1, dict_2):
    """Mutate dict_1 by updating it with all values present in dict_2."""
    for key, value in dict_2.items():
        if key not in dict_1:
            # Just add the value to dict_1
            dict_1[key] = value
            continue

        if isinstance(value, dict):
            # If this is a dict then let's recurse...
            update_nested_dict(dict_1[key], value)
</code></pre>
<p>Calling <code>update_nested_dict(json1, json2)</code> mutates <code>json1</code> to:</p>
<pre><code>{'head-param': 'foo',
 'head-param1': 'bar',
 'head-sub-param': {'head-sub-param1': 'foo', 'head-sub-param2': 'bar'},
 'body': {'name1': {'value': 'foo',
   'option': 'bar',
   'bar': 'bar',
   'foo': 'foo',
   'baz': 'baz'},
  'name22': {'value1': 'foo1',
   'option1': 'bar1',
   'bar1': 'bar1',
   'foo1': 'foo1',
   'baz1': 'baz1'}}}
</code></pre>
</div>
<span class="comment-copy">Thanks for the help it works, but I have some issues with that where lines are not properly aligned and also the output is not in order of the source JSON file. Please suggest me the way so that I can eliminate even that issue.</span>
<span class="comment-copy">Abhishek: OK, modified to automatically preserve the order when necessary (depends on exact version of Python being used). Also prettied-up the lines dumped to the output file (assuming that's what you meant by "properly aligned").</span>
<span class="comment-copy">Thank you so much it really helps me a lot.  It works as per my expectation. Thank you so much.</span>
<span class="comment-copy">You've basically implemented in pure Python what the built-in <a href="https://docs.python.org/3/library/stdtypes.html#dict.update" rel="nofollow noreferrer"><code>dict.update()</code></a> method would do much more quickly.</span>
<span class="comment-copy">I don't think that's quite true, unless <code>dict.update</code> has a recursive option?</span>
<span class="comment-copy">Bernard: No, <code>dict.update()</code> doesn't have an option like thatâ€”but it doesn't need one. Here's an <a href="https://pastebin.com/DLh7yf6M" rel="nofollow noreferrer">example</a> with some proof (in addition, of course, to my own <a href="https://stackoverflow.com/a/53430300/355230">answer</a> to this question).</span>
