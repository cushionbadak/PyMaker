<div class="post-text" itemprop="text">
<p>I want to convert each letter of the list word to a number depending on the lists character and number. So a = 0, b = 02300, c = 2.
I want this output:</p>
<pre><code>encoding = [34, 9, 432, 432, 104, 124546324, 104693, 104, 432, 5]
</code></pre>
<p>ps: It's not import if there's no space between each number.</p>
<pre><code>word = ["Hello world"]
    encoding = []
    charachter = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z",""]
    number = [0,02300,2,5,9,7,10,34,876,23,125,432,567,103,104,10234,102435,332,7654,12435,65434,12121,104693,130694,120357,12346,124546324]
</code></pre>
<p>I don't no what to do because the numbers of the list number are not equal to the index of the letters in the list character. </p>
<p>PS: I hope there's not another topic like this because I didn't find it</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a dictionary using <a href="https://docs.python.org/3.5/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> and <a href="https://docs.python.org/3.5/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> to match the corresponding letter with the encryption number.</p>
<pre><code>word = "Hello world"
encoding = []
charachter = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z",""]
number = [0,2300,2,5,9,7,10,34,876,23,125,432,567,103,104,10234,102435,332,7654,12435,65434,12121,104693,130694,120357,12346,124546324]

lookup = dict(zip(charachter,number))
output = " ".join(list(map(lambda elem: str(lookup.get(elem,' ')), word.lower())))
print(output)
</code></pre>
<p>Output:</p>
<pre><code>34 9 432 432 104   104693 104 332 432 5
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your post contains quite a few irregularities, such as missing characters, illegal integers, missing mappings and that peculiar translation for the empty string - so I'm going to answer in general.</p>
<p>What you want (what I gathered from "It's not import if there's no space between each number") is a translation table that maps characters to their translation. You can get it by passing a mapping of characters to strings to <code>str.maketrans</code>.</p>
<pre><code>&gt;&gt;&gt; char_to_number = {'a': '0', 'b': '02300', 'c': '2'} # ... and so on
&gt;&gt;&gt; translator = str.maketrans(char_to_number)
&gt;&gt;&gt; plain = 'abcabc'
&gt;&gt;&gt; 
&gt;&gt;&gt; plain.translate(translator)
'00230020023002'
</code></pre>
<p>If you actually do want a list, use</p>
<pre><code>&gt;&gt;&gt; [char_to_number[c] for c in plain]
['0', '02300', '2', '0', '02300', '2']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a> to create a lookup dictionary.</p>
<pre><code>word = "Hello world"
encoding = []
charachter = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r",
              "s","t","u","v","w","x","y","z",""]
number = [0,2300,2,5,9,7,10,34,876,23,125,432,567,103,104,10234,102435,332,7654,12435,
          65434,12121,104693,130694,120357,12346,124546324]

mapping = {k:v for k,v in zip(charachter,number)}  # or dict(zip(...))

enc = [mapping.get(c, c) for c in word.lower()] # use character as default if not mapped

print(enc)  # [34, 9, 432, 432, 104, ' ', 104693, 104, 332, 432, 5]
</code></pre>
<p>I opted to lowercase your input (and moved it to a normal string, not a list of strings with one string in it).</p>
<p>If a character is not mapped, it will use it instead of a number (f.e. for the space).</p>
<p>You can create a space seperated string fom it with:</p>
<pre><code>s = ' '.join(map(str,enc))
print( s )  
</code></pre>
<p>Output:</p>
<pre><code>34 9 432 432 104   104693 104 332 432 5
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/11041405/why-dict-getkey-instead-of-dictkey">Why dict.get(key) instead of dict[key]?</a> for <code>dict.get()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can do it like this:</p>
<pre><code>word = "Hello world"
encoding = []
character = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"," "]
number = [0,02300,2,5,9,7,10,34,876,23,125,432,567,103,104,10234,102435,332,7654,12435,65434,12121,104693,130694,120357,12346,124546324]

# create a dictionary with keys as characters and values as numbers
mapping = {}
for i in range(0,27):
    mapping[character[i]] = number[i]

# now iterate over the string and look up the dictionary for each character
for x in word:
    encoding.append(mapping[x.lower()])

print(encoding)
</code></pre>
<p>Note:</p>
<ol>
<li>I'm treating <code>word</code> as a string(<code>word = "Hello world"</code>) rather than an array of strings(<code>word = ["Hello world"]</code>).</li>
<li>I've replaced the last item (<code>""</code>) in the character array with a space (<code>" "</code>). We need this to replace the space between <code>Hello</code> and <code>world</code>.</li>
</ol>
</div>
<span class="comment-copy">02300 is not a valid integer. Would strings in <code>number</code> be ok?</span>
<span class="comment-copy">First of all, you'll need a map <code>character -&gt; number</code>: <code>Map = dict(zip(character, number))</code>...</span>
<span class="comment-copy">Also how is the <code>""</code> -&gt; <code>124546324</code> mapping supposed to work? There's a lot of empty strings in any string...</span>
<span class="comment-copy">THere is no mapping for capital <code>H</code> - there is no mapping for space.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/11041405/why-dict-getkey-instead-of-dictkey" title="why dict getkey instead of dictkey">stackoverflow.com/questions/11041405/â€¦</a></span>
<span class="comment-copy">@PatrickArtner you do have a point. I will edit my answer.</span>
