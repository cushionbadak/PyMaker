<div class="post-text" itemprop="text">
<p>I have a dictionary like this, with thousands more keys than shown, and hundreds of values for each letter <code>a</code>, <code>b</code>, <code>c</code>: </p>
<pre><code>dictex = {'cat': {'a': [[1, 3, 5], [2, 2, 7]], 'b': [[1, 3, 7], [2, 2, 7]], 'c': [[1, 2, 7], [2, 2, 7]]},
          'dog': {'a': [[1, 2, 5], [2, 2, 7]], 'b': [[1, 2, 7], [2, 2, 7]], 'c': [[1, 3, 7], [2, 2, 7]]},
          'moose': {'a': [[1, 1, 5], [2, 2, 7]], 'b': [[1, 1, 7], [2, 2, 7]], 'c': [[1, 1, 7], [2, 2, 7]]}}
</code></pre>
<p>I want to subtract the 1st value from the 2nd value for every entry, and sum across all <code>a</code>, all <code>b</code>, and all <code>c</code>. For example, for the <code>cat</code> entry of <code>a</code>, the operation is (5-3) + (7-2). The preferred output is (.csv): </p>
<pre><code>animal a   b   c
cat    7   9   10
dog    8   10  9
moose  9   11  11
</code></pre>
<p>I can get a particular animal and letter difference using</p>
<pre><code>dictex['cat']['a'][0][2] - dictex['cat']['a'][0][1]`
output:
2
</code></pre>
<p>I'm not sure how to get this for every entry in a smart way that doesn't require a lot of manual entry, and then output it into the above form.</p>
</div>
<div class="post-text" itemprop="text">
<p>It can be written quite sunccintly with <code>pandas</code> if you can use that library.</p>
<p>Usually putting lists into dataframes is not such a good idea, but we only do some mild processing and then save the result to a csv file.</p>
<pre><code>pd.DataFrame(dictex).rename_axis('animal', 1).applymap(lambda lists: sum(l[2]-l[1] for l in lists)).T.to_csv('f.csv')
</code></pre>
<p>This results in the file</p>
<pre><code>animal,a,b,c
cat,7,9,10
dog,8,10,9
moose,9,11,11
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can define a separate method to get the sum of all differences between the 2nd and 1st elements of all lists in a list and then generate your <code>result</code> with a "dictionary comprehension":</p>
<pre><code>def diff_sums(l):
    return sum(x[2] - x[1] for x in l)

dictex = {'cat': {'a': [[1, 3, 5], [2, 2, 7]], 'b': [[1, 3, 7], [2, 2, 7]], 'c': [[1, 2, 7], [2, 2, 7]]},
          'dog': {'a': [[1, 2, 5], [2, 2, 7]], 'b': [[1, 2, 7], [2, 2, 7]], 'c': [[1, 3, 7], [2, 2, 7]]},
          'moose': {'a': [[1, 1, 5], [2, 2, 7]], 'b': [[1, 1, 7], [2, 2, 7]], 'c': [[1, 1, 7], [2, 2, 7]]}}

result = {animal: {k: diff_sums(v) for k, v in num_lists.items()} for animal, num_lists in dictex.items()}
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>{'cat': {'a': 7, 'b': 9, 'c': 10}, 
 'dog': {'a': 8, 'b': 10, 'c': 9}, 
 'moose': {'a': 9, 'b': 11, 'c': 11}}
</code></pre>
<hr/>
<p>To write this to a CSV file, you can use the <a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="nofollow noreferrer"><code>csv</code></a> module:</p>
<pre><code>import csv

columns = ['animal', 'a', 'b', 'c']
data = [[animal] + [v[c] for c in columns[1:]] for animal, v in result.items()]
with open('mydata.csv', 'w') as csvfile:
    writer = csv.writer(csvfile, delimiter=',')
    for line in [columns] + data:
        writer.writerow(line)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>animal,a,b,c
cat,7,9,10
dog,8,10,9
moose,9,11,11
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you find yourself having to do a certain calculation over and over, then that's when it's probably best to write a function.  Here's a function that takes a dictionary like dictex, an animal name, and a letter, and returns the individual calculation for you:</p>
<pre><code># Do the calculations for a particular animal and letter
def calculate_value(mydict, animal, letter):
    W = mydict[animal][letter][0][2]
    X = mydict[animal][letter][0][1]
    Y = mydict[animal][letter][1][2]
    Z = mydict[animal][letter][1][1]

    # Do the math and convert the resulting number to a string,
    # which will save us some headaches when writing to the csv file.
    return str((W-X) + (Y-Z))
</code></pre>
<p>Here's a function that goes through the entire dictionary, calculates the values for each animal and letter, then finally returns the result in a list of lists that looks like this:  <code>[ ['cat',7,9,10], ['dog',8,10,9], ... ]</code> etc. </p>
<pre><code>def make_new_list(my_dict):
    new_list = []
    for animal in my_dict:
        individual_animal_list = [animal]
        for letter in ['a', 'b', 'c']:
            individual_animal_list.append(calculate_value(my_dict, animal, letter))
        new_list.append(individual_animal_list)
    return new_list
</code></pre>
<p>The reason why I used the format above, is because it makes it much easier to write the result to a csv file.  Just take each list you got from the previous function, join everything together with commas in between, and write it as a row to the file:</p>
<pre><code>dictex = {'cat': {'a': [[1, 3, 5], [2, 2, 7]], 'b': [[1, 3, 7], [2, 2, 7]], 'c': [[1, 2, 7], [2, 2, 7]]},
          'dog': {'a': [[1, 2, 5], [2, 2, 7]], 'b': [[1, 2, 7], [2, 2, 7]], 'c': [[1, 3, 7], [2, 2, 7]]},
          'moose': {'a': [[1, 1, 5], [2, 2, 7]], 'b': [[1, 1, 7], [2, 2, 7]], 'c': [[1, 1, 7], [2, 2, 7]]}}

new_list = make_new_list(dictex)

with open('my_file.csv', 'w') as f:
    f.write('animal,a,b,c\n') # Write the header line
    for row in new_list:
        f.write(','.join(row))
        f.write('\n')
</code></pre>
<p>Keep in mind that dictionaries in Python are NOT ordered.  So your resulting file is not necessarily going to have your animal rows in the same order as they appear in your original dictionary.</p>
</div>
<span class="comment-copy">I understand how you arrive at the itermediary result with cat, a -&gt; 7, but what do you mean by "and sum across letters a, b, c", where is that step?</span>
<span class="comment-copy">That's unclear, sorry. I meant sum across all <code>a</code>, then sum across all <code>b</code>, etc. Edited for clarity.</span>
<span class="comment-copy">So the output you posted is the desired output or do you need another column with the sums, e.g. 7+9+10, then 8+10+9, ... ?</span>
<span class="comment-copy">Nope, no overall sum. Just the output I posted.</span>
