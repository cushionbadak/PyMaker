<div class="post-text" itemprop="text">
<p>I need to find if two values have the same key.</p>
<p>Dictionary looks like this, where the values are lists:</p>
<pre><code>d1 = {"a": ["1", "2"], "c": ["5", "8", "76"], "b": ["3", "9"], "o": ["47"]}
</code></pre>
<p>So I want to compare for example <code>(5, 8)</code>: <code>True</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You are looking for <em>subsets</em> and <em>supersets</em>; your two values must together be a subset of a dictionary value.</p>
<p>Convert your tuple to a set, then use <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.issubset" rel="nofollow noreferrer"><code>set.issubset()</code></a> together with <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any()</code></a> to find if there is a value in your dictionary that contains both values:</p>
<pre><code>test_set = {"5", "8"}
any(test_set.issubset(v) for v in d1.values())
</code></pre>
<p>Note that because the objects in your lists are strings, you must use strings in the test set too! </p>
<p>Using sets here is as efficient as Python can make it given your data structures; internally, <code>test_set.issubset(v)</code> will convert the list to a set, then test each element in <code>test_set</code> against that temporary set (each test taking constant time), making this a O(N) linear time operation. If you have to do this many times over, and performance is an issue, consider making the values in <code>d1</code> sets to start with.</p>
<p>As a function that accepts integers too:</p>
<pre><code>def all_same_key(d, *t):
    test_set = set(map(str, t))
    return any(test_set.issubset(v) for v in d.values())
</code></pre>
<p>which you can then call with <code>all_same_key(d1, 5, 8)</code>.</p>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; all_same_key(d1, 5, 8)
True
&gt;&gt;&gt; all_same_key(d1, 5, 1)
False
&gt;&gt;&gt; all_same_key(d1, 47)
True
</code></pre>
<p>If you must find the keys, then use a list comprehension over <code>dict.items()</code>, and filter on values where <code>test_set</code> is a subset:</p>
<pre><code>[key for key, value in d1.items() if test_set.issubset(value)]
</code></pre>
</div>
<span class="comment-copy">... a list of <code>["5","8","76"]</code> is different from <code>["5","8"]</code> - and iterating over values of a dictionary is not what dictionaries are good for ...</span>
<span class="comment-copy">if i want to find the key for value 8. Is it posible ?</span>
<span class="comment-copy"><i>"two values have the same key."</i>: You mean, find the dict item where <b>two</b> values e.g <code>5</code> and <code>8 </code>, within the same dict value, here <code>"c": ["5", "8", "76"]</code>? Read <a href="https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects" rel="nofollow noreferrer">Dictionary view objects</a></span>
<span class="comment-copy">superior solution :)</span>
<span class="comment-copy">Kudos for the simple and useful solution!</span>
