<div class="post-text" itemprop="text">
<p>I understand the concepts of recursion to a certain level but I am unable to understand all the steps that happen in a recursive call.</p>
<p>For example:</p>
<pre><code>def fact(n):
    if n == 0:
        return 1
    else:
        print('{} is not 0, so fact({}) = {} * fact({})'.format(n,n,n,n-1))
        return n * fact(n-1)

answer = int (input('Enter some number: '))
print(fact(answer))

&gt;&gt; Enter some number: 5
5 is not 0, so fact(5) = 5 * fact(4)
4 is not 0, so fact(4) = 4 * fact(3)
3 is not 0, so fact(3) = 3 * fact(2)
2 is not 0, so fact(2) = 2 * fact(1)
1 is not 0, so fact(1) = 1 * fact(0)
120
</code></pre>
<p>While I understand that it repeats the task until it reaches the base where <code>n == 0</code>, but how does Python store the previous <code>5 * 4 * 3 ...</code> and calculates when based is reached, I am finding it a bit difficult to visualize the whole process. </p>
<p>Another example would be when say I pass an iterable.</p>
<pre><code>def getSum(piece):
    if len(piece) == 0:
        return 0
    else:
        print(piece)
        return piece[0] + getSum(piece[1:]) 
print(getSum([1, 3, 4, 2, 5]))
&gt;&gt; 
[1, 3, 4, 2, 5]
[3, 4, 2, 5]
[4, 2, 5]
[2, 5]
[5]
15
</code></pre>
<p>The list seems to be reduced from each recursion to <code>piece[n-1:]</code> and again ultimately all the values returned are summed. Is there anywhere I can refer to on how Python explicitly manages recursion? </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>but then does Python automatically sum the amounts and does this for all cases?</p>
</blockquote>
<p>Python doesn't have to do anything special here. Recursive function calls are <strong>just function calls</strong>. There is nothing magical about a function call.</p>
<p>All that happens is that the return value of <em>a</em> function call is used in a multiplication:</p>
<pre><code>n * fact(n-1)
</code></pre>
<p>Python executed the <code>fact(n-1)</code> function call, the function returns, and Python completes the expression by multiplying <code>n</code> with the returned value.</p>
<p>Compare this to any other function you could call. Would <code>n * math.sin(n-1)</code> be easier to follow? You don't have to know what is <em>inside</em> of <code>math.sin()</code>, just that it returns a value, that then is used in a multiplication.</p>
<p>That that <code>fact()</code> function call was the exact same function here <em>doesn't actually matter</em>. Python doesn't care. Python <em>specifically can't care</em> because Python is so dynamic. From one moment to the next the name <code>fact</code> could be bound to something different, so Python just looks up <code>fact</code> in the table of names, and calls it with the result of <code>n-1</code>. No special consideration is made here for <code>fact</code> pointing to the same function as the one currently executing.</p>
<p>It may help with understanding to just create <em>separate functions for each step</em>:</p>
<pre><code>def fact5(n):
    if n == 0:
        return 1
    else:
        print('{} is not 0, so fact5({}) = {} * fact4({})'.format(n,n,n,n-1))
        return n * fact4(n-1)

def fact4(n):
    if n == 0:
        return 1
    else:
        print('{} is not 0, so fact4({}) = {} * fact3({})'.format(n,n,n,n-1))
        return n * fact3(n-1)

def fact3(n):
    if n == 0:
        return 1
    else:
        print('{} is not 0, so fact3({}) = {} * fact2({})'.format(n,n,n,n-1))
        return n * fact2(n-1)

def fact2(n):
    if n == 0:
        return 1
    else:
        print('{} is not 0, so fact2({}) = {} * fact1({})'.format(n,n,n,n-1))
        return n * fact1(n-1)

def fact1(n):
    if n == 0:
        return 1
    else:
        print('{} is not 0, so fact1({}) = {} * fact0({})'.format(n,n,n,n-1))
        return n * fact0(n-1)

def fact0(n):
    if n == 0:
        return 1
    else:
        print('{} is not 0, so fact0({}) = {} * fact_minus1({})'.format(n,n,n,n-1))
        return n * fact_minus1(n-1)
</code></pre>
<p>Then call <code>fact5(5)</code> and get</p>
<pre><code>&gt;&gt;&gt; fact5(5)
5 is not 0, so fact5(5) = 5 * fact4(4)
4 is not 0, so fact4(4) = 4 * fact3(3)
3 is not 0, so fact3(3) = 3 * fact2(2)
2 is not 0, so fact2(2) = 2 * fact1(1)
1 is not 0, so fact1(1) = 1 * fact0(0)
120
</code></pre>
<p>Note that I didn't bother with defining a <code>fact_minus1()</code> function, we <em>know</em> it'll not be called when you start with <code>fact5(5)</code>.</p>
<p>You could also add more information to your visualisation. You don't log the return values from functions, and you could add indentation to visualise how deep into the call structure you are:</p>
<pre><code>def fact(n, _indent=''):
    print(f"{_indent}-&gt; fact({n}) called")
    if n == 0:
        print(f"{_indent}&lt;- fact({n}) returns 1")
        return 1
    else:
        print(f"{_indent}   fact({n}) calls fact({n-1}) -&gt;")
        recursive_result = fact(n - 1, _indent+'  ')
        print(f"{_indent}   fact({n}) &lt;- received {recursive_result}, multiplying with {n}")
        result = n * recursive_result
        print(f"{_indent}&lt;- fact({n}) returns {result}")
        return result
</code></pre>
<p>which produces:</p>
<pre><code>-&gt; fact(5) called
   fact(5) calls fact(4) -&gt;
  -&gt; fact(4) called
     fact(4) calls fact(3) -&gt;
    -&gt; fact(3) called
       fact(3) calls fact(2) -&gt;
      -&gt; fact(2) called
         fact(2) calls fact(1) -&gt;
        -&gt; fact(1) called
           fact(1) calls fact(0) -&gt;
          -&gt; fact(0) called
          &lt;- fact(0) returns 1
           fact(1) &lt;- received 1, multiplying with 1
        &lt;- fact(1) returns 1
         fact(2) &lt;- received 1, multiplying with 2
      &lt;- fact(2) returns 2
       fact(3) &lt;- received 2, multiplying with 3
    &lt;- fact(3) returns 6
     fact(4) &lt;- received 6, multiplying with 4
  &lt;- fact(4) returns 24
   fact(5) &lt;- received 24, multiplying with 5
&lt;- fact(5) returns 120
120
</code></pre>
<p>The indentation here shows that the functions are each <em>separate namespaces on a stack</em>. When one function calls another, the current function is 'paused', put on hold, the data it contains put on top of a stack until it can be resumed. Multiple function calls so all pile up until something finally starts to return results to their caller, at which point the previous function can resume where they left off, etc.</p>
</div>
<div class="post-text" itemprop="text">
<p>There's no magic. Let's step through.</p>
<pre><code>def fact(n):
    if n == 0:
        return 1
    else:
        print('{} is not 0, so fact({}) = {} * fact({})'.format(n,n,n,n-1))
        return n * fact(n-1)
</code></pre>
<p>I assume you understand what happens for <code>fact(0)</code>, so I won't go through it. Let's look at <code>fact(2)</code>.</p>
<pre><code>def fact(n):      # n = 2
    if n == 0:    # Skipping this case
        return 1
    else:
        # This is equivalent to return 2 * fact(1)
        return n * fact(n-1)
</code></pre>
<p>Now we step into <code>fact(1)</code>:</p>
<pre><code>def fact(n):      # n = 1
    if n == 0:    # Skipping this case
        return 1
    else:
        # This is equivalent to return 1 * fact(0)
        return n * fact(n-1)
</code></pre>
<p>Of course, <code>fact(0)</code> returns 1, so <code>fact(1)</code> returns (1 * 1) = 1. Now that we have the return value, we step back out to the last call of <code>fact(2)</code>:</p>
<pre><code># This is equivalent to return 2 * fact(1)
return n * fact(n-1)
</code></pre>
<p>As we said, <code>fact(n-1)</code> is 1, so we are returning 2 * 1 = 2.</p>
<p>If you learn to use your <a href="https://docs.python.org/3/library/pdb.html" rel="nofollow noreferrer">debugger</a>, you will be able to step through this and see explicitly what happens yourself. If you are using an IDE such as PyCharm, it will probably have a debugger built in that makes everything easy to visualize.</p>
</div>
<div class="post-text" itemprop="text">
<p>Hopefully this illustrates it better:</p>
<p>You have this output:</p>
<pre><code>5 is not 0, so fact(5) = 5 * fact(4)
4 is not 0, so fact(4) = 4 * fact(3)
3 is not 0, so fact(3) = 3 * fact(2)
2 is not 0, so fact(2) = 2 * fact(1)
1 is not 0, so fact(1) = 1 * fact(0)
</code></pre>
<p>We start with <code>fact(5) = 5 * fact(4)</code></p>
<p><code>fact(4)</code> is actually <code>4 * fact(3)</code> (and so on until n==0)</p>
<p>If we were to actually write the entire recursion line out of fact(5) it would be:</p>
<p><code>5 * fact(4) * fact(3) * fact(2) * fact(1) * fact(0) #which is 1, base case</code></p>
<p>Which is actually...</p>
<p><code>5 * (4*fact(3)) * (3*fact(2)) * (2*fact(1)) * (1*fact(0)) # 1*fact(0) == 1*1</code></p>
<p>Which simplified is...</p>
<p><code>5 * 4 * 3 * 2 * 1 = 120</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Recursive function is basic programming concept and is available in almost all the programming and scripting language. Recursive function is a loop which creates series of functions with yield on return. It's a like a Stack data structure Last In First Out</p>
<p>So, In Example 1, the stack is </p>
<pre><code>1 * return fact(0)  // return to next statement in stack
2 * return fact(1)  // return to next statement in stack
3 * return fact(2)  // ....
4 * return fact(3)
5 * return fact(4)
</code></pre>
<p>So, at last 4 * fact(3) will return 24 which will be the return value of fact(4) and,
Hence 5 * return fact(4) = 120.</p>
<p>Hope this helps!</p>
</div>
<span class="comment-copy">Nothing that doesn't also happing in <i>any other function call</i>.</span>
<span class="comment-copy">Python recursion is no different from any other language's recursion.</span>
<span class="comment-copy">Python doesn't sum anything. You told Python to <b>multiply</b> <code>n</code> with the return value from a function: <code>n * fact(n - 1)</code>. It executed the function call, then executed the <code>n * &lt;result&gt;</code> part.</span>
<span class="comment-copy">If you find it confusing, try to "run" the algorithm by hand on paper, with a small input. For example, for <code>fact(3)</code>, when you get to the recursive call, <code>3 * fact(3-1)</code>, replace <code>fact(3-1)</code> by <code>x</code>, and start computing that <code>x</code> (<code>fact(2)</code>) in the same way. You'll find <code>x</code> is <code>2</code> and so the returned value is <code>3 * 2</code> which is <code>6</code>. Python is not doing anything special that is not explicitly written in the function.</span>
<span class="comment-copy">Martijn Pieters. Sorry, I did not mean <code>sum</code> but I am really trying to visualize the whole process, like <code>return n * fact(n-1)</code> is not assigned to a certain identifier at each level of recursion and it's messing up the way I am trying to look at it.</span>
<span class="comment-copy">Sorry for the confusion, while it still stands, I am having a hard time understanding on where <code>n * fact(n-1)</code> is stored while also moving on to the next level.</span>
<span class="comment-copy">@BernardL: the same way that would be stored for other functions. Python keeps function data on a <i>stack</i>. Function A calls function B? Then Python puts everything about function A on a stack, and starts executing function B. When function B returns, the top of the stack is taken to continue where Python left of.</span>
<span class="comment-copy">Super awesome explanation Martijn. I was really getting confused on where and where the results are returned. From what I understand the function <code>fact</code> is called multiple times which is <code>paused</code> and resumes once it receives its first returned value.</span>
<span class="comment-copy">Learning to use the debugger can't be stressed enough - it's not just helpful, it's actually an essential tool for any programmer. I see many, many questions on this site that could have been easily solved by the OP if they'd played around with their program in a debugger.</span>
