<div class="post-text" itemprop="text">
<p>How do you dynamically set variables as global in Python 3 functions?
Something like this:</p>
<pre><code>def func1(i):
    global i
    #Some operation on i
</code></pre>
<p>How would I get the global variable to set whatever pre-existing variable is passed into the function? Such that:</p>
<pre><code>func1(foo)
</code></pre>
<p>Would preform the operation on the variable <code>foo</code> globally rather than creating a new global variable called <code>i</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If I got it right, your problem is: 
I've bound a name to some object at module level; now I want to write a function that changes the binding of that global name to another object passed as an argument to the function.</p>
<p>In Python global names can be referenced inside a function (provided that you don't bind another object to the same name), but to change their binding you must first declare those names as <code>global</code>. The reason is simple: by default all names bound inside a function have function scope.</p>
<pre class="lang-py prettyprint-override"><code>GLOBAL_NAME = 12
ANOTHER_GLOBAL_NAME = 50

def func(value):
    global GLOBAL_NAME
    GLOBAL_NAME = value
    print(GLOBAL_NAME, ANOTHER_GLOBAL_NAME)
</code></pre>
<p>When you call <code>func(33)</code>, <code>GLOBAL_NAME</code> will be bound to the object <code>33</code>. <code>ANOTHER_GLOBAL_NAME</code> is just a reference to a global name; since that name is not bound inside the function, Python look for that name in the global scope.</p>
<p>For further insights on Python scope enclosing you can refer to the Python documentation on <a href="https://docs.python.org/3/reference/simple_stmts.html#the-global-statement" rel="nofollow noreferrer">the global statement</a>, to <a href="https://www.python.org/dev/peps/pep-0227/" rel="nofollow noreferrer">PEP-0227</a> and to <a href="https://www.python.org/dev/peps/pep-3104/" rel="nofollow noreferrer">PEP-3104</a>.</p>
</div>
<span class="comment-copy">What are you trying to do with this?  <code>foo = func1(foo)</code> is a much better solution most (all?) cases.  There are some horrible hacks with stack frames that I think can do this, but I've made my living for the past 15 years writing Python, and I've never needed them.</span>
<span class="comment-copy">When you call a function defined as <code>func1(i)</code>, you are NOT passing a variable to it - you are passing a <i>value</i>.  Perhaps that value came from a variable, but there is absolutely no connection from the value to any variable(s) that might have held it.</span>
<span class="comment-copy">Okay, the input being a value instead of the variable itself is exactly what I was hoping against. I essentially want to have: func(#Some Memory Address or variable) to create the output and directly push it to whatever the variable used as input was.</span>
