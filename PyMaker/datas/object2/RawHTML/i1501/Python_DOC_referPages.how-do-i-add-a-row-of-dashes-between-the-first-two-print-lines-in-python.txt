<div class="post-text" itemprop="text">
<p>I'm trying to create a table in the console from a csv file. To make the output look more like a table, I want to add a row of dashes on the second line to split the headings and the main table content.</p>
<p>This is my code so far:</p>
<pre><code>import csv

with open('filename.csv', mode='r') as csv_file:
    csv_reader = csv.reader(csv_file)
    line_count = 0
    for row in csv_reader:
        if line_count == 0:
            print("|",row[0]," "*(20-len(row[0])), "|",
              row[1], " " * (15 - len(row[1])), "|",
              row[2], " " * (20 - len(row[2])), "|",
              row[3], " " * (5 - len(row[3])), "|")
</code></pre>
<p>This is the output:</p>
<pre><code>| Track           | Artist           | Album                 | Time   |
| Songname 1      | Artist 1         | Album 1               | 7:15   |
| Songname 1      | Artist 2         | Album 2               | 6:27   |
| Songname 1      | Artist 3         | Album 3               | 5:24   |
| Songname 1      | Artist 4         | Album 4               | 2:50   |
| Songname 1      | Artist 5         | Album 5               | 4:39   |
| Songname 1      | Artist 6         | Album 6               | 5:11   |
| Songname 1      | Artist 7         | Album 7               | 2:56   |
| Songname 1      | Artist 8         | Album 8               | 4:29   |
| Songname 1      | Artist 9         | Album 9               | 3:17   |
| Songname 1      | Artist 10        | Album 10              | 3:04   |

Process finished with exit code 0
</code></pre>
<p>And this is the output I'd like to achieve:</p>
<pre><code>-----------------------------------------------------------------------
| Track           | Artist           | Album                 | Time   |
-----------------------------------------------------------------------
| Songname 1      | Artist 1         | Album 1               | 7:15   |
| Songname 1      | Artist 2         | Album 2               | 6:27   |
| Songname 1      | Artist 3         | Album 3               | 5:24   |
| Songname 1      | Artist 4         | Album 4               | 2:50   |
| Songname 1      | Artist 5         | Album 5               | 4:39   |
| Songname 1      | Artist 6         | Album 6               | 5:11   |
| Songname 1      | Artist 7         | Album 7               | 2:56   |
| Songname 1      | Artist 8         | Album 8               | 4:29   |
| Songname 1      | Artist 9         | Album 9               | 3:17   |
| Songname 1      | Artist 10        | Album 10              | 3:04   |
-----------------------------------------------------------------------
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can make your code far easier using the <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">string format mini language</a>:</p>
<pre><code>t = """Track,Artist,Album,Time
Songname 1,Artist 1,Album 1,7:15
Songname 1,Artist 2,Album 2,6:27
"""
with open("t.txt","w") as w:
    w.write(t)


import csv

with open('t.txt', mode='r') as csv_file:
    csv_reader = csv.reader(csv_file)
    for idx, row in enumerate(csv_reader):
        if idx == 0:
            print("-"*65)

        # string format mini language:
        #  {:&lt;20} means take the n-th provided value and right align in 20 spaces
        print("|{:&lt;20}|{:&lt;15}|{:&lt;20}|{:&lt;5}|".format(*row))  # *row == row element wise
        if idx == 0:
            print("-"*65)
    print("-"*65)
</code></pre>
<p>Output:</p>
<pre><code>-----------------------------------------------------------------
|Track               |Artist         |Album               |Time |
-----------------------------------------------------------------
|Songname 1          |Artist 1       |Album 1             |7:15 |
|Songname 1          |Artist 2       |Album 2             |6:27 |
-----------------------------------------------------------------
</code></pre>
<hr/>
<p>Alternate solutions for the header extraction if you want to omit row times if and use adaptive widths without hardcoding lengths:</p>
<p>Demofile:</p>
<pre><code>t = """Track,Artist,Album,Time
Very Long Songname 1,Artist 1,Album 1,7:15
Songname 1,Artist 2,Album 2 title with epic proportions,6:27
"""
with open("t.txt","w") as w:
    w.write(t)
</code></pre>
<p>Code:    </p>
<pre><code>import csv

def get_format_string(w):
    s = '|'+'|'.join(" {{:&lt;{}}} ".format(l) for _,l in sorted(w.items()))+'|'
    return s.format

def get_widths(reader,filehandle):
    """Calculate maximum widths of columns. Rewinds filehandle to seek(0)."""
    widths = {}
    for row in reader:
        for i,c in enumerate(row):
            widths[i] = max(widths.get(i,0), len(c))
    # rewind
    filehandle.seek(0)
    return widths  

with open('t.txt', mode='r') as csv_file:
    csv_reader = csv.reader(csv_file)
    fmt = get_format_string(get_widths(csv_reader,csv_file))

    header = fmt(*(next(csv_reader)))
    w = len(header)
    print("-"*w)
    print(header)
    print("-"*w)

    # deal with the rest of the data
    for row in csv_reader:
        print(fmt(*row))

    # and the last line
    print("-"*w)
</code></pre>
<p>Output:</p>
<pre><code>--------------------------------------------------------------------------------
| Track                | Artist   | Album                               | Time |
--------------------------------------------------------------------------------
| Very Long Songname 1 | Artist 1 | Album 1                             | 7:15 |
| Songname 1           | Artist 2 | Album 2 title with epic proportions | 6:27 |
--------------------------------------------------------------------------------
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe what you're trying to achieve is that the header of your table(i.e. the column names) should come off separately. If I am understanding you right, then I'll suggest why not use pandas.read_csv to import your csv file. It identifies the header by itself and if not then it does have this as an argument that how to select a row as the header.</p>
<p>Check out the documentation:
<a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="nofollow noreferrer">Pandas- read_csv</a></p>
<p>Also, if in case you want dashes only or the way you mentioned it, then I believe you will have to add print statement after printing your first row which has the column names and then another print statement for dashes and then a loop for other info and then a final print for more dashes. So yeah that's one manual way to do it.</p>
<p><strong><em>Edit:</em></strong>
Since  you asked for the manual way of doing it, here's the code:</p>
<pre><code>import csv

with open('stacko.csv') as csv_file:
    csv_reader = csv.reader(csv_file, delimiter='|')
    line_count = 0
    print("-----------------------------------------------------------------------------------")
    for row in csv_reader:
        if line_count == 0:
            print("|",row[1], " " * (5 - len(row[1])), "|",
                  row[2], " " * (10 - len(row[2])), "|",
                  row[3], " " * (5 - len(row[3])), "|",
                  row[4], " " * (5 - len(row[4])), "|")
            print("-----------------------------------------------------------------------------------")
            line_count=1
        else:
            print("|",row[1], " " * (5 - len(row[1])), "|",
                  row[2], " " * (10 - len(row[2])), "|",
                  row[3], " " * (5 - len(row[3])), "|",
                  row[4], " " * (5 - len(row[4])), "|")
    print("-----------------------------------------------------------------------------------")
</code></pre>
<p><strong>Output</strong>:</p>
<p><div class="snippet" data-babel="false" data-console="true" data-hide="false" data-lang="js">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>-----------------------------------------------------------------------------------
|  Track             |  Artist             |  Album                   |  Time     |
-----------------------------------------------------------------------------------
|  Songname 1        |  Artist 1           |  Album 1                 |  7:15     |
|  Songname 1        |  Artist 2           |  Album 2                 |  6:27     |
|  Songname 1        |  Artist 3           |  Album 3                 |  5:24     |
|  Songname 1        |  Artist 4           |  Album 4                 |  2:50     |
|  Songname 1        |  Artist 5           |  Album 5                 |  4:39     |
|  Songname 1        |  Artist 6           |  Album 6                 |  5:11     |
|  Songname 1        |  Artist 7           |  Album 7                 |  2:56     |
|  Songname 1        |  Artist 8           |  Album 8                 |  4:29     |
|  Songname 1        |  Artist 9           |  Album 9                 |  3:17     |
|  Songname 1        |  Artist 10          |  Album 10                |  3:04     |
-----------------------------------------------------------------------------------</code></pre>
</div>
</div>
</p>
</div>
<span class="comment-copy">have you tried adding the lines yourself?</span>
<span class="comment-copy">You may be interested in some of the "pretty print" type libraries <a href="https://stackoverflow.com/questions/9535954/printing-lists-as-tabular-data">mentioned here</a> such as <a href="https://pypi.python.org/pypi/tabulate" rel="nofollow noreferrer"><code>tabulate</code></a>, <a href="https://pypi.python.org/pypi/PrettyTable" rel="nofollow noreferrer"><code>PrettyTable</code></a>, <a href="https://pypi.python.org/pypi/texttable" rel="nofollow noreferrer"><code>texttable</code></a>, etc</span>
<span class="comment-copy">@depperm do you mean adding the lines directly into the csv file?</span>
<span class="comment-copy">I mean what have you tried to add the lines to the output yourself?</span>
<span class="comment-copy">@CoryKramer thanks for your feedback, I should have mentioned in the original post that I'd like to avoid using type libraries if possible</span>
<span class="comment-copy">Checking <code>if idx == 0</code> for every iteration seems wasteful.</span>
<span class="comment-copy">You don't need <code>idx</code> or <code>enumerate</code> in the second example. Also, you could pull that format string into a separate variable like <code>fmt = "|{:&lt;20}|{:&lt;15}|{:&lt;20}|{:&lt;5}|".format</code>.</span>
<span class="comment-copy">The only problem with this (depending on OP's requirements) might be the hard-coded widths. If you want to dynamically size the table to be more "form-fitting", you would have to iterate through the csv file keeping track of the maximum length per column and then build the table accordingly.</span>
<span class="comment-copy">Ya, I think your code is fine for what we know from OP so far!</span>
<span class="comment-copy">@G_M now it adapts to widths ;) - thx for suggesting</span>
<span class="comment-copy">So if I was to do it the manual way you suggested, how would I be able to keep the headings and the rest of the table content in line like it does on the 'output i'd like to achieve' in my original post</span>
<span class="comment-copy">Added the code, take a look. I guess that print thing can be changed via length function and repeating the dashes as per the length, exactly how Patrick has somewhat done it, but right now I am just hardcoding it to a fixed length as per the table you've provided. Try to play around a bit and I'll strongly suggest to use Pandas.read_csv  Have a nice day ahead Largo</span>
