<div class="post-text" itemprop="text">
<p>I have a 2D list:</p>
<pre><code>arr = [['Mohit', 'shini','Manoj','Mot'],
      ['Mohit', 'shini','Manoj'],
      ['Mohit', 'Vis', 'Nusrath']]
</code></pre>
<p>I want to find the most frequent element in the 2D list. In the above example, the most common string is <code>'Mohit'</code>.</p>
<p>I know I can use brute force using two for loops and a dictionary to do this, but is there a more efficient way using numpy or any other library? </p>
<blockquote>
<p>The nested lists could be of different lengths</p>
</blockquote>
<p>Can someone also add the time of their methods? To find the fasted method. Also the caveats at which it might not be very efficient.</p>
<p><strong>Edit</strong></p>
<p>These are the timings of different methods on my system:</p>
<pre><code>#timegb
%%timeit
collections.Counter(chain.from_iterable(arr)).most_common(1)[0][0]
5.91 µs ± 115 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

#Kevin Fang and Curious Mind
%%timeit
flat_list = [item for sublist in arr for item in sublist]
collections.Counter(flat_list).most_common(1)[0]
6.42 µs ± 501 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

%%timeit
c = collections.Counter(item for sublist in arr for item in sublist).most_common(1)c[0][0]
6.79 µs ± 449 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

#Mayank Porwal
def most_common(lst):
    return max(set(lst), key=lst.count)
%%timeit
ls = list(chain.from_iterable(arr))
most_common(ls)
2.33 µs ± 42.8 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)

#U9-Forward
%%timeit
l=[x for i in arr for x in i]
max(l,key=l.count)
2.6 µs ± 68.8 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
</code></pre>
<p>Mayank Porwal's method runs the fastest on my system.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>Flatten the list with <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a></li>
<li>Apply a <a href="https://docs.python.org/3/library/collections.html?highlight=collections#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>.</li>
</ol>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; 
&gt;&gt;&gt; lst = [['Mohit', 'shini','Manoj','Mot'],
...:      ['Mohit', 'shini','Manoj'],
...:      ['Mohit', 'Vis', 'Nusrath']]
...:      
&gt;&gt;&gt; Counter(chain.from_iterable(lst)).most_common(1)[0][0]
'Mohit'
</code></pre>
<p>Details:</p>
<pre><code>&gt;&gt;&gt; list(chain.from_iterable(lst))
['Mohit',
 'shini',
 'Manoj',
 'Mot',
 'Mohit',
 'shini',
 'Manoj',
 'Mohit',
 'Vis',
 'Nusrath']
&gt;&gt;&gt; Counter(chain.from_iterable(lst))
Counter({'Manoj': 2, 'Mohit': 3, 'Mot': 1, 'Nusrath': 1, 'Vis': 1, 'shini': 2})
&gt;&gt;&gt; Counter(chain.from_iterable(lst)).most_common(1)
[('Mohit', 3)]
</code></pre>
<p>Some timings:</p>
<pre><code>&gt;&gt;&gt; lst = lst*100
&gt;&gt;&gt; %timeit Counter(chain.from_iterable(lst)).most_common(1)[0][0] # timgeb
53.7 µs ± 411 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
&gt;&gt;&gt; %timeit max([x for i in lst for x in i], key=l.count) # U9-Forward
207 µs ± 389 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each)
&gt;&gt;&gt; %timeit Counter([x for sublist in lst for x in sublist]).most_common(1)[0][0] # Curious_Mind/Kevin Fang #1
75.2 µs ± 2.6 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
&gt;&gt;&gt; %timeit Counter(item for sublist in lst for item in sublist).most_common(1)[0][0] # Kevin Fang #2
95.2 µs ± 2.07 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)
&gt;&gt;&gt; %timeit flat = list(chain.from_iterable(lst)); max(set(flat), key=flat.count) # Mayank Porwal
98.4 µs ± 178 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)
</code></pre>
<p>(Note that Kevin Fang's second solution is a bit slower than the first one, but more memory efficient.)</p>
</div>
<div class="post-text" itemprop="text">
<p>I'd suggest flatten out the 2D Array and then use a counter to find out the most frequent element.</p>
<pre><code>flat_list = [item for sublist in arr for item in sublist]
from collections import Counter
Counter(flat_list).most_common(1)[0]
# ('Mohit', 3)
Counter(flat_list).most_common(1)[0][0]
# 'Mohit'
</code></pre>
<p>Not sure if it is the fastest approach though.</p>
<p>Edit:</p>
<p>@timgeb's answer has a faster way to flatten the list using <code>itertools.chain</code></p>
<p>A more space efficient way suggested by @schwobaseggl:</p>
<pre><code>from collections import Counter
c = Counter(item for sublist in arr for item in sublist).most_common(1)
# [('Mohit', 3)]
c[0][0]
# 'Mohit'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way to do it this way,</p>
<pre><code>import collections
import time
start_time = time.time()
arr = [['Mohit', 'shini','Manoj','Mot'],
      ['Mohit', 'shini','Manoj'],
      ['Mohit', 'Vis', 'Nusrath']]

c = collections.Counter([x for sublist in arr for x in sublist])
print(c.most_common(1) )
print("--- %s seconds ---" % (time.time() - start_time)) 
</code></pre>
<p><strong>Time taken:</strong> 0.00016713142395 seconds</p>
<p>DEMO:  <a href="http://tpcg.io/NH3zjm" rel="nofollow noreferrer">http://tpcg.io/NH3zjm</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>Something like this:</p>
<pre><code>In [920]: from itertools import chain
In [923]: arr = list(chain.from_iterable(arr)) ## flatten into 1-D array
In [922]: def most_common(lst):
     ...:     return max(set(lst), key=lst.count)

In [924]: most_common(arr)
Out[924]: 'Mohit'
</code></pre>
<p>Timings:</p>
<pre><code>from itertools import chain
import time
start_time = time.time()

arr = [['Mohit', 'shini','Manoj','Mot'],
      ['Mohit', 'shini','Manoj'],
      ['Mohit', 'Vis', 'Nusrath']]


arr = list(chain.from_iterable(arr))
arr = arr*100

def most_common(lst):
    return max(set(lst), key=lst.count)

print(most_common(arr))
print("--- %s seconds ---" % (time.time() - start_time))

mayankp@mayank:~$ python t1.py 
Mohit
--- 0.000154972076416 seconds ---
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Or why not:</p>
<pre><code>l=[x for i in arr for x in i]
max(l,key=l.count)
</code></pre>
<p>Code example:</p>
<pre><code>&gt;&gt;&gt; arr = [['Mohit', 'shini','Manoj','Mot'],
      ['Mohit', 'shini','Manoj'],
      ['Mohit', 'Vis', 'Nusrath']]
&gt;&gt;&gt; l=[x for i in arr for x in i]
&gt;&gt;&gt; max(l,key=l.count)
'Mohit'
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">How do you define 'frequent`, occurs most number of times or occurs in most number of sub-lists/rows?</span>
<span class="comment-copy">Occurs most number of times in the complete 2d Array.</span>
<span class="comment-copy">Any constraints on number of elements in the nested array (n) vs. number of nested array (m). i.e. m &gt;&gt; n or n &lt;&lt; m?</span>
<span class="comment-copy">@bigdata2 not really. The 2D list is unlikely to be very big. Even the elements within the list.</span>
<span class="comment-copy">@MohitMotwani the timings kinda depend on the length of the list and the number of unique elements in it. The max(set... solution is fast for lists with few unique elements</span>
<span class="comment-copy">Yeah looks like <code>chain</code> is the fastest flatten method from <a href="https://stackoverflow.com/questions/952914/how-to-make-a-flat-list-out-of-list-of-lists">this question</a></span>
<span class="comment-copy">@timegb Thank you. This works. Can you also add the time taken by your method? It'd be easier to check the fastest method.</span>
<span class="comment-copy">@MohitMotwani all the timings need to be done on the same computer because only then they are comparable. I will do some timings in a minute.</span>
<span class="comment-copy">@timegb Really appreciate it. Thank you</span>
<span class="comment-copy">@MohitMotwani sorry, messed up some timings... edited again</span>
<span class="comment-copy">You might also be more space-efficient by using a nested generator expression instead of a list. Rather store the counter in a variable as you need it either way, while you do not need the list.</span>
<span class="comment-copy">@KevinFang Thank you. This works. Can you also add the time taken by your method? It'd be easier to check the fastest method.</span>
<span class="comment-copy">@Curios_Mind Thank you. This works. Can you also add the time taken by your method? It'd be easier to check the fastest method.</span>
<span class="comment-copy">@MohitMotwani <b>EDITED</b></span>
<span class="comment-copy">Thank you. This works. Can you also add the time taken by your method? It'd be easier to check the fastest method.</span>
<span class="comment-copy">@MohitMotwani Edited the timings too. Also note <code>arr= arr*100</code> in my code.</span>
