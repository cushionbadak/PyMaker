<div class="post-text" itemprop="text">
<p>I have a dictionary with objects as values.  These objects are instances of the following class:</p>
<pre><code>Class A():

    def __init__(self, x=''):
        self.x = x
        self.count = 0
</code></pre>
<p>The dictionary entries will therefore be of the form: <code>{'some_key', instance_of_class_A}</code> </p>
<p>Now, I would like to sort the dictionary on the the value of A.count within the instance_of_A.</p>
<p>I have failed to find an answer to this through numerous searches so am hoping someone has solved this before!
Thanks
P. </p>
</div>
<div class="post-text" itemprop="text">
<p>To sort the values of a dictionary, you can do the following:</p>
<pre><code>sorted_values = sorted(dict.values(), key=lambda x: x.count)
</code></pre>
<p>I do not see the need for sorting an entire dictionary, however. If the key value can hold a list of <code>A</code> objects and you want to sort that:</p>
<pre><code>dict[key] = sorted(dict[key], key=lambda x: x.count)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you are using a version of Python that provides for guaranteed ordering, you need to create a new dict, inserting the elements in the proper order.</p>
<pre><code>old_dict = { ... }
new_dict = dict(sorted(old_dict.items(), key=lambda kv: kv[1].count))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>While dictionaries are insertion-ordered in Python 3.6 (as an implementation detail) and officially in 3.7+, for a robust ordered dictionary use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict</code></a>:</p>
<pre><code>from collections import OrderedDict

res = OrderedDict(sorted(d.items(), key=lambda x: x[1].count))
</code></pre>
<p><code>OrderedDict</code> is a subclass of <code>dict</code>, so you should lose no functionality.</p>
<p>If such an ordering is <em>natural</em> or <em>typical</em> to your class objects, consider defining <code>__eq__</code> and <code>__lt__</code> methods to your class <a href="https://stackoverflow.com/a/48731059/9209546">as described here</a> and then use:</p>
<pre><code>from operator import itemgetter

res = OrderedDict(sorted(d.items(), key=lambda x: x[1]))
res = OrderedDict(sorted(d.items(), key=itemgetter(1)))  # functional equivalent
</code></pre>
</div>
<span class="comment-copy">What do you mean by "sort the dictionary"? Dictionaries are inherently unordered, even in Python 3.7, where the <i>iteration</i> order is guaranteed to match the order in which the keys were inserted.</span>
<span class="comment-copy">I understand that yes, but I would like to order the dictionary.  And I need this ordering to be based on the value of the object field.</span>
<span class="comment-copy"><code>{'some_key', instance_of_class_A}</code> does not look like a dictionary - do you mean <code>{'some_key': instance_of_class_A}</code> and are these dictionary entries in a list? can you show an example? also, please include what you have tried so far.</span>
<span class="comment-copy">It should be noted that this is only guaranteed on 3.7+, but also works on 3.5 and 3.6 as the result of an implementation detail. This difference means that on non-CPython implementations of 3.5 and 3.6 this may not work.</span>
<span class="comment-copy">Does it work in CPython 3.5? I thought that implementation wasn't added until 3.6.</span>
<span class="comment-copy">You're right. I misremembered.</span>
