<div class="post-text" itemprop="text">
<p>I would like to know what's the meaning of the following expressions, especially the meaning of </p>
<blockquote>
<p><code>!</code> and <code>?</code></p>
</blockquote>
<p>in the following examples, relating to Querying Data in Pandas DataFrame:</p>
<p><strong>Exclamation mark:</strong></p>
<ul>
<li><code>!cat olympics.csv</code> </li>
</ul>
<p><strong>Question Mark(s):</strong></p>
<ul>
<li><code>df.fillna?</code> </li>
<li><code>import pandas as pd
pd.Series?</code></li>
<li><code>copy_df.drop?</code></li>
</ul>
<p>Thanks! </p>
</div>
<div class="post-text" itemprop="text">
<p>Both of these marks will work in a <strong>Jupyter notebook</strong>.</p>
<p>The exclamation mark <code>!</code> is used for executing commands from the uderlying operating system; here is an example using WIndows <code>dir</code>:</p>
<pre><code>!dir
# result:
Volume in drive C has no label.
 Volume Serial Number is 52EA-B90C

 Directory of C:\Users\Root

27/11/2018  13:08    &lt;DIR&gt;          .
27/11/2018  13:08    &lt;DIR&gt;          ..
23/08/2016  11:00             2,258 .adalcache
12/09/2016  18:06    &lt;DIR&gt;          .anaconda
[...]
</code></pre>
<p>The question <code>?</code> mark is used to provide in-notebook help:</p>
<pre><code>import pandas as pd
import numpy as np

df = pd.DataFrame([[np.nan, 2, np.nan, 0],
                   [3, 4, np.nan, 1],
                   [np.nan, np.nan, np.nan, 5],
                   [np.nan, 3, np.nan, 4]],
                   columns=list('ABCD'))

df.fillna?
# result:

Signature: df.fillna(value=None, method=None, axis=None, inplace=False, limit=None, downcast=None, **kwargs)
Docstring:
Fill NA/NaN values using the specified method

Parameters
----------
value : scalar, dict, Series, or DataFrame
    Value to use to fill holes (e.g. 0), alternately a
    dict/Series/DataFrame of values specifying which value to use for
    each index (for a Series) or column (for a DataFrame). (values not
    in the dict/Series/DataFrame will not be filled). This value cannot
    be a list.
method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None
    Method to use for filling holes in reindexed Series
    pad / ffill: propagate last valid observation forward to next valid
    backfill / bfill: use NEXT valid observation to fill gap
axis : {0, 1, 'index', 'columns'}
inplace : boolean, default False
    If True, fill in place. Note: this will modify any
    other views on this object, (e.g. a no-copy slice for a column in a
    DataFrame).
limit : int, default None
    If method is specified, this is the maximum number of consecutive
    NaN values to forward/backward fill. In other words, if there is
    a gap with more than this number of consecutive NaNs, it will only
    be partially filled. If method is not specified, this is the
    maximum number of entries along the entire axis where NaNs will be
    filled.
downcast : dict, default is None
    a dict of item-&gt;dtype of what to downcast if possible,
    or the string 'infer' which will try to downcast to an appropriate
    equal type (e.g. float64 to int64 if possible)

See Also
--------
reindex, asfreq

Returns
-------
filled : DataFrame
File:      c:\users\root\anaconda3\lib\site-packages\pandas\core\frame.py
Type:      method  
</code></pre>
<p>And as it should be clear by now, none of these marks is pandas-specific:</p>
<pre><code>np.argmax?
# result:

Signature: np.argmax(a, axis=None, out=None)
Docstring:
Returns the indices of the maximum values along an axis.

Parameters
----------
a : array_like
    Input array.
axis : int, optional
    By default, the index is into the flattened array, otherwise
    along the specified axis.
out : array, optional
    If provided, the result will be inserted into this array. It should
    be of the appropriate shape and dtype.

Returns
-------
index_array : ndarray of ints
    Array of indices into the array. It has the same shape as `a.shape`
    with the dimension along `axis` removed.

See Also
--------
ndarray.argmax, argmin
amax : The maximum value along a given axis.
unravel_index : Convert a flat index into an index tuple.

Notes
-----
In case of multiple occurrences of the maximum values, the indices
corresponding to the first occurrence are returned.

Examples
--------
&gt;&gt;&gt; a = np.arange(6).reshape(2,3)
&gt;&gt;&gt; a
array([[0, 1, 2],
       [3, 4, 5]])
&gt;&gt;&gt; np.argmax(a)
5
&gt;&gt;&gt; np.argmax(a, axis=0)
array([1, 1, 1])
&gt;&gt;&gt; np.argmax(a, axis=1)
array([2, 2])

&gt;&gt;&gt; b = np.arange(6)
&gt;&gt;&gt; b[1] = 5
&gt;&gt;&gt; b
array([0, 5, 2, 3, 4, 5])
&gt;&gt;&gt; np.argmax(b) # Only the first occurrence is returned.
1
File:      c:\users\root\anaconda3\lib\site-packages\numpy\core\fromnumeric.py
Type:      function
</code></pre>
</div>
<span class="comment-copy"><code>!</code> mark is literally meaning of <code>not</code>  or <code>inverse</code> but I don't see anything with <code>?</code></span>
<span class="comment-copy">None of those things will work in Python. <code>!</code> is used for negation in some languages, <code>?</code> has various uses, but neither are valid syntax in Python. (You can see the full grammar <a href="https://docs.python.org/3/reference/grammar.html" rel="nofollow noreferrer">here</a>; <code>!</code> only appears in <code>!=</code>, <code>?</code> not at all.)</span>
<span class="comment-copy">You sure you don't mean <code>!</code> in a <i>Jupyter notebook</i>, where it is used for executing OS commands (like <code>cat</code> here)?</span>
<span class="comment-copy">It's not a valid syntax which you provides for an example.</span>
<span class="comment-copy">@desertnaut ah yes, those things would work in Jupyter, good catch.</span>
<span class="comment-copy">Is Jupyter Notebook an ipython platform? Thanx!</span>
<span class="comment-copy">@YoelZajac Jupyter is more general than ipython - it includes ipython, but it also works with many other languages; google it...</span>
<span class="comment-copy"><b>Thanks to all of you guys. Have all a great day! :-D</b></span>
