<div class="post-text" itemprop="text">
<p>I am trying to identify all files with certain names in a folder. I am using standard code to do that looking like this:</p>
<pre><code>for paths, subdirs, files in os.walk(start_dir, topdown=True):
    for file in files:
        print(os.path.join(paths, file))
</code></pre>
<p>My problem is about the output of this code in windows machine, basically dynamic parts of the path have wrong slash sign:</p>
<pre><code>D:/JAJA/Projects/DAF/AIM/WEBAPP/trunk/src/main/java/ie/gov/agriculture/aim\aes\AesSheetNumberEntity.java
D:/JAJA/Projects/DAF/AIM/WEBAPP/trunk/src/main/java/ie/gov/agriculture/aim\aes\DocumentReceivedDetailEntity.java
D:/JAJA/Projects/DAF/AIM/WEBAPP/trunk/src/main/java/ie/gov/agriculture/aim\aes\DocumentReceivedEntity.java
D:/JAJA/Projects/DAF/AIM/WEBAPP/trunk/src/main/java/ie/gov/agriculture/aim\aes\DocumentTypeEntity.java
</code></pre>
<p>start folder which was given is:</p>
<pre><code>D:/JAJA/Projects/DAF/AIM/WEBAPP/trunk/src/main/java/ie/gov/agriculture/aim
</code></pre>
<p>and the folder separator is unix one: <code>"/"</code></p>
<p>while all subsequent subfolders found by os.walk function have windows slash instead: <code>"\"</code></p>
<p>So at the end I have invalid path which cannot be used straight away. Is this a bug in python os library or what actually?</p>
<p>Currently I can easily replace wrong separator with the right one but I am wondering if it is the only way?</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no actual problem here. Windows supports <strong>two path separators</strong>; the forward and backward slashes are both valid and supported, even when mixed. One is the <code>os.sep</code> (<code>\</code>), and the other the <code>os.altsep</code> character (<code>/</code>). </p>
<p><code>os.path.join()</code> user <code>os.sep</code> to join paths, but won't replace <code>os.altsep</code> in the input paths. <code>os.walk()</code> just uses <code>os.path.join()</code> to build the first element of each <code>(path, files, directories)</code> tuple it generates</p>
<p>If this bothers you, <em>normalise</em> your paths, using the <a href="https://docs.python.org/3/library/os.path.html#os.path.normpath" rel="nofollow noreferrer"><code>os.path.normpath()</code> function</a>:</p>
<blockquote>
<p>On Windows, it converts forward slashes to backward slashes.</p>
</blockquote>
<p>So normalise the path passed to <code>os.walk()</code>:</p>
<pre><code>for paths, subdirs, files in os.walk(os.path.normpath(start_dir), topdown=True):
    for file in files:
        full_path = os.path.join(paths, file)
        print(full_path)
</code></pre>
<p>or normalise the paths generated in the loop:</p>
<pre><code>for paths, subdirs, files in os.walk(start_dir, topdown=True):
    for file in files:
        full_path = os.path.join(paths, file)
        normalised = os.path.normpath(full_path)
        print(normalised)
</code></pre>
<p>or normalise the input string:</p>
</div>
<span class="comment-copy">I thought the Python standard was <code>os.sep.join(sequence_to_join)</code> ? I would guess that the use of <code>os.path</code> here may be what's causing your issue</span>
<span class="comment-copy">The paths are <i>not actually wrong</i>, they will work with the mix of slashes. Both are valid. Windows has <b>two</b> path separators and it doesn't matter if you mix them.</span>
<span class="comment-copy">If you want to normalise the paths to a single separator, do so explicitly, using <code>os.path.normpath()</code></span>
<span class="comment-copy">Your example seems mixed up: path starts with <code>D:JAJA</code> (no slash), is that really what you get?</span>
<span class="comment-copy">@JoÃ«l: lets assume that that's a simple 'anonymise the string for Stack Overflow posting' editing error. I added the slashes back in.</span>
<span class="comment-copy">it did bother me that the path is mixed because when you try to create a new file with such path it will fail, however you answer fills the bill</span>
<span class="comment-copy">@smoczyna: no, creating a new file with a path that mixes forward and backward slashes will not fail, everything else being equal (i.e. if that path with only forward or only backward slashes can be created, then it can be created with mixed slashes too0.</span>
<span class="comment-copy">Well I have permission denied error when I try. It is obviously not true as I am operating within my home folder only.</span>
<span class="comment-copy">@smoczyna: Now try again with <code>os.path.normpath()</code>. <b>You'll get the same exception</b>.</span>
<span class="comment-copy">You actually right, that was my fault, not the path, thanks</span>
