<div class="post-text" itemprop="text">
<p><strong>Context:</strong><br/>
Some code I found which implements a XOR linked list. In XOR linked list, instead of each node having a next pointer, it has a <code>both</code> attribute which is the XOR of prev and next node.</p>
<pre><code>import ctypes


# This is hacky. It's a data structure for C, not python.
class Node(object):
    def __init__(self, val):
        self.val = val
        self.both = 0


class XorLinkedList(object):
    def __init__(self):
        self.head = self.tail = None
        self.__nodes = [] # This is to prevent garbage collection

    def add(self, node):
        if self.head is None:
            self.head = self.tail = node
        else:
            self.tail.both = id(node) ^ self.tail.both
            node.both = id(self.tail)
            self.tail = node

        # Without this line, Python thinks there is no way to reach nodes between
        # head and tail.
        self.__nodes.append(node)


    def get(self, index):
        prev_id = 0
        node = self.head
        for i in range(index):
            next_id = prev_id ^ node.both

            if next_id:
                prev_id = id(node)
                node = _get_obj(next_id)
            else:
                raise IndexError('Linked list index out of range')
        return node


def _get_obj(id):
    return ctypes.cast(id, ctypes.py_object).value
</code></pre>
<p><strong>Questions:</strong></p>
<ol>
<li>Don't understand the need of <code>_get_obj()</code> function and what it is trying
to do here?</li>
<li>How is <code>self.__nodes = []</code> useful? And how it implements
garbage collection here?</li>
<li><p>I have no idea what the following code is doing:</p>
<pre><code># Without this line, Python thinks there is no way to reach nodes between
# head and tail.
self.__nodes.append(node)`
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>I can answer most of the sub-questions within your question.</p>
<ol>
<li><p>the <code>_get_obj()</code> function is the inverse Python's own <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer"><code>id()</code></a> function (with the CPython interpreter anyway).
There are other ways to do it. See for example the question <a href="https://stackoverflow.com/questions/15011674/is-it-possible-to-dereference-variable-ids/15012814">Is it possible to dereference variable id's?</a>.</p></li>
<li><p>&amp; 3. The <code>self.__nodes.append(node)</code> adds the <code>Node</code> instance to a private list because adding it to the XOR linked-list doesn't create a reference to it as would likely happen in a more common normal implementation (the XOR trick eliminates the need for them). Without this, the Python garbage-collector might delete the <code>Node</code> instance while it was still part of the linked-list.</p></li>
</ol>
</div>
