<div class="post-text" itemprop="text">
<p>I have a function to catch <em>uncaught</em> exceptions, below. Is there any way to write a unit test that will execute the <code>uncaught_exception_handler()</code> function, but exit the test normally?</p>
<pre><code>import logging

def config_logger():
    # logger setup here

def init_uncaught_exception_logger(logger):
    '''Setup an exception handler to log uncaught exceptions.

    This is typically called once per main executable.
    This function only exists to provide a logger context to the nested function.

    Args:
        logger (Logger): The logger object to log uncaught exceptions with.
    '''
    def uncaught_exception_handler(*exc_args):
        '''Log uncaught exceptions with logger.

        Args:
            exc_args: exception type, value, and traceback
        '''
        print("Triggered uncaught_exception_handler")
        logger.error("uncaught: {}: {}\n{}".format(*exc_args))

    sys.excepthook = uncaught_exception_handler

if __name__ == '__main__':
    LOGGER = config_logger()
    init_uncaught_exception_logger(LOGGER)
    raise Exception("This is an intentional uncaught exception")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Instead of testing that your function is called for uncaught exceptions, it's probably best to instead test that the <code>excepthook</code> is installed, and that the function does the right thing when you call it manually. That gives you pretty good evidence that the <code>excepthook</code> will behave properly in real usage. You'll want to move your <code>uncaught_exception_handler</code> outside of <code>init_uncaught_exception_logger</code> so your tests can access it more easily.</p>
<pre><code>assert sys.excepthook is uncaught_exception_handler
with your_preferred_output_capture_mechanism:
    try:
        1/0
    except ZeroDivisionError:
        uncaught_exception_handler(*sys.exc_info())
assert_something_about_captured_output()
</code></pre>
<p>If you want to actually invoke <code>excepthook</code> through an uncaught exception, then you'll need to launch a subprocess and examine its output. The <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code> module</a> is the way to go for that.</p>
</div>
<div class="post-text" itemprop="text">
<p>In order to write assertions about raised exceptions, you can use <a href="https://docs.pytest.org/en/latest/reference.html#pytest-raises" rel="nofollow noreferrer"><code>pytest.raises</code></a> as a context manager like this:</p>
<blockquote>
<p>with raises(expected_exception: Exception[, match][, message])</p>
</blockquote>
<pre><code>import pytest

def test_which_will_raise_exception():
    with pytest.raises(Exception):
        # Your function to test.
</code></pre>
<p>Now, this unit test will pass only if any code under pytest.raises context manager will raise an exception provided as a parameter. In this case, it's <code>Exception</code>.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/23337471/how-to-properly-assert-that-an-exception-gets-raised-in-pytest">How to properly assert that an exception gets raised in pytest?</a></span>
<span class="comment-copy">@cody: please reread the question? "Uncaught" is the distinguishing factor here.</span>
<span class="comment-copy">Thanks @user2357112, for breaking down the problem and my mental barriers.</span>
<span class="comment-copy">See <a href="https://docs.python.org/3.7/library/sys.html?highlight=sys%20excepthook#sys.excepthook" rel="nofollow noreferrer">sys.excepthook</a>, specifically: "<i>When an exception is raised and <b>uncaught</b>, the interpreter calls sys.excepthook...</i>". Does <code>pytest.raises()</code> catch the exception after <code>sys.excepthook</code>?</span>
<span class="comment-copy">@QuantumMechanic If the call comes from tested code inside <code>pytest.raises</code> context manager then it should. Give me some time, I'll do some research and tests. If this will work then I'll provide a more detailed example.</span>
