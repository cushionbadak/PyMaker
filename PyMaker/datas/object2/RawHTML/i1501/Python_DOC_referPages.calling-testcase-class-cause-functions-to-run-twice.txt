<div class="post-text" itemprop="text">
<p>I was trying to dynamically create test functions when I notice a weird behavior that I do not understand. I have reduced the code to this for simple understanding. I am running it on python 3.6.7</p>
<p>Code:</p>
<pre><code>import unittest

class MyTestCase(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        print('SET UP')

    def test_x(self):
        print('hi')

x = MyTestCase # &lt;-This causes the test function to run twice, Why???

if __name__ == "__main__":
    print('test start')
    unittest.main()
    print('test end') # &lt;- This does not get printed
</code></pre>
<p>Output: </p>
<pre><code>test start
SET UP
hi
.hi
.
----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
</code></pre>
<p>As you can see, the test function test_x is being run twice and the last print statement is not executed </p>
<p>So my questions are: </p>
<ol>
<li>why does the test function run twice?</li>
<li>why is the print statement print('test end') not executed?</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><em>1. why does the test function run twice?</em></p>
<p>Because the <code>unittest</code> code finds <em>two</em> objects in the module's namespace that are <code>unittest.TestCase</code> classes, <code>MyTestCase</code> and <code>x</code>.  It doesn't check that these are actually the <em>same</em> object.  (Well, it has <em>some</em> awareness of this, in that it doesn't treat <code>x</code> as a new class to be tested, so it doesn't call <code>setUpClass</code> again; see <a href="https://docs.python.org/3/library/unittest.html#class-and-module-fixtures" rel="nofollow noreferrer">"Class and Module Fixtures"</a>.)</p>
<p><em>2. why is the print statement print('test end') not executed?</em></p>
<p>By default, <code>unittest.main()</code> calls <code>sys.exit()</code> after running the tests.  You can disable this by adding the argument <code>exit=False</code>:</p>
<pre><code>if __name__ == "__main__":
    print('test start')
    unittest.main(exit=False)
    print('test end')
</code></pre>
</div>
