<div class="post-text" itemprop="text">
<p>curr_time = 'Thursday 1:03:00'</p>
<p>time_range = ['Wednesday 6:12:00', 'Thursday 6:12:00']</p>
<pre><code>def is_between(self,curr_time, time_range):
    if time_range[1] &lt; time_range[0]:
        return curr_time &gt;= time_range[0] or curr_time &lt;= time_range[1]
    return time_range[0] &lt;= curr_time &lt;= time_range[1]
</code></pre>
<p>Is something wrong in this. Return value is not correct all the time.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that you are comparing two strings. The days of the week are input as strings so the code compares the characters of the strings instead of the days of the week. I'd suggest using datetime objects from the datetime module for python:</p>
<p>Python3: <a href="https://docs.python.org/3/library/datetime.html#module-datetime" rel="nofollow noreferrer">https://docs.python.org/3/library/datetime.html#module-datetime</a></p>
<p>Python2: <a href="https://docs.python.org/2/library/datetime.html#module-datetime" rel="nofollow noreferrer">https://docs.python.org/2/library/datetime.html#module-datetime</a></p>
<p>If you have the user input the days and times within datetime objects they should be more easily comparable within your current code.</p>
</div>
<span class="comment-copy">Thanks for the answer. But I was expecting something like this. &gt;&gt;&gt; c = datetime.strptime("Friday 22:12:00", '%A %H:%M:%S') &gt;&gt;&gt; a = datetime.strptime("Monday 6:12:00", '%A %H:%M:%S') &gt;&gt;&gt; b = datetime.strptime("Thursday 23:12:00", '%A %H:%M:%S')  From datetime module i couldn't figure out the answer.</span>
<span class="comment-copy">The easiest way to make this method is to compare datetime objects. Either have datetime objects passed as curr_time and in time_range or use datetime.striptime() to create those from strings handed to the method. Datetime objects can be compared using operations such as &gt;, &lt;=, and ==. Use the module to figure out how you want to create each datetime object.</span>
