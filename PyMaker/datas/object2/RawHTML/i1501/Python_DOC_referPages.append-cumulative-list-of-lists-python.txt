<div class="post-text" itemprop="text">
<p>I am trying to extend a list of lists in a commulative way like this:</p>
<pre><code># Consider the following list of lists
l_Of_l = [ [1], [2], [3], [4], [5], [6], [7]]
</code></pre>
<p>Desired result is:</p>
<pre><code>l_extended = [ [1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]]
</code></pre>
<p>So basically the size of the list remains the same after extending commulatively.</p>
<p><strong>Edit:</strong></p>
<p>Here is what I did initially:</p>
<pre><code>l_Of_l = [ [1], [2], [3], [4], [5], [6], [7]]
lista = []
for i in l_Of_l:
    lista.extend(i)
    print(list([i for i in lista]))
</code></pre>
<p>But then the result was:</p>
<pre><code>[1]
[1, 2]
[1, 2, 3]
[1, 2, 3, 4]
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5, 6]
[1, 2, 3, 4, 5, 6, 7]
</code></pre>
<p>Does anyone know how to achieve this in the correct way?</p>
</div>
<div class="post-text" itemprop="text">
<p>One way to do this without itertools is to use Python's <code>sum</code> function to concatenate lists.  </p>
<pre><code>&gt;&gt;&gt; L =  [ [1], [2], [3], [4], [5], [6], [7] ]
&gt;&gt;&gt; L_extend = [ sum(L[0:i+1], []) for i in range(len(L)) ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use accumulate from itertools:</p>
<pre><code>list(itertools.accumulate(l_Of_l))                                                                                              
Out: 
[[1],
 [1, 2],
 [1, 2, 3],
 [1, 2, 3, 4],
 [1, 2, 3, 4, 5],
 [1, 2, 3, 4, 5, 6],
 [1, 2, 3, 4, 5, 6, 7]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want a cumulative sum, just with lists. <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a>  can do this.</p>
<pre><code>&gt;&gt;&gt; from itertools import accumulate
&gt;&gt;&gt; lst = [[1], [2], [3], [4], [5], [6], [7]]
&gt;&gt;&gt; list(accumulate(lst))
[[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also create a simple list comprehension:</p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; l_Of_l = [[1], [2], [3], [4], [5], [6], [7]]
&gt;&gt;&gt; [list(map(itemgetter(0), l_Of_l[:i+1])) for i in range(len(l_Of_l))]
[[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]]
</code></pre>
</div>
<span class="comment-copy">Will take it as answer since you didn't use any library :-) Thank you!</span>
<span class="comment-copy">Thanks!  But in the future, do consider the power of the itertools functions as other answers here have shown, especially if you'll use it more than once in the same script.</span>
