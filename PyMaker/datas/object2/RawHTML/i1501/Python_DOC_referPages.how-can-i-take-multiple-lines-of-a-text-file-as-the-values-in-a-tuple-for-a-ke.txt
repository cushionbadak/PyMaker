<div class="post-text" itemprop="text">
<p>I'm trying to read a text file and then create a dictionary using the data in that file. An example of the text would be:</p>
<pre><code>100
Mulan
300, 500
200, 400

200
Ariel
100, 500
500

300
Jasmine
500
500, 100

400
Elsa
100, 500


500
Belle
200, 300
100, 200, 300, 400
</code></pre>
<p>I need to take the first line as the key for my dictionary, and the second, third, and fourth lines as the value for that key. </p>
<p>So far, my code looks like this: </p>
<pre><code>`file = open(file_name,"r")
d = {}
for line in file.readlines():
    line = line.split()
    if not line:
        continue
    d[line[0]] = line[1:]
return d`
</code></pre>
<p>But this returns something weird:</p>
<pre><code>{'100': [], 'Mulan': [], '300,': ['500'], '200,': ['300'], '200': [], 'Ariel': [], '100,': ['200,', '300,', '400'], '500': [], '300': [], 'Jasmine': [], '500,': ['100'], '400': [], 'Elsa': [], 'Belle': []}
</code></pre>
<p>Clearly, the function is taking the first value of each line as a key, which is not what I want. I need the output to look like this:</p>
<pre><code>{100: ('Mulan', [300, 500], [200, 400]), 
200: ('Ariel', [100, 500], [500]), 
300: ('Jasmine', [500], [500, 100]), 
400: ('Elsa', [100, 500], []), 
500: ('Belle', [200, 300], [100, 200, 300, 400])}
</code></pre>
<p>Can anyone help me figure out how to accomplish this, or specifically how to take multiple lines from the text file to use as a value in my dictionary?</p>
</div>
<div class="post-text" itemprop="text">
<p>This should be a shorter and hopefully more intuitive way to do it:</p>
<pre><code>import itertools

file_name = 'sample.txt'
d = {}
expected_lines = 4

with open(file_name, 'r') as f:
    blocks = list("".join(group) for empty, group in itertools.groupby(f, key=str.isspace) if not empty)

for block in blocks:
    lines = [[int(i) for i in i.split(',')] if len(i.split(',')) &gt; 1 
                                            else i for i in block.split('\n')][:expected_lines]
    lines = [[] if i == '' else i for i in lines]
    d[lines[0]] = tuple(lines[1:])

d
{'100': ('Mulan', [300, 500], [200, 400]),
 '200': ('Ariel', [100, 500], '500'),
 '300': ('Jasmine', '500', [500, 100]),
 '400': ('Elsa', [100, 500], []),
 '500': ('Belle', [200, 300], [100, 200, 300, 400])}
</code></pre>
<p>When you open the file here, we are using the <code>with</code> context manager and splitting the file by blocks separated by empty newlines using Python's standard module library's <code>itertools.groupby</code>. Then for every block, use the first item as a key in the dictionary and put every subsequent item in a tuple. It also returns integer pairs as a list and returns an empty list if it does not meet the expected number of lines as per your example.</p>
<hr/>
<p><em>Another interesting scenario to consider is when you have missing lines between your keys and values, where the solution above will not provide the proper output, for example:</em></p>
<pre><code>300
Jasmine
500
500, 100

400

100, 500
</code></pre>
<p>For this scenario, we expect the data to be chunks of 5, including the newline. Then we can utilize a grouper function from the Python recipe <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">here</a>, to grab 5 rows at a time from the file. We can also use a helper function to explicitly return your data from your integer pairs accordingly.</p>
<pre><code>import itertools

file_name = 'sample.txt'
d = {}
expected_lines = 5

def grouper(iterable, n, fillvalue=''):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx"
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)

def check_empty(int_pairs):
    int_pairs = int_pairs.split()
    if len(int_pairs) &gt; 1:
        return int_pairs
    else:
        return []

with open(file_name, 'r') as f:
    blocks = list(grouper(f, expected_lines, fillvalue=''))

for block in blocks:
    lines = [i.replace('\n','') for i in block if i][:expected_lines-1]
    d[int(lines[0])] = (lines[1],check_empty(lines[2]),check_empty(lines[3]))
</code></pre>
<p>This will work for files with missing lines where the row number indicates the data chunk or structure.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>option 1</strong></p>
<p>Looking at your example it seems, that there have to be two lists after the name. If the 2nd one is empty, you want to have an empty list there. So you forced already this structure of "5 lines define a dictionary entry" on your data.. You might as well use it when reading it:</p>
<pre><code>from pprint import pprint

with open('data.txt', 'r') as F:
    lines = [line.replace('\n','') for line in F.readlines()]


n = len(lines)
d = 5                   # number of lines for one entry in the file

if not n%d==0:
    for i in range(d-n%d):
        lines.append('')    

result = {}
for i, line in enumerate(lines):
    if   i%5==0: key  = int(line)
    elif i%5==1: name = line.rstrip()
    elif i%5==2: 
        if line=='': num1 = []
        else: num1 = [int(x) for x in line.replace(' ','').split(',')]
    elif i%5==3:
        if line=='': num2 = []
        else: num2 = [int(x) for x in line.replace(' ','').split(',')]  
    elif i%5==4: result[key] = (name, num1, num2)

pprint(result)
</code></pre>
<p>Which results in exactly what you want.</p>
<pre><code>{100: ('Mulan', [300, 500], [200, 400]),
 200: ('Ariel', [100, 500], [500]),
 300: ('Jasmine', [500], [500, 100]),
 400: ('Elsa', [100, 500], []),
 500: ('Belle', [200, 300], [100, 200, 300, 400])}
</code></pre>
<p>The "if not n%d==0:" part adds empty lines until there is a total which is a multiple of 5. This way the "belle" entry is added even tough there are only 24 lines in your data file. </p>
<p><strong>option 2</strong></p>
<p>If you do not really need that empty list there, you might work from here:</p>
<pre><code>with open('data.txt', 'r') as F:
    lines = F.readlines()


long_line = ''.join([x.replace(' ','') for x in lines])
split     = [x.lstrip().split('\n') for x in long_line.split('\n\n')]


result    = {}
for e in split:
    result[int(e[0])] = (e[1], e[2:])


for key in sorted(result.keys()):
    print(key, result[key])
</code></pre>
<p>output:</p>
<pre><code>100 ('Mulan', ['300,500', '200,400'])
200 ('Ariel', ['100,500', '500'])
300 ('Jasmine', ['500', '500,100'])
400 ('Elsa', ['100,500'])
500 ('Belle', ['200,300'])
</code></pre>
<p>I know this is not quite your output. But as I said: you can work from here if these empty lists are not important.</p>
</div>
<div class="post-text" itemprop="text">
<p>A solution similar to Maik Kahnt's, it also includes the empty list for Elsa and also depends on having 5 lines for each record.</p>
<pre><code>from pprint import pprint

fin = open('f2.txt', 'r')

array = []
dict_ = {}

lines = fin.readlines()

for i, line in enumerate(lines):
    line = line.rstrip()
    if i % 5 == 0:
        key = int(line)
    elif i % 5 == 1:
        name = line
    elif i % 5 == 2:
        if len(line):
            rec = [int(j) for j in line.split(', ')]
        else:
            rec = []
        array.append(rec)
    elif i % 5 == 3:
        if len(line):
            rec = [int(j) for j in line.split(', ')]
        else:
            rec = []
        array.append(rec)
        dict_[key] = (name, *array)
        array = []

pprint(dict_)
</code></pre>
<p>Output was:</p>
<pre><code>{'100': ('Mulan', [300, 500], [200, 400]),
 '200': ('Ariel', [100, 500], [500]),
 '300': ('Jasmine', [500], [500, 100]),
 '400': ('Elsa', [100, 500], []),
 '500': ('Belle', [200, 300], [100, 200, 300, 400])}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>We can define helper functions to do the string and data manipulation, and just populate the dictionary with in a simple loop. The following does just that. Note, you can change <code>newline</code> appropriately for your platform</p>
<pre><code>def normalise(value):
    if value.isalpha():
        return value
    if value.isnumeric():
        return int(value)
    return [int(i) for i in value.replace(",", "").split()]

def normalise_value(lst):
    xs = [[i] if isinstance(i, int) else i for i in lst]
    while len(xs) &lt; 3:
        xs.append([])  # gets the empty list as needed
    return tuple(xs)

def strip_newline(string, newline="\n"):
    return string.replace(newline, "")
</code></pre>
<p>Now the actual data processing code:</p>
<pre><code>with open("filename") as fh:
    lines = fh.readlines()

newline = "\n"  # set as appropriate
data = []
dct = {}        
for d in lines:
    if d is not newline:
        data.append(normalise(strip_newline(d)))
    elif data:
        dct[data[0]] = tuple(normalise_value(data[1:]))
        data = []
if data:
    dct[data[0]] = tuple(normalise_value(data[1:]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is your fellow student at UTM, taking the exact same course and currently working on this <strong>very</strong> assignment. Let me tell you a couple things: </p>
<ol>
<li>Professors and TAs do have a StackOverflow account(s) and they will catch you! </li>
<li>Posting assignment questions and asking for answers is an <strong>academic</strong> offence and you will definitely get called into your instructor's office to explain why they found an assignment question on StackOverflow! If it is available on the internet, either the TAs or the Instructors will surely find it and catch you. </li>
</ol>
<p>Well just so you know: </p>
<ol>
<li>Doing this will in no shape or form help you understand the concepts for the final exam which is soon!</li>
</ol>
<p>To sum up, you can anything in this world, but note that some things you decide to do aren't the right or the most honest thing you can do.</p>
</div>
<span class="comment-copy">Hi Jake! It seems you are relatively new to SO. If any of the answers below have solved your problem, please accept the best answer by clicking the check mark next to the answer to close the question.</span>
<span class="comment-copy">Your output does not match OP's output in both examples. They also ignore positional space in the tuple which I believe would be important to maintain the data structure.</span>
<span class="comment-copy">I know that the 2nd example does not deliver the same output. I did not want to finish the complete code in case the empty list for an empty line is indeed necessary. The output of the first example matches the one given by OP. I will change the code to use pprint to match the printed output.</span>
