<div class="post-text" itemprop="text">
<p>I'm developing a toolbox containing several python scripts. For several of them some arguments may be numeric values. Depending of the script some may require a value v to be between -1 and 1, or 0 and 1 or 1 and 10 or ... An example could be a page width from an output diagram which should be always positive.</p>
<p>I can check all the time if v is in the required range. I could also for each of these range define an Action or a type using argparse. An example is given using a new type:</p>
<pre><code>def positive_num(a_value):
    """Check a numeric positive."""
    if not a_value &gt; 0:
        raise argparse.ArgumentTypeError("Should be positive.")
    return a_value 
</code></pre>
<p>And add it later to the parser:</p>
<pre><code>parser_grp.add_argument('-pw', '--page-width',
                        help='Output pdf file width (e.g. 7 inches).',
                        type=positive_num,
                        default=None,
                        required=False)
</code></pre>
<p>Now, if the value is a correlation coefficient (or anything in a range) would it be possible using action or types to write something more general using:</p>
<pre><code>def ranged_num(a_value, lowest=-1, highest=1):
    """Check a numeric is in expected range."""
    if not (a_value &gt;= lowest and a_value &lt;= highest):
        raise argparse.ArgumentTypeError("Not in range.")
    return a_value 
</code></pre>
<p>That could later be added like:</p>
<pre><code>parser_grp.add_argument('-c', '--correlation',
                        help='A value for the correlation coefficient',
                        type=ranged_num(-1,1),
                        default=None,
                        required=False)
</code></pre>
<p>I have tried in several ways but whithout success.</p>
<p>Thank you</p>
</div>
<div class="post-text" itemprop="text">
<p>Per <a href="https://docs.python.org/3/library/argparse.html#type" rel="nofollow noreferrer">the documentation</a>:</p>
<blockquote>
<p><code>type=</code> can take any callable that takes a single string argument and
  returns the converted value</p>
</blockquote>
<p>Therefore, to use it like <code>type=ranged_num(-1,1)</code>, your <code>ranged_num</code> function must <em>return a function</em> itself. A function that returns a function (or accepts a function as an argument, or both) is often referred to as a "higher-order function".</p>
<p>Here's a minimal example:</p>
<pre><code>def ranged_num(lowest=-1, highest=1):
    """Check a numeric is in expected range."""
    def type_func(a_value):
        a_value = int(a_value)  # or "float"; you could also have error handling here
        if not (a_value &gt;= lowest and a_value &lt;= highest):  # I'd rewrite this to an "or"
            raise argparse.ArgumentTypeError("Not in range.")
        return a_value
    return type_func
</code></pre>
<p>Now <code>ranged_num</code> creates and returns a function, <code>type_func</code>, that is responsible for handling the string coming from the command line.</p>
</div>
<span class="comment-copy">You need a <i>higher-order function</i> to do this, a function <i>that returns a function</i>. <code>type</code> needs to be a function that accepts a single (note: string) argument, so that's what <code>ranged_num(-1, 1)</code> needs to return.</span>
<span class="comment-copy">Yes... That's it. I will dig into that.</span>
<span class="comment-copy">The question is how will I pass the range (-1,1) to this  higher-order function since the normal way is to pass a function definition and not a function call to the type argument of add_argument() method. I recall that I don't want to write a particular function for each range.</span>
<span class="comment-copy">That's the point of a higher-order function; the function that returns the <code>type</code> function can also take parameters. You would write <code>type=ranged_num(-1, 1)</code>, and that function would return an appropriately-configures function that accepts the string argument.</span>
<span class="comment-copy"><code>functools.partial</code> can be used to bind the <code>low</code> and <code>high</code> of <code>ranged_num</code>.</span>
<span class="comment-copy">I was on the way.Did not think about the fact that lowest and highest where visible inside type_func... Thanks a lot for this short lesson. Best</span>
<span class="comment-copy">@user451460 no worries; if you want more information on that, it's referred to as a "closure"</span>
<span class="comment-copy">This is also nicer with a or... Thanks.</span>
