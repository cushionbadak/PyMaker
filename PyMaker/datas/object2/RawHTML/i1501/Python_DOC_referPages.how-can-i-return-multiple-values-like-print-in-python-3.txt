<div class="post-text" itemprop="text">
<p>For example, if I use print it gives me 101 238 157 and None.</p>
<pre><code>i = 0
while i &lt; 3:
  champion = matchList['matches'][i]['champion']
  i = i + 1
  print(champion)
</code></pre>
<p>But if I use RETURN it only returns 101.
So what can I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>return can have only one value, (that can be an object like a list or something else)... why? Just because return is the value that assume the function. In the moment you do an assignment of a function for example</p>
<pre><code>def champs()
     return MJ KD LBJ

champ = champs()
</code></pre>
<p>In this way the number should be MJ, KD and LBJ at the same time... impossible conceptually. But we can return a list!</p>
<hr/>
<p>First of all use a for loop, is more compact an readable, and do the same things:</p>
<pre><code>for i in range(3):
    champion = matchList['matches'][i]['champion']
    print(champion)
</code></pre>
<p>Now use a list of champions:</p>
<pre><code>champions = []
for i in range(3):
    champion = matchList['matches'][i]['champion']
    champions.append(champion)
    print (champion)
</code></pre>
<p>In a more compact way:</p>
<pre><code>champions = []
for i in range(3):
    champions.append(matchList['matches'][i]['champion'])
    print(champions)
</code></pre>
<p>now you can return it in a func:</p>
<pre><code>    def getChamp(matchList):
        champions = []
        for i in range(3):
            champions.append(matchList['matches'][i]['champion'])
        return champions
</code></pre>
<p>Maybe you would like to make the for loop more dynamic:</p>
<pre><code>def getChamp(matchList):
        champions = []
        for match in range(len(matchList['matches'])):
            champions.append(matchList['matches'][match]['champion'])
        return champions
</code></pre>
<p>This is a more pythonic way</p>
<pre><code>def getChamp(matchList):
        for match in matchList['matches']:
            yield match['champion']
        yield None
</code></pre>
<p>I hope this is what you needed to do!</p>
</div>
<div class="post-text" itemprop="text">
<p>There are multiple ways to do but the following is simpler way using range and for loop. The data will be a list of your outputs. You may try yeild also</p>
<pre><code>data=[matchList['matches'][i]['champion'] for i in range(3)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Add all values â€‹to one variable and return it.</p>
<pre><code>def get_my_value():
    values = []
    for i in range(3):
        champion = matchList['matches'][i]['champion']
        values.append(champion)
    return values

data = get_my_value()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can either collect all values and <code>return</code> them at once, or <a href="https://docs.python.org/3/glossary.html#term-generator" rel="nofollow noreferrer"><code>yield</code> each value one after the other</a>:</p>
<pre><code># initial match list
matchList = {'matches': [{'champion': champ} for champ in (101, 238, 157, None)]}

def all_at_once():
    result = []
    for match in matchList['matches']:
        result.append(match['champion'])
    return result

def one_after_another():
    for match in matchList['matches']:
        yield match['champion']
</code></pre>
<p>Both of these provide an iterable - you can use them in <code>for</code> loops, pass them to <code>list</code> or destructure them, for example:</p>
<pre><code>for item in one_after_another():
    print(item)

print(*all_at_once())

first, second, third, *rest = one_after_another()
print(first, second, third)
</code></pre>
<hr/>
<p>Since your transformation maps directly from one form to another, you can express both in <a href="https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries" rel="nofollow noreferrer">comprehension form</a> as well:</p>
<pre><code>all_at_once = [match['champion'] for match in matchList['matches']]
one_after_another = (match['champion'] for match in matchList['matches'])
</code></pre>
<hr/>
<p>While both provide iterables, the two are not equivalent. <code>return</code> means you build the entire list up front, whereas <code>yield</code> lazily computes each value.</p>
<pre><code>def print_all_at_once():
    result = []
    for i in range(3):
        print(i)
        result.append(i)
    return result

def print_one_after_another():
    for i in range(3):
        print(i)
        yield i

# prints 0, 1, 2, 0, 1, 2
for item in print_all_at_once():
    print(item)

# print 0, 0, 1, 1, 2, 2
for item in print_one_after_another():
    print(item)
</code></pre>
<p>When you <code>return</code> a list, you can also <em>reuse</em> its content. In contrast, when you <code>yield</code> each value, it is gone after use:</p>
<pre><code>returned = print_all_at_once()  # already prints as list is built
print('returned', *returned)  # prints all values
print('returned', *returned)  # still prints all values

yielded = print_one_after_another()  # no print as nothing consumed yet
print('yielded', *yielded)  # prints all values and value generation
print('yielded', *yielded)  # prints no values
</code></pre>
</div>
<span class="comment-copy"><code>return</code> will stop the execution of your while loop (assuming that you actual code is valid and that example is actually in a function) and return the current value of champion. You will either need to collect all values of <code>champion</code> that you want in a list or similar <i>before</i> returning the list, or use a generator function and <code>yield</code> the results one at a time.</span>
<span class="comment-copy">Gather all results in a list and return the list after the loop.</span>
<span class="comment-copy">Can you please fix your syntax so that it is valid? Your later loops are invalid as well - you iterate over <code>matches</code> but still try to index with <code>i</code>.</span>
<span class="comment-copy">Now it's operative.</span>
