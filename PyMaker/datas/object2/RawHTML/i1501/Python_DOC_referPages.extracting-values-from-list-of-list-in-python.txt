<div class="post-text" itemprop="text">
<p>I have a list as follows:</p>
<pre><code>mylist = [
    ['OF', 'O'],
    ['ODH', 'O'],
    ['1937066911', 'NUMBER'],
    ['FLOYD', 'PERSON'],
    ['WESLEY', 'PERSON'],
    ['MCGRAW', 'PERSON'],
    ['04', 'NUMBER'],
    ['RUTH', 'PERSON'],
    ['MAE', 'PERSON'],
    ['MCGRAW', 'PERSON']
]
</code></pre>
<p>This is the desired output </p>
<pre><code>desired_output = [
    {'O':'OF', 'ODH'},
    {'NUMBER':'1937066911'},
    {'PERSON':'FLOYD','WESLEY','MCGRAW'},
    {'NUMBER':'04'},
    {'PERSON':'RUTH','MAE','MCGRAW'}
]
</code></pre>
<p>This is what I've tried:</p>
<pre><code>import json
from collections import defaultdict
import itertools
new_dict = defaultdict(list)

with open('A.json') as jsonfile:
    file_data = json.load(jsonfile)
    for d in range(len(file_data)):
       try:
          if file_data[d][1] in file_data[d+1]:
            new_dict[file_data[d][1]].append(file_data[0])
       except:
             pass
    print(new_dict)
</code></pre>
<p>NOTE A.json has the list of list as shown above</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">groupby</a>, assuming you want a list of dicts where the values are list:</p>
<pre><code>from operator import itemgetter
from itertools import groupby

lst = [['OF', 'O'], ['ODH', 'O'], ['1937066911', 'NUMBER'], ['FLOYD', 'PERSON'], ['WESLEY', 'PERSON'],
          ['MCGRAW', 'PERSON'], ['04', 'NUMBER'], ['RUTH', 'PERSON'], ['MAE', 'PERSON'], ['MCGRAW', 'PERSON']]

result = [{ k : list(map(itemgetter(0), group))} for k, group in groupby(lst, key=itemgetter(1))]
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[{'O': ['OF', 'ODH']}, {'NUMBER': ['1937066911']}, {'PERSON': ['FLOYD', 'WESLEY', 'MCGRAW']}, {'NUMBER': ['04']}, {'PERSON': ['RUTH', 'MAE', 'MCGRAW']}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best we can do here is a list of dicts with lists as values.</p>
<pre><code>from itertools import groupby
from operator import itemgetter

mylist = [['OF', 'O'],['ODH', 'O'],['1937066911', 'NUMBER'],['FLOYD', 'PERSON'],['WESLEY', 'PERSON'],['MCGRAW', 'PERSON'],['04', 'NUMBER'],['RUTH', 'PERSON'],['MAE', 'PERSON'],['MCGRAW', 'PERSON']]
first = itemgetter(0)
second = itemgetter(1)
result = []

for key, group in groupby(mylist, key=second):
    result.append({key:[first(g) for g in group]})
</code></pre>
<p>result:</p>
<pre><code>&gt;&gt;&gt; result
[{'O': ['OF', 'ODH']},
 {'NUMBER': ['1937066911']},
 {'PERSON': ['FLOYD', 'WESLEY', 'MCGRAW']},
 {'NUMBER': ['04']},
 {'PERSON': ['RUTH', 'MAE', 'MCGRAW']}]
</code></pre>
</div>
<span class="comment-copy">This output is not possible. What datastructure is <code>{'O':'OF', 'ODH',}</code> supposed to be?</span>
<span class="comment-copy">probably <code>{'O':('OF', 'ODH')}</code></span>
<span class="comment-copy">What i meant is list of dictionaries with one key holding multiple values</span>
<span class="comment-copy">Why having a list of dictionaries with only 1 key per dict when you can have 1 dictionary with multiple keys?</span>
<span class="comment-copy">yes Chris_Rands you are right either like that or like {'O':['OF', 'ODH']}, sorry for my mistake</span>
<span class="comment-copy">Thanx it worked</span>
