<div class="post-text" itemprop="text">
<p>I have a dictionary that has integers as keys and lists as values. A small preview is shown here. </p>
<pre><code>{85992: ['teardrop', 'list2015'], 86107: ['teardrop', 'list2015'], 82364: ['macron', 'paris', 'palace'], 516253: ['liberia', 'vietnam'], 746235: ['democratic', 'national'], 861073: ['macron', 'paris', 'palace']}
</code></pre>
<p>I want to output the keys with the same list values in the same dictionaries so as to draw up a CSV file for each individual set of values, categorising the keys that have similar values. I have a large list so I can't define the dictionary names because I don't know how many shall be there. </p>
<p>I managed to sort the dictionary using pandas to output a sorted list basing on the texts but I have not been able to use pandas to split it up.</p>
<pre><code>import pandas as pd

data_file = pd.DataFrame(key_dict).transpose().reset_index()
data_file.columns = ['name_id' , 'text']
data_file.groupby('text')
data_file.set_index('name_id', inplace = True)
data_file.to_csv('key_dict.csv')
</code></pre>
<p>I thought about an option B of having lists of the keys of which these lists are named after their unique dictionary values(text lists). My preferred option, however, is a split dictionary.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3.6/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> for an O(<em>n</em>) solution, remembering to use <code>tuple</code> keys, as <code>list</code> is not hashable:</p>
<pre><code>from collections import defaultdict

d = {85992: ['teardrop', 'list2015'], 86107: ['teardrop', 'list2015'],
     82364: ['macron', 'paris', 'palace'], 516253: ['liberia', 'vietnam'],
     746235: ['democratic', 'national'], 861073: ['macron', 'paris', 'palace']}

dd = defaultdict(list)

for k, v in d.items():
    dd[tuple(v)].append(k)

print(dd)

defaultdict(list,
            {('democratic', 'national'): [746235],
             ('liberia', 'vietnam'): [516253],
             ('macron', 'paris', 'palace'): [82364, 861073],
             ('teardrop', 'list2015'): [85992, 86107]})
</code></pre>
<blockquote>
<p>draw up a CSV file for each individual set of values</p>
</blockquote>
<p>For this part of your problem, just iterate your <code>defaultdict</code>:</p>
<pre><code>for k, v in dd.items():
    df = pd.DataFrame(v)
    df.to_csv('_'.join(k) + '.csv', index=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>:</p>
<p>Input</p>
<pre><code>from collections import defaultdict
key_dict={85992: ['teardrop', 'list2015'], 86107: ['teardrop', 'list2015'], 82364: ['macron', 'paris', 'palace'], 516253: ['liberia', 'vietnam'], 746235: ['democratic', 'national'], 861073: ['macron', 'paris', 'palace']}
d = {}
d = defaultdict(lambda: [], d)
counts = map(lambda x: d[tuple(key_dict[x])].append(x) , key_dict.keys())
print(d['macron', 'paris', 'palace'])
d
</code></pre>
<p>Output</p>
<pre><code>[861073, 82364]
defaultdict(&lt;function __main__.&lt;lambda&gt;&gt;,
            {('democratic', 'national'): [746235],
             ('liberia', 'vietnam'): [516253],
             ('macron', 'paris', 'palace'): [861073, 82364],
             ('teardrop', 'list2015'): [85992, 86107]})
</code></pre>
</div>
