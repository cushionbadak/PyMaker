<div class="post-text" itemprop="text">
<p>Say I have a BeautifulSoup Object named <code>bs4</code>. To use bs4's <code>find_all_next</code> function on a <code>p</code> tag I would just do:</p>
<pre><code>bs4.p.find_all_next(string = True)
</code></pre>
<p>I want to throw this in a for loop for all tags available in the webpage:</p>
<pre><code>temp_set = set()
for x in bs4.find_all():
    temp_set.add(x.name) # Store only tag name, no dupes, order doesn't matter
</code></pre>
<p>However when it comes time use it in a bs4 object:</p>
<pre><code>for x in temp_set:
    bs4.x.find_all_next(string = True) # x is supposed to represent the tag name; attribute error
</code></pre>
<p>I know that there is no tag 'x' that exists, which is why I get the attribute error, is there anything I can do to make the 'x' in the loop symbolize the tag it's supposed to be representing as if I print it to console?</p>
</div>
<div class="post-text" itemprop="text">
<p>document states <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer">here</a>:</p>
<p>getattr(x, 'foobar') is equivalent to x.foobar</p>
<p>So when I tried it, I just looped through:</p>
<pre><code>getattr(bs4, x).find_all_next(string = True)
</code></pre>
<p>as the document says is equivalent to <code>bs4.x.find_all_next(string = True)</code> with x as the variable</p>
<p>I'm not sure what you want to do with it from there.</p>
<p>Not all the items in your set will work, so I just looped, threw them into a list, and then threw the exceptions into a list too just to see which didn't work. And 'select' will give a <code>AttributeError: 'function' object has no attribute 'find_all_next'</code></p>
<p>so basically, here's what I did in that last section. Again, do what you want, but you'll loop through <code>getattr(bs4, x).find_all_next(string = True)</code></p>
<pre><code>final_list = []
failed_x = []

for x in temp_set:
    try:
        final_list.append(list(getattr(bs4, x).find_all_next(string = True)))
    except:
        failed_x.append(x)
        continue
</code></pre>
</div>
<span class="comment-copy">You can use the <code>try</code> statement to catch exceptions and manage it from there, refer <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">here</a>.</span>
<span class="comment-copy">@BernardL I could do that, and match the tag name to a string that represents the tag and explicitly call <code>bs4.[tag].bs4Function</code> , but that would guarantee an exception for every iteration of the loop. I don't think that's the best course of action, a way to allow a variable in place of the tag name in the bs4 object would be preferable.</span>
<span class="comment-copy">Again, I'm aware and not worried about exceptions, I have a filter for that. However the getattr fixed the problem.</span>
