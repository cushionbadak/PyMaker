<div class="post-text" itemprop="text">
<p>I have a Python list of some complex objects, and a target object which I wish to check of its occurrence in the list <strong>by value</strong>.</p>
<p>In other words, I need to find if any of the objects in the list, has the same attributes with the same values as the target object.</p>
<p>I tried:</p>
<pre><code>if node in nodes:
</code></pre>
<p>But this compares the references of the objects not the values.</p>
<p>I know I can do some nested loops to check every single attribute, but I am looking for a smarter way, if any.</p>
<p>Thanks in advanced.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can define the <code>Node</code> class's <a href="https://docs.python.org/3/reference/datamodel.html#object.__eq__" rel="nofollow noreferrer"><code>__eq__</code></a> method to compare interesting properties with other nodes:</p>
<pre><code>class Node:
    def __init__(self, val1, val2):
        self.val1 = val1
        self.val2 = val2

    def __eq__(self, other):
        return self.val1 == other.val1 and self.val2 == other.val2


nodes = [Node(1, 2), Node(3, 4), Node(5, 6)]
node = Node(1, 2)
print(node in nodes) # True
</code></pre>
<p>If you don't want to write an <code>__eq__</code> method for fear of breaking old behavior, you can perhaps write a custom equality method that only checks certain properties and then use <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a>. For example:</p>
<pre><code>def val1s_equal(n1, n2):
    return n1.val1 == n2.val1

if any(val1s_equal(node, n) for n in nodes):
    print('do something')
</code></pre>
</div>
<span class="comment-copy">What kind of objects are being collected and checked, and what have you tried so far?</span>
<span class="comment-copy">Can you modify the <code>Node</code> class (e.g. add a method)?</span>
<span class="comment-copy">@G.Anderson The objects are instances of a Node class that has multiple attributes, many of them are instances of other classes themselves, some attributes are lists and sets, and few are primitive types.</span>
<span class="comment-copy">@slider Yes, I have access to it</span>
<span class="comment-copy">Is <code>__eq__</code> defined on these classes you're comparing to?</span>
<span class="comment-copy">Note that this will have ramifications if you are using <code>Node</code> instances in some of the other built-in containers (e.g. as <code>dict</code> keys)</span>
<span class="comment-copy">Will this affect the the way I use <code>node in nodes</code> normally before?</span>
<span class="comment-copy">@AhmedHammad can you define "normally". Is that when it was just comparing references? If yes, then in addition to getting <code>True</code> for the same reference, you will also get <code>True</code> if you have another object with the same properties.</span>
<span class="comment-copy">Very good! However, hard coding the value comparisons would take hundreds of lines because of the complexity of the Node. If there is a guarantee that there is no way of comparing the values dynamically somehow, I will definitely go with this.</span>
