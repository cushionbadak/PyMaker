<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/509211/understanding-slice-notation">Understanding slice notation</a>
<span class="question-originals-answer-count">
                    31 answers
                </span>
</li>
</ul>
</div>
<p>I am new to python and one of the things every newbie do come across is the slice operator. I have a list:</p>
<pre><code>li=[1,2,3,4,5,6,7]
</code></pre>
<p>As per my understanding calling <code>li[:-1]</code> is same as calling <code>li[0:-1]</code> and it is but when using it with a negative steps things do not work exactly as I thought they would. So getting to my question why the result of </p>
<pre><code>print(li[:-3:-2]) # is 7
</code></pre>
<p>but the result of</p>
<pre><code>print(li[0:-3:-2]) # is []
</code></pre>
<p>Looking forward to some explanation of how the negative step is being treated in this scenario.</p>
</div>
<div class="post-text" itemprop="text">
<p>The key is that missing (or None) start value is not always automatically set to 0. Please read the note 5 in <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="noreferrer">sequence operations</a> for <code>s[i:j:k]</code> </p>
<blockquote>
<p>If i or j are omitted or None, they become “end” values (which end
  depends on the sign of k)</p>
</blockquote>
<p>To simplify the situation, consider negative step -1 instead of -2. Step -1 is often used to reverse a list.</p>
<pre><code>&gt;&gt;&gt; print(li[None:-3:-1])
[7, 6]
&gt;&gt;&gt; print(li[0:-3:-1])
[]
</code></pre>
<p>The first example shows, what are the real "end values" for the slice.</p>
</div>
<div class="post-text" itemprop="text">
<p>So, your list is <code>li=[1,2,3,4,5,6,7]</code></p>
<p>First, understand what exactly happens in slicing.</p>
<p><strong>Slicing can't be done in backward direction without using step</strong>. </p>
<p>Take an example, we wan't to print <code>[7, 6, 5, 4, 3, 2]</code>, we can't do this using <code>li[-1:0]</code>. because, slicing can't go backward as stated (we can't go backwards from index -1 to 0), and will return empty list <code>[]</code>.(We have to do this using <code>li[-1:0:-1]</code>)</p>
<p>So what happens here is: </p>
<p>you have a list <code>li[x:y]</code>, using a negative step will swap the indexes as <code>li[y:x]</code>.(Once swapping of indexes is done, you should consider it as a positive step) and then print out your output w.r.t. your provided step(only the magnitude).</p>
<p>Now, all that I mentioned above might seem useless, but it would help you understand next part. </p>
<p>So, coming to your question, when you write <code>li[0:-3:-2]</code>, first,indexes are swapped. So, it is same as <code>li[-3:0:2]</code>. and as I have stated above, we can't go backwards (index <code>-3</code> to <code>0</code>) without using a negative step, so it returns the empty list.</p>
<p>but, when you give input as <code>li[:-3:-2]</code>, It swaps the indexes and becomes <code>li[-3::2]</code> and we now easily know what will be the output (<code>[7]</code>).</p>
<p>So, don't consider the blank space in <code>[:-3:-2]</code> as <code>0</code> but as left end.(for better understanding)</p>
<p>Hope this helped.</p>
</div>
<span class="comment-copy">I have no idea what the mechanics of this are - but if you need a workaround, doing <code>li[:-3][::-2]</code> instead of <code>li[:-3:-2]</code> produces the (expected) <code>[4, 2]</code>.</span>
<span class="comment-copy">@GreenCloakGuy I am more interested in finding a proper explanation for this rather than a workaround :)</span>
