<div class="post-text" itemprop="text">
<p>I need to know if the following task is possible via Python.</p>
<p>I have a list of 4,300 addresses, each that covers a range of addresses, like this:</p>
<ol>
<li>8519-21 S Broadway</li>
<li>8700-6 Riverview Blvd</li>
<li>822-4 Angelica St</li>
<li>8442-6 N Broadway</li>
</ol>
<p>I want to isolate the first address and the last in the range. So, using 1 as an example, I would need the output to give me 8519 S Broadway and 8521 S Broadway, each in its own row. </p>
<p>In some instances, like 1 and 3, I only need the first two digits of the first number to complete the second address. I tried in Excel using text to columns (-), then CONCATENATE and LEFT(cell,2) but then I don't get the address correct for instances like 2 and 4, where I need the first three digits of the address. Is there any way to write a python script to solve this?   </p>
</div>
<div class="post-text" itemprop="text">
<p>Try this code:</p>
<pre><code>addresses=["8519-21 S Broadway","8700-6 Riverview Blvd"]
output=[]
for i in addresses:
    output.append(i[0:i.find('-')]+i[i.find(' '):])
    numEnd=i[i.find('-')+1:i.find(' ')]
    numStart=i[0:i.find('-')-len(numEnd)]+numEnd+i[i.find(' '):]
    output.append(numStart)
print(output)
</code></pre>
<p>Where <code>addresses</code> is a list of the address ranges in the format you've given, and <code>output</code> is the data you want.</p>
</div>
<div class="post-text" itemprop="text">
<p>Let's say your input <code>.csv</code> file looks like this:</p>
<pre><code>Address
8519-21 S Broadway
8700-6 Riverview Blvd
822-4 Angelica St
8442-6 N Broadway
</code></pre>
<p>and you want it to look something like this:</p>
<pre><code>First Address,Last Address
8519 S Broadway,8521 S Broadway
8700 Riverview Blvd,8706 Riverview Blvd
822 Angelica St,824 Angelica St
8442 N Broadway,8446 N Broadway
</code></pre>
<p>You can accomplish this by using the <a href="https://docs.python.org/3/library/csv.html#module-csv" rel="nofollow noreferrer"><code>csv</code></a> module:</p>
<pre><code>from csv import writer

# open both input and output csv
with open("addresses.csv") as csv_in, open("output.csv", "w", newline="") as csv_out:
    csv_writer = writer(csv_out)

    # Skip 'Address' header
    next(csv_in)

    # Write new headers
    csv_writer.writerow(["First Address", "Last Address"])

    # Go through each line in csv
    for line in csv_in:

        # Split ranges from rest of line
        ranges, *rest = line.split()

        # Split ranges themselves
        start, end = ranges.split("-")

        # Get difference between length of numbers
        diff = len(start) - len(end)

        # Create new end address
        end = start[:diff] + end

        # Write new lines to output csv
        csv_writer.writerow([" ".join([start, *rest]), " ".join([end, *rest])])
</code></pre>
<p>Which will output your results into <em>output.csv</em>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Thanks for the help and suggestions, all. This is how I ended up tackling it: </p>
<pre><code>import re
import csv
from csv import DictReader

dash_add = []

def get_address_list(file):
    with open(file) as f:
        reader = csv.DictReader(f)
        for row in reader:
            adds = row['Siteaddr']
            if "-" in adds:
                dash_add.append(adds)

z = []

def get_formatted_address(address):
        numeric = address.split(" ")[0]
        text = address.replace(numeric, "").strip()
        start = numeric.split("-")[0]
        end = numeric.split("-")[1]
        end = start[:-len(end)] + end
        return [start + " " + text,  end + " " + text]

get_address_list('./data/map_data_112318.csv')
[z.extend(get_formatted_address(i)) for i in dash_add]

with open('formatted_addresses.csv', 'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['Address'])
    for v in z:
        writer.writerows([[v]])
</code></pre>
</div>
<span class="comment-copy">How is your data stored?</span>
<span class="comment-copy">It's in a .csv right now (all in one column, each address range in its own row) so it could be in a list, a dict, a dataframe; whatever is needed.</span>
