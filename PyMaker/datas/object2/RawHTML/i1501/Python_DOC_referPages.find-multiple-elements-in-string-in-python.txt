<div class="post-text" itemprop="text">
<p>my problem is that I need to find multiple elements in one string.</p>
<p>For example I got one string that looks like this:</p>
<pre><code>line = if ((var.equals("INPUT")) || (var.equals("OUTPUT"))
</code></pre>
<p>and then i got this code to find everything between ' (" ' and ' ") '</p>
<pre><code>char1 = '("'
char2 = '")'


add = line[line.find(char1)+2 : line.find(char2)]
list.append(add)
</code></pre>
<p>The current result is just:</p>
<pre><code>['INPUT']
</code></pre>
<p>but I need the result to look like this:</p>
<pre><code>['INPUT','OUTPUT', ...]
</code></pre>
<p>after it got the first match it stopped searching for other matches, but I need to find everything in that string that matches this search.</p>
<p>I also need to append every single match to the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = """line = if ((var.equals("INPUT")) || (var.equals("OUTPUT"))"""
&gt;&gt;&gt; r = re.compile(r'\("(.*?)"\)')
&gt;&gt;&gt; r.findall(s)
['INPUT', 'OUTPUT']
</code></pre>
<p>The trick is to use <code>.*?</code> which is a non-greedy <code>*</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should look into <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">regular expressions</a> because that's a perfect fit for what you're trying to achieve.</p>
<p>Let's examine a regular expression that does what you want:</p>
<pre><code>import re
regex = re.compile(r'\("([^"]+)"\)')
</code></pre>
<p>It matches the string <code>("</code> then <em>captures</em> anything that isn't a quotation mark and then matches <code>")</code> at the end.</p>
<p>By using it with <a href="https://docs.python.org/3/library/re.html#re.findall" rel="nofollow noreferrer"><code>findall</code></a> you will get all the captured groups:</p>
<pre><code>In [1]: import re

In [2]: regex = re.compile(r'\("([^"]+)"\)')

In [3]: line = 'if ((var.equals("INPUT")) || (var.equals("OUTPUT"))'

In [4]: regex.findall(line)
Out[4]: ['INPUT', 'OUTPUT']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to use regex, this will help you.</p>
<pre><code>line = 'if ((var.equals("INPUT")) || (var.equals("OUTPUT"))'
char1 = '("'
char2 = '")'


add = line[line.find(char1)+2 : line.find(char2)]
list.append(add)
line1=line[line.find(char2)+1:]
add = line1[line1.find(char1)+2 : line1.find(char2)]
list.append(add)
print(list)
</code></pre>
<p>just add those 3 lines in your code, and you're done</p>
</div>
<div class="post-text" itemprop="text">
<p>if I understand you correct, than something like that is help you:</p>
<pre><code>line = 'line = if ((var.equals("INPUT")) || (var.equals("OUTPUT"))'
items = []
start = 0
end = 0
c = 0;
while c &lt; len(line):
    if line[c] == '(' and line[c + 1] == '"':
        start = c + 2
    if line[c] == '"' and line[c + 1] == ')':
        end = c
    if start and end:
        items.append(line[start:end])
        start = end = None
    c += 1

print(items)    # ['INPUT', 'OUTPUT']
</code></pre>
</div>
<span class="comment-copy">@Ev.Kounis my bad</span>
<span class="comment-copy">This is the way to do it. +1</span>
<span class="comment-copy">Thanks, im using this now.</span>
<span class="comment-copy">I got one more thing, how can i get the result of findall into a variable? If i try <code>result = r.findall(s)</code> i get this error <code>TypeError: expected string or bytes-like object</code></span>
<span class="comment-copy">Your code should work. Looks more like an encoding issue. You're Python 2 or Python 3? Check the type of your input. With something like <code>print(my_input.__class__)</code></span>
<span class="comment-copy">I solved it, i was reading lines from a file but forgot to assign a variable to it^^</span>
<span class="comment-copy">NB: Will not work if there's a <code>"</code> in the string that he wants to find. Non-greedy star operator <code>*?</code> is the clean way to go there.</span>
<span class="comment-copy">That was intentional though</span>
<span class="comment-copy">Regular experssions are not generally a good fit for <a href="https://stackoverflow.com/a/546457/4050925">brackets matching</a>. For this particular task it works, but it can break easily (or get messy) if doing something slightly more complicated. Just a heads up to the OP</span>
<span class="comment-copy">how that method will help if will be more than two <code>("...")</code> in line?</span>
