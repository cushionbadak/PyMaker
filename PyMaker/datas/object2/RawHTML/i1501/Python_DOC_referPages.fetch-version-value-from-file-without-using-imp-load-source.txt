<div class="post-text" itemprop="text">
<p>I have previously done the following to fetch a version string:</p>
<pre><code>&gt;&gt;&gt; filepath = './somemodule/__init__.py'
&gt;&gt;&gt; name = 'dummy'
&gt;&gt;&gt; module_source = imp.load_source(name, filepath)
&gt;&gt;&gt; module_source.__version__
1.0.0
</code></pre>
<p>Now, when <code>imp</code> has been deprecated in Python 3 (I'm on 3.7.1), what would be a nice replacement for <code>load_source</code> which will just require the std library?</p>
<p>This seems a little convoluted to me AND <code>load_module</code> is actually deprecated:</p>
<pre><code>&gt;&gt;&gt; from importlib.machinery import SourceFileLoader
&gt;&gt;&gt; loaded = SourceFileLoader(name, filepath).load_module()
&gt;&gt;&gt; loaded.__version__
1.0.0
</code></pre>
<h3>EDIT #1:</h3>
<p>This is discussed in <a href="https://stackoverflow.com/questions/19009932/import-arbitrary-python-source-file-python-3-3">Import arbitrary python source file. (Python 3.3+)</a> and one of the solutions which came up there is:</p>
<pre><code>&gt;&gt;&gt; loader = importlib.machinery.SourceFileLoader(name, filepath)
&gt;&gt;&gt; mod = types.ModuleType(loader.name)
&gt;&gt;&gt; loader.exec_module(mod)
&gt;&gt;&gt; mod.__version__
1.0.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're simply looking to import the version, I usually opt to use <code>utils</code> that are offered from <code>werkzeug</code>; I believe you can use the following:</p>
<pre><code>from werkzeug.utils import import_string
version = import_string('module.__version__', silent=True)
</code></pre>
<p>You can also pass <code>silent</code> as a <code>bool</code>, which will tell the function to ignore import errors and return <code>None</code> if any errors are encountered.</p>
</div>
<div class="post-text" itemprop="text">
<p>The "comfortable" way to import a module is to use <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module" rel="nofollow noreferrer"><code>importlib.import_module()</code></a>.  This is, for all practical purposes, just like using the <code>import</code> statement.  However, it cannot import arbitrary files which are not in <code>sys.path</code>, so it doesn't work for your use case.</p>
<p>To import a file directly, the <code>importlib</code> documentation <a href="https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly" rel="nofollow noreferrer">provides</a> this recipe:</p>
<blockquote>
<pre><code>import importlib.util
import sys

# For illustrative purposes.
import tokenize
file_path = tokenize.__file__
module_name = tokenize.__name__

spec = importlib.util.spec_from_file_location(module_name, file_path)
module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(module)
# Optional; only necessary if you want to be able to import the module
# by name later.
sys.modules[module_name] = module
</code></pre>
</blockquote>
<p>Finally, a bit of advice: I recommend putting the version string in a separate text file called (say) <code>__version__.txt</code>, and loading it from <code>__init__.py</code> and anything else which needs to know the version.  That way, you don't need to execute Python code to read the version number.  You can load data from such files by using <a href="https://docs.python.org/3/library/pkgutil.html#pkgutil.get_data" rel="nofollow noreferrer"><code>pkgutil.get_data(__package__, '__version__.txt')</code></a> in <code>__init__.py</code>, and replace <code>__package__</code> with a suitable value when calling from another module, or open the file directly.  <code>get_data()</code> returns <code>bytes</code>; you may want to call <a href="https://docs.python.org/3/library/stdtypes.html#bytes.decode" rel="nofollow noreferrer"><code>.decode()</code></a> on the return value to convert it into a string.</p>
<p>(<code>pkgutil.get_data()</code> may seem a roundabout way to do it, but it's required if your code is <a href="https://docs.python.org/3/library/zipimport.html" rel="nofollow noreferrer">imported from a ZIP file</a> or installed in some other exotic way.  If your code is in a <a href="https://docs.python.org/3/glossary.html#term-namespace-package" rel="nofollow noreferrer">namespace package</a> or was installed in a particularly unusual fashion, <code>get_data()</code> may fail to work and return <code>None</code>, so you should check for that case and avoid crashing on it.)</p>
</div>
<span class="comment-copy">Ok, cool. I wonder if there's any way to load the code contents of a file by just using the standard library though.</span>
<span class="comment-copy">Since it's in the <code>init</code> can't you just import it?</span>
