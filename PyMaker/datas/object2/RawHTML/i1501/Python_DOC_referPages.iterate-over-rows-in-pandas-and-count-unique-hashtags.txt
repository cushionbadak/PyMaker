<div class="post-text" itemprop="text">
<p>I have a csv file containing thousands of tweets. Lets say the data is as follows:</p>
<pre><code>Tweet_id   hashtags_in_the_tweet

Tweet_1    [trump, clinton]
Tweet_2    [trump, sanders]
Tweet_3    [politics, news]
Tweet_4    [news, trump]
Tweet_5    [flower, day]
Tweet_6    [trump, impeach]
</code></pre>
<p>as you can see, the data contains tweet_id and the hashtags in each tweet. What I want to do is to go to all the rows, and at last give me something like value count:</p>
<pre><code>Hashtag    count
trump      4
news       2
clinton    1
sanders    1
politics   1
flower     1
obama      1
impeach    1
</code></pre>
<p>Considering that the csv file contains 1 million rows (1 million tweets), what is the best way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <code>np.unique</code> </p>
<pre><code>v,c=np.unique(np.concatenate(df.hashtags_in_the_tweet.values),return_counts=True)

#pd.DataFrame({'Hashtag':v,'Count':c})
</code></pre>
<p>Even the problem look different , but still is related <a href="https://stackoverflow.com/a/53218939/7964527">unnesting</a> problem </p>
<pre><code>unnesting(df,['hashtags_in_the_tweet'])['hashtags_in_the_tweet'].value_counts()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One alternative with <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.hstack.html" rel="nofollow noreferrer"><code>np.hstack</code></a> and convert to <a href="https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.Series.html" rel="nofollow noreferrer"><code>pd.Series</code></a> then use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.value_counts.html" rel="nofollow noreferrer"><code>value_counts</code></a>.</p>
<pre><code>import numpy as np

df = pd.Series(np.hstack(df['hashtags_in_the_tweet'])).value_counts().to_frame('count')

df = df.rename_axis('Hashtag').reset_index()

print (df)

    Hashtag  count
0     trump      4
1      news      2
2   sanders      1
3   impeach      1
4   clinton      1
5    flower      1
6  politics      1
7       day      1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3><a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a> + <a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>chain</code></a></h3>
<p>Pandas methods aren't designed for series of lists. No vectorised approach exists. One way is to use <code>collections.Counter</code> from the standard library:</p>
<pre><code>from collections import Counter
from itertools import chain

c = Counter(chain.from_iterable(df['hashtags_in_the_tweet'].values.tolist()))

res = pd.DataFrame(c.most_common())\
        .set_axis(['Hashtag', 'count'], axis=1, inplace=False)

print(res)

    Hashtag  count
0     trump      4
1      news      2
2   clinton      1
3   sanders      1
4  politics      1
5    flower      1
6       day      1
7   impeach      1
</code></pre>
<p><strong>Setup</strong></p>
<pre><code>df = pd.DataFrame({'Tweet_id': [f'Tweet_{i}' for i in range(1, 7)],
                   'hashtags_in_the_tweet': [['trump', 'clinton'], ['trump', 'sanders'], ['politics', 'news'],
                                             ['news', 'trump'], ['flower', 'day'], ['trump', 'impeach']]})

print(df)

  Tweet_id hashtags_in_the_tweet
0  Tweet_1      [trump, clinton]
1  Tweet_2      [trump, sanders]
2  Tweet_3      [politics, news]
3  Tweet_4         [news, trump]
4  Tweet_5         [flower, day]
5  Tweet_6      [trump, impeach]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Sounds like you want something like <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>, which you might use like this...</p>
<pre><code>from collections import Counter
from functools import reduce 
import operator
import pandas as pd 

fold = lambda f, acc, xs: reduce(f, xs, acc)
df = pd.DataFrame({'Tweet_id': ['Tweet_%s'%i for i in range(1, 7)],
                   'hashtags':[['t', 'c'], ['t', 's'], 
                               ['p','n'], ['n', 't'], 
                               ['f', 'd'], ['t', 'i', 'c']]})
fold(operator.add, Counter(), [Counter(x) for x in df.hashtags.values])
</code></pre>
<p>which gives you,</p>
<pre><code>Counter({'c': 2, 'd': 1, 'f': 1, 'i': 1, 'n': 2, 'p': 1, 's': 1, 't': 4})
</code></pre>
<p>Edit:  I think jpp's answer will be quite a bit faster.  If time really is a constraint, I would avoid reading the data into a <code>DataFrame</code> in the first place.  I don't know what the raw <code>csv</code> file looks like, but reading it as a text file by lines, ignoring the first token, and feeding the rest into a <code>Counter</code> may end up being quite a bit faster.  </p>
</div>
<div class="post-text" itemprop="text">
<p>So all the answers above were helpful, but didn't actually work! The problem with my data is: 1)the value of <code>'hashtags'</code> filed for some tweets are <code>nan</code> or <code>[]</code>. 2)The value of <code>'hashtags'</code> field in the dataframe is one string! the answers above assumed that the values of the hashtags are lists of hashtag, e.g. <code>['trump', 'clinton']</code>, while it actually is only an <code>str</code>: <code>'[trump, clinton]'</code>. So I added some lines to @jpp 's answer:</p>
<pre><code>#deleting rows with nan or '[]' values for in column hashtags 
df = df[df.hashtags != '[]']
df.dropna(subset=['hashtags'], inplace=True)

#changing each hashtag from str to list
df.hashtags = df.hashtags.str.strip('[')
df.hashtags = df.hashtags.str.strip(']')
df.hashtags = df.hashtags.str.split(', ')

from collections import Counter
from itertools import chain

c = Counter(chain.from_iterable(df['hashtags'].values.tolist()))

res = pd.DataFrame(c.most_common())\
        .set_axis(['Hashtag', 'count'], axis=1, inplace=False)

print(res)
</code></pre>
</div>
<span class="comment-copy">Some tweets include no hashtags and the field for the hastags_in_the_tweet is "[]" or nan! So I get the error: zero-dimensional arrays cannot be concatenated</span>
<span class="comment-copy">@Arsalan did you see my posted comment ? <code>df=df[df['hashtags_in_the_tweet'].astype(bool)].dropna()</code> using my method after filter</span>
<span class="comment-copy">I applied your comment, it removes all the rows from the data and subsequently using your proposed answer, results in the following error: ValueError: need at least one array to concatenate</span>
<span class="comment-copy">your answer actually counts each letter! The hashtags_in_the_tweet cells are a string, '[trump, clinton]' for example, and your method gives me something like: {'T' : 4, 'C' : 2 , ... }</span>
<span class="comment-copy">Some tweets include no hashtags and the field for the hastags_in_the_tweet is "[]" or nothing! So I get the error: zero-dimensional arrays cannot be concatenated</span>
<span class="comment-copy">@Arsalan using <code>df=df[df['hashtags_in_the_tweet'].astype(bool)]</code> filter you dataframe first</span>
<span class="comment-copy">@Arsalan You can use <code>np.hstack</code> instead.</span>
<span class="comment-copy">your answer actually counts each letter! The hashtags_in_the_tweet cells are a string, '[trump, clinton]' for example, and your method gives me something like: {'T' : 4, 'C' : 2 , ... }</span>
<span class="comment-copy">@Arsalan It works just fine for me. If possible provide some few rows of your data. Upload it somewhere and give me the link.</span>
<span class="comment-copy">your answer actually counts each letter! The hashtags_in_the_tweet cells are a string, '[trump, clinton]' for example, and your method gives me something like: {'T' : 4, 'C' : 2 , ... }</span>
<span class="comment-copy">@Arsalan, No, it doesn't. I didn't make up the output I included in my answer. Looks like you haven't implemented it exactly as in my answer.</span>
<span class="comment-copy">Believe me I'm getting the count of each letter. when I read my csv as a dataframe, if I do :  type(df['hashtags'][10]) , the result is str. and df['hashtags'][10] I get '[Mexico]'</span>
<span class="comment-copy">I need to make a list from the string</span>
<span class="comment-copy">@Arsalan, What string? Copy-paste the setup I've added if you're not convinced.</span>
