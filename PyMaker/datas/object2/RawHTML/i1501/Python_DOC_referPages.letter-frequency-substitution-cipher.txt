<div class="post-text" itemprop="text">
<p>I'm having trouble getting my code to do this substitution cipher properly, my prompt is as follows: decrypt a cipher file assuming letter frequency correspondence between the cipher text and accepted English language frequency; i.e. if the most common letter in the cypher text is 'p' assume it is 'e' in plaintext; if the second most common letter in the cypher text is 'o' assume it is 't' in plaintext; etc.</p>
<pre><code>alpha = [[0,'A'],[0,'B'],[0,'C'],[0,'D'],[0,'E'],[0,'F'],[0,'G'],[0,'H'],\
         [0,'I'],[0,'J'],[0,'K'],[0,'L'],[0,'M'],[0,'N'],[0,'O'],[0,'P'],\
         [0,'Q'],[0,'R'],[0,'S'],[0,'T'],[0,'U'],[0,'V'],[0,'W'],[0,'X'],\
         [0,'Y'],[0,'Z']]

fre = ["e","t","a","o","i","n","s","h",\
       "r","d","l","c","u","m","w","f",\
       "g","y","p","b","v","k","j","x",\
       "q","z"]

file = str(input(":"))
text = file.upper()

for c in text:
    for e in alpha:
        if c == e[0]:
            e[0] += 1

for e in alpha:
    e[0] = text.count(e[1])

alpha.sort()
alpha.reverse()
print(alpha)

text = text.replace(alpha[0][1],"e")
text = text.replace(alpha[1][1],"t")
text = text.replace(alpha[2][1],"a")
text = text.replace(alpha[3][1],"o")
text = text.replace(alpha[4][1],"i")
text = text.replace(alpha[5][1],"n")
text = text.replace(alpha[6][1],"s")
text = text.replace(alpha[7][1],"h")
text = text.replace(alpha[8][1],"r")
text = text.replace(alpha[9][1],"d")
text = text.replace(alpha[10][1],"l")
text = text.replace(alpha[11][1],"c")
text = text.replace(alpha[12][1],"u")
text = text.replace(alpha[13][1],"m")
text = text.replace(alpha[14][1],"w")
text = text.replace(alpha[15][1],"f")
text = text.replace(alpha[16][1],"g")
text = text.replace(alpha[17][1],"y")
text = text.replace(alpha[18][1],"p")
text = text.replace(alpha[19][1],"b")
text = text.replace(alpha[20][1],"v")
text = text.replace(alpha[21][1],"k")
text = text.replace(alpha[22][1],"j")
text = text.replace(alpha[23][1],"x")
text = text.replace(alpha[24][1],"q")
text = text.replace(alpha[25][1],"z")

print(text)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Seems there's a potential for mix-up when you do the <code>replace</code> sequentially: suppose 'p' is the most common character in the cypher, and you replace it with 'e'. Later you're going to replace 'e' for something else, which will again scramble your result.
I would try something like (after you've got <code>alpha</code> sorted as you like):</p>
<pre><code>''.join(map(dict(zip(fre, map(lambda a: a[1], alpha))).get, text))
</code></pre>
<p>Which creates a mapping from the cypher text to English text and applies it to the text directly.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also make the list <code>alpha</code> on the fly:</p>
<pre><code>from string import ascii_letters

alpha = []
fre = ["e","t","a","o","i","n","s","h",
       "r","d","l","c","u","m","w","f",
       "g","y","p","b","v","k","j","x",
       "q","z"]

text = "rsy yrr"    # cipher of "eat tee"

for letter in ascii_letters:
    n = text.count(letter)
    if n:
        alpha.append([n, letter])
</code></pre>
<p>Then sort it in descending order:</p>
<pre><code>alpha.sort(reverse=True)
</code></pre>
<p>Then extract letters and make a dictionary mapping ciphered letters to deciphered:</p>
<pre><code>letters_by_freq = [pair[1] for pair in alpha]
deciph_dict = dict(zip(letters_by_freq, fre))
</code></pre>
<p>Finally replace all letters using a string translation table:</p>
<pre><code>trans_table = str.maketrans(deciph_dict)
print(text.translate(trans_table))
</code></pre>
<p>Output: <code>eat tee</code></p>
</div>
<span class="comment-copy">You forgot to add what the problem is you are encountering. "Having trouble" may be factually correct, but it does not help us helping you. Sample input and expected output may help us too.</span>
<span class="comment-copy">See <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer">str.translate</a> to do all the translations at once.</span>
<span class="comment-copy">He used uppercase to avoid this mix-up, which is fine as long as there is only lowercase text.</span>
<span class="comment-copy">@7t7Studios You're right &gt;&lt; In that case I can't spot anything inherently wrong with the logic...</span>
