<div class="post-text" itemprop="text">
<p>I have a script that processes files using multiprocessing. Here's a snippet:</p>
<pre><code>from multiprocessing import Pool
import os
cores=multiprocessing.cpu_count()

def f_process_file(file):
    rename file  
    convert file
    add metadata

files=[f for f in os.listdir(source_path) if f.endswith('.tif')]
p =  multiprocessing.Pool(processes = cores)
async_result = p.map_async(f_process_file, files)
p.close()
p.join()
</code></pre>
<p>Which runs fine, except that I had to do some other actions before I can call <strong>f_process_file</strong>, which has other arguments. Here's the snippet:</p>
<pre><code>def f_process_file(file, inventory, variety):
    if variety &gt; 1:
        rename file with follow-up number 
        convert file
        add metadata
    else: 
        rename file without follow-up number 
        convert file
        add metadata

# create list 
files=[f for f in os.listdir(source_path) if f.endswith('.tif')]
# create inventory list
inventories = [fn.split('_')[2].split('-')[0].split('.')[0] for fn in files]
# Check number of files per inventory 
counter=collections.Counter(inventories)

for file in files:
    inventory = file.split('_')[2].split('-')[0].split('.')[0]
    matching = [s for s in sorted(counter.items()) if inventory in s]
    for key,variety in matching:  
        f_process_file(file, inventory, variety)
</code></pre>
<p>I can't manage getting this executed using multiprocessing. Do you have any advise? </p>
</div>
<div class="post-text" itemprop="text">
<p>I found <a href="https://stackoverflow.com/questions/14810014/how-do-i-use-key-word-arguments-with-python-multiprocessing-pool-apply-async">this question</a> and managed to work my question out with apply_async. Here's the snippet:</p>
<pre><code>cores=multiprocessing.cpu_count()
pool = multiprocessing.Pool(processes=procs)
for file in files:
  inventory = file.split('_')[2].split('-')[0].split('.')[0]
  matching = [s for s in sorted(counter.items()) if inventory in s]
  for key,variety in matching: 
    pool.apply_async(f_process_file, (source, file, tmp, target, inventory, variety))
pool.close()
pool.join()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem here is that your workload is not ideally suited to <code>multiprocessing.Pool</code>. You are doing a nested iteration and as a result of that, you could have multiple workloads being accessed incrementally. There are two possible methods to solving your problem. The first is to do your single-threaded computation first and then use <code>Pool</code>. To do this, first construct an object, I'll call it <code>ProcessingArgs</code>:</p>
<pre><code>def class ProcessingArgs:

    def __init__(self, file, inventory, variety):
        self.File = file
        self.Inventory = inventory
        self.Variety = variety
</code></pre>
<p>Then you can either modify <code>f_process_file</code> to take in a <code>ProcessArgs</code> or you can add a wrapper method that decomposes the class and then calls <code>f_process_file</code>. Either way, your for-loop now looks like this:</p>
<pre><code>needs_processing = []
for file in files:
    inventory = file.split('_')[2].split('-')[0].split('.')[0]
    matching = [s for s in sorted(counter.items()) if inventory in s]
    needs_processing.extend( [ProcessingArgs(file, inventory, variety) for key, variety in matching] )

p = multiprocessing.Pool(processes = cores)
async_result = p.map_async(f_process_file, needs_processing)
p.close()
p.join()
</code></pre>
<p>The other option is to use the <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio-example-gather" rel="nofollow noreferrer">asyncio</a> library:</p>
<pre><code>import asyncio

await asyncio.gather(f_process_file(p for p in needs_processing))
</code></pre>
<p>In this case you would need to prepend the <code>async</code> modifier to <code>def f_process_file</code> so <code>asyncio</code> knows it's an asynchronous function.</p>
</div>
<span class="comment-copy">Have you tried extracting the contents of your <code>for file in files</code> loop into its own method (let's call it <code>file_processing</code>), and then calling <code>async_result = p.map_async(file_processing, files)</code></span>
<span class="comment-copy">That's a good idea. I'll try that and let you know</span>
<span class="comment-copy">I'm quite fresh at Python, so your answer is a bit complicated. I don't know where to put the <b>def class ProcessingArgs:</b> part.</span>
<span class="comment-copy">@Rene You'd put it at the highest scope level, so it would be at the top of the file or in a separate file.</span>
