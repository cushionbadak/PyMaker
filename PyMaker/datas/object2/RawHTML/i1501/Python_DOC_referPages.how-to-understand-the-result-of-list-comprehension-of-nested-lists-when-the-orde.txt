<div class="post-text" itemprop="text">
<p>I'm trying to extract numbers that are mixed in sentences. I am doing this by splitting the sentence into elements of a list, and then I will iterate through each character of each element to find the numbers. For example:</p>
<pre><code>String = "is2 Thi1s T4est 3a"
LP = String.split() 
for e in LP:
    for i in e:
        if i in ('123456789'):
            result += i
</code></pre>
<p>This can give me the result I want, which is ['2', '1', '4', '3']. Now I want to write this in list comprehension. After reading the <a href="https://stackoverflow.com/questions/18072759/list-comprehension-on-a-nested-list">List comprehension on a nested list?
</a> post I understood that the right code shall be:</p>
<pre><code>[i for e in LP for i in e if i in ('123456789') ]
</code></pre>
<p>My original code for the list comprehension approach was wrong, but I'm trying to wrap my heads around the result I get from it.</p>
<p>My original incorrect code, which reversed the order:</p>
<pre><code>[i for i in e for e in LP if i in ('123456789') ]
</code></pre>
<p>The result I get from that is:</p>
<pre><code>['3', '3', '3', '3']
</code></pre>
<p>Could anyone explain the process that leads to this result please?</p>
</div>
<div class="post-text" itemprop="text">
<p>Just reverse the same process you found in the other post. Nest the loops in the same order:</p>
<pre><code>for i in e:
    for e in LP:
        if i in ('123456789'):
            print(i)
</code></pre>
<p>The code requires both <code>e</code> and <code>LP</code> to be set beforehand, so the outcome you see <em>depends entirely on other code run before your list comprehension</em>.</p>
<p>If we presume that <code>e</code> was set to <code>'3a'</code> (the last element in <code>LP</code> from your code that ran full loopss), then <code>for i in e</code> will run twice, first with <code>i</code> set to <code>'3'</code>. We then get a nested loop, <code>for e in LP</code>, and given your output, <code>LP</code> is 4 elements long. So that iterates 4 times, and each iteration, <code>i == '3'</code> so the <code>if</code> test passes and <code>'3'</code> is added to the output. The next iteration of <code>for i in e:</code> sets <code>i = 'a'</code>, the inner loop runs 4 times again, but not the <code>if</code> test fails.</p>
<p>However, <em>we can't know for certain</em>, because we don't know what code was run last in your environment that set <code>e</code> and <code>LP</code> to begin with.</p>
<p>I'm not sure why your original code uses <code>str.split()</code>, then iterates over all the characters of each word. Whitespace would never pass your <code>if</code> filter anyway, so you could just loop directly over the full <code>String</code> value. The <code>if</code> test can be replaced with a <a href="https://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="nofollow noreferrer"><code>str.isdigit()</code> test</a>:</p>
<pre><code>digits = [char for char in String if char.isdigit()]
</code></pre>
<p>or a even a <a href="https://docs.python.org/3/howto/regex.html" rel="nofollow noreferrer">regular expression</a>:</p>
<pre><code>digits = re.findall(r'\d', String)
</code></pre>
<p>and finally, if this is a reordering puzzle, you'd want to split out your strings into a number (for ordering) and the remainder (for joining); sort the words on the extracted number, and extract the remainder after sorting:</p>
<pre><code># to sort on numbers, extract the digits and turn to an integer
sortkey = lambda w: int(re.search(r'\d+', w).group())
# 'is2' -&gt; 2, 'Th1s1' -&gt; 1, etc.

# sort the words by sort key
reordered = sorted(String.split(), key=sortkey)
# -&gt; ['Thi1s', 'is2', '3a', 'T4est']

# replace digits in the words and join again
rejoined = ' '.join(re.sub(r'\d+', '', w) for w in reordered)
# -&gt; 'This is a Test'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the question you asked in a comment ("how would you proceed to reorder the words using the list that we got as index?"):</p>
<p>We can use custom sorting to accomplish this. (Note that regex is not required, but makes it slightly simpler. Use any method to extract the number out of the string.)</p>
<pre><code>import re

test_string = 'is2 Thi1s T4est 3a'
words = test_string.split()

words.sort(key=lambda s: int(re.search(r'\d+', s).group()))

print(words) # ['Thi1s', 'is2', '3a', 'T4est']
</code></pre>
<p>To remove the numbers:</p>
<pre><code>words = [re.sub(r'\d', '', w) for w in words]
</code></pre>
<p>Final output is:</p>
<pre><code>['This', 'is', 'a', 'Test']
</code></pre>
</div>
<span class="comment-copy">This is not an answer to your list comprehension question, but this problem can be solved much easier with <code>[c for c in String if c.isdigit()]</code>. No need to split the string.</span>
<span class="comment-copy">Wow, it really is much better than my approach. What a serendipity for me. Thanks. An additional question based on this: how would you proceed to reorder the words using the list that we got as index? Thanks.</span>
<span class="comment-copy">@BowenLiu: that's a new question really. See <a href="//stackoverflow.com/q/6618515">Sorting list based on values from another list?</a> for the general approach.</span>
<span class="comment-copy">@BowenLiu: and also see <a href="//stackoverflow.com/q/4836710">Does Python have a built in function for string natural sort?</a>, which is basically the same problem, sort a list of strings according to the embedded numbers.</span>
<span class="comment-copy">Thank you so much for your detailed explanation and answer. Every word of your comment is spot-on. I just got home and tried to recreate the situation and get the <code>NameError: name 'e' is not defined</code>, which is consistent with what you said. Don't know why the output shows as <code>['3', '3', '3', '3']</code> when I did this at work, while the only place where I defined e is in list comprehension. But I will check my code tomorrow. I assigned <code>e</code> a value of <code>3a</code> and then I got the expected <code>['3', '3', '3', '3']</code> result. Now this whole issue is clear to me. Thanks a lot.</span>
<span class="comment-copy">About your comment on my initial approach, I did it because I didn't think of a better approach to extract out the number in each word. Your method is much simpler. I totally forgot about <code>isdigit</code>. Regex is on my learning list but I have yet to find a chance to actually study it. It looks so different from everything else but seems very efficient.</span>
<span class="comment-copy">Thank you so much for your edit Martjin. I haven't learned much about regex so I don't quite understand your code. Could you tell me the difference between <code>r'\d+'</code> and <code>r'\d'</code> please? It seems to me both are looking for numbers. Google isn't very useful when I search symbols. And how would you go with it if you don't use regex? Thanks again</span>
<span class="comment-copy">@BowenLiu: the link in my answer is to the Python regex howto; <code>+</code> extends the <code>\d</code> match. <code>\d</code> matches a single digit, <code>\d+</code> matches a sequence of digits, starting with at least one digit. So in <code>"abc123def"</code> you'd either match <code>"1"</code> or <code>"123"</code>.</span>
<span class="comment-copy">Thanks a lot. Amazing that you know that I will eventually want to get rid of the numbers. I do but I really don't know anything about regex yet. So I will play around to find a way to use key to sort the input string.</span>
<span class="comment-copy">Is there anyway to achieve it without using regex? I tried using list comprehension in the lambda but didn't get it work. Thanks.</span>
<span class="comment-copy">Replace the lambda with <code>lambda s: int(''.join(filter(str.isdigit, s)))</code>. Accomplishes the same thing.</span>
<span class="comment-copy">Amazing. That's right, <code>filter</code>! Totally forgot about this function too. I need to practice more. Thanks a lot.</span>
<span class="comment-copy">Hi Tomothy. I have been studying about sorted key function for the last 2 hours and I think I finally figured out how it works, not sure though. So in <code>lambda s: int(''.join(filter(str.isdigit, s)))</code>, s will be the input for the lambda function and it is each element of the list. So what this lambda function does is to extract out the number in each element and then make the list sort using the numbers of the element as key. Am I getting this right?</span>
