<div class="post-text" itemprop="text">
<p>Using argparse, is there any way to update the "choices" option of an argument  after it was added to the parser ? <a href="https://docs.python.org/3/library/argparse.html#choices" rel="nofollow noreferrer">Argparse documentation</a> doesn't yield much about updating the choices</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()

choices_list = ['A', 'B']
parser.add_argument('arg1', choices=choices_list)

# The list of choices now changes 
choices_list = ['A', 'C', 'D']

# Some code to update 'arg1' choices option ?
parser.???
</code></pre>
<p>I tried using 'parser.add_argument' with the new 'choices_list', but it creates duplicate arguments. </p>
<p>Using Python 3.7</p>
</div>
<div class="post-text" itemprop="text">
<p>The argument itself has a <code>choices</code> attribute, but it's easiest if you save a reference to the argument instead of trying to retrieve it from the parser itself. (Otherwise, you have to scan through the private attribute <code>parser._actions</code> and try to identify which one you need.)</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()

choices_list = ['A', 'B']
arg1 = parser.add_argument('arg1', choices=choices_list)

arg1.choices = ['A', 'B', 'D']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Looking at <a href="https://github.com/python/typeshed/blob/master/stdlib/2and3/argparse.pyi" rel="nofollow noreferrer">https://github.com/python/typeshed/blob/master/stdlib/2and3/argparse.pyi</a></p>
<pre><code># undocumented
class _ActionsContainer:

    def add_argument(self,
                 ...
                 **kwargs: Any) -&gt; Action: ...

    def add_argument_group(self, *args: Any, **kwargs: Any) -&gt; _ArgumentGroup: ...
</code></pre>
<p>I don't use <code>pycharm</code>, but I'm puzzled as to why it would complain about <code>add_argument</code>, but not about <code>add_argument_group</code>.</p>
<p>The argparse docs doesn't mention the returned <code>Action</code> object, but that's because users don't usually need to access it.  But when tested interactively it's pretty obvious:</p>
<pre><code>In [93]: import argparse
In [94]: parser = argparse.ArgumentParser()
In [95]: parser.add_argument('--foo', choices=['one','two'])
Out[95]: _StoreAction(option_strings=['--foo'], dest='foo', nargs=None, const=None, default=None, type=None, choices=['one', 'two'], help=None, metavar=None)
In [96]: _.choices
Out[96]: ['one', 'two']
</code></pre>
<p>Previous SO answers have pointed out that the <code>Actions</code> are also available in 'hidden' <code>_actions</code> list.  But in Python, that '_' is just an informal convention; the interpreter doesn't enforce privacy.</p>
<pre><code>In [98]: parser._actions
Out[98]: 
[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
 _StoreAction(option_strings=['--foo'], dest='foo', nargs=None, const=None, default=None, type=None, choices=['one', 'two'], help=None, metavar=None)]
</code></pre>
<p>What's displayed is the string representation of the <code>Action</code> object.  Those are the most commonly used attributes. </p>
<p>The documentation for <code>argparse</code> is not a formal API reference; it's too incomplete for that.  It's more of a advanced how-to document, more involved than a tutorial, but not as complete as a formal specification.</p>
</div>
<span class="comment-copy">Is there a reason you don't build a completely new parser when this happens? If it's built by a function, you can just feed the things that can change in as arguments.</span>
<span class="comment-copy">Unless you are using the parser multiple times (perhaps calling <code>parse_known_args</code>, and updating <code>choices_list</code> before calling it or <code>parse_args</code> again), it would probably be simpler to just defer adding the argument until you know the final value of <code>choices_list</code>. Argument parsers are typically pretty static, being fully defined before you actually do any sort of I/O.</span>
<span class="comment-copy">@CharlesDuffy There is no reason I can't build a new parser. I only felt it was cleaner to modify an attribute than recreating a completely new object.</span>
<span class="comment-copy">@chepner Maybe I'm not using the right tool for this, but I have an interactive shell (with cmd2) and the choices of some options are dependent of previous actions. I do not know in advance what I'll have to show, but I need to have some kind of default choices when the interactive shell starts</span>
<span class="comment-copy">I confirm it does work, but using pycharm, a weak warning is triggered -&gt; "Function 'add_argument' doesn't return anything". In argparse.pyi, I can see that "add_argument" expects no return value. Any idea why it was documented like that?</span>
<span class="comment-copy">No idea. One could make the argument that you shouldn't rely on <code>add_argument</code> returning anything because it's not documented, but it doesn't seem likely that it would ever change.</span>
<span class="comment-copy">The fact that <code>add_argument</code> returns an <code>Action</code> object isn't in the documentation, but then a lot of details aren't documented.  But it is obvious from the code, and obvious when <code>argparse</code> is tested in an interactive session.  <code>argparse</code> documentation is more of a how-to document than a formal specification.</span>
<span class="comment-copy">for some reason, I've got a different <code>argparse.pyi</code> <a href="https://pastebin.com/VsLFH6DT" rel="nofollow noreferrer">pastebin</a>. Looking at line 79, I understand that PyCharm expects no return value, but I don't understand why this <code>-&gt; None # weirdly documented</code> for <code>add_argument</code> was added in the first place</span>
