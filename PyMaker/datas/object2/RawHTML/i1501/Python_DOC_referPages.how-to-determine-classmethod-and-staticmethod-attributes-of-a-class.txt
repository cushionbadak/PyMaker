<div class="post-text" itemprop="text">
<p>When iterating the attributes of a class, I can see the @classmethod and @staticmethod attributes, but I'm not sure how I can generically identify them based on their type</p>
<pre><code>class DeprecatedClassWithInit(object):
    def __init__(self):
        pass

    def foo(self):
        return "DeprecatedClassWithInit.foo()"

    @classmethod
    def bar(cls):
        return "DeprecatedClassWithInit.bar(cls)"

    @staticmethod
    def bab():
        return "DeprecatedClassWithInit.bab()"
</code></pre>
<p>and the attributes look like:</p>
<pre class="lang-none prettyprint-override"><code>bab = &lt;function bab at 0x7f354f5711b8&gt; (type = &lt;type 'function'&gt;)
bar = &lt;bound method type.bar of &lt;class 'utils.test_decorators.DeprecatedClassWithInit'&gt;&gt; (type = &lt;type 'instancemethod'&gt;)
foo = &lt;unbound method DeprecatedClassWithInit.foo&gt; (type = &lt;type 'instancemethod'&gt;)
</code></pre>
<p>So instances methods have a <code>str() == "&lt;unbound method DeprecatedClassWithInit.foo&gt;"</code>
And classmethod have <code>str() == "&lt;bound method type.bar of &lt;class ...&gt;&gt;"</code><br/>
And staticmethod have <code>str() == &lt;function bab at 1232455&gt;</code></p>
<p>Is this a good way of identifying the attributes?</p>
</div>
<div class="post-text" itemprop="text">
<p>No, you should not rely on the string representations of these attributes. Instead, note that <code>classmethod</code> and <code>staticmethod</code> are <em>types</em>, i.e., they are class objects. For those who want to know, they are implemented as descriptors. Just iterate over the attributes of a class and use <code>isinstance</code>:</p>
<pre><code>class DeprecatedClassWithInit(object):
    def __init__(self):
        pass

    def foo(self):
        return "DeprecatedClassWithInit.foo()"

    @classmethod
    def bar(cls):
        return "DeprecatedClassWithInit.bar(cls)"

    @staticmethod
    def bab():
        return "DeprecatedClassWithInit.bab()"

for name, attr in vars(DeprecatedClassWithInit).items():
    if isinstance(attr, classmethod):
        print(name, "is a classmethod")
    elif isinstance(attr, staticmethod):
        print(name, "is a staticmethod")
</code></pre>
</div>
<span class="comment-copy">The type (as shown in the question) for class methods is instancemethod, not classmethod. I suspect class and static methods involve some compiler magic</span>
<span class="comment-copy">@RichardHaven Have you tried this? It works. That is the type you get when you invoke the descriptor protocol because you've accessed it using the attribute access operator (i.e. using dot-notation). Using <code>vars</code> introspects the attributes directly, avoiding the descriptor protocol, giving you access to the raw descriptor. Again, have you <i>actually tried this?</i></span>
<span class="comment-copy">@RichardHaven and there is no compiler magic for <code>staticmethod</code> and <code>classmethod</code>. As I stated, they are classes that implement <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">the descriptor protocol</a>. In that link, you'll see an example of how they could be implemented in pure Python (of course, they happen to be implemented in C, but that isn't relevant here)</span>
<span class="comment-copy">I did try it. I will try it outside my production code to see if it works better there</span>
<span class="comment-copy">@RichardHaven how exactly are you producing your output?</span>
