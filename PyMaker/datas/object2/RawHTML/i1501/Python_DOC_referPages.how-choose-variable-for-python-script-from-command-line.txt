<div class="post-text" itemprop="text">
<p>I need to run python test script for different environments (different urls). And I need to define which variable use from command line. In future this parameter will be used in Jenkins job.</p>
<p>script.py:</p>
<pre><code>class TestLogin(unittest.TestCase):

    @allure.step
    def test_LoginValidation(self):

        devURL = "http://url1/admin/login/"
        stagingURL = "http://url2/admin/login/"
        prodURL = "https://url3/admin/login"

        driver.maximize_window()
        driver.implicitly_wait(10)
        driver.get(url)

        lp = LoginPage(driver)
        lp.login("login", "password")


        time.sleep(2)
        driver.quit()
</code></pre>
<p>In command line I need to write</p>
<pre><code>python script.py stagingURL
</code></pre>
<p>In a result in method <em>test_LoginValidation</em>  in  <em>driver.get(url)</em> will be used url which I defined in command line.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>argparse</code> to do this:</p>
<pre><code>import argparse

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Description')

    parser.add_argument('--dev',
                        dest='dev',
                        action='store_true',
                        help="Help message")

    parser.add_argument('--stage',
                        dest='stage',
                        action='store_true',
                        help="Help message")

    parser.add_argument('--prod',
                        dest='prod',
                        action='store_true',
                        help="Help message")

    parser.set_defaults(dev=True,
                        stage=False,
                        action=False)

    args = parser.parse_args()

    url = None
    if args.dev:
        url = "http://url1/admin/login/"
    if args.stage:
        url = "http://url2/admin/login/"
    if args.prod:
        url = "https://url3/admin/login"

    # do something with the url
</code></pre>
<p>This is one way to do it. You are creating some arg parameters <code>--dev</code>, <code>--stage</code>, <code>--prod</code> and by default <code>--dev</code> is set to true. You can also have no default (just set <code>dev=False</code>).</p>
<p>So next time you can run:</p>
<pre><code>python program.py --dev
python program.py --stage
python program.py --prod
</code></pre>
<p>You might want to handle the case where more than one flag is passed.</p>
<p>You can also do it this way:</p>
<pre><code>import argparse

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Description')

    parser.add_argument("--env", 
                        choices={"dev", "stage", "prod"}, 
                        help="Some help message.")

    args = parser.parse_args()

    url = None
    if args.env == "dev":
        url = "http://url1/admin/login/"
    elif args.env == "stage":
        url = "http://url2/admin/login/"
    elif args.env == "prod":
        url = "https://url3/admin/login"
    else:
        print("Please specify the environment using --env flag.")

    if url is not None:
        print(url)
</code></pre>
<p>Example:</p>
<pre><code>$ python3 test2.py
Please specify the environment using --env flag.

$ python3 test2.py --env prod
https://url3/admin/login

$ python3 test2.py --env stage
http://url2/admin/login/

$ python3 test2.py --env dev
http://url1/admin/login/

$ python3 test2.py --env wrong
usage: test2.py [-h] [--env {stage,dev,prod}]
test2.py: error: argument --env: invalid choice: 'wrong' (choose from 'stage', 'dev', 'prod')
</code></pre>
<p>You can read more about <code>argparse</code> <a href="https://docs.python.org/3/howto/argparse.html" rel="nofollow noreferrer">here</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I can recommend <a href="https://click.palletsprojects.com/en/7.x/" rel="nofollow noreferrer"><code>click</code></a> package for creating CLI. It's really simple, well documented, has a lot of options and in my opinion much easier to use than argparse.</p>
<p>A dummy example:</p>
<pre><code>import click

@click.command()
@click.option(
    '--count',
    default=1,
    help='Number of greetings.'
)
@click.option(
    '--name',
    prompt='Your name',
    help='The person to greet.'
)
def hello(**options):
    """Simple program that greets NAME for a total of COUNT times."""
    for x in range(options['count']):
        click.echo('Hello %s!' % options['name'])

if __name__ == '__main__':
    hello()
</code></pre>
<p>And what it looks like when run:</p>
<pre><code>$ python hello.py --count=3
Your name: John
Hello John!
Hello John!
Hello John!
</code></pre>
<p>It automatically generates nicely formatted help pages:</p>
<pre><code>$ python hello.py --help
Usage: hello.py [OPTIONS]

  Simple program that greets NAME for a total of COUNT times.

Options:
  --count INTEGER  Number of greetings.
  --name TEXT      The person to greet.
  --help           Show this message and exit.
</code></pre>
<p>You can get the library directly from PyPI:</p>
<p><code>pip install click</code></p>
<p>If you want to create CLI just to parametrize unit test you may consider using <a href="https://docs.pytest.org/en/latest/parametrize.html" rel="nofollow noreferrer"><code>@pytest.mark.parametrize</code></a> which allows one to define multiple sets of arguments and fixtures at the test function or class.</p>
<p>An example:</p>
<pre><code>import pytest

class TestLogin(object):

    @pytest.mark.parametrize("url", [
        "http://url1/admin/login/",
        "http://url2/admin/login/",
        "https://url3/admin/login",
    ])
    def test_LoginValidation(self, url):
        driver.maximize_window()
        driver.implicitly_wait(10)
        driver.get(url)

        lp = LoginPage(driver)
        lp.login("login", "password")


        time.sleep(2)
        driver.quit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>What you're looking for is <a href="https://docs.python.org/3/howto/argparse.html" rel="nofollow noreferrer">argparse</a>. That should allow you to do exactly what you're looking for, for example:</p>
<pre><code>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('url', help = 'The URL to use for ...', type = str)
</code></pre>
<p>This sets up the url as a required argument to be passed to the function, and sets its type to str (this is the default behavior, but being explicit is good).</p>
<p>You can then extract the arguments using:</p>
<pre><code>args = parser.parse_args()
specified_url = args.url
</code></pre>
<p>From here you can proceed as you normally would. If you wish to make the argument optional but with a default value, that is also possible using argparse.</p>
<p>Using the environment variables works but is much harder to debug, especially if you expect this script to be run by another piece of software argparse is much more reliable.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's almost certainly easier to do this in Jenkins than it is to do it in Python. Additionally it seems to make sense that your devops pipeline controls the location of dev, staging, and release URIs (at least as much as it is sensible to do that).</p>
<pre><code>def targetUrl = ''
switch (env.TARGET) {
    case 'dev':
        targetUrl = "http://url1/admin/login/"
        break
    // etc
}

sh "python script.py ${targetUrl}"
</code></pre>
<p>then have the python script look at <code>sys.argv[1]</code> (which is the first argument passed to it) and use that URL directly.</p>
</div>
<span class="comment-copy">If you want to create CLI just to parametrize unit test you may consider using <code>@pytest.mark.parametrize</code> which allows one to define multiple sets of arguments and fixtures at the test function or class. You can look at my answer for more details. Also, I've added a dummy example of how to implement cli with python click.</span>
<span class="comment-copy">Might be worth including a snippet of <a href="https://click.palletsprojects.com/en/7.x/options/#feature-switches" rel="nofollow noreferrer">feature switches</a> in <code>click</code>, which is exactly what should be used here.</span>
<span class="comment-copy">@AdamSmith Thanks for the reply! I did not want the post to be too long hence I didn't add any more snippets (It's already nicely documented). Instead, I've provided an alternative solution which also should solve OP use case.</span>
<span class="comment-copy">This answer would be helped by an example.</span>
