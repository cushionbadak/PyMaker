<div class="post-text" itemprop="text">
<p>i found this pygame program online, here is the code:</p>
<pre><code>import sys, pygame, random

class Breakout():

    def main(self):

        xspeed_init = 6
        yspeed_init = 6
        max_lives = 5
        bat_speed = 30
        score = 0 
        bgcolour = 0x2F, 0x4F, 0x4F  # darkslategrey        
        size = width, height = 640, 480

        pygame.init()            
        screen = pygame.display.set_mode(size)
        #screen = pygame.display.set_mode(size, pygame.FULLSCREEN)

        bat = pygame.image.load("bat.png").convert()
        batrect = bat.get_rect()

        ball = pygame.image.load("ball.png").convert()
        ball.set_colorkey((255, 255, 255))
        ballrect = ball.get_rect()

        pong = pygame.mixer.Sound('Blip_1-Surround-147.wav')
        pong.set_volume(10)        

        wall = Wall()
        wall.build_wall(width)

        # Initialise ready for game loop
        batrect = batrect.move((width / 2) - (batrect.right / 2), height - 20)
        ballrect = ballrect.move(width / 2, height / 2)       
        xspeed = xspeed_init
        yspeed = yspeed_init
        lives = max_lives
        clock = pygame.time.Clock()
        pygame.key.set_repeat(1,30)       
        pygame.mouse.set_visible(0)       # turn off mouse pointer

        while 1:

            # 60 frames per second
            clock.tick(60)

            # process key presses
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        sys.exit()
                    if event.key == pygame.K_LEFT:                        
                        batrect = batrect.move(-bat_speed, 0)     
                        if (batrect.left &lt; 0):                           
                            batrect.left = 0      
                    if event.key == pygame.K_RIGHT:                    
                        batrect = batrect.move(bat_speed, 0)
                        if (batrect.right &gt; width):                            
                            batrect.right = width

            # check if bat has hit ball    
            if ballrect.bottom &gt;= batrect.top and \
               ballrect.bottom &lt;= batrect.bottom and \
               ballrect.right &gt;= batrect.left and \
               ballrect.left &lt;= batrect.right:
                yspeed = -yspeed                
                pong.play(0)                
                offset = ballrect.center[0] - batrect.center[0]                          
                # offset &gt; 0 means ball has hit RHS of bat                   
                # vary angle of ball depending on where ball hits bat                      
                if offset &gt; 0:
                    if offset &gt; 30:  
                        xspeed = 7
                    elif offset &gt; 23:                 
                        xspeed = 6
                    elif offset &gt; 17:
                        xspeed = 5 
                else:  
                    if offset &lt; -30:                             
                        xspeed = -7
                    elif offset &lt; -23:
                        xspeed = -6
                    elif xspeed &lt; -17:
                        xspeed = -5     

            # move bat/ball
            ballrect = ballrect.move(xspeed, yspeed)
            if ballrect.left &lt; 0 or ballrect.right &gt; width:
                xspeed = -xspeed                
                pong.play(0)            
            if ballrect.top &lt; 0:
                yspeed = -yspeed                
                pong.play(0)               

            # check if ball has gone past bat - lose a life
            if ballrect.top &gt; height:
                lives -= 1
                # start a new ball
                xspeed = xspeed_init
                rand = random.random()                
                if random.random() &gt; 0.5:
                    xspeed = -xspeed 
                yspeed = yspeed_init            
                ballrect.center = width * random.random(), height / 3                                
                if lives == 0:                    
                    msg = pygame.font.Font(None,70).render("Game Over", True, (0,255,255), bgcolour)
                    msgrect = msg.get_rect()
                    msgrect = msgrect.move(width / 2 - (msgrect.center[0]), height / 3)
                    screen.blit(msg, msgrect)
                    pygame.display.flip()
                    # process key presses
                    #     - ESC to quit
                    #     - any other key to restart game
                    while 1:
                        restart = False
                        for event in pygame.event.get():
                            if event.type == pygame.QUIT:
                                sys.exit()
                            if event.type == pygame.KEYDOWN:
                                if event.key == pygame.K_ESCAPE:
                                    sys.exit()
                                if not (event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT):                                    
                                    restart = True      
                        if restart:                   
                            screen.fill(bgcolour)
                            wall.build_wall(width)
                            lives = max_lives
                            score = 0
                            break

            if xspeed &lt; 0 and ballrect.left &lt; 0:
                xspeed = -xspeed                                
                pong.play(0)

            if xspeed &gt; 0 and ballrect.right &gt; width:
                xspeed = -xspeed                               
                pong.play(0)

            # check if ball has hit wall
            # if yes yhen delete brick and change ball direction
            index = ballrect.collidelist(wall.brickrect)       
            if index != -1: 
                if ballrect.center[0] &gt; wall.brickrect[index].right or \
                   ballrect.center[0] &lt; wall.brickrect[index].left:
                    xspeed = -xspeed
                else:
                    yspeed = -yspeed                
                pong.play(0)              
                wall.brickrect[index:index + 1] = []
                score += 10

            screen.fill(bgcolour)
            scoretext = pygame.font.Font(None,40).render(str(score), True, (0,255,255), bgcolour)
            scoretextrect = scoretext.get_rect()
            scoretextrect = scoretextrect.move(width - scoretextrect.right, 0)
            screen.blit(scoretext, scoretextrect)

            for i in range(0, len(wall.brickrect)):
                screen.blit(wall.brick, wall.brickrect[i])    

            # if wall completely gone then rebuild it
            if wall.brickrect == []:              
                wall.build_wall(width)                
                xspeed = xspeed_init
                yspeed = yspeed_init                
                ballrect.center = width / 2, height / 3

            screen.blit(ball, ballrect)
            screen.blit(bat, batrect)
            pygame.display.flip()

    class Wall():

        def __init__(self):
            self.brick = pygame.image.load("brick.png").convert()
            brickrect = self.brick.get_rect()
            self.bricklength = brickrect.right - brickrect.left       
            self.brickheight = brickrect.bottom - brickrect.top             

        def build_wall(self, width):        
            xpos = 0
            ypos = 60
            adj = 0
            self.brickrect = []
            for i in range (0, 52):           
                if xpos &gt; width:
                    if adj == 0:
                        adj = self.bricklength / 2
                    else:
                        adj = 0
                    xpos = -adj
                    ypos += self.brickheight

                self.brickrect.append(self.brick.get_rect())    
                self.brickrect[i] = self.brickrect[i].move(xpos, ypos)
                xpos = xpos + self.bricklength

    if __name__ == '__main__':
        br = Breakout()
        br.main()
</code></pre>
<p>The code works fine but how do i add a stopwatch code into this code? I have a stopwatch code which looks like this:</p>
<pre><code>import pygame
import pygame.freetype

def main():
    pygame.init()
    screen=pygame.display.set_mode((400, 300))
    clock=pygame.time.Clock()
    font=pygame.freetype.SysFont(None, 34)
    font.origin=True
    while True:
        for e in pygame.event.get():
            if e.type == pygame.QUIT: return
        screen.fill(pygame.Color('grey12'))
        ticks=pygame.time.get_ticks()
        millis=ticks%1000
        seconds=int(ticks/1000 % 60)
        minutes=int(ticks/60000 % 24)
        out='{minutes:02d}:{seconds:02d}:{millis}'.format(minutes=minutes,        millis=millis, seconds=seconds)
        font.render_to(screen, (100, 100), out, pygame.Color('dodgerblue'))
        pygame.display.flip()
        clock.tick(60)

if __name__ == '__main__': main()
</code></pre>
<p>Where should i add this code into the main game so the player can know how long had he/she played the game. I am still new to this python program. Still learning.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can just insert the timer into the <code>main</code> method of the <code>Breakout</code> class.</p>
<pre><code>import pygame.freetype


font = pygame.freetype.SysFont(None, 34)

class Breakout():

    def main(self):
        # Other code omitted ...
        while 1:
            clock.tick(60)
            for event in pygame.event.get():
                # ...

            ticks = pygame.time.get_ticks()
            millis = ticks%1000
            seconds = int(ticks/1000 % 60)
            minutes = int(ticks/60000 % 24)
            out = f'{minutes:02d}:{seconds:02d}:{millis}'

            # In the drawing section before pygame.display.flip gets called.
            font.render_to(screen, (10, 30), out, pygame.Color('dodgerblue'))
            pygame.display.flip()
</code></pre>
<p>If you want to reset the timer after the game is over, check out one of these timers: <a href="https://stackoverflow.com/questions/30720665/countdown-timer-in-pygame">Countdown timer in Pygame</a></p>
</div>
<span class="comment-copy">When do you want the stopwatch code to run?</span>
<span class="comment-copy">When the game starts it will display the score and time</span>
<span class="comment-copy">You want it to run inside br.main() ?</span>
<span class="comment-copy">When the game start the timer will run and display on the game</span>
<span class="comment-copy">Are you familar with <a href="https://docs.python.org/3/reference/simple_stmts.html#import" rel="nofollow noreferrer">import</a>? or read <a href="https://stackoverflow.com/questions/2349991/how-to-import-other-python-files">how-to-import-other-python-files</a></span>
<span class="comment-copy">it says font is not defined</span>
<span class="comment-copy">You have to define the font object.</span>
<span class="comment-copy">i defined like this: font=pygame.freetype.SysFont(None, 34) at the main and it shows up error</span>
<span class="comment-copy">Define it in the global scope or above the <code>while</code> loop in the <code>main</code> function. And please post the traceback if it still doesn't work.</span>
<span class="comment-copy">okay it's working now, thank you. I will learn more python code</span>
