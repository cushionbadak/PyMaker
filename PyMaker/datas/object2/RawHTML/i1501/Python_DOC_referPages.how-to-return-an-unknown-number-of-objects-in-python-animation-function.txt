<div class="post-text" itemprop="text">
<p>I am currently trying to animate a series of images where for each image an initially unknown number of ellipses are drawn. I have tried many things so far, but haven't found a solution yet, though I guess I came close. Here is my code:</p>
<pre><code>import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse

def plot_images(img1, img2, objects, ax):

    im1 = ax.imshow(img1)
    im2 = ax.imshow(img2 with transparency as an overlay)

    # plotting an ellipse for each object
    e = [None]*len(objects)
    for j in range(len(objects)):
        e[j] = Ellipse(xy=(objects['x'][j], objects['y'][j]),
                            width=6 * objects['a'][j],
                            height=6 * objects['b'][j],
                            angle=objects['theta'][j] * 180. / np.pi)
        e[j].set_facecolor('none')
        e[j].set_edgecolor('red')
        ax.add_artist(e[j])

    return im1, im2, e


def animate(j):

    # extracting objects
    im1, im2, objects = object_finder_function()

    imm1, imm2, e = plot_images(im1, im2, objects, axs)


    return imm1, imm2, e

fig, axs = plt.subplots()
ani = animation.FuncAnimation(fig, animate, frames=image_number, interval=50, blit=True)
plt.show()
</code></pre>
<p>Now when I try this code, I get the following error message:</p>
<pre><code>AttributeError: 'list' object has no attribute 'get_zorder'
</code></pre>
<p>So I tried different things, but ultimately, I found that when, as a test, I put in the plot_images function</p>
<pre><code>return im1, im2, e[0], e[1], e[2]
</code></pre>
<p>and also change the animate function accordingly, i.e.</p>
<pre><code>imm1, imm2, e0, e1, e2 = plot_images(im1, im2, objects, axs)
</code></pre>
<p>and </p>
<pre><code>return imm1, imm2, e0, e1, e2
</code></pre>
<p>I don't get an error message and the ellipses are actually plotted in the respective frames as I intended. Now the problem is, that for one, there are many hundred ellipses per image that I would like to plot, so I would have to manually write that all down (i.e. e[0], e[1], e[2] -- e[k], and the same for the animate function) and this doesn't seem to be the right way. The other thing is that as I already said the number of ellipses changes for each image and is not previously known so I cannot possibly adjust the functions accordingly. </p>
<p>How can I return this list of ellipses so that the animation reads it as if I would have written them all down separately as it is done in the working example?</p>
</div>
<div class="post-text" itemprop="text">
<p>Your code is a bit unpythonic, so I cleaned up it just a bit for clarity. Your <code>AttributeError</code> has to do with the <code>get_zorder</code> function, which is used in matplotlib for figuring out how to layer plots. With the things you tried I can tell you just need to unpack your list_of_ellipses at the end.</p>
<pre><code>def plot_images(img1, img2, objects, ax):

    im1 = ax.imshow(img1)
    im2 = ax.imshow(img2 with transparency as an overlay)

    list_of_ellipses = []
    for j in range(len(objects)):
        my_ellipse = Ellipse(xy=(objects['x'][j], objects['y'][j]),
                        width=6 * objects['a'][j],
                        height=6 * objects['b'][j],
                        angle=objects['theta'][j] * 180. / np.pi)

        my_ellipse.set_facecolor('none')
        my_ellipse.set_edgecolor('red')
        ax.add_artist(e[j])
        list_of_ellipses.append(my_ellipse)
    return im1, im2, list_of_ellipses


def animate():
    im1, im2, objects = object_finder_function()
    imm1, imm2, list_of_ellipses = plot_images(im1, im2, objects, axs)
    return (imm1, imm2)+tuple(list_of_ellipses)

fig, axs = plt.subplots()
ani = animation.FuncAnimation(fig, animate, frames=image_number, interval=50, blit=True)
plt.show()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like you want to flatten <code>e</code>.</p>
<p>You can either create a list with the already flat variables and extend it with e:</p>
<pre><code>    return tuple([im1, im2] + e)
</code></pre>
<p>Or <a href="https://docs.python.org/2/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">unpack</a> <code>e</code> everywhere you want to use it.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that you are using <a href="https://matplotlib.org/api/_as_gen/matplotlib.animation.FuncAnimation.html" rel="nofollow noreferrer">matplotlib.animation</a>, <code>animate</code> should be returning an <code>iterable</code> and you are returning one that contains three objects.  <code>return imm1, imm2, e</code> is returning a <a href="https://docs.python.org/3/library/stdtypes.html#tuple" rel="nofollow noreferrer">tuple</a> of three instances.  The final one is a list.  You should be able to return a <code>list</code> instead of a <code>tuple</code> by changing the <code>animate</code> function to:</p>
<pre><code>def animate(j):
    im1, im2, objects = object_finder_function()
    imm1, imm2, e = plot_images(im1, im2, objects, axs)

    return [imm1, imm2] + e
</code></pre>
<p>However, I would change <code>plot_images</code> to return a <code>list</code> instead.  Maybe something like the following:</p>
<pre><code>def create_ellipse(objects, object_idx, artists):
    ellipse = Ellipse(
        xy=(objects['x'][object_idx], objects['y'][object_idx]),
        width=(6 * objects['a'][object_idx]),
        height=(6 * objects['b'][object_idx]),
        angle=(objects['theta'][object_idx] * 180.0 / np.pi))
    ellipse.set_facecolor('none')
    ellipse.set_edgecolor('red')
    artists.add_artists(ellipse)
    return ellipse

def plot_images(img1, img2, objects, ax):
    renderables = [ax.imshow(img1),
                   ax.imshow(img2 with transparency as an overlay)]
    renderables.extend(create_ellipse(objects, idx, ax)
                       for idx in range(len(objects)))
    return renderables
</code></pre>
</div>
<span class="comment-copy">Thank you all guys! You were really quick. Amazing. Apparently I made a pretty obvious mistake (sorry, I am new to this) and you all pinned it down. I made changes according to your suggestions and it now works as intended (though I still have to learn about what I actually did there). I am not sure how I can reply to all of you so that you will notice so I am just going to comment this to all solutions.</span>
<span class="comment-copy">Hey @mapf if this answer solved your problem, please accept it by clicking the green checkmark. It helps others find the right answer and gives reputation to the person who helped you. Thanks!</span>
<span class="comment-copy">Thank you all guys! You were really quick. Amazing. Apparently I made a pretty obvious mistake (sorry, I am new to this) and you all pinned it down. I made changes according to your suggestions and it now works as intended (though I still have to learn about what I actually did there). I am not sure how I can reply to all of you so that you will notice so I am just going to comment this to all solutions.</span>
<span class="comment-copy">Thank you all guys! You were really quick. Amazing. Apparently I made a pretty obvious mistake (sorry, I am new to this) and you all pinned it down. I made changes according to your suggestions and it now works as intended (though I still have to learn about what I actually did there). I am not sure how I can reply to all of you so that you will notice so I am just going to comment this to all solutions.</span>
