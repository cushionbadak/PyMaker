<div class="post-text" itemprop="text">
<p>I donâ€™t understand how to do assignment checking to a variable, as it is done in Kivy.
I know how this is done for class properties, and it looks like this</p>
<pre><code>#!/usr/bin/python3.6    
class Foo:
   var = property()
   def __init__(self):
      self._var = 0
   @var.setter
   def var(self, value):
      self._var = value
      # code setter
      pass

   @var.getter
   def var(self):
      # code getter
      print('Getter method')
      return self._var

a = Foo()
a.var = 5
print(a.var)
# Getter method
# 5    
</code></pre>
<p>In Kivy can do:</p>
<pre><code>class LabelBase(Label):
msg = StringProperty('t')

   def __init__(self, **kwargs):
       super(LabelBase, self).__init__(**kwargs)
       self.msg = 5
</code></pre>
<p>I take</p>
<pre><code>     Traceback (most recent call last):
   File "/home/Python/Prj/View/Main.py", line 83, in &lt;module&gt;
     Start().build()
   File "/home/Python/Prj/View/Main.py", line 73, in build
     GUI().run()
   File "/usr/lib/python3/dist-packages/kivy/app.py", line 800, in run
     root = self.build()
   File "/home/Python/Prj/View/Main.py", line 65, in build
     main_window = MainFrame()
   File "/home/Python/Prj/View/Main.py", line 52, in __init__
     self.label = LabelBase(text='test')
   File "/home/Python/Prj/View/Main.py", line 16, in __init__
     self.msg = 5
   File "kivy/properties.pyx", line 483, in 
   kivy.properties.Property.__set__
   File "kivy/properties.pyx", line 521, in kivy.properties.Property.set
   File "kivy/properties.pyx", line 512, in kivy.properties.Property.set
   File "kivy/properties.pyx", line 678, in 
   kivy.properties.StringProperty.check
   ValueError: LabelBase.msg accept only str
</code></pre>
<p>Renamed the question because it did not correspond to what was happening</p>
</div>
<div class="post-text" itemprop="text">
<p>I assume you want to do some checks on assignments, like type checking in the kivy case. Your example looks to me very unidiomatic, I'd write it the following way:</p>
<pre><code>class Foo:

    @property
    def var(self):
        return self._var

    @var.setter
    def var(self, value):
        if type(value) == str:
            self._var = value
</code></pre>
<p>How does it work? Actually it's a bit complicated, but <a href="https://stackoverflow.com/questions/17330160/how-does-the-property-decorator-work/17330273">here</a> is a good ressource. <code>property</code> returns a <a href="https://docs.python.org/3.7/reference/datamodel.html#implementing-descriptors" rel="nofollow noreferrer">descriptor</a> which basically means that <code>foo.var = x</code> is translated to <code>foo.var.__set__(x)</code> (which then calls something "equivalent" to <code>Foo.var.setter_function(foo, x)</code>). It just says "instead of storing an assigned value, call this function".</p>
<p>How is the kivy case different? Assume we have the following class:</p>
<pre><code>class Bar(Widget):
    var = StringProperty()
</code></pre>
<p>The behavior is very similar to the python code before, but the setter and getter methods are defined by kivy and not here in the class. But if you assign a value to a Bar instance <code>bar.var = x</code> a setter is called <code>bar.var.__set__(x)</code>. The setter does not only check for types but also emits events if the value changed.</p>
<p>You can also create properties with getters and setters already provided by implementing a <a href="https://docs.python.org/3/reference/datamodel.html#implementing-descriptors" rel="nofollow noreferrer">descriptor</a>. You need to implement <code>__set__</code> and <code>__get__</code>:</p>
<pre><code>class MyStringProperty:

    def __init__(self, default):
        self._default = default

    def __set__(self, instance, value):
        if type(value) == str:
            instance._value = value

    def __get__(self, instance, owner):
        return getattr(instance, "_value", self._default)

class Foo:
    var = MyStringProperty("x")

foo = Foo()
print(foo.var)
foo.var = 3
print(foo.var)
foo.var = "asdf"
print(foo.var)
</code></pre>
<p>(The <a href="https://docs.python.org/3/reference/datamodel.html#implementing-descriptors" rel="nofollow noreferrer">documentation</a> speaks from get, set, delete and set_name, but I think in the common case one can get away with only implementing set and get.)</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want to check the value, you simply add check code to your <code>setter</code>. For example, if you want <code>var</code> to be limited to <code>int</code> or <code>float</code>, you can modify your <code>setter</code> as:</p>
<pre><code>   @var.setter
   def var(self, value):
      if type(value) not in (int, float):
          raise ValueError('%s.%s accept only int or float (got %r)' % (
              self.__class__.__name__,
              'var', value))
      self._var = value
</code></pre>
<p>This code is a slight modification of <code>Kivy</code> check code.</p>
</div>
<span class="comment-copy">Assignment isn't a method.</span>
<span class="comment-copy">Good, how was it done team Kivy?</span>
<span class="comment-copy">I doubt very much that this is possible even in Kivy. Please show an example where you do that.</span>
<span class="comment-copy">But isn't that exactly the same as what you have in your first snippet above, with getter and setter methods? It's not at all what you do in the second, where you try and reassign the whole object.</span>
<span class="comment-copy">Okay after reading the source code I understand what they're doing, so what is it exactly that you want? Because what kivy is doing and what you're asking to do (claiming that kivy does it) are completely different.</span>
<span class="comment-copy">I'm understood, thank you!</span>
