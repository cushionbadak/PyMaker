<div class="post-text" itemprop="text">
<p>I have a dict looks like this :</p>
<pre><code>my_dict = {
    "a":[1, 2, 3],
    "b":[10],
    "c":[4, 5],
    "d":[11]
}
</code></pre>
<p>And I would like to obtain a list containig all combinations keeping keys and value like this:</p>
<pre><code>result = [
    {"a":1, "b":10, "c":4, "d":11},
    {"a":1, "b":10, "c":5, "d":11},
    {"a":2, "b":10, "c":4, "d":11},
    {"a":2, "b":10, "c":5, "d":11},
    {"a":3, "b":10, "c":4, "d":11},
    {"a":3, "b":10, "c":5, "d":11}
]
</code></pre>
<p>Do someone have a solution for this ?
Is there any existing solution to do this, or how should I proceed to do it myself ?</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try:</p>
<pre><code>def permute(d):
    k = d.keys()
    perms = itertools.product(*d.values())
    return [dict(zip(k, v)) for v in perms]

&gt;&gt;&gt; pprint(permute(my_dict))
[{'a': 1, 'b': 10, 'c': 4, 'd': 11},
 {'a': 1, 'b': 10, 'c': 5, 'd': 11},
 {'a': 2, 'b': 10, 'c': 4, 'd': 11},
 {'a': 2, 'b': 10, 'c': 5, 'd': 11},
 {'a': 3, 'b': 10, 'c': 4, 'd': 11},
 {'a': 3, 'b': 10, 'c': 5, 'd': 11}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A task for <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools.product</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; for dict_items in product(*[product([k],v) for k, v in my_dict.items()]):
...    print(dict(dict_items))

{'a': 1, 'b': 10, 'c': 4, 'd': 11}
{'a': 1, 'b': 10, 'c': 5, 'd': 11}
{'a': 2, 'b': 10, 'c': 4, 'd': 11}
{'a': 2, 'b': 10, 'c': 5, 'd': 11}
{'a': 3, 'b': 10, 'c': 4, 'd': 11}
{'a': 3, 'b': 10, 'c': 5, 'd': 11}
</code></pre>
<p>Small explanation:</p>
<p>The inner <code>product(...)</code> will expand the dict to a list such as <code>[[(k1, v11), (k1, v12), ...], [(k2, v21), (k2, v22), ...], ...]</code>.</p>
<p>The outer <code>product(...)</code> will reassemble the items lists by choosing one tuple from each list.</p>
<p><code>dict(...)</code> will create a dictionary from a sequence of <code>(k1, v#), (k2, v#), ...</code> tuples.</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that you are only interested in my_dict having 4 keys, it is simple enough to use nested for loops:</p>
<pre><code>my_dict = {
    "a": [1, 2, 3],
    "b": [10],
    "c": [4, 5],
    "d": [11]
}

result = []
for a_val in my_dict['a']:
    for b_val in my_dict['b']:
        for c_val in my_dict['c']:
            for d_val in my_dict['d']:
                result.append({'a': a_val, 'b': b_val, 'c': c_val, 'd': d_val})

print(result)
</code></pre>
<p>This gives the expected result.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use:</p>
<pre><code>from itertools import product
allNames = sorted(my_dict)
values= list(product(*(my_dict[Name] for Name in allNames)))
d = list(dict(zip(['a','b','c','d'],i)) for i in values)
</code></pre>
<p>Output:</p>
<pre><code>[{'a': 1, 'c': 4, 'b': 10, 'd': 11}, 
{'a': 1, 'c': 5, 'b': 10, 'd': 11}, 
{'a': 2, 'c': 4, 'b': 10, 'd': 11}, 
{'a': 2, 'c': 5, 'b': 10, 'd': 11}, 
{'a': 3, 'c': 4, 'b': 10, 'd': 11}, 
{'a': 3, 'c': 5, 'b': 10, 'd': 11}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>itertools.product</code> produces the combinations of a list of iterators.</p>
<p><code>dict.values()</code> gets the list needed.</p>
<p>For each combination, <code>zip</code> up the <code>dict.keys()</code> with the combination.</p>
<p>Use a <code>list comprehension</code> to collect them up:</p>
<pre><code>from itertools import product
from pprint import pprint

my_dict = {
    "a":[1, 2, 3],
    "b":[10],
    "c":[4, 5],
    "d":[11]
}

result = [dict(zip(my_dict,i)) for i in product(*my_dict.values())]
pprint(result)
</code></pre>
<p>Output:</p>
<pre><code>[{'a': 1, 'b': 10, 'c': 4, 'd': 11},
 {'a': 1, 'b': 10, 'c': 5, 'd': 11},
 {'a': 2, 'b': 10, 'c': 4, 'd': 11},
 {'a': 2, 'b': 10, 'c': 5, 'd': 11},
 {'a': 3, 'b': 10, 'c': 4, 'd': 11},
 {'a': 3, 'b': 10, 'c': 5, 'd': 11}]
</code></pre>
</div>
<span class="comment-copy">I hope using itertools.combinations you can generate various combinations of a list but not sure on generating for a dictionary.</span>
<span class="comment-copy">Thank you Mateen, that works perfectly !</span>
<span class="comment-copy">Thanks for explanations ;)</span>
<span class="comment-copy">Thank you for answer but I can't use it because "my_dict" can contain different number of key with different name.</span>
<span class="comment-copy">No problem.  Then the <code>itertools</code> approach is definitely the right one!</span>
<span class="comment-copy">Thank you very much for explanation ! It's more clear now ;)</span>
