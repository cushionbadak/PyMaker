<div class="post-text" itemprop="text">
<p>When I run this code in python 2.7, I get this error:</p>
<pre><code>Traceback (most recent call last):
File "C:\Python26\Lib\site-packages\pyutilib.subprocess-3.5.4\setup.py", line 30, in &lt;module&gt;
    long_description = read('README.txt'),
  File "C:\Python26\Lib\site-packages\pyutilib.subprocess-3.5.4\setup.py", line 19, in read
    return open(os.path.join(os.path.dirname(__file__), *rnames)).read()
NameError: global name '__file__' is not defined
</code></pre>
<p>code is:</p>
<pre><code>import os
from setuptools import setup


def read(*rnames):
    return open(os.path.join(os.path.dirname(__file__), *rnames)).read()


setup(name="pyutilib.subprocess",
    version='3.5.4',
    maintainer='William E. Hart',
    maintainer_email='wehart@sandia.gov',
    url = 'https://software.sandia.gov/svn/public/pyutilib/pyutilib.subprocess',
    license = 'BSD',
    platforms = ["any"],
    description = 'PyUtilib utilites for managing subprocesses.',
    long_description = read('README.txt'),
    classifiers = [
        'Development Status :: 4 - Beta',
        'Intended Audience :: End Users/Desktop',
        'License :: OSI Approved :: BSD License',
        'Natural Language :: English',
        'Operating System :: Microsoft :: Windows',
        'Operating System :: Unix',
        'Programming Language :: Python',
        'Programming Language :: Unix Shell',
        'Topic :: Scientific/Engineering :: Mathematics',
        'Topic :: Software Development :: Libraries :: Python Modules'],
      packages=['pyutilib', 'pyutilib.subprocess', 'pyutilib.subprocess.tests'],
      keywords=['utility'],
      namespace_packages=['pyutilib'],
      install_requires=['pyutilib.common', 'pyutilib.services']
      )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This error comes when you append this line <code>os.path.join(os.path.dirname(__file__))</code> in python interactive shell. </p>
<p><code>Python Shell</code> doesn't detect current file path in <code>__file__</code> and it's related to your <code>filepath</code> in which you added this line</p>
<p>So you should write this line <code>os.path.join(os.path.dirname(__file__))</code> in <code>file.py</code>. and then run <code>python file.py</code>, It works because it takes your filepath.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem with PyInstaller and Py2exe so I came across the resolution on the FAQ from cx-freeze.</p>
<p>When using your script from the console or as an application, the functions hereunder will deliver you the "execution path", not the "actual file path":</p>
<pre><code>print(os.getcwd())
print(sys.argv[0])
print(os.path.dirname(os.path.realpath('__file__')))
</code></pre>
<p>Source:<br/>
<a href="http://cx-freeze.readthedocs.org/en/latest/faq.html" rel="noreferrer">http://cx-freeze.readthedocs.org/en/latest/faq.html</a></p>
<p>Your old line (initial question):</p>
<pre><code>def read(*rnames):
return open(os.path.join(os.path.dirname(__file__), *rnames)).read()
</code></pre>
<p>Substitute your line of code with the following snippet.</p>
<pre><code>def find_data_file(filename):
    if getattr(sys, 'frozen', False):
        # The application is frozen
        datadir = os.path.dirname(sys.executable)
    else:
        # The application is not frozen
        # Change this bit to match where you store your data files:
        datadir = os.path.dirname(__file__)

    return os.path.join(datadir, filename)
</code></pre>
<p>With the above code you could add your application to the path of your os, you could execute it anywhere without the problem that your app is unable to find it's data/configuration files.</p>
<p>Tested with python:</p>
<ul>
<li>3.3.4</li>
<li>2.7.13</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>I solved it by treating file as a string, i.e. put <code>"__file__"</code> (together with the quotes!) instead of <code>__file__</code></p>
<p>This works fine for me:</p>
<pre><code>wk_dir = os.path.dirname(os.path.realpath('__file__'))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Are you using the interactive interpreter? You can use</p>
<pre><code>sys.argv[0]
</code></pre>
<p>You should read: <a href="https://stackoverflow.com/questions/2632199/how-do-i-get-the-path-of-the-current-executed-file-in-python">How do I get the path of the current executed file in Python?</a></p>
</div>
<div class="post-text" itemprop="text">
<p>If all you are looking for is to get your current working directory <code>os.getcwd()</code> will give you the same thing as <code>os.path.dirname(__file__)</code> as long as you have not changed the working directory elsewhere in your code.  <code>os.getcwd()</code> also works in interactive mode.</p>
<p>So
    <code>os.path.join(os.path.dirname(__file__))</code>
becomes
    <code>os.path.join(os.getcwd())</code></p>
</div>
<div class="post-text" itemprop="text">
<p>I've run into cases where <strong>file</strong> doesn't work as expected. But the following hasn't failed me so far:</p>
<pre><code>import inspect
src_file_path = inspect.getfile(lambda:None)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You will get this if you are running the commands from the python shell:</p>
<pre><code>&gt;&gt;&gt; __file__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name '__file__' is not defined
</code></pre>
<p>You need to execute the file directly, by passing it in as an argument to the <code>python</code> command:</p>
<pre><code>$ python somefile.py
</code></pre>
<p>In your case, it should really be <code>python setup.py install</code></p>
</div>
<div class="post-text" itemprop="text">
<p>What you can do is to use the following</p>
<pre><code>import os
if '__file__' in vars():
    wk_dir = os.path.dirname(os.path.realpath('__file__'))
else:
    print('We are running the script interactively')
</code></pre>
<p>Note here that using the string <code>'__file__'</code> does indeed refer to the actual variable <code>__file__</code>. You can test this out yourself of course..</p>
<p>The added bonus of this solution is the flexibilty when you are running a script partly interactively (e.g. to test/develop it), and can run it via the commandline </p>
</div>
<div class="post-text" itemprop="text">
<p>I'm having exacty the same problem and using probably <a href="http://pythonhosted.org/an_example_pypi_project/setuptools.html" rel="nofollow">the same tutorial</a>. The function definition:</p>
<pre><code>def read(*rnames):
    return open(os.path.join(os.path.dirname(__file__), *rnames)).read()
</code></pre>
<p>is buggy, since <code>os.path.dirname(__file__)</code> will not return what you need. Try replacing <code>os.path.dirname(__file__)</code> with <code>os.path.dirname(os.path.abspath(__file__))</code>:</p>
<pre><code>def read(*rnames):
    return open(os.path.join(os.path.dirname(os.path.abspath(__file__)), *rnames)).read()
</code></pre>
<p>I've just posted Andrew that the code snippet in current docs don't work, hopefully, it'll be corrected.</p>
</div>
<div class="post-text" itemprop="text">
<p>change your codes as follows! it works for me.
`</p>
<p>os.path.dirname(os.path.abspath("<code>__file__</code>"))</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're exec'ing a file via command line, you can use this hack</p>
<pre><code>import traceback

def get_this_filename():
    try:
        raise NotImplementedError("No error")
    except Exception as e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        filename = traceback.extract_tb(exc_traceback)[-1].filename
    return filename
</code></pre>
<p>This worked for me in the UnrealEnginePython console, calling <code>py.exec myfile.py</code></p>
</div>
<span class="comment-copy">This answer is correct.</span>
<span class="comment-copy">exactly my experience. but how to get it to work within a shell?</span>
<span class="comment-copy">But to run <code>file.py</code> from a script, you would put it in the same directory as your script for example. So you need to move to this directory before running <code>file.py</code>... So still something better is sought.</span>
<span class="comment-copy">This deserves more upvotes.</span>
<span class="comment-copy">This indeed works, but I can't get my head around why. Why is <code>"__file__"</code> between quotes treated different than <code>__file__</code> without quotes?</span>
<span class="comment-copy">Because it doesn't reference the missing global variable. Instead it treats the string '<b>file</b>' as part of the path.</span>
<span class="comment-copy">This doesn't return the directory where <b>file</b> is located, but just return the current working directory (where python is called). -1</span>
<span class="comment-copy">Any filename will do in place of <code>"__file__"</code>. E.g. <code>realpath('nonexistentfile.whatever')</code>.</span>
<span class="comment-copy">This answer really should be removed as it's incorrect and misleading. The fact it is upvoted so highly is rather worrying...</span>
<span class="comment-copy">fd = os.path.dirname(os.path.realpath(<b>file</b>)) nd printing it printed .../../folder1/ but cwd = os.path.dirname(os.path.realpath(sys.argv[0])) &gt;&gt;&gt; print cwd prints ../../</span>
<span class="comment-copy">this will give the path to the binary python that launched the shell, NOT the current working directory</span>
<span class="comment-copy">it should be <code>argv[1]</code> instead of <code>argv[0]</code></span>
<span class="comment-copy">This is a winner</span>
<span class="comment-copy">This worksforme also when python is embedded in another application</span>
<span class="comment-copy">I think you are actually using <code>os.getcwd()</code>, according to <a href="https://docs.python.org/3/library/os.path.html#os.path.abspath" rel="nofollow noreferrer">doc</a>, and the <code>"__file__"</code> is meaningless.</span>
