<div class="post-text" itemprop="text">
<p>I have a list like this:</p>
<pre><code>l1=[1,2,3,4,5,7,8,9,23,32,33] 
l2=[5,3,1,2]
</code></pre>
<p>I want the final list be look like</p>
<pre><code>l3=[[1,2,3,4,5],[7,8,9],[23],[32,33]]
</code></pre>
<p>The length of each nested list will come form l2,</p>
<p>How to do it in efficient way using python.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could create an iterator and then create the nested lists:</p>
<pre><code>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; l1=[1,2,3,4,5,7,8,9,23,32,33] 
&gt;&gt;&gt; l2=[5,3,1,2]
&gt;&gt;&gt; it = iter(l1)
&gt;&gt;&gt; [list(islice(it, n)) for n in l2]
[[1, 2, 3, 4, 5], [7, 8, 9], [23], [32, 33]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools</code>:</p>
<pre><code>from itertools import repeat, islice
# itertools works with iterators, so we'll make one
itl1 = iter(l1)
</code></pre>
<p>And now if you want a lazy result:</p>
<pre><code>lazy = map(islice, repeat(itl1), l2)
</code></pre>
<p>If you want a realized result:</p>
<pre><code>realized = list(map(list, lazy))
</code></pre>
<p>The point is that <code>islice</code> depletes the iterator <code>itl1</code> by the amounts stated in <code>l2</code> in every step of the <code>map</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use a comprehension:</p>
<pre><code>&gt;&gt;&gt; l3 = [[l1.pop(0) for _ in range(x)] for x in l2]
&gt;&gt;&gt; l3
[[1, 2, 3, 4, 5], [7, 8, 9], [23], [32, 33]]
</code></pre>
<p>If you dont want to modify l1, use an iterator:</p>
<pre><code>&gt;&gt;&gt; l1=[1,2,3,4,5,7,8,9,23,32,33] 
&gt;&gt;&gt; it = iter(l1)
&gt;&gt;&gt; l3 = [[next(it) for _ in range(x)] for x in l2]
&gt;&gt;&gt; l3
[[1, 2, 3, 4, 5], [7, 8, 9], [23], [32, 33]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a solution using <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate" rel="nofollow noreferrer"><code>itertools.accumulate</code></a> and <code>pairwise</code>, the latter a recipe <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">available in the <code>itertools</code> docs</a> or available in 3rd party <a href="https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.pairwise" rel="nofollow noreferrer"><code>more_itertools.pairwise</code></a>:</p>
<pre><code>from itertools import accumulate
from more_itertools import pairwise

L1 = [1,2,3,4,5,7,8,9,23,32,33] 
L2 = [5,3,1,2]

L3 = [L1[i: j] for i, j in pairwise(accumulate([0] + L2))]

[[1, 2, 3, 4, 5], [7, 8, 9], [23], [32, 33]]
</code></pre>
</div>
<span class="comment-copy">Is it given that the sum of all elements in <code>I2</code> equal to the length of the list <code>l1</code>?</span>
<span class="comment-copy">Also, what have you done so far? Share your progress, at least?</span>
