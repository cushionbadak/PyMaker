<div class="post-text" itemprop="text">
<p>I have learned python since 2 weeks ago.
But I don't understand why <code>copy_dic</code> is <code>{'a': 3}</code>.</p>
<p>save memory address ?? I don't know..</p>
<p>1: Case of Variable</p>
<pre><code>var_a = 1

copy_var = var_a
var_a = 3

print(copy_var)
# 1
</code></pre>
<p>2: Case of Dictionary</p>
<pre><code>dic = {'a':1}

copy_dic = dic
dic['a'] = 3

print(copy_dic)
# {'a': 3}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python names are just references to objects. When you have something like:</p>
<pre><code>var_a = 1
dic = {'a' : 1}
</code></pre>
<p><code>dic</code> and <code>var_a</code> are just names pointing to the respective objects.</p>
<p>visual representation:</p>
<pre><code>var_a   --&gt;     1
dic     --&gt;  {'a' : 1}
</code></pre>
<p>And when you assign some other variable using <code>=</code> operator, what you are essentially doing is asking that other variable to point to <strong>the same exact</strong> object:</p>
<pre><code>copy_var = var_a
copy_dic = dic
</code></pre>
<p>visual representation:</p>
<pre><code>var_a   --&gt;      1     &lt;-- copy_var
dic     --&gt;  {'a' : 1} &lt;-- copy_dic
</code></pre>
<hr/>
<p>Now, changing that object affects all of the variables pointing to it, as is demonstrated in the question:</p>
<pre><code>dic['a'] = 3
</code></pre>
<p>visual representation:</p>
<pre><code>var_a   --&gt;      1     &lt;-- copy_var
dic     --&gt;  {'a' : 3} &lt;-- copy_dic
</code></pre>
<p>As can be seen, the single <code>dict</code> object both variables (<code>dic</code>, <code>copy_dic</code>) were pointing to is altered, and both of them still point to this object. </p>
<hr/>
<p>One question remains, <em>"Why changing changing the <code>int</code> object didn't have the same effect? Shouldn't operations on <code>var_a</code> affect <code>copy_var</code> too?"</em><br/>
The answer is, in Python integers, strings, tuples and some other objects are <em>immutable</em>, meaning you cannot alter them. When you try to alter an integer like:</p>
<pre><code>var_a = 3
</code></pre>
<p>or</p>
<pre><code>var_a += 2
</code></pre>
<p><code>var_a</code> starts pointing to an entirely different integer object.  </p>
<p>visual representation:</p>
<pre><code>var_a   --&gt;      3
                 1     &lt;-- copy_var
dic     --&gt;  {'a' : 3} &lt;-- copy_dic
</code></pre>
<hr/>
<p>What if you want to have separate <code>dict</code> objects? You can use the <a href="https://docs.python.org/3/library/stdtypes.html?highlight=dict%20copy#dict.copy" rel="nofollow noreferrer">copy</a> method:</p>
<pre><code>dic = {'a':1}

copy_dic = dic.copy()  #   &lt;-- notice `.copy` here
dic['a'] = 3

print(dic)
print(copy_dic)
</code></pre>
<p>Output:</p>
<pre><code>{'a': 3}
{'a': 1}
</code></pre>
<p><code>copy</code> creates a new copy of that object and returns it.<br/>
visual representation:</p>
<pre><code>var_a   --&gt;      3
                 1     &lt;-- copy_var
dic     --&gt;  {'a' : 1}
             {'a' : 1} &lt;-- copy_dic
</code></pre>
<p>Be warned:</p>
<blockquote>
<h1>copy()</h1>
<p>Return a shallow copy of the dictionary.</p>
</blockquote>
<p>What is a <em>shallow copy</em>, one might ask. As the documentation states:</p>
<blockquote>
<p>A shallow copy constructs a new compound object and then (to the extent possible) inserts references into it to the objects found in the original.</p>
</blockquote>
<p>Meaning the <code>dict</code> objects are two different objects but their components are the same, thus if their objects were mutable, and you altered them, that would still affect the other one:</p>
<pre><code>dic = {'a' : [1, 2]}    #  lists are mutable
copy_dic = dic.copy()

dic['a'].append("spam") #  &lt;-- alters the object both of the dictionaries hold a reference to

print(dic)
print(copy_dic)
</code></pre>
<p>Output:</p>
<pre><code>{'a': [1, 2, 'spam']}
{'a': [1, 2, 'spam']}
</code></pre>
<p>If you need to avoid that behavior, what you need is <a href="https://docs.python.org/3.7/library/copy.html#copy.deepcopy" rel="nofollow noreferrer">deepcopy</a> function:</p>
<blockquote>
<h1>copy.deepcopy(x[, memo])</h1>
<p>Return a deep copy of x.</p>
</blockquote>
<p>And as is stated:</p>
<blockquote>
<p>A deep copy constructs a new compound object and then, recursively,
  inserts copies into it of the objects found in the original.</p>
</blockquote>
<p>Meaning dictionaries hold references to different objects. In that case, you can alter one of them without ever worrying about the other. This function can be found in <code>copy</code> module:</p>
<pre><code>import copy           # import this module for `deepcopy`

dic = {'a' : [1, 2]}
copy_dic = copy.deepcopy(dic)

dic['a'].append("spam")

print(dic)
print(copy_dic)
</code></pre>
<p>Output:</p>
<pre><code>{'a': [1, 2, 'spam']}
{'a': [1, 2]}
</code></pre>
<p>However, in most cases a shallow copy is what you really need.</p>
</div>
<div class="post-text" itemprop="text">
<p>When you do</p>
<pre><code>copy_dic = dic
</code></pre>
<p>both <code>copy_dic</code> and <code>dic</code> point to the same dictionary (two references to same dictionary), so updating one will reflect in the other. </p>
<p>What you need is to create a copy of dictionary and whatever you change in the original dictionary is not going to reflect in the copy:</p>
<pre><code>copy_dic = dic.copy()
</code></pre>
<hr/>
<pre><code>dic = {'a': 1}

copy_dic = dic.copy()
dic['a'] = 3

print(copy_dic)
# {'a': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>1: Case of Variable</p>
</blockquote>
<p>Both <code>var_a</code> and <code>copy_var</code> are <strong><code>int</code></strong> object, which is <strong>immutable</strong>. When you do <code>var_a = 3</code>, <strong><code>var_a</code> points to a new memory address</strong>. Here is the detailed explanation to your code:</p>
<p><code>var_a = 1</code> : variable <code>var_a</code> points to the memory address of <code>1</code></p>
<p><code>copy_var = var_a</code> : variable <code>copy_var</code> points to the same memory address of <code>1</code></p>
<p><code>var_a = 3</code> : variable <code>var_a</code> points to the memory address of <code>3</code> while <code>copy_var</code> still points to the memory address of <code>1</code></p>
<p><code>print(copy_var)</code> : the result is <code>1</code> since the memory address of <code>var_a</code> is changed.</p>
<blockquote>
<p>2: Case of Dictionary</p>
</blockquote>
<p>Both <code>dic</code> and <code>copy_dic</code> are <strong><code>dictionary</code></strong> object, which is <strong>mutable</strong>. When you do <code>dic['a'] = 3</code>, <strong><code>dic</code> doesn't change its memory address and the content in the original memory address is changed</strong>. Here is the detailed explanatioofto your code:</p>
<p><code>dic = {'a':1}</code> : variable <code>dic</code> points to the memory address of <code>{'a':1}</code></p>
<p><code>copy_dic = dic</code> : variable <code>copy_dic</code> points to the same memory address of <code>{'a':1}</code></p>
<p><code>dic['a'] = 3</code> : <code>dic</code> doesn't change its memory address, the content in the original memory address is changed to be <code>{'a':3}</code></p>
<p><code>print(copy_dic)</code> : The result is  <code>{'a': 3}</code> since the content in the memory address is changed</p>
</div>
<span class="comment-copy">In Python <code>=</code> creates (new) references to an object. It does not create copies.</span>
<span class="comment-copy">Wow.. Thank you !!</span>
<span class="comment-copy">Wow.. Thank you !!</span>
<span class="comment-copy">Wow.. Thank you !!</span>
