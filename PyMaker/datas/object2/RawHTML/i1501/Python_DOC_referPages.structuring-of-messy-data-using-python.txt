<div class="post-text" itemprop="text">
<p>I have a set of data which is not tab or comma delimited. When open in Notepad, it looks very structured as shown below but when open with Excel, It is not structured properly</p>
<pre class="lang-none prettyprint-override"><code>Tuesday 19-April-2010 00:01 CC  11   PQ 1.1  PS1.1 CS# 111 +1 RS113' SC 183 ZA 71
 IFJ   SC/LY     AB  CD?  EF  GH  IJK  LM  NO  PQR  ST  UV  WXY  ZA  BC  DEF GHI
 1234 SC 122      A  20?  31   1   4?  10   3   2?  19   9   5?   -       -?   30
 1234 SC 123  '   B  60?  11   2   3?  10   5   6?  19   9   4?  17   4   1?   30
 1234 SC 124      C  20?  21   2   2?  10   2   1?   9   9   0?   -       -?   34
 1234 SC 125 ^    1 100?   -       -?   0   3   3?   -       -?   -       -?   10
 1234 SC 226 *    5  60?   -       -?  14   4   3?   9   9   2?   7   3   3?   18
A=&lt;43&gt;  B=33  C=24
Tuesday 19-April-2010 00:03 CC  11   PQ 1.1  PS1.1 CS# 111 +1 RS113' SC 183 ZA 71
 IFJ   SC/LY     AB  CD?  EF  GH  IJK  LM  NO  PQR  ST  UV  WXY  ZA  BC  DEF GHI
 1234 SC 122      A  21?  31   5   4?  17   3   2?  19   9   1?   -       -?   31
 1234 SC 123  '   B  61?  11   2   3?  19   5   6?  19   9   4?  17   4   3?   32
 1234 SC 124      C  21?  21   5   2?  10   2   1?   9   9   0?   -       -?   33
 1234 SC 125 ^    1 101?   -       -?   7   3   3?   -       -?   -       -?   14
 0000 SC 226 *    5  61?   -       -?  14   4   3?   9   9   2?   7   3   3?   18
</code></pre>
<p>Is there any ways that I can use pandas to process such data for some analysis?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest you use a script to first convert your data into a suitable CSV format that could then be loaded without problem using Pandas. </p>
<p>Most of the data appears to be in a fixed width format, as such the column locations could be hard coded, and <code>strip()</code> applied to remove any whitespace. The time and date can be extracted from the timestamp line and added to the start of each entry within it.</p>
<p><a href="https://docs.python.org/3/library/itertools.html?highlight=groupby#itertools.groupby" rel="nofollow noreferrer"><code>groupby()</code></a> is used to read the file in blocks, this also has the effect of skipping the unwanted line between segments. It works by reading the file a line at a time and passing each line to a <code>key</code> function (this is provided inline using a <code>lambda</code> function to save space). If the result of the function changes, the groupby function returns a list of lines which have the same return. In this case it is testing if the line does not start with the <code>A=&lt;</code> characters. So you get one return where <code>key</code> is <code>True</code> holding a list of lines starting with the timestamp. Then a list of lines (in this case just one) with the lines starting <code>A=&lt;</code>. This makes it easier to then process a whole segment without having to worry about where it finishes. The first entry is the timestamp followed by all the entries.</p>
<p>A list comprehension is used to extract each individual value from the line and create a <code>row</code> of values. The <a href="https://docs.python.org/3.6/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>pairwise()</code></a> recipe is used to read the fixed column locations from <code>cols</code> to get a sliding <code>start</code> and <code>end</code> column positions. These are used as a string slice to extract the characters for each column. The string then has <code>.strip()</code> applied to remove any surrounding spaces.</p>
<pre><code>from itertools import groupby, tee
import csv

def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)

cols = [0, 5, 12, 15, 19, 24, 28, 32, 37, 41, 45, 50, 54, 58, 63, 68, 71, 76] # + rest
header = None

with open('data.txt') as f_input, open('output.csv', 'w', newline='') as f_output:
    csv_output = csv.writer(f_output)

    for key, group in groupby(f_input, lambda x: not x.startswith('A=&lt;')):
        if key:
            # Extract the timestamp from the first returned line in the segment
            # Split the line on spaces and take the first 3 elements
            timestamp = next(group).split()[:3]
            block = []

            for line in group:
                row = [line[start:end].strip() for start, end in pairwise(cols)]
                row.append(line[cols[-1]:].strip())     # Add GHI column
                block.append(timestamp + row)

            if not header:
                header = block[0][3:]
                header[2] = 'Unknown'
                csv_output.writerow(['Day', 'Date', 'Time'] + header)

            csv_output.writerows(block[1:])
</code></pre>
<p>For the data you have given, this would give you </p>
<pre class="lang-none prettyprint-override"><code>Day,Date,Time,IFJ,SC/LY,Unknown,AB,CD?,EF,GH,IJK,LM,NO,PQR,ST,UV,WXY,ZA,BC,DEF,GHI
Tuesday,19-April-2010,00:01,1234,SC 122,,A,20?,31,1,4?,10,3,2?,19,9,5?,-,,-?,30
Tuesday,19-April-2010,00:01,1234,SC 123,',B,60?,11,2,3?,10,5,6?,19,9,4?,17,4,1?,30
Tuesday,19-April-2010,00:01,1234,SC 124,,C,20?,21,2,2?,10,2,1?,9,9,0?,-,,-?,34
Tuesday,19-April-2010,00:01,1234,SC 125,^,1,100?,-,,-?,0,3,3?,-,,-?,-,,-?,10
Tuesday,19-April-2010,00:01,1234,SC 226,*,5,60?,-,,-?,14,4,3?,9,9,2?,7,3,3?,18
Tuesday,19-April-2010,00:03,1234,SC 122,,A,21?,31,5,4?,17,3,2?,19,9,1?,-,,-?,31
Tuesday,19-April-2010,00:03,1234,SC 123,',B,61?,11,2,3?,19,5,6?,19,9,4?,17,4,3?,32
Tuesday,19-April-2010,00:03,1234,SC 124,,C,21?,21,5,2?,10,2,1?,9,9,0?,-,,-?,33
Tuesday,19-April-2010,00:03,1234,SC 125,^,1,101?,-,,-?,7,3,3?,-,,-?,-,,-?,14
Tuesday,19-April-2010,00:03,0000,SC 226,*,5,61?,-,,-?,14,4,3?,9,9,2?,7,3,3?,18
</code></pre>
<p>To get a better understanding of how the script actually works, I would recommend you add create a small test file (with two segments) and then also add some print statements.</p>
</div>
<div class="post-text" itemprop="text">
<p>Your second row seems to be the actual header. But then still, it doesn't look right, as MEdwin pointed out. </p>
<p>Normally, you could try:</p>
<pre><code>import pandas as pd

df = pd.read_csv(&lt;your csv), skiprows=1, delim_whitespace=True)
print(df.head())
</code></pre>
<p>But this will not work correctly, because the CSV isn't structured consistently. </p>
</div>
<div class="post-text" itemprop="text">
<p>EDIT: This is the closest I can get with regex. Unfortunately any blank fields (e.g. column <code>GH</code> rows 4&amp;5), will not be processed correctly and the data will be skewed. </p>
<p>Please note I’m on an iPhone so you will need to replace any and all double quotes (“).</p>
<p>The regex expression <code>[^0-9A-Z\?\-]+</code> will match any characters that are NOT:</p>
<ul>
<li>digits 0-9</li>
<li>capitalised letters</li>
<li>question marks</li>
<li>hyphens</li>
</ul>
<p>For one or more combinations...</p>
<p>This removes the weird special characters and deals with the multi white space delimiters. </p>
<p>You will end up with an extra blank column at the start. You can deal with that with some more regex, but I’ll leave that up to you for some homework (hungover).</p>
<p>The column <code>SC/LY</code> will be split into two. With two stages of delimiting (not using pandas to start) you can probably handle that. </p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex_string = r”[^0-9A-Z\?\-\/]+”
&gt;&gt;&gt; p=re.compile(regex_string)
&gt;&gt;&gt; header
' IFJ   SC/LY     AB  CD?  EF  GH  IJK  LM  NO  PQR  ST  UV  WXY  ZA  BC  DEF GHI'
&gt;&gt;&gt; single_row
' 1234 SC 125 ^    1 101?   -       -?   7   3   3?   -       -?   -       -?   10'
&gt;&gt;&gt; p.split(header)
['', 'IFJ', 'SC' , 'LY', 'AB', 'CD?', 'EF', 'GH', 'IJK', 'LM', 'NO', 'PQR', 'ST', 'UV', 'WXY', 'ZA', 'BC', 'DEF', 'GHI']
&gt;&gt;&gt; p.split(single_row)
['', '1234', 'SC', '125', '1', '101?', '-', '-?', '7', '3', '3?', '-', '-?', '-', '-?', '10']
</code></pre>
<p>With pandas, that would look like:</p>
<pre><code>&gt;&gt;&gt; import pandas
&gt;&gt;&gt; df = pandas.read_csv(filepath, skiprows=1, header=True, delimiter= r”[^0-9A-Z\?\-]+”, engine=“python”)
</code></pre>
</div>
<span class="comment-copy">this data doesnt look structured.looking at the column name "Tuesday 19-April-2010 00:01". It looks like it has been modified.</span>
<span class="comment-copy">Could you use something like <a href="https://pastebin.com/" rel="nofollow noreferrer">pastebin</a> to upload a sample file to (post a link to it here). That way we can be sure of the exact formating of the file.</span>
<span class="comment-copy">This looks like perfect regex expression territory. The symbol characters don’t <i>look</i> like they’re important (only you can really determine that without us having more data).Multi white space + symbol character delimiters.</span>
<span class="comment-copy">See this answer to delimit by regex using pandas <a href="https://stackoverflow.com/a/19632099">stackoverflow.com/a/19632099</a></span>
<span class="comment-copy">Having had another look, I think you might have to go for fixed width delimiting and then cleaning whitespace tbh. Splitting at the right hand side of row 2 (headers) positions except last column which is +1 of final header position. You can do that in Excel with data import</span>
<span class="comment-copy">Hi! Really appreciate your help to set a direction for me to head towards. Was wondering that how can I accurately assign the time? I've tried the code as above but the outcome on the time column only shows the 1st timing across my 10k row of data</span>
<span class="comment-copy">Hi, Im so sorry for missing out a line of data that might cause the issue as commented above, I've updated the data in the question</span>
<span class="comment-copy">I have updated the code to spot that line. It was definitely causing the problem.</span>
<span class="comment-copy">Thank you so much for your help. Would appreciate it if you can include some comments so that I can better learn and understand on your thought process for this.  Cheers!</span>
<span class="comment-copy">I have improved the explanation a bit, but there are quite a few concepts in use which are worth understanding. Try adding some print statements to help see what each bit is doing. Hopefully this helps.</span>
<span class="comment-copy">who is marking this down without comments? Not helpful to anyone (please).</span>
