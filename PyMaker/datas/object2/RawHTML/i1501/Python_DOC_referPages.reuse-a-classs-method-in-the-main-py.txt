<div class="post-text" itemprop="text">
<p>I've searched a lot about how to reuse a method from a class in the main.py file. i got some similar and basic solutions but in my case is a bit different.</p>
<p><strong>/lib/module.py</strong></p>
<pre><code>class Myclass:
    def __init__(self, x):
        self.thisX = x

    def check(self):
        if self.thisX == 2:
            print("this is fine. going to print it")
            self.printing()

    # this method will use in this class and must use from the main.py
    # the parameter "z" is gonna use only when the method will call from main.py
    def printing(self, z):
        if z == 1 :
            print("we got ", z)
        else:
            print(self.x)
</code></pre>
<p><strong>/main.py</strong></p>
<pre><code>from lib.module import Myclass

# this is how i use the check() method once in my main.py
Myclass(2).check()

# the Myclass() gets "2" only once at the beginning of the program...
# i don't wanna pass "2" to the Myclass() everytime that i wanna use the printing() method...
c = Myclass()
c.printing(1)
</code></pre>
<p><strong>error</strong></p>
<pre><code>TypeError: __init__() missing 1 required positional argument: 'x'
</code></pre>
<p><strong>testing</strong>:</p>
<p>if i don't use the def <strong>init</strong>(), everything will be fine. but the problem is i need to keep it</p>
</div>
<div class="post-text" itemprop="text">
<p>This line in <strong>main.py</strong>:</p>
<pre><code>c = Myclass()
</code></pre>
<p>Calls this function:</p>
<pre><code>class Myclass:
    def __init__(self, x):
        self.thisX = x
</code></pre>
<p>Every time you create an instance of Myclass it will call the <code>__init__()</code> function. You declared it to take 2 arguments: <code>self</code> and <code>x</code>. <code>self</code> is always passed implicitly because it's a class, but you need to give it an argument 'x'.</p>
<p>So you can change <strong>main.py</strong> to this for example:</p>
<pre><code>c = Myclass(2) # here x = 2
c.printing(1)
</code></pre>
<p>Please read <a href="https://docs.python.org/3/tutorial/classes.html" rel="nofollow noreferrer">this for more information</a></p>
<p>Also, in general, class names are written in CapWords style so <a href="https://www.python.org/dev/peps/pep-0008/#class-names" rel="nofollow noreferrer">it's a good idea</a> to call your class <code>MyClass</code> instead of <code>Myclass</code></p>
<p><strong>Edit:</strong></p>
<p>Since you don't want to pass <code>x</code> to <code>__init__()</code> and you want to set <code>x</code> from <strong>main.py</strong> you can try something like this:</p>
<pre><code>class Myclass:
  x = 0
  def check(self):
    if self.x == 2:
      print("x is 2")
</code></pre>
<p>from <strong>main.py</strong> you can do:</p>
<pre><code>Myclass.x = 2; #this only needs to be done once
Myclass().check()
</code></pre>
<p>Output:</p>
<pre><code>x is 2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think @richflow 's answer hit the point. If some variable is to be shared by all instances of a class, it's logical to assign its value using <code>Myclass.x = new_number</code>. Then all instances of this class will know the change. 
If you really want to optionally change x in the <code>__init__</code>  method of an instance, you can still do it. Combining with @richflow's codes, it can look like the following.</p>
<pre><code>class Myclass:
      x = 0
      def __init__(self, x=None):
        if x is not None:
          Myclass.x = x
          # other codes for initializiing the instance

      def check(self):
        if Myclass.x == 2:
          print("this is fine. going to print it")

      def printing(self, z=0):
            if z == 1 :
                print("we got ", z)
            else:
                print(Myclass.x)
</code></pre>
<p>I tried not to change too much from your codes. Your <code>main.py</code> should work correctly with this class definition. However, the design looks a bit weird to me. Probably that's because I didn't understand clearly what the <code>check</code> and <code>printing</code> methods are really doing, and what the argument <code>z</code> is really doing in <code>printing</code> methods. If you provides more insights, probably people can help you with a better design.</p>
</div>
<span class="comment-copy">you have declared your initializer to take an argument 'x' but you don't pass any argument to it. in main.py you can change c = Myclass() to c = Myclass(2)</span>
<span class="comment-copy">You should put that as the answer.</span>
<span class="comment-copy">i've edited the question with some comments. pls take a look.  I found the similar answer but my im trying to ask how can i reuse my method without adding "2" everytime to the Myclass().</span>
<span class="comment-copy">@ardi then instead of passing '2' to __init__() you can assign it inside of the function: self.thisX = 2</span>
<span class="comment-copy">the value of "2" comes from the main.py. im not able to assign it manually into the __init__().  i was thinking about other ways to share the x variable in the Myclass() .  if i can share the x value in another way in Myclass(), i can just delete the __init__() so i won't have the problem... ! (just my thoughts)</span>
<span class="comment-copy">updated answer in response</span>
