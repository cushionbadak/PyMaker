<div class="post-text" itemprop="text">
<p>I have a list of data that looks something like this:</p>
<pre><code>[
    (
        1,
        u'python -c \'print("ok")\'',
        u'data',
        u'python'
    ), (
        2,
        u'python -c \'print("this is some data")\'',
        u'data',
        u'python'
    )
]
</code></pre>
<p>This data is taken out of a database and displayed as this, and is continuously growing. What I would like to do is display the data like this:</p>
<pre><code>Language  |  Type  |   Payload
-------------------------------
 python   |  data  |  python -c 'print("ok")'
 python   |  data  |  python -c 'print("this is some data")'
</code></pre>
<p>I have a function that kinda does the same thing, but it's not exactly as expected:</p>
<pre><code>def print_table(data, cols, width):
    n, r = divmod(len(data), cols)
    pattern = "{{:{}}}".format(width)
    line = "\n".join(pattern * cols for _ in range(n))
    last_line = pattern * r
    print(line.format(*data))
    print(last_line.format(*data[n*cols]))
</code></pre>
<p>How can I get the output of my data to look as wanted? From the answers it's possible with <code>pandas</code> but I would also like a way to do it without installing external modules</p>
</div>
<div class="post-text" itemprop="text">
<p>Analyze the data for its max-width and use string formatting - some 'creative' formatting later:</p>
<pre><code>data = [
    (
        1,
        u'python -c \'print("ok")\'',
        u'data',
        u'python'
    ), (
        2,
        u'python -c \'print("this is some data")\'',
        u'data',
        u'python'
    )
]



def print_table(data):
    widths = {0:0, 3:len("Language"),2:len("Type"),1:len("Payload")}
    for k in data:
        for i,d in enumerate(k): 
            widths[i] = max(widths[i],len(str(d))) 
    # print(widths)

    lan, typ, pay = ["Language","Type","Payload"]
    print(f"{lan:&lt;{widths[3]}}  |  {typ:&lt;{widths[2]}}  |  {pay:&lt;{widths[1]}}")
    # adjust by 10 for '  |  ' twice
    print("-" * (widths[1]+widths[2]+widths[3]+10)) 
    for k in data:
        _, pay, typ, lan = k
        print(f"{lan:&lt;{widths[3]}}  |  {typ:&lt;{widths[2]}}  |  {pay:&lt;{widths[1]}}") 
</code></pre>
<p>Output:</p>
<pre><code>Language  |  Type  |  Payload                               
------------------------------------------------------------
python    |  data  |  python -c 'print("ok")'               
python    |  data  |  python -c 'print("this is some data")'
</code></pre>
<ul>
<li><a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">string format mini language</a></li>
</ul>
<hr/>
<p>Equivalent Python 2.7 code:</p>
<pre><code># w == widths - would break 79 chars/line else wise
def print_table(data):
    w = {0:0, 3:len("Language"),2:len("Type"),1:len("Payload")}
    for k in data:
        for i,d in enumerate(k): 
            w[i] = max(w[i],len(str(d))) 


    lan, typ, pay = ["Language","Type","Payload"]
    print "{:&lt;{}}  |  {:&lt;{}}  |  {:&lt;{}}".format(lan, w[3], typ, w[2], pay, w[1])   
    print "-" * (w[1]+w[2]+w[3]+10) 
    for k in data:
        _, pay, typ, lan = k
        print "{:&lt;{}}  |  {:&lt;{}}  |  {:&lt;{}}".format(lan, w[3], typ, w[2], pay, w[1]) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>pandas</code> for that:</p>
<pre><code>import pandas as pd
data = pd.DataFrame(a, columns=['id','Payload', 'type', 'Language'])
print(data)
</code></pre>
<p>gives you:</p>
<pre><code>   id                                 Payload  type Language
0   1                 python -c 'print("ok")'  data   python
1   2  python -c 'print("this is some data")'  data   python
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Solution that handles any number of columns:</p>
<pre><code>from operator import itemgetter

data = [
    ('ID', 'Payload', 'Type', 'Language'),
    (1, u'python -c \'print("ok")\'', u'data', u'python'),
    (2, u'python -c \'print("this is some data")\'', u'data', u'python')
]


def print_table(data):
    lengths = [
        [len(str(x)) for x in row]
        for row in data
    ]

    max_lengths = [
        max(map(itemgetter(x), lengths))
        for x in range(0, len(data[0]))
    ]

    format_str = ''.join(map(lambda x: '%%-%ss | ' % x, max_lengths))

    print(format_str % data[0])
    print('-' * (sum(max_lengths) + len(max_lengths) * 3 - 1))

    for x in data[1:]:
        print(format_str % x)

print_table(data)
</code></pre>
<p>Output:</p>
<pre><code>$ python table.py
ID | Payload                                | Type | Language |
---------------------------------------------------------------
1  | python -c 'print("ok")'                | data | python   |
2  | python -c 'print("this is some data")' | data | python   |
</code></pre>
</div>
<span class="comment-copy">Is there a way to do this and be compatible with both 2.x and 3+? 2.x doesn't support the <code>f""</code></span>
<span class="comment-copy">@13aal you can convert the <code>f'strings'</code> into normal <code>.format()</code> syntax - see edit - sorry for not seeing the python 2.7 tag - python2 does not use print() as function though - so its not compatible this way - you might want to import print from future: <a href="https://stackoverflow.com/questions/32032697/how-to-use-from-future-import-print-function">how-to-use-from-future-import-print-function</a></span>
<span class="comment-copy">All good, thank you it worked perfectly</span>
<span class="comment-copy">Is there a way to do it without installing another lib?</span>
<span class="comment-copy">I'm sorry i should of said that to begin with</span>
