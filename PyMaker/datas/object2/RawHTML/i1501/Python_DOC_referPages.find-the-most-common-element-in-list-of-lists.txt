<div class="post-text" itemprop="text">
<p>This is my list</p>
<pre><code>a=[ ['a','b','a','a'],
    ['c','c','c','d','d','d']]
</code></pre>
<p>I wanna find most common elemments.
I have tried this </p>
<pre><code>from collections import Counter
words = ['hello', 'hell', 'owl', 'hello', 'world', 'war', 'hello', 
         'war','aa','aa','aa','aa']

counter_obj = Counter(words)

counter_obj.most_common() 
</code></pre>
<p>but it works just for simple list.
my output should be like this</p>
<pre><code>[('a', 3), ('c', 3), ('d', 3), ('b', 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Apply the Counter update option on the elements of your list,
Based on the suggestion from @BlueSheepToken</p>
<pre><code>from collections import Counter
words=[['a','b','a','a'],['c','c','c','d','d','d']]
counter=Counter(a[0])
for i in words[1:]: counter.update(i)

counter.most_common()
</code></pre>
<p>output:</p>
<pre><code>[('a', 3), ('c', 3), ('d', 3), ('b', 1)]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<h3><a href="https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a></h3>
<p><code>collections.Counter</code> accepts any iterable of hashable elements. So you can chain your list of lists via <code>itertools.chain</code>. The benefit of this solution is it works for any number of sublists.</p>
<pre><code>from collections import Counter
from itertools import chain

counter_obj = Counter(chain.from_iterable(a))

print(counter_obj.most_common())

[('a', 3), ('c', 3), ('d', 3), ('b', 1)]
</code></pre>
</div>
<span class="comment-copy">So, what is the expected output for <code>a=[['a','b','a','a'],['c','c','c','d','d','d']]</code>?</span>
<span class="comment-copy">In your list "a" what do you want to find as most common? the inner elements like 'a' or 'c' or the list elements of the outer list, like ['a', 'a', 'a', 'b']?</span>
<span class="comment-copy">the output not correct.</span>
<span class="comment-copy">@aaaa you havn't told us what is the correct output for this example</span>
<span class="comment-copy">Can you try now?</span>
<span class="comment-copy">For performance, you should avoid using the <code>extend</code> method but you should use the <code>update</code> method from the <code>Counter</code> class</span>
<span class="comment-copy">For performance, you should avoid an explicit <code>for</code> loop altogether. You can chain lists lazily and feed an iterable of lists to <code>Couter</code>.</span>
