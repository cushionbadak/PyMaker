<div class="post-text" itemprop="text">
<p>I'm trying to understand the <strong>write()</strong> and <strong>read()</strong> methods of <strong>io.BytesIO</strong>.
My understanding was that I could use the <strong>io.BytesIO</strong> as I would use a File 
object.</p>
<pre><code>import io
in_memory = io.BytesIO(b'hello')
print( in_memory.read() )
</code></pre>
<p>The above code will return <em>b'hello'</em> as expected, but the code below will return an empty string <em>b''</em>.</p>
<pre><code>import io
in_memory = io.BytesIO(b'hello')
in_memory.write(b' world')
print( in_memory.read() )
</code></pre>
<p>My questions are:</p>
<p>-What is <code>io.BytesIO.write(b' world')</code> doing exactly?</p>
<p>-What is the difference between <strong>io.BytesIO.read()</strong> and <strong>io.BytesIO.getvalue()</strong>?</p>
<p>I assume that the answer is related to <strong>io.BytesIO</strong> being a stream object, but the big picture is not clear to me.</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue is that you are positioned at the end of the stream. Think of the position like a cursor. Once you have written <code>b' world'</code>, your cursor is at the end of the stream. When you try to <code>.read()</code>, you are reading everything after the position of the cursor - which is nothing, so you get the empty bytestring.</p>
<p>To navigate around the stream you can use the <code>.seek</code> method:</p>
<pre><code>&gt;&gt;&gt; import io
&gt;&gt;&gt; in_memory = io.BytesIO(b'hello', )
&gt;&gt;&gt; in_memory.write(b' world')
&gt;&gt;&gt; in_memory.seek(0)  # go to the start of the stream
&gt;&gt;&gt; print(in_memory.read())
b' world'
</code></pre>
<p>Note that, just like a filestream in <code>write</code> (<code>'w'</code>) mode, the initial bytes <code>b'hello'</code> have been overwritten by your writing of <code>b' world'</code>.</p>
<p><code>.getvalue()</code> just returns the entire contents of the stream regardless of current position.</p>
</div>
<div class="post-text" itemprop="text">
<p>this is a memory stream but still a stream. The position is stored, so like any other stream if you try to read after having written, you have to re-position:</p>
<pre><code>import io
in_memory = io.BytesIO(b'hello')
in_memory.seek(0,2)   # seek to end, else we overwrite
in_memory.write(b' world')
in_memory.seek(0)    # seek to start
print( in_memory.read() )
</code></pre>
<p>prints:</p>
<pre><code>b'hello world'
</code></pre>
<p>while <code>in_memory.getvalue()</code> doesn't need the final <code>seek(0)</code> as it returns the contents of the stream from position 0.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>BytesIO</code> does behave like a file, only one that you can both read and write. The confusing part, maybe, is that the reading and writing position is the same one. So first you do:</p>
<pre><code>in_memory = io.BytesIO(b'hello')
</code></pre>
<p>This gives you a bytes buffer in <code>in_memory</code> with the contents <code>b'hello'</code> and with the read/write position at the beginning (before the first <code>b'h'</code>). When you do:</p>
<pre><code>in_memory.write(b' world')
</code></pre>
<p>You are effectively overwriting <code>b'hello'</code> with <code>b' world'</code> (and actually getting one byte further), and now you have the position at the end (after the last <code>b'd'</code>). So when you do:</p>
<pre><code>print( in_memory.read() )
</code></pre>
<p>You see nothing because there is nothing to read <em>after</em> the current position. You can, however, use <a href="https://docs.python.org/3/library/io.html#io.IOBase.seek" rel="nofollow noreferrer"><code>seek</code></a> to move the position, so if you do</p>
<pre><code>import io
in_memory = io.BytesIO(b'hello')
in_memory.write(b' world')
in_memory.seek(0)
print( in_memory.read() )
</code></pre>
<p>You get:</p>
<pre class="lang-none prettyprint-override"><code>b' world'
</code></pre>
<p>Note that you do not see the initial <code>b'hello'</code> because it was overwritten. If you want to write <em>after</em> the initial content, you can first seek to the end:</p>
<pre><code>import io
in_memory = io.BytesIO(b'hello')
in_memory.seek(0, 2)
in_memory.write(b' world')
in_memory.seek(0)
print( in_memory.read() )
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>b'hello world'
</code></pre>
<p>EDIT: About <a href="https://docs.python.org/3/library/io.html#io.BytesIO.getvalue" rel="nofollow noreferrer"><code>getvalue</code></a>, as pointed out by other answers, it gives you the full internal buffer, independently of the current position. This operation is obviously not available for files.</p>
</div>
