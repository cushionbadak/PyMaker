<div class="post-text" itemprop="text">
<p>f-strings don't behave nicely when used with dictionaries, as mentioned <a href="https://realpython.com/python-f-strings/#dictionaries" rel="nofollow noreferrer">here</a>.</p>
<p>Here is an example of the not-so-nice behavior:</p>
<pre><code>d = {'foo': 'bar'}

# Both work as expected
d["foo"]
d['foo']

# This only works when different quotations are used in the inner and outer strings
f'{d["foo"]}'
f"{d['foo']}"

# This doesn't work
f'{d['foo']}'
f"{d["foo"]}"

# The .format() method doesn't care
'{}'.format(d['foo'])
</code></pre>
<p>The last two f-strings listed result in a <code>SyntaxError: invalid syntax</code>, which happens because the string <code>'{d['foo']}'</code> is evaluated as <code>'{d['</code>foo<code>']}'</code>. </p>
<p>What is the underlying reason everything inside the curly brackets of f-strings doesn't get evaluated separately, as when using the old <code>.format()</code> method, and what could possibly be the reason for implementing f-strings in this way?</p>
<p>I love f-strings, but this seems like a point in favor of the old method. </p>
</div>
<div class="post-text" itemprop="text">
<p>One <a href="https://stackoverflow.com/questions/9050355/using-quotation-marks-inside-quotation-marks">traditional way</a> of including quotes within quotes is to use a backslash. But <a href="https://www.python.org/dev/peps/pep-0498/#escape-sequences" rel="nofollow noreferrer">PEP498</a> forbids backslashes in expressions within f-strings:</p>
<blockquote>
<p>Backslashes may not appear inside the expression portions of
  f-strings...You can <strong>use a different type</strong> of quote inside the expression...</p>
</blockquote>
<p>Therefore, the only way left to access a dictionary value given a key in an f-string expression is to use a different type quote. Using single quotes, or double quotes, everywhere is ambiguous and gives <code>SyntaxError</code>.</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="nofollow noreferrer"><code>str.format</code></a> is a regular method, and as such works differently: <code>d['foo']</code> is evaluated <strong>before</strong> the string is constructed. Just like when you feed arguments to a function, the arguments are evaluated before the function does anything.</p>
</div>
<div class="post-text" itemprop="text">
<p>This has nothing to do with <code>f</code>-strings. <code>f</code> strings are common strings once evaluated. What you are trying would be a problem with standard strings too</p>
<p>The problem is that </p>
<pre><code>'a "b" c' 
</code></pre>
<p>is declares the literal <code>a "b" c</code></p>
<p>while </p>
<pre><code>'a 'b' c'
</code></pre>
<p>the quotes close and reopen. So, it is equivalent to string <code>a</code>, followed by variable <code>b</code>, followed by string <code>c</code>.</p>
<p>That's the whole reason python supports both types of quotation marks</p>
</div>
<span class="comment-copy">How would you mark the end of the string if <code>'</code> didn't mean <code>'</code>?</span>
<span class="comment-copy">See answer here <a href="https://stackoverflow.com/questions/4630465/how-to-include-a-quote-in-a-raw-python-string" title="how to include a quote in a raw python string">stackoverflow.com/questions/4630465/â€¦</a></span>
