<div class="post-text" itemprop="text">
<p>There's not a lot of detailed information online about making type annotations work with <code>__round__</code>. I have implemented this but I still get an error on line 16 (calling <code>round</code> without an <code>ndigits</code> argument) when I run mypy: </p>
<blockquote>
<p>error: Incompatible types in assignment (expression has type "int", variable has type "MyClass")</p>
</blockquote>
<p>The test passes, i.e. in both calls to <code>round</code> I get back an object of type <code>MyClass</code>. But the MyPy check fails only when I call <code>round</code> without an argument.</p>
<p>Version numbers: Python 3.6.5, mypy 0.641.</p>
<pre><code>from typing import Any, SupportsRound, overload

class MyClass(SupportsRound['MyClass']):

    def __round__(self: 'MyClass', ndigits: int = 0) -&gt; 'MyClass':
        return self


def test_tmp() -&gt; None:
    x = MyClass()
    result: MyClass

    result = round(x, 0)
    assert type(result) == MyClass
    result = round(x)
    assert type(result) == MyClass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe the problem here has less to do with your use of <code>SupportsRound</code> and more to do with the definition of the <code>round</code> function. The <code>round</code> function is defined in typeshed, the repository of type hints for the standard library, to have <a href="https://github.com/python/typeshed/blob/master/stdlib/3/builtins.pyi#L914" rel="nofollow noreferrer">the following signature</a>:</p>
<pre><code>@overload
def round(number: float) -&gt; int: ...
@overload
def round(number: float, ndigits: None) -&gt; int: ...
@overload
def round(number: float, ndigits: int) -&gt; float: ...
@overload
def round(number: SupportsRound[_T]) -&gt; int: ...
@overload
def round(number: SupportsRound[_T], ndigits: None) -&gt; int: ...  # type: ignore
@overload
def round(number: SupportsRound[_T], ndigits: int) -&gt; _T: ...
</code></pre>
<p>Note that when only one argument is provided or <code>ndigits</code> is None, the output is always <code>int</code>. This is consistent with the documented behavior of the <code>round</code> function in the standard library: <a href="https://docs.python.org/3/library/functions.html#round" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html#round</a></p>
<p>Unfortunately, I don't see a really clean way of working around this: I don't think the <a href="https://github.com/python/typeshed/blob/master/stdlib/3/typing.pyi#L97" rel="nofollow noreferrer">implementation of SupportsRound</a> is really consistent with this behavior.</p>
<p>Specifically, SupportsRound probably ought to have been defined to be something like so:</p>
<pre><code>@runtime
class SupportsRound(Protocol[_T_co]):
    @abstractmethod
    @overload
    def __round__(self, ndigits: None = None) -&gt; int: ...

    @abstractmethod
    @overload
    def __round__(self, ndigits: int) -&gt; _T_co: ...
</code></pre>
<p>Basically, force the user to handle these two cases.</p>
<p>Actually changing the definition would probably be complicated though: there isn't really a clean way of updating any older versions of Python that come bundled with older versions of the typing module.</p>
<p>I would recommend filing an issue about this on the typeshed issue tracker. I personally think you've discovered a genuine inconsistency/bug here, but there's possibly some nuance here that I'm missing, so I think it would be good to escalate this.</p>
</div>
<span class="comment-copy">Thanks. I have filed <a href="https://github.com/python/typeshed/issues/2638" rel="nofollow noreferrer">github.com/python/typeshed/issues/2638</a></span>
