<div class="post-text" itemprop="text">
<p>I have a program written in C that will create a WCHAR (UTF-16) and send it to a python script. It will receive it as:</p>
<pre><code>'63006400630064006300640063006400'
</code></pre>
<p>I want to print it out as:</p>
<pre><code>cdcdcdcd
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Essentially here you want to first decode a base-16 encoded byte string to a byte string, and then to decode it from UTF-16 LE.</p>
<p>Fortunately, all this stuff is already provided by the standard library, so this is essentially a one-liner:</p>
<pre><code>def decode_base16_UTF16(s):
    import base64
    return base64.b16decode(s, True).decode('UTF-16LE')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I can't vouch for the performance of doing it this way but you can get a bytes object from a string of hex like so:</p>
<pre><code>data = bytes.fromhex("63006400630064006300640063006400")
</code></pre>
<p>From there you can decode it as usual:</p>
<pre><code>my_string = data.decode("utf-16le")
</code></pre>
<p>Here's the reference for fromhex: <a href="https://docs.python.org/3/library/stdtypes.html#bytes.fromhex" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#bytes.fromhex</a> (there's a fromhex class method for a number of the basic data types actually).</p>
</div>
