<div class="post-text" itemprop="text">
<p>I need help for my code which I am currently making. This is one line of my code:</p>
<pre><code>subjects = ["o",0,"r",0,"w",0,"c",0,"chi",0]
</code></pre>
<p>this is my code for choosing your desired choice. Which o stands for orange, r is radish, w is wasabi, c is chips and cho stands for chocolate. I want to allow the user to choose their desired choice and when they type in for example o, the orange counter should go up by 1. I'm just unsure how it should work.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>The list-based data structure you are using is called a <em>property list</em> (or "plist"). It associates a key with a value. These are common in Lisp, but Python usually uses a dict for that. Dicts are based on hashtables, which are faster than scanning a list, especially if it is long. Plists do have certain advantages, but they mostly don't apply to Python. It's still worth knowing how they work though.</p>
<p>Here's some examples of how to increment the value given a key in a plist.</p>
<pre><code>&gt;&gt;&gt; subjects = ["o",0,"r",0,"w",0,"c",0,"chi",0]
&gt;&gt;&gt; subjects[subjects.index("w") + 1] += 1
&gt;&gt;&gt; subjects
['o', 0, 'r', 0, 'w', 1, 'c', 0, 'chi', 0]
&gt;&gt;&gt; subjects[subjects.index("chi") + 1] += 1
&gt;&gt;&gt; subjects
['o', 0, 'r', 0, 'w', 1, 'c', 0, 'chi', 1]
</code></pre>
<p>The <code>.index()</code> method finds the index of the first element in the list equal to its argument. The value follows that, so <code>+ 1</code>. You use just that part to look the value up.</p>
<pre><code>&gt;&gt;&gt; subjects[subjects.index("chi") + 1] += 2
&gt;&gt;&gt; subjects
['o', 0, 'r', 0, 'w', 1, 'c', 0, 'chi', 3]
&gt;&gt;&gt; subjects[subjects.index("chi") + 1]
3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider using a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary</a>. The basic layout would follow a similar structure to below, where you could iterate through multiple user choices and do the same <code>if/else</code></p>
<pre><code>dict = {}

choice = input("What is your choice? ")

if choice in dict:
    dict[choice] += 1
else:
    dict[choice] = 1

print(dict)
&gt; {'orange': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dictionary is well suited.</p>
<pre><code>subjects = {
    "o": 0,
    "r": 0,
    "w": 0,
    "c": 0,
    "chi": 0
}

while True:
    choice = input("Enter your choice: ")

    if choice not in subjects.keys():
        print("Valid choices are: {}".format(",".join(subjects.keys())))
        continue

    subjects[choice] += 1
    print(subjects)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Consider using <code>collections.Counter</code> for counting objects.</p>
<pre><code>from collections import Counter

subjects = Counter()
while True:
    subjects[input()] += 1
    print(subjects)
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">This problem is perfectly suited for a dictionary.</a></span>
<span class="comment-copy">The question doesn't appear to include any attempt at all to solve the problem. StackOverflow expects you to <a href="https://meta.stackoverflow.com/questions/261592/how-much-research-effort-is-expected-of-stack-overflow-users">try to solve your own problem first</a>, as your attempts help us to better understand what you want. Please edit the question to show what you've tried, and show a specific roadblock you're running into with <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. For more information, please see <a href="https://stackoverflow.com/help/how-to-ask">How to Ask</a>.</span>
