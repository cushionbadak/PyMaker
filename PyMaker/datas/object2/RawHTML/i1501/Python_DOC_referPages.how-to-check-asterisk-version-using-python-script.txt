<div class="post-text" itemprop="text">
<p>I want to write a function that will execute a shell command and return its output <strong>as a string</strong>, no matter, is it an error or success message. I just want to get the same result that I would have gotten with the command line.</p>
<p>What would be a code example that would do such a thing?</p>
<p>For example:</p>
<pre><code>def run_command(cmd):
    # ??????

print run_command('mysqladmin create test -uroot -pmysqladmin12')
# Should output something like:
# mysqladmin: CREATE DATABASE failed; error: 'Can't create database 'test'; database exists'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The answer to this question depends on the version of Python you're using. The simplest approach is to use the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="noreferrer"><code>subprocess.check_output</code></a> function:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output(['ls', '-l'])
b'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p><code>check_output</code> runs a single program that takes only arguments as input.<sup>1</sup> It returns the result exactly as printed to <code>stdout</code>. If you need to write input to <code>stdin</code>, skip ahead to the <code>run</code> or <code>Popen</code> sections. If you want to execute complex shell commands, see the note on <code>shell=True</code> at the end of this answer.</p>
<p>The <code>check_output</code> function works on almost all versions of Python still in wide use (2.7+).<sup>2</sup> But for more recent versions, it is no longer the recommended approach.</p>
<h3>Modern versions of Python (3.5 or higher): <code>run</code></h3>
<p>If you're using <strong>Python 3.5</strong> or higher, and <strong>do not need backwards compatibility</strong>, the <a href="https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module" rel="noreferrer">new <code>run</code> function</a> is recommended. It provides a very general, high-level API for the <code>subprocess</code> module. To capture the output of a program, pass the <code>subprocess.PIPE</code> flag to the <code>stdout</code> keyword argument. Then access the <code>stdout</code> attribute of the returned <a href="https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess" rel="noreferrer"><code>CompletedProcess</code></a> object:</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; result = subprocess.run(['ls', '-l'], stdout=subprocess.PIPE)
&gt;&gt;&gt; result.stdout
b'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>The return value is a <code>bytes</code> object, so if you want a proper string, you'll need to <code>decode</code> it. Assuming the called process returns a UTF-8-encoded string:</p>
<pre><code>&gt;&gt;&gt; result.stdout.decode('utf-8')
'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>This can all be compressed to a one-liner:</p>
<pre><code>&gt;&gt;&gt; subprocess.run(['ls', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')
'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>If you want to pass input to the process's <code>stdin</code>, pass a <code>bytes</code> object to the <code>input</code> keyword argument:</p>
<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']
&gt;&gt;&gt; input = 'foo\nfoofoo\n'.encode('utf-8')
&gt;&gt;&gt; result = subprocess.run(cmd, stdout=subprocess.PIPE, input=input)
&gt;&gt;&gt; result.stdout.decode('utf-8')
'foofoo\n'
</code></pre>
<p>You can capture errors by passing <code>stderr=subprocess.PIPE</code> (capture to <code>result.stderr</code>) or <code>stderr=subprocess.STDOUT</code> (capture to <code>result.stdout</code> along with regular output). When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described in the notes below.</p>
<p>This adds just a bit of complexity, compared to the old way of doing things. But I think it's worth the payoff: now you can do almost anything you need to do with the <code>run</code> function alone.</p>
<h3>Older versions of Python (2.7-3.4): <code>check_output</code></h3>
<p>If you are using an older version of Python, or need modest backwards compatibility, you can probably use the <code>check_output</code> function as briefly described above. It has been available since Python 2.7.</p>
<pre><code>subprocess.check_output(*popenargs, **kwargs)  
</code></pre>
<p>It takes takes the same arguments as <code>Popen</code> (see below), and returns a string containing the program's output. The beginning of this answer has a more detailed usage example. </p>
<p>You can pass <code>stderr=subprocess.STDOUT</code> to ensure that error messages are included in the returned output -- but don't pass <code>stderr=subprocess.PIPE</code> to <code>check_output</code>. It can cause <a href="http://docs.python.org/library/subprocess.html#subprocess.check_output" rel="noreferrer">deadlocks</a>. When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described in the notes below.</p>
<p>If you need to pipe from <code>stderr</code> or pass input to the process, <code>check_output</code> won't be up to the task. See the <code>Popen</code> examples below in that case. </p>
<h3>Complex applications &amp; legacy versions of Python (2.6 and below): <code>Popen</code></h3>
<p>If you need deep backwards compatibility, or if you need more sophisticated functionality than <code>check_output</code> provides, you'll have to work directly with <code>Popen</code> objects, which encapsulate the low-level API for subprocesses. </p>
<p>The <code>Popen</code> constructor accepts either <strong>a single command</strong> without arguments, or <strong>a list</strong> containing a command as its first item, followed by any number of arguments, each as a separate item in the list. <a href="https://docs.python.org/3/library/shlex.html" rel="noreferrer"><code>shlex.split</code></a> can help parse strings into appropriately formatted lists. <code>Popen</code> objects also accept a <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="noreferrer">host of different arguments</a> for process IO management and low-level configuration. </p>
<p>To send input and capture output, <code>communicate</code> is almost always the preferred method. As in:</p>
<pre><code>output = subprocess.Popen(["mycmd", "myarg"], 
                          stdout=subprocess.PIPE).communicate()[0]
</code></pre>
<p>Or </p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; p = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, 
...                                    stderr=subprocess.PIPE)
&gt;&gt;&gt; out, err = p.communicate()
&gt;&gt;&gt; print out
.
..
foo
</code></pre>
<p>If you set <code>stdin=PIPE</code>, <code>communicate</code> also allows you to pass data to the process via <code>stdin</code>:</p>
<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']
&gt;&gt;&gt; p = subprocess.Popen(cmd, stdout=subprocess.PIPE,
...                           stderr=subprocess.PIPE,
...                           stdin=subprocess.PIPE)
&gt;&gt;&gt; out, err = p.communicate('foo\nfoofoo\n')
&gt;&gt;&gt; print out
foofoo
</code></pre>
<p>Note <a href="https://stackoverflow.com/a/21867841/577088">Aaron Hall's answer</a>, which indicates that on some systems, you may need to set <code>stdout</code>, <code>stderr</code>, and <code>stdin</code> all to <code>PIPE</code> (or <code>DEVNULL</code>) to get <code>communicate</code> to work at all.</p>
<p>In some rare cases, you may need complex, real-time output capturing. <a href="https://stackoverflow.com/a/4760274/577088">Vartec</a>'s answer suggests a way forward, but methods other than <code>communicate</code> are prone to deadlocks if not used carefully.</p>
<p>As with all the above functions, when security is not a concern, you can run more complex shell commands by passing <code>shell=True</code>.</p>
<h3>Notes</h3>
<p><strong>1. Running shell commands: the <code>shell=True</code> argument</strong></p>
<p>Normally, each call to <code>run</code>, <code>check_output</code>, or the <code>Popen</code> constructor executes a <em>single program</em>. That means no fancy bash-style pipes. If you want to run complex shell commands, you can pass <code>shell=True</code>, which all three functions support.</p>
<p>However, doing so raises <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="noreferrer">security concerns</a>. If you're doing anything more than light scripting, you might be better off calling each process separately, and passing the output from each as an input to the next, via</p>
<pre><code>run(cmd, [stdout=etc...], input=other_output)
</code></pre>
<p>Or</p>
<pre><code>Popen(cmd, [stdout=etc...]).communicate(other_output)
</code></pre>
<p>The temptation to directly connect pipes is strong; resist it. Otherwise, you'll likely see deadlocks or have to do hacky things like <a href="https://stackoverflow.com/questions/6341451/piping-together-several-subprocesses">this</a>.</p>
<p><strong>2. Unicode considerations</strong></p>
<p><code>check_output</code> returns a string in Python 2, but a <code>bytes</code> object in Python 3. It's worth taking a moment to <a href="https://docs.python.org/3/howto/unicode.html" rel="noreferrer">learn about unicode</a> if you haven't already.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is way easier, but only works on Unix (including Cygwin).</p>
<pre><code>import commands
print commands.getstatusoutput('wc -l file')
</code></pre>
<p>it returns a tuple with the (return_value, output)</p>
<p>This only works in <code>python2.7</code>: it is not available on <code>python3</code>. For a solution that works in both, use the <code>subprocess</code> module instead:</p>
<pre><code>import subprocess
output=subprocess.Popen(["date"],stdout=PIPE)
response=output.communicate()
print response
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like that: </p>
<pre><code>def runProcess(exe):    
    p = subprocess.Popen(exe, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    while(True):
        # returns None while subprocess is running
        retcode = p.poll() 
        line = p.stdout.readline()
        yield line
        if retcode is not None:
            break
</code></pre>
<p>Note, that I'm redirecting stderr to stdout, it might not be exactly what you want, but I want error messages also.</p>
<p>This function <strong>yields line by line as they come</strong> (normally you'd have to wait for subprocess to finish to get the output as a whole).</p>
<p>For your case the usage would be:</p>
<pre><code>for line in runProcess('mysqladmin create test -uroot -pmysqladmin12'.split()):
    print line,
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://stackoverflow.com/a/4760274/577088">Vartec's</a> answer doesn't read all lines, so I made a version that did:</p>
<pre><code>def run_command(command):
    p = subprocess.Popen(command,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.STDOUT)
    return iter(p.stdout.readline, b'')
</code></pre>
<p>Usage is the same as the accepted answer:</p>
<pre><code>command = 'mysqladmin create test -uroot -pmysqladmin12'.split()
for line in run_command(command):
    print(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a <strong>tricky</strong> but <strong>super simple</strong> solution which works in many situations:</p>
<pre><code>import os
os.system('sample_cmd &gt; tmp')
print open('tmp', 'r').read()
</code></pre>
<p>A temporary file(here is tmp) is created with the output of the command and you can read from it your desired output.</p>
<p>Extra note from the comments:
You can remove the tmp file in the case of one-time job. If you need to do this several times, there is no need to delete the tmp.</p>
<pre><code>os.remove('tmp')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3.5:</p>
<pre><code>import subprocess

output = subprocess.run("ls -l", shell=True, stdout=subprocess.PIPE, 
                        universal_newlines=True)
print(output.stdout)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem
But figured out a very simple way of doing this
follow this</p>
<pre><code>import subprocess
output = subprocess.getoutput("ls -l")
print(output)
</code></pre>
<p>Hope it helps out</p>
<p>Note: This solution is python3 specific as <code>subprocess.getoutput()</code> don't work in python2</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use following commands to run any shell command. I have used them on ubuntu.</p>
<pre><code>import os
os.popen('your command here').read()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Modern Python solution (&gt;= 3.1): </p>
<pre><code> res = subprocess.check_output(lcmd, stderr=subprocess.STDOUT)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your Mileage May Vary, I attempted @senderle's spin on Vartec's solution in Windows on Python 2.6.5, but I was getting errors, and no other solutions worked. My error was: <code>WindowsError: [Error 6] The handle is invalid</code>. </p>
<p>I found that I had to assign PIPE to every handle to get it to return the output I expected - the following worked for me.</p>
<pre><code>import subprocess

def run_command(cmd):
    """given shell command, returns communication tuple of stdout and stderr"""
    return subprocess.Popen(cmd, 
                            stdout=subprocess.PIPE, 
                            stderr=subprocess.PIPE, 
                            stdin=subprocess.PIPE).communicate()
</code></pre>
<p>and call like this, (<code>[0]</code> gets the first element of the tuple, <code>stdout</code>):</p>
<pre><code>run_command('tracert 11.1.0.1')[0]
</code></pre>
<p>After learning more, I believe I need these pipe arguments because I'm working on a custom system that uses different handles, so I had to directly control all the std's.</p>
<p>To stop console popups (with Windows), do this:</p>
<pre><code>def run_command(cmd):
    """given shell command, returns communication tuple of stdout and stderr"""
    # instantiate a startupinfo obj:
    startupinfo = subprocess.STARTUPINFO()
    # set the use show window flag, might make conditional on being in Windows:
    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
    # pass as the startupinfo keyword argument:
    return subprocess.Popen(cmd,
                            stdout=subprocess.PIPE, 
                            stderr=subprocess.PIPE, 
                            stdin=subprocess.PIPE, 
                            startupinfo=startupinfo).communicate()

run_command('tracert 11.1.0.1')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>I had a slightly different flavor of the same problem with the following requirements:</strong></p>
<ol>
<li>Capture and return STDOUT messages as they accumulate in the STDOUT buffer (i.e. in realtime). 

<ul>
<li><em>@vartec solved this Pythonically with his use of generators and the 'yield'<br/>
keyword above</em></li>
</ul></li>
<li>Print all STDOUT lines (<em>even if process exits before STDOUT buffer can be fully read</em>)</li>
<li>Don't waste CPU cycles polling the process at high-frequency</li>
<li>Check the return code of the subprocess</li>
<li>Print STDERR (separate from STDOUT) if we get a non-zero error return code.</li>
</ol>
<p><strong>I've combined and tweaked previous answers to come up with the following:</strong></p>
<pre><code>import subprocess
from time import sleep

def run_command(command):
    p = subprocess.Popen(command,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE,
                         shell=True)
    # Read stdout from subprocess until the buffer is empty !
    for line in iter(p.stdout.readline, b''):
        if line: # Don't print blank lines
            yield line
    # This ensures the process has completed, AND sets the 'returncode' attr
    while p.poll() is None:                                                                                                                                        
        sleep(.1) #Don't waste CPU-cycles
    # Empty STDERR buffer
    err = p.stderr.read()
    if p.returncode != 0:
       # The run_command() function is responsible for logging STDERR 
       print("Error: " + str(err))
</code></pre>
<p><strong>This code would be executed the same as previous answers:</strong></p>
<pre><code>for line in run_command(cmd):
    print(line)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you need to run a shell command on multiple files, this did the trick for me.</p>
<pre><code>import os
import subprocess

# Define a function for running commands and capturing stdout line by line
# (Modified from Vartec's solution because it wasn't printing all lines)
def runProcess(exe):    
    p = subprocess.Popen(exe, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    return iter(p.stdout.readline, b'')

# Get all filenames in working directory
for filename in os.listdir('./'):
    # This command will be run on each file
    cmd = 'nm ' + filename

    # Run the command and capture the output line by line.
    for line in runProcess(cmd.split()):
        # Eliminate leading and trailing whitespace
        line.strip()
        # Split the output 
        output = line.split()

        # Filter the output and print relevant lines
        if len(output) &gt; 2:
            if ((output[2] == 'set_program_name')):
                print filename
                print line
</code></pre>
<p>Edit: Just saw Max Persson's solution with J.F. Sebastian's suggestion.  Went ahead and incorporated that.</p>
</div>
<div class="post-text" itemprop="text">
<p>Splitting the initial command for the <code>subprocess</code> might be tricky and cumbersome.</p>
<p>Use <code>shlex.split</code> to help yourself out.</p>
<p><strong>Sample command</strong></p>
<p><code>git log -n 5 --since "5 years ago" --until "2 year ago"</code></p>
<p><strong>The code</strong></p>
<pre><code>from subprocess import check_output
from shlex import split

res = check_output(split('git log -n 5 --since "5 years ago" --until "2 year ago"'))
print(res)
&gt;&gt;&gt; b'commit 7696ab087a163e084d6870bb4e5e4d4198bdc61a\nAuthor: Artur Barseghyan...'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>eg, execute('ls -ahl')
differentiated three/four possible returns and OS platforms:</p>
<ol>
<li>no output, but run successfully</li>
<li>output empty line, run successfully</li>
<li>run failed</li>
<li>output something, run successfully</li>
</ol>
<p>function below</p>
<pre><code>def execute(cmd, output=True, DEBUG_MODE=False):
"""Executes a bash command.
(cmd, output=True)
output: whether print shell output to screen, only affects screen display, does not affect returned values
return: ...regardless of output=True/False...
        returns shell output as a list with each elment is a line of string (whitespace stripped both sides) from output
        could be 
        [], ie, len()=0 --&gt; no output;    
        [''] --&gt; output empty line;     
        None --&gt; error occured, see below

        if error ocurs, returns None (ie, is None), print out the error message to screen
"""
if not DEBUG_MODE:
    print "Command: " + cmd

    # https://stackoverflow.com/a/40139101/2292993
    def _execute_cmd(cmd):
        if os.name == 'nt' or platform.system() == 'Windows':
            # set stdin, out, err all to PIPE to get results (other than None) after run the Popen() instance
            p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        else:
            # Use bash; the default is sh
            p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, executable="/bin/bash")

        # the Popen() instance starts running once instantiated (??)
        # additionally, communicate(), or poll() and wait process to terminate
        # communicate() accepts optional input as stdin to the pipe (requires setting stdin=subprocess.PIPE above), return out, err as tuple
        # if communicate(), the results are buffered in memory

        # Read stdout from subprocess until the buffer is empty !
        # if error occurs, the stdout is '', which means the below loop is essentially skipped
        # A prefix of 'b' or 'B' is ignored in Python 2; 
        # it indicates that the literal should become a bytes literal in Python 3 
        # (e.g. when code is automatically converted with 2to3).
        # return iter(p.stdout.readline, b'')
        for line in iter(p.stdout.readline, b''):
            # # Windows has \r\n, Unix has \n, Old mac has \r
            # if line not in ['','\n','\r','\r\n']: # Don't print blank lines
                yield line
        while p.poll() is None:                                                                                                                                        
            sleep(.1) #Don't waste CPU-cycles
        # Empty STDERR buffer
        err = p.stderr.read()
        if p.returncode != 0:
            # responsible for logging STDERR 
            print("Error: " + str(err))
            yield None

    out = []
    for line in _execute_cmd(cmd):
        # error did not occur earlier
        if line is not None:
            # trailing comma to avoid a newline (by print itself) being printed
            if output: print line,
            out.append(line.strip())
        else:
            # error occured earlier
            out = None
    return out
else:
    print "Simulation! The command is " + cmd
    print ""
</code></pre>
</div>
<span class="comment-copy">related: <a href="http://stackoverflow.com/questions/2924310/whats-a-good-equivalent-to-pythons-subprocess-check-call-that-returns-the-conte" title="whats a good equivalent to pythons subprocess check call that returns the conte">stackoverflow.com/questions/2924310/…</a></span>
<span class="comment-copy">Both with <code>check_output()</code> and <code>communicate()</code> you have to wait until the process is done, with <code>poll()</code> you're getting output as it comes. Really depends what you need.</span>
<span class="comment-copy">Not sure if this only applies to later versions of Python, but the variable <code>out</code> was of type <code>&lt;class 'bytes'&gt;</code> for me. In order to get the output as a string I had to decode it before printing like so: <code>out.decode("utf-8")</code></span>
<span class="comment-copy">@par That doesn't work for you when you pass <code>shell=True</code>? It works for me. You don't need <code>shlex.split</code> when you pass <code>shell=True</code>. <code>shlex.split</code> is for non-shell commands. I think I'm going to take that bit out because this is muddying the waters.</span>
<span class="comment-copy">I would say this is the canonical answer to the question of "How do I capture subprocess output and support Python 2.x / 3.x?". Certainly compared to the other answers on this question. Nicely done. My only suggestion would be to update the very last link to point to the current 3.6 Python docs for Unicode. If there is a better reference / blog post out there, please share it!</span>
<span class="comment-copy">@FistOfFury, I don't think they do. <code>call</code> can't capture the output, as requested here. <code>check_output</code> is the simplest way to go in Python 3.4, as described above.</span>
<span class="comment-copy">Deprecated now, but very useful for old python versions without subprocess.check_output</span>
<span class="comment-copy">Note that this is Unix-specific. It will for example fail on Windows.</span>
<span class="comment-copy">+1 I have to work on ancient version of python 2.4 and this was VERY helpful</span>
<span class="comment-copy">What is PIPE dude come on show the full code: subprocess.PIPE</span>
<span class="comment-copy">@KyleBridenstine you can edit answers.</span>
<span class="comment-copy">Thank you for your help! But function goes into an infinite loop for me...</span>
<span class="comment-copy">-1: it is an infinite loop the if <code>retcode</code> is <code>0</code>. The check should be <code>if retcode is not None</code>. You should not yield empty strings (even an empty line is at least one symbol '\n'): <code>if line: yield line</code>. Call <code>p.stdout.close()</code> at the end.</span>
<span class="comment-copy">I tried the code with ls -l /dirname and it breaks after listing two files while there are much more files in the directory</span>
<span class="comment-copy">@Vasilis: check <a href="http://stackoverflow.com/a/13135985/4279">similar answer</a></span>
<span class="comment-copy">@fuenfundachtzig: <code>.readlines()</code> won't return until <i>all</i> output is read and therefore it breaks for large output that does not fit in memory. Also to avoid missing buffered data after the subprocess exited there should be an analog of <code>if retcode is not None: yield from  p.stdout.readlines(); break</code></span>
<span class="comment-copy">you could use <code>return iter(p.stdout.readline, b'')</code> instead of the while loop</span>
<span class="comment-copy">That is a pretty cool use of iter, didn't know that! I updated the code.</span>
<span class="comment-copy">I'm pretty sure stdout keeps all output, it's a stream object with a buffer. I use a very similar technique to deplete all remaining output after a Popen have completed, and in my case, using poll() and readline during the execution to capture output live also.</span>
<span class="comment-copy">I've removed my misleading comment. I can confirm, <code>p.stdout.readline()</code> may return the non-empty previously-buffered output even if the child process have exited already (<code>p.poll()</code> is not <code>None</code>).</span>
<span class="comment-copy">This code doesn't work.  See here <a href="http://stackoverflow.com/questions/24340877/why-does-this-bash-call-from-python-not-work" title="why does this bash call from python not work">stackoverflow.com/questions/24340877/…</a></span>
<span class="comment-copy">Hacky but super simple + works anywhere .. can combine it with <code>mktemp</code> to make it work in threaded situations I guess</span>
<span class="comment-copy">Maybe the fastest method, but better add <code>os.remove('tmp')</code> to make it "fileless".</span>
<span class="comment-copy">@XuMuK You're right in the case of a one-time job. If it is a repetitive work maybe deleting is not necessary</span>
<span class="comment-copy">bad for concurrency, bad for reentrant functions, bad for not leaving the system as it was before it started ( no cleanup )</span>
<span class="comment-copy">@2mia Obviously it's easy for a reason! If you want to use the file as a kind of shared memory for concurrent reads and writes, this is not a good choice. But, for s.th. like having the output of a command (e.g. ls or find or ...) it can be a good and fast choice. B.t.w. if you need a fast solution for a simple problem it's the best I think. If you need a pipeline, subprocess works for you more efficient.</span>
<span class="comment-copy">It returns the output of command as string, as simple as that</span>
<span class="comment-copy">Doesn't work on Python 2</span>
<span class="comment-copy">Of course, print is a statement on Python 2. You should be able to figure out this is a Python 3 answer.</span>
<span class="comment-copy">@Dev print(s) is valid python 2. subprocess.getoutput is not.</span>
<span class="comment-copy">This should be at the top. I'm sure most people are like me and they're googling this because they just want to make a quick script in python instead of bash. <code>getoutput</code> solves the common case and should be the first result</span>
<span class="comment-copy">Deprecated since version 2.6 – <a href="https://docs.python.org/2/library/os.html#os.popen" rel="nofollow noreferrer">docs.python.org/2/library/os.html#os.popen</a></span>
<span class="comment-copy">@FilippoVitale Thanks. I did not know that it is deprecated.</span>
<span class="comment-copy">According to <a href="https://raspberrypi.stackexchange.com/questions/71547/is-there-a-problem-with-using-deprecated-os-popen" title="is there a problem with using deprecated os popen">raspberrypi.stackexchange.com/questions/71547/…</a> <code>os.popen()</code> is deprecated in Python 2.6, but it is <i>not</i> deprecated in Python 3.x, since in 3.x it is implemented using <code>subprocess.Popen()</code>.</span>
<span class="comment-copy">As <a href="http://stackoverflow.com/a/4760517/4279">the accepted answer says</a>, <code>check_output()</code> is available since Python 2.7.</span>
<span class="comment-copy">Interesting -- this must be a Windows thing. I'll add a note pointing to this in case people are getting similar errors.</span>
<span class="comment-copy">use <a href="http://stackoverflow.com/a/11270665/4279"><code>DEVNULL</code> instead</a> of <code>subprocess.PIPE</code> if you don't write/read from a pipe otherwise you may hang the child process.</span>
<span class="comment-copy">Sounds like a good tip, @J.F.Sebastian</span>
<span class="comment-copy">Do you mind explaining how the addition of sleep(.1) won't waste CPU cycles?</span>
<span class="comment-copy">If we continued to call <code>p.poll()</code> without any sleep in between calls, we would waste CPU cycles by calling this function millions of times. Instead, we "throttle" our loop by telling the OS that we don't need to be bothered for the next 1/10th second, so it can carry out other tasks. (It's possible that p.poll() sleeps too, making our sleep statement redundant).</span>
