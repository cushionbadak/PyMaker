<div class="post-text" itemprop="text">
<pre><code>s = 'ಆತಂಕವಾದಿಗಳಿಗೆ ವಿಶೇಷ ರಕ್ಷಣೆ ನೀಡುತ್ತದೆ, 24 ಕ್ಕೂ ಹೆಚ್ಚು ಹಿಂದೂ ಕಾರ್ಯಕರ್ತರ ಹತ್ಯೆಯಾದರೂ I am working on this'
words = re.findall(r'\w+',s)
print(words)
</code></pre>
<p>I expected the above code to return only english words, but i am getting something as below.</p>
<pre><code>['ಆತ', 'ಕವ', 'ದ', 'ಗಳ', 'ಗ', 'ವ', 'ಶ', 'ಷ', 'ರಕ', 'ಷಣ', 'ನ', 'ಡ', 'ತ', 'ತದ',
    '24', 'ಕ', 'ಕ', 'ಹ', 'ಚ', 'ಚ', 'ಹ', 'ದ', 'ಕ', 'ರ', 'ಯಕರ', 'ತರ', 'ಹತ', 'ಯ',
    'ಯ', 'ದರ', 'I', 'am', 'working', 'on', 'this']
</code></pre>
<p>Could someone explain how this is working?</p>
</div>
<div class="post-text" itemprop="text">
<p>I don't know why you expected <code>\w+</code> to only match English words. It doesn't even do that in ASCII mode. It matches any sequence of <code>\w</code> characters, and the <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs</a> describe the actual behavior of <code>\w</code>:</p>
<blockquote>
<p>For Unicode (str) patterns:<br/>
  Matches Unicode word characters; this includes <strong>most characters that can be part of a word in any language</strong>, as well as numbers and the underscore. If the ASCII flag is used, only [a-zA-Z0-9_] is matched.</p>
<p>For 8-bit (bytes) patterns:<br/>
  Matches characters considered alphanumeric in the ASCII character set; this is equivalent to [a-zA-Z0-9_]. If the LOCALE flag is used, matches characters considered alphanumeric in the current locale and the underscore.</p>
</blockquote>
<p>The docs unfortunately don't get any more specific than that, but <code>\w</code> definitely isn't restricted to English.</p>
<p>If you wanted <code>[a-zA-Z0-9_]</code>, you can write out your intended character class explicitly, or you can use the <code>re.ASCII</code> flag. If you wanted <code>[a-zA-Z]</code>, write that out explicitly.</p>
</div>
<div class="post-text" itemprop="text">
<p>I cannot reproduce your observations, <a href="https://rextester.com/KQWP73350" rel="nofollow noreferrer">see the demo</a>.  Perhaps there is some encoding issue on your end, which is why <code>\w</code> is picking up on Tamil characters.  But, one workaround you could use here would be to just explicitly spell out of what the character class <code>\w</code> actually consists:</p>
<pre><code>words = re.findall(r'[A-Za-z0-9_]+', s)
print(words)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>words = re.findall(r'\w+',s)
</code></pre>
<p>The reason <code>\w+</code> doesn't pick up what you want is that it's missing the Unicode flag. The other answers here ignore encoding by simply saying which specific letters they are looking for </p>
<blockquote>
<p><strong>\w</strong> </p>
<p><strong>When the LOCALE and UNICODE flags are not specified, matches any
  alphanumeric character and the underscore</strong>; this is equivalent to the
  set [a-zA-Z0-9_]. With LOCALE, it will match the set [0-9_] plus
  whatever characters are defined as alphanumeric for the current
  locale. If UNICODE is set, this will match the characters [0-9_] plus
  whatever is classified as alphanumeric in the Unicode character
  properties database.</p>
</blockquote>
<p>That is why.</p>
</div>
<div class="post-text" itemprop="text">
<p>Modify your code as given below to know why it is printing like that:</p>
<pre><code>s = u'ಆತಂಕವಾದಿಗಳಿಗೆ ವಿಶೇಷ ರಕ್ಷಣೆ ನೀಡುತ್ತದೆ, 24 ಕ್ಕೂ ಹೆಚ್ಚು ಹಿಂದೂ ಕಾರ್ಯಕರ್ತರ ಹತ್ಯೆಯಾದರೂ I am 
working on this'
words = re.findall(r'\w+',s)
print(words)


for letter in s:
    print(letter)
</code></pre>
<p>OUTPUT</p>
<pre><code>['ಆತ', 'ಕವ', 'ದ', 'ಗಳ', 'ಗ', 'ವ', 'ಶ', 'ಷ', 'ರಕ', 'ಷಣ', 'ನ', 'ಡ', 'ತ', 'ತದ', '24', 'ಕ', 'ಕ', 'ಹ', 'ಚ', 'ಚ', 'ಹ', 'ದ', 'ಕ', 'ರ', 'ಯಕರ', 'ತರ', 'ಹತ', 'ಯ', 'ಯ', 'ದರ', 'I', 'am', 'working', 'on', 'this']
ಆ
ತ
ಂ 
ಕ
ವ
ಾ  
ದ

ಗ
ಳ

ಗ


ವ

ಶ
ೇ
ಷ

ರ
ಕ

ಷ
ಣ


ನ
ೀ
ಡ
ು
ತ

ತ
ದ

,

2
4

ಕ

ಕ
ೂ

ಹ

ಚ

ಚ
ು

ಹ

ಂ
ದ
ೂ

ಕ
ಾ
ರ

ಯ
ಕ
ರ

ತ
ರ

ಹ
ತ

ಯ

ಯ
ಾ
ದ
ರ
ೂ

I

a
m

w
o
r
k
i
n
g

o
n

t
h
i
s
</code></pre>
<p>Those circles are kind of spaces [ As understood by the code ]</p>
</div>
<div class="post-text" itemprop="text">
<p>Look at @itzMEonTV's suggestion:</p>
<pre><code>In [46]: rex=re.compile(r'\w+')                                                                                               
In [47]: rex                                                                                                                  
Out[47]: re.compile(r'\w+', re.UNICODE)
</code></pre>
</div>
<span class="comment-copy">Note to everyone: The OP's code appears <a href="https://rextester.com/KQWP73350" rel="nofollow noreferrer">to be working in this demo</a>.  I can only speculate that there is some weird encoding issue happening.</span>
<span class="comment-copy">@TimBiegeleisen It looks like the demo you linked uses Python 2 but I'm guessing Amarnath is using Python 3, which does exhibit the problem. Amarnath, can you please edit the question to confirm which version of Python you're using?</span>
<span class="comment-copy">"I expected the above code to return only english words" - <i>why</i>?</span>
<span class="comment-copy"><code>re.findall(r'\w+',s, re.ASCII)</code> ?</span>
<span class="comment-copy"><code>words = re.sub(r'[^a-zA-Z ]','',s)</code> sub works fine but its different in findall not sure why</span>
<span class="comment-copy">I think you've got the right idea but a little backwards; actually, the problem appears to be that <code>\w</code> in the OP's code sample is picking up <i>more</i> than just <code>[a-zA-Z0-9_]</code>. I believe the difference is that what you're saying here applies to Python 2, but I suspect the code in the question is meant to run with Python 3.</span>
<span class="comment-copy">Guess you're right.. though it could just be a localization issue, as stated above.. May require more thorough investigating.</span>
<span class="comment-copy">Well, I can't rule it out, but I'm considerably more confident that it's a 2 vs 3 issue given that running the OP's code sample in Python 3 reproduces their issue but running it in Python 2 does not, and that your quote, which comes from the Python 2 documentation, describes the opposite behavior of what the OP is seeing, i.e. precisely what would happen if you run their code sample under Python 2.</span>
