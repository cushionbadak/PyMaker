<div class="post-text" itemprop="text">
<p>I have the current code (cut down from the original) - this snippet is also available <a href="https://pastebin.com/aZzz5ZDE" rel="nofollow noreferrer">here</a>.</p>
<pre><code>import tkinter as tk
import tkinter.ttk as ttk
class ScrolledFrame(tk.Frame):
    def __init__(self, master, **kw):
        tk.Frame.__init__(self, master, **kw)
        vsb = tk.Scrollbar(self, orient='vertical')
        vsb.grid(column=1, row=0, sticky='ns')
        hsb = tk.Scrollbar(self, orient='horizontal')
        hsb.grid(column=0, row=1, sticky='ew')

        self.canvas = canvas = tk.Canvas(self, bd=0, highlightthickness=0,
                        yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        canvas.grid(row=0, column=0, sticky='nsew')
        #canvas.configure(scrollregion=canvas.bbox('all'))
        vsb.config(command=canvas.yview)
        hsb.config(command=canvas.xview)
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        # reset the view
        canvas.xview_moveto(0)
        canvas.yview_moveto(0)

        self.interior = interior = tk.Frame(canvas)
        interior_id = canvas.create_window(0, 0, window=interior,
                                           anchor='nw')

        def _configure_interior(event):
            size = (interior.winfo_reqwidth(), interior.winfo_reqheight())
            canvas.config(scrollregion="0 0 %s %s" % size)
            if interior.winfo_reqwidth() != canvas.winfo_width():
                canvas.config(width=interior.winfo_reqwidth())
        interior.bind('&lt;Configure&gt;', _configure_interior)

        def _configure_canvas(event):
            if interior.winfo_reqwidth() != canvas.winfo_width():
                canvas.itemconfigure(interior_id, width=canvas.winfo_width())
        canvas.bind('&lt;Configure&gt;', _configure_canvas)

if __name__ == '__main__':
    root = tk.Tk()
    main_frame = ScrolledFrame(root)
    main_frame.grid(row=0, column=0, sticky='nsew')
    root.grid_rowconfigure(0, weight=1)
    root.grid_columnconfigure(0, weight=1)
    for i in range(100): tk.Button(main_frame.interior, text=f'test {i}').grid(row=0, column=i)
    root.geometry('360x240')
    root.mainloop()
</code></pre>
<p>The aim of the code is too have a frame that is scroll-able via both the x and y axis; however, an issue is occurring in which scrolling across the x axis results in the items not being drawn:
<a href="https://i.stack.imgur.com/EFmLt.gif" rel="nofollow noreferrer"><img alt="Example of it not working" src="https://i.stack.imgur.com/EFmLt.gif"/></a></p>
<p>However, the y-axis seems to work perfectly - I have attempted to change by program with different <code>scrollregion=</code> settings (i.e. <code>'all'</code>) yet to no prevail, it seems to remove the functionality of the x-axis entirely.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are explicitly setting the width of the interior frame to be the same as the width of the canvas. For example, when the program starts up, the canvas will be a little less than 360 pixels wide so you're setting the interior frame to be that size. On my machine that ends up being 309 pixels. Thus, when you scroll you'll only ever be able to see 309 pixels worth of buttons.</p>
<p>The whole point of scrolling is that you're trying to see something that is larger than the window, but you're artificially making the inner frame the same size as the window.</p>
<p>You should stop forcing the inner frame to be the same size as the canvas, or at least stop forcing it to be <em>smaller</em> than the canvas. It needs to be its natural size. </p>
</div>
<span class="comment-copy">While this won't solve the problem, I recommend removing the <code>Autoscroll</code> class for the purposes of this question. It doesn't seem to have anything to do with the problem and only serves to make the code more complex.</span>
<span class="comment-copy">@BryanOakley The code has been updated to reflect this change</span>
<span class="comment-copy">The commenting out of lines 35-38 seemed to do the trick thanks</span>
