<div class="post-text" itemprop="text">
<p>I have a pandas DataFrame that contains looks like this:</p>
<pre><code>A         A_type
"Hello"   String
15        Integer
"Hi"      String
56.78     Float
</code></pre>
<p>I want to create a third column that reports the same value as A if A has the corresponding "A_type" element named "String", print "blank" otherwise. The column would look like:</p>
<pre><code>B
"Hello"
"blank"
"Hi"
"blank"
</code></pre>
<p>I tried doing something like:</p>
<pre><code>df['B'] = df['A']
for j in df['A_type']:
    for i in df['B']:
            if j == "String":
                i = i
            else:
                i = "blank"
</code></pre>
<p>Is there any more effective approach to such problem that can help me avoid all these for loops? </p>
<p>Thanks a lot in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.where.html" rel="nofollow noreferrer"><code>Series.where</code></a> or 
<a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.mask.html" rel="nofollow noreferrer"><code>Series.mask</code></a> with inverted condition, or <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html" rel="nofollow noreferrer"><code>numpy.where</code></a>:</p>
<pre><code>df['B'] = df['A'].where(df['A_type'] == "String", 'blank')
#df['B'] = df['A'].mask(df['A_type'] != "String", 'blank')
#alternative
#df['B'] = np.where(df['A_type'] == "String", df['A'], 'blank')
print (df)
       A   A_type      B
0  Hello   String  Hello
1     15  Integer  blank
2     Hi   String     Hi
3  56.78    Float  blank
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Also you can try:</p>
<pre><code>df['B'] = df.apply(lambda x: x['A'] if x['A_type'] == 'String' else "Blank", axis = 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>df['B']=df['A'].copy()
df.loc[df['A_type']!="String", 'B'] = "blank"
</code></pre>
<p>O/P:</p>
<pre><code>       A  A_type      B
0  Hello  String  Hello
1  blank   blank  blank
2     Hi  String     Hi
3  blank   blank  blank
</code></pre>
<p>explanation:</p>
<ol>
<li>Take a copy of <code>Col A</code></li>
<li>only update the value to <code>blank</code> where <code>A_Type</code> is not <code>String</code></li>
</ol>
</div>
<span class="comment-copy">Dont use apply, because loops under the hood, especially if exist vectorized alternatives.</span>
<span class="comment-copy">Because it is slow in large dataframes</span>
<span class="comment-copy">Ok, Thanks. I'll try to modify making it consistent with large df.</span>
<span class="comment-copy">@DebanjanB - Added, thanks for the comment, I would consider this in futurte :)</span>
