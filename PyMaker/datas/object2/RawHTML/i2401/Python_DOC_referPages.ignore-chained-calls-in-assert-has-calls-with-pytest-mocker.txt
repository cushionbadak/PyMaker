<div class="post-text" itemprop="text">
<p>When using <code>mocker</code> from <a href="https://pypi.org/project/pytest-mock/" rel="nofollow noreferrer"><code>pytest-mock</code></a>, how can I use <code>has_calls</code> to check the calls to a specific method without checking all the calls made to the return value of that method?</p>
<p>For example:</p>
<pre><code>import subprocess
from unittest import mock

def test_foo(mocker):
    m = mocker.patch('test_main.subprocess')
    r1 = subprocess.run(['foo'])
    r1.check_returncode()
    r2 = subprocess.run(['bar'])
    r2.check_returncode()

    m.run.assert_has_calls([
        mock.call(['foo']),
        mock.call(['bar']),
    ])
</code></pre>
<p>Fails with:</p>
<pre><code>E       AssertionError: Calls not found.
E       Expected: [call(['foo']), call(['bar'])]
E       Actual: [call(['foo']),
E        call().check_returncode(),
E        call(['bar']),
E        call().check_returncode()]
</code></pre>
<p>Why are calls to the return value also included? I just want to check that I had a call to <code>subprocess.run(['foo'])</code> <strong>followed by</strong> a call to <code>subprocess.run(['bar'])</code>. I don't care about calls made to anything it returns, but I <em>do</em> care about the order of calls to <code>run</code> itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>Add <code>any_order=True</code> to your <code>assert_has_calls</code> call, like this:</p>
<pre><code>m.run.assert_has_calls([
    mock.call(['foo']),
    mock.call(['bar']),
], any_order=True)
</code></pre>
<p>The reason is, it looks like <code>assert_has_calls</code> uses the <code>mock_calls</code> attribute on a mock which based on the documentation (<a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.mock_calls" rel="nofollow noreferrer">https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.mock_calls</a>):</p>
<blockquote>
<p>records all calls to the mock object, its methods, magic methods and return value mocks.</p>
</blockquote>
<p>With <code>assert_has_calls</code> though, it's not an exact matching problem it was just the ordering that was failing.</p>
<p>EDIT: Since order matters, use <code>call_args_list</code>. Like this:</p>
<pre><code>def test_foo(mocker):
    m = mocker.patch('subprocess_test.subprocess')
    r1 = subprocess.run(['foo'])
    r1.check_returncode()
    r2 = subprocess.run(['bar'])
    r2.check_returncode()

    assert [mock.call(['foo']), mock.call(['bar'])] == m.run.call_args_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_any_call" rel="nofollow noreferrer"><code>assert_any_call</code></a>:</p>
<pre><code>m.run.assert_any_call(['foo'])
m.run.assert_any_call(['bar'])
</code></pre>
</div>
<span class="comment-copy">Thanks for pointing me at <code>mock_calls</code>, that explains the behavior. However, <code>any_order</code> will not work for me: &gt; I just want to check that I had a call to subprocess.run(['foo']) <b>followed by</b> a call to subprocess.run(['bar'])</span>
<span class="comment-copy">@rcorre See edit.</span>
<span class="comment-copy">Just wanted to point out here that call_args_list is the real answer here, and should be accepted (but also probably that the answer itself should be edited to put that part of the answer prominently).</span>
<span class="comment-copy"><code>assert_any_call</code> does not allow me to check the order. &gt; &gt; I just want to check that I had a call to subprocess.run(['foo']) <b>followed by</b> a call to subprocess.run(['bar']). Both answers seem to miss this, so I'll edit the question to make it more clear.</span>
