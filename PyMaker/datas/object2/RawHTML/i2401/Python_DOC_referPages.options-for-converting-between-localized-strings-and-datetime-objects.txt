<div class="post-text" itemprop="text">
<p>I need to </p>
<ul>
<li>parse a localized string to a datetime object,</li>
<li>use a datetime object to generate a localized string.</li>
</ul>
<p>The problem is that the default locale ("de_DE") does not match the localized string ("en_US").
<br/><br/>
<a href="https://i.stack.imgur.com/rCYx9.png" rel="nofollow noreferrer"><img alt="sketch of the conversion process" src="https://i.stack.imgur.com/rCYx9.png"/></a></p>
<p><strong>What options are there to implement the described conversions?</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>Please note that I have not studied all available libraries and just want to provide a starting point for others to solve their problems.</p>
<p>I will use the following localized string during all examples:</p>
<pre><code>dt_str = "Thu 3 Apr 2014 13:19:52"        # en_US
</code></pre>
<hr/>
<p><br/> </p>
<h3>1. Methods of 'datetime.datetime'</h3>
<p>This is the simplest approach, but it becomes unwieldy if you use locales other than the default locale.<br/>
Information about the syntax can be found <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">here</a>.</p>
<pre><code>import datetime

dt = datetime.datetime.strptime(dt_str,
                                "%a %d %b %Y %H:%M:%S")
# datetime.datetime(2014, 4, 3, 13, 19, 52)

s = dt.strftime("%a %-d %b %Y %H:%M:%S")
# 'Thu 3 Apr 2014 13:19:52'
</code></pre>
<p>If you like to parse or format other locales, you have to change the global locale, which could result in undesired side effects. (I do not recommend this approach.)</p>
<pre><code>import datetime
import locale

locale.setlocale(locale.LC_TIME, "de_DE.UTF-8")

dt = datetime.datetime.strptime("Do 3 Apr 2014 13:19:52",
                                "%a %d %b %Y %H:%M:%S")
# datetime.datetime(2014, 4, 3, 13, 19, 52)

s = dt.strftime("%a %-d %b %Y %H:%M:%S")
# 'Do 3 Apr 2014 13:19:52'
</code></pre>
<p><br/> </p>
<h3>2. The python library 'arrow'</h3>
<p><a href="https://arrow.readthedocs.io/en/latest/" rel="nofollow noreferrer">arrow</a> allows you to pass a locale (otherwise it uses "en_US").</p>
<pre><code>import arrow        # installed via pip
import datetime

### localized string -&gt; datetime
a_dt = arrow.get(dt_str,
                 "ddd D MMM YYYY H:mm:ss",
                 locale="en_US")                # "en_US" is also the default, so this is just for clarification 

dt = a_dt.datetime
# datetime.datetime(2014, 4, 3, 13, 19, 52, tzinfo=tzutc())


### datetime -&gt; localized string
a_s = arrow.get(datetime.datetime(2014, 5, 17, 14, 0, 0))

s = a_s.format("ddd D MMM YYYY H:mm:ss",
               locale="en_US")                 # "en_US" is also the default, so this is just for clarification
# 'Sat 17 May 2014 14:00:00'
</code></pre>
<p>This is especially useful if the desired locale differs from the default locale.</p>
<p><a href="https://i.stack.imgur.com/B3SBQ.png" rel="nofollow noreferrer"><img alt="sketch of the conversion" src="https://i.stack.imgur.com/B3SBQ.png"/></a></p>
<p><br/> </p>
<h3>3. The python library 'babel' (mainly for formatting)</h3>
<p>The strength of <a href="http://babel.pocoo.org/en/latest/" rel="nofollow noreferrer">babel</a> is the formatting (Unfortunately, it seems that <a href="https://github.com/python-babel/babel/issues/432" rel="nofollow noreferrer">it can not <strong>parse</strong> any pattern</a>. <a href="https://github.com/python-babel/babel/issues/541" rel="nofollow noreferrer">Only the format "short" seems reliable</a>.)</p>
<pre><code>import babel.dates    # 'babel' installed via pip
import datetime

dt = datetime.datetime(2014, 4, 3, 13, 19, 52)
# parsing is the problem with babel, therefore I created the datetime object directly.

s = babel.dates.format_datetime(dt,
                                "EEE d MMM yyyy H:mm:ss", 
                                locale="en_US")
# 'Thu 3 Apr 2014 13:19:52'
</code></pre>
<p><br/> </p>
<h3>4. The python library 'dateparser' (only parsing)</h3>
<p><a href="https://github.com/scrapinghub/dateparser" rel="nofollow noreferrer">dateparser</a> is very powerful. It is able to lookup dates in longer texts and does support non-Gregorian calendar systems, just to name a few features.</p>
<pre><code>import dateparser        # installed via pip

dt = dateparser.parse(dt_str,
                      date_formats=["%a %d %b %Y %H:%M:%S"],
                      languages=["en"])
# datetime.datetime(2014, 4, 3, 13, 19, 52)
</code></pre>
<p><br/> </p>
<h3>5. Last but not least</h3>
<p>The following noteworthy python libraries have great features, but unfortunately I could not use them for this specific problem (or did not know how to use them properly).</p>
<ul>
<li><a href="https://github.com/kennethreitz/maya" rel="nofollow noreferrer">maya</a></li>
<li><a href="https://delorean.readthedocs.io/en/latest/quickstart.html" rel="nofollow noreferrer">delorean</a></li>
<li><a href="https://pendulum.eustace.io/docs/" rel="nofollow noreferrer">pendulum</a></li>
</ul>
</div>
