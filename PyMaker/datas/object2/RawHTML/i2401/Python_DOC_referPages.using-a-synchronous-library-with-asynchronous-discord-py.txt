<div class="post-text" itemprop="text">
<p>I am working on a bot that streams post from the Steem Blockchain (using the synchronous beem library) and sends posts that fulfil certain criteria to a Discord channel (using the asynchronous Discord.py library). This is is my (simplified) code:</p>
<pre><code>bot = commands.Bot(command_prefix="!")

async def send_discord(msg):
    await bot.wait_until_ready()
    await bot.send_message(bot.get_channel("mychannelid"), msg)

async def scan_post(post):
    """Scan queued Comment objects for defined patterns"""
    post.refresh()
    if post["author"] == "myusername":
        await loop.create_task(send_discord("New post found"))

async def start_blockchain():
    stream = map(blockchain.stream(opNames=["comment"]))
    for post in stream:
        await loop.create_task(scan_post(post))

if __name__ == '__main__':
    while True:
        loop.create_task(start_blockchain())
        try:
            loop.run_until_complete(bot.start(TOKEN))
        except Exception as error:
            bot.logout()
            logger.warning("Bot restarting "+repr(error))
</code></pre>
<p>Before I implemented discord.py I would just call the synchronous function <code>scan_post(post)</code> and it worked just fine, but now with the asynchronous implementation the posts are not processed fast enough and the stream has a rapidly increasing delay. If I make <code>scan_post(post)</code> a synchronous function, the processing time is fine, but the Discord websocket closes (or does not even open) and the bot goes offline. How can I solve this in a simple way (without rewriting the beem library)?</p>
</div>
<div class="post-text" itemprop="text">
<p>I solved the problem: I run the beem stream in its own thread and the asynchronous functions in a second thread. With the <a href="https://github.com/aio-libs/janus" rel="nofollow noreferrer">janus</a> library I can then add objects from the beam thread to a queue that is processed by the asynchronous thread.</p>
</div>
<span class="comment-copy">Is the <code>blockchain.stream()</code> call also blocking, or just the <code>post.refresh()</code>? Also, <code>map(blockchain.stream(...))</code> looks incorrect - <code>map</code> takes at least two arguments.</span>
<span class="comment-copy">For the blocking operations in your async code you can use <code>run_in_executor</code> (<a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a>) so, so they won't block the whole thread. There are also useful examples in documentation.</span>
