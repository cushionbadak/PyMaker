<div class="post-text" itemprop="text">
<p>I'm building a calculator and I'm in the part of pressing a button and display the value in the screen.  For that purpose, I created two different .py files (I want to use modules). Following up your request I will update the post with the simplest code possible to reproduce the issue. This is the calculator layout:</p>
<pre><code>from tkinter import *
from screenvalue import value 

root=Tk()
frame=Frame(root) #frame for the buttons and other options
frame.config(background="#40798C")
frame.pack()
#------------------------ SCREEN ----------------------

screen=Text(frame, width=150, height=5)
screen.grid(row=1, column=1, padx=5, pady=5, columnspan=15)
screen.config(background="#E2E2E2", fg="black")
#--------button---------------------------------

button4=Button(frame, text="4", width=10, padx=0, pady=0, command=value)
button4.grid(row=4,column=11)
root.mainloop()
</code></pre>
<p>and this is the module I'm using</p>
<pre><code>from tkinter import *
character=StringVar()

def value():
    return character.set("4")
</code></pre>
<p>I changed the name of the module from <em>typing.py</em> to <em>screenvalue.py</em>. Do you know what's happening? They both are in the same folder</p>
<p>Thank you very much in advance and my apologies if my English is not clear. </p>
</div>
<div class="post-text" itemprop="text">
<p>Tkinter is a multilayered thing. Although you're using it from Python, it actually uses another language, Tcl, to manage the GUI.</p>
<p>You get that error message </p>
<blockquote>
<pre><code>AttributeError: 'NoneType' object has no attribute '_root'
</code></pre>
</blockquote>
<p>because you're trying to create a Tkinter object before you start the Tcl interpreter, which happens when you do <code>root=Tk()</code>. </p>
<p>So you need to reorganise your code so that </p>
<pre><code>character = StringVar()
</code></pre>
<p>doesn't get executed before you do <code>root=Tk()</code>. </p>
<p>That <code>character = StringVar()</code> gets executed when you import <code>screenvalue</code>. You <em>could</em> just move the import statement after the <code>root=Tk()</code>, but it would be much better to change <code>screenvalue</code> so that it doesn't run code when you import it.</p>
<hr/>
<p>FWIW, <code>character.set("4")</code> returns <code>None</code>, so there's not much point in having a function return that. Also, there's no point in a callback function returning a useful value, since you can't access the value returned by a callback.</p>
</div>
<div class="post-text" itemprop="text">
<p>You defined <code>character = StringVar()</code> outside of the scope of the <code>type</code> function that you created and imported in the second file.
In the command <code>from typing import type</code> you import only <code>type</code> function with its scope and <code>character</code> is not defined in it, which causes the error that you got.</p>
<p>If you move <code>character = StringVar()</code> into the function's scope it will solve your problem.</p>
<p><code>def type():
    character = StringVar()
    return character.set("4")</code></p>
<p>P.S it's strongly recommended not to use variable and function names that shadow python built in names, like 'type'.</p>
</div>
<span class="comment-copy">I think you need to add if__name__== main stuff at the end.</span>
<span class="comment-copy">Please post the <i>complete</i> exception traceback, and rename your <code>typing</code> module to something else - you don't want it to clash with the <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer"><code>typing</code> module</a> in the standard library.</span>
<span class="comment-copy">Sorry, but I don't get it, at the end of what? in the button?</span>
<span class="comment-copy">At this stage, don't worry about <code>if__name__== main:</code>. You use that when you have a file that's designed to be used as a stand-alone script and also as an importable module. Right now we just need to see a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> that allows us to reproduce your problem.</span>
<span class="comment-copy">As Aran-Fey said, naming your own module <code>typing</code> is not good because it clashes with the standard module of that name. And you definitely shouldn't use <code>type</code> as a variable name, because that shadows the built-in <code>type</code>, which is the foundation of Python's type system. Using <code>type</code> as a variable name makes your code very confusing to read.</span>
<span class="comment-copy">you are right, my bad. when I was editing this simpler post I deleted command=type within button4 and I forgot to plug it in again. Sorry</span>
<span class="comment-copy">I edited the script</span>
<span class="comment-copy">@duvanmendoza No worries. You forgot to change the function name in the module, but I've fixed that for you.</span>
<span class="comment-copy">Thank you! it solved the issue. Now I have another issue, but I just have to check my code to see what is missing. I wouldn't have figured it out without your help.</span>
<span class="comment-copy">This is completely incorrect and nonsensical. The problem is not related to scope in any way, and moving the <code>character</code> variable into the function gets rid of the exception, but it doesn't do anything useful. What's the point of a callback function that creates a StringVar and then does nothing with it?</span>
<span class="comment-copy">This change stops the error message simply because it prevents  <code>character = StringVar()</code> from being executed when <code>screenvalue</code> is imported. However, creating a new <code>StringVar</code> every time the callback is called is probably not a useful thing to do. ;)</span>
<span class="comment-copy">From the original question it seemed that the author needed more clarification regarding scope, lifespan and imports. That was the point that my answer tried to show and I hope that it moved him one step forward.  I do agree with @PM2Ring that creating a new <code>StringVar</code> every time the callback is called is not very useful.</span>
