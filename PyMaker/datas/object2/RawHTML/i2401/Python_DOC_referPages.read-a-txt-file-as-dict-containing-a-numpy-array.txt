<div class="post-text" itemprop="text">
<p>I have a lot of .txt files that I want to read. 
The .txt files were saved by converting a python dictionary to a string and saving the string in a .txt file.  </p>
<pre><code>param_string = str(parameters-as-dict)
text_file = open(parameter_file_path, "w")
text_file.write(param_string)
text_file.close()
</code></pre>
<p>The entries of the dict are of mixed types (float, int, string,...). In some of the files one entry of the dict is a numpy-array and is saved in the txt-file as</p>
<pre><code>'epsilons': array([...])
</code></pre>
<p>Because I want to access the values saved in the dict by their names, I now want to read the txt-file and load them as a dict again. This works easily with </p>
<pre><code>f = open(path, 'r')
parameters = ast.literal_eval(f.read())
</code></pre>
<p>as long as there is no numpy array in the file. When the numpy-array is present, I get the error:</p>
<blockquote>
<p>File ".../python3.6/ast.py", line 84, in _convert
      raise ValueError('malformed node or string: ' + repr(node)) ValueError: malformed node or string: &lt;_ast.Call object at 0x7fb5428cc630&gt;</p>
</blockquote>
<p>Which makes sense, looking at the as.literal_eval documentation (<a href="https://docs.python.org/2/library/ast.html" rel="nofollow noreferrer">https://docs.python.org/2/library/ast.html</a>) which says</p>
<blockquote>
<p>Safely evaluate an expression node or a Unicode or Latin-1 encoded
  string containing a Python literal or container display. The string or
  node provided may only consist of the following Python literal
  <strong>structures: strings, numbers, tuples, lists, dicts, booleans, and
  None.</strong></p>
</blockquote>
<p>Since I can't resave the file differently, I don't know at which position the array is and I want to avoid cumbersome regex parsing, I'm searching for a solution that transforms my txt-file into a dict containing a numpy-array. </p>
<p><strong>EDIT:</strong> the problem is not only the numpy array but also when I saved an object of e.g. a specific class:</p>
<pre><code> , 'foo' : &lt;class bar&gt;,
</code></pre>
<p>A solution, where everything that can not be parsed as some kind of number/bool/some knonw datatype is automatically saved as a string just as it is would satisfy my needs. </p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest an iterative approach handling the exceptions as needed. I don't like using <code>eval</code>, perhaps there's a better way but this is quick and dirty and assumes you have safe inputs.</p>
<pre><code>parameters = {}    
with open("file.txt") as f:
    for line in f:
        (key, val) = line.split(':')
        if val[:6] == '&lt;class'
            # string representation like '&lt;class bar&gt;'
            # ast.literal_eval() can't handle this, and neither can eval()
            # this is just a string literal, so keep it as such:
            parameters[key] = val  
            continue
        try:
            parameters[key] = ast.literal_eval(val)
        except ValueError as e:
            # for unsupported data structures like np.array
            parameters[key] = eval(val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I guess you'll have to check for an array line by line. A quick &amp; dirty suggestion:</p>
<pre><code>parameters = {}    
with open("file.txt") as f:
    for line in f:
       (key, val) = line.split(':')
       if 'array' in val:
           s = val.split('(', 1)[1].split(')')[0]
           parameters[key] = np.array(ast.literal_eval(s))
       else:
           parameters[key] = ast.literal_eval(val)
</code></pre>
<p>Maybe for future reference, you can try using the <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow noreferrer">pickle</a> module to save your data.</p>
</div>
<span class="comment-copy">have you checked out the numpy methods for reading data from text files. there is quite the array of options there and this might easily solve your problem. I#m not to familiar myself with numpy though. have you also tried this : <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromstring.html" rel="nofollow noreferrer">docs.scipy.org/doc/numpy/reference/generated/â€¦</a>. that should work together with a try: and except: solution.</span>
<span class="comment-copy">I'd edit the file (or read string) to remove the 'array' word.  Then the array should load as a list.</span>
<span class="comment-copy">Another option would be an iterative approach with <code>try/except</code> catching those <code>ValueError</code> and handling them appropriately, i.e., <code>paramters['epsilons']= array([1,2,3])</code> should work.</span>
<span class="comment-copy">@DavidZemens I think this approach merits being in an answer of it's own</span>
<span class="comment-copy">What do you expect to get in return from <code>&lt;class bar&gt;</code>? An <i>instance</i>, of the class, or the class itself?</span>
