<div class="post-text" itemprop="text">
<p>I was looking at <a href="https://stackoverflow.com/a/37370823/5104314">this answer</a> where they explain how to initialize a class asynchronously with the method <code>__await__</code>. The question is: is it possible to pass parameters when awaiting the initialization of the class, just like when it is initialized synchronously?</p>
<p>In other words, I'd like to be able to do
<code>my_class = await MyClass(my_parameter)</code>, however I wasn't able to make it work in any way.</p>
<p>Should I just fall back to using the classic <code>__init__</code> like in <a href="https://stackoverflow.com/a/33134213/5104314">this answer</a>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You should just use <code>__init__</code>. You are creating a regular class instance <em>first</em>, and then await on the instance. These are two separate actions.</p>
<p>For example, you could first create the instance, and then later, <em>separately</em>, await on it:</p>
<pre><code>my_class = MyClass(my_parameter)
result_from_coroutine = await my_class
</code></pre>
<p>or you could create a task from it and have the event loop execute it with</p>
<pre><code>my_class = MyClass(my_parameter)
task = asyncio.create_task(my_class)  # the loop will await the task
# ...
if task.done():
    result_from_coroutine = task.result()
</code></pre>
<p>The <code>__await__</code> method is what <code>await</code> or the event loop use to drive coroutines. The same separation applies to coroutine functions (defined with <code>async def</code>); they too create a new coroutine object when you call them, and you don't have to await on them immediately. You can use <code>await</code> on the result at another time.</p>
<p>If you are looking for asynchronous <em>instance creation</em>, then you could hack that up by making the <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="nofollow noreferrer"><code>__new__</code> method</a> into a coroutine:</p>
<pre><code>&gt;&gt;&gt; class Async:
...     async def __new__(cls):
...         instance = super().__new__(cls)
...         return instance
...
&gt;&gt;&gt; Async()
&lt;coroutine object Async.__new__ at 0x103654148&gt;
</code></pre>
<p>Awaiting on the coroutine would create the actual instance and return it.</p>
<p>Take into account that this does mean that the <code>__init__</code> method <em>will</em> be skipped; the latter is only called when the <code>__new__</code> method directly returns an instance of the class (or a subclass), and a coroutine is not such an instance. You'd have to explicitly do so yourself:</p>
<pre><code>class Async:
    async def __new__(cls, *args, **kwargs):
        instance = super().__new__(cls)
        instance.__init__(*args, **kwarg)
        return instance
</code></pre>
<p>at which point you could decide to make the <code>__init__</code> method a coroutine too.</p>
<p>Note that this is <em>really</em> going against the grain. I'd postpone calling dependent coroutines to a later point instead.</p>
<p>For example, you can just store the parameters to the class on the instance and use those when the instance is awaited on (by having <code>__await__</code> called), exactly as the post you link to advices you to do.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>In other words, I'd like to be able to do <code>my_class = await MyClass(my_parameter)</code>, however I wasn't able to make it work in any way.</p>
</blockquote>
<p>You can make <code>MyClass</code> awaitable by implementing <code>__await__</code>:</p>
<pre><code>class MyClass:
    def __init__(self, delay):
        self.delay = delay

    async def __await__(self):
        await asyncio.sleep(self.delay)

asyncio.run(MyClass(2)) # sleeps 2 seconds
</code></pre>
<p>The code in the linked answer does a similar thing, but it is more complex because it assumes that <code>__init__</code> itself requires <code>await</code>. If that is not the case, and your <code>__init__</code> is in fact trivial, but you want the returned instance to be awaitable, you don't need the added complexity of a split initialization.</p>
<p>Note: despite being <a href="https://speakerdeck.com/1st1/asyncio-today-and-tomorrow?slide=14" rel="nofollow noreferrer">recommended</a>, <code>asyncio.run()</code> is still marked provisional. In the above example it can be easily replaced with <code>run_until_complete</code>.</p>
</div>
<span class="comment-copy">The reason why I'm doing an asynchronous initialization is because I'm awaiting a few methods that need to be run as soon as the class is created, but because they are private methods I didn't want to call them "outside" of the class itself.</span>
<span class="comment-copy">@FedericoCorazza: you can't create instances asynchronously.</span>
<span class="comment-copy">@FedericoCorazza: that's because the process of creating instances isn't handled by <code>__init__</code>, that's just a hook called <i>after</i> the instance is already created.</span>
<span class="comment-copy">Hmm, but we <b>can</b> make the <code>__new__</code> method return a coroutine..</span>
<span class="comment-copy">This is very interesting, but I agree, I should call the awaitables later on.</span>
<span class="comment-copy">I'll play with this a little bit. Thank you</span>
<span class="comment-copy">@FedericoCorazza Sorry about the rejected edit, I didn't know that it was done by the same person who asked the question. I've now amended the answer to mention the provisional status of <code>asyncio.run</code>.</span>
