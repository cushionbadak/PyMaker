<div class="post-text" itemprop="text">
<p>I'm now to python and I wanted to know the correct way of doing this. I'm trying to add pieces to make a full string but I get symbols in the string output</p>
<pre><code>def responseLibrary(days, hours, minutes, seconds):
global globalSeconds
response = globalSeconds, " seconds equals "

if days &gt; 0:
    response += days, " days "
if hours &gt; 0:
    response += hours, " hours "
if minutes &gt; 0:
    response += minutes, " minutes "
if seconds &gt; 0:
    response += seconds, " seconds "
return response
</code></pre>
<p>The output I get looks like this</p>
<pre><code>(10, ' seconds equals ', 10, ' seconds ')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>At the end, you could use</p>
<pre><code>return ''.join(map(str, response))
</code></pre>
<p>What's happening is that when you say <code>response = globalSeconds, " seconds equals "</code> You're creating a <strong>tuple</strong>. When you use the print function, you're <strong>not passing in a single string</strong> created by some sort of comma-based joining operation. You're passing in multiple arguments, and the print function handles them appropriately.</p>
<p>If you wanted to join strings all the way through, the <code>+</code> operator allows for string concatenation. It is typically more efficient to use <code>.join()</code> rather than a large number of concatenations however.</p>
<p>For reference, this answer uses the builtin <code>str.join()</code> method, <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer">documented here</a>. It also uses the <code>map()</code> builtin <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">documented here</a>. What they're doing is basically as follows:</p>
<ol>
<li>By the end of your program, <code>response</code> is a <strong>tuple</strong> of different values.</li>
<li>Not all of those values are strings (notice that you never converted any integers to a different type).</li>
<li>The builtin <code>.join()</code> method requires an iterable of strings for its input.</li>
<li>The line <code>map(str, response)</code> is roughly the same as <code>(str(x) for x in response)</code>. Now we have an iterable object of string representations of the values we want to join together.</li>
<li>The <code>.join()</code> method takes all of those strings and concatenates them into one giant string like you want.</li>
<li>Note the <code>''</code> at the beginning of <code>.join()</code>. That's the separator we're using between each of the strings we're joining. You could just as easily use spaces or commas or anything else like <code>', '.join(...)</code>.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can't join strings and ints with a comma.  That gives you a tuple, as your output shows.  </p>
<p>You need to convert the ints to strings.   One way is: <code>response += str(seconds) + " seconds"</code></p>
<p>Another way would be to use the string format function:  <code>response += "{} seconds".format(seconds)</code></p>
</div>
<span class="comment-copy">Use <code>+</code> to combine the strings, not <code>,</code></span>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/4435169/how-do-i-append-one-string-to-another-in-python">How do I append one string to another in Python?</a></span>
<span class="comment-copy">This worked what is the documentation for this? That way I can fully understand what it's doing.</span>
<span class="comment-copy">Sure thing. One sec.</span>
<span class="comment-copy">@DRodriguez There you go.</span>
