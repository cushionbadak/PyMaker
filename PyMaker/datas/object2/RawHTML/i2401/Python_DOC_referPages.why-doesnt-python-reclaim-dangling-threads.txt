<div class="post-text" itemprop="text">
<p>Here is a snippet code of Python. As the stdout shows, active threads keep increasing until os complains that you have too much threads. Why doesn't python reclaim threads in thread_pool after all tasks are done?</p>
<pre><code>from multiprocessing.dummy import Pool as ThreadPool
import threading

count = 0

def fun(i):
    pass

while True:
    count += 1
    data = list(range(1, 100))
    thread_pool = ThreadPool(30)
    thread_pool.map(fun, enumerate(data))
    print(count, 'end', threading.active_count())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the context manager if you want things to be terminated properly</p>
<pre><code>with ThreadPool(30) as pool:
    pool.map(fun, enumerate(data))
</code></pre>
</div>
<span class="comment-copy">What <code>stdout</code>? Did you forget to include something?</span>
<span class="comment-copy"><code>print</code> output to <code>sys.stdout</code> in default</span>
<span class="comment-copy">You say, "As the stdout shows", but you haven't shown anything.</span>
<span class="comment-copy">The whole point of a thread pool is re-use. Why does your program keep creating new thread pools when it could create and re-use just one thread pool instead?</span>
<span class="comment-copy">It is unusual for any program to have a legitimate reason to create more than one thread pool. Have you tried to see what would happen if you simply move the <code>thread_pool=ThreadPool(30)</code> to the line before <code>while True:</code>?</span>
<span class="comment-copy">Does <code>Pool</code> support context manager protocol?</span>
<span class="comment-copy">Yes it has a context manager. Just ran the code now and the threads don't run up if you use the context manager.</span>
<span class="comment-copy">Oooh, <a href="https://docs.python.org/3/library/multiprocessing.html?highlight=process#multiprocessing.pool.Pool.join" rel="nofollow noreferrer">new in 3.3</a></span>
