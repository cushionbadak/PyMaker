<div class="post-text" itemprop="text">
<p>I struggle to implement the moving average formula in my function.
Took me quite a while to get where the code is right now. </p>
<p>Is there a library I could probably take?</p>
<p>Input:</p>
<pre><code>ma([2,3,4,3,2,6,9,3,2,1], 4)
</code></pre>
<p>Expected Output:</p>
<pre><code>[None, None, None, 3.0, 3.0, 3.75, 5.0, 5.0, 5.0, 3.75]
</code></pre>
<p>My Output:</p>
<pre><code>[None, None, 0.0, 3.0, 3.75, 5.0, 5.0, None, None, None]
</code></pre>
<p>I am running into the problem that the middle parts of my result is right but the rest is a mystery.</p>
<ol>
<li>Why does it return None for the last three values in the list?</li>
</ol>
<p>def ma(prices, n):</p>
<p><code>ma = []
sums = []
s = 0
ave = 0</code></p>
<pre><code>for idx, i in enumerate(prices):
    s += i
    sums.append(s)
    print('idx: ' + str(idx))
    print('list of sums ' + str(sums))
    #print('sum ' + str(s))

if i &gt;= n+1:
    print('sums[idx] ' + str(sums[idx]))
    print('sums[idx-n] ' + str(sums[idx-n]))
    ave = (sums[idx] - sums[idx-n]) / n
    print('ave ' + str(ave))
    ma.append(ave)
    print('ma ' + str(ma))
else:
    m = None
    ma.append(m)
    print('ma ' + str(ma))
</code></pre>
<p>(Sorry for all those <code>print</code> function calls, but I really wanted to get to the source of the issue).</p>
</div>
<div class="post-text" itemprop="text">
<p>There were several other logical errors in your code. I tried to correct it to make it work as you want. Following is only the modified version of the for loop. Rest stays the same. The added/modified lines are highlighted by a comment </p>
<pre><code>for idx, i in enumerate(prices):
    s += i
    sums.append(s)
    if idx == n-1: # Added
        ave = (sums[idx]) / n  # Added 
        ma.append(ave)  # Added
    elif idx &gt;= n: # modified
        ave = (sums[idx] - sums[idx-n]) / n
        ma.append(ave)
    else:
        ma.append(None) # removed extra variable m
</code></pre>
<p>The problem was that you were using the wrong variable as the index:</p>
<p>One major problem was that you <strong>were</strong> using</p>
<pre><code>if i &gt;= n+1:
</code></pre>
<p>You <strong>should</strong> use:</p>
<pre><code>if idx &gt;= n+1:
</code></pre>
<p>Moreover, I added an if statement to take care of the average of the first three elements. </p>
<p>Now </p>
<pre><code>moving_average([2,3,4,5,8,5,4,3,2,1], 3)
</code></pre>
<p>gives the following output (you can round off later):</p>
<pre><code>[None, None, 3.0, 4.0, 5.666666666666667, 6.0, 5.666666666666667, 4.0, 3.0, 2.0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are ok using the standard library, this might help. What you really need is a sliding window over your iterator. You can use this function for that (this was based on <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer"><code>grouper</code></a> from itertools recipes):</p>
<pre><code>from itertools import islice

def window(iterable, n=2):
    # window('123', 2) --&gt; '12' '23'
    args = [islice(iterable, i, None) for i in range(n)]
    return zip(*args)
</code></pre>
<p>For the average you can use <a href="https://docs.python.org/3.5/library/statistics.html#statistics.mean" rel="nofollow noreferrer"><code>statistics.mean</code></a>. The paddig part can be simply achieved by adding the average list with <code>[None] * (n - 1)</code>:</p>
<pre><code>from statistics import mean

def moving_average(prices, n):
    avgs = [mean(w) for w in window(prices, n)]
    padding = [None] * (n - 1)

    return padding + avgs
</code></pre>
<p>Sample usage:</p>
<pre><code>&gt;&gt;&gt; moving_average([2,3,4,5,8,5,4,3,2,1], 3)
[None, None, 3, 4, 5.666666666666667, 6, 5.666666666666667, 4, 3, 2]
&gt;&gt;&gt; moving_average([1, 2, 3], 3)
[None, None, 2]
&gt;&gt;&gt; moving_average([1, 2, 3], 1)
[1, 2, 3]
&gt;&gt;&gt; moving_average([5, 10, 0], 2)
[None, 7.5, 5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason why your program returned that <code>9-9 / 3 = 0</code> is negative indexing. When <code>idx</code> is <code>2</code>, <code>sums[idx-n]</code> is saying <code>sums[-1]</code>, which points at the last item of the list, <code>9</code>. <a href="https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation">Understanding Python's slice notation</a> could help explain that.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also solve this using list slicing to partition your input list smartly and calculate the avg over the list-partitions:</p>
<pre><code>def moving_average(data,window):
    """The partitions begin with window-1 None. Then follow partial lists, containing
       window-sized elements. We do this only up to len(data)-window+1 as the following
       partitions would have less then window elements."""

    parts = [None]*(window-1) + [ data[i:i+window] for i in range(len(data)-window+1)]
    #       The None's           The sliding window of window elements

    # we return None if the value is None else we calc the avg
    return [ sum(x)/window if x else None for x in parts] 

print( moving_average([2,3,4,5,8,5,4,3,2,1], 1) )
print( moving_average([2,3,4,5,8,5,4,3,2,1], 2) )
print( moving_average([2,3,4,5,8,5,4,3,2,1], 3) )
</code></pre>
<p>Output (<code>parts</code> included as comment):</p>
<pre><code># [[2], [3], [4], [5], [8], [5], [4], [3], [2], [1]]
[2.0, 3.0, 4.0, 5.0, 8.0, 5.0, 4.0, 3.0, 2.0, 1.0]

# [None, [2, 3], [3, 4], [4, 5], [5, 8], [8, 5], [5, 4], [4, 3], [3, 2], [2, 1]]
[None, 2.5, 3.5, 4.5, 6.5, 6.5, 4.5, 3.5, 2.5, 1.5]

# [None, None, [2, 3, 4], [3, 4, 5], [4, 5, 8], [5, 8, 5], [8, 5, 4], 
#              [5, 4, 3], [4, 3, 2], [3, 2, 1]]
[None, None, 3.0, 4.0, 5.666666666666667, 6.0, 5.666666666666667, 4.0, 3.0, 2.0]
</code></pre>
</div>
<span class="comment-copy">Can you use the standard library? If so, check out <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer"><code>itertools</code></a> and <a href="https://docs.python.org/3.5/library/statistics.html" rel="nofollow noreferrer"><code>statistics</code></a> modules. It can make your job easier.</span>
<span class="comment-copy">Thank you so much for that extensive explanation!!! I should work on how I define variables... Since also a major issue I was sitting on for an hour in there resulted of wrong usage...</span>
<span class="comment-copy">@dobero: If the answer solved you problem, you may <a href="https://stackoverflow.com/help/someone-answers">accept</a> it</span>
<span class="comment-copy">definitely gonna have a look on that! Index and slicing is still under construction in my head</span>
