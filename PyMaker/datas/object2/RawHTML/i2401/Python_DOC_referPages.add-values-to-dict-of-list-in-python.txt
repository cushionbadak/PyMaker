<div class="post-text" itemprop="text">
<p>I have this kind of dictionary of lists, initially empty:</p>
<pre><code>d = dict()
</code></pre>
<p>Now the use case is to simply add a value to list under a key, which might be a new or an existing key. I think we have to do it like this:</p>
<pre><code>if key not in d:
    d[key] = list()
d[key].append(value)
</code></pre>
<p>This seems awfully tedious and error-prone, needing to write multiple lines (with copy-paste or helper function). Is there a more convenient way?</p>
<p>If there isn't "only one way to do it", and you <em>know</em> it, you can also answer that, and maybe suggest alternative ways to accomplish above, even if they aren't necessarily better.</p>
<p>I looked for duplicate, didn't find, but perhaps I just didn't know to use right keywords.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you want is called a defaultdict, as available in the collections library:</p>
<p>Python2.7: <a href="https://docs.python.org/2/library/collections.html#defaultdict-examples" rel="noreferrer">https://docs.python.org/2/library/collections.html#defaultdict-examples</a></p>
<p>Python3.7: <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="noreferrer">https://docs.python.org/3/library/collections.html#collections.defaultdict</a></p>
<pre class="lang-py prettyprint-override"><code>Example:
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k, v in s:
...     d[k].append(v)
...
&gt;&gt;&gt; sorted(d.items())
[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>d[key] = d.get(key, []) + [value]</code> </p>
<p>to explain<br/>
<code>d.get</code> method returns value under the key <code>key</code> and if there is <strong>no</strong> such key, returns optional argument (second), in this case <code>[]</code> (empty list)</p>
<p>then you will get the list (empty or not) and than you add list <code>[value]</code> to it. this can be also done by <code>.append(value)</code> instead of <code>+ [value]</code></p>
<p>having that list, you set it as the new value to that key</p>
<p>e.g.</p>
<pre><code>d = {1: [1, 2]}
d[1] = d.get(1, []) + [8]
# d == {1: [1, 2, 3]}

d[17] = d.get(17, []) + [8]
# d == {1: [1, 2, 3], 17: [8]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>d[key] = list() if (key not in d) else d[key].append(value) 
</code></pre>
<p>Uses the ternary operators. And looks somewhat cleaner, however it is still almost identical to your scenario.</p>
<p>I apologize, I wasn't thinking earlier and used standard ternary operators. I changed them to Python ternary operators.</p>
</div>
<span class="comment-copy">Use a <a href="https://docs.python.org/3.7/library/collections.html" rel="nofollow noreferrer">defaultdict</a>?</span>
<span class="comment-copy">There's the <code>.setdefault</code> method for doing this sort of thing.</span>
<span class="comment-copy">Doh. This looks like the answer I'll accept as soon as I can.</span>
<span class="comment-copy">Why not just <code>d.setdefault(key, []).append(value)</code>?</span>
<span class="comment-copy">Python does not have <code>?:</code> operator, does it...? There is the <code>exp1 if cond else exp2</code> syntax though, you could rewrite the answer using that.</span>
<span class="comment-copy">@hyde that is my bad. I used the wrong ternary operators.</span>
<span class="comment-copy">The problem with using too many langauges.</span>
<span class="comment-copy">I think this doesn't work, still... <code>d[key] = [value] if key not in d else d[key] + [value]</code> should work and cover both cases correctly.</span>
