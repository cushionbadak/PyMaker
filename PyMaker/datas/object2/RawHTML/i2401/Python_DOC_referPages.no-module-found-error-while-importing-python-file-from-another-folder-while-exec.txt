<div class="post-text" itemprop="text">
<p>I have a file called <code>tester.py</code>, located on <code>/project</code>.</p>
<p><code>/project</code> has a subdirectory called <code>lib</code>, with a file called <code>BoxTime.py</code>:</p>
<pre class="lang-none prettyprint-override"><code>/project/tester.py
/project/lib/BoxTime.py
</code></pre>
<p>I want to import <code>BoxTime</code> from <code>tester</code>. I have tried this:</p>
<pre><code>import lib.BoxTime
</code></pre>
<p>Which resulted:</p>
<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):
  File "./tester.py", line 3, in &lt;module&gt;
    import lib.BoxTime
ImportError: No module named lib.BoxTime
</code></pre>
<p>Any ideas how to import <code>BoxTime</code> from the subdirectory?</p>
<p><strong>EDIT</strong></p>
<p>The <code>__init__.py</code> was the problem, but don't forget to refer to <code>BoxTime</code> as <code>lib.BoxTime</code>, or use:</p>
<pre><code>import lib.BoxTime as BT
...
BT.bt_function()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at the Packages documentation (Section 6.4) here: <a href="http://docs.python.org/tutorial/modules.html" rel="noreferrer">http://docs.python.org/tutorial/modules.html</a></p>
<p>In short, you need to put a blank file named </p>
<pre><code>__init__.py
</code></pre>
<p>in the "lib" directory.</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>Create a subdirectory named <code>lib</code>.</li>
<li>Create an empty file named <code>lib\__init__.py</code>.</li>
<li><p>In <code>lib\BoxTime.py</code>, write a function <code>foo()</code> like this:</p>
<pre><code>def foo():
    print "foo!"
</code></pre></li>
<li><p>In your client code in the directory above <code>lib</code>, write:</p>
<pre><code>from lib import BoxTime
BoxTime.foo()
</code></pre></li>
<li><p>Run your client code. You will get:</p>
<pre><code>foo!
</code></pre></li>
</ul>
<hr/>
<p>Much later -- in linux, it would look like this:</p>
<pre><code>% cd ~/tmp
% mkdir lib
% touch lib/__init__.py
% cat &gt; lib/BoxTime.py &lt;&lt; EOF
heredoc&gt; def foo():
heredoc&gt;     print "foo!"
heredoc&gt; EOF
% tree lib
lib
├── BoxTime.py
└── __init__.py

0 directories, 2 files
% python 
Python 2.7.6 (default, Mar 22 2014, 22:59:56) 
[GCC 4.8.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from lib import BoxTime
&gt;&gt;&gt; BoxTime.foo()
foo!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try inserting it in <code>sys.path</code>:</p>
<pre><code>sys.path.insert(0, './lib')
import BoxTime
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Does your lib directory contain a <code>__init__.py</code> file?</p>
<p>Python uses <code>__init__.py</code> to determine if a directory is a module.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try <code>import .lib.BoxTime</code>. For more information read about relative import in <a href="http://dinsdale.python.org/dev/peps/pep-0328/#guido-s-decision" rel="noreferrer">PEP 328</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>I am writing this down because everyone seems to suggest that you have to create a <code>lib</code> directory. </p>
<p>You don't need to name your sub-directory <code>lib</code>. You can name it <code>anything</code> provided you put an <code>__init__.py</code> into it. </p>
<p>You can do that by entering the following command in a linux shell:</p>
<pre><code>$ touch anything/__init__.py 
</code></pre>
<p>So now you have this structure:</p>
<pre><code>$ ls anything/
__init__.py
mylib.py

$ ls
main.py
</code></pre>
<p>Then you can import <code>mylib</code> into <code>main.py</code> like this:</p>
<pre><code>from anything import mylib 

mylib.myfun()
</code></pre>
<p>You can also import functions and classes like this:</p>
<pre><code>from anything.mylib import MyClass
from anything.mylib import myfun

instance = MyClass()
result = myfun()
</code></pre>
<p>Any variable function or class you place inside <code>__init__.py</code> can also be accessed:</p>
<pre><code>import anything

print(anything.myvar)
</code></pre>
<p>Or like this:</p>
<pre><code>from anything import myvar

print(myvar)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I do this which basically covers all cases (make sure you have <code>__init__.py</code> in relative/path/to/your/lib/folder):</p>
<pre><code>import sys, os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/relative/path/to/your/lib/folder")
import someFileNameWhichIsInTheFolder
...
somefile.foo()
</code></pre>
<p><br/>
<strong>Example:</strong> <br/>
You have in your project folder: <br/></p>
<pre><code>/root/myproject/app.py
</code></pre>
<p>You have in another project folder: <br/></p>
<pre><code>/root/anotherproject/utils.py
/root/anotherproject/__init__.py
</code></pre>
<p>You want to use <code>/root/anotherproject/utils.py</code> and call foo function which is in it.</p>
<p>So you write in app.py:</p>
<pre><code>import sys, os
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + "/../anotherproject")
import utils

utils.foo()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Create an empty file  <code>__init__.py</code> in subdirectory /lib.
And add at the begin of main code</p>
<pre><code>from __future__ import absolute_import 
</code></pre>
<p>then</p>
<pre><code>import lib.BoxTime as BT
...
BT.bt_function()
</code></pre>
<p>or better</p>
<pre><code>from lib.BoxTime import bt_function
...
bt_function()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this:</p>
<p><code>from lib import BoxTime</code></p>
</div>
<div class="post-text" itemprop="text">
<p><code>/project/tester.py</code></p>
<p><code>/project/lib/BoxTime.py</code></p>
<p>create blank file <code>__init__.py</code> down the line till you reach the file</p>
<p><code>/project/lib/somefolder/BoxTime.py</code></p>
<p><code>#lib</code> -- needs has two items one <code>__init__.py</code> and a directory named somefolder
<code>#somefolder</code> has two items <code>boxtime.py</code> and <code>__init__.py</code></p>
</div>
<span class="comment-copy">Why does it feel <i>hacky</i>? It's the way python marks safe/available import directories.</span>
<span class="comment-copy">Not only it marks safe/available import directories, but also provides a way to run some initialization code when importing a directory name.</span>
<span class="comment-copy">Yes this is hacky and even dirty, and in my opinion the language shouldn't impose its way of loading files across the filesystem. In PHP we solved the problem by letting the userland code register multiple autoloading functions that are called when a namespace/class is missing. Then the community has produced the PSR-4 standard and Composer implements it, and nowadays nobody has to worry about that. And no stupid hardcoded <code>__init__</code> files (but if you want it, just register an autoloading hook ! This is the difference between <i>hacky</i> and <i>hackable</i>).</span>
<span class="comment-copy">@AurélienOoms <code>import sys, os; sys.path.insert(0, os.path.abspath('..')); from sibling_package.hacks import HackyHackHack</code></span>
<span class="comment-copy">didnt worked in python 3.6</span>
<span class="comment-copy">Could you provide a link to the Python documentation where this is explained? Thanks!</span>
<span class="comment-copy">@Zenon, try this: docs.python.org/tutorial/modules.html#packages</span>
<span class="comment-copy">Let's make that link clickable: <a href="https://docs.python.org/3/tutorial/modules.html#packages" rel="nofollow noreferrer">docs.python.org/3/tutorial/modules.html#packages</a></span>
<span class="comment-copy">This is great if you for some reason can't or won't create the <b>init</b>.py file.</span>
<span class="comment-copy">doesn't seem to work for me ('No module..' error)</span>
<span class="comment-copy">It works if you run python from the "project" directory. The "." is interpreted relative to your current working directory, not relative to the directory where the file you're executing lives. Say you <code>cd /data</code>, <code>python ../project/tester.py</code>. Then it won't work.</span>
<span class="comment-copy">This worked for me. I prefer this over an <i>init</i>.py file, it makes for cleaner import statements.</span>
<span class="comment-copy">This works MUCH better and is the "correct" solution.  <b>init</b>.py messes up packages like boto that have their own child folders with modules.</span>
<span class="comment-copy">I don't think I've ever seen that syntax used before. Is there strong reason (not) to use this method?</span>
<span class="comment-copy">Why wasn't this the answer. Sure, if you want to do the whole packages thing, you should do that. But that's not what the original question was.</span>
<span class="comment-copy">This gives me: ValueError: Attempted relative import in non-package</span>
<span class="comment-copy">This only works if the file you're importing from is itself part of a package. If not, you'll receive the error that @Alex pointed out.</span>
<span class="comment-copy">My folder structure is  <code>utils\__init__.py</code> and <code>utils\myfile.py</code>. (Utils contain both files) This is how I am trying to import <code>from utils.myfile import myMethod</code>. But I get <code>ModuleNotFoundError: No module named 'utils'</code>. What could be wrong?            <b>P.S:</b>  I am using <code>Django</code> and trying to import in <code>views.py</code> which is at the same level as <code>utils</code> folder</span>
<span class="comment-copy">@Jagruti it would make more sense to open a new stackoverflow question specifying necessary information like your folder structure and where you are starting the django application from.</span>
<span class="comment-copy">if you're using <code>os.path</code> you probably want to use <code>os.path.join((os.path.dirname(os.path.realpath(__file__)),'..','anotherproject')</code> instead of hardcoding the '/' in your path concatenation.</span>
<span class="comment-copy">Why can't you just do <code>"../anotherproject"</code> without the <code>os.path.dirname()</code>?</span>
<span class="comment-copy">@MosheRabaev - It is good practice to use os.path functions. In case of wrting "../anotherproject" and moving the code to Windows OS, the code will break! os.path utils knows how to return correct path considering the OS the code running on. for more info <a href="https://docs.python.org/2/library/os.path.html" rel="nofollow noreferrer">docs.python.org/2/library/os.path.html</a></span>
<span class="comment-copy">@MosheRabaev and if you use ".." without the <code>dirname(realpath(__file__))</code>, then it will compute the path relative to your current working directory when you run the script, not relative to where the script lives.</span>
<span class="comment-copy">@TJEllis Understood :)</span>
<span class="comment-copy">without any explanation this isn't very useful.</span>
