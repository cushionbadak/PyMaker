<div class="post-text" itemprop="text">
<p>I started learning python for the first time in an accelerated course on data science a few weeks ago and we were introduced early on to f-strings.</p>
<p>The simple code:</p>
<pre><code>name = 'Tim'
print(f'There are some who call me {name}...')
</code></pre>
<p>outputs the string "There are some who call me Tim..."</p>
<p>Through my browsing of various packages out of curiosity, I came upon pages like <a href="https://matplotlib.org/users/mathtext.html" rel="nofollow noreferrer">this one</a> detailing a function you can call in matplotlib to render $\LaTeX$-like expressions within the generated images.  In the example code they use something similar to f-strings but with an r instead of an f.</p>
<pre><code>import matplotlib.pyplot as plt
plt.title(r'$\alpha &gt; \beta$')
plt.show()
</code></pre>
<p>The resulting (<em>otherwise empty</em>) graph has a title using text which has been formatted similarly to how one would expect using MathJax or $\LaTeX$ with a greek character alpha and a greek character beta.</p>
<hr/>
<p>My questions are the following:</p>
<p>What precisely is an r-string and how does it compare to an f-string?  Are r-strings specifically used for matplotlib's mathtext and usetex?</p>
<p>Apart from f-strings and r-strings, are there any other notable similar string variants or alternates that I should familiarize myself with or be made aware of?</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>An r-string is a <strong>raw</strong> string.

<ul>
<li>It ignores escape characters. For example, <code>"\n"</code> is a string containing a newline character, and <code>r"\n"</code> is a string containing a backslash and the letter <code>n</code>.</li>
<li>If you wanted to compare it to an f-string, you could think of f-strings as being "batteries-included." It has tons of flexibility in the ability to escape characters and execute arbitrary expressions. The r-string on the other hand is stripped down and minimalist.</li>
<li>As far as actually using the things, typically you would use an r-string if you're passing the string into something else that uses a bunch of weird characters or does its own escaping so that you don't have to think too hard about how many backslashes you really need to get everything to work correctly. In your example, they at least needed r-strings to get the <code>\a</code> bit working correctly.</li>
</ul></li>
<li>Since you're using f-strings, I'll assume you have at least Python 3.6. Not all of these options are supported for older versions but any of the following prefixes are valid in Python 3.6+ in any combination of caps and lowers: <code>r, u, f, rf, fr, b, rb, br</code>
<ul>
<li>The b-strings are <em>binary literals</em>. In Python 2 they do nothing and only exist so that the source code is compatible with Python 3. In Python 3, they allow you to create a <a href="https://docs.python.org/3/library/stdtypes.html#bytes" rel="nofollow noreferrer"><code>bytes</code> object</a>. Strings can be thought of as a view of the underlying bytes, often restricted as to which combinations are allowed. The distinction in types helps to prevent errors from blindly applying text techniques to raw data. In Python 3, note that <code>'A'==b'A'</code> is <code>False</code>. These are not the same thing.</li>
<li>The u-strings are <a href="https://docs.python.org/3/howto/unicode.html" rel="nofollow noreferrer"><em>unicode literals</em></a>. Strings are unicode by default in Python 3, but the <code>u</code> prefix is allowed for backward compatibility with Python 2. In Python 2, strings are ASCII by default, and the <code>u</code> prefix allows you to include non-ASCII characters in your strings. For example, note the accented character in the french phrase <code>u"Fichier non trouvé"</code>.</li>
<li>In the kind of code I write, I rarely need anything beyond <code>r, u, f, b</code>. Even <code>b</code> is a bit out there. Other people deal with those prefixes every day (presumably). They aren't necessarily anything you need to familiarize yourself with, but knowing they exist and being able to find their documentation is probably a good skill to have.</li>
</ul></li>
</ol>
<p>Just so that it's in the answer instead of buried in a comment, @JamesGibson linked the <a href="https://docs.python.org/3.6/reference/lexical_analysis.html" rel="nofollow noreferrer">language specification</a>, and that's the same place I pulled the prefix list from. With your math background, a formal language specification might be especially interesting -- depending a little on how much you like algebra and mathematical logic.</p>
<p>Even if it's just for a semantically trivial language like Forth, I think many programmers would enjoy writing a short interpreter and gain valuable insight into how their language of choice works.</p>
</div>
<span class="comment-copy">Are you trying to discover capabilities, or are you looking for a way to do something specific?</span>
<span class="comment-copy"><a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">docs.python.org/3/reference/…</a></span>
<span class="comment-copy">@ReblochonMasque Mostly discovering capabilities.  As my background is in mathematics and as I spend a great deal of time over at math.stackexchange, I appreciate the ability to render mathematical equations properly rather than relying on ascii which brought me to the linked page through my curiosity.  As I am still very new to python (<i>but hopefully picking it up well</i>), I am trying to expose myself to many different things which I might possibly use in the future.  Of course, I understand there is too much to expose myself to everything, especially so soon, but I like to stretch.</span>
<span class="comment-copy">@PeterGibson Wonderful!  This seems to contain much of the information I was looking for.  Thank you for the reference.</span>
<span class="comment-copy">@AdamSmith In the course I am enrolled in, over the first two weeks we hit Excel and VBA.  We started python in the third week, the first example program being a simple 'Hello World' (<i>mostly for checking we had things installed properly</i>) and f-strings were already being used in the following example.  We have since been covering pandas and matplotlib.  It is both helpful and hurtful at times to be learning just through examples and activities without the use of a textbook.</span>
<span class="comment-copy">Great answer! Could you perhaps add a sentence on what <code>b</code> and <code>u</code> strings are, to make this even more informative?</span>
<span class="comment-copy">@DanielLenz Thank you, and that's a good idea. I should probably also throw in a compatibility chart since it isn't even a 2vs3 thing. What do you think?</span>
<span class="comment-copy">That's a matter of taste, it might get a bit too clunky. I think a short comment and a link to the python docs should suffice. Thanks!</span>
<span class="comment-copy">Thank you again for taking the time to answer.  Between this and the link to the documentation it satisfied much of my curiosity and provided me with the necessary additional vocabulary and keywords that I could continue searching with for more.  As an aside, "<i>...In your example, they at least needed r-strings to get the <code>\a</code> bit working correctly.</i>"  It seems you might not be too familiar with MathJax or LaTeX.  If curious, here is a <a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax primer</a>.  I'm somewhat surprised its not enabled here.</span>
<span class="comment-copy">Quite familiar with LaTeX, not so much with MathJax. What I was getting at was that <code>r'$\alpha$'</code> is completely different from <code>'$\alpha$' as far as Python is concerned. The combination </code>\a` is an escaped sequence corresponding to the ASCII BEL character. To get that to work correctly without raw strings you need to also escape the backslash to that a backslash and the letter 'a' are sent to LaTeX `'$\\alpha$'. Raw strings attempt to solve the problem of stacked escaping between multiple languages (e.g. Python the LaTeX).</span>
