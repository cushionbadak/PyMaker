<div class="post-text" itemprop="text">
<p>Let's say I have this list:</p>
<pre><code>lst = [1, 2, 3, 4]
</code></pre>
<p>and I want to check if a certain value answers to a condition, and if yes, modify that value. What is the best way to do it? Like a mix of clarity and efficiency. I came up with these 3 options:</p>
<pre><code># option 1
for i, item in enumerate(lst):
    if item == 2:
        lst[i] = 7

# option 2
counter = 0
for i in lst:
    if i == 2:
        lst[counter] = 7
    counter += 1

# option 3
for i in range(len(lst)):
    if lst[i] == 2:
        lst[i] = 7
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest to use a mixture of list comprehension and function definition:</p>
<pre><code>lst = [1, 2, 3, 4]

def replace(x,y=2,z=7):
    """Replace value if condition holds. 

    Keyword arguments:
    x -- value to check for replacement
    y -- x will be replaced if it has the value of y
    z -- x will be replaced by z if x is equal to y
    """
    if(x==y):
        x=z
    return x

lst = [replace(x,2,7) for x in lst]
</code></pre>
</div>
<span class="comment-copy">Option 4 is a list-comp: <code>lst[:] = [7 if v == 2 else v for v in lst]</code>...</span>
<span class="comment-copy">Here it turns out it does not matter, but it is good practice not to update and object over which you are iterating, making the <code>range</code> approach the preferred one.</span>
<span class="comment-copy">@YanivK. it's called a "list comprehension" - you'll find them a fair bit in Python - so it's definitely not a bad idea if you familiarise yourself with them. <a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/" rel="nofollow noreferrer">treyhunner.com/2015/12/python-list-comprehensions-now-in-color</a> is a relatively nice overview which at the top also links to the rather concise Python docs at <a href="https://docs.python.org/3/tutorial/datastructures.html#tut-listcomps" rel="nofollow noreferrer">docs.python.org/3/tutorial/datastructures.html#tut-listcomps</a></span>
<span class="comment-copy">@YanivK. To add a bit to what Jon said: List comprehensions are basically an efficient and clean way to build new lists. While I understand the fact that you're wary of one-line solutions - and rightfully so, people often do overuse them - your case is an example where a one-line solution is not only okay but the best option.</span>
<span class="comment-copy">@vash_the_stampede if you only want the index - aren't going to bother with the value because you're using the index to access something related - then sure - there's no harm in using <code>range(len(lst))</code> - however, don't forget that things can be iterated over that aren't necessarily sequences (eg: they don't have a length (so <code>len(obj)</code> will fail) - so you'd have to enumerate or for-loop and keep your own counter)... Unless you have a real reason not to use <code>enumerate</code> or where you're going to be accessing the value of the current iterationn - I'd suggest you get into the habit of using that :)</span>
