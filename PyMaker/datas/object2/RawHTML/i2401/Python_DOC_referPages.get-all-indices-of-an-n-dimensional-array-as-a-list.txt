<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/25026136/simpler-way-to-create-a-matrix-list-of-indices">Simpler way to create a matrix/list of indices?</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>Is there a way to get a list or array of all indices in an N-dimensional array in a fast and efficient way in Python?</p>
<p>For example, image we have the following array:</p>
<pre><code>import numpy as np

test = np.zeros((4,4))

array([[0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.]])
</code></pre>
<p>I would like to get all element indices as follows:</p>
<pre><code>indices = [ [0,0],[0,1],[0,2] ... [3,2],[3,3] ]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.indices.html" rel="nofollow noreferrer"><code>np.indices</code></a> with a bit of reshaping:</p>
<pre><code>np.indices(test.shape).reshape(2, -1).T
</code></pre>
<p></p>
<pre><code>array([[0, 0],  
       [0, 1],  
       [0, 2],  
       [0, 3],  
       [1, 0],  
       [1, 1],  
       [1, 2],  
       [1, 3],  
       [2, 0],  
       [2, 1],  
       [2, 2],  
       [2, 3],  
       [3, 0],  
       [3, 1],  
       [3, 2],  
       [3, 3]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are fine with using a list comprehension</p>
<pre><code>test = np.zeros((4,4))
indices = [[i, j] for i in range(test.shape[0]) for j in range(test.shape[1])]
print (indices)

[[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I'd suggest making an array of <code>1</code> in the same shape as your <code>test</code> array using <code>np.ones_like</code>, then using <code>np.where</code>:</p>
<pre><code>&gt;&gt;&gt; np.stack(np.where(np.ones_like(test))).T
# Or np.dstack(np.where(np.ones_like(test)))
array([[0, 0],
       [0, 1],
       [0, 2],
       [0, 3],
       [1, 0],
       [1, 1],
       [1, 2],
       [1, 3],
       [2, 0],
       [2, 1],
       [2, 2],
       [2, 3],
       [3, 0],
       [3, 1],
       [3, 2],
       [3, 3]])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just enumerate should do:</p>
<pre><code>test = [[0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.]]

indices = [[i, j] for i, row in enumerate(test) for j, col in enumerate(row)]
print(indices)

&gt;&gt;&gt; [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3], [4, 0], [4, 1], [4, 2], [4, 3]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can try <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer"><code>itertools.product</code></a>:</p>
<pre><code>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; 
&gt;&gt;&gt; [list(i) for i in product(range(4), range(4))]
[[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]
</code></pre>
</div>
<span class="comment-copy">You could always use nested <code>for</code> loops</span>
<span class="comment-copy">I was hoping for something quicker..that's not be trying to be rude I'm just trying to optimise some code and getting a list like above might be a good way to do it :)</span>
<span class="comment-copy">Something in <code>itertools</code> should be able to generate all the combinations.</span>
<span class="comment-copy">There's literally <code>numpy.indices</code>.</span>
<span class="comment-copy">Thanks numpy.indices seemed to be the easiest!</span>
<span class="comment-copy">You might further want to convert the tuples into list</span>
