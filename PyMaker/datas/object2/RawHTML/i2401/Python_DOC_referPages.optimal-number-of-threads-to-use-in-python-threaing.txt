<div class="post-text" itemprop="text">
<p>I want to call an API to get some data in response via a socket, so let's say I have 58 threads which call the APIs in parallel. Ideally, I wanted them to run all of them at once and does not put a load on my machine. But for some reason, some threads are blocked, I assume that there are is a limitation on threads to call based on your system.</p>
<pre><code>admin:~$ lscpu
Architecture:        x86_64
CPU op-mode(s):      32-bit, 64-bit
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  2
Core(s) per socket:  2
Socket(s):           1
NUMA node(s):        1
Vendor ID:           GenuineIntel
CPU family:          6
Model:               58
Model name:          Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz
Stepping:            9
CPU MHz:             1434.299
CPU max MHz:         3100.0000
CPU min MHz:         1200.0000
BogoMIPS:            4988.39
Virtualization:      VT-x
L1d cache:           32K
L1i cache:           32K
L2 cache:            256K
L3 cache:            3072K
NUMA node0 CPU(s):   0-3
</code></pre>
<p>There are two things, I want to know about:</p>
<blockquote>
<ul>
<li>How many threads I can create which does not block, or an optimum number of threads to call?</li>
<li>If I can't run those 58 threads, is there a better way?</li>
<li>If I replace multiprocessing with multithreading, will that help?</li>
</ul>
</blockquote>
<p><code>UPDATE 1</code></p>
<p>After reading some valueable comments, I figured out that my question is not clear enough, so here I will try to be clear this time around.</p>
<p>I have 58 different apis to hit for data, let's say for the assumption, we have a server where there are cameras installed(58 cams). I want to call them individually to get frames from every camera and I want them at once. For instance, to get all camera frame at a given timestamp, I send an HTTP request and get the image. Problem is when i run the 58 threads, some threads works well, while some thread takes alot of time, Its my understanding that these threads are blocking. How do I ensure that every call takes ~0.5 sec to get a frame (assume that it takes ~5 sec to get one frame)</p>
<p>Language: Python3</p>
<p>Would someone help me understand and optimize this process? 
Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to use <a href="https://docs.python.org/3.7/library/multiprocessing.html" rel="nofollow noreferrer">AsyncIO</a>.</p>
<hr/>
<p>The standard Python implementation has a GIL. This means only one thread can run at a time. This means that you don't want any additional threads if you can help it.</p>
<p>Over the years, python came up with multiple solutions around the GIL. </p>
<p>One of them is <a href="https://docs.python.org/3.7/library/multiprocessing.html" rel="nofollow noreferrer">multiprocessing</a> the other one is <a href="https://docs.python.org/3/library/asyncio.html" rel="nofollow noreferrer">asyncio</a>. Since you are waiting for (what I assume Network) API responses you should take a look at AsyncIO.</p>
<ul>
<li>Multiprocessing spawns new processes. If your program is doing heavy computations, use the Multiprocessing module to paralellize your workload.</li>
<li>If your threads are primarily waiting for IO, AsyncIO is the direction you should look at.</li>
</ul>
</div>
<span class="comment-copy">There are many reasons your thread might be blocking, the <a href="https://realpython.com/python-gil/" rel="nofollow noreferrer">GIL</a> is one of them, but also normal socket operations are usually blocking unless stated otherwise. Can you share some of your code?</span>
<span class="comment-copy">The API might well notice that you're hitting its API 58 times in parallel from the same IP address and throttle, or even block, your access. Make sure you're not violating their terms of service.</span>
<span class="comment-copy">You need to profile your code. What is taking long time? Do you process the data when you receive it? In that case your threads may be blocking each other due to the GIL. Otherwise maybe you have a bad network connection, so some replys are late no matter what? It is hard to know exactly how to approach the problem without knowing what is happening.</span>
<span class="comment-copy">While AsyncIO often is a better approach when waiting for data, 58 threads should not be an issue, if we are mainly waiting for the network anyway. I would guess the problem lays elsewhere.</span>
<span class="comment-copy">I have updated the question to be more clear, can you check :)</span>
