<div class="post-text" itemprop="text">
<p>Can you please help me out to figure what I did wrong? I have the following unit test for a python lambdas</p>
<pre><code>class Tests(unittest.TestCase):
    def setUp(self):
        //some setup

    @mock.patch('functions.tested_class.requests.get')
    @mock.patch('functions.helper_class.get_auth_token')
    def test_tested_class(self, mock_auth, mock_get):

        mock_get.side_effect = [self.mock_response]
        mock_auth.return_value = "some id token"

        response = get_xml(self.event, None)

        self.assertEqual(response['statusCode'], 200)
</code></pre>
<p>The problem is that when I run this code, I get the following error for <code>get_auth_token</code>:</p>
<pre><code> Invalid URL '': No schema supplied. Perhaps you meant http://?
</code></pre>
<p>I debugged it, and it doesn't look like I patched it correctly. The Authorization helper file is in the same folder "functions" as the tested class. </p>
<p><strong>EDIT</strong>:
In the tested_class I was importing get_auth_token like this:</p>
<pre><code>from functions import helper_class
from functions.helper_class import get_auth_token
...
def get_xml(event, context):
    ...
    response_token = get_auth_token()
</code></pre>
<p>After changing to this, it started to work fine</p>
<pre><code>import functions.helper_class
...
def get_xml(event, context):
    ...
    response_token = functions.helper_class.get_auth_token()
</code></pre>
<p>I still don't fully understand why though</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li>In your first scenario </li>
</ul>
<p>in <code>tested_class.py</code>, <code>get_auth_token</code> is imported</p>
<pre><code>from functions.helper_class import get_auth_token
</code></pre>
<p>The patch should be exactly the <code>get_auth_token</code> at <code>tested_class</code></p>
<pre><code>@mock.patch('functions.tested_class.get_auth_token')
</code></pre>
<ul>
<li>Second scenario</li>
</ul>
<p>With the following usage</p>
<pre><code> response_token = functions.helper_class.get_auth_token()
</code></pre>
<p>The only way to patch is this</p>
<pre><code>@mock.patch('functions.helper_class.get_auth_token')
</code></pre>
<ul>
<li>alternative</li>
</ul>
<p>With import like this in <code>tested_class</code></p>
<pre><code>from functions import helper_class
helper_class.get_auth_token()
</code></pre>
<p>patch could be like this:</p>
<pre><code>@mock.patch('functions.tested_class.helper_class.get_auth_token')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>patch() works by (temporarily) changing the object that a name points to with another one. There can be many names pointing to any individual object, so for patching to work, you must ensure that you patch the name used by the system under test.</p>
<p>The basic principle is that you patch where an object is looked up, which is not necessarily the same place as where it is defined. </p>
<p>Python documentation has a very good example. <a href="https://docs.python.org/3/library/unittest.mock.html#where-to-patch" rel="nofollow noreferrer">where to patch</a></p>
</div>
<span class="comment-copy">Now that I read your answer, it makes more sense. Thanks for the explanation!</span>
