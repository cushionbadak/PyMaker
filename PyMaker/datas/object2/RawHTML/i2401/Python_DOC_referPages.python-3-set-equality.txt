<div class="post-text" itemprop="text">
<p>Why does CPython (no clue about other Python implementations) have the following behavior?</p>
<pre><code>tuple1 = ()
tuple2 = ()                                                                                                   
dict1 = {}
dict2 = {}
list1 = []
list2 = []
# makes sense, tuples are immutable
assert(id(tuple1) == id(tuple2))
# also makes sense dicts are mutable
assert(id(dict1) != id(dict2))
# lists are mutable too
assert(id(list1) != id(list2))
assert(id(()) == id(()))
# why no assertion error on this?
assert(id({}) == id({}))
# or this?
assert(id([]) == id([]))
</code></pre>
<p>I have a few ideas why it <em>may</em>, but can't find a <em>concrete</em> reason why.</p>
<p><strong>EDIT</strong></p>
<p>To further prove Glenn's and Thomas' point:</p>
<pre><code>[1] id([])
4330909912
[2] x = []
[3] id(x)
4330909912
[4] id([])
4334243440
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>CPython is garbage collecting objects as soon as they go out of scope, so the second <code>[]</code> is created after the first <code>[]</code> is collected.  So, most of the time it ends up in the same memory location.</p>
<p>This shows what's happening very clearly (the output is likely to be different in other implementations of Python):</p>
<pre><code>class A(object):
    def __init__(self): print "a",
    def __del__(self): print "b",

# a a b b False
print A() is A()
# a b a b True
print id(A()) == id(A())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When you call <code>id({})</code>, Python creates a dict and passes it to the <code>id</code> function. The <code>id</code> function takes its id (its memory location), and throws away the dict. The dict is destroyed. When you do it twice in quick succession (without any other dicts being created in the mean time), the dict Python creates the second time happens to use the same block of memory as the first time. (CPython's memory allocator makes that a lot more likely than it sounds.) Since (in CPython) <code>id</code> uses the memory location as the object id, the id of the two objects is the same. This obviously doesn't happen if you assign the dict to a variable and then get its <code>id()</code>, because the dicts are alive <em>at the same time</em>, so their <code>id</code> has to be different.</p>
<p>Mutability does not directly come into play, but code objects caching tuples and strings do. In the same code object (function or class body or module body) the same literals (integers, strings and certain tuples) will be re-used. Mutable objects can never be re-used, they're always created at runtime.</p>
<p>In short, an object's id is only unique <em>for the lifetime of the object</em>. After the object is destroyed, or before it is created, something else can have the same id.</p>
</div>
<div class="post-text" itemprop="text">
<p>it doesn't work the same way in Jython...</p>
<pre><code>&gt;&gt;&gt; id({})
1
&gt;&gt;&gt; id([])
2
</code></pre>
<p>Could there be an optimization going on where commonly used (i.e. empty) containers are "interned" to save on allocation costs?</p>
<p>This (in CPython) suggests not:</p>
<pre><code>&gt;&gt;&gt; def mutateid(obj):
...   obj.append('x')
...   print obj
...   print id(obj)
... 
&gt;&gt;&gt; mutateid([])
['x']
4299590472
&gt;&gt;&gt; id([])
4299590472
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The == operator on lists and dicts do not compare the object IDs to see if they the same object - use <code>obj1 is obj2</code> for that.</p>
<p>Instead the == operator compares the members of the list of dict to see if they are the same.  </p>
</div>
<span class="comment-copy">Wow, that is weird. It looks like if you get the id if a new dict/list, and then let its reference count drop to zero, and then get another new dict/list it'll have the same id. It looks like an unmodified dict/list is saved for later when its reference count drops to zero. My guess is that this is an optimization for the case where code that creates and immediately discards dicts/lists. This is pretty common, eg: code that uses <code>setdefault</code> often does this.</span>
<span class="comment-copy">@Potatoswatter: Definitely not.  The ID of an object never changes after it's created, and lists and dicts are mutable objects, so empty lists and dicts can not be memoized in the way that strings and small numbers are.</span>
<span class="comment-copy">@Glenn Maynard: technically, you can memoize empty list and dict by first emptying them before discarding; however, that's probably just a waste of processor cycle compared to creating a new one.</span>
<span class="comment-copy">@Lie Ryan: I don't really know what you're saying, but you can't memoize the empty list, because the id of an object must remain constant for its lifetime.</span>
<span class="comment-copy">@Glenn Maynard: yes you can. Technically, you can have a pool of empty lists and empty dicts; every time you need a new dict, this pool is checked, and every time you dispose of a list (i.e. when the refcount is zero) you put the list/dict back into the pool. There is no requirement that two objects in two different times does not have the same id(). However, there isn't very much savings to be had here. <i>I just realized, this isn't memoization, but caching</i></span>
<span class="comment-copy">Although Thomas' answer is equally correct, you provide concrete reasoning which is what I was looking for.</span>
<span class="comment-copy">So why does <code>print id({}); a = []; print id({})</code> print the same value twice in cpython? Shouldn't that list being stored in <code>a</code> take up the spot freed up by the first dict?</span>
<span class="comment-copy">@Laurence: No, not necessarily.  Allocators are complex and heavily optimized; they don't simply take the first address available.  In this case, the dict object and the list object have very different sizes, which probably puts them into different allocation buckets.</span>
<span class="comment-copy">In Python 3.x, the way the allocators work (at the high level) is <a href="https://docs.python.org/3/c-api/memory.html#customize-memory-allocators" rel="nofollow noreferrer">a documented part of the the C API</a> rather than buried in comments in the source, although I think the specific custom list and dict/set allocators and freelists are only documented in the source (<a href="https://hg.python.org/cpython/file/default/Objects/listobject.c#l94" rel="nofollow noreferrer"><code>Objects/listobject.c</code></a> and <code>dictobject.c</code>).</span>
<span class="comment-copy">Another way to see this is this snippet: <code>x = []; i = id(x); del x; gc.collect(); i == id([])</code> . If you drop the <code>gc.collect()</code> call this will (likely) return <code>False</code>, otherwise (likely) <code>True</code>.</span>
<span class="comment-copy">Is there a shorter way to say "vote-up-the-top-ansewr-and-ignore-the-rest-regardless-of-merit-itis"?</span>
<span class="comment-copy">Sort of Glenn, you mark it as the answer :)</span>
<span class="comment-copy">@spenthil: Mark-the-top-answer-correct-ignoring-the-clearer-answer-below-it-itis?  That does, indeed, also happen.  :P</span>
<span class="comment-copy">Without making any comment on the relative merits of the answers, I feel that upvotes should be scaled , e.g. worth <code>some_constant * log(upvoter_rep) / log(answerer_rep)</code></span>
<span class="comment-copy">@Glenn: I'm not sure why my answer has less merit than yours. Sure, it's longer, and it doesn't contain the experimentation you did in yours, but that's because I actually know these things from the CPython source. There's no need for experimentation.</span>
<span class="comment-copy">That's for two reasons, really: first of all Jython uses Java's GC, which means objects aren't collected as soon as the last reference goes away (like in CPython). Second of all, because Java objects aren't in fixed memory locations (like in CPython), Jython can't use the object's memory address for its id. It has to use something else while keeping the semantics of <code>id()</code>. As I recall, Jython uses a counter that only starts counting when you call <code>id()</code> on an object.</span>
<span class="comment-copy">That code doesn't really test the same phenomenon that the OP is asking about. What does <code>id({}) == id({})</code> return in Jython?</span>
<span class="comment-copy">&gt;&gt;&gt; id({}) == id({})   False &gt;&gt;&gt;</span>
<span class="comment-copy">He's not comparing <code>[] == []</code>, he's comparing <code>id([]) == id([])</code>.</span>
<span class="comment-copy">Notice how he's not comparing the lists and dicts, but their <code>id()</code>.</span>
<span class="comment-copy">The OP isn't trying to do that.</span>
<span class="comment-copy">Actually, most implementations of == checks with <code>is</code> operator first before doing member-wise check. Reason being two objects with the same id must have the same content. But you're right that <code>id()</code> comparison should be done using <code>is</code> operator instead of <code>id(a) == id(b)</code>; and that taking the id() of an object is generally meaningless.</span>
<span class="comment-copy">@Lie Ryan interestingly, that doesn't work in this case: <code>[] is []</code> is <code>False</code>. I guess passing the first <code>[]</code> to <code>id</code> creates a scope for it to go out of.</span>
