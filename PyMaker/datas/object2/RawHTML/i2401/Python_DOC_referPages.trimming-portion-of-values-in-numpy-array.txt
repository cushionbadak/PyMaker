<div class="post-text" itemprop="text">
<p>I want just the first 10 characters of each value in the array.</p>
<p>Here is the array: </p>
<pre><code>array(['2018-06-30T00:00:00.000000000', '2018-06-30T00:00:00.000000000',
   '2018-06-30T00:00:00.000000000', '2018-06-30T00:00:00.000000000',
   '2018-06-30T00:00:00.000000000', '2018-06-30T00:00:00.000000000',
   '2018-06-30T00:00:00.000000000', '2018-09-30T00:00:00.000000000']
</code></pre>
<p>I would like to write code that will give me this:</p>
<pre><code>array(['2018-06-30','2018-06-30'   .... etc
</code></pre>
<p>Here's an update:
My code is:</p>
<pre><code>x = np.array(df4['per_end_date'])
x
</code></pre>
<p>the output is:</p>
<pre><code>array(['2018-06-30T00:00:00.000000000', '2018-06-30T00:00:00.000000000',
   '2018-06-30T00:00:00.000000000', '2018-06-30T00:00:00.000000000',
   '2018-06-30T00:00:00.000000000', '2018-06-30T00:00:00.000000000',
   '2018-06-30T00:00:00.000000000', '2018-09-30T00:00:00.000000000',
   '2018-09-30T00:00:00.000000000', '2018-09-30T00:00:00.000000000', etc
</code></pre>
<p>I would like just the first 10 characters of each value in the array.
The following code give me the error IndexError: invalid index to scalar variable.</p>
<pre><code>x = np.array([y[:9] for y in x])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Although <code>numpy</code> isn't always the best way to manipulate strings, you can vectorize this operation, and as always, vectorized functions should be prefered to iteration.</p>
<p><strong><em>Setup</em></strong></p>
<pre><code>arr = np.array(['2018-06-30T00:00:00.000000000', '2018-06-30T00:00:00.000000000',
   '2018-06-30T00:00:00.000000000', '2018-06-30T00:00:00.000000000',
   '2018-06-30T00:00:00.000000000', '2018-06-30T00:00:00.000000000',
   '2018-06-30T00:00:00.000000000', '2018-09-30T00:00:00.000000000'],
  dtype='&lt;U29')
</code></pre>
<hr/>
<p>Using <strong><code>np.frombuffer</code></strong></p>
<pre><code>np.frombuffer(
    arr.view((str, 1 )).reshape(arr.shape[0], -1)[:, :10].tostring(),
    dtype=(str,10)
)
</code></pre>
<p></p>
<pre><code>array(['2018-06-30', '2018-06-30', '2018-06-30', '2018-06-30',
       '2018-06-30', '2018-06-30', '2018-06-30', '2018-09-30'],
      dtype='&lt;U10')
</code></pre>
<p><strong><em>Timings</em></strong></p>
<pre><code>arr = np.repeat(arr, 10000)

%timeit np.array([y[:10] for y in arr])
48.6 ms ± 961 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)

%%timeit
np.frombuffer(
    arr.view((str, 1 )).reshape(arr.shape[0], -1)[:, :10].tostring(),
    dtype=(str,10)
)

6.87 ms ± 311 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

%timeit np.array(arr,dtype= 'datetime64[D]')
44.9 ms ± 2.93 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is quite basic task of working with lists in python</p>
<pre><code>import numpy
x = numpy.array(['2018-06-30T00:00:00.000000000', '2018-06-30T00:00:00.000000000',
           '2018-06-30T00:00:00.000000000', '2018-06-30T00:00:00.000000000',
           '2018-06-30T00:00:00.000000000', '2018-06-30T00:00:00.000000000',
           '2018-06-30T00:00:00.000000000', '2018-09-30T00:00:00.000000000'])
numpy.array([y[:10] for y in x])
# array(['2018-06-30', '2018-06-30', '2018-06-30', '2018-06-30',
#        '2018-06-30', '2018-09-30'], 
#        dtype='|S10')
</code></pre>
<p>For more information you should read a bit of documentation on <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehensions</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Okay, I figured it out.  </p>
<pre><code>df4['per_end_date'].dtype
</code></pre>
<p>output: </p>
<pre><code>dtype('&lt;M8[ns]')
</code></pre>
<p>So, the following code worked perfectly.</p>
<pre><code>x = np.array(df4['per_end_date'],dtype= 'datetime64[D]')
x
</code></pre>
<p>output:</p>
<pre><code>array(['2018-06-30', '2018-06-30', '2018-06-30', '2018-06-30',
   '2018-06-30', '2018-06-30', '2018-06-30', '2018-09-30',
   '2018-09-30', '2018-09-30', '2018-09-30', '2018-09-30',
   '2018-09-30', '2018-09-30', '2018-09-30', '2018-09-30', etc
</code></pre>
<p>Great when you can figure it out.  :)</p>
</div>
<span class="comment-copy">There must be other elements in this <code>x</code> array, e.g empty string. Please check it.</span>
<span class="comment-copy">you dont have to write 0 in your slice though</span>
<span class="comment-copy">I removed the "0" in "0:9", but got the same error.</span>
<span class="comment-copy">Can you show the data for which you have the error? It works fine for the example you have provided</span>
<span class="comment-copy">@user3672037 please don't edit my answers for your response but instead comment or edit your question...</span>
