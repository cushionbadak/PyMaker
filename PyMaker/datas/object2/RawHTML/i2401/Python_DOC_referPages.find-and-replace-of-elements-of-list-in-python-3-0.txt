<div class="post-text" itemprop="text">
<p>I am having 3 big lists <code>L0</code>, <code>L1</code> and <code>L2</code> with 106756, 106588 and 100 words respectively.</p>
<p><code>L0</code> and <code>L1</code> consisting the data tokenize into token of words, and <code>L2</code> consisting of the words that are common to both <code>L0</code> and <code>L1</code> lists.</p>
<p>Suppose that,</p>
<pre><code>L1 = ['newnes', 'imprint', 'elsevier', 'corporate', 'drive', 'suite',
     'burlington', 'usa', 'linacre', 'jordan', 'hill', 'oxford', 'uk', 
     'elsevier', 'inc', 'right', 'reserved', 'exception', 'newness', 'uk', ...]

L2 = ['usa', 'uk', 'hill', 'drive', ... ]
</code></pre>
<p>As you can see in L1 list there is <code>repetition of the words</code> like <code>'newness'</code>, <code>'uk'</code>. </p>
<p>What I need is that, for every <code>discovered (found)</code> word in <code>L2</code>, like (say <code>'newness'</code>, <code>'uk'</code>), I need to replace it with its <code>modified injected form</code> like appending a <code>special character</code> either at the <code>start</code> or <code>end</code> <code>position</code> of that discovered word. 
Further, for all instances of the discovered word (in <code>L2</code>), should be replaced with the modified version of the same word in <code>L1</code>. For Example,</p>
<p>Suppose, the word <code>newness</code> occurred 100 times in <code>L1</code> list (say) and newness is a word also present in <code>L2</code>. Similarly, there are also 100 words in <code>L2</code> and that are also present in <code>L1</code>, with multiple frequencies. </p>
<p>Then, after transformation the list should look somewhat like this:</p>
<pre><code>newness ------&gt; $newness$

uk -----------&gt; $uk$ 
</code></pre>
<p>...</p>
<p>How to achieve this in a list? Help please. I am also a new-bie to python. I am just curious to know whether there exist some command in python for achieving this? I don't know where to start?</p>
</div>
<div class="post-text" itemprop="text">
<p>To count things in list, python provides a dict-like Counter() class in its collections module: <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Doku</a> which counts occurences in O(n) and provides them as dictionary.</p>
<pre><code>from collections import Counter


L1 = ['newnes', 'imprint', 'elsevier', 'corporate', 'drive', 'suite',
     'burlington', 'usa', 'linacre', 'jordan', 'hill', 'oxford', 'uk', 
     'elsevier', 'inc', 'right', 'reserved', 'exception', 'newness', 'uk', ...]

L2 = ['usa', 'uk', 'hill', 'drive', ... ]


c = Counter(L1)
print(c)
</code></pre>
<p>Output:</p>
<pre><code>Counter({'elsevier': 2, 'uk': 2, 'newnes': 1, 'imprint': 1, 'corporate': 1, 
         'drive': 1, 'suite': 1, 'burlington': 1, 'usa': 1, 'linacre': 1, 
         'jordan': 1, 'hill': 1, 'oxford': 1, 'inc': 1, 'right': 1, 'reserved': 1,
         'exception': 1, 'newness': 1, Ellipsis: 1})
</code></pre>
<p>It provides a convenience method to get the result sorted as list of tuples <code>(key, count)</code> named <a href="https://docs.python.org/3/library/collections.html#collections.Counter.most_common" rel="nofollow noreferrer">most_common()</a> - if you use the first one, you get the most used word which you can use together with a list comprehension to modify your source list: </p>
<pre><code>word,_ = c.most_common()[0]  # get word mos often used

# inplace modification of L1
L1[:] = [ x if x != word else "#"+word+"#" for x in L1] # use x if not the most used word
L2[:] = [ x if x != word else "#"+word+"#" for x in L2] # else pre-/append #

print(L1)
print(L2)
</code></pre>
<p>Output:</p>
<pre><code>['newnes', 'imprint', '#elsevier#', 'corporate', 'drive', 'suite', 'burlington', 
 'usa', 'linacre', 'jordan', 'hill', 'oxford', 'uk', '#elsevier#', 'inc', 
 'right', 'reserved', 'exception', 'newness', 'uk', Ellipsis]

['usa', 'uk', 'hill', 'drive', Ellipsis]
</code></pre>
<p>The order of items in <code>Counter</code> relates to the order in the original list, you got multiple items wiht a count of 2 in <code>L1</code> - <code>elsevier</code> is the first of them, hence it is also the first when using <code>most_common()</code> </p>
<hr/>
<p>Edit 4 comment:</p>
<pre><code>from collections import Counter

L1 = ['newnes', 'imprint', 'elsevier', 'corporate', 'drive', 'suite',
     'burlington', 'usa','imprint', 'linacre', 'jordan', 'hill', 'oxford', 'uk','uk', 
     'elsevier', 'inc', 'right', 'reserved','imprint', 'exception', 'imprint','newness', 'uk', "..."]

L2 = ['usa', 'uk', 'hill', 'drive', "..."]


c = Counter(L1) 


substs = "#*+~-:;=)(/&amp;%$§!"
i = 0
for word,count in c.most_common():
    temp = substs[i]*count # use the i-th char as substitute, apply it count times
    L1[:] = [ x if x != word else temp+word+temp for x in L1] # use x if not the most used word
    L2[:] = [ x if x != word else temp+word+temp for x in L2] # else pre-/append #
    i += 1
    i = i % len(substs) # wrap around

print(L1)
print(L2)
</code></pre>
<p>Output:</p>
<pre><code>['~newnes~', '####imprint####', '++elsevier++', '-corporate-', ':drive:', ';suite;', 
 '=burlington=', ')usa)', '####imprint####', '(linacre(', '/jordan/', '&amp;hill&amp;', 
 '%oxford%', '***uk***', '***uk***', '++elsevier++', '$inc$', '§right§', '!reserved!', 
 '####imprint####', '#exception#', '####imprint####', '*newness*', '***uk***', 
 '+...+']

[')usa)', '***uk***', '&amp;hill&amp;', ':drive:', '+...+']
</code></pre>
</div>
<span class="comment-copy">Thanks a lot Patrick for the answer.</span>
<span class="comment-copy">The above code transform only the top word of List 1, having the highest frequency. How to incorporate the same in all the words of list irrespective of frequency? I mean how to transform both the words <code>elsevier</code> and <code>uk</code> of L1 in a single step?</span>
<span class="comment-copy">@MishraSiba see edit. Not in a single step, but you can iterate over the Counter-results and apply any changes that you like to both lists. I use the <code>i-th</code> character and multiply it count times before pre-/postfixing, for all results of counter. This is not one step, its a look that modifies one list after the other, replacing one word, then the next. use a <code>print(L1)</code> inside the loop to see your data change forms.</span>
<span class="comment-copy">Thanks a ton @Patrick</span>
<span class="comment-copy">@M_S youmight need to ask a new question if it is a different problem - if you tried solving it with this answer, detail how/what did not work as you thought you needed it to work.</span>
