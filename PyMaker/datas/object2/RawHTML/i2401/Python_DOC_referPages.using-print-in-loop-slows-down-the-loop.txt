<div class="post-text" itemprop="text">
<p>Using <code>print</code> in a loop slows down the loop. Printing something <sup><em>(I tried with <code>Hello!</code>)</em></sup> 100 times take ~2 sec, without it, it takes 0.0 second. I accurately captured the time using module <code>time</code>. Here is a loop that prints in it and shows the time taken at the end:</p>
<pre><code>import time

t = time.time()
for _ in range(100):
    print("Hello! ",end = "")

print("\n",time.time()-t)
</code></pre>
<p>Output:  </p>
<blockquote>
<pre><code>Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! Hello! 
 1.9912450313568115
</code></pre>
</blockquote>
<hr/>
<p>Here is another loop that just adds string to a variable and <strong>its taking 0.0 seconds</strong>.</p>
<pre><code>import time

t = time.time()
output = ""
for _ in range(100):
    output += "Hello! "

print(time.time()-t)
</code></pre>
<p>Output:  </p>
<blockquote>
<pre><code>0.0
</code></pre>
</blockquote>
<hr/>
<p>I tried adding more operations but it it still taking <code>0.0</code> seconds. Example:</p>
<pre><code>import time

t = time.time()
output,num,count,abc = "",0,30,"H"
for _ in range(100):
    output += "Hello! "
    num += 10000
    count += 10000000
    abc += "Hello Guys!"

print(time.time()-t)
</code></pre>
<p><br/><br/><br/>
Why does <code>print</code> slow down the loop and how can I overcome this problem?</p>
</div>
<div class="post-text" itemprop="text">
<p>print() will slow down your loop. That is because you are making a system call and an IO operation each time you call print(). System calls consume a lot of CPU cycles and involves CPU context switch. IO operations will block the main thread of your process for sometime.</p>
<p>So the obvious solution is to either eliminate or reduce the number of print() calls.</p>
<p>If you really need a mechanism to know the current iteration count of loop, then you can use multi-threading to achieve this. But still, it may involve system calls and thread context switching. But I suppose it will be still faster than print().</p>
<p>The trick is to perform the loop in a background thread while you print the progress in main thread. This way the IO operation in calling print() wont block the thread that runs the loop. To optimize it even further, you can print the progress only when user press a key.</p>
<pre><code>import threading

lock = threading.Lock()
count = 0

def your_method_with_a_loop():
    global count
    with open("f.txt","w") as f:
        for q in range(1000000):
            f.write(str(q)+"\n")
            #your_logic_here
            #....
            lock.acquire()
            count = count + 1
            lock.release()

#Run the loop in a background thread
t1 = threading.Thread(target=your_method_with_a_loop)
t1.start()

while t1.isAlive():
    print("Press enter to see current loop iteration count\n")
    #use raw_input() instead if your are using python 2.x.
    input() #Remove this line if you want to print progress continuously.
    lock.acquire() 
    current_count = count
    lock.release()
    print("Current loop iteration count is ",count,"\n")
</code></pre>
<p>This solution improves the situation by two ways</p>
<ol>
<li><p>IO operation is not performed on the worker thread. Yes using locks involves system call. But it is still faster than an IO block.</p></li>
<li><p>Assuming that the python interpreter uses <code>futex</code> to implement locks, then the cost of aquiring and releasing the lock is very slow, since when compared to worker thread the main thread would rarely hold the lock.</p></li>
</ol>
</div>
<span class="comment-copy">You cant. IO is slow. You could store all outputs inside a list and <code>print(*myOutputs, sep="\n")</code> them at the end - this would reduce the amount of time spent while looping to insert the string into a list. Still takes some time, but marginally leess so - unless you get memory problems for storing all your outputs. Brevity rocks ;)</span>
<span class="comment-copy">also for performance testing, I would use something like timeit: <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">docs.python.org/3/library/timeit.html</a> - which will execute code 10000 times and avg the outliers when measuring things.</span>
<span class="comment-copy">The answer is not to put <code>print()</code> in a loop. Usually it's pointless anyway, just an overwhelming stream. If you want to monitor progress, use something like <code>if loop_count % 1000 == 0: print(something)</code></span>
<span class="comment-copy">also 2: do not add to strings, they are immuteable - you are reconstructing new strings all the time. Use lists to store strings-parts and <code>''.join(parts)</code> later.</span>
<span class="comment-copy">Which is why I'm suggesting modulus</span>
<span class="comment-copy">I'm not seeing how this alleviates the issue? Now you have locks to set up</span>
<span class="comment-copy">@roganjosh It improves the situation by two ways 1. IO operation is not performed on the thread that runs the loop. Yes using locks involves system call. But it is still faster than an IO block. 2.Assuming that the python interpreter uses futex to implement locks, then lock is almost a no cost operation, as compared to worker thread , the main thread would rarely hold the lock.</span>
<span class="comment-copy">I'm gonna test this when I'm back at a PC :) it's intriguing if you can offload the stdout like this</span>
<span class="comment-copy">This is probably overkill.</span>
<span class="comment-copy">nice one, I fixed several code typos to make it run +1 ... ups , you started to fix as well. roll back if you like, youre still missing the file writing and the <code>()</code> for your function definition</span>
