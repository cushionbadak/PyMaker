<div class="post-text" itemprop="text">
<p>I want to provide my code before asking the question for some context.</p>
<p>My code:</p>
<pre><code>a = float(input('Insert the value for a: '))
b = float(input('Insert the value for b: '))
c = float(input('Insert the value for c: '))
if type(a) != (float() or int()):
print ('You didn\'t insert a number! Try again! This is your last chance or I will stop running!')
sleep(1)
print (a)
if type(b) != (float() or int()):
print ('You didn\'t insert a number! Try again! This is your last chance or I will stop running!')
sleep(1)
print (b)
if type(c) != (float() or int()):
print ('You didn\'t insert a number! Try again! This is your last chance or I will stop running!')
sleep(1)
print (c)
</code></pre>
<p>This outputs (given that I input values):</p>
<p>Insert the value for a: 8</p>
<p>Insert the value for b: 3 </p>
<p>Insert the value for c: 2 </p>
<p>You didn't insert a number! Try again! This is your last chance or I will stop running!</p>
<p>8.0 </p>
<p>You didn't insert a number! Try again! This is your last chance or I will stop running!</p>
<p>3.0 </p>
<p>You didn't insert a number! Try again! This is your last chance or I will stop running!</p>
<p>2.0</p>
<p>The problem is I specified that if it isn't a float or an integer, it should deliver the message. But I did insert an integer, but it still printed out the string. What's the problem? Can you assign variables to types of numbers?</p>
</div>
<div class="post-text" itemprop="text">
<p>You called the <code>float</code> and <code>int</code> constructors, which, with no arguments, return the zero value.</p>
<p>So:</p>
<pre><code>if type(a) != (float() or int()):
</code></pre>
<p>translates to:</p>
<pre><code>if type(a) != (0.0 or 0):
</code></pre>
<p>which then (thanks to boolean evaluation rules) becomes:</p>
<pre><code>if type(a) != 0:
</code></pre>
<p>which is clearly wrong.</p>
<p>If you want to test for precise types, check with <code>in</code> on a <code>tuple</code> of the types, e.g.:</p>
<pre><code>if type(a) not in (float, int):
</code></pre>
<p>Normally you <em>want</em> to accept subclasses though, so the Pythonic approach would be:</p>
<pre><code>if not isinstance(a, (float, int)):
</code></pre>
<p>Of course, none of this will actually solve your problem of checking. You explicitly created <code>a</code> by converting a <code>str</code> to a <code>float</code>. It's <em>always</em> going to be a <code>float</code>, or it's going to raise a <code>ValueError</code> if the string isn't a legal <code>float</code> value. The type checking will never help.</p>
<p>So what you <em>really</em> want is to perform the conversion in a <code>try</code> block and catch the exception if it fails:</p>
<pre><code>try:
    a = float(input('Insert the value for a: '))
    b = float(input('Insert the value for b: '))
    c = float(input('Insert the value for c: '))
except ValueError:
    sys.exit('You didn\'t insert a number!')  # or some equivalent action to handle failure
</code></pre>
<p>If you want to loop until they give you a valid number, <a href="https://stackoverflow.com/q/22025764/364696">we have several</a> <a href="https://stackoverflow.com/q/23294658/364696">questions to choose</a> <a href="https://stackoverflow.com/q/15099379/364696">from</a> (there are dozens more, I just can't be bothered to link them all).</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to do:</p>
<pre><code>if type(...) not in (float, int):
</code></pre>
<p>Because need <code>in</code> operator for this, and no calling </p>
<p>Better:</p>
<pre><code>if not isinstance(var,(float,int)):
</code></pre>
<p>Or inefficient way:</p>
<pre><code>if type(...) is not float and type(...) is not int:
</code></pre>
<p>You can also do:</p>
<pre><code>import sys
try:
    a = float(input('Insert the value for a: '))
    b = float(input('Insert the value for b: '))
    c = float(input('Insert the value for c: '))
except ValueError:
    print('Error: Not a integer or float') 
    sys.exit()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>!=</code> works fine; the problem is that <code>a != (b or c)</code> does not mean <code>a != b or a != c</code>: <code>!=</code> does not distribute over <code>or</code>. It has nothing to do with types.</p>
</div>
<div class="post-text" itemprop="text">
<p>Its printing exactly what you are asking it to print</p>
<pre><code>a = 1 

if a != 1 or a!=2:
    print('Of course, a != 2 is True!')
</code></pre>
<blockquote>
<pre><code>(xenial)vash@localhost:~/python/stack_overflow$ python3.7 insert.py
Of course, a != 2 is True!
</code></pre>
</blockquote>
<p>Only one of the <code>or</code> statements needs to evaluate to <code>True</code> for the <code>if</code> statement to execute, and since <code>float != int</code> it becomes <code>True</code> and runs <code>print</code> as you asked it to do</p>
</div>
<span class="comment-copy">When you add the parentheses for <code>float()</code> and execute it by itself, you'll notice it returns as <code>0.0</code> You should just check it against <code>float</code> and <code>int</code>. Also, you're trying to cast the input to a float, so it will error out even if it's not a number. Instead you should use the string method <code>isdigit()</code></span>
<span class="comment-copy">@GreenCell: You really shouldn't use <code>isdigit()</code>; there are so many different ways to enter legal <code>float</code>s that any hand-rolled "check before conversion" function is likely to exclude valid values, allow invalid ones, or both. This is why you use the <a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">EAFP</a> pattern: Just <i>do</i> the conversion, and catch the <code>ValueError</code> if it occurs. The <code>float</code> constructor knows what is valid, let it do its job, rather than trying to <a href="https://docs.python.org/3/glossary.html#term-lbyl" rel="nofollow noreferrer">LBYL</a>, reimplementing the <code>float</code> checking poorly.</span>
<span class="comment-copy">Oh! That makes sense! Why do you say if not isinstance? Doesn't that imply that it isn't that type?</span>
<span class="comment-copy">@user10059620: Your test appeared to be looking for things that are neither <code>float</code> nor <code>int</code>. <code>isinstance(a, (float, int))</code> returns <code>True</code> if <code>a</code> <i>is</i> a <code>float</code> or an <code>int</code>, so to match your original logic, you'd need to invert the logic; "if 'a' is not a float or an int, complain" would be the English description of <code>if not isinstance(a, (float, int)): print(errormessage)</code></span>
<span class="comment-copy"><code>(float or int)</code> evaluates to <code>float</code>, which is not iterable. I assume you meant <code>(float, int)</code>?</span>
<span class="comment-copy">@ShadowRanger Oh good, thanks good catch</span>
<span class="comment-copy">Also <code>and</code> rather than <code>or</code>.</span>
<span class="comment-copy">@user2357112 Thanks a lot for catching my stupid mistake, I did the edit, still it's ineffiecient</span>
