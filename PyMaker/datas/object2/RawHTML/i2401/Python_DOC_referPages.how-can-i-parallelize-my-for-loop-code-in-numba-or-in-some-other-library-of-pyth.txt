<div class="post-text" itemprop="text">
<p>I have code like:</p>
<pre><code>import pandas as pd
import multiprocessing as mp

a = {'a' : [1,2,3,1,2,3], 'b' : [5,6,7,4,6,5], 'c' : ['dog', 'cat', 'tree','slow','fast','hurry']}
df = pd.DataFrame(a)

def performDBSCAN(feature): 
    value=scorecalculate(feature)
    print(value)
    for ele in range(4):
        value=value+1
        print('here value is ', value)
    return value

def processing(feature):
    result1=performDBSCAN(feature)
    return result1

def scorecalculate(feature):
    scorecal=0
    for val in ['a','b','c','d']:
        print('alpha is:', val )
        scorecal=scorecal+1
    return scorecal

columns = df.columns
for ele in df.columns:
    processing(ele)
</code></pre>
<p>The above code is executing in a serial fashion. I would like to make faster by processing each col in the parallel fashion by using python and I wrote the following code using multiprocessing but didn't help.</p>
<pre><code>import pandas as pd
import multiprocessing as mp     

def performDBSCAN(feature): 
    value=scorecalculate(feature)
    print(value)
    for ele in range(4):
        value=value+1
        print('here value is ', value)
    return value

def scorecalculate(feature):
    scorecal=0
    for val in ['a','b','c','d']:
        print('alpha is:', val )
        scorecal=scorecal+1
    return scorecal

def processing(feature):
    result1=performDBSCAN(feature)
    return result1

a = {'a' : [1,2,3,1,2,3], 'b' : [5,6,7,4,6,5], 
'c' : ['dog','cat','tree','slow','fast','hurry']}
df = pd.DataFrame(a)
columns = df.columns
pool = mp.Pool(4)
resultpool = pool.map(processing, columns)
</code></pre>
<p>I couldn't see any output and the kernel is continuously running without any output? what could be the issue? Is there any other way of doing it by other libraries in numba? 
(Note: this code is an normal example. The basic idea is that i have to take each column in a dataframe and perform DBSCAN algorithm. Based on the result of DBSCAN, i have another function to calculate score for that. I gave these two funtions in the above code. Incrementing operations in the above functions are used for verifying to to see whether it goes to funtion or not. That was my intention. Here in first part of code it is taking in a serial fashion whereas i need to parallelise this area of for loop so that i can process multiple columns in parallel fashion).</p>
</div>
<div class="post-text" itemprop="text">
<p>You have to use <code>if __name__ == '__main__':</code> as stated in programming guidelines for multiprocessing module <a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing-programming" rel="nofollow noreferrer">https://docs.python.org/3/library/multiprocessing.html#multiprocessing-programming</a>. That is the second code you have provided should look like this:</p>
<pre><code># imports

# functions

if __name__ == '__main__':
    a = {
        'a': [1, 2, 3, 1, 2, 3],
        'b': [5, 6, 7, 4, 6, 5],
        'c': ['dog', 'cat', 'tree', 'slow', 'fast', 'hurry']}
    df = pd.DataFrame(a)
    pool = mp.Pool(4)
    result = pool.map(processing, df.columns)
    print(result)
</code></pre>
<p>Output:</p>
<pre><code>[8, 8, 8]
</code></pre>
<p>EDIT:</p>
<p>To run the code in Jupyter Notebook you have to place your functions into a module (in the simplest case it is <code>.py</code> file in the folder where your <code>.ipynb</code> script located). Then you should import your custom module of course. This fixes the problem for me.</p>
</div>
<span class="comment-copy">I am completely stumped about what this code is supposed to be doing.</span>
<span class="comment-copy">this code is an abstract example. The basic idea is that i have to take each column in a dataframe and perform DBSCAN algorithm. Based on the result of DBSCAN, i have another function to calculate score for that. That was my intention. Here in first part of code it is taking in a serial fashion whereas i need to parallelise this area of for loop so that i can process multiple columns in parallel fashion</span>
<span class="comment-copy">You could try using the multiprocessing module <a href="https://docs.python.org/3.4/library/multiprocessing.html" rel="nofollow noreferrer">docs.python.org/3.4/library/multiprocessing.html</a>  I have only used the threadpool from multiprocessing.pool but it parallelized my application quite effectively. I am in no way an expert on this. Just sharing what I found useful in my own project.</span>
<span class="comment-copy">Can you post an example which represents your actual problem? It completely depends on the problem whether this can be sped up by vectorization. Your example is not using the dataframe at all, it just prints some stuff on the screen. Please post an <a href="https://stackoverflow.com/help/mcve">MCVE</a>.</span>
<span class="comment-copy">I used only vectorization methods in DBSCAN and in scoring scoring function. But i need to optimize this for loop, by executing it in parallel</span>
<span class="comment-copy">Is this working you ?? @ Poolka</span>
<span class="comment-copy">@Vamshi Yes. I ran your code and got infinite running time with no result. Then I made this correction and got the output <code>[8, 8, 8]</code> without infinite execution. I use Python 3.6 / Win10.</span>
<span class="comment-copy">@Vamshi Just tried again on another machine (python 3.6 / win7). The result is the same - <code>if __name__ == '__main__':</code> fixes the problem.</span>
<span class="comment-copy">I tried it. but it is not working on my system. It is windows 10 and python 3.6. I just want to see if it goes to the function. Then, the rest of the things, I can handle.</span>
<span class="comment-copy">I think there is a problem with OS. Here I found something: <a href="https://stackoverflow.com/questions/32296037/python-multiprocessing-on-windows-10" title="python multiprocessing on windows 10">stackoverflow.com/questions/32296037/â€¦</a></span>
