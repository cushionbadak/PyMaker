<div class="post-text" itemprop="text">
<p>I am looking for something like <code>TRIM()</code> in python, but <code>.strip()</code> doesn't accomplish this. Here's an example:</p>
<pre><code>&gt;&gt;&gt; s.strip()
'Elvis Presley made his film debut in this tale of three brothers who, 
 while serving in the Confederate Army, steal a Union Army payroll. \xc2\xa0'

&gt;&gt;&gt; s2.strip()
'Elvis Presley made his film debut in this tale of three brothers who, 
 while serving in the Confederate Army, steal a Union Army payroll.'

&gt;&gt;&gt; s.strip()==s2.strip()
False
</code></pre>
<p>How would I accomplish the above -- to trim all whitespace characters at the edges of text -- where I could get <code>s.trim() == s2.trim()</code> (other than just doing a hackish <code>s.strip('\xc2\xa0').strip()</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you are using Python 2.7, first convert your string to unicode and then strip:</p>
<pre><code>s = unicode('test \xc2\xa0', "UTF-8")
s.strip()
</code></pre>
<p>yields:</p>
<pre><code>u'test'
</code></pre>
<p>This will cause Python to recognize the <code>\xc2\xa0</code> as a Unicode non-breaking space character, and properly trim it.  </p>
<p>Without that, Python assumes it's an ASCII string and in that character set <code>\xc2</code> and <code>\xa0</code> aren't whitespace.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest you use the <code>replace</code> function. You can do this:</p>
<pre><code>s1 = s1.replace('\xc2', '').replace('\xa0', '')
</code></pre>
<p>You could encapsulate this logic if you have a large number of possible characters you want to trim off:</p>
<pre><code>def replace_many(base_string, *to_remove):
    result = base_string
    for r in to_remove:
        result = result.replace(r, '')
    return result

replace_many(s, '\xc2', '\xa0') == s2.strip()
&gt;&gt;&gt; True
</code></pre>
<p>You could also implement this using <code>reduce</code>:</p>
<pre><code># In Python 2
result = reduce(lambda a, r: a.replace(r, ''), ['\xc2', '\xa0'], 
    initializer = base_string.strip())

# In Python 3
import functools
result = functools.reduce(lambda a, r: a.replace(r, ''), ['\xc2', 'xa0'], 
    base_string.strip())
</code></pre>
</div>
<span class="comment-copy">Related: <a href="https://stackoverflow.com/questions/10993612/python-removing-xa0-from-string#11566398" title="python removing xa0 from string%2311566398">stackoverflow.com/questions/10993612/â€¦</a></span>
<span class="comment-copy">What version of Python are you using? (2 or 3)</span>
<span class="comment-copy">@payne 2.7 .is the version.</span>
<span class="comment-copy">There is <a href="https://docs.python.org/3/library/string.html#string.whitespace" rel="nofollow noreferrer"><code>string.whitespace</code></a> defining what Python considers a whitespace. <code>\xa0</code> doesn't belong in that list, tho. Even <code>\s</code> in its regex engine won't recognize it as whitespace so you'll have to do your own <i>hackish</i> approach to remove the chars you want treated as whitespace.</span>
