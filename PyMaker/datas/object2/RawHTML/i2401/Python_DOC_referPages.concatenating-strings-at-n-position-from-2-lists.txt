<div class="post-text" itemprop="text">
<p>I'm trying to concatenate strings at every n'th position from 2 lists. But I can't seem to get it to work</p>
<p>Input:</p>
<pre><code>['57', '60', '55',..., '56']

['g', 'b', 'r',..., 'b']
</code></pre>
<p>Output:</p>
<pre><code>['57g', '60b', '55r',..., '56b']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Utilizing the full arsenal of built-ins, you can do the following, using <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a>, <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.join" rel="nofollow noreferrer"><code>str.join</code></a>:</p>
<pre><code>l1 = ['57', '60', '55', '56']
l2 = ['g', 'b', 'r', 'b']

list(map(''.join, zip(l1, l2)))
# ['57g', '60b', '55r', '56b']
</code></pre>
<p>which is a rough equivalent of the following <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">comprehension</a>:</p>
<pre><code>[''.join(pair) for pair in zip(l1, l2)]
# ['57g', '60b', '55r', '56b']
</code></pre>
<p>which, in turn, could just use simple string concatenation:</p>
<pre><code>[x1 + x2 for x1, x2 in zip(l1, l2)]
# ['57g', '60b', '55r', '56b']
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer"><code>zip</code></a> is the key function in all of them as it does the <em>parallel</em> 
 pair(triplet, quadruple, ...)-wise iteration of multiple iterables.</p>
</div>
<div class="post-text" itemprop="text">
<p>The simplest way to solve this problem is:</p>
<pre><code>L1=['57', '60', '55',.......'56']
L2=['g', 'b', 'r',......'b']
list=[]
for i in range(length of your array):
     list.append(L1[i]+L2[i])
print(list) 
</code></pre>
<p>list.append() method is used to insert the values to the list. Suppose you want to insert 4 in list then:</p>
<pre><code>list=[1,2,3]
list.append(4)
print(list)
</code></pre>
<p>output:</p>
<pre><code>[1,2,3,4]
</code></pre>
<p>I hope you understand</p>
</div>
<span class="comment-copy">Since we're joining pairs of strings, I think the last version is the best. And it's probably the fastest, too.</span>
<span class="comment-copy">@PM2Ring I agree, for the case at hand, it is also the most intuitive. However, it is not quite as flexible as the others if there is an unknown number of lists.</span>
