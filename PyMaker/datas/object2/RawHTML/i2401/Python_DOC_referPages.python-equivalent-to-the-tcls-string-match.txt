<div class="post-text" itemprop="text">
<p>I am looking for Python equivalent to the Tcl's <a href="https://www.tcl.tk/man/tcl8.4/TclCmd/string.htm#M34" rel="nofollow noreferrer">string match</a> operation. Specifically, I would like to handle correctly the special sequences (*, ?, and [chars]).</p>
<p>For example, given three Python strings:</p>
<pre><code>expected = 'Foo? Bar* Tar'
actual1 = 'Foo2 Barfluff Tar'
actual2 = 'Foo Bar Tar'
</code></pre>
<p>the match operation <code>match(expected,actual1)</code> should return true, but <code>match(expected,actual2)</code> should return false.</p>
<p>Thanks a lot!</p>
</div>
<div class="post-text" itemprop="text">
<p>You want <a href="https://docs.python.org/3/library/fnmatch.html" rel="nofollow noreferrer">the <code>fnmatch</code> module</a>. While <code>re</code> provides full powered regular expressions, <code>fnmatch</code> performs the limited, shell-style globbing wildcard matching you're looking for.</p>
<p>For a case sensitive match, it's as simple as:</p>
<pre><code>&gt;&gt;&gt; fnmatch.fnmatchcase(actual1, expected)
True
&gt;&gt;&gt; fnmatch.fnmatchcase(actual2, expected)
False
</code></pre>
<p>If you want to follow the operating system's case sensitivity rules (that is, insensitive on Windows, sensitive on most other operating systems), you'd use plain <code>fnmatch.fnmatch</code> to invoke automatic case normalization.</p>
</div>
<span class="comment-copy">You are looking for regular expressions (module <code>re</code>).</span>
<span class="comment-copy">@DYZ: Actually, for glob-like pattern matching, <code>fnmatch</code> is more appropriate. It's actually implemented using <code>re</code> under the hood (with caching so repeated use of the same glob pattern doesn't require reconverting/recompiling the equivalent regex over and over), but it works with shell wildcard patterns directly, no need to rewrite them into regular expressions.</span>
<span class="comment-copy">Thank you for pointing out fnmatch.fnmatchcase. That's exactly what I was looking for.</span>
