<div class="post-text" itemprop="text">
<p>If I input <code>"1995y 05m 05d"</code>, then I want to make a program that prints <code>"950505"</code>. More example: <code>"1949y 05m 23d"</code> --&gt; <code>"490523"</code>.</p>
<pre><code>import re
Birthday = str(input("insert your birth&lt;(ex) xxxxy **m 00d&gt; : "))
p= re.sub('[ymd ]','',Birthday)
print(p) #result is "xxxx**00"
</code></pre>
<p>here is my code. How do I fix it? any solutions?</p>
</div>
<div class="post-text" itemprop="text">
<p>Since you're basically working with date strings, you can use <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="nofollow noreferrer"><code>datetime.strptime()</code></a> to parse them:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; birthday = '1995y 05m 05d'
&gt;&gt;&gt; datetime.strptime(birthday, '%Yy %mm %dd').strftime('%y%m%d')
'950505'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your existing code prints the full year, where you want only two digits. Just skip the first two digits on print.</p>
<pre><code>print(p[2:])
</code></pre>
<p>That will print <code>p</code> starting from position 2 (the third character, since lists are counted from 0), with no end to the range, so it prints the entire string except the first two characters (<code>19</code> in your sample).</p>
</div>
<div class="post-text" itemprop="text">
<p>Using Regex expression :</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; a = re.findall("\d+","1995y 05m 05d")
&gt;&gt;&gt; a[0] = a[0][2:]
&gt;&gt;&gt; output = ""
&gt;&gt;&gt; for item in a:
    output += item

&gt;&gt;&gt; int(output)
950505
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Requested regex solution:</p>
<pre><code>import re

s = '1995y 05m 05d'
print(''.join(re.findall(r'\d{2}(?=[ymd])', s)))

# 950505
</code></pre>
<p>Uses <code>findall</code> to find all two digits before <code>y</code>, <code>m</code> and <code>d</code> and <code>join</code> to join all to required format.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>birthday = input("birthday").split()
a = ''.join([''.join([i for i in c if i.isdigit()][-2:]) for c in birthday])
</code></pre>
<p>this does it with out any libraries</p>
</div>
<span class="comment-copy">Any reason to use a regex and not <code>datetime.strptime</code> which'll also end up validating you've got a valid date and not just a pattern that looks like it could be one etc... Then format that to %y%m%d ? (but a quick fix is to just ignore the first two characters...)</span>
<span class="comment-copy">As every person older than 18 years should be able to tell you: don't process or store dates with a two digit year.</span>
<span class="comment-copy">@KlausD. but it saves a whole two bytes of storage - what could possibly go wrong? :p</span>
<span class="comment-copy">Also... what's supposed to happen if someone just enters "this doesn't match the format asked for" or "92834927349827492387492837237"? Or... almost the right format but wrong order... eg: "23d 1949y 05m" ?</span>
<span class="comment-copy">Why would you ask someone to enter their bd in such unusual format?</span>
<span class="comment-copy">Better to do <code>p[-2:]</code> in case the year already only has two digits.</span>
<span class="comment-copy">@kindall Did you mean <code>p[-6:]</code>?</span>
