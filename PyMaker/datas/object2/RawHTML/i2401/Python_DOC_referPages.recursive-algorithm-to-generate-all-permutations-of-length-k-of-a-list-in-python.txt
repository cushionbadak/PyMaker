<div class="post-text" itemprop="text">
<p>I want to create a recursive algorithm that will generate all permutations
of a specified length of a list of integers with some length <code>n</code>.</p>
<p>Following is my idea: </p>
<p>For every element in the list, I can remove it, then ask my recursive function to return to me all permutations of length <code>k-1</code>, and then to each of those permutations I will add the removed number. Then repeat this process for all numbers in the list.</p>
<p>The base cases are when the list is empty or contains only one element.
In these cases I just return the list. That is, as long as k is less than or equal to the length of the list (ex. if <code>k</code> is <code>3</code>, but <code>l = [1,2]</code>, I can't produce any permutations of length <code>k</code>).</p>
<p>This is what I've written:</p>
<pre><code>def permutations(l, k):
w = len(l)
if (k &lt;= w): # list is bigger than the length each permutations
    if (w &lt;= 1):
        return list(l)
    else:
        result = []
        for element in l:
            listSmaller = l[:element] + l[element+1:]
            for perm in permutations(listSmaller, k-1):
                result.append([perm] + element)
        return result      
else: # list is not bigger than the length of the permutations, impossible.
    print("k cannot exceed length of list")
</code></pre>
<p>I keep getting <code>TypeError: can only concatenate list (not "int") to list</code></p>
<p>How should I modify this?</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two problems:</p>
<p><strong>First</strong>: <code>[perm] + element</code> Here you are adding a list to an integer. </p>
<p><strong>Second</strong>: <code>listSmaller = l[:element] + l[element+1:]</code> Here you need an index to access the elements of the list. You are currently using the elements as an index and will therefore get an <code>IndexError</code> because when <code>element=4</code>, <code>element+1</code> will be <code>5</code> but you do not have <code>l[4+1:]</code>.</p>
<hr/>
<p>Your code works when I do the following changes in your code. I am only showing the modified lines. I am not sure if the output is as expected. You can try it and let me know.</p>
<pre><code>for i, element in enumerate(l):
    listSmaller = l[:i] + l[i+1:]

    for perm in permutations(listSmaller, k-1):
        result.append([perm] + [element])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In python, when using</p>
<pre><code>for a in b:
</code></pre>
<p>'a' is not actually a number which can be used as an index, but is instead a pointer to an actual element in list 'b'. Put another way, if I had the following list</p>
<pre><code>b = ["Bob", "Jim", "Jane"]
</code></pre>
<p>Then on the first iteration 'a' would be equal to "Bob", and not 0.</p>
<p>When you want to generate index numbers instead of pointers to elements, you can use:</p>
<pre><code>for a in range(0, len(b)):
</code></pre>
<p>instead. Using this, your code should then work.</p>
<p>e.g.</p>
<pre><code>for element in range(0, len(l)):
    listSmaller = l[:element] + l[element+1:]
    for perm in permutations(listSmaller, k-1):
        result.append([perm] + element)
return result
</code></pre>
</div>
<span class="comment-copy">if you are trying to make it from scratch this wont help, but have you looked at the python <code>itertools</code> module? <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html</a></span>
<span class="comment-copy">Could you please provide the parameters to <code>permutations</code> which are resulting in the reported error? Thanks!</span>
<span class="comment-copy">When you use <code>for element in l:</code>, the <code>element</code> is no more an index starting from 0 but the individual elements of the list <code>l</code>, one at a time. Now while accessing the elements of the list <code>l</code> you can't use, <code>l[:element]</code> or <code>l[element+1:]</code>. You need an index which you can get using enumerate as <code>for i, element in enumerate(l):</code> and then you can use <code>l[:i] + l[i+1:]</code></span>
<span class="comment-copy">I've been testing with permutations([1,2,3,4], 3)</span>
<span class="comment-copy">Also, perm is a list, so you shouldnâ€™t wrap it with a [ ]. Element is an int so you should wrap it with a [ ] (in the line where you append to result)</span>
