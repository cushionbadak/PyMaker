<div class="post-text" itemprop="text">
<p>This is a question rotating a matrix 90 degrees clockwise, i don't understand why i cannot use:</p>
<pre><code>matrix = zip(*matrix[::-1])
</code></pre>
<p>but:</p>
<pre><code>class Solution:
    def rotate(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: void Do not return anything, modify matrix in-place instead.
        """
        matrix[::] = zip(*matrix[::-1])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python, all assignments bind a reference to a name. Operators call a method of an existing reference<sup>1</sup>. In your case, the statement</p>
<pre><code>matrix = ...
</code></pre>
<p>is purely an assignment<sup>2</sup>. It computes the right hand side, and binds it to the name <code>matrix</code> in the local function scope. Whatever object <code>matrix</code> referred to when you passed it in remains untouched.</p>
<p>This is why you don't see the changes you made. It's not that the function doesn't work this way, it's that it doesn't do anything with the rotated list. The data is discarded as soon as the function exits.</p>
<p>The operation</p>
<pre><code>matrix[:] = ...
</code></pre>
<p>on the other hand is <em>not</em> an assignment in the semantic sense, despite the <code>=</code> symbol<sup>3</sup>. It's a call to <code>matrix.__setitem__(...)</code><sup>4</sup>. The<code>__setitem__</code> method, like any other method, operates directly on the object without changing it's name bindings.</p>
<p>As far as indexing goes, <code>[:]</code> is equivalent to <code>[::]</code>. They are shorthand for <code>[0:len(matrix)]</code> and <code>[0:len(matrix):1]</code>, respectively. In both cases, the default step size will be used. In general, any index with colons in it will be converted to a <a href="https://docs.python.org/3/library/functions.html#slice" rel="nofollow noreferrer"><code>slice</code></a> object. Missing elements are set to <code>None</code> and replaced by the sequence-specific defaults shown here.</p>
<hr/>
<p><sup>1</sup> Some operators, like <code>+=</code> perform an assignment after calling a method. These are called <a href="https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements" rel="nofollow noreferrer">augmented assignments</a>. But that's not a case we're interested in right now.</p>
<p><sup>2</sup> Besides literal <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">assignment statements</a> (<code>=</code>), some other types of assignments are <code>def</code> (which binds a function object to its name), <code>class</code> (which does the same for a class object), <code>import</code> (which binds a module or element of a module to a name), passing arguments to a function (which binds objects to the local argument names or kwarg dictionary keys), and <code>for</code> (which binds an element from an iterator to the loop variable at each iteration).</p>
<p><sup>3</sup> It's still an <a href="https://docs.python.org/3/reference/simple_stmts.html#assignment-statements" rel="nofollow noreferrer">assignment</a> from the point of view of the parser, but the statement is handled completely differently. A similar statement that is not actually an assignment is using the <code>=</code> operator on an attribute implemented as a descriptor, such as a <code>property</code>.</p>
<p><sup>4</sup> Technically, it's more of an equivalent to <code>type(matrix).__setitem__(matrix, ...)</code>, but with some additional optimizations. For example, the metaclass of <code>type(matrix)</code> won't ever be searched.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>matrix</code> in your method is a reference to a matrix object.  Assignment to <code>matrix</code> will change <code>matrix</code> to reference your newly created object, but not change the contents of the original object.  <code>matrix[::] =</code> invokes <code>__setitem__</code> on the object referenced by <code>matrix</code> which changes the contents of the object accordingly.</p>
</div>
<span class="comment-copy">One rebinds the name, the other calls <code>__setitem__</code> on an existing object</span>
<span class="comment-copy"><code>[:]</code> is the same as <code>[::]</code> for this purpose.</span>
<span class="comment-copy">Looks more like a 2D list than a matrix. Docstring substantiates this</span>
