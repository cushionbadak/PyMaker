<div class="post-text" itemprop="text">
<p>For some projects, I'd like to stop supporting Python 2.7 (see <a href="http://python3statement.org/" rel="nofollow noreferrer">http://python3statement.org/</a>) to use only Python &gt; 3.6 (or rather 3.5 + f-string, like Pypy v6.0).</p>
<p>A first step could be to modify the setup.py file to get an explicit error if one try to use the package with a Python version without f-string.</p>
<p>But then there is a lot of work to switch to pure Python 3.6 syntax and remove all the </p>
<ul>
<li><p><code>from __future__ import ...</code>, </p></li>
<li><p><code>try</code> related to Python 2.7 support, </p></li>
<li><p><a href="http://python-future.org" rel="nofollow noreferrer">future</a> and/or <a href="https://pypi.org/project/six/" rel="nofollow noreferrer">six</a> code </p></li>
</ul>
<p>and to replace in many places</p>
<ul>
<li><code>class MyClass(object)</code> -&gt; <code>class MyClass:</code></li>
<li><code>super(MyClass, self)</code> -&gt; <code>super()</code></li>
<li><code>"{}".format(foo)</code> -&gt; <code>f"{foo}"</code></li>
</ul>
<p>I did this work for a code basically manually (actually I also automate some steps by processing the code with a Python script) and I really see the difference. The code is much less verbose now and globally much nicer.</p>
<p>I'm sure that I forget many other nice simplifications that could be done, for example I now use a lot <code>from pathlib import Path</code> but these changes are much less direct.</p>
<p>How would you transform a Python 2.7/3.6 compatible code to a clean Python 3.6 code? How can you avoid to do this boring work manually?</p>
<h2>Edit after <a href="https://stackoverflow.com/a/52434063/1779806">the first answer</a></h2>
<p>I think a hypothetical internalization (which in many cases won't append) should not stop us from using f-strings, which are just cleaner (and slightly faster).</p>
<p>I still think the modifications that I mentioned are reasonable.</p>
</div>
<div class="post-text" itemprop="text">
<p>If your goal is to stop your code from running on pre-Python-3.6, then explicitly check for that:</p>
<pre><code>import sys
if sys.version_info &lt; (3, 6):
    raise RuntimeError('my_thing requires a Python version of at least 3.6.')
</code></pre>
<p>If you just no longer care about pre-Python-3.6 support, then you don't need to do anything. Your code is already perfectly valid Python 3.6.</p>
<hr/>
<p>Trying to go through your whole codebase and transform it all to use techniques that don't work on prior versions would merely cause a ton of unnecessary code churn and risk introducing bugs for no real gain. The new techniques aren't even unconditional upgrades over the old; for example, if you go through and switch all your string formatting to f-strings, you may find yourself having to go through and switch everything back again anyway to support internationalization, because it's impossible to internationalize f-string formatting.</p>
<p>Instead, when you have a <em>specific reason</em> to change some part of your code, you should feel free to use techniques that are incompatible with pre-3.6 Python releases when making those changes.</p>
<hr/>
<p>Remember, the new things in new Python releases aren't just simple things like 0-argument <code>super</code>. If you want to stuff your code full of as many shiny new language features as possible for some reason, there's stuff like</p>
<ul>
<li>switching your magic constants to <a href="https://docs.python.org/3/library/enum.html" rel="nofollow noreferrer"><code>enum</code></a>,</li>
<li>sticking <a href="https://docs.python.org/3/library/typing.html" rel="nofollow noreferrer">type annotations</a> on everything,</li>
<li>switching to <a href="https://docs.python.org/3/library/pathlib.html" rel="nofollow noreferrer"><code>pathlib</code></a> for path manipulation,</li>
<li>switching to the new <a href="https://docs.python.org/3/library/subprocess.html#subprocess.run" rel="nofollow noreferrer"><code>subprocess.run</code></a> API,</li>
<li>refactoring your generators with <code>yield from</code>, or</li>
<li>using the new <a href="https://docs.python.org/3.7/whatsnew/3.3.html#pep-3151" rel="nofollow noreferrer">I/O exception hierarchy</a>,</li>
</ul>
<p>and that's before even considering Python 3-only dependencies you now have access to. Many of these things will require careful design work to incorporate into your program. Incorporating them in a way that produces <em>actually good</em> code isn't something an automatic tool or a mindless, quick manual pass over your code can handle. Trying to tell you how to incorporate all these things into your program is far too broad for a Stack Overflow answer; there's just too much new stuff.</p>
<p>Also, even the Python standard library itself makes no effort to purge use of patterns compatible with old versions. A quick <code>grep</code> through the <a href="https://github.com/python/cpython/tree/f14c28f39766855420dd58d209da4ad847f3030e" rel="nofollow noreferrer">current CPython master branch</a> shows hundreds of classes still inheriting from <code>object</code> and over a thousand uses of <code>str.format</code> that could be replaced with f-strings.</p>
</div>
<div class="post-text" itemprop="text">
<p>I found a great tool which does what I needed : <a href="https://github.com/asottile/pyupgrade" rel="nofollow noreferrer">pyupgrade</a>.</p>
<p>There is an option <code>--py36-plus</code> which trigger the replacement of most <code>"{}".format(var)</code> by <code>f"{var}"</code> (much cleaner and clearer).</p>
<p>With the Unix command <code>find -name "*.py" | xargs pyupgrade --py36-plus</code> it produces such commits:</p>
<p><a href="https://bitbucket.org/fluiddyn/fluidsim/pull-requests/78/pyupgrade-py36-plus" rel="nofollow noreferrer">https://bitbucket.org/fluiddyn/fluidsim/pull-requests/78/pyupgrade-py36-plus</a></p>
<p>Now, the code is much cleaner and clearer and shows the coding style that we want today.</p>
<p>It's really very useful for projects that dropped Python 2.7 support (see <a href="http://python3statement.org/" rel="nofollow noreferrer">http://python3statement.org/</a>).</p>
</div>
<span class="comment-copy">StackOverflow has a rule against asking for recommendations for libraries, which sometimes feels silly, but it does protect from a lot of spam. If you edit your answer to ask for a way to transform code to Python 3.6 code (rather than a tool), then I could see this question being re-opened.</span>
<span class="comment-copy">Thank you. I removed the world "tool".</span>
<span class="comment-copy">What do I have to do to have this question reopened?</span>
<span class="comment-copy">Enough people have to vote to re-open the question. It looks like this question was re-opened.</span>
<span class="comment-copy">I'm sorry but you don't answer to the question and the tone of your answer is inappropriate. I asked specifically for Python 3.5 + f-string and you write a check which won't work with Pypy 6.0. Then you tell me "change nothing" when I ask "how to change things". You don't cover the <code>__future__</code>, <code>try</code> and <code>future</code> code. And then you switch to fancy things with inappropriate wording ("stuff your code full of as many shiny new language features as possible"). Note that <code>pathlib</code> is not a "shiny new language feature" (<a href="https://www.python.org/dev/peps/pep-0428/" rel="nofollow noreferrer">pep-428</a> was created in 2012).</span>
<span class="comment-copy">@paugier: You asked a question about how to drop support for old versions. I answered that question, and treated the "change everything" as the Y in your <a href="http://xyproblem.info/" rel="nofollow noreferrer">XY problem</a>. This is the <i>charitable</i> interpretation of your question, because the other interpretation is that there are far too many new, incompatible features and your question is way too broad. If you want to narrow things down to a specific language feature ("how can I auto-convert my string formatting to f-strings", for example), that would be a properly-scoped, answerable question.</span>
<span class="comment-copy">user2357112: now I feel really bad because of you. Stackoverflow has became a place bad for people. I really need to stop using it and asking questions, since they are so silly.</span>
