<div class="post-text" itemprop="text">
<p>I would like to add warning and critical alert condition <code>if inputfile == "android":</code> pass then check the number stored in variable <code>e and f</code> and check whether it is under normal or warning or critical level as whatever the arguments we passed.
Secondly this script gives no output when run in python3.6</p>
<pre><code>#!/usr/bin/python
import requests, os, json, sys, getopt

f = 10
e = 20

def main(argv):
   inputfile = ''
   try:
      opts, args = getopt.getopt(argv,"hi:o:w:c:",["ent","lable","help","warning","critical"])
   except getopt.GetoptError:
      print ("Usage: test.py -i &lt;inputfile&gt;")
      sys.exit(2)
   for opt, arg in opts:
      if opt == '-h':
         print ("test.py -i &lt;inputfile&gt;")
         sys.exit()
#      elif opt in ("-i", "--app"):
      elif opt == '-i':
        inputfile = arg
        if inputfile == "android":
              '''call a function here (hiding sensitive information) Using e and f variable instead'''
               print ("Input is"), inputfile
               print("Active:"), f
        else: 
            print("Parameter not found")
            sys.exit(2)
#      elif opt in ("-o", "--lable"):
      elif opt == '-o':
          inputfile = arg
          print("Active:"), e 
if __name__ == "__main__":
   main(sys.argv[1:])
</code></pre>
<p>Right Now: 
<code>#python script -i android</code></p>
<h1>Output</h1>
<p><code>Active: 10</code></p>
<p>Expected:</p>
<p><code>#python script -i android -w 5 -c 20</code></p>
<h1>Output</h1>
<p><code>WARNING - Active: 10</code></p>
</div>
<div class="post-text" itemprop="text">
<p><code>sys.argv</code> is a <code>list</code> of <code>str</code>. If you want to perform comparisons with the <code>int</code>s you store in <code>e</code> and <code>f</code>, you need to convert the command line parameters during parsing:</p>
<pre><code>if opt == '-i':
    input_file = arg
elif opt == '-w':
    w_value = int(arg)
elif opt == '-c':
    c_value = int(arg)
</code></pre>
<p>This will allow to validate them later:</p>
<pre><code>if input_file == 'android':
    if w_value &lt; e:
        sys.exit('WARNING - w value is too small')
    elif c_value &gt; f:
        sys.exit('WARNING - c value is too big')
</code></pre>
<h3>original answer</h3>
<p>You might want to have a look at Python's <a href="https://docs.python.org/3/howto/logging-cookbook.html" rel="nofollow noreferrer"><code>logging</code></a> module.</p>
<p>To get you started:</p>
<pre><code>import logging

e = 10
f = 20

logging.basicConfig(level=logging.DEBUG)
logging.log(e, 'This is debug output')
logging.log(f, 'This is an info')
</code></pre>
<p>This produces:</p>
<pre><code>DEBUG:root:This is debug output
INFO:root:This is an info
</code></pre>
<p>To continue from there, you may want to influence the format of the output by passing the <code>format</code> keyword to <code>basicConfig()</code>:</p>
<pre><code>e = 30  # logging.WARNING
f = 40  # logging.ERROR
input_file = 'android'

logging.basicConfig(level=logging.DEBUG, format='%(levelname)s - %(message)s')
logging.log(e, 'Input file is "%s"', input_file)
logging.log(f, '"-o" flag detected')
</code></pre>
<p>This will produce:</p>
<pre><code>WARNING - Input file is "android"
ERROR - "-o" flag detected
</code></pre>
<p>Hope that answers your question,
dtk</p>
<p>PS On a side note: personally I much prefer using <a href="https://docs.python.org/3/library/argparse.html#module-argparse" rel="nofollow noreferrer"><code>argparse</code></a> over <code>getopt</code>. Fwiw ;)</p>
</div>
<span class="comment-copy">I think you're unable to understand my point When i run the script: script -i android -w 5 -c 8 The Output sould be like that: <code>CRTICAL - Active: 10 | Active: 10</code></span>
<span class="comment-copy">So do you need a dynamic log level (<code>CRITICAL</code>)? If so, how is it determined? You can then input whichever message you want into the <code>log()</code> call. If the message is built in multiple steps, you may have to save the message in a string first and pass that one to <code>log()</code> when it's complete.</span>
<span class="comment-copy">It's not about log level, I have import <code>sys</code> module. So when the output gets critical sys.exit(2) called, when it becomes warning then sys.exit(1) and same when output is normal sys.exit(0)</span>
<span class="comment-copy">Well, to produce the output you stated in your question, you could call <code>sys.exit()</code> with an appropriately formatted string. However, this will always produce an exit code of <code>1</code>. If you want to control the exit code to implement a protocol with the caller <i>and</i> provide a specific error message, <code>logging</code> is still your best bet afaict.</span>
<span class="comment-copy">The question is not about the exit code or logging. Kindly re read the question and  my expected output.</span>
