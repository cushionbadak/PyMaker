<div class="post-text" itemprop="text">
<p>I'm attempting to find a word by its known letters and letters position (similar to a crossword) similar to what crosswordsolver.org does</p>
<p>Example :</p>
<pre><code>input: 
B E _ K

possible words: 
BEAK
BECK
BELK
BERK
</code></pre>
<p>I have all possible words (with the same length) in a list.
the problem is, i can't find a proper solution to compare user_input to my list.</p>
<p>comparing each index of each word on dictionary to user_input word letters seems to be a solution, however it is not efficient at all.</p>
<p>is there any other way to approach this problem ? </p>
<p>thank you in advance</p>
<p>EDIT : I should add that regex cannot be used as a solution because I'm working with Persian(farsi) words, which uses persian alphabet (similar to arabic)</p>
<p>User input is taken letter by letter and is stored as List.
There might be more than 1 missing letter and theWord length can be anything between 1-10</p>
</div>
<div class="post-text" itemprop="text">
<p>A quick hack</p>
<pre><code># Save pattern as (char, position) where position starts at 0
pattern = [("B", 0), ("E", 1), ("K", 3)] 

dictionary = ["BEAK", "BECK", "BELK", "BERK"]

def match(word, pattern):
    if len(pattern) &gt; len(word):
        return false

    return all(word[pos] == c for (c, pos) in pattern):

def list_matches(pattern, dictionary):
    for word in dictionary:
        if match(word, pattern):
            print(word)

list_matches(pattern, dictionary)
</code></pre>
<p>You can use a <a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow noreferrer">Trie</a> data structure and that will be much more efficient.</p>
</div>
<div class="post-text" itemprop="text">
<p>I suggest that you build a tree with your list of words.</p>
<pre><code>*-+-A
  |
  +-B-+-A
  |   |
      +-B
      |
      +-C
      |
      +-C
      |
      +-E-+-A-+
      |   |   |
              .
              .
              |
              +-K-x ("BEAK")
</code></pre>
<p>Searching would be fast and memory consumption low.</p>
<p>If you don't want to start from scratch, you could use the module anytree.</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look on <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expression package</a></p>
<p>Something as:</p>
<pre><code>import re
pattern = re.compile('BE.K')
possible_words = [word for word in all_words if re.match(pattern, word)]
</code></pre>
<p>would work.</p>
</div>
<span class="comment-copy">Is there always just a single unknown letter in the input? How many words are there in your list of possible words?</span>
<span class="comment-copy">Could you please add how your user input is stored? How does the user input the undefined character <code>_</code>?</span>
<span class="comment-copy">Regex can be used with Unicode. Which version of Python are you using?</span>
<span class="comment-copy">use <code>r'BE.K'</code> for regex pattern and its <code>word for word</code> not <code>word for work</code> in your list comp</span>
<span class="comment-copy">BE.K was an example, Regex can be implemented for a good solution however, my Dictionary contains Farsi words (similar to Arabic alphabet) so i can not use regex</span>
<span class="comment-copy">@A.Aminidad The point was use a raw string to save you from from a backslash hell in your regular expression.  For example to match a backslash you need two write "\\\\" or just r"\\", because you need to escape both the slash for the regex and the non-raw python string. So that is much easier to read.</span>
