<div class="post-text" itemprop="text">
<p>Certain mathematical operations, especially on data read from hardware drivers, can depend on fixed width of the data type. Example: bitwise shift. What is the Pythonic way of creating integer variables with fixed width (e.g. uint32, int16 etc.) that would overflow/shift accordingly?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would suggest the <a href="https://pypi.python.org/pypi/fixedint" rel="nofollow noreferrer">fixedint</a> library. The classes in that library are named in the following convention:</p>
<pre><code>[Mutable][U]Int&lt;N&gt;
</code></pre>
<p>So for your two examples, the classes would be</p>
<pre><code>#    C++                 Python fixedint
 std::uint32                 UInt32
 std::uint16                 UInt16
</code></pre>
<p>This supports things like bit-shifting, etc</p>
<pre><code>&gt;&gt;&gt; a = fixedint.UInt32(14)
&gt;&gt;&gt; a
UInt32(14)
&gt;&gt;&gt; a &lt;&lt; 2
UInt32(56)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For interfacing with hardware we normally use the <code>struct</code> standard library - specifically <code>struct.pack</code> and <code>struct.unpack</code> not only are fixed widths handled but also endianess issues.  See the <a href="https://docs.python.org/2/library/struct.html" rel="nofollow">python 2</a> or <a href="https://docs.python.org/3/library/struct.html" rel="nofollow">python  3</a> library manuals.</p>
</div>
<span class="comment-copy">There is the <a href="https://pypi.python.org/pypi/fixedint/0.1.2" rel="nofollow noreferrer">fixedint</a> library. They handle typical bit-fiddling and bitset operations.</span>
<span class="comment-copy">fixedint looks pretty good! Thanks! I think that's a comment that should become an answer.</span>
<span class="comment-copy">Another option is <a href="https://pypi.python.org/pypi/cinc" rel="nofollow noreferrer">cinc</a></span>
<span class="comment-copy">Another option is <a href="https://pypi.python.org/pypi/nativetypes" rel="nofollow noreferrer">nativetypes</a>, which additionally supports floating-point values and custom type aliases.</span>
<span class="comment-copy">That's a useful package to remember as well. Thanks!</span>
