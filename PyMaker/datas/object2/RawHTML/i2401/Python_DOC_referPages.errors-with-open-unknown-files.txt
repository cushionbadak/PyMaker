<div class="post-text" itemprop="text">
<p>In the code above, which is a file searching script, contains 2 files;
first, the SearchApp.py which is a class with some methods to get destination and the text to search for it there.
Second, Main.py , which is a file that I've imported SearchApp.py and I'v used it's methods there.<br/>
when I try to search for a text in the directory that the contains the script it works fine, but whenever I try to search in other directories bad things happen and it raise encoding error, FileNotFound and ...
Here is SearchApp.py:</p>
<pre><code>import os

class Searcher(object):
    """Search class for our app :D """
    def __init__(self):
        self.items = []
        self.matches = []


    def header():
        print("TATI Search App".center(75,'-'))



    def get_destinition(self):
        path = input("Where should I search? ")
        if not path or not path.strip():
            return None
        if not os.path.isdir(path):
            return None

        return os.path.abspath(path)



    def get_text(self):
        text = input('enter text to search: ')
        return text



    def search_dir(self, directory, text):
        self.directory = directory
        self.text = text

        items_in_dir = os.listdir(directory)

        for item in items_in_dir:
            if not os.path.isdir(os.path.join(directory,item)):
                self.items.append(os.path.join(directory,item))


    def search_text(self,target):
        self.target = target

        for file in self.items:
            with open (file,'r',encoding='utf-8')as f:
                for line in f:
                    if line.find(target) &gt;0:
                        self.matches.append(line)
        for found_item in self.matches:
            print(found_item)
</code></pre>
<p>This is Main.py:</p>
<pre><code>from searchApp import Searcher

searcher = Searcher()
path = searcher.get_destinition()
target = searcher.get_text()

directories = searcher.search_dir(path,target)
searcher.search_text(target)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p><strong>Question</strong>:  search in other directories bad things happen and it raise encoding error, FileNotFound  </p>
</blockquote>
<p>It's likely that you try to open a <strong>directory</strong>.<br/>
Test with <code>os.path.isfile(...)</code> and only process those files.  </p>
<p>You should also, as <strong>@Ven Ify</strong> pointed out, only open and read <strong>Text Files*</strong>.<br/>
A simple approach will be the file extensions, e.g. <strong>.txt</strong>.<br/>
But keep in mind this is not always the case.  </p>
<p>For example:  </p>
<pre><code>import os

root = "../test"
# Loop the os.listdir entrys
for entry in os.listdir(root):
    # Create a relative Path
    fpath = os.path.join(root, entry)

    # Test if it's a regular file
    if os.path.isfile(fpath):

        # Get the Filename Extension
        ext = os.path.splitext(entry)
        print("\t{} ext:{}".format(entry, os.path.splitext(entry)))

        # Test if Extension is in your List of Extensions
        if ext[1] in ['.txt', '.py']:
            print("\t\tProcess {}".format(fpath))
        else:
            print("Skipt '{}', file extension not in list!".format(entry))

    else:
        print("Skip '{}', is not a file!".format(entry))
</code></pre>
<blockquote>
<p><strong>Output</strong>:  </p>
<pre><code>    test.lnk ext:('test', '.lnk')  
Skipt 'test.lnk', file extension not in list!  
    atom.xml ext:('atom', '.xml')  
Skipt 'atom.xml', file extension not in list!  
    power.txt ext:('power', '.txt')  
        Process ../test/power.txt  
Skip 'tar', is not a file!  
    test ext:('test', '')  
Skipt 'test', file extension not in list!  
    test.xlsx ext:('test', '.xlsx')  
Skipt 'test.xlsx', file extension not in list!  
</code></pre>
</blockquote>
<p><strong><em>Tested with Python: 3.4.2</em></strong></p>
</div>
<div class="post-text" itemprop="text">
<p>I think try/except is a good solution. I would put it around the <code>for line in f</code> block. If utf-8 failed for a file, you could retry with <code>open(file,'r', encoding='latin-1')</code>. This will not raise errors as described <a href="http://python-notes.curiousefficiency.org/en/latest/python3/text_file_processing.html#files-in-an-ascii-compatible-encoding-best-effort-is-acceptable" rel="nofollow noreferrer">here</a>, but if the actual encoding is not similar to latin-1, the retrieved content might be useless.</p>
<p>You could also check the file extension and skip certain binary files like .jpg, .exe, ...</p>
<p>For the <em>FileNotFound</em> error you should check if the file exists with <a href="https://docs.python.org/3/library/os.path.html#os.path.isfile" rel="nofollow noreferrer">os.path.isfile()</a> before opening the file. You can also put a try/except around the <code>open()</code> because there may be files that you cannot open (wrong permissions, file suddenly deleted, etc.)</p>
</div>
<span class="comment-copy"><code>open (file,'r',encoding='utf-8')</code> this will only work for text files that are actually encoded in utf-8 or a very similar format. After opening a binary file (images, music, etc. ) it raises the encoding error.</span>
<span class="comment-copy">Thanks for your comment, but How should I fix this, shall I use Try/Except? If yes, where should it be used?</span>
