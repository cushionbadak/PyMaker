<div class="post-text" itemprop="text">
<p>I'm not sure if this is possible but I have a very large array containing dates</p>
<pre><code>a = ['Fri, 19 Aug 2011 19:28:17 -0000',....., 'Wed, 05 Feb 2012 11:00:00 -0000']
</code></pre>
<p>I'm trying to find if there is a way to count the frequency of the days and months in the array. In this case I'm trying to count strings for abbreviations of months or days (such as Fri,Mon, Apr, Jul) </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html" rel="nofollow noreferrer">Counter()</a> from the collections module.</p>
<pre><code>from collections import Counter

a = ['Fri, 19 Aug 2011 19:28:17 -0000', 
     'Fri, 09 June 2017 11:11:11 -0000', 
     'Wed, 05 Feb 2012 11:00:00 -0000']

# this generator splits the dates into words, and cleans word from "".,;-:" characters:
#  ['Fri', '19', 'Aug', '2011', '19:28:17', '0000', 'Fri', '09', 'June',
#   '2017', '11:11:11', '0000', 'Wed', '05', 'Feb', '2012', '11:00:00', '0000']
# and feeds it to counting:   
c = Counter( (x.strip().strip(".,;-:") for word in a for x in word.split() ))

for key in c:
    if key.isalpha():
        print(key, c[key])
</code></pre>
<p>The <code>if</code> prints only those keys from the counter that are pure "letters" - not digits:</p>
<pre><code>Fri 2 
Aug 1
June 1
Wed 1
Feb 1
</code></pre>
<p>Day-names and Month-names are the only <a href="https://docs.python.org/3/library/stdtypes.html#str.isalpha" rel="nofollow noreferrer">pure <code>isalpha()</code> parts</a> of your dates.</p>
<p>Full <code>c</code> output:</p>
<pre><code>Counter({'0000': 3, 'Fri': 2, '19': 1, 'Aug': 1, '2011': 1, 
         '19:28:17': 1, '09': 1, 'June': 1, '2017': 1, '11:11:11': 1, 
         'Wed': 1, '05': 1, 'Feb': 1, '2012': 1, '11:00:00': 1})
</code></pre>
<hr/>
<p>Improvement by @AzatIbrakov comment:</p>
<pre><code>c = Counter( (x.strip().strip(".,;-:") for word in a for x in word.split() 
              if x.strip().strip(".,;-:").isalpha()))
</code></pre>
<p>would weed out non-alpha words in the generation step already.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python has a built in <code>.count</code> method which is very useful here:  </p>
<pre><code>lista = [ 
    'Fri, 19 Aug 2011 19:28:17 -0000', 
    'Fri, 19 Aug 2011 19:28:17 -0000', 
    'Sun, 19 Jan 2011 19:28:17 -0000', 
    'Sun, 19 Aug 2011 19:28:17 -0000', 
    'Fri, 19 Jan 2011 19:28:17 -0000', 
    'Mon, 05 Feb 2012 11:00:00 -0000',
    'Mon, 05 Nov 2012 11:00:00 -0000',
    'Wed, 05 Feb 2012 11:00:00 -0000',
    'Tue, 05 Nov 2012 11:00:00 -0000',
    'Tue, 05 Dec 2012 11:00:00 -0000',
    'Wed, 05 Jan 2012 11:00:00 -0000',
]

listb = (''.join(lista)).split()

for index, item in enumerate(listb):
    count = {}
    for item in listb:
        count[item] = listb.count(item)

months = ['Jan', 'Feb', 'Aug', 'Nov', 'Dec']

for k in count:
    if k in months:
        print(f"{k}: {count[k]}")
</code></pre>
<p>Output:</p>
<blockquote>
<pre><code>(xenial)vash@localhost:~/python/stack_overflow$ python3.7 count_months.py 
Aug: 3
Jan: 3
Feb: 2
Nov: 2
Dec: 1
</code></pre>
</blockquote>
<p>What happens is we take all the <code>items</code> of the <code>lista</code> and <code>join</code> them into one <code>string</code>. Then we <code>split</code> that string to get all the individual <code>words</code>.
Now we can use the <code>count</code> method and create a <code>dictionary</code> to hold the counts.  We can create a <code>list</code> of <code>items</code> we want to retrieve from the <code>dicionary</code> and only retrieve those <code>keys</code></p>
</div>
<span class="comment-copy">do your dates have the same format?</span>
<span class="comment-copy">No the dates do not  have to be in the same format.  Also, I need days and months occurrences.</span>
<span class="comment-copy">Thank you. Not only did provide a clean and quick method for my main goal but also provide me the means to look up other counter information on the dates in my array.</span>
<span class="comment-copy">@user1821176 another viable route would have been to use regex - but for that the format of dates has to be fixed. glad it helps.</span>
