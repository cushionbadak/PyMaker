<div class="post-text" itemprop="text">
<p>I’m working on an algorithm in Python that would take user input and tell them what new letters they would need to add to a string to make it into a different string, and I’ve been playing around a lot with the dictionaries created by the Counter method.</p>
<p>I want to compare two different dictionaries that are counting letters from strings (like the objects returned from using the Counter tool from the collections module). We can call these dictionaries D1 and D2. I want there to be two resulting dictionaries (R1 and R2), the first being the shared letters between the two, and the second being the letters needed to make R1 into R2 (the letters that are in D2 but not in D1). </p>
<p>For example: </p>
<pre><code># assuming they’ve been converted from counter objects into regular 
dictionaries #

D1 = {‘A’: 2, ‘B’: 1, ‘C’: 4, ‘D’: 5}
D2 = {‘A’: 3, ‘B’: 4, ‘C’ : 4, ‘D’: 7}

# Some sort of comparison function executed here #
</code></pre>
<p>Result: </p>
<pre><code>R1={‘A’: 2, ‘B’: 3, ‘C’: 4, ‘D’: 5} 
R2 = {‘A’: 1, ‘B’: 1, ‘C’: 0 , ‘D’: 2} 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If by shared letters you mean the Counter intersection, you can use the <code>&amp;</code> operator and the amount of letters needed to convert <code>R1</code> into <code>R2</code> can be seen as the difference:</p>
<pre><code>from collections import Counter

D1 = Counter({'A': 2, 'B': 1, 'C': 4, 'D': 5})
D2 = Counter({'A': 3, 'B': 4, 'C': 4, 'D': 7})

R1 = D1 &amp; D2

print(R1)  # intersection:  min(c[x], d[x])
print(D2 - D1)  # subtract (keeping only positive counts)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>Counter({'D': 5, 'C': 4, 'A': 2, 'B': 1})
Counter({'B': 3, 'D': 2, 'A': 1})
</code></pre>
<p>If you want to keep negative counts, you can do it like this:</p>
<pre><code>from collections import Counter

D1 = Counter({'A': 2, 'B': 1, 'C': 4, 'D': 5, 'E': 5})
D2 = Counter({'A': 3, 'B': 4, 'C': 4, 'D': 7, 'E': 3})

R2 = Counter({key: D2.get(key, 0) - value for key, value in D1.items()})
print(R2)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>Counter({'B': 3, 'D': 2, 'A': 1, 'C': 0, 'E': -2})
</code></pre>
<p>In the above example <code>'E' : -2</code> because the count of <code>E</code> is <code>5</code> in <code>D1</code> and <code>3</code> in <code>D2</code>. <strong>Note:</strong> All the examples are in Python 3.5.</p>
</div>
<div class="post-text" itemprop="text">
<p>Those operations are already built-in to the Counter type:</p>
<blockquote>
<p>Several mathematical operations are provided for combining Counter objects to produce multisets (counters that have counts greater than zero). Addition and subtraction combine counters by adding or subtracting the counts of corresponding elements. Intersection and union return the minimum and maximum of corresponding counts.</p>
</blockquote>
<p>(Quoted from <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Python <code>collections.Counter</code> docs</a>.)</p>
<p>So assuming <code>D1</code> and <code>D2</code> are Counters,  try</p>
<pre><code>R1 = D1 &amp; D2
R2 = D2 - R1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I was not able to understand the question, but from my understanding:</p>
<pre><code>R1 = {k: min(v, D2[k]) for k, v in D1.items()}
R2 = {k: abs(v - D2[k]) for k, v in D1.items()}
</code></pre>
<h2>Result</h2>
<pre><code>&gt;&gt;&gt; {k: min(v, D2[k]) for k, v in D1.items()}
{'A': 2, 'B': 1, 'C': 4, 'D': 5}
&gt;&gt;&gt; {k: abs(v - D2[k]) for k, v in D1.items()}
{'A': 1, 'B': 3, 'C': 0, 'D': 2}
</code></pre>
</div>
<span class="comment-copy">Why does <code>R1</code> contain the entry <code>'B': 3</code>? (Also, be careful with those curly-quotes.)</span>
<span class="comment-copy">What is your question? Please post a <a href="https://stackoverflow.com/help/mcve">minimal, complete verifiable example</a>.</span>
<span class="comment-copy">wow thanks so much.. i guess i seriously underestimated what Counter can actually do on its own. this pretty much solves my problem</span>
