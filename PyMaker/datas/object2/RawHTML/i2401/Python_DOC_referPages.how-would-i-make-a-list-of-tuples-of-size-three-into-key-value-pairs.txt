<div class="post-text" itemprop="text">
<p>Objective: <br/>
1st number: Key to the second number<br/>
2nd number: Value to the first number but key to the third number<br/>
3rd number: Value to the second number</p>
<pre><code>def make_dictionary_list(old_list):
    return {key: values for key, *values in old_list}
</code></pre>
<p>Input: <br/><code>[(4157, 1, 1), (4157, 1, 10), (4157, 2, 1), (4157, 2, 10), (4157, 3, 1), (4157, 3, 10), (4157, 4, 1), (4157, 4, 10), (4182, 1, 1)]</code></p>
<p>Output:<br/><code>{4157: [4, 10], 4182: [1, 1]}</code></p>
<p>The output is not what I want. As stated above, I'd like the 1st number being key to the 2nd number and 2nd number being the key to the 3rd number. How would I go about doing that?</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>You unravel your list and put it into a dictionary using <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer">dict.setdefault()</a> :</p>
<pre><code>data = [(4157, 1, 1), (4157, 1, 10), (4157, 2, 1), (4157, 2, 10), (4157, 3, 1), 
        (4157, 3, 10), (4157, 4, 1), (4157, 4, 10), (4182, 1, 1)]

d = {}
for k,v,p in data:
    key = d.setdefault(k,{})
    key[v]=p

print(d)
</code></pre>
<p>Output:</p>
<pre><code>{4157: {1: 10, 2: 10, 3: 10, 4: 10}, 4182: {1: 1}}
</code></pre>
<p>You can acess it by:</p>
<pre><code>print( d[4157][3] ) # 10
</code></pre>
<p>The result is shorter then your source-data because you replace the first value by the second one:</p>
<pre><code>(4157, 1, 1) =&gt; (4157, 1, 10)  # 10 replaces 1  
(4157, 2, 1) =&gt; (4157, 2, 10)  # etc.
(4157, 3, 1) =&gt; (4157, 3, 10)
(4157, 4, 1) =&gt; (4157, 4, 10) 
</code></pre>
<hr/>
<p>You could instead aggregate them like so:</p>
<pre><code>for k,v,p in data:
    key = d.setdefault(k,{})
    key2 = key.setdefault(v,[])
    key2.append(p)

print(d)
</code></pre>
<p>To get an output of:</p>
<pre><code>{4157: {1: [1, 10], 2: [1, 10], 3: [1, 10], 4: [1, 10]}, 4182: {1: [1]}}
</code></pre>
<p>and access it by </p>
<pre><code>print( d[4157][3] ) # [1, 10]
</code></pre>
</div>
<span class="comment-copy">you have duplicate keys.</span>
<span class="comment-copy">This is perfect. I've never heard of or used setdefault(). Great explanation!</span>
<span class="comment-copy">@juice - setdefault and dict.get(key [, defaultvalue] ) ( <a href="https://stackoverflow.com/questions/11041405/why-dict-getkey-instead-of-dictkey">why</a> )are both worth knowing when using dicts. Happy to be of help. You could also use <a href="https://docs.python.org/2/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">collections defaultdict</a> to the same effect, but I prefer "normal" dicts.</span>
<span class="comment-copy">A hypothetical related follow-up question... if I had a fourth number that needed to be the value to the third number, would there be a better way to do this than having three "layers" of dictionaries?</span>
