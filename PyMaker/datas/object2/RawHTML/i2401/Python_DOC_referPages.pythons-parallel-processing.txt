<div class="post-text" itemprop="text">
<p>I am in the following setting: I have a method that takes an objective function f as input. As a subrouting  of that method i want to evaluate f on a small set of points. Since f has high complexity i considered doing that in parallel.
All online examples hang up even for trivial functions like squaring on sets with 5 points. They are using the multiprocessing library - and i don't know what i am doing wrong. I am not sure how to encapsulate that <code>__name__ == "__main__"</code> statement in my method. (since it is part of a module - i guess instead of <code>"__main__"</code> i should use the module name?)</p>
<p>Code i have been using looks like</p>
<pre><code>from multiprocessing.pool import Pool
from multiprocessing import cpu_count

x = [1,2,3,4,5]
num_cores = cpu_count()
def f(x):
    return x**2

if __name__ == "__main__":
    pool = Pool(num_cores)
    y = list(pool.map(f, x))
    pool.join()
    print(y)
</code></pre>
<p>When executing this code in my spyder it takes a bloody long time to finish.</p>
<p>So my main questions are: What am i doing wrong in this code? How can i encapsulate the __name__-statement, when this code is part of a bigger method?
Is it even worth it parallelizing this? (one function evaluation can take multiple minutes and in serial this adds up to a total runtime of hours...)</p>
</div>
<div class="post-text" itemprop="text">
<p>According to <a href="https://docs.python.org/2/library/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.join" rel="nofollow noreferrer">documentation</a> : </p>
<blockquote>
<p>close()</p>
<pre><code>Prevents any more tasks from being submitted to the pool. Once all the tasks have been completed the worker processes will exit.
</code></pre>
<p>terminate()</p>
<pre><code>Stops the worker processes immediately without completing outstanding work. When the pool object is garbage collected
</code></pre>
<p>terminate() will be called immediately.</p>
<p>join()</p>
<pre><code>Wait for the worker processes to exit. One must call close() or terminate() before using join().
</code></pre>
</blockquote>
<p>So you should add : </p>
<pre><code>from multiprocessing.pool import Pool
from multiprocessing import cpu_count

x = [1,2,3,4,5]

def f(x):
    return x**2

if __name__ == "__main__":
    pool = Pool()
    y = list(pool.map(f, x))
    pool.close()
    pool.join()
    print(y)
</code></pre>
<p>You can call Pool without any argument and it will use cpu_count by default</p>
<blockquote>
<p>If processes is None then the number returned by cpu_count() is used</p>
</blockquote>
<p>About the if <strong>name</strong> == "<strong>main</strong>", read more informations <a href="https://stackoverflow.com/questions/20360686/compulsory-usage-of-if-name-main-in-windows-while-using-multiprocessi">here</a>.</p>
<blockquote>
<p>So you need to think a bit about which code you want executed only in the main program. The most obvious example is that you want code that creates child processes to run only in the main program - so that should be protected by <strong>name</strong> == '<strong>main</strong>'</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>You might want to look into the <a href="https://docs.python.org/3.6/library/multiprocessing.html#multiprocessing.pool.Pool.map" rel="nofollow noreferrer">chunksize</a> argument of the map function that you are using. </p>
<p>On a large enough input list, a lot of your time is spent simply communicating the arguments to and from the separate parallel processes. </p>
<p>One symptom of this problem is that when you use something like  <a href="https://hisham.hm/htop/" rel="nofollow noreferrer">htop</a> all cores are firing but at &lt; 100%.</p>
</div>
<span class="comment-copy">Thanks for the explanation. It still just calculates for ever without coming to an end even tho i call close() first.. My question on the name part was more of the nature: If i have the code i posted above inside another method that is part of a module, do i replace "<b>main</b>" with the module name then?</span>
<span class="comment-copy">It does end when I try on my computer using pool.close() ..</span>
<span class="comment-copy">You should not put if name == "<b>main</b>" inside any method. Be sure to understand why you need this line sometimes and where you should put it (<a href="https://docs.python.org/3/library/__main__.html" rel="nofollow noreferrer">docs.python.org/3/library/__main__.html</a>)</span>
<span class="comment-copy">Are you using windows?</span>
<span class="comment-copy">My question is not about me considering to put _<i>name_</i> == "_<i>main_</i>" inside a function but rather _<i>name_</i> == &lt;module_name&gt;.</span>
