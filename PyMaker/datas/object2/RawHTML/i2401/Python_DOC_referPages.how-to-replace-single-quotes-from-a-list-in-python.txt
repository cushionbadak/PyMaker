<div class="post-text" itemprop="text">
<p>I have a list:</p>
<pre><code>my_list = ['"3"', '"45"','"12"','"6"']
</code></pre>
<p>This list has single and double quotes and the item value. How can I replace either the single or double quotes from each item. I tried below, but the results are same:</p>
<pre><code>my_list = [i.replace("''", " ") for i in my_list]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your list doesn't contain any strings with single quotes. I think you are confusing the <code>repr()</code> representation of the strings with their values.</p>
<p>When you print a Python standard library container such as a list (or a tuple, set, dictionary, etc.) then the <em>contents</em> of such a container are shown their <code>repr()</code> representation output; this is great when debugging because it makes it clear what type of objects you have. For strings, the representation uses valid Python string literal syntax; you can copy the output and paste it into another Python script or the interactive interpreter and you'll get the exact same value.</p>
<p>For example, <code>s</code> here is a string that contains some text, some quote characters, and a newline character. When I <em>print</em> the string, the newline character causes an extra blank line to be printed, but when I use <code>repr()</code>, you get the string value in Python syntax form, where the single quotes are part of the <em>syntax</em>, not the value. Note that the newline character also is shown with the <code>\n</code> syntax, exactly the same as when I created the <code>s</code> string in the first place:</p>
<pre><code>&gt;&gt;&gt; s = 'They heard him say "Hello world!".\n'
&gt;&gt;&gt; print(s)
They heard him say "Hello world!".

&gt;&gt;&gt; print(repr(s))
'They heard him say "Hello world!".\n'
&gt;&gt;&gt; s
'They heard him say "Hello world!".\n'
</code></pre>
<p>And when I echoed the <code>s</code> value at the end, the interactive interpreter also shows me the value using the <code>repr()</code> output.</p>
<p>So in your list, your strings do not have the <code>'</code> characters as part of the value. They are part of the string syntax. You only need to replace the <code>"</code> characters, they <em>are</em> part of the value, because they are inside the outermost <code>'...'</code> string literal syntax. You could use <code>str.replace('"', '')</code> to remove them:</p>
<pre><code>[value.replace('"', '') for value in my_list]
</code></pre>
<p>or, you could use the <a href="https://docs.python.org/3/library/stdtypes.html#str.strip" rel="nofollow noreferrer"><code>str.strip()</code> method</a> to only remove quotes that are at the start or end of the value:</p>
<pre><code>[value.strip('"') for value in my_list]
</code></pre>
<p>Both work just fine for your sample list:</p>
<pre><code>&gt;&gt;&gt; my_list = ['"3"', '"45"','"12"','"6"']
&gt;&gt;&gt; [value.replace('"', '') for value in my_list]
['3', '45', '12', '6']
&gt;&gt;&gt; [value.strip('"') for value in my_list]
['3', '45', '12', '6']
</code></pre>
<p>Again, the <code>'</code> characters are not part of the value:</p>
<pre><code>&gt;&gt;&gt; first = my_list[0].strip('"')
&gt;&gt;&gt; first         # echo, uses repr()
'3'
&gt;&gt;&gt; print(first)  # printing, the actual value written out
3
&gt;&gt;&gt; len(first)    # there is just a single character in the string
1
</code></pre>
<p><strong>However</strong>, I have seen that you are reading your data from a tab-separated file that you hand-parse. You can avoid having to deal with the <code>"</code> quotes altogether if you instead used the <a href="https://docs.python.org/3/library/csv.html#csv.reader" rel="nofollow noreferrer"><code>csv.reader()</code> object</a>, configured to handle tabs as the delimiter. That class <em>automatically</em> will handle quoted columns:</p>
<pre><code>import csv

with open(inputfile, 'r', newline='') as datafile:
    reader = csv.reader(datafile, delimiter='\t')
    for row in reader:
        # row is a list with strings, *but no quotes*
        # e.g. ['3', '45', '12', '6']
</code></pre>
<p>Demo showing how <code>csv.reader()</code> handles quotes:</p>
<pre><code>&gt;&gt;&gt; import csv
&gt;&gt;&gt; lines = '''\
... "3"\t"45"\t"12"\t"6"
... "42"\t"81"\t"99"\t"11"
... '''.splitlines()
&gt;&gt;&gt; reader = csv.reader(lines, delimiter='\t')
&gt;&gt;&gt; for row in reader:
...     print(row)
...
['3', '45', '12', '6']
['42', '81', '99', '11']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As suggested by @MartijnPieters in comments, you can use replace on the strings to get the desired output.</p>
<p>The change I like to suggest is that using <code>.replace('"', '')</code> instead of <code>.replace('"', ' ')</code>. Otherwise the resultant strings will have a leading and trailing white space</p>
<p>You can use list comprehension to deal with the list you have like this</p>
<pre><code>my_list = ['"3"', '"45"','"12"','"6"']

new_list = [x.replace('"', '') for x in my_list]

print(new_list) # ['3', '45', '12', '6']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use split:</p>
<pre><code>[x.split('"')[1] for x in my_list]
</code></pre>
<p>or you can use:</p>
<pre><code>[x.strip('"') for x in my_list]
</code></pre>
</div>
<span class="comment-copy">Your input list doesn't have single quotes in the values. Those are part of the string representations, not the contained characters.</span>
<span class="comment-copy"><code>.replace('"',"'")</code> (note, the first argument is " ' ", targeting ', the second argument is ' " ', targeting the ", its a nice trick)</span>
<span class="comment-copy">The <i>double</i> quote characters <i>are</i> part of the values, so <code>.replace('"', ' ')</code> would work (note that <code>"</code> is a single character).</span>
<span class="comment-copy">However, this does lead me to ask: how did you get the values in <code>my_list</code> in the first place? Are you manually parsing some JSON data perhaps? There are probably better ways to do so, and to avoid getting into this situation in the first place.</span>
<span class="comment-copy">You do not have single quotes. The list shows strings with the <code>repr()</code> format, the <code>'</code> single quotes are not part of the value. The <code>"</code> double quotes <i>are</i>. Use <code>csv.reader(fileobj, delimiter='\t')</code> and that quoting will automatically removed, and splitting is taken care of for you. You'll get rows with <code>['3', '45','12','6']</code>, still strings. The quotes in the list representation tell you that you have strings, and not integers; then you'd have <code>[3, 45, 12, 6]</code> instead.</span>
<span class="comment-copy">This is hardly efficient, and won't work if the quotes are not just on the outside of the string.</span>
<span class="comment-copy">@MartijnPieters I am writing it for the particular needs...</span>
<span class="comment-copy">Yes, but that doesn't mean we can't give feedback on how useful the approach <i>is</i>. Not when there's <code>str.strip()</code>, for example, which is much more efficient at doing the same job.</span>
<span class="comment-copy">@MartijnPieters I didm't know that method. I've added to the answer.</span>
