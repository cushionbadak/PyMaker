<div class="post-text" itemprop="text">
<p>I'm playing with itertools.cycle and I'm using a simple list as input. Then I write a while loop and I want to basically overwrite my output with each color as I iterate through them. The <code>sys.stdout.write('\r' + colors)</code> line does not overwrite all characters, only the length of the string of the next color. Lastly, I have a .5 second delay between each iteration.</p>
<pre><code>import itertools
import time
colors = ['green', 'yellow', 'red']
traffic_light = itertools.cycle(colors)
while True:
    sys.stdout.write('\r' + next(traffic_light))
    sys.stdout.flush()
    time.sleep(.5)
</code></pre>
<p>When I get to 'yellow' in my loop, I am left with 'w' or 'low' when the shorter 'green' and 'red' strings are printed. My output looks like this (after the first loop when 'yellow' is printed).</p>
<pre><code>redlow
greenw
yellow
</code></pre>
<p>Can I completely overwrite the output with the <code>'\r'</code> carriage?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can calculate the maximum width of the color strings and then use <code>str.ljust</code> to pad the output with enough spaces to fill to the maximum width:</p>
<pre><code>import itertools
import time
import sys
colors = ['green', 'yellow', 'red']
traffic_light = itertools.cycle(colors)
max_width = max(map(len, colors))
while True:
    sys.stdout.write('\r' + next(traffic_light).ljust(max_width))
    sys.stdout.flush()
    time.sleep(.5)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The carriage return <code>'\r'</code> will send the cursor to the beginning of the line, where it can overwrite the existing text. You can combine this with the sequence CSI K, which erases from the current cursor to the end of the line.</p>
<p>Just replace <code>\r</code> with <code>\r\x1b[K</code>. See <a href="https://en.wikipedia.org/wiki/ANSI_escape_code" rel="nofollow noreferrer">ANSI escape code</a>.</p>
<pre><code>import itertools
import sys
import time
colors = ['green', 'yellow', 'red']
traffic_light = itertools.cycle(colors)
while True:
    sys.stdout.write('\r\x1b[K' + next(traffic_light))
    sys.stdout.flush()
    time.sleep(.5)
</code></pre>
<p>Try out these additional escape sequences:</p>
<pre><code># Add color
colors = ['\x1b[32mgreen', '\x1b[33myellow', '\x1b[31mred']
</code></pre>
<p>Note the limitations of this technique... if the terminal is short enough that your text wraps, the program will move forward one line every time you print. If you need something more robust, <a href="https://docs.python.org/3/library/curses.html" rel="nofollow noreferrer">curses</a> gives you more power but it doesn't work out of the box on Windows.</p>
</div>
<div class="post-text" itemprop="text">
<p>Create a format string that left justifies to the max width.</p>
<pre><code>import itertools
import time

colors = ['green', 'yellow', 'red']
fmt = f'\r{{:&lt;{max(map(len, colors))}}}' # fmt = '{:&lt;7}'

for color in itertools.cycle(colors):
    print(fmt.format(color), end='') # if needed add: flush=True
    time.sleep(.5)
</code></pre>
<p>Prior to 3.6 use <code>fmt = '\r{{:&lt;{}}}'.format(max(map(len, colors)))</code>.</p>
<p>Alternatively use the <code>.ljust()</code> string method:</p>
<pre><code>import itertools
import time

colors = ['green', 'yellow', 'red']
width = max(map(len, colors))

for color in itertools.cycle(colors):
    print('\r' + color.ljust(width), end='') # if needed add: flush=True
    time.sleep(.5)
</code></pre>
</div>
<span class="comment-copy">I guess there might be a better solution, but at worst you could retain the size of the previous line in order to pad the current line with enough spaces to entirely overwrite the previous line.</span>
<span class="comment-copy">@Aaron: You can use CSI K to erase the entire line without knowing how long it is... but this doesn't necessarily work the way you want if the line is wrapped.</span>
<span class="comment-copy">Negligibly better would be to remember the length of the previous color, and only pad to that length.</span>
<span class="comment-copy">Indeed. I've updated my answer accordingly then.</span>
<span class="comment-copy">It is worth noting that in the general case, <code>max_width</code> may be incorrect because the column width of some strings can be <i>longer</i> than the character width. It happens to work in this particular case because the strings are simple ASCII, but people should be aware of the limitations.</span>
<span class="comment-copy">It is worth noting that this happens to work because the strings are simple ASCII, but this will not work for arbitrary text in general because the width of a string, in columns, can be wider than the length of a string, in characters.</span>
