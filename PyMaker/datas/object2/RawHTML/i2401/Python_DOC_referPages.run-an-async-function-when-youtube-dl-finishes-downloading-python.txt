<div class="post-text" itemprop="text">
<p>I've been writing a music bot for python using the discord.py rewrite. It downloads videos via youtube-dl and plays them back in a voice chat. I've been working hard on a music extension, and recently realized I've completely overlooked something. The <code>progress hooks</code> option of youtube-dl is synchronous, while discord.py is async. youtube-dl spawns a subprocess when downloading a video rather than running it on the current thread, so it does not hang the program. The function I need to run on the completion of a download is a coroutine, as it is part of discord.py</p>
<p>TL;DR I need to run a coroutine when a youtube-dl download finishes</p>
<p>I know this is possible, I've seen it done before, but don't quite understand it.</p>
<p>Here's what I have so far: </p>
<pre><code>def log(text):
  print(Style.BRIGHT + Fore.WHITE + '[' + Fore.RED + 'Music' + Fore.WHITE + '] ' + Style.RESET_ALL + text)
def sync_config():
  raw_config.seek(0)
  raw_config.write(json.dumps(config))
  raw_config.truncate()
lookup_opts = {
    "simulate": True,
    "quiet" : True, #TODO: make this part of config.json
}

if not os.path.exists("plugins/music"):
  log("Config does not exist! Creating it for you..")
  os.makedirs("plugins/music")
if not os.path.exists("plugins/music/cache"):
  os.makedirs("plugins/music/cache")
if not os.path.exists("plugins/music/config.json"):
    with open('plugins/music/config.json', 'w+') as f:
      f.write('{}')
      log('Created config.json')
raw_config = open('plugins/music/config.json', 'r+')
config = json.load(raw_config)

class Music:
  def __init__(self, bot):
      self.bot = bot
  @commands.command(hidden=True)
  async def clearcache(self, ctx):
    if ctx.author.id in ctx.bot.config["admins"]:
      log("Cache cleared!")
      await ctx.message.add_reaction("âœ…")
      shutil.rmtree("plugins/music/cache")
      os.makedirs("plugins/music/cache")
    else:
      await ctx.send(ctx.bot.denied())
  @commands.command()
  async def play(self, ctx, url):
    """Download and play a link from youtube"""
    message = await ctx.send(f"Downloading &lt;{url}&gt;..")
    with youtube_dl.YoutubeDL(lookup_opts) as ydl:
      try:
        info = ydl.extract_info(url)
        await message.edit(content=f"Downloading {info['title']}..")
      except:
        await ctx.send("An error occured downloading that video! Are you sure that URL is correct?")
      def callback(d):
        if d['status'] == 'finished':
              loop = asyncio.new_event_loop()
              asyncio.set_event_loop(loop)
              loop.run_until_complete(ctx.send("Done!"))
              print("Done!")
      download_opts = {
        "format": 'm4a/bestaudio/best',
        "quiet" : True, #TODO: make this part of config.json
        'progress_hooks': [callback],
      }
      with youtube_dl.YoutubeDL(download_opts) as ydl:
          ydl.download([url])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The easiest way to schedule asynchronous execution of a coroutine from blocking code is <a href="https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_task" rel="nofollow noreferrer"><code>loop.create_task</code></a>. Since <code>callback</code> inherits the scope of the enclosing <code>play</code> method, we can use <code>self.bot.loop</code> directly:</p>
<pre><code>  def callback(d):
    if d['status'] == 'finished':
          self.bot.loop.create_task(ctx.send("Done!"))
          print("Done!")
</code></pre>
</div>
<span class="comment-copy">Please update your question with the relevant code.If the link goes 404, it has no value for future users.</span>
<span class="comment-copy">Just a side note - it is against YouTube ToS to download videos.</span>
<span class="comment-copy">One more question, lets say I have <code>test = loop.create_task(coreroutine())</code> - test is now a Task object, not the output of the coreroutine. How can I get the output of the coreroutine?</span>
<span class="comment-copy">@GmanSmith <a href="https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.result" rel="nofollow noreferrer"><code>Task.result()</code></a></span>
