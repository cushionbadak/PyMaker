<div class="post-text" itemprop="text">
<p>I know that the following string definitions <em>represent</em> (python internal) the same (basic knowledge):</p>
<pre><code>s1 = "D:\\users\\xy\\Desktop\\PC_daten.txt"
s2 = r"D:\users\xy\Desktop\PC_daten.txt"
</code></pre>
<p>Therefore if you make it e.g. interactive in PythonWin:</p>
<pre><code>&gt;&gt;&gt; s1 = "D:\\users\\xy\\Desktop\\PC_daten.txt"
&gt;&gt;&gt; s1
'D:\\users\\xy\\Desktop\\PC_daten.txt'
&gt;&gt;&gt; print s1
D:\users\xy\Desktop\PC_daten.txt
&gt;&gt;&gt; s2 = r"D:\users\xy\Desktop\PC_daten.txt"
&gt;&gt;&gt; s2
'D:\\users\\xy\\Desktop\\PC_daten.txt'
&gt;&gt;&gt; print s2
D:\users\xy\Desktop\PC_daten.txt
</code></pre>
<p>Clear for me (understand)</p>
<p>But what me confuse is that at the python built in function <strong>open</strong> all this (partly crazy) <em>path-codings</em> work (interactive tested in PythonWin):</p>
<pre><code>&gt;&gt;&gt; a = open("D:\users\xy\Desktop\PC_daten.txt")
&gt;&gt;&gt; a
&lt;open file 'D:\\users\\xy\\Desktop\\PC_daten.txt', mode 'r' at 0x00000000046989C0&gt;
&gt;&gt;&gt; b = open("D:\\users\\xy\\Desktop\\PC_daten.txt")
&gt;&gt;&gt; b
&lt;open file 'D:\\users\\xy\\Desktop\\PC_daten.txt', mode 'r' at 0x00000000048B2300&gt;
&gt;&gt;&gt; c = open(r"D:\users\xy\Desktop\PC_daten.txt")
&gt;&gt;&gt; c
&lt;open file 'D:\\users\\xy\\Desktop\\PC_daten.txt', mode 'r' at 0x00000000048B20C0&gt;
&gt;&gt;&gt; d = open(r"D:\\users\\xy\\Desktop\\PC_daten.txt")
&gt;&gt;&gt; d
&lt;open file 'D:\\\\users\\\\xy\\\\Desktop\\\\PC_daten.txt', mode 'r' at 0x00000000048B2390&gt;
</code></pre>
<p>My questions:</p>
<ul>
<li>Where is this behaviour documented?</li>
<li>Have anybody background-informations?</li>
</ul>
<p>Tests was made at Windows 7 OS and with PythonWin 2.7.13</p>
</div>
<div class="post-text" itemprop="text">
<p>For details, check section 2.4.1 in <a href="https://docs.python.org/3/reference/lexical_analysis.html" rel="nofollow noreferrer">the docs</a></p>
<p>Let's take a look at the different strings and why they are working:</p>
<pre><code>&gt;&gt;&gt; a = open("D:\users\xy\Desktop\PC_daten.txt")
&gt;&gt;&gt; a
&lt;open file 'D:\\users\\xy\\Desktop\\PC_daten.txt', mode 'r' at 0x00000000046989C0&gt;
</code></pre>
<p>The <code>\</code> is the escape character in a string, which is used for special characters like a newline (<code>\n</code>). In this case you are lucky that none of the combinations <code>\u</code> <code>\x</code> <code>\P</code> indicate a special character like that, hence it works, as opposed to <code>open("foo\newfile.txt")</code></p>
<pre><code>&gt;&gt;&gt; b = open("D:\\users\\xy\\Desktop\\PC_daten.txt")
&gt;&gt;&gt; b
&lt;open file 'D:\\users\\xy\\Desktop\\PC_daten.txt', mode 'r' at 0x00000000048B2300&gt;
</code></pre>
<p>Save method, the <code>\\</code> constructs escapes the <code>\</code>, hence you would also be able to do <code>open("foo\\newline")</code></p>
<pre><code>&gt;&gt;&gt; c = open(r"D:\users\xy\Desktop\PC_daten.txt")
&gt;&gt;&gt; c
&lt;open file 'D:\\users\\xy\\Desktop\\PC_daten.txt', mode 'r' at 0x00000000048B20C0&gt;
</code></pre>
<p>Also save, since the prefix <code>r</code>indicates a raw string, the <code>\</code> are taken literally and not as escape sequences</p>
<pre><code>&gt;&gt;&gt; d = open(r"D:\\users\\xy\\Desktop\\PC_daten.txt")
&gt;&gt;&gt; d
&lt;open file 'D:\\\\users\\\\xy\\\\Desktop\\\\PC_daten.txt', mode 'r' at 0x00000000048B2390&gt;
</code></pre>
<p>Here you have a raw string (preceeded with <code>r</code>) but still use double <code>\</code>, hence you have <code>\\</code> in the path. This works because windows understand paths with double <code>\</code> which you can also confirm in the <code>cmd</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This string behaviour is documented under (Python v3.7 docs) <code>2.4.1. String and Bytes literals</code> and the behaviour of <code>open()</code> is documented under <code>2. Built-in Functions</code>.<br/>
Specifically, for the file/path in <code>open()</code> is as clarified under <code>16.1.2. Process Parameters</code>, in the entry <code>class os.PathLike</code>. Admittedly this is a lot of reading to really understand this parameter.</p>
<p>In summation: a r"string" is a raw string. You don't need to escape slashes like <code>\\</code> to result in a single slash <code>\</code> when using raw slashes.</p>
<p>In the second block, just to be clear, you were looking at the variables themselves and looking at them via their string representation (when using print) (which I think you mention you understand fine, but I just wanted to repeat it back to you to be sure).</p>
<p>Going forward, python versions will all be using a PathLike object when handling files and folders. I'm guessing you're still on Python 2.x as you didn't get an error when running <code>print s1</code> - should be <code>print(s1)</code> in Python 3.x. I recommend moving to Python 3 soon, it really is much better.</p>
<p>I hope that answers your questions successfully?</p>
</div>
<span class="comment-copy">I don't think this answer's the OP's question. As far as I can tell, they're asking why <code>open</code> accepts duplicated backslashes like in <code>r"D:\\users\\xy"</code>.</span>
<span class="comment-copy">Well that is only the last of the "crazy options" mentioned in the question, so I thought all should be adressed. If only the last part is of interest to OP, then the question should be shortened and then I would also shorten my answer</span>
<span class="comment-copy">Thanks for the answer, that is already helpful. The second and thierd possibility was in fact clear for me. That i have at the first writing style luck, i understand (but it is for me really an new awareness that I can, at an none-raw-string, write an backslash which NOT code an escape sequence and pythondo NOT produce an error at this case). The fourth case is also an new awareness for me. Thank you very much! :-)</span>
<span class="comment-copy">Many thank, yes the answer's are very helpful. I know that python 3.x is really better than python 2.x. But I can at the moment not use an higher python version (because it is included in applications of dSPACE)</span>
