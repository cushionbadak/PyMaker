<div class="post-text" itemprop="text">
<p>I have Python 3.7.0 installed on Windows. I only followed the Installer one time, but I have two different executables of python installed in two different locations.</p>
<pre><code>C:\Windows\py.exe
</code></pre>
<p>with a white icon, 887 KB (908,952 bytes); and</p>
<pre><code>C:\Users\myuser\AppData\Local\Programs\Python\Python37\python.exe
</code></pre>
<p>with a black icon, 97.6 KB (99,992 bytes)</p>
<p>The Python Installer specifies the second path, as shown in the Installation <a href="https://docs.python.org/3/_images/win_installer.png" rel="nofollow noreferrer">guide</a>, but Git Bash, Cygwin, and MSYS+MingW all report the first one as valid and not the second one:</p>
<pre><code>$ which python
which: python: unknown command

$ which py
/c/WINDOWS/py.exe
</code></pre>
<p>And PowerShell shows that both of them are Python 3.7.0, despite their different file sizes:</p>
<pre><code>PS C:\Users\myuser\AppData\Local\Programs\Python\Python37&gt; ./python.exe -V
Python 3.7.0

PS C:\Users\myuser\AppData\Local\Programs\Python\Python37&gt; py -V
Python 3.7.0
</code></pre>
<p>The first path does not have a "Scripts" sub-folder, but the second one does, however the System Environment variables point to a "Scripts" folder at the path that has no "Scripts" folder:</p>
<p>PATH variable:
<code>%PYTHON_HOME%\</code>
<code>%PYTHON_HOME%\Scripts\</code></p>
<p>PYTHON_HOME variable:
<code>C:\Windows\</code></p>
<p>So where does the "py.exe" store libraries? Why do both of them correctly run python scripts and have the same outputs? And why is there an install at <code>C:\Windows\</code> anyway? I had to physically add the second one to the PATH variable to be able to use <code>pip</code> from a terminal without typing <code>py -m pip</code>, and I do not want to type the long version.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>py.exe</code> is the special <a href="https://docs.python.org/3/using/windows.html#python-launcher-for-windows" rel="nofollow noreferrer">Python launcher for Windows</a>. It's not directly associated with any specific version of Python, it just installs with any version of Python 3.3 or later, and provides three major benefits:</p>
<ol>
<li>Being installed in the <code>Windows</code> directory ensures it's always installed in your <code>PATH</code> (so no need to modify your <code>PATH</code> for each Python install directory)</li>
<li>It allows you to select different Python versions easily; <code>py -2 myscript.py</code> runs it with the latest Python 2 on your system, <code>py -3 myscript.py</code> with the latest Python 3 version, or <code>py -3.5 myscript.py</code> could be used to launch with Python 3.5 even if a later release were available. As of 3.6's launcher, with no arguments it runs the latest version of Python you have installed; for 3.3-3.5's launcher, it defaulted to running the latest version of Python 2 installed, with the <code>-3</code> switch necessary to make it use the latest Python 3.</li>
<li>By associating the launcher with the <code>.py</code> extension, you can use UNIX-style shebang lines in your scripts. For example, if the first line of your script is <code>#!/usr/bin/env python3</code> (pretty standard), and <code>py.exe</code> is installed and associated with <code>.py</code> files, then on running <code>myscript.py</code>, it's equivalent to having run <code>py -3 myscript.py</code></li>
</ol>
<p>You can <a href="https://www.python.org/dev/peps/pep-0397/" rel="nofollow noreferrer">read more details on the PEP</a>.</p>
<p>Point is, <code>py.exe</code> doesn't actually store any libraries of its own. All it does is provide the common interface to find other existing installations of Python on Windows (while it only ships with 3.3 and higher, it manages older installations as well, including Python 2 installs). It's unfortunate that <code>pip</code> has to be run in an ugly way, but that's mostly unavoidable if you want to allow multiple versions of Python to exist on a system without stomping on each other. If you had installed both 2.7 and 3.7, only one of them could be first in your <code>PATH</code>, so you'd only have one <code>python.exe</code> and one <code>pip</code> to run; by using the <code>py.exe</code> launcher with <code>py -2 -mpip</code> or <code>py -3 -mpip</code>, you can be precise without the two installations stepping on each other's toes.</p>
</div>
<div class="post-text" itemprop="text">
<p>Could you run both version of Python with these commands in both instances:</p>
<pre><code>import sys
print('\n'.join(sys.path))
</code></pre>
<p>The results are default libraries path for that respective Python copy.</p>
<p>Anaconda does not use <code>PYTHONPATH</code>. <a href="https://docs.python.org/3/using/windows.html" rel="nofollow noreferrer">Python standard documentation</a> suggests not to configure this environment variable as different versions of Python may have its compatible libraries. So, I would guess not to do anything unless you have run out of disk space. One of Python must be installed by cygwin and the other was by a standard Python installer.</p>
</div>
<span class="comment-copy">This explains why the two executables are different sizes. Thank you. I suppose it is worth putting the long path to Scripts into the PATH variable to use <code>pip</code> since I only use one version of Python. But why would they include the %%\Scripts folder in PATH if the OS cannot validly access it? Is it used internally by Python?</span>
<span class="comment-copy">The launcher is installed in the Windows directory (not System32) only when installed for all users. Otherwise it installs in a subdirectory of "%LocalAppData%\Programs\Python", which is automatically added to the per-user <code>PATH</code>. The installer also has an option to update <code>PATH</code> to include the installation and scripts directories and to add ".PY" to <code>PATHEXT</code>. As to pip, if the Scripts directory is in <code>PATH</code>, you can use the versioned name such as "pip3.6" to disambiguate. The only time it's necessary to use  <code>-m pip</code> is when upgrading pip itself.</span>
<span class="comment-copy">This was my first guess, but it seems that the answer by @ShadowRanger explains the difference in file sizes as well as the other items, whereas this answer should be valid only if both executables were the same size.</span>
