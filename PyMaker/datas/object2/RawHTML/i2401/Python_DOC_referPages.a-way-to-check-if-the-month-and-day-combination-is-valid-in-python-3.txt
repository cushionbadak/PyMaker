<div class="post-text" itemprop="text">
<ol>
<li>Hello, I am currently taking a basic python class and we are currently learning if-else statements. I understand the concept if-else statements but there is one thing bothering me at the moment. I am required to create a prompt that allows the user to input a month from 1-12, days from 1-31, and the prompts will tell whether the input is valid/invalid by determining if the inputs are in those ranges. However, logically speaking some dates would not make sense. For example, you can't have 4/31 or 6/31 because those months only have 30 days in them. I am currently trying to write a code that will tell the user if the month/day combination are either valid/invalid but I have no idea how to. I would love to be taught how.</li>
</ol>
<p>Here is what I have so far:</p>
<pre><code>month = int(input("Please enter a month in numeric form from 1-12: "))
if month == 1 or 3 or 5 or 7 or 8 or 10 or 12:
    print("Valid Month with more than 30 days")
elif month == 4 or 6 or 9 or 11:
    print("Valid Month with 30 days")
elif month == 2:
    print("Month has only 28 days max")
else:
    print("Invalid Month")
day = int(input("Please enter a day in numeric form from 1-31: "))
if day == 0 &lt; day &lt; 32:
    print("Valid Day")
else:
    print("Invalid Day")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That's not quite how <code>or</code> works. You probably want to use <code>in</code> with a set, like,</p>
<pre><code>if month in {1, 3, 5, 7, 8, 10, 12}:
</code></pre>
<p>etc.</p>
<p><code>or</code> is a binary operator that returns its left argument if true, its right argument otherwise, so </p>
<p><code>foo or bar</code> is like saying <code>foo if foo else bar</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>use a list or dictionary</p>
<pre><code>...
days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
if 0 &lt; day &lt;= days[month]:
    print("Valid Day")
else:
    print("Invalid Day")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do some slicing:</p>
<pre><code>list(range(1,13))[1::2][1:]
</code></pre>
<p>And:</p>
<pre><code>list(range(1,13))[::2]
</code></pre>
<p>For month checking, in the other-hand, for days:</p>
<pre><code>0 &lt; day &lt; 32
</code></pre>
<p>Demo:</p>
<pre><code>month = int(input("Please enter a month in numeric form from 1-12: "))
if month in list(range(1,13))[::2]:
    print("Valid Month with more than 30 days")
elif month in list(range(1,13))[1::2][1:]:
    print("Valid Month with 30 days")
elif month == 2:
    print("Month has only 29 days max")
else:
    print("Invalid Month")
day = int(input("Please enter a day in numeric form from 1-31: "))
if 0 &lt; day &lt; 32:
    print("Valid Day")
else:
    print("Invalid Day")
</code></pre>
<p>Example outputs:</p>
<pre><code>Please enter a month in numeric form from 1-12: 3
Valid Month with more than 30 days
Please enter a day in numeric form from 1-31: 3
Valid Day
</code></pre>
<hr/>
<pre><code>Please enter a month in numeric form from 1-12: 4
Valid Month with 30 days
Please enter a day in numeric form from 1-31: 244
Invalid Day
</code></pre>
<hr/>
<pre><code>Please enter a month in numeric form from 1-12: 354
Invalid Month
Please enter a day in numeric form from 1-31: 3
Valid Day
</code></pre>
<p>Can do leap year, and other cool stuff:</p>
<pre><code>import calendar
month = int(input("Please enter a month in numeric form from 1-12: "))
if month in list(range(1,13))[::2]:
    print("Valid Month with more than 30 days")
    num=31
elif month in list(range(1,13))[1::2][1:]:
    print("Valid Month with 30 days")
    num=30
elif month == 2:
    year=int(input("Since it's february, what year is it:"))
    if calendar.isleap(year):
       print("Month has only 29 days")
       num=29
    else:
       print("Month has only 28 days")
       num=28
else:
    print("Invalid Month")
day = int(input("Please enter a day in numeric form from 1-31: "))
if 0 &lt; day &lt; num:
    print("Valid Day")
else:
    print("Invalid Day")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've done something like this before when i started python at school, it seems familiar.</p>
<p>Anyway logically speaking that's not how you use or, sure in human language it makes sense but python is not "smart" enough to figure it out. I'll help you out with this you will need to use "in" or add the word "month" after every or.</p>
<p>tip: to add comments to your code in the future to help us out, use "#" to tell us what each bits do, this is helpful with more complex programs.</p>
<pre><code>def main():
month = int(input("Please enter a month in numeric form from 1-12: "))
if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:
    print("Valid Month with more than 30 days")

elif month == 4 or month == 6 or month == 9 or month == 11:
    print("Valid Month with 30 days")
elif month == 2:
    print("Month has only 28 days max")
else:
    print("Invalid Month")

day = int(input("Please enter a day in numeric form from 1-31: ")) #storing variables

if month == 4 and day &lt;= 30: #if you haven't learned "and" yet, use your own way
    print("Valid Day")
elif month == 6 and day &lt;= 30:
    print("Valid Day")
elif month == 9 and day &lt;= 30:
    print("Valid Day")
elif month == 11 and day &lt;= 30:
    print("Valid Day")
elif month == 2 and day &lt;= 28: #February case
    print("Valid Day")
else:
    print("That combination is not a valid day!")

main()
</code></pre>
<p>output:
Please enter a month in numeric form from 1-12: 2
Month has only 28 days max
Please enter a day in numeric form from 1-31: 28
Valid Day</p>
<p>Please enter a month in numeric form from 1-12: 4
Valid Month with 30 days
Please enter a day in numeric form from 1-31: 31
That combination is not a valid day!</p>
<p>Hope this helps!</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>parse_month_day</code> function below will take a str like "07-28" and return a tuple <code>(7, 28)</code>. There are unittests to illustrate it's usage.</p>
<pre><code>import unittest


def parse_month_day(month_day_str):
    """Returns month, day tuple from a MM-DD string.

    Args:
        month_day_str (str):

    Returns:
        tuple(int, int): Tuple of month and day.

    """
    try:
        month, day = (int(part) for part in month_day_str.split("-"))
    except ValueError:
        raise ValueError("Invalid month day string, expected MM-DD or M-D format.")

    if not 1 &lt;= month &lt;= 12:
        raise ValueError(f"Invalid month {month:02}, expected to be 01-12")

    valid_month_days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    day_bound = valid_month_days[month - 1]

    if not 1 &lt;= day &lt;= day_bound:
        raise ValueError(
            f"Invalid day {day:02} for month {month:02}, expected to be 01-{day_bound}"
        )

    return month, day


class TestParseMonthDay(unittest.TestCase):
    def test_parse_month_day_string(self):
        actual = parse_month_day("07-28")
        expected = (7, 28)
        self.assertEqual(actual, expected)

    def test_invalid_month_day_string(self):
        with self.assertRaisesRegex(ValueError, "Invalid month day string, expected MM-DD or M-D format"):
            parse_month_day("Jul-28")

    def test_invalid_month_value(self):
        with self.assertRaisesRegex(ValueError, "Invalid month 00, expected to be 01-12"):
            parse_month_day("0-28")

    def test_invalid_day_value(self):
        with self.assertRaisesRegex(ValueError, "Invalid day 32 for month 07, expected to be 01-31"):
            parse_month_day("07-32")

        with self.assertRaisesRegex(ValueError, "Invalid day 30 for month 02, expected to be 01-29"):
            parse_month_day("02-30")

if __name__ == "__main__":
    unittest.main()
</code></pre>
</div>
<span class="comment-copy">Welcome to SO. Please take the time to read <a href="https://stackoverflow.com/questions/how-to-ask">How to Ask</a>.  The <a href="https://docs.python.org/3/library/datetime.html#datetime.date" rel="nofollow noreferrer">datetime</a> module could do that for you - it will <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">throw an exception</a> for an invalid date..  Voting to close as too broad.</span>
<span class="comment-copy">What about leap year?</span>
<span class="comment-copy">Time and date calculations are far too conplex to do them manually. There are a ton of edge cases. Use the <code>datetime</code> package, it knows all the tricks. To check if a date is valid create a <code>DateTime</code> or <code>Date</code> object from it. If there's no exception it is OK.</span>
<span class="comment-copy">Thank you very much! That logic using list makes a lot of sense as the months are in sequential order from "1"!</span>
