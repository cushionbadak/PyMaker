<div class="post-text" itemprop="text">
<h1>More information</h1>
<p>Below is my code. I am in the process of making a small program that finds Palindromes. I want the program to take user input, save it to a variable, and then check for any spaces. If it finds a space to save its index, and then to take it out to check for a Palindromes. Out of curiosity and to further my programming skills, I want to be able to add the space back later while the word is in reverse. For example, nurses run = nursesrun backward and forwards, but I also want to display it backward and add the space back.</p>
<hr/>
<pre><code>word = input("Please enter a word")

storeVal = word.count(" ")
print()

newWord = word.replace(" ", "")
print(newWord)
print()

while True:

  if newWord == "":
    print("Sorry, but you did not enter a word")
    break

  elif newWord == newWord[::-1]:
    #use the index storeVal and add it in the string to put a space back
    print(" is a palidrone")
    break

  elif newWord != newWord[::-1]:
    print("This is not a palidron")
    break

  else:
    print("You have reached an error")
</code></pre>
<p>Also, if you have any suggestions for how I can improve my ability to ask this question or a better way I can write this question, please let me know. Thank you for reading.</p>
</div>
<div class="post-text" itemprop="text">
<p>Just reverse <code>word</code> instead of reconstructing the modified <code>newWord</code>!    </p>
<pre><code>print("{} is a palidrone".format(word[::-1]))
</code></pre>
<p>Also <code>storeVal</code> in your example isn't storing the index of the space -- it's storing the number of spaces in your input string.</p>
</div>
<div class="post-text" itemprop="text">
<p>As per the other answer, just for displaying you can print <code>word</code> instead of <code>newWord</code>. But if you want to learn how get the original positions of spaces, here are a few hints:</p>
<ul>
<li><a href="https://docs.python.org/3/library/stdtypes.html#str.find" rel="nofollow noreferrer">word.find(" ")</a> will give you the index of the first space or -1 if none found, you can save it into a list, and than call <code>word.find(" ", space_index + 1)</code> to call the next one, where <code>space_index</code> is the index of last found space, until you get -1 which means no more spaces</li>
<li>another, more educated (to my opinion), would to enumerate the string and collect all indexes for spaces in a list using list comprehension (or set, of you don't care about the order).</li>
</ul>
</div>
<span class="comment-copy"><a href="http://stackoverflow.com/help/mcve">Minimal, complete, verifiable example</a> applies here.  Show the output you have so far, the output you're trying to get, and include the (not-yet-correct) code you wrote to solve that problem.</span>
<span class="comment-copy">Why not just print the reverse of the input (i.e. <code>word[::-1]</code>) after checking if it's a palindrome?</span>
<span class="comment-copy">You have an infinite loop going. <code>while True:</code> and you are not adjusting anything to justify the loop. Remove the <code>while</code> line and move the indentation back up of all lines below the line. You do not need the final <code>else</code>. Convert <code>elif newWord != newWord[::-1]:</code> to <code>else: print("This is not a palidron")</code>.</span>
<span class="comment-copy">I have done that for this assignment, but I was wondering if there was another way to do it</span>
<span class="comment-copy">Thank you for the information. I knew about .set() and thought of using it but wanted something more challenging. I have done word[::-1], but my intentions where to find the space, reverse it, then add the space to show the user that it is in fact a Paldrome. Again, thank you for the hint.</span>
