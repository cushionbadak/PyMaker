<div class="post-text" itemprop="text">
<p>here is my problem, I have this very simple <a href="https://i.stack.imgur.com/0PfGt.png" rel="nofollow noreferrer">graph</a></p>
<p>Or as I'm writing  my script in python, here it is as a dict (child as key and parent as value):</p>
<pre><code>{'b':'a', 'c':'a', 'd':'c', 'e':'c'}
</code></pre>
<p>Now, I know that with the wonderful toposort module I can unroll this graph into a list so that visiting each node in the list starting from the first will respect the graph relationship between parents and children. It works great and in this case I would get:</p>
<pre><code>['a', 'b', 'c', 'd', 'e']
</code></pre>
<p>Now the problem is that in my case each node has also a priority which tells me what node I should visit BEFORE provided that all its parents have already been visited. Here is an example dict for priorities (key is node, value is priority for which the greater is the most important):</p>
<pre><code>{'a':1, 'b':2, 'c':3, 'e':4, 'd':1} 
</code></pre>
<p>So I would like to have an algorithm which spits out something like this: </p>
<pre><code>['a', 'c', 'e', 'b', 'd']
</code></pre>
<p>Or any other equivalent solution (well, I'm guessing solutions will not be unique, but I may be wrong). In other words, I need something that take the relationship between nodes as first thing to be considered to define the chain and then the priority.</p>
<p>Is there anything out here I can use? Or how can I leverage the toposort module in python to achieve this?</p>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>You could implement a topological sort using a <a href="https://en.wikipedia.org/wiki/Heap_(data_structure)" rel="nofollow noreferrer">heap</a> to handle the priorities. Python provides the <a href="https://docs.python.org/3/library/heapq.html" rel="nofollow noreferrer">heapq module</a> for handling heaps. </p>
<p>An implementation inspired by <a href="https://en.wikipedia.org/wiki/Topological_sorting#Kahn's_algorithm" rel="nofollow noreferrer">Kahn's algorithm</a> can be the following:</p>
<pre><code>import heapq


def toposort(graph, key=None):
    """
    The functions returns the topological order of the graph

    :param graph: A dictionary where the keys are the node labels and the values are a list of the neighbors labels
    :param key: A priority for each node
    :return: The topological order of the graph
    """

    # init the indegree for each noe
    nodes = graph.keys() | set([node for adjacents in graph.values() for node in adjacents])
    in_degree = {node: 0 for node in nodes}

    # compute the indegree
    for k, adjacents in graph.items():
        for node in adjacents:
            in_degree[node] += 1

    # init the heap with the nodes with indegree 0 and priority given by key
    heap = [(key(node), node) for node, degree in in_degree.items() if degree == 0]
    heapq.heapify(heap)

    top_order = []
    while heap:  # heap is not empty
        _, node = heapq.heappop(heap)  # get the element with highest priority and remove from heap
        top_order.append(node)  # add to topological order
        for adjacent in graph.get(node, []):  # iter over the neighbors of the node
            in_degree[adjacent] -= 1
            if in_degree[adjacent] == 0:  # if the node has in_degree 0 add to the heap with priority given by key
                heapq.heappush(heap, (key(adjacent), adjacent))

    return top_order
</code></pre>
<p><strong>Notes:</strong>
As specified in the documentation the algorithm receives a graph where the keys are the node labels and the values are a list of node labels so you need to reverse your graph, secondly the heap is a minimum heap so you also need to invert your priorities (multiply by -1). The final code looks likes this:</p>
<pre><code>g = {'b': 'a', 'c': 'a', 'd': 'c', 'e': 'c'}
reverse = {}
for k, v in g.items():
    if v not in reverse:
        reverse[v] = []
    reverse[v].append(k)

table = {'a': -1, 'b': -2, 'c': -3, 'e': -4, 'd': -1}
order = toposort(reverse, table.get)
print(order)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['a', 'c', 'e', 'b', 'd']
</code></pre>
<p>Note that the call <code>order = toposort(reverse, table.get)</code> is to the function <code>toposort</code> defined above.</p>
</div>
<span class="comment-copy">Thanks for the answer, that looks great!</span>
