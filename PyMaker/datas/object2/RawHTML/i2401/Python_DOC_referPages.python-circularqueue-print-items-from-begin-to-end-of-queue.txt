<div class="post-text" itemprop="text">
<p>I am trying to implement Circular Queue in python and trying implement <strong>str</strong>(self) that print all the elements from the queue from the beginning to the end.When I print out the list, it does not give the whole list of items in the queue.</p>
<p>I am splicing the items from the self.items from the front and going till the end of the list.</p>
<pre><code>class CircularQueue:
    def __init__(self,capacity):

        self.items =[None]*capacity
        self.MAX_QUEUE = capacity
        self.front = 0
        self.back = self.MAX_QUEUE - 1
        self.count = 0

    def is_full(self):
        return self.count == self.MAX_QUEUE

    def is_empty(self):
        return self.count == 0

    def enqueue(self,item):
            if not self.is_full():
                self.back = (self.back+1)%self.MAX_QUEUE
                self.items[self.back] = item
                self.count +=1
            else:
               raise IndexError("The queue is full.")
    def dequeue(self):
            if not self.is_empty():
                item = self.items[self.front]
                self.front =(self.front+1)% self.MAX_QUEUE
                self.count -=1
                return item
            else:
                raise IndexError("The queue is empty.")

    def peek(self):
        if not self.is_empty():
            item = self.items[self.front]
            return item
        else:
            raise IndexError("The queue is empty.")
    def __str__(self):
        my_list = []
        for i in self.items[self.front:]:
            my_list.append(i)
        return str(my_list)


q = CircularQueue(8)
q.enqueue(5)
q.enqueue(2)
q.enqueue(1)
q.enqueue(7)
q.enqueue(9)
q.dequeue()
q.dequeue()
q.dequeue()
q.dequeue()
q.dequeue()
q.enqueue(2)
q.enqueue(4)
q.enqueue(1)
q.enqueue(7)
q.enqueue(6)
q.enqueue(3)
print(q)

Expected result:
[2, 4, 1, 7, 6, 3]
Got:
[2,4,1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It looks like your problem is that you only add in the elements from the <code>front</code> of the circular array to the end of the underlying list implementation. What you really want to do is copy from <code>front</code> to end, and then from beginning to <code>back</code>.</p>
<p>This gives me the correct output</p>
<pre><code>def __str__(self):
    my_list = []
    for i in self.items[self.front:]:
        my_list.append(i)

    for i in self.items[:self.back+1]:
        my_list.append(i)

    return str(my_list)
</code></pre>
<p>Hope that helps! Also, you might want to consider using <code>cycle</code> from <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow noreferrer">itertools</a>.</p>
</div>
