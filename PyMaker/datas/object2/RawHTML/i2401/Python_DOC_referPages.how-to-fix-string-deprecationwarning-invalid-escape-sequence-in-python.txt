<div class="post-text" itemprop="text">
<p>I'm getting lots of warnings like this in Python:</p>
<pre><code>DeprecationWarning: invalid escape sequence \A
  orcid_regex = '\A[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{3}[0-9X]\Z'

DeprecationWarning: invalid escape sequence \/
  AUTH_TOKEN_PATH_PATTERN = '^\/api\/groups'

DeprecationWarning: invalid escape sequence \
  """

DeprecationWarning: invalid escape sequence \.
  DOI_PATTERN = re.compile('(https?://(dx\.)?doi\.org/)?10\.[0-9]{4,}[.0-9]*/.*')

&lt;unknown&gt;:20: DeprecationWarning: invalid escape sequence \(

&lt;unknown&gt;:21: DeprecationWarning: invalid escape sequence \(
</code></pre>
<p>What do they mean? And how can I fix them?</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="noreferrer"><code>\</code> is the escape character in Python string literals</a>.</p>
<p>For example if you want to put a tab character in a string you would do:</p>
<pre><code>&gt;&gt;&gt; print("foo \t bar")
foo      bar
</code></pre>
<p>If you want to put a literal <code>\</code> in a string you have to use <code>\\</code>:</p>
<pre><code>&gt;&gt;&gt; print("foo \\ bar")
foo \ bar
</code></pre>
<p>Or use a "raw string":</p>
<pre><code>&gt;&gt;&gt; print(r"foo \ bar")
foo \ bar
</code></pre>
<p>You can't just go putting backslashes in string literals whenever you want one. A backslash isn't valid when not followed by one of the valid escape sequences, and <a href="https://bugs.python.org/issue27364" rel="noreferrer">newer versions of Python print a deprecation warning</a>. For example <code>\A</code> isn't an escape sequence:</p>
<pre><code>$ python3.6 -Wd -c '"\A"'
&lt;string&gt;:1: DeprecationWarning: invalid escape sequence \A
</code></pre>
<p>If your backslash sequence does accidentally match one of Python's escape sequences, but you didn't mean it to, that's even worse.</p>
<p>So you should always use raw strings or <code>\\</code>.</p>
<p>It's important to remember that a string literal is still a string literal even if that string is intended to be used as a regular expression. <a href="https://docs.python.org/3/library/re.html" rel="noreferrer">Python's regular expression syntax</a> supports lots of special sequences that begin with <code>\</code>. For example <code>\A</code> matches the start of a string. But <code>\A</code> is not valid in a Python string literal! This is invalid:</p>
<pre><code>my_regex = "\Afoo"
</code></pre>
<p>Instead you should do this:</p>
<pre><code>my_regex = r"\Afoo"
</code></pre>
<p>Docstrings are another one to remember: docstrings are string literals too, and invalid <code>\</code> sequences are invalid in docstrings too! Use raw strings (<code>r"""..."""</code>) for docstrings if they contain <code>\</code>'s.</p>
</div>
<span class="comment-copy">With Python 3.8-dev this will give you a <code>SyntaxWarning</code> instead of <code>DeprecationWarning</code> and the same solution applies.</span>
