<div class="post-text" itemprop="text">
<p>I've written a small program that runs through a text looking for character combinations.</p>
<pre><code>text=('file.txt')
unique = ('p','b','t','d','k','g','r','l')
for x in unique:
    for y in unique:
        twoC = (x+y)        
        twoC_find=text.count(twoC)
        txt_file = open('twoC.txt', 'a')
        txt_file.write(twoC+' '+str(twoC_find)+'\n')
txt_file.close()
</code></pre>
<p>It lists all character combinations and their number of occurrences in the txt file, and prints them to another txt file. There are two further things I would like to accomplish here, but I'm not sure where to look next. </p>
<ol>
<li><p>instead of (or in addition to) a list of x+y and their number of occurrences, I would like to create a 2d list of x and y with values as number of occurrences:</p>
<pre><code>     p    b    t    etc        
p    5    10   2 
b    0    0    7 
t    0    13   11
etc
</code></pre></li>
<li><p>I would like to return a list of words (defined by white space) in which the string is found, so if:</p>
<pre><code>twoC = br
</code></pre></li>
</ol>
<p>the script would return 'brzeszcze', 'zabronić', 'żubr', etc. Ideally, I would like to store them in a list of variables (eg br_twoC, containing all words, then another list like twoC_combinations=(br_twoC, bl_twoC, gd_twoC, etc..), so I could further manipulate and print them as examples at the end of the text_file.</p>
<p>I have experimented with the .find() function, but this returns a single index and I don't really know (a) how to return an index for more than one instance and (b) how to return everything around that index in both directions until white space. Maybe there's a better option than find.</p>
<p>If someone could offer tips on where to look for example of these kinds of things, I would be grateful! </p>
</div>
<div class="post-text" itemprop="text">
<p>I've managed to solve my issue number 1. Thanks @Johan van Breda; probably it's not what you had in mind, but here's what I came up with after searching the keywords you sent and thinking it over some more:</p>
<pre><code>import pandas as pd
import numpy as np

text=('file.txt')
unique = ('p','b','t','d','k','g','r','l')
twoC_list=['C']
twoC_list=twoC_list+unique
twoC_list=[twoC_list]

for x in unique:
    C1=x
    C1_list=[C1]
    for y in unique:
        twoC = (x+y)
        twoC_count=text.count(twoC)
        C1_list.append(twoC_count)
    twoC_list.append(C1_list)

twoC_array=np.array(twoC_list, dtype=object)
df = pd.DataFrame(twoC_array)
df.to_csv("twoC_array.csv")
</code></pre>
<p>I would be shocked if there <em>wasn't</em> a more elegant solution (comments welcome), but hey, it works.</p>
<p>I'm still stuck on the number 2 question – how to isolate and list the words (defined by white space) in which my twoC is found? Any ideas? keywords?</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>for number two, I would use regular expression</p>
<pre><code>import re
re.findall("\w*" + twoC + "\w*", s, re.UNICODE)
</code></pre>
<p>where s is the string you are searching. In the above expression, \w* matches 0 or more occurrences of Unicode word characters letters, followed by your twoC, followed again by /w*</p>
<p>It returns a list containing all matching words.</p>
<pre><code>s = 'brzeszcze zabronić żubr WhoWhatWhenWhy hello blah' 
re.findall("\w*" + twoC + "\w*", s, re.UNICODE)
</code></pre>
<p>returns  <code>['brzeszcze', 'zabronić', 'żubr']</code></p>
</div>
<span class="comment-copy">Do not open your file in a for loop, just open it once outside the loop.</span>
<span class="comment-copy">Thanks! Not a programmer (obv.!), so all tips welcome.</span>
<span class="comment-copy">For the occurrence overview you can use a dict with a tuple as key. If you want to keep a list per combination, a dict with a list value would do.</span>
<span class="comment-copy">Thanks. I'll get googling...</span>
<span class="comment-copy">Thanks! I'll give it a go.</span>
<span class="comment-copy">Thanks @ VanTan. It works like this for the words. Can I modify the re.findall line to only return twoC at the beginning, middle, or end of the word? I've been looking at the re documentation since your comment, but I don't see it immediately.</span>
<span class="comment-copy">That is fairly easy to do. Read up here: <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">docs.python.org/3/library/re.html</a>. To match only at at the beginning, you would do "^" + twoC + "\w+". in the Middle: "\w+" + twoC + "\w+". At the end:"\w*" + twoC + "$"</span>
<span class="comment-copy">Thanks. First and last didn't work like this, but I used r"\b"+twoC+"\w*|" and "\w*"+twoC+r"\b". It seems to be working now.</span>
<span class="comment-copy">Sorry, "^" and "$" are for beginning and end of string. You had asked for word!</span>
