<div class="post-text" itemprop="text">
<p>I am trying to create a unit test for a function that reads every image from a folder and saves them in a list. </p>
<p>Here is a simplified version of the function: </p>
<pre><code>def read_images(directory):

    image_paths = os.listdir(directory)

    images = []
    for im in image_paths:
        images.append(cv2.imread(os.path.join(directory, im)))

    return images
</code></pre>
<p><a href="https://stackoverflow.com/questions/37159714/python-creating-a-mock-or-fake-directory-with-files-for-unittesting">This other question</a> brought me close to the solution, but in my case I want the fake files created to be images (basically, arrays) so I can read them with <code>cv2.imread</code>.</p>
<p>My idea is not having to create any temporary folder and, of course, not having to connect with any external folder or database. Is this possible?</p>
<p>Edit: to be clear, I'd like to not have to create temporary folders, nor temporary image files. I'd like to know if there is a way of telling the program: "<em>There is a folder here, and inside it there are some images/arrays with this shape</em>", but with actually not having to create anything in memory.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you actually need temporary files, you should check <a href="https://docs.python.org/3/library/tempfile.html" rel="nofollow noreferrer">tempfile</a>.</p>
<p>It allows you to create temporary files and directories which provide automatic cleanup, so there are no trash files if you use this while having the opportunity to test what you want.</p>
<p><strong>EDIT</strong></p>
<p>If you don't really want to use tempfiles nor tempfolders, here is another solution concerning your problem:</p>
<p>Generate in-memory image for your test.</p>
<pre><code>from io import BytesIO
from PIL import Image

def create_in_memory_image():
    in_memory_file = BytesIO()
    image = Image.new('RGBA',
                      size=(0, 0),
                      color=(155, 0, 0))
    image.save(in_memory_file,
               'png')
    in_memory_file.name = 'tmp_testing_name.png'
    in_memory_file.seek(0)
    return in_memory_file
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>how do I mock a fake folder with fake images inside?</p>
</blockquote>
<pre><code>def local_cv2_imread():
    # use as a side effect

    return 'fakeImg1'

def test_read_images(self):
    with mock.patch('os.listdir') as mock_listdir:
        with mock.patch('package.module.cv2.imread') as mock_imread:
            mock_listdir.return_value = ['fake_path']
            mock_imread.side_effect = local_cv2_imread
            images = read_images('a_real_path')
            self.assertEqual(images, ['fakeImg1']
</code></pre>
</div>
<span class="comment-copy">Then skip <code>imread</code> and related, and just generate the numpy arrays with the data you need programmatically (which you would need to do anyway).</span>
<span class="comment-copy">Should I need to change my function <code>read_images</code> to do that? Correct me if I'm wrong, but my idea of unit testing is that I should never need to change the code that I'm testing. Or perhaps you're saying that I should need to refactor my code and make it more modular?</span>
<span class="comment-copy">Well, if it is exactly this function you want to test, which uses only <code>imread</code>, and therefore can only load images from files (not a database, nor memory or any other source), but you don't want to have files... that's asking for the impossible. I originally assumed you just want to mock the image source.</span>
<span class="comment-copy">Though I agree it's a decent solution, the OP specifically asked for not having to create temporary folders (and presumably image files), which itself is definitely doable. IMO as this is not an answer to the actual question posed, it should probably be a comment on the OP.</span>
<span class="comment-copy">Ok, I'm quite new concerning answer in SO, I thought it would be a solution (he only mentioned temporary folder, not temporary files, but your point is relevant and I get it !)</span>
<span class="comment-copy">Thanks for this approach @Exho. But indeed, this was going to be my plan B in case I couldn't completely mock everything. I'll edit my question to make it clear that, initially, I'm trying not to use image files either.</span>
<span class="comment-copy">@Exho no worries, just trying to give you some context on answering vs. commenting. Welcome to Stack Overflow!</span>
