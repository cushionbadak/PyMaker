<div class="post-text" itemprop="text">
<p>I am a beginner in Python3 and I am trying to figure out how I can solve this exercise:</p>
<p>Define a function called <code>myfunc</code> that takes in an arbitrary number of arguments ans returns a list containing only those arguments that are even.</p>
<p>I tried this:</p>
<pre><code>def myfunc(*args):
    a= list(args)
    for num in a:
            if num%2==0:
                return num
</code></pre>
<p>When trying to call out <code>myfunc(1,2,3,4,5,6)</code> it takes only the first even number:2.Why does this happen?</p>
<blockquote>
<p>How can I create a list that returns only the even numbers?</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>args</code> is just an regular iterable. So</p>
<pre><code>return [value for value in args if value%2==0]
</code></pre>
<p>At your current code, you don't get the whole list because you call <code>return</code> when you find the first value.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is you are returning after finding the first value, so it will only return the first value. You could try something like this:</p>
<pre><code>def myfunc(*args):
    return [num for num in args if num % 2 == 0]


print(myfunc(1, 2, 3, 4, 5, 6))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[2, 4, 6]
</code></pre>
<p>The above method uses a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>. An equivalent solution, albeit less pythonic, is the following:</p>
<pre><code>def myfunc(*args):
    result = []
    for num in args:
        if num % 2 == 0:
            result.append(num)
    return result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue is once your function executes <code>return</code> thats it, so what you want to do is append all those values to a list and return that entire list    </p>
<pre><code>def myfunc(*args):
    a= list(args)
    b = []
    for num in a:
        if num%2==0:
            b.append(num)
    return b    

b = myfunc(1, 2, 3, 4, 5, 6)
print(b)
</code></pre>
<blockquote>
<pre><code>(xenial)vash@localhost:~/python/stack_overflow$ python3.7 helping.py 
[2, 4, 6]
</code></pre>
</blockquote>
<p>Looking forward, just to show you you can cut some bulk out of here, note that <code>2 % 2 = 0</code> right so we can say <code>if not 2%</code> since <code>not 0</code> will evaluate to <code>True</code> and meet our conditions that way</p>
<pre><code>def myfunc(*args):
    lista = []
    for i in list(args):
        if not i % 2:
            lista.append(i)
    return lista

lista = myfunc(1, 2, 3, 4, 5, 6)
print(lista)
</code></pre>
<p>And once you really fall in love &lt;3</p>
<pre><code>def myfunc(*args):
    return [i for i in list(args) if not i % 2]
</code></pre>
</div>
<span class="comment-copy">you were so close, but you are returning the number immediately rather then adding it to the list you're supposed to return, ending the function prematurely. if you want to make it fancy, i recommend having a look at <code>yield</code> - otherwise just add all even numbers to a list and return that.</span>
<span class="comment-copy">@MCO for a beginner, I recommend <i>not looking into <code>yield</code></i> and instead, especially since the specifications say the function should return a <code>list</code></span>
<span class="comment-copy">don't throw list-comprehensions at beginnners.</span>
<span class="comment-copy">why not just go <code>if not value % 2</code></span>
<span class="comment-copy">I mean you you just straight to list comprehension might as well go for the whole bag</span>
<span class="comment-copy">don't throw list-comprehensions at beginners. Also, what's the point of <code>a = list(args)</code>??</span>
