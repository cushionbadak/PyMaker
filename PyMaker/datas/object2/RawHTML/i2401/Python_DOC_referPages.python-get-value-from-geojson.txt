<div class="post-text" itemprop="text">
<p>Please can someone share some python script that will loop through this geojson and retrieve the values under "attachment". I am struggling with these ones.</p>
<p>Thank you</p>
<pre><code>{
 "id": 3,
 "geom": "POINT (-65621.7187500000000000 6688807.5000000000000000)",
 "fields": {
  "Identifier": null,
  "Species": null,
  "Tag_Number": "Quercus robur 505",
},
"extensions": {
"description": null,
"attachment": [
  {
    "id": 7,
    "name": "1531402833735.jpg",
    "size": 4559151,
    "mime_type": "image/jpeg",
    "description": "",
    "is_image": true
  },
  {
    "id": 8,
    "name": "1531402882838.jpg",
    "size": 6418150,
    "mime_type": "image/jpeg",
    "description": "",
    "is_image": true
  }
]
}
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please try this below code</p>
<pre><code> import geojson
 gj = geojson.loads(jsonstr)
 if "attachment" in gj:
     for attachment in gj["attachment"]:
        print (attachment)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The sample json you provided does not look like valid <a href="http://geojson.org/" rel="nofollow noreferrer">geojson</a> to me.  You can find parsers that are not as strict, but the comma (",") at the end of the "Tag_Number" line for example should not be there, and I'd expect to find a "type" attribute defining any geometry or features.</p>
<p>That aside, geojson adds semantic meaning for json so you can for the purposes of your task can treat it as any json parsing task in Python.</p>
<p>If your data is in a file <code>sample.geojson</code> you can read from a file with the <code>load()</code> method:</p>
<pre><code>import json

with open('sample.geojson') as data:
    geo = json.load(data)
</code></pre>
<p>This results in <code>geo</code> being a regular <a href="https://docs.python.org/3.7/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">Python Dictionary</a> that you can inspect.  By calling <code>geo.keys()</code> you can find all of the keys in the data.</p>
<pre><code>In [4]: geo.keys()
Out[4]: [u'fields', u'geom', u'extensions', u'id']
</code></pre>
<p>You access any of the values as you would any Python dictionary by specifying a key: <code>geo['extensions']</code>. </p>
<pre><code>In [5]: geo['extensions']
Out[5]:
{u'attachment': [{u'description': u'',
   u'id': 7,
   u'is_image': True,
   u'mime_type': u'image/jpeg',
   u'name': u'1531402833735.jpg',
   u'size': 4559151},
  {u'description': u'',
   u'id': 8,
   u'is_image': True,
   u'mime_type': u'image/jpeg',
   u'name': u'1531402882838.jpg',
   u'size': 6418150}],
 u'description': None}
</code></pre>
<p>Since, the <code>extensions</code> is itself a dictionary you can reference it as well and loop over any of the values which happens to be a list of dictionaries.</p>
<pre><code>In [6]: for item in geo['extensions']['attachment']:
    ...:     print(item['name'])
    ...:
1531402833735.jpg
1531402882838.jpg
</code></pre>
<p>You may find <a href="https://ipython.readthedocs.io/en/stable/" rel="nofollow noreferrer">ipython</a> a useful interactive tool as you learn to work with data and data structures in Python.</p>
</div>
<span class="comment-copy">The python JSON package easily turns JSON into a dict. <a href="https://docs.python.org/3/library/json.html" rel="nofollow noreferrer">docs.python.org/3/library/json.html</a></span>
<span class="comment-copy">Thank you for the help. I tried this but it didn't return anything. I get a response if i change "attachment" to "extensions". It is like it cant look inside that....</span>
