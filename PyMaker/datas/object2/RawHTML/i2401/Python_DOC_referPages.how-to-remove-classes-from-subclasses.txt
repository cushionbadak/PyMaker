<div class="post-text" itemprop="text">
<p>When inheriting from a class, the child class is accessible on the parent via the <code>.__subclasses__()</code> method.</p>
<pre><code>class BaseClass:
    pass

class SubClass(BaseClass):
    pass

BaseClass.__subclasses__()
# [&lt;class '__main__.SubClass'&gt;]
</code></pre>
<p>However, deleting the child class doesn't seem to remove it from the parent.</p>
<pre><code>del SubClass

BaseClass.__subclasses__()
# [&lt;class '__main__.SubClass'&gt;]
</code></pre>
<ul>
<li>Where does <code>__subclasses__</code> get its information from? And can I manipulate it?</li>
</ul>
<p>Or</p>
<ul>
<li>Is there a proper way to remove a class and have its parent lose reference to it (e.g. <code>BaseClass.remove_subclass(SubClass)</code>?</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>The subclass contains references to itself internally, so it continues to exist until it is garbage collected. If you force a garbage collection cycle it will disappear from the <code>__subclasses__()</code>:</p>
<pre><code>import gc
gc.collect()
</code></pre>
<p>and then it has gone.</p>
<p>However make sure you have deleted all other references to the class before you force the garbage collection. For example, if you do it interactively and the last output was the subclass list there will still be a reference to the class in <code>_</code>.</p>
<pre><code>class BaseClass:
    pass

class SubClass(BaseClass):
    pass

print(BaseClass.__subclasses__())
# [&lt;class '__main__.SubClass'&gt;]
del SubClass

import gc
gc.collect()
print(BaseClass.__subclasses__())
# []
</code></pre>
<p>Output with python 3.7 is:</p>
<pre><code>[&lt;class '__main__.SubClass'&gt;]
[]
</code></pre>
<p>I should probably also add that while garbage collection works for this simple case you probably shouldn't depend on it in real life: it would be far too easy to accidentally keep a reference to the subclass somewhere in your code and then wonder why the class never goes away.</p>
<p>What you are trying to do here is keep a registry of subclasses so that the factory can return an object of the appropriate class. If you want to be able to add and remove classes from the registry then I think you have to be explicit. You could still use <code>__subclasses__</code> to find candidate classes, but keep a flag on each class to show whether it is enabled. Then instead of just deleting the subclass set the flag to show the class is no longer in use and then (if you want) delete it.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Where does <code>__subclasses__</code> get its information from?</p>
</blockquote>
<p>For the CPython implementation of Python, the type object keeps a list of weak references under <a href="https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_subclasses" rel="nofollow noreferrer"><code>PyTypeObject.tp_subclasses</code></a>. This is marked as <em>"Not inherited. Internal use only"</em> in the docs, so can be treated as an implementation detail of CPython. See also: <a href="https://stackoverflow.com/questions/40164900/how-is-subclasses-method-implemented-in-cpython">How is <code>__subclasses__</code> method implemented in CPython?</a>.</p>
<blockquote>
<p>And can I manipulate it?</p>
</blockquote>
<p>Any class has a <code>.__bases__</code> descriptor which, if changed, updates the references in <code>PyTypeObject.tp_subclasses</code>.</p>
<p><code>.__bases__</code> can <em>only</em> be manipulated when the class doesn't directly inherit from <code>object</code>. So while:</p>
<pre><code>class BaseClass: pass
class OtherClass(BaseClass): pass
</code></pre>
<p>and </p>
<pre><code>class BaseClass: pass
class OtherClass: pass

BaseClass.__bases__ = (OtherClass, )
# TypeError: __bases__ assignment: 'BaseClass' deallocator differs from 'object'
</code></pre>
<p>should be equivalent <a href="https://bugs.python.org/msg14169" rel="nofollow noreferrer">*</a>. You will get an error. See: <a href="https://bugs.python.org/issue672115" rel="nofollow noreferrer">https://bugs.python.org/issue672115</a></p>
<p>You also can't use this to change a class to inherit from object.</p>
<pre><code>class BaseClass: pass
class SubClass(BaseClass): pass

SubClass.__bases__ = (object,)
# TypeError: __bases__ assignment: 'type' object layout differs from 'BaseClass'
</code></pre>
<p>You can, however, change the bases of a class to be another class.</p>
<pre><code>class BaseClass: pass
class SubClass(BaseClass): pass

class OtherClass: pass

SubClass.__bases__ = (OtherClass, )

# Or don't define it.
SubClass.__bases__ = (type("OtherClass", (object, ), {}), )
</code></pre>
<p>This all updates the parent class:</p>
<pre><code>&gt;&gt;&gt; BaseClass.__subclasses__()
[]
</code></pre>
</div>
<span class="comment-copy">Interesting question. Curious what your use case is?</span>
<span class="comment-copy">I have a factory class that returns objects based on what's inherited from it. So you can define a class that inherits from the factory class, then the factory class can produce objects of that kind. See: <a href="https://github.com/alxwrd/coinhandler/blob/master/coinhandler/coins.py#L16" rel="nofollow noreferrer">github.com/alxwrd/coinhandler/blob/master/coinhandler/â€¦</a></span>
<span class="comment-copy">Instead of manipulating <code>__subclasses__</code>, I would recommend keeping your own list instead, possible through the <code>__init_subclass__</code> hook.</span>
<span class="comment-copy">@PatrickHaugh Brilliant! For what I want to do that is perfect.</span>
<span class="comment-copy">This doesn't seem to be working on Python 3.7. Is there a specific version this worked for you?</span>
<span class="comment-copy">Yes, Python 3.7</span>
<span class="comment-copy">Ah, thanks for the edit! It was <code>_</code> that was tripping me up. +1. I'd like to see if there's a better way than forcing garbage collection. If nothing else comes up, I'll happily accept this answer.</span>
<span class="comment-copy">@alxwrd I think the better way is to be more explicit about the classes in the registry rather than trying to do it all by magic behind the scenes. Answer updated accordingly.</span>
