<div class="post-text" itemprop="text">
<p>item is a string like "./test/test1.csv" .
I want to change item into "test1".
I wrote code,</p>
<pre><code>item=re.search('./*.csv',item)
</code></pre>
<p>But,"1.csv" is item.I really cannot understand why such a thing happens.What should I do to do my ideal thing?</p>
</div>
<div class="post-text" itemprop="text">
<p>As a regex, <code>'./*.csv'</code> does not mean what you think it does. A <code>.</code> means "any char" and a <code>*</code> means "zero or more of what came before", Thus, it's not "dot, slash, any string, dot, csv", but "any char, some slashes, any char csv".</p>
<p>If you really want to use a regex, you could try, e.g., this (among many other variants):</p>
<pre><code>&gt;&gt;&gt; re.search(r"([^/]+)\.[^\.]+$", p).group(1)
'test1'
</code></pre>
<p>Or just use <code>str.split</code> and <code>rsplit</code>:</p>
<pre><code>&gt;&gt;&gt; p.rsplit("/", 1)[-1].split(".")[0]
'test1'
</code></pre>
<p>Or, since you are handling file paths, how about <code>os.path</code>?</p>
<pre><code>&gt;&gt;&gt; os.path.splitext(os.path.split(p)[1])[0]
'test1'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Usually you want the <a href="https://docs.python.org/3/library/os.path.html" rel="nofollow noreferrer">os.path</a> module from the standard library for this kind of filename.</p>
<pre><code>import os.path
print(os.path.splitext(os.path.basename('./test/test1.csv'))[0])
</code></pre>
<p>In your regular expression version of this, remember that <code>.</code> matches <em>any</em> character (not just periods), <code>x*</code> matches any number of x's (even zero), and that <a href="https://docs.python.org/3/library/re.html#re.search" rel="nofollow noreferrer">re.search</a> will return true if the pattern matches anywhere in the string: your regular expression matches whenever a filename contains the letters "csv" anywhere later than the first or second character.  A correct regular expression implementation might be</p>
<pre><code>import re
print(re.search(r'/([^/.]+)\.[^/]+$', './test/test1.csv')[1])
</code></pre>
<p>(matching a slash, at least one character that is neither a period nor a slash, a period, at least one character that is not a slash, and end of string).  (IMHO <code>os.path</code> is more readable and maintainable.)</p>
</div>
<div class="post-text" itemprop="text">
<p>This will work</p>
<pre><code>import ntpath
path = ".../test/test1.csv"
file_name = ntpath.basename(path)
</code></pre>
</div>
<span class="comment-copy">Are you aware that you change <code>item</code> from a string to a <code>re</code> match object?</span>
<span class="comment-copy"><code>'./*.csv'</code> does not mean what you think. It's not "dot, slash, any string, dot, csv", but "any char, some slashes, any char csv".</span>
<span class="comment-copy">why on earth <code>ntpath</code>  ? What's wrong with <code>os.path</code> ?</span>
<span class="comment-copy">I am just more familiar with this!!</span>
<span class="comment-copy">You shouldn't explicitely import <code>ntpath</code> nor <code>posixpath</code> unless you really know you want this exact implementation. <code>os.path</code> will automagically point to the right 'xxxpath' module for your platform.</span>
<span class="comment-copy">Ok...thanks for this :)</span>
