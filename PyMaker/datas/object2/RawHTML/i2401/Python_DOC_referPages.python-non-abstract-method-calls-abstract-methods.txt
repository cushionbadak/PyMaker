<div class="post-text" itemprop="text">
<p>I have an example below:</p>
<p>The first script where I define the abstract class:</p>
<pre><code># test.py

from abc import ABCMeta, abstractmethod


class A:
    __metaclass__ = ABCMeta

    def __init__(self, a):
        self.x = a
        self.y = 0

    @abstractmethod
    def __foo_1(self):
        pass

    @abstractmethod
    def __foo_2(self):
        pass

    # that is what i'm wondering if it could be possible
    def run(self):
        self.__foo_1()
        self.__foo_2()
</code></pre>
<p>And the second script where I implement the abstract methods:</p>
<pre><code># test2.py

from test import A


class B(A):
    def __foo_1(self):
        self.y += 1

    def __foo_2(self):
        self.y += 2
</code></pre>
<p>Since i know for sure that <code>__foo_1</code> and  <code>__foo_2</code> must be called in that order, i want to write the non-abstract method <code>run</code> to do that (like in <code>test.py</code>). But it doesn't seem to work:</p>
<pre><code>b = B(1)
b.run()

&gt;&gt; TypeError: Can't instantiate abstract class B with abstract methods _A__foo_1, _A__foo_2
</code></pre>
<p>Is there anyway to do that? Since i don't want to rewrite the same <code>run</code>-method each time.</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that double_underscore attributes are somewhat magic in Python.</p>
<p>From the <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="nofollow noreferrer">docs</a>:</p>
<blockquote>
<p>Any identifier of the form __spam (at least two leading underscores,
  at most one trailing underscore) is textually replaced with
  _classname__spam, where classname is the current class name with leading underscore(s) stripped.</p>
</blockquote>
<p>So instead of overriding <code>__foo_1</code>, you end up with an abstract <code>_A__foo_1()</code> and an implemented <code>_B__foo_1()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Ok ... i found what i need, i just need to change the protected methods <code>__foo</code> to normal method <code>foo</code> and it all works.</p>
</div>
<span class="comment-copy">Your abstract method names are mangled with those leading underscores <code>__</code>.</span>
<span class="comment-copy">yeah i just realized it :-)</span>
<span class="comment-copy">the double-leading underscore` naming convention is for "private" methods and, as explained by JETM, triggers a name-mangling mechanism. The naming convention for "protected" methods is a <i>single</i> leading underscore, so if you don't want to expose your "foo_x" methods just name them "_foo_x".</span>
