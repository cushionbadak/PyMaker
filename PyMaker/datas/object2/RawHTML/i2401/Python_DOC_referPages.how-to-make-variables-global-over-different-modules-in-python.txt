<div class="post-text" itemprop="text">
<p>I have a small project where I need to initially introduce and use some quite large number of variables.</p>
<p>Obviously, I can make some configure file, where I set up all the values of the variables. I have made just some Python file, where I give values:</p>
<pre><code>value_a = 'something'
value_b = 'something'
value_c = 5.0
</code></pre>
<p>and call the file <code>conf.py</code>. When I do <code>from conf import *</code>, I have all the variables with values initialized.</p>
<p>Nevertheless, I have different modules in project with different subroutines (methods in it) and I want to have all those values from <code>conf.py</code> known in every method and in every module.</p>
<p>Obviously, I can do <code>from conf import *</code> in every module and/or <code>import conf</code> in every subroutine, but is it the best way how to implement the initialization of variables? </p>
</div>
<div class="post-text" itemprop="text">
<p>Using a module as you describe is a viable way to setup configuration values for a script, but there are a few reasons you might be better off with something else.</p>
<ul>
<li><p>A few others in the comments have pointed out that <code>import *</code> is frowned upon because it clutters up the root namespace with lots of variable names making it much easier to accidentally have name conflicts. Keeping them under the module name (ex: <code>conf.varname</code>) helps from an organizational standpoint in keeping track of names and preventing conflict.</p></li>
<li><p>If you plan to distribute code that requires configuration, using a <code>.py</code> module opens up your code to arbitrary code execution of anything that gets typed in that file. This is where things like ".ini .json .cfg etc" files are very useful. As an added bonus by using a common format (like json) it makes the configuration easy to port to other languages if a colleague is using a different language but needs to work on the same project. Off the top of my head, python includes libraries for <a href="https://docs.python.org/3/library/xml.html" rel="nofollow noreferrer">.xml</a> <a href="https://docs.python.org/3.7/library/json.html" rel="nofollow noreferrer">.json</a> and <a href="https://docs.python.org/3.7/library/configparser.html" rel="nofollow noreferrer">.ini</a> files.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>In my opinion a solution that I would implement for that issue is to create a <code>conf.py</code>, as you said, and then define in it global variables as dictionary structures in order to be properly organized and easy-to-use on the modules that will be imported.
For example:</p>
<pre><code>globals = {'value_a': 'something a',
           'value_b': 'something b',
           'value_c': '5.0',
           'allowed_platforms': {
                          'windows': 'value 1',
                          'os x':    'value 2',
                          'linux':   'value 3'
                        },
           'hosts': ['host a', 'host b', 'host c'],
           ...
           }
</code></pre>
<p>You need to avoid the <code>from some_module import *</code> statement because you could put a lot of imports into the namespace and because it's not explicit about what is importing. So doing at the top of each module <code>from your_package.conf import globals</code> you could use it without the need of importing explicitly every single variable that you want to use or without importing the entire module. I prefer that solution, and also could be better if you use <strong>json</strong> files to store the info of that global variables and then read and serialize them in the conf.py module before being imported in your required modules.</p>
</div>
<div class="post-text" itemprop="text">
<p>I generally agree with @@Aaron. What he outlined is very general / portable and safe.</p>
<p>Since <code>import *</code> is an antipattern, you could easily do <code>import config</code> and then reference its values like <code>config.varname</code>.</p>
<p>I think it's fine to use <code>.py</code> files when needed. Aaron's point is good, but as long as the config is controlled by the person running the app, there's no security issue. The main reason to allow <code>.py</code> files is when some of the config items need to be derived from other config items, or looked up / loaded at run time. If there's no need for that (config is 100% flat and static) then <code>.json</code> or another flat file approach as Aaron mentioned would be best.</p>
</div>
<span class="comment-copy">You should avoid wildcard imports (<code>from module import *</code>) because it's difficult to see where particular values are coming from. But yes, putting variables into their own module and importing that is perfectly fine. You might consider whether some of those individual variables should actually be in lists, dictionaries, or other objects, though.</span>
<span class="comment-copy"><code>from conf import *</code> is an antipattern. Don't do it. <code>import conf</code> and then use <code>conf.value_a</code></span>
<span class="comment-copy">The <i>best way</i> to do things though, is <i>not to rely on global state at all</i>. If you must, a configuration module that you use as such (i.e. <code>conf.my_value</code>) is probably the best solution. But again, "global across all modules" is an anti-pattern, and indeed, isn't truly supported in Python (Python only has module-global variables).</span>
<span class="comment-copy">The fact that you have "some quite large number of variables" is itself a sign that something is wrong. Rather, you should have few variables, using containers such as lists or dicts as necessary.</span>
<span class="comment-copy">Are these variables initialized once and then unchanged the whole time your program is running?</span>
<span class="comment-copy">Thank you for the answer, I have acknowledged it. Fortunately, <code>from conf import *</code>, can only be implemented at module level, meaning for subroutines it is not possible and one has to use <code>import conf</code> instead. The code in <code>conf.py</code> will strictly be variable initialization and nothing else. I guess '.ini' or '.cfg' are not so native as '.json', which would be easy to use, when I make one container, where I keep the variable names and corresponding values. Nevertheless, then I have to implement parsing 'json' for every subroutine in every module instead of having one import line.</span>
<span class="comment-copy">I definitely acknowledge the answer, but is there some difference in asking values like this: <code>globals['value_a']</code> compared to <code>conf.value_a</code>? Or is this just a matter of taste?</span>
<span class="comment-copy">Yes, I agree it's more a matter of taste. But it is also better not to import the complete module if you define a lot of variables, and it is cleaner to use this pattern using json files in order to be portable.</span>
