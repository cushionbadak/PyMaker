<div class="post-text" itemprop="text">
<p>I have a file which has the following text. I want to open the file in python, read each line and then edit the file in such a way that each line as only 40 characters. At the end of the line, I want to have a '+' sign. Save the file.
Need help to write this script.</p>
<p><code>file = "Starting today (September 17), a range of iPhones and iPads are set to change, courtesy iOS 12. Apple has started the rollout of the next version of its mobile operating system called iOS 12. Available as a free upgrade, iOS 12 will make your iPhones and iPads faster, more secure and add a slew of new features including Memphis, Siri shortcuts and grouped notifications. Wonder if your iPhone and iPad is compatible with the all-new iOS 12? Here's the complete list of devices compatible with the new Apple OS."</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This is one way:</p>
<p>It uses <a href="https://docs.python.org/3/library/textwrap.html" rel="nofollow noreferrer">Python's textwrap module</a> to "wrap" the text into maximum of 40 character lines, if you actually want to split words or whatever else it has those abilities too.</p>
<pre><code>from textwrap import wrap

# File containing your text.
with open("./Text Document.txt", 'r') as read_file:
  data = read_file.read()

data_list = wrap(data, 40)

# New file created with 40 + "+" per line.
with open("./New Text Document.txt", 'w') as write_file:
  for data in data_list:
    write_file.write(data + "+\n")
</code></pre>
<p>This will enforce a strict 40 character limit:</p>
<pre><code># File containing your text.
with open("./Text Document.txt", 'r') as read_file:
  data = read_file.read()

data_list = []
b, e = 0, 40
while e &lt; len(data):
  data_list.append(data[b:e])
  b += 40
  e += 40
  if e &gt; len(data):
    data_list.append(data[b:len(data)])


# New file created with 40 + "+" per line.
with open("./New Text Document.txt", 'w') as write_file:
  for data in data_list:
    write_file.write(data + "+\n")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>file[:40]</code> will give you first 40 chars</p>
<p>also check out <a href="https://docs.python.org/3.1/library/string.html" rel="nofollow noreferrer">https://docs.python.org/3.1/library/string.html</a> for more info</p>
</div>
<span class="comment-copy">Hi! Welcome to StackOverflow! I am not sure what your problem is. Could you please update your question with what have you done so far?</span>
<span class="comment-copy">It would help to know what you consider a line here. What you've provided is a single "line" from Python's point of view, but if you mean to split up logical English sentences, it's many sentences. You should post a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a> of what you've tried, including the minimal code to reproduce, the input, the expected output and the incorrect output. Just providing "here is a variable definition that's sort of like my file" with no attempt at solving or expected output makes this an inappropriate question as it stands (SO is not intended as a code writing service).</span>
<span class="comment-copy">Note: If you're enforcing a strict 40 character limit (not paying attention to whitespace or trying to avoid splitting words), it's safer (and likely faster) to stream from input to output, rather than slurping the whole thing, breaking it up in memory, then writing the whole thing at once. <code>with open(infile) as inf, open(outfile) as outf:</code>, <code>for chunk in iter(functools.partial(inf.read, 40), ''): outf.write(chunk + "+\n")</code>. The two-arg <code>iter</code> trick can be replaced with a more traditional <code>while</code> loop if you don't want to use <code>functools</code> or overly "clever" tricks.</span>
<span class="comment-copy">@ShadowRanger yes, I wasn't quite sure how to get the 40 character chunks without having all of the data to begin with, you are more than welcome to add your code as an answer, since it sounds like a good learning experience for anyone who may stumble upon this.</span>
<span class="comment-copy">@ShadowRanger I just tried your code, I think it's great, and probably the most correct way to do this, just had to change <code>with open(infile) as inf, open(outfile) as outf:</code> to <code>with open(infile, 'r') as inf, open(outfile, 'w') as outf:</code></span>
<span class="comment-copy">You don't need the <code>'r'</code> (it's the default mode), but yes, in the haste of writing the comment, I left out the <code>'w'</code> mode for the outfile.</span>
<span class="comment-copy">The <code>string</code> module is mostly irrelevant here (at this point, it's largely a dumping ground for some random constants and the <code>Formatter</code> class that is rarely used, given how much easier <code>str.format</code> and f-strings are).  I was also going to update to link to modern docs (3.1 being way out of support), but I'm not sure what the link accomplishes in the first place.</span>
