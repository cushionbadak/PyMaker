<div class="post-text" itemprop="text">
<p>When I input a command such as "dir" through my python program it prints out what it should except that instead of being neat and organised, its all a continuous line and spammed with either \r or \n . Does anyone know the solution for that?</p>
<p>Client:</p>
<pre><code>import socket
import subprocess


def execute_sys_command(command):
    return subprocess.check_output((command).decode(), shell=True)


connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connection.connect(("127.0.0.1", 4444))



while True:
    command = connection.recv(1024)
    command_result = execute_sys_command(command)
    connection.send(command_result)

connection.close()
</code></pre>
<p>Btw, I get the input from another program remotely.</p>
<p>Thanks in advance.</p>
<p>Here is the Server.</p>
<pre><code>import socket

listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
listener.bind(("127.0.0.1", 4444))
listener.listen(0)
print("[+] Waiting for incoming connections")
connection, address = listener.accept()
print("[+] Connection received from " + str(address))

while True:
    command = input("&gt;&gt; ").encode()
    connection.send(command)
    result = connection.recv(1024)
    command = (command).decode("utf-8")
    print(result)
</code></pre>
<p>At the end, its printing the result from the previous one.</p>
</div>
<div class="post-text" itemprop="text">
<p>Ok so I found out a simple solution though not the most effective way.</p>
<p>I replaced </p>
<pre><code>return subprocess.check_output((command).decode(), shell=True)
</code></pre>
<p>to</p>
<pre><code>return subprocess.getoutput((command).decode())
</code></pre>
<p>Then, I encoded it like so:</p>
<pre><code>command_result = command_result.encode('utf-8').strip()
</code></pre>
<p>And on the recieving program, I decoded the result with no problem.</p>
</div>
<div class="post-text" itemprop="text">
<p>I assume that your output also starts with <code>b</code>. According to <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">the Python documentation</a>, the return value of <code>subprocess.check_output</code> is also a byte sequence that you will need to decode.</p>
<p>As an example, check out <a href="https://repl.it/repls/RareTrueInstitution" rel="nofollow noreferrer">this fiddle</a>.</p>
<p>The code</p>
<pre><code>import subprocess
print(subprocess.check_output("dir", shell=True))
</code></pre>
<p>will output</p>
<pre><code>b'_test_runner.py  main.py\n'
</code></pre>
<p>with the sequence ending in <code>\n</code> rather than <code>\r\n</code> because repl.it is probably running on a *nix machine. If the fiddle is changed to</p>
<pre><code>import subprocess
print(subprocess.check_output("dir", shell=True).decode())
</code></pre>
<p>then it will output</p>
<pre><code>_test_runner.py  main.py
</code></pre>
<p>In your case, you should change the return value of <code>execute_sys_command</code>.</p>
<pre><code>def execute_sys_command(command):
    return subprocess.check_output((command).decode(), shell=True).decode()
</code></pre>
<p>I did not notice this until reading your code a few more times, but I think that</p>
<pre><code>command = (command).decode("utf-8")
</code></pre>
<p>was meant to decode the <code>result</code> rather than the <code>command</code>.</p>
<p>Note that because you are running on a Windows machine, the encoding may not be <code>utf-8</code> but rather <code>cp1252</code> or <code>iso-8859-1</code>.</p>
<p>I am almost certain this is the case. Looking at <a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1#Code_page_layout" rel="nofollow noreferrer">the ISO-8859-1 code page</a> (of which Windows-1252 is a superset), <code>0xa3</code> corresponds to the pound sterling sign.</p>
<pre><code>print(b'\xa3'.decode('utf-8'))
</code></pre>
<p>The line above will result in your error, <code>UnicodeDecodeError: 'utf8' codec can't decode byte 0xa3 in position 0: invalid start byte</code>.</p>
<pre><code>print(b'\xa3'.decode('cp1252'))
</code></pre>
<p>The line above will result in <code>£</code>.</p>
</div>
<span class="comment-copy">Where is the <code>print</code> in your code?</span>
<span class="comment-copy">Seems like you are displaying the <code>str</code> <i>object</i> that holds those values, but you want the <code>print</code>-ed objected</span>
<span class="comment-copy">Sorry, I didn't add the other program. Thought it wasn't necesary. So the other program, which is printing the result from for example, "dir", is giving me the error previously mentioned.</span>
<span class="comment-copy">Hi thanks for the answer! When I try to decode the result, it prompts me this error: <code>UnicodeDecodeError: 'utf-8' codec can't decode byte 0xa3 in position 52: invalid start byte</code></span>
<span class="comment-copy">And also, when trying to decode the return value a syntax error appears.</span>
<span class="comment-copy">If you intended to send a <code>£</code> in your byte sequence, then the issue may be related to incorrect encodings. As for the syntax error, that was my bad. I had added an extra parenthesis at the end of the return statement.</span>
