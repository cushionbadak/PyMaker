<div class="post-text" itemprop="text">
<p>I am passing as parameter a string; to a Python3 function.</p>
<p>This string is composed by different variables; and in few cases, I need to have the quotes in the string, so I did concatenate various strings to make it work. </p>
<p>This is the string I use in my code, to call an application called <code>conn.app</code>, which use a file called <code>lac.tsd</code> to perform various operations. The whole code logic is not relevant for the purpose of this question; since the root cause of the errors is the fact that path strings and quoted strings behave differently between OS (like Windows and Unix-like systems for example)</p>
<pre><code>execute_string = '-b -m path="/Users/user/lac.tsd" -a app="/build/deploy/conn.app" -o output=/Users/user/out/'
</code></pre>
<p>This works without problems on OSX and Linux; but when I run this on Windows machines, I get an error</p>
<p><code>OSError: [WinError 123] The filename, directory name, or volume label syntax is incorrect: '"'</code></p>
<p>After digging a bit in the differences between OS, it is clear to see that my path for the <code>tsd</code> file is pointing at <code>/Users/..</code> which is a pure unix construct for the file system; so that has been replaced when I run the code on Windows.
Although, there is still the problem with <code>conn.app</code>, which on windows is <code>conn.exe</code>; the location is the same, so I did fix that too.
Last but not least, 2 issues tied to the OS itself: the <code>/</code> is <code>\</code> in Windows, so that has to change; and same goes for quotes and double quotes.</p>
<p>Does Python have any construct that help programmers to handle cases like mine, where you build a string of parameters to pass to a function, and have in it single and double quotes, paths and such?</p>
<p>To expand on the original point: how do you handle this between OS? Beside a simple RE to replace a character with another; is there any construct used in Python that allow code to operate independently from the OS used, when dealing with paths, quoted strings and multiple nested quoted strings?</p>
</div>
<div class="post-text" itemprop="text">
<p>I think the problem may well be that the string is being passed directly to the command interpreter. In UNIX this will work the way you expect because it treats quotes as special characters, but on Windows, depending on the shell, it probably will behave in very different ways. One possible solution is to break the command you want to run into separate argument strings:</p>
<pre><code>execute_args = [
    "-b", "-m", 
    "path=/Users/user/lac.tsd", 
    "-a",
    "app=/build/deploy/conn.app",
    "-o",
    "output=/Users/user/out/"
]
</code></pre>
<p>And then use one of the many functions in <a href="https://docs.python.org/3/library/subprocess.html?highlight=subprocess" rel="nofollow noreferrer"><code>subprocess</code></a> to execute the command directly instead of using the shell (i.e. <code>shell=False</code>, which is the default for most of them).</p>
</div>
<span class="comment-copy">You need to provide a <a href="https://stackoverflow.com/help/mcve">Minimal, Complete, and Verifiable example</a>. We have no idea what function you're calling, how it uses this string, etc. The problem might relate to disparate directory structures (I doubt <code>C:/build/deploy/conn.app</code> exists at all, and depending on your working drive, you might not have a <code>Users</code> directory in the drive root), or it might be that the command being run uses homegrown (and somewhat broken) argument parsing (Windows doesn't do argument splitting for you, it passes along the raw command line, and many programs handle it incorrectly); you haven't given enough info to say anything for sure.</span>
<span class="comment-copy">For the record, the raw Windows APIs are typically fine with using <code>/</code> instead of `\`, but some parsers and APIs aren't; again, we'd need more context.</span>
<span class="comment-copy">Not sure about what example should I post. The string you see in my question is the same I am using in my code. The code just call that string to execute an operation; so to show the whole infrastructure I should post 1.2 MB of code. That string works fine in OSX but when I use it on windows I get the error I mention above. I did fix the quotes and then a new error did trigger, because I need to convert the <code>/</code> in ``; I did that and then the error triggered because the location in which the app file (which is an exe of the same name on Windows), is in a different place.</span>
<span class="comment-copy">I did fix all the problems, but this is an afterthought; I want to design my system so it can run on different OS; and as such, I need to learn what is the most efficient and "safe" way to deal with such cases. My question is specifically ask how you deal with string related to paths , when dealing with different OS. Fundamentally, I am looking for the methodology used by other programmers, to be able to deal with the scenario where they need to pass strings for paths or parameters, that include paths, among different OS. Hope that this clarify a bit my problem, and I can get pointers. Thanks</span>
<span class="comment-copy">You would add a logical condition to check if windows or not. Or let the <code>os.path</code> library handle it</span>
<span class="comment-copy">Thanks for the example, I will give it a try and see if it works. It is my first attempt at porting working code on a windows system, and while on UX systems I am just fine, with Windows it seems that most of what I try do not get accepted.</span>
<span class="comment-copy">Windows has a lot of idiosyncrasies. I'm happy to help you through them as much as I can.</span>
