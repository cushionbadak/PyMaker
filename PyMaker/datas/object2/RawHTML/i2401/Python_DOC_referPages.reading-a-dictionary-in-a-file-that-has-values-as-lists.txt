<div class="post-text" itemprop="text">
<p>How do I 'unpack' a dictionary from a text file with values as lists? I've used this code I have found on the internet:</p>
<pre><code>with open("save.txt") as f:
      for line in f:
        ( key, val) = line.split()
        d[int(key)] = val
</code></pre>
<p>but it gives me this error</p>
<pre><code>ValueError: too many values to unpack (expected 2)
</code></pre>
<p>save.txt</p>
<pre><code>pop ['7', '8', '4', '8']
funk ['9', '2', '0', '2']
pop ['7', '8', '4', '8']
funk ['9', '2', '0', '2']
stack ['9', '0', '3', '0']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are some few problems with your initial code</p>
<ol>
<li><p>Your save.txt file is weird, because all the <code>keys</code> are the same if you will convert this file into a dictionary, the last one with key <code>test</code> is the only one that will be the final result of the iteration.</p></li>
<li><p><code>d[int(key)] = val</code> the expected key here is a string which is <code>test</code> so <code>int(key)</code> is pointless and will result into a ValueError.</p></li>
<li><p><code>( key, val) = line.split()</code> You are splitting without specifying a delimiter so you are receiving the error <code>ValueError: too many values to unpack (expected 2)</code> because split is trying to use all delimiter like spaces, coma... </p></li>
<li><p>Again here <code>d[int(key)] = val</code> the <code>val</code> here is still a string and not a list</p></li>
</ol>
<p>Here's a sample code that will work on your requirement</p>
<p>Your <code>save.txt</code></p>
<pre><code>test1 ['0', '0', '0', '0']
test2 ['0', '0', '0', '0']
test3 ['1', '0', '1', '0']
</code></pre>
<p>Your python code</p>
<pre><code>import ast

d = {}
with open("save.txt") as f:
    for line in f:
        (key, val) = line.split(maxsplit=1)
        d[key] = ast.literal_eval(val)

print(d)
</code></pre>
<p>Here is some explanation, </p>
<p><code>(key, val) = line.split(maxsplit=1)</code>
we only want to split the first <code>space</code> that is the reason of maxsplit here, you can also do it like
<code>(key, val) = line.split(' ', maxsplit=1)</code></p>
<p>to explicitly say that you want to split only the first space.</p>
<p><code>import ast</code>
and
<code>d[key] = ast.literal_eval(val)</code></p>
<p>AST is a python package that you can use to evaluate a literal and convert it into a list. You can learn more about this here <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">AST Documentation</a></p>
<p>Here's my output of this code
<code>
{'test1': ['0', '0', '0', '0'], 'test2': ['0', '0', '0', '0'], 'test3': ['1', '0', '1', '0']}
</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You should split a line into two parts and then convert the second part into a list with <code>literal_eval()</code>:</p>
<pre><code>import ast
d = {}
with open("save.txt") as f:
    for line in f:
        key, val = line.split(' ', 1)
        d[key] = ast.literal_eval(val)
</code></pre>
<p>For your reference, there will be only one entry in the dictionary constructed from your file, because all three keys are identical.</p>
</div>
<div class="post-text" itemprop="text">
<p>Warning: this is a simple and quick way to solve your problem. But it may be dangerous if you are not sure if there is some dangerous code in the file.</p>
<pre><code>with open("save.txt") as f:
    for line in f:
        (key, val) = line.split(' ', 1)
        d[key] = eval(val)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The code snippet you supplied works if your file in formatted as follows:</p>
<pre><code>key1 value1
key2 value2
key3 value3
</code></pre>
<p><code>for line in f:</code> will go through the file line by line, so <code>line</code> will first contain the string <code>"key1 value1"</code></p>
<p><code>line.split()</code> by default spilits on a space (<code>" "</code>), so when this is executed on <code>line</code>, it results in an array like so: <code>["key1", "value1"]</code></p>
<p>To use Python's unpacking, the number of variables needs to match. The error you are getting (<code>ValueError</code>) explains that "too many values to unpack". As you are splitting on a <code>" "</code>, I suspect that you have more than one space per line, which yields more variables to unpack.</p>
<p>The contents of <code>save.txt</code> would be useful to further assist you.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>with open("save.txt") as f:
    d = {}
    for line in f:
        (key, *vallist) = line.split()
        d[key] = vallist
</code></pre>
<p>Key in records is string, can not be typecasted to int. </p>
</div>
<span class="comment-copy">Could you give some samples of your <code>save.txt</code>?</span>
<span class="comment-copy"><code>ast.literal_eval</code> is better than use <code>eval</code> directly.</span>
<span class="comment-copy">There is never a good reason to use <code>eval</code>.</span>
<span class="comment-copy">For example, the <code>save.txt</code> is create by the user. And the data is exported from an experimental instrument. All the line is in the format of <code>text ['0', '1', '2']</code>. The questioner only will use it one time. In this case, the questioner can use eval to solve the problem within 1 minute.</span>
<span class="comment-copy">So I add the warning in the first line. Different people have different needs, everyone should take a look at his own situation and choose the best one.</span>
<span class="comment-copy">One should not suggest an unsafe solution if there are safe solutions. So, no, I do not buy your logic.</span>
<span class="comment-copy">Your answer is better. I voted is up.</span>
