<div class="post-text" itemprop="text">
<p>I'm trying to make a substitution in the following string:</p>
<pre><code>poem='''
If I can stop one heart from breaking,
I shall not live in vain;
If I can ease one life the aching,
Or cool one pain,
Or help one fainting robin
Unto his nest again,
I shall not live in vain.
'''
</code></pre>
<p>The requirement are as below in the given string:</p>
<ol>
<li>If the pattern has characters 'ai' or 'hi', replace the next three characters with <code>*\*</code>.</li>
<li>If a word has 'ch' or 'co', replace it with 'Ch' or 'Co'.</li>
</ol>
<p>I tried the following methods:</p>
<pre><code>print(re.sub(r"ai\w{3}|hi\w{3}",r"(ai|hi)*\*",poem))    
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>If I can stop one heart from breaking,
I shall not live in vain;
If I can ease one life the aching,
Or cool one pain,
Or help one f(ai|hi)*\*ng robin
Unto his nest again,
I shall not live in vain.

print(re.sub(r"ch|co",r"Ch|Co",poem))
</code></pre>
<p><strong>Output:</strong></p>
<pre><code>If I can stop one heart from breaking,
I shall not live in vain;
If I can ease one life the aCh|Coing,
Or Ch|Cool one pain,
Or help one fainting robin
Unto his nest again,
I shall not live in vain.
</code></pre>
<p>You can see the output is not as per the requirements. Please help me find the correct regex expression.</p>
</div>
<div class="post-text" itemprop="text">
<p>The first you can achieve by referencing a captured group from the pattern in the replacement:</p>
<pre><code>poem = re.sub(r"(ai|hi)\w{3}", "\g&lt;1&gt;*\*", poem)
</code></pre>
<p>For the second, you can pass a function as replacement (see <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">the <code>re.sub</code> docs</a>):</p>
<pre><code>def title(match):
    return match.group(0).title()  # or .capitalize()

poem = re.sub(r"ch|co", title, poem)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
poem = re.sub(r'(ai|hi)(...)', r'\1*\*', poem)
poem = re.sub('ch', 'Ch', poem)
poem = re.sub('co', 'Co', poem)
print(poem)
</code></pre>
<p>This outputs:</p>
<pre><code>If I can stop one heart from breaking,
I shall not live in vain;
If I can ease one life the aChi*\*
Or Cool one pain,
Or help one fai*\*ng robin
Unto hi*\*est again,
I shall not live in vain.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can replace those step wise:</p>
<pre><code>poem='''
If I can stop one heart from breaking,
I shall not live in vain;
If I can ease one life the aching,
Or cool one pain,
Or help one fainting robin
Unto his nest again,
I shall not live in vain.
'''

import re

p2 = re.sub("(?:ai|hi)...","*/*",poem)
p3 = re.sub("ch","Ch",p2)
p4 = re.sub("co","Co",p3)

print(p4)
</code></pre>
<p>Output:</p>
<pre><code>If I can stop one heart from breaking,
I shall not live in vain;
If I can ease one life the ac*/*
Or Cool one pain,
Or help one f*/*ng robin
Unto */*est again,
I shall not live in vain.
</code></pre>
<p>The only interesting thing is a non-capturing group around ai|hi that does not work as I expected - ai and hi are still replaced. You might want to change them to:</p>
<pre><code>p = re.sub("ai...","*/*",poem, flags = re.DOTALL)
p2 = re.sub("hi...","*/*",p, flags= re.DOTALL)
p3 = re.sub("ch","Ch",p2)
p4 = re.sub("co","Co",p3)

print(p4)
</code></pre>
<p>Output:</p>
<pre><code>If I can stop one heart from breaking,
I shall not live in v*/*If I can ease one life the ac*/*
Or Cool one p*/*Or help one f*/*ng robin
Unto */*est ag*/*I shall not live in v*/*
</code></pre>
<p>The <a href="https://docs.python.org/3/library/re.html#re.DOTALL" rel="nofollow noreferrer">flag <code>re.DOTALL</code></a> lets <code>.</code> also match newline characters.
Without it, <code>vain;</code> would not be matched.</p>
</div>
<span class="comment-copy">that function trick - nice.</span>
<span class="comment-copy">not sure if applicable - but <code>vain;</code> is not matched due to missing <code>re.DOTALL</code> - wich might be wanted - or not.</span>
<span class="comment-copy">@PatrickArtner Yeah, not sure. "the following 3 characters" is vague here :) I assume there have to be 3 alphanumeric characters, given the OP's attempt.</span>
