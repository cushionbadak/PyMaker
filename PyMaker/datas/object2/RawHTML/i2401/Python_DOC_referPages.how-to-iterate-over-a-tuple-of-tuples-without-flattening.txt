<div class="post-text" itemprop="text">
<p>I'd like to check the values of a tuple of tuples. In addition to checking each value of each tuple, I need to also compare the last element in one tuple to the first element in the next tuple.</p>
<p>Can I iterate over a tuple of tuples without flattening it into a list? </p>
<pre><code>flattened_tuple = [element for tupl in tupleOfTuples for element in tupl]

for i in range(len(flattened_tuple)-1):
    print(flattened_tuple[i], flattened_tuple[i+1])
</code></pre>
<p>This is what I came up with that doesn't flatten into a list, but I can't compare last element of one tuple to first element of next tuple:</p>
<pre><code>   for row in tuple_of_tuples:
    for i, element in enumerate(tuple_of_tuples):
        print(row[i], row[i+1])
</code></pre>
<p>For the tuple of tuples: ((0,1,2),(3,4,5),(6,7,8)), I get this error:</p>
<pre><code>0 1
1 2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "npuzzle.py", line 67, in goal_test
    print(row[i], row[i+1])
IndexError: tuple index out of range
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Start with taking the last element of the first tuple and then iterate through the rest of the tuples. Based on your question, here is a possible solution:</p>
<pre><code>last_element = tuple_of_tuples[0][-1]
for row in tuple_of_tuples[1:]:
    first_element = row[0]
    # compare first element to last element
    # ...
    last_element = row[-1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You want to iterate over pairs to allow comparison through consecutive tuples, <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow noreferrer">itertool's recipes</a> suggests the following implementation.</p>
<pre><code>from itertools import tee

def pairwise(iterable):
    "s -&gt; (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)

for last, nxt in pairwise(tupleOfTuples):
    if last[-1] == nxt[0]:
        ...
</code></pre>
<p>The <code>pairwise</code> implementation has the advantage of working with any kind of iterable, including consumables such as generators.</p>
</div>
<span class="comment-copy">A nested <code>for</code> loop? We need some more information to go off here.</span>
<span class="comment-copy">Show us some code, what have you tried?</span>
<span class="comment-copy">Booo make an attempt</span>
<span class="comment-copy">do not name variables <code>list</code>, <code>max</code>, <code>min</code>, <code>dict</code> and so on - you are hiding the built-ins and get into problems</span>
<span class="comment-copy">what would the nestsed for loop look like? My nested for loop wouldn't allow me to compare elements across sub tuples</span>
<span class="comment-copy">@Matt I missed that requirement, have a look at the updated answer.</span>
