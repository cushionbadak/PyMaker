<div class="post-text" itemprop="text">
<p>I'm having trouble accessing a parent class member variable <code>id</code> from the child class.</p>
<pre><code>class BaseModel:
    id = db.Column(db.Integer, primary_key=True)

class User(db.Model, BaseModel):
    username = db.Column(db.String(35), nullable=False, unique=True)

    followed = db.relationship(
        'User',
        secondary=followers,
        primaryjoin=(followers.c.follower_id == BaseModel.id),
        secondaryjoin=(followers.c.followed_id == BaseModel.id),
        backref=db.backref('followers', lazy='dynamic'),
        lazy='dynamic')
</code></pre>
<p>Gives me this error:</p>
<pre><code>sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper|User|user'. Original exception was: Could not locate any simple equality expressions involving locally mapped foreign key columns for primary join condition 'followers.follower_id = "&lt;name unknown&gt;"' on relationship User.followed.  Ensure that referencing columns are associated with a ForeignKey or ForeignKeyConstraint, or are annotated in the join condition with the foreign() annotation. To allow comparison operators other than '==', the relationship can be marked as viewonly=True.
</code></pre>
<p>On the other hand</p>
<pre><code>class BaseModel:
    id = db.Column(db.Integer, primary_key=True)

class User(db.Model, BaseModel):
    username = db.Column(db.String(35), nullable=False, unique=True)

    testing = BaseModel.id
</code></pre>
<p>Gives me this error:</p>
<pre><code>sqlalchemy.exc.InvalidRequestError: Incorrect number of values in identifier to formulate primary key for query.get(); primary key columns are 'user.testing','user.id
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A class definition's body is its own scope and the names introduced will form the class' namespace. The problem (in your <a href="https://stackoverflow.com/questions/52411968/accessing-base-class-variable">original question</a>) with your model definition is that the name <code>id</code> has not been assigned to in the body of the class <code>User</code>, so the joins in the <code>relationship</code> definition refer to the builtin function <a href="https://docs.python.org/3/library/functions.html#id" rel="nofollow noreferrer"><code>id()</code></a>. You also cannot use <code>BaseModel.id</code> as shown in this question, because the Declarative metaclass will <a href="http://docs.sqlalchemy.org/en/latest/orm/extensions/declarative/mixins.html#mixing-in-columns" rel="nofollow noreferrer">create a <strong>copy</strong> of it to <code>User</code></a>, so it does not refer to the same column.</p>
<p>The solution is to use lazy evaluation: either pass a callable, or a Python-evaluable string as the join:</p>
<pre><code>followed = db.relationship(
    'User',
    secondary=followers,
    primaryjoin='followers.c.follower_id == User.id',   # Note: the joins are
    secondaryjoin='followers.c.followed_id == User.id', # passed as strings 
    backref=db.backref('followers', lazy='dynamic'),
    lazy='dynamic')
</code></pre>
<p>This works because the inter-mapper relationships of mappers are configured after the mapped classes have been declared and are used for the first time, unless explicitly configured using <a href="http://docs.sqlalchemy.org/en/latest/orm/mapping_api.html#sqlalchemy.orm.configure_mappers" rel="nofollow noreferrer"><code>configure_mappers()</code></a>.</p>
<p>Note that you cannot use plain <code>id</code> in the evaluable string either, but must instead refer to it using the <code>User</code> class, since it is evaluated later in a completely different scope from that of the class body, <a href="http://docs.sqlalchemy.org/en/latest/orm/extensions/declarative/relationships.html#configuring-relationships" rel="nofollow noreferrer">including names from the Declarative class registry, and metadata</a>.</p>
<p>The last error is the result of code such as</p>
<pre><code>User.query.get(some_id)
</code></pre>
<p>The assignment of <code>BaseModel.id</code> to another name – such as <code>testing</code> – in the class body results in your model having a composite primary key, formed from 2 integer columns, so <a href="http://docs.sqlalchemy.org/en/latest/orm/query.html#sqlalchemy.orm.query.Query.get" rel="nofollow noreferrer"><code>Query.get()</code></a> expected to receive a 2-tuple of integers, not just one integer.</p>
</div>
<span class="comment-copy">NameError: name 'User' is not defined</span>
<span class="comment-copy">You forgot to make 'em strings, or callables. Also in the future, don't just paste the message of an error, but give some context.</span>
<span class="comment-copy">You're the man. Thank you.</span>
