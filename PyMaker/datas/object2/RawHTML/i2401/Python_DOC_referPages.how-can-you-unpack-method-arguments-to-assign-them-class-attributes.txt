<div class="post-text" itemprop="text">
<p>I do this type of thing a lot:</p>
<pre><code>class Box:
    def __init__(self):
        some_setup_stuff()
    def configure(
        self,
        color               = "#ffffff",
        weight              = 1,
        empathy             = 97,
        angle_x             = 0,
        angle_y             = 0,
        angle_z             = 0,
        displacement_x      = 0,
        displacement_y      = 0,
        displacement_z      = 0
        ):
        self.color          = color
        self.weight         = weight
        self.empathy        = empathy
        self.angle_x        = angle_x
        self.angle_y        = angle_y
        self.angle_z        = angle_z
        self.displacement_x = displacement_x
        self.displacement_y = displacement_y
        self.displacement_z = displacement_z
    def open(self):
        reveal_head()
</code></pre>
<p>Is there some neat, small, fairly sensible way to "unpack" the arguments passed to a class method into attributes of the class (while keeping the default values specified explicitly)? Like, I'm thinking maybe <code>locals()</code> could be used somehow around the first line in the method but it's not obvious to me.</p>
<p>So we could end up with something a bit like this:</p>
<pre><code>class Box:
    def __init__(self):
        some_setup_stuff()
    def configure(
        self,
        color               = "#ffffff",
        weight              = 1,
        empathy             = 97,
        angle_x             = 0,
        angle_y             = 0,
        angle_z             = 0,
        displacement_x      = 0,
        displacement_y      = 0,
        displacement_z      = 0
        ):
        # magic possibly involving locals()
    def open(self):
        reveal_head()
</code></pre>
<p>And it could be used like this:</p>
<pre><code>&gt;&gt;&gt; box = Box()
&gt;&gt;&gt; box.configure(empathy = 98)
&gt;&gt;&gt; box.weight
1
&gt;&gt;&gt; box.empathy
98
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a bit of a hacky method. Build a <code>defaults</code> dictionary containing the default values for your allowed parameters. Then update <code>self.__dict__</code> with <code>**kwargs</code>, after some error checking on the keys:</p>
<pre><code>class Box:
    def __init(self):
        pass
    def configure(self, **kwargs):
        defaults = {
            "color": "#ffffff",
            "weight": 1,
            "empathy": 97,
            "angle_x": 0,
            "angle_y": 0,
            "angle_z": 0,
            "displacement_x": 0,
            "displacement_y": 0,
            "displacement_z": 0
        }
        bad_args = [k for k in kwargs if k not in defaults]
        if bad_args:
            raise TypeError("configure() got unexpected keyword arguments %s"%bad_args)
        self.__dict__.update(defaults)
        self.__dict__.update(kwargs)
</code></pre>
<p>Now you can do:</p>
<pre><code>box = Box()
box.configure(empathy = 98)
print(box.weight)
#1
print(box.empathy)
#98
</code></pre>
<p>But if you did:</p>
<pre><code>box.configure(wieght = 2)
#TypeError: configure() got unexpected keyword arguments ['wieght']
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer">docs.python.org/3/library/dataclasses.html</a> ?</span>
<span class="comment-copy">Just use your approach. Explicit is better than implicit</span>
<span class="comment-copy">I disagree and think it's a perfectly fine way of doing things. It's also fairly trivial to validate the <code>kwargs</code> passed it that's a concern.</span>
<span class="comment-copy">Ah, yes...now that's more like it. Note that one could more succinctly check for bad args using the <code>any()</code> (or perhaps the <code>all()</code>) function.</span>
<span class="comment-copy">@martineau I thought of that originally, but I wanted to also print the offending arguments. I suppose one could just loop through and raise an error on the first bad argument as well.</span>
<span class="comment-copy">@pault Aaaah, nicely done! And with the error-checking there I'm feeling pretty ok with using this. Thanks muchly for your thoughts on this!</span>
