<div class="post-text" itemprop="text">
<p>a.json file:</p>
<pre><code>{
  "a": "b",
  "key": "graph: \"color\" = 'black' AND \"api\" = 'demo-application-v1' nodes",
  "c": "d"
}
</code></pre>
<p>following code I tried:</p>
<pre><code>string_to_be_replace = "abcd"
string_to = "graph: \"color\" = 'black' AND \"api\" = 'demo-application-v1' nodes"
string_to_be_identified = "\"color\" = \'black\' AND \"api\" = \'demo-application-v1\'"
string_to_be_identified1 = '"color" = \'black\' AND "api" = \'demo-application-v1\''

print string_to_be_identified
print string_to_be_identified1
print string_to.replace(string_to_be_identified1,string_to_be_replace)
print string.replace(string_to, string_to_be_identified,string_to_be_replace)
</code></pre>
<p>output:</p>
<blockquote>
<p>"color" = 'black' AND "api" = 'demo-application-v1'</p>
<p>"color" = 'black' AND "api" = 'demo-application-v1'</p>
<p>graph: abcd nodes</p>
<p>graph: abcd nodes</p>
</blockquote>
<p>This is working fine and replacing string as expected but </p>
<p><strong>it is not when I tried the following approaches</strong></p>
<p>Approach 1:</p>
<ol>
<li><p>Open file in a read mode,</p></li>
<li><p>get line by line and replace string </p></li>
</ol>
<blockquote>
<pre><code>with open(path + '/a.json', 'r') as file:
    read_lines = file.readlines()
    for line in read_lines:
        print line.replace(string_to_be_identified,string_to_be_replace)
file.close()
</code></pre>
</blockquote>
<p>output:</p>
<blockquote>
<p>{</p>
<p>"a": "b",</p>
<p>"key": "graph: \"color\" = 'black' AND \"api\" =
  'demo-application-v1' node",</p>
<p>"c": "d"</p>
<p>}</p>
</blockquote>
<p>Approach 2:</p>
<ol>
<li><p>Open file in read mode,</p></li>
<li><p>Since the file a.json has JSON data, get json file loaded, convert json object to JSON-string and then replace it.</p></li>
</ol>
<p>Code:</p>
<pre><code> with open(path + '/a.json', 'r') as file:
    loadedJson = json.load(file)
    print "z: " + str(loadedJson).replace(string_to_be_identified, string_to_be_replace)
file.close()
</code></pre>
<p>output:</p>
<blockquote>
<p>z: {u'a': u'b', u'c': u'd', u'key': u'graph: "color" = \'black\' AND
  "api" = \'demo-application-v1\' node'}</p>
</blockquote>
<p>Approach 3: </p>
<p>I assume Unicode character in JSON string might be creating a problem so converted Unicode string to normal string and then tried to replace string</p>
<p>code:</p>
<pre><code>def byteify(input):
    if isinstance(input, dict):
        return {byteify(key): byteify(value)
                for key, value in input.iteritems()}
    elif isinstance(input, list):
        return [byteify(element) for element in input]
    elif isinstance(input, unicode):
        return input.encode('utf-8')
    else:
        return input

with open(path + '/a.json', 'r') as file:
    loadedJson = json.load(file)
    js = byteify(loadedJson)
    print "a: " + str(js).replace(string_to_be_identified, string_to_be_replace)
</code></pre>
<p>output:</p>
<blockquote>
<p>a: {'a': 'b', 'c': 'd', 'key': 'graph: "color" = \'black\' AND "api" =
  \'demo-application-v1\' node'}</p>
</blockquote>
<ul>
<li>python version:2.7.15 </li>
<li>using byteify code from one of the SO answer.</li>
<li>JSON file is big and cannot do the manual search and replace. </li>
<li>There is no difference in ' and " in python still tried in above example.</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>While I certainly do not recommend any sort of context-unaware search &amp; replace in a hierarchical structure like JSON, your main issue is that the string you're searching for in your JSON file has escaped quotations (literal <code>\</code> characters) so you have to account for those as well if you want to do plain text search. You can use either <a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" rel="nofollow noreferrer">raw strings</a> or add the backslashes yourself, something like:</p>
<pre><code>str_search = r"graph: \"color\" = 'black' AND \"api\" = 'demo-application-v1'"
# or, if you prefer to manually write down the string instead of declaring it 'raw':
# str_search = "graph: \\\"color\\\" = 'black' AND \\\"api\\\" = 'demo-application-v1'"
str_replace = "abcd"

with open("/path/to/your.json", "r") as f:
    for line in f:
        print(line.replace(str_search, str_replace))
</code></pre>
<p>Which, for your JSON, will yield:</p>
<pre>{

  "a": "b",

  "key": "abcd nodes",

  "c": "d"

}</pre>
<p>(Extra new lines added by <code>print</code>).</p>
</div>
<span class="comment-copy">Any particular reason why are you trying to do plain search &amp; replace on hierarchical data such as JSON? Why don't you parse the JSON, replace what you need properly, and then serialize it to JSON again?</span>
<span class="comment-copy">@zwer, Json is too big to go to the particular hierarchies, and the worst part is, String is a field in a complex object which intern present in an array of non-uniform complex objects. Now this string might be present as part of another object in future and if it is not present in parsing logic then we might miss it, so thought of string replace solution, which will work irrespective of depth of field in json.</span>
<span class="comment-copy">I did not know about raw string, Thank you! @Zwer, this helped :)</span>
<span class="comment-copy">some more info on raw string:<a href="https://stackoverflow.com/questions/2081640/what-exactly-do-u-and-r-string-flags-do-and-what-are-raw-string-literals" title="what exactly do u and r string flags do and what are raw string literals">stackoverflow.com/questions/2081640/â€¦</a></span>
<span class="comment-copy">Some more info: Raw string operation is different from usual string concatenation, color is user defind variable: e.g. <code>r"AND color = '" + color + "' AND \"api\"</code> then better you should be doing <code>r"AND color = '" + color + r"' AND \"api\"</code></span>
