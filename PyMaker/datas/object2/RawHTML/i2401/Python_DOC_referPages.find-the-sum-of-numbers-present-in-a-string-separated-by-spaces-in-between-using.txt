<div class="post-text" itemprop="text">
<p>I am finding it difficult in writing python code for the below scenario</p>
<p>I have a list called </p>
<pre><code>sume=['12 1929 8827','8837 139']
</code></pre>
<p>I converted the string to int but it is showing error because of the " " in between.</p>
<p>How to calculate the sum of the digits by eliminating the " " in between. </p>
<p>Answer should be 19744.</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like:</p>
<pre class="lang-py prettyprint-override"><code>parsed = []
array = ['12 1929 8827','8837 139']
for string in array:
    for component in string.split(' '):
        parsed.append(int(component))

sum = reduce(lambda a, x: a + x, parsed)
</code></pre>
<p>Or more simply (as pointed out by @wwii):</p>
<pre class="lang-py prettyprint-override"><code>parsed = []
array = ['12 1929 8827','8837 139']
for string in array:
    for component in string.split(' '):
        parsed.append(int(component))

sum = sum(parsed)
</code></pre>
<p>Or even more simply (also as pointed out by @wwii):</p>
<pre class="lang-py prettyprint-override"><code>accumulated = 0
array = ['12 1929 8827','8837 139']
for string in array:
    for component in string.split(' '):
        accumulated += int(component)

sum = sum(parsed)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <code>sum</code>+<code>map</code> and <code>str.split()</code> </p>
<pre><code>&gt;&gt;&gt; sume=['12 1929 8827','8837 139']
&gt;&gt;&gt; elems = [sum(map(int, s.split())) for s in sume]
[10768, 8976]
</code></pre>
<p>If you need the sum of <em>all elements</em>, can use <code>sum</code> again</p>
<pre><code>&gt;&gt;&gt; sum(elems)
19744
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use the <code>str.split()</code> method to split by space:</p>
<pre><code>total = sum(sum(int(n) for n in i.split())
            for i in sume)
#                    ^^ that's your starting list
</code></pre>
<p>This takes each string on numbers in the list and splits it by space, returning the sum of it. Then each of these 'sums' are fed into the outer <code>sum</code> call to get their total. This would look like the following when expanded:</p>
<pre><code>total = 0
for i in sume:
    i = i.split()
    for n in i:
        total += int(n)
</code></pre>
<p>Remember that <code>split()</code> returns a list of <em>strings</em>, so you still need to cast each item to <code>int</code> before summing it. </p>
</div>
<div class="post-text" itemprop="text">
<p>You need to split by space and sum those numbers, one approach is the following:</p>
<pre><code>sum(number for word in ['12 1929 8827','8837 139'] for number in map(int, word.split()))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>19744
</code></pre>
<p>A more robust approach is to provide a default value in case the cast fails:</p>
<pre><code>def to_int(text, default=0):
    try:
        return int(text)
    except ValueError:
        return default

text_numbers = ['12 1929 8827','8837 139']

print(sum(number for word in text_numbers for number in map(to_int, word.split())))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>19744
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple solution is <code>sum(map(int, ' '.join(sume).split()))</code></p>
</div>
<span class="comment-copy">How do you get 19746? <code>12+1929+8827+8837+139</code> gives 19744.</span>
<span class="comment-copy">You have two strings in <code>sume</code> - you need to split each string; make an int of each item in the split string; add each int to a <i>variable</i> holding the total.</span>
<span class="comment-copy"><code>import numpy as np;np.array(' '.join(sume).split(),'int').sum()</code></span>
<span class="comment-copy">Or just <code>total = sum(parsed)</code> - please don't shadow Python builtins and keywords ... by using them as variable names. <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#sum</a></span>
<span class="comment-copy">Also, if the list of ints isn't needed for anything else, <code>parsed</code> could be <code>parsed = 0</code> and and instead of <code>parsed.append...</code> in the loop, it could be <code>parsed += int(component)</code> - then the final summation isn't needed</span>
<span class="comment-copy">Don't name your variable <code>sum</code>... for reasons that should be obvious.</span>
