<div class="post-text" itemprop="text">
<p>I know this <strong>C#</strong> code:</p>
<pre><code>public class ClassA
{
    public byte var1;
}
</code></pre>
<p>can be converted to this <strong>Python</strong> code:</p>
<pre><code>class ClassA(object):
    def __init__(self):
        self.var1 = bytes() # or b''
</code></pre>
<p>but what if <code>var1</code> were instead a <em>byte array</em> as follows:</p>
<pre><code>public byte[] var1;
</code></pre>
<p>Normally, I would do:</p>
<pre><code>[bytes(i) for i in myList]
</code></pre>
<p>but no such variable like <code>myList</code> exists in this case to fill that position, leaving me with <code>[bytes(i) for i in ]</code> which is obviously syntactically invalid.</p>
<p>Related to <a href="https://stackoverflow.com/questions/52390450/mimic-c-sharp-classes-in-python">Mimic C# classes in Python</a></p>
</div>
<div class="post-text" itemprop="text">
<p><code>bytes()</code> is not the equivalent of a C# byte. There is no direct equivalent of a C# byte in Python; the closest would be an ordinary int. I would consider the most direct translation of that C# class to be</p>
<pre><code>class ClassA(object):
    def __init__(self):
        self.var1 = 0
</code></pre>
<p><code>bytes</code> objects are <em>immutable sequences</em> of bytes. If you want a mutable sequence of bytes, either a <a href="https://docs.python.org/3/library/stdtypes.html#bytearray-objects" rel="nofollow noreferrer"><code>bytearray</code></a> or an ordinary <code>list</code> would be appropriate, or an <a href="https://docs.python.org/3/library/array.html" rel="nofollow noreferrer"><code>array.array</code> array</a>. I'd probably go with the list unless I had specific reason to do otherwise, really:</p>
<pre><code>class ClassA(object):
    def __init__(self):
        self.var1 = []
</code></pre>
<p>Note that <code>bytearray</code> and <code>bytes</code> represent sequences of <em>unsigned</em> bytes; their elements go from 0 to 255, not from -128 to 127. An <code>array.array('b')</code> would be a sequence of signed bytes.</p>
</div>
<span class="comment-copy">What makes <code>0</code> more concise than <code>bytes()</code> or <code>b''</code>?  I am less familiar with this topic.</span>
<span class="comment-copy">@CtrlS: It's not about what's more concise; it's about writing code that actually means the right thing. (<code>0</code> <i>is</i> more concise, being 1 character instead of 7 or 3, but that doesn't matter.)</span>
<span class="comment-copy">Maybe concise was the wrong word...what I'm really asking I guess then is how do <code>bytes()</code> and <code>0</code> differ?</span>
<span class="comment-copy">@CtrlS: <code>bytes()</code> is an immutable sequence of 0 bytes. <code>0</code> is the integer 0.</span>
<span class="comment-copy">So the difference is that bytes() implies multiple bytes, whereas 0 is obviously a single value.  Okay, thanks.</span>
