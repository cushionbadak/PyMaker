<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2609518/unboundlocalerror-with-nested-function-scopes">UnboundLocalError with nested function scopes</a>
<span class="question-originals-answer-count">
                    4 answers
                </span>
</li>
</ul>
</div>
<p>It seems that the closure of a python function has problems if the symbol
referenced is assigned:</p>
<pre><code>def outer():
    p = []
    def gen():
        def touch(e):
            if e[0] == 'add':
                p.append(e);
            elif e[0] == 'rem':
                p = [ x for x in p if not (x[1] == e[1]) ]
        return touch
    f = gen()
    for i in [["add","test1"],["add","test2"],["rem","test2"],["rem","test1"]]:
        f(i)      

outer();
</code></pre>
<p>and the result is: </p>
<pre><code>Traceback (most recent call last):
  File "b.py", line 22, in &lt;module&gt;
    outer();
  File "b.py", line 20, in outer
    f(i)      
  File "b.py", line 14, in touch
    p.append(e);
UnboundLocalError: local variable 'p' referenced before assignment
</code></pre>
<p>If I just for test replace:</p>
<pre><code> -       p = [ x for x in p if not (x[1] == e[1]logig is) ]                                                                                                                                
 +       a = [ x for x in p if not (x[1] == e[1]) ]                                                                                                                                
</code></pre>
<p>the error dissapears, however the code is not what I want. Is the above behaviour expected with python closures/nested functions? Do I need to wrap the array to modify inside a object and just call functions? </p>
<p>On the other hand this one works:</p>
<pre><code>class o():
    def __init__(self):
        self.p = []
    def add(self,e):
        self.p.append(e);
    def rem(self,e):
        self.p = [ x for x in self.p if not (x[1] == e[1]) ]

def outer():
    p = o()
    def gen():
        def touch(e):
            if e[0] == 'add':
                p.add(e);
            elif e[0] == 'rem':
                p.rem(e)
        return touch
    f = gen()
    for i in [["add","test1"],["add","test2"],["rem","test2"],["rem","test1"]]:
        f(i)      

outer();
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because you are assigning <code>p</code> inside <code>touch</code>, it becomes a local variable in <code>touch</code> and effectively "hides" all other names <code>p</code> in enclosing scopes.  In order to tell Python that you actually want to refer to the <code>p</code> within <code>outer</code>, you should use <code>nonlocal p</code>, for example:</p>
<pre><code>def outer():
    p = []
    def touch(e):
        # The following line is required to refer to outer's p
        nonlocal p
        if e[0] == 'add':
            p.append(e)
        elif e[0] == 'rem':
            p = [ x for x in p if not (x[1] == e[1]) ]
    for i in [["add","test1"],["add","test2"],["rem","test2"],["rem","test1"]]:
        touch(i)
outer()
</code></pre>
<p>Your second example works because you are referring to an attribute of <code>p</code> in both cases of <code>touch</code>, rather than making an assignment (<code>p = ...</code>).</p>
<p>See <a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" rel="nofollow noreferrer"><code>nonlocal</code> in the Python reference documentation</a>, the reference documentation for <a href="https://docs.python.org/3/reference/executionmodel.html#resolution-of-names" rel="nofollow noreferrer">scopes</a>, and <a href="https://www.python.org/dev/peps/pep-3104/" rel="nofollow noreferrer">PEP 3104</a> in which the <code>nonlocal</code> syntax was proposed.  <code>nonlocal</code> only exists in Python 3, but <a href="https://stackoverflow.com/questions/3190706/nonlocal-keyword-in-python-2-x">there is a workaround</a> if it is necessary to use Python 2.</p>
</div>
<span class="comment-copy">It seems to work fine if you define p in the touch function</span>
<span class="comment-copy">That is not a closure. <a href="https://www.programiz.com/python-programming/closure" rel="nofollow noreferrer">programiz.com/python-programming/closure</a></span>
<span class="comment-copy">Or else you can define <code>def touch(e, p):</code> and call using <code>touch(i, p)</code></span>
<span class="comment-copy">@Alexander : You where right, I changed the title / example</span>
<span class="comment-copy">Quite nasty pitfall. Thanks for the tip.</span>
