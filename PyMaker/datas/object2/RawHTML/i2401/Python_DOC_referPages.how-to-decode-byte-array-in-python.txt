<div class="post-text" itemprop="text">
<p><strong>Hey, I contacted the company multiple times and after some weird conversations I got some code that let me read and decode the data. Thank you everyone for your help!</strong></p>
<p>I connected a PCB to my Raspberry PI that should output temperature, humidity, pressure and air quality. I receive the data via serial. I wrote a Python script that read on the serial and outputs the data.</p>
<pre><code>#!/usr/bin/env python
import time
import serial

ser = serial.Serial(
        port='/dev/ttyAMA0',
        baudrate = 9600,
        parity=serial.PARITY_NONE,
        stopbits=serial.STOPBITS_ONE,
        bytesize=serial.EIGHTBITS,
        timeout=1
)

while 1:
        x=ser.readline()
        print (x)
</code></pre>
<p>And the data looks like this (multiple sample data):</p>
<pre><code>b'ZZ?\x0f\t,\x16a\x01\x86\x8d\x10Y\x00\x02\xa5\x9b\x00p\xdd'

b'ZZ?\x0f\t.\x16]\x01\x86\x8f\x10Z\x00\x02\xa3\x7f\x00p\xc0'

b'ZZ?\x0f\t0\x16[\x01\x86\x91\x10Y\x00\x02\xa2\xcc\x00p\r'

b'ZZ?\x0f\t2\x16S\x01\x86\x91\x10V\x00\x02\xa4\xe7\x00p!'

b'ZZ?\x0f\t3\x16O\x01\x86\x8f\x10X\x00\x02\xa3\x7f\x00p\xb5'
</code></pre>
<p>So that should be multiple byte-arrays. Sadly there is no documentation so I can't find anything how to decode this. If I try to decode the data:</p>
<pre><code>x=ser.readline().decode()
</code></pre>
<p>I get the following error:</p>
<pre><code>Traceback (most recent call last):
  File "ser.py", line 16, in &lt;module&gt;
    x=ser.readline().decode()
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x86 in position 9: invalid start byte
</code></pre>
<p>So maybe the data is not utf-8? Ignoring the errors does not help. Does someone know how to proper decode the data? That would help me a lot!</p>
<p>Thanks!</p>
</div>
<div class="post-text" itemprop="text">
<p>This looks like raw binary data (not human readable in any of the common encodings I tried). You'll need to look up the structure of bytes and likely use the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a> library to convert to regular python objects. </p>
<p>If there is no documentation you'll have to reverse engineer it. Each bytearray is 20 bytes long, and the first four bytes are all the same, so my gut assumption is that the first four bytes (32 bits) are a header, followed by your four values as 32 bit floats or ints. If that is the case you could decode each array with something like:</p>
<pre><code>&gt;&gt;&gt;struct.unpack('iiiii', b'ZZ?\x0f\t3\x16O\x01\x86\x8f\x10X\x00\x02\xa3\x7f\x00p\xb5')
(255810138, 1326854921, 277841409, -1560149928, -1250951041)
</code></pre>
<p>The examples you provided suggested the simple case of all 4 byte numbers probably isn't the case (none of those numbers make sense for weather readings), but it may be a mixture of various length numbers to account for the various sensors having differing levels of precision.</p>
</div>
<div class="post-text" itemprop="text">
<p>I contacted the company multiple times and after some weird conversations I got some code that let me read and decode the data. Thank you everyone for your help!</p>
</div>
<span class="comment-copy">You need to check the documentation of the PCB you have attached to your Raspberry to understand what it is sending to you. If you do not have any documentation, how do you even know the baud rate, that there is no parity, there is one stop bit and byte size is eight bits?</span>
<span class="comment-copy">@jdehesa that is true ... however 99.9% of devices just use the parity and stop bit and bytesize mentioned here... I doubt that is the issue ... and usually at the wrong baud you get no message not garbled messages ... my bet is that he needs struct unpack somehow</span>
<span class="comment-copy"><code>b'ZZ?\x0f\t,\x16a\x01\x86\x8d\x10Y\x00\x02\xa5\x9b\x00p\xdd'.decode("latin1")</code> will decode it to something ... you can probably just parse it as bytes though... but its hard to say without more info here</span>
<span class="comment-copy">@JoranBeasley Yes, you are right about that. I just mean that, unless you are up for a reverse engineering challenge, you should look up some documentation to, indeed, unpack that data.</span>
<span class="comment-copy">this looks like raw binary data (not human readable in any of the common encodings I tried). You'll need to look up the structure of bytes and likely use the <a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">struct</a> library to convert to regular python objects.</span>
