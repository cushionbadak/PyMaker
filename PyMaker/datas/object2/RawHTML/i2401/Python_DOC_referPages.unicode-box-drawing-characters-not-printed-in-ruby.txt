<div class="post-text" itemprop="text">
<p>I work on a game in Ruby. It uses ncurses to draw window contents and refresh the screen. This all works fine on macOS, where I develop the stuff. But on Linux, I cannot get anything besides plain ASCII to print when interfacing with ncurses either from Ruby <em>or plain C</em>.</p>
<p>For example, I get this output:</p>
<pre><code>Hello, world! M-b~U~TM-b~U~PM-b~U~WM-b~U~QM-b~U~QM-b~U~ZM-b~U~PM-b~U~]M-b~U~_M-b~T~@M-b~UM-"
</code></pre>
<p>Instead of what I put into the source:</p>
<pre><code>Hello, world! ╔═╗║║╚═╝╟─╢
</code></pre>
<p>File encoding is UTF-8, <code>env</code> or <code>locale</code> output reports <code>LANG</code> and <code>LC_*</code> variables to be <code>en_US</code> or <code>en_US.UTF-8</code> where appropriate. The terminal can print these characters just fine, so it's not the font or terminal emulator setting.</p>
<p>Python 3 works fine, too. Ruby and C don't.</p>
<p>(Tested on a fresh Linux Mint 19 setup with <code>libncurses5-dev</code> installed.)</p>
<p>So, <strong>Am I missing some setting or is the Python binding somewhat special and I'm out of luck?</strong></p>
<hr/>
<h2>What it looks like</h2>
<p>It should look like this (macOS):</p>
<p><a href="https://i.stack.imgur.com/otcgA.png" rel="nofollow noreferrer"><img alt="macOS reference pic" src="https://i.stack.imgur.com/otcgA.png"/></a></p>
<p>But does look like this instead:</p>
<p><a href="https://i.stack.imgur.com/y0QWL.png" rel="nofollow noreferrer"><img alt="ruby on linux" src="https://i.stack.imgur.com/y0QWL.png"/></a></p>
<h2>Python Code</h2>
<p>This code works just fine:</p>
<pre><code>#!/usr/bin/python
# -*- coding: utf-8 -*-

import locale
import curses

locale.setlocale(locale.LC_ALL, '')

stdscr = curses.initscr()
curses.noecho()
curses.cbreak()
stdscr.addstr(0, 0, "╔═╗║║╚═╝╟─╢") # dont even need .encode('UTF-8')
stdscr.refresh()
stdscr.getkey()
curses.endwin()
</code></pre>
<p>The docs for the curses module state that you have to do this since ncurses 5: <a href="https://docs.python.org/3/library/curses.html" rel="nofollow noreferrer">https://docs.python.org/3/library/curses.html</a></p>
<blockquote>
<p>Since version 5.4, the ncurses library decides how to interpret non-ASCII data using the nl_langinfo function. That means that you have to call locale.setlocale() in the application and encode Unicode strings using one of the system’s available encodings.</p>
</blockquote>
<h2>Ruby Code</h2>
<pre><code># coding: utf-8
require "curses"

Curses.init_screen
Curses.start_color
Curses.stdscr.keypad(true) # enable arrow keys
Curses.cbreak # no line buffering / immediate key input
Curses.ESCDELAY = 0
Curses.curs_set(0) # Invisible cursor
Curses.noecho # Do not print keyboard input

Curses.stdscr.addstr(STYLES[:single])
Curses.stdscr.setpos(2,0)
Curses.stdscr.addstr(%Q{╔═╗║║╚═╝╟─╢})

Curses.getch
</code></pre>
<p>Tried with the <code>ffi-ncurses</code> gem instead of <code>curses</code> but to no avail. The output is the same.</p>
<h2>C Code</h2>
<p>I compile with</p>
<pre><code>gcc -finput-charset=UTF-8 -fexec-charset=UTF-8 -pedantic -Wall -o main main.c -lncurses
</code></pre>
<p>Here's the code:</p>
<pre><code>// Most of the code is sample code from "CURHELLO.C"
// (c) Copyright Paul Griffiths 1999

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;langinfo.h&gt;
#include &lt;locale.h&gt;
#include &lt;ncurses.h&gt;

int main(void) {

    // Here I tried to copy what Python is doing:
    setlocale(LC_ALL, ""); // Also tried "C.UTF-8", "en_US.UTF-8"
    nl_langinfo(CODESET);


    WINDOW * mainwin;
    if ( (mainwin = initscr()) == NULL ) {
        fprintf(stderr, "Error initialising ncurses.\n");
        exit(EXIT_FAILURE);
    }

    start_color();
    clear();
    cbreak();
    noecho();
    keypad(stdscr, TRUE);

    mvaddstr(1, 1, "Hello, world! ╔═╗║║╚═╝╟─╢");
    refresh();
    sleep(3);

    delwin(mainwin);
    endwin();
    refresh();

    return EXIT_SUCCESS;
}
</code></pre>
<h1>Edit</h1>
<p>Got it working by linking to <code>ncursesw</code> (note the trailing <code>W</code>!), but it displays the special characters at double the width of text on Linux, using Ubuntu Mono, the same font I tried on OSX with iTerm.</p>
<p><a href="https://i.stack.imgur.com/4e8Qg.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/4e8Qg.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Actually this should be several questions, but the most recent one asks how the characters could be shown as double-width.</p>
<p>The screenshot does not match the given example program.  That only draws a few sample characters, while the screenshot shows boxes.</p>
<p>However, the particular line-drawing characters can be the problem, versus the locale tables (and depending on the <strong>actual</strong> program used).   That's because those codes are <a href="http://unicode.org/reports/tr11/#Ambiguous" rel="nofollow noreferrer"><strong><em>ambiguous width</em></strong></a> (see <a href="https://codepoints.net/U+2550?lang=en" rel="nofollow noreferrer">U+2550</a>).  The standard leaves it up to the implementer whether to treat them as single-width or double-width.  Not everyone agrees on the actual width.</p>
<p>If this were a <a href="https://invisible-island.net/personal/bug-reports.html" rel="nofollow noreferrer">bug report</a>, I'd get the actual program source to test with, but suspect the problem lies in Ruby.</p>
</div>
<span class="comment-copy">Link the C code against <code>ncursesw</code>, and it'll work. (Although ncursesw adds new types and interfaces for wide characters, it also adds UTF-8 multibyte support to the standard ncurses functions.)</span>
<span class="comment-copy">Also, Ruby should prefer ncursesw over ncurses, so you probably don't have the ncursesw package installed. The library is provided by <code>libncursesw5</code> on Debian, Ubuntu, Mint (and you are probably missing that). If you want to try also the additional interfaces in ncursesw in C, also install the <code>libncursesw5-dev</code> package.  Finally, I recommend you use <code>gcc -Wall -O2 $(pkg-config --cflags ncursesw) main.c $(pkg-config --libs ncursesw) -o main</code> to compile the C program.</span>
<span class="comment-copy">I just checked, and noticed that the block element characters, like <code>▌</code> <code>▙</code> <code>▚</code> <code>█</code> <code>▞</code> <code>▟</code> <code>▐</code>, are not monospaced in the Ubuntu Mono, Oxygen Mono, Noto Mono, or Linux Libertine Mono O fonts: even if they claim to be monospaced fonts, they are not so for block elements! On my system, Nimbus Mono L, Monospace, Liberation Mono, FreeMono, DejaVu Sans Mono, Bitstream Vera Sans Mono, and Andale Mono fonts seem to have proper monospaced glyphs even for Box Drawing and Block Elements, so I suggest you use one of those fonts instead. (And mention the issue and fonts in your documentation!)</span>
<span class="comment-copy">You cannot change the font from a program run inside a terminal; you must instruct the user to change it. For gnome-terminal, select <i>Edit</i>, then <i>Profile preferences</i>, then <i>General</i> tab, check <i>Custom font</i> checkbox, and then select the font using the button on the right of the checkbox. In mate-terminal, it's at the same tab, but you need to uncheck the <i>Use system font</i> to be able to select the font.  I have never used an X terminal emulator that did not let me select the font.</span>
<span class="comment-copy">Try running <code>printf '0123456789012345678\n╔═╗║║╚═╝╟─╢▌▙▚█▞▟▐|\n'</code> in the terminal to see if it truly is a font issue. If you ask me, I'd use SDL or GTK+3.0 instead, with tiles in SVG format.</span>
<span class="comment-copy">Ah, now I see. Some monospace fonts like Ubuntu Mono, Oxygen Mono, Noto Mono, and Linux Libertine Mono O fonts use different widths for Block Elements as they do for Box Drawing glyphs, because someone on the Unicode board thought that some of them might be used in some East Asian scripts, so it'll be better to screw the monospace-width for everyone, so the font is basically useless for box drawing and block elements. Design by committee...</span>
<span class="comment-copy">agreed - makes it harder to use those characters, since none of the committees gave any thought to usage.</span>
