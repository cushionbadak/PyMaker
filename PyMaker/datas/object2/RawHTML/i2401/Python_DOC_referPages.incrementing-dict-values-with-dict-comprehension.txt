<div class="post-text" itemprop="text">
<p>I'm trying to do the following expression with dict comprehension and a ternary operation in python:</p>
<pre><code>for num in ar:
     if num in seen_dict:
         seen_dict[num] += 1
     else:
         seen_dict[num] = 1
</code></pre>
<p>I tried this:</p>
<pre><code>seen_dict = { num: seen_dict[num] += 1 for num in ar if num in seen_dict else seen_dict[num] = 1}
</code></pre>
<p>and several permutations thereof, but I keep getting syntax errors. Is it possible to do what I want?</p>
<p><strong>UPDATE</strong></p>
<p>This is the correct syntax, but not my dict only comes back with 1's:
<code>seen_dict = { num: (seen_dict[num] + 1) if num in seen_dict else 1 for num in ar }</code></p>
<p>Can someone explain why this doesn't function the same way as the for loop? Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't. It <em>seems</em> like using dict comprehensions for this should be a good idea, but it's actually a horrible trap. Use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>import counts

seen_dict = collections.Counter(ar)
</code></pre>
<p>or if you don't want to do that, then stick with the loop.</p>
<p>The problem with trying to use a dict comprehension is that a dict comprehension has no good way to maintain state or interleave the computation of the values of each key. Each value must be computed in a single expression. In contrast, the best way to solve your counting problem is to make a single pass over <code>ar</code> and update each element's count as you go.</p>
<p>The restrictions of a comprehension lead to horribly inefficient attempts like</p>
<pre><code>seen_dict = {val: ar.count(val) for val in ar}
</code></pre>
<p>which makes a number of passes over <code>ar</code> equal to the length of <code>ar</code>, or the slightly more efficient but still horribly suboptimal</p>
<pre><code>seen_dict = {val: ar.count(val) for val in set(ar)}
</code></pre>
<p>which only needs to make <code>len(set(ar))</code> passes, or for people <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer">a bit more familiar with the standard library</a>,</p>
<pre><code>from itertools import groupby
seen_dict = {val: sum(1 for _ in group) for val, group in groupby(sorted(ar))}
</code></pre>
<p>which at least isn't quadratic time, but is still O(nlogn) for a length-n <code>ar</code>.</p>
<p>If we <a href="https://ideone.com/kjHBYJ" rel="nofollow noreferrer">run a timing</a> of these four snippets with input <code>list(range(10000))</code>:</p>
<pre><code>from collections import Counter
from itertools import groupby
from timeit import timeit

ar = list(range(10000))

print(timeit('Counter(ar)', number=1, globals=globals()))
print(timeit('{val: ar.count(val) for val in ar}', number=1, globals=globals()))
print(timeit('{val: ar.count(val) for val in set(ar)}', number=1, globals=globals()))
print(timeit('{val: sum(1 for _ in group) for val, group in groupby(sorted(ar))}',
             number=1, globals=globals()))
</code></pre>
<p>We get the following output:</p>
<pre><code>0.0005530156195163727
1.0503493696451187
1.0463058911263943
0.00422721728682518
</code></pre>
<p><code>Counter</code> finishes in half a millisecond, while the <code>count</code> snippets both take over a second. (The <code>set</code> version seems to have a lower runtime due to some sort of first-run effect slowing down the other version; swapping the order of the <code>set</code> and non-<code>set</code> version usually reverses the relative timing of those versions. The deduplication of <code>set</code> doesn't help in this test, since the input has no duplicates.)</p>
<p>For a longer input, relying on <code>count</code> would be even more prohibitively expensive. Relying on <code>count</code> could easily take days for an input that <code>Counter</code> would still finish in under a second.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here, it was actually way simpler than I thought. Basically what you want is the amount of times something occurs in the list, which you can do by saying <code>ar.count(num)</code>. You can easily do this without ternary operators like so: </p>
<pre><code>ar = [1,2,3,2]
seen_dict = { num:ar.count(num) for num in ar}
print(seen_dict)# {1:1, 2:2, 3:1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It seems like you're trying to get the appearances of all values in a list. (If it's not, please let me know.) Here's how I would approach that:</p>
<pre><code>seen_dict = {num: arr.count(num) for num in list(set(arr))}
</code></pre>
<p>An explanation:</p>
<ul>
<li><code>arr.count(num)</code>: the <code>list.count(element)</code> method returns the number of appearances of <code>element</code> in <code>list</code></li>
<li><code>set(arr)</code>: creates a <code>set</code> object, which when converted back to a list removes all duplicates, or in other words, gets all distinct values of a list</li>
<li><code>list(set(arr))</code>: the distinct values in <code>arr</code></li>
</ul>
<p>The dictionary return would have key-value pairs of <code>number</code>-<code># of appearances of number in arr</code>.</p>
</div>
<span class="comment-copy">You cannot use assignment or increment operators in a dictionary comprehension</span>
<span class="comment-copy">Calling it a horrible trap is hilarious.   Thank you for this answer.</span>
<span class="comment-copy">I'm interested in why the set finished faster than the normal list, as <code>ar</code> has only distinct values.</span>
<span class="comment-copy">@teclnol: Probably just unrelated timing variations. The <code>set</code> call is only a tiny fraction of the runtime for that input; almost all of the runtime is spent on <code>count</code> calls.</span>
<span class="comment-copy">After some more testing, it looks too consistent to be random variation. It looks more like the one that goes first having to do more work somewhere.</span>
<span class="comment-copy">This is extremely inefficient (a property common to most attempts to use dict comprehensions to perform aggregation). Every <code>count</code> call requires a complete pass over <code>arr</code>.</span>
<span class="comment-copy">I see, while it is inefficient it is doing what the op asked.</span>
<span class="comment-copy">Wow we got the same answer at the same time.</span>
<span class="comment-copy">Haha, nice, I upvoted yours.</span>
<span class="comment-copy">This is extremely inefficient (a property common to most attempts to use dict comprehensions to perform aggregation). Every <code>count</code> call requires a complete pass over <code>arr</code>.</span>
<span class="comment-copy">Hmm, you're right. Is there another way to do it without so many passes over the original <code>arr</code>?</span>
<span class="comment-copy">It turns out that using dict comprehensions for this is just a horrible trap. It seems like it should be a good idea at first, but a dict comprehension will never be as efficient as a normal loop for this.</span>
