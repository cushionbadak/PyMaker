<div class="post-text" itemprop="text">
<p>Sorry if this post is a dupli,I couldn't find an answer... I have the following code:</p>
<pre><code>import numpy as np

V = np.array([[6, 10, 0],
              [2, 5, 0],
              [0, 0, 0]])

subarr = np.array([[arr[0][0], arr[0][1]], [arr[1][0], arr[1][1]]])
det = np.linalg.det(subarr)
cross = np.cross(arr[0], arr[1])

print(f"Det: {det}")
print(f"Cross: {cross}")
</code></pre>
<p>I would expect that the <code>det</code> would return 10.0 and the <code>cross</code> returns in this case <code>[0, 0, 10]</code>, the last number being equal to the <code>det</code>. For some reason, python returns </p>
<pre><code>Det: 10.000000000000002
Cross: [ 0  0 10]
</code></pre>
<p>Can someone please explain why?</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're seeing is <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">floating point inaccuracies.</a></p>
<p>And in case you're wondering how you end up with floats when finding the determinant of a matrix made up of integers (where the usual calculation method is just <code>6*5 - 2*10 = 10</code>), <code>np.linalg.det</code> uses <a href="https://en.wikipedia.org/wiki/LU_decomposition" rel="nofollow noreferrer">LU decomposition</a> to find the determinant.  This isn't very efficient for 2x2 matrices, but is much more efficient when you have bigger matrices.</p>
<p>For your 2x2, you get:</p>
<pre><code>scipy.linalg.lu(A, 1)
Out: 
(array([[  1.        ,  0.        ],
        [  0.33333333,  1.        ]]), 
 array([[  6.        ,  10.        ],
        [  0.        ,   1.66666667]]))
</code></pre>
<p>The determinant is just the product of the diagonals from this, which ends up being <code>6. * 1.66666667</code>, which resolves to <code>10.00000002</code> due to floating point errors.</p>
</div>
<span class="comment-copy">Look for floating point accuracy</span>
<span class="comment-copy"><a href="https://docs.python.org/2/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/2/tutorial/floatingpoint.html</a></span>
<span class="comment-copy">keyword: <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">floating point precision</a></span>
