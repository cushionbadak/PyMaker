<div class="post-text" itemprop="text">
<p>I have a local python code repo like the following. 
In <code>python/foo/code.py</code> I want to import <code>target_module</code> in <code>foo/bar/baz/target_module</code>. However, because <code>code.py</code> is under the <code>foo</code> module, I cannot import <code>target_module</code>. Since it's a largish repo with a great deal of legacy code, I cannot easily change any directory name. Is there any other workaround?</p>
<p>Thanks in advance!</p>
<pre>
|──foo
|   ├──bar
|         ├──baz
|               ├── target_module
├── python
|   ├── foo
|   │   ├── code.py      &lt;----from foo.bar.baz.target_module import *
</pre>
</div>
<div class="post-text" itemprop="text">
<p>There a couple ways you can do this. The quick and dirty is to just add it to your interpreter's path.</p>
<p>Here's my setup:</p>
<pre><code>Matthews-MacBook-Pro:test_project matt$ tree
.
├── foo
│   └── bar
│       └── baz
│           └── target_module.py
└── python
    └── foo
        └── code.py

5 directories, 2 files
</code></pre>
<p>Here's the contents of <code>target_module.py</code>:</p>
<pre><code>def my_func():
    print("my func called.")
</code></pre>
<p>and how you can import this function into <code>code.py</code>:</p>
<pre><code>import os
import sys

# Cheat and just add it to python interpreter's path                                                                                                                                                        
this_dir = os.path.dirname(__file__)
sys.path.append(os.path.join(this_dir, "..", "..", "foo", "bar", "baz"))

import target_module as tm
tm.my_func()
</code></pre>
<p>this outputs:</p>
<pre><code>Matthews-MacBook-Pro:test_project matt$ python python/foo/code.py 
my func called.
</code></pre>
<p>or you can call it from the <code>foo</code> directory and it'll still work fine:</p>
<pre><code>Matthews-MacBook-Pro:test_project matt$ cd python/foo/
Matthews-MacBook-Pro:foo matt$ python code.py 
my func called.
</code></pre>
<p>You can also just add the <code>foo/bar/baz</code> directory to your <code>PYTHONPATH</code> environment variable instead of calling <code>sys.path.append</code>. This syntax is shell dependent: so I'll let you google how to set environment variables for your particular shell.</p>
<p><strong>Ideally you'd want to make your modules deployable</strong> (i.e. use <code>setup.py</code> and <code>distutils</code> or <code>setuptools</code> and put <code>__init__.py</code> in each module), and then you can import "normally" (kind of like you can "just" <code>import numpy</code> and it works). <strong>But since you claim it's legacy, maybe this might be hard for you to accomplish. I get it: in legacy systems all bets are off and sometimes the quick and dirty is fine (and maybe even ideal if you don't want to spend a lot of time fixing the issue).</strong></p>
<p>I can expand this answer if you're interested in creating deployable python packages, and if not, the above should get the job done.</p>
<p>HTH.</p>
</div>
<span class="comment-copy">checkout <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">importlib</a></span>
<span class="comment-copy">You shouldn't be having this problem if you're using python 3</span>
<span class="comment-copy">@MadPhysicist The OP would have the problem if it's not really a python package (.e. no <code>__init__.py</code>s) and it's just a bunch of directories with some python scripts. All bets are off in legacy</span>
<span class="comment-copy">Hi Matt, thank you so much for your solution. As you said, this quick method does work. However, i do need the method to make the code deployable. The reason I mentioned legacy is that there are many people working on this repo and there're are reasons I cannot change the dir name with reasonable efforts. It would be great if you can share the method that can create deployable package. Thanks!!</span>
