<div class="post-text" itemprop="text">
<p>I am new to python and am looking for guidance in packing a byte string into a python ctypes class that corresponds to a C structure with ~100 fields. Is there another way besides defining a very large (and error prone) format string for use with pack()? This task is very easy in C with memcpy(). My goal for this task is to display and analyze the fields.</p>
<p>Thank you.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/ctypes.html#structures-and-unions" rel="nofollow noreferrer"><code>ctypes.Structure</code> subclasses</a> let you define the same structure in Python, with a memory layout that could be <code>memcpy</code>-ed into via a <code>memoryview</code>. It's more typing, but it's also far less error-prone than long <code>struct</code> format strings.</p>
<p>Once defined, the <code>memcpy</code> equivalent in Python would be:</p>
<pre><code>struct = MyStructure()

memoryview(struct).cast('B')[:] = mybytes
</code></pre>
<p><code>memoryview(struct)</code> uses the buffer protocol to create a view of the underlying raw memory, <code>.cast('B')</code> returns a new view of the complicated structure as raw bytes, then <code>[:]</code> is used to slice assign from a bytes-like object.</p>
<p>There are also alternate constructors that can copy directly from a buffer if you have one available at construction time, e.g.:</p>
<pre><code>struct = MyStructure.from_buffer_copy(mybytes)
</code></pre>
<p>or if <code>mybytes</code> is a mutable <code>bytearray</code> (or some other mutable bytes-like object) you can actually make a structure backed by it directly:</p>
<pre><code># struct is now backed by mybytearray; changing it will change mybytearray
struct = MyStructure.from_buffer(mybytearray)
</code></pre>
</div>
<span class="comment-copy">Show what you've tried and a sample of what you're working with.</span>
