<div class="post-text" itemprop="text">
<p>I'm running loop that writes around 10000 lines to a file. I've been searching but can't find whether it's more efficient to concatenate a string in a write statement, or use multiple write statements. ie:</p>
<pre><code>f = open(fileName,"w+")

for item in list:
    f.write(str1 + str2 + str3 + item + "\n\n")
</code></pre>
<p>or</p>
<pre><code>f = open(fileName,"w+")

for item in list:
    f.write(str1)
    f.write(str2)
    f.write(str3)
    f.write(item)
    f.write("\n\n")
</code></pre>
<p>Is the first or second option more efficient?</p>
<p>I imagine this has been asked before and I'm asking the question in a strange way, so if someone can point me in the right direction that'd be fantastic!</p>
</div>
<div class="post-text" itemprop="text">
<p>The default behaviour for the <a href="https://docs.python.org/3/library/functions.html#open" rel="nofollow noreferrer"><code>open</code></a> method, when not specifying a buffering mode, is to follow the system default which is usually line-buffered. Which means that Python will flush the output to the file (i.e. do a write operation), for every new-line it finds. </p>
<p>So I would presume in this example that both operations, as far as file IO performance is concerned, are equivalent, seeing as the new-line character is the last thing output.</p>
</div>
<span class="comment-copy">You may want to check that for yourself with this module. <a href="https://docs.python.org/3/library/timeit.html" rel="nofollow noreferrer">docs.python.org/3/library/timeit.html</a></span>
<span class="comment-copy">Concatenating strings is not very efficient in <code>str1 + str2 + str3 + item + "\n\n"</code>. For that, you should probably be using <code>join()</code></span>
<span class="comment-copy">For 10000 this is almost certainly a micro-optimisation, but a valid question nonetheless</span>
<span class="comment-copy">That's in terms of buffered writing. I suspect there's some balance between string concatenation and multiple method calls that might become important if the data was <i>massive</i>. Probably it doesn't matter for most examples :)</span>
<span class="comment-copy">Certainly, yes. I'm not sure how Python internally deals with adding things to the buffer with sequential <code>write</code> calls, whether that is more efficient than doing string concatenation and outputting it all at once.</span>
