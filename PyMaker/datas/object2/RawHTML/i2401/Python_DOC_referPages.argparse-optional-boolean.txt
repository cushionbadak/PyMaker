<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/15008758/parsing-boolean-values-with-argparse">Parsing boolean values with argparse</a>
<span class="question-originals-answer-count">
                    13 answers
                </span>
</li>
</ul>
</div>
<p>I am trying to get the following behaviour:</p>
<ul>
<li>python test.py  =&gt; store foo=False</li>
<li>python test.py --foo =&gt; store foo=True</li>
<li>python test.py --foo bool =&gt; store foo=bool</li>
</ul>
<p>It works when I use</p>
<pre><code>    parser.add_argument('--foo',nargs='?', default=False, const=True)
</code></pre>
<p>However it breaks if I add <code>type=bool</code>, trying to enforce casting to boolean. In this case </p>
<pre><code>python test.py --foo False
</code></pre>
<p>Actually ends up storing <code>foo=True</code>. What's going on??</p>
</div>
<div class="post-text" itemprop="text">
<p>Are you <em>sure</em> you need that pattern? <code>--foo</code> and <code>--foo &lt;value&gt;</code>, together, for a boolean switch, is not a common pattern to use.</p>
<p>As for your issue, remember that the command line value is a <em>string</em> and, <code>type=bool</code> means that you want <code>bool(entered-string-value)</code> to be applied. For <code>--foo False</code> that means <code>bool("False")</code>, producing <code>True</code>; all non-empty strings are true! See <a href="https://stackoverflow.com/questions/41655897/why-is-argparse-not-parsing-my-boolean-flag-correctly">Why is argparse not parsing my boolean flag correctly?</a> as well.</p>
<p>Instead of supporting <code>--foo</code> / <code>--foo &lt;string value&gt;</code>, I would <em>strongly</em> recommend you use <code>--foo</code> to mean <code>True</code>, drop the argument value, and instead add a <code>--no-foo</code> option to explicitly set <code>False</code>:</p>
<pre><code>parser.add_argument('--foo', default=False, action='store_true')
parser.add_argument('--no-foo', dest='foo', action='store_false')
</code></pre>
<p>The <code>dest='foo'</code> addition on the <code>--no-foo</code> switch ensures that the <code>False</code> value it stores (via <code>store_false</code>) ends up on the same <code>args.foo</code> attribute.</p>
<p>You'd only need a <code>--foo / --no-foo</code> combination if you have some other configuration mechanism that would set <code>foo</code> to <code>True</code> and you needed to override this again with a command-line switch. <code>--no-&lt;option&gt;</code> is a widely adopted standard to invert a boolean command-line switch.</p>
<p>If you <em>don't</em> have a specific need for a <code>--no-foo</code> inverted switch (since just <em>omitting</em> <code>--foo</code> would already mean 'false'), then just stick with the <code>action='store_true'</code> option. This keeps your command line simple and clear!</p>
<p>However, if your use case or other constraints specifically require that your command line <em>must</em> have some king of <code>--foo (true|false|0|1)</code> support, then add your own converter:</p>
<pre><code>def str_to_bool(value):
    if isinstance(value, bool):
        return value
    if value.lower() in {'false', 'f', '0', 'no', 'n'}:
        return False
    elif value.lower() in {'true', 't', '1', 'yes', 'y'}:
        return True
    raise ValueError(f'{value} is not a valid boolean value')

parser.add_argument('--foo', type=str_to_bool, nargs='?', const=True, default=False)
</code></pre>
<ul>
<li>the <code>const</code> value is used for <code>nargs='?'</code> arguments where the argument value is omitted. Here that sets <code>foo=True</code> when <code>--foo</code> is used.</li>
<li><code>default=False</code> is used when the switch is not used at all.</li>
<li><code>type=str_to_bool</code> is used to handle the <code>--foo &lt;value&gt;</code> case.</li>
</ul>
<p>Demo:</p>
<pre><code>$ cat so52403065.py
from argparse import ArgumentParser

parser = ArgumentParser()

def str_to_bool(value):
    if value.lower() in {'false', 'f', '0', 'no', 'n'}:
        return False
    elif value.lower() in {'true', 't', '1', 'yes', 'y'}:
        return True
    raise ValueError(f'{value} is not a valid boolean value')

parser.add_argument('--foo', type=str_to_bool, nargs='?', const=True, default=False)

print(parser.parse_args())
$ python so52403065.py
Namespace(foo=False)
$ python so52403065.py --foo
Namespace(foo=True)
$ python so52403065.py --foo True
Namespace(foo=True)
$ python so52403065.py --foo no
Namespace(foo=False)
$ python so52403065.py --foo arrbuggrhellno
usage: so52403065.py [-h] [--foo [FOO]]
so52403065.py: error: argument --foo: invalid str_to_bool value: 'arrbuggrhellno'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should use the <a href="https://docs.python.org/3/library/argparse.html#action" rel="nofollow noreferrer"><code>action='store_true'</code></a> parameter instead for Boolean arguments:</p>
<pre><code>parser.add_argument('--foo', action='store_true')
</code></pre>
<p>So that the absence of the <code>--foo</code> option:</p>
<pre><code>python test.py
</code></pre>
<p>would result in a <code>False</code> value for the <code>foo</code> argument, and the presence of the <code>--foo</code> option:</p>
<pre><code>python test.py --foo
</code></pre>
<p>would result in a <code>True</code> value for the <code>foo</code> argument.</p>
</div>
<span class="comment-copy">Also see <a href="//stackoverflow.com/q/41655897">Why is argparse not parsing my boolean flag correctly?</a></span>
<span class="comment-copy">So the reason I want this is because the what I am writing is a builder file that writes a number of bash scripts and submits them to a SLURM workload manager.  The optional parameters I submit get subjected to some preprocessing steps and then a derived set of parameters get appended to the python call inside the SLURM script.  Now, the easiest way I found to implement this is to have a  dictionary of parameters that I want to pass to the SLURM script and append all key-value pairs.  Now with your suggestion I would have to check whether or not a flag was manually set or not.</span>
<span class="comment-copy">@Hyperplane: you could accept a JSON-encoded config string perhaps? Then if <code>args.json_config</code> is the decoded JSON object then all you have to do is use <code>args = parser.parse_args()</code> and <code>args.__dict__.update(args.json_config)</code></span>
<span class="comment-copy">@Hyperplane: <code>parser.add_argument('--json-config', type=json.loads)</code> should be enough to define such a switch.</span>
<span class="comment-copy">That sounds like a really nice solution. At the moment using a <code>type=string2bool</code> seems sufficient, but I will keep this idea in mind. Thanks again.</span>
<span class="comment-copy">But that wouldn't allow for <code>--foo bool</code>.</span>
<span class="comment-copy">It's not needed. I've updated my answer with better explanations.</span>
<span class="comment-copy">Sure, but there <i>are</i> use-cases for specifying <i>disable the foo option</i>, specifically in a 'merged configuration from multiple sources including the command line' scenario. <code>--no-foo</code> is the usual choice there.</span>
