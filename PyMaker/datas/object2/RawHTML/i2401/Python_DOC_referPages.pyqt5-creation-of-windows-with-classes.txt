<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/576169/understanding-python-super-with-init-methods">Understanding Python super() with __init__() methods [duplicate]</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I have a PyQt5 application built that looks like so (I know I have a lot of imports, I am learning so I want complete freedom at the moment):</p>
<pre><code>import sys
from PyQt5.QtGui import *
from PyQt5.QWidgets import *
from PyQt5.QtCore import *

class Menu(QMainWindow):

    def __init__(self)
        super().__init__()

        #create bar
        bar = self.menuBar()

        #create bar menus
        file = bar.addMenu("File")
        about = bar.addMenu("About")

        #create actions
        quit_action = QAction("&amp;Quit", self)
        quit_action.setShortcut('Ctrl+Q')
        about_action = QAction("&amp;About...", self)

        #add actions
        file.addAction(quit_action)
        about.addAction(about_action)

        #what to do with actions
        quit_action.triggered.connect(self.quit_func)
        about_action.triggered.connect(self.about_func)

        #window properties
        self.setWindowTitle("Hello World")
        self.resize(600, 400)

        self.show()

    def quit_func(self):
        sys.exit()

    def about_func(self):
        pass

class About(QWidget):

    def __init__(self):
        super().__init__(parent)

        #widgets
        self.l1 = QLabel('Hello World')
        self.l1.setAlignment(Qt.AlignCenter)
        self.l2 = QLabel('Description of the Application')
        self.l2.setAlignment(Qt.AlignCenter)

        #horiz box
        h_box = QHBoxLayout()
        h_box.addStretch()
        h_box.addWidget(self.l2)
        h_box.addStretch()

        #vert box
        v_box = QVBoxLayout()
        v_box.addWidget(self.l1)
        v_box.addLayout(h_box)
        v_box.addStretch()

        self.setLayout(v_box)

        #window properties
        self.setWindowTitle("About Hello World")
        self.setFixedSize(250,150)

        self.show()

if not QApplication.instance()
    app = QApplication(sys.argv)
else:
    app = QApplication.instance()

main = Menu()
main.show()

sys.exit(app.exec())
</code></pre>
<p>I want the about_func() function to call to the About() class, so I can open a window separate from my Main Window created by Menu() class.</p>
<p>This code is throwing the error: </p>
<pre><code>TypeError: QMainWindow(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()): argument 1 has unexpected type 'sip.wrappertype'
</code></pre>
<p>in reference to the <code>super().__init__()</code> in line 9. </p>
<p><strong>How could I implement this in a working fashion? Feel free to criticize any aspect of my code.</strong></p>
<p><strong>(Edited to clarify question)</strong></p>
</div>
<div class="post-text" itemprop="text">
<p>From your code it's not very clear if you are using Python 2 or 3, anyway, the basic syntax of super is:</p>
<pre><code>super(yourClass, instance).method(args)
</code></pre>
<p>So, in your case they are both wrong :-) The first one should be:</p>
<pre><code>class Menu(QMainWindow):
    def __init__(self, parent=None):
        super(Menu, self).__init__(parent)
</code></pre>
<p>Also, from Python3 the arguments of super() can be omitted, so the second example could be:</p>
<pre><code>class About(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
</code></pre>
<p>Read carefully the <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">Built-in Functions</a>. I know it's a long page, but it contains some of the fundamentals of Python, and studying/understanding them is almost mandatory.</p>
</div>
<span class="comment-copy">your current code has several typos: change <code>def __init__(self)</code> to <code>def __init__(self):</code>, <code>if not QApplication.instance()</code> to <code>if not QApplication.instance():</code> and <code>from PyQt5.QWidgets import *</code> to <code>from PyQt5.QtWidgets import *</code> and change <code>def __init__(self):</code> to <code>def __init__(self, parent=None):</code> in About class, In the latter you use parent in <code>super().__init__(parent)</code> but you have never declared it.. After those changes your code works correctly, I do not know where you get the error you point out.</span>
<span class="comment-copy">Thank. I implemented this into my code (Python 3.5, btw), and I am receiving another type error.      <code>TypeError: QMainWindow(parent: QWidget = None, flags:      Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags()): argument 1      has unexpected type 'sip.wrappertype'</code></span>
<span class="comment-copy">I'd need to know the arguments you're using for <b>init</b>...</span>
