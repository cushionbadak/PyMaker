<div class="post-text" itemprop="text">
<p>I want to set my random seed "creatively". That is something like <code>np.random.seed(42)</code> and people who read "The Hitchhiker's Guide to the Galaxy" will get the joke.</p>
<p>However I want to be able to start the random seed with a string, e.g. a citation.</p>
<p>That is something like <code>np.random.seed(str_to_int("I like cake"))</code>, for this I need a function, that attributes integers to strings.</p>
<p>I'm willing to allow only letters (if necessarily lowercase letters) in my strings, if this makes the task easier. The function doesn't necessarily be random, but something else than the constant 0 function would be nice. </p>
</div>
<div class="post-text" itemprop="text">
<p>As it turns out, in Python 3 at least, the <a href="https://docs.python.org/3/library/random.html#random.seed" rel="nofollow noreferrer"><code>seed</code> function can be seeded from a string</a>.</p>
<p>In Python 2, you can take a <a href="https://docs.python.org/2/library/binascii.html#binascii.crc32" rel="nofollow noreferrer">CRC of a string</a>, then <a href="https://docs.python.org/2/library/random.html#random.seed" rel="nofollow noreferrer">use this as a seed</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://docs.python.org/3/library/functions.html#hash" rel="nofollow noreferrer">hash()</a> function to convert a string to an integer:</p>
<pre><code>print(hash("tata"))
</code></pre>
<p>Output: </p>
<pre><code>2314062222093390636
</code></pre>
<p>This is an integer that can be used to seed with an int. </p>
<p>As The UNIX Man <a href="https://stackoverflow.com/a/52325598/7505395">pointed out</a>, <code>random.seed(..)</code> can take a <code>str</code> directly.</p>
<hr/>
<p>From comments by @The Unix Man: the python hash uses randomization, different runs of the same program lead to different hashes: more on it to be read at</p>
<p><a href="https://docs.python.org/3.3/using/cmdline.html" rel="nofollow noreferrer">https://docs.python.org/3.3/using/cmdline.html</a></p>
<p>and param -R (wich is kept for compatibility - python 3.3+ has randomization enabled by default).</p>
<hr/>
<p>Bottom line: </p>
<p>dont use hash() for different runs of the same program, its salted - and will lead to different hashes between runs.</p>
</div>
<span class="comment-copy">Do you want a function that takes a random string and turns into a unique integer?</span>
<span class="comment-copy">Yes, it must be deterministic, as I want other people to be able to run the same program with same outcome.</span>
<span class="comment-copy">You can try <code>int.from_bytes(str.encode())</code> as a different approach from the answers.</span>
<span class="comment-copy">Exactly. You see, when the majority of voters makes the wrong decision, then such questions show up on the "Help and improvement" queue for editing by <i>others</i>. Who are supposed to fix the question by editing it. Which isn't possible here. Therefore, (as far too often) the majority vote was wrong. You go "requires editing" when you think "<b>I</b> could fix this question and make it answerable by editing it, but i dont want to do that right now". Otherwise, better skip or look for valid close reason (most entries on triage should in fact be closed).</span>
<span class="comment-copy">Beyond that: I appreciate the kind and quick comeback!</span>
<span class="comment-copy">now thats even better then using hash()</span>
<span class="comment-copy">It's also deterministic, since it doesn't depend on the runtime randomizing the hash which it can do, and only depends on the string itself.</span>
<span class="comment-copy">Is this method deterministic? That is when somebody else will run it later, will the hash function give the same result?</span>
<span class="comment-copy">Other than <code>hash(-1) == hash(-2) # True</code> it is.</span>
<span class="comment-copy">The python <code>hash</code> for objects isn't guaranteed to use the same value for each object. Specifically, from 3.3 onward it "generates the __hash__() values of str, bytes and datetime are “salted” with an unpredictable random value" (<a href="https://docs.python.org/3.3/using/cmdline.html" rel="nofollow noreferrer">docs.python.org/3.3/using/cmdline.html</a>). This is to help mitigate <a href="http://ocert.org/advisories/ocert-2011-003.html" rel="nofollow noreferrer">ocert.org/advisories/ocert-2011-003.html</a></span>
<span class="comment-copy">@TheUNIXMan wow - so the only option to have the hash produce the same values would be to specify <a href="https://docs.python.org/3.3/using/cmdline.html#envvar-PYTHONHASHSEED" rel="nofollow noreferrer">docs.python.org/3.3/using/cmdline.html#envvar-PYTHONHASHSEED</a> as envc´var.thanks for the enlightment.</span>
<span class="comment-copy">The <code>hash</code> value is really only an optimization for finding out if two values are the same "object". It's used by <code>is</code>, mainly, and shouldn't really be used for much else. It's much better to define the rich comparators for any custom values anyway, and if you need a real hash, use the secrets module or the crypto hashes.</span>
