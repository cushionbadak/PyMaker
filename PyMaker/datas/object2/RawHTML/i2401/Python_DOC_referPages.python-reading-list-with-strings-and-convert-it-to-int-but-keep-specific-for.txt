<div class="post-text" itemprop="text">
<p>I have a file full of strings which i read into a list. Now I'd like to find a specific line (for example the first line below) by looking for .../002/... and add to these 002 +5 to give me /007/, in order to find my next line containing /007/.</p>
<p>The file looks like this</p>
<pre><code>https://ladsweb.modaps.eosdis.nasa.gov/archive/allData/6/MYD021KM/2018/002/MYD021KM.A2018002.1345.006.2018003152137.hdf
https://ladsweb.modaps.eosdis.nasa.gov/archive/allData/6/MYD021KM/2018/004/MYD021KM.A2018004.1345.006.2018005220045.hdf
</code></pre>
<p>with this i could identify for example the first line:</p>
<pre><code>match = re.findall("/(\d{3})/", data_time_filtered[i])
</code></pre>
<p>The problem now is: how do I convert the string to integers but keeping the format 00X? Is this Ansatz correct?:</p>
<pre><code>match_conv = ["{WHAT's in HERE?}".format(int(i)) for i in match]
</code></pre>
<p>EDIT according to suggested answers below:</p>
<p>So apparently there's no way to directly read the numbers in the string and keep them as they are?</p>
<p>adding 0s to the number with zfill and other suggested functions makes it more complicated as /00x/ should remain max 3 digits (as they represent days of year). So i was looking for an efficient way to keep the numbers from the string as they are and make them "math-able".</p>
</div>
<div class="post-text" itemprop="text">
<p>We can first define a function that adds a integer to a string and returns a string, padded with zeros to keep the same length:</p>
<pre><code>def add_to_string(s, n):
    total = int(s)+n
    return '{:0{}}'.format(total, len(s))

add_to_string('003', 2)
#'005'
add_to_string('00030', 12 )
#'00042
</code></pre>
<p>We can then use <code>re.sub</code> with a replacement function. We use the regex <code>r"(?&lt;=/)\d{3}(?=/)"</code> that matches a group of 3 digits, preceded and followed by <code>/</code>, without including them in the match.</p>
<p>The replacement function takes a match as parameter, and returns a string.You could hardcode it, like this:</p>
<pre><code>import re

def add_5_and_replace(match):
    return add_to_string(match.group(0), 5)

url = 'https://nasa.gov/archive/allData/6/MYD021KM/2018/002/MYD021KM.hdf'

new = re.sub(r"(?&lt;=/)\d{3}(?=/)", add_5_and_replace, url)
print(new)
# https://nasa.gov/archive/allData/6/MYD021KM/2018/007/MYD021KM.hdf
</code></pre>
<p>But it could be better to pass the value to add. Either use a lambda:</p>
<pre><code>def add_and_replace(match, n=1):
    return add_to_string(match.group(0), n)

url = 'https://nasa.gov/archive/allData/6/MYD021KM/2018/002/MYD021KM.hdf'

new = re.sub(r"(?&lt;=/)\d{3}(?=/)", lambda m: add_and_replace(m, n=5), url)
</code></pre>
<p>Or a partial function. A complete solution could then be:</p>
<pre><code>import re
from functools import partial

def add_to_string(s, n):
    total = int(s)+n
    return '{:0{}}'.format(total, len(s))

def add_and_replace(match, n=1):
    return add_to_string(match.group(0), n)

url = 'https://nasa.gov/archive/allData/6/MYD021KM/2018/002/MYD021KM.hdf'

new = re.sub(r"(?&lt;=/)\d{3}(?=/)", partial(add_and_replace, n=3), url)
print(new)

# https://nasa.gov/archive/allData/6/MYD021KM/2018/005/MYD021KM.hdf
</code></pre>
<p>If you only want to add the default value 1 to your number, you can simply write</p>
<pre><code>new = re.sub(r"(?&lt;=/)\d{3}(?=/)", add_and_replace, url)
print(new)

# https://nasa.gov/archive/allData/6/MYD021KM/2018/003/MYD021KM.hdf
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Read about <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="nofollow noreferrer">mini format language here</a>:</p>
<pre><code>c = "{:03}".format(25) # format a number to 3 digits, fill with 0
print(c)
</code></pre>
<p>Output:</p>
<pre><code>025
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can't get <code>int</code> to be <code>001</code>, <code>002</code>. They can only be <code>1</code>, <code>2</code>.</p>
<p>You can do similar by using string.</p>
<pre><code>&gt;&gt;&gt; "3".zfill(3)
'003'
&gt;&gt;&gt; "33".zfill(3)
'000ss'
&gt;&gt;&gt; "33".rjust(3, '0')
'033'
&gt;&gt;&gt; int('033')
33

&gt;&gt;&gt; a = 3
&gt;&gt;&gt; a.zfill(3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'int' object has no attribute 'zfill'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Or you <code>rjust</code> and <code>ljust</code>:</p>
<pre><code>&gt;&gt;&gt; '2'.ljust(3,'0')
'200'
&gt;&gt;&gt; '2'.rjust(3,'0')
'002'
&gt;&gt;&gt; 
</code></pre>
<p>Or:</p>
<pre><code>&gt;&gt;&gt; '{0:03d}'.format(2)
'002'
</code></pre>
<p>Or:</p>
<pre><code>&gt;&gt;&gt; format(2, '03')
'002'
</code></pre>
<p>Or:</p>
<pre><code>&gt;&gt;&gt; "%03d" % 2
'002'
</code></pre>
</div>
<span class="comment-copy">can you try this --&gt;  ["{WHAT's in HERE?}".format(int(i)) before for loop and then you can try to iterate</span>
<span class="comment-copy">An <code>int</code> does not have a format.</span>
<span class="comment-copy">it's a very neat idea with those two functions :) How could I use add_5.. and add_to_string as an input? So, add 5 to the match and use this output to look for a string containing the new number in the file... eventually adding the newly found, whole string to a new list. ---  re.search maybe? or use it as an input for my match function above?</span>
<span class="comment-copy">You can get the string containing the value using the same regex, and add whatever you want, to get the new number as a string. Something like <code>old = re.findall(r"(?&lt;=/)\d{3}(?=/)", url)[0] ; new = add_to_string(old, 5)</code></span>
