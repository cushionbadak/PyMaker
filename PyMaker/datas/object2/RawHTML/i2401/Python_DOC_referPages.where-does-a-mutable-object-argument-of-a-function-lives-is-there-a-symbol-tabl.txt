<div class="post-text" itemprop="text">
<p>Going through the <a href="https://docs.python.org/3/tutorial/controlflow.html#default-argument-values" rel="nofollow noreferrer">python tutorial, in section 4.7.1</a>, a mutable default argument is stored somewhere but I can't seem to find it using <code>dir()</code>, <code>globals()</code>, <code>locals()</code> or <code>f.__dict__</code>. I'm referring to this code:</p>
<pre><code>def f(a, L=[]):
    L.append(a)
    return L
</code></pre>
<p>behaves as:</p>
<pre class="lang-none prettyprint-override"><code>&gt;&gt;&gt; print(f(1))
[1]
&gt;&gt;&gt; print(f(2))
[1, 2]
&gt;&gt;&gt; print(f(3))
[1, 2, 3]
</code></pre>
<p>I would expect to see this in the namespace of the function, say when I do <code>dir(f)</code> but it is not there.</p>
<p>I had a look at <a href="https://stackoverflow.com/questions/9085450/symbol-table-in-python#9085562">this</a> but this is way more than I'm probably looking for.</p>
</div>
<div class="post-text" itemprop="text">
<p>As per the <a href="https://docs.python.org/3/reference/datamodel.html" rel="nofollow noreferrer">Python Data Model</a>:</p>
<blockquote>
<p><code>__defaults__</code>  A tuple containing default argument values for those arguments that have defaults, or None if no arguments have a default value</p>
</blockquote>
<pre><code>&gt;&gt;&gt; def foo(a=[]):
...    a.append(1)
...
... foo()
... foo.__defaults__
([1],)
</code></pre>
<p>There is also <code>__kwdefaults__</code> for keyword-only arguments.</p>
<pre><code>&gt;&gt;&gt; def foo(a=1, *, b=2):
...     pass
...
... foo.__defaults__, foo.__kwdefaults__
((1,), {'b': 2})
</code></pre>
<hr/>
<p>Note that things in Python are not necessarily stored anywhere <em>accessible</em>. For example, the reference count of an object is not available as an attribute. It only exists in the C layer of the CPython <em>implementation</em> and requires <a href="https://docs.python.org/3/library/sys.html#sys.getrefcount" rel="nofollow noreferrer">builtin magic</a> to access.</p>
<p>In fact, <code>__defaults__</code> is not a "real" attribute either. It is a builtin property fetching the defaults from wherever the implementation stores them.</p>
<pre><code># python3
&gt;&gt;&gt; type(foo).__defaults__
&lt;attribute '__defaults__' of 'function' objects&gt;
# pypy3
&gt;&gt;&gt;&gt; type(foo).__defaults__
&lt;getset_descriptor object at 0x00000001110adc98&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's in <code>f.__defaults__</code>:</p>
<pre><code>&gt;&gt;&gt; def f(a, L=[]):
...     L.append(a)
...     return L
...
&gt;&gt;&gt; f.__defaults__
([],)
</code></pre>
<p>You didn't find <code>__defaults__</code> in <code>__dict__</code> because it's not stored in the <code>__dict__</code>; it's stored in a <a href="https://github.com/python/cpython/blob/v3.7.0/Include/funcobject.h#L25" rel="nofollow noreferrer">dedicated C-level struct member</a>, which is mapped to the <code>__defaults__</code> attribute by a descriptor on the function type.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're using Spyder, when you type <code>f.</code>, autocomplete options should pop up. One of them is <code>__defaults__</code>, which holds the defaults.</p>
</div>
<span class="comment-copy">Why do you want to know (because you generally shouldn't be doing this anyway)?</span>
<span class="comment-copy">... it's in the <code>f.__defaults__</code>, just saw it</span>
<span class="comment-copy">@martineau yeah, it's pure curiosity and looking to gain a bit of insight in the language internals</span>
<span class="comment-copy">Take note that <code>f.__defaults__</code> is only where defaults can be <i>accessed</i>. Various python implementations <i>store</i> function defaults in optimised data structures.</span>
<span class="comment-copy">Or <code>__kwdefaults__</code> if it's kw-only.</span>
<span class="comment-copy">yup, thanks a lot for pointing to the source code!</span>
