<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/4514751/pipe-subprocess-standard-output-to-a-variable">Pipe subprocess standard output to a variable [duplicate]</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/26399624/python-subprocess-popen-stdout-to-variable-only">Python subprocess Popen stdout to variable only</a>
<span class="question-originals-answer-count">
                    1 answer
                </span>
</li>
<li>
<a dir="ltr" href="/questions/7367550/redirect-subprocess-to-a-variable-as-a-string">Redirect subprocess to a variable as a string [duplicate]</a>
<span class="question-originals-answer-count">
                    2 answers
                </span>
</li>
</ul>
</div>
<p>I'd like to retrieve the output from a shell command </p>
<pre><code>In [7]: subprocess.Popen("yum list installed", shell=True)
Out[7]: &lt;subprocess.Popen at 0x7f47bcbf6668&gt;

In [8]: Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
Installed Packages
GeoIP.x86_64                          1.5.0-11.el7                     @anaconda
NetworkManager.x86_64  
....
</code></pre>
<p>The results are output to the console, </p>
<p>How could I hold the output to a variable saying "installed_tools"?              </p>
</div>
<div class="post-text" itemprop="text">
<p>Try setting <code>stdout</code> and/or <code>stderr</code> to <a href="https://docs.python.org/3/library/subprocess.html#subprocess.PIPE" rel="nofollow noreferrer"><code>subprocess.PIPE</code></a>.</p>
<pre><code>import subprocess as sp

proc = sp.Popen("yum list installed", shell=True, stdout=sp.PIPE, stderr=sp.PIPE)

out = proc.stdout.read().decode('utf-8')
print(out)
</code></pre>
<p>As <a href="https://stackoverflow.com/questions/52355562/hold-the-output-of-subprocess-popen-with-a-arbitrary-varible/52355592?noredirect=1#comment91663902_52355592">suggested in comments</a>, it's better to use <code>Popen.communicate()</code> in case stderr needs reading and gets blocked. (Thanks UtahJarhead)</p>
<pre><code>import subprocess as sp

cp = sp.Popen("yum list installed", shell=True, stdout=sp.PIPE, stderr=sp.PIPE).communicate()

out = cp[0].decode('utf-8')
print(out)
</code></pre>
</div>
<span class="comment-copy">Why use <code>proc.stdout.read()</code> instead of <code>proc.communicate()[0]</code>?</span>
<span class="comment-copy">@Utah Both are OK.</span>
<span class="comment-copy">@iBug, no, they are not both ok -- <code>proc.stdout.read()</code> will deadlock if stderr needs to be read first, which will happen if you have a significant volume of errors.</span>
<span class="comment-copy">Thank you two. I forgot about that point.</span>
