<div class="post-text" itemprop="text">
<p>According to <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.upload_file" rel="nofollow noreferrer">https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.upload_file</a> and <a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.upload_fileobj" rel="nofollow noreferrer">https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.upload_fileobj</a>, <code>upload_fileobj</code> may sound faster. But does anyone know specifics? Should I just upload the file, or should I open the file in binary mode to use <code>upload_fileobj</code>? In other words,</p>
<pre><code>import boto3

s3 = boto3.resource('s3')

### Version 1
s3.meta.client.upload_file('/tmp/hello.txt', 'mybucket', 'hello.txt')

### Version 2
with open('/tmp/hello.txt', 'rb') as data:
    s3.upload_fileobj(data, 'mybucket', 'hello.txt')
</code></pre>
<p>Is version 1 or version 2 better? Is there a difference?</p>
</div>
<div class="post-text" itemprop="text">
<p>The main point with <code>upload_fileobj</code> is that file object doesn't have to be stored on local disk in the first place, but may be represented as file object in RAM.</p>
<p>Python have <a href="https://docs.python.org/3/library/io.html" rel="nofollow noreferrer">standard library module</a> for that purpose.</p>
<p>The code will look like</p>
<pre><code>import io
fo = io.BytesIO(b'my data stored as file object in RAM')
s3.upload_fileobj(fo, 'mybucket', 'hello.txt')
</code></pre>
<p>In that case it will perform faster, since you don't have to read from local disk.</p>
</div>
<div class="post-text" itemprop="text">
<h1>TL;DR</h1>
<p>in terms of speed, both methods will perform roughly the same, both written in python and the bottleneck will be either disk-io (read file from disk) or network-io (write to s3).</p>
<ul>
<li>use <code>upload_file()</code> when writing code that only handles uploading files from disk.</li>
<li>use <code>upload_fileobj()</code> when you writing generic code to handle s3 upload that may be reused in future for not only file from disk usecase.</li>
</ul>
<p><br/></p>
<h1>What is fileobj anyway?</h1>
<p>there is convention in multiple places including the python standard library, that when one is using the term <code>fileobj</code> she means <a href="https://docs.python.org/3/glossary.html#term-file-object" rel="nofollow noreferrer">file-like object</a>. 
There are even some libraries exposing functions that can take file path (str) or fileobj (file-like object) as the same parameter.</p>
<p>when using file object your code is not limited to disk only, for example:</p>
<ol>
<li><p>for example you can copy data from one s3 object into another in streaming fashion (without using disk space or slowing down the process for doing read/write io to disk).</p></li>
<li><p>you can (de)compress or decrypt data on the fly when writing objects to S3</p></li>
</ol>
<p>example using python <a href="https://docs.python.org/3/library/gzip.html#gzip.open" rel="nofollow noreferrer">gzip</a> module with file-like object in generic way:</p>
<pre><code>import gzip, io

def gzip_greet_file(fileobj):
    """write gzipped hello message to a file"""
    with gzip.open(filename=fileobj, mode='wb') as fp:
        fp.write(b'hello!')

# using opened file
gzip_greet_file(open('/tmp/a.gz', 'wb'))

# using filename from disk
gzip_greet_file('/tmp/b.gz')

# using io buffer
file = io.BytesIO()
gzip_greet_file(file)
file.seek(0)
print(file.getvalue())
</code></pre>
<p><a href="https://docs.python.org/3/library/tarfile.html#tarfile.open" rel="nofollow noreferrer">tarfile</a> on the other hand has two parameters file &amp; fileobj:</p>
<pre><code>tarfile.open(name=None, mode='r', fileobj=None, bufsize=10240, **kwargs)
</code></pre>
<p><br/></p>
<h1>Example compression on-the-fly with <code>s3.upload_fileobj()</code></h1>
<pre><code>import gzip, boto3

s3 = boto3.resource('s3')


def upload_file(fileobj, bucket, key, compress=False):
    if compress:
        fileobj = gzip.GzipFile(fileobj=fileobj, mode='rb')
        key = key + '.gz'
    s3.upload_fileobj(fileobj, bucket, key)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Neither is better, because they're not comparable. While the end result is the same (an object is uploaded to S3), they source that object quite differently. One expects you to supply the path on disk of the file to upload while the other expects you to provide a file-like object.</p>
<p>If you have a file  on disk and want to upload it, then use <code>upload_file</code>. If you have a file-like object (which could ultimately be many things including an open file, a stream, a socket, a buffer, a string) then use <code>upload_fileobj</code>.</p>
<p>A 'file-like object' in this context is anything that implements the <code>read</code> method, and returns bytes.</p>
</div>
<span class="comment-copy">My use involves csv files, so since the python <code>csv</code> library does not play nicely with bytes, I guess I should just stay with <code>s3.upload_file</code> for convenience.</span>
<span class="comment-copy">the examples above can be used both with bytes &amp; str just change the mode correctly. btw with the csv module accepts file-object so either way you should open the file manually. in any case good luck with your implementation</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/50120806/how-to-write-a-csv-file-in-binary-mode" title="how to write a csv file in binary mode">stackoverflow.com/questions/50120806/â€¦</a> seems to suggest that using <code>csv</code> in <code>Python3</code> is troublesome.</span>
<span class="comment-copy">What exactly is troublesome with csv? the first answer on the thread seems to help the OP. How do you try to handle csv otherwise in python? If you got further questions regarding csv handling you might want to open another question so we can help you with it.</span>
