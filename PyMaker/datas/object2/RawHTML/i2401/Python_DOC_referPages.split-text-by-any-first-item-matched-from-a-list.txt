<div class="post-text" itemprop="text">
<p>I am looking for an elegant way to find the first match from a list of  prepositions in a text so that I can parse a text like "Add shoes behind the window", the result should be ["shoes","behind the window"]</p>
<p>It works as long as there are not multiple prepositions in the text </p>
<blockquote>
<p>my keys behind the window <strong>before</strong>:  my keys  <strong>after</strong>:  behind the
  window</p>
<p>my keys under the table in the kitchen <strong>before</strong>:  my keys under
  the table  <strong>after</strong>:  in the kitchen </p>
<p>my keys in the box under the table in the kitchen <strong>before</strong>:  my
  keys  <strong>after</strong>:  in the box under the table in the kitchen</p>
</blockquote>
<p>In the 2nd example, the result should be ["my keys","under the table in the kitchen"]</p>
<p>Whats an elegant way to find the first match of any of the words in the list?</p>
<pre><code>def get_text_after_preposition_of_place(text):
    """Returns the texts before[0] and after[1] &lt;preposition of place&gt;"""

prepositions_of_place = ["in front of","behind","in","on","under","near","next to","between","below","above","close to","beside"]
    textres = ["",""]

    for key in prepositions_of_place:
        if textres[0] == "":
            if key in text:
                textres[0] = text.split(key, 1)[0].strip()
                textres[1] = key + " " + text.split(key, 1)[1].strip()
    return textres
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can do that using <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer">re.split</a>:</p>
<pre><code>import re

def get_text_after_preposition_of_place(text):
    """Returns the texts before[0] and after[1] &lt;preposition of place&gt;"""

    prepositions_of_place = ["in front of","behind","in","on","under","near","next to","between","below","above","close to","beside"]
     preps_re = re.compile(r'\b(' + '|'.join(prepositions_of_place) + r')\b')

    split = preps_re.split(text, maxsplit=1)
    return split[0], split[1]+split[2]

print(get_text_after_preposition_of_place('The cat in the box on the table'))  
# ('The cat ', 'in the box on the table')
</code></pre>
<p>First, we create a regex that will look like <code>(in|on|under)</code>. Note the parentheses: they will allow us to capture the strings on which we split the string in order to keep them in the output.</p>
<p>Then, we split, allowing 1 split at most, and concatenate the last two parts: the preposition and the rest of the string.</p>
</div>
<span class="comment-copy">You want to add <code>\b</code> before and after the regular expression to ensure you don't match <code>in</code> and <code>on</code> in the middle of words.</span>
<span class="comment-copy">Thank you @G.Sliepen, I had forgotten about that, I edited the answer!</span>
<span class="comment-copy">Perfect, thank you. This worked for me</span>
