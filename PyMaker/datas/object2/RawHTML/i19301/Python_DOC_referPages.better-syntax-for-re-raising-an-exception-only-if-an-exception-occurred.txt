<div class="post-text" itemprop="text">
<p>I find myself doing this when I want to catch an exception, always run some specific code, then re-raise the original exception:</p>
<pre><code>try:
    error = False
    # do something that *might* raise an exception
except Exception:
    error = True
finally:
    # something I *always* want to run
    if error:
        raise
</code></pre>
<p>I am using the flag because calling <code>raise</code> without a previous exception raises a <code>TypeError</code>. Is there a more Pythonic way to do with without the flag?</p>
</div>
<div class="post-text" itemprop="text">
<p>Raise the exception in the except handler:</p>
<pre><code>try:
    # do something that *might* raise an exception
except Exception:
    raise
finally:
    # something I *always* want to run
</code></pre>
<p>The <code>finally</code> suite is <em>always</em> going to be executed wether or not you re-raised the exception.</p>
<p>From the <a href="http://docs.python.org/3/reference/compound_stmts.html#the-try-statement" rel="nofollow">documentation</a>:</p>
<blockquote>
<p>If <code>finally</code> is present, it specifies a ‘cleanup’ handler. The <code>try</code> clause is executed, including any <code>except</code> and <code>else</code> clauses. If an exception occurs in any of the clauses and is not handled, the exception is temporarily saved. The <code>finally</code> clause is executed. If there is a saved exception it is re-raised at the end of the <code>finally</code> clause.</p>
</blockquote>
<p>Note that if the <code>finally</code> suite uses a <code>break</code> or <code>return</code> statement, the saved exception <em>is</em> discarded:</p>
<blockquote>
<p>If the <code>finally</code> clause executes a return or break statement, the saved exception is discarded:</p>
<pre><code>def f():
    try:
        1/0
    finally:
        return 42

&gt;&gt;&gt; f()
42
</code></pre>
</blockquote>
<p>but if you issue a <code>break</code>, <code>continue</code> or <code>return</code> in the <code>try</code> suite, the <code>finally</code> suite is executed still:</p>
<blockquote>
<p>When a <code>return</code>, <code>break</code> or <code>continue</code> statement is executed in the <code>try</code> suite of a <code>try</code>...<code>finally</code> statement, the <code>finally</code> clause is also executed ‘on the way out.’</p>
</blockquote>
<p>Note that before Python 2.5, you could not even combine <code>except</code> and <code>finally</code> suites in the same <code>try</code> statement; see <a href="http://docs.python.org/2/whatsnew/2.5.html#pep-341-unified-try-except-finally" rel="nofollow">PEP 341: Unified try/except/finally</a>. Instead, you were expected to nest <code>try</code> statements:</p>
<pre><code>try:
    try:
        # some code that could raise an exception
    except SomeException:
        # exception handler
finally:
    # cleanup code, always executed
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>finally</code> will <em>always</em> execute, no matter what happens in the <code>try</code> or <code>except</code> block, or whether the <code>except</code> block is even present.</p>
<p>Both of these will work:</p>
<pre><code>try:
    # do something that *might* raise an exception
finally:
    # something I *always* want to run
</code></pre>
<p> </p>
<pre><code>try:
    # do something that *might* raise an exception
except Exception:
    raise
finally:
    # something I *always* want to run
</code></pre>
</div>
<span class="comment-copy">+1 and don't forget the opportunity to add useful debug info to the exception before it goes out...</span>
<span class="comment-copy">@Martijn Pieters, so the <code>finally</code> block essentially acts like another <b>outer</b> <code>try...except</code> block?</span>
<span class="comment-copy">@JaceBrowning: Yes. In the past, you could not use a <code>finally</code> if there was an <code>except</code> block and you <i>had</i> to nest them. See <a href="http://docs.python.org/2/whatsnew/2.5.html#pep-341-unified-try-except-finally" rel="nofollow noreferrer">docs.python.org/2/whatsnew/…</a></span>
