<div class="post-text" itemprop="text">
<p>I want to find mean and standard deviation of 1st, 2nd,... digits of several (Z) lists. For example, I have</p>
<pre><code>A_rank=[0.8,0.4,1.2,3.7,2.6,5.8]
B_rank=[0.1,2.8,3.7,2.6,5,3.4]
C_Rank=[1.2,3.4,0.5,0.1,2.5,6.1]
# etc (up to Z_rank )...
</code></pre>
<p>Now I want to take the mean and std of <code>*_Rank[0]</code>, the mean and std of <code>*_Rank[1]</code>, etc.<br/>
(ie: mean and std of the 1st digit from all the (A..Z)_rank lists;<br/>
the mean and std of the 2nd digit from all the (A..Z)_rank lists;<br/>
the mean and std of the 3rd digit...; etc). </p>
</div>
<div class="post-text" itemprop="text">
<p>Since Python 3.4 / <a href="http://www.python.org/dev/peps/pep-0450/" rel="noreferrer">PEP450</a> there is a <a href="http://docs.python.org/3.4/library/statistics.html" rel="noreferrer"><code>statistics module</code></a> in the standard library, which has a <a href="http://docs.python.org/3.4/library/statistics.html#statistics.stdev" rel="noreferrer">method <code>stdev</code></a> for calculating the standard deviation of iterables like yours:</p>
<pre><code>&gt;&gt;&gt; A_rank = [0.8, 0.4, 1.2, 3.7, 2.6, 5.8]
&gt;&gt;&gt; import statistics
&gt;&gt;&gt; statistics.stdev(A_rank)
2.0634114147853952
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would put <code>A_Rank</code> et al into a 2D <a href="http://www.numpy.org/" rel="noreferrer">NumPy</a> array, and then use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.mean.html" rel="noreferrer"><code>numpy.mean()</code></a> and <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html" rel="noreferrer"><code>numpy.std()</code></a> to compute the means and the standard deviations:</p>
<pre><code>In [17]: import numpy

In [18]: arr = numpy.array([A_rank, B_rank, C_rank])

In [20]: numpy.mean(arr, axis=0)
Out[20]: 
array([ 0.7       ,  2.2       ,  1.8       ,  2.13333333,  3.36666667,
        5.1       ])

In [21]: numpy.std(arr, axis=0)
Out[21]: 
array([ 0.45460606,  1.29614814,  1.37355985,  1.50628314,  1.15566239,
        1.2083046 ])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's some pure-Python code you can use to calculate the mean and standard deviation.</p>
<p>All code below is based on the <a href="https://github.com/python/cpython/blob/master/Lib/statistics.py" rel="noreferrer"><code>statistics</code></a> module in Python 3.4+.</p>
<pre><code>def mean(data):
    """Return the sample arithmetic mean of data."""
    n = len(data)
    if n &lt; 1:
        raise ValueError('mean requires at least one data point')
    return sum(data)/n # in Python 2 use sum(data)/float(n)

def _ss(data):
    """Return sum of square deviations of sequence data."""
    c = mean(data)
    ss = sum((x-c)**2 for x in data)
    return ss

def stddev(data, ddof=0):
    """Calculates the population standard deviation
    by default; specify ddof=1 to compute the sample
    standard deviation."""
    n = len(data)
    if n &lt; 2:
        raise ValueError('variance requires at least two data points')
    ss = _ss(data)
    pvar = ss/(n-ddof)
    return pvar**0.5
</code></pre>
<p>Note: for improved accuracy when summing floats, the <code>statistics</code> module uses a custom function <code>_sum</code> rather than the built-in <code>sum</code> which I've used in its place.</p>
<p>Now we have for example:</p>
<pre><code>&gt;&gt;&gt; mean([1, 2, 3])
2.0
&gt;&gt;&gt; stddev([1, 2, 3]) # population standard deviation
0.816496580927726
&gt;&gt;&gt; stddev([1, 2, 3], ddof=1) # sample standard deviation
0.1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In Python 2.7.1, you may calculate standard deviation using <code>numpy.std()</code> for:</p>
<ul>
<li><strong>Population std</strong>: Just use <code>numpy.std()</code> with no additional arguments besides to your data list.</li>
<li><strong>Sample std</strong>: You need to pass <strong>ddof</strong> (i.e. Delta Degrees of Freedom) set to 1, as in the following example: </li>
</ul>
<blockquote>
<p>numpy.std(&lt; your-list &gt;, <strong>ddof=1</strong>) </p>
<p>The divisor used in calculations is <strong>N - ddof</strong>, where N represents the number of elements. By default ddof is zero.</p>
</blockquote>
<p>It calculates sample std rather than population std.</p>
</div>
<div class="post-text" itemprop="text">
<p>In python 2.7 you can use NumPy's <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.std.html" rel="nofollow noreferrer"><code>numpy.std()</code></a> gives the <a href="https://math.stackexchange.com/questions/15098/sample-standard-deviation-vs-population-standard-deviation">population standard deviation</a>.</p>
<p>In Python 3.4 <a href="https://docs.python.org/3/library/statistics.html" rel="nofollow noreferrer"><code>statistics.stdev()</code></a> returns the sample standard deviation. The <code>pstdv()</code> function is the same as <code>numpy.std()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>pure python code:</p>
<pre><code>from math import sqrt

def stddev(lst):
    mean = float(sum(lst)) / len(lst)
    return sqrt(float(reduce(lambda x, y: x + y, map(lambda x: (x - mean) ** 2, lst))) / len(lst))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The other answers cover how to do std dev in python sufficiently, but no one explains how to do the bizarre traversal you've described.</p>
<p>I'm going to assume A-Z is the entire population. If not see <a href="https://stackoverflow.com/a/31366254/1727470">Ome</a>'s answer on how to inference from a sample.</p>
<p>So to get the standard deviation/mean of the first digit of every list you would need something like this:</p>
<pre><code>#standard deviation
numpy.std([A_rank[0], B_rank[0], C_rank[0], ..., Z_rank[0]])

#mean
numpy.mean([A_rank[0], B_rank[0], C_rank[0], ..., Z_rank[0]])
</code></pre>
<p>To shorten the code and generalize this to any nth digit use the following function I generated for you:</p>
<pre><code>def getAllNthRanks(n):
    return [A_rank[n], B_rank[n], C_rank[n], D_rank[n], E_rank[n], F_rank[n], G_rank[n], H_rank[n], I_rank[n], J_rank[n], K_rank[n], L_rank[n], M_rank[n], N_rank[n], O_rank[n], P_rank[n], Q_rank[n], R_rank[n], S_rank[n], T_rank[n], U_rank[n], V_rank[n], W_rank[n], X_rank[n], Y_rank[n], Z_rank[n]] 
</code></pre>
<p>Now you can simply get the stdd and mean of all the nth places from A-Z like this:</p>
<pre><code>#standard deviation
numpy.std(getAllNthRanks(n))

#mean
numpy.mean(getAllNthRanks(n))
</code></pre>
</div>
<span class="comment-copy">Hello, viral. Stack Overflow works best as a <b>question</b>-and-<b>answer</b> site. You ask a question, and everyone else provides answers. Your post contains only statements, no questions. Do you have a specific programming question? To put it another way, what have you tried so far, and where are you stuck?</span>
<span class="comment-copy">Why aren't these lists in a dictionary or something?</span>
<span class="comment-copy">Sorry If I did not convey question properly. I want to take mean of A_rank[0] (0.8),B_rank[0](0.1),C_rank[0](1.2),...Z_rank[0]. same for A_rank[1](0.4),B_rank[1](2.8),C_rank[1](3.4),...Z_rank[1].</span>
<span class="comment-copy">It's worth pointing out that <code>pstddev</code> should probably be used instead if your list represents the entire population (i.e. the list is not a sample of a population). <code>stddev</code> is calculated using sample variance and will overestimate the population mean.</span>
<span class="comment-copy">The functions are actually called <a href="https://docs.python.org/3.4/library/statistics.html#statistics.stdev" rel="nofollow noreferrer"><code>stdev</code></a> and <a href="https://docs.python.org/3.4/library/statistics.html#statistics.pstdev" rel="nofollow noreferrer"><code>pstdev</code></a>, not using <code>std</code> for <code>standard</code> as one would expect. I couldn't edit the post as edits need to modify at least 6 chars...</span>
<span class="comment-copy">the result of numpy.std is not correct. Given these values: 20,31,50,69,80 and put in Excel using STDEV.S(A1:A5) the result is 25,109 NOT 22,45.</span>
<span class="comment-copy">This is correct: numpy.std(arr, ddof=1)</span>
<span class="comment-copy">@JimClermonts It has nothing to do with correctness. Whether or not ddof=0 (default, interprete data as population) or ddof=1 (interprete it as samples, i.e. estimate true variance) depends on what you're doing.</span>
<span class="comment-copy">To further clarify @runDOSrun's point, the Excel function <code>STDEV.P()</code> and the Numpy function <code>std(ddof=0)</code> calculate the <i>population</i> sd, or <i>uncorrected sample</i> sd, whilst the Excel function <code>STDEV.S()</code> and Numpy function <code>std(ddof=1)</code> calculate the <i>(corrected) sample</i> sd, which equals sqrt(N/(N-1)) times the population sd, where N is the number of points. See more: <a href="https://en.m.wikipedia.org/wiki/Standard_deviation#Corrected_sample_standard_deviation" rel="nofollow noreferrer">en.m.wikipedia.org/wiki/â€¦</a></span>
<span class="comment-copy">Should it not be <code>pvar=ss/(n-1)</code> ?</span>
<span class="comment-copy">@Ranjith: if you want to calculate the <i>sample</i> variance (or sample SD) you can use <code>n-1</code>. The code above is for the population SD (so there are <code>n</code> degrees of freedom).</span>
<span class="comment-copy">Hello Alex, Could you please post function for calculating sample standard deviation? I am limited with Python2.6, so I have to relay on this function.</span>
<span class="comment-copy">@VenuS: Hello, I've edited the <code>stddev</code> function so that it can calculate both sample and population standard deviations.</span>
<span class="comment-copy">There's nothing 'pure' about that 1-liner. Yuck. Here's more pythonic version: <code>sqrt(sum((x - mean)**2 for x in lst) / len(lst))</code></span>
<span class="comment-copy">For any one interested, I generated the function using this messy one-liner: <code>str([chr(x)+'_rank[n]' for x in range(65,65+26)]).replace("'", "")</code></span>
