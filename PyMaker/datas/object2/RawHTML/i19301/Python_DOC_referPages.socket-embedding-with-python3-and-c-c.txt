<div class="post-text" itemprop="text">
<p>I have a process run on python3,it have to create a module to call c library,but in c lib it have to call socket connected from python3,and result for python3</p>
<p>[python3]---&gt;[c]---&gt;[c socket]---&gt;[python socket]-----&gt;[c function]-----&gt;[python3]</p>
<p>how to convert python type socket to c type socket ?</p>
<p>help me an example,thanks !</p>
</div>
<div class="post-text" itemprop="text">
<p>A C socket is just a file descriptor, referred to by number.</p>
<p>A Python socket is an object that wraps up a file descriptor. You can get the file descriptor number out of it with the <a href="http://docs.python.org/3/library/socket.html#socket.socket.fileno" rel="nofollow"><code>fileno</code></a> method.</p>
<p>For example:</p>
<pre><code>def call_c_code_with_socket(my_socket):
    c_library.c_func(my_socket.fileno())
</code></pre>
<p>(I'm assuming you're on POSIX here; on Windows, things are a bit more complicated, because you usually use <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms742212%28v=vs.85%29.aspx" rel="nofollow"><code>WSASocket</code></a> and friends, which deal in opaque <code>SOCKET</code> handles instead of simple integers.)</p>
<p>Going the other way is a bit trickier.</p>
<p>If you've created a socket in C, and want to use it in Python, you need the family, type, and proto values as well as the fd numberâ€”but if you have them, <a href="http://docs.python.org/3/library/socket.html#socket.fromfd" rel="nofollow"><code>fromfd</code></a> is the answer. </p>
<p>However, if you create a socket in Python, send its file descriptor to C, and get it back, you don't want to create a new socket object; you want to find the old one. You might consider creating a <code>dict</code> mapping fd numbers to <code>socket</code> objects for that case.</p>
<p>Finally, be careful not to confuse one piece of your code by doing odd things with another. If you've read half of the next protocol message into a buffer in C, Python is going to want that half-message. If you've set the socket to nonblocking mode in Python, it's still going to be non-blocking in C. And so on.</p>
</div>
