<div class="post-text" itemprop="text">
<p>How do you count the number of ones in a given integer's binary representation.</p>
<p>Say you are given a number <code>20</code>, which is <code>10100</code> in binary, so number of ones is 2.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the awesome <a href="http://docs.python.org/library/collections.html" rel="nofollow"><code>collections</code></a> module.</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; binary = bin(20)[2:]
&gt;&gt;&gt; Counter(binary)
Counter({'0': 3, '1': 2})
</code></pre>
<p>Or you can use the built-in function <code>count()</code>:</p>
<pre><code>&gt;&gt;&gt; binary = bin(20)[2:]
&gt;&gt;&gt; binary.count('1')
2
</code></pre>
<p>Or even:</p>
<pre><code>&gt;&gt;&gt; sum(1 for i in bin(20)[2:] if i == '1')
2
</code></pre>
<p>But that last solution is slower than using <code>count()</code></p>
</div>
<div class="post-text" itemprop="text">
<p>What you're looking for is called the <a href="http://en.wikipedia.org/wiki/Hamming_weight">Hamming weight</a>, and there are a lot of algorithms to do it. Here's another straightforward one:</p>
<pre><code>def ones(n):
    w = 0
    while (n):
        w += 1
        n &amp;= n - 1
    return w
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; num = 20
&gt;&gt;&gt; bin(num)[2:].count('1')
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The usual way to make this blinding fast is to use lookup tables:</p>
<pre><code>table = [bin(i)[2:].count('1') for i in range(256)]

def pop_count(n):
   cnt = 0
   while n &gt; 0:
     cnt += table[n &amp; 256]
     n &gt;&gt;= 8
   return cnt
</code></pre>
<p>In Python, any solution using <code>bin</code> and <code>list.count</code> will be faster, but this is nice if you want to write it in assembler.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/3/library/stdtypes.html#str.count" rel="nofollow"><em>str.count</em></a> method and <a href="http://docs.python.org/3/library/functions.html#bin" rel="nofollow"><em>bin</em></a> function make short work of this little challenge:</p>
<pre><code>&gt;&gt;&gt; def ones(x):
        "Count the number of ones in an integer's binary representation"
        return bin(x).count('1')

&gt;&gt;&gt; ones(20)
2
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the input number is 'number'</p>
<pre><code>number =20
len(bin(number)[2:].replace('0',''))
</code></pre>
<p>Another solution is </p>
<pre><code>from collections import Counter

Counter(list(bin(number))[2:])['1']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I am a new coder and I found this one logic simple. Might be easier for newbies to understand.</p>
<pre><code>def onesInDecimal(n):
  count = 0
  while(n!=0):
    if (n%2!=0):
        count = count+1
        n = n-1
        n = n/2
    else:
        n = n/2
  return count
</code></pre>
</div>
<span class="comment-copy">There is no reason to use <code>Counter</code> for this</span>
<span class="comment-copy">Even the guy who made <code>Counter</code> didn't use it to solve this ;)</span>
<span class="comment-copy">@jamylak It's still a solution :)</span>
<span class="comment-copy">Yeah but simple is better than complex! Also I wasn't joking before, Raymond Hettinger who contributed the collections module answered this question</span>
<span class="comment-copy">@jamylak Oh wow :o</span>
<span class="comment-copy">What does &amp;= do?</span>
<span class="comment-copy"><code>a &amp;= b</code> is equivalent to <code>a = a &amp; (b)</code>. <code>&amp;</code> is the <a href="http://docs.python.org/2/reference/expressions.html#binary-bitwise-operations" rel="nofollow noreferrer">bitwise AND operator</a>.</span>
<span class="comment-copy">If you are using assembly, <code>n &amp; 255</code> will be dramatically faster than <code>n % 256</code>.</span>
<span class="comment-copy">Indeed, updated the code accordingly. Thanks.</span>
<span class="comment-copy">Your code has a typo, you wrote <code>n &amp; 256</code> instead of <code>n &amp; 255</code>.</span>
<span class="comment-copy">Your first solution is like swatting flies with a sledgehammer. You can just use <code>str.count('1')</code>. Also no need to convert to a list if you use Counter</span>
<span class="comment-copy">@jamylak :), thanks</span>
