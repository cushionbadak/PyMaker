<div class="post-text" itemprop="text">
<p>I'm very new to programming and trying to teach myself. I'm currently trying to learn how to build objects from classes, which I think I understand. My current task is to add the object into a list and print that list. Ultimately I'm trying to build a program that creates an object and lists each object that has been created in a numbered list, i.e.:</p>
<pre><code>1 - tomato, red
2 - corn, yellow
etc...
</code></pre>
<p>So to begin, I'm just trying to build the basic part of this.
Here is what I made:</p>
<pre><code># Builds objects on instantiation for a vegetable and color
class Veg:
    def __init__(self, name, color):
        self.name = name
        self.color = color
        print('You have created a new', self.color, self.name, end='.\n')

# Function to create a new vegetable and store it in a list
def createVeg():
    name = input('What is the name of the Vegetable? ')
    color = input('What color is the vegetable? ')
    Veg(name, color)
    vegList.append(Veg)
    return

# Initialize variables
vegList = []
choice = 'y'

# Main loop
while choice == 'y':
    print('Your basket contains:\n', vegList)
    choice = input('Would you like to add a new vegetable? (y / n) ')
    if choice == 'y':
        createVeg()
    if choice == 'n':
        break

print('Goodbye!')
</code></pre>
<p>When I run this, I get the following:</p>
<pre><code>Your basket contains:
 []
Would you like to add a new vegetable? (y / n) y
What is the name of the Vegetable? tomato
What color is the vegetable? red
You have created a new red tomato.
Your basket contains:
 [&lt;class '__main__.Veg'&gt;]
Would you like to add a new vegetable? (y / n) y
What is the name of the Vegetable? corn
What color is the vegetable? yellow
You have created a new yellow corn.
Your basket contains:
 [&lt;class '__main__.Veg'&gt;, &lt;class '__main__.Veg'&gt;]
Would you like to add a new vegetable? (y / n) n
Goodbye!
</code></pre>
<p>So, from what I can tell, everything works except for printing the list, which I can not figure out. It seems to be appending the list propery, but not displaying the object. I've also tried a 'for' loop, but got the same result.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is in the lines</p>
<pre><code>Veg(name, color)
vegList.append(Veg)
</code></pre>
<p>What you're doing here is creating a new Veg but not assinging anything to it. Then you're appending Veg <em>the type</em> to a list. Also, you need to tell Python how to print you <code>Veg</code> objects in a human readable way by adding the <code>__str__</code> method to your class. Lastly, if you print a list directly (<code>print vegList</code>) you'll get the machine readable representation of the contents of the list, which isn't what you want. Iterating over the list's elements and printing them directly will work.</p>
<p>Here's a working version with the requisite changes:</p>
<pre><code># Builds objects on instantiation for a vegetable and color
class Veg:
    def __init__(self, name, color):
        self.name = name
        self.color = color
        print('You have created a new', self.color, self.name, end='.\n')

    def __str__(self):
        return 'One {} {}'.format(self.color, self.name)

# Function to create a new vegetable and store it in a list
def createVeg():
    name = input('What is the name of the Vegetable? ')
    color = input('What color is the vegetable? ')

    vegList.append(Veg(name, color))
    return

# Initialize variables
vegList = []
choice = 'y'

# Main loop
while choice == 'y':
    print('Your basket contains:\n')
    for veg in vegList:
        print(veg)
    choice = input('Would you like to add a new vegetable? (y / n) ')
    if choice == 'y':
        createVeg()
    if choice == 'n':
        break

print('Goodbye!')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It is all working as designed. The <code>&lt;class '__main__.Veg'&gt;</code> string is the <em>representation</em> of your <code>Veg</code> class instances.</p>
<p>You can customize that representation by giving your class a <a href="http://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="nofollow"><code>__repr__</code> method</a>:</p>
<pre><code>class Veg:
    # ....

    def __repr__(self):
        return 'Veg({!r}, {!r})'.format(self.name, self.color)
</code></pre>
<p>All the <code>__repr__</code> function has to do is return a suitable string.</p>
<p>With the above example <code>__repr__</code> function, your list would instead look like:</p>
<pre><code>[Veg('tomato', 'red'), Veg('corn', 'yellow')]
</code></pre>
<p>You do need to make sure you actually <em>append</em> your new instance. Instead of:</p>
<pre><code>Veg(name, color)
vegList.append(Veg)
</code></pre>
<p>do this:</p>
<pre><code>newveg = Veg(name, color)
vegList.append(newveg)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your issue is here:</p>
<pre><code>def createVeg():
    name = input('What is the name of the Vegetable? ')
    color = input('What color is the vegetable? ')
    Veg(name, color) # 1
    vegList.append(Veg) # 2
    return
</code></pre>
<p>The line I've commented as #1 creates a new instance of a veg object. However, it doesn't do anything with it. It doesn't store it anywhere, or name it, like if you had written <code>a = Veg(name, color)</code>. Basically, it creates the object, then forgets about it.</p>
<p>The line I've commented as #2 then appends the Veg CLASS to the list, rather than an instance of the class. This would be like adding the concept of an integer to a list, rather than adding an actual integer of 5.</p>
<p>Try replacing these two lines with...</p>
<pre><code>v = Veg(name, color)
vegList.append(v)
</code></pre>
<p>Once you do this, you're still going to want to follow Martijn Pieters' answer to get the object to print correctly.</p>
</div>
<span class="comment-copy">Vegetable shopper RPG - love it!</span>
<span class="comment-copy">I'll have to research this method to understand it. I haven't seen this yet in the book. However, when I plug it in, I get the same result as before.</span>
<span class="comment-copy">Make sure it is part of your <code>Veg</code> class. If you are still seeing <code>&lt;class '__main__.Veg'&gt;</code> in your results, you didn't add it in the correct location and/or did not reload your code.</span>
<span class="comment-copy">He shouldn't be using <code>__repr__</code> for the human readable version of the class; <code>__str__</code> is reserved for that. <code>__repr__</code> is reserved for the <b>machine readable</b> version of the class. See <a href="http://docs.python.org/3/reference/datamodel.html?highlight=__repr__#object.__repr__" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a></span>
<span class="comment-copy">@jknupp: But when printing the list, the <code>repr()</code> is used automatically. Note that my example creates a reasonable machine representation that could be used to recreate the <code>Veg</code> object.</span>
<span class="comment-copy">@MartijnPieters Right, which is why he shouldn't be printing the list when what he really wants is to print its contents.</span>
