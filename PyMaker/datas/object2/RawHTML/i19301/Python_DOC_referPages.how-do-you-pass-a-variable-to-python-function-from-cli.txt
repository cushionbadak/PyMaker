<div class="post-text" itemprop="text">
<p>Using the CLI: how to I pass a parameter to TOC.action function 
of <code>[1, 'happy']</code> or <code>[2, 'sad']</code>
I tried:  </p>
<blockquote>
<p>python TOC.action.py [1, "happy"] </p>
<p>python TOC.py [1, "happy"]</p>
</blockquote>
<p>TOC.py</p>
<pre><code>#!/usr/bin/python
import sys

def one(var):
    print var

def two(var):
    print var

def main(do):
    print "now what"
    print do[0]
    if do[0]==1: one(do[1])
    if do[0]==2: two(do[1]) 

if __name__ == '__main__':
    main(argv)
    print 'Argument List:', str(sys.argv)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to quote the arguments in the shell:</p>
<pre><code>$ python TOC.py '[1, "happy"]' "[2, 'sad']"
</code></pre>
<p>If you want to turn the arguments into python data structures, use <a href="http://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>ast.literal_eval</code></a>:</p>
<pre><code>for arg in sys.argv[1:]:
    print ast.literal_eval(arg)
</code></pre>
<p>Once this gets too complicated, use the <a href="http://docs.python.org/3/library/ast.html#ast.literal_eval" rel="nofollow"><code>argparse</code></a> module to handle reading the arguments.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you're going to do anything reasonably complex with command-line arguments, then <code>argparse</code> really is worth using. This is especially true if you're going to use this tool with any frequency.</p>
<p>That said, there are also tools that are designed to make giving CLI access to python methods easier, including <a href="http://docs.fabfile.org/en/1.6/" rel="nofollow">fabric</a>, <a href="https://github.com/seomoz/shovel" rel="nofollow">shovel</a> (full disclosure, the company I work for wrote it) and others.</p>
</div>
<span class="comment-copy">Used $ python TOC.py '[1, "happy"]', StackTrace: action(argv) NameError: name 'argv' is not defined</span>
