<div class="post-text" itemprop="text">
<p>I have the following piece of code that handles the image upload for me in a Django Project that I work on:</p>
<pre><code>def upload_handler(source):
    fd, filepath = tempfile.mkstemp(prefix=source.name, dir=MEDIA_ROOT)
    with open(filepath, 'wb') as dest:
        shutil.copyfileobj(source, dest)
        return MEDIA_URL + basename(dest.name)
</code></pre>
<p>All is working fine with the upload part but mkstemp is saving my image with an additional 6 random suffix after the extension (Ex. test.png -&gt; test.pngbFVeyh). Even if I pass the suffix in the second code line it appends it but also with the additional 6 random characters. Other odd thing that is happening is that in the upload folder (MEDIA_ROOT in my case) it is created alongside another empty plain text document type file with the same name as the picture (Ex. test.pngbFVeyh). I've read the documentation regarding mkstemp but I didn't find any alternative solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>The name is random-generated because it's the purpose of <code>tempfile.mkstemp</code>. The file with that name is created because it's how <code>tempfile.mkstemp</code> works. It is also opened and the file descriptor is returned to you in <code>fd</code> which you ignore. You don't seem to understand how <code>tempfile.mkstemp</code> should be used and you probably need to use something else instead.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def upload_handler(source):
    # this is creating a temp file and returning an os handle and name
    fd, filepath = tempfile.mkstemp(prefix=source.name, dir=MEDIA_ROOT)
    # this next line just clears the file you just made (which is already empty)
    with open(filepath, 'wb') as dest: 
        # this is a strange way to get a fobj to copy :)
        shutil.copyfileobj(source, dest)
        return MEDIA_URL + basename(dest.name)
</code></pre>
<p>prefix and suffix do just that, so if you don't want your filename to begin or end with the temporary characters, you need to use both prefix <strong>and</strong> suffix. For example, </p>
<pre><code>name = os.path.basename(source.name)
prefix, suffix = os.path.splitext(name)
_, filepath = tempfile.mkstemp(prefix=prefix, suffix=suffix, dir=MEDIA_ROOT)
</code></pre>
<p>but it would be better if you use <a href="https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile" rel="nofollow noreferrer"><code>tempfile.NamedTemporaryFile</code></a>, as then the file-like object is returned (so you don't have to create fobj from the filename and the temp file is deleted by default when done). </p>
<pre><code>fobj, _ = tempfile.NamedTemporaryFile(prefix=prefix, suffix=suffix, dir=MEDIA_ROOT)
shutil.copyfileobj(source, fobj)
</code></pre>
</div>
<span class="comment-copy">I've read in the documentation that mkstemp is deleting the temporary file, maybe I am mistaken here...</span>
<span class="comment-copy">@MariusNV the documentation explicitly says "Caller is responsible for deleting the file when done with it.".</span>
<span class="comment-copy">Ok this part I get it now, I have to take care of deleting the temporary file right? But how remains with the suffix issue part?</span>
<span class="comment-copy">@MariusNV it's not an issue, it's the purpose of <code>tempfile.mkstemp</code>: "to create and return a unique temporary file".</span>
<span class="comment-copy">Thank you for your guidance and regarding fd which I ignore that I have to do with it, it's just an integer. Sorry for sounding like a noob... I am a begginer with Python &amp; Django and I really want to understand how it works</span>
