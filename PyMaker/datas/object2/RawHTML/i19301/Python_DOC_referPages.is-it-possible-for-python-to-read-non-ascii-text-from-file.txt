<div class="post-text" itemprop="text">
<p>I have a .txt file that is UTF-8 formatted and have problems to read it into Python. I have a large number of files and a conversion would be cumbersome. </p>
<p>So if I read the file in via</p>
<pre><code>for line in file_obj:
    ...
</code></pre>
<p>I get the following error:</p>
<pre><code>  File "/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/encodings/ascii.py", line 26, in decode
    return codecs.ascii_decode(input, self.errors)[0]
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 291: ordinal not in range(128)
</code></pre>
<p>I guess <code>x.decode("utf-8")</code> wouldn't work since the error occurs before the line is even read in.</p>
</div>
<div class="post-text" itemprop="text">
<p>There are two choices.</p>
<ol>
<li>Specify the encoding when opening the file, instead of using the default.</li>
<li>Open the file in binary mode, and explicitly <code>decode</code> from <code>bytes</code> to <code>str</code>.</li>
</ol>
<p>The first is obviously the simpler one. You don't show how you're opening the file, but assuming your code looks like this:</p>
<pre><code>with open(path) as file_obj:
    for line in file_obj:
</code></pre>
<p>Do this:</p>
<pre><code>with open(path, encoding='utf-8') as file_obj:
    for line in file_obj:
</code></pre>
<p>That's it.</p>
<p>As <a href="http://docs.python.org/3/library/functions.html#open" rel="nofollow">the docs</a> explain, if you don't specify an encoding in text mode:</p>
<blockquote>
<p>The default encoding is platform dependent (whatever <code>locale.getpreferredencoding()</code> returns), but any encoding supported by Python can be used.</p>
</blockquote>
<p>In some cases (e.g., any OS X, or linux with an appropriate configuration), <code>locale.getpreferredencoding()</code> will always be 'UTF-8'. But it'll obviously never be "automatically whatever's right for any file I might open". So if you know a file is UTF-8, you should specify it explicitly.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2 and 3 solution, use codecs:</p>
<pre><code>import codecs
file_obj = codecs.open('ur file', "r", "utf-8")

for line in file_obj:
    ...
</code></pre>
<p>Otherwise -- Python 3 -- use abarnert's <a href="https://stackoverflow.com/a/15512760/298607">solution</a></p>
</div>
<span class="comment-copy">You can use python 3+ which should work on unicode natively.</span>
<span class="comment-copy">@Serdalis: He <i>is</i> using Python 3. Look at the traceback.</span>
<span class="comment-copy">@abarnert missed that, sorry.</span>
<span class="comment-copy">Works fine, thanks!</span>
<span class="comment-copy">Why use <code>codecs</code> when just plain old <code>open</code> does the exact same thing?</span>
<span class="comment-copy">@abarnert: Works on both Py 2 and Py 3 I suppose</span>
<span class="comment-copy">Actually, it's not <i>exactly</i> the same. <code>codecs</code> does its newline stuff <i>before</i> decoding, while <code>io.TextIOWrapper</code> (which is what <code>open</code> returns) does it after. So, universal newlines basically don't work right with <code>codecs.open</code>. Which is at least part of the reason <code>codecs.open</code> hasn't been deprecated—because there's code out there that depends on broken universal newlines. (Still, the idea to deprecate it comes up at least once/year…)</span>
