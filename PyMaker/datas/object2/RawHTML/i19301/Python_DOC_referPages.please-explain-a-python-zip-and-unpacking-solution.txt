<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2511300/why-does-x-y-zipzipa-b-work-in-python">Why does x,y = zip(*zip(a,b)) work in Python?</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>A Python 3 learner here:</p>
<p>The <a href="https://stackoverflow.com/questions/10479319/possible-to-return-two-lists-from-a-list-comprehension">question</a> had the following accepted answer:</p>
<pre><code>rr,tt = zip(*[(i*10, i*12) for i in xrange(4)])
</code></pre>
<p>which returns two tuples. I'd be grateful if someone could break down the answer and explain what it is doing with Python 3 in mind ( I know the <code>range()</code> returns an iterator in Python 3). I understand list comprehensions but I'm confused about unpacking (I thought you could only used a starred expression as part of an assignment target).</p>
<p>I'm equally confused by the code below. I understand the outcome and zipping (or think I do) but again the asterisk expression has got me beat.</p>
<pre><code>x2, y2 = zip(*zip(x, y))
</code></pre>
<p>from <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">this</a>:</p>
<pre><code>&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; y = [4, 5, 6]
&gt;&gt;&gt; zipped = zip(x, y)
&gt;&gt;&gt; list(zipped)
[(1, 4), (2, 5), (3, 6)]
&gt;&gt;&gt; x2, y2 = zip(*zip(x, y))
&gt;&gt;&gt; x == list(x2) and y == list(y2)
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>*expression</code> applies <a href="http://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" rel="nofollow">argument unpacking</a> to the function call. It takes the <code>expression</code> part, which <em>has</em> to resolve to a sequence, and makes each element in that sequence a separate parameter to the function.</p>
<p>So, <code>zip(x, y)</code> returns a sequence, and each element in that sequence is made an argument to the <em>outer</em> <code>zip()</code> function.</p>
<p>For <code>zip(*[(i*10, i*12) for i in xrange(4)])</code> it is perhaps a little clearer; there are several elements here:</p>
<ul>
<li><code>[(i*10, i*12) for i in xrange(4)]</code> <em>(should be <code>range()</code> in python 3)</em> creates a list with 4 tuples, <code>[(0, 0), (10, 12), (20, 24), (30, 36)]</code></li>
<li>The <code>zip(*...)</code> part then takes each of those 4 tuples and passes those as arguments to the <code>zip()</code> function.</li>
<li><code>zip()</code> takes each tuple and pairs their elements; two elements per tuple means the result is 2 lists of 4 values each.</li>
</ul>
<p>Because the <code>zip()</code> function return two sequences, they can be assigned to the two variables.</p>
<p>I would have found the following a far more readable version of the same expression:</p>
<pre><code>rr, tt = tuple(range(0, 40, 10)), tuple(range(0, 48, 12))
</code></pre>
</div>
<span class="comment-copy">Thank you very much. Your answer is very clear.</span>
