<div class="post-text" itemprop="text">
<p>I wrote the following insertion sort algorithm</p>
<pre><code>def insertionSort(L, reverse=False):
    for j in xrange(1,len(L)):
        valToInsert = L[j]
        i=j-1
        while i&gt;=0 and L[i] &gt; valToInsert:
            L[i+1] = L[i]
            i-=1
        L[i+1] = valToInsert
    return L
</code></pre>
<p>Edit: All you need to do is change the final &gt; to &lt; to get it to work in reverse.</p>
<p>However, what do most people do in these situations? Write the algorithm twice in two if-statements, one where it's &gt; and the other where it's &lt; instead? What is the "correct" way to typically handle these kinds of scenarios where the change is minor but it simply changes the nature of the loop/code entirely? </p>
<p>I know this question is a little subjective.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a variable for the less-than operator:</p>
<pre><code>import operator
def insertionSort(L, reverse=False):       
    lt = operator.gt if reverse else operator.lt        
    for j in xrange(1,len(L)):
        valToInsert = L[j]
        i = j-1
        while 0 &lt;= i and lt(valToInsert, L[i]):
            L[i+1] = L[i]
            i -= 1
        L[i+1] = valToInsert
    return L
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Option 1:</p>
<pre><code>def insertionSort(L, reverse=False):
    # loop is the same...
    if reverse:
        L.reverse()
    return L
</code></pre>
<p>Option 2:</p>
<pre><code>def insertionSort(L, reverse=False):
    if reverse:
        cmpfunc = lambda a, b: cmp(b, a)
    else:
        cmpfunc = cmp
    for j in xrange(1,len(L)):
        valToInsert = L[j]
        i=j-1
        while i&gt;=0 and cmpfunc(L[i], valToInsert) &gt; 0:
            L[i+1] = L[i]
            i-=1
        L[i+1] = valToInsert
    return L
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You'll probably notice that <a href="http://docs.python.org/3/library/functions.html#sorted" rel="nofollow"><code>sorted</code></a> and <a href="http://docs.python.org/3/library/stdtypes.html#list.sort" rel="nofollow"><code>list.sort</code></a> and all other functions that do any kind of potentially-decorated processing have a <code>key</code> parameter, and those that specifically do ordering also have a <code>reverse</code> parameter. (The <a href="http://wiki.python.org/moin/HowTo/Sorting/" rel="nofollow">Sorting Mini-HOWTO</a> covers this.)</p>
<p>So, you can look at how they're implemented. Unfortunately, in CPython, all of this stuff is implemented in C. Plus, it uses a custom algorithm called "timsort" (described in <a href="http://hg.python.org/cpython/file/3.3/Objects/listsort.txt" rel="nofollow"><code>listsort.txt</code></a>). But I think can explain the key parts here, since it's blindingly simple. The <code>list.sort</code> code is separate from the <code>sorted</code> code, and they're both spread out over a slew of functions. But if you just look at the top-level function <a href="http://hg.python.org/cpython/file/3.3/Objects/listobject.c#l1902" rel="nofollow"><code>listsort</code></a>, you can see how it handles the <code>reverse</code> flag:</p>
<pre><code>1982     /* Reverse sort stability achieved by initially reversing the list,
1983     applying a stable forward sort, then reversing the final result. */
1984     if (reverse) {
1985         if (keys != NULL)
1986             reverse_slice(&amp;keys[0], &amp;keys[saved_ob_size]);
1987         reverse_slice(&amp;saved_ob_item[0], &amp;saved_ob_item[saved_ob_size]);
1988     }
</code></pre>
<p>Why reverse the list at the start as well as the end? Well, in the case where the list is nearly-sorted in the first place, many sort algorithms—including both timsort and your insertion sort—will do a lot better starting in the right order than in backward order. Yes, it wastes an O(N) <code>reverse</code> call, but you're already doing one of those—and, since any sort algorithm is at least O(N log N), and yours is specifically O(N^2), this doesn't make it algorithmically worse. Of course for smallish N, and a better sort, and a list in random order, this wasted 2N is pretty close to N log N, so it <em>can</em> make a difference in practice. It'll be a difference that vanishes as N gets huge, but if you're sorting millions of smallish <code>list</code>s, rather than a few huge ones, it might be worth worrying about.</p>
<p>Second, notice that it does the reversing by <em>creating a reverse slice</em>. This, at least potentially, could be optimized by referencing the original <code>list</code> object with <code>__getitem__</code> in reverse order, meaning the two reversals are actually O(1). The simplest way to do this is to literally create a reverse slice: <code>lst[::-1]</code>. Unfortunately, this actually creates a new reversed <code>list</code>, so timsort includes its own custom reverse-slice object. But you can do the same thing in Python by creating a <code>ReversedList</code> class.</p>
<p>This probably won't actually be faster in CPython, because the cost of the extra function calls is probably high enough to swamp the differences. But you're complaining about the <em>algorithmic</em> cost of the two <code>reverse</code> calls, and this solves the problem, in effectively the same way that the built-in sort functions do.</p>
<p>You can also look at how PyPy does it. Its <code>list</code> is implemented in <a href="https://bitbucket.org/pypy/pypy/src/9f15ce4319cf205bd7173ae0274bc567fa14ad07/pypy/objspace/std/listobject.py?at=default" rel="nofollow"><code>listobject.py</code></a>. It delegates to one of a few different Strategy classes depending on what the list contains, but if you look over all of the strategies (except the ones that have nothing to do), they basically do the same thing: <code>sort</code> the list, then <code>reverse</code> it.</p>
<p>So, it's good enough for CPython, and for PyPy… it's probably good enough for you.</p>
</div>
<span class="comment-copy">I don't know python, but due to experiences from other languages you could use e.g. templates, function instead of boolean expression, or pass comparator as a function argument.</span>
<span class="comment-copy">interesting, didn't know you could do this. the call you make to le() isn't necessary though</span>
<span class="comment-copy">@AgainstASicilian:  "Call to le() isn't necessary"?  It mirrors your code.  Perhaps I am missing something.</span>
<span class="comment-copy">@StevenRumbalski That's not correct. That part doesn't need to be reversed -- only the comparison between valToInsert and L[i]</span>
<span class="comment-copy">@AgainstASicilian:  Aha!  Thanks.</span>
<span class="comment-copy">@AgainstASicilian: Thanks for the correction.</span>
<span class="comment-copy">This is costly for larger lists, and doesn't produce the correct output if the goal is to output a reversely-sorted list</span>
<span class="comment-copy">for large lists you shouldn't use a O(N^2) sorting algorithm. reversing the list in the end is not costly comparing to the time spent in the loop.</span>
<span class="comment-copy">In practice I'd never use this algorithm. It's purely for learning purposes.</span>
<span class="comment-copy">In fact, even with the best O(N log N) algorithm, the O(N) cost of reversing the list at the end is algorithmically irrelevant. And clearly, it's a lot simpler than doing it on the fly.</span>
