<div class="post-text" itemprop="text">
<p>I've written a script that prints out all the .xml files in the current directory in xml format, but I can't figure out how to add the xmlns attributes to the top-level tag.
The output I want to get is:</p>
<pre><code>&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;databaseChangeLog 
      xmlns="http://www.host.org/xml/ns/dbchangelog"
      xmlns:xsi="http://www.host.org/2001/XMLSchema-instance"
      xsi:schemaLocation="www.host.org/xml/ns/dbchangelog"&gt;

    &lt;include file="cats.xml"/&gt;
    &lt;include file="dogs.xml"/&gt;
    &lt;include file="fish.xml"/&gt;
    &lt;include file="meerkats.xml"/&gt;

&lt;/databaseChangLog&gt;
</code></pre>
<p>However, here is the output I am getting:</p>
<pre><code> &lt;?xml version='1.0' encoding='utf-8'?&gt;
 &lt;databaseChangeLog&gt;
    &lt;include file="cats.xml"/&gt;
    &lt;include file="dogs.xml"/&gt;
    &lt;include file="fish.xml"/&gt;
    &lt;include file="meerkats.xml"/&gt;
 &lt;/databaseChangLog&gt;
</code></pre>
<p>Here is my script:</p>
<pre><code>import lxml.etree
import lxml.builder
import glob

E = lxml.builder.ElementMaker()
ROOT = E.databaseChangeLog
DOC = E.include

# grab all the xml files
files = [DOC(file=f) for f in glob.glob("*.xml")]
the_doc = ROOT(*files)

str = lxml.etree.tostring(the_doc, pretty_print=True, xml_declaration=True, encoding='utf-8')

print str
</code></pre>
<p>I've found some examples online of explicitly setting namespace attributes, <a href="http://effbot.org/zone/element-namespaces.htm" rel="nofollow noreferrer">here</a> and <a href="https://stackoverflow.com/questions/1374443/how-to-add-a-namespace-to-an-attribute-in-lxml?rq=1">here</a>, but to be honest they went a little over my head as I am just starting out. Is there another way to add these xmlns attributes to the databaseChangeLog tag? </p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import lxml.etree as ET
import lxml.builder
import glob

dbchangelog = 'http://www.host.org/xml/ns/dbchangelog'
xsi = 'http://www.host.org/2001/XMLSchema-instance'
E = lxml.builder.ElementMaker(
    nsmap={
        None: dbchangelog,
        'xsi': xsi})

ROOT = E.databaseChangeLog
DOC = E.include

# grab all the xml files
files = [DOC(file=f) for f in glob.glob("*.xml")]

the_doc = ROOT(*files)
the_doc.attrib['{{{pre}}}schemaLocation'.format(pre=xsi)] = 'www.host.org/xml/ns/dbchangelog'

print(ET.tostring(the_doc,
                  pretty_print=True, xml_declaration=True, encoding='utf-8'))
</code></pre>
<p>yields</p>
<pre><code>&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;databaseChangeLog xmlns:xsi="http://www.host.org/2001/XMLSchema-instance" xmlns="http://www.host.org/xml/ns/dbchangelog" xsi:schemaLocation="www.host.org/xml/ns/dbchangelog"&gt;
  &lt;include file="test.xml"/&gt;
&lt;/databaseChangeLog&gt;
</code></pre>
</div>
<span class="comment-copy">That worked, thanks so much! Would you happen to know how to format the output similar to what is in my desired output above? I thought pretty_print might help with that but it doesn't seem to help there :(</span>
<span class="comment-copy">Sorry, I don't know of a robust way to do that.</span>
<span class="comment-copy">No problem at all, thanks for your help :)</span>
<span class="comment-copy">Really hope you're still around, almost 5 years later. This helped me a bunch, but I don't understand the construct <code>'{{{pre}}}schemaLocation'.format(pre=xsi)</code>. I understand format, but why the three braces around pre?</span>
<span class="comment-copy">We want a XML qualified name of the form <a href="http://effbot.org/zone/element-namespaces.htm#element-tree-representation" rel="nofollow noreferrer"><code>'{uri}local'</code></a>. This string has literal braces, but braces have a special meaning to the <code>format</code> method so we need to "escape" them to tell <code>format</code> we want literal braces instead of string substitution. <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="nofollow noreferrer">"If you need to include a brace character in the literal text, it can be escaped by doubling: {{ and }}."</a>. In other words, when <code>format</code> encounters 2 braces it returns a string with 1 literal brace.</span>
