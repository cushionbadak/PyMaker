<div class="post-text" itemprop="text">
<p>I am familiar with the difference between <code>range()</code> and <code>xrange()</code>. I noticed something weird with <code>xrange()</code>:</p>
<pre><code>&gt;&gt;&gt; xrange(1,10,2)
xrange(1, 11, 2)

&gt;&gt;&gt; xrange(1,10,4)
xrange(1, 13, 4)
</code></pre>
<p>Functionally, it is correct:</p>
<pre><code>&gt;&gt;&gt; for item in xrange(1,10,4):
...     print item
... 
1
5
9
&gt;&gt;&gt;
</code></pre>
<p>However, as you can see, the stop value in the returned <code>xrange</code> object is the next higher value after the last legal value. Any reason why?</p>
<p><code>range()</code> which now provides the same functionality in Python 3 as <code>xrange</code> in Python 2 behaves as expected:</p>
<pre><code>&gt;&gt;&gt; range(1,10,4)
range(1, 10, 4)
&gt;&gt;&gt; range(1,10,2)
range(1, 10, 2)
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>xrange(1, 10, 4)</code> is equivalent to <code>xrange(1, 13, 4)</code>. To use your example:</p>
<pre><code>&gt;&gt;&gt; for item in xrange(1,13,4):
...     print item
... 
1
5
9
&gt;&gt;&gt; 
</code></pre>
<p><code>xrange</code> in Python 2 canonicalizes the <code>start, stop, step</code> arguments. Internally, the <code>xrange</code> implementation stores the triple start, step and length (number of elements in the <code>xrange</code> object) instead of start, step and stop. Here is how <code>xrange.__repr__()</code> is implemented [1]:</p>
<pre><code>rtn = PyString_FromFormat("xrange(%ld, %ld, %ld)",
                          r-&gt;start,
                          r-&gt;start + r-&gt;len * r-&gt;step,
                          r-&gt;step);
</code></pre>
<p>[1] <a href="https://github.com/replit/empythoned/blob/master/cpython/Objects/rangeobject.c" rel="nofollow">https://github.com/replit/empythoned/blob/master/cpython/Objects/rangeobject.c</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The stop value of a <code>range</code> or <code>xrange</code> is always exclusive.</p>
<p>Quote from the <a href="http://docs.python.org/2/library/functions.html#range" rel="nofollow">docs</a> (Python 2):</p>
<blockquote>
<p>If <code>step</code> is positive, the last element is the largest <code>start + i * step</code> <strong>less than</strong> <code>stop</code>; if <code>step</code> is negative, the last element is the smallest <code>start + i * step</code> <strong>greater than</strong> <code>stop</code>.</p>
</blockquote>
<p>And for <a href="http://docs.python.org/3/library/stdtypes.html#range" rel="nofollow">Python 3</a>:</p>
<blockquote>
<p>For a positive <code>step</code>, the contents of a range r are determined by the formula <code>r[i] = start + step*i</code> where <code>i &gt;= 0</code> and <strong><code>r[i] &lt; stop</code></strong>.</p>
<p>For a negative <code>step</code>, the contents of the range are still determined by the formula <code>r[i] = start + step*i</code>, but the constraints are <code>i &gt;= 0</code> and <strong><code>r[i] &gt; stop</code></strong>.</p>
</blockquote>
<hr/>
<p>About the second part of your question regarding the <code>repr()</code> of the <code>xrange</code>:</p>
<p><code>xrange(1, 10, 4)</code> and <code>xrange(1, 13, 4)</code> are identical and <code>repr()</code> for native python objects usually returns valid python code to recreate the object. This does not need to be the exactly same python code that initially created the object.</p>
</div>
<div class="post-text" itemprop="text">
<p>Does it really matter?</p>
<p>The <em>effect</em> is the same. Neither 10 nor 11 is included in the output of <code>xrange()</code>, and <code>xrange(1, 11, 2)</code> is <em>equivalent</em> to <code>xrange(1, 10, 2)</code>.</p>
<p>The Python 2 range type (the result of <code>xrange()</code>) stores the range length, not the end value, so to create the <code>repr</code> output it calculates that end value for you. And because you used a step value, the calculation shows the result of the formula <code>start + length * step</code>. For the implementation, the length is the more important value, the <code>end</code> value can safely be discarded and recalculated as needed.</p>
<p>So, when you create <code>xrange(1, 10, 2)</code>, it calculates the range length and stores <em>that</em> instead of the end value:</p>
<pre><code>if (step &gt; 0 &amp;&amp; lo &lt; hi)
return 1UL + (hi - 1UL - lo) / step;
else if (step &lt; 0 &amp;&amp; lo &gt; hi)
return 1UL + (lo - 1UL - hi) / (0UL - step);
else
return 0UL;
</code></pre>
<p>The Python 3 Range object stores the end value <em>in addition</em> to the length, so you can query the object for it and display it in the <code>repr</code> output.</p>
</div>
<span class="comment-copy">No, <code>xrange()</code> is not the same as <code>range()</code> in python 3. The latter is a new type. The end value is <i>never</i> included in either <code>range()</code> or <code>xrange()</code>. Because of your <code>step</code> value, neither <code>11</code> nor <code>10</code> are included in the range output anyway.</span>
<span class="comment-copy">@MartijnPieters I agree with your first half of the comment. Edited my question.</span>
<span class="comment-copy">@MartijnPieters Now, regarding the stop value never included, yes I know that. Why is the xrange object returned with a stop value as the last legal value + step ?</span>
<span class="comment-copy">Great. Thanks for sharing the link to the CPython source.</span>
<span class="comment-copy">I am accepting your answer, since it is precisely what my question was.</span>
<span class="comment-copy">This is the link to the official CPython 3.3 source: <a href="http://hg.python.org/cpython/file/e45db319e590/Objects/rangeobject.c#l808" rel="nofollow noreferrer">hg.python.org/cpython/file/e45db319e590/Objects/…</a></span>
<span class="comment-copy">And the CPython 2.7 source: <a href="http://hg.python.org/cpython/file/4edde40afee6/Objects/rangeobject.c#l133" rel="nofollow noreferrer">hg.python.org/cpython/file/4edde40afee6/Objects/…</a></span>
<span class="comment-copy">Yes, I will accept your answer since the second half of the answer is what I was looking for. Thanks.</span>
<span class="comment-copy">Sorry, I accepted @zodiac's answer since he even pointed me to the source code which gives me the exact answer I was looking for.</span>
<span class="comment-copy">I am not sure why you ask "Does it really matter?". I Know the effect is the same. That's not what I asked. Anyway.</span>
