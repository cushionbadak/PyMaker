<div class="post-text" itemprop="text">
<p>When using the <code>max()</code> function in Python to find the maximum value in a list (or tuple, dict etc.) and there is a tie for maximum value, which one does Python pick? Is it random?</p>
<p>This is relevant if, for instance, one has a list of tuples and one selects a maximum (using a <code>key=</code>) based on the first element of the tuple but there are different second elements. How does Python pick which one to pick as the maximum?</p>
<p>I'm working in Python v2.6.</p>
</div>
<div class="post-text" itemprop="text">
<p>On Python 2, this isn't specified in the documentation and isn't in the portable in-Python section of the standard library, so this behaviour may vary between implementations. </p>
<p>In the source to CPython 2.7 this is implemented in <code>./Python/bltinmodule.c</code> by <code>builtin_max</code> <sup>[<a href="http://hg.python.org/cpython/file/8527427914a2/Python/bltinmodule.c#l1441" rel="noreferrer">source</a>]</sup>, which wraps the more general <code>min_max</code> function  <sup>[<a href="http://hg.python.org/cpython/file/8527427914a2/Python/bltinmodule.c#l1337" rel="noreferrer">source</a>]</sup>.</p>
<p><code>min_max</code> will iterate through the values and use <code>PyObject_RichCompareBool</code> <sup>[<a href="http://docs.python.org/release/2.7.2/c-api/object.html#PyObject_RichCompareBool" rel="noreferrer">docs</a>]</sup> to see if they are greater than the current value. If so, the greater value replaces it. Equal values will be skipped over.</p>
<p>The result is that the first maximum will be chosen in the case of a tie.</p>
</div>
<div class="post-text" itemprop="text">
<p>From empirical testing, it appears that <code>max()</code> and <code>min()</code> on a list will return the first in the list that matches the <code>max()</code>/<code>min()</code> in the event of a tie:</p>
<pre><code>&gt;&gt;&gt; test = [(1, "a"), (1, "b"), (2, "c"), (2, "d")]
&gt;&gt;&gt; max(test, key=lambda x: x[0])
(2, 'c')
&gt;&gt;&gt; test = [(1, "a"), (1, "b"), (2, "d"), (2, "c")]
&gt;&gt;&gt; max(test, key=lambda x: x[0])
(2, 'd')
&gt;&gt;&gt; min(test, key=lambda x: x[0])
(1, 'a')
&gt;&gt;&gt; test = [(1, "b"), (1, "a"), (2, "d"), (2, "c")]
&gt;&gt;&gt; min(test, key=lambda x: x[0])
(1, 'b')
</code></pre>
<p>And <a href="https://stackoverflow.com/questions/6783000/which-maximum-does-python-pick-in-the-case-of-a-tie/6783101#6783101">Jeremy's excellent sleuthing</a> confirms that this is indeed the case.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 3, the behavior of <code>max()</code> in the case of ties is no longer just an implementation detail as detailed in the other answers. The feature is now guaranteed, as the <a href="https://docs.python.org/3/library/functions.html#max" rel="noreferrer">Python 3 docs</a> explicitly state:</p>
<blockquote>
<p>If multiple items are maximal, the function returns the first one
  encountered. This is consistent with other sort-stability preserving
  tools such as sorted(iterable, key=keyfunc, reverse=True)[0] and
  heapq.nlargest(1, iterable, key=keyfunc).</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Your question somewhat leads to a note. When sorting a data structure, there is often a desire to keep relative order of objects that are considered equal for the purposes of comparison. This would be known as a <a href="http://en.wikipedia.org/wiki/Sorting_algorithm#Stability" rel="noreferrer">stable sort</a>.</p>
<p>If you absolutely needed this feature, you could do a <code>sort()</code>, which <a href="http://mail.python.org/pipermail/python-dev/2004-July/046416.html" rel="noreferrer">will be stable</a> and then have knowledge of the order relative to the original list.</p>
<p>As per python itself, I don't believe that you get any guarantee of which element you will get when you call <code>max()</code>. Other answers are giving the cpython answer, but other implementations (IronPython, Jython) could function differently.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2 versions, IMO, I believe you cannot assume that <code>max()</code> returns the first maximal element in the list in the case of ties. I have this belief because <code>max()</code> is supposed to implement the true mathematical function <code>max</code>, which is used on sets that have a total order, and where elements do not have any "hidden information".</p>
<p><em>(I will assume that others have researched correctly and the Python documentation does not give any guarantees for <code>max()</code>.)</em></p>
<p><em>(In general, there are an endless number of questions you can ask about the behavior of a library function, and almost all of them can't be answered. For example: How much stack space will <code>max()</code> use? Will it use SSE? How much temporary memory? Can it compare the same pair of objects more than once (if comparison has a side effect)? Can it run faster than O(n) time for "special" known data structures? etc. etc.)</em></p>
</div>
<span class="comment-copy">Just don't try to rely on any of this for a sorting function, please.</span>
<span class="comment-copy">See the answer to <a href="http://stackoverflow.com/questions/4237914/python-max-min-builtin-functions-depend-on-parameter-order" title="python max min builtin functions depend on parameter order">stackoverflow.com/questions/4237914/…</a></span>
<span class="comment-copy">I agree with missingno that this isn't behavior you should rely on. I hope you're just asking for debugging purposes. If you care about the second element of the tuple (in your hypothetical example) then you should always consider it in your key= function.</span>
<span class="comment-copy">@codewarrior sometimes any max will do, but you still want a guarantee that for the same input the same object will be the max.</span>
<span class="comment-copy">I suppose this means for a dictionary it's really unclear which it is because the elements are non-ordered. Thanks again.</span>
<span class="comment-copy">@DoubleAA Yeah, comparisons with dictionaries don't follow the same logic, I'm surprised that Python lets you use the same operators. It seems like it's just asking to create bugs...</span>
<span class="comment-copy">+1 for nice answer.</span>
<span class="comment-copy">But is this guaranteed I wonder?</span>
<span class="comment-copy">@Mark yeah I'm not sure, it makes intuitive sense, but I'm still trying to find confirmation in the source/docs</span>
<span class="comment-copy">According to <a href="http://stackoverflow.com/questions/4237914/python-max-min-builtin-functions-depend-on-parameter-order" title="python max min builtin functions depend on parameter order">stackoverflow.com/questions/4237914/…</a>, yes.</span>
<span class="comment-copy">@agf: I don't see any definite official statement there. And as usual for documentation: Undocumented behavior is at best implementation defined, but one really shouldn't expect it to be the same.</span>
<span class="comment-copy">I assumed that the "Just don't try to rely on any of this for a sorting function, please." comment on the question met the "CYA" requirement for all of us.</span>
<span class="comment-copy">Chris I think my question on meta gained you some well-deserved upvotes :) <a href="https://meta.stackoverflow.com/questions/352439/should-we-add-more-explanations-when-closing-as-duplicates" title="should we add more explanations when closing as duplicates">meta.stackoverflow.com/questions/352439/…</a></span>
<span class="comment-copy">@Jean-FrançoisFabre Thanks, well you raise an important point, not just for this case but other Q&amp;As too!</span>
<span class="comment-copy">Is there a way to get at the last one encountered, instead of the first one (without having to resort to sorting)?</span>
<span class="comment-copy">@lifebalance reverse the list before applying max()</span>
<span class="comment-copy">@lifebalance Or alternatively <a href="https://stackoverflow.com/questions/17952612/python-finding-the-last-index-of-min-element">do this</a>. (slightly different, that one get the index)</span>
