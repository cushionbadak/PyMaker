<div class="post-text" itemprop="text">
<p>Can anyone help me one this one?</p>
<p>I am trying to find a way to count the range between 2 list on integers; and to get each step necessary to get from one list to then next                                                                           </p>
<p>using these 2 arrays:                            </p>
<pre><code>a = [1,1,1]

b = [3,4,3]
</code></pre>
<p>I'd like to arrive to a sequence of in-between values:                                                                          </p>
<pre><code>[[2,2,2], [None,3,None]]
</code></pre>
<p>Thanks
a</p>
</div>
<div class="post-text" itemprop="text">
<p>A variation of Lattywares Answer that works in python 2.5 and below where izip_longest is not available:</p>
<pre><code>map(None, *[range(x + 1, y) for x, y in zip(a, b)])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is quite simple to do with <a href="http://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow"><code>itertools.zip_longest()</code></a> and a <a href="http://www.youtube.com/watch?v=pShL9DCSIUw" rel="nofollow">list comprehension</a>:</p>
<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.zip_longest(*[range(i+1, j) for i, j in zip(a, b)]))
[(2, 2, 2), (None, 3, None)]
</code></pre>
<p>Note that in 2.x <code>itertools.zip_longest()</code> doesn't exist - it's called <a href="http://docs.python.org/2.7/library/itertools.html#itertools.izip_longest" rel="nofollow"><code>itertools.izip_longest()</code></a> instead.</p>
<p>This works by <code>zip()</code>ing the values together so we get the bounds, then we generate the range we need (adding one to the lower bound as you seem to not want to include it), then we separate them out into parts, using <code>itertools.zip_longest()</code> (which also introduces the <code>None</code> values).</p>
</div>
<span class="comment-copy">It's worth noting these are lists, not arrays.</span>
<span class="comment-copy">Note this does not work in 3.x, and is less readable, so it is only a good idea to use this in 2.5 or before (and in general, there are not many good reasons to be using such an outdated version).</span>
<span class="comment-copy">@Lattyware, true, but sometimes you have no other choice - for example, 2.5 is still the current stable jython version.</span>
<span class="comment-copy">Wow, really? I didn't know Jython was so far behind, I get annoyed when I get stuck pre-3.3 these days, let alone pre-2.7.</span>
<span class="comment-copy">@Lattyware Yeah, jython 2.7 is in beta since february, but if the transition from beta to rc happens at the same speed as from alpha to beta, we can expect a stable 2.7 release sometime mid-2014 :( What annoys me the most about having to write 2.5 compatible code is the lack of dict comprehensions and the missing <code>with</code> statement - I mess that one up about every time I write a jython script having to deal with file I/O.</span>
<span class="comment-copy">Nice, much better than mine.</span>
<span class="comment-copy">cheers! that was helpful</span>
