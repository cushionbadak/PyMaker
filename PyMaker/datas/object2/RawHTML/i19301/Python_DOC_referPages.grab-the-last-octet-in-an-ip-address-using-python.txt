<div class="post-text" itemprop="text">
<p>I am writing a Python script that will take an IP address in CIDR format (ie. 1.1.1.0/32 or 10.0.0.1/24) and split the IP into three parts: the first three octets (1.1.1), the last octet (0) and the Subnet mask (32). The IP will be of variable length so I don't know if I can use some sort of string character counter.</p>
<p>Any ideas?</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>Parse the IP into an int, and use bitwise operators to get it.</p>
<p>Another way would be to use a library like <a href="http://code.google.com/p/ipaddr-py/" rel="nofollow">ipaddr-py</a>. I'd personally prefer the library.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use Regex : </p>
<pre><code>#!/usr/bin/python
import re


def extractIP( ipStr):

    l = re.split('(.*)\.(.*)\.(.*)\.(.*)/(.*)', ipStr)
    return l[1:-1]

print extractIP("1.2.3.45/35")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Regular expressions can be cumbersome. You can also use the split() function</p>
<pre><code>inp = '192.168.0.1/24'
ip, submask = inp.split('/')
octets = ip.split('.')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use regular expressions. You can split all the octets into a list using r'.' and then recombine them in whatever order you like. You could write a more complicated re to do it in one stroke, but i think that'd be a bit harder.</p>
<pre><code>import re
ip = '1.1.1.1/32'
re.split(r'(\.|/)', ip)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using a regular expression would be simple in this situation.</p>
<pre><code>(\d{,3}\.\d{,3}\.\d{,3})\.(\d{,3})\/(\d+)
</code></pre>
<p>Using the <code>re.match</code> method in conjunction would yield your result.</p>
</div>
<span class="comment-copy">What about IPv6?</span>
<span class="comment-copy">Python 3.3 has a <a href="http://docs.python.org/3/library/ipaddress.html" rel="nofollow noreferrer"><code>ipaddress</code> module</a> that can handle CIDR-formatted masks just fine. There is a <a href="https://pypi.python.org/pypi/ipaddress" rel="nofollow noreferrer">port</a> available for Python 2.6 / 2.7.</span>
<span class="comment-copy">If you are using subnet masks, why do you care about octect boundaries? Don't you actually want: network number, host number, and subnet mask?</span>
