<div class="post-text" itemprop="text">
<p>This problem is very simple to appreciate, here is the program - </p>
<pre><code>hisc = [1,2,3,4]
print("\n", hisc)

ohisc = hisc
hisc.append(5)

print("\nPreviously...", ohisc)
print("\nAnd now...", hisc)
input("\nETE")
</code></pre>
<p>When I run it ohisc gets the 5. Why does ohisc change? How can I stop it from changing?
Apologies if this is something obvious.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/reference/datamodel.html" rel="nofollow">Python variables are references</a>.  As such, the assignment copies the <em>reference</em> rather than the content of the variable.</p>
<p>In order to avoid this, all you have to do is create a <em>new</em> object:</p>
<pre><code>ohisc = list(hisc)
</code></pre>
<p>This is using the <a href="http://docs.python.org/3/library/functions.html#list" rel="nofollow"><code>list</code> constructor</a> which creates a new list from a given iterable.</p>
<p>Alternatively you can also assign from a slice (which creates a new object):</p>
<pre><code>ohisc = hisc[:]
</code></pre>
<p><code>[]</code> is the <a href="http://docs.python.org/3/library/stdtypes.html#sequence-types-str-unicode-list-tuple-bytearray-buffer-xrange" rel="nofollow">general slice operator</a> which is used to extract a subset from a given collection. We simply leave out the start and end position (they default to the begin and end of the collection, respectively).</p>
</div>
<div class="post-text" itemprop="text">
<p>You definitely need to understand everything in Konrad Rudolph's answer. And I think in your specific case, that's what you want, too. But often there's a better way: If you avoid mutating objects (that is, changing them in-place), it never matters whether two names are referring to the same object or not. For example, you can change this:</p>
<pre><code>hisc.append(5)
</code></pre>
<p>to this:</p>
<pre><code>hisc = hisc + [5]
</code></pre>
<p>That doesn't change <code>hisc</code> in-place; it creates a new <code>list</code>, with the <code>5</code> added on to the end of it, and then assigns that to <code>hisc</code>. So, the fact that <code>ohisc</code> was pointing to the same <code>list</code> as <code>hisc</code> doesn't matter—that <code>list</code> is still there, unchanged, for <code>ohisc</code> to point to.</p>
<p>Let's say you wanted to replace all the negative values of the list with 0. That's pretty easy with mutation:</p>
<pre><code>for i in range(len(lst)):
    list[i] = max(list[i], 0)
</code></pre>
<p>But even easier without:</p>
<pre><code>lst = [max(elem, 0) for elem in lst]
</code></pre>
<p>Now, what if you wanted to <em>remove</em> every negative list element? You can't change the shape of a sequence while looping over it, so you have to either make a copy of the list (so you can loop over one copy while you change the other), or come up with a more complicated algorithm (e.g., swap each 0 backward and then remove all the 0's at the end). But it's easy to do immutably:</p>
<pre><code>lst = [elem for elem in lst if elem &gt;= 0]
</code></pre>
<p>So, when would you ever want to mutate? Well, often you <em>want</em> two references to the same object, so when you update one, the other one sees the changes. In that case, you obviously have to have actual changes for the other one to see.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a good explanation of what is happening: <a href="http://henry.precheur.org/python/copy_list" rel="nofollow">Python: copying a list the right way</a> </p>
<p>Basically, you're making a pointer to the list but what you want to do is make a copy of the list.</p>
<p>Try this instead:</p>
<pre><code>hisc = [1,2,3,4]
ohisc = hisc[:]
</code></pre>
</div>
<span class="comment-copy">Thankyou, that's perfect.</span>
<span class="comment-copy">@MattDMo Thanks, I appreciate the edit (although not so much the cosmetic edit; I consistently use spaces around binary operators – <i>everywhere</i> … but never mind).</span>
<span class="comment-copy">@KonradRudolph: When you're writing stuff for the education of newbies, it's probably better to follow PEP8 style than your own idiosyncratic style. (At least I try to avoid my own non-PEP8-isms on sites like this, code I publish as examples, etc.)</span>
<span class="comment-copy">@abarnert I generally do (although I think PEP8 is crazy when it advises against spaces around equals signs in keyword arguments and I am prepared to fight this point) – but in this case I did <i>not</i> violate PEP8. True, PEP8 says not to put spaces directly inside brackets but it also advises to use spaces around binary operators (which <code>:</code> is in form if not in function). I will also happily point to the adage at the beginning of PEP8. ;-)</span>
<span class="comment-copy">@KonradRudolph: Click on that adage and read the 4-paragraph discussion. Sure, sometimes a rule doesn't apply—but if you think a rule <i>never</i> applies, you're not using your best judgment within the guidelines, you're coding to different guidelines. Which is fine—as I said, I also disagree with PEP8. But don't try to pretend you're following it when you're not; be clear about what you disagree with, violate it consistently in your own real code that you have to maintain, and swallow your disagreement when writing pedagogic code.</span>
<span class="comment-copy">Interesting that you show the solution that your link <i>explicitly advises against</i>.</span>
