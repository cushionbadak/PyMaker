<div class="post-text" itemprop="text">
<p>Frequently the constructor of a class will take it's arguments and save them on the instance. For example:</p>
<pre><code>class Example(object):
    def __init__(self, title='',backtitle='', height=20, width=50):
        self.title = title
        self.backtitle = backtitle
        self.height = height
        self.width = width
</code></pre>
<p>This is repetitious so I made a helper function to do this automatically:</p>
<pre><code>from inspect import getargspec
def save_args(values):
    for i in getargspec(values['self'].__init__).args[1:]:
        values['self'].__dict__[i] = values[i]

class Example(object):
    def __init__(self, title='',backtitle='', height=20, width=50):
        save_args(vars())
</code></pre>
<p>My questions are as follows:</p>
<ul>
<li>Will this fail with certain classes or agruments</li>
<li>Is it portable, will it work on Jython, etc.. It worked for me on python 2.7 and 3.2</li>
<li>Is there a simpler alternative?</li>
<li>Is there a python package out there that already does this? </li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>It'll fail when your class uses <a href="http://docs.python.org/3/reference/datamodel.html#slots" rel="nofollow noreferrer"><code>__slots__</code></a>. You could use <a href="http://docs.python.org/3/library/functions.html#setattr" rel="nofollow noreferrer"><code>setattr()</code></a> instead:</p>
<pre><code>from inspect import getargspec
def save_args(values):
    for i in getargspec(values['self'].__init__).args[1:]:
        setattr(values['self'], i, values[i])
</code></pre>
<p>provided the arguments keyword arguments to <code>__init__</code> are all declared slots of course.</p>
<p>Otherwise this should work on any Python implementation.</p>
<p>You may be interested in a <a href="https://stackoverflow.com/q/1389180">previous discussion of the topic</a>, which sparked a <a href="http://mail.python.org/pipermail/python-ideas/2011-April/thread.html#9930" rel="nofollow noreferrer">Python-ideas list thread</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>This requires you to write more code, silently ignores all erroneous arguments to the Example constructor, and doesn't support positional arguments to the Example constructor, but avoids use of <code>inspect</code>:</p>
<pre><code>def save_args(obj, defaults, kwargs):
    for k,v in defaults.iteritems():
        if k in kwargs: v = kwargs[k]
        setattr(obj, k, v)

class Example(object):
    def __init__(self, **kwargs):
        defaults = { 'title': '',
                     'backtitle': '',
                     'height': 20,
                     'width': 50 }
        save_args(self, defaults, kwargs)
</code></pre>
</div>
<span class="comment-copy">FGITW -- That's what I get for trying to address each of OP's questions individually when really only the first one was important :)</span>
<span class="comment-copy">There was a discussion about this on python-ideas somewhere in the past 6 months, where (after everyone decided nothing had to be added to the language) people proposed and argued about 300 different implementations. It's worth searching the archives if you really care about this. (IIRC, if you don't care about portability, there's a solution using frame hackery that's handles some cases that <code>getargspec</code> can'tâ€¦ but I don't remember what cases.)</span>
<span class="comment-copy">This might also be neatly handled in a meta-class which wraps the existing <code>__init__</code>, although I haven't really fully formed how that would work in my head (mostly because I'm pretty inexperienced with metaclasses)</span>
<span class="comment-copy">@mgilson: a decorator on a <code>__init__</code> method with just a <code>pass</code> body would do too.</span>
<span class="comment-copy">Yeah, that's true too.  I do have some experience with decorators :)</span>
<span class="comment-copy">What's wrong with <code>inspect</code>?  As long as the ugly is sufficiently hidden, I don't see any problem with it :)</span>
<span class="comment-copy">Nothing's wrong with <code>inspect</code>, I just wanted to demonstrate that it could be done without.</span>
