<div class="post-text" itemprop="text">
<p>I have a following project structure:</p>
<pre><code>project
|----app.py
|----package
     |---__init__.py
     |---module.py
     |---module2.py
     |---module3.py
     |---....
</code></pre>
<p>My <code>__init__.py</code> file currently is empty. In module.py I have a definition of a class:</p>
<pre><code>class UsefulClass:
    ...
</code></pre>
<p>And in other modules similar definitions as well. My app.py looks like this:</p>
<pre><code>#!/usr/bin/env python
# -*- coding: utf-8 -*-

from package.module import UsefulClass
from package.module2 import UsefulClass2
...

usefulclass = UsefulClass()
usefulclass2 = UsefulClass2()
....
</code></pre>
<p>My question is: how can I replace this <code>from package.module... import UsefulClass</code> statements? Even now, I have only 4 modules defined and this imports starting to look ugly. Can I import them in <code>__init__.py</code> file and then just use <code>import package</code> in <code>app.py</code>? I have tried that and it gives me an error.</p>
<p>I am looking for a clean and elegant solution.</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python 3:</p>
<p><code>package/__init__.py</code>:</p>
<pre><code>from .foo import bar
</code></pre>
<p><code>package/foo.py</code>:</p>
<pre><code>bar=0
</code></pre>
<p><code>app1.py</code>:</p>
<pre><code>import package
print(package.bar)
</code></pre>
<p>app2.py:</p>
<pre><code>from package import bar
print(bar)
</code></pre>
<p>Either way, this prints <code>0</code>, just as you want.</p>
<p>In Python 2, just change <code>from .foo import bar</code> to <code>from foo import bar</code>.</p>
<p>(In fact, the 2.x code often works in Python 3, but it's not correct, and in some edge cases it will fail. For example, if you have a <code>bar.py</code> at the same level as the app, you'll end up with <code>bar</code> being that module, instead of <code>0</code>.)</p>
<p>In real life, you probably want to specify a <code>__all__</code> from each package and module that you might ever <code>from foo import …</code> (if for no other reason than to allow to test things at the interactive interpreter with <code>from foo import *</code>).</p>
<p>It sounds like you're saying you already tried this, and got an error. Without knowing <em>exactly</em> what you tried, and what the error was, and which Python version you're using, I have no idea what in particular you might have gotten wrong, but presumably you got <em>something</em> wrong.</p>
<hr/>
<p>The <code>.foo</code> specifies a package-relative import. Saying <code>from .foo import bar</code> means "from the <code>foo</code> module in the same package as me, import <code>bar</code>". If you leave off the dot, you're saying "from the <code>foo</code> module in the standard module path, import <code>bar</code>".</p>
<p>The tutorial section on <a href="http://docs.python.org/3/tutorial/modules.html#intra-package-references" rel="nofollow">Intra-package References</a> (and surrounding sections) gives a very brief explanation. The reference docs for <a href="http://docs.python.org/3/reference/simple_stmts.html#the-import-statement" rel="nofollow"><code>import</code></a> and <a href="http://docs.python.org/3/reference/import.html#importsystem" rel="nofollow">the import system in general</a> give most of the details, but the original proposal in <a href="http://www.python.org/dev/peps/pep-0328/" rel="nofollow">PEP 328</a> explains the details, and the rationale behind the design, a lot more simply.</p>
<p>The reason you need to leave off the dot in 2.x is that 2.x didn't have any way to distinguish relative and absolute imports. There's only <code>from foo import bar</code>, which means "from the <code>foo</code> module of the same package as me, or, if there is no such module, the one in the standard module path, import <code>bar</code>".</p>
</div>
<span class="comment-copy">What version of Python are you using?</span>
<span class="comment-copy">Also, please tell us exactly what you tried, and what error you got (with traceback).</span>
<span class="comment-copy">In <code>project.package.__init__.py</code>: import the subpackages and use <code>__all__ = [...]</code> <a href="http://docs.python.org/2/tutorial/modules.html#importing-from-a-package" rel="nofollow noreferrer">docs.python.org/2/tutorial/…</a></span>
<span class="comment-copy">I am using Python 3.3</span>
<span class="comment-copy">Yeah, I am using Python 3.3 and have tried <code>from foo import bar</code> in <code>__init__.py</code>, but that does not work. What this <code>dot</code> in front of module name means? I checked and your answer works. Thank you</span>
<span class="comment-copy">@sebast26: Let me update the answer to explain.</span>
