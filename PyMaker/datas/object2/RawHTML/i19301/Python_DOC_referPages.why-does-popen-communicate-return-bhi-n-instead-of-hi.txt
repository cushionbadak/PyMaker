<div class="post-text" itemprop="text">
<p>Can someone explain why the result I want, "hi", is preceded with a letter 'b' and followed with a newline?  </p>
<p>I am using <strong>Python 3.3</strong></p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; print(subprocess.Popen("echo hi", shell=True,
                           stdout=subprocess.PIPE).communicate()[0])
b'hi\n'
</code></pre>
<p>This extra 'b' does not appear if I run it with python 2.7</p>
</div>
<div class="post-text" itemprop="text">
<p>The echo command by default returns a newline character</p>
<p>Compare with this:</p>
<pre><code>print(subprocess.Popen("echo -n hi", \
    shell=True, stdout=subprocess.PIPE).communicate()[0])
</code></pre>
<p>As for the <em>b</em> preceding the string it indicates that it is a byte sequence which is equivilent to a normal string in Python 2.6+</p>
<p><a href="http://docs.python.org/3/reference/lexical_analysis.html#literals" rel="noreferrer">http://docs.python.org/3/reference/lexical_analysis.html#literals</a></p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>b</code> indicates that what you have is <a href="http://docs.python.org/3/library/stdtypes.html#bytes" rel="noreferrer"><code>bytes</code></a>, which is a binary sequence of bytes rather than a string of Unicode characters.  Subprocesses output bytes, not characters, so that's what <code>communicate()</code> is returning.</p>
<p>The <code>bytes</code> type is not directly <code>print()</code>able, so you're being shown the <code>repr</code> of the <code>bytes</code> you have.  If you know the encoding of the bytes you received from the subprocess, you can use <code>decode()</code> to convert them into a printable <code>str</code>:</p>
<pre><code>&gt;&gt;&gt; print(b'hi\n'.decode('ascii'))
hi
</code></pre>
<p>Of course, this specific example only works if you actually are receiving ASCII from the subprocess.  If it's not ASCII, you'll get an exception:</p>
<pre><code>&gt;&gt;&gt; print(b'\xff'.decode('ascii'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xff in position 0…
</code></pre>
<p>The newline is part of what <code>echo hi</code> has output.  <code>echo</code>'s job is to output the parameters you pass it, followed by a newline.  If you're not interested in whitespace surrounding the process output, you can use <code>strip()</code> like so:</p>
<pre><code>&gt;&gt;&gt; b'hi\n'.strip()
b'hi'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As mentioned before, <code>echo hi</code> actually does return <code>hi\n</code>, which it is an expected behavior.</p>
<p>But you probably want to just get the data in a "right" format and not deal with encoding. All you need to do is pass <code>universal_newlines=True</code> option to <code>subprocess.Popen()</code> like so:</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; print(subprocess.Popen("echo hi",
                           shell=True,
                           stdout=subprocess.PIPE,
                           universal_newlines=True).communicate()[0])
hi
</code></pre>
<p>This way <code>Popen()</code> will replace these unwanted symbols by itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>b is the byte representation and \n is the result of echo output.</p>
<p>Following will print only the result data</p>
<pre><code>import subprocess
print(subprocess.Popen("echo hi", shell=True,stdout=subprocess.PIPE).communicate()[0].decode('utf-8').strip())
</code></pre>
</div>
<span class="comment-copy">What version of Python are you using?</span>
<span class="comment-copy">Using version 3.3</span>
<span class="comment-copy">Not sure about the 'b', but the newline is because <code>echo hi</code> prints <code>hi\r\n</code>. To avoid that, you could add .strip() at the end, or similar fix.</span>
<span class="comment-copy">you could use <code>check_output()</code> instead of <code>.communicate()</code> here: <code>print(subprocess.check_output("echo hi", shell=True, universal_newlines=True), end="")</code></span>
<span class="comment-copy">you don't need '\' inside the parentheses.</span>
<span class="comment-copy">How do you get the print() function to print a byte string without a preceeding 'b'? Or do you need to convert it to a unicode string first?</span>
<span class="comment-copy">Yes; see my edit.  But also consider the perils of decoding.</span>
<span class="comment-copy">I'm curious, when <code>os.popen</code> returns text strings, whether there's a way to make <code>subprocess.Popen</code> also return them, instead of the byte strings.</span>
<span class="comment-copy">I'll answer myself, there's an option with cryptic name called <code>universal_newlines</code> that causes the <code>Popen</code> object to accept and return text strings.</span>
<span class="comment-copy">@PavelŠimerda While os.popen returns text strings, they are apparently being decoded incorrectly for non-ascii characters, at least on Windows. E.g. running <code>check_output("dir")</code>, extracting a file name from the output and then trying to access it with <code>open</code> will fail if the filename contains German umlauts. Might be a bug.</span>
<span class="comment-copy"><code>universal_newlines=True</code> worked like a charm.  This should be the accepted answer, in my humble opinion...</span>
<span class="comment-copy">It produces extra empty lines.</span>
<span class="comment-copy">Thansk a lot it works</span>
