<div class="post-text" itemprop="text">
<p>I create and activate a virtualenv (venv) using Python 3.3's built-in way of doing it:</p>
<pre><code>$ python3.3 -m venv env
$ source env/bin/activate
</code></pre>
<p>At this point <code>python</code> is the python in my virtualenv, which I expect:</p>
<pre><code>(env) $ which python
/my_home_directory/env/bin/python
</code></pre>
<p>Now I want to install distribute and pip, so I download the setup scripts and run them:</p>
<pre><code>(env)$ wget http://python-distribute.org/distribute_setup.py
(env)$ wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py
(env)$ python distribute_setup.py
(env)$ python get-pip.py
</code></pre>
<p>These commands complete successfully. At this point I inspect my venv to find another directory called "local" which wasn't there before. env/local/bin contains my easy_install and pip executables, and they're still aliased to my system's existing easy_install and pip:</p>
<pre><code>(env)$ ls env
bin  include  lib  local  pyvenv.cfg
(env)$ ls env/bin
activate  pydoc  python  python3  python3.3
(env)$ ls env/local/bin
easy_install  easy_install-3.3  pip  pip-3.3
(env)$ which easy_install
/usr/bin/easy_install
(env)$ which pip
/usr/bin/pip
</code></pre>
<p>I believe this is a departure from Python 2.x's behavior. At this point I expect <code>easy_install</code> and <code>pip</code> to be using the virtualenv's copies, and using them to install eggs will put them in the virtualenv.</p>
<p>Going a bit further, I crack open env/bin/activate to find that env/bin is prepended to the system path, but env/local/bin is not. That explains the behavior I'm seeing. I can work around this problem by editing env/bin/activate to add the env/local/bin directory to the path, something like:</p>
<pre><code>_OLD_VIRTUAL_PATH="$PATH"
PATH="$VIRTUAL_ENV/bin:$PATH"
PATH="$VIRTUAL_ENV/local/bin:$PATH"  # my new line
export PATH
</code></pre>
<p>So, what's going on here? Is this a bug, or am I missing something?</p>
<p>I'm on Ubuntu 12.10 in case that makes a difference.</p>
</div>
<div class="post-text" itemprop="text">
<p>I have a feeling there's a bug in Ubuntu's python packages or distribute somewhereâ€¦ but I haven't tracked it down (and I'm not sure I care to).</p>
<p>For whatever reason, the VIRTUAL_ENV environment variable needs to be set the root of the virtualenv for distribute and pip to install properly.</p>
<p><a href="https://gist.github.com/samatjain/5720698" rel="nofollow">This gist</a>, adopted from Vinay Sajip's code sample in the Python 3 docs, sets said variable; both distribute and pip will install properly when using it.</p>
</div>
<div class="post-text" itemprop="text">
<p>It's in the python docs.</p>
<p>'/usr/local' is the default <a href="http://docs.python.org/3/library/sys.html#sys.exec_prefix" rel="nofollow">exec_prefix</a>. Read the <a href="http://docs.python.org/3/library/venv.html" rel="nofollow">venv docs</a> for detail how to change the default behaviour. There's even an example there that shows how to make a <code>venv.EnvBuilder</code> that installs distribute and pip for you.</p>
<p><em>if you find distribute docs, please let me know ;-)</em></p>
</div>
<div class="post-text" itemprop="text">
<p>I had the same problem.
In <code>activate</code> script file I need to add as first line (of cource after <code>#!...</code>):</p>
<pre><code> unset PYTHON_PATH
</code></pre>
</div>
<span class="comment-copy">I thought the virtualenv was supposed to contain <code>pip</code>/<code>easy_install</code> already?</span>
<span class="comment-copy">Odd. I use a personal build of Python 3.3 on Debian, and distribute/pip install in <code>env/bin</code> for me. Is your copy of 3.3 from the Ubuntu repository? If it is, try building a local copy and see if that works correctly.</span>
<span class="comment-copy">@MattDMo I believe pip and easy_install are included when you use the  <code>virtualenv</code> command, but that doesn't seem to be the case with Python 3.3's venv module, judging from the docs. @eryksun It is indeed Ubuntu's version of Python 3.3. I'll try building locally and report back.</span>
<span class="comment-copy">I'm having trouble repeating the above steps after building Python 3.3 from source, but it appears that using <code>virtualenv env --no-site-packages --python=python2.7</code> and installing <code>pip</code> using get-pip.py will create an env/local directory, but in this case each of env/local/bin env/local/include and env/local/lib are symlinked to their env/bin env/include and env/lib, respectively. So now the question is "is this different in Python 3.3, or in Ubuntu's version of Python 3.3?"</span>
<span class="comment-copy">local directory was introduced by fix of this <a href="https://github.com/pypa/virtualenv/issues/118#issuecomment-1439290" rel="nofollow noreferrer">bug</a>.</span>
<span class="comment-copy">Confirmed: setting VIRTUAL_ENV to the root of the virtualenv will cause pip and distribute to be installed properly. I have tested this on Ubuntu 13.04. Thanks!</span>
<span class="comment-copy">Good information, thanks. When my venv is activated, <code>sys.prefix</code> and <code>sys.exec_prefix</code> both point to the root of the venv. But I don't see where in the docs it explains how to get <code>pip</code> or <code>easy_install</code> working with a venv. Specifically I'm looking in the first "Note" section of the venv docs, which seems to be telling me that things should just work given my reproduce steps above. Specifically: "Of course, you need to install them into the venv first: this could be done by running distribute_setup.py with the venv activated, followed by running easy_install pip." Any idea?</span>
<span class="comment-copy">If you can expand this to what is the problem and why your solution works, that would be better.</span>
<span class="comment-copy">I got the same error.. but when I add this at top of this file this solve my problem... Try it..</span>
<span class="comment-copy">This doesn't work for me. Also my env/bin/activate doesn't have #! as its first line. As I mention in my comment above, I have my own work-around by editing env/bin/activate, but I'm trying to determine why a work-around is even necessary.</span>
