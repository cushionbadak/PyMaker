<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/6981495/how-can-i-concatenate-a-string-and-a-number-in-python">How can I concatenate a string and a number in Python? [duplicate]</a>
<span class="question-originals-answer-count">
                    7 answers
                </span>
</li>
</ul>
</div>
<p>I know that in python, you can't simply do this:</p>
<pre><code>number = 1
print "hello number " + number
</code></pre>
<p>you have to do this: </p>
<pre><code>print "hello number " + str(number)
</code></pre>
<p>otherwise you'll get an error.</p>
<p><strong>My question is then</strong>, being python such a compact language and this feature of automatic casting/converting from integer to string available in so many other languages, isn't there away to avoid having to use the <code>str()</code> function everytime? Some obscure import, or simply another way to do it?</p>
<p><strong>Edit:</strong> When I say another way, I mean simpler more compact way to write it. So, I wouldn't really consider <code>format</code> and alternative for instance.</p>
<p>Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>I tend to use the more compact format</p>
<pre><code>&gt;&gt;&gt; print "one",1,"two",2
one 1 two 2
</code></pre>
<p>Or, in python 3,</p>
<pre><code>&gt;&gt;&gt; print("one",1,"two",2)
one 1 two 2
</code></pre>
<p>Notice however that both options will always introduce a space between each argument, which makes it unsuitable for more complex output formatting, where you should use some of the other solutions presented.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can avoid <code>str()</code>:</p>
<pre><code>print 'hello number {}'.format(number)
</code></pre>
<p>Anyway,</p>
<pre><code>'abc' + 123
</code></pre>
<p>is equivalent to</p>
<pre><code>'abc'.__add__(123)
</code></pre>
<p>and the <code>__add__</code> method of strings accepts only strings.</p>
<p>Just like</p>
<pre><code>123 + 'abc'
</code></pre>
<p>is equivalent to</p>
<pre><code>(123).__add__('abc')
</code></pre>
<p>and the <code>__add__</code> method of integers accept only numbers (int/float).</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use string formatting, <a href="http://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="nofollow">old</a>:</p>
<pre><code>print "hello number %s" % number
</code></pre>
<p>or <a href="http://docs.python.org/3/library/string.html#formatstrings" rel="nofollow">new</a>:</p>
<pre><code>print "hello number {}".format(number)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As <a href="https://stackoverflow.com/a/6981532/1167234">this</a> answer explains, this will not happen in Python because it is strongly typed. This means that Python will not convert types that you do not explicitly say to convert.</p>
</div>
<span class="comment-copy">Not a duplicate.. I know how to concatenate the string. I am asking if there is a way to not having to do it that way.</span>
<span class="comment-copy">While this is the right way to go for more complex cases, wouldn't <code>print "hello number", number</code> work equally well here?</span>
<span class="comment-copy">@DSM - yes, it would.</span>
<span class="comment-copy">@DSM that's excatly the kind of answer I was looking for. Consider writing it as an answer so that I can accept it. Thanks.</span>
<span class="comment-copy">be aware that this calls str under the hood (I think at least) ... same with the other format string. just like "%d" will call int and %f will call float</span>
