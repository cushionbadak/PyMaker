<div class="post-text" itemprop="text">
<p>I'm learning BeautifulSoup, and found many "html2text" solutions, but the one i'm looking for should mimic the formatting:</p>
<pre><code>&lt;ul&gt;
&lt;li&gt;One&lt;/li&gt;
&lt;li&gt;Two&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>Would become</p>
<pre><code>* One
* Two
</code></pre>
<p>and </p>
<pre><code>Some text
&lt;blockquote&gt;
More magnificent text here
&lt;/blockquote&gt;
Final text
</code></pre>
<p>to </p>
<pre><code>Some text

    More magnificent text here

Final text
</code></pre>
<p>I'm reading the docs, but I'm not seeing anything straight forward. Any help? I'm open to using something other than beautifulsoup.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at Aaron Swartz's <a href="https://github.com/aaronsw/html2text" rel="noreferrer">html2text</a> script (can be installed with <code>pip install html2text</code>). Note that the output is valid <a href="http://en.wikipedia.org/wiki/Markdown" rel="noreferrer">Markdown</a>. If for some reason that doesn't fully suit you, some rather trivial tweaks should get you the exact output in your question:</p>
<pre><code>In [1]: import html2text

In [2]: h1 = """&lt;ul&gt;
   ...: &lt;li&gt;One&lt;/li&gt;
   ...: &lt;li&gt;Two&lt;/li&gt;
   ...: &lt;/ul&gt;"""

In [3]: print html2text.html2text(h1)
  * One
  * Two

In [4]: h2 = """&lt;p&gt;Some text
   ...: &lt;blockquote&gt;
   ...: More magnificent text here
   ...: &lt;/blockquote&gt;
   ...: Final text&lt;/p&gt;"""

In [5]: print html2text.html2text(h2)
Some text

&gt; More magnificent text here

Final text
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I have code for a more simple task: Remove HTML tags, and insert newlines at the appropriate places. Maybe this can be a starting point for you.</p>
<p>Python's <code>textwrap</code> module might be helpful for creating indented blocks of text.</p>
<p><a href="http://docs.python.org/2/library/textwrap.html" rel="noreferrer">http://docs.python.org/2/library/textwrap.html</a></p>
<pre><code>class HtmlTool(object):
    """
    Algorithms to process HTML.
    """
    #Regular expressions to recognize different parts of HTML. 
    #Internal style sheets or JavaScript 
    script_sheet = re.compile(r"&lt;(script|style).*?&gt;.*?(&lt;/\1&gt;)", 
                              re.IGNORECASE | re.DOTALL)
    #HTML comments - can contain "&gt;"
    comment = re.compile(r"&lt;!--(.*?)--&gt;", re.DOTALL) 
    #HTML tags: &lt;any-text&gt;
    tag = re.compile(r"&lt;.*?&gt;", re.DOTALL)
    #Consecutive whitespace characters
    nwhites = re.compile(r"[\s]+")
    #&lt;p&gt;, &lt;div&gt;, &lt;br&gt; tags and associated closing tags
    p_div = re.compile(r"&lt;/?(p|div|br).*?&gt;", 
                       re.IGNORECASE | re.DOTALL)
    #Consecutive whitespace, but no newlines
    nspace = re.compile("[^\S\n]+", re.UNICODE)
    #At least two consecutive newlines
    n2ret = re.compile("\n\n+")
    #A return followed by a space
    retspace = re.compile("(\n )")

    #For converting HTML entities to unicode
    html_parser = HTMLParser.HTMLParser()

    @staticmethod
    def to_nice_text(html):
        """Remove all HTML tags, but produce a nicely formatted text."""
        if html is None:
            return u""
        text = unicode(html)
        text = HtmlTool.script_sheet.sub("", text)
        text = HtmlTool.comment.sub("", text)
        text = HtmlTool.nwhites.sub(" ", text)
        text = HtmlTool.p_div.sub("\n", text) #convert &lt;p&gt;, &lt;div&gt;, &lt;br&gt; to "\n"
        text = HtmlTool.tag.sub("", text)     #remove all tags
        text = HtmlTool.html_parser.unescape(text)
        #Get whitespace right
        text = HtmlTool.nspace.sub(" ", text)
        text = HtmlTool.retspace.sub("\n", text)
        text = HtmlTool.n2ret.sub("\n\n", text)
        text = text.strip()
        return text
</code></pre>
<p>There might be some superfluous regexes left in the code.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's built-in html.parser (HTMLParser in earlier versions) module can be easily extended to create a simple translator that you can tailor to your exact needs. It lets you hook into certain events as the parser eats through the HTML.</p>
<p>Due to its simple nature you cant navigate around the HTML tree like you could with Beautiful Soup (e.g. sibling, child, parent nodes etc) but for a simple case like yours it should be enough.</p>
<p><a href="https://docs.python.org/3/library/html.parser.html" rel="nofollow">html.parser homepage</a></p>
<p>In your case you could use it like this by adding the appropriate formatting whenever a start-tag or end-tag of a specific type is encountered  :</p>
<pre><code>from html.parser import HTMLParser
from os import linesep

class MyHTMLParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self, strict=False)
    def feed(self, in_html):
        self.output = ""
        super(MyHTMLParser, self).feed(in_html)
        return self.output
    def handle_data(self, data):
        self.output += data.strip()
    def handle_starttag(self, tag, attrs):
        if tag == 'li':
            self.output += linesep + '* '
        elif tag == 'blockquote' :
            self.output += linesep + linesep + '\t'
    def handle_endtag(self, tag):
        if tag == 'blockquote':
            self.output += linesep + linesep

parser = MyHTMLParser()
content = "&lt;ul&gt;&lt;li&gt;One&lt;/li&gt;&lt;li&gt;Two&lt;/li&gt;&lt;/ul&gt;"
print(linesep + "Example 1:")
print(parser.feed(content))
content = "Some text&lt;blockquote&gt;More magnificent text here&lt;/blockquote&gt;Final text"
print(linesep + "Example 2:")
print(parser.feed(content))
</code></pre>
</div>
<span class="comment-copy">You want something that'll turn html tags to something like markdown format?</span>
<span class="comment-copy">The examples on his own site don't look user friendly at all, considering images, links, and especially local links beginning with /. Maybe I need a better understanding of Markdown, but can you provide an example of the suggested tweak? or would that be hard-coded in the html2text function?</span>
<span class="comment-copy">@Mikhail -- Not sure that I follow -- how would you like the links, images to be handled?</span>
<span class="comment-copy">Let's say images to be ignored, and links to be in format <code>text (link)</code> His site is down at the moment, so I can't give you details.</span>
