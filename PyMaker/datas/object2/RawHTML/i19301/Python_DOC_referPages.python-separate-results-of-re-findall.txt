<div class="post-text" itemprop="text">
<p>I am using re.findall and the result is like this :</p>
<pre><code>[(u'! mais', u'! - but', u'0.0625')]
</code></pre>
<p>I would like to store each part of the "tuple" in different variables, like</p>
<pre><code>french = u'! mais'
english = u'! - but'
prob = u'0.0625'
</code></pre>
<p>and I would also like to convert string u'0.0625' to a float number.
Any ideas?</p>
</div>
<div class="post-text" itemprop="text">
<p>If you just have a list of one tuple:</p>
<pre><code>french, english, prob = result[0]
</code></pre>
<p>If you have multiple tuples, you'll probably want to loop over them:</p>
<pre><code>for result in result:
    french, english, prob = result
    # do something with this particular french, english, prob
</code></pre>
<p>But if you want to make three <em>lists</em> out of it, that's easy too:</p>
<pre><code>frenchies, englishers, probs = zip(*results)
</code></pre>
<p>Either way, you convert <code>prob</code> to a float by calling <code>float</code>:</p>
<pre><code>prob = float(prob)
</code></pre>
<p>Or, if you've got the list:</p>
<pre><code>probs = map(float, probs)
</code></pre>
</div>
<span class="comment-copy">what is the regular expression that you are using?</span>
<span class="comment-copy">re.findall(r'(.*?)\s[|]{3}\s(.*?)\s[|]{3}\s[0-9.0-9e\-0-9]*\s[0-9.0-9e\-0-9]*\s([0-9.0-9e\-0-9]*)\s[0-9.0-9e\-0-9]*\s[0-9.0-9e\-0-9]*',a)</span>
<span class="comment-copy">He'd probably be better off using named capture groups in his regex to begin with.</span>
<span class="comment-copy">@sr2222: That will give him, effectively, a dict with three named values, not three separate variables. It's true that, if we saw his code, there's a good chance the dict would be as useful or more useful. But I didn't want to just <i>assume</i> that, because there's also a good chance that he really does need three separate variables.</span>
<span class="comment-copy">Yes, it worked. Thank you :)</span>
<span class="comment-copy">@MaryK: You may want to search the Python tutorial for "tuple decomposition" and "multiple assignment", because it's explained pretty well somewhere in there. (Although they may have reworded it at some point, because it's not really about tuples; you can decompose any sequence or iterator the same way: <code>a, b = [1, 2]</code>.)</span>
<span class="comment-copy">@MaryK: OK, it's now called "sequence unpacking", and you can find it under <a href="http://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">Tuples and Sequences</a>. But the explanation isn't as good as I rememberâ€¦</span>
