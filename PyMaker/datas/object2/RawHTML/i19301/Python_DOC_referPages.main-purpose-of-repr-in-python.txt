<div class="post-text" itemprop="text">
<p>I just came across this question <a href="https://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python">Difference between <code>__str__</code> and <code>__repr__</code> in Python</a> and its mentioned that the main purpose of the <code>__repr__</code> is to be unambiguous. But I heard that the main purpose of the <code>__repr__</code> is to generate a string such that <strong><code>eval()</code></strong> can reconstruct the python object later. Actually what is the main purpose of <code>__repr__</code>? Do any built-in functions or any default modules in python inherently use <code>__repr__</code> to reconstruct the object? Will it mess up the execution if we just overwrite <code>__repr__</code> such that it returns a constant string (e.g. "foo") always?</p>
</div>
<div class="post-text" itemprop="text">
<p>For types that have a literal notation (<code>str</code>, <code>int</code>, <code>float</code>, <code>list</code>, etc.) the <code>repr()</code> returns a string that can be used to create the type again.</p>
<p>That is <em>nice</em>, but not a requirement.</p>
<p>The main purpose for <code>__repr__</code> is to provide the <em>developer</em> with unambiguous information as to what object they have here, for debugging purposes.</p>
<p>Quoting from the <a href="http://docs.python.org/3/reference/datamodel.html#object.__repr__" rel="noreferrer"><code>__repr__</code> documentation</a>:</p>
<blockquote>
<p>Called by the <code>repr()</code> built-in function to compute the “official” string representation of an object. If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment). If this is not possible, a string of the form <code>&lt;...some useful description...&gt;</code> should be returned.</p>
</blockquote>
<p>but most of all:</p>
<blockquote>
<p>This is typically used for <strong>debugging</strong>, so it is important that the representation is information-rich and unambiguous.</p>
</blockquote>
<p>Emphasis mine.</p>
<p>Returning a constant string from your custom type would not break anything technically, but would make your life as a developer <em>harder</em>.</p>
</div>
<div class="post-text" itemprop="text">
<p>The convention is that you use <code>repr</code> to get a string that represents the object, and <code>str</code> to describe it. <code>repr</code> is used more for debugging, <code>str</code> for regular printing. The idea is that the output of repr is something that looks like code you could eval, and often it is. However, you can't rely on that. If you have to convert an object to a string and back, use <code>pickle</code> or <code>json</code>.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; greeting = "Hello"
&gt;&gt;&gt; print str(greeting)
Hello

&gt;&gt;&gt; print repr(greeting)
'Hello'
</code></pre>
<p>If you are writing your own class, and it is very simple, you can make <code>__repr__</code> return something that can be eval'd:</p>
<pre><code>class Song(object):
    def __init__(self, title, artist):
        self.title = title
        self.artist = artist

    def __repr__(self):
        return "Song(%r, %r)" % (self.title, self.artist)

    def __str__(self):
        return "%s - %s" % (self.artist, self.title)
</code></pre>
<p>Note how I use <code>%r</code> to get the <code>repr</code> of the title and artist. This takes care of escaping and quoting (for python) automatically, and allows me to eval the result of <code>repr(a_song)</code>, although I wouldn't do that outside of debugging. Again, <code>str</code> returns something you would print to the user, <code>repr</code> something that helps you debugging. If the class gets more complicated than this, you won't be able to return something complete or evalable from <code>repr</code>. The convention here is to return a concise string to identify you instance, usually with angular brackets:</p>
<pre><code>&gt;&gt;&gt; repr(type(None))
"&lt;type 'NoneType'&gt;"

&gt;&gt;&gt; import gtk
&gt;&gt;&gt; win = gtk.Window()
&gt;&gt;&gt; repr(win)
'&lt;gtk.Window object at 0x10de45690 (GtkWindow at 0x7fdd89240000)&gt;'
</code></pre>
</div>
<span class="comment-copy">+1, <code>__str__()</code> is for the user, <code>__repr__()</code> is for the developer.</span>
