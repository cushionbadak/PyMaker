<div class="post-text" itemprop="text">
<p>I'm confused about the iteration process in python</p>
<p>I have:</p>
<pre><code>numbers = [0,1,2,3,4,5]
for i in numbers:
    v = numbers
    print v
</code></pre>
<p>Here is the end of loop
but, in C , C++ , Java we know the line inside the <code>{ }</code> will be executed repeatedly, or if not given curly braces then the next statement after the loop, but I'm confused here.
How many lines will be executed in the iteration? 
Does it depend on indent?</p>
</div>
<div class="post-text" itemprop="text">
<p>In Python, the indentation, rather than brackets, determines block scope, so in this example both the indented lines will be executed once per iteration of the loop. </p>
<p>This is the single weirdest thing about Python for programmers coming from the C/Java language families, but you get used to it fairly quickly.</p>
</div>
<div class="post-text" itemprop="text">
<p>Python uses indents to separate blocks of code. Try to think about this specific code as:</p>
<pre><code>numbers = [0,1,2,3,4,5]
for i in numbers:  #{
    v = numbers
    print v
#}
</code></pre>
<p>This is completely valid Python code that has comments with curly braces where you would expect them in some different languages.</p>
<p>Python's counterpart of executing single statement is:</p>
<pre><code>numbers = [0,1,2,3,4,5]
for i in numbers: v = numbers
print v
</code></pre>
<p>and every loop will execute only <code>v = numbers</code> (by using <code>;</code> you can add statements in the same line, however).</p>
</div>
<div class="post-text" itemprop="text">
<p>In python, indentation matters a lot. In your code, both of these lines will get executed in each iteration of the for loop:</p>
<pre><code>   v = numbers
   print v
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just as an additional note, I think your original code is not doing what I think you want it to do - which is print the numbers 1-5 on their own line. It should be (using Python 3):</p>
<pre><code>numbers = [0,1,2,3,4,5]
for i in numbers:
    print(i)
</code></pre>
<p>If you run the following code:</p>
<pre><code>numbers = [0,1,2,3,4,5]
v = numbers
print(v)
</code></pre>
<p>you'll get:</p>
<pre><code>[0, 1, 2, 3, 4, 5]
</code></pre>
</div>
<span class="comment-copy">i'm really new in Pyhon ! but have another programming language knowledge ,</span>
<span class="comment-copy">You should probably read the tutorial. Yes it depends on the indentation.</span>
<span class="comment-copy">This is a pretty basic question, maybe you could have answered that just by reading some lines in the Python tutorial, as someone already said.</span>
<span class="comment-copy">Try something like Dive Into Python. <a href="http://www.diveintopython.net" rel="nofollow noreferrer">diveintopython.net</a></span>
<span class="comment-copy">You can find the tutorial <a href="http://docs.python.org/2/tutorial/index.html" rel="nofollow noreferrer">here</a> or <a href="http://docs.python.org/3/tutorial/index.html" rel="nofollow noreferrer">here</a>, for Python2 and Python3, respectively.</span>
<span class="comment-copy">If that's the most unusual thing about Python to you, you haven't dived in very deeply :-)</span>
<span class="comment-copy">@delnan: I wonder, what is the weirdest thing for C/Java programmers in your opinion. Sorry for being slightly off topic, but curiosity prevailed.</span>
<span class="comment-copy">i's watching videos and it's done on their , not learning from any tutorial ,and searched google for that , and got nothing to learn about it ! :(</span>
<span class="comment-copy">Well, I was mainly speaking of the initial impressions. What are you thinking of?</span>
<span class="comment-copy">There are numerous things, and they depend on the individual programmer and the exact languages s/he used before. Some examples: Classes are first-class objects (can be created at any time, passed around, stored in variables, etc.), context managers (<code>with</code> statement), generators, coroutines, runtime code generation/metaprogramming (<code>exec</code> and such).</span>
<span class="comment-copy">ok. thanks ,  and i'm watching videos of 2.7 and coding on 3.3 IDE  and causing some syntax errors.  can you please tell me which one of 2.7 or 3.3 will be better in learning and implementing .</span>
<span class="comment-copy">@Sirajul_Islam: Learn 3.3, its popularity is rising. 2.7 is not much different and much more popular in business applications (due to whole ecosystem of modules that do not support 3.x). Some significant features from 3.x line were backported in the 2.6 and 2.7 releases.</span>
<span class="comment-copy">@Sirajul_Islam - I second that. Python 3.3 is the future. Many features have been added to it to improve it over Python 2.7, making things more uniform (behave alike) and making it better to program with. After you become more comfortable with Python 3.3, <b>then</b> you can go back and learn about what is different in 2.7</span>
<span class="comment-copy">tnx for your suggestion ,  i got raw_input() is missing in 3.3 and replaced with input() while the print in transferred to print() like as java's print function ..  but having conflictions with data type ..</span>
<span class="comment-copy">@Sirajul_Islam: 1) The safer solution is to use indents. 2) About <code>raw_input()</code> issue: you can use <a href="http://pythonhosted.org/six/" rel="nofollow noreferrer"><code>six</code> module</a>, which has multiple compatibility solutions, like <a href="http://pythonhosted.org/six/#module-six.moves" rel="nofollow noreferrer"><code>six.input</code> function</a>, which works as Python 2.x's <code>raw_input()</code> and Python 3.x's <code>input()</code>.</span>
<span class="comment-copy">ya, that means if the indent is missing for any reason may occur some errors?  and  which will be better in learning and implementing  i'm watching video of 2.7 and installed 3.3 of Python !</span>
<span class="comment-copy">yep, you may get some errors or your code will not do the desired job.</span>
<span class="comment-copy">IMO learning python3 is better, since it's newer than python2.Though  I've not learnt Python2.</span>
<span class="comment-copy">Learning Python 3 is better because Python 3 is better. Age/Youth is not an accomplishment ;-)</span>
<span class="comment-copy">thanks for this  but my actual ques was how the loops work !</span>
<span class="comment-copy">@Sirajul_Islam - did your question get answered?</span>
<span class="comment-copy">mmhmm.  ya . got the answers , and thanks for your extra help , and it'll help me too  . cause i'm really too new in Python ! :)</span>
<span class="comment-copy">@Sirajul_Islam - don't worry - we all have to start somewhere! I'm fairly new myself, and a lot of my learning has involved where to find answers to your questions. The <a href="http://docs.python.org/3/tutorial/" rel="nofollow noreferrer">Python 3 Tutorial</a>, the <a href="http://docs.python.org/3/" rel="nofollow noreferrer">documentation itself</a>, and of course StackOverflow are all great resources. For books, I really liked <a href="http://shop.oreilly.com/product/0636920003434.do" rel="nofollow noreferrer">Head First Python</a>, and there's an updated 2nd ed. coming in July.</span>
