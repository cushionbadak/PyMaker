<div class="post-text" itemprop="text">
<p>Recently I am using Python module os, when I tried to change the permission of a file, I did not get the expected result. For example, I intended to change the permission to rw-rw-r--,</p>
<pre><code>os.chmod("/tmp/test_file", 664)
</code></pre>
<p>The ownership permission is actually -w--wx--- (230)</p>
<pre><code>--w--wx--- 1 ag ag 0 Mar 25 05:45 test_file
</code></pre>
<p>However, if I change 664 to 0664 in the code, the result is just what I need, e.g.</p>
<pre><code>os.chmod("/tmp/test_file", 0664)
</code></pre>
<p>The result is:</p>
<pre><code>-rw-rw-r-- 1 ag ag 0 Mar 25 05:55 test_file
</code></pre>
<p>Could anybody help explaining why does that leading 0 is so important to get the correct result?</p>
</div>
<div class="post-text" itemprop="text">
<p>Found this on a <a href="http://ubuntuforums.org/showthread.php?t=889326">different forum</a></p>
<blockquote>
<p>If you're wondering why that leading zero is important, it's because
  permissions are set as an octal integer, and Python automagically
  treats any integer with a leading zero as octal. So os.chmod("file",
  484) (in decimal) would give the same result.</p>
</blockquote>
<p>What you are doing is passing <code>664</code> which in octal is <code>1230</code></p>
<p>In your case you would need </p>
<pre><code>os.chmod("/tmp/test_file", 436)
</code></pre>
<hr/>
<p>[Update]  Note, for Python 3 you have prefix with 0o (zero oh). E.G, <code>0o666</code></p>
</div>
<div class="post-text" itemprop="text">
<p>So for people who want semantics similar to:</p>
<pre><code>$ chmod 755 somefile
</code></pre>
<p>In python 2:</p>
<pre><code>$ python -c "import os; os.chmod('somefile', 0755)"
</code></pre>
<p>In python 3:</p>
<pre><code>$ python3 -c "import os; os.chmod('somefile', 0o755)"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>leading "0" means this is octal constant, not the decimal one. and you need an octal to change file mode.</p>
<p>permissions are a bit mask, for example, rwxrwx--- is 111111000 in binary, and it's very easy to group bits by 3 to convert to the octal, than calculate the decimal representation.</p>
<p>0644 (octal) is 0.110.100.100 in binary (i've added dots for readability), or, as you may calculate, 420 in decimal.</p>
</div>
<span class="comment-copy">Octal. Octal. Octal.</span>
<span class="comment-copy">Flag for Unix..</span>
<span class="comment-copy">I opened an issue for python documentation at <a href="http://bugs.python.org/issue25377" rel="nofollow noreferrer">bugs.python.org/issue25377</a> because that should be clear from the docs.</span>
<span class="comment-copy">Thanks, but I am still confused that, 484 in decimal means 744 in octal, which makes sense in the thread you mentioned in the forum. However, if I give 644 in decimal, it goes to 1204 in octal. How does 1204 relate to 230 in octal?</span>
<span class="comment-copy">@AplusG: the <code>1</code> is <b><i>not</i></b> discarded! That's the sticky/setuid/setgid bit, and 1 means <code>sticky</code>. Using <code>ls -l</code> you may notice permissions now include a <code>T</code> in the end...</span>
<span class="comment-copy">easier to add the 0 and make it octal :)</span>
<span class="comment-copy">Note, for Python 3 you have prefix with 0o (zero oh).</span>
<span class="comment-copy">I use 0o in python 2.7.10</span>
<span class="comment-copy">The python3 format works in python 2.7.9 as well. I have not checked earlier versions.</span>
<span class="comment-copy">The Python 3 syntax works back to Python 2.6 <a href="https://docs.python.org/3/whatsnew/2.6.html#pep-3127-integer-literal-support-and-syntax" rel="nofollow noreferrer">docs.python.org/3/whatsnew/â€¦</a></span>
<span class="comment-copy">Work for me tks!</span>
