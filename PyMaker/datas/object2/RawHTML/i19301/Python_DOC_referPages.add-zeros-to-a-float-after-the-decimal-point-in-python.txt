<div class="post-text" itemprop="text">
<p>I am reading in data from a file, modify it and write it to another file. The new file will be read by another program and therefore it is crucial to carry over the exact formatting</p>
<p>for example, one of the numbers on my input file is:</p>
<pre><code>1.000000
</code></pre>
<p>my script applies some math to the columns and should return</p>
<pre><code>2.000000
</code></pre>
<p>But what is currently returned is</p>
<pre><code>2.0
</code></pre>
<p>How would I write a float for example <code>my_float = 2.0</code>, as <code>my_float = 2.00000</code> to a file?</p>
</div>
<div class="post-text" itemprop="text">
<p>Format it to 6 decimal places:</p>
<pre><code>format(value, '.6f')
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; format(2.0, '.6f')
'2.000000'
</code></pre>
<p>The <a href="http://docs.python.org/3/library/functions.html#format" rel="noreferrer"><code>format()</code> function</a> turns values to strings following the <a href="https://docs.python.org/3/library/string.html#formatspec" rel="noreferrer">formatting instructions</a> given.</p>
</div>
<div class="post-text" itemprop="text">
<p>An answer using the format() command is above, but you may want to look into the Decimal standard library object if you're working with floats that need to represent an exact value. You can set the precision and rounding in its context class, but by default it will retain the number of zeros you place into it:</p>
<pre><code>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; x = decimal.Decimal('2.0000')
&gt;&gt;&gt; x
Decimal('2.0000')
&gt;&gt;&gt; print x
2.0000
&gt;&gt;&gt; print "{0} is a great number.".format(x)
2.0000 is a great number.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I've tried n ways but nothing worked that way I was wanting in, at last, this worked for me. </p>
<pre><code>foo = 56
print (format(foo, '.2f'))
print (format(foo, '.3f'))
print (format(foo, '.5f'))

output:

56.0 
56.00
56.000
56.00000
</code></pre>
<p>Meaning that the 2nd argument of <code>format</code> takes the decimal places you'd have to go up to. Keep in mind that <code>format</code> returns sting.   </p>
</div>
<span class="comment-copy">@DemianBrecht: We are talking about formatting floats here.</span>
<span class="comment-copy">@MartijnPieters: Whether formatting a float or formatting a string representation of a float, the output is the same when writing to a file. Although I agree (now) that my link is not a dupe, but perhaps "related".</span>
<span class="comment-copy">Correct me if I am wrong, but this also has the implicit instruction of "round to 6 decimal places" not just "keep 6 decimal places".  So while it makes sense in the context of all zeros, the reason one might go to the precision is implied that you may actually USE that precision, as such you may need to go out further (and truncate) if you want to avoid rounding errors).  For example, try: format(2.0000008, '.6f').  But otherwise, I totally agree with Martijn.</span>
<span class="comment-copy">@Nascent_Notes: Since the <i>input</i> is limited to 6 decimal places, I think it is safe to assume that rounding to 6 decimals is fine.</span>
<span class="comment-copy">Thanks, that solution works totally fine for me! And yes, the input is limited to 6 decimal places so I (hopefully) wouldn't bump into rounding errors</span>
<span class="comment-copy">It also works for the Decimal type. Great!</span>
<span class="comment-copy">@michaelmoo, my comment was just that.  Format does rounding, not just padding.  IFF, the question read "how to pad with 5's", you couldn't do <code>format(5.55555, '.4f')</code>.  That would give the result 5.5556.  It was simple a warning.  I think your comment is saying the same thing, just phrased alternatively.</span>
<span class="comment-copy">How do you set the precision to something else?</span>
