<div class="post-text" itemprop="text">
<p>So I have a string</p>
<pre><code>s = '&gt;n269412 | AK142815 | msdfhakjfdkjfs'
</code></pre>
<p>and I want to include everything up to but not including the first instance of '|'</p>
<p>so what I did was</p>
<pre><code>import re

p = re.search('|',s)

print s[:p]
</code></pre>
<p>but i got this error</p>
<pre><code>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: slice indices must be integers or None or have an __index__ method
</code></pre>
<p>I understand why it isn't working . . because that value is not an integer but is there any way I can use that value where the search found that element ? </p>
</div>
<div class="post-text" itemprop="text">
<p>Why even bother with a regex for this use-case?</p>
<pre><code>s = '&gt;n269412 | AK142815 | msdfhakjfdkjfs'
print s.partition('|')[0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You do not need regular expressions for this:</p>
<pre><code>first, rest = s.split('|', 1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I think <code>re.match()</code> gives a more direct solution (i.e. match everything up to and not including the first <code>|</code>):</p>
<pre><code>In [7]: re.match('[^|]*', s).group(0)
Out[7]: '&gt;n269412 '
</code></pre>
<p>If there's no <code>|</code>, the entire string is returned. It is not entirely clear from the question whether this is what you want.</p>
<p>But as others have said, you don't really need a regex for this...</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="http://docs.python.org/3/library/re.html#re.search" rel="nofollow"><code>re.search</code></a> returns <a href="http://docs.python.org/3/library/re.html#match-objects" rel="nofollow">a match object</a> containing more that just a single index.</p>
<p>What you probably want is the <a href="http://docs.python.org/3/library/re.html#re.match.start" rel="nofollow"><code>start</code></a> index:</p>
<pre><code>&gt;&gt;&gt; s[:p.start()]
'&gt;n269412 '
</code></pre>
<p>Btw. you need to fix your regular expression as this would just match either <code>''</code> or <code>''</code> (i.e. nothing). You want to use <code>'\|'</code>:</p>
<pre><code>p = re.search('\|', s)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>That error is because re.search returns a MatchObject, which you attempt to slice and cannot do. See the <a href="http://docs.python.org/2/library/re.html#re.search" rel="nofollow noreferrer">re.search documentation</a>.</p>
<p>I would do the following:</p>
<pre><code>s = '&gt;n269412 | AK142815 | msdfhakjfdkjfs'

# look for the pipe character
findPipe = s.find("|")

# replace everything after the pipe with empty string
s = s.replace(s[findPipe:], "")

print s
</code></pre>
<p>See <a href="https://stackoverflow.com/questions/509211/the-python-slice-notation">these</a> two <a href="https://stackoverflow.com/questions/1010961/string-slicing-python">links</a> for more info about slicing strings.</p>
</div>
<span class="comment-copy"><code>re.search</code> returns a match object or None, not an integer.</span>
<span class="comment-copy"><code>p = s.find('|')</code> or <code>p = s.index('|')</code> will fit better</span>
<span class="comment-copy">(+1) Good point</span>
<span class="comment-copy">Just to note - where the delimiter is not present - this will raise a <code>ValueError</code></span>
<span class="comment-copy">If I were using regexp, this is the one I'd use...</span>
