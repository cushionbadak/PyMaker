<div class="post-text" itemprop="text">
<p>This code is a preview from an upcoming competition at picoctf.com.  I modified the original code provided so it allows for user input, but I can't get Test #2 to work.  When a string of 10 characters is entered with at least one letter, I want it to print that only numbers may be used.  Currently it tries to convert the user input to an integer value to compare it to the actual serial, but if there is a letter present the test fails since a letter can't be converted to a integer value:</p>
<p>123456789a yields "invalid literal for int() with base 10..."</p>
<p>How can I fix this piece of code so that it tests correctly?</p>
<p>**</p>
<pre><code>if int(serial) != serial:
            print ("only numbers allowed")
            print ('Failed Test 2')
</code></pre>
<p>**</p>
<pre><code>#!/usr/bin/env python
# Your goal is to find the input that will verify your robot's serial number
#solution to keep it handy = 0933427186

serial = input ("Please enter a valid serial number from your RoboCorpIntergalactic purchase")

def check_serial(serial):
    if len(serial) != 10:
        print ('Failed Test 1')
        return False
    if int(serial) != serial:
        print ("only numbers allowed")
        print ('Failed Test 2')
        return False
    if int(serial[0])+int(serial[1]) != 9:
        print ('Failed Test 3')
        return False
    if int(serial[2])*int(serial[3]) != 9:
        print ('Failed Test 4')
        return False
    if int(serial[4])-int(serial[5]) != 2:
        print ('Failed Test 5')
        return False
    if int(serial[5])%int(serial[4]) != 2:
        print ('Failed Test 6')
        return False
    if int(serial[6])/int(serial[7]) != 7:
        print ('Failed Test 7')
        return False
    if int(serial[8])-int(serial[9]) != 2:
        print ('Failed Test 8')
        return False
    if int(serial[7])*int(serial[1]) != 9:
        print ('Failed Test 9')
        return False
    if int(serial[2]) + int(serial[3]) != int(serial[9]):
        print ('Failed Test 10')
        return False
    return True

if check_serial(serial):
    print ("Thank you! Your product has been verified!")
else:
    print ("I'm sorry that is incorrect. Please use a valid RoboCorpIntergalactic serial number")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/library/stdtypes.html#str.isdigit" rel="noreferrer"><code>str.isdigit()</code></a> to test if all characters are digits:</p>
<pre><code>&gt;&gt;&gt; 'a1'.isdigit()
False
&gt;&gt;&gt; '11'.isdigit()
True
&gt;&gt;&gt; '1a'.isdigit()
False
</code></pre>
<p>You <em>may</em> want to turn your <code>serial</code> string into a sequence of integers to make all your tests easier:</p>
<pre><code>s_int = [int(d) for d in serial]
</code></pre>
<p>then </p>
<pre><code>if s_int[0] + s_int[1] != 9:
</code></pre>
<p>etc.</p>
<p>You could easily build a sequence of tests with indices, an operator and the expected outcome:</p>
<pre><code>import operator

tests = (
    (0, 1, operator.add, 9),
    (2, 3, operator.mul, 9),
    (4, 5, operator.sub, 2),
    (5, 4, operator.mod, 2),
    (6, 7, operator.truediv, 7),
    (8, 9, operator.sub, 2),
    (7, 1, operator.mul, 9),
)

for i, (a, b, op, res) in enumerate(tests, 3):
    if op(s_int[a], s_int[b]) != res:
        print("Failed test {}".format(i))
        return False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>try:
    int(serial)
except ValueError:
    print ("only numbers allowed")
    print ('Failed Test 2')
</code></pre>
<p>or following Martijn's suggestion</p>
<pre><code>try:
    s_int = [int(d) for d in serial]
except ValueError:
    s_int = None
    print ("only numbers allowed")
    print ('Failed Test 2')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <strong><a href="http://docs.python.org/2/library/stdtypes.html#str.isdigit" rel="nofollow"><code>str.isdigit()</code></a></strong></p>
<blockquote>
<p>Return true if all characters in the string are digits and there is at
  least one character, false otherwise.</p>
</blockquote>
<p>You could use a regular expression as well:</p>
<pre><code>import re;
if(re.match('\D', serial)):
    print ('Failed Test 2')
</code></pre>
</div>
<span class="comment-copy">Note that <code>int(somestring) == somestring</code> will always be false, even if it is all digits.</span>
<span class="comment-copy">Ahh.  That makes sense and explains why I was having problems with ten digit solutions!  Thanks!</span>
<span class="comment-copy">The part with operator is so beautiful! :)</span>
<span class="comment-copy">Thanks everyone for your ideas.  For now I just went with:  <code>if str.isdigit(serial) == False:         print ('only numbers allowed')         print ('Failed Test 2')         return False</code>  I will investigate your ideas further.  I am a total n00b to both Python and programming in general!  Thanks again!</span>
<span class="comment-copy">I am guessing that <code>serial.isdigit()</code> is preferred over <code>str.isdigit(serial)</code> though both seem to work okay for me?  Or does it not matter?</span>
<span class="comment-copy">@jkibbe: I meant for you to use <code>serial.isdigit()</code>. <code>str.isdigit(serial)</code> happens to work because it is an unbound method of the <code>str</code> class. :-)</span>
<span class="comment-copy">This'll succeed if <code>serial</code> contains leading or trailing whitespace. <code>int()</code> is quite tolerant.</span>
<span class="comment-copy">@MartijnPieters, would also allow negative numbers :) My second suggestion wouldn't though</span>
