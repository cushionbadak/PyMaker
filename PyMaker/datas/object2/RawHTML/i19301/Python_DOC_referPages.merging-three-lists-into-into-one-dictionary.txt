<div class="post-text" itemprop="text">
<p>I need to merge three lists into one dictionary. These lists are from reading a txt file I formatted, and here is a snippet from that file:</p>
<pre><code>maker =['Horsey', 'Ford', 'Overland', 'Scripps-Booth']

year = ['1899', '1909', '1911', '1913']

model = ['Horseless', 'Model T', 'OctoAuto', 'Bi-Autogo']
</code></pre>
<p>Into the following:</p>
<pre><code>car_dict = {'Horsey':1899,'Horseless','Ford':1909,'Model T','Overland' : 1911, 'OctoAuto', 'Scripps-Booth' : 1913, 'Bi-Autogo'}
</code></pre>
<p>Here is what I did:</p>
<pre><code>def car_data_merge(car_maker,car_model,car_year):
    car_dict = {}
    car_merge = []

    car_dict = defaultdict(partial(defaultdict,list))

    for (car_maker,car_model,car_year) in zip(car_maker,car_model,car_year):
         car_dict[car_year][car_model].append(car_maker)
    print(car_dict)
</code></pre>
<p>When I enter this I get:</p>
<pre><code>{'Horsey': defaultdict(&lt;class 'list'&gt;, {'1899': ['Horseless']})
</code></pre>
<p>Not all the data from list is shown and I don't want the <code>defaultdict</code> shown.</p>
<p>When I tried the following:</p>
<pre><code>def car_data_merge(car_maker,car_data):
    car_dict = {}
    car_merge = []
    car_merge = zip(car_maker,car_data)  
    car_dict = dict(car_merge)
    print(car_dict)

    ###   car_data holds both year and model   ####
</code></pre>
<p>Only part of the data shows up:</p>
<pre><code>'Horsey':'Horseless',':1909,'Model T
</code></pre>
<p>What should I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>You were on the right track with <code>zip</code>, but beware that:</p>
<blockquote>
<p><a href="http://docs.python.org/2/library/functions.html#zip" rel="noreferrer">The returned list is truncated in length to the length of the shortest argument sequence.</a></p>
</blockquote>
<p>If you're fine with that, you can zip your data into a list of tuples, zip the keys, and hand everything off to <code>dict()</code>.</p>
<p>If you'd like to handle missing values, checkout <code>itertools</code> <a href="http://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="noreferrer"><code>izip_longest</code> (Python 2)</a> or <a href="http://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="noreferrer"><code>zip_longest</code> (Python 3)</a> where</p>
<blockquote>
<p><a href="http://docs.python.org/2/library/itertools.html#itertools.izip_longest" rel="noreferrer">If the iterables are of uneven length, missing values are filled-in with <em>fillvalue</em>.</a></p>
</blockquote>
<pre><code>try:
    # Python 2
    from itertools import izip_longest
    zip_longest = izip_longest
except ImportError:
    # Python 3
    from itertools import zip_longest

from pprint import pprint


def main():
    maker =['Horsey', 'Ford', 'Overland', 'Scripps-Booth', 'FutureX', 'FutureY']
    year = ['1899', '1909', '1911', '1913', '20xx']
    model = ['Horseless', 'Model T', 'OctoAuto', 'Bi-Autogo']

    car_data = dict(zip(maker, zip(year, model)))
    car_data_longest = {mk: (yr, md) for mk, yr, md in zip_longest(maker, year, model)}

    pprint(car_data)
    pprint(car_data_longest)
</code></pre>
<p>Output:</p>
<pre><code>{'Ford': ('1909', 'Model T'),
 'Horsey': ('1899', 'Horseless'),
 'Overland': ('1911', 'OctoAuto'),
 'Scripps-Booth': ('1913', 'Bi-Autogo')}
{'Ford': ('1909', 'Model T'),
 'FutureX': ('20xx', None),
 'FutureY': (None, None),
 'Horsey': ('1899', 'Horseless'),
 'Overland': ('1911', 'OctoAuto'),
 'Scripps-Booth': ('1913', 'Bi-Autogo')}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How's this:</p>
<pre><code>&gt;&gt;&gt; maker =['Horsey', 'Ford', 'Overland', 'Scripps-Booth']
&gt;&gt;&gt; year = ['1899', '1909', '1911', '1913']
&gt;&gt;&gt; model = ['Horseless', 'Model T', 'OctoAuto', 'Bi-Autogo']
&gt;&gt;&gt; d = dict(zip(maker,zip(year,model)))
{'Overland': ('1911', 'OctoAuto'), 'Horsey': ('1899', 'Horseless'), 'Scripps-Booth': ('1913', 'Bi-Autogo'), 'Ford': ('1909', 'Model T')}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It sounds like what you want is:</p>
<pre><code>{maker: (year, model) for maker, model, year in zip(car_maker,car_model,car_year)}
</code></pre>
<p>which will give you:</p>
<pre><code>{'Horsey':(1899,'Horseless'),'Ford':(1909,'Model T'),'Overland':(1911,'OctoAuto')...}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is this the kind of thing you are looking for?</p>
<pre><code>&gt;&gt;&gt; car_dict = {maker[i]:[year[i], model[i]] for i in xrange(len(maker))}
&gt;&gt;&gt; car_dict
{'Overland': ['1911', 'OctoAuto'], 'Horsey': ['1899', 'Horseless'], 'Scripps-Booth': ['1913', 'Bi-Autogo'], 'Ford': ['1909', 'Model T']}
</code></pre>
</div>
<span class="comment-copy">Question: I never used izip before and I'm getting                     <code>values = itertools.izip(year, model)</code> <code>AttributeError: 'module' object has no attribute 'izip'</code> what should I do?</span>
<span class="comment-copy">@ThomasJones It's <code>izip_longest</code></span>
<span class="comment-copy">@ThomasJones What version of Python are you using? <code>itertools.izip</code> was added in Python 2.3 and modified in Python 2.4. <code>itertools.izip_longest</code> is new in Python 2.6.</span>
<span class="comment-copy">python 3.3.0 is what i'm using I just downloaded 2.6 and it does work. thanks! Also is there a way to use in python 3.3.0?</span>
<span class="comment-copy">Ah, good point. <code>zip()</code> already returns an iterator in Python 3. <code>itertools.izip_longest</code> also becomes <code>itertools.zip_longest</code>. <a href="http://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">docs.python.org/3/library/functions.html#zip</a>, <a href="http://docs.python.org/3.3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">docs.python.org/3.3/library/â€¦</a></span>
<span class="comment-copy">You don't need a call to <code>list</code>. Zip creates a list of tuples from which you can create a dictionary</span>
<span class="comment-copy">@Abhijit Oops, you are right about this. Removed</span>
<span class="comment-copy">Someone down voted this answer; could they please clarify why?</span>
