<div class="post-text" itemprop="text">
<p>I have an application which has to run a number of simulation runs. I want to setup a logging mechanisme where all logrecords are logged in a general.log, and all logs for a simulation run go to run00001.log, .... For this I have defined a class Run. in the <code>__init__()</code> a new filehandle is added for the runlog. </p>
<p>The problem is that the logfiles for the runs never get released, so after a number of runs the available handles are exhausted and the run crashes.</p>
<p>I've set up some routines to test this as follows</p>
<p>main routine</p>
<pre><code>import Model
try:
    myrun = Model.Run('20130315150340_run_49295')
    ha = raw_input('enter')
    myrun.log.info("some info")
except:
    traceback.print_exc(file=sys.stdout)

ha = raw_input('enter3')
</code></pre>
<p>The class Run is defined in module Model as follows</p>
<pre><code>import logging
class Run(object):

    """ Implements the functionality of a single run. """
    def __init__(self, runid):
        self.logdir="."
        self.runid          = runid
        self.logFile        = os.path.join(self.logdir , self.runid + '.log')
        self.log            = logging.getLogger('Run'+self.runid)
        myformatter         = logging.Formatter('%(asctime)s %(name)-12s %(levelname)-8s %(message)s')
        myhandler      = logging.FileHandler(self.logFile)
        myhandler.setLevel(logging.INFO)
        myhandler.setFormatter(myformatter)
        self.log.addHandler(myhandler) 
</code></pre>
<p>Then I use the program process explorer to follow the filehandlers. And I see the runlogs appear, but never disappear.</p>
<p>Is there a way I can force this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to call <code>.close()</code> on the filehandler.</p>
<p>When your <code>Run</code> class completes, call:</p>
<pre><code>handlers = self.log.handlers[:]
for handler in handlers:
    handler.close()
    self.log.removeHandler(handler)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also <a href="https://docs.python.org/3/library/logging.html#logging.shutdown" rel="nofollow noreferrer">shutdown the logging</a> completely. In that case, file handles are being released:</p>
<pre><code>logging.shutdown()
</code></pre>
<p>It will close opened handles of all configured logging handlers.</p>
<p>I needed it to be able to delete a log file after a unit test is finished and I was able to delete it right after the call to the <code>logging.shutdown()</code> method.</p>
</div>
<span class="comment-copy">Why not remove the handler again when the run finishes? Presumably you can hook into that event?</span>
<span class="comment-copy">Any advice on how to do that? I have tried with specifying self.log.removeHandler(myhandler) in __del__(), even by calling the destructor explicitly (myrun.__del__()). I've also tried by specifying in __exit__() and using a with statement, as suggested for opening filehandles with open. But no success so far.</span>
<span class="comment-copy">You need to call <code>.close()</code> on the filehandler too. <code>self.log.handlers[0].close()</code> should be enough, really.</span>
<span class="comment-copy">thanks, that worked!</span>
<span class="comment-copy">Won't <code>[:]</code> create a copy of the handlers list?</span>
<span class="comment-copy">@VasilisLemonidis: yes, that's the point. You should not iterate over a list and remove elements from it, you'll end up skipping elements.</span>
<span class="comment-copy">@VasilisLemonidis: the alternative could be to process elements in reverse: <code>for handler in reversed(self.log.handlers): ...</code>.</span>
<span class="comment-copy">Yes, but the <code>handler.close()</code> will be called for the copy of the handler, thus the real handler won't get closed, right? Or is there a different linking procedure for file descriptors?</span>
<span class="comment-copy">No, <code>[:]</code> only creates a <i>shallow</i> copy; a new list with references to the same objects as the old list. Those are still the same handlers.</span>
