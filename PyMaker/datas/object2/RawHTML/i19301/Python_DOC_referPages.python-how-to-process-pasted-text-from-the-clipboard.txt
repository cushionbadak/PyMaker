<div class="post-text" itemprop="text">
<p>I'm processing a string like this:</p>
<pre><code>    scrpt = "\tFrame\tX pixels\tY pixels\r\n\t2\t615.5\t334.5\r\n\t3\t615.885\t334.136\r\n\t4\t615.937\t334.087\r\n\t5\t615.917\t334.106\r\n\t6\t615.892\t334.129\r\n\t7\t615.905\t334.117\r\n\t8\t615.767\t334.246\r\n\t9\t615.546\t334.456\r\n\t10\t615.352\t334.643\r\n\r\n"

    infile = StringIO(scrpt)
    #pretend infile was just a regular file...

    r = csv.DictReader(infile, dialect=csv.Sniffer().sniff(infile.read(1000)))
    infile.seek(0)

    Frame, Xco, Yco = [],[],[]
    for row in r:
        Frame.append(row['Frame'])
        Xco.append(row['X pixels'])
        Yco.append(row['Y pixels'])
</code></pre>
<p>This works fine.  I get the string variable 'scrpt' sorted nicely into the the variables 'Frame', 'Xco', and 'Yco'</p>
<p>Now if I do this:</p>
<pre><code>print(scrpt)
</code></pre>
<p>I see things neatly laid out in tabbed columns like this:</p>
<pre><code>Frame   X pixels    Y pixels

2   615.5   334.5
3   615.885 334.136
4   615.937 334.087
5   615.917 334.106
6   615.892 334.129
7   615.905 334.117
8   615.767 334.246
9   615.546 334.456
10  615.352 334.643
</code></pre>
<p>But if I have the same string pasted from the clipboard and try to process it it doesn't work.
In this case, if I print it like this:</p>
<pre><code>print(scrpt)
</code></pre>
<p>I see:</p>
<pre><code>\tFrame\tX pixels\tY pixels\r\n\t2\t615.5\t334.5\r\n\t3\t615.885\t334.136\r\n\t4\t615.937\t334.087\r\n\t5\t615.917\t334.106\r\n\t6\t615.892\t334.129\r\n\t7\t615.905\t334.117\r\n\t8\t615.767\t334.246\r\n\t9\t615.546\t334.456\r\n\t10\t615.352\t334.643\r\n\r\n
</code></pre>
<p>Then when I go to process it the csv module won't sort it out.</p>
<p>What am I doing wrong?
It looks like I'm using the same data in both cases but something is different.</p>
</div>
<div class="post-text" itemprop="text">
<p>My guess is that your clipboard has literal backslash and <code>t</code> characters, not tab characters. For example, if you just copy from the first line of your source, that's exactly what you'll get.</p>
<p>In other words, it's as if you did this:</p>
<pre><code>scrpt = r"\tFrame\tX pixels\tY pixels\r\n\t2\t615.5\t334.5\r\n\t3\t615.885\t334.136\r\n\t4\t615.937\t334.087\r\n\t5\t615.917\t334.106\r\n\t6\t615.892\t334.129\r\n\t7\t615.905\t334.117\r\n\t8\t615.767\t334.246\r\n\t9\t615.546\t334.456\r\n\t10\t615.352\t334.643\r\n\r\n"
</code></pre>
<p>â€¦ or, equivalently:</p>
<pre><code>scrpt = "\\tFrame\\tX pixels\\tY pixels\\r\\n\\t2\\t615.5\\t334.5\\r\\n\\t3\\t615.885\\t334.136\\r\\n\\t4\\t615.937\\t334.087\\r\\n\\t5\\t615.917\\t334.106\\r\\n\\t6\\t615.892\\t334.129\\r\\n\\t7\\t615.905\\t334.117\\r\\n\\t8\\t615.767\\t334.246\\r\\n\\t9\\t615.546\\t334.456\\r\\n\\t10\\t615.352\\t334.643\\r\\n\\r\\n"
</code></pre>
<p>If that's the problem, the fix is pretty easy:</p>
<pre><code>scrpt = scrpt.decode('string_escape')
</code></pre>
<p>Or, in 3.x (where you can't call <code>decode</code> on a <code>str</code>):</p>
<pre><code>script = codecs.decode(script, 'unicode_escape')
</code></pre>
<p>The <code>unicode_escape</code> codec is described in the list of <a href="http://docs.python.org/3/library/codecs.html#standard-encodings" rel="nofollow">Standard Encodings</a> in the <code>codecs</code> module. It's defined as:</p>
<blockquote>
<p>Produce a string that is suitable as Unicode literal in Python source code</p>
</blockquote>
<p>In other words, if you <code>encode</code> with this codec, it will replace each non-printing Unicode character with an escape sequence that you can type into your source code. If you've got a tab character, it'll replace that with a backslash character and a <code>t</code>.</p>
<p>You want to do the exact reverse of that: you've got a string you copied out of source code, with source-code-style escape sequences, and you want to interpret it the same way the Python interpreter does. So, you just <code>decode</code> with the same codec. If you've got a backslash followed by a <code>t</code>, it'll replace them with a tab character.</p>
<p>It's worth playing with this in the interactive interpreter (remember to keep the <code>repr</code> and <code>str</code> representations straight while doing so!) until you get it.</p>
</div>
<span class="comment-copy">Are you sure your clipboard has tab characters, not literal backslashes followed by <code>t</code>s? (For example, if you copy and paste the string from the first line of your source code, you'll get backslashes and <code>t</code>s, not tabs.)</span>
<span class="comment-copy">That's the answer: scrpt = codecs.decode(scrpt, 'unicode_escape').  Could you explain briefly why this works? Is it replacing the '\t' with tabs?</span>
<span class="comment-copy">I'm new to 'Stack Overflow'.  Are we supposed to mark questions 'solved' like on other forums?</span>
<span class="comment-copy">@terrachild: You don't do anything to the <i>question</i>; you click the check mark to accept one of the <i>answers</i>.</span>
<span class="comment-copy">Meanwhile, I'll edit the answer to explain more.</span>
<span class="comment-copy">Thanks for your help.  That saved me a lot of time.</span>
