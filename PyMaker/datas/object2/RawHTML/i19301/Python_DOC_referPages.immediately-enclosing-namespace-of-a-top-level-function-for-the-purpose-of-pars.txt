<div class="post-text" itemprop="text">
<p>What does the Python <code>nonlocal</code> statement do (in Python 3.0 and later)? </p>
<p>There's no documentation on the official Python website and <code>help("nonlocal")</code> does not work, either.</p>
</div>
<div class="post-text" itemprop="text">
<p>Compare this, without using <code>nonlocal</code>:</p>
<pre><code>x = 0
def outer():
    x = 1
    def inner():
        x = 2
        print("inner:", x)

    inner()
    print("outer:", x)

outer()
print("global:", x)

# inner: 2
# outer: 1
# global: 0
</code></pre>
<p>To this, using <strong><code>nonlocal</code></strong>, where <code>inner()</code>'s <code>x</code> is now also <code>outer()</code>'s <code>x</code>:</p>
<pre><code>x = 0
def outer():
    x = 1
    def inner():
        nonlocal x
        x = 2
        print("inner:", x)

    inner()
    print("outer:", x)

outer()
print("global:", x)

# inner: 2
# outer: 2
# global: 0
</code></pre>
<blockquote>
<p>If we were to use <strong><code>global</code></strong>, it would bind <code>x</code> to the properly "global" value:</p>
<pre><code>x = 0
def outer():
    x = 1
    def inner():
        global x
        x = 2
        print("inner:", x)

    inner()
    print("outer:", x)

outer()
print("global:", x)

# inner: 2
# outer: 1
# global: 2
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In short, it lets you assign values to a variable in an outer (but non-global) scope.  See <a href="http://www.python.org/dev/peps/pep-3104/" rel="noreferrer">PEP 3104</a> for all the gory details. </p>
</div>
<div class="post-text" itemprop="text">
<p>A google search for "python nonlocal" turned up the Proposal, <a href="http://www.python.org/dev/peps/pep-3104/" rel="noreferrer">PEP 3104</a>, which fully describes the syntax and reasoning behind the statement.  in short, it works in exactly the same way as the <code>global</code> statement, except that it is used to refer to variables that are neither global nor local to the function. </p>
<p>Here's a brief example of what you can do with this.  The counter generator can be rewritten to use this so that it looks more like the idioms of languages with closures.</p>
<pre><code>def make_counter():
    count = 0
    def counter():
        nonlocal count
        count += 1
        return count
    return counter
</code></pre>
<p>Obviously, you could write this as a generator, like:</p>
<pre><code>def counter_generator():
    count = 0
    while True:
        count += 1
        yield count
</code></pre>
<p><em>But</em> while this is perfectly idiomatic python, it seems that the first version would be a bit more obvious for beginners.  Properly using generators, by calling the returned function, is a common point of confusion.  The first version explicitly returns a function.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>help('nonlocal')
  The <code>nonlocal</code> statement</p>
<hr/>
<pre><code>    nonlocal_stmt ::= "nonlocal" identifier ("," identifier)*
</code></pre>
<p>The <code>nonlocal</code> statement causes the listed identifiers to refer to
  previously bound variables in the nearest enclosing scope.  This is
  important because the default behavior for binding is to search the
  local namespace first.  The statement allows encapsulated code to
  rebind variables outside of the local scope besides the global
  (module) scope.</p>
<p>Names listed in a <code>nonlocal</code> statement, unlike to those listed in a
  <code>global</code> statement, must refer to pre-existing bindings in an
  enclosing scope (the scope in which a new binding should be created
  cannot be determined unambiguously).</p>
<p>Names listed in a <code>nonlocal</code> statement must not collide with pre-
  existing bindings in the local scope.</p>
<p>See also:</p>
<p><strong>PEP 3104</strong> - Access to Names in Outer Scopes<br/>
        The specification for the <code>nonlocal</code> statement.</p>
<p>Related help topics: global, NAMESPACES</p>
</blockquote>
<p>Source: <a href="https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="noreferrer">Python Language Reference</a></p>
</div>
<div class="post-text" itemprop="text">
<p>@ooboo:</p>
<p>It takes the one "closest" to the point of reference in the source code.
This is called "Lexical Scoping" and is standard for &gt;40 years now.</p>
<p>Python's class members are really in a dictionary called <code>__dict__</code> and will never be reached by lexical scoping.</p>
<p>If you don't specify <code>nonlocal</code> but do <code>x = 7</code>, it will create a new local variable "x".
If you do specify <code>nonlocal</code>, it will find the "closest" "x" and assign to that.
If you specify <code>nonlocal</code> and there is no "x", it will give you an error message.</p>
<p>The keyword <code>global</code> has always seemed strange to me since it will happily ignore all the other "x" except for the outermost one. Weird.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = 0    #1. global variable with respect to every function in program

def f():
    a = 0          #2. nonlocal with respect to function g
    def g():
        nonlocal a
        a=a+1
        print("The value of 'a' using nonlocal is ", a)
    def h():
        global a               #3. using global variable
        a=a+5
        print("The value of a using global is ", a)
    def i():
        a = 0              #4. variable separated from all others
        print("The value of 'a' inside a function is ", a)

    g()
    h()
    i()
print("The value of 'a' global before any function", a)
f()
print("The value of 'a' global after using function f ", a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>My personal understanding of the "nonlocal" statement (and do excuse me as I am new to Python and Programming in general) is that the "nonlocal" is a way to use the Global functionality within iterated functions rather than the body of the code itself. A Global statement between functions if you will.</p>
</div>
<div class="post-text" itemprop="text">
<p>Quote from the <a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" rel="nofollow noreferrer">Python 3 Reference</a>:</p>
<blockquote>
<p>The nonlocal statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals.</p>
</blockquote>
<p>As said in the reference, in case of several nested functions only variable in the nearest enclosing function is modified:</p>
<pre><code>def outer():
    def inner():
        def innermost():
            nonlocal x
            x = 3

        x = 2
        innermost()
        if x == 3: print('Inner x has been modified')

    x = 1
    inner()
    if x == 3: print('Outer x has been modified')

x = 0
outer()
if x == 3: print('Global x has been modified')

# Inner x has been modified
</code></pre>
<p>The "nearest" variable can be several levels away:</p>
<pre><code>def outer():
    def inner():
        def innermost():
            nonlocal x
            x = 3

        innermost()

    x = 1
    inner()
    if x == 3: print('Outer x has been modified')

x = 0
outer()
if x == 3: print('Global x has been modified')

# Outer x has been modified
</code></pre>
<p>But it cannot be a global variable:</p>
<pre><code>def outer():
    def inner():
        def innermost():
            nonlocal x
            x = 3

        innermost()

    inner()

x = 0
outer()
if x == 3: print('Global x has been modified')

# SyntaxError: no binding for nonlocal 'x' found
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>with 'nonlocal' inner functions(ie;nested inner functions) can get read &amp; '<strong><em>write</em></strong>' permission <em>for that specific variable of the outer parent function</em>. And nonlocal can be used only inside inner functions
eg:</p>
<pre><code>a = 10
def Outer(msg):
    a = 20
    b = 30
    def Inner():
        c = 50
        d = 60
        print("MU LCL =",locals())
        nonlocal a
        a = 100
        ans = a+c
        print("Hello from Inner",ans)       
        print("value of a Inner : ",a)
    Inner()
    print("value of a Outer : ",a)

res = Outer("Hello World")
print(res)
print("value of a Global : ",a)
</code></pre>
</div>
<span class="comment-copy">Take a look at this question: <a href="http://stackoverflow.com/questions/1414304/local-functions-in-python" title="local functions in python">stackoverflow.com/questions/1414304/local-functions-in-python</a></span>
<span class="comment-copy">Here is the official Python website documentation for nonlocal: <a href="http://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement" rel="nofollow noreferrer">docs.python.org/3/reference/â€¦</a> (this documentation has been available since Python 3.0, so the OP's assertion that there is no official documentation was just wrong)</span>
<span class="comment-copy"><code>"There is no documentation for nonlocal".</code> Actually, you can do <code>help(keyword_in_string)</code> for documentations in Python 3 and above</span>
<span class="comment-copy">To be fair the official docs kind of suck on the subject. The selected answer's example makes things very clear, making this a valuable question.</span>
<span class="comment-copy">In the official Python tutorial there is a <a href="https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces" rel="nofollow noreferrer">good explanation of the concept of scopes and namespaces</a> with a <a href="https://docs.python.org/3/tutorial/classes.html#scopes-and-namespaces-example" rel="nofollow noreferrer">nice example</a>.</span>
<span class="comment-copy">How is that different than global x?</span>
<span class="comment-copy">Its very similar - but note that the outer x is not global in the example but is instead defined in the outer function.</span>
<span class="comment-copy">@Dustin - Actually, if you had class A with an attribute x and a subclass B defined in it, you would refer to x from within B as A.x</span>
<span class="comment-copy">The code easily gets heavily indented when defining inner functions and ends up violating the 79 chars PEP8 recommendation. Any way to get around this problem? Can an inner function somehow be placed outside the outer function? I know the question sounds stupid, but I'm earnest.</span>
<span class="comment-copy">@tommy.carstensen you could pass the function as an arg that's the beauty of higher order functions. Also in functional programming this is called composition, python is not a pure FP language but you can certainly play with a features (generators, higher order functions are some examples)</span>
<span class="comment-copy">I was sure that's what the keyword 'global' does - works up higher enviornments until it reaches a variable with that name. a variable x could be declared at module level, inside a class, then separately in a function inside this class and then in an inner function of that function - how does it know which x to refer to?</span>
<span class="comment-copy">the thing about global is that it only works for global variables.  it cannot see variables in an enclosing, nonglobal scope.</span>
<span class="comment-copy">I tried the make_counter - however it doesn't return a generator but a function. is there a way to return a generator so later i could iterate over it?</span>
<span class="comment-copy">@Dejel: this example is intended to illustrate the <code>nonlocal</code> statement in Python;  If you want a sequence of natural numbers, the python idiom is actually <a href="http://docs.python.org/2/library/itertools#itertools.count" rel="nofollow noreferrer"><code>itertools.count()</code></a></span>
<span class="comment-copy">I would like to demo the ability to return a generator like with yield - yield actually returns a generator. My idea is not to use yield and instead maybe use nonlocal or another solution</span>
<span class="comment-copy">Learn something new every day. I had no idea you could use <code>help()</code> on keywords (and now my mind is blown: <code>help()</code> with no arguments goes <i>interactive</i>).</span>
