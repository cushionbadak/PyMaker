<div class="post-text" itemprop="text">
<p>Bear with me as I'm fairly new to programming. My basic question is this. I have a program written in Haskell whose stdout I want to connect to the stdin of a Python program (which will manage the GUI related stuff). Similarly, I want to connect the stdout of the Python program to the stdin of the Haskell program so that it can send information about what the user clicked/typed in to the Haskell program. </p>
<p>The first question is this, if I set up a pipeline between the two, assuming the stdout of the Python program is hooked up to the Haskell program, if I use Tkinter to create widgets and stuff, will they be displayed on the screen nonetheless?</p>
<p>The second question is how exactly would I establish this pipeline? Consider the following example code..</p>
<pre><code>main :: IO ()
main = do
    -- putStrLn "Enter a number." &lt;- this will be displayed in Python
    string &lt;- getLine
    putStrLn $ 5 + read string::Int -- or any equivalent function to send to stdout
</code></pre>
<p>The Python code would look something like this.</p>
<pre><code>from Tkinter import *
root = Tk()

label = Label(root, text = "Enter a number.")
label.pack()

enternum = Entry(root)
enternum.pack()
enternum.bind("&lt;Return&gt;", print_num)

-- print_num would essentially be a function to send the Haskell program the number
-- which would be received by the getLine function the way I have it.
</code></pre>
<p>I'm sorry if this has already been asked before, but thanks for helping me out!</p>
</div>
<div class="post-text" itemprop="text">
<p>I did it using <a href="http://twistedmatrix.com/" rel="nofollow">Twisted</a> since it provides great abstraction over polling. Basically you need to first define the ways (called protocol in Twisted) how Python and Haskell programs communicate with each other, E.g., how long a data packet is, how to handle errors etc. Then you just code them up.</p>
<p>Here is the haskell code:</p>
<pre><code>-- File "./Hs.hs"

import Control.Concurrent                                                   
import System.IO

main = do
  -- Important
  hSetBuffering stdout NoBuffering

  -- Read a line
  line &lt;- getLine

  -- parse the line and add one and print it back
  putStrLn (show (read line + 1))

  -- Emphasize the importance of hSetBuffering :P
  threadDelay 10000000
</code></pre>
<p>And here is the Python code:</p>
<pre><code># File "./pyrun.py"

import os                                                                   
here = os.path.dirname(os.path.abspath(__file__))

from twisted.internet import tksupport, reactor, protocol
from twisted.protocols.basic import LineReceiver

from Tkinter import Tk, Label, Entry, StringVar

# Protocol to handle the actual communication
class HsProtocol(protocol.ProcessProtocol):
    def __init__(self, text):
        self.text = text

    def connectionMade(self):
        # When haskell prog is opened
        towrite = self.text + '\n'

        # Write a line to the haskell side
        self.transport.write(towrite)

    def outReceived(self, data):
        # When haskell prog write something to the stdout
        # Change the label in the tk window to be the received data
        label_var.set(data[:-1])

def send_num_to_hs(_event):
    content = enternum.get()

    # The abspath of the haskell program
    prog = os.path.join(here, 'Hs')
    reactor.spawnProcess(HsProtocol(content), # communication protocol to use                                           
                         prog, # path
                         [prog] # args to the prog
                         )

# Setting up tk
root = Tk()

# On main window close, stop the tk reactor
root.protocol('WM_DELETE_WINDOW', reactor.stop)

# Since I'm going to change that label..
label_var = StringVar(root, 'Enter a number')

# Label whose content will be changed
label = Label(root, textvariable=label_var)
label.pack()

# Input box
enternum = Entry(root)
enternum.pack()
enternum.bind('&lt;Return&gt;', send_num_to_hs)

# Patch the twisted reactor
tksupport.install(root)

# Start tk's (and twisted's) mainloop
reactor.run()                                                                                                           
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also establish the pipeline from a command shell:</p>
<p>mypython.py | myhaskell.hs</p>
<p>The Haskell program will respond the same as it would to
any other type of standard input, as in:</p>
<p>myhaskell.hs 
    </p></div>
<span class="comment-copy">"if I set up a pipeline between the two, assuming the stdout of the Python program is hooked up to the Haskell program, if I use Tkinter to create widgets and stuff, will they be displayed on the screen nonetheless?" - try it and see? As long as you're taking care to not block the thread where the Tk event loop runs with reading from the Haskell process, it should work.</span>
<span class="comment-copy">To establish the pipeline, look at the <a href="http://docs.python.org/3/library/subprocess.html" rel="nofollow noreferrer"><code>subprocess</code> module</a>. It's probably easiest if you can execute the Haskell program from Python instead of the other way around or (even worse) trying to connect two independently running programs.</span>
<span class="comment-copy">Thank you so much! I'll try starting at the subprocess module. :)</span>
<span class="comment-copy">Do you have any tips on which functions/methods in the subprocess module to get started with? Most of them advise against using stdin=PIPE or stdout=PIPE, etc. which I thought was the correct thing to do in this instance.</span>
<span class="comment-copy">Make sure you <code>hSetBuffering stdout NoBuffering</code> in Haskell (say, at the beginning of <code>main</code>).  Otherwise block buffering will keep the python program from getting the haskell program's output in a timely manner.</span>
<span class="comment-copy">Thank you so much. I actually just got it working using the subprocess module. I can post my solution to the problem if anyone's interested, it's a bit shorter. However, your solution looks great too!</span>
<span class="comment-copy">I downvoted. This pipe is unidirectional -- clearly not what was asked for in the question -- and this caveat should be at the very least mentioned in the answer.</span>
