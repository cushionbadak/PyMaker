<div class="post-text" itemprop="text">
<p>The following is syntactically invalid:</p>
<pre><code>if extremely_long_condition_that_takes_up_a_whole_line and
  another_condition:
    #do something
</code></pre>
<p>The following is valid:</p>
<pre><code>if (extremely_long_condition and
  another_condition):
    #do something
</code></pre>
<p>Why are these different?  More generally, why is #2 okay but #1 somehow dangerous/ambiguous?  I can't see how the first statement is or generalizes to an ambiguous statement.</p>
</div>
<div class="post-text" itemprop="text">
<p>Brackets imply line continuation until they are closed.</p>
<p><a href="http://www.python.org/dev/peps/pep-0008/#maximum-line-length">PEP-8 talks about this</a>:</p>
<blockquote>
<p>The preferred way of wrapping long lines is by using Python's implied
  line continuation inside parentheses, brackets and braces. Long lines
  can be broken over multiple lines by wrapping expressions in
  parentheses. These should be used in preference to using a backslash
  for line continuation.</p>
</blockquote>
<p>Or, it is discussed more formally in the <a href="http://docs.python.org/3/reference/lexical_analysis.html#explicit-line-joining">language reference</a>:</p>
<blockquote>
<p>Two or more physical lines may be joined into logical lines using
  backslash characters (\)</p>
<p>Expressions in parentheses, square brackets or curly braces can be
  split over more than one physical line without using backslashes.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Without the braces, it is definitely ambiguous in the presence of unary operators.</p>
<p>Consider the line:</p>
<pre><code>a = 3 + 4
+1
</code></pre>
<p>Here you have a simple addition followed by the unary positive operator.</p>
<p>You may argue that a line with a trailing operator is not ambiguous (and I can't currently think of a counter example), so I'll fall back on the "special cases aren't special enough to break the rules" portion of the zen of python.</p>
<hr/>
<p>Also note that the way it is now, you can join strings across multiple lines <em>without an operator</em>:</p>
<pre><code>a = ("Hello "
     "World")
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another valid, lose parenthesis <em>(not recommended by <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP 8</a>)</em> :</p>
<pre><code>if extremely_long_condition_that_takes_up_a_whole_line and \
  another_condition:
    #do something
</code></pre>
<p>From <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP 8</a> :</p>
<blockquote>
<p>The preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces. Long lines can be broken over multiple lines by wrapping expressions in parentheses. <strong>These should be used in preference to using a backslash for line continuation.</strong> Make sure to indent the continued line appropriately. </p>
</blockquote>
<p>I suggest you to read <a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow">PEP 8</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>All parentheses come with line continuations built-in. I'm not sure about <code>and</code> in particular, but the reason that line continuations are discouraged (<code>\</code>-style) is that trailing whitespace can invalidate the the command, and they're difficult to see. Trailing whitespace within parens will never break it, though.</p>
</div>
<div class="post-text" itemprop="text">
<p>Of course you can use functions to make it more understandable. </p>
<p>Instead of:</p>
<pre><code>if (extremely_long_condition_that_takes_up_a_whole_line and
  another_condition):
    #do something
</code></pre>
<p>You could do:</p>
<pre><code>def cond():
    extremely_long_condition_that_takes_up_a_whole_line

def another_condition():
     # whatever

if cond() and another_condition():
     #do something 
</code></pre>
<p>Or, if you have a bunch of conditions:</p>
<pre><code>if all(conditions(x) for x in seq):
     #do something
</code></pre>
<p>The design of Python is meant to encourage long lines and blocks to be broken up into smaller more readable bits.  You are running into that encouragement.</p>
<p>I try and hold lines to 70 characters.  </p>
<p>The hard ones for me are restring the length of nested comprehensions. I break those so that the break actually aids readability.</p>
</div>
<span class="comment-copy">While this is right and accurately describes python's behavior, I think that OP already knows that.  OP is curious <i>why</i> you need braces to avoid ambiguity.</span>
<span class="comment-copy">@mgilson This is true, I didn't read the question closely enough it seems. Fortunately you have it covered, +1 to your answer, which is really what the OP was looking for.</span>
<span class="comment-copy">I didn't read the title close enough though -- maybe OP doesn't understand it as well as I thought as this correctly addresses the question in the title.  +1 to you too.</span>
<span class="comment-copy">Yes, your example is clearly ambiguous.  My question was intended for the trailing operator case, and I can't think of any counterexamples either.  I suppose I just find it a bit odd.  In C or Java for instance it is completely explicit where a statement ends and ending a statement with an operator isn't uncommon.  For that matter I also find python's indentations really annoying and I think it is nothing less than a bug in the language design that I can't write a multiline anonymous function.  But anyway... such is the world.</span>
<span class="comment-copy">@aestrivex The offside rule and newline-as-statement-end is not negotiable as far as the language designers (and many users!). But breaking lines is important too, so the question is how to allow it. Turns out there is no sane (read: simple to implement and understand) scheme that preserves the aforementioned requirements <i>and</i> consistently allows continuing lines without explicit request (brackets, or `` before newline). Have a look at JavaScript's semicolon insertion or at Scala for how "guessing" statement ends goes wrong.</span>
