<div class="post-text" itemprop="text">
<p>I have one list of the form:</p>
<pre><code>&gt;&gt;&gt; my_list = ['BLA1', 'BLA2', 'BLA3', 'ELE1', 'ELE2', 'ELE3', 'PRI1', 'PRI2', 'NEA1', 'NEA2', 'MAU1', 'MAU2', 'MAU3']
</code></pre>
<p>and I want to create a new list, grouping the repeated elements into lists inside my new list, so at the end I will have:</p>
<pre><code>&gt;&gt;&gt; new_list = [['BLA1', 'BLA2', 'BLA3'], ['ELE1', 'ELE2', 'ELE3'], ['PRI1', 'PRI2'], ['NEA1', 'NEA2'], ['MAU1', 'MAU2', 'MAU3']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use <a href="http://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a>:</p>
<pre><code>import itertools

[list(group) for key, group in itertools.groupby(my_list, key=lambda v: v[:3])]
</code></pre>
<p>The <code>key</code> argument is needed here to extract just the part of the value you wanted to group <em>on</em>; the first 3 characters.</p>
<p>Result:</p>
<pre><code>&gt;&gt;&gt; my_list = ['BLA1', 'BLA2', 'BLA3', 'ELE1', 'ELE2', 'ELE3', 'PRI1', 'PRI2', 'NEA1', 'NEA2', 'MAU1', 'MAU2', 'MAU3']
&gt;&gt;&gt; [list(group) for key, group in itertools.groupby(my_list, key=lambda v: v[:3])]
[['BLA1', 'BLA2', 'BLA3'], ['ELE1', 'ELE2', 'ELE3'], ['PRI1', 'PRI2'], ['NEA1', 'NEA2'], ['MAU1', 'MAU2', 'MAU3']]
</code></pre>
<p><code>groupby</code> will combine successive keys that are equal into 1 group. If you have disjoint groups (so same value, but with other values in between) it'll create separate groups for those:</p>
<pre><code>&gt;&gt;&gt; my_list = ['a1', 'a2', 'b1', 'b2', 'a3', 'a4']
&gt;&gt;&gt; [list(group) for key, group in itertools.groupby(my_list)]
[['a1', 'a2'], ['b1', 'b2'], ['a3', 'a4']]
</code></pre>
<p>If that is not what you want you will have to sort <code>my_list</code> first.</p>
</div>
<div class="post-text" itemprop="text">
<p>Make sure it's sorted and use</p>
<pre><code>itertools.groupy
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As an alternative to groupby, you could use <a href="http://docs.python.org/2/library/collections.html#counter-objects" rel="nofollow"><code>collections.Counter</code></a>:</p>
<pre><code>In [40]: from collections import Counter

In [41]: [ [k]*v for (k,v) in Counter(my_list).iteritems() ]
Out[41]: 
[['PRI', 'PRI'],
 ['NEA', 'NEA'],
 ['BLA', 'BLA', 'BLA'],
 ['MAU', 'MAU', 'MAU'],
 ['ELE', 'ELE', 'ELE']]
</code></pre>
<p>This will work without the need to sort the list if the elements are all jumbled up, unlike groupby.</p>
</div>
<span class="comment-copy">sorry, I did not explain myself correctly.  my list is:  &gt;&gt;&gt; my_list = ['BLA1', 'BLA2', 'BLA3', 'ELE1', 'ELE2', 'ELE3', 'PRI1', 'PRI2', 'NEA1', 'NEA2', 'MAU1', 'MAU2', 'MAU3']  And i want to obtain:  new_list = [['BLA1', 'BLA2', 'BLA3'], ['ELE1', 'ELE2', 'ELE3'], ['PRI1', 'PRI2'], ['NEA1', 'NEA2'], ['MAU1', 'MAU2', 'MAU3']]</span>
<span class="comment-copy">@user2208885: Not sure what is missing in your explanation then; your input and output are matched.</span>
<span class="comment-copy">Yes, what you answered was correct, was my mistake in the explanation of the problem ^^</span>
<span class="comment-copy">@user2208885: easily updated.</span>
<span class="comment-copy">Awesome! Thank you very much! :)</span>
<span class="comment-copy">With the updated question, your solution no longer works, I fear.</span>
<span class="comment-copy">@Martijn - so I see.  In that case I would go with your updated solution.</span>
