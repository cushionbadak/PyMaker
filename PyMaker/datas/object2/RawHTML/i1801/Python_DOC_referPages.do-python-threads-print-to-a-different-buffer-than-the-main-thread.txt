<div class="post-text" itemprop="text">
<p>I have a project I am working on but I have brought out the problem into a small sample code below. I first create a socket and then spawn a thread to accept connections (so I can have multiple clients connect). When I receive a connection, I then spawn another thread that will listen on that connection. I am also in a loop that gives me a prompt where I can enter anything, and it will print it back out to me.</p>
<p>The issue lies when I recieve something through the socket. It will print to the screen. But when I try to type anything in the console, the text that is on my console that came from the socket gets removed. I want to keep everything from the socket to remain on the screen.</p>
<pre><code>import sys
import socket
from _thread import *

def recv_data(conn):
    while True:
        data = conn.recv(256)
        print(data)

def accept_clients(sock):
    while True:
        conn, addr = sock.accept()
        print("\nConnected with %s:%s\n" % (addr[0], str(addr[1])))
        start_new_thread(recv_data, (conn,))

def start_socket(ip, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Socket created")

    try:
        port = int(port)
    except ValueError:
        print("Invalid port number.")
        return

    try:
        sock.bind((ip, int(port)))
    except socket.error as msg:
        print("Bind failed. Error Code : %s" % (msg))
        return

    print("Socket bind complete")
    sock.listen(5)
    print("Socket now listening")

    start_new_thread(accept_clients, (sock,))

def get_input():
    while True:
        data = input("cmd&gt; ")
        print(data)


start_socket('localhost', 5555) 
get_input() 
</code></pre>
<p>Pictures can be found here of what it is doing: <a href="https://imgur.com/a/hCWznfE" rel="nofollow noreferrer">https://imgur.com/a/hCWznfE</a></p>
<p><a href="https://i.stack.imgur.com/Uiu2e.png" rel="nofollow noreferrer"><img alt="I started the server and typed in the prompt (cmd&gt;). It takes my input and prints it back to me." src="https://i.stack.imgur.com/Uiu2e.png"/></a></p>
<p><a href="https://i.stack.imgur.com/tvk7a.png" rel="nofollow noreferrer"><img alt="Now I used netcat and connected to the server. The server shows that a client was connected." src="https://i.stack.imgur.com/tvk7a.png"/></a></p>
<p><a href="https://i.stack.imgur.com/Or5Yz.png" rel="nofollow noreferrer"><img alt="I use netcat to send messages to the server, and the server displays." src="https://i.stack.imgur.com/Or5Yz.png"/></a></p>
<p><a href="https://i.stack.imgur.com/RF9RQ.png" rel="nofollow noreferrer"><img alt="I go back to the server and start to type and the strings from the client are removed and I am back at the prompt." src="https://i.stack.imgur.com/RF9RQ.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>The answer to your question in the subject line (about buffering for <code>sys.stdout</code>, to which <code>print</code> writes by default) is essentially no: each thread talks to the same <code>sys.stdout</code> object, which just has one buffer in general, though of course you can alter <code>sys.stdout</code> if you like, and you can supply <code>file=whatever</code> arguments to <code>print()</code>.</p>
<p>This specific part, however, is explainable:</p>
<blockquote>
<p>But when I try to type anything in the console, the text that is on my console that came from the socket gets removed. I want to keep everything from the socket to remain on the screen.</p>
</blockquote>
<p>Python's input reader goes through a <code>readline</code> library by default.  There are multiple different readline libraries with varying behavior, but most of them provide input history, line editing, and other fancy features.  They tend to <em>implement</em> these fancy features by moving the cursor around in your terminal window—assuming you're using some kind of terminal window in the first place—and using "clear to end of line" operations at times.  These operations will often interfere with, and overwrite or erase, other output that occurs before, during, and/or after these fancy tricks.</p>
<p>The precise details vary, quite a lot, based on your OS, terminal emulator, and which readline library your Python is using.</p>
</div>
<span class="comment-copy">I don't see a logical issue (yet), so maybe it's a technological detail.  I also don't understand clearly enough what it is you expect to see and what you see instead.  Maybe you could provide this information (by extending your post)?</span>
<span class="comment-copy">Btw, <code>_thread</code> is normally not used on high-level programs.  Consider using module <code>threading</code> instead.  It provides a nice <code>Thread</code> class which is easier to handle than the <code>_thread</code> stuff.</span>
<span class="comment-copy">I tried your code and couldn't reproduce the issue.  Everything looks exactly as I would expect it with this code (i. e. the prompt doesn't get shifted down when data arriving through a connection is printed, etc.).</span>
<span class="comment-copy">@Alfe Are you using Python 3.7.1? I know the specific version probably doesn't matter. I will update my post with more information</span>
<span class="comment-copy">Any way to find out that information? I had a version of my program running properly on 2.x. I converted things to 3.x and in the process I must have removed something important. But I have this pretty much barebones as much as I can and I am just not to sure what it could be.</span>
<span class="comment-copy">Not sure how much you can tell portably. See <a href="https://docs.python.org/3/library/readline.html" rel="nofollow noreferrer">docs.python.org/3/library/readline.html</a> for baseline.</span>
<span class="comment-copy">It's a Windows issue.  Avoid using <code>input()</code> then.  If you use a straight forward <code>sys.stdin.readline()</code> no readline library will interfere with your input.  You will have the default editing options then, probably nothing more fancy than backspace.  No cursor keys, etc.  But at least it will leave your cursor where it was placed by the other threads.</span>
<span class="comment-copy">Well this is the answer. I started to think awhile ago that I needed to test it on Linux. Always ran into some sort of roadblock setting the environment up and gave up and figured if it worked on Windows before then I should be able to get it to work. Turns out I should have pushed harder and save myself 3 days of work. After all, this program is going to be running on Unix only anyways so I should have started it on Unix. Chalk it up as a lesson learned. Submit it and I will accept it as an answer. And again thank you for your help.</span>
