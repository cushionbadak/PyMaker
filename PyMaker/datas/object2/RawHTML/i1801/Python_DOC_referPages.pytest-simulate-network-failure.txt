<div class="post-text" itemprop="text">
<p>I am attempting an integration test using pytest for my application developed in python3.7 and asyncio. The application is supposed to connect to a remote server and if the network fails, my application should detect this and attempt to reconnect at a specified interval. Typically, in my integration test, I have my remote server already running and listening on a TCP port. My application should connect to that port and I will check that the connection was successful. Then I need to simulate a network outage in which application looses connection to the server and test the behaviour of the application while the network is not operational and then I need to bring the network back online and confirm that the app will properly reconnect and perform it's tasks. For the purposes of my integration testing all this stuff is running on my localhost.</p>
<p>Does pytest already have something for this usecase or should I build some sort of proxy server myself? How would I go about doing this?</p>
</div>
<div class="post-text" itemprop="text">
<p>Pytest doesn't have any feature to simulate network failure because it's just test runner.</p>
<p>You need to use external mock-server that can emulate connection failure or long response time. For this purpose I use and recommend mock-server Mountebank: <a href="http://www.mbtest.org/" rel="nofollow noreferrer">http://www.mbtest.org/</a></p>
<p>With Mountebank you will be able to emulate any response from remote server. You can manage Mountebank behavior directly by API or use client libraries: <a href="http://www.mbtest.org/docs/clientLibraries" rel="nofollow noreferrer">http://www.mbtest.org/docs/clientLibraries</a></p>
</div>
<span class="comment-copy">This question would benefit from some sample code (<a href="https://stackoverflow.com/help/mcve">MVCE</a>). If it's a web request, <a href="https://github.com/getsentry/responses" rel="nofollow noreferrer">responses</a> is ideal. If not, the <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow noreferrer">@patch</a> decorator is helpful. In either case, isolating your network code to an easily-mocked class is a good idea. Then you can unit test the network code and mock it out elsewhere to keep your code suite less fragile. I'd put this in an answer, but the question isn't specific enough yet.</span>
