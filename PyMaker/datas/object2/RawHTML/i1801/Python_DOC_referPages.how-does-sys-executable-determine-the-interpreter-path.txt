<div class="post-text" itemprop="text">
<p>I've installed python on mac with homebrew. Some tools (pipenv for example) have some troubles because they try to write to <code>/lib/python3.7/site-packages/</code>, not permitted under mac. After some investigation I found that they start a new python interpreter found in <code>sys.executable</code> that is effectively inconsistent with the python path installed by homebrew.</p>
<pre><code>$ which python
/usr/local/bin/python
$ python -c "import sys; print(sys.executable)"
/usr/local/opt/python/bin/python3.7
</code></pre>
<p>I would expect that these path points to the same binary, why is it not so? How can I control <code>sys.executable</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>It is determined at runtime (by the <a href="https://github.com/python/cpython/blob/v3.7.1/Modules/getpath.c#L526-L614" rel="nofollow noreferrer"><code>calculate_program_full_path()</code> function in <code>Module/getpath.c</code></a>, to be exact. It is usually based of the <code>argv[0]</code> value that the OS passed in.</p>
<p>You can set an alternative value by setting the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONEXECUTABLE" rel="nofollow noreferrer"><code>PYTHONEXECUTABLE</code> environment variable</a>.</p>
<p><strong>However</strong>, on homebrew builds, a bit more is going on. Homebrew forces the issue and sets <code>sys.executable</code> directly in a <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer"><code>sitecustomize.py</code> module</a> <a href="https://github.com/Homebrew/homebrew-core/blob/master/Formula/python.rb#L317-L333" rel="nofollow noreferrer">generated at install time</a>:</p>
<pre><code>$ tail -n2 /usr/local/Cellar/python/3.7.0/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/sitecustomize.py
    # Set the sys.executable to use the opt_prefix
    sys.executable = '/usr/local/opt/python/bin/python3.7'
</code></pre>
<p>This blithely ignores <code>PYTHONEXECUTABLE</code> even if set.</p>
<p>So what is going on, why does homebrew clobber <code>sys.executable</code>?</p>
<p>Homebrew Python is a <a href="https://github.com/python/cpython/blob/v3.7.1/Mac/README" rel="nofollow noreferrer">MacOS framework build</a>, so you can run GUI apps with this Python binary. A binary inside a framework bundle is placed under very strict requirements by Apple as to what you can do with it, including what the executable name is allowed to be set to. To work around these the framework binary is actually a <a href="https://github.com/python/cpython/blob/v3.7.1/Mac/Tools/pythonw.c" rel="nofollow noreferrer">wrapper </a>) that translates takes to a better path, sets the <code>__PYVENV_LAUNCHER__</code> environment variable and launches the <em>actual</em> python binary located at <code>Resources/Python.app/Contents/MacOS/Python</code>, which then uses the <code>__PYVENV_LAUNCHER__</code> environment variable to inform <code>sys.executable</code>.</p>
<p>The path the wrapper sets has any symlinks <em>in the directory name</em> resolved. Since homebrew makes <code>/usr/local/opt/python</code> a symlink to a specific Python bottle directory, running <code>/usr/local/opt/python/bin/python3</code> results in <code>sys.executable</code> being set to the linked bottle path:</p>
<pre><code>$ /usr/local/opt/python/bin/python3 -S -c 'import sys; print(sys.executable)'
/usr/local/Cellar/python/3.7.0/bin/python3
</code></pre>
<p>which defeats the purpose of the symlink, and can lead to broken pip-installed scripts each time homebrew makes a minor version update to the Python formula.</p>
<p>I'd like for homebrew to at least <em>check if <code>PYTHONEXECUTABLE</code> is set</em> here. You can force the issue yourself by just setting <code>sys.executable</code> directly:</p>
<pre><code>import os, sys

if 'PYTHONEXECUTABLE' in os.environ and :
    sys.executable = os.environ['PYTHONEXECUTABLE']
</code></pre>
<p>I've opened a report <a href="https://github.com/Homebrew/homebrew-core/issues/33963" rel="nofollow noreferrer">to request the homebrew Python formula checks for <code>PYTHONEXECUTABLE</code></a> and <a href="https://github.com/Homebrew/homebrew-core/pull/33969" rel="nofollow noreferrer">included a suggested fix</a>.</p>
</div>
<span class="comment-copy">Is <code>/usr/local/bin/python</code> a symlink? Shouldnt you be using <code>sys.argv[0]</code> ? <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer">docs.python.org/3/library/sys.html#sys.argv</a></span>
<span class="comment-copy">Thank you for the thorough answer, I never imagined this is so complicated. Meanwhile, I figured out that the fact that pipenv tried to write to <code>/lib/...</code> was caused by a <code>setup.cfg</code> left in the project folder from a previous version; removing that makes working everything like charm. But anyway it is a very interesting topic I learned something new.</span>
<span class="comment-copy">@MrTJ: right, had you mentioned you had a problem with pipenv I could have focused on that; that's a new problem on top. :-)</span>
<span class="comment-copy">@MrTJ: not that I have heard of <code>setup.cfg</code> affecting <code>pipenv</code> to that extend; were you using <code>pipenv install -e .</code> to include the current setuptools-configured project?</span>
