<div class="post-text" itemprop="text">
<p>I am currently going through 6.00.1x with MITx and recursion of string, but the following code really confuses me. This is supposed to tell whether a string is a palindrome (one which reads the same backward as forward), with <code>abcba</code> as a test string I use:</p>
<pre><code>def isPalindrome(s):

    def toChars(s):
        s = s.lower()
        ans = ''
        for c in s:
            if c in 'abcdefghijklmnopqrstuvwxyz':
                ans = ans + c
        return ans

    def isPal(s):
        if len(s) &lt;= 1:
            return True
        else:
            return s[0] == s[-1] and isPal(s[1:-1])

    return isPal(toChars(s))

isPalindrome('abcba')
</code></pre>
<p>The line <code>return s[0] == s[-1] and isPal(s[1:-1])</code> really confuses me: I ran it on Python Tutor and it seems that upon running this line the first time, it goes recursively first, ie cutting out <code>bcb</code> and <code>c</code>, then as <code>c</code> would be the base case, it returns true and likewise for <code>bcb</code>.</p>
<p>2 things I am confused:</p>
<ol>
<li><p>Why does it go recursively the first time when it runs this line of code? <code>s[0] == s[-1]</code> should return a Boolean value T/F, but this seems to have been ignored till it reaches the base case?</p></li>
<li><p>So the recursion runs till it reaches the base case - that I get, but then the s[0] == s[-1] doesn't start running only till it reaches here...why? And how did the syntax of the code instruct the computer to evaluate s[0] == s[-1] on bcb?</p></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Well you have to think through this step by step:</p>
<ol>
<li>You pass <code>abcba</code> to <code>isPalindrome</code></li>
<li><code>isPalindrome</code> calls <code>isPal(toChars(s))</code></li>
<li><code>toChars(s)</code> returns <code>"abcba"</code> so this is passed to <code>isPal(..)</code></li>
<li><code>isPal</code> is called with the argument <code>"abcba"</code>.</li>
<li>Check: is <code>len(s)&lt;=1</code>? No, <code>len(s)</code> is <code>5</code>.</li>
<li>So to <code>else</code>: is <code>s[0] == s[-1]</code>? Yes. If it wasn't, this function would stop right here and return <code>False</code>. But now to the next step.</li>
<li>Since <code>s[0] == s[-1]</code> is <code>True</code> we need to evaluate <code>isPal(s[1:-1])</code>. Keep in mind, that <code>s[1:-1]</code> is now <code>"bcb"</code>. So run <code>isPal("bcb")</code>.

<ol>
<li><code>len("bcb")</code> is <code>3</code> so go to <code>else</code>.</li>
<li><code>s[0] == s[-1]</code> is <code>True</code>. Evaluate <code>isPal(s[1:-1])</code> where <code>s[1:-1]</code> now is <code>"c"</code>.

<ol>
<li><code>len(s)</code> is <code>1</code>, therefore: <code>return True</code></li>
</ol></li>
<li><code>isPal(s[1:-1])</code> returned <code>True</code> so <code>s[0] == s[-1] and isPal(s[1:-1])</code> is <code>True</code>. Return <code>True</code>.</li>
</ol></li>
<li><code>isPal(s[1:-1])</code> returned <code>True</code> so <code>s[0] == s[-1] and isPal(s[1:-1])</code> is <code>True</code>.</li>
<li><code>isPal(toChars(s))</code> returns <code>True</code>: You have a palindrome!</li>
</ol>
<p>Hope this makes it clearer for you.</p>
<p><strong>EDIT</strong> Step 6 does always come before Step 7 because Python explicitly goes from left to right in logical expressions, see <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" rel="nofollow noreferrer">here</a>. If this does not happen, your interpreter is broken.</p>
</div>
<span class="comment-copy">What makes you think that the <code>s[0] == s[-1]</code> expression is being ignored? Try entering a string that isn't a palindrome and you'll see that it has an effect.</span>
<span class="comment-copy">@PatrickArtner It's code from an MIT class "Introduction to Computer Science and Programming Using Python" (which is completely awesome, by the way). I'm sure this is an educational example to teach recursion.</span>
<span class="comment-copy">Also, this question does not deserve a downvote, IMO. Nothing wrong with trying to understand a recursive function.</span>
<span class="comment-copy">Try it on an input like <code>abcde</code> and see if it really performs the recursive call before testing if the first and last characters are equal.</span>
<span class="comment-copy"><code>and</code> is a short-circuiting operator, so it shouldn't perform the recursive call if the comparison is <code>False</code>.</span>
<span class="comment-copy">The question claims that step 7 is happening before step 6, and asks why.</span>
<span class="comment-copy">Thank you! Your explanation is crystal clear and really explained how the code behaves, I guess I was a bit confused as to how recursion works within a conjunction but it's clear now</span>
