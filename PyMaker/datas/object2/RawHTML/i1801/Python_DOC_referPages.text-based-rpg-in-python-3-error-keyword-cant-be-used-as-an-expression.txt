<div class="post-text" itemprop="text">
<p>import random</p>
<p>class Item():
    """The base class for all items"""
    def <strong>init</strong>(self, name, description, value):
        self.name = name
        self.description = description
        self.value = value
        self.quality = quality</p>
<pre><code>def __str__(self):
    return "{}\n=====\n{}\nValue: {}\n".format(self.name, self.description, self.value)
</code></pre>
<p>class Gold(Item):
    def <strong>init</strong>(self, amt):
        self.amt = amt
        super().<strong>init</strong>(name="Gold",
                         description="A round coin with {} stamped on the front.".format(str(self.amt)),
                         value=self.amt)</p>
<p>class Weapon(Item):</p>
<pre><code>Conditions = { 1 : "Bad Condition",  2 : "Bad Condition",
               3 : "Good Condition", 4 : "Good Condition",
               5 : "Perfect Condition" }

def __init__(self, name, description, value, damageRange):
    self.name = name
    self.description = description
    self.value = value
    self.condition = Weapon.Conditions[self.damage]
    self.qualtiy = damage
</code></pre>
<p>class Rock(Weapon):
    def <strong>init</strong>(self):
        super().<strong>init</strong>("Rock",
                         "A fist-sized rock, suitable for bludgeoning.",
                         0,
                         range(1,5))</p>
<p>class Dagger(Weapon):
    def <strong>init</strong>(self):
        super().<strong>init</strong>("Dagger",
                         "A small dagger with some rust. Somewhat more dangerous than a rock.",
                         10,
                         range(5,11))</p>
<p>class Longsword(Weapon):
    def <strong>init</strong>(self):
        super().<strong>init</strong>("Longsword",
                         "A sword forged by the legendary blacksmith Ailred Gilric",
                         15,
                         range(15,20))</p>
<p>error - AttributeError: 'Longsword' object has no attribute 'damage'</p>
</div>
<div class="post-text" itemprop="text">
<p>You can not reference params that you gave in-line:</p>
<blockquote>
<pre><code>super().__init__(name="Rock",
                     description="A fist-sized rock, suitable for bludgeoning.",
                     value=0,
                     damage=random.randint(1,5), 
                     1 = "Bad Condition",  # does not work, you could put them into a
                                           # dict and provide that.
                     2 = "Bad Condition",
                     3 = "Good Condition",
                     4 = "Good Condition",
                     5 = "Perfect Condition",
                     quality = damage)     # can not reference damage here, damage is
                                           # the keyword the exception complains about
</code></pre>
</blockquote>
<p>You can solve this like so:</p>
<pre><code>import random

class Weapon:
    # this is a shared class variable for all weapons and maps a damage-value
    # to a textual condition
    Conditions = { 1 : "Bad Condition",  2 : "Bad Condition",
                   3 : "Good Condition", 4 : "Good Condition",
                   5 : "Perfect Condition" }

    def __init__(self,name,desc,value,dmgRange):
        self.name = name 
        self.description = desc
        self.value = value
        # switched to random.choice() over the given range
        self.damage = random.choice(dmgRange)
        self.condition = Weapon.Conditions[self.damage]
        self.quality = self.damage

class Rock(Weapon):

    # condition and quality are dependent on the damage, moved them into the
    # base classes __init__
    # moved the random damage also into the base class, so it decides on the damage
    # you would have to replicate that make a random damage in each weapon...  
    def __init__(self):
        # range(1,6) : 6 is exclusive, so you get 1,2,3,4,5
        super().__init__("Rock","A fist-sized rock, suitable for bludgeoning.",
                         0,range(1,6))

    def __str__(self):
        return f"A {self.name} in {self.condition}. Its quality rates {self.quality} " \
               + f"and it deals {self.damage} damage. It cost: {self.value} coins."

print("You inspect the beach and find:")
for _ in range(10):
    print("-",Rock())
</code></pre>
<p>Output:</p>
<pre><code>You inspect the beach and find:
- A Rock in Perfect Condition. Its quality rates 5 and it deals 5 damage. It cost: 0 coins.
- A Rock in Bad Condition. Its quality rates 1 and it deals 1 damage. It cost: 0 coins.
- A Rock in Bad Condition. Its quality rates 2 and it deals 2 damage. It cost: 0 coins.
- A Rock in Good Condition. Its quality rates 4 and it deals 4 damage. It cost: 0 coins.
- A Rock in Good Condition. Its quality rates 4 and it deals 4 damage. It cost: 0 coins.
- A Rock in Bad Condition. Its quality rates 1 and it deals 1 damage. It cost: 0 coins.
- A Rock in Good Condition. Its quality rates 4 and it deals 4 damage. It cost: 0 coins.
- A Rock in Bad Condition. Its quality rates 2 and it deals 2 damage. It cost: 0 coins.
- A Rock in Bad Condition. Its quality rates 2 and it deals 2 damage. It cost: 0 coins.
- A Rock in Good Condition. Its quality rates 4 and it deals 4 damage. It cost: 0 coins.
</code></pre>
<p>Readup:  </p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer"><code>dict</code>ionaries</a></li>
<li><a href="https://docs.python.org/3/library/random.html#random.choice" rel="nofollow noreferrer"><code>random.choice()</code></a></li>
<li><a href="https://docs.python.org/3/library/functions.html#func-range" rel="nofollow noreferrer"><code>range(start,stop[,step]</code>)</a></li>
<li><a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="nofollow noreferrer"><code>__str__()</code></a> - look at <code>__repr__()</code> as well, you might want to change that one too</li>
</ul>
</div>
<span class="comment-copy">The error message is missing?</span>
<span class="comment-copy">If you call a super() it might be beneficial to also supply the super-class (<code>Weapon</code>) - also provide the exact error message and stack trace.</span>
<span class="comment-copy">I think you misunderstand how function parameters work. For instance, the <code>quality=damage</code> line is wrong - <code>damage</code> doesn't exist at that point, the previous line <code>damage=random</code> is setting a parameter, not assigning a variable. Also you can't use numbers as parameter names, so the 1 ... 5 lines are invalid syntax</span>
<span class="comment-copy">Please use correct formatting.  This is too difficult to read.</span>
<span class="comment-copy">I realised that i messed up - i have attributes of 1 to 5 but if i want anything to have a damage of over 5 it doesn't work</span>
<span class="comment-copy">You need to adapt the quality dictionary for that - or simply add additional damage to in your init-method: <code>self.damage = random.choice(dmgRange) + 5</code></span>
