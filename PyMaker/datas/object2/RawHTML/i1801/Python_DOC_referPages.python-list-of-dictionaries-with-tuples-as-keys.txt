<div class="post-text" itemprop="text">
<p>I have a dictionary like this </p>
<pre><code>Counter({('know', 'you'): 1053, ('know', 'i'): 847, ('il', 'i'): 784, 
         ('want', 'to'): 680, ('want', 'you'): 561, ('il', 'you'): 561, 
         ('come', 'on'): 557, ('know', 't'): 499, ('go', 'to'): 447, 
         ('right', 'all'): 440, ('want', 'i'): 430, ('know', 'don'): 410, 
         ('get', 'to'): 409, ('like', 'you'): 397, ('like', 'i'): 338, 
         ('get', 'you'): 336, ('il', 'be'): 330})
</code></pre>
<p>And I want to create a list of dictionaries, where in each dictionary are only the tuples with the same first element, something like this</p>
<pre><code>[{('know', 'you'): 1053, ('know', 'i'): 847, ('know', 't'): 499,('know', 'don'): 410}, 
 {('want', 'to'): 680, ('want', 'you'): 561, ('want', 'i'): 430},  
 {('get', 'to'): 409, ('get', 'you'): 336}, 
 {('like', 'you'): 397, ('like', 'i'): 338}]
</code></pre>
<p>After that I want to store the values from each dictionary in the nested list and create an array. Nested list will look like that</p>
<pre><code>[[1053, 847, 499, 410], [680, 561, 430], [409, 336], [397, 338]]
</code></pre>
<p>Do you have some ideas how can I do that?</p>
<p>EDIT: After some comments I realised that also the second element in the tuple has to correspond to other elements. So the list of dictionaries should look actually like this: </p>
<pre><code>[{('know', 'you'): 1053, ('know', 'i'): 847, ('know', 'to'): 499}
 {('want', 'you'): 5, ('want', 'i'): 430},  ('want', 'to'): 680}
 {('get', 'you'): 3, ('get', ‚i'): 68, ('get', 'to'): 409}
 {('like', 'you'): 397, ('like', 'i'): 338}, ('like', 'to'): 345}]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do you need to have the intermediate list of dictionaries? you can achieve your goal directly from your input dictionary pretty easily.</p>
<pre><code>from collections import defaultdict

out = defaultdict(list)

for k, v in input_dict.items():
    out[k[0]].append(v)

print(out)
# defaultdict(&lt;class 'list'&gt;, {'know': [1053, 847, 499, 410], 'il': [784, 561, 330], 
#                              'want': [680, 561, 430], 'come': [557], 'go': [447],
#             '                'right': [440], 'get': [409, 336], 'like': [397, 338]})
</code></pre>
<p>then, if you insist on the nested lists:</p>
<pre><code>print([v for v in out.values()])
# [[1053, 847, 499, 410], [784, 561, 330], [680, 561, 430], [557], [447], [440],
#  [409, 336], [397, 338]]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To get the final result you could use <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer">setdefault</a>:</p>
<pre><code>data = {('know', 'you'): 1053, ('know', 'i'): 847, ('il', 'i'): 784, ('want', 'to'): 680, ('want', 'you'): 561,
        ('il', 'you'): 561, ('come', 'on'): 557, ('know', 't'): 499, ('go', 'to'): 447, ('right', 'all'): 440,
        ('want', 'i'): 430, ('know', 'don'): 410, ('get', 'to'): 409, ('like', 'you'): 397, ('like', 'i'): 338,
        ('get', 'you'): 336, ('il', 'be'): 330}


result = {}
for k, v in data.items():
    result.setdefault(k[0], []).append(v)

print([e for e in result.values()])
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[[561, 680, 430], [447], [397, 338], [440], [847, 1053, 499, 410], [336, 409], [784, 561, 330], [557]]
</code></pre>
<p>If for some reason you need the intermediate representation, you can do the following:</p>
<pre><code>from itertools import groupby

data = {('know', 'you'): 1053, ('know', 'i'): 847, ('il', 'i'): 784, ('want', 'to'): 680, ('want', 'you'): 561,
        ('il', 'you'): 561, ('come', 'on'): 557, ('know', 't'): 499, ('go', 'to'): 447, ('right', 'all'): 440,
        ('want', 'i'): 430, ('know', 'don'): 410, ('get', 'to'): 409, ('like', 'you'): 397, ('like', 'i'): 338,
        ('get', 'you'): 336, ('il', 'be'): 330}


result = [dict(group) for _, group in groupby(sorted(data.items()), key=lambda x: x[0][0])]    
    print(result)
</code></pre>
<p><strong>Output</strong> (<em>intermediate representation</em>)</p>
<pre><code>[{('come', 'on'): 557}, {('get', 'to'): 409, ('get', 'you'): 336}, {('go', 'to'): 447}, {('il', 'i'): 784, ('il', 'be'): 330, ('il', 'you'): 561}, {('know', 'i'): 847, ('know', 't'): 499, ('know', 'you'): 1053, ('know', 'don'): 410}, {('like', 'i'): 338, ('like', 'you'): 397}, {('right', 'all'): 440}, {('want', 'i'): 430, ('want', 'you'): 561, ('want', 'to'): 680}]
</code></pre>
</div>
<span class="comment-copy">what is your problem? where is your code? what is wrong with it?</span>
<span class="comment-copy">Thank you very much! I am new in Python, I tried one day to do that, but it is really very easy! :-)</span>
<span class="comment-copy">Could it also be possible that we have corresponding second elements in each dictionary like this:  [{('know', 'you'): 1053, ('know', 'i'): 847, ('know', 'to'): 499},  {('want', 'you'): 5, ('want', 'i'): 430}, ('want', 'to'): 680},  {('get', 'you'): 3, ('get', ‚i'): 68, ('get', 'to'): 409},  {('like', 'you'): 397, ('like', 'i'): 338}, ('like', 'to'): 345}] So the the tuple with „you" on the first position in each dictionary, then with „i“ on the second position and so on?</span>
<span class="comment-copy">Thank you very much! Very helpful!</span>
