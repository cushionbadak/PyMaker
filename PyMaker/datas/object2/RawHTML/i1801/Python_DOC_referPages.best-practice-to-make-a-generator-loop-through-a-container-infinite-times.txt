<div class="post-text" itemprop="text">
<p>I'm trying to use a generator to return elements from a container, but it needs to return/exhaust all elements then do it again.</p>
<p>The reason I say this is if there's a faster/better or more pythonic way to do this than just a for loop as I don't need them in order but I don't want to get the same item twice until it has exhausted all elements.</p>
<p>The example below is a tuple, although if there is a better container type for this than I'm all ears.</p>
<pre><code>elements = ('a', 'b', 'c', ...)

def get_next_element():
    while True:
        for e in elements:
            yield e
</code></pre>
<p>There's got to be a different way to do this, or is this the best way?</p>
<p>I'm using Python 3.6.</p>
</div>
<div class="post-text" itemprop="text">
<p>Use the <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle()</code> callable</a>, which does just that:</p>
<blockquote>
<p>Make an iterator returning elements from the iterable and saving a copy of each. When the iterable is exhausted, return elements from the saved copy. Repeats indefinitely. </p>
</blockquote>
<p>This does exactly what your pure-python function does, plus it caches elements so the input can be any iterator (not just a re-usable iterable such as a tuple), but does this in efficient C.</p>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>cycle</code></a>?</span>
<span class="comment-copy">Wow, I'm dumb.. Thanks!</span>
<span class="comment-copy">One other really dumb question. Would a tuple be the best way to give these items to cycle? like could I just use <code>elements =  itertools.cycle('a', 'b', 'c', ...)</code> Or is that gonna cause an error as it only accepts one variable?</span>
<span class="comment-copy">@Jaba: only a single argument is accepted.</span>
<span class="comment-copy">Right, just meant like instead of implicitly making a, b, c a tuple with the parentheses, is there any way to assume incoming variables are the iterable it's looking for. maybe use <code>*args</code>. I just don't like double open and close parentheses is all... I'm just being lazy and picky</span>
<span class="comment-copy">@Jaba: if <code>cycle()</code> used <code>*args</code> then you could never pass in an endless iterable; that's legal and may have valid usecases where you combine arbitrary iterators wrapped in a <code>cycle()</code> object with <code>zip()</code> or <code>islice()</code> where you pull a limited number of elements.</span>
