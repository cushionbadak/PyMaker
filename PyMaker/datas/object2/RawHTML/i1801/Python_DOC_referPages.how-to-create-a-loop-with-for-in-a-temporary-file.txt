<div class="post-text" itemprop="text">
<p>I am working with an encrypted file, but I can't manage to create a loop with <code>for</code> in order to read it before it get closed and removed.</p>
<p>My intention is to read the data given in the encrypted file and loop it to assign each line to a variable.</p>
<p>Whenever I execute my code, Python just goes straight to finish, without working with the decrypted info; I believe it is because the <code>with</code> command close it before the loop starts.</p>
<p>This is what I want, not working, no errors either:</p>
<pre><code>with open(input_file, 'rb') as fp:
  data = fp.read()

fernet = Fernet(key)
encrypted = fernet.decrypt(data)
with tempfile.TemporaryFile() as fp:
  fp.write(encrypted)
  for url in fp: #Python ignores the tempfile. I belive it is closed in the previous line.
    segment = url.strip()
    url = 'https://docs.python.org/3.3/tutorial/' + segment
    filename = segment + '.html'
    filePath = pjoin('Data/' + filename)
    response = urlopen(url)
    webContent = response.read()
    html_content = urlopen(url).read()
    matches = re.findall(b'string', html_content);

    if len(matches) == 0: 
      print(segment + ' unchanged.')

    else:  
      with open(filePath, 'wb') as w:
       w.write(webContent)
</code></pre>
<p>This is the working code (Sorry, tried to make it shorter but couldn't):</p>
<pre><code>with open(input_file, 'rb') as fp:
  data = fp.read()

fernet = Fernet(key)
encrypted = fernet.decrypt(data)

with open(output_file, 'wb') as fp:
    fp.write(encrypted)

with open(output_file) as fp:
    for url in fp:
      segment = url.strip()
      url = 'https://docs.python.org/3.3/tutorial/' + segment
      filename = segment + '.html'
      filePath = pjoin('Data/' + filename)
      response = urlopen(url)
      webContent = response.read()
      html_content = urlopen(url).read()
      matches = re.findall(b'string', html_content);

    if len(matches) == 0: 
      print(segment + ' unchanged.')

    else:  
      with open(filePath, 'wb') as w:
       w.write(webContent) 
</code></pre>
<p>Header for both examples (apart to make it shorter):</p>
<pre><code>#python 3.6.6

from urllib.request import urlopen
import urllib.request
from os.path import join as pjoin
import re, os, sys, tempfile, six, ctypes, time, fileinput
from cryptography.fernet import Fernet

print("[*] Checking list.dat for consistency . . .")
key = b'wTmVBRLytAmlfkctCuEf59K0LDCXa3sGas3kPg3r4fs=' #Decrypt list.dat
input_file = 'List.dat'
output_file = 'List.txt'
</code></pre>
<p>List.txt content:</p>
<pre><code>errors
classes
stdlib
</code></pre>
<p>Any hints?</p>
</div>
<div class="post-text" itemprop="text">
<p>@LarryLustig pretty much answered <em>why</em> your code wasn't working, but IMO if you eliminate the temp file altogether (which shouldn't be necessary) you don't even   need to worry about the cursor.  See below commented changes on your desired code.</p>
<pre><code># We'll use os.linesep to get the line terminator string for your os.
import os

...

with open(input_file, 'rb') as fp:
  data = fp.read()

fernet = Fernet(key)

# decode your decrypted bytes into strings.  Change 'utf-8' into whichever file encoding you're using if necessary.
decrypted = fernet.decrypt(data).decode('utf-8')

# Don't write to a temp file
# Iterate directly on each line of the extracted data
for url in decrypted.split(os.linesep): 
    segment = url.strip()
    url = 'https://docs.python.org/3.3/tutorial/' + segment
    filename = segment + '.html'
    filePath = pjoin('Data/' + filename)
    response = urlopen(url)
    webContent = response.read()
    html_content = urlopen(url).read()
    matches = re.findall(b'string', html_content);

    if len(matches) == 0: 
      print(segment + ' unchanged.')

    else:  
      with open(filePath, 'wb') as w:
       w.write(webContent)
</code></pre>
<p>Alternatively, if you know for sure what is the line terminator used in the file (e.g. <code>\r\n</code>, or <code>\n</code>) then you can eliminate using <code>os.linesep</code> altogether.</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that once you have written to the file, the "file pointer" is at the <em>end</em> of the file.  There's nothing to read.</p>
<p>You can use the <a href="https://docs.python.org/3/library/io.html#io.IOBase.seek" rel="nofollow noreferrer"><code>seek</code> method</a> to reposition the file pointer at the beginning.  Alternatively, closing and re-opening the file (as in your working code) will position the pointer at the beginning of the file.</p>
</div>
<span class="comment-copy">Why do you need to write <code>encrypted</code> back to a temp file first? Why not just directly work with the decrypted data (which I'm not sure why you named it <code>encrypted</code>) and then write it back to <code>filePath</code>?</span>
<span class="comment-copy">I tried that, in fact, that's what I originally wanted, but couldn't find a way to do it. That's why I continue with the <code>write</code> method. And I changed to decrypted twice, but I am erasing and writing and ctrl+z and so on, it gets back to <code>encrypted</code>.</span>
<span class="comment-copy">It works, thanks!</span>
