<div class="post-text" itemprop="text">
<blockquote>
<p>First of all <strong>a disclaimer</strong>:</p>
<p>I don't want to use a code like this, I am aware it is a bad practice. As well I am not interested in tips on how to improve it, to make it right. What interests me is a theory.</p>
</blockquote>
<p>How come code like this works in python 3.6:</p>
<pre><code>ls = range(5)
for elem_a in ls:

    ls = range(5, 10)
    for elem_b in ls:
        print(elem_a, elem_b)
</code></pre>
<p>I am reassigning the value of ls while iterating through it. Is the value of <code>ls</code> in the first iteration stored in memory during the first execution of <code>for elem_a in ls</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>Reassigning the variable you're looping over has no effect because the variable isn't re-evaluated for every iteration. In fact, the loop internally loops over an <a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="noreferrer">iterator</a>, not over your <code>range</code> object.</p>
<p>Basically if you have a loop like this:</p>
<pre><code>seq = range(5)
for elem in seq:
    seq = something_else
</code></pre>
<p>Python rewrites it to something like this:</p>
<pre><code>seq = range(5)

loop_iter = iter(seq)  # obtain an iterator
while True:
    try:
        elem = next(loop_iter)  # get the next element from the iterator
    except StopIteration:
        break  # the iterator is exhausted, end the loop

    # execute the loop body
    seq = something_else
</code></pre>
<p>The crucial aspect of this is that the loop has its own reference to <code>iter(seq)</code> stored in <code>loop_iter</code>, so naturally reassigning <code>seq</code> has no effect on the loop.</p>
<p>All of this is explained in the <a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="noreferrer">compound statement documentation</a>:</p>
<blockquote>
<pre><code>for_stmt ::=  "for" target_list "in" expression_list ":" suite
              ["else" ":" suite]
</code></pre>
<p>The expression list is evaluated once; it should yield an iterable
  object. An iterator is created for the result of the <code>expression_list</code>.
  The suite is then executed once for each item provided by the
  iterator, in the order returned by the iterator.</p>
</blockquote>
</div>
<span class="comment-copy">For the outer loop, <code>ls</code> is already <code>range(5)</code> beforehand and it just iterates through this iterable no matter it changes inside the loop.</span>
<span class="comment-copy">Great, I thought so. Thank you, for the immediate answer.</span>
<span class="comment-copy">Thank you for the clear and in-depth explanation. Much appreciate it.</span>
