<div class="post-text" itemprop="text">
<p>I'm learning the Python programming language and I've came across something I don't fully understand. </p>
<p>In a method like:</p>
<pre><code>def method(self, blah):
    def __init__(?):
        ....
    ....
</code></pre>
<p>What does <code>self</code> do?  What is it meant to be?  Is it mandatory?</p>
<p>What does the <code>__init__</code> method do?  Why is it necessary? (etc.)</p>
<p>I think they might be OOP constructs, but I don't know very much.</p>
</div>
<div class="post-text" itemprop="text">
<p>In this code:</p>
<pre><code>class A(object):
    def __init__(self):
        self.x = 'Hello'

    def method_a(self, foo):
        print self.x + ' ' + foo
</code></pre>
<p>... the <code>self</code> variable represents the instance of the object itself.  Most object-oriented languages pass this as a hidden parameter to the methods defined on an object; Python does not.  You have to declare it explicitly.  When you create an instance of the <code>A</code> class and call its methods, it will be passed automatically, as in ...</p>
<pre><code>a = A()               # We do not pass any argument to the __init__ method
a.method_a('Sailor!') # We only pass a single argument
</code></pre>
<p>The <code>__init__</code> method is roughly what represents a constructor in Python.  When you call <code>A()</code> Python creates an object for you, and passes it as the first parameter to the <code>__init__</code> method.  Any additional parameters (e.g., <code>A(24, 'Hello')</code>) will also get passed as arguments--in this case causing an exception to be raised, since the constructor isn't expecting them.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yep, you are right, these are oop constructs.</p>
<p><code>__init__</code> is the constructor for a class.  The <code>self</code> parameter refers to the instance of the object (like <code>this</code> in C++).</p>
<pre><code>class Point:
    def __init__(self, x, y):
        self._x = x
        self._y = y
</code></pre>
<p>The <code>__init__</code> method gets called when memory for the object is allocated:</p>
<pre><code>x = Point(1,2)
</code></pre>
<p>It is important to use the <code>self</code> parameter inside an object's method if you want to persist the value with the object.  If, for instance, you implement the <code>__init__</code> method like this:</p>
<pre><code>class Point:
    def __init__(self, x, y):
        _x = x
        _y = y
</code></pre>
<p>Your <code>x</code> and <code>y</code> parameters would be stored in variables on the stack and would be discarded when the init method goes out of scope.  Setting those variables as <code>self._x</code> and <code>self._y</code> sets those variables as members of the <code>Point</code> object (accessible for the lifetime of the object).</p>
</div>
<div class="post-text" itemprop="text">
<h1>A brief illustrative example</h1>
<p>In the hope it might help a little, here's a simple example I used to understand the difference between a variable declared inside a class, and a variable declared inside an <code>__init__</code> function:</p>
<pre><code>class MyClass(object):
     i = 123
     def __init__(self):
         self.i = 345

a = MyClass()
print a.i
345
print MyClass.i
123
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In short:</p>
<ol>
<li><code>self</code> as it suggests, refers to <em>itself</em>- the object which has called the method. That is, if you have N objects calling the method, then <code>self.a</code> will refer to a separate instance of the variable for each of the N objects. Imagine N copies of the variable <code>a</code> for each object</li>
<li><code>__init__</code> is what is called as a constructor in other OOP languages such as C++/Java. The basic idea is that it is a <em>special</em> method which is automatically called when an object of that Class is created</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><code>__init__</code> does act like a constructor. You'll need to pass "self" to any class functions as the first argument if you want them to behave as non-static methods. "self" are instance variables for your class.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try out this code. Hope it helps many C programmers like me to Learn Py.</p>
<pre><code>#! /usr/bin/python2

class Person:

    '''Doc - Inside Class '''

    def __init__(self, name):
        '''Doc - __init__ Constructor'''
        self.n_name = name        

    def show(self, n1, n2):
        '''Doc - Inside Show'''
        print self.n_name
        print 'Sum = ', (n1 + n2)

    def __del__(self):
        print 'Destructor Deleting object - ', self.n_name

p=Person('Jay')
p.show(2, 3)
print p.__doc__
print p.__init__.__doc__
print p.show.__doc__
</code></pre>
<p>Output:</p>
<p><code>Jay</code></p>
<p><code>Sum =  5</code></p>
<p><code>Doc - Inside Class</code></p>
<p><code>Doc - __init__ Constructor</code></p>
<p><code>Doc - Inside Show</code></p>
<p><code>Destructor Deleting object -  Jay</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Had trouble undestanding this myself. Even after reading the answers here. </p>
<p>To properly understand the <code>__init__</code> method you need to understand self. </p>
<p><strong>The self Parameter</strong></p>
<p>The arguments accepted by the <code>__init__</code> method are :</p>
<pre><code>def __init__(self, arg1, arg2):
</code></pre>
<p>But we only actually pass it two arguments :</p>
<pre><code>instance = OurClass('arg1', 'arg2')
</code></pre>
<p>Where has the extra argument come from ?</p>
<p>When we access attributes of an object we do it by name (or by reference). Here instance is a reference to our new object. We access the printargs method of the instance object using instance.printargs.</p>
<p>In order to access object attributes from within the <code>__init__</code> method we need a reference to the object.</p>
<p><strong><em>Whenever a method is called, a reference to the main object is passed as the first argument.</em></strong> By convention you always call this first argument to your methods self.</p>
<p>This means in the <code>__init__</code> method we can do :</p>
<pre><code>self.arg1 = arg1
self.arg2 = arg2
</code></pre>
<p><strong><em>Here we are setting attributes on the object.</em></strong> You can verify this by doing the following :</p>
<pre><code>instance = OurClass('arg1', 'arg2')
print instance.arg1
arg1
</code></pre>
<p>values like this are known as object attributes. <strong><em>Here the <code>__init__</code> method sets the arg1 and arg2 attributes of the instance.</em></strong></p>
<p>source: <a href="http://www.voidspace.org.uk/python/articles/OOP.shtml#the-init-method" rel="noreferrer">http://www.voidspace.org.uk/python/articles/OOP.shtml#the-init-method</a></p>
</div>
<div class="post-text" itemprop="text">
<p>note that <code>self</code> could actually be any valid python identifier.  For example, we could just as easily write, from Chris B's example:</p>
<pre><code>class A(object):
    def __init__(foo):
        foo.x = 'Hello'

    def method_a(bar, foo):
        print bar.x + ' ' + foo
</code></pre>
<p>and it would work exactly the same.  It is however recommended to use self because other pythoners will recognize it more easily.</p>
</div>
<div class="post-text" itemprop="text">
<p>Basically, you need to use the 'self' keyword when using a variable in multiple functions within the same class. As for <strong>init</strong>, it's used to setup default values incase no other functions from within that class are called.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><strong><code>__init__</code></strong> is basically a function which will <strong>"initialize"</strong>/<strong>"activate"</strong> the properties of the class for a specific object, once created and matched  to the corresponding class..</li>
<li><strong><code>self</code></strong> represents that object which will inherit those properties.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<h2><strong>Class objects</strong> support two kinds of operations: <strong>attribute references and instantiation</strong></h2>
<p><strong><em>Attribute references</em></strong> use the standard syntax used for all attribute references in Python: obj.name. Valid attribute names are all the names that were in the class’s namespace when the class object was created. So, if the class definition looked like this:</p>
<pre><code>class MyClass:
    """A simple example class"""
    i = 12345

    def f(self):
        return 'hello world'
</code></pre>
<p>then <code>MyClass.i</code> and <code>MyClass.f</code> are valid attribute references, returning an integer and a function object, respectively. Class attributes can also be assigned to, so you can change the value of <code>MyClass.i</code> by assignment. <code>__doc__</code> is also a valid attribute, returning the docstring belonging to the class: "A simple example class".</p>
<p><strong><em>Class instantiation</em></strong> uses function notation. Just pretend that the class object is a parameterless function that returns a new instance of the class. For example:</p>
<pre><code>x = MyClass()
</code></pre>
<p>The <strong>instantiation</strong> operation (“calling” a class object) creates an empty object. Many classes like to create objects with instances customized to a specific initial state. Therefore a class may define a special method named <code>__init__()</code>, like this:</p>
<pre><code>def __init__(self):
    self.data = []
</code></pre>
<p>When a class defines an <code>__init__()</code> method, class instantiation automatically invokes <code>__init__()</code> for the newly-created class instance. So in this example, a new, initialized instance can be obtained by:</p>
<pre><code>x = MyClass()
</code></pre>
<p>Of course, the <code>__init__()</code> method may have arguments for greater flexibility. In that case, arguments given to the class instantiation operator are passed on to <code>__init__()</code>. For example,</p>
<pre><code>class Complex:
    def __init__(self, realpart, imagpart):
        self.r = realpart
        self.i = imagpart

x = Complex(3.0, -4.5)
x.r, x.i
</code></pre>
<p>Taken from official <a href="https://docs.python.org/3/tutorial/classes.html" rel="noreferrer">documentation</a> which helped me the most in the end.</p>
<hr/>
<h2>Here is my example</h2>
<pre><code>class Bill():
    def __init__(self,apples,figs,dates):
        self.apples = apples
        self.figs = figs
        self.dates = dates
        self.bill = apples + figs + dates
        print ("Buy",self.apples,"apples", self.figs,"figs 
                and",self.dates,"dates. 
                Total fruitty bill is",self.bill," pieces of fruit :)")
</code></pre>
<p>When you create instance of class Bill:</p>
<pre><code>purchase = Bill(5,6,7)
</code></pre>
<p>You get:    </p>
<pre><code>&gt; Buy 5 apples 6 figs and 7 dates. Total fruitty bill is 18  pieces of
&gt; fruit :)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The 'self' is a reference to the class instance</p>
<pre><code>class foo:
    def bar(self):
            print "hi"
</code></pre>
<p>Now we can create an instance of foo and call the method on it, the self parameter is added by Python in this case:</p>
<pre><code>f = foo()
f.bar()
</code></pre>
<p>But it can be passed in as well if the method call isn't in the context of an instance of the class, the code below does the same thing</p>
<pre><code>f = foo()
foo.bar(f)
</code></pre>
<p>Interestingly the variable name 'self' is just a convention. The below definition will work exactly the same.. Having said that it is <strong>very strong convention</strong> which should be followed <strong>always</strong>, but it does say something about flexible nature of the language</p>
<pre><code>class foo:
    def bar(s):
            print "hi"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code># Source: Class and Instance Variables
# https://docs.python.org/2/tutorial/classes.html#class-and-instance-variables

class MyClass(object):
    # class variable
    my_CLS_var = 10

    # sets "init'ial" state to objects/instances, use self argument
    def __init__(self):
        # self usage =&gt; instance variable (per object)
        self.my_OBJ_var = 15

        # also possible, class name is used =&gt; init class variable
        MyClass.my_CLS_var = 20


def run_example_func():
    # PRINTS    10    (class variable)
    print MyClass.my_CLS_var

    # executes __init__ for obj1 instance
    # NOTE: __init__ changes class variable above
    obj1 = MyClass()

    # PRINTS    15    (instance variable)
    print obj1.my_OBJ_var

    # PRINTS    20    (class variable, changed value)
    print MyClass.my_CLS_var


run_example_func()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this code:</p>
<pre><code>class Cat:
    def __init__(self, name):
        self.name = name
    def info(self):
        print 'I am a cat and I am called', self.name
</code></pre>
<p>Here <code>__init__</code> acts as a constructor for the class and when an object is instantiated, this function is called. <code>self</code> represents the instantiating object.</p>
<pre><code>c = Cat('Kitty')
c.info()
</code></pre>
<p>The result of the above statements will be as follows:</p>
<pre><code>I am a cat and I am called Kitty
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just a demo for the question.</p>
<pre><code>class MyClass:

    def __init__(self):
        print('__init__ is the constructor for a class')

    def __del__(self):
        print('__del__ is the destructor for a class')

    def __enter__(self):
        print('__enter__ is for context manager')
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        print('__exit__ is for context manager')

    def greeting(self):
        print('hello python')


if __name__ == '__main__':
    with MyClass() as mycls:
        mycls.greeting()
</code></pre>
<hr/>
<pre><code>$ python3 class.objects_instantiation.py
__init__ is the constructor for a class
__enter__ is for context manager
hello python
__exit__ is for context manager
__del__ is the destructor for a class
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<h2>Python <code>__init__</code> and <code>self</code> what do they do?</h2>
<p>What does <code>self</code> do? What is it meant to be? Is it mandatory?</p>
<p>What does the <code>__init__</code> method do? Why is it necessary? (etc.)</p>
</blockquote>
<p>The example given is not correct, so let me create a correct example based on it:</p>
<pre><code>class SomeObject(object):

    def __init__(self, blah):
        self.blah = blah

    def method(self):
        return self.blah 
</code></pre>
<p>When we create an instance of the object, the <code>__init__</code> is called to customize the object after it has been created. That is, when we call <code>SomeObject</code> with <code>'blah'</code> below (which could be anything), it gets passed to the <code>__init__</code> function as the argument, <code>blah</code>:</p>
<pre><code>an_object = SomeObject('blah')
</code></pre>
<p>The <code>self</code> argument is the instance of <code>SomeObject</code> that will be assigned to <code>an_object</code>. </p>
<p>Later, we might want to call a method on this object:</p>
<pre><code>an_object.method()
</code></pre>
<p>Doing the dotted lookup, that is, <code>an_object.method</code>, binds the instance to an instance of the function, and the method (as called above) is now a "bound" method - which means we do not need to explicitly pass the instance to the method call.</p>
<p>The method call gets the instance because it was bound on the dotted lookup, and when called, then executes whatever code it was programmed to perform.</p>
<p>The implicitly passed <code>self</code> argument is called <code>self</code> by convention. We could use any other legal Python name, but you will likely get tarred and feathered by other Python programmers if you change it to something else.</p>
<p><code>__init__</code> is a special method, <a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="noreferrer">documented in the Python datamodel documentation</a>. It is called immediately after the instance is created (usually via <code>__new__</code> - although <code>__new__</code> is not required unless you are subclassing an immutable datatype).</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>What does <strong>self</strong> do? What is it <strong>meant</strong> to be? Is it <strong>mandatory</strong>?</p>
</blockquote>
<p>The first argument of every class method, including init, is always a <strong>reference to the current instance of the clas</strong>s. By convention, this argument is always named self.In the init method, self refers to the newly created object; in other class methods, it refers to the instance whose method was called.</p>
<p>Python <strong>doesn't force you on using</strong> "<strong>self</strong>". You can give it any name you want. But remember that the first argument in a method definition is a reference to the object.Python adds the self argument to the list for you; you do not need to include it when you call the methods.
if you didn't provide self in init method then you will get an error</p>
<pre><code>TypeError: __init___() takes no arguments (1 given)
</code></pre>
<blockquote>
<p>What does the <strong>init</strong> method do? Why is it necessary? (etc.)</p>
</blockquote>
<p>init short for initialization. It is a constructor which get called when you make instance of the class and <strong>it is not necessary</strong>. But usually it our practice to write init method for setting default state of the object. If you are not willing to set any state of the object initially then you don't need to write this method.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here, the guy has written pretty well and simple: <a href="https://www.jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/" rel="nofollow">https://www.jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/</a></p>
<p>Read above link  as a reference to this:</p>
<blockquote>
<p><code>self</code>? So what's with that self parameter to all of the Customer
  methods? What is it? Why, it's the instance, of course! Put another
  way, a method like withdraw defines the instructions for withdrawing
  money from some abstract customer's account. Calling
  jeff.withdraw(100.0) puts those instructions to use on the jeff
  instance.</p>
<p>So when we say def withdraw(self, amount):, we're saying, "here's how
  you withdraw money from a Customer object (which we'll call self) and
  a dollar figure (which we'll call amount). self is the instance of the
  Customer that withdraw is being called on. That's not me making
  analogies, either. jeff.withdraw(100.0) is just shorthand for
  Customer.withdraw(jeff, 100.0), which is perfectly valid (if not often
  seen) code.</p>
<p><strong>init</strong> self may make sense for other methods, but what about <strong>init</strong>? When we call <strong>init</strong>, we're in the process of creating an object, so how can there already be a self? Python allows us to extend
  the self pattern to when objects are constructed as well, even though
  it doesn't exactly fit. Just imagine that jeff = Customer('Jeff
  Knupp', 1000.0) is the same as calling jeff = Customer(jeff, 'Jeff
  Knupp', 1000.0); the jeff that's passed in is also made the result.</p>
<p>This is why when we call <strong>init</strong>, we initialize objects by saying
  things like self.name = name. Remember, since self is the instance,
  this is equivalent to saying jeff.name = name, which is the same as
  jeff.name = 'Jeff Knupp. Similarly, self.balance = balance is the same
  as jeff.balance = 1000.0. After these two lines, we consider the
  Customer object "initialized" and ready for use.</p>
<p><strong>Be careful what you <code>__init__</code></strong></p>
<p>After <strong>init</strong> has finished, the caller can rightly assume that the
  object is ready to use. That is, after jeff = Customer('Jeff Knupp',
  1000.0), we can start making deposit and withdraw calls on jeff; jeff is a fully-initialized object.</p>
</blockquote>
</div>
<span class="comment-copy">What's the point of <code>object</code> in the class declaration? I've noticed some classes have this and some don't</span>
<span class="comment-copy">@Chris It's for Python 2 compatibility. In Python 3 there is no need to explicitly inherit from <code>object</code> because it happens by default.</span>
<span class="comment-copy">So then is there any reason why you wouldn't want <code>self</code> to be in the constructor? Why do you even have to specify it, wouldn't it be better if it was implicit?</span>
<span class="comment-copy">Interesting observation but I think you are on the wrong track. With print MyClass.i it looks more like you are calling a 'static' variablie i. Where as with a.i you are calling a member variable, i.   It seems to me that <i>init</i> is just a constructor that is first executed when you create an object of the class.</span>
<span class="comment-copy">That's what I was trying to 'explain to myself' with this example - that the variable set by <code>__init__</code> is what gets passed to <i>instances</i> of the class, not the 'static' variable of the class itself that has the same name...</span>
<span class="comment-copy">'self' defines if a method is static or not! Wow, thats an eye opener for this java guy.</span>
<span class="comment-copy">I don't know if it's just me, but reading this code was a little confusing. Maybe it's because I'm still a novice Python programmer, idk.</span>
<span class="comment-copy">I'm not clear about the <b>doc</b> thing.. does it pull the documentation? and if I do: '''test - my doc''', can I use: print.p.__test__? or is doc a specific keyword?</span>
<span class="comment-copy">I agree that self would be recommended in place of foo, helps other programmers with looking at the code</span>
<span class="comment-copy">There is no 'self' keyword in Python.  Calling the first parameter 'self' is simply a convention.</span>
<span class="comment-copy">self is used as a placeholder basically. It isn't required that you use self, you could use "eeee" or "foo" or something else, it's just recommended for other programmers while reading your code</span>
<span class="comment-copy">the "self" keyword doesn't have to be used, it's just a placeholder. You can use any word, but it's recommended that you use self to help the readability of the program</span>
<span class="comment-copy">Why does that say anything about the flexible nature of the language? It just says you can give variables any legal name you choose. How is that different from any other programming language?</span>
<span class="comment-copy">As I wrote in my answer "bar" is just a function where a class instance is provided as the first parameter. So while "bar" is defined as a method bound to "foo" it could also be called with an instance of some other class. This is not how methods and "this" work in Java for example, although I imagine you see that these are the same concept, functions and some instance context (the instance context being the first parameter in Python and "this" in Java"). Perhaps you can now see the flexibility of the language I was referring to?</span>
<span class="comment-copy">Yeah that does show the flexibility of the language. The way you phrased your answer, it seemed like you were saying that the fact that you could call the "self" variable something else (like <code>s</code>) was showing the flexibility of python.</span>
<span class="comment-copy">Learn Python, its so simple they said</span>
