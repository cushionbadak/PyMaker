<div class="post-text" itemprop="text">
<p>The question exactly is: Create a function (jumpMaximum) that, given any list of integers list, returns a list with the same elements as list,
except that the first element has been swapped with the maximum element in list.
Note: This function should not print the list, but return it.
My code so far is:</p>
<pre><code>def jumpMaximum (list):
    maximum= list[0]
    for i in range(len(list)):
        for j in range(len(list)):    
            if i&gt;j and i&gt;maximum:
                maximum=i
                maximum, list[0] = list[0], maximum
    return list
print(jumpMaximum([1,2,3,4]))
</code></pre>
<p>Now when I run this, I get [3, 2, 3, 4], but this is wrong of course. I made the for loops to iterate through the list and find the maximum. And then I wrote //maximum, list[0] = list[0], maximum// to swap the first element with the max, so I am not sure where it is going wrong.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this:</p>
<pre><code>def jump_maximum(lst):
    _, i = max((e, i) for i, e in enumerate(lst))
    lst[0], lst[i] = lst[i], lst[0]
    return lst


print(jump_maximum([1, 2, 3, 4]))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[4, 2, 3, 1]
</code></pre>
<p>The idea is to use <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="nofollow noreferrer">enumerate</a> in conjunction with <a href="https://docs.python.org/3/library/functions.html#max" rel="nofollow noreferrer">max</a> to find the index (<code>i</code>) of the maximum element, then simply swap the elements and return the list.</p>
<p>As a <em>side note</em> you should not use names such as list for your variables because it shadows the built-in <a href="https://docs.python.org/3/library/stdtypes.html#list" rel="nofollow noreferrer">list</a>.</p>
<p><strong>UPDATE</strong></p>
<p>If you cannot use <code>enumerate</code> or <code>max</code>, you can do it like this:</p>
<pre><code>def jump_maximum(lst):

    i, ma = 0, lst[0]
    for j in range(len(lst)):
        if lst[j] &gt; ma:
            ma = lst[j]
            i = j

    lst[0], lst[i] = lst[i], lst[0]
    return lst


print(jump_maximum([1, 2, 3, 4]))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[4, 2, 3, 1]
</code></pre>
<p>The idea is to substitute <code>enumerate</code> and <code>max</code> by the <code>for</code> loop. Also you don't need the nested loops.</p>
</div>
<span class="comment-copy">Thanks, however I cannot use any built-in function like max() or enumerate(). Also now I did the line you did of // lst[0], lst[i] = lst[i], lst[0]// but now it outputs //[4, 2, 1, 3]// whereas that order is scrambled, I need for it to be [4,2,3,1].</span>
<span class="comment-copy">@itiswhatitis Updated the answer!</span>
<span class="comment-copy">OK thank you brother!</span>
<span class="comment-copy">@itiswhatitis Glad I could help! If my answer helped to solve your problem, please consider <a href="http://meta.stackexchange.com/a/5235/195035">marking it as accepted</a>. That's the customary way of indicating that your question is "resolved" and thanking the person who helped you.</span>
