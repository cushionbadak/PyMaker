<div class="post-text" itemprop="text">
<p>To be clear, I am not asking anyone to do this for me. I am simply asking a question seeking guidance so I can continue working on this.</p>
<p>We are given a file that gives various weights of packages;</p>
<pre><code>11
25
12
82
20
25
32
35
40
28
50
51
18
48
90
</code></pre>
<p>I have to create a program that will count the amount of packages, Categorize them into Small, Medium, and Large, and find the average of the weights.
I know I have to use If statements, and for loops to accumulate the weight count and categorize them among each category.</p>
<p>The terms for what is small, med, and large is as follows;</p>
<p>Small &lt; 10 lbs</p>
<p>Medium &gt;= 10 lbs. and &lt; 30 lbs</p>
<p>Large &gt;= 30 lbs.</p>
<p>If no packages of a weight
class are entered, report the message “N/A” instead of an average (if you try to
divide by 0 you will get an exception).</p>
<p>This is the code I have so far, I cant figure out if I have to include a for loop after the if, elif, and else. Or if what I have is on track.</p>
<pre><code>infile = open("packages.txt", 'r')
count = 0
line = infile.readline()
weight = int(line)
for line in infile:
    if weight &lt; 10:
        count = count + 1
        weight = weight + int(line)
        while weight &lt; 10:
            try:
                avg = weight / count
            except ValueError:
                print("N/A")
    elif weight &gt;= 10:
        if weight &lt; 30:
            weight = weight + int(line)
            count = count + 1
            avg = weight/count
    else:
        weight = weight + int(line)
        count = count + 1
        avg = weight/count
</code></pre>
<p>The output has to look something like this</p>
<pre><code>Category    Count    Average
Small       0        N/A
Medium      7        19.9
Large       8        53.5
</code></pre>
<p>Again, I am not looking for someone to do this for me. I am looking for the next step and/or tweaks to what I currently have to be able to continue forward. Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>To begin with you need <em>three</em> <code>weight</code> and <code>count</code> variables: One for each category.</p>
<p>Then your reading for the file is a little flawed. Don't start by reading a line, instead just have the loop and assign to <code>weight</code> inside the loop the first thing you do.</p>
<p>Perhaps something like this:</p>
<pre><code>total_small = 0
total_medium = 0
total_large = 0
count_small = 0
count_medium = 0
count_large = 0

for line in infile:
    weight = int(line)

    if weight &lt; 10:
        total_small += weight
        count_small += 1
    # And the same for medium and large as well...
</code></pre>
<p>Then <em>after</em> the loop you can easily calculate the average of each category as you print it.</p>
<p>Oh, and you don't check for the upper limit of medium packages, which you need to do.</p>
</div>
<div class="post-text" itemprop="text">
<p>First thing I think is better to use <code>with</code> statement when dealing with file objects. This has the advantage that the file is properly closed after its suite finishes, even if an exception is raised on the way. </p>
<p>In other words you don't need to call <code>close()</code> method on the file object and you are sure that in case of an exception raise is closed.</p>
<p>So </p>
<pre><code>infile = open("packages.txt", 'r')
#operations on file
...
infile.close()
</code></pre>
<p>will be better to use </p>
<pre><code>with open("packages.txt",'r') as infile:
    #following operation 
    #on infile like reading
</code></pre>
<h1>Average computing</h1>
<p>For this operation, you can use a <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="nofollow noreferrer">dictionary</a>. This is a map data structure, a set of <code>key,value</code> pairs where <strong><em>key</em></strong> need to be strings (in your case "small","medium","large") and <strong><em>value</em></strong> can be a simple type or another data structure like list,dictionary or object.</p>
<p>While reading the file you will populate the lists with the weights based on if conditional and at the end you can use the the free lists and compute the average using sum() and len().</p>
<pre><code>packages = {"small": [],
            "medium": [],
            "large": []}

with open("packages.txt","r") as packs:
    for pack in packs:
        weight = int(pack)
        if weight &lt; 10:
            packages["small"].append(weight)
        elif weight &lt; 30:
            packages["medium"].append(weight)
        else:
            packages["large"].append(weight)
###Printing the the average###
table_row = "%s\t%i\t%s" # string for formatting output, not the best solution
for key,weights in packages.items():
    print(table_row % (key, len(weights), averageValues(weights)))
</code></pre>
<p>Where <code>averageValues()</code> is the following function, that computes the average and return it like a string by how many decimals we want.</p>
<pre><code>def averageValues(values,decimals=1):
    float = "%." +  str(decimals) + "f"
    try:
        avg = sum(values)/len(values)
        return float % avg
    except:
        return "N/A"
</code></pre>
<p>Read answers to this question to understand how have an <a href="https://stackoverflow.com/questions/613183/how-do-i-sort-a-dictionary-by-value">ordered representation of the dictionary</a>, that is an unordered data structure.</p>
</div>
<div class="post-text" itemprop="text">
<p>maintain 3 variable to count 3 ranges like 
<code>weight1Sum,weight2Sum,weight3Sum</code> and initialize it to zero at the very first like weight1Sum = 0</p>
<p>your <code>count</code> variable is ok. You need to add value for weight when it is in range. Then u can divide related weightSum from count to display relevant value.</p>
<p>generally, you need to maintain 3 weights according to the range and update it.</p>
</div>
<span class="comment-copy">How would I check for the upper limit? Would that have to be done in the ELIF part of my control structure?</span>
<span class="comment-copy">@H.Raydon The condition should be "if weight is larger of equal to 10 AND weight is less than 30". Any descent Python book or tutorial should tell you how to do such conditions.</span>
