<div class="post-text" itemprop="text">
<p>I'm trying to convert C function for python 3.6 use.  </p>
<p>code as below:  </p>
<pre><code>lib = ctypes.WinDLL('ftrScanAPI.dll') # provided by fingerprint scanner
class FTRSCAN_IMAGE_SIZE(ctypes.Structure):
    _fields_ = [
    ("nWidth", ctypes.c_int),
    ("nHeight", ctypes.c_int),
    ("nImageSize", ctypes.c_int)
]

print('Open device and get device handle...')
hDevice = lib.ftrScanOpenDevice()
print('handle is', hDevice)
print('Get image size...')
Image_size = FTRSCAN_IMAGE_SIZE(0, 0, 0)
if lib.ftrScanGetImageSize(hDevice, ctypes.byref(Image_size)):
    print('Get image size succeed...')
    print('  W', Image_size.nWidth)
    print('  H', Image_size.nHeight)
    print('  Size', Image_size.nImageSize)
else:
    print('Get image size failed...')
</code></pre>
<p>function definition:  </p>
<pre><code>typedef struct FTR_PACKED __FTRSCAN_IMAGE_SIZE {
    int nWidth;
    int nHeight;
    int nImageSize;
} FTRSCAN_IMAGE_SIZE, *PFTRSCAN_IMAGE_SIZE;
FTRHANDLE ftrScanOpenDevice();  # typedef void *  FTRHANDLE;
BOOL ftrScanGetImageSize(FTRHANDLE ftrHandle, 
    PFTR_SCAN_IMAGE_SIZE pImageSize);
</code></pre>
<p>But <b>different OSes with the same code</b> seems to have different result:<br/>
<li>On Windows 7 64 bit<br/>
<a href="https://i.stack.imgur.com/7NiXW.png" rel="nofollow noreferrer"><img alt="output1" src="https://i.stack.imgur.com/7NiXW.png"/></a></li></p>
<p><li>On Windows 10 64 bit<br/>
I don't print "handle is here"
<a href="https://i.stack.imgur.com/P6RLD.png" rel="nofollow noreferrer"><img alt="output2" src="https://i.stack.imgur.com/P6RLD.png"/></a></li></p>
<p>What I've tried:<br/>
According to some answers on stack overflow, this may be caused by not assigning function argtypes and restype explicitly, so I tried and failed.</p>
</div>
<div class="post-text" itemprop="text">
<p>In <em>99%</em> of the cases, inconsistencies between arguments (and / or return) type inconsistencies are the cause (<a href="https://stackoverflow.com/questions/52268294/python-ctypes-cdll-loadlibrary-instantiate-an-object-execute-its-method-priva/52272969#52272969">[SO]: Python ctypes cdll.LoadLibrary, instantiate an object, execute its method, private variable address truncated (@CristiFati's answer)</a> is one such example).</p>
<p>Always have <a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">[Python 3]: ctypes - A foreign function library for Python</a> open when working with <em>ctypes</em>.</p>
<p>I found <a href="https://github.com/erikssm/futronics-fingerprint-reader/blob/master/ftrScanAPI.h" rel="nofollow noreferrer">[GitHub]: erikssm/futronics-fingerprint-reader - (master) futronics-fingerprint-reader/ftrScanAPI.h</a> (I don't know how different it's from what you currently have, but things you posted so far seem to match), and I did some changes to your code:</p>
<ul>
<li><strong>Define <em>argtypes</em> and <em>restype</em> for functions</strong></li>
<li>Define missing types (for clarity only)</li>
<li>Some other insignificant changes (renames)</li>
<li>One other thing that I noticed in the above file, is a <code>#pragma pack(push, 1)</code> macro (check <a href="https://msdn.microsoft.com/en-us/library/2e70t5y1.aspx" rel="nofollow noreferrer">[MSDN]: pack</a> for more details). For this structure it makes no difference (thanks @AnttiHaapala for the hint), as the 3 <em>int</em> (<em>4</em> byte) members alignment doesn't change, but for other structures (with "smaller" member types (e.g. <em>char</em>, <em>short</em>)) you might want to add: <code>_pack_ = 1</code></li>
</ul>
<p>Your modified code (needless to say, I didn't run it as I don't have the <em>.dll</em>):</p>
<pre class="lang-py prettyprint-override"><code>from ctypes import wintypes

# ...

lib = ctypes.WinDLL('ftrScanAPI.dll') # provided by fingerprint scanner
class FTRSCAN_IMAGE_SIZE(ctypes.Structure):
    # _pack_ = 1
    _fields_ = [
        ("nWidth", ctypes.c_int),
        ("nHeight", ctypes.c_int),
        ("nImageSize", ctypes.c_int),
    ]

PFTRSCAN_IMAGE_SIZE = ctypes.POINTER(FTRSCAN_IMAGE_SIZE)
FTRHANDLE = ctypes.c_void_p

print('Open device and get device handle...')

lib.ftrScanOpenDevice.argtypes = []
lib.ftrScanOpenDevice.restype = FTRHANDLE

h_device = lib.ftrScanOpenDevice()
print('handle is', h_device)
print('Get image size...')
image_size = FTRSCAN_IMAGE_SIZE(0, 0, 0)

lib.ftrScanGetImageSize.argtypes = [FTRHANDLE, PFTRSCAN_IMAGE_SIZE]
lib.ftrScanGetImageSize.restype = wintypes.BOOL

if lib.ftrScanGetImageSize(h_device, ctypes.byref(image_size)):
    print('Get image size succeed...')
    print('  W', image_size.nWidth)
    print('  H', image_size.nHeight)
    print('  Size', image_size.nImageSize)
else:
    print('Get image size failed...')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The problem seems to simply be that the device handle is a 64-bit entity (a typedef'd pointer to void). That it works in your Windows 7 was just a fluke, as the upper 33 bits of the handle were correctly zero. </p>
<p>The return type of all functions in ctypes defaults to 32-bit <code>int</code>. Now in Windows 10 it seems that the 32th bit (sign bit) was set, which causes a sign extension somewhere when the handle-coerced-to-int is pushed on the 64-bit stack for function call. The resulting address has all upper bits set (0xFFFFFFFFA...) which points to kernel space and not in the user space.</p>
<p>Thus perhaps you can get your code "working" with just</p>
<pre><code>lib.ftrScanOpenDevice.restype = c_void_p
</code></pre>
<p>That is not to say that you shouldn't define the argument and return types for <em>all</em> functions - you should, otherwise they will follow just the default argument promotion rules of the C language, and work... or totally fail to work, depending on whether the function's prototype itself is compatible with default argument promotions. For example any function that accepts <em><code>float</code>s</em> as arguments cannot be called correctly without defining the prototype.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should show your .argtypes and .restype attempts, but give this a try:</p>
<pre><code>from ctypes import wintypes as w

class FTRSCAN_IMAGE_SIZE(ctypes.Structure):
    _fields_ = [('nWidth', ctypes.c_int),
                ('nHeight', ctypes.c_int),
                ('nImageSize', ctypes.c_int)]

FTRHANDLE = ctypes.c_void_p

lib = ctypes.WinDLL('ftrScanAPI.dll')
lib.ftrScanOpenDevice.argtypes = None
lib.ftrScanOpenDevice.restype = FTRHANDLE
lib.ftrScanGetImageSize.argtypes = FTRHANDLE,ctypes.POINTER(FTRSCAN_IMAGE_SIZE)
lib.ftrScanGetImageSize.restype = w.BOOL
</code></pre>
<p>Check the use of <code>WinDLL</code> vs. <code>CDLL</code>.  It won't matter if your <em>Python</em> is 64-bit, but it makes a difference on 32-bit Python.  Use <code>CDLL</code> if the functions use C calling convention (__cdecl) and <code>WinDLL</code> if the functions use __stdcall calling convention.  If the header file isn't clear, the default is usually __cdecl.  <strong>Edit:</strong> from the API link in another answer, it is <code>__stdcall</code> and <code>WinDLL</code> should be used.</p>
</div>
<span class="comment-copy">Are you able to post the code?</span>
<span class="comment-copy">I've reedited the post, see if any unclear statements? Thanks</span>
<span class="comment-copy">Yes you might be right. Your <i>python</i>s are 64bit? Could you also post the 2 functions prototypes (in <i>C</i>), and also <code>FTRSCAN_IMAGE_SIZE</code>? I suspect that <code>hDevice = lib.ftrScanOpenDevice()</code> truncated the value. <a href="https://stackoverflow.com/questions/52268294/python-ctypes-cdll-loadlibrary-instantiate-an-object-execute-its-method-priva/52272969#52272969" title="python ctypes cdll loadlibrary instantiate an object execute its method priva">stackoverflow.com/questions/52268294/â€¦</a>. Please also post the chunk of code where you assign <i>argtypes</i> and <i>restype</i>.</span>
<span class="comment-copy">a) please <i>no</i> images. You <i>must</i> copy the output as text into your question. Also the second output does not match your code! (Doesn't print the handle!)</span>
<span class="comment-copy">pack should not be needed as <i>that</i> structure is already properly packed</span>
<span class="comment-copy">Thanks, it works!</span>
<span class="comment-copy">@AnttiHaapala: Thank you for the comment. I updated my answer accordingly.</span>
