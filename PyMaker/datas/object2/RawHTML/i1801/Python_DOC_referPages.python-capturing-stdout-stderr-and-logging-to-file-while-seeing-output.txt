<div class="post-text" itemprop="text">
<p>So I have a python script that's trying to automate an entire build procedure. As such, it is calling not only python files, but shell scripts, maven, etc. So what I want is a method/procedure/library to capture the outputs to stdout and stderr to a logfile while still printing it to the console even if the thing printing to the console is not a python script. </p>
<p>We're working on a linux machine so when doing this manually, we'd do a <code>script</code>, then all the commands, then an <code>exit</code>. But when trying to wrap this in a python script, it seems that script takes command of the shell and doesn't allow me to run the rest of my commands until I <code>exit</code> first.</p>
<p>For proof of concept, here's a bash script that prints a number every half second up to 10.</p>
<p><code>print_nums.bash</code></p>
<pre><code>#!/bin/bash

for i in {1..10}
do
    echo "$i"
    sleep 0.5
done
</code></pre>
<p>And here is what I've kind of want to do.</p>
<p><code>test_script.py</code></p>
<pre><code>import os

def main():
    cmd1 = "script /some/arbitrary/path/logfile.txt"
    cmd2 = "/path/to/print_nums.bash"
    cmd3 = "exit"

    os.system(cmd1)

    os.system(cmd2)

    os.system(cmd3)

if __name__ == '__main__':
    main()
</code></pre>
<p>I've also looked into the logging module, but it seems that only easily captures python prints to a log. I may be mistaken, and if there's an inutuitive way I'd definitely be willing to change methodologies. But essentially, I want to be able, in python, to effectively say from here I want to log the console output, and here I want to end the logging it programmatically.</p>
<p>You can imagine that a build command and initial testing can take a long amount of time like 15 - 20 minutes, which is a long time to have a console waiting without any output if you just did a </p>
<p><code>some_command.bash &gt; logfile.txt</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Easiest way for me was the answer from jww. Use <code>tee</code> in the python script in conjunction with <code>os.system</code> and <code>tee -a</code> if you need to append the output of another script to the same logfile.</p>
<p><code>test_script.py</code></p>
<pre><code>import os


def main():
    cmd1 = "path/to/aribitrary_script | tee /path/to/logfile"
    cmd2 = "path/to/another_script | tee -a /path/to/logfile"

    os.system(cmd1)
    os.system(cmd2)


if __name__ == '__main__':
    main()
</code></pre>
</div>
<span class="comment-copy">Take a look at the subprocess module and you can use the stdout and stderr kwargs to pipe the output to a log file. <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.stdout" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a></span>
<span class="comment-copy">Will just using the <code>-c</code> option of <code>script</code> work? Like <code>cmd1 = "script -c /path/to/print_nums.bash /some/arbitrary/path/logfile.txt"</code>. Then you only need the first <code>os.system(cmd1)</code>.</span>
<span class="comment-copy">@cosmic_inquiry As far as I know how, if I do something like Popen([cmd], stdout='logfile.txt', stderr='logfile.txt'), that doesn't print to the console. If I use a PIPE, then I'll have to wait until it completes to read the pipe and print to my logfile, unless there's a good way to dynamically print to the console while it's being saved to the logfile, something similiar to <code>tail -f logfile.txt</code> ?.</span>
<span class="comment-copy">@JohnAnderson I get a <code>print_nums.bash: Command not found.</code> even though it seems to be pointing to the right place. But this seems promising.</span>
<span class="comment-copy">Make sure the path is correct to <code>print_nums.bash</code> and that the permissions are correct (<code>chmod 755 /path/to/print_nums.bash</code>).</span>
<span class="comment-copy">if your script is another python script, then tee might suppress the output to stdout. If this is the case, call your python script explicitly with   <code>cmd = 'python -u python_script | tee /path/to/logfile'</code></span>
