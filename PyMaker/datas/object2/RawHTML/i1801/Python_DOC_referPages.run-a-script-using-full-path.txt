<div class="post-text" itemprop="text">
<p>I have a folder called TEST with inside :</p>
<ul>
<li>script.py</li>
<li>script.sh</li>
</ul>
<p>The bash file is :</p>
<pre><code>#!/bin/bash

# Run the python script
python script.py
</code></pre>
<p>If I run the bash file like this :</p>
<pre><code>./TEST/script.sh
</code></pre>
<p>I have the following error : </p>
<pre><code>python: can't open file 'script.py': [Errno 2] No such file or directory
</code></pre>
<p>How could I do, to tell my <code>script.sh</code> to look in the directory (which may change) and to allow me to run it for inside the TEST directory ?</p>
<p>Tricky, my python file run a sqlite database and I have the same problem when calling the script from outside the folder, it didn't look inside the folder to find the database!</p>
</div>
<div class="post-text" itemprop="text">
<h1>Alternative</h1>
<p>You are able to run the script directly by adding this line to the top of your python file:</p>
<pre><code>#!/usr/bin/env python
</code></pre>
<p>and then making the file executable:</p>
<pre><code>$ chmod +x script.py
</code></pre>
<p>With this, you can run the script directly with <code>./TEST/script.py</code></p>
<h1>What you asked for specifically</h1>
<p>This works to get the path of the script, and then pass that to python.</p>
<pre><code>#!/bin/sh

SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
python "$SCRIPTPATH/script.py"
</code></pre>
<h1>Also potentially useful:</h1>
<p>You mentioned having this problem with accessing a sqlite DB in the same folder, if you are running this from a script to solve this problem, it will not work. I imagine this question may be of use to you for that problem: <a href="https://stackoverflow.com/questions/595305/how-do-i-get-the-path-of-a-the-python-script-i-am-running-in#595332">How do I get the path of a the Python script I am running in?</a> </p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <code>$0</code> which is the name of the currently executing program, as invoked, combined with <code>dirname</code> which provides the directory component of a file path, to determine the path (absolute or relative) that the shell script was invoked under.  Then, you can apply it to the python invocation. </p>
<p>This example worked for me: </p>
<pre><code>$ t/t.sh
Hello, world!    
$ cat t/t.sh
#!/bin/bash
python "$(dirname $0)/t.py"
</code></pre>
<p>Take it a step farther and change your current working directory which will also be inherited by python, thus helping it to find its database:</p>
<pre><code>$ t/t.sh; cat t/t.sh ; cat t/t.py ; cat t/message.txt
hello, world!

#!/bin/bash
cd "$(dirname $0)"
python t.py
with(open('message.txt')) as msgf:
  print(msgf.read())
hello, world!
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From the shell script, you can always find your current directory: <a href="https://stackoverflow.com/q/59895/2988730">Getting the source directory of a Bash script from within</a>. While the accepted answer to this question provide a <em>very</em> comprehensive and robust solution, your relatively simple case only really needs something like</p>
<pre><code>#!/bin/bash
dir="$(dirname "${BASH_SOURCE[0]}")"
# Run the python script
python "$(dir)"/script.py
</code></pre>
<p>Another way to do it would be to change the directory from which you run the script:</p>
<pre><code>#!/bin/bash
dir="$(dirname "${BASH_SOURCE[0]}")"
# Run the python script
(cd "$dir"; python script.py)
</code></pre>
<p>The parentheses (<code>(...)</code>) around <code>cd</code> and <code>python</code> create a subprocess, so that the directory does not change for the rest of your bash script. This may not be necessary if you don't do anything else in the bash portion, but is still useful to have if you ever decide to say source your script instead of running it as a subprocess.</p>
<p>If you do not change the directory in bash, you can do it in Python using a combination of <a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="nofollow noreferrer"><code>sys.argv\[0\]</code></a>, <a href="https://docs.python.org/3/library/os.path.html#os.path.dirname" rel="nofollow noreferrer"><code>os.path.dirname</code></a> and <a href="https://docs.python.org/3/library/os.html#os.chdir" rel="nofollow noreferrer"><code>os.chdir</code></a>:</p>
<pre><code>import sys
import os

...

os.chdir(os.path.dirname(sys.argv[0]))
</code></pre>
</div>
<span class="comment-copy">seems to me this doesn't really have anything to do with <code>sqlite</code>, in fact, it has nearly nothing to do with <code>python</code>.  Really this is a bash and unix system question</span>
<span class="comment-copy">You could also do the equivalent of <code>$(dirname $0)</code> from python</span>
