<div class="post-text" itemprop="text">
<p>Currently I use the following technique:</p>
<pre><code>def Myfb(param1, param2, firstTime):
    if firstTime:
        global a = compute()
        global b = compute2()
    global a
    global b
    c = doNormalExecution(param1, param2, a, b)
</code></pre>
<p>Is there a more elegant way? I don't like creating globals</p>
</div>
<div class="post-text" itemprop="text">
<p>The technique is called memoization. The functools module has an <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>lru_cache</code></a> function that does what you want. </p>
<pre><code>from functools import lru_cache

@lru_cache(maxsize=None)
def Myfb(param1, param2):
    b = doNormalExecution(a)
</code></pre>
<p>The python docs have more information like what maxsize is and how lru_cache works so that you can implement it suitably.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use a generator:</p>
<pre><code>def Myfb():
    a = compute()
    while True:
      param1, param2 = yield
      b = doNormalExecution(a, param1, param2)
      yield b
</code></pre>
<p>Here you have a <a href="https://repl.it/repls/SardonicThriftyMozbot" rel="nofollow noreferrer">live example</a></p>
<p>Example code:</p>
<pre><code>def compute():
  return 10

def doNormalExecution(a, b, c):
  return a + b + c

def Myfb():
    a = compute()
    while True:
      param1, param2 = yield
      b = doNormalExecution(a, param1, param2)
      yield b

f = Myfb()
next(f)
for a, b in zip(range(10), range(10)):
  print(f.send((a, b)))
  next(f)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can create a custom callable that will maintain it's own state:</p>
<pre><code>class MyFB(object):
    _sentinel = object()

    def __init__(self):
        self._a = self._sentinel
        self._b = self._sentinel


    def __call__(self, param1, param2, reinit=False):
        if reinit or self._a is self._sentinel or self._b is self._sentinel:
            self._a = compute_a()
            self._b = compute_b()
        return doNormalExecution(param1, param2, self._a, self._b)


myfb = MyFB()

# now use `myfb` like an ordinary function
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't pass any parameters to a function, use this decorator (I had it lying around):</p>
<pre><code>import functools

def lazy(func):
    """ Decorator which only actually runs a function the first time it is
    called and stores the result to be returned on later calls.

    Usage:
        @lazy
        def func_to_be_only_run_once():
            ...
    """
    FLAG = object()
    result = FLAG
    @functools.wraps(func)
    def inner():
        nonlocal result
        if result is FLAG:
            result = func()
        return result
    return inner
</code></pre>
<p>If you have one or more arguments that change (including <code>self</code>) use <a href="https://docs.python.org/3/library/functools.html#functools.lru_cache" rel="nofollow noreferrer"><code>functools.lru_cache</code></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here's a cool way to do it using closures.</p>
<pre><code>def closure(firstTime=True):
  def Myfb():
    nonlocal firstTime
    if firstTime:
        print("First time.")
        firstTime = False
  return Myfb

myfb = closure()
myfb()
myfb()
</code></pre>
</div>
<span class="comment-copy">You could hack the mutable default argument or something, but I feel this would best to do <i>outside</i> the function</span>
<span class="comment-copy">You never use <code>param1</code> and <code>param2</code> in your function. Does it actually take parameters? If so, what happens if I pass new paramaters the second time?</span>
<span class="comment-copy"><code>b = doNormalExecution(a)</code> will raise name error in later executions then. Please add your real function and besides tell us what's the connection between global variable and first-time using the function.</span>
<span class="comment-copy">There are a couple ways of doing this I guess. You could use a closure, or you can add a property on the function object.</span>
<span class="comment-copy">@Chris_Rands <code>a</code> and <code>b</code> are use only in that function so I feel doing it outside will add complexity, don't you think?</span>
<span class="comment-copy">I don't know what you are talking about. Please read the documentation thoroughly. It most certainly supports an arbitrary number of parameters. The only condition it lays on parameters is that they be hashable as they are cached in a dict.</span>
<span class="comment-copy">Hmm fair point. It used to not be that way. +1</span>
<span class="comment-copy">This answer is wrong, or at least doesn't address the problem correctly. Where are you computing those global variables? And what does <code>lru_cache</code> has to do with that?</span>
<span class="comment-copy">It doesn't address the question fully because it was edited after I had my answer down. The question is completely different now.</span>
<span class="comment-copy">I didn't even read your answer when I wrote mine. Also I don't know how it's literally a copy of yours since you're using <code>functools</code> and unnecessary convoluted code while mine is a clean solution.</span>
<span class="comment-copy">Maybe read my answer more carefully before claiming it's a copy of yours?</span>
<span class="comment-copy">Haven't you got <code>True</code> and <code>False</code> backwards with regards to the <code>firstTime</code> parameter? This code as it stands will not print anything the first time, then <code>First time.</code> after that. Other than this though, I like this solution and don't understand the criticism.</span>
<span class="comment-copy">@RobinZigmond Okay corrected.</span>
