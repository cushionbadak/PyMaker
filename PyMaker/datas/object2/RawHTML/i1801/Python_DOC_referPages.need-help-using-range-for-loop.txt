<div class="post-text" itemprop="text">
<p>I am making a program that calculates the sum of all even and odd numbers between two number which are user inputted. I'm new to Python and am not sure how to use the <code>range</code> in a loop to make my program work. Here is my code. I know its sloppy and not well put together and not finished but any help works thanks.</p>
<pre><code>n = int(input(" please enter a number"))
m= int(input(" please enter another number"))
count =0
sum =0
for x in range(n,m+1,2):
    if x%2==0:
        count=count+x
    sum = count
    print(" the total sum of odd numbers are",sum)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's important to know if <code>n</code> is greater than <code>m</code> and invert situation if so. Other than that, you need to know if the smallest number is odd or even and begin the two ranges accordingly:</p>
<pre><code>n = int(input("Please enter a number: "))
m = int(input("Please enter another number: "))

# n will always be the smaller one
if n &gt; m:
    n, m = m, n

n_is_odd = n % 2 # Gives 1 if n is odd

n_even = n + n_is_odd # Sum 1 if n is odd
n_odd = n + (not n_is_odd) # Sum 1 if n is even

print("the total sum of even numbers is %d" % sum(range(n_even, m+1, 2)) )
print("the total sum of odd numbers is %d" % sum(range(n_odd, m+1, 2)) )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Input validation is a big part of good coding. A good overview can be found here:</p>
<ul>
<li><a href="https://stackoverflow.com/questions/23294658/asking-the-user-for-input-until-they-give-a-valid-response">Asking the user for input until they give a valid response</a></li>
</ul>
<p>To make the validation it reusable I put the validation in a function that only accept integers and (if a <code>minval</code> is provided, makes sure that the input is bigger that the minval.</p>
<pre><code>def while_invalid_ask_input_return_integer(text, minval = None):
    """Aks for input until a number is given that is &gt; minval if minval not None
    returns an integer."""
    while True:
        c = input (text)
        try:
            c = int(c)
            if minval is not None and c &lt; minval:
                raise ValueError  # its too small, raise an erros so we jump to except:
            return c
        except ValueError:
            if minval is not None:
                print("must be a number and greater ", minval)
            else:
                print("not a number")
</code></pre>
<p>I use it to get the first number, and the second number gets the first one as "constraint" so it will be bigger. For summation I just use the range starting once with <code>n</code> once with <code>n+1</code> till m and a range <code>step</code> of 2. I check what even/oddness <code>n</code> has and print text accordingly:</p>
<pre><code>n = while_invalid_ask_input_return_integer("please enter a number ")
m = while_invalid_ask_input_return_integer("enter number bigger then {}".format(n),n)

print( "Odd sum:" if n % 2 == 1 else "Even sum:", sum(range(n,m+1,2)) )
print( "Even sum:" if n % 2 == 1 else "Odd sum:", sum(range(n+1,m+1,2)) )
</code></pre>
<p>Output:</p>
<pre><code>please enter a number <b>k</b>
not a number
please enter a number <b>55</b>
enter number bigger then 55 <b>2</b>
must be a number and greater  55
enter number bigger then 55 <b>150</b>
Odd sum: 4896
Even sum: 4944</code></pre>
<p>Doku:</p>
<ul>
<li><a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">sum(iterable)</a></li>
<li><a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="nofollow noreferrer">try: except: error handling</a></li>
<li><a href="https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator">python ternary operator</a> (thats the thing @ <code>"Odd sum:" if n % 2 == 1 else "Even sum:"</code> in the print statement)</li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>Here's a function I think fits into the description of what you asked above. It returns <code>None</code> if the user doesn't enter the type of query he or she wants.</p>
<p>So query can either be <code>odd</code> or <code>even</code> and depending on this, it calculates the sum that you want. The function makes use of list comprehension which is super cool too.</p>
<pre><code>def calculate_odd_or_even_sum(query):
    start = int(input(" please enter a number"))
    end = int(input(" please enter another number"))
    count = 0

    if query == 'even':
        return sum([x for x in range(start, end) if x % 2 == 0])
    elif query == 'odd':
        return sum([x for x in range(start, end) if x % 2 != 0])
    else:
        return 0
</code></pre>
</div>
<span class="comment-copy">you are not testing if I input odd or even numbers. Your range only takes every 2nd number so the x%2 == 0 test is not needed - you only ever have odd OR even numbers depending on what you start with.  Dont use <code>sum</code> as variable name, there is already a built in function called <code>sum</code> - you are shadowing it. If you want to sum values you can do :  <code>print(sum( range( 10,21,2) ) )</code> and get the result of  10+12+14+16+18+20</span>
<span class="comment-copy"><code>calculates the sum of all even and odd numbers between two number </code>: Does it means you do 2 sums, one for even numbers and other for odd numbers?</span>
<span class="comment-copy">@emi yes i am calculating 2 sums</span>
<span class="comment-copy">confused on what tmp is</span>
<span class="comment-copy">A temporal variable to swap <code>n</code> and <code>m</code> values. Fixed with list assignment.</span>
