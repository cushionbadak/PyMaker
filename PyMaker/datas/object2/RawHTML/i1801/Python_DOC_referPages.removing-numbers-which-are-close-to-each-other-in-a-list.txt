<div class="post-text" itemprop="text">
<p>I have a list like </p>
<pre><code>mylist = [75,75,76,77,78,79,154,155,154,156,260,262,263,550,551,551,552]
</code></pre>
<p>i need to remove numbers are close to each other by maxumim four number like:</p>
<pre><code>num-4 &lt;= x &lt;= num +4
</code></pre>
<p>the list i need at the end should be like :</p>
<pre><code>list = [75,154,260,550]
</code></pre>
<p>or </p>
<pre><code>list = [76,156,263,551]
</code></pre>
<p>doesn't really matter which number to stay in the list , only one of those which are close.</p>
<p>i tried this which gave me :</p>
<pre><code>for i in range(len(l)):
    for j in range(len(l)):
        if i==j or i==j+1 or i==j+2 or i == j+3:
            pp= l.pop(j)
            print(pp)
print(l)


IndexError: pop index out of range
</code></pre>
<p>and this one which doesn't work the way i need:</p>
<pre><code>    for q in li:
        for w in li:
            print(q,'////',w)
            if q == w or q ==w+1 or q==w+2 or q==w+3:
                rem = li.remove(w)
</code></pre>
<p>thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>The below uses <a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>groupby</code></a> to identify runs from the iterable that start with a value <code>start</code> and contain values that differ from <code>start</code> by no more than 4.  We then collect all of those <code>start</code> values into a list.</p>
<pre><code>from itertools import groupby

def runs(difference=4):
    start = None
    def inner(n):
        nonlocal start
        if start is None:
            start = n
        elif abs(start-n) &gt; difference:
            start = n
        return start
    return inner

print([next(g) for k, g in groupby(mylist, runs())])
# [75, 154, 260, 550]
</code></pre>
<p>This assumes that the input data is already sorted.  If it's not, you'll have to sort it: <code>groupby(sorted(mylist), runs())</code>.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You can accomplish this using a set or list, you don't need a dict.</p>
<pre><code>usedValues = set()
newList = []

for v in myList:
    if v not in usedValues:
        newList.append(v)

        for lv in range(v - 4, v + 5):
            usedValues.add(lv)

print(newList)
</code></pre>
<p>This method stores all values within 4 of every value you've seen so far.  When you look at a new value from myList, you only need to check if you've seen something in it's ballpark before by checking usedValues.</p>
</div>
<span class="comment-copy">For this to work, <code>mylist</code> would have to be in a <code>sorted()</code> order, correct? Someday I wish I could get to the point of causally busting out standard libraries like that instead of slaving away with my own functions only to realize it already exists :\</span>
<span class="comment-copy">@Idlehands That's correct (and an oversight on my part).  I'll add a note to my answer.</span>
<span class="comment-copy">thanks , works nice i don't understand how this exactly works, can you please help to store the in a dict like every number that remain be the key and value be  the iteration that make the number? like this: <code>{125:0, 160:1: 195:2 ....}</code></span>
<span class="comment-copy">@Stick The function in a function lets us "remember" the start of the current run.  This is because calling <code>runs</code> creates an <code>inner</code> function that will then be called for every item in <code>mylist</code>. Since <code>inner</code> has a <code>nonlocal start</code> line, it can modify the <code>start</code> value from <code>runs</code>, which will persist across calls to <code>inner</code>. As for the dict, would <code>{next(g): i for i, (k, g) in enumerate(groupby(mylist, runs()))}</code> work?</span>
<span class="comment-copy">that is good but make each of them a dict, is there any way to put them in one ? now its like this : <code>{257: 0} {358: 1} {} {174: 3, 371: 3} {72: 4, 126: 4, 499: 4} {} {447: 6} {28: 7, 312: 7}</code>   i want :  <code>{257:0,358:1...}</code></span>
