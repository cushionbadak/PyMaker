<div class="post-text" itemprop="text">
<p>I'm trying to write a chat application in Python as a school project.</p>
<p>It should be receiving messages from a server and at the same time, it also should be able to send messages to that server. In order to do that, I created two threads: one waits for the incoming messages and the other one is takes inputs from me to send over. The problem is that it can't print the messages which are coming from the server because the other thread is always asking for input. Is there any way to make the message-receiving thread print the incoming messages while the input function asks for input? </p>
<p>Here is the troublesome part of the code:</p>
<pre><code>def sendmsg(conn):
    while True:
        msg=input("Your message: ")
        conn.send(bytes(msg,"utf-8"))

def getmsg(conn):
    while True:
        data=conn.recv(1024)
        print(data.decode("utf-8"))

def server():
    soket=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    soket.bind((HOST,PORT))
    soket.listen()
    print("Listining")
    conn, addr = soket.accept()
    print("Connection established!")
    send = threading.Thread(target = sendmsg(conn))
    get = threading.Thread(target = getmsg(conn))
    get.start()
    send.start()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The basic problem is with the following two lines:</p>
<pre><code>send = threading.Thread(target = sendmsg(conn))
get = threading.Thread(target = getmsg(conn))
</code></pre>
<p>There is a big difference in Python between the function object <code>sendmsg</code> and the result of calling that object <code>sendmsg(conn)</code>.</p>
<p>The <a href="https://docs.python.org/3/library/threading.html#thread-objects" rel="nofollow noreferrer"><code>Thread</code></a> object <code>send</code> never gets created, much less started, because the parameter you are trying to pass in is the result of the call <code>sendmsg(conn)</code>, but the function never returns. You have effectively entered an infinite loop at that point, always asking for user input in the main thread.</p>
<p>Instead, you should be passing in the <code>sendmsg</code> function object, and using the <code>args</code> parameter to <code>Thread</code> to let it know that you want to pass in an extra parameter when it does get called. The same applies to <code>getmsg</code>:</p>
<pre><code>send = threading.Thread(target=sendmsg, args=(conn,))
get = threading.Thread(target=getmsg, args=(conn,))
</code></pre>
<p>Be careful to include the comma in <code>args=(conn,)</code>, or the argument won't be interpreted as a tuple. You can use a list instead if you prefer: <code>args=[conn]</code>.</p>
</div>
<span class="comment-copy">Could you create a minimal example that showcases your issue and post it here? Something with two threads, where one asks for input and the other prints a list of messages? You don't need to post your whole client-server setup here.</span>
<span class="comment-copy">Could you please upload your current code so we can help</span>
<span class="comment-copy">@MadPhysicist  I added the code that you request.</span>
<span class="comment-copy">@FeitanPortor .</span>
<span class="comment-copy">Thanks. The issue is with how you create the threads. I'll post an answer momentarily</span>
