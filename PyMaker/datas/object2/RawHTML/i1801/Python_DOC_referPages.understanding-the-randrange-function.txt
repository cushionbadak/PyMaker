<div class="post-text" itemprop="text">
<p>A script that I copied from an online book asked me to try out this piece of code;</p>
<pre><code>import random
import time

#First variation
random.seed(1)

# Simple Range 0 &lt;= r &lt; 6
print(random.randrange(6), random.randrange(6))

# More complex range 1 &lt;= r &lt; 7
print(random.randrange(1,7), random.randrange(1,7))

# Really complex range of even numbers between 2 and 36
print(random.randrange(2,37,2))

# Odd numbers from 1 to 35
print(random.randrange(1,36,2))

print()

#Second variation
random.seed(time.clock())

# Simple Range 0 &lt;= r &lt; 6
print(random.randrange(6), random.randrange(6))

# More complex range 1 &lt;= r &lt; 7
print(random.randrange(1,7), random.randrange(1,7))

# Really complex range of even numbers between 2 and 36
print(random.randrange(2,37,2))

# Odd numbers from 1 to 35
print(random.randrange(1,36,2))
</code></pre>
<p>The aforementioned code returns me with this result;</p>
<pre><code>1 4
1 3
8
31

5 1
6 2
28
23
</code></pre>
<p>I'm trying to understand the <code>randrange()</code> function to be more specific and especially in context to the above code example. So what exactly did Python do in it to show a very different result each time?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>randrange</code> in the <code>random</code> module is a way to generate random numbers from a given range.  It also allows for steps to be included.  </p>
<p>Basically it uses psuedorandom methodology to create random numbers. The applicability of random number generation can be googled.  </p>
<p>From the API:</p>
<pre><code>Syntax : 
random.randrange(start(opt),stop,step(opt))
Parameters :
start(opt) :  Number consideration for generation starts from this,
default value is 0. This parameter is optional.
stop : Numbers less than this are generated. This parameter is mandatory.
step(opt) : Step point of range, this won't be included. This is optional.
Default value is 1.
Return Value : 
This function generated the numbers in the sequence start-stop skipping step.
Exceptions :
Raises ValueError if stop &lt;= start and number is non- integral.
</code></pre>
</div>
<span class="comment-copy">the random module is all about giving you random numbers. from a range. every time you ask for it. fe. to simulate dice rolls between 1 and 6 ... did you read the API ? <a href="https://docs.python.org/3/library/random.html" rel="nofollow noreferrer">docs.python.org/3/library/random.html</a>  and   <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="nofollow noreferrer">docs.python.org/3/library/random.html#random.randrange</a>  ? The seed just sets a "starting value" for the internal random number generator so that the sequence of given random numbers for a given sequence of random operations stays identical. each call to random changes the internal state - by seeding you get the same states if you use the same operations.</span>
<span class="comment-copy">I don't think anyone has mentioned this yet, but the key to the randomness is in the <code>seed</code> selection. In the First variation you have <code>random.seed(1)</code> this means that you will get consistently the same random numbers each time you run the code (given the same range). In the second variation you use <code>random.seed(time.clock())</code> which uses the current time as the seed, so each time you run the code you will get different results. Try it for yourself and see that each time you run your code the first variation results will remain constant while the second variation will be unique at each run.</span>
<span class="comment-copy">@ElyFialkoff yeah that makes so much more sense now!</span>
<span class="comment-copy">@Jarmos when using a specific seed its easy to think that things aren't random but the values are generated in a somewhat random way even though you know the results and each time they are the same (given the same range). You will most likely always use the current time as the seed, this way its never known (at least not known to normal people - it is still somewhat predetermined since there is an algorithm behind it) but for your sake the section variation is the go to method of choice for producing random numbers.</span>
<span class="comment-copy">why not add the <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="nofollow noreferrer">docs.python.org/3/library/random.html#random.randrange</a> link?</span>
