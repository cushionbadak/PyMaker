<div class="post-text" itemprop="text">
<p>I'm trying to using Python <code>distutils.dir_util.copy_tree</code> to copy the contents of one directory to another, and update the files in the destination if they have changed. I'm using the options:</p>
<pre><code>copy_tree(src, dst, preserve_symlinks=1, update=1)
</code></pre>
<p>This works for the initial copy, but fails on all subsequent ones with:</p>
<pre><code>FileExistsError: [Errno 17] File exists: 'file1' -&gt; 'test2/file2'
</code></pre>
<p>Where <code>file1</code> is a symlink to <code>file2</code>. </p>
<p>I don't need it to update the symlinks. It's fine if it just ignores them the second time around, or blindly overwrites them. But, as it is, it seems impossible to copy a directory containing symlinks in update mode. </p>
<p>Is there some way to do this using this tool? Is there a better tool to use, or will I need to create my own?</p>
<p>Platform details:</p>
<p>CentOS Linux 7.5
Anaconda Python 3.6.6</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's my attempt: a shim for <a href="https://docs.python.org/3/distutils/apiref.html#distutils.dir_util.copy_tree" rel="nofollow noreferrer"><code>distutils.dir_util.copy_tree</code></a> with monkeypatching <code>os.symlink</code>.</p>
<pre><code>import contextlib
import os
import distutils.dir_util


@contextlib.contextmanager
def monkeypatch(object, name, patch):
    value_orig = getattr(object, name)
    setattr(object, name, patch)
    yield object
    setattr(object, name, value_orig)


def copy_tree(src, dst, **kwargs):
    stdlib_symlink = os.symlink

    def _symlink(src, dst, **kwargs):
        try:
            stdlib_symlink(src, dst, **kwargs)
        except FileExistsError as err:
            pass

    with monkeypatch(distutils.dir_util.os, 'symlink', _symlink):
        distutils.dir_util.copy_tree(src, dst, **kwargs)
</code></pre>
<p>This version of <code>_symlink</code> function will ignore any errors occurring on symlink attempts. You can write your own that will recreate the symlink, something like</p>
<pre><code>def _symlink(src, dst, **kwargs):
    try:
        stdlib_symlink(src, dst, **kwargs)
    except FileExistsError as err:
        os.remove(dst)
        stdlib_symlink(src, dst)
</code></pre>
</div>
<span class="comment-copy">good question. I guess I'd monkeypatch <code>os.symlink</code> before calling <code>copy_tree</code> with an error prone version (skip existing symlinks or remove and recreate them), then revert <code>os.symlink</code> to the original function after <code>copy_tree</code> finishes. Or just call <code>rsync</code> via <code>subprocess.Popen</code> :-)</span>
<span class="comment-copy">I'm actually writing this for the purpose of replacing old code that used the <code>rsync</code> method. I needed more control over the way things were being synced. The monkey-patch idea sounds promising though.</span>
