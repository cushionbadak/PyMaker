<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/2398661/schedule-a-repeating-event-in-python-3">Schedule a repeating event in Python 3</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/3433559/python-time-delays">Python Time Delays</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
<li>
<a dir="ltr" href="/questions/10154568/postpone-code-for-later-execution-in-python-like-settimeout-in-javascript">Postpone code for later execution in python (like setTimeout in javascript) [duplicate]</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I have a list of objects of a particular class where each object has a unix time attribute. I would like to execute a function</p>
<pre><code>class Car:

    def __init__(self,  id, time):
       self.id = id
       self.time = time

objct = [Car(i, time_unix[i]) for i in range(10)]
</code></pre>
<p>where <code>time_unix</code> is a list of unix times. I would like to create a new thread that will run 'in parallel' to this code where it checks the current time. If the current time is equal to one of the object's <code>unix_time</code>, a new function called <code>drive</code> will be invoked.</p>
<p>So I would like to have a thread that is on constant alert for invoking a <code>drive</code> function since I might have other cars coming in with their respective time to drive.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>threading.Timer</code> for scheduling execution of a target function in a separate thread after a specified time interval.</p>
<blockquote>
<p><strong>Timer Objects</strong></p>
<p>This class represents an action that should be run only after a certain amount of time has passed â€” a timer. Timer is a subclass of Thread and as such also functions as an example of creating custom threads.</p>
<p>Timers are started, as with threads, by calling their start() method. The timer can be stopped (before its action has begun) by calling the cancel() method. The interval the timer will wait before executing its action may not be exactly the same as the interval specified by the user. <a href="https://docs.python.org/3/library/threading.html#timer-objects" rel="nofollow noreferrer">docs</a></p>
</blockquote>
<pre><code>from threading import Timer, current_thread
from datetime import datetime


def drive(car):
    print(f'{datetime.now()} tid:{current_thread()} {car}: brumbrum')


class Car:
    def __init__(self,  id, time):
       self.id = id
       self.time = time


if __name__ == '__main__':

    N_CARS = 5

    time_unix = {k: v for k, v in zip(range(N_CARS), range(N_CARS))}
    cars = [Car(f'car_{i}', time_unix[i]) for i in range(N_CARS)]

    for car in cars:
        interval = car.time  # calculate delay in seconds for execution here
        t = Timer(interval=interval, function=drive, args=(car.id,))
        t.start()
</code></pre>
<p>Example Output:</p>
<pre><code>2018-11-05 13:01:50.999886 tid:&lt;Timer(Thread-2, started 139979005781760)&gt; car_0: brumbrum
2018-11-05 13:01:52.000360 tid:&lt;Timer(Thread-3, started 139978997389056)&gt; car_1: brumbrum
2018-11-05 13:01:53.000452 tid:&lt;Timer(Thread-4, started 139979005781760)&gt; car_2: brumbrum
2018-11-05 13:01:54.000533 tid:&lt;Timer(Thread-5, started 139978986825472)&gt; car_3: brumbrum
2018-11-05 13:01:55.000625 tid:&lt;Timer(Thread-6, started 139978978432768)&gt; car_4: brumbrum

Process finished with exit code 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You don't need to check the current time every now and then. You can calculate how many seconds the thread needs to wait and call <a href="https://docs.python.org/3/library/time.html#time.sleep" rel="nofollow noreferrer"><code>time.sleep</code></a>.</p>
<p>Combined with <a href="https://stackoverflow.com/questions/2846653/how-to-use-threading-in-python">this answer</a>, you get:</p>
<pre><code>from multiprocessing.dummy import Pool as ThreadPool
from time import sleep

pool = ThreadPool(4) 
cars = [('Car1', 3), ('Car2', 1), ('Car3', 2)]

def start_car(car, time_to_wait):
    sleep(time_to_wait)
    print("Starting %s after %d seconds" % (car, time_to_wait))

pool.starmap(start_car, cars)
</code></pre>
<p>It outputs:</p>
<pre><code>Starting Car2 after 1 seconds
Starting Car3 after 2 seconds
Starting Car1 after 3 seconds
</code></pre>
</div>
<span class="comment-copy">@Martijn Pieters The marked as duplicate link is about scheduling one specific event repeatedly at a fixed time interval (periodically). This question here is about individual per-object scheduling without a fixed general time interval and where the total amount of scheduled tasks is unspecified.</span>
<span class="comment-copy">@Darkonaut: yet the solution is the same, use <code>threading.Timer</code>.</span>
<span class="comment-copy">@Martijn Pieters Isn't the policy to decide this on the question if it's a dup? It's not clear which answer you think is <i>also</i> a solution for this just by linking a question.</span>
<span class="comment-copy">@Darkonaut: I've added a few more links there. The policy is to point to a canonical that answers the problem.</span>
<span class="comment-copy">this looks like what I need.Is it a good idea to put the t=Timer() t.start() code inside Car's constructor. so everytime a car is created the thread is incovked?</span>
<span class="comment-copy">@user7331538 Would be an option. You could also subclass <code>Timer</code> and name this class <code>Car</code>. I prefer not to bury the thread inside a normal class but subclassing threads directly to make the threaded character easier to spot.</span>
<span class="comment-copy">But what if new Cars are being added and I dont know before hand that I need 4 threads? That is why I asked for a thread that is constantly looking out for new incoming cars and their time to start driving. In other words what if cars list is changing with time?</span>
