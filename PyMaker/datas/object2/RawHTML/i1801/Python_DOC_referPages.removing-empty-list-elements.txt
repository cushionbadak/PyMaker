<div class="post-text" itemprop="text">
<p>I have a list of source code that is getting looked through to find matching a string and returns all matches in a list. 
The issue is that I get an empty list element each time no match was found.</p>
<p>For example : ["matchone","",matchtwo"", .....]</p>
<p>The code looks like this: </p>
<pre><code>    name_match = re.compile("\s\w+\(")
    match_list = []
    match_list_reformat = []

   for x in range(0,30):
       if name_match.findall(source_code[x]) != None:
        match_list.append(gc_name_match.findall(source_code[x]))
        format = "".join([c for c in match_list[x] if c is not '(']).replace("(", "")
        match_list_reformat.append(format)

return match_list_reformat
</code></pre>
<p>Using "if name_match.findall(source_code[x]) != None:" doesnt change the outcome.</p>
<p>On a side note. How can i go through all of the lines of the source code with this def? The range(0,30) is only a workaround. </p>
</div>
<div class="post-text" itemprop="text">
<p>just one small change to the last line in your for loop</p>
<pre><code>match_list_reformat.append(format) if format != '' else False
</code></pre>
<p>to go through all of your sourcecode change <code>range(30)</code> to <code>range(len(source_code))</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Simplest without <code>re</code>,  as Python 3 returns an iterator from filter, so should be wrapped in a call to <code>list()</code></p>
<pre><code>&gt;&gt;&gt; mylst
['matchone', '', 'matchtwo', '', 'matchall', '']

&gt;&gt;&gt; list(filter(None, mylst))
['matchone', 'matchtwo', 'matchall']
</code></pre>
<p><a href="https://docs.python.org/3/library/functions.html#filter" rel="nofollow noreferrer">filter</a>  is fastest.</p>
<p><strong>From Documents:</strong></p>
<blockquote>
<p>filter(function, iterable) Construct an iterator from those elements
  of iterable for which function returns true. iterable may be either a
  sequence, a container which supports iteration, or an iterator. If
  function is None, the identity function is assumed, that is, all
  elements of iterable that are false are removed.</p>
<p>Note that filter(function, iterable) is equivalent to the generator
  expression (item for item in iterable if function(item)) if function
  is not None and (item for item in iterable if item) if function is
  None.</p>
</blockquote>
</div>
<span class="comment-copy">An empty list will not compare equal to <code>None</code>. Just use <code>if name_match.findall(source_code[x])</code> to catch the empty list</span>
<span class="comment-copy">also regexps are not exactly cheap so you may want to use an intermediate variable instead of doing the same call twice</span>
<span class="comment-copy">maybe <b>if len(match_list_reformat) != 0 then return match_list_reformat</b> works</span>
<span class="comment-copy">@markkeven Python objects have a truth value already, so the idiomatic way would be a plain and simple  <code>if match_list_reformat: ...</code></span>
<span class="comment-copy">"On a side note. How can i go through all of the lines of the source code with this def? The range(0,30) is only a workaround." =&gt; I think you should really take a couple hours doing the official Python tutorial - you obviously don't know the very basics of the language. Python's for loop is really a "foreach" loop, so you basically iterate over an iterable (list, string, file - yes, files are iterable - etc) with <code>for item in iterable: do_something_with(item)</code>.</span>
<span class="comment-copy"><code>else continue</code> is invalid syntax (at least on 2.7.x and 3.6.x)</span>
<span class="comment-copy">that it is, changed to reflect that</span>
