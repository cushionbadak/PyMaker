<div class="post-text" itemprop="text">
<p>I created a function that accepts multiple arguments of dictionaries, and returns a concatenated dictionary. I researched online for a while about concatenating a merging dictionaries and tested the interesting ones. They all resulted in updating the values (or overwriting them).  </p>
<p>My use case is passing in dictionaries where each key has a single value, and want a dictionary with the same or different keys, with a list of values for each key. That is my definition of what a so-called "concatenation" of dictionaries would look like. </p>
<p>Here are two very basic dictionaries:</p>
<pre><code>a = {1: 'a', 2: 'b', 3: 'c'}
b = {1: 'd', 2: 'e', 3: 'f'}
</code></pre>
<p>Here is the function:</p>
<pre><code>def merge_dict(*args:dict):

    result = {}

    for arg in args:

        if not isinstance(arg, dict):
            return {}

        result_keys = result.keys()
        for key, value in arg.items():
            if key not in result_keys:
                result[key] = [value]
            else:
                result[key].append(value)

    return result
</code></pre>
<p>The output is:</p>
<pre><code>print(merge_dict(a, b))
{1: ['a', 'd'], 2: ['b', 'e'], 3: ['c', 'f']}
</code></pre>
<p>I could do the same for tuples, or arrays, Numpy arrays, etc. Note this function is very simple and doesn't sanitize input or validate the data structure further than it being a <code>dict</code> instance.</p>
<p>But, I would like to know if there is a more efficient or "pythonic" way of doing this. Please feel free to add your input. </p>
<p>Consider adding these dictionaries with different keys:</p>
<pre><code>c = {4: 'g', 5: 'h', 6: 'i'}
d = {4: 'j', 5: 'k', 6: 'l'}
</code></pre>
<p>The output is:</p>
<pre><code>print(merge_dict(a, b, c, d))
{1: ['a', 'd'], 2: ['b', 'e'], 3: ['c', 'f'], 4: ['g', 'j'], 5: ['h', 'k'], 6: ['i', 'l']}
</code></pre>
<p>I will work on nested data structures soon.</p>
<p>Because of your answers, here is what I did:</p>
<pre><code>import collections

def merge_dicts_1(*args):
    rtn = collections.defaultdict(list)
    for input_dict in args:
        for key, value in input_dict.items():
            rtn[key].append(value)
    return rtn

def merge_dicts_2(*args):
    rtn = {}
    for input_dict in args:
        for key, value in input_dict.items():
            rtn.setdefault(key, []).append(value)
    return rtn

if __name__ == "__main__":
    a = {1: 'a', 2: 'b', 3: 'c'}
    b = {1: 'd', 2: 'e', 3: 'f'}
    c = {4: 'g', 5: 'h', 6: 'i'}
    d = {4: 'j', 5: 'k', 6: 'l'}
    e = merge_dicts_1(a, b, c, d)
    f = merge_dicts_2(a, b, c, d)
    print(e)
    print(f)
    print(e == f)
</code></pre>
<p>This prints the following:</p>
<pre><code>defaultdict(&lt;class 'list'&gt;, {1: ['a', 'd'], 2: ['b', 'e'], 3: ['c', 'f'], 4: ['g', 'j'], 5: ['h', 'k'], 6: ['i', 'l']})
{1: ['a', 'd'], 2: ['b', 'e'], 3: ['c', 'f'], 4: ['g', 'j'], 5: ['h', 'k'], 6: ['i', 'l']}
True
</code></pre>
<p>Thank you!</p>
</div>
<div class="post-text" itemprop="text">
<p>Something like this would work for any number of input dictionaries:</p>
<pre><code>import collections

def merge_dicts(*args):
    rtn = collections.defaultdict(list)
    for input_dict in args:
        for key, value in input_dict.items():
            rtn[key].append(value)
    return rtn
</code></pre>
<p>The trick is using the <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> structure to automatically make new entries when they don't exist.  In this case, accessing a key that doesn't yet exist creates it as an empty list.</p>
<p>Note that the above returns a <code>defaultdict</code> object.  If this isn't desirable, you can cast it back to dict or use this function instead:</p>
<pre><code>def merge_dicts(*args):
    rtn = {}
    for input_dict in args:
        for key, value in input_dict.items():
            rtn.setdefault(key, []).append(value)
    return rtn
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>How about something like this?</p>
<pre><code>from functools import reduce

def _merge_two_dicts(combined, dictionary):
    for key, value in dictionary.items():
        combined.setdefault(key, []).append(value)
    return combined

def merge_dicts(*dicts):
    return reduce(_merge_two_dicts, dicts, {})


if __name__ == '__main__':
    a = {1: 'a', 2: 'b', 3: 'c'}
    b = {1: 'd', 2: 'e', 3: 'f', 4: 'g'}
    c = {1: 'h', 3: 'i', 5: 'j'}

    combined = merge_dicts(a, b, c)
    print(combined)    
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>{1: ['a', 'd', 'h'], 2: ['b', 'e'], 3: ['c', 'f', 'i'], 4: ['g'], 5: ['j']}
</code></pre>
</div>
<span class="comment-copy">What should happen to keys that only exist in one dict?  What should happen if a value is a nested dict?</span>
<span class="comment-copy">@Mr.Llama Those are good questions. I could have the function look for that, but it isn't my use case. It could iterate through the keys and check its type recursively, but that wasn't the original purpose of the function.</span>
<span class="comment-copy">@Mr.Llama I updated the question to include a use case of adding dictionaries of different keys. The function handled it as I expected.</span>
<span class="comment-copy">Not quite what I was asking, but good nonetheless.  I was wondering more in the case of what should <code>merge_dict({'a': 1}, {'b': 2})</code> return.  Should it be <code>{'a': [1], 'b': [2]}</code> or <code>{'a': 1, 'b': 2}</code>?</span>
<span class="comment-copy">try using <code>defaultdict(list)</code></span>
<span class="comment-copy">Great, that resulted in <code>defaultdict(&lt;class 'list'&gt;, {1: ['a', 'd'], 2: ['b', 'e'], 3: ['c', 'f'], 4: ['g', 'j'], 5: ['h', 'k'], 6: ['i', 'l']})</code> when I passed my 4 dictionaries to it and printed the dictionary.</span>
<span class="comment-copy">Thank you for your answer. To use this, I would need to write a wrapper function that accepts multiple arguments and passes <code>args[0]</code> and <code>args[1]</code>, then that resulting dictionary and <code>args[2]</code>, and so on to <code>merge_two_dicts</code>. How would you write this to handle <code>*args</code>?</span>
<span class="comment-copy">Debug255:What about the code in my (updated) answer? If it solves your problem please consider accepting my answer. Please see <a href="https://stackoverflow.com/help/someone-answers">What should I do when someone answers my question?</a></span>
<span class="comment-copy">I accepted the other answer because it addressed the question and I moved on. I did vote up your answer. Both actions are the only 2 positive things to do with an answer. I think your updated answer is clever, using reduce. So, I'll test it on Monday. Thank you.</span>
