<div class="post-text" itemprop="text">
<p>I want to do a loop that gives factorials from 10 to 1.</p>
<p>So I have this code:</p>
<pre><code>factorial = 1
for i in range(1,11):
    factorial = factorial * i
    print(i,'!=', factorial)
</code></pre>
<p>But this shows results like this:</p>
<pre class="lang-none prettyprint-override"><code>1 != 1
2 != 2
3 != 6
</code></pre>
<p>However I want them this way:</p>
<pre class="lang-none prettyprint-override"><code>10 != 3628800
9 != 362880
8 != 40320
</code></pre>
<p>I've tried few different things but nothing really works, any ideas please?</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>results = []
factorial = 1
for i in range(1,11):
    factorial = factorial * i
    results.append('{:2,}! = {:,}'.format(i, factorial))

print('\n'.join(reversed(results)))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>10! = 3,628,800
 9! = 362,880
 8! = 40,320
 7! = 5,040
 6! = 720
 5! = 120
 4! = 24
 3! = 6
 2! = 2
 1! = 1
</code></pre>
<p>To reduce the amount of memory required, you could do it like this instead:</p>
<pre><code>results = []
factorial = 1
for i in range(1, 11):
    factorial *= i
    results.append(factorial)

for i, value in enumerate(reversed(results)):
    print('{:2,}! = {:,}'.format(len(results)-i, value))
</code></pre>
<p>If you like list comprehensions, it could also be done in this somewhat hacky way:</p>
<pre><code>res = []
res = [res[-1] for x in range(1, 11) if not res.append(x*res[-1] if res else 1)]

for i, value in enumerate(reversed(res)):
    print('{:2,}! = {:,}'.format(len(res)-i, value))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In order to compute <code>10!</code> you need to compute <code>9!</code> first, so your best approach in order to avoid redundant computation is to write a function/generator that computes the factorials <code>1!</code>, <code>2!</code>, ... and then reverse the results.</p>
<p>Like this, for example:</p>
<pre><code>&gt;&gt;&gt; def factorials(n):
...:    fact = 1
...:    for i in range(1, n+1):
...:        fact = fact*i
...:        yield fact
...:        
&gt;&gt;&gt; n = 10
&gt;&gt;&gt; facts = reversed(list(factorials(n)))
&gt;&gt;&gt;
&gt;&gt;&gt; for f, i in zip(facts, range(n, 0, -1)):
...:    print('{}! = {}'.format(i, f))
...:    
10! = 3628800
9! = 362880
8! = 40320
7! = 5040
6! = 720
5! = 120
4! = 24
3! = 6
2! = 2
1! = 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Divide the task into <em>calculation</em> and <em>output</em>. Store the calculated values in a dictionary for later output. Storing the numbers in a dictionary is cheaper then storing all output strings to be reversed later - still, if you want to calculate very high factorials this will eventually overflow the memory you got.</p>
<p>By filling a dictionary incrementally you can reuse the last created factorial which reduces the complexety of computation.</p>
<p>That way you have all factorials at your bidding when printing them:</p>
<pre><code># calculation:
f = {}
for i in range(1,11):

    # the i-th factorial is equal to the (i-1)-th factorial multiplied by i
    # for f[1] you try to access f[0] which does not exists, hence we use the 
    # default value:   dict.get(key, defaultvalue_used_if_key_not_in_dict)
    f[i] = f.get((i-1),1) * i

# different ways of output:
sor = sorted(f,reverse=True)
# print top down
for key in sor:
    print(f"{key:&gt;2}! == {f[key]}")

# top down, only even
for key in sor:
    if key % 2 == 0:
        print(f"{key:&gt;2}! == {f[key]}")

# top down, only odd    
for key in sor:
    if key % 2 == 1:
        print(f"{key:&gt;2}! == {f[key]}")

print(f)
</code></pre>
<p>Output:</p>
<pre><code>10! == 3628800
 9! == 362880
 8! == 40320
 7! == 5040
 6! == 720
 5! == 120
 4! == 24
 3! == 6
 2! == 2
 1! == 1

10! == 3628800
 8! == 40320
 6! == 720
 4! == 24
 2! == 2

 9! == 362880
 7! == 5040
 5! == 120
 3! == 6
 1! == 1

# f 
{1: 1, 2: 2, 3: 6, 4: 24, 5: 120, 6: 720, 7: 5040, 8: 40320, 9: 362880, 10: 3628800}
</code></pre>
<p>See: <a href="https://docs.python.org/3/library/stdtypes.html#dict" rel="nofollow noreferrer">python.org Dict-Doku</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>First:</strong><br/>
For factorial in python we could use <code>math.factorial()</code> <a href="https://docs.python.org/3/library/math.html" rel="nofollow noreferrer">math â€” Mathematical functions</a></p>
<p><strong>Second:</strong><br/>
You want your list in <code>reversed</code> order.  </p>
<p>So we just use a decreasing for loop <code>for i in range(x, 0, -1):</code><br/>
<code>-1</code> is the step we are using, <code>x</code> is your starting point, <code>0</code> the end of the loop.</p>
<p><strong>Third:</strong><br/>
Using a generator to save memory.<br/>
In this case i am using <code>yield</code> <a href="https://pythontips.com/2013/09/29/the-python-yield-keyword-explained/" rel="nofollow noreferrer">The Python yield keyword explained</a> </p>
<p><strong>Finally:</strong><br/>
You can print out the generator using <code>for loop</code></p>
<p><em>Code Example:</em>
</p>
<pre><code>import math

def fact(x):
    for i in range(x, 0, -1):
        yield math.factorial(i)

results = fact(10)

for num in results:
    print(num) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you're certain you want to calculate factorial in that way, the only way the comes in mind is insert your output to a list\dictionary and print it after the calculations.</p>
<pre><code>factorial = 1
factList = {}
for i in range(1,11):
    factorial = factorial * i
    factList[i] = factorial

for i in range(1,11):
    print(11-i, "!: ",factList[11-i])
</code></pre>
</div>
<span class="comment-copy">B.Mat: Be careful using this because it will consume large amounts of memory when computing larger factorials since it stores the entire list of them in memory.</span>
<span class="comment-copy">Sure, I will keep this in mind. Thanks.</span>
<span class="comment-copy">This works nice too, thanks.</span>
<span class="comment-copy">Works great also, thanks.</span>
<span class="comment-copy">But this shows exactly the same output I had before</span>
<span class="comment-copy">Yes you're right, edited my answer (11-i) instead of i.</span>
<span class="comment-copy">Works now. Thanks ;)</span>
