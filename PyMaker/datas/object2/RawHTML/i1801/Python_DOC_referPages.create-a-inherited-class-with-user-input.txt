<div class="post-text" itemprop="text">
<p>I'm trying to code a product inventory project. I stumbled across this problem and have been searching since a few days but couldn't find any way to do it. How can I create a class inherited from the base class with user input.. </p>
<p>Here is the base class:</p>
<pre><code>class Product:
    def __init__(self, title, color, price):
        self.title = title
        self.color = color
        self.price = price
</code></pre>
<p>what I'm trying to achive is that user will be able to add products himself by lets say pressing 2 will ask him to enter the product type (coat) and than the parameters specific to the product which will create a new class inherited from the base class. Like this:</p>
<pre><code>class coats(Product):
    def __init__(self, material, size):
    self.material = material
    self.size = size
</code></pre>
<p>I can create instances with user input but creating inherited classes I couldn't figure it out. I appreciate if you could help. Thanks.</p>
</div>
<div class="post-text" itemprop="text">
<p>While you can generate classes dynamically with the <a href="https://docs.python.org/3/library/functions.html#type" rel="nofollow noreferrer"><code>type()</code> function</a>, you really do <em>not</em> want to do this here. Code generation to model user-generated data only leads to very, very difficult to manage code that looks up attributes and variable names dynamically.</p>
<p>Use a datastructure <em>in your existing class</em> to store user-generated data. All you need is a dictionary:</p>
<pre><code>class Product:
    def __init__(self, type, price, properties):
        self.type = type
        self.price = price
        self.properties = properties
</code></pre>
<p>then to create a <code>coat</code> product use:</p>
<pre><code>products = {}
products['coat'] = Product('coat', 10.0, {'color': 'some color', 'material': 'some material', size: 12})
</code></pre>
<p>where the various values, and the key in <code>products</code> are not literals but variables with user input.</p>
<p>Classes model your application, and <em>contain</em> the data. Don't create separate models for the data.</p>
</div>
<span class="comment-copy">Why would you need to generate new classes? Just store the user-selected parameters in a dictionary.</span>
<span class="comment-copy">What have you tried? Is there a way you can tell the parent class what it's attributes should be for the child? (there is....)</span>
<span class="comment-copy">Since <code>coats</code> is a <code>Product</code> it should take <code>title, color, price</code> as arguments and pass those to <code>Product.__init__</code> in its <code>__init__</code> function.</span>
<span class="comment-copy">@NathanMcCoy I messed with <b>new</b> but didn't work. I'm pretty new in programming and trying to learn as much as I can with such projects but I feel like I'm way over my head on this one... :) Appreciate If you can point the way..</span>
<span class="comment-copy">Look into <code>super()</code>, seems like what you want to do</span>
<span class="comment-copy">Thanks for the answer mate, It took me a while to understand. I thought that the code creates a dictionary in products which I could then print it like <code>print(products['coat']['color']</code> but no, it loads the parameters into properties in class which i could then print with <code>print(products['coat'].properties['color']</code> I didn't even know this was possible... Thanks alot. When it comes to my original question I guess as Nathan McCoy suggested, super() is the way to go. Any chance you can explain how it can be done just for the information ?</span>
<span class="comment-copy">@Seferi: that comment assumed you were actually creating subclasses directly, not generating them. See <a href="//stackoverflow.com/q/576169">Understanding Python super() with __init__() methods</a> for a post on how <code>super()</code> can be used in <code>__init__</code> methods to have a base class handle some of the configuration.</span>
<span class="comment-copy">Actually that makes a lot of sense, thanks man</span>
