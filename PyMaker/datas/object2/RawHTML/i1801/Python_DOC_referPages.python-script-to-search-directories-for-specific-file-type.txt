<div class="post-text" itemprop="text">
<p>Hi guys in the script below I tried to first, list every file and directory in my home directory then check if there is any file with specific extension e.g(.py, .mkv).</p>
<p>It works well with files located in home directory but when I want it to check other directories to see if there is any file there or not, it cant work.</p>
<p>Here it is my code:</p>
<pre><code>import os

class Sorter(object):
    path = os.environ['HOME']
    all_dirs = list()
    all_items = list()
    address = None
    movies = list()


    def __init__(self):
        pass

    def list_directories(self):
        dirs = os.listdir(self.path)
        for d in dirs:
            if os.path.isdir(os.path.join(self.path,d)):
                self.all_dirs.append(d)

            elif os.path.isfile(os.path.join(self.path,d)):
                self.all_items.append(d)

    def find_movies(self):

        for item in self.all_items:
            if os.path.splitext(os.path.join(self.path,item))[1] in ['.mp3','.mkv']:
                self.movies.append(item)
        for directory in self.all_dirs:
            try:
                os.chdir(os.path.join(self.path,directory))
                for i in directory:
                    if os.path.splitext(os.path.join(self.path,item))[1] in ['.mp3','.mkv']:
                        self.movies.append(item)
                os.chdir(self.path)
            except:
                pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the standard library <code>pathlib</code> module and <code>glob</code> to search for files by file extension.</p>
<p>The glob dialect is less powerful than in bash, but you can use <code>**</code> for recursive subdirectory matching. You can't use bash-style brace expansion <code>*.{mp3,mkv}</code>. Instead you can chain the results from multiple glob searches.</p>
<pre><code>from pathlib import Path

def find_files(root, extensions):
    for ext in extensions:
        yield from Path(root).glob(f'**/*.{ext}')

for movie in find_files(Path.home() / 'Videos', ['mp4', 'mkv', 'avi']):
    print(movie)
</code></pre>
<p>Note that Path objects overload the <code>/</code> operator so <code>Path.home() / 'Videos'</code> will produce a path object representing <code>/home/username/Videos/</code></p>
</div>
<div class="post-text" itemprop="text">
<p>This seems overly complicated. See this aproach with <a href="https://docs.python.org/3/library/os.html#os.walk" rel="nofollow noreferrer">os.walk</a> and list-comprehensions to filter the files:</p>
<pre><code>import os
</code></pre>
<h2>Create files:</h2>
<pre><code>dirs = [r"./subdir",r"./subdir/tata",r"subdir/tarumpa",r"./dir2b"]
files = ["k.mp4","some.txt","cool.mp3"]

def touch(p,fn):
    with open(os.path.join(p,fn),"w") as f:
        f.write(" ")

for d in dirs:
    os.mkdir(d)
    for f in files:
        touch(d,f)
</code></pre>
<h2>Find files:</h2>
<pre><code>movie = []        
music = []        

# os.walk recurses into subdirectories, it returns a generator for each directory
# including the directory its in as root, all subdirs in dirs and all files in 
# files: then it steps into each of the dirs and does the same ...
for root,dirs,files in os.walk("./"):
    # root is the dir we are currently in, f the filename that ends on ...
    movie.extend( (os.path.join(root,f) for f in files if f.endswith(".mp4")) )
    music.extend( (os.path.join(root,f) for f in files if f.endswith(".mp3")) )

print(movie)
print(music)
</code></pre>
<h2>Output:</h2>
<pre><code># movies
['./subdir/k.mp4', './subdir/tarumpa/k.mp4', './subdir/tata/k.mp4', './dir2b/k.mp4']

# music
['./subdir/cool.mp3', './subdir/tarumpa/cool.mp3', 
 './subdir/tata/cool.mp3', './dir2b/cool.mp3']
</code></pre>
</div>
<span class="comment-copy">What do you mean by "it cant work"? Do you get an error message?</span>
<span class="comment-copy">Why do you use a class here? And why are <code>path</code>, <code>all_dirs</code> etc. defined as class attributes instead of instance attributes (in the <code>__init__</code> method)?</span>
<span class="comment-copy">@HÃ¥kenLid I used class cause I wanted to make this script a command-line app. I don't understand what you mean instance attributes, path and all_dirs are class attributes. so what is the problem with the code?</span>
