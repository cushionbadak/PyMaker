<div class="post-text" itemprop="text">
<p>let's say i have three list</p>
<pre><code>listA = ['a','b','c', 'd']
listP = ['p', 'q', 'r']
listX = ['x', 'z']
</code></pre>
<p>so the dataframe will have 4*3*2 = 24 rows. 
now, the simplest way to solve this problem is to do this:</p>
<pre><code>df = pd.DataFrame(columns=['A','P','X'])

for val1 in listA:
   for val2 in listP:
      for val3 in listX:
         df.loc[&lt;indexvalue&gt;] = [val1,val2,val3]
</code></pre>
<p>now in the real scenario I will have about 800k rows and 12 columns (so 12 nesting in the loops). is there any way i can create this dataframe much faster? </p>
</div>
<div class="post-text" itemprop="text">
<p>Similar discussion <a href="https://stackoverflow.com/questions/1208118/using-numpy-to-build-an-array-of-all-combinations-of-two-arrays">here</a>. Apparently <code>np.meshgrid</code> is more efficient for large data (as an alternative to <code>itertools.product</code>.</p>
<p>Application:</p>
<pre><code>v = np.stack(i.ravel() for i in np.meshgrid(listA, listP, listX)).T
df = pd.DataFrame(v, columns=['A', 'P', 'X'])
&gt;&gt;  A  P  X
0   a  p  x
1   a  p  z
2   b  p  x
3   b  p  z
4   c  p  x
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/itertools.html#itertools.product" rel="nofollow noreferrer">itertools.product</a>:</p>
<pre><code>import pandas as pd
from itertools import product

listA = ['a', 'b', 'c', 'd']
listP = ['p', 'q', 'r']
listX = ['x', 'z']

df = pd.DataFrame(data=list(product(listA, listP, listX)), columns=['A','P','X'])
print(df.head(10))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>   A  P  X
0  a  p  x
1  a  p  z
2  a  q  x
3  a  q  z
4  a  r  x
5  a  r  z
6  b  p  x
7  b  p  z
8  b  q  x
9  b  q  z
</code></pre>
</div>
<span class="comment-copy">related: <a href="https://stackoverflow.com/q/11144513/7207392">stackoverflow.com/q/11144513/7207392</a></span>
