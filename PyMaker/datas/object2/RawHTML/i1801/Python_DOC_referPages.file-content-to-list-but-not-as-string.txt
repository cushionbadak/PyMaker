<div class="post-text" itemprop="text">
<p>I'm trying to append a nested lists with dichionaries from a txt-file into a new list. 
Everything I do, the content always become a string in the new list.</p>
<p>Is it possible to read the data from the file as it is and append it to a list, as the nested list it is?</p>
<p>Here is my code: </p>
<pre><code>dataFile = "library.txt"

with open(dataFile) as myfile:
    data="".join(line.rstrip() for line in myfile)
    data2=data.replace(" ","")

    newLibraryList = []

    newLibraryList.append(data2)

print(newLibraryList)
</code></pre>
<p>The library.txt content looks like this. </p>
<pre><code>[
    {"name": "brick"}, 
    {"dim": "0.108"},
    {"lamdbaValue": "0.610"},
    {"zValue": "5.000"},
    {"fireValue": "A"}
],
[
    {"name": "brick"},
    {"dim": "0.108"},
    {"lamdbaValue": "0.800"},
    {"zValue": "5.400"},
    {"fireValue": "A"}
]
</code></pre>
<p>If someone could help me or point me in the right direction, I really appreciate it. </p>
<p>Thx in advance</p>
</div>
<div class="post-text" itemprop="text">
<p>Some parts of your file are similar to JSON - the problem is: in total is is <em><strong>invalid</strong></em> JSON.</p>
<p>This:</p>
<pre><code>[
    {"name": "brick"}, 
    {"dim": "0.108"},
    {"lamdbaValue": "0.610"},
    {"zValue": "5.000"},
    {"fireValue": "A"}
]
</code></pre>
<p>is valid JSON for a 1-element list containing 5 dictionarys with 1 key/value each.</p>
<p>The code below uses string splitting and magic to create "valid" parts from the demodata you posted and then uses <a href="https://docs.python.org/3/library/json.html#json.loads" rel="nofollow noreferrer">JSON.loads(string)</a> to create python objects from it. Its fragile - if you got any errors in your file it will output whats wrong and skip it.</p>
<p>It hinges on splits on <code>],</code> - if you ever add those inside your data parts it will break and you have to fix it.</p>
<p>Create demo file (one dataset is corrupt - missing } etc.):</p>
<pre><code>fn = "library.txt"

with open(fn,"w") as f:
    f.write("""[
    {"name": "brick"}, 
    {"dim": "0.108"},
    {"lamdbaValue": "0.610"},
    {"zValue": "5.000"},
    {"fireValue": "A"}
],
[
    {"name": "brick",
    {"dim": "0.108"},
    {"lamdbaValue": "0.800"},
    {"zValue": "5.400",
    {"fireValue": "A"}
],
[
    {"name": "brick"},
    {"dim": "0.108"},
    {"lamdbaValue": "0.800"},
    {"zValue": "5.400"},
    {"fireValue": "A"}
]""")
</code></pre>
<p>Parsing:</p>
<pre><code>import json

lib = []

with open(fn,"r") as r:
    text = r.read()
    spl = [t.rstrip("]").replace(" ","").replace("\n"," ")+"]" for t in text.split("],")]

    parts = []
    for p in spl:
        try:
            parts.append(json.loads(p))
        except  json.JSONDecodeError  as e:
            print("Skipping: ", p)
            print(e)

    # parts = [json.loads(p) for p in spl] # removed list comp for better 
    # exception text output/messages

    lib.extend(parts)

for l in lib:
    print(l) 
</code></pre>
<p>Output:</p>
<pre><code>Skipping:   [ {"name":"brick", {"dim":"0.108"}, {"lamdbaValue":"0.800"}, {"zValue":"5.400", {"fireValue":"A"} ]
Expecting property name enclosed in double quotes: line 1 column 21 (char 20)


[{'name': 'brick'}, {'dim': '0.108'}, {'lamdbaValue': '0.610'}, 
 {'zValue': '5.000'}, {'fireValue': 'A'}]

[{'name': 'brick'}, {'dim': '0.108'}, {'lamdbaValue': '0.800'}, 
 {'zValue': '5.400'}, {'fireValue': 'A'}]
</code></pre>
<hr/>
<p>It may be worthwile to convert your data to <em>valid</em> json wich would simplify a lot:</p>
<pre><code>fn = "library.txt"  # contains a list of dictionarys, each dict is one item

with open(fn,"w") as f:
    f.write("""[
    {"name": "brick", 
     "dim": "0.108",
     "lamdbaValue": "0.610",
     "zValue": "5.000",
     "fireValue": "A"}
,

    {"name": "brick",
     "dim": "0.108",
     "lamdbaValue": "0.800",
     "zValue": "5.400",
     "fireValue": "A"}
,   

    {"name": "brick",
     "dim": "0.108",
     "lamdbaValue": "0.800",
     "zValue": "5.400",
     "fireValue": "A"}
]""")

import json

lib = []

with open(fn,"r") as r:
    loaded_libs = json.load(r)

lib.extend(loaded_libs)

for l in lib:
    print(l) 
</code></pre>
<p>Output:</p>
<pre><code>{'name': 'brick', 'dim': '0.108', 'lamdbaValue': '0.610', 
 'zValue': '5.000', 'fireValue': 'A'}
{'name': 'brick', 'dim': '0.108', 'lamdbaValue': '0.800', 
 'zValue': '5.400', 'fireValue': 'A'}
{'name': 'brick', 'dim': '0.108', 'lamdbaValue': '0.800', 
 'zValue': '5.400', 'fireValue': 'A'}
</code></pre>
</div>
<span class="comment-copy">this is a bad format ... a two element tuple, containing one element lists each, containing multiple one-key dictionaries ... to get to a fireValue you would have to do <code>newLibraryList[0][0][4]["fireValue"]</code> .. you should really reconsider your data storage/data representation for your program</span>
<span class="comment-copy">how huge is this file?</span>
<span class="comment-copy">The file is under 1000 lines. I Think you are right about the data structure. I couldn’t think of another way, when I’m using a tree view to present the data. Sorry I’m still a noob :)</span>
<span class="comment-copy">It looks like the file is JSON, why not use <a href="https://docs.python.org/3.7/library/json.html#module-json" rel="nofollow noreferrer">json</a> to parse it? Either way, you should use a serializer/deserializer of some sort instead of rolling your own.</span>
