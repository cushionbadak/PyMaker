<div class="post-text" itemprop="text">
<p>I'm new to python and would really like to get some direction here.</p>
<p>I have two almost identical dictionaries - First_Dict and Second_Dict</p>
<pre><code>First_Dict = {"Texas": ["San Antonio", "Austin", "Houston", "Dallas"], 
         "California": ["San Diego", "Los Angeles", "San Francisco"],
        "Florida": ["Miami", "Orlando", "Jacksonville", "Naples"], 
         "Arizona": ["Phoenix", "Tucson"]}


Second_Dict = {"Texas": ["San Antonio, Austin, Houston"],
           "California": ["San Diego, Los Angeles, San Francisco"],
           "Florida": ["Miami", "Orlando", "Jacksonville"], "Illinois": 
          ["Chicago", "Naperville"]}
</code></pre>
<p>Goal: I need to compare them in the following flow:</p>
<pre><code>Compare keys
    if key match
        compare values
            if all values match
                break
            else:
                print the key and the corresponding missing value/s.
                    "Missing value/s on key "Florida" in the Second_Dict"
                        "Naples"

    if keys NOT match or missing
        print the unmatching/missing key and corresponding value/s.
            "Missing key and value/s on First_Dict"
                Illinois
                    Chicago
                    Naperville

            "Missing key and value/s on Second_Dict"
                Arizona
                    Phoenix
                    Tucson
</code></pre>
<p>My code isn't much so far :) Sorry, still learning. </p>
<pre><code>for key, value in First_Dict.items() and Second_Dict.items():
    if key in First_Dict.keys() == Second_Dict.keys():
       for value in First_Dict.value() and Second_Dict.value :
          if value in First_Dict.value() == Second_Dict.value():
              break
          else:
              print(value)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I imagine that you want to know differences not only for the first dictionary from second, but also vice versa. 
For me a good way is to separate the control in the following steps:</p>
<ol>
<li>Find common keys to both dictionary.</li>
<li>Using the common keys compute values differences in both dictionaries.</li>
<li>Indicate the missing keys with relative values.</li>
</ol>
<p>Possible code:</p>
<pre><code>#Step 1
#Determination of common keys 
first_keys = first_Dict.keys() #retrieve keys of the dictionary
second_keys = second_Dict.keys()
common_keys = [key for key in first_keys if key in second_keys]

#Step 2
#so now for common keys we look for differences in value and printing them
for common in common_keys:
  townsA = first_Dict[common]
  townsB = second_Dict[common]

  #with the first statement determine the cities that are in the second
  #dictionary but not in first one.
  #with the second the opposite 
  missingOnFirst = [town for town in townsB if town not in townsA]
  missingOnSecond = [town for town in townsA if town not in townsB]

  if missingOnFirst:
    print("Missing on {0} in first dictionary: \n\t{1}".format(common,"\n\t".join(missingOnFirst)))
  if missingOnSecond:
    print("Missing on {0} in second dictionary: \n\t{1}".format(common,"\n\t".join(missingOnSecond)))

#Step 3
#printing the missing keys:
#on First dictionary
print("\n")
print("Missing key and value/s on first dictionary")
for key in second_keys:
  if key not in common_keys:
    print("{0}:\n\t{1}".format(key,"\n\t".join(second_Dict[key])))
#on Second dictionary
print("Missing key and value/s on second dictionary")
for key in first_keys:
  if key not in common_keys:
    print("{0}:\n\t{1}".format(key,"\n\t".join(first_Dict[key])))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First declare two empty lists one for storing missing keys and second for missing values of that keys.  </p>
<pre><code>key_lst=[]
values_lst=[]
</code></pre>
<p>Try this code.  </p>
<pre><code>First_Dict = {"Texas": ["San Antonio", "Austin", "Houston", "Dallas"], 
     "California": ["San Diego", "Los Angeles", "San Francisco"],
    "Florida": ["Miami", "Orlando", "Jacksonville", "Naples"], 
     "Arizona": ["Phoenix", "Tucson"]}


Second_Dict = {"Texas": ["San Antonio", "Austin", "Houston","Dallas"],
       "California": ["San Diego", "Los Angeles", "San Francisco"],
       "Florida": ["Miami", "Orlando", "Jacksonville",], "Illinois": 
      ["Chicago", "Naperville"]}
key_lst=[]
values_lst=[]
for key, value in First_Dict.items() and Second_Dict.items():
    if key in First_Dict.keys() and Second_Dict.keys():
        if key in Second_Dict.keys() and First_Dict.keys() :
            continue
        else:
            key_lst.append(key)
    else:
        key_lst.append(key)
    if value in First_Dict.values() and Second_Dict.values():
        if value in Second_Dict.values() and First_Dict.values() :

            continue
        else:
            values_lst.append(value)
    else:
        values_lst.append(value)
for key, value in Second_Dict.items() and First_Dict.items():
    if key in First_Dict.keys() and Second_Dict.keys():
        if key in Second_Dict.keys() and First_Dict.keys() :
            continue
        else:
            key_lst.append(key)
    else:
        key_lst.append(key)
    if value in First_Dict.values() and Second_Dict.values():
        if value in Second_Dict.values() and First_Dict.values() :

            continue
        else:
            values_lst.append(value)
    else:
        values_lst.append(value)
print("Missing Keys: ",key_lst[0],": Missing Values",values_lst[0])
print("Missing Keys: ",key_lst[1],": Missing Values",values_lst[1])
</code></pre>
<p>Output is </p>
<pre><code>Missing Keys:  Illinois : Missing Values ['Chicago', 'Naperville']
Missing Keys:  Arizona : Missing Values ['Phoenix', 'Tucson']
</code></pre>
<p>Mark the answer if helpful.  </p>
</div>
<div class="post-text" itemprop="text">
<p>You could do something like this:</p>
<pre><code>First_Dict = {"Texas": ["San Antonio", "Austin", "Houston", "Dallas"],
              "California": ["San Diego", "Los Angeles", "San Francisco"],
              "Florida": ["Miami", "Orlando", "Jacksonville", "Naples"],
              "Arizona": ["Phoenix", "Tucson"]}

Second_Dict = {"Texas": ["San Antonio", "Austin", "Houston"],
               "California": ["San Diego", "Los Angeles", "San Francisco"],
               "Florida": ["Miami", "Orlando", "Jacksonville"], "Illinois":
                   ["Chicago", "Naperville"]}

for key, values in First_Dict.items():
    if key in Second_Dict:  # if key match
        diff = [value for value in values if value not in Second_Dict[key]]
        if not diff:  # all values match
            pass
        else:
            print("key: {}, missing values: {}".format(key, diff))
    else:
        print("key: {}, missing values: {}".format(key, values))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>key: Florida, missing values: ['Naples']
key: Texas, missing values: ['Dallas']
key: Arizona, missing values: ['Phoenix', 'Tucson']
</code></pre>
<p>The line <code>diff = [value for value in values if value not in Second_Dict[key]]</code> is a <a href="https://docs.python.org/3/tutorial/datastructures.html" rel="nofollow noreferrer">list comprehension</a> and computes the difference between the values in <code>First_Dict</code> and <code>Second_Dict</code> when the keys are match.</p>
<p><strong>UPDATE</strong></p>
<p>If you need both differences, you could do something like this:</p>
<pre><code>First_Dict = {"Texas": ["San Antonio", "Austin", "Houston", "Dallas"],
              "California": ["San Diego", "Los Angeles", "San Francisco"],
              "Florida": ["Miami", "Orlando", "Jacksonville", "Naples"],
              "Arizona": ["Phoenix", "Tucson"]}

Second_Dict = {"Texas": ["San Antonio", "Austin", "Houston"],
               "California": ["San Diego", "Los Angeles", "San Francisco"],
               "Florida": ["Miami", "Orlando", "Jacksonville"], "Illinois":
                   ["Chicago", "Naperville"]}

for key, values in First_Dict.items():
    if key in Second_Dict:  # if key match
        diff_first = [value for value in values if value not in Second_Dict[key]]
        diff_second = [value for value in Second_Dict[key] if value not in values]
        if not diff_first:  # all values match
            pass
        else:
            print("key: {}, missing values: {} in Second_Dict".format(key, diff_first))

        if not diff_second:
            pass
        else:
            print("key: {}, missing values: {} in First_Dict".format(key, diff_second))
    else:
        print("key: {}, missing values: {} in Second_Dict".format(key, values))

for key, values in Second_Dict.items():
    if key not in First_Dict:
        print("key: {}, missing values: {} in First_Dict".format(key, values))
</code></pre>
<p><strong>Output</strong></p>
<pre><code>key: Texas, missing values: ['Dallas'] in Second_Dict
key: Florida, missing values: ['Naples'] in Second_Dict
key: Arizona, missing values: ['Phoenix', 'Tucson'] in Second_Dict
key: Illinois, missing values: ['Chicago', 'Naperville'] in First_Dict
</code></pre>
<p>The second loop is for iterating over the keys in <code>Second_Dict</code> that are missing from <code>First_Dict</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>One option more using sets:</p>
<pre><code>mismatch = {}
missing_from_first = {}
missing_from_second = {}
for state in list(set([state for state in First_Dict] + [state for state in Second_Dict])):
  set1 = set(First_Dict.get(state, []))
  set2 = set(Second_Dict.get(state, []))
  mismatch[state] = list(set1.union(set2) - set1.intersection(set2))
  missing_from_first[state] = list(set2 - set1)
  missing_from_second[state] = list(set1 - set2)
</code></pre>
<p>So, printing out the results:</p>
<pre><code>print mismatch
print missing_from_first
print missing_from_second
#=&gt; {'Florida': ['Naples'], 'Arizona': ['Tucson', 'Phoenix'], 'California': [], 'Texas': ['Dallas'], 'Illinois': ['Naperville', 'Chicago']}
#=&gt; {'Florida': [], 'Arizona': [], 'California': [], 'Texas': [], 'Illinois': ['Naperville', 'Chicago']}
#=&gt; {'Florida': ['Naples'], 'Arizona': ['Tucson', 'Phoenix'], 'California': [], 'Texas': ['Dallas'], 'Illinois': []}
</code></pre>
<p>Iterate over the results to format the print as you will.</p>
</div>
<span class="comment-copy">I think this one is golde. I edited your code a bit as follows:    if missingOnMaster and missingOnStore:       print("11Missing on {0} in master firewall: \n\t{1}".format(common,"\n\t".join(missingOnMaster)))            print("22Missing on {0} in store firewall: \n\t{1}".format(common, "\n\t".join(missingOnStore)))   The original code stops at the first condition and does not print out anything missing on the second_dict. So instead, I put the conditions together and print whatever they find missing.   Thank you for your help! This helped me a lot.</span>
<span class="comment-copy">You're right, thanks for having found the mistake. Because I used <code>elif</code>, the differences in the second dictionary is looked only when there aren't differences in the first one. However, this happens only on some cases.  In theory, just changing the <code>elif</code> with <code>if</code> will resolve this conceptual error. As soon as I'll check my idea, I'll change the code I posted.  Ps. I'm glad it helped you.</span>
<span class="comment-copy">Regarding your changes, be careful. Logically speaking this condition will pass only when there are differences in the first dictionary in respect to the second one and contemporary if the second one have some too.  However, if we have in the first one this pair <code>("Con": [v1,v2])</code> and in the second this one <code>("Con": [v1,v2,v3])</code> running the code will result in <i>missingFirst = [v3]</i> that is evaluated <code>True</code> and <i>missingSecond = []</i> that's evaluated <code>False</code>.  This means that the program won't print the missings of the first pair. So be sure that you want this behavior in your program.</span>
<span class="comment-copy">oh, thank goodness. I revised it as you suggested and it's now exactly how I intended to work. Appreciate it!</span>
<span class="comment-copy">Thanks Daniel! Is there a way we could identify on the output what dictionary the key-value are missing from?</span>
<span class="comment-copy">@vmx1987 Updated the answer!</span>
