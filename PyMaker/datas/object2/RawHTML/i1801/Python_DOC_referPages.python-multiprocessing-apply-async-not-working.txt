<div class="post-text" itemprop="text">
<p>I am trying to parallelize a code with a ThreadPool. I am currently working on windows. Basically, the behavior that I am getting is that when I call apply_async nothing happens. My program just print START and END.</p>
<p>Below there is an example:</p>
<pre><code>import glob
import itertools
import pandas as pd
from multiprocessing.dummy import Pool as ThreadPool 


def ppp(window,day):
    print(window,day)


#%% Reading datasets
print('START')
tree = pd.read_csv('datan\\days.csv')
days = list(tree.columns)
windows = [2000]
processes_args = list(itertools.product(windows, days))


pool = ThreadPool(8) 
results = pool.apply_async(ppp, processes_args)
pool.close() 
pool.join() 
print('END')
</code></pre>
<p>There are many questions on stack that suggest calling other methods, like imap_unordered, map, apply. However, none of them solve the problem.</p>
<p>Edit:</p>
<pre><code>results.get()
</code></pre>
<p>returns an error about the number of parameters:</p>
<pre><code>TypeError: ppp() takes 2 positional arguments but 10 were given
</code></pre>
<p>However, the documentation states that I can use a list of tuples for passing parameters, otherwise how can I pass them?</p>
<p>Edit2:</p>
<p><code>processes_args</code> look likes the output below before calling apply_async:</p>
<pre><code>[(2000, '0808'),
 (2000, '0810'),
 (2000, '0812'),
 (2000, '0813'),
 (2000, '0814'),
 (2000, '0817'),
 (2000, '0818'),
 (2000, '0827'),
 (2000, '0828'),
 (2000, '0829')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Positional parameters in <code>Pool.apply</code> and <code>Pool.apply_async</code> are expanded using the <a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">* unpacking syntax</a>.</p>
<p>According to <code>processed_args</code> content, your <code>ppp</code> function would receive 10 tuples when scheduled via <code>apply_async</code>.</p>
<p>If you want to process an iterable, I'd recommend you to use <code>Pool.map</code> or <code>Pool.map_async</code>. The <code>map</code> functions do not expand the arguments within the iterable. You need to take care of it yourself.</p>
<pre><code>def ppp(element):
    window, day = element
    print(window, day)

pool.map(ppp, processed_args)
</code></pre>
<p>If you want to keep the <code>ppp</code> function as is, you can use <a href="https://docs.python.org/3.7/library/multiprocessing.html#multiprocessing.pool.Pool.starmap" rel="nofollow noreferrer"><code>Pool.starmap</code></a> which applies argument expansion on the iterator content.</p>
</div>
<span class="comment-copy">You want to inspect the <code>AsyncResult</code> outcome to get any error visible. Just call <code>results.get()</code>.</span>
<span class="comment-copy">I edited the question, thank you. @noxdafox</span>
<span class="comment-copy">Good point, I am nowadays mostly using <code>concurrent.futures</code> or <a href="https://pypi.org/project/Pebble/" rel="nofollow noreferrer"><code>pebble</code></a>. I forgot about <code>multiprocessing.Pool</code> methods. Will update the answer.</span>
