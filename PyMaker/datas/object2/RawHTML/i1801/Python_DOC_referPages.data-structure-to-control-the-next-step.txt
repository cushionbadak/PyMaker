<div class="post-text" itemprop="text">
<p>I am learning coroutine</p>
<pre><code>class Scheduler:
    def __init__(self):
        self.ready = Queue() # a queue of tasks that are ready to run.
        self.taskmap = {} #dictionary that keeps track of all active tasks (each task has a unique integer task ID)

    def new(self, target): #introduce a new task to the scheduler
        newtask = Task(target)
        self.taskmap[newtask.tid] = newtask
        self.schedule(newtask)
        return newtask.tid

    def schedule(self, task):
        self.ready.put(task)

    def mainloop(self):
        while self.taskmap: #does not remove element from taskmap
            task = self.ready.get() self.ready
            result = task.run()
            self.schedule(task)
</code></pre>
<p>When reading the <code>task = self.ready.get()</code> in schedule, I suddenly realize that the nature of data structure is about control, to control the next step, while the nature of algorithm is also about control, to control all the steps.</p>
<p>Does the understanding make sense?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>Queue</code> object defines control of what step is next, yes. It's FIFO, as described <a href="https://docs.python.org/3/library/asyncio-queue.html" rel="nofollow noreferrer">here.</a></p>
<p>Here, it looks like you're just trying to keep track of tasks, whether there are any remaining, which are executing, and so on. This is "controlling all the steps." Yes.</p>
<p>What's unclear is the purpose. The data structure and algorithm should be suited to your purpose. <code>asyncio</code> can help you implement parallelism and event-driven designs, for example. Sometimes the goal is to quickly and efficiently render data from a source into a data structure. What you're getting at is more meaningful (to me, at least) in the context of an end goal.</p>
</div>
<span class="comment-copy">Your question (or whatever you're trying to convey) is unclear.</span>
<span class="comment-copy">I deeply appreciate your guide. Could you (very shy) introduce a book you have read to learn algorithms and data structure.</span>
<span class="comment-copy">Nothing to be shy about. Data Structures and Algorithms in Python by Goodrich et al is my personal favorite Python textbook (no affiliation.)</span>
<span class="comment-copy">thank you. I am reading the book from last Saturday, lol. I am excited to know that data structure and algorithms are just of two sides of an identical object.</span>
<span class="comment-copy">I'm not sure what book from last Saturday you mean, but I'm excited for you and your new learning. Good luck</span>
<span class="comment-copy">ty, good luck too.</span>
