<div class="post-text" itemprop="text">
<p>The following is malformed (5 columns but 6 values) But pandas does not throw an exception.</p>
<pre><code>timestamp,col1,col2,col3,col4
1540998000,XY,40000764,G1-FDD:0,13.90,13.90
1540998000,XY,40000764,C1-FDD:0,-102.80,-102.80
1540998000,XY,40000764,C1-FDD:1,-102.80,-102.80
</code></pre>
<p>The following is how pandas reads it.</p>
<pre><code>&gt;&gt;&gt; import pandas
&gt;&gt;&gt; pandas.read_csv("some_20181031-150205.csv")
           timestamp  col1     col2           col3       col4
1540998000     XY  40000764  G1-FDD:0         13.9       13.9
1540998000     XY  40000764  C1-FDD:0       -102.8     -102.8
1540998000     XY  40000764  C1-FDD:1       -102.8     -102.8
</code></pre>
<p>Why is it not raising an exception?</p>
<p>The first column values are actual values and have not been altered. </p>
<p>Thanks,
Anoop</p>
</div>
<div class="post-text" itemprop="text">
<h3>Pandas assumes an index</h3>
<p>This is by design. The first "column" is treated as an <strong>index</strong> and therefore does not need to be named. To understand this, you must appreciate every dataframe <em>must</em> have an index, whether explicitly specified or not. For example, notice the values <code>0, 1, 2</code> along the left:</p>
<pre><code>import pandas as pd, numpy as np

df = pd.DataFrame(np.random.random((3, 5)))

print(df)

          0         1         2         3         4
0  0.244763  0.994879  0.085906  0.330168  0.269433
1  0.849739  0.631897  0.372024  0.413401  0.866026
2  0.183609  0.316389  0.213718  0.707552  0.033736
</code></pre>
<h3>Accessing the index</h3>
<p>You can access the index directly, which in this case is a <code>pd.RangeIndex</code>:</p>
<pre><code>print(df.index)
RangeIndex(start=0, stop=3, step=1)

print(df.index.values)
array([0, 1, 2], dtype=int64)
</code></pre>
<h3>Explicit test</h3>
<p>You can check explicitly whether your column labels align with your data:</p>
<pre><code>def check_csv(file_in):
    col_count = pd.read_csv(x, nrows=0, header=None).shape[1]                 # 5
    data_count = pd.read_csv(x, skiprows=[0], nrows=0, header=None).shape[1]  # 6
    return col_count == data_count

assert check_csv('file.csv'), 'Dataframe is malformed, check column labels versus data!'
</code></pre>
<p>The <a href="https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement" rel="nofollow noreferrer"><code>assert</code></a> statement will raise <code>AssertionError</code> when your CSV file is malformed.</p>
</div>
<span class="comment-copy">It assumes that the first column is the index. This behavior is by design.</span>
<span class="comment-copy">Ah. But it is wreaking havoc! There are other malformed csvs for which error is raised but this is escaping attention!</span>
<span class="comment-copy">@AnoopSaxena, Sure, I've updated with a check you can perform to discover when this happens.</span>
