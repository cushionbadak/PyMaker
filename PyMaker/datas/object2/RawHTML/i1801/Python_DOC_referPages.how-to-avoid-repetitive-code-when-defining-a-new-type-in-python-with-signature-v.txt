<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/8187082/how-can-you-set-class-attributes-from-variable-arguments-kwargs-in-python">How can you set class attributes from variable arguments (kwargs) in python</a>
<span class="question-originals-answer-count">
                    10 answers
                </span>
</li>
</ul>
</div>
<p>I wonder if there is a better solution to define a new type in python.</p>
<p>I am writing the init method of a new class in this way:</p>
<pre><code>class MyType (Base):

  def __init__(self, **kwargs):
    self.a1 = kwargs['a1']
    self.a2 = kwargs['a2']
    self.a3 = kwargs['a3']
</code></pre>
<p>but I would like to write a compact coding style like that:</p>
<pre><code>class MyType (Base):

   __fields__ = ['a1', 'a2', 'a3']
</code></pre>
<p>The following solution <code>vars(self).update(kwargs)</code> or <code>self.__dict__.update(**kwargs)</code> does not satisfied me, because the user can enter any dictionary with no error messages. I need to check that the user insert the following signature ('a1', 'a2', 'a3', 'a4', 'a5').
Moreover, the user should be able to use the object by passing the "positional parameters" or the "kay-value pairs parameters".</p>
<p>I implemented the following code which is able to spot KeyError when some parameter is missing. but when extra argument is added I do not get any error:</p>
<pre><code>class Structure:
    _fields = []
    def __init__(self, *args, **kwargs):
        print(self._fields, kwargs)
        for name in self._fields:
            setattr(self, name, kwargs[name])

class MyType (Structure):
    _fields = ['a1', 'a2', 'a3']

if __name__ == '__main__':
    m = MyType(**{'a1': 1}) # KeyError: 'a2'
    print(vars(m))      
    m = MyType(**{'a1': 1, 'a2': 3, 'a3': 4, 'a4': 5}) # no KeyError!!
    print(vars(m))
</code></pre>
<p>Thanks, 
Frederick</p>
</div>
<div class="post-text" itemprop="text">
<p>Have a look at python3.7 <a href="https://docs.python.org/3/library/dataclasses.html" rel="nofollow noreferrer">data classes</a>.</p>
<p>Quote from there:</p>
<pre><code>@dataclass
class InventoryItem:
    '''Class for keeping track of an item in inventory.'''
    name: str
    unit_price: float
    quantity_on_hand: int = 0
</code></pre>
<blockquote>
<p>Will add, among other things, a <code>__init__()</code> that looks like:</p>
</blockquote>
<pre><code>def __init__(self, name: str, unit_price: float, quantity_on_hand: int=0):
    self.name = name
    self.unit_price = unit_price
    self.quantity_on_hand = quantity_on_hand
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can just <code>update</code> the instance <code>dict</code> in <code>__init__</code>.</p>
<pre><code>&gt;&gt;&gt; class MyType:
...:    def __init__(self, **kwargs):
...:        vars(self).update(kwargs)
...:        
&gt;&gt;&gt; m = MyType(a1=1, a2=2, a3=3)
&gt;&gt;&gt; vars(m)
&gt;&gt;&gt; {'a1': 1, 'a2': 2, 'a3': 3}
&gt;&gt;&gt; m.a1, m.a2, m.a3
&gt;&gt;&gt; (1, 2, 3)
</code></pre>
</div>
<span class="comment-copy">just do <code>self.__dict__.update(**kwargs)</code>.</span>
<span class="comment-copy">Why don't you just store the <code>**kwargs</code> directly in an inner dictionary and access it that way when needed given that you obviously don't care about defining an interface?</span>
<span class="comment-copy">@Kasrâmvd, Sorry, but in my previous question, I have not been precise. I updated my question adding details about signature verification.</span>
<span class="comment-copy">@frederickpy you should use the Signature object. <a href="https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object" rel="nofollow noreferrer">docs.python.org/3/library/…</a></span>
<span class="comment-copy">@frederickpy does <a href="https://pastebin.com/cTygSeXB" rel="nofollow noreferrer">this</a> meet your requirements? (will error on trying to set an attribute name not in the slots)</span>
<span class="comment-copy">Your solution does not check the function's arguments.</span>
<span class="comment-copy">@antonjs that's correct. OP edited this requirement into the question 12 hours after I wrote this answer.</span>
