<div class="post-text" itemprop="text">
<p>I'm looking to define a function that accepts two parameters: an <code>int</code> and a <code>list</code>.</p>
<p>If the function finds the integer in the list it returns its <em>coordinates</em>.</p>
<p>For example how would I do that for the number 4 in the following list, <strong>without using numpy</strong>?</p>
<pre><code>l = [
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 2, 1, 1, 0, 1, 1, 1, 0],
         [0, 1, 0, 1, 0, 0, 0, 1, 0],
         [0, 1, 0, 1, 1, 1, 0, 1, 0],
         [0, 1, 0, 0, 0, 1, 0, 1, 0],
         [0, 1, 1, 1, 0, 1, 0, 1, 0],
         [0, 0, 0, 1, 0, 1, 0, 1, 0],
         [0, 1, 1, 1, 0, 1, 0, 1, 0],
         [0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 1, 0, 1, 1, 1, 0, 1, 0],
         [0, 1, 0, 1, 0, 1, 0, 1, 0],
         [0, 1, 1, 1, 0, 1, 1, 4, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
</code></pre>
<p>You can assume that the target will always show up only once and will always be contained in the list.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do something like this:</p>
<pre><code>l = [
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 2, 1, 1, 0, 1, 1, 1, 0],
         [0, 1, 0, 1, 0, 0, 0, 1, 0],
         [0, 1, 0, 1, 1, 1, 0, 1, 0],
         [0, 1, 0, 0, 0, 1, 0, 1, 0],
         [0, 1, 1, 1, 0, 1, 0, 1, 0],
         [0, 0, 0, 1, 0, 1, 0, 1, 0],
         [0, 1, 1, 1, 0, 1, 0, 1, 0],
         [0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 1, 0, 1, 1, 1, 0, 1, 0],
         [0, 1, 0, 1, 0, 1, 0, 1, 0],
         [0, 1, 1, 1, 0, 1, 1, 4, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]

def findElement(element, l):
    for i in range(len(l)):
        for j in range(len(l[i])):
            if element==l[i][j]:
                return (i,j)
    return None

print(findElement(4,l))
</code></pre>
<p>Output:</p>
<pre><code>(11, 7)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The target will always show up only once and will always be contained in the list</p>
</blockquote>
<p>You can use <code>enumerate</code> to enumerate the outer lists and the elements of the inner lists.</p>
<pre><code>def coords(lst, find):
    return next((i, j) for i, sub in enumerate(lst)
                       for j, x in enumerate(sub)
                       if x == find)
</code></pre>
<p>Demo with your list <code>l</code>:</p>
<pre><code>&gt;&gt;&gt; coords(l, 2)
&gt;&gt;&gt; (1, 1)
&gt;&gt;&gt; coords(l, 1)
&gt;&gt;&gt; (1, 2)
</code></pre>
<p>In case you later want to adapt the function to work properly if the target is not in the list, remember that <a href="https://docs.python.org/3/library/functions.html#next" rel="noreferrer"><code>next</code></a> takes an optional <code>default</code> argument.</p>
</div>
<div class="post-text" itemprop="text">
<p>I would used solution like this:</p>
<pre><code>#!/usr/bin/env ipython
# ---------------------
l = [
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 2, 1, 1, 0, 1, 1, 1, 0],
         [0, 1, 0, 1, 0, 0, 0, 1, 0],
         [0, 1, 0, 1, 1, 1, 0, 1, 0],
         [0, 1, 0, 0, 0, 1, 0, 1, 0],
         [0, 1, 1, 1, 0, 1, 0, 1, 0],
         [0, 0, 0, 1, 0, 1, 0, 1, 0],
         [0, 1, 1, 1, 0, 1, 0, 1, 0],
         [0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 1, 0, 1, 1, 1, 0, 1, 0],
         [0, 1, 0, 1, 0, 1, 0, 1, 0],
         [0, 1, 1, 1, 0, 1, 1, 4, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
# ----------------------------------
def search(value,listin):
    coords = [[ival,kkval] for ival,dd in enumerate(listin) for kkval,val in enumerate(dd) if val==value]
    return coords
# ----------------------------------
result = search(4,l)
print result
</code></pre>
<p>where I defined a function search, which can be used to search for certain value from an input list.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is my approach: </p>
<pre><code>def matrix_search(target, matrix):
    for row_index, row in enumerate(matrix):
        try:
            return (row_index, row.index(target))
        except ValueError:
            pass
    raise ValueError('Target {} not found'.format(target))
</code></pre>
<p>Sample usage:</p>
<pre><code>print(matrix_search(4, l))
</code></pre>
<p>Notes</p>
<ul>
<li>To search a simple list, use the <code>.index()</code> method</li>
<li>The <code>.index()</code> method will either return the index of the element if found or throw a <code>ValueError</code> if not found. In our context, we just ignore this exception and move on to the next row.</li>
<li>At the end of the loop, we will throw an exception because the element is not found</li>
</ul>
</div>
<span class="comment-copy">What if the target shows up more than once?  What behaviour should there be if it isn't in the list?</span>
<span class="comment-copy">The target will always show up only once and will always be contained in the list.</span>
<span class="comment-copy">Since I have only started to discover Python a couple of weeks ago, I find your code to be the prettiest because it is the least obscure of them all. Thank you!</span>
<span class="comment-copy">Please don't use <code>range(len...</code> when you can use <code>enumerate</code>. There are very little situations where <code>range(len...</code> is the pythonic way, and this is not such a situation. If you don't believe me, maybe you believe <a href="https://www.youtube.com/watch?v=EnSu9hHGq5o" rel="nofollow noreferrer">Ned</a>. :)</span>
<span class="comment-copy">@timgeb thank you for your remark, I was mostly thinking of providing a readable solution for Mister Tusk rather than a pythonic one. Good point. Thank you for the link as well :)</span>
