<div class="post-text" itemprop="text">
<p>I'm try to sort a list of objects based on some non-trivial comparison logic, but finding it difficult because in Python the custom sort function takes only 1 argument. In Java, for example, the sort function would have references to <code>object1</code> and <code>object2</code>, making it straightforward to compare them.</p>
<pre><code>class Point:
    def __init__(self, char, num, pt_type):
        self.char = char
        self.num = num
        self.pt_type = pt_type  # 'start' or 'end'

    def __str__(self):
        return str([self.char, str(self.num), self.pt_type])
    def __repr__(self):
        return str(self)

arr = [Point('C', 1, 'end'), Point('C', 9, 'start'),
       Point('B', 7, 'end'), Point('B', 2, 'end'),
       Point('A', 3, 'start'), Point('A', 6, 'start')]

def my_sort(key):
    # Sort by first element (letter). 
    #
    # If the letter is the same, fallback to sorting by the
    # 2nd element (number), but the logic of this comparison depends
    # on `pt_type`:
    #   -If Point1 and Point2 both have type 'start', pick the higher number first.
    #   -If Point1 and Point2 both have type 'end', pick the lower number first.
    #   -If Point1 and Point2 have different types, pick the 'start' type first.
    return key.char

print(sorted(arr, key=my_sort))
</code></pre>
<p>The expected sorted order should be:</p>
<pre><code>[Point('A', 6, 'start'), Point('A', 3, 'start')
 Point('B', 2, 'end'), Point('B', 7, 'end'),
 Point('C', 9, 'start'), Point('C', 1, 'end')]
</code></pre>
<p>I don't know how to even start implementing the required logic, so I would be grateful for a push in the right direction.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can make sorting a property of your class, then use <code>sorted</code>. The benefit of this method: for no additional effort, you are able to compare objects with each other via comparison operators such as <code>&gt;</code>, <code>&lt;</code>, <code>==</code>.</p>
<h3>Specify <code>__eq__</code> and <code>__lt__</code> methods</h3>
<p>At a minimum you should specify <code>__eq__</code> and <code>__lt__</code> methods:</p>
<pre><code>class Point:
    def __init__(self, char, num, pt_type):
        self.char = char
        self.num = num
        self.pt_type = pt_type  # 'start' or 'end'

    def __str__(self):
        return str([self.char, str(self.num), self.pt_type])

    def __repr__(self):
        return str(self)

    def __eq__(self, other):
        return self.char == other.char and self.pt_type == other.pt_type

    def __lt__(self, other):
        if self.char != other.char:
            return self.char &lt; other.char
        if (self.pt_type == 'start') and (other.pt_type == 'start'):
            return self.num &gt; other.num
        elif (self.pt_type == 'end') and (other.pt_type == 'end'):
            return self.num &lt; other.num
        else:
            return self.pt_type == 'start'
</code></pre>
<p>Adding other comparison methods such as <code>__gt__</code>, <code>__ge__</code>, etc, may be simplified via <a href="https://docs.python.org/3/library/functools.html#functools.total_ordering" rel="nofollow noreferrer"><code>functools.total_ordering</code></a>:</p>
<pre><code>from functools import total_ordering

@total_ordering
class Point:
    def __init__(self, ...):
        # initialization logic
    def __eq__(self, other):
        # as before
    def __lt__(self, other):
        # as before
</code></pre>
<h3>Example</h3>
<pre><code>arr = [Point('C', 1, 'end'), Point('C', 9, 'start'),
       Point('B', 7, 'end'), Point('B', 2, 'end'),
       Point('A', 3, 'start'), Point('A', 6, 'start')]

print(sorted(arr))

[['A', '6', 'start'],
 ['A', '3', 'start'],
 ['B', '2', 'end'],
 ['B', '7', 'end'],
 ['C', '9', 'start'],
 ['C', '1', 'end']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would use the following <code>key</code> function:</p>
<pre><code>class Point:
    def __init__(self, char, num, pt_type):
        self.char = char
        self.num = num
        self.pt_type = pt_type  # 'start' or 'end'

    def __str__(self):
        return str([self.char, str(self.num), self.pt_type])

    def __repr__(self):
        return str(self)


arr = [Point('C', 1, 'end'), Point('C', 9, 'start'),
       Point('B', 7, 'end'), Point('B', 2, 'end'),
       Point('A', 3, 'start'), Point('A', 6, 'start')]


def key(p):
    return p.char, int(p.pt_type != 'start'), p.num if p.pt_type == 'end' else -1 * p.num


result = sorted(arr, key=key)
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[['A', '6', 'start'], ['A', '3', 'start'], ['B', '2', 'end'], ['B', '7', 'end'], ['C', '9', 'start'], ['C', '1', 'end']]
</code></pre>
<p>The key function creates a tuple to be used as key, the first element is the letter, the second element is 0 if the node is of type 'start', 1 if is of type 'end'. The last element is negative if it is of type 'start', positive if it is of type 'end'.</p>
</div>
<div class="post-text" itemprop="text">
<p>You want to use the <code>cmp</code> argument to <code>sorted</code> which takes a comparison function of 2 arguments:
<a href="https://docs.python.org/2/library/functions.html#sorted" rel="nofollow noreferrer">https://docs.python.org/2/library/functions.html#sorted</a></p>
<p>For your reference, the <code>key</code> function would compute a derived value from each item being sorted and sort according to that value, e.g. to sort a list of pairs by the second value in the pair you could do: <code>sorted(items, key=lambda x: x[1])</code></p>
</div>
<span class="comment-copy">Is the sort order correct? Shouldn't Point('C', 9, 'start') be the first? As far as I understood all 'start' nodes must come first, and the tie break is the highest</span>
<span class="comment-copy">@DanielMesejo The sort is primarily by the <i>letter</i>, if the letters of 2 items are the same then we fall back to the secondary criteria which is that block of logic that depends on <code>pt_type</code>. So 'C' would come after any 'A' or 'B' items no matter what.</span>
<span class="comment-copy">This seems to be the correct and right way to solve the problem in python3 . Maybe I would also mention <a href="https://docs.python.org/3/library/functools.html#functools.total_ordering" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> , which maybe is needed. Thanks</span>
<span class="comment-copy">@DBedrenko, Excellent point, have added the trivial example as in the docs.</span>
<span class="comment-copy">@coldspeed I see, but I believe the second numbe should be negative only when if of type start, right?</span>
<span class="comment-copy">Ah, sorry, didn't notice that was the requirement.</span>
<span class="comment-copy">@jpp Updated the answer!</span>
<span class="comment-copy">@DanielMesejo, Looks good now! +1</span>
<span class="comment-copy">Thanks for your idea. This seems like a hack, and seems to make the situation more complicated than it already is, but I see that <code>cmp()</code> is deprecated in Python3 so I don't know what to think anymore...</span>
<span class="comment-copy">Ah didn't know there was <code>cmp(obj1, obj2)</code>, now I know how I would implement the logic, thank you.</span>
<span class="comment-copy">FYI <code>cmp()</code> is deprecated in python3</span>
