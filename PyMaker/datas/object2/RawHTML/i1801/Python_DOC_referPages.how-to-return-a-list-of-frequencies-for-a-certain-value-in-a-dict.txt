<div class="post-text" itemprop="text">
<p>So I have a dict, which contains keys corresponding to a list, which contains str. I want to collect all the same values in said list and sum them together. Perhaps my explanation was confusing so I'll provide an example:</p>
<pre><code>function_name({'key1':['apple', 'orange'], 'key2':['orange', 'pear'})
&gt;&gt;&gt; {'apple':1, 'orange':2, 'pear':1}
</code></pre>
<p>How would I create this function? I was thinking of somehow making a for loop like this:</p>
<pre><code>count = 0
for fruit in dict_name:
    if food == 'apple'
        count = count + fruit
</code></pre>
<p>I am still unsure about how to format this especially how to count the values and collect them, thanks in advance for any suggestions!</p>
</div>
<div class="post-text" itemprop="text">
<p>You can un-nest the dict's values and apply a <a href="https://docs.python.org/3.7/library/collections.html#collections.Counter" rel="nofollow noreferrer"><code>Counter</code></a>.</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; 
&gt;&gt;&gt; d = {'key1':['apple', 'orange'], 'key2':['orange', 'pear']}
&gt;&gt;&gt; Counter(v for sub in d.values() for v in sub)
Counter({'apple': 1, 'orange': 2, 'pear': 1})
</code></pre>
<p>If you don't like the nested generator comprehension, the un-nesting can be done with <a href="https://docs.python.org/3.7/library/itertools.html#itertools.chain.from_iterable" rel="nofollow noreferrer"><code>itertools.chain.from_iterable</code></a>.</p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; Counter(chain.from_iterable(d.values()))
Counter({'apple': 1, 'orange': 2, 'pear': 1})
</code></pre>
<p>Without imports and with traditional loops, it would look like this:</p>
<pre><code>&gt;&gt;&gt; result = {}
&gt;&gt;&gt; for sub in d.values():
...:    for v in sub:
...:        result[v] = result.get(v, 0) + 1
...:        
&gt;&gt;&gt; result
{'apple': 1, 'orange': 2, 'pear': 1}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Something like this should do the trick:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; counts = Counter([item for sublist in your_dict.values() for item in sublist])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you don't want to import any libraries you can do as follows:</p>
<pre><code>function_name = {'key1':['apple', 'orange'], 'key2':['orange', 'pear']}
foobar = {}
for key, value in function_name.items():
    for element in value:
        if element in foobar:
            foobar[element] += 1
        else:
            foobar[element] = 1
print(foobar)
</code></pre>
<p>You check if the value is already in the created dict 'foobar'. If it is you add its value by one. If its not, then you add the value as a key and define its value as one. :)</p>
</div>
<span class="comment-copy">is it proper form to have more than 1 for loop?</span>
<span class="comment-copy">@EmmaPascoe sure</span>
<span class="comment-copy">thank you so much it has worked! Could I ask what the (v, 0) portion represents?</span>
<span class="comment-copy">@EmmaPascoe <code>result.get(v, 0)</code> is saying: give me <code>result[v]</code> or <code>0</code> if <code>v</code> is not in <code>result</code>.</span>
<span class="comment-copy">@EmmaPascoe yes, you can find an explanation <a href="https://stackoverflow.com/questions/11041405/why-dict-getkey-instead-of-dictkey">here</a>.</span>
<span class="comment-copy">Instead of <code>if element in foobar:</code> I suggest you consider using the dictionary's  <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>setdefault()</code></a> method which wouldn't require a library <code>import</code> and would allow the the code inside of the inner <code>for</code> loop to be reduced to one unconditional statement.</span>
<span class="comment-copy">Yeah, I agree! I just wanted to make it as easy to understand for people who are new to dictionaries. And felt the way I did it was the way OP wanted to do :)</span>
<span class="comment-copy">@martineau how would you use <code>setdefault</code> here? Isn't it more of a use case for <code>get</code>?</span>
<span class="comment-copy">@timgeb: <code>get()</code> could also be used. I was thinking of <code>foobar[element] = foobar.setdefault(element, 0) + 1</code>â€”although admittedly <code>foobar[element] = foobar.get(element, 0) + 1</code> would be slightly more concise.</span>
<span class="comment-copy">@martineau Yeah, from my experience <code>setdefault</code> is most useful when the dict should have mutable values, e.g. <code>d.setdefault(k, []).append(1)</code> (without an assignment).</span>
