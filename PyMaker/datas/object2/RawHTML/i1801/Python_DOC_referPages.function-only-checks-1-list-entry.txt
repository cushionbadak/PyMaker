<div class="post-text" itemprop="text">
<pre><code>def filter_list(elements):
    data = [elements]
    for a in elements:
        if a == (int(a) or float(a)) and a &gt;= 1 and a &lt; 50:
            return "true"
        else:
            return "false"

filter_list([1, 2, 3])
filter_list([0, 2, 3])
filter_list([1, 50, 3])
</code></pre>
<p>This function searches if int or floats between 1 and 50 are in the list. But it only searches the first list entry. How can i expand the search on the whole list? Also if i write 1.1 in the list, the result will be False.</p>
<pre><code>filter_list([1, 2, 3]) = True
filter_list([0, 2, 3]) = False
filter_list([1, 50, 3]) = True (which should be False)
filter_list([1.1, 2, 3]) = False (which should be True)
</code></pre>
<p>Edited:</p>
<pre><code>def filter_list(elements):
    data = [elements]
    for a in elements:
        if a == int(a) and a &gt;= 1 and a &lt; 50:
            filter = []
            filter.append(a)
    return filter
filter_list([2, 1, 4, 5, 6])
</code></pre>
<p>This results in [6], which i dont want to.</p>
</div>
<div class="post-text" itemprop="text">
<p>You return <code>"false"</code> too early, as you always return from the first iteration. Also, your type check <a href="https://stackoverflow.com/questions/15112125/how-to-test-multiple-variables-against-a-value">is not a type check at all</a> and will raise errors for most arbitrary inputs. Use <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="nofollow noreferrer"><code>isinstance</code></a> instead. Moreover, Python allows <a href="https://docs.python.org/3/reference/expressions.html#comparisons" rel="nofollow noreferrer">chained comparisons</a>. You can do e.g.</p>
<pre><code>def filter_list(elements):
    for a in elements:
        if isinstance(a, (int, float)) and 1 &lt;= a &lt; 50:
            return True  # probably, you want to return a bool value
    # only now that you have checked all elements, you can know for sure
    return False  
</code></pre>
<p>Or shorter, using <a href="https://docs.python.org/3/library/functions.html#any" rel="nofollow noreferrer"><code>any</code></a>:</p>
<pre><code>def filter_list(elements):
    return any(isinstance(a, (int, float)) and 1 &lt;= a &lt; 50 for a in elements)
</code></pre>
<p>For compiling a new list of matching values, do:</p>
<pre><code>def filter_list(elements):
    # instantiate the new list before the loop
    fil = []  # do not shadow the built-in filter function
    for a in elements:
        if isinstance(a, int) and 1 &lt;= a &lt; 50:
            fil.append(a)
    return fil
</code></pre>
<p>Or shorter, using a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a>:</p>
<pre><code>def filter_list(elements):
    return [a for a in elements if isinstance(a, int) and 1 &lt;= a &lt; 50]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because of the name of your function, I will suggest another approach: using <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">reduce</a>.</p>
<p>Basically, you have to implement a function, returning boolean on one single item. Afterwards, use <code>reduce</code> to apply this function to each element of your list.</p>
<pre><code>f = lambda x : 1.0 &lt;= x &lt; 50

# Is equivalent to
def f(item):
  return 1.0 &lt;= item &lt; 50
</code></pre>
<p>Then apply to your list:</p>
<pre><code>print filter(f, [0,1,2])
[1, 2]
</code></pre>
<p>Applied to your problem, you should ensure that the size of the filtered list is the same than the original list (or modify the oracle function to do the opposite, and ensure the result is empty).</p>
<pre><code>def check(lst):
      return len(lst) == len(filter(f, lst))

print check([0,1,2])
# Outputs False
print check([1,2,3])
# Outputs True
</code></pre>
<p>Also, <code>"True"</code> and <code>"False"</code> are typed string, whereas you want them to be booleans. Hence <code>True</code> or <code>False</code>.</p>
</div>
<span class="comment-copy">During the first iteration of the loop, you will <b>always</b> return from the function: without iterating over the rest of the list. Can you see why?</span>
<span class="comment-copy">You return from the loop after checking the very first element, what else could happen?</span>
<span class="comment-copy">For the mysterious part: <code>int(1.1) or float(1.1)</code> results in <code>1</code>, which is not equal to <code>1.1</code>. So it is not a check for "a is an int or float number?" if that is the intent.</span>
<span class="comment-copy">So instead of returning, im now creating a empty list called filter. I append a to it. Now only the last digit from the list data is appended to it. Thats not what i want. I will edit the question.</span>
<span class="comment-copy">Should be <code>return True</code> or <code>return False</code> -- NOT <code>return "false"</code> which in Python would be <code>True</code></span>
