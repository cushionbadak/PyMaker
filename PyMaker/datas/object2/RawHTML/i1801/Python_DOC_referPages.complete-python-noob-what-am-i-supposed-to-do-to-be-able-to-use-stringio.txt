<div class="post-text" itemprop="text">
<p>I am using Python 3.2.1 and I can't import the <code>StringIO</code> module. I use 
<code>io.StringIO</code> and it works, but I can't use it with <code>numpy</code>'s <code>genfromtxt</code> like this:</p>
<pre><code>x="1 3\n 4.5 8"        
numpy.genfromtxt(io.StringIO(x))
</code></pre>
<p>I get the following error:</p>
<pre><code>TypeError: Can't convert 'bytes' object to str implicitly  
</code></pre>
<p>and when I write <code>import StringIO</code> it says</p>
<pre><code>ImportError: No module named 'StringIO'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>when i write import StringIO it says there is no such module.</p>
</blockquote>
<p>From <a href="http://docs.python.org/3.0/whatsnew/3.0.html" rel="noreferrer">Whatâ€™s New In Python 3.0</a>:</p>
<blockquote>
<p>The <code>StringIO</code> and <code>cStringIO</code> modules are gone. Instead, import the <code>io</code>
  module and use <code>io.StringIO</code> or <code>io.BytesIO</code> for text and data
  respectively.</p>
</blockquote>
<p>.</p>
<hr/>
<p>A possibly useful method of fixing some Python 2 code to also work in Python 3 (caveat emptor):</p>
<pre><code>try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO
</code></pre>
<blockquote>
<p><em>Note: This example may be tangential to the main issue of the question and is included only as something to consider when generically addressing the missing <code>StringIO</code> module.</em>  For a more direct solution the the message <code>TypeError: Can't convert 'bytes' object to str implicitly</code>, see <a href="https://stackoverflow.com/a/11970414/86967">this answer</a>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In my case I have used:</p>
<pre><code>from io import StringIO
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>On Python 3 <code>numpy.genfromtxt</code> expects a bytes stream. Use the following:</p>
<pre><code>numpy.genfromtxt(io.BytesIO(x.encode()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Thank you OP for your question, and Roman for your answer. I had to search a bit to find this; I hope the following helps others.</p>
<p><strong>Python 2.7</strong></p>
<p>See: <a href="https://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html" rel="noreferrer">https://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html</a></p>
<pre><code>import numpy as np
from StringIO import StringIO

data = "1, abc , 2\n 3, xxx, 4"

print type(data)
"""
&lt;type 'str'&gt;
"""

print '\n', np.genfromtxt(StringIO(data), delimiter=",", dtype="|S3", autostrip=True)
"""
[['1' 'abc' '2']
 ['3' 'xxx' '4']]
"""

print '\n', type(data)
"""
&lt;type 'str'&gt;
"""

print '\n', np.genfromtxt(StringIO(data), delimiter=",", autostrip=True)
"""
[[  1.  nan   2.]
 [  3.  nan   4.]]
"""
</code></pre>
<p><strong>Python 3.5:</strong></p>
<pre><code>import numpy as np
from io import StringIO
import io

data = "1, abc , 2\n 3, xxx, 4"
#print(data)
"""
1, abc , 2
 3, xxx, 4
"""

#print(type(data))
"""
&lt;class 'str'&gt;
"""

#np.genfromtxt(StringIO(data), delimiter=",", autostrip=True)
# TypeError: Can't convert 'bytes' object to str implicitly

print('\n')
print(np.genfromtxt(io.BytesIO(data.encode()), delimiter=",", dtype="|S3", autostrip=True))
"""
[[b'1' b'abc' b'2']
 [b'3' b'xxx' b'4']]
"""

print('\n')
print(np.genfromtxt(io.BytesIO(data.encode()), delimiter=",", autostrip=True))
"""
[[  1.  nan   2.]
 [  3.  nan   4.]]
"""
</code></pre>
<p><strong>Aside:</strong></p>
<p>dtype="|Sx", where x = any of { 1, 2, 3, ...}:</p>
<p><a href="https://stackoverflow.com/questions/14790130/dtypes-difference-between-s1-and-s2-in-python">dtypes. Difference between S1 and S2 in Python</a></p>
<p>"The |S1 and |S2 strings are data type descriptors; the first means the array holds strings of length 1, the second of length 2. ..."</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <a href="https://pythonhosted.org/six/#six.StringIO" rel="noreferrer">StringIO</a> from the <a href="https://pythonhosted.org/six/" rel="noreferrer">six</a> module:</p>
<pre><code>import six
import numpy

x = "1 3\n 4.5 8"
numpy.genfromtxt(six.StringIO(x))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In order to make examples from <a href="https://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html" rel="noreferrer">here</a>
work with Python 3.5.2, you can rewrite as follows :</p>
<pre><code>import io
data =io.BytesIO(b"1, 2, 3\n4, 5, 6") 
import numpy
numpy.genfromtxt(data, delimiter=",")
</code></pre>
<p>The reason for the change may be that the content of a file is in data (bytes) which do not make text until being decoded somehow. <code>genfrombytes</code> may be a better name than <code>genfromtxt</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Roman Shapovalov's code should work in Python 3.x as well as Python 2.6/2.7. Here it is again with the complete example:</p>
<pre class="lang-py prettyprint-override"><code>import io
import numpy
x = "1 3\n 4.5 8"
numpy.genfromtxt(io.BytesIO(x.encode()))
</code></pre>
<p>Output:</p>
<pre class="lang-none prettyprint-override"><code>array([[ 1. ,  3. ],
       [ 4.5,  8. ]])
</code></pre>
<p>Explanation for Python 3.x:</p>
<ul>
<li><code>numpy.genfromtxt</code> takes a byte stream (a file-like object interpreted as bytes instead of Unicode).</li>
<li><code>io.BytesIO</code> takes a byte string and returns a byte stream. <code>io.StringIO</code>, on the other hand, would take a Unicode string and and return a Unicode stream.</li>
<li><code>x</code> gets assigned a string literal, which in Python 3.x is a Unicode string.</li>
<li><code>encode()</code> takes the Unicode string <code>x</code> and makes a byte string out of it, thus giving <code>io.BytesIO</code> a valid argument.</li>
</ul>
<p>The only difference for Python 2.6/2.7 is that <code>x</code> is a byte string (assuming <code>from __future__ import unicode_literals</code> is not used), and then <code>encode()</code> takes the byte string <code>x</code> and still makes the same byte string out of it. So the result is the same.</p>
<hr/>
<p>Since this is one of SO's most popular questions regarding <code>StringIO</code>, here's some more explanation on the import statements and different Python versions.</p>
<p>Here are the classes which take a string and return a stream:</p>
<ul>
<li><a href="https://docs.python.org/3/library/io.html#binary-i-o" rel="noreferrer"><code>io.BytesIO</code></a> (Python 2.6, 2.7, and 3.x) - Takes a byte string. Returns a byte stream.</li>
<li><a href="https://docs.python.org/3/library/io.html#text-i-o" rel="noreferrer"><code>io.StringIO</code></a> (Python 2.6, 2.7, and 3.x) - Takes a Unicode string. Returns a Unicode stream.</li>
<li><a href="https://docs.python.org/2/library/stringio.html#" rel="noreferrer"><code>StringIO.StringIO</code></a> (Python 2.x) - Takes a byte string or Unicode string. If byte string, returns a byte stream. If Unicode string, returns a Unicode stream.</li>
<li><a href="https://docs.python.org/2/library/stringio.html#module-cStringIO" rel="noreferrer"><code>cStringIO.StringIO</code></a> (Python 2.x) - Faster version of <code>StringIO.StringIO</code>, but can't take Unicode strings which contain non-ASCII characters.</li>
</ul>
<p>Note that <code>StringIO.StringIO</code> is imported as <code>from StringIO import StringIO</code>, then used as <code>StringIO(...)</code>. Either that, or you do <code>import StringIO</code> and then use <code>StringIO.StringIO(...)</code>. The module name and class name just happen to be the same. It's similar to <code>datetime</code> that way.</p>
<p>What to use, depending on your supported Python versions:</p>
<ul>
<li><p><em>If you only support Python 3.x:</em> Just use <code>io.BytesIO</code> or <code>io.StringIO</code> depending on what kind of data you're working with.</p></li>
<li><p><em>If you support both Python 2.6/2.7 and 3.x, or are trying to transition your code from 2.6/2.7 to 3.x:</em> The easiest option is still to use <code>io.BytesIO</code> or <code>io.StringIO</code>. Although <code>StringIO.StringIO</code> is flexible and thus seems preferred for 2.6/2.7, that flexibility could mask bugs that will manifest in 3.x. For example, I had some code which used <code>StringIO.StringIO</code> or <code>io.StringIO</code> depending on Python version, but I was actually passing a byte string, so when I got around to testing it in Python 3.x it failed and had to be fixed.</p>
<p>Another advantage of using <code>io.StringIO</code> is the support for universal newlines. If you pass the keyword argument <code>newline=''</code> into <code>io.StringIO</code>, it will be able to split lines on any of <code>\n</code>, <code>\r\n</code>, or <code>\r</code>. I found that <code>StringIO.StringIO</code> would trip up on <code>\r</code> in particular.</p>
<p>Note that if you import <code>BytesIO</code> or <code>StringIO</code> from <a href="https://pythonhosted.org/six/" rel="noreferrer"><code>six</code></a>, you get <code>StringIO.StringIO</code> in Python 2.x and the appropriate class from <code>io</code> in Python 3.x. If you agree with my previous paragraphs' assessment, this is actually one case where you should avoid <code>six</code> and just import from <code>io</code> instead.</p></li>
<li><p><em>If you support Python 2.5 or lower and 3.x:</em> You'll need <code>StringIO.StringIO</code> for 2.5 or lower, so you might as well use <code>six</code>. But realize that it's generally very difficult to support both 2.5 and 3.x, so you should consider bumping your lowest supported version to 2.6 if at all possible.</p></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>try this</p>
<p>from StringIO import StringIO</p>
<p>x="1 3\n 4.5 8"  </p>
<p>numpy.genfromtxt(StringIO(x))</p>
</div>
<span class="comment-copy">Worth mentioning these are not the same, so you can end up with <code>TypeError</code>s ( string argument expected, got 'bytes') if you make this change in isolation. You need to carefully distinguish btyes and str (unicode) in python 3.</span>
<span class="comment-copy">For newbs like me: from io import StringIO means you call it as StringIO(), not io.StringIO().</span>
<span class="comment-copy">How to actually be compatible with Python 2 and 3: just <code>from io import StringIO</code></span>
<span class="comment-copy">THIS IS SIMPLY WRONG for numpy.genfromtxt() in python 3. Please refer to the answer from Roman Shapovalov.</span>
<span class="comment-copy">@realtemper: Do you mean that the first part of the answer is wrong (it's a quote from the docs), or that the example doesn't apply to the question.</span>
