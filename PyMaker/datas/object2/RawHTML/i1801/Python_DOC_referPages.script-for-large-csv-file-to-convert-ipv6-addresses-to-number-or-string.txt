<div class="post-text" itemprop="text">
<p>So I have a big csv file, over 1gb.  There's a column with IP addresses in ipv4 and ipv6.  I want to convert the ipv6 addresses into numbers, but there are too many rows for libre calc.  So I'm wondering if it's possible to use python in the terminal to convert all the ipv6 addresses.  </p>
<p>Also, I could split the file up into smaller pieces, then use libre calc, but same problem--I wouldn't know how to script that either.</p>
<p>EDIT:</p>
<p>I don't mind, it might get more complicated though. Also not sure how this should be formatted, but I hope people get the idea...So I have one table with IPv6 addresses like these examples:  </p>
<pre><code>2001:db8::cafe:1111
2001:db8:0:a:1:2:3:4
2001:db8:aaaa::c
2001:db8:0:0:1::4
</code></pre>
<p>There are a bunch of different rules that govern the formatting--way too hard for me.  I've heard that python has a function that will specifically return the conversion, but not sure about the rest (how to get the returned values back into the csv correctly, with formatting unbroken, etc.).  Anyway, here's a row from the other table:</p>
<pre><code>"58569107296622255421594597096899477504","58569107375850417935858934690443427839","NG","Nigeria","Abuja Federal Capital Territory","Abuja","9.057350","7.489760"
</code></pre>
<p>So the part I need to match is the first two numbers (first two columns), where there are several ranges from</p>
<pre><code>"0","340282366920938463463374607431768211455"
</code></pre>
<p>So I wanted to take the IPv6 addresses, convert them to IP numbers, then sort them into their respective ranges.</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes, this is something you can do in Python. I'll demonstrate with a few short snippets and links to documentation that will fall short of a full solution in favor of empowering you with the resources that you need to put the pieces together yourself.</p>
<p>First off, if you want to load one CSV file line-by-line and write to a second one this is how you would do it:</p>
<pre><code>&gt;&gt;&gt; import csv
&gt;&gt;&gt; with open('eggs.csv', newline='') as in and open('omellette.csv', 'w') as out:
...     r = csv.reader(in)
...     w = csv.writer(out)
...     for row in r:
...         print(', '.join(row)) # print unmodified
...         row[0] = ipToNum(row[0])
...         row[1] = ipToNum(row[1])
...         print(', '.join(row)) # print modified
...         w.writerow(row)
Spam, Spam, Spam, Spam, Spam, Baked Beans
Spam, Lovely Spam, Wonderful Spam
</code></pre>
<p>The original on which this example was based and additional information about python's built-in CSV capabilities can be found here: </p>
<ul>
<li><a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html</a> </li>
</ul>
<p>You will probably need to make adjustments depending on the exact formatting of your particular CSV file. Now, to convert IP addresses to numbers you can do something like the following:</p>
<pre><code>import socket, struct

def ipToNum(ip):
    "convert ipv4/6 string to long integer"
    return struct.unpack('&gt;L',socket.inet_pton(ip))[0]

def numToDottedip(n):
    "convert long int to ipv4/6"
    return socket.inet_ntop(struct.pack('&gt;L',n))
</code></pre>
<p>This example is adapted from what I found here:</p>
<ul>
<li><a href="https://www.oreilly.com/library/view/python-cookbook/0596001673/ch10s06.html" rel="nofollow noreferrer">https://www.oreilly.com/library/view/python-cookbook/0596001673/ch10s06.html</a></li>
</ul>
<p>You will have to modify it </p>
<p>Also, if you want to learn more about the socket and struct modules here is the documentation:</p>
<ul>
<li><a href="https://docs.python.org/3/library/socket.html" rel="nofollow noreferrer">https://docs.python.org/3/library/socket.html</a></li>
<li><a href="https://docs.python.org/3/library/struct.html" rel="nofollow noreferrer">https://docs.python.org/3/library/struct.html</a></li>
</ul>
<p>You shouldn't need to split the file up since the CSV <code>reader</code> object will only return one line at a time rather than reading in the whole file at once. Of course, you also probably want to actually do something with those numbers once you've read them in but since you didn't specify I'll figuring that out to you.</p>
<p>Also note that I haven't tried any of this code. It's worth repeating here in the form of a metaphor: I'm trying to teach you to fish rather than just giving you fish. It's in your best interest to take this advice and wrestle with getting it to work yourself as that would be your first step toward actually being a programmer.</p>
</div>
<span class="comment-copy">Thank you so much.  Just to make sure...it will be possible to automate the entire thing?  i.e. get it back in csv format with the entire column replaced, or with a new column plus the new values appended to the table?</span>
<span class="comment-copy">Yes, that should be possible; I would recommend generating a new CSV file with the values transformed in the way that you want (as opposed to overwriting the existing file). I'll update this answer to point to the docs that explain how to write to a CSV file.</span>
