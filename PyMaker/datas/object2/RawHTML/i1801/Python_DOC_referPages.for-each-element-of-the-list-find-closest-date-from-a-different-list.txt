<div class="post-text" itemprop="text">
<p>I have 2 lists: </p>
<pre><code>l1 = [ '09/12/2017', '10/24/2017' ]
l2 = [ '09/15/2017', '10/26/2017', '12/22/2017' ]
</code></pre>
<p>For every ticker in l1 I want to find the closest element from l2 after it, so the output should be</p>
<pre><code>l3 = [ '09/15/2017', '10/26/2017' ]
</code></pre>
<p>The right way seems to be to explicitely iterate in parallel over both lists in reverse order, but I was hoping for a more "pythonic" solution..</p>
<p>EDIT: I do want an optimal complexity solution, which (assuming the lists are sorted), I think is O(max(len(l1), len(l2))).</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use a <em>list comprehension</em> in combination with <code>min</code> method by passing a <code>lambda</code> <em>expression</em>.</p>
<pre><code>from datetime import datetime
l1 = [ '09/12/2017', '10/24/2017' ]
l2 = [ '09/15/2017', '10/26/2017', '12/22/2017' ]

l1 = [min(l2, key=lambda d: abs(datetime.strptime(d, "%m/%d/%Y") - datetime.strptime(item, "%m/%d/%Y"))) for item in l1]
</code></pre>
<p>Output</p>
<pre><code>['09/15/2017', '10/26/2017']
</code></pre>
<p>If you want a more efficient solution you can write your own <code>insert</code> sort algorithm.</p>
<pre><code>def insertSortIndexItem(lst, item_to_insert):
  index = 0
  while index &lt; len(lst) and item_to_insert &gt; lst[index]:
    index = index + 1
  return lst[index]

l2 = sorted(l2, key=lambda d: datetime.strptime(d, "%m/%d/%Y"))
l1 = [insertSortIndexItem(l2, item) for item in l1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If your lists are long, it can be worth pre-processing <code>l2</code> in order to be able to use <code>bisect</code> to find the closest date. Then, finding the closest date to a date in <code>l1</code> will be O(log(len(l2)) instead of O(len(l2)) with <code>min</code>.</p>
<pre><code>from datetime import datetime
from bisect import bisect

l1 = [ '09/12/2017', '10/24/2017' ]
l2 = [ '09/15/2017', '10/26/2017', '12/22/2017' ]

dates = sorted(map(lambda d: datetime.strptime(d, '%m/%d/%Y'), l2))

middle_dates = [dates[i] + (dates[i+1]-dates[i])/2 for i in range(len(dates)-1)]

out = [l2[bisect(middle_dates, datetime.strptime(d,'%m/%d/%Y'))] for d in l1]

print(out)
# ['09/15/2017', '10/26/2017']
</code></pre>
<hr/>
<p>To address your last comment, here is another solution using iterators and generators, that goes over <code>l1</code> and only the necessary part of the start of <code>l2</code>:</p>
<pre><code>from datetime import datetime
from itertools import tee, islice, zip_longest

def closest_dates(l1, l2):
    """
    For each date in l1, finds the closest date in l2,
    assuming the lists are already sorted.
    """
    dates1 = (datetime.strptime(d, '%m/%d/%Y') for d in l1)
    dates2 = (datetime.strptime(d, '%m/%d/%Y') for d in l2)
    dinf, dsup = tee(dates2)
    enum_middles = enumerate(d1 + (d2-d1)/2 
                             for d1, d2 in zip_longest(dinf, islice(dsup, 1, None), 
                                                       fillvalue=datetime.max))
    out = []
    index, middle = next(enum_middles)

    for d in dates1:
        while d &gt; middle:
            index, middle = next(enum_middles)
        out.append(l2[index])

    return out
</code></pre>
<p>Some tests:</p>
<pre><code>l1 = [ '09/12/2017', '10/24/2017', '12/11/2017', '01/04/2018' ]
l2 = [ '09/15/2017', '10/26/2017', '12/22/2017' ]
print(closest_dates(l1, l2))
# ['09/15/2017', '10/26/2017', '12/22/2017', '12/22/2017']

l2 = ['11/11/2018']  # only one date, it's always the closest
print(closest_dates(l1, l2))
# ['11/11/2018', '11/11/2018', '11/11/2018', '11/11/2018']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming, as in your example, dates are in chronological order, you can take advantage of the fact your lists are sorted. For example, if you are happy to use a 3rd party library, you can use NumPy via <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.searchsorted.html" rel="nofollow noreferrer"><code>np.searchsorted</code></a>, a faster version of <code>bisect</code> from the standard library:</p>
<pre><code>import numpy as np
from datetime import datetime

l1 = [ '09/12/2017', '10/24/2017' ]
l2 = [ '09/15/2017', '10/26/2017', '12/22/2017' ]

l1_dt = [datetime.strptime(i, '%d/%M/%Y') for i in l1]
l2_dt = [datetime.strptime(i, '%d/%M/%Y') for i in l2]

res = list(map(l2.__getitem__, np.searchsorted(l2_dt, l1_dt)))

# ['09/15/2017', '10/26/2017']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can sort with a key function that calculates the time deltas between the two dates.</p>
<pre><code>from datetime import datetime
print([min(l2, key=lambda s: abs((datetime.strptime(s, '%m/%d/%Y') - datetime.strptime(d, '%m/%d/%Y')))) for d in l1])
</code></pre>
<p>This outputs:</p>
<pre><code>['09/15/2017', '10/26/2017']
</code></pre>
<p>Note that the <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="nofollow noreferrer">date format string</a> should be <code>%m/%d/%Y</code>, for month, day and year, respectively.</p>
</div>
<span class="comment-copy">This is highly inefficient, - for each element in l1, you'll parse the whole l2</span>
<span class="comment-copy">@LazyCat, i updated my answer with a more efficient method.</span>
<span class="comment-copy">@jpp, i agree with you. I updated my answer with a sort solution.</span>
<span class="comment-copy">Well, it's still suboptimal. I think, the right way to do that is (assuming both lists are sorted) to keep a pointer to each list, keep decrementing them and checking when a pointer jumps over the date in the over list. This will give you O(max(len(l1), len(l2)). My question was more like is it possible to implement that in Pyhon without explicit loops/iterators.</span>
<span class="comment-copy">For <code>l1 = ['09/16/2018', '01/01/2018']</code> and <code>l2 = [ '09/15/2017', '12/24/2017']</code>, your second solution outputs <code>['12/24/2017', '09/15/2017']</code>. The first one is wrong because your insertion point is after the first date inferior to the target, not the closest. The second one fails because you do a lexicographic comparison in the function, not a date comparison. Furthermore, as your function starts from <code>index=0</code> each time it is called, the complexity is still 0(len(l1) * len(l2)).</span>
<span class="comment-copy">A sorted solution should be the accepted one, in my opinion. +1</span>
<span class="comment-copy">It's still O(len(l1) * log(len(l2))), right?</span>
<span class="comment-copy">@LazyCat Yes, that's it.</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/53120949/for-each-element-of-the-list-find-closest-date-from-a-different-list/53121543?noredirect=1#comment93139245_53121091" title="for each element of the list find closest date from a different list">stackoverflow.com/questions/53120949/…</a></span>
<span class="comment-copy">Thanks, yes, your last version is pretty much what I have</span>
<span class="comment-copy"><a href="https://stackoverflow.com/questions/53120949/for-each-element-of-the-list-find-closest-date-from-a-different-list#comment93139245_53121091" title="for each element of the list find closest date from a different list%23comment93139245_53121091">stackoverflow.com/questions/53120949/…</a></span>
<span class="comment-copy">The answer you point to was posted 1 minute ahead of my almost identical answer, but it got the date format string entirely wrong, which I then pointed out in my note. The author of that answer then saw my note and corrected his code. You can check its edit history for details.</span>
