<div class="post-text" itemprop="text">
<p>I want to create, in Python,  a class behaving like a list but that could be iterated circularly
use case example:</p>
<pre class="lang-python prettyprint-override"><code>myc = SimpleCircle()
print(len(myc))
j = iter(myc)
for i in range (0, 5):
    print(next(j))
</code></pre>
<p>it will print 
a
b
c
d
a</p>
<p>the code I tried so far is the one below
I know the issue is with my <code>__next__</code></p>
<p>method
which by the way seems ignored, I can use next even if I don't implement it</p>
<pre class="lang-python prettyprint-override"><code>class SimpleCircle:
    def __init__(self):
        self._circle = ['a', 'b', 'c', 'd']
        self._l = iter(self._circle)


    def __len__(self):
        return len(self._circle)

    def __iter__(self):
        return (elem for elem in self._circle)

    def __next__(self):
        try:
            elem = next(self._l)
            idx = self._circle.index(elem)
            if idx &lt; len(self._circle):
                return elem
            else:
                return self._circle[0]
        except StopIteration:
            pass
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This actually already exists with <a href="https://docs.python.org/2/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><strong><code>itertools.cycle</code></strong></a>, for example:</p>
<pre><code>from itertools import cycle

for x in cycle(['a', 'b', 'c', 'd']):
    print(x)
</code></pre>
<p>will keep repeating the element.</p>
<p>Next you here mix up the iterable, and the iterator, those are frequently different things.</p>
<p>As an iterable we can keep iterating from <code>self._circle</code>:</p>
<pre><code>class SimpleCircle:
    def __init__(self):
        self._circle = ['a', 'b', 'c', 'd']

    def __len__(self):
        return len(self._circle)

    def __iter__(self):
        if not self._circle:
            raise StopIteration
        while True:
            yield from self._circle</code></pre>
<p>Or for an <em>iterator</em>:</p>
<pre><code>class CycleIterator:

    def __init__(self, iterable):
        self.iterator = iter(iterable)
        self.__next__ = self._iternext
        self.idx = 0
        self.list = []

    def _iternext(self):
        try:
            x = next(self.iterator)
            self.list.append(x)
            return x
        except StopIteration:
            self.__next__ = self._iterlist
            return self._iterlist()

    def _iterlist(self):
        try:
            return self.list[self.index]
        except IndexError:
            raise StopIteration
        finally:
            self.index = (self.index + 1) % len(self.list)</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here's a basic non-itertools implementation:</p>
<pre><code>class CyclicIterable:
    def __init__(self, data):
        self._data = list(data)

    def __iter__(self):
        while True:
            yield from self._data

cycle = CyclicIterable(['a', 'b', 'c', 'd'])
for i, x in zip(range(5), cycle):
    print(x)
</code></pre>
<p>Notice that there's no need to implement <code>__next__</code> since the <code>Cycle</code> class itself, just like <code>list</code>, <em>is not an iterator.</em> To get an iterator out of it explicitly, you write:</p>
<pre><code>it = cycle.__iter__()
print(next(it))
print(next(it))
print(next(it))
print(next(it))
print(next(it))
</code></pre>
<p>Of course, you can instantiate as many iterators as you'd like.</p>
</div>
<span class="comment-copy">Are you trying to implement <a href="https://docs.python.org/3/library/itertools.html#itertools.cycle" rel="nofollow noreferrer"><code>itertools.cycle</code></a>?</span>
<span class="comment-copy">That's very clear, thank you. About the mixing of iterable and iterator, if I'm understanding well if I want a class iterable I've just to implement <b>iter</b> , instead if I want to implement an iterator class I've to implement <i>_next</i></span>
<span class="comment-copy">There's no need for the generator expression in your <code>yield from</code> line. <code>yield from (x for x in self._data)</code> is just the same as <code>yield from self._data</code>  (but slower and harder to understand).</span>
<span class="comment-copy">@Blckknght Whoops I forgot to remove that when copying from OP :P</span>
<span class="comment-copy">Very clever implementation. It took me a while to understand what happens. Would you please consider writing a small description why/how it cycles?</span>
<span class="comment-copy">It's equivalent to <code>while True: for x in self._data: yield x</code>.</span>
