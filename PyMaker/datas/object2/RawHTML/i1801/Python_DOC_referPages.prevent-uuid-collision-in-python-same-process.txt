<div class="post-text" itemprop="text">
<p>I am generating uuid in Python, I noticed there are collisions. I get collisions if I use <code>uuid.uuid1()</code> or <code>uuid.uuid4()</code>.  </p>
<p>I read many articles online but they elaborate about the <em>"theory"</em> of impossibility of UUID collision if generated properly.  </p>
<p>But I have yet to find one that explains how I can ensure my <strong>UUID generation is properly done</strong>.  </p>
<p>How can I do this before <code>Python 3.7</code>?<br/>
I saw <a href="https://docs.python.org/3/library/uuid.html" rel="nofollow noreferrer">Python 3.7 has a notion of UUID safety</a> but is there a way to do this outside of 3.7?</p>
<p><strong>Details:</strong><br/>
running on Ubuntu 18.04, running Python code in Jupyter Lab.  </p>
</div>
<div class="post-text" itemprop="text">
<p>First of we need to understand how <strong>UUID</strong> is generated.</p>
<p><strong>UUID1</strong> is generated depending on <code>time + Host ID + random component</code>. So if you generate <strong>UUID1</strong> on the <strong>same host</strong> at <strong>the same time</strong> you only rely on the <code>random component</code> which is 14 bits which means that you have 1 chance out of 16384 to have a collision. Not very high but should be considered.</p>
<p><strong>UUID4</strong> is full random(128bits) and should NOT collide, if it's colliding in your case it's probably due to something on your system like on this <a href="https://github.com/ramsey/uuid/issues/80" rel="nofollow noreferrer">issue</a>.</p>
<p>Could you please specify your os for further investigations ? 
Do you have os.urandom installed ?</p>
</div>
<span class="comment-copy">Use encapsulation, create a UUID factory object, where you save old ones in a set, then every time check is the new UUID exist or no, then return it only if it doesn't exist, else repeat.</span>
<span class="comment-copy">hi @thomas-kostas I have added my OS and Python details. I am running it in Jupyter Lab, I am not sure if that could be the cause..</span>
<span class="comment-copy">@cryanbhu do you use multiprocessing to generate those colliding UUIDs ? is os.urandom installed and working properly ?</span>
<span class="comment-copy">i do not know multiprocessing and have no multiprocessing in my code. But I do have a <code>for</code> loop in my code in the Notebook. I have tried to reproduce the error but I don't get it today. I suspect Jupyter Notebook might do some <i>behind the scenes</i> multiprocessing magic? I have no idea how it happened. It might have been fixed because I opened a new Jupyter server and Notebook today. Hope this helps others who might run into this in the future.</span>
<span class="comment-copy">Glad to here that, I do not know much about Jupyter Lab to be honest but as you said it seems to be notebook dependent. Please mark the problem as solved.</span>
