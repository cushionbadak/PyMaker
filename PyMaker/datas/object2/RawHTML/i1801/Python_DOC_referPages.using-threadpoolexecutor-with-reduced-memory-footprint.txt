<div class="post-text" itemprop="text">
<p>I am using <code>ThreadPoolExecutor</code> in order to download a huge (~400k) amount of keyframe images. Keyframes names are stored in text file (let's say <em>keyframes_list.txt</em>).</p>
<p>I have modified the example provided in the <a href="https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example" rel="nofollow noreferrer">documentation</a> and it seems to work flawlessly with one exception: as it is clear the example passes every link to a <code>future</code> object which are all passed to an iterable (<code>dict()</code> to be precise). This iterable is passed as argument to <code>as_completed()</code> function to check when a <code>future</code> is completed. This of course requires a huge amount of text loaded at once in memory. My python process for this task takes up 1GB of RAM. </p>
<p>The full code is shown below:</p>
<pre><code>import concurrent.futures
import requests

def download_keyframe(keyframe_name):
    url = 'http://server/to//Keyframes/{}.jpg'.format(keyframe_name)
    r = requests.get(url, allow_redirects=True)
    open('path/to/be/saved/keyframes/{}.jpg'.format(keyframe_name), 'wb').write(r.content)
    return True

keyframes_list_path = '/path/to/keyframes_list.txt'
future_to_url = {}
with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:
    with open(keyframes_list_path, 'r') as f:
        for i, line in enumerate(f):
            fields = line.split('\t')
            keyframe_name = fields[0]
            future_to_url[executor.submit(download_keyframe, keyframe_name)] = keyframe_name
    for future in concurrent.futures.as_completed(future_to_url):
        keyframe_name = future_to_url[future]
        try:
            future.result()
        except Exception as exc:
            print('%r generated an exception: %s' % (keyframe_name, exc))
        else:
            print('Keyframe: {} was downloaded.'.format(keyframe_name))
</code></pre>
<p>So, my question is how could I provide both an iterable and also keep memory footprint low. I have considered using <code>queue</code> but I am not sure it's cooperating with <code>ThreadPoolExecutor</code> smoothly. Is there an easy way to control the amount of <code>future</code>s submitted to <code>ThreadPoolExecutor</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>If we look at the <a href="https://github.com/python/cpython/blob/a94ee12c26aa8dd7dce01373779df8055aff765b/Lib/concurrent/futures/_base.py#L221" rel="nofollow noreferrer">source for <code>as_completed()</code></a>, the first thing it does is evaluate any iterable you pass as the first argument, on line 221, with <code>fs=set(fs)</code>. So as long as you're reading and queuing the entire file at once, <code>as_completed()</code> is going to load all those Future instances into memory when you call it.</p>
<p>To get around it, you need to chunk the input, and only call as_completed with a subset of the Futures, on each iteration. You can use the snippet from <a href="https://stackoverflow.com/a/434411/16361">this answer</a>; chunks of ~1k should keep your thread pool saturated while not consuming excessive memory. Your final code, starting with the with-block for the ThreadPoolExecutor, should look something like this:</p>
<pre><code>with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:
    for lines in grouper(open(keyframes_list_path, 'r'), 1000):
        # reset the dict that as_completed() will check on every iteration
        future_to_url = {}
        for i, line in enumerate(lines):
            fields = line.split('\t')
            keyframe_name = fields[0]
            future_to_url[executor.submit(download_keyframe, keyframe_name)] = keyframe_name
        for future in concurrent.futures.as_completed(future_to_url):
            keyframe_name = future_to_url[future]
            try:
                future.result()
            except Exception as exc:
                print('%r generated an exception: %s' % (keyframe_name, exc))
            else:
                print('Keyframe: {} was downloaded.'.format(keyframe_name))
</code></pre>
</div>
<span class="comment-copy">A little confused, if you want to print out that <code>keyframe_name</code>, then you must store them somewhere? How do you image that you can save the memory on this part? BTW, you should better close your file after writing. And further, you can use asynchronous IO(for example <code>aiohttp</code>) to do network communication, that can be faster and more lightweight.</span>
<span class="comment-copy">I am just saying that if I am using a number of workers (8 in my case) why do I to load all set of urls all the way? As for the file you are right (I just copied it from somewhere).</span>
