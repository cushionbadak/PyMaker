<div class="post-text" itemprop="text">
<p>Writing the following code</p>
<pre><code>def a(n: int):
    for i in range(n):
        yield i

b = a(3)
</code></pre>
<p>then asking PyCharm to add type hint to variable <code>b</code> turns the variable declaration into</p>
<pre><code>b: Generator[int, Any, None] = a(3)
</code></pre>
<p>What do the <code>Any</code> and <code>None</code> represent? Why does <code>Generator</code> take those type parameters?</p>
</div>
<div class="post-text" itemprop="text">
<p>The second and third type parameters represent the type that the generator's <code>send</code> takes, and the type that the generator returns.</p>
<p><code>send</code> is a feature introduced way back in Python 2.5 as part of <a href="https://www.python.org/dev/peps/pep-0342/" rel="nofollow noreferrer">PEP 342</a>, which extended generators to work as coroutines. In PEP 342, <code>yield</code> becomes an expression, and <code>send</code> is like <code>next</code>, but specifying a value for the <code>yield</code> expression the generator is suspended at. (If the generator is suspended at the beginning rather than at a <code>yield</code>, a non-None value cannot be sent into it.) Looking at the example in the <a href="https://docs.python.org/3/library/typing.html#typing.Generator" rel="nofollow noreferrer"><code>typing.Generator</code> docs</a>:</p>
<pre><code>def echo_round() -&gt; Generator[int, float, str]:
    sent = yield 0
    while sent &gt;= 0:
        sent = yield round(sent)
    return 'Done'
</code></pre>
<p>this generator takes floats in <code>send</code>, and returns the rounded value of the <code>send</code> argument.</p>
<p>Generator return values were introduced in Python 3.3 as part of <a href="https://www.python.org/dev/peps/pep-0380/" rel="nofollow noreferrer">PEP 380</a>, as part of subgenerator delegation support. Before PEP 380, it was very awkward to divide a generator into multiple functions, in part because subgenerators had no mechanism like <code>return</code> to communicate results back to their caller. With PEP 380, a generator can <code>return</code> a value, which will be used as the value of a <code>yield from</code> expression that yields from the generator. In the <code>typing.Generator</code> documentation example, <code>echo_round</code> returns a string.</p>
</div>
<span class="comment-copy">The question is why. What the 2 other parameters are supposed to mean? In what cases can they be other than Any and None?</span>
<span class="comment-copy">@Ivan: Read <a href="https://docs.python.org/3/library/typing.html#typing.Generator" rel="nofollow noreferrer">the docs</a>; they spell it out there. The second parameter is the type you send to it, the third is the type it returns. Neither type is commonly used by simple generators. The docs do recommend annotating both as <code>None</code> for "yield only" generators, but PyCharm doesn't have a way to determine for sure if sending isn't supported I guess.</span>
<span class="comment-copy">@Ivan: I've edited the question and answer to reflect what you say you were actually looking for.</span>
<span class="comment-copy">@Ivan: <code>async</code> and <code>await</code> are a different thing that was added later. It's closely related, and it reuses much of the same implementation, but it's not the same. Annotating an <code>async</code> coroutine with <code>Generator</code> would be incorrect.</span>
<span class="comment-copy">@Ivan: You appear to have used <code>collections.abc.Generator</code> instead of <code>typing.Generator</code>.</span>
