<div class="post-text" itemprop="text">
<p>In the Following code:</p>
<pre><code>class Box:
    def __init__(self):
        self.volume = []
        self.index = -1

    def add_item(self, item):
        self.volume.append(item)


    def __iter__(self):
        return self

    def __next__(self):
        # self.index +=1     NOTE - It is commented 
        if self.index &gt;= len(self.volume):
            raise StopIteration
        return self.volume[self.index]

class Item:
    def __init__(self, name, weight):
        self.name = name
        self.weight = weight 

b = Box()
b.add_item(Item('Cat', 5))
b.add_item(Item('Nintendo Switch', 1))
b.add_item(Item('Potatoes', 2))

for item in b:
    print('The {} weighs {} kg'.format(item.name.lower(), item.weight))
</code></pre>
<p>so we make an object 'b' of type Box and add three items to it. </p>
<p>Question 1) - <strong>What does for items in b mean? what is it referring to? what is in b?</strong> </p>
<p>Question 2) - <strong>Assuming it refers to the the three items we added to it. Why does it go on infine loop stuck on:
    The potato weighs 2 kg
and Not going to the other 2 elements?</strong>  (It works fine if I increment )</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>Question 1) - What does for items in b mean? what is it referring to? what is in b?</p>
</blockquote>
<p>This is documented:</p>
<ul>
<li><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/controlflow.html#for-statements</a></li>
<li><a href="https://docs.python.org/3/reference/compound_stmts.html#the-for-statement" rel="nofollow noreferrer">https://docs.python.org/3/reference/compound_stmts.html#the-for-statement</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#iterator-types" rel="nofollow noreferrer">https://docs.python.org/3/library/stdtypes.html#iterator-types</a></li>
</ul>
<blockquote>
<p>Question 2) - Assuming it refers to the the three items we added to it. Why does it go on infine loop stuck on: The potato weighs 2 kg and Not going to the other 2 elements? (It works fine if I increment )</p>
</blockquote>
<p>Because if you don't increment the index, it's never greater than <code>len(self.volume)</code>, so your iterator always yields the same object and never raises <code>StopIteration</code>.</p>
<p>EDIT</p>
<blockquote>
<p>shouldn't it be 'for i in b.volume' as we added items in volume variable not in 'b'?</p>
</blockquote>
<p>Well, the point of making <code>Box</code> an iterable (and an iterator) is actually to hide how <code>Item</code>s are stored (<a href="https://en.wikipedia.org/wiki/Law_of_Demeter" rel="nofollow noreferrer">law of demeter</a>)- note how the client code uses <code>Box.add_item()</code>, not <code>Box.volume.append()</code>. </p>
<p>The current implementation is faulty though as it exposes <code>.volume</code> and <code>index</code> as part of the public API when they should be protected (names prefixed with a single leading underscore, which is the Python convention for "protected" attributes), and it's possibly a bit incomplete too (it should at least expose a way to know if the box is empty / how many items it contains). </p>
</div>
<span class="comment-copy">I'm confused why you have to ask what <code>for items in b</code> means. Did you implement <code>__iter__</code> and <code>__next__</code> without having a clue what they do...?</span>
<span class="comment-copy">@Aran-Fey I am student and I may not have complete knowledge about it but i know what it does. It gets the next item. I am confused because how does 'python' know what is in the box. shouldn't it be for  i in b. volume as the items are added there? that's what i wanted to ask, what is in b to iterate over?</span>
<span class="comment-copy">shouldn't it be 'for i in b.volume' as we added items in volume variable not in 'b'?</span>
<span class="comment-copy">@lynxx cf my edited answer</span>
