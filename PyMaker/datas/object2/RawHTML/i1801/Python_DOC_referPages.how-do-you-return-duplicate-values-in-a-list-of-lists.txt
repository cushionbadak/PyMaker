<div class="post-text" itemprop="text">
<p>I am trying to return duplicate values in a list of lists. Say I create a list</p>
<pre><code>my_list = [[5,5,4,6,5,6], [6,7,5,8,4],[2,1,3,9,8]]
</code></pre>
<p>I want to return every list with each duplicate value in that list. The expected output would be</p>
<pre><code>[[5,6],[],[]]
</code></pre>
<p>I'm thinking I need to use a nested for loop to access each number inside that list.</p>
<pre><code>for alist in my_list:
    for number in alist:
        pass
</code></pre>
<p>I am also thinking about using a membership statement to see if it's in there more than once, but I'm not sure  if I'm implementing that correctly</p>
</div>
<div class="post-text" itemprop="text">
<p>List comprehension works really well for this</p>
<pre><code>my_list = [[5,5,4,6,5,6], [6,7,5,8,4],[2,1,3,9,8]]

duplicates = [list(set([value for value in sublist if sublist.count(value) &gt; 1])) for sublist in my_list]

print(duplicates)
</code></pre>
<p>This gives an <strong>output</strong> of:</p>
<pre><code>[[5, 6], [], []]
</code></pre>
<p>What's happening is we're looping through the three lists in 'my_list'. Whenever the 'count' of that value is bigger than 1 in that sublist, we're retaining it. </p>
<p>We're then converting to a set, which removes any duplicates (otherwise we'd still have three instances of '5', and two instances of '6', afterwards).</p>
<p>Converting this to a set (and then back to a list) will remove any duplicates, leaving us with only the multiple occurring values we're after.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a>:</p>
<pre><code>from collections import Counter

my_list = [[5, 5, 4, 6, 5, 6], [6, 7, 5, 8, 4], [2, 1, 3, 9, 8]]

result = [[k for k, v in counts.items() if v &gt; 1] for counts in map(Counter, my_list)]
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[[5, 6], [], []]
</code></pre>
<p><strong>Explanation</strong></p>
<p>Counter creates a dictionary where the keys are the values of the each of the inner lists and the values are the counts of each element. For example:</p>
<pre><code>Counter([5, 5, 4, 6, 5, 6])
</code></pre>
<p>creates the following object:</p>
<pre><code>Counter({5: 3, 6: 2, 4: 1})
</code></pre>
<p>then <code>items</code> returns a list of tuples, using the same example as above it will be:</p>
<pre><code>[(4, 1), (5, 3), (6, 2)]
</code></pre>
<p>then using a <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="nofollow noreferrer">list comprehension</a> get only those values with count above 1.</p>
</div>
<span class="comment-copy">Nice, but I think that needs a bit of explanation!</span>
<span class="comment-copy">Yes, that does work but I am not familiar with Counter. Could you explain what that does?</span>
