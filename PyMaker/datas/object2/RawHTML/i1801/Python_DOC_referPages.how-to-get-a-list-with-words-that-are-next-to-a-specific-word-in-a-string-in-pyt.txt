<div class="post-text" itemprop="text">
<p>Assuming I have a string 
<code>string = 'i am a person i believe i can fly i believe i can touch the sky'</code>. </p>
<p>What I would like to do is to get <strong>all</strong> the words that are next to (from the right side) the word <code>'i'</code>, so in this case <code>am, believe, can, believe, can</code>.</p>
<p>How could I do that in <code>python</code> ? I found <a href="https://stackoverflow.com/questions/17686809/how-to-find-word-next-to-a-word-in-python">this</a> but it only gives the first word, so in this case, <code>'am'</code></p>
</div>
<div class="post-text" itemprop="text">
<p>You can write a regular expression to find the words after the target word:</p>
<pre><code>import re

word = "i"
string = 'i am a person i believe i can fly i believe i can touch the sky'

pat = re.compile(r'\b{}\b \b(\w+)\b'.format(word)) 
print(pat.findall(string))
# ['am', 'believe', 'can', 'believe', 'can']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Simple generator method:</p>
<pre><code>def get_next_words(text, match, sep=' '):
    words = iter(text.split(sep))
    for word in words:
        if word == match:
            yield next(words)
</code></pre>
<p>Usage:</p>
<pre><code>text = 'i am a person i believe i can fly i believe i can touch the sky'
words = get_next_words(text, 'i')

for w in words:
    print(w)

# am
# believe
# can
# believe
# can
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>One way is to use a <a href="https://docs.python.org/3/library/re.html" rel="nofollow noreferrer">regular expression</a> with a look behind assertion:</p>
<pre><code>&gt;&gt;&gt; import re
&gt;&gt;&gt; string = 'i am a person i believe i can fly i believe i can touch the sky'
&gt;&gt;&gt; re.findall(r'(?&lt;=\bi )\w+', string)
['am', 'believe', 'can', 'believe', 'can']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can <code>split</code> the string and get the next index of the word "i" as you iterate with <code>enumerate</code>:</p>
<pre><code>string = 'i am a person i believe i can fly i believe i can touch the sky'

sl = string.split()
all_is = [sl[i + 1] for i, word in enumerate(sl[:-1]) if word == 'i']
print(all_is)
# ['am', 'believe', 'can', 'believe', 'can']
</code></pre>
<p>Note that as @PatrickHaugh pointed out, we want to be careful if "i" is the last word so we can exclude iterating over the last word completely.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>import re
string = 'i am a person i believe i can fly i believe i can touch the sky'
words = [w.split()[0] for w in re.split('i +', string) if w]
print(words)
</code></pre>
</div>
<span class="comment-copy">If the answer you have linked to does the thing you want once, but you need to do it more than once, what would you do?</span>
<span class="comment-copy">The (currently) last answer to your linked question actually does give the neighbouring word for each occurrence of the target word.</span>
<span class="comment-copy">@AddisonLynch That is <i>exactly</i> the link OP has sourced....?</span>
<span class="comment-copy">how is the question duplicate ...? I also explained the difference and what the problem is with the answer</span>
<span class="comment-copy">thanks for down voting for no reason</span>
<span class="comment-copy">This works. Is it possible though to replace the 'hardcoded' <code>i</code> with a <code>variable = 'i'</code></span>
<span class="comment-copy">@quant Sure <code>re.findall(r'\b{}\b \b(\w+)\b'.format(word), string)</code></span>
<span class="comment-copy">Thanks ! you could also edit the answer if you want, to the more generic one</span>
<span class="comment-copy">@PatrickHaugh thank you; fixed.</span>
