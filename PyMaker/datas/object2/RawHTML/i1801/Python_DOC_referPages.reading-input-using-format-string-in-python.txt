<div class="post-text" itemprop="text">
<p>Suppose I want to read a sequence of inputs, where each input is a tuple is of the form <code>&lt;string&gt; , &lt;integer&gt;, &lt;string&gt;</code>. Additionally, there can be arbitrary amount of whitespace around the commas. An easy way to do this in C/C++ is to use <code>scanf</code> with format string <code>"%s , %d , %s"</code>. What is the equivalent function in python? </p>
<p>Suppose we knew that each input is on a separate line, then you could easily parse this in python using <code>split</code> and <code>strip</code>. But the newline requirement complicates things. Furthermore, we could even have weird inputs such as</p>
<p><code>&lt;s11&gt;,    &lt;i1&gt;
    , &lt;s12&gt;      &lt;s21&gt;,
&lt;i2&gt;       , &lt;s22&gt;
</code>
Where <code>s11, i1, s12</code> is the first input and <code>s21, i2, s22</code> is the second. And scanf would still be able to handle this. How does one do it in python? I also don't want to take the entire input at once and parse it, since I know that there will be other inputs that don't fit this format later on, and I don't want to do the parsing manually.</p>
</div>
<div class="post-text" itemprop="text">
<p>You should be able to first strip the whitespace, then split on commas, then handle the resulting strings and integers however you want. The regular expression <code>s\+</code> matches any nonzero amount of whitespace characters:</p>
<pre><code>input_string = "    hello     \n  \t   ,    10  ,   world   \n     "
stripped_string = re.sub('\s+', '', input_string)
substrings = stripped_string.split(',')
string1 = substrings[0]
integer1 = int(substrings[1])
string2 = substrings[2]
</code></pre>
<p>You'd just have to put those last three lines inside a loop if you need to handle multiple s,i,s tuples in a row.</p>
<p>EDIT: I realize now you want to interpret any whitespace <em>as</em> a comma. I'm not sure how wise that is, but a hacky way to do it is to replace all the commas with whitespace, split on whitespace, and call it a day</p>
<pre><code>input_string = "    hello     \n  \t   ,    10     world   \n     "
stripped_string = re.sub(',', ' ', input_string)
substrings = stripped_string.split()
string1 = substrings[0]
integer1 = int(substrings[1])
string2 = substrings[2]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For delimited format it's pretty easy with the <a href="https://docs.python.org/3.6/library/csv.html" rel="nofollow noreferrer">csv</a> module.
You can plugin any kind of <a href="https://docs.python.org/3/library/fileinput.html" rel="nofollow noreferrer">file-like inputs</a> to it.</p>
<p>And you handle stripping white spaces and type casting downstream. Here's a sample to get you going:</p>
<pre><code>In [25]: import fileinput

In [26]: import csv

In [28]: reader = csv.reader(fileinput.input())

In [29]: for l in reader:
    ...:     print(l)
    ...:
stdin input -&gt; a,b, c, d
print output -&gt; ['a', 'b', ' c', ' d   ']
</code></pre>
</div>
<span class="comment-copy">so there is no comma in between &lt;s12&gt; and &lt;s21&gt;?</span>
<span class="comment-copy">@onno That's correct. But there can be arbitrary amount of whitespace there too (including newline(s)).</span>
<span class="comment-copy">You are attributing way too much power to <code>scanf</code>. The problems you list also appear when (mis)using <code>scanf</code>. As there is no such function in Python, you indeed have to write one yourself.</span>
