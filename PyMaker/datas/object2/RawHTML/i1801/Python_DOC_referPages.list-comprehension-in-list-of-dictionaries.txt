<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/3490738/how-to-sum-dict-elements">How to sum dict elements</a>
<span class="question-originals-answer-count">
                    9 answers
                </span>
</li>
</ul>
</div>
<p>I have the following list of dictionaries:</p>
<pre><code>allChannelTraffic = [ { "Web" : 4, "android" : 3 }, { "Web" : 1 }, { "Web" : 1 }, { "Web" : 1 },]
</code></pre>
<p>I would like to know the <strong>easiest way to get an output like this from the above list:</strong> </p>
<pre><code>[{'Web':7,'android':3}]  
</code></pre>
<p>Where I want to get the sum of the values of all the keys. I heard that using list comprehension in python, we can easily do operations. Can someone please tell me how to implement this using list comprehension?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">Counter</a> with <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">sum</a>:</p>
<pre><code>from collections import Counter

allChannelTraffic = [{"Web": 4, "android": 3}, {"Web": 1}, {"Web": 1}, {"Web": 1}, ]

result = sum(map(Counter, allChannelTraffic), Counter())

print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>Counter({'Web': 7, 'android': 3})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>List comprehensions are not really useful here.</p>
<p>Generator expressions instead allows us to do the following:</p>
<pre><code>allChannelTraffic = [ { "Web" : 4, "android" : 3 }, { "Web" : 1 }, { "Web" : 1 }, { "Web" : 1 },]
keys = set(k for d in allChannelTraffic for k in d.keys())
totals = {key: sum(d.get(key, 0) for d in allChannelTraffic) for key in keys}
print(totals)

# {'Web': 7, 'android': 3}
</code></pre>
<p>That last one <code>{key: sum([...]) for key in keys}</code> is a dictionary comprehension by the way.</p>
<p>And I could have used a set comprehension instead of the <code>set()</code> in line 2:</p>
<p><code>{k ... for k in d.keys()}</code> == <code>set(k ... for k in d.keys())</code></p>
<p>But I'd rather not do that, since the <code>set()</code> is much clearer for the reader.</p>
<p>In general though the Counter or Defaultdict approach for your problem might be more understandable for unexperienced pythonistas....</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict</code></a> to sum up the values for each key</p>
<pre><code>import collections
totals = collections.defaultdict(int)
for sub in allChannelTraffic:
    for key, value in sub.items():
        totals[key] += value
</code></pre>
<p>Output</p>
<pre><code>&gt;&gt;&gt; totals
defaultdict(&lt;class 'int'&gt;, {'android': 3, 'Web': 7})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This isn't a list comprehension, but you can always use <a href="https://docs.python.org/3/library/collections.html#collections.Counter.update" rel="nofollow noreferrer"><code>Counter.update()</code></a> here:</p>
<pre><code>from collections import Counter

allChannelTraffic = [ { "Web" : 4, "android" : 3 }, { "Web" : 1 }, { "Web" : 1 }, { "Web" : 1 }]

counts = Counter()
for d in allChannelTraffic:
    counts.update(d)

print(counts)
# Counter({'Web': 7, 'android': 3})
</code></pre>
<p>A non-library approach would look something like this:</p>
<pre><code>allChannelTraffic = [ { "Web" : 4, "android" : 3 }, { "Web" : 1 }, { "Web" : 1 }, { "Web" : 1 }]

counts = {}
for d in allChannelTraffic:
    for k in d:
        counts[k] = counts.get(k, 0) + d[k]

print(counts)
# Counter({'Web': 7, 'android': 3})
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>allChannelTraffic = [ { "Web" :4,"android" : 3 }, { "Web" : 1 }, { "Web" : 1 },{ "Web" : 1 },] 
allChannelTraffic = [{"web": sum([item[1].get("Web",0) for item in enumerate(allChannelTraffic)]), "android":sum([item[1].get("android",0) for item in enumerate(allChannelTraffic)])}]
</code></pre>
</div>
<span class="comment-copy">@DavidG Not really, since the android key does not occur in every dict</span>
<span class="comment-copy">Nice answer, but just cuz he wanted a list comprehension, here it'd be: <code>[totals[key] += value for key, value in sub.items() for sub in allChannelTraffic]</code>  Not to steal your thunder, I just like one liners :)</span>
<span class="comment-copy">@Jaba that would not work as the key would not exist and it would throw an error</span>
<span class="comment-copy">It's a defaultdict though. I may be wrong..</span>
