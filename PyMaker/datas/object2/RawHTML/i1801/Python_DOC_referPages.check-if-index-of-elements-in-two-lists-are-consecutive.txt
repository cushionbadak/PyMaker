<div class="post-text" itemprop="text">
<p>If list1 is defined as <code>[15,1,20]</code>
and list2 is defined as <code>[6,15,3,1,6,20]</code></p>
<p>The function will return True because list 2 contains <code>(15,1,20)</code> in the same order.</p>
<p>However if list 2 was defined as <code>[6,1,15,20,3]</code>,  the sequence is <code>(1,15,20)</code> therefore it will return False.</p>
<pre><code>def sublist(lst1,lst2):
    for i in lst1:
        if i in lst2:
            if ## ?? ##
                return True
    return False
</code></pre>
<p>The if statement is where I am confused because I'm not sure how to check for consecutive numbers in two different lists.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a single item from the input list and scan forward over the second list until you have a match, then take the next item, continue forward, etc.</p>
<p>Using iterators, taking the next value to test is simple enough. Create an iterator for <code>lst1</code> with <a href="https://docs.python.org/3/library/functions.html#iter" rel="nofollow noreferrer"><code>iter()</code></a>, and then the <a href="https://docs.python.org/3/library/functions.html#next" rel="nofollow noreferrer"><code>next()</code> function</a> gives you the next item in the list order. When that call raises <code>StopIteration</code> you know you have tested all the values in the first list:</p>
<pre><code>def sublist(lst1, lst2):
    source = iter(lst1)
    try:
        item = next(source)
        for value in lst2:
            if item == value:
                item = next(source)
        return False
    except StopIteration:
        # all items in lst1 checked
        return True
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; lst1 = [15, 1, 20]
&gt;&gt;&gt; sublist(lst1, [6, 15, 3, 1, 6, 20])
True
&gt;&gt;&gt; sublist(lst1, [6, 1, 15, 20, 3])
False
</code></pre>
<p>Note that the function also returns <code>True</code> if <code>lst1</code> is empty (the empty list is <em>always</em> an ordered subset) and <code>False</code> if <code>lst1</code> is not empty but <code>lst2</code> <em>is</em> (an empty list can never be a superset).</p>
</div>
<div class="post-text" itemprop="text">
<p>The following will work, based on the <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer"><code>list.index</code></a> method's <code>start</code> parameter:</p>
<pre><code>def sublist(lst1, lst2):
    ind = 0
    for a in lst1:
        try:
            ind = lst2.index(a, ind)
        except ValueError:
            return False
    return True

&gt;&gt;&gt; sublist([1,2,3], [4,1,3,2,5])
False
&gt;&gt;&gt; sublist([1,2,3], [4,1,2,5,3])
True
</code></pre>
<p>This iteratively looks up the elements of <code>lst1</code> in <code>lst2</code> while moving ahead the start index for the lookup appropriately until any element can't be found in the remainder of <code>lst2</code> or all are found.</p>
</div>
<div class="post-text" itemprop="text">
<p>get the index list for each item in the original list in the second list and check if any combination of them are in ascending order</p>
</div>
<span class="comment-copy">Jesus. I have been writing code on python without any idea that <code>iter()</code> existed for a couple years now.</span>
<span class="comment-copy">That'd take multiple scans across the second list; you can do this in a single scan.</span>
<span class="comment-copy">True, but its a lazy solution which should give OP a nudge in the right direction. And it handles for edge cases</span>
<span class="comment-copy">What edgecases did you have in mind?</span>
<span class="comment-copy">list1 = (15,1,10); list2 = (1,15,1,10)</span>
<span class="comment-copy">I'm not sure how that's an edge case, can you elaborate?</span>
