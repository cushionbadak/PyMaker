<div class="post-text" itemprop="text">
<p>I want controlling c++ class object in python.</p>
<p>I'm expected example.</p>
<ol>
<li><p>Objected class in c++ and send object to python.</p>
<pre><code>class Animal animal();
PyObject *py_func = PyObject_GetAttrString(mymodule, "ControlAnimal");
PyObject_CallFunction(func, "class Animal", animal);
</code></pre></li>
<li><p>Control object in python.</p>
<pre><code>def ControlAnimal(animal) // Get animal object is created object from c++.
    pass
</code></pre></li>
<li><p>if object is controlled in python, animal in c++ is also applied because animal is c++ object's reference in python.</p></li>
</ol>
<p>I already try SWIG and succeeded binding Animal class to python.</p>
<pre><code>python.
&gt;&gt; import animal
&gt;&gt; a = animal.Animal()
</code></pre>
<p>But it only control created class object  in python.</p>
<p>Sorry bad english.</p>
</div>
<div class="post-text" itemprop="text">
<p>I solved this problem by using static global variable.</p>
<p>declare static global variable shared python variable in header file.</p>
<pre><code>static Animal* g_animal;
</code></pre>
<p>Write function to set and get g_animal.</p>
<pre><code>Animal* SetCppInstance(PyObject* capsule);
Animal* GetCppInstance();
</code></pre>
<p>You can set created animal object pointer in c++ to use in python.
To set g_aniaml in python, use PyObject_CallFunction().</p>
<pre><code>Animal aniaml;
PyObject *py_module_animal = PyImport_ImportModule("animal");
PyObject *py_module_animal_setcppinstance = PyObject_GetAttrString(py_module_animal, "SetCppInstance");
PyObject_CallFunction(py_module_animal_setcppinstance, "O", py_capsule_animal);
</code></pre>
<p>And you must get your python module. To get python animal module, I use swig.</p>
<p>Then, you should write control.py to control animal. </p>
<pre><code>import animal
obj = animal.GetCppInstance()
...
</code></pre>
<p>Sure, You should Call control.py manually in c++.</p>
<pre><code>PyImport_ImportModule("control");
</code></pre>
<p>Now, if you control obj in control.py, animal in c++ change also.</p>
</div>
<span class="comment-copy">You might want to write an <a href="https://docs.python.org/3/extending/building.html#" rel="nofollow noreferrer">extension module</a></span>
<span class="comment-copy">Thank reply. But c++ extension module can only use in python. I want that created object in c++ is controlled in python function.</span>
<span class="comment-copy">The extension is for providing a defined interface for python to access some <i>arbitrary</i> C++ API. Appropriately defined C++ types can be used from within Python seamlessly. If you want to control already existing C++ types (which you cannot or don't want to modify), you can create wrapper objects around that provide the python interface to the wrapped type.</span>
<span class="comment-copy">I updated this example source in <a href="https://github.com/Gakgu/Python-Plugin-In-Cpp-Example" rel="nofollow noreferrer">my github repo</a>.</span>
