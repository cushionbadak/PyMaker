<div class="post-text" itemprop="text">
<p>I'm sorry if a similar problem has been asked, I could not find it.</p>
<p>I need to check whether <code>string_a</code> contains all the characters from <code>string_b</code> including the non-unique ones.</p>
<p>Example 1:</p>
<pre><code>... string_a = 'baba'
... string_b = 'baaa'
... &lt;solution here&gt;
False
</code></pre>
<p>Example 2 (returns <code>True</code> because now <code>string_a</code> has enough <code>'a'</code>s):</p>
<pre><code>... string_a = 'ababa'
... string_b = 'baaa'
... &lt;solution here&gt;
True
</code></pre>
<p>I tried <code>set()</code> method but it only works if the characters of the strings are unique. So I have this:</p>
<pre><code>... string_a = 'baba'
... string_b = 'baaa'
... return set(string_b) &lt;= set(string_a)
True
</code></pre>
<p>I want it to be <code>False</code> because <code>string_b</code> has three <code>'a'</code>s and <code>string_a</code> only two.</p>
</div>
<div class="post-text" itemprop="text">
<p>What you're doing is interpreting the strings as <a href="https://en.wikipedia.org/wiki/Multiset" rel="noreferrer">multisets</a> and checking if one is a subset of the other. Python's multiset representation is <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a>:</p>
<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; Counter('baba')
Counter({'b': 2, 'a': 2})
&gt;&gt;&gt; Counter('baaa')
Counter({'a': 3, 'b': 1})
</code></pre>
<p>Unfortunately, <code>Counter</code> doesn't implement a <code>is_subset</code> method, so we have to write our own. Here are two ways to do it:</p>
<pre><code>def is_sub_multiset(haystack, needle):
    haystack = Counter(haystack)
    needle = Counter(needle)

    return not needle - haystack
    # OR
    # return all(haystack[elem] &gt;= count for elem, count in needle.items())
</code></pre>
<pre><code>&gt;&gt;&gt; is_sub_multiset('baba', 'baaa')
False
&gt;&gt;&gt; is_sub_multiset('ababa', 'baaa')
True
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Using Counter as a solution seems best to me. </p>
<p>First count all characters in string_a, then go through string_b char by char and substract from the counter or fail if counter=0. This allows us to get a solution in O(n), reading each string once.</p>
<pre><code>from collections import Counter

def is_subset(string_a, string_b):
  count = Counter(string_a)
  for c in string_b:
    if count[c] == 0:
      return False
    count[c] -= 1
  return True


print(is_subset('baba', 'baaa')) # =&gt;False
print(is_subset('ababa', 'baaa')) # =&gt;True
print(is_subset('aabb', 'd')) # =&gt;False
print(is_subset('aabb', 'bbb')) # =&gt;False
</code></pre>
</div>
<span class="comment-copy">Thank you for clear explanation!</span>
