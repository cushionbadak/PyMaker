<div class="post-text" itemprop="text">
<p>I'm writing a simple parser for exercise and I have a problem with saving downloaded data to a dictionary.</p>
<pre><code>data = {"":{"":[]}}

with open("Training_01.txt", "r") as open_file:
    text = open_file.read()
    text = text.split("\n")

    for i in text:
        i = i.split("/")
        try:
           data[i[1]] = {i[2]:[].append(i[3])}
        except:
            print("Can't")
</code></pre>
<p>This is an example of the data that I want to parse:</p>
<pre><code>/a/abbey/sun_aobrvxdhumowzajn.jpg
/a/abbey/sun_apstfzmbeiwbjqvb.jpg
/a/abbey/sun_apyilcssuybumhbu.jpg
/a/abbey/sun_arrohcvipmrghrzh.jpg
/a/abbey/sun_asgeghboyugsatii.jpg
/a/airplane_cabin/sun_blczihbhbntqccux.jpg
/a/airplane_cabin/sun_ayzaayjpoknjvpds.jpg
/a/airplane_cabin/sun_afuoinkozbbhqksk.jpg
/b/butte/sun_asfnwmuzhtjrztns.jpg
/b/butte/sun_ajzkngginlffsozz.jpg
/b/butte/sun_adonkmfgywrhpakt.jpg
/c/cabin/outdoor/sun_atqvmarllxqynnks.jpg
/c/cabin/outdoor/sun_acfcobswmnoyhyfi.jpg
/c/cabin/outdoor/sun_afgjdqosvakljsmc.jpg
</code></pre>
<p>I want to create dictionary with "a","b","c" or any letter, as a key (I cant hard code it) with dictionary as a value that contains place where images were taken and list of images.</p>
<p>But when I want to read my saved data I'm getting <code>None</code> as a value</p>
<pre><code> print(data["a"])
 Output: {'auto_factory': None}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try to use <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>defaultdict</code></a> from python stdlib. It's very convenient in situations like this:</p>
<pre><code>from collections import defaultdict

data = defaultdict(lambda: defaultdict(list))

with open("Training_01.txt", "r") as open_file:
    text = open_file.read()
    text = text.split("\n")

    for line in text:
        try:
            _, key, subkey, rem = line.split("/", 3)
            data[key][subkey].append(rem)        
        except:
            print("Can't")

print(data)
</code></pre>
<p>Explanation: the first time you access <code>data</code> (which is a dictionary) with a not existing key, a new entry for such a key will be created. This entry is going to be again a defaultdict, but the first try you access it with a not existing key, again a new (nested this time) entry will be created. And this entry will be a <code>list</code>. So, then you can safely append a new element to such a list.</p>
<p><strong>UPD:</strong> Here is a way to implement the same requirement but without <code>defaultdict</code>:</p>
<pre><code>data = {}  # just a plain dict
# for ...:
    data[key] = data.get(key, {})  # try to access the key, if it doesn't exist - create a new dict entry for such a key
    data[key][subkey] = data[key].get(subkey, [])  # same as above but for the sub key
    data[key][subkey].append(rem)  # finally do the job
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Because <code>data[i[1]] = {i[2]:[].append(i[3])}</code> create a new 2nd layer dictionary everytime.</p>
<p>This is a possible solution. It is the cleanest solution, but it shows step by step. It creates a new dict and list if the key is not in the last layer dict. But it append value to the list if the dict has the key.</p>
<pre><code>data = {"":{"":[]}}

with open("Training_01.txt", "r") as open_file:
    text = open_file.read()
    text = text.split("\n")

    for i in text:

        i = i.split("/")
        key_1 = i[1]
        key_2 = i[2]
        value = i[3]
        try:
            if key_1 in data.keys():  # Whether the key i[1] is in the 1st layer of the Dict
                if key_2 in data[key_1].keys():  # Whether the key i[2] is in the 2nd layer of the Dict
                    # Yes, Append to the list
                    data[key_1][key_2].append(value)
                else:
                    # No, Creat a new list
                    data[key_1][key_2] = [value]
            # if i[1] not in the 1st layer, creat a 2nd layer dict with i[2] as key, i[3] as value
            else:
                data[key_1] =  {key_2:[value]}
        except:


             print("Can't")
    print(data['a'])
</code></pre>
</div>
<span class="comment-copy">Where does 'auto_factory' come from?</span>
<span class="comment-copy">I have 19 000 lines like this and <code>auto_factory</code> is the last one with index <code>/a/</code>. It's just an example. Link for a file with data: <a href="http://www.practicepython.org/assets/Training_01.txt" rel="nofollow noreferrer">practicepython.org/assets/Training_01.txt</a></span>
<span class="comment-copy">Is there a limit to how many nested levels the dictionary will have? For example, <code>{'c': {'cabin': {'outdoor': 'sun_atqvmarllxqynnks.jpg'}}}</code></span>
<span class="comment-copy">I think it will be max <code>{'c': {'cabin': {'outdoor': 'sun_atqvmarllxqynnks.jpg'}}}</code> but I'm not sure, there is no limit specified.</span>
<span class="comment-copy">Thank you for your answer but I want to do it in default python because I'm studying for an exam on which I can't use any modules.</span>
<span class="comment-copy">It is a default python. But wait a minute, I will show how it can be done without <code>defaultdict</code> and you will see how beautiful the python's standard library is.</span>
<span class="comment-copy">To sum up, I can't assign value to second layer dictionary before i check/create first layer? Do I understand it correctly?</span>
<span class="comment-copy">Yes, before accessing the second level one needs to check and maybe create an entry on the first level. <code>dict.get(key, default_value)</code> just simplifies this pattern to a single call.</span>
<span class="comment-copy">Thatâ€™s exactly what's <code>defaultdict</code> doing.</span>
<span class="comment-copy">While it's technically correct, for the sake of readability I would introduce meaningful names for <code>i[1]</code>, <code>i[2]</code>, etc. It'll be much easier to grasp the idea behind the snippet then.</span>
<span class="comment-copy">Thanks, I updated my answer.</span>
