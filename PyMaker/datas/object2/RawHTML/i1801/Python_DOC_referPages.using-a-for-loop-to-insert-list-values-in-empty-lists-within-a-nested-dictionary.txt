<div class="post-text" itemprop="text">
<p>I have a nested dictionary:</p>
<pre><code>my_dict = {
1: {'player_id': 1,
'player_name': 'Bryan_Demapan',
'time_played': 0.0,
'player_pokemon': {},
'gyms_visited': []},
2: {'player_id': 2,
'player_name': 'Tom Syneal',
'gyms_visited': [],
'player_pokemon': {},
'time_played': 0.0}}
</code></pre>
<p>Suppose I have a list</p>
<pre><code>new_list = ['A', 'B', 'C']
</code></pre>
<p>How would I make a for loop statement that inserts my new list into all the empty lists with the key 'gyms_visited'?</p>
<p>the new dictionary should look like this </p>
<pre><code>my_dict = {
1: {'player_id': 1,
'player_name': 'Bryan_Demapan',
'time_played': 0.0,
'player_pokemon': {},
'gyms_visited': ['A', 'B', 'C']},
2: {'player_id': 2,
'player_name': 'Tom Syneal',
'gyms_visited': ['A', 'B', 'C'],
'player_pokemon': {},
'time_played': 0.0}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just iterate over the values of <code>my_dict</code> and assign <code>new_list</code> to the key <code>'gyms_visited'</code></p>
<pre><code>In [529]: for k, v in my_dict.items():
     ...:     v['gyms_visited'] = new_list.copy()
     ...:

In [530]: my_dict
Out[530]:
{1: {'gyms_visited': ['A', 'B', 'C'],
  'player_id': 1,
  'player_name': 'Bryan_Demapan',
  'player_pokemon': {},
  'time_played': 0.0},
 2: {'gyms_visited': ['A', 'B', 'C'],
  'player_id': 2,
  'player_name': 'Tom Syneal',
  'player_pokemon': {},
  'time_played': 0.0}}
</code></pre>
<p>If you were to simply assign <code>new_list</code> then you will come into trouble as soon as you change any value in <code>new_list</code></p>
<pre><code>In [529]: for k, v in my_dict.items():
     ...:     v['gyms_visited'] = new_list
     ...:

In [531]: new_list[1] = 100

In [532]: my_dict
Out[532]:
{1: {'gyms_visited': ['A', 100, 'C'],
  'player_id': 1,
  'player_name': 'Bryan_Demapan',
  'player_pokemon': {},
  'time_played': 0.0},
 2: {'gyms_visited': ['A', 100, 'C'],
  'player_id': 2,
  'player_name': 'Tom Syneal',
  'player_pokemon': {},
  'time_played': 0.0}}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a dictionary comprehension:</p>
<pre><code>new_list = ['A', 'B', 'C']
data = {1: {'player_id': 1, 'player_name': 'Bryan_Demapan', 'time_played': 0.0, 'player_pokemon': {}, 'gyms_visited': []}, 2: {'player_id': 2, 'player_name': 'Tom Syneal', 'gyms_visited': [], 'player_pokemon': {}, 'time_played': 0.0}}
new_data = {a:{c:[i for i in new_list if i not in d] if c == 'gyms_visited' else d \
    for c, d in b.items()} for a, b in data.items()}
</code></pre>
<p>Output:</p>
<pre><code>{
  "1": {
    "player_id": 1,
    "player_name": "Bryan_Demapan",
    "time_played": 0.0,
    "player_pokemon": {},
    "gyms_visited": ["A", "B", "C"]
 },
 "2": {
    "player_id": 2,
    "player_name": "Tom Syneal",
    "gyms_visited": ["A", "B", "C"],
    "player_pokemon": {},
    "time_played": 0.0
   }
}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>print({idx:{k:(new_list if k=='gyms_visited' else v) for k,v in i.items()} for idx,i in enumerate(my_dict.values(),1)})
</code></pre>
<p>Nested dictionary comprehension would work.</p>
<p>Output:</p>
<pre><code>{1: {'player_id': 1, 'player_name': 'Bryan_Demapan', 'time_played': 0.0, 'player_pokemon': {}, 'gyms_visited': ['A', 'B', 'C']}, 2: {'player_id': 2, 'player_name': 'Tom Syneal', 'gyms_visited': ['A', 'B', 'C'], 'player_pokemon': {}, 'time_played': 0.0}}
</code></pre>
<p>I actually like @aydow's solution, In addition to it, you can do it like:</p>
<pre><code>for k,v in data.items():
   v['gyms_visited']=new_list[:]
</code></pre>
<p>Or:</p>
<pre><code>import copy
for k,v in data.items():
   v['gyms_visited']=copy.deepcopy(new_list)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can also just <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer"><code>extend()</code></a> the list:</p>
<pre><code>for key in my_dict:
    my_dict[key]['gyms_visited'].extend(new_list)
</code></pre>
<p>and as you can see here, all the lists have a different <a href="https://docs.python.org/3.3/library/functions.html#id" rel="nofollow noreferrer"><code>id()</code></a> and not referencing the same object:</p>
<pre><code>print(id(new_list))
# 2704861952904

for key in my_dict:
    print(id(my_dict[key]['gyms_visited']))
# 2704833143368
# 2704833143432
</code></pre>
<p>In terms of performance, <code>list.extend()</code> is O(N), where N = 3 is the length of list you want to extend. This most likely is a series of <code>list.append()</code> calls, which are O(1) each. </p>
<p>This will be the same for copying using <code>[:]</code> or <code>.copy()</code>, which is O(N). </p>
</div>
<span class="comment-copy">What have you tried so far?</span>
<span class="comment-copy">I made the edits for the expected output.</span>
<span class="comment-copy">Should they each have a copy of the list or a reference to the same list?</span>
<span class="comment-copy">A copy or reference to the same list will do</span>
<span class="comment-copy">A dictionary whose keys are sequential numbers should probably be a list instead.</span>
<span class="comment-copy">Thank you.  This was exactly the for loop I need to change my dictionary.</span>
<span class="comment-copy">This seems incredibly complicated compared to the simple <code>for</code> loop in aydow's answer.</span>
<span class="comment-copy">@Barmar Yes although I generally prefer creating a new structure rather than attempting to mutate the existing one in-place.</span>
<span class="comment-copy">@Barmar With mine too, i regret from that, haha, so added additional stuff to aydow's little nice loop...</span>
