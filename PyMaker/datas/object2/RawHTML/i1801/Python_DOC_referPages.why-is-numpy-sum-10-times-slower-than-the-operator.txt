<div class="post-text" itemprop="text">
<p>I noticed that very straingely, np.sum is 10x slower than a hand written sum.</p>
<p><strong>np.sum with axis:</strong></p>
<pre><code>p1 = np.random.rand(10000, 2)
def test(p1):
    return p1.sum(axis=1)
%timeit test(p1)
</code></pre>
<blockquote>
<p>186 µs ± 4.21 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</p>
</blockquote>
<p><strong>np.sum without axis:</strong></p>
<pre><code>p1 = np.random.rand(10000, 2)
def test(p1):
    return p1.sum()
%timeit test(p1)
</code></pre>
<blockquote>
<p>17.9 µs ± 236 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)</p>
</blockquote>
<p><strong>+:</strong></p>
<pre><code>p1 = np.random.rand(10000, 2)
def test(p1):
    return p1[:,0] + p1[:,1]
%timeit test(p1)
</code></pre>
<blockquote>
<p>15.8 µs ± 328 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)</p>
</blockquote>
<p><strong>Multiplication:</strong></p>
<pre><code>p1 = np.random.rand(10000, 2)
def test(p1):
    return p1[:,0]*p1[:,1]
%timeit test(p1)
</code></pre>
<blockquote>
<p>15.7 µs ± 701 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)</p>
</blockquote>
<p>I don't see any reason for this. Any idea why? My numpy version is <code>1.15.3</code>.</p>
<p>EDIT: 
with 10000000:</p>
<pre><code>np.sum (with axis): 202 ms (5 x)
np.sum (without axis): 12 ms
+ : 46 ms (1 x)
* : 44.3 ms 
</code></pre>
<p>So I guess there is some overhead playing around, to some extent...</p>
</div>
<div class="post-text" itemprop="text">
<p>The main difference is larger overhead when <code>a.sum(axis=1)</code> is calculated. Calculating a reduction (in this case <code>sum</code>) is not a trivial matter:</p>
<ul>
<li>one has to take the round-off errors into account and thus uses <a href="https://en.wikipedia.org/wiki/Pairwise_summation" rel="nofollow noreferrer">pairwise summation</a> to reduce it.</li>
<li>tiling is important for bigger arrays, as it makes the most out of the available cache</li>
<li>In order to be able to use the SIMD-instructions/out-of-order execution abilities of modern CPUs one should calculate multiple rows in parallel</li>
</ul>
<p>I have discussed the topics above in more details for example <a href="https://stackoverflow.com/a/49393485/5769463">here</a> and <a href="https://stackoverflow.com/a/48362111/5769463">here</a>.</p>
<p>However, all this is not needed and not better than a naive summation if there are only two elements to add - you get the same result but with much less overhead and faster.</p>
<p>For only 1000 elements, the overhead of calling numpy functionality is probably higher than actually doing these 1000 additions (or multiplications for that matter, because on modern CPUs pipelined additions/multiplications have the same cost) -as you can see, that for 10^4 the running time is only about 2 times higher, a sure sign that overhead plays a bigger role for 10^3! In <a href="https://stackoverflow.com/a/42591263/5769463">this answer</a> the impact of overhead and cache misses is investigated in more details.</p>
<p>Let's take a look at profiler-result to see whether the theory above holds (I use <a href="https://en.wikipedia.org/wiki/Perf_(Linux)" rel="nofollow noreferrer"><code>perf</code></a>):</p>
<p>For <code>a.sum(axis=1)</code>:</p>
<pre><code>  17,39%  python   umath.cpython-36m-x86_64-linux-gnu.so       [.] reduce_loop
  11,41%  python   umath.cpython-36m-x86_64-linux-gnu.so       [.] pairwise_sum_DOUBLE
   9,78%  python   multiarray.cpython-36m-x86_64-linux-gnu.so  [.] npyiter_buffered_reduce_iternext_ite
   9,24%  python   umath.cpython-36m-x86_64-linux-gnu.so       [.] DOUBLE_add
   4,35%  python   python3.6                                   [.] _PyEval_EvalFrameDefault
   2,17%  python   multiarray.cpython-36m-x86_64-linux-gnu.so  [.] _aligned_strided_to_contig_size8_src
   2,17%  python   python3.6                                   [.] lookdict_unicode_nodummy
   ...
</code></pre>
<p>The overhead of using <code>reduce_loop</code>, <code>pairwise_sum_DOUBLE</code> is dominating.</p>
<p>For <code>a[:,0]+a[:,1])</code>:</p>
<pre><code>   7,24%  python   python3.6                                   [.] _PyEval_EvalF
   5,26%  python   python3.6                                   [.] PyObject_Mall
   3,95%  python   python3.6                                   [.] visit_decref
   3,95%  python   umath.cpython-36m-x86_64-linux-gnu.so       [.] DOUBLE_add
   2,63%  python   python3.6                                   [.] PyDict_SetDef
   2,63%  python   python3.6                                   [.] _PyTuple_Mayb
   2,63%  python   python3.6                                   [.] collect
   2,63%  python   python3.6                                   [.] fast_function
   2,63%  python   python3.6                                   [.] visit_reachab
   1,97%  python   python3.6                                   [.] _PyObject_Gen
</code></pre>
<p>As expected: Python overhead plays a big role, a simple <code>DOUBLE_add</code> is used.</p>
<hr/>
<p>There are less overhead when calling <code>a.sum()</code></p>
<ul>
<li>for once,  <code>reduce_loop</code> isn't called for every row but only once, which means considerable less overhead.</li>
<li>no new resulting arrays are created, there is no longer need to write 1000 doubles to the memory.</li>
</ul>
<p>so it can be expected, that <code>a.sum()</code> is faster (despite the fact, that 2000 and not 1000 addition must be made - but as we have seen it is mostly about overhead and the actual work - the additions aren't responsible for the big share of the running time).</p>
<hr/>
<p>Data obtaining by running:</p>
<pre><code>perf record python run.py
perf report
</code></pre>
<p>and </p>
<pre><code>#run.py
import numpy as np
a=np.random.rand(1000,2)

for _ in range(10000):
  a.sum(axis=1)
  #a[:,0]+a[:,1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well for .sum() with axis vs without, with the axis has to generate an array of floats as long as your input, with an element for each row.  This means that it has to call <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">reduce()</a> 10,000 times along axis=1.  Without the axis argument it calculates the sum of every element into a single float, which is just one call to reduce through the flat representation of the array.</p>
<p>I'm not sure why the manual add function is faster, and I don't feel like digging through the source code but I think I have a pretty good guess.  I believe that that the overhead comes from it having to perform reduce across axis=1 for each row, so 10,000 separate calls to reduce.  In the manual add function, the axis split is performed just a single time when defining the parameters of the "+" function, and then each element of the split columns can be added together in parallel.</p>
</div>
<span class="comment-copy">no native here, all numpy array, no for loops, so everything is numpy!</span>
<span class="comment-copy">A small portion of the overhead is probably related to the pairwise summation implementation. Only a small portion, though - <code>prod</code> doesn't do the pairwise thing, as far as I'm aware, and <code>prod</code> runs in about 5/6 the time of <code>sum</code> in my tests. I <i>think</i> NumPy is also using SIMD for the <code>+</code> and not the <code>sum</code>, but I'm not yet sure.</span>
<span class="comment-copy">your "Multiplication" is doing something different… the others just use <code>p1</code> and basically ignore <code>p2</code></span>
<span class="comment-copy"><a href="https://github.com/numpy/numpy/blob/v1.15.3/numpy/core/src/umath/loops.c.src#L1662" rel="nofollow noreferrer">Here's the source</a> for the pairwise summation routine. The number of elements summed is small enough that the routine should immediately go into the straightforward non-pairwise loop case, but the code path still seems to have some overhead over the code path used for things like <code>prod</code>. As previously stated, this is only a small portion of the overhead relative to <code>+</code>.</span>
<span class="comment-copy">@beesleep Multiplication and addition aren't that different in floating point; If anything, multiplication is a bit easier. It's different for integers of course.</span>
<span class="comment-copy">Interesting, and slightly surprising to me as well. I would have expected some overhead, but not this much. Almost makes it seem worth it to implement a special case trivial reduction if the axis size is under some treshold.</span>
<span class="comment-copy">I agree it feels surprising. I noticed the same kind of overhead 10 x with linspace over arange</span>
<span class="comment-copy">Although a good guess, NumPy doesn't actually have to duplicate the array of floats. NumPy has an extensive memory view system, which allows it to store an array with a reference-counted pointer to the original buffer, the start, the length, and the stride. To create an axis or do fancy indexing, no data duplications are <b>ever</b> necessary... You can verify this by checking <code>a = np.arange(100); b = a[::-1]; a.ctypes.data == b.ctypes.data</code>, which checks if the pointers to the start of the arrays <code>a</code> and <code>b</code> are the same, and it will print true.</span>
<span class="comment-copy">You can also verify this by the same code, except with setting a value: <code>a = np.arange(100); b = a[::-1]; a[4] = 5; b[2]</code>, which will print 5, despite the value normally being 4.</span>
<span class="comment-copy">So the overhead doesn't come from splitting the array, but the addition function can indeed add the arrays in parallel, correct?  Which is faster than a ton of calls to reduce.</span>
<span class="comment-copy">Honestly I'd have to check the implementation to be sure, but it would surprise me if NumPy did it that way. Seems extremely inefficient, since it could just double the stride, increment 1 pointer by 8, call a highly optimized C add routine, and call it a day in both cases (obviously, it must do a lot more work, since indexing (especially fancy indexing) and working with potentially multi-dimensional arrays is quite complex).</span>
<span class="comment-copy">Wait... You're actually right. It calls reduce under the hood. Not 10,000 time, but still... Mind blown... <a href="https://github.com/numpy/numpy/blob/9d0225b800df3c2b0bffee9960df87b15527509c/numpy/core/src/multiarray/calculation.c#L519" rel="nofollow noreferrer">github.com/numpy/numpy/blob/…</a></span>
