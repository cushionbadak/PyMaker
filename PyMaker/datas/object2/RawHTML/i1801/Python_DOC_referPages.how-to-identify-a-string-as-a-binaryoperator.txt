<div class="post-text" itemprop="text">
<p>Perhaps this is an easy question, but I'm new to Python and haven't seen anyone else post anything similar to this. </p>
<p>We have a list:</p>
<pre><code>lst1 = ["5", "+", "1"]
</code></pre>
<p>or</p>
<pre><code>lst2 = ["10", "/", "2"]
</code></pre>
<p>How can one interpret this to: 5 + 1 or 10/2 ? I understand that you can write: int(lst2[0]) and then you would get 10, but how do you do the same with "+" or "/"?</p>
</div>
<div class="post-text" itemprop="text">
<p>Assuming you "know" that your list has three strings, with the first and last representing integers and the middle one representing one of a fixed set of operators, you just need a mapping from the operator to a function that implements it. For example:</p>
<pre><code>import operator

ops = {"+": operator.add, "-": operator.sub, "*": operator.mul, "/": operator.div}
lst1 = ["5", "+", "1"]
f = ops[lst1[1]]
operand1 = int(lst1[0])
operand2 = int(lst1[2])
result = f(operand1, operand2)
</code></pre>
<p>However, things get complicated once you start allowing more general inputs, as you need some logic for deciding what parts of the list represent what. For that, you need:</p>
<ol>
<li>A <em>grammar</em>, which identifies what role each element of your list plays</li>
<li>A <em>parser</em>, which uses the grammar to convert each string to a usuable value</li>
<li>An <em>interpreter</em>, which evaluates the thing produced by the parser to produce
 a final value.</li>
</ol>
<p>There may also be a <em>tokenizer</em>, which is what would convert a single string input like <code>"5 + 1"</code> into a list of tokens that the parser uses for its input.</p>
<p>Any further general discussion about how to define any of the 4 concepts defined above is far beyond the scope of Stack Overflow.</p>
</div>
<div class="post-text" itemprop="text">
<p>If I understand you right, here is a snippet you may start with:</p>
<pre><code>import operator
operators = {'+': operator.add, '-': operator.sub, '/': operator.truediv, '*': operator.mul}

first, op, second = lst
first, op, second = int(first), operators[op], int(second)
op(first, second)
</code></pre>
<p><code>operator</code> module contains operators as a functions, so you can map symbols to the operators. Note that Iâ€™ve used <code>truediv</code> for <code>/</code>, you may want to use variant which return int always</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't transform the string <code>"+"</code> to the operator <code>+</code> because operators are not things that <em>exist</em> at runtime. Operators only exist in code. You <em>can</em> map the string <code>"+"</code> to a function that takes two arguments and returns their sum, though. Functional equivalents for most operators exist in the <a href="https://docs.python.org/3/library/operator.html" rel="nofollow noreferrer"><code>operator</code></a> module:</p>
<pre><code>lst1 = ["5", "+", "1"]

import operator

op_table = {
    '+': operator.add,
    '-': operator.sub,
    '*': operator.mul,
    '/': operator.truediv
}

lhs = int(lst1[0])
op = op_table[lst1[1]]
rhs = int(lst1[2])

print('result:', op(lhs, rhs))  # output: 6
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use standard function eval()
<a href="https://www.journaldev.com/22504/python-eval-function" rel="nofollow noreferrer">https://www.journaldev.com/22504/python-eval-function</a></p>
<pre><code>lst1 = ["5", "+", "1"]
result1 = eval("".join(lst1))  # 6

lst2 = ["10", "/", "2"]
result2 = eval("".join(lst2))  # 5.0
</code></pre>
</div>
<span class="comment-copy">Do you want to implement a simple calculator in Python?</span>
<span class="comment-copy">No, not really. Just wondering how you transform "+" to be the binaryoperator +. That is removing the string. @voldmar</span>
<span class="comment-copy">This is a bit broad, as the question is basically "What is a parser, and how do I write one?" For example, you <i>could</i> write <code>int(lst2[0])</code>, but how do you know that the string is a valid argument for <code>int</code>, or that <code>int</code> is the right function to call?</span>
<span class="comment-copy">I don't think this is broad at all. Simply wondering how you can take "/" and make it to /. @chepner</span>
<span class="comment-copy">@Agentsmith2.0 For this very constrained toy example, see any of the provided answers. You don't simply convert an input string into a Python operator literal, though; you need to map it to an appropriate function first.</span>
<span class="comment-copy">operator.div didn't work for me, so I went with operator.truediv instead.</span>
<span class="comment-copy">Whether <code>/</code> corresponds to <code>div</code> or <code>truediv</code> in Python 2 depends on whether or not <code>from __future__ import division</code> was used. In Python 3, there is no <code>operator.div</code>; <code>truediv</code> always corresponds to <code>/</code> and <code>floordiv</code> corresponds to <code>//</code>.</span>
