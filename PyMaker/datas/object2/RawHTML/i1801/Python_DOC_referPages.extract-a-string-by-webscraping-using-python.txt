<div class="post-text" itemprop="text">
<p>Below is a portion of an HTML file: </p>
<p><img alt="" src="https://i.stack.imgur.com/N0757.png"/></p>
<p>I want to webscrap the highlighted lines only. This is portion of a large fie. For this portion, I tried:</p>
<pre><code>container5 = container1[1 ].findAll("strong")

container6 = (container5[6]).text
print(container6)
</code></pre>
<p>But the output was: </p>
<pre><code>Address:
</code></pre>
<p>How do I extract the string containing the address inside the <code>" "</code> portion of the image?</p>
</div>
<div class="post-text" itemprop="text">
<p>I like to parse this sort of thing using the python <code>split()</code> function.  The thing to notice is the recurring pattern around the data.</p>
<pre><code>...&lt;strong&gt;SOME-Field-Name:&lt;/strong&gt; ...
"The desired value"
&lt;br&gt; ...
</code></pre>
<p>This pattern gives you a place of leverage where the code can work, and thus presents an approach for some code:</p>
<pre><code>html = "... &lt;strong&gt;Address:&lt;/strong&gt;\n\" 1100 Space Park etc.\"\n&lt;br&gt;\n ..."

# extract the Address field, between it's heading and &lt;/br&gt;
field = html.split("Address:&lt;/strong&gt;")[1].split("&lt;")[0].strip()

# Trim away the quotes and whitespace
value = field.split("\"")[1].strip()
</code></pre>
<p>Outputs: </p>
<pre><code>&gt;&gt;&gt; value
'1100 Space Park etc.'
</code></pre>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#str.split" rel="nofollow noreferrer">split function</a> cuts the string up into a list, removing the part you split with.
So the first split gives <code>['... &lt;strong&gt;', '\n\" 1000 Space Park...' ]</code>, and we just take the 2nd item <code>[1]</code>.  We then re-split this with <code>&lt;</code>, which gives everything before the <code>&lt;br&gt;</code> and some other stuff we don't care about, so the first element is a keeper <code>[0]</code>. </p>
<p>We cleanup some whitespace with <code>strip()</code>, then de-quote the result.</p>
<p>Using this approach, you can fetch the other values too.  Probably best in a function.</p>
<pre><code>def getField(html, field_name):
    # TODO - add some error checking for when not found, etc.
    field = html.split(field_name+":&lt;/strong&gt;")[1].split("&lt;")[0].strip()
    value = field.split("\"")[1].strip()
    return value

address = getField(html, "Address")
size    = getField(html, "Gross SqFt")
power   = getField(html, "Total Power")
# etc.
</code></pre>
</div>
<span class="comment-copy">Only the word "address:" is inside the <code>&lt;strong&gt;</code> tag, the actual address is inside another element. It looks like you need to be looking inside <code>&lt;br&gt;</code> tags instead</span>
<span class="comment-copy">Do not post images of text, instead copy-and-paste the actual text directly into your post. Images of text are not easily parsable, searchable, or accessible.</span>
<span class="comment-copy">@G.Anderson <code>&lt;br&gt;</code> tags are always empty. The HTML is sub-optimally structured for parsing this data. Will need instead to get the text node following a <code>&lt;strong&gt;</code>.</span>
<span class="comment-copy">Thank you for your help. But there are thousands of other links of same format in the file that I am webscraping.  So I have to perform a for loop on the links. And, therefore, I don't think copying the HTML file is going to work in this case. Somehow, I have to find the tag that contains the text inside the string.</span>
