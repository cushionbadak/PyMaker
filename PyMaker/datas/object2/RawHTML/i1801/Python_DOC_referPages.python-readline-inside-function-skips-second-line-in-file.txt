<div class="post-text" itemprop="text">
<p>I'm an absolute beginner in the programming field. I'm doing some exercises from a book and there's something I don't understand.
I'm using a readline() command inside a function and then starting a for loop in main() to find the largest number in a file. The file has a list of numbers in each line: the largest number is in the second line, but for some reason the program skips the second line (which contains the largest number). This is the code:</p>
<pre><code>def reader(filename):
    nums = filename.readline()
    return(nums)

def main():
    filename = open("numbers.txt", 'r')
    largest = reader(filename)
    for line in filename:
        number = reader(filename)
        if number &gt; largest:
            largest = number

    print("The largest number is:", largest)

main()
</code></pre>
<p>But when I put the readline() in the main() function and change the parameter inside the loop things work fine:</p>
<pre><code>def helper(filename):

    nums = filename
    return(nums)

def main():

    filename = open("numbers.txt", 'r')
    largest = helper(filename.readline())
    for line in filename:
        number = helper(line)
        if number &gt; largest:
            largest = number

    print("The largest number is:", largest)

main()
</code></pre>
<p>There's obviously something that I'm missing but I don't know exactly what it is.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>for line in filename:</code> reads each line in the file.</p>
<p>Calling <code>readline()</code> while inside such a loop, as you do in the first code sample, will cause the <code>for</code> loop to miss that line, as it was consumed by <code>readline()</code> and is no longer available to be consumed by the <code>for</code> loop.</p>
<p>The second code sample does not have this problem, because you are no longer calling <code>readline()</code> inside of a <code>for line in file:</code> loop.</p>
</div>
<div class="post-text" itemprop="text">
<p>You are skipping all the even lines. First you read a line:</p>
<pre><code>largest = reader(filename)
</code></pre>
<p>then you read another one</p>
<pre><code>for line in filename:
</code></pre>
<p>note <code>line</code> contains now the second line. Finally, a 3d time:</p>
<pre><code>nums = filename.readline()
</code></pre>
<p>you completely disregard the second read, as you make no use of <code>line</code>. This of course will continue in the next loop - read the 4th line, disregard it and get the 5th etc.</p>
<p>Also note you did not strip newlines (reading a line leaves a <code>\n</code>) or converting to <code>int</code>, so you are comparing strings.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def main():
    filename = open("numbers.txt", 'r')
    largest = -1
    for line in filename:
        if int(line) &gt; int(largest):
            largest = line


    print("The largest number is:", largest)

main()
</code></pre>
</div>
<span class="comment-copy">Why do you need the readline to happen in a separate function? In the second case you're literally reading the line from the file, and passing it to a function which immediately returns it.</span>
<span class="comment-copy">You call a function with a <code>return</code> statement. You may find an answer in the <code>yield</code> statement.</span>
<span class="comment-copy">I was doing an exercise on modularisation and encapsulation (this is a much simpler version, of course) and something worked one way and not the other, and I couldn't understand why (now I do). The separate function in this version is not necessary, obviously, but it's part of the problem as I encountered it.</span>
<span class="comment-copy">Your <code>helper/reader()</code> function is not helping, it's obfuscating the fact that you're trying to simultaneously read from the file-object at two different points in the for-loop. Hence, odd lines go the first one (<code>for line in filename:</code>), even lines to the second (the <code>helper/reader()</code> call). Don't do that.</span>
<span class="comment-copy">By the way (not crucial, but still important to use the right terms): in your code <code>filename</code> is not a filename, but a <a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files" rel="nofollow noreferrer"><b><i>file object</i></b></a>, which is itself an iterator (which implicitly calls <code>readline()</code>). To avoid the confusion you got from misnaming it, typically in Python we would write <code>f = open("numbers.txt", 'r')</code> or more modern idiom <code>with open("numbers.txt", 'r') as f:</code></span>
<span class="comment-copy">Thanks for answering. It is confusing when you don't know why something doesn't work. But is equally confusing when something works and you don't know why.</span>
<span class="comment-copy">Thanks for your answer. It's very helpful.</span>
<span class="comment-copy">This does not really answer the question. If you have a different question, you can ask it by clicking <a href="https://stackoverflow.com/questions/ask">Ask Question</a>. You can also <a href="https://stackoverflow.com/help/privileges/set-bounties">add a bounty</a> to draw more attention to this question once you have enough <a href="https://stackoverflow.com/help/whats-reputation">reputation</a>. - <a href="/review/low-quality-posts/21342393">From Review</a></span>
<span class="comment-copy">@GrijeshChauhan How is this a "me too!" comment or a new question? It should include more explanation, but it appears to be an actual attempt to answer the question. I'm voting "looks OK" on this one.</span>
