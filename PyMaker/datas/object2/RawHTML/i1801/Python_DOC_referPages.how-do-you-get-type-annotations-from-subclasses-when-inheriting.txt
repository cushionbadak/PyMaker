<div class="post-text" itemprop="text">
<p>I am trying to build a typed dictionary class, similar to <code>NamedTuple</code> but with the ability to subclass said tuples. Unfortunately, I find that in the base constructor where I want enforce types, I do not have access to the type annotations of subclasses.</p>
<p>Here's a minimal example:</p>
<pre><code>class TypedDict:
  def __init__(self, **kwargs):
    print(self.__annotations__)

    for k, v in kwargs.items():
      # Check if k is in self.__annotations__
      # Check that v has the same type as self.__annotations__[k]
      pass

class A(TypedDict):
  field_a: int = 3 

class B(A):
  field_b: int = 3 
</code></pre>
<p>And on the console:</p>
<pre><code>&gt;&gt;&gt; a = A()
{'field_a': &lt;class 'int'&gt;}
&gt;&gt; b = B()
{'field_b': &lt;class 'int'&gt;}  # Where is 'field_a'?
</code></pre>
<p>How do I get the constructor in <code>TypedDict.__init__</code> to also see the annotations of <code>A</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>You're looking for <a href="https://docs.python.org/3/library/typing.html#typing.get_type_hints" rel="nofollow noreferrer"><code>typing.get_type_hints</code></a>, not <code>__annotations__</code>. <code>typing.get_type_hints</code> will merge the annotations of all classes in the MRO, as well as resolving string annotations.</p>
<pre><code>type_hints = typing.get_type_hints(type(self))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ah, I have a workaround solution using the class <code>mro</code>.</p>
<pre><code>class TypedDict:
  def __init__(self, **kwargs):
    annotations = {}
    for cls in self.__class__.mro():
        # __annotations__ is only present when the class has defined annotations.
        annotations.update(getattr(cls, "__annotations__", {}))
    print(annotations)

    for k, v in kwargs.items():
      # Check if k is in self.__annotations__
      # Check that v has the same type as self.__annotations__[k]
      pass

class A(TypedDict):
  field_a: int = 3 

class B(A):
  field_b: int = 3 
</code></pre>
<p>On the console:</p>
<pre><code>&gt;&gt;&gt; a = A()
{'field_a': &lt;class 'int'&gt;}
&gt;&gt; b = B()
{'field_a': &lt;class 'int'&gt;, 'field_b': &lt;class 'int'&gt;}
</code></pre>
</div>
