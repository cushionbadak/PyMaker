<div class="post-text" itemprop="text">
<p>I'm trying to implement multiprocessing counter in my script, but not sure if I'm doing things right, since results does not making any sense.</p>
<pre><code># Global shared variable 
total_bytes_written = multiprocessing.Value('i', 0)

# Worker method
def s3_put_worker(**kwargs):
    global total_bytes_written
    # local var that stores a data chunk length
    data_chunk_len = len(data_chunk)

    while not stop_event.is_set():
        # do some work
        # ...
        # The counter that sums shared_total_written variable with local var
        with total_bytes_written.get_lock():
            total_bytes_written.value += data_chunk_len

# I'm using ProcessPoolExecutor to start several Gevent thread pools that runs my worker method
</code></pre>
<p>Now after stopping the script I've got those weird results:</p>
<pre><code>2018-11-06 04:42:55,412; [s3_stress.s3_stress_runner] (MainProcess : MainThread) INFO - Total bytes written to storage: -1946157056
</code></pre>
<p>I suspect that I can't sum multiprocessing shared var with local method's var, but I can't find anything about this topic, and how to workaround the issue.</p>
<p>Thanks</p>
</div>
<div class="post-text" itemprop="text">
<p>It seems that your problem is from overflow: <code>Value('i', 0)</code> is a signed 32 bit integer, which can count up to 2147483647 (roughly 2GiB for byte counting).</p>
<pre><code>&gt;&gt;&gt; total_bytes_written = multiprocessing.Value('i', 0)
&gt;&gt;&gt; total_bytes_written.value += 2147483647  # 2GiB - 1B
&gt;&gt;&gt; total_bytes_written
&lt;Synchronized wrapper for c_int(2147483647)&gt;
&gt;&gt;&gt; total_bytes_written.value += 1
&gt;&gt;&gt; total_bytes_written
&lt;Synchronized wrapper for c_int(-2147483648)&gt;
</code></pre>
<p>The largest <a href="https://docs.python.org/3/library/array.html#module-array" rel="nofollow noreferrer">data type</a> for <code>Value</code> is <code>'Q'</code> for unsigned long long (at least 64bit). This can handle the range <code>[0, 18_446_744_073_709_551_615]</code> or up to 16EiB for byte counting. If you care about proper sign handling, the signed long long type <code>'q'</code> can still count up to 8EiB.</p>
<pre><code>&gt;&gt;&gt; total_bytes_written = multiprocessing.Value('q', 0)
&gt;&gt;&gt; total_bytes_written.value += 9223372036854775807  # 8EiB - 1B
&gt;&gt;&gt; total_bytes_written
&lt;Synchronized wrapper for c_long(9223372036854775807)&gt;
</code></pre>
</div>
<span class="comment-copy">You are using a fixed byte signed integer. It likely overflowed.</span>
<span class="comment-copy">Oh :). @MisterMiyagi maybe. But I was pretty sure that int32 (2147483647) is big enough to contain my counter</span>
<span class="comment-copy"><code>int32</code> is enough to count about 2 GiB, and an overflow to <code>-1946157056</code> would require about 2.2 GiB. I do not know what data you are handling, but it seems more likely than Python semantics stopping to work in a common situation. ;)</span>
<span class="comment-copy">Thanks @MisterMiyagi, do you know if python's shared variables supports number bigger than 1PB (petabyte), which is 1,125,899,906,842,580.00 in bytes</span>
