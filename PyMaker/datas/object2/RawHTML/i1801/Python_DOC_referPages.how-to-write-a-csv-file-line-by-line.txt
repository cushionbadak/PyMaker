<div class="post-text" itemprop="text">
<p>I am trying to scrape data from a website and I have collected 3 different type of information from the website. I have thousands of records in the 3 list but for simplicity, I am adding a few records. </p>
<pre><code>List1 = ['DealerName']
List2 = ['Person1','Person2']
List3 = ['crisp nori, hot rice, and cold fish','takeout,fancy presentation, piled']
</code></pre>
<p>I have to write an output <strong>csv file line by line</strong> with 3 columns(List1, List2, List3) and the list information for the 3 columns. The 'DealerName' is constant for all records. I am facing trouble because there are commas in List3 which is separating the information in individual columns(different cells). The desired output file should look like this</p>
<p><a href="https://i.stack.imgur.com/q6jO2.png" rel="nofollow noreferrer"><img alt="List item" src="https://i.stack.imgur.com/q6jO2.png"/></a></p>
<p>Thanks for the comments. Based on one of the comments, I made some modifications in the code and tried using the following code but it's not giving me the desired output. </p>
<pre><code>List1 = ['DealerName']
List2 = ['Person1','Person2']
List3 = ['crisp nori, hot rice, and cold fish','takeout,fancy presentation, piled']

Output_File = open("Output.csv", "w")
Output_File.write("List1,List2,List3")

import csv, itertools
rows = itertools.zip_longest([List1, List2, List3])
c = csv.writer(Output_File)
c.writerows(rows)

Output_File.close()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>In this particular case (in other words, not in the most general sense), specifying the first element of <code>List1</code> as the <code>fillvalue</code> argument when calling <code>itertools.zip_longest()</code> looks like it would make it work:</p>
<pre><code>import csv, itertools

List1 = ['DealerName']
List2 = ['Person1','Person2']
List3 = ['crisp nori, hot rice, and cold fish', 'takeout,fancy presentation, piled']

with open("Output.csv", "w", newline="") as Output_File:
    Output_File.write("List1,List2,List3\n")
    writer = csv.writer(Output_File)
    rows = itertools.zip_longest(List1, List2, List3, fillvalue=List1[0])
    writer.writerows(rows)
</code></pre>
<p>Contents of <code>output.csv</code> file afterward:</p>
<pre class="lang-none prettyprint-override"><code>List1,List2,List3
DealerName,Person1,"crisp nori, hot rice, and cold fish"
DealerName,Person2,"takeout,fancy presentation, piled"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use csv:</p>
<pre><code>import csv, itertools
rows = itertools.zip_longest(List1, List2, List3)
csvwriter.writerows(rows)
</code></pre>
<p>The csv module will automatically wrap strings containing comma in a quote, which will read fine.</p>
<p><strong>Edit:</strong></p>
<p>You can loop over the rows and output them with <a href="https://docs.python.org/3/library/csv.html#csv.csvwriter.writerow" rel="nofollow noreferrer">writerow</a> instead of writerows, and that would fulfill your requirement of doing this line by line.</p>
<p><strong>Edit 2:</strong>
I've fixed my answer. <code>itertools.zip_longest([List1, List2, List3])</code> should be <code>itertools.zip_longest(List1, List2, List3)</code></p>
<p>Also you're going to want a newline after your header so <code>Output_File.write("List1,List2,List3\n")</code> instead of <code>Output_File.write("List1,List2,List3")</code></p>
</div>
<div class="post-text" itemprop="text">
<p>Use pandas:</p>
<pre><code>import pandas as pd
df = pd.DataFrame([List1, List2, List3]).T 
df.to_csv('your.csv', index=False)
</code></pre>
<p>Pandas will automatically wrap strings containing comma in a quote, which will read fine.</p>
</div>
<span class="comment-copy">Take a look at the CSV modules <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer">https://docs.python.org/3/library/csv.html</a>. You need to wrap each item in quotes, but the CSV module will take care of doing this for you.</span>
<span class="comment-copy">I just had to copy Rocky Li's wording for kick's and giggle's, since it works for this answer to. You can use either Pandas or CSV. CSV is built-in to Python, and is easier to learn. Pandas is meant for working with datasets, and has a lot of additional functionality surrounding it.</span>
<span class="comment-copy">Hey, I tried with this code but it's throwing some error. As you described, I tried modifying a few lines but it's not giving me the desired result. I have edited the post based on your code.</span>
<span class="comment-copy">I've updated my answer</span>
<span class="comment-copy">Agree this is good, but does not seem to have the stated constraint of <code>line by line</code></span>
<span class="comment-copy">I understand that it's quite straightforward with a data frame using pandas but it's a requirement that I have to write the output line by line using file commands. Thanks for your answer though.</span>
