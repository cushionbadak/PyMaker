<div class="post-text" itemprop="text">
<p>A friend yesterday showed me the technique below for giving instance variables a default value in Python.</p>
<p>The class <code>Foo</code> has its own <code>bar</code> property, which is retrieved by default when looking up an attribute on an instance that does not exist. For instance, the following code snippet prints <code>4</code>✱.</p>
<pre><code>class Foo:
    bar = 4

    def __init__(self):
        pass

    def get_bar(self):
        return self.bar

    def set_bar(self, bar):
        self.bar = bar


print(Foo().get_bar())
</code></pre>
<p>Initially, I was surprised that this worked. I thought the machinery for "falling back to a definition on the class" that converts/evaluates/defines <code>foo_instance.get_bar</code> to a bound method on class <code>Foo</code> and makes <code>foo_instance.get_bar()</code> meaningful was specific to functions and would fail in some way for a non-function.</p>
<p>That is not the case. The above code <code>prints</code> for as if <code>bar</code> had been set via <code>self.bar = 4</code> in the <code>__init__</code> method.</p>
<p>Is this construction idiomatic? The only arguments I can think of against it are that it breaks structural equality, potentially hides attributes of an objects that are "logically there" when debugging, and could mutate global state unintentionally if the default value is stateful. </p>
<hr/>
<p>✱ The getter and setter are only being used to demonstrate that  <code>Foo.bar</code> is really intended to be a default value for <code>foo_instance.bar</code> and should not be interpreted as supporting the use of getters and setters in idiomatic Python.</p>
</div>
<div class="post-text" itemprop="text">
<p>We can let python do the hard work for us:</p>
<pre><code>class Foo:
    _bar = 4

    @property
    def bar(self):
        print('getting _bar')
        return self._bar

    @bar.setter
    def bar(self, value):
         print('setting _bar')
         self._bar = value

foo = Foo()
print(foo.bar)  # 4
foo.bar = 6
print(foo.bar)  # 6
</code></pre>
</div>
<span class="comment-copy">I would only say that it is "not pretty to do so", but you will get away with it.</span>
<span class="comment-copy">I would say that I've seen it, but I don't personally like the practice. I'd rather use a default-argument to a corresponding <code>__init__</code> parameter, using the <code>..., arg=None): ... if arg is None: arg = MutableType()</code> if you want a default mutable value</span>
<span class="comment-copy">It is not specific to functions. The mechanism is simple: functions are descriptor objects whose' <code>__get__</code> method does the binding. But it's the same machinery that resolve the actual attribute first, so <code>self.x</code> first check's the <i>object's namespace</i>, and if it doesn't find anything, it check's the classe's namespace. Once <code>x</code> is found there, it is either a normal attribute or maybe a descriptor, at which point the magic happens. See this: <a href="https://docs.python.org/3/howto/descriptor.html" rel="nofollow noreferrer">docs.python.org/3/howto/descriptor.html</a></span>
<span class="comment-copy">That doesn't exactly answer the question…?!</span>
<span class="comment-copy">Re-reading the question, I agree. unfortunately, I found the question unclear: " breaks structural equality, potentially hides attributes of an objects that are "logically there" when debugging, and could mutate global state unintentionally" does not mean much to me at least.  The only problem I saw with putting the value on the class was the way the value was retrieved was not very pythonic, so I provided a more pythonic way of doing it.  Perhaps I should have instead pointing OP at <a href="https://codereview.stackexchange.com">codereview.stackexchange.com</a> :)</span>
