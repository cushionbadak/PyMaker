<div class="post-text" itemprop="text">
<p>I am perplexed by Python's un-escaping of backslashes in commands passed to <code>os.system</code> on Ubuntu 18.04 (things work fine on CentOS). Consider this program:</p>
<pre><code>#!/usr/bin/env python
import os
import sys
import subprocess

def get_command(n):
    return "echo 'Should be %d backslashes: %s'" % (n, "\\" * n)

print("")
print("Using os.system directly:")
print("")
for n in range(1, 5):
    os.system(get_command(n))

print("")
print("Using subprocess.check_output:")
print("")
for n in range(1, 5):
    sys.stdout.write(subprocess.check_output(get_command(n), shell=True).decode('utf-8'))

print("")
print("Writing the bash code to a script and using os.system on the script:")
print("")
for n in range(1, 5):
    with open('/tmp/script.sh', 'w') as f:
        f.write(get_command(n))
    os.system('/bin/bash /tmp/script.sh')
</code></pre>
<p>When I run it on Ubuntu 18.04, I get this:</p>
<pre><code>Using os.system directly:

Should be 1 backslashes: \
Should be 2 backslashes: \
Should be 3 backslashes: \\
Should be 4 backslashes: \\

Using subprocess.check_output:

Should be 1 backslashes: \
Should be 2 backslashes: \
Should be 3 backslashes: \\
Should be 4 backslashes: \\

Writing the bash code to a script and using os.system on the script:

Should be 1 backslashes: \
Should be 2 backslashes: \\
Should be 3 backslashes: \\\
Should be 4 backslashes: \\\\
</code></pre>
<p>Note that it outputs one backslash where it should output two, and outputs two backslashes where it should output three or four!</p>
<p>However, on my CentOS 7 box things work as expected. On both machines the shell is <code>/bin/bash</code>. Here is the strace output of the python2.7 invocation of the script, just in case: <a href="https://gist.githubusercontent.com/mbautin/a97cfb6f880860f5fe6ce1474b248cfd/raw" rel="nofollow noreferrer">https://gist.githubusercontent.com/mbautin/a97cfb6f880860f5fe6ce1474b248cfd/raw</a></p>
<p>I guess the safest behavior for calling shell commands from Python is to write them to a temporary script file!</p>
</div>
<div class="post-text" itemprop="text">
<p>While I can agree that the behavior is strange, it is not inexplicable. There is a reason for the behavior, which has nothing to do with Python or <code>subprocess</code>. Exactly the same behavior is seen in a C program, using the <code>system</code> call to the OS (Linux) as with your Python program.</p>
<p>The reason has to do with your shell, though, but not exactly with <code>bash</code>. The reason is rather that when calling <code>os.system()</code> or the <code>subprocess.Popen()</code> family (including  <code>subprocess.check_output()</code>) with <code>shell=True</code>. The <a href="https://docs.python.org/3.7/library/subprocess.html" rel="nofollow noreferrer">documentation</a> states that <em>"On POSIX with shell=True, the shell defaults to /bin/sh."</em> Thus, the shell that invokes your <code>echo</code> command is not <code>bash</code> even if that is your default shell and the shell from which you are running your script/starting Python.</p>
<p>Instead, your command is executed by <code>/bin/sh</code> of your system. For a long time, this just pointed to <code>/bin/bash</code> (running in POSIX compliant mode) in almost all Linux versions, however, lately this has changed in some distributions, among them Ubuntu (but not CentOS apparently, since you do not see the same behavior there), which now have <code>/bin/sh</code> point at <code>bin/dash</code> instead:</p>
<pre><code>$ ll /bin/sh
lrwxrwxrwx 1 root root 4 sep 23 12:53 /bin/sh -&gt; dash*
</code></pre>
<p>Thus, your script is in fact executed by <code>dash</code> instead of <code>bash</code>. And "for efficiency" (see <code>man dash</code> at the prompt) <code>dash</code> has chosen to internally implement <code>echo</code> instead of using <code>/bin/echo</code> (used by <code>bash</code>). Unfortunately, the <code>dash</code> <code>echo</code> is not as potent as <code>/bin/echo</code> and has a different interpretation of string inputs, namely <code>dash</code> <code>echo</code> does it's escaping of a number of backslash commands, which in effect means it "swallows"
one extra backslash for you.</p>
<p>It is possible to make <code>/bin/echo</code> behave in the same way by specifying the <code>-e</code> option (see <code>man echo</code>) but unfortunately, it is not possible to have the <code>dash</code> builtin <code>echo</code> to <em>not</em> escape backslashes.</p>
<p>Now, this is the reason for what you see. A good way to avoid the problem is to <em>not</em> rely on the system shell invocation. If it is a single command, such as <code>echo</code> it is best to not invoke a shell at all, removing the <code>shell=True</code> flag. Or, if you need some shell specific functionality, control the invocation of the shell yourself. And, a third way, in this particular case, is to explicitly point to <code>/bin/echo</code> while executing, as that ensures that the "standard" <code>echo</code> is used:</p>
<pre><code>#!/usr/bin/env python3
import sys
import subprocess
import shlex

def get_command(n):
    return "echo 'Should be {} backslahes: {}'".format(n, "\\"*n)

print("")
print("Using subprocess.check_output:")
print("")
for n in range(1, 5):

    # Direct invocation:
    cmd = get_command(n)
    sys.stdout.write(subprocess.check_output(shlex.split(cmd)).decode())

    # Controlling invocation shell:
    bash_cmd = ['/bin/bash', '-c'] + [cmd]
    sys.stdout.write(subprocess.check_output(bash_cmd).decode())

    # Using shell=True but point to /bin/echo
    echo_cmd = '/bin/' + cmd
    sys.stdout.write(subprocess.check_output(echo_cmd, shell=True).decode())
</code></pre>
<p>Note that when used without <code>shell=True</code> the command should be a <code>list</code> and not a string. This can be <a href="https://docs.python.org/3/library/shlex.html" rel="nofollow noreferrer">shlex.split()</a> as shown.</p>
<p>Of these approaches, the first one (direct <code>echo</code> invocation) is preferred, due to <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="nofollow noreferrer">security concerns</a>, if there is any chance of some parameters coming from untrusted sources. In that case, however, <code>shlex.split()</code> should also not be used, as it opens up the same security vulnerabilities.</p>
</div>
<span class="comment-copy">Maybe also mention <code>printf</code> as a portable and more versatile command than <code>echo</code>.</span>
<span class="comment-copy">@tripleee Well, the question does not mention that, and I am not good enough at shell scripting to know how they differ and how to handle them, so I guess I'll have to pass on that, even though I am sure you are correct. :-)</span>
<span class="comment-copy">Makes sense! I was aware of the dash shell being used as the default shell in Ubuntu, but did not think that Python would use /bin/sh instead of the default shell of the current user.</span>
