<div class="post-text" itemprop="text">
<p>So, I have a variable that outputs either a 0 or 1. Now, I want to run it 10,000 times and get the average of it.</p>
<pre><code>import random

def roll_dice():

    available = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]

    x = random.sample(available, 1)
    del available[x[0]]
    y = random.sample(available, 1)
    z = x[0] + y[0]

    if z == 7:
        count = 1
    else:
        count = 0

    print(z)
    print(count)
    return count

roll_dice() 
</code></pre>
<p>So basically, I want to know what what the chance is that my dice roll returns 7. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer">random.choices()</a> to create 10000 6-sided dice two times, - <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip()</a>
 them, <a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">sum()</a> each <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">tuple</a> and feed it into <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter</a>
to count it. See the dice example for code comments that explain the code a bit.</p>
<hr/>
<h2>Coint-toss (0,1) example for 10k tosses of 2 coins and summed value:</h2>
<pre><code>from collections import Counter
import random

random.seed(42)
r = range(2)   
c = Counter( (map(sum, ( zip(random.choices(r,k=10000),random.choices(r,k=10000))))))
sumall = sum(c.values())
for k,v in c.most_common():
    print(f"Chance for {k:&gt;2}: {v:&gt;5} out of {sumall} = {v / sumall * 100:2.2f}%")
</code></pre>
<p>Output:</p>
<pre><code>Chance for  1:  4989 out of 10000 = 49.89%   # about 50%
Chance for  2:  2540 out of 10000 = 25.40%   # about 25%
Chance for  0:  2471 out of 10000 = 24.71%   # about 25%
</code></pre>
<p>Math:</p>
<pre><code>A    B           # for summed values:
0    0    25%    
1    0    25%    # combine it with the one below
0    1    25%    # combine it with the one above
1    1    25% 
</code></pre>
<p>You get 25% for 0, 25% for 2 and 50% for 1.</p>
<hr/>
<h2>6-sided dice example for 10k of 2 dice rolled and summed:</h2>
<pre><code>from collections import Counter
import random

random.seed(42)

r = range(1,7)  
c = Counter( (map(sum, ( zip(random.choices(r,k=10000),random.choices(r,k=10000))))))
# explanation of the last code line:
#   random.choices(r,k=10000) creates 10000 random numbers between 1 and 6
#     [1,2,4,...]   and [6,1,6,...]
#   zip takes 2 such 10k lists and makes 10k tuples 
#     [ (1,6),(2,1),(4,6) ... ]
#   map( sum, zip( ...) ) applies sum() to all 2-tuples
#     [7,3,10,...]
#   Counter creates a dict with the sum als key and counts how often it occures

# the rest is just pretty printing:
print(c)
sumall = sum(c.values())

for k,v in c.most_common():
    print(f"Chance for {k:&gt;2}: {v:&gt;5} out of {sumall} = {v / sumall * 100:2.2f}%")
</code></pre>
<p>Output:    </p>
<pre><code>Counter({ 7: 1673, 8: 1406, 6: 1372,  5: 1090, 9: 1089, 10: 823, 4: 821, 
         11:  591, 3:  570, 2:  291, 12:  274})

Chance for  7:  1673 out of 10000 = 16.73%   # thats about the % of your dice/binary logic
Chance for  8:  1406 out of 10000 = 14.06%
Chance for  6:  1372 out of 10000 = 13.72%
Chance for  5:  1090 out of 10000 = 10.90%
Chance for  9:  1089 out of 10000 = 10.89%
Chance for 10:   823 out of 10000 = 8.23%
Chance for  4:   821 out of 10000 = 8.21%
Chance for 11:   591 out of 10000 = 5.91%
Chance for  3:   570 out of 10000 = 5.70%
Chance for  2:   291 out of 10000 = 2.91%
Chance for 12:   274 out of 10000 = 2.74%
</code></pre>
<hr/>
<p>Doku:</p>
<ul>
<li><a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="nofollow noreferrer">collections.Counter(...)</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">zip(...)</a></li>
<li><a href="https://docs.python.org/3/library/random.html#random.choices" rel="nofollow noreferrer">random.choices(population, weights=None, *, cum_weights=None, k=1)</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#sum" rel="nofollow noreferrer">sum(...)</a></li>
<li><a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">map(function,...)</a></li>
<li><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="nofollow noreferrer">tuple(...)</a></li>
</ul>
<p>Formatting: <a href="https://docs.python.org/3/library/string.html#formatspec" rel="nofollow noreferrer">format mini language</a> to align the numbers in the output ( <code>{k:&gt;2}</code>, <code>{v:&gt;5}</code>, <code>{v / sumall * 100:2.2f}</code> )</p>
</div>
<div class="post-text" itemprop="text">
<p>Well, to execute the roll 10,000 times, you could use a for loop as such:</p>
<pre><code>for count in range(0,10001):
    # random script here
</code></pre>
<p>One way to find the average would be to include an if statement within said loop, such as:</p>
<pre><code>avg = 0
if z == 7:
    count = 1
    if count == 1:
        avg += 1
else:
    count = 0
avg = (avg // 10000)
return avg
</code></pre>
<p>Hope that helps.</p>
<p>Edit: Just realized that you have a variable named "count" as well. I'm unsure if that would interfere with the loop, so if you encounter any problems, try renaming the variable.</p>
</div>
<span class="comment-copy">why not <code>x,y = random.sample(available, 2)</code> ? sample makes sure it does not draw the same one twice. or use <code>z = sum(random.sample(available,2))</code> directly?</span>
<span class="comment-copy">Your dice roll returns 0 or 1, the chance of it returning 7 is zero and you do not need any averages to know that.</span>
<span class="comment-copy">How would the whole thing look?</span>
<span class="comment-copy">The for loop would begin at the start of the roll_dice function and run through to where count = 0. If you use my code, the avg = ... and return statement should be outside the for loop.  However, Patrick has much more experience than I do and likely has a much better solution than mine. Just a heads up.</span>
