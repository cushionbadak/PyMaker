<div class="post-text" itemprop="text">
<p>input:</p>
<pre><code>5
30
50
10
70
65
</code></pre>
<p>5 is how many numbers follow after.</p>
<p>My code:</p>
<pre><code>n = int(input())
list = []
i = 0
while len(list) &lt; n:
    integer = int(input())
    list.append(integer)
    i = i + 1
    minList = min(list)
    integers = list[i - 1] - minList
    print(integers)
</code></pre>
<p>I'm suppose to subtract the smallest number from the 5 integers.</p>
<p>The correct output:
20
40
0
60
55</p>
<p>My output:
0
20
0
60
55</p>
<p>I understand why my output is wrong since the smallest number is 20 until 10 is inputed, but I don't know how to correct it. I tried different ways, but none of them work. How do I subtract the smallest number from each integer?</p>
</div>
<div class="post-text" itemprop="text">
<p>Collect all the input first, then find the minimum value and print the numbers.</p>
<pre><code>n = int(input())
numbers = []
while len(numbers) &lt; n:
    integer = int(input())
    numbers.append(integer)
smallest = min(numbers)
for number in numbers:
    print number - smallest
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>size = int(input())
lst = [int(input()) for _ in range(size)]
m = min(lst)
res = [abs(n - m) for n in lst]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Get the inputs to a list. Take minimum of this list using <code>min()</code> and then subtract minimum value from each of the list elements:</p>
<pre><code>n = int(input())                  # Read number of numbers
lst = []

for _ in range(n):
    lst.append(int(input()))      # Append to list

min_value = min(lst)              # Take the minimum number
final_lst = [abs(x-min_value) for x in lst]  # Subtract minimum from each number
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This looks like a default puzzle for sites like Hackerrank ... take all the inputs , then perform your operations on all inputs. Do not meddle with data while still gathering inputs (unless it makes sense to do so).</p>
<p>A nice way of getting all the data is:</p>
<pre><code>n = int(input())    # get how many inputs follow

# get n inputs, perform the int() conversion, store as list.
data = list(map(int, (input().strip() for _ in range(n))))

# calculate the min value
min_value = min(data)

# print all reduced values in order each on one line
print( *[x-min_value for x in data], sep = "\n")
# or comma seperated:
print( *[x-min_value for x in data], sep = ",")
</code></pre>
<p>Output:</p>
<pre><code># print with sep="\n"
20
40
0
60
55

# print with sep=","
20,40,0,60,55
</code></pre>
<p>Read the doku for <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer">map()</a>, <a href="https://docs.python.org/3/library/functions.html#int" rel="nofollow noreferrer">int()</a>, <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer">min()</a> and look at <a href="https://docs.python.org/3/library/functions.html" rel="nofollow noreferrer">Built in functions</a>: do not use those as names for your variables, neither use <code>list</code>,<code>dict</code>,<code>set</code>,<code>tuple</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>l = list()
for _ in range(int(input())):
    l.append(int(input()))
xmin = min(l)
print(*[x - xmin for x in l])
</code></pre>
<p>Output:</p>
<pre><code>C:\Users\Documents&gt;py test.py
5
30
50
10
70
65
20 40 0 60 55
</code></pre>
</div>
<span class="comment-copy">Your indentation if off - currently all is below the while list - the code you use there makes no sense and would throw plenty of errors. Also: dont name your variables after built ins - the name <code>list</code> is already taken by the datastructure. Use <code>data</code>, <code>numbers</code> or call it <code>hugo</code> so you do not shadow said built ins</span>
<span class="comment-copy">What is the purpose of i = 0?</span>
<span class="comment-copy">It was copied from the original code and I forgot to remove it.  I'll remove it now.</span>
