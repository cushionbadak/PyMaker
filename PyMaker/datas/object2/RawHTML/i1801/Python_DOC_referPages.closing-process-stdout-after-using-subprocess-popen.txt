<div class="post-text" itemprop="text">
<p>Assume using <code>subprocess.Popen()</code> method to run a basic Shell command - <code>'ls -l'</code> which gives a list of files in the CWD. Your code will go something like this.</p>
<pre><code>from subprocess import Popen,PIPE
p=Popen(['ls','-l'],stdout=PIPE)
print p.communicate()[0]
p.stdout.close()
</code></pre>
<p>Instead of multiple lines, you decide to put it in a single line and end up with</p>
<pre><code>print Popen(['ls','-l'],stdout=PIPE).communicate()[0]
</code></pre>
<p>I don't see where the <code>p.stdout.close()</code> fits here. Is there any way I could close the stdout of this subprocess? I am using <code>Python 2.6</code>. I know about <code>check_output()</code> in Python 2.7 but I have to stick to 2.6. Is there any potential security or performance issue that I might end up with if I keep opening the output PIPE streams and not closing them?</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Probably you can use a with statment for auto close and write the code using oneliner. But before that some ground work can be done. Check out the below code</strong>.</p>
<pre><code>from subprocess import Popen

class MyPopen(Popen):

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        if self.stdout:
            self.stdout.close()
        if self.stderr:
            self.stderr.close()
        if self.stdin:
            self.stdin.close()
        # Wait for the process to terminate, to avoid zombies.
        self.wait()

if __name__ == '__main__':
    with MyPopen(['ls','-l'],stdout=PIPE) as p:
        print(p.communicate()[0])
</code></pre>
</div>
<span class="comment-copy">Not sure about security implications, but you could write yourself a context manager to not have to call close by yourself all the time. In there you can even have conditional code paths depending on your version of Python.</span>
<span class="comment-copy">It's a situation where I cannot go for context managers. I need to call a certain process repeatedly.</span>
<span class="comment-copy">If <code>Popen</code> is a context manager already, you probably should call the parent methods of <code>__enter__</code> and <code>__exit__</code> as well (or not, depending on implementation).</span>
<span class="comment-copy">This is working fine. I found out that check output here: <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="nofollow noreferrer">docs.python.org/3/library/â€¦</a> from python 2.7+ does what I really intended to. It returns the output which can be captured in variables.</span>
