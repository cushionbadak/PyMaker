<div class="post-text" itemprop="text">
<p>I'm reading in text files from the command line and I'm trying to produce output as follows...
<a href="https://i.stack.imgur.com/0hT6P.png" rel="nofollow noreferrer">Desired output given these command line arguments</a></p>
<p>Essentially, I want to read in files from the command line; take the first line from each file &amp; print them on one line separated by a tab. Take the second line from each file &amp; print them on the next line separated by a tab &amp; so on.</p>
<p>This is the best code I've come up with (<strong>I'm a beginner and I've tried looking at other responses for far too long; glob &amp; os hasn't been helping me understand how to do this; I'd just like to use basic loops and opening of files to do this</strong>):</p>
<pre><code>import sys
l = []
list_files = sys.argv[:1]

for fname in list_files:
  open(fname) as infile:
    for line in infile:
      line = line.strip()
      if line == '':
        l.append("''")
      else:
        l.append(line)

print(l) # List of all appended animals. Not in the right order 
#(takes all names from one file, then all the names from the 
#next instead of taking one line from every file on each iteration)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is a minimally changed version that should work.</p>
<pre><code>import sys
from itertools import zip_longest

files = []
list_files = sys.argv[:1]

for fname in list_files:
  with open(fname) as infile:  # Don't forget the `with`!
    l = []
    for line in infile:
      line = line.strip()
      if line == '':
        l.append("''")
      else:
        l.append(line)
    files.append(l)  # list of lists

for lines in zip_longest(*files, fillvalue=''):  # transpose list of lists
  print(*lines, sep='\t')  # separate with tabs.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The best way to open files in python is with <code>with</code>. More information can be found at <a href="https://www.pythonforbeginners.com/files/with-statement-in-python" rel="nofollow noreferrer">https://www.pythonforbeginners.com/files/with-statement-in-python</a>. Anyways:</p>
<pre><code>import sys

if len(sys.argv) != 3:
    sys.exit(1)

filename1 = sys.argv[1]
filename2 = sys.argv[2]

with open(filename1, 'r') as file1, open(filename2, 'r') as file2:
        for line1, line2 in zip(file1, file2):
            print(line1.strip(), line2.strip(), sep='\t')
</code></pre>
<p>This can be changed to allow for more than two files:</p>
<pre><code>import sys

if len(sys.argv) != 3:
    sys.exit(1)

filenames = sys.argv[1:]

all_lines = []

for filename in filenames:
    with open(filename, 'r') as file:
        all_lines.append([l.strip() for l in file.readlines()])

for line in zip(*all_lines):
    print(*line, sep='\t')
</code></pre>
</div>
<span class="comment-copy">Please don't post text/code as images. It makes questions harder to search for, and it's harder to test answers.</span>
<span class="comment-copy">Not working. It prints one word down a column. It should print a word from a file on one line, followed by a tab, then it should print a corresponding word (or empty string if there isn't a word to print) from the next file. First printed line should contain the first word from the first file, a tab, the first word from the second file and so on. Second printed line should contain the second word from the first file, a tab, the second word from the second file and so on.</span>
<span class="comment-copy">@Mezza oops, minor typo on the next-to-last line. Should have been <code>*files</code>, not <code>*l</code>. Try it now.</span>
<span class="comment-copy">@Mezza the files being different lengths is a new requirement. You can use <code>zip_longest</code> with a <code>fillvalue</code> instead of <code>zip</code> for that.</span>
<span class="comment-copy">Do you know how to do this without the zip function and for loops? I've been wondering.</span>
<span class="comment-copy">@Mezza I'm not sure what you're asking now. Can it be done without for loops and without zip? Yes. You could use while loops or comprehensions, or even recursion. I could probably do the whole thing with lambdas. Could the zip function be replaced with <a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow noreferrer">its implementation</a>? Yes again.</span>
<span class="comment-copy">That solution only works with two files though. It won't work if there are three or more.</span>
<span class="comment-copy">You're right, I'll edit.</span>
<span class="comment-copy">Seems to stop working when the files have different lengths. Should stop if all the files are empty.</span>
