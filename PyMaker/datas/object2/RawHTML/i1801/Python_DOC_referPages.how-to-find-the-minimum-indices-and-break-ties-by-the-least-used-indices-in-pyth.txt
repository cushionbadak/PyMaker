<div class="post-text" itemprop="text">
<p>I have a numpy array like the following:</p>
<pre><code>A = np.array([[1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 5, 1, 1, 1],
              [1, 1, 1, 1, 3, 3, 1, 1],
              [1, 1, 1, 1, 1, 1, 2, 1],
              [1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 4, 1, 1]])
</code></pre>
<p>I am looking for the minimum indices in each column. I found this using <code>numpy.argmin</code> as follows:</p>
<pre><code>I = np.zeros(A.shape[1], dtype=np.int64)
for j in range(A.shape[1]):
    I[j] = np.argmin(A[:, j])
</code></pre>
<p>This gives me <code>I = [0, 0, 0, 0, 0, 0, 0, 0]</code>. Since there are ties, I could obtain the following: <code>I = [0, 1, 2, 3, 4, 0, 5, 1]</code>, where I break the ties by the index that is least used (from the previous indices). </p>
<p>In more details:</p>
<ul>
<li>For <code>j=0</code>, we have <code>np.argmin(A[:, 0]) in [0, 1, 2, 3, 4, 5]</code> and, say, we choose <code>np.argmin(A[:, 0]) = 0</code>. </li>
<li>For <code>j=1</code>, we have <code>np.argmin(A[:, 1]) in [0, 1, 2, 3, 4, 5]</code> and we have to choose the minimum index from <code>[1, 2, 3, 4, 5]</code> since these indices are the least used (we already choose <code>np.argmin(A[:, 0]) = 0</code> for <code>j=0</code>). Say, we choose <code>np.argmin(A[:, 1])=1</code>. </li>
<li>For <code>j=2</code>, we have <code>np.argmin(A[:, 2]) in [0, 1, 2, 3, 4, 5]</code> and we have to choose the minimum index from <code>[2, 3, 4, 5]</code> since these indices are the least used. </li>
<li>We continue in this way... </li>
<li>For <code>j=5</code>, we have <code>np.argmin(A[:, 5]) in [0, 1, 3, 4]</code> and we have to choose the minimum index from <code>[0, 1, 3, 4]</code> since these indices are the least used. Say we choose <code>np.argmin(A[:, 5])=0</code>.</li>
<li>For <code>j=6</code>, we have <code>np.argmin(A[:, 6]) in [0, 1, 2, 4, 5]</code> and we have to choose from <code>[5]</code> since these indices are the least used. We choose <code>np.argmin(A[:, 6])=5</code>.</li>
<li>For <code>j=7</code>, we have <code>np.argmin(A[:, 7]) in [0, 1, 2, 3, 4, 5]</code> and we have to choose from <code>[1, 2, 3, 4, 5]</code> since these indices are the least used. Say we choose <code>np.argmin(A[:, 7])=1</code>.</li>
</ul>
<p>I hope it is clear. My question is how to find the minimum indices and break ties by the least used indices in Python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You could use <a href="https://docs.python.org/3/library/functions.html#min" rel="nofollow noreferrer">min</a> combined with a dictionary for keeping the counts of each index:</p>
<pre><code>import numpy as np

A = np.array([[1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 5, 1, 1, 1],
              [1, 1, 1, 1, 3, 3, 1, 1],
              [1, 1, 1, 1, 1, 1, 2, 1],
              [1, 1, 1, 1, 1, 1, 1, 1],
              [1, 1, 1, 1, 1, 4, 1, 1]])

counts = {}
I = np.zeros(A.shape[1], dtype=np.int64)
for j in range(A.shape[1]):
    _, _, i = min([(v, counts.get(i, 0), i) for i, v in enumerate(A[:, j])])
    counts[i] = counts.get(i, 0) + 1
    I[j] = i

print(I)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>[0 1 2 3 4 0 5 1]
</code></pre>
<p>The idea is to create the following key: <code>(value, count of index, index)</code>, and then use the normal comparison of tuples, so if the values are equal the one with less counts of the corresponding index will be selected, if both counts are equal get the one with lower index will be selected.</p>
</div>
<span class="comment-copy">I don't follow what you mean by "minimum" or "least used" indices.  Isn't the minimum index always going to be 0?  And aren't the remaining indices equally as unused?</span>
<span class="comment-copy">The minimum index could be 0 or 1 etc. since we have ties in the matrix. For the first time (first column), all indices are unused. Thus, the minimum index for the first column can be any unused index.</span>
<span class="comment-copy">Python indices start with 0... What am I missing?  Are you overloading "index"?  Does your example do what you want or does it not do what you want?  If your example does what you want, are you trying to improve efficiency?</span>
