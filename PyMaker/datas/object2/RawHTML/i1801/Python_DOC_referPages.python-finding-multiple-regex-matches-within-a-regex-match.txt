<div class="post-text" itemprop="text">
<p>I am trying to use re.sub() to change all html tags <code>&lt;</code> and <code>&gt;</code> to <code>{</code> and <code>}</code>. Here's the catch: I only want to change the matches between <code>&lt;table</code> and <code>&lt;/table&gt;</code>. </p>
<p>I can't for the life of me find a regex tutorial or post where one is able to change every regex match, but only between two other regex matches. I've looked at positive/negative lookahead and lookbehind tutorials, etc. but no luck. It's been a good few hours of searching before deciding to post. </p>
<p>Here is the best I've got so far:</p>
<pre><code>(?&lt;=&lt;table)(?:.*?)(&lt;)(?:.*)(?=&lt;\/table&gt;)
</code></pre>
<p>This will match one "&lt;" between the table begin and end tags, but I don't know how to get it to match more than one. I've played around with making the any-character groups lazy or not lazy, etc. but no luck.</p>
<p>The point of all this is, I have a string with lots of HTML and I want to keep all of the HTML tags within tables, as well as the tables themselves.</p>
<p>My current plan is to change all of the tags within tables (and the table tags themselves) to either { or }, then delete all HTML tags &lt; and &gt; in the entire document, then change all { and } back to &lt; and &gt;. Doing this should preserve the tables (and any other tags inside).</p>
<p>Example of Input:</p>
<pre><code>&lt;font style = "font-family:inherit&gt;
&lt;any other HTML tags&gt;

random text

&lt;table cellpadding="0" cellspacing="0" style="font-family:times new 
roman;font-size:10pt;width:100%;border-collapse:collapse;text-align:left;"&gt;
&lt;tr&gt;
&lt;td colspan="3"&gt;
&lt;font style="font-family:inherit;font-size:12pt;font- 
weight:bold;"&gt;washington, d.c. 20549&lt;/font&gt;
random text
&lt;any other HTML tags within table tags&gt;
&lt;/td&gt;
&lt;/table&gt;

random text

&lt;font style = "font-family:inherit&gt;
</code></pre>
<p>Example of Output:</p>
<pre><code>&lt;font style = "font-family:inherit&gt;
&lt;any other HTML tags&gt;

random text

{table cellpadding="0" cellspacing="0" style="font-family:times new 
roman;font-size:10pt;width:100%;border-collapse:collapse;text-align:left;"}
{tr}
{td colspan="3"}
{font style="font-family:inherit;font-size:12pt;font- 
weight:bold;"}washington, d.c. 20549{/font}
random text
{any other HTML tags within table tags}
{/td}
{/table}

random text

&lt;font style = "font-family:inherit&gt;
</code></pre>
<p>Thank you,
Grog</p>
</div>
<div class="post-text" itemprop="text">
<p>As Serge mentioned, this is not really a problem you want to tackle with a single regular expression, but with multiple regular expressions and some python magic:</p>
<pre><code>def replacer(match):  # re.sub can take a function as the repl argument which gives you more flexibility
    choices = {'&lt;':'{', '&gt;':'}'}  # replace &lt; with { and &gt; with }
    return choices[match.group(0)]

result = []  # store the results here
for text in re.split(r'(?s)(?=&lt;table)(.*)(?&lt;=table&gt;)', your_text): # split your text into table parts and non table parts
    if text.startswith('&lt;table'): # if this is a table part, do the &lt;&gt; replacement 
        result.append(re.sub(r'[&lt;&gt;]', replacer, text))
    else: # otherwise leave it the same
        result.append(text)
print(''.join(result)) # join the list of strings to get the final result
</code></pre>
<p>check out the documentation for using a function for the <code>repl</code> argument for <code>re.sub</code> <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">here</a></p>
<p>And an explanation of the regular expressions:</p>
<pre><code>(?s)        # the . matches newlines 
(?=&lt;table)  # positive look-ahead matching '&lt;table'
(.*)        # matches everything between &lt;table and table&gt; (it is inclusive because of the look-ahead/behinds)   
(?&lt;=table&gt;) # positive look-behind matching 'table&gt;'
</code></pre>
<p>Also note that because <code>(.*)</code> is in a capture group, it is included in the strings output by <code>re.split</code> (see <a href="https://docs.python.org/3/library/re.html#re.split" rel="nofollow noreferrer">here</a>)</p>
</div>
<div class="post-text" itemprop="text">
<p>Don't be too hard on yourself. I am not sure is it possible in one shot with standard re sub. In fact, I think it is either not possible or highly complicated. For example custom functions in replace (you can stuff a lot of custom functionality in a your custom function, up to whole html parser) </p>
<p>Instead I highly recommend a simple solution is split and reassemble with split/join, or, may be, you would settle on a sequence of re replaces.</p>
<p>Assuming one table <code>l = s.split('table&gt;'); l = [1]</code> will give you table content 
and l.split(. A multitable version is below</p>
<pre><code>def curlyfy_el(s, tag='table'):

    return ('{%s' % tag).join(
                        [ ('{/%s}' % tag).join(
                                   [y if i != 0 else y.replace("&lt;",  "{").replace("&gt;", "}")
                                 for i, y in enumerate(x.split( '&lt;/%s&gt;' % tag, 1)) 
    for x in s.split('&lt;%s' % tag) ])
</code></pre>
<p>Sligty more readable</p>
<pre><code>def curlyfy_el(s, tag='table'):
    h, *t = s.split('&lt;%s' % tag)  # stplit on some pretable text and fragments starting with table
    r = [h]
    for x in t:
        head, *tail = x.split('&lt;/%s&gt;' % tag, 1)  # select table body and rest, 1 is to keep duplicate closure of tag in one str
        head = head.replace("&lt;", "{")
        head = head.replace("&gt;", "}")
        r.append( ('{/%s}' % tag).join([head, *tail]))
    return ('{/%s}' % tag).join(r)
</code></pre>
<p>Generally for handling the HTML best to use some designated parsing libraries such as beautiful soup, the ad -hoc code will fail on many corner cases.</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use the following regex to match and then replace with <code>Group 1</code>:</p>
<pre><code>[\s\S]*(&lt;table[\s\S]*?&lt;/table&gt;)[\s\S]*
</code></pre>
<p>This will match anything before <code>'&lt;table'</code>, then create a <code>Group 1</code> with the table content, and then match everything after that.</p>
<p>Replace with:</p>
<pre><code>$1
</code></pre>
<p>That will give you only the table with content.</p>
</div>
<span class="comment-copy">Please give an example of your html and what you want after replacing.</span>
<span class="comment-copy">I just edited with example input and output. Thank you for letting me know, I appreciate it.</span>
<span class="comment-copy">Thank you for the coding example Bungi, it worked perfectly! I'm also very happy to have learned something new from looking at your code, as I'm relatively new to Python (and programming in general), learning how to apply new methods is always great.</span>
<span class="comment-copy">Hi Serge,  Thank you for your response, I appreciate it. I tried your method however it's difficult to use because there could be any number of tables in the file and when working with lists that could have any number of values, it starts to get messy with the rest of my coding. I'm sure that if I had more experience, I could get it to work, but I'm just not quite there yet.</span>
<span class="comment-copy">enhanced for multitable arrays</span>
<span class="comment-copy">Hi Poul,  I tried this method however it doesn't quite get at what I'm asking. I wanted to replace all HTML tags within each table with a different type of tag, but leave all HTML tags outside every table as-is. I appreciate your response though!</span>
