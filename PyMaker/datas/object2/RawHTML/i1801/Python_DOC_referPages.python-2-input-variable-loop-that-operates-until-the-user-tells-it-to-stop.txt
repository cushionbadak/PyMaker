<div class="post-text" itemprop="text">
<p>The loop starts with two variables, let's call them X and Y, both at 0. The user is prompted to enter a number to add to X, then a number to add to Y. The loop repeats itself, letting the user continue to add to both variables, <em>until</em> the user wants it to stop -- I guess they could enter 'add' as one of the inputs?</p>
<p>I also need it to ask for the input <em>again</em> if the user inputs anything other than a digit, but only if it's also not 'add'. If it's 'add', the loop ends, and both totals are displayed. If the input is a float or int, the loop proceeds. Otherwise, it prompts the input again. And this is for each of the two inputs.</p>
<p>I can do either of these things separately, but I'm having trouble incorporating both requirements into the same loop structure.</p>
<p>So far, my code basically looks like this:</p>
<pre><code>while (x != 'add') and (y != 'add'):
    # ask input for x
    if x != 'add':
        #ask input for y
        if (x != 'add') and (y != 'add'):
            # operations that add inputs to running variables
        else:
            pass
    else:
        pass
# print both variable totals here
</code></pre>
<p>My first issue is that the user is supposed to be entering digits, while the code is also checking for a string. How would I resolve that? My second issue is that I'm not sure how to reprompt each input if the input is not either a digit or 'add'.</p>
</div>
<div class="post-text" itemprop="text">
<p>Welcome to SO!</p>
<p>You've generally got the right idea, here's how you might translate that into code.</p>
<pre><code>x_total = 0
y_total = 0

while True:
    first_input = input('Enter the next value of x: ')
    if first_input == 'add':
        break
    x_total += float(first_input)

    second_input = input('Enter the next value of y: ')
    if second_input == 'add':
        break
    y_total += float(second_input)

print('x = ', x_total)
print('y = ', y_total)
</code></pre>
<p>Note that in Python we can convert a string <code>number_string = '1239'</code> into a float by calling the type <code>float</code> as <code>number = float(number_string )</code>. The same applies to <code>int</code> for integers. The <a href="https://docs.python.org/3/" rel="nofollow noreferrer">documentation</a> contains useful recipes and usage examples and is typically where I start when I'm unsure what I need.</p>
<p>Since you mentioned that you're new to Python, I'll mention that more than other languages, strong idioms exist in Python. The <a href="https://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">Zen of Python</a> is a sort of introduction to this idea. It's frequently useful to ask 'is this Pythonic?' when you first begin, as there are probably established ways to do whatever you're doing which will be clearer, less error-prone, and may run faster.</p>
<p>This <a href="https://www.cs.cmu.edu/~srini/15-441/F11/lectures/r04-python.pdf" rel="nofollow noreferrer">slide deck</a> is a good look at some Pythonisms, it's tailored to Python 2.x so some syntax is different, but the ideas are just as relevant in 3.x.</p>
<p>A more Pythonic, (though possibly less understandable way to new Python users) of fulfilling your original request is to use any unexpected value or escape character to quit the adding process.</p>
<pre><code>x_total = 0
y_total = 0

while True:

    try:

        first_input = input('Enter the next value of x: ')
        x_total += float(first_input)

        second_input = input('Enter the next value of y: ')
        y_total += float(second_input)
    except (ValueError, EOFError):
        break
    except KeyboardInterrupt:
        print()
        break

print('x =', x_total)
print('y =', y_total)
</code></pre>
<p>Now users of your program can type any non-float value to exit, or even use the key interrupts (ctrl + Z or ctrl + C for example). I ran it in PowerShell to give you some usage examples:</p>
<p>With exit, a common idiom:</p>
<pre><code>Enter the next value of x: 1
Enter the next value of y: 2
Enter the next value of x: 3
Enter the next value of y: exit
x = 4.0
y = 2.0
</code></pre>
<p>Your original case, with add:</p>
<pre><code>Enter the next value of x: 1
Enter the next value of y: 2
Enter the next value of x: 3
Enter the next value of y: add
x = 4.0
y = 2.0
</code></pre>
<p>With ctrl + Z:</p>
<pre><code>Enter the next value of x: 1
Enter the next value of y: 2
Enter the next value of x: 3
Enter the next value of y: ^Z
x = 4.0
y = 2.0
</code></pre>
<p>With ctrl + C:</p>
<pre><code>Enter the next value of x: 1
Enter the next value of y: 2
Enter the next value of x: 3
Enter the next value of y:
x = 4.0
y = 2.0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can apply an "endless" loop, and break it with a string input,e.g "add" or any other, or pressing Enter:</p>
<pre><code>while True:
         try:
            x=float(input("give x or enter to stop: "))
            X+=x
            y=float(input("give y or enter to stop: "))
            Y+=y
         except ValueError:
             print(X,Y)
             break
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I know you asked to output the results after the loop but I decided to do it before Python breaks the loop. This is the code:</p>
<pre><code>print("If you want to end the program input 'add'.")
x_value = 0
y_value = 0
while True:
    x_input = str(input("Value of X:"))
    if x_input != 'add':
        y_input = str(input("Value of Y:"))
        if (x_input != 'add') and (y_input != 'add'):
            x_value += int(x_input)
            y_value += int(y_input)
        elif y_input == "add":
            x_value += int(x_input)
            print("Value of X:", str(x_value))
            print("Value of Y:", str(y_value))
            break
    elif x_input == "add":
       print("Value of X:", str(x_value))
       print("Value of Y:", str(y_value))
       break
</code></pre>
<p>Hope it helps :)</p>
</div>
