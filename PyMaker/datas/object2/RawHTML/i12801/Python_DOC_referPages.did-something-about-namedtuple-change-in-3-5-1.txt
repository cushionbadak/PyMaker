<div class="post-text" itemprop="text">
<p>On Python 3.5.0:</p>
<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; cluster = namedtuple('Cluster', ['a', 'b'])
&gt;&gt;&gt; c = cluster(a=4, b=9)
&gt;&gt;&gt; c
Cluster(a=4, b=9)
&gt;&gt;&gt; vars(c)
OrderedDict([('a', 4), ('b', 9)])
</code></pre>
<p>On Python 3.5.1:</p>
<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; cluster = namedtuple('Cluster', ['a', 'b'])
&gt;&gt;&gt; c = cluster(a=4, b=9)
&gt;&gt;&gt; c
Cluster(a=4, b=9)
&gt;&gt;&gt; vars(c)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: vars() argument must have __dict__ attribute
</code></pre>
<p>Seems like something about <code>namedtuple</code> changed (or maybe it was something about <code>vars()</code>?).</p>
<p>Was this intentional? Are we not supposed to use this pattern for converting named tuples into dictionaries anymore?</p>
</div>
<div class="post-text" itemprop="text">
<p>Per <a href="http://bugs.python.org/issue24931">Python bug #24931</a>:</p>
<blockquote>
<p>[<code>__dict__</code>] disappeared because it was fundamentally broken in Python 3, so it had to be removed.  Providing <code>__dict__</code> broke subclassing and produced odd behaviors.</p>
</blockquote>
<p><a href="https://hg.python.org/cpython/rev/fa3ac31cfa44">Revision that made the change</a></p>
<p>Specifically, subclasses without <code>__slots__</code> defined would behave weirdly:</p>
<pre><code>&gt;&gt;&gt; Cluster = namedtuple('Cluster', 'x y')
&gt;&gt;&gt; class Cluster2(Cluster):
    pass
&gt;&gt;&gt; vars(Cluster(1,2))
OrderedDict([('x', 1), ('y', 2)])
&gt;&gt;&gt; vars(Cluster2(1,2))
{}
</code></pre>
<p>Use <code>._asdict()</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>From the <a href="https://docs.python.org/3/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields">docs</a></p>
<blockquote>
<p>Named tuple instances do not have per-instance dictionaries, so they are lightweight and require no more memory than regular tuples.</p>
</blockquote>
<p>The  <a href="https://docs.python.org/3/library/collections.html#collections.somenamedtuple._asdict">docs</a> (and <code>help(namedtuple)</code>) say to use <code>c._asdict()</code> to convert to a dict.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>__dict__</code> was implemented as a <code>@property</code> and has been removed; you can see the change in the source code:</p>
<p><a href="https://hg.python.org/releasing/3.5/file/tip/Lib/collections/__init__.py#l323" rel="noreferrer">3.5.0</a>:</p>
<pre><code>def __repr__(self):
    'Return a nicely formatted representation string'
    return self.__class__.__name__ + '({repr_fmt})' % self

@property
def __dict__(self):
    'A new OrderedDict mapping field names to their values'
    return OrderedDict(zip(self._fields, self))

def _asdict(self):
    'Return a new OrderedDict which maps field names to their values.'
    return self.__dict__

def __getnewargs__(self):
    'Return self as a plain tuple.  Used by copy and pickle.'
    return tuple(self)

def __getstate__(self):
    'Exclude the OrderedDict from pickling'
    return None
</code></pre>
<p><a href="https://hg.python.org/releasing/3.5.1/file/tip/Lib/collections/__init__.py#l323" rel="noreferrer">3.5.1</a>:</p>
<pre><code>def __repr__(self):
    'Return a nicely formatted representation string'
    return self.__class__.__name__ + '({repr_fmt})' % self

def _asdict(self):
    'Return a new OrderedDict which maps field names to their values.'
    return OrderedDict(zip(self._fields, self))

def __getnewargs__(self):
    'Return self as a plain tuple.  Used by copy and pickle.'
    return tuple(self)
</code></pre>
</div>
<span class="comment-copy">@user2357112 - Yeah, I think this kind of change should be called out in the changelog. That's what made me think at first that it might've been a mistake.</span>
<span class="comment-copy">"Are we not supposed to use this pattern for converting named tuples into dictionaries anymore" I suppose we never <i>were</i> supposed to use this pattern, as <code>vars(x)</code> is documented to return <code>x.__dict__</code>, but I don't think it was ever documented that <code>namedtuple</code> instances have a <code>__dict__</code> attribute. Such a pattern <i>is</i> documented for the <code>Namespace</code> instances in the <code>argparse</code> module, I know, so perhaps that's where the tendency arises. In any case, I'm sure there are going to be some surprised developers whose code breaks, so this is a great question.</span>
<span class="comment-copy">Fair enough. Also, I stand corrected that the use of <code>vars()</code> was never documented: in the <a href="https://docs.python.org/3.3/library/collections.html#collections.somenamedtuple._asdict" rel="nofollow noreferrer">Python 3.3 docs</a> it states that <code>the same effect can be achieved by using the built-in vars() function</code> when referring to the functionality of <code>_asdict()</code>.</span>
<span class="comment-copy">@BlacklightShining That is indeed a convention in python, but this is an exception to the rule.  The <a href="https://docs.python.org/3/library/collections.html#collections.somenamedtuple._asdict" rel="nofollow noreferrer">docs</a> mentioned "to prevent conflicts with field names, the method and attribute names start with an underscore."</span>
<span class="comment-copy">@JeremyBanks arguably they <i>did</i> fix a bug. The bug allowed the first example to work, but breaks it in the second instance. Of course as jme mentioned, that bug was actually documented as a feature...</span>
<span class="comment-copy">the interesting thing is that <code>vars</code> worked on python3.5.0 . . .</span>
<span class="comment-copy">The removal of the instance dict might have happened in 3.5.1</span>
<span class="comment-copy">Fair enough, that does seem to be the officially sanctioned way to do it. Shame is that much of the advice on <a href="http://stackoverflow.com/q/26180528/877069">this question</a> recommending <code>vars()</code> is now incorrect. I wonder if this was intentional on the developers' part or just an accident.</span>
<span class="comment-copy"><code>vars()</code> only works if the object has a <code>__dict__</code> attribute. If namedtuples had this dict they would require more memory than regular tuples. This was determined to be undesirable. Therefore the <code>__dict__</code> was removed, and thus <code>vars()</code> doesn't work. It is intended.</span>
<span class="comment-copy">@ChadS. the <code>__dict__</code> attribute was already just a property, <code>namedtuple</code>s have <code>__slots__</code>.</span>
