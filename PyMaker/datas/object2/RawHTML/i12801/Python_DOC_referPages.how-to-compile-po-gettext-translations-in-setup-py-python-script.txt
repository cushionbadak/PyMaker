<div class="post-text" itemprop="text">
<p>Consider a python package that has multilanguage support (using <code>gettext</code>). How to compile <code>*.po</code> files to <code>*.mo</code> files on the fly when executing <code>setup.py</code>? I really don't want to distribute precompiled <code>*.mo</code> files.</p>
<pre><code>#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from distutils.core import setup

setup(
    name='tractorbeam',
    version='0.1.0',
    url='http://starfleet.org/tractorbeam/',
    description='Pull beer out of the fridge while sitting on the couch.',

    author='James T. Kirk',
    author_email= 'jkirk@starfleet.org',

    packages=['tractorbeam'],
    package_data={
        'tractorbeam': [
            'locale/*.po',
            'locale/*.mo',  # How to compile on the fly?
        ]
    },

    install_requires=[
        'requests'
    ]
)
</code></pre>
<p>Thanks in advance!</p>
</div>
<div class="post-text" itemprop="text">
<p>I know this question begins to be a bit old, but in case anyone's still looking for an answer: it's possible to add a function to <code>setup.py</code> that will compile po files and return the <a href="https://docs.python.org/3/distutils/setupscript.html#installing-additional-files" rel="nofollow"><code>data_files</code> list</a>. I didn't choose to include them in <a href="https://docs.python.org/3/distutils/setupscript.html#installing-package-data" rel="nofollow"><code>package_data</code></a> because <code>data_files</code>'s description looked more appropriate:</p>
<blockquote>
<p>configuration files, <strong>message catalogs</strong>, data files, anything which doesnâ€™t fit in the previous categories.</p>
</blockquote>
<p>Of course you can only append this list to the one you're already using, but assuming you only have these mo files to add in data_files, you can write:</p>
<pre><code>setup(
    .
    .
    .
    data_files=create_mo_files(),
    .
    .
    .
)
</code></pre>
<p>For your information, here's the function <code>create_mo_files()</code> I use. I don't pretend it's the best implementation possible. I put it here because it looks useful and is easy to adapt. Note that it's a bit more extra-complicated than what you need because it doesn't assume there's only one po file to compile per directory, it deals with several instead; note also that it assumes that all po files are located in something like <code>locale/language/LC_MESSAGES/*.po</code>, you'll have to change it to fit your needs:</p>
<pre><code>def create_mo_files():
    data_files = []
    localedir = 'relative/path/to/locale'
    po_dirs = [localedir + '/' + l + '/LC_MESSAGES/'
               for l in next(os.walk(localedir))[1]]
    for d in po_dirs:
        mo_files = []
        po_files = [f
                    for f in next(os.walk(d))[2]
                    if os.path.splitext(f)[1] == '.po']
        for po_file in po_files:
            filename, extension = os.path.splitext(po_file)
            mo_file = filename + '.mo'
            msgfmt_cmd = 'msgfmt {} -o {}'.format(d + po_file, d + mo_file)
            subprocess.call(msgfmt_cmd, shell=True)
            mo_files.append(d + mo_file)
        data_files.append((d, mo_files))
    return data_files
</code></pre>
<p>(you'll have to import <code>os</code> and <code>subprocess</code> to use it)</p>
</div>
<div class="post-text" itemprop="text">
<p>I could share my version of <code>*.mo</code> files compilation process:</p>
<pre class="lang-python prettyprint-override"><code>import glob
import pathlib
import subprocess
(...)

PO_FILES = 'translations/locale/*/LC_MESSAGES/app_name.po'

def create_mo_files():
    mo_files = []
    prefix = 'app_name'

    for po_path in glob.glob(str(pathlib.Path(prefix) / PO_FILES)):
        mo = pathlib.Path(po_path.replace('.po', '.mo'))

        subprocess.run(['msgfmt', '-o', str(mo), po_path], check=True)
        mo_files.append(str(mo.relative_to(prefix)))

    return mo_files
(...)

setup(
    (...)
    package_data = {
        'app_name': [
            (...)
        ] + create_mo_files(),
    },
)
</code></pre>
<p>@edit Comment:  </p>
<p>For example <strong><code>pl</code></strong> translation file: </p>
<pre><code>app_name/translations/locale/pl/LC_MESSAGES/app_name.po
</code></pre>
<p>function <strong><code>create_mo_files()</code></strong> creates compiled <strong><code>app_name.mo</code></strong> file </p>
<pre><code>app_name/translations/locale/pl/LC_MESSAGES/app_name.mo
</code></pre>
<p>and then on package build this <strong><code>app_name.mo</code></strong> file is copying to </p>
<pre><code>package/translations/locale/pl/LC_MESSAGES/app_name.po
</code></pre>
</div>
