<div class="post-text" itemprop="text">
<p>Can not able to understand, if None is not equals to zero,then how the below if condition is passing?</p>
<pre><code>&gt;&gt;&gt; None == 0
False
&gt;&gt;&gt; if not None:
...   print ("1")
...
1
&gt;&gt;&gt;
&gt;&gt;&gt; None == False
False
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There are many things in python which are considered 'falsy' when used in  a boolean context (like an if statement or with boolean operators like <code>and</code>, <code>not</code>, <code>or</code>, etc).</p>
<p>Specifically None, False, any numerical data type which compares equal to <code>0</code>, or any type which implements <code>__len__</code> and for which <code>len(container) == 0</code>.</p>
<p>For more information consider:</p>
<pre><code>&gt;&gt;&gt; bool(False)
False
&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; bool([])
False
&gt;&gt;&gt; bool('')
False
&gt;&gt;&gt; bool(None)
False
&gt;&gt;&gt; not None
True
&gt;&gt;&gt; not 0
True
&gt;&gt;&gt; not False
True
&gt;&gt;&gt; not ''
True
&gt;&gt;&gt;
</code></pre>
<p>For more information see the <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" rel="nofollow">docs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>Let's ask the python shell...</p>
<pre><code>In [1]: None == 0
Out[1]: False

In [2]: not None
Out[2]: True

In [3]: None?
Type:        NoneType
String form: None
Namespace:   Python builtin
Docstring:   &lt;no docstring&gt;
</code></pre>
<p>So that might give you a hint why <code>None==0</code> is returning False. For further hint..</p>
<pre><code>In [6]: i = 0

In [7]: i?
Type:        int
String form: 0
Docstring:
int(x=0) -&gt; int or long
int(x, base=10) -&gt; int or long
</code></pre>
<p>Armed with this information we could dig into python's truth system...</p>
<blockquote>
<p>The following values are considered false:</p>
<p>None</p>
<p>False</p>
<p>zero of any numeric type, for example, 0, 0L, 0.0, 0j.</p>
</blockquote>
<p>So yes, Both <code>None</code> and <code>0</code> is considered false for <code>if</code>/<code>while</code> conditionals, but that doesn't mean all things evaluates to "False"  are themselves equal. As some of them have different types, they are not equivalent.</p>
<p>So the bottom line is :</p>
<p>[1] Not everything evaluates to <code>False</code> in a <code>if</code>/<code>while</code> statement are themselves equal.</p>
<p>[2] The reason for this is Python's Type system</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; bool(None)
False
&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; None == 0
False
&gt;&gt;&gt; bool(None) == bool(0)
True
</code></pre>
<p>Comparisons in Python are typesafe*, which means even though 2 variables are both truthy (or not truthy) does not imply that their direct comparison returns true.</p>
<pre><code>&gt;&gt;&gt; type(None)
&lt;class 'NoneType'&gt;
&gt;&gt;&gt; type(0)
&lt;class 'int'&gt;
</code></pre>
<p>*except that <code>False == 0</code> and <code>True == 1</code> are guaranteed and the <code>==</code> operator is overloadable.</p>
</div>
<div class="post-text" itemprop="text">
<p>See <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="nofollow">Truth Value Testing</a> chapter in Python's docs.</p>
<blockquote>
<p>Any object can be tested for truth value, for use in an if or while condition or as operand of the Boolean operations below. The following values are considered false:</p>
<ul>
<li><p>None</p></li>
<li><p>False</p></li>
<li><p>zero of any numeric type, for example, 0, 0L, 0.0, 0j.</p></li>
<li><p>any empty sequence, for example, '', (), [].</p></li>
<li><p>any empty mapping, for example, {}.</p></li>
<li><p>instances of user-defined classes, if the class defines a <strong>nonzero</strong>() or <strong>len</strong>() method, when that method returns the integer zero or bool value False. <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="nofollow">1</a></p></li>
</ul>
<p>All other values are considered true â€” so objects of many types are always true.</p>
<p>Operations and built-in functions that have a Boolean result always return 0 or False for false and 1 or True for true, unless otherwise stated. (Important exception: the Boolean operations or and and always return one of their operands.)</p>
</blockquote>
</div>
<span class="comment-copy">Because you used <code>if not</code>?</span>
<span class="comment-copy">not(false) -&gt; true</span>
<span class="comment-copy">and <code>None</code> is always false.</span>
<span class="comment-copy"><code>bool(0) == bool(None)</code> ...</span>
<span class="comment-copy"><b>Comparing</b> a value (to a number (or any value)) and <b>converting</b> a value to a different type (boolean) are two very different operations.</span>
<span class="comment-copy">The term you're looking for is "falsy".  Otherwise, spot on.</span>
<span class="comment-copy">Answers should be self-contained. If the link breaks for whatever reason, your answer will be useless.</span>
<span class="comment-copy">Makes sense. Added quote.</span>
