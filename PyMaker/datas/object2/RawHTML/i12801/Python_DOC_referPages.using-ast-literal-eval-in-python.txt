<div class="post-text" itemprop="text">
<p>I have a list and items are strings, but from some operation i got the list as string items are enclosed with extra "<code>'string' "</code>. How to get rid of that.</p>
<p>My code sample is</p>
<pre><code> import ast
 d = ["'WORKSHOP'", "'KIDS'", "'EXHIBITION'", "'FANTASY'", "'FESTIVAL'"]
 result = ast.literal_eval(d)
ValueError: malformed node or string: ["'WORKSHOP'", "'KIDS'", "'EXHIBITION'", "'FANTASY'", "'FESTIVAL'"]
</code></pre>
<p>I want the output as:</p>
<pre><code>result = ['WORKSHOP', 'KIDS', 'EXHIBITION', 'FANTASY', 'FESTIVAL']
</code></pre>
<p>For integers:</p>
<pre><code>res = [123, 345, 566, 78]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Ah...you know, you're trying to use <code>ast.literal_eval()</code> on a list. So try this:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; d = ["'WORKSHOP'", "'KIDS'", "'EXHIBITION'", "'FANTASY'", "'FESTIVAL'"]
&gt;&gt;&gt; result = [ast.literal_eval(i) for i in d]
&gt;&gt;&gt; result
['WORKSHOP', 'KIDS', 'EXHIBITION', 'FANTASY', 'FESTIVAL']
&gt;&gt;&gt; 
</code></pre>
<p>Or use <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow"><code>map()</code></a>:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; d = ["'WORKSHOP'", "'KIDS'", "'EXHIBITION'", "'FANTASY'", "'FESTIVAL'"]
&gt;&gt;&gt; result = map(ast.literal_eval, d)
&gt;&gt;&gt; result
['WORKSHOP', 'KIDS', 'EXHIBITION', 'FANTASY', 'FESTIVAL']
&gt;&gt;&gt; 
</code></pre>
<p>Remember on Python 3 it'll return a <code>map</code> object, to covert it to list just use <code>list(map(ast.literal_eval, d))</code>.</p>
<hr/>
<p>Another way to solve this is simply remove the first char and the last char in the string since they're already string objects:</p>
<pre><code>&gt;&gt;&gt; d = ["'WORKSHOP'", "'KIDS'", "'EXHIBITION'", "'FANTASY'", "'FESTIVAL'"]
&gt;&gt;&gt; [i[1:-1] for i in d]
['WORKSHOP', 'KIDS', 'EXHIBITION', 'FANTASY', 'FESTIVAL']
&gt;&gt;&gt; list(map(lambda x: x[1:-1], d))
['WORKSHOP', 'KIDS', 'EXHIBITION', 'FANTASY', 'FESTIVAL']
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why not simply:</p>
<pre><code>&gt;&gt;&gt; d = ["'WORKSHOP'", "'KIDS'", "'EXHIBITION'", "'FANTASY'", "'FESTIVAL'"]
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; l = map(lambda s:s.replace('\'', ''), d)
&gt;&gt;&gt; l
['WORKSHOP', 'KIDS', 'EXHIBITION', 'FANTASY', 'FESTIVAL']
</code></pre>
<p>Also, you can do it this way with <a href="https://docs.python.org/2/library/string.html#string.translate" rel="nofollow">string</a> module:</p>
<pre><code>&gt;&gt;&gt; d = ["'WORKSHOP'", "'KIDS'", "'EXHIBITION'", "'FANTASY'", "'FESTIVAL'"]
&gt;&gt;&gt; allchars =string.maketrans('','') #to make a chars list of 256, for translate method
&gt;&gt;&gt; l = map(lambda s:s.translate(allchars, '\''),d)
&gt;&gt;&gt; l
['WORKSHOP', 'KIDS', 'EXHIBITION', 'FANTASY', 'FESTIVAL']
</code></pre>
</div>
<span class="comment-copy">Does it have to be with <code>ast</code> ?</span>
<span class="comment-copy">@IronFist-please suggest if you have a new way!!!will be a great help.</span>
<span class="comment-copy">You can simply use <code>map(ast.literal_eval,d)</code></span>
<span class="comment-copy">@Kevin-sorry for this kind of childish question.Will be careful further.Thanks.</span>
<span class="comment-copy">@vks: Yeah, edited ;)</span>
<span class="comment-copy">@Satya: No problem :)</span>
<span class="comment-copy">@Kevin-need your help in <a href="http://stackoverflow.com/questions/34119386/filter-out-some-items-from-a-list-and-store-in-different-arrays-in-python/34119941?noredirect=1#comment56002157_34119941" title="filter out some items from a list and store in different arrays in python">stackoverflow.com/questions/34119386/â€¦</a></span>
<span class="comment-copy">What will happen if the string is <code>"'WO'RK'S'HOP'"</code> and OP wants save these <code>'</code> except the around pair?</span>
<span class="comment-copy">And the <code>string</code> version doesn't work if you're using Python 3.x.</span>
<span class="comment-copy">@KevinGuan, it will indeed remove the <code>'</code> char from <code>"'WO'RK'S'HOP'"</code> giving out: <code>'WORKSHOP'</code></span>
<span class="comment-copy">@KevinGuan...you are right...I didn't think that OP wanted only to remove <code>'</code> on the sides...Thanks for the head's up</span>
<span class="comment-copy">Yeah that's what I want to say...</span>
