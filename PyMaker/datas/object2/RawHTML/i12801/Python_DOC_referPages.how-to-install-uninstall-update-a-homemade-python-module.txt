<div class="post-text" itemprop="text">
<p>I wrote a small module that has this structure:</p>
<pre><code>~/
   a/
      b/
         foo/
            __init__.py
            foo.py
            bar.py
</code></pre>
<p>Each time I use my module - I have to go in its folder and start my interactive session: </p>
<pre><code>$ cd ~/a/b
$ ipython

In [0]: from foo import *
</code></pre>
<p>I would like to easily make available my module globally on my PC. Do I need to structure it as package with a <code>setup.py</code> and execute <code>python setup.py install</code> after each change on my module?</p>
<p>Another solution that I don't really like is adding the following to my <code>ipython</code> profile:</p>
<pre><code>import sys
sys.path.append("~/a/b")
</code></pre>
<p>Or modifying my <code>PYTHONPATH</code>:</p>
<pre><code>export PYTHONPATH=$PYTHONPATH:$HOME/a/b
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, install it globally as a python package or use a virtualenv</p>
</div>
<span class="comment-copy">I think the last two options (adding new path to be searched during import) are best for you. What's bad about them?</span>
<span class="comment-copy">Probably nothing bad about them. It was just a feeling there is always a better option than modifying my <code>user</code> config.</span>
<span class="comment-copy">The only other option that comes to mind is to install a package and then modify those installed files. But it feels dirty.</span>
<span class="comment-copy">Why not use <code>python setup.py develop</code>, then you don't need to reinstall after every change.</span>
<span class="comment-copy">What do you mean by <code>install it globally</code>? Does it mean I have to run <code>python setup.py install</code> each time I modify my module?</span>
<span class="comment-copy">Yes, it means you would have to run that each time. By globally I assumed you were referring to your local python installation where libraries are able to be imported with the default PYTHONPATH. Mine will install here for example: '/usr/lib/python2.7/dist-packages'. Your best solution if you don't want to run setup.py every time is to use a virtualenv.</span>
<span class="comment-copy">So I have to read a bit about <code>virtualenv</code>. I've never used it.</span>
<span class="comment-copy">It's very easy, the best guide is probably this one: <a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/" rel="nofollow noreferrer">docs.python-guide.org/en/latest/dev/virtualenvs</a></span>
<span class="comment-copy">In newer Python versions, you likely want venv instead of virtualenv:  <a href="https://docs.python.org/3/library/venv.html" rel="nofollow noreferrer">docs.python.org/3/library/venv.html</a></span>
