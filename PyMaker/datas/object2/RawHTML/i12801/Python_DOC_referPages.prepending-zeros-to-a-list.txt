<div class="post-text" itemprop="text">
<p>The story is as follows. The user inputs a number. Python converts the string into an int, and uses an algorithm to make a binary number. For example:</p>
<pre><code>firstdecimal=input("Please enter your first denary number: ")

&gt; 45

StrToInt = int(firstdecimal)
InputInt = ToBin(StrToInt)     # a working binary conversion function
print(InputInt)

&gt; [1, 0, 1, 1, 0, 1]
</code></pre>
<p>What I need is that the function <code>Addzero(x)</code> is able to take the binary number list (<code>InputInt</code>), and add <code>0</code>s to the start. If there are already <code>8</code> elements in the list, then it does not need to add a <code>0</code>.</p>
<pre><code>def Addzero(value):
    reverse = value[::-1] 
    if len(value) != 8:
        value.extend([0])
        if len(value) == 8:
            reverse = value[::-1]
    elif len(value) == 8:
        return
</code></pre>
<p>I couldn't find the code that lets me add the elements to the start, so I just implemented a reverse feature to circumvent it. </p>
<p>When i print the content of this function I get...</p>
<pre><code>&gt; None
</code></pre>
<p>Which is evidently not the intended result. I need the output. (a full <code>8</code> element list composed of <code>0</code>'s, <code>1</code>'s)</p>
<p>Like This:</p>
<pre><code>&gt; [0, 0, 1, 0, 1, 1, 0, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The reason that it returns <code>None</code> is simply because your <code>return</code> statement is lacking an expression:</p>
<pre><code>elif len(value) == 8:
    return
</code></pre>
<p>Therefore <code>return</code> simply means: "<em>We're done, stop executing this function, nothing should be returned</em>".</p>
<p>and furthermore not all code paths will do a return statement anyway. Finally your <code>AddZero</code> seems to add only a <em>single</em> zero, which can be inefficient.</p>
<p>A better solution is probably:</p>
<pre><code>def Addzero(value):
    return [0] * max(0,8-len(value)) + value
</code></pre>
<p>Here the expression <code>[0]*n</code> means that you repeat <code>0</code> <em>n</em> times in a list. So <code>[0]*4</code> will result in <code>[0,0,0,0]</code>. Now the number of times we need to add this is <code>max(0,8-len(value))</code>. The <code>max(0,...)</code> is in fact not even necessary, so you can rewrite it as:</p>
<pre><code>def Addzero(value):
    return [0] * (8-len(value)) + value
</code></pre>
<p>It means thus that the number of elements we have to short to generate an eight item list are constructed as a list of zero. And we add (append) with <code>+</code> the original list to it.</p>
<p>As @Later42 shows in <a href="https://stackoverflow.com/a/34245012/67579">his answer</a>, you can make it more efficient, by doing a <code>len</code> check first, and in case it is equivalent to eight, return the list itself:</p>
<pre><code>def Addzero(value):
    if(len(value) &gt; 8) :
        return value
    else :
        return [0] * (8-len(value)) + value
</code></pre>
<p><strong>Demo</strong> using Python's interactive shell:</p>
<pre><code>$ python
Python 2.7.9 (default, Apr  2 2015, 15:33:21) 
[GCC 4.9.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def Addzero(value):
...     return [0] * (8-len(value)) + value
... 
&gt;&gt;&gt; Addzero([1, 0, 1, 1, 0, 1])
[0, 0, 1, 0, 1, 1, 0, 1]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This might work? I have not tested it myself, but I think it should be fine.</p>
<pre><code>def add_zero(binary_list):
    if len(binary_list) &lt; 8:
        zeros = [0] * (8 - len(binary_list))
        return zeros + binary_list
    else:
        return binary_list
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Other solutions fit the bill I guess, but why not just use:</p>
<pre><code>firstdecimal = input("Please enter your first denary number: ")

&gt; 45

binaryStr = '{0:08b}'.format(firstdecimal)  # string, not a list

print(binaryStr)
&gt; '00101101'

print(list(map(int, binaryStr))  # gives you the list
&gt; [0, 0, 1, 0, 1, 1, 0, 1]
</code></pre>
<p>Note that <code>08b</code> in the format string denotes that the argument <code>firstdecimal</code> is to be converted to a zero-padded 8-length binary string.</p>
</div>
<span class="comment-copy">How are you calling Addzero() and where are you printing?</span>
<span class="comment-copy">from the shell. it was just a test, that part works fine, the code for that is:      def ToBin(x):         if x == 0:             return [0]         bit = []         while x:             bit.append(x % 2)             x &gt;&gt;= 1         return bit[::-1]</span>
<span class="comment-copy">you said don't find the code to add element to a list? a simple check the python <a href="https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range" rel="nofollow noreferrer">documentation</a> have the answer</span>
<span class="comment-copy">If you want to follow PEP (a python advice for coding, well, sort of), write your function names uppercased in the future.</span>
<span class="comment-copy">Yes that does the trick, +1.</span>
<span class="comment-copy">No real answer, more like a longer comment.</span>
