<div class="post-text" itemprop="text">
<p>I am looking to write unit tests to existing functionality, and I came across to the below:</p>
<p>I have a function that spins a new process when bringing up a service or list of services, the code looks something like this:</p>
<pre><code>def run_consumer(self, services):
    for service in services: #services is an array of functions which initialize a service
        try:
            name = service.__name__
            process = multiprocessing.Process(target=service, name = service.__name__, args=self.some_arg)
            process.start()
            self.track_services[name].append(process) #defined in the init
        except Exception as ex:
            print('service "{0}" failed with error: {1}'.format(name, ex))
</code></pre>
<p>What I am trying to figure out is if there is any value adding a unit test to this function, and if yes, what would it look like... I am using unittest.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think it's valuable to unittest.  I especially think unittesting the except condition is valuable, because it looks like an infrequently executed code path.  </p>
<p>What happens if <code>service.__name__</code> errors for some strange reason? then you have another exception being thrown.</p>
<p>To unittests this without changing anything you could use <code>unittest.mock</code> <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow">https://docs.python.org/3/library/unittest.mock.html</a> to patch the <code>multiprocessing</code> import, to provide a mock implemenation that doesn't spawn a process.</p>
<p>Another option would be to inject the <code>multiprocessing</code> module as a paramter into your function, so that the production code could use <code>multiprocessing</code> and your test could code provide a mock object</p>
</div>
<span class="comment-copy">good mind, this sounds what I needed to hear and some good suggestions as well... for option 1, since multiprocessing is imported within the class, how can that be mocked out, is it possible? or only if I make multiprocessing as a param to my function?</span>
<span class="comment-copy">@user3087106 mock should be able to patch the import of multiprocessing in your module</span>
<span class="comment-copy">Thanks, this worked out for me... I appreciate your help!</span>
