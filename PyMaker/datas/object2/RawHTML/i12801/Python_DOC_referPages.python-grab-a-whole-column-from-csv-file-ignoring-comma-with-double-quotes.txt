<div class="post-text" itemprop="text">
<p>I am new to python.
I want to grab a whole column from a *.csv file.
in order to do so, I saw that my best way is to convert my csv to 2-dim. array using:</p>
<pre><code>   &gt; import numpy as np
   &gt; csv=np.genfromtxt(file_name.csv, delimeter=",")
</code></pre>
<p>and than for example if I want to grab the 8-th column just to write:</p>
<blockquote>
<p>column8=csv[:,7]</p>
</blockquote>
<p>my problem is that I have fields, in double quotes, with a comma in them, so I have a ValueError:</p>
<blockquote>
<p>ValueError: Some errors were detected !</p>
<pre><code>Line #6 (got 16 columns instead of 15)

Line #21 (got 16 columns instead of 15)

Line #45 (got 18 columns instead of 15)

etc.
</code></pre>
</blockquote>
<p>so all I want is, if for example this is my csv:</p>
<blockquote>
<p>a,b,c,d</p>
<p>f,g,h,"i,j"</p>
<p>k,l,m,"n,o,p"</p>
</blockquote>
<p>so if for example I want to grab the 4-th column I want the answer to be:</p>
<blockquote>
<p>d</p>
<p>i,j</p>
<p>n,o,p</p>
</blockquote>
<p>any ideas anyone??</p>
<p>thank you!!!</p>
</div>
<div class="post-text" itemprop="text">
<p>Python's built-in <code>csv</code> module takes care of this nicely with the default settings. So this should just work:</p>
<pre><code>import csv
with open("file_name.csv", "r", newline='') as f:
    reader = csv.reader(f)
    column8 = [row[7] for row in reader]
</code></pre>
<p>This is a slight variation on the <a href="https://docs.python.org/3/library/csv.html#examples" rel="nofollow">first example</a> in the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow">module's documentation</a>, which contains additional useful information.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using pandas package will solve your problem. As pandas has a wide variety of methods from which we can read different file formats.</p>
<pre><code>    import pandas as pd
    df = pd.read_csv("filename.csv")
    print df[column4]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>pandas is very good for reading from csv files.</p>
<p>try to use:</p>
<pre><code>df = pandas.read_csv("filename.csv", delimeter=",") # header=None)
</code></pre>
<p>after this, to access a column</p>
<pre><code>df['colname'] # or df[col_ind] if you set header=None
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Similarly to taleinat's solution, but if you know the header_name and want to return a list.</p>
<pre><code>import csv

with open(FILENAME, "rb") as MEDIA:
headers = []
columns = []
required_header = "name"
csv_file = csv.reader(MEDIA, quoting=csv.QUOTE_NONE, delimiter=DELIMITER)
for row in csv_file:
    headers = row[:]
    break
position = headers.index(required_header)
[columns.append(row[position]) for row in csv_file]
return columns
</code></pre>
</div>
<span class="comment-copy">hi, but what if I want to grab column by its number and not by its name? (i.e. df[:,3] and not df[column3]?</span>
<span class="comment-copy">You could use df.ix[:,3]</span>
<span class="comment-copy">hi, but how I ignore commas in double quotes, and how I grab a whole column?</span>
<span class="comment-copy">It ignores commas in double quotes by default. You can use param quotechar to specify another behavior.</span>
<span class="comment-copy">and,  set <code>header=None</code> to not use first row as the columns names</span>
<span class="comment-copy">works perfect, thank you!</span>
