<div class="post-text" itemprop="text">
<p>I've tried to create a little app that plays a sound when you lose connectivity for an extended period and plays another when the connection is established. Useful for wireless connections.</p>
<p>I'm still new to Python :) trying little projects to improve my knowledge. If you do answer I will be very grateful if you could include any information about how to use subprocess. </p>
<p>I've defined the subprocess but I'm not sure how to word my if statement so it loops from one function to the other. IE Function 1 = IF ping loss &gt; 15 pings play sound and move on to function 2... If function 2 ping success &gt; 15 pings play sound and move back to function 1. So on.</p>
<p>I've yet to wrap the program in a loop, at this point I'm just trying to get the ping to work with the if statement.</p>
<p>So right now the application just continuously loop pings.</p>
<pre><code>import os
import subprocess
import winsound
import time

def NetFail():
    winsound.Beep(2000 , 180), winsound.Beep(1400 , 180)

def NetSucc():
    winsound.Beep(1400 , 250), winsound.Beep(2000 , 250),      

ips=[]
n = 1
NetSuccess = 10
NetFailure = 10
PinSuc = 0
PinFail = 0
x = '8.8.8.8'

ips.append(x)
for ping in range(0,n):
ipd=ips[ping]

def PingFailure():
    while PinFail &lt; NetSuccess:
        res = subprocess.call(['ping', '-n', '10', ipd])
    if ipd in str(res):
        PingSuccess()
    else:
        print ("ping to", ipd, "failed!"), NetFail()

def PingSuccess():
    while PinFail &lt; NetFailure: # This needs to be cleaned up so it doesn't interfere with the other function
        res = subprocess.call(['ping', '-n', '10', ipd])
    if ipd in str(res):
        PingFail()
    else:
        print ("ping to", ipd, "successful!"), NetSucc()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As you use the command <code>ping -n 10 ip</code>, I assume that you are using a Windows system, as on Linux (or other Unix-like) it would be <code>ping -c 10 ip</code>.</p>
<p>Unfortunately, on Windows <code>ping</code> always return 0, so you cannot use the return value to know whether peer was reached. And even the output is not very clear...</p>
<p>So you should:</p>
<ul>
<li>run in a <code>cmd</code> console the command <code>ping -n 1 ip</code> with an accessible and inaccessible ip, note the output and identify the differences. On my (french) system, it writes <em>Impossible</em>, I suppose that you should get <em>Unable</em> or the equivalent in your locale</li>
<li>start the <code>ping</code> from Python with <code>subprocess.Popen</code> redirecting the output to a pipe</li>
<li>get the output (and error output) from the command with <code>communicate</code></li>
<li>search for the <code>Unable</code> word in output.</li>
</ul>
<p>Code could be like:</p>
<pre><code>errWord = 'Unable'    # replace with what your locale defines...
p = subprocess.Popen([ 'ping', '-n', '1', ipd],
             stdout = subprocess.PIPE, stderr=subprocess.PIPE)
out, err = p.communicate()
if errWord in out:
    # process network disconnected
else:
    # process network connected
</code></pre>
<p>Alternatively, you could search <a href="https://pypi.python.org/" rel="nofollow">pypi</a> for a pure Python implementation of ping such as py-ping ...</p>
<p>Anyway, I would not use two functions in flip-flop because it will be harder if you later wanted to test connectivity to multiple IPs. I would rather use an class</p>
<pre><code>class IP(object):
    UNABLE = "Unable"   # word indicating unreachable host
    MAX = 15            # number of success/failure to record new state
    def __init__(self, ip, failfunc, succfunc, initial = True):
        self.ip = ip
        self.failfunc = failfunc  # to warn of a disconnection
        self.succfunc = succfunc  # to warn of a connection
        self.connected = initial  # start by default in connected state
        self.curr = 0             # number of successive alternate states
    def test(self):
        p = subprocess.Popen([ 'ping', '-n', '1', self.ip],
                     stdout = subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()
        if self.UNABLE in out:
            if self.connected:
                self.curr += 1
            else:
                self.curr = 0   # reset count
        else:
            if not self.connected:
                self.curr += 1
            else:
                self.curr = 0   # reset count
        if self.curr &gt;= self.MAX:     # state has changed
            self.connected = not self.connected
            self.curr = 0
            if self.connected:        # warn for new state
                self.succfunc(self)
            else:
                self.failfunc(self)
</code></pre>
<p>Then you can iterate over a list of IP objects, repeatedly calling <code>ip.test()</code>, and you will be warned for state changes</p>
</div>
<div class="post-text" itemprop="text">
<p>Not quite sure, what you want to achieve, but your if statement has to be part of the while loop if you want it to be executed each time ping is called via subprocess is called.</p>
<p>Also: 
Here is the documentation for subprocess: <a href="https://docs.python.org/3/library/subprocess.html" rel="nofollow">https://docs.python.org/3/library/subprocess.html</a>
For viewing the output of a process you have to call it via subprocess.call_output:</p>
<pre><code>ls_output = subprocess.check_output(['ls'])
</code></pre>
<p>For further information have a look at this: <a href="http://sharats.me/the-ever-useful-and-neat-subprocess-module.html#a-simple-usage" rel="nofollow">http://sharats.me/the-ever-useful-and-neat-subprocess-module.html#a-simple-usage</a></p>
</div>
<span class="comment-copy">Do you want this to run on Linux (or another Unix-like) system, or on Windows? Unfortunately, <code>ping</code> command do not work the same...</span>
<span class="comment-copy">This will be running on a windows machine.</span>
<span class="comment-copy">"Unfortunately, on Windows ping always return 0, so you cannot use the return value to know whether peer was reached. And even the output is not very clear..." That would explain why it never goes into the if statement.  I will try to understand you code in a few hours.</span>
<span class="comment-copy">+1 Thank. So the program will ping 8.8.8.8 and if the ping fails 15 times in a row. It will play a sound and move to the second function which will look for 15 scucessful pings in a row then play a sound and move back to the first function. Effectively monitoring the connection.   I'd be looking to code the output if successful to add +1 to a counter and if it failed reset the counter to 0 so it's 15 failed or successful pings in a row.</span>
<span class="comment-copy">I'll make some changes and let you know how I go that second link you post is proving helpful.</span>
<span class="comment-copy">It seems like you want to count with while loops. You can use for loops for that (and right at the moment it wouldn't work at all because you are comparing two static values as condition for the while).</span>
