<div class="post-text" itemprop="text">
<p>Please note I am a beginner.
The program below is about calculating a GTIN number. Basically, the part that doesn't work is the validating part. The program is supposed to validate the code as well as explaining it to the user at the same time; however, the computer doesn't seem to recognise the variables that I have used for some reason.The validating option is only available (only works) if you have literally just calculated a GTIN number and the menu has re-appeared once it asks if you want to re-run the program. I hope you can understand my question! Many thanks! Below is my code:</p>
<pre><code>print("Welcome. Do you want to start? (Y/N)")
answer = input()

while(answer == "Y"):
    print("1. Calculate a GTIN number")
    print("2. Validate Previous Code (Please note that this option is only valid if you have just calculated a GTIN number)")
    print("3. End Program")
    option = int(input())

    def GTIN():
        #Step 1
        print("Enter the first digit of your GTIN code")
        digit_1 = int(input())

        print("Enter the second digit")
        digit_2 = int(input())

        print("Enter the third digit")
        digit_3 = int(input())

        print("Enter the fourth digit")
        digit_4 = int(input())

        print("Enter the fifth digit")
        digit_5 = int(input())

        print("Enter the sixth digit")
        digit_6 = int(input())

        print("Enter the seventh digit")
        digit_7 = int(input())

        #Step 2
        total_1 = digit_1 * 3
        total_2 = digit_2 * 1
        total_3 = digit_3 * 3
        total_4 = digit_4 * 1
        total_5 = digit_5 * 3
        total_6 = digit_6 * 1
        total_7 = digit_7 * 3

        #Step 3
        final_total = total_1 + total_2 + total_3 + total_4 + total_5 + total_6 + total_7


        #Step 4
        import math
        def roundup(final_total):
            return int(math.ceil(final_total / 10.0) * 10)

        final_total_2 = roundup(final_total)


        GTIN_number_8 = final_total_2 - final_total

        print("Your complete GTIN number is:", digit_1, digit_2, digit_3, digit_4, digit_5, digit_6, digit_7, GTIN_number_8)
        return digit_1, digit_2, digit_3, digit_4, digit_5, digit_6, digit_7, GTIN_number_8

    def validation(digits, totals):
        print("Your previous GTIN code:", digits[0], digits[1], digits[2])
        print("Firstly, the computer will collect all of the digits, then it will multiply them by either 3 or 1:")
        print("The 1st digit: ", digit_1, "will be multiplied by 3")
        print("The 2nd digit: ", digit_2, "will be mutliplied by 1")
        print("The 3rd digit: ", digit_3, "will be multiplied by 3")
        print("The 4th digit: ", digit_4, "will be mutliplied by 1")
        print("The 5th digit: ", digit_5, "will be multiplied by 3")
        print("The 6th digit: ", digit_6, "will be mutliplied by 1")
        print("The 7th digit: ", digit_7, "will be multiplied by 3")

        print("Secondly, the computer will add up all of the digits:")
        print("1st digit + 2nd digit + 3rd digit + 4th digit + 5th digit + 6th digit + 7th digit")
        print(total_1, "+", total_2, "+", total_3, "+", total_4, "+", total_5, "+", total_6, "+", total_7)
        print("Total =", final_total)

        print("Thirdly, the total will be rounded to the highest multiple of 10")
        print("The total rounded =", final_total_2)

        print("Lastly, the total will then be subtracted from the rounded number to give the GTIN number 8")
        print("Final GTIN number including the final digit:", digit_1, digit_2, digit_3, digit_4, digit_5, digit_6, digit_7, GTIN_number_8)

    def end():
        print("Ending Program")

    if(option == 1):
        GTIN(digits, totals)
    elif(option == 2):
        validation(digits)
    elif(option == 3):
        end()
    else:
        print("Ending Program")

    print("Do you want to re-run the program? (Y/N)")
    answer = input()


print("Ending Program")
</code></pre>
<p>The 'Name Error' message is:</p>
<pre><code>Traceback (most recent call last):
  File "G:\Year 10 - Computer Science\GCSE Coursework\Part One\Code Versions\GTIN Code V4.py", line 85, in &lt;module&gt;
    GTIN(digits, totals)
NameError: name 'digits' is not defined
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>From <a href="https://docs.python.org/2/reference/executionmodel.html" rel="nofollow">https://docs.python.org/2/reference/executionmodel.html</a> :</p>
<blockquote>
<p>A scope defines the visibility of a name within a block. If a local variable is defined in a block, its scope includes that block.</p>
</blockquote>
<p>In your code, the value of <code>digit_1</code> is assigned within the scope of the <code>GTIN()</code> function.  That means it is not visible outside that scope - it is a <em>local</em> variable of that function.  So, when you try to access it from a different function, <code>validation()</code>, the name <code>digit_1</code> is not recognized.</p>
<p>The best way to design this is probably to make <code>GTIN( self )</code> and <code>validation( self )</code> methods of the same <em>class</em>, and create and work with an instance of that class. Then, if you want to share variables between methods of a class instance, the you can assign them as <em>attributes</em> of <code>self</code> - i.e. use <code>self.digit_1</code> where you currently have just <code>digit_1</code>.</p>
<p>A quicker and dirtier solution for sharing variables between functions is to put</p>
<pre><code>global digit_1    #  , and all the other variables
</code></pre>
<p>at the beginning of <code>GTIN()</code> (and any other function that wants to change their values). This will mean that the assignments occurring in <code>GTIN()</code> will take effect at the global scope (i.e. at the level of the whole file) and hence <code>validate()</code> will be able to access them.</p>
<p>In its current form, your particular program will also work (and will be able to share variables between code blocks without you having to think about it) if you do everything in the same scope. That means get rid of the <code>def</code> statements entirely, and move the code block for <code>GTIN</code> underneath <code>if option == 1</code>, and the code block for <code>validate</code> underneath <code>elif option == 2</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>you should change the signature of your <code>validation</code> function</p>
<pre><code>def gtin_validate(gtin):
    # @param {str} gtin
    # @returns {bool}
    evens, odds = gtin[0:-1:2], gtin[1:-1:2]
    total = 0
    for even in evens:
        total += int(even) * 3
    for odd in odds:
        total += int(odd) * 1
    checkdigit = 10 - (total % 10)
    return checkdigit == int(gtin[-1])
</code></pre>
<p>Slowly stepping through the function:</p>
<pre><code>def gtin_validate(gtin):
    # @param {str} gtin
    # @returns {bool}
</code></pre>
<p>The new function signature accepts a string that's the whole GTIN (e.g. <code>"01234567"</code>) and returns <code>True</code> if the GTIN is valid, and <code>False</code> if it is not. I used Javadoc comments here just because it's more familiar to a broader range of programmers, but current style should probably be: <code>def gtin_validate(gtin: str) -&gt; bool:</code></p>
<pre><code>evens, odds = gtin[0:-1:2], gtin[1:-2:2]
</code></pre>
<p>This grabs all the even-ordered numbers and all the odd-ordered numbers (slicing off the last character) and stores them in those respective variables. Read more <a href="https://docs.python.org/3/library/stdtypes.html#common-sequence-operations" rel="nofollow">in the docs</a> in the section that reads <code>s[i:j:k]</code></p>
<pre><code>total = 0
for even in evens:
    total += int(even) * 3
for odd in odds:
    total += int(odd) * 1
</code></pre>
<p>This is just summing up the numbers. Should be self-descriptive. In fact <code>sum([int(n) for n in itertools.chain(evens, odds)])</code> is how I'd write this for someone who wasn't just starting out!</p>
<pre><code>checkdigit = 10 - (total % 10)
</code></pre>
<p>This replaces your fancy "round up to the nearest multiple of ten and subtract the original total" formula. <code>total % 10</code> is the modulo function, which gives you the remainder of division rather than the quotient (<code>10 / 4 == 2.5</code>, but <code>10 % 4 == 2</code>). It's a great way to bound a number, and modulo 10 is special because it essentially gives you the "ones" place in a positive number. Since we have the "ones" place, we can subtract that from 10 to get our checkdigit.</p>
<pre><code>return checkdigit == int(gtin[-1])
</code></pre>
<p>Now we just return whether or not that checkdigit matches the last digit of our GTIN. Hooray!</p>
</div>
<div class="post-text" itemprop="text">
<p>You need to pass <code>digit_1</code> as the function can only see variables defined within it. This means you need to return <code>digit_1</code> from <code>GTIN</code>. You will need to do this for all the variables within a function that are defined within it.</p>
<p>Since you have many such variables, it would be simpler to store them all in a lists called <code>digits</code>, <code>total</code>, and <code>final_total</code>, where <code>digit[0]</code> would be the integer you have currently defined as digit_1 and <code>digit_7</code> would be the integer currently defined in <code>gtin_number_8</code>. You should create another list for <code>totals</code>, and <code>final_total</code>. To achieve this without changing your entire code I suggest the following.</p>
<p>The last lines of your <code>def GTIN():</code> should be:</p>
<pre><code>digits = [digit_1, digit_2, digit_3, digit_4, digit_5, digit_6, digit_7, GTIN_number_8]
#create a totals list in similar way
#create a final_totals list in similar way
return digits, totals, final_totals
</code></pre>
<p>Then when you call <code>GTIN()</code> ensure to store the returned variables. When you define validation ensure you can pass <code>digits</code>, <code>totals</code> , and <code>final_totals</code>. </p>
<pre><code>if(option == 1):
    digits, totals, final_totals = GTIN()
elif(option == 2):
    validation(digits, totals, final_totals)
</code></pre>
<p>I included how your function should index the list for the first 3 digits, but this will be similar for all the values. Remember <code>gtin_number_8</code> is stored in <code>digits[7]</code> </p>
<pre><code>def validation(digits, totals, final_totals):
    print("Your previous GTIN code:", digits[0], digits[1], digits[2])
</code></pre>
<p>I would strongly suggest moving <code>import math</code> to the first line of your code. Modules are only imported once and remain for the entire session, so you do not need to import the module every time the function runs.</p>
<p>EDIT: I previously forgot to pass totals, final_totals.</p>
</div>
<span class="comment-copy">Please include the error message you are getting.</span>
<span class="comment-copy">Questions seeking debugging help ("why isn't this code working?") must include the desired behavior, a specific problem or error and the shortest code necessary to reproduce it in the question itself. Questions without a clear problem statement are not useful to other readers. See: <a href="http://stackoverflow.com/help/mcve">How to create a Minimal, Complete, and Verifiable example.</a></span>
<span class="comment-copy"><code>digit_1</code> is not defined in the function <code>validation</code>. <code>return</code> those values from <code>GTIN</code> to the caller and use them as parameters for <code>validation</code>. Don't rely on global variables!</span>
<span class="comment-copy">So use parameter passing? @Matthias</span>
<span class="comment-copy">Actually, is there any necessity to take the digit one by one as input? rather than taking as a whole? that is really affecting readability and making things complex. Do you have the idea of lists and loops?</span>
<span class="comment-copy">Is there no easier method? According to my tutor, it should be a lot easier to validate it then actually designing the program. I think I might be over complicating it.</span>
<span class="comment-copy">Are you familiar with lists? You should put all your digits in a list, such that <code>digit[0] = digit_1</code></span>
<span class="comment-copy">@user1435522 that's just a string! :)</span>
<span class="comment-copy">Well, functions communicate with the outside world by accepting <i>arguments</i>.  If you want a general-purpose function <code>validate()</code> to work on values from outside its own scope,  set it up so that it accepts input arguments (between its parentheses) and works with them.  Then, when you call <code>validate</code>, pass in the numbers you want checked.</span>
<span class="comment-copy">I want to use the easiest method possible plus, strings aren't my strong point to use; therefore, I don't want to wreck my whole program because of it. I hope you understand! @user1435522</span>
<span class="comment-copy">I would use that method but I'm not confident with it; therefore, I couldn't explain it let alone convert it to pseudo code and a flowchart. Sorry if I sound stupid!</span>
<span class="comment-copy">@Lebby not at all. I was writing up a much lengthier answer and got 4 phone calls and a knock on my office door before I could post :). If there's still something you don't understand, let me know.</span>
<span class="comment-copy">I now understand your method a lot more now - thanks - however, this solution wouldn't validate the code step by step for the user. Everything has to be be printed to the user in the definition validation.</span>
<span class="comment-copy">It's my coursework but I appreciate the help anyways. Thank goodness I don't want to go further into programming when I'm older as I find it too complex. We have to use print statements unfortunately as we have to explain it to the user as it says so in the criteria. Thanks again!</span>
<span class="comment-copy">True, but I just don't enjoy it! Thanks however for giving me an insight of an actual program! Thanks!!</span>
<span class="comment-copy">I added your modifications however it still won't work. This is the syntax error I now receive: Traceback (most recent call last):   File "G:\Year 10 - Computer Science\GCSE Coursework\Part One\Code Versions\GTIN Code V4.py", line 89, in &lt;module&gt;     validation(digits) TypeError: validation() takes 0 positional arguments but 1 was given &gt;&gt;&gt;</span>
<span class="comment-copy">Did you do <code>def validation(digits, totals)</code>? Also, look at my edit, you need to pass all the variables that are used in <code>validation()</code> but not defined within <code>validation()</code></span>
<span class="comment-copy">I've just added your edited version but now nothing in the program works as the name 'digits' isn't defined.</span>
<span class="comment-copy">I suspect there's a spelling error, but I can't be sure without looking. I'd suggest updating your post with the new code, and a minimal example with 3 digits, so everyone can see where you are having trouble.</span>
<span class="comment-copy">I've given the code with the modifications that you suggested.</span>
