<div class="post-text" itemprop="text">
<p>The python language reference mentions three objects which have a single, unique instance: <code>None</code>, <code>NotImplemented</code>, and <code>Ellipsis</code> (<a href="https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy" rel="nofollow noreferrer">section 3.2 "The Standard Type Hierarchy"</a>).  The test <code>x is None</code> is a common idiom made possible by the guaranteed uniqueness of <code>None</code>.  I cannot find any other mention of unique-instance objects, either in python documentation or on stack overflow.  A few questions, like <a href="https://stackoverflow.com/questions/6185475/custom-placeholder-like-none-in-python">this one</a> have interesting suggestions for ways to construct such objects, but what I want to know is whether there are any beyond these three built-ins that I've missed.</p>
<p>For example, <code>()</code> appears to be unique (in admittedly very limited testing in CPython), so is the test <code>x is ()</code> safe?  Or is <code>x == ()</code> mandatory for this case?</p>
</div>
<div class="post-text" itemprop="text">
<p>Nope, there are no other built in types that have single values. The only relative of these singletons is the <code>bool</code> type which allows for two values (namely <code>True</code> and <code>False</code>)*.</p>
<p>In <code>Python 2.x</code> (I cannot find them in <code>3.x</code>) you can see this limitation by importing <code>NotImplementedType, EllipsisType, NoneType</code> from the <strong><a href="https://docs.python.org/2.7/library/types.html" rel="nofollow"><code>types</code></a></strong> module and realize that it is explicitly not with it's fancy custom <code>TypeError</code>:</p>
<pre><code>In [13]: from types import NoneType

In [14]: n = NoneType()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-14-b386f51143fb&gt; in &lt;module&gt;()
----&gt; 1 n = NoneType()

TypeError: cannot create 'NoneType' instances
</code></pre>
<p><code>()</code> is unfortunately not unique, it represents an empty tuple, if the type <code>Tuple</code> was unique in the sense that <code>NoneType</code> is unique then all its instances would require to have <strong>the same value</strong>.</p>
<hr/>
<p>If you want to take a closer look at these, they are located in <strong><a href="https://hg.python.org/cpython/file/tip/Objects/object.c" rel="nofollow"><code>Objects/object.c</code></a></strong> in lines <strong><a href="https://hg.python.org/cpython/file/tip/Objects/object.c#l1351" rel="nofollow"><code>1351</code></a></strong> and <strong><a href="https://hg.python.org/cpython/file/tip/Objects/object.c#l1473" rel="nofollow"><code>1473</code></a></strong> for <code>None</code> and <code>NotImplemented</code> respectively. Ellipsis is yet to be found.</p>
<hr/>
<p>*Update: Apparently, <code>True</code> and <code>False</code> are <strong>also</strong> singletons, according to <strong><a href="https://www.python.org/dev/peps/pep-0285/" rel="nofollow"><code>PEP 285 - Adding a bool type</code></a></strong>:</p>
<blockquote>
<p>The values False and True will be singletons, like None.  Because
      the type has two values, perhaps these should be called
      "doubletons"?  The real implementation will not allow other
      instances of bool to be created</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Well... you can think of any global object as being "unique" in the sense that it is always the same object.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; x = file
&gt;&gt;&gt; x is file
True
&gt;&gt;&gt; x = True
&gt;&gt;&gt; x is True
True
&gt;&gt;&gt; x = ZeroDivisionError
&gt;&gt;&gt; x is ZeroDivisionError
True
</code></pre>
<p>There is nothing special about:</p>
<pre><code>&gt;&gt;&gt; x = None
&gt;&gt;&gt; x is None
True
</code></pre>
<p>What you are probably wondering is why you should test <code>x is None</code> rather than <code>x == None</code>.</p>
<p>The answer is: <code>x == None</code> will call <code>x.__eq__(None)</code> which may return <code>True</code> in all sorts of situations where <code>x</code> is not actually <code>None</code> (although in reality that is not very common).</p>
<p><strong>Instance?</strong></p>
<p>Well, you may say there is a difference: <code>None</code> is an instance.</p>
<p>Well, the truth is, everything in Python is an object, which means everything is an instance. In my examples, <code>file</code> and <code>ZeroDivisionError</code> are instances of <code>type</code>, <code>True</code> is instance of <code>bool</code> and <code>None</code> is instance of <code>NoneType</code> (note that <code>type</code> is an instance of <code>type</code>, so there are no exceptions to the rule).</p>
<p>There is one special thing about <code>None</code> - it is the only instance of <code>NoneType</code> and you cannot make others (unless there is some good trick?)</p>
<p>But that is actually a property of <code>NoneType</code> - it does not let you make new instances:</p>
<pre><code>TypeError: cannot create 'NoneType' instances
</code></pre>
<p>But that is not really essential for the whole story.</p>
<p><strong>EDIT</strong>  These "<em>unique-instance objects</em>" are called singletons. You can make some of yours, of course.</p>
</div>
<div class="post-text" itemprop="text">
<p>For what is worth, <code>()</code> is not unique in PyPy 4.0.1:</p>
<pre><code>&gt;&gt;&gt;&gt; x = ()
&gt;&gt;&gt;&gt; x is ()
False
</code></pre>
</div>
<span class="comment-copy">It makes no sense to test for <code>x is ()</code>,  <code>if x</code> would achieve the same. Why are you actually asking?</span>
<span class="comment-copy">There are many possible values for which <code>bool(x)</code> is <code>False</code>.  I needed to check whether <code>x</code> was actually <code>()</code>, not one of the other possibilities, for exactly the same reason that you use <code>x is None</code>.</span>
<span class="comment-copy">not if  x is a tuple, <code>isinstance(x, tuple)</code> would also explicitly allow you to check that x was in fact a tuple</span>
<span class="comment-copy">It was helpful to see this and realize that I could also return NotImplemented instead of None (and test it using 'is')  when I want to signal that something doesn't really exist when None is a valid value (i.e. the object being requested from a function/method exists, but it can have the value of None   vs the object not existing)</span>
<span class="comment-copy">He mentioned CPython specifically.</span>
