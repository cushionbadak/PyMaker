<div class="post-text" itemprop="text">
<p>Given a dictionary like so:</p>
<pre><code>my_map = { 'a': 1, 'b':2 }
</code></pre>
<p>How can one invert this map to get:</p>
<pre><code>inv_map = { 1: 'a', 2: 'b' }
</code></pre>
<p><strong>EDITOR NOTE:</strong> <code>map</code> changed to <code>my_map</code> to avoid conflicts with the built-in function, <code>map</code>. Some comments may be affected below.</p>
</div>
<div class="post-text" itemprop="text">
<p>For Python 2.7.x</p>
<pre><code>inv_map = {v: k for k, v in my_map.iteritems()}
</code></pre>
<p>For Python 3+:</p>
<pre><code>inv_map = {v: k for k, v in my_map.items()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Assuming that the values in the dict are unique:</p>
<pre><code>dict((v, k) for k, v in my_map.iteritems())
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the values in <code>my_map</code> aren't unique:</p>
<pre><code>inv_map = {}
for k, v in my_map.iteritems():
    inv_map[v] = inv_map.get(v, [])
    inv_map[v].append(k)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def inverse_mapping(f):
    return f.__class__(map(reversed, f.items()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this:</p>
<pre><code>inv_map = dict(zip(my_map.values(), my_map.keys()))
</code></pre>
<p>(Note that <a href="https://docs.python.org/library/stdtypes.html#dictionary-view-objects" rel="noreferrer">the Python docs on dictionary views</a> explicitly guarantee that <code>.keys()</code> and <code>.values()</code> have their elements in the same order, which allows the approach above to work.)</p>
<p>Alternatively:</p>
<pre><code>inv_map = dict((my_map[k], k) for k in my_map)
</code></pre>
<p>or using python 3.0's dict comprehensions</p>
<pre><code>inv_map = {my_map[k] : k for k in my_map}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Another, more functional, way:</p>
<pre><code>my_map = { 'a': 1, 'b':2 }
dict(map(reversed, my_map.items()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This expands upon the answer <a href="https://stackoverflow.com/questions/483666/python-reverse-inverse-a-mapping/485368#485368">Python reverse / invert a mapping</a>, applying to when the values in the dict aren't unique.</p>
<pre><code>class ReversibleDict(dict):

    def reversed(self):
        """
        Return a reversed dict, with common values in the original dict
        grouped into a list in the returned dict.

        Example:
        &gt;&gt;&gt; d = ReversibleDict({'a': 3, 'c': 2, 'b': 2, 'e': 3, 'd': 1, 'f': 2})
        &gt;&gt;&gt; d.reversed()
        {1: ['d'], 2: ['c', 'b', 'f'], 3: ['a', 'e']}
        """

        revdict = {}
        for k, v in self.iteritems():
            revdict.setdefault(v, []).append(k)
        return revdict
</code></pre>
<p>The implementation is limited in that you cannot use <code>reversed</code> twice and get the original back. It is not symmetric as such. It is tested with Python 2.6. <a href="http://pastebin.com/vMf7tNA5" rel="nofollow noreferrer">Here</a> is a use case of how I am using to print the resultant dict.</p>
<p>If you'd rather use a <code>set</code> than a <code>list</code>, and there are applications for which this makes sense, instead of <code>setdefault(v, []).append(k)</code>, use <code>setdefault(v, set()).add(k)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>Combination of list and dictionary comprehension. Can handle duplicate keys</p>
<pre><code>{v:[i for i in d.keys() if d[i] == v ] for k,v in d.items()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Adding my 2 cents of pythonic way:</p>
<pre><code>inv_map = dict(map(reversed, my_map.items()))
</code></pre>
<p>Example:</p>
<pre><code>In [7]: my_map
Out[7]: {1: 'one', 2: 'two', 3: 'three'}

In [8]: inv_map = dict(map(reversed, my_map.items()))

In [9]: inv_map
Out[9]: {'one': 1, 'three': 3, 'two': 2}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the values aren't unique, and you're a little hardcore:</p>
<pre><code>inv_map = dict(
    (v, [k for (k, xx) in filter(lambda (key, value): value == v, my_map.items())]) 
    for v in set(my_map.values())
)
</code></pre>
<p>Especially for a large dict, note that this solution is far less efficient than the answer <a href="https://stackoverflow.com/questions/483666/python-reverse-inverse-a-mapping/485368#485368">Python reverse / invert a mapping</a> because it loops over <code>items()</code> multiple times.</p>
</div>
<div class="post-text" itemprop="text">
<p>We may also reverse a dictionary with duplicate keys using <code>defaultdict</code>:</p>
<pre><code>from collections import Counter, defaultdict

def invert_dict(d):
    d_inv = defaultdict(list)
    for k, v in c.items():
        d_inv[v].append(k)
    return d_inv

text = 'aaa bbb ccc ddd aaa bbb ccc aaa' 
c = Counter(text.split()) # Counter({'aaa': 3, 'bbb': 2, 'ccc': 2, 'ddd': 1})
dict(invert_dict(c)) # {1: ['ddd'], 2: ['bbb', 'ccc'], 3: ['aaa']}  
</code></pre>
<p>See <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer">here</a>:</p>
<blockquote>
<p>This technique is simpler and faster than an equivalent technique using <code>dict.setdefault()</code>.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>In addition to the other functions suggested above, if you like lambdas:</p>
<pre class="lang-py prettyprint-override"><code>invert = lambda mydict: {v:k for k, v in mydict.items()}
</code></pre>
<p>Or, you could do it this way too:</p>
<pre class="lang-py prettyprint-override"><code>invert = lambda mydict: dict( zip(mydict.values(), mydict.keys()) )
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This handles non-unique values and retains much of the look of the unique case. </p>
<pre><code>inv_map = {v:[k for k in my_map if my_map[k] == v] for v in my_map.itervalues()}
</code></pre>
<p>For Python 3.x, replace <em>itervalues</em> with <em>values</em>. 
I can't take credit for this... it was suggested by Icon Jack. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think the best way to do this is to define a class. Here is an implementation of a "symmetric dictionary":</p>
<pre><code>class SymDict:
    def __init__(self):
        self.aToB = {}
        self.bToA = {}

    def assocAB(self, a, b):
        # Stores and returns a tuple (a,b) of overwritten bindings
        currB = None
        if a in self.aToB: currB = self.bToA[a]
        currA = None
        if b in self.bToA: currA = self.aToB[b]

        self.aToB[a] = b
        self.bToA[b] = a
        return (currA, currB)

    def lookupA(self, a):
        if a in self.aToB:
            return self.aToB[a]
        return None

    def lookupB(self, b):
        if b in self.bToA:
            return self.bToA[b]
        return None
</code></pre>
<p>Deletion and iteration methods are easy enough to implement if they're needed.</p>
<p>This implementation is way more efficient than inverting an entire dictionary (which seems to be the most popular solution on this page). Not to mention, you can add or remove values from your SymDict as much as you want, and your inverse-dictionary will always stay valid -- this isn't true if you simply reverse the entire dictionary once.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow">zip</a></p>
<pre><code>inv_map = dict(zip(my_map.values(), my_map.keys()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try this for python 2.7/3.x</p>
<pre><code>inv_map={};
for i in my_map:
    inv_map[my_map[i]]=i    
print inv_map
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would do it that way in python 2.</p>
<pre><code>inv_map = {my_map[x] : x for x in my_map}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>def invertDictionary(d):
    myDict = {}
  for i in d:
     value = d.get(i)
     myDict.setdefault(value,[]).append(i)   
 return myDict
 print invertDictionary({'a':1, 'b':2, 'c':3 , 'd' : 1})
</code></pre>
<p>This will provide output as : {1: ['a', 'd'], 2: ['b'], 3: ['c']}</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>  def reverse_dictionary(input_dict):
      out = {}
      for v in input_dict.values():  
          for value in v:
              if value not in out:
                  out[value.lower()] = []

      for i in input_dict:
          for j in out:
              if j in map (lambda x : x.lower(),input_dict[i]):
                  out[j].append(i.lower())
                  out[j].sort()
      return out
</code></pre>
<p>this code do like this:</p>
<pre><code>r = reverse_dictionary({'Accurate': ['exact', 'precise'], 'exact': ['precise'], 'astute': ['Smart', 'clever'], 'smart': ['clever', 'bright', 'talented']})

print(r)

{'precise': ['accurate', 'exact'], 'clever': ['astute', 'smart'], 'talented': ['smart'], 'bright': ['smart'], 'exact': ['accurate'], 'smart': ['astute']}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For instance, you have the following dictionary:</p>
<pre><code>dict = {'a': 'fire', 'b': 'ice', 'c': 'fire', 'd': 'water'}
</code></pre>
<p>And you wanna get it in such an inverted form:</p>
<pre><code>inverted_dict = {'fire': ['a', 'c'], 'ice': ['b'], 'water': ['d']}
</code></pre>
<p><strong>First Solution</strong>. For inverting <strong>key-value</strong> pairs in your dictionary use a <code>for</code>-loop approach:</p>
<pre><code># Use this code to invert dictionaries that have non-unique values

inverted_dict = dictio()
for key, value in dict.items():
    inverted_dict.setdefault(value, list()).append(key)
</code></pre>
<p><strong>Second Solution</strong>. Use a <em>dictionary comprehension</em> approach for inversion:</p>
<pre><code># Use this code to invert dictionaries that have unique values

inverted_dict = {value: key for key, value in dict.items()}
</code></pre>
<p><strong>Third Solution</strong>. Use <em>reverting the inversion</em> approach:</p>
<pre><code># Use this code to invert dictionaries that have lists of values

dict = {value: key for key in inverted_dict for value in my_map[key]}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Function is symmetric for values of type list; Tuples are coverted to lists when performing reverse_dict(reverse_dict(dictionary))</p>
<pre><code>def reverse_dict(dictionary):
    reverse_dict = {}
    for key, value in dictionary.iteritems():
        if not isinstance(value, (list, tuple)):
            value = [value]
        for val in value:
            reverse_dict[val] = reverse_dict.get(val, [])
            reverse_dict[val].append(key)
    for key, value in reverse_dict.iteritems():
        if len(value) == 1:
            reverse_dict[key] = value[0]
    return reverse_dict
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since dictionaries require one unique key within the dictionary unlike values, we have to append the reversed values into a list of sort to be included within the new specific keys. </p>
<pre><code>def r_maping(dictionary):
    List_z=[]
    Map= {}
    for z, x in dictionary.iteritems(): #iterate through the keys and values
        Map.setdefault(x,List_z).append(z) #Setdefault is the same as dict[key]=default."The method returns the key value available in the dictionary and if given key is not available then it will return provided default value. Afterward, we will append into the default list our new values for the specific key.
    return Map
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Not something completely different, just a bit rewritten recipe from Cookbook. It's futhermore optimized by retaining <code>setdefault</code> method, instead of each time getting it through the instance:</p>
<pre><code>def inverse(mapping):
    '''
    A function to inverse mapping, collecting keys with simillar values
    in list. Careful to retain original type and to be fast.
    &gt;&gt; d = dict(a=1, b=2, c=1, d=3, e=2, f=1, g=5, h=2)
    &gt;&gt; inverse(d)
    {1: ['f', 'c', 'a'], 2: ['h', 'b', 'e'], 3: ['d'], 5: ['g']}
    '''
    res = {}
    setdef = res.setdefault
    for key, value in mapping.items():
        setdef(value, []).append(key)
    return res if mapping.__class__==dict else mapping.__class__(res)
</code></pre>
<p>Designed to be run under CPython 3.x, for 2.x replace <code>mapping.items()</code> with <code>mapping.iteritems()</code></p>
<p>On my machine runs a bit faster, than other examples here</p>
</div>
<div class="post-text" itemprop="text">
<p>If values aren't unique AND may be a hash (one dimension):</p>
<pre><code>for k, v in myDict.items():
    if len(v) &gt; 1:
        for item in v:
            invDict[item] = invDict.get(item, [])
            invDict[item].append(k)
    else:
        invDict[v] = invDict.get(v, [])
        invDict[v].append(k)
</code></pre>
<p>And with a recursion if you need to dig deeper then just one dimension:</p>
<pre><code>def digList(lst):
    temp = []
    for item in lst:
        if type(item) is list:
            temp.append(digList(item))
        else:
            temp.append(item)
    return set(temp)

for k, v in myDict.items():
    if type(v) is list:
        items = digList(v)
        for item in items:
            invDict[item] = invDict.get(item, [])
            invDict[item].append(k)
    else:
        invDict[v] = invDict.get(v, [])
        invDict[v].append(k)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Inverse your dictionary:</p>
<pre><code>dict_ = {"k0":"v0", "k1":"v1", "k2":"v1"}
inversed_dict_ = {val: key for key, val in dict_.items()}

print(inversed_dict_["v1"])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>As per my comment to the question. I think the easiest and one liner which works for both Python2 and Python 3 will be </p>
<pre><code>dict(zip(inv_map.values(), inv_map.keys()))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Fast functional solution for non-bijective maps (values not unique):</p>
<pre><code>from itertools import imap, groupby

def fst(s):
    return s[0]

def snd(s):
    return s[1]

def inverseDict(d):
    """
    input d: a -&gt; b
    output : b -&gt; set(a)
    """
    return {
        v : set(imap(fst, kv_iter))
        for (v, kv_iter) in groupby(
            sorted(d.iteritems(),
                   key=snd),
            key=snd
        )
    }
</code></pre>
<p>In theory this should be faster than adding to the set (or appending to the list) one by one like in the <a href="https://stackoverflow.com/a/485368/711694">imperative solution</a>.</p>
<p>Unfortunately the values have to be sortable, the sorting is required by groupby.</p>
</div>
<div class="post-text" itemprop="text">
<p>I wrote this with the help of cycle 'for' and method '.get()' and I changed the name 'map' of the dictionary to 'map1' because 'map' is a function.</p>
<pre><code>def dict_invert(map1):
    inv_map = {} # new dictionary
    for key in map1.keys():
        inv_map[map1.get(key)] = key
    return inv_map
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>For all kinds of dictionary, no matter if they don't have unique values to use as keys, you can create a list of keys for each value</p>
<pre><code>inv_map = {v: inv_map.get(v, []) + [k] for k,v in my_map.items()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is not the best solution, but it works. Let's say the dictionary we want to reverse is: </p>
<p>dictionary = {'a': 1, 'b': 2, 'c': 3}, then:</p>
<pre><code>dictionary = {'a': 1, 'b': 2, 'c': 3}
reverse_dictionary = {}
for index, val in enumerate(list(dictionary.values())):
    reverse_dictionary[val] = list(dictionary.keys())[index]
</code></pre>
<p>The output of reverse_dictionary, should be {1: 'a', 2: 'b', 3: 'c'}</p>
</div>
<span class="comment-copy">dict(zip(inv_map.values(), inv_map.keys()))</span>
<span class="comment-copy">@SeshadriVS, it works (for both Python 2 and Python 3, thanks! =)</span>
<span class="comment-copy">@rasen58 Python dictionaries don't have an ordering</span>
<span class="comment-copy">In recent Python 2.7.x versions <code>my_map.items()</code> works as well</span>
<span class="comment-copy">This'll work except that it won't work if there is not unicity in the values. In that case you'll loose some entries</span>
<span class="comment-copy"><b>Fun Fact:</b> <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6">Dictionaries will be ordered (by time of insertion) in Python 3.7 onwards</a>.</span>
<span class="comment-copy">@Mattias, this is true for Python 3.6. For version 3.7 the order-preserving is official: <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="nofollow noreferrer">mail.python.org/pipermail/python-dev/2017-December/151283.html</a>. BDFL said so.</span>
<span class="comment-copy">What if the values aren't unique?</span>
<span class="comment-copy">The values have to be hashable too</span>
<span class="comment-copy">@Buttons840: If the values aren’t unique, there is no unique inversion of the dictionary anyway or, with other words, inverting does not make sense.</span>
<span class="comment-copy">@Buttons840 Only the last key will appear for the value. There are probably no guarantees on the order that <code>iteritems()</code> will output, so it may be assumed that an arbitrary key will be assigned for a non-unique value, in a way that will be apparently reproducible under some conditions, but no so in general.</span>
<span class="comment-copy">@Wrzlprmft There is a natural definition for inverse in the case of non unique values. Every value is mapped to the set of keys leading to it.</span>
<span class="comment-copy">... or just inv_map.setdefault(v, []).append(k). I used to be a defaultdict fanboy, but then I got screwed one too many times and concluded that actually explicit is better than implicit.</span>
<span class="comment-copy">This answer is incorrect for multi-map, append here is useless because the value is reset to empty list each time, should use set_default</span>
<span class="comment-copy">@YaroslavBulatov no, the code as shown here isn't broken - <code>inv_map.get(v, [])</code> returns the already-added list if there is one, so the assignment doesn't reset to an empty list. <code>setdefault</code> would still be prettier, though.</span>
<span class="comment-copy">A set would make more sense here. The keys are (probably) hashable, and there is no order. <code>inv_map.setdefault(v, set()).add(k)</code>.</span>
<span class="comment-copy">Upvoted for retaining the type rather than silently converting into dict</span>
<span class="comment-copy">@gerrit: Too bad this motivation is not explained in the answer itself. (Moreover, the answer has to explaination at all at the moment.)</span>
<span class="comment-copy">This... <b>is extremely clever.</b> While non-human-readable, this one-liner successfully preserves both the type <i>and</i> ordering (e.g., for <code>OrderedDict</code> types) of the original dictionary by passing an anonymous iterable to the <code>dict(iterable)</code> form of mapping constructors. Explanatory exposition would have been helpful, of course. <code>&lt;/sigh&gt;</code></span>
<span class="comment-copy">Clever it may be, but it doesn't work when more than one key has the same value in the original dictionary.</span>
<span class="comment-copy">Notice that this only works if the keys are unique (which is almost never the case if you want to invert them).</span>
<span class="comment-copy">According to <a href="https://www.python.org/dev/peps/pep-0274/" rel="nofollow noreferrer">python.org/dev/peps/pep-0274</a> dict comprehensions are available in 2.7+, too.</span>
<span class="comment-copy">Thanks for posting. I am not sure this is preferable - to quote Guido Van Rossum in PEP 279: "<code>filter</code> and <code>map</code> should die and be subsumed into list comprehensions, not grow more variants".</span>
<span class="comment-copy">Yeah, that's a fair point Brian. I was just adding it as a point of conversation. The dict comprehension way is more readable for most I'd imagine. (And likely faster too I'd guess)</span>
<span class="comment-copy">In Python 3 it should be <code>my_map.items()</code>.</span>
<span class="comment-copy">Might be less readable than others, but this way does have the benefit of being able to swap out <code>dict</code> with other mapping types such as <code>collections.OrderedDict</code> or <code>collections.defaultdict</code></span>
<span class="comment-copy">this would also be a good place to use sets instead of lists, i.e. <code>revdict.setdefault(v, set()).add(k)</code></span>
<span class="comment-copy">Of course, but that's exacty why it's a good reason to use <code>set</code>. It's the intrinsic type that applies here. What if I want to find all keys where the values are not <code>1</code> or <code>2</code>? Then I can just do <code>d.keys() - inv_d[1] - inv_d[2]</code> (in Python 3)</span>
<span class="comment-copy">This is a clone of <a href="https://stackoverflow.com/a/22047530">Brendan Maguire's answer</a> which has been given three years before.</span>
<span class="comment-copy">This is just plain unreadable and a good example of how to not write maintainable code. I won't <code>-1</code> because it still answers the question, just my opinion.</span>
<span class="comment-copy">-1; all you've done is taken other answers from the page and put them into a lambda. Also, assigning a lambda to a variable is a <a href="https://www.python.org/dev/peps/pep-0008" rel="nofollow noreferrer">PEP 8</a> violation.</span>
<span class="comment-copy">This solution is quite elegant as a one liner and it manages the non unique values case. However it has a complexity in O(n2) which means it should be ok for several dozens of elements but it would be too slow for practical use if you have several hundreds of thousands of elements in your initial dictionary. The solutions based on a default dict are way faster than this one.</span>
<span class="comment-copy">Gabuzo is quite right. This version is (arguably) clearer than some, but it is not suitable for large data.</span>
<span class="comment-copy">I like this idea, though it would be good to note that it trades off additional memory to achieve improved computation. A happier medium may be caching or lazily computing the mirror. It is also worth noting that it could be made more syntactically appealing with e.g. dictionary views and custom operators.</span>
<span class="comment-copy">@BrianM.Hunt It trades off memory, but not a lot. You only store two sets of pointers to each object. If your objects are much bigger than single integers, this won't make much of a difference. If you have huge table of tiny objects on the other hand, you might need to consider those suggestions...</span>
<span class="comment-copy">And I agree, there's more to be done here -- I might flesh this out into a fully functioning datatype later</span>
<span class="comment-copy"><i>"This implementation is way more efficient than inverting an entire dictionary"</i> - um, why? I don't see any plausible way this approach can have a significant performance benefit; you've still got two dictionaries this way. If anything, I'd expect this to be <i>slower</i> than, say, inverting the dict with a comprehension, because if you invert the dict Python can plausibly know in advance how many buckets to allocate in the underlying C data structure and create the inverse map without ever calling <code>dictresize</code>, but this approach denies Python that possibility.</span>
<span class="comment-copy">Generally, answers are much more helpful if they include an explanation of what the  code is intended to do, and why that solves the problem without introducing others.</span>
<span class="comment-copy">It is a nice solution</span>
<span class="comment-copy">It's very nice, but a lot of unexplained decisions (for example, why lower case for keys?)</span>
<span class="comment-copy">You might improve your solutions using a defaultdict: it'll remove all the invDict[item] = invDict.get(item, []) lines</span>
<span class="comment-copy"><i>"In theory this should be faster than adding to the set (or appending to the list) one by one"</i> - no. Given <code>n</code> elements in the original dict, your approach has <code>O(n log n)</code> time complexity due to the need to sort the dict's items, whereas the naive imperative approach has <code>O(n)</code> time complexity. For all I know your approach may be faster up until absurdly large <code>dict</code>s in <i>practice</i>, but it certainly isn't faster in theory.</span>
<span class="comment-copy">have you tested it for non-unique values? e.g. <code>map = { 'a': 1, 'b':2, 'c':1 }</code> gives <code>{1: ['c'], 2: ['b']}</code> for <code>inv_map</code>, <code>'a'</code> gets lost (I put <code>inv_map = {}</code> before your line)</span>
<span class="comment-copy">This doesn't work, because the new value of <code>inv_map</code> is not assigned until the comprehension completes</span>
