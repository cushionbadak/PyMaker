<div class="post-text" itemprop="text">
<p>I'm sure you all get a lot of these questions, but I just need more eyes as I can't find the issue.  I'm asking two things of anyone who answers:</p>
<ul>
<li>What is the issue with my code causing me to get an incorrect answer?</li>
<li><em>How in the world</em> did you find the issue?</li>
</ul>
<p>The objective as outlined by <a href="https://projecteuler.net/problem=22" rel="nofollow">Project Euler #22</a> is:</p>
<blockquote>
<p>Using names.txt (right click and 'Save Link/Target As...'), a 46K text
  file containing over five-thousand first names, begin by sorting it
  into alphabetical order. Then working out the alphabetical value for
  each name, multiply this value by its alphabetical position in the
  list to obtain a name score.</p>
<p>For example, when the list is sorted into alphabetical order, COLIN,
  which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the
  list. So, COLIN would obtain a score of 938 Ã— 53 = 49714.</p>
<p>What is the total of all the name scores in the file?</p>
</blockquote>
<p>The list of names they give you is in this format:</p>
<pre><code>"MARY","PATRICIA","LINDA","BARBARA","ELIZABETH","JENNIFER","MARIA","SUSAN","MARGARET","DOROTHY","LISA","NANCY"
</code></pre>
<p>Here is the code:</p>
<pre><code>import datetime, string, pprint

def get_rawdata():
    # Use data = getRawData()
    with open('e22-data') as f:  #e22-data is the list of names
        rawdata = [line.strip('"').split('","') for line in f]
        return rawdata

def alphabetize(data):
    data[0].sort()

    return data

def score_letters(data):
    scores = []
    for n in data[0]:
        score = 0
        for l in n:
            score += alpha.index(l)+1
        scores.append(score)
    return scores

def score_placement(scores):
    products = []
    for n in scores:
        products.append(n*(scores.index(n)+1))
    return products


alpha = string.ascii_uppercase

data = get_rawdata()
data = alphabetize(data)
pprint.pprint(data)
scores = score_letters(data)
products = score_placement(scores)

answer = sum(products)
print(answer)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your code is largely correct, but <code>score_placement()</code> has a subtle error. Your code:</p>
<pre><code>def score_placement(scores):
    products = []
    for n in scores:
        products.append(n*(scores.index(n)+1))
    return products
</code></pre>
<p>This looks at each individual score value (which starts with 49, 35, 19, ...), tries to find the <strong>first index where the value occurs</strong> (using <a href="https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range" rel="nofollow"><code>list.index()</code></a>), and performs the multiplication.</p>
<p>The problem with this approach is that it assumes each score is unique. If another score of 49 comes along later in the list, it will use the index of the first 49 found (which is 1 in the 1-based system).</p>
<p>Hence, you need to look at each score and each index at the same time, instead of trying to find the index in a roundabout way. This altered algorithm is both correct and more time-efficient (<em>O</em>(<em>n</em>) vs. <em>O</em>(<em>n</em><sup>2</sup>)). Here is one way that <code>score_placement()</code> can be written correctly:</p>
<pre><code>def score_placement(scores):
    products = []
    for i in range(len(scores)):
        products.append((i+1)*scores[i])
    return products
</code></pre>
<p>With this small change, the whole program runs to produce the correct answer!</p>
<p>Notes:</p>
<ul>
<li>It is also possible to implement this logic using <code>enumerate()</code>.</li>
<li>You asked about how I went through the debugging process. I have <a href="https://github.com/nayuki/Project-Euler-solutions/blob/master/python/p101.py" rel="nofollow">solved</a> this Project Euler problem before, so I'm familiar with how it works. I looked at the 5 major data-processing statements at the bottom of your code, printed out some values, and compared the numbers with what my intuition told me the answers should be. I found some suspicious behavior, so I homed in on your <code>score_placement()</code> function, read the code, and found the logic error. Finally I implemented a proposed fix and ran it to verify that it worked.</li>
</ul>
</div>
<span class="comment-copy">what is the expected output and what are you getting currently? Also what is in <code>e22-data</code> file?</span>
<span class="comment-copy">Sorry.  Added the info to the question.</span>
<span class="comment-copy">what is the expected output and what are you getting currently for the input you provided?</span>
<span class="comment-copy">As the question says, it's the sum of all the scores (871198282).  My output is not that (57981321).</span>
<span class="comment-copy"><code>[(i)*score for i, score in enumerate(scores, 1)]</code></span>
<span class="comment-copy"><code>return [i * n for i,n in enumerate(scores,1)]</code>.  When you need to number something, <code>enumerate</code> is your friend.  It normally indexes by 0, but the optional 2nd parameter gives a starting number.</span>
<span class="comment-copy">THANK YOU!  I didn't realize index() would do that; I clearly assumed it would return the index for that particular value.  Your explanation makes perfect sense.  Thank you.</span>
<span class="comment-copy">@MarkTolonen Very nice, I learned something new about <code>enumerate()</code>!</span>
