<div class="post-text" itemprop="text">
<p>I'm spawning a process from a script using <code>subprocess</code>. My <code>subprocess</code> takes a JSON input and performs some operations and should return some real time data to the main process. How can I do this from <code>subprocess</code>?
I'm trying something like this. But it is throwing an error. </p>
<p>Following is may main process "main.py"</p>
<pre><code>p = subprocess.Popen(['python','handler.py'],
                            stdin=subprocess.PIPE,stdout=subprocess.PIPE)

p.communicate(JSONEncoder().encode(data))
while True:
     out = process.stdout.read(1)
     if out == '' and process.poll() != None:
        break
     if out != '':
        sys.stdout.write(out)
        sys.stdout.flush()
</code></pre>
<p>Below is my <code>subprocess</code> "handler.py"</p>
<pre><code>if __name__ == '__main__' :

   command = json.load(sys.stdin)
   os.environ["PYTHONPATH"] = "../../"

   if command["cmd"] == "archive" :
      print "command recieved:",command["cmd"]
      file_ids, count = archive(command["files"])
      sys.stdout.write(JSONEncoder().encode(file_ids))
</code></pre>
<p>But it throws an error.</p>
<pre><code>Traceback (most recent call last):
  File "./core/main.py", line 46, in &lt;module&gt;
  out = p.stdout.read(1)
ValueError: I/O operation on closed file
</code></pre>
<p>Am I doing something wrong here?? </p>
</div>
<div class="post-text" itemprop="text">
<p><code>communicate</code> reads all the output from a subprocess and closes it. If you want to be able to read from the process after writing, you have to use something other than <code>communicate</code>, such as <code>p.stdin.write</code>. Alternatively, just use the output of <code>communicate</code>; it should have what you want <a href="https://docs.python.org/3/library/subprocess.html#popen-objects" rel="nofollow noreferrer">https://docs.python.org/3/library/subprocess.html#popen-objects</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>Popen.communicate()</code> does not return until the process is dead and it returns all the output. You can't read subprocess' stdout after it. Look at the top of <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate" rel="nofollow noreferrer">the <code>.communicate()</code> docs</a>:</p>
<blockquote>
<p>Interact with process: Send data to stdin. <strong><em>Read data</em></strong> from stdout and
  stderr, until end-of-file is reached. <strong><em>Wait for process to terminate.</em></strong><sub>emphasis is mine</sub></p>
</blockquote>
<p>If you want to send data and then read the output line by line as text while the child process is still running:</p>
<pre><code>#!/usr/bin/env python3
import json
from subprocess import Popen, PIPE

with Popen(command, stdin=PIPE, stdout=PIPE, universal_newline=True) as process:
    with process.stdin as pipe:
        pipe.write(json.dumps(data))
    for line in process.stdout:
        print(line, end='')
        process(line)
</code></pre>
<p>If you need code for older python versions or you have buffering issues, see <a href="https://stackoverflow.com/q/2715847/4279">Python: read streaming input from subprocess.communicate()</a>.</p>
<p>If all you want is to pass data to the child process and to print the output to terminal:</p>
<pre><code>#!/usr/bin/env python3.5
import json
import subprocess

subprocess.run(command, input=json.dumps(data).encode())
</code></pre>
<p>If your actual child process is a Python script then consider importing it as a module and running the corresponding functions instead, see <a href="https://stackoverflow.com/q/30076185/4279">Call python script with input with in a python script using subprocess</a>.</p>
</div>
<span class="comment-copy">Where does <code>process</code> come from? You create <code>p</code> with <code>subprocessPopen</code>.</span>
