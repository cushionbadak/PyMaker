<div class="post-text" itemprop="text">
<p>I am struggeling getting a python import right. What I want to achieve is to have a module with several source files and a test folder with unit tests.</p>
<p>No matter what I do, I can't get py.test-3 to execute my tests. My directory layout looks like this:</p>
<pre><code>.
├── module
│   ├── __init__.py
│   └── testclass.py
└── tests
    └── test_testclass.py
</code></pre>
<p>The __init__.py file looks like this:</p>
<pre><code>__all__ = ['testclass']
</code></pre>
<p>The testclass.py file looks like this:</p>
<pre><code>class TestClass(object):

    def __init__(self):
        self.id = 1
</code></pre>
<p>And my unit test like this:</p>
<pre><code>import pytest
from module import TestClass

def test_test_class():
    tc = TestClass()
    assert(tc.id==1)
</code></pre>
<p>No matter how I call py.test-3 I will end up with a:</p>
<pre><code>E   ImportError: No module named 'module'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First, unless you change the <code>tests/test_testclass.py</code>, you need to change <code>module/__init__.py</code> as follow:</p>
<pre><code>from .testclass import TestClass

__all__ = ['TestClass']
</code></pre>
<p>And, when you run py.test set <a href="https://docs.python.org/3/using/cmdline.html?highlight=pythonpath#envvar-PYTHONPATH" rel="noreferrer"><code>PYTHONPATH</code></a> environment variable to let the interpreter know when to find modules:</p>
<pre><code>PYTHONPATH=. py.test
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I would put in a header of testfile the path execution for pytest:</p>
<p>example:</p>
<pre><code>import os, sys                                                                  
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))
</code></pre>
<p>With this I could know the path of any subfolder in my (test) project</p>
</div>
<span class="comment-copy"><a href="http://asciinema.org/a/a94r31cms8zdqtf8p1dn38vma" rel="nofollow noreferrer">asciinema.org/a/a94r31cms8zdqtf8p1dn38vma</a></span>
<span class="comment-copy">This works for me! Would it be the pythonic way of doing it? Still struggeling how a library layout should look like best.</span>
<span class="comment-copy">@Fabian, I think so. It does not require you to change the test code at least.</span>
<span class="comment-copy">Wow I just saw your video. Thanks for the effort! Your dedication is amazing.</span>
<span class="comment-copy">I am not a real fan of this solution since I would have to repeat it in any test file which goes against the DRY principle.</span>
<span class="comment-copy">This can be put in the "_<i>init_</i>.py" of the tests/ folder and you wouldn't need to repeat it for the entire directory.</span>
