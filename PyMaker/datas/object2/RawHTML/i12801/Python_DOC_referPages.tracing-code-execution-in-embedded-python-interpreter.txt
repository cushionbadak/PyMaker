<div class="post-text" itemprop="text">
<p>I'd like to create an application with embedded python interpreter and basic debugging capabilities.
Now I'm searching the API for functions which I could use to <strong>run code step-by-step and get the number of the current line of code</strong> which is being (or is about to be) executed.</p>
<p>Official Python docs seem a little underdone for me when comes it to <a href="https://docs.python.org/3.5/c-api/init.html#profiling-and-tracing" rel="nofollow noreferrer">tracing and profiling</a>.
There is, for example, no information about the meaning of the return value of <code>Py_tracefunc</code>.</p>
<p>So far I've assembled the following:</p>
<pre><code>#include &lt;Python.h&gt;

static int lineCounter = 0;

int trace(PyObject *obj, PyFrameObject *frame, int what, PyObject *arg)
{
    if(what == PyTrace_LINE)
    {
        lineCounter += 1;
        printf("line %d\n", lineCounter);
    }
    return 0;
}

int main(int argc, char *argv[])
{
    wchar_t *program = Py_DecodeLocale(argv[0], NULL);
    if (program == NULL) {
        fprintf(stderr, "Fatal error: cannot decode argv[0]\n");
        exit(1);
    }
    Py_SetProgramName(program);  /* optional but recommended */
    Py_Initialize();
    PyEval_SetTrace(trace, NULL);
    char *code = "def adder(a, b):\n"
                 " return a + b\n"
                 "x = 3\n"
                 "y = 4\n"
                 "print(adder(x, y))\n";
    PyRun_SimpleString(code);
    Py_Finalize();
    PyMem_RawFree(program);
    return 0;
}
</code></pre>
<p>However, the compiler outputs the following error:</p>
<pre class="lang-none prettyprint-override"><code>hello.c:5:26: error: unknown type name ‘PyFrameObject’
 int trace(PyObject *obj, PyFrameObject *frame, int what, PyObject *arg)
                          ^
</code></pre>
<p>I'm operating on ManjaroLinux and using the following to compile the above:</p>
<pre class="lang-none prettyprint-override"><code>gcc -o hello hello.c -I/usr/include/python3.5m  -Wno-unused-result -Wsign-compare -Wunreachable-code -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector-strong --param=ssp-buffer-size=4 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -L/usr/lib -lpython3.5m -lpthread -ldl  -lutil -lm  -Xlinker -export-dynamic
</code></pre>
<p>I've found that I can replace <code>PyFrameObject</code> with <code>struct _frame</code> and then program compiles but everyone knows it's a dirty hack, not a solution.</p>
<p>The executable outputs the following:</p>
<pre class="lang-none prettyprint-override"><code>line 1
line 2
line 3
line 4
line 5
7
</code></pre>
<p><strong>But I'd like the traces to follow the execution flow of the script (that is: start from line 3, then 4, 5 and then, due to the function call, 2).</strong></p>
<p><strong>I could not find anything about step-by-step execution.</strong></p>
<p>Could you recommend some other sources about Python C API with more information and some introduction to the topic?</p>
<p><em>I awarded the answer with bounty since it would expire anyway. However, I'm still looking and would be grateful for answers for other questions from above.</em></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<pre><code>hello.c:5:26: error: unknown type name ‘PyFrameObject’
</code></pre>
</blockquote>
<p>This error means that <code>PyFrameObject</code> has not been declared.  I did a <a href="https://www.google.com/search?q=pyframeobject&amp;ie=utf-8&amp;oe=utf-8">Google search</a> which showed me <a href="http://svn.python.org/projects/python/trunk/Include/frameobject.h">frameobject.h</a> in the Python source tree is where that structure is declared.</p>
<p>I expect that you can add the line</p>
<pre><code>#include &lt;frameobject.h&gt;
</code></pre>
<p>to resolve this.</p>
</div>
<div class="post-text" itemprop="text">
<p>The pyFrameObject has a</p>
<pre><code>int f_lineno;
</code></pre>
<p>field. 
You can use it. But apparently, it is not always storing the correct value. So, you should probably use the function:</p>
<pre><code>/* Return the line of code the frame is currently executing. */
int PyFrame_GetLineNumber(PyFrameObject *);      
</code></pre>
<p>then, you can use </p>
<pre><code>frame-&gt;f_code-&gt;co_filename 
</code></pre>
<p>to get the current file name</p>
<pre><code>frame-&gt;f_code-&gt;co_name 
</code></pre>
<p>to get the current function name
and </p>
<pre><code>frame-&gt;f_back
</code></pre>
<p>to get one level down in the call stack.
                                        .</p>
</div>
<div class="post-text" itemprop="text">
<p><code>PyFrameObject</code> is just a <code>_frame</code> struct. Just replace <code>PyFrameObject</code> by <code>_frame</code> in your function signature and you won't have to include any additional python headers.</p>
</div>
<span class="comment-copy">This might help regarding the trace function: <a href="https://docs.python.org/3/library/sys.html#sys.settrace" rel="nofollow noreferrer">docs.python.org/3/library/sys.html#sys.settrace</a></span>
<span class="comment-copy">Apart from that, use the Source, Luke!</span>
<span class="comment-copy">@SvenMarnach: you mean Python header files?</span>
<span class="comment-copy">All of the CPython source code, actually, not only the header files.  You are working with implementation details of the CPython interpreter here, and in these cases, it's often necessary (o at least helpful) to look at the source code in addition to the documentation.  E.g. see <a href="https://github.com/python/cpython/blob/1fe0fd9feb6a4472a9a1b186502eb9c0b2366326/Include/pystate.h#L53" rel="nofollow noreferrer">the definition of <code>Py_tracefunc</code></a> for the meaning of the return value.</span>
<span class="comment-copy">Well, read the source code.  Here's where the trace function is called: <a href="https://github.com/python/cpython/blob/aed79b41a1fbcedd4697269e3fdd40af5ee82b14/Python/ceval.c#L4352" rel="nofollow noreferrer">github.com/python/cpython/blob/…</a>.  You can look for the callers of this function (in the same file), and see how it behaves if you return an error (it won't enter the frame).  If you don't want this to happen, you probably don't want to throw an exception.</span>
<span class="comment-copy">I read somewhere on the Internet that Python.h alone should be sufficient. The example from the docs also includes only Python.h.</span>
<span class="comment-copy">Could you provide any source claiming that frameobject.h should be included separately?</span>
<span class="comment-copy">I inferred it from the error message you posted.  You can determine for yourself by reading the source.  Read Python.h and follow the various includes to see where/if it includes frameobject.h.  It might even be conditional based on defined preprocessor tokens.</span>
<span class="comment-copy">For that much I could just trust you. Too bad the docs are pretty selective. But that simple compilation error isn't really my biggest worry, as you can probably guess.</span>
<span class="comment-copy">@Luke <code>Python.h</code> should be sufficient. However, it could be a bug in python source code</span>
