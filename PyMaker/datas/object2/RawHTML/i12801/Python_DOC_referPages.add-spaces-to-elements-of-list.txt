<div class="post-text" itemprop="text">
<p>I've been struggling for a while with this. I have a list with sublist and I wanted to add an element that is a space before  each element of the sublists. for example:</p>
<pre><code>lin = [[2], [3], [2], [2, 2], [2]]
</code></pre>
<p>the result should be:</p>
<pre><code>lin = [[' ',2], [' ',3], [' ',2], [' ',2, ' ',2], [' ',2]]
</code></pre>
<p>I've tried to do this:</p>
<pre><code>for a in lin:
    for e in a:
        e = (' ') , e 
</code></pre>
<p>but I obtained exactly the same list with no alterations</p>
</div>
<div class="post-text" itemprop="text">
<p>I assume that you actually meant something like the comment of Tigerhawk.</p>
<p>Your problem is that <code>e= (' ') , e</code> is just overwriting the value of <code>e</code> (which was originally each value in your nested list) to a tuple containing a space and the original value. This doesnt actually change anything inside of your list, just changes whatever it is that <code>e</code> was originally pointing to.</p>
<p>You can instead do something like this:</p>
<pre><code>&gt;&gt;&gt; lin = [[2], [3], [2], [2, 2], [2]]
&gt;&gt;&gt; for a in lin:
        for i in range(len(a)-1,-1,-1):
            a.insert(i, ' ')


&gt;&gt;&gt; lin
[[' ', 2], [' ', 3], [' ', 2], [' ', 2, ' ', 2], [' ', 2]]
</code></pre>
<p>Note the inner loop: <code>for i in range(len(a)-1,-1,-1):</code> This is done this way because of 2 reasons:</p>
<ol>
<li>you dont want to be actually looping through <code>a</code> since you are going to be changin the values in <code>a</code></li>
<li>You need to start with the highest index because if you start from 0, the indexes of the rest of the items ahead of it will change.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehension and <code>chain.from_iterable</code> from <a href="https://docs.python.org/3/library/itertools.html" rel="nofollow"><code>itertools</code></a></p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; lin = [[2], [3], [2], [2, 2], [2]]
&gt;&gt;&gt; [list(chain.from_iterable([(' ', i) for i in j])) for j in lin]
[[' ', 2], [' ', 3], [' ', 2], [' ', 2, ' ', 2], [' ', 2]]
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A neat, functional solution, that uses only built-in functions</p>
<pre><code>lin = [[2], [3], [2], [2, 2], [2]]

add_spaces = lambda l: [i for x in zip(' '*len(l), l) for i in x]
new_list = [add_spaces(l) for l in lin]
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; print new_list
[[' ', 2], [' ', 3], [' ', 2], [' ', 2, ' ', 2], [' ', 2]]
</code></pre>
</div>
<span class="comment-copy">Do you mean <code>lin=[[' ',2], [' ',3], [' ',2], [' ',2, ' ',2], [' ',2]]</code>?</span>
<span class="comment-copy">yes exactly that</span>
<span class="comment-copy">Whoops, didn't notice the <code>[2, 2]</code> element in there. Good work <i>Stomach Whisperer</i></span>
<span class="comment-copy">Uh oh. The name is sticking.</span>
<span class="comment-copy">thank you so much for your help and for the explanation! yes I wanted to mean what Tigerhawk said. Thanks again I really appreciate it.</span>
<span class="comment-copy">moar functions! <code>lambda l: list(itertools.chain.from_iterable(zip(itertools.repeat(' '), l)))</code></span>
<span class="comment-copy">@AdamSmith - that, good sir, is a work of art.</span>
<span class="comment-copy">(and I'm very happy that it worked, since I whipped it together without running it through my repr first...)</span>
