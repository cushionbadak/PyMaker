<div class="post-text" itemprop="text">
<p>Is there a <code>range()</code> equivalent for floats in Python?</p>
<pre><code>&gt;&gt;&gt; range(0.5,5,1.5)
[0, 1, 2, 3, 4]
&gt;&gt;&gt; range(0.5,5,0.5)

Traceback (most recent call last):
  File "&lt;pyshell#10&gt;", line 1, in &lt;module&gt;
    range(0.5,5,0.5)
ValueError: range() step argument must not be zero
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I don't know a built-in function, but writing one like <a href="https://stackoverflow.com/a/477610/623735">this</a> shouldn't be too complicated.</p>
<pre><code>def frange(x, y, jump):
  while x &lt; y:
    yield x
    x += jump
</code></pre>
<hr/>
<p>As the comments mention, this could produce unpredictable results like:</p>
<pre><code>&gt;&gt;&gt; list(frange(0, 100, 0.1))[-1]
99.9999999999986
</code></pre>
<p>To get the expected result, you can use one of the other answers in this question, or as @Tadhg mentioned, you can use <code>decimal.Decimal</code> as the <code>jump</code> argument. Make sure to initialize it with a string rather than a float.</p>
<pre><code>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; list(frange(0, 100, decimal.Decimal('0.1')))[-1]
Decimal('99.9')
</code></pre>
<p>Or even:</p>
<pre><code>import decimal

def drange(x, y, jump):
  while x &lt; y:
    yield float(x)
    x += decimal.Decimal(jump)
</code></pre>
<p>And then:</p>
<pre><code>&gt;&gt;&gt; list(drange(0, 100, '0.1'))[-1]
99.9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can either use:</p>
<pre><code>[x / 10.0 for x in range(5, 50, 15)]
</code></pre>
<p>or use lambda / map:</p>
<pre><code>map(lambda x: x/10.0, range(5, 50, 15))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I used to use <code>numpy.arange</code> but had some complications controlling the number of elements it returns, due to floating point errors.  So now I use <code>linspace</code>, e.g.:</p>
<pre><code>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.linspace(0, 10, num=4)
array([  0.        ,   3.33333333,   6.66666667,  10.        ])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Pylab has <code>frange</code> (a wrapper, actually, for <code>matplotlib.mlab.frange</code>):</p>
<pre><code>&gt;&gt;&gt; import pylab as pl
&gt;&gt;&gt; pl.frange(0.5,5,0.5)
array([ 0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5,  5. ])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Eagerly evaluated (2.x <code>range</code>):</p>
<pre><code>[x * .5 for x in range(10)]
</code></pre>
<p>Lazily evaluated (2.x <code>xrange</code>, 3.x <code>range</code>):</p>
<pre><code>itertools.imap(lambda x: x * .5, xrange(10)) # or range(10) as appropriate
</code></pre>
<p>Alternately:</p>
<pre><code>itertools.islice(itertools.imap(lambda x: x * .5, itertools.count()), 10)
# without applying the `islice`, we get an infinite stream of half-integers.
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>using <code>itertools</code>: lazily evaluated floating point range:</p>
<pre><code>&gt;&gt;&gt; from itertools import count, takewhile
&gt;&gt;&gt; def frange(start, stop, step):
        return takewhile(lambda x: x&lt; stop, count(start, step))

&gt;&gt;&gt; list(frange(0.5, 5, 1.5))
# [0.5, 2.0, 3.5]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I helped add the function <a href="https://more-itertools.readthedocs.io/en/latest/api.html#more_itertools.numeric_range" rel="nofollow noreferrer">numeric_range</a> to the package <a href="https://github.com/erikrose/more-itertools" rel="nofollow noreferrer">more-itertools</a>.</p>
<p><code>more_itertools.numeric_range(start, stop, step)</code> acts like the built in function range but can handle floats, Decimal, and Fraction types.</p>
<pre><code>&gt;&gt;&gt; from more_itertools import numeric_range
&gt;&gt;&gt; tuple(numeric_range(.1, 5, 1))
(0.1, 1.1, 2.1, 3.1, 4.1)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A <a href="https://stackoverflow.com/a/7267280/638546">solution without numpy etc dependencies</a> was provided by kichik but due to <a href="https://docs.python.org/2/tutorial/floatingpoint.html" rel="nofollow noreferrer">the floating point arithmetics</a>, it often behaves unexpectedly. As noted by <a href="https://stackoverflow.com/questions/7267226/range-for-floats/7267280#comment59825229_7267280">me</a> and <a href="https://stackoverflow.com/questions/7267226/range-for-floats/7267280#comment45048932_7267287">blubberdiblub</a>, additional elements easily sneak into the result. For example <code>naive_frange(0.0, 1.0, 0.1)</code> would yield <code>0.999...</code> as its last value and thus yield 11 values in total.</p>
<p>A robust version is provided here: </p>
<pre><code>def frange(x, y, jump=1.0):
    '''Range for floats.'''
    i = 0.0
    x = float(x)  # Prevent yielding integers.
    x0 = x
    epsilon = jump / 2.0
    yield x  # yield always first value
    while x + epsilon &lt; y:
        i += 1.0
        x = x0 + i * jump
        yield x
</code></pre>
<p>Because the multiplication, the rounding errors do not accumulate. The use of <code>epsilon</code> takes care of possible rounding error of the multiplication, even though issues of course might rise in the very small and very large ends. Now, as expected:</p>
<pre><code>&gt; a = list(frange(0.0, 1.0, 0.1))
&gt; a[-1]
0.9
&gt; len(a)
10
</code></pre>
<p>And with somewhat larger numbers:</p>
<pre><code>&gt; b = list(frange(0.0, 1000000.0, 0.1))
&gt; b[-1]
999999.9
&gt; len(b)
10000000
</code></pre>
<p>The code is also available as <a href="https://gist.github.com/axelpale/3e780ebdde4d99cbb69ffe8b1eada92c" rel="nofollow noreferrer">a GitHub Gist</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>There is no such built-in function, but you can use the following (Python 3 code) to do the job as safe as Python allows you to.</p>
<pre><code>from fractions import Fraction

def frange(start, stop, jump, end=False, via_str=False):
    """
    Equivalent of Python 3 range for decimal numbers.

    Notice that, because of arithmetic errors, it is safest to
    pass the arguments as strings, so they can be interpreted to exact fractions.

    &gt;&gt;&gt; assert Fraction('1.1') - Fraction(11, 10) == 0.0
    &gt;&gt;&gt; assert Fraction( 0.1 ) - Fraction(1, 10) == Fraction(1, 180143985094819840)

    Parameter `via_str` can be set to True to transform inputs in strings and then to fractions.
    When inputs are all non-periodic (in base 10), even if decimal, this method is safe as long
    as approximation happens beyond the decimal digits that Python uses for printing.


    For example, in the case of 0.1, this is the case:

    &gt;&gt;&gt; assert str(0.1) == '0.1'
    &gt;&gt;&gt; assert '%.50f' % 0.1 == '0.10000000000000000555111512312578270211815834045410'


    If you are not sure whether your decimal inputs all have this property, you are better off
    passing them as strings. String representations can be in integer, decimal, exponential or
    even fraction notation.

    &gt;&gt;&gt; assert list(frange(1, 100.0, '0.1', end=True))[-1] == 100.0
    &gt;&gt;&gt; assert list(frange(1.0, '100', '1/10', end=True))[-1] == 100.0
    &gt;&gt;&gt; assert list(frange('1', '100.0', '.1', end=True))[-1] == 100.0
    &gt;&gt;&gt; assert list(frange('1.0', 100, '1e-1', end=True))[-1] == 100.0
    &gt;&gt;&gt; assert list(frange(1, 100.0, 0.1, end=True))[-1] != 100.0
    &gt;&gt;&gt; assert list(frange(1, 100.0, 0.1, end=True, via_str=True))[-1] == 100.0

    """
    if via_str:
        start = str(start)
        stop = str(stop)
        jump = str(jump)
    start = Fraction(start)
    stop = Fraction(stop)
    jump = Fraction(jump)
    while start &lt; stop:
        yield float(start)
        start += jump
    if end and start == stop:
        yield(float(start))
</code></pre>
<p>You can verify all of it by running a few assertions:</p>
<pre><code>assert Fraction('1.1') - Fraction(11, 10) == 0.0
assert Fraction( 0.1 ) - Fraction(1, 10) == Fraction(1, 180143985094819840)

assert str(0.1) == '0.1'
assert '%.50f' % 0.1 == '0.10000000000000000555111512312578270211815834045410'

assert list(frange(1, 100.0, '0.1', end=True))[-1] == 100.0
assert list(frange(1.0, '100', '1/10', end=True))[-1] == 100.0
assert list(frange('1', '100.0', '.1', end=True))[-1] == 100.0
assert list(frange('1.0', 100, '1e-1', end=True))[-1] == 100.0
assert list(frange(1, 100.0, 0.1, end=True))[-1] != 100.0
assert list(frange(1, 100.0, 0.1, end=True, via_str=True))[-1] == 100.0

assert list(frange(2, 3, '1/6', end=True))[-1] == 3.0
assert list(frange(0, 100, '1/3', end=True))[-1] == 100.0
</code></pre>
<p>Code available on <a href="https://github.com/nazgul17/frange/blob/master/frange.py" rel="nofollow noreferrer">GitHub</a></p>
</div>
<div class="post-text" itemprop="text">
<p><strong>Why Is There No Floating Point Range Implementation In The Standard Library?</strong></p>
<p>As made clear by all the posts here, there is no floating point version of <code>range()</code>. That said, the omission makes sense if we consider that the <code>range()</code> function is often used as an index (and of course, that means an <em>accessor</em>) generator. So, when we call <code>range(0,40)</code>, we're in effect saying we want 40 values starting at 0, up to 40, but non-inclusive of 40 itself. </p>
<p>When we consider that index generation is as much about the number of indices as it is their values, the use of a float implementation of <code>range()</code> in the standard library makes less sense. For example, if we called the function <code>frange(0, 10, 0.25)</code>, we would expect both 0 and 10 to be included, but that would yield a vector with 41 values. </p>
<p>Thus, an <code>frange()</code> function depending on its use will always exhibit counter intuitive behavior; it either has too many values as perceived from the indexing perspective or is not inclusive of a number that reasonably should be returned from the mathematical perspective.</p>
<p><strong>The Mathematical Use Case</strong></p>
<p>With that said, as discussed, <code>numpy.linspace()</code> performs the generation with the mathematical perspective nicely:</p>
<pre><code>numpy.linspace(0, 10, 41)
array([  0.  ,   0.25,   0.5 ,   0.75,   1.  ,   1.25,   1.5 ,   1.75,
         2.  ,   2.25,   2.5 ,   2.75,   3.  ,   3.25,   3.5 ,   3.75,
         4.  ,   4.25,   4.5 ,   4.75,   5.  ,   5.25,   5.5 ,   5.75,
         6.  ,   6.25,   6.5 ,   6.75,   7.  ,   7.25,   7.5 ,   7.75,
         8.  ,   8.25,   8.5 ,   8.75,   9.  ,   9.25,   9.5 ,   9.75,  10.
])
</code></pre>
<p><strong>The Indexing Use Case</strong></p>
<p>And for the indexing perspective, I've written a slightly different approach with some tricksy string magic that allows us to specify the number of decimal places.</p>
<pre><code># Float range function - string formatting method
def frange_S (start, stop, skip = 1.0, decimals = 2):
    for i in range(int(start / skip), int(stop / skip)):
        yield float(("%0." + str(decimals) + "f") % (i * skip))
</code></pre>
<p>Similarly, we can also use the built-in <code>round</code> function and specify the number of decimals:</p>
<pre><code># Float range function - rounding method
def frange_R (start, stop, skip = 1.0, decimals = 2):
    for i in range(int(start / skip), int(stop / skip)):
        yield round(i * skip, ndigits = decimals)
</code></pre>
<p><strong>A Quick Comparison &amp; Performance</strong></p>
<p>Of course, given the above discussion, these functions have a fairly limited use case. Nonetheless, here's a quick comparison:</p>
<pre><code>def compare_methods (start, stop, skip):

    string_test  = frange_S(start, stop, skip)
    round_test   = frange_R(start, stop, skip)

    for s, r in zip(string_test, round_test):
        print(s, r)

compare_methods(-2, 10, 1/3)
</code></pre>
<p>The results are identical for each:</p>
<pre><code>-2.0 -2.0
-1.67 -1.67
-1.33 -1.33
-1.0 -1.0
-0.67 -0.67
-0.33 -0.33
0.0 0.0
...
8.0 8.0
8.33 8.33
8.67 8.67
9.0 9.0
9.33 9.33
9.67 9.67
</code></pre>
<p>And some timings:</p>
<pre><code>&gt;&gt;&gt; import timeit

&gt;&gt;&gt; setup = """
... def frange_s (start, stop, skip = 1.0, decimals = 2):
...     for i in range(int(start / skip), int(stop / skip)):
...         yield float(("%0." + str(decimals) + "f") % (i * skip))
... def frange_r (start, stop, skip = 1.0, decimals = 2):
...     for i in range(int(start / skip), int(stop / skip)):
...         yield round(i * skip, ndigits = decimals)
... start, stop, skip = -1, 8, 1/3
... """

&gt;&gt;&gt; min(timeit.Timer('string_test = frange_s(start, stop, skip); [x for x in string_test]', setup=setup).repeat(30, 1000))
0.024284090992296115

&gt;&gt;&gt; min(timeit.Timer('round_test = frange_r(start, stop, skip); [x for x in round_test]', setup=setup).repeat(30, 1000))
0.025324633985292166
</code></pre>
<p>Looks like the string formatting method wins by a hair on my system. </p>
<p><strong>The Limitations</strong></p>
<p>And finally, a demonstration of the point from the discussion above and one last limitation:</p>
<pre><code># "Missing" the last value (10.0)
for x in frange_R(0, 10, 0.25):
    print(x)

0.25
0.5
0.75
1.0
...
9.0
9.25
9.5
9.75
</code></pre>
<p>Further, when the <code>skip</code> parameter is not divisible by the <code>stop</code> value, there can be a yawning gap given the latter issue:</p>
<pre><code># Clearly we know that 10 - 9.43 is equal to 0.57
for x in frange_R(0, 10, 3/7):
    print(x)

0.0
0.43
0.86
1.29
...
8.14
8.57
9.0
9.43
</code></pre>
<p>There are ways to address this issue, but at the end of the day, the best approach would probably be to just use Numpy.</p>
</div>
<div class="post-text" itemprop="text">
<h2>A simpler library-less version</h2>
<p>Aw, heck -- I'll toss in a simple library-less version.  Feel free to improve on it[*]:</p>
<pre><code>def frange(start=0, stop=1, jump=0.1):
    nsteps = int((stop-start)/jump)
    dy = stop-start
    # f(i) goes from start to stop as i goes from 0 to nsteps
    return [start + float(i)*dy/nsteps for i in range(nsteps)]
</code></pre>
<p>The core idea is that <code>nsteps</code> is the number of steps to get you from start to stop and <code>range(nsteps)</code> always emits integers so there's no loss of accuracy.  The final step is to map [0..nsteps] linearly onto [start..stop].</p>
<h2>edit</h2>
<p>If, like <a href="https://stackoverflow.com/users/1472770/alancalvitti">alancalvitti</a> you'd like the series to have exact rational representation, you can always use <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow noreferrer">Fractions</a>:</p>
<pre><code>from fractions import Fraction

def rrange(start=0, stop=1, jump=0.1):
    nsteps = int((stop-start)/jump)
    return [Fraction(i, nsteps) for i in range(nsteps)]
</code></pre>
<p>[*] In particular, <code>frange()</code> returns a list, not a generator.  But it sufficed for my needs.</p>
</div>
<div class="post-text" itemprop="text">
<p>i wrote a function that returns a tuple of a range of double precision floating point numbers without any decimal places beyond the hundredths. it was simply a matter of parsing the range values like strings and splitting off the excess. I use it for displaying ranges to select from within a UI. I hope someone else finds it useful.</p>
<pre><code>def drange(start,stop,step):
    double_value_range = []
    while start&lt;stop:
        a = str(start)
        a.split('.')[1].split('0')[0]
        start = float(str(a))
        double_value_range.append(start)
        start = start+step
    double_value_range_tuple = tuple(double_value_range)
   #print double_value_range_tuple
    return double_value_range_tuple
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>There several answers here that don't handle simple edge cases like negative step, wrong start, stop etc. Here's the version that handles many of these cases correctly giving same behaviour as native <code>range()</code>:</p>
<pre><code>def frange(start, stop=None, step=1):
  if stop is None:
    start, stop = 0, start
  steps = int((stop-start)/step)
  for i in range(steps):
    yield start
    start += step  
</code></pre>
<p>Note that this would error out step=0 just like native <code>range</code>. One difference is that native range returns object that is indexable and reversible while above doesn't.</p>
<p>You can <a href="https://repl.it/@sytelus/range" rel="nofollow noreferrer">play with this code</a> and test cases here.</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>def Range(*argSequence):
    if len(argSequence) == 3:
        imin = argSequence[0]; imax = argSequence[1]; di = argSequence[2]
        i = imin; iList = []
        while i &lt;= imax:
            iList.append(i)
            i += di
        return iList
    if len(argSequence) == 2:
        return Range(argSequence[0], argSequence[1], 1)
    if len(argSequence) == 1:
        return Range(1, argSequence[0], 1)
</code></pre>
<p>Please note the first letter of Range is capital. This naming method is not encouraged for functions in Python. You can change Range to something like drange or frange if you want. The "Range" function behaves just as you want it to. You can check it's manual here [ <a href="http://reference.wolfram.com/language/ref/Range.html" rel="nofollow noreferrer">http://reference.wolfram.com/language/ref/Range.html</a> ].</p>
</div>
<div class="post-text" itemprop="text">
<p>I think that there is a very simple answer that really emulates all the features of range but for both float and integer. In this solution, you just suppose that your approximation by default is 1e-7 (or the one you choose) and you can change it when you call the function.</p>
<pre><code>def drange(start,stop=None,jump=1,approx=7): # Approx to 1e-7 by default
  '''
  This function is equivalent to range but for both float and integer
  '''
  if not stop: # If there is no y value: range(x)
      stop= start
      start= 0
  valor= round(start,approx)
  while valor &lt; stop:
      if valor==int(valor):
          yield int(round(valor,approx))
      else:
          yield float(round(valor,approx))
      valor += jump
  for i in drange(12):
      print(i)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Is there a range() equivalent for floats in Python?
NO
Use this:</p>
<pre><code>def f_range(start, end, step):
    a = range(int(start/0.01), int(end/0.01), int(step/0.01))
    var = []
    for item in a:
        var.append(item*0.01)
    return var
</code></pre>
</div>
<span class="comment-copy">Those aren't fractions but floats. And floats are... well, likely to give different results than you expect.</span>
<span class="comment-copy">A quick workaround would be to treat integers as decimals, eg: <code>range(5, 50, 5)</code>, and then just divide every number by 10.</span>
<span class="comment-copy">@delnan - updated. I'm willing to accept minute inaccuracies for the convenience of having a float range</span>
<span class="comment-copy">possible duplicate of <a href="http://stackoverflow.com/questions/477486/python-decimal-range-step-value">Python decimal range() step value</a></span>
<span class="comment-copy">@NullUserException - this is just an example - the real code is of course parametric :)</span>
<span class="comment-copy">Python's motto is actually <a href="http://www.python.org/dev/peps/pep-0020/" rel="nofollow noreferrer">There should be one-- and preferably only one --obvious way to do it</a>. But Python's awesome anyways :)</span>
<span class="comment-copy">@Jonathan: he probably isn't Dutch :P</span>
<span class="comment-copy"><code>&gt;&gt;&gt; print list(frange(0,100,0.1))[-1]==100.0</code> will be <code>False</code></span>
<span class="comment-copy">-1 <b>Please do not use this code</b>, at least not in software that might ever affect my life. There is no way to make it work reliably. Don't use Akseli Palén's answer either. Use Xaerxess's or wim's answer (except ignore the part about arange).</span>
<span class="comment-copy">this works great <b>if you use <code>decimal.Decimal</code></b> as step instead of floats.</span>
<span class="comment-copy">And array(range(5,50,15)) / 10.0 as numpy arrays have operators for handling division, multiplication and so on</span>
<span class="comment-copy">@edvaldig: you're right, I didn't know about this... Nevertheless I think <code>arange(0.5, 5, 1.5)</code> is IMO more readable.</span>
<span class="comment-copy">I prefer this answer over the accepted one, because the first two solutions presented are based on iterating over integers and deriving the final floats from the integers. This is more robust. If you do it directly with floats, you risk having strange one-off errors due to how floats are represented internally. For instance, if you try <code>list(frange(0, 1, 0.5))</code>, it works fine and 1 is excluded, but if you try <code>list(frange(0, 1, 0.1))</code>, the last value you get is close to 1.0, which is probably not what you want. The solutions presented here don't have this problem.</span>
<span class="comment-copy">Never use numpy.arange (the numpy documentation itself recommends against it). Use numpy.linspace as recommended by wim, or one of the other suggestions in this answer.</span>
<span class="comment-copy">There's still floating point errors though, whithout the use of <code>decimal</code>, e.g.: <code>np.linspace(-.1,10,num=5050)[0] </code></span>
<span class="comment-copy">@TNT  No, that's not an error.  You will find <code>np.linspace(-.1,10,num=5050)[0] == -.1</code> is True.  It's just that the <code>repr(np.float64('-0.1'))</code> shows more digits.</span>
<span class="comment-copy">this is awesome!</span>
<span class="comment-copy">Frange is deprecated since matplotlib version 2.2. numpy.arange should be used.</span>
<span class="comment-copy">+1; but why not <code>(x * .5 for x in range(10))</code> as a generator expression for lazy evaluation?</span>
<span class="comment-copy">Because that would be too easy, I guess? :)</span>
<span class="comment-copy">+1 for using <code>itertools.takewhile</code>. However, <code>itertools.count(start, step)</code> suffers from accumulated floating-point errors. (Evaluate <code>takewhile(lambda x: x &lt; 100, count(0, 0.1))</code> for example.) I would write <code>takewhile(lambda x: x &lt; stop, (start + i * step for i in count()))</code> instead.</span>
<span class="comment-copy">This fails with frange(2.0, 17.0/6.0, 1.0/6.0). There is no way it can ever be made robust.</span>
<span class="comment-copy">@benrg Thanks for pointing this out! It led me to realize that the epsilon should depend on the jump, so I reviewed the algorithm and repaired the issue. This new version is much more robust, isn't it?</span>
<span class="comment-copy">This is quite a twisted argument. range() should simply be looked at iteration generator and whether it is used in for loop or to index something should be left to callers. People have been using floats in for loop for millenia and above justifications are nonsensical. People in Python committees screwed up here big time and good argument probably got drowned out by some twisted justifications like above. It's that plain and simple. There are now too many decisions like above enshrined in Python language.</span>
<span class="comment-copy">If you want to include the stop value in the output, by adding stop+jump, this method then reverts to the naive result with bad floating points in the middle, try <code>frange(0,1.1,0.1)</code> and even more of those with a choice like <code>frange(0,1.05,0.1)</code></span>
<span class="comment-copy">@alancalvitti: What is your definition of a "bad" floating point?  Yes, the results may not print nicely, but frange() provides the closest set of evenly spaced values within the limits of floating point representation.  How would you improve it?</span>
<span class="comment-copy">good point, I'm so used to high level language where you would range over rational numbers for such a task, that Py feels like assembly.</span>
<span class="comment-copy">Assembly?  Hrrumph!  ;)  Of course Python CAN provide exact representation with Fractions: <a href="https://docs.python.org/3/library/fractions.html" rel="nofollow noreferrer">docs.python.org/3/library/fractions.html</a></span>
<span class="comment-copy">Right, thanks, but for example, the language I like automatically converts these types, so 1/2 is a rational, while 1/2.0 is float, there's no need to declare them as such - leave declarations to Java, which is even more lower/assembly than Py.</span>
<span class="comment-copy">not to be confused with</span>
<span class="comment-copy">Drange :  <a href="https://en.wikipedia.org/wiki/Theodore_Drange" rel="nofollow noreferrer">en.wikipedia.org/wiki/Theodore_Drange</a></span>
<span class="comment-copy">This does not provide an answer to the question. Once you have sufficient <a href="http://stackoverflow.com/help/whats-reputation">reputation</a> you will be able to <a href="http://stackoverflow.com/help/privileges/comment">comment on any post</a>; instead, <a href="http://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead">provide answers that don't require clarification from the asker</a>. - <a href="/review/low-quality-posts/14863104">From Review</a></span>
<span class="comment-copy">OK I try to edit the answer.</span>
<span class="comment-copy">Pretty bad solution, try <code>f_range(0.01,0.02,0.001)</code>... For most practical purposes, <code>arange</code> from Numpy is a simple, safe and fast solution.</span>
<span class="comment-copy">You are right. With numpy is 1.8 faster than my code.</span>
<span class="comment-copy">You are right. With numpy is 1.8 faster than my code. But the system where I work is completely closed. Only Python and pyserial no more.</span>
