<div class="post-text" itemprop="text">
<p>I wanted to automate the process of copying files (in their target folders) to their corresponding source folders (which has the same folder structure as the source) located in a different directory on computer...<br/><br/>I tried to use python's shutil.copytree, but that will copy all the target folders into the source folders and the Python documentation said that "The destination directory, named by dst, must not already exist" (which, in my case, break the rule). So what I wanted to do is to only copy the target files to the corresponding folder, so that the source and target files would end up staying in the same folder...Is it possible to do by using python?<br/><br/>Here I attached to the question a screenshot to further explain what I meant. <br/><br/>Thank you so much for your help! At the meantime, I'll try to do more research about it too!</p>
<p><a href="https://i.stack.imgur.com/3yOzz.png" rel="nofollow noreferrer"><img alt="enter image description here" src="https://i.stack.imgur.com/3yOzz.png"/></a></p>
</div>
<div class="post-text" itemprop="text">
<p>Here's the modified version of <code>shutil.copytree</code> which does not create directory (removed <code>os.makedirs</code> call).</p>
<pre><code>import os
from shutil import Error, WindowsError, copy2, copystat

def copytree(src, dst, symlinks=False, ignore=None):
    names = os.listdir(src)
    if ignore is not None:
        ignored_names = ignore(src, names)
    else:
        ignored_names = set()

    # os.makedirs(dst)
    errors = []
    for name in names:
        if name in ignored_names:
            continue
        srcname = os.path.join(src, name)
        dstname = os.path.join(dst, name)
        try:
            if symlinks and os.path.islink(srcname):
                linkto = os.readlink(srcname)
                os.symlink(linkto, dstname)
            elif os.path.isdir(srcname):
                copytree(srcname, dstname, symlinks, ignore)
            else:
                # Will raise a SpecialFileError for unsupported file types
                copy2(srcname, dstname)
        # catch the Error from the recursive copytree so that we can
        # continue with other files
        except Error, err:
            errors.extend(err.args[0])
        except EnvironmentError, why:
            errors.append((srcname, dstname, str(why)))
    try:
        copystat(src, dst)
    except OSError, why:
        if WindowsError is not None and isinstance(why, WindowsError):
            # Copying file access times may fail on Windows
            pass
        else:
            errors.append((src, dst, str(why)))
    if errors:
        raise Error, errors
</code></pre>
<p>Using <a href="https://pypi.python.org/pypi/mock" rel="nofollow"><code>mock</code></a> (or <a href="https://docs.python.org/3/library/unittest.mock.html" rel="nofollow"><code>unittest.mock</code></a> in Python 3.x), you can temporarily disable <code>os.makedirs</code> by replacing <code>os.makedirs</code> with a Mock object (See <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch" rel="nofollow"><code>unittest.mock.patch</code></a>):</p>
<pre><code>from shutil import copytree
import mock  # import unittest.mock as mock   in Python 3.x

with mock.patch('os.makedirs'):
    copytree('PlaceB', 'PlaceA')
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I just found a rather easy way to make it happen.</p>
<p>We can use ditto command to merge the 2 folders together. </p>
<p><code>ditto PlaceB PlaceA</code> </p>
</div>
<span class="comment-copy">Just copy them 1 by 1 with shutil.copyfile()</span>
<span class="comment-copy">BTW, your terminology is a little confusing: we normally copy <i>from</i> the source <i>to</i> the target (or destination).</span>
