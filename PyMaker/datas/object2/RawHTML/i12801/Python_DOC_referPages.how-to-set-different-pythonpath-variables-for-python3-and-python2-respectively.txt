<div class="post-text" itemprop="text">
<p>I want to add a specific library path only to python2. After adding <code>export PYTHONPATH="/path/to/lib/"</code> to my <code>.bashrc</code>, however, executing python3 gets the error: Your PYTHONPATH points to a site-packages dir for Python 2.x but you are running Python 3.x!</p>
<p>I think it is due to that python2 and python3 share the common <code>PYTHONPATH</code> variable.</p>
<p>So, can I set different <code>PYTHONPATH</code> variables respectively for python2 and python3. If not, how can I add a library path exclusively to a particular version of python?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can create a configuration file <code>mymodule.pth</code> under <code>lib/site-packages</code> (on Windows) or <code>lib/pythonX.Y/site-packages</code> (on Unix and Macintosh), then add one line containing the directory to add to python path.</p>
<p>From <a href="https://docs.python.org/2/library/site.html" rel="noreferrer">docs.python2</a> and <a href="https://docs.python.org/3/library/site.html" rel="noreferrer">docs.python3</a>:</p>
<blockquote>
<blockquote>
<blockquote>
<p>A path configuration file is a file whose name has the form <code>name.pth</code> and exists in one of the four directories mentioned above; its contents are additional items (one per line) to be added to <code>sys.path</code>. Non-existing items are never added to <code>sys.path</code>, and no check is made that the item refers to a directory rather than a file. No item is added to <code>sys.path</code> more than once. Blank lines and lines beginning with # are skipped. Lines starting with <code>import</code> (followed by space or tab) are executed.</p>
</blockquote>
</blockquote>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p><code>PYTHONPATH</code> is somewhat of a hack as far as package management is concerned. A "pretty" solution would be to <em>package</em> your library and <em>install</em> it.</p>
<p>This could sound more tricky than it is, so let me show you how it works.</p>
<p>Let us assume your "package" has a single file named <code>wow.py</code> and you keep it in <code>/home/user/mylib/wow.py</code>.</p>
<p>Create the file <code>/home/user/mylib/setup.py</code> with the following content:</p>
<pre><code>from setuptools import setup

setup(name="WowPackage",
      packages=["."],
)
</code></pre>
<p>That's it, now you can "properly install" your package into the Python distribution of your choice without the need to bother about <code>PYTHONPATH</code>. As far as "proper installation" is concerned, you have at least three options:</p>
<ul>
<li><p>"Really proper". Will copy your code to your python site-packages directory:</p>
<pre><code>$ python setup.py install
</code></pre></li>
<li><p>"Development". Will only add a link from the python site-packages to <code>/home/user/mylib</code>. This means that changes to code in your directory will have effect.</p>
<pre><code>$ python setup.py develop
</code></pre></li>
<li><p>"User". If you do not want to write to the system directories, you can install the package (either "properly" or "in development mode") to <code>/home/user/.local</code> directory, where Python will also find them on its own. For that, just add <code>--user</code> to the command.</p>
<pre><code>$ python setup.py install --user
$ python setup.py develop --user
</code></pre></li>
</ul>
<p>To remove a package installed in development mode, do</p>
<pre><code>$ python setup.py develop -u
</code></pre>
<p>or</p>
<pre><code>$ python setup.py develop -u --user
</code></pre>
<p>To remove a package installed "properly", do</p>
<pre><code> $ pip uninstall WowPackage
</code></pre>
<p>If your package is more interesting than a single file (e.g. you have subdirectories and such), just list those in the <code>packages</code> parameter of the <code>setup</code> function (you will need to list everything recursively, hence you'll use a helper function for larger libraries). Once you get a hang of it, make sure to read <a href="https://pythonhosted.org/an_example_pypi_project/setuptools.html">a more detailed manual</a> as well.</p>
<p>In the end, go and contribute your package to PyPI -- it is as simple as calling <code>python setup.py sdist register upload</code> (you'll need a PyPI username, though).</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>I found that there is no way to modify <code>PYTHONPATH</code> that is only for <code>python2</code> or only for <code>python3</code>. I had to use a <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer"><code>.pth</code> file</a>.</strong></p>
<p>What I had to do was:</p>
<ul>
<li>make sure directory is created in my home: <code>$HOME/.local/lib/python${MAJOR_VERSION}.${MINOR_VERSION}/site-packages</code></li>
<li>create a <code>.pth</code> file in that directory </li>
<li>test that your <code>.pth</code> file is work</li>
<li>done</li>
</ul>
<p>For more info on `.pth. file syntax and how they work please see: <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer">python2 docs</a> and <a href="https://docs.python.org/3/library/site.html" rel="nofollow noreferrer">python3 docs</a>.</p>
<p>(<code>.pth</code> files in a nutshell: when your python interpreter starts it will look in certain directories and see the <code>.pth</code> file, open those files, parse the files, and add those directories to your <code>sys.path</code> (i.e. the same behavior as <code>PYTHONPATH</code>) and make any python modules located on those directories available for normal importing.)</p>
</div>
<span class="comment-copy">i had to use a <code>.pth</code> file: <a href="https://stackoverflow.com/a/53767029/52074">stackoverflow.com/a/53767029/52074</a></span>
<span class="comment-copy">Shouldn't that be <code>/usr/lib/python2.7/site-packages</code>?</span>
<span class="comment-copy">@SiHa The actual prefix value is whatever is in <code>sys.exec_prefix</code>. On my desktop this is indeed <code>/usr</code>, but on other machines I have access to this is <code>/usr/local</code> and/or <code>/usr/local/python/3.6.1</code>. <code>$HOME/.local</code> is also recognized.</span>
<span class="comment-copy">Please tell me why you downvote this answer?</span>
<span class="comment-copy">This is similar to the <code>.pth</code> file solution in that we're adding something directly into the default directories.</span>
<span class="comment-copy">Of course, that's how it is implemented on a low level. The benefit is in the use of a convenient higher-level abstraction, namely that of a "package", along with standard command-line interface.</span>
<span class="comment-copy">I was just commenting on the two solutions. Making the custom library an actual library/package is also a good solution, and it will be the more appropriate one in many situations. It is cleaner, though not as fast and flexible as the <code>.pth</code> one.</span>
