<div class="post-text" itemprop="text">
<p>Given a string which contains only lowercase letters, remove duplicate letters so that every letter appear once and only once. I must make sure your result is the smallest in lexicographical order among all possible results.</p>
<pre><code>def removeDuplicates(str):
    dict = {}
    word = []
    for i in xrange(len(str)):
        if str[i] not in word:
            word.append(str[i])
            dict[str[i]] = i
        else:
            word.remove(str[i])
            word.append(str[i])
            dict[str[i]] = i

    ind = dict.values()
    # Second scan
    for i in xrange(len(str)):
        if str.index(str[i]) in ind:
            continue
        temp = dict[str[i]]
        dict[str[i]] = i
        lst = sorted(dict.keys(),key = lambda d:dict[d])
        if ''.join(lst) &lt; ''.join(word):
            word = lst
        else:
            dict[str[i]] = temp
    return ''.join(word)
</code></pre>
<p>I am not getting the desired result</p>
<pre><code>print removeDuplicateLetters("cbacdcbc")

Input:
"cbacdcbc"
Output:
"abcd"
Expected:
"acdb"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <code>set</code>. A set is a data structure similar to a list, but it removes all duplicates. You can instantiate a set by doing <code>set()</code>, or setting a variable to a set by using curly brackets. However, this isn't very good for instantiating empty sets, because then Python will think that it's a dictionary. So to achieve what you're doing, you could make the following function:</p>
<pre><code>def removeDuplicates(string):
    return ''.join(sorted(set(string)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Dorian's answer IS the way to go for any practical application, so my addition is mostly toying around.</p>
<p>If a word is really long, it's more efficient to just search whether each letter in the alphabet is in the string and keep only those that are present. Explicitly,</p>
<pre><code>from string import ascii_lowercase

def removeDuplicates(string):
    return ''.join(letter for letter in ascii_lowercase if letter in string)
</code></pre>
<p>Code to test timings</p>
<pre><code>import random
import timeit

def compare(string, n):
    s1 = "''.join(sorted(set('{}')))".format(string)
    print timeit.timeit(s1, number=n)
    s2 = "from string import ascii_lowercase; ''.join(letter for letter in ascii_lowercase if letter in '{}')".format(string)
    print timeit.timeit(s2, number=n)
</code></pre>
<p>Tests:</p>
<pre><code>&gt;&gt;&gt; word = 'cbacdcbc'
&gt;&gt;&gt; compare(word, 1000)
0.00385931823843
0.013727678263
&gt;&gt;&gt; word = ''.join(random.choice(ascii_lowercase) for _ in xrange(100000))
&gt;&gt;&gt; compare(word, 1000)
2.21139290323
0.0071371927042
&gt;&gt;&gt; word = 'a'*100000 + ascii_lowercase
&gt;&gt;&gt; compare(word, 1000)
2.20644530225
1.63490857359
</code></pre>
<p>This shows that Dorian's answer should perform equally well or even better for small words, even though the speed isn't noticeable by humans. However, for very large strings, this method is much faster. Even for an edge case, where every letter is the same and the rest of the letters can only be found by transversing the whole string it performs better.</p>
<p>Still, Dorian's answer is more elegant and practical.</p>
</div>
<div class="post-text" itemprop="text">
<p>This is what makes the test succeed.</p>
<pre><code>def removeDuplicates(my_string):
    for char in sorted(set(my_string)):
        suffix = my_string[my_string.index(char):]
        if set(suffix) == set(my_string):
            return char + removeDuplicates(suffix.replace(char, ''))
    return ''

print removeDuplicates('cbacdcbc')
</code></pre>
<p>acdb</p>
</div>
<span class="comment-copy">What is wrong with <code>''.join(set(my_string))</code>??</span>
<span class="comment-copy">@Curt F. Well, more specifically <code>''.join(sorted(list(set(my_string))))</code>, since he wants it in lexicographical order.</span>
<span class="comment-copy">@Reti43: Drop the <code>list()</code> part of that; <code>sorted</code> already listifies its input before sorting, so explicitly listifying yourself just adds overhead.</span>
<span class="comment-copy">Since you're converting to a <code>set</code>, the list comprehension is pointless/wasteful. <code>set</code>'s constructor already iterates the input. Just do <code>''.join(sorted(set(string)))</code></span>
<span class="comment-copy">@ShadowRanger Thanks for the suggestion, edited my answer to reflect the changes.</span>
<span class="comment-copy">Totally off-topic, you can make an empty set "literal" in Python 3.5+, assuming you have no conscience (I do not), using the new <a href="https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448" rel="nofollow noreferrer">additional unpacking generalizations</a>: <code>{*()}</code> :-D</span>
<span class="comment-copy">@ShadowRanger I don't think that's off topic at all, I think it's completely worth mentioning. The more you know the better. :)</span>
<span class="comment-copy">I need the answer as "acdb" not "abdb"</span>
<span class="comment-copy">I know this is not elegant solution compared to the above it uses recursion.</span>
<span class="comment-copy">If this is truly the answer you want, the question is misleading by asking for the smallest lexicographical order.</span>
