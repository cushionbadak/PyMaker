<div class="post-text" itemprop="text">
<p>I am trying to read the following data line by line, each line to a python dictionary format:</p>
<p>test.txt:</p>
<pre><code>{u'FirstName': u'John', u'Title': u'Mr', u'LastName': u'Doe', u'LastSeenDate': datetime.datetime(2013, 11, 11, 0, 0)}
{u'FirstName': u'Mary', u'Title': u'Ms', u'LastName': u'Doe', u'LastSeenDate': datetime.datetime(2013, 11, 12, 0, 0)}
</code></pre>
<p>Here is the code and errors:</p>
<pre><code>with open("test.txt", "r") as ins:
    for line in ins:
        data =ast.literal_eval(line)
        print(data["Title"])
</code></pre>
<hr/>
<pre><code>ValueError                                Traceback (most recent call last)
&lt;ipython-input-27-d736d3d4199c&gt; in &lt;module&gt;()
     21 
     22 if __name__ == '__main__':
---&gt; 23     main()

&lt;ipython-input-27-d736d3d4199c&gt; in main()
     14     with open("test.txt", "r") as ins:
     15         for line in ins:
---&gt; 16             data =ast.literal_eval(line)
     17             print(data["Title"])
     18 

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.pyc in literal_eval(node_or_string)
     78                 return left - right
     79         raise ValueError('malformed string')
---&gt; 80     return _convert(node_or_string)
     81 
     82 

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.pyc in _convert(node)
     61         elif isinstance(node, Dict):
     62             return dict((_convert(k), _convert(v)) for k, v
---&gt; 63                         in zip(node.keys, node.values))
     64         elif isinstance(node, Name):
     65             if node.id in _safe_names:

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.pyc in &lt;genexpr&gt;((k, v))
     60             return list(map(_convert, node.elts))
     61         elif isinstance(node, Dict):
---&gt; 62             return dict((_convert(k), _convert(v)) for k, v
     63                         in zip(node.keys, node.values))
     64         elif isinstance(node, Name):

/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ast.pyc in _convert(node)
     77             else:
     78                 return left - right
---&gt; 79         raise ValueError('malformed string')
     80     return _convert(node_or_string)
     81 

ValueError: malformed string
</code></pre>
<hr/>
<p>How do I avoid the malformed string error and what's the proper way to parse these data?</p>
</div>
<div class="post-text" itemprop="text">
<p>I would use <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow">pickle</a>, because it is your data, so you should be able to trust it.</p>
<p>Dump report:</p>
<pre><code>from pickle import dump   # cPickle in case of Python2

with open('report.pickle', 'wb') as pickle_stream:
    for row in generate_rows():
        dump(row, pickle_stream, 2)  # The version must be at least 1.
</code></pre>
<p>Read report:</p>
<pre><code>from pickle import load   # cPickle in case of Python2

with open('report.pickle', 'wb') as pickle_stream:
    while True:
        try:
            row = load(pickle_stream)
        except EOFError:
            break

        do_something_with(row)
</code></pre>
</div>
<span class="comment-copy">Where does <code>test.txt</code> come from? Seemingly you trust the input, so maybe you can just use pickle?</span>
<span class="comment-copy"><code>datetime.datetime(2013, 11, 11, 0, 0)</code> isn't Python literal syntax, and <code>literal_eval</code> doesn't handle it.</span>
<span class="comment-copy">@Kay, test.txt is the output of a sql query report. Each line is a report and wrote to a file.</span>
<span class="comment-copy"><code>literal_eval</code> is limited in what it will parse (but that's kinda the point) <i>The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.</i> If you control the thing that writes the txt file, have it convert datetime to a string representation.</span>
<span class="comment-copy">This was how I wrote the output: f.write(str(report) + '\n')  where report is the sql response. How do I write it without datetime?</span>
<span class="comment-copy">Thanks! Should generate_a_row be a string? or it needs to be any specific format or structure?</span>
<span class="comment-copy">@Edamame, it can be next to anything¹, that's the nice thing about pickle. A dict, string, list of datetime.datetime … After loading ("unpickling"), the same datatype as you dumped will be returned. So don't convert the input unless it's convenient. (1: Does not work with e.g. open file objects, Sqlalchmy's ResultProxy and similar volatile data.)</span>
