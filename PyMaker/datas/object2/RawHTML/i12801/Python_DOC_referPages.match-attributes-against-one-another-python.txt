<div class="post-text" itemprop="text">
<p>I have an input file that looks similar to: </p>
<pre><code>RefID|FirstName|MiddleName|LastName|SSN|DOB|School Year|Age|District LEA|District Description|School LEA|Location Description|title|frng_amt
1|JULIE|A|ADAMS|123456789|654321|20142015|47|0101000|DEWITTSCHOOLDISTRICT|P|014
2|JULIE|A|ADAMS|123456789|654321|20132014|46|0101000|DEWITTSCHOOLDISTRICT|S|13100
3|JULIE|A|ADAMS|123456789|654321|20122013|45|0101000|DEWITTSCHOOLDISTRICT|P|014
4|JULIE|A|ADAMS|123456789|654321|20132014|46|0101000|DEWITTSCHOOLDISTRICT|P|014
5|JULIE|A|ADAMS|123456789|654321|20142015|47|0101000|DEWITTSCHOOLDISTRICT|S|15000
6|JULIE|A|ADAMS|123456789|654321|20122013|45|0101000|DEWITTSCHOOLDISTRICT|S|13100
7|SHIRLEY||ADAMS|987654321|987890|20122013|49|0101000|DEWITTSCHOOLDISTRICT|S|13100
8|SHIRLEY||ADAMS|987654321|987890|20092010|46|0101000|DEWITTSCHOOLDISTRICT|P|014
9|SHIRLEY||ADAMS|987654321|987890|20102011|47|0101000|DEWITTSCHOOLDISTRICT|P|014
10|SHIRLEY||ADAMS|987654321|987890|20132014|50|0101000|DEWITTSCHOOLDISTRICT|S|13100
11|SHIRLEY||ADAMS|987654321|987890|20132014|50|0101000|DEWITTSCHOOLDISTRICT|P|014
12|SHIRLEY||ADAMS|987654321|987890|20122013|49|0101000|DEWITTSCHOOLDISTRICT|P|014
13|SHIRLEY||ADAMS|987654321|987890|20102011|47|0101000|DEWITTSCHOOLDISTRICT|A|13100
14|SHIRLEY||ADAMS|987654321|987890|20142015|51|0101000|DEWITTSCHOOLDISTRICT|S|15000
15|SHIRLEY||ADAMS|987654321|987890|20092010|46|0101000|DEWITTSCHOOLDISTRICT|A|13100
16|SHIRLEY||ADAMS|987654321|987890|20142015|51|0101000|DEWITTSCHOOLDISTRICT|P|014
</code></pre>
<p>I want to perform data matching and in my output, I want to assign a unique ID to Julie and another unique ID to Shirley based on their SSN. So my idea output would be: </p>
<pre><code>ID|RefID|FirstName|MiddleName|LastName|SSN|DOB|School Year|Age|District LEA|District Description|School LEA|Location Description|title|frng_amt
10001|1|JULIE|A|ADAMS|123456789|654321|20142015|47|0101000|DEWITTSCHOOLDISTRICT|P|014
10001|2|JULIE|A|ADAMS|123456789|654321|20132014|46|0101000|DEWITTSCHOOLDISTRICT|S|13100
10001|3|JULIE|A|ADAMS|123456789|654321|20122013|45|0101000|DEWITTSCHOOLDISTRICT|P|014
10001|4|JULIE|A|ADAMS|123456789|654321|20132014|46|0101000|DEWITTSCHOOLDISTRICT|P|014
10001|5|JULIE|A|ADAMS|123456789|654321|20142015|47|0101000|DEWITTSCHOOLDISTRICT|S|15000
10001|6|JULIE|A|ADAMS|123456789|654321|20122013|45|0101000|DEWITTSCHOOLDISTRICT|S|13100
10002|7|SHIRLEY||ADAMS|987654321|987890|20122013|49|0101000|DEWITTSCHOOLDISTRICT|S|13100
10002|8|SHIRLEY||ADAMS|987654321|987890|20092010|46|0101000|DEWITTSCHOOLDISTRICT|P|014
10002|9|SHIRLEY||ADAMS|987654321|987890|20102011|47|0101000|DEWITTSCHOOLDISTRICT|P|014
10002|10|SHIRLEY||ADAMS|987654321|987890|20132014|50|0101000|DEWITTSCHOOLDISTRICT|S|13100
10002|11|SHIRLEY||ADAMS|987654321|987890|20132014|50|0101000|DEWITTSCHOOLDISTRICT|P|014
10002|12|SHIRLEY||ADAMS|987654321|987890|20122013|49|0101000|DEWITTSCHOOLDISTRICT|P|014
10002|13|SHIRLEY||ADAMS|987654321|987890|20102011|47|0101000|DEWITTSCHOOLDISTRICT|A|13100
10002|14|SHIRLEY||ADAMS|987654321|987890|20142015|51|0101000|DEWITTSCHOOLDISTRICT|S|15000
10002|15|SHIRLEY||ADAMS|987654321|987890|20092010|46|0101000|DEWITTSCHOOLDISTRICT|A|13100
10002|16|SHIRLEY||ADAMS|987654321|987890|20142015|51|0101000|DEWITTSCHOOLDISTRICT|P|014
</code></pre>
<p>How do I accomplish this in Python? I am trying with if loop by creating a copy of the input file, but I feel that this is a very inefficient and wrong way of achieving this. Can anybody please help me figure out a way? </p>
<p>My present code: </p>
<pre><code>inputReader = open(inputFile,'r')
inputReaderCopy = open(inputFile, 'r')
outputWriter = open(outputFile, 'w')
counter = 100000
headers = inputReader.readline()
for x in inputReader:
    for y in inputReaderCopy:
        if x.split("|")[4] == y.split("|")[4]:
            outputWriter.write(str(counter) + "|" +y)
            counter+=1
        else:
            outputWriter.write("no match|"+ y)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Just keep a record of the SSN's seen  using a dict mapping unique id's to each SSN and you only need to do a single pass over the lines and use the <a href="https://docs.python.org/3.4/library/csv.html" rel="nofollow">csv module</a> to parse the file which will do the splitting for you. If you want a completely new file:</p>
<pre><code>import csv

cn = 10001

with open("test.txt") as f, open("out.txt","w") as tmp:
    r, wr = csv.reader(f, delimiter="|"), csv.writer(tmp, delimiter="|")
    head, d = next(r), {}
    wr.writerow(["ID"]+head)
    for row in r:
        v = row[4]
        # if we have already seen the SSN, use the id assigned
        if v in d:
            wr.writerow([d[v]] + row)
        else:
            # else create new id, add pairing to dict and write
            d[v] = cn
            wr.writerow([cn] + row)
            cn += 1
</code></pre>
<p>Output:</p>
<pre><code>ID|RefID|FirstName|MiddleName|LastName|SSN|DOB|School Year|Age|District LEA|District Description|School LEA|Location Description|title|frng_amt
10001|1|JULIE|A|ADAMS|123456789|654321|20142015|47|0101000|DEWITTSCHOOLDISTRICT|P|014
10001|2|JULIE|A|ADAMS|123456789|654321|20132014|46|0101000|DEWITTSCHOOLDISTRICT|S|13100
10001|3|JULIE|A|ADAMS|123456789|654321|20122013|45|0101000|DEWITTSCHOOLDISTRICT|P|014
10001|4|JULIE|A|ADAMS|123456789|654321|20132014|46|0101000|DEWITTSCHOOLDISTRICT|P|014
10001|5|JULIE|A|ADAMS|123456789|654321|20142015|47|0101000|DEWITTSCHOOLDISTRICT|S|15000
10001|6|JULIE|A|ADAMS|123456789|654321|20122013|45|0101000|DEWITTSCHOOLDISTRICT|S|13100
10002|7|SHIRLEY||ADAMS|987654321|987890|20122013|49|0101000|DEWITTSCHOOLDISTRICT|S|13100
10002|8|SHIRLEY||ADAMS|987654321|987890|20092010|46|0101000|DEWITTSCHOOLDISTRICT|P|014
10002|9|SHIRLEY||ADAMS|987654321|987890|20102011|47|0101000|DEWITTSCHOOLDISTRICT|P|014
10002|10|SHIRLEY||ADAMS|987654321|987890|20132014|50|0101000|DEWITTSCHOOLDISTRICT|S|13100
10002|11|SHIRLEY||ADAMS|987654321|987890|20132014|50|0101000|DEWITTSCHOOLDISTRICT|P|014
10002|12|SHIRLEY||ADAMS|987654321|987890|20122013|49|0101000|DEWITTSCHOOLDISTRICT|P|014
10002|13|SHIRLEY||ADAMS|987654321|987890|20102011|47|0101000|DEWITTSCHOOLDISTRICT|A|13100
10002|14|SHIRLEY||ADAMS|987654321|987890|20142015|51|0101000|DEWITTSCHOOLDISTRICT|S|15000
10002|15|SHIRLEY||ADAMS|987654321|987890|20092010|46|0101000|DEWITTSCHOOLDISTRICT|A|13100
10002|16|SHIRLEY||ADAMS|987654321|987890|20142015|51|0101000|DEWITTSCHOOLDISTRICT|P|014
</code></pre>
<p>If you want to update the original file you can write to a tempfile and do a <code>shutil.move</code>:</p>
<pre><code>import csv
from shutil import move
from tempfile import NamedTemporaryFile
import os

cn = 100001
try:
    with open("test.txt") as f, NamedTemporaryFile("w", dir=".", delete=False) as tmp:
        r, wr = csv.reader(f, delimiter="|"), csv.writer(tmp, delimiter="|")
        head, d = next(r), {}
        wr.writerow(["ID"] + head)
        for row in r:
            v = row[4]
            if v in d:
                wr.writerow([d[v]] + row)
            else:
                d[v] = cn
                wr.writerow([cn] + row)
                cn += 1
    # replace original file
    move(tmp.name, "test.txt"))
finally:
    if os.path.isfile(tmp.name):
        os.unlink(tmp.name)
</code></pre>
<p>If your data is actually ordered like your input, you could <code>groupby</code>:</p>
<pre><code>import csv
from itertools import groupby
from operator import itemgetter

cn = 10001
with open("test.txt") as f, open("out.txt", "w") as tmp:
    r, wr = csv.reader(f, delimiter="|"), csv.writer(tmp, delimiter="|")
    head, d = next(r), {}
    wr.writerow(["ID"] + head)
    for k, v in groupby(r, key=itemgetter(4)):
        wr.writerows([cn]+sub for sub in v)
        cn += 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Well, you already have a unique number, it is the SSN.
What you could do is create a Dictionary of SSN to unique codes.</p>
<pre><code>inputReader = open(inputFile,'r')
outputWriter = open(outputFile, 'w')
headers = inputReader.readline()
outputWriter.write("ID"+headers)

ssn_dict = {}
counter = 100000
for x in inputReader:
    ssn_counter = ssn_dict.get(x.split("|")[4]
    if ssn_count is not None:
        outputWriter.write(str(ssn_count) + "|" + x)
    else:
       ssn_count[x.split("|")[4] = counter
       counter =+ 1
       outputWriter.write(str(counter) + "|" + x)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have your heard about <a href="http://pandas.pydata.org/" rel="nofollow"><code>pandas</code></a>? It can help you!</p>
<pre><code>import numpy as np
import pandas as pd

# Load data set
data = pd.read_csv(inputFile, delimiter='|')

# Tag
def func(ssn):
    if ssn == 123456789:
        return 10001
    if ssn == 987654321:
        return 10002

data['ID'] = data['SSN'].apply(func)

# Reorder columns
new_cols = np.concatenate((data.columns[-1:], data.columns[:-1]), axis=0)
data = data[new_cols]

# Save file
data.to_csv(outputFile, sep='|', index=False)
</code></pre>
<p>And the output is:</p>
<pre><code>ID|RefID|FirstName|MiddleName|LastName|SSN|DOB|School Year|Age|District LEA|District Description|School LEA|Location Description|title|frng_amt
10001|1|JULIE|A|ADAMS|123456789|654321|20142015|47|101000|DEWITTSCHOOLDISTRICT|P|14||
10001|2|JULIE|A|ADAMS|123456789|654321|20132014|46|101000|DEWITTSCHOOLDISTRICT|S|13100||
10001|3|JULIE|A|ADAMS|123456789|654321|20122013|45|101000|DEWITTSCHOOLDISTRICT|P|14||
10001|4|JULIE|A|ADAMS|123456789|654321|20132014|46|101000|DEWITTSCHOOLDISTRICT|P|14||
10001|5|JULIE|A|ADAMS|123456789|654321|20142015|47|101000|DEWITTSCHOOLDISTRICT|S|15000||
10001|6|JULIE|A|ADAMS|123456789|654321|20122013|45|101000|DEWITTSCHOOLDISTRICT|S|13100||
10002|7|SHIRLEY||ADAMS|987654321|987890|20122013|49|101000|DEWITTSCHOOLDISTRICT|S|13100||
10002|8|SHIRLEY||ADAMS|987654321|987890|20092010|46|101000|DEWITTSCHOOLDISTRICT|P|14||
10002|9|SHIRLEY||ADAMS|987654321|987890|20102011|47|101000|DEWITTSCHOOLDISTRICT|P|14||
10002|10|SHIRLEY||ADAMS|987654321|987890|20132014|50|101000|DEWITTSCHOOLDISTRICT|S|13100||
10002|11|SHIRLEY||ADAMS|987654321|987890|20132014|50|101000|DEWITTSCHOOLDISTRICT|P|14||
10002|12|SHIRLEY||ADAMS|987654321|987890|20122013|49|101000|DEWITTSCHOOLDISTRICT|P|14||
10002|13|SHIRLEY||ADAMS|987654321|987890|20102011|47|101000|DEWITTSCHOOLDISTRICT|A|13100||
10002|14|SHIRLEY||ADAMS|987654321|987890|20142015|51|101000|DEWITTSCHOOLDISTRICT|S|15000||
10002|15|SHIRLEY||ADAMS|987654321|987890|20092010|46|101000|DEWITTSCHOOLDISTRICT|A|13100||
10002|16|SHIRLEY||ADAMS|987654321|987890|20142015|51|101000|DEWITTSCHOOLDISTRICT|P|14||
</code></pre>
<p><strong>Update</strong></p>
<p>As discussed with <a href="https://stackoverflow.com/users/2141635/padraic-cunningham">Padraic Cunningham</a>, the OP could have more then two <code>SSN</code>. In this case, the bes solution would be:</p>
<pre><code>import numpy as np
import pandas as pd

# Load data set
data = pd.read_csv(inputFile, delimiter='|')

# Tag
tag ={k:10001+k for i, k in enumerate(data['SSN'].unique())}
data['ID'] = data['SSN'].apply(lambda ssn: tag[ssn])

# Reorder columns
new_cols = np.concatenate((data.columns[-1:], data.columns[:-1]), axis=0)
data = data[new_cols]

# Save file
data.to_csv(outputFile, sep='|', index=False)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Best tool to handle tables is pandas. Does what you want:</p>
<pre><code>import pandas as pd

df = pd.read_csv('your input file path', sep='|')
df['ID'] = df['SSN'].rank(method='dense').astype(int) + 100000
df.to_csv('your output file path', sep='|', index=False)
</code></pre>
<p>output (look at last column):</p>
<pre><code>RefID|FirstName|MiddleName|LastName|SSN|DOB|School Year|Age|District LEA|District Description|School LEA|Location Description|title|frng_amt|ID
1|JULIE|A|ADAMS|123456789|654321|20142015|47|101000|DEWITTSCHOOLDISTRICT|P|14|||100001
2|JULIE|A|ADAMS|123456789|654321|20132014|46|101000|DEWITTSCHOOLDISTRICT|S|13100|||100001
3|JULIE|A|ADAMS|123456789|654321|20122013|45|101000|DEWITTSCHOOLDISTRICT|P|14|||100001
4|JULIE|A|ADAMS|123456789|654321|20132014|46|101000|DEWITTSCHOOLDISTRICT|P|14|||100001
5|JULIE|A|ADAMS|123456789|654321|20142015|47|101000|DEWITTSCHOOLDISTRICT|S|15000|||100001
6|JULIE|A|ADAMS|123456789|654321|20122013|45|101000|DEWITTSCHOOLDISTRICT|S|13100|||100001
7|SHIRLEY||ADAMS|987654321|987890|20122013|49|101000|DEWITTSCHOOLDISTRICT|S|13100|||100002
8|SHIRLEY||ADAMS|987654321|987890|20092010|46|101000|DEWITTSCHOOLDISTRICT|P|14|||100002
9|SHIRLEY||ADAMS|987654321|987890|20102011|47|101000|DEWITTSCHOOLDISTRICT|P|14|||100002
10|SHIRLEY||ADAMS|987654321|987890|20132014|50|101000|DEWITTSCHOOLDISTRICT|S|13100|||100002
11|SHIRLEY||ADAMS|987654321|987890|20132014|50|101000|DEWITTSCHOOLDISTRICT|P|14|||100002
12|SHIRLEY||ADAMS|987654321|987890|20122013|49|101000|DEWITTSCHOOLDISTRICT|P|14|||100002
13|SHIRLEY||ADAMS|987654321|987890|20102011|47|101000|DEWITTSCHOOLDISTRICT|A|13100|||100002
14|SHIRLEY||ADAMS|987654321|987890|20142015|51|101000|DEWITTSCHOOLDISTRICT|S|15000|||100002
15|SHIRLEY||ADAMS|987654321|987890|20092010|46|101000|DEWITTSCHOOLDISTRICT|A|13100|||100002
16|SHIRLEY||ADAMS|987654321|987890|20142015|51|101000|DEWITTSCHOOLDISTRICT|P|14|||100002
</code></pre>
</div>
<span class="comment-copy">Please, for the sake of future maintainers, use the <a href="https://docs.python.org/3/library/csv.html" rel="nofollow noreferrer"><code>csv</code></a> module to read and write these files instead of manually calling <code>.split('|')</code>, and manually concatenating with <code>'|'</code>. While the name of the module is <code>csv</code>, and it does deal with comma and tab separated values by default, it's trivially adaptable to scenarios like this, and will avoid problems when the data field contains the field or record separator. For example, <code>rowreader = csv.reader(inputReader, delimiter='|')</code> to initialize, and you then read out <code>list</code>s of the pre-split values.</span>
<span class="comment-copy">@ShadowRanger, I have used the csv module in my answer that I posted half an hour ago</span>
<span class="comment-copy">@PadraicCunningham: I missed it (the set of answers was a giant wall of text), but I wanted the side-note, "Use <code>csv</code>", separated out from "fix this specific problem", even if an answer included use of <code>csv</code>.</span>
<span class="comment-copy">@ShadowRanger, I forgot to highlight the csv part which probably did not help.</span>
<span class="comment-copy">Thank you! Worked perfectly and I understand what you've done. Learnt something good from your logic and code.</span>
<span class="comment-copy">@UtsavChatterjee, no worries, the logic is pretty straight forward alright, we either use an existing id if the SSN is already in our dict or increment the count and create a new pairing. The groupby code would only work if the lines of your file we ordered by SSN</span>
<span class="comment-copy">If you're generating the <code>NamedTemporaryFile</code> in the same directory it will be moved to after population, at least on Py3.3+, you could skip <code>shutil.move</code> in favor of a plain <code>os.replace</code> (on any version of Python on a non-Windows system, you could use <code>os.rename</code>).</span>
<span class="comment-copy">Also, to avoid leaving kruft around on failure, you could open the <code>NamedTemporaryFile</code> without specifying <code>delete=False</code>, and after you've successfully populated it, do <code>tmp.delete = False</code>, so if an exception is thrown, the file is deleted, and you only prevent deletion in the case where all is well and you're about to close before <code>replace</code>/<code>move</code>, knowing that the file should continue to exist.</span>
<span class="comment-copy">@ShadowRanger, shutil.move is the only thing I know of that won't fail on windows if the file you are replacing exists,  I think maybe a try/finally might be a nice way to handle the case where the code errors before the move</span>
<span class="comment-copy">Why the -1? Is this not useful?</span>
<span class="comment-copy">are you going to write an if for every name in the file?</span>
<span class="comment-copy">@PadraicCunningham The OP only mentioned two names, Shirley and Julie. There is no mention to other names.</span>
<span class="comment-copy">And I just saw that the OP wants it filterd by <code>SSN</code> and not <code>FirstName</code>. I changed the answer.</span>
<span class="comment-copy">I would hardly expect the OP to post the whole file content but I think it would be safe to assume there are more than two SSN's in their file</span>
