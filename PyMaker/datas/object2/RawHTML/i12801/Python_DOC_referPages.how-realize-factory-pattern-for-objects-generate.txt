<div class="post-text" itemprop="text">
<p>Please help solve the problem. I try use factory pattern for generate objects 'Boat':</p>
<pre><code>from datetime import datetime, date, time
import pprint
import random

class Boat(object):
  def __init__(self, name, max_peoples, max_speed, color_num, oars):
    self.max_peoples = max_peoples
    self.max_speed = max_speed
    self.color_num = color_num
    self.oars = oars
    self.name = name

  def __str__(self):
    return str(self.__class__.__name__) + ': ' + str(self.__dict__)   

class BoatFactory(object):
  def __init__(self, num):
    return Boat(
      name='beda_'+str(num), 
      max_peoples=random.randint(5, 10), 
      max_speed=(random.randint(5, 10)) * 10, 
      color_num=random.randint(1, 5), 
      oars=random.randint(1, 2)
    )    

class FloatFactory(object):
  def __init__(self, num, factory):
    return factory(num)

class World(object):
  def __new__(cls,*dt,**mp):
    if cls.obj is None:
      cls.obj = object.__new__(cls,*dt,**mp)

    return cls.obj    

  def __init__(self):
    self.boats = []

    for i in range(4):
      self.boats.append(FloatFactory(num=i, factory=BoatFactory))

  obj = None

if __name__ == '__main__':
  world1 = World()

  for boat in world1.boats:
    print(boat)
</code></pre>
<p>But, after run script I get the following error message:</p>
<pre><code>(python3_env)kalinin@kalinin ~/python3/python3_files/boats6 $ python
index.py Traceback (most recent call last):

  File "index.py", line 61, in &lt;module&gt;
    world1 = World()

  File "index.py", line 55, in __init__
    self.boats.append(FloatFactory(num=i, factory=BoatFactory))

  File "index.py", line 41, in __init__
    return factory(num)
     TypeError: __init__() should return None, not 'Boat'
</code></pre>
<p>Please, help me to fix this code.</p>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/reference/datamodel.html#object.__init__" rel="nofollow"><code>__init__</code> cannot return non-<code>None</code> value</a>, you can make factories being functions:</p>
<pre><code>##class BoatFactory(object):
##  def __init__(self, num):
##    return Boat(
##      name='beda_'+str(num), 
##      max_peoples=random.randint(5, 10), 
##      max_speed=(random.randint(5, 10)) * 10, 
##      color_num=random.randint(1, 5), 
##      oars=random.randint(1, 2)
##    )    

def BoatFactory(num):
    return Boat(
      name='beda_'+str(num), 
      max_peoples=random.randint(5, 10), 
      max_speed=(random.randint(5, 10)) * 10, 
      color_num=random.randint(1, 5), 
      oars=random.randint(1, 2)
    )

##class FloatFactory(object):
##  def __init__(self, num, factory):
##    return factory(num)

def FloatFactory(num, factory):
    return factory(num)
</code></pre>
<p>you can also make your class callable, see <a href="https://docs.python.org/3/reference/datamodel.html#emulating-callable-objects" rel="nofollow"><code>__call__</code></a>:</p>
<pre><code>class BoatFactory(object):
  def __call__(self, num):
    return Boat(
      name='beda_'+str(num), 
      max_peoples=random.randint(5, 10), 
      max_speed=(random.randint(5, 10)) * 10, 
      color_num=random.randint(1, 5), 
      oars=random.randint(1, 2)
    )    


class FloatFactory(object):
  def __call__(self, num, factory):
    return factory()(num)


class World(object):
  def __new__(cls,*dt,**mp):
    if cls.obj is None:
      cls.obj = object.__new__(cls,*dt,**mp)

    return cls.obj    

  def __init__(self):
    self.boats = []

    for i in range(4):
      self.boats.append(FloatFactory()(num=i, factory=BoatFactory))

  obj = None
</code></pre>
<p>or just change <code>__init__</code> to <code>__new__</code>:</p>
<pre><code>class BoatFactory(object):
  def __new__(self, num):
    return Boat(
      name='beda_'+str(num), 
      max_peoples=random.randint(5, 10), 
      max_speed=(random.randint(5, 10)) * 10, 
      color_num=random.randint(1, 5), 
      oars=random.randint(1, 2)
    )    


class FloatFactory(object):
  def __new__(self, num, factory):
    return factory(num)
</code></pre>
<p>but I find the first option most readable</p>
</div>
<span class="comment-copy">The <code>__new__</code> version is a bit odd, it's a hijacking of the language mechanism. The first two versions are good though. #1 if no context is needed, #2 is an elegant way to encapsulate context while keeping a function-like syntax, only makes sense if factory also has a constructor that takes context.</span>
