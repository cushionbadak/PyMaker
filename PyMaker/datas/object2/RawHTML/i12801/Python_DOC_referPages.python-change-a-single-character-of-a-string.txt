<div class="post-text" itemprop="text">
<pre><code>s = 'the brown fox'
</code></pre>
<p>...do something here...</p>
<p><code>s</code> should be :</p>
<pre><code>'The Brown Fox'
</code></pre>
<p>What's the easiest way to do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="http://docs.python.org/library/stdtypes.html#str.title" rel="noreferrer"><code>.title()</code></a> method of a string (either ASCII or Unicode is fine) does this:</p>
<pre><code>&gt;&gt;&gt; "hello world".title()
'Hello World'
&gt;&gt;&gt; u"hello world".title()
u'Hello World'
</code></pre>
<p>However, look out for strings with embedded apostrophes, as noted in the docs.</p>
<blockquote>
<p>The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:</p>
<pre><code>&gt;&gt;&gt; "they're bill's friends from the UK".title()
"They'Re Bill'S Friends From The Uk"
</code></pre>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#str.title" rel="noreferrer"><code>.title()</code></a> method can't work well, </p>
<pre><code>&gt;&gt;&gt; "they're bill's friends from the UK".title()
"They'Re Bill'S Friends From The Uk"
</code></pre>
<p>Try <a href="https://docs.python.org/2/library/string.html#string.capwords" rel="noreferrer"><code>string.capwords()</code></a> method, </p>
<pre><code>import string
string.capwords("they're bill's friends from the UK")
&gt;&gt;&gt;"They're Bill's Friends From The Uk"
</code></pre>
<p>From the <a href="https://docs.python.org/2/library/string.html#string.capwords" rel="noreferrer">python docs on capwords</a>:</p>
<blockquote>
<p>Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join(). If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words.</p>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>Just because this sort of thing is fun for me, here are two more solutions.</p>
<p>Split into words, initial-cap each word from the split groups, and rejoin.  This will change the white space separating the words into a single white space, no matter what it was.</p>
<pre><code>s = 'the brown fox'
lst = [word[0].upper() + word[1:] for word in s.split()]
s = " ".join(lst)
</code></pre>
<hr/>
<p>EDIT: I don't remember what I was thinking back when I wrote the above code, but there is no need to build an explicit list; we can use a generator expression to do it in lazy fashion.  So here is a better solution:</p>
<pre><code>s = 'the brown fox'
s = ' '.join(word[0].upper() + word[1:] for word in s.split())
</code></pre>
<hr/>
<p>Use a regular expression to match the beginning of the string, or white space separating words, plus a single non-whitespace character; use parentheses to mark "match groups".  Write a function that takes a match object, and returns the white space match group unchanged and the non-whitespace character match group in upper case.  Then use <code>re.sub()</code> to replace the patterns.  This one does not have the punctuation problems of the first solution, nor does it redo the white space like my first solution.  This one produces the best result.</p>
<pre><code>import re
s = 'the brown fox'

def repl_func(m):
    """process regular expression match groups for word upper-casing problem"""
    return m.group(1) + m.group(2).upper()

s = re.sub("(^|\s)(\S)", repl_func, s)


&gt;&gt;&gt; re.sub("(^|\s)(\S)", repl_func, s)
"They're Bill's Friends From The UK"
</code></pre>
<p>I'm glad I researched this answer.  I had no idea that <code>re.sub()</code> could take a function!  You can do nontrivial processing inside <code>re.sub()</code> to produce the final result!</p>
</div>
<div class="post-text" itemprop="text">
<p>Copy-paste-ready version of @jibberia anwser:</p>
<pre><code>def capitalize(line):
    return ' '.join(s[:1].upper() + s[1:] for s in line.split(' '))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>Here's a summary of different ways to do it, they will work for all these inputs:</strong></p>
<pre><code>""           =&gt; ""       
"a b c"      =&gt; "A B C"             
"foO baR"    =&gt; "FoO BaR"      
"foo    bar" =&gt; "Foo    Bar"   
"foo's bar"  =&gt; "Foo's Bar"    
"foo's1bar"  =&gt; "Foo's1bar"    
"foo 1bar"   =&gt; "Foo 1bar"     
</code></pre>
<p>- The simplest solution is to split the sentence into words and capitalize the first letter then join it back together: </p>
<pre><code># Be careful with multiple spaces, and empty strings
# for empty words w[0] would cause an index error, 
# but with w[:1] we get an empty string as desired
def cap_sentence(s):
  return ' '.join(w[:1].upper() + w[1:] for w in s.split(' ')) 
</code></pre>
<p>- If you don't want to split the input string into words first, and using fancy generators:</p>
<pre><code># Iterate through each of the characters in the string and capitalize 
# the first char and any char after a blank space
from itertools import chain 
def cap_sentence(s):
  return ''.join( (c.upper() if prev == ' ' else c) for c, prev in zip(s, chain(' ', s)) )
</code></pre>
<p>- Or without importing itertools:</p>
<pre><code>def cap_sentence(s):
  return ''.join( (c.upper() if i == 0 or s[i-1] == ' ' else c) for i, c in enumerate(s) )
</code></pre>
<p>- Or you can use regular expressions, from <a href="https://stackoverflow.com/a/1549983/3577695">steveha's answer</a>: </p>
<pre><code># match the beginning of the string or a space, followed by a non-space
import re
def cap_sentence(s):
  return re.sub("(^|\s)(\S)", lambda m: m.group(1) + m.group(2).upper(), s)
</code></pre>
<hr/>
<p>Now, these are some <strong>other answers</strong> that were posted, and inputs for which they don't work as expected if we are using the definition of a word being the start of the sentence or anything after a blank space:</p>
<pre><code>  return s.title()

# Undesired outputs: 
"foO baR"    =&gt; "Foo Bar"       
"foo's bar"  =&gt; "Foo'S Bar" 
"foo's1bar"  =&gt; "Foo'S1Bar"     
"foo 1bar"   =&gt; "Foo 1Bar"      
</code></pre>
<hr/>
<pre><code>  return ' '.join(w.capitalize() for w in s.split())    
  # or
  import string
  return string.capwords(s)

# Undesired outputs:
"foO baR"    =&gt; "Foo Bar"      
"foo    bar" =&gt; "Foo Bar"      
</code></pre>
<p>using ' ' for the split will fix the second output, but capwords() still won't work for the first</p>
<pre><code>  return ' '.join(w.capitalize() for w in s.split(' '))    
  # or
  import string
  return string.capwords(s, ' ')

# Undesired outputs:
"foO baR"    =&gt; "Foo Bar"      
</code></pre>
<hr/>
<p>Be careful with multiple blank spaces</p>
<pre><code>  return ' '.join(w[0].upper() + w[1:] for w in s.split())
# Undesired outputs:
"foo    bar" =&gt; "Foo Bar"                 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Why do you complicate your life with joins and for loops when the solution is simple and safe??</p>
<p>Just do this:</p>
<pre><code>string = "the brown fox"
string[0].upper()+string[1:]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If str.title() doesn't work for you, do the capitalization yourself.</p>
<ol>
<li>Split the string into a list of words</li>
<li>Capitalize the first letter of each word</li>
<li>Join the words into a single string</li>
</ol>
<p>One-liner:</p>
<pre><code>&gt;&gt;&gt; ' '.join([s[0].upper() + s[1:] for s in "they're bill's friends from the UK".split(' ')])
"They're Bill's Friends From The UK"
</code></pre>
<p>Clear example:</p>
<pre><code>input = "they're bill's friends from the UK"
words = input.split(' ')
capitalized_words = []
for word in words:
    title_case_word = word[0].upper() + word[1:]
    capitalized_words.append(title_case_word)
output = ' '.join(capitalized_words)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>An empty string will raise an Error if you access [1:], therefore I would use:</p>
<pre><code>def my_uppercase(title):
    if not title:
       return ''
    return title[0].upper() + title[1:]
</code></pre>
<p>to uppercase the first letter only.</p>
</div>
<div class="post-text" itemprop="text">
<p>As Mark pointed out you should use <a href="http://docs.python.org/2/library/stdtypes.html#str.title" rel="nofollow"><code>.title()</code></a>:</p>
<pre><code>"MyAwesomeString".title()
</code></pre>
<p>However, if would like to make the first letter uppercase <strong>inside a django template</strong>, you could use this:</p>
<pre><code>{{ "MyAwesomeString"|title }}
</code></pre>
<p>or using a variable:</p>
<pre><code>{{ myvar|title }}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To capitalize words...</p>
<pre><code>str = "this is string example....  wow!!!";
print "str.title() : ", str.title();
</code></pre>
<p>@Gary02127 comment, below solution work  title with apostrophe </p>
<pre><code>import re

def titlecase(s):
    return re.sub(r"[A-Za-z]+('[A-Za-z]+)?", lambda mo: mo.group(0)[0].upper() + mo.group(0)[1:].lower(), s)

text = "He's an engineer, isn't he? SnippetBucket.com "
print(titlecase(text))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The suggested method str.title() does not work in all cases.
For example:</p>
<pre><code>string = "a b 3c"
string.title()
&gt; "A B 3C"
</code></pre>
<p>instead of <code>"A B 3c"</code>. </p>
<p>I think, it is better to do something like this:</p>
<pre><code>def capitalize_words(string):
    words = string.split(" ") # just change the split(" ") method
    return ' '.join([word.capitalize() for word in words])

capitalize_words(string)
&gt;'A B 3c'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Don't overlook the preservation of white space. If you want to process <code>'fred   flinstone'</code> and you get <code>'Fred Flinstone'</code> instead of <code>'Fred   Flinstone'</code>, you've corrupted your white space. Some of the above solutions will lose white space.  Here's a solution that's good for Python 2 and 3 and preserves white space.</p>
<pre><code>def propercase(s):
    return ''.join(map(''.capitalize, re.split(r'(\s+)', s)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If only you want the first letter:
'hello world'.capitalize()
Output:
Hello world</p>
<p>But to capitalize each word:
'hello world'.title()
Output:
Hello world</p>
</div>
<div class="post-text" itemprop="text">
<p>**In case you want to downsize **</p>
<pre><code> #Assuming you are opening a new file   
 with open(input_file) as file:
     lines = [x for x in reader(file) if x]
 #for loop to parse the file by line
 for line in lines:
           name = [x.strip().lower() for x in line if x]
           print(name) #check the result
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I really like this answer:</p>
<p>Copy-paste-ready version of @jibberia anwser:</p>
<pre><code>def capitalize(line):
    return ' '.join([s[0].upper() + s[1:] for s in line.split(' ')])
</code></pre>
<p>But some of the lines that I was sending split off some blank '' characters that caused errors when trying to do s[1:].  There is probably a better way to do this, but I had to add in a if len(s)&gt;0, as in</p>
<pre><code>return ' '.join([s[0].upper() + s[1:] for s in line.split(' ') if len(s)&gt;0])
</code></pre>
</div>
<span class="comment-copy">I avoid the possessive problem with something like <code>" ".join(w.capitalize() for w in s.split())</code></span>
<span class="comment-copy">this isn't safe for most strings because every word even possessive gets uppercased.</span>
<span class="comment-copy">There is a problem with string.title(). When you use, for example, <code>"e g 3b"</code>, the desired result would be <code>"E G 3b"</code>. However, <code>"e g 3b".title()</code> returns <code>"E G 3B"</code>.</span>
<span class="comment-copy">Keep in mind that this will cause this too: <code>In [2]: 'tEst'.title() Out[2]: 'Test' </code></span>
<span class="comment-copy">Great answer, and comments highlight that in python not everything behaves the way you need it to, but there's always convenient ways to make it so. The most convenient way is often importing a purpose-built library, such as <a href="https://github.com/ppannuto/python-titlecase" rel="nofollow noreferrer">python-titlecase</a></span>
<span class="comment-copy">Capwords is still lacking and does not handle something such as <code>"There once was a string with an 'that had words right after it and then closed'"</code>. With this example all the worlds except for <code>that</code> are capitalized as expected. The results being <code>"There Once Was A String With An 'that Had Words Right After It And Then Closed'"</code></span>
<span class="comment-copy">Still, this works better than <code>title()</code> for normal situations. In my situation, <code>title()</code> returns a bad output for names with accents or dieresis, while <code>capwords()</code> handled it correctly.</span>
<span class="comment-copy">Works way better than <code>title()</code></span>
<span class="comment-copy">Good, but it still messes up the "Uk/UK" distinction</span>
<span class="comment-copy">+1 for a really nice way to avoid the pitfalls of <code>title()</code></span>
<span class="comment-copy">+1 for the solution using slices. I needed something that would capitalize first letters without altering the capitalization of the rest of the words (e.g. Foo becomes foo, but FOO becomes fOO). This was perfect.</span>
<span class="comment-copy">capitalize returns its first character capitalized and the rest lowercased</span>
<span class="comment-copy">@Vanuan, you are right!  The doc string description made me think all it did was capitalize the first letter, but you are right about what it actually does.  I'll edit the answer.  Thank you for the heads-up.</span>
<span class="comment-copy">No need to build a list. <code>str.join</code> accepts generators.</span>
<span class="comment-copy">@warvariuc how would you change this code to leverage generators?</span>
<span class="comment-copy">Just remove the square brackets, like it's done <a href="http://stackoverflow.com/a/1549983/248296">here</a></span>
<span class="comment-copy">Though @warvariuc is perfect in mentioning that <code>join</code> accepts gen exps, In the case of <code>str.join</code> particularly, it is generally preferred to use a list comprehension. This is because <code>join</code> iterates twice over the argument, and hence it is faster to provide a ready-to-go list rather than a generator.</span>
<span class="comment-copy">@BhargavRao why would <code>str.join</code> need to iterate twice over the argument? I just checked -- it doesn't. Though for small sequences list comprehension is faster indeed.</span>
<span class="comment-copy">+1 for a comprehensive summary. I am looking for a way to only capitalize a word following a number (not every word). Could you make an addition to your answer that demonstrates this? E.g. <code>lower 123 upper</code> should return <code>lower 123 Upper</code>, where the <code>upper</code> is capitalized as it follows a number. I know it goes beyond the scope of the OP's question but a nice add-on to your already extensive answer. Thanks in advance.</span>
<span class="comment-copy">You could modify some of the above methods to suit your needs in this case. However, I would not add it as part of the answer since it's not what most people are looking for. I would use the regex version for it, and use <code>"([0-9]+)(\s+.)"</code> instead of <code>"(^|\s)(\S)"</code> (match one or more numbers, followed by one or more spaces, and any char after), or  <code>"([0-9]+)(\s*.)"</code> if you want to capitalize the character after 'zero or more' spaces after the number</span>
<span class="comment-copy">I'll be sure to look into it, that made my think about another special case: How would you modify the snippets above to take a string, e.g. <code>WW1 - the great war</code> and output <code>WW1 - The Great War</code> instead of <code>Ww1 ...</code>. See the issue with abbreviations? Would you be willing to add something that demonstrates this case? I have been wondering about this for a while now and can't think of a way to do it.</span>
<span class="comment-copy">The first ways stated above don't change letters that were already capitalized in the input string, so <code>WW1</code> would output as <code>WW1</code></span>
<span class="comment-copy">Because there can be several words.</span>
<span class="comment-copy">Yes, but often I only want to capitalize the first letter. This is a way to do that.</span>
<span class="comment-copy">Wouldn't you then just use <code>"the brown fox".capitalize()</code>?</span>
<span class="comment-copy">@luckydonald Because maybe I don't want to turn <code>'this is John'</code> into <code>'This is john'</code>.</span>
<span class="comment-copy">Isn't a better way to do this simply <code>string.capitalize()</code> (essentially echoing @luckydonald)</span>
<span class="comment-copy">One point of interest with this solution is that you lose any special whitespace.  May not be important depending on context.</span>
<span class="comment-copy">Upvote for getting UK right, in this context better than capwords.</span>
<span class="comment-copy">Isn't that what <code>str.capitalize</code> is for?</span>
<span class="comment-copy">@Eugene, yes but unfortunately, capitalize lowercases all other letters which might not be desirable. :/</span>
<span class="comment-copy"><code>return title[:1].upper() + title[1:]</code> would also take care of that problem since slicing the empty string like that would give 2 empty strings, joined together make an empty string which is returned</span>
<span class="comment-copy">Use existing function gives fast execution in python.</span>
<span class="comment-copy">I'm not super fond of title(), since it doesn't handle apostrophes. "I can't say".title() gives "I Can'T Say"</span>
<span class="comment-copy">@Gary02127 I had updated answer, please have a look, worked perfect with your problem domain too</span>
<span class="comment-copy">however error may arise if the number of spaces separating them is not 1. For reference: <a href="https://www.hackerrank.com/challenges/capitalize/problem" rel="nofollow noreferrer">hackerrank problem</a></span>
<span class="comment-copy">what a genius little function, I never heard of capitalize before, pretty nifty</span>
<span class="comment-copy">This is overly complicated, wth you even go about checking the length?! inefficient.</span>
