<div class="post-text" itemprop="text">
<p>I like how gdb and lldb can take two sets of arguments, one for gdb/lldb itself and one for the target application. For example:</p>
<pre><code>lldb /bin/ls -- -al -foo=bar
</code></pre>
<p>On the left side of the double-dash '--' you can put your lldb arguments and on the right side you can put your target args. Is there a way to read two sets of arguments like this in my Python script?</p>
</div>
<div class="post-text" itemprop="text">
<p>Yes! <a href="https://docs.python.org/3/library/argparse.html#the-parse-args-method" rel="nofollow">ArgumentParser.parse_args()</a> can optionally take a list of arguments, formatted similarly to what you see in <code>sys.argv</code>.</p>
<pre><code>import sys
import argparse

first_parser = argparse.ArgumentParser()
first_parser.add_argument('arg1')

second_parser = argparse.ArgumentParser()
second_parser.add_argument('arg2')

first_args = []
second_args = []
double_dashed = False
for arg in sys.argv[1:]:
    if arg == '--':
        double_dashed = True
    elif not double_dashed:
        first_args.append(arg)
    else:
        second_args.append(arg)
print(first_parser.parse_args(first_args))
print(second_parser.parse_args(second_args))
</code></pre>
<p>This prints out:</p>
<pre><code>$ ./example.py one -- two
Namespace(arg1='one')
Namespace(arg2='two')
</code></pre>
</div>
<span class="comment-copy">well, just split the argument array: <code>n = sys.argv.index('--'); left = sys.argv[:n]; right = sys.argv[n+1:]</code> and catch ValueError when <code>--</code> isn't found.</span>
<span class="comment-copy">As @4ae1e1 points out, replace <code>sys.argv</code> with <code>sys.argv[1:]</code> in my comment above (best create another variable and use that)</span>
<span class="comment-copy">@4ae1e1, appending <i>is</i> efficient. It takes constant averaged time (with the common double-capacity strategy). Plus, there is absolutely no need to worry about performance of argument parsing.</span>
<span class="comment-copy">@4ae1e1. Why do you keep claiming it is inefficient? Again, it takes <i>constant</i> averaged time, just like slicing.</span>
<span class="comment-copy">@4ae1e1: To counter your false claims</span>
<span class="comment-copy">And what's wrong with my comment now? Checked it and it works.</span>
<span class="comment-copy">Let us <a href="http://chat.stackoverflow.com/rooms/97348/discussion-between-jo-so-and-4ae1e1">continue this discussion in chat</a>.</span>
