<div class="post-text" itemprop="text">
<p>Lets say, there is a nested list, like:</p>
<pre><code>my_list = [[1, 2, 21], [1, 3], [1, 2]]
</code></pre>
<p>When the function <code>min()</code> is called on this:</p>
<pre><code>min(my_list)
</code></pre>
<p>The output received is </p>
<pre><code>[1, 2]
</code></pre>
<p>Why and How does it work? What are some use cases of it?</p>
</div>
<div class="post-text" itemprop="text">
<h2><strong><em>How are lists and other sequences compared in Python?</em></strong></h2>
<p>Lists (and other sequences) in Python are compared <a href="https://docs.python.org/2/tutorial/datastructures.html#comparing-sequences-and-other-types" rel="noreferrer">lexicographically</a> and not based on any other parameter.</p>
<blockquote>
<p>Sequence objects may be compared to other objects with the same sequence type. The comparison uses <em>lexicographical</em> ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted.</p>
</blockquote>
<hr/>
<h2><strong><em>What is lexicographic sorting?</em></strong></h2>
<p>From the Wikipedia page on <a href="https://en.wikipedia.org/wiki/Lexicographical_order" rel="noreferrer">lexicographic sorting</a> </p>
<blockquote>
<p>lexicographic or lexicographical order (also known as lexical order, dictionary order, alphabetical order or lexicographic(al) product) is a generalization of the way the alphabetical order of words is based on the alphabetical order of their component letters.</p>
</blockquote>
<p>The <a href="https://docs.python.org/2/library/functions.html#min" rel="noreferrer"><code>min</code></a> function returns the smallest value in the <em>iterable</em>. So the lexicographic value of <code>[1,2]</code> is the least in that list. You can check by using <code>[1,2,21]</code></p>
<pre><code>&gt;&gt;&gt; my_list=[[1,2,21],[1,3],[1,2]]
&gt;&gt;&gt; min(my_list)
[1, 2]
</code></pre>
<hr/>
<h2><strong><em>What is happening in this case of <code>min</code>?</em></strong></h2>
<p>Going element wise on <code>my_list</code>, firstly <code>[1,2,21]</code> and <code>[1,3]</code>. Now from the docs </p>
<blockquote>
<p>If two items to be compared are themselves <strong><em>sequences of the same type</em></strong>, the lexicographical comparison is carried out <strong><em>recursively</em></strong>.</p>
</blockquote>
<p>Thus the value of <code>[1,1,21]</code> is less than <code>[1,3]</code>, because the second element of <code>[1,3]</code>, which is, <code>3</code> is <em>lexicographically higher</em> than the value of the second element of <code>[1,1,21]</code>, which is, <code>1</code>. </p>
<p>Now comparing <code>[1,2]</code> and <code>[1,2,21]</code>, and adding another reference from the docs</p>
<blockquote>
<p>If one sequence is an <strong><em>initial sub-sequence</em></strong> of the other, the <strong><em>shorter sequence is the smaller</em></strong> (lesser) one.</p>
</blockquote>
<p><code>[1,2]</code> is an initial sub-sequence of <code>[1,2,21]</code>. Therefore the value of <code>[1,2]</code> on the whole is smaller than that of <code>[1,2,21]</code>. Hence <code>[1,2]</code> is returned as the output. </p>
<p>This can be validated by using the <a href="https://docs.python.org/2/library/functions.html#sorted" rel="noreferrer"><code>sorted</code></a> function</p>
<pre><code>&gt;&gt;&gt; sorted(my_list)
[[1, 2], [1, 2, 21], [1, 3]]
</code></pre>
<hr/>
<h2><em>What if the list has multiple minimum elements?</em></h2>
<p>If the list contains duplicate min elements <em>the first is returned</em></p>
<pre><code>&gt;&gt;&gt; my_list=[[1,2],[1,2]]
&gt;&gt;&gt; min(my_list)
[1, 2]
</code></pre>
<p>This can be confirmed using the <code>id</code> function call</p>
<pre><code>&gt;&gt;&gt; my_list=[[1,2],[1,2]]
&gt;&gt;&gt; [id(i) for i in my_list]
[140297364849368, 140297364850160]
&gt;&gt;&gt; id(min(my_list))
140297364849368
</code></pre>
<hr/>
<h2><em>What do I need to do to prevent lexicographic comparison in <code>min</code>?</em></h2>
<p>If the required comparison is <em>not lexicographic</em> then the <code>key</code> argument can be used (as mentioned by <a href="https://stackoverflow.com/questions/34050113/how-and-why-min-max-function-on-a-nested-list-works/34115735#comment56040029_34115735">Padraic</a>)</p>
<p>The <code>min</code> function has an <em>additional optional argument</em> called <code>key</code>. The <code>key</code> argument takes a function.</p>
<blockquote>
<p>The optional key argument specifies a one-argument ordering function
  like that used for <code>list.sort()</code>. The key argument, if supplied, must be
  in keyword form (for example, <code>min(a,b,c,key=func)</code>).</p>
</blockquote>
<p>For example, if we need the <em>smallest element by length,</em> we need to use the <a href="https://docs.python.org/2/library/functions.html#len" rel="noreferrer"><code>len</code></a> function. </p>
<pre><code>&gt;&gt;&gt; my_list=[[1,2,21],[1,3],[1,2]]
&gt;&gt;&gt; min(my_list,key=len)            # Notice the key argument
[1, 3]
</code></pre>
<p>As we can see the first shortest element is returned here. </p>
<hr/>
<h2><em>What if the list is heterogeneous?</em></h2>
<p><strong><em>Until Python2</em></strong></p>
<p>If the list is heterogeneous <strong><em>type names</em></strong> are considered for ordering, check <a href="https://docs.python.org/2/library/stdtypes.html#comparisons" rel="noreferrer">Comparisions</a>, </p>
<blockquote>
<p>Objects of different types except numbers are ordered by their <strong><em>type names</em></strong></p>
</blockquote>
<p>Hence if you put an <code>int</code> and a <code>list</code> there you will get the integer value as the smallest as <code>i</code> is of lower value than <code>l</code>. Similarly <code>'1'</code> would be of higher value than both of this. </p>
<pre><code>&gt;&gt;&gt; my_list=[[1,1,21],1,'1']
&gt;&gt;&gt; min(my_list)
1
</code></pre>
<p><strong><em>Python3 and onwards</em></strong></p>
<p>However this confusing technique was removed in <em>Python3</em>. It <em>now raises a <code>TypeError</code></em>. Read <a href="https://docs.python.org/3.0/whatsnew/3.0.html#ordering-comparisons" rel="noreferrer">What's new in Python 3.0</a> </p>
<blockquote>
<p>The ordering comparison operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>) raise a <code>TypeError</code> exception when the operands don’t have a meaningful natural ordering. Thus, expressions like <code>1 &lt; ''</code>, <code>0 &gt; None</code> or <code>len &lt;= len</code> are no longer valid, and e.g. <code>None &lt; None</code> raises <code>TypeError</code> instead of returning <code>False</code>. A corollary is that <strong><em>sorting a heterogeneous list no longer makes sense – all the elements must be comparable to each other</em></strong>.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; my_list=[[1,1,21],1,'1']
&gt;&gt;&gt; min(my_list)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unorderable types: int() &lt; list()
</code></pre>
<p>But it works for <em>Comparable types</em>, For example</p>
<pre><code>&gt;&gt;&gt; my_list=[1,2.0]
&gt;&gt;&gt; min(my_list)
1
</code></pre>
<p>Here we can see that the <code>list</code> contains <code>float</code> values and <code>int</code> values. But as <code>float</code> and <code>int</code> are comparable types, <code>min</code> function works in this case. </p>
</div>
<div class="post-text" itemprop="text">
<p>One simple use case for lexicographical sorting is with making a sortable <a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" rel="nofollow"><code>namedtuple</code></a> class.</p>
<pre><code>from collections import namedtuple
Time = namedtuple('Time', ['hours', 'minutes', 'seconds'])

t1 = Time(hours=8, minutes=15, seconds=30)
t2 = Time(hours=8, minutes=15, seconds=0)
t3 = Time(hours=8, minutes=30, seconds=30)
t4 = Time(hours=7, minutes=15, seconds=30)

assert min(t1, t2, t3, t4) == t4
assert max(t1, t2, t3, t4) == t3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Two lists are compared element wise</p>
<p>Even if sizes of two lists are different the two lists are compared element wise starting the comparison from the first element. </p>
<p>Now suppose that every element of a list has been checked and they are the same and there is no next element in the shorter list. Then the shorter list is declared to be smaller than the longer one.</p>
<p>Examples:</p>
<pre><code>&gt;&gt;&gt; [1,2]&lt;[1,3]
True
&gt;&gt;&gt; [1,2]&lt;[1,2,21]
True
&gt;&gt;&gt; [1,3]&lt;[1,2,21]
False
&gt;&gt;&gt;[1,2,22]&lt;[1,2,21]
False
&gt;&gt;&gt;[1]&lt;[1,2,21]
True
&gt;&gt;&gt;
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>it compares the lists elementwise:</p>
<pre><code>&gt;&gt;&gt; [1,2]&lt;[1,3]
True
&gt;&gt;&gt; [1,2]&lt;[1,2,21]
True
&gt;&gt;&gt; 
</code></pre>
</div>
<span class="comment-copy">Yeah, these explanations are I want, don't know if this is OP wants or not.</span>
<span class="comment-copy">Yeah, I am also satisfied, but can someone figure out some use cases of it? I can't think of one.  I mean does it really make sense that one list is smaller than other one? Does python support it intentionally, or it comes as an effect of implementation.</span>
<span class="comment-copy">@AhsanulHaque One of the use cases (which I used) is to sorted nested lists based on index (which incidentally in my case was the first element). The lists were obtained using <code>csv</code> module. AFAIK, it must be intentional, but I yet can't confirm that. I will research and let you know.</span>
<span class="comment-copy">@KevinGuan Yep. They have done away with mixed type comparisons in Py3. See <a href="https://docs.python.org/3.0/whatsnew/3.0.html#ordering-comparisons" rel="nofollow noreferrer">What’s New In Python 3.0</a></span>
<span class="comment-copy">You can also pass a key to min i.e <code>min(my_list ,key=len)</code> which will return the shortest list</span>
<span class="comment-copy">Is this really answered OP's question? I think OP know that, but why and how? To clarify my comment: <b>How does Python compares two lists? Why does <code>[1,2] &lt; [1,3]</code> is equals <code>True</code>?</b></span>
