<div class="post-text" itemprop="text">
<p>Where is the difference when I write something on one line, seperated by a <code>,</code> and on two lines. Apparently I do not understand the difference, because I though the two functions below should return the same.</p>
<pre><code>def fibi(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a

print(fibi(6))
&gt; 8 # expected result (Fibonacci)
</code></pre>
<p>But</p>
<pre><code>def fibi(n):
    a, b = 0, 1
    for i in range(n):
        a = b
        b = a + b 
    return a


print(fibi(6))
&gt; 32 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This is because of Python's tuple unpacking. In the first one, Python collects the values on the right, makes them a tuple, then assigns the values of the tuple individually to the names on the left. So, if a == 1 and b == 2:</p>
<pre><code>   a, b = b, a + b
=&gt; a, b = (2, 3)
=&gt; a = 2, b = 3
</code></pre>
<p>But in the second example, it's normal assignment:</p>
<pre><code>   a = b
=&gt; a = 2
   b = a + b
=&gt; b = 4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To find a replacement for</p>
<pre><code>a, b = b, a + b
</code></pre>
<p>you must become aware that this assignment is performed "step by step".</p>
<p>So its equivalent is</p>
<pre><code>old_a = a
a = b
b = old_a + b # note the old_a here, as a has been replaced in the meanwhile.
</code></pre>
<p>Demo:</p>
<pre><code>def fibi(n):
    a, b = 0, 1
    for i in range(n):
        a, b = b, a + b
    return a

def fibi2(n):
   a, b = 0, 1
   for i in range(n):
    old_a = a
    a = b
    b = old_a + b
   return a

&gt;&gt;&gt; fibi(0)
0
&gt;&gt;&gt; fibi(1)
1
&gt;&gt;&gt; fibi(2)
1
&gt;&gt;&gt; fibi(3)
2
&gt;&gt;&gt; fibi(4)
3
&gt;&gt;&gt; fibi(5)
5
&gt;&gt;&gt; fibi(6)
8
&gt;&gt;&gt; fibi(7)
13
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; fibi2(0)
0
&gt;&gt;&gt; fibi2(1)
1
&gt;&gt;&gt; fibi2(2)
1
&gt;&gt;&gt; fibi2(3)
2
&gt;&gt;&gt; fibi2(4)
3
&gt;&gt;&gt; fibi2(5)
5
&gt;&gt;&gt; fibi2(6)
8
&gt;&gt;&gt; fibi2(7)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Your difference comes in on the lines:</p>
<p>1) </p>
<pre><code>&gt;&gt;&gt; a, b = 0, 1
&gt;&gt;&gt; a, b = b, a+b
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
1
</code></pre>
<p>vs:</p>
<p>2) </p>
<pre><code>&gt;&gt;&gt; a, b = 0, 1
&gt;&gt;&gt; a = b
&gt;&gt;&gt; b = a+b
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
2
</code></pre>
<p>in the first case, <code>a = 1</code> and <code>b = 0 + 1</code> before the variable's values have changed.  You're basically saying "with <code>(a,b)</code> at given state X, set <code>(a,b)</code> to values <code>(0,1)</code>."</p>
<p>A good way to see the difference in these sort of things is to use the <a href="https://docs.python.org/3/library/dis.html" rel="nofollow">disassembly</a> module (follow link to see meaning of codes):</p>
<pre><code>&gt;&gt;&gt; from dis import dis
&gt;&gt;&gt; a, b = 0, 1
&gt;&gt;&gt; dis('a, b = b, a+b')
  1           0 LOAD_NAME                0 (b)
              3 LOAD_NAME                1 (a)
              6 LOAD_NAME                0 (b)
              9 BINARY_ADD
             10 ROT_TWO
             11 STORE_NAME               1 (a)
             14 STORE_NAME               0 (b)
             17 LOAD_CONST               0 (None)
             20 RETURN_VALUE
&gt;&gt;&gt; a, b = 0, 1
&gt;&gt;&gt; dis('a = b; b = a+b')
  1           0 LOAD_NAME                0 (b)
              3 STORE_NAME               1 (a)
              6 LOAD_NAME                1 (a)
              9 LOAD_NAME                0 (b)
             12 BINARY_ADD
             13 STORE_NAME               0 (b)
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The difference is because in the second example you set <code>a</code> to <code>b</code> before referencing <code>a</code>. Your values on the second example will be off. Here is an example:</p>
<pre><code>a = 5
b = 6
</code></pre>
<p>ex.1:</p>
<pre><code>a, b = b, a+b // a = 6 and b = 11
</code></pre>
<p>ex.2:</p>
<pre><code>a = b // a = 6
b = a + b // b = 6+6 or 12
</code></pre>
<p>The first example is correct</p>
</div>
<div class="post-text" itemprop="text">
<p>A perfect explanation from Raymond Hettinger can be found in this PyCon 2013 video between 33:13 and 38:17:</p>
<p><a href="https://www.youtube.com/watch?v=OSGv2VnC0go" rel="nofollow">https://www.youtube.com/watch?v=OSGv2VnC0go</a></p>
<p>Quote from his presentation:</p>
<blockquote>
<ul>
<li>don't underestimate the advantages of updating state variabes at the same time</li>
<li>eliminates an entire class of errors due to out-of-order updates</li>
</ul>
</blockquote>
</div>
<div class="post-text" itemprop="text">
<p>At the first case, the commands</p>
<pre><code>a, b = b, a + b;
</code></pre>
<p>will do first the sum <code>a + b</code> and then will do the assignment. In that case, b always contains 1. This explains why the final result is 6, because you are adding 1 six times.</p>
<p>The second code you posted its correct.</p>
</div>
<span class="comment-copy"><code>a = b; b = a + b</code> is equivalent to <code>a = b; b = b + b</code>.</span>
<span class="comment-copy">Oh wow. Didnt know Python does that. Good expalantion. Thanks!</span>
<span class="comment-copy">Note: writing it like you wrote it returns 8 with <code>fibi(5)</code> while it should return 5.</span>
<span class="comment-copy">@Chrissl If used exactly as above and replacing the line above, it works like a charm...</span>
<span class="comment-copy">Sorry, I mistyped something...</span>
