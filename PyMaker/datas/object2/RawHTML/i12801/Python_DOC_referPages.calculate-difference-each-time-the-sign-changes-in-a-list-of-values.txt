<div class="post-text" itemprop="text">
<p>Ok let's imagine that I have a list of values like so:</p>
<pre><code>list = [-0.23, -0.5, -0.3, -0.8, 0.3, 0.6, 0.8, -0.9, -0.4, 0.1, 0.6]
</code></pre>
<p>I would like to loop on this list and when the sign changes to get the absolute difference between the maximum (minimum if it's negative) of the first interval and maximum (minimum if it's negative) of the next interval.</p>
<p>For example on the previous list, we would like to have a result like so:</p>
<pre><code>[1.6, 1.7, 1.5]
</code></pre>
<p>The tricky part is that it has to work also for lists like:</p>
<pre><code>list = [0.12, -0.23, 0.52, 0.2, 0.6, -0.3, 0.4]
</code></pre>
<p>Which would return :</p>
<pre><code>[0.35, 0.83, 0.9, 0.7]
</code></pre>
<p>It's tricky because some intervals are 1 value long, and I'm having difficulties with managing this.</p>
<p>How would you solve this with the least possible number of lines?</p>
<hr/>
<p>Here is my current code, but it's not working at the moment.</p>
<p><code>list</code> is a list of 6 lists, where each of these 6 lists contains else a nan, else a np.array of 1024 values (the values I want to evaluate)</p>
<pre><code>Hmax = []
for c in range(0,6):
    Hmax_tmp = []
    for i in range(len(list[c])):
        if(not np.isnan(list[c][i]).any()):
            zero_crossings = np.where(np.diff(np.sign(list[c][i])))[0]
            if(not zero_crossings[0] == 0):
                zero_crossings = [0] + zero_crossings.tolist() + [1023]
            diff = []
            for j in range(1,len(zero_crossings)-2):
                if
                diff.append(max(list[c][i][np.arange(zero_crossings[j-1],zero_crossings[j])].min(), list[c][i][np.arange(zero_crossings[j]+1,zero_crossings[j+1])].max(), key=abs) - max(list[c][i][np.arange(zero_crossings[j+1],zero_crossings[j+2])].min(), list[c][i][np.arange(zero_crossings[j+1],zero_crossings[j+2])].max(), key=abs))
            Hmax_tmp.append(np.max(diff))
        else:
            Hmax_tmp.append(np.nan)
    Hmax.append(Hmax_tmp)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>This type of grouping operation can be greatly simplified using <a href="https://docs.python.org/3/library/itertools.html" rel="noreferrer"><code>itertools.groupby</code></a>. For example:</p>
<pre><code>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; lst = [-0.23, -0.5, -0.3, -0.8, 0.3, 0.6, 0.8, -0.9, -0.4, 0.1, 0.6] # the list
&gt;&gt;&gt; minmax = [min(v) if k else max(v) for k,v in groupby(lst, lambda a: a &lt; 0)]
&gt;&gt;&gt; [abs(j-i) for i,j in zip(minmax[:-1], minmax[1:])]
[1.6, 1.7000000000000002, 1.5]
</code></pre>
<p>And the second list:</p>
<pre><code>&gt;&gt;&gt; lst2 = [0.12, -0.23, 0.52, 0.2, 0.6, -0.3, 0.4] # the list
&gt;&gt;&gt; minmax = [min(v) if k else max(v) for k,v in groupby(lst2, lambda a: a &lt; 0)]
&gt;&gt;&gt; [abs(j-i) for i,j in zip(minmax[:-1], minmax[1:])]
[0.35, 0.83, 0.8999999999999999, 0.7]
</code></pre>
<p>So here, the list is grouped into consecutive intervals of negative/positive values. The <code>min</code>/<code>max</code> is computed for each group and stored in a list <code>minmax</code>. Lastly, a list comprehension finds the differences.</p>
<p>Excuse the inexact representations of floating point numbers!</p>
</div>
<div class="post-text" itemprop="text">
<p>It would be straightforward to retrieve max/min values of intervals, and then do the calculation. </p>
<pre><code>def difference(nums):
  if not nums:
    return []
  pivots = []
  last_sign = nums[0] &gt;= 0
  current = 0
  for x in nums:
    current_sign = x &gt;= 0
    if current_sign != last_sign:
      pivots.append(current)
      current = 0
      last_sign = current_sign
    current = max(current, x) if current_sign else min(current, x)
  pivots.append(current)
  result = []
  for idx in xrange(len(pivots)):
    if idx + 1 &lt; len(pivots):
      result.append(abs(pivots[idx] - pivots[idx + 1]))
  return result

&gt;&gt;&gt; print difference([-0.23, -0.5, -0.3, -0.8, 0.3, 0.6, 0.8, -0.9, -0.4, 0.1, 0.6])
[1.6, 1.7000000000000002, 1.5]
&gt;&gt;&gt; print difference([0.12, -0.23, 0.52, 0.2, 0.6, -0.3, 0.4])
[0.35, 0.83, 0.8999999999999999, 0.7]
</code></pre>
</div>
<span class="comment-copy">how many lines do you now have?</span>
<span class="comment-copy">I have multiple lists which are all 1024 values long</span>
<span class="comment-copy">I asked for where the current code is. Could you share that ?  Because that would be much easier to modify.</span>
<span class="comment-copy">Can you show your current code?</span>
<span class="comment-copy">Maybe i don't understand but shouldn't the result of the first list be [1.1, 1.7, 0.5]?</span>
<span class="comment-copy">Thank you very much, it works perfectly well, and very few lines, it's impressive :)</span>
