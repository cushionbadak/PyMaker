<div class="post-text" itemprop="text">
<p>I have right now such code with 2 lists:</p>
<pre><code>movies = [{'name': '007: Spectre', 'year': 2015, 'length': '2:05'}, 
          {'name': 'Terminator Genesis', 'year': 2015, 'length': '2:20'}]
rest_movies = [{'name':'Bridge of Spies', 'year': 2015, 'length': '1:50'},
               {'name': 'Star Wars', 'year': 2015, 'length': '2:30'}]

check_if_movie_in_one_of_lists = 'Star Wars'

for line in movies:
    name = line['name']
    if name == check_if_movie_in_one_of_lists:
        movie_year = line['year']
            print(movie_year)
        break
else:
    for line in rest_movies:
        name = line['name']
        if name == check_if_movie_in_one_of_lists:
            movie_year = line['year']
            print(movie_year)
            break
</code></pre>
<p>I think this is not pythonic way to check if there is needed value in one of the lists.</p>
<p>In my case:</p>
<ol>
<li>Lists can have random size. </li>
<li>Amount of lists also can be random (right now just 2, but will be more).</li>
<li>No duplicate values among lists.</li>
<li>Looking for solution for Python 3</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p><strong>Edit:</strong></p>
<p>So if you must keep things in the current structure, the best way would just be:</p>
<pre><code>movie_lists = [movies, rest_movies, ...]
for movie_list in movie_lists:
    for item in movie_list:
        if item['name'] == movie_to_find:
            print(item['year'])
            break
</code></pre>
<p>But this only makes sense if you are using this information once.  If you  need to do this multiple times (O(n)*m), it makes sense to loop through once to construct the dicts of the form <code>name: year</code>, then utilize the speed of dict lookups (O(n) + O(1) &lt;&lt; O(n)*m).  </p>
<hr/>
<p>I would change your two lists to two dicts because dict lookups are O(1) (where list lookups are O(n)):</p>
<pre><code>movies = {'007: Spectre': 2015}, {'Terminator Genesis': 2015}
rest_movies = {'Bridge of Spies': 2015}, {'Star Wars': 2015}

movie_to_find = 'Star Wars'

if movie_to_find in movies:
    print(movies[movie_to_find])
elif movie_to_find in rest_movies:
    print(rest_movies[movie_to_find])
</code></pre>
<p>For a general solution with multiple dicts, store the dicts in a list and iterate through the list:</p>
<pre><code>movie_sets = [movies, rest_movies, other_movies, ...]

for movie_set in movie_sets:
    if movie_to_find in movie_set:
        print(movie_set[movie_to_find])
</code></pre>
<p>To convert you list of dicts to standalone dicts:</p>
<pre><code>movies = dict((m['name'], m['year']) for m in movies)
rest_movies = dict((m['name'], m['year']) for m in rest_movies)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>To find a value in a list use <code>list.index(value)</code>. This will give you the index of the specified value in the list.</p>
<p>From the <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow">docs</a>:</p>
<blockquote>
<p>Return the index in the list of the first item whose value is x. It is an error if there is no such item.</p>
</blockquote>
<p>Example:</p>
<pre><code>&gt;&gt;&gt; lst = [1,2,3]
&gt;&gt;&gt; lst.index(1)
0
&gt;&gt;&gt; lst.index(3)
2
</code></pre>
</div>
<span class="comment-copy">I've read your question several times, and I have no idea what you're trying to do. Your title doesn't seem to have anything to do with the code samples, and those do wildly different things - can you clarify?</span>
<span class="comment-copy">@TimPietzcker, edited :) Hope right now my question is easier to understand)</span>
<span class="comment-copy">It would seem you would be <b>way</b> better off just storing the movies in dictionaries of the form <code>{'movie': year}</code>, e.g. <code>{'007: Spectre': 2015, 'Terminator Genesis': 2015, ...}</code>.</span>
<span class="comment-copy">@wflynny, inside of each dict can be lots of info, for example 'length' (as I just added to show as additional option), 'director', 'actors', etc.</span>
<span class="comment-copy">@TitanFighter Are you reading in json or parsing html or something?  If so, there are standard libs to make this lookup faster.</span>
<span class="comment-copy">in many tries just found out the same solution :) P.S. By the way, additional thank you for this information: (O(n) + O(1) &lt;&lt; O(n)*m). This is my next step of code optimization.</span>
