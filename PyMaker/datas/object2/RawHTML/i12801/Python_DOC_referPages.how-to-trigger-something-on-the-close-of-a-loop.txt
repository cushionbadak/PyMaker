<div class="post-text" itemprop="text">
<p>Is this possible? I want to print lines in my file 5 at a time (to send to an API in a batch). But when I get to the last few lines they never print because there are less than 5, never triggering my if statement to print. SO I figured one way to tackle this is to print the remaining lines when the loop closes.</p>
<p>The current code is messy and redundant but this is the idea:</p>
<pre><code>urls = []
urls_csv = ""
counter = 0

with open(urls_file) as f:
    for line in f:

        # Keep track of the lines we've went through
        counter = counter + 1

        # If we have 5 urls in our list it's time to send them to the API call
        if counter &gt; 5:
            counter = 0
            urls_csv = ",".join(urls) # turn the python list into a string csv list
            do_api(urls_csv) # put them to work

            urls = [] # reset the value so we don't send the same urls next time
            urls_csv = "" # reset the value so we don't send the same urls next time
         # Else append to the url list
         else:
            urls.append(line.strip))
</code></pre>
<p>Also - Generally speaking, is there a better way to tackle this?</p>
</div>
<div class="post-text" itemprop="text">
<p>What do you think of</p>
<pre><code>urls = []

with open(urls_file) as f:
    while True:
        try:
            for i in range(5):
                urls.append(next(f).rstrip())
            print(urls)  # i.e. you have the list of urls, now use it/put it to work
            urls = []
        except StopIteration:
            print(urls)
            break
</code></pre>
<p>with an input file of </p>
<pre><code>line1
line2
line3
line4
line5
line6
line7
</code></pre>
<p>it produces</p>
<pre><code>['line1', 'line2', 'line3', 'line4', 'line5']
['line6', 'line7']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can group them into sets of 5 lines at a time with the <a href="https://docs.python.org/3/library/itertools.html#itertools-recipes" rel="nofollow"><code>itertools</code> grouper recipe</a>.</p>
<pre><code>import itertools

def grouper(iterable, n, fillvalue=None):
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)

with open(...) as f:
    for group in grouper(f, 5, fillvalue=""):
        do_api(",".join([g.strip() for g in group if g]))
</code></pre>
</div>
<span class="comment-copy">is "hashes_csv" supposed to be "urls_csv" ?</span>
<span class="comment-copy">also, personally, i would just get all of the URLs and then split them into 5 sized chunks. and then print them(or use them or watever) like that. Also id probably keep them as lists for as long as i could, so i could iterate over it and use the strings inside without having to do weird splits and joins all the time.</span>
<span class="comment-copy">this is what you are looking for : <a href="http://stackoverflow.com/questions/1630320/what-is-the-pythonic-way-to-detect-the-last-element-in-a-python-for-loop" title="what is the pythonic way to detect the last element in a python for loop">stackoverflow.com/questions/1630320/â€¦</a></span>
<span class="comment-copy">Yes, hashes should of been urls. As for Romain's link, I can't do anything special at the beginning of the loop (math with remainder) because I don't know how long the file will be... because I'm reading the lines into memory one at a time. The file will be pretty big but I guess I could read it in all at once.</span>
<span class="comment-copy">Thanks. I like this approach.</span>
<span class="comment-copy">upvoted. I was trying out the same solution, but I got stuck on how to remove the fillvalue. Easily solved. Thank you</span>
