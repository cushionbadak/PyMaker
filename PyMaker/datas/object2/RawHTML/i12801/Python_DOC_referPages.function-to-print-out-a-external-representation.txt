<div class="post-text" itemprop="text">
<p>my problem is in creating a function, that receiving a tuple, prints out a representation like the following, where the empty spaces(corresponding to numbers in the other lines) are filled with empty strings. The number of lines is given by the tuple with the most entries, for example if all tuples only have 1 entry there is only one line, if one of the tuples has 2 entries there will be 2 lines.
Can anyone tell me an efficient way of doing this? <a href="http://i.stack.imgur.com/HVKKO.png" rel="nofollow">the image of the representation I want is in this picture.</a></p>
<p>If there were for example 3 entries in a certain tuple there would be 3 lines and so on.</p>
<p>the picture looks like this:</p>
<pre><code>   1
2  2  2  3  3
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>from itertools import zip_longest

# test data
test = [(2,), (2, 1), (2,), (3,), (3,)]

# rearrange data into same-length columns
lines = list(zip_longest(*test, fillvalue=" "))

# show results
lines.reverse()
for line in lines:
    print("   ".join(str(i) for i in line))
</code></pre>
<p>produces</p>
<pre><code>    1
2   2   2   3   3
</code></pre>
</div>
<span class="comment-copy">give us some code. what have you tried so far?</span>
<span class="comment-copy">thank you for the quick response, but is there a way of doing this using iteration? With a for cicle for instance?</span>
<span class="comment-copy">There is a recipe for zip_longest at <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest" rel="nofollow noreferrer">docs.python.org/3/library/itertools.html#itertools.zip_longest</a>  Other than that: I would suggest one pass through the data to find the longest item, one pass to pad everything to that length, then <code>for row in range(longest-1, -1, -1): print("   ".join(col[row] for col in data))</code></span>
