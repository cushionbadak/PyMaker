<div class="post-text" itemprop="text">
<p>Assume we have a function <code>f(x,y)</code> and another function</p>
<pre><code>def g():
       # ...
       f(i,j) # i,j vary and f is called multiple times
       # ...
</code></pre>
<p>We want to write a Unit test that checks whether <code>f</code> is called the number of times and with the right parameters.</p>
<pre><code>def test_g():
      with patch('mymodule.f') as function:
          assert function.gacs.call_count == correct_no_calls
</code></pre>
<p>There is</p>
<pre><code>function.assert_called_with(...)
</code></pre>
<p>but this only refers to the last call. So assuming <code>g</code> calls <code>f(1,2)</code> and then <code>f(2,3)</code>, <code>function.assert_called_with(1,2)</code> is <code>False</code>.</p>
<p>Furthermore, there is</p>
<pre><code>function.call_args_list
</code></pre>
<p>which yields a list of <code>call</code> objects with the right parameters. Comparing this list to <code>call</code> object that we create in the unit test feels like a very nasty thing to do. <code>call</code> seems like an internal class of the mock library.</p>
<p>Is there a better way to do this? I use this set-up to test parallel execution of an <code>apply</code> function.</p>
</div>
<div class="post-text" itemprop="text">
<p>Even @MartinPieters's answer is correct I think that is not the best way to do it. Mock provide <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_has_calls" rel="nofollow"><code>assert_has_calls</code></a> to do this kind of duties.</p>
<p>Your test could be:</p>
<pre><code>function.assert_has_calls([mock.call(1, 2), mock.call(2, 3)])
</code></pre>
<p>Where <a href="https://docs.python.org/3/library/unittest.mock.html#call" rel="nofollow"><code>mock.call</code></a> is a helper class do to these kind of jobs.</p>
<p>Pay attention that is a <strong>has</strong> call and means the call list <strong>should be in</strong> the list of call and not equal. To solve it I usually define my own helper <code>assert_is_calls()</code> as follow</p>
<pre><code>def assert_is_calls(m, calls, any_order=False):
   assert len(m.mock_calls) == len(calls)
   m.assert_has_calls(calls, any_order=any_order)
</code></pre>
<p>That a resume example</p>
<pre><code>&gt;&gt;&gt; import mock
&gt;&gt;&gt; f = mock.Mock()
&gt;&gt;&gt; f(1)
&lt;Mock name='mock()' id='139836302999952'&gt;
&gt;&gt;&gt; f(2)
&lt;Mock name='mock()' id='139836302999952'&gt;
&gt;&gt;&gt; f.assert_has_calls([mock.call(1), mock.call(2)])
&gt;&gt;&gt; f.assert_has_calls([mock.call(2), mock.call(1)])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/damico/.local/lib/python2.7/site-packages/mock/mock.py", line 969, in assert_has_calls
    ), cause)
  File "/home/damico/.local/lib/python2.7/site-packages/six.py", line 718, in raise_from
    raise value
AssertionError: Calls not found.
Expected: [call(2), call(1)]
Actual: [call(1), call(2)]
&gt;&gt;&gt; f.assert_has_calls([mock.call(2), mock.call(1)], any_order=True)
&gt;&gt;&gt; f(3)
&lt;Mock name='mock()' id='139836302999952'&gt;
&gt;&gt;&gt; f.assert_has_calls([mock.call(2), mock.call(1)], any_order=True)
&gt;&gt;&gt; f.assert_has_calls([mock.call(1), mock.call(2)])
&gt;&gt;&gt; assert len(f.mock_calls)==2
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AssertionError
&gt;&gt;&gt; assert len(f.mock_calls)==3
&gt;&gt;&gt; def assert_is_calls(m, calls, any_order=False):
...    assert len(m.mock_calls) == len(calls)
...    m.assert_has_calls(calls, any_order=any_order)
... 
&gt;&gt;&gt; assert_is_calls(f, [mock.call(1), mock.call(2), mock.call(3)])
&gt;&gt;&gt; assert_is_calls(f, [mock.call(1), mock.call(3), mock.call(2)])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in assert_is_calls
  File "/home/damico/.local/lib/python2.7/site-packages/mock/mock.py", line 969, in assert_has_calls
    ), cause)
  File "/home/damico/.local/lib/python2.7/site-packages/six.py", line 718, in raise_from
    raise value
AssertionError: Calls not found.
Expected: [call(1), call(3), call(2)]
Actual: [call(1), call(2), call(3)]
&gt;&gt;&gt; assert_is_calls(f, [mock.call(1), mock.call(3), mock.call(2)], True)
&gt;&gt;&gt; assert_is_calls(f, [mock.call(1), mock.call(3)], True)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in assert_is_calls
AssertionError
&gt;&gt;&gt; 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Test if the <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.mock_calls" rel="nofollow"><code>Mock().mock_calls</code> list</a> is equal to a list of <a href="https://docs.python.org/3/library/unittest.mock.html#unittest.mock.call" rel="nofollow"><code>mock.call()</code> objects</a> you provide:</p>
<pre><code>self.assertEquals(function.mock_calls, [
    mock.call(1, 2),
    mock.call(2, 3),
])
</code></pre>
<p>This gives you precise control, requiring both the order and the number of calls to match.</p>
<p>The <code>mock.call()</code> class is not internal, it is meant to be used for assertions like these.</p>
</div>
<span class="comment-copy"><code>assert_has_calls</code> doesn't care about <i>all</i> calls. You can feed it a subset and it'll return true. If you want to assert that these were the <b>only</b> calls, then you need to use my approach.</span>
<span class="comment-copy">Your wrapper function, with <code>any_order=False</code> left as the default, effectively does the same thing as <code>assertEquals(m.mock_calls, calls)</code>, so why the extra function? The function doesn't buy you anything extra..</span>
<span class="comment-copy">@MartijnPieters Yes it is beacuse I mentioned my own helper <code>assert_is_calls()</code> to care about all calls.... I'm reading now your new comment: it's all about naming. It's make clear what you want to assert. Anyway you can chose exactly what you want to do, check the order or not, check exactly all calls or just a subset.</span>
<span class="comment-copy">@MartijnPieters Just one thing. The OP didn't say he wants to check <i>exactly</i> and in the right order (or I missed something?). So I covered all possibilities.</span>
