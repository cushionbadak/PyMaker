<div class="post-text" itemprop="text">
<p>I have a variable that contains strings, and the strings are grouped. For example the variable looks something like:</p>
<pre><code>crop production, beans
crop production, cassava
fertilizer use: beans
fertilizer use: cassava
</code></pre>
<p>and I need to split this into two variables, one containing "crop production" and "fertilizer use" and the other containing "beans" and "cassava". The use of comma and colon was intentional; the use isn't consistent throughout the data.
Therefore, I need a way to split the string according to when the content of one string differs from the previous. I'm sure there must be a way to do this but my python skills are not up to it yet, so I'd greatly appreciate any advice.(I should also make clear that the use of beans and cassava is purely illustrative, the data contains many different items and therefore I can't simply split when it sees "beans" for example)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>index = 0
while s1[index] == s2[index]:
  index += 1
</code></pre>
<p>The index will hold the location at which they differ.</p>
</div>
<span class="comment-copy">Do they always have some kind of separator? i.e. can a line always be broken into  two parts by a set of characters like ',' or ':' in your example?</span>
<span class="comment-copy">I feel that as it stands the problem is a bit ill-defined. For example, suppose the fifth line were <code>fertilizer good; yes</code>. The line shares a prefix with the previous line, namely, <code>fertilizer</code>. It seems that what you <i>really</i> want is to have a set of valid separators, such as commas, colons, etc., which split the string in two.</span>
<span class="comment-copy"><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow noreferrer"><code>itertools.groupby</code></a>?</span>
<span class="comment-copy">In functional style: <code>(i for i, (j, k) in enumerate(zip(s1, s2)) if j != k)</code></span>
<span class="comment-copy">@GingerPlusPlus Thanks for the addition! Gotta love those functional one liners in Python.</span>
