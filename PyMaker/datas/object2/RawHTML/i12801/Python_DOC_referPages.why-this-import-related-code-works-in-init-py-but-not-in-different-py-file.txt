<div class="post-text" itemprop="text">
<p>Let's have this <code>__init__.py</code> in a Python3 package:</p>
<pre><code>from .mod1 import *
from .mod2 import *
from .mod3 import *
__all__ = mod1.__all__ + mod2.__all__ + mod3.__all__
</code></pre>
<p>The code looks quite simple and does what is expected: it imports from modules mod1, mod2 and mod3 all symbols that these modules have put into their <code>__all__</code> list and then a summary of all three <code>__all__</code> lists is created.</p>
<p>I tried to run the very same code in a module, i.e. not in the <code>__init__.py</code>. It imported the three modules, but <code>mod1</code>, <code>mod2</code> and <code>mod3</code> were undefined variables.</p>
<p>(BTW, if you run pylint on the original <code>__init__.py</code>, you will get this error too.)</p>
<p>The same statement <code>from .mod1 import *</code> creates a <code>mod1</code> object when executed in the <code>__init__.py</code>, but does not create it elsewhere. Why?</p>
<p><code>__init__.py</code> is a special file, but till now, I thought only its name was special.</p>
</div>
<div class="post-text" itemprop="text">
<p>According to the <a href="https://docs.python.org/3/reference/import.html#submodules" rel="nofollow">documentation</a>, this is expected behaviour:</p>
<blockquote>
<p>When a submodule is loaded using any mechanism (e.g. <code>importlib</code> APIs, the <code>import</code> or <code>import-from</code> statements, or built-in <code>__import__()</code>) a binding is placed in the parent moduleâ€™s namespace to the submodule object. For example, if package <code>spam</code> has a submodule <code>foo</code>, after importing <code>spam.foo</code>, <code>spam</code> will have an attribute <code>foo</code> which is bound to the submodule. </p>
</blockquote>
<p>In other words, when you do a <code>from .whatever import something</code> <em>within a module</em>, you will magically get a <code>whatever</code> attribute bound <em>to the module</em>. Naturally, you can access module's own attributes within <code>__init__.py</code> as if they were defined as variables there. When you are in another module you cannot do it. In this sense <code>__init__.py</code> is special indeed.</p>
</div>
<span class="comment-copy">Bit of a side question, but: why are you doing this at all?</span>
<span class="comment-copy">@jonrsharpe  I have a logical circuit simulator with a library of building blocks defined in multiple files. I want to be able to simply add a new file with blocks to be added to the library. I have found several recipes and now I'm testing them and learning.</span>
<span class="comment-copy">I have to read your answer several times. O hope I finally got it. If x and x.y are imported, Python "makes a link" from x to y. Only x is the parent of y, no matter who is importing what.</span>
<span class="comment-copy">Yes, that is the point.</span>
