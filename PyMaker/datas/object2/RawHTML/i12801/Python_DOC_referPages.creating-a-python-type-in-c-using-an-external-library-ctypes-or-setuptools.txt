<div class="post-text" itemprop="text">
<p>I'm writing some sort of Python C extension. It uses my own *.so library and headers from another project (let's say they're in <code>/usr/local/lib/otherproject.so</code> and <code>/usr/local/include/otherproject.h</code>).</p>
<p>I don't know which strategy to follow. I came up with two:</p>
<h2>As a pure Python extension</h2>
<p>Write a Python C extension just as described <a href="https://docs.python.org/3.4/extending/extending.html" rel="nofollow">in the official docs</a>. The problem here is that I don't know how to link with my own library and headers; to compile, I write a setup.py file and run <code>python3.4 setup.py build</code>. I don't know if I can include some option to the former command, or if I can write something in setup.py to include my headers and binaries (if so, I will also have to worry about making this distributable?).</p>
<h2>With ctypes</h2>
<p>Write a C library (with my other project's build system). Include Python by passing <code>'/usr/include/python2.7'</code> to find headers and the  <code>python2.7</code> binary. Then use <code>ctypes</code> to wrap around that library and get the functions, types, objects, etc. The inconvenience here is that I need to manually wrap around every single function/type/variable from ctypes; I don't think I can use <code>PyModule_AddObject</code> since I'm not creating the module in C but in the Python wrapper (with ctypes).</p>
<hr/>
<p>Also, I tried the second approach, but I could not successfully get my custom PyTypeObject from ctypes. If the second approach sounds good to any more expert brain here on SO, I would post the code to get any help =).</p>
</div>
<div class="post-text" itemprop="text">
<p>The second approach also yields problems with distribution. And if you create a Python object in C you should do it in the context of a module. For scenarios where distribution is problematic, you could link this module statically instead.</p>
<p>For your issue with linking you'll find more information about <a href="https://docs.python.org/3/distutils/setupscript.html#library-options" rel="nofollow">Library options</a> in the documentation. Since your library resides in a directory which should be in the standard library search path, you'd only need to define your library with the <code>libraries</code> option of the <code>Extension</code> class:</p>
<pre><code>mymodule_ext = Extension('mymodule', ['mymodule.c'], libraries=['otherproject'])
</code></pre>
<p>If you're not using the standard <code>lib*</code> prefix you'd need to use <code>libraries=[':otherproject.so']</code> instead.</p>
</div>
<span class="comment-copy">Thanks! I did follow the first approach from above and yes, discovered <code>libraries</code>, <code>library_dirs</code>, and <code>include_dirs</code>, which help me build like a Python extension and link with my other stuff.</span>
