<div class="post-text" itemprop="text">
<p>I'm trying to count the number of keywords in another py file
here what's i made:</p>
<pre><code>import keyword
infile=open(xx.py,'r')
contentbyword=infile.read().split()
num_of_keywords=0
for word in contentbyword:
        if keyword.iskeyword(word) or keyword.iskeyword(word.replace(':','')):
            num_of_keywords+=1
</code></pre>
<p>I know it's buggy as even if the keywords is inside a quote or after a # sign, it also counts. </p>
<p>So what is the better way to count the orange-highlighted words (IDLE default) in python? Many Thanks&lt;(_ _)&gt;</p>
</div>
<div class="post-text" itemprop="text">
<p>The correct way to do this is using the <a href="https://docs.python.org/3/library/tokenize.html" rel="nofollow">tokenize</a> module, which takes care of all the edge cases. </p>
<pre><code>import token
import keyword
import tokenize

s = open('hi.py').readline
counter = 0
l = []
for i in tokenize.generate_tokens(s):
    if i.type == token.NAME and keyword.iskeyword(i.string):
        counter += 1
        l.append(i.string)

print(counter)
print(l)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Should consider using <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="nofollow">Counter</a>: here a snippet to grep all keywords in a file according a list of keywords:</p>
<pre><code>from collections import Counter
def get_kws(file_in, keywords_list):
    with open(file_in) as fin:
        # load all content =&gt; not suitable for large file
        content = fin.read()
        # split by non-word 
        words = re.split(r"\W", content)
        counter = Counter(words)
        for word, c in counter.items():
            if word and word in keywords_list:
                yield word, c
</code></pre>
<p>EDIT:</p>
<p>for the list of python <a href="http://zetcode.com/lang/python/keywords/" rel="nofollow">keywords</a> =&gt; </p>
<pre><code>keywords_list = ['and', 'del', 'from', 'not', 'while', 'as', 'elif', 'global', 'or', 'with', 'assert', 'else', 'if', 'pass', 'yield', 'break', 'except', 'import', 'print', 'class', 'exec', 'in', 'raise', 'continue', 'finally', 'is', 'return', 'def', 'for', 'lambda', 'try']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The below code should do for python 2.7 codes. </p>
<pre><code>import keyword
import re

handle = open("asdf.py","r")
data = str(handle.read())
data = re.sub(r'".*"', r"",data)
data = re.sub(r'#.*' , r"",data)
mystr = data.split()
mykeys = keyword.kwlist
count=0;
for i in mystr:
    i = re.sub(r':',r'',i)
    if i in mykeys:
        print i
        count=count+1
    else:
        count+=0
print count
</code></pre>
<p>replace the suitable filename, cheers!</p>
</div>
<span class="comment-copy">Consider checking word in loop with regex to exclude commented words or these in strings.</span>
<span class="comment-copy">cool i've tried to look for <code>".*'.*Keyword.*'.*"</code> such as <code>".*'.*as.*'.*"</code>  but there's still some exception: if the line is <code>print('waste')</code>, it returns true  any better idea?</span>
<span class="comment-copy">Note, this is in Python2. I didnâ€™t notice the python3 tag on your question. the fundamentals of the answer should remain the same though.</span>
<span class="comment-copy">Aaah yes I was trying with the <a href="https://docs.python.org/2/library/ast.html" rel="nofollow noreferrer">ast</a> module, but I didn't realize that I should be looking at the tokens instead. Kudos</span>
<span class="comment-copy">In python3 now :)</span>
<span class="comment-copy">thanks, but how to deal with <code>else:</code> ? It doesn't count</span>
<span class="comment-copy">btw ,<code># i am as strong as a bear</code>, <code>'i am as strong as a bear'</code> those 'as' will also be counted and they are not supposed to be counted:(</span>
<span class="comment-copy">Hey! check it now, i've made some changes. It should work!</span>
<span class="comment-copy">thank you very much for the changes and it works. anyway the token method below seems a little bit better. it's really a good lesson from you guys. hope one day i am capable to be the one who help others!</span>
<span class="comment-copy">Definitely you can and you will!</span>
