<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/44321601/how-to-determine-appropriate-strftime-format-from-a-date-string">How to determine appropriate strftime format from a date string?</a>
<span class="question-originals-answer-count">
                    3 answers
                </span>
</li>
</ul>
</div>
<p>I'm getting a date as a string, then I'm parsing it to datetime object.
Is there any way to check what's is the date format of the object?</p>
<p>Let's say that this is the object that I'm creating:</p>
<pre><code>modified_date = parser.parse("2015-09-01T12:34:15.601+03:00")
</code></pre>
<p>How can i print or get the exact date format of this object, i need this in order to verify that it's in the correct format, so I'll be able to to make a diff of today's date and the given date.</p>
</div>
<div class="post-text" itemprop="text">
<p>I had a look in the source code and, unfortunately, python dateutil doesn't expose the format.  In fact it doesn't even generate a guess for the format at all, it just goes ahead and parses - the code is like a <a href="http://bazaar.launchpad.net/~dateutil/dateutil/trunk/view/head:/dateutil/parser.py#L356" rel="nofollow">big nested spaghetti of conditionals</a>.  </p>
<p>You could have a look at <a href="https://github.com/jeffreystarr/dateinfer" rel="nofollow">dateinfer</a> which looks to be what you're searching for, but these are unrelated libraries so there is no guarantee at all that python-util will parse with the same format that dateinfer suggests.  </p>
<pre><code>&gt;&gt;&gt; from dateinfer import infer
&gt;&gt;&gt; s = "2015-09-01T12:34:15.601+03:00"
&gt;&gt;&gt; infer([s])
'%Y-%d-%mT%I:%M:%S.601+%m:%d'
</code></pre>
<p>Look at that <code>.601</code>.  Close but not cigar.  I think it has probably also mixed up the month and the day.  You might get better results by giving it more than one date string to base the guess upon.</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>i need this in order to verify that it's in the correct format</p>
</blockquote>
<p>If you know the expected time format (or a set of valid time formats) then you could just parse the input using it: if it succeeds then the time format is valid (<a href="https://docs.python.org/3/glossary.html#term-eafp" rel="nofollow noreferrer">the usual EAFP approach in Python</a>):</p>
<pre><code>for date_format in valid_date_formats:
    try:
        return datetime.strptime(date_string, date_format), date_format
    except ValueError: # wrong date format
        pass # try the next format
raise ValueError("{date_string} is not in the correct format. "
                 "valid formats: {valid_date_formats}".format(**vars()))
</code></pre>
<p>Here's a <a href="https://ru.stackoverflow.com/a/419422/23044">complete code example (in Russian -- ignore the text, look at the code)</a>.</p>
<p>If there are many valid date formats then to improve time performance you might want to combine them into a single regular expression  or <a href="https://stackoverflow.com/q/11426486/4279">convert the regex to a deterministic or non-deterministic finite-state automaton (DFA or NFA)</a>.</p>
<p>In general, if you need to extract dates from a larger text that is too varied to create parsing rules manually; consider machine learning solutions e.g., a <a href="https://en.wikipedia.org/wiki/Named-entity_recognition" rel="nofollow noreferrer">NER system</a> such as <a href="http://webstruct.readthedocs.org/en/latest/intro.html#overview" rel="nofollow noreferrer"><code>webstruct</code></a> (for html input).</p>
</div>
<span class="comment-copy">This question doesn't make sense. If you're parsing it to a datetime object, then it's a datetime object, and doesn't have a format. What exactly do you think you need to compare?</span>
<span class="comment-copy">I'm getting a string and i want to make diff of days between today's date and the given string, but in order to perform the diff i have to make sure that the format of both of the object is the same, otherwise i'll get an exception</span>
<span class="comment-copy">But you said you were converting it to a datetime object. What does <code>parser.parse</code> do?</span>
<span class="comment-copy">Do you want to verify that the string is in ISO format or what? I don't get it</span>
<span class="comment-copy">The following code is not working:    <code>modified_date = parser.parse("2015-09-01T12:34:15.601+03:00") today = datetime.today() diff_test = modified_date - today</code>  I'm getting an exception: <code>TypeError: can't subtract offset-naive and offset-aware datetimes</code>  It's probably related to the timezone, but i'm not sure</span>
<span class="comment-copy">it seems like, the format isn't in the convention of datetime.. I've already created a method that returns the requested format.  <code>def get_formatted_date(date_format, date_to_reformat):     """     Reformatting a date object to a specific format     :param date_format: String the desired format     :param date_to_reformat: datetime The actual date     :return: datetime The actual date     """     date_str = date_to_reformat.strftime(date_format)     return parser.parse(date_str) </code></span>
<span class="comment-copy">"if it succeeds then the time format is valid" &lt;-- valid, ok, but not necessarily correct!</span>
<span class="comment-copy">@wim: what is the difference between "valid" and "correct" in this case. Could you provide an example of a <code>date_string</code> that is valid but that is not correct?</span>
<span class="comment-copy">Yes.  If you have "01-02-2017" then both "%d-%m-%Y" and "%m-%d-%Y" are valid, but only one is correct.  More context is needed, e.g. locale information, or using multiple data points.</span>
<span class="comment-copy">it makes sense. My answer assumes that the format are sufficiently different e.g., formats in the link: <code>date_formats = '%B %d, %Y',    '%b %d, %Y',    '%Y-%B-%d'</code> (valid and correct are identical here).</span>
