<div class="post-text" itemprop="text">
<p>I have a <b>file.dat</b> which looks like the following:</p>
<pre><code>0.00000000000000000000 0.00000000000000000000 0.00000000000000000000
1.02072021799999990144 0.58931309249999996869 0.01464322176999999919
1.04801084399999999697 0.60506934300000003724 0.02121744689000000170
1.11938267900000010258 0.64627589110000005501 0.03132390833999999791
1.23483727700000001093 0.71293363409999999103 0.03462252470999999804
1.36316318200000008432 0.78702263009999995358 0.02774525518999999829
1.44821317199999999303 0.83612626459999994655 0.01540671738000000054
</code></pre>
<p>I want to create 3 variables <b>x, y, z</b> such that <b>x</b> would be an array with the first column, <strong>y</strong> with the second column and <strong>z</strong> with the third column. I have tried with the following:</p>
<pre><code>with open('filename') as f:
     file = f.read()

     x = [row.split(' ')[0] for row in data]
     y = [row.split(' ')[1] for row in data]
     z = [row.split(' ')[2] for row in data]
</code></pre>
<p>However, this is not working and it gives an error. Is there any simple and easy way to perform this?</p>
</div>
<div class="post-text" itemprop="text">
<p>First of all as a more pythonic way you can use <code>numpy.genfromtxt</code> to read your text as an array, and then get the columns by transposing the array :</p>
<pre><code>import numpy as np

with open('text.dat') as f:
    array = np.genfromtxt(f)
    x,y,z = array.T
</code></pre>
<p>And about your code, it's not clear that what's <code>data</code>, anyway if you want to loop over the lines of your file you need to simple loop over file object:</p>
<pre><code>x = []
y = []
z = []
with open('filename') as f:
    for line in f:
     i,j,k = line.split()
        x .append(i)
        y .append(j)
        z .append(k)
</code></pre>
<p>Or as a more elegant way use <code>zip()</code> function to get the columns :  </p>
<pre><code>with open('text.dat') as f:
     x, y, z = zip(*[line.split() for line in f])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<ol>
<li><p><code>f.read()</code> return the whole file. I think you need split them, use <a href="https://docs.python.org/3/library/stdtypes.html#str.splitlines" rel="nofollow"><code>str.splitlines()</code></a>.</p></li>
<li><p><code>file = f.read()</code> but <code>for row in data</code>? I think you meant <code>data = f.read()</code>.</p></li>
<li><p>If you're looking for a more simply way, I'd suggest:</p>
<pre><code>with open('filename') as f:
    data = f.read().splitlines()
    x, y, z = zip(*[i.split() for i in data])
</code></pre>
<p>Or just don't define that <code>data</code> variable:</p>
<pre><code>with open('filename') as f:
    x, y, z = zip(*[line.split() for line in f])
</code></pre>
<p>Which gives you:</p>
<pre><code>&gt;&gt;&gt; print(x)
('0.00000000000000000000', '1.02072021799999990144', '1.04801084399999999697', '1.11938267900000010258', '1.23483727700000001093', '1.36316318200000008432', '1.44821317199999999303')
&gt;&gt;&gt; print(y)
('0.00000000000000000000', '0.58931309249999996869', '0.60506934300000003724', '0.64627589110000005501', '0.71293363409999999103', '0.78702263009999995358', '0.83612626459999994655')
&gt;&gt;&gt; print(z)
('0.00000000000000000000', '0.01464322176999999919', '0.02121744689000000170', '0.03132390833999999791', '0.03462252470999999804', '0.02774525518999999829', '0.01540671738000000054')
&gt;&gt;&gt; 
</code></pre></li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Try this. <code>split()</code> across the row and append it onto list, something like this. It's simple though</p>
<pre><code>x=[]
y=[]
z=[]
with open('file.txt') as handler:
    for line in handler:
        parts = line.split()
        x.append(parts[0]) 
        y.append(parts[1])
        z.append(parts[2]) 
print x,y,z
</code></pre>
<p><code>x</code> <code>y</code> and <code>z</code> contain the first second and third row respectively</p>
</div>
<span class="comment-copy">So again, <code>x, y, z = zip(*f)</code> doesn't work in this case. It returns something like <code>[('0', '1', '1', '1', '1', '1', '1'), ('.', '.', '.', '.', '.', '.', '.')</code>. <a href="https://stackoverflow.com/posts/34239001/revisions">That's why I deleted my answer</a> (however I think without that <b>third part</b> my answer still can help OP, so I undeleted it).</span>
<span class="comment-copy">@KevinGuan Oh, yep, it should be <code>f.splitlines()</code>. Anyway as I suggested <code>numpy</code>  is pretty much better approach for such tasks.</span>
<span class="comment-copy">Are you sure...?</span>
<span class="comment-copy">@KevinGuan Yes I'm sure. It also performs better in dealing with numeric types.</span>
<span class="comment-copy">@KevinGuan :-) yeah thanks for attention. fixed!</span>
<span class="comment-copy">Thank you @sameera sy this works as well. . . !!!</span>
