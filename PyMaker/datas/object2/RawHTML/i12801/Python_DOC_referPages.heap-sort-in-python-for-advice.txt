<div class="post-text" itemprop="text">
<p>I only need to retrieve the 3 smallest elements, and wondering if there is a way to improve my below code to keep heap size smaller -- I think if we only need to keep heap size as 3, it is enough. But cannot find an option in heapq to tweak.</p>
<p>In other words, I want to want to maintain a three element heap that is occasionally updated.</p>
<pre><code>import heapq

def heapsort(iterable):
   h = []
   for value in iterable:
       heapq.heappush(h, value)
   return [heapq.heappop(h) for i in range(len(h))]

if __name__ == "__main__":

   print heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The way to improve the code to only get the three smallest elements is to replace it with <a href="https://docs.python.org/2/library/heapq.html#heapq.nsmallest" rel="nofollow"><code>heapq.nsmallest</code></a>:</p>
<pre><code>print heapq.nsmallest(3, [1, 3, 5, 7, 9, 2, 4, 6, 8, 0])
</code></pre>
<p>Output:</p>
<pre><code>[0, 1, 2]
</code></pre>
<p>You can look at the <a href="https://hg.python.org/cpython/file/2.7/Lib/heapq.py#l221" rel="nofollow">implementation of <code>nsmallest</code></a> if you're curious about how you'd build it from the <code>heapq</code> primitive functions, because they did exactly that.</p>
</div>
<span class="comment-copy">Isn't this the same code as in the <a href="https://docs.python.org/2/library/heapq.html#basic-examples" rel="nofollow noreferrer">python docs</a> ?</span>
<span class="comment-copy">@kiran.koduru, yes, any inputs are appreciated to reduce heapsize. :)</span>
<span class="comment-copy">Why do you need to make the heap yourself? Getting the X smallest elements is what <a href="https://docs.python.org/3/library/heapq.html#heapq.nsmallest" rel="nofollow noreferrer"><code>heapq.nsmallest</code></a> is for.</span>
<span class="comment-copy">@ShadowRanger, since I need to ad-hoc add elements (elements are input dynamically which I cannot predict in advance and cannot predict at one time), but at any given time, I may need to get the 3 smallest elements. Your comments are appreciated.</span>
<span class="comment-copy">Thanks ShadowRanger. Actually my question is, how to optimize your code above to let heap only use 3 elements internally since the final output just need 3 elements, and I think in your code sample, the heap internally still maintain the same size of elements in list (which is len(list)), other than 3 Please feel free to correct me if I am wrong.</span>
<span class="comment-copy">And ShadowRanger, another confusion in your sample is, how do dynamically add elements, other than provide a static list at the beginning? And when dynamically add elements, I still prefer the heap internally only maintain 3 elements to save internal space.</span>
<span class="comment-copy">@LinMa: Nope. However much input <code>nsmallest</code> takes, the internal heap is only three elements long. As for "how do I populate a list", that's something so simple and fundamental to Python that if you can't do it, you have no business trying to implement variations on heap sort or the like. You need to run through the <a href="https://docs.python.org/2/tutorial/" rel="nofollow noreferrer">Python tutorial</a>, now; if you don't know how to build a list, or replace a list literal with a dynamically constructed list, you are going to have huge holes in your understanding.</span>
<span class="comment-copy">I'll note, if you want to maintain a three element heap that is occasionally updated, <code>nsmallest</code> isn't meant to efficiently do that on its own, but that's why I linked you to the implementation of <code>nsmallest</code> in the answer; it shows you exactly how they do it all at once, and if you can read Python code, you can adapt that to piecemeal updates (hint: once you've got N elements, take a look at <code>heapq</code>'s <code>_heapify_max</code> and <code>_heappushpop_max</code> to maintain it; sadly not part of the public API, so using them isn't strictly supported).</span>
<span class="comment-copy">@LinMa: You wouldn't be able to use the public interface for this. The public <code>heapq</code> interface is a minheap, and the implementation of <code>nsmallest</code> requires a maxheap. I'd just use the private interfaces personally, or copy out their implementation so you're not dependent on them directly.</span>
