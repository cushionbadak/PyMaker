<div class="post-text" itemprop="text">
<p>Pandas has a great feature, where you can write your dataframe to a table in SQL.  </p>
<p><code>df.to_sql(con=cnx, name='some_table_name', if_exists='replace', flavor='mysql', index=False)</code></p>
<p>Is there a way to make a temporary table this way?</p>
<p>There is nothing in the documentation as far as I can tell.</p>
</div>
<div class="post-text" itemprop="text">
<p>The <code>DataFrame.to_sql()</code> uses the built into pandas <a href="http://pandas.pydata.org/pandas-docs/stable/io.html#sql-queries" rel="noreferrer"><code>pandas.io.sql</code> package</a>, which itself relies on the SQLAlchemy as a database abstraction layer. In order to create a "temporary" table in SQLAlchemy ORM, <a href="https://stackoverflow.com/questions/1842902/can-i-create-temporary-table-in-sqlalchemy-without-appending-to-table-prefixes">you need to supply a prefix</a>:</p>
<pre><code>t = Table(
    't', metadata,
    Column('id', Integer, primary_key=True),
    # ...
    prefixes=['TEMPORARY'],
)
</code></pre>
<p>From what I see, <code>pandas.io.sql</code> <a href="https://github.com/pydata/pandas/blob/master/pandas/io/sql.py#L685" rel="noreferrer">does not allow you to specify the <code>prefixes</code></a> or easily change the way tables are created.</p>
<p>One way to approach this problem would be to <em>create the temporary table beforehand</em> and use <code>to_sql()</code> with <code>if_exists="append"</code> (all using the same database connection).</p>
<hr/>
<p>Here is also what I've tried to do: override the <code>pandas.io.sql.SQLTable</code>'s <code>_create_table_setup()</code> method and pass the <code>prefixes</code> to the <code>Table</code> constructor. For some reason, the table was still created non-temporary. Not sure if it would help, but here is the code I was using: <a href="https://gist.github.com/alecxe/44682f79b18f0c82a99c" rel="noreferrer">gist</a>. This is kind of hacky, but I hope it would at least serve as an example code to get you started on this approach.</p>
</div>
<div class="post-text" itemprop="text">
<p>This may be a bit hacky and it doesn't technically create a temporary table, it just acts like one, but you could create use the <a href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager" rel="nofollow noreferrer"><code>@contextmanager</code> decorator from <code>contextlib</code></a> to create the table upon opening the context and drop it upon close. Could look something like:</p>
<pre><code>from contextlib import contextmanager

import numpy as np
import sqlalchemy as sqla
import pandas as pd


@contextmanager
def temp_table(frame, tbl, eng, *args, **kwargs):
    frame.to_sql(tbl, eng, *args, **kwargs)
    yield
    eng.execute('DROP TABLE {}'.format(tbl))

df = pd.DataFrame(np.random.randint(21, size=(10, 10)))
cnx = sqla.create_engine(conn_string)

with temp_table(df, 'some_table_name', cnx, if_exists='replace', flavor='mysql', index=False):
    # do stuff with "some_table_name"
</code></pre>
<p>I tested it using Teradata and it works fine. I don't have a MySQL laying around that I can test it out on, but as long as <code>DROP</code> statements work in MySQL, it should work as intended.</p>
</div>
<span class="comment-copy">The function <code>_create_table_setup</code> is called only in <code>__init__</code> to set the <code>table</code> property. To create a table with <code>pandas.io.sql.SQLTable</code>, you call <code>create</code>, which calls <code>_execute_create</code>, which overwrites the <code>table</code> property. That's why your attempt didn't work. Instead, you need to edit <code>_execute_create</code>: <a href="https://gist.github.com/alecxe/44682f79b18f0c82a99c#gistcomment-2359365" rel="nofollow noreferrer">gist.github.com/alecxe/44682f79b18f0c82a99c#gistcomment-2359365</a></span>
