<div class="post-text" itemprop="text">
<p>I have a socket server running on an Arduino board and am trying to control it via a Python script. Using the basic example socket documentation, I have this:</p>
<pre><code>import socket 
import sys

TCP_IP = '192.168.254.100'
TCP_PORT = 5012
BUFFER_SIZE = 1024
MESSAGE = "Status"
# Create a TCP/IP socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((TCP_IP, TCP_PORT))
s.send(MESSAGE)
# data = s.recv(BUFFER_SIZE)
# print (data)
s.close()
sys.exit()
</code></pre>
<p>My script works fine when I comment out the lines to receive the response of the server. However, if I attempt to read the response, my server and python script hangs.</p>
<p>On the server side, here is a snippet of what the code looks like: </p>
<pre><code>void loop() {
  // listen for incoming clients
 client = server.available();
  if (client){
    Serial.println("Client connected");
    while (client.connected()){
        // Read the incoming TCP command
        String command = ReadTCPCommand(&amp;client);
        // Debugging echo command to serial
        command.trim();
        Serial.println(command);
        // Debugging echo command back to client
        client.println(command);
        // Phrase the command
        PhraseTCPCommand(&amp;client, &amp;command);
    }
    // Stop the client
    client.stop();
    Serial.println("Client disconnected");
  }

 }
</code></pre>
<p>The library I am utilising for the server is the <a href="https://www.arduino.cc/en/Reference/WiFi" rel="nofollow">Arduino WiFi</a> library.
The function PhraseTCPCommand, takes the command and triggers external events with the GPIO pins of the board. This action is performed fine by the Python script when the recv() is commented out. The response string sent from the server is terminated with a newline and carriage return. Could that be causing issues? </p>
<p>Additionally, I am able to connect and receive responses from the server with no issues using either telnet, netcat or PuTTY, which leads me to believe it's something to do with the way my Python script attempts to read the response from the server. </p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>The response string sent from the server is terminated with a newline
  and carriage return. Could that be causing issues?</p>
</blockquote>
<p>No, what is causing the issue is possibly that the command <code>MESSAGE</code> is <em>not</em> terminated with a newline and the function <code>ReadTCPCommand()</code> expects one. Change to:</p>
<pre><code>MESSAGE = "Status\n"
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The issue here could be that your message has not been fully sent, and reflects a common misunderstanding of socket programming.  Low level calls such as <code>send</code> <em>do not promise to send the full message</em>. Instead the caller must check the number of bytes actually sent (from the return value) and continue to iteratively call the function until the full message is sent.</p>
<p>In general, a bare <code>send</code> call without such iteration is a mistake.</p>
<p>Python does provides a higher level function <a href="https://docs.python.org/3/library/socket.html#socket.socket.sendall" rel="nofollow">socket.sendall</a> however that will perform this job for you.</p>
</div>
<span class="comment-copy">Would you mind showing us your code for Arduino?</span>
<span class="comment-copy">Thanks for that pointer, but I am unsure if that is the cause of my issue. When I monitor the server, I see that that message is received from the Python scrip, and the server functions as expected.</span>
