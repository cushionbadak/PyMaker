<div class="post-text" itemprop="text">
<p>I need to patch current datetime in tests. I am using this solution:</p>
<pre><code>def _utcnow():
    return datetime.datetime.utcnow()


def utcnow():
    """A proxy which can be patched in tests.
    """
    # another level of indirection, because some modules import utcnow
    return _utcnow()
</code></pre>
<p>Then in my tests I do something like:</p>
<pre><code>    with mock.patch('***.utils._utcnow', return_value=***):
        ...
</code></pre>
<p>But today an idea came to me, that I could make the implementation simpler by patching <code>__call__</code> of function <code>utcnow</code> instead of having an additional <code>_utcnow</code>.</p>
<p>This does not work for me:</p>
<pre><code>    from ***.utils import utcnow
    with mock.patch.object(utcnow, '__call__', return_value=***):
        ...
</code></pre>
<p>How to do this elegantly?</p>
</div>
<div class="post-text" itemprop="text">
<p>When you patch <code>__call__</code> of a function, you are setting the <code>__call__</code> attribute of that <strong>instance</strong>. Python actually calls the <code>__call__</code> method defined on the class.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; class A(object):
...     def __call__(self):
...         print 'a'
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a()
a
&gt;&gt;&gt; def b(): print 'b'
...
&gt;&gt;&gt; b()
b
&gt;&gt;&gt; a.__call__ = b
&gt;&gt;&gt; a()
a
&gt;&gt;&gt; a.__call__ = b.__call__
&gt;&gt;&gt; a()
a
</code></pre>
<p>Assigning anything to <code>a.__call__</code> is pointless.</p>
<p>However:</p>
<pre><code>&gt;&gt;&gt; A.__call__ = b.__call__
&gt;&gt;&gt; a()
b
</code></pre>
<h2>TLDR;</h2>
<p><code>a()</code> does not call <code>a.__call__</code>. It calls <code>type(a).__call__(a)</code>.</p>
<h3>Links</h3>
<p>There is a good explanation of why that happens in <a href="https://stackoverflow.com/a/34491119/389289">answer to <em>"Why <code>type(x).__enter__(x)</code> instead of <code>x.__enter__()</code> in Python standard contextlib?"</em></a>.</p>
<p>This behaviour is documented in Python documentation on <a href="https://docs.python.org/3/reference/datamodel.html#special-method-lookup" rel="nofollow noreferrer">Special method lookup</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p><strong>[EDIT]</strong></p>
<p>Maybe the most interesting part of this question is <strong>Why I cannot patch <code>somefunction.__call__</code>?</strong> </p>
<p>Because the function don't use <code>__call__</code>'s code but <code>__call__</code> (a method-wrapper object) use function's code.</p>
<p>I don't find any well sourced documentation about that, but I can prove it (Python2.7):</p>
<pre><code>&gt;&gt;&gt; def f():
...     return "f"
... 
&gt;&gt;&gt; def g():
...     return "g"
... 
&gt;&gt;&gt; f
&lt;function f at 0x7f1576381848&gt;
&gt;&gt;&gt; f.__call__
&lt;method-wrapper '__call__' of function object at 0x7f1576381848&gt;
&gt;&gt;&gt; g
&lt;function g at 0x7f15763817d0&gt;
&gt;&gt;&gt; g.__call__
&lt;method-wrapper '__call__' of function object at 0x7f15763817d0&gt;
</code></pre>
<p>Replace <code>f</code>'s code by <code>g</code>'s code:</p>
<pre><code>&gt;&gt;&gt; f.func_code = g.func_code
&gt;&gt;&gt; f()
'g'
&gt;&gt;&gt; f.__call__()
'g'
</code></pre>
<p>Of course <code>f</code> and <code>f.__call__</code> references are not changed:</p>
<pre><code>&gt;&gt;&gt; f
&lt;function f at 0x7f1576381848&gt;
&gt;&gt;&gt; f.__call__
&lt;method-wrapper '__call__' of function object at 0x7f1576381848&gt;
</code></pre>
<p>Recover original implementation and copy <code>__call__</code> references instead:</p>
<pre><code>&gt;&gt;&gt; def f():
...     return "f"
... 
&gt;&gt;&gt; f()
'f'
&gt;&gt;&gt; f.__call__ = g.__call__
&gt;&gt;&gt; f()
'f'
&gt;&gt;&gt; f.__call__()
'g'
</code></pre>
<p>This don't have any effect on <code>f</code> function. <strong>Note:</strong> In Python 3 you should use <code>__code__</code> instead of <code>func_code</code>.</p>
<p>I Hope that somebody can point me to the documentation that explain this behavior. </p>
<p>You have a way to work around that: in <code>utils</code> you can define</p>
<pre><code>class Utcnow(object):
    def __call__(self):
        return datetime.datetime.utcnow()


utcnow = Utcnow()
</code></pre>
<p>And now your patch can work like a charm.</p>
<hr/>
<p>Follow the original answer that I consider even the best way to implement your tests.</p>
<p>I've my own <em>gold rule</em>: <strong>never patch protected methods</strong>. In this case the things are little bit smoother because protected method was introduced just for testing but I cannot see why. </p>
<p>The real problem here is that you cannot to patch <code>datetime.datetime.utcnow</code> directly (is C extension as you wrote in the comment above). What you can do is to patch <code>datetime</code> by wrap the standard behavior and override <code>utcnow</code> function:</p>
<pre><code>&gt;&gt;&gt; with mock.patch("datetime.datetime", mock.Mock(wraps=datetime.datetime, utcnow=mock.Mock(return_value=3))):
...  print(datetime.datetime.utcnow())
... 
3
</code></pre>
<p>Ok that is not really clear and neat but you can introduce your own function like</p>
<pre><code>def mock_utcnow(return_value):
    return mock.Mock(wraps=datetime.datetime, 
                     utcnow=mock.Mock(return_value=return_value)):
</code></pre>
<p>and now</p>
<pre><code>mock.patch("datetime.datetime", mock_utcnow(***))
</code></pre>
<p>do exactly what you need without any other layer and for every kind of import.</p>
<p>Another solution can be import <code>datetime</code> in <code>utils</code> and to patch <code>***.utils.datetime</code>; that can give you some freedom to change <code>datetime</code> reference implementation without change your tests (in this case take care to change <code>mock_utcnow()</code> <code>wraps</code> argument too).</p>
</div>
<div class="post-text" itemprop="text">
<p>As commented on the question, since datetime.datetime is written in C, Mock can't replace attributes on the class (see <a href="http://nedbatchelder.com/blog/201209/mocking_datetimetoday.html" rel="nofollow">Mocking datetime.today</a> by Ned Batchelder). Instead you can use <a href="https://github.com/spulec/freezegun" rel="nofollow">freezegun</a>.</p>
<pre><code>$ pip install freezegun
</code></pre>
<p>Here's an example:</p>
<pre><code>import datetime

from freezegun import freeze_time

def my_now():
    return datetime.datetime.utcnow()


@freeze_time('2000-01-01 12:00:01')
def test_freezegun():
    assert my_now() == datetime.datetime(2000, 1, 1, 12, 00, 1)
</code></pre>
<p>As you mention, an alternative is to track each module importing <code>datetime</code> and patch them. This is in essence what <em>freezegun</em> does. It takes an object mocking <code>datetime</code>, iterates through <code>sys.modules</code> to find where <code>datetime</code> has been imported and replaces every instance. I guess it's arguable whether you can do this elegantly in one function.</p>
</div>
<span class="comment-copy">What's wrong with <code>with mock.patch('***.utils.utcnow', return_value=***): do_something()</code>?</span>
<span class="comment-copy">@Rogalski it won't work for cases when user code did <code>from ***.utils import utcnow</code> holding reference to the original implementation.</span>
<span class="comment-copy">In this case you should use <code>mock.patch('module.which.imported.utcnow')</code>. Is that what you want? Your problem is not about patching <code>__call__</code>, is about Python namespaces, imports and name resolving  mechanisms.</span>
<span class="comment-copy">Yes, I could do like this, but then I should track each such module and possibly patch several modules in one single test. I would rather patch one single place.</span>
<span class="comment-copy">And what about to patch <code>datetime.datetime.utcnow</code> directly? why you didn't it? I hate to patch internal or protected method.</span>
<span class="comment-copy">Thank you very much. That should be the accepted answer, it explain exactly what happen. Do you know if it is the standard behavior of every magic method or just the <b>call</b>'s one?</span>
<span class="comment-copy">@Micheled'Amico It <i>looks</i> like all of them behave that way (those I tried, at least), but actually I did not see any documentation saying that it should be so.</span>
<span class="comment-copy">@Micheled'Amico Looking at the python source, I would say that the type slots defined in <a href="http://svn.python.org/projects/python/trunk/Tools/framer/framer/slots.py" rel="nofollow noreferrer"><code>slots.py</code></a> are actually the list of things which are always called on the type rather than on the instance. This is an approximation, because I am too lazy to analyse more deeply ;) Anyway, for <i>calling</i> an object, Pyhon actually does <code>call = func-&gt;ob_type-&gt;tp_call</code> in <a href="http://svn.python.org/projects/python/trunk/Objects/abstract.c" rel="nofollow noreferrer"><code>abstract.c</code></a></span>
<span class="comment-copy">Found another question with a better explanation: <a href="http://stackoverflow.com/questions/34490998/why-typex-enter-x-instead-of-x-enter-in-python-standard-context" title="why typex enter x instead of x enter in python standard context">stackoverflow.com/questions/34490998/â€¦</a></span>
<span class="comment-copy">Yes, I am aware of this tool. But I don't wan't to use it -- for me it's more explicit and simpler to use an intermediate function.</span>
<span class="comment-copy">If you add info why patching <code>__call__</code> is not possible, I will accept your answer.</span>
<span class="comment-copy">I've updated the answer. Anything I've missed?</span>
<span class="comment-copy">I meant why I can't patch <code>__call__</code> with <code>mock</code> -- I guess it's because FunctionType has also C implementation.</span>
<span class="comment-copy">@warvariuc: beware, <a href="http://stackoverflow.com/questions/31296798/python-freezegun-giving-different-values-when-freezing-time-to-datetime-datetime#comment50600538_31296798"><code>freezegun</code>'s timezone support was broken last time I've checked</a></span>
