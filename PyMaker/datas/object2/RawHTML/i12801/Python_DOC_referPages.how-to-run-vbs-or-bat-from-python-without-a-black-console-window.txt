<div class="post-text" itemprop="text">
<p>I wrote some statements like below:</p>
<pre><code>os.system(cmd) #do something
subprocess.call('taskkill /F /IM exename.exe')
</code></pre>
<p>both will pop up a console.</p>
<p>How can I stop it from popping up the console?</p>
</div>
<div class="post-text" itemprop="text">
<p>The process <code>STARTUPINFO</code> can hide the console window:</p>
<pre class="lang-python prettyprint-override"><code>si = subprocess.STARTUPINFO()
si.dwFlags |= subprocess.STARTF_USESHOWWINDOW
#si.wShowWindow = subprocess.SW_HIDE # default
subprocess.call('taskkill /F /IM exename.exe', startupinfo=si)
</code></pre>
<p>Or set the creation flags to disable creating the window:</p>
<pre><code>CREATE_NO_WINDOW = 0x08000000
subprocess.call('taskkill /F /IM exename.exe', creationflags=CREATE_NO_WINDOW)
</code></pre>
<p>The above is still a console process with valid handles for console I/O (verified by calling <code>GetFileType</code> on the handles returned by <code>GetStdHandle</code>). It just has no window and doesn't inherit the parent's console, if any. </p>
<p>You can go a step farther by forcing the child to have no console at all:</p>
<pre><code>DETACHED_PROCESS = 0x00000008
subprocess.call('taskkill /F /IM exename.exe', creationflags=DETACHED_PROCESS)
</code></pre>
<p>In this case the child's standard handles (i.e. <code>GetStdHandle</code>) are 0, but you can set them to an open disk file or pipe such as <code>subprocess.DEVNULL</code> (3.3) or <code>subprocess.PIPE</code>. </p>
</div>
<div class="post-text" itemprop="text">
<p>Add the <code>shell=True</code> argument to the subprocess calls.</p>
<pre><code>subprocess.call('taskkill /F /IM exename.exe', shell=True)
</code></pre>
<p>Or, if you don't need to wait for it, use <code>subprocess.Popen</code> rather than <code>subprocess.call</code>.</p>
<pre><code>subprocess.Popen('taskkill /F /IM exename.exe', shell=True)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Try <code>subprocess.Popen(["function","option1","option2"],shell=False)</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>try to change the extension from .py to .pyw </p>
</div>
<span class="comment-copy">Try using <code>spawn</code> family instead.</span>
<span class="comment-copy">related: <a href="http://stackoverflow.com/q/1813872/4279">Running a process in pythonw with Popen without a console</a></span>
<span class="comment-copy">Thank you, it works.</span>
<span class="comment-copy"><code>creationflags=CREATE_NO_WINDOW</code> does no seem to be very portable</span>
<span class="comment-copy">@Cyan, in what sense is <code>CREATE_NO_WINDOW</code> not portable? This is a Windows question, and these flags should be supported in all versions of Windows NT, from 3.1 to Windows 10.</span>
<span class="comment-copy">Python 3.7 now has <a href="https://docs.python.org/3/library/subprocess.html#subprocess.CREATE_NO_WINDOW" rel="nofollow noreferrer">subprocess.CREATE_NO_WINDOW</a></span>
<span class="comment-copy">@Harmon758, I'm aware. The priority-class creation flags were being added, and I suggested that we may as well add some of the others, including the console flags <code>CREATE_NO_WINDOW</code> and <code>DETACHED_PROCESS</code> and two others that are unrelated to the console -- <code>CREATE_BREAKAWAY_FROM_JOB</code> and <code>CREATE_DEFAULT_ERROR_MODE</code>.</span>
<span class="comment-copy">Sure, the startupinfo technique works, but this one's shorter (but put a comment in to indicate why you're using <code>shell=True</code> otherwise it probably wouldn't be as obvious).</span>
<span class="comment-copy">Hmm, for some reason my executable not running when using <code>shell=True</code>. But it run just fine when using startupinfo.</span>
<span class="comment-copy">@arifwn: post a new question, please.</span>
<span class="comment-copy">+1 for brevity. This way has subprocess <a href="http://hg.python.org/cpython/file/ab05e7dd2788/Lib/subprocess.py#l918" rel="nofollow noreferrer">configure <code>STARTUPINFO</code> for you</a>. Note that running via <code>cmd /c</code> should only be used with trusted commands. In this case it's OK.</span>
<span class="comment-copy">Not a good solution. shell=True does more than you want, and opens up security problems if the user can manipulate the input.</span>
<span class="comment-copy">sorry, the stuff I want to invoke cannot be run by subprocess.Popen, coz exception raised "invalid win32 app". But os.system can run it without any warning.</span>
<span class="comment-copy">Er, that's not a problem with subprocess; I can run it on Windows 7, natively (Python 2.7.2) as well as under Cygwin (Python 2.6.5), with no warnings.</span>
<span class="comment-copy">Doesn't work for me, the console still pops up. Also the <code>shell</code> argument defaults to <code>False</code>. Explicitly passing it should not make a difference.</span>
<span class="comment-copy">Hi, please provide some additional narrative to explain how this answers the question. Thanks.</span>
