<div class="post-text" itemprop="text">
<p>I am wondering if there is a more elegant/pythonic way to do the following. Suppose I have a nested dictionary:</p>
<pre><code>orders = {'peter': {'food': 'pizza', 'drink': 'soda'}, 'paul': {'food': 'taco', 'drink': 'soda'},'mary': {'food': 'pizza', 'drink': 'water'}}
</code></pre>
<p>and I want to obtain a list containing the unique 'food' items for each person, I.e. <code>['pizza', 'taco']</code></p>
<p>is this the easiest way to do it?</p>
<pre><code>foodList = []
for i in orders.keys():
    foodList.append(orders[i]['food'])
s = set(foodList)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Use a <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="nofollow noreferrer">set comprehension</a>. </p>
<pre><code>&gt;&gt;&gt; {orders[i]['food'] for i in orders}
{'pizza', 'taco'}
</code></pre>
<p>If the values for <code>food</code> are a list or a tuple you can use a nested loop in the set comprehension. </p>
<pre><code>&gt;&gt;&gt; orders = {'peter': {'food': ['pizza','fries'], 'drink': 'soda'}, 'paul': {'food': ['taco'], 'drink': 'soda'}}
&gt;&gt;&gt; {j for i in orders for j in orders[i]['food']}
{'pizza', 'taco', 'fries'}
</code></pre>
<hr/>
<p>You can even use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> as mentioned by <a href="https://stackoverflow.com/questions/34110537/obtaining-list-or-set-of-unique-values-in-nested-dictionary/34110559?noredirect=1#comment55972410_34110559">Padraic</a>. </p>
<pre><code>&gt;&gt;&gt; from operator import itemgetter 
&gt;&gt;&gt; set(map(itemgetter("food"), orders.values()))
{'pizza', 'taco'}
</code></pre>
<p>Similarly if the values for food are a list, you can use <a href="https://docs.python.org/3/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>chain</code></a>. </p>
<pre><code>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; set(chain(*map(itemgetter("food"), orders.values())))
{'pizza', 'taco', 'fries'}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you get a list of food instead of a single food:</p>
<pre><code>set(reduce(lambda x,y:x + y, [orders[i]['food'] for i in orders], []))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If the values you're collecting are "immutable", you can use a set comprehension to collect the different ones. @BhargavRao already suggested this, but here's a cleaner solution:</p>
<pre><code>foods = set( val["food"] for val in orders.values() )
</code></pre>
<p>You also ask (in a comment) about what to do if the values are lists. If a value is <code>["pizza", "taco"]</code>, I assume you want <code>"pizza"</code> and <code>"taco"</code> in the set, not <code>["pizza", "taco"]</code> as an element. It's a bit tricky if <em>some</em> elements are lists and some are strings (poor design; it's better to have lists everywhere, even if it's just one element), so I'd do it stepwise, like this:</p>
<pre><code>foods = set()
for val in orders.values():
    eat = val["food"]
    if isinstance(eat, str):
        foods.add(eat)      # one item
    else:
        foods.update(eat)   # list or tuple
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use defaultdict- It addresses the list value.</p>
<pre><code>&gt;&gt;&gt;import collections
&gt;&gt;&gt;from collections import defaultdict
&gt;&gt;&gt;d =defaultdict(list)
&gt;&gt;&gt;orders = {'paul': {'food': ['taco', ['sugar']], 'drink': 'soda'}, 'peter': {'food': 'pizza', 'drink': 'soda'}, 'mary': {'food': 'pizza', 'drink': 'water'}}

&gt;&gt;&gt;for i in orders:
    d['food'].append(orders[i]['food'])
&gt;&gt;&gt;def flatten(l):#borrowed
    for el in l:
        if isinstance(el, collections.Iterable) and not isinstance(el, basestring):
            for sub in flatten(el):
                yield sub
        else:
            yield el
&gt;&gt;&gt;list(set(flatten(d.values())))
&gt;&gt;&gt;['sugar', 'pizza', 'taco']
</code></pre>
</div>
<span class="comment-copy">thanks! what if the value were a list though instead of a string? is there such a thing as "unique" lists in python?</span>
<span class="comment-copy">@laszlopanaflex Not sure if I understood your problem. But if you want a list, change the <code>{</code> and <code>}</code> to <code>[]</code>. It is called a list comprehension. The set is one datastructure where the values are unique, lists aren't. Also see <a href="http://stackoverflow.com/q/480214">How do you remove duplicates from a list in Python whilst preserving order?</a>. Hope it helps.</span>
<span class="comment-copy">If you get a list of food instead of a single food: <code>set(reduce(lambda x,y:x + y, [orders[i]['food'] for i in orders], []))</code></span>
<span class="comment-copy">what i meant was, suppose instead of 'pizza' and 'taco' i instead had ['pizza', 'taco'] and ['pizza', 'taco'], i.e. each person wanted both items. so, what i'm wondering is can you obtain the unique lists if you see what i'm saying</span>
<span class="comment-copy">@laszlopanaflex For that you will need to add another level of integration. There you need to add those to the set too.</span>
