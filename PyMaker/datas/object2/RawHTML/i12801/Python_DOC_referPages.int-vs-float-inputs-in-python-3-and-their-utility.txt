<div class="post-text" itemprop="text">
<p>This doesn't refer to a specific code of mine, so I hope this does not defy community standards for asking questions. I'm still learning, so please let me know if this kind of question is inappropriate for future reference!</p>
<p>I am trying to gain a thorough understanding of the utility of certain commands as I embark on learning to use Python 3. I have never coded before, so I do not have background in any other language. I was hoping someone could help me understand this more thoroughly.</p>
<p>Basically, I understand that when prompting for a user input with a numeric value, it is sometimes correct to write <code>float(input())</code>, and sometimes correct to write <code>int(input())</code>. I know in mathematics that an integer is a whole number, and a floating point number is any number defined with a whole portion, a radix, and a mantissa (like 4.32). I don't understand the utility of converting a user input to one or the other.</p>
<p>For example, if I write <code>int(input("Input a decimal. "))</code> and the user inputs 4.3, the program will return a value error. What is the utility in this? So:</p>
<ol>
<li>What is the utility in converting an <code>input()</code> to <code>float()</code> or <code>int()</code>?</li>
<li>I understand when I would want an integer (e.g; if I want the user to input how many times to multiply a particular number by itself), but why would I want a floating point input?</li>
<li>In general, when do I need to implement either, and how can I recognize which one a program needs?</li>
<li>Aside from user input, in what other general cases would I want to implement either command?</li>
<li>If anyone has any additional reading on how and when to convert certain defined variables or inputs, please send them my way!</li>
</ol>
<p>EDIT:</p>
<p>Here is an example of a code that I wrote that I think highlights my confusion about if and when to use <code>int()</code> and <code>float()</code>:</p>
<pre><code>price=input("How much did the item cost?: $")
if float(price)&lt;0:
    print("The price cannot be negative.")
else:
    price=int(float(price)*100)
    paid=input("How much did the customer pay?: $")
    paid=int(float(paid)*100)
</code></pre>
<p>Did I do this correctly? The larger program of which this is a part works fine, but I'm not sure if I added unnecessary command or implemented the commands correctly.</p>
<p>Thank you so much for your help!</p>
<p>Naomi</p>
</div>
<div class="post-text" itemprop="text">
<p>It has nothing about utility, it has to do with what are the possible range of values you're program should/needs to accept.</p>
<p>If it needs to accept both integers and floats as inputs, then you should convert to <code>float</code> since floats can represent the integers.</p>
<p>But if you're program requires that the input be specifically an integer, then you should be casting to <code>int</code>.</p>
<p>EDIT:</p>
<p>In your example, you should always be using <code>float</code>, since money has a decimal value.</p>
<p>If you were asking "How many bananas did you buy?" You'd want to convert to <code>int</code> since those values are going to be <code>0, 1, 2, 3, 4, ...</code>. And then when you ask "How much did you pay for these bananas?" You'd want to convert to <code>float</code> since those inputs can range from <code>3.15, .77, 1, 1.00, ...</code> etc.</p>
</div>
<div class="post-text" itemprop="text">
<ol>
<li>So that you can work with numbers. You can't very well multiply <code>'3'</code> by <code>'2'</code> in Python.</li>
<li>So that you can work with floating-point numbers. Some things in life can come in bits and pieces, like kilograms, seconds, or grade point averages.</li>
<li>If your program needs to work with the numbers between consecutive integers, you should probably use <code>float</code>.</li>
<li>If you use strings in your program, you may want them to be numbers, regardless of where the strings came from.</li>
<li>You'll need to evaluate this on a case-by-case basis.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>You can implement error checking using the try function. The only reason to use an int vs a float, would be if you are trying to save memory, in the case of embedded ROM where you are severly limited.</p>
</div>
<span class="comment-copy">I think this is something that would probably be better discussed over in chat, certainly a broad topic but I didn't vote to close as too broad.</span>
<span class="comment-copy">Are you familiar with how floating point numbers and integers are represented in a computer at the level of bits and bytes? I feel as though that information is helpful in gaining understanding some of the subtleties of storing integers vs floating point numbers.</span>
<span class="comment-copy">So <code>float()</code> is almost like a superset of <code>int()</code>? When do I use <code>float()</code> then, when I need the user to input a numeric value? Also, I edited my question to include a batch of code in which I think I may have misused these commands but I'm not sure. Thank you so much for your help!</span>
<span class="comment-copy">If we are using the very strict mathematical sense of the word float is <i>almost</i> a superset of int but it is not for a few important reasons. Firstly not all whole numbers can be stored with exact precision with floats and secondly the python3 int type supports bigints which can be larger than the largest storable floating point number. Anyway a small comment can't do this justice so go read this: <a href="https://docs.python.org/3/tutorial/floatingpoint.html" rel="nofollow noreferrer">docs.python.org/3/tutorial/floatingpoint.html</a></span>
<span class="comment-copy">In the example you posted you should be using <code>float</code> since money can have a decimal value.</span>
<span class="comment-copy">They <i>are</i> using <code>float</code>, to grab the number. They are then converting it into the smallest unit of currency and making it an <code>int</code>, which is the right way to go.</span>
<span class="comment-copy">@NaomiJacobson - Do not use this answer. It's wrong. Keep doing what you're doing. Currency should be converted to its smallest denomination and stored as an integer to avoid floating-point errors.</span>
