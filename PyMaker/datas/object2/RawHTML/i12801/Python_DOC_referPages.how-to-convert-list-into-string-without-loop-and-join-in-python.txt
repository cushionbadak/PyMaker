<div class="post-text" itemprop="text">
<p>I am given a task to sort list like shown below:</p>
<pre><code>Input:  "Sorting1234"
Output: "ginortS1324"
</code></pre>
<p>without using <strong>join()</strong>, <strong>for</strong> or <strong>while</strong> anywhere in the code.
I succeeded after a lot of tries to sort in the required way, but I am unable to print it as a string </p>
<pre><code>My Output is: ['g', 'i', 'n', 'o', 'r', 't', 'S', '1', '3', '2', '4']
</code></pre>
<p>Here is my algorithm to sort with sorted():</p>
<pre><code>st=input()
def iseven(x):
if x.isdigit():
    return int(x)+9 if int(x)%2==0 else int(x)
res=sorted(st, key=lambda x: (x.isdigit(), x.isupper(), iseven(x), ord(x) ))
print(res)
</code></pre>
<p>Please help me on this</p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>but I am unable to print it as a string </p>
</blockquote>
<p>Just unpack the arguments out of the list using the <code>*</code> operator when calling <code>print()</code> and use <code>""</code> as a <a href="https://docs.python.org/3/library/functions.html#print" rel="nofollow noreferrer">separator</a>:</p>
<pre><code>&gt;&gt;&gt; L = ['g', 'i', 'n', 'o', 'r', 't', 'S', '1', '3', '2', '4']
&gt;&gt;&gt; print(*L, sep="")
ginortS1324
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/functions.html#reduce" rel="nofollow">reduce</a>, it is not in forbidden list. Append this line at the end of your code:</p>
<pre><code>new_res=reduce( lambda x,y: x+y, res, "")
print(new_res)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Without using join, for or while:</p>
<pre><code>print(reduce(lambda x,y:x+y, res, ''))
</code></pre>
<p>Implicitly uses a loop, but answers your question!</p>
</div>
<div class="post-text" itemprop="text">
<p>Say</p>
<pre><code>&gt;&gt;&gt; L = ['g', 'i', 'n', 'o', 'r', 't', 'S', '1', '3', '2', '4']
</code></pre>
<p>To convert char list into string without <code>join</code> and explicit loops, you can use <code>array</code> module:</p>
<pre><code>&gt;&gt;&gt; from array import array
&gt;&gt;&gt; array('c', L).tostring()
'ginortS1324'
</code></pre>
<p>or <code>struct</code> module:</p>
<pre><code>&gt;&gt;&gt; from struct import pack
&gt;&gt;&gt; pack('s' * len(L), *L)
'ginortS1324'
</code></pre>
<p>To avoid <code>import</code>, you can use string formation:</p>
<pre><code>&gt;&gt;&gt; ('{}'*len(L)).format(*L)
'ginortS1324'
</code></pre>
<p>To avoid implicit loops, you can use recursion:</p>
<pre><code>&gt;&gt;&gt; def recjoin(array):
...     return array[0] if len(array) == 1 else array[0] + recjoin(array[1:])
...
&gt;&gt;&gt; recursive_join(L)
'ginortS1324'
</code></pre>
</div>
<span class="comment-copy">@borja, you pointed to a question less restrictive where all related answers are using <code>for</code> statement.</span>
<span class="comment-copy">originally answered : <a href="https://stackoverflow.com/a/29761895/1528044">stackoverflow.com/a/29761895/1528044</a></span>
<span class="comment-copy">The OP seems to be using python3, which doesn't have a <i>built-in</i> <code>reduce</code>.</span>
<span class="comment-copy">3.x still has reduce, just has been moved to functools</span>
<span class="comment-copy">thanks about comment.</span>
<span class="comment-copy">Please, add explanations to your code to improve your answer</span>
