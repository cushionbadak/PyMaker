<div class="post-text" itemprop="text">
<p>Why the following code return two <strong>False</strong> pairs?</p>
<pre><code>from itertools import groupby

content = '1\t2\t3\n4\t5\t\n7\t8\t9'

result = groupby((line.split('\t') for line in content.splitlines()),
                 key=lambda x: x[2] == '')

for k, v in result:
    print '---&gt;', k, id(k)
    print list(v)
</code></pre>
<p>The result as following shown</p>
<pre><code>---&gt; False 505954168
[['1', '2', '3']]
---&gt; True 505954192
[['4', '5', '']]
---&gt; False 505954168
[['7', '8', '9']]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><a href="https://docs.python.org/3/library/itertools.html#itertools.groupby" rel="nofollow"><code>itertools.groupby</code></a></p>
<blockquote>
<p>makes an iterator that returns consecutive keys and groups from the
  iterable. ... <strong>It generates a break or new group every time the value of the key function changes (which is why it is usually necessary to have sorted the data using the same key function).</strong></p>
</blockquote>
<p>Emphasis added.</p>
<p>You'll need to sort your input</p>
<pre><code>genexp = (line.split('\t') for line in content.splitlines())
key = lambda x: x[2] == ''

result = groupby(sorted(genexp, key=key), key=key) # Note: same key function
</code></pre>
<p>or write your own grouping function. Frankly, it's not that hard:</p>
<pre><code>from collections import defaultdict
dd = defaultdict(list)
for x in genexp:
    dd[key(x)].append(x)
result = dd.items()
</code></pre>
</div>
<span class="comment-copy">What did you expect?</span>
<span class="comment-copy">I expect all False items are in a single group</span>
<span class="comment-copy">A dictionary would be the way to group, groupby only works for data that is ordered</span>
<span class="comment-copy">dicts are also more efficient than sorting</span>
