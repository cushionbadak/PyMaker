<div class="post-text" itemprop="text">
<p>So i am a noob in python and i don't usually ask a question unless i have searched exhaustively or tried several workarounds.I'm Creating an 8bit binary adder, by simulating the logic of various circuit gates..... </p>
<p>Basically i want to take each element in the two lists and feed them into a function that loops 8 times. (8 bits)</p>
<p>Creating two strings. (int can't start with a 0)    </p>
<pre><code>example1 = '00001001'
example2 = '11011100'
</code></pre>
<p>Assigning the slices to separate strings. One character each.  </p>
<pre><code>a1 = example1[7:8]
a2 = example1[6:7]
a3 = example1[5:6]
a4 = example1[4:5]
a5 = example1[3:4]
a6 = example1[2:3]
a7 = example1[1:2]
a8 = example1[0:1]

b1 = example2[7:8]
b2 = example2[6:7]
b3 = example2[5:6]
b4 = example2[4:5]
b5 = example2[3:4]
b6 = example2[2:3]
b7 = example2[1:2]
b8 = example2[0:1]
</code></pre>
<p>Adding those slices to lists and converting them into an int.</p>
<pre><code>aToInt = [int(a1),int(a2),int(a3),int(a4),int(a5),int(a6),int(a7),int(a8)]
bToInt = [int(b1),int(b2),int(b3),int(b4),int(b5),int(b6),int(b7),int(b8)]
</code></pre>
<p>Main function. Takes two inputs. One from each list... (aToInt and bToInt) (a,b)(a1,b1,a2,b2,a3,b3.....)</p>
<pre><code>def main(a,b): 
    for onebit in range(len(aToInt)):
        a = a{i++} ???
</code></pre>
<p>a and b need to change to a1,b1,a2,b2,a3,b3... ++ each interation of the loop.. </p>
<pre><code>       ##something like this maybe ("{a++}")?
       XOR1OUT = XOR(a{++},b{++})  
       print(" 1 XOR: ", XOR1OUT)

       AND1OUT = AND(a,b)
       print(" 1 AND: ",AND1OUT)

       AND2OUT = AND(XOR1OUT,c0)
       print(" 2 ANDL ", AND2OUT)

       CARRYOROUT = OR(AND1OUT,AND2OUT)
       print(" CARRY: ", CARRYOROUT)

       XOR2OUT = XOR(XOR1OUT,c0)
       print("final value: ", XOR2OUT)

main()
</code></pre>
<p>Other functions that also take two inputs... </p>
<pre><code>def OR(a,b):
    if a or b is 1:
        OR11 = 1
        return(OR11)
    else:
        OR10 = 0
        return(OR10)

def XOR(a,b):
    if a == b:
        XOR10 = 0
        return(XOR10)
    else:
        XOR11 = 1
        return(XOR11)

def AND(a,b):
    if a == 1 and b == 1:
        AND11 = 1
        return(AND11)
    elif a and b == 0:
        return(0)
    else:
        return(0)
</code></pre>
<p>Any suggestions and recommendations much appreciated.</p>
<p>=============================EDIT==================== SPECIFICS</p>
<p>So i have a list and i want to loop through that list</p>
<pre><code>list = [a1,b1,a2,b2,a3,b3....a8,b8]


def main():
</code></pre>
<blockquote>
<p>=code goes here for loop that changes a and b according to the list? (a......,b.....)?</p>
</blockquote>
<pre><code>   1st interation...
   dough = cookie(a1,b1)

   2nd interation...
   bread = bagel(a2,b2)


   2nd interation...
   oil = eggs(a3,a3)

   for 8 interations....


def cookie(a,b):
   if some code
   else some code


def bagel(a,b):
   if some code
   else some code


def eggs(a,b):
   if some code
   else some code
</code></pre>
<p>So i don't know what to call it but i want to be able to maybe map a,b onto a1,b1.... respectively. </p>
</div>
<div class="post-text" itemprop="text">
<p>I think your adder is implemented wrong, but you want something like this after you fix it.</p>
<pre><code>example_a = '00001001'
example_b = '11011100'
a_to_int = [int(char) for char in example_a] # == [0, 0, 0, 0, 1, 0, 0, 1]
b_to_int = [int(char) for char in example_b]

def OR(a, b):
    return a | b

def XOR(a, b):
    return a ^ b

def AND(a, b):
    return a &amp; b

def main(a, b):
    c0 = 0
    result = []
    for bit_a, bit_b in zip(a, b):
        xor1out = XOR(bit_a, bit_b)
        print("a XOR b:", xor1out)

        and1out = AND(bit_a, bit_b)
        print("a AND b:", and1out)

        and2out = AND(xor1out, c0)
        print("(a XOR b) AND c:", and2out)

        carryorout = OR(and1out, and2out)
        print("(a AND b) AND ((a XOR b) AND c):", carryorout)

        xor2out = XOR(xor1out, c0)
        print("(a XOR b) XOR ((a AND b) AND ((a XOR b) AND c))):", xor2out)

        c0 = carryorout
        result.append(xor2out)

    return ''.join(str(bit) for bit in result)
</code></pre>
<p>Call <code>main(a_to_int, b_to_int)</code> and see what it does.</p>
<p>Note the following salient points:</p>
<ul>
<li>Use list comprehensions; don't type things out 8 times. </li>
<li>Python has native <a href="https://docs.python.org/3.5/library/stdtypes.html#bitwise-operations-on-integer-types" rel="nofollow">bitwise operations</a> for AND, OR, XOR, and NOT.</li>
<li><a href="https://docs.python.org/3/library/functions.html#zip" rel="nofollow"><code>zip</code></a> pairs up two iterables, and so the for loop iterates over corresponding bits of <code>a</code> and <code>b</code>. But it does so from left to right, which is probably not what you want.</li>
<li><code>return</code> is not a function; it is conventional not to enclose a returned value in parentheses.</li>
<li><code>a or b is 1</code> does not mean <code>a is 1 or b is 1</code>, but rather <code>a or (b is 1)</code>. </li>
<li>Do not test for integer equality using <code>is</code>. Use <code>==</code>.</li>
<li><code>a{i++}</code> is not valid Python, and does not resemble any valid Python. I would tell you what to replace it with, but I don't even know what you want it to mean.</li>
<li>Python has native binary literals, written like so: <code>0b00001001</code>, which equals <code>9</code>.</li>
</ul>
<hr/>
<p>In short, what you actually want (a working full-adder) is this:</p>
<pre><code>example_a = '00001001'
example_b = '11011100'

to_ints = lambda s: [int(char) for char in s]

def main(a: str, b: str) -&gt; str:
    c = 0
    result = []
    for bit_a, bit_b in reversed(list(zip(to_ints(a), to_ints(b)))):

        s = (bit_a ^ bit_b) ^ c
        c_out = ((bit_a ^ bit_b) &amp; c) | (bit_a &amp; bit_b)

        result.append(s)
        c = c_out

    return ''.join(str(bit) for bit in result)[::-1]
</code></pre>
<p>Now, <code>main(example_a, example_b) == '11100101'</code>, as you would expect.</p>
</div>
<div class="post-text" itemprop="text">
<p>I think you are looking for <a href="https://docs.python.org/2/library/functions.html#zip" rel="nofollow">zip()</a> function</p>
<pre><code>example1 = '00001001'
example2 = '11011100'

for a,b in zip(example1, example2):
    print a, b
    # some_function(int(a), int(b))

output:
0 1
0 1
0 0
0 1
1 1
0 1
0 0
1 0
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you have two lists of numbers:</p>
<pre><code>a_values = [1, 2, 3, 4]
b_values = [10, 20, 30, 40]
</code></pre>
<p>and a function:</p>
<pre><code>def func(a, b):
    return a + b
</code></pre>
<p>you can use zip to iterate over both of them:</p>
<pre><code>for a, b in zip(a_values, b_values):
    print(func(a, b))
</code></pre>
<p>prints:</p>
<pre><code>11
22
33
44
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I believe you're looking for something like this:</p>
<pre><code>a = map(int, '00001001')
b = map(int, '11011100')
#             11010011

def xor(x, y):
    return (x or y) and not (x and y)

carry = 0
bits = []
for a_i, b_i in zip(a, b):
    bit = xor(a_i, b_i)
    new_carry = (bit and carry) or (a_i and b_i)
    bit = xor(bit, carry)
    carry = new_carry
    bits.append(bit)

print(''.join('{:d}'.format(b) for b in bits))
</code></pre>
<p>where the <em>lowest</em> bits of <code>a</code> and <code>b</code> come <em>first</em>, as your code seemed to assume. The output of the above is <code>11010011</code>, which is <code>00001001 + 11011100</code> (again, lowest bits are first).</p>
</div>
<span class="comment-copy">What's your question? Is it still about function parameters? If so, which function?</span>
<span class="comment-copy">What is <code>c0</code>? It does not appear to be defined anywhere.</span>
<span class="comment-copy">sorry. c0 = 1 .</span>
<span class="comment-copy">but that doesnt really matter. Just want to have that loop be able to change a and b to a1,b1,a2,b2,a3,b3 respectively each loop if you get me</span>
<span class="comment-copy">@JonathanLaliberte Why do you need to change a and b (which are the arguments of the function)? I suspect you have a deep misunderstanding of how function parameters work, or how loops work, or something like that.</span>
<span class="comment-copy">Thank you very much!</span>
<span class="comment-copy">Just spent a couple hours trying to understand this, and finally got it going. Really appreciate all the time you put into explaining it. And mentioning the things that i shouldn't be doing. That really helps. Thank you.</span>
<span class="comment-copy">not quite what i needed. But thanks nevertheless!</span>
<span class="comment-copy">cheers! That was what i needed. Thanks.</span>
