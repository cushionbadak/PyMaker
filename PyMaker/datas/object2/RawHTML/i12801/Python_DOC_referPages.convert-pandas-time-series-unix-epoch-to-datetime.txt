<div class="post-text" itemprop="text">
<p>I'm tying to convert the following series of UNIX epochs to regular datetime objects:</p>
<pre><code>&gt;&gt; val = pd.Series(["1440643875", "1440644191", "1440645638", "1440998720"])
&gt;&gt; val
0    1440643875
1    1440644191
2    1440645638
3    1440998720
Name: obj, dtype: object
</code></pre>
<p>There appears to be two ways of doing this. The first is:</p>
<pre><code>&gt;&gt; pd.to_datetime(val, unit='s')
ValueError: year is out of range
</code></pre>
<p>And the second:</p>
<pre><code>val.astype("datetime64[s]")
TypeError: Cannot parse "1445124547" as unit 's' using casting rule 'same_kind'
</code></pre>
<p>What seems to be the problem here? </p>
<p>I also tried checking these timestamps with the "Online Epoch Calculator" tools, and they give out reasonable answers..</p>
</div>
<div class="post-text" itemprop="text">
<p>The issue was that the elements were strings, and not ints. Apparently, <code>pd.to_datetime()</code> isn't smart enough to convert from strings to datetime.</p>
<p>My solution was this:</p>
<pre><code>&gt;&gt; val.astype('int').astype("datetime64[s]")
0   2015-08-27 02:51:15
1   2015-08-27 02:56:31
2   2015-08-27 03:20:38
3   2015-08-31 05:25:20
dtype: datetime64[ns]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><strong>EDITED</strong></p>
<p><code>datetime.datetime.utcfromtimestamp</code> could get only integer as paramer:</p>
<pre><code>In [510]: datetime.datetime.utcfromtimestamp('1440643875')
TypeError: an integer is required (got type str)
</code></pre>
<p>So first you need to convert your Series to int then you could use these methods:</p>
<pre><code>import pandas as pd
import datetime 

s = pd.Series(["1440643875", "1440644191", "1440645638", "1440998720"], dtype=object)

s = pd.to_numeric(s)

In [50]: s
Out[50]:
0    1440643875
1    1440644191
2    1440645638
3    1440998720
dtype: int64

In [51]: pd.to_datetime(s, unit='s')
Out[51]:
0   2015-08-27 02:51:15
1   2015-08-27 02:56:31
2   2015-08-27 03:20:38
3   2015-08-31 05:25:20
dtype: datetime64[ns]
</code></pre>
<p>Also <code>datetime.datetime.utcfromtimestamp</code> as @Adam Smith pointed out in comment:</p>
<pre><code>In [52]: s.apply(datetime.datetime.utcfromtimestamp)
Out[52]:
0   2015-08-27 02:51:15
1   2015-08-27 02:56:31
2   2015-08-27 03:20:38
3   2015-08-31 05:25:20
dtype: datetime64[ns]
</code></pre>
</div>
<span class="comment-copy"><a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp" rel="nofollow noreferrer"><code>datetime.datetime.fromtimestamp</code></a> seems to be the obvious approach.....</span>
<span class="comment-copy">@AdamSmith Right, but that's for converting a single element. What I wanted to do is to convert an entire Pandas series.</span>
<span class="comment-copy">Try quoting the elements of the series <code>s</code>, as in <code>s = pd.Series(["1440643875", ...], dtype=object)</code></span>
<span class="comment-copy">you are right, first you need to convert it to int, then use that methods</span>
<span class="comment-copy">@user1496984 take a look to edited version</span>
<span class="comment-copy">Yes, that would work. I personally find the chained <code>astype</code> methods more descriptive and easier to grasp.</span>
