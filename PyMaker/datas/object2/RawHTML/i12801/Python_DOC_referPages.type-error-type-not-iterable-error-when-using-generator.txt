<div class="post-text" itemprop="text">
<p>I added an generator function to be able to iterate through a predefined BinaryTree class, but when I run it with the testing code I get a TypeError saying that the BinaryTree class isn't iterable and I'm not sure why. Here is the provided code along with the generator function to traverse the tree as well as the testing code:</p>
<pre><code># Implement generator function to make class iterable

class BinaryTree:
    def __init__(self, content, leftSubtree=None, rightSubtree=None):
        self.content = content
        self.leftSubtree = leftSubtree
        self.rightSubtree = rightSubtree

    def __repr__(self):
        return str(self.content)

    def traverse(self):  # Generator implementation
        if self.rightSubtree:
            for leaf in self.rightSubtree:
                yield leaf
        yield self.content
        if self.leftSubtree:
            for leaf in self.leftSubtree:
                yield leaf

# Testing code

Node = BinaryTree

if __name__ == '__main__':
    s = Node(1) # Binary tree with 1 Node
    t = Node(10, s, None)   # Binary tree with 10 as content, 1 as left subtree
    tree = BinaryTree(20, None, t)  # Binary tree with 20 as content, no left subtree and t as right subtree

for x in (s, t, tree):
    print(x)

for node in tree:
    print(node)
</code></pre>
<p>Here is the error that gets printed out afterwards:</p>
<pre><code>1
Traceback (most recent call last):
10
20
  File "...binaryTree_adt.py", line 34, in &lt;module&gt;
for node in tree:
TypeError: 'BinaryTree' object is not iterable

Process finished with exit code 1
</code></pre>
<p>I know that for generators you don't need to create an iterator class as the generator will iterate through the items in a similar fashion. When I change the name of the "traverse" method to <strong>iter</strong> I don't get any errors, but when the name is changed I do. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>BinaryTree</code> itself is not iterable, no. Only the result produced by the <code>BinaryTree().traverse()</code> method is:</p>
<pre><code>for node in tree.traverse():
</code></pre>
<p>However, you'd need to adjust the method itself to use the <code>.traverse()</code> methods of the child nodes too:</p>
<pre><code>def traverse(self):  # Generator implementation
    if self.rightSubtree:
        for leaf in self.rightSubtree.traverse():
            yield leaf
    yield self.content
    if self.leftSubtree:
        for leaf in self.leftSubtree.traverse():
            yield leaf
</code></pre>
<p>If you want to make an instance <em>itself</em> iterable, you need to implement a <a href="https://docs.python.org/3/library/stdtypes.html#typeiter" rel="nofollow"><code>__iter__</code> method</a> that either returns an iterator (a generator function produces this, for example) or returns <code>__self__</code> at which point you also need to provide <code>next</code> or <code>__next__</code> method, depending on your Python version.</p>
<p>Here, renaming <code>traverse</code> to <code>__iter__</code> suffices:</p>
<pre><code>class BinaryTree:
    def __init__(self, content, leftSubtree=None, rightSubtree=None):
        self.content = content
        self.leftSubtree = leftSubtree
        self.rightSubtree = rightSubtree

    def __repr__(self):
        return str(self.content)

    def __iter__(self):
        if self.rightSubtree:
            for leaf in self.rightSubtree:
                yield leaf
        yield self.content
        if self.leftSubtree:
            for leaf in self.leftSubtree:
                yield leaf
</code></pre>
<p>Demo:</p>
<pre><code>&gt;&gt;&gt; class BinaryTree:
...     def __init__(self, content, leftSubtree=None, rightSubtree=None):
...         self.content = content
...         self.leftSubtree = leftSubtree
...         self.rightSubtree = rightSubtree
...     def __repr__(self):
...         return str(self.content)
...     def __iter__(self):
...         if self.rightSubtree:
...             for leaf in self.rightSubtree:
...                 yield leaf
...         yield self.content
...         if self.leftSubtree:
...             for leaf in self.leftSubtree:
...                 yield leaf
...
&gt;&gt;&gt; Node = BinaryTree
&gt;&gt;&gt; s = Node(1)
&gt;&gt;&gt; t = Node(10, s, None)
&gt;&gt;&gt; tree = BinaryTree(20, None, t)
&gt;&gt;&gt; for x in (s, t, tree):
...     print(x)
...
1
10
20
&gt;&gt;&gt; for node in tree:
...     print(node)
...
10
1
20
</code></pre>
</div>
<span class="comment-copy">When I originally use the name <b>iter</b> the code produced the correct output. I'm just confused as to why it would need to be named as such even though a generator (yield) is being used?</span>
<span class="comment-copy">@BrxttB: a generator is a method to produce an iterable; the result of calling <code>traversable()</code> is that iterable. You can make an instance iterable without using <code>yield</code>; just return <code>self</code> from <code>__iter__</code> and have <code>__next__</code> produce a value each time it is called.</span>
<span class="comment-copy">@BrxttB: see <a href="http://stackoverflow.com/q/19151">How to make class iterable?</a> for an example of a class that's iterable without using <code>yield</code>.</span>
<span class="comment-copy">I know how to make it iterable using <b>iter</b>, it's just that in this particular case I need to use a generator so I was under the impression that with a generator you don't need to define an <b>iter</b> method. Just the method that uses "yield"</span>
