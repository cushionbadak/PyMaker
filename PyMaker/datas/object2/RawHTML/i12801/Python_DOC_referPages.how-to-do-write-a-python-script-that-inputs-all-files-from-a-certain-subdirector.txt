<div class="post-text" itemprop="text">
<p>I have multiple text files in a certain subdirectory. All the text files are the same size, same amount of content, etc. </p>
<p>I do not know how to write a python script that takes an input file and can run from the Terminal. For text files 'file1.txt','file2.txt','file3.txt','file4.txt' in <code>\subdirectory</code>, there should be a way to run the script with</p>
<pre><code>python script.py --inputfile file1.txt, file2.txt, file3.txt, file4.txt
</code></pre>
<p>or something like</p>
<pre><code>python script.py (something) \subdirectory
</code></pre>
<p>should input all text files into the python script and run. How does one do this? </p>
<p>I usually just go to the local subdirectory and run the file from there, i.e. </p>
<pre><code>import os 
path = "/Users/name/desktop"
os.chdir(path)

filename = "file.txt"
f = open(filename, 'r')
output = f.read()
</code></pre>
<p>And 'output' will be the text file. I'm not sure how to write this so that in runs in the command line.</p>
</div>
<div class="post-text" itemprop="text">
<p>If you want semantics with some sugar you could use argparse,</p>
<p>but you can also process both files and directories given on the command line</p>
<pre><code>import sys
import os
import glob

def handle_file(filename):
    # whatever you want to do with the file named filename e.g.
    print(filename)  

for name in sys.argv[1:]:
    if name.find('.txt') != -1: 
        handle_file(name)
    else:
        for filename in glob.glob(os.path.join(name, '*.txt')): 
            handle_file(filename)
</code></pre>
<p>Given a subdirectory 'files' with files 'foo1.txt' 'foo2.txt', both</p>
<pre><code>python script.py files/foo1.txt files/foo2.txt
</code></pre>
<p>and</p>
<pre><code>python script.py files
</code></pre>
<p>call the handler for all respective <code>.txt</code> files.</p>
</div>
<div class="post-text" itemprop="text">
<p>quick and dirty:</p>
<pre><code>import sys

files = sys.argv
for f in files:
    print f #or read the files or whatever
</code></pre>
<p>If you call this program (say, script.py) like so:</p>
<pre><code>python script.py file1.txt file2.txt file3.txt
</code></pre>
<p>the output will be</p>
<pre><code>file1.txt
file2.txt
file3.txt
</code></pre>
<p>Now, a much nicer way (but with slightly more code) can be achieved with </p>
<pre><code>import argparse 
</code></pre>
<p>you can read about that module.</p>
</div>
<div class="post-text" itemprop="text">
<p>Take a look at the 'argparse' module, the first example in the docs has a solution for your use case: <a href="https://docs.python.org/2/library/argparse.html" rel="nofollow">https://docs.python.org/2/library/argparse.html</a></p>
</div>
<div class="post-text" itemprop="text">
<blockquote>
<p>How to do write a Python script that inputs all files from a certain
  subdirectory from command line?</p>
</blockquote>
<ol>
<li><p>You can use the wildcard <code>*</code> on the command line to get all the files in a directory:</p>
<p><code>$ python prog.py ./path/to/subdir/*.*</code></p></li>
<li><p>In a python program, <code>sys.argv</code> is a list of all the arguments passed on the command line:</p></li>
</ol>
<hr/>
<pre><code>import sys

for fname in sys.argv[1:]:
    with open(fname) as f:
        print(f.read())
</code></pre>
</div>
<span class="comment-copy">you should really look at something like argparse <a href="https://docs.python.org/3/library/argparse.html" rel="nofollow noreferrer">docs.python.org/3/library/argparse.html</a> but if you are looking for all files in a directory use either os.listdir or glob</span>
<span class="comment-copy">a note: <code>sys.argv</code> separates the command line arguments by whitespace, so make sure to wrap any file name with spaces in them with quotation marks. a second note: you need to iterate over <code>sys.argv[1:]</code> or you will process the name of your script as well.</span>
