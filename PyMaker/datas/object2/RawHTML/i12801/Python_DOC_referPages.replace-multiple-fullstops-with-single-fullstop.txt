<div class="post-text" itemprop="text">
<p>How do I replace multiple full stops with a single fullstop such that the NLTK sentence tokenizer can differentiate them as 2 different sentences</p>
<p>For e.g.</p>
<pre><code>a = "the food was good...what about the bread huh..Awesome"
</code></pre>
<p>If i use</p>
<p><code>nltk.sent_tokenize(a)</code></p>
<p>It gives me </p>
<pre><code>['the food was good...what about the bread huh..Awesome']
</code></pre>
<p>But what I want is </p>
<pre><code>['the food was good.', 'what about the bread huh.', 'Awesome']
</code></pre>
<p>How do I do this?</p>
</div>
<div class="post-text" itemprop="text">
<p>You can do this by using a <a href="https://docs.python.org/3/library/re.html#re.sub" rel="noreferrer">regex and substitute</a> the occurrences of multiple dots by only a single one as shown below:</p>
<pre><code>#!/usr/bin/env python3
# coding: utf-8

import re

a = "the food was good...what about the bread huh..Awesome"
a_replaced = re.sub(r'\.+', ".", a)
</code></pre>
<p>Giving you:</p>
<pre><code>'the food was good.what about the bread huh.Awesome'
</code></pre>
<p>In addition I'll give you a small explanation about how this works. <code>re.sub()</code> accepts a <a href="https://en.wikipedia.org/wiki/Regular_expression" rel="noreferrer">regex</a> pattern which should be replaced. In our case, this is <code>r'\.+'</code>.</p>
<p>So let's have a deeper look at this pattern. Since you're looking for dots <code>.</code> we need to catch them. However, normally the dot sign <code>.</code> is used in regexes to match any character which is not what we want to achieve. In order to match the dot <code>.</code> and not any character we need to escape this character by adding the backslash in front of the dot giving <code>\.</code>. </p>
<p>Since we want to find any occurrences of dots and we don't know how many dots there would be we are just looking for 'one ore more' which we achieve by appending the <code>+</code> to our matching group <code>/.</code>.</p>
<p>And there we are, having a working regex: <code>/.+</code> which we pass as <code>r'\.+'</code> to show Python that this is a regex and not a normal string. Next, as stated in <a href="https://docs.python.org/3/library/re.html#re.sub" rel="noreferrer"><code>re.sub()</code> docs</a>, we need to specify a string which we want to put instead of our regex pattern. This is a single dot <code>"."</code> only, since you want to replace several dots with a single one. The third parameter we passed is your string <code>a</code> in which we need to do the desired replacements.</p>
<p>I do not want to advertise anything, but for a quick overview on regex in Python I can suggest <a href="http://tartley.com/?p=1349" rel="noreferrer">this cheat sheet</a>.</p>
</div>
<div class="post-text" itemprop="text">
<p>You could also use <code>re.split</code> for this purpose. It returns you a list as well</p>
<pre><code>a="the food was good...what about the bread huh..Awesome"
sr = re.split("\.+", a)
print sr
</code></pre>
<p>You get</p>
<pre><code>['the food was good', 'what about the bread huh', 'Awesome']
</code></pre>
<p>Cheers!</p>
</div>
<span class="comment-copy">Have you checked that the ellipsis almost always ends a sentence in your corpus? Because that's not always the case: "That's... interesting".</span>
<span class="comment-copy">Bad idea: Sentence tokenizers exist because a period doesn't <b>always</b> end a sentence. But you can use <code>split()</code> to split on three periods, then sentence-tokenize each fragment into more sentences.</span>
