<div class="post-text" itemprop="text">
<p>I have a numerical list:</p>
<pre><code>a=[6,8,1,0,5,0]
</code></pre>
<p>and I need to obtain a list of indices from the original list in ascendent sorted order except for 0 elements like this: </p>
<pre><code>index=[3,4,1,0,2,0]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>a = [6, 8, 1, 0, 5, 0]

sorted_positions = {x: i for i, x in enumerate(sorted(a))}
# {0: 1, 1: 2, 5: 3, 6: 4, 8: 5}

indices = [sorted_positions[x] for x in a]
# [4, 5, 2, 1, 3, 1]

zeroes = a.count(0)
# 2

answer = [
    0 if x == 0
    else i - zeroes + 1
    for i, x in zip(indices, a)
]
# [3, 4, 1, 0, 2, 0]
</code></pre>
<p>Terms to search for if you don't recognise the syntax: list comprehension, dict comprehension, and python ternary operator.</p>
<p>For the case <code>a=[3,3,1,1,2,2]</code>, this gives <code>[6, 6, 2, 2, 4, 4]</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>using numpy's <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html" rel="nofollow noreferrer">argsort</a> lends a certain elegance to this problem</p>
<pre><code>import numpy as np
a=[6,8,1,0,5,0]
#create a numpy array
temp = np.array(a) 
#assign non zero values in array with correct argsort indices.
temp[temp != 0] = np.argsort(temp[temp != 0]) + 1 
print(temp)
[3 4 1 0 2 0]
</code></pre>
</div>
<span class="comment-copy">Does the order of the original list matter? Otherwise you could simply sort the list.</span>
<span class="comment-copy">What if the list contains duplicates? What would be the output for <code>a=[3,3,1,1,2,2]</code>?</span>
<span class="comment-copy">I think that what the op wants is the related index (+1) of the sorted array, so I think that in your case should be index=[5, 6, 1, 2, 3, 4]</span>
<span class="comment-copy">thanks a lot alex for your answer :)</span>
<span class="comment-copy">thanks a lot for this answer  :)</span>
