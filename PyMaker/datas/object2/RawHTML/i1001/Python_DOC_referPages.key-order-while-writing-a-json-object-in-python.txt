<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/10844064/items-in-json-object-are-out-of-order-using-json-dumps">Items in JSON object are out of order using “json.dumps”?</a>
<span class="question-originals-answer-count">
                    5 answers
                </span>
</li>
</ul>
</div>
<p>I need to show an output like below as a result of a webservice call</p>
<pre><code>{
  "predictions": [
    {
      "id": 18009,
      "cuisine": "italian",
      "probability": 0.17846838753494407
    },
    {
      "id": 28583,
      "cuisine": "italian",
      "probability": 0.1918703125538735
    }
  ]
}
</code></pre>
<p>I have the below code to create the object:</p>
<pre><code>    json_data = []
    for i in range (0, len(predicted_labels)):
        data = {}
        data['id'] = int(test['id'][i])
        data['cuisine'] = categoricalTransformer[predicted_labels[i]]
        item = predicted_probability[i]
        data['probability'] = item[predicted_labels[i]]
        json_data.append(data)
    json_return = {"predictions":json_data}
    return jsonify(json_return)
</code></pre>
<p>which reorders the key alphabetically as shown below. </p>
<pre><code>{
  "predictions": [
    {
      "cuisine": "italian",
      "id": 18009,
      "probability": 0.17846838753494407
    },
    {
      "cuisine": "italian",
      "id": 28583,
      "probability": 0.1918703125538735
    }
  ]
}
</code></pre>
<p>What should I do?</p>
</div>
<div class="post-text" itemprop="text">
<p>Rebuild your new dictionary with a <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" rel="nofollow noreferrer"><code>collections.defaultdict()</code></a>, and append ordered dictionaries with a <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer"><code>collections.OrderedDict()</code></a>:</p>
<pre><code>from collections import OrderedDict
from collections import defaultdict
from json import dumps

data = {
    "predictions": [
        {"id": 18009, "cuisine": "italian", "probability": 0.17846838753494407},
        {"id": 28583, "cuisine": "italian", "probability": 0.1918703125538735},
    ]
}

key_order = ["id", "cuisine", "probability"]

result = defaultdict(list)
for dic in data["predictions"]:
    ordered = OrderedDict((key, dic.get(key)) for key in key_order)
    result["predictions"].append(ordered)

print(dumps(result))
# {"predictions": [{"id": 18009, "cuisine": "italian", "probability": 0.17846838753494407}, {"id": 28583, "cuisine": "italian", "probability": 0.1918703125538735}]}
</code></pre>
<p><a href="https://docs.python.org/3/library/json.html#json.dumps" rel="nofollow noreferrer"><code>json.dumps()</code></a> here serializes the dictionary into a JSON formatted string. </p>
<p><strong>Note:</strong> If you are using <strong>Python3.6+</strong>, you can use normal dictionaries instead of <code>OrderedDict()</code>, since insertion order of keys is remembered. However, in 3.6 it is an implementation feature, whereas in 3.7 it is a language feature. You read more about this at <a href="https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6/39980744#39980744">Are dictionaries ordered in Python 3.6+?</a>. </p>
<p>You can probably rely on this feature for applications that have a minimum requirement of Python3.6. Furthermore, its probably safer to user <code>OrderedDict()</code> anyways, so your code can be backwards compatible for all python versions. </p>
</div>
<div class="post-text" itemprop="text">
<p>You can look into <a href="https://docs.python.org/2/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">Ordered Dictionary</a>. It remembers the insertion order, and you would be able to organise your json via this collection this way.  </p>
<p>Example:  </p>
<pre><code>datadict = {'a':'a', 'c':'c', 'b':'b'}
import collections

print (collections.OrderedDict(datadict))
#OrderedDict([('a':'a'), ('c':'c'), ('b':'b')])

x = collections.OrderedDict(datadict)
print (dict(x))
#{'a':'a', 'c':'c', 'b':'b'}

print (x == datadict)
#True


print (collections.OrderedDict(sorted(datadict.items(), key=lambda t:t[0])))
#OrderedDict([('a':'a'), ('b':'b'), ('c':'c')])

z = collections.OrderedDict(sorted(datadict.items(), key=lambda t:t[0]))
print (dict(z))
#{'a':'a', 'b':'b', 'c':'c'}

print (z == datadict)
#True
</code></pre>
<p>Using this, you can convert your <code>json_return</code> dict object into an <code>OrderedDict</code> with your desired insertion order and then return that <code>OrderedDict</code> object or convert it back into a <code>dict</code> and return that dict</p>
</div>
<span class="comment-copy">There is no key order in a Json object.</span>
<span class="comment-copy">Why is the key order relevant?</span>
<span class="comment-copy">Although you are correct that Python 3.6+  remembers insertion order, this behaviour is a side-effect of an implementation change and should not be relied on. For more future-proof code and greater reusability, <code>OrderedDict</code> should be used.</span>
<span class="comment-copy">@Grismar Yes thats a very good point, cheers.</span>
<span class="comment-copy">@Grismar This is correct for 3.6 only. Since Python 3.7 it is a documented feature. Still backward compatibility should be considered.</span>
