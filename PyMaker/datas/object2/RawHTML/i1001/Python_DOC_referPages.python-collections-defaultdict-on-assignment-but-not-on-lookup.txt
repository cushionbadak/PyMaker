<div class="post-text" itemprop="text">
<p>I have the following code:</p>
<pre><code>from collections import *
nested_dict = lambda: defaultdict(nested_dict)
data = nested_dict()
</code></pre>
<p>which enables me to write any new "path" in the dict as a one liner:</p>
<pre><code>data['A']['B']['C']=3
</code></pre>
<p>which is what I want.
But I want to get an exception when running (for any non existing path):</p>
<pre><code>var = data['A']['XXX']['C']
</code></pre>
<p>I feel I need defaultdict when writing, plain dict when reading...</p>
<p>Or, is there a simple nice way to check if a 'path' exists in a defaultdict without modifying its contents...</p>
<p>I tried converting the defaultdict back to a dict before the lookup, hoping that:</p>
<pre><code>dict(data)['A']['XXX']['C']
</code></pre>
<p>would raise a exception... but it kept creating missing keys...</p>
</div>
<div class="post-text" itemprop="text">
<p>You can't distingsuish between lookups and writes here, because it is the <em>lookups</em> that create your intermediary structure in the <code>data['A']['B']['C'] = 3</code> assignment. Python executes the indexing operations <code>data['A']</code> and then <code>['B']</code> first, before assigning to the <code>'C'</code> key. The <code>__getitem__</code>, <code>__setitem__</code> and <code>__missing__</code> hooks involved to make that work are not given enough context to distinguish between access that then leads to the <code>'C'</code> assignment from only 'reading' <code>'XXX'</code> in your second example.</p>
<p>You really only have 3 options here:</p>
<ul>
<li><p>Don't use <code>defaultdict</code>. When writing, <em>explicitly</em> create new nested dictionaries with <a href="https://docs.python.org/3/library/stdtypes.html#dict.setdefault" rel="nofollow noreferrer"><code>dict.setdefault()</code></a> instead; you can chain these calls as needed:</p>
<pre><code>var = {}
var.setdefault('A', {}).setdefault('B', {})['C'] = 3
</code></pre>
<p>or you can <a href="https://stackoverflow.com/questions/50932755/arbitrarily-nested-dictionary-from-tuples/50932879#50932879">wrap recursive behaviour in a few functions</a>.</p></li>
<li><p>Create a recursive copy of your <code>defaultdict</code> structure to replace it with a <code>dict</code> structure once you are done writing:</p>
<pre><code>def dd_to_d(dd):
    r = {}
    stack = [(r, dd)]
    while stack:
        target, dd = stack.pop()
        for key, value in dd.items():
            if isinstance(value, defaultdict):
                sub = {}
                stack.append((sub, value))
                value = sub
            target[key] = value
    return r

var = dd_to_d(var)
</code></pre></li>
<li><p>Set all the <code>default_factory</code> attributes to <code>None</code> to disable creating new values for missing keys:</p>
<pre><code>def disable_dd(dd):
    stack = [dd]
    while stack:
        dd = stack.pop()
        dd.default_factory = None
        for key, value in dd.items():
            if isinstance(value, defaultdict):
                stack.append(value)

disable_dd(var)
</code></pre></li>
</ul>
</div>
<div class="post-text" itemprop="text">
<p>An obvious solution is to just use plain dicts with a function that can "materialize" the intermediate keys:</p>
<pre><code>def write_path(d, path, value):
    for key in path[:-1]:
        d = d.setdefault(key, {})
    d[path[-1]] = value

d = {}

write_path(d, ['a', 'b', 'c'], 3)
print(d)
print(d['a']['b']['c'])
print(d['a']['b']['d'])
</code></pre>
<p>outputs</p>
<pre><code>{'a': {'b': {'c': 3}}}
3
Traceback (most recent call last):
  File "writedefaultdict.py", line 11, in &lt;module&gt;
    print(d['a']['b']['d'])
KeyError: 'd'
</code></pre>
</div>
<span class="comment-copy"><code>dict(data)</code> is a <i>shallow</i> copy.</span>
<span class="comment-copy">None of the objects involved have any way to distinguish between <code>var = data['A']['XXX']['C']</code>, which you want an exception for, and the first steps of <code>data['A']['XXX']['C']['D'] = 4</code>, which shouldn't throw.</span>
<span class="comment-copy">Thx. this are just work around... But maybe the problem has no better solution. I'll mark the answer as usefull (to give your effort credits), but leave room for a final solution if ever someone comes with a nicer proposal.</span>
<span class="comment-copy">@user1159290: I'd not call this a work-around. If you are using defaultdict, then your only options are to copy the structure over to dictionaries or disable the factory. The alternative option is to not use defaultdict, with <code>dict</code> being the obvious choice in that case.</span>
<span class="comment-copy">ok. no-one having any better solution to suggest, I have accepted your 'solution'. But really that is  not as good as I had hope for (but maybe best). In my case multiple assignments and lookups are interleaved,which makes none of the proposed 'solutions' look nice.</span>
<span class="comment-copy">@user1159290: I realised I didn't quite explain why these were your options. I've added that to the answer now.</span>
<span class="comment-copy">@matijnp : thx. I realized what happened (lookups being done during the assignment) when it happened, of course, but still hoped something I did not know of could be done towards a better solution. Thx anyway</span>
<span class="comment-copy">Same here. not a real solution but surely an obvious possible work-around. (+1)</span>
