<div class="post-text" itemprop="text">
<pre><code>hilarious = False

joke_evaluation = "Isn't that joke so funny?! {}"

print(joke_evaluation.format(hilarious))
</code></pre>
<p>For the following lines of Python code I'm failing to understand a key concept.</p>
<p>A string is assigned to the variable <code>joke_evaluation</code>and include <code>{}</code> to embed another variable within it.</p>
<p>The third line of code has got me stuck, we are saying print the variable <code>joke_evaluation</code> then using the <code>.format()</code> function and passing another variable to it - <code>hilarious</code> which is set as a boolean data type. </p>
<p>Are the <code>{}</code> effectively functioning as placeholders? How does the <code>.format()</code> function know to populate the <code>{}</code> with the variable <code>hilarious</code>?</p>
<p>Please explain in basic terms if possible to increase my understanding, I'm failing to understand how Python populates the curly braces <code>{}</code> as I've mentioned above.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's my understanding of the the <code>format</code> method:</p>
<p>Any string with curly braces <code>{}</code> will be replaced with the variable you have provided. So, if I have a string say:</p>
<p><code>myStr = "hello {}"</code></p>
<p>then doing: </p>
<pre><code>res = myStr.format("user")
print(res) #prints "hello user" without quotes.
</code></pre>
<p>Now, doing this:</p>
<pre><code>res = myStr.format(123123)
print(res) #prints "hello 123123" without quotes.
</code></pre>
<p>As you might have guessed, the integer <code>123123</code> was implicitly converted to string before being included in the string.</p>
<p>Now, coming to the curly <code>{}</code> part:</p>
<ol>
<li>You can have multiple curly braces and must have the same number of parameters passed to <code>format</code> method. Eg:
<code>
myStr = "hello {},{},{}, nice meeting you"
res = myStr.format("abcd",123,"lol")
print(res) #prints "hello abcd,123,lol, nice meeting you"
</code></li>
<li>You can even put indices in the <code>{}</code> to indicate position like <code>{0}</code> and <code>{1}</code>.</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Yes, <code>{}</code> acting as placeholders, which is treated by <code>.format</code> method in special way.</p>
<blockquote>
<p>How does the .format() function know to populate the {} with the variable hilarious?</p>
</blockquote>
<p>If you're providing <code>{}</code> only, it's substituted position-wise, i.e.</p>
<pre><code>&gt;&gt;&gt; 'first: {}, second: {}'.format(1, 2)
'first: 1, second: 2'
</code></pre>
<p>For more verbose or re-usable substitution you can use named arguments:</p>
<pre><code>&gt;&gt;&gt; "{actor1} tells {actor2} that he's {actor1}".format(actor1='Bob', actor2='Joel')
"Bob tells Joel that he's Bob"
</code></pre>
<p>More on awesome string formatting: <a href="https://pyformat.info/" rel="nofollow noreferrer">pyformat.info</a></p>
<p>A bit more on formatting, when <code>.format</code> substituting placeholders with some objects, it calls <a href="https://docs.python.org/3/reference/datamodel.html#object.__format__" rel="nofollow noreferrer"><code>__format__</code></a> method on it, which</p>
<ol>
<li>Accepts formatting spec â€” which gives you ability to control how it will be converted (for example, <code>'{:.2f}'.format(3.1415)</code></li>
<li>Return <code>str</code>, which will actually substitute placeholders</li>
</ol>
</div>
<div class="post-text" itemprop="text">
<p>Read Python documentation about string: <a href="https://docs.python.org/3.6/library/string.html?highlight=formatting" rel="nofollow noreferrer">https://docs.python.org/3.6/library/string.html?highlight=formatting</a></p>
<p>:) Everything you need to know. You can also change Python versions and see the behavior of formatting.</p>
<p>Scroll down to see examples and explanations.</p>
</div>
<span class="comment-copy">yes, it's placeholders. and <code>format</code> is bound to <code>str</code> not to <code>print</code></span>
<span class="comment-copy">you're forgetting that arguments are converted to <code>str</code>, which explains why booleans are printed as strings.</span>
<span class="comment-copy">Just to expand I found this useful link that explains quite well with the Returntype etc: <a href="https://www.geeksforgeeks.org/python-format-function/" rel="nofollow noreferrer">geeksforgeeks.org/python-format-function</a>  Is this kind of documentation that explains not available on the official Python docs?</span>
<span class="comment-copy">@user1554264 it is! Just read the link above, it is all in there with examples and explanation.</span>
