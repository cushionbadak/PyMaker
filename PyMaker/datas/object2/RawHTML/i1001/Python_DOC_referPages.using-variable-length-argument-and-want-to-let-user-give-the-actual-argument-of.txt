<div class="post-text" itemprop="text">
<p>want to give user the control to input flexible number of arguments</p>
<pre><code>def add(*y):
    c=0
    for j in y:
        c+=j
    print(c)
d=[]
n=int(input('give length of numbers you want to add'))
for i in range(n):
    c=int(input('give the input-'))
    d.append(c)
add()
</code></pre>
<p>please tell me what should I pass as an actual argument</p>
</div>
<div class="post-text" itemprop="text">
<p><code>add</code> takes any number of arguments, e.g.</p>
<pre><code>add()
add(5)
add(5, 8, 11, 45)
</code></pre>
<p>Since you have the arguments in a list (in variable <code>d</code>), you can unpack them this way:</p>
<pre><code>add(*d)
</code></pre>
<hr/>
<p>Let me clarify what the <code>*</code> does. It can be used in two places: in function definition and in function calls.</p>
<p>In function definition, <code>*</code> is used for making it possible to have a function which takes an arbitrary number of arguments.</p>
<p>For example, this function takes 2 arguments <code>x</code> and <code>y</code> and an arbitrary number of other arguments:</p>
<pre><code>def func(x, y, *other_arguments):
    print('x', x)
    print('y', y)
    print('other', other_arguments)
</code></pre>
<p>See how it behaves in the example:</p>
<pre><code>&gt;&gt;&gt; func(5, 6)
x 5
y 6
other ()
&gt;&gt;&gt; func(5, 6, 7)
x 5
y 6
other (7,)
&gt;&gt;&gt; func(5, 6, 7, 8, 9)
x 5
y 6
other (7, 8, 9)
</code></pre>
<p>As you can see, all <em>other arguments</em> are packed into a tuple and stored into the <code>other_arguments</code> variable.</p>
<p>When calling a function, the opposite can be done, i.e. a tuple or a list of values can be unpacked to be called as arguments. See this example:</p>
<pre><code>def calculate_sum(a, b, c):
    print('{} + {} + {} = {}'.format(a, b, c, a + b + c))
</code></pre>
<p>It can be called with 3 arguments:</p>
<pre><code>&gt;&gt;&gt; calculate_sum(1, 2, 3)
1 + 2 + 3 = 6
</code></pre>
<p>or with one list unpacked into 3 arguments:</p>
<pre><code>&gt;&gt;&gt; values = [5, 6, 7]
&gt;&gt;&gt;
&gt;&gt;&gt; calculate_sum(*values)
5 + 6 + 7 = 18
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Perhaps you can condense what you wrote into something like below : </p>
<pre><code>&gt;&gt;&gt; def add(*y):
...     c = 0
...     d = []
...     for i in y:
...             d.append(i)
...             c += i
...     print(d)
...     return c
... 
</code></pre>
<p>You can pass arguments like this, this will print the input values stored in the list d and the sum of the input values stored in c.</p>
<pre><code>&gt;&gt;&gt; add(5,6,7,8)
[5, 6, 7, 8]
26
</code></pre>
</div>
<span class="comment-copy">thanks bro...but can you explain what this *d is exactly doing in add(*d)....what does this * do?</span>
<span class="comment-copy">@QuamerNasim Take a look at Python documentation on <a href="https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists" rel="nofollow noreferrer">Arbitrary Argument Lists</a> and <a href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists" rel="nofollow noreferrer">Unpacking Argument Lists</a>.</span>
<span class="comment-copy">read my question bro...you defined a complete new problem...i did not asked for this...check it again...but thanks for your effort</span>
