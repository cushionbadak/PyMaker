<div class="post-text" itemprop="text">
<p>Taken from official Python <a href="https://docs.python.org/3/library/stdtypes.html#binary-sequence-types-bytes-bytearray-memoryview" rel="nofollow noreferrer">documentation</a>:</p>
<blockquote>
<p>Since bytes objects are sequences of integers (akin to a tuple), for a bytes object b, b[0] will be an integer, while b[0:1] will be a bytes object of length 1.</p>
</blockquote>
<p>I am quite confused as to why the designer choose to do so, since <code>byte</code> is just 8-bit and <code>int</code> is usually 32-bit. </p>
<p>Can somebody explain the reason behind why <code>b[0]</code> is an <code>int</code>? Thank you!</p>
<p>Edit:
I tried the following experiment:</p>
<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; b = bytes(100)
&gt;&gt;&gt; sys.getsizeof(b)
133
&gt;&gt;&gt; sys.getsizeof(list(b))
1008
</code></pre>
<p>It seems that <code>bytes</code> is represented by bytes in memory; but the question remains why iterate <code>bytes</code> as <code>int</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>A <code>bytes</code> object does not store <code>int</code>s. Indexing or iterating over a <code>bytes</code> object produces <code>int</code>s, but a <code>bytes</code> object stores bytes as bytes. Object overhead is only incurred once for the whole <code>bytes</code> object.</p>
<p>Individual bytes extracted from a <code>bytes</code> object are represented with the same integer type as any other integer because there is no point in doing otherwise. Since CPython stores canonical copies of small integers, the only cost of storing a byte as an ordinary <code>int</code> is the cost of the pointer.</p>
<p>Creating a dedicated <code>byte</code> type just for this would still cost 16 bytes of object overhead per <code>byte</code> object on a standard 64-bit CPython build, plus 1 byte for the data, plus 8 bytes for the pointer, for a net loss of 17 bytes compared to just storing the pointer for an <code>int</code>. Sure, you could store canonical <code>byte</code> objects, but that still gives you no benefit over the existing canonical <code>int</code>s. Also, a <code>byte</code> type would add extra complexity to code that needs to interact with <code>byte</code>.</p>
<p>The only way to store bytes in less bytes per byte in CPython's data model than just using ints is to use a packed representation, and the packed representation for that is <code>bytes</code> itself.</p>
</div>
<div class="post-text" itemprop="text">
<p>A byte can be represented as an <code>int</code> below 2**8, or under 256. This is for easier redability of the bytes object's bytes.</p>
<p>Note: When you make a bytes object, it displays:</p>
<pre><code>bytes(iterable_of_ints) -&gt; bytes
</code></pre>
<p>This means a bytes object is just many ints but turned into encoded bytes.</p>
<p>Think of a bytes object as a list of ints. Check this out:</p>
<pre><code>&gt;&gt;&gt; l = [1, 36, 233]
&gt;&gt;&gt; b = bytes(l)
&gt;&gt;&gt; l[0]
1
&gt;&gt;&gt; b[0]
1
&gt;&gt;&gt; l[0:1]
[1]
&gt;&gt;&gt; b[0:1]
b'\x01'
</code></pre>
<p><br/>
Now about the question of why?</p>
<p>What other way can one represent a byte?<br/>
A <strong>string</strong> sure would represent many bytes <em>with an encoding</em>, but not if it has a different encoding or no encoding specified.<br/>
A <strong>tuple</strong> wouldn't make sense as it can have <em>anything</em> inside it. That includes other strings, floats, and other stuff a byte wouldn't represent.<br/>
An <strong>integer</strong> would only represent one byte, and a tuple of ints specifically for this purpose would work.</p>
<p>Therefore, a tuple of <code>int</code>s would make up a <code>bytes</code> object, and a <code>bytes</code> object would be able to be decoded and encoded into strings for use. An <code>int</code> would be the only 'pure' way of representing a single byte inside the <code>bytes</code> object.</p>
</div>
<span class="comment-copy">Python's integers are arbitrary-precision objects anyway, not primitives. Many small values are interned so there isn't a lot of overhead.</span>
<span class="comment-copy">Python has no <code>byte</code> type, and Python's <code>int</code> is not 32-bit.</span>
<span class="comment-copy">Also, a <code>bytes</code> object does not physically contain <code>int</code>s.</span>
<span class="comment-copy">@user2357112 thank you, the fact that there is no <code>byte</code> type explains the iteration as integers for me.</span>
<span class="comment-copy">And anyway, often when I am iterating or indexing into a bytes object, I care about the actual integer value. I recall there was a PEP to add an <code>iterbytes</code> method to iterate like a <code>str</code> object, and I believe an equivalent indexing method as well. Don't recall what came of it</span>
<span class="comment-copy">That's not what the question is asking.</span>
<span class="comment-copy">I've changed it a little bit. Does this count towards answering it?</span>
<span class="comment-copy">No, the OP knows it's basically a list of ints but is wondering <i>why</i>.</span>
<span class="comment-copy">Well, what other way can one represent a byte? A string would represent many bytes with an encoding, but not if it has a different encoding. A tuple wouldn't make sense as it can have anything inside it. An integer would only represent one, and a tuple of ints would work. I think this should answer it fairly well.</span>
<span class="comment-copy">@GeeTransit yes, your last comment actually answers the question for me. I now understand. Thank you!</span>
