<div class="post-text" itemprop="text">
<p>So I'm writing a Python program in Python 3.7 and I'm interacting with my database through a module named PyMySQL. It basically lets you run queries on the database through Python/your program.</p>
<p>I've been searching all around SO and Google to find a solution for my problem, but I've found nothing so I'm gonna ask about it.</p>
<p>Let's say I have for example 3 columns, "UserID", "Username" and "Password", in the table "Users".
I want to replace all sorts of characters (alphabetical, numeric and special characters) under the column "Password" with an asterisk(*) per character and IF POSSIBLE, I want the replace to happen when a new entry is being made, so I don't have to put load on the whole database on all columns but on individual NEW entries.</p>
</div>
<div class="post-text" itemprop="text">
<p>First; a warning. Do <strong><em>not</em></strong> continue with what you're trying to do. This is a serious security risk that will actually make things <em>worse</em>. Firstly, you shouldn't have plaintext passwords, but converting them all to <code>*</code> makes the situation worse because then all I have to do is guess the sequence length, dramatically reducing complexity (not to mention, invalidating all of your user credentials).</p>
<p>You should use a library to generate hashes of passwords. There are multiple, I'm picking the base one used by Flask because it needs no setup and will also <em>salt</em> the password. You can also use <a href="https://docs.python.org/3/library/hashlib.html" rel="nofollow noreferrer"><code>hashlib</code></a> etc.</p>
<pre><code>from werkzeug.security import check_password_hash, generate_password_hash

password = 'hello123'
pass_hash = generate_password_hash(password)
print(pass_hash) # STORE THIS

print(check_password_hash(pass_hash, 'hello'))    # False
print(check_password_hash(pass_hash, 'hello123')) # True
</code></pre>
<p>Do not try to create your own hash algorithms, always rely on professional packages.</p>
<p>You should be able to simply fix this with:</p>
<pre><code>cursor.execute("""
               SELECT user_id, password
               FROM users
               """)
data = cursor.fetchall()
hashed = []
for user, password in data:
    hashed.append([generate_password_hash(password), user])

cursor.executemany("""
                   UPDATE users
                   SET password = %s
                   WHERE user_id = %s
                   """, (hashed))
</code></pre>
</div>
<span class="comment-copy">Please don't tell me this is an attempt at hashing passwords. The result will be <i>worse</i> than storing the raw text. If this is for sharing a database then you still had an issue to begin with by storing plaintext passwords.</span>
<span class="comment-copy">Why even collect the password if you're just going to reduce to all asterisks?</span>
<span class="comment-copy">I want to hide the password column but still need it functioning for authentication purposes (e.x.: A login system).</span>
<span class="comment-copy">But it won't, because now I just need to guess the correct number of <code>*</code> to be authenticated. Do <i>not</i> do this. Look into hashing algorithms like SHA and use a pre-built library. Your current plan is about as bad a security risk you could get.</span>
<span class="comment-copy">And how is that possible?</span>
