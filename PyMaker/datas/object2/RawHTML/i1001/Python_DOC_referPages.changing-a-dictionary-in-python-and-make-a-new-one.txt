<div class="post-text" itemprop="text">
<p>I have a dictionary in python like this example:</p>
<p>small example:</p>
<pre><code>d = {'chr12:112843810-112843817': 'CGTAGAG', 'chr16:48394513-48394520': 'TTTAAAC'}
</code></pre>
<p>the value of this dictionary is a sequence of characters and the characters can only be <code>A, C, G or T</code>. but I want to make a new dictionary in which the keys are similar but values are different. in fact in new dictionary the sequence of characters would have 2 changes:</p>
<p>1- it must be reversed (direction). for example "<code>AGT</code>" would be "<code>TGA</code>".
2- I want to convert: A -&gt; T , T -&gt; A , C -&gt; G , G -&gt; C. </p>
<p>considering 2 above items, <code>AGTCC</code> would be converted to <code>GGACT</code> </p>
<p>here is the expected output for the small example:</p>
<p>expected output:</p>
<pre><code>d2 = {'chr12:112843810-112843817': 'CTCTACG', 'chr16:48394513-48394520': 'GTTTAAA'}
</code></pre>
<p>I am trying to do that in python using the following code:</p>
<pre><code>def reverse_complement(dict):
    for v in dict:
        complement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}
        return [complement[base] for base in v[::-1]]
</code></pre>
<p>but it does not return what would like to get. do you know how to fix it?</p>
</div>
<div class="post-text" itemprop="text">
<ul>
<li><p><code>for v in dict</code> iterates the keys, not the values. You should use <code>items</code> to iterate over key-value pairs.</p></li>
<li><p>The <code>return</code> statement causes the function to <code>return</code> after the first iteration.</p></li>
<li><p><code>dict</code> is a bad variable name (<code>d</code> is probably worse, but at least it does not shadow a built-in name)</p></li>
</ul>
<p>You can use a dict comphrension:</p>
<pre><code>def reverse_complement(d):
    complement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}
    return {k: ''.join(complement[base] for base in v[::-1]) for k, v in d.items()}
</code></pre>
<p>or with <a href="https://docs.python.org/3/library/stdtypes.html#str.translate" rel="nofollow noreferrer"><code>str.translate</code></a>:</p>
<pre><code>def reverse_complement(d):
    table = str.maketrans('ACGT', 'TGCA')
    return {k: v[::-1].translate(table) for k, v in d.items()}
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Here another solution with string replacement methods. This might be faster.
the complement method does the inversion by fist setting the string to lower case and then doing the renaming based on lower to upper case.</p>
<p>The "[::-1]" reverses the order and the rest is a dictionary comprehension, that creates a new dictionary</p>
<pre><code>complement = lambda s: s.lower().replace("g","C").replace("c","G").replace("t","A").replace("a","T")
d2 = { k:complement(v)[::-1] for k,v in d.items() }
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Similar to first answer by <a href="https://stackoverflow.com/questions/54114715/changing-a-dictionary-in-python-and-make-a-new-one/54114787#54114787">@DeepSpace</a>, you could map the complements in-place with <a href="https://docs.python.org/3/library/functions.html#reversed" rel="nofollow noreferrer"><code>reversed()</code></a>:</p>
<pre><code>d = {'chr12:112843810-112843817': 'CGTAGAG', 'chr16:48394513-48394520': 'TTTAAAC'}

complements = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}

for k, v in d.items():
    d[k] = ''.join(map(complements.get, reversed(v)))

print(d)
# {'chr12:112843810-112843817': 'CTCTACG', 'chr16:48394513-48394520': 'GTTTAAA'}
</code></pre>
<p>You can also rebuild new dictionary:</p>
<pre><code>d2 = {k: ''.join(map(complements.get, reversed(v))) for k, v in d.items()}

print(d2)
# {'chr12:112843810-112843817': 'CTCTACG', 'chr16:48394513-48394520': 'GTTTAAA'}
</code></pre>
<p><strong>Note:</strong> <code>''.join(map(complements.get, reversed(v)))</code> is just another way of writing <code>''.join(complemements.get(x) for x in reversed(v))</code>. </p>
</div>
<span class="comment-copy">Are you sure you want to return <i>right after the first iteration</i>? Also, are you sure you want to return a <i>string</i>, and not a dictionary?</span>
<span class="comment-copy">str.translate seems like the perfect function here</span>
<span class="comment-copy">I do not see why this would be faster (the call to <code>.lower</code> + every call to <code>.replace</code> create a new string). I'm also not sure why you call <code>lower</code> instead of replacing upper-case letters.</span>
<span class="comment-copy">well, if you were not aware of the str.translate function, as I was, then if you replace all A by T and in the next step all T by A op will end up only A.</span>
<span class="comment-copy">Fair enough....</span>
