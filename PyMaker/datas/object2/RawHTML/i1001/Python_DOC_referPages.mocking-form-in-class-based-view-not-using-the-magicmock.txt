<div class="post-text" itemprop="text">
<p>I've been fighting with mocking a form class to replace an instance of it in a class-based view. But it looks like that because the form is in a class attribute, it happens <em>before</em> I replace the form class with my mock. Case in point:</p>
<p><strong>app/views.py</strong></p>
<pre class="lang-py prettyprint-override"><code>from app.forms import SomeForm  # For some reason, this _is_ my mock...

class SomeViewClass(View):
    form = SomeForm  # ... while this is the _real_ SomeForm

    def post(self, request):
        form = self.form(request.POST, request.FILES)

        # Hacked around with pdb here
        # (Pdb) self.form = SomeForm &lt;-- Force the mock into the object
        # (Pdb) form = self.form(request.POST, request.FILES)
        # (Pdb) form.is_valid() is now True
        # (Pdb) continue &lt;--- Test finishes, and asserts are OK.

        if form.is_valid():  # This fails, as I'm running the real code
            # code, code, code
</code></pre>
<p><strong>app/tests/test_views.py</strong></p>
<pre class="lang-py prettyprint-override"><code>from mock import MagicMock, patch

from django.tests import Client, TestCase


@patch('app.views.SomeForm')
    def test_post_valid_form_should_pass(self, mocked_form_class):
        """ Replacing SomeForm in SomeViewClass to pas the is_valid test
        """
        form_instance = MagicMock(spec=SomeForm())
        form_instance.is_valid.return_value = True
        mocked_form_class.return_value = form_instance

        self.client.login(**self.credentials)
        # code, code, code

</code></pre>
<p>As you can see in the inserted comments in <code>app/views.py</code>, I forcefully reloaded <code>self.form</code> and redefined the variable <code>form</code> using pdb, which made my test pass.</p>
<p>It seems that for some reason, the <code>SomeViewClass</code> is [registered,instanciated,...] before I start patching <code>SomeForm</code>. Any ideas on that?</p>
</div>
<div class="post-text" itemprop="text">
<p>The problem is that the view is already loaded by Django and the <code>form</code> field is already defined and pointing to the <code>SomeForm</code> <em>production</em> class.</p>
<p>As @DanielRoseman and @foxyblue pointed out in their comments, it is possible to patch directly a field in a class. And actually <a href="https://stackoverflow.com/a/42180559/2441358">there was already an answer for that on SO</a>. As pointed out, it is possible to use <code>patch.object</code> <a href="https://docs.python.org/3/library/unittest.mock.html#patch-object" rel="nofollow noreferrer">to patch a member of a class</a> (which is, IMO, the best solution, as it's more explicit, and less prone to typos)</p>
<h2>Test corrected:</h2>
<p><strong>With <code>patch</code></strong></p>
<pre class="lang-py prettyprint-override"><code>@patch('app.views.SomeView.form', autospec=SomeForm)
    def test_post_valid_form_should_pass(self, mocked_form_class):
        """ Replacing SomeForm in SomeViewClass.form to pass the is_valid test """
        mocked_form_class.is_valid.return_value = True

        self.client.login(**self.credentials)
        # code, code, code
</code></pre>
<p><strong>With <code>patch.object</code></strong></p>
<pre class="lang-py prettyprint-override"><code>@patch.object(SomeView, 'form', autospec=SomeForm)
    def test_post_valid_form_should_pass(self, mocked_form_class):
        """ Replacing SomeForm in SomeViewClass.form to pass the is_valid test """
        mocked_form_class.is_valid.return_value = True

        self.client.login(**self.credentials)
        # code, code, code
</code></pre>
</div>
<span class="comment-copy">How about if you do <code>@patch('app.views.SomeForm.form')</code>?</span>
<span class="comment-copy">@DanielRoseman <code>form</code> is an attribute of <code>SomeViewClass</code> not of <code>SomeForm</code></span>
<span class="comment-copy">@DanielRoseman That was it! Thanks a lot. Although foxyblue is right on the location of the attribute. Could you make it an answer for me to validate it?</span>
