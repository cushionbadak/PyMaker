<div class="post-text" itemprop="text">
<p>I am writing a python script to give me the sizes of my directory and subdirectories. I am getting the following error.</p>
<pre><code>=======================
        AMD
                Bytes: 23917297664
                Megs: 22809.3125
                Gigs: 22.27471923828125
Traceback (most recent call last):
  File "c:\users\user\desktop\temp3.py", line 13, in &lt;module&gt;
    sum(os.path.getsize(f) for f in os.listdir(dir) if os.path.isfile(f))
PermissionError: [WinError 5] Access is denied: 'Documents and Settings
</code></pre>
<p>Here is my code</p>
<pre><code>import os


dir_size = sum(os.path.getsize(f) for f in os.listdir('.') if os.path.isfile(f))
print(os.getcwd())
print(os.listdir('.'))
print("\tBytes: {}".format(dir_size))
print("\tMegs: {}".format(dir_size/1048576))
print("\tGigs: {}".format((dir_size/1048576)/1024))

dirs = os.listdir('.')

for dir in dirs:
    if "$" not in dir:
        sum(os.path.getsize(f) for f in os.listdir(dir) if os.path.isfile(f))
        print("=======================")
        print("\t{}".format(dir))
        print("\t\tBytes: {}".format(dir_size))
        print("\t\tMegs: {}".format(dir_size/1048576))
        print("\t\tGigs: {}".format((dir_size/1048576)/1024))
</code></pre>
<p>I am the only user on the system, I am the Administrator so I thought I should of course have permissions to see everything.  Any ideas?</p>
<p>As a side note:
PermissionError: [WinError 5] Access is denied python using moviepy to write gif has been suggested as a similar solution/question, below I explain why this is not the case.</p>
<p>Not the same, the solutions provided do not apply here. I am admin, I am running it as admin, and I am not using the moviepy lib</p>
</div>
<div class="post-text" itemprop="text">
<p>In Windows, the Administrator doesn't have access to everything right away.<br/>
It is more complicating.</p>
<p>See: <a href="https://www.think-like-a-computer.com/2011/05/11/windows-access-denied-folder-administrator/" rel="nofollow noreferrer">Windows 7 Access Denied For Administrator</a>:</p>
<blockquote>
<p>The easiest [way] is to turn UAC off.
  Folder access will then behave exactly like XP</p>
</blockquote>
<p>and:</p>
<blockquote>
<p>With UAC enabled, to access a folder you need to run Windows
  Explorer [...] from the start menu, right clicking it and choose
  “Run as Administrator” [...]<br/>
<strong>unfortunately this doesn’t work due to a bug in Windows Explorer</strong></p>
</blockquote>
<p>(But I suggest to check if a workaround would be good enough, and if not be sure that you understand exactly what you are doing.)</p>
<p>See also: <a href="https://superuser.com/questions/139841/access-denied-even-though-im-an-administrator">Access denied even though I'm an Administrator?</a></p>
<h2>Workarounds:</h2>
<h3>1)</h3>
<p>You can catch the error:<br/>
(of course, this way you would just accept to not having access)</p>
<pre><code>import os

def getList( dir ):
    try:
        return os.listdir( dir )
    except Exception as e:
        print('!ERROR: {}, {}'.format( type(e).__name__, dir ) )
    return []

root = 'c:/'
for dir in getList( root ):
    dir = root + '/' + dir
    if os.path.isdir( dir ):
        dir_size = sum( os.path.getsize( dir + '/' + f ) for f in getList( dir ) if os.path.isfile( dir + '/' + f ) )
        print( "{}, {}".format( dir_size, dir ) )
</code></pre>
<h3>2)</h3>
<p>You can use <a href="https://docs.python.org/3/library/os.html" rel="nofollow noreferrer">os.walk()</a>:</p>
<p>os.walk() will work without an error, but:</p>
<ul>
<li>always traverses all files / folders in all levels.  </li>
<li>doesn't show <code>C:\Documents and Settings</code> at all<br/>
I don't know for sure what criteria are responsible for that. Obviously 'permission denied' folders are not shown (?) (Own junctions and hidden files are shown.)</li>
</ul>
<p>You can <em>ignore</em> levels (but all will be traversed in the background anyway):</p>
<pre><code>import os

path = 'C:'
startlevel = path.count( os.sep )
level = 0
w = os.walk( path )

for p, dn, fn in w:
    level = p.count( os.sep )
    if level - startlevel &lt; 1:
        print( level, p )

print('done.')
</code></pre>
<h2>Junctions:</h2>
<p>E.g. <code>C:\Documents and Settings</code> is a <a href="https://docs.microsoft.com/en-us/windows/desktop/fileio/hard-links-and-junctions" rel="nofollow noreferrer"><em>junction</em></a> to <code>C:\Users</code> in in Windows 7.  </p>
<p>You can't access <code>C:\Documents and Settings</code>,<br/>
but you <em>can</em> access <code>C:\Documents and Settings\yourUserName</code> = <code>c:/Users/yourUserName</code>.</p>
<pre><code>d = os.listdir('c:/Documents and Settings')               # -&gt; ERROR
d = os.listdir('c:/Documents and Settings/yourUserName')  # -&gt; OK

os.listdir('c:/Documents and Settings/yourUserName') == os.listdir('c:/Users/yourUserName') # -&gt; True
</code></pre>
<p>There is <strong>no easy way</strong> to check for windows junctions in Python 2 and 3.<br/>
<code>os.path.islink</code> and <code>pathlib.Path().is_symlink()</code> don't work for windows junctions:</p>
<pre><code>os.path.islink('C:/Documents and Settings')              # returns False
pathlib.Path('C:/Documents and Settings').is_symlink()   # returns False
</code></pre>
<p>There is an answer that seems discuss windows junctions in python (that goes beyond my knowledge): <a href="https://stackoverflow.com/questions/27972776/having-trouble-implementing-a-readlink-function">implementing a readlink() function</a></p>
<p>See also <a href="https://stackoverflow.com/questions/11068419/check-if-file-is-symlink-in-python">Check if file is symlink in python</a>.</p>
</div>
<span class="comment-copy">Possible duplicate of <a href="https://stackoverflow.com/questions/26091530/permissionerror-winerror-5-access-is-denied-python-using-moviepy-to-write-gif">PermissionError: [WinError 5] Access is denied python using moviepy to write gif</a></span>
<span class="comment-copy">Thanks, I looked at that when I posted this. Not the same, the solutions provided do not apply here. I am admin, I am running it as admin, and I am not using the moviepy lib, but thanks.</span>
<span class="comment-copy">How do you run it? Via IDLE?</span>
<span class="comment-copy">I run via the command line in Windows 10.</span>
<span class="comment-copy">not sure, but instead of <code>os.listdir(dir)</code> try : <code>os.listdir(os.path.join(dirs,dir))</code></span>
<span class="comment-copy">Junctions are used for mountpoints. When they target volume GUID names (as mountvol.exe does), they're similar to Unix mounts. When they target local paths (as CMD's <code>mklink /j</code>), they're similar to Unix bind mounts. "\Documents and Settings" is a bind-style junction to "\Users" that exists for backwards compatibility. The security on this junction denies Everyone the right to list its contents, since it only exists to be traversed. It's strictly an access issue due to the security on the directory; otherwise there's nothing special about junctions in this regard.</span>
