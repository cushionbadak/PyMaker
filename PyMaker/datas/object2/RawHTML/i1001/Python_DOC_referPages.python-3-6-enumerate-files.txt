<div class="post-text" itemprop="text">
<p>I am trying to loop a series of jpg files in a folder. I found example code of that:</p>
<pre><code>for n, image_file in enumerate(os.scandir(image_folder)):
</code></pre>
<p>which will loop through the image files in <code>image_folder</code>. However, it seems like it is not following any sequence. I have my files name like <code>000001.jpg</code>, <code>000002.jpg</code>, <code>000003.jpg</code>,... and so on. But when the code run, it did not follow the sequence:</p>
<pre><code>000213.jpg
000012.jpg
000672.jpg
....
</code></pre>
<p>What seems to be the issue here?</p>
</div>
<div class="post-text" itemprop="text">
<p>Here's the relevant bit on <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer">os.scandir()</a>:</p>
<blockquote>
<p>os.<strong>scandir</strong>â€‹<em>(path='.')</em></p>
<p>Return an iterator of <code>os.DirEntry</code> objects
  corresponding to the entries in the directory given by <em>path</em>. The
  entries are yielded in <strong>arbitrary order</strong>, and the special entries <code>'.'</code>
  and <code>'..'</code> are not included.</p>
</blockquote>
<p>You should not expect it to be in any particular order.  The same goes for <a href="https://docs.python.org/3/library/os.html#os.listdir" rel="nofollow noreferrer"><code>listdir()</code></a> if you were considering this as an alternative.</p>
<p>If you strictly need them to be in order, consider sorting them first:</p>
<pre><code>scanned = sorted([f for f in os.scandir(image_folder)], key=lambda f: f.name)
for n, image_file in enumerate(scanned):

# ... rest of your code
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>I prefer to use <code>glob</code>:</p>
<blockquote>
<p>The glob module finds all the pathnames matching a specified pattern
  according to the rules used by the Unix shell, although results are
  returned in arbitrary order. No tilde expansion is done, but *, ?, and
  character ranges expressed with [] will be correctly matched.</p>
</blockquote>
<p>You will need this if you handle more complex file structures so starting with glob isnt that bad. For your case you also can use <code>os.scandir()</code> as mentioned above. </p>
<p>Reference: <a href="https://docs.python.org/3/library/glob.html#module-glob" rel="nofollow noreferrer">glob module</a></p>
<pre><code>import glob
files = sorted(glob.glob(r"C:\Users\Fabian\Desktop\stack\img\*.jpg"))
for key, myfile in enumerate(files):
    print(key, myfile)
</code></pre>
<p><em>notice even if there other files like <code>.txt</code> they wont be in your <code>list</code></em></p>
<p>Output:</p>
<pre><code>C:\Users\Fabian\Desktop\stack&gt;python c:/Users/Fabian/Desktop/stack/img.py
0 C:\Users\Fabian\Desktop\stack\img\img0001.jpg
1 C:\Users\Fabian\Desktop\stack\img\img0002.jpg
2 C:\Users\Fabian\Desktop\stack\img\img0003.jpg
....
</code></pre>
</div>
<span class="comment-copy">Have you read the <a href="https://docs.python.org/3/library/os.html#os.scandir" rel="nofollow noreferrer">documentation</a>? If you did, you would know the answer. As for the remedy, have the files sorted before enumerating them.</span>
<span class="comment-copy">... and, because <i>you want</i> <code>file_9.jpg</code> to come before <code>file_10.jpg</code>, have a look at the <a href="https://pypi.org/project/natsort/" rel="nofollow noreferrer">natsort</a> module</span>
<span class="comment-copy">I added <code>scanned = sorted([f for f in os.scandir(image_folder)])</code> and getting error:<code>TypeError: '&lt;' not supported between instances of 'posix.DirEntry' and 'posix.DirEntry'</code></span>
<span class="comment-copy">Try my edit with custom sorted key.</span>
