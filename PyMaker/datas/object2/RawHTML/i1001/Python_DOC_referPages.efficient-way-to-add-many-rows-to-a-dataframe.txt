<div class="post-text" itemprop="text">
<p>I really want to speed up my code.</p>
<p>My already working code loops through a DataFrame and gets the start and end year. Then I add it to the lists. At the end of the loop, I append to the empty DataFrame.</p>
<pre><code>rows = range(3560)

#initiate lists and dataframe
start_year = []
end_year = []

for i in rows:

    start_year.append(i)
    end_year.append(i)


df = pd.DataFrame({'Start date':start_year, 'End date':end_year})
</code></pre>
<p>I get what I expect, but very slowly: </p>
<pre><code>    Start date  End date
0   1            1
1   2            2
2   3            3
3   4            4
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Yes, it can be made faster. The trick is to avoid <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" rel="nofollow noreferrer"><code>list.append</code></a> (or, worse <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.append.html" rel="nofollow noreferrer"><code>pd.DataFrame.append</code></a>) in a loop. You <em>can</em> use <code>list(range(3560))</code>, but you may find <a href="https://docs.scipy.org/doc/numpy-1.15.0/reference/generated/numpy.arange.html" rel="nofollow noreferrer"><code>np.arange</code></a> even more efficient. Here you can assign an array to multiple series via <a href="https://docs.python.org/3/library/stdtypes.html#dict.fromkeys" rel="nofollow noreferrer"><code>dict.fromkeys</code></a>:</p>
<pre><code>df = pd.DataFrame(dict.fromkeys(['Start date', 'End date'], np.arange(3560)))

print(df.shape)
# (3560, 2)

print(df.head())
#    Start date  End date
# 0           0         0
# 1           1         1
# 2           2         2
# 3           3         3
# 4           4         4
</code></pre>
</div>
<span class="comment-copy">There is no need to instantiate your df. Also, is the indentation accurate here?</span>
<span class="comment-copy">I don't understand  the <code>df.append</code> at all, actually</span>
<span class="comment-copy">Or <code>rows = range(len(disaster_data))</code> which means that <code>rows</code> is just an integer. I don't think this example resembles your actual code, or, there are serious issues.</span>
<span class="comment-copy">Updated code, according to your critique. Still wondering, how it can be made faster</span>
<span class="comment-copy">I asked specifically about the indentation in comments  for your first sentiments. Append is not in a loop, apparently.</span>
<span class="comment-copy">@roganjosh, Good point, have amended the explanation slightly. Of course, <code>list.append</code> in a loop still isn't particularly efficient.</span>
<span class="comment-copy">Hey @jpp thanks for the answer. I will mark this as solved, but the truth is, I failed to explain my problem. Actually I have real data, not just an arange... I just oversimplified it.</span>
