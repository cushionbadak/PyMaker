<div class="post-text" itemprop="text">
<p>I am attempting to insert a 20 digit, 64 bit python long integer into a MSSQL Numeric(24,0) column. This results in a 'Numeric Value Out of Range' Error from  MSSQL. I am using the pypyodbc module and ODBC Driver 13 for SQL Server to INSERT the data from my python application.   </p>
<p>I've tried using a Numeric(38,0) column in SQL just to test the limit, but receive the same error. In the insert statement, I've also attempted explicitly casting the id as a Numeric(24,0) data type. All attempts resulted in the same error.  </p>
<pre><code>#Python SQL Insert Code
id = 'ADD7A9FA-E77B-4BBB-92AA-3D9C7BBB44D0'
idlist =  id.split('-')

val = [int(idlist[0] + idlist[1] + idlist[2], 16), 
int(idlist[3] + idlist[4], 16)]

cmd = "INSERT INTO jssuser.dbo.API_VIMSPost (\
[id_int1], \
[id_int2]) \
VALUES (?, ?)"

#function to simplify the use of pypyodbc
sqlcmd.sqlCmd(cmd, values = val)

#SQL Table Code
USE [jssuser]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[API_VIMSPost](
    [id_int1] [numeric](24, 0) NOT NULL,
    [id_int2] [numeric](24, 0) NOT NULL,
 CONSTRAINT [PK_PostID] PRIMARY KEY CLUSTERED 
(
    [id_int1] ASC,
    [id_int2] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = 
OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
</code></pre>
<p>I would expect that a python long int of 20 digits and 64 bits would fit into a MSSQL column of type Numeric(20,0) or greater. However, an Insert results in a 'Numeric Value Out of Range' error.</p>
</div>
<div class="post-text" itemprop="text">
<p>The size of Python integer values is only limited by available memory; they are not restricted to an arbitrary number of bits. However, the largest integer value that the SQL Server ODBC driver(s) can handle is a (64-bit signed) <code>bigint</code> whose maximum positive value is <code>math.pow(2, 63) - 1</code>, or <code>9223372036854775807</code> which is nineteen (19) digits long.</p>
<p>When pypyodbc tries to pass a 20-digit integer the ODBC driver chokes on it, so this fails</p>
<pre class="lang-python prettyprint-override"><code>x = 13807673592980537824
crsr.execute("CREATE TABLE ##tmp (id INT PRIMARY KEY, id_int1 NUMERIC(24, 0))")
sql = "INSERT INTO ##tmp (id, id_int1) VALUES (?, ?)"
params = (1, x)
crsr.execute(sql, params)
</code></pre>
<p>However, the following works because pypyodbc doesn't tell the ODBC driver to expect an integer</p>
<pre class="lang-python prettyprint-override"><code>x = 13807673592980537824
crsr.execute("CREATE TABLE ##tmp (id INT PRIMARY KEY, id_int1 NUMERIC(24, 0))")
sql = "INSERT INTO ##tmp (id, id_int1) VALUES (?, ?)"
params = (1, Decimal(x))  # convert Python `int` to Python `decimal.Decimal`
crsr.execute(sql, params)
</code></pre>
</div>
<span class="comment-copy">can you print the number that you are trying to insert into sql server ?</span>
<span class="comment-copy">@AlvaroParra Here is one of the ids printed from python: 13807673592980537824L</span>
<span class="comment-copy">send the parameters as strings, then do VALUES (cast(? as numeric(24,0), cast(? as numeric(24,0)), or similar, if you can do that - just an idea</span>
<span class="comment-copy">@Cato I gave that a shot and got the 'Error converting data type nvarchar to numeric'. If it did work, I'd still be curious as to why the long integer does not fit.</span>
<span class="comment-copy">I can  do     cast('13807673592980537824' as numeric(24,0))     did you leave the L on perhaps?   Good luck with your project, glad the answer transpired</span>
<span class="comment-copy">Thanks for the great answer. Is the decimal datatype in Python analogous to the decimal/numeric data type in MSSQL? I'm assuming the ODBC driver must reject the Integer from Python before it has a chance to be converted in the insert statement to a Numeric type. I had tried Casting the Integer values as Numeric in the Insert statement, but that also did not work.</span>
<span class="comment-copy">Yes, Python <a href="https://docs.python.org/3/library/decimal.html" rel="nofollow noreferrer">Decimal</a> and T-SQL <a href="https://docs.microsoft.com/en-us/sql/t-sql/data-types/decimal-and-numeric-transact-sql?view=sql-server-2017" rel="nofollow noreferrer">decimal</a> are similar. Python ODBC layers have always had to make some "educated guesses" regarding integer values as Python's <code>int</code> was able to cover a range of ODBC/SQL integer types like <code>tinyint</code>, <code>smallint</code>, <code>int</code>, and <code>bigint</code>.</span>
