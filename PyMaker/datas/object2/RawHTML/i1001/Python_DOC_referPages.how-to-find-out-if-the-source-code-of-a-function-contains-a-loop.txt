<div class="post-text" itemprop="text">
<p>Let's say, I have a bunch of functions <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code> and <code>e</code> and I want to find out if they directly use a loop:</p>
<pre><code>def a():
    for i in range(3):
        print(i**2)

def b():
    i = 0
    while i &lt; 3:
        print(i**2)
        i += 1

def c():
    print("\n".join([str(i**2) for i in range(3)]))

def d():
    print("\n".join(["0", "1", "4"]))

def e():
    "for"
</code></pre>
<p>I want to write a function <code>uses_loop</code> so I can expect these assertions to pass:</p>
<pre><code>assert uses_loop(a) == True
assert uses_loop(b) == True
assert uses_loop(c) == False
assert uses_loop(d) == False
assert uses_loop(e) == False
</code></pre>
<p>(I expect <code>uses_loop(c)</code> to return <code>False</code> because <code>c</code> uses a list comprehension instead of a loop.)</p>
<p>I can't modify <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code> and <code>e</code>. So I thought it might be possible to use <code>ast</code> for this and walk along the function's code which I get from <code>inspect.getsource</code>. <strong>But I'm open to any other proposals, this was only an idea how it could work.</strong></p>
<p>This is as far as I've come with <code>ast</code>:</p>
<pre><code>def uses_loop(function):
    import ast
    import inspect
    nodes = ast.walk(ast.parse(inspect.getsource(function)))
    for node in nodes:
        print(node.__dict__)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You need to check if the function's Abstract Syntaxt Tree has any nodes that are an instance of <code>ast.For</code> or <code>ast.While</code> or <code>ast.AsyncFor</code>. You can use <a href="https://docs.python.org/3/library/ast.html#ast.walk" rel="nofollow noreferrer"><code>ast.walk()</code></a> to visit every node of the AST</p>
<pre><code>import ast
import inspect

def uses_loop(function):
    loop_statements = ast.For, ast.While, ast.AsyncFor

    nodes = ast.walk(ast.parse(inspect.getsource(function)))
    return any(isinstance(node, loop_statements) for node in nodes)
</code></pre>
<p>See the <a href="https://docs.python.org/3/library/ast.html#abstract-grammar" rel="nofollow noreferrer">documentation for <code>ast</code></a>, <code>async for</code> was <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-492-coroutines-with-async-and-await-syntax" rel="nofollow noreferrer">added in 3.5</a>. </p>
</div>
<div class="post-text" itemprop="text">
<p>You were almost there! All you had to do was to find out how to get the data from the body objects. They are all attributes after all of some Node type. I just used <code>getattr(node, 'body', [])</code> to get the children and if any of them are of <code>_ast.For</code> or <code>_ast.While</code> return a True. </p>
<p><strong>Note</strong>: I was just tinkering around the code. Not sure if this is documented somewhere and can be relied upon. I guess may be you can look it up? :)</p>
<pre><code>def a():
    for i in range(3):
        print(i**2)

def b():
    i = 0
    while i &lt; 3:
        print(i**2)
        i += 1

def c():
    print("\n".join([str(i**2) for i in range(3)]))

def d():
    print("\n".join(["0", "1", "4"]))

def uses_loop(function):
    import ast
    import _ast
    import inspect
    nodes = ast.walk(ast.parse(inspect.getsource(function)))
    return any(isinstance(node, (_ast.For, _ast.While)) for node in nodes)


print(uses_loop(a))    # True
print(uses_loop(b))    # True
print(uses_loop(c))    # False
print(uses_loop(d))    # False
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If you are just trying to check if the function body contains the keywords 'for' or 'while', you can do the following:</p>
<pre><code>def uses_loop(func_name):
    import inspect
    lines = inspect.getsource(func_name)
    return 'for' in lines or 'while' in lines
</code></pre>
</div>
<span class="comment-copy">This will return True for list comprehensions which the OP seems to care about.</span>
<span class="comment-copy">Although list comprehensions technically contain loops, Python identifies loops through indentation. So maybe looking for the indentation would suffice?</span>
