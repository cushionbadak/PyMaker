<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/427453/how-can-i-get-the-source-code-of-a-python-function">How can I get the source code of a Python function?</a>
<span class="question-originals-answer-count">
                    11 answers
                </span>
</li>
</ul>
</div>
<p>I recently asked a question with title "python find the type of a function" and got very helpful answers. Here is a related question.</p>
<p>Suppose I import *.py files written by me, and these imports result in <code>f</code> being one of the functions defined by me. Now I write to my python interpreter <code>x = f</code>. Later, I want to see the full definition of <code>f</code>, preferably with comments still in place, knowing only <code>x</code>. Is this possible? Does python remember which file the definition was imported from, which is, of course, not enough to give the full definition of <code>f</code>, unless one can find the actual relevant definition?</p>
</div>
<div class="post-text" itemprop="text">
<p>The built in <code>help(object)</code> will give you the correct documentation if you alias <code>k</code> to some function you commented - same for <code>inspect.getsource(k)</code> - they <em>know</em> which function is ment by your variable name alias <code>k</code> at this time.</p>
<p>See:</p>
<ul>
<li><a href="https://docs.python.org/3/library/functions.html#help" rel="nofollow noreferrer">the <code>help()</code> built in</a> </li>
<li><a href="https://docs.python.org/3/library/inspect.html#inspect.getsource" rel="nofollow noreferrer"><code>inspect.getsource(k)</code></a>
(taken from <a href="https://stackoverflow.com/a/52333691/7505395">here</a>)</li>
</ul>
<hr/>
<p>Example:</p>
<pre><code># reusing this code - created it for some other question today

class well_documented_example_class(object):
    """Totally well documented class"""

    def parse(self, message):
        """This method does coool things with your 'message'

        'message' : a string with text in it to be parsed"""
        self.data = [x.strip() for x in message.split(' ')]
        return self.data


# alias for `parse()`:        
k = well_documented_example_class.parse
help(k)
</code></pre>
<p>Prints:</p>
<pre><code>Help on function parse in module __main__:

parse(self, message)
    This method does coool things with your 'message'

    'message' : a string with text in it to be parsed
</code></pre>
<p>Same goes for <a href="https://docs.python.org/3/library/inspect.html#inspect.getsource" rel="nofollow noreferrer"><code>inspect.getsource(k)</code></a>:</p>
<pre><code># from https://stackoverflow.com/a/52333691/7505395
import inspect
print(inspect.getsource(k))
</code></pre>
<p>prints:</p>
<pre><code>def parse(self, message):
    """This method does coool things with your 'message'

    'message' : a string with text in it to be parsed"""
    self.data = [x.strip() for x in message.split(' ')]
    return self.data
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You should think of the way Python uses variables. You have <em>objects</em> (can be classes, functions, lists, scalars or whatelse) and <em>variables</em> that only hold references to those objects.</p>
<p>That explains why when multiple variables point to the same mutable object, if you change it through one of those variables, the change in visible in all other ones.</p>
<p>This is the same thing here. The function object manages all its attributes: its docstring, its code, and its source (if it has: C function show no source). Assigning the function to a new variable does not hide the object behind anything: you still access the original object.</p>
<p>Things would go differently with decorators, because the decorator creates a new object, and the original object is only available to the decorated one.</p>
</div>
<span class="comment-copy">in python, variables are only names pointing to objects, so whatever name(s) points to your function, it still points to the exact same object. And functions do know where they were defined.</span>
