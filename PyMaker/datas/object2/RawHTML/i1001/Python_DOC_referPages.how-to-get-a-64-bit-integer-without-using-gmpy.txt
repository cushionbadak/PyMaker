<div class="post-text" itemprop="text">
<p>I need to pass a 64-bit integer into a function from a DLL, but the native python int types are 12 bytes (<code>sys.getsizeof(1)</code> returns 12) and I get the error "ValueError: Procedure probably called with too many arguments (4 bytes in excess)". Is there a way I can initialize an 8-byte integer or convert to one?</p>
<p>I've tried using ctypes to pass in the parameter as various different ctype integers, but I couldn't get this to work:
<code>mydll.dllfn(c_int(1))</code>, <code>mydll.dllfn(c_int64(1))</code>, <code>mydll.dllfn(c_long(1))</code>, etc.</p>
<p>I would like to avoid gmpy since the platform I am running on is not currently being maintained or supported by gmpy.</p>
</div>
<div class="post-text" itemprop="text">
<p>Using stdlib <a href="https://docs.python.org/2/library/ctypes.html" rel="nofollow noreferrer"><code>ctypes</code></a>:</p>
<pre><code>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; ctypes.c_int64(1)
c_long(1)
</code></pre>
<p>It's usually an alias for <a href="https://docs.python.org/2/library/ctypes.html#ctypes.c_longlong" rel="nofollow noreferrer"><code>c_longlong</code></a>, which represents the C signed long long datatype.</p>
<pre><code>&gt;&gt;&gt; ctypes.c_int64 is ctypes.c_longlong
True
</code></pre>
<p>Note that these types have no overflow checking!</p>
<pre><code>&gt;&gt;&gt; ctypes.c_int64(2**63-1)
c_long(9223372036854775807)
&gt;&gt;&gt; ctypes.c_int64(2**63)
c_long(-9223372036854775808)
</code></pre>
<p>There's <code>ctypes.c_uint64</code> / <code>ctypes.c_ulonglong</code> if you wanted unsigned.</p>
<p>Depending on how the interfaces looks, you may also be interested in <a href="https://docs.python.org/2/library/struct.html#struct.pack" rel="nofollow noreferrer"><code>struct.pack</code></a>:</p>
<pre><code>&gt;&gt;&gt; struct.pack('q', 2**63-1)
'\xff\xff\xff\xff\xff\xff\xff\x7f'
</code></pre>
<p>The 'q' refers to the 8 byte integer type ('Q' is unsigned). Other format characters are documented <a href="https://docs.python.org/2/library/struct.html#format-characters" rel="nofollow noreferrer">here</a>. Byte order, size, and alignment options are documented <a href="https://docs.python.org/2/library/struct.html#byte-order-size-and-alignment" rel="nofollow noreferrer">here</a>.</p>
</div>
<span class="comment-copy">could you update your question to include the code are you using to call the function?  <a href="https://docs.python.org/3/library/ctypes.html#ctypes.c_int64" rel="nofollow noreferrer"><code>ctypes</code></a> has <code>int64</code>, <code>long long</code> and <code>uint64</code> typesâ€¦</span>
<span class="comment-copy"><i>native python int types are 12 bytes</i>  ...huh?</span>
<span class="comment-copy">Python the language has no notion of X-bit integers for any X; it only supports arbitrary precision integers. If you need to pass such an integer as an 8-byte value, you need to pack it accordingly; what are you doing <i>now</i> that you got a 12-byte value?</span>
