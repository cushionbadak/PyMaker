<div class="post-text" itemprop="text">
<p>I would like to use pythons format function to print subsequent numbers of a numpy array.</p>
<p>I have got two numpy arrays, let's say:</p>
<pre><code>x=[1 2 3 4]
y=[5 6 7 8]
</code></pre>
<p>Now I would like to print this:</p>
<pre><code>1 5 2 6 3 7 4 8
</code></pre>
<p>I can almost achieve this by:</p>
<pre><code>print('{} {} {} {}'.format(*zip(x,y)))
</code></pre>
<p>but it yields:</p>
<pre><code>(1,5) (2,6) (3,7) (4,8)
</code></pre>
<p>Of course I could use</p>
<pre><code>"{} {} {} {}".format(x[0], y[0], x[1], y[1])
</code></pre>
<p>and so on but this requires to know the length of the array.</p>
<p><em>Note:</em>
This line of code does what I want </p>
<pre><code>print(*["%f %f"%(a,b) for a,b in zip(x,y)])
</code></pre>
<p>but this does use the old formatting style and I would like to know if it's possible with the new one, too. It also looks a little bit funky, I think :-D</p>
</div>
<div class="post-text" itemprop="text">
<p>You can use <a href="https://docs.python.org/2/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a> to interleave the elements from both lists:</p>
<pre><code>list(chain.from_iterable(zip(x, y)))
[1, 5, 2, 6, 3, 7, 4, 8]
</code></pre>
<p>And if you want to print all elements joined as you specify you can do:</p>
<pre><code>print(*chain.from_iterable(zip(x, y)))
1 5 2 6 3 7 4 8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Do the following:</p>
<pre><code>x=[1, 2, 3, 4]
y=[5, 6, 7, 8]

result = ' '.join([str(i) for e in  zip(x, y) for i in e])
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>1 5 2 6 3 7 4 8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>what about some <strong>numpy</strong></p>
<pre><code>np.array(list(zip(a,b))).flatten()
</code></pre>
<p><strong>output</strong></p>
<pre><code>array([1, 5, 2, 6, 3, 7, 4, 8])
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>zip()</code> to iterate through two iterables at the same time.</p>
<pre><code>l1 = [0, 2, 4, 6, 8]
l2 = [1, 3, 5, 7, 9]

for i, j in zip(l1, l2):
    print(i)
    print(j)
</code></pre>
<p>Output:</p>
<pre><code>0
1
2
3
4
5
6
7
8
9
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Since you use numpy, what about</p>
<pre><code>&gt;&gt;&gt; ' '.join(np.vstack((x, y)).T.flatten().astype(str))
'1 5 2 6 3 7 4 8'
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>It's also possible with <a href="https://docs.python.org/3/library/itertools.html#itertools.starmap" rel="nofollow noreferrer"><code>itertools.starmap</code></a>:</p>
<pre><code>&gt;&gt;&gt; print(*starmap("{} {}".format, zip(x, y)))
1 5 2 6 3 7 4 8
</code></pre>
<p>Normally, the method given by @yatu with <code>itertools.chain</code> is the way to go, especially if you want all elements to be separated by spaces. But <code>starmap</code> could come handy when you'd want to have some special formatting between the pairs, for example:</p>
<pre><code>&gt;&gt;&gt; print(*starmap("{}:{}".format, zip(x, y)))
1:5 2:6 3:7 4:8
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Throwing another into the mix</p>
<pre><code>("{} "*len(x)*2).format(*np.ravel(list(zip(x,y))))

 '1 5 2 6 3 7 4 8 '
</code></pre>
</div>
<span class="comment-copy">So use <code>print(*["{} {}".format(a, b) for a,b in zip(x,y)])</code>. You are 99% of the way there. You can drop the list: <code>print(*("{} {}".format(a, b) for a,b in zip(x,y)))</code></span>
