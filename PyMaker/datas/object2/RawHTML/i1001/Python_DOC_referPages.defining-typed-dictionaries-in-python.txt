<div class="post-text" itemprop="text">
<p>What is the best way to check whether a given object is of a given type? How about checking whether the object inherits from a given type?</p>
<p>Let's say I have an object <code>o</code>. How do I check whether it's a <code>str</code>?</p>
</div>
<div class="post-text" itemprop="text">
<p>To check if <code>o</code> is an instance of <code>str</code> or any subclass of <code>str</code>, use <a href="https://docs.python.org/3/library/functions.html#isinstance" rel="noreferrer">isinstance</a> (this would be the "canonical" way):</p>
<pre><code>if isinstance(o, str):
</code></pre>
<p>To check if the type of <code>o</code> is exactly <code>str</code> (exclude subclasses):</p>
<pre><code>if type(o) is str:
</code></pre>
<p>The following also works, and can be useful in some cases:</p>
<pre><code>if issubclass(type(o), str):
</code></pre>
<p>See <a href="http://docs.python.org/2/library/functions.html" rel="noreferrer">Built-in Functions</a> in the Python Library Reference for relevant information.</p>
<p>One more note: in this case, if you're using python 2, you may actually want to use:</p>
<pre><code>if isinstance(o, basestring):
</code></pre>
<p>because this will also catch Unicode strings (<a href="https://docs.python.org/2/library/functions.html#unicode" rel="noreferrer"><code>unicode</code></a> is not a subclass of <code>str</code>; both <code>str</code> and <code>unicode</code> are subclasses of <a href="https://docs.python.org/2/library/functions.html#basestring" rel="noreferrer"><code>basestring</code></a>). Note that <code>basestring</code> no longer exists in python 3, where there's <a href="https://docs.python.org/3.0/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit" rel="noreferrer">a strict separation</a> of strings (<a href="https://docs.python.org/3/library/functions.html#func-str" rel="noreferrer"><code>str</code></a>) and binary data (<a href="https://docs.python.org/3/library/functions.html#func-bytes" rel="noreferrer"><code>bytes</code></a>).</p>
<p>Alternatively, <code>isinstance</code> accepts a tuple of classes. This will return True if x is an instance of any subclass of any of (str, unicode):</p>
<pre><code>if isinstance(o, (str, unicode)):
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The <strong>most</strong> Pythonic way to check the type of an object is... not to check it.</p>
<p>Since Python encourages <a href="http://wikipedia.org/wiki/Duck_typing" rel="noreferrer">Duck Typing</a>, you should just <code>try...except</code> to use the object's methods the way you want to use them.  So if your function is looking for a writable file object, <em>don't</em> check that it's a subclass of <code>file</code>, just try to use its <code>.write()</code> method!</p>
<p>Of course, sometimes these nice abstractions break down and <code>isinstance(obj, cls)</code> is what you need.  But use sparingly.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>isinstance(o, str)</code> will return <code>True</code> if <code>o</code> is an <code>str</code> or is of a type that inherits from <code>str</code>.</p>
<p><code>type(o) is str</code> will return <code>True</code> if and only if <code>o</code> is a str. It will return <code>False</code> if <code>o</code> is of a type that inherits from <code>str</code>.</p>
</div>
<div class="post-text" itemprop="text">
<p>After the question was asked and answered, <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">type hints were added to Python</a>. Type hints in Python allow types to be checked but in a very different way from statically typed languages. Type hints in Python associate the expected types of arguments with functions as runtime accessible data associated with functions and this <em>allows</em> for types to be checked. Example of type hint syntax:</p>
<pre><code>def foo(i: int):
    return i

foo(5)
foo('oops')
</code></pre>
<p>In this case we want an error to be triggered for <code>foo('oops')</code> since the annotated type of the argument is <code>int</code>. The added type hint does not <em>cause</em> an error to occur when the script is run normally. However, it adds attributes to the function describing the expected types that other programs can query and use to check for type errors.</p>
<p>One of these other programs that can be used to find the type error is <code>mypy</code>:</p>
<pre><code>mypy script.py
script.py:12: error: Argument 1 to "foo" has incompatible type "str"; expected "int"
</code></pre>
<p>(You might need to install <code>mypy</code> from your package manager. I don't think it comes with CPython but seems to have some level of "officialness".)</p>
<p>Type checking this way is different from type checking in statically typed compiled languages. Because types are dynamic in Python, type checking must be done at runtime, which imposes a cost -- even on correct programs -- if we insist that it happen at every chance. Explicit type checks may also be more restrictive than needed and cause unnecessary errors (e.g. does the argument really need to be of exactly <code>list</code> type or is anything iterable sufficient?).</p>
<p>The upside of explicit type checking is that it can catch errors earlier and give clearer error messages than duck typing. The exact requirements of a duck type can only be expressed with external documentation (hopefully it's thorough and accurate) and errors from incompatible types can occur far from where they originate.</p>
<p>Python's type hints are meant to offer a compromise where types can be specified and checked but there is no additional cost during usual code execution.</p>
<p>The <code>typing</code> package offers type variables that can be used in type hints to express needed behaviors without requiring particular types. For example, it includes variables such as <code>Iterable</code> and <code>Callable</code> for hints to specify the need for any type with those behaviors.</p>
<p>While type hints are the most Pythonic way to check types, it's often even more Pythonic to not check types at all and rely on duck typing. Type hints are relatively new and the jury is still out on when they're the most Pythonic solution. A relatively uncontroversial but very general comparison: Type hints provide a form of documentation that can be enforced, allow code to generate earlier and easier to understand errors, can catch errors that duck typing can't, and can be checked statically (in an unusual sense but it's still outside of runtime). On the other hand, duck typing has been the Pythonic way for a long time, doesn't impose the cognitive overhead of static typing, is less verbose, and will accept all viable types and then some.</p>
</div>
<div class="post-text" itemprop="text">
<p>Here is an example why duck typing is evil without knowing when it is dangerous.
For instance: Here is the Python code (possibly omitting proper indenting), note that this 
situation is avoidable by taking care of isinstance and issubclassof functions to make sure that when you really need a duck, you don't get a bomb.</p>
<pre><code>class Bomb:
    def __init__(self):
        ""

    def talk(self):
        self.explode()

    def explode(self):
        print "BOOM!, The bomb explodes."

class Duck:
    def __init__(self):
        ""
    def talk(self):
        print "I am a duck, I will not blow up if you ask me to talk."    

class Kid:
    kids_duck = None

    def __init__(self):
        print "Kid comes around a corner and asks you for money so he could buy a duck."

    def takeDuck(self, duck):
        self.kids_duck = duck
        print "The kid accepts the duck, and happily skips along"

    def doYourThing(self):
        print "The kid tries to get the duck to talk"
        self.kids_duck.talk()

myKid = Kid()
myBomb = Bomb()
myKid.takeDuck(myBomb)
myKid.doYourThing()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>isinstance(o, str)
</code></pre>
<p><a href="https://docs.python.org/2/library/functions.html#isinstance" rel="nofollow noreferrer">Link to docs</a></p>
</div>
<div class="post-text" itemprop="text">
<p>I think the cool thing about using a dynamic language like Python is you really shouldn't have to check something like that.</p>
<p>I would just call the required methods on your object and catch an <code>AttributeError</code>. Later on this will allow you to call your methods with other (seemingly unrelated) objects to accomplish different tasks, such as mocking an object for testing.</p>
<p>I've used this a lot when getting data off the web with <code>urllib2.urlopen()</code> which returns a <em>file like</em> object. This can in turn can be passed to almost any method that reads from a file, because it implements the same <code>read()</code> method as a real file.</p>
<p>But I'm sure there is a time and place for using <code>isinstance()</code>, otherwise it probably wouldn't be there :)</p>
</div>
<div class="post-text" itemprop="text">
<p>To Hugo:</p>
<p>You probably mean <code>list</code> rather than <code>array</code>, but that points to the whole problem with type checking - you don't want to know if the object in question is a list, you want to know if it's some kind of sequence or if it's a single object. So try to use it like a sequence.</p>
<p>Say you want to add the object to an existing sequence, or if it's a sequence of objects, add them all</p>
<pre><code>try:
   my_sequence.extend(o)
except TypeError:
  my_sequence.append(o)
</code></pre>
<p>One trick with this is if you are working with strings and/or sequences of strings - that's tricky, as a string is often thought of as a single object, but it's also a sequence of characters. Worse than that, as it's really a sequence of single-length strings.</p>
<p>I usually choose to design my API so that it only accepts either a single value or a sequence - it makes things easier. It's not hard to put a <code>[ ]</code> around your single value when you pass it in if need be.</p>
<p>(Though this can cause errors with strings, as they do look like (are) sequences.)</p>
</div>
<div class="post-text" itemprop="text">
<p>For more complex type validations I like <a href="https://github.com/agronholm/typeguard" rel="nofollow noreferrer">typeguard</a>'s approach of validating based on python type hint annotations:</p>
<pre><code>from typeguard import check_type
from typing import List

try:
    check_type('mylist', [1, 2], List[int])
except TypeError as e:
    print(e)
</code></pre>
<p>You can perform very complex validations in very clean and readable fashion.</p>
<pre><code>check_type('foo', [1, 3.14], List[Union[int, float]])
# vs
isinstance(foo, list) and all(isinstance(a, (int, float)) for a in foo) 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can check with the below line to check which character type the given value is:</p>
<pre><code>def chr_type(chrx):
    if chrx.isalpha()==True:
        return 'alpha'
    elif chrx.isdigit()==True:
        return 'numeric'
    else:
        return 'nothing'

chr_type("12)
</code></pre>
</div>
<span class="comment-copy">Well, the canonical approach in Python is to not check the type at all (unless you're debugging). Usually you just try to use it as a string (e.g. concatenate with other strings, print to console, etc.); if you think it might fail, use try/except or hasattr. That said, the accepted answer is the canonical way to do what you generally "shouldn't do" in the Python world. For more info, google "Python duck typing" or read these: <a href="http://www.voidspace.org.uk/python/articles/duck_typing.shtml" rel="nofollow noreferrer">voidspace.org.uk/python/articles/duck_typing.shtml</a> <a href="http://stackoverflow.com/questions/610883/how-to-know-if-an-object-has-an-attribute-in-python/610923#610923" title="how to know if an object has an attribute in python">stackoverflow.com/questions/610883/…</a></span>
<span class="comment-copy">I think Mr. Coombs is overlooking examples like non-JSON serializable classes. If putting a big chunk of data through a function (whose code one can't influence) one might want to convert certain pieces of that data to, for instance, a &lt;str&gt; before passing it. At least that's how <b>I</b> ended up on this page...</span>
<span class="comment-copy">It seems the most common reason for asking for this is that one wants to distinguish between strings and iterables of strings. This is a tricky question because strings <i>are</i> iterables of strings -- a single-character string is even a sequence of itself (last time I checked -- one probably shouldn't rely on it). But would anyone ever have use for something string-like? <b><a href="https://pypi.python.org/pypi/stringlike" rel="nofollow noreferrer">Yes</a></b>. So the answer to "What should I do to distinguish between strings and other iterables of strings?" is properly: "It depends on what you are trying to do". :-D</span>
<span class="comment-copy">Python type annotations are now a thing. Take a look at <a href="https://mypy.readthedocs.io/en/stable/index.html" rel="nofollow noreferrer">mypy</a></span>
<span class="comment-copy">str.__subclasses__() only returns the direct subclasses of str, and does not do the same thing as issubclass() or isinstance(). (To do that, you would have to recursively call .__subclasses__().</span>
<span class="comment-copy">This is a good answer, but I think it really ought to start with a warning that you usually shouldn't be doing this in Python. As it is, it seems to validate the assumption that this is a "canonical thing to do in Python", which it isn't.</span>
<span class="comment-copy">These are python2 answers. For example, there is no basestring in python3.</span>
<span class="comment-copy">What's the difference between instance and "exactly"? If <code>type(a) is Object</code> then isn't it also true that <code>isinstance(a, Object)</code>. However, if <code>type(a) is SubClassOfObject</code>, then  <code>type(a) is Object == False</code>, but <code>isinstance(a, Object) == True</code>. Right?</span>
<span class="comment-copy">@mavavilj - <code>a is b</code> means a and b are the exact same thing, i.e. references to the same entity in memory.  So <code>a</code> and <code>b</code> would have to be the exact same class, not subclasses, as with <code>isinstance()</code>.  See for example <a href="https://stackoverflow.com/a/133024/1072212">stackoverflow.com/a/133024/1072212</a></span>
<span class="comment-copy">IMHO, the most Pythonic way is to cope with whatever argument which is given. In my code I often cannot know if I recieve an object or an array of objects, and I use type-checking internally to convert a single object to a one-element list.</span>
<span class="comment-copy">Rather then just trying to use its write method there are times when you want to do this without causing an exception.  In this case you could do... <code>if hasattr(ob, "write") and callable(ob.write):</code>  Or save some dict access... <code>func = getattr(ob, "write", None)</code> <code>if callable(func): ...</code></span>
<span class="comment-copy">Duck typing is about <i>using</i> an library. Type checking is about <i>writing</i> an library. Not the same problem domain.</span>
<span class="comment-copy">@RickyA, I disagree. Duck typing is about interacting with objects using interfaces with well-known semantics. This can apply either to library code or to the code that uses such a library.</span>
<span class="comment-copy">@nyuszika7h, In Python3 <code>hasattr</code> only supresses an AttributeError - See: <a href="https://docs.python.org/3.4/library/functions.html#hasattr" rel="nofollow noreferrer">docs.python.org/3.4/library/functions.html#hasattr</a></span>
<span class="comment-copy">Of course, this will fail if the object is not an instance of 'str', but of something string-like instead. Like unicode, mmap, UserString or any other user-defined type. The usual approach in Python is not to do typechecks.</span>
<span class="comment-copy">You don't have to apologize, it is OK to answer your own question. SO is for the answers, not the karma.</span>
<span class="comment-copy">This is very helpful. Because the difference between <code>isinstance</code> and <code>type(var) == type('')</code> is not clear.</span>
<span class="comment-copy">-1: <a href="http://mypy-lang.org/" rel="nofollow noreferrer">mypy</a> specifically calls itself a "static type checker" so I'm not sure where you got "type checking must be done at runtime" from.</span>
<span class="comment-copy">@Kevin In retrospect, that was an unnecessary digression, but to get into it more, Python's type hints are turned into runtime data and <code>mypy</code> is a Python module that uses <code>importlib</code> to access that data. Whether this is "static type checking" is a philosophical question but it's different from what most would expect since the normal language interpreter and import machinery are involved.</span>
<span class="comment-copy">That is not true either.  It <a href="https://github.com/python/mypy/blob/master/mypy/fastparse.py" rel="nofollow noreferrer">uses</a> typed_ast, which itself <a href="https://github.com/python/typed_ast" rel="nofollow noreferrer">is just a clone of ast</a> with extra features.  <a href="https://docs.python.org/3/library/ast.html" rel="nofollow noreferrer">ast</a> does not import modules; it parses them into an abstract syntax tree.</span>
<span class="comment-copy">Even with type checking, you could create a <code>class EvilDuck(Duck)</code> and override talk(). Or more likely, <code>class ChineseCancerDuck(Duck)</code>, with a nasty side effect that doesn't show up until years later. You'd be better off just supervising your kid (and thoroughly testing her toys :)</span>
<span class="comment-copy">Bombs don’t talk. Don’t add nonsensical methods and this won’t happen.</span>
<span class="comment-copy">@Dmitry, this is the common criticism of Duck Typing: <a href="https://en.wikipedia.org/wiki/Duck_typing#Criticism" rel="nofollow noreferrer">en.wikipedia.org/wiki/Duck_typing#Criticism</a> ... you're basically saying that any interface for which the semantics aren't enforced by the language is evil. I believe this is more the approach of Java. The whole point of Python's duck typing is that it only works when there's a commonly-upheld convention about what specific interfaces mean. For example, you could bork a lot of Python code by overriding the <code>__file__</code> attribute (commonly used to identify file-like objects) to mean something else.</span>
<span class="comment-copy">@clacke basically, it's too expensive to enforce types at runtime strictly because EVERYTHING must be an object(in order to map from string to any type possible), and too convenient to not have ducktyping because ducktyping allows really powerful prototyping techniques that overcome things that are normally very difficult to do with rigid interfaces. Besides, any static language faces a point where it needs to create duck typing via dynamic libraries, evaluation and stringification, or interfaces, and these things don't inherently make it evil, just very powerful.</span>
<span class="comment-copy">@Dmitry Well, running a static type checker <i>would</i> go against a culture of duck-typing. :-)</span>
<span class="comment-copy">While this link may answer the question, it is better to include the essential parts of the answer here and provide the link for reference. Link-only answers can become invalid if the linked page changes.</span>
<span class="comment-copy">You link now showing not found please update it.</span>
<span class="comment-copy">@RahulKP updated broken link</span>
<span class="comment-copy">A good example of when you <i>must</i> use it is if you are parsing a dynamic json object.  You don't know ahead of time if a field is a string or a dictionary.</span>
<span class="comment-copy">You sure you don't want to delete this answer @Venkatesan?</span>
