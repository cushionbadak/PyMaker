<div class="post-text" itemprop="text">
<p>Ok so I have a list like this, what I need is to remove the duplicate values so that I end up with just- Joe Blow, Don Wiliams, Clark Gordon... 
Im trying this code which does not seem to work. I also tried to conver the list into a set but no go.</p>
<p>Any Ideas?
Thanks</p>
<pre><code>dupes = ["Joe Joe Joe Blow","Don Don Williams", "Clark Clark Gordon", "Albert Riddle"]
def remove_duplicates(dupes):
    ulist = []
    [ulist.append(x) for x in dupes if x not in ulist]    
    return ulist
a=' '.join(remove_duplicates(dupes))

print(a)
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Turn your string into a list, cast it into a set, then join it back with ' '. When casting to a set, preserve order by sorting by the index of the original string. </p>
<pre><code>for s in dupes:
    print(' '.join(sorted(set(s.split()), key=s.index)))
</code></pre>
<p>output:</p>
<pre><code>Joe Blow
Don Williams
Clark Gordon
Albert Riddle
</code></pre>
<p>Edit: If you want to alter the list in place:</p>
<pre><code>def remove_duplicates(dupes):
    for i in range(len(dupes)):
        dupes[i] = ' '.join(sorted(set(dupes[i].split()), key=dupes[i].index))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use the <code>re.sub</code> method to replace repetitions to a word with just the word:</p>
<pre><code>import re
def remove_duplicates(string):
    return re.sub(r'\b(\w+)\b(?:\s+\1)+', r'\1', string)
</code></pre>
<p>so that:</p>
<pre><code>[remove_duplicates(dupe) for dupe in dupes]
</code></pre>
<p>returns:</p>
<pre><code>['Joe Blow', 'Don Williams', 'Clark Gordon', 'Albert Riddle']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use <code>itertools.groupby</code>:</p>
<pre><code>from itertools import groupby
def remove_duplicates(string):
    return ' '.join(k for k, _ in groupby(string.split()))
</code></pre>
<p>so that:</p>
<pre><code>[remove_duplicates(dupe) for dupe in dupes]
</code></pre>
<p>returns:</p>
<pre><code>['Joe Blow', 'Don Williams', 'Clark Gordon', 'Albert Riddle']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>The long but stable way:</p>
<pre><code>dupes = ["Joe Joe Joe Blow","Don Don Williams", "Clark Clark Gordon", "Albert Riddle"]

rv = [[]]
for d in dupes:
    seen = set()
    for e in d.split():         # split each string into its name, add the name to the 
        if e not in seen:       # last list in rv and to the set 'seen' that remembers
            rv[-1].append(e)    # the seen ones.
            seen.add(e)
    rv[-1] = ' '.join(rv[-1])   # done with one name, replace the list with joined values
    rv.append([])               # and append an empty, new list for the next name

dupes = [k for k in rv if k]    # remove the empty list at the end and overwrite dupes

print(dupes)
</code></pre>
<p>Output:</p>
<pre><code>['Joe Blow', 'Don Williams', 'Clark Gordon', 'Albert Riddle']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>When order is important <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="nofollow noreferrer">collections.OrderedDict</a> comes in handy:</p>
<pre><code>from collections import OrderedDict

dupes = ["Joe Joe Joe Blow", "Don Don Williams", "Clark Clark Gordon", "Albert Riddle"]
result = [' '.join(OrderedDict.fromkeys(w.split())) for w in dupes]
print(result)
</code></pre>
<p><strong>Output</strong></p>
<pre><code>['Joe Blow', 'Don Williams', 'Clark Gordon', 'Albert Riddle']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Lots of good answers already, you can also try Counter:</p>
<pre><code>from collections import Counter

counters = [Counter(d.split()) for d in dupes]
final = [' '.join(c.keys()) for c in counters]

# ['Joe Blow', 'Don Williams', 'Clark Gordon', 'Albert Riddle']
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Please use set which </p>
<pre><code>  list(set(l)) 
  # where l is your str
</code></pre>
</div>
<span class="comment-copy"><code>[ulist.append(x) for x in dupes if x not in ulist]</code> do <b>not</b> use list comprehensions for side-effects! List comprehensions are <i>not</i> just "in-line" for loops.</span>
<span class="comment-copy">Very nice solution to the ordering problem!</span>
<span class="comment-copy">@PatrickArtner That's handled (very nicely btw) with <code>sorted</code> and the <code>key=s.index</code> - one improvement would be to give solution as a list comprehension</span>
<span class="comment-copy">@PatrickArtner, I realized as soon as I posted and subsequently edited with sorting the set.</span>
<span class="comment-copy">Yep -removed the comment ;) and +1 - it is rather neat</span>
<span class="comment-copy">Keep in mind that sorting requires an average time complexity of <i>O(n log n)</i>, while the problem of removing dupes could be solved in <i>O(n)</i> with other methods.</span>
<span class="comment-copy">Thanks Patrick! It's thowing a     for e in d.split():         # split each string into its name, add the name to the  UnboundLocalError: local variable 'd' referenced before assignment how can I fix it</span>
<span class="comment-copy">Patrick! Thanks!!!! Its working now! Perfection!</span>
<span class="comment-copy">@RobD nice - lets delete the comments then</span>
<span class="comment-copy">This does not answer the OP's question.</span>
