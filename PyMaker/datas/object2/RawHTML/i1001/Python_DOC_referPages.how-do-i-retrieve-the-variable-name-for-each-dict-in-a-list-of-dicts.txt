<div class="post-text" itemprop="text">
<p>I may be missing something fundamental here but consider the following:</p>
<pre><code>graph=nx.read_graphml('path here...')
dDict=dict(nx.degree_centrality(graph)) #create dict
lDict=dict(nx.load_centrality(graph))   

new_lists=[dDict,lDict]
for i in new_lists:
    print().... #how to get variable name i.e. dDict
</code></pre>
<p>how do i iterate through the list of dicts so that when i do a print it returns me the variable name the dict equals i.e. i want to be able to retrieve back 'dDict' and 'lDict'?I do not want a quick hack such as </p>
<p>dDict['name'] = 'dDict'</p>
<p>Any ideas..?</p>
<p>EDIT: the reason i want to do this is so that i can append these centrality measures to a dataframe with new column name i.e.: </p>
<pre><code>for idx in range(len(new_lists)):
    for i in range(len(df)):
        rowIndex = df.index[i]
        df.loc[rowIndex, idx] = new_lists[idx][rowIndex] #instead of idx how do i dynamically name the column according to the list item name. 
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can iterate over <code>globals()</code> and get the variable name of the object that matches the content you are looking for. </p>
<p>More info on <a href="https://docs.python.org/3/library/functions.html?highlight=globals#globals" rel="nofollow noreferrer">https://docs.python.org/3/library/functions.html?highlight=globals#globals</a></p>
<p>However, this is a rather cumbersome trick, you should not do that! Rather, redesign your software so you don't have to look for the variable names in the first place.</p>
<pre><code>def get_var_name_of(x):
    return [k for k,v in globals().items() if v==x][0]


dDict = {1:'asd'}
lDict = {2:'qwe'}
new_list=[dDict,lDict]


for d in new_list:
    print(get_var_name_of(d))


dDict
lDict
</code></pre>
</div>
<span class="comment-copy">Each dictionary in that least may also be referenced by several other identifiers, or none. That's not a property of the object. Could you give some context - <i>why</i> do you want to do that? You may also find <a href="https://nedbatchelder.com/text/names.html" rel="nofollow noreferrer">this article</a> useful.</span>
<span class="comment-copy">the indention is off. Why is the "for i in new_lists:" indented? Could you provide a working example that demonstrates your problem/question? Alos what is "nx" and are there imports missing?</span>
<span class="comment-copy">In short: you don't. You need something like <code>{'dDict': dDict}</code> to preserve that information.</span>
<span class="comment-copy">Python variables are <i>just references</i>. There is no one name for any given object, there are between 1 and N references, and some of those may have a name and some don't. If you created your dictionaries inside a list, there'd be no names at all. If you need names for your dictionaries, use a dictionary to store them in.</span>
<span class="comment-copy">when i run the above i get the error: AttributeError: 'dict' object has no attribute 'reindex'</span>
<span class="comment-copy">What is the version of Python you are using? Also, what line gives you the error? Because the code I posted works perfectly in Python3.7.</span>
