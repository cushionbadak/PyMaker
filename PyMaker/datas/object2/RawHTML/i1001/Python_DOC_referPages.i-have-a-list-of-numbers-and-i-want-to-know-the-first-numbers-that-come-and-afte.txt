<div class="post-text" itemprop="text">
<p>Suppose I have the following list as the following x=[4,6,8,10,12,13,14] and I want for example to know the index of the numbers 10 and 12 because they came before and after 11</p>
</div>
<div class="post-text" itemprop="text">
<p>Considering list <code>x</code> is sorted, you may use the <a href="https://docs.python.org/3/library/bisect.html" rel="nofollow noreferrer"><strong>bisect</strong></a> module to achieve what you wish in the fastest way possible.</p>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; x = [4,6,8,10,12,13,14]
&gt;&gt;&gt; bisect.bisect_left(x, 11)
4
&gt;&gt;&gt; x[4]
12
</code></pre>
<p>The bisect module works by implementing a basic binary search on top of a sorted list.</p>
<p>You may either use <a href="https://docs.python.org/3/library/bisect.html#bisect.bisect_left" rel="nofollow noreferrer"><code>bisect.bisect_left</code></a> or <a href="https://docs.python.org/3/library/bisect.html#bisect.bisect_right" rel="nofollow noreferrer"><code>bisect.bisect</code></a>.</p>
<p>Left will cause you to get the left-most index in case of duplicate entries, while right (or without any specification) will return the right-most insertion point:</p>
<pre><code>&gt;&gt;&gt; x = [1,2,2,3]
&gt;&gt;&gt; bisect.bisect(x, 2)
3
&gt;&gt;&gt; bisect.bisect_left(x, 2)
1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>x=[4,6,8,10,12,13,14]
given_val = 11
after_val_ix = x.index(min([r for r in x if r &gt; given_val]))
before_val = x.index(max([r for r in x if r &lt; given_val]))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>A different version of @naivepredictor's answer:</p>
<pre><code>from operator import itemgetter

x = [4,6,8,10,12,13,14]
given_val = 11
after_val = min([(i, n) for i, n in enumerate(x) if n &gt; given_val], key=itemgetter(1))
before_val = max([(i, n) for i, n in enumerate(x) if n &lt; given_val], key=itemgetter(1))

print(after_val)  # (4, 12)
print(before_val) # (3, 10)
</code></pre>
</div>
<span class="comment-copy">Do you want to find the largest number that's smaller than 11 and the smallest that's larger from the list, or do you want to find the numbers at the indices adjacent to where 11 would go in the (sorted?) list?</span>
<span class="comment-copy">Are your lists always sorted?</span>
<span class="comment-copy">what have you tried so far? where are you stuck?</span>
<span class="comment-copy">Did you give a try to a <i>good old loop</i> ?</span>
<span class="comment-copy">Link only answer. Please detail with examples. (not my downvote)</span>
<span class="comment-copy">@Cid looks like a tactical downvote</span>
<span class="comment-copy">Yes, maybe... can you explain what <code>bissect_left</code> and <code>bissect_right</code> do? Imagine the link is broken and the lazy dev doesn't want to google for that/every python docs are gone</span>
<span class="comment-copy">@Cid You're a good person, you know that? :-)</span>
<span class="comment-copy">Don't tell it to anyone please, I try to be an *sshole as much as possible</span>
