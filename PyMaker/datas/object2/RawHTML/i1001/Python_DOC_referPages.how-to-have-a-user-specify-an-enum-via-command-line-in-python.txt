<div class="post-text" itemprop="text">
<p>In the cv2 package, there are enums defined as:</p>
<pre><code>aruco.DICT_4X4_50
aruco.DICT_5X5_50
</code></pre>
<p>and so on, mapped to 0, 1, 2, ... . I want to write a script where the user specifies these enums via command line and the code does what it is supposed to and am wondering if there is an elegant way to do that. Right now, I have a parser that checks for all possible enums which is bad because if the enums get updated in the package, my code won't be able to use them.</p>
<p>Ideally, I'd just like to see if the "string" provided via command line corresponds to a valid enum or not, and then forward it to the function that uses the enum.</p>
<p>Here is a minimal example:</p>
<pre><code>from cv2 import aruco                                                                                                                                                                                        
import sys                                                                                                                                                                                                   

def create_board(arucodict):                                                                                                                                                                                 
    try:                                                                                                                                                                                                     
        aruco_dict = aruco.getPredefinedDictionary(arucodict)                                                                                                                                                
    except:                                                                                                                                                                                                  
        print('WRONG')                                                                                                                                                                                       
        return None, None                                                                                                                                                                                    
    squareLength = 10                                                                                                                                                                                        
    markerLength = 7                                                                                                                                                                                         
    board = aruco.CharucoBoard_create(4, 4, squareLength, markerLength, aruco_dict)                                                                                                                          
    imboard = board.draw((500, 500),0,1)                                                                                                                                                                     
    arucoParams = aruco.DetectorParameters_create()                                                                                                                                                          
    return imboard, arucoParams                                                                                                                                                                              


if __name__=="__main__":                                                                                                                                                                                     
    # User specifies the aruco dictionary he wants                                                                                                                                                           
    # Expects aruco.DICT_4X4_50, or aruco.DICT_5x5_50 etc                                                                                                                                                    
    arucodict = sys.argv[1]                                                                                                                                                                                  
    imb1, ap1 = create_board(arucodict)  enter code here
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>Have you tried <code>getattr()</code>? See documentation <a href="https://docs.python.org/3/library/functions.html#getattr" rel="nofollow noreferrer">here</a></p>
<pre><code>from enum import IntEnum

class numbers(IntEnum):
    zero = 0
    one = 1
    two = 2

string = "zero" # this would come from sys.argv

try:
    value = getattr(numbers, string)
    print(value)
except AttributeError:
    raise Exception("Not an enum")
</code></pre>
<p>One note here is that the user must enter only <code>zero</code>, not <code>numbers.zero</code></p>
<p><strong>Edits:</strong></p>
<p>Ethan Furman points out that if you are using Python's <code>enum</code> package, you could simply use</p>
<p><code>value = numbers[string]</code></p>
<p>rather than <code>getattr(numbers,string)</code>.</p>
</div>
<span class="comment-copy">Instead of <code>getattr</code>, just use the built-in <code>Enum</code> functionality: numbers[string]<code>.  Also, a bare </code>except:` is almost always a bad idea.</span>
<span class="comment-copy">+1 for the alternate solution. I'll defend the bare except by saying this was an overly simplified example.</span>
<span class="comment-copy">Why not fixing it to an <code>except AttributeError:</code>? And maybe add Ethan suggestion to the answer, because it's actually right to the point. And it looks you got advice from the <code>Enum</code> author too :). You can't ask for more.</span>
<span class="comment-copy">FWIW the getattr way works with cv2.aruco's enums, which may not be defined using Python's enum package.</span>
