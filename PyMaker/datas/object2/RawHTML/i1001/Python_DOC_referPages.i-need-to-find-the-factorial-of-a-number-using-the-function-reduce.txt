<div class="post-text" itemprop="text">
<div class="question-status question-originals-of-duplicate">
<p>This question already has an answer here:</p>
<ul>
<li>
<a dir="ltr" href="/questions/5136447/function-for-factorial-in-python">Function for Factorial in Python</a>
<span class="question-originals-answer-count">
                    15 answers
                </span>
</li>
</ul>
</div>
<p>Given a number ‘n’, output its factorial using reduce().</p>
<p>Note: Make sure you handle the edge case of zero. As you know, 0! = 1</p>
<pre><code>from functools import reduce

n = int(input())
f = reduce(lambda n : n * (n - 1) if n &gt; 1 else n)
print(f)
</code></pre>
<p>Also, I need help with this type error mentioned below</p>
<pre><code>TypeError: reduce expected at least 2 arguments, got 1
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p><code>reduce</code> expects two arguments. First a function expecting two args, and second an iterable. The proper code should be like this.</p>
<pre><code>from functools import reduce
n = int(input())
f = 1 if n == 0 else reduce(lambda a, b : a*b, range(1, n+1))

print(f)
</code></pre>
</div>
<span class="comment-copy">RTL(ovely)M: <a href="https://docs.python.org/3/library/functools.html#functools.reduce" rel="nofollow noreferrer">docs.python.org/3/library/functools.html#functools.reduce</a></span>
<span class="comment-copy">You are getting confused between recursive functions and <code>reduce</code>. How, I'm not sure. You can use <code>f = reduce(lambda x, y : x * y, range(1, n+1)) if n &gt; 0 else 1</code>.</span>
<span class="comment-copy">The canonical dupe contains <i>many</i> ways to calc the factorial .. including those using <code>reduce</code> - I see no reason to create a "specific" question here. Research SO before asking please - this will help you faster.</span>
<span class="comment-copy">What about when <code>n</code> is zero?</span>
<span class="comment-copy">Thank you for your help.</span>
<span class="comment-copy">How do I correct this code mentioned below:  from functools import reduce  n = int(input())  def fact (n):          if (n == 0):                  return 1          else:                  return n * fact(n-1)  f = reduce(lambda n: n * n - 1)  print(f)</span>
