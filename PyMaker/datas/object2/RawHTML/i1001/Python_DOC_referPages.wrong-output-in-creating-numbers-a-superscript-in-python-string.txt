<div class="post-text" itemprop="text">
<p>I have this code where I am trying to put numbers as superscript in a string. This code works but it puts all the numbers in the string a superscript whereas I only want it to put the number only at the end of the string as superscript(if any present). So basically if my string is <code>I want to take an apple2</code> then I want to put 2 as superscript and my code does that correctly but if my string is <code>I want to take 10 apples2</code> then it also makes 10 as superscript along with 2 whereas I only want it to make 2 as superscipt and leave 10 as it is.Also there can be n digit number at the end of the string and whole number should turn as superscript.</p>
<p>My code is:</p>
<pre><code>SUP = str.maketrans("123456789", chr(0x00b9) + chr(0x00B2) + chr(
                    0x00B3) + u"\u2074" + u"\u2075" + u"\u2076" + u"\u2077" + u"\u2078" + u"\u2079")
OUT_TEXT = OUT_TEXT.translate(SUP)
</code></pre>
<p>How do I make it to only do numbers at the end of the string as superscript and leave other numbers as it is?</p>
</div>
<div class="post-text" itemprop="text">
<p>I'm sure there are a lot of different ways to do this, however, I try to break it down into smaller problems, that I know can be solved. This would be my way of solving the question at hand:</p>
<ol>
<li>Find words containing both characters and digits</li>
<li>Convert found words to superscript</li>
<li>Replace found words with conversions</li>
</ol>
<p>Following the plan above, we can create a function to do just that in three easy steps.</p>
<pre><code>def convert_to_superscript(string):
    # Find all words containing digits
    pattern_digits_letters = re.compile(r'([a-zA-Z]\d+)')
    digits_and_letters = re.findall(pattern_digits_letters, string)

    # Convert any matches from the list above
    SUP = str.maketrans("123456789", chr(0x00b9) + chr(0x00B2) + chr(
                    0x00B3) + u"\u2074" + u"\u2075" + u"\u2076" + u"\u2077" + u"\u2078" + u"\u2079")
    sup_script = [i.translate(SUP) for i in digits_and_letters]

    # Replace matches with superscripts
    mapping = list(zip(digits_and_letters, sup_script))
    for k, v in mapping:
        string = string.replace(k,v)

    return string
</code></pre>
<p>Testing that with</p>
<pre><code>OUT_TEXT = "I want to take 10 apples2"
convert_to_superscript(OUT_TEXT)
</code></pre>
<p>Returns</p>
<pre><code>I want to take 10 applesÂ²
</code></pre>
</div>
<span class="comment-copy"><code>OUT_TEXT = OUT_TEXT[:-1]+OUT_TEXT[-1].translate(SUP)</code> not optimal and without condition, but you could just slice the string.</span>
<span class="comment-copy">wouldn't above line only make last digit as superscript? Like if its 2 at the end it would make 2 but if its 11 at the end it will only make 1 as superscript where 11 should be superscript.</span>
<span class="comment-copy">Sure. If you want it to be more exact use a regex split to catch trailing numbers. Once you've separated the numbers from the rest of the string it's easy since you just sup() the numbers and then add the strings together.</span>
<span class="comment-copy">Use <code>re.sub()</code> <a href="https://docs.python.org/3/library/re.html#re.sub" rel="nofollow noreferrer">docs.python.org/3/library/re.html#re.sub</a></span>
<span class="comment-copy">@user2966197 did this solve your problem?</span>
