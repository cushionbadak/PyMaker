<div class="post-text" itemprop="text">
<p>How to import classes from all .py in a module with same structure and run by iterating over it. For Example, </p>
<p>module_one:</p>
<pre><code>script_a:
    class A:
        def __init__(self,**kwargs):
            code here
        def run(self,**kwargs):
            code here
        def finish(self,**kwargs):
            code here
script_b:
    class B:
        def __init__(self,**kwargs):
            code here
        def run(self,**kwargs):
            code here
        def finish(self,**kwargs):
            code here
and so on ...
</code></pre>
<p>module_two:</p>
<pre><code>script:
    class Run:
        def run_all(self,**kwargs):
            for class in classes_from_module_one:
                c = class()
                c.run()
                c.finish()
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>First of all, please note that <a href="https://docs.python.org/3/tutorial/modules.html" rel="nofollow noreferrer">module</a> refers to python file, while to what you refer as module is usually called a package.</p>
<p>Now, for your problem, you could use some mixture of utilities found in <a href="https://docs.python.org/3/library/pkgutil.html" rel="nofollow noreferrer">pkgutil</a>, <a href="https://docs.python.org/3/library/importlib.html" rel="nofollow noreferrer">importlib</a>, and <a href="https://docs.python.org/3/library/inspect.html" rel="nofollow noreferrer">inspect</a> or simple <code>dir()</code>. For example, using <code>walk_modules</code> and <code>get_members</code>:</p>
<pre><code># pack/mod_a.py
class A:
    def __init__(self):
        pass

    def run(self):
        print("A run!")

    def finish(self):
        print("A finished!")

# pack/mod_b.py
class B:
    def __init__(self):
        pass

    def run(self):
        print("B run!")

    def finish(self):
        print("B finished!")

# all.py
from importlib import import_module
from inspect import getmembers
from pkgutil import iter_modules


class Run:
    def run_all(self, **kwargs):
        modules = iter_modules(["pack"])
        for module in modules:
            members = getmembers(import_module(f"pack.{module[1]}"))
            my_classes = [member for name, member in members if not name.startswith("_")]
            for cls in my_classes:
                c = cls()
                c.run()
                c.finish()


if __name__ == '__main__':
    run = Run()
    run.run_all()
</code></pre>
<p>The output is:</p>
<pre><code>A run!
A finished!
B run!
B finished!
</code></pre>
<p>However for this solution you have to note, that <code>getmembers</code> will return all members of module - including built-ins, and <em>imported entities to the modules</em> - so you will have to implement your own check to properly filter-out those unwanted (see simple <code>startswith</code> in my example).</p>
</div>
