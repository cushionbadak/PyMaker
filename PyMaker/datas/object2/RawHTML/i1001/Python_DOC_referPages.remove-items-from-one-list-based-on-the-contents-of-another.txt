<div class="post-text" itemprop="text">
<p>I am trying to remove all entities in one list from another.</p>
<p>One of the lists is a <strong>list of lists.</strong></p>
<p>Whilst another is a <strong>list of tuples</strong>.</p>
<pre><code>ScoutNameList = [[('Rory', 'Adair')], [('Fiona', 'Adair')]]
ScoutNamedFromPatrol = [('Rory', 'Adair'), ('Fiona', 'Adair'), ('Ruariri', 'OBrien')]
ScoutNamedFromPatrol.remove(ScoutNameList)
</code></pre>
<p><strong>Expected Result</strong></p>
<pre><code>ScoutNamedFromPatrol=[('Ruariri', 'OBrien')]
</code></pre>
<p><strong>Actual Result</strong></p>
<pre><code>ScoutNamed=[('Rory', 'Adair'), ('Fiona', 'Adair'), ('Ruariri', 'OBrien')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use a list comprehension. However, note that you have to flatten <code>ScoutNameList</code>, you can do that with <a href="https://docs.python.org/2/library/itertools.html#itertools.chain" rel="nofollow noreferrer"><code>itertools.chain</code></a>:</p>
<pre><code>[i for i in ScoutNamedFromPatrol if i not in chain(*ScoutNameList)]
#[('Ruariri', 'OBrien')]
</code></pre>
<p>Where:</p>
<pre><code>list(chain(*ScoutNameList))
#[('Rory', 'Adair'), ('Fiona', 'Adair')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<pre><code>&gt;&gt;&gt; for l in ScoutNameList:
    ScoutNamedFromPatrol.remove(l[0])
&gt;&gt;&gt; ScoutNamedFromPatrol
[('Ruariri', 'OBrien')]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>You can use list comprehensions - </p>
<pre><code>ScoutNamedFromPatrol = [s for s in ScoutNamedFromPatrol if [s] not in ScoutNameList]
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>If order is not important, you can use <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.difference" rel="nofollow noreferrer"><code>set.difference</code></a> or its syntactic sugar <code>-</code>. Since <code>ScoutNameList</code> is nested, with each sublist containing a single item, you can use <a href="https://docs.python.org/3/library/operator.html#operator.itemgetter" rel="nofollow noreferrer"><code>operator.itemgetter</code></a> with <a href="https://docs.python.org/3/library/functions.html#map" rel="nofollow noreferrer"><code>map</code></a> to construct an iterable of scalars.</p>
<pre><code>from operator import itemgetter

res = list(set(ScoutNamedFromPatrol) - set(map(itemgetter(0), ScoutNameList)))
# [('Ruariri', 'OBrien')]
</code></pre>
<p>A less <a href="https://en.wikipedia.org/wiki/Functional_programming" rel="nofollow noreferrer">functional</a> alternative suggested by @TrebuchetMS:</p>
<pre><code>res = list(set(ScoutNamedFromPatrol) - set(x[0] for x in ScoutNameList))
</code></pre>
<p>A more adaptable version can deal with multiple items in <em>inner</em> lists of <code>ScoutNameList</code>:</p>
<pre><code>from itertools import chain
res = list(set(ScoutNamedFromPatrol) - set(chain.from_iterable(ScoutNameList)))
</code></pre>
</div>
<div class="post-text" itemprop="text">
<p>try this </p>
<pre><code>ScoutNameList = [[('Rory', 'Adair')], [('Fiona', 'Adair')]]
ScoutNamedFromPatrol = [('Rory', 'Adair'), ('Fiona', 'Adair'), ('Ruariri', 'OBrien')]
for x in ScoutNameList:
    for y in x:
        if y in ScoutNamedFromPatrol:

            ScoutNamedFromPatrol.remove(y)

print(ScoutNamedFromPatrol)
</code></pre>
</div>
<span class="comment-copy">Missed <code>[]</code> in the answer - try it now</span>
