<div class="post-text" itemprop="text">
<p>Recently I came across this <code>list comprehension</code> code from a python book:</p>
<pre><code>['%s="%s"' % item for item in attrs.items()]
</code></pre>
<p>when passing <code>'attrs = {'size':'large', 'quantity':6}</code> it produces <code>['size="large"', 'quantity="6"']</code> as output. But I am confused as to which variable captures the keys and which one captures the values. </p>
<p>I understand that <code>attrs.items()</code> will produce <code>2-tuples</code> containing <code>keys</code> and <code>values</code>, but there is only one variable, (<code>items</code>) provided to capture it, then how does it work? Can someone please take its parts apart and explain what magic is going on here? It is all the more complex as there is some string formatting also going on here simultaneously. </p>
</div>
<div class="post-text" itemprop="text">
<p><code>item</code> is a tuple consisting of the key <em>and</em> the value:</p>
<pre><code>&gt;&gt;&gt; for item in attrs.item():
...  print item
('size', 'large')
('quantity', 6)
</code></pre>
<p>Since <code>item</code> is a tuple, it can be used directly as the right-hand argument for <code>%</code>, and its elements are consumed in order by the format string.</p>
<pre><code>&gt;&gt;&gt; "%s=%s" % item  # equivalent to "%s=%s" % ('size', 'large'), for example
"size=large"
</code></pre>
<p>(This is the reason why it is recommended that you always use an <em>expicit</em> tuple with <code>%</code> if you aren't positive that an argument isn't already a tuple. For example, if <code>foo=('a', 'b')</code>, then <code>"%s" % foo</code> would produce an error, but <code>"%s" % (foo,)</code> would produce <code>"('a', 'b')"</code> as presumably expected.)</p>
</div>
<div class="post-text" itemprop="text">
<pre><code>print "%s %s %s %s" % ("It","works","like","this")
</code></pre>
<p>Output:</p>
<pre><code>It works like this
</code></pre>
<hr/>
<p>But you should probably switch to <code>str.format()</code> syntax on 2.7+ :</p>
<ul>
<li><p><a href="https://docs.python.org/2/library/string.html#format-string-syntax" rel="nofollow noreferrer">https://docs.python.org/2/library/string.html#format-string-syntax</a></p>
<p><code>print ( "{} {} {} {}".format("It","works","like","this") )</code></p></li>
</ul>
<p>and to <code>f-strings</code> in python 3.6+:</p>
<ul>
<li><p><a href="https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals" rel="nofollow noreferrer">https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals</a></p>
<p><code>print ( f"{'It'} {'works'} {'like'} {'this'}" # makes no sense - but for consistency sake</code></p></li>
</ul>
<p>You might also want to visit <a href="https://pyformat.info/" rel="nofollow noreferrer">https://pyformat.info/</a> for mor input on how to format properly.</p>
</div>
<div class="post-text" itemprop="text">
<p><code>items()</code> returns tuples of <code>key, value</code>, and then the tuple is passed as parameter to the <code>%</code> operator, so it gets used to replace the placeholders in the string.</p>
</div>
<span class="comment-copy">For Python 3.6+, IMO f-strings (PEP 498) should be the first choice :)</span>
